head	1.26;
access;
symbols
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.25.0.6
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.4
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.24.0.18
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.16
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.14
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.10
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.8
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.6
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.4
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.19.0.6
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.17.0.4
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.2
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5;
locks; strict;
comment	@ * @;


1.26
date	2017.03.02.10.38.10;	author natano;	state Exp;
branches;
next	1.25;
commitid	EeVoCYFCx2tYicZQ;

1.25
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.24;
commitid	p4LJxGKbi0BU2cG6;

1.24
date	2011.04.04.10.17.13;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2011.01.05.07.37.09;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2011.01.04.23.08.55;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.07.16.21.43;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.08.27.16.45.46;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.05.24.16.40.18;	author jsg;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.21.19.36.17;	author mk;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.27.06.08.43;	author canacar;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.22.19.23.04;	author mk;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.19.19.14.11;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.05.07.00.37;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.05.06.36.37;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.05.06.26.44;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.05.06.00.25;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.19.14.43.54;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.10.00.57.54;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.19.17.08.40;	author grange;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.28.03.52.37;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.06.01.30.33;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.05.09.22.48;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.05.07.29.02;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.05.03.52.32;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Add a new sysctl machdep.lidaction. The sysctl works as follows:

machdep.lidaction=0	# do nothing
machdep.lidaction=1	# suspend
machdep.lidaction=2	# hibernate

lidsuspend is just an alias for lidaction, so if you change one, the
other one will have the same value. The plan is to remove
machdep.lidsuspend eventually when people have upgraded their
/ets/sysctl.conf.

discussed with deraadt, who came up with the new MIB name
no objections mlarkin
ok stsp halex jcs
@
text
@/*	$OpenBSD: aps.c,v 1.25 2015/03/14 03:38:47 jsg Exp $	*/
/*
 * Copyright (c) 2005 Jonathan Gray <jsg@@openbsd.org>
 * Copyright (c) 2008 Can Erkin Acar <canacar@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * A driver for the ThinkPad Active Protection System based on notes from
 * http://www.almaden.ibm.com/cs/people/marksmith/tpaps.html
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/sensors.h>
#include <sys/timeout.h>
#include <machine/bus.h>
#include <sys/event.h>

#include <dev/isa/isavar.h>

#ifdef __i386__
#include "apm.h"
#include <machine/acpiapm.h>
#include <machine/biosvar.h>
#include <machine/apmvar.h>
#endif

#if defined(APSDEBUG)
#define DPRINTF(x)		do { printf x; } while (0)
#else
#define DPRINTF(x)
#endif


/*
 * EC interface on Thinkpad Laptops, from Linux HDAPS driver notes.
 * From Renesans H8S/2140B Group Hardware Manual
 * http://documentation.renesas.com/eng/products/mpumcu/rej09b0300_2140bhm.pdf
 *
 * EC uses LPC Channel 3 registers TWR0..15
 */

/* STR3 status register */
#define APS_STR3		0x04

#define APS_STR3_IBF3B	0x80	/* Input buffer full (host->slave) */
#define APS_STR3_OBF3B	0x40	/* Output buffer full (slave->host)*/
#define APS_STR3_MWMF	0x20	/* Master write mode */
#define APS_STR3_SWMF	0x10	/* Slave write mode */


/* Base address of TWR registers */
#define APS_TWR_BASE		0x10
#define APS_TWR_RET		0x1f

/* TWR registers */
#define APS_CMD			0x00
#define APS_ARG1		0x01
#define APS_ARG2		0x02
#define APS_ARG3		0x03
#define APS_RET			0x0f

/* Sensor values */
#define APS_STATE		0x01
#define	APS_XACCEL		0x02
#define APS_YACCEL		0x04
#define APS_TEMP		0x06
#define	APS_XVAR		0x07
#define APS_YVAR		0x09
#define APS_TEMP2		0x0b
#define APS_UNKNOWN		0x0c
#define APS_INPUT		0x0d

/* write masks for I/O, send command + 0-3 arguments*/
#define APS_WRITE_0		0x0001
#define APS_WRITE_1		0x0003
#define APS_WRITE_2		0x0007
#define APS_WRITE_3		0x000f

/* read masks for I/O, read 0-3 values (skip command byte) */
#define APS_READ_0		0x0000
#define APS_READ_1		0x0002
#define APS_READ_2		0x0006
#define APS_READ_3		0x000e

#define APS_READ_RET		0x8000
#define APS_READ_ALL		0xffff

/* Bit definitions for APS_INPUT value */
#define APS_INPUT_KB		(1 << 5)
#define APS_INPUT_MS		(1 << 6)
#define APS_INPUT_LIDOPEN	(1 << 7)

#define APS_ADDR_SIZE		0x1f

struct sensor_rec {
	u_int8_t	state;
	u_int16_t	x_accel;
	u_int16_t	y_accel;
	u_int8_t	temp1;
	u_int16_t	x_var;
	u_int16_t	y_var;
	u_int8_t	temp2;
	u_int8_t	unk;
	u_int8_t	input;
};

#define APS_NUM_SENSORS		9

#define APS_SENSOR_XACCEL	0
#define APS_SENSOR_YACCEL	1
#define APS_SENSOR_XVAR		2
#define APS_SENSOR_YVAR		3
#define APS_SENSOR_TEMP1	4
#define APS_SENSOR_TEMP2	5
#define APS_SENSOR_KBACT	6
#define APS_SENSOR_MSACT	7
#define APS_SENSOR_LIDOPEN	8

struct aps_softc {
	struct device sc_dev;

	bus_space_tag_t aps_iot;
	bus_space_handle_t aps_ioh;

	struct ksensor sensors[APS_NUM_SENSORS];
	struct ksensordev sensordev;
	void (*refresh_sensor_data)(struct aps_softc *);

	struct sensor_rec aps_data;
};

int	 aps_match(struct device *, void *, void *);
void	 aps_attach(struct device *, struct device *, void *);
int	 aps_activate(struct device *, int);

int	 aps_init(bus_space_tag_t, bus_space_handle_t);
int	 aps_read_data(struct aps_softc *);
void	 aps_refresh_sensor_data(struct aps_softc *);
void	 aps_refresh(void *);
int	 aps_do_io(bus_space_tag_t, bus_space_handle_t,
		   unsigned char *, int, int);

struct cfattach aps_ca = {
	sizeof(struct aps_softc),
	aps_match, aps_attach, NULL, aps_activate
};

struct cfdriver aps_cd = {
	NULL, "aps", DV_DULL
};

struct timeout aps_timeout;



/* properly communicate with the controller, writing a set of memory
 * locations and reading back another set  */
int
aps_do_io(bus_space_tag_t iot, bus_space_handle_t ioh,
	  unsigned char *buf, int wmask, int rmask)
{
	int bp, stat, n;

	DPRINTF(("aps_do_io: CMD: 0x%02x, wmask: 0x%04x, rmask: 0x%04x\n",
	       buf[0], wmask, rmask));

	/* write init byte using arbitration */     
	for (n = 0; n < 100; n++) {
		stat = bus_space_read_1(iot, ioh, APS_STR3);
		if (stat & (APS_STR3_OBF3B | APS_STR3_SWMF)) {
			bus_space_read_1(iot, ioh, APS_TWR_RET);
			continue;
		}
		bus_space_write_1(iot, ioh, APS_TWR_BASE, buf[0]);
		stat = bus_space_read_1(iot, ioh, APS_STR3);
		if (stat & (APS_STR3_MWMF))
			break;
		delay(1);
	}

	if (n == 100) {
		DPRINTF(("aps_do_io: Failed to get bus\n"));
		return (1);
	}

	/* write data bytes, init already sent */
	/* make sure last bye is always written as this will trigger slave */
	wmask |= APS_READ_RET;
	buf[APS_RET] = 0x01;

	for (n = 1, bp = 2; n < 16; bp <<= 1, n++) {
		if (wmask & bp) {
			bus_space_write_1(iot, ioh, APS_TWR_BASE + n, buf[n]);
			DPRINTF(("aps_do_io:  write %2d 0x%02x\n", n, buf[n]));
		}
	}

	for (n = 0; n < 100; n++) {
		stat = bus_space_read_1(iot, ioh, APS_STR3);
		if (stat & (APS_STR3_OBF3B))
			break;
		delay(5 * 100);
	}

	if (n == 100) {
		DPRINTF(("aps_do_io: timeout waiting response\n"));
		return (1);
	}
	/* wait for data available */
	/* make sure to read the final byte to clear status */
	rmask |= APS_READ_RET;

	/* read cmd and data bytes */
	for (n = 0, bp = 1; n < 16; bp <<= 1, n++) {
		if (rmask & bp) {
			buf[n] = bus_space_read_1(iot, ioh, APS_TWR_BASE + n);
			DPRINTF(("aps_do_io:  read %2d 0x%02x\n", n, buf[n]));
		}
	}

	return (0);
}

int
aps_match(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;
	int iobase = ia->ipa_io[0].base;
	u_int8_t cr;
	unsigned char iobuf[16];

	if (bus_space_map(iot, iobase, APS_ADDR_SIZE, 0, &ioh)) {
		DPRINTF(("aps: can't map i/o space\n"));
		return (0);
	}
	/* get APS mode */
	iobuf[APS_CMD] = 0x13;
	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_0, APS_READ_1)) {
		bus_space_unmap(iot, ioh, APS_ADDR_SIZE);
		return (0);
	}

	/*
	 * Observed values from Linux driver:
	 * 0x01: T42
	 * 0x02: chip already initialised
	 * 0x03: T41
	 * 0x05: T61
	 */

	cr = iobuf[APS_ARG1];
	DPRINTF(("aps: state register 0x%x\n", cr));

	if (aps_init(iot, ioh)) {
		bus_space_unmap(iot, ioh, APS_ADDR_SIZE);
		return (0);
	}

	bus_space_unmap(iot, ioh, APS_ADDR_SIZE);

	if (iobuf[APS_RET] != 0 || cr < 1 || cr > 5) {
		DPRINTF(("aps0: unsupported state %d\n", cr));
		return (0);
	}

	ia->ipa_nio = 1;
	ia->ipa_io[0].length = APS_ADDR_SIZE;
	ia->ipa_nmem = 0;
	ia->ipa_nirq = 0;
	ia->ipa_ndrq = 0;
	return (1);
}

void
aps_attach(struct device *parent, struct device *self, void *aux)
{
	struct aps_softc *sc = (void *)self;
	int iobase, i;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	struct isa_attach_args *ia = aux;

	iobase = ia->ipa_io[0].base;
	iot = sc->aps_iot = ia->ia_iot;

	if (bus_space_map(iot, iobase, APS_ADDR_SIZE, 0, &sc->aps_ioh)) {
		printf(": can't map i/o space\n");
		return;
	}

	ioh = sc->aps_ioh;

	printf("\n");

	sc->sensors[APS_SENSOR_XACCEL].type = SENSOR_INTEGER;
	snprintf(sc->sensors[APS_SENSOR_XACCEL].desc,
	    sizeof(sc->sensors[APS_SENSOR_XACCEL].desc), "X_ACCEL");

	sc->sensors[APS_SENSOR_YACCEL].type = SENSOR_INTEGER;
	snprintf(sc->sensors[APS_SENSOR_YACCEL].desc,
	    sizeof(sc->sensors[APS_SENSOR_YACCEL].desc), "Y_ACCEL");

	sc->sensors[APS_SENSOR_TEMP1].type = SENSOR_TEMP;
	sc->sensors[APS_SENSOR_TEMP2].type = SENSOR_TEMP;

	sc->sensors[APS_SENSOR_XVAR].type = SENSOR_INTEGER;
	snprintf(sc->sensors[APS_SENSOR_XVAR].desc,
	    sizeof(sc->sensors[APS_SENSOR_XVAR].desc), "X_VAR");

	sc->sensors[APS_SENSOR_YVAR].type = SENSOR_INTEGER;
	snprintf(sc->sensors[APS_SENSOR_YVAR].desc,
	    sizeof(sc->sensors[APS_SENSOR_YVAR].desc), "Y_VAR");

	sc->sensors[APS_SENSOR_KBACT].type = SENSOR_INDICATOR;
	snprintf(sc->sensors[APS_SENSOR_KBACT].desc,
	    sizeof(sc->sensors[APS_SENSOR_KBACT].desc), "Keyboard Active");

	sc->sensors[APS_SENSOR_MSACT].type = SENSOR_INDICATOR;
	snprintf(sc->sensors[APS_SENSOR_MSACT].desc,
	    sizeof(sc->sensors[APS_SENSOR_MSACT].desc), "Mouse Active");

	sc->sensors[APS_SENSOR_LIDOPEN].type = SENSOR_INDICATOR;
	snprintf(sc->sensors[APS_SENSOR_LIDOPEN].desc,
	    sizeof(sc->sensors[APS_SENSOR_LIDOPEN].desc), "Lid Open");

	/* stop hiding and report to the authorities */
	strlcpy(sc->sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sensordev.xname));
	for (i = 0; i < APS_NUM_SENSORS ; i++) {
		sensor_attach(&sc->sensordev, &sc->sensors[i]);
	}
	sensordev_install(&sc->sensordev);

	/* Refresh sensor data every 0.5 seconds */
	timeout_set(&aps_timeout, aps_refresh, sc);
	timeout_add_msec(&aps_timeout, 500);
}

int
aps_init(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	unsigned char iobuf[16];


	/* command 0x17/0x81: check EC */
	iobuf[APS_CMD] = 0x17;
	iobuf[APS_ARG1] = 0x81;

	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_1, APS_READ_3))
		return (1);

	if (iobuf[APS_RET] != 0 ||iobuf[APS_ARG3] != 0)
		return (2);

	/* Test values from the Linux driver */
	if ((iobuf[APS_ARG1] != 0 || iobuf[APS_ARG2] != 0x60) &&
	    (iobuf[APS_ARG1] != 1 || iobuf[APS_ARG2] != 0))
		return (3);

	/* command 0x14: set power */
	iobuf[APS_CMD] = 0x14;
	iobuf[APS_ARG1] = 0x01;

	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_1, APS_READ_0))
		return (4);

	if (iobuf[APS_RET] != 0)
		return (5);

	/* command 0x10: set config (sample rate and order) */
	iobuf[APS_CMD] = 0x10;
	iobuf[APS_ARG1] = 0xc8;
	iobuf[APS_ARG2] = 0x00;
	iobuf[APS_ARG3] = 0x02;

	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_3, APS_READ_0))
		return (6);

	if (iobuf[APS_RET] != 0)
		return (7);

	/* command 0x11: refresh data */
	iobuf[APS_CMD] = 0x11;
	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_0, APS_READ_1))
		return (8);

	return (0);
}

int
aps_read_data(struct aps_softc *sc)
{
	bus_space_tag_t iot = sc->aps_iot;
	bus_space_handle_t ioh = sc->aps_ioh;
	unsigned char iobuf[16];

	/* command 0x11: refresh data */
	iobuf[APS_CMD] = 0x11;
	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_0, APS_READ_ALL))
		return (1);

	sc->aps_data.state = iobuf[APS_STATE];
	sc->aps_data.x_accel = iobuf[APS_XACCEL] + 256 * iobuf[APS_XACCEL + 1];
	sc->aps_data.y_accel = iobuf[APS_YACCEL] + 256 * iobuf[APS_YACCEL + 1];
	sc->aps_data.temp1 = iobuf[APS_TEMP];
	sc->aps_data.x_var = iobuf[APS_XVAR] + 256 * iobuf[APS_XVAR + 1];
	sc->aps_data.y_var = iobuf[APS_YVAR] + 256 * iobuf[APS_YVAR + 1];
	sc->aps_data.temp2 = iobuf[APS_TEMP2];
	sc->aps_data.input = iobuf[APS_INPUT];

	return (0);
}

void
aps_refresh_sensor_data(struct aps_softc *sc)
{
	int64_t temp;
	int i;
#if NAPM > 0
	extern int lid_action;
	extern int apm_lidclose;
#endif

	if (aps_read_data(sc))
		return;

	for (i = 0; i < APS_NUM_SENSORS; i++) {
		sc->sensors[i].flags &= ~SENSOR_FINVALID;
	}

	sc->sensors[APS_SENSOR_XACCEL].value = sc->aps_data.x_accel;
	sc->sensors[APS_SENSOR_YACCEL].value = sc->aps_data.y_accel;

	/* convert to micro (mu) degrees */
	temp = sc->aps_data.temp1 * 1000000;	
	/* convert to kelvin */
	temp += 273150000; 
	sc->sensors[APS_SENSOR_TEMP1].value = temp;

	/* convert to micro (mu) degrees */
	temp = sc->aps_data.temp2 * 1000000;	
	/* convert to kelvin */
	temp += 273150000; 
	sc->sensors[APS_SENSOR_TEMP2].value = temp;

	sc->sensors[APS_SENSOR_XVAR].value = sc->aps_data.x_var;
	sc->sensors[APS_SENSOR_YVAR].value = sc->aps_data.y_var;
	sc->sensors[APS_SENSOR_KBACT].value =
	    (sc->aps_data.input &  APS_INPUT_KB) ? 1 : 0;
	sc->sensors[APS_SENSOR_MSACT].value =
	    (sc->aps_data.input & APS_INPUT_MS) ? 1 : 0;
#if NAPM > 0
	if (lid_action &&
	    (sc->sensors[APS_SENSOR_LIDOPEN].value == 1) &&
	    (sc->aps_data.input & APS_INPUT_LIDOPEN) == 0)
		/* Inform APM that the lid has closed */
		apm_lidclose = 1;
#endif
	sc->sensors[APS_SENSOR_LIDOPEN].value =
	    (sc->aps_data.input & APS_INPUT_LIDOPEN) ? 1 : 0;
}

void
aps_refresh(void *arg)
{
	struct aps_softc *sc = (struct aps_softc *)arg;

	aps_refresh_sensor_data(sc);
	timeout_add_msec(&aps_timeout, 500);
}

int
aps_activate(struct device *self, int act)
{
	struct aps_softc *sc = (struct aps_softc *)self;
	bus_space_tag_t iot = sc->aps_iot;
	bus_space_handle_t ioh = sc->aps_ioh;
	unsigned char iobuf[16];

	/* check if we bombed during attach */
	if (!timeout_initialized(&aps_timeout))
		return (0);

	switch (act) {
	case DVACT_SUSPEND:
		timeout_del(&aps_timeout);
		break;
	case DVACT_RESUME:
		/*
		 * Redo the init sequence on resume, because APS is 
		 * as forgetful as it is deaf.
		 */

		/* get APS mode */
		iobuf[APS_CMD] = 0x13;
		aps_do_io(iot, ioh, iobuf, APS_WRITE_0, APS_READ_1);

		aps_init(iot, ioh);
		timeout_add_msec(&aps_timeout, 500);
		break;
	}
	return (0);
}
@


1.25
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.24 2011/04/04 10:17:13 deraadt Exp $	*/
d437 1
a437 1
	extern int lid_suspend;
d470 1
a470 1
	if (lid_suspend &&
@


1.24
log
@Hit this code with a big hammer.  It now works on the X201/T510 series
machines after warm boot or resume.  Some of the checks being made were
nonsense.  Also tested by claudio and guenther.
ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.23 2011/01/05 07:37:09 deraadt Exp $	*/
a32 1
#include <dev/isa/isareg.h>
@


1.23
log
@remove debug code
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.22 2011/01/04 23:08:55 deraadt Exp $	*/
d243 2
a244 1
	bus_space_tag_t iot;
d246 1
a246 2
	struct isa_attach_args *ia = aux;
	int iobase;
a247 1

a249 3
	iot = ia->ia_iot;
	iobase = ia->ipa_io[0].base;

a253 4


	/* See if this machine has APS */

d270 6
a277 1
	DPRINTF(("aps: state register 0x%x\n", cr));
a288 1

a312 3
	if (aps_init(iot, ioh))
		goto out;

a354 4
	return;
out:
	printf("%s: failed to initialize\n", sc->sc_dev.dv_xname);
	return;
d371 1
a371 1
		return (1);
d376 1
a376 1
		return (1);
d383 1
a383 1
		return (1);
d386 1
a386 1
		return (1);
d395 1
a395 1
		return (1);
d398 1
a398 1
		return (1);
d403 1
a403 3
		return (1);
	if (iobuf[APS_ARG1] != 0)
		return (1);
d498 4
d514 4
a517 5
		if (aps_do_io(iot, ioh, iobuf, APS_WRITE_0, APS_READ_1) ||
		    aps_init(iot, ioh))
			printf("aps: failed to wake up\n");
		else
			timeout_add_msec(&aps_timeout, 500);
@


1.22
log
@Support machdep.lidsuspend support in apm(4) land, at least on thinkpads
which have aps(4).  You can now turn off the BIOS option for lid suspends,
and control it with sysctl.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.21 2010/09/07 16:21:43 deraadt Exp $	*/
d486 1
a486 1
	    (sc->aps_data.input & APS_INPUT_LIDOPEN) == 0) {
a487 1
		printf("lid close\n");
a488 1
	}
@


1.21
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.20 2010/08/27 16:45:46 deraadt Exp $	*/
d31 1
d36 7
d450 4
d483 9
@


1.20
log
@Mutilate the powerhook function into an activate function, then create
a stub powerhook function to call it.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.19 2009/05/24 16:40:18 jsg Exp $	*/
a147 1
void	 aps_powerhook(int, void *);
a350 2
	powerhook_establish(aps_powerhook, (void *)sc);

a511 6
}

void
aps_powerhook(int why, void *arg)
{
	aps_activate(arg, why);
@


1.19
log
@make sure the array of chars we pass aps_do_io() in aps_match() is
unsigned, like all the other callers of aps_do_io in aps do.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.18 2009/04/21 19:36:17 mk Exp $	*/
d142 1
d148 1
a148 1
void	 aps_power(int, void *);
d154 1
a154 2
	aps_match,
	aps_attach
d352 1
a352 1
	powerhook_establish(aps_power, (void *)sc);
d487 2
a488 2
void
aps_power(int why, void *arg)
d490 1
a490 1
	struct aps_softc *sc = (struct aps_softc *)arg;
d495 2
a496 1
	if (why != PWR_RESUME) {
d498 15
a512 1
		return;
d514 2
a515 4
	/*
	 * Redo the init sequence on resume, because APS is 
	 * as forgetful as it is deaf.
	 */
d517 4
a520 7
	/* get APS mode */
	iobuf[APS_CMD] = 0x13;
	if (aps_do_io(iot, ioh, iobuf, APS_WRITE_0, APS_READ_1)
	    || aps_init(iot, ioh))
		printf("aps: failed to wake up\n");
	else
		timeout_add_msec(&aps_timeout, 500);
@


1.18
log
@Switch aps(4) to use timeout_add_msec() instead of timeout_add() with a
calculation of ticks.  Saves 26 bytes.

ok oga `fine' deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.17 2008/06/27 06:08:43 canacar Exp $	*/
d242 1
a242 1
	char iobuf[16];
@


1.17
log
@Access the embedded controller according to the documentation referenced
from the hdaps linux driver, and update model detection. Now works on
newer thinkpad models. Suggestions from jsg@@, tested by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.16 2008/05/22 19:23:04 mk Exp $	*/
d356 1
a356 1
	timeout_add(&aps_timeout, (5 * hz) / 10);
d484 1
a484 1
	timeout_add(&aps_timeout, (5 * hz) / 10);
d510 1
a510 1
		timeout_add(&aps_timeout, (5 * hz) / 10);
@


1.16
log
@More timeout(9) usage cleaned up.

ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.15 2007/05/19 19:14:11 tedu Exp $	*/
d4 1
a40 12
#define APS_ACCEL_STATE		0x04
#define APS_INIT		0x10
#define APS_STATE		0x11
#define	APS_XACCEL		0x12
#define APS_YACCEL		0x14
#define APS_TEMP		0x16
#define	APS_XVAR		0x17
#define APS_YVAR		0x19
#define APS_TEMP2		0x1b
#define APS_UNKNOWN		0x1c
#define APS_INPUT		0x1d
#define APS_CMD			0x1f
d42 50
a91 1
#define	APS_STATE_NEWDATA	0x50
d93 2
a94 1
#define APS_CMD_START		0x01
d96 1
a143 1
u_int8_t aps_mem_read_1(bus_space_tag_t, bus_space_handle_t, int, u_int8_t);
d145 1
a145 1
void	 aps_refresh_sensor_data(struct aps_softc *sc);
d148 2
d163 70
d239 1
a239 1
	int iobase, i;
d242 2
d252 1
a253 7
	bus_space_write_1(iot, ioh, APS_INIT, 0x13);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);

	/* ask again as the X40 is slightly deaf in one ear */
	bus_space_read_1(iot, ioh, APS_CMD);
	bus_space_write_1(iot, ioh, APS_INIT, 0x13);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
d255 3
a257 1
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00)) {
d267 1
d269 3
a271 7
	for (i = 0; i < 10; i++) {
		cr = bus_space_read_1(iot, ioh, APS_STATE);
		if (cr > 0 && cr < 6)
			break;
		delay(5 * 1000);
	}
	
d274 2
a275 1
	if (cr < 1 || cr > 5) {
d310 1
a310 1
	if (!aps_init(iot, ioh))
d359 1
a359 1
	printf("%s: failed to initialise\n", sc->sc_dev.dv_xname);
d366 39
a404 30
	bus_space_write_1(iot, ioh, APS_INIT, 0x17);
	bus_space_write_1(iot, ioh, APS_STATE, 0x81);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00))
		return (0);
	if (!aps_mem_read_1(iot, ioh, APS_STATE, 0x00))
		return (0);
	if (!aps_mem_read_1(iot, ioh, APS_XACCEL, 0x60))
		return (0);
	if (!aps_mem_read_1(iot, ioh, APS_XACCEL + 1, 0x00))
		return (0);
	bus_space_write_1(iot, ioh, APS_INIT, 0x14);
	bus_space_write_1(iot, ioh, APS_STATE, 0x01);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00))
		return (0);
	bus_space_write_1(iot, ioh, APS_INIT, 0x10);
	bus_space_write_1(iot, ioh, APS_STATE, 0xc8);
	bus_space_write_1(iot, ioh, APS_XACCEL, 0x00);
	bus_space_write_1(iot, ioh, APS_XACCEL + 1, 0x02);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00))
		return (0);
	/* refresh data */
	bus_space_write_1(iot, ioh, APS_INIT, 0x11);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_ACCEL_STATE, 0x50))
		return (0);
	if (!aps_mem_read_1(iot, ioh, APS_STATE, 0x00))
		return (0);
d406 6
a411 2
	return (1);
}
a412 14
u_int8_t
aps_mem_read_1(bus_space_tag_t iot, bus_space_handle_t ioh, int reg,
    u_int8_t val)
{
	int i;
	u_int8_t cr;
	/* should take no longer than 50 microseconds */
	for (i = 0; i < 10; i++) {
		cr = bus_space_read_1(iot, ioh, reg);
		if (cr == val)
			return (1);
		delay(5 * 1000);
	}
	DPRINTF(("aps: reg 0x%x not val 0x%x!\n", reg, val));
d421 1
d423 13
a435 8
	sc->aps_data.state = bus_space_read_1(iot, ioh, APS_STATE);
	sc->aps_data.x_accel = bus_space_read_2(iot, ioh, APS_XACCEL);
	sc->aps_data.y_accel = bus_space_read_2(iot, ioh, APS_YACCEL);
	sc->aps_data.temp1 = bus_space_read_1(iot, ioh, APS_TEMP);
	sc->aps_data.x_var = bus_space_read_2(iot, ioh, APS_XVAR);
	sc->aps_data.y_var = bus_space_read_2(iot, ioh, APS_YVAR);
	sc->aps_data.temp2 = bus_space_read_1(iot, ioh, APS_TEMP2);
	sc->aps_data.input = bus_space_read_1(iot, ioh, APS_INPUT);
d437 1
a437 1
	return (1);
a442 2
	bus_space_tag_t iot = sc->aps_iot;
	bus_space_handle_t ioh = sc->aps_ioh;
d446 1
a446 4
	/* ask for new data */
	bus_space_write_1(iot, ioh, APS_INIT, 0x11);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_ACCEL_STATE, 0x50))
a447 7
	aps_read_data(sc);
	bus_space_write_1(iot, ioh, APS_INIT, 0x11);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);

	/* tell accelerometer we're done reading from it */
	bus_space_read_1(iot, ioh, APS_CMD);
	bus_space_read_1(iot, ioh, APS_ACCEL_STATE);
d493 1
d497 1
a497 16
	} else {
		/*
		 * Redo the init sequence on resume, because APS is 
		 * as forgetful as it is deaf.
		 */
		bus_space_write_1(iot, ioh, APS_INIT, 0x13);
		bus_space_write_1(iot, ioh, APS_CMD, 0x01);
		bus_space_read_1(iot, ioh, APS_CMD);
		bus_space_write_1(iot, ioh, APS_INIT, 0x13);
		bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	
		if (aps_mem_read_1(iot, ioh, APS_CMD, 0x00) &&
		    aps_init(iot, ioh))
			timeout_add(&aps_timeout, (5 * hz) / 10);
		else
			printf("aps: failed to wake up\n");
d499 12
a511 1

@


1.15
log
@the thinkpad 60 models are in "state" 5.
ok deraadt jasper jsg mk
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.14 2007/03/22 16:55:31 deraadt Exp $	*/
d395 1
a395 2
		if (timeout_pending(&aps_timeout))
			timeout_del(&aps_timeout);
@


1.14
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.13 2007/01/05 07:00:37 jsg Exp $	*/
d161 1
a161 1
		if (cr > 0 && cr < 4)
d168 1
a168 1
	if (cr < 1 || cr > 3) {
@


1.13
log
@Don't pollute userspace with uneeded headers.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.12 2007/01/05 06:36:37 jsg Exp $	*/
d93 2
a94 2
	struct sensor sensors[APS_NUM_SENSORS];
	struct sensordev sensordev;
@


1.12
log
@Remove unknown sensor that seems to always be fixed at 7
on all ThinkPad models.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.11 2007/01/05 06:26:44 jsg Exp $	*/
a33 3
#include <dev/isa/apsreg.h>
#include <dev/isa/apsvar.h>

d40 62
a101 2
int aps_match(struct device *, void *, void *);
void aps_attach(struct device *, struct device *, void *);
d103 1
a103 1
int aps_init(bus_space_tag_t, bus_space_handle_t);
d105 4
a108 4
int aps_read_data(struct aps_softc *);
void aps_refresh_sensor_data(struct aps_softc *sc);
void aps_refresh(void *);
void aps_power(int, void *);
@


1.11
log
@Switch to indicator type for sensors with boolean values.
From Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.10 2007/01/05 06:00:25 jsg Exp $	*/
a167 4
	sc->sensors[APS_SENSOR_UNK].type = SENSOR_INTEGER;
	snprintf(sc->sensors[APS_SENSOR_UNK].desc,
	    sizeof(sc->sensors[APS_SENSOR_UNK].desc), "unknown");

a265 1
	sc->aps_data.unk = bus_space_read_1(iot, ioh, APS_UNKNOWN);
a312 1
	sc->sensors[APS_SENSOR_UNK].value = sc->aps_data.unk;
@


1.10
log
@Change slightly to not need one of the softc members.
From Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.9 2006/12/23 17:46:39 deraadt Exp $	*/
a157 1

d172 1
a172 1
	sc->sensors[APS_SENSOR_KBACT].type = SENSOR_INTEGER;
d176 1
a176 1
	sc->sensors[APS_SENSOR_MSACT].type = SENSOR_INTEGER;
d180 1
a180 1
	sc->sensors[APS_SENSOR_LIDOPEN].type = SENSOR_INTEGER;
@


1.9
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.8 2006/06/19 14:43:54 kettenis Exp $	*/
a148 2
	sc->numsensors = APS_NUM_SENSORS;

d188 1
a188 1
	for (i = 0; i < sc->numsensors; i++) {
@


1.8
log
@Do not bother initializing the rfact member of `struct sensor'; it is on its
way out anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.7 2006/04/10 00:57:54 deraadt Exp $	*/
a159 2
	snprintf(sc->sensors[APS_SENSOR_TEMP1].desc,
	    sizeof(sc->sensors[APS_SENSOR_TEMP1].desc), "Temp 1");
a161 2
	snprintf(sc->sensors[APS_SENSOR_TEMP2].desc,
	    sizeof(sc->sensors[APS_SENSOR_TEMP2].desc), "Temp 2");
d188 2
d191 1
a191 3
		strlcpy(sc->sensors[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sensors[i].device));
		sensor_add(&sc->sensors[i]);
d193 1
@


1.7
log
@unify temperature sensor names much more
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.6 2006/01/19 17:08:40 grange Exp $	*/
a153 1
	sc->sensors[APS_SENSOR_XACCEL].rfact = 1;
a157 1
	sc->sensors[APS_SENSOR_YACCEL].rfact = 1;
a169 1
	sc->sensors[APS_SENSOR_XVAR].rfact = 1;
a173 1
	sc->sensors[APS_SENSOR_YVAR].rfact = 1;
a177 1
	sc->sensors[APS_SENSOR_YVAR].rfact = 1;
a181 1
	sc->sensors[APS_SENSOR_KBACT].rfact = 1;
a185 1
	sc->sensors[APS_SENSOR_MSACT].rfact = 1;
a189 1
	sc->sensors[APS_SENSOR_LIDOPEN].rfact = 1;
@


1.6
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.5 2005/08/28 03:52:37 djm Exp $	*/
d163 1
a163 1
	    sizeof(sc->sensors[APS_SENSOR_TEMP1].desc), "Temp1");
d167 1
a167 1
	    sizeof(sc->sensors[APS_SENSOR_TEMP2].desc), "Temp2");
d186 1
a186 1
	    sizeof(sc->sensors[APS_SENSOR_KBACT].desc), "KBD_ACT");
d191 1
a191 1
	    sizeof(sc->sensors[APS_SENSOR_MSACT].desc), "MS_ACT");
d196 1
a196 1
	    sizeof(sc->sensors[APS_SENSOR_LIDOPEN].desc), "LID_OPEN");
@


1.5
log
@wake aps up on resume from suspend/standby; ok deraadt@@
tested by jsg@@ naddy@@ and some helpful souls on tech@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.4 2005/08/06 01:30:33 jsg Exp $	*/
d203 1
a203 1
		SENSOR_ADD(&sc->sensors[i]);
@


1.4
log
@Improved X40 kludge, tested by djm@@.
Any X40 users still having problems after this mail me.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.3 2005/08/05 09:22:48 jsg Exp $	*/
d46 1
d51 1
d146 1
a146 29
	bus_space_write_1(iot, ioh, APS_INIT, 0x17);
	bus_space_write_1(iot, ioh, APS_STATE, 0x81);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00))
		goto out;
	if (!aps_mem_read_1(iot, ioh, APS_STATE, 0x00))
		goto out;
	if (!aps_mem_read_1(iot, ioh, APS_XACCEL, 0x60))
		goto out;
	if (!aps_mem_read_1(iot, ioh, APS_XACCEL + 1, 0x00))
		goto out;
	bus_space_write_1(iot, ioh, APS_INIT, 0x14);
	bus_space_write_1(iot, ioh, APS_STATE, 0x01);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00))
		goto out;
	bus_space_write_1(iot, ioh, APS_INIT, 0x10);
	bus_space_write_1(iot, ioh, APS_STATE, 0xc8);
	bus_space_write_1(iot, ioh, APS_XACCEL, 0x00);
	bus_space_write_1(iot, ioh, APS_XACCEL + 1, 0x02);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_CMD, 0x00))
		goto out;
	/* refresh data */
	bus_space_write_1(iot, ioh, APS_INIT, 0x11);
	bus_space_write_1(iot, ioh, APS_CMD, 0x01);
	if (!aps_mem_read_1(iot, ioh, APS_ACCEL_STATE, 0x50))
		goto out;
	if (!aps_mem_read_1(iot, ioh, APS_STATE, 0x00))
d206 2
d217 37
d349 30
@


1.3
log
@Correct URL. Noticed by Dries Schellekens <gwyllion at ulyssis.org>.
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.2 2005/08/05 07:29:02 jsg Exp $	*/
d85 1
@


1.2
log
@X40 has to be prodded a bit more to work.
tested by jolan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aps.c,v 1.1 2005/08/05 03:52:32 jsg Exp $	*/
d20 1
a20 1
 * http://www.almaden.ibm.com/cs/people/marksmith/aps.html
@


1.1
log
@Start of a driver for the "Active Protection System" accelerometer
found in recentish ThinkPads.

Sensors are reported via hw.sensors in sysctl but sensor numbers
and presence is likely to change.  Units and use of all of the
sensors is not yet known as IBM has not released any documentation.

Driver is based on information reverse engineered from the windows
driver by Anurag Sharma and Mark Smith.

"commit the code" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 5
@

