head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.10
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.10
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.8
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.40
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.38
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.36
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.32
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.34
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.30
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.28
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.26
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.24
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.22
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.20
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.18
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.16
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.14
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.12
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.10
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.11.0.8
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.6
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.4
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.10.0.8
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.6
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.14;
commitid	p4LJxGKbi0BU2cG6;

1.14
date	2013.06.12.19.07.39;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.16.17.20.07;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.21.17.41.03;	author mickey;	state Exp;
branches
	1.11.8.1;
next	1.10;

1.10
date	99.01.30.01.41.48;	author imp;	state Exp;
branches
	1.10.6.1;
next	1.9;

1.9
date	99.01.07.15.57.43;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.10.07.05.58.26;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.10.07.05.36.07;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.10.07.05.33.25;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.10.07.04.47.32;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.09.30.18.56.25;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.09.30.18.34.43;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.11.30.00.53.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.29.23.51.13;	author niklas;	state Exp;
branches;
next	;

1.10.6.1
date	2001.05.14.22.24.46;	author niklas;	state Exp;
branches;
next	1.10.6.2;

1.10.6.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	;

1.11.8.1
date	2002.06.11.03.42.21;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: lpt_isa.c,v 1.14 2013/06/12 19:07:39 deraadt Exp $	*/

/*
 * Copyright (c) 1993, 1994 Charles Hannum.
 * Copyright (c) 1990 William F. Jolitz, TeleMuse
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This software is a component of "386BSD" developed by 
 *	William F. Jolitz, TeleMuse.
 * 4. Neither the name of the developer nor the name "386BSD"
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS A COMPONENT OF 386BSD DEVELOPED BY WILLIAM F. JOLITZ 
 * AND IS INTENDED FOR RESEARCH AND EDUCATIONAL PURPOSES ONLY. THIS 
 * SOFTWARE SHOULD NOT BE CONSIDERED TO BE A COMMERCIAL PRODUCT. 
 * THE DEVELOPER URGES THAT USERS WHO REQUIRE A COMMERCIAL PRODUCT 
 * NOT MAKE USE OF THIS WORK.
 *
 * FOR USERS WHO WISH TO UNDERSTAND THE 386BSD SYSTEM DEVELOPED
 * BY WILLIAM F. JOLITZ, WE RECOMMEND THE USER STUDY WRITTEN 
 * REFERENCES SUCH AS THE  "PORTING UNIX TO THE 386" SERIES 
 * (BEGINNING JANUARY 1991 "DR. DOBBS JOURNAL", USA AND BEGINNING 
 * JUNE 1991 "UNIX MAGAZIN", GERMANY) BY WILLIAM F. JOLITZ AND 
 * LYNNE GREER JOLITZ, AS WELL AS OTHER BOOKS ON UNIX AND THE 
 * ON-LINE 386BSD USER MANUAL BEFORE USE. A BOOK DISCUSSING THE INTERNALS 
 * OF 386BSD ENTITLED "386BSD FROM THE INSIDE OUT" WILL BE AVAILABLE LATE 1992.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPER ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE DEVELOPER BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Device Driver for AT parallel printer port
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/isa/isavar.h>
#include <dev/ic/lptreg.h>
#include <dev/ic/lptvar.h>

int	lpt_isa_probe(struct device *, void *, void *);
void	lpt_isa_attach(struct device *, struct device *, void *);

struct cfattach lpt_isa_ca = {
	sizeof(struct lpt_softc), lpt_isa_probe, lpt_isa_attach, NULL,
	lpt_activate
};

/*
 * Logic:
 *	1) You should be able to write to and read back the same value
 *	   to the data port.  Do an alternating zeros, alternating ones,
 *	   walking zero, and walking one test to check for stuck bits.
 *
 *	2) You should be able to write to and read back the same value
 *	   to the control port lower 5 bits, the upper 3 bits are reserved
 *	   per the IBM PC technical reference manuals and different boards
 *	   do different things with them.  Do an alternating zeros, alternating
 *	   ones, walking zero, and walking one test to check for stuck bits.
 *
 *	   Some printers drag the strobe line down when the are powered off
 * 	   so this bit has been masked out of the control port test.
 *
 *	   XXX Some printers may not like a fast pulse on init or strobe, I
 *	   don't know at this point, if that becomes a problem these bits
 *	   should be turned off in the mask byte for the control port test.
 *
 *	3) Set the data and control ports to a value of 0
 */
int
lpt_isa_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
#if !defined(__NO_ISA_INTR_CHECK)
	struct isa_softc *sc = (struct isa_softc *)parent;
#endif
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_addr_t base;
	u_int8_t mask, data;
	int i, rv, iosz;

#ifdef DEBUG
#define	ABORT								     \
	do {								     \
		printf("lpt_isa_probe: mask %x data %x failed\n", mask,	     \
		    data);						     \
		goto out;						     \
	} while (0)
#else
#define	ABORT	goto out
#endif

	iot = ia->ia_iot;
	base = ia->ia_iobase;
	iosz = (ia->ia_iosize == 0x666) ? LPT_NPORTS : ia->ia_iosize;
	if (bus_space_map(iot, base, iosz, 0, &ioh))
		return 0;

	rv = 0;
	mask = 0xff;

	data = 0x55;				/* Alternating zeros */
	if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
		ABORT;

	data = 0xaa;				/* Alternating ones */
	if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
		ABORT;

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking zero */
		data = ~(1 << i);
		if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking one */
		data = (1 << i);
		if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	bus_space_write_1(iot, ioh, lpt_data, 0);
	bus_space_write_1(iot, ioh, lpt_control, 0);

	/*
	 * Check if the specified IRQ is available.  If not revert to
	 * polled mode.
	 */
#if !defined(__NO_ISA_INTR_CHECK)
	if (ia->ia_irq != IRQUNK &&
	    !isa_intr_check(sc->sc_ic, ia->ia_irq, IST_EDGE))
		ia->ia_irq = IRQUNK;
#endif
	ia->ia_msize = 0;
	ia->ia_iosize = iosz;

	rv = 1;

out:
	bus_space_unmap(iot, ioh, iosz);
	return rv;
}

void
lpt_isa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lpt_softc *sc = (void *)self;
	struct isa_attach_args *ia = aux;

	sc->sc_state = 0;
	sc->sc_iot = ia->ia_iot;
	if (bus_space_map(sc->sc_iot, ia->ia_iobase, ia->ia_iosize, 0,
	    &sc->sc_ioh))
		panic("lpt_isa_attach: couldn't map I/O ports");

	if (ia->ia_irq == IRQUNK) {
		sc->sc_flags |= LPT_POLLED;
		printf(": polled");
	}

	lpt_attach_common(sc);

	if (ia->ia_irq != IRQUNK)
		sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
		    IPL_TTY, lptintr, sc, sc->sc_dev.dv_xname);
}
@


1.14
log
@Add suspend/resume support to lpt.  Basically, ensure that DACT_SUSPEND
stops the timeouts, and that DVACT_RESUME unwedges the soft state and
bring the hardware state back to normal operation.
Tested by rpe, thanks a lot!
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.13 2011/09/16 17:20:07 miod Exp $	*/
a60 1
#include <machine/intr.h>
@


1.13
log
@Fix a bunch of typos: manaul, monnitor, machiune, autload.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.12 2002/03/14 01:26:56 millert Exp $	*/
d71 2
a72 1
	sizeof(struct lpt_softc), lpt_isa_probe, lpt_isa_attach
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.11 2000/07/21 17:41:03 mickey Exp $	*/
d82 1
a82 1
 *	   per the IBM PC technical reference manauls and different boards
@


1.11
log
@convert to new timeouts
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.10 1999/01/30 01:41:48 imp Exp $	*/
d67 2
a68 2
int	lpt_isa_probe __P((struct device *, void *, void *));
void	lpt_isa_attach __P((struct device *, struct device *, void *));
@


1.11.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.11 2000/07/21 17:41:03 mickey Exp $	*/
d67 2
a68 2
int	lpt_isa_probe(struct device *, void *, void *);
void	lpt_isa_attach(struct device *, struct device *, void *);
@


1.10
log
@

Make this build on architectures that define __NO_ISA_INTR_CHECK.
This is a hack, but so is __NO_ISA_INTR_CHECK.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.9 1999/01/07 15:57:43 niklas Exp $	*/
a178 2
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
d180 7
a186 3
	if (ia->ia_irq != IRQUNK)
		printf("\n");
	else {
d188 1
a188 1
		printf(": polled\n");
d191 1
a191 8
	sc->sc_state = 0;

	iot = sc->sc_iot = ia->ia_iot;
	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
		panic("lpt_isa_attach: couldn't map I/O ports");
	sc->sc_ioh = ioh;

	bus_space_write_1(iot, ioh, lpt_control, LPC_NINIT);
@


1.10.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.11 2000/07/21 17:41:03 mickey Exp $	*/
d179 9
d190 3
a192 3
	sc->sc_iot = ia->ia_iot;
	if (bus_space_map(sc->sc_iot, ia->ia_iobase, ia->ia_iosize, 0,
	    &sc->sc_ioh))
d194 1
d196 1
a196 6
	if (ia->ia_irq == IRQUNK) {
		sc->sc_flags |= LPT_POLLED;
		printf(": polled");
	}

	lpt_attach_common(sc);
@


1.10.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 2
a68 2
int	lpt_isa_probe(struct device *, void *, void *);
void	lpt_isa_attach(struct device *, struct device *, void *);
@


1.9
log
@revert to polled mode if configured irq is not available
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.8 1997/10/07 05:58:26 mickey Exp $	*/
d100 1
d102 1
d157 1
d161 1
a161 1

@


1.8
log
@the iosize is dummied to 0x666
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.7 1997/10/07 05:36:07 mickey Exp $	*/
d100 1
d150 8
@


1.7
log
@no, man! *probe sets iosize, according to the isa.c
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.6 1997/10/07 05:33:25 mickey Exp $	*/
d120 1
a120 1
	iosz = (ia->ia_iosize == -1) ? LPT_NPORTS : ia->ia_iosize;
@


1.6
log
@should work
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.5 1997/10/07 04:47:32 deraadt Exp $	*/
d151 1
a179 2
	if (ia->ia_iosize == -1)
		ia->ia_iosize = LPT_NPORTS;
@


1.5
log
@do not modify ia_iosize, use another temporary
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.4 1997/09/30 18:56:25 mickey Exp $	*/
a167 1
	int iosz;
d179 3
a181 2
	iosz = (ia->ia_iosize == -1) ? LPT_NPORTS : ia->ia_iosize;
	if (bus_space_map(iot, ia->ia_iobase, iosz, 0, &ioh))
@


1.4
log
@fix it better, use iosiz
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.3 1997/09/30 18:34:43 mickey Exp $	*/
d105 1
a105 1
	int i, rv;
d120 2
a121 3
	if (ia->ia_iosize == -1)
		ia->ia_iosize = LPT_NPORTS;
	if (bus_space_map(iot, base, ia->ia_iosize, 0, &ioh))
d155 1
a155 1
	bus_space_unmap(iot, ioh, ia->ia_iosize);
d168 1
d180 2
a181 1
	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
@


1.3
log
@special XXX for MDPA lpt port
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_isa.c,v 1.2 1996/11/30 00:53:38 niklas Exp $	*/
d105 1
a105 1
	int i, rv, nports;
d120 3
a122 2
	nports = (base == 0x3bc)? 4 : LPT_NPORTS;	/* XXX only 4 on MDPA */
	if (bus_space_map(iot, base, nports, 0, &ioh))
a150 1
	ia->ia_iosize = nports;
d156 1
a156 1
	bus_space_unmap(iot, ioh, nports);
@


1.2
log
@Cleaned up.  lpt is MI now.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d105 1
a105 1
	int i, rv;
d120 2
a121 1
	if (bus_space_map(iot, base, LPT_NPORTS, 0, &ioh))
d150 1
a150 1
	ia->ia_iosize = LPT_NPORTS;
d156 1
a156 1
	bus_space_unmap(iot, ioh, LPT_NPORTS);
d180 1
a180 1
	if (bus_space_map(iot, ia->ia_iobase, LPT_NPORTS, 0, &ioh))
@


1.1
log
@Missed in last bus.h commit
@
text
@d63 3
a65 1
#include <dev/isa/lptreg.h>
d67 2
a68 2
int lpt_isa_probe __P((struct device *, void *, void *));
void lpt_isa_attach __P((struct device *, struct device *, void *));
d74 21
d103 2
a104 2
	u_long base;
	u_char mask, data;
d171 2
a172 1
	else
d174 1
a175 2
	sc->sc_iobase = ia->ia_iobase;
	sc->sc_irq = ia->ia_irq;
d179 1
a179 1
	if (bus_space_map(iot, sc->sc_iobase, LPT_NPORTS, 0, &ioh))
@
