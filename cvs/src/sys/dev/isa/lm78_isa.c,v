head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.14
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.12
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.9;
commitid	p4LJxGKbi0BU2cG6;

1.9
date	2015.01.02.22.36.15;	author dlg;	state Exp;
branches;
next	1.8;
commitid	kxrK9olSD71qtj1L;

1.8
date	2014.12.19.13.53.08;	author krw;	state Exp;
branches;
next	1.7;
commitid	75ANJGA3RMiHZeVy;

1.7
date	2011.12.06.16.06.07;	author mpf;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.05.15.05.48;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.26.18.43.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.17.15.04.08;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.18.21.17.54;	author form;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.01.21.48.57;	author cnst;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.28.11.25.17;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: lm78_isa.c,v 1.9 2015/01/02 22:36:15 dlg Exp $	*/

/*
 * Copyright (c) 2005, 2006 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>
#include <machine/bus.h>

#include <dev/isa/isavar.h>

#include <dev/ic/lm78var.h>

/* ISA registers */
#define LMC_ADDR	0x05
#define LMC_DATA	0x06

extern struct cfdriver lm_cd;

#if defined(LMDEBUG)
#define DPRINTF(x)		do { printf x; } while (0)
#else
#define DPRINTF(x)
#endif

struct lm_isa_softc {
	struct lm_softc sc_lmsc;

	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
};

int  lm_isa_match(struct device *, void *, void *);
int  lm_wbsio_match(struct device *, void *, void *);
void lm_isa_attach(struct device *, struct device *, void *);
u_int8_t lm_isa_readreg(struct lm_softc *, int);
void lm_isa_writereg(struct lm_softc *, int, int);
void lm_isa_remove_alias(struct lm_softc *, const char *);

struct cfattach lm_isa_ca = {
	sizeof(struct lm_isa_softc),
	lm_isa_match,
	lm_isa_attach
};

struct cfattach lm_wbsio_ca = {
	sizeof(struct lm_isa_softc),
	lm_wbsio_match,
	lm_isa_attach
};

int
lm_wbsio_match(struct device *parent, void *match, void *aux)
{
	bus_space_tag_t iot;
	bus_addr_t iobase;
	bus_space_handle_t ioh;
	struct isa_attach_args *ia = aux;
	int banksel, vendid;

	iot = ia->ia_iot;
	iobase = ia->ipa_io[0].base;

	if (bus_space_map(iot, iobase, 8, 0, &ioh)) {
		DPRINTF(("%s: can't map i/o space\n", __func__));
		return (0);
	}

	/* Probe for Winbond chips. */
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_BANKSEL);
	banksel = bus_space_read_1(iot, ioh, LMC_DATA);
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_BANKSEL);
	bus_space_write_1(iot, ioh, LMC_DATA, WB_BANKSEL_HBAC);
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_VENDID);
	vendid = bus_space_read_1(iot, ioh, LMC_DATA) << 8;
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_BANKSEL);
	bus_space_write_1(iot, ioh, LMC_DATA, 0);
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_VENDID);
	vendid |= bus_space_read_1(iot, ioh, LMC_DATA);
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_BANKSEL);
	bus_space_write_1(iot, ioh, LMC_DATA, banksel);

	bus_space_unmap(iot, ioh, 8);

	if (vendid != WB_VENDID_WINBOND)
		return (0);

	ia->ipa_nio = 1;
	ia->ipa_io[0].length = 8;

	ia->ipa_nmem = 0;
	ia->ipa_nirq = 0;
	ia->ipa_ndrq = 0;

	return (1);

}

int
lm_isa_match(struct device *parent, void *match, void *aux)
{
	bus_space_tag_t iot;
	bus_addr_t iobase;
	bus_space_handle_t ioh;
	struct isa_attach_args *ia = aux;
	int banksel, vendid, chipid, addr;

	iot = ia->ia_iot;
	iobase = ia->ipa_io[0].base;

	if (bus_space_map(iot, iobase, 8, 0, &ioh)) {
		DPRINTF(("%s: can't map i/o space\n", __func__));
		return (0);
	}

	/* Probe for Winbond chips. */
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_BANKSEL);
	banksel = bus_space_read_1(iot, ioh, LMC_DATA);
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_VENDID);
	vendid = bus_space_read_1(iot, ioh, LMC_DATA);
	if (((banksel & 0x80) && vendid == (WB_VENDID_WINBOND >> 8)) ||
	    (!(banksel & 0x80) && vendid == (WB_VENDID_WINBOND & 0xff)))
		goto found;

	/* Probe for ITE chips (and don't attach if we find one). */
	bus_space_write_1(iot, ioh, LMC_ADDR, 0x58);
	if ((vendid = bus_space_read_1(iot, ioh, LMC_DATA)) == 0x90)
		goto notfound;

	/*
	 * Probe for National Semiconductor LM78/79/81.
	 *
	 * XXX This assumes the address has not been changed from the
	 * power up default.  This is probably a reasonable
	 * assumption, and if it isn't true, we should be able to
	 * access the chip using the serial bus.
	 */
	bus_space_write_1(iot, ioh, LMC_ADDR, LM_SBUSADDR);
	addr = bus_space_read_1(iot, ioh, LMC_DATA);
	if ((addr & 0xfc) == 0x2c) {
		bus_space_write_1(iot, ioh, LMC_ADDR, LM_CHIPID);
		chipid = bus_space_read_1(iot, ioh, LMC_DATA);

		switch (chipid & LM_CHIPID_MASK) {
		case LM_CHIPID_LM78:
		case LM_CHIPID_LM78J:
		case LM_CHIPID_LM79:
		case LM_CHIPID_LM81:
			goto found;
		}
	}

 notfound:
	bus_space_unmap(iot, ioh, 8);

	return (0);

 found:
	bus_space_unmap(iot, ioh, 8);

	ia->ipa_nio = 1;
	ia->ipa_io[0].length = 8;

	ia->ipa_nmem = 0;
	ia->ipa_nirq = 0;
	ia->ipa_ndrq = 0;

	return (1);
}

void
lm_isa_attach(struct device *parent, struct device *self, void *aux)
{
	struct lm_isa_softc *sc = (struct lm_isa_softc *)self;
	struct isa_attach_args *ia = aux;
	struct lm_softc *lmsc;
	bus_addr_t iobase;
	int i;
	u_int8_t sbusaddr;

	sc->sc_iot = ia->ia_iot;
	iobase = ia->ipa_io[0].base;

	if (bus_space_map(sc->sc_iot, iobase, 8, 0, &sc->sc_ioh)) {
		printf(": can't map i/o space\n");
		return;
	}

	/* Bus-independant attachment */
	sc->sc_lmsc.lm_writereg = lm_isa_writereg;
	sc->sc_lmsc.lm_readreg = lm_isa_readreg;

	/* pass through wbsio(4) devid */
	if (ia->ia_aux)
		sc->sc_lmsc.sioid = (u_int8_t)(u_long)ia->ia_aux;

	lm_attach(&sc->sc_lmsc);

	/*
	 * Most devices supported by this driver can attach to iic(4)
	 * as well.  However, we prefer to attach them to isa(4) since
	 * that causes less overhead and is more reliable.  We look
	 * through all previously attached devices, and if we find an
	 * identical chip at the same serial bus address, we stop
	 * updating its sensors and mark them as invalid.
	 */

	sbusaddr = lm_isa_readreg(&sc->sc_lmsc, LM_SBUSADDR);
	if (sbusaddr == 0)
		return;

	for (i = 0; i < lm_cd.cd_ndevs; i++) {
		lmsc = lm_cd.cd_devs[i];
		if (lmsc == &sc->sc_lmsc)
			continue;
		if (lmsc && lmsc->sbusaddr == sbusaddr &&
		    lmsc->chipid == sc->sc_lmsc.chipid) {
			lm_isa_remove_alias(lmsc, sc->sc_lmsc.sc_dev.dv_xname);
			break;
		}
	}
}

/* Remove sensors of the i2c alias, since we prefer to use the isa access */
void
lm_isa_remove_alias(struct lm_softc *sc, const char *isa)
{
	int i;

	printf("%s: disabling sensors due to alias with %s\n",
	    sc->sc_dev.dv_xname, isa);
	sensordev_deinstall(&sc->sensordev);
	for (i = 0; i < sc->numsensors; i++)
		sensor_detach(&sc->sensordev, &sc->sensors[i]);
	if (sc->sensortask != NULL)
		sensor_task_unregister(sc->sensortask);
	sc->sensortask = NULL;
}

u_int8_t
lm_isa_readreg(struct lm_softc *lmsc, int reg)
{
	struct lm_isa_softc *sc = (struct lm_isa_softc *)lmsc;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, LMC_ADDR, reg);
	return (bus_space_read_1(sc->sc_iot, sc->sc_ioh, LMC_DATA));
}

void
lm_isa_writereg(struct lm_softc *lmsc, int reg, int val)
{
	struct lm_isa_softc *sc = (struct lm_isa_softc *)lmsc;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, LMC_ADDR, reg);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, LMC_DATA, val);
}
@


1.9
log
@there's no need to defer the removal of the iic sensors to a task, we can
just remove them directly.

tested by krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.8 2014/12/19 13:53:08 krw Exp $	*/
a24 1
#include <dev/isa/isareg.h>
@


1.8
log
@Use taskq rather than workq to remove unwanted alias.

ok mikeb kettenis (for earlier version)
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.7 2011/12/06 16:06:07 mpf Exp $	*/
a22 1
#include <sys/task.h>
a43 1
	struct task sc_remove_alias_task;
d54 1
a54 1
void lm_isa_remove_alias(void *, void *);
d234 1
a234 4
			task_set(&sc->sc_remove_alias_task,
			    lm_isa_remove_alias, lmsc,
			    sc->sc_lmsc.sc_dev.dv_xname);
			task_add(systq, &sc->sc_remove_alias_task);
d242 1
a242 1
lm_isa_remove_alias(void *v, void *arg)
a243 2
	struct lm_softc *sc = v;
	char *iic = arg;
d247 1
a247 1
	    sc->sc_dev.dv_xname, iic);
@


1.7
log
@Add support for Nuvoton NCT6776F fan, voltage and temperature sensors.
Tested on a Supermicro X9SCL/X9SCM board.
With help from kettenis to make the part that works around a
chip ID collision less ugly.
OK kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.6 2011/10/05 15:05:48 deraadt Exp $	*/
d23 1
a23 1
#include <sys/workq.h>
d45 1
d235 3
a237 2
		    lmsc->chipid == sc->sc_lmsc.chipid)
			workq_add_task(NULL, 0, lm_isa_remove_alias, lmsc,
d239 3
@


1.6
log
@It is not safe to call sensor_task_unregister() from inside the
refresh function.  sensor_task_work() is incomprehensively complex.
Work around this by using a workq to deactive the i2c alias when the
isa interface is preffered.
Problem of dead sensors reported by henning, fix tested by Nigel Taylor
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.5 2011/07/26 18:43:36 deraadt Exp $	*/
d51 1
d65 1
a65 1
	lm_isa_match,
d70 47
d209 5
@


1.5
log
@Calling a detach function from an attach function is no longer legal (
see a recent subr_autoconf.c commit).  To resolve this problem, mark the
other attachment dead, and clean it up when the first servicing timeout
gets run.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.4 2008/02/17 15:04:08 kettenis Exp $	*/
d23 1
d54 1
d182 2
a183 1
			lmsc->flags = LM78_DEAD;
d185 18
@


1.4
log
@Enter wbsio(4), a driver for the Winbond LPC Super I/O chips.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.3 2007/12/18 21:17:54 form Exp $	*/
d180 1
a180 1
			config_detach(&lmsc->sc_dev, 0);
@


1.3
log
@New it(4) driver.
Supports ITE IT8705/8712/8716/8718/8726 and SiS SiS950
hardware monitors and ITE IT8712F/8716F/8718F/8726F watchdog timer.
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.2 2007/07/01 21:48:57 cnst Exp $	*/
d55 6
@


1.2
log
@fix potential crash due to wrong ca_devsize; whilst here, also fix iobase type; ok grange, kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: lm78_isa.c,v 1.1 2006/01/28 11:25:17 kettenis Exp $	*/
a28 1
#include <dev/isa/itvar.h>
d87 2
a88 3
	bus_space_write_1(iot, ioh, LMC_ADDR, ITD_CHIPID);
	vendid = bus_space_read_1(iot, ioh, LMC_DATA);
	if (vendid == IT_ID_IT87) 
@


1.1
log
@Rename lm_isa.c to lm78_isa.c.  Now that there isn't really any NetBSD code
left, replace copyright with my own.
requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.10 2006/01/26 22:07:14 kettenis Exp $	*/
d56 1
a56 1
	sizeof(struct lm_softc),
d65 1
d68 1
a68 1
	int iobase, banksel, vendid, chipid, addr;
d140 2
a141 1
	int iobase, i;
d145 1
a145 1
        iobase = ia->ipa_io[0].base;
@

