head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.14
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.8
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.26
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.24
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.22
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.22
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.20
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.20
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.18
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.10
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.09.24.20.11.01;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.17.21.20.47;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.12.26.23.44.23;	author deraadt;	state Exp;
branches
	1.7.10.1
	1.7.20.1;
next	1.6;

1.6
date	97.12.26.08.07.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.07.08.07.01;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.29.22.55.00;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.12.41.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.07.37.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.36;	author deraadt;	state Exp;
branches;
next	;

1.7.10.1
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	;

1.7.20.1
date	2002.06.11.03.42.21;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@/*	$OpenBSD: if_levar.h,v 1.9 2007/06/17 21:20:47 jasper Exp $	*/
/*	$NetBSD: if_levar.h,v 1.5 1996/05/07 01:50:07 thorpej Exp $	*/

/*
 * LANCE Ethernet driver header file
 *
 * Copyright (c) 1994, 1995 Charles M. Hannum.  All rights reserved.
 *
 * Copyright (C) 1993, Paul Richards. This software may be used, modified,
 *   copied, distributed, and sold, in both source and binary form provided
 *   that the above copyright and these terms are retained. Under no
 *   circumstances is the author responsible for the proper functioning
 *   of this software, nor does the author assume any responsibility
 *   for damages incurred with its use.
 */

/* Board types */
#define	BICC		1
#define	BICC_RDP	0xc
#define	BICC_RAP	0xe

#define	NE2100		2
#define	PCnet_ISA	4
#define	NE2100_RDP	0x10
#define	NE2100_RAP	0x12

#define	DEPCA		3
#define	DEPCA_CSR	0x0
#define	DEPCA_CSR_SHE		0x80	/* Shared memory enabled */
#define	DEPCA_CSR_SWAP32	0x40	/* Byte swapped */
#define	DEPCA_CSR_DUM		0x08	/* rev E compatibility */
#define	DEPCA_CSR_IM		0x04	/* Interrupt masked */
#define	DEPCA_CSR_IEN		0x02	/* Interrupt enabled */
#define	DEPCA_CSR_NORMAL \
	(DEPCA_CSR_SHE | DEPCA_CSR_DUM | DEPCA_CSR_IEN)
#define	DEPCA_RDP	0x4
#define	DEPCA_RAP	0x6
#define	DEPCA_ADP	0xc

/*
 * Ethernet software status per interface.
 *
 * Each interface is referenced by a network interface structure,
 * arpcom.ac_if, which the routing code uses to locate the interface.
 * This structure contains the output queue for the interface, its address, ...
 */
struct le_softc {
	struct	am7990_softc sc_am7990;	/* glue to MI code */

	void	*sc_ih;
	int	sc_card;
	int	sc_rap, sc_rdp;		/* offsets to LANCE registers */

	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
};

void		le_isa_wrcsr(struct lance_softc *, uint16_t, uint16_t);
uint16_t	le_isa_rdcsr(struct lance_softc *, uint16_t);  
int		le_isa_intredge(void *);
@


1.9
log
@ansify/de-register

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.8 2002/03/14 01:26:56 millert Exp $	*/
d58 2
a59 2
void		le_isa_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t	le_isa_rdcsr(struct am7990_softc *, u_int16_t);  
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.7 1997/12/26 23:44:23 deraadt Exp $	*/
d58 3
a60 3
void le_isa_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_isa_rdcsr(struct am7990_softc *, u_int16_t);  
int le_isa_intredge(void *);
@


1.7
log
@finish busify
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.6 1997/12/26 08:07:33 deraadt Exp $	*/
d58 3
a60 3
void le_isa_wrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
u_int16_t le_isa_rdcsr __P((struct am7990_softc *, u_int16_t));  
int le_isa_intredge __P((void *));
@


1.7.20.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.7 1997/12/26 23:44:23 deraadt Exp $	*/
d58 3
a60 3
void le_isa_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_isa_rdcsr(struct am7990_softc *, u_int16_t);  
int le_isa_intredge(void *);
@


1.7.10.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 3
a60 3
void le_isa_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_isa_rdcsr(struct am7990_softc *, u_int16_t);  
int le_isa_intredge(void *);
@


1.6
log
@busify; support isapnp lance cards
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.5 1997/11/07 08:07:01 niklas Exp $	*/
d58 2
a59 2
hide void le_isa_wrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
hide u_int16_t le_isa_rdcsr __P((struct am7990_softc *, u_int16_t));  
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.5 1996/05/07 01:50:07 thorpej Exp $	*/
a50 1
	bus_space_handle_t sc_ioh;
d53 3
d57 4
@


1.4
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
@


1.3
log
@if_name/if_unit -> if_xname/if_softc
@
text
@d50 1
a50 1
	bus_io_handle_t sc_ioh;
@


1.2
log
@sync with 0504 -- prototypes and bus.h
@
text
@d1 1
a1 1
/*	$NetBSD: if_levar.h,v 1.4 1996/04/29 20:03:23 christos Exp $	*/
a22 1
#define	PCnet_PCI	5
d47 1
a47 34
	struct	device sc_dev;		/* base structure */
	struct	arpcom sc_arpcom;	/* Ethernet common part */

	void	(*sc_copytodesc)	/* Copy to descriptor */
			__P((struct le_softc *, void *, int, int));
	void	(*sc_copyfromdesc)	/* Copy from descriptor */
			__P((struct le_softc *, void *, int, int));
	void	(*sc_copytobuf)		/* Copy to buffer */
			__P((struct le_softc *, void *, int, int));
	void	(*sc_copyfrombuf)	/* Copy from buffer */
			__P((struct le_softc *, void *, int, int));
	void	(*sc_zerobuf)		/* and Zero bytes in buffer */
			__P((struct le_softc *, int, int));

	u_int16_t sc_conf3;		/* CSR3 value */

	void	*sc_mem;		/* base address of RAM -- CPU's view */
	u_long	sc_addr;		/* base address of RAM -- LANCE's view */
	u_long	sc_memsize;		/* size of RAM */

	int	sc_nrbuf;		/* number of receive buffers */
	int	sc_ntbuf;		/* number of transmit buffers */
	int	sc_last_rd;
	int	sc_first_td, sc_last_td, sc_no_td;

	int	sc_initaddr;
	int	sc_rmdaddr;
	int	sc_tmdaddr;
	int	sc_rbufaddr;
	int	sc_tbufaddr;

#ifdef LEDEBUG
	int	sc_debug;
#endif
a50 1
	void	*sc_sh;
d52 1
a52 1
	int	sc_rap, sc_rdp;		/* LANCE registers */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: if_levar.h,v 1.3 1995/10/07 09:19:16 mycroft Exp $	*/
d51 10
a60 6
	void	(*sc_copytodesc)();	/* Copy to descriptor */
	void	(*sc_copyfromdesc)();	/* Copy from descriptor */

	void	(*sc_copytobuf)();	/* Copy to buffer */
	void	(*sc_copyfrombuf)();	/* Copy from buffer */
	void	(*sc_zerobuf)();	/* and Zero bytes in buffer */
d84 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
