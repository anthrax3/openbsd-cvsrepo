head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.14
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.12
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.8
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.18
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.16
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.14
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.12
	OPENBSD_5_0:1.20.0.10
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.8
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.6
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.19.0.8
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.6
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.4
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.18.0.14
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.12
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.10
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.8
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.6
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.4
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.16.0.6
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.16
	UBC:1.15.0.2
	UBC_BASE:1.15
	OPENBSD_3_0:1.14.0.16
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.14
	OPENBSD_2_8:1.14.0.12
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.10
	OPENBSD_2_7_BASE:1.14
	SMP:1.14.0.8
	SMP_BASE:1.14
	kame_19991208:1.14
	OPENBSD_2_6:1.14.0.6
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.14.0.4
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.14.0.2
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.13.0.2
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.22
date	2014.12.22.02.28.51;	author tedu;	state Exp;
branches;
next	1.21;
commitid	yM2VFFhpDTeFQlve;

1.21
date	2013.09.24.20.11.01;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.17.21.20.47;	author jasper;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.09.21.32.24;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.23.28.02;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.06.19.53.19;	author miod;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	98.09.16.22.41.21;	author jason;	state Exp;
branches
	1.14.8.1;
next	1.13;

1.13
date	98.03.30.20.49.22;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.02.15.01.50.13;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.01.18.18.58.38;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.12.26.23.44.21;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.12.26.08.07.32;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.08.08.23.32;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	97.07.06.18.08.31;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.10.16.12.34.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.30.09.10.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.16.10.32.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.28.08.55.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.00.27.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.12.41.22;	author deraadt;	state Exp;
branches;
next	;

1.14.8.1
date	2001.11.13.21.10.01;	author niklas;	state Exp;
branches;
next	1.14.8.2;

1.14.8.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.14.8.3;

1.14.8.3
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	1.14.8.4;

1.14.8.4
date	2004.02.19.10.56.22;	author niklas;	state Exp;
branches;
next	;

1.15.2.1
date	2002.06.11.03.42.21;	author art;	state Exp;
branches;
next	;


desc
@@


1.22
log
@unifdef INET
@
text
@/*	$OpenBSD: if_le_isa.c,v 1.21 2013/09/24 20:11:01 miod Exp $	*/
/*	$NetBSD: if_le_isa.c,v 1.2 1996/05/12 23:52:56 mycroft Exp $	*/

/*-
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_le.c	8.2 (Berkeley) 11/16/93
 */

#include "bpfilter.h"
#include "isadma.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/cpu.h>
#include <machine/intr.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/isa/isadmavar.h>

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

#include <dev/isa/if_levar.h>

static char *card_type[] =
    { "unknown", "BICC Isolan", "NE2100", "DEPCA", "PCnet-ISA" };

int	le_isa_probe(struct device *, void *, void *);
void	le_isa_attach(struct device *, struct device *, void *);

struct cfattach le_isa_ca = {
	sizeof(struct le_softc), le_isa_probe, le_isa_attach
};

int	depca_isa_probe(struct le_softc *, struct isa_attach_args *);
int	ne2100_isa_probe(struct le_softc *, struct isa_attach_args *);
int	bicc_isa_probe(struct le_softc *, struct isa_attach_args *);
int	lance_isa_probe(struct lance_softc *);

int
le_isa_probe(struct device *parent, void *match, void *aux)
{
	struct le_softc *lesc = match;
	struct isa_attach_args *ia = aux;
	u_int8_t bogusether[ETHER_ADDR_LEN] = { 255, 255, 255, 255, 255, 255 };

#if NISADMA == 0
	if (ia->ia_drq != DRQUNK) {
		printf("cannot support dma lance devices\n");
		return 0;
	}
#endif

	if (bicc_isa_probe(lesc, ia) == 0 && ne2100_isa_probe(lesc, ia) == 0 &&
	    depca_isa_probe(lesc, ia) == 0)
		return (0);

	if (bcmp(lesc->sc_am7990.lsc.sc_arpcom.ac_enaddr, bogusether,
	    sizeof(bogusether)) == 0)
		return (0);

	return (1);
}

int
depca_isa_probe(struct le_softc *lesc, struct isa_attach_args *ia)
{
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	bus_space_tag_t iot = lesc->sc_iot;
	bus_space_handle_t ioh = lesc->sc_ioh;
	int iosize = 16;
	int port;

#if 0
	u_long sum, rom_sum;
	u_char x;
#endif
	int i;

	if (bus_space_map(iot, ia->ia_iobase, iosize, 0, &ioh))
		return (0);
	lesc->sc_iot = iot;
	lesc->sc_ioh = ioh;
	lesc->sc_rap = DEPCA_RAP;
	lesc->sc_rdp = DEPCA_RDP;
	lesc->sc_card = DEPCA;

	if (lance_isa_probe(sc) == 0) {
		bus_space_unmap(iot, ioh, iosize);
		return 0;
	}

	bus_space_write_1(iot, ioh, DEPCA_CSR, DEPCA_CSR_DUM);

	/*
	 * Extract the physical MAC address from the ROM.
	 *
	 * The address PROM is 32 bytes wide, and we access it through
	 * a single I/O port.  On each read, it rotates to the next
	 * position.  We find the ethernet address by looking for a
	 * particular sequence of bytes (0xff, 0x00, 0x55, 0xaa, 0xff,
	 * 0x00, 0x55, 0xaa), and then reading the next 8 bytes (the
	 * ethernet address and a checksum).
	 *
	 * It appears that the PROM can be at one of two locations, so
	 * we just try both.
	 */
	port = DEPCA_ADP;
	for (i = 0; i < 32; i++)
		if (bus_space_read_1(iot, ioh, port) == 0xff &&
		    bus_space_read_1(iot, ioh, port) == 0x00 &&
		    bus_space_read_1(iot, ioh, port) == 0x55 &&
		    bus_space_read_1(iot, ioh, port) == 0xaa &&
		    bus_space_read_1(iot, ioh, port) == 0xff &&
		    bus_space_read_1(iot, ioh, port) == 0x00 &&
		    bus_space_read_1(iot, ioh, port) == 0x55 &&
		    bus_space_read_1(iot, ioh, port) == 0xaa)
			goto found;
	port = DEPCA_ADP + 1;
	for (i = 0; i < 32; i++)
		if (bus_space_read_1(iot, ioh, port) == 0xff &&
		    bus_space_read_1(iot, ioh, port) == 0x00 &&
		    bus_space_read_1(iot, ioh, port) == 0x55 &&
		    bus_space_read_1(iot, ioh, port) == 0xaa &&
		    bus_space_read_1(iot, ioh, port) == 0xff &&
		    bus_space_read_1(iot, ioh, port) == 0x00 &&
		    bus_space_read_1(iot, ioh, port) == 0x55 &&
		    bus_space_read_1(iot, ioh, port) == 0xaa)
			goto found;
	printf("%s: address not found\n", sc->sc_dev.dv_xname);
	return 0;

found:
	for (i = 0; i < sizeof(sc->sc_arpcom.ac_enaddr); i++)
		sc->sc_arpcom.ac_enaddr[i] = bus_space_read_1(iot, ioh, port);

#if 0
	sum =
	    (sc->sc_arpcom.ac_enaddr[0] <<  2) +
	    (sc->sc_arpcom.ac_enaddr[1] << 10) +
	    (sc->sc_arpcom.ac_enaddr[2] <<  1) +
	    (sc->sc_arpcom.ac_enaddr[3] <<  9) +
	    (sc->sc_arpcom.ac_enaddr[4] <<  0) +
	    (sc->sc_arpcom.ac_enaddr[5] <<  8);
	sum = (sum & 0xffff) + (sum >> 16);
	sum = (sum & 0xffff) + (sum >> 16);

	rom_sum = bus_space_read_1(iot, ioh, port);
	rom_sum |= bus_space_read_1(iot, ioh, port << 8);

	if (sum != rom_sum) {
		printf("%s: checksum mismatch; calculated %04x != read %04x",
		    sc->sc_dev.dv_xname, sum, rom_sum);
		bus_space_unmap(iot, ioh, iosize);
		return 0;
	}
#endif

	bus_space_write_1(iot, ioh, DEPCA_CSR, DEPCA_CSR_NORMAL);

	ia->ia_iosize = iosize;
	ia->ia_drq = DRQUNK;
	bus_space_unmap(iot, ioh, ia->ia_iosize);
	return 1;
}

int
ne2100_isa_probe(struct le_softc *lesc, struct isa_attach_args *ia)
{
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	bus_space_tag_t iot = lesc->sc_iot;
	bus_space_handle_t ioh = lesc->sc_ioh;
	int iosize = 24;
	int i;

	if (bus_space_map(iot, ia->ia_iobase, iosize, 0, &ioh))
		return (0);
	lesc->sc_iot = iot;
	lesc->sc_ioh = ioh;
	lesc->sc_rap = NE2100_RAP;
	lesc->sc_rdp = NE2100_RDP;
	lesc->sc_card = NE2100;

	if (lance_isa_probe(sc) == 0) {
		bus_space_unmap(iot, ioh, iosize);
		return 0;
	}

	/*
	 * Extract the physical MAC address from the ROM.
	 */
	for (i = 0; i < sizeof(sc->sc_arpcom.ac_enaddr); i++)
		sc->sc_arpcom.ac_enaddr[i] = bus_space_read_1(iot, ioh, i);

	ia->ia_iosize = iosize;
	bus_space_unmap(iot, ioh, ia->ia_iosize);
	return 1;
}

int
bicc_isa_probe(struct le_softc *lesc, struct isa_attach_args *ia)
{
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	bus_space_handle_t ioh;
	bus_space_tag_t iot = ia->ia_iot;
	int iosize = 16;
	int i;

	if (bus_space_map(iot, ia->ia_iobase, iosize, 0, &ioh))
		return (0);
	lesc->sc_iot = iot;
	lesc->sc_ioh = ioh;
	lesc->sc_rap = BICC_RAP;
	lesc->sc_rdp = BICC_RDP;
	lesc->sc_card = BICC;

	if (lance_isa_probe(sc) == 0) {
		bus_space_unmap(iot, ioh, iosize);
		return 0;
	}

	/*
	 * Extract the physical MAC address from the ROM.
	 */
	for (i = 0; i < sizeof(sc->sc_arpcom.ac_enaddr); i++)
		sc->sc_arpcom.ac_enaddr[i] = bus_space_read_1(iot, ioh, i * 2);

	ia->ia_iosize = iosize;
	bus_space_unmap(iot, ioh, ia->ia_iosize);
	return 1;
}

/*
 * Determine which chip is present on the card.
 */
int
lance_isa_probe(struct lance_softc *sc)
{

	/* Stop the LANCE chip and put it in a known state. */
	le_isa_wrcsr(sc, LE_CSR0, LE_C0_STOP);
	delay(100);

	if (le_isa_rdcsr(sc, LE_CSR0) != LE_C0_STOP)
		return 0;

	le_isa_wrcsr(sc, LE_CSR3, sc->sc_conf3);
	return 1;
}

void
le_isa_attach(struct device *parent, struct device *self,
    void *aux)
{
	struct le_softc *lesc = (void *)self;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;

	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
		panic("%s: can't map I/O-ports", sc->sc_dev.dv_xname);
	lesc->sc_iot = iot;
	lesc->sc_ioh = ioh;

	printf(": %s Ethernet\n", card_type[lesc->sc_card]);

	if (lesc->sc_card == DEPCA) {
		u_char *mem, val;
		int i;

		mem = sc->sc_mem = ISA_HOLE_VADDR(ia->ia_maddr);

		val = 0xff;
		for (;;) {
			for (i = 0; i < ia->ia_msize; i++)
				mem[i] = val;
			for (i = 0; i < ia->ia_msize; i++)
				if (mem[i] != val) {
					printf("%s: failed to clear memory\n",
					    sc->sc_dev.dv_xname);
					return;
				}
			if (val == 0x00)
				break;
			val -= 0x55;
		}

		sc->sc_conf3 = LE_C3_ACON;
		sc->sc_addr = 0;
		sc->sc_memsize = ia->ia_msize;
	} else {
		sc->sc_mem = malloc(16384, M_DEVBUF, M_NOWAIT);
		if (sc->sc_mem == 0) {
			printf("%s: couldn't allocate memory for card\n",
			    sc->sc_dev.dv_xname);
			return;
		}

		sc->sc_conf3 = 0;
		sc->sc_addr = kvtop(sc->sc_mem);
		sc->sc_memsize = 16384;
	}

	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

	sc->sc_rdcsr = le_isa_rdcsr;
	sc->sc_wrcsr = le_isa_wrcsr;
	sc->sc_hwreset = NULL;
	sc->sc_hwinit = NULL;

	printf("%s", sc->sc_dev.dv_xname);
	am7990_config(&lesc->sc_am7990);

#if NISADMA > 0
	if (ia->ia_drq != DRQUNK)
		isadma_cascade(ia->ia_drq);
#endif

	lesc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
	    IPL_NET, le_isa_intredge, sc, sc->sc_dev.dv_xname);
}
@


1.21
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.20 2009/03/29 21:53:52 sthen Exp $	*/
a51 1
#ifdef INET
a53 1
#endif
@


1.20
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.19 2007/06/17 21:20:47 jasper Exp $	*/
d64 2
d84 1
a84 1
int	lance_isa_probe(struct am7990_softc *);
d104 1
a104 1
	if (bcmp(lesc->sc_am7990.sc_arpcom.ac_enaddr, bogusether,
d114 1
a114 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d216 1
a216 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d249 1
a249 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d283 1
a283 1
lance_isa_probe(struct am7990_softc *sc)
d302 1
a302 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d351 5
a355 5
	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;
d363 1
a363 1
	am7990_config(sc);
@


1.19
log
@ansify/de-register

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.18 2004/01/09 21:32:24 brad Exp $	*/
d306 1
a306 1
		panic("%s: could not map I/O-ports", sc->sc_dev.dv_xname);
@


1.18
log
@remove uvm_extern.h

tested on alpha, i386, powerpc, sparc64, m68k.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.17 2003/06/02 23:28:02 millert Exp $	*/
d72 2
a73 2
int le_isa_probe(struct device *, void *, void *);
void le_isa_attach(struct device *, struct device *, void *);
d79 4
a82 4
int depca_isa_probe(struct le_softc *, struct isa_attach_args *);
int ne2100_isa_probe(struct le_softc *, struct isa_attach_args *);
int bicc_isa_probe(struct le_softc *, struct isa_attach_args *);
int lance_isa_probe(struct am7990_softc *);
d85 1
a85 3
le_isa_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d110 1
a110 3
depca_isa_probe(lesc, ia)
	struct le_softc *lesc;
	struct isa_attach_args *ia;
d212 1
a212 3
ne2100_isa_probe(lesc, ia)
	struct le_softc *lesc;
	struct isa_attach_args *ia;
d245 1
a245 3
bicc_isa_probe(lesc, ia)
	struct le_softc *lesc;
	struct isa_attach_args *ia;
d281 1
a281 2
lance_isa_probe(sc)
	struct am7990_softc *sc;
d296 2
a297 3
le_isa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.16 2002/03/14 01:26:56 millert Exp $	*/
a55 2

#include <uvm/uvm_extern.h>
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.15 2001/11/06 19:53:19 miod Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.15
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.14 1998/09/16 22:41:21 jason Exp $	*/
d78 2
a79 2
int le_isa_probe __P((struct device *, void *, void *));
void le_isa_attach __P((struct device *, struct device *, void *));
d85 4
a88 4
int depca_isa_probe __P((struct le_softc *, struct isa_attach_args *));
int ne2100_isa_probe __P((struct le_softc *, struct isa_attach_args *));
int bicc_isa_probe __P((struct le_softc *, struct isa_attach_args *));
int lance_isa_probe __P((struct am7990_softc *));
@


1.15.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.15 2001/11/06 19:53:19 miod Exp $	*/
d78 2
a79 2
int le_isa_probe(struct device *, void *, void *);
void le_isa_attach(struct device *, struct device *, void *);
d85 4
a88 4
int depca_isa_probe(struct le_softc *, struct isa_attach_args *);
int ne2100_isa_probe(struct le_softc *, struct isa_attach_args *);
int bicc_isa_probe(struct le_softc *, struct isa_attach_args *);
int lance_isa_probe(struct am7990_softc *);
@


1.14
log
@o if_media'fied am7990
o if_media'fied sun4m le.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.13 1998/03/30 20:49:22 millert Exp $	*/
d61 1
a61 1
#include <vm/vm.h>
@


1.14.8.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
a61 1
#include <uvm/uvm_extern.h>
@


1.14.8.2
log
@Merge in -current from about a week ago
@
text
@d78 2
a79 2
int le_isa_probe(struct device *, void *, void *);
void le_isa_attach(struct device *, struct device *, void *);
d85 4
a88 4
int depca_isa_probe(struct le_softc *, struct isa_attach_args *);
int ne2100_isa_probe(struct le_softc *, struct isa_attach_args *);
int bicc_isa_probe(struct le_softc *, struct isa_attach_args *);
int lance_isa_probe(struct am7990_softc *);
@


1.14.8.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.14.8.2 2002/03/28 12:11:35 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.14.8.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 2
@


1.13
log
@Don't match if ether addr is ff:ff:ff:ff:ff.  Hack to work around false
positive I get on my libretto (ne2100_isa_probe matches when it should not).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.12 1998/02/15 01:50:13 deraadt Exp $	*/
d54 1
@


1.12
log
@do not assume iosize is correct
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.11 1998/01/18 18:58:38 niklas Exp $	*/
d96 1
d105 7
a111 6
	if (bicc_isa_probe(lesc, ia))
		return (1);
	if (ne2100_isa_probe(lesc, ia))
		return (1);
	if (depca_isa_probe(lesc, ia))
		return (1);
d113 1
a113 1
	return (0);
@


1.11
log
@move to current OpenBSD isadma API
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.10 1997/12/26 23:44:21 deraadt Exp $	*/
d122 1
d131 1
a131 1
	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
d140 1
a140 1
		bus_space_unmap(iot, ioh, ia->ia_iosize);
d205 1
a205 1
		bus_space_unmap(iot, ioh, ia->ia_iosize);
d212 1
a212 1
	ia->ia_iosize = 16;
d226 1
d229 1
a229 1
	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
d238 1
a238 1
		bus_space_unmap(iot, ioh, ia->ia_iosize);
d248 1
a248 1
	ia->ia_iosize = 24;
d261 1
d264 1
a264 1
	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
d273 1
a273 1
		bus_space_unmap(iot, ioh, ia->ia_iosize);
d283 1
a283 1
	ia->ia_iosize = 16;
@


1.10
log
@finish busify
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.9 1997/12/26 08:07:32 deraadt Exp $	*/
d375 1
a375 1
		isa_dmacascade(ia->ia_drq);
@


1.9
log
@busify; support isapnp lance cards
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.8 1997/08/08 08:23:32 downsj Exp $	*/
a63 1
#include <machine/pio.h>
a67 1
#include <i386/isa/isa_machdep.h>
@


1.8
log
@Initialize hwreset.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.7 1997/07/06 18:08:31 niklas Exp $	*/
a90 27
int le_isa_intredge __P((void *));

hide void le_isa_wrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
hide u_int16_t le_isa_rdcsr __P((struct am7990_softc *, u_int16_t));  

hide void
le_isa_wrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
{

	outw(((struct le_softc *)sc)->sc_rap, port);
	outw(((struct le_softc *)sc)->sc_rdp, val);
}

hide u_int16_t
le_isa_rdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
{
	u_int16_t val;

	outw(((struct le_softc *)sc)->sc_rap, port);
	val = inw(((struct le_softc *)sc)->sc_rdp);
	return (val);
}

d122 4
a125 1
	int iobase = ia->ia_iobase, port;
d132 6
a137 2
	lesc->sc_rap = iobase + DEPCA_RAP;
	lesc->sc_rdp = iobase + DEPCA_RDP;
d140 2
a141 1
	if (lance_isa_probe(sc) == 0)
d143 1
d145 1
a145 1
	outb(iobase + DEPCA_CSR, DEPCA_CSR_DUM);
d160 1
a160 1
	port = iobase + DEPCA_ADP;
d162 8
a169 4
		if (inb(port) == 0xff && inb(port) == 0x00 &&
		    inb(port) == 0x55 && inb(port) == 0xaa &&
		    inb(port) == 0xff && inb(port) == 0x00 &&
		    inb(port) == 0x55 && inb(port) == 0xaa)
d171 1
a171 1
	port = iobase + DEPCA_ADP + 1;
d173 8
a180 4
		if (inb(port) == 0xff && inb(port) == 0x00 &&
		    inb(port) == 0x55 && inb(port) == 0xaa &&
		    inb(port) == 0xff && inb(port) == 0x00 &&
		    inb(port) == 0x55 && inb(port) == 0xaa)
d187 1
a187 1
		sc->sc_arpcom.ac_enaddr[i] = inb(port);
d200 2
a201 2
	rom_sum = inb(port);
	rom_sum |= inb(port) << 8;
d206 1
d211 1
a211 1
	outb(iobase + DEPCA_CSR, DEPCA_CSR_NORMAL);
d215 1
d225 2
a226 1
	int iobase = ia->ia_iobase;
d229 6
a234 2
	lesc->sc_rap = iobase + NE2100_RAP;
	lesc->sc_rdp = iobase + NE2100_RDP;
d237 2
a238 1
	if (lance_isa_probe(sc) == 0)
d240 1
d246 1
a246 1
		sc->sc_arpcom.ac_enaddr[i] = inb(iobase + i);
d249 1
d259 2
a260 1
	int iobase = ia->ia_iobase;
d263 6
a268 2
	lesc->sc_rap = iobase + BICC_RAP;
	lesc->sc_rdp = iobase + BICC_RDP;
d271 2
a272 1
	if (lance_isa_probe(sc) == 0)
d274 1
d280 1
a280 1
		sc->sc_arpcom.ac_enaddr[i] = inb(iobase + i * 2);
d283 1
d314 7
a381 15
}

/*
 * Controller interrupt.
 */
int
le_isa_intredge(arg)
	void *arg;
{

	if (am7990_intr(arg) == 0)
		return (0);
	for (;;)
		if (am7990_intr(arg) == 0)
			return (1);
@


1.7
log
@OpenBSD tag
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_isa.c,v 1.2 1996/05/12 23:52:56 mycroft Exp $	*/
d354 1
@


1.6
log
@contextual usage
@
text
@d1 1
@


1.5
log
@-Wall fix
@
text
@d149 1
d152 1
@


1.4
log
@if isadma does not exist, do not try to use it
@
text
@d368 1
@


1.3
log
@isa_intr_establish extra arg
@
text
@d43 1
d125 7
d356 1
d359 1
@


1.2
log
@sync 0521
@
text
@d296 1
a296 2
	printf(": %s Ethernet\n", sc->sc_dev.dv_xname,
	    card_type[lesc->sc_card]);
d352 1
a352 1
	    IPL_NET, le_isa_intredge, sc);
@


1.1
log
@if_name/if_unit -> if_xname/if_softc
@
text
@d1 1
a1 1
/*	$NetBSD: if_le_isa.c,v 1.1 1996/05/07 01:50:05 thorpej Exp $	*/
d61 1
@
