head	1.29;
access;
symbols
	OPENBSD_6_0:1.27.0.8
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.4
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.8
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.6
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.25.0.20
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.18
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.16
	OPENBSD_5_0:1.25.0.14
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.12
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.10
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.6
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.8
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.4
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.2
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.24.0.8
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.6
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.4
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.23.0.12
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.10
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.8
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.23.0.6
	OPENBSD_3_6_BASE:1.23
	SMP_SYNC_A:1.23
	SMP_SYNC_B:1.23
	OPENBSD_3_5:1.23.0.4
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.23.0.2
	OPENBSD_3_4_BASE:1.23
	UBC_SYNC_A:1.23
	OPENBSD_3_3:1.22.0.6
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.22.0.4
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.22.0.2
	OPENBSD_3_1_BASE:1.22
	UBC_SYNC_B:1.22
	UBC:1.20.0.14
	UBC_BASE:1.20
	OPENBSD_3_0:1.20.0.12
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_9:1.20.0.10
	OPENBSD_2_8:1.20.0.8
	OPENBSD_2_8_BASE:1.20
	OPENBSD_2_7:1.20.0.6
	OPENBSD_2_7_BASE:1.20
	SMP:1.20.0.4
	SMP_BASE:1.20
	kame_19991208:1.20
	OPENBSD_2_6:1.20.0.2
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.19.0.2
	OPENBSD_2_5_BASE:1.19
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.13.0.4
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.11.0.4
	OPENBSD_2_1_BASE:1.11
	OPENBSD_2_0:1.11.0.2
	OPENBSD_2_0_BASE:1.11
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2016.09.19.06.46.44;	author ratchov;	state Exp;
branches;
next	1.28;
commitid	qGgYgJTgEFuAoGj4;

1.28
date	2016.09.14.06.12.19;	author ratchov;	state Exp;
branches;
next	1.27;
commitid	pi1a9KN0itEngOc4;

1.27
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.26;
commitid	uzzBR7hz9ncd4O6G;

1.26
date	2013.05.24.07.58.46;	author ratchov;	state Exp;
branches;
next	1.25;

1.25
date	2008.04.21.00.32.42;	author jakemsr;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.07.22.41.33;	author jsg;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.27.11.22.53;	author ho;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.14.03.16.05;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	99.07.20.16.36.05;	author deraadt;	state Exp;
branches
	1.20.4.1
	1.20.14.1;
next	1.19;

1.19
date	99.01.24.15.58.54;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	99.01.07.06.14.49;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	99.01.02.00.02.47;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	98.11.03.21.15.01;	author downsj;	state Exp;
branches;
next	1.15;

1.15
date	98.05.13.10.25.10;	author provos;	state Exp;
branches;
next	1.14;

1.14
date	98.04.26.21.02.56;	author provos;	state Exp;
branches;
next	1.13;

1.13
date	97.08.07.05.27.32;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.07.10.23.06.37;	author provos;	state Exp;
branches;
next	1.11;

1.11
date	96.05.26.00.27.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.05.07.07.37.37;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.04.21.22.24.30;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.04.18.23.47.46;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.03.20.01.01.01;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.03.19.21.10.31;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.08.16.43.13;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.02.20.04.36.06;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	95.12.27.22.06.35;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.06.31.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches;
next	;

1.20.4.1
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.20.4.2;

1.20.4.2
date	2003.05.13.19.35.03;	author ho;	state Exp;
branches;
next	;

1.20.14.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	1.20.14.2;

1.20.14.2
date	2003.05.19.22.08.46;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Remove unused getdev() audio driver functions.
@
text
@/*	$OpenBSD: sb.c,v 1.28 2016/09/14 06:12:19 ratchov Exp $	*/
/*	$NetBSD: sb.c,v 1.57 1998/01/12 09:43:46 thorpej Exp $	*/

/*
 * Copyright (c) 1991-1993 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Computer Systems
 *	Engineering Group at Lawrence Berkeley Laboratory.
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include "midi.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/syslog.h>
#include <sys/device.h>

#include <machine/cpu.h>
#include <machine/intr.h>
#include <machine/bus.h>

#include <sys/audioio.h>
#include <dev/audio_if.h>
#include <dev/midi_if.h>

#include <dev/isa/isavar.h>
#include <dev/isa/isadmavar.h>

#include <dev/isa/sbreg.h>
#include <dev/isa/sbvar.h>
#include <dev/isa/sbdspvar.h>

struct cfdriver sb_cd = {
	NULL, "sb", DV_DULL
};

#if NMIDI > 0
int	sb_mpu401_open(void *, int, void (*iintr)(void *, int),
		       void (*ointr)(void *), void *arg);
void	sb_mpu401_close(void *);
int	sb_mpu401_output(void *, int);
void	sb_mpu401_getinfo(void *, struct midi_info *);

struct midi_hw_if sb_midi_hw_if = {
	sbdsp_midi_open,
	sbdsp_midi_close,
	sbdsp_midi_output,
	0,			/* flush */
	sbdsp_midi_getinfo,
	0,			/* ioctl */
};

struct midi_hw_if sb_mpu401_hw_if = {
	sb_mpu401_open,
	sb_mpu401_close,
	sb_mpu401_output,
	0,			/* flush */
	sb_mpu401_getinfo,
	0,			/* ioctl */
};
#endif

/*
 * Define our interface to the higher level audio driver.
 */

struct audio_hw_if sb_hw_if = {
	sbdsp_open,
	sbdsp_close,
	sbdsp_set_params,
	sbdsp_round_blocksize,
	0,
	0,
	0,
	0,
	0,
	sbdsp_haltdma,
	sbdsp_haltdma,
	sbdsp_speaker_ctl,
	0,
	sbdsp_mixer_set_port,
	sbdsp_mixer_get_port,
	sbdsp_mixer_query_devinfo,
	sb_malloc,
	sb_free,
	sb_round,
	sbdsp_get_props,
	sbdsp_trigger_output,
	sbdsp_trigger_input
};

#ifdef AUDIO_DEBUG
#define DPRINTF(x)	if (sbdebug) printf x
int	sbdebug = 0;
#else
#define DPRINTF(x)
#endif

/*
 * Probe / attach routines.
 */


int
sbmatch(sc)
	struct sbdsp_softc *sc;
{
	static u_char drq_conf[8] = {
		0x01, 0x02, -1, 0x08, -1, 0x20, 0x40, 0x80
	};

	static u_char irq_conf[11] = {
		-1, -1, 0x01, -1, -1, 0x02, -1, 0x04, -1, 0x01, 0x08
	};

	if (sbdsp_probe(sc) == 0)
		return 0;

	/*
	 * Cannot auto-discover DMA channel.
	 */
	if (ISSBPROCLASS(sc)) {
		if (!SBP_DRQ_VALID(sc->sc_drq8)) {
			DPRINTF(("%s: configured dma chan %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_drq8));
			return 0;
		}
	} else {
		if (!SB_DRQ_VALID(sc->sc_drq8)) {
			DPRINTF(("%s: configured dma chan %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_drq8));
			return 0;
		}
	}

        if (0 <= sc->sc_drq16 && sc->sc_drq16 <= 3)
        	/* 
                 * XXX Some ViBRA16 cards seem to have two 8 bit DMA 
                 * channels.  I've no clue how to use them, so ignore
                 * one of them for now.  -- augustss@@netbsd.org
                 */
        	sc->sc_drq16 = -1;

	if (ISSB16CLASS(sc)) {
		if (sc->sc_drq16 == -1)
			sc->sc_drq16 = sc->sc_drq8;
		if (!SB16_DRQ_VALID(sc->sc_drq16)) {
			DPRINTF(("%s: configured dma chan %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_drq16));
			return 0;
		}
	} else
		sc->sc_drq16 = sc->sc_drq8;
	
	if (ISSBPROCLASS(sc)) {
		if (!SBP_IRQ_VALID(sc->sc_irq)) {
			DPRINTF(("%s: configured irq %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_irq));
			return 0;
		}
	} else {
		if (!SB_IRQ_VALID(sc->sc_irq)) {
			DPRINTF(("%s: configured irq %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_irq));
			return 0;
		}
	}

	if (ISSB16CLASS(sc)) {
		int w, r;
#if 0
		DPRINTF(("%s: old drq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_DRQ)));
		DPRINTF(("%s: try drq conf %02x\n", sc->sc_dev.dv_xname,
		    drq_conf[sc->sc_drq16] | drq_conf[sc->sc_drq8]));
#endif
		w = drq_conf[sc->sc_drq16] | drq_conf[sc->sc_drq8];
		sbdsp_mix_write(sc, SBP_SET_DRQ, w);
		r = sbdsp_mix_read(sc, SBP_SET_DRQ) & 0xeb;
		if (r != w) {
			DPRINTF(("%s: setting drq mask %02x failed, got %02x\n", sc->sc_dev.dv_xname, w, r));
			return 0;
		}
#if 0
		DPRINTF(("%s: new drq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_DRQ)));
#endif

#if 0
		DPRINTF(("%s: old irq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_IRQ)));
		DPRINTF(("%s: try irq conf %02x\n", sc->sc_dev.dv_xname,
		    irq_conf[sc->sc_irq]));
#endif
		w = irq_conf[sc->sc_irq];
		sbdsp_mix_write(sc, SBP_SET_IRQ, w);
		r = sbdsp_mix_read(sc, SBP_SET_IRQ) & 0x0f;
		if (r != w) {
			DPRINTF(("%s: setting irq mask %02x failed, got %02x\n",
			    sc->sc_dev.dv_xname, w, r));
			return 0;
		}
#if 0
		DPRINTF(("%s: new irq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_IRQ)));
#endif
	}

	return 1;
}


void
sbattach(sc)
	struct sbdsp_softc *sc;
{
	struct audio_attach_args arg;
#if NMIDI > 0
	struct midi_hw_if *mhw = &sb_midi_hw_if;
#endif

	sc->sc_ih = isa_intr_establish(sc->sc_ic, sc->sc_irq,
	    IST_EDGE, IPL_AUDIO | IPL_MPSAFE,
	    sbdsp_intr, sc, sc->sc_dev.dv_xname);

	sbdsp_attach(sc);

#if NMIDI > 0
	sc->sc_hasmpu = 0;
	if (ISSB16CLASS(sc) && sc->sc_mpu_sc.iobase != 0) {
		sc->sc_mpu_sc.iot = sc->sc_iot;
		if (mpu_find(&sc->sc_mpu_sc)) {
			sc->sc_hasmpu = 1;
			mhw = &sb_mpu401_hw_if;
		}
	}
	midi_attach_mi(mhw, sc, &sc->sc_dev);
#endif

	audio_attach_mi(&sb_hw_if, sc, &sc->sc_dev);

	arg.type = AUDIODEV_TYPE_OPL;
	arg.hwif = 0;
	arg.hdl = 0;
	(void)config_found(&sc->sc_dev, &arg, audioprint);
}

/*
 * Various routines to interface to higher level audio driver
 */

#if NMIDI > 0

#define SBMPU(a) (&((struct sbdsp_softc *)addr)->sc_mpu_sc)

int
sb_mpu401_open(addr, flags, iintr, ointr, arg)
	void *addr;
	int flags;
	void (*iintr)(void *, int);
	void (*ointr)(void *);
	void *arg;
{
	return mpu_open(SBMPU(addr), flags, iintr, ointr, arg);
}

int
sb_mpu401_output(addr, d)
	void *addr;
	int d;
{
	return mpu_output(SBMPU(addr), d);
}

void
sb_mpu401_close(addr)
	void *addr;
{
	mpu_close(SBMPU(addr));
}

void
sb_mpu401_getinfo(addr, mi)
	void *addr;
	struct midi_info *mi;
{
	mi->name = "SB MPU-401 UART";
	mi->props = 0;
}
#endif
@


1.28
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.26 2013/05/24 07:58:46 ratchov Exp $	*/
a91 8
struct audio_device sb_device = {
	"SoundBlaster",
	"x",
	"sb"
};

int	sb_getdev(void *, struct audio_device *);

a108 1
	sb_getdev,
a279 25

int
sb_getdev(addr, retp)
	void *addr;
	struct audio_device *retp;
{
	struct sbdsp_softc *sc = addr;
	static char *names[] = SB_NAMES;
	char *config;

	if (sc->sc_model == SB_JAZZ)
		strlcpy(retp->name, "MV Jazz16", sizeof retp->name);
	else
		strlcpy(retp->name, "SoundBlaster", sizeof retp->name);
	snprintf(retp->version, sizeof retp->version, "%d.%02d", 
		 SBVER_MAJOR(sc->sc_version),
		 SBVER_MINOR(sc->sc_version));
	if (0 <= sc->sc_model && sc->sc_model < sizeof names / sizeof names[0])
		config = names[sc->sc_model];
	else
		config = "??";
	strlcpy(retp->config, config, sizeof retp->config);
		
	return 0;
}
@


1.27
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@a106 2
	0,
	sbdsp_query_encoding,
a124 1
        sb_mappage,
d127 1
a127 2
	sbdsp_trigger_input,
	NULL
@


1.26
log
@Since audio code is mp safe, establish isa and pci audio interrupts
with the IPL_MPSAFE flag. In certain circumstances, this prevents
interrupt handlers from waiting the global kernel_lock possibly (hold
by slower code) to be released.

ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.25 2008/04/21 00:32:42 jakemsr Exp $	*/
a45 1
#include <sys/proc.h>
@


1.25
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.24 2006/04/07 22:41:33 jsg Exp $	*/
d265 3
a267 2
	sc->sc_ih = isa_intr_establish(sc->sc_ic, sc->sc_irq, IST_EDGE,
	    IPL_AUDIO, sbdsp_intr, sc, sc->sc_dev.dv_xname);
@


1.24
log
@Add optional flush method to MIDI hardware interface.
Allow umidi(4) to send multiple events in a single USB transfer.
This greatly improves the number of interrupts umidi is able to generate.

From Alexandre Ratchov.
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.23 2003/04/27 11:22:53 ho Exp $	*/
d131 2
a132 1
	sbdsp_trigger_input
@


1.23
log
@strcpy/sprintf cleanup of sys/dev. miod@@, deraadt@@ says to commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.22 2002/03/14 03:16:05 millert Exp $	*/
d78 1
d87 1
@


1.22
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.21 2002/03/14 01:26:56 millert Exp $	*/
d301 1
a301 1
		strncpy(retp->name, "MV Jazz16", sizeof(retp->name));
d303 4
a306 4
		strncpy(retp->name, "SoundBlaster", sizeof(retp->name));
	sprintf(retp->version, "%d.%02d", 
		SBVER_MAJOR(sc->sc_version),
		SBVER_MINOR(sc->sc_version));
d311 1
a311 1
	strncpy(retp->config, config, sizeof(retp->config));
@


1.21
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.20 1999/07/20 16:36:05 deraadt Exp $	*/
d68 2
a69 3
int	sb_mpu401_open __P((void *, int, 
			     void (*iintr)(void *, int),
			     void (*ointr)(void *), void *arg));
@


1.20
log
@first cut at isapnp and ym mpu
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.19 1999/01/24 15:58:54 mickey Exp $	*/
d69 5
a73 5
			     void (*iintr)__P((void *, int)),
			     void (*ointr)__P((void *)), void *arg));
void	sb_mpu401_close __P((void *));
int	sb_mpu401_output __P((void *, int));
void	sb_mpu401_getinfo __P((void *, struct midi_info *));
d98 1
a98 1
int	sb_getdev __P((void *, struct audio_device *));
d325 2
a326 2
	void (*iintr)__P((void *, int));
	void (*ointr)__P((void *));
@


1.20.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.20 1999/07/20 16:36:05 deraadt Exp $	*/
d68 6
a73 5
int	sb_mpu401_open(void *, int, void (*iintr)(void *, int),
		       void (*ointr)(void *), void *arg);
void	sb_mpu401_close(void *);
int	sb_mpu401_output(void *, int);
void	sb_mpu401_getinfo(void *, struct midi_info *);
d98 1
a98 1
int	sb_getdev(void *, struct audio_device *);
d325 2
a326 2
	void (*iintr)(void *, int);
	void (*ointr)(void *);
@


1.20.14.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d301 1
a301 1
		strlcpy(retp->name, "MV Jazz16", sizeof retp->name);
d303 4
a306 4
		strlcpy(retp->name, "SoundBlaster", sizeof retp->name);
	snprintf(retp->version, sizeof retp->version, "%d.%02d", 
		 SBVER_MAJOR(sc->sc_version),
		 SBVER_MINOR(sc->sc_version));
d311 1
a311 1
	strlcpy(retp->config, config, sizeof retp->config);
@


1.20.4.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 6
a73 5
int	sb_mpu401_open(void *, int, void (*iintr)(void *, int),
		       void (*ointr)(void *), void *arg);
void	sb_mpu401_close(void *);
int	sb_mpu401_output(void *, int);
void	sb_mpu401_getinfo(void *, struct midi_info *);
d98 1
a98 1
int	sb_getdev(void *, struct audio_device *);
d325 2
a326 2
	void (*iintr)(void *, int);
	void (*ointr)(void *);
@


1.20.4.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.20.4.1 2002/03/28 12:11:35 niklas Exp $	*/
d301 1
a301 1
		strlcpy(retp->name, "MV Jazz16", sizeof retp->name);
d303 4
a306 4
		strlcpy(retp->name, "SoundBlaster", sizeof retp->name);
	snprintf(retp->version, sizeof retp->version, "%d.%02d", 
		 SBVER_MAJOR(sc->sc_version),
		 SBVER_MINOR(sc->sc_version));
d311 1
a311 1
	strlcpy(retp->config, config, sizeof retp->config);
@


1.19
log
@remove unneeded pio.h inclusion
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.18 1999/01/07 06:14:49 niklas Exp $	*/
d272 1
a272 1
		if (mpu401_find(&sc->sc_mpu_sc)) {
d329 1
a329 1
	return mpu401_open(SBMPU(addr), flags, iintr, ointr, arg);
d337 1
a337 1
	return mpu401_output(SBMPU(addr), d);
d344 1
a344 1
	mpu401_close(SBMPU(addr));
@


1.18
log
@Die, NEWCONFIG
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.17 1999/01/02 00:02:47 niklas Exp $	*/
a50 1
#include <machine/pio.h>
@


1.17
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.16 1998/11/03 21:15:01 downsj Exp $	*/
a196 21
#ifdef NEWCONFIG
	/*
	 * If the IRQ wasn't compiled in, auto-detect it.
	 */
	if (sc->sc_irq == IRQUNK) {
		sc->sc_irq = isa_discoverintr(sbforceintr, sc);
		sbdsp_reset(sc);
		if (ISSBPROCLASS(sc)) {
			if (!SBP_IRQ_VALID(sc->sc_irq)) {
				DPRINTF(("%s: couldn't auto-detect interrupt\n", sc->sc_dev.dv_xname));
				return 0;
			}
		}
		else {
			if (!SB_IRQ_VALID(sc->sc_irq)) {
				DPRINTF(("%s: couldn't auto-detect interrupt\n", sc->sc_dev.dv_xname));
				return 0;
			}
		}
	} else
#endif
@


1.16
log
@Update audio_hw_if.
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.15 1998/05/13 10:25:10 provos Exp $	*/
d38 2
d55 1
d68 25
d108 1
a108 1
	NULL,
d112 5
a116 5
	NULL,
	sbdsp_dma_init_output,
	sbdsp_dma_init_input,
	sbdsp_dma_output,
	sbdsp_dma_input,
d121 1
a121 1
	NULL,
d130 2
a131 2
	NULL,
	NULL
d280 5
d290 11
a300 2
	audio_attach_mi(&sb_hw_if, 0, sc, &sc->sc_dev);
}
d302 1
a302 7
#ifdef NEWCONFIG
void
sbforceintr(aux)
	void *aux;
{
	static char dmabuf;
	struct sbdsp_softc *sc = aux;
d304 4
a307 16
	/*
	 * Set up a DMA read of one byte.
	 * XXX Note that at this point we haven't called 
	 * at_setup_dmachan().  This is okay because it just
	 * allocates a buffer in case it needs to make a copy,
	 * and it won't need to make a copy for a 1 byte buffer.
	 * (I think that calling at_setup_dmachan() should be optional;
	 * if you don't call it, it will be called the first time
	 * it is needed (and you pay the latency).  Also, you might
	 * never need the buffer anyway.)
	 */
	at_dma(DMAMODE_READ, &dmabuf, 1, sc->sc_drq8);
	if (sbdsp_wdsp(sc, SB_DSP_RDMA) == 0) {
		(void)sbdsp_wdsp(sc, 0);
		(void)sbdsp_wdsp(sc, 0);
	}
a308 2
#endif

d338 40
@


1.15
log
@don't printf in probe routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.14 1998/04/26 21:02:56 provos Exp $	*/
d80 1
a80 1
	0,
d84 1
a84 1
	0,
d93 1
a93 1
	0,
d102 2
@


1.14
log
@update audio from NetBSD, mostly by Lennart Augustsson <augustss@@cs.chalmers.se>
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.13 1997/08/07 05:27:32 deraadt Exp $	*/
d104 7
d136 2
a137 2
			printf("%s: configured dma chan %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_drq8);
d142 2
a143 2
			printf("%s: configured dma chan %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_drq8);
d160 2
a161 2
			printf("%s: configured dma chan %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_drq16);
d176 1
a176 2
				printf("%s: couldn't auto-detect interrupt\n",
					sc->sc_dev.dv_xname);
d182 1
a182 2
				printf("%s: couldn't auto-detect interrupt\n");
					sc->sc_dev.dv_xname);
d190 2
a191 2
			printf("%s: configured irq %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_irq);
d196 2
a197 2
			printf("%s: configured irq %d invalid\n",
			    sc->sc_dev.dv_xname, sc->sc_irq);
d205 4
a208 4
		printf("%s: old drq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_DRQ));
		printf("%s: try drq conf %02x\n", sc->sc_dev.dv_xname,
		    drq_conf[sc->sc_drq16] | drq_conf[sc->sc_drq8]);
d214 1
a214 2
			printf("%s: setting drq mask %02x failed, got %02x\n",
			    sc->sc_dev.dv_xname, w, r);
d218 2
a219 2
		printf("%s: new drq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_DRQ));
d223 4
a226 4
		printf("%s: old irq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_IRQ));
		printf("%s: try irq conf %02x\n", sc->sc_dev.dv_xname,
		    irq_conf[sc->sc_irq]);
d232 2
a233 2
			printf("%s: setting irq mask %02x failed, got %02x\n",
			    sc->sc_dev.dv_xname, w, r);
d237 2
a238 2
		printf("%s: new irq conf %02x\n", sc->sc_dev.dv_xname,
		    sbdsp_mix_read(sc, SBP_SET_IRQ));
@


1.13
log
@silence this thing again
@
text
@d1 2
a2 2
/*	$OpenBSD: sb.c,v 1.12 1997/07/10 23:06:37 provos Exp $	*/
/*	$NetBSD: sb.c,v 1.36 1996/05/12 23:53:33 mycroft Exp $	*/
d48 1
a52 1
#include <dev/mulaw.h>
a60 8
struct sb_softc {
	struct	device sc_dev;		/* base device */
	struct	isadev sc_id;		/* ISA device */
	void	*sc_ih;			/* interrupt vectoring */

	struct	sbdsp_softc sc_sbdsp;
};

a70 1
int	sbopen __P((dev_t, int));
d78 1
a78 1
	sbopen,
d80 1
a80 5
	NULL,
	sbdsp_set_in_sr,
	sbdsp_get_in_sr,
	sbdsp_set_out_sr,
	sbdsp_get_out_sr,
d82 1
a82 5
	sbdsp_set_format,
	sbdsp_get_encoding,
	sbdsp_get_precision,
	sbdsp_set_channels,
	sbdsp_get_channels,
d84 3
a86 7
	sbdsp_set_out_port,
	sbdsp_get_out_port,
	sbdsp_set_in_port,
	sbdsp_get_in_port,
	sbdsp_commit_settings,
	mulaw_expand,
	mulaw_compress,
a90 2
	sbdsp_contdma,
	sbdsp_contdma,
d93 1
a93 1
	sbdsp_setfd,
d97 5
a101 2
	0,	/* not full-duplex */
	0
d140 9
a148 1
	
d198 1
d205 8
a212 2
		sbdsp_mix_write(sc, SBP_SET_DRQ,
		    drq_conf[sc->sc_drq16] | drq_conf[sc->sc_drq8]);
d224 8
a231 2
		sbdsp_mix_write(sc, SBP_SET_IRQ,
		    irq_conf[sc->sc_irq]);
a245 2
	int error;

d251 1
a251 3
	if ((error = audio_hardware_attach(&sb_hw_if, sc)) != 0)
		printf("%s: could not attach to audio device driver (%d)\n",
		    sc->sc_dev.dv_xname, error);
a286 18
sbopen(dev, flags)
    dev_t dev;
    int flags;
{
    struct sbdsp_softc *sc;
    int unit = AUDIOUNIT(dev);
    
    if (unit >= sb_cd.cd_ndevs)
	return ENODEV;
    
    sc = sb_cd.cd_devs[unit];
    if (!sc)
	return ENXIO;
    
    return sbdsp_open(sc, dev, flags);
}

int
d292 2
d295 1
a295 1
	if (sc->sc_model & MODEL_JAZZ16)
d300 7
a306 3
		SBVER_MAJOR(sc->sc_model),
		SBVER_MINOR(sc->sc_model));
	strncpy(retp->config, "sb", sizeof(retp->config));
@


1.12
log
@sync with NETBSD 30/3/97 + adapating aria.c
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.10 1996/05/07 07:37:37 deraadt Exp $	*/
d141 1
a141 2
	if (sbdsp_probe(sc) == 0) {
		printf("%s: sbdsp probe failed\n", sc->sc_dev.dv_xname);
a142 1
	}
@


1.11
log
@sync 0521
@
text
@d57 2
a59 9
#include <dev/isa/sbreg.h>

#ifdef AUDIO_DEBUG
extern void Dprintf __P((const char *, ...));
#define DPRINTF(x)	if (sbdebug) Dprintf x
int	sbdebug = 0;
#else
#define DPRINTF(x)
#endif
a68 7
int	sbprobe __P((struct device *, void *, void *));
void	sbattach __P((struct device *, struct device *, void *));

struct cfattach sb_ca = {
	sizeof(struct sbdsp_softc), sbprobe, sbattach
};

d95 1
a95 1
	sbdsp_set_encoding,
a96 1
	sbdsp_set_precision,
a105 1
	sbdsp_get_silence,
d128 1
a128 3
/*
 * Probe for the soundblaster hardware.
 */
d130 2
a131 3
sbprobe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d133 2
a134 5
	register struct sbdsp_softc *sc = match;
	register struct isa_attach_args *ia = aux;
	register int iobase = ia->ia_iobase;
	static u_char drq_conf[4] = {
		0x01, 0x02, -1, 0x08
d136 1
d141 2
a142 2
	if (!SB_BASE_VALID(ia->ia_iobase)) {
		printf("sb: configured iobase %d invalid\n", ia->ia_iobase);
a144 3
	sc->sc_iobase = iobase;
	sc->sc_irq = ia->ia_irq;
	sc->sc_drq = ia->ia_drq;
a145 5
	if (sbdsp_probe(sc) == 0) {
		DPRINTF(("sb: sbdsp probe failed\n"));
		return 0;
	}
		
d150 9
a158 2
		if (!SBP_DRQ_VALID(ia->ia_drq)) {
			printf("sb: configured dma chan %d invalid\n", ia->ia_drq);
a160 2
		if (ISSB16CLASS(sc))
			sbdsp_mix_write(sc, SBP_SET_DRQ, drq_conf[ia->ia_drq]);
d162 7
a168 3
	else {
		if (!SB_DRQ_VALID(ia->ia_drq)) {
			printf("sb: configured dma chan %d invalid\n", ia->ia_drq);
d171 2
a172 1
	}
d178 2
a179 2
	if (ia->ia_irq == IRQUNK) {
		ia->ia_irq = isa_discoverintr(sbforceintr, aux);
d182 3
a184 2
			if (!SBP_IRQ_VALID(ia->ia_irq)) {
				printf("sb: couldn't auto-detect interrupt");
d189 3
a191 2
			if (!SB_IRQ_VALID(ia->ia_irq)) {
				printf("sb: couldn't auto-detect interrupt");
d198 3
a200 2
		if (!SBP_IRQ_VALID(ia->ia_irq)) {
			printf("sb: configured irq %d invalid\n", ia->ia_irq);
d203 4
a206 6
		if (ISSB16CLASS(sc))
			sbdsp_mix_write(sc, SBP_SET_IRQ, irq_conf[ia->ia_irq]);
	}
	else {
		if (!SB_IRQ_VALID(ia->ia_irq)) {
			printf("sb: configured irq %d invalid\n", ia->ia_irq);
d211 28
a238 4
	if (ISSBPROCLASS(sc))
		ia->ia_iosize = SBP_NPORT;
	else
		ia->ia_iosize = SB_NPORT;
d242 17
d265 1
a265 2
	struct isa_attach_args *ia = aux;
	int iobase = ia->ia_iobase;
d278 4
a281 4
	at_dma(DMAMODE_READ, &dmabuf, 1, ia->ia_drq);
	if (sbdsp_wdsp(iobase, SB_DSP_RDMA) == 0) {
		(void)sbdsp_wdsp(iobase, 0);
		(void)sbdsp_wdsp(iobase, 0);
a285 21
/*
 * Attach hardware to driver, attach hardware driver to audio
 * pseudo-device driver .
 */
void
sbattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	register struct sbdsp_softc *sc = (struct sbdsp_softc *)self;
	struct isa_attach_args *ia = (struct isa_attach_args *)aux;
	int err;
	
	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
	    IPL_AUDIO, sbdsp_intr, sc, sc->sc_dev.dv_xname);

	sbdsp_attach(sc);

	if ((err = audio_hardware_attach(&sb_hw_if, sc)) != 0)
		printf("sb: could not attach to audio pseudo-device driver (%d)\n", err);
}
d320 1
a320 1
	sprintf(retp->version, "%d.%d", 
@


1.10
log
@sync with 0504 -- prototypes and bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: sb.c,v 1.9 1996/04/21 22:24:30 deraadt Exp $	*/
/*	$NetBSD: sb.c,v 1.35 1996/04/29 20:03:29 christos Exp $	*/
d47 1
@


1.9
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD: sb.c,v 1.8 1996/04/18 23:47:46 niklas Exp $	*/
/*	$NetBSD: sb.c,v 1.34 1996/04/11 22:30:01 cgd Exp $	*/
a273 1
	register int iobase = ia->ia_iobase;
@


1.8
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD: sb.c,v 1.7 1996/03/20 01:01:01 mickey Exp $	*/
/*	$NetBSD: sb.c,v 1.32 1996/03/16 04:00:09 jtk Exp $	*/
d78 12
a89 2
struct cfdriver sbcd = {
	NULL, "sb", sbprobe, sbattach, DV_DULL, sizeof(struct sbdsp_softc)
d277 2
a278 2
	sc->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_AUDIO,
				       sbdsp_intr, sc, sc->sc_dev.dv_xname);
d298 1
a298 1
    if (unit >= sbcd.cd_ndevs)
d301 1
a301 1
    sc = sbcd.cd_devs[unit];
@


1.7
log
@Fix back wrong patches.
@
text
@d1 2
a2 2
/*	$OpenBSD: sb.c,v 1.6 1996/03/19 21:10:31 mickey Exp $	*/
/*	$NetBSD: sb.c,v 1.30 1996/02/16 08:18:32 mycroft Exp $	*/
a81 6
struct audio_device sb_device = {
	"SoundBlaster",
	"x",
	"sb"
};

d156 3
a217 3
	sc->sc_irq = ia->ia_irq;
	sc->sc_drq = ia->ia_drq;
	
d245 1
a245 1
	at_dma(B_READ, &dmabuf, 1, ia->ia_drq);
a271 4
	sprintf(sb_device.version, "%d.%d", 
		SBVER_MAJOR(sc->sc_model),
		SBVER_MINOR(sc->sc_model));

d303 11
a313 1
	*retp = sb_device;
@


1.6
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
a1 1
/*	$OpenBSD: sb.c,v 1.5 1996/03/08 16:43:13 niklas Exp $	*/
d274 1
a274 1
				       sbdsp_intr, sc);
@


1.5
log
@From NetBSD: merge of 960217
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d274 1
a274 1
				       sbdsp_intr, sc, sc->sc_dev.dv_xname);
@


1.4
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d1 2
a2 1
/*	$NetBSD: sb.c,v 1.28 1995/11/10 05:01:05 mycroft Exp $	*/
d75 1
a75 1
int	sbprobe();
a88 4

int	sbprobe();
void	sbattach();

d143 3
a145 3
sbprobe(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d147 1
a147 1
	register struct sbdsp_softc *sc = (void *)self;
@


1.3
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
Change splimp -> splnet in Ethernet, ARCnet, and FDDI drivers.
@
text
@d277 1
a277 1
				       sbdsp_intr, sc);
@


1.2
log
@from netbsd; Convert IRQ, DRQ, and port numbers to int
@
text
@d276 1
a276 1
	sc->sc_ih = isa_intr_establish(ia->ia_irq, ISA_IST_EDGE, ISA_IPL_AUDIO,
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: sb.c,v 1.27 1995/07/19 19:58:53 brezak Exp $	*/
d152 4
a155 1
	register u_short iobase = ia->ia_iobase;
d157 1
a157 1
	    -1, -1, 0x01, -1, -1, 0x02, -1, 0x04, -1, 0x01, 0x08
d178 2
a179 4
		if (ISSB16CLASS(sc)) {
			sbdsp_mix_write(sc, SBP_SET_DRQ, 
					1 << ia->ia_drq);
		}
d214 2
a215 4
		if (ISSB16CLASS(sc)) {
			sbdsp_mix_write(sc, SBP_SET_IRQ, 
					irq_conf[ia->ia_irq]);
		}
d241 1
a241 1
	u_short iobase = ia->ia_iobase;
d273 1
a273 1
	register u_short iobase = ia->ia_iobase;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
