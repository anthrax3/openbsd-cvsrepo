head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.4
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.14;
commitid	p4LJxGKbi0BU2cG6;

1.14
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.13;
commitid	uzzBR7hz9ncd4O6G;

1.13
date	2013.05.15.08.29.24;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.30.08.18.19;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.07.22.41.33;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.09.21.32.24;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.28.23.24.53;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.28.22.37.20;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.06.19.53.19;	author miod;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.08.05.05.32.40;	author deraadt;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	99.07.23.13.18.04;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	99.07.20.16.36.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.01.02.00.02.42;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2001.11.13.21.10.01;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2003.03.28.00.38.16;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2004.02.19.10.56.22;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2003.05.19.22.08.30;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: mpu401.c,v 1.14 2014/09/14 14:17:25 jsg Exp $	*/
/*	$NetBSD: mpu401.c,v 1.3 1998/11/25 22:17:06 augustss Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (augustss@@netbsd.org).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <sys/buf.h>

#include <machine/cpu.h>
#include <machine/intr.h>
#include <machine/bus.h>

#include <dev/audio_if.h>
#include <dev/midi_if.h>

#include <dev/isa/isavar.h>

#include <dev/ic/mpuvar.h>

#ifdef AUDIO_DEBUG
#define DPRINTF(x)	if (mpu401debug) printf x
#define DPRINTFN(n,x)	if (mpu401debug >= (n)) printf x
int	mpu401debug = 0;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

#define MPU_GETSTATUS(iot, ioh) (bus_space_read_1(iot, ioh, MPU_STATUS))

int	mpu_reset(struct mpu_softc *);
static	__inline int mpu_waitready(struct mpu_softc *);
void	mpu_readinput(struct mpu_softc *);

struct cfdriver mpu_cd = {
	NULL, "mpu", DV_DULL
};

struct midi_hw_if mpu_midi_hw_if = {
	mpu_open,
	mpu_close,
	mpu_output,
	0,			/* flush */
	mpu_getinfo,
	0,                      /* ioctl */
};

int
mpu_find(v)
	void *v;
{
	struct mpu_softc *sc = v;

	if (MPU_GETSTATUS(sc->iot, sc->ioh) == 0xff) {
		DPRINTF(("mpu_find: No status\n"));
		goto bad;
	}
	sc->open = 0;
	sc->intr = 0;
	if (mpu_reset(sc) == 0)
		return 1;
bad:
	return 0;
}

static __inline int
mpu_waitready(sc)
	struct mpu_softc *sc;
{
	int i;

	for(i = 0; i < MPU_MAXWAIT; i++) {
		if (!(MPU_GETSTATUS(sc->iot, sc->ioh) & MPU_OUTPUT_BUSY))
			return 0;
		delay(10);
	}
	return 1;
}

int
mpu_reset(sc)
	struct mpu_softc *sc;
{
	bus_space_tag_t iot = sc->iot;
	bus_space_handle_t ioh = sc->ioh;
	int i;

	if (mpu_waitready(sc)) {
		DPRINTF(("mpu_reset: not ready\n"));
		return EIO;
	}
	mtx_enter(&audio_lock);	/* Don't let the interrupt get our ACK. */
	bus_space_write_1(iot, ioh, MPU_COMMAND, MPU_RESET);
	for(i = 0; i < 2*MPU_MAXWAIT; i++) {
		if (!(MPU_GETSTATUS(iot, ioh) & MPU_INPUT_EMPTY) &&
		    bus_space_read_1(iot, ioh, MPU_DATA) == MPU_ACK) {
			mtx_leave(&audio_lock);
			return 0;
		}
	}
	mtx_leave(&audio_lock);
	DPRINTF(("mpu_reset: No ACK\n"));
	return EIO;
}

int
mpu_open(v, flags, iintr, ointr, arg)
	void *v;
	int flags;
	void (*iintr)(void *, int);
	void (*ointr)(void *);
	void *arg;
{
	struct mpu_softc *sc = v;

        DPRINTF(("mpu_open: sc=%p\n", sc));

	if (sc->open)
		return EBUSY;
	if (mpu_reset(sc) != 0)
		return EIO;

	bus_space_write_1(sc->iot, sc->ioh, MPU_COMMAND, MPU_UART_MODE);
	sc->open = 1;
	sc->intr = iintr;
	sc->arg = arg;
	return 0;
}

void
mpu_close(v)
	void *v;
{
	struct mpu_softc *sc = v;

        DPRINTF(("mpu_close: sc=%p\n", sc));

	sc->open = 0;
	sc->intr = 0;
	mpu_reset(sc); /* exit UART mode */
}

void
mpu_readinput(sc)
	struct mpu_softc *sc;
{
	bus_space_tag_t iot = sc->iot;
	bus_space_handle_t ioh = sc->ioh;
	int data;

	while(!(MPU_GETSTATUS(iot, ioh) & MPU_INPUT_EMPTY)) {
		data = bus_space_read_1(iot, ioh, MPU_DATA);
		DPRINTFN(3, ("mpu_rea: sc=%p 0x%02x\n", sc, data));
		if (sc->intr)
			sc->intr(sc->arg, data);
	}
}

/*
 * called with audio_lock
 */
int
mpu_output(v, d)
	void *v;
	int d;
{
	struct mpu_softc *sc = v;

	DPRINTFN(3, ("mpu_output: sc=%p 0x%02x\n", sc, d));
	if (!(MPU_GETSTATUS(sc->iot, sc->ioh) & MPU_INPUT_EMPTY)) {
		mpu_readinput(sc);
	}
	if (MPU_GETSTATUS(sc->iot, sc->ioh) & MPU_OUTPUT_BUSY)
		delay(10);
	if (MPU_GETSTATUS(sc->iot, sc->ioh) & MPU_OUTPUT_BUSY)
		return 0;
	bus_space_write_1(sc->iot, sc->ioh, MPU_DATA, d);
	return 1;
}

void
mpu_getinfo(addr, mi)
	void *addr;
	struct midi_info *mi;
{
	mi->name = "MPU-401 MIDI UART";
	mi->props = 0;
}

int
mpu_intr(v)
	void *v;
{
	struct mpu_softc *sc = v;

	mtx_enter(&audio_lock);
	if (MPU_GETSTATUS(sc->iot, sc->ioh) & MPU_INPUT_EMPTY) {
		mtx_leave(&audio_lock);
		DPRINTF(("mpu_intr: no data\n"));
		return 0;
	}
	mpu_readinput(sc);
	mtx_leave(&audio_lock);
	return 1;
}
@


1.14
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.13 2013/05/15 08:29:24 ratchov Exp $	*/
a48 1
#include <dev/isa/isadmavar.h>
@


1.13
log
@Introduce a global interrupt-aware mutex protecting data
structures (including sound-card registers) from concurent
access by syscall and interrupt code-paths. Since critical
sections remain the same, calls to splraise/spllower can be
safely replaced by calls to mtx_enter/mtx_leave with two
exceptions: (1) mutexes are not reentrant (the inner splraise
is thus removed), and (2) we're not allowed to sleep with a
mutex (either msleep is used or the mutex is released before
sleeping).

ok and help from kettenis, a lot of work from armani
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.12 2012/03/30 08:18:19 ratchov Exp $	*/
a38 1
#include <sys/proc.h>
@


1.12
log
@If the MIDI UART is not ready for output, don't spin at IPL_CLOCK;
just return and make the midi(4) driver retry later. UART buffers
are large enough for this, except eap(4) which uses interrupts for
output.
help from and ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.11 2008/06/26 05:42:16 ray Exp $	*/
d46 1
a53 4
#ifndef splaudio
#define splaudio() splbio()	/* XXX found in audio_if.h normally */
#endif

a120 1
	int s;
d126 1
a126 1
	s = splaudio();		/* Don't let the interrupt get our ACK. */
d131 1
a131 1
			splx(s);
d135 1
a135 1
	splx(s);
d193 3
a201 1
	int s;
a204 1
		s = splaudio();
a205 1
		splx(s);
d230 1
d232 1
d237 1
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.10 2006/04/07 22:41:33 jsg Exp $	*/
d211 4
a214 4
	if (mpu_waitready(sc)) {
		DPRINTF(("mpu_output: not ready\n"));
		return EIO;
	}
d216 1
a216 1
	return 0;
@


1.10
log
@Add optional flush method to MIDI hardware interface.
Allow umidi(4) to send multiple events in a single USB transfer.
This greatly improves the number of interrupts umidi is able to generate.

From Alexandre Ratchov.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.9 2004/01/09 21:32:24 brad Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@remove uvm_extern.h

tested on alpha, i386, powerpc, sparc64, m68k.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.8 2002/11/28 23:24:53 mickey Exp $	*/
d87 1
@


1.8
log
@same devices named the same
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.7 2002/11/28 22:37:20 mickey Exp $	*/
a47 1
#include <uvm/uvm_extern.h>
@


1.7
log
@generic isa mpu, from Sergey A. Smitienko w/ fixes from me
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.6 2002/03/14 01:26:56 millert Exp $	*/
d79 4
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.5 2001/11/06 19:53:19 miod Exp $	*/
a72 12

#define MPU401_NPORT	2
#define MPU_DATA		0
#define MPU_COMMAND	1
#define  MPU_RESET	0xff
#define  MPU_UART_MODE	0x3f
#define  MPU_ACK		0xfe
#define MPU_STATUS	1
#define  MPU_OUTPUT_BUSY	0x40
#define  MPU_INPUT_EMPTY	0x80

#define MPU_MAXWAIT	10000	/* usec/10 to wait */
@


1.5
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.4 1999/08/05 05:32:40 deraadt Exp $	*/
d163 2
a164 2
	void (*iintr)__P((void *, int));
	void (*ointr)__P((void *));
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.5 2001/11/06 19:53:19 miod Exp $	*/
d163 2
a164 2
	void (*iintr)(void *, int);
	void (*ointr)(void *);
@


1.5.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d74 12
a90 4

struct cfdriver mpu_cd = {
	NULL, "mpu", DV_DULL
};
@


1.4
log
@mv isa/mpu401var.h ic/mpuvar.h
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.3 1999/07/23 13:18:04 niklas Exp $	*/
d48 1
a48 1
#include <vm/vm.h>
@


1.4.4.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
#include <uvm/uvm_extern.h>
@


1.4.4.2
log
@Merge in -current from about a week ago
@
text
@d163 2
a164 2
	void (*iintr)(void *, int);
	void (*ointr)(void *);
@


1.4.4.3
log
@Sync the SMP branch with 3.3
@
text
@d74 12
a90 4

struct cfdriver mpu_cd = {
	NULL, "mpu", DV_DULL
};
@


1.4.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d48 1
@


1.3
log
@From NetBSD; let i386 run audio at a high IPL
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.2 1999/07/20 16:36:05 deraadt Exp $	*/
d59 1
a59 1
#include <dev/isa/mpu401var.h>
@


1.2
log
@first cut at isapnp and ym mpu
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.1 1999/01/02 00:02:42 niklas Exp $	*/
d61 1
d63 1
@


1.1
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu401.c,v 1.3 1998/11/25 22:17:06 augustss Exp $	*/
d86 11
a96 3
int	mpu401_reset(struct mpu401_softc *);
static	__inline int mpu401_waitready(struct mpu401_softc *);
void	mpu401_readinput(struct mpu401_softc *);
d99 2
a100 2
mpu401_find(sc)
	struct mpu401_softc *sc;
d102 2
d105 1
a105 1
		DPRINTF(("mpu401_find: No status\n"));
d110 1
a110 1
	if (mpu401_reset(sc) == 0)
d117 2
a118 2
mpu401_waitready(sc)
	struct mpu401_softc *sc;
d131 2
a132 2
mpu401_reset(sc)
	struct mpu401_softc *sc;
d139 2
a140 2
	if (mpu401_waitready(sc)) {
		DPRINTF(("mpu401_reset: not ready\n"));
d153 1
a153 1
	DPRINTF(("mpu401_reset: No ACK\n"));
d158 2
a159 2
mpu401_open(sc, flags, iintr, ointr, arg)
	struct mpu401_softc *sc;
d165 3
a167 1
        DPRINTF(("mpu401_open: sc=%p\n", sc));
d171 1
a171 1
	if (mpu401_reset(sc) != 0)
d182 2
a183 2
mpu401_close(sc)
	struct mpu401_softc *sc;
d185 3
a187 1
        DPRINTF(("mpu401_close: sc=%p\n", sc));
d191 1
a191 1
	mpu401_reset(sc); /* exit UART mode */
d195 2
a196 2
mpu401_readinput(sc)
	struct mpu401_softc *sc;
d204 1
a204 1
		DPRINTFN(3, ("mpu401_rea: sc=%p 0x%02x\n", sc, data));
d211 2
a212 2
mpu401_output(sc, d)
	struct mpu401_softc *sc;
d215 1
d218 1
a218 1
	DPRINTFN(3, ("mpu401_output: sc=%p 0x%02x\n", sc, d));
d221 1
a221 1
		mpu401_readinput(sc);
d224 2
a225 2
	if (mpu401_waitready(sc)) {
		DPRINTF(("mpu401_output: not ready\n"));
d233 3
a235 2
mpu401_intr(sc)
	struct mpu401_softc *sc;
d237 10
d248 2
a249 2
		DPRINTF(("mpu401_intr: no data\n"));
		return;
d251 2
a252 1
	mpu401_readinput(sc);
@

