head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.42
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.38
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.28
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.36
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.34
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.32
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.30
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.26
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.24
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.32
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.30
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.28
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.26
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.24
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.22
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.20
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.10
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2007.06.29.15.17.02;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.26.21.22.13;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	97.11.07.08.06.45;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.29.22.54.53;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.11.12.20.30.29;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.07.36.29;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ansify/de-register
no binary change
@
text
@/*	$OpenBSD: elink.c,v 1.6 2004/12/26 21:22:13 miod Exp $	*/
/*	$NetBSD: elink.c,v 1.9 1996/05/03 19:06:27 christos Exp $	*/

/*
 * Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1994, 1995 Charles Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Common code for dealing with 3COM ethernet cards.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/queue.h>

#include <machine/bus.h>

#include <dev/isa/elink.h>

/*
 * This list keeps track of which ISAs have gotten an elink_reset().
 */
struct elink_done_reset {
	LIST_ENTRY(elink_done_reset)	er_link;
	int				er_bus;
};
static LIST_HEAD(, elink_done_reset) elink_all_resets;
static int elink_all_resets_initialized;

/*
 * Issue a `global reset' to all cards, and reset the ID state machines.  We
 * have to be careful to do the global reset only once during autoconfig, to
 * prevent resetting boards that have already been configured.
 *
 * The "bus" argument here is the unit number of the ISA bus, e.g. "0"
 * if the bus is "isa0".
 *
 * NOTE: the caller MUST provide an i/o handle for ELINK_ID_PORT!
 */
void
elink_reset(bus_space_tag_t iot, bus_space_handle_t ioh, int bus)
{
	struct elink_done_reset *er;

	if (elink_all_resets_initialized == 0) {
		LIST_INIT(&elink_all_resets);
		elink_all_resets_initialized = 1;
	}

	/*
	 * Reset these cards if we haven't done so already.
	 */
	LIST_FOREACH(er, &elink_all_resets, er_link)
		if (er->er_bus == bus)
			goto out;

	/* Mark this bus so we don't do it again. */
	er = (struct elink_done_reset *)malloc(sizeof(struct elink_done_reset),
	    M_DEVBUF, M_NOWAIT);
	if (er == NULL)
		panic("elink_reset: can't allocate state storage");

	er->er_bus = bus;
	LIST_INSERT_HEAD(&elink_all_resets, er, er_link);

	/* Haven't reset the cards on this bus, yet. */
	bus_space_write_1(iot, ioh, 0, ELINK_RESET);

 out:
	bus_space_write_1(iot, ioh, 0, 0x00);
	bus_space_write_1(iot, ioh, 0, 0x00);
}

/*
 * The `ID sequence' is really just snapshots of an 8-bit CRC register as 0
 * bits are shifted in.  Different board types use different polynomials.
 *
 * NOTE: the caller MUST provide an i/o handle for ELINK_ID_PORT!
 */
void
elink_idseq(bus_space_tag_t iot, bus_space_handle_t ioh, u_char p)
{
	int i;
	u_char c;

	c = 0xff;
	for (i = 255; i; i--) {
		bus_space_write_1(iot, ioh, 0, c);
		if (c & 0x80) {
			c <<= 1;
			c ^= p;
		} else
			c <<= 1;
	}
}
@


1.6
log
@Use list and queue macros where applicable to make the code easier to read;
no change in compiler assembly output.
@
text
@d1 1
a1 1
/*	$OpenBSD: elink.c,v 1.5 1997/11/07 08:06:45 niklas Exp $	*/
d68 1
a68 4
elink_reset(iot, ioh, bus)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	int bus;
d108 1
a108 4
elink_idseq(iot, ioh, p)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	register u_char p;
d110 2
a111 2
	register int i;
	register u_char c;
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: elink.c,v 1.9 1996/05/03 19:06:27 christos Exp $	*/
d83 1
a83 2
	for (er = elink_all_resets.lh_first; er != NULL;
	    er = er->er_link.le_next)
@


1.4
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
@


1.3
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d42 1
a42 1
#include <machine/bus.old.h>
d67 3
a69 3
elink_reset(bc, ioh, bus)
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d97 1
a97 1
	bus_io_write_1(bc, ioh, 0, ELINK_RESET);
d100 2
a101 2
	bus_io_write_1(bc, ioh, 0, 0x00);
	bus_io_write_1(bc, ioh, 0, 0x00);
d111 3
a113 3
elink_idseq(bc, ioh, p)
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d121 1
a121 1
		bus_io_write_1(bc, ioh, 0, c);
@


1.2
log
@sync with 0504 -- prototypes and bus.h
@
text
@d42 1
a42 1
#include <machine/bus.h>
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: elink.c,v 1.7 1995/01/29 07:36:56 cgd Exp $	*/
d4 1
d37 7
a43 2
#include <sys/types.h>
#include <machine/pio.h>
d47 10
d60 5
d67 10
a76 7
elink_reset()
{  
	static int x = 0;

	if (x == 0) {
		x = 1;
		outb(ELINK_ID_PORT, ELINK_RESET);
d78 24
a101 2
	outb(ELINK_ID_PORT, 0x00);
	outb(ELINK_ID_PORT, 0x00);
d107 2
d111 3
a113 1
elink_idseq(p)
d121 1
a121 1
		outb(ELINK_ID_PORT, c);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
