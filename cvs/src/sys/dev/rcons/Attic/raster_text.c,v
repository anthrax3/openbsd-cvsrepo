head	1.6;
access;
symbols
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.20
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.18
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.16
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.10
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2006.08.06.13.07.00;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.03;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.03.16.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.11.07.08.07.39;	author niklas;	state Exp;
branches
	1.3.10.1
	1.3.20.1;
next	1.2;

1.2
date	95.12.14.06.22.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.41;	author deraadt;	state Exp;
branches;
next	;

1.3.10.1
date	2002.03.28.15.03.52;	author niklas;	state Exp;
branches;
next	1.3.10.2;

1.3.10.2
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	;

1.3.20.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Time for rcons code to retire.
@
text
@/*	$OpenBSD: raster_text.c,v 1.5 2003/06/02 23:28:03 millert Exp $ */
/*	$NetBSD: raster_text.c,v 1.3 1995/11/24 23:50:56 cgd Exp $ */

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to the Computer Systems
 * Engineering Group at Lawrence Berkeley Laboratory and to the University
 * of California at Berkeley by Jef Poskanzer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)raster_text.c	8.1 (Berkeley) 6/11/93
 */

/*
 * Text routines for raster library.
 */

#ifdef _KERNEL
#include <sys/param.h>
#include <sys/systm.h>
#include <dev/rcons/raster.h>
#ifdef COLORFONT_CACHE
#include <sys/malloc.h>
#define NEW(size) malloc(size, M_DEVBUF, M_NOWAIT)
#endif
#else
#include <sys/types.h>
#include <string.h>
#include "raster.h"
#ifdef COLORFONT_CACHE
#include <malloc.h>
#define NEW(size) malloc(size)
#endif
#endif

/* Draws text.  Returns 0 on success, -1 on failure. */
int
raster_text( r, x, y, rop, rf, text )
    register struct raster* r;
    int x, y;
    int rop;
    struct raster_font* rf;
    unsigned char *text;
    {
    return raster_textn( r, x, y, rop, rf, text, strlen( text ) );
    }

/* Draws n characters of text.  Returns 0 on success, -1 on failure. */
int
raster_textn( r, x, y, rop, rf, text, n )
    register struct raster* r;
    int x, y;
    int rop;
    struct raster_font* rf;
    unsigned char *text;
    int n;
    {
    int clip;
    int x1, y1;
    struct raster_char *c;
    struct raster* charrast;
    int i;
    register unsigned char ch;
    int thisx, thisy;
    int phase;

    /* Check whether we can avoid clipping. */
    clip = 0;
    if ( rf->flags & RASFONT_FIXEDWIDTH &&
	 rf->flags & RASFONT_NOVERTICALMOVEMENT )
	{
	/* This font is well-behaved, we can compute the extent cheaply. */
	c = &(rf->chars['@@']);
	charrast = c->r;
	if ( x + c->homex < 0 || y + c->homey < 0 ||
	     x + c->homex + n * c->nextx > r->width ||
	     y + c->homey + charrast->height > r->height )
	    clip = 1;
	}
    else
	{
	/* Got to step through the string to compute the extent. */
	for ( i = 0, x1 = x, y1 = y;
	      i < n;
	      ++i, x1 += c->nextx, y1 += c->nexty )
	    {
	    c = &(rf->chars[text[i]]);
	    charrast = c->r;
	    if ( charrast != (struct raster*) 0 )
		{
		if ( x1 + c->homex < 0 || y1 + c->homey < 0 ||
		     x1 + c->homex + charrast->width > r->width ||
		     y1 + c->homey + charrast->height > r->height )
		    {
		    clip = 1;
		    break;
		    }
		}
	    }
	}

    /* Now display the text. */
    for ( i = 0, x1 = x, y1 = y;
	  i < n;
	  ++i, x1 += c->nextx, y1 += c->nexty )
	{
	ch = text[i];
	c = &(rf->chars[ch]);
	charrast = c->r;
	if ( charrast != (struct raster*) 0 )
	    {
	    thisx = x1 + c->homex;
	    thisy = y1 + c->homey;

	    phase = 0;
#ifdef COLORFONT_CACHE
	    if ( r->depth == 8 )
		{
		/* Initialize color font cache if necessary. */
		if ( rf->cache == (struct raster_fontcache*) -1 )
		    {
		    int c;

		    rf->cache = (struct raster_fontcache*)
			NEW( sizeof(struct raster_fontcache) );
		    if ( rf->cache != (struct raster_fontcache*) 0 )
			for ( c = 0; c < 256; ++c )
			    rf->cache->cr[c] = (struct raster*) 0;
		    }

		if ( rf->cache != (struct raster_fontcache*) 0 )
		    {
		    int color;
		    struct raster* cr;

		    color = RAS_GETCOLOR( rop );
		    cr = rf->cache->cr[ch];
		    /* Is this character cached yet? */
		    if ( cr != (struct raster*) 0 )
			{
			/* Yes, but is it the right color? */
			if ( rf->cache->color[ch] == color )
			    {
			    /* Yes - switch rasters. */
			    charrast = cr;
			    }
			else
			    {
			    /* No, re-draw it. */
			    if ( raster_op_noclip(
				 cr, 0, 0, charrast->width,
				 charrast->height, rop, charrast, 0, 0 ) == 0 )
				{
				rf->cache->color[ch] = color;
				charrast = cr;
				}
			    }
			}
		    else
			{
			/* It's not cached, so cache it. */
			cr = raster_alloc(
			    charrast->width, charrast->height, 8 );
			if ( cr != (struct raster*) 0 )
			    if ( raster_op_noclip(
				 cr, 0, 0, charrast->width, charrast->height,
				 rop, charrast, 0, 0 ) == 0 )
				{
				rf->cache->color[ch] = color;
				charrast = rf->cache->cr[ch] = cr;
				}
			}
		    }
		}
#endif /*COLORFONT_CACHE*/

	    if ( clip )
		{
		if ( raster_op(
			 r, thisx, thisy, charrast->width, charrast->height,
			 rop, charrast, phase, 0 ) < 0 )
		    return -1;
		}
	    else
		{
		if ( raster_op_noclip(
			 r, thisx, thisy, charrast->width, charrast->height,
			 rop, charrast, phase, 0 ) < 0 )
		    return -1;
		}
	    }
	}

    return 0;
    }

#ifdef COLORFONT_CACHE
/* Allocates a raster.  Returns (struct raster*) 0 on failure. */
struct raster*
raster_alloc( width, height, depth )
    int width, height, depth;
    {
    struct raster* r;
    int linelongs;

    if ( width <= 0 || height <= 0 || ( depth != 1 && depth != 8 ) )
	return (struct raster*) 0;
    linelongs = ( ( width * depth + 31 ) >> 5 );
    r = (struct raster*)
	NEW( sizeof(struct raster) + height * linelongs * sizeof(u_int32_t));
    if ( r == (struct raster*) 0 )
	return (struct raster*) 0;

    r->width = width;
    r->height = height;
    r->depth = depth;
    r->linelongs = linelongs;
    r->pixels = (u_int32_t*) (r + 1);
    r->data = (caddr_t) 0;
    return r;
    }
#endif
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: raster_text.c,v 1.4 2002/03/14 03:16:07 millert Exp $ */
@


1.4
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: raster_text.c,v 1.3 1997/11/07 08:07:39 niklas Exp $ */
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: raster_text.c,v 1.3 1995/11/24 23:50:56 cgd Exp $ */
d72 1
a72 1
    unsigned char* text;
d84 1
a84 1
    unsigned char* text;
d89 1
a89 1
    struct raster_char* c;
@


1.3.20.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: raster_text.c,v 1.3 1997/11/07 08:07:39 niklas Exp $ */
d72 1
a72 1
    unsigned char *text;
d84 1
a84 1
    unsigned char *text;
d89 1
a89 1
    struct raster_char *c;
@


1.3.10.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d72 1
a72 1
    unsigned char *text;
d84 1
a84 1
    unsigned char *text;
d89 1
a89 1
    struct raster_char *c;
@


1.3.10.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: raster_text.c,v 1.3.10.1 2002/03/28 15:03:52 niklas Exp $ */
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@from netbsd:
Make it work on little-endian monochrome buffers; per Ted.
Must change `u_long' to `u_int32_t' as Jason pointed out.
since 'long's in this code are meant to be exactly 32-bits wide, use
'int32_t's instead, so that this code is usable on the alpha.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: raster_text.c,v 1.2 1995/10/04 23:57:22 pk Exp $ */
d48 1
d56 2
a57 1
#include <dev/rcons/raster.h>
a63 1

d238 1
a238 1
	NEW( sizeof(struct raster) + height * linelongs * sizeof(u_long));
d246 1
a246 1
    r->pixels = (u_long*) (r + 1);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
