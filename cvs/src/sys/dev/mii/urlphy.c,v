head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.10
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.18
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.16
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.14
	OPENBSD_5_0:1.13.0.12
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.10
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.8
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.6
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.4
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	SMP:1.3.0.6
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	UBC_SYNC_B:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	UBC:1.2.0.2;
locks; strict;
comment	@ * @;


1.17
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.16;
commitid	p4LJxGKbi0BU2cG6;

1.16
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.15;
commitid	t9FBKDfc4VDxpEy2;

1.15
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.05.28.09.46.06;	author mikeb;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.08.07.50.15;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.27.19.11.09;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.27.08.04.15;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.26.04.40.09;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.05.04.56.27;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.17.23.01.12;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.29.09.51.07;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.26.11.29.55;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.07.19.50.01;	author nate;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.05.07.19.31.16;	author nate;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.10.29.00.33.27;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: urlphy.c,v 1.16 2014/12/05 15:50:04 mpi Exp $ */
/*	$NetBSD: urlphy.c,v 1.1 2002/03/28 21:07:53 ichiro Exp $	*/
/*
 * Copyright (c) 2001, 2002
 *     Shingo WATANABE <nabe@@nabechan.org>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * driver for Realtek RL8150L internal phy
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/urlphyreg.h>

#define	URLPHY_DEBUG	0
#ifdef URLPHY_DEBUG
#define DPRINTF(x)	if (urlphydebug) printf x
#define DPRINTFN(n,x)	if (urlphydebug>(n)) printf x
int urlphydebug = URLPHY_DEBUG;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

int urlphy_match(struct device *, void *, void *);
void urlphy_attach(struct device *, struct device *, void *);

struct cfattach urlphy_ca = {
	sizeof(struct mii_softc), urlphy_match, urlphy_attach, mii_phy_detach
};

struct cfdriver urlphy_cd = {
	NULL, "urlphy", DV_DULL
};

int urlphy_service(struct mii_softc *, struct mii_data *, int);
void urlphy_status(struct mii_softc *);

const struct mii_phy_funcs urlphy_funcs = {
	urlphy_service, urlphy_status, mii_phy_reset,
};

int
urlphy_match(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	/*
	 * RTL8150 reports OUT == 0, MODEL == 0
	 */
	if (MII_OUI(ma->mii_id1, ma->mii_id2) != 0 &&
	    MII_MODEL(ma->mii_id2) != 0)
		return (0);

	/*
	 * Make sure the parent is an 'url' device.
	 */
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "url") != 0)
		return (0);

	return (10);
}

void
urlphy_attach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;

	printf(": RTL internal phy\n");

	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __func__));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &urlphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;
	sc->mii_anegticks = MII_ANEGTICKS_GIGE;

	sc->mii_flags |= MIIF_NOISOLATE | MIIF_NOLOOP;

	if (mii->mii_instance != 0) {
		printf("%s: ignoring this PHY, non-zero instance\n",
		       sc->mii_dev.dv_xname);
		return;
	}
	PHY_RESET(sc);

	sc->mii_capabilities = PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
urlphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __func__));

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		/* If the interface is not up, don't do anything. */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		/* Just bail now if the interface is down. */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * If we're not doing autonegotiation, we don't need to do
		 * any extra work here.  However, we need to check the link
		 * status so we can generate an announcement if the status
		 * changes.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/* Read the status register twice; MSR_LINK is latch-low. */
		reg = PHY_READ(sc, URLPHY_MSR) | PHY_READ(sc, URLPHY_MSR);
		if (reg & URLPHY_MSR_LINK) {
			sc->mii_ticks = 0;
			break;
		}

		/*
	 	 * Only retry autonegotiation every mii_anegticks seconds.
		 */
		if (++sc->mii_ticks <= sc->mii_anegticks)
			return (0);

		sc->mii_ticks = 0;
		PHY_RESET(sc);

		if (mii_phy_auto(sc, 0) == EJUSTRETURN)
			return (0);

		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);

	return (0);
}

void
urlphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int msr, bmsr, bmcr;

	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __func__));

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	/*
	 * The link status bit is not exist in the BMSR register,
	 * so we need to read the MSR register to get link status.
	 */
	msr = PHY_READ(sc, URLPHY_MSR) | PHY_READ(sc, URLPHY_MSR);
	if (msr & URLPHY_MSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	DPRINTF(("%s: %s: link %s\n", sc->mii_dev.dv_xname, __func__,
		 mii->mii_media_status & IFM_ACTIVE ? "up" : "down"));

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_AUTOEN) {
		bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		if (msr & URLPHY_MSR_SPEED_100)
			mii->mii_media_active |= IFM_100_TX;
		else
			mii->mii_media_active |= IFM_10_T;

		if (msr & URLPHY_MSR_DUPLEX)
			mii->mii_media_active |= IFM_FDX;
		else
			mii->mii_media_active |= IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.16
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.15 2013/12/28 03:30:41 deraadt Exp $ */
a48 1
#include <dev/mii/miidevs.h>
@


1.15
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.14 2013/05/28 09:46:06 mikeb Exp $ */
d44 1
@


1.14
log
@Fix a common issue across different PHY drivers to reset the
autonegotiation timer when PHY gets the link so that if we
restart the timer the mii_ticks value would be sane.

Lifted originally from FreeBSD, tested by a few on re(4) and
bge(4), ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.13 2008/09/08 07:50:15 brad Exp $ */
d65 1
a65 2
	sizeof(struct mii_softc), urlphy_match, urlphy_attach, mii_phy_detach,
	mii_phy_activate
@


1.13
log
@remove some useless comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.12 2006/12/27 19:11:09 kettenis Exp $ */
d189 4
a192 2
		if (reg & URLPHY_MSR_LINK)
			return (0);
@


1.12
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.11 2005/05/27 08:04:15 brad Exp $ */
d119 1
a119 4
	/* Don't do loopback on this PHY. */
	sc->mii_flags |= MIIF_NOLOOP;
	/* Don't do isolate on this PHY. */
	sc->mii_flags |= MIIF_NOISOLATE;
@


1.11
log
@some cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.10 2005/03/26 04:40:09 krw Exp $ */
d259 1
d262 2
@


1.10
log
@Cleanup. Use defines, standard names, consistant comparison operators, etc.
for auto negotiation ticks code. No functional change.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.9 2005/02/05 04:56:27 brad Exp $ */
d96 1
a96 1
		return(0);
@


1.9
log
@no RTL8201L PHY's here..
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.8 2005/01/28 18:27:55 brad Exp $ */
d117 1
a117 1
	sc->mii_anegticks = 10;
d196 1
a196 1
		 * Only retry autonegotiation every N seconds.
d198 1
a198 2
		KASSERT(sc->mii_anegticks != 0);
		if (++sc->mii_ticks != sc->mii_anegticks)
@


1.8
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.7 2004/10/17 23:01:12 deraadt Exp $ */
d108 1
a108 5
	if (MII_MODEL(ma->mii_id2) == MII_MODEL_REALTEK_RTL8201L) {
		printf(": %s, rev. %d\n", MII_STR_REALTEK_RTL8201L,
		    MII_REV(ma->mii_id2));
	} else
		printf(": RTL internal phy\n");
@


1.7
log
@model internal phy chunk on the one from rlphy
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.6 2004/09/29 09:51:07 dlg Exp $ */
d120 1
a120 1
	sc->mii_flags = mii->mii_flags;
@


1.6
log
@from netbsd: if_url.c 1.8, if_urlreg.h 1.2, urlphy.c 1.9 and urlphyreg.h 1.2
via Jonathan Gray
log message:

Remove advertising clauses from code written by Shingo WATANABE.
He has kindly consented it.
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.5 2004/09/26 00:59:58 brad Exp $ */
d107 6
@


1.5
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.4 2004/09/20 06:05:27 brad Exp $ */
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Shingo WATANABE.
 * 4. Neither the name of the author nor the names of any co-contributors
@


1.4
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.3 2002/06/26 11:29:55 espie Exp $ */
d79 4
d115 1
a115 2
	sc->mii_service = urlphy_service;
	sc->mii_status = urlphy_status;
d130 1
a130 1
	mii_phy_reset(sc);
d204 1
a204 1
		mii_phy_reset(sc);
@


1.3
log
@Kill __FUNCTION__.
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.2 2002/05/07 19:50:01 nate Exp $ */
a43 1
#include <sys/malloc.h>
@


1.2
log
@Less verbose. noticed by fgsch
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.1 2002/05/07 19:31:16 nate Exp $ */
d108 1
a108 1
	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __FUNCTION__));
d141 1
a141 1
	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __FUNCTION__));
d230 1
a230 1
	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __FUNCTION__));
d243 1
a243 1
	DPRINTF(("%s: %s: link %s\n", sc->mii_dev.dv_xname, __FUNCTION__,
@


1.2.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.2.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: urlphy.c,v 1.2.2.1 2002/06/11 03:42:24 art Exp $ */
d108 1
a108 1
	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __func__));
d141 1
a141 1
	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __func__));
d230 1
a230 1
	DPRINTF(("%s: %s: enter\n", sc->mii_dev.dv_xname, __func__));
d243 1
a243 1
	DPRINTF(("%s: %s: link %s\n", sc->mii_dev.dv_xname, __func__,
@


1.1
log
@Add urlphy(4) which is used by url(4).
From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a107 2
	printf(": Realtek RTL8150L internal media interface\n");

d131 1
a131 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a132 1
	printf("\n");
@

