head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.10
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.36
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.34
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.32
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.30
	OPENBSD_5_0:1.12.0.28
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.26
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.24
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.20
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.22
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.18
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.16
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.14
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.12
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.14;
commitid	p4LJxGKbi0BU2cG6;

1.14
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.13;
commitid	t9FBKDfc4VDxpEy2;

1.13
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.19.06.00.04;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.19.08.58;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.26.20.04.18;	author nate;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	99.12.07.22.01.31;	author jason;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.07.23.12.39.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.07.16.14.59.07;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.12.28.03.37.55;	author jason;	state Exp;
branches;
next	;

1.4.2.1
date	2001.05.14.22.25.26;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	;

1.5.8.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: mtdphy.c,v 1.14 2014/12/05 15:50:04 mpi Exp $	*/

/*
 * Copyright (c) 1998, 1999 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for the Myson Technology MTD972 100BaseTX PCS/PMA.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

int	mtdphymatch(struct device *, void *, void *);
void	mtdphyattach(struct device *, struct device *, void *);

struct cfattach mtdphy_ca = {
	sizeof(struct mii_softc), mtdphymatch, mtdphyattach, mii_phy_detach
};

struct cfdriver mtdphy_cd = {
	NULL, "mtdphy", DV_DULL
};

int	mtdphy_service(struct mii_softc *, struct mii_data *, int);

const struct mii_phy_funcs mtdphy_funcs = {
	mtdphy_service, ukphy_status, mii_phy_reset,
};

static const struct mii_phydesc mtdphys[] = {
	{ MII_OUI_MYSON,		MII_MODEL_MYSON_MTD972,
	  MII_STR_MYSON_MTD972 },

	{ 0,			0,
	  NULL },
};

int
mtdphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, mtdphys) != NULL)
		return (10);

	return (0);
}

void
mtdphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, mtdphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &mtdphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
mtdphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the interface is not up, don't do anything.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 *If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}
@


1.14
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.13 2013/12/28 03:30:41 deraadt Exp $	*/
a46 1
#include <dev/mii/mtdphyreg.h>
@


1.13
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.12 2005/02/19 06:00:04 brad Exp $	*/
d41 1
@


1.12
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.11 2005/01/28 18:27:55 brad Exp $	*/
d52 1
a52 2
	sizeof(struct mii_softc), mtdphymatch, mtdphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.11
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.10 2004/09/27 18:25:48 brad Exp $	*/
d66 8
d79 1
a79 2
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_MYSON &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_MYSON_MTD972)
d91 1
d93 2
a94 1
	printf(": %s, rev. %d\n", MII_STR_MYSON_MTD972, MII_REV(ma->mii_id2));
@


1.10
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.9 2004/09/26 00:59:58 brad Exp $	*/
d91 1
a91 1
	sc->mii_flags = mii->mii_flags;
@


1.9
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.8 2004/09/20 06:05:27 brad Exp $	*/
d67 1
a67 4
mtdphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d79 1
a79 3
mtdphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d102 1
a102 4
mtdphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
@


1.8
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.7 2003/06/02 19:08:58 jason Exp $	*/
d62 4
d94 1
a94 2
	sc->mii_service = mtdphy_service;
	sc->mii_status = ukphy_status;
d98 1
a98 1
	mii_phy_reset(sc);
@


1.7
log
@nuke clase 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.6 2002/03/14 01:26:58 millert Exp $	*/
a36 1
#include <sys/malloc.h>
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.5 2000/08/26 20:04:18 nate Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.4 1999/12/07 22:01:31 jason Exp $	*/
d54 2
a55 2
int	mtdphymatch __P((struct device *, void *, void *));
void	mtdphyattach __P((struct device *, struct device *, void *));
d66 1
a66 1
int	mtdphy_service __P((struct mii_softc *, struct mii_data *, int));
@


1.5.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.5 2000/08/26 20:04:18 nate Exp $	*/
d54 2
a55 2
int	mtdphymatch(struct device *, void *, void *);
void	mtdphyattach(struct device *, struct device *, void *);
d66 1
a66 1
int	mtdphy_service(struct mii_softc *, struct mii_data *, int);
@


1.4
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.3 1999/07/23 12:39:11 deraadt Exp $	*/
d58 2
a59 1
	sizeof(struct mii_softc), mtdphymatch, mtdphyattach
d97 1
d99 1
d106 1
a106 1
		mii_add_media(sc);
d118 3
d143 1
a143 13
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;

		default:
			mii_phy_setmedia(sc);
		}
d153 1
a153 4
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
a154 11

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * The MTD972 autonegotiation doesn't need to be
		 * kicked; it continues in the background.
		 */
d163 1
a163 1
	ukphy_status(sc);
d166 1
a166 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.4.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.5 2000/08/26 20:04:18 nate Exp $	*/
d58 1
a58 2
	sizeof(struct mii_softc), mtdphymatch, mtdphyattach, mii_phy_detach,
	    mii_phy_activate
a95 1
	sc->mii_status = ukphy_status;
a96 1
	sc->mii_flags = mii->mii_flags;
d103 1
a103 1
		mii_phy_add_media(sc);
a114 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d137 13
a149 1
		mii_phy_setmedia(sc);
d159 4
a162 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d164 11
d183 1
a183 1
	mii_phy_status(sc);
d186 4
a189 1
	mii_phy_update(sc, cmd);
@


1.4.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 2
a55 2
int	mtdphymatch(struct device *, void *, void *);
void	mtdphyattach(struct device *, struct device *, void *);
d66 1
a66 1
int	mtdphy_service(struct mii_softc *, struct mii_data *, int);
@


1.4.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.4.2.2 2002/03/28 15:34:52 niklas Exp $	*/
d15 5
@


1.3
log
@do not print media information to dmesg; ifconfig shows it
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.2 1999/07/16 14:59:07 jason Exp $	*/
a97 7
	ifmedia_add(&mii->mii_media,
	    IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
	    BMCR_ISO, NULL);
	ifmedia_add(&mii->mii_media,
	    IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->mii_inst),
	    BMCR_LOOP | BMCR_S100, NULL);

d103 1
a103 2
		mii_add_media(mii, sc->mii_capabilities,
		    sc->mii_inst);
a146 19
		case IFM_100_TX:
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));

			reg = BMCR_ISO | BMCR_S100;
			if ((ife->ifm_media & IFM_GMASK) == IFM_FDX)
				reg |= BMCR_FDX;
			PHY_WRITE(sc, MII_BMCR, reg);
			delay(75000);

			reg &= ~BMCR_ISO;
			PHY_WRITE(sc, MII_BMCR, reg);
			break;

		case IFM_100_T4:
			/*
			 * Not supported by MTD972.
			 */
			return (EINVAL);
d148 1
a148 6
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
d176 4
@


1.2
log
@Sync with NetBSD:
o Implement asynchronous autonegotiation when driven by the MII tick
  (one-second clock).  Prevents .5s delays every 5 seconds when the interface
  is up but there is no link.
o Correct the sense of the PCR_FLINK100 bit in nsphy.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtdphy.c,v 1.1 1998/12/28 03:37:55 jason Exp $	*/
d109 1
a109 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a111 1
	printf("\n");
@


1.1
log
@Myson MTD972 driver.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 1998 Jason L. Wright (jason@@thought.net)
d44 1
d156 1
a156 1
			(void) mii_phy_auto(sc);
@

