head	1.33;
access;
symbols
	OPENBSD_6_2:1.33.0.14
	OPENBSD_6_2_BASE:1.33
	OPENBSD_6_1:1.33.0.12
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.8
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.2
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.6
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.4
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.32.0.6
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.32.0.4
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.30.0.18
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.16
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.14
	OPENBSD_5_0:1.30.0.12
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.10
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.8
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.30.0.4
	OPENBSD_4_7_BASE:1.30
	OPENBSD_4_6:1.30.0.6
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.30.0.2
	OPENBSD_4_5_BASE:1.30
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.27.0.6
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.4
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.2
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.22.0.2
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.8
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.33
date	2014.11.24.00.13.42;	author brad;	state Exp;
branches;
next	1.32;
commitid	dG4klX8JagOtmCjj;

1.32
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2013.06.15.20.31.05;	author kettenis;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.11.18.26.58;	author brad;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.08.07.38.33;	author brad;	state Exp;
branches;
next	1.28;

1.28
date	2008.06.10.21.15.14;	author brad;	state Exp;
branches;
next	1.27;

1.27
date	2007.01.27.20.55.14;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2006.12.27.19.11.09;	author kettenis;	state Exp;
branches;
next	1.25;

1.25
date	2006.11.02.01.27.34;	author brad;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.23.06.40.05;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.16.02.24.45;	author brad;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.12.00.12.11;	author maja;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.11.21.53.10;	author brad;	state Exp;
branches;
next	1.20;

1.20
date	2005.07.31.05.27.30;	author pvalchev;	state Exp;
branches;
next	1.19;

1.19
date	2005.07.30.08.00.44;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.27.08.04.15;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.10.22.52.56;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.10.20.33.01;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.07.21.30.57;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.30.14.58.02;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.23.15.32.59;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.19.08.58;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.26.20.04.18;	author nate;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	99.12.07.22.01.32;	author jason;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.07.23.12.39.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.07.16.14.59.07;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	98.11.20.02.42.14;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.11.18.20.11.31;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.14.22.25.27;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	;

1.6.8.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.33
log
@use the correct capitalization for Realtek.
@
text
@/*	$OpenBSD: rlphy.c,v 1.32 2013/12/28 03:30:41 deraadt Exp $	*/

/*
 * Copyright (c) 1998, 1999 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for the internal PHY found on RTL8139 based nics, based
 * on drivers for the 'exphy' (Internal 3Com phys) and 'nsphy'
 * (National Semiconductor DP83840).
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/ic/rtl81x9reg.h>

int	rlphymatch(struct device *, void *, void *);
void	rlphyattach(struct device *, struct device *, void *);

struct cfattach rlphy_ca = {
	sizeof(struct mii_softc), rlphymatch, rlphyattach, mii_phy_detach
};

struct cfdriver rlphy_cd = {
	NULL, "rlphy", DV_DULL
};

int	rlphy_service(struct mii_softc *, struct mii_data *, int);
void	rlphy_status(struct mii_softc *);

const struct mii_phy_funcs rlphy_funcs = {
	rlphy_service, rlphy_status, mii_phy_reset,
};

static const struct mii_phydesc rlphys[] = {
	{ MII_OUI_REALTEK,		MII_MODEL_REALTEK_RTL8201L,
          MII_STR_REALTEK_RTL8201L },
	{ MII_OUI_xxREALTEK,		MII_MODEL_xxREALTEK_RTL8201E,
          MII_STR_xxREALTEK_RTL8201E },
	{ MII_OUI_ICPLUS,		MII_MODEL_ICPLUS_IP101,
	  MII_STR_ICPLUS_IP101 },

	{ 0,				0,
	  NULL },
};
int
rlphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;
	char *devname;

	devname = parent->dv_cfdata->cf_driver->cd_name;

	if (mii_phy_match(ma, rlphys) != NULL)
		return (10);

	if (MII_OUI(ma->mii_id1, ma->mii_id2) != 0 ||
	    MII_MODEL(ma->mii_id2) != 0)
		return (0);

	if ((strcmp(devname, "re") != 0) &&
	    (strcmp(devname, "rl") != 0))
		return (0);

	/*
	 * A "real" phy should get preference, but on the 8139 there
	 * is no phyid register.
	 */
	return (5);
}

void
rlphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, rlphys);
	if (mpd != NULL) {
		printf(": %s, rev. %d\n", mpd->mpd_name,
		    MII_REV(ma->mii_id2));
	} else
		printf(": RTL internal PHY\n");

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &rlphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	sc->mii_flags |= MIIF_NOISOLATE;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
rlphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	/*
	 * Can't isolate the RTL8139 phy, so it has to be the only one.
	 */
	if (IFM_INST(ife->ifm_media) != sc->mii_inst)
		panic("rlphy_service: attempt to isolate phy");

	switch (cmd) {
	case MII_POLLSTAT:
		break;

	case MII_MEDIACHG:
		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 0);
			break;
		case IFM_100_T4:
			/*
			 * XXX Not supported as a manual setting right now.
			 */
			return (EINVAL);
		default:
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
		}
		break;

	case MII_TICK:
		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * The Realtek PHY's autonegotiation doesn't need to be
		 * kicked; it continues in the background.
		 */
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
rlphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, anlpar;
	char *devname;

	devname = sc->mii_dev.dv_parent->dv_cfdata->cf_driver->cd_name;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		/*
		 * NWay autonegotiation takes the highest-order common
		 * bit of the ANAR and ANLPAR (i.e. best media advertised
		 * both by us and our link partner).
		 */
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		if ((anlpar = PHY_READ(sc, MII_ANAR) &
		    PHY_READ(sc, MII_ANLPAR))) {
			if (anlpar & ANLPAR_TX_FD)
				mii->mii_media_active |= IFM_100_TX|IFM_FDX;
			else if (anlpar & ANLPAR_T4)
				mii->mii_media_active |= IFM_100_T4|IFM_HDX;
			else if (anlpar & ANLPAR_TX)
				mii->mii_media_active |= IFM_100_TX|IFM_HDX;
			else if (anlpar & ANLPAR_10_FD)
				mii->mii_media_active |= IFM_10_T|IFM_FDX;
			else if (anlpar & ANLPAR_10)
				mii->mii_media_active |= IFM_10_T|IFM_HDX;
			else
				mii->mii_media_active |= IFM_NONE;
			return;
		}

		/*
		 * If the other side doesn't support NWAY, then the
		 * best we can do is determine if we have a 10Mbps or
		 * 100Mbps link. There's no way to know if the link 
		 * is full or half duplex, so we default to half duplex
		 * and hope that the user is clever enough to manually
		 * change the media settings if we're wrong.
		 */

		/*
		 * The Realtek PHY supports non-NWAY link speed
		 * detection, however it does not report the link
		 * detection results via the ANLPAR or BMSR registers.
		 * (What? Realtek doesn't do things the way everyone
		 * else does? I'm just shocked, shocked I tell you.)
		 * To determine the link speed, we have to do one
		 * of two things:
		 *
		 * - If this is a standalone Realtek RTL8201(L) PHY,
		 *   we can determine the link speed by testing bit 0
		 *   in the magic, vendor-specific register at offset
		 *   0x19.
		 *
		 * - If this is a Realtek MAC with integrated PHY, we
		 *   can test the 'SPEED10' bit of the MAC's media status
		 *   register.
		 */
		if (strcmp("rl", devname) == 0 ||
		    strcmp("re", devname) == 0) {
			if (PHY_READ(sc, RL_MEDIASTAT) & RL_MEDIASTAT_SPEED10)
				mii->mii_media_active |= IFM_10_T;
			else
				mii->mii_media_active |= IFM_100_TX;
		} else {
			if (PHY_READ(sc, 0x0019) & 0x01)
				mii->mii_media_active |= IFM_100_TX;
			else
				mii->mii_media_active |= IFM_10_T;
		}
		mii->mii_media_active |= IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.32
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.31 2013/06/15 20:31:05 kettenis Exp $	*/
d199 1
a199 1
		 * The RealTek PHY's autonegotiation doesn't need to be
d283 1
a283 1
		 * The RealTek PHY supports non-NWAY link speed
d286 1
a286 1
		 * (What? RealTek doesn't do things the way everyone
d291 1
a291 1
		 * - If this is a standalone RealTek RTL8201(L) PHY,
d296 1
a296 1
		 * - If this is a RealTek MAC with integrated PHY, we
@


1.31
log
@Add support for RTL8101E 10/100 PHY.

ok miod@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.30 2008/09/11 18:26:58 brad Exp $	*/
d60 1
a60 2
	sizeof(struct mii_softc), rlphymatch, rlphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.30
log
@In rlphy_service() for the MII_TICK case don't bother to check whether
the currently selected media is of type IFM_AUTO as autonegotiation
does not need to be kicked anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.29 2008/09/08 07:38:33 brad Exp $	*/
d78 2
@


1.29
log
@IEEE 802.3 Annex 28B.3 explicitly specifies the following relative
priorities of the technologies supported by 802.3 Selector Field
value.

1000BASE-T full duplex
1000BASE-T
100BASE-T2 full duplex
100BASE-TX full duplex
100BASE-T2
100BASE-T4
100BASE-TX
10BASE-T full duplex
10BAST-T

However PHY drivers did not honor the order such that 100BASE-T4 had
higher priority than 100BASE-TX full duplex. Fix a long standing bug
such that PHY drivers choose the highest common denominator ability.

This bug is exposed by a Cisco 3550 switch which inadvertently
announces 100BASE-T4 capability even though it is not capable of
100BASE-T4 operation, it is a 100BASE-TX switch.

From FreeBSD

Tested with dc(4), fxp(4), rl(4), sis(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.28 2008/06/10 21:15:14 brad Exp $	*/
a195 6

		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			break;
@


1.28
log
@Some header cleanup. Remove some unused headers and shuffle some around
for consistency between drivers.

"looks good" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.27 2007/01/27 20:55:14 miod Exp $	*/
d263 3
a265 1
			if (anlpar & ANLPAR_T4)
a266 2
			else if (anlpar & ANLPAR_TX_FD)
				mii->mii_media_active |= IFM_100_TX|IFM_FDX;
@


1.27
log
@In autoneg mode, use RL_MEDIASTAT on re(4), like we do on rl(4) already.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.26 2006/12/27 19:11:09 kettenis Exp $	*/
a39 1
#include <sys/timeout.h>
d42 2
d46 1
d53 1
a53 1
#include <machine/bus.h>
@


1.26
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.25 2006/11/02 01:27:34 brad Exp $	*/
d303 2
a304 1
		if (strcmp("rl", devname) == 0) {
@


1.25
log
@simplify parent driver matching code a bit. no-op change.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.24 2006/07/23 06:40:05 brad Exp $	*/
d262 1
a262 1
				mii->mii_media_active |= IFM_100_T4;
d266 1
a266 1
				mii->mii_media_active |= IFM_100_TX;
d270 1
a270 1
				mii->mii_media_active |= IFM_10_T;
d314 1
a314 1

@


1.24
log
@add sys/timeout.h
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.23 2006/05/16 02:24:45 brad Exp $	*/
d86 3
d97 2
a98 2
	if ((strcmp(parent->dv_cfdata->cf_driver->cd_name, "re") != 0) &&
	    (strcmp(parent->dv_cfdata->cf_driver->cd_name, "rl") != 0))
d226 3
d303 1
a303 3
		if (strcmp("rl",
		    sc->mii_dev.dv_parent->dv_cfdata->cf_driver->cd_name)
		    == 0) {
@


1.23
log
@consider re(4) as a possible 8139 chipset.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.22 2006/02/12 00:12:11 maja Exp $	*/
d40 1
@


1.22
log
@Add support for IC+ IP101 (from brad). -moj ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.21 2006/02/11 21:53:10 brad Exp $	*/
d93 2
a94 1
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "rl") != 0)
@


1.21
log
@use mii_phy_match().
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.20 2005/07/31 05:27:30 pvalchev Exp $	*/
d75 2
@


1.20
log
@back out change that was not discussed for now
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.18 2005/05/27 08:04:15 brad Exp $	*/
d72 7
d84 1
a84 3
	/* Test for RealTek 8201L PHY */
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_REALTEK &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_REALTEK_RTL8201L) {
a85 1
	}
d107 1
d109 3
a111 2
	if (MII_MODEL(ma->mii_id2) == MII_MODEL_REALTEK_RTL8201L) {
		printf(": %s, rev. %d\n", MII_STR_REALTEK_RTL8201L,
d114 1
a114 1
		printf(": RTL internal phy\n");
@


1.19
log
@allow re(4) to attach too.
@
text
@d87 1
a87 2
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "rl") != 0 &&
	    strcmp(parent->dv_cfdata->cf_driver->cd_name, "re") != 0)
@


1.18
log
@some cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.17 2005/01/28 18:27:55 brad Exp $	*/
d87 2
a88 1
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "rl") != 0)
@


1.17
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.16 2005/01/10 22:52:56 deraadt Exp $	*/
d80 1
a80 1
		return(10);
@


1.16
log
@make it compile, sigh
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.14 2004/10/07 21:30:57 brad Exp $	*/
d114 1
a114 1
	sc->mii_flags = mii->mii_flags;
@


1.15
log
@remove unnecessary rlphy_reset(), mii_phy_tick() and
some clean up. fixes issue with axe@@usb.

Tested by a number of developers and users.
@
text
@d158 1
a158 1
			(void) mii_phy_auto(sc);
@


1.14
log
@*phy -> *sc

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.13 2004/09/30 14:58:02 jason Exp $	*/
a66 1
void	rlphy_reset(struct mii_softc *);
d69 1
a69 1
	rlphy_service, rlphy_status, rlphy_reset,
d116 2
d151 22
a172 1
		mii_phy_setmedia(sc);
d176 4
a179 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d181 11
a207 15
rlphy_reset(struct mii_softc *sc)
{
	int bmcr;

	/*
	 * XXX The RTL8139 doesn't set the BMCR properly
	 * XXX after reset, which breaks autoneg.
	 */

	bmcr = PHY_READ(sc, MII_BMCR);
	mii_phy_reset(sc);
	PHY_WRITE(sc, MII_BMCR, bmcr);
}

void
d243 2
a244 7
		anlpar = PHY_READ(sc, MII_ANAR) & PHY_READ(sc, MII_ANLPAR);

		/*
		 * if anlpar is non-zero, NWay succeeded with an NWay
		 * link partner.  Otherwise, punt.
		 */
		if (anlpar != 0) {
d260 27
@


1.13
log
@rtl8139 doesn't setup ANLPAR if the other side is not NWay compatible,
to try to deduce what the link partner is the hardway.  Based on FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.12 2004/09/27 18:25:48 brad Exp $	*/
d187 1
a187 1
rlphy_status(struct mii_softc *phy)
d189 1
a189 1
	struct mii_data *mii = phy->mii_pdata;
d196 1
a196 1
	bmsr = PHY_READ(phy, MII_BMSR) | PHY_READ(phy, MII_BMSR);
d200 1
a200 1
	bmcr = PHY_READ(phy, MII_BMCR);
d222 1
a222 1
		anlpar = PHY_READ(phy, MII_ANAR) & PHY_READ(phy, MII_ANLPAR);
d245 1
a245 1
		    phy->mii_dev.dv_parent->dv_cfdata->cf_driver->cd_name)
d247 1
a247 1
			if (PHY_READ(phy, RL_MEDIASTAT) & RL_MEDIASTAT_SPEED10)
d252 1
a252 1
			if (PHY_READ(phy, 0x0019) & 0x01)
@


1.12
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.11 2004/09/26 00:59:58 brad Exp $	*/
d44 2
d50 2
d66 1
d70 1
a70 1
	rlphy_service, ukphy_status, rlphy_reset,
d184 76
@


1.11
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.10 2004/09/23 15:32:59 fgsch Exp $	*/
d69 1
a69 4
rlphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d94 1
a94 3
rlphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d121 1
a121 4
rlphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d167 1
a167 2
rlphy_reset(sc)
	struct mii_softc *sc;
@


1.10
log
@RTL8201L PHY support; from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.9 2004/09/20 06:05:27 brad Exp $	*/
d64 4
d113 1
a113 2
	sc->mii_service = rlphy_service;
	sc->mii_status = ukphy_status;
d117 1
a117 1
	rlphy_reset(sc);
@


1.9
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.8 2003/06/02 19:08:58 jason Exp $	*/
d72 6
d101 5
a105 1
	printf(": RTL internal phy\n");
@


1.8
log
@nuke clase 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.7 2002/03/14 01:26:58 millert Exp $	*/
a38 1
#include <sys/malloc.h>
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.6 2000/08/26 20:04:18 nate Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.5 1999/12/07 22:01:32 jason Exp $	*/
d55 2
a56 2
int	rlphymatch __P((struct device *, void *, void *));
void	rlphyattach __P((struct device *, struct device *, void *));
d67 2
a68 2
int	rlphy_service __P((struct mii_softc *, struct mii_data *, int));
void	rlphy_reset __P((struct mii_softc *));
@


1.6.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.6 2000/08/26 20:04:18 nate Exp $	*/
d55 2
a56 2
int	rlphymatch(struct device *, void *, void *);
void	rlphyattach(struct device *, struct device *, void *);
d67 2
a68 2
int	rlphy_service(struct mii_softc *, struct mii_data *, int);
void	rlphy_reset(struct mii_softc *);
@


1.5
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.4 1999/07/23 12:39:11 deraadt Exp $	*/
d59 2
a60 1
	sizeof(struct mii_softc), rlphymatch, rlphyattach
d106 1
d108 1
d115 1
a115 1
		mii_add_media(sc);
d126 3
d146 1
a146 12
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;
		default:
			mii_phy_setmedia(sc);
		}
d150 1
a150 4
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
a151 11

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * The RTL8139 autonegotiation doesn't need to be
		 * kicked; it continues in the background.
		 */
d160 1
a160 1
	ukphy_status(sc);
d163 1
a163 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.5.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.6 2000/08/26 20:04:18 nate Exp $	*/
d59 1
a59 2
	sizeof(struct mii_softc), rlphymatch, rlphyattach, mii_phy_detach,
	    mii_phy_activate
a104 1
	sc->mii_status = ukphy_status;
a105 1
	sc->mii_flags = mii->mii_flags;
d112 1
a112 1
		mii_phy_add_media(sc);
a122 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d140 12
a151 1
		mii_phy_setmedia(sc);
d155 4
a158 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d160 11
d179 1
a179 1
	mii_phy_status(sc);
d182 4
a185 1
	mii_phy_update(sc, cmd);
@


1.5.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 2
a56 2
int	rlphymatch(struct device *, void *, void *);
void	rlphyattach(struct device *, struct device *, void *);
d67 2
a68 2
int	rlphy_service(struct mii_softc *, struct mii_data *, int);
void	rlphy_reset(struct mii_softc *);
@


1.5.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.5.2.2 2002/03/28 15:34:52 niklas Exp $	*/
d15 5
@


1.4
log
@do not print media information to dmesg; ifconfig shows it
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.3 1999/07/16 14:59:07 jason Exp $	*/
a106 7
	ifmedia_add(&mii->mii_media,
	    IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
	    BMCR_ISO, NULL);
	ifmedia_add(&mii->mii_media,
	    IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->mii_inst),
	    BMCR_LOOP | BMCR_S100, NULL);

d112 1
a112 2
		mii_add_media(mii, sc->mii_capabilities,
		    sc->mii_inst);
a148 5
		case IFM_100_T4:
			/*
			 * XXX Not supported as a manual setting right now.
			 */
			return (EINVAL);
d150 1
a150 6
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
d172 4
@


1.3
log
@Sync with NetBSD:
o Implement asynchronous autonegotiation when driven by the MII tick
  (one-second clock).  Prevents .5s delays every 5 seconds when the interface
  is up but there is no link.
o Correct the sense of the PCR_FLINK100 bit in nsphy.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.2 1998/11/20 02:42:14 jason Exp $	*/
d118 1
a118 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a120 1
	printf("\n");
@


1.2
log
@MII fixups, should be able to reliably switch modes manually now
@
text
@d1 1
a1 1
/*	$OpenBSD: rlphy.c,v 1.1 1998/11/18 20:11:31 jason Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Jason L. Wright (jason@@thought.net)
d46 1
d159 1
a159 1
			(void) mii_phy_auto(sc);
@


1.1
log
@dev/mii'fy RTL driver and add new phy driver for the 8139 internal phy
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d210 1
a210 1
	mii_phy_reset(sc);
d216 4
a219 1
	PHY_WRITE(sc, MII_BMCR, BMCR_S100 | BMCR_AUTOEN | BMCR_FDX);
@

