head	1.21;
access;
symbols
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.12
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.10
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.8
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.14
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.12
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.10
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.8
	OPENBSD_5_0:1.20.0.6
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.4
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.19.0.6
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.8
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.18.0.6
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.4
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.2
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.17.0.6
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.9.0.10
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.8
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.7.0.6
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.18;

1.18
date	2006.12.27.19.11.09;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.26.04.40.09;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2005.02.19.06.00.04;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.09.04.10.52;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2004.10.02.06.46.41;	author mcbride;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.01.04.08.45;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.04.11.30.06;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.05.02.03.12;	author jason;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	2000.08.26.20.04.18;	author nate;	state Exp;
branches;
next	1.5;

1.5
date	99.12.07.22.01.32;	author jason;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.07.23.12.39.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.07.16.14.59.07;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	98.11.11.19.34.50;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.09.10.17.17.34;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.14.22.25.27;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.03.28.00.38.20;	author niklas;	state Exp;
branches;
next	;

1.7.6.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.21
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@/*	$OpenBSD: tlphy.c,v 1.20 2010/07/23 07:47:13 jsg Exp $	*/
/*	$NetBSD: tlphy.c,v 1.26 2000/07/04 03:29:00 thorpej Exp $	*/

/*-
 * Copyright (c) 1998, 1999, 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for Texas Instruments's ThunderLAN PHYs
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/tlphyreg.h>
#include <dev/mii/tlphyvar.h>

/* ThunderLAN PHY can only be on a ThunderLAN */
#include <dev/pci/if_tlreg.h>

struct tlphy_softc {
	struct mii_softc sc_mii;		/* generic PHY */
	int sc_tlphycap;
	int sc_need_acomp;
};

struct cfdriver tlphy_cd = {
	NULL, "tlphy", DV_DULL
};

int	tlphymatch(struct device *, void *, void *);
void	tlphyattach(struct device *, struct device *, void *);

struct cfattach tlphy_ca = {
	sizeof(struct tlphy_softc), tlphymatch, tlphyattach, mii_phy_detach
};

int	tlphy_service(struct mii_softc *, struct mii_data *, int);
int	tlphy_mii_phy_auto(struct tlphy_softc *, int);
void	tlphy_acomp(struct tlphy_softc *);
void	tlphy_status(struct mii_softc *);

const struct mii_phy_funcs tlphy_funcs = {
	tlphy_service, tlphy_status, mii_phy_reset,
};

static const struct mii_phydesc tlphys[] = {
	{ MII_OUI_xxTI,			MII_MODEL_xxTI_TLAN10T,
	  MII_STR_xxTI_TLAN10T },

	{ 0,			0,
	  NULL },
};

int
tlphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, tlphys) != NULL)
		return (10);

	return (0);
}

void
tlphyattach(struct device *parent, struct device *self, void *aux)
{
	struct tlphy_softc *sc = (struct tlphy_softc *)self;
	struct tl_softc *tlsc = (struct tl_softc *)self->dv_parent;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, tlphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->sc_mii.mii_inst = mii->mii_instance;
	sc->sc_mii.mii_phy = ma->mii_phyno;
	sc->sc_mii.mii_funcs = &tlphy_funcs;
	sc->sc_mii.mii_pdata = mii;
	sc->sc_mii.mii_flags = ma->mii_flags;

	sc->sc_mii.mii_flags &= ~MIIF_NOISOLATE;
	PHY_RESET(&sc->sc_mii);
	sc->sc_mii.mii_flags |= MIIF_NOISOLATE;

	/*
	 * Note that if we're on a device that also supports 100baseTX,
	 * we are not going to want to use the built-in 10baseT port,
	 * since there will be another PHY on the MII wired up to the
	 * UTP connector.  The parent indicates this to us by specifying
	 * the TLPHY_MEDIA_NO_10_T bit.
	 */
	sc->sc_tlphycap = tlsc->tl_product->tp_tlphymedia;
	if ((sc->sc_tlphycap & TLPHY_MEDIA_NO_10_T) == 0)
		sc->sc_mii.mii_capabilities =
		    PHY_READ(&sc->sc_mii, MII_BMSR) & ma->mii_capmask;
	else
		sc->sc_mii.mii_capabilities = 0;


	if (sc->sc_tlphycap & TLPHY_MEDIA_10_2)
		ifmedia_add(&mii->mii_media, IFM_MAKEWORD(IFM_ETHER,
		    IFM_10_2, 0, sc->sc_mii.mii_inst), 0, NULL);
	if (sc->sc_tlphycap & TLPHY_MEDIA_10_5)
		ifmedia_add(&mii->mii_media, IFM_MAKEWORD(IFM_ETHER,
		    IFM_10_5, 0, sc->sc_mii.mii_inst), 0, NULL);
	if (sc->sc_mii.mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(&sc->sc_mii);
}

int
tlphy_service(struct mii_softc *self, struct mii_data *mii, int cmd)
{
	struct tlphy_softc *sc = (struct tlphy_softc *)self;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->sc_mii.mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	if ((sc->sc_mii.mii_flags & MIIF_DOINGAUTO) == 0 && sc->sc_need_acomp)
		tlphy_acomp(sc);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->sc_mii.mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->sc_mii.mii_inst) {
			reg = PHY_READ(&sc->sc_mii, MII_BMCR);
			PHY_WRITE(&sc->sc_mii, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * The ThunderLAN PHY doesn't self-configure after
			 * an autonegotiation cycle, so there's no such
			 * thing as "already in auto mode".
			 */
			(void) tlphy_mii_phy_auto(sc, 1);
			break;
		case IFM_10_2:
		case IFM_10_5:
			PHY_WRITE(&sc->sc_mii, MII_BMCR, 0);
			PHY_WRITE(&sc->sc_mii, MII_TLPHY_CTRL, CTRL_AUISEL);
			delay(100000);
			break;
		default:
			PHY_WRITE(&sc->sc_mii, MII_TLPHY_CTRL, 0);
			delay(100000);
			mii_phy_setmedia(&sc->sc_mii);
		}
		break;

	case MII_TICK:
		/*
		 * XXX WHAT ABOUT CHECKING LINK ON THE BNC/AUI?!
		 */

		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->sc_mii.mii_inst)
			return (0);

		if (mii_phy_tick(&sc->sc_mii) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(&sc->sc_mii);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(&sc->sc_mii);

	/* Callback if something changed. */
	mii_phy_update(&sc->sc_mii, cmd);
	return (0);
}

void
tlphy_status(struct mii_softc *physc)
{
	struct tlphy_softc *sc = (void *) physc;
	struct mii_data *mii = sc->sc_mii.mii_pdata;
	int bmsr, bmcr, tlctrl;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmcr = PHY_READ(&sc->sc_mii, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	tlctrl = PHY_READ(&sc->sc_mii, MII_TLPHY_CTRL);
	if (tlctrl & CTRL_AUISEL) {
		mii->mii_media_status = 0;
		mii->mii_media_active = mii->mii_media.ifm_cur->ifm_media;
		return;
	}

	bmsr = PHY_READ(&sc->sc_mii, MII_BMSR) |
	    PHY_READ(&sc->sc_mii, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	/*
	 * Grr, braindead ThunderLAN PHY doesn't have any way to
	 * tell which media is actually active.  (Note it also
	 * doesn't self-configure after autonegotiation.)  We
	 * just have to report what's in the BMCR.
	 */
	if (bmcr & BMCR_FDX)
		mii->mii_media_active |= IFM_FDX;
	else
		mii->mii_media_active |= IFM_HDX;
	mii->mii_media_active |= IFM_10_T;
}

int
tlphy_mii_phy_auto(struct tlphy_softc *sc, int waitfor)
{
	int error;

	switch ((error = mii_phy_auto(&sc->sc_mii, waitfor))) {
	case EIO:
		/*
		 * Just assume we're not in full-duplex mode.
		 * XXX Check link and try AUI/BNC?
		 */
		PHY_WRITE(&sc->sc_mii, MII_BMCR, 0);
		break;

	case EJUSTRETURN:
		/* Flag that we need to program when it completes. */
		sc->sc_need_acomp = 1;
		break;

	default:
		tlphy_acomp(sc);
	}

	return (error);
}

void
tlphy_acomp(struct tlphy_softc *sc)
{
	int aner, anlpar;

	sc->sc_need_acomp = 0;

	/*
	 * Grr, braindead ThunderLAN PHY doesn't self-configure
	 * after autonegotiation.  We have to do it ourselves
	 * based on the link partner status.
	 */

	aner = PHY_READ(&sc->sc_mii, MII_ANER);
	if (aner & ANER_LPAN) {
		anlpar = PHY_READ(&sc->sc_mii, MII_ANLPAR) &
		    PHY_READ(&sc->sc_mii, MII_ANAR);
		if (anlpar & ANAR_10_FD) {
			PHY_WRITE(&sc->sc_mii, MII_BMCR, BMCR_FDX);
			return;
		}
	}
	PHY_WRITE(&sc->sc_mii, MII_BMCR, 0);
}
@


1.20
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.19 2008/06/26 05:42:16 ray Exp $	*/
d101 1
a101 2
	sizeof(struct tlphy_softc), tlphymatch, tlphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.19
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.18 2006/12/27 19:11:09 kettenis Exp $	*/
a44 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.18
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.17 2005/03/26 04:40:09 krw Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.17
log
@Cleanup. Use defines, standard names, consistant comparison operators, etc.
for auto negotiation ticks code. No functional change.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.16 2005/02/19 06:00:04 brad Exp $	*/
d321 2
@


1.16
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.15 2005/01/28 18:27:55 brad Exp $	*/
d118 1
a118 1
int	tlphy_auto(struct tlphy_softc *, int);
d238 1
a238 1
			(void) tlphy_auto(sc, 1);
d325 1
a325 1
tlphy_auto(struct tlphy_softc *sc, int waitfor)
@


1.15
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.14 2004/10/09 04:10:52 brad Exp $	*/
d126 8
d139 1
a139 2
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxTI &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxTI_TLAN10T)
d152 1
d154 2
a155 2
	printf(": %s, rev. %d\n", MII_STR_xxTI_TLAN10T,
	    MII_REV(ma->mii_id2));
@


1.14
log
@remove redundant checks for MII_TICK case which mii_phy_tick()
already deals with.
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.13 2004/10/02 06:46:41 mcbride Exp $	*/
d153 1
a153 1
	sc->sc_mii.mii_flags = mii->mii_flags;
@


1.13
log
@Add missing sc_mii, broken by PHY entry point changes.
(apparantly only affects cats GENERIC)
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.12 2004/10/01 04:08:45 jsg Exp $	*/
d247 1
a247 1
		 * If we're not currently selected, just return.
a248 2
		if (IFM_INST(ife->ifm_media) != sc->sc_mii.mii_inst)
			return (0);
d251 1
a251 1
		 * Only used for autonegotiation.
d253 1
a253 1
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
a254 10

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * XXX WHAT ABOUT CHECKING LINK ON THE BNC/AUI?!
		 */
@


1.12
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d151 1
a151 1
	sc->mii_funcs = &tlphy_funcs;
@


1.11
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
@


1.10
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d126 1
a126 3
tlphymatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d138 1
a138 3
tlphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d184 1
a184 4
tlphy_service(self, mii, cmd)
	struct mii_softc *self;
	struct mii_data *mii;
	int cmd;
d285 1
a285 2
tlphy_status(physc)
	struct mii_softc *physc;
d328 1
a328 3
tlphy_auto(sc, waitfor)
	struct tlphy_softc *sc;
	int waitfor;
d354 1
a354 2
tlphy_acomp(sc)
	struct tlphy_softc *sc;
@


1.9
log
@some space and tab cleanup.
@
text
@d121 4
d154 1
a154 2
	sc->sc_mii.mii_service = tlphy_service;
	sc->sc_mii.mii_status = tlphy_status;
d159 1
a159 1
	mii_phy_reset(&sc->sc_mii);
@


1.8
log
@First round of __P removal in sys
@
text
@d126 1
a126 1
	struct mii_attach_args *ma = aux;       
d219 1
a219 1
		
d302 1
a302 1
		mii->mii_media_status = 0;  
d315 1
a315 1
	if (bmsr & BMSR_LINK)   
@


1.7
log
@merge with freebsd/netbsd; mainly a conversion to mii
@
text
@d108 2
a109 2
int	tlphymatch __P((struct device *, void *, void *));
void	tlphyattach __P((struct device *, struct device *, void *));
d116 4
a119 4
int	tlphy_service __P((struct mii_softc *, struct mii_data *, int));
int	tlphy_auto __P((struct tlphy_softc *, int));
void	tlphy_acomp __P((struct tlphy_softc *));
void	tlphy_status __P((struct mii_softc *));
@


1.7.6.1
log
@Sync UBC branch to -current
@
text
@d108 2
a109 2
int	tlphymatch(struct device *, void *, void *);
void	tlphyattach(struct device *, struct device *, void *);
d116 4
a119 4
int	tlphy_service(struct mii_softc *, struct mii_data *, int);
int	tlphy_auto(struct tlphy_softc *, int);
void	tlphy_acomp(struct tlphy_softc *);
void	tlphy_status(struct mii_softc *);
d126 1
a126 1
	struct mii_attach_args *ma = aux;
d219 1
a219 1

d302 1
a302 1
		mii->mii_media_status = 0;
d315 1
a315 1
	if (bmsr & BMSR_LINK)
@


1.6
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 2
/*	$OpenBSD: tlphy.c,v 1.5 1999/12/07 22:01:32 jason Exp $	*/
/*	$NetBSD: tlphy.c,v 1.24 2000/02/02 17:50:46 thorpej Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
d80 2
d85 3
d96 1
a96 1
#include <dev/pci/if_tlvar.h>
a103 3
int	tlphymatch __P((struct device *, void *, void *));
void	tlphyattach __P((struct device *, struct device *, void *));

d108 3
d119 1
a119 1
void	tlphy_status __P((struct tlphy_softc *));
d124 1
a124 2
	void *match;
	void *aux;
d155 1
d157 1
a172 13
	if (sc->sc_tlphycap) {
		if (sc->sc_tlphycap & TLPHY_MEDIA_10_2)
			ifmedia_add(&mii->mii_media,
				    IFM_MAKEWORD(IFM_ETHER, IFM_10_2, 0,
						 sc->sc_mii.mii_inst),
				    0, NULL);
		else if (sc->sc_tlphycap & TLPHY_MEDIA_10_5)
			ifmedia_add(&mii->mii_media,
				    IFM_MAKEWORD(IFM_ETHER, IFM_10_5, 0,
						 sc->sc_mii.mii_inst),
				    0, NULL);
		}
	}
d174 7
a180 1
	if (sc->sc_mii.mii_capabilities & BMSR_MEDIAMASK) {
a181 1
	}
d256 12
d289 2
a290 2
tlphy_status(sc)
	struct tlphy_softc *sc;
d292 1
a293 1
	struct tl_softc *tlsc = (struct tl_softc *)sc->sc_mii.mii_dev.dv_parent;
d308 2
a309 9
		if (sc->sc_tlphycap & TLPHY_MEDIA_10_2)
			mii->mii_media_active |= IFM_10_2;
		else if (sc->sc_tlphycap & TLPHY_MEDIA_10_5)
			mii->mii_media_active |= IFM_10_5;
		else
			printf("%s: AUI selected with no matching media !\n",
			    sc->sc_mii.mii_dev.dv_xname);
		if (tlsc->tl_flags & TL_IFACT)
			mii->mii_media_status |= IFM_ACTIVE;
@


1.5
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 2
a2 2
/*	$OpenBSD: tlphy.c,v 1.4 1999/07/23 12:39:11 deraadt Exp $	*/
/*	$NetBSD: tlphy.c,v 1.16.6.1 1999/04/23 15:40:13 perry Exp $	*/
d108 2
a109 1
	sizeof(struct tlphy_softc), tlphymatch, tlphyattach
d148 1
d150 1
d168 14
d183 1
a183 2
		mii_add_media(mii, sc->sc_mii.mii_capabilities,
		    sc->sc_mii.mii_inst);
d197 3
a258 16
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 *
a260 10
		reg = PHY_READ(&sc->sc_mii, MII_BMSR) |
		    PHY_READ(&sc->sc_mii, MII_BMSR);
		if (reg & BMSR_LINK)
			return (0);

		/*
		 * Only retry autonegotiation every 5 seconds.
		 */
		if (++sc->sc_mii.mii_ticks != 5)
			return (0);
d262 1
a262 3
		sc->sc_mii.mii_ticks = 0;
		mii_phy_reset(&sc->sc_mii);
		if (tlphy_auto(sc, 0) == EJUSTRETURN)
d267 1
a267 1
		mii_phy_down(sc);
d272 1
a272 1
	tlphy_status(sc);
d275 1
a275 5
	if (sc->sc_mii.mii_active != mii->mii_media_active ||
	    cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->sc_mii.mii_dev.dv_parent);
		sc->sc_mii.mii_active = mii->mii_media_active;
	}
d381 1
@


1.5.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 1
/*	$NetBSD: tlphy.c,v 1.26 2000/07/04 03:29:00 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998, 1999, 2000 The NetBSD Foundation, Inc.
a80 2
#include <machine/bus.h>

a83 3
#include <netinet/in.h>
#include <netinet/if_ether.h>

d92 1
a92 1
#include <dev/pci/if_tlreg.h>
d100 3
a106 3
int	tlphymatch __P((struct device *, void *, void *));
void	tlphyattach __P((struct device *, struct device *, void *));

d108 1
a108 2
	sizeof(struct tlphy_softc), tlphymatch, tlphyattach, mii_phy_detach,
	    mii_phy_activate
d114 1
a114 1
void	tlphy_status __P((struct mii_softc *));
d119 2
a120 1
	void *match, *aux;
a146 1
	sc->sc_mii.mii_status = tlphy_status;
a147 1
	sc->sc_mii.mii_flags = mii->mii_flags;
a148 1
	sc->sc_mii.mii_flags &= ~MIIF_NOISOLATE;
a149 1
	sc->sc_mii.mii_flags |= MIIF_NOISOLATE;
d165 4
a168 9

	if (sc->sc_tlphycap & TLPHY_MEDIA_10_2)
		ifmedia_add(&mii->mii_media, IFM_MAKEWORD(IFM_ETHER,
		    IFM_10_2, 0, sc->sc_mii.mii_inst), 0, NULL);
	if (sc->sc_tlphycap & TLPHY_MEDIA_10_5)
		ifmedia_add(&mii->mii_media, IFM_MAKEWORD(IFM_ETHER,
		    IFM_10_5, 0, sc->sc_mii.mii_inst), 0, NULL);
	if (sc->sc_mii.mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(&sc->sc_mii);
a180 3
	if ((sc->sc_mii.mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d252 4
d258 4
d263 9
a271 1
		if (mii_phy_tick(&sc->sc_mii) == EJUSTRETURN)
d276 1
a276 1
		mii_phy_down(&sc->sc_mii);
d281 1
a281 1
	mii_phy_status(&sc->sc_mii);
d284 5
a288 1
	mii_phy_update(&sc->sc_mii, cmd);
d293 2
a294 2
tlphy_status(physc)
	struct mii_softc *physc;
a295 1
	struct tlphy_softc *sc = (void *) physc;
d297 1
d312 9
a320 2
		mii->mii_media_status = 0;
		mii->mii_media_active = mii->mii_media.ifm_cur->ifm_media;
a393 1
	PHY_WRITE(&sc->sc_mii, MII_BMCR, 0);
@


1.5.2.2
log
@Merge in -current from roughly a week ago
@
text
@d108 2
a109 2
int	tlphymatch(struct device *, void *, void *);
void	tlphyattach(struct device *, struct device *, void *);
d116 4
a119 4
int	tlphy_service(struct mii_softc *, struct mii_data *, int);
int	tlphy_auto(struct tlphy_softc *, int);
void	tlphy_acomp(struct tlphy_softc *);
void	tlphy_status(struct mii_softc *);
@


1.5.2.3
log
@Sync the SMP branch with 3.3
@
text
@d126 1
a126 1
	struct mii_attach_args *ma = aux;
d219 1
a219 1

d302 1
a302 1
		mii->mii_media_status = 0;
d315 1
a315 1
	if (bmsr & BMSR_LINK)
@


1.4
log
@do not print media information to dmesg; ifconfig shows it
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.3 1999/07/16 14:59:07 jason Exp $	*/
a80 4
#ifdef __NetBSD__
#include <machine/bus.h>
#endif

a83 4
#ifdef __NetBSD__
#include <net/if_ether.h>
#endif

a87 4
#ifdef __NetBSD__
#include <dev/i2c/i2c_bus.h>
#endif

a99 3
#ifdef __NetBSD__
int	tlphymatch __P((struct device *, struct cfdata *, void *));
#else
a100 1
#endif
a102 1
#ifdef __OpenBSD__
a105 1
#endif
a118 3
#ifdef __NetBSD__
	struct cfdata *match;
#else
a119 1
#endif
d124 2
a125 2
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_TI &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_TI_TLAN10T)
d141 1
a141 1
	printf(": %s, rev. %d\n", MII_STR_TI_TLAN10T,
a164 18
#define	ADD(m, c)	ifmedia_add(&mii->mii_media, (m), (c), NULL)

	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->sc_mii.mii_inst),
	    BMCR_ISO);

	if ((sc->sc_tlphycap & TLPHY_MEDIA_NO_10_T) == 0)
		ADD(IFM_MAKEWORD(IFM_ETHER, IFM_10_T, IFM_LOOP,
		    sc->sc_mii.mii_inst), BMCR_LOOP);

	if (sc->sc_tlphycap) {
		if (sc->sc_tlphycap & TLPHY_MEDIA_10_2) {
			ADD(IFM_MAKEWORD(IFM_ETHER, IFM_10_2, 0,
			    sc->sc_mii.mii_inst), 0);
		} else if (sc->sc_tlphycap & TLPHY_MEDIA_10_5) {
			ADD(IFM_MAKEWORD(IFM_ETHER, IFM_10_5, 0,
			    sc->sc_mii.mii_inst), 0);
		}
	}
a168 1
#undef ADD
d228 1
a228 3
			PHY_WRITE(&sc->sc_mii, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(&sc->sc_mii, MII_BMCR, ife->ifm_data);
d274 4
@


1.3
log
@Sync with NetBSD:
o Implement asynchronous autonegotiation when driven by the MII tick
  (one-second clock).  Prevents .5s delays every 5 seconds when the interface
  is up but there is no link.
o Correct the sense of the PCR_FLINK100 bit in nsphy.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: tlphy.c,v 1.2 1998/11/11 19:34:50 jason Exp $	*/
a161 1
	const char *sep = "";
a195 3
#define	PRINT(s)	printf("%s%s", sep, s); sep = ", "

	printf("%s: ", sc->sc_mii.mii_dev.dv_xname);
a199 1
			PRINT("10base2/BNC");
a202 1
			PRINT("10base5/AUI");
a205 1
		printf(sep);
d208 1
a208 4
	} else if ((sc->sc_tlphycap & (TLPHY_MEDIA_10_2 | TLPHY_MEDIA_10_5))
	    == 0)
		printf("no media present");
	printf("\n");
a209 1
#undef PRINT
@


1.2
log
@Merge with NetBSD:
o additional phy drivers (seeq, ics, level1)
o "unknown phy" driver for unsupported phys
o collected common code into mii_physubr
o exphy isn't the only phy that doesn't have valid id registers
@
text
@d1 2
a2 2
/*	$OpenBSD: tlphy.c,v 1.1 1998/09/10 17:17:34 jason Exp $	*/
/*	$NetBSD: tlphy.c,v 1.16 1998/11/05 00:19:32 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d79 1
d109 1
d130 2
a131 1
void	tlphy_auto __P((struct tlphy_softc *));
d233 3
d269 1
a269 1
			tlphy_auto(sc);
d325 2
a326 1
		tlphy_auto(sc);
d393 28
d422 1
a422 1
tlphy_auto(sc)
d427 1
a427 2
	if (mii_phy_auto(&sc->sc_mii) == 0)
		goto dflt;
a443 7

 dflt:
	/*
	 * Just assume we're not in full-duplex mode.
	 * XXX Check link and try AUI/BNC?
	 */
	PHY_WRITE(&sc->sc_mii, MII_BMCR, 0);
@


1.1
log
@OpenBSD gets sys/dev/mii layer from NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: tlphy.c,v 1.10 1998/08/17 16:41:45 bouyer Exp $	*/
a106 2
	int sc_capabilities;
	int sc_ticks;
a107 1
	int sc_active;
a126 8
#define	TLPHY_READ(sc, reg) \
    (*(sc)->sc_mii.mii_pdata->mii_readreg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg))

#define	TLPHY_WRITE(sc, reg, val) \
    (*(sc)->sc_mii.mii_pdata->mii_writereg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg), (val))

a127 1
void	tlphy_reset __P((struct tlphy_softc *));
d145 1
a145 1
		return (1);
d169 1
a169 1
	tlphy_reset(sc);
d180 2
a181 2
		sc->sc_capabilities =
		    TLPHY_READ(sc, MII_BMSR) & ma->mii_capmask;
d183 1
a183 1
		sc->sc_capabilities = 0;
d208 1
a208 1
	if (sc->sc_capabilities & BMSR_MEDIAMASK) {
d210 2
a211 1
		mii_add_media(mii, sc->sc_capabilities, sc->sc_mii.mii_inst);
d227 1
d235 1
a235 2
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst)
d244 3
a246 4
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst) {
			reg = TLPHY_READ(sc, MII_BMCR);
			TLPHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
d256 1
a256 1
		switch (IFM_SUBTYPE(mii->mii_media.ifm_media)) {
d267 2
a268 2
			TLPHY_WRITE(sc, MII_BMCR, 0);
			TLPHY_WRITE(sc, MII_TLPHY_CTRL, CTRL_AUISEL);
d272 1
a272 1
			TLPHY_WRITE(sc, MII_TLPHY_CTRL, 0);
d274 3
a276 4
			TLPHY_WRITE(sc, MII_ANAR,
			    mii_anar(mii->mii_media.ifm_media));
			TLPHY_WRITE(sc, MII_BMCR,
			    mii->mii_media.ifm_cur->ifm_data);
d284 1
a284 2
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst)
d290 1
a290 1
		if (IFM_SUBTYPE(mii->mii_media.ifm_media) != IFM_AUTO)
d306 2
a307 1
		reg = TLPHY_READ(sc, MII_BMSR) | TLPHY_READ(sc, MII_BMSR);
d314 1
a314 1
		if (++sc->sc_ticks != 5)
d317 2
a318 2
		sc->sc_ticks = 0;
		tlphy_reset(sc);
d327 2
a328 1
	if (sc->sc_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
d330 1
a330 1
		sc->sc_active = mii->mii_media_active;
d346 1
a346 1
	bmcr = TLPHY_READ(sc, MII_BMCR);
d353 1
a353 1
	tlctrl = TLPHY_READ(sc, MII_TLPHY_CTRL);
d367 2
a368 1
	bmsr = TLPHY_READ(sc, MII_BMSR) | TLPHY_READ(sc, MII_BMSR);
d390 1
a390 1
	int aner, anlpar, bmsr, i;
d392 1
a392 15
	TLPHY_WRITE(sc, MII_ANAR,
	    BMSR_MEDIA_TO_ANAR(sc->sc_capabilities) | ANAR_CSMA);
	TLPHY_WRITE(sc, MII_BMCR, BMCR_AUTOEN | BMCR_STARTNEG);

	/* Wait 500ms for it to complete. */
	for (i = 0; i < 500; i++) {
		if ((bmsr = TLPHY_READ(sc, MII_BMSR)) & BMSR_ACOMP)
			return;
		delay(1000);
	}
	if ((bmsr & BMSR_ACOMP) == 0) {
#if 0
		printf("%s: autonegotiation failed to complete\n",
		    sc->sc_mii.mii_dev.dv_xname);
#endif
a393 1
	}
d401 1
a401 1
	aner = TLPHY_READ(sc, MII_ANER);
d403 2
a404 2
		anlpar = TLPHY_READ(sc, MII_ANLPAR) &
		    TLPHY_READ(sc, MII_ANAR);
d406 1
a406 1
			TLPHY_WRITE(sc, MII_BMCR, BMCR_FDX);
d416 1
a416 22
	TLPHY_WRITE(sc, MII_BMCR, 0);
}

void
tlphy_reset(sc)
	struct tlphy_softc *sc;
{
	int reg, i;

	TLPHY_WRITE(sc, MII_BMCR, BMCR_RESET|BMCR_ISO);

	/* Wait 100ms for it to complete. */
	for (i = 0; i < 100; i++) {
		reg = TLPHY_READ(sc, MII_BMCR);
		if ((reg & BMCR_RESET) == 0)
			break;
		delay(1000);
	}

	/* Make sure the PHY is isolated. */
	if (sc->sc_mii.mii_inst != 0)
		TLPHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
@

