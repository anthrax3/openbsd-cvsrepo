head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.8
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.10
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.6
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.16.0.8
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2015.07.19.06.28.12;	author yuo;	state Exp;
branches;
next	1.18;
commitid	vzHDNxGG1slGlZhk;

1.18
date	2015.07.19.06.14.37;	author yuo;	state Exp;
branches;
next	1.17;
commitid	Z4JDaSzqzoGY3jvh;

1.17
date	2015.07.19.04.59.39;	author yuo;	state Exp;
branches;
next	1.16;
commitid	b768xCdtJvbMZXmi;

1.16
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.14.17.02.15;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.07.15.30.16;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2010.02.03.16.22.58;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.08.17.12.40;	author naddy;	state Exp;
branches;
next	1.11;

1.11
date	2009.07.30.10.26.23;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.10.21.18.41;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.10.21.15.14;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.07.19.39.25;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.31.15.04.33;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.30.23.04.39;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.30.20.59.44;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.29.21.40.47;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.23.13.16.32;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.11.19.50.48;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.12.19.05.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.19
log
@use standardized register definition in mii.h rather than each
specific driver definition.

no logical change.

ok deraadt@@
@
text
@/*	$OpenBSD: ipgphy.c,v 1.16 2013/12/28 03:30:41 deraadt Exp $	*/

/*-
 * Copyright (c) 2006, Pyun YongHyeon <yongari@@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Driver for the IC Plus IP1000A/IP1001 10/100/1000 PHY.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/ipgphyreg.h>

#include <dev/pci/if_stgereg.h>

int ipgphy_probe(struct device *, void *, void *);
void ipgphy_attach(struct device *, struct device *, void *);

struct cfattach ipgphy_ca = {
	sizeof(struct mii_softc), ipgphy_probe, ipgphy_attach, mii_phy_detach
};

struct cfdriver ipgphy_cd = {
	NULL, "ipgphy", DV_DULL
};

int	ipgphy_service(struct mii_softc *, struct mii_data *, int);
void	ipgphy_status(struct mii_softc *);
int	ipgphy_mii_phy_auto(struct mii_softc *);
void	ipgphy_load_dspcode(struct mii_softc *);
void	ipgphy_reset(struct mii_softc *);

const struct mii_phy_funcs ipgphy_funcs = {
	ipgphy_service, ipgphy_status, ipgphy_reset,
};

static const struct mii_phydesc ipgphys[] = {
	{ MII_OUI_ICPLUS,		MII_MODEL_ICPLUS_IP1000A,
	  MII_STR_ICPLUS_IP1000A },
	{ MII_OUI_ICPLUS,		MII_MODEL_ICPLUS_IP1001,
	  MII_STR_ICPLUS_IP1001 },

	{ 0,
	  0 },
};

int
ipgphy_probe(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, ipgphys) != NULL)
		return (10);

	return (0);
}

void
ipgphy_attach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, ipgphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &ipgphy_funcs;
	sc->mii_model = MII_MODEL(ma->mii_id2);
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	sc->mii_flags |= MIIF_NOISOLATE;

	PHY_RESET(sc);

	sc->mii_capabilities = PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_EXTSTAT)
		sc->mii_extcapabilities = PHY_READ(sc, MII_EXTSR);
 
	mii_phy_add_media(sc);

}

int
ipgphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	uint32_t gig, reg, speed;

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		PHY_RESET(sc);

		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			(void)ipgphy_mii_phy_auto(sc);
			goto done;
			break;

		case IFM_1000_T:
			/*
			 * XXX
			 * Manual 1000baseT setting doesn't seem to work.
			 */
			speed = BMCR_S1000;
			break;

		case IFM_100_TX:
			speed = BMCR_S100;
			break;

		case IFM_10_T:
			speed = BMCR_S10;
			break;

		default:
			return (EINVAL);
		}

		if (((ife->ifm_media & IFM_GMASK) & IFM_FDX) != 0) {
			speed |= BMCR_FDX;
			gig = GTCR_ADV_1000TFDX;
		} else
			gig = GTCR_ADV_1000THDX;

		PHY_WRITE(sc, MII_100T2CR, 0);
		PHY_WRITE(sc, MII_BMCR, speed);

		if (IFM_SUBTYPE(ife->ifm_media) != IFM_1000_T)
			break;

		PHY_WRITE(sc, MII_100T2CR, gig);
		PHY_WRITE(sc, MII_BMCR, speed);

		if (mii->mii_media.ifm_media & IFM_ETH_MASTER)
			gig |= GTCR_MAN_MS | GTCR_ADV_MS;

		PHY_WRITE(sc, MII_100T2CR, gig);

done:
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO) {
			sc->mii_ticks = 0;
			break;
		}

		/*
		 * check for link.
		 */
		reg = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK) {
			sc->mii_ticks = 0;
			break;
		}

		/* Announce link loss right after it happens */
		if (sc->mii_ticks++ == 0)
			break;

		/*
		 * Only retry autonegotiation every mii_anegticks seconds.
		 */
		if (sc->mii_ticks <= sc->mii_anegticks)
			break;

		sc->mii_ticks = 0;
		ipgphy_mii_phy_auto(sc);
		break;
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
ipgphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	uint32_t bmsr, bmcr, stat;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK) 
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		if (sc->mii_model == MII_MODEL_ICPLUS_IP1001) {
			stat = PHY_READ(sc, IPGPHY_LSR);
			switch (stat & IPGPHY_LSR_SPEED_MASK) {
			case IPGPHY_LSR_SPEED_10:
				mii->mii_media_active |= IFM_10_T;
				break;
			case IPGPHY_LSR_SPEED_100:
				mii->mii_media_active |= IFM_100_TX;
				break;
			case IPGPHY_LSR_SPEED_1000:
				mii->mii_media_active |= IFM_1000_T;
				break;
			default:
				mii->mii_media_active |= IFM_NONE;
				return;
			}

			if (stat & IPGPHY_LSR_FULL_DUPLEX)
				mii->mii_media_active |= IFM_FDX;
			else
				mii->mii_media_active |= IFM_HDX;
		} else {
			stat = PHY_READ(sc, STGE_PhyCtrl);
			switch (PC_LinkSpeed(stat)) {
			case PC_LinkSpeed_Down:
				mii->mii_media_active |= IFM_NONE;
				return;
			case PC_LinkSpeed_10:
				mii->mii_media_active |= IFM_10_T;
				break;
			case PC_LinkSpeed_100:
				mii->mii_media_active |= IFM_100_TX;
				break;
			case PC_LinkSpeed_1000:
				mii->mii_media_active |= IFM_1000_T;
				break;
			default:
				mii->mii_media_active |= IFM_NONE;
				return;
			}

			if (stat & PC_PhyDuplexStatus)
				mii->mii_media_active |= IFM_FDX;
			else
				mii->mii_media_active |= IFM_HDX;
		}

		if (mii->mii_media_active & IFM_FDX)
			mii->mii_media_active |= mii_phy_flowstatus(sc);

		if (IFM_SUBTYPE(mii->mii_media_active) == IFM_1000_T) {
			if (PHY_READ(sc, MII_100T2SR) & GTSR_MS_RES)
				mii->mii_media_active |= IFM_ETH_MASTER;
		}
	} else
		mii->mii_media_active = ife->ifm_media;
}

int
ipgphy_mii_phy_auto(struct mii_softc *sc)
{
	uint32_t reg = 0;

	if (sc->mii_model == MII_MODEL_ICPLUS_IP1001) {
		reg = PHY_READ(sc, MII_ANAR);
		reg &= ~(ANAR_PAUSE_SYM | ANAR_PAUSE_ASYM);
		reg |= ANAR_NP;
	}

	reg |= ANAR_10 | ANAR_10_FD | ANAR_TX | ANAR_TX_FD;

	if (sc->mii_flags & MIIF_DOPAUSE)
		reg |= ANAR_PAUSE_SYM | ANAR_PAUSE_ASYM;

	PHY_WRITE(sc, MII_ANAR, reg | ANAR_CSMA);

	reg = GTCR_ADV_1000TFDX | GTCR_ADV_1000THDX;
	if (sc->mii_model != MII_MODEL_ICPLUS_IP1001)
		reg |= GTCR_ADV_MS;
	PHY_WRITE(sc, MII_100T2CR, reg);

	PHY_WRITE(sc, MII_BMCR, (BMCR_FDX | BMCR_AUTOEN | BMCR_STARTNEG));

	return (EJUSTRETURN);
}

void
ipgphy_load_dspcode(struct mii_softc *sc)
{
	PHY_WRITE(sc, 31, 0x0001);
	PHY_WRITE(sc, 27, 0x01e0);
	PHY_WRITE(sc, 31, 0x0002);
	PHY_WRITE(sc, 27, 0xeb8e);
	PHY_WRITE(sc, 31, 0x0000);
	PHY_WRITE(sc, 30, 0x005e);
	PHY_WRITE(sc, 9, 0x0700);

	DELAY(50);
}

void
ipgphy_reset(struct mii_softc *sc)
{
	struct ifnet *ifp = sc->mii_pdata->mii_ifp;
	struct stge_softc *stge_sc;
	uint32_t reg;

	mii_phy_reset(sc);

	/* clear autoneg/full-duplex as we don't want it after reset */
	reg = PHY_READ(sc, MII_BMCR);
	reg &= ~(BMCR_AUTOEN | BMCR_FDX);
	PHY_WRITE(sc, MII_BMCR, reg);

	if (sc->mii_model == MII_MODEL_ICPLUS_IP1000A &&
	    strcmp(ifp->if_xname, "stge") == 0) {
		stge_sc = ifp->if_softc;
		if (stge_sc->sc_rev >= 0x40 && stge_sc->sc_rev <= 0x4e)
			ipgphy_load_dspcode(sc);
	}
}
@


1.18
log
@revert privious commit
@
text
@d151 2
a152 3
			reg = PHY_READ(sc, IPGPHY_MII_BMCR);
			PHY_WRITE(sc, IPGPHY_MII_BMCR,
			    reg | IPGPHY_BMCR_ISO);
d175 1
a175 1
			speed = IPGPHY_BMCR_1000;
d179 1
a179 1
			speed = IPGPHY_BMCR_100;
d183 1
a183 1
			speed = IPGPHY_BMCR_10;
d191 2
a192 2
			speed |= IPGPHY_BMCR_FDX;
			gig = IPGPHY_1000CR_1000T_FDX;
d194 1
a194 1
			gig = IPGPHY_1000CR_1000T;
d196 2
a197 2
		PHY_WRITE(sc, IPGPHY_MII_1000CR, 0);
		PHY_WRITE(sc, IPGPHY_MII_BMCR, speed);
d202 2
a203 2
		PHY_WRITE(sc, IPGPHY_MII_1000CR, gig);
		PHY_WRITE(sc, IPGPHY_MII_BMCR, speed);
d206 1
a206 1
			gig |= IPGPHY_1000CR_MMASTER | IPGPHY_1000CR_MANUAL;
d208 1
a208 1
		PHY_WRITE(sc, IPGPHY_MII_1000CR, gig);
d276 2
a277 3
	bmsr = PHY_READ(sc, IPGPHY_MII_BMSR) |
	    PHY_READ(sc, IPGPHY_MII_BMSR);
	if (bmsr & IPGPHY_BMSR_LINK) 
d280 2
a281 2
	bmcr = PHY_READ(sc, IPGPHY_MII_BMCR);
	if (bmcr & IPGPHY_BMCR_LOOP)
d284 2
a285 2
	if (bmcr & IPGPHY_BMCR_AUTOEN) {
		if ((bmsr & IPGPHY_BMSR_ANEGCOMP) == 0) {
d342 1
a342 2
			if (PHY_READ(sc, IPGPHY_MII_1000SR) &
			    IPGPHY_1000SR_MASTER)
d355 3
a357 3
		reg = PHY_READ(sc, IPGPHY_MII_ANAR);
		reg &= ~(IPGPHY_ANAR_PAUSE | IPGPHY_ANAR_APAUSE);
		reg |= IPGPHY_ANAR_NP;
d360 1
a360 2
	reg |= IPGPHY_ANAR_10T | IPGPHY_ANAR_10T_FDX |
	      IPGPHY_ANAR_100TX | IPGPHY_ANAR_100TX_FDX;
d363 1
a363 1
		reg |= IPGPHY_ANAR_PAUSE | IPGPHY_ANAR_APAUSE;
d365 1
a365 1
	PHY_WRITE(sc, IPGPHY_MII_ANAR, reg | IPGPHY_ANAR_CSMA);
d367 1
a367 1
	reg = IPGPHY_1000CR_1000T | IPGPHY_1000CR_1000T_FDX;
d369 2
a370 2
		reg |= IPGPHY_1000CR_MASTER;
	PHY_WRITE(sc, IPGPHY_MII_1000CR, reg);
d372 1
a372 2
	PHY_WRITE(sc, IPGPHY_MII_BMCR, (IPGPHY_BMCR_FDX |
	    IPGPHY_BMCR_AUTOEN | IPGPHY_BMCR_STARTNEG));
d401 2
a402 2
	reg = PHY_READ(sc, IPGPHY_MII_BMCR);
	reg &= ~(IPGPHY_BMCR_AUTOEN | IPGPHY_BMCR_FDX);
@


1.17
log
@according to MII specification, these seems to be bug.

ok deraadt@@
@
text
@d345 1
a345 1
			    IPGPHY_1000SR_MMASTER)
@


1.16
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.15 2013/03/14 17:02:15 brad Exp $	*/
d207 1
a207 1
			gig |= IPGPHY_1000CR_MASTER | IPGPHY_1000CR_MANUAL;
d345 1
a345 1
			    IPGPHY_1000SR_MASTER)
@


1.15
log
@- Fix passing down MAC feature flags; which fixes flow control support.
- Bring in a workaround for the IP1001 PHY which causes the downshift support
  to not function properly. From FreeBSD

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.14 2011/04/07 15:30:16 miod Exp $	*/
d62 1
a62 2
	sizeof(struct mii_softc), ipgphy_probe, ipgphy_attach, mii_phy_detach,
	    mii_phy_activate
d120 2
a127 1
	PHY_RESET(sc);
@


1.14
log
@Do not use NULL in integer comparisons. No functional change.
ok matthew@@ tedu@@, also eyeballed by at least krw@@ oga@@ kettenis@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.13 2010/02/03 16:22:58 sthen Exp $	*/
d117 1
d359 1
d372 2
a373 1
	reg |= IPGPHY_1000CR_MASTER;
@


1.13
log
@Enable the next page bit for IP1001, otherwise the PHY fails
to re-establish 1000baseT link after downgrading to 10/100.
Fixes problems for Andreas Bartelt with ipgphy at VT6130.

From FreeBSD via Brad, ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.12 2009/08/08 17:12:40 naddy Exp $	*/
d87 1
a87 1
	  NULL },
@


1.12
log
@Add support for the IC Plus IP1001 GigE PHY.  From FreeBSD, via Brad.
Tested by jasper@@ with a IP1000A PHY to make sure it doesn't break
existing model.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.11 2009/07/30 10:26:23 sthen Exp $	*/
d356 1
a356 1
	if (sc->mii_model == MII_MODEL_ICPLUS_IP1001)
d358 2
@


1.11
log
@Simplify the ipgphy(4) attach routine a bit by making use of
mii_phy_add_media() to set the media types and adjust the
anegticks as appropriate.

From FreeBSD via Brad.

Tested by jasper@@. No objections after being posted on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.10 2008/06/10 21:18:41 brad Exp $	*/
d32 1
a32 1
 * Driver for the IC Plus IP1000A 10/100/1000 PHY.
d83 2
d115 1
d251 1
a251 1
			return (0);
d270 1
d278 1
a278 1
	if ((bmsr & IPGPHY_BMSR_LINK) != 0)
d282 1
a282 1
	if ((bmcr & IPGPHY_BMCR_LOOP) != 0)
d285 1
a285 1
	if ((bmcr & IPGPHY_BMCR_AUTOEN) != 0) {
a290 1
	}
d292 49
a340 15
	stat = PHY_READ(sc, STGE_PhyCtrl);
	switch (PC_LinkSpeed(stat)) {
	case PC_LinkSpeed_Down:
		mii->mii_media_active |= IFM_NONE;
		return;
	case PC_LinkSpeed_10:
		mii->mii_media_active |= IFM_10_T;
		break;
	case PC_LinkSpeed_100:
		mii->mii_media_active |= IFM_100_TX;
		break;
	case PC_LinkSpeed_1000:
		mii->mii_media_active |= IFM_1000_T;
		break;
	}
d342 7
a348 9
	if ((stat & PC_PhyDuplexStatus) != 0)
		mii->mii_media_active |= mii_phy_flowstatus(sc) | IFM_FDX;
	else
		mii->mii_media_active |= IFM_HDX;

	stat = PHY_READ(sc, IPGPHY_MII_1000SR);
	if ((IFM_SUBTYPE(mii->mii_media_active) == IFM_1000_T) &&
	    stat & IPGPHY_1000SR_MASTER)
		mii->mii_media_active |= IFM_ETH_MASTER;
d354 4
a357 1
	uint32_t reg;
d359 1
a359 1
	reg = IPGPHY_ANAR_10T | IPGPHY_ANAR_10T_FDX |
d365 2
a366 1
	PHY_WRITE(sc, IPGPHY_MII_ANAR, reg);
d370 1
d394 1
a395 1
	struct ifnet *ifp;
d405 2
a406 3
	ifp = sc->mii_pdata->mii_ifp;

	if (strcmp(ifp->if_xname, "stge") == 0) {
@


1.10
log
@formatting knits.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.9 2008/06/10 21:15:14 brad Exp $	*/
a113 1
	sc->mii_anegticks = MII_ANEGTICKS_GIGE;
d117 5
a121 20
#define ADD(m, c)	ifmedia_add(&mii->mii_media, (m), (c), NULL)

	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
	    BMCR_ISO);

	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_10_T, 0, sc->mii_inst),
	    IPGPHY_BMCR_10);
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_10_T, IFM_FDX, sc->mii_inst),
	    IPGPHY_BMCR_10 | IPGPHY_BMCR_FDX);
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, 0, sc->mii_inst),
	    IPGPHY_BMCR_100);
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_FDX, sc->mii_inst),
	    IPGPHY_BMCR_100 | IPGPHY_BMCR_FDX);
	/* 1000baseT half-duplex, really supported? */
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_1000_T, 0, sc->mii_inst),
	    IPGPHY_BMCR_1000);
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_1000_T, IFM_FDX, sc->mii_inst),
	    IPGPHY_BMCR_1000 | IPGPHY_BMCR_FDX);
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_AUTO, 0, sc->mii_inst), 0);
#undef ADD
@


1.9
log
@Some header cleanup. Remove some unused headers and shuffle some around
for consistency between drivers.

"looks good" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.8 2008/06/07 19:39:25 brad Exp $	*/
d232 1
@


1.8
log
@Currently unused at the moment but at least allow it to compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.7 2006/12/31 15:04:33 krw Exp $	*/
a46 1
#ifdef INET
a48 1
#endif
@


1.7
log
@Bring last few phys into line by calling their XXX_status() functions
through mii_phy_status() rather than directly. No functional change.

from brad@@ ok mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.6 2006/12/30 23:04:39 kettenis Exp $	*/
d334 1
a334 1
ipgphy_mii_phy_auto(struct mii_softc *mii)
d344 1
a344 1
	PHY_WRITE(mii, IPGPHY_MII_ANAR, reg);
d347 2
a348 2
	PHY_WRITE(mii, IPGPHY_MII_1000CR, reg);
	PHY_WRITE(mii, IPGPHY_MII_BMCR, (IPGPHY_BMCR_FDX |
@


1.6
log
@Set MASTER based on IFM_ETH_MASTER instead of LINK0.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.5 2006/12/30 20:59:44 kettenis Exp $	*/
d273 1
a273 1
	ipgphy_status(sc);
@


1.5
log
@Only advertise flow control if MIIF_DOPAUSE is set.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.4 2006/12/29 21:40:47 kettenis Exp $	*/
d220 4
a223 17
		/*
		 * When setting the link manually, one side must
		 * be the master and the other the slave. However
		 * ifmedia doesn't give us a good way to specify
		 * this, so we fake it by using one of the LINK
		 * flags. If LINK0 is set, we program the PHY to
		 * be a master, otherwise it's a slave.
		 */
		if ((mii->mii_ifp->if_flags & IFF_LINK0))
			PHY_WRITE(sc, IPGPHY_MII_1000CR, gig |
			    IPGPHY_1000CR_MASTER |
			    IPGPHY_1000CR_MMASTER |
			    IPGPHY_1000CR_MANUAL);
		else
			PHY_WRITE(sc, IPGPHY_MII_1000CR, gig |
			    IPGPHY_1000CR_MASTER |
			    IPGPHY_1000CR_MANUAL);
@


1.4
log
@Use mii_phy_flowstatus() to replace the code that sets flag0/flag1 to
report flow control status.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.3 2006/12/23 13:16:32 kettenis Exp $	*/
d351 7
a357 4
	PHY_WRITE(mii, IPGPHY_MII_ANAR,
	    IPGPHY_ANAR_10T | IPGPHY_ANAR_10T_FDX |
	    IPGPHY_ANAR_100TX | IPGPHY_ANAR_100TX_FDX |
	    IPGPHY_ANAR_PAUSE | IPGPHY_ANAR_APAUSE);
@


1.3
log
@Set IFM_ETH_MASTER if local PHY configuration resolved to MASTER.

Based on a diff by brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.2 2006/08/11 19:50:48 brad Exp $	*/
a297 1
	uint32_t ar, lpar;
d334 1
d336 1
a336 1
		mii->mii_media_active |= IFM_FDX;
a343 18

	ar = PHY_READ(sc, IPGPHY_MII_ANAR);
	lpar = PHY_READ(sc, IPGPHY_MII_ANLPAR);

	/*
	 * FLAG0 : Rx flow-control
	 * FLAG1 : Tx flow-control
	 */
	if ((ar & IPGPHY_ANAR_PAUSE) && (lpar & IPGPHY_ANLPAR_PAUSE))
		mii->mii_media_active |= IFM_FLAG0 | IFM_FLAG1;
	else if (!(ar & IPGPHY_ANAR_PAUSE) && (ar & IPGPHY_ANAR_APAUSE) &&
	    (lpar & IPGPHY_ANLPAR_PAUSE) && (lpar & IPGPHY_ANLPAR_APAUSE))
		mii->mii_media_active |= IFM_FLAG1;
	else if ((ar & IPGPHY_ANAR_PAUSE) && (ar & IPGPHY_ANAR_APAUSE) &&
	    !(lpar & IPGPHY_ANLPAR_PAUSE) &&
	    (lpar & IPGPHY_ANLPAR_APAUSE)) {
		mii->mii_media_active |= IFM_FLAG0;
	}
@


1.2
log
@typo, settning -> setting
@
text
@d1 1
a1 1
/*	$OpenBSD: ipgphy.c,v 1.1 2006/07/12 19:05:50 brad Exp $	*/
d340 5
a360 9
	}

	/*
	 * FLAG2 : local PHY resolved to MASTER
	 */
	if ((mii->mii_media_active & IFM_1000_T) != 0) {
		stat = PHY_READ(sc, IPGPHY_MII_1000SR);
		if ((stat & IPGPHY_1000SR_MASTER) != 0)
			mii->mii_media_active |= IFM_FLAG2;
@


1.1
log
@add an initial PHY driver for the IC Plus IP1000A integrated PHY.

From Pyun YongHyeon <yongari at FreeBSD dot org>
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d221 1
a221 1
		 * When settning the link manually, one side must
@

