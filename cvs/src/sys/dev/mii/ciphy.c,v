head	1.27;
access;
symbols
	OPENBSD_6_0:1.27.0.6
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.25.0.4
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.4
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.22.0.12
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.6
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.2
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.18.0.6
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.4
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.2
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.27
date	2015.07.19.06.28.12;	author yuo;	state Exp;
branches;
next	1.26;
commitid	vzHDNxGG1slGlZhk;

1.26
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.25;
commitid	p4LJxGKbi0BU2cG6;

1.25
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.24;
commitid	t9FBKDfc4VDxpEy2;

1.24
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2012.10.22.09.14.36;	author brad;	state Exp;
branches;
next	1.22;

1.22
date	2009.07.30.09.24.26;	author sthen;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.17.07.19.19;	author brad;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.10.21.15.14;	author brad;	state Exp;
branches;
next	1.19;

1.19
date	2008.05.29.06.20.02;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2006.12.31.15.04.33;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2006.12.30.23.04.39;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2006.12.27.19.11.08;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2006.12.23.13.16.32;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.07.23.44.51;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.10.09.53.16;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.10.08.12.20;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.28.12.37.15;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.28.08.13.47;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.07.03.45.11;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.02.03.46.07;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.27.08.04.15;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.28.03.11.06;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.26.04.40.09;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.19.06.00.03;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.05.22.20.42;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.01.00.24.38;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.27
log
@use standardized register definition in mii.h rather than each
specific driver definition.

no logical change.

ok deraadt@@
@
text
@/*	$OpenBSD: ciphy.c,v 1.26 2015/03/14 03:38:47 jsg Exp $	*/
/*	$FreeBSD: ciphy.c,v 1.1 2004/09/10 20:57:45 wpaul Exp $	*/
/*
 * Copyright (c) 2004
 *	Bill Paul <wpaul@@windriver.com>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for the Cicada CS8201 10/100/1000 copper PHY.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/ciphyreg.h>

int	ciphymatch(struct device *, void *, void *);
void	ciphyattach(struct device *, struct device *, void *);

struct cfattach ciphy_ca = {
	sizeof(struct mii_softc), ciphymatch, ciphyattach, mii_phy_detach
};

struct cfdriver ciphy_cd = {
	NULL, "ciphy", DV_DULL
};

int	ciphy_service(struct mii_softc *, struct mii_data *, int);
void	ciphy_status(struct mii_softc *);
void	ciphy_reset(struct mii_softc *);
void	ciphy_fixup(struct mii_softc *);

const struct mii_phy_funcs ciphy_funcs = {
	ciphy_service, ciphy_status, ciphy_reset,
};

static const struct mii_phydesc ciphys[] = {
	{ MII_OUI_CICADA,		MII_MODEL_CICADA_CS8201,
	  MII_STR_CICADA_CS8201 },
	{ MII_OUI_CICADA,		MII_MODEL_CICADA_CS8201A,
	  MII_STR_CICADA_CS8201A },
	{ MII_OUI_CICADA,		MII_MODEL_CICADA_CS8201B,
	  MII_STR_CICADA_CS8201B },
	{ MII_OUI_CICADA,		MII_MODEL_CICADA_CS8204,
	  MII_STR_CICADA_CS8204 },
	{ MII_OUI_CICADA,		MII_MODEL_CICADA_VSC8211,
	  MII_STR_CICADA_VSC8211 },
	{ MII_OUI_CICADA,		MII_MODEL_CICADA_CS8244,
	  MII_STR_CICADA_CS8244 },
	{ MII_OUI_xxCICADA,		MII_MODEL_xxCICADA_CS8201B,
	  MII_STR_xxCICADA_CS8201B },
	{ MII_OUI_VITESSE,		MII_MODEL_VITESSE_VSC8601,
	  MII_STR_VITESSE_VSC8601 },

	{ 0,			0,
	  NULL },
};

int
ciphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, ciphys) != NULL)
		return (10);

	return (0);
}

void
ciphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, ciphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &ciphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;
	sc->mii_anegticks = MII_ANEGTICKS;

	sc->mii_flags |= MIIF_NOISOLATE;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_EXTSTAT)
		sc->mii_extcapabilities = PHY_READ(sc, MII_EXTSR);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) ||
	    (sc->mii_capabilities & EXTSR_MEDIAMASK))
		mii_phy_add_media(sc);
}

int
ciphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg, speed, gig;

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		ciphy_fixup(sc);	/* XXX hardware bug work-around */

		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			if (mii_phy_auto(sc, 0) == EJUSTRETURN)
				return (0);
			break;
		case IFM_1000_T:
			speed = BMCR_S1000;
			goto setit;
		case IFM_100_TX:
			speed = BMCR_S100;
			goto setit;
		case IFM_10_T:
			speed = BMCR_S10;
setit:
			if ((ife->ifm_media & IFM_GMASK) == IFM_FDX) {
				speed |= BMCR_FDX;
				gig = GTCR_ADV_1000TFDX;
			} else {
				gig = GTCR_ADV_1000THDX;
			}

			PHY_WRITE(sc, MII_100T2CR, 0);
			PHY_WRITE(sc, MII_BMCR, speed);
			PHY_WRITE(sc, MII_ANAR, ANAR_CSMA);

			if (IFM_SUBTYPE(ife->ifm_media) != IFM_1000_T) 
				break;

			PHY_WRITE(sc, MII_100T2CR, gig);
			PHY_WRITE(sc, MII_BMCR,
			    speed|BMCR_AUTOEN|BMCR_STARTNEG);

			if (mii->mii_media.ifm_media & IFM_ETH_MASTER)
				gig |= GTCR_MAN_MS | GTCR_ADV_MS;
			PHY_WRITE(sc, MII_100T2CR, gig);
			break;
		case IFM_NONE:
			PHY_WRITE(sc, MII_BMCR, BMCR_ISO|BMCR_PDOWN);
			break;
		default:
			return (EINVAL);
		}
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/*
	 * Callback if something changed. Note that we need to poke
	 * apply fixups for certain PHY revs.
	 */
	if (sc->mii_media_active != mii->mii_media_active || 
	    sc->mii_media_status != mii->mii_media_status ||
	    cmd == MII_MEDIACHG) {
		ciphy_fixup(sc);
	}
	mii_phy_update(sc, cmd);
	return (0);
}

void
ciphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	int bmsr, bmcr, gsr;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);

	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}
	}

	bmsr = PHY_READ(sc, CIPHY_MII_AUXCSR);
	switch (bmsr & CIPHY_AUXCSR_SPEED) {
	case CIPHY_SPEED10:
		mii->mii_media_active |= IFM_10_T;
		break;
	case CIPHY_SPEED100:
		mii->mii_media_active |= IFM_100_TX;
		break;
	case CIPHY_SPEED1000:
		mii->mii_media_active |= IFM_1000_T;
		break;
	default:
		printf("%s: unknown PHY speed %x\n",
		    sc->mii_dev.dv_xname, bmsr & CIPHY_AUXCSR_SPEED);
		break;
	}

	if (bmsr & CIPHY_AUXCSR_FDX)
		mii->mii_media_active |= IFM_FDX | mii_phy_flowstatus(sc);
	else
		mii->mii_media_active |= IFM_HDX;

	gsr = PHY_READ(sc, MII_100T2SR);
	if ((IFM_SUBTYPE(mii->mii_media_active) == IFM_1000_T) &&
	    gsr & GTSR_MS_RES)
		mii->mii_media_active |= IFM_ETH_MASTER;
}

void
ciphy_reset(struct mii_softc *sc)
{
	mii_phy_reset(sc);
	DELAY(1000);
}

#define PHY_SETBIT(x, y, z) \
	PHY_WRITE(x, y, (PHY_READ(x, y) | (z)))
#define PHY_CLRBIT(x, y, z) \
	PHY_WRITE(x, y, (PHY_READ(x, y) & ~(z)))

void
ciphy_fixup(struct mii_softc *sc)
{
	uint16_t		model;
	uint16_t		status, speed;

	model = MII_MODEL(PHY_READ(sc, MII_PHYIDR2));
	status = PHY_READ(sc, CIPHY_MII_AUXCSR);
	speed = status & CIPHY_AUXCSR_SPEED;

	if (strcmp(sc->mii_dev.dv_parent->dv_cfdata->cf_driver->cd_name, "nfe") == 0) {
		/* need to set for 2.5V RGMII for NVIDIA adapters */
		PHY_SETBIT(sc, CIPHY_MII_ECTL1, CIPHY_INTSEL_RGMII);
		PHY_SETBIT(sc, CIPHY_MII_ECTL1, CIPHY_IOVOL_2500MV);
	}

	switch (model) {
	case MII_MODEL_CICADA_CS8201:
	case MII_MODEL_CICADA_CS8204:

		/* Turn off "aux mode" (whatever that means) */
		PHY_SETBIT(sc, CIPHY_MII_AUXCSR, CIPHY_AUXCSR_MDPPS);

		/*
		 * Work around speed polling bug in VT3119/VT3216
		 * when using MII in full duplex mode.
		 */
		if ((speed == CIPHY_SPEED10 || speed == CIPHY_SPEED100) &&
		    (status & CIPHY_AUXCSR_FDX)) {
			PHY_SETBIT(sc, CIPHY_MII_10BTCSR, CIPHY_10BTCSR_ECHO);
		} else {
			PHY_CLRBIT(sc, CIPHY_MII_10BTCSR, CIPHY_10BTCSR_ECHO);
		}

		/* Enable link/activity LED blink. */
		PHY_SETBIT(sc, CIPHY_MII_LED, CIPHY_LED_LINKACTBLINK);

		break;

	case MII_MODEL_CICADA_CS8201A:
	case MII_MODEL_CICADA_CS8201B:

		/*
		 * Work around speed polling bug in VT3119/VT3216
		 * when using MII in full duplex mode.
		 */
		if ((speed == CIPHY_SPEED10 || speed == CIPHY_SPEED100) &&
		    (status & CIPHY_AUXCSR_FDX)) {
			PHY_SETBIT(sc, CIPHY_MII_10BTCSR, CIPHY_10BTCSR_ECHO);
		} else {
			PHY_CLRBIT(sc, CIPHY_MII_10BTCSR, CIPHY_10BTCSR_ECHO);
		}

		break;
	case MII_MODEL_CICADA_VSC8211:
	case MII_MODEL_CICADA_CS8244:
	case MII_MODEL_VITESSE_VSC8601:
		break;
	default:
		printf("%s: unknown CICADA PHY model %x\n",
		    sc->mii_dev.dv_xname, model);
		break;
	}
}
@


1.26
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.25 2014/12/05 15:50:04 mpi Exp $	*/
d180 1
a180 1
			speed = CIPHY_S1000;
d183 1
a183 1
			speed = CIPHY_S100;
d186 1
a186 1
			speed = CIPHY_S10;
d189 2
a190 2
				speed |= CIPHY_BMCR_FDX;
				gig = CIPHY_1000CTL_AFD;
d192 1
a192 1
				gig = CIPHY_1000CTL_AHD;
d195 3
a197 3
			PHY_WRITE(sc, CIPHY_MII_1000CTL, 0);
			PHY_WRITE(sc, CIPHY_MII_BMCR, speed);
			PHY_WRITE(sc, CIPHY_MII_ANAR, CIPHY_SEL_TYPE);
d202 3
a204 3
			PHY_WRITE(sc, CIPHY_MII_1000CTL, gig);
			PHY_WRITE(sc, CIPHY_MII_BMCR,
			    speed|CIPHY_BMCR_AUTOEN|CIPHY_BMCR_STARTNEG);
d207 2
a208 2
				gig |= CIPHY_1000CTL_MSE|CIPHY_1000CTL_MSC;
			PHY_WRITE(sc, CIPHY_MII_1000CTL, gig);
d260 1
a260 1
	bmcr = PHY_READ(sc, CIPHY_MII_BMCR);
d262 1
a262 1
	if (bmcr & CIPHY_BMCR_LOOP)
d265 2
a266 2
	if (bmcr & CIPHY_BMCR_AUTOEN) {
		if ((bmsr & CIPHY_BMSR_ACOMP) == 0) {
d295 1
a295 1
	gsr = PHY_READ(sc, CIPHY_MII_1000STS);
d297 1
a297 1
	    gsr & CIPHY_1000STS_MSR)
d319 1
a319 1
	model = MII_MODEL(PHY_READ(sc, CIPHY_MII_PHYIDR2));
@


1.25
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.24 2013/12/28 03:30:41 deraadt Exp $	*/
a44 2

#include <machine/bus.h>
@


1.24
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.23 2012/10/22 09:14:36 brad Exp $	*/
d49 1
@


1.23
log
@Provide flow control status.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.22 2009/07/30 09:24:26 sthen Exp $	*/
d61 1
a61 5
	sizeof(struct mii_softc),
	ciphymatch,
	ciphyattach,
	mii_phy_detach,
	mii_phy_activate
@


1.22
log
@Attach to VSC8211, CS8244, VSC8601 PHYs. From Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.21 2008/09/17 07:19:19 brad Exp $	*/
d296 1
a296 1
		mii->mii_media_active |= IFM_FDX;
@


1.21
log
@Remove the unsupported media types explicitly listed in the switch cases
for MII_MEDIACHG. The default case will catch these media types.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.20 2008/06/10 21:15:14 brad Exp $	*/
d90 4
d96 2
d371 4
@


1.20
log
@Some header cleanup. Remove some unused headers and shuffle some around
for consistency between drivers.

"looks good" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.19 2008/05/29 06:20:02 brad Exp $	*/
a211 1
		case IFM_100_T4:
@


1.19
log
@Recognize the Cicada CS8204 quad port PHY.

From FreeBSD

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.18 2006/12/31 15:04:33 krw Exp $	*/
d46 2
a50 7
#ifdef INET
#include <netinet/in.h>
#include <netinet/if_ether.h>
#endif

#include <dev/pci/pcivar.h>

a55 2

#include <machine/bus.h>
@


1.18
log
@Bring last few phys into line by calling their XXX_status() functions
through mii_phy_status() rather than directly. No functional change.

from brad@@ ok mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.17 2006/12/30 23:04:39 kettenis Exp $	*/
d95 2
d338 1
@


1.17
log
@Set MASTER based on IFM_ETH_MASTER instead of LINK0.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.16 2006/12/27 19:11:08 kettenis Exp $	*/
d236 1
a236 1
	ciphy_status(sc);
@


1.16
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.15 2006/12/23 13:16:32 kettenis Exp $	*/
d210 3
a212 15
			/*
			 * When setting the link manually, one side must
			 * be the master and the other the slave. However
			 * ifmedia doesn't give us a good way to specify
			 * this, so we fake it by using one of the LINK
			 * flags. If LINK0 is set, we program the PHY to
			 * be a master, otherwise it's a slave.
			 */
			if ((mii->mii_ifp->if_flags & IFF_LINK0)) {
				PHY_WRITE(sc, CIPHY_MII_1000CTL,
				    gig|CIPHY_1000CTL_MSE|CIPHY_1000CTL_MSC);
			} else {
				PHY_WRITE(sc, CIPHY_MII_1000CTL,
				    gig|CIPHY_1000CTL_MSE);
			}
@


1.15
log
@Set IFM_ETH_MASTER if local PHY configuration resolved to MASTER.

Based on a diff by brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.14 2006/10/07 23:44:51 brad Exp $	*/
d309 2
@


1.14
log
@g/c unused code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.13 2006/03/10 09:53:16 jsg Exp $	*/
d267 1
a267 1
	int bmsr, bmcr;
d309 5
@


1.13
log
@Last revision apparently does not work when cold booting so revert.

Noticed by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.11 2006/02/28 12:37:15 jsg Exp $	*/
a179 7
#ifdef foo
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, CIPHY_MII_BMCR) & CIPHY_BMCR_AUTOEN)
				return (0);
#endif
@


1.12
log
@Only do the forcing rgmii for nfe game after a reset not
after every link state change in the fixup function.

Suggested by brad@@, tested by otto@@
@
text
@a317 5
#define PHY_SETBIT(x, y, z) \
	PHY_WRITE(x, y, (PHY_READ(x, y) | (z)))
#define PHY_CLRBIT(x, y, z) \
	PHY_WRITE(x, y, (PHY_READ(x, y) & ~(z)))

d323 1
d325 4
a328 6
	if (strcmp(sc->mii_dev.dv_parent->dv_cfdata->cf_driver->cd_name, "nfe") == 0) {
		/* need to set for 2.5V RGMII for NVIDIA adapters */
		PHY_SETBIT(sc, CIPHY_MII_ECTL1, CIPHY_INTSEL_RGMII);
		PHY_SETBIT(sc, CIPHY_MII_ECTL1, CIPHY_IOVOL_2500MV);
	}
}
d339 6
@


1.11
log
@Remove a debug printf that crept into the last commit.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.10 2006/02/28 08:13:47 jsg Exp $	*/
d318 5
d328 6
a335 5
#define PHY_SETBIT(x, y, z) \
	PHY_WRITE(x, y, (PHY_READ(x, y) | (z)))
#define PHY_CLRBIT(x, y, z) \
	PHY_WRITE(x, y, (PHY_READ(x, y) & ~(z)))

a344 6

	if (strcmp(sc->mii_dev.dv_parent->dv_cfdata->cf_driver->cd_name, "nfe") == 0) {
		/* need to set for 2.5V RGMII for NVIDIA adapters */
		PHY_SETBIT(sc, CIPHY_MII_ECTL1, CIPHY_INTSEL_RGMII);
		PHY_SETBIT(sc, CIPHY_MII_ECTL1, CIPHY_IOVOL_2500MV);
	}
@


1.10
log
@We need to special case ciphy to ask for RGMII interface at 2.5V for nfe.
This makes Cicada/Vitesse PHYs attached to nfe work.
Many thanks to Bill Paul for diagnosing the problem and suggesting a solution.

Tested by otto@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.9 2005/10/07 03:45:11 brad Exp $	*/
a340 1
		printf("ciphy nfe fixup called!\n");
@


1.9
log
@fix name
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.8 2005/08/02 03:46:07 pvalchev Exp $	*/
d339 7
@


1.8
log
@an alternative Cicada OUI (for CS8201B PHY) spotted in a VIA VT6122
from NetBSD PR 29705 (Tomokazu HARADA), pointed out by jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.7 2005/05/27 08:04:15 brad Exp $	*/
d95 2
a96 2
	{ MII_OUI_xxCICADA,		MII_MODEL_CICADA_CS8201B,
	  MII_STR_CICADA_CS8201B },
@


1.7
log
@some cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.6 2005/03/28 03:11:06 krw Exp $	*/
d94 2
@


1.6
log
@Use mii_phy_tick() instead of duplicating code.

tested & ok pvalchev@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.5 2005/03/26 04:40:09 krw Exp $	*/
a123 1
	//sc->mii_service = ciphy_service;
a124 2
	sc->mii_model = MII_MODEL(ma->mii_id2);
	sc->mii_rev = MII_REV(ma->mii_id2);
@


1.5
log
@Cleanup. Use defines, standard names, consistant comparison operators, etc.
for auto negotiation ticks code. No functional change.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.4 2005/02/19 06:00:03 brad Exp $	*/
d250 1
a250 4
		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
d252 1
a252 25

		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			break;

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 */
		reg = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK)
			break;

		/*
		 * Only retry autonegotiation every mii_anegticks seconds.
		 */
		if (++sc->mii_ticks <= sc->mii_anegticks)
			break;
		
		sc->mii_ticks = 0;
		mii_phy_auto(sc, 0);
		return (0);
@


1.4
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.3 2005/02/05 22:20:42 brad Exp $	*/
d130 1
a130 2
	sc->mii_ticks = 0; /* XXX */
	sc->mii_anegticks = 5;
d272 1
a272 1
		 * Only retry autonegotiation every 5 seconds.
d274 1
a274 2
		//if (++sc->mii_ticks <= 5/*10*/)
		if (++sc->mii_ticks <= sc->mii_anegticks /*10*/)
@


1.3
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.2 2005/01/28 18:27:55 brad Exp $	*/
d89 1
a89 1
	{ MII_OUI_CICADA,	MII_MODEL_CICADA_CS8201,
d91 1
a91 1
	{ MII_OUI_CICADA,	MII_MODEL_CICADA_CS8201A,
d93 1
a93 1
	{ MII_OUI_CICADA,	MII_MODEL_CICADA_CS8201B,
@


1.2
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: ciphy.c,v 1.1 2004/12/01 00:24:38 pvalchev Exp $	*/
d88 12
d105 1
a105 12
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_CICADA &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_CICADA_CS8201) {
		return (10);
	}

	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_CICADA &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_CICADA_CS8201A) {
		return (10);
	}

	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_CICADA &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_CICADA_CS8201B) {
a106 1
	}
d117 1
a117 16
	char *mstr;

	switch (MII_MODEL(ma->mii_id2)) {
	case MII_MODEL_CICADA_CS8201:
		mstr = MII_STR_CICADA_CS8201;
		break;
	case MII_MODEL_CICADA_CS8201A:
		mstr = MII_STR_CICADA_CS8201A;
		break;
	case MII_MODEL_CICADA_CS8201B:
		mstr = MII_STR_CICADA_CS8201B;
		break;
	default:
		mstr = "unknown ciphy";
		break;
	}
d119 2
a120 1
	printf(": %s, rev. %d\n", mstr, MII_REV(ma->mii_id2));
@


1.1
log
@Driver for the Cicada CS8201 10/100/1000 copper PHY
from FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d143 1
a143 1
	sc->mii_flags = mii->mii_flags | MIIF_NOISOLATE;
d146 2
@

