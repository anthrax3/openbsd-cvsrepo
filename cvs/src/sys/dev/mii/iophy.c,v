head	1.20;
access;
symbols
	OPENBSD_6_0:1.20.0.6
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.4
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.14
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.12
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.10
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.8
	OPENBSD_5_0:1.17.0.6
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.4
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.16.0.4
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.7.0.12
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.10
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.8
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.20
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.19;
commitid	p4LJxGKbi0BU2cG6;

1.19
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.18;
commitid	t9FBKDfc4VDxpEy2;

1.18
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.08.07.38.33;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.11.15.11.58;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.27.19.11.08;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.19.06.00.04;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.05.22.20.42;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.57;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.26.20.04.17;	author nate;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	99.12.07.22.01.30;	author jason;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.11.25.19.35.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.10.13.19.32.49;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	99.10.12.17.08.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.10.12.16.59.29;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.14.22.25.23;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	;

1.6.8.1
date	2002.06.11.03.42.23;	author art;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: iophy.c,v 1.19 2014/12/05 15:50:04 mpi Exp $	*/
/*	$NetBSD: iophy.c,v 1.8 2000/02/02 23:34:56 thorpej Exp $	*/

/*
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Intel 82553 PHY driver
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/iophyreg.h>

int	iophymatch(struct device *, void *, void *);
void	iophyattach(struct device *, struct device *, void *);

struct cfattach iophy_ca = {
	sizeof(struct mii_softc), iophymatch, iophyattach, mii_phy_detach
};

struct cfdriver iophy_cd = {
	NULL, "iophy", DV_DULL
};

int	iophy_service(struct mii_softc *, struct mii_data *, int);
void	iophy_status(struct mii_softc *);

const struct mii_phy_funcs iophy_funcs = {
	iophy_service, iophy_status, mii_phy_reset,
};

static const struct mii_phydesc iophys[] = {
	{ MII_OUI_xxINTEL,		MII_MODEL_xxINTEL_I82553,
	  MII_STR_xxINTEL_I82553 },
	{ MII_OUI_INTEL,		MII_MODEL_INTEL_I82553,
	  MII_STR_INTEL_I82553 },

	{ 0,			0,
	  NULL },

};

int
iophymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, iophys) != NULL)
		return (10);

	return (0);
}

void
iophyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, iophys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &iophy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
iophy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
iophy_status(sc)
	struct mii_softc *sc;
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, ext0;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) |
	    PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		ext0 = PHY_READ(sc, MII_IOPHY_EXT0);
		if (ext0 & EXT0_SPEED) {
			if (bmsr & BMSR_100TXFDX ||
			    bmsr & BMSR_100TXHDX)
				mii->mii_media_active |= IFM_100_TX;
			else
				mii->mii_media_active |= IFM_100_T4;
		} else
			mii->mii_media_active |= IFM_10_T;

		if (ext0 & EXT0_DUPLEX)
			mii->mii_media_active |= IFM_FDX;
		else
			mii->mii_media_active |= IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.19
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.18 2013/12/28 03:30:41 deraadt Exp $	*/
a63 1
#include <sys/kernel.h>
@


1.18
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.17 2010/07/23 07:47:13 jsg Exp $	*/
d69 1
@


1.17
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.16 2008/09/08 07:38:33 brad Exp $	*/
d81 1
a81 2
	sizeof(struct mii_softc), iophymatch, iophyattach, mii_phy_detach,
	    mii_phy_activate
@


1.16
log
@IEEE 802.3 Annex 28B.3 explicitly specifies the following relative
priorities of the technologies supported by 802.3 Selector Field
value.

1000BASE-T full duplex
1000BASE-T
100BASE-T2 full duplex
100BASE-TX full duplex
100BASE-T2
100BASE-T4
100BASE-TX
10BASE-T full duplex
10BAST-T

However PHY drivers did not honor the order such that 100BASE-T4 had
higher priority than 100BASE-TX full duplex. Fix a long standing bug
such that PHY drivers choose the highest common denominator ability.

This bug is exposed by a Cisco 3550 switch which inadvertently
announces 100BASE-T4 capability even though it is not capable of
100BASE-T4 operation, it is a 100BASE-TX switch.

From FreeBSD

Tested with dc(4), fxp(4), rl(4), sis(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.15 2008/07/11 15:11:58 brad Exp $	*/
a44 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.15
log
@If there is a 100baseT4 connection then fall through so as to
explicitly set the duplex flag instead of returning right away.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.14 2008/06/26 05:42:16 ray Exp $	*/
d253 4
a256 1
			if (bmsr & BMSR_100T4)
a257 2
			else
				mii->mii_media_active |= IFM_100_TX;
@


1.14
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.13 2006/12/27 19:11:08 kettenis Exp $	*/
d253 1
a253 1
			if (bmsr & BMSR_100T4) {
d255 1
a255 2
				return;
			} else
@


1.13
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.12 2005/02/19 06:00:04 brad Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.12
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.11 2005/02/05 22:20:42 brad Exp $	*/
d257 1
a258 1

d263 1
a263 1
			} else {
d265 1
a265 2
			}
		} else {
a266 1
		}
d270 2
@


1.11
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.10 2005/01/28 18:27:55 brad Exp $	*/
d109 1
a109 1
	{ MII_OUI_xxINTEL,	MII_MODEL_xxINTEL_I82553,
d111 1
a111 1
	{ MII_OUI_INTEL,	MII_MODEL_INTEL_I82553,
@


1.10
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.9 2004/09/26 00:59:58 brad Exp $	*/
d108 11
d127 1
a127 6
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxINTEL &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxINTEL_I82553)
		return (10);

	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_INTEL &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_INTEL_I82553)
d141 1
d143 2
a144 2
	printf(": %s, rev. %d\n", MII_STR_INTEL_I82553,
	    MII_REV(ma->mii_id2));
@


1.9
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.8 2004/09/20 06:05:27 brad Exp $	*/
d143 1
a143 1
	sc->mii_flags = mii->mii_flags;
@


1.8
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.7 2002/03/14 01:26:57 millert Exp $	*/
d104 4
d141 1
a141 2
	sc->mii_service = iophy_service;
	sc->mii_status = iophy_status;
d145 1
a145 1
	mii_phy_reset(sc);
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.6 2000/08/26 20:04:17 nate Exp $	*/
a77 1
#include <sys/malloc.h>
@


1.6
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.5 1999/12/07 22:01:30 jason Exp $	*/
d90 2
a91 2
int	iophymatch __P((struct device *, void *, void *));
void	iophyattach __P((struct device *, struct device *, void *));
d102 2
a103 2
int	iophy_service __P((struct mii_softc *, struct mii_data *, int));
void	iophy_status __P((struct mii_softc *));
@


1.6.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.6 2000/08/26 20:04:17 nate Exp $	*/
d90 2
a91 2
int	iophymatch(struct device *, void *, void *);
void	iophyattach(struct device *, struct device *, void *);
d102 2
a103 2
int	iophy_service(struct mii_softc *, struct mii_data *, int);
void	iophy_status(struct mii_softc *);
@


1.5
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 2
a2 2
/*	$OpenBSD: iophy.c,v 1.4 1999/11/25 19:35:27 deraadt Exp $	*/
/*	$NetBSD: iophy.c,v 1.1 1999/09/05 00:40:27 soren Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d93 5
a101 4
struct cfattach iophy_ca = {
	sizeof(struct mii_softc), iophymatch, iophyattach
};

d139 1
d141 1
a141 7

	/*
	 * i82557 wedges if all of its PHYs are isolated!
	 */
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "fxp") == 0 &&
	    mii->mii_instance == 0)
		sc->mii_flags |= MIIF_NOISOLATE;
d148 1
a148 1
		mii_add_media(sc);
d160 3
d189 1
a189 12
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;
		default:
			mii_phy_setmedia(sc);
		}
d199 1
a199 31
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 */
		reg = PHY_READ(sc, MII_BMSR) |
		    PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK)
			return (0);

		/*
		 * Only retry autonegotiation every 5 seconds.
		 */
		if (++sc->mii_ticks != 5)
			return (0);

		sc->mii_ticks = 0;
		mii_phy_reset(sc);
		if (mii_phy_auto(sc, 0) == EJUSTRETURN)
d209 1
a209 1
	iophy_status(sc);
d212 1
a212 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.5.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: iophy.c,v 1.6 2000/08/26 20:04:17 nate Exp $	*/
/*	$NetBSD: iophy.c,v 1.8 2000/02/02 23:34:56 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
d93 2
a94 3
struct cfattach iophy_ca = {
	sizeof(struct mii_softc), iophymatch, iophyattach, mii_phy_detach,
	    mii_phy_activate
d97 2
a98 2
struct cfdriver iophy_cd = {
	NULL, "iophy", DV_DULL
a137 1
	sc->mii_status = iophy_status;
d139 7
a145 1
	sc->mii_flags = mii->mii_flags;
d152 1
a152 1
		mii_phy_add_media(sc);
a163 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d190 12
a201 1
		mii_phy_setmedia(sc);
d211 31
a241 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d251 1
a251 1
	mii_phy_status(sc);
d254 4
a257 1
	mii_phy_update(sc, cmd);
@


1.5.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 2
a91 2
int	iophymatch(struct device *, void *, void *);
void	iophyattach(struct device *, struct device *, void *);
d102 2
a103 2
int	iophy_service(struct mii_softc *, struct mii_data *, int);
void	iophy_status(struct mii_softc *);
@


1.4
log
@no warnings; jwoehr@@advtech.uswest.com
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.3 1999/10/13 19:32:49 jason Exp $	*/
d112 2
a113 2
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_INTEL_ALT &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_INTEL_ALT_I82553)
a146 13
#define	ADD(m, c)	ifmedia_add(&mii->mii_media, (m), (c), NULL)

	if ((sc->mii_flags & MIIF_NOISOLATE) == 0)
		ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
		    BMCR_ISO);

	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_AUTO, 0, sc->mii_inst),
	    BMCR_ISO);
#if 0
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->mii_inst),
	    BMCR_LOOP|BMCR_S100);
#endif

d152 1
a152 3
		mii_add_media(mii, sc->mii_capabilities,
		    sc->mii_inst);
#undef ADD
d200 1
a200 6
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
d244 4
d266 1
d309 1
a309 1
		mii->mii_media_active = mii_media_from_bmcr(bmcr);
@


1.3
log
@manually add IFM_AUTO (workaround for fxp)
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.2 1999/10/12 17:08:56 deraadt Exp $	*/
d310 1
a310 1
		if (ext0 & EXT0_SPEED)
d317 1
a317 1
		else
d319 1
@


1.2
log
@no media prints in mii code
@
text
@d1 1
a1 1
/*	$OpenBSD: iophy.c,v 1.1 1999/10/12 16:59:29 jason Exp $	*/
d153 2
@


1.1
log
@add driver for i82553; from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d162 1
a162 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a164 1
	printf("\n");
@

