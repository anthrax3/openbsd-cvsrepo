head	1.28;
access;
symbols
	OPENBSD_6_0:1.28.0.6
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.4
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.25.0.14
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.12
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.10
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.8
	OPENBSD_5_0:1.25.0.6
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.4
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.2
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.24.0.4
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.6
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.2
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.23.0.2
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.28
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.27;
commitid	p4LJxGKbi0BU2cG6;

1.27
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.26;
commitid	t9FBKDfc4VDxpEy2;

1.26
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.08.07.38.33;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.22;

1.22
date	2008.03.12.11.32.17;	author brad;	state Exp;
branches;
next	1.21;

1.21
date	2008.03.02.16.05.26;	author brad;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.27.19.11.09;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.26.04.40.09;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2005.02.19.06.00.04;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.26.03.38.34;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.22.09.39.29;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.05.18.26.48;	author nate;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2000.08.26.20.04.18;	author nate;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.18.04.20.49;	author jason;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.12.07.22.01.32;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	99.07.23.12.39.11;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.07.16.14.59.07;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	99.01.04.04.44.05;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	99.01.04.04.26.46;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	98.11.11.19.34.48;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.09.10.17.17.34;	author jason;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.14.22.25.26;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2001.10.31.03.22.44;	author nate;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2004.02.19.10.56.24;	author niklas;	state Exp;
branches;
next	;

1.10.4.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: nsphy.c,v 1.27 2014/12/05 15:50:04 mpi Exp $	*/
/*	$NetBSD: nsphy.c,v 1.25 2000/02/02 23:34:57 thorpej Exp $	*/

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * driver for National Semiconductor's DP83840A ethernet 10/100 PHY
 * Data Sheet available from www.national.com
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/nsphyreg.h>

int	nsphymatch(struct device *, void *, void *);
void	nsphyattach(struct device *, struct device *, void *);

struct cfattach nsphy_ca = {
	sizeof(struct mii_softc), nsphymatch, nsphyattach, mii_phy_detach
};

struct cfdriver nsphy_cd = {
	NULL, "nsphy", DV_DULL
};

int	nsphy_service(struct mii_softc *, struct mii_data *, int);
void	nsphy_status(struct mii_softc *);
void	nsphy_reset(struct mii_softc *);

const struct mii_phy_funcs nsphy_funcs = {
	nsphy_service, nsphy_status, nsphy_reset,
};

static const struct mii_phydesc nsphys[] = {
	{ MII_OUI_NATSEMI,		MII_MODEL_NATSEMI_DP83840,
	  MII_STR_NATSEMI_DP83840 },

	{ 0,			0,
	  NULL },
};

int
nsphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, nsphys) != NULL)
		return (10);

	return (0);
}

void
nsphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, nsphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &nsphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;
	sc->mii_anegticks = MII_ANEGTICKS;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
nsphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		reg = PHY_READ(sc, MII_NSPHY_PCR);

		/*
		 * Set up the PCR to use LED4 to indicate full-duplex
		 * in both 10baseT and 100baseTX modes.
		 */
		reg |= PCR_LED4MODE;

		/*
		 * Make sure Carrier Integrity Monitor function is
		 * disabled (normal for Node operation, but sometimes
		 * it's not set?!)
		 */
		reg |= PCR_CIMDIS;

		/*
		 * Make sure "force link good" is set to normal mode.
		 * It's only intended for debugging.
		 */
		reg |= PCR_FLINK100;

		/*
		 * Mystery bits which are supposedly `reserved',
		 * but we seem to need to set them when the PHY
		 * is connected to some interfaces!
		 */
		reg |= PCR_CONGCTRL | PCR_TXREADYSEL;

		PHY_WRITE(sc, MII_NSPHY_PCR, reg);

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
nsphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, par, anlpar;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) |
	    PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		/*
		 * The PAR status bits are only valid if autonegotiation
		 * has completed (or it's disabled).
		 */
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		/*
		 * Argh.  The PAR doesn't seem to indicate duplex mode
		 * properly!  Determine media based on link partner's
		 * advertised capabilities.
		 */
		if (PHY_READ(sc, MII_ANER) & ANER_LPAN) {
			anlpar = PHY_READ(sc, MII_ANAR) &
			    PHY_READ(sc, MII_ANLPAR);
			if (anlpar & ANLPAR_TX_FD)
				mii->mii_media_active |= IFM_100_TX|IFM_FDX;
			else if (anlpar & ANLPAR_T4)
				mii->mii_media_active |= IFM_100_T4|IFM_HDX;
			else if (anlpar & ANLPAR_TX)
				mii->mii_media_active |= IFM_100_TX|IFM_HDX;
			else if (anlpar & ANLPAR_10_FD)
				mii->mii_media_active |= IFM_10_T|IFM_FDX;
			else if (anlpar & ANLPAR_10)
				mii->mii_media_active |= IFM_10_T|IFM_HDX;
			else
				mii->mii_media_active |= IFM_NONE;
			return;
		}

		/*
		 * Link partner is not capable of autonegotiation.
		 * We will never be in full-duplex mode if this is
		 * the case, so reading the PAR is OK.
		 */
		par = PHY_READ(sc, MII_NSPHY_PAR);
		if (par & PAR_10)
			mii->mii_media_active |= IFM_10_T;
		else
			mii->mii_media_active |= IFM_100_TX;
		mii->mii_media_active |= IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}

void
nsphy_reset(struct mii_softc *sc)
{
	int anar;

	mii_phy_reset(sc);
	anar = PHY_READ(sc, MII_ANAR);
	anar |= BMSR_MEDIA_TO_ANAR(PHY_READ(sc, MII_BMSR));
	PHY_WRITE(sc, MII_ANAR, anar);
}
@


1.27
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.26 2013/12/28 03:30:41 deraadt Exp $	*/
a64 1
#include <sys/kernel.h>
@


1.26
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.25 2010/07/23 07:47:13 jsg Exp $	*/
d71 1
@


1.25
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.24 2008/09/08 07:38:33 brad Exp $	*/
d83 1
a83 2
	sizeof(struct mii_softc), nsphymatch, nsphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.24
log
@IEEE 802.3 Annex 28B.3 explicitly specifies the following relative
priorities of the technologies supported by 802.3 Selector Field
value.

1000BASE-T full duplex
1000BASE-T
100BASE-T2 full duplex
100BASE-TX full duplex
100BASE-T2
100BASE-T4
100BASE-TX
10BASE-T full duplex
10BAST-T

However PHY drivers did not honor the order such that 100BASE-T4 had
higher priority than 100BASE-TX full duplex. Fix a long standing bug
such that PHY drivers choose the highest common denominator ability.

This bug is exposed by a Cisco 3550 switch which inadvertently
announces 100BASE-T4 capability even though it is not capable of
100BASE-T4 operation, it is a 100BASE-TX switch.

From FreeBSD

Tested with dc(4), fxp(4), rl(4), sis(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.23 2008/06/26 05:42:16 ray Exp $	*/
a44 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.23
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.22 2008/03/12 11:32:17 brad Exp $	*/
d285 3
a287 1
			if (anlpar & ANLPAR_T4)
a288 2
			else if (anlpar & ANLPAR_TX_FD)
				mii->mii_media_active |= IFM_100_TX|IFM_FDX;
@


1.22
log
@Fix comment typo, of -> if.

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.21 2008/03/02 16:05:26 brad Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.21
log
@Add missing half duplex flag for 100baseT4.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.20 2006/12/27 19:11:09 kettenis Exp $	*/
d275 1
a275 1
		 * The PAR status bits are only valid of autonegotiation
@


1.20
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.19 2005/03/26 04:40:09 krw Exp $	*/
d293 1
a293 1
				mii->mii_media_active |= IFM_100_T4;
@


1.19
log
@Cleanup. Use defines, standard names, consistant comparison operators, etc.
for auto negotiation ticks code. No functional change.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.18 2005/02/19 06:00:04 brad Exp $	*/
d297 1
a297 1
				mii->mii_media_active |= IFM_100_TX;
d301 1
a301 1
				mii->mii_media_active |= IFM_10_T;
d317 1
a317 4
#if 0
		if (par & PAR_FDX)
			mii->mii_media_active |= IFM_FDX;
#endif
@


1.18
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.17 2005/01/28 18:27:55 brad Exp $	*/
d146 1
a146 1
	sc->mii_anegticks = 5;
@


1.17
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.16 2004/09/27 18:25:48 brad Exp $	*/
d111 8
d124 1
a124 2
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_NATSEMI &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_NATSEMI_DP83840)
d136 1
d138 2
a139 2
	printf(": %s, rev. %d\n", MII_STR_NATSEMI_DP83840,
	    MII_REV(ma->mii_id2));
@


1.16
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.15 2004/09/26 03:38:34 brad Exp $	*/
d137 1
a137 1
	sc->mii_flags = mii->mii_flags;
@


1.15
log
@simplify MII_TICK case by using mii_phy_tick().
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.14 2004/09/26 00:59:58 brad Exp $	*/
d112 1
a112 4
nsphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d124 1
a124 4
nsphyattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
d149 1
a149 4
nsphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d241 1
a241 2
nsphy_status(sc)
	struct mii_softc *sc;
d318 1
a318 2
nsphy_reset(sc)
	struct mii_softc *sc;
@


1.14
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.13 2004/09/20 06:05:27 brad Exp $	*/
d232 1
a232 31
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 */
		reg = PHY_READ(sc, MII_BMSR) |
		    PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK)
			return (0);

		/*
		 * Only retry autonegotiation every 5 seconds.
		 */
		if (++sc->mii_ticks != sc->mii_anegticks)
			return (0);

		sc->mii_ticks = 0;
		nsphy_reset(sc);
		if (mii_phy_auto(sc, 0) == EJUSTRETURN)
@


1.13
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.12 2003/10/22 09:39:29 jmc Exp $	*/
d107 4
d141 1
a141 2
	sc->mii_service = nsphy_service;
	sc->mii_status = nsphy_status;
d146 1
a146 1
	nsphy_reset(sc);
@


1.12
log
@typos from Tom Cosgrove;
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.11 2002/03/14 01:26:58 millert Exp $	*/
a78 1
#include <sys/malloc.h>
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.10 2001/10/05 18:26:48 nate Exp $	*/
d199 1
a199 1
		 * Make sure Carrier Intgrity Monitor function is
@


1.10
log
@use anegticks for phys that do their own autonegotiation timeout.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.9 2000/08/26 20:04:18 nate Exp $	*/
d92 2
a93 2
int	nsphymatch __P((struct device *, void *, void *));
void	nsphyattach __P((struct device *, struct device *, void *));
d104 3
a106 3
int	nsphy_service __P((struct mii_softc *, struct mii_data *, int));
void	nsphy_status __P((struct mii_softc *));
void	nsphy_reset __P((struct mii_softc *));
@


1.10.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.10 2001/10/05 18:26:48 nate Exp $	*/
d92 2
a93 2
int	nsphymatch(struct device *, void *, void *);
void	nsphyattach(struct device *, struct device *, void *);
d104 3
a106 3
int	nsphy_service(struct mii_softc *, struct mii_data *, int);
void	nsphy_status(struct mii_softc *);
void	nsphy_reset(struct mii_softc *);
@


1.9
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.8 2000/01/18 04:20:49 jason Exp $	*/
d142 1
d255 1
a255 1
		if (++sc->mii_ticks != 5)
@


1.8
log
@Fix fxp+nsphy problem: don't reset everytime when switching to auto mode.
Also, document "magic" bits.
@
text
@d1 2
a2 2
/*	$OpenBSD: nsphy.c,v 1.7 1999/12/07 22:01:32 jason Exp $	*/
/*	$NetBSD: nsphy.c,v 1.18 1999/07/14 23:57:36 thorpej Exp $	*/
d96 2
a97 1
	sizeof(struct mii_softc), nsphymatch, nsphyattach
d139 1
d141 1
a141 7

	/*
	 * i82557 wedges if all of its PHYs are isolated!
	 */
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "fxp") == 0 &&
	    mii->mii_instance == 0)
		sc->mii_flags |= MIIF_NOISOLATE;
d148 1
a148 1
		mii_add_media(sc);
d160 3
d219 1
a219 12
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;
		default:
			mii_phy_setmedia(sc);
		}
d269 1
a269 1
	nsphy_status(sc);
d272 1
a272 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.8.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: nsphy.c,v 1.9 2000/08/26 20:04:18 nate Exp $	*/
/*	$NetBSD: nsphy.c,v 1.25 2000/02/02 23:34:57 thorpej Exp $	*/
d96 1
a96 2
	sizeof(struct mii_softc), nsphymatch, nsphyattach, mii_phy_detach,
	    mii_phy_activate
a137 1
	sc->mii_status = nsphy_status;
d139 7
a145 1
	sc->mii_flags = mii->mii_flags;
d152 1
a152 1
		mii_phy_add_media(sc);
a163 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d220 12
a231 1
		mii_phy_setmedia(sc);
d281 1
a281 1
	mii_phy_status(sc);
d284 4
a287 1
	mii_phy_update(sc, cmd);
@


1.8.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.8.2.1 2001/05/14 22:25:26 niklas Exp $	*/
a141 1
	sc->mii_anegticks = 5;
d254 1
a254 1
		if (++sc->mii_ticks != sc->mii_anegticks)
@


1.8.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 2
a93 2
int	nsphymatch(struct device *, void *, void *);
void	nsphyattach(struct device *, struct device *, void *);
d104 3
a106 3
int	nsphy_service(struct mii_softc *, struct mii_data *, int);
void	nsphy_status(struct mii_softc *);
void	nsphy_reset(struct mii_softc *);
@


1.8.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d199 1
a199 1
		 * Make sure Carrier Integrity Monitor function is
@


1.7
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.6 1999/07/23 12:39:11 deraadt Exp $	*/
a210 1
#if 0
d216 1
a216 2
		reg |= 0x0100 | 0x0400;
#endif
a221 1
			nsphy_reset(sc);
@


1.6
log
@do not print media information to dmesg; ifconfig shows it
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.5 1999/07/16 14:59:07 jason Exp $	*/
a91 3
#ifdef __NetBSD__
int	nsphymatch __P((struct device *, struct cfdata *, void *));
#else
a92 1
#endif
a98 1
#ifdef __OpenBSD__
a101 1
#endif
a109 3
#ifdef __NetBSD__
	struct cfdata *match;
#else
a110 1
#endif
a146 10
#define	ADD(m, c)	ifmedia_add(&mii->mii_media, (m), (c), NULL)

#if 0
	/* Can't do this on the i82557! */
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
	    BMCR_ISO);
#endif
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->mii_inst),
	    BMCR_LOOP|BMCR_S100);

d152 1
a152 3
		mii_add_media(mii, sc->mii_capabilities,
		    sc->mii_inst);
#undef ADD
a231 23
		case IFM_100_T4:
			/*
			 * XXX Not supported as a manual setting right now.
			 */
			return (EINVAL);
		case IFM_100_TX:
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));

			reg = 0;
			reg |= BMCR_S100;
			if ((sc->mii_flags & MIIF_NOISOLATE) == 0)
				reg |= BMCR_ISO;

			if ((ife->ifm_media & IFM_GMASK) == IFM_FDX)
				reg |= BMCR_FDX;
			PHY_WRITE(sc, MII_BMCR, reg);
			delay(1000000);		/* XXX too long, will adjust */

			reg &= ~BMCR_ISO;
			PHY_WRITE(sc, MII_BMCR, reg);
			break;

d233 1
a233 6
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
d277 4
d299 1
d369 1
a369 1
		mii->mii_media_active = mii_media_from_bmcr(bmcr);
@


1.5
log
@Sync with NetBSD:
o Implement asynchronous autonegotiation when driven by the MII tick
  (one-second clock).  Prevents .5s delays every 5 seconds when the interface
  is up but there is no link.
o Correct the sense of the PCR_FLINK100 bit in nsphy.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.4 1999/01/04 04:44:05 jason Exp $	*/
d171 1
a171 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a173 1
	printf("\n");
@


1.4
log
@Don't isolate if NOISOLATE flag is set
@
text
@d1 2
a2 2
/*	$OpenBSD: nsphy.c,v 1.3 1999/01/04 04:26:46 jason Exp $	*/
/*	$NetBSD: nsphy.c,v 1.16 1998/11/05 04:08:02 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d81 1
d232 2
a233 3
		 * Make sure "force link good" is not set.  It's only
		 * intended for debugging, but sometimes it's set
		 * after a reset.
d235 1
a235 1
		reg &= ~PCR_FLINK100;
d256 1
a256 1
			(void) mii_phy_auto(sc);
d328 2
a329 1
		(void) mii_phy_auto(sc);
@


1.3
log
@o Switching from 10->100 needs a bit of extra bit fiddling
   (isolate -> switch bmcr -> unisolate)
o Switching from 10->auto needs a reset
o hme doesn't advertise everything it supports, so
  during reset, set the ANAR according to the supported media in BMSR.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.2 1998/11/11 19:34:48 jason Exp $	*/
d268 4
a271 1
			reg |= BMCR_ISO | BMCR_S100;
@


1.2
log
@Merge with NetBSD:
o additional phy drivers (seeq, ics, level1)
o "unknown phy" driver for unsupported phys
o collected common code into mii_physubr
o exphy isn't the only phy that doesn't have valid id registers
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphy.c,v 1.1 1998/09/10 17:17:34 jason Exp $	*/
d110 1
d166 1
a166 1
	mii_phy_reset(sc);
d250 1
d263 15
d324 1
a324 1
		mii_phy_reset(sc);
d415 12
@


1.1
log
@OpenBSD gets sys/dev/mii layer from NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: nsphy.c,v 1.9 1998/08/14 00:23:26 thorpej Exp $	*/
a90 7
struct nsphy_softc {
	struct mii_softc sc_mii;		/* generic PHY */
	int sc_capabilities;
	int sc_ticks;
	int sc_active;
};

d99 1
a99 1
	sizeof(struct nsphy_softc), nsphymatch, nsphyattach
a107 8
#define	NSPHY_READ(sc, reg) \
    (*(sc)->sc_mii.mii_pdata->mii_readreg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg))

#define	NSPHY_WRITE(sc, reg, val) \
    (*(sc)->sc_mii.mii_pdata->mii_writereg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg), (val))

d109 1
a109 3
void	nsphy_reset __P((struct nsphy_softc *));
void	nsphy_auto __P((struct nsphy_softc *));
void	nsphy_status __P((struct nsphy_softc *));
d125 1
a125 1
		return (1);
d136 1
a136 1
	struct nsphy_softc *sc = (struct nsphy_softc *)self;
d143 11
a153 4
	sc->sc_mii.mii_inst = mii->mii_instance;
	sc->sc_mii.mii_phy = ma->mii_phyno;
	sc->sc_mii.mii_service = nsphy_service;
	sc->sc_mii.mii_pdata = mii;
d159 1
a159 1
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->sc_mii.mii_inst),
d162 1
a162 1
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->sc_mii.mii_inst),
d165 1
a165 1
	nsphy_reset(sc);
d167 4
a170 3
	sc->sc_capabilities = NSPHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	printf("%s: ", sc->sc_mii.mii_dev.dv_xname);
	if ((sc->sc_capabilities & BMSR_MEDIAMASK) == 0)
d173 2
a174 1
		mii_add_media(mii, sc->sc_capabilities, sc->sc_mii.mii_inst);
d180 2
a181 2
nsphy_service(self, mii, cmd)
	struct mii_softc *self;
d185 1
a185 1
	struct nsphy_softc *sc = (struct nsphy_softc *)self;
d193 1
a193 2
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst)
d202 3
a204 4
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst) {
			reg = NSPHY_READ(sc, MII_BMCR);
			NSPHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
d214 1
a214 1
		reg = NSPHY_READ(sc, MII_NSPHY_PCR);
d245 1
a245 1
		NSPHY_WRITE(sc, MII_NSPHY_PCR, reg);
d247 1
a247 1
		switch (IFM_SUBTYPE(mii->mii_media.ifm_media)) {
d252 1
a252 1
			if (NSPHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
d254 1
a254 1
			nsphy_auto(sc);
d265 3
a267 4
			NSPHY_WRITE(sc, MII_ANAR,
			    mii_anar(mii->mii_media.ifm_media));
			NSPHY_WRITE(sc, MII_BMCR,
			    mii->mii_media.ifm_cur->ifm_data);
d275 1
a275 2
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst)
d281 1
a281 1
		if (IFM_SUBTYPE(mii->mii_media.ifm_media) != IFM_AUTO)
d295 2
a296 1
		reg = NSPHY_READ(sc, MII_BMSR) | NSPHY_READ(sc, MII_BMSR);
d303 1
a303 1
		if (++sc->sc_ticks != 5)
d306 3
a308 3
		sc->sc_ticks = 0;
		nsphy_reset(sc);
		nsphy_auto(sc);
d316 3
a318 3
	if (sc->sc_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->sc_mii.mii_dev.dv_parent);
		sc->sc_active = mii->mii_media_active;
d325 1
a325 1
	struct nsphy_softc *sc;
d327 1
a327 1
	struct mii_data *mii = sc->sc_mii.mii_pdata;
d333 2
a334 1
	bmsr = NSPHY_READ(sc, MII_BMSR) | NSPHY_READ(sc, MII_BMSR);
d338 1
a338 1
	bmcr = NSPHY_READ(sc, MII_BMCR);
d364 3
a366 3
		if (NSPHY_READ(sc, MII_ANER) & ANER_LPAN) {
			anlpar = NSPHY_READ(sc, MII_ANAR) &
			    NSPHY_READ(sc, MII_ANLPAR);
d387 1
a387 1
		par = NSPHY_READ(sc, MII_NSPHY_PAR);
d396 2
a397 58
	} else {
		if (bmcr & BMCR_S100)
			mii->mii_media_active |= IFM_100_TX;
		else
			mii->mii_media_active |= IFM_10_T;
		if (bmcr & BMCR_FDX)
			mii->mii_media_active |= IFM_FDX;
	}
}

void
nsphy_auto(sc)
	struct nsphy_softc *sc;
{
	int bmsr, i;

	NSPHY_WRITE(sc, MII_ANAR,
	    BMSR_MEDIA_TO_ANAR(sc->sc_capabilities) | ANAR_CSMA);
	NSPHY_WRITE(sc, MII_BMCR, BMCR_AUTOEN | BMCR_STARTNEG);

	/* Wait 500ms for it to complete. */
	for (i = 0; i < 500; i++) {
		if ((bmsr = NSPHY_READ(sc, MII_BMSR)) & BMSR_ACOMP)
			return;
		delay(1000);
	}
#if 0
	if ((bmsr & BMSR_ACOMP) == 0)
		printf("%s: autonegotiation failed to complete\n",
		    sc->sc_mii.mii_dev.dv_xname);
#endif
}

void
nsphy_reset(sc)
	struct nsphy_softc *sc;
{
	int reg, i;

	/*
	 * The i82557 wedges if we isolate all of its PHYs!
	 */
	if (sc->sc_mii.mii_inst == 0)
		NSPHY_WRITE(sc, MII_BMCR, BMCR_RESET);
	else
		NSPHY_WRITE(sc, MII_BMCR, BMCR_RESET|BMCR_ISO);

	/* Wait 100ms for it to complete. */
	for (i = 0; i < 100; i++) {
		reg = NSPHY_READ(sc, MII_BMCR);
		if ((reg & BMCR_RESET) == 0)
			break;
		delay(1000);
	}

	/* Make sure the PHY is isolated. */
	if (sc->sc_mii.mii_inst != 0)
		NSPHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
@

