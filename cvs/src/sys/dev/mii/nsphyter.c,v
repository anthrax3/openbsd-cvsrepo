head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.6
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.14
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.12
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.10
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	OPENBSD_5_0:1.16.0.6
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.18;
commitid	p4LJxGKbi0BU2cG6;

1.18
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.17;
commitid	t9FBKDfc4VDxpEy2;

1.17
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2008.03.12.11.32.17;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.27.19.11.09;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.04.03.53.30;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.19.06.00.04;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.05.22.20.42;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.14.18.50.17;	author jason;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2000.08.26.20.04.18;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.26.03.42.20;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	99.12.07.22.33.43;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.03.02.07.04.38;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.14.22.25.26;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: nsphyter.c,v 1.18 2014/12/05 15:50:04 mpi Exp $	*/
/*	$NetBSD: nsphyter.c,v 1.5 2000/02/02 23:34:57 thorpej Exp $	*/

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * driver for National Semiconductor's DP83843 `PHYTER' ethernet 10/100 PHY
 * Data Sheet available from www.national.com
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/nsphyterreg.h>

int	nsphytermatch(struct device *, void *, void *);
void	nsphyterattach(struct device *, struct device *, void *);

struct cfattach nsphyter_ca = {
	sizeof(struct mii_softc), nsphytermatch, nsphyterattach,
	mii_phy_detach
};

struct cfdriver nsphyter_cd = {
	NULL, "nsphyter", DV_DULL
};

int	nsphyter_service(struct mii_softc *, struct mii_data *, int);
void	nsphyter_status(struct mii_softc *);

const struct mii_phy_funcs nsphyter_funcs = {
	nsphyter_service, nsphyter_status, mii_phy_reset,
};

static const struct mii_phydesc nsphyterphys[] = {
	{ MII_OUI_NATSEMI,		MII_MODEL_NATSEMI_DP83815,
	  MII_STR_NATSEMI_DP83815 },
	{ MII_OUI_NATSEMI,		MII_MODEL_NATSEMI_DP83843,
	  MII_STR_NATSEMI_DP83843 },
	{ MII_OUI_NATSEMI,		MII_MODEL_NATSEMI_DP83847,
	  MII_STR_NATSEMI_DP83847 },

	{ 0,			0,
	  NULL },
};

int
nsphytermatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, nsphyterphys) != NULL)
		return (10);

	return (0);
}

void
nsphyterattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, nsphyterphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &nsphyter_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
nsphyter_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
nsphyter_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, physts;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
	physts = PHY_READ(sc, MII_NSPHYTER_PHYSTS);

	if (physts & PHYSTS_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		/*
		 * The media status bits are only valid if autonegotiation
		 * has completed (or it's disabled).
		 */
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		if (physts & PHYSTS_SPEED10)
			mii->mii_media_active |= IFM_10_T;
		else
			mii->mii_media_active |= IFM_100_TX;

		if (physts & PHYSTS_DUPLEX)
			mii->mii_media_active |= IFM_FDX;
		else
			mii->mii_media_active |= IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.18
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.17 2013/12/28 03:30:41 deraadt Exp $	*/
a64 1
#include <sys/kernel.h>
@


1.17
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.16 2010/07/23 07:47:13 jsg Exp $	*/
d71 1
@


1.16
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.15 2008/06/26 05:42:16 ray Exp $	*/
d84 1
a84 1
	    mii_phy_detach, mii_phy_activate
@


1.15
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.14 2008/03/12 11:32:17 brad Exp $	*/
a44 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.14
log
@Fix comment typo, of -> if.

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.13 2006/12/27 19:11:09 kettenis Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.13
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.12 2006/03/04 03:53:30 brad Exp $	*/
d248 1
a248 1
		 * The media status bits are only valid of autonegotiation
@


1.12
log
@add the National Semiconductor DP83847 DsPHYTER PHY.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.11 2005/02/19 06:00:04 brad Exp $	*/
d261 1
d264 2
@


1.11
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.10 2005/02/05 22:20:42 brad Exp $	*/
d115 2
@


1.10
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.9 2005/01/28 18:27:55 brad Exp $	*/
d111 3
a113 1
	{ MII_OUI_NATSEMI,	MII_MODEL_NATSEMI_DP83843,
a114 2
	{ MII_OUI_NATSEMI,	MII_MODEL_NATSEMI_DP83815,
	  MII_STR_NATSEMI_DP83815 },
@


1.9
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.8 2004/09/27 18:25:48 brad Exp $	*/
d110 10
d125 2
a126 7
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_NATSEMI) {
		switch (MII_MODEL(ma->mii_id2)) {
		case MII_MODEL_NATSEMI_DP83843:
		case MII_MODEL_NATSEMI_DP83815:
			return (10);
		}
	}
d137 1
d139 2
a140 5
	if (MII_MODEL(ma->mii_id2) == MII_MODEL_NATSEMI_DP83815)
		printf(": %s", MII_STR_NATSEMI_DP83815);
	else
		printf(": %s", MII_STR_NATSEMI_DP83843);
	printf(", rev. %d\n", MII_REV(ma->mii_id2));
@


1.8
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.7 2004/09/26 00:59:58 brad Exp $	*/
d143 1
a143 1
	sc->mii_flags = mii->mii_flags;
@


1.7
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.6 2004/09/20 06:05:27 brad Exp $	*/
d111 1
a111 4
nsphytermatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d127 1
a127 3
nsphyterattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d154 1
a154 4
nsphyter_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d216 1
a216 2
nsphyter_status(sc)
	struct mii_softc *sc;
@


1.6
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.5 2002/03/14 01:26:58 millert Exp $	*/
d106 4
d146 1
a146 2
	sc->mii_service = nsphyter_service;
	sc->mii_status = nsphyter_status;
d150 1
a150 1
	mii_phy_reset(sc);
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.4 2001/04/14 18:50:17 jason Exp $	*/
a78 1
#include <sys/malloc.h>
@


1.4
log
@- integrated phy on the natsemi 83815 (MacPhyter) is essentially a nsphyter
(media selection doesn't work completely right... choose what ever you want,
you get auto, but at least link and speed detection work correctly)
- correct the cfdriver name to be "nsphyter" not "nsphy" so it can be
distinguished from nsphy in 'boot -c'.
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.3 2000/08/26 20:04:18 nate Exp $	*/
d92 2
a93 2
int	nsphytermatch __P((struct device *, void *, void *));
void	nsphyterattach __P((struct device *, struct device *, void *));
d104 2
a105 2
int	nsphyter_service __P((struct mii_softc *, struct mii_data *, int));
void	nsphyter_status __P((struct mii_softc *));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.4 2001/04/14 18:50:17 jason Exp $	*/
d92 2
a93 2
int	nsphytermatch(struct device *, void *, void *);
void	nsphyterattach(struct device *, struct device *, void *);
d104 2
a105 2
int	nsphyter_service(struct mii_softc *, struct mii_data *, int);
void	nsphyter_status(struct mii_softc *);
@


1.3
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: nsphyter.c,v 1.2 2000/02/26 03:42:20 jason Exp $	*/
d101 1
a101 1
	NULL, "nsphy", DV_DULL
d115 7
a121 3
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_NATSEMI &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_NATSEMI_DP83843)
		return (10);
d135 5
a139 2
	printf(": %s, rev. %d\n", MII_STR_NATSEMI_DP83843,
	    MII_REV(ma->mii_id2));
@


1.2
log
@fix printf's
@
text
@d1 2
a2 2
/*	$OpenBSD: nsphyter.c,v 1.1 1999/12/07 22:33:43 jason Exp $	*/
/*	$NetBSD: nsphyter.c,v 1.1 1999/12/07 19:36:37 thorpej Exp $	*/
d96 2
a97 1
	sizeof(struct mii_softc), nsphytermatch, nsphyterattach
d137 1
d139 1
d145 2
a146 4
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
		mii_add_media(sc);
d158 3
d187 1
a187 12
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;
		default:
			mii_phy_setmedia(sc);
		}
d197 1
a197 31
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 */
		reg = PHY_READ(sc, MII_BMSR) |
		    PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK)
			return (0);

		/*
		 * Only retry autonegotiation every 5 seconds.
		 */
		if (++sc->mii_ticks != 5)
			return (0);

		sc->mii_ticks = 0;
		mii_phy_reset(sc);
		if (mii_phy_auto(sc, 0) == EJUSTRETURN)
d207 1
a207 1
	nsphyter_status(sc);
d210 1
a210 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.1
log
@driver for National Semiconductor 83843; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a141 1
	printf("%s: ", sc->mii_dev.dv_xname);
a145 1
	printf("\n");
@


1.1.2.1
log
@Sync with -current
@
text
@d142 1
d147 1
@


1.1.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: nsphyter.c,v 1.4 2001/04/14 18:50:17 jason Exp $	*/
/*	$NetBSD: nsphyter.c,v 1.5 2000/02/02 23:34:57 thorpej Exp $	*/
d96 1
a96 2
	sizeof(struct mii_softc), nsphytermatch, nsphyterattach,
	    mii_phy_detach, mii_phy_activate
d100 1
a100 1
	NULL, "nsphyter", DV_DULL
d114 3
a116 7
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_NATSEMI) {
		switch (MII_MODEL(ma->mii_id2)) {
		case MII_MODEL_NATSEMI_DP83843:
		case MII_MODEL_NATSEMI_DP83815:
			return (10);
		}
	}
d130 2
a131 5
	if (MII_MODEL(ma->mii_id2) == MII_MODEL_NATSEMI_DP83815)
		printf(": %s", MII_STR_NATSEMI_DP83815);
	else
		printf(": %s", MII_STR_NATSEMI_DP83843);
	printf(", rev. %d\n", MII_REV(ma->mii_id2));
a135 1
	sc->mii_status = nsphyter_status;
a136 1
	sc->mii_flags = mii->mii_flags;
d142 4
a145 2
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
a156 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d183 12
a194 1
		mii_phy_setmedia(sc);
d204 31
a234 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d244 1
a244 1
	mii_phy_status(sc);
d247 4
a250 1
	mii_phy_update(sc, cmd);
@


1.1.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 2
a93 2
int	nsphytermatch(struct device *, void *, void *);
void	nsphyterattach(struct device *, struct device *, void *);
d104 2
a105 2
int	nsphyter_service(struct mii_softc *, struct mii_data *, int);
void	nsphyter_status(struct mii_softc *);
@


