head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.4
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.14
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.12
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.10
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.8
	OPENBSD_5_0:1.20.0.6
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.4
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.19.0.6
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.8
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.18.0.14
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.12
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.10
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.8
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.6
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.12.0.8
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.6
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.2
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.23
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.22;
commitid	p4LJxGKbi0BU2cG6;

1.22
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.21;
commitid	t9FBKDfc4VDxpEy2;

1.21
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.18;

1.18
date	2005.02.04.23.23.56;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2004.09.28.01.13.32;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.13.06.02.09;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.57;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.17.01.15.22;	author nate;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2001.07.16.16.34.07;	author peter;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.26.20.04.17;	author nate;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.16.05.06.01;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	99.12.07.22.01.28;	author jason;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	99.09.26.17.50.41;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	99.07.23.12.39.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.07.16.14.59.06;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	98.11.11.19.34.44;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.09.10.17.17.33;	author jason;	state Exp;
branches;
next	;

1.6.2.1
date	2000.02.20.11.56.59;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.05.14.22.25.21;	author niklas;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.10.31.03.22.44;	author nate;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.6.2.5;

1.6.2.5
date	2003.03.28.00.38.19;	author niklas;	state Exp;
branches;
next	;

1.10.4.1
date	2002.06.11.03.42.23;	author art;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2003.05.19.22.20.35;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: exphy.c,v 1.22 2014/12/05 15:50:04 mpi Exp $	*/
/*	$NetBSD: exphy.c,v 1.23 2000/02/02 23:34:56 thorpej Exp $	*/

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center, and by Frank van der Linden.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * driver for 3Com internal PHYs
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

int	exphymatch(struct device *, void *, void *);
void	exphyattach(struct device *, struct device *, void *);

struct cfattach exphy_ca = {
	sizeof(struct mii_softc), exphymatch, exphyattach, mii_phy_detach
};

struct cfdriver exphy_cd = {
	NULL, "exphy", DV_DULL
};

int	exphy_service(struct mii_softc *, struct mii_data *, int);
void	exphy_reset(struct mii_softc *);

const struct mii_phy_funcs exphy_funcs = {
	exphy_service, ukphy_status, exphy_reset,
};

int
exphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	/*
	 * Since 3com's PHY for some xl adapters is braindead and doesn't
	 * report the proper OUI/MODEL information, we have this stupid
	 * match function.
	 */
	if ((strcmp(parent->dv_cfdata->cf_driver->cd_name, "xl") == 0) &&
	    ((MII_OUI(ma->mii_id1, ma->mii_id2) == 0 &&
	      MII_MODEL(ma->mii_id2) == 0) ||
	     (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_3COM &&
	      MII_MODEL(ma->mii_id2) == 0)))
		return (10);

	return (0);
}

void
exphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;

	printf(": 3Com internal media interface\n");

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &exphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	sc->mii_flags |= MIIF_NOISOLATE;

	/*
	 * The 3Com PHY can never be isolated, so never allow non-zero
	 * instances!
	 */
	if (mii->mii_instance != 0) {
		printf("%s: ignoring this PHY, non-zero instance\n",
		    sc->mii_dev.dv_xname);
		return;
	}

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
exphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	/*
	 * We can't isolate the 3Com PHY, so it has to be the only one!
	 */
	if (IFM_INST(ife->ifm_media) != sc->mii_inst)
		panic("exphy_service: can't isolate 3Com PHY");

	switch (cmd) {
	case MII_POLLSTAT:
		break;

	case MII_MEDIACHG:
		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);

		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
exphy_reset(struct mii_softc *sc)
{

	mii_phy_reset(sc);

	/*
	 * XXX 3Com PHY doesn't set the BMCR properly after
	 * XXX reset, which breaks autonegotiation.
	 */
	PHY_WRITE(sc, MII_BMCR, BMCR_S100|BMCR_AUTOEN|BMCR_FDX);
}
@


1.22
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.21 2013/12/28 03:30:41 deraadt Exp $	*/
a63 1
#include <sys/kernel.h>
@


1.21
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.20 2010/07/23 07:47:13 jsg Exp $	*/
d69 1
@


1.20
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.19 2008/06/26 05:42:16 ray Exp $	*/
d79 1
a79 2
	sizeof(struct mii_softc), exphymatch, exphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.19
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.18 2005/02/04 23:23:56 brad Exp $	*/
a44 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.18
log
@- attach 3com 3c905C PHY with bmtphy
- use mii_phy_reset() instead of bmtphy_reset()
- use mii_phy_match()
- sync bmtphyreg.h to NetBSD

Tested on a few bce(4), gem(4), xl(4)
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.17 2005/01/28 18:27:55 brad Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.17
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.16 2004/09/28 01:13:32 brad Exp $	*/
a110 5
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    (MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905B ||
	     MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C))
		return (10);

d133 1
a133 14
	if ((MII_OUI(ma->mii_id1, ma->mii_id2) == 0 ||
	     MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_3COM) &&
	    MII_MODEL(ma->mii_id2) == 0)
		printf(": 3Com internal media interface\n");
	else if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905B)
		printf(": %s, rev. %d\n", MII_STR_BROADCOM_3C905B,
		    MII_REV(ma->mii_id2));
	else if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C)
		printf(": %s, rev. %d\n", MII_STR_BROADCOM_3C905C,
		    MII_REV(ma->mii_id2));
	else
		printf(": unknown phy\n");
@


1.16
log
@mii_phy_tick() already checks for autonegotiation.
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.15 2004/09/27 18:25:48 brad Exp $	*/
d157 3
a159 1
	sc->mii_flags = mii->mii_flags;
a169 1
	sc->mii_flags |= MIIF_NOISOLATE;
@


1.15
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.14 2004/09/26 00:59:58 brad Exp $	*/
a206 6
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

@


1.14
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.13 2004/09/20 06:05:27 brad Exp $	*/
d107 1
a107 4
exphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d132 1
a132 3
exphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d179 1
a179 4
exphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d232 1
a232 2
exphy_reset(sc)
	struct mii_softc *sc;
@


1.13
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.12 2003/02/13 06:02:09 fgsch Exp $	*/
d102 4
d160 1
a160 2
	sc->mii_service = exphy_service;
	sc->mii_status = ukphy_status;
d175 1
a175 1
	exphy_reset(sc);
@


1.12
log
@support for 3C905B internal PHY; markus@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.10 2001/07/17 01:15:22 nate Exp $	*/
a77 1
#include <sys/malloc.h>
@


1.11
log
@First round of __P removal in sys
@
text
@d112 2
a113 1
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C)
d144 4
@


1.10
log
@Rework exphymatch so that it uses positive logic.  Makes more sense.
tested by jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.9 2001/07/16 16:34:07 peter Exp $	*/
d88 2
a89 2
int	exphymatch __P((struct device *, void *, void *));
void	exphyattach __P((struct device *, struct device *, void *));
d100 2
a101 2
int	exphy_service __P((struct mii_softc *, struct mii_data *, int));
void	exphy_reset __P((struct mii_softc *));
@


1.10.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.10 2001/07/17 01:15:22 nate Exp $	*/
d88 2
a89 2
int	exphymatch(struct device *, void *, void *);
void	exphyattach(struct device *, struct device *, void *);
d100 2
a101 2
int	exphy_service(struct mii_softc *, struct mii_data *, int);
void	exphy_reset(struct mii_softc *);
@


1.10.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d112 1
a112 2
	    (MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905B ||
	     MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C))
a142 4
	else if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905B)
		printf(": %s, rev. %d\n", MII_STR_BROADCOM_3C905B,
		    MII_REV(ma->mii_id2));
@


1.9
log
@add support for the PHY on a 3c920 / 3c980C found on Tyan Thunder K7
boards. ok'd nate@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.8 2000/08/26 20:04:17 nate Exp $	*/
d111 3
a113 10
	/*
	 * Argh, 3Com PHY reports oui == 0 model == 0!
	 */
	if ((MII_OUI(ma->mii_id1, ma->mii_id2) != 0 ||
	     MII_MODEL(ma->mii_id2) != 0) &&
	    (MII_OUI(ma->mii_id1, ma->mii_id2) != MII_OUI_3COM ||
	     MII_MODEL(ma->mii_id2) != 0) &&
	    (MII_OUI(ma->mii_id1, ma->mii_id2) != MII_OUI_BROADCOM ||
	     MII_MODEL(ma->mii_id2) != MII_MODEL_BROADCOM_3C905C))
		return (0);
d116 3
a118 1
	 * Make sure the parent is an `xl'.
d120 6
a125 2
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "xl") != 0)
		return (0);
d127 1
a127 1
	return (10);
@


1.8
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.7 2000/02/16 05:06:01 jason Exp $	*/
d116 2
d140 2
a141 1
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == 0 &&
@


1.7
log
@match broadcom 3c905c phy
@
text
@d1 2
a2 2
/*	$OpenBSD: exphy.c,v 1.6 1999/12/07 22:01:28 jason Exp $	*/
/*	$NetBSD: exphy.c,v 1.15.6.1 1999/04/23 15:39:33 perry Exp $	*/
d92 2
a93 1
	sizeof(struct mii_softc), exphymatch, exphyattach
d151 1
d153 1
d171 1
a171 1
		mii_add_media(sc);
d182 3
d202 1
a202 12
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;
		default:
			mii_phy_setmedia(sc);
		}
d212 1
a212 4
		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
a214 4
		/*
		 * The 3Com PHY's autonegotiation doesn't need to be
		 * kicked; it continues in the background.
		 */
d223 1
a223 1
	ukphy_status(sc);
d226 1
a226 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.6
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.5 1999/09/26 17:50:41 jason Exp $	*/
d113 4
a116 2
	if (MII_OUI(ma->mii_id1, ma->mii_id2) != 0 &&
	    MII_MODEL(ma->mii_id2) != 0)
d137 9
a145 1
	printf(": 3Com internal media interface\n");
@


1.6.2.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.7 2000/02/16 05:06:01 jason Exp $	*/
d113 2
a114 4
	if ((MII_OUI(ma->mii_id1, ma->mii_id2) != 0 ||
	     MII_MODEL(ma->mii_id2) != 0) &&
	    (MII_OUI(ma->mii_id1, ma->mii_id2) != MII_OUI_BROADCOM ||
	     MII_MODEL(ma->mii_id2) != MII_MODEL_BROADCOM_3C905C))
d135 1
a135 9
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == 0 &&
	    MII_MODEL(ma->mii_id2) == 0)
		printf(": 3Com internal media interface\n");
	else if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C)
		printf(": %s, rev. %d\n", MII_STR_BROADCOM_3C905C,
		    MII_REV(ma->mii_id2));
	else
		printf(": unknown phy\n");
@


1.6.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: exphy.c,v 1.8 2000/08/26 20:04:17 nate Exp $	*/
/*	$NetBSD: exphy.c,v 1.23 2000/02/02 23:34:56 thorpej Exp $	*/
d92 1
a92 2
	sizeof(struct mii_softc), exphymatch, exphyattach, mii_phy_detach,
	    mii_phy_activate
a149 1
	sc->mii_status = ukphy_status;
a150 1
	sc->mii_flags = mii->mii_flags;
d168 1
a168 1
		mii_phy_add_media(sc);
a178 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d196 12
a207 1
		mii_phy_setmedia(sc);
d217 4
a220 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d223 4
d235 1
a235 1
	mii_phy_status(sc);
d238 4
a241 1
	mii_phy_update(sc, cmd);
@


1.6.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.6.2.2 2001/05/14 22:25:21 niklas Exp $	*/
d111 8
a118 3
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C)
		return (10);
d121 1
a121 3
	 * Since 3com's PHY for some xl adapters is braindead and doesn't
	 * report the proper OUI/MODEL information, we have this stupid
	 * match function.
d123 2
a124 6
	if ((strcmp(parent->dv_cfdata->cf_driver->cd_name, "xl") == 0) &&
	    ((MII_OUI(ma->mii_id1, ma->mii_id2) == 0 &&
	      MII_MODEL(ma->mii_id2) == 0) ||
	     (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_3COM &&
	      MII_MODEL(ma->mii_id2) == 0)))
		return (10);
d126 1
a126 1
	return (0);
d138 1
a138 2
	if ((MII_OUI(ma->mii_id1, ma->mii_id2) == 0 ||
	     MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_3COM) &&
@


1.6.2.4
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d88 2
a89 2
int	exphymatch(struct device *, void *, void *);
void	exphyattach(struct device *, struct device *, void *);
d100 2
a101 2
int	exphy_service(struct mii_softc *, struct mii_data *, int);
void	exphy_reset(struct mii_softc *);
@


1.6.2.5
log
@Sync the SMP branch with 3.3
@
text
@d112 1
a112 2
	    (MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905B ||
	     MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905C))
a142 4
	else if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_3C905B)
		printf(": %s, rev. %d\n", MII_STR_BROADCOM_3C905B,
		    MII_REV(ma->mii_id2));
@


1.5
log
@match if parent is 'xl'
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.4 1999/07/23 12:39:11 deraadt Exp $	*/
a87 3
#ifdef __NetBSD__
int	exphymatch __P((struct device *, struct cfdata *, void *));
#else
a88 1
#endif
a94 1
#ifdef __OpenBSD__
a97 1
#endif
a104 3
#ifdef __NetBSD__
	struct cfdata *match;
#else
a105 1
#endif
a152 10
#define	ADD(m, c)	ifmedia_add(&mii->mii_media, (m), (c), NULL)

#if 0 /* See above. */
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
	    BMCR_ISO);
#endif

	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->mii_inst),
	    BMCR_LOOP|BMCR_S100);

d158 1
a158 3
		mii_add_media(mii, sc->mii_capabilities,
		    sc->mii_inst);
#undef ADD
a194 5
		case IFM_100_T4:
			/*
			 * XXX Not supported as a manual setting right now.
			 */
			return (EINVAL);
d196 1
a196 6
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
d218 4
@


1.4
log
@do not print media information to dmesg; ifconfig shows it
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.3 1999/07/16 14:59:06 jason Exp $	*/
d128 1
a128 1
	 * Make sure the parent is an `ex'.
d130 1
a130 1
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "ex") != 0)
@


1.3
log
@Sync with NetBSD:
o Implement asynchronous autonegotiation when driven by the MII tick
  (one-second clock).  Prevents .5s delays every 5 seconds when the interface
  is up but there is no link.
o Correct the sense of the PCR_FLINK100 bit in nsphy.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: exphy.c,v 1.2 1998/11/11 19:34:44 jason Exp $	*/
d177 1
a177 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a179 1
	printf("\n");
@


1.2
log
@Merge with NetBSD:
o additional phy drivers (seeq, ics, level1)
o "unknown phy" driver for unsupported phys
o collected common code into mii_physubr
o exphy isn't the only phy that doesn't have valid id registers
@
text
@d1 2
a2 2
/*	$OpenBSD: exphy.c,v 1.1 1998/09/10 17:17:33 jason Exp $	*/
/*	$NetBSD: exphy.c,v 1.15 1998/11/05 00:19:32 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d219 1
a219 1
			(void) mii_phy_auto(sc);
@


1.1
log
@OpenBSD gets sys/dev/mii layer from NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: exphy.c,v 1.5 1998/08/28 12:50:36 fvdl Exp $	*/
a87 6
struct exphy_softc {
	struct mii_softc sc_mii;		/* generic PHY */
	int sc_capabilities;
	int sc_active;
};

d96 1
a96 1
	sizeof(struct exphy_softc), exphymatch, exphyattach
a104 8
#define	EXPHY_READ(sc, reg) \
    (*(sc)->sc_mii.mii_pdata->mii_readreg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg))

#define	EXPHY_WRITE(sc, reg, val) \
    (*(sc)->sc_mii.mii_pdata->mii_writereg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg), (val))

d106 1
a106 3
void	exphy_reset __P((struct exphy_softc *));
void	exphy_auto __P((struct exphy_softc *));
void	exphy_status __P((struct exphy_softc *));
d123 3
a125 3
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == 0 &&
	    MII_MODEL(ma->mii_id2) == 0)
		return (1);
d127 7
a133 1
	return (0);
d141 1
a141 1
	struct exphy_softc *sc = (struct exphy_softc *)self;
d145 1
a145 2
	printf(": 3Com internal media interface, rev. %d\n",
	    MII_REV(ma->mii_id2));
d147 4
a150 4
	sc->sc_mii.mii_inst = mii->mii_instance;
	sc->sc_mii.mii_phy = ma->mii_phyno;
	sc->sc_mii.mii_service = exphy_service;
	sc->sc_mii.mii_pdata = mii;
d158 1
a158 1
		    sc->sc_mii.mii_dev.dv_xname);
d161 1
d165 2
a166 1
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->sc_mii.mii_inst),
d168 1
d170 1
a170 1
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->sc_mii.mii_inst),
d175 4
a178 3
	sc->sc_capabilities = EXPHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	printf("%s: ", sc->sc_mii.mii_dev.dv_xname);
	if ((sc->sc_capabilities & BMSR_MEDIAMASK) == 0)
d181 2
a182 1
		mii_add_media(mii, sc->sc_capabilities, sc->sc_mii.mii_inst);
d188 2
a189 2
exphy_service(self, mii, cmd)
	struct mii_softc *self;
d193 1
a193 1
	struct exphy_softc *sc = (struct exphy_softc *)self;
d198 1
a198 1
	if (IFM_INST(mii->mii_media.ifm_media) != sc->sc_mii.mii_inst)
a200 1

d212 1
a212 1
		switch (IFM_SUBTYPE(mii->mii_media.ifm_media)) {
d217 1
a217 1
			if (EXPHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
d219 1
a219 1
			exphy_auto(sc);
d230 3
a232 4
			EXPHY_WRITE(sc, MII_ANAR,
			    mii_anar(mii->mii_media.ifm_media));
			EXPHY_WRITE(sc, MII_BMCR,
			    mii->mii_media.ifm_cur->ifm_data);
d240 1
a240 1
		if (IFM_SUBTYPE(mii->mii_media.ifm_media) != IFM_AUTO)
d257 1
a257 1
	exphy_status(sc);
d260 3
a262 3
	if (sc->sc_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->sc_mii.mii_dev.dv_parent);
		sc->sc_active = mii->mii_media_active;
a267 82
exphy_status(sc)
	struct exphy_softc *sc;
{
	struct mii_data *mii = sc->sc_mii.mii_pdata;
	int bmsr, bmcr, anlpar;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = EXPHY_READ(sc, MII_BMSR) | EXPHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = EXPHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		/*
		 * The 3Com PHY uses the highest-order common bit of
		 * the ANAR and ANLPAR (i.e. best media advertised
		 * both by us and our link partner).
		 */
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		anlpar = EXPHY_READ(sc, MII_ANAR) & EXPHY_READ(sc, MII_ANLPAR);
		if (anlpar & ANLPAR_T4)
			mii->mii_media_active |= IFM_100_T4;
		else if (anlpar & ANLPAR_TX_FD)
			mii->mii_media_active |= IFM_100_TX|IFM_FDX;
		else if (anlpar & ANLPAR_TX)
			mii->mii_media_active |= IFM_100_TX;
		else if (anlpar & ANLPAR_10_FD)
			mii->mii_media_active |= IFM_10_T|IFM_FDX;
		else if (anlpar & ANLPAR_10)
			mii->mii_media_active |= IFM_10_T;
		else
			mii->mii_media_active |= IFM_NONE;
	} else {
		if (bmcr & BMCR_S100)
			mii->mii_media_active |= IFM_100_TX;
		else
			mii->mii_media_active |= IFM_10_T;
		if (bmcr & BMCR_FDX)
			mii->mii_media_active |= IFM_FDX;
	}
}

void
exphy_auto(sc)
	struct exphy_softc *sc;
{
	int bmsr, i;

	EXPHY_WRITE(sc, MII_ANAR,
	    BMSR_MEDIA_TO_ANAR(sc->sc_capabilities) | ANAR_CSMA);
	EXPHY_WRITE(sc, MII_BMCR, BMCR_AUTOEN | BMCR_STARTNEG);

	/* Wait 500ms for it to complete. */
	for (i = 0; i < 500; i++) {
		if ((bmsr = EXPHY_READ(sc, MII_BMSR)) & BMSR_ACOMP)
			return;
		delay(1000);
	}
#if 0
	if ((bmsr & BMSR_ACOMP) == 0)
		printf("%s: autonegotiation failed to complete\n",
		    sc->sc_mii.mii_dev.dv_xname);
#endif
}

void
d269 1
a269 1
	struct exphy_softc *sc;
a270 3
	int reg, i;

	EXPHY_WRITE(sc, MII_BMCR, BMCR_RESET);
d272 1
a272 7
	/* Wait 100ms for it to complete. */
	for (i = 0; i < 100; i++) {
		reg = EXPHY_READ(sc, MII_BMCR);
		if ((reg & BMCR_RESET) == 0)
			break;
		delay(1000);
	}
d278 1
a278 1
	EXPHY_WRITE(sc, MII_BMCR, BMCR_S100|BMCR_AUTOEN|BMCR_FDX);
@

