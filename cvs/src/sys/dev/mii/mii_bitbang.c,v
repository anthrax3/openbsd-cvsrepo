head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.34
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.24
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.32
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.30
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.28
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.01.02.50.34;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.27.18.25.48;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.57;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.11.02.48.19;	author aaron;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.25.24;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.23;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: mii_bitbang.c,v 1.4 2005/07/01 02:50:34 brad Exp $	*/
/*	$NetBSD: mii_bitbang.c,v 1.6 2004/08/23 06:18:39 thorpej Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Common module for bit-bang'ing the MII.
 */

#include <sys/param.h>
#include <sys/device.h>

#include <dev/mii/mii.h>
#include <dev/mii/mii_bitbang.h>

void	mii_bitbang_sync(struct device *, mii_bitbang_ops_t);
void	mii_bitbang_sendbits(struct device *, mii_bitbang_ops_t,
	    u_int32_t, int);

#define	WRITE(x)							\
do {									\
	ops->mbo_write(sc, (x));					\
	delay(1);							\
} while (0)

#define	READ		ops->mbo_read(sc)

#define	MDO		ops->mbo_bits[MII_BIT_MDO]
#define	MDI		ops->mbo_bits[MII_BIT_MDI]
#define	MDC		ops->mbo_bits[MII_BIT_MDC]
#define	MDIRPHY		ops->mbo_bits[MII_BIT_DIR_HOST_PHY]
#define	MDIRHOST	ops->mbo_bits[MII_BIT_DIR_PHY_HOST]

/*
 * mii_bitbang_sync:
 *
 *	Synchronize the MII.
 */
void
mii_bitbang_sync(struct device *sc, mii_bitbang_ops_t ops)
{
	int i;
	u_int32_t v;

	v = MDIRPHY | MDO;

	WRITE(v);
	for (i = 0; i < 32; i++) {
		WRITE(v | MDC);
		WRITE(v);
	}
}

/*
 * mii_bitbang_sendbits:
 *
 *	Send a series of bits to the MII.
 */
void
mii_bitbang_sendbits(struct device *sc, mii_bitbang_ops_t ops,
    u_int32_t data, int nbits)
{
	int i;
	u_int32_t v;

	v = MDIRPHY;
	WRITE(v);

	for (i = 1 << (nbits - 1); i != 0; i >>= 1) {
		if (data & i)
			v |= MDO;
		else
			v &= ~MDO;
		WRITE(v);
		WRITE(v | MDC);
		WRITE(v);
	}
}

/*
 * mii_bitbang_readreg:
 *
 *	Read a PHY register by bit-bang'ing the MII.
 */
int
mii_bitbang_readreg(struct device *sc, mii_bitbang_ops_t ops, int phy,
    int reg)
{
	int val = 0, err = 0, i;

	mii_bitbang_sync(sc, ops);

	mii_bitbang_sendbits(sc, ops, MII_COMMAND_START, 2);
	mii_bitbang_sendbits(sc, ops, MII_COMMAND_READ, 2);
	mii_bitbang_sendbits(sc, ops, phy, 5);
	mii_bitbang_sendbits(sc, ops, reg, 5);

	/* Switch direction to PHY->host, without a clock transition. */
	WRITE(MDIRHOST);

	/* Turnaround clock. */
	WRITE(MDIRHOST | MDC);
	WRITE(MDIRHOST);

	/* Check for error. */
	err = READ & MDI;

	/* Idle clock. */
	WRITE(MDIRHOST | MDC);
	WRITE(MDIRHOST);

	for (i = 0; i < 16; i++) {
		val <<= 1;
		/* Read data prior to clock low-high transition. */
		if (err == 0 && (READ & MDI) != 0)
			val |= 1;

		WRITE(MDIRHOST | MDC);
		WRITE(MDIRHOST);
	}

	/* Set direction to host->PHY, without a clock transition. */
	WRITE(MDIRPHY);

	return (err ? 0 : val);
}

/*
 * mii_bitbang_writereg:
 *
 *	Write a PHY register by bit-bang'ing the MII.
 */
void
mii_bitbang_writereg(struct device *sc, mii_bitbang_ops_t ops,
    int phy, int reg, int val)
{

	mii_bitbang_sync(sc, ops);

	mii_bitbang_sendbits(sc, ops, MII_COMMAND_START, 2);
	mii_bitbang_sendbits(sc, ops, MII_COMMAND_WRITE, 2);
	mii_bitbang_sendbits(sc, ops, phy, 5);
	mii_bitbang_sendbits(sc, ops, reg, 5);
	mii_bitbang_sendbits(sc, ops, MII_COMMAND_ACK, 2);
	mii_bitbang_sendbits(sc, ops, val, 16);

	WRITE(MDIRPHY);
}
@


1.4
log
@fix a couple of signed->unsigned warnings lint found

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: mii_bitbang.c,v 1.3 2004/09/27 18:25:48 brad Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 2
a2 1
/*	$OpenBSD: mii_bitbang.c,v 1.2 2002/03/14 01:26:57 millert Exp $	*/
d77 2
a78 1
	int i, v;
d98 2
a99 1
	int i, v;
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 2
/*	$OpenBSD: mii_bitbang.c,v 1.1 2001/03/11 02:48:19 aaron Exp $	*/
/*	$NetBSD$	*/
d74 1
a74 3
mii_bitbang_sync(sc, ops)
	struct device *sc;
	mii_bitbang_ops_t ops;
d93 2
a94 5
mii_bitbang_sendbits(sc, ops, data, nbits)
	struct device *sc;
	mii_bitbang_ops_t ops;
	u_int32_t data;
	int nbits;
d118 2
a119 4
mii_bitbang_readreg(sc, ops, phy, reg)
	struct device *sc;
	mii_bitbang_ops_t ops;
	int phy, reg;
d166 2
a167 4
mii_bitbang_writereg(sc, ops, phy, reg, val)
	struct device *sc;
	mii_bitbang_ops_t ops;
	int phy, reg, val;
@


1.1
log
@Code for devices that read/write to an IEEE 802.3u MII bus using the
bit-bang method; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 3
a53 3
void	mii_bitbang_sync __P((struct device *, mii_bitbang_ops_t));
void	mii_bitbang_sendbits __P((struct device *, mii_bitbang_ops_t,
	    u_int32_t, int));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mii_bitbang.c,v 1.1 2001/03/11 02:48:19 aaron Exp $	*/
d51 3
a53 3
void	mii_bitbang_sync(struct device *, mii_bitbang_ops_t);
void	mii_bitbang_sendbits(struct device *, mii_bitbang_ops_t,
	    u_int32_t, int);
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: mii_bitbang.c,v 1.1 2001/03/11 02:48:19 aaron Exp $	*/
@


1.1.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 3
a53 3
void	mii_bitbang_sync(struct device *, mii_bitbang_ops_t);
void	mii_bitbang_sendbits(struct device *, mii_bitbang_ops_t,
	    u_int32_t, int);
@


