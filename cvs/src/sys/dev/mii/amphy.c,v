head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.8
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.6
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.20
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.18
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.16
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.14
	OPENBSD_5_0:1.18.0.12
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.10
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.8
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.4
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.17.0.2
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.20;
commitid	p4LJxGKbi0BU2cG6;

1.20
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.19;
commitid	t9FBKDfc4VDxpEy2;

1.19
date	2013.12.28.03.30.40;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.08.07.38.33;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2008.03.12.11.32.17;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.02.16.04.08;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2006.12.31.15.04.33;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.27.19.11.08;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.27.08.04.15;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.05.22.30.52;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.05.19.11.34;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.04.13.02.33;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.27.18.25.47;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.06.09.57.16;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.17.19.30.26;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.20.16.22.15;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.8.1;
next	1.1;

1.1
date	2000.10.17.15.59.09;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.22.25.18;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.28.00.38.19;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.42.23;	author art;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: amphy.c,v 1.20 2014/12/05 15:50:04 mpi Exp $	*/

/*
 * Copyright (c) 1997, 1998, 1999
 *	Bill Paul <wpaul@@ee.columbia.edu>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/dev/mii/amphy.c,v 1.3 2000/04/19 14:57:29 phk Exp $
 */

/*
 * driver for AMD AM79c873 PHYs
 * This driver also works for the Davicom DM9101 PHY, which appears to
 * be an AM79c873 workalike.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/amphyreg.h>

int	amphymatch(struct device *, void *, void *);
void	amphyattach(struct device *, struct device *, void *);

struct cfattach amphy_ca = {
	sizeof(struct mii_softc), amphymatch, amphyattach, mii_phy_detach
};

struct cfdriver amphy_cd = {
	NULL, "amphy", DV_DULL
};

int	amphy_service(struct mii_softc *, struct mii_data *, int);
void	amphy_status(struct mii_softc *);

const struct mii_phy_funcs amphy_funcs = {
	amphy_service, amphy_status, mii_phy_reset,
};

static const struct mii_phydesc amphys[] = {
	{ MII_OUI_xxAMD,		MII_MODEL_xxAMD_79C873,
	  MII_STR_xxAMD_79C873 },
	{ MII_OUI_xxDAVICOM,		MII_MODEL_xxDAVICOM_DM9101,
	  MII_STR_xxDAVICOM_DM9101 },
	{ MII_OUI_DAVICOM,		MII_MODEL_DAVICOM_DM9102,
	  MII_STR_DAVICOM_DM9102 },
	{ MII_OUI_DAVICOM,		MII_MODEL_DAVICOM_DM9601,
	  MII_STR_DAVICOM_DM9601 },
	{ MII_OUI_xxALTIMA,		MII_MODEL_AMD_79C875phy,
	  MII_STR_AMD_79C875phy },

	{ 0,				0,
	  NULL },
};

int
amphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, amphys) != NULL)
		return (10);

	return (0);
}

void
amphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, amphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &amphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	sc->mii_flags |= MIIF_NOISOLATE;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
amphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;
	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
amphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, par, anlpar;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) |
	    PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		/*
		 * The PAR status bits are only valid if autonegotiation
		 * has completed (or it's disabled).
		 */
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		if (PHY_READ(sc, MII_ANER) & ANER_LPAN) {
			anlpar = PHY_READ(sc, MII_ANAR) &
			    PHY_READ(sc, MII_ANLPAR);
			if (anlpar & ANLPAR_TX_FD)
				mii->mii_media_active |= IFM_100_TX|IFM_FDX;
			else if (anlpar & ANLPAR_T4)
				mii->mii_media_active |= IFM_100_T4|IFM_HDX;
			else if (anlpar & ANLPAR_TX)
				mii->mii_media_active |= IFM_100_TX|IFM_HDX;
			else if (anlpar & ANLPAR_10_FD)
				mii->mii_media_active |= IFM_10_T|IFM_FDX;
			else if (anlpar & ANLPAR_10)
				mii->mii_media_active |= IFM_10_T|IFM_HDX;
			else
				mii->mii_media_active |= IFM_NONE;
			return;
		}

		/*
		 * Link partner is not capable of autonegotiation.
		 */
		par = PHY_READ(sc, MII_AMPHY_DSCSR);
		if (par & DSCSR_100FDX)
			mii->mii_media_active |= IFM_100_TX|IFM_FDX;
		else if (par & DSCSR_100HDX)
			mii->mii_media_active |= IFM_100_TX|IFM_HDX;
		else if (par & DSCSR_10FDX)
			mii->mii_media_active |= IFM_10_T|IFM_FDX;
		else if (par & DSCSR_10HDX)
			mii->mii_media_active |= IFM_10_T|IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.20
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.19 2013/12/28 03:30:40 deraadt Exp $	*/
a44 1
#include <sys/kernel.h>
@


1.19
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.18 2008/09/08 07:38:33 brad Exp $	*/
d50 1
@


1.18
log
@IEEE 802.3 Annex 28B.3 explicitly specifies the following relative
priorities of the technologies supported by 802.3 Selector Field
value.

1000BASE-T full duplex
1000BASE-T
100BASE-T2 full duplex
100BASE-TX full duplex
100BASE-T2
100BASE-T4
100BASE-TX
10BASE-T full duplex
10BAST-T

However PHY drivers did not honor the order such that 100BASE-T4 had
higher priority than 100BASE-TX full duplex. Fix a long standing bug
such that PHY drivers choose the highest common denominator ability.

This bug is exposed by a Cisco 3550 switch which inadvertently
announces 100BASE-T4 capability even though it is not capable of
100BASE-T4 operation, it is a 100BASE-TX switch.

From FreeBSD

Tested with dc(4), fxp(4), rl(4), sis(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.17 2008/03/12 11:32:17 brad Exp $	*/
d62 1
a62 2
	sizeof(struct mii_softc), amphymatch, amphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.17
log
@Fix comment typo, of -> if.

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.16 2008/03/02 16:04:08 brad Exp $	*/
d228 3
a230 1
			if (anlpar & ANLPAR_T4)
a231 2
			else if (anlpar & ANLPAR_TX_FD)
				mii->mii_media_active |= IFM_100_TX|IFM_FDX;
@


1.16
log
@Correct a status flag which could cause half duplex to be reported for
a 10 Mbps full duplex connection but only when not using autoneg.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.15 2006/12/31 15:04:33 krw Exp $	*/
d216 1
a216 1
		 * The PAR status bits are only valid of autonegotiation
@


1.15
log
@Bring last few phys into line by calling their XXX_status() functions
through mii_phy_status() rather than directly. No functional change.

from brad@@ ok mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.14 2006/12/27 19:11:08 kettenis Exp $	*/
d252 1
a252 1
			mii->mii_media_active |= IFM_10_T|IFM_HDX;
@


1.14
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.13 2005/05/27 08:04:15 brad Exp $	*/
d182 1
a182 1
	amphy_status(sc);
@


1.13
log
@some cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.12 2005/02/05 22:30:52 brad Exp $	*/
d229 1
a229 1
				mii->mii_media_active |= IFM_100_T4;
d233 1
a233 1
				mii->mii_media_active |= IFM_100_TX;
d237 1
a237 1
				mii->mii_media_active |= IFM_10_T;
d250 1
a250 1
			mii->mii_media_active |= IFM_100_TX;
d254 1
a254 1
			mii->mii_media_active |= IFM_10_T;
@


1.12
log
@better
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.11 2005/02/05 19:11:34 brad Exp $	*/
d99 1
a99 1
		return(10);
d101 1
a101 1
	return(0);
@


1.11
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.10 2005/01/28 18:27:55 brad Exp $	*/
d98 1
a98 1
	if(mii_phy_match(ma, amphys) != NULL)
@


1.10
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.9 2004/10/04 13:02:33 deraadt Exp $	*/
d77 16
d98 1
a98 14
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxAMD &&
	     MII_MODEL(ma->mii_id2) == MII_MODEL_xxAMD_79C873)
		return (10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxDAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxDAVICOM_DM9101)
		return(10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_DAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_DAVICOM_DM9102)
		return(10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_DAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_DAVICOM_DM9601)
		return(10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxALTIMA &&	/*XXX*/
	     MII_MODEL(ma->mii_id2) == MII_MODEL_AMD_79C875phy)
d110 1
d112 2
a113 8
	if ((MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxALTIMA &&	/*XXX*/
	     MII_MODEL(ma->mii_id2) == MII_MODEL_AMD_79C875phy)) {
		printf(": %s, rev. %d\n", MII_STR_AMD_79C875phy,
		    MII_REV(ma->mii_id2));
	} else {
		printf(": %s, rev. %d\n", MII_STR_xxAMD_79C873,
		    MII_REV(ma->mii_id2));
	}
@


1.9
log
@davicom DM9601 contains another amiphy clone
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.8 2004/09/27 18:25:47 brad Exp $	*/
d121 1
a121 1
	sc->mii_flags = mii->mii_flags;
@


1.8
log
@ANSI protos and some minor cleanup

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.7 2004/09/26 00:59:58 brad Exp $	*/
d90 3
@


1.7
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.6 2004/09/20 06:05:27 brad Exp $	*/
d78 1
a78 3
amphymatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d99 1
a99 3
amphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d131 1
a131 4
amphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d189 1
a189 2
amphy_status(sc)
	struct mii_softc *sc;
@


1.6
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.5 2004/08/06 09:57:16 pefo Exp $	*/
d73 4
d120 1
a120 2
	sc->mii_service = amphy_service;
	sc->mii_status = amphy_status;
d126 1
a126 1
	mii_phy_reset(sc);
@


1.5
log
@Add support for Am79C875 quad phy.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.4 2002/04/17 19:30:26 jason Exp $	*/
a46 1
#include <sys/malloc.h>
@


1.4
log
@dm9102 appears to be register compatible with dm9101 which is also an amphy-alike.
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.3 2002/03/14 01:26:57 millert Exp $	*/
d90 3
d106 8
a113 2
	printf(": %s, rev. %d\n", MII_STR_xxAMD_79C873,
	    MII_REV(ma->mii_id2));
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.2 2000/11/20 16:22:15 jason Exp $	*/
d81 8
a88 4
	if ((MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxAMD &&
	     MII_MODEL(ma->mii_id2) == MII_MODEL_xxAMD_79C873) ||
	    (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxDAVICOM &&
	     MII_MODEL(ma->mii_id2) == MII_MODEL_xxDAVICOM_DM9101))
@


1.2
log
@amphy was a bit too liberal in attaching; Gregory Steuck <greg@@nest.cx>
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.1 2000/10/17 15:59:09 jason Exp $	*/
d59 2
a60 2
int	amphymatch __P((struct device *, void *, void *));
void	amphyattach __P((struct device *, struct device *, void *));
d71 2
a72 2
int	amphy_service __P((struct mii_softc *, struct mii_data *, int));
void	amphy_status __P((struct mii_softc *));
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.2 2000/11/20 16:22:15 jason Exp $	*/
d59 2
a60 2
int	amphymatch(struct device *, void *, void *);
void	amphyattach(struct device *, struct device *, void *);
d71 2
a72 2
int	amphy_service(struct mii_softc *, struct mii_data *, int);
void	amphy_status(struct mii_softc *);
d81 4
a84 8
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxAMD &&
	     MII_MODEL(ma->mii_id2) == MII_MODEL_xxAMD_79C873)
		return (10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxDAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxDAVICOM_DM9101)
		return(10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_DAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_DAVICOM_DM9102)
@


1.2.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: amphy.c,v 1.2 2000/11/20 16:22:15 jason Exp $	*/
@


1.2.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 2
a60 2
int	amphymatch(struct device *, void *, void *);
void	amphyattach(struct device *, struct device *, void *);
d71 2
a72 2
int	amphy_service(struct mii_softc *, struct mii_data *, int);
void	amphy_status(struct mii_softc *);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d81 4
a84 8
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxAMD &&
	     MII_MODEL(ma->mii_id2) == MII_MODEL_xxAMD_79C873)
		return (10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxDAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxDAVICOM_DM9101)
		return(10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_DAVICOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_DAVICOM_DM9102)
@


1.1
log
@driver for amphy from freebsd; aaron ok
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d82 3
a84 3
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxAMD_79C873) ||
	    (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_xxDAVICOM ||
	    MII_MODEL(ma->mii_id2) == MII_MODEL_xxDAVICOM_DM9101))
@

