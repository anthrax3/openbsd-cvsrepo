head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.12
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.10
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.6
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.14
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.12
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.10
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.8
	OPENBSD_5_0:1.18.0.6
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.17.0.4
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.6
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.20;
commitid	p4LJxGKbi0BU2cG6;

1.20
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.19;
commitid	t9FBKDfc4VDxpEy2;

1.19
date	2013.12.28.03.30.41;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.08.07.38.33;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.30.16.41.03;	author ckuethe;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.27.19.11.08;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.19.06.00.04;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.05.22.20.42;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.28.18.27.55;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.26.00.59.58;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.20.06.05.27;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.57;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.17.01.19.21;	author jason;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	2000.08.26.20.04.17;	author nate;	state Exp;
branches;
next	1.5;

1.5
date	99.12.07.22.01.30;	author jason;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.07.23.12.39.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.07.16.14.59.06;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	98.11.11.19.34.46;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.09.10.17.17.33;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.14.22.25.22;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	;

1.7.6.1
date	2002.06.11.03.42.23;	author art;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: inphy.c,v 1.20 2014/12/05 15:50:04 mpi Exp $	*/
/*	$NetBSD: inphy.c,v 1.18 2000/02/02 23:34:56 thorpej Exp $	*/

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * driver for Intel's i82555 ethernet 10/100 PHY
 * Data Sheet available from www.intel.com
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/inphyreg.h>

int	inphymatch(struct device *, void *, void *);
void	inphyattach(struct device *, struct device *, void *);

struct cfattach inphy_ca = {
	sizeof(struct mii_softc), inphymatch, inphyattach, mii_phy_detach
};

struct cfdriver inphy_cd = {
	NULL, "inphy", DV_DULL
};

int	inphy_service(struct mii_softc *, struct mii_data *, int);
void	inphy_status(struct mii_softc *);

const struct mii_phy_funcs inphy_funcs = {
	inphy_service, inphy_status, mii_phy_reset,
};

static const struct mii_phydesc inphys[] = {
	{ MII_OUI_INTEL,		MII_MODEL_INTEL_I82555,
	  MII_STR_INTEL_I82555 },
	{ MII_OUI_INTEL,		MII_MODEL_INTEL_I82562EM,
	  MII_STR_INTEL_I82562EM },
	{ MII_OUI_INTEL,		MII_MODEL_INTEL_I82562ET,
	  MII_STR_INTEL_I82562ET },
	{ MII_OUI_INTEL,		MII_MODEL_INTEL_I82562G,
	  MII_STR_INTEL_I82562G },

	{ 0,			0,
	  NULL },
};

int
inphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, inphys) != NULL)
		return (10);

	return (0);
}

void
inphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, inphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &inphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
inphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
inphy_status(sc)
	struct mii_softc *sc;
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, scr;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) |
	    PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		scr = PHY_READ(sc, MII_INPHY_SCR);
		if (scr & SCR_S100)
			mii->mii_media_active |= IFM_100_TX;
		else if ((bmsr & BMSR_100T4) && (scr & SCR_T4))
			mii->mii_media_active |= IFM_100_T4;
		else
			mii->mii_media_active |= IFM_10_T;

		if (scr & SCR_FDX)
			mii->mii_media_active |= IFM_FDX;
		else
			mii->mii_media_active |= IFM_HDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.20
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.19 2013/12/28 03:30:41 deraadt Exp $	*/
a64 1
#include <sys/kernel.h>
@


1.19
log
@mii drivers no longer need activate functions.  Repair of the PHY
configuration setting is done at resume time because all networks
drivers which were previously up, do an IFF_UP operation which
hits PHY_RESET.
This was in snapshots for about 2 weeks.
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.18 2010/07/23 07:47:13 jsg Exp $	*/
d71 1
@


1.18
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.17 2008/09/08 07:38:33 brad Exp $	*/
d83 1
a83 2
	sizeof(struct mii_softc), inphymatch, inphyattach, mii_phy_detach,
	    mii_phy_activate
@


1.17
log
@IEEE 802.3 Annex 28B.3 explicitly specifies the following relative
priorities of the technologies supported by 802.3 Selector Field
value.

1000BASE-T full duplex
1000BASE-T
100BASE-T2 full duplex
100BASE-TX full duplex
100BASE-T2
100BASE-T4
100BASE-TX
10BASE-T full duplex
10BAST-T

However PHY drivers did not honor the order such that 100BASE-T4 had
higher priority than 100BASE-TX full duplex. Fix a long standing bug
such that PHY drivers choose the highest common denominator ability.

This bug is exposed by a Cisco 3550 switch which inadvertently
announces 100BASE-T4 capability even though it is not capable of
100BASE-T4 operation, it is a 100BASE-TX switch.

From FreeBSD

Tested with dc(4), fxp(4), rl(4), sis(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.16 2008/06/26 05:42:16 ray Exp $	*/
a44 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.16
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.15 2007/08/30 16:41:03 ckuethe Exp $	*/
d257 3
a259 1
		if ((bmsr & BMSR_100T4) && (scr & SCR_T4))
a260 2
		else if (scr & SCR_S100)
			mii->mii_media_active |= IFM_100_TX;
@


1.15
log
@PHY on D495GCCR board
"Right" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.14 2006/12/27 19:11:08 kettenis Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.14
log
@Always explicitly set IFM_HDX for half-duplex.

From brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.13 2005/02/19 06:00:04 brad Exp $	*/
d117 2
@


1.13
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.12 2005/02/05 22:20:42 brad Exp $	*/
d260 1
d268 1
d271 2
@


1.12
log
@use mii_phy_match()
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.11 2005/01/28 18:27:55 brad Exp $	*/
d111 1
a111 1
	{ MII_OUI_INTEL,	MII_MODEL_INTEL_I82555,
d113 1
a113 1
	{ MII_OUI_INTEL,	MII_MODEL_INTEL_I82562EM,
d115 1
a115 1
	{ MII_OUI_INTEL,	MII_MODEL_INTEL_I82562ET,
d117 1
@


1.11
log
@Get flags passed down to PHY drivers correctly.  This was done on
an adhoc basis in a couple of PHY drivers, this fixes it more generally.

From NetBSD

Fixes panics with aue(4) NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.10 2004/09/26 00:59:58 brad Exp $	*/
d110 11
d129 2
a130 8
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_INTEL) {
		switch (MII_MODEL(ma->mii_id2)) {
		case MII_MODEL_INTEL_I82555:
		case MII_MODEL_INTEL_I82562EM:
		case MII_MODEL_INTEL_I82562ET:
			return (10);
		}
	}
d143 1
a143 1
	char *mstr;
d145 2
a146 15
	switch (MII_MODEL(ma->mii_id2)) {
	case MII_MODEL_INTEL_I82555:
		mstr = MII_STR_INTEL_I82555;
		break;
	case MII_MODEL_INTEL_I82562EM:
		mstr = MII_STR_INTEL_I82562EM;
		break;
	case MII_MODEL_INTEL_I82562ET:
		mstr = MII_STR_INTEL_I82562ET;
		break;
	default:
		mstr = "unknown inphy";
		break;
	}
	printf(": %s, rev. %d\n", mstr, MII_REV(ma->mii_id2));
@


1.10
log
@Restructure the PHY entry points to use a structure of
entry points instead of descrete function pointers, and
extend this to include a "reset" entry point. Make sure
any PHY-specific reset routine is always used.

From NetBSD

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.9 2004/09/20 06:05:27 brad Exp $	*/
d160 1
a160 1
	sc->mii_flags = mii->mii_flags;
@


1.9
log
@don't include sys/malloc.h, no memory management functions are used
by any of the MII drivers.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.8 2002/03/14 01:26:57 millert Exp $	*/
d106 4
d158 1
a158 2
	sc->mii_service = inphy_service;
	sc->mii_status = inphy_status;
d162 1
a162 1
	mii_phy_reset(sc);
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.7 2001/04/17 01:19:21 jason Exp $	*/
a78 1
#include <sys/malloc.h>
@


1.7
log
@add support for the 82562E[MT] phys (These are essentially 82555's will
all support for T4 gone).  There are some register definition conflicts
(SCR), but that is qualified by the presence of T4 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.6 2000/08/26 20:04:17 nate Exp $	*/
d92 2
a93 2
int	inphymatch __P((struct device *, void *, void *));
void	inphyattach __P((struct device *, struct device *, void *));
d104 2
a105 2
int	inphy_service __P((struct mii_softc *, struct mii_data *, int));
void	inphy_status __P((struct mii_softc *));
@


1.7.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.7 2001/04/17 01:19:21 jason Exp $	*/
d92 2
a93 2
int	inphymatch(struct device *, void *, void *);
void	inphyattach(struct device *, struct device *, void *);
d104 2
a105 2
int	inphy_service(struct mii_softc *, struct mii_data *, int);
void	inphy_status(struct mii_softc *);
@


1.6
log
@sync mii code with netbsd
adds detach functionality for phys
some code cleanup

Nobody really had time to test all of this out, but theo said commit anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.5 1999/12/07 22:01:30 jason Exp $	*/
d115 8
a122 3
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_INTEL &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_INTEL_I82555)
		return (10);
d135 1
d137 15
a151 2
	printf(": %s, rev. %d\n", MII_STR_INTEL_I82555,
	    MII_REV(ma->mii_id2));
d266 1
a266 1
		if (scr & SCR_T4)
@


1.5
log
@Merge with NetBSD:
o move common support functions for phy drivers from mii.c to mii_physubr.c,
	so that they are not includes if no PHY is configured
o Clean up the code that adds media a little, and make media selection
	table-driven in preparation for some other changes to be made.
o Don't add any loopback versions of media, for now.
o Add mii_down(), which is used by MAC drivers to inform PHYs that the
	interface is now down.  PHYs use this to cancel pending asynchronous
	operations.
o Add OUI for Enable Semiconductor.
o New Driver for TDK TSC78Q2120 PHY
@
text
@d1 2
a2 2
/*	$OpenBSD: inphy.c,v 1.4 1999/07/23 12:39:11 deraadt Exp $	*/
/*	$NetBSD: inphy.c,v 1.10.6.1 1999/04/23 15:39:09 perry Exp $	*/
d96 2
a97 1
	sizeof(struct mii_softc), inphymatch, inphyattach
d137 1
d139 1
a139 7

	/*
	 * i82557 wedges if all of its PHYs are isolated!
	 */
	if (strcmp(parent->dv_cfdata->cf_driver->cd_name, "fxp") == 0 &&
	    mii->mii_instance == 0)
		sc->mii_flags |= MIIF_NOISOLATE;
d146 1
a146 1
		mii_add_media(sc);
d158 3
d187 1
a187 12
		switch (IFM_SUBTYPE(ife->ifm_media)) {
		case IFM_AUTO:
			/*
			 * If we're already in auto mode, just return.
			 */
			if (PHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
				return (0);
			(void) mii_phy_auto(sc, 1);
			break;
		default:
			mii_phy_setmedia(sc);
		}
d197 1
a197 31
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 */
		reg = PHY_READ(sc, MII_BMSR) |
		    PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK)
			return (0);

		/*
		 * Only retry autonegotiation every 5 seconds.
		 */
		if (++sc->mii_ticks != 5)
			return (0);

		sc->mii_ticks = 0;
		mii_phy_reset(sc);
		if (mii_phy_auto(sc, 0) == EJUSTRETURN)
d207 1
a207 1
	inphy_status(sc);
d210 1
a210 4
	if (sc->mii_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->mii_dev.dv_parent);
		sc->mii_active = mii->mii_media_active;
	}
@


1.5.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: inphy.c,v 1.7 2001/04/17 01:19:21 jason Exp $	*/
/*	$NetBSD: inphy.c,v 1.18 2000/02/02 23:34:56 thorpej Exp $	*/
d96 1
a96 2
	sizeof(struct mii_softc), inphymatch, inphyattach, mii_phy_detach,
	    mii_phy_activate
d114 3
a116 8
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_INTEL) {
		switch (MII_MODEL(ma->mii_id2)) {
		case MII_MODEL_INTEL_I82555:
		case MII_MODEL_INTEL_I82562EM:
		case MII_MODEL_INTEL_I82562ET:
			return (10);
		}
	}
a128 1
	char *mstr;
d130 2
a131 15
	switch (MII_MODEL(ma->mii_id2)) {
	case MII_MODEL_INTEL_I82555:
		mstr = MII_STR_INTEL_I82555;
		break;
	case MII_MODEL_INTEL_I82562EM:
		mstr = MII_STR_INTEL_I82562EM;
		break;
	case MII_MODEL_INTEL_I82562ET:
		mstr = MII_STR_INTEL_I82562ET;
		break;
	default:
		mstr = "unknown inphy";
		break;
	}
	printf(": %s, rev. %d\n", mstr, MII_REV(ma->mii_id2));
a135 1
	sc->mii_status = inphy_status;
d137 7
a143 1
	sc->mii_flags = mii->mii_flags;
d150 1
a150 1
		mii_phy_add_media(sc);
a161 3
	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

d188 12
a199 1
		mii_phy_setmedia(sc);
d209 31
a239 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d249 1
a249 1
	mii_phy_status(sc);
d252 4
a255 1
	mii_phy_update(sc, cmd);
d292 1
a292 1
		if ((bmsr & BMSR_100T4) && (scr & SCR_T4))
@


1.5.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 2
a93 2
int	inphymatch(struct device *, void *, void *);
void	inphyattach(struct device *, struct device *, void *);
d104 2
a105 2
int	inphy_service(struct mii_softc *, struct mii_data *, int);
void	inphy_status(struct mii_softc *);
@


1.4
log
@do not print media information to dmesg; ifconfig shows it
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.3 1999/07/16 14:59:06 jason Exp $	*/
a91 3
#ifdef __NetBSD__
int	inphymatch __P((struct device *, struct cfdata *, void *));
#else
a92 1
#endif
a98 1
#ifdef __OpenBSD__
a101 1
#endif
a108 3
#ifdef __NetBSD__
	struct cfdata *match;
#else
a109 1
#endif
a144 9
#define	ADD(m, c)	ifmedia_add(&mii->mii_media, (m), (c), NULL)

	if ((sc->mii_flags & MIIF_NOISOLATE) == 0)
		ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->mii_inst),
		    BMCR_ISO);

	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->mii_inst),
	    BMCR_LOOP|BMCR_S100);

d150 1
a150 3
		mii_add_media(mii, sc->mii_capabilities,
		    sc->mii_inst);
#undef ADD
a196 5
		case IFM_100_T4:
			/*
			 * XXX Not supported as a manual setting right now.
			 */
			return (EINVAL);
d198 1
a198 6
			/*
			 * BMCR data is stored in the ifmedia entry.
			 */
			PHY_WRITE(sc, MII_ANAR,
			    mii_anar(ife->ifm_media));
			PHY_WRITE(sc, MII_BMCR, ife->ifm_data);
d242 4
d264 1
d301 1
a301 1
		mii->mii_media_active = mii_media_from_bmcr(bmcr);
@


1.3
log
@Sync with NetBSD:
o Implement asynchronous autonegotiation when driven by the MII tick
  (one-second clock).  Prevents .5s delays every 5 seconds when the interface
  is up but there is no link.
o Correct the sense of the PCR_FLINK100 bit in nsphy.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: inphy.c,v 1.2 1998/11/11 19:34:46 jason Exp $	*/
d168 1
a168 4
	printf("%s: ", sc->mii_dev.dv_xname);
	if ((sc->mii_capabilities & BMSR_MEDIAMASK) == 0)
		printf("no media present");
	else
a170 1
	printf("\n");
@


1.2
log
@Merge with NetBSD:
o additional phy drivers (seeq, ics, level1)
o "unknown phy" driver for unsupported phys
o collected common code into mii_physubr
o exphy isn't the only phy that doesn't have valid id registers
@
text
@d1 2
a2 2
/*	$OpenBSD: inphy.c,v 1.1 1998/09/10 17:17:33 jason Exp $	*/
/*	$NetBSD: inphy.c,v 1.10 1998/11/05 04:08:02 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d81 1
d220 1
a220 1
			(void) mii_phy_auto(sc);
d274 2
a275 1
		(void) mii_phy_auto(sc);
@


1.1
log
@OpenBSD gets sys/dev/mii layer from NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: inphy.c,v 1.3 1998/08/12 20:56:35 thorpej Exp $	*/
a90 7
struct inphy_softc {
	struct mii_softc sc_mii;		/* generic PHY */
	int sc_capabilities;
	int sc_ticks;
	int sc_active;
};

d99 1
a99 1
	sizeof(struct inphy_softc), inphymatch, inphyattach
a107 8
#define	INPHY_READ(sc, reg) \
    (*(sc)->sc_mii.mii_pdata->mii_readreg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg))

#define	INPHY_WRITE(sc, reg, val) \
    (*(sc)->sc_mii.mii_pdata->mii_writereg)((sc)->sc_mii.mii_dev.dv_parent, \
	(sc)->sc_mii.mii_phy, (reg), (val))

d109 1
a109 3
void	inphy_reset __P((struct inphy_softc *));
void	inphy_auto __P((struct inphy_softc *));
void	inphy_status __P((struct inphy_softc *));
d125 1
a125 1
		return (1);
d135 1
a135 1
	struct inphy_softc *sc = (struct inphy_softc *)self;
d142 11
a152 4
	sc->sc_mii.mii_inst = mii->mii_instance;
	sc->sc_mii.mii_phy = ma->mii_phyno;
	sc->sc_mii.mii_service = inphy_service;
	sc->sc_mii.mii_pdata = mii;
d156 5
a160 6
#if 0
	/* Can't do this on the i82557! */
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_NONE, 0, sc->sc_mii.mii_inst),
	    BMCR_ISO);
#endif
	ADD(IFM_MAKEWORD(IFM_ETHER, IFM_100_TX, IFM_LOOP, sc->sc_mii.mii_inst),
d163 1
a163 1
	inphy_reset(sc);
d165 4
a168 3
	sc->sc_capabilities = INPHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	printf("%s: ", sc->sc_mii.mii_dev.dv_xname);
	if ((sc->sc_capabilities & BMSR_MEDIAMASK) == 0)
d171 2
a172 1
		mii_add_media(mii, sc->sc_capabilities, sc->sc_mii.mii_inst);
d178 2
a179 2
inphy_service(self, mii, cmd)
	struct mii_softc *self;
d183 1
a183 1
	struct inphy_softc *sc = (struct inphy_softc *)self;
d191 1
a191 2
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst)
d200 3
a202 4
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst) {
			reg = INPHY_READ(sc, MII_BMCR);
			INPHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
d212 1
a212 1
		switch (IFM_SUBTYPE(mii->mii_media.ifm_media)) {
d217 1
a217 1
			if (INPHY_READ(sc, MII_BMCR) & BMCR_AUTOEN)
d219 1
a219 1
			inphy_auto(sc);
d230 3
a232 4
			INPHY_WRITE(sc, MII_ANAR,
			    mii_anar(mii->mii_media.ifm_media));
			INPHY_WRITE(sc, MII_BMCR,
			    mii->mii_media.ifm_cur->ifm_data);
d240 1
a240 2
		if (IFM_INST(mii->mii_media.ifm_media) !=
		    sc->sc_mii.mii_inst)
d246 1
a246 1
		if (IFM_SUBTYPE(mii->mii_media.ifm_media) != IFM_AUTO)
d260 2
a261 1
		reg = INPHY_READ(sc, MII_BMSR) | INPHY_READ(sc, MII_BMSR);
d268 1
a268 1
		if (++sc->sc_ticks != 5)
d271 3
a273 3
		sc->sc_ticks = 0;
		inphy_reset(sc);
		inphy_auto(sc);
d281 3
a283 3
	if (sc->sc_active != mii->mii_media_active || cmd == MII_MEDIACHG) {
		(*mii->mii_statchg)(sc->sc_mii.mii_dev.dv_parent);
		sc->sc_active = mii->mii_media_active;
d290 1
a290 1
	struct inphy_softc *sc;
d292 1
a292 1
	struct mii_data *mii = sc->sc_mii.mii_pdata;
d298 2
a299 1
	bmsr = INPHY_READ(sc, MII_BMSR) | INPHY_READ(sc, MII_BMSR);
d303 1
a303 1
	bmcr = INPHY_READ(sc, MII_BMCR);
d319 1
a319 1
		scr = INPHY_READ(sc, MII_INPHY_SCR);
d328 2
a329 58
	} else {
		if (bmcr & BMCR_S100)
			mii->mii_media_active |= IFM_100_TX;
		else
			mii->mii_media_active |= IFM_10_T;
		if (bmcr & BMCR_FDX)
			mii->mii_media_active |= IFM_FDX;
	}
}

void
inphy_auto(sc)
	struct inphy_softc *sc;
{
	int bmsr, i;

	INPHY_WRITE(sc, MII_ANAR,
	    BMSR_MEDIA_TO_ANAR(sc->sc_capabilities) | ANAR_CSMA);
	INPHY_WRITE(sc, MII_BMCR, BMCR_AUTOEN | BMCR_STARTNEG);

	/* Wait 500ms for it to complete. */
	for (i = 0; i < 500; i++) {
		if ((bmsr = INPHY_READ(sc, MII_BMSR)) & BMSR_ACOMP)
			return;
		delay(1000);
	}
#if 0
	if ((bmsr & BMSR_ACOMP) == 0)
		printf("%s: autonegotiation failed to complete\n",
		    sc->sc_mii.mii_dev.dv_xname);
#endif
}

void
inphy_reset(sc)
	struct inphy_softc *sc;
{
	int reg, i;

	/*
	 * The i82557 wedges if we isolate all of its PHYs!
	 */
	if (sc->sc_mii.mii_inst == 0)
		INPHY_WRITE(sc, MII_BMCR, BMCR_RESET);
	else
		INPHY_WRITE(sc, MII_BMCR, BMCR_RESET|BMCR_ISO);

	/* Wait 100ms for it to complete. */
	for (i = 0; i < 100; i++) {
		reg = INPHY_READ(sc, MII_BMCR);
		if ((reg & BMCR_RESET) == 0)
			break;
		delay(1000);
	}

	/* Make sure the PHY is isolated. */
	if (sc->sc_mii.mii_inst != 0)
		INPHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
@

