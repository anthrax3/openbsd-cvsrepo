head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.12
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.8
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.12
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.10
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.8
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	UBC:1.9.0.6
	UBC_SYNC_A:1.9
	SMP:1.9.0.4
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9;
locks; strict;
comment	@ * @;


1.17
date	2017.03.11.11.55.03;	author mpi;	state Exp;
branches;
next	1.16;
commitid	eXDj5wwfsbdFBB4L;

1.16
date	2014.01.26.17.48.08;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.09.14.22.37;	author shadchin;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.21.21.53.59;	author grange;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.10.23.43.45;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.13.14.54.44;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.07.22.42.30;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.18.18.52.31;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.26.20.22.54;	author miod;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2003.02.26.20.22.04;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.18.23.48.20;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.18.02.40.51;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.18.00.38.56;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.15.23.42.48;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.15.23.38.46;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.12.01.42.31;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.19.39.30;	author miod;	state Exp;
branches;
next	;

1.9.4.1
date	2003.03.28.14.05.52;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Introduce a new knob to force the first USB keyboard as console input.

By setting "machdep.forceukbd=1" you can now use your USB keyboard in
ddb(4) even if your BIOS emulates a pckbd(4).

ok tom@@, kettenis@@, deraadt@@
@
text
@/*	$OpenBSD: hilkbd.c,v 1.16 2014/01/26 17:48:08 miod Exp $	*/
/*
 * Copyright (c) 2003, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/kernel.h>
#include <sys/timeout.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>

#include <dev/hil/hilreg.h>
#include <dev/hil/hilvar.h>
#include <dev/hil/hildevs.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wskbdvar.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>
#ifdef WSDISPLAY_COMPAT_RAWKBD
#include <dev/wscons/wskbdraw.h>
#endif

#include <dev/hil/hilkbdmap.h>

struct hilkbd_softc {
	struct hildev_softc sc_hildev;

	int		sc_numleds;
	int		sc_ledstate;
	int		sc_enabled;
	int		sc_console;
	int		sc_lastarrow;

	struct device	*sc_wskbddev;

#ifdef WSDISPLAY_COMPAT_RAWKBD
	int		sc_rawkbd;
#endif
};

int	hilkbdprobe(struct device *, void *, void *);
void	hilkbdattach(struct device *, struct device *, void *);
int	hilkbddetach(struct device *, int);

struct cfdriver hilkbd_cd = {
	NULL, "hilkbd", DV_DULL
};

struct cfattach hilkbd_ca = {
	sizeof(struct hilkbd_softc), hilkbdprobe, hilkbdattach, hilkbddetach,
};

int	hilkbd_enable(void *, int);
void	hilkbd_set_leds(void *, int);
int	hilkbd_ioctl(void *, u_long, caddr_t, int, struct proc *);

const struct wskbd_accessops hilkbd_accessops = {
	hilkbd_enable,
	hilkbd_set_leds,
	hilkbd_ioctl,
};

void	hilkbd_cngetc(void *, u_int *, int *);
void	hilkbd_cnpollc(void *, int);
void	hilkbd_cnbell(void *, u_int, u_int, u_int);

const struct wskbd_consops hilkbd_consops = {
	hilkbd_cngetc,
	hilkbd_cnpollc,
	hilkbd_cnbell,
};

struct wskbd_mapdata hilkbd_keymapdata = {
	hilkbd_keydesctab,
#ifdef HILKBD_LAYOUT
	HILKBD_LAYOUT,
#else
	KB_US | KB_DEFAULT,
#endif
};

struct wskbd_mapdata hilkbd_keymapdata_ps2 = {
	hilkbd_keydesctab_ps2,
#ifdef HILKBD_LAYOUT
	HILKBD_LAYOUT,
#else
	KB_US | KB_DEFAULT,
#endif
};

void	hilkbd_bell(struct hil_softc *, u_int, u_int, u_int);
void	hilkbd_callback(struct hildev_softc *, u_int, u_int8_t *);
void	hilkbd_decode(struct hilkbd_softc *, u_int8_t, u_int *, int *, int);
int	hilkbd_is_console(int);

int	seen_hilkbd_console;

int
hilkbdprobe(struct device *parent, void *match, void *aux)
{
	struct hil_attach_args *ha = aux;

	if (ha->ha_type != HIL_DEVICE_KEYBOARD &&
	    ha->ha_type != HIL_DEVICE_BUTTONBOX)
		return (0);

	return (1);
}

void
hilkbdattach(struct device *parent, struct device *self, void *aux)
{
	struct hilkbd_softc *sc = (void *)self;
	struct hil_attach_args *ha = aux;
	struct wskbddev_attach_args a;
	u_int8_t layoutcode;
	int ps2;

	sc->hd_code = ha->ha_code;
	sc->hd_type = ha->ha_type;
	sc->hd_infolen = ha->ha_infolen;
	bcopy(ha->ha_info, sc->hd_info, ha->ha_infolen);
	sc->hd_fn = hilkbd_callback;

	if (ha->ha_type == HIL_DEVICE_KEYBOARD) {
		/*
		 * Determine the keyboard language configuration, but don't
		 * override a user-specified setting.
		 */
		layoutcode = ha->ha_id & (MAXHILKBDLAYOUT - 1);
#ifndef HILKBD_LAYOUT
		if (layoutcode < MAXHILKBDLAYOUT &&
		    hilkbd_layouts[layoutcode] != -1)
			hilkbd_keymapdata.layout =
			hilkbd_keymapdata_ps2.layout =
			    hilkbd_layouts[layoutcode];
#endif

		printf(", layout %x", layoutcode);
	}

	/*
	 * Interpret the identification bytes, if any
	 */
	if (ha->ha_infolen > 2 && (ha->ha_info[1] & HIL_IOB) != 0) {
		/* HILIOB_PROMPT is not always reported... */
		sc->sc_numleds = (ha->ha_info[2] & HILIOB_PMASK) >> 4;
		if (sc->sc_numleds != 0)
			printf(", %d leds", sc->sc_numleds);
	}

	printf("\n");

	/*
	 * Red lettered keyboards come in two flavours, the old one
	 * with only one control key, to the left of the escape key,
	 * and the modern one which has a PS/2 like layout, and leds.
	 *
	 * Unfortunately for us, they use the same device ID range.
	 * We'll differentiate them by looking at the leds property.
	 */
	ps2 = (sc->sc_numleds != 0);

	/* Do not consider button boxes as console devices. */
	if (ha->ha_type == HIL_DEVICE_BUTTONBOX)
		a.console = 0;
	else
		a.console = hilkbd_is_console(ha->ha_console);
	a.keymap = ps2 ? &hilkbd_keymapdata_ps2 : &hilkbd_keymapdata;
	a.accessops = &hilkbd_accessops;
	a.accesscookie = sc;

	if (a.console) {
		sc->sc_console = sc->sc_enabled = 1;
		wskbd_cnattach(&hilkbd_consops, sc, a.keymap);
	} else {
		sc->sc_console = sc->sc_enabled = 0;
	}

	sc->sc_wskbddev = config_found(self, &a, wskbddevprint);

	/*
	 * If this is an old keyboard with a numeric pad but no ``num lock''
	 * key, simulate it being pressed so that the keyboard runs in
	 * numeric mode.
	 */
	if (!ps2 && sc->sc_wskbddev != NULL) {
		wskbd_input(sc->sc_wskbddev, WSCONS_EVENT_KEY_DOWN, 80);
		wskbd_input(sc->sc_wskbddev, WSCONS_EVENT_KEY_UP, 80);
	}
}

int
hilkbddetach(struct device *self, int flags)
{
	struct hilkbd_softc *sc = (void *)self;

	/*
	 * Handle console keyboard for the best. It should have been set
	 * as the first device in the loop anyways.
	 */
	if (sc->sc_console) {
		seen_hilkbd_console = 0;
	}

	if (sc->sc_wskbddev != NULL)
		return config_detach(sc->sc_wskbddev, flags);

	return (0);
}

int
hilkbd_enable(void *v, int on)
{
	struct hilkbd_softc *sc = v;

	if (on) {
		if (sc->sc_enabled)
			return (EBUSY);
	} else {
		if (sc->sc_console)
			return (EBUSY);
	}

	sc->sc_enabled = on;

	return (0);
}

void
hilkbd_set_leds(void *v, int leds)
{
	struct hilkbd_softc *sc = v;
	int changemask;

	if (sc->sc_numleds == 0)
		return;

	changemask = leds ^ sc->sc_ledstate;
	if (changemask == 0)
		return;

	/* We do not handle more than 3 leds here */
	if (changemask & WSKBD_LED_SCROLL)
		send_hildev_cmd((struct hildev_softc *)sc,
		    (leds & WSKBD_LED_SCROLL) ? HIL_PROMPT1 : HIL_ACK1,
		    NULL, NULL);
	if (changemask & WSKBD_LED_NUM)
		send_hildev_cmd((struct hildev_softc *)sc,
		    (leds & WSKBD_LED_NUM) ? HIL_PROMPT2 : HIL_ACK2,
		    NULL, NULL);
	if (changemask & WSKBD_LED_CAPS)
		send_hildev_cmd((struct hildev_softc *)sc,
		    (leds & WSKBD_LED_CAPS) ? HIL_PROMPT3 : HIL_ACK3,
		    NULL, NULL);

	sc->sc_ledstate = leds;
}

int
hilkbd_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	struct hilkbd_softc *sc = v;

	switch (cmd) {
	case WSKBDIO_GTYPE:
		*(int *)data = WSKBD_TYPE_HIL;
		return 0;
	case WSKBDIO_SETLEDS:
		hilkbd_set_leds(v, *(int *)data);
		return 0;
	case WSKBDIO_GETLEDS:
		*(int *)data = sc->sc_ledstate;
		return 0;
#ifdef WSDISPLAY_COMPAT_RAWKBD
	case WSKBDIO_SETMODE:
		sc->sc_rawkbd = *(int *)data == WSKBD_RAW;
		return 0;
#endif
	case WSKBDIO_COMPLEXBELL:
#define	d ((struct wskbd_bell_data *)data)
		hilkbd_bell((struct hil_softc *)sc->hd_parent,
		    d->pitch, d->period, d->volume);
#undef d
		return 0;
	}

	return -1;
}

void
hilkbd_cngetc(void *v, u_int *type, int *data)
{
	struct hilkbd_softc *sc = v;
	u_int8_t c, stat;

	for (;;) {
		while (hil_poll_data((struct hildev_softc *)sc, &stat, &c) != 0)
			;

		/*
		 * Disregard keyboard data packet header.
		 * Note that no key generates it, so we're safe.
		 */
		if (c != HIL_KBDBUTTON)
			break;
	}

	hilkbd_decode(sc, c, type, data, HIL_KBDBUTTON);
}

void
hilkbd_cnpollc(void *v, int on)
{
	struct hilkbd_softc *sc = v;

	hil_set_poll((struct hil_softc *)sc->hd_parent, on);
}

void
hilkbd_cnbell(void *v, u_int pitch, u_int period, u_int volume)
{
	struct hilkbd_softc *sc = v;

	hilkbd_bell((struct hil_softc *)sc->hd_parent,
	    pitch, period, volume);
}

void
hilkbd_bell(struct hil_softc *sc, u_int pitch, u_int period, u_int volume)
{
	u_int8_t buf[2];

	/* XXX there could be at least a pitch -> HIL pitch conversion here */
#define	BELLDUR		80	/* tone duration in msec (10-2560) */
#define	BELLFREQ	8	/* tone frequency (0-63) */
	buf[0] = ar_format(period - 10);
	buf[1] = BELLFREQ;
	send_hil_cmd(sc, HIL_SETTONE, buf, 2, NULL);
}

void
hilkbd_callback(struct hildev_softc *dev, u_int buflen, u_int8_t *buf)
{
	struct hilkbd_softc *sc = (struct hilkbd_softc *)dev;
	u_int type;
	int kbdtype, key;
	int i, s;

	/*
	 * Ignore packet if we don't need it
	 */
	if (sc->sc_enabled == 0)
		return;

	if (buflen == 0)
		return;
	switch ((kbdtype = *buf & HIL_KBDDATA)) {
	case HIL_BUTTONBOX:
	case HIL_KBDBUTTON:
		break;
	default:
		return;
	}

#ifdef WSDISPLAY_COMPAT_RAWKBD
	if (sc->sc_rawkbd) {
		u_char cbuf[HILBUFSIZE * 2];
		int c, j = 0;

		for (i = 1, buf++; i < buflen; i++) {
			hilkbd_decode(sc, *buf++, &type, &key, kbdtype);
			c = hilkbd_raw[key];
			if (c == RAWKEY_Null)
				continue;
			/* fake extended scancode if necessary */
			if (c & 0x80)
				cbuf[j++] = 0xe0;
			cbuf[j] = c & 0x7f;
			if (type == WSCONS_EVENT_KEY_UP)
				cbuf[j] |= 0x80;
			j++;
		}

		s = spltty();
		wskbd_rawinput(sc->sc_wskbddev, cbuf, j);
		splx(s);
	} else
#endif
	{
		s = spltty();
		for (i = 1, buf++; i < buflen; i++) {
			hilkbd_decode(sc, *buf++, &type, &key, kbdtype);
			if (sc->sc_wskbddev != NULL)
				wskbd_input(sc->sc_wskbddev, type, key);
		}
		splx(s);
	}
}

void
hilkbd_decode(struct hilkbd_softc *sc, u_int8_t data, u_int *type, int *key,
    int kbdtype)
{
	if (kbdtype == HIL_BUTTONBOX) {
		if (data == 0x02)	/* repeat arrow */
			data = sc->sc_lastarrow;
		else if (data >= 0xf8)
			sc->sc_lastarrow = data;
	}

	*type = (data & 1) ? WSCONS_EVENT_KEY_UP : WSCONS_EVENT_KEY_DOWN;
	*key = data >> 1;
}

int
hilkbd_is_console(int hil_is_console)
{
	/* if not first hil keyboard, then not the console */
	if (seen_hilkbd_console)
		return (0);

	/* if PDC console does not match hil bus path, then not the console */
	if (hil_is_console == 0)
		return (0);

	seen_hilkbd_console = 1;
	return (1);
}
@


1.16
log
@Attempt to make user changes of keyboard layout a bit more `sticky' on wsmux
kernels:
- keyboard drivers will now tell wskbd if the keyboard layout they ask
  for is a default value, or a value they are 100% sure of (either
  because your kernel has a XXXKBD_LAYOUT option, or because the
  driver can tell the keyboard layout, e.g. by the country code on USB
  keyboards which provide it, such as Sun's)
- when attaching a keyboard with a non-default layout, the layout will
  become the default layout of the mux for new keyboard attachments if
  the mux doesn't have a layout set already.
- when changing the keyboard layout of a particular keyboard with an
  ioctl (i.e. using kbd(8) or wsconsctl(8)), the layout will become the
  default layout of the mux for new keyboard attachments.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.15 2011/11/09 14:22:37 shadchin Exp $	*/
a231 1
		wskbd_cndetach();
@


1.15
log
@Auto-repeat keys in WSKBD_RAW mode is not needed.
WSKBD_RAW mode used in X, but X independently implements auto-repeat keys.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.14 2009/01/21 21:53:59 grange Exp $	*/
d107 1
a107 1
	KB_US,
d116 1
a116 1
	KB_US,
@


1.14
log
@Replace timeout_add(msecs * hz / 1000) with timeout_add_msec(msecs).
No functional changes.

ok krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.13 2006/08/10 23:43:45 miod Exp $	*/
a66 5
	int		sc_nrep;
	char		sc_rep[HILBUFSIZE * 2];
	struct timeout	sc_rawrepeat_ch;
#define	REP_DELAY1	400
#define	REP_DELAYN	100
a123 1
void	hilkbd_rawrepeat(void *);
a192 4
#ifdef WSDISPLAY_COMPAT_RAWKBD
	timeout_set(&sc->sc_rawrepeat_ch, hilkbd_rawrepeat, sc);
#endif

a307 1
		timeout_del(&sc->sc_rawrepeat_ch);
d399 1
a399 1
		int c, j, npress;
a400 1
		npress = j = 0;
a411 6
			else {
				/* remember pressed keys for autorepeat */
				if (c & 0x80)
					sc->sc_rep[npress++] = 0xe0;
				sc->sc_rep[npress++] = c & 0x7f;
			}
a417 5
		timeout_del(&sc->sc_rawrepeat_ch);
		sc->sc_nrep = npress;
		if (npress != 0) {
			timeout_add_msec(&sc->sc_rawrepeat_ch, REP_DELAY1);
		}
a459 14

#ifdef WSDISPLAY_COMPAT_RAWKBD
void
hilkbd_rawrepeat(void *v)
{
	struct hilkbd_softc *sc = v;
	int s;

	s = spltty();
	wskbd_rawinput(sc->sc_wskbddev, sc->sc_rep, sc->sc_nrep);
	splx(s);
	timeout_add_msec(&sc->sc_rawrepeat_ch, REP_DELAYN);
}
#endif
@


1.13
log
@Handle the ``arrow repeat'' special scancode on button boxes; from the old
X11R5 server, untested.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.12 2005/05/13 14:54:44 miod Exp $	*/
d439 1
a439 2
			timeout_add(&sc->sc_rawrepeat_ch,
			    (hz * REP_DELAY1) / 1000);
d494 1
a494 1
	timeout_add(&sc->sc_rawrepeat_ch, (hz * REP_DELAYN) / 1000);
@


1.12
log
@Separate button boxens from keyboards in the HIL device list.

hilkbd will still match both, but will neither do the auto-layout dance nor
attach as console for button boxens.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.11 2005/05/07 22:42:30 miod Exp $	*/
d61 1
d127 1
a127 1
void	hilkbd_decode(u_int8_t, u_int8_t, u_int *, int *);
d346 1
a346 1
		if (c != HIL_KBDDATA)
d350 1
a350 1
	hilkbd_decode(stat, c, type, data);
d388 1
a388 1
	int key;
d397 1
a397 1
	if (buflen == 0 || *buf != HIL_KBDDATA)
d399 7
d414 1
a414 1
			hilkbd_decode(0, *buf++, &type, &key);
d447 1
a447 1
			hilkbd_decode(0, *buf++, &type, &key);
d456 2
a457 1
hilkbd_decode(u_int8_t stat, u_int8_t data, u_int *type, int *key)
d459 7
@


1.11
log
@PS/2 style and older style HIL keyboards have different layouts in their
international flavours, so provide two sets of mappings.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.10 2005/01/18 18:52:31 miod Exp $	*/
d137 2
a138 1
	if (ha->ha_type != HIL_DEVICE_KEYBOARD)
d159 6
a164 5
	/*
	 * Determine the keyboard language configuration, but don't
	 * override a user-specified setting.
	 */
	layoutcode = ha->ha_id & (MAXHILKBDLAYOUT - 1);
d166 5
a170 4
	if (layoutcode < MAXHILKBDLAYOUT &&
	    hilkbd_layouts[layoutcode] != -1)
		hilkbd_keymapdata.layout =
		    hilkbd_keymapdata_ps2.layout = hilkbd_layouts[layoutcode];
d173 2
a174 1
	printf(", layout %x", layoutcode);
d202 5
a206 1
	a.console = hilkbd_is_console(ha->ha_console);
@


1.10
log
@WSDISPLAY_COMPAT_RAWKBD support for hilkbd.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.9 2003/02/26 20:22:54 miod Exp $	*/
d115 9
d150 1
d166 2
a167 1
		hilkbd_keymapdata.layout = hilkbd_layouts[layoutcode];
d184 10
d199 1
a199 1
	a.keymap = &hilkbd_keymapdata;
d205 1
a205 1
		wskbd_cnattach(&hilkbd_consops, sc, &hilkbd_keymapdata);
d217 1
a217 1
	if (sc->sc_numleds == 0 && sc->sc_wskbddev != NULL) {
@


1.9
log
@Better support for the ps/2-style HIL keyboards (those with a real numeric
pad and a few extra keys).
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.8 2003/02/26 20:22:04 miod Exp $	*/
d33 2
d48 3
d63 9
d119 1
d173 4
d285 6
d359 1
a359 1
	int i;
d367 42
a408 1
	if (buflen > 1 && *buf == HIL_KBDDATA) {
d414 1
d439 14
@


1.9.4.1
log
@Sync SMP to 3.3, files that CVS misses due to some bug
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.8
log
@New hil child devices attachment framework, that allow them to be detached
at runtime.

Handle reconfiguration notices from the loop, and do the necessary
detach/attach work so that our vision of the loop is in sync with reality.

Adapt all hil child devices to the above changes.

"This is not as plug'n'play as usb, but you get the same feeling anyways..."
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.7 2003/02/18 23:48:20 miod Exp $	*/
d171 10
@


1.7
log
@Oops, remove debug code that was not supposed to be left here
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.6 2003/02/18 02:40:51 miod Exp $	*/
d50 1
a50 1
	struct device	sc_dev;
a51 1
	int		sc_code;
d62 1
d69 1
a69 1
	sizeof(struct hilkbd_softc), hilkbdprobe, hilkbdattach
d102 1
a102 1
void	hilkbd_callback(void *, u_int, u_int8_t *);
d106 2
d127 5
a131 1
	sc->sc_code = ha->ha_code;
a155 3
	hil_callback_register((struct hil_softc *)parent, ha->ha_code,
	    hilkbd_callback, sc);

d174 20
d226 1
a226 2
		send_hildev_cmd((struct hil_softc *)sc->sc_dev.dv_parent,
		    sc->sc_code,
d230 1
a230 2
		send_hildev_cmd((struct hil_softc *)sc->sc_dev.dv_parent,
		    sc->sc_code,
d234 1
a234 2
		send_hildev_cmd((struct hil_softc *)sc->sc_dev.dv_parent,
		    sc->sc_code,
d258 1
a258 1
		hilkbd_bell((struct hil_softc *)sc->sc_dev.dv_parent,
d274 1
a274 2
		while (hil_poll_data((struct hil_softc *)sc->sc_dev.dv_parent,
		    sc->sc_code, &stat, &c) != 0)
d293 1
a293 1
	hil_set_poll((struct hil_softc *)sc->sc_dev.dv_parent, on);
d301 1
a301 1
	hilkbd_bell((struct hil_softc *)sc->sc_dev.dv_parent,
d319 1
a319 1
hilkbd_callback(void *v, u_int buflen, u_int8_t *buf)
d321 1
a321 1
	struct hilkbd_softc *sc = v;
a350 2
	static int seen_hilkbd_console = 0;

@


1.6
log
@Real polled mode console support, enough to play hangman in ddb.
Still a minor issue left for tomorrow.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.5 2003/02/18 00:38:56 miod Exp $	*/
a142 5
	{
		int i;
		for (i = 0; i < ha->ha_infolen; i++)
			printf(" %x", ha->ha_info[i]);
	}
@


1.5
log
@Track enable state and behave appropriately.
Also, better probe for leds on keyboard.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.4 2003/02/15 23:42:48 miod Exp $	*/
d255 1
a255 1
	struct hil_softc *sc = v;
a257 1
	/* XXX This should really filter on keyboard events only */
d259 9
a267 1
		if (hil_poll_data(sc, &stat, &c) != -1)
d270 1
d277 1
a277 1
	struct hil_softc *sc = v;
d279 1
a279 1
	hil_set_poll(sc, on);
d285 1
a285 1
	struct hil_softc *sc = v;
d287 2
a288 1
	hilkbd_bell(sc, pitch, period, volume);
@


1.4
log
@Rework the console management on hppa:
- only attach a keyboard as a console if it matches the PDC keyboard path
- on hil, as there can be multiple keyboards on the loop, attach only the
  first hilkbd device configured as console keyboard. Right now this means
  the one with the lowest hil code, which was the existing behaviour so far.
- do not try to switch to the wscons consdev structure early at all in
  wscons_machdep, but rather wait for the console to be completely
  configured (i.e. both wskbd and wsdisplay are attached) to switch.

With feedback and help from mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.3 2003/02/15 23:38:46 miod Exp $	*/
d55 2
d143 5
d149 3
a151 2
		if (ha->ha_info[2] & HILIOB_PROMPT) {
			sc->sc_numleds = (ha->ha_info[2] & HILIOB_PMASK) >> 4;
a152 1
		}
d166 1
d168 2
d178 12
d302 6
@


1.3
log
@- Better type usage in the various hil code: prefer u_int8_t to u_char, but
do not stick to u_int8_t when native word size can do the job better.
- Allow send_hildev_cmd() to return the command response buffer to its
caller, rather than forcing it to look at the guts of its parent device
softc... this will be needed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.2 2003/02/12 01:42:31 miod Exp $	*/
d102 1
d153 1
a153 1
	a.console = ha->ha_flags;
d295 17
@


1.2
log
@Move values related to device identification data to hilreg.h, with better
names.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbd.c,v 1.1 2003/02/11 19:39:30 miod Exp $	*/
d120 1
a120 1
	u_int8_t db, layoutcode;
a124 6
	 * Put the keyboard in raw mode
	 */
	db = 0;
	send_hil_cmd((struct hil_softc *)parent, HIL_WRITEKBDSADR, &db, 1, NULL);

	/*
d187 2
a188 1
		    (leds & WSKBD_LED_SCROLL) ? HIL_PROMPT1 : HIL_ACK1);
d192 2
a193 1
		    (leds & WSKBD_LED_NUM) ? HIL_PROMPT2 : HIL_ACK2);
d197 2
a198 1
		    (leds & WSKBD_LED_CAPS) ? HIL_PROMPT3 : HIL_ACK3);
@


1.1
log
@Machine independent HP-HIL loop support code.

Derived from the hp300 HIL code, and some information found in XFree86
HP-UX specific parts.

However, this code does not provide an HP-UX compatible /dev/hil* interface,
but will rather attach real BSD drivers to the hil driver glue.

Currently, only a driver for the HP-HIL keyboards is provided. More to come
as resources permit.

The international layout tables for hilkbd are derived from the ite tables
found in the hp300 code, but only the US layout could be tested.

Sample dmesg output on a heavily charged hil loop:
hil0 at gsc0 offset 21000 irq 1
hilkbd0 at hil0 code 1: 109-key keyboard, layout 1b
wskbd0 at hilkbd0: console keyboard
hilkbd1 at hil0 code 2: 109-key keyboard, layout 1f
wskbd1 at hilkbd1
"ID module" at hil0 id 34 code 3 not configured
"ID module" at hil0 id 34 code 4 not configured
"Tablet" at hil0 id 94 code 5 not configured
"Mouse" at hil0 id 68 code 6 not configured

Some feedback from and ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a58 3
#define	HILKBD_LEDS	0xf0	/* keyboard has leds */
#define	HILKBD_NLEDS	0x70	/* keyboard led mask */

d144 1
a144 1
	 * Interpret the extended id information, if any
d146 3
a148 3
	if (ha->ha_infolen > 2) {
		if (ha->ha_info[2] & HILKBD_LEDS) {
			sc->sc_numleds = (ha->ha_info[2] & HILKBD_NLEDS) >> 4;
@

