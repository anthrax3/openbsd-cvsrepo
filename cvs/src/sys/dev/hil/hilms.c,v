head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.8
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.28
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.36
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.34
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.32
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.30
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.26
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.24
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.22
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.20
	OPENBSD_5_0:1.5.0.18
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.16
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.14
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.12
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	UBC:1.3.0.4
	UBC_SYNC_A:1.3
	SMP:1.3.0.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2016.06.05.20.15.54;	author bru;	state Exp;
branches;
next	1.5;
commitid	liGGvUBP6Bv7by7V;

1.5
date	2007.04.10.22.37.17;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.16.20.08.44;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.28.00.20.32;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.02.26.20.22.04;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.12.01.43.31;	author miod;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.14.05.52;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.05.13.19.34.57;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Use the new input functions of wsmouse in mouse and touchscreen drivers.

ok stsp@@ kettenis@@
@
text
@/*	$OpenBSD: hilms.c,v 1.5 2007/04/10 22:37:17 miod Exp $	*/
/*
 * Copyright (c) 2003, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>

#include <dev/hil/hilreg.h>
#include <dev/hil/hilvar.h>
#include <dev/hil/hildevs.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsmousevar.h>

struct hilms_softc {
	struct hildev_softc sc_hildev;

	int		sc_features;
	u_int		sc_buttons;
	u_int		sc_axes;
	int		sc_enabled;
	int		sc_buttonstate;

	struct device	*sc_wsmousedev;
};

int	hilmsprobe(struct device *, void *, void *);
void	hilmsattach(struct device *, struct device *, void *);
int	hilmsdetach(struct device *, int);

struct cfdriver hilms_cd = {
	NULL, "hilms", DV_DULL
};

struct cfattach hilms_ca = {
	sizeof(struct hilms_softc), hilmsprobe, hilmsattach, hilmsdetach,
};

int	hilms_enable(void *);
int	hilms_ioctl(void *, u_long, caddr_t, int, struct proc *);
void	hilms_disable(void *);

const struct wsmouse_accessops hilms_accessops = {
	hilms_enable,
	hilms_ioctl,
	hilms_disable,
};

void	hilms_callback(struct hildev_softc *, u_int, u_int8_t *);

int
hilmsprobe(struct device *parent, void *match, void *aux)
{
	struct hil_attach_args *ha = aux;

	if (ha->ha_type != HIL_DEVICE_MOUSE)
		return (0);

	/*
	 * Reject anything that has only buttons - they are handled as
	 * keyboards, really.
	 */
	if (ha->ha_infolen > 1 && (ha->ha_info[1] & HIL_AXMASK) == 0)
		return (0);

	return (1);
}

void
hilmsattach(struct device *parent, struct device *self, void *aux)
{
	struct hilms_softc *sc = (void *)self;
	struct hil_attach_args *ha = aux;
	struct wsmousedev_attach_args a;
	int iob, rx, ry;

	sc->hd_code = ha->ha_code;
	sc->hd_type = ha->ha_type;
	sc->hd_infolen = ha->ha_infolen;
	bcopy(ha->ha_info, sc->hd_info, ha->ha_infolen);
	sc->hd_fn = hilms_callback;

	/*
	 * Interpret the identification bytes, if any
	 */
	rx = ry = 0;
	if (ha->ha_infolen > 1) {
		sc->sc_features = ha->ha_info[1];
		sc->sc_axes = sc->sc_features & HIL_AXMASK;

		if (sc->sc_features & HIL_IOB) {
			/* skip resolution bytes */
			iob = 4;
			if (sc->sc_features & HIL_ABSOLUTE) {
				/* skip ranges */
				rx = ha->ha_info[4] | (ha->ha_info[5] << 8);
				if (sc->sc_axes > 1)
					ry = ha->ha_info[6] |
					    (ha->ha_info[7] << 8);
				iob += 2 * sc->sc_axes;
			}

			if (iob >= ha->ha_infolen) {
				sc->sc_features &= ~(HIL_IOB | HILIOB_PIO);
			} else {
				iob = ha->ha_info[iob];
				sc->sc_buttons = iob & HILIOB_BMASK;
				sc->sc_features |= (iob & HILIOB_PIO);
			}
		}
	}

	printf(", %d axes", sc->sc_axes);
	if (sc->sc_buttons == 1)
		printf(", 1 button");
	else if (sc->sc_buttons > 1)
		printf(", %d buttons", sc->sc_buttons);
	if (sc->sc_features & HILIOB_PIO)
		printf(", pressure sensor");
	if (sc->sc_features & HIL_ABSOLUTE) {
		printf ("\n%s: %d", self->dv_xname, rx);
		if (ry != 0)
			printf("x%d", ry);
		else
			printf(" linear");
		printf(" fixed area");
	}

	printf("\n");

	sc->sc_enabled = 0;

	a.accessops = &hilms_accessops;
	a.accesscookie = sc;

	sc->sc_wsmousedev = config_found(self, &a, wsmousedevprint);
}

int
hilmsdetach(struct device *self, int flags)
{
	struct hilms_softc *sc = (void *)self;

	if (sc->sc_wsmousedev != NULL)
		return config_detach(sc->sc_wsmousedev, flags);

	return (0);
}

int
hilms_enable(void *v)
{
	struct hilms_softc *sc = v;

	if (sc->sc_enabled)
		return EBUSY;

	sc->sc_enabled = 1;
	sc->sc_buttonstate = 0;

	return (0);
}

void
hilms_disable(void *v)
{
	struct hilms_softc *sc = v;

	sc->sc_enabled = 0;
}

int
hilms_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
#if 0
	struct hilms_softc *sc = v;
#endif

	switch (cmd) {
	case WSMOUSEIO_GTYPE:
		*(int *)data = WSMOUSE_TYPE_HIL;
		return 0;
	}

	return -1;
}

void
hilms_callback(struct hildev_softc *dev, u_int buflen, u_int8_t *buf)
{
	struct hilms_softc *sc = (struct hilms_softc *)dev;
	int type;
	int dx, dy, dz, button;
#ifdef DIAGNOSTIC
	int minlen;
#endif

	/*
	 * Ignore packet if we don't need it
	 */
	if (sc->sc_enabled == 0)
		return;

	type = *buf++;

#ifdef DIAGNOSTIC
	/*
	 * Check that the packet contains all the expected data,
	 * ignore it if too short.
	 */
	minlen = 1;
	if (type & HIL_MOUSEMOTION) {
		minlen += sc->sc_axes <<
		    (sc->sc_features & HIL_16_BITS) ? 1 : 0;
	}
	if (type & HIL_MOUSEBUTTON)
		minlen++;

	if (minlen > buflen)
		return;
#endif

	/*
	 * The packet can contain both a mouse motion and a button event.
	 * In this case, the motion data comes first.
	 */

	if (type & HIL_MOUSEMOTION) {
		if (sc->sc_features & HIL_16_BITS) {
			dx = *buf++;
			dx |= (*buf++) << 8;
			if (!(sc->sc_features & HIL_ABSOLUTE))
				dx = (int16_t)dx;
		} else {
			dx = *buf++;
			if (!(sc->sc_features & HIL_ABSOLUTE))
				dx = (int8_t)dx;
		}
		if (sc->sc_axes > 1) {
			if (sc->sc_features & HIL_16_BITS) {
				dy = *buf++;
				dy |= (*buf++) << 8;
				if (!(sc->sc_features & HIL_ABSOLUTE))
					dy = (int16_t)dy;
			} else {
				dy = *buf++;
				if (!(sc->sc_features & HIL_ABSOLUTE))
					dy = (int8_t)dy;
			}
			if (sc->sc_axes > 2) {
				if (sc->sc_features & HIL_16_BITS) {
					dz = *buf++;
					dz |= (*buf++) << 8;
					if (!(sc->sc_features & HIL_ABSOLUTE))
						dz = (int16_t)dz;
				} else {
					dz = *buf++;
					if (!(sc->sc_features & HIL_ABSOLUTE))
						dz = (int8_t)dz;
				}
			} else
				dz = 0;
		} else
			dy = dz = 0;

		/*
		 * Correct Y direction for button boxes.
		 */
		if ((sc->sc_features & HIL_ABSOLUTE) == 0 &&
		    sc->sc_buttons == 0)
			dy = -dy;
	}

	if (type & HIL_MOUSEBUTTON) {
		button = *buf;
		/*
		 * The pressure sensor is very primitive and only has
		 * a boolean behaviour, as an extra mouse button, which is
		 * down if there is pressure or the pen is near the tablet,
		 * and up if there is no pressure or the pen is far from the
		 * tablet - at least for Tablet id 0x94, P/N 46088B
		 *
		 * The corresponding codes are 0x8f and 0x8e. Convert them
		 * to a pseudo fourth button - even if the tablet never
		 * has three buttons.
		 */
		button = (button - 0x80) >> 1;
		if (button > 4)
			button = 4;

		if (*buf & 1) {
			/* Button released, or no pressure */
			sc->sc_buttonstate &= ~(1 << button);
		} else {
			/* Button pressed, or pressure */
			sc->sc_buttonstate |= (1 << button);
		}
		/* buf++; */
	}
	
	if (sc->sc_wsmousedev == NULL)
		return;

	wsmouse_buttons(sc->sc_wsmousedev, sc->sc_buttonstate);
	if (type & HIL_MOUSEMOTION) {
		if ((sc->sc_features & HIL_ABSOLUTE) == 0) {
			wsmouse_motion(sc->sc_wsmousedev, dx, dy, dz, 0);
		} else {
			wsmouse_position(sc->sc_wsmousedev, dx, dy);
			if (sc->sc_axes > 2)
				wsmouse_touch(sc->sc_wsmousedev, dz, 0);
		}
	}
	wsmouse_input_sync(sc->sc_wsmousedev);
}
@


1.5
log
@Add support for a fourth axis on wsmouse devices, e.g. on the Apple Might
Mouse.  Currently limited to USB mice.

Adapted from a diff from Gareth <garf@@loveandnature.co.za> on tech@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilms.c,v 1.4 2006/12/16 20:08:44 miod Exp $	*/
d222 1
a222 1
	int type, flags;
a258 3
		flags = sc->sc_features & HIL_ABSOLUTE ?
		    WSMOUSE_INPUT_ABSOLUTE_X | WSMOUSE_INPUT_ABSOLUTE_Y |
		    WSMOUSE_INPUT_ABSOLUTE_Z : WSMOUSE_INPUT_DELTA;
d302 1
a302 2
	} else
		dx = dy = dz = flags = 0;
d331 14
a344 3
	if (sc->sc_wsmousedev != NULL)
		wsmouse_input(sc->sc_wsmousedev,
		    sc->sc_buttonstate, dx, dy, dz, 0, flags);
@


1.4
log
@Button boxes have their Y axis inverted, compared to mice, so compensate
before feeding wscons.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilms.c,v 1.3 2003/03/28 00:20:32 miod Exp $	*/
d337 1
a337 1
		    sc->sc_buttonstate, dx, dy, dz, flags);
@


1.3
log
@Fix various gremlins in the hilms code my simple test program did not catch,
but XFree did.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilms.c,v 1.2 2003/02/26 20:22:04 miod Exp $	*/
d49 2
a50 1
	int		sc_axes;
d105 1
a105 1
	int iob, buttons, rx, ry;
d116 1
a116 1
	buttons = rx = ry = 0;
d137 1
a137 1
				buttons = iob & HILIOB_BMASK;
d144 1
a144 1
	if (buttons == 1)
d146 2
a147 2
	else if (buttons > 1)
		printf(", %d buttons", buttons);
d298 7
@


1.3.2.1
log
@Sync SMP to 3.3, files that CVS misses due to some bug
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d261 2
a262 2
		dx = *buf++;
		if (sc->sc_features & HIL_16_BITS)
d264 7
d272 2
a273 2
			dy = *buf++;
			if (sc->sc_features & HIL_16_BITS)
d275 7
d283 2
a284 2
				dz = *buf++;
				if (sc->sc_features & HIL_16_BITS)
d286 7
d317 1
a317 1
		if (*buf >> 1) {
@


1.3.2.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilms.c,v 1.3.2.1 2003/03/28 14:05:52 niklas Exp $	*/
d261 2
a262 2
		if (sc->sc_features & HIL_16_BITS) {
			dx = *buf++;
a263 7
			if (!(sc->sc_features & HIL_ABSOLUTE))
				dx = (int16_t)dx;
		} else {
			dx = *buf++;
			if (!(sc->sc_features & HIL_ABSOLUTE))
				dx = (int8_t)dx;
		}
d265 2
a266 2
			if (sc->sc_features & HIL_16_BITS) {
				dy = *buf++;
a267 7
				if (!(sc->sc_features & HIL_ABSOLUTE))
					dy = (int16_t)dy;
			} else {
				dy = *buf++;
				if (!(sc->sc_features & HIL_ABSOLUTE))
					dy = (int8_t)dy;
			}
d269 2
a270 2
				if (sc->sc_features & HIL_16_BITS) {
					dz = *buf++;
a271 7
					if (!(sc->sc_features & HIL_ABSOLUTE))
						dz = (int16_t)dz;
				} else {
					dz = *buf++;
					if (!(sc->sc_features & HIL_ABSOLUTE))
						dz = (int8_t)dz;
				}
d296 1
a296 1
		if (*buf & 1) {
@


1.2
log
@New hil child devices attachment framework, that allow them to be detached
at runtime.

Handle reconfiguration notices from the loop, and do the necessary
detach/attach work so that our vision of the loop is in sync with reality.

Adapt all hil child devices to the above changes.

"This is not as plug'n'play as usb, but you get the same feeling anyways..."
@
text
@d1 1
a1 1
/*	$OpenBSD: hilms.c,v 1.1 2003/02/12 01:43:31 miod Exp $	*/
d261 2
a262 2
		dx = *buf++;
		if (sc->sc_features & HIL_16_BITS)
d264 7
d272 2
a273 2
			dy = *buf++;
			if (sc->sc_features & HIL_16_BITS)
d275 7
d283 2
a284 2
				dz = *buf++;
				if (sc->sc_features & HIL_16_BITS)
d286 7
d317 1
a317 1
		if (*buf >> 1) {
@


1.1
log
@A simple driver for HIL mice and tablets. Most of the work being already
done by the loop, this is mostly an HIL packet decoding routine.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
	struct device	sc_dev;
d58 1
d65 1
a65 1
	sizeof(struct hilms_softc), hilmsprobe, hilmsattach
d78 1
a78 1
void	hilms_callback(void *, u_int, u_int8_t *);
d106 6
d150 1
a150 1
		printf ("\n%s: %d", sc->sc_dev.dv_xname, rx);
a157 3
	hil_callback_register((struct hil_softc *)parent, ha->ha_code,
	    hilms_callback, sc);

d169 11
d218 1
a218 1
hilms_callback(void *v, u_int buflen, u_int8_t *buf)
d220 1
a220 1
	struct hilms_softc *sc = v;
@

