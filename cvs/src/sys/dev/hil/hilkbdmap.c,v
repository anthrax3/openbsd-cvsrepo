head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.50
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.46
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.36
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.44
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.42
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.40
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.38
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.34
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.32
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.30
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.28
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC:1.3.0.6
	UBC_SYNC_A:1.3
	SMP:1.3.0.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2005.05.07.22.42.30;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.28.20.40.04;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.18.18.52.31;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.06.18.51.22;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.26.20.22.54;	author miod;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2003.02.11.22.53.42;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.19.39.30;	author miod;	state Exp;
branches;
next	;

1.3.4.1
date	2004.06.05.23.12.38;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@PS/2 style and older style HIL keyboards have different layouts in their
international flavours, so provide two sets of mappings.
@
text
@/*	$OpenBSD: hilkbdmap.c,v 1.6 2005/02/28 20:40:04 miod Exp $	*/
/*
 * Copyright (c) 2003, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>
#include <dev/hil/hilkbdmap.h>

#ifdef WSDISPLAY_COMPAT_RAWKBD
#include <dev/wscons/wskbdraw.h>

/*
 * Translate HIL keycodes to US keyboard XT scancodes, for proper
 * X11-over-wsmux operation.
 */
const u_int8_t hilkbd_raw[0x80] = {
	RAWKEY_Control_R,
	RAWKEY_Null,
	RAWKEY_Alt_R,
	RAWKEY_Alt_L,
	RAWKEY_Shift_R,
	RAWKEY_Shift_L,
	RAWKEY_Control_L,
	RAWKEY_Pause,		/* 7 Break/Reset */
	RAWKEY_KP_Left,
	RAWKEY_KP_Up,
	RAWKEY_KP_Begin,
	RAWKEY_KP_Prior,
	RAWKEY_KP_Right,
	RAWKEY_KP_Home,
	RAWKEY_KP_Delete,
	RAWKEY_KP_Enter,
	RAWKEY_KP_End,
	RAWKEY_KP_Divide,
	RAWKEY_KP_Down,
	RAWKEY_KP_Add,
	RAWKEY_KP_Next,
	RAWKEY_KP_Multiply,
	RAWKEY_KP_Insert,
	RAWKEY_KP_Subtract,
	RAWKEY_b,
	RAWKEY_v,
	RAWKEY_c,
	RAWKEY_x,
	RAWKEY_z,
	RAWKEY_Null,		/* 29 Kanji Left */
	RAWKEY_Null,		/* 30 */
	RAWKEY_Escape,
	RAWKEY_Null,
	RAWKEY_f10,
	RAWKEY_Null,
	RAWKEY_f11,
	RAWKEY_KP_Delete,
	RAWKEY_f9,
	RAWKEY_Tab,
	RAWKEY_f12,
	RAWKEY_h,
	RAWKEY_g,
	RAWKEY_f,
	RAWKEY_d,
	RAWKEY_s,
	RAWKEY_a,
	RAWKEY_Null,		/* 46 */
	RAWKEY_Caps_Lock,
	RAWKEY_u,
	RAWKEY_y,
	RAWKEY_t,
	RAWKEY_r,
	RAWKEY_e,
	RAWKEY_w,
	RAWKEY_q,
	RAWKEY_Tab,
	RAWKEY_7,
	RAWKEY_6,
	RAWKEY_5,
	RAWKEY_4,
	RAWKEY_3,
	RAWKEY_2,
	RAWKEY_1,
	RAWKEY_grave,
	RAWKEY_Null,		/* 64 */
	RAWKEY_Null,		/* 65 */
	RAWKEY_Null,		/* 66 */
	RAWKEY_Null,		/* 67 */
	RAWKEY_Null,		/* 68 */
	RAWKEY_Null,		/* 69 */
	RAWKEY_Null,		/* 70 */
	RAWKEY_Null,		/* 71 */
	RAWKEY_Print_Screen,
	RAWKEY_f4,
	RAWKEY_f3,
	RAWKEY_f2,
	RAWKEY_f1,
	RAWKEY_Null,		/* 77 */
	RAWKEY_Hold_Screen,
	RAWKEY_Return,
	RAWKEY_Num_Lock,
	RAWKEY_f5,
	RAWKEY_f6,
	RAWKEY_f7,
	RAWKEY_f8,
	RAWKEY_Null,		/* 85 */
	RAWKEY_Null,		/* 86 Clear line */
	RAWKEY_Null,		/* 87 Clear display */
	RAWKEY_8,
	RAWKEY_9,
	RAWKEY_0,
	RAWKEY_minus,
	RAWKEY_equal,
	RAWKEY_BackSpace,
	RAWKEY_Null,		/* 94 Insert line */
	RAWKEY_Null,		/* 95 Delete line */
	RAWKEY_i,
	RAWKEY_o,
	RAWKEY_p,
	RAWKEY_bracketleft,
	RAWKEY_bracketright,
	RAWKEY_backslash,
	RAWKEY_Insert,
	RAWKEY_Delete,
	RAWKEY_j,
	RAWKEY_k,
	RAWKEY_l,
	RAWKEY_semicolon,
	RAWKEY_apostrophe,
	RAWKEY_Return,
	RAWKEY_Home,
	RAWKEY_Prior,
	RAWKEY_m,
	RAWKEY_comma,
	RAWKEY_period,
	RAWKEY_slash,
	RAWKEY_Null,		/* 116 */
	RAWKEY_End,
	RAWKEY_Null,		/* 118 */
	RAWKEY_Next,
	RAWKEY_n,
	RAWKEY_space,
	RAWKEY_Null,		/* 122 */
	RAWKEY_Null,		/* 123 Kanji Right */
	RAWKEY_Left,
	RAWKEY_Down,
	RAWKEY_Up,
	RAWKEY_Right
};
#endif

#define KC(n) KS_KEYCODE(n)

/*
 * 1f. US ASCII
 *
 * We use the same table for PS/2 and old HIL keyboards, as the only
 * differences are a few keys which are only present in one of both layouts,
 * and the one-function-only keypad in the old HIL flavour (hilkbd.c knows
 * about this and does The Right Thing).
 */

static const keysym_t hilkbd_keydesc_us[] = {
/*  pos      command		normal		shifted */
    KC(0),   KS_Cmd1,		KS_Control_R,
    KC(2),   KS_Cmd2,		KS_Mode_switch,	KS_Multi_key,
    KC(3),   KS_Cmd2,		KS_Alt_L,
    KC(4),			KS_Shift_R,
    KC(5),			KS_Shift_L,
    KC(6),   KS_Cmd1,		KS_Control_L,
    KC(7),   KS_Cmd_KbdReset,			/* Break/Reset */
    KC(8),			KS_KP_Left,	KS_KP_4,
    KC(9),			KS_KP_Up,	KS_KP_8,
    KC(10),			KS_KP_Begin,	KS_KP_5,
    KC(11),			KS_KP_Prior,	KS_KP_9,
    KC(12),			KS_KP_Right,	KS_KP_6,
    KC(13),			KS_KP_Home,	KS_KP_7,
    KC(14),			KS_KP_Separator,
    KC(15),			KS_KP_Enter,
    KC(16),			KS_KP_End,	KS_KP_1,
    KC(17),			KS_KP_Divide,
    KC(18),			KS_KP_Down,	KS_KP_2,
    KC(19),			KS_KP_Add,
    KC(20),			KS_KP_Next,	KS_KP_3,
    KC(21),			KS_KP_Multiply,
    KC(22),			KS_KP_Insert,	KS_KP_0,
    KC(23),			KS_KP_Subtract,
    KC(24),			KS_b,
    KC(25),			KS_v,		KS_V,		KS_section,
    KC(26),			KS_c,		KS_C,		KS_ccedilla,
    KC(27),			KS_x,		KS_X,		KS_L2_scaron,
    KC(28),			KS_z,		KS_Z,		KS_paragraph,
    /* 29 Kanji Left */

    KC(31), KS_Cmd_Debugger,	KS_Escape,	KS_Delete,
    KC(33), KS_Cmd_Screen9,	KS_f10,		/* also KS_KP_F2 */
    KC(35), KS_Cmd_Screen10,	KS_f11,		/* also KS_KP_F3 */
    KC(36),			KS_KP_Delete,	KS_KP_Decimal,
    KC(37), KS_Cmd_Screen8,	KS_f9,		/* also KS_KP_F1 */
    KC(38),			KS_Tab,		/* numeric pad */
    KC(39), KS_Cmd_Screen11,	KS_f12,		/* also KS_KP_F4 */
    KC(40),			KS_h,		KS_H,		KS_yen,
    KC(41),			KS_g,		KS_G,		KS_currency,
    KC(42),			KS_f,
    KC(43),			KS_d,		KS_D,		KS_eth,
    KC(44),			KS_s,		KS_S,		KS_ssharp,
    KC(45),			KS_a,		KS_A,		KS_aring,
    /* 46 Mode_Switch ??? */
    KC(47),			KS_Caps_Lock,
    KC(48),			KS_u,		KS_U,		KS_dead_diaeresis,
    KC(49),			KS_y,		KS_Y,		KS_dead_circumflex,
    KC(50),			KS_t,		KS_T,		KS_dead_grave,
    KC(51),			KS_r,		KS_R,		KS_dead_acute,
    KC(52),			KS_e,		KS_E,		KS_ae,
    KC(53),			KS_w,		KS_W,		KS_asciitilde,
    KC(54),			KS_q,		KS_Q,		KS_periodcentered,
    KC(55),			KS_Tab,
    KC(56),			KS_7,		KS_ampersand,	KS_backslash,
    KC(57),			KS_6,		KS_asciicircum,	KS_asciicircum,
    KC(58),			KS_5,		KS_percent,	KS_onehalf,
    KC(59),			KS_4,		KS_dollar,
				KS_onequarter,	KS_threequarters,
    KC(60),			KS_3,		KS_numbersign,	KS_numbersign,
    KC(61),			KS_2,		KS_at,		KS_at,
    KC(62),			KS_1,		KS_exclam,	KS_exclamdown,
    KC(63),			KS_grave,	KS_asciitilde,
				KS_guillemotleft,KS_guillemotright,

    KC(72),			KS_Print_Screen, /* Menu */
    KC(73),  KS_Cmd_Screen3,	KS_f4,
    KC(74),  KS_Cmd_Screen2,	KS_f3,
    KC(75),  KS_Cmd_Screen1,	KS_f2,
    KC(76),  KS_Cmd_Screen0,	KS_f1,

    KC(78),			KS_Hold_Screen,
    KC(79),			KS_Return,	KS_Print_Screen,
    KC(80),			KS_Num_Lock,	/* System/User */
    KC(81),  KS_Cmd_Screen4,	KS_f5,
    KC(82),  KS_Cmd_Screen5,	KS_f6,
    KC(83),  KS_Cmd_Screen6,	KS_f7,
    KC(84),  KS_Cmd_Screen7,	KS_f8,

    /* 86 Clear line */
    KC(87),			KS_Clear,
    KC(88),			KS_8,		KS_asterisk,
				KS_bracketleft,	KS_braceleft,
    KC(89),			KS_9,		KS_parenleft,
				KS_bracketright,KS_braceright,
    KC(90),			KS_0,		KS_parenright,	KS_questiondown,
    KC(91),			KS_minus,	KS_underscore,	KS_macron,
    KC(92),			KS_equal,	KS_plus,	KS_plusminus,
    KC(93),  KS_Cmd_ResetEmul,	KS_Delete,	/* Backspace */
    /* 94 Insert line */
    /* 95 Delete line */
    KC(96),			KS_i,		KS_I,		KS_dead_tilde,
    KC(97),			KS_o,		KS_O,		KS_oslash,
    KC(98),			KS_p,		KS_P,		KS_thorn,
    KC(99),			KS_bracketleft,	KS_braceleft,	KS_degree,
    KC(100),			KS_bracketright,KS_braceright,
				KS_bar,		KS_brokenbar,
    KC(101),			KS_backslash,	KS_bar,		KS_mu,
    KC(102),			KS_Insert,
    KC(103),			KS_Delete,
    KC(104),			KS_j,		KS_J,		KS_dollar,
    KC(105),			KS_k,		KS_K,		KS_cent,
    KC(106),			KS_l,		KS_L,		KS_sterling,
    KC(107),			KS_semicolon,	KS_colon,
    KC(108),			KS_apostrophe,	KS_quotedbl,
				KS_grave,	KS_apostrophe,
    KC(109),			KS_Return,
    KC(110),			KS_Home,
    KC(111), KS_Cmd_ScrollBack,	KS_Prior,
    KC(112),			KS_m,		KS_M,		KS_masculine,
    KC(113),			KS_comma,	KS_less,	KS_less,
    KC(114),			KS_period,	KS_greater,	KS_greater,
    KC(115),			KS_slash,	KS_question,	KS_underscore,

    KC(117),			KS_End,		/* Select */

    KC(119), KS_Cmd_ScrollFwd,	KS_Next,
    KC(120),			KS_n,		KS_N,		KS_ordfeminine,
    KC(121),			KS_space,

    /* 123 Kanji Right */
    KC(124),			KS_Left,
    KC(125),			KS_Down,
    KC(126),			KS_Up,
    KC(127),			KS_Right,
};

/*
 * 0e. Swedish
 */

static const keysym_t hilkbd_keydesc_sv[] = {
    KC(56),	KS_7,		KS_slash,	KS_backslash,
    KC(57),	KS_6,		KS_ampersand,	KS_asciicircum,
    KC(61),	KS_2,		KS_quotedbl,	KS_at,
    KC(63),	KS_less,	KS_greater,
		KS_guillemotleft,KS_guillemotright,
    KC(88),	KS_8,		KS_parenleft,	KS_bracketleft,	KS_braceleft,
    KC(89),	KS_9,		KS_parenright,	KS_bracketright,KS_braceright,
    KC(90),	KS_0,		KS_equal,	KS_exclamdown,
    KC(91),	KS_plus,	KS_question,	KS_macron,
    KC(92),	KS_eacute,	KS_Eacute,	KS_plusminus,
    KC(97),	KS_aring,	KS_Aring,	KS_degree,
    KC(98),	KS_udiaeresis,	KS_Udiaeresis,	KS_bar,		KS_brokenbar,
    KC(99),	KS_apostrophe,	KS_asterisk,	KS_mu,
    KC(107),	KS_odiaeresis,
    KC(108),	KS_adiaeresis,	KS_Adiaeresis,	KS_grave,	KS_apostrophe,
    KC(113),	KS_comma,	KS_semicolon,	KS_less,
    KC(114),	KS_period,	KS_colon,	KS_greater,
    KC(115),	KS_minus,	KS_underscore,	KS_underscore
};

static const keysym_t hilkbd_keydesc_sv_nodead[] = {
    KC(48),	KS_u,		KS_U,		KS_diaeresis,
    KC(49),	KS_y,		KS_Y,		KS_asciicircum,
    KC(50),	KS_t,		KS_T,		KS_grave,
    KC(51),	KS_r,		KS_R,		KS_apostrophe,
    KC(96),	KS_i,		KS_I,		KS_asciitilde,
};

static const keysym_t hilkbd_keydesc_sv_ps2[] = {
    KC(24),	KS_b,
    KC(25),	KS_v,
    KC(26),	KS_c,
    KC(27),	KS_x,
    KC(28),	KS_z,
    KC(36),	KS_KP_Separator,KS_KP_Delete,
    KC(40),	KS_h,
    KC(41),	KS_g,
    KC(42),	KS_f,
    KC(43),	KS_d,
    KC(44),	KS_s,
    KC(45),	KS_a,
    KC(48),	KS_u,
    KC(49),	KS_y,
    KC(50),	KS_t,
    KC(51),	KS_r,
    KC(52),	KS_e,
    KC(53),	KS_w,
    KC(54),	KS_q,
    KC(56),	KS_7,		KS_slash,	KS_braceleft,
    KC(57),	KS_6,		KS_ampersand,
    KC(58),	KS_5,		KS_percent,
    KC(59),	KS_4,		KS_currency,	KS_dollar,
    KC(60),	KS_3,		KS_numbersign,	KS_sterling,
    KC(61),	KS_2,		KS_quotedbl,	KS_at,
    KC(62),	KS_1,		KS_exclam,
    KC(63),	KS_section,	KS_onehalf,
    KC(88),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(89),	KS_9,		KS_parenright,	KS_bracketright,
    KC(90),	KS_0,		KS_equal,	KS_braceright,
    KC(91),	KS_minus,	KS_question,	KS_backslash,
    KC(92),	KS_dead_acute,	KS_dead_grave,
    KC(96),	KS_i,
    KC(97),	KS_o,
    KC(98),	KS_p,
    KC(99),	KS_aring,
    KC(100),	KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(104),	KS_j,
    KC(105),	KS_k,
    KC(106),	KS_l,
    KC(107),	KS_odiaeresis,
    KC(108),	KS_adiaeresis,
    KC(112),	KS_m,
    KC(113),	KS_comma,	KS_semicolon,
    KC(114),	KS_period,	KS_colon,
    KC(115),	KS_minus,	KS_underscore,
    KC(116),	KS_apostrophe,	KS_asterisk,
    KC(118),	KS_less,	KS_greater,	KS_bar,
    KC(120),	KS_n
};

static const keysym_t hilkbd_keydesc_sv_ps2_nodead[] = {
    KC(92),	KS_apostrophe,	KS_grave,
    KC(100),	KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

/*
 * 0f. German
 */

static const keysym_t hilkbd_keydesc_de[] = {
    KC(28),	KS_y,		KS_Y,		KS_paragraph,
    KC(49),	KS_z,		KS_Z,		KS_dead_circumflex,
    KC(56),	KS_7,		KS_slash,	KS_backslash,
    KC(57),	KS_6,		KS_ampersand,	KS_asciicircum,
    KC(60),	KS_3,		KS_section,	KS_numbersign,
    KC(61),	KS_2,		KS_quotedbl,	KS_at,
    KC(63),	KS_less,	KS_greater,
		KS_guillemotleft,KS_guillemotright,
    KC(88),	KS_8,		KS_parenleft,
		KS_bracketleft,	KS_braceleft,
    KC(89),	KS_9,		KS_parenright,
		KS_bracketright,KS_braceright,
    KC(90),	KS_0,		KS_equal,	KS_exclamdown,
    KC(91),	KS_ssharp,	KS_question,	KS_macron,
    KC(92),	KS_dead_acute,	KS_dead_grave,	KS_plusminus,
    KC(99),	KS_udiaeresis,	KS_Udiaeresis,	KS_dead_abovering,
    KC(100),	KS_plus,	KS_asterisk,	KS_bar,		KS_brokenbar,
    KC(101),	KS_sterling,	KS_dead_circumflex,KS_mu,
    KC(107),	KS_odiaeresis,
    KC(108),	KS_adiaeresis,	KS_Adiaeresis,	KS_grave,	KS_apostrophe,
    KC(113),	KS_comma,	KS_semicolon,	KS_less,
    KC(114),	KS_period,	KS_colon,	KS_greater,
    KC(115),	KS_minus,	KS_underscore,	KS_underscore
};

static const keysym_t hilkbd_keydesc_de_nodead[] = {
    KC(48),	KS_u,		KS_U,		KS_diaeresis,
    KC(49),	KS_z,		KS_Z,		KS_asciicircum,
    KC(50),	KS_t,		KS_T,		KS_grave,
    KC(51),	KS_r,		KS_R,		KS_apostrophe,
    KC(92),	KS_apostrophe,	KS_grave,	KS_plusminus,
    KC(99),	KS_udiaeresis,	KS_Udiaeresis,	KS_degree,
    KC(101),	KS_sterling,	KS_asciicircum,	KS_mu,
    KC(96),	KS_i,		KS_I,		KS_asciitilde
};

static const keysym_t hilkbd_keydesc_de_ps2[] = {
    KC(24),	KS_b,
    KC(25),	KS_v,
    KC(26),	KS_c,
    KC(27),	KS_x,
    KC(28),	KS_y,
    KC(36),	KS_KP_Separator,KS_KP_Delete,
    KC(40),	KS_h,
    KC(41),	KS_g,
    KC(42),	KS_f,
    KC(43),	KS_d,
    KC(44),	KS_s,
    KC(45),	KS_a,
    KC(48),	KS_u,
    KC(49),	KS_z,		KS_Z,		KS_dead_circumflex,
    KC(50),	KS_t,
    KC(51),	KS_r,
    KC(52),	KS_e,
    KC(53),	KS_w,
    KC(54),	KS_q,		KS_Q,		KS_at,
    KC(56),	KS_7,		KS_slash,	KS_braceleft,
    KC(57),	KS_6,		KS_ampersand,
    KC(58),	KS_5,		KS_percent,
    KC(59),	KS_4,		KS_dollar,
    KC(60),	KS_3,		KS_section,	KS_threesuperior,
    KC(61),	KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(62),	KS_1,		KS_exclam,
    KC(63),	KS_dead_circumflex,	KS_dead_abovering,
    KC(88),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(89),	KS_9,		KS_parenright,	KS_bracketright,
    KC(90),	KS_0,		KS_equal,	KS_braceright,
    KC(91),	KS_ssharp,	KS_question,	KS_backslash,
    KC(92),	KS_dead_acute,	KS_dead_grave,
    KC(96),	KS_i,
    KC(97),	KS_o,
    KC(98),	KS_p,
    KC(99),	KS_udiaeresis,
    KC(100),	KS_plus,	KS_asterisk,	KS_dead_tilde,
    KC(104),	KS_j,
    KC(105),	KS_k,
    KC(106),	KS_l,
    KC(107),	KS_odiaeresis,
    KC(108),	KS_adiaeresis,
    KC(112),	KS_m,		KS_M,		KS_mu,
    KC(113),	KS_comma,	KS_semicolon,
    KC(114),	KS_period,	KS_colon,
    KC(115),	KS_minus,	KS_underscore,
    KC(116),	KS_numbersign,	KS_apostrophe,
    KC(118),	KS_less,	KS_greater, 	KS_bar,
    KC(120),	KS_n
};

static const keysym_t hilkbd_keydesc_de_ps2_nodead[] = {
    KC(49),	KS_z,		KS_Z,		KS_asciicircum,
    KC(63),	KS_asciicircum,	KS_degree,
    KC(92),	KS_apostrophe,	KS_grave,
    KC(100),	KS_plus,	KS_asterisk,	KS_asciitilde
};

/*
 * 17. English
 */

static const keysym_t hilkbd_keydesc_uk[] = {
    KC(56),	KS_7,		KS_asciicircum,	KS_backslash,
    KC(57),	KS_6,		KS_ampersand,	KS_asciicircum,
    KC(60),	KS_3,		KS_sterling,	KS_numbersign,
    KC(61),	KS_2,		KS_quotedbl,	KS_at,
    KC(88),	KS_8,		KS_parenleft,	KS_bracketleft,	KS_braceleft,
    KC(89),	KS_9,		KS_parenright,	KS_bracketright,KS_braceright,
    KC(90),	KS_0,		KS_equal,	KS_questiondown,
    KC(91),	KS_plus,	KS_question,	KS_macron,
    KC(92),	KS_apostrophe,	KS_slash,	KS_plusminus,
    KC(101),	KS_less,	KS_greater,	KS_mu,
    KC(107),	KS_asterisk,	KS_at,
    KC(108),	KS_backslash,	KS_bar,		KS_grave,	KS_apostrophe,
    KC(113),	KS_comma,	KS_semicolon,	KS_less,
    KC(114),	KS_period,	KS_colon,	KS_greater,
    KC(115),	KS_minus,	KS_underscore,	KS_underscore
};

static const keysym_t hilkbd_keydesc_uk_ps2[] = {
    KC(24),	KS_b,
    KC(25),	KS_v,
    KC(26),	KS_c,
    KC(27),	KS_x,
    KC(28),	KS_z,
    KC(40),	KS_h,
    KC(41),	KS_g,
    KC(42),	KS_f,
    KC(43),	KS_d,
    KC(44),	KS_s,
    KC(45),	KS_a,
    KC(48),	KS_u,
    KC(49),	KS_y,
    KC(50),	KS_t,
    KC(51),	KS_r,
    KC(52),	KS_e,
    KC(53),	KS_w,
    KC(54),	KS_q,
    KC(56),	KS_7,		KS_ampersand,
    KC(57),	KS_6,		KS_asciicircum,
    KC(58),	KS_5,		KS_percent,
    KC(59),	KS_4,		KS_dollar,
    KC(60),	KS_3,		KS_sterling,
    KC(61),	KS_2,		KS_quotedbl,
    KC(62),	KS_1,		KS_exclam,
    KC(63),	KS_grave,	KS_notsign,	KS_bar,
    KC(88),	KS_8,		KS_asterisk,
    KC(89),	KS_9,		KS_parenleft,
    KC(90),	KS_0,		KS_parenright,
    KC(91),	KS_minus,	KS_underscore,
    KC(92),	KS_equal,	KS_plus,
    KC(96),	KS_i,
    KC(97),	KS_o,
    KC(98),	KS_p,
    KC(99),	KS_bracketleft,	KS_braceleft,
    KC(100),	KS_bracketright,KS_braceright,
    KC(104),	KS_j,
    KC(105),	KS_k,
    KC(106),	KS_l,
    KC(107),	KS_semicolon,	KS_colon,
    KC(108),	KS_apostrophe,	KS_at,
    KC(112),	KS_m,
    KC(113),	KS_comma,	KS_less,
    KC(114),	KS_period,	KS_greater,
    KC(115),	KS_slash,	KS_question,
    KC(116),	KS_numbersign,	KS_asciitilde,
    KC(118),	KS_backslash,	KS_brokenbar,
    KC(120),	KS_n
};

/*
 * 1b. French
 */

static const keysym_t hilkbd_keydesc_fr[] = {
    KC(28),	KS_w,		KS_W,		KS_paragraph,
    KC(45),	KS_q,		KS_Q,		KS_aring,
    KC(53),	KS_z,		KS_Z,		KS_asciitilde,
    KC(54),	KS_a,		KS_A,		KS_periodcentered,
    KC(56),	KS_egrave,	KS_7,		KS_backslash,
    KC(57),	KS_section,	KS_6,		KS_asciicircum,
    KC(58),	KS_parenleft,	KS_5,		KS_onehalf,
    KC(59),	KS_apostrophe,	KS_4,		KS_onequarter,	KS_threequarters,
    KC(60),	KS_quotedbl,	KS_3,		KS_numbersign,
    KC(61),	KS_eacute,	KS_2,		KS_at,
    KC(62),	KS_ampersand,	KS_1,		KS_exclamdown,
    KC(63),	KS_dollar,	KS_sterling,
		KS_guillemotleft,KS_guillemotright,
    KC(88),	KS_exclam,	KS_8,		KS_bracketleft,	KS_braceleft,
    KC(89),	KS_ccedilla,	KS_9,		KS_bracketright,KS_braceright,
    KC(90),	KS_agrave,	KS_0,		KS_questiondown,
    KC(91),	KS_parenright,	KS_degree,	KS_macron,
    KC(92),	KS_minus,	KS_underscore,	KS_plusminus,
    KC(99),	KS_dead_circumflex, KS_dead_diaeresis,	KS_dead_abovering,
    KC(100),	KS_grave,	KS_asterisk,	KS_bar,		KS_brokenbar,
    KC(101),	KS_less,	KS_greater,	KS_mu,
    KC(107),	KS_m,
    KC(108),	KS_ugrave,	KS_percent,	KS_grave,	KS_apostrophe,
    KC(112),	KS_comma,	KS_question,	KS_masculine,
    KC(113),	KS_semicolon,	KS_period,	KS_less,
    KC(114),	KS_colon,	KS_slash,	KS_greater,
    KC(115),	KS_equal,	KS_plus,	KS_underscore
};

static const keysym_t hilkbd_keydesc_fr_ps2[] = {
    KC(24),	KS_b,
    KC(25),	KS_v,
    KC(26),	KS_c,
    KC(27),	KS_x,
    KC(28),	KS_w,
    KC(40),	KS_h,
    KC(41),	KS_g,
    KC(42),	KS_f,
    KC(43),	KS_d,
    KC(44),	KS_s,
    KC(45),	KS_q,
    KC(48),	KS_u,
    KC(49),	KS_y,
    KC(50),	KS_t,
    KC(51),	KS_r,
    KC(52),	KS_e,
    KC(53),	KS_z,
    KC(54),	KS_a,
    KC(56),	KS_egrave,	KS_7,		KS_grave,
    KC(57),	KS_minus,	KS_6,		KS_bar,
    KC(58),	KS_parenleft,	KS_5,		KS_bracketleft,
    KC(59),	KS_apostrophe,	KS_4,		KS_braceleft,
    KC(60),	KS_quotedbl,	KS_3,		KS_numbersign,
    KC(61),	KS_eacute,	KS_2,		KS_asciitilde,
    KC(62),	KS_ampersand,	KS_1,
    KC(63),	KS_twosuperior,
    KC(88),	KS_underscore,	KS_8,		KS_backslash,
    KC(89),	KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(90),	KS_agrave,	KS_0,		KS_at,
    KC(91),	KS_parenright,	KS_degree,	KS_bracketright,
    KC(92),	KS_equal,	KS_plus,	KS_braceright,
    KC(96),	KS_i,
    KC(97),	KS_o,
    KC(98),	KS_p,
    KC(99),	KS_dead_circumflex,KS_dead_diaeresis,
    KC(100),	KS_dollar,	KS_sterling,	KS_currency,
    KC(104),	KS_j,
    KC(105),	KS_k,
    KC(106),	KS_l,
    KC(107),	KS_m,
    KC(108),	KS_ugrave,	KS_percent,
    KC(112),	KS_comma,	KS_question,
    KC(113),	KS_semicolon,	KS_period,
    KC(114),	KS_colon,	KS_slash,
    KC(115),	KS_exclam,	KS_section,
    KC(116),	KS_asterisk,	KS_mu,
    KC(118),	KS_less,	KS_greater,
		KS_guillemotleft,KS_guillemotright,
    KC(120),	KS_n
};

#define KBD_MAP(name, base, map) \
			{ name, base, sizeof(map)/sizeof(keysym_t), map }

const struct wscons_keydesc hilkbd_keydesctab[] = {
	KBD_MAP(KB_US,			0,	hilkbd_keydesc_us),
	KBD_MAP(KB_DE,			KB_US,	hilkbd_keydesc_de),
	KBD_MAP(KB_DE | KB_NODEAD,	KB_DE,	hilkbd_keydesc_de_nodead),
	KBD_MAP(KB_FR,			KB_US,	hilkbd_keydesc_fr),
	KBD_MAP(KB_UK,			KB_US,	hilkbd_keydesc_uk),
	KBD_MAP(KB_SV,			KB_US,	hilkbd_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	hilkbd_keydesc_sv_nodead),
	{0, 0, 0, 0},
};

const struct wscons_keydesc hilkbd_keydesctab_ps2[] = {
	KBD_MAP(KB_US,			0,	hilkbd_keydesc_us),
	KBD_MAP(KB_DE,			KB_US,	hilkbd_keydesc_de_ps2),
	KBD_MAP(KB_DE | KB_NODEAD,	KB_DE,	hilkbd_keydesc_de_ps2_nodead),
	KBD_MAP(KB_FR,			KB_US,	hilkbd_keydesc_fr_ps2),
	KBD_MAP(KB_UK,			KB_US,	hilkbd_keydesc_uk_ps2),
	KBD_MAP(KB_SV,			KB_US,	hilkbd_keydesc_sv_ps2),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	hilkbd_keydesc_sv_ps2_nodead),
	{0, 0, 0, 0},
};

/*
 * Keyboard ID to layout table
 */
const kbd_t hilkbd_layouts[MAXHILKBDLAYOUT] = {
	-1,	/* 00 Undefined or custom layout */
	-1,	/* 01 Undefined */
	-1,	/* 02 Japanese */
	-1,	/* 03 Swiss french */
	-1,	/* 04 Portuguese */
	-1,	/* 05 Arabic */
	-1,	/* 06 Hebrew */
	-1,	/* 07 Canadian English */
	-1,	/* 08 Turkish */
	-1,	/* 09 Greek */
	-1,	/* 0a Thai */
	-1,	/* 0b Italian */
	-1,	/* 0c Korean */
	-1,	/* 0d Dutch */
	KB_SV,	/* 0e Swedish */
	KB_DE,	/* 0f German */
	-1,	/* 10 Simplified Chinese */
	-1,	/* 11 Traditional Chinese */
	-1,	/* 12 Swiss French 2 */
	-1,	/* 13 Euro Spanish */
	-1,	/* 14 Swiss German 2 */
	-1,	/* 15 Belgian */
	-1,	/* 16 Finnish */
	KB_UK,	/* 17 UK English */
	-1,	/* 18 Canadian French */
	-1,	/* 19 Swiss German */
	-1,	/* 1a Norwegian */
	KB_FR,	/* 1b French */
	-1,	/* 1c Danish */
	-1,	/* 1d Katakana */
	-1,	/* 1e Latin Spanish */
	KB_US,	/* 1f US ASCII */
};
@


1.6
log
@Fix confusion between KS_paragraph and KS_section; inspired from a PS/2
keyboard sv map error spotted by Jan Johansson.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbdmap.c,v 1.5 2005/01/18 18:52:31 miod Exp $	*/
d49 1
a49 1
	RAWKEY_Null,		/* 7 Break/Reset */
d56 1
a56 1
	RAWKEY_comma,		/* numeric pad */
d177 5
d184 1
a184 1
const keysym_t hilkbd_keydesc_us[] = {
d186 2
a187 2
    KC(0),			KS_Control_R,
    KC(2),   KS_Cmd2,		KS_Alt_R,	KS_Multi_key,
d199 1
a199 1
    KC(14),			KS_comma,	/* numeric pad */
d210 4
a213 4
    KC(25),			KS_v,
    KC(26),			KS_c,
    KC(27),			KS_x,
    KC(28),			KS_z,
d223 2
a224 2
    KC(40),			KS_h,
    KC(41),			KS_g,
d226 3
a228 3
    KC(43),			KS_d,
    KC(44),			KS_s,
    KC(45),			KS_a,
d231 7
a237 7
    KC(48),			KS_u,
    KC(49),			KS_y,
    KC(50),			KS_t,
    KC(51),			KS_r,
    KC(52),			KS_e,
    KC(53),			KS_w,
    KC(54),			KS_q,
d239 3
a241 3
    KC(56),			KS_7,		KS_ampersand,
    KC(57),			KS_6,		KS_asciicircum,
    KC(58),			KS_5,		KS_percent,
d243 4
a246 3
    KC(60),			KS_3,		KS_numbersign,
    KC(61),			KS_2,		KS_at,
    KC(62),			KS_1,		KS_exclam,
d248 1
d265 1
a265 1
    /* 87 Clear display */
d267 1
d269 4
a272 3
    KC(90),			KS_0,		KS_parenright,
    KC(91),			KS_minus,	KS_underscore,
    KC(92),			KS_equal,	KS_plus,
d276 4
a279 4
    KC(96),			KS_i,
    KC(97),			KS_o,
    KC(98),			KS_p,
    KC(99),			KS_bracketleft,	KS_braceleft,
d281 2
a282 1
    KC(101),			KS_backslash,	KS_bar,
d285 3
a287 3
    KC(104),			KS_j,
    KC(105),			KS_k,
    KC(106),			KS_l,
d290 1
d294 4
a297 4
    KC(112),			KS_m,
    KC(113),			KS_comma,	KS_less,
    KC(114),			KS_period,	KS_greater,
    KC(115),			KS_slash,	KS_question,
d302 1
a302 1
    KC(120),			KS_n,
d316 84
a399 18
const keysym_t hilkbd_keydesc_sv[] = {
    KC(56),			KS_7,		KS_slash,
    KC(57),			KS_6,		KS_ampersand,
    KC(61),			KS_2,		KS_quotedbl,
    KC(63),			KS_less,	KS_greater,
    KC(88),			KS_8,		KS_parenleft,
    KC(89),			KS_9,		KS_parenright,
    KC(90),			KS_0,		KS_equal,
    KC(91),			KS_plus,	KS_question,
    KC(92),			KS_grave,	KS_at,
    KC(99),			KS_braceright,	KS_bracketright,
    KC(100),			KS_asciitilde,	KS_asciicircum,
    KC(101),			KS_apostrophe,	KS_asterisk,
    KC(107),			KS_bar,		KS_backslash,
    KC(108),			KS_braceleft,	KS_bracketleft,
    KC(113),			KS_comma,	KS_semicolon,
    KC(114),			KS_period,	KS_colon,
    KC(115),			KS_minus,	KS_underscore,
d406 94
a499 40
const keysym_t hilkbd_keydesc_de[] = {
    KC(2),   KS_Mode_switch,			KS_Multi_key,
    KC(28),		KS_y,
    KC(49),		KS_z,
    KC(54),		KS_q,		KS_Q,		KS_at,
    KC(56),		KS_7,		KS_slash,	KS_braceleft,
    KC(57),		KS_6,		KS_ampersand,
    KC(58),		KS_5,		KS_percent,
    KC(59),		KS_4,		KS_dollar,
    KC(60),		KS_3,		KS_section,	KS_threesuperior,
    KC(61),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(62),		KS_1,		KS_exclam,
    KC(63),		KS_dead_circumflex,	KS_dead_abovering,
    KC(88),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(89),		KS_9,		KS_parenright,	KS_bracketright,
    KC(90),		KS_0,		KS_equal,	KS_braceright,
    KC(91),		KS_ssharp,	KS_question,	KS_backslash,
    KC(92),		KS_dead_acute,	KS_dead_grave,
    KC(99),		KS_udiaeresis,
    KC(100),		KS_plus,	KS_asterisk,	KS_dead_tilde,
#if 0
    KC(101),		KS_sterling,	KS_dead_abovering,
#endif
    KC(107),		KS_odiaeresis,
    KC(108),		KS_adiaeresis,
    KC(112),		KS_m,		KS_M,		KS_mu,
    KC(113),		KS_comma,	KS_semicolon,
    KC(114),		KS_period,	KS_colon,
    KC(115),		KS_minus,	KS_underscore,
    KC(116),		KS_numbersign,	KS_apostrophe,
    KC(118),		KS_less,	KS_greater, 	KS_bar,	KS_brokenbar,
};

const keysym_t hilkbd_keydesc_de_nodead[] = {
    KC(63),		KS_asciicircum,	KS_degree,
    KC(92),		KS_apostrophe,	KS_grave,
    KC(100),		KS_plus,	KS_asterisk,	KS_asciitilde,
#if 0
    KC(101),		KS_sterling,	KS_degree,
#endif
d506 67
a572 16
const keysym_t hilkbd_keydesc_uk[] = {
    KC(56),			KS_7,		KS_asciicircum,
    KC(57),			KS_6,		KS_ampersand,
    KC(61),			KS_2,		KS_quotedbl,
    KC(88),			KS_8,		KS_parenleft,
    KC(89),			KS_9,		KS_parenright,
    KC(90),			KS_0,		KS_equal,
    KC(91),			KS_plus,	KS_question,
    KC(92),			KS_apostrophe,	KS_slash,
    KC(101),			KS_less,	KS_greater,
    KC(107),			KS_asterisk,	KS_at,
    KC(108),			KS_backslash,	KS_bar,
    KC(113),			KS_comma,	KS_semicolon,
    KC(114),			KS_period,	KS_colon,
    KC(115),			KS_slash,	KS_underscore,
    KC(115),			KS_minus,	KS_question,
d579 80
a658 27
const keysym_t hilkbd_keydesc_fr[] = {
    KC(28),			KS_w,
    KC(45),			KS_q,
    KC(53),			KS_z,
    KC(54),			KS_a,
    KC(56),			KS_egrave,	KS_7,
    KC(57),			KS_section,	KS_6,
    KC(58),			KS_parenleft,	KS_5,
    KC(59),			KS_apostrophe,	KS_4,
    KC(60),			KS_quotedbl,	KS_3,
    KC(61),			KS_eacute,	KS_2,
    KC(62),			KS_ampersand,	KS_1,
    KC(63),			KS_dollar,	KS_sterling,
    KC(88),			KS_exclam,	KS_8,
    KC(89),			KS_ccedilla,	KS_9,
    KC(90),			KS_agrave,	KS_0,
    KC(91),			KS_parenright,	KS_degree,
    KC(92),			KS_minus,	KS_underscore,
    KC(99),			KS_dead_circumflex, KS_dead_diaeresis,
    KC(100),			KS_grave,	KS_asterisk,
    KC(101),			KS_less,	KS_greater,
    KC(107),			KS_m,
    KC(108),			KS_ugrave,	KS_percent,
    KC(112),			KS_comma,	KS_question,
    KC(113),			KS_semicolon,	KS_period,
    KC(114),			KS_colon,	KS_slash,
    KC(115),			KS_equal,	KS_plus,
d671 12
@


1.5
log
@WSDISPLAY_COMPAT_RAWKBD support for hilkbd.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbdmap.c,v 1.4 2004/04/06 18:51:22 miod Exp $	*/
d338 1
a338 1
    KC(60),		KS_3,		KS_paragraph,	KS_threesuperior,
d403 1
a403 1
    KC(57),			KS_paragraph,	KS_6,
@


1.4
log
@Hil keyboard layout for german keyboards, at least suitable for the PS/2-like
layout.

Based upon an old diff from paul@@, tests and feedback otto@@ paul@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbdmap.c,v 1.3 2003/02/26 20:22:54 miod Exp $	*/
d34 139
d209 1
d224 1
a224 1

a282 1

d294 1
d450 1
a450 1
	-1,	/* 07 Canada English */
d463 1
a463 1
	-1,	/* 14 Swiss German 2*/
d467 1
a467 1
	-1,	/* 18 Canada French */
@


1.3
log
@Better support for the ps/2-style HIL keyboards (those with a real numeric
pad and a few extra keys).
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbdmap.c,v 1.2 2003/02/11 22:53:42 miod Exp $	*/
d71 1
a71 1
    KC(31),  KS_Cmd_Debugger,	KS_Escape,	KS_Delete,
d186 46
d291 2
d318 1
a318 1
	-1,	/* 0f German */
@


1.3.4.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d71 1
a71 1
    KC(31), KS_Cmd_Debugger,	KS_Escape,	KS_Delete,
a185 46
 * 0f. German
 */

const keysym_t hilkbd_keydesc_de[] = {
    KC(2),   KS_Mode_switch,			KS_Multi_key,
    KC(28),		KS_y,
    KC(49),		KS_z,
    KC(54),		KS_q,		KS_Q,		KS_at,
    KC(56),		KS_7,		KS_slash,	KS_braceleft,
    KC(57),		KS_6,		KS_ampersand,
    KC(58),		KS_5,		KS_percent,
    KC(59),		KS_4,		KS_dollar,
    KC(60),		KS_3,		KS_paragraph,	KS_threesuperior,
    KC(61),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(62),		KS_1,		KS_exclam,
    KC(63),		KS_dead_circumflex,	KS_dead_abovering,
    KC(88),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(89),		KS_9,		KS_parenright,	KS_bracketright,
    KC(90),		KS_0,		KS_equal,	KS_braceright,
    KC(91),		KS_ssharp,	KS_question,	KS_backslash,
    KC(92),		KS_dead_acute,	KS_dead_grave,
    KC(99),		KS_udiaeresis,
    KC(100),		KS_plus,	KS_asterisk,	KS_dead_tilde,
#if 0
    KC(101),		KS_sterling,	KS_dead_abovering,
#endif
    KC(107),		KS_odiaeresis,
    KC(108),		KS_adiaeresis,
    KC(112),		KS_m,		KS_M,		KS_mu,
    KC(113),		KS_comma,	KS_semicolon,
    KC(114),		KS_period,	KS_colon,
    KC(115),		KS_minus,	KS_underscore,
    KC(116),		KS_numbersign,	KS_apostrophe,
    KC(118),		KS_less,	KS_greater, 	KS_bar,	KS_brokenbar,
};

const keysym_t hilkbd_keydesc_de_nodead[] = {
    KC(63),		KS_asciicircum,	KS_degree,
    KC(92),		KS_apostrophe,	KS_grave,
    KC(100),		KS_plus,	KS_asterisk,	KS_asciitilde,
#if 0
    KC(101),		KS_sterling,	KS_degree,
#endif
};

/*
a244 2
	KBD_MAP(KB_DE,			KB_US,	hilkbd_keydesc_de),
	KBD_MAP(KB_DE | KB_NODEAD,	KB_DE,	hilkbd_keydesc_de_nodead),
d270 1
a270 1
	KB_DE,	/* 0f German */
@


1.2
log
@I found a french HIL keyboard in a closet, so add a simple french layout.
Nobody will want to use such a keyboard anyways, as there is no ~ (tilde)
key on it.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilkbdmap.c,v 1.1 2003/02/11 19:39:30 miod Exp $	*/
d42 1
d48 7
a54 7
    KC(7),   KS_Cmd_KbdReset,	/* Break/Reset */
    KC(8),			KS_KP_4,
    KC(9),			KS_KP_8,
    KC(10),			KS_KP_5,
    KC(11),			KS_KP_9,
    KC(12),			KS_KP_6,
    KC(13),			KS_KP_7,
d57 1
a57 1
    KC(16),			KS_KP_1,
d59 1
a59 1
    KC(18),			KS_KP_2,
d61 1
a61 1
    KC(20),			KS_KP_3,
d63 1
a63 1
    KC(22),			KS_KP_0,
d71 5
a75 5
    KC(31),  KS_Cmd_Debugger,	KS_Escape,
    /* 33 numeric pad unlabeled key #2 */
    /* 35 numeric pad unlabeled key #3 */
    KC(36),			KS_KP_Decimal,
    /* 37 numeric pad unlabeled key #1 */
d77 1
a77 1
    /* 39 numeric pad unlabeled key #4 */
d103 1
a103 1
    /* 72 Menu */
d109 1
a109 1
    /* 78 Stop */
d111 1
a111 1
    /* 80 System/User */
d113 1
a113 1
    KC(82),  KS_Cmd_Screen7,	KS_f8,
d115 1
a115 1
    KC(84),  KS_Cmd_Screen5,	KS_f6,
d124 1
a124 1
    KC(93),  KS_Cmd_ResetEmul,	KS_Delete, /* Backspace */
d149 1
a149 1
    /* 117 Select */
@


1.1
log
@Machine independent HP-HIL loop support code.

Derived from the hp300 HIL code, and some information found in XFree86
HP-UX specific parts.

However, this code does not provide an HP-UX compatible /dev/hil* interface,
but will rather attach real BSD drivers to the hil driver glue.

Currently, only a driver for the HP-HIL keyboards is provided. More to come
as resources permit.

The international layout tables for hilkbd are derived from the ite tables
found in the hp300 code, but only the US layout could be tested.

Sample dmesg output on a heavily charged hil loop:
hil0 at gsc0 offset 21000 irq 1
hilkbd0 at hil0 code 1: 109-key keyboard, layout 1b
wskbd0 at hilkbd0: console keyboard
hilkbd1 at hil0 code 2: 109-key keyboard, layout 1f
wskbd1 at hilkbd1
"ID module" at hil0 id 34 code 3 not configured
"ID module" at hil0 id 34 code 4 not configured
"Tablet" at hil0 id 94 code 5 not configured
"Mouse" at hil0 id 68 code 6 not configured

Some feedback from and ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d206 33
d244 1
d281 1
a281 1
	-1,	/* 1b French */
@

