head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.50
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.46
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.36
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.44
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.42
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.40
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.38
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.34
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.32
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.30
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.28
	OPENBSD_5_0:1.4.0.26
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.24
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.22
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.18
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.20
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.16
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC:1.3.0.6
	UBC_SYNC_A:1.3
	SMP:1.3.0.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2005.05.13.14.54.44;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.26.20.22.04;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.15.23.42.48;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.19.39.30;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Separate button boxens from keyboards in the HIL device list.

hilkbd will still match both, but will neither do the auto-layout dance nor
attach as console for button boxens.
@
text
@/*	$OpenBSD: hildevs.h,v 1.3 2003/02/26 20:22:04 miod Exp $	*/
/*
 * Copyright (c) 2003, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Entries in hildevs_data.h for device probe */
struct	hildevice {
	int		minid;
	int		maxid;
	int		type;
	const char	*descr;
};

/* Arguments passed to attach routines */
struct hil_attach_args {
	int		ha_code;	/* hil code */
	int		ha_type;	/* hil device type */
	int		ha_console;	/* console set to hil */
	int		ha_infolen;	/* identify info length */
	u_int8_t	ha_info[HILBUFSIZE];	/* identify info bits */
#define	ha_id		ha_info[0]	/* hil probe id */

	const char	*ha_descr;	/* device description */
};

/* ha_type values */
#define	HIL_DEVICE_KEYBOARD	1
#define	HIL_DEVICE_IDMODULE	2
#define	HIL_DEVICE_MOUSE	3
#define	HIL_DEVICE_BUTTONBOX	4

/* Common softc part for hil devices */
struct hildev_softc {
	struct device	sc_dev;

	int		sc_code;	/* hil code */
	int		sc_type;	/* hil device type */

	int		sc_infolen;	/* identify info length */
	u_int8_t	sc_info[HILBUFSIZE];	/* identify info bits */

	void		(*sc_fn)(struct hildev_softc *, u_int, u_int8_t *);
};

#define	hd_code		sc_hildev.sc_code
#define	hd_fn		sc_hildev.sc_fn
#define	hd_info		sc_hildev.sc_info
#define	hd_infolen	sc_hildev.sc_infolen
#define	hd_parent	sc_hildev.sc_dev.dv_parent
#define	hd_type		sc_hildev.sc_type
@


1.3
log
@New hil child devices attachment framework, that allow them to be detached
at runtime.

Handle reconfiguration notices from the loop, and do the necessary
detach/attach work so that our vision of the loop is in sync with reality.

Adapt all hil child devices to the above changes.

"This is not as plug'n'play as usb, but you get the same feeling anyways..."
@
text
@d1 1
a1 1
/*	$OpenBSD: hildevs.h,v 1.2 2003/02/15 23:42:48 miod Exp $	*/
d53 1
@


1.2
log
@Rework the console management on hppa:
- only attach a keyboard as a console if it matches the PDC keyboard path
- on hil, as there can be multiple keyboards on the loop, attach only the
  first hilkbd device configured as console keyboard. Right now this means
  the one with the lowest hil code, which was the existing behaviour so far.
- do not try to switch to the wscons consdev structure early at all in
  wscons_machdep, but rather wait for the console to be completely
  configured (i.e. both wskbd and wsdisplay are attached) to switch.

With feedback and help from mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hildevs.h,v 1.1 2003/02/11 19:39:30 miod Exp $	*/
d53 20
@


1.1
log
@Machine independent HP-HIL loop support code.

Derived from the hp300 HIL code, and some information found in XFree86
HP-UX specific parts.

However, this code does not provide an HP-UX compatible /dev/hil* interface,
but will rather attach real BSD drivers to the hil driver glue.

Currently, only a driver for the HP-HIL keyboards is provided. More to come
as resources permit.

The international layout tables for hilkbd are derived from the ite tables
found in the hp300 code, but only the US layout could be tested.

Sample dmesg output on a heavily charged hil loop:
hil0 at gsc0 offset 21000 irq 1
hilkbd0 at hil0 code 1: 109-key keyboard, layout 1b
wskbd0 at hilkbd0: console keyboard
hilkbd1 at hil0 code 2: 109-key keyboard, layout 1f
wskbd1 at hilkbd1
"ID module" at hil0 id 34 code 3 not configured
"ID module" at hil0 id 34 code 4 not configured
"Tablet" at hil0 id 94 code 5 not configured
"Mouse" at hil0 id 68 code 6 not configured

Some feedback from and ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a38 1
	struct confargs	ha_ca;
d41 1
a46 1
	int		ha_flags;	/* extra information */
@

