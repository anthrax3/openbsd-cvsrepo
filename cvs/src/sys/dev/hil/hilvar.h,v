head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.46
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.44
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.40
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.30
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.38
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.36
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.34
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.32
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.28
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.26
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.24
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.22
	OPENBSD_5_0:1.10.0.20
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.18
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.16
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC:1.5.0.6
	UBC_SYNC_A:1.5
	SMP:1.5.0.4
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.10
date	2006.11.05.14.39.32;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.22.07.09.52;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.11.00.11.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.09.23.49.36;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.01;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.26.20.22.04;	author miod;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2003.02.18.02.40.51;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.15.23.42.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.15.23.38.46;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.19.39.30;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2003.03.28.14.05.52;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.06.07.11.02.28;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Handle loop reconfiguration in a kernel thread, instead of doing it from
interrupt context.
@
text
@/*	$OpenBSD: hilvar.h,v 1.9 2005/12/22 07:09:52 miod Exp $	*/
/*
 * Copyright (c) 2003, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: hilvar.h 1.3 92/01/21$
 *
 *	@@(#)hilvar.h	8.1 (Berkeley) 6/10/93
 */

#define NHILD		8		/* 7 actual + loop pseudo (dev 0) */

struct hildev_softc;

struct hil_softc {
	struct device	sc_dev;
	bus_space_handle_t sc_bsh;
	bus_space_tag_t	sc_bst;
	int		*sc_console;	/* console path set to hil */

	struct proc	*sc_thread;	/* event handling thread */

	int		sc_cmddone;
	int		sc_cmdending;
	u_int		sc_actdev;	/* current input device */
	u_int		sc_cmddev;	/* device to perform command on */
	u_int8_t	sc_pollbuf[HILBUFSIZE];	/* interrupt time input buf */
	u_int8_t	sc_cmdbuf[HILBUFSIZE];
	u_int8_t	*sc_pollbp;	/* pointer into sc_pollbuf */
	u_int8_t	*sc_cmdbp;	/* pointer into sc_cmdbuf */

	int		sc_status;	/* initialization status */
#define	HIL_STATUS_BUSY		0x00
#define	HIL_STATUS_READY	0x01
	int		sc_pending;	/* reconfiguration events in progress */
#define	HIL_PENDING_RECONFIG	0x01
#define	HIL_PENDING_UNPLUGGED	0x02
	u_int		sc_maxdev;	/* number of devices on loop */
	struct hildev_softc *sc_devices[NHILD];	/* interrupt dispatcher */
};

#ifdef _KERNEL

int	send_hil_cmd(struct hil_softc *, u_int, u_int8_t *, u_int, u_int8_t *);
int	send_hildev_cmd(struct hildev_softc *, u_int, u_int8_t *, u_int *);
void	hil_set_poll(struct hil_softc *, int);
int	hil_poll_data(struct hildev_softc *, u_int8_t *, u_int8_t *);

void	hil_attach(struct hil_softc *, int *);
void	hil_attach_deferred(void *);
int	hil_intr(void *);
int	hildevprint(void *, const char *);

#endif /* _KERNEL */
@


1.9
log
@Postpone the hil console detection logic to the first detection of a keyboard.

On hp300, hil would claim console against dnkbd if no dnkbd was found at
the time the loop is probed, even if the loop is empty. Because of this,
plugging dnkbd later would not select it as console keyboard, which is
really annoying on kernels without wsmux, such as hp300 RAMDISK.
Now the first keyboard plugged will become the console keyboard, whatever
its type.

No functional change on hppa, since the console path gives a definite console
device setting.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.8 2005/01/11 00:11:05 miod Exp $	*/
d76 2
@


1.8
log
@Reliability fixes:
- Let the loop initialize completely before attempting to probe its devices.
  Fixes the "no answer from device 1" problem.
- Handle ``loop unplugged'' events and force detach of all children in this
  case.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.7 2005/01/09 23:49:36 miod Exp $	*/
d75 1
a75 1
	int		sc_console;	/* console path set to hil */
d103 1
a103 1
void	hil_attach(struct hil_softc *, int);
@


1.7
log
@Allow send_hil{,dev}_cmd to return failure, and handle this where
applicable.

During device probe, if a device does not answer commands, display a warning
message. This apparently happens on hp300 when the console is configured
as remote (i.e. serial console). Unplugging and replugging the device works
fine afterwards...
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.6 2003/06/02 23:28:01 millert Exp $	*/
d86 6
a91 1
	int		sc_cpending;	/* reconfiguration in progress */
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.5 2003/02/26 20:22:04 miod Exp $	*/
d93 2
a94 2
void	send_hil_cmd(struct hil_softc *, u_int, u_int8_t *, u_int, u_int8_t *);
void	send_hildev_cmd(struct hildev_softc *, u_int, u_int8_t *, u_int *);
@


1.5
log
@New hil child devices attachment framework, that allow them to be detached
at runtime.

Handle reconfiguration notices from the loop, and do the necessary
detach/attach work so that our vision of the loop is in sync with reality.

Adapt all hil child devices to the above changes.

"This is not as plug'n'play as usb, but you get the same feeling anyways..."
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.4 2003/02/18 02:40:51 miod Exp $	*/
d46 1
a46 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5.4.1
log
@Sync SMP to 3.3, files that CVS misses due to some bug
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.5.4.1 2003/03/28 14:05:52 niklas Exp $	*/
d46 5
a50 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@Real polled mode console support, enough to play hangman in ddb.
Still a minor issue left for tomorrow.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.3 2003/02/15 23:42:48 miod Exp $	*/
d73 1
a73 4
struct hil_cb {
	void (*cb_fn)(void *, u_int, u_int8_t *);
	void *cb_arg;
};
d90 1
d92 1
a92 1
	struct hil_cb	sc_cb[NHILD];	/* interrupt dispatcher */
d98 1
a98 1
void	send_hildev_cmd(struct hil_softc *, u_int, u_int, u_int8_t *, u_int *);
d100 1
a100 1
int	hil_poll_data(struct hil_softc *, u_int, u_int8_t *, u_int8_t *);
a103 2
void	hil_callback_register(struct hil_softc *, u_int,
    void (*)(void *, u_int, u_int8_t *), void *);
@


1.3
log
@Rework the console management on hppa:
- only attach a keyboard as a console if it matches the PDC keyboard path
- on hil, as there can be multiple keyboards on the loop, attach only the
  first hilkbd device configured as console keyboard. Right now this means
  the one with the lowest hil code, which was the existing behaviour so far.
- do not try to switch to the wscons consdev structure early at all in
  wscons_machdep, but rather wait for the console to be completely
  configured (i.e. both wskbd and wsdisplay are attached) to switch.

With feedback and help from mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.2 2003/02/15 23:38:46 miod Exp $	*/
d102 1
a102 1
int	hil_poll_data(struct hil_softc *, u_int8_t *, u_int8_t *);
@


1.2
log
@- Better type usage in the various hil code: prefer u_int8_t to u_char, but
do not stick to u_int8_t when native word size can do the job better.
- Allow send_hildev_cmd() to return the command response buffer to its
caller, rather than forcing it to look at the guts of its parent device
softc... this will be needed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: hilvar.h,v 1.1 2003/02/11 19:39:30 miod Exp $	*/
d82 1
a93 1
	u_int		sc_kbddev;		/* keyboard device id */
d104 1
a104 1
void	hil_attach(struct hil_softc *);
@


1.1
log
@Machine independent HP-HIL loop support code.

Derived from the hp300 HIL code, and some information found in XFree86
HP-UX specific parts.

However, this code does not provide an HP-UX compatible /dev/hil* interface,
but will rather attach real BSD drivers to the hil driver glue.

Currently, only a driver for the HP-HIL keyboards is provided. More to come
as resources permit.

The international layout tables for hilkbd are derived from the ite tables
found in the hp300 code, but only the US layout could be tested.

Sample dmesg output on a heavily charged hil loop:
hil0 at gsc0 offset 21000 irq 1
hilkbd0 at hil0 code 1: 109-key keyboard, layout 1b
wskbd0 at hilkbd0: console keyboard
hilkbd1 at hil0 code 2: 109-key keyboard, layout 1f
wskbd1 at hilkbd1
"ID module" at hil0 id 34 code 3 not configured
"ID module" at hil0 id 34 code 4 not configured
"Tablet" at hil0 id 94 code 5 not configured
"Mouse" at hil0 id 68 code 6 not configured

Some feedback from and ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d74 1
a74 1
	void (*cb_fn)(void *, u_int, u_char *);
d79 1
a79 1
	struct	device sc_dev;
d81 1
a81 1
	bus_space_tag_t sc_bst;
d83 12
a94 12
	u_char 	sc_cmddone;
	u_char 	sc_cmdending;
	u_char	sc_actdev;		/* current input device */
	u_char	sc_cmddev;		/* device to perform command on */
	u_char	sc_pollbuf[HILBUFSIZE];	/* interrupt time input buffer */
	u_char	sc_cmdbuf[HILBUFSIZE];
	u_char 	*sc_pollbp;		/* pointer into sc_pollbuf */
	u_char	*sc_cmdbp;		/* pointer into sc_cmdbuf */

	u_char  sc_maxdev;		/* number of devices on loop */
	u_char	sc_kbddev;		/* keyboard device id */
	struct hil_cb sc_cb[NHILD];	/* interrupt dispatcher */
d99 2
a100 2
void	send_hil_cmd(struct hil_softc *, u_char, u_char *, u_char, u_char *);
void	send_hildev_cmd(struct hil_softc *, char, char);
d102 1
a102 1
int	hil_poll_data(struct hil_softc *, u_char *, u_char *);
d106 2
a107 2
void	hil_callback_register(struct hil_softc *, int,
    void (*)(void *, u_int, u_char *), void *);
@

