head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.8
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.6
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.12
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.8
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.6
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.4
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.08.26.22.28.57;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	eAQ3vRJSVKMRTPHT;

1.16
date	2015.05.29.00.33.37;	author uebayasi;	state Exp;
branches;
next	1.15;
commitid	k9pN2wgTn5cUwDek;

1.15
date	2014.07.12.18.48.17;	author tedu;	state Exp;
branches;
next	1.14;
commitid	I19imNlAX05zJOED;

1.14
date	2012.01.20.12.38.20;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2012.01.17.15.15.57;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.22.21.56.04;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2007.12.23.17.09.49;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.09.17.05.19;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2007.03.20.02.35.55;	author marco;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.29.09.34.38;	author mk;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.26.00.09.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.17.02.32.23;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.08.04.02.30;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.01.20.02.27;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.06.21.08.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.03.20.49.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.09.22.03.43;	author niklas;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2002.10.29.00.33.23;	author art;	state Exp;
branches;
next	;

1.1.8.1
date	2003.06.07.11.02.28;	author ho;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2004.02.19.10.56.13;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@trivial size to free()
@
text
@/*	$OpenBSD: bio.c,v 1.16 2015/05/29 00:33:37 uebayasi Exp $	*/

/*
 * Copyright (c) 2002 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2012 Joel Sing <jsing@@openbsd.org>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* A device controller ioctl tunnelling device.  */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>
#include <sys/queue.h>
#include <sys/systm.h>

#include <dev/biovar.h>

struct bio_mapping {
	LIST_ENTRY(bio_mapping) bm_link;
	struct device *bm_dev;
	int (*bm_ioctl)(struct device *, u_long, caddr_t);
};

LIST_HEAD(, bio_mapping) bios = LIST_HEAD_INITIALIZER(bios);

void	bioattach(int);
int	bioclose(dev_t, int, int, struct proc *);
int	bioioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	bioopen(dev_t, int, int, struct proc *);

int	bio_delegate_ioctl(struct bio_mapping *, u_long, caddr_t);
struct	bio_mapping *bio_lookup(char *);
int	bio_validate(void *);

void
bioattach(int nunits)
{
}

int
bioopen(dev_t dev, int flags, int mode, struct proc *p)
{
	return (0);
}

int
bioclose(dev_t dev, int flags, int mode, struct proc *p)
{
	return (0);
}

int
bioioctl(dev_t dev, u_long cmd, caddr_t addr, int flag, struct proc *p)
{
	struct bio_locate *locate;
	struct bio *bio;
	char name[16];
	int error;

	switch (cmd) {
	case BIOCLOCATE:
		locate = (struct bio_locate *)addr;
		error = copyinstr(locate->bl_name, name, sizeof name, NULL);
		if (error != 0)
			return (error);
		locate->bl_bio.bio_cookie = bio_lookup(name);
		if (locate->bl_bio.bio_cookie == NULL)
			return (ENOENT);
		break;

	case BIOCINQ:
	case BIOCDISK:
	case BIOCVOL:
	case BIOCALARM:
	case BIOCBLINK:
	case BIOCSETSTATE:
	case BIOCCREATERAID:
	case BIOCDELETERAID:
	case BIOCDISCIPLINE:
	case BIOCPATROL:
		bio = (struct bio *)addr;
		if (!bio_validate(bio->bio_cookie))
			return (ENOENT);
		return (bio_delegate_ioctl(
		    (struct bio_mapping *)bio->bio_cookie, cmd, addr));

	default:
		return (ENXIO);
	}
	return (0);
}

int
bio_register(struct device *dev, int (*ioctl)(struct device *, u_long, caddr_t))
{
	struct bio_mapping *bm;

	bm = malloc(sizeof *bm, M_DEVBUF, M_NOWAIT);
	if (bm == NULL)
		return (ENOMEM);
	bm->bm_dev = dev;
	bm->bm_ioctl = ioctl;
	LIST_INSERT_HEAD(&bios, bm, bm_link);
	return (0);
}

void
bio_unregister(struct device *dev)
{
	struct bio_mapping *bm, *next;

	for (bm = LIST_FIRST(&bios); bm != NULL; bm = next) {
		next = LIST_NEXT(bm, bm_link);

		if (dev == bm->bm_dev) {
			LIST_REMOVE(bm, bm_link);
			free(bm, M_DEVBUF, sizeof(*bm));
		}
	}
}

struct bio_mapping *
bio_lookup(char *name)
{
	struct bio_mapping *bm;

	LIST_FOREACH(bm, &bios, bm_link)
		if (strcmp(name, bm->bm_dev->dv_xname) == 0)
			return (bm);
	return (NULL);
}

int
bio_validate(void *cookie)
{
	struct bio_mapping *bm;

	LIST_FOREACH(bm, &bios, bm_link)
		if (bm == cookie)
			return (1);
	return (0);
}

int
bio_delegate_ioctl(struct bio_mapping *bm, u_long cmd, caddr_t addr)
{
	return (bm->bm_ioctl(bm->bm_dev, cmd, addr));
}

void
bio_info(struct bio_status *bs, int print, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	bio_status(bs, print, BIO_MSG_INFO, fmt, &ap);
	va_end(ap);
}

void
bio_warn(struct bio_status *bs, int print, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	bio_status(bs, print, BIO_MSG_WARN, fmt, &ap);
	va_end(ap);
}

void
bio_error(struct bio_status *bs, int print, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	bio_status(bs, print, BIO_MSG_ERROR, fmt, &ap);
	va_end(ap);
}

void
bio_status_init(struct bio_status *bs, struct device *dv)
{
	bzero(bs, sizeof(struct bio_status));

	bs->bs_status = BIO_STATUS_UNKNOWN;

	strlcpy(bs->bs_controller, dv->dv_xname, sizeof(bs->bs_controller));
}

void
bio_status(struct bio_status *bs, int print, int msg_type, const char *fmt,
    va_list *ap)
{
	int idx;

	if (bs->bs_msg_count >= BIO_MSG_COUNT) {
		printf("%s: insufficient message buffers\n", bs->bs_controller);
		return;
	}

	idx = bs->bs_msg_count++;

	bs->bs_msgs[idx].bm_type = msg_type;
	vsnprintf(bs->bs_msgs[idx].bm_msg, BIO_MSG_LEN, fmt, *ap);

	if (print)
		printf("%s: %s\n", bs->bs_controller, bs->bs_msgs[idx].bm_msg);
}
@


1.16
log
@Initial addition of ``Patrol Read'' support in bio(4), biocto(8), and
mfi(4).  Based on FreeBSD, but done without mfiutil(8).

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d138 1
a138 1
			free(bm, M_DEVBUF, 0);
@


1.15
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.14 2012/01/20 12:38:20 jsing Exp $	*/
d101 1
@


1.14
log
@Implement a status message interface for bio(4) capable devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.13 2012/01/17 15:15:57 jsing Exp $	*/
d137 1
a137 1
			free(bm, M_DEVBUF);
@


1.13
log
@Move the bio(4) cookie into a separate struct and make this struct the
first member of each ioctl data structure. This will allow for future
changes to bio(4) status handling.
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.11 2007/12/23 17:09:49 deraadt Exp $	*/
d5 1
d168 60
@


1.12
log
@Correctly return ENXIO on unhandled ioctls; ok marco@@
@
text
@d76 1
a76 1
	struct bio_common *common;
d86 2
a87 2
		locate->bl_cookie = bio_lookup(name);
		if (locate->bl_cookie == NULL)
d100 2
a101 2
		common = (struct bio_common *)addr;
		if (!bio_validate(common->bc_cookie))
d104 1
a104 1
		    (struct bio_mapping *)common->bc_cookie, cmd, addr));
@


1.11
log
@use sizeof where needed
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.10 2007/10/09 17:05:19 gilles Exp $	*/
d91 9
a99 1
	default:
d105 3
@


1.10
log
@MALLOC -> malloc

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.9 2007/03/20 02:35:55 marco Exp $	*/
d83 1
a83 1
		error = copyinstr(locate->bl_name, name, 16, NULL);
@


1.9
log
@Use queue.h macros instead of home made for thingy.

From tbert <bret.lambert@@gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.8 2006/05/29 09:34:38 mk Exp $	*/
d106 1
a106 1
	MALLOC(bm, struct bio_mapping *, sizeof *bm, M_DEVBUF, M_NOWAIT);
@


1.8
log
@Nuke unused local variable (ok beck deraadt) and unused struct
bio_softc declaration (ok and testing dlg).
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.7 2006/05/26 00:09:09 deraadt Exp $	*/
d135 1
a135 1
	for (bm = LIST_FIRST(&bios); bm != NULL; bm = LIST_NEXT(bm, bm_link))
d146 1
a146 1
	for (bm = LIST_FIRST(&bios); bm != NULL; bm = LIST_NEXT(bm, bm_link))
@


1.7
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.6 2005/08/17 02:32:23 dlg Exp $	*/
a45 4
struct bio_softc {
	struct device	 sc_dev;
};

d52 1
a52 1
struct bio_mapping *bio_lookup(char *);
a77 1
	size_t len;
d83 1
a83 1
		error = copyinstr(locate->bl_name, name, 16, &len);
@


1.6
log
@add bio_unregister so drivers can remove their bio entry on error or
detach.

ok marco@@ after i proved i had tested it.
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.5 2005/08/08 04:02:30 deraadt Exp $	*/
d60 1
a60 2
bioattach(nunits)
	int nunits;
d65 1
a65 4
bioopen(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
d71 1
a71 4
bioclose(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
d77 1
a77 6
bioioctl(dev, cmd, addr, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t addr;
	int flag;
	struct proc *p;
d79 2
a83 2
	struct bio_locate *locate;
	struct bio_common *common;
d107 1
a107 3
bio_register(dev, ioctl)
	struct device *dev;
	int (*ioctl)(struct device *, u_long, caddr_t);
d121 1
a121 2
bio_unregister(dev)
	struct device *dev;
d136 1
a136 2
bio_lookup(name)
	char *name;
d147 1
a147 2
bio_validate(cookie)
	void *cookie;
d158 1
a158 4
bio_delegate_ioctl(bm, cmd, addr)
	struct bio_mapping *bm;
	u_long cmd;
	caddr_t addr;
@


1.5
log
@rename a bunch of bio/raid APIs to stop the bleeding in dlg and
my eyes; marco ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.4 2005/04/01 20:02:27 marco Exp $	*/
d132 16
@


1.4
log
@size_t not int, bad niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.3 2003/08/06 21:08:06 millert Exp $	*/
d100 1
a100 1
		error = copyinstr(locate->name, name, 16, &len);
d103 2
a104 2
		locate->cookie = bio_lookup(name);
		if (locate->cookie == NULL)
d110 1
a110 1
		if (!bio_validate(common->cookie))
d113 1
a113 1
		    (struct bio_mapping *)common->cookie, cmd, addr));
@


1.3
log
@Remove some double semicolons (hmm, do two semis equal a maxi?).
I've skipped the GNU stuff for now.  From Patrick Latifi.
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.2 2003/06/03 20:49:28 deraadt Exp $	*/
d92 2
a93 1
	int len, error;
@


1.2
log
@fix various 3/4 licenses according to "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.1 2002/06/09 22:03:43 niklas Exp $	*/
d53 1
a53 1
int	bioopen(dev_t, int, int, struct proc *);;
@


1.1
log
@bio is a driver that can delegate ioctls to other drivers which
otherwise do not deserve a /dev-node of their own.  Will be used for RAID
mgmt among other things.  Initially only i386 gets the device, but other
platforms will follow in a few hours.  MAKEDEV stuff coming soon too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1.8.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bio.c,v 1.1 2002/06/09 22:03:43 niklas Exp $	*/
d14 5
@


1.1.8.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
int	bioopen(dev_t, int, int, struct proc *);
@


1.1.4.1
log
@sync to -current
@
text
@@

