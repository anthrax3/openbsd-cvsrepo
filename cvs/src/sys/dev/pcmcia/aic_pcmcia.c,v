head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.10
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.18
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.16
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.14
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.20
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.18
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.14
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.12
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.10
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.8
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.10
	OPENBSD_2_8:1.8.0.8
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.6
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.4
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2015.03.14.03.38.49;	author jsg;	state Exp;
branches;
next	1.16;
commitid	p4LJxGKbi0BU2cG6;

1.16
date	2011.03.31.13.05.27;	author jasper;	state Exp;
branches;
next	1.15;

1.15
date	2006.06.03.01.51.54;	author martin;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.02.06.26.15;	author martin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.20.20.31.13;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.21.18.16.41;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.27.17.04.55;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.00;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.17.21.52.16;	author deraadt;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	99.09.13.13.07.00;	author deraadt;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	99.08.16.16.51.19;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.08.16.06.49.29;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	99.07.26.05.43.15;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.07.01.06.29.54;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	99.05.28.12.41.55;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.10.14.07.34.43;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	98.09.11.10.47.14;	author fgsch;	state Exp;
branches;
next	;

1.8.4.1
date	2001.10.31.03.22.48;	author nate;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.11.03.42.27;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: aic_pcmcia.c,v 1.16 2011/03/31 13:05:27 jasper Exp $	*/
/*	$NetBSD: aic_pcmcia.c,v 1.6 1998/07/19 17:28:15 christos Exp $	*/

/*
 * Copyright (c) 1997 Marc Horowitz.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Horowitz.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/selinfo.h>
#include <sys/device.h>

#include <machine/cpu.h>
#include <machine/bus.h>
#include <machine/intr.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/ic/aic6360var.h>

#include <dev/pcmcia/pcmciavar.h>
#include <dev/pcmcia/pcmciadevs.h>

int	aic_pcmcia_match(struct device *, void *, void *);
void	aic_pcmcia_attach(struct device *, struct device *, void *);
int	aic_pcmcia_detach(struct device *, int);

struct aic_pcmcia_softc {
	struct aic_softc sc_aic;		/* real "aic" softc */

	/* PCMCIA-specific goo. */
	struct pcmcia_io_handle sc_pcioh;	/* PCMCIA i/o space info */
	int sc_io_window;			/* our i/o window */
	struct pcmcia_function *sc_pf;		/* our PCMCIA function */
	void *sc_ih;				/* interrupt handler */
};

struct cfattach aic_pcmcia_ca = {
	sizeof(struct aic_pcmcia_softc), aic_pcmcia_match, aic_pcmcia_attach,
	aic_pcmcia_detach
};

struct aic_pcmcia_product {
	u_int16_t	app_vendor;		/* PCMCIA vendor ID */
	u_int16_t	app_product;		/* PCMCIA product ID */
	int		app_expfunc;		/* expected function number */
} aic_pcmcia_prod[] = {
	{ PCMCIA_VENDOR_ADAPTEC,	PCMCIA_PRODUCT_ADAPTEC_APA1460_1,
	  0 },

	{ PCMCIA_VENDOR_ADAPTEC,	PCMCIA_PRODUCT_ADAPTEC_APA1460_2,
	  0 },

	{ PCMCIA_VENDOR_NEWMEDIA,	PCMCIA_PRODUCT_NEWMEDIA_BUSTOASTER,
	  0 }
};

int
aic_pcmcia_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct pcmcia_attach_args *pa = aux;
	int i;

	for (i = 0; i < nitems(aic_pcmcia_prod); i++)
		if (pa->manufacturer == aic_pcmcia_prod[i].app_vendor &&
		    pa->product == aic_pcmcia_prod[i].app_product &&
		    pa->pf->number == aic_pcmcia_prod[i].app_expfunc)
			return (1);
	return (0);
}

void
aic_pcmcia_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct aic_pcmcia_softc *psc = (void *)self;
	struct aic_softc *sc = &psc->sc_aic;
	struct pcmcia_attach_args *pa = aux;
	struct pcmcia_config_entry *cfe;
	struct pcmcia_function *pf = pa->pf;
	const char *intrstr;

	psc->sc_pf = pf;

	for (cfe = SIMPLEQ_FIRST(&pf->cfe_head); cfe != NULL;
	    cfe = SIMPLEQ_NEXT(cfe, cfe_list)) {
		if (cfe->num_memspace != 0 ||
		    cfe->num_iospace != 1)
			continue;

		/* The bustoaster has a default config as first
		 * entry, we don't want to use that. */

		if (pa->manufacturer == PCMCIA_VENDOR_NEWMEDIA &&
		    pa->product == PCMCIA_PRODUCT_NEWMEDIA_BUSTOASTER &&
		    cfe->iospace[0].start == 0)
			continue;

		if (pcmcia_io_alloc(pa->pf, cfe->iospace[0].start,
		    cfe->iospace[0].length, AIC_NPORTS, &psc->sc_pcioh) == 0)
			break;
	}

	if (cfe == 0) {
		printf(": can't alloc i/o space\n");
		return;
	}

	sc->sc_iot = psc->sc_pcioh.iot;
	sc->sc_ioh = psc->sc_pcioh.ioh;

	/* Enable the card. */
	pcmcia_function_init(pf, cfe);
	if (pcmcia_function_enable(pf)) {
		printf(": function enable failed\n");
		return;
	}

	/* Map in the io space */
	if (pcmcia_io_map(pa->pf, PCMCIA_WIDTH_AUTO, 0, psc->sc_pcioh.size,
	    &psc->sc_pcioh, &psc->sc_io_window)) {
		printf(": can't map i/o space\n");
		return;
	}

	printf(" port 0x%lx/%lu", psc->sc_pcioh.addr,
	    (u_long)psc->sc_pcioh.size);

	if (!aic_find(sc->sc_iot, sc->sc_ioh)) {
		printf(": unable to detect chip!\n");
		return;
	}

	/* Establish the interrupt handler. */
	psc->sc_ih = pcmcia_intr_establish(pa->pf, IPL_BIO,
	    aicintr, sc, sc->sc_dev.dv_xname);
	intrstr = pcmcia_intr_string(psc->sc_pf, psc->sc_ih);
	printf("%s%s\n", *intrstr ? ", " : "", intrstr);
	if (psc->sc_ih == NULL)
		return;

	aicattach(sc);

}

int
aic_pcmcia_detach(self, flags)
	struct device *self;
	int flags;
{
	struct aic_pcmcia_softc *sc= (void *)self;
	int error;

	error = aic_detach(self, flags);
	if (error)
		return (error);

	/* Unmap our i/o window and i/o space. */
	pcmcia_io_unmap(sc->sc_pf, sc->sc_io_window);
	pcmcia_io_free(sc->sc_pf, &sc->sc_pcioh);

	return (0);
}
@


1.16
log
@- use nitems(); no binary change.

ok fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.15 2006/06/03 01:51:54 martin Exp $	*/
a46 1
#include <dev/pcmcia/pcmciareg.h>
@


1.15
log
@make detachable, inspired by netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.14 2006/06/02 06:26:15 martin Exp $	*/
d93 1
a93 1
	for (i = 0; i < sizeof(aic_pcmcia_prod)/sizeof(aic_pcmcia_prod[0]); i++)
@


1.14
log
@ditch unused struct isadev and in turn the isavar.h include
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.13 2006/04/20 20:31:13 miod Exp $	*/
d53 1
d66 2
a67 1
	sizeof(struct aic_pcmcia_softc), aic_pcmcia_match, aic_pcmcia_attach
d174 19
@


1.13
log
@Fix various printf() issues: too many arguments, not enough arguments, argument
order reversed, wrong modifiers. ok deraadt@@ marco@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.12 2005/11/21 18:16:41 millert Exp $	*/
a43 2

#include <dev/isa/isavar.h>
@


1.12
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.11 2005/01/27 17:04:55 millert Exp $	*/
d156 2
a157 1
	printf(" port 0x%lx/%d", psc->sc_pcioh.addr, psc->sc_pcioh.size);
@


1.11
log
@Use pcmcia_intr_string() for printing the irq (or error) string.
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.10 2002/03/14 01:27:00 millert Exp $	*/
d35 1
a35 1
#include <sys/select.h>
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.9 2001/08/17 21:52:16 deraadt Exp $	*/
d111 1
d165 4
a168 3
	    aicintr, sc, "");
	if (psc->sc_ih == NULL) {
		printf(": couldn't establish interrupt\n");
a169 3
	}

	printf("\n");
@


1.9
log
@quieten pcmcia/cardbus interrupt handling at unsuspend time
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.8 1999/09/13 13:07:00 deraadt Exp $	*/
d53 2
a54 2
int	aic_pcmcia_match __P((struct device *, void *, void *));
void	aic_pcmcia_attach __P((struct device *, struct device *, void *));
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.9 2001/08/17 21:52:16 deraadt Exp $	*/
d53 2
a54 2
int	aic_pcmcia_match(struct device *, void *, void *);
void	aic_pcmcia_attach(struct device *, struct device *, void *);
@


1.8
log
@establish irq after aic
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.7 1999/08/16 16:51:19 deraadt Exp $	*/
d163 2
a164 1
	psc->sc_ih = pcmcia_intr_establish(pa->pf, IPL_BIO, aicintr, sc);
@


1.8.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.8 1999/09/13 13:07:00 deraadt Exp $	*/
d163 1
a163 2
	psc->sc_ih = pcmcia_intr_establish(pa->pf, IPL_BIO,
	    aicintr, sc, "");
@


1.8.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 2
a54 2
int	aic_pcmcia_match(struct device *, void *, void *);
void	aic_pcmcia_attach(struct device *, struct device *, void *);
@


1.7
log
@manufacturer and product are 16 bits, 0xffff is the special case
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.6 1999/08/16 06:49:29 fgsch Exp $	*/
d162 7
a172 5
	/* Establish the interrupt handler. */
	psc->sc_ih = pcmcia_intr_establish(pa->pf, IPL_BIO, aicintr, sc);
	if (psc->sc_ih == NULL)
		printf("%s: couldn't establish interrupt\n",
		    sc->sc_dev.dv_xname);
@


1.6
log
@Remove unnecessary code. Shorten dmesg output.
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.5 1999/07/26 05:43:15 deraadt Exp $	*/
d71 2
a72 2
	u_int32_t	app_vendor;		/* PCMCIA vendor ID */
	u_int32_t	app_product;		/* PCMCIA product ID */
@


1.5
log
@shrink code, cleanup port printouts, repairs various comments
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.4 1999/07/01 06:29:54 fgsch Exp $	*/
d74 1
a74 2
	const char	*app_name;		/* device name */
} aic_pcmcia_products[] = {
d76 2
a77 1
	  0,				PCMCIA_STR_ADAPTEC_APA1460_1 },
d79 2
a80 1
	  0,				PCMCIA_STR_ADAPTEC_APA1460_2 },
d82 1
a82 3
	  0,				PCMCIA_STR_NEWMEDIA_BUSTOASTER },
	{ 0,				0,
	  0,				NULL },
a84 17
struct aic_pcmcia_product *aic_pcmcia_lookup __P((struct pcmcia_attach_args *));

struct aic_pcmcia_product *
aic_pcmcia_lookup(pa)
	struct pcmcia_attach_args *pa;
{
	struct aic_pcmcia_product *app;

	for (app = aic_pcmcia_products; app->app_name != NULL; app++) {
		if (pa->manufacturer == app->app_vendor &&
		    pa->product == app->app_product &&
		    pa->pf->number == app->app_expfunc)
			return (app);
	}
	return (NULL);
}

d91 1
d93 5
a97 2
	if (aic_pcmcia_lookup(pa) != NULL)
		return (1);
a110 1
	struct aic_pcmcia_product *app;
a161 3
	app = aic_pcmcia_lookup(pa);
	if (app)
		printf(": %s", app->app_name);
@


1.4
log
@Add NewMedia BusToaster SCSI Host Adapter.
Remove repeated entry in if_ne_pcmcia.c. Minor cosmetical changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.3 1999/05/28 12:41:55 niklas Exp $	*/
a124 1
#if 0
a125 1
#endif
d170 2
a176 1
#if 0
d178 2
a179 7
	if (app == NULL) {
		printf("\n");
		panic("aic_pcmcia_attach: impossible");
	}

	printf(": %s\n", app->app_name);
#else
a180 1
#endif
@


1.3
log
@0 alignment is bad, now aic at pcmcia at least attaches!
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.2 1998/10/14 07:34:43 fgsch Exp $	*/
d80 2
d135 8
@


1.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: aic_pcmcia.c,v 1.1 1998/09/11 10:47:14 fgsch Exp $	*/
d136 1
a136 1
		    cfe->iospace[0].length, 0, &psc->sc_pcioh) == 0)
@


1.1
log
@PCMCIA code ported from NetBSD.
Support for aic, ep, pccom and sm.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 31
d108 2
a109 9
	if (pa->manufacturer == PCMCIA_VENDOR_ADAPTEC) {
		switch (pa->product) {
		case PCMCIA_PRODUCT_ADAPTEC_APA1460_1:
		case PCMCIA_PRODUCT_ADAPTEC_APA1460_2:
			if (pa->pf->number == 0)
				return (1);
		}
	}

d123 3
a125 1
	const char *s;
d162 4
a165 2
	if (!aic_find(sc->sc_iot, sc->sc_ioh))
		printf(": coundn't find aic\n%s", sc->sc_dev.dv_xname);
d167 5
a171 10
	switch (pa->product) {
	case PCMCIA_PRODUCT_ADAPTEC_APA1460_1:
		s = PCMCIA_STR_ADAPTEC_APA1460_1;
		break;
	case PCMCIA_PRODUCT_ADAPTEC_APA1460_2:
		s = PCMCIA_STR_ADAPTEC_APA1460_2;
		break;
	default:
		s = "Unknown APA1460";
		break;
d174 4
a177 1
	printf(": %s\n", s);
@

