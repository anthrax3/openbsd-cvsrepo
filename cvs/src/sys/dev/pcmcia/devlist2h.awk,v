head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.74
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.72
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.62
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.70
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.68
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.66
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.64
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.60
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.58
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.56
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.54
	OPENBSD_5_0:1.4.0.52
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.50
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.48
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.44
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.46
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.42
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.40
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.38
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.36
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.34
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.32
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.30
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.28
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.26
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.24
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.22
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.20
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.18
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.16
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2000.02.01.16.54.41;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	99.08.18.22.30.04;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.07.28.25;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	98.09.11.10.47.14;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.4
log
@do not create _STR_ defines; this is useless, makes pcmciadevs.h larger
and unclean.
@
text
@#! /usr/bin/awk -f
#	$OpenBSD: devlist2h.awk,v 1.3 1999/08/18 22:30:04 d Exp $
#	$NetBSD: devlist2h.awk,v 1.2 1998/07/22 11:47:13 christos Exp $
#
# Copyright (c) 1998, Christos Zoulas
# Copyright (c) 1995, 1996 Christopher G. Demetriou
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#      This product includes software developed by Christopher G. Demetriou.
#      This product includes software developed by Christos Zoulas
# 4. The name of the author(s) may not be used to endorse or promote products
#    derived from this software without specific prior written permission
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
function collectline(f, line) {
	oparen = 0
	line = ""
	while (f <= NF) {
		if ($f == "#") {
			line = line "("
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			line = line $f
			if (f < NF)
				line = line " "
			f++
			continue
		}
		line = line $f
		if (f < NF)
			line = line " "
		f++
	}
	if (oparen)
		line = line ")"
	return line
}
BEGIN {
	nproducts = nvendors = 0
	hfile="pcmciadevs.h"
}
NR == 1 {
	VERSION = $0
	gsub("\\$", "", VERSION)

	printf("/*\t\$OpenBSD\$\t*/\n\n") > hfile
	printf("/*\n") > hfile
	printf(" * THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > hfile
	printf(" *\n") > hfile
	printf(" * generated from:\n") > hfile
	printf(" *\t%s\n", VERSION) > hfile
	printf(" */\n") > hfile

	next
}
$1 == "vendor" {
	nvendors++

	vendorindex[$2] = nvendors;		# record index for this name, for later.
	vendors[nvendors, 1] = $2;		# name
	vendors[nvendors, 2] = $3;		# id
	printf("#define\tPCMCIA_VENDOR_%s\t%s\t", vendors[nvendors, 1],
	    vendors[nvendors, 2]) > hfile
	vendors[nvendors, 3] = collectline(4, line)
	printf("/* %s */\n", vendors[nvendors, 3]) > hfile
	next
}
$1 == "product" {
	nproducts++

	products[nproducts, 1] = $2;		# vendor name
	products[nproducts, 2] = $3;		# product id
	products[nproducts, 3] = $4;		# id

	f = 5;

	if ($4 == "{") {
		products[nproducts, 3] = "PCMCIA_PRODUCT_INVALID"
		z = "{ "
		for (i = 0; i < 4; i++) {
			if (f <= NF) {
				gsub("&sp", " ", $f)
				gsub("&tab", "\t", $f)
				gsub("&nl", "\n", $f)
				z = z $f " "
				f++
			}
			else {
				if (i == 3)
					z = z "NULL "
				else
					z = z "NULL, "
			}
		}
		products[nproducts, 4] = z $f
		f++
	}
	else {
		products[nproducts, 4] = "{ NULL, NULL, NULL, NULL }"
	}
	printf("#define\tPCMCIA_CIS_%s_%s\t%s\n",
	    products[nproducts, 1], products[nproducts, 2],
	    products[nproducts, 4]) > hfile
	printf("#define\tPCMCIA_PRODUCT_%s_%s\t%s\n", products[nproducts, 1],
	    products[nproducts, 2], products[nproducts, 3]) > hfile

#	products[nproducts, 5] = collectline(f, line)
#
#	printf("#define\tPCMCIA_STR_%s_%s\t\"%s\"\n",
#	    products[nproducts, 1], products[nproducts, 2],
#	    products[nproducts, 5]) > hfile

	next
}
{
	if ($0 == "")
		blanklines++
	print $0 > hfile
}
@


1.3
log
@"-1" -> "PCMCIA_PRODUCT_INVALID"
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.2 1999/04/30 07:28:25 fgsch Exp $
d131 5
a135 5
	products[nproducts, 5] = collectline(f, line)

	printf("#define\tPCMCIA_STR_%s_%s\t\"%s\"\n",
	    products[nproducts, 1], products[nproducts, 2],
	    products[nproducts, 5]) > hfile
@


1.2
log
@Don't generate pcmciadevs_data.h anymore.
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.1 1998/09/11 10:47:14 fgsch Exp $
d102 1
a102 1
		products[nproducts, 3] = -1
@


1.1
log
@PCMCIA code ported from NetBSD.
Support for aic, ep, pccom and sm.
@
text
@d2 1
a2 1
#	$OpenBSD$
a62 1
	dfile="pcmciadevs_data.h"
a68 9
	printf("/*\t\$OpenBSD\$\t*/\n\n") > dfile
	printf("/*\n") > dfile
	printf(" * THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > dfile
	printf(" *\n") > dfile
	printf(" * generated from:\n") > dfile
	printf(" *\t%s\n", VERSION) > dfile
	printf(" */\n") > dfile

a142 40
	if (blanklines < 2)
		print $0 > dfile
}
END {
	# print out the match tables

	printf("\n") > dfile

	printf("struct pcmcia_knowndev pcmcia_knowndevs[] = {\n") > dfile
	for (i = 1; i <= nproducts; i++) {
		printf("\t{\n") > dfile
		if (products[i, 3] == -1) {
			printf("\t    PCMCIA_VENDOR_UNKNOWN, PCMCIA_PRODUCT_%s_%s,\n",
			    products[i, 1], products[i, 2]) > dfile
		} else {
			printf("\t    PCMCIA_VENDOR_%s, PCMCIA_PRODUCT_%s_%s,\n",
			    products[i, 1], products[i, 1], products[i, 2]) > dfile
		}
		printf("\t    PCMCIA_CIS_%s_%s,\n", 
		    products[i, 1], products[i, 2]) > dfile
		printf("\t    ") > dfile
		printf("0") > dfile
		printf(",\n") > dfile

		vendi = vendorindex[products[i, 1]];
		printf("\t    \"%s\",\n", vendors[vendi, 3]) > dfile
		printf("\t    \"%s\"\t},\n", products[i, 5]) > dfile
		printf("\t},\n") > dfile
	}
	for (i = 1; i <= nvendors; i++) {
		printf("\t{\n") > dfile
		printf("\t    PCMCIA_VENDOR_%s, 0,\n", vendors[i, 1]) > dfile
		printf("\t    PCMCIA_KNOWNDEV_NOPROD,\n") > dfile
		printf("\t    PCMCIA_CIS_INVALID,\n") > dfile
		printf("\t    \"%s\",\n", vendors[i, 3]) > dfile
		printf("\t    NULL,\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("\t{ 0, 0, { NULL, NULL, NULL, NULL }, 0, NULL, NULL, }\n") > dfile
	printf("};\n") > dfile
@

