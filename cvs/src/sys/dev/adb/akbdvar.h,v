head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.24
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.20
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.18
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.16
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.14
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.12
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.22
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.20
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.18
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.14
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.01.29.10.54.21;	author mpi;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.09.14.22.37;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.23.21.54.26;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.23.21.17;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Swap the keycodes of the two swapped keys of Apple ISO keyboards and update
ISO layouts accordingly.
This fix the US layout on ISO keyboards and the swaped keys issue under X11.

ok miod@@, shadchin@@
@
text
@/*	$OpenBSD: akbdvar.h,v 1.3 2011/11/09 14:22:37 shadchin Exp $	*/
/*	$NetBSD: akbdvar.h,v 1.4 1999/02/17 14:56:56 tsubai Exp $	*/

/*
 * Copyright (C) 1998	Colin Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Colin Wood.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _ADB_AKBDVAR_H_
#define _ADB_AKBDVAR_H_

/*
 * State info, per keyboard instance.
 */
struct akbd_softc {
	struct	device	sc_dev;

	/* ADB info */
	int		origaddr;	/* ADB device type (ADBADDR_KBD) */
	int		adbaddr;	/* current ADB address */
	int		handler_id;	/* type of keyboard */

	u_int8_t	sc_leds;	/* current LED state */
	u_int8_t	sc_iso;

	int		sc_caps;	/* capslock key state */
	struct device	*sc_wskbddev;

#ifdef WSDISPLAY_COMPAT_RAWKBD
	int sc_rawkbd;
#endif /* defined(WSDISPLAY_COMPAT_RAWKBD) */
};

/* LED register bits, inverse of actual register value */
#define LED_NUMLOCK	0x1
#define LED_CAPSLOCK	0x2
#define LED_SCROLL_LOCK	0x4

int	akbd_cnattach(void);
int	akbd_is_console(void);

extern struct wskbd_mapdata akbd_keymapdata;
extern int adb_polledkey;

#endif /* _ADB_AKBDVAR_H_ */
@


1.3
log
@Auto-repeat keys in WSKBD_RAW mode is not needed.
WSKBD_RAW mode used in X, but X independently implements auto-repeat keys.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbdvar.h,v 1.2 2006/03/23 21:54:26 miod Exp $	*/
d49 1
@


1.2
log
@Previous state machine for caps lock would prove ineffective if caps lock
was remapped to a dead key (such as control).

Fortunately (?), accounting power key transitions can help reconstructing
the exact caps lock key behaviour - this state machine is still flawed,
and one can make it go wrong by hitting one of the caps lock and power keys
while the other is held, but for now we'll assume people who do this are
smart enough to be able to put the state machine in the correct state back,
while mere mortals will never do such things anyway.

Spotted by Matthias Kilian, ok itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbdvar.h,v 1.1 2006/01/18 23:21:17 miod Exp $	*/
a53 3
#define MAXKEYS 20
#define REP_DELAY1 400
#define REP_DELAYN 100
a54 3
	int sc_nrep;
	char sc_rep[MAXKEYS];
	struct timeout sc_rawrepeat_ch;
@


1.1
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbdvar.h,v 1.3 2002/03/27 21:48:12 drahn Exp $	*/
d49 2
d52 1
@

