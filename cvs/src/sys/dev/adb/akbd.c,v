head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.16
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.8
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.14
date	2014.01.26.17.48.08;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.22.11.46.38;	author mpi;	state Exp;
branches;
next	1.12;

1.12
date	2012.01.29.10.54.21;	author mpi;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.09.14.22.37;	author shadchin;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.15.21.32.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.13.16.29.11;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.23.15.09.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.21.21.53.59;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.13.20.56.56;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.23.21.54.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.12.21.49.08;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.12.18.06.24;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.21.25.40;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.23.21.17;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Attempt to make user changes of keyboard layout a bit more `sticky' on wsmux
kernels:
- keyboard drivers will now tell wskbd if the keyboard layout they ask
  for is a default value, or a value they are 100% sure of (either
  because your kernel has a XXXKBD_LAYOUT option, or because the
  driver can tell the keyboard layout, e.g. by the country code on USB
  keyboards which provide it, such as Sun's)
- when attaching a keyboard with a non-default layout, the layout will
  become the default layout of the mux for new keyboard attachments if
  the mux doesn't have a layout set already.
- when changing the keyboard layout of a particular keyboard with an
  ioctl (i.e. using kbd(8) or wsconsctl(8)), the layout will become the
  default layout of the mux for new keyboard attachments.

ok mpi@@
@
text
@/*	$OpenBSD: akbd.c,v 1.13 2013/08/22 11:46:38 mpi Exp $	*/
/*	$NetBSD: akbd.c,v 1.17 2005/01/15 16:00:59 chs Exp $	*/

/*
 * Copyright (C) 1998	Colin Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Colin Wood.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/timeout.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wskbdvar.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>

#include <dev/adb/adb.h>
#include <dev/adb/akbdmap.h>
#include <dev/adb/akbdvar.h>
#include <dev/adb/keyboard.h>

/*
 * Function declarations.
 */
int	akbdmatch(struct device *, void *, void *);
void	akbdattach(struct device *, struct device *, void *);

/* Driver definition. */
struct cfattach akbd_ca = {
	sizeof(struct akbd_softc), akbdmatch, akbdattach
};
struct cfdriver akbd_cd = {
	NULL, "akbd", DV_DULL
};

int	akbd_enable(void *, int);
void	akbd_set_leds(void *, int);
int	akbd_ioctl(void *, u_long, caddr_t, int, struct proc *);


struct wskbd_accessops akbd_accessops = {
	akbd_enable,
	akbd_set_leds,
	akbd_ioctl,
};

struct wskbd_mapdata akbd_keymapdata = {
	akbd_keydesctab,
#ifdef AKBD_LAYOUT
	AKBD_LAYOUT,
#else
	KB_US | KB_DEFAULT,
#endif
};

void	akbd_adbcomplete(caddr_t, caddr_t, int);
void	akbd_capslockwrapper(struct akbd_softc *, int);
void	akbd_input(struct akbd_softc *, int);
void	akbd_processevent(struct akbd_softc *, adb_event_t *);
#ifdef notyet
u_char	getleds(int);
int	setleds(struct akbd_softc *, u_char);
void	blinkleds(struct akbd_softc *);
#endif

int
akbdmatch(struct device *parent, void *vcf, void *aux)
{
	struct adb_attach_args *aa_args = (struct adb_attach_args *)aux;

	if (strcmp(aa_args->name, adb_device_name) != 0)
		return (0);

	if (aa_args->origaddr == ADBADDR_KBD)
		return (1);
	else
		return (0);
}

void
akbdattach(struct device *parent, struct device *self, void *aux)
{
	ADBSetInfoBlock adbinfo;
	struct akbd_softc *sc = (struct akbd_softc *)self;
	struct adb_attach_args *aa_args = (struct adb_attach_args *)aux;
	int error, kbd_done;
	short cmd;
	u_char buffer[9];
	struct wskbddev_attach_args a;
	static int akbd_console_initted;
	int wskbd_eligible = 1;

	sc->origaddr = aa_args->origaddr;
	sc->adbaddr = aa_args->adbaddr;
	sc->handler_id = aa_args->handler_id;

	sc->sc_leds = (u_int8_t)0x00;	/* initially off */
	sc->sc_caps = 0;
	sc->sc_iso = 0;

	adbinfo.siServiceRtPtr = (Ptr)akbd_adbcomplete;
	adbinfo.siDataAreaAddr = (caddr_t)sc;

	printf(": ");
	switch (sc->handler_id) {
	case ADB_STDKBD:
		printf("standard keyboard\n");
		break;
	case ADB_ISOKBD:
		printf("standard keyboard (ISO layout)\n");
		sc->sc_iso = 1;
		break;
	case ADB_EXTKBD:
		cmd = ADBTALK(sc->adbaddr, 1);
		kbd_done =
		    (adb_op_sync((Ptr)buffer, cmd) == 0);

		/* Ignore Logitech MouseMan/Trackman pseudo keyboard */
		if (kbd_done && buffer[1] == 0x9a && buffer[2] == 0x20) {
			printf("Mouseman (non-EMP) pseudo keyboard\n");
			adbinfo.siServiceRtPtr = (Ptr)0;
			adbinfo.siDataAreaAddr = (Ptr)0;
			wskbd_eligible = 0;
		} else if (kbd_done && buffer[1] == 0x9a && buffer[2] == 0x21) {
			printf("Trackman (non-EMP) pseudo keyboard\n");
			adbinfo.siServiceRtPtr = (Ptr)0;
			adbinfo.siDataAreaAddr = (Ptr)0;
			wskbd_eligible = 0;
		} else {
			printf("extended keyboard\n");
#ifdef notyet
			blinkleds(sc);
#endif
		}
		break;
	case ADB_EXTISOKBD:
		printf("extended keyboard (ISO layout)\n");
		sc->sc_iso = 1;
#ifdef notyet
		blinkleds(sc);
#endif
		break;
	case ADB_KBDII:
		printf("keyboard II\n");
		break;
	case ADB_ISOKBDII:
		printf("keyboard II (ISO layout)\n");
		sc->sc_iso = 1;
		break;
	case ADB_PBKBD:
		printf("PowerBook keyboard\n");
		break;
	case ADB_PBISOKBD:
		printf("PowerBook keyboard (ISO layout)\n");
		sc->sc_iso = 1;
		break;
	case ADB_ADJKPD:
		printf("adjustable keypad\n");
		wskbd_eligible = 0;
		break;
	case ADB_ADJKBD:
		printf("adjustable keyboard\n");
		break;
	case ADB_ADJISOKBD:
		printf("adjustable keyboard (ISO layout)\n");
		sc->sc_iso = 1;
		break;
	case ADB_ADJJAPKBD:
		printf("adjustable keyboard (Japanese layout)\n");
		break;
	case ADB_PBEXTISOKBD:
		printf("PowerBook extended keyboard (ISO layout)\n");
		sc->sc_iso = 1;
		break;
	case ADB_PBEXTJAPKBD:
		printf("PowerBook extended keyboard (Japanese layout)\n");
		break;
	case ADB_JPKBDII:
		printf("keyboard II (Japanese layout)\n");
		break;
	case ADB_PBEXTKBD:
		printf("PowerBook extended keyboard\n");
		break;
	case ADB_DESIGNKBD:
		printf("extended keyboard\n");
#ifdef notyet
		blinkleds(sc);
#endif
		break;
	case ADB_PBJPKBD:
		printf("PowerBook keyboard (Japanese layout)\n");
		break;
	case ADB_PBG3JPKBD:
		printf("PowerBook G3 keyboard (Japanese layout)\n");
		break;
	case ADB_PBG4KBD:
		printf("PowerBook G4 keyboard (Inverted T)\n");
		break;
	case ADB_IBITISOKBD:
		printf("iBook keyboard with inverted T (ISO layout)\n");
		sc->sc_iso = 1;
		break;
	default:
		printf("mapped device (%d)\n", sc->handler_id);
#if 0
		wskbd_eligible = 0;
#endif
		break;
	}
	error = set_adb_info(&adbinfo, sc->adbaddr);
#ifdef ADB_DEBUG
	if (adb_debug)
		printf("akbd: returned %d from set_adb_info\n", error);
#endif

	if (akbd_is_console() && wskbd_eligible)
		a.console = (++akbd_console_initted == 1);
	else
		a.console = 0;
	a.keymap = &akbd_keymapdata;
	a.accessops = &akbd_accessops;
	a.accesscookie = sc;

	sc->sc_wskbddev = config_found(self, &a, wskbddevprint);
}


/*
 * Handle putting the keyboard data received from the ADB into
 * an ADB event record.
 */
void
akbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command)
{
	adb_event_t event;
	struct akbd_softc *sc;
	int adbaddr;
#ifdef ADB_DEBUG
	int i;

	if (adb_debug)
		printf("adb: transaction completion\n");
#endif

	adbaddr = ADB_CMDADDR(adb_command);
	sc = (struct akbd_softc *)data_area;

	event.byte_count = buffer[0];
	memcpy(event.bytes, buffer + 1, event.byte_count);

#ifdef ADB_DEBUG
	if (adb_debug) {
		printf("akbd: from %d at %d (org %d) %d:", adbaddr,
		    sc->handler_id, sc->origaddr, buffer[0]);
		for (i = 1; i <= buffer[0]; i++)
			printf(" %x", buffer[i]);
		printf("\n");
	}
#endif

	if (sc->sc_wskbddev != NULL)
		akbd_processevent(sc, &event);
}

#ifdef notyet
/*
 * Get the actual hardware LED state and convert it to softc format.
 */
u_char
getleds(int addr)
{
	short cmd;
	u_char buffer[9], leds;

	leds = 0x00;	/* all off */
	buffer[0] = 0;

	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, cmd) == 0 &&
	    buffer[0] > 0)
		leds = ~(buffer[2]) & 0x07;

	return (leds);
}

/*
 * Set the keyboard LED's.
 *
 * Automatically translates from ioctl/softc format to the
 * actual keyboard register format
 */
int
setleds(struct akbd_softc *sc, u_char leds)
{
	int addr;
	short cmd;
	u_char buffer[9];

	addr = sc->adbaddr;
	buffer[0] = 0;

	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, cmd) || buffer[0] == 0)
		return (EIO);

	leds = ~leds & 0x07;
	buffer[2] &= 0xf8;
	buffer[2] |= leds;

	cmd = ADBLISTEN(addr, 2);
	adb_op_sync((Ptr)buffer, cmd);

	/* talk R2 */
	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, cmd) || buffer[0] == 0)
		return (EIO);

	if ((buffer[2] & 0xf8) != leds)
		return (EIO);
	else
		return (0);
}

/*
 * Toggle all of the LED's on and off, just for show.
 */
void
blinkleds(struct akbd_softc *sc)
{
	u_char origleds;

	origleds = getleds(sc->adbaddr);
	setleds(sc, LED_NUMLOCK | LED_CAPSLOCK | LED_SCROLL_LOCK);
	delay(400000);
	setleds(sc, origleds);

	if (origleds & LED_NUMLOCK)
		sc->sc_leds |= WSKBD_LED_NUM;
	if (origleds & LED_CAPSLOCK)
		sc->sc_leds |= WSKBD_LED_CAPS;
	if (origleds & LED_SCROLL_LOCK)
		sc->sc_leds |= WSKBD_LED_SCROLL;
}
#endif

int
akbd_enable(void *v, int on)
{
	return 0;
}

void
akbd_set_leds(void *v, int on)
{
#ifdef notyet
	struct akbd_softc *sc = v;
	int leds;

	if (sc->sc_extended) {
		if (sc->sc_leds == on)
			return;

		leds = 0;
		if (on & WSKBD_LED_NUM)
			leds |= LED_NUMLOCK;
		if (on & WSKBD_LED_CAPS)
			leds |= LED_CAPSLOCK;
		if (on & WSKBD_LED_SCROLL)
			leds |= LED_SCROLL_LOCK;

		setleds(sc, leds);
	}
#endif
}

int
akbd_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	struct akbd_softc *sc = v;

	switch (cmd) {

	case WSKBDIO_GTYPE:
		*(int *)data = WSKBD_TYPE_ADB;
		return 0;
	case WSKBDIO_SETLEDS:
		akbd_set_leds(v, *(int *)data);
		return 0;
	case WSKBDIO_GETLEDS:
		*(int *)data = sc->sc_leds;
		return 0;
#ifdef WSDISPLAY_COMPAT_RAWKBD
	case WSKBDIO_SETMODE:
		sc->sc_rawkbd = *(int *)data == WSKBD_RAW;
		return (0);
#endif
	default:
		return (-1);
	}
}

/*
 * The ``caps lock'' key is special: since on earlier keyboards, the physical
 * key stays down when pressed, we will get a notification of the key press,
 * but not of the key release. Then, when it is pressed again, we will not get
 * a notification of the key press, but will see the key release.
 *
 * This is not exactly true. We see the missing release and press events both
 * as the release of the power (reset) key.
 *
 * To avoid confusing them with real power key presses, we maintain two
 * states for the caps lock key: logically down (from wscons' point of view),
 * and ``physically'' down (from the adb messages point of view), to ignore
 * the power key. But since one may press the power key while the caps lock
 * is held down, we also have to remember the state of the power key... this
 * is quite messy.
 */

/*
 * Values for caps lock state machine
 */
#define	CL_DOWN_ADB	0x01
#define	CL_DOWN_LOGICAL	0x02
#define	CL_DOWN_RESET	0x04

/*
 * Given a keyboard ADB event, decode the keycodes and pass them to wskbd.
 */
void
akbd_processevent(struct akbd_softc *sc, adb_event_t *event)
{
	switch (event->byte_count) {
	case 1:
		akbd_capslockwrapper(sc, event->bytes[0]);
		break;
	case 2:
		/*
		 * The reset (or power) key sends 0x7f7f on press and
		 * 0xffff on release, and we ignore it.
		 */
		if (event->bytes[0] == event->bytes[1] &&
		    ADBK_KEYVAL(event->bytes[0]) == ADBK_RESET) {
			if (event->bytes[0] == ADBK_KEYDOWN(ADBK_RESET))
				SET(sc->sc_caps, CL_DOWN_RESET);
			else {
				if (ISSET(sc->sc_caps, CL_DOWN_RESET))
					CLR(sc->sc_caps, CL_DOWN_RESET);
				else if (ISSET(sc->sc_caps, CL_DOWN_ADB)) {
					akbd_input(sc, ISSET(sc->sc_caps,
					    CL_DOWN_LOGICAL) ?
					      ADBK_KEYDOWN(ADBK_CAPSLOCK) :
					      ADBK_KEYUP(ADBK_CAPSLOCK));
					sc->sc_caps ^= CL_DOWN_LOGICAL;
				}
			}
		} else {
			akbd_capslockwrapper(sc, event->bytes[0]);
			akbd_capslockwrapper(sc, event->bytes[1]);
		}
		break;
	default:
#ifdef DIAGNOSTIC
		printf("%s: unexpected message length %d\n",
		    sc->sc_dev.dv_xname, event->byte_count);
#endif
		break;
	}

}

void
akbd_capslockwrapper(struct akbd_softc *sc, int key)
{
	if (ADBK_KEYVAL(key) == ADBK_CAPSLOCK)
		sc->sc_caps ^= CL_DOWN_ADB;

	if (key != 0xff)
		akbd_input(sc, key);
}

static inline int
akbd_iso_swap(int keycode)
{
	switch (keycode) {
	case 10:
		return (50);
	case 50:
		return (10);
	default:
		return (keycode);
	}
}

int adb_polledkey;
void
akbd_input(struct akbd_softc *sc, int key)
{
	int press, val;
	int type;

	press = ADBK_PRESS(key);
	val = ADBK_KEYVAL(key);

	if (sc->sc_iso)
		val = akbd_iso_swap(val);

	type = press ? WSCONS_EVENT_KEY_DOWN : WSCONS_EVENT_KEY_UP;

	if (adb_polling) {
		adb_polledkey = key;
#ifdef WSDISPLAY_COMPAT_RAWKBD
	} else if (sc->sc_rawkbd) {
		char cbuf[2];
		int c, j, s;

		j = 0;

		c = keyboard[val];
		if (c == 0) {
			return; /* XXX */
		}
		if (c & 0x80)
			cbuf[j++] = 0xe0;
		cbuf[j] = c & 0x7f;
		if (type == WSCONS_EVENT_KEY_UP)
			cbuf[j] |= 0x80;
		j++;
		s = spltty();
		wskbd_rawinput(sc->sc_wskbddev, cbuf, j);
		splx(s);
#endif
	} else {
		wskbd_input(sc->sc_wskbddev, type, val);
	}
}
@


1.13
log
@Remove a mac68k leftover, no object change.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.12 2012/01/29 10:54:21 mpi Exp $	*/
d83 1
a83 1
	KB_US,
@


1.12
log
@Swap the keycodes of the two swapped keys of Apple ISO keyboards and update
ISO layouts accordingly.
This fix the US layout on ISO keyboards and the swaped keys issue under X11.

ok miod@@, shadchin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.11 2011/11/09 14:22:37 shadchin Exp $	*/
a427 10

#if defined(__mac68k__)	/* XXX not worth creating akbd_machdep_ioctl() */
	case WSKBDIO_BELL:
	case WSKBDIO_COMPLEXBELL:
#define d ((struct wskbd_bell_data *)data)
		mac68k_ring_bell(d->pitch, d->period * hz / 1000, d->volume);
#undef d
		return (0);
#endif

@


1.11
log
@Auto-repeat keys in WSKBD_RAW mode is not needed.
WSKBD_RAW mode used in X, but X independently implements auto-repeat keys.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.10 2011/06/15 21:32:05 miod Exp $	*/
d130 1
d142 1
d169 1
d179 1
d186 1
d197 1
d204 1
d232 1
d522 13
d544 3
@


1.10
log
@Add a const char* as first member of struct adb_attach_args, so that we can
pass a struct confargs * on macppc for some specific children of the adb
node, and not confuse real adb device attachments.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.9 2011/06/13 16:29:11 shadchin Exp $	*/
a90 1
void	akbd_rawrepeat(void *v);
a238 4
#ifdef WSDISPLAY_COMPAT_RAWKBD
	timeout_set(&sc->sc_rawrepeat_ch, akbd_rawrepeat, sc);
#endif

a417 1
		timeout_del(&sc->sc_rawrepeat_ch);
a434 14
#ifdef WSDISPLAY_COMPAT_RAWKBD
void
akbd_rawrepeat(void *v)
{
	struct akbd_softc *sc = v;
	int s;

	s = spltty();
	wskbd_rawinput(sc->sc_wskbddev, sc->sc_rep, sc->sc_nrep);
	splx(s);
	timeout_add_msec(&sc->sc_rawrepeat_ch, REP_DELAYN);
}
#endif

d530 1
a530 1
		char cbuf[MAXKEYS *2];
a531 1
		int npress;
d533 1
a533 1
		j = npress = 0;
d542 1
a542 1
		if (type == WSCONS_EVENT_KEY_UP) {
a543 6
		} else {
			/* this only records last key pressed */
			if (c & 0x80)
				sc->sc_rep[npress++] = 0xe0;
			sc->sc_rep[npress++] = c & 0x7f;
		}
a547 4
		timeout_del(&sc->sc_rawrepeat_ch);
		sc->sc_nrep = npress;
		if (npress != 0)
			timeout_add_msec(&sc->sc_rawrepeat_ch, REP_DELAY1);
@


1.9
log
@Not need define KEYBOARD_ARRAY (keyboard array used only in dev/adb/akbd.c
if defined WSDISPLAY_COMPAT_RAWKBD). Move keyboard array from dev/adb/keyboard.h
to dev/adb/akbdmap.h.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.8 2010/05/23 15:09:38 deraadt Exp $	*/
d102 3
@


1.8
log
@mac68k can move to defining __mac68k__ instead
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.7 2009/01/21 21:53:59 grange Exp $	*/
a50 4

#ifdef WSDISPLAY_COMPAT_RAWKBD
#define KEYBOARD_ARRAY
#endif
@


1.7
log
@Replace timeout_add(msecs * hz / 1000) with timeout_add_msec(msecs).
No functional changes.

ok krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.6 2007/03/13 20:56:56 miod Exp $	*/
d428 1
a428 1
#ifdef mac68k	/* XXX not worth creating akbd_machdep_ioctl() */
@


1.6
log
@Drop the second and third arguments to adb_op_sync, for they are not used;
while there, remove explicit global variable initializations to zero,
and appease the gods by removing the most ludicrous spurious casts.

No functional change (except for code shrinkage).
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.5 2006/03/23 21:54:26 miod Exp $	*/
d452 1
a452 1
	timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAYN / 1000);
d579 1
a579 1
			timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAY1/1000);
@


1.5
log
@Previous state machine for caps lock would prove ineffective if caps lock
was remapped to a dead key (such as control).

Fortunately (?), accounting power key transitions can help reconstructing
the exact caps lock key behaviour - this state machine is still flawed,
and one can make it go wrong by hitting one of the caps lock and power keys
while the other is held, but for now we'll assume people who do this are
smart enough to be able to put the state machine in the correct state back,
while mere mortals will never do such things anyway.

Spotted by Matthias Kilian, ok itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.4 2006/02/12 21:49:08 miod Exp $	*/
d147 1
a147 1
		    (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) == 0);
d308 1
a308 1
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) == 0 &&
d332 1
a332 1
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) || buffer[0] == 0)
d340 1
a340 1
	adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd);
d344 1
a344 1
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) || buffer[0] == 0)
@


1.4
log
@Remove unused columns from the keyboard[] array. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.3 2006/02/12 18:06:24 miod Exp $	*/
d131 1
d457 24
d496 18
a513 4
		    ADBK_KEYVAL(event->bytes[0]) == ADBK_RESET)
			break;
		akbd_capslockwrapper(sc, event->bytes[0]);
		akbd_capslockwrapper(sc, event->bytes[1]);
d528 5
a532 16
	/*
	 * Caps lock is special: since on earlier keyboards, the physical
	 * key stays down when pressed, we will get a notification of the
	 * key press, but not of the key release. Then, when it is pressed
	 * again, we will not get a notification of the key press, but will
	 * see the key release.
	 * For proper wskbd operation, we should report each capslock
	 * notification as both events (press and release).
	 */
	if (ADBK_KEYVAL(key) == ADBK_CAPSLOCK) {
		akbd_input(sc, ADBK_KEYDOWN(ADBK_CAPSLOCK));
		akbd_input(sc, ADBK_KEYUP(ADBK_CAPSLOCK));
	} else {
		if (key != 0xff)
			akbd_input(sc, key);
	}
@


1.3
log
@Clean up the adb_event structure, now that it is never exported to userland;
also fix handling of caps lock and power keys in akbd; with help from claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.2 2006/02/06 21:25:40 miod Exp $	*/
d52 1
d54 1
d529 1
a529 1
		c = keyboard[val][3];
@


1.2
log
@Attach a wskbd device for unknown adb mapped devices, just in case we lack
one keyboard id.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.1 2006/01/18 23:21:17 miod Exp $	*/
a37 5
#include <sys/fcntl.h>
#include <sys/poll.h>
#include <sys/selinfo.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
a59 7
void	kbd_adbcomplete(caddr_t, caddr_t, int);
void	kbd_processevent(adb_event_t *, struct akbd_softc *);
#ifdef notyet
u_char	getleds(int);
int	setleds(struct akbd_softc *, u_char);
void	blinkleds(struct akbd_softc *);
#endif
d69 3
a71 5
int akbd_enable(void *, int);
void akbd_set_leds(void *, int);
int akbd_ioctl(void *, u_long, caddr_t, int, struct proc *);
int akbd_intr(adb_event_t *, struct akbd_softc *);
void akbd_rawrepeat(void *v);
d89 11
d106 1
a106 1
		return 1;
d108 1
a108 1
		return 0;
d130 1
a130 1
	adbinfo.siServiceRtPtr = (Ptr)kbd_adbcomplete;
d259 1
a259 1
kbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command)
d262 1
a262 1
	struct akbd_softc *ksc;
d272 1
a272 1
	ksc = (struct akbd_softc *)data_area;
a273 3
	event.addr = adbaddr;
	event.hand_id = ksc->handler_id;
	event.def_addr = ksc->origaddr;
d279 2
a280 2
		printf("akbd: from %d at %d (org %d) %d:", event.addr,
		    event.hand_id, event.def_addr, buffer[0]);
d287 2
a288 28
	microtime(&event.timestamp);

	kbd_processevent(&event, ksc);
}

/*
 * Given a keyboard ADB event, record the keycodes and call the key
 * repeat handler, optionally passing the event through the mouse
 * button emulation handler first.
 */
void
kbd_processevent(adb_event_t *event, struct akbd_softc *ksc)
{
        adb_event_t new_event;

        new_event = *event;
	new_event.u.k.key = event->bytes[0];
	new_event.bytes[1] = 0xff;
	if (ksc->sc_wskbddev != NULL) /* wskbd is attached? */
		akbd_intr(&new_event, ksc);
	if (event->bytes[1] != 0xff) {
		new_event.u.k.key = event->bytes[1];
		new_event.bytes[0] = event->bytes[1];
		new_event.bytes[1] = 0xff;
		if (ksc->sc_wskbddev != NULL) /* wskbd is attached? */
			akbd_intr(&new_event, ksc);
	}

d319 1
a319 1
setleds(struct akbd_softc *ksc, u_char leds)
d325 1
a325 4
	if ((leds & 0x07) == (ksc->sc_leds & 0x07))
		return (0);

	addr = ksc->adbaddr;
a343 2
	ksc->sc_leds = ~((u_int8_t)buffer[2]) & 0x07;

d354 1
a354 1
blinkleds(struct akbd_softc *ksc)
d356 1
a356 11
	int addr, i;
	u_char blinkleds, origleds;

	addr = ksc->adbaddr;
	origleds = getleds(addr);
	blinkleds = LED_NUMLOCK | LED_CAPSLOCK | LED_SCROLL_LOCK;

	(void)setleds(ksc, blinkleds);

	for (i = 0; i < 10000; i++)
		delay(50);
d358 11
a368 7
	/* make sure that we restore the LED settings */
	i = 10;
	do {
		(void)setleds(ksc, (u_char)0x00);
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0));

	return;
d381 19
a404 1
#ifdef WSDISPLAY_COMPAT_RAWKBD
a405 1
#endif
d413 1
d416 1
a416 1
		*(int *)data = 0;
d453 5
a457 3
int adb_polledkey;
int
akbd_intr(adb_event_t *event, struct akbd_softc *sc)
d459 22
a480 3
	int key, press, val;
	int type;
	static int shift;
d482 1
a482 1
	key = event->u.k.key;
d484 3
d488 7
a494 5
	 * Caps lock is weird. The key sequence generated is:
	 * press:   down(57) [57]  (LED turns on)
	 * release: up(127)  [255]
	 * press:   up(127)  [255]
	 * release: up(57)   [185] (LED turns off)
d496 8
a503 2
	if (ADBK_KEYVAL(key) == ADBK_CAPSLOCK)
		shift = 0;
d505 6
a510 9
	if (key == 255) {
		if (shift == 0) {
			key = ADBK_KEYUP(ADBK_CAPSLOCK);
			shift = 1;
		} else {
			key = ADBK_KEYDOWN(ADBK_CAPSLOCK);
			shift = 0;
		}
	}
d529 1
a529 1
			return 0; /* XXX */
a549 1
		return 0;
a553 2

	return 0;
@


1.1
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d230 1
d232 1
@

