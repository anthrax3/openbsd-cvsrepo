head	1.16;
access;
symbols
	OPENBSD_4_1:1.14.0.16
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.14
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.12
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.11.0.24
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.22
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.11.0.20
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.18
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.16
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.14
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.12
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.10
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.8
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.6
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2007.06.01.08.04.59;	author deraadt;	state dead;
branches;
next	1.15;

1.15
date	2007.06.01.05.37.12;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.01.12.18.43;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.16.00.30.38;	author margarida;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.31.17.37.49;	author art;	state Exp;
branches;
next	1.11;

1.11
date	97.12.18.00.59.01;	author gene;	state Exp;
branches
	1.11.10.1
	1.11.20.1;
next	1.10;

1.10
date	97.11.10.23.57.04;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.11.06.17.23.08;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	97.11.06.05.58.00;	author csapuntz;	state Exp;
branches;
next	1.7;

1.7
date	97.01.20.15.49.51;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.08.23.19.10.57;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.06.10.07.25.18;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.14.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.02.26.14.18.17;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.24.09.37.00;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.37;	author deraadt;	state Exp;
branches;
next	;

1.11.10.1
date	2003.03.27.22.28.24;	author niklas;	state Exp;
branches;
next	1.11.10.2;

1.11.10.2
date	2003.05.13.19.21.25;	author ho;	state Exp;
branches;
next	;

1.11.20.1
date	2003.05.19.22.41.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.16
log
@really gone
@
text
@@


1.15
log
@remove crufty adosfs.  everytime we try to change a vfs layer interface,
adosfs has the issue and in an entirely different way.  noone uses this
code so this is hte best way to handle the problem
diff from pedro who went to sleep but we need to move ahead; ok thib
@
text
@@


1.14
log
@Unused variable.
Pointed out by John L. Scarfone <j0@@cox.net>
@
text
@a0 277
/*	$OpenBSD: adlookup.c,v 1.13 2003/03/16 00:30:38 margarida Exp $	*/
/*	$NetBSD: adlookup.c,v 1.17 1996/10/25 23:13:58 cgd Exp $	*/

/*
 * Copyright (c) 1994 Christian E. Hopps
 * Copyright (c) 1996 Matthias Scheler
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christian E. Hopps.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/vnode.h>
#include <sys/namei.h>
#include <sys/mount.h>
#include <sys/time.h>
#include <sys/queue.h>
#include <adosfs/adosfs.h>

#ifdef ADOSFS_EXACTMATCH
#define strmatch(s1, l1, s2, l2, i) \
    ((l1) == (l2) && bcmp((s1), (s2), (l1)) == 0)
#else
#define strmatch(s1, l1, s2, l2, i) \
    ((l1) == (l2) && adoscaseequ((s1), (s2), (l1), (i)))
#endif

/*
 * adosfs lookup. enters with:
 * pvp (parent vnode) referenced and locked.
 * exit with:
 *	target vp referenced and locked.
 *	unlock pvp unless LOCKPARENT and at end of search.
 * special cases:
 *	pvp == vp, just ref pvp, pvp already holds a ref and lock from
 *	    caller, this will not occur with RENAME or CREATE.
 *	LOOKUP always unlocks parent if last element. (not now!?!?)
 */
int
adosfs_lookup(v)
	void *v;
{
	struct vop_lookup_args /* {
		struct vnode *a_dvp;
		struct vnode **a_vpp;
		struct componentname *a_cnp;
	} */ *sp = v;
	int nameiop, last, lockp, wantp, flags, error, nocache, i;
	struct componentname *cnp;
	struct vnode **vpp;	/* place to store result */
	struct anode *ap;	/* anode to find */
	struct vnode *vdp;	/* vnode of search dir */
	struct anode *adp;	/* anode of search dir */
	struct ucred *ucp;	/* lookup credentials */
	struct proc  *p;
	u_int32_t plen, hval;
	daddr_t bn;
	char *pelt;

#ifdef ADOSFS_DIAGNOSTIC
	advopprint(sp);
#endif
	cnp = sp->a_cnp;
	vdp = sp->a_dvp;
	adp = VTOA(vdp);
	vpp = sp->a_vpp;
	*vpp = NULL;
	ucp = cnp->cn_cred;
	nameiop = cnp->cn_nameiop;
	cnp->cn_flags &= ~PDIRUNLOCK;
	flags = cnp->cn_flags;
	last = flags & ISLASTCN;
	lockp = flags & LOCKPARENT;
	wantp = flags & (LOCKPARENT | WANTPARENT);
	pelt = cnp->cn_nameptr;
	plen = cnp->cn_namelen;
	p = cnp->cn_proc;
	nocache = 0;
	
	/* 
	 * check that:
	 * pvp is a dir, and that the user has rights to access 
	 */
	if (vdp->v_type != VDIR)
		return (ENOTDIR);
	if ((error = VOP_ACCESS(vdp, VEXEC, ucp, cnp->cn_proc)) != 0)
		return (error);
	if ((flags & ISLASTCN) && (vdp->v_mount->mnt_flag & MNT_RDONLY) &&
	    (cnp->cn_nameiop == DELETE || cnp->cn_nameiop == RENAME))
		return (EROFS);

	/*
	 * Before tediously performing a linear scan of the directory,
	 * check the name cache to see if the directory/name pair
	 * we are looking for is known already.
	 */
	if ((error = cache_lookup(vdp, vpp, cnp)) >= 0)
		return (error);

	/*
	 * fake a '.'
	 */
	if (plen == 1 && pelt[0] == '.') {
		/* see special cases in prologue. */
		*vpp = vdp;
		goto found;
	}
	/*
	 * fake a ".."
	 */
	if (flags & ISDOTDOT) {
		if (vdp->v_type == VDIR && (vdp->v_flag & VROOT)) 
			panic("adosfs .. attempted lookup through root");
		/*
		 * cannot get `..' while `vdp' is locked
		 * e.g. procA holds lock on `..' and waits for `vdp'
		 * we wait for `..' and hold lock on `vdp'. deadlock.
		 * because `vdp' may have been achieved through symlink
		 * fancy detection code that decreases the race
		 * window size is not reasonably possible.
		 *
		 * basically unlock the parent, try and lock the child (..)
		 * if that fails relock the parent (ignoring error) and 
		 * fail.  Otherwise we have the child (..) if this is the
		 * last and the caller requested LOCKPARENT, attempt to
		 * relock the parent.  If that fails unlock the child (..)
		 * and fail. Otherwise we have succeeded.
		 * 
		 */
		VOP_UNLOCK(vdp, 0, p); /* race */
		cnp->cn_flags |= PDIRUNLOCK;
		if ((error = VFS_VGET(vdp->v_mount, ABLKTOINO(adp->pblock),
		    vpp)) != 0) {
			if (vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p) == 0)
				cnp->cn_flags &= ~PDIRUNLOCK;
		} else if (last && lockp) {
			if ((error = vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p)))
				vput(*vpp);
			else
				cnp->cn_flags &= ~PDIRUNLOCK;
		}
		if (error) {
			*vpp = NULL;
			return (error);
		}
		goto found_lockdone;
	}

	/*
	 * hash the name and grab the first block in chain
	 * then walk the chain. if chain has not been fully
	 * walked before, track the count in `tabi'
	 */
	hval = adoshash(pelt, plen, adp->ntabent, IS_INTER(adp->amp));
	bn = adp->tab[hval];
	i = min(adp->tabi[hval], 0);
	while (bn != 0) {
		if ((error = VFS_VGET(vdp->v_mount, ABLKTOINO(bn), vpp)) !=
		    0) {
#ifdef ADOSFS_DIAGNOSTIC
			printf("[aget] %d)", error);
#endif
			/* XXX check to unlock parent possibly? */
			return(error);
		}
		ap = VTOA(*vpp);
		if (i <= 0) {
			if (--i < adp->tabi[hval])
				adp->tabi[hval] = i;	
			/*
			 * last header in chain lock count down by
			 * negating it to positive
			 */
			if (ap->hashf == 0) {
#ifdef DEBUG
				if (i != adp->tabi[hval])
					panic("adlookup: wrong chain count");
#endif
				adp->tabi[hval] = -adp->tabi[hval];
			}
		}
		if (strmatch(pelt, plen, ap->name, strlen(ap->name), 
		    IS_INTER(adp->amp)))
			goto found;
		bn = ap->hashf;
		vput(*vpp);
	}
	*vpp = NULL;
	/*
	 * not found
	 */
	if ((nameiop == CREATE || nameiop == RENAME) && last) {
		if ((error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) != 0)
		    {
#ifdef ADOSFS_DIAGNOSTIC
			printf("[VOP_ACCESS] %d)", error);
#endif
			return (error);
		}
		if (lockp == 0) {
			VOP_UNLOCK(vdp, 0, p);
			cnp->cn_flags |= PDIRUNLOCK;
		}
		cnp->cn_nameiop |= SAVENAME;
#ifdef ADOSFS_DIAGNOSTIC
		printf("EJUSTRETURN)");
#endif
		return(EJUSTRETURN);
	}
	if ((cnp->cn_flags & MAKEENTRY) && nameiop != CREATE)
		cache_enter(vdp, NULL, cnp);
#ifdef ADOSFS_DIAGNOSTIC
	printf("ENOENT)");
#endif
	return(ENOENT);

found:
	if (nameiop == DELETE && last)  {
		if ((error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) != 0)
		    {
			if (vdp != *vpp)
				vput(*vpp);
			*vpp = NULL;
			return (error);
		}
		nocache = 1;
	} 
	if (nameiop == RENAME && wantp && last) {
		if (vdp == *vpp)
			return(EISDIR);
		if ((error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) != 0)
		    {
			vput(*vpp);
			*vpp = NULL;
			return (error);
		}
		cnp->cn_flags |= SAVENAME;
		nocache = 1;
	}
	if (vdp == *vpp)
		VREF(vdp);
	else if (lockp == 0 || last == 0) {
		VOP_UNLOCK(vdp, 0, p);
		cnp->cn_flags |= PDIRUNLOCK;
	}
found_lockdone:
	if ((cnp->cn_flags & MAKEENTRY) && nocache == 0)
		cache_enter(vdp, *vpp, cnp);

#ifdef ADOSFS_DIAGNOSTIC
	printf("0)\n");
#endif
	return(0);
}
@


1.13
log
@typos
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.12 2003/01/31 17:37:49 art Exp $	*/
d79 1
a79 1
	u_int32_t plen, hval, vpid;
@


1.12
log
@File system locking fixups, mostly from NetBSD:
- cache_lookup
        move common code from various fs's here
        always return with vnode and parent locked
        adjust return codes
- PDIRUNLOCK - new flag set if lookup couldn't lock parent vnode
- kernfs and procfs
        lock vnode in get_root
        don't unlock (again) in kernfs_freevp
        fix memory leak in procfs

From tedu@@stanford.edu
deraadt@@ and various other ok
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.11 1997/12/18 00:59:01 gene Exp $	*/
d141 1
a141 1
		 * becuase `vdp' may have been acheived through symlink
d150 1
a150 1
		 * and fail. Otherwise we have succeded.
@


1.11
log
@trivia: typo in kernel panic
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.10 1997/11/10 23:57:04 niklas Exp $	*/
d93 1
d111 4
d116 3
a118 2
	 * cache lookup algorithm borrowed from ufs_lookup()
	 * its not consistent with otherthings in this function..
d120 2
a121 31
	if ((error = cache_lookup(vdp, vpp, cnp)) != 0) {
		if (error == ENOENT)
			return (error);

		vpid = (*vpp)->v_id;
		if (vdp == *vpp) {
			VREF(vdp);
			error = 0;
		} else if (flags & ISDOTDOT) {
			VOP_UNLOCK(vdp, 0, p);	/* race */
			error = vget(*vpp, LK_EXCLUSIVE, p);
			if (error == 0 && lockp && last)
				error =
				    vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p);
		} else {
			error = vget(*vpp, LK_EXCLUSIVE, p);
			/* if (lockp == 0 || error || last) */
			if (lockp == 0 || error || last == 0)
				VOP_UNLOCK(vdp, 0, p);
		}
		if (error == 0) {
			if (vpid == vdp->v_id)
				return (0);
			vput(*vpp);
			if (lockp && vdp != *vpp && last)
				VOP_UNLOCK(vdp, 0, p);
		}
		*vpp = NULL;
		if ((error = vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p)) != 0)
			return (error);
	}
d154 1
d156 9
a164 5
		    vpp)) != 0)
			vn_lock(vdp, LK_RETRY | LK_EXCLUSIVE, p);
		else if (last && lockp && 
			 (error = vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p)))
			vput(*vpp);
d223 1
a223 1
		if (lockp == 0)
d225 2
d265 1
a265 1
	else if (lockp == 0 || last == 0)
d267 2
@


1.11.20.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d79 1
a79 1
	u_int32_t plen, hval;
a92 1
	cnp->cn_flags &= ~PDIRUNLOCK;
a109 4
	if ((flags & ISLASTCN) && (vdp->v_mount->mnt_flag & MNT_RDONLY) &&
	    (cnp->cn_nameiop == DELETE || cnp->cn_nameiop == RENAME))
		return (EROFS);

d111 2
a112 3
	 * Before tediously performing a linear scan of the directory,
	 * check the name cache to see if the directory/name pair
	 * we are looking for is known already.
d114 31
a144 2
	if ((error = cache_lookup(vdp, vpp, cnp)) >= 0)
		return (error);
d164 1
a164 1
		 * because `vdp' may have been achieved through symlink
d173 1
a173 1
		 * and fail. Otherwise we have succeeded.
a176 1
		cnp->cn_flags |= PDIRUNLOCK;
d178 5
a182 9
		    vpp)) != 0) {
			if (vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p) == 0)
				cnp->cn_flags &= ~PDIRUNLOCK;
		} else if (last && lockp) {
			if ((error = vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p)))
				vput(*vpp);
			else
				cnp->cn_flags &= ~PDIRUNLOCK;
		}
d241 1
a241 1
		if (lockp == 0) {
a242 2
			cnp->cn_flags |= PDIRUNLOCK;
		}
d281 1
a281 1
	else if (lockp == 0 || last == 0) {
a282 2
		cnp->cn_flags |= PDIRUNLOCK;
	}
@


1.11.10.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a92 1
	cnp->cn_flags &= ~PDIRUNLOCK;
a109 4
	if ((flags & ISLASTCN) && (vdp->v_mount->mnt_flag & MNT_RDONLY) &&
	    (cnp->cn_nameiop == DELETE || cnp->cn_nameiop == RENAME))
		return (EROFS);

d111 2
a112 3
	 * Before tediously performing a linear scan of the directory,
	 * check the name cache to see if the directory/name pair
	 * we are looking for is known already.
d114 31
a144 2
	if ((error = cache_lookup(vdp, vpp, cnp)) >= 0)
		return (error);
d164 1
a164 1
		 * because `vdp' may have been achieved through symlink
d173 1
a173 1
		 * and fail. Otherwise we have succeeded.
a176 1
		cnp->cn_flags |= PDIRUNLOCK;
d178 5
a182 9
		    vpp)) != 0) {
			if (vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p) == 0)
				cnp->cn_flags &= ~PDIRUNLOCK;
		} else if (last && lockp) {
			if ((error = vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p)))
				vput(*vpp);
			else
				cnp->cn_flags &= ~PDIRUNLOCK;
		}
d241 1
a241 1
		if (lockp == 0) {
a242 2
			cnp->cn_flags |= PDIRUNLOCK;
		}
d281 1
a281 1
	else if (lockp == 0 || last == 0) {
a282 2
		cnp->cn_flags |= PDIRUNLOCK;
	}
@


1.11.10.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.11.10.1 2003/03/27 22:28:24 niklas Exp $	*/
d79 1
a79 1
	u_int32_t plen, hval;
@


1.10
log
@Use vfs lite2 lockmanager.  Add advisory locking.  some KNF.
some extra pathconf ops supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.9 1997/11/06 17:23:08 csapuntz Exp $	*/
d159 1
a159 1
			panic("adosfs .. attemped through root");
@


1.9
log
@More fixes for adosfs so it compiles with VFS Lite 2
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.8 1997/11/06 05:58:00 csapuntz Exp $	*/
d126 2
a127 1
				error = vn_lock(vdp, LK_EXCLUSIVE | LK_RETRY, p);
d234 2
a235 1
		if ((error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) != 0) {
d258 2
a259 1
		if ((error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) != 0) {
d270 2
a271 1
		if ((error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) != 0) {
@


1.8
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.7 1997/01/20 15:49:51 niklas Exp $	*/
d128 1
a128 1
			error = vget(*vpp, 1);
@


1.7
log
@Type pedantery.. a lot of it too, more could be done as well.  Sync with
NetBSD 970118 too.
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.6 1996/08/23 19:10:57 niklas Exp $	*/
d78 1
d99 1
d123 2
a124 2
			VOP_UNLOCK(vdp);	/* race */
			error = vget(*vpp, 1);
d126 1
a126 1
				error = VOP_LOCK(vdp);
d131 1
a131 1
				VOP_UNLOCK(vdp);
d138 1
a138 1
				VOP_UNLOCK(vdp);
d141 1
a141 1
		if ((error = VOP_LOCK(vdp)) != 0)
d175 1
a175 1
		VOP_UNLOCK(vdp); /* race */
d178 3
a180 2
			VOP_LOCK(vdp);
		else if (last && lockp && (error = VOP_LOCK(vdp)))
d240 1
a240 1
			VOP_UNLOCK(vdp);
d278 1
a278 1
		VOP_UNLOCK(vdp);
@


1.6
log
@Some style and signedness pedantery
@
text
@d1 2
a2 2
/*	$OpenBSD: adlookup.c,v 1.5 1996/06/10 07:25:18 deraadt Exp $	*/
/*	$NetBSD: adlookup.c,v 1.13.4.1 1996/05/27 09:53:50 is Exp $	*/
d78 3
a80 2
	u_long bn, plen, hval, vpid;
	u_char *pelt;
d96 1
a96 1
	pelt = (u_char *)cnp->cn_nameptr;
d174 2
a175 2
		if ((error = VFS_VGET(vdp->v_mount, 
				      (ino_t)adp->pblock, vpp)) != 0)
d195 2
a196 1
		if ((error = VFS_VGET(vdp->v_mount, (ino_t)bn, vpp)) != 0) {
@


1.5
log
@internationalize, 64 bit clean
@
text
@d1 1
a1 1
/*	$OpenBSD: adlookup.c,v 1.3 1996/02/26 14:18:17 niklas Exp $	*/
d71 1
a71 1
	int nameiop, last, lockp, wantp, flags, error, vpid, nocache, i;
d78 1
a78 1
	u_long bn, plen, hval;
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d2 1
a2 1
/*	$NetBSD: adlookup.c,v 1.13 1996/04/05 05:06:07 mhitch Exp $	*/
d44 1
a44 1
#define strmatch(s1, l1, s2, l2) \
d47 2
a48 2
#define strmatch(s1, l1, s2, l2) \
    ((l1) == (l2) && strncasecmp((s1), (s2), (l1)) == 0)
d217 2
a218 1
		if (strmatch(pelt, plen, ap->name, strlen(ap->name)))
@


1.3
log
@Addition of $OpenBSD$ RCSID.
From NetBSD: Rename struct timespec fields to conform to POSIX.1b
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: adlookup.c,v 1.12 1996/02/13 17:05:47 christos Exp $	*/
d6 1
d79 1
a79 1
	char *pelt;
d95 1
a95 1
	pelt = cnp->cn_nameptr;
d190 1
a190 1
	hval = adoshash(pelt, plen, adp->ntabent);
@


1.2
log
@Add forward decls.
Fix vop_link, vop_symlink, and vop_remove semantics in several ways:
* Change the argument names to vop_link so they actually make sense.
* Implement vop_link and vop_symlink for all file systems, so they do proper
  cleanup.
* Require the file system to decide whether or not linking and unlinking of
  directories is allowed, and disable it for all current file systems.
Adosfs prototyping changes.  Compiler warning police.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: adlookup.c,v 1.10 1995/08/18 15:14:33 chopps Exp $	*/
d45 2
a46 20
int
strmatch(s1, l1, s2, l2)
	char *s1, *s2;
	int l1, l2;
{
	if (l1 != l2)
		return 0;
	while (--l1 >= 0) {
		char c;
		c = *s1++;
		if (c != *s2) {
			if (c >= 'A' && c <= 'Z' && c + ('a' - 'A') != *s2)
				return 0;
			if (c >= 'a' && c <= 'z' && c + ('A' - 'a') != *s2)
				return 0;
		}
		++s2;
	}
	return 1;
}
d61 3
a63 1
adosfs_lookup(sp)
d68 1
a68 2
	} */ *sp;
{
d103 1
a103 1
	if (error = VOP_ACCESS(vdp, VEXEC, ucp, cnp->cn_proc))
d109 1
a109 1
	if (error = cache_lookup(vdp, vpp, cnp)) {
d136 1
a136 1
		if (error = VOP_LOCK(vdp))
d171 2
a172 1
		if (error = VFS_VGET(vdp->v_mount, (ino_t)adp->pblock, vpp))
d192 1
a192 1
		if (error = VFS_VGET(vdp->v_mount, (ino_t)bn, vpp)) {
d225 1
a225 1
		if (error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) {
d248 1
a248 1
		if (error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) {
d259 1
a259 1
		if (error = VOP_ACCESS(vdp, VWRITE, ucp, cnp->cn_proc)) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
