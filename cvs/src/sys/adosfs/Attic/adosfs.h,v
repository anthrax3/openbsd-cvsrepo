head	1.14;
access;
symbols
	OPENBSD_4_1:1.12.0.14
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.12
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.10
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.8.0.16
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.14
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.12
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.10
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.8
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2007.06.01.08.04.59;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2007.06.01.05.37.12;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.13.17.23.57;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.25;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.19.08.58.05;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.10.04.45.31;	author art;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	98.08.21.23.03.13;	author csapuntz;	state Exp;
branches
	1.8.8.1;
next	1.7;

1.7
date	97.11.10.23.57.04;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.01.20.15.49.52;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.06.10.07.25.18;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.14.36;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.02.26.14.18.18;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.24.09.37.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.37;	author deraadt;	state Exp;
branches;
next	;

1.8.8.1
date	2002.03.28.11.26.44;	author niklas;	state Exp;
branches;
next	1.8.8.2;

1.8.8.2
date	2004.02.19.10.51.21;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.27.30;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@really gone
@
text
@@


1.13
log
@remove crufty adosfs.  everytime we try to change a vfs layer interface,
adosfs has the issue and in an entirely different way.  noone uses this
code so this is hte best way to handle the problem
diff from pedro who went to sleep but we need to move ahead; ok thib
@
text
@@


1.12
log
@common cleaning.
@
text
@a0 152
/*	$OpenBSD: adosfs.h,v 1.11 2002/03/14 01:26:25 millert Exp $	*/
/*	$NetBSD: adosfs.h,v 1.12 1996/10/08 22:18:02 thorpej Exp $	*/

/*
 * Copyright (c) 1994 Christian E. Hopps
 * Copyright (c) 1996 Matthias Scheler
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christian E. Hopps.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Amigados datestamp. (from 1/1/1978 00:00:00 local)
 */
struct datestamp {
	u_int32_t days;
	u_int32_t mins;
	u_int32_t ticks;	/* 20000 * (ticks % 50) = useconds */
				/* ticks / 50 = seconds */
};

enum anode_type { AROOT, ADIR, AFILE, ALDIR, ALFILE, ASLINK };

/* 
 * similar to inode's, we use to represent:
 * the root dir, reg dirs, reg files and extension blocks
 * note the ``tab'' is a hash table for r/d, and a data block
 * table for f/e. it is always ANODETABSZ(ap) bytes in size.
 */
struct anode {
	LIST_ENTRY(anode) link;
	enum anode_type type;
	char name[31];			/* (r/d/f) name for object */
	struct datestamp mtimev;	/* (r) volume modified */
	struct datestamp created;	/* (r) volume created */
	struct datestamp mtime;		/* (r/d/f) last modified */
	struct adosfsmount *amp;	/* owner file system */
	struct vnode *vp;		/* owner vnode */
	struct lockf *a_lockf;		/* byte level lock list */
	struct lock a_lock;		/* anode lock */
	u_int32_t fsize;		/* (f) size of file in bytes */
	daddr_t block;			/* block num */
	daddr_t pblock;			/* (d/f/e) parent block */
	daddr_t hashf;			/* (d/f) hash forward */
	daddr_t extb;			/* (f/e) extension block number */
	daddr_t linkto;			/* (hd/hf) hdr this link points at */
	daddr_t linknext;		/* (d/f/hd/hf) next chain link/head */
	daddr_t lastlindblk;		/* (f/hf) last logical indirect blk */
	daddr_t lastindblk;		/* (f/hf) last indirect block read */
	daddr_t *tab;			/* (r/d) hash table */
	int *tabi;			/* (r/d) table info */
	int ntabent;			/* (r/d) number of entries in table */
	int nwords;			/* size of blocks in 32-bit words */
	int adprot;			/* (d/f) amigados protection bits */
	uid_t uid;			/* (d/f) uid of directory/file */
	gid_t gid;			/* (d/f) gid of directory/file */
	char *slinkto;			/* name of file or dir */
};
#define VTOA(vp)		((struct anode *)(vp)->v_data)
#define ATOV(ap)		((ap)->vp)
#define ANODETABENT(ap)		((ap)->nwords - 56)
#define ANODENDATBLKENT(ap)	((ap)->nwords - 56)
#define ABLKTOINO(bn)		((ino_t)(bn))
#define AINOTOBLK(bn)		((daddr_t)(bn))
/*
 * mount data 
 */
#define ANODEHASHSZ (512)

struct adosfsmount {
	LIST_HEAD(anodechain, anode) anodetab[ANODEHASHSZ];
	struct mount *mp;	/* owner mount */
	u_int32_t dostype;	/* type of volume */
	daddr_t rootb;		/* root block number */
	int secsperblk;		/* sectors per block */
	int bsize;		/* size of blocks */
	int nwords;		/* size of blocks in long words */
	int dbsize;		/* data bytes per block */
	uid_t uid;		/* uid of mounting user */
	gid_t gid;		/* gid of mounting user */
	mode_t mask;		/* mode mask */
	struct vnode *devvp;	/* blk device mounted on */
	struct vnode *rootvp;	/* out root vnode */
	struct netexport export;
	u_int32_t *bitmap;	/* allocation bitmap */
	u_int32_t numblks;	/* number of usable blocks */
	u_int32_t freeblks;	/* number of free blocks */
};
#define VFSTOADOSFS(mp) ((struct adosfsmount *)(mp)->mnt_data)

#define IS_FFS(amp)	((amp)->dostype & 1)
#define IS_INTER(amp)	(((amp)->dostype & 7) > 1)

/*
 * AmigaDOS block stuff.
 */
#define BBOFF		(0)

#define BPT_SHORT	((u_int32_t)2)
#define BPT_DATA	((u_int32_t)8)
#define BPT_LIST	((u_int32_t)16)

#define BST_RDIR	((u_int32_t)1)
#define BST_UDIR	((u_int32_t)2)
#define BST_SLINK	((u_int32_t)3)
#define BST_LDIR	((u_int32_t)4)
#define BST_FILE	((u_int32_t)-3)
#define BST_LFILE	((u_int32_t)-4)

#define	OFS_DATA_OFFSET	(24)

/*
 * utility protos
 */
#define adoswordn(bp,wn) betoh32(*((u_int32_t *)(bp)->b_data + (wn)))

u_int32_t	 adoscksum(struct buf *, int);
int		 adoscaseequ(const char *, const char *, int, int);
int		 adoshash(const char *, int, int, int);
int		 adunixprot(int);
int		 adosfs_getblktype(struct adosfsmount *, struct buf *);

struct vnode	*adosfs_ahashget(struct mount *, ino_t);
int		 adosfs_ainshash(struct adosfsmount *, struct anode *);
void		 adosfs_aremhash(struct anode *);

int		 adosfs_lookup(void *);

extern int	(**adosfs_vnodeop_p)(void *);
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: adosfs.h,v 1.10 2001/12/19 08:58:05 art Exp $	*/
d152 1
a152 1
int		(**adosfs_vnodeop_p)(void *);
@


1.10
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: adosfs.h,v 1.8 1998/08/21 23:03:13 csapuntz Exp $	*/
d140 9
a148 9
u_int32_t	 adoscksum __P((struct buf *, int));
int		 adoscaseequ __P((const char *, const char *, int, int));
int		 adoshash __P((const char *, int, int, int));
int		 adunixprot __P((int));
int		 adosfs_getblktype __P((struct adosfsmount *, struct buf *));

struct vnode	*adosfs_ahashget __P((struct mount *, ino_t));
int		 adosfs_ainshash __P((struct adosfsmount *, struct anode *));
void		 adosfs_aremhash __P((struct anode *));
d150 1
a150 1
int		 adosfs_lookup __P((void *));
d152 1
a152 1
int		(**adosfs_vnodeop_p) __P((void *));
@


1.9
log
@Big cleanup inspired by NetBSD with some parts of the code from NetBSD.
 - get rid of VOP_BALLOCN and VOP_SIZE
 - move the generic getpages and putpages into miscfs/genfs
 - create a genfs_node which must be added to the top of the private portion
   of each vnode for filsystems that want to use genfs_{get,put}pages
 - rename genfs_mmap to vop_generic_mmap
@
text
@a34 2
#include <miscfs/genfs/genfs.h>

a53 1
	struct genfs_node gnode;
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: adosfs.h,v 1.9 2001/12/10 04:45:31 art Exp $	*/
d143 9
a151 9
u_int32_t	 adoscksum(struct buf *, int);
int		 adoscaseequ(const char *, const char *, int, int);
int		 adoshash(const char *, int, int, int);
int		 adunixprot(int);
int		 adosfs_getblktype(struct adosfsmount *, struct buf *);

struct vnode	*adosfs_ahashget(struct mount *, ino_t);
int		 adosfs_ainshash(struct adosfsmount *, struct anode *);
void		 adosfs_aremhash(struct anode *);
d153 1
a153 1
int		 adosfs_lookup(void *);
d155 1
a155 1
int		(**adosfs_vnodeop_p)(void *);
@


1.8
log
@

Fix malloc race on new anode get.
@
text
@d1 1
a1 1
/*	$OpenBSD: adosfs.h,v 1.7 1997/11/10 23:57:04 niklas Exp $	*/
d35 2
d56 1
@


1.8.8.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d140 9
a148 9
u_int32_t	 adoscksum(struct buf *, int);
int		 adoscaseequ(const char *, const char *, int, int);
int		 adoshash(const char *, int, int, int);
int		 adunixprot(int);
int		 adosfs_getblktype(struct adosfsmount *, struct buf *);

struct vnode	*adosfs_ahashget(struct mount *, ino_t);
int		 adosfs_ainshash(struct adosfsmount *, struct anode *);
void		 adosfs_aremhash(struct anode *);
d150 1
a150 1
int		 adosfs_lookup(void *);
d152 1
a152 1
int		(**adosfs_vnodeop_p)(void *);
@


1.8.8.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d152 1
a152 1
extern int	(**adosfs_vnodeop_p)(void *);
@


1.7
log
@Use vfs lite2 lockmanager.  Add advisory locking.  some KNF.
some extra pathconf ops supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: adosfs.h,v 1.6 1997/01/20 15:49:52 niklas Exp $	*/
d147 1
a147 1
void		 adosfs_ainshash __P((struct adosfsmount *, struct anode *));
@


1.6
log
@Type pedantery.. a lot of it too, more could be done as well.  Sync with
NetBSD 970118 too.
@
text
@d1 1
a1 1
/*	$OpenBSD: adosfs.h,v 1.5 1996/06/10 07:25:18 deraadt Exp $	*/
a45 1
enum anode_flags { AWANT = 0x1, ALOCKED = 0x2 };
d62 2
a79 1
	int flags;			/* misc flags */ 
d138 1
a138 1
#define adoswordn(bp,wn) ntohl(*((u_int32_t *)(bp)->b_data + (wn)))
@


1.5
log
@internationalize, 64 bit clean
@
text
@d1 2
a2 2
/*	$OpenBSD: adosfs.h,v 1.3 1996/02/26 14:18:18 niklas Exp $	*/
/*	$NetBSD: adosfs.h,v 1.10.4.2 1996/05/27 10:21:26 is Exp $	*/
d57 1
a57 1
	char name[31];		/* (r/d/f) name for object */
d60 1
a60 1
	struct datestamp mtime;	/* (r/d/f) last modified */
d62 19
a80 19
	struct vnode *vp;	/* owner vnode */
	u_long fsize;		/* (f) size of file in bytes */
	u_long block;		/* block num */
	u_long pblock;		/* (d/f/e) parent block */
	u_long hashf;		/* (d/f) hash forward */
	u_long extb;		/* (f/e) extension block number */
	u_long linkto;		/* (hd/hf) header this link points at */
	u_long linknext;	/* (d/f/hd/hf) next link (or head) in chain */
	u_long lastlindblk;	/* (f/hf) last logical indirect block */
	u_long lastindblk;	/* (f/hf) last indirect block read */
	u_long *tab;		/* (r/d) hash table */
	int *tabi;		/* (r/d) table info */
	int ntabent;		/* (r/d) number of entries in table */
	int nwords;		/* size of blocks in long words */
	int adprot;		/* (d/f) amigados protection bits */
	uid_t  uid;		/* (d/f) uid of directory/file */
	gid_t  gid;		/* (d/f) gid of directory/file */
	int flags;		/* misc flags */ 
	char *slinkto;		/* name of file or dir */
a83 1
#define ANODETABSZ(ap)		(((ap)->nwords - 56) * sizeof(long))
d86 2
a87 1

d97 8
a104 8
	u_long rootb;		/* root block number */
	u_long secsperblk;	/* sectors per block */
	u_long bsize;		/* size of blocks */
	u_long nwords;		/* size of blocks in long words */
	u_long dbsize;		/* data bytes per block */
	uid_t  uid;		/* uid of mounting user */
	gid_t  gid;		/* gid of mounting user */
	u_long mask;		/* mode mask */
d108 3
a110 3
	u_long *bitmap;		/* allocation bitmap */
	u_long numblks;		/* number of usable blocks */
	u_long freeblks;	/* number of free blocks */
d138 11
a148 15
#ifndef m68k
u_int32_t adoswordn __P((struct buf *, int));
#else
#define adoswordn(bp,wn) (*((u_int32_t *)(bp)->b_data + (wn)))
#endif

u_int32_t adoscksum __P((struct buf *, int));
int adoscaseequ __P((const u_char *, const u_char *, int, int));
int adoshash __P((const u_char *, int, int, int));
int adunixprot __P((int));
int adosfs_getblktype __P((struct adosfsmount *, struct buf *));

struct vnode *adosfs_ahashget __P((struct mount *, ino_t));
void adosfs_ainshash __P((struct adosfsmount *, struct anode *));
void adosfs_aremhash __P((struct anode *));
d150 1
a150 1
int adosfs_lookup __P((void *));
d152 1
a152 1
int (**adosfs_vnodeop_p) __P((void *));
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d2 1
a2 1
/*	$NetBSD: adosfs.h,v 1.10 1996/04/05 05:06:08 mhitch Exp $	*/
d39 3
a41 3
	u_long days;
	u_long mins;
	u_long ticks;		/* 20000 * (ticks % 50) = useconds */
d96 1
a96 1
	u_long dostype;		/* type of volume */
d122 10
a131 10
#define BPT_SHORT	(2)
#define BPT_DATA	(8)
#define BPT_LIST	(16)

#define BST_RDIR	(1)
#define BST_UDIR	(2)
#define BST_SLINK	(3)
#define BST_LDIR	(4)
#define BST_FILE	(-3L)
#define BST_LFILE	(-4L)
d139 1
a139 1
long adoswordn __P((struct buf *, int));
d141 1
a141 1
#define adoswordn(bp,wn) (*((long *)(bp)->b_data + (wn)))
d144 2
a145 1
long adoscksum __P((struct buf *, long));
@


1.3
log
@Addition of $OpenBSD$ RCSID.
From NetBSD: Rename struct timespec fields to conform to POSIX.1b
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: adosfs.h,v 1.9 1996/02/09 19:06:39 christos Exp $	*/
d6 1
d82 4
a85 4
#define VTOA(vp)	((struct anode *)(vp)->v_data)
#define ATOV(ap)	((ap)->vp)
#define ANODETABSZ(ap)	(((ap)->nwords - 56) * sizeof(long))
#define ANODETABENT(ap)	((ap)->nwords - 56)
d96 1
d98 1
a98 2
	u_long startb;		/* start block */
	u_long endb;		/* one block past last */
d101 1
d108 3
d114 3
d120 2
d123 1
d133 2
d138 1
d140 4
d145 1
a145 1
int adoshash __P((const char *, int, int));
@


1.2
log
@Add forward decls.
Fix vop_link, vop_symlink, and vop_remove semantics in several ways:
* Change the argument names to vop_link so they actually make sense.
* Implement vop_link and vop_symlink for all file systems, so they do proper
  cleanup.
* Require the file system to decide whether or not linking and unlinking of
  directories is allowed, and disable it for all current file systems.
Adosfs prototyping changes.  Compiler warning police.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: adosfs.h,v 1.8 1995/08/18 15:14:35 chopps Exp $	*/
d127 2
d134 1
a134 1
int adosfs_lookup __P((struct vop_lookup_args *));
d136 1
a136 1
int (**adosfs_vnodeop_p)();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
