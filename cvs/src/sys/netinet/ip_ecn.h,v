head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.18
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.20
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.14
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.16
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.12
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.10
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.40
	OPENBSD_5_0:1.5.0.38
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.36
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.34
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.30
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.32
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.28
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.03.15.16.37.11;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.16.14.10.51;	author kjc;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.09.07.03.41;	author angelos;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.02.16.08.48.04;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.06.50.19;	author itojun;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.40.09;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.07.04.10.54.40;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.28.14.56.45;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.03.28.00.06.54;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@improve IPsec/ENC interaction:
- ipip_input() recalculate the IP header checksum if the tos bits
  are changed after decapsulation. Otherwise these packets are
  dropped later in the stack.
- ip_ecn_egress(): do not drop packets for IPsec if the outter
  packet of a Tunnel has the ECN-CE bit set (Congestion Experienced)
  and the inner packet does not indicate support ECN.
- remove unused ip6_ecn_ingress(), ip6_ecn_egress() code
ok mikeb@@
@
text
@/*	$OpenBSD: ip_ecn.h,v 1.5 2002/05/16 14:10:51 kjc Exp $	*/
/*	$KAME: ip_ecn.h,v 1.5 2000/03/27 04:58:38 sumikawa Exp $	*/

/*
 * Copyright (C) 1999 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _NETINET_IP_ECN_H_
#define _NETINET_IP_ECN_H_

/*
 * ECN consideration on tunnel ingress/egress operation.
 * http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt
 */

#define ECN_ALLOWED_IPSEC	2	/* ECN allowed */
#define ECN_ALLOWED		1	/* ECN allowed */
#define ECN_FORBIDDEN		0	/* ECN forbidden */
#define ECN_NOCARE		(-1)	/* no consideration to ECN */

#if defined(_KERNEL)
extern void ip_ecn_ingress(int, u_int8_t *, u_int8_t *);
extern int ip_ecn_egress(int, u_int8_t *, u_int8_t *);
#endif /* _KERNEL */
#endif /* _NETINET_IP_ECN_H_ */
@


1.5
log
@bring in ECN support from KAME.
it consists of
 - ECN support in TCP
 - tunnel-egress and fragment reassembly rules in layer-3 not to lose
   congestion info at tunnel-egress and fragment reassembly

to enable ECN in TCP, build a kernel with TCP_ECN, and then,
turn it on by "sysctl -w net.inet.tcp.ecn=1".

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.h,v 1.4 2002/03/14 01:27:11 millert Exp $	*/
d42 4
a45 3
#define ECN_ALLOWED	1	/* ECN allowed */
#define ECN_FORBIDDEN	0	/* ECN forbidden */
#define ECN_NOCARE	(-1)	/* no consideration to ECN */
a49 4
#ifdef INET6
extern void ip6_ecn_ingress(int, u_int32_t *, u_int32_t *);
extern int ip6_ecn_egress(int, u_int32_t *, u_int32_t *);
#endif /* INET6 */
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.h,v 1.3 2001/06/09 07:03:41 angelos Exp $	*/
d48 1
a48 1
extern void ip_ecn_egress(int, u_int8_t *, u_int8_t *);
d51 1
a51 1
extern void ip6_ecn_egress(int, u_int32_t *, u_int32_t *);
@


1.3
log
@Inclusion protection.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.h,v 1.2 2001/02/16 08:48:04 itojun Exp $	*/
d47 2
a48 2
extern void ip_ecn_ingress __P((int, u_int8_t *, u_int8_t *));
extern void ip_ecn_egress __P((int, u_int8_t *, u_int8_t *));
d50 2
a51 2
extern void ip6_ecn_ingress __P((int, u_int32_t *, u_int32_t *));
extern void ip6_ecn_egress __P((int, u_int32_t *, u_int32_t *));
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.h,v 1.3 2001/06/09 07:03:41 angelos Exp $	*/
d47 2
a48 2
extern void ip_ecn_ingress(int, u_int8_t *, u_int8_t *);
extern int ip_ecn_egress(int, u_int8_t *, u_int8_t *);
d50 2
a51 2
extern void ip6_ecn_ingress(int, u_int32_t *, u_int32_t *);
extern int ip6_ecn_egress(int, u_int32_t *, u_int32_t *);
@


1.2
log
@sync whitespace/comment with kame.  to help merge tasks
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.h,v 1.1 1999/12/08 06:50:19 itojun Exp $	*/
d33 4
a41 6
#if (defined(__FreeBSD__) && __FreeBSD__ >= 3) || defined(__NetBSD__)
#if defined(_KERNEL) && !defined(_LKM)
#include "opt_inet.h"
#endif
#endif

d46 1
a46 1
#if defined(KERNEL) || defined(_KERNEL)
d52 3
a54 2
#endif
#endif
@


1.1
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
a31 1
 * KAME Id: ip_ecn.h,v 1.2 1999/08/19 12:57:44 itojun Exp
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: ip_ecn.h,v 1.2 2001/02/16 08:48:04 itojun Exp $	*/
/*	$KAME: ip_ecn.h,v 1.5 2000/03/27 04:58:38 sumikawa Exp $	*/
d6 1
a6 1
 *
d18 1
a18 1
 *
d31 1
@


1.1.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.h,v 1.1.2.1 2001/05/14 22:40:09 niklas Exp $	*/
a32 4

#ifndef _NETINET_IP_ECN_H_
#define _NETINET_IP_ECN_H_

d38 6
d48 1
a48 1
#if defined(_KERNEL)
d54 2
a55 3
#endif /* INET6 */
#endif /* _KERNEL */
#endif /* _NETINET_IP_ECN_H_ */
@


1.1.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 2
a48 2
extern void ip_ecn_ingress(int, u_int8_t *, u_int8_t *);
extern void ip_ecn_egress(int, u_int8_t *, u_int8_t *);
d50 2
a51 2
extern void ip6_ecn_ingress(int, u_int32_t *, u_int32_t *);
extern void ip6_ecn_egress(int, u_int32_t *, u_int32_t *);
@


1.1.2.4
log
@Sync the SMP branch with 3.3
@
text
@d48 1
a48 1
extern int ip_ecn_egress(int, u_int8_t *, u_int8_t *);
d51 1
a51 1
extern int ip6_ecn_egress(int, u_int32_t *, u_int32_t *);
@


