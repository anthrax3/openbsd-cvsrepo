head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.10
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.40
	OPENBSD_5_0:1.4.0.38
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.36
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.34
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.30
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.32
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.28
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.09.24.14.51.37;	author naddy;	state Exp;
branches;
next	1.7;
commitid	B9MFucENkVbjvRxm;

1.7
date	2014.12.19.17.14.40;	author tedu;	state Exp;
branches;
next	1.6;
commitid	zhW8jJrfVCoAthrR;

1.6
date	2014.07.22.11.06.10;	author mpi;	state Exp;
branches;
next	1.5;
commitid	DQakU8LLWV6Iwx84;

1.5
date	2012.03.15.16.37.11;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.16.14.10.51;	author kjc;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.08.03.53.45;	author angelos;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.02.16.08.48.04;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.06.50.19;	author itojun;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.40.09;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.07.04.10.54.39;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.03.28.00.06.54;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ANSIfy netinet/; from David Hill
@
text
@/*	$OpenBSD: ip_ecn.c,v 1.7 2014/12/19 17:14:40 tedu Exp $	*/
/*	$KAME: ip_ecn.c,v 1.9 2000/10/01 12:44:48 itojun Exp $	*/

/*
 * Copyright (C) 1999 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
/*
 * ECN consideration on tunnel ingress/egress operation.
 * http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>

#include <netinet/in.h>
#include <netinet/ip.h>

#ifdef INET6
#include <netinet/ip6.h>
#endif

#include <netinet/ip_ecn.h>

/*
 * ECN and TOS (or TCLASS) processing rules at tunnel encapsulation and
 * decapsulation from RFC3168:
 *
 *                      Outer Hdr at                 Inner Hdr at
 *                      Encapsulator                 Decapsulator
 *   Header fields:     --------------------         ------------
 *     DS Field         copied from inner hdr        no change
 *     ECN Field        constructed by (I)           constructed by (E)
 *
 * ECN_ALLOWED (full functionality):
 *    (I) if the ECN field in the inner header is set to CE, then set the
 *    ECN field in the outer header to ECT(0).
 *    otherwise, copy the ECN field to the outer header.
 *
 *    (E) if the ECN field in the outer header is set to CE and the ECN
 *    field of the inner header is not-ECT, drop the packet.
 *    if the ECN field in the inner header is set to ECT(0) or ECT(1)
 *    and the ECN field in the outer header is set to CE, then copy CE to
 *    the inner header.  otherwise, make no change to the inner header.
 *
 * ECN_FORBIDDEN (limited functionality):
 *    (I) set the ECN field to not-ECT in the outer header.
 *
 *    (E) if the ECN field in the outer header is set to CE, drop the packet.
 *    otherwise, make no change to the ECN field in the inner header.
 *
 * the drop rule is for backward compatibility and protection against
 * erasure of CE.
 */

/*
 * modify outer ECN (TOS) field on ingress operation (tunnel encapsulation).
 * call it after you've done the default initialization/copy for the outer.
 */
void
ip_ecn_ingress(int mode, u_int8_t *outer, u_int8_t *inner)
{
	if (!outer || !inner)
		panic("NULL pointer passed to ip_ecn_ingress");

	*outer = *inner;
	switch (mode) {
	case ECN_ALLOWED:		/* ECN allowed */
	case ECN_ALLOWED_IPSEC:
		/*
		 * full-functionality: if the inner is CE, set ECT(0)
		 * to the outer.  otherwise, copy the ECN field.
		 */
		if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
			*outer &= ~IPTOS_ECN_ECT1;
		break;
	case ECN_FORBIDDEN:		/* ECN forbidden */
		/*
		 * limited-functionality: set not-ECT to the outer
		 */
		*outer &= ~IPTOS_ECN_MASK;
		break;
	case ECN_NOCARE:	/* no consideration to ECN */
		break;
	}
}

/*
 * modify inner ECN (TOS) field on egress operation (tunnel decapsulation).
 * call it after you've done the default initialization/copy for the inner.
 * the caller should drop the packet if the return value is 0.
 */
int
ip_ecn_egress(int mode, u_int8_t *outer, u_int8_t *inner)
{
	if (!outer || !inner)
		panic("NULL pointer passed to ip_ecn_egress");

	switch (mode) {
	case ECN_ALLOWED:
	case ECN_ALLOWED_IPSEC:
		/*
		 * full-functionality: if the outer is CE and the inner is
		 * not-ECT, should drop it.  otherwise, copy CE.
		 * However, according to RFC4301, we should just leave the
		 * inner as non-ECT for IPsec.
		 */
		if ((*outer & IPTOS_ECN_MASK) == IPTOS_ECN_CE) {
			if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_NOTECT) {
				if (mode == ECN_ALLOWED_IPSEC)
					return (1);
				else
					return (0);
			}
			*inner |= IPTOS_ECN_CE;
		}
		break;
	case ECN_FORBIDDEN:		/* ECN forbidden */
		/*
		 * limited-functionality: if the outer is CE, should drop it.
		 * otherwise, leave the inner.
		 */
		if ((*outer & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
			return (0);
		break;
	case ECN_NOCARE:	/* no consideration to ECN */
		break;
	}
	return (1);
}
@


1.7
log
@unifdef INET in net code as a precursor to removing the pretend option.
long live the one true internet.
ok henning mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.6 2014/07/22 11:06:10 mpi Exp $	*/
d87 1
a87 4
ip_ecn_ingress(mode, outer, inner)
	int mode;
	u_int8_t *outer;
	u_int8_t *inner;
d120 1
a120 4
ip_ecn_egress(mode, outer, inner)
	int mode;
	u_int8_t *outer;
	u_int8_t *inner;
@


1.6
log
@Fewer <netinet/in_systm.h> !
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.5 2012/03/15 16:37:11 markus Exp $	*/
a41 1
#ifdef INET
a43 1
#endif
a45 3
#ifndef INET
#include <netinet/in.h>
#endif
@


1.5
log
@improve IPsec/ENC interaction:
- ipip_input() recalculate the IP header checksum if the tos bits
  are changed after decapsulation. Otherwise these packets are
  dropped later in the stack.
- ip_ecn_egress(): do not drop packets for IPsec if the outter
  packet of a Tunnel has the ECN-CE bit set (Congestion Experienced)
  and the inner packet does not indicate support ECN.
- remove unused ip6_ecn_ingress(), ip6_ecn_egress() code
ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.4 2002/05/16 14:10:51 kjc Exp $	*/
a43 1
#include <netinet/in_systm.h>
@


1.4
log
@bring in ECN support from KAME.
it consists of
 - ECN support in TCP
 - tunnel-egress and fragment reassembly rules in layer-3 not to lose
   congestion info at tunnel-egress and fragment reassembly

to enable ECN in TCP, build a kernel with TCP_ECN, and then,
turn it on by "sysctl -w net.inet.tcp.ecn=1".

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.3 2001/06/08 03:53:45 angelos Exp $	*/
d104 1
d139 1
d143 2
d147 6
a152 2
			if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_NOTECT)
				return (0);
a168 41

#ifdef INET6
void
ip6_ecn_ingress(mode, outer, inner)
	int mode;
	u_int32_t *outer;
	u_int32_t *inner;
{
	u_int8_t outer8, inner8;

	if (!outer || !inner)
		panic("NULL pointer passed to ip6_ecn_ingress");

	inner8 = (ntohl(*inner) >> 20) & 0xff;
	ip_ecn_ingress(mode, &outer8, &inner8);
	*outer &= ~htonl(0xff << 20);
	*outer |= htonl((u_int32_t)outer8 << 20);
}

int
ip6_ecn_egress(mode, outer, inner)
	int mode;
	u_int32_t *outer;
	u_int32_t *inner;
{
	u_int8_t outer8, inner8, oinner8;

	if (!outer || !inner)
		panic("NULL pointer passed to ip6_ecn_egress");

	outer8 = (ntohl(*outer) >> 20) & 0xff;
	inner8 = oinner8 = (ntohl(*inner) >> 20) & 0xff;
	if (ip_ecn_egress(mode, &outer8, &inner8) == 0)
		return (0);
	if (inner8 != oinner8) {
		*inner &= ~htonl(0xff << 20);
		*inner |= htonl((u_int32_t)inner8 << 20);
	}
	return (1);
}
#endif
@


1.3
log
@Cut down on include files.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.2 2001/02/16 08:48:04 itojun Exp $	*/
d58 31
d101 1
d104 6
a109 1
		*outer &= ~IPTOS_CE;
d112 4
a115 1
		*outer &= ~(IPTOS_ECT | IPTOS_CE);
d125 1
d127 1
a127 1
void
d138 9
a146 2
		if (*outer & IPTOS_CE)
			*inner |= IPTOS_CE;
d149 7
d159 1
a173 1
	outer8 = (ntohl(*outer) >> 20) & 0xff;
d180 1
a180 1
void
d186 1
a186 1
	u_int8_t outer8, inner8;
d192 8
a199 4
	inner8 = (ntohl(*inner) >> 20) & 0xff;
	ip_ecn_egress(mode, &outer8, &inner8);
	*inner &= ~htonl(0xff << 20);
	*inner |= htonl((u_int32_t)inner8 << 20);
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.3 2001/06/08 03:53:45 angelos Exp $	*/
a57 31
 * ECN and TOS (or TCLASS) processing rules at tunnel encapsulation and
 * decapsulation from RFC3168:
 *
 *                      Outer Hdr at                 Inner Hdr at
 *                      Encapsulator                 Decapsulator
 *   Header fields:     --------------------         ------------
 *     DS Field         copied from inner hdr        no change
 *     ECN Field        constructed by (I)           constructed by (E)
 *
 * ECN_ALLOWED (full functionality):
 *    (I) if the ECN field in the inner header is set to CE, then set the
 *    ECN field in the outer header to ECT(0).
 *    otherwise, copy the ECN field to the outer header.
 *
 *    (E) if the ECN field in the outer header is set to CE and the ECN
 *    field of the inner header is not-ECT, drop the packet.
 *    if the ECN field in the inner header is set to ECT(0) or ECT(1)
 *    and the ECN field in the outer header is set to CE, then copy CE to
 *    the inner header.  otherwise, make no change to the inner header.
 *
 * ECN_FORBIDDEN (limited functionality):
 *    (I) set the ECN field to not-ECT in the outer header.
 *
 *    (E) if the ECN field in the outer header is set to CE, drop the packet.
 *    otherwise, make no change to the ECN field in the inner header.
 *
 * the drop rule is for backward compatibility and protection against
 * erasure of CE.
 */

/*
a69 1
	*outer = *inner;
d72 1
a72 6
		/*
		 * full-functionality: if the inner is CE, set ECT(0)
		 * to the outer.  otherwise, copy the ECN field.
		 */
		if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
			*outer &= ~IPTOS_ECN_ECT1;
d75 1
a75 4
		/*
		 * limited-functionality: set not-ECT to the outer
		 */
		*outer &= ~IPTOS_ECN_MASK;
a84 1
 * the caller should drop the packet if the return value is 0.
d86 1
a86 1
int
d97 2
a98 9
		/*
		 * full-functionality: if the outer is CE and the inner is
		 * not-ECT, should drop it.  otherwise, copy CE.
		 */
		if ((*outer & IPTOS_ECN_MASK) == IPTOS_ECN_CE) {
			if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_NOTECT)
				return (0);
			*inner |= IPTOS_ECN_CE;
		}
a100 7
		/*
		 * limited-functionality: if the outer is CE, should drop it.
		 * otherwise, leave the inner.
		 */
		if ((*outer & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
			return (0);
		break;
a103 1
	return (1);
d118 1
d125 1
a125 1
int
d131 1
a131 1
	u_int8_t outer8, inner8, oinner8;
d137 4
a140 8
	inner8 = oinner8 = (ntohl(*inner) >> 20) & 0xff;
	if (ip_ecn_egress(mode, &outer8, &inner8) == 0)
		return (0);
	if (inner8 != oinner8) {
		*inner &= ~htonl(0xff << 20);
		*inner |= htonl((u_int32_t)inner8 << 20);
	}
	return (1);
@


1.2
log
@sync whitespace/comment with kame.  to help merge tasks
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.1 1999/12/08 06:50:19 itojun Exp $	*/
a37 4
#if (defined(__FreeBSD__) && __FreeBSD__ >= 3) || defined(__NetBSD__)
#include "opt_inet.h"
#endif

a39 1
#include <sys/malloc.h>
a40 1
#include <sys/errno.h>
@


1.1
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
a31 1
 * KAME Id: ip_ecn.c,v 1.2 1999/07/30 12:17:15 itojun Exp
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: ip_ecn.c,v 1.2 2001/02/16 08:48:04 itojun Exp $	*/
/*	$KAME: ip_ecn.c,v 1.9 2000/10/01 12:44:48 itojun Exp $	*/
d6 1
a6 1
 *
d18 1
a18 1
 *
d31 1
@


1.1.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ecn.c,v 1.1.2.1 2001/05/14 22:40:09 niklas Exp $	*/
d38 4
d44 1
d46 1
@


1.1.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a57 31
 * ECN and TOS (or TCLASS) processing rules at tunnel encapsulation and
 * decapsulation from RFC3168:
 *
 *                      Outer Hdr at                 Inner Hdr at
 *                      Encapsulator                 Decapsulator
 *   Header fields:     --------------------         ------------
 *     DS Field         copied from inner hdr        no change
 *     ECN Field        constructed by (I)           constructed by (E)
 *
 * ECN_ALLOWED (full functionality):
 *    (I) if the ECN field in the inner header is set to CE, then set the
 *    ECN field in the outer header to ECT(0).
 *    otherwise, copy the ECN field to the outer header.
 *
 *    (E) if the ECN field in the outer header is set to CE and the ECN
 *    field of the inner header is not-ECT, drop the packet.
 *    if the ECN field in the inner header is set to ECT(0) or ECT(1)
 *    and the ECN field in the outer header is set to CE, then copy CE to
 *    the inner header.  otherwise, make no change to the inner header.
 *
 * ECN_FORBIDDEN (limited functionality):
 *    (I) set the ECN field to not-ECT in the outer header.
 *
 *    (E) if the ECN field in the outer header is set to CE, drop the packet.
 *    otherwise, make no change to the ECN field in the inner header.
 *
 * the drop rule is for backward compatibility and protection against
 * erasure of CE.
 */

/*
a69 1
	*outer = *inner;
d72 1
a72 6
		/*
		 * full-functionality: if the inner is CE, set ECT(0)
		 * to the outer.  otherwise, copy the ECN field.
		 */
		if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
			*outer &= ~IPTOS_ECN_ECT1;
d75 1
a75 4
		/*
		 * limited-functionality: set not-ECT to the outer
		 */
		*outer &= ~IPTOS_ECN_MASK;
a84 1
 * the caller should drop the packet if the return value is 0.
d86 1
a86 1
int
d97 2
a98 9
		/*
		 * full-functionality: if the outer is CE and the inner is
		 * not-ECT, should drop it.  otherwise, copy CE.
		 */
		if ((*outer & IPTOS_ECN_MASK) == IPTOS_ECN_CE) {
			if ((*inner & IPTOS_ECN_MASK) == IPTOS_ECN_NOTECT)
				return (0);
			*inner |= IPTOS_ECN_CE;
		}
a100 7
		/*
		 * limited-functionality: if the outer is CE, should drop it.
		 * otherwise, leave the inner.
		 */
		if ((*outer & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
			return (0);
		break;
a103 1
	return (1);
d118 1
d125 1
a125 1
int
d131 1
a131 1
	u_int8_t outer8, inner8, oinner8;
d137 4
a140 8
	inner8 = oinner8 = (ntohl(*inner) >> 20) & 0xff;
	if (ip_ecn_egress(mode, &outer8, &inner8) == 0)
		return (0);
	if (inner8 != oinner8) {
		*inner &= ~htonl(0xff << 20);
		*inner |= htonl((u_int32_t)inner8 << 20);
	}
	return (1);
@


