head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	UBC_SYNC_B:1.8
	SMP:1.8.0.2;
locks; strict;
comment	@ * @;


1.8
date	97.07.11.23.49.18;	author provos;	state dead;
branches;
next	1.7;

1.7
date	97.07.01.22.12.46;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.06.25.07.53.25;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.06.24.20.57.27;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.06.24.12.15.22;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	97.06.21.00.09.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.06.20.19.43.05;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.06.20.05.41.50;	author provos;	state Exp;
branches;
next	;


desc
@@


1.8
log
@obsolete.
@
text
@/*	$OpenBSD: ip_esp3des.c,v 1.7 1997/07/01 22:12:46 provos Exp $	*/

/*
 * The author of this code is John Ioannidis, ji@@tla.org,
 * 	(except when noted otherwise).
 *
 * This code was written for BSD/OS in Athens, Greece, in November 1995.
 *
 * Ported to OpenBSD and NetBSD, with additional transforms, in December 1996,
 * by Angelos D. Keromytis, kermit@@forthnet.gr.
 *
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis and Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, NEITHER AUTHOR MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

/*
 * 3DES-CBC
 * Per RFC1851 (Metzger & Simpson, 1995)
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <machine/cpu.h>

#include <net/if.h>
#include <net/route.h>
#include <net/netisr.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/in_pcb.h>
#include <netinet/in_var.h>
#include <netinet/ip_var.h>

#include <sys/socketvar.h>
#include <net/raw_cb.h>
#include <net/encap.h>

#include <netinet/ip_icmp.h>
#include <netinet/ip_ipsp.h>
#include <netinet/ip_esp.h>
#include <dev/rndvar.h>

extern struct ifnet loif;

extern void des_ecb3_encrypt(caddr_t, caddr_t, caddr_t, caddr_t, caddr_t, int);
extern void des_set_key(caddr_t, caddr_t);


int
esp3des_attach()
{
    return 0;
}

/*
 * esp3des_init() is called when an SPI is being set up. It interprets the
 * encap_msghdr present in m, and sets up the transformation data, in
 * this case, the encryption and decryption key schedules
 */

int
esp3des_init(struct tdb *tdbp, struct xformsw *xsp, struct mbuf *m)
{
    struct esp3des_xdata *xd;
    struct encap_msghdr *em;
    u_int32_t rk[2];
    
    tdbp->tdb_xform = xsp;

    m = m_pullup(m, ESP_ULENGTH);
    if (m == NULL)
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("esp3des_init: can't pull up %d bytes\n", 
		 ESP_ULENGTH);
#endif ENCDEBUG
	return ENOBUFS;
    }

    MALLOC(tdbp->tdb_xdata, caddr_t, sizeof (struct esp3des_xdata),
	   M_XDATA, M_WAITOK);
    if (tdbp->tdb_xdata == NULL)
      return ENOBUFS;
    bzero(tdbp->tdb_xdata, sizeof (struct esp3des_xdata));
    xd = (struct esp3des_xdata *)tdbp->tdb_xdata;
    
    em = mtod(m, struct encap_msghdr *);
    if (em->em_msglen - EMT_SETSPI_FLEN != ESP_ULENGTH)
    {
	free((caddr_t)tdbp->tdb_xdata, M_XDATA);
	tdbp->tdb_xdata = NULL;
	return EINVAL;
    }

    m_copydata(m, EMT_SETSPI_FLEN, ESP_ULENGTH, (caddr_t)xd);
    
    rk[0] = xd->edx_eks[0][0][0];	/* some overloading doesn't hurt */
    rk[1] = xd->edx_eks[0][0][1];	/* XXX -- raw-major order */
    des_set_key((caddr_t)rk, (caddr_t)(xd->edx_eks[0]));

    rk[0] = xd->edx_eks[1][0][0];
    rk[1] = xd->edx_eks[1][0][1];
    des_set_key((caddr_t)rk, (caddr_t)(xd->edx_eks[1]));

    rk[0] = xd->edx_eks[2][0][0];
    rk[1] = xd->edx_eks[2][0][1];
    des_set_key((caddr_t)rk, (caddr_t)(xd->edx_eks[2]));
    
    rk[0] = rk[1] = 0;		/* zeroize! */
    
    return 0;
}

int
esp3des_zeroize(struct tdb *tdbp)
{
    FREE(tdbp->tdb_xdata, M_XDATA);
    return 0;
}


struct mbuf *
esp3des_input(struct mbuf *m, struct tdb *tdb)
{
    struct esp3des_xdata *xd;
    struct ip *ip, ipo;
    u_char iv[8], niv[8], blk[8];
    u_char *idat, *odat;
    struct esp *esp;
    struct ifnet *rcvif;
    int ohlen, plen, ilen, olen, i;
    struct mbuf *mi, *mo;

    xd = (struct esp3des_xdata *)tdb->tdb_xdata;
    ohlen = sizeof (struct ip) + ESP_FLENGTH;

    rcvif = m->m_pkthdr.rcvif;
    if (rcvif == NULL)
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("esp3des_input: receive interface is NULL!!!\n");
#endif ENCDEBUG
	rcvif = &loif;
    }

    ip = mtod(m, struct ip *);
    ipo = *ip;
    esp = (struct esp *)(ip + 1);

    plen = m->m_pkthdr.len - sizeof (struct ip) - sizeof (u_int32_t) - 
	   xd->edx_ivlen;
    if (plen & 07)
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("esp3des_input: payload not a multiple of 8 octets\n");
#endif ENCDEBUG
	espstat.esps_badilen++;
	m_freem(m);
	return NULL;
    }

    ilen = m->m_len - sizeof (struct ip) - 8;
    idat = mtod(m, unsigned char *) + sizeof (struct ip) + 8;

    iv[0] = esp->esp_iv[0];
    iv[1] = esp->esp_iv[1];
    iv[2] = esp->esp_iv[2];
    iv[3] = esp->esp_iv[3];
    if (xd->edx_ivlen == 4)
    {
	iv[4] = ~esp->esp_iv[0];
	iv[5] = ~esp->esp_iv[1];
	iv[6] = ~esp->esp_iv[2];
	iv[7] = ~esp->esp_iv[3];
    }
    else
    {
	iv[4] = esp->esp_iv[4];
	iv[5] = esp->esp_iv[5];
	iv[6] = esp->esp_iv[6];
	iv[7] = esp->esp_iv[7];
	
	ilen -= 4;
	idat += 4;
    }

    olen = ilen;
    odat = idat;
    mi = mo = m;
    i = 0;

    /*
     * At this point:
     *   plen is # of encapsulated payload octets
     *   ilen is # of octets left in this mbuf
     *   idat is first encapsulated payload octed in this mbuf
     *   same for olen and odat
     *   iv contains the IV.
     *   mi and mo point to the first mbuf
     *
     * From now on until the end of the mbuf chain:
     *   . move the next eight octets of the chain into blk[]
     *     (ilen, idat, and mi are adjusted accordingly)
     *     and save it back into iv[]
     *   . decrypt blk[], xor with iv[], put back into chain
     *     (olen, odat, amd mo are adjusted accordingly)
     *   . repeat
     */
    
    while (plen > 0)		/* while not done */
    {
	while (ilen == 0)	/* we exhausted previous mbuf */
	{
	    mi = mi->m_next;
	    if (mi == NULL)
	      panic("esp3des_input: bad chain (i)\n");
	    ilen = mi->m_len;
	    idat = (u_char *)mi->m_data;
	}
	
	blk[i] = niv[i] = *idat++;
	i++;
	ilen--;
	
	if (i == 8)
	{
	    des_ecb3_encrypt(blk, blk, (caddr_t)(xd->edx_eks[2]),
			     (caddr_t)(xd->edx_eks[1]),
			     (caddr_t)(xd->edx_eks[0]), 0);
	    for (i=0; i<8; i++)
	    {
		while (olen == 0)
		{
		    mo = mo->m_next;
		    if (mo == NULL)
		      panic("esp3des_input: bad chain (o)\n");
		    olen = mo->m_len;
		    odat = (u_char *)mo->m_data;
		}
		*odat = blk[i] ^ iv[i];
		iv[i] = niv[i];
		blk[i] = *odat++; /* needed elsewhere */
		olen--;
	    }
	    i = 0;
	}
	
	plen--;
    }
    
    /*
     * Now, the entire chain has been decrypted. As a side effect,
     * blk[7] contains the next protocol, and blk[6] contains the
     * amount of padding the original chain had. Chop off the
     * appropriate parts of the chain, and return.
     */
    
    m_adj(m, -blk[6] - 2);
    m_adj(m, 4 + xd->edx_ivlen);
    if (m->m_len < sizeof (struct ip))
    {
	m = m_pullup(m, sizeof (struct ip));
	if (m == NULL)
	{
	    return NULL;
	}
    }

    ip = mtod(m, struct ip *);
    ipo.ip_p = blk[7];
    ipo.ip_id = htons(ipo.ip_id);
    ipo.ip_off = 0;
    ipo.ip_len += sizeof (struct ip) - 4 - xd->edx_ivlen - blk[6] - 2;
    ipo.ip_len = htons(ipo.ip_len);
    ipo.ip_sum = 0;
    *ip = ipo;
    ip->ip_sum = in_cksum(m, sizeof (struct ip));
    
    /* Update the counters */
    tdb->tdb_cur_packets++;
    tdb->tdb_cur_bytes += ntohs(ip->ip_len) - (ip->ip_hl << 2) + blk[6] + 2;

    return m;
}

int
esp3des_output(struct mbuf *m, struct sockaddr_encap *gw, struct tdb *tdb, 
	       struct mbuf **mp)
{
    struct esp3des_xdata *xd;
    struct ip *ip, ipo;
    int i, ilen, olen, ohlen, nh, rlen, plen, padding;
    u_int32_t spi;
    struct mbuf *mi, *mo;
    u_char *pad, *idat, *odat;
    u_char iv[8], blk[8], opts[40];
    int iphlen;
    
    espstat.esps_output++;
    m = m_pullup(m, sizeof (struct ip));
    if (m == NULL)
      return ENOBUFS;
    
    ip = mtod(m, struct ip *);
    spi = tdb->tdb_spi;
    iphlen = ip->ip_hl << 2;

    /*
     * If options are present, pullup the IP header, the options
     * and one DES block (8 bytes) of data.
     */
    if (iphlen != sizeof(struct ip))
    {
	m = m_pullup(m, iphlen + 8);
	if (m == NULL)
	  return ENOBUFS;

	ip = mtod(m, struct ip *);

	/* Keep the options */
	bcopy(mtod(m, u_char *) + sizeof(struct ip), opts,
	      iphlen - sizeof(struct ip));
    }
        
    xd = (struct esp3des_xdata *)tdb->tdb_xdata;
    ilen = ntohs(ip->ip_len);
    ohlen = sizeof (u_int32_t) + xd->edx_ivlen;
    
    ipo = *ip;
    nh = ipo.ip_p;
    
    rlen = ilen - iphlen; /* raw payload length  */
    padding = ((8 - ((rlen + 2) % 8)) % 8) + 2;
    
    pad = (u_char *)m_pad(m, padding);
    if (pad == NULL)
      return ENOBUFS;
    
    pad[padding-2] = padding - 2;
    pad[padding-1] = nh;
    
    plen = rlen + padding;
    mi = mo = m;
    ilen = olen = m->m_len - iphlen;
    idat = odat = mtod(m, u_char *) + iphlen;
    i = 0;
    
    /*
     * We are now ready to encrypt the payload. 
     */

    xd->edx_ivl++;
    
    iv[0] = xd->edx_iv[0];
    iv[1] = xd->edx_iv[1];
    iv[2] = xd->edx_iv[2];
    iv[3] = xd->edx_iv[3];
    if (xd->edx_ivlen == 4)
    {
	iv[4] = ~xd->edx_iv[0];
	iv[5] = ~xd->edx_iv[1];
	iv[6] = ~xd->edx_iv[2];
	iv[7] = ~xd->edx_iv[3];
    }
    else
    {
	iv[4] = xd->edx_iv[4];
	iv[5] = xd->edx_iv[5];
	iv[6] = xd->edx_iv[6];
	iv[7] = xd->edx_iv[7];
    }

    while (plen > 0)		/* while not done */
    {
	while (ilen == 0)	/* we exhausted previous mbuf */
	{
	    mi = mi->m_next;
	    if (mi == NULL)
	      panic("esp3des_output: bad chain (i)\n");
	    ilen = mi->m_len;
	    idat = (u_char *)mi->m_data;
	}
	
	blk[i] = *idat++ ^ iv[i];
	
	i++;
	ilen--;
	
	if (i == 8)
	{
	    des_ecb3_encrypt(blk, blk, (caddr_t)(xd->edx_eks[0]), 
			     (caddr_t)(xd->edx_eks[1]),
			     (caddr_t)(xd->edx_eks[2]), 1);
	    for (i = 0; i < 8; i++)
	    {
		while (olen == 0)
		{
		    mo = mo->m_next;
		    if (mo == NULL)
		      panic("esp3des_output: bad chain (o)\n");
		    olen = mo->m_len;
		    odat = (u_char *)mo->m_data;
		}
		*odat++ = blk[i];
		iv[i] = blk[i];
		olen--;
	    }
	    i = 0;
	}
	
	plen--;
    }
    
    /*
     * Done with encryption. Let's wedge in the ESP header
     * and send it out.
     */
    
    M_PREPEND(m, ohlen, M_DONTWAIT);
    if (m == NULL)
      return ENOBUFS;
    
    m = m_pullup(m, iphlen + ohlen);
    if (m == NULL)
      return ENOBUFS;
    
    ipo.ip_len = htons(iphlen + ohlen + rlen + padding);
    ipo.ip_p = IPPROTO_ESP;
    
    iv[0] = xd->edx_iv[0];
    iv[1] = xd->edx_iv[1];
    iv[2] = xd->edx_iv[2];
    iv[3] = xd->edx_iv[3];
    if (xd->edx_ivlen == 8)
    {
	iv[4] = xd->edx_iv[4];
	iv[5] = xd->edx_iv[5];
	iv[6] = xd->edx_iv[6];
	iv[7] = xd->edx_iv[7];
    }
    
    bcopy((caddr_t)&ipo, mtod(m, caddr_t), sizeof (struct ip));

    /* Copy options, if existing */
    if (iphlen != sizeof(struct ip))
      bcopy(opts, mtod(m, caddr_t) + sizeof(struct ip),
	    iphlen - sizeof(struct ip));
    
    bcopy((caddr_t)&spi, mtod(m, caddr_t) + sizeof(struct ip), 
	  sizeof (u_int32_t));
    bcopy((caddr_t)iv,  mtod(m, caddr_t) + sizeof(struct ip) + 
	  sizeof (u_int32_t), xd->edx_ivlen);
    
    *mp = m;

    /* Update the counters */
    tdb->tdb_cur_packets++;
    tdb->tdb_cur_bytes += rlen + padding;

    return 0;
}	
@


1.7
log
@major restructuring
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_esp3des.c,v 1.6 1997/06/25 07:53:25 provos Exp $	*/
@


1.6
log
@hard and soft limits for SPI's per absolute timer, relative since establish,
relative since first use timers, packet and byte counters. notify key mgmt
on soft limits. key mgmt can now specify limits. new encap messages:
EMT_RESERVESPI, EMT_ENABLESPI, EMT_DISABLESPI
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_esp3des.c,v 1.5 1997/06/24 20:57:27 provos Exp $	*/
d310 2
a311 1
esp3des_output(struct mbuf *m, struct sockaddr_encap *gw, struct tdb *tdb, struct mbuf **mp)
@


1.5
log
@use ntohs instead of NTOHS for counters
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_esp3des.c,v 1.4 1997/06/24 12:15:22 provos Exp $	*/
d303 2
a304 2
    tdb->tdb_packets++;
    tdb->tdb_bytes += ntohs(ip->ip_len) - (ip->ip_hl << 2) + blk[6] + 2;
d479 2
a480 2
    tdb->tdb_packets++;
    tdb->tdb_bytes += rlen + padding;
@


1.4
log
@handle IP options in AH + allow IP options in outgoing encapsulated packets
+ usage counters for later use with keymanagement processes
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_esp3des.c,v 1.3 1997/06/21 00:09:17 deraadt Exp $	*/
d304 1
a304 1
    tdb->tdb_bytes += NTOHS(ip->ip_len) - (ip->ip_hl << 2) + blk[6] + 2;
@


1.3
log
@u_int32_t changes, need testing
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_esp3des.c,v 1.2 1997/06/20 19:43:05 provos Exp $	*/
d302 4
d318 2
a319 1
    u_char iv[8], blk[8];
d328 19
a346 1
    
d354 1
a354 1
    rlen = ilen - sizeof (struct ip); /* raw payload length  */
d366 2
a367 2
    ilen = olen = m->m_len - sizeof (struct ip);
    idat = odat = mtod(m, u_char *) + sizeof (struct ip);
d416 1
a416 1
	    for (i=0; i<8; i++)
d445 1
a445 1
    m = m_pullup(m, sizeof(struct ip) + xd->edx_ivlen + sizeof(u_int32_t));
d449 1
a449 1
    ipo.ip_len = htons(sizeof (struct ip) + ohlen + rlen + padding);
d465 7
a471 1
    bcopy((caddr_t)&spi, mtod(m, caddr_t) + sizeof (struct ip), 
d473 1
a473 1
    bcopy((caddr_t)iv,  mtod(m, caddr_t) + sizeof (struct ip) + 
d477 5
@


1.2
log
@comply with draft 3des mode is ede not eee + performance.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_esp3des.c,v 1.1 1997/06/20 05:41:50 provos Exp $	*/
d86 1
a86 1
    u_long rk[2];
d172 1
a172 1
    plen = m->m_pkthdr.len - sizeof (struct ip) - sizeof (u_long) - 
d311 1
a311 1
    u_long spi;
d326 1
a326 1
    ohlen = sizeof (u_long) + xd->edx_ivlen;
d422 1
a422 1
    m = m_pullup(m, sizeof(struct ip) + xd->edx_ivlen + sizeof(u_long));
d443 1
a443 1
	  sizeof (u_long));
d445 1
a445 1
	  sizeof (u_long), xd->edx_ivlen);
@


1.1
log
@ah-sha1 + esp-3des + indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_espdes.c,v 1.3 1997/02/26 20:53:16 deraadt Exp $	*/
d65 1
a65 1
extern void des_ecb_encrypt(caddr_t, caddr_t, caddr_t, int);
d250 3
a252 3
	    des_ecb_encrypt(blk, blk, (caddr_t)(xd->edx_eks[0]), 0);
	    des_ecb_encrypt(blk, blk, (caddr_t)(xd->edx_eks[1]), 0);
	    des_ecb_encrypt(blk, blk, (caddr_t)(xd->edx_eks[2]), 0);
d390 3
a392 3
	    des_ecb_encrypt(blk, blk, (caddr_t)(xd->edx_eks[2]), 1);
	    des_ecb_encrypt(blk, blk, (caddr_t)(xd->edx_eks[1]), 1);
	    des_ecb_encrypt(blk, blk, (caddr_t)(xd->edx_eks[0]), 1);
@
