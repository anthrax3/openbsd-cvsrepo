head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.3.0.6
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2000.02.28.23.13.07;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	99.02.17.18.09.55;	author deraadt;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	98.11.24.10.04.06;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.11.04.09.11.06;	author provos;	state Exp;
branches;
next	;

1.3.6.1
date	2000.03.02.07.04.42;	author niklas;	state dead;
branches;
next	;


desc
@@


1.4
log
@move crypto code
@
text
@/*      $OpenBSD: ip_cast.h,v 1.3 1999/02/17 18:09:55 deraadt Exp $       */

/*
 *	CAST-128 in C
 *	Written by Steve Reid <sreid@@sea-to-sky.net>
 *	100% Public Domain - no warranty
 *	Released 1997.10.11
 */

#ifndef _CAST_H_
#define _CAST_H_

typedef struct {
	u_int32_t	xkey[32];	/* Key, after expansion */
	int		rounds;		/* Number of rounds to use, 12 or 16 */
} cast_key;

void cast_setkey __P((cast_key * key, u_int8_t * rawkey, int keybytes));
void cast_encrypt __P((cast_key * key, u_int8_t * inblock, u_int8_t * outblock));
void cast_decrypt __P((cast_key * key, u_int8_t * inblock, u_int8_t * outblock));

#endif /* ifndef _CAST_H_ */
@


1.3
log
@indent; remove local types
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_cast.h,v 1.2 1998/11/24 10:04:06 niklas Exp $       */
@


1.3.6.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_cast.h,v 1.3 1999/02/17 18:09:55 deraadt Exp $       */
@


1.2
log
@Use our exact size types instead of char/long
@
text
@d1 2
a2 1
/*      $OpenBSD: ip_cast.h,v 1.1 1997/11/04 09:11:06 provos Exp $       */
a12 3
typedef u_int8_t u8;	/* 8-bit unsigned */
typedef u_int32_t u32;	/* 32-bit unsigned */

d14 2
a15 2
	u32 xkey[32];	/* Key, after expansion */
	int rounds;		/* Number of rounds to use, 12 or 16 */
d18 3
a20 3
void cast_setkey(cast_key* key, u8* rawkey, int keybytes);
void cast_encrypt(cast_key* key, u8* inblock, u8* outblock);
void cast_decrypt(cast_key* key, u8* inblock, u8* outblock);
a22 1

@


1.1
log
@make it easier to add additional transforms. add blowfish and cast
encryption. some more info for kernfs/ipsec.
@
text
@d1 1
a1 1
/*      $OpenBSD$       */
d12 2
a13 2
typedef unsigned char u8;	/* 8-bit unsigned */
typedef unsigned long u32;	/* 32-bit unsigned */
@

