head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	UBC_SYNC_B:1.10
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.4.0.2
	SMP_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2001.05.30.02.12.36;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2001.05.08.19.58.02;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.17.04.47.16;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.05.05.35.27;	author kjell;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.13.23.40.18;	author kjell;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.16.22.34.20;	author kjell;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.01.19.29.59;	author kjell;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.12.28.08.20.40;	author kjell;	state Exp;
branches;
next	1.2;

1.2
date	99.12.17.06.17.08;	author kjell;	state Exp;
branches;
next	1.1;

1.1
date	99.12.14.04.17.17;	author kjell;	state Exp;
branches;
next	;

1.4.2.1
date	2000.02.20.11.57.29;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.05.14.22.40.13;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2001.07.04.10.54.58;	author niklas;	state dead;
branches;
next	;


desc
@@


1.10
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ip_raudio_pxy.c,v 1.9 2001/05/08 19:58:02 fgsch Exp $	*/

/*
 * $IPFilter: ip_raudio_pxy.c,v 1.7.2.4 2001/04/03 15:45:15 darrenr Exp $
 */
#if SOLARIS && defined(_KERNEL)
extern	kmutex_t	ipf_rw;
#endif

#define	IPF_RAUDIO_PROXY


int ippr_raudio_init __P((void));
int ippr_raudio_new __P((fr_info_t *, ip_t *, ap_session_t *, nat_t *));
int ippr_raudio_in __P((fr_info_t *, ip_t *, ap_session_t *, nat_t *));
int ippr_raudio_out __P((fr_info_t *, ip_t *, ap_session_t *, nat_t *));

static	frentry_t	raudiofr;


/*
 * Real Audio application proxy initialization.
 */
int ippr_raudio_init()
{
	bzero((char *)&raudiofr, sizeof(raudiofr));
	raudiofr.fr_ref = 1;
	raudiofr.fr_flags = FR_INQUE|FR_PASS|FR_QUICK|FR_KEEPSTATE;
	return 0;
}


/*
 * Setup for a new proxy to handle Real Audio.
 */
int ippr_raudio_new(fin, ip, aps, nat)
fr_info_t *fin;
ip_t *ip;
ap_session_t *aps;
nat_t *nat;
{
	raudio_t *rap;


	KMALLOCS(aps->aps_data, void *, sizeof(raudio_t));
	if (aps->aps_data == NULL)
		return -1;

	bzero(aps->aps_data, sizeof(raudio_t));
	rap = aps->aps_data;
	aps->aps_psiz = sizeof(raudio_t);
	rap->rap_mode = RAP_M_TCP;	/* default is for TCP */
	return 0;
}



int ippr_raudio_out(fin, ip, aps, nat)
fr_info_t *fin;
ip_t *ip;
ap_session_t *aps;
nat_t *nat;
{
	raudio_t *rap = aps->aps_data;
	unsigned char membuf[512 + 1], *s;
	u_short id = 0;
	int off, dlen;
	tcphdr_t *tcp;
	int len = 0;
	mb_t *m;
#if	SOLARIS
	mb_t *m1;
#endif

	/*
	 * If we've already processed the start messages, then nothing left
	 * for the proxy to do.
	 */
	if (rap->rap_eos == 1)
		return 0;

	tcp = (tcphdr_t *)fin->fin_dp;
	off = (ip->ip_hl << 2) + (tcp->th_off << 2);
	bzero(membuf, sizeof(membuf));
#if	SOLARIS
	m = fin->fin_qfm;

	dlen = msgdsize(m) - off;
	if (dlen <= 0)
		return 0;
	dlen = MIN(sizeof(membuf), dlen);
	copyout_mblk(m, off, dlen, (char *)membuf);
#else
	m = *(mb_t **)fin->fin_mp;

	dlen = mbufchainlen(m) - off;
	if (dlen <= 0)
		return 0;
	dlen = MIN(sizeof(membuf), dlen);
	m_copydata(m, off, dlen, (char *)membuf);
#endif
	/*
	 * In all the startup parsing, ensure that we don't go outside
	 * the packet buffer boundary.
	 */
	/*
	 * Look for the start of connection "PNA" string if not seen yet.
	 */
	if (rap->rap_seenpna == 0) {
		s = (u_char *)memstr("PNA", (char *)membuf, 3, dlen);
		if (s == NULL)
			return 0;
		s += 3;
		rap->rap_seenpna = 1;
	} else
		s = membuf;

	/*
	 * Directly after the PNA will be the version number of this
	 * connection.
	 */
	if (rap->rap_seenpna == 1 && rap->rap_seenver == 0) {
		if ((s + 1) - membuf < dlen) {
			rap->rap_version = (*s << 8) | *(s + 1);
			s += 2;
			rap->rap_seenver = 1;
		} else
			return 0;
	}

	/*
	 * Now that we've been past the PNA and version number, we're into the
	 * startup messages block.  This ends when a message with an ID of 0.
	 */
	while ((rap->rap_eos == 0) && ((s + 1) - membuf < dlen)) {
		if (rap->rap_gotid == 0) {
			id = (*s << 8) | *(s + 1);
			s += 2;
			rap->rap_gotid = 1;
			if (id == RA_ID_END) {
				rap->rap_eos = 1;
				break;
			}
		} else if (rap->rap_gotlen == 0) {
			len = (*s << 8) | *(s + 1);
			s += 2;
			rap->rap_gotlen = 1;
		}

		if (rap->rap_gotid == 1 && rap->rap_gotlen == 1) {
			if (id == RA_ID_UDP) {
				rap->rap_mode &= ~RAP_M_TCP;
				rap->rap_mode |= RAP_M_UDP;
				rap->rap_plport = (*s << 8) | *(s + 1);
			} else if (id == RA_ID_ROBUST) {
				rap->rap_mode |= RAP_M_ROBUST;
				rap->rap_prport = (*s << 8) | *(s + 1);
			}
			s += len;
			rap->rap_gotlen = 0;
			rap->rap_gotid = 0;
		}
	}
	return 0;
}


int ippr_raudio_in(fin, ip, aps, nat)
fr_info_t *fin;
ip_t *ip;
ap_session_t *aps;
nat_t *nat;
{
	unsigned char membuf[IPF_MAXPORTLEN + 1], *s;
	tcphdr_t *tcp, tcph, *tcp2 = &tcph;
	raudio_t *rap = aps->aps_data;
	struct in_addr swa, swb;
	int off, dlen, slen;
	int a1, a2, a3, a4;
	u_short sp, dp;
	fr_info_t fi;
	tcp_seq seq;
	nat_t *ipn;
	u_char swp;
	mb_t *m;
#if	SOLARIS
	mb_t *m1;
#endif

	/*
	 * Wait until we've seen the end of the start messages and even then
	 * only proceed further if we're using UDP.  If they want to use TCP
	 * then data is sent back on the same channel that is already open.
	 */
	if (rap->rap_sdone != 0)
		return 0;

	tcp = (tcphdr_t *)fin->fin_dp;
	off = (ip->ip_hl << 2) + (tcp->th_off << 2);
	m = *(mb_t **)fin->fin_mp;

#if	SOLARIS
	m = fin->fin_qfm;

	dlen = msgdsize(m) - off;
	if (dlen <= 0)
		return 0;
	bzero(membuf, sizeof(membuf));
	copyout_mblk(m, off, MIN(sizeof(membuf), dlen), (char *)membuf);
#else
	dlen = mbufchainlen(m) - off;
	if (dlen <= 0)
		return 0;
	bzero(membuf, sizeof(membuf));
	m_copydata(m, off, MIN(sizeof(membuf), dlen), (char *)membuf);
#endif

	seq = ntohl(tcp->th_seq);
	/*
	 * Check to see if the data in this packet is of interest to us.
	 * We only care for the first 19 bytes coming back from the server.
	 */
	if (rap->rap_sseq == 0) {
		s = (u_char *)memstr("PNA", (char *)membuf, 3, dlen);
		if (s == NULL)
			return 0;
		a1 = s - membuf;
		dlen -= a1;
		a1 = 0;
		rap->rap_sseq = seq;
		a2 = MIN(dlen, sizeof(rap->rap_svr));
	} else if (seq <= rap->rap_sseq + sizeof(rap->rap_svr)) {
		/*
		 * seq # which is the start of data and from that the offset
		 * into the buffer array.
		 */
		a1 = seq - rap->rap_sseq;
		a2 = MIN(dlen, sizeof(rap->rap_svr));
		a2 -= a1;
		s = membuf;
	} else
		return 0;

	for (a3 = a1, a4 = a2; (a4 > 0) && (a3 < 19) && (a3 >= 0); a4--,a3++) {
		rap->rap_sbf |= (1 << a3);
		rap->rap_svr[a3] = *s++;
	}

	if ((rap->rap_sbf != 0x7ffff) || (!rap->rap_eos))	/* 19 bits */
		return 0;
	rap->rap_sdone = 1;

	s = (u_char *)rap->rap_svr + 11;
	if (((*s << 8) | *(s + 1)) == RA_ID_ROBUST) {
		s += 2;
		rap->rap_srport = (*s << 8) | *(s + 1);
	}

	swp = ip->ip_p;
	swa = ip->ip_src;
	swb = ip->ip_dst;

	ip->ip_p = IPPROTO_UDP;
	ip->ip_src = nat->nat_inip;
	ip->ip_dst = nat->nat_oip;

	bcopy((char *)fin, (char *)&fi, sizeof(fi));
	bzero((char *)tcp2, sizeof(*tcp2));
	tcp2->th_off = 5;
	fi.fin_dp = (char *)tcp2;
	fi.fin_fr = &raudiofr;
	fi.fin_dlen = sizeof(*tcp2);
	tcp2->th_win = htons(8192);
	slen = ip->ip_len;
	ip->ip_len = fin->fin_hlen + sizeof(*tcp);

	if (((rap->rap_mode & RAP_M_UDP_ROBUST) == RAP_M_UDP_ROBUST) &&
	    (rap->rap_srport != 0)) {
		dp = rap->rap_srport;
		sp = rap->rap_prport;
		tcp2->th_sport = htons(sp);
		tcp2->th_dport = htons(dp);
		fi.fin_data[0] = dp;
		fi.fin_data[1] = sp;
		ipn = nat_new(nat->nat_ptr, ip, &fi, 
			      IPN_UDP | (sp ? 0 : FI_W_SPORT), NAT_OUTBOUND);
		if (ipn != NULL) {
			ipn->nat_age = fr_defnatage;
			(void) fr_addstate(ip, &fi, sp ? 0 : FI_W_SPORT);
		}
	}

	if ((rap->rap_mode & RAP_M_UDP) == RAP_M_UDP) {
		sp = rap->rap_plport;
		tcp2->th_sport = htons(sp);
		tcp2->th_dport = 0; /* XXX - don't specify remote port */
		fi.fin_data[0] = sp;
		fi.fin_data[1] = 0;
		ipn = nat_new(nat->nat_ptr, ip, &fi, IPN_UDP|FI_W_DPORT,
			      NAT_OUTBOUND);
		if (ipn != NULL) {
			ipn->nat_age = fr_defnatage;
			(void) fr_addstate(ip, &fi, FI_W_DPORT);
		}
	}

	ip->ip_p = swp;
	ip->ip_len = slen;
	ip->ip_src = swa;
	ip->ip_dst = swb;
	return 0;
}
@


1.9
log
@IPfilter 3.4.17; kjell@@ deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_raudio_pxy.c,v 1.8 2001/01/17 04:47:16 fgsch Exp $	*/
@


1.8
log
@IPF 3.4.15. (IPv6 not working yet).

Note: before building the userland part you need to do make includes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * $IPFilter: ip_raudio_pxy.c,v 1.7.2.3 2000/10/27 22:54:04 darrenr Exp $
d67 1
a68 1
	int off, dlen;
d91 2
a92 1
	copyout_mblk(m, off, MIN(sizeof(membuf), dlen), (char *)membuf);
d99 2
a100 1
	m_copydata(m, off, MIN(sizeof(membuf), dlen), (char *)membuf);
@


1.7
log
@Update to ipf 3.3.12. Most fixes relate to hardening of
in-kernel ftp proxy. See sbin/ipf/HISTORY for details.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_raudio_pxy.c,v 1.6 2000/03/13 23:40:18 kjell Exp $	*/
d3 3
d176 2
a177 1
	u_int a1, a2, a3, a4;
a178 1
	int off, dlen;
d267 1
d270 1
d272 2
d284 1
a284 2
			      IPN_UDP | (sp ? 0 : FI_W_SPORT),
			      NAT_OUTBOUND);
d304 1
a304 1
		
d306 1
@


1.6
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 7
a49 6
	if (aps->aps_data != NULL) {
		bzero(aps->aps_data, sizeof(raudio_t));
		rap = aps->aps_data;
		aps->aps_psiz = sizeof(raudio_t);
		rap->rap_mode = RAP_M_TCP;	/* default is for TCP */
	}
@


1.5
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@@


1.4
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@@


1.4.2.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_raudio_pxy.c,v 1.5 2000/02/16 22:34:20 kjell Exp $	*/
@


1.4.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_raudio_pxy.c,v 1.8 2001/01/17 04:47:16 fgsch Exp $	*/
a2 3
/*
 * $IPFilter: ip_raudio_pxy.c,v 1.7.2.3 2000/10/27 22:54:04 darrenr Exp $
 */
d43 6
a48 7
	if (aps->aps_data == NULL)
		return -1;

	bzero(aps->aps_data, sizeof(raudio_t));
	rap = aps->aps_data;
	aps->aps_psiz = sizeof(raudio_t);
	rap->rap_mode = RAP_M_TCP;	/* default is for TCP */
d172 1
a172 2
	int off, dlen, slen;
	int a1, a2, a3, a4;
d174 1
a262 1
	tcp2->th_off = 5;
a264 1
	fi.fin_dlen = sizeof(*tcp2);
a265 2
	slen = ip->ip_len;
	ip->ip_len = fin->fin_hlen + sizeof(*tcp);
d276 2
a277 1
			      IPN_UDP | (sp ? 0 : FI_W_SPORT), NAT_OUTBOUND);
d297 1
a297 1

a298 1
	ip->ip_len = slen;
@


1.4.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_raudio_pxy.c,v 1.4.2.2 2001/05/14 22:40:13 niklas Exp $	*/
@


1.3
log
@Update to ipfilter 3.3.6. See src/sbin/ipf/HISTORY for details.
@
text
@d1 2
a2 1
/* $OpenBSD: ip_raudio_pxy.c,v 1.2 1999/12/17 06:17:08 kjell Exp $ */
@


1.2
log
@Update to Darren Reed's IPFilter 3.3.5
Fixes: realaudio proxy issues, "log level" printing, and
source address for icmp replies (was reversed).

Thoughtfully submitted by techs@@obfuscation.org
@
text
@d1 1
a1 1
/* $OpenBSD: ip_raudio_pxy.c,v 1.1 1999/12/14 04:17:17 kjell Exp $ */
d237 1
a237 1
	for (a3 = a1, a4 = a2; a4 > 0; a4--, a3++) {
@


1.1
log
@New ipfilter files. Preparing for merge of ipfilter 3.3.4.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
	char membuf[512 + 1], *s;
d86 1
a86 1
	copyout_mblk(m, off, MIN(sizeof(membuf), dlen), membuf);
d93 1
a93 1
	m_copydata(m, off, MIN(sizeof(membuf), dlen), membuf);
d103 1
a103 1
		s = memstr("PNA", membuf, 3, dlen);
d167 1
a167 1
	char membuf[IPF_MAXPORTLEN + 1], *s;
d202 1
a202 1
	copyout_mblk(m, off, MIN(sizeof(membuf), dlen), membuf);
d208 1
a208 1
	m_copydata(m, off, MIN(sizeof(membuf), dlen), membuf);
d217 1
a217 1
		s = memstr("PNA", membuf, 3, dlen);
d246 6
a251 2
	s = rap->rap_svr + 13;
	rap->rap_srport = (*s << 8) | *(s + 1);
d255 1
d257 3
d266 6
a271 7
	if ((rap->rap_mode & RAP_M_UDP_ROBUST) == RAP_M_UDP_ROBUST) {
		ip->ip_src = nat->nat_inip;
		ip->ip_dst = nat->nat_oip;
		sp = rap->rap_srport;
		dp = rap->rap_prport;
		tcp2->th_sport = htons(dp);
		tcp2->th_dport = htons(sp);
d274 3
a276 1
		ipn = nat_new(nat->nat_ptr, ip, &fi, IPN_UDP, NAT_OUTBOUND);
d279 1
a279 1
			(void) fr_addstate(ip, &fi, 0);
a280 2
		ip->ip_src = swa;
		ip->ip_dst = swb;
d283 12
a294 12
	sp = rap->rap_plport;

	tcp2->th_sport = htons(sp);
	tcp2->th_dport = 0; /* XXX - don't specify remote port */
	fi.fin_data[0] = sp;
	fi.fin_data[1] = 0;
	ip->ip_src = nat->nat_inip;
	ip->ip_src = nat->nat_oip;
	ipn = nat_new(nat->nat_ptr, ip, &fi, IPN_UDP|FI_W_DPORT, NAT_OUTBOUND);
	if (ipn != NULL) {
		ipn->nat_age = fr_defnatage;
		(void) fr_addstate(ip, &fi, FI_W_DPORT);
d296 1
a296 1

@

