head	1.23;
access;
symbols
	SMP_SYNC_A:1.23
	SMP_SYNC_B:1.23
	UBC_SYNC_A:1.23
	UBC_SYNC_B:1.23
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_9:1.22.0.2
	OPENBSD_2_8:1.19.0.2
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.17.0.2
	OPENBSD_2_7_BASE:1.17
	SMP:1.15.0.2
	SMP_BASE:1.15
	kame_19991208:1.12
	OPENBSD_2_6:1.11.0.4
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.23
date	2001.05.30.02.12.30;	author deraadt;	state dead;
branches;
next	1.22;

1.22
date	2001.04.07.01.06.27;	author fgsch;	state Exp;
branches;
next	1.21;

1.21
date	2001.01.30.04.23.56;	author kjell;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.17.04.47.13;	author fgsch;	state Exp;
branches;
next	1.19;

1.19
date	2000.09.07.19.45.04;	author art;	state Exp;
branches
	1.19.2.1;
next	1.18;

1.18
date	2000.08.10.05.50.26;	author kjell;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.13.23.40.18;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.16.22.34.18;	author kjell;	state Exp;
branches;
next	1.15;

1.15
date	2000.02.01.19.29.58;	author kjell;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	99.12.15.05.20.22;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	99.12.13.10.41.56;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	99.12.08.06.50.19;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	99.02.05.05.58.51;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.09.15.09.51.18;	author pattonme;	state Exp;
branches;
next	1.9;

1.9
date	98.02.17.01.39.03;	author dgregor;	state Exp;
branches;
next	1.8;

1.8
date	98.01.26.04.10.41;	author dgregor;	state Exp;
branches;
next	1.7;

1.7
date	97.02.11.22.23.20;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	97.01.18.08.29.20;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.10.24.17.56.21;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.10.08.07.33.27;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.18.05.01.02;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.05.10.21.38.17;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.01.25.05.41.43;	author dm;	state Exp;
branches;
next	;

1.15.2.1
date	2000.02.20.11.57.25;	author niklas;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2001.05.14.22.40.10;	author niklas;	state Exp;
branches;
next	1.15.2.3;

1.15.2.3
date	2001.07.04.10.54.46;	author niklas;	state dead;
branches;
next	;

1.19.2.1
date	2001.04.18.01.02.44;	author jason;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ip_frag.c,v 1.22 2001/04/07 01:06:27 fgsch Exp $	*/

/*
 * Copyright (C) 1993-2000 by Darren Reed.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#if !defined(lint)
static const char sccsid[] = "@@(#)ip_frag.c	1.11 3/24/96 (C) 1993-2000 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ip_frag.c,v 2.10.2.8 2001/04/06 12:31:20 darrenr Exp $";
#endif

#if defined(KERNEL) && !defined(_KERNEL)
# define      _KERNEL
#endif

#include <sys/errno.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/time.h>
#include <sys/file.h>
#if !defined(_KERNEL) && !defined(KERNEL)
# include <stdio.h>
# include <string.h>
# include <stdlib.h>
#endif
#if (defined(KERNEL) || defined(_KERNEL)) && (__FreeBSD_version >= 220000)
# include <sys/filio.h>
# include <sys/fcntl.h>
#else
# include <sys/ioctl.h>
#endif
#include <sys/uio.h>
#ifndef linux
# include <sys/protosw.h>
#endif
#include <sys/socket.h>
#if defined(_KERNEL) && !defined(linux)
# include <sys/systm.h>
#endif
#if !defined(__SVR4) && !defined(__svr4__)
# if defined(_KERNEL) && !defined(__sgi)
#  include <sys/kernel.h>
# endif
# ifndef linux
#  include <sys/mbuf.h>
# endif
#else
# include <sys/byteorder.h>
# ifdef _KERNEL
#  include <sys/dditypes.h>
# endif
# include <sys/stream.h>
# include <sys/kmem.h>
#endif
#include <net/if.h>
#ifdef sun
# include <net/af.h>
#endif
#include <net/route.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#ifndef linux
# include <netinet/ip_var.h>
#endif
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>
#include <netinet/ip_fil_compat.h>
#include <netinet/tcpip.h>
#include <netinet/ip_fil.h>
#include <netinet/ip_proxy.h>
#include <netinet/ip_nat.h>
#include <netinet/ip_frag.h>
#include <netinet/ip_state.h>
#include <netinet/ip_auth.h>
#if (__FreeBSD_version >= 300000)
# include <sys/malloc.h>
# if (defined(KERNEL) || defined(_KERNEL))
#  ifndef IPFILTER_LKM
#   include <sys/libkern.h>
#   include <sys/systm.h>
# endif
extern struct callout_handle ipfr_slowtimer_ch;
# endif
#endif
#if defined(__NetBSD__) && (__NetBSD_Version__ >= 104230000)
# include <sys/callout.h>
extern struct callout ipfr_slowtimer_ch;
#elif defined(__OpenBSD__)
# include <sys/timeout.h>
extern struct timeout ipfr_slowtimer_ch;
#endif


static ipfr_t	*ipfr_heads[IPFT_SIZE];
static ipfr_t	*ipfr_nattab[IPFT_SIZE];
static ipfrstat_t ipfr_stats;
static int	ipfr_inuse = 0;

int	fr_ipfrttl = 120;	/* 60 seconds */
int	fr_frag_lock = 0;

#ifdef _KERNEL
# if SOLARIS2 >= 7
extern	timeout_id_t	ipfr_timer_id;
# else
extern	int	ipfr_timer_id;
# endif
#endif
#if	(SOLARIS || defined(__sgi)) && defined(_KERNEL)
extern	KRWLOCK_T	ipf_frag, ipf_natfrag, ipf_nat, ipf_mutex;
# if	SOLARIS
extern	KRWLOCK_T	ipf_solaris;
# else
KRWLOCK_T	ipf_solaris;
# endif
extern	kmutex_t	ipf_rw;
#endif


static ipfr_t *ipfr_new __P((ip_t *, fr_info_t *, u_int, ipfr_t **));
static ipfr_t *ipfr_lookup __P((ip_t *, fr_info_t *, ipfr_t **));
static void ipfr_delete __P((ipfr_t *));


ipfrstat_t *ipfr_fragstats()
{
	ipfr_stats.ifs_table = ipfr_heads;
	ipfr_stats.ifs_nattab = ipfr_nattab;
	ipfr_stats.ifs_inuse = ipfr_inuse;
	return &ipfr_stats;
}


/*
 * add a new entry to the fragment cache, registering it as having come
 * through this box, with the result of the filter operation.
 */
static ipfr_t *ipfr_new(ip, fin, pass, table)
ip_t *ip;
fr_info_t *fin;
u_int pass;
ipfr_t *table[];
{
	ipfr_t **fp, *fra, frag;
	u_int idx, off;

	if (ipfr_inuse >= IPFT_SIZE)
		return NULL;

	if (!(fin->fin_fi.fi_fl & FI_FRAG))
		return NULL;

	frag.ipfr_p = ip->ip_p;
	idx = ip->ip_p;
	frag.ipfr_id = ip->ip_id;
	idx += ip->ip_id;
	frag.ipfr_tos = ip->ip_tos;
	frag.ipfr_src.s_addr = ip->ip_src.s_addr;
	idx += ip->ip_src.s_addr;
	frag.ipfr_dst.s_addr = ip->ip_dst.s_addr;
	idx += ip->ip_dst.s_addr;
	frag.ipfr_ifp = fin->fin_ifp;
	idx *= 127;
	idx %= IPFT_SIZE;

	/*
	 * first, make sure it isn't already there...
	 */
	for (fp = &table[idx]; (fra = *fp); fp = &fra->ipfr_next)
		if (!bcmp((char *)&frag.ipfr_src, (char *)&fra->ipfr_src,
			  IPFR_CMPSZ)) {
			ATOMIC_INCL(ipfr_stats.ifs_exists);
			return NULL;
		}

	/*
	 * allocate some memory, if possible, if not, just record that we
	 * failed to do so.
	 */
	KMALLOC(fra, ipfr_t *);
	if (fra == NULL) {
		ATOMIC_INCL(ipfr_stats.ifs_nomem);
		return NULL;
	}

	if ((fra->ipfr_rule = fin->fin_fr) != NULL) {
		ATOMIC_INC32(fin->fin_fr->fr_ref);
	}


	/*
	 * Instert the fragment into the fragment table, copy the struct used
	 * in the search using bcopy rather than reassign each field.
	 * Set the ttl to the default and mask out logging from "pass"
	 */
	if ((fra->ipfr_next = table[idx]))
		table[idx]->ipfr_prev = fra;
	fra->ipfr_prev = NULL;
	fra->ipfr_data = NULL;
	table[idx] = fra;
	bcopy((char *)&frag.ipfr_src, (char *)&fra->ipfr_src, IPFR_CMPSZ);
	fra->ipfr_ttl = fr_ipfrttl;
	/*
	 * Compute the offset of the expected start of the next packet.
	 */
	off = ip->ip_off & IP_OFFMASK;
	if (!off)
		fra->ipfr_seen0 = 1;
	fra->ipfr_off = off + (fin->fin_dlen >> 3);
	ATOMIC_INCL(ipfr_stats.ifs_new);
	ATOMIC_INC32(ipfr_inuse);
	return fra;
}


int ipfr_newfrag(ip, fin, pass)
ip_t *ip;
fr_info_t *fin;
u_int pass;
{
	ipfr_t	*ipf;

	if ((ip->ip_v != 4) || (fr_frag_lock))
		return -1;
	WRITE_ENTER(&ipf_frag);
	ipf = ipfr_new(ip, fin, pass, ipfr_heads);
	RWLOCK_EXIT(&ipf_frag);
	return ipf ? 0 : -1;
}


int ipfr_nat_newfrag(ip, fin, pass, nat)
ip_t *ip;
fr_info_t *fin;
u_int pass;
nat_t *nat;
{
	ipfr_t	*ipf;

	if ((ip->ip_v != 4) || (fr_frag_lock))
		return -1;
	WRITE_ENTER(&ipf_natfrag);
	ipf = ipfr_new(ip, fin, pass, ipfr_nattab);
	if (ipf != NULL) {
		ipf->ipfr_data = nat;
		nat->nat_data = ipf;
	}
	RWLOCK_EXIT(&ipf_natfrag);
	return ipf ? 0 : -1;
}


/*
 * check the fragment cache to see if there is already a record of this packet
 * with its filter result known.
 */
static ipfr_t *ipfr_lookup(ip, fin, table)
ip_t *ip;
fr_info_t *fin;
ipfr_t *table[];
{
	ipfr_t	*f, frag;
	u_int	idx;

	if (!(fin->fin_fi.fi_fl & FI_FRAG))
		return NULL;

	/*
	 * For fragments, we record protocol, packet id, TOS and both IP#'s
	 * (these should all be the same for all fragments of a packet).
	 *
	 * build up a hash value to index the table with.
	 */
	frag.ipfr_p = ip->ip_p;
	idx = ip->ip_p;
	frag.ipfr_id = ip->ip_id;
	idx += ip->ip_id;
	frag.ipfr_tos = ip->ip_tos;
	frag.ipfr_src.s_addr = ip->ip_src.s_addr;
	idx += ip->ip_src.s_addr;
	frag.ipfr_dst.s_addr = ip->ip_dst.s_addr;
	idx += ip->ip_dst.s_addr;
	frag.ipfr_ifp = fin->fin_ifp;
	idx *= 127;
	idx %= IPFT_SIZE;

	/*
	 * check the table, careful to only compare the right amount of data
	 */
	for (f = table[idx]; f; f = f->ipfr_next)
		if (!bcmp((char *)&frag.ipfr_src, (char *)&f->ipfr_src,
			  IPFR_CMPSZ)) {
			u_short	atoff, off;

			/*
			 * XXX - We really need to be guarding against the
			 * retransmission of (src,dst,id,offset-range) here
			 * because a fragmented packet is never resent with
			 * the same IP ID#.
			 */
			off = ip->ip_off & IP_OFFMASK;
			if (f->ipfr_seen0) {
				if (!off || (fin->fin_fi.fi_fl & FI_SHORT))
					continue;
			} else if (!off)
				f->ipfr_seen0 = 1;

			if (f != table[idx]) {
				/*
				 * move fragment info. to the top of the list
				 * to speed up searches.
				 */
				if ((f->ipfr_prev->ipfr_next = f->ipfr_next))
					f->ipfr_next->ipfr_prev = f->ipfr_prev;
				f->ipfr_next = table[idx];
				table[idx]->ipfr_prev = f;
				f->ipfr_prev = NULL;
				table[idx] = f;
			}
			atoff = off + (fin->fin_dlen >> 3);
			/*
			 * If we've follwed the fragments, and this is the
			 * last (in order), shrink expiration time.
			 */
			if (off == f->ipfr_off) {
				if (!(ip->ip_off & IP_MF))
					f->ipfr_ttl = 1;
				else
					f->ipfr_off = atoff;
			}
			ATOMIC_INCL(ipfr_stats.ifs_hits);
			return f;
		}
	return NULL;
}


/*
 * functional interface for NAT lookups of the NAT fragment cache
 */
nat_t *ipfr_nat_knownfrag(ip, fin)
ip_t *ip;
fr_info_t *fin;
{
	nat_t	*nat;
	ipfr_t	*ipf;

	if ((ip->ip_v != 4) || (fr_frag_lock))
		return NULL;
	READ_ENTER(&ipf_natfrag);
	ipf = ipfr_lookup(ip, fin, ipfr_nattab);
	if (ipf != NULL) {
		nat = ipf->ipfr_data;
		/*
		 * This is the last fragment for this packet.
		 */
		if ((ipf->ipfr_ttl == 1) && (nat != NULL)) {
			nat->nat_data = NULL;
			ipf->ipfr_data = NULL;
		}
	} else
		nat = NULL;
	RWLOCK_EXIT(&ipf_natfrag);
	return nat;
}


/*
 * functional interface for normal lookups of the fragment cache
 */
frentry_t *ipfr_knownfrag(ip, fin)
ip_t *ip;
fr_info_t *fin;
{
	frentry_t *fr = NULL;
	ipfr_t	*fra;

	if ((ip->ip_v != 4) || (fr_frag_lock))
		return NULL;
	READ_ENTER(&ipf_frag);
	fra = ipfr_lookup(ip, fin, ipfr_heads);
	if (fra != NULL)
		fr = fra->ipfr_rule;
	RWLOCK_EXIT(&ipf_frag);
	return fr;
}


/*
 * forget any references to this external object.
 */
void ipfr_forget(nat)
void *nat;
{
	ipfr_t	*fr;
	int	idx;

	WRITE_ENTER(&ipf_natfrag);
	for (idx = IPFT_SIZE - 1; idx >= 0; idx--)
		for (fr = ipfr_heads[idx]; fr; fr = fr->ipfr_next)
			if (fr->ipfr_data == nat)
				fr->ipfr_data = NULL;

	RWLOCK_EXIT(&ipf_natfrag);
}


static void ipfr_delete(fra)
ipfr_t *fra;
{
	frentry_t *fr;

	fr = fra->ipfr_rule;
	if (fr != NULL) {
		ATOMIC_DEC32(fr->fr_ref);
		if (fr->fr_ref == 0)
			KFREE(fr);
	}
	if (fra->ipfr_prev)
		fra->ipfr_prev->ipfr_next = fra->ipfr_next;
	if (fra->ipfr_next)
		fra->ipfr_next->ipfr_prev = fra->ipfr_prev;
	KFREE(fra);
}


/*
 * Free memory in use by fragment state info. kept.
 */
void ipfr_unload()
{
	ipfr_t	**fp, *fra;
	nat_t	*nat;
	int	idx;

	WRITE_ENTER(&ipf_frag);
	for (idx = IPFT_SIZE - 1; idx >= 0; idx--)
		for (fp = &ipfr_heads[idx]; (fra = *fp); ) {
			*fp = fra->ipfr_next;
			ipfr_delete(fra);
		}
	RWLOCK_EXIT(&ipf_frag);

	WRITE_ENTER(&ipf_nat);
	WRITE_ENTER(&ipf_natfrag);
	for (idx = IPFT_SIZE - 1; idx >= 0; idx--)
		for (fp = &ipfr_nattab[idx]; (fra = *fp); ) {
			*fp = fra->ipfr_next;
			nat = fra->ipfr_data;
			if (nat != NULL) {
				if (nat->nat_data == fra)
					nat->nat_data = NULL;
			}
			ipfr_delete(fra);
		}
	RWLOCK_EXIT(&ipf_natfrag);
	RWLOCK_EXIT(&ipf_nat);
}


#ifdef	_KERNEL
void ipfr_fragexpire()
{
	ipfr_t	**fp, *fra;
	nat_t	*nat;
	int	idx;
#if defined(_KERNEL)
# if !SOLARIS
	int	s;
# endif
#endif

	if (fr_frag_lock)
		return;

	SPL_NET(s);
	WRITE_ENTER(&ipf_frag);

	/*
	 * Go through the entire table, looking for entries to expire,
	 * decreasing the ttl by one for each entry.  If it reaches 0,
	 * remove it from the chain and free it.
	 */
	for (idx = IPFT_SIZE - 1; idx >= 0; idx--)
		for (fp = &ipfr_heads[idx]; (fra = *fp); ) {
			--fra->ipfr_ttl;
			if (fra->ipfr_ttl == 0) {
				*fp = fra->ipfr_next;
				ipfr_delete(fra);
				ATOMIC_INCL(ipfr_stats.ifs_expire);
				ATOMIC_DEC32(ipfr_inuse);
			} else
				fp = &fra->ipfr_next;
		}
	RWLOCK_EXIT(&ipf_frag);

	/*
	 * Same again for the NAT table, except that if the structure also
	 * still points to a NAT structure, and the NAT structure points back
	 * at the one to be free'd, NULL the reference from the NAT struct.
	 * NOTE: We need to grab both mutex's early, and in this order so as
	 * to prevent a deadlock if both try to expire at the same time.
	 */
	WRITE_ENTER(&ipf_nat);
	WRITE_ENTER(&ipf_natfrag);
	for (idx = IPFT_SIZE - 1; idx >= 0; idx--)
		for (fp = &ipfr_nattab[idx]; (fra = *fp); ) {
			--fra->ipfr_ttl;
			if (fra->ipfr_ttl == 0) {
				ATOMIC_INCL(ipfr_stats.ifs_expire);
				ATOMIC_DEC32(ipfr_inuse);
				nat = fra->ipfr_data;
				if (nat != NULL) {
					if (nat->nat_data == fra)
						nat->nat_data = NULL;
				}
				*fp = fra->ipfr_next;
				ipfr_delete(fra);
			} else
				fp = &fra->ipfr_next;
		}
	RWLOCK_EXIT(&ipf_natfrag);
	RWLOCK_EXIT(&ipf_nat);
	SPL_X(s);
}


/*
 * Slowly expire held state for fragments.  Timeouts are set * in expectation
 * of this being called twice per second.
 */
# if (BSD >= 199306) || SOLARIS || defined(__sgi)
#  if defined(SOLARIS2) && (SOLARIS2 < 7)
void ipfr_slowtimer()
#  else
void ipfr_slowtimer __P((void *ptr))
#  endif
# else
int ipfr_slowtimer()
# endif
{
#if defined(_KERNEL) && SOLARIS
	extern	int	fr_running;

	if (fr_running <= 0) 
		return;
#endif

	READ_ENTER(&ipf_solaris);
#ifdef __sgi
	ipfilter_sgi_intfsync();
#endif

	ipfr_fragexpire();
	fr_timeoutstate();
	ip_natexpire();
	fr_authexpire();
# if    SOLARIS
	ipfr_timer_id = timeout(ipfr_slowtimer, NULL, drv_usectohz(500000));
	RWLOCK_EXIT(&ipf_solaris);
# else
#  if defined(__NetBSD__) && (__NetBSD_Version__ >= 104240000)
	callout_reset(&ipfr_slowtimer_ch, hz / 2, ipfr_slowtimer, NULL);
#  else
#   if defined(__OpenBSD__)
	timeout_add(&ipfr_slowtimer_ch, hz/2);
#   else
#    if (__FreeBSD_version >= 300000)
	ipfr_slowtimer_ch = timeout(ipfr_slowtimer, NULL, hz/2);
#    else
	timeout(ipfr_slowtimer, NULL, hz/2);
#    endif
#    if (BSD < 199306) && !defined(__sgi)
	return 0;
#    endif /* FreeBSD */
#   endif /* OpenBSD */
#  endif /* NetBSD */
# endif /* SOLARIS */
}
#endif /* defined(_KERNEL) */
@


1.22
log
@Partial update to IPF 3.4.17; this fixes the *VERY* serious fragment
caching bug recently discussed in the ipfilter list.

People using IPF is urged to sync with these changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.21 2001/01/30 04:23:56 kjell Exp $	*/
@


1.21
log
@re-add local ipf changes that were whacked in the 3.4.16 merge. userland to follow
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.20 2001/01/17 04:47:13 fgsch Exp $	*/
d12 1
a12 1
static const char rcsid[] = "@@(#)$IPFilter: ip_frag.c,v 2.10.2.7 2000/11/27 10:26:56 darrenr Exp $";
d86 1
a86 1
#  endif
d149 2
a150 2
	ipfr_t	**fp, *fra, frag;
	u_int	idx;
d155 3
d211 4
a214 1
	fra->ipfr_off = (ip->ip_off & IP_OFFMASK) + (fin->fin_dlen >> 3);
d270 3
d300 13
a324 1
			off = ip->ip_off & IP_OFFMASK;
@


1.20
log
@IPF 3.4.15. (IPv6 not working yet).

Note: before building the userland part you need to do make includes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 1
a72 1
#include "netinet/ip_compat.h"
d74 6
a79 6
#include "netinet/ip_fil.h"
#include "netinet/ip_proxy.h"
#include "netinet/ip_nat.h"
#include "netinet/ip_frag.h"
#include "netinet/ip_state.h"
#include "netinet/ip_auth.h"
d86 1
a86 1
# endif
d94 1
@


1.19
log
@New timeouts.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.18 2000/08/10 05:50:26 kjell Exp $	*/
d4 1
a4 1
 * Copyright (C) 1993-1998 by Darren Reed.
d11 2
a12 2
static const char sccsid[] = "@@(#)ip_frag.c	1.11 3/24/96 (C) 1993-1995 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ip_frag.c,v 2.4.2.5 2000/06/06 15:50:48 darrenr Exp $";
d29 1
a29 1
#if defined(KERNEL) && (__FreeBSD_version >= 220000)
d72 1
a72 1
#include <netinet/ip_fil_compat.h>
d74 6
a79 6
#include <netinet/ip_fil.h>
#include <netinet/ip_proxy.h>
#include <netinet/ip_nat.h>
#include <netinet/ip_frag.h>
#include <netinet/ip_state.h>
#include <netinet/ip_auth.h>
d86 1
a86 1
#  endif
d90 5
a94 3
#ifdef __OpenBSD__
#include <sys/timeout.h>
extern struct timeout ipfr_slowtimer_to;
d98 8
a105 5
ipfr_t	*ipfr_heads[IPFT_SIZE];
ipfr_t	*ipfr_nattab[IPFT_SIZE];
ipfrstat_t ipfr_stats;
int	ipfr_inuse = 0,
	fr_ipfrttl = 120;	/* 60 seconds */
d163 1
d173 1
a173 1
			ATOMIC_INC(ipfr_stats.ifs_exists);
d183 1
a183 1
		ATOMIC_INC(ipfr_stats.ifs_nomem);
d188 1
a188 1
		ATOMIC_INC(fin->fin_fr->fr_ref);
d208 2
a209 2
	ATOMIC_INC(ipfr_stats.ifs_new);
	ATOMIC_INC(ipfr_inuse);
d221 2
d238 2
d278 1
d314 1
a314 1
			ATOMIC_INC(ipfr_stats.ifs_hits);
d331 2
d361 2
d398 1
a398 1
		ATOMIC_DEC(fr->fr_ref);
d445 1
a445 13
/*
 * Slowly expire held state for fragments.  Timeouts are set * in expectation
 * of this being called twice per second.
 */
# if (BSD >= 199306) || SOLARIS || defined(__sgi)
#  if defined(SOLARIS2) && (SOLARIS2 < 7)
void ipfr_slowtimer()
#  else
void ipfr_slowtimer __P((void *ptr))
#  endif
# else
int ipfr_slowtimer()
# endif
a452 5
# else
	extern	int	fr_running;

	if (fr_running <= 0) 
		return;
d456 2
a457 4
	READ_ENTER(&ipf_solaris);
#ifdef __sgi
	ipfilter_sgi_intfsync();
#endif
d473 2
a474 2
				ATOMIC_INC(ipfr_stats.ifs_expire);
				ATOMIC_DEC(ipfr_inuse);
d493 2
a494 2
				ATOMIC_INC(ipfr_stats.ifs_expire);
				ATOMIC_DEC(ipfr_inuse);
d508 30
d541 1
a541 1
# if	SOLARIS
d543 1
d545 7
a551 2
#  ifndef linux
#   if (__FreeBSD_version >= 300000)
d553 1
a553 3
#   elif defined(__OpenBSD__)
	timeout_add(&ipfr_slowtimer_to, hz/2);
#   else
d555 2
a556 3
#   endif
#  endif
#  if (BSD < 199306) && !defined(__sgi)
d558 4
a561 3
#  endif
# endif
	RWLOCK_EXIT(&ipf_solaris);
@


1.19.2.1
log
@Pull in patch
Fix (fgsch):
fix ipf fragment caching bug
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.19 2000/09/07 19:45:04 art Exp $	*/
d144 1
a144 1
	u_int	idx, off;
a148 3
	if (!(fin->fin_fi.fi_fl & FI_FRAG))
		return NULL;

d201 1
a201 4
	off = ip->ip_off & IP_OFFMASK;
	if (!off)
		fra->ipfr_seen0 = 1;
	fra->ipfr_off = off + (fin->fin_dlen >> 3);
a252 3
	if (!(fin->fin_fi.fi_fl & FI_FRAG))
		return NULL;

a278 13
			/*
			 * XXX - We really need to be guarding against the
			 * retransmission of (src,dst,id,offset-range) here
			 * because a fragmented packet is never resent with
			 * the same IP ID#.
			 */
			off = ip->ip_off & IP_OFFMASK;
			if (f->ipfr_seen0) {
				if (!off || (fin->fin_fi.fi_fl & FI_SHORT))
					continue;
			} else if (!off)
				f->ipfr_seen0 = 1;

d291 1
@


1.18
log
@Import ipf 3.3.18. Fixes more problems with the in-kernel FTP proxy,
some nat state bugs, and ups the default state table size.
See sbin/ipf/HISTORY for details.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.17 2000/03/13 23:40:18 kjell Exp $	*/
d86 1
a86 1
# endif
d90 4
d521 2
@


1.17
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d12 1
a12 1
static const char rcsid[] = "@@(#)$IPFilter: ip_frag.c,v 2.4.2.4 1999/11/28 04:52:10 darrenr Exp $";
d141 3
@


1.16
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@@


1.15
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@@


1.15.2.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.16 2000/02/16 22:34:18 kjell Exp $	*/
@


1.15.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.22 2001/04/07 01:06:27 fgsch Exp $	*/
d4 1
a4 1
 * Copyright (C) 1993-2000 by Darren Reed.
d11 2
a12 2
static const char sccsid[] = "@@(#)ip_frag.c	1.11 3/24/96 (C) 1993-2000 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ip_frag.c,v 2.10.2.8 2001/04/06 12:31:20 darrenr Exp $";
d29 1
a29 1
#if (defined(KERNEL) || defined(_KERNEL)) && (__FreeBSD_version >= 220000)
a89 13
#if defined(__NetBSD__) && (__NetBSD_Version__ >= 104230000)
# include <sys/callout.h>
extern struct callout ipfr_slowtimer_ch;
#elif defined(__OpenBSD__)
# include <sys/timeout.h>
extern struct timeout ipfr_slowtimer_ch;
#endif


static ipfr_t	*ipfr_heads[IPFT_SIZE];
static ipfr_t	*ipfr_nattab[IPFT_SIZE];
static ipfrstat_t ipfr_stats;
static int	ipfr_inuse = 0;
a90 2
int	fr_ipfrttl = 120;	/* 60 seconds */
int	fr_frag_lock = 0;
d92 5
d139 2
a140 8
	ipfr_t **fp, *fra, frag;
	u_int idx, off;

	if (ipfr_inuse >= IPFT_SIZE)
		return NULL;

	if (!(fin->fin_fi.fi_fl & FI_FRAG))
		return NULL;
a150 1
	frag.ipfr_ifp = fin->fin_ifp;
d160 1
a160 1
			ATOMIC_INCL(ipfr_stats.ifs_exists);
d170 1
a170 1
		ATOMIC_INCL(ipfr_stats.ifs_nomem);
d175 1
a175 1
		ATOMIC_INC32(fin->fin_fr->fr_ref);
d194 3
a196 6
	off = ip->ip_off & IP_OFFMASK;
	if (!off)
		fra->ipfr_seen0 = 1;
	fra->ipfr_off = off + (fin->fin_dlen >> 3);
	ATOMIC_INCL(ipfr_stats.ifs_new);
	ATOMIC_INC32(ipfr_inuse);
a207 2
	if ((ip->ip_v != 4) || (fr_frag_lock))
		return -1;
a222 2
	if ((ip->ip_v != 4) || (fr_frag_lock))
		return -1;
a245 3
	if (!(fin->fin_fi.fi_fl & FI_FRAG))
		return NULL;

a260 1
	frag.ipfr_ifp = fin->fin_ifp;
a271 13
			/*
			 * XXX - We really need to be guarding against the
			 * retransmission of (src,dst,id,offset-range) here
			 * because a fragmented packet is never resent with
			 * the same IP ID#.
			 */
			off = ip->ip_off & IP_OFFMASK;
			if (f->ipfr_seen0) {
				if (!off || (fin->fin_fi.fi_fl & FI_SHORT))
					continue;
			} else if (!off)
				f->ipfr_seen0 = 1;

d284 1
d296 1
a296 1
			ATOMIC_INCL(ipfr_stats.ifs_hits);
a312 2
	if ((ip->ip_v != 4) || (fr_frag_lock))
		return NULL;
a340 2
	if ((ip->ip_v != 4) || (fr_frag_lock))
		return NULL;
d376 1
a376 1
		ATOMIC_DEC32(fr->fr_ref);
d423 13
a435 1
void ipfr_fragexpire()
d443 5
d451 4
a454 2
	if (fr_frag_lock)
		return;
d470 2
a471 2
				ATOMIC_INCL(ipfr_stats.ifs_expire);
				ATOMIC_DEC32(ipfr_inuse);
d490 2
a491 2
				ATOMIC_INCL(ipfr_stats.ifs_expire);
				ATOMIC_DEC32(ipfr_inuse);
a504 30
}


/*
 * Slowly expire held state for fragments.  Timeouts are set * in expectation
 * of this being called twice per second.
 */
# if (BSD >= 199306) || SOLARIS || defined(__sgi)
#  if defined(SOLARIS2) && (SOLARIS2 < 7)
void ipfr_slowtimer()
#  else
void ipfr_slowtimer __P((void *ptr))
#  endif
# else
int ipfr_slowtimer()
# endif
{
#if defined(_KERNEL) && SOLARIS
	extern	int	fr_running;

	if (fr_running <= 0) 
		return;
#endif

	READ_ENTER(&ipf_solaris);
#ifdef __sgi
	ipfilter_sgi_intfsync();
#endif

	ipfr_fragexpire();
d508 1
a508 1
# if    SOLARIS
a509 1
	RWLOCK_EXIT(&ipf_solaris);
d511 3
a513 5
#  if defined(__NetBSD__) && (__NetBSD_Version__ >= 104240000)
	callout_reset(&ipfr_slowtimer_ch, hz / 2, ipfr_slowtimer, NULL);
#  else
#   if defined(__OpenBSD__)
	timeout_add(&ipfr_slowtimer_ch, hz/2);
a514 3
#    if (__FreeBSD_version >= 300000)
	ipfr_slowtimer_ch = timeout(ipfr_slowtimer, NULL, hz/2);
#    else
d516 3
a518 2
#    endif
#    if (BSD < 199306) && !defined(__sgi)
d520 3
a522 4
#    endif /* FreeBSD */
#   endif /* OpenBSD */
#  endif /* NetBSD */
# endif /* SOLARIS */
@


1.15.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_frag.c,v 1.15.2.2 2001/05/14 22:40:10 niklas Exp $	*/
@


1.14
log
@Import of Darren Reed's IPFilter 3.3.4, including OpenBSD patches.

Many, many enhancements and improvements, including new in-kernel
proxies, enhancements to logging, and many bugfixes.

Note: Man pages have not yet been re-converted to mdoc.
@
text
@d1 2
a2 1
/*       $OpenBSD: ip_frag.c,v 1.13 1999/12/13 10:41:56 itojun Exp $       */
d12 1
a12 1
static const char rcsid[] = "@@(#)$Id: ip_frag.c,v 1.13 1999/12/13 10:41:56 itojun Exp $";
@


1.13
log
@remove extra checks for #define INET (merged mistakingly from kame).
this is harmful against some of lkm compilation.
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_frag.c,v 1.12 1999/12/08 06:50:19 itojun Exp $       */
d11 5
a15 1
static const char rcsid[] = "@@(#)$Id: ip_frag.c,v 1.12 1999/12/08 06:50:19 itojun Exp $";
d29 2
a30 2
#include <sys/filio.h>
#include <sys/fcntl.h>
d32 1
a32 1
#include <sys/ioctl.h>
d36 1
a36 1
#include <sys/protosw.h>
d43 3
d51 3
a53 1
# include <sys/dditypes.h>
a56 1

d59 1
a59 1
#include <net/af.h>
d66 1
a66 1
#include <netinet/ip_var.h>
d71 1
a71 5
#if defined(__OpenBSD__)
# include <netinet/ip_fil_compat.h>
#else
# include <netinet/ip_compat.h>
#endif
d79 11
d97 3
d101 1
d104 6
a109 1
extern	KRWLOCK_T	ipf_frag, ipf_natfrag, ipf_nat;
d114 1
a114 1
static ipfr_t *ipfr_new __P((ip_t *, fr_info_t *, int, ipfr_t **));
d116 1
d135 1
a135 1
int pass;
d138 1
a138 1
	ipfr_t	**fp, *fr, frag;
d156 2
a157 2
	for (fp = &table[idx]; (fr = *fp); fp = &fr->ipfr_next)
		if (!bcmp((char *)&frag.ipfr_src, (char *)&fr->ipfr_src,
d167 2
a168 2
	KMALLOC(fr, ipfr_t *, sizeof(*fr));
	if (fr == NULL) {
d173 5
d183 7
a189 8
	if ((fr->ipfr_next = table[idx]))
		table[idx]->ipfr_prev = fr;
	fr->ipfr_prev = NULL;
	fr->ipfr_data = NULL;
	table[idx] = fr;
	bcopy((char *)&frag.ipfr_src, (char *)&fr->ipfr_src, IPFR_CMPSZ);
	fr->ipfr_ttl = fr_ipfrttl;
	fr->ipfr_pass = pass & ~(FR_LOGFIRST|FR_LOG);
d193 1
a193 1
	fr->ipfr_off = (ip->ip_off & IP_OFFMASK) + (fin->fin_dlen >> 3);
d196 1
a196 1
	return fr;
d203 1
a203 1
int pass;
d217 1
a217 1
int pass;
d283 1
a283 1
			off = ip->ip_off;
d289 2
a290 2
			if ((off & IP_OFFMASK) == f->ipfr_off) {
				if (!(off & IP_MF))
d333 1
a333 1
int ipfr_knownfrag(ip, fin)
d337 2
a338 2
	int	ret;
	ipfr_t	*ipf;
d341 3
a343 2
	ipf = ipfr_lookup(ip, fin, ipfr_heads);
	ret = ipf ? ipf->ipfr_pass : 0;
d345 1
a345 1
	return ret;
d368 19
d392 1
a392 1
	ipfr_t	**fp, *fr;
d398 3
a400 3
		for (fp = &ipfr_heads[idx]; (fr = *fp); ) {
			*fp = fr->ipfr_next;
			KFREE(fr);
d407 3
a409 3
		for (fp = &ipfr_nattab[idx]; (fr = *fp); ) {
			*fp = fr->ipfr_next;
			nat = (nat_t *)fr->ipfr_data;
d411 1
a411 1
				if (nat->nat_data == fr)
d414 1
a414 1
			KFREE(fr);
d427 1
d429 3
d436 1
a436 1
	ipfr_t	**fp, *fr;
d438 11
a448 1
	int	s, idx;
d450 1
d464 5
a468 10
		for (fp = &ipfr_heads[idx]; (fr = *fp); ) {
			--fr->ipfr_ttl;
			if (fr->ipfr_ttl == 0) {
				if (fr->ipfr_prev)
					fr->ipfr_prev->ipfr_next =
					     fr->ipfr_next;
				if (fr->ipfr_next)
					fr->ipfr_next->ipfr_prev =
					     fr->ipfr_prev;
				*fp = fr->ipfr_next;
a470 1
				KFREE(fr);
d472 1
a472 1
				fp = &fr->ipfr_next;
d486 3
a488 10
		for (fp = &ipfr_nattab[idx]; (fr = *fp); ) {
			--fr->ipfr_ttl;
			if (fr->ipfr_ttl == 0) {
				if (fr->ipfr_prev)
					fr->ipfr_prev->ipfr_next =
					     fr->ipfr_next;
				if (fr->ipfr_next)
					fr->ipfr_next->ipfr_prev =
					     fr->ipfr_prev;
				*fp = fr->ipfr_next;
d491 1
a491 1
				nat = (nat_t *)fr->ipfr_data;
d493 1
a493 1
					if (nat->nat_data == fr)
d496 2
a497 1
				KFREE(fr);
d499 1
a499 1
				fp = &fr->ipfr_next;
d511 5
a515 1
	ip_slowtimo();
d521 1
@


1.12
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_frag.c,v 1.11 1999/02/05 05:58:51 deraadt Exp $       */
d11 1
a11 1
static const char rcsid[] = "@@(#)$Id: ip_frag.c,v 1.11 1999/02/05 05:58:51 deraadt Exp $";
a53 5
#ifdef _KERNEL
#ifndef INET
#error ipfilter assumes options INET
#endif
#endif
@


1.11
log
@ipf 3.2.10; work by kjell
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_frag.c,v 1.10 1998/09/15 09:51:18 pattonme Exp $       */
d11 1
a11 1
static const char rcsid[] = "@@(#)$Id: ip_frag.c,v 1.10 1998/09/15 09:51:18 pattonme Exp $";
d54 5
@


1.10
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_frag.c,v 1.9 1998/02/17 01:39:03 dgregor Exp $       */
d3 1
a3 1
 * Copyright (C) 1993-1997 by Darren Reed.
d11 1
a11 1
static const char rcsid[] = "@@(#)$Id$";
a13 4
#if !defined(_KERNEL) && !defined(KERNEL)
# include <string.h>
# include <stdlib.h>
#endif
d19 5
d85 1
a85 1
extern	krwlock_t	ipf_frag, ipf_natfrag, ipf_nat;
d164 1
a164 1
	fr->ipfr_off = (ip->ip_off & 0x1fff) + (fin->fin_dlen >> 3);
d194 2
a195 1
	if ((ipf = ipfr_new(ip, fin, pass, ipfr_nattab))) {
d260 1
a260 1
			if ((off & 0x1fff) == f->ipfr_off) {
d285 1
a285 1
	if (ipf) {
d290 1
a290 1
		if (ipf->ipfr_ttl == 1) {
d360 2
a361 1
			if ((nat = (nat_t *)fr->ipfr_data)) {
d440 2
a441 1
				if ((nat = (nat_t *)fr->ipfr_data)) {
@


1.9
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*       $OpenBSD$       */
d11 1
a11 1
static const char rcsid[] = "@@(#)$Id: ip_frag.c,v 1.8 1998/01/26 04:10:41 dgregor Exp $";
d62 5
a66 1
#include "ip_fil_compat.h"
d68 6
a73 6
#include "ip_fil.h"
#include "ip_proxy.h"
#include "ip_nat.h"
#include "ip_frag.h"
#include "ip_state.h"
#include "ip_auth.h"
d84 2
a85 3
extern	kmutex_t	ipf_frag;
extern	kmutex_t	ipf_natfrag;
extern	kmutex_t	ipf_nat;
d133 1
a133 1
			ipfr_stats.ifs_exists++;
d143 1
a143 1
		ipfr_stats.ifs_nomem++;
d164 2
a165 2
	ipfr_stats.ifs_new++;
	ipfr_inuse++;
d177 1
a177 1
	MUTEX_ENTER(&ipf_frag);
d179 1
a179 1
	MUTEX_EXIT(&ipf_frag);
d192 1
a192 1
	MUTEX_ENTER(&ipf_natfrag);
d197 1
a197 1
	MUTEX_EXIT(&ipf_natfrag);
d264 1
a264 1
			ipfr_stats.ifs_hits++;
d281 1
a281 1
	MUTEX_ENTER(&ipf_natfrag);
d294 1
a294 1
	MUTEX_EXIT(&ipf_natfrag);
d309 1
a309 1
	MUTEX_ENTER(&ipf_frag);
d312 1
a312 1
	MUTEX_EXIT(&ipf_frag);
d326 1
a326 1
	MUTEX_ENTER(&ipf_natfrag);
d332 1
a332 1
	MUTEX_EXIT(&ipf_natfrag);
d345 1
a345 1
	MUTEX_ENTER(&ipf_frag);
d351 1
a351 1
	MUTEX_EXIT(&ipf_frag);
d353 2
a354 2
	MUTEX_ENTER(&ipf_nat);
	MUTEX_ENTER(&ipf_natfrag);
d364 2
a365 2
	MUTEX_EXIT(&ipf_natfrag);
	MUTEX_EXIT(&ipf_nat);
d389 1
a389 1
	MUTEX_ENTER(&ipf_frag);
d407 2
a408 2
				ipfr_stats.ifs_expire++;
				ipfr_inuse--;
d413 1
a413 1
	MUTEX_EXIT(&ipf_frag);
d422 2
a423 2
	MUTEX_ENTER(&ipf_nat);
	MUTEX_ENTER(&ipf_natfrag);
d435 2
a436 2
				ipfr_stats.ifs_expire++;
				ipfr_inuse--;
d445 2
a446 2
	MUTEX_EXIT(&ipf_natfrag);
	MUTEX_EXIT(&ipf_nat);
@


1.8
log
@IPF 3.2.3
@
text
@d1 1
d11 1
a11 1
static const char rcsid[] = "@@(#)$Id: ip_frag.c,v 2.0.2.19.2.1 1997/11/12 10:50:21 darrenr Exp $";
@


1.7
log
@IPF 1.3.7
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * (C)opyright 1993,1994,1995 by Darren Reed.
d8 3
a10 5
#if 0
#if !defined(lint) && defined(LIBC_SCCS)
static	char	sccsid[] = "@@(#)ip_frag.c	1.11 3/24/96 (C) 1993-1995 Darren Reed";
static	char	rcsid[] = "Id: ip_frag.c,v 2.0.1.1 1997/01/09 15:14:43 darrenr Exp";
#endif
d20 1
d22 4
d27 1
d29 1
d31 1
d33 1
a33 1
#ifdef	_KERNEL
d37 3
a39 1
# include <sys/mbuf.h>
d55 1
d57 1
a59 1
#include <netinet/tcpip.h>
d62 1
d64 2
a66 1
#include "ip_nat.h"
d68 1
d71 1
d73 2
a74 2
u_long	ipfr_inuse = 0;
u_long	fr_ipfrttl = 120;	/* 60 seconds */
d78 1
a78 2
#if	SOLARIS
# ifdef	_KERNEL
d80 2
a81 4
# else
#define	bcmp(a,b,c)	memcmp(a,b,c)
#define	bcopy(a,b,c)	memmove(b,a,c)
# endif
a83 5
# if BSD < 199306
int	ipfr_slowtimer __P((void));
#else
void	ipfr_slowtimer __P((void));
#endif
d85 5
a89 2
ipfrstat_t *
ipfr_fragstats()
d92 1
d102 5
a106 5
int
ipfr_newfrag(ip, fin, pass)
	ip_t *ip;
	fr_info_t *fin;
	int pass;
d126 1
a126 2
	MUTEX_ENTER(&ipf_frag);
	for (fp = &ipfr_heads[idx]; (fr = *fp); fp = &fr->ipfr_next)
d130 1
a130 2
			MUTEX_EXIT(&ipf_frag);
			return -1;
d133 6
a138 1
	if (!(fr = (ipfr_t *)KMALLOC(sizeof(*fr)))) {
d140 1
a140 2
		MUTEX_EXIT(&ipf_frag);
		return -1;
d142 8
a149 2
	if ((fr->ipfr_next = ipfr_heads[idx]))
		ipfr_heads[idx]->ipfr_prev = fr;
d151 2
a152 1
	ipfr_heads[idx] = fr;
d156 3
a159 1
	*fp = fr;
d162 13
d176 19
a194 1
	return 0;
d202 4
a205 4
int
ipfr_knownfrag(ip, fin)
	ip_t *ip;
	fr_info_t *fin;
a208 1
	int	ret;
d213 2
d228 4
a231 2
	MUTEX_ENTER(&ipf_frag);
	for (f = ipfr_heads[idx]; f; f = f->ipfr_next)
d236 1
a236 1
			if (f != ipfr_heads[idx]) {
d243 2
a244 2
				f->ipfr_next = ipfr_heads[idx];
				ipfr_heads[idx]->ipfr_prev = f;
d246 1
a246 1
				ipfr_heads[idx] = f;
a247 1
			ret = f->ipfr_pass;
d249 1
a249 1
			atoff = (off & 0x1fff) - (fin->fin_dlen >> 3);
d254 1
a254 1
			if (atoff == f->ipfr_off) {
d258 1
a258 1
					f->ipfr_off = off;
d261 26
a286 2
			MUTEX_EXIT(&ipf_frag);
			return ret;
d288 20
d309 20
a328 1
	return 0;
d335 1
a335 2
void
ipfr_unload()
d338 1
a339 3
#if	!SOLARIS && defined(_KERNEL)
	int	s;
#endif
a341 1
	SPLNET(s);
a346 1
	SPLX(s);
d348 14
d370 2
a371 2
# if BSD < 199306
int
d373 1
a373 1
void
a374 1
ipfr_slowtimer()
d377 1
d380 5
a385 1
	SPLNET(s);
d387 5
a408 2
	SPLX(s);
# if	SOLARIS
d410 34
d446 3
a448 1
	ipfr_timer_id = timeout(ipfr_slowtimer, NULL, HZ/2);
d450 1
a450 2
	fr_timeoutstate();
	ip_natexpire();
d452 2
a453 1
#  if BSD < 199306
@


1.6
log
@syslog.h -> sys/syslog.h

THIS IS THE KERNEL, DAMNIT.
@
text
@d1 1
d10 1
a10 1
#ifndef	lint
d12 1
a12 1
static	char	rcsid[] = "$OpenBSD: ip_frag.c,v 1.5 1996/10/24 17:56:21 tholo Exp $";
a21 3
#if defined(_KERNEL) || defined(KERNEL)
#include <sys/systm.h>
#endif
d28 3
a31 5
# if defined(__OpenBSD__)
#  include <sys/dirent.h>
# else
#  include <sys/dir.h>
# endif
a52 1
#include <sys/syslog.h>
d62 1
d137 1
a137 1
	fr->ipfr_ttl = 120;	/* 60 seconds */
d234 1
a234 1
			KFREE(fp);
d248 1
a248 1
#else
d250 1
a250 1
#endif
d272 1
a272 1
				KFREE(fp);
d277 1
a277 1
#if	SOLARIS
d282 1
a282 1
#else
d286 1
a286 2
#endif
# if BSD < 199306
d288 1
@


1.5
log
@<sys/dir.h> is for use as a compatibility interface only.  Warn if
included by kernel modules, and also remove use from any modules that
currently attempt to use it.
@
text
@d11 1
a11 1
static	char	rcsid[] = "$OpenBSD: ip_frag.c,v 1.4 1996/10/08 07:33:27 niklas Exp $";
d57 1
a57 1
#include <syslog.h>
@


1.4
log
@Prototype & Stylistic fixes for high -W gcc levels
@
text
@d11 1
a11 1
static	char	rcsid[] = "$OpenBSD: ip_frag.c,v 1.3 1996/07/18 05:01:02 dm Exp $";
d31 5
a35 1
# include <sys/dir.h>
@


1.3
log
@ipfilter 3.1.0
@
text
@d8 1
d11 2
a12 1
static	char	rcsid[] = "$Id: ip_frag.c,v 1.1.1.1 1996/06/23 07:27:18 darrenr Exp $";
d21 3
d54 1
a55 1
#include "ip_fil_compat.h"
d75 5
d81 2
a82 1
ipfrstat_t *ipfr_fragstats()
d94 5
a98 4
int ipfr_newfrag(ip, fin, pass)
ip_t *ip;
fr_info_t *fin;
int pass;
d152 4
a155 3
int ipfr_knownfrag(ip, fin)
ip_t *ip;
fr_info_t *fin;
d220 2
a221 1
void ipfr_unload()
d247 1
a247 1
int ipfr_slowtimer()
d249 1
a249 1
void ipfr_slowtimer()
d251 1
@


1.2
log
@ipfilter 3.0.4
@
text
@d10 1
d50 1
@


1.1
log
@IP filter 3.0.1
@
text
@d9 1
a9 1
static	char	sccsid[] = "@@(#)ip_frag.c	1.5 1/14/96 (C) 1993-1995 Darren Reed";
d12 4
a15 1
#include <string.h>
d81 1
a81 1
int ipfr_newfrag(ip, pass)
d83 1
d124 2
a125 1
	fr->ipfr_pass = pass;
d138 1
a138 1
int ipfr_knownfrag(ip)
d140 1
d144 1
d166 2
d180 13
d194 2
a195 1
			return f->ipfr_pass;
d209 1
a209 1
#if	!SOLARIS
@
