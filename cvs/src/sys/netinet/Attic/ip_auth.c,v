head	1.19;
access;
symbols
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	UBC_SYNC_A:1.19
	UBC_SYNC_B:1.19
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_9:1.17.0.2
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	SMP:1.10.0.2
	SMP_BASE:1.10
	kame_19991208:1.7
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2001.05.30.02.12.28;	author deraadt;	state dead;
branches;
next	1.18;

1.18
date	2001.05.08.19.58.01;	author fgsch;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.30.04.23.55;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.17.07.25.18;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.17.04.47.11;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.24.21.59.10;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.01.06.16.47;	author kjell;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2000.03.13.23.40.17;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.16.22.34.17;	author kjell;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.01.19.29.58;	author kjell;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	99.12.15.05.20.21;	author kjell;	state Exp;
branches;
next	1.8;

1.8
date	99.12.13.10.41.56;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	99.12.08.06.50.19;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	99.11.22.04.35.11;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.02.05.05.58.49;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.09.15.09.51.17;	author pattonme;	state Exp;
branches;
next	1.3;

1.3
date	98.05.18.21.10.36;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	98.02.17.01.39.01;	author dgregor;	state Exp;
branches;
next	1.1;

1.1
date	98.01.26.04.10.38;	author dgregor;	state Exp;
branches;
next	;

1.10.2.1
date	2000.02.20.11.57.23;	author niklas;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2001.05.14.22.40.08;	author niklas;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2001.07.04.10.54.39;	author niklas;	state dead;
branches;
next	;

1.13.2.1
date	2000.05.27.20.45.17;	author jason;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ip_auth.c,v 1.18 2001/05/08 19:58:01 fgsch Exp $	*/

/*
 * Copyright (C) 1998-2001 by Darren Reed & Guido van Rooij.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#if !defined(lint)
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.11.2.8 2001/04/03 15:48:12 darrenr Exp $";
#endif

#include <sys/errno.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/time.h>
#include <sys/file.h>
#if !defined(_KERNEL) && !defined(KERNEL)
# include <stdio.h>
# include <stdlib.h>
# include <string.h>
#endif
#if (defined(KERNEL) || defined(_KERNEL)) && (__FreeBSD_version >= 220000)
# include <sys/filio.h>
# include <sys/fcntl.h>
#else
# include <sys/ioctl.h>
#endif
#include <sys/uio.h>
#ifndef linux
# include <sys/protosw.h>
#endif
#include <sys/socket.h>
#if (defined(_KERNEL) || defined(KERNEL)) && !defined(linux)
# include <sys/systm.h>
#endif
#if !defined(__SVR4) && !defined(__svr4__)
# ifndef linux
#  include <sys/mbuf.h>
# endif
#else
# include <sys/filio.h>
# include <sys/byteorder.h>
# ifdef _KERNEL
#  include <sys/dditypes.h>
# endif
# include <sys/stream.h>
# include <sys/kmem.h>
#endif
#if (_BSDI_VERSION >= 199802) || (__FreeBSD_version >= 400000)
# include <sys/queue.h>
#endif
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(bsdi)
# include <machine/cpu.h>
#endif
#include <net/if.h>
#ifdef sun
# include <net/af.h>
#endif
#include <net/route.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#ifndef	KERNEL
# define	KERNEL
# define	NOT_KERNEL
#endif
#ifndef linux
# include <netinet/ip_var.h>
#endif
#ifdef	NOT_KERNEL
# undef	KERNEL
#endif
#ifdef __sgi
# ifdef IFF_DRVRLOCK /* IRIX6 */
#  include <sys/hashing.h>
# endif
#endif
#include <netinet/tcp.h>
#if defined(__sgi) && !defined(IFF_DRVRLOCK) /* IRIX < 6 */
extern struct ifqueue   ipintrq;                /* ip packet input queue */
#else
# ifndef linux
#  if __FreeBSD_version >= 300000
#   include <net/if_var.h>
#  endif
#  include <netinet/in_var.h>
#  include <netinet/tcp_fsm.h>
# endif
#endif
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>
#include <netinet/ip_fil_compat.h>
#include <netinet/tcpip.h>
#include <netinet/ip_fil.h>
#include <netinet/ip_auth.h>
#if !SOLARIS && !defined(linux)
# include <net/netisr.h>
# ifdef __FreeBSD__
#  include <machine/cpufunc.h>
# endif
#endif
#if (__FreeBSD_version >= 300000)
# include <sys/malloc.h>
# if (defined(_KERNEL) || defined(KERNEL)) && !defined(IPFILTER_LKM)
#  include <sys/libkern.h>
#  include <sys/systm.h>
# endif
#endif



#if (SOLARIS || defined(__sgi)) && defined(_KERNEL)
extern KRWLOCK_T ipf_auth;
extern kmutex_t ipf_authmx;
# if SOLARIS
extern kcondvar_t ipfauthwait;
# endif
#endif
#ifdef linux
static struct wait_queue *ipfauthwait = NULL;
#endif

int	fr_authsize = FR_NUMAUTH;
int	fr_authused = 0;
int	fr_defaultauthage = 600;
int	fr_auth_lock = 0;
fr_authstat_t	fr_authstats;
static frauth_t fr_auth[FR_NUMAUTH];
mb_t	*fr_authpkts[FR_NUMAUTH];
static int	fr_authstart = 0, fr_authend = 0, fr_authnext = 0;
static frauthent_t	*fae_list = NULL;
frentry_t	*ipauth = NULL;


/*
 * Check if a packet has authorization.  If the packet is found to match an
 * authorization result and that would result in a feedback loop (i.e. it
 * will end up returning FR_AUTH) then return FR_BLOCK instead.
 */
u_32_t fr_checkauth(ip, fin)
ip_t *ip;
fr_info_t *fin;
{
	u_short id = ip->ip_id;
	u_32_t pass;
	int i;

	if (fr_auth_lock)
		return 0;

	READ_ENTER(&ipf_auth);
	for (i = fr_authstart; i != fr_authend; ) {
		/*
		 * index becomes -2 only after an SIOCAUTHW.  Check this in
		 * case the same packet gets sent again and it hasn't yet been
		 * auth'd.
		 */
		if ((fr_auth[i].fra_index == -2) &&
		    (id == fr_auth[i].fra_info.fin_id) &&
		    !bcmp((char *)fin,(char *)&fr_auth[i].fra_info,FI_CSIZE)) {
			/*
			 * Avoid feedback loop.
			 */
			if (!(pass = fr_auth[i].fra_pass) || (pass & FR_AUTH))
				pass = FR_BLOCK;
			RWLOCK_EXIT(&ipf_auth);
			WRITE_ENTER(&ipf_auth);
			fr_authstats.fas_hits++;
			fr_auth[i].fra_index = -1;
			fr_authused--;
			if (i == fr_authstart) {
				while (fr_auth[i].fra_index == -1) {
					i++;
					if (i == FR_NUMAUTH)
						i = 0;
					fr_authstart = i;
					if (i == fr_authend)
						break;
				}
				if (fr_authstart == fr_authend) {
					fr_authnext = 0;
					fr_authstart = fr_authend = 0;
				}
			}
			RWLOCK_EXIT(&ipf_auth);
			return pass;
		}
		i++;
		if (i == FR_NUMAUTH)
			i = 0;
	}
	fr_authstats.fas_miss++;
	RWLOCK_EXIT(&ipf_auth);
	return 0;
}


/*
 * Check if we have room in the auth array to hold details for another packet.
 * If we do, store it and wake up any user programs which are waiting to
 * hear about these events.
 */
int fr_newauth(m, fin, ip)
mb_t *m;
fr_info_t *fin;
ip_t *ip;
{
#if defined(_KERNEL) && SOLARIS
	qif_t *qif = fin->fin_qif;
#endif
	int i;

	if (fr_auth_lock)
		return 0;

	WRITE_ENTER(&ipf_auth);
	if (fr_authstart > fr_authend) {
		fr_authstats.fas_nospace++;
		RWLOCK_EXIT(&ipf_auth);
		return 0;
	} else {
		if ((fr_authstart == 0) && (fr_authend == FR_NUMAUTH - 1)) {
			fr_authstats.fas_nospace++;
			RWLOCK_EXIT(&ipf_auth);
			return 0;
		}
	}

	fr_authstats.fas_added++;
	fr_authused++;
	i = fr_authend++;
	if (fr_authend == FR_NUMAUTH)
		fr_authend = 0;
	RWLOCK_EXIT(&ipf_auth);
	fr_auth[i].fra_index = i;
	fr_auth[i].fra_pass = 0;
	fr_auth[i].fra_age = fr_defaultauthage;
	bcopy((char *)fin, (char *)&fr_auth[i].fra_info, sizeof(*fin));
#if SOLARIS && defined(_KERNEL)
# if !defined(sparc)
	/*
	 * No need to copyback here as we want to undo the changes, not keep
	 * them.
	 */
	if ((ip == (ip_t *)m->b_rptr) && (ip->ip_v == 4))
	{
		register u_short bo;

		bo = ip->ip_len;
		ip->ip_len = htons(bo);
		bo = ip->ip_off;
		ip->ip_off = htons(bo);
	}
# endif
	m->b_rptr -= qif->qf_off;
	fr_authpkts[i] = *(mblk_t **)fin->fin_mp;
	fr_auth[i].fra_q = qif->qf_q;
	cv_signal(&ipfauthwait);
#else
	fr_authpkts[i] = m;
	WAKEUP(&fr_authnext);
#endif
	return 1;
}


int fr_auth_ioctl(data, cmd, fr, frptr)
caddr_t data;
#if defined(__NetBSD__) || defined(__OpenBSD__) || (FreeBSD_version >= 300003)
u_long cmd;
#else
int cmd;
#endif
frentry_t *fr, **frptr;
{
	mb_t *m;
#if defined(_KERNEL) && !SOLARIS
	struct ifqueue *ifq;
#endif
	frauth_t auth, *au = &auth;
	frauthent_t *fae, **faep;
	int i, error = 0;

	switch (cmd)
	{
	case SIOCSTLCK :
		error = fr_lock(data, &fr_auth_lock);
		break;
	case SIOCINIFR :
	case SIOCRMIFR :
	case SIOCADIFR :
		error = EINVAL;
		break;
	case SIOCINAFR :
		error = EINVAL;
		break;
	case SIOCRMAFR :
	case SIOCADAFR :
		for (faep = &fae_list; (fae = *faep); )
			if (&fae->fae_fr == fr)
				break;
			else
				faep = &fae->fae_next;
		if (cmd == SIOCRMAFR) {
			if (!fr || !frptr)
				error = EINVAL;
			else if (!fae)
				error = ESRCH;
			else {
				WRITE_ENTER(&ipf_auth);
				*faep = fae->fae_next;
				*frptr = fr->fr_next;
				RWLOCK_EXIT(&ipf_auth);
				KFREE(fae);
			}
		} else if (fr && frptr) {
			KMALLOC(fae, frauthent_t *);
			if (fae != NULL) {
				bcopy((char *)fr, (char *)&fae->fae_fr,
				      sizeof(*fr));
				WRITE_ENTER(&ipf_auth);
				fae->fae_age = fr_defaultauthage;
				fae->fae_fr.fr_hits = 0;
				fae->fae_fr.fr_next = *frptr;
				*frptr = &fae->fae_fr;
				fae->fae_next = *faep;
				*faep = fae;
				ipauth = &fae_list->fae_fr;
				RWLOCK_EXIT(&ipf_auth);
			} else
				error = ENOMEM;
		} else
			error = EINVAL;
		break;
	case SIOCATHST:
		READ_ENTER(&ipf_auth);
		fr_authstats.fas_faelist = fae_list;
		RWLOCK_EXIT(&ipf_auth);
		error = IWCOPYPTR((char *)&fr_authstats, data,
				   sizeof(fr_authstats));
		break;
	case SIOCAUTHW:
fr_authioctlloop:
		READ_ENTER(&ipf_auth);
		if ((fr_authnext != fr_authend) && fr_authpkts[fr_authnext]) {
			error = IWCOPYPTR((char *)&fr_auth[fr_authnext], data,
					  sizeof(frauth_t));
			RWLOCK_EXIT(&ipf_auth);
			if (error)
				break;
			WRITE_ENTER(&ipf_auth);
			fr_authnext++;
			if (fr_authnext == FR_NUMAUTH)
				fr_authnext = 0;
			RWLOCK_EXIT(&ipf_auth);
			return 0;
		}
#ifdef	_KERNEL
# if	SOLARIS
		mutex_enter(&ipf_authmx);
		if (!cv_wait_sig(&ipfauthwait, &ipf_authmx)) {
			mutex_exit(&ipf_authmx);
			return EINTR;
		}
		mutex_exit(&ipf_authmx);
# else
#  ifdef linux
		interruptible_sleep_on(&ipfauthwait);
		if (current->signal & ~current->blocked)
			error = -EINTR;
#  else
		error = SLEEP(&fr_authnext, "fr_authnext");
# endif
# endif
#endif
		RWLOCK_EXIT(&ipf_auth);
		if (!error)
			goto fr_authioctlloop;
		break;
	case SIOCAUTHR:
		error = IRCOPYPTR(data, (caddr_t)&auth, sizeof(auth));
		if (error)
			return error;
		WRITE_ENTER(&ipf_auth);
		i = au->fra_index;
		if ((i < 0) || (i > FR_NUMAUTH) ||
		    (fr_auth[i].fra_info.fin_id != au->fra_info.fin_id)) {
			RWLOCK_EXIT(&ipf_auth);
			return EINVAL;
		}
		m = fr_authpkts[i];
		fr_auth[i].fra_index = -2;
		fr_auth[i].fra_pass = au->fra_pass;
		fr_authpkts[i] = NULL;
#ifdef	_KERNEL
		RWLOCK_EXIT(&ipf_auth);
# ifndef linux
		if (m && au->fra_info.fin_out) {
#  if SOLARIS
			error = fr_qout(fr_auth[i].fra_q, m);
#  else /* SOLARIS */
			struct route ro;

			bzero((char *)&ro, sizeof(ro));
#   if ((_BSDI_VERSION >= 199802) && (_BSDI_VERSION < 200005)) || \
       defined(__OpenBSD__)
			error = ip_output(m, NULL, &ro, IP_FORWARDING, NULL,
					  NULL);
#   else
			error = ip_output(m, NULL, &ro, IP_FORWARDING, NULL);
#   endif
			if (ro.ro_rt)
				RTFREE(ro.ro_rt);
#  endif /* SOLARIS */
			if (error)
				fr_authstats.fas_sendfail++;
			else
				fr_authstats.fas_sendok++;
		} else if (m) {
# if SOLARIS
			error = fr_qin(fr_auth[i].fra_q, m);
# else /* SOLARIS */
			ifq = &ipintrq;
			if (IF_QFULL(ifq)) {
				IF_DROP(ifq);
				m_freem(m);
				error = ENOBUFS;
			} else {
				IF_ENQUEUE(ifq, m);
				schednetisr(NETISR_IP);
			}
# endif /* SOLARIS */
			if (error)
				fr_authstats.fas_quefail++;
			else
				fr_authstats.fas_queok++;
		} else
			error = EINVAL;
# endif
# if SOLARIS
		if (error)
			error = EINVAL;
# else
		/*
		 * If we experience an error which will result in the packet
		 * not being processed, make sure we advance to the next one.
		 */ 
		if (error == ENOBUFS) {
			fr_authused--;
			fr_auth[i].fra_index = -1;
			fr_auth[i].fra_pass = 0;
			if (i == fr_authstart) {
				while (fr_auth[i].fra_index == -1) {
					i++;
					if (i == FR_NUMAUTH)
						i = 0;
					fr_authstart = i;
					if (i == fr_authend)
						break;
				}
				if (fr_authstart == fr_authend) {
					fr_authnext = 0;
					fr_authstart = fr_authend = 0;
				}
			}
		}
# endif
#endif /* _KERNEL */
		break;
	default :
		error = EINVAL;
		break;
	}
	return error;
}


#ifdef	_KERNEL
/*
 * Free all network buffer memory used to keep saved packets.
 */
void fr_authunload()
{
	register int i;
	register frauthent_t *fae, **faep;
	mb_t *m;

	WRITE_ENTER(&ipf_auth);
	for (i = 0; i < FR_NUMAUTH; i++) {
		if ((m = fr_authpkts[i])) {
			FREE_MB_T(m);
			fr_authpkts[i] = NULL;
			fr_auth[i].fra_index = -1;
		}
	}


	for (faep = &fae_list; (fae = *faep); ) {
		*faep = fae->fae_next;
		KFREE(fae);
	}
	ipauth = NULL;
	RWLOCK_EXIT(&ipf_auth);
}


/*
 * Slowly expire held auth records.  Timeouts are set
 * in expectation of this being called twice per second.
 */
void fr_authexpire()
{
	register int i;
	register frauth_t *fra;
	register frauthent_t *fae, **faep;
	mb_t *m;
#if !SOLARIS
	int s;
#endif

	if (fr_auth_lock)
		return;

	SPL_NET(s);
	WRITE_ENTER(&ipf_auth);
	for (i = 0, fra = fr_auth; i < FR_NUMAUTH; i++, fra++) {
		if ((!--fra->fra_age) && (m = fr_authpkts[i])) {
			FREE_MB_T(m);
			fr_authpkts[i] = NULL;
			fr_auth[i].fra_index = -1;
			fr_authstats.fas_expire++;
			fr_authused--;
		}
	}

	for (faep = &fae_list; (fae = *faep); ) {
		if (!--fae->fae_age) {
			*faep = fae->fae_next;
			KFREE(fae);
			fr_authstats.fas_expire++;
		} else
			faep = &fae->fae_next;
	}
	ipauth = &fae_list->fae_fr;
	RWLOCK_EXIT(&ipf_auth);
	SPL_X(s);
}
#endif
@


1.18
log
@IPfilter 3.4.17; kjell@@ deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.17 2001/01/30 04:23:55 kjell Exp $	*/
@


1.17
log
@re-add local ipf changes that were whacked in the 3.4.16 merge. userland to follow
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.16 2001/01/17 07:25:18 fgsch Exp $	*/
d4 1
a4 1
 * Copyright (C) 1998-2000 by Darren Reed & Guido van Rooij.
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.11.2.5 2001/01/10 06:18:35 darrenr Exp $";
d241 2
a242 1
#if !defined(sparc) && !defined(m68k)
a246 1
# if SOLARIS && defined(_KERNEL)
a247 1
# endif
a252 5
# if !SOLARIS && !defined(__NetBSD__)
		/* 4.4BSD converts this ip_input.c, but I don't in solaris.c */
		bo = ip->ip_id;
		ip->ip_id = htons(bo);
# endif
d256 1
a256 2
#endif
#if SOLARIS && defined(_KERNEL)
a262 3
# if defined(linux) && defined(_KERNEL)
	wake_up_interruptible(&ipfauthwait);
# else
a263 1
# endif
d307 3
a309 1
			if (!fae)
d318 1
a318 1
		} else {
d334 2
a335 1
		}
d404 6
a409 2
#   if (_BSDI_VERSION >= 199802) || defined(__OpenBSD__)
			error = ip_output(m, NULL, NULL, IP_FORWARDING, NULL,
d412 1
a412 1
			error = ip_output(m, NULL, NULL, IP_FORWARDING, NULL);
d414 2
@


1.16
log
@IPF 3.4.16.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.15 2001/01/17 04:47:11 fgsch Exp $	*/
d94 1
a94 1
#include "netinet/ip_compat.h"
d96 2
a97 2
#include "netinet/ip_fil.h"
#include "netinet/ip_auth.h"
@


1.15
log
@IPF 3.4.15. (IPv6 not working yet).

Note: before building the userland part you need to do make includes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.11.2.4 2000/08/05 14:48:50 darrenr Exp $";
d357 1
a357 1
					  sizeof(fr_info_t));
@


1.14
log
@Update to ipf 3.3.16. among other things, this addresses a security issue
with certain rule configurations:

* don't add TCP state if it is an RST packet and (attempt) to send out
  RST/ICMP packets in a manner that bypasses IP Filter.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.13 2000/05/01 06:16:47 kjell Exp $	*/
d4 1
a4 1
 * Copyright (C) 1998 by Darren Reed & Guido van Rooij.
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.1.2.4 2000/05/22 06:57:45 darrenr Exp $";
d35 1
a35 1
#if defined(_KERNEL) && !defined(linux)
d51 1
a51 1
#if _BSDI_VERSION >= 199802
d94 1
a94 1
#include <netinet/ip_fil_compat.h>
d96 2
a97 2
#include <netinet/ip_fil.h>
#include <netinet/ip_auth.h>
d128 1
d130 1
a130 1
frauth_t fr_auth[FR_NUMAUTH];
d132 2
a133 2
int	fr_authstart = 0, fr_authend = 0, fr_authnext = 0;
frauthent_t	*fae_list = NULL;
d150 3
d215 3
d247 1
a247 1
	if (ip == (ip_t *)m->b_rptr)
d254 2
a255 1
# if !SOLARIS	/* 4.4BSD converts this ip_input.c, but I don't in solaris.c */
d282 1
a282 1
#if defined(__NetBSD__) || defined(__OpenBSD__)
d290 1
a290 2
#if defined(_KERNEL)
# if !SOLARIS
a291 2
	int s;
# endif
d299 3
d308 2
d330 2
a331 2
				IRCOPY((char *)data, (char *)&fae->fae_fr,
				       sizeof(fae->fae_fr));
d349 2
a350 1
		IWCOPY((char *)&fr_authstats, data, sizeof(fr_authstats));
d356 2
a357 2
			IWCOPY((char *)&fr_auth[fr_authnext], data,
			       sizeof(fr_info_t));
d359 2
d391 3
a393 1
		IRCOPY(data, (caddr_t)&auth, sizeof(auth));
a406 1
		SPL_NET(s);
a471 1
		SPL_X(s);
d524 3
@


1.13
log
@Update to ipfilter 3.3.13. This should be the last of the 3.3.x releases.
This patch fixes mostly ICMP timeout problems, as the ftp proxy
changes were imported previously.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.12 2000/03/13 23:40:17 kjell Exp $	*/
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.1.2.3 2000/04/25 16:21:12 darrenr Exp $";
d201 1
a201 7
int fr_newauth(m, fin, ip
#if defined(_KERNEL) && SOLARIS
, qif)
qif_t *qif;
#else
)
#endif
d206 3
@


1.13.2.1
log
@Pull in patch from current:
Errata:
A misuse of ipf(8) keep-state rules can result in firewall rules being bypassed.
Fix (kjell):
Update to ipf 3.3.16. among other things, this addresses a security issue
with certain rule configurations:

* don't add TCP state if it is an RST packet and (attempt) to send out
RST/ICMP packets in a manner that bypasses IP Filter.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.14 2000/05/24 21:59:10 kjell Exp $	*/
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.1.2.4 2000/05/22 06:57:45 darrenr Exp $";
d201 7
a207 1
int fr_newauth(m, fin, ip)
a211 3
#if defined(_KERNEL) && SOLARIS
	qif_t *qif = fin->fin_qif;
#endif
@


1.12
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.1.2.2 2000/01/16 10:12:14 darrenr Exp $";
d24 1
a24 1
#if defined(KERNEL) && (__FreeBSD_version >= 220000)
@


1.11
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@@


1.10
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@@


1.10.2.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.11 2000/02/16 22:34:17 kjell Exp $	*/
@


1.10.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.17 2001/01/30 04:23:55 kjell Exp $	*/
d4 1
a4 1
 * Copyright (C) 1998-2000 by Darren Reed & Guido van Rooij.
d11 1
a11 1
static const char rcsid[] = "@@(#)$IPFilter: ip_auth.c,v 2.11.2.5 2001/01/10 06:18:35 darrenr Exp $";
d24 1
a24 1
#if (defined(KERNEL) || defined(_KERNEL)) && (__FreeBSD_version >= 220000)
d35 1
a35 1
#if (defined(_KERNEL) || defined(KERNEL)) && !defined(linux)
d51 1
a51 1
#if (_BSDI_VERSION >= 199802) || (__FreeBSD_version >= 400000)
a127 1
int	fr_auth_lock = 0;
d129 1
a129 1
static frauth_t fr_auth[FR_NUMAUTH];
d131 2
a132 2
static int	fr_authstart = 0, fr_authend = 0, fr_authnext = 0;
static frauthent_t	*fae_list = NULL;
a148 3
	if (fr_auth_lock)
		return 0;

d201 7
a207 1
int fr_newauth(m, fin, ip)
a211 3
#if defined(_KERNEL) && SOLARIS
	qif_t *qif = fin->fin_qif;
#endif
a213 3
	if (fr_auth_lock)
		return 0;

d243 1
a243 1
	if ((ip == (ip_t *)m->b_rptr) && (ip->ip_v == 4))
d250 1
a250 2
# if !SOLARIS && !defined(__NetBSD__)
		/* 4.4BSD converts this ip_input.c, but I don't in solaris.c */
d277 1
a277 1
#if defined(__NetBSD__) || defined(__OpenBSD__) || (FreeBSD_version >= 300003)
d285 2
a286 1
#if defined(_KERNEL) && !SOLARIS
d288 2
a296 3
	case SIOCSTLCK :
		error = fr_lock(data, &fr_auth_lock);
		break;
a302 2
		error = EINVAL;
		break;
d323 2
a324 2
				bcopy((char *)fr, (char *)&fae->fae_fr,
				      sizeof(*fr));
d342 1
a342 2
		error = IWCOPYPTR((char *)&fr_authstats, data,
				   sizeof(fr_authstats));
d348 2
a349 2
			error = IWCOPYPTR((char *)&fr_auth[fr_authnext], data,
					  sizeof(frauth_t));
a350 2
			if (error)
				break;
d381 1
a381 3
		error = IRCOPYPTR(data, (caddr_t)&auth, sizeof(auth));
		if (error)
			return error;
d395 1
d461 1
a513 3

	if (fr_auth_lock)
		return;
@


1.10.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_auth.c,v 1.10.2.2 2001/05/14 22:40:08 niklas Exp $	*/
@


1.9
log
@Import of Darren Reed's IPFilter 3.3.4, including OpenBSD patches.

Many, many enhancements and improvements, including new in-kernel
proxies, enhancements to logging, and many bugfixes.

Note: Man pages have not yet been re-converted to mdoc.
@
text
@d1 2
a2 1
/* $OpenBSD$ */
d11 1
a11 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.8 1999/12/13 10:41:56 itojun Exp $";
d401 1
a401 1
#   if ((_BSDI_VERSION >= 199802) || defined(__OpenBSD__))
@


1.8
log
@remove extra checks for #define INET (merged mistakingly from kame).
this is harmful against some of lkm compilation.
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_auth.c,v 1.7 1999/12/08 06:50:19 itojun Exp $       */
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.7 1999/12/08 06:50:19 itojun Exp $";
d44 3
a46 1
# include <sys/dditypes.h>
d50 3
d58 1
a58 1
#include <net/af.h>
d65 2
a66 2
#define	KERNEL
#define	NOT_KERNEL
d72 1
a72 1
#undef	KERNEL
d76 1
a76 1
#include <sys/hashing.h>
d84 3
d93 1
a93 5
#if defined(__OpenBSD__)
# include <netinet/ip_fil_compat.h>
#else
# include <netinet/ip_compat.h>
#endif
d103 8
d140 1
a140 1
int fr_checkauth(ip, fin)
d214 1
a214 6
	if ((fr_authstart > fr_authend) && (fr_authstart - fr_authend == -1)) {
		fr_authstats.fas_nospace++;
		RWLOCK_EXIT(&ipf_auth);
		return 0;
	}
	if (fr_authend - fr_authstart == FR_NUMAUTH - 1) {
d218 6
d320 1
a320 1
			KMALLOC(fae, frauthent_t *, sizeof(*fae));
d325 1
a325 2
				if (!fae->fae_age)
					fae->fae_age = fr_defaultauthage;
d331 1
d338 3
d400 4
a403 3
#ifdef __OpenBSD__
			error = ip_output(m, NULL, NULL, IP_FORWARDING, NULL, NULL);
#else
d405 1
a405 1
#endif
d495 1
d527 1
a527 1
		if (!--fra->fra_age) {
d534 1
@


1.7
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_auth.c,v 1.6 1999/11/22 04:35:11 deraadt Exp $       */
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.6 1999/11/22 04:35:11 deraadt Exp $";
a55 5
#ifdef _KERNEL
#ifndef INET
#error ipfilter assumes options INET
#endif
#endif
@


1.6
log
@fix ip_output() missing arg; itojun@@itojun.org
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_auth.c,v 1.5 1999/02/05 05:58:49 deraadt Exp $       */
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.5 1999/02/05 05:58:49 deraadt Exp $";
d56 5
@


1.5
log
@ipf 3.2.10; work by kjell
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_auth.c,v 1.4 1998/09/15 09:51:17 pattonme Exp $       */
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.4 1998/09/15 09:51:17 pattonme Exp $";
d384 3
d388 1
@


1.4
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_auth.c,v 1.3 1998/05/18 21:10:36 provos Exp $       */
d3 1
a3 1
 * Copyright (C) 1997 by Darren Reed & Guido van Rooij.
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id$";
a12 4
#if !defined(_KERNEL) && !defined(KERNEL)
# include <stdlib.h>
# include <string.h>
#endif
d18 5
d102 1
a102 1
extern krwlock_t ipf_auth;
@


1.3
log
@first step to the setsockopt/getsockopt interface as described in
draft-mcdonald-simple-ipsec-api, kernel notifies (EMT_REQUESTSA) signal
userland key management applications when security services are requested.
this is only for outgoing connections at the moment, incoming packets
are not yet checked against the selected socket policy.
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_auth.c,v 1.2 1998/02/17 01:39:01 dgregor Exp $       */
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.2 1998/02/17 01:39:01 dgregor Exp $";
d84 5
a88 1
#include "ip_fil_compat.h"
d90 2
a91 2
#include "ip_fil.h"
#include "ip_auth.h"
d94 3
d101 2
a102 1
extern kmutex_t ipf_auth;
d135 1
a135 1
	MUTEX_ENTER(&ipf_auth);
d150 2
d169 1
a169 1
			MUTEX_EXIT(&ipf_auth);
d177 1
a177 1
	MUTEX_EXIT(&ipf_auth);
d200 1
a200 1
	MUTEX_ENTER(&ipf_auth);
d203 1
a203 1
		MUTEX_EXIT(&ipf_auth);
d208 1
a208 1
		MUTEX_EXIT(&ipf_auth);
d217 1
a217 1
	MUTEX_EXIT(&ipf_auth);
d299 1
d302 1
d310 1
d318 1
d328 1
a328 1
		MUTEX_ENTER(&ipf_auth);
d330 1
a330 1
			IWCOPY((char *)&fr_auth[fr_authnext++], data,
d332 3
d337 1
a337 1
			MUTEX_EXIT(&ipf_auth);
d342 3
a344 2
		if (!cv_wait_sig(&ipfauthwait, &ipf_auth)) {
			mutex_exit(&ipf_auth);
d347 1
d358 1
a358 1
		MUTEX_EXIT(&ipf_auth);
d364 1
a364 1
		MUTEX_ENTER(&ipf_auth);
d368 1
a368 1
			MUTEX_EXIT(&ipf_auth);
d376 1
a376 1
		MUTEX_EXIT(&ipf_auth);
d383 1
a383 1
			error = ip_output(m, NULL, NULL, IP_FORWARDING, NULL, NULL);
d459 1
a459 1
	MUTEX_ENTER(&ipf_auth);
d473 1
a473 1
	MUTEX_EXIT(&ipf_auth);
d492 1
a492 1
	MUTEX_ENTER(&ipf_auth);
d511 1
a511 1
	MUTEX_EXIT(&ipf_auth);
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*       $OpenBSD$       */
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 1.1 1998/01/26 04:10:38 dgregor Exp $";
d364 1
a364 1
			error = ip_output(m, NULL, NULL, IP_FORWARDING, NULL);
@


1.1
log
@IPF 3.2.3
@
text
@d1 1
d10 1
a10 1
static const char rcsid[] = "@@(#)$Id: ip_auth.c,v 2.0.2.21.2.2 1997/11/12 10:45:51 darrenr Exp $";
@
