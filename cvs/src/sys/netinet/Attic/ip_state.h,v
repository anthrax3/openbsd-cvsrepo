head	1.19;
access;
symbols
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	UBC_SYNC_A:1.19
	UBC_SYNC_B:1.19
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_9:1.18.0.2
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	SMP:1.11.0.2
	SMP_BASE:1.11
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.19
date	2001.05.30.02.12.38;	author deraadt;	state dead;
branches;
next	1.18;

1.18
date	2001.02.06.17.29.31;	author fgsch;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.30.04.23.56;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.17.04.47.16;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.10.05.50.26;	author kjell;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.13.17.13.42;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.13.23.40.18;	author kjell;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.16.22.34.20;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.01.19.29.59;	author kjell;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	99.12.15.05.20.23;	author kjell;	state Exp;
branches;
next	1.9;

1.9
date	99.02.05.05.58.54;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.09.15.09.51.19;	author pattonme;	state Exp;
branches;
next	1.7;

1.7
date	98.02.17.01.39.08;	author dgregor;	state Exp;
branches;
next	1.6;

1.6
date	98.01.26.04.10.46;	author dgregor;	state Exp;
branches;
next	1.5;

1.5
date	97.06.23.19.03.51;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.02.11.22.23.30;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.08.07.33.30;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.18.05.01.09;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.01.25.05.41.49;	author dm;	state Exp;
branches;
next	;

1.11.2.1
date	2000.02.20.11.57.30;	author niklas;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2000.03.24.09.09.38;	author niklas;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2001.05.14.22.40.13;	author niklas;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2001.07.04.10.55.00;	author niklas;	state dead;
branches;
next	;


desc
@@


1.19
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ip_state.h,v 1.18 2001/02/06 17:29:31 fgsch Exp $	*/

/*
 * Copyright (C) 1995-2000 by Darren Reed.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 *
 * @@(#)ip_state.h	1.3 1/12/96 (C) 1995 Darren Reed
 * $IPFilter: ip_state.h,v 2.13.2.2 2000/08/23 11:01:31 darrenr Exp $
 */
#ifndef	__IP_STATE_H__
#define	__IP_STATE_H__

#if defined(__STDC__) || defined(__GNUC__)
# define	SIOCDELST	_IOW('r', 61, struct ipstate *)
#else
# define	SIOCDELST	_IOW(r, 61, struct ipstate *)
#endif

#ifndef		IPSTATE_SIZE
# define	IPSTATE_SIZE	5737
#endif

#ifndef		IPSTATE_MAX
# define	IPSTATE_MAX	4013	/* Maximum number of states held */
#endif

#define	PAIRS(s1,d1,s2,d2)	((((s1) == (s2)) && ((d1) == (d2))) ||\
				 (((s1) == (d2)) && ((d1) == (s2))))
#define	IPPAIR(s1,d1,s2,d2)	PAIRS((s1).s_addr, (d1).s_addr, \
				      (s2).s_addr, (d2).s_addr)


typedef struct udpstate {
	u_short	us_sport;
	u_short	us_dport;
} udpstate_t;

typedef struct icmpstate {
	u_short	ics_id;
	u_short	ics_seq;
	u_char	ics_type;
} icmpstate_t;

typedef	struct	tcpdata	{
	u_32_t	td_end;
	u_32_t	td_maxend;
	u_short	td_maxwin;
} tcpdata_t;

typedef	struct tcpstate {
	u_short	ts_sport;
	u_short	ts_dport;
	tcpdata_t ts_data[2];
	u_char	ts_state[2];
} tcpstate_t;

typedef struct ipstate {
	struct	ipstate	*is_next;
	struct	ipstate	**is_pnext;
	struct	ipstate	*is_hnext;
	struct	ipstate	**is_phnext;
	u_long	is_age;
	u_int	is_pass;
	U_QUAD_T	is_pkts;
	U_QUAD_T	is_bytes;
	void	*is_ifp[2];
	frentry_t	*is_rule;
	union	i6addr	is_src;
	union	i6addr	is_dst;
	u_char	is_p;			/* Protocol */
	u_char	is_v;
	u_int	is_hv;
	u_32_t	is_flags;
	u_32_t	is_opt;			/* packet options set */
	u_32_t	is_optmsk;		/*    "      "    mask */
	u_short	is_sec;			/* security options set */
	u_short	is_secmsk;		/*    "        "    mask */
	u_short	is_auth;		/* authentication options set */
	u_short	is_authmsk;		/*    "              "    mask */
	union {
		icmpstate_t	is_ics;
		tcpstate_t	is_ts;
		udpstate_t	is_us;
	} is_ps;
	char	is_ifname[2][IFNAMSIZ];
#if SOLARIS || defined(__sgi)
	kmutex_t	is_lock;
#endif
} ipstate_t;

#define	is_saddr	is_src.in4.s_addr
#define	is_daddr	is_dst.in4.s_addr
#define	is_icmp		is_ps.is_ics
#define	is_type		is_icmp.ics_type
#define	is_code		is_icmp.ics_code
#define	is_tcp		is_ps.is_ts
#define	is_udp		is_ps.is_us
#define is_send		is_tcp.ts_data[0].td_end
#define is_dend		is_tcp.ts_data[1].td_end
#define is_maxswin	is_tcp.ts_data[0].td_maxwin
#define is_maxdwin	is_tcp.ts_data[1].td_maxwin
#define is_maxsend	is_tcp.ts_data[0].td_maxend
#define is_maxdend	is_tcp.ts_data[1].td_maxend
#define	is_sport	is_tcp.ts_sport
#define	is_dport	is_tcp.ts_dport
#define	is_state	is_tcp.ts_state
#define	is_ifpin	is_ifp[0]
#define	is_ifpout	is_ifp[1]

#define	TH_OPENING	(TH_SYN|TH_ACK)
/*
 * is_flags:
 * Bits 0 - 3 are use as a mask with the current packet's bits to check for
 * whether it is short, tcp/udp, a fragment or the presence of IP options.
 * Bits 4 - 7 are set from the initial packet and contain what the packet
 * anded with bits 0-3 must match.
 * Bits 8,9 are used to indicate wildcard source/destination port matching.
 */

typedef	struct	ipstate_save	{
	void	*ips_next;
	struct	ipstate	ips_is;
	struct	frentry	ips_fr;
} ipstate_save_t;

#define	ips_rule	ips_is.is_rule


typedef	struct	ipslog	{
	U_QUAD_T	isl_pkts;
	U_QUAD_T	isl_bytes;
	union	i6addr	isl_src;
	union	i6addr	isl_dst;
	u_short	isl_type;
	union {
		u_short	isl_filler[2];
		u_short	isl_ports[2];
		u_short	isl_icmp;
	} isl_ps;
	u_char	isl_v;
	u_char	isl_p;
	u_char	isl_flags;
	u_char	isl_state[2];
} ipslog_t;

#define	isl_sport	isl_ps.isl_ports[0]
#define	isl_dport	isl_ps.isl_ports[1]
#define	isl_itype	isl_ps.isl_icmp

#define	ISL_NEW		0
#define	ISL_EXPIRE	0xffff
#define	ISL_FLUSH	0xfffe
#define	ISL_REMOVE	0xfffd


typedef	struct	ips_stat {
	u_long	iss_hits;
	u_long	iss_miss;
	u_long	iss_max;
	u_long	iss_tcp;
	u_long	iss_udp;
	u_long	iss_icmp;
	u_long	iss_nomem;
	u_long	iss_expire;
	u_long	iss_fin;
	u_long	iss_active;
	u_long	iss_logged;
	u_long	iss_logfail;
	u_long	iss_inuse;
	ipstate_t **iss_table;
	ipstate_t *iss_list;
} ips_stat_t;


extern	u_long	fr_tcpidletimeout;
extern	u_long	fr_tcpclosewait;
extern	u_long	fr_tcplastack;
extern	u_long	fr_tcptimeout;
extern	u_long	fr_tcpclosed;
extern	u_long	fr_tcphalfclosed;
extern	u_long	fr_udptimeout;
extern	u_long	fr_icmptimeout;
extern	int	fr_state_lock;
extern	int	fr_stateinit __P((void));
extern	int	fr_tcpstate __P((ipstate_t *, fr_info_t *, ip_t *, tcphdr_t *));
extern	ipstate_t	*fr_addstate __P((ip_t *, fr_info_t *, u_int));
extern	frentry_t	*fr_checkstate __P((ip_t *, fr_info_t *));
extern	void	ip_statesync __P((void *));
extern	void	fr_timeoutstate __P((void));
extern	void	fr_tcp_age __P((u_long *, u_char *, fr_info_t *, int));
extern	void	fr_stateunload __P((void));
extern	void	ipstate_log __P((struct ipstate *, u_int));
#if defined(__NetBSD__) || defined(__OpenBSD__)
extern	int	fr_state_ioctl __P((caddr_t, u_long, int));
#else
extern	int	fr_state_ioctl __P((caddr_t, int, int));
#endif

#endif /* __IP_STATE_H__ */
@


1.18
log
@ipf/ipnat check the securelevel in the original code, so don't do it twice.
Also remove uneeded definition of ICMP_UNREACH_FILTER_PROHIB; this isn't
needed. Why keep adding things to make diffs harder?
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.17 2001/01/30 04:23:56 kjell Exp $	*/
@


1.17
log
@re-add local ipf changes that were whacked in the 3.4.16 merge. userland to follow
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.16 2001/01/17 04:47:16 fgsch Exp $	*/
d22 1
a22 1
#ifndef 	IPSTATE_SIZE
@


1.16
log
@IPF 3.4.15. (IPv6 not working yet).

Note: before building the userland part you need to do make includes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d22 7
a28 2
#define	IPSTATE_SIZE	5737
#define	IPSTATE_MAX	4013	/* Maximum number of states held */
@


1.15
log
@Import ipf 3.3.18. Fixes more problems with the in-kernel FTP proxy,
some nat state bugs, and ups the default state table size.
See sbin/ipf/HISTORY for details.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.14 2000/04/13 17:13:42 kjell Exp $	*/
d4 1
a4 1
 * Copyright (C) 1995-1998 by Darren Reed.
d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.1.2.5 2000/07/08 02:15:56 darrenr Exp $
d16 4
a19 2
#ifndef 	IPSTATE_SIZE
# define	IPSTATE_SIZE	5737
d22 2
a23 3
#ifndef		IPSTATE_MAX
# define	IPSTATE_MAX	4013	/* Maximum number of states held */
#endif
d57 3
d64 1
a64 2
	void	*is_ifpin;
	void	*is_ifpout;
d66 2
a67 2
	struct	in_addr	is_src;
	struct	in_addr	is_dst;
d69 2
d84 3
d89 9
a97 7
#define	is_icmp	is_ps.is_ics
#define	is_type	is_icmp.ics_type
#define	is_code	is_icmp.ics_code
#define	is_tcp	is_ps.is_ts
#define	is_udp	is_ps.is_us
#define is_send	is_tcp.ts_data[0].td_end
#define is_dend	is_tcp.ts_data[1].td_end
d105 2
d118 8
d130 2
a131 5
	struct	in_addr	isl_src;
	struct	in_addr	isl_dst;
	u_char	isl_p;
	u_char	isl_flags;
	u_char	isl_state[2];
d138 4
d151 1
d169 1
d178 1
d181 1
d188 1
a188 1
extern	void	fr_tcp_age __P((u_long *, u_char *, ip_t *, fr_info_t *, int));
@


1.14
log
@#ifndef the definitions of IPSTATE_MAX and IPSTATE_SIZE
This allows the redefinition of these constants in mk.conf,
for example. mep@@netset.net
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.13 2000/03/13 23:40:18 kjell Exp $	*/
d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.1.2.4 2000/02/23 15:23:27 darrenr Exp $
d17 1
a17 1
# define	IPSTATE_SIZE	257
d21 1
a21 1
# define	IPSTATE_MAX	2048	/* Maximum number of states held */
@


1.13
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 7
a22 2
#define	IPSTATE_SIZE	257
#define	IPSTATE_MAX	2048	/* Maximum number of states held */
@


1.12
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.1.2.3 2000/02/15 08:04:03 darrenr Exp $
a60 1
	u_char	is_rout;		/* Is rule in/out ? */
@


1.11
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.1.2.2 2000/01/24 13:13:52 darrenr Exp $
d74 1
@


1.11.2.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.12 2000/02/16 22:34:20 kjell Exp $	*/
d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.1.2.3 2000/02/15 08:04:03 darrenr Exp $
a73 1
	char	is_ifname[2][IFNAMSIZ];
@


1.11.2.2
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.1.2.4 2000/02/23 15:23:27 darrenr Exp $
d61 1
@


1.11.2.3
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.18 2001/02/06 17:29:31 fgsch Exp $	*/
d4 1
a4 1
 * Copyright (C) 1995-2000 by Darren Reed.
d11 1
a11 1
 * $IPFilter: ip_state.h,v 2.13.2.2 2000/08/23 11:01:31 darrenr Exp $
d16 2
a17 13
#if defined(__STDC__) || defined(__GNUC__)
# define	SIOCDELST	_IOW('r', 61, struct ipstate *)
#else
# define	SIOCDELST	_IOW(r, 61, struct ipstate *)
#endif

#ifndef		IPSTATE_SIZE
# define	IPSTATE_SIZE	5737
#endif

#ifndef		IPSTATE_MAX
# define	IPSTATE_MAX	4013	/* Maximum number of states held */
#endif
a50 3
	struct	ipstate	**is_pnext;
	struct	ipstate	*is_hnext;
	struct	ipstate	**is_phnext;
d55 2
a56 1
	void	*is_ifp[2];
d58 2
a59 2
	union	i6addr	is_src;
	union	i6addr	is_dst;
a60 2
	u_char	is_v;
	u_int	is_hv;
a73 3
#if SOLARIS || defined(__sgi)
	kmutex_t	is_lock;
#endif
d76 7
a82 9
#define	is_saddr	is_src.in4.s_addr
#define	is_daddr	is_dst.in4.s_addr
#define	is_icmp		is_ps.is_ics
#define	is_type		is_icmp.ics_type
#define	is_code		is_icmp.ics_code
#define	is_tcp		is_ps.is_ts
#define	is_udp		is_ps.is_us
#define is_send		is_tcp.ts_data[0].td_end
#define is_dend		is_tcp.ts_data[1].td_end
a89 2
#define	is_ifpin	is_ifp[0]
#define	is_ifpout	is_ifp[1]
a100 8
typedef	struct	ipstate_save	{
	void	*ips_next;
	struct	ipstate	ips_is;
	struct	frentry	ips_fr;
} ipstate_save_t;

#define	ips_rule	ips_is.is_rule

d105 5
a109 2
	union	i6addr	isl_src;
	union	i6addr	isl_dst;
a115 4
	u_char	isl_v;
	u_char	isl_p;
	u_char	isl_flags;
	u_char	isl_state[2];
a124 1
#define	ISL_REMOVE	0xfffd
a141 1
	ipstate_t *iss_list;
a149 1
extern	u_long	fr_tcphalfclosed;
a151 1
extern	int	fr_state_lock;
d158 1
a158 1
extern	void	fr_tcp_age __P((u_long *, u_char *, fr_info_t *, int));
@


1.11.2.4
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_state.h,v 1.11.2.3 2001/05/14 22:40:13 niklas Exp $	*/
@


1.10
log
@Import of Darren Reed's IPFilter 3.3.4, including OpenBSD patches.

Many, many enhancements and improvements, including new in-kernel
proxies, enhancements to logging, and many bugfixes.

Note: Man pages have not yet been re-converted to mdoc.
@
text
@d1 2
a2 1
/* $OpenBSD$ */
d11 1
a11 1
 * $Id: ip_state.h,v 2.1 1999/08/04 17:30:00 darrenr Exp $
d156 1
@


1.9
log
@ipf 3.2.10; work by kjell
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_state.h,v 1.8 1998/09/15 09:51:19 pattonme Exp $       */
d10 1
a10 1
 * $Id: ip_state.h,v 1.8 1998/09/15 09:51:19 pattonme Exp $
d35 6
d44 1
a44 4
	u_long	ts_seq;
	u_long	ts_ack;
	u_short	ts_swin;
	u_short	ts_dwin;
d56 1
d59 9
a67 8
	u_char	is_p;
	u_char	is_flags;
	u_32_t	is_opt;
	u_32_t	is_optmsk;
	u_short	is_sec;
	u_short	is_secmsk;
	u_short	is_auth;
	u_short	is_authmsk;
d76 2
d80 6
a85 4
#define	is_seq	is_tcp.ts_seq
#define	is_ack	is_tcp.ts_ack
#define	is_dwin	is_tcp.ts_dwin
#define	is_swin	is_tcp.ts_swin
d91 8
d108 1
a108 1
	u_char	isl_state[2]; 
d139 1
d151 1
d153 2
a154 2
extern	int	fr_addstate __P((ip_t *, fr_info_t *, u_int));
extern	int	fr_checkstate __P((ip_t *, fr_info_t *));
d158 1
a158 1
extern	void	ipstate_log __P((struct ipstate *, u_short));
@


1.8
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
/*       $OpenBSD: ip_state.h,v 1.7 1998/02/17 01:39:08 dgregor Exp $       */
d3 1
a3 1
 * Copyright (C) 1995-1997 by Darren Reed.
d10 1
a10 1
 * $Id$
d91 1
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*       $OpenBSD$       */
d10 1
a10 1
 * $Id: ip_state.h,v 1.6 1998/01/26 04:10:46 dgregor Exp $
d51 2
d57 6
d132 1
a132 3
extern	int	fr_tcpstate __P((ipstate_t *, fr_info_t *, ip_t *,
			    tcphdr_t *, u_short));
extern	ips_stat_t	*fr_statetstats __P((void));
a136 1
extern	int	fr_state_flush __P((int));
d144 1
@


1.6
log
@IPF 3.2.3
@
text
@d1 1
d10 1
a10 1
 * $Id: ip_state.h,v 2.0.2.14.2.1 1997/11/06 21:23:15 darrenr Exp $
@


1.5
log
@merge in 3.1.11
@
text
@a0 1
/*	$OpenBSD: ip_state.h,v 1.4 1997/02/11 22:23:30 kstailey Exp $	*/
d2 1
a2 1
 * (C)opyright 1995 by Darren Reed.
d9 1
a9 1
 * $DRId: ip_state.h,v 2.0.1.2 1997/03/20 10:20:53 darrenr Exp $
d17 6
d48 2
d74 25
d110 2
d115 23
a137 8
extern ips_stat_t *fr_statetstats __P((void));
extern int fr_addstate __P((ip_t *, fr_info_t *, u_int));
extern int fr_checkstate __P((ip_t *, fr_info_t *));
extern void fr_timeoutstate __P((void));
extern void set_tcp_age __P((long *, u_char *, ip_t *, fr_info_t *, int));
# ifdef	_KERNEL
extern void fr_stateunload __P((void));
# endif
@


1.4
log
@IPF 1.3.7
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d10 1
a10 1
 * Id: ip_state.h,v 2.0.1.1 1997/01/09 15:14:43 darrenr Exp
d41 1
a41 1
	int	is_age;
d85 1
a85 1
extern void set_tcp_age __P((int *, u_char *, ip_t *, fr_info_t *, int));
@


1.3
log
@Prototype & Stylistic fixes for high -W gcc levels
@
text
@d1 1
d10 1
a10 1
 * $OpenBSD: ip_state.h,v 1.2 1996/07/18 05:01:09 dm Exp $
d34 3
a36 1
	u_short	ts_win;
d46 1
d59 2
a60 1
#define	is_win	is_tcp.ts_win
d63 1
d65 1
d82 4
a85 3
extern int	fr_addstate __P((ip_t *, fr_info_t *, u_int));
extern int	fr_checkstate __P((ip_t *, fr_info_t *));
extern void	fr_timeoutstate __P((void));
d87 1
a87 1
extern void	fr_stateunload __P((void));
@


1.2
log
@ipfilter 3.1.0
@
text
@d9 1
a9 1
 * $Id: ip_state.h,v 1.2 1996/07/04 13:15:43 darrenr Exp $
d74 4
a77 3
extern ips_stat_t *fr_statetstats();
extern int fr_addstate(), fr_checkstate();
extern void fr_timeoutstate();
d79 1
a79 1
extern void fr_stateunload();
@


1.1
log
@IP filter 3.0.1
@
text
@d9 1
a58 5
#if defined(__STDC__) || defined(__GNUC__)
#define	SIOCGIPST	_IOR('r', 75, struct ips_stat)
#else
#define	SIOCGIPST	_IOR(r, 75, struct ips_stat)
#endif
@
