head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	UBC_SYNC_A:1.11
	UBC_SYNC_B:1.11
	SMP:1.11.0.2
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.11
date	97.07.11.23.49.17;	author provos;	state dead;
branches;
next	1.10;

1.10
date	97.07.01.22.12.44;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	97.06.25.07.53.23;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.06.24.20.57.25;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.06.24.20.48.41;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.06.24.12.15.21;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.06.20.05.41.48;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.03.30.22.05.13;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.02.26.03.01.04;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	97.02.24.14.06.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.02.20.01.07.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@obsolete.
@
text
@/*	$OpenBSD: ip_ahmd5.c,v 1.10 1997/07/01 22:12:44 provos Exp $	*/

/*
 * The author of this code is John Ioannidis, ji@@tla.org,
 * 	(except when noted otherwise).
 *
 * This code was written for BSD/OS in Athens, Greece, in November 1995.
 *
 * Ported to OpenBSD and NetBSD, with additional transforms, in December 1996,
 * by Angelos D. Keromytis, kermit@@forthnet.gr.
 *
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis and Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, NEITHER AUTHOR MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

/*
 * Authentication Header Processing
 * Per RFC1828 (Metzger & Simpson, 1995)
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <machine/cpu.h>

#include <net/if.h>
#include <net/route.h>
#include <net/netisr.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/in_pcb.h>
#include <netinet/in_var.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>

#include <sys/socketvar.h>
#include <net/raw_cb.h>
#include <net/encap.h>

#include <netinet/ip_ipsp.h>
#include <netinet/ip_ah.h>

/*
 * ahmd5_attach() is called from the transformation initialization code.
 * It just returns.
 */

int
ahmd5_attach()
{
    return 0;
}

/*
 * ahmd5_init() is called when an SPI is being set up. It interprets the
 * encap_msghdr present in m, and sets up the transformation data.
 */

int
ahmd5_init(struct tdb *tdbp, struct xformsw *xsp, struct mbuf *m)
{
    struct ahmd5_xdata *xd;
    struct encap_msghdr *em;
	
    tdbp->tdb_xform = xsp;

    MALLOC(tdbp->tdb_xdata, caddr_t, sizeof (struct ahmd5_xdata),
	   M_XDATA, M_WAITOK);
    if (tdbp->tdb_xdata == NULL)
      return ENOBUFS;
    bzero(tdbp->tdb_xdata, sizeof (struct ahmd5_xdata));
    xd = (struct ahmd5_xdata *)tdbp->tdb_xdata;

    em = mtod(m, struct encap_msghdr *);
    if (em->em_msglen - EMT_SETSPI_FLEN > sizeof (struct ahmd5_xdata))
    {
	free((caddr_t)tdbp->tdb_xdata, M_XDATA);
	tdbp->tdb_xdata = NULL;
	return EINVAL;
    }
    m_copydata(m, EMT_SETSPI_FLEN, em->em_msglen - EMT_SETSPI_FLEN,
	       (caddr_t)xd);

    bzero(ipseczeroes, IPSEC_ZEROES_SIZE);	/* paranoid */
    return 0;
}

/*
 * Free memory
 */

int
ahmd5_zeroize(struct tdb *tdbp)
{
    FREE(tdbp->tdb_xdata, M_XDATA);
    return 0;
}

/*
 * ahmd5_input() gets called to verify that an input packet
 * passes authentication.
 */

extern struct ifnet loif;

struct mbuf *
ahmd5_input(struct mbuf *m, struct tdb *tdb)
{
    struct ahmd5_xdata *xd;
    struct ip *ip, ipo;
    struct ah *ah;
    struct ahmd5 aho;
    struct ifnet *rcvif;
    int ohlen, len, count, off;
    struct mbuf *m0;
    MD5_CTX ctx; 
    u_int8_t optval;
	
    xd = (struct ahmd5_xdata *)tdb->tdb_xdata;
    ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;

    rcvif = m->m_pkthdr.rcvif;
    if (rcvif == NULL)
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("ahmd5_input: receive interface is NULL!!!\n");
#endif
	rcvif = &loif;
    }
	
    if (m->m_len < ohlen)
    {
	if ((m = m_pullup(m, ohlen)) == NULL)
	{
	    ahstat.ahs_hdrops++;
	    return NULL;
	}
    }

    ip = mtod(m, struct ip *);

    if ((ip->ip_hl << 2) > sizeof(struct ip))
    {
	if ((m = m_pullup(m, ohlen - sizeof (struct ip) +
			  (ip->ip_hl << 2))) == NULL)
	{
	    ahstat.ahs_hdrops++;
	    return NULL;
	}
	
	ip = mtod(m, struct ip *);
	ah = (struct ah *)((u_int8_t *)ip + (ip->ip_hl << 2));
    }
    else
      ah = (struct ah *)(ip + 1);

    ipo = *ip;
    ipo.ip_tos = 0;
    ipo.ip_len += sizeof (struct ip);	/* adjusted in ip_intr() */
    HTONS(ipo.ip_len);
    HTONS(ipo.ip_id);
    ipo.ip_off = htons(ipo.ip_off & IP_DF);	/* XXX -- and the C bit? */
    ipo.ip_ttl = 0;
    ipo.ip_sum = 0;

    MD5Init(&ctx);
    MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
    MD5Final(NULL, &ctx);		/* non-std usage of MD5Final! */
    MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));

    /* Options */
    if ((ip->ip_hl << 2 > sizeof(struct ip)))
      for (off = sizeof(struct ip); off < (ip->ip_hl << 2);)
      {
	  optval = ((u_int8_t *)ip)[off];
	  switch (optval)
	  {
	      case IPOPT_EOL:
		  MD5Update(&ctx, ipseczeroes, 1);
		  off = ip->ip_hl << 2;
		  break;

	      case IPOPT_NOP:
		  MD5Update(&ctx, ipseczeroes, 1);
		  off++;
		  break;

	      case IPOPT_SECURITY:
	      case 133:
	      case 134:
		  optval = ((u_int8_t *)ip)[off + 1];
		  MD5Update(&ctx, (u_int8_t *)ip + off, optval);
		  off += optval;
		  break;

	      default:
		  optval = ((u_int8_t *)ip)[off + 1];
		  MD5Update(&ctx, ipseczeroes, optval);
		  off += optval;
		  break;
	  }
      }
    
    
    MD5Update(&ctx, (unsigned char *)ah, AH_FLENGTH);
    MD5Update(&ctx, ipseczeroes, xd->amx_alen);

    /*
     * Code shamelessly stolen from m_copydata
     */
    off = ohlen;
    len = m->m_pkthdr.len - off;
    m0 = m;
	
    while (off > 0)
    {
	if (m0 == 0)
	  panic("ahmd5_input: m_copydata (off)");
	if (off < m0->m_len)
	  break;
	off -= m0->m_len;
	m0 = m0->m_next;
    }

    while (len > 0)
    {
	if (m0 == 0)
	  panic("ahmd5_input: m_copydata (copy)");
	count = min(m0->m_len - off, len);
	MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);
	len -= count;
	off = 0;
	m0 = m0->m_next;
    }


    MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
    MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
	
    if (bcmp(aho.ah_data, ah->ah_data, xd->amx_alen))
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("ahmd5_input: bad auth\n"); /* XXX */
#endif
	ahstat.ahs_badauth++;
	m_freem(m);
	return NULL;
    }
	
    ipo = *ip;
    ipo.ip_p = ah->ah_nh;

    m->m_len -= (ohlen - sizeof(struct ip));
    m->m_data += (ohlen - sizeof(struct ip));
    m->m_pkthdr.len -= (ohlen - sizeof(struct ip));
    m->m_pkthdr.rcvif = rcvif;	/* this should not be necessary */

    ip = mtod(m, struct ip *);
    *ip = ipo;
    ip->ip_len = htons(ip->ip_len - ohlen + 2 * sizeof (struct ip));
    HTONS(ip->ip_id);
    HTONS(ip->ip_off);
    ip->ip_sum = 0;
    ip->ip_sum = in_cksum(m, sizeof (struct ip));

    /* Update the counters */
    tdb->tdb_cur_packets++;
    tdb->tdb_cur_bytes += ntohs(ip->ip_len) - (ip->ip_hl << 2);

    return m;
}


#define AHXPORT 

int
ahmd5_output(struct mbuf *m, struct sockaddr_encap *gw, struct tdb *tdb,
  	     struct mbuf **mp)
{
    struct ahmd5_xdata *xd;
    struct ip *ip, ipo;
    struct ah *ah, aho;
    register int len, off, count;
    register struct mbuf *m0;
	
    MD5_CTX ctx;
	
    int ilen, ohlen;
	
    ahstat.ahs_output++;
    m = m_pullup(m, sizeof (struct ip));
    if (m == NULL)
      return ENOBUFS;
	
    ip = mtod(m, struct ip *);
	
    xd = (struct ahmd5_xdata *)tdb->tdb_xdata;

    ilen = ntohs(ip->ip_len);

#ifdef AHXPORT
    ohlen = AH_FLENGTH + xd->amx_alen;
#else
    ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;
#endif
	
    ipo.ip_v = IPVERSION;
    ipo.ip_hl = 5;
    ipo.ip_tos = 0;
    ipo.ip_len = htons(ohlen + ilen);
    ipo.ip_id = ip->ip_id;
    ipo.ip_off = htons(ntohs(ip->ip_off) & IP_DF);
    ipo.ip_ttl = 0;
    ipo.ip_p = IPPROTO_AH;
    ipo.ip_sum = 0;
#ifdef AHXPORT
    ipo.ip_src = ip->ip_src;
    ipo.ip_dst = ip->ip_dst;
    aho.ah_nh = ip->ip_p;
#else
    ipo.ip_src = gw->sen_ipsp_src;
    ipo.ip_dst = gw->sen_ipsp_dst;
    aho.ah_nh = IPPROTO_IP4;
#endif
    aho.ah_hl = xd->amx_alen >> 2;
    aho.ah_rv = 0;
    aho.ah_spi = tdb->tdb_spi;

    MD5Init(&ctx);

    MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
    MD5Final(NULL, &ctx);
    MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
    MD5Update(&ctx, (unsigned char *)&aho, AH_FLENGTH);
    MD5Update(&ctx, ipseczeroes, xd->amx_alen);

#ifdef AHXPORT
    off = sizeof (struct ip);
#else	
    off = 0;
#endif

    /*
     * Code shamelessly stolen from m_copydata
     */
    len = m->m_pkthdr.len - off;
	
    m0 = m;

    while (len > 0)
    {
	if (m0 == 0)
	  panic("ahmd5_output: m_copydata");
	count = min(m0->m_len - off, len);
	MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);
	len -= count;
	off = 0;
	m0 = m0->m_next;
    }

    MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);

    ipo.ip_tos = ip->ip_tos;
    ipo.ip_id = ip->ip_id;
    ipo.ip_off = ip->ip_off;
    ipo.ip_ttl = ip->ip_ttl;
/*	ipo.ip_len = ntohs(ipo.ip_len); */
	
    M_PREPEND(m, ohlen, M_DONTWAIT);
    if (m == NULL)
      return ENOBUFS;

    m = m_pullup(m, ohlen + sizeof (struct ip));
    if (m == NULL)
      return ENOBUFS;
	
    ip = mtod(m, struct ip *);
    ah = (struct ah *)(ip + 1);
    *ip = ipo;
    ah->ah_nh = aho.ah_nh;
    ah->ah_hl = aho.ah_hl;
    ah->ah_rv = aho.ah_rv;
    ah->ah_spi = aho.ah_spi;


    MD5Final(&(ah->ah_data[0]), &ctx);

    *mp = m;

    /* Update the counters */
    tdb->tdb_cur_packets++;
    tdb->tdb_cur_bytes += ip->ip_len - (ip->ip_hl << 2) - AH_FLENGTH -
		          xd->amx_alen;

    return 0;
}
@


1.10
log
@major restructuring
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.9 1997/06/25 07:53:23 provos Exp $	*/
@


1.9
log
@hard and soft limits for SPI's per absolute timer, relative since establish,
relative since first use timers, packet and byte counters. notify key mgmt
on soft limits. key mgmt can now specify limits. new encap messages:
EMT_RESERVESPI, EMT_ENABLESPI, EMT_DISABLESPI
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.8 1997/06/24 20:57:25 provos Exp $	*/
d102 1
d298 2
a299 1
ahmd5_output(struct mbuf *m, struct sockaddr_encap *gw, struct tdb *tdb, struct mbuf **mp)
@


1.8
log
@use ntohs instead of NTOHS for counters
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.7 1997/06/24 20:48:41 provos Exp $	*/
d198 4
d205 2
a206 2
		  continue;
		  
d213 2
a214 2
		  continue;
		  
d219 1
a219 1
		  continue;
d287 2
a288 2
    tdb->tdb_packets++;
    tdb->tdb_bytes += ntohs(ip->ip_len) - (ip->ip_hl << 2);
d410 3
a412 3
    tdb->tdb_packets++;
    tdb->tdb_bytes += ip->ip_len - (ip->ip_hl << 2) - AH_FLENGTH -
		      xd->amx_alen;
@


1.7
log
@correct AH options hashing.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.5 1997/06/20 05:41:48 provos Exp $	*/
d284 1
a284 1
    tdb->tdb_bytes += NTOHS(ip->ip_len) - (ip->ip_hl << 2);
@


1.6
log
@handle IP options in AH + allow IP options in outgoing encapsulated packets
+ usage counters for later use with keymanagement processes
@
text
@a194 1
	  MD5Update(&ctx, &optval, 1);
d199 1
d207 1
a207 1
		  MD5Update(&ctx, (u_int8_t *)ip + off + 1, optval - 1);
d212 2
a213 2
		  MD5Update(&ctx, &optval, 1);
		  MD5Update(&ctx, ipseczeroes, optval - 2);
@


1.5
log
@ah-sha1 + esp-3des + indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.4 1997/03/30 22:05:13 mickey Exp $	*/
d135 1
d160 15
a174 1
    ah = (struct ah *)(ip + 1);
d189 31
d282 4
d404 6
a409 1
	
@


1.4
log
@no more 2(two) md5 libs in kernel!
tested for rnd(4).... should work for ip too, since it's
the copy of ip_md*.
use sys/md5k.h for protos.... std iface forever!
hurray!
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.3 1997/02/26 03:01:04 angelos Exp $	*/
d70 1
a70 1
	return 0;
d81 2
a82 2
	struct ahmd5_xdata *xd;
	struct encap_msghdr *em;
d84 1
a84 1
	tdbp->tdb_xform = xsp;
d86 18
a103 17
	MALLOC(tdbp->tdb_xdata, caddr_t, sizeof (struct ahmd5_xdata),
	       M_XDATA, M_WAITOK);
	if (tdbp->tdb_xdata == NULL)
	  return ENOBUFS;
	bzero(tdbp->tdb_xdata, sizeof (struct ahmd5_xdata));
	xd = (struct ahmd5_xdata *)tdbp->tdb_xdata;

	em = mtod(m, struct encap_msghdr *);
	if (em->em_msglen - EMT_SETSPI_FLEN > sizeof (struct ahmd5_xdata))
	{
		free((caddr_t)tdbp->tdb_xdata, M_XDATA);
		tdbp->tdb_xdata = NULL;
		return EINVAL;
	}
	m_copydata(m, EMT_SETSPI_FLEN, em->em_msglen - EMT_SETSPI_FLEN, (caddr_t)xd);
	bzero(ipseczeroes, IPSEC_ZEROES_SIZE);	/* paranoid */
	return 0;
d113 2
a114 2
	FREE(tdbp->tdb_xdata, M_XDATA);
	return 0;
d127 15
a141 15
	struct ahmd5_xdata *xd;
	struct ip *ip, ipo;
	struct ah *ah;
	struct ahmd5 aho;
	struct ifnet *rcvif;
	int ohlen, len, count, off;
	struct mbuf *m0;
	MD5_CTX ctx; 
	
	xd = (struct ahmd5_xdata *)tdb->tdb_xdata;
	ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;

	rcvif = m->m_pkthdr.rcvif;
	if (rcvif == NULL)
	{
d143 2
a144 2
		if (encdebug)
		  printf("ahmd5_input: receive interface is NULL!!!\n");
d146 2
a147 2
		rcvif = &loif;
	}
d149 3
a151 1
	if (m->m_len < ohlen)
d153 2
a154 5
		if ((m = m_pullup(m, ohlen)) == NULL)
		{
			ahstat.ahs_hdrops++;
			return NULL;
		}
d156 1
d158 2
a159 2
	ip = mtod(m, struct ip *);
	ah = (struct ah *)(ip + 1);
d161 43
a203 43
	ipo = *ip;
	ipo.ip_tos = 0;
	ipo.ip_len += sizeof (struct ip);	/* adjusted in ip_intr() */
	HTONS(ipo.ip_len);
	HTONS(ipo.ip_id);
	ipo.ip_off = htons(ipo.ip_off & IP_DF);	/* XXX -- and the C bit? */
	ipo.ip_ttl = 0;
	ipo.ip_sum = 0;

	MD5Init(&ctx);
	MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
	MD5Final(NULL, &ctx);		/* non-std usage of MD5Final! */
	MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
	MD5Update(&ctx, (unsigned char *)ah, AH_FLENGTH);
	MD5Update(&ctx, ipseczeroes, xd->amx_alen);

	/*
	 * Code shamelessly stolen from m_copydata
	 */
	off = ohlen;
	len = m->m_pkthdr.len - off;
	m0 = m;
	
	while (off > 0)
	{
		if (m0 == 0)
		  panic("ahmd5_input: m_copydata (off)");
		if (off < m0->m_len)
		  break;
		off -= m0->m_len;
		m0 = m0->m_next;
	}

	while (len > 0)
	{
		if (m0 == 0)
		  panic("ahmd5_input: m_copydata (copy)");
		count = min(m0->m_len - off, len);
		MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);
		len -= count;
		off = 0;
		m0 = m0->m_next;
	}
d206 2
a207 2
	MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
	MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
d209 2
a210 2
	if (bcmp(aho.ah_data, ah->ah_data, xd->amx_alen))
	{
d212 2
a213 2
		if (encdebug)
		  printf("ahmd5_input: bad auth\n"); /* XXX */
d215 20
a234 20
		ahstat.ahs_badauth++;
		m_freem(m);
		return NULL;
	}
	
	ipo = *ip;
	ipo.ip_p = ah->ah_nh;

	m->m_len -= (ohlen - sizeof(struct ip));
	m->m_data += (ohlen - sizeof(struct ip));
	m->m_pkthdr.len -= (ohlen - sizeof(struct ip));
	m->m_pkthdr.rcvif = rcvif;	/* this should not be necessary */

	ip = mtod(m, struct ip *);
	*ip = ipo;
	ip->ip_len = htons(ip->ip_len - ohlen + 2 * sizeof (struct ip));
	HTONS(ip->ip_id);
	HTONS(ip->ip_off);
	ip->ip_sum = 0;
	ip->ip_sum = in_cksum(m, sizeof (struct ip));
d236 1
a236 1
	return m;
d245 5
a249 5
	struct ahmd5_xdata *xd;
	struct ip *ip, ipo;
	struct ah *ah, aho;
	register int len, off, count;
	register struct mbuf *m0;
d251 1
a251 1
	MD5_CTX ctx;
d253 1
a253 1
	int ilen, ohlen;
d255 4
a258 4
	ahstat.ahs_output++;
	m = m_pullup(m, sizeof (struct ip));
	if (m == NULL)
	  return ENOBUFS;
d260 1
a260 1
	ip = mtod(m, struct ip *);
d262 1
a262 1
	xd = (struct ahmd5_xdata *)tdb->tdb_xdata;
d264 1
a264 1
	ilen = ntohs(ip->ip_len);
d267 1
a267 1
	ohlen = AH_FLENGTH + xd->amx_alen;
d269 1
a269 1
	ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;
d272 9
a280 9
	ipo.ip_v = IPVERSION;
	ipo.ip_hl = 5;
	ipo.ip_tos = 0;
	ipo.ip_len = htons(ohlen + ilen);
	ipo.ip_id = ip->ip_id;
	ipo.ip_off = htons(ntohs(ip->ip_off) & IP_DF);
	ipo.ip_ttl = 0;
	ipo.ip_p = IPPROTO_AH;
	ipo.ip_sum = 0;
d282 3
a284 3
	ipo.ip_src = ip->ip_src;
	ipo.ip_dst = ip->ip_dst;
	aho.ah_nh = ip->ip_p;
d286 3
a288 3
	ipo.ip_src = gw->sen_ipsp_src;
	ipo.ip_dst = gw->sen_ipsp_dst;
	aho.ah_nh = IPPROTO_IP4;
d290 11
a300 11
	aho.ah_hl = xd->amx_alen >> 2;
	aho.ah_rv = 0;
	aho.ah_spi = tdb->tdb_spi;

	MD5Init(&ctx);

	MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
	MD5Final(NULL, &ctx);
	MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
	MD5Update(&ctx, (unsigned char *)&aho, AH_FLENGTH);
	MD5Update(&ctx, ipseczeroes, xd->amx_alen);
d303 1
a303 1
	off = sizeof (struct ip);
d305 1
a305 1
	off = 0;
d308 17
a324 17
	/*
	 * Code shamelessly stolen from m_copydata
	 */
	len = m->m_pkthdr.len - off;
	
	m0 = m;

	while (len > 0)
	{
		if (m0 == 0)
		  panic("ahmd5_output: m_copydata");
		count = min(m0->m_len - off, len);
		MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);
		len -= count;
		off = 0;
		m0 = m0->m_next;
	}
d326 1
a326 1
	MD5Update(&ctx, (unsigned char *)xd->amx_key, xd->amx_klen);
d328 4
a331 4
	ipo.ip_tos = ip->ip_tos;
	ipo.ip_id = ip->ip_id;
	ipo.ip_off = ip->ip_off;
	ipo.ip_ttl = ip->ip_ttl;
d334 3
a336 3
	M_PREPEND(m, ohlen, M_DONTWAIT);
	if (m == NULL)
	  return ENOBUFS;
d338 3
a340 3
	m = m_pullup(m, ohlen + sizeof (struct ip));
	if (m == NULL)
	  return ENOBUFS;
d342 7
a348 7
	ip = mtod(m, struct ip *);
	ah = (struct ah *)(ip + 1);
	*ip = ipo;
	ah->ah_nh = aho.ah_nh;
	ah->ah_hl = aho.ah_hl;
	ah->ah_rv = aho.ah_rv;
	ah->ah_spi = aho.ah_spi;
d351 1
a351 1
	MD5Final(&(ah->ah_data[0]), &ctx);
d353 1
a353 1
	*mp = m;
d355 1
a355 1
	return 0;
@


1.3
log
@I/O packet counters for IP-in-IP and AH.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahmd5.c,v 1.2 1997/02/24 14:06:38 niklas Exp $	*/
d169 1
a169 1
	realMD5Init(&ctx);
d293 1
a293 1
	realMD5Init(&ctx);
@


1.2
log
@OpenBSD tags + some prototyping police
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d254 1
a254 1
	
@


1.1
log
@IPSEC package by John Ioannidis and Angelos D. Keromytis. Written in
Greece. From ftp.funet.fi:/pub/unix/security/net/ip/BSDipsec.tar.gz
@
text
@d1 2
@
