head	1.14;
access;
symbols
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	UBC_SYNC_A:1.14
	UBC_SYNC_B:1.14
	SMP:1.14.0.2
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7;
locks; strict;
comment	@ * @;


1.14
date	97.07.11.23.49.16;	author provos;	state dead;
branches;
next	1.13;

1.13
date	97.07.01.22.12.42;	author provos;	state Exp;
branches;
next	1.12;

1.12
date	97.06.25.07.53.22;	author provos;	state Exp;
branches;
next	1.11;

1.11
date	97.06.24.20.57.24;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	97.06.24.20.48.40;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	97.06.24.12.15.20;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.06.20.05.41.47;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.03.30.22.05.12;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.03.09.07.03.20;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	97.02.26.03.01.03;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	97.02.24.14.06.37;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.02.22.11.34.47;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	97.02.21.08.42.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.02.20.01.07.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@obsolete.
@
text
@/*	$OpenBSD: ip_ahhmacmd5.c,v 1.13 1997/07/01 22:12:42 provos Exp $	*/

/*
 * The author of this code is John Ioannidis, ji@@tla.org,
 * 	(except when noted otherwise).
 *
 * This code was written for BSD/OS in Athens, Greece, in November 1995.
 *
 * Ported to OpenBSD and NetBSD, with additional transforms, in December 1996,
 * by Angelos D. Keromytis, kermit@@forthnet.gr.
 *
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis and Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, NEITHER AUTHOR MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

/*
 * Based on RFC 2085.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/socketvar.h>

#include <machine/cpu.h>
#include <machine/endian.h>

#include <net/if.h>
#include <net/route.h>
#include <net/netisr.h>
#include <net/raw_cb.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/in_pcb.h>
#include <netinet/in_var.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>

#include <net/encap.h>

#include <netinet/ip_ipsp.h>
#include <netinet/ip_ah.h>

/*
 * ahhmacmd5_attach() is called from the transformation initialization code.
 * It just returns.
 */

int
ahhmacmd5_attach()
{
    return 0;
}

/*
 * ahhmacmd5_init() is called when an SPI is being set up. It interprets the
 * encap_msghdr present in m, and sets up the transformation data.
 */

int
ahhmacmd5_init(struct tdb *tdbp, struct xformsw *xsp, struct mbuf *m)
{
    struct ahhmacmd5_xdata *xd;
    struct ahhmacmd5_xencap txd;
    struct encap_msghdr *em;
    int len;
	
    tdbp->tdb_xform = xsp;

    MALLOC(tdbp->tdb_xdata, caddr_t, sizeof (struct ahhmacmd5_xdata),
	   M_XDATA, M_WAITOK);
    if (tdbp->tdb_xdata == NULL)
      return ENOBUFS;
    bzero(tdbp->tdb_xdata, sizeof (struct ahhmacmd5_xdata));
    bzero(&txd, sizeof(struct ahhmacmd5_xencap));
    xd = (struct ahhmacmd5_xdata *)tdbp->tdb_xdata;

    em = mtod(m, struct encap_msghdr *);
    if (em->em_msglen - EMT_SETSPI_FLEN > sizeof (struct ahhmacmd5_xencap))
    {
	free((caddr_t)tdbp->tdb_xdata, M_XDATA);
	tdbp->tdb_xdata = NULL;
	return EINVAL;
    }
	
    m_copydata(m, EMT_SETSPI_FLEN, em->em_msglen - EMT_SETSPI_FLEN, 
	       (caddr_t)&txd);

    xd->amx_rpl = 1;
    xd->amx_alen = txd.amx_alen;
    xd->amx_bitmap = 0;
    xd->amx_wnd = txd.amx_wnd;
	
    MD5Init(&(xd->amx_ictx));
    MD5Init(&(xd->amx_octx));
	
    for (len = 0; len < AHHMACMD5_KMAX; len++)
      txd.amx_key[len] ^= HMACMD5_IPAD_VAL;

    MD5Update(&(xd->amx_ictx), txd.amx_key, AHHMACMD5_KMAX);

    for (len = 0; len < AHHMACMD5_KMAX; len++)
      txd.amx_key[len] ^= (HMACMD5_IPAD_VAL ^ HMACMD5_OPAD_VAL);

    MD5Update(&(xd->amx_octx), txd.amx_key, AHHMACMD5_KMAX);
    bzero(&txd, sizeof(struct ahhmacmd5_xencap));
    bzero(ipseczeroes, IPSEC_ZEROES_SIZE);	/* paranoid */

    return 0;
}

/*
 * Free memory
 */

int
ahhmacmd5_zeroize(struct tdb *tdbp)
{
    FREE(tdbp->tdb_xdata, M_XDATA);
    return 0;
}

/*
 * ahhmacmd5_input() gets called to verify that an input packet
 * passes authentication.
 */

extern struct ifnet loif;

struct mbuf *
ahhmacmd5_input(struct mbuf *m, struct tdb *tdb)
{
    struct ahhmacmd5_xdata *xd;
    struct ip *ip, ipo;
    struct ah *ah;
    struct ahhmacmd5 aho, *ahp;
    struct ifnet *rcvif;
    int ohlen, len, count, off, ado, errc;
    u_int64_t btsx;
    struct mbuf *m0;
    MD5_CTX ctx; 
    u_int8_t optval;
    
    xd = (struct ahhmacmd5_xdata *)tdb->tdb_xdata;
    ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;
    if (xd->amx_wnd >= 0)
      ohlen += HMACMD5_RPLENGTH;

    rcvif = m->m_pkthdr.rcvif;
    if (rcvif == NULL)
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("ahhmacmd5_input: receive interface is NULL!!!\n");
#endif
	rcvif = &loif;
    }
	
    if (m->m_len < ohlen)
    {
	if ((m = m_pullup(m, ohlen)) == NULL)
	{
	    ahstat.ahs_hdrops++;
	    return NULL;
	}
    }

    ip = mtod(m, struct ip *);

    if ((ip->ip_hl << 2) > sizeof(struct ip))
    {
	if ((m = m_pullup(m, ohlen - sizeof (struct ip) +
			  (ip->ip_hl << 2))) == NULL)
	{
	    ahstat.ahs_hdrops++;
	    return NULL;
	}
	
	ip = mtod(m, struct ip *);
	ah = (struct ah *)((u_int8_t *)ip + (ip->ip_hl << 2));
    }
    else
      ah = (struct ah *)(ip + 1);

    ahp = (struct ahhmacmd5 *)ah;

    if (xd->amx_wnd >= 0)
      ado = HMACMD5_RPLENGTH;
    else
      ado = 0;

    if (ah->ah_hl * sizeof(u_int32_t) != xd->amx_alen + ado)
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("ahhmacmd5_input: bad authenticator length\n");
#endif
	ahstat.ahs_badauthl++;
	m_freem(m);
	return NULL;
    }

    ipo = *ip;
    ipo.ip_tos = 0;
    ipo.ip_len += sizeof(struct ip);	/* adjusted in ip_intr() */
    HTONS(ipo.ip_len);
    HTONS(ipo.ip_id);
    ipo.ip_off = htons(ipo.ip_off & IP_DF);	/* XXX -- and the C bit? */
    ipo.ip_ttl = 0;
    ipo.ip_sum = 0;

    ctx = xd->amx_ictx;
    MD5Update(&ctx, (unsigned char *)&ipo, sizeof(struct ip));

    /* Options */
    if ((ip->ip_hl << 2 > sizeof(struct ip)))
      for (off = sizeof(struct ip); off < (ip->ip_hl << 2);)
      {
	  optval = ((u_int8_t *)ip)[off];
	  switch (optval)
	  {
	      case IPOPT_EOL:
		  MD5Update(&ctx, ipseczeroes, 1);
		  off = ip->ip_hl << 2;
		  break;

	      case IPOPT_NOP:
		  MD5Update(&ctx, ipseczeroes, 1);
		  off++;
		  break;

	      case IPOPT_SECURITY:
	      case 133:
	      case 134:
		  optval = ((u_int8_t *)ip)[off + 1];
		  MD5Update(&ctx, (u_int8_t *)ip + off, optval);
		  off += optval;
		  break;

	      default:
		  optval = ((u_int8_t *)ip)[off + 1];
		  MD5Update(&ctx, ipseczeroes, optval);
		  off += optval;
		  break;
	  }
      }

    if (xd->amx_wnd >= 0)
      MD5Update(&ctx, (unsigned char *)ahp, AH_FLENGTH + HMACMD5_RPLENGTH);
    else
      MD5Update(&ctx, (unsigned char *)ahp, AH_FLENGTH);
    MD5Update(&ctx, ipseczeroes, xd->amx_alen);

    /*
     * Code shamelessly stolen from m_copydata
     */
    off = ohlen;
    len = m->m_pkthdr.len - off;
    m0 = m;
	
    while (off > 0)
    {
	if (m0 == 0)
	  panic("ahhmacmd5_input: m_copydata (off)");
	if (off < m0->m_len)
	  break;
	off -= m0->m_len;
	m0 = m0->m_next;
    }

    while (len > 0)
    {
	if (m0 == 0)
	  panic("ahhmacmd5_input: m_copydata (copy)");
	count = min(m0->m_len - off, len);
	MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);
	len -= count;
	off = 0;
	m0 = m0->m_next;
    }

    MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
    ctx = xd->amx_octx;
    MD5Update(&ctx, (unsigned char *)(&(aho.ah_data[0])), HMACMD5_HASHLEN);
    MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);

    if (bcmp(aho.ah_data, ah->ah_data + ado, xd->amx_alen))
    {
#ifdef ENCDEBUG
	if (encdebug)
	  printf("ahhmacmd5_input: bad auth\n"); /* XXX */
#endif
	ahstat.ahs_badauth++;
	m_freem(m);
	return NULL;
    }
	
    if (xd->amx_wnd >= 0)
    {
	btsx = ntohq(ahp->ah_rpl);
	if ((errc = checkreplaywindow64(btsx, &(xd->amx_rpl), 
					xd->amx_wnd, &(xd->amx_bitmap)))
	    != 0)
	{
	    switch(errc)
	    {
		case 1:
#ifdef ENCDEBUG
		    printf("ahhmacmd5_input: replay counter wrapped\n");
#endif
		    ahstat.ahs_wrap++;
		    break;
		case 2:
#ifdef ENCDEBUG
		    printf("ahhmacmd5_input: received old packet\n");
#endif
		    ahstat.ahs_replay++;
		    break;
		case 3:
#ifdef ENCDEBUG
		    printf("ahhmacmd5_input: packet already received\n");
#endif
		    ahstat.ahs_replay++;
		    break;
	    }
	    m_freem(m);
	    return NULL;
	}
    }
	
    ipo = *ip;
    ipo.ip_p = ah->ah_nh;

    m->m_len -= (ohlen - sizeof(struct ip));
    m->m_data += (ohlen - sizeof(struct ip));
    m->m_pkthdr.len -= (ohlen - sizeof(struct ip));
    m->m_pkthdr.rcvif = rcvif;	/* this should not be necessary */

    ip = mtod(m, struct ip *);
    *ip = ipo;
    ip->ip_len = htons(ip->ip_len - ohlen + 2 * sizeof (struct ip));
    HTONS(ip->ip_id);
    HTONS(ip->ip_off);
    ip->ip_sum = 0;
    ip->ip_sum = in_cksum(m, sizeof (struct ip));

    /* Update the counters */
    tdb->tdb_cur_packets++;
    tdb->tdb_cur_bytes += ntohs(ip->ip_len) - (ip->ip_hl << 2);

    return m;
}


#define AHXPORT 

int
ahhmacmd5_output(struct mbuf *m, struct sockaddr_encap *gw, struct tdb *tdb, 
		 struct mbuf **mp)
{
    struct ahhmacmd5_xdata *xd;
    struct ip *ip, ipo;
    struct ah *ah;
    struct ahhmacmd5 *ahp, aho;
    register int len, off, count;
    register struct mbuf *m0;
    MD5_CTX ctx;
    int ilen, ohlen;
	
    ahstat.ahs_output++;
    m = m_pullup(m, sizeof (struct ip));
    if (m == NULL)
      return ENOBUFS;
	
    ip = mtod(m, struct ip *);
	
    xd = (struct ahhmacmd5_xdata *)tdb->tdb_xdata;

    ilen = ntohs(ip->ip_len);

#ifdef AHXPORT
    ohlen = AH_FLENGTH + xd->amx_alen;
#else
    ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;
#endif
    if (xd->amx_wnd >= 0)
      ohlen += HMACMD5_RPLENGTH;

    ipo.ip_v = IPVERSION;
    ipo.ip_hl = 5;
    ipo.ip_tos = 0;
    ipo.ip_len = htons(ohlen + ilen);
    ipo.ip_id = ip->ip_id;
    ipo.ip_off = htons(ntohs(ip->ip_off) & IP_DF);
    ipo.ip_ttl = 0;
    ipo.ip_p = IPPROTO_AH;
    ipo.ip_sum = 0;
#ifdef AHXPORT
    ipo.ip_src = ip->ip_src;
    ipo.ip_dst = ip->ip_dst;
    aho.ah_nh = ip->ip_p;
#else
    ipo.ip_src = gw->sen_ipsp_src;
    ipo.ip_dst = gw->sen_ipsp_dst;
    aho.ah_nh = IPPROTO_IP4;
#endif
    aho.ah_hl = (xd->amx_alen >> 2);
    if (xd->amx_wnd >= 0)
      aho.ah_hl += (HMACMD5_RPLENGTH / sizeof(u_int32_t));
    aho.ah_rv = 0;
    aho.ah_spi = tdb->tdb_spi;

    if (xd->amx_wnd >= 0)
    {
	if (xd->amx_rpl == 0)
	{
#ifdef ENCDEBUG
	    printf("ahhmacmd5_output: key should have changed long ago\n");
#endif
	    ahstat.ahs_wrap++;
	    return NULL;
	}
    }

    aho.ah_rpl = htonq(xd->amx_rpl++);

    ctx = xd->amx_ictx;
    MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
    if (xd->amx_wnd >= 0)
      MD5Update(&ctx, (unsigned char *)&aho, AH_FLENGTH + HMACMD5_RPLENGTH);
    else
      MD5Update(&ctx, (unsigned char *)&aho, AH_FLENGTH);
    MD5Update(&ctx, ipseczeroes, xd->amx_alen);

#ifdef AHXPORT
    off = sizeof (struct ip);
#else	
    off = 0;
#endif

    /*
     * Code shamelessly stolen from m_copydata
     */
    len = m->m_pkthdr.len - off;
	
    m0 = m;

    while (len > 0)
    {
	if (m0 == 0)
	  panic("ahhmacmd5_output: m_copydata");
	count = min(m0->m_len - off, len);
	MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);

	len -= count;
	off = 0;
	m0 = m0->m_next;
    }

    MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
    ctx = xd->amx_octx;
    MD5Update(&ctx, (unsigned char *)(&(aho.ah_data[0])), HMACMD5_HASHLEN);
    MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);

    ipo.ip_tos = ip->ip_tos;
    ipo.ip_id = ip->ip_id;
    ipo.ip_off = ip->ip_off;
    ipo.ip_ttl = ip->ip_ttl;
/*	ipo.ip_len = ntohs(ipo.ip_len); */
	
    M_PREPEND(m, ohlen, M_DONTWAIT);
    if (m == NULL)
      return ENOBUFS;

    m = m_pullup(m, ohlen + sizeof (struct ip));
    if (m == NULL)
      return ENOBUFS;
	
    ip = mtod(m, struct ip *);
    ah = (struct ah *)(ip + 1);
    ahp = (struct ahhmacmd5 *)ah; 
    *ip = ipo;
    ah->ah_nh = aho.ah_nh;
    ah->ah_hl = aho.ah_hl;
    ah->ah_rv = aho.ah_rv;
    ah->ah_spi = aho.ah_spi;
    if (xd->amx_wnd >= 0)
    {
	ahp->ah_rpl = aho.ah_rpl;
	bcopy((unsigned char *)(&(aho.ah_data[0])), 
	      ahp->ah_data, xd->amx_alen);
    }
    else
      bcopy((unsigned char *)(&(aho.ah_data[0])), 
	    ah->ah_data, xd->amx_alen);

    *mp = m;
	
    /* Update the counters */
    tdb->tdb_cur_packets++;
    tdb->tdb_cur_bytes += ip->ip_len - (ip->ip_hl << 2) - AH_FLENGTH -
		          xd->amx_alen;
    if (xd->amx_wnd >= 0)
      tdb->tdb_cur_bytes -= HMACMD5_RPLENGTH;

    return 0;
}
@


1.13
log
@major restructuring
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.12 1997/06/25 07:53:22 provos Exp $	*/
@


1.12
log
@hard and soft limits for SPI's per absolute timer, relative since establish,
relative since first use timers, packet and byte counters. notify key mgmt
on soft limits. key mgmt can now specify limits. new encap messages:
EMT_RESERVESPI, EMT_ENABLESPI, EMT_DISABLESPI
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.11 1997/06/24 20:57:24 provos Exp $	*/
d377 2
a378 1
ahhmacmd5_output(struct mbuf *m, struct sockaddr_encap *gw, struct tdb *tdb, struct mbuf **mp)
@


1.11
log
@use ntohs instead of NTOHS for counters
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.10 1997/06/24 20:48:40 provos Exp $	*/
d242 4
d249 2
a250 2
		  continue;
		  
d257 2
a258 2
		  continue;
		  
d263 1
a263 1
		  continue;
d367 2
a368 2
    tdb->tdb_packets++;
    tdb->tdb_bytes += ntohs(ip->ip_len) - (ip->ip_hl << 2);
d518 3
a520 3
    tdb->tdb_packets++;
    tdb->tdb_bytes += ip->ip_len - (ip->ip_hl << 2) - AH_FLENGTH -
		      xd->amx_alen;
d522 1
a522 1
      tdb->tdb_bytes -= HMACMD5_RPLENGTH;
@


1.10
log
@correct AH options hashing.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.8 1997/06/20 05:41:47 provos Exp $	*/
d364 1
a364 1
    tdb->tdb_bytes += NTOHS(ip->ip_len) - (ip->ip_hl << 2);
@


1.9
log
@handle IP options in AH + allow IP options in outgoing encapsulated packets
+ usage counters for later use with keymanagement processes
@
text
@d239 1
a239 2
	  MD5Update(&ctx, &optval, 1);
	  switch (IPOPT_NUMBER(optval))
d243 1
d251 1
a251 1
		  MD5Update(&ctx, (u_int8_t *)ip + off + 1, optval - 1);
d256 2
a257 2
		  MD5Update(&ctx, &optval, 1);
		  MD5Update(&ctx, ipseczeroes, optval - 2);
@


1.8
log
@ah-sha1 + esp-3des + indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.7 1997/03/30 22:05:12 mickey Exp $	*/
d161 2
a162 1
	
d188 16
a203 1
    ah = (struct ah *)(ip + 1);
d224 1
a224 1
    ipo.ip_len += sizeof (struct ip);	/* adjusted in ip_intr() */
d232 31
a262 1
    MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
d362 4
d513 7
@


1.7
log
@no more 2(two) md5 libs in kernel!
tested for rnd(4).... should work for ip too, since it's
the copy of ip_md*.
use sys/md5k.h for protos.... std iface forever!
hurray!
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.6 1997/03/09 07:03:20 angelos Exp $	*/
d71 1
a71 1
	return 0;
d82 45
a126 14
	struct ahhmacmd5_xdata *xd;
	struct ahhmacmd5_xencap txd;
	struct encap_msghdr *em;
	int len;
	
	tdbp->tdb_xform = xsp;

	MALLOC(tdbp->tdb_xdata, caddr_t, sizeof (struct ahhmacmd5_xdata),
	       M_XDATA, M_WAITOK);
	if (tdbp->tdb_xdata == NULL)
	  return ENOBUFS;
	bzero(tdbp->tdb_xdata, sizeof (struct ahhmacmd5_xdata));
	bzero(&txd, sizeof(struct ahhmacmd5_xencap));
	xd = (struct ahhmacmd5_xdata *)tdbp->tdb_xdata;
d128 1
a128 31
	em = mtod(m, struct encap_msghdr *);
	if (em->em_msglen - EMT_SETSPI_FLEN > sizeof (struct ahhmacmd5_xencap))
	{
		free((caddr_t)tdbp->tdb_xdata, M_XDATA);
		tdbp->tdb_xdata = NULL;
		return EINVAL;
	}
	
	m_copydata(m, EMT_SETSPI_FLEN, em->em_msglen - EMT_SETSPI_FLEN, (caddr_t)&txd);

	xd->amx_rpl = 1;
	xd->amx_alen = txd.amx_alen;
	xd->amx_bitmap = 0;
	xd->amx_wnd = txd.amx_wnd;
	
	MD5Init(&(xd->amx_ictx));
	MD5Init(&(xd->amx_octx));
	
	for (len = 0; len < AHHMACMD5_KMAX; len++)
	  txd.amx_key[len] ^= HMACMD5_IPAD_VAL;

	MD5Update(&(xd->amx_ictx), txd.amx_key, AHHMACMD5_KMAX);

	for (len = 0; len < AHHMACMD5_KMAX; len++)
	  txd.amx_key[len] ^= (HMACMD5_IPAD_VAL ^ HMACMD5_OPAD_VAL);

	MD5Update(&(xd->amx_octx), txd.amx_key, AHHMACMD5_KMAX);
	bzero(&txd, sizeof(struct ahhmacmd5_xencap));
	bzero(ipseczeroes, IPSEC_ZEROES_SIZE);	/* paranoid */

	return 0;
d138 2
a139 2
	FREE(tdbp->tdb_xdata, M_XDATA);
	return 0;
d152 18
a169 18
	struct ahhmacmd5_xdata *xd;
	struct ip *ip, ipo;
	struct ah *ah;
	struct ahhmacmd5 aho, *ahp;
	struct ifnet *rcvif;
	int ohlen, len, count, off, ado, errc;
	u_int64_t btsx;
	struct mbuf *m0;
	MD5_CTX ctx; 
	
	xd = (struct ahhmacmd5_xdata *)tdb->tdb_xdata;
	ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;
	if (xd->amx_wnd >= 0)
	  ohlen += HMACMD5_RPLENGTH;

	rcvif = m->m_pkthdr.rcvif;
	if (rcvif == NULL)
	{
d171 2
a172 2
		if (encdebug)
		  printf("ahhmacmd5_input: receive interface is NULL!!!\n");
d174 2
a175 2
		rcvif = &loif;
	}
d177 3
a179 1
	if (m->m_len < ohlen)
d181 2
a182 5
		if ((m = m_pullup(m, ohlen)) == NULL)
		{
			ahstat.ahs_hdrops++;
			return NULL;
		}
d184 1
d186 8
a193 8
	ip = mtod(m, struct ip *);
	ah = (struct ah *)(ip + 1);
	ahp = (struct ahhmacmd5 *)ah;

        if (xd->amx_wnd >= 0)
          ado = HMACMD5_RPLENGTH;
        else
          ado = 0;
d195 2
a196 2
        if (ah->ah_hl * sizeof(u_int32_t) != xd->amx_alen + ado)
        {
d198 2
a199 2
                if (encdebug)
                  printf("ahhmacmd5_input: bad authenticator length\n");
d201 49
a249 38
                ahstat.ahs_badauthl++;
                m_freem(m);
                return NULL;
        }

	ipo = *ip;
	ipo.ip_tos = 0;
	ipo.ip_len += sizeof (struct ip);	/* adjusted in ip_intr() */
	HTONS(ipo.ip_len);
	HTONS(ipo.ip_id);
	ipo.ip_off = htons(ipo.ip_off & IP_DF);	/* XXX -- and the C bit? */
	ipo.ip_ttl = 0;
	ipo.ip_sum = 0;

	ctx = xd->amx_ictx;
	MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
	if (xd->amx_wnd >= 0)
	  MD5Update(&ctx, (unsigned char *)ahp, AH_FLENGTH + HMACMD5_RPLENGTH);
	else
	  MD5Update(&ctx, (unsigned char *)ahp, AH_FLENGTH);
	MD5Update(&ctx, ipseczeroes, xd->amx_alen);

	/*
	 * Code shamelessly stolen from m_copydata
	 */
	off = ohlen;
	len = m->m_pkthdr.len - off;
	m0 = m;
	
	while (off > 0)
	{
		if (m0 == 0)
		  panic("ahhmacmd5_input: m_copydata (off)");
		if (off < m0->m_len)
		  break;
		off -= m0->m_len;
		m0 = m0->m_next;
	}
d251 4
a254 15
	while (len > 0)
	{
		if (m0 == 0)
		  panic("ahhmacmd5_input: m_copydata (copy)");
		count = min(m0->m_len - off, len);
		MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);
		len -= count;
		off = 0;
		m0 = m0->m_next;
	}

	MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
	ctx = xd->amx_octx;
	MD5Update(&ctx, (unsigned char *)(&(aho.ah_data[0])), HMACMD5_HASHLEN);
	MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
d256 2
a257 2
	if (bcmp(aho.ah_data, ah->ah_data + ado, xd->amx_alen))
	{
d259 2
a260 2
		if (encdebug)
		  printf("ahhmacmd5_input: bad auth\n"); /* XXX */
d262 11
a272 6
		ahstat.ahs_badauth++;
		m_freem(m);
		return NULL;
	}
	
	if (xd->amx_wnd >= 0)
d274 3
a276 8
	    	btsx = ntohq(ahp->ah_rpl);
		if ((errc = checkreplaywindow64(btsx, &(xd->amx_rpl), 
					       xd->amx_wnd, &(xd->amx_bitmap)))
		    != 0)
		{
			switch(errc)
			{
				case 1:
d278 1
a278 1
					printf("ahhmacmd5_input: replay counter wrapped\n");
d280 3
a282 3
					ahstat.ahs_wrap++;
					break;
				case 2:
d284 1
a284 1
					printf("ahhmacmd5_input: received old packet\n");
d286 3
a288 3
					ahstat.ahs_replay++;
					break;
				case 3:
d290 1
a290 1
					printf("ahhmacmd5_input: packet already received\n");
d292 5
a296 6
					ahstat.ahs_replay++;
					break;
			}
			m_freem(m);
			return NULL;
		}
d298 1
d300 2
a301 2
	ipo = *ip;
	ipo.ip_p = ah->ah_nh;
d303 12
a314 12
	m->m_len -= (ohlen - sizeof(struct ip));
	m->m_data += (ohlen - sizeof(struct ip));
	m->m_pkthdr.len -= (ohlen - sizeof(struct ip));
	m->m_pkthdr.rcvif = rcvif;	/* this should not be necessary */

	ip = mtod(m, struct ip *);
	*ip = ipo;
	ip->ip_len = htons(ip->ip_len - ohlen + 2 * sizeof (struct ip));
	HTONS(ip->ip_id);
	HTONS(ip->ip_off);
	ip->ip_sum = 0;
	ip->ip_sum = in_cksum(m, sizeof (struct ip));
d316 1
a316 1
	return m;
d325 13
a337 13
	struct ahhmacmd5_xdata *xd;
	struct ip *ip, ipo;
	struct ah *ah;
	struct ahhmacmd5 *ahp, aho;
	register int len, off, count;
	register struct mbuf *m0;
	MD5_CTX ctx;
	int ilen, ohlen;
	
	ahstat.ahs_output++;
	m = m_pullup(m, sizeof (struct ip));
	if (m == NULL)
	  return ENOBUFS;
d339 1
a339 1
	ip = mtod(m, struct ip *);
d341 1
a341 1
	xd = (struct ahhmacmd5_xdata *)tdb->tdb_xdata;
d343 1
a343 1
	ilen = ntohs(ip->ip_len);
d346 1
a346 1
	ohlen = AH_FLENGTH + xd->amx_alen;
d348 1
a348 1
	ohlen = sizeof (struct ip) + AH_FLENGTH + xd->amx_alen;
d350 2
a351 2
	if (xd->amx_wnd >= 0)
	  ohlen += HMACMD5_RPLENGTH;
d353 9
a361 9
	ipo.ip_v = IPVERSION;
	ipo.ip_hl = 5;
	ipo.ip_tos = 0;
	ipo.ip_len = htons(ohlen + ilen);
	ipo.ip_id = ip->ip_id;
	ipo.ip_off = htons(ntohs(ip->ip_off) & IP_DF);
	ipo.ip_ttl = 0;
	ipo.ip_p = IPPROTO_AH;
	ipo.ip_sum = 0;
d363 3
a365 3
	ipo.ip_src = ip->ip_src;
	ipo.ip_dst = ip->ip_dst;
	aho.ah_nh = ip->ip_p;
d367 3
a369 3
	ipo.ip_src = gw->sen_ipsp_src;
	ipo.ip_dst = gw->sen_ipsp_dst;
	aho.ah_nh = IPPROTO_IP4;
d371 9
a379 7
	aho.ah_hl = (xd->amx_alen >> 2);
	if (xd->amx_wnd >= 0)
	  aho.ah_hl += (HMACMD5_RPLENGTH / sizeof(u_int32_t));
	aho.ah_rv = 0;
	aho.ah_spi = tdb->tdb_spi;

	if (xd->amx_wnd >= 0)
a380 2
	    if (xd->amx_rpl == 0)
	    {
d382 1
a382 1
		printf("ahhmacmd5_output: key should have changed long ago\n");
d384 2
a385 3
		ahstat.ahs_wrap++;
		return NULL;
	    }
d387 1
d389 1
a389 1
        aho.ah_rpl = htonq(xd->amx_rpl++);
d391 7
a397 7
	ctx = xd->amx_ictx;
	MD5Update(&ctx, (unsigned char *)&ipo, sizeof (struct ip));
	if (xd->amx_wnd >= 0)
	  MD5Update(&ctx, (unsigned char *)&aho, AH_FLENGTH + HMACMD5_RPLENGTH);
	else
	  MD5Update(&ctx, (unsigned char *)&aho, AH_FLENGTH);
	MD5Update(&ctx, ipseczeroes, xd->amx_alen);
d400 1
a400 1
	off = sizeof (struct ip);
d402 1
a402 1
	off = 0;
d405 13
a417 6
	/*
	 * Code shamelessly stolen from m_copydata
	 */
	len = m->m_pkthdr.len - off;
	
	m0 = m;
d419 4
a422 11
	while (len > 0)
	{
		if (m0 == 0)
		  panic("ahhmacmd5_output: m_copydata");
		count = min(m0->m_len - off, len);
		MD5Update(&ctx, mtod(m0, unsigned char *) + off, count);

		len -= count;
		off = 0;
		m0 = m0->m_next;
	}
d424 9
a432 9
	MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);
	ctx = xd->amx_octx;
	MD5Update(&ctx, (unsigned char *)(&(aho.ah_data[0])), HMACMD5_HASHLEN);
	MD5Final((unsigned char *)(&(aho.ah_data[0])), &ctx);

	ipo.ip_tos = ip->ip_tos;
	ipo.ip_id = ip->ip_id;
	ipo.ip_off = ip->ip_off;
	ipo.ip_ttl = ip->ip_ttl;
d435 25
a459 25
	M_PREPEND(m, ohlen, M_DONTWAIT);
	if (m == NULL)
	  return ENOBUFS;

	m = m_pullup(m, ohlen + sizeof (struct ip));
	if (m == NULL)
	  return ENOBUFS;
	
	ip = mtod(m, struct ip *);
	ah = (struct ah *)(ip + 1);
	ahp = (struct ahhmacmd5 *)ah; 
	*ip = ipo;
	ah->ah_nh = aho.ah_nh;
	ah->ah_hl = aho.ah_hl;
	ah->ah_rv = aho.ah_rv;
	ah->ah_spi = aho.ah_spi;
	if (xd->amx_wnd >= 0)
	{
	  	ahp->ah_rpl = aho.ah_rpl;
		bcopy((unsigned char *)(&(aho.ah_data[0])), 
		      ahp->ah_data, xd->amx_alen);
	}
	else
	  bcopy((unsigned char *)(&(aho.ah_data[0])), 
	        ah->ah_data, xd->amx_alen);
d461 1
a461 1
	*mp = m;
d463 1
a463 1
	return 0;
@


1.6
log
@Change the reference to the standards document.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.5 1997/02/26 03:01:03 angelos Exp $	*/
d112 2
a113 2
	realMD5Init(&(xd->amx_ictx));
	realMD5Init(&(xd->amx_octx));
@


1.5
log
@I/O packet counters for IP-in-IP and AH.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ahhmacmd5.c,v 1.4 1997/02/24 14:06:37 niklas Exp $	*/
d27 1
a27 1
 * Based on draft-ietf-ipsec-ah-hmac-md5-04.txt.
@


1.4
log
@OpenBSD tags + some prototyping police
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d333 1
a333 1
	
@


1.3
log
@Fixed problem with authenticator length checking.
@
text
@d1 2
@


1.2
log
@-nostdinc and big endian cleanup
@
text
@d192 1
a192 1
        if (ah->ah_hl != xd->amx_alen + ado)
@


1.1
log
@IPSEC package by John Ioannidis and Angelos D. Keromytis. Written in
Greece. From ftp.funet.fi:/pub/unix/security/net/ip/BSDipsec.tar.gz
@
text
@d38 2
d41 1
d46 1
a55 2
#include <sys/socketvar.h>
#include <net/raw_cb.h>
@
