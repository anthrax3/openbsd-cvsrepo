head	1.34;
access;
symbols
	OPENBSD_6_2:1.34.0.6
	OPENBSD_6_2_BASE:1.34
	OPENBSD_6_1:1.34.0.4
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.33.0.30
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.24
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.26
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.18
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.22
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.20
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.16
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.14
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.12
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.10
	OPENBSD_5_0:1.33.0.8
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.6
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.4
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.33.0.2
	OPENBSD_4_7_BASE:1.33
	OPENBSD_4_6:1.32.0.10
	OPENBSD_4_6_BASE:1.32
	OPENBSD_4_5:1.32.0.6
	OPENBSD_4_5_BASE:1.32
	OPENBSD_4_4:1.32.0.4
	OPENBSD_4_4_BASE:1.32
	OPENBSD_4_3:1.32.0.2
	OPENBSD_4_3_BASE:1.32
	OPENBSD_4_2:1.31.0.16
	OPENBSD_4_2_BASE:1.31
	OPENBSD_4_1:1.31.0.14
	OPENBSD_4_1_BASE:1.31
	OPENBSD_4_0:1.31.0.12
	OPENBSD_4_0_BASE:1.31
	OPENBSD_3_9:1.31.0.10
	OPENBSD_3_9_BASE:1.31
	OPENBSD_3_8:1.31.0.8
	OPENBSD_3_8_BASE:1.31
	OPENBSD_3_7:1.31.0.6
	OPENBSD_3_7_BASE:1.31
	OPENBSD_3_6:1.31.0.4
	OPENBSD_3_6_BASE:1.31
	SMP_SYNC_A:1.31
	SMP_SYNC_B:1.31
	OPENBSD_3_5:1.31.0.2
	OPENBSD_3_5_BASE:1.31
	OPENBSD_3_4:1.30.0.4
	OPENBSD_3_4_BASE:1.30
	UBC_SYNC_A:1.30
	OPENBSD_3_3:1.30.0.2
	OPENBSD_3_3_BASE:1.30
	OPENBSD_3_2:1.29.0.2
	OPENBSD_3_2_BASE:1.29
	OPENBSD_3_1:1.28.0.6
	OPENBSD_3_1_BASE:1.28
	UBC_SYNC_B:1.29
	UBC:1.28.0.4
	UBC_BASE:1.28
	OPENBSD_3_0:1.28.0.2
	OPENBSD_3_0_BASE:1.28
	OPENBSD_2_9_BASE:1.26
	OPENBSD_2_9:1.26.0.4
	OPENBSD_2_8:1.26.0.2
	OPENBSD_2_8_BASE:1.26
	OPENBSD_2_7:1.25.0.2
	OPENBSD_2_7_BASE:1.25
	SMP:1.24.0.2
	SMP_BASE:1.24
	kame_19991208:1.18
	OPENBSD_2_6:1.16.0.4
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.16.0.2
	OPENBSD_2_5_BASE:1.16
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.34
date	2017.02.07.18.18.16;	author bluhm;	state Exp;
branches;
next	1.33;
commitid	d6u53XQpFaxImDPZ;

1.33
date	2010.01.10.12.43.07;	author markus;	state Exp;
branches;
next	1.32;

1.32
date	2007.12.14.18.33.40;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2004.02.17.12.07.45;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.12.14.41.07;	author jason;	state Exp;
branches;
next	1.29;

1.29
date	2002.06.09.16.26.10;	author itojun;	state Exp;
branches;
next	1.28;

1.28
date	2001.06.25.05.11.58;	author angelos;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	2001.06.09.07.03.41;	author angelos;	state Exp;
branches;
next	1.26;

1.26
date	2000.09.19.03.20.58;	author angelos;	state Exp;
branches;
next	1.25;

1.25
date	2000.03.17.10.25.22;	author angelos;	state Exp;
branches;
next	1.24;

1.24
date	2000.01.27.08.09.08;	author angelos;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2000.01.13.05.03.45;	author angelos;	state Exp;
branches;
next	1.22;

1.22
date	2000.01.09.23.42.37;	author angelos;	state Exp;
branches;
next	1.21;

1.21
date	99.12.31.22.19.42;	author itojun;	state Exp;
branches;
next	1.20;

1.20
date	99.12.25.07.09.42;	author angelos;	state Exp;
branches;
next	1.19;

1.19
date	99.12.09.10.11.11;	author angelos;	state Exp;
branches;
next	1.18;

1.18
date	99.12.07.08.57.59;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	99.10.29.02.10.01;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	99.04.11.19.41.37;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	99.02.24.23.45.47;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	99.02.24.22.32.59;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	98.11.25.02.01.28;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	98.05.18.21.10.31;	author provos;	state Exp;
branches;
next	1.11;

1.11
date	97.11.24.19.14.11;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	97.11.04.09.10.59;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	97.07.14.08.48.44;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.07.11.23.37.54;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.06.25.07.53.21;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.06.20.05.41.47;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.03.30.22.05.11;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.02.26.02.38.11;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	97.02.24.19.42.32;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	97.02.24.14.06.37;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.02.20.01.07.49;	author deraadt;	state Exp;
branches;
next	;

1.24.2.1
date	2000.03.24.09.09.36;	author niklas;	state Exp;
branches;
next	1.24.2.2;

1.24.2.2
date	2001.05.14.22.40.08;	author niklas;	state Exp;
branches;
next	1.24.2.3;

1.24.2.3
date	2001.07.04.10.54.38;	author niklas;	state Exp;
branches;
next	1.24.2.4;

1.24.2.4
date	2003.03.28.00.06.54;	author niklas;	state Exp;
branches;
next	1.24.2.5;

1.24.2.5
date	2004.06.05.23.11.25;	author niklas;	state Exp;
branches;
next	;

1.28.4.1
date	2002.10.29.00.36.47;	author art;	state Exp;
branches;
next	1.28.4.2;

1.28.4.2
date	2003.05.19.22.40.40;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.34
log
@IPsec packets could be dropped unaccounted if output after crypto
failed.  Add a counter for that case.
OK dhill@@
@
text
@/*	$OpenBSD: ip_ah.h,v 1.33 2010/01/10 12:43:07 markus Exp $	*/
/*
 * The authors of this code are John Ioannidis (ji@@tla.org),
 * Angelos D. Keromytis (kermit@@csd.uch.gr) and
 * Niels Provos (provos@@physnet.uni-hamburg.de).
 *
 * The original version of this code was written by John Ioannidis
 * for BSD/OS in Athens, Greece, in November 1995.
 *
 * Ported to OpenBSD and NetBSD, with additional transforms, in December 1996,
 * by Angelos D. Keromytis.
 *
 * Additional transforms and features in 1997 and 1998 by Angelos D. Keromytis
 * and Niels Provos.
 *
 * Additional features in 1999 by Angelos D. Keromytis.
 *
 * Copyright (C) 1995, 1996, 1997, 1998, 1999 John Ioannidis,
 * Angelos D. Keromytis and Niels Provos.
 * Copyright (c) 2001 Angelos D. Keromytis.
 *
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software.
 * You may use this code under the GNU public license if you so wish. Please
 * contribute changes back to the authors under this freer than GPL license
 * so that we may further the use of strong encryption without limitations to
 * all.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, NONE OF THE AUTHORS MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#ifndef _NETINET_IP_AH_H_
#define _NETINET_IP_AH_H_

struct ahstat {
    u_int32_t	ahs_hdrops;	/* Packet shorter than header shows */
    u_int32_t	ahs_nopf;	/* Protocol family not supported */
    u_int32_t	ahs_notdb;
    u_int32_t	ahs_badkcr;
    u_int32_t	ahs_badauth;
    u_int32_t	ahs_noxform;
    u_int32_t	ahs_qfull;
    u_int32_t	ahs_wrap;
    u_int32_t	ahs_replay;
    u_int32_t	ahs_badauthl;	/* Bad authenticator length */
    u_int32_t	ahs_input;	/* Input AH packets */
    u_int32_t	ahs_output;	/* Output AH packets */
    u_int32_t	ahs_invalid;	/* Trying to use an invalid TDB */
    u_int64_t	ahs_ibytes;	/* Input bytes */
    u_int64_t	ahs_obytes;	/* Output bytes */
    u_int32_t	ahs_toobig;	/* Packet got larger than IP_MAXPACKET */
    u_int32_t	ahs_pdrops;	/* Packet blocked due to policy */
    u_int32_t	ahs_crypto;	/* Crypto processing failure */
    u_int32_t	ahs_outfail;	/* Packet output failure */
};

struct ah {
    u_int8_t   ah_nh;
    u_int8_t   ah_hl;
    u_int16_t  ah_rv;
    u_int32_t  ah_spi;
    u_int32_t  ah_rpl;  /* We may not use this, if we're using old xforms */
};

/* Length of base AH header */
#define AH_FLENGTH		8

/*
 * Names for AH sysctl objects
 */
#define	AHCTL_ENABLE	1		/* Enable AH processing */
#define	AHCTL_STATS	2		/* AH stats */
#define	AHCTL_MAXID	3

#define AHCTL_NAMES { \
	{ 0, 0 }, \
	{ "enable", CTLTYPE_INT }, \
	{ "stats", CTLTYPE_STRUCT } \
}

#define AHCTL_VARS { \
	NULL, \
	&ah_enable, \
	NULL \
}

#ifdef _KERNEL
extern int ah_enable;
extern struct ahstat ahstat;
#endif /* _KERNEL */
#endif /* _NETINET_IP_AH_H_ */
@


1.33
log
@Fix two bugs in IPsec/HMAC-SHA2:
(1) use correct (message) block size of 128 byte (instead of 64
    bytes) for HMAC-SHA512/384 (RFC4634).
(2) RFC4868 specifies that HMAC-SHA-{256,384,512} is truncated to
    nnn/2 bits, while we still use 96 bits. 96 bits have been
    specified in draft-ietf-ipsec-ciph-sha-256-00 while
    draft-ietf-ipsec-ciph-sha-256-01 changed it to 128 bits.

WARNING: this change makes IPsec with SHA-256 (the default)
incompatible with older OpenBSD versions and other IPsec-implementations
that share this bug.

ok+tests naddy, fries; requested by reyk/deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.32 2007/12/14 18:33:40 deraadt Exp $	*/
d41 1
a41 2
struct ahstat
{
d60 1
d63 1
a63 2
struct ah
{
@


1.32
log
@add sysctl entry points into various network layers, in particular to
provide netstat(1) with data it needs;  ok claudio reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.31 2004/02/17 12:07:45 markus Exp $	*/
a73 3

/* Size of the largest hash function output used in AH-new, in bytes */
#define AH_MAX_HASHLEN		20
@


1.31
log
@switch to sysctl_int_arr(); ok henning, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.30 2003/02/12 14:41:07 jason Exp $	*/
d82 2
a83 1
#define AHCTL_MAXID	2
d88 1
d94 1
@


1.30
log
@Remove commons; inspired by netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.29 2002/06/09 16:26:10 itojun Exp $	*/
d87 5
@


1.29
log
@whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.28 2001/06/25 05:11:58 angelos Exp $	*/
d91 1
a91 1
struct ahstat ahstat;
@


1.28
log
@Copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.27 2001/06/09 07:03:41 angelos Exp $	*/
d4 1
a4 1
 * Angelos D. Keromytis (kermit@@csd.uch.gr) and 
d25 1
a25 1
 * modification of this software. 
@


1.28.4.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.28 2001/06/25 05:11:58 angelos Exp $	*/
d4 1
a4 1
 * Angelos D. Keromytis (kermit@@csd.uch.gr) and
d25 1
a25 1
 * modification of this software.
@


1.28.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d91 1
a91 1
extern struct ahstat ahstat;
@


1.27
log
@Inclusion protection.
@
text
@d1 1
a1 2
/*	$OpenBSD: ip_ah.h,v 1.26 2000/09/19 03:20:58 angelos Exp $	*/

d18 1
a18 1
 * Copyright (C) 1995, 1996, 1997, 1998, 1999 by John Ioannidis,
d20 3
a22 2
 *	
 * Permission to use, copy, and modify this software without fee
@


1.26
log
@Lots and lots of changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.25 2000/03/17 10:25:22 angelos Exp $	*/
d38 2
a39 2
#ifndef _NETINET_AH_H_
#define _NETINET_AH_H_
d93 1
a93 1
#endif /* _NETINET_AH_H_ */
@


1.25
log
@Cryptographic services framework, and software "device driver". The
idea is to support various cryptographic hardware accelerators (which
may be (detachable) cards, secondary/tertiary/etc processors,
software crypto, etc). Supports session migration between crypto
devices. What it doesn't (yet) support:
 - multiple instances of the same algorithm used in the same session
 - use of multiple crypto drivers in the same session
 - asymmetric crypto

No support for a userland device yet.

IPsec code path modified to allow for asynchronous cryptography
(callbacks used in both input and output processing). Some unrelated
code simplification done in the process (especially for AH).

Development of this code kindly supported by Network Security
Technologies (NSTI). The code was writen mostly in Greece, and is
being committed from Montreal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.24 2000/01/27 08:09:08 angelos Exp $	*/
d8 2
a9 2
 * This code was written by John Ioannidis for BSD/OS in Athens, Greece, 
 * in November 1995.
@


1.24
log
@Merge "old" and "new" ESP and AH in two files (one for each).
Fix a couple of buglets with ingress flow deletion.
tcpdump on enc0 should now show all outgoing packets *before* being
processed, and all incoming packets *after* being processed.

Good to be in Canada (land of the free commits).
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.23 2000/01/13 05:03:45 angelos Exp $	*/
d43 2
a44 2
    u_int32_t	ahs_hdrops;	/* packet shorter than header shows */
    u_int32_t   ahs_nopf;      /* Protocol family not supported */
d50 3
a52 3
    u_int32_t   ahs_wrap;
    u_int32_t   ahs_replay;
    u_int32_t	ahs_badauthl;	/* bad authenticator length */
d55 6
a60 5
    u_int32_t   ahs_invalid;    /* Trying to use an invalid TDB */
    u_int64_t	ahs_ibytes;	/* input bytes */
    u_int64_t   ahs_obytes;	/* output bytes */
    u_int32_t	ahs_toobig;	/* packet got larger than IP_MAXPACKET */
    u_int32_t	ahs_pdrops;	/* packet blocked due to policy */
@


1.24.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 2
a44 2
    u_int32_t	ahs_hdrops;	/* Packet shorter than header shows */
    u_int32_t	ahs_nopf;	/* Protocol family not supported */
d50 3
a52 3
    u_int32_t	ahs_wrap;
    u_int32_t	ahs_replay;
    u_int32_t	ahs_badauthl;	/* Bad authenticator length */
d55 5
a59 6
    u_int32_t	ahs_invalid;	/* Trying to use an invalid TDB */
    u_int64_t	ahs_ibytes;	/* Input bytes */
    u_int64_t	ahs_obytes;	/* Output bytes */
    u_int32_t	ahs_toobig;	/* Packet got larger than IP_MAXPACKET */
    u_int32_t	ahs_pdrops;	/* Packet blocked due to policy */
    u_int32_t	ahs_crypto;	/* Crypto processing failure */
@


1.24.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.26 2000/09/19 03:20:58 angelos Exp $	*/
d8 2
a9 2
 * The original version of this code was written by John Ioannidis
 * for BSD/OS in Athens, Greece, in November 1995.
@


1.24.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d19 1
a19 1
 * Copyright (C) 1995, 1996, 1997, 1998, 1999 John Ioannidis,
d21 2
a22 3
 * Copyright (c) 2001 Angelos D. Keromytis.
 *
 * Permission to use, copy, and modify this software with or without fee
d38 2
a39 2
#ifndef _NETINET_IP_AH_H_
#define _NETINET_IP_AH_H_
d93 1
a93 1
#endif /* _NETINET_IP_AH_H_ */
@


1.24.2.4
log
@Sync the SMP branch with 3.3
@
text
@d4 1
a4 1
 * Angelos D. Keromytis (kermit@@csd.uch.gr) and
d25 1
a25 1
 * modification of this software.
d91 1
a91 1
extern struct ahstat ahstat;
@


1.24.2.5
log
@Merge with the trunk
@
text
@a88 5
#define AHCTL_VARS { \
	NULL, \
	&ah_enable, \
}

@


1.23
log
@Add an ip4_input6() for use with IPv6 (just a wrapper for
ip4_input()), add prototype, ifdef include files.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.22 2000/01/09 23:42:37 angelos Exp $	*/
a37 5
/*
 * Authentication Header Processing
 * Per RFC1826 (Atkinson, 1995)
 */

a40 11
struct ah_old
{
    u_int8_t	ah_nh;			/* Next header (protocol) */
    u_int8_t	ah_hl;			/* AH length, in 32-bit words */
    u_int16_t	ah_rv;			/* reserved, must be 0 */
    u_int32_t	ah_spi;			/* Security Parameters Index */
    u_int8_t	ah_data[1];		/* More, really */
};

#define AH_OLD_FLENGTH		8	/* size of fixed part */

d62 1
a62 1
struct ah_new
d64 5
a68 6
    u_int8_t        ah_nh;                  /* Next header (protocol) */
    u_int8_t        ah_hl;                  /* AH length, in 32-bit words */
    u_int16_t       ah_rv;                  /* reserved, must be 0 */
    u_int32_t       ah_spi;                 /* Security Parameters Index */
    u_int32_t       ah_rpl;                 /* Replay prevention */
    u_int8_t        ah_data[AH_HMAC_HASHLEN];/* Authenticator */
d71 2
a72 1
#define AH_NEW_FLENGTH		(sizeof(struct ah_new))
a88 8
void	ah_input __P((struct mbuf *, ...));
int	ah_output __P((struct mbuf *, struct tdb *, struct mbuf **));
int	ah_sysctl __P((int *, u_int, void *, size_t *, void *, size_t));

#ifdef INET6
int	ah6_input __P((struct mbuf **, int *, int));
#endif /* INET6 */

@


1.22
log
@Add ingress ACL for IPsec: after being processed, IPsec packets are
matched against a list of acceptable packet classes, if
sysctl variable net.inet.ip.ipsec-acl is set to 1.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.21 1999/12/31 22:19:42 itojun Exp $	*/
d43 3
d116 1
@


1.21
log
@fix IPv6 ipsec template lossage.
- previous code grabbed new nexthdr mistakingly
- parameter passing must follow ip6protows
(actually the code will never get called until in6_proto.c is updated)

the current code assumes that {AH,ESP} is right next to IPv6 header.
the assumption must be removed, but it means that we need to chase
header chain...
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.20 1999/12/25 07:09:42 angelos Exp $	*/
d57 1
@


1.20
log
@Change some function prototypes, dont unnecessarily initialize some
variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.19 1999/12/09 10:11:11 angelos Exp $	*/
d106 1
a106 1
int	ah6_input __P((struct mbuf *, ...));
@


1.19
log
@Add v4/v6 wrapper routine definitions.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.18 1999/12/07 08:57:59 angelos Exp $	*/
d106 1
a106 1
void	ah6_input __P((struct mbuf *, ...));
@


1.18
log
@New ah_new_input(), protocol-independent processing (still lacking
IPv6-specific protocol header processing).
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.17 1999/10/29 02:10:01 angelos Exp $	*/
d104 4
@


1.17
log
@Get rid of unnecessary third argument in *_output routines of IPsec.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.16 1999/04/11 19:41:37 niklas Exp $	*/
d85 3
@


1.16
log
@Introduce net.inet.{ah,esp}.enable sysctl controls that are off by default.
If you are going to use either of AH or ESP or both, enable these in
/etc/sysctl.conf.  Also correct the IPSec debugging sysctl code, it is now
named net.inet.ip.encdebug.  Some corrected function signatures too.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.15 1999/02/24 23:45:47 angelos Exp $	*/
d99 1
a99 2
int	ah_output __P((struct mbuf *, struct sockaddr_encap *,
    struct tdb *, struct mbuf **));
@


1.15
log
@Update copyright; remove a few annoying debugging printfs.

Btw, OpenBSD hit 25000 commits a couple commits ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.14 1999/02/24 22:32:59 angelos Exp $	*/
d71 1
d86 11
d98 6
@


1.14
log
@Remove encap.h include; saner debugging printfs; fix buglets; work with
pfkeyv2.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.13 1998/11/25 02:01:28 niklas Exp $	*/
d17 4
a20 2
 * Copyright (C) 1995, 1996, 1997, 1998 by John Ioannidis, Angelos D. Keromytis
 * and Niels Provos.
@


1.13
log
@Add checks of packets getting to big after transforms.
Also make sure some more error conditions get told to the caller.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.12 1998/05/18 21:10:31 provos Exp $	*/
a40 14
#include <sys/md5k.h>
#include <netinet/ip_sha1.h>
#include <netinet/ip_rmd160.h>

struct ah_hash {
    int type;
    char *name;
    u_int16_t hashsize; 
    u_int16_t ctxsize;
    void (*Init)(void *);
    void (*Update)(void *, u_int8_t *, u_int16_t);
    void (*Final)(u_int8_t *, void *);
};

a51 7
/* Authenticator lengths */
#define AH_MD5_ALEN		16
#define AH_SHA1_ALEN		20
#define AH_RMD160_ALEN		20

#define AH_ALEN_MAX		AH_SHA1_ALEN 	/* Keep this updated */

a70 8
#define AH_HMAC_HASHLEN		12	/* 96 bits of authenticator */
#define AH_HMAC_RPLENGTH        4	/* 32 bits of replay counter */
#define AH_HMAC_INITIAL_RPL	1	/* Replay counter initial value */

#define HMAC_IPAD_VAL           0x36
#define HMAC_OPAD_VAL           0x5C
#define HMAC_BLOCK_LEN		64

a82 66
struct ah_new_xencap
{
    u_int32_t       amx_hash_algorithm;
    int32_t         amx_wnd;
    u_int32_t       amx_keylen;
    u_int8_t        amx_key[1];
};

#define AH_NEW_XENCAP_LEN	(3 * sizeof(u_int32_t))

struct ah_new_xdata
{
    u_int32_t       amx_hash_algorithm;
    int32_t         amx_wnd;
    u_int32_t       amx_rpl;                /* Replay counter */
    u_int32_t       amx_bitmap;
    struct ah_hash  *amx_hash;
    union
    {
        MD5_CTX         amx_MD5_ictx;       /* Internal key+padding */
        SHA1_CTX	amx_SHA1_ictx;
	RMD160_CTX      amx_RMD160_ictx;
    } amx_ictx;
    union 
    {
        MD5_CTX         amx_MD5_octx;       /* External key+padding */
	SHA1_CTX        amx_SHA1_octx;
	RMD160_CTX      amx_RMD160_octx;
    } amx_octx;
};

#define amx_md5_ictx	amx_ictx.amx_MD5_ictx
#define amx_md5_octx	amx_octx.amx_MD5_octx
#define amx_sha1_ictx	amx_ictx.amx_SHA1_ictx
#define amx_sha1_octx	amx_octx.amx_SHA1_octx
#define amx_rmd160_ictx	amx_ictx.amx_RMD160_ictx
#define amx_rmd160_octx	amx_octx.amx_RMD160_octx

struct ah_old_xdata
{
    u_int32_t       amx_hash_algorithm;
    u_int32_t       amx_keylen;             /* Key material length */
    struct ah_hash  *amx_hash;
    union
    {
	MD5_CTX	    amx_MD5_ctx;
	SHA1_CTX    amx_SHA1_ctx;
    } amx_ctx;
    u_int8_t        amx_key[1];             /* Key material */
};

#define amx_md5_ctx	amx_ctx.amx_MD5_ctx
#define amx_sha1_ctx 	amx_ctx.amx_SHA1_ctx

struct ah_old_xencap
{
    u_int32_t       amx_hash_algorithm;
    u_int32_t       amx_keylen;
    u_int8_t        amx_key[1];
};

#define AH_OLD_XENCAP_LEN	(2 * sizeof(u_int32_t))

#define AH_HMAC_IPAD_VAL	0x36
#define AH_HMAC_OPAD_VAL	0x5C

d85 1
a85 1
#endif
@


1.12
log
@first step to the setsockopt/getsockopt interface as described in
draft-mcdonald-simple-ipsec-api, kernel notifies (EMT_REQUESTSA) signal
userland key management applications when security services are requested.
this is only for outgoing connections at the moment, incoming packets
are not yet checked against the selected socket policy.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.11 1997/11/24 19:14:11 provos Exp $	*/
d89 1
@


1.11
log
@add ripemd-160 as authentication function.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.10 1997/11/04 09:10:59 provos Exp $	*/
d4 3
a6 2
 * The author of this code is John Ioannidis, ji@@tla.org,
 * 	(except when noted otherwise).
d8 2
a9 1
 * This code was written for BSD/OS in Athens, Greece, in November 1995.
d12 1
a12 1
 * by Angelos D. Keromytis, kermit@@forthnet.gr.
d14 2
a15 2
 * Additional transforms and features in 1997 by Angelos D. Keromytis and
 * Niels Provos.
d17 1
a17 1
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis, Angelos D. Keromytis
d23 5
a27 1
 * modification of this software.
d30 1
a30 1
 * IMPLIED WARRANTY. IN PARTICULAR, NEITHER AUTHOR MAKES ANY
@


1.10
log
@make it easier to add additional transforms. add blowfish and cast
encryption. some more info for kernfs/ipsec.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.9 1997/07/14 08:48:44 provos Exp $	*/
d37 1
d63 1
d126 1
d132 1
d140 2
a141 3

#define AHMD5_ALEN      16		/* Size of MD5 digest */
#define AHSHA1_ALEN     20		/* Size of SHA-1 digest */
@


1.9
log
@global byte counters.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.8 1997/07/11 23:37:54 provos Exp $	*/
d12 5
a16 1
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis and Angelos D. Keromytis.
d38 10
d119 1
d122 14
a135 18
	struct 
	{
            MD5_CTX         amx_ictx;       /* Internal key+padding */
            MD5_CTX         amx_octx;       /* External key+padding */
        } MD5stuff;

	struct
	{
	    SHA1_CTX	    amx_ictx;
	    SHA1_CTX	    amx_octx;
	} SHA1stuff;
    } Hashes;
};

#define amx_md5_ictx	Hashes.MD5stuff.amx_ictx
#define amx_md5_octx	Hashes.MD5stuff.amx_octx
#define amx_sha1_ictx	Hashes.SHA1stuff.amx_ictx
#define amx_sha1_octx	Hashes.SHA1stuff.amx_octx
d144 1
d149 1
a149 1
    } Hashes;
d153 2
a154 2
#define amx_md5_ctx	Hashes.amx_MD5_ctx
#define amx_sha1_ctx 	Hashes.amx_SHA1_ctx
@


1.8
log
@put old esp/ah and new esp/ah in different files.
generalised way of handling transforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.7 1997/06/25 07:53:21 provos Exp $	*/
d65 2
@


1.7
log
@hard and soft limits for SPI's per absolute timer, relative since establish,
relative since first use timers, packet and byte counters. notify key mgmt
on soft limits. key mgmt can now specify limits. new encap messages:
EMT_RESERVESPI, EMT_ENABLESPI, EMT_DISABLESPI
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.6 1997/06/20 05:41:47 provos Exp $	*/
d34 1
a34 1
struct ah
d40 1
a40 1
    u_int8_t	ah_data[1];		/* More, really*/
d43 7
a49 1
#define AH_FLENGTH	8		/* size of fixed part */
d67 7
a73 13
#define AHHMACMD5_KMAX  64              /* max 512 bits key */
#define AHHMACMD5_AMAX  64              /* up to 512 bits of authenticator */
#define AHHMACMD5_RPLS  2               /* 64 bits of replay counter */

#define HMACMD5_HASHLEN         16
#define HMACMD5_RPLENGTH        8

#define HMACMD5_IPAD_VAL        0x36
#define HMACMD5_OPAD_VAL        0x5C

#define AHHMACMD5_KMAX  64              /* max 512 bits key */
#define AHHMACMD5_AMAX  64              /* up to 512 bits of authenticator */
#define AHHMACMD5_RPLS  2               /* 64 bits of replay counter */
d75 1
a75 7
#define HMACMD5_HASHLEN         16
#define HMACMD5_RPLENGTH        8

#define HMACMD5_IPAD_VAL        0x36
#define HMACMD5_OPAD_VAL        0x5C

struct ahhmacmd5
d81 2
a82 2
    u_int64_t       ah_rpl;                 /* Replay prevention */
    u_int8_t        ah_data[AHHMACMD5_AMAX];/* Authenticator */
d85 1
a85 7
struct ahhmacmd5_xencap
{
    u_int16_t       amx_alen;
    u_int16_t       amx_rpl;
    int32_t         amx_wnd;
    u_int8_t        amx_key[AHHMACMD5_KMAX];
};
d87 1
a87 1
struct ahhmacmd5_xdata
d89 1
a89 1
    u_int32_t       amx_alen;               /* authenticator length */
d91 2
a92 4
    u_int64_t       amx_rpl;                /* Replay counter */
    u_int64_t       amx_bitmap;
    MD5_CTX         amx_ictx;               /* Internal key+padding */
    MD5_CTX         amx_octx;               /* External key+padding */
d95 1
a95 9
#define AHHMACSHA1_KMAX 64              /* max 512 bits key */
#define AHHMACSHA1_AMAX 64              /* up to 512 bits of authenticator */
#define AHHMACSHA1_RPLS 2               /* 64 bits of replay counter */

#define HMACSHA1_HASHLEN                20
#define HMACSHA1_RPLENGTH       8

#define HMACSHA1_IPAD_VAL       0x36
#define HMACSHA1_OPAD_VAL       0x5C
d97 1
a97 1
struct ahhmacsha1
d99 24
a122 7
    u_int8_t        ah_nh;                 /* Next header (protocol) */
    u_int8_t        ah_hl;                 /* AH length, in 32-bit words */
    u_int16_t       ah_rv;                 /* reserved, must be 0 */
    u_int32_t       ah_spi;                /* Security Parameters Index */
    u_int64_t       ah_rpl;                /* Replay prevention */
    u_int8_t        ah_data[AHHMACSHA1_AMAX];/* Authenticator */
};
d124 2
a125 6
struct ahhmacsha1_xencap
{
    u_int32_t       amx_alen;
    int32_t         amx_wnd;
    u_int8_t        amx_key[AHHMACSHA1_KMAX];
};
d127 1
a127 1
struct ahhmacsha1_xdata
d129 8
a136 6
    u_int32_t       amx_alen;               /* authenticator length */
    int32_t         amx_wnd;
    u_int64_t       amx_rpl;                /* Replay counter */
    u_int64_t       amx_bitmap;
    SHA1_CTX        amx_ictx;               /* Internal key+padding */
    SHA1_CTX        amx_octx;               /* External key+padding */
d139 2
a140 4
#define AHMD5_KMAX      32              /* max 256 bits key */
#define AHMD5_AMAX      64              /* up to 512 bits of authenticator */
#define AHSHA1_KMAX     32
#define AHSHA1_AMAX     64
d142 1
a142 1
struct ahmd5
d144 3
a146 14
    u_int8_t        ah_nh;                  /* Next header (protocol) */
    u_int8_t        ah_hl; 		    /* AH length, in 32-bit words */
    u_int16_t       ah_rv;                  /* reserved, must be 0 */
    u_int32_t       ah_spi;                 /* Security Parameters Index */
    u_int8_t        ah_data[AHMD5_AMAX];    /*  */
};

struct ahsha1
{
    u_int8_t        ah_nh;                  /* Next header (protocol) */
    u_int8_t        ah_hl; 		    /* AH length, in 32-bit words */
    u_int16_t       ah_rv;                  /* reserved, must be 0 */
    u_int32_t       ah_spi;                 /* Security Parameters Index */
    u_int8_t        ah_data[AHSHA1_AMAX];   /*  */
d149 1
a149 2
#define AHMD5_ALEN      16		/* Size of MD5 digest */
#define AHSHA1_ALEN     20		/* Size of SHA-1 digest */
d151 2
a152 13
struct ahmd5_xdata
{
    u_int16_t       amx_klen;               /* Key material length */
    u_int16_t       amx_alen;               /* authenticator length */
    u_int8_t        amx_key[AHMD5_KMAX];    /* Key material */
};

struct ahsha1_xdata
{
    u_int16_t       amx_klen;               /* Key material length */
    u_int16_t       amx_alen;               /* authenticator length */
    u_int8_t        amx_key[AHSHA1_KMAX];   /* Key material */
};
@


1.6
log
@ah-sha1 + esp-3des + indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.5 1997/03/30 22:05:11 mickey Exp $	*/
d58 1
@


1.5
log
@no more 2(two) md5 libs in kernel!
tested for rnd(4).... should work for ip too, since it's
the copy of ip_md*.
use sys/md5k.h for protos.... std iface forever!
hurray!
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.4 1997/02/26 02:38:11 angelos Exp $	*/
d36 5
a40 5
	u_int8_t	ah_nh;			/* Next header (protocol) */
	u_int8_t	ah_hl;			/* AH length, in 32-bit words */
	u_int16_t	ah_rv;			/* reserved, must be 0 */
	u_int32_t	ah_spi;			/* Security Parameters Index */
	u_int8_t	ah_data[1];		/* More, really*/
d47 11
a57 11
	u_int32_t	ahs_hdrops;	/* packet shorter than header shows */
	u_int32_t	ahs_notdb;
	u_int32_t	ahs_badkcr;
	u_int32_t	ahs_badauth;
	u_int32_t	ahs_noxform;
	u_int32_t	ahs_qfull;
        u_int32_t       ahs_wrap;
        u_int32_t       ahs_replay;
	u_int32_t	ahs_badauthl;	/* bad authenticator length */
	u_int32_t	ahs_input;	/* Input AH packets */
	u_int32_t	ahs_output;	/* Output AH packets */
d82 6
a87 6
        u_int8_t        ah_nh;                  /* Next header (protocol) */
        u_int8_t        ah_hl;                  /* AH length, in 32-bit words */
        u_int16_t       ah_rv;                  /* reserved, must be 0 */
        u_int32_t       ah_spi;                 /* Security Parameters Index */
        u_int64_t       ah_rpl;                 /* Replay prevention */
        u_int8_t        ah_data[AHHMACMD5_AMAX];/* Authenticator */
d92 4
a95 4
        u_int16_t       amx_alen;
        u_int16_t       amx_rpl;
        int32_t         amx_wnd;
        u_int8_t        amx_key[AHHMACMD5_KMAX];
d100 6
a105 6
        u_int32_t       amx_alen;               /* authenticator length */
        int32_t         amx_wnd;
        u_int64_t       amx_rpl;                /* Replay counter */
        u_int64_t       amx_bitmap;
        MD5_CTX         amx_ictx;               /* Internal key+padding */
        MD5_CTX         amx_octx;               /* External key+padding */
d120 6
a125 6
        u_int8_t        ah_nh;                 /* Next header (protocol) */
        u_int8_t        ah_hl;                 /* AH length, in 32-bit words */
        u_int16_t       ah_rv;                 /* reserved, must be 0 */
        u_int32_t       ah_spi;                /* Security Parameters Index */
        u_int64_t       ah_rpl;                /* Replay prevention */
        u_int8_t        ah_data[AHHMACSHA1_AMAX];/* Authenticator */
d130 3
a132 3
        u_int32_t       amx_alen;
        int32_t         amx_wnd;
        u_int8_t        amx_key[AHHMACSHA1_KMAX];
d137 6
a142 6
        u_int32_t       amx_alen;               /* authenticator length */
        int32_t         amx_wnd;
        u_int64_t       amx_rpl;                /* Replay counter */
        u_int64_t       amx_bitmap;
        SHA1_CTX        amx_ictx;               /* Internal key+padding */
        SHA1_CTX        amx_octx;               /* External key+padding */
d147 2
d152 5
a156 5
        u_int8_t        ah_nh;                  /* Next header (protocol) */
        u_int8_t        ah_hl; 		        /* AH length, in 32-bit words */
        u_int16_t       ah_rv;                  /* reserved, must be 0 */
        u_int32_t       ah_spi;                 /* Security Parameters Index */
        u_int8_t        ah_data[AHMD5_AMAX];    /*  */
d159 12
d173 10
a182 3
        u_int16_t       amx_klen;               /* Key material length */
        u_int16_t       amx_alen;               /* authenticator length */
        u_int8_t        amx_key[AHMD5_KMAX];    /* Key material */
@


1.4
log
@I/O packet counters added.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.3 1997/02/24 19:42:32 angelos Exp $	*/
d31 1
a31 1
#include <netinet/ip_md5.h>
@


1.3
log
@Beautification.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_ah.h,v 1.2 1997/02/24 14:06:37 niklas Exp $	*/
d56 2
@


1.2
log
@OpenBSD tags + some prototyping police
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d81 1
a81 1
        u_int8_t        ah_hl;                 /* AH length, in 32-bit words */
d85 1
a85 1
        u_int8_t        ah_data[AHHMACMD5_AMAX];/*  Authenticator */
d118 1
a118 1
        u_int8_t        ah_nh;                  /* Next header (protocol) */
d120 4
a123 4
        u_int16_t       ah_rv;                  /* reserved, must be 0 */
        u_int32_t       ah_spi;                 /* Security Parameters Index */
        u_int64_t       ah_rpl;                 /* Replay prevention */
        u_int8_t        ah_data[AHHMACSHA1_AMAX];/*  Authenticator */
d149 1
a149 1
        u_int8_t        ah_hl;          /* AH length, in 32-bit words */
@


1.1
log
@IPSEC package by John Ioannidis and Angelos D. Keromytis. Written in
Greece. From ftp.funet.fi:/pub/unix/security/net/ip/BSDipsec.tar.gz
@
text
@d1 2
@
