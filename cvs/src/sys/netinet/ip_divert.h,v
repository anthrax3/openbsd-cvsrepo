head	1.9;
access;
symbols
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2017.03.13.20.18.21;	author claudio;	state Exp;
branches;
next	1.8;
commitid	ZsxSSZJSFxZH81LL;

1.8
date	2017.02.09.15.32.56;	author jca;	state Exp;
branches;
next	1.7;
commitid	fXr0qQRRcc8oQZmX;

1.7
date	2017.01.25.17.34.31;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	pVtptbHA3yk4jSpN;

1.6
date	2014.07.10.03.17.59;	author lteo;	state Exp;
branches;
next	1.5;
commitid	baLHEMMpirACq25p;

1.5
date	2014.04.23.14.43.14;	author florian;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.21.13.06.03;	author benno;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.04.16.08.37;	author michele;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.08.17.52.18;	author michele;	state dead;
branches;
next	1.1;

1.1
date	2009.09.08.17.00.41;	author michele;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Move PRU_ATTACH out of the pr_usrreq functions into pr_attach.
Attach is quite a different thing to the other PRU functions and
this should make locking a bit simpler. This also removes the ugly
hack on how proto was passed to the attach function.
OK bluhm@@ and mpi@@ on a previous version
@
text
@/*      $OpenBSD: ip_divert.h,v 1.8 2017/02/09 15:32:56 jca Exp $ */

/*
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _IP_DIVERT_H_
#define _IP_DIVERT_H_

struct divstat {
	u_long	divs_ipackets;	/* total input packets */
	u_long	divs_noport;	/* no socket on port */
	u_long	divs_fullsock;	/* not delivered, input socket full */
	u_long	divs_opackets;	/* total output packets */
	u_long	divs_errors;	/* generic errors */
};

/*
 * Names for divert sysctl objects
 */
#define	DIVERTCTL_RECVSPACE	1	/* receive buffer space */
#define	DIVERTCTL_SENDSPACE	2	/* send buffer space */
#define	DIVERTCTL_STATS		3	/* divert statistics */
#define	DIVERTCTL_MAXID		4

#define	DIVERTCTL_NAMES { \
	{ 0, 0 }, \
	{ "recvspace",	CTLTYPE_INT }, \
	{ "sendspace",	CTLTYPE_INT }, \
	{ "stats",	CTLTYPE_STRUCT } \
}

#define	DIVERTCTL_VARS { \
	NULL, \
	&divert_recvspace, \
	&divert_sendspace, \
	NULL \
}

#ifdef _KERNEL

#include <sys/percpu.h>

enum divstat_counters {
	divs_ipackets,
	divs_noport,
	divs_fullsock,
	divs_opackets,
	divs_errors,
	divs_ncounters,
};

extern struct cpumem *divcounters;

static inline void
divstat_inc(enum divstat_counters c)
{
	counters_inc(divcounters, c);
}

extern struct	inpcbtable	divbtable;

void	 divert_init(void);
void	 divert_input(struct mbuf *, int, int);
int	 divert_packet(struct mbuf *, int, u_int16_t);
int	 divert_sysctl(int *, u_int, void *, size_t *, void *, size_t);
int	 divert_usrreq(struct socket *,
	    int, struct mbuf *, struct mbuf *, struct mbuf *, struct proc *);
int	 divert_attach(struct socket *, int);

#endif /* _KERNEL */
#endif /* _IP_DIVERT_H_ */
@


1.8
log
@percpu counters for divert(4) stats

ok dlg@@
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_divert.h,v 1.7 2017/01/25 17:34:31 bluhm Exp $ */
d81 1
@


1.7
log
@Since raw_input() and route_input() are gone from pr_input, we can
make the variable parameters of the protocol input functions fixed.
Also add the proto to make it similar to IPv6.
OK mpi@@ guenther@@ millert@@
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_divert.h,v 1.6 2014/07/10 03:17:59 lteo Exp $ */
d53 20
a73 1
extern struct	divstat		divstat;
@


1.6
log
@Simplify the way divert(4) sends packets to userspace: Instead of
unnecessarily allocating an mbuf tag to store the divert port, just pass
the divert port directly to divert_packet() or divert6_packet() as an
argument.

includes a style fix pointed out by bluhm@@
ok bluhm@@ henning@@ reyk@@
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_divert.h,v 1.5 2014/04/23 14:43:14 florian Exp $ */
d57 1
a57 1
void	 divert_input(struct mbuf *, ...);
@


1.5
log
@No need for vargs here.
While there move declaration of divert{,6}_output() to .c as it's a
private function. Also switch first two args to make it more like
similar functions (both suggested by mpi@@).
Input/OK mpi@@, OK lteo@@
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_divert.h,v 1.4 2012/10/21 13:06:03 benno Exp $ */
d58 1
a58 1
int	 divert_packet(struct mbuf *, int);
@


1.4
log
@Add the IP_DIVERTFL socket option on divert(4) sockets to control
which packets (as in direction) of the traffic will be diverted
through the divert socket.
ok claudio@@, henning@@
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_divert.h,v 1.3 2009/10/04 16:08:37 michele Exp $ */
a58 1
int	 divert_output(struct mbuf *, ...);
@


1.3
log
@Add (again) support for divert sockets. They allow you to:

- queue packets from pf(4) to a userspace application
- reinject packets from the application into the kernel stack.

The divert socket can be bound to a special "divert port" and will
receive every packet diverted to that port by pf(4).

The pf syntax is pretty simple, e.g.:

pass on em0 inet proto tcp from any to any port 80 divert-packet port 1

A lot of discussion have happened since my last commit that resulted
in many changes and improvements.
I would *really* like to thank everyone who took part in the discussion
especially canacar@@ who spotted out which are the limitations of this approach.

OpenBSD divert(4) is meant to be compatible with software running on
top of FreeBSD's divert sockets even though they are pretty different and will
become even more with time.

discusses with many, but mainly reyk@@ canacar@@ deraadt@@ dlg@@ claudio@@ beck@@
tested by reyk@@ and myself
ok reyk@@ claudio@@ beck@@
manpage help and ok by jmc@@
@
text
@d1 1
a1 1
/*      $OpenBSD$ */
d58 1
a58 1
void	 divert_packet(struct mbuf *, int);
@


1.2
log
@I had not enough oks to commit this diff.
Sorry.
@
text
@d1 1
a1 1
/*      $OpenBSD: ip_divert.h,v 1.1 2009/09/08 17:00:41 michele Exp $ */
d22 11
d35 2
a36 1
#define	DIVERTCTL_MAXID		3
d40 3
a42 2
	{ "recvspace", CTLTYPE_INT }, \
	{ "sendspace", CTLTYPE_INT } \
d48 2
a49 1
	&divert_sendspace \
d53 2
a54 1
extern struct	inpcbtable divbtable;
@


1.1
log
@Add support for divert sockets. They allow you to:

- queue packets from pf(4) to a userspace application
- reinject packets from the application into the kernel stack.

The divert socket can be bound to a special "divert port" and will
receive every packet diverted to that port by pf(4).

The pf syntax is pretty simple, e.g.:

pass on em0 inet proto tcp from any to any port 80 divert-packet port 8000

test, bugfix and ok by reyk@@
manpage help and ok by jmc@@
no objections from many others.
@
text
@d1 1
a1 1
/*      $OpenBSD$ */
@

