head	1.79;
access;
symbols
	OPENBSD_6_2_BASE:1.79
	OPENBSD_6_1:1.76.0.4
	OPENBSD_6_1_BASE:1.76
	OPENBSD_6_0:1.70.0.6
	OPENBSD_6_0_BASE:1.70
	OPENBSD_5_9:1.70.0.2
	OPENBSD_5_9_BASE:1.70
	OPENBSD_5_8:1.64.0.4
	OPENBSD_5_8_BASE:1.64
	OPENBSD_5_7:1.63.0.2
	OPENBSD_5_7_BASE:1.63
	OPENBSD_5_6:1.61.0.4
	OPENBSD_5_6_BASE:1.61
	OPENBSD_5_5:1.60.0.4
	OPENBSD_5_5_BASE:1.60
	OPENBSD_5_4:1.59.0.2
	OPENBSD_5_4_BASE:1.59
	OPENBSD_5_3:1.58.0.2
	OPENBSD_5_3_BASE:1.58
	OPENBSD_5_2:1.56.0.6
	OPENBSD_5_2_BASE:1.56
	OPENBSD_5_1_BASE:1.56
	OPENBSD_5_1:1.56.0.4
	OPENBSD_5_0:1.56.0.2
	OPENBSD_5_0_BASE:1.56
	OPENBSD_4_9:1.55.0.2
	OPENBSD_4_9_BASE:1.55
	OPENBSD_4_8:1.53.0.2
	OPENBSD_4_8_BASE:1.53
	OPENBSD_4_7:1.52.0.2
	OPENBSD_4_7_BASE:1.52
	OPENBSD_4_6:1.48.0.8
	OPENBSD_4_6_BASE:1.48
	OPENBSD_4_5:1.48.0.4
	OPENBSD_4_5_BASE:1.48
	OPENBSD_4_4:1.48.0.2
	OPENBSD_4_4_BASE:1.48
	OPENBSD_4_3:1.47.0.2
	OPENBSD_4_3_BASE:1.47
	OPENBSD_4_2:1.46.0.2
	OPENBSD_4_2_BASE:1.46
	OPENBSD_4_1:1.45.0.6
	OPENBSD_4_1_BASE:1.45
	OPENBSD_4_0:1.45.0.4
	OPENBSD_4_0_BASE:1.45
	OPENBSD_3_9:1.45.0.2
	OPENBSD_3_9_BASE:1.45
	OPENBSD_3_8:1.44.0.2
	OPENBSD_3_8_BASE:1.44
	OPENBSD_3_7:1.43.0.2
	OPENBSD_3_7_BASE:1.43
	OPENBSD_3_6:1.40.0.2
	OPENBSD_3_6_BASE:1.40
	SMP_SYNC_A:1.39
	SMP_SYNC_B:1.39
	OPENBSD_3_5:1.38.0.2
	OPENBSD_3_5_BASE:1.38
	OPENBSD_3_4:1.36.0.2
	OPENBSD_3_4_BASE:1.36
	UBC_SYNC_A:1.35
	OPENBSD_3_3:1.35.0.4
	OPENBSD_3_3_BASE:1.35
	OPENBSD_3_2:1.35.0.2
	OPENBSD_3_2_BASE:1.35
	OPENBSD_3_1:1.34.0.2
	OPENBSD_3_1_BASE:1.34
	UBC_SYNC_B:1.35
	UBC:1.32.0.4
	UBC_BASE:1.32
	OPENBSD_3_0:1.32.0.2
	OPENBSD_3_0_BASE:1.32
	OPENBSD_2_9_BASE:1.25
	OPENBSD_2_9:1.25.0.8
	OPENBSD_2_8:1.25.0.6
	OPENBSD_2_8_BASE:1.25
	OPENBSD_2_7:1.25.0.4
	OPENBSD_2_7_BASE:1.25
	SMP:1.25.0.2
	SMP_BASE:1.25
	kame_19991208:1.16
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.79
date	2017.05.18.10.56.45;	author bluhm;	state Exp;
branches;
next	1.78;
commitid	end8oXU4pM3sNkRR;

1.78
date	2017.05.17.15.39.36;	author bluhm;	state Exp;
branches;
next	1.77;
commitid	ZnGV0rjkayzGHY0v;

1.77
date	2017.05.09.13.33.50;	author bluhm;	state Exp;
branches;
next	1.76;
commitid	ovvRMOlhc2iqxuko;

1.76
date	2017.03.13.20.18.21;	author claudio;	state Exp;
branches;
next	1.75;
commitid	ZsxSSZJSFxZH81LL;

1.75
date	2017.03.10.07.29.25;	author jca;	state Exp;
branches;
next	1.74;
commitid	wuugeUzB7oK5I9QF;

1.74
date	2017.03.02.08.58.24;	author mpi;	state Exp;
branches;
next	1.73;
commitid	tz6lHk1OQ6UxADoY;

1.73
date	2017.02.22.19.34.42;	author dhill;	state Exp;
branches;
next	1.72;
commitid	8MQyAJVsE6ZNz4mh;

1.72
date	2017.01.29.19.58.47;	author bluhm;	state Exp;
branches;
next	1.71;
commitid	3e3CkrbYekyVOcxy;

1.71
date	2016.12.22.11.04.44;	author rzalamena;	state Exp;
branches;
next	1.70;
commitid	T2qzeepA7r1EGy1x;

1.70
date	2015.12.03.21.57.59;	author mpi;	state Exp;
branches;
next	1.69;
commitid	nmbu8xP0zmz2PPN0;

1.69
date	2015.12.03.12.42.03;	author goda;	state Exp;
branches;
next	1.68;
commitid	FFhJyNTOYvvsqwUi;

1.68
date	2015.10.07.10.50.35;	author mpi;	state Exp;
branches;
next	1.67;
commitid	hPrd2a6fiZdlN2yP;

1.67
date	2015.09.28.08.32.05;	author mpi;	state Exp;
branches;
next	1.66;
commitid	MCjArMsyMPhqxF1g;

1.66
date	2015.09.04.08.43.39;	author mpi;	state Exp;
branches;
next	1.65;
commitid	qAevExm24QrBjVNL;

1.65
date	2015.08.30.10.39.16;	author mpi;	state Exp;
branches;
next	1.64;
commitid	avqdJydG8T8nvZhe;

1.64
date	2015.07.18.15.51.17;	author mpi;	state Exp;
branches;
next	1.63;
commitid	lwQKRpFyNEr7kjoF;

1.63
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.62;
commitid	t9FBKDfc4VDxpEy2;

1.62
date	2014.11.20.14.51.42;	author krw;	state Exp;
branches;
next	1.61;
commitid	dOUqRDzYiPQXkCLL;

1.61
date	2014.07.22.11.06.10;	author mpi;	state Exp;
branches;
next	1.60;
commitid	DQakU8LLWV6Iwx84;

1.60
date	2013.12.17.02.41.07;	author matthew;	state Exp;
branches;
next	1.59;

1.59
date	2013.04.24.10.17.08;	author mpi;	state Exp;
branches;
next	1.58;

1.58
date	2013.01.17.16.30.10;	author bluhm;	state Exp;
branches;
next	1.57;

1.57
date	2012.10.15.11.11.32;	author mikeb;	state Exp;
branches;
next	1.56;

1.56
date	2011.03.31.10.36.42;	author jasper;	state Exp;
branches;
next	1.55;

1.55
date	2011.01.07.17.50.42;	author bluhm;	state Exp;
branches;
next	1.54;

1.54
date	2010.08.29.09.24.38;	author gollo;	state Exp;
branches;
next	1.53;

1.53
date	2010.05.11.09.36.07;	author claudio;	state Exp;
branches;
next	1.52;

1.52
date	2010.01.12.23.33.24;	author yasuoka;	state Exp;
branches;
next	1.51;

1.51
date	2009.10.04.16.08.37;	author michele;	state Exp;
branches;
next	1.50;

1.50
date	2009.09.08.17.52.17;	author michele;	state Exp;
branches;
next	1.49;

1.49
date	2009.09.08.17.00.41;	author michele;	state Exp;
branches;
next	1.48;

1.48
date	2008.05.06.08.47.35;	author markus;	state Exp;
branches;
next	1.47;

1.47
date	2007.12.14.18.33.40;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2007.06.06.09.58.12;	author henning;	state Exp;
branches;
next	1.45;

1.45
date	2005.12.23.13.01.23;	author claudio;	state Exp;
branches;
next	1.44;

1.44
date	2005.07.14.02.09.46;	author uwe;	state Exp;
branches;
next	1.43;

1.43
date	2005.01.14.14.51.27;	author mcbride;	state Exp;
branches;
next	1.42;

1.42
date	2004.12.07.20.38.47;	author mcbride;	state Exp;
branches;
next	1.41;

1.41
date	2004.09.17.11.32.53;	author msf;	state Exp;
branches;
next	1.40;

1.40
date	2004.07.17.13.24.58;	author henning;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.25.02.48.04;	author itojun;	state Exp;
branches;
next	1.38;

1.38
date	2003.12.15.07.11.30;	author mcbride;	state Exp;
branches;
next	1.37;

1.37
date	2003.10.17.21.04.58;	author mcbride;	state Exp;
branches;
next	1.36;

1.36
date	2003.06.02.23.28.14;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2002.06.09.16.26.10;	author itojun;	state Exp;
branches;
next	1.34;

1.34
date	2002.03.01.22.29.29;	author provos;	state Exp;
branches;
next	1.33;

1.33
date	2002.01.12.00.51.59;	author ericj;	state Exp;
branches;
next	1.32;

1.32
date	2001.08.08.15.07.04;	author jjbg;	state Exp;
branches
	1.32.4.1;
next	1.31;

1.31
date	2001.07.05.16.45.54;	author jjbg;	state Exp;
branches;
next	1.30;

1.30
date	2001.06.24.18.22.47;	author provos;	state Exp;
branches;
next	1.29;

1.29
date	2001.06.08.03.53.45;	author angelos;	state Exp;
branches;
next	1.28;

1.28
date	2001.06.05.02.31.35;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2001.05.30.02.12.27;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.25.22.08.23;	author itojun;	state Exp;
branches;
next	1.25;

1.25
date	2000.01.27.08.09.08;	author angelos;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2000.01.21.03.15.05;	author angelos;	state Exp;
branches;
next	1.23;

1.23
date	2000.01.17.05.17.24;	author itojun;	state Exp;
branches;
next	1.22;

1.22
date	2000.01.11.07.57.23;	author angelos;	state Exp;
branches;
next	1.21;

1.21
date	2000.01.07.21.38.01;	author angelos;	state Exp;
branches;
next	1.20;

1.20
date	2000.01.02.09.06.11;	author angelos;	state Exp;
branches;
next	1.19;

1.19
date	99.12.21.11.11.16;	author itojun;	state Exp;
branches;
next	1.18;

1.18
date	99.12.21.09.00.52;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	99.12.09.03.46.59;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	99.12.08.06.50.19;	author itojun;	state Exp;
branches;
next	1.15;

1.15
date	99.10.28.03.21.51;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	99.04.20.20.06.11;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	99.04.11.19.41.36;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	99.04.09.23.28.45;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	99.02.24.22.32.58;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.01.08.01.00.34;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.07.30.03.53.22;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	98.03.18.10.16.25;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.02.20.01.07.46;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.10.08.07.33.25;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.05.00.57;	author dm;	state Exp;
branches;
next	1.4;

1.4
date	96.04.24.06.00.43;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.03.04.08.21.53;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.22.30.33;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.11;	author deraadt;	state Exp;
branches;
next	;

1.25.2.1
date	2001.07.04.10.54.34;	author niklas;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2001.10.31.03.29.03;	author nate;	state Exp;
branches;
next	1.25.2.3;

1.25.2.3
date	2002.03.06.02.15.07;	author niklas;	state Exp;
branches;
next	1.25.2.4;

1.25.2.4
date	2003.03.28.00.06.54;	author niklas;	state Exp;
branches;
next	1.25.2.5;

1.25.2.5
date	2003.06.07.11.06.08;	author ho;	state Exp;
branches;
next	1.25.2.6;

1.25.2.6
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	1.25.2.7;

1.25.2.7
date	2004.06.05.23.11.25;	author niklas;	state Exp;
branches;
next	;

1.32.4.1
date	2002.01.31.22.55.45;	author niklas;	state Exp;
branches;
next	1.32.4.2;

1.32.4.2
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	1.32.4.3;

1.32.4.3
date	2002.10.29.00.36.47;	author art;	state Exp;
branches;
next	;


desc
@@


1.79
log
@The function name ip4_input() is confusing as it also handles IPv6
packets.  This is the IP in IP protocol input function, so call it
ipip_input().  Rename the existing ipip_input() to ipip_input_gif()
as it is the input function used by the gif interface.  Pass the
address family to make it consistent with pr_input.  Use __func__
in debug print and panic messages.  Move all ipip prototypes to the
ip_ipip.h header file.
OK dhill@@ mpi@@
@
text
@/*	$OpenBSD: in_proto.c,v 1.78 2017/05/17 15:39:36 bluhm Exp $	*/
/*	$NetBSD: in_proto.c,v 1.14 1996/02/18 18:58:32 christos Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)COPYRIGHT	1.1 (NRL) 17 January 1995
 *
 * NRL grants permission for redistribution and use in source and binary
 * forms, with or without modification, of the software and documentation
 * created at NRL provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgements:
 * 	This product includes software developed by the University of
 * 	California, Berkeley and its contributors.
 * 	This product includes software developed at the Information
 * 	Technology Division, US Naval Research Laboratory.
 * 4. Neither the name of the NRL nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THE SOFTWARE PROVIDED BY NRL IS PROVIDED BY NRL AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL NRL OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation
 * are those of the authors and should not be interpreted as representing
 * official policies, either expressed or implied, of the US Naval
 * Research Laboratory (NRL).
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/route.h>
#include <net/rtable.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>
#include <netinet/in_pcb.h>

#ifdef INET6
#include <netinet/ip6.h>
#endif

#include <netinet/igmp_var.h>
#include <netinet/tcp.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>

/*
 * TCP/IP protocol family: IP, ICMP, UDP, TCP.
 */

#include "gif.h"
#if NGIF > 0
#include <net/if_gif.h>
#endif

#ifdef INET6
#include <netinet6/ip6_var.h>
#endif /* INET6 */

#ifdef IPSEC
#include <netinet/ip_ipsp.h>
#endif

#include <netinet/ip_ether.h>
#include <netinet/ip_ipip.h>

#include "gre.h"
#if NGRE > 0
#include <netinet/ip_gre.h>
#include <net/if_gre.h>
#endif

#include "carp.h"
#if NCARP > 0
#include <netinet/ip_carp.h>
#endif

#include "pfsync.h"
#if NPFSYNC > 0
#include <net/pfvar.h>
#include <net/if_pfsync.h>
#endif

#include "pf.h"
#if NPF > 0
#include <netinet/ip_divert.h>
#endif

#include "etherip.h"
#if NETHERIP > 0
#include <net/if_etherip.h>
#endif

u_char ip_protox[IPPROTO_MAX];

struct protosw inetsw[] = {
{
  .pr_domain	= &inetdomain,
  .pr_init	= ip_init,
  .pr_slowtimo	= ip_slowtimo,
  .pr_drain	= ip_drain,
  .pr_sysctl	= ip_sysctl
},
{
  .pr_type	= SOCK_DGRAM,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_UDP,
  .pr_flags	= PR_ATOMIC|PR_ADDR|PR_SPLICE,
  .pr_input	= udp_input,
  .pr_ctlinput	= udp_ctlinput,
  .pr_ctloutput	= ip_ctloutput,
  .pr_usrreq	= udp_usrreq,
  .pr_attach	= udp_attach,
  .pr_init	= udp_init,
  .pr_sysctl	= udp_sysctl
},
{
  .pr_type	= SOCK_STREAM,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_TCP,
  .pr_flags	= PR_CONNREQUIRED|PR_WANTRCVD|PR_ABRTACPTDIS|PR_SPLICE,
  .pr_input	= tcp_input,
  .pr_ctlinput	= tcp_ctlinput,
  .pr_ctloutput	= tcp_ctloutput,
  .pr_usrreq	= tcp_usrreq,
  .pr_attach	= tcp_attach,
  .pr_init	= tcp_init,
  .pr_slowtimo	= tcp_slowtimo,
  .pr_sysctl	= tcp_sysctl
},
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_RAW,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= rip_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach
},
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_ICMP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= icmp_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_init	= icmp_init,
  .pr_sysctl	= icmp_sysctl
},
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_IPV4,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
#if NGIF > 0
  .pr_input	= in_gif_input,
#else
  .pr_input	= ipip_input,
#endif
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= ipip_sysctl,
  .pr_init	= ipip_init
},
#ifdef INET6
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_IPV6,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
#if NGIF > 0
  .pr_input	= in_gif_input,
#else
  .pr_input	= ipip_input,
#endif
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq, /* XXX */
  .pr_attach	= rip_attach
},
#endif
#if NGIF > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_ETHERIP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= etherip_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= etherip_sysctl
},
#endif /* NGIF */
#if defined(MPLS) && NGIF > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_MPLS,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= etherip_input,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach
},
#endif /* MPLS && GIF */
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_IGMP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= igmp_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_init	= igmp_init,
  .pr_fasttimo	= igmp_fasttimo,
  .pr_slowtimo	= igmp_slowtimo,
  .pr_sysctl	= igmp_sysctl
},
#ifdef IPSEC
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_AH,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= ah4_input,
  .pr_ctlinput	= ah4_ctlinput,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= ah_sysctl
},
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_ESP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= esp4_input,
  .pr_ctlinput	= esp4_ctlinput,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= esp_sysctl
},
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_IPCOMP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= ipcomp4_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= ipcomp_sysctl
},
#endif /* IPSEC */
#if NGRE > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_GRE,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= gre_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= gre_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= gre_sysctl
},
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_MOBILE,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= gre_mobile_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= ipmobile_sysctl
},
#endif /* NGRE > 0 */
#if NCARP > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_CARP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= carp_proto_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= carp_sysctl
},
#endif /* NCARP > 0 */
#if NPFSYNC > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_PFSYNC,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= pfsync_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= pfsync_sysctl
},
#endif /* NPFSYNC > 0 */
#if NPF > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_DIVERT,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= divert_usrreq,
  .pr_attach	= divert_attach,
  .pr_init	= divert_init,
  .pr_sysctl	= divert_sysctl
},
#endif /* NPF > 0 */
#if NETHERIP > 0
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_ETHERIP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= ip_etherip_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= ip_etherip_sysctl
},
#endif /* NETHERIP */
{
  /* raw wildcard */
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= rip_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_init	= rip_init
}
};

struct domain inetdomain = {
  .dom_family = AF_INET,
  .dom_name = "internet",
  .dom_protosw = inetsw,
  .dom_protoswNPROTOSW = &inetsw[nitems(inetsw)],
  .dom_rtkeylen = sizeof(struct sockaddr_in),
  .dom_rtoffset = offsetof(struct sockaddr_in, sin_addr),
  .dom_maxplen = 32
};
@


1.78
log
@The large and nested GIF #ifdef in protosw made it hard to figure
out what is going on.  There were also some inconsistencies that
seem to be oversights.  Use more specific the #ifdefs.
OK mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.77 2017/05/09 13:33:50 bluhm Exp $	*/
d242 1
a242 1
  .pr_input	= ip4_input,
d259 1
a259 1
  .pr_input	= ip4_input,
@


1.77
log
@Remove rip_output() and rip6_output() from inetsw and inet6sw.  The
rip_output() function is never called via the pr_output pointer.
rip_usrreq(PRU_SEND) calls rip_output() directly.  raw_usrreq() is
never called from inetsw.  Situation in inet and inet6 is analog.
OK claudio@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.76 2017/03/13 20:18:21 claudio Exp $	*/
a233 1
#if NGIF > 0
d239 1
d241 3
a249 11
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_ETHERIP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= etherip_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach,
  .pr_sysctl	= etherip_sysctl
},
d256 1
d258 4
d266 1
a266 1
#ifdef MPLS
d270 1
a270 1
  .pr_protocol	= IPPROTO_MPLS,
a272 11
  .pr_usrreq	= rip_usrreq,
  .pr_attach	= rip_attach
},
#endif
#else /* NGIF */
{
  .pr_type	= SOCK_RAW,
  .pr_domain	= &inetdomain,
  .pr_protocol	= IPPROTO_IPIP,
  .pr_flags	= PR_ATOMIC|PR_ADDR,
  .pr_input	= ip4_input,
d276 1
a276 2
  .pr_sysctl	= ipip_sysctl,
  .pr_init	= ipip_init
d278 2
a279 1
#ifdef INET6
d283 1
a283 1
  .pr_protocol	= IPPROTO_IPV6,
d285 2
a286 3
  .pr_input	= ip4_input,
  .pr_ctloutput	= rip_ctloutput,
  .pr_usrreq	= rip_usrreq, /* XXX */
d289 1
a289 2
#endif
#endif /*NGIF*/
@


1.76
log
@Move PRU_ATTACH out of the pr_usrreq functions into pr_attach.
Attach is quite a different thing to the other PRU functions and
this should make locking a bit simpler. This also removes the ugly
hack on how proto was passed to the attach function.
OK bluhm@@ and mpi@@ on a previous version
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.75 2017/03/10 07:29:25 jca Exp $	*/
a217 1
  .pr_output	= rip_output,
a227 1
  .pr_output	= rip_output,
a240 1
  .pr_output	= rip_output,
a252 1
  .pr_output	= rip_output,
a264 1
  .pr_output	= rip_output,
a275 1
  .pr_output	= rip_output,
a286 1
  .pr_output	= rip_output,
a299 1
  .pr_output	= rip_output,
a311 1
  .pr_output	= rip_output,
a326 1
  .pr_output	= rip_output,
a338 1
  .pr_output	= rip_output,
a350 1
  .pr_output	= rip_output,
a363 1
  .pr_output	= rip_output,
a374 1
  .pr_output	= rip_output,
a387 1
  .pr_output	= rip_output,
a400 1
  .pr_output	= rip_output,
a426 1
  .pr_output	= rip_output,
a438 1
  .pr_output	= rip_output,
@


1.75
log
@percpu counters for ip_ipip.c

ok bluhm@@ dhill@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.74 2017/03/02 08:58:24 mpi Exp $	*/
d194 1
d207 1
d220 2
a221 1
  .pr_usrreq	= rip_usrreq
d232 1
d246 1
d259 1
d270 2
a271 1
  .pr_usrreq	= rip_usrreq /* XXX */
d282 2
a283 1
  .pr_usrreq	= rip_usrreq
d296 1
d309 2
a310 1
  .pr_usrreq	= rip_usrreq /* XXX */
d323 1
d340 1
d353 1
d365 1
d379 1
d391 1
d405 1
d419 1
d431 1
d446 1
d459 1
@


1.74
log
@Convert domain declarations to C99 initializers.

ok dhill@@, florian@@, bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.73 2017/02/22 19:34:42 dhill Exp $	*/
d242 2
a243 1
  .pr_sysctl	= ipip_sysctl
d288 2
a289 1
  .pr_sysctl	= ipip_sysctl
@


1.73
log
@Use c99 struct initialization with protosw.

This makes it easier to grep for a member, such as .pr_usrreq, and know
which functions to review.

ok mpi@@ bluhm@@ jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.72 2017/01/29 19:58:47 bluhm Exp $	*/
d441 9
a449 5
struct domain inetdomain =
    { AF_INET, "internet", 0, 0, 0,
      inetsw, &inetsw[nitems(inetsw)],
      sizeof(struct sockaddr_in),
      offsetof(struct sockaddr_in, sin_addr), 32 };
@


1.72
log
@Change the IPv4 pr_input function to the way IPv6 is implemented,
to get rid of struct ip6protosw and some wrapper functions.  It is
more consistent to have less different structures.  The divert_input
functions cannot be called anyway, so remove them.
OK visa@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.71 2016/12/22 11:04:44 rzalamena Exp $	*/
d178 53
a230 24
{ 0,		&inetdomain,	0,		0,
  0,		0,		0,		0,
  0,
  ip_init,	0,		ip_slowtimo,	ip_drain,	ip_sysctl
},
{ SOCK_DGRAM,	&inetdomain,	IPPROTO_UDP,	PR_ATOMIC|PR_ADDR|PR_SPLICE,
  udp_input,	0,		udp_ctlinput,	ip_ctloutput,
  udp_usrreq,
  udp_init,	0,		0,		0,		udp_sysctl
},
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,	PR_CONNREQUIRED|PR_WANTRCVD|PR_ABRTACPTDIS|PR_SPLICE,
  tcp_input,	0,		tcp_ctlinput,	tcp_ctloutput,
  tcp_usrreq,
  tcp_init,	0,		tcp_slowtimo,	0,		tcp_sysctl
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
  rip_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
  icmp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  icmp_init,	0,		0,		0,		icmp_sysctl
d233 21
a253 9
{ SOCK_RAW,	&inetdomain,	IPPROTO_IPV4,	PR_ATOMIC|PR_ADDR,
  in_gif_input,	rip_output, 	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,		ipip_sysctl
},
{ SOCK_RAW,   &inetdomain,    IPPROTO_ETHERIP, PR_ATOMIC|PR_ADDR,
  etherip_input,  rip_output, 0,              rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,		etherip_sysctl
d256 8
a263 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_IPV6,	PR_ATOMIC|PR_ADDR,
  in_gif_input,	rip_output,	 0,		0,
  rip_usrreq,	/*XXX*/
  0,		0,		0,		0,
d267 8
a274 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_MPLS,	PR_ATOMIC|PR_ADDR,
  etherip_input,  rip_output,	 0,		0,
  rip_usrreq,
  0,		0,		0,		0,
d278 10
a287 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_IPIP,	PR_ATOMIC|PR_ADDR,
  ip4_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,		ipip_sysctl
d290 9
a298 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_IPV6,	PR_ATOMIC|PR_ADDR,
  ip4_input,	rip_output, 	0,		rip_ctloutput,
  rip_usrreq,	/*XXX*/
  0,		0,		0,		0,
d302 13
a314 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_IGMP,	PR_ATOMIC|PR_ADDR,
  igmp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  igmp_init,	igmp_fasttimo,	igmp_slowtimo,	0,		igmp_sysctl
d317 34
a350 14
{ SOCK_RAW,   &inetdomain,    IPPROTO_AH,     PR_ATOMIC|PR_ADDR,
  ah4_input,   rip_output,    ah4_ctlinput,   rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,		ah_sysctl
},
{ SOCK_RAW,   &inetdomain,    IPPROTO_ESP,    PR_ATOMIC|PR_ADDR,
  esp4_input,  rip_output,    esp4_ctlinput,  rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,		esp_sysctl
},
{ SOCK_RAW,   &inetdomain,    IPPROTO_IPCOMP, PR_ATOMIC|PR_ADDR,
  ipcomp4_input,  rip_output, 0,              rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,                ipcomp_sysctl
d354 21
a374 9
{ SOCK_RAW,     &inetdomain,    IPPROTO_GRE,    PR_ATOMIC|PR_ADDR,
  gre_input,    rip_output,     0,              rip_ctloutput,
  gre_usrreq,
  0,            0,              0,             0,		gre_sysctl
},
{ SOCK_RAW,     &inetdomain,    IPPROTO_MOBILE, PR_ATOMIC|PR_ADDR,
  gre_mobile_input,     rip_output,     0,              rip_ctloutput,
  rip_usrreq,
  0,            0,              0,              0,		ipmobile_sysctl
d378 10
a387 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_CARP,	PR_ATOMIC|PR_ADDR,
  carp_proto_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,		carp_sysctl
d391 10
a400 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_PFSYNC,	PR_ATOMIC|PR_ADDR,
  pfsync_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,		pfsync_sysctl
d404 9
a412 4
{ SOCK_RAW,	&inetdomain,	IPPROTO_DIVERT,	PR_ATOMIC|PR_ADDR,
  0,		0,		0,		rip_ctloutput,
  divert_usrreq,
  divert_init,	0,		0,		0,		divert_sysctl
d416 10
a425 4
{ SOCK_RAW,   &inetdomain,    IPPROTO_ETHERIP, PR_ATOMIC|PR_ADDR,
  ip_etherip_input,  rip_output, 0,              rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,		ip_etherip_sysctl
d428 11
a438 6
/* raw wildcard */
{ SOCK_RAW,	&inetdomain,	0,		PR_ATOMIC|PR_ADDR,
  rip_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  rip_init,	0,		0,		0,
},
@


1.71
log
@Remove PIM support from the multicast stack.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.70 2015/12/03 21:57:59 mpi Exp $	*/
d292 1
a292 1
  divert_input,	0,		0,		rip_ctloutput,
@


1.70
log
@Get rid of rt_mask() and stop allocating a "struct sockaddr" for every
route entry in ART.

rt_plen() now represents the prefix length of a route entry and should
be used instead.

For now use a "struct sockaddr_in6" to represent the mask when needed,
this should be then replaced by the prefix length and RTA_NETMASK only
used for compatibility with userland.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.69 2015/12/03 12:42:03 goda Exp $	*/
a121 3
#ifdef PIM
#include <netinet/pim_var.h>
#endif
a246 7
#ifdef PIM
{ SOCK_RAW,	&inetdomain,	IPPROTO_PIM,	PR_ATOMIC|PR_ADDR,
  pim_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,		pim_sysctl
},
#endif /* PIM */
@


1.69
log
@Implement etherip(4) driver

This commit is not removing the existing EtherIP part of gif(4) and
it keeps EtherIP of gif(4) working.

ok jbg@@ sthen@@ mpi@@ reyk@@ yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.68 2015/10/07 10:50:35 mpi Exp $	*/
d326 1
a326 1
      offsetof(struct sockaddr_in, sin_addr) };
@


1.68
log
@Initialize the routing table before domains.

The routing table is not an optional component of the network stack
and initializing it inside the "routing domain" requires some ugly
introspection in the domain interface.

This put the rtable* layer at the same level of the if* level.  These
two subsystem are organized around the two global data structure used
in the network stack:

- the global &ifnet list, to be used in process context only, and
- the routing table which can be read in interrupt context.

This change makes the rtable_* layer domain-aware and extends the
"struct domain" such that INET, INET6 and MPLS can specify the length
of the binary key used in lookups.  This allows us to keep, or move
towards, AF-free route and rtable layers.

While here stop the madness and pass the size of the maximum key length
in *byte* to rn_inithead0().

ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.67 2015/09/28 08:32:05 mpi Exp $	*/
d173 5
d307 7
@


1.67
log
@Merge gif(4)'s tentacles in a single file.

Tested by <mxb AT alumni DOT chalmers DOT se>.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.66 2015/09/04 08:43:39 mpi Exp $	*/
d313 2
a314 2
      rtable_attach,
      32 };
@


1.66
log
@Make every subsystem using a radix tree call rn_init() and pass the
length of the key as argument.

This way every consumer of the radix tree has a chance to explicitly
initialize the shared data structures and no longer rely on another
subsystem to do the initialization.

As a bonus ``dom_maxrtkey'' is no longer used an die.

ART kernels should now be fully usable because pf(4) and IPSEC properly
initialized the radix tree.

ok chris@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.65 2015/08/30 10:39:16 mpi Exp $	*/
d137 1
a137 1
#include <netinet/in_gif.h>
@


1.65
log
@Use a global table for domains instead of building a list at run time.

As a side effect there's no need to run if_attachdomain() after the
list of domains has been built.

ok claudio@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.64 2015/07/18 15:51:17 mpi Exp $	*/
d314 1
a314 1
      32, sizeof(struct sockaddr_in) };
@


1.64
log
@Abstract the routing table internals behind an rtable_* API.

Code abusing the radix internals for the routing table should now
includes <net/rtable.h> and only deal with "struct rtentry".

Code using a radix tree for another purpose can still include
<net/radix.h>.

Inputs from and ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.63 2014/12/05 15:50:04 mpi Exp $	*/
d312 1
a312 1
      inetsw, &inetsw[nitems(inetsw)], 0,
@


1.63
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.62 2014/11/20 14:51:42 krw Exp $	*/
d109 1
a109 4
#include <net/radix.h>
#ifndef SMALL_KERNEL
#include <net/radix_mpath.h>
#endif
d313 1
a313 5
#ifndef SMALL_KERNEL
      rn_mpath_inithead,
#else
      rn_inithead,
#endif
@


1.62
log
@Yet more #include de-duplication.

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.61 2014/07/22 11:06:10 mpi Exp $	*/
d107 1
@


1.61
log
@Fewer <netinet/in_systm.h> !
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.60 2013/12/17 02:41:07 matthew Exp $	*/
a119 3
#ifndef INET
#include <netinet/in.h>
#endif
@


1.60
log
@Change ip_output()'s non-optional arguments to be standard arguments
instead of variable arguments.

Allows stricter type checking by the compiler at call sites and also
saves a bit of code size on some platforms (e.g., ~200 bytes on
amd64).

ok mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.59 2013/04/24 10:17:08 mpi Exp $	*/
a113 1
#include <netinet/in_systm.h>
@


1.59
log
@Instead of having various extern declarations for protocol variables,
declare them once in their corresponding header file.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.58 2013/01/17 16:30:10 bluhm Exp $	*/
d183 1
a183 1
  0,		ip_output,	0,		0,
@


1.58
log
@Expand the socket splicing functionality from TCP to UDP.  Merge
the code relevant for UDP from sosend() and soreceive() into somove().
That allows the kernel to directly transfer the UDP data from one
socket to another.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.57 2012/10/15 11:11:32 mikeb Exp $	*/
d179 1
a179 1
extern	struct domain inetdomain;
@


1.57
log
@Another 'notyet' is being promoted to 'notever'.
An NSC HYPERchannel remnant from the CSRG times bites the dust.

ok deraadt, reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.56 2011/03/31 10:36:42 jasper Exp $	*/
d187 1
a187 1
{ SOCK_DGRAM,	&inetdomain,	IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
@


1.56
log
@- use nitems(); no binary change

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.55 2011/01/07 17:50:42 bluhm Exp $	*/
a324 22

#ifdef notyet /* XXXX */
#include "hy.h"
#if NHY > 0
/*
 * HYPERchannel protocol family: raw interface.
 */
int	rhy_output();
extern	struct domain hydomain;

struct protosw hysw[] = {
{ SOCK_RAW,	&hydomain,	0,		PR_ATOMIC|PR_ADDR,
  0,		rhy_output,	0,		0,
  rip_usrreq,
  0,		0,		0,		0,
},
};

struct domain hydomain =
    { AF_HYLINK, "hy", 0, 0, 0, hysw, &hysw[nitems(hysw)] };
#endif
#endif
@


1.55
log
@Add socket option SO_SPLICE to splice together two TCP sockets.
The data received on the source socket will automatically be sent
on the drain socket.  This allows to write relay daemons with zero
data copy.
ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.54 2010/08/29 09:24:38 gollo Exp $	*/
d318 1
a318 1
      inetsw, &inetsw[sizeof(inetsw)/sizeof(inetsw[0])], 0,
d344 1
a344 1
    { AF_HYLINK, "hy", 0, 0, 0, hysw, &hysw[sizeof (hysw)/sizeof(hysw[0])] };
@


1.54
log
@Fix kernel compiling with disabled IPSEC and enabled GIF/MPLS

OK: claudio@@, bob@@, sthen@@, thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.53 2010/05/11 09:36:07 claudio Exp $	*/
d192 1
a192 1
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,	PR_CONNREQUIRED|PR_WANTRCVD|PR_ABRTACPTDIS,
@


1.53
log
@Massiv cleanup of the gif(4) mess. Move encapsulation into gif_output()
where it is not necessary to guess protocols by looking at the first nibble.
in_gif_output() will encapsulate the packet but not send it. Because of
etherip support and the way the bridge works a minimal hack is needed in
gif_start() to ensure that the bridged packets are encapsulated as well.
This actually started with the idea to add MPLS support but that turned out
to be not as simple as in the gre(4) case.
Tested by myself (IP, IPv6, etherip, MPLS), sthen@@ (IP, IPv6), naddy (IPv6)
OK sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.52 2010/01/12 23:33:24 yasuoka Exp $	*/
a151 1
#include <netinet/ip_ether.h>
d154 1
@


1.52
log
@Add input and user protocol hook to handle GRE packets by pipex.

ok @@dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.51 2009/10/04 16:08:37 michele Exp $	*/
d213 5
d224 8
a231 1
#endif /* INET6 */
d244 1
a244 1
#endif /* INET6 */
a267 5
},
{ SOCK_RAW,   &inetdomain,    IPPROTO_ETHERIP, PR_ATOMIC|PR_ADDR,
  etherip_input,  rip_output, 0,              rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,		etherip_sysctl
@


1.51
log
@Add (again) support for divert sockets. They allow you to:

- queue packets from pf(4) to a userspace application
- reinject packets from the application into the kernel stack.

The divert socket can be bound to a special "divert port" and will
receive every packet diverted to that port by pf(4).

The pf syntax is pretty simple, e.g.:

pass on em0 inet proto tcp from any to any port 80 divert-packet port 1

A lot of discussion have happened since my last commit that resulted
in many changes and improvements.
I would *really* like to thank everyone who took part in the discussion
especially canacar@@ who spotted out which are the limitations of this approach.

OpenBSD divert(4) is meant to be compatible with software running on
top of FreeBSD's divert sockets even though they are pretty different and will
become even more with time.

discusses with many, but mainly reyk@@ canacar@@ deraadt@@ dlg@@ claudio@@ beck@@
tested by reyk@@ and myself
ok reyk@@ claudio@@ beck@@
manpage help and ok by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.50 2009/09/08 17:52:17 michele Exp $	*/
d271 1
a271 1
  rip_usrreq,
@


1.50
log
@I had not enough oks to commit this diff.
Sorry.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.48 2008/05/06 08:47:35 markus Exp $	*/
d174 5
d294 7
@


1.49
log
@Add support for divert sockets. They allow you to:

- queue packets from pf(4) to a userspace application
- reinject packets from the application into the kernel stack.

The divert socket can be bound to a special "divert port" and will
receive every packet diverted to that port by pf(4).

The pf syntax is pretty simple, e.g.:

pass on em0 inet proto tcp from any to any port 80 divert-packet port 8000

test, bugfix and ok by reyk@@
manpage help and ok by jmc@@
no objections from many others.
@
text
@a118 1
#include <netinet/ip_divert.h>
a288 5
{ SOCK_RAW,	&inetdomain,	IPPROTO_DIVERT,	PR_ATOMIC|PR_ADDR,
  divert_input,	0,		0,		0,
  divert_usrreq,
  divert_init,	0,		0,		0,		divert_sysctl
},
@


1.48
log
@remove tcp_drain code since it's not longer used; ok henning, feedback thib
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.47 2007/12/14 18:33:40 deraadt Exp $	*/
d119 1
d290 5
@


1.47
log
@add sysctl entry points into various network layers, in particular to
provide netstat(1) with data it needs;  ok claudio reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.46 2007/06/06 09:58:12 henning Exp $	*/
d190 1
a190 1
  tcp_init,	0,		tcp_slowtimo,	tcp_drain,	tcp_sysctl
@


1.46
log
@remove ifdef'd out ipx-in-ip registration
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.45 2005/12/23 13:01:23 claudio Exp $	*/
d232 1
a232 1
  igmp_init,	igmp_fasttimo,	igmp_slowtimo,	0,
d238 1
a238 1
  0,		0,		0,		0,
d286 1
a286 1
  0,		0,		0,		0,
@


1.45
log
@Remove unnecessary #ifdef MROUTING blocks. OK brad@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.44 2005/07/14 02:09:46 uwe Exp $	*/
a145 5
#ifdef IPXIP
#include <netipx/ipx.h>
#include <netipx/ipx_ip.h>
#endif /* IPXIP */

a240 7
#ifdef IPXIP
{ SOCK_RAW,	&inetdomain,	IPPROTO_IDP,	PR_ATOMIC|PR_ADDR,
  ipxip_input,	rip_output,	ipxip_ctlinput,	0,
  rip_usrreq,
  ipxipprotoinit,0,		0,		0,
},
#endif /* IPXIP */
@


1.44
log
@More netccitt and netns removals; OK henning, brad, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.43 2005/01/14 14:51:27 mcbride Exp $	*/
a149 4

#ifdef MROUTING
#include <netinet/ip_mroute.h>
#endif /* MROUTING */
@


1.43
log
@Add kernel support for Protocol Independant Multicast (PIM)
Information: http://netweb.usc.edu/pim/

From Pavlin Radoslavov <pavlin@@icir.org>

ok deraadt@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.42 2004/12/07 20:38:47 mcbride Exp $	*/
a145 5
#ifdef NSIP
#include <netns/ns_var.h>
#include <netns/idp_var.h>
#endif /* NSIP */

d149 1
a149 1
#endif /* NSIP */
d256 1
a256 8
#endif /* NSIP */
#ifdef NSIP
{ SOCK_RAW,	&inetdomain,	IPPROTO_IDP,	PR_ATOMIC|PR_ADDR,
  idpip_input,	rip_output,	nsip_ctlinput,	0,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif /* NSIP */
@


1.42
log
@Convert carp(4) to behave more like a regular interface, much in the same
style as vlan(4). carp interfaces no longer require the physical interface
to be on the same subnet as the carp interface, or even that the physical
interface has an adress at all, so CARP can now be used on /30 networks.

ok deraadt@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.41 2004/09/17 11:32:53 msf Exp $	*/
d128 3
d248 7
@


1.41
log
@Remove option EON from kernel and options(4)
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.40 2004/07/17 13:24:58 henning Exp $	*/
d295 1
a295 1
  carp_input,	rip_output,	0,		rip_ctloutput,
@


1.40
log
@netiso traces hide everywhere... millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.39 2004/04/25 02:48:04 itojun Exp $	*/
a152 4
#ifdef EON
#include <netiso/eonvar.h>
#endif /* EON */

a244 8
/* EON (ISO CLNL over IP) */
#ifdef EON
{ SOCK_RAW,	&inetdomain,	IPPROTO_EON,	0,
  eoninput,	0,		eonctlinput,		0,
  0,
  eonprotoinit,	0,		0,		0,
},
#endif /* EON */
@


1.39
log
@radix tree with multipath support.  from kame.  deraadt ok
user visible changes:
- you can add multiple routes with same key (route add A B then route add A C)
- you have to specify gateway address if there are multiple entries on the table
  (route delete A B, instead of route delete A)
kernel change:
- radix_node_head has an extra entry
- rnh_deladdr takes extra argument

TODO:
- actually take advantage of multipath (rtalloc -> rtalloc_mpath)
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.38 2003/12/15 07:11:30 mcbride Exp $	*/
a152 5
#ifdef TPIP
#include <netiso/tp_param.h>
#include <netiso/tp_var.h>
#endif /* TPIP */

a248 7
#ifdef TPIP
{ SOCK_SEQPACKET,&inetdomain,	IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD|PR_ABRTACPTDIS,
  tpip_input,	0,		tpip_ctlinput,	tp_ctloutput,
  tp_usrreq,
  tp_init,	0,		tp_slowtimo,	tp_drain,
},
#endif /* TPIP */
@


1.38
log
@Add initial support for pf state synchronization over the network.
Implemented as an in-kernel multicast IP protocol.

Turn it on like this:

# ifconfig pfsync0 up syncif fxp0

There is not yet any authentication on this protocol, so the syncif
must be on a trusted network. ie, a crossover cable between the two
firewalls.

NOTABLE CHANGES:
- A new index based on a unique (creatorid, stateid) tuple has been
  added to the state tree.
- Updates now appear on the pfsync(4) interface; multiple updates may
  be compressed into a single update.
- Applications which use bpf on pfsync(4) will need modification;
  packets on pfsync no longer contains regular pf_state structs,
  but pfsync_state structs which contain no pointers.

Much more to come.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.37 2003/10/17 21:04:58 mcbride Exp $	*/
d108 4
d342 6
a347 1
      rn_inithead, 32, sizeof(struct sockaddr_in) };
@


1.37
log
@Common Address Redundancy Protocol

Allows multiple hosts to share an IP address, providing high availability
and load balancing.

Based on code by mickey@@, with additional help from markus@@
and Marco_Pfatschbacher@@genua.de

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.36 2003/06/02 23:28:14 millert Exp $	*/
d184 6
d320 7
@


1.36
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.35 2002/06/09 16:26:10 itojun Exp $	*/
d179 5
d307 7
@


1.35
log
@whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.34 2002/03/01 22:29:29 provos Exp $	*/
d45 1
a45 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.34
log
@remove tcp_fasttimo and convert delayed acks to the timeout(9) API instead.
adapated from netbsd.  okay angelos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.33 2002/01/12 00:51:59 ericj Exp $	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
d66 1
a66 1
 * 
d70 1
a70 1
 * 
d85 1
a85 1
 * 
d97 1
a97 1
 * 
d315 1
a315 1
    { AF_INET, "internet", 0, 0, 0, 
@


1.33
log
@
add rediraccept and redirtimeout sysctl's.
rediraccept allows one to ignore ICMP_REDIRECT
redirtimeout sets a timeout on the routing entries pretaining to
ICMP_REDIRECT, this timeout is defaulted to 10 minutes. (same as ipv6)
From NetBSD.
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.32 2001/08/08 15:07:04 jjbg Exp $	*/
d199 1
a199 1
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain,	tcp_sysctl
@


1.32
log
@Remove IPCOMP option, it's now part of IPSEC option. You still need to
enable ipcomp via sysctl to use it. deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.31 2001/07/05 16:45:54 jjbg Exp $	*/
d209 1
a209 1
  0,		0,		0,		0,		icmp_sysctl
@


1.32.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.33 2002/01/12 00:51:59 ericj Exp $	*/
d209 1
a209 1
  icmp_init,	0,		0,		0,		icmp_sysctl
@


1.32.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.32.4.1 2002/01/31 22:55:45 niklas Exp $	*/
d199 1
a199 1
  tcp_init,	0,		tcp_slowtimo,	tcp_drain,	tcp_sysctl
@


1.32.4.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.32.4.2 2002/06/11 03:31:36 art Exp $	*/
d7 1
a7 1
 *
d19 1
a19 1
 *
d66 1
a66 1
 *
d70 1
a70 1
 *
d85 1
a85 1
 *
d97 1
a97 1
 *
d315 1
a315 1
    { AF_INET, "internet", 0, 0, 0,
@


1.31
log
@IPComp support. angelos@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.30 2001/06/24 18:22:47 provos Exp $	*/
a287 1
#ifdef IPCOMP
a292 1
#endif /* IPCOMP */
@


1.30
log
@path mtu discovery for ipsec.  on receiving a need fragment icmp match
against active tdb and store the ipsec header size corrected mtu
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.29 2001/06/08 03:53:45 angelos Exp $	*/
d288 7
@


1.29
log
@Cut down on include files.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.28 2001/06/05 02:31:35 deraadt Exp $	*/
d274 1
a274 1
  ah4_input,   rip_output,     0,              rip_ctloutput,
d279 1
a279 1
  esp4_input,  rip_output,     0,              rip_ctloutput,
@


1.28
log
@repair copyright notices for NRL & cmetz; cmetz
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.27 2001/05/30 02:12:27 deraadt Exp $	*/
a110 1
#include <net/radix.h>
a128 2
#include <netinet/tcp_fsm.h>
#include <netinet/tcp_seq.h>
a130 2
#include <netinet/tcpip.h>
#include <netinet/tcp_debug.h>
d133 1
@


1.27
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.26 2001/05/25 22:08:23 itojun Exp $	*/
d65 37
a101 1
 *	@@(#)in_proto.c	8.1 (Berkeley) 6/10/93
a102 12

/*
%%% portions-copyright-nrl-95
Portions of this software are Copyright 1995-1998 by Randall Atkinson,
Ronald Lee, Daniel McDonald, Bao Phan, and Chris Winters. All Rights
Reserved. All rights under this copyright have been assigned to the US
Naval Research Laboratory (NRL). The NRL Copyright Notice and License
Agreement Version 1.1 (January 17, 1995) applies to these portions of the
software.
You should have received a copy of the license with this software. If you
didn't get a copy, you may request one from <license@@ipv6.nrl.navy.mil>.
*/
@


1.26
log
@recover old acecept(2) behavior (no ECONNABORTED) for unix domain socket.
it is to be friendly with postfix daemon-to-daemon communication
(not 100% sure if which behavior is correct, specwise).  patch similar to netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.25 2000/01/27 08:09:08 angelos Exp $	*/
a144 5

#ifdef IPFILTER
void	iplinit __P((void));
#define ip_init	iplinit
#endif
@


1.25
log
@Merge "old" and "new" ESP and AH in two files (one for each).
Fix a couple of buglets with ingress flow deletion.
tcpdump on enc0 should now show all outgoing packets *before* being
processed, and all incoming packets *after* being processed.

Good to be in Canada (land of the free commits).
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.24 2000/01/21 03:15:05 angelos Exp $	*/
d181 1
a181 1
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,	PR_CONNREQUIRED|PR_WANTRCVD,
d229 1
a229 1
{ SOCK_SEQPACKET,&inetdomain,	IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD,
@


1.25.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.25 2000/01/27 08:09:08 angelos Exp $	*/
d65 1
a65 37
 *	@@(#)COPYRIGHT	1.1 (NRL) 17 January 1995
 * 
 * NRL grants permission for redistribution and use in source and binary
 * forms, with or without modification, of the software and documentation
 * created at NRL provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgements:
 * 	This product includes software developed by the University of
 * 	California, Berkeley and its contributors.
 * 	This product includes software developed at the Information
 * 	Technology Division, US Naval Research Laboratory.
 * 4. Neither the name of the NRL nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THE SOFTWARE PROVIDED BY NRL IS PROVIDED BY NRL AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL NRL OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation
 * are those of the authors and should not be interpreted as representing
 * official policies, either expressed or implied, of the US Naval
 * Research Laboratory (NRL).
d68 12
d87 1
d106 2
d110 2
a113 1

d146 5
d181 1
a181 1
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,	PR_CONNREQUIRED|PR_WANTRCVD|PR_ABRTACPTDIS,
d229 1
a229 1
{ SOCK_SEQPACKET,&inetdomain,	IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD|PR_ABRTACPTDIS,
d259 1
a259 1
  ah4_input,   rip_output,    ah4_ctlinput,   rip_ctloutput,
d264 1
a264 1
  esp4_input,  rip_output,    esp4_ctlinput,  rip_ctloutput,
@


1.25.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.25.2.1 2001/07/04 10:54:34 niklas Exp $	*/
a286 5
},
{ SOCK_RAW,   &inetdomain,    IPPROTO_IPCOMP, PR_ATOMIC|PR_ADDR,
  ipcomp4_input,  rip_output, 0,              rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0,                ipcomp_sysctl
@


1.25.2.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d199 1
a199 1
  tcp_init,	0,		tcp_slowtimo,	tcp_drain,	tcp_sysctl
d209 1
a209 1
  icmp_init,	0,		0,		0,		icmp_sysctl
@


1.25.2.4
log
@Sync the SMP branch with 3.3
@
text
@d7 1
a7 1
 *
d19 1
a19 1
 *
d66 1
a66 1
 *
d70 1
a70 1
 *
d85 1
a85 1
 *
d97 1
a97 1
 *
d315 1
a315 1
    { AF_INET, "internet", 0, 0, 0,
@


1.25.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.25.2.4 2003/03/28 00:06:54 niklas Exp $	*/
d45 5
a49 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.25.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a178 11
#include "carp.h"
#if NCARP > 0
#include <netinet/ip_carp.h>
#endif

#include "pfsync.h"
#if NPFSYNC > 0
#include <net/pfvar.h>
#include <net/if_pfsync.h>
#endif

a301 14
#if NCARP > 0
{ SOCK_RAW,	&inetdomain,	IPPROTO_CARP,	PR_ATOMIC|PR_ADDR,
  carp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,		carp_sysctl
},
#endif /* NCARP > 0 */
#if NPFSYNC > 0
{ SOCK_RAW,	&inetdomain,	IPPROTO_PFSYNC,	PR_ATOMIC|PR_ADDR,
  pfsync_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif /* NPFSYNC > 0 */
@


1.25.2.7
log
@Merge with the trunk
@
text
@a107 4
#include <net/radix.h>
#ifndef SMALL_KERNEL
#include <net/radix_mpath.h>
#endif
d338 1
a338 6
#ifndef SMALL_KERNEL
      rn_mpath_inithead,
#else
      rn_inithead,
#endif
      32, sizeof(struct sockaddr_in) };
@


1.24
log
@Rename the ip4_* routines to ipip_*, make it so GIF tunnels are not
affected by net.inet.ipip.allow (the sysctl formerly known as
net.inet.ip4.allow), rename the VIF ipip_input to ipip_mroute_input.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.23 2000/01/17 05:17:24 itojun Exp $	*/
a156 2
#include <netinet/ip_ah.h>
#include <netinet/ip_esp.h>
d259 1
a259 1
  ah_input,   rip_output,     0,              rip_ctloutput,
d264 1
a264 1
  esp_input,  rip_output,     0,              rip_ctloutput,
@


1.23
log
@fix "traceroute -P 41", outgoing side.  incoming side needs fix in
ip4_input().
Requested from: Niels Provos <provos@@citi.umich.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.22 2000/01/11 07:57:23 angelos Exp $	*/
d162 1
a162 1
#include <netinet/ip_ip4.h>
d202 1
a202 1
  0,		0,		0,		0,		ip4_sysctl
d215 1
a215 1
  0,		0,		0,		0,		ip4_sysctl
@


1.22
log
@The entry for IP4 should always be there.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.21 2000/01/07 21:38:01 angelos Exp $	*/
d201 1
a201 1
  0,	  
d206 2
a207 2
  in_gif_input,	0,	 	0,		0,
  0,	  
d214 1
a214 1
  rip_usrreq,	/* XXX */
d220 1
a220 1
  0,	  
@


1.21
log
@GRE/MobileIP input routine processing, from NetBSD (with a few
changes). Also, minor cleanup in in_proto.c
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.20 2000/01/02 09:06:11 angelos Exp $	*/
a211 1
#if defined(IPSEC) || defined(MROUTING)
a223 1
#endif /* IPSEC || MROUTING */
@


1.20
log
@Fix non-IPSEC kernel compilation (or part of it).
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.19 1999/12/21 11:11:16 itojun Exp $	*/
a117 8
#if 0 /*KAME IPSEC*/
#include <netinet6/ah.h>
#ifdef IPSEC_ESP
#include <netinet6/esp.h>
#endif
#include <netinet6/ipcomp.h>
#endif /* IPSEC */

d164 6
d277 11
a287 14
#endif
#if 0 /*NRL IPv6*/
/* IPv6 in IPv4 tunneled packets... */
{ SOCK_RAW,   &inetdomain,    IPPROTO_IPV6,   PR_ATOMIC|PR_ADDR,
  ip6_input,  rip_output,     ipv6_trans_ctlinput, rip_ctloutput,
  rip_usrreq,
  0,          0,              0,              0
},
#if 0
/* IPv4 in IPv4 tunneled packets... */
{ SOCK_RAW,   &inetdomain,    IPPROTO_IPV4,   PR_ATOMIC|PR_ADDR,
  ipv4_input, 0,              0,              0,
  0,
  0,          0,              0,              0
d289 1
a289 2
#endif /* 0 */
#endif /* defined(INET6) */
a303 18
#include "imp.h"
#if NIMP > 0
extern	struct domain impdomain;
int	rimp_output(), hostslowtimo();

struct protosw impsw[] = {
{ SOCK_RAW,	&impdomain,	0,		PR_ATOMIC|PR_ADDR,
  0,		rimp_output,	0,		0,
  rip_usrreq,
  0,		0,		hostslowtimo,	0,
},
};

struct domain impdomain =
    { AF_IMPLINK, "imp", 0, 0, 0,
      impsw, &impsw[sizeof (impsw)/sizeof(impsw[0])] };
#endif

@


1.19
log
@fix non-IPsec compilation. (too complex #ifdef...)
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.18 1999/12/21 09:00:52 itojun Exp $	*/
a151 3
#ifndef IPSEC
#include <netinet/ip_ip4.h>
#endif
a166 1
#include <netinet/ip_ip4.h>
d169 2
@


1.18
log
@reuse encapsulate/decapsulate routine in ip_ip4.c from gif interface
(outer=IPv4 case).  tested with (inner=IPv6, outer=IPv4) case.

BUG ALERT: in_gif_output() assumes about ipe4_output()'s behavior too much.
I mean, "tdb" is configured with certain knowledge about ipe4_output()'s
behavior.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.17 1999/12/09 03:46:59 angelos Exp $	*/
d152 3
d216 1
d229 1
@


1.17
log
@We can't use the gif interface input routine for IPIP/IP6IP
encapsulation.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.16 1999/12/08 06:50:19 itojun Exp $	*/
d199 1
a199 1
#if NGIF > 0 && !defined(IPSEC)
d201 1
a201 1
  in_gif_input,	0,	 	0,		0,
d203 1
a203 1
  0,		0,		0,		0,
a212 1
#if defined(IPSEC) || defined(MROUTING)
d218 1
a218 1
#if NGIF > 0 && defined(INET6)
d220 1
a220 1
  in_gif_input,	0,	 	0,		0,
d224 1
a224 2
#endif /* NGIF && INET6 */
#endif /* MROUTING || IPSEC */
@


1.16
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.15 1999/10/28 03:21:51 angelos Exp $	*/
d199 1
a199 1
#if NGIF > 0
d219 7
@


1.15
log
@Add IPPROTO_ETHERIP in the protocol switch; comment out INET6 IPv4-IPv4
handling that was re-using ipv4_input() instead of using ip4_input()
from netinet/ip_ip4.c
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.14 1999/04/20 20:06:11 niklas Exp $	*/
d5 29
d96 8
d118 13
d160 1
a160 1
#include <netinet6/ipv6_var.h>
d199 14
d220 1
d272 1
a272 1
#ifdef INET6
d275 1
a275 1
  ipv6_input, rip_output,     ipv6_trans_ctlinput, rip_ctloutput,
@


1.14
log
@Merge MROUTING and IPSEC wrt handling of IP-in-IP tunnelled packets.
Fix a panic case in the MROUTING code too.  Drop M_TUNNEL support, nothing
ever uses it.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.13 1999/04/11 19:41:36 niklas Exp $	*/
d118 1
d201 5
d214 1
d221 1
@


1.13
log
@Introduce net.inet.{ah,esp}.enable sysctl controls that are off by default.
If you are going to use either of AH or ESP or both, enable these in
/etc/sysctl.conf.  Also correct the IPSec debugging sysctl code, it is now
named net.inet.ip.encdebug.  Some corrected function signatures too.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.12 1999/04/09 23:28:45 niklas Exp $	*/
d148 1
a148 1
#if defined(IPSEC)
d154 1
a154 7
#elif defined(MROUTING)
{ SOCK_RAW,     &inetdomain,    IPPROTO_IPIP,   PR_ATOMIC|PR_ADDR,
  ipip_input,    rip_output,     0,              rip_ctloutput,
  rip_usrreq,   /* XXX */
  0,            0,              0,              0,
},
#endif /* MROUTING/IPSEC */
@


1.12
log
@The kernel parts of a sysctl that can switch on/off IP-in-IP (protocol 4)
support, when IPSEC is compiled in.  The default is disabled.  Turn on with:
sysctl -w net.inet.ip4.allow=1
***Only*** do this if you are really knowing what you do!
This control does not control the tunnel modes of ESP and AH.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.11 1999/02/24 22:32:58 angelos Exp $	*/
d115 2
a117 7

extern void ah_input __P((struct mbuf *, ...));
extern void esp_input __P((struct mbuf *, ...));
extern int ah_output __P((struct mbuf *, struct sockaddr_encap *,
    struct tdb *, struct mbuf **));
extern int esp_output __P((struct mbuf *, struct sockaddr_encap *,
    struct tdb *, struct mbuf **));
d199 1
a199 1
  0,          0,              0,              0,
d204 1
a204 1
  0,          0,              0,              0,
@


1.11
log
@Remove encap.h include; saner debugging printfs; fix buglets; work with
pfkeyv2.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.10 1999/01/08 01:00:34 deraadt Exp $	*/
d115 1
d157 1
a157 1
  0,		0,		0,		0,
@


1.10
log
@INET6 hooks; NRL/cmetz
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.9 1998/07/30 03:53:22 angelos Exp $	*/
a113 1
#include <net/encap.h>
@


1.9
log
@Forgot this one with the previous batch of commits; use ip4_input()
instead of ipip_input() whenever possible, it seems more stable.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.8 1998/03/18 10:16:25 provos Exp $	*/
d39 12
d109 4
d212 14
@


1.8
log
@Fix tunnel mode input processing (use ip4_input instead of ipe4_input),
fix some old code leftovers in ah_new_input (adjust to variable hash length),
avoid double ip encapsulation in tunnel mode. Problems reportd by
Petr Novak <petr@@internet.cz>.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.7 1997/02/20 01:07:46 deraadt Exp $	*/
d137 1
a137 1
#ifdef MROUTING
d139 1
a139 1
  ipip_input,	rip_output,	0,		rip_ctloutput,
d143 1
a143 1
#elif defined(IPSEC)
d145 1
a145 1
  ip4_input,    rip_output,     0,              rip_ctloutput,
@


1.7
log
@IPSEC package by John Ioannidis and Angelos D. Keromytis. Written in
Greece. From ftp.funet.fi:/pub/unix/security/net/ip/BSDipsec.tar.gz
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.5 1996/07/18 05:00:57 dm Exp $	*/
d145 1
a145 1
  ipe4_input,   rip_output,     0,              rip_ctloutput,
@


1.6
log
@Prototype & Stylistic fixes for high -W gcc levels
@
text
@d97 12
d143 7
a149 1
#endif /* MROUTING */
d184 12
@


1.5
log
@ipfilter 3.1.0
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.4 1996/04/24 06:00:43 mickey Exp $	*/
d93 1
a93 1
void	iplinit();
@


1.4
log
@Add IPXIP entry, to not to get cvs confused in the future.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.3 1996/03/04 08:21:53 niklas Exp $	*/
d91 5
@


1.3
log
@From NetBSD: Fix PR/2095 options MROUTING did not compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_proto.c,v 1.2 1996/03/03 22:30:33 niklas Exp $	*/
d74 5
d147 7
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: in_proto.c,v 1.13 1996/02/13 23:42:09 christos Exp $	*/
d84 1
a84 1
#include <netinet/mroute.h>
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: in_proto.c,v 1.12 1995/09/30 07:02:00 thorpej Exp $	*/
d70 2
a71 1
void	idpip_input(), nsip_ctlinput();
d75 2
a76 2
void	tpip_input(), tpip_ctlinput(), tp_init(), tp_slowtimo(), tp_drain();
int	tp_ctloutput(), tp_usrreq();
d80 1
a80 1
void	eoninput(), eonctlinput(), eonprotoinit();
d84 1
a84 1
void	ipip_input();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

