head	1.30;
access;
symbols
	OPENBSD_6_2:1.30.0.2
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.26.0.6
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.24.0.12
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.10
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.8
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.6
	OPENBSD_5_0:1.24.0.4
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.23.0.2
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.4
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.21.0.16
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.14
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.12
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.10
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.8
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.6
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.4
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.20.0.8
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.6
	OPENBSD_3_6_BASE:1.20
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.18.0.4
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.18
	UBC:1.14.0.4
	UBC_BASE:1.14
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.8
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.6
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2017.04.14.20.46.31;	author bluhm;	state Exp;
branches;
next	1.29;
commitid	00hB28wQPwG5Ysk0;

1.29
date	2017.01.29.19.58.47;	author bluhm;	state Exp;
branches;
next	1.28;
commitid	3e3CkrbYekyVOcxy;

1.28
date	2017.01.25.17.34.31;	author bluhm;	state Exp;
branches;
next	1.27;
commitid	pVtptbHA3yk4jSpN;

1.27
date	2016.03.07.19.33.26;	author mmcc;	state Exp;
branches;
next	1.26;
commitid	dH2OOqaSrGDRNHR8;

1.26
date	2014.07.13.13.57.56;	author mpi;	state Exp;
branches;
next	1.25;
commitid	FZhOOMqcipIfV1hC;

1.25
date	2013.08.08.14.29.29;	author mpi;	state Exp;
branches;
next	1.24;

1.24
date	2010.09.13.09.59.32;	author claudio;	state Exp;
branches;
next	1.23;

1.23
date	2010.07.08.20.20.11;	author claudio;	state Exp;
branches;
next	1.22;

1.22
date	2009.06.05.00.05.22;	author claudio;	state Exp;
branches;
next	1.21;

1.21
date	2005.07.31.03.30.55;	author pascoe;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.23.28.14;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.10.22.39.20;	author dhartmei;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.09.16.26.10;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.08.21.53.53;	author jasoni;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.27.11;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.12.00.51.59;	author ericj;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.04.05.45.34;	author angelos;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	2001.06.09.07.03.42;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	2000.12.12.20.55.52;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.11.19.12.22;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.10.15.16.02;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	99.01.07.09.20.17;	author deraadt;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	97.08.26.20.02.31;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.02.04.16.58.48;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	97.02.04.16.44.13;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.01.30.17.05.46;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.01.30.07.01.45;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.23.35.57;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.22.30.36;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.11;	author deraadt;	state Exp;
branches;
next	;

1.9.6.1
date	2001.05.14.22.40.11;	author niklas;	state Exp;
branches;
next	1.9.6.2;

1.9.6.2
date	2001.07.04.10.54.48;	author niklas;	state Exp;
branches;
next	1.9.6.3;

1.9.6.3
date	2001.10.31.03.29.03;	author nate;	state Exp;
branches;
next	1.9.6.4;

1.9.6.4
date	2002.03.06.02.15.07;	author niklas;	state Exp;
branches;
next	1.9.6.5;

1.9.6.5
date	2002.03.28.14.56.45;	author niklas;	state Exp;
branches;
next	1.9.6.6;

1.9.6.6
date	2003.03.28.00.06.54;	author niklas;	state Exp;
branches;
next	1.9.6.7;

1.9.6.7
date	2003.05.13.19.36.17;	author ho;	state Exp;
branches;
next	1.9.6.8;

1.9.6.8
date	2003.06.07.11.06.08;	author ho;	state Exp;
branches;
next	;

1.14.4.1
date	2002.01.31.22.55.45;	author niklas;	state Exp;
branches;
next	1.14.4.2;

1.14.4.2
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	1.14.4.3;

1.14.4.3
date	2002.10.29.00.36.47;	author art;	state Exp;
branches;
next	1.14.4.4;

1.14.4.4
date	2003.05.19.22.40.40;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Pass down the address family through the pr_input calls.  This
allows to simplify code used for both IPv4 and IPv6.
OK mikeb@@ deraadt@@
@
text
@/*	$OpenBSD: ip_icmp.h,v 1.29 2017/01/29 19:58:47 bluhm Exp $	*/
/*	$NetBSD: ip_icmp.h,v 1.10 1996/02/13 23:42:28 christos Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ip_icmp.h	8.1 (Berkeley) 6/10/93
 */

#ifndef _NETINET_IP_ICMP_H_
#define _NETINET_IP_ICMP_H_

/*
 * Interface Control Message Protocol Definitions.
 * Per RFC 792, September 1981.
 * RFC 950, August 1985. (Address Mask Request / Reply)
 * RFC 1256, September 1991. (Router Advertisement and Solicitation)
 * RFC 1108, November 1991. (Param Problem, Missing Req. Option)
 * RFC 1393, January 1993. (Traceroute)
 * RFC 1475, June 1993. (Datagram Conversion Error)
 * RFC 1812, June 1995. (adm prohib, host precedence, precedence cutoff)
 * RFC 2002, October 1996. (Mobility changes to Router Advertisement)
 */

/*
 * ICMP Router Advertisement data
 */
struct icmp_ra_addr {
	u_int32_t ira_addr;
	u_int32_t ira_preference;
};

/*
 * Structure of an icmp header.
 */
struct icmp {
	u_int8_t  icmp_type;		/* type of message, see below */
	u_int8_t  icmp_code;		/* type sub code */
	u_int16_t icmp_cksum;		/* ones complement cksum of struct */
	union {
		u_int8_t  ih_pptr;	/* ICMP_PARAMPROB */
		struct ih_exthdr {	/* RFC4884 extended header */
			u_int8_t  iex_pad;
			u_int8_t  iex_length;
		} ih_exthdr;
		struct in_addr ih_gwaddr;	/* ICMP_REDIRECT */
		struct ih_idseq {
			  u_int16_t icd_id;
			  u_int16_t icd_seq;
		} ih_idseq;
		int32_t   ih_void;

		/* ICMP_UNREACH_NEEDFRAG -- Path MTU Discovery (RFC1191) */
		struct ih_pmtu {
			  u_int16_t ipm_void;
			  u_int16_t ipm_nextmtu;
		} ih_pmtu;

		struct ih_rtradv {
			u_int8_t irt_num_addrs;
			u_int8_t irt_wpa;
			u_int16_t irt_lifetime;
		} ih_rtradv;
	} icmp_hun;
#define	icmp_pptr	  icmp_hun.ih_pptr
#define	icmp_length	  icmp_hun.ih_exthdr.iex_length
#define	icmp_gwaddr	  icmp_hun.ih_gwaddr
#define	icmp_id		  icmp_hun.ih_idseq.icd_id
#define	icmp_seq	  icmp_hun.ih_idseq.icd_seq
#define	icmp_void	  icmp_hun.ih_void
#define	icmp_pmvoid	  icmp_hun.ih_pmtu.ipm_void
#define	icmp_nextmtu	  icmp_hun.ih_pmtu.ipm_nextmtu
#define	icmp_num_addrs	  icmp_hun.ih_rtradv.irt_num_addrs
#define	icmp_wpa	  icmp_hun.ih_rtradv.irt_wpa
#define	icmp_lifetime	  icmp_hun.ih_rtradv.irt_lifetime
	union {
		struct id_ts {
			  u_int32_t its_otime;
			  u_int32_t its_rtime;
			  u_int32_t its_ttime;
		} id_ts;
		struct id_ip  {
			  struct ip idi_ip;
			  /* options and then 64 bits of data */
		} id_ip;
		u_int32_t id_mask;
		int8_t	  id_data[1];
	} icmp_dun;
#define	icmp_otime	  icmp_dun.id_ts.its_otime
#define	icmp_rtime	  icmp_dun.id_ts.its_rtime
#define	icmp_ttime	  icmp_dun.id_ts.its_ttime
#define	icmp_ip		  icmp_dun.id_ip.idi_ip
#define	icmp_mask	  icmp_dun.id_mask
#define	icmp_data	  icmp_dun.id_data
};

struct icmp_ext_hdr {
	u_int8_t  ieh_version;		/* only high nibble used */
	u_int8_t  ieh_res;		/* reserved, must be zero */
	u_int16_t ieh_cksum;		/* ones complement cksum of ext hdr */
};

#define ICMP_EXT_HDR_VERSION	0x20
#define ICMP_EXT_HDR_VMASK	0xf0
#define ICMP_EXT_OFFSET		128

struct icmp_ext_obj_hdr {
	u_int16_t ieo_length;		/* length of obj incl this header */
	u_int8_t  ieo_cnum;		/* class number */
	u_int8_t  ieo_ctype;		/* sub class type */
};

#define ICMP_EXT_MPLS		1
#define ICMP_EXT_IFINFO		2

/*
 * For IPv6 transition related ICMP errors.
 */
#define	ICMP_V6ADVLENMIN	(8 + sizeof(struct ip) + 40)
#define	ICMP_V6ADVLEN(p)	(8 + ((p)->icmp_ip.ip_hl << 2) + 40)

/*
 * Lower bounds on packet lengths for various types.
 * For the error advice packets must first insure that the
 * packet is large enough to contain the returned ip header.
 * Only then can we do the check to see if 64 bits of packet
 * data have been returned, since we need to check the returned
 * ip header length.
 */
#define	ICMP_MINLEN	8				/* abs minimum */
#define	ICMP_TSLEN	(8 + 3 * sizeof (u_int32_t))	/* timestamp */
#define	ICMP_MASKLEN	12				/* address mask */
#define	ICMP_ADVLENMIN	(8 + sizeof (struct ip) + 8)	/* min */
#define	ICMP_ADVLEN(p)	(8 + ((p)->icmp_ip.ip_hl << 2) + 8)
	/* N.B.: must separately check that ip_hl >= 5 */

/*
 * Definition of type and code field values.
 *	https://www.iana.org/assignments/icmp-parameters
 */
#define	ICMP_ECHOREPLY		0		/* echo reply */
#define	ICMP_UNREACH		3		/* dest unreachable, codes: */
#define		ICMP_UNREACH_NET		0	/* bad net */
#define		ICMP_UNREACH_HOST		1	/* bad host */
#define		ICMP_UNREACH_PROTOCOL		2	/* bad protocol */
#define		ICMP_UNREACH_PORT		3	/* bad port */
#define		ICMP_UNREACH_NEEDFRAG		4	/* IP_DF caused drop */
#define		ICMP_UNREACH_SRCFAIL		5	/* src route failed */
#define		ICMP_UNREACH_NET_UNKNOWN	6	/* unknown net */
#define		ICMP_UNREACH_HOST_UNKNOWN	7	/* unknown host */
#define		ICMP_UNREACH_ISOLATED		8	/* src host isolated */
#define		ICMP_UNREACH_NET_PROHIB		9	/* for crypto devs */
#define		ICMP_UNREACH_HOST_PROHIB	10	/* ditto */
#define		ICMP_UNREACH_TOSNET		11	/* bad tos for net */
#define		ICMP_UNREACH_TOSHOST		12	/* bad tos for host */
#define		ICMP_UNREACH_FILTER_PROHIB	13	/* prohibited access */
#define		ICMP_UNREACH_HOST_PRECEDENCE	14	/* precedence violat'n*/
#define		ICMP_UNREACH_PRECEDENCE_CUTOFF	15	/* precedence cutoff */
#define	ICMP_SOURCEQUENCH	4		/* packet lost, slow down */
#define	ICMP_REDIRECT		5		/* shorter route, codes: */
#define		ICMP_REDIRECT_NET	0		/* for network */
#define		ICMP_REDIRECT_HOST	1		/* for host */
#define		ICMP_REDIRECT_TOSNET	2		/* for tos and net */
#define		ICMP_REDIRECT_TOSHOST	3		/* for tos and host */
#define	ICMP_ALTHOSTADDR	6		/* alternate host address */
#define	ICMP_ECHO		8		/* echo service */
#define	ICMP_ROUTERADVERT	9		/* router advertisement */
#define		ICMP_ROUTERADVERT_NORMAL		0	/* normal advertisement */
#define		ICMP_ROUTERADVERT_NOROUTE_COMMON	16	/* selective routing */
#define	ICMP_ROUTERSOLICIT	10		/* router solicitation */
#define	ICMP_TIMXCEED		11		/* time exceeded, code: */
#define		ICMP_TIMXCEED_INTRANS	0		/* ttl==0 in transit */
#define		ICMP_TIMXCEED_REASS	1		/* ttl==0 in reass */
#define	ICMP_PARAMPROB		12		/* ip header bad */
#define		ICMP_PARAMPROB_ERRATPTR 0		/* req. opt. absent */
#define		ICMP_PARAMPROB_OPTABSENT 1		/* req. opt. absent */
#define		ICMP_PARAMPROB_LENGTH	2		/* bad length */
#define	ICMP_TSTAMP		13		/* timestamp request */
#define	ICMP_TSTAMPREPLY	14		/* timestamp reply */
#define	ICMP_IREQ		15		/* information request */
#define	ICMP_IREQREPLY		16		/* information reply */
#define	ICMP_MASKREQ		17		/* address mask request */
#define	ICMP_MASKREPLY		18		/* address mask reply */
#define	ICMP_TRACEROUTE		30		/* traceroute */
#define	ICMP_DATACONVERR	31		/* data conversion error */
#define	ICMP_MOBILE_REDIRECT	32		/* mobile host redirect */
#define	ICMP_IPV6_WHEREAREYOU	33		/* IPv6 where-are-you */
#define	ICMP_IPV6_IAMHERE	34		/* IPv6 i-am-here */
#define	ICMP_MOBILE_REGREQUEST	35		/* mobile registration req */
#define	ICMP_MOBILE_REGREPLY	36		/* mobile registration reply */
#define	ICMP_SKIP		39		/* SKIP */
#define	ICMP_PHOTURIS		40		/* Photuris */
#define		ICMP_PHOTURIS_UNKNOWN_INDEX	1	/* unknown sec index */
#define		ICMP_PHOTURIS_AUTH_FAILED	2	/* auth failed */
#define		ICMP_PHOTURIS_DECRYPT_FAILED	3	/* decrypt failed */

#define	ICMP_MAXTYPE		40

#define	ICMP_INFOTYPE(type) \
	((type) == ICMP_ECHOREPLY || (type) == ICMP_ECHO || \
	(type) == ICMP_ROUTERADVERT || (type) == ICMP_ROUTERSOLICIT || \
	(type) == ICMP_TSTAMP || (type) == ICMP_TSTAMPREPLY || \
	(type) == ICMP_IREQ || (type) == ICMP_IREQREPLY || \
	(type) == ICMP_MASKREQ || (type) == ICMP_MASKREPLY)

#ifdef _KERNEL
struct mbuf *
	icmp_do_error(struct mbuf *, int, int, u_int32_t, int);
void	icmp_error(struct mbuf *, int, int, u_int32_t, int);
int	icmp_input(struct mbuf **, int *, int, int);
void	icmp_init(void);
int	icmp_reflect(struct mbuf *, struct mbuf **, struct in_ifaddr *);
void	icmp_send(struct mbuf *, struct mbuf *);
int	icmp_sysctl(int *, u_int, void *, size_t *, void *, size_t);
struct rtentry *
	icmp_mtudisc_clone(struct in_addr, u_int);
void	icmp_mtudisc(struct icmp *, u_int);
int	icmp_do_exthdr(struct mbuf *, u_int16_t, u_int8_t, void *, size_t);
#endif /* _KERNEL */
#endif /* _NETINET_IP_ICMP_H_ */
@


1.29
log
@Change the IPv4 pr_input function to the way IPv6 is implemented,
to get rid of struct ip6protosw and some wrapper functions.  It is
more consistent to have less different structures.  The divert_input
functions cannot be called anyway, so remove them.
OK visa@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.28 2017/01/25 17:34:31 bluhm Exp $	*/
d235 1
a235 1
int	icmp_input(struct mbuf **, int *, int);
@


1.28
log
@Since raw_input() and route_input() are gone from pr_input, we can
make the variable parameters of the protocol input functions fixed.
Also add the proto to make it similar to IPv6.
OK mpi@@ guenther@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.27 2016/03/07 19:33:26 mmcc Exp $	*/
d235 1
a235 1
void	icmp_input(struct mbuf *, int, int);
@


1.27
log
@http -> https for IETF/IANA URLs in comments
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.26 2014/07/13 13:57:56 mpi Exp $	*/
d235 1
a235 1
void	icmp_input(struct mbuf *, ...);
@


1.26
log
@Stop using old n_time, n_long and n_short types in netinet headers.

ok deraadt@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.25 2013/08/08 14:29:29 mpi Exp $	*/
d164 1
a164 1
 *	http://www.iana.org/assignments/icmp-parameters
@


1.25
log
@Change MTU discovery functions to not abuse the global icmpsrc variable
to pass the destination address of the route to clone.

ok markus@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.24 2010/09/13 09:59:32 claudio Exp $	*/
d54 2
a55 2
	n_long ira_addr;
	n_long ira_preference;
d73 2
a74 2
			  n_short icd_id;
			  n_short icd_seq;
d80 2
a81 2
			  n_short ipm_void;
			  n_short ipm_nextmtu;
d87 1
a87 1
			n_short irt_lifetime;
d103 3
a105 3
			  n_time its_otime;
			  n_time its_rtime;
			  n_time its_ttime;
d156 1
a156 1
#define	ICMP_TSLEN	(8 + 3 * sizeof (n_time))	/* timestamp */
d233 2
a234 2
	icmp_do_error(struct mbuf *, int, int, n_long, int);
void	icmp_error(struct mbuf *, int, int, n_long, int);
@


1.24
log
@Change icmp_reflect() so that it does not call icmp_send directly. This
allows other users (like MPLS) use this function instead of rolling a own
version. Implement icmp_do_exthdr() to attach an RFC 4884 extension header
to an ICMP error produced by icmp_do_error().
"best to get it in." deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.23 2010/07/08 20:20:11 claudio Exp $	*/
d241 1
a241 1
	icmp_mtudisc_clone(struct sockaddr *, u_int);
@


1.23
log
@Add definitions for ICMP extended headers available for some ICMP messages
like time exceeded messages. This will allow to add additional information
to those messges like the incomming MPLS label.
OK deraadt@@, dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.22 2009/06/05 00:05:22 claudio Exp $	*/
d237 1
a237 1
void	icmp_reflect(struct mbuf *);
d243 1
@


1.22
log
@Initial support for routing domains. This allows to bind interfaces to
alternate routing table and separate them from other interfaces in distinct
routing tables. The same network can now be used in any doamin at the same
time without causing conflicts.
This diff is mostly mechanical and adds the necessary rdomain checks accross
net and netinet. L2 and IPv4 are mostly covered still missing pf and IPv6.
input and tested by jsg@@, phessler@@ and reyk@@. "put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.21 2005/07/31 03:30:55 pascoe Exp $	*/
d66 5
a70 1
		u_int8_t  ih_pptr;		/* ICMP_PARAMPROB */
d91 1
d121 19
@


1.21
log
@Change the API for icmp_do_error so that it takes the mtu directly, rather
than a pointer to struct ifnet containing it.

Saves a 448 byte stack allocation in ip_forward which previously faked up
a struct ifnet just for this purpose.

idea ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.20 2003/06/02 23:28:14 millert Exp $	*/
d217 2
a218 2
	icmp_mtudisc_clone(struct sockaddr *);
void	icmp_mtudisc(struct icmp *);
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.19 2003/05/10 22:39:20 dhartmei Exp $	*/
d209 2
a210 2
	icmp_do_error(struct mbuf *, int, int, n_long, struct ifnet *);
void	icmp_error(struct mbuf *, int, int, n_long, struct ifnet *);
@


1.19
log
@"enought to" -> "enough to" comment typo
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.18 2002/06/09 16:26:10 itojun Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.17 2002/06/08 21:53:53 jasoni Exp $	*/
d130 1
a130 1
 * packet is large enought to contain the returned ip header.
@


1.17
log
@Break up icmp_error() so we can have the icmp error mbuf returned
instead of it being sent to ip_output().
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.16 2002/03/14 01:27:11 millert Exp $	*/
d80 1
a80 1
			  n_short ipm_void;    
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.15 2002/01/12 00:51:59 ericj Exp $	*/
d212 2
@


1.15
log
@
add rediraccept and redirtimeout sysctl's.
rediraccept allows one to ignore ICMP_REDIRECT
redirtimeout sets a timeout on the routing entries pretaining to
ICMP_REDIRECT, this timeout is defaulted to 10 minutes. (same as ipv6)
From NetBSD.
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.14 2001/07/04 05:45:34 angelos Exp $	*/
d212 6
a217 6
void	icmp_error __P((struct mbuf *, int, int, n_long, struct ifnet *));
void	icmp_input __P((struct mbuf *, ...));
void	icmp_init __P((void));
void	icmp_reflect __P((struct mbuf *));
void	icmp_send __P((struct mbuf *, struct mbuf *));
int	icmp_sysctl __P((int *, u_int, void *, size_t *, void *, size_t));
d220 1
a220 1
void	icmp_mtudisc __P((struct icmp *));
@


1.14
log
@Update with codes, URL, RFCs, from jason@@Ackley.NET, closes PR 1919
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.13 2001/06/09 07:03:42 angelos Exp $	*/
d214 1
@


1.14.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.15 2002/01/12 00:51:59 ericj Exp $	*/
a213 1
void	icmp_init __P((void));
@


1.14.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.14.4.1 2002/01/31 22:55:45 niklas Exp $	*/
d212 6
a217 8
struct mbuf *
	icmp_do_error(struct mbuf *, int, int, n_long, struct ifnet *);
void	icmp_error(struct mbuf *, int, int, n_long, struct ifnet *);
void	icmp_input(struct mbuf *, ...);
void	icmp_init(void);
void	icmp_reflect(struct mbuf *);
void	icmp_send(struct mbuf *, struct mbuf *);
int	icmp_sysctl(int *, u_int, void *, size_t *, void *, size_t);
d220 1
a220 1
void	icmp_mtudisc(struct icmp *);
@


1.14.4.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.14.4.2 2002/06/11 03:31:36 art Exp $	*/
d80 1
a80 1
			  n_short ipm_void;
@


1.14.4.4
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d130 1
a130 1
 * packet is large enough to contain the returned ip header.
@


1.13
log
@Inclusion protection.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.12 2000/12/12 20:55:52 mickey Exp $	*/
d45 7
d144 1
a144 1
 *	http://www.isi.edu/in-notes/iana/assignments/icmp-parameters
d173 2
d189 12
d202 1
a202 1
#define	ICMP_MAXTYPE		18
@


1.12
log
@a few more icmp types/codes; itojun@@ ok (awhile ago ;)
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.11 2000/12/11 19:12:22 provos Exp $	*/
d39 3
d199 2
a200 1
#endif
@


1.11
log
@turn off path mtu when icmp needfrag messages get blocked, okay itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.10 2000/10/10 15:16:02 provos Exp $	*/
d134 1
d160 1
d168 1
d170 1
@


1.10
log
@verify payload of the icmp need fragment message at the tcp layer. okay itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.9 1999/01/07 09:20:17 deraadt Exp $	*/
d189 2
@


1.9
log
@add ipv6 transition related ICMP errors
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.8 1997/08/26 20:02:31 deraadt Exp $	*/
d189 1
@


1.9.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.12 2000/12/12 20:55:52 mickey Exp $	*/
a133 1
 *	http://www.isi.edu/in-notes/iana/assignments/icmp-parameters
a158 1
#define	ICMP_ALTHOSTADDR	6		/* alternate host address */
a165 1
#define		ICMP_PARAMPROB_ERRATPTR 0		/* req. opt. absent */
a166 1
#define		ICMP_PARAMPROB_LENGTH	2		/* bad length */
a188 3
struct rtentry *
	icmp_mtudisc_clone(struct sockaddr *);
void	icmp_mtudisc __P((struct icmp *));
@


1.9.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.9.6.1 2001/05/14 22:40:11 niklas Exp $	*/
a38 3
#ifndef _NETINET_IP_ICMP_H_
#define _NETINET_IP_ICMP_H_

d196 1
a196 2
#endif /* _KERNEL */
#endif /* _NETINET_IP_ICMP_H_ */
@


1.9.6.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.9.6.2 2001/07/04 10:54:48 niklas Exp $	*/
a44 7
 * RFC 950, August 1985. (Address Mask Request / Reply)
 * RFC 1256, September 1991. (Router Advertisement and Solicitation)
 * RFC 1108, November 1991. (Param Problem, Missing Req. Option)
 * RFC 1393, January 1993. (Traceroute)
 * RFC 1475, June 1993. (Datagram Conversion Error)
 * RFC 1812, June 1995. (adm prohib, host precedence, precedence cutoff)
 * RFC 2002, October 1996. (Mobility changes to Router Advertisement)
d137 1
a137 1
 *	http://www.iana.org/assignments/icmp-parameters
a165 2
#define		ICMP_ROUTERADVERT_NORMAL		0	/* normal advertisement */
#define		ICMP_ROUTERADVERT_NOROUTE_COMMON	16	/* selective routing */
a179 12
#define	ICMP_TRACEROUTE		30		/* traceroute */
#define	ICMP_DATACONVERR	31		/* data conversion error */
#define	ICMP_MOBILE_REDIRECT	32		/* mobile host redirect */
#define	ICMP_IPV6_WHEREAREYOU	33		/* IPv6 where-are-you */
#define	ICMP_IPV6_IAMHERE	34		/* IPv6 i-am-here */
#define	ICMP_MOBILE_REGREQUEST	35		/* mobile registration req */
#define	ICMP_MOBILE_REGREPLY	36		/* mobile registration reply */
#define	ICMP_SKIP		39		/* SKIP */
#define	ICMP_PHOTURIS		40		/* Photuris */
#define		ICMP_PHOTURIS_UNKNOWN_INDEX	1	/* unknown sec index */
#define		ICMP_PHOTURIS_AUTH_FAILED	2	/* auth failed */
#define		ICMP_PHOTURIS_DECRYPT_FAILED	3	/* decrypt failed */
d181 1
a181 1
#define	ICMP_MAXTYPE		40
@


1.9.6.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a213 1
void	icmp_init __P((void));
@


1.9.6.5
log
@Merge in -current from roughly a week ago
@
text
@d212 6
a217 6
void	icmp_error(struct mbuf *, int, int, n_long, struct ifnet *);
void	icmp_input(struct mbuf *, ...);
void	icmp_init(void);
void	icmp_reflect(struct mbuf *);
void	icmp_send(struct mbuf *, struct mbuf *);
int	icmp_sysctl(int *, u_int, void *, size_t *, void *, size_t);
d220 1
a220 1
void	icmp_mtudisc(struct icmp *);
@


1.9.6.6
log
@Sync the SMP branch with 3.3
@
text
@d80 1
a80 1
			  n_short ipm_void;
a211 2
struct mbuf *
	icmp_do_error(struct mbuf *, int, int, n_long, struct ifnet *);
@


1.9.6.7
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.9.6.6 2003/03/28 00:06:54 niklas Exp $	*/
d130 1
a130 1
 * packet is large enough to contain the returned ip header.
@


1.9.6.8
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.9.6.7 2003/05/13 19:36:17 ho Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.7 1997/02/04 16:58:48 kstailey Exp $	*/
d110 6
@


1.7
log
@changed comment to reflect RFC-1812
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.6 1997/02/04 16:44:13 kstailey Exp $	*/
d137 2
a138 2
#define		ICMP_UNREACH_NET_UNKNOWN 	6	/* unknown net */
#define		ICMP_UNREACH_HOST_UNKNOWN 	7	/* unknown host */
d141 1
a141 1
#define		ICMP_UNREACH_HOST_PROHIB 	10	/* ditto */
d145 2
a146 2
#define		ICMP_UNREACH_HOST_PRECEDENCE 	14	/* precedence violat'n*/
#define		ICMP_UNREACH_PRECEDENCE_CUTOFF 	15	/* precedence cutoff */
@


1.6
log
@Changed ICMP "unreachable" code #defines to match the ones in
tcpdump/print-icmp.c since they were in BSD first.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.5 1997/01/30 17:05:46 kstailey Exp $	*/
d140 1
a140 1
#define		ICMP_UNREACH_NET_PROHIB		9	/* prohibited access */
@


1.5
log
@Added ICMP Destination Unreachable codes from RFC-1812:

   14 = Host Precedence Violation.  Sent by the first hop router to a
        host to indicate that a requested precedence is not permitted
        for the particular combination of source/destination host or

   15 = Precedence cutoff in effect.  The network operators have imposed
        a minimum level of precedence required for operation, the
        datagram was sent with a precedence below this level;
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.4 1997/01/30 07:01:45 kstailey Exp $	*/
d131 16
a146 16
#define		ICMP_UNREACH_NET	0		/* bad net */
#define		ICMP_UNREACH_HOST	1		/* bad host */
#define		ICMP_UNREACH_PROTOCOL	2		/* bad protocol */
#define		ICMP_UNREACH_PORT	3		/* bad port */
#define		ICMP_UNREACH_NEEDFRAG	4		/* IP_DF caused drop */
#define		ICMP_UNREACH_SRCFAIL	5		/* src route failed */
#define		ICMP_UNREACH_NET_UNKNOWN 6		/* unknown net */
#define		ICMP_UNREACH_HOST_UNKNOWN 7		/* unknown host */
#define		ICMP_UNREACH_ISOLATED	8		/* src host isolated */
#define		ICMP_UNREACH_NET_PROHIB	9		/* prohibited access */
#define		ICMP_UNREACH_HOST_PROHIB 10		/* ditto */
#define		ICMP_UNREACH_TOSNET	11		/* bad tos for net */
#define		ICMP_UNREACH_TOSHOST	12		/* bad tos for host */
#define		ICMP_UNREACH_ADM_PROHIB	13		/* prohibited access */
#define		ICMP_UNREACH_PREC_VIOLATN 14		/* precedence violat'n*/
#define		ICMP_UNREACH_PREC_CUTOFF 15		/* precedence cutoff */
@


1.4
log
@added #define for Communication Administratively Prohibited
as in RFC-1812 Section 5.2.7.1 Destination Unreachable
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.3 1996/08/02 23:35:57 tholo Exp $	*/
d145 2
@


1.3
log
@ICMP Router Discovery definitions; from FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_icmp.h,v 1.2 1996/03/03 22:30:36 niklas Exp $	*/
d144 1
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 8
d73 6
d87 3
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: ip_icmp.h,v 1.9 1995/04/17 05:32:57 cgd Exp $	*/
d159 1
a159 1
void	icmp_input __P((struct mbuf *, int));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
