head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2002.12.16.09.18.05;	author kjc;	state dead;
branches;
next	1.4;

1.4
date	2002.11.26.01.03.34;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.16.13.05.24;	author kjc;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.08.09.14.32.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.05.28.35;	author kjc;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.02.43.21;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.27.22.28.25;	author niklas;	state dead;
branches;
next	;

1.3.4.1
date	2003.05.19.21.50.54;	author tedu;	state dead;
branches;
next	;


desc
@@


1.5
log
@switchover to pf-based altq.
 - remove files which are no longer used, or we don't have plans to support
   in pf in the near future.
 - remove altq ioctl related stuff.
 - convert the PRIQ, HFSC and RIO modules to pf-based altq.
   (these are not enabled in GENERIC, CDNR is not converted yet.)
@
text
@/*	$OpenBSD: altq_localq.c,v 1.4 2002/11/26 01:03:34 henning Exp $	*/
/*	$KAME: altq_localq.c,v 1.4 2001/08/16 11:28:25 kjc Exp $	*/
/*
 * a skeleton file for implementing a new queueing discipline.
 * this file is in the public domain.
 */

#include <sys/param.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/sockio.h>

#include <net/if.h>
#include <netinet/in.h>

#include <altq/altq.h>
#include <altq/altq_conf.h>

/*
 * localq device interface
 */
altqdev_decl(localq);

int
localqopen(dev, flag, fmt, p)
	dev_t dev;
	int flag, fmt;
	struct proc *p;
{
	/* everything will be done when the queueing scheme is attached. */
	return 0;
}

int
localqclose(dev, flag, fmt, p)
	dev_t dev;
	int flag, fmt;
	struct proc *p;
{
	int error = 0;

	return error;
}

int
localqioctl(dev, cmd, addr, flag, p)
	dev_t dev;
	ioctlcmd_t cmd;
	caddr_t addr;
	int flag;
	struct proc *p;
{
	int error = 0;

	return error;
}

#ifdef KLD_MODULE

static struct altqsw localq_sw =
	{"localq", localqopen, localqclose, localqioctl};

ALTQ_MODULE(altq_localq, ALTQT_LOCALQ, &localq_sw);

#endif /* KLD_MODULE */
@


1.4
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_localq.c,v 1.3 2001/08/16 13:05:24 kjc Exp $	*/
@


1.3
log
@state that this skeleton file is in the public domain.
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_localq.c,v 1.2 2001/08/09 14:32:59 deraadt Exp $	*/
d54 1
a54 1
	
@


1.3.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_localq.c,v 1.3 2001/08/16 13:05:24 kjc Exp $	*/
@


1.2
log
@change a maze of altq options into just "altq" for the base+red+cbq, and
then altq_* for each of the other * experimental options.  and.. enable
it by default in GENERIC.
@
text
@d1 6
a6 2
/*	$OpenBSD: altq_localq.c,v 1.1 2001/06/27 05:28:35 kjc Exp $	*/
/*	$KAME: altq_localq.c,v 1.3 2000/10/18 09:15:23 kjc Exp $	*/
@


1.1
log
@import ALTQ, alternate queueing support, from KAME.
ALTQ allows to switch various queueing disciplines on output network
interfaces.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a3 6

#if defined(__FreeBSD__) || defined(__NetBSD__)
#include "opt_altq.h"
#endif /* __FreeBSD__ || __NetBSD__ */
#ifdef ALTQ_LOCALQ  /* localq is enabled by ALTQ_LOCALQ option in opt_altq.h */

a61 2

#endif /* ALTQ_LOCALQ */
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 8
a8 6
/*	$OpenBSD: altq_localq.c,v 1.1 2001/06/27 05:28:35 kjc Exp $	*/
/*	$KAME: altq_localq.c,v 1.4 2001/08/16 11:28:25 kjc Exp $	*/
/*
 * a skeleton file for implementing a new queueing discipline.
 * this file is in the public domain.
 */
d68 2
@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_localq.c,v 1.1.2.1 2001/10/31 02:43:21 nate Exp $	*/
@


