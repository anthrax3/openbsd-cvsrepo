head	1.7;
access;
symbols
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2011.07.03.22.39.12;	author tedu;	state dead;
branches;
next	1.6;

1.6
date	2003.03.13.16.33.46;	author kjc;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.16.17.27.20;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.16.09.18.05;	author kjc;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.01.03.34;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.05.28.36;	author kjc;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;

1.1.2.1
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.27.22.28.25;	author niklas;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.27.42;	author art;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2003.05.19.21.50.54;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@cdnr and rio disciplines are not being used or supported, clear a path
for new code.  ok henning
@
text
@/*	$OpenBSD: altq_rio.h,v 1.6 2003/03/13 16:33:46 kjc Exp $	*/
/*	$KAME: altq_rio.h,v 1.5 2000/12/14 08:12:46 thorpej Exp $	*/

/*
 * Copyright (C) 1998-2000
 *	Sony Computer Science Laboratories Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SONY CSL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL SONY CSL OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _ALTQ_ALTQ_RIO_H_
#define	_ALTQ_ALTQ_RIO_H_

#include <altq/altq_classq.h>

/*
 * RIO: RED with IN/OUT bit
 * (extended to support more than 2 drop precedence values)
 */
#define	RIO_NDROPPREC	3	/* number of drop precedence values */

struct rio_interface {
	char	rio_ifname[IFNAMSIZ];
};

struct rio_stats {
	struct rio_interface	iface;
	int			q_len[RIO_NDROPPREC];
	struct redstats		q_stats[RIO_NDROPPREC];

	/* static red parameters */
	int			q_limit;
	int			weight;
	int			flags;
	struct redparams	q_params[RIO_NDROPPREC];
};

struct rio_conf {
	struct rio_interface	iface;
	struct redparams	q_params[RIO_NDROPPREC];
	int			rio_weight;	/* weight for EWMA */
	int			rio_limit;	/* max queue length */
	int			rio_pkttime;	/* avg packet time in usec */
	int			rio_flags;	/* see below */
};

/* rio flags */
#define	RIOF_ECN4	0x01	/* use packet marking for IPv4 packets */
#define	RIOF_ECN6	0x02	/* use packet marking for IPv6 packets */
#define	RIOF_ECN	(RIOF_ECN4 | RIOF_ECN6)
#define	RIOF_CLEARDSCP	0x200	/* clear diffserv codepoint */

#ifdef _KERNEL

typedef struct rio {
	/* per drop precedence structure */
	struct dropprec_state {
		/* red parameters */
		int	inv_pmax;	/* inverse of max drop probability */
		int	th_min;		/* red min threshold */
		int	th_max;		/* red max threshold */

		/* variables for internal use */
		int	th_min_s;	/* th_min scaled by avgshift */
		int	th_max_s;	/* th_max scaled by avgshift */
		int	probd;		/* drop probability denominator */

		int	qlen;		/* queue length */
		int	avg;		/* (scaled) queue length average */
		int	count;		/* packet count since the last dropped/
					   marked packet */
		int	idle;		/* queue was empty */
		int	old;		/* avg is above th_min */
		struct timeval	last;	/* timestamp when queue becomes idle */
	} rio_precstate[RIO_NDROPPREC];

	int		 rio_wshift;	/* log(red_weight) */
	int		 rio_weight;	/* weight for EWMA */
	struct wtab	*rio_wtab;	/* weight table */

	int		 rio_pkttime;	/* average packet time in micro sec
					   used for idle calibration */
	int		 rio_flags;	/* rio flags */

	u_int8_t	 rio_codepoint;	/* codepoint value to tag packets */
	u_int8_t	 rio_codepointmask;	/* codepoint mask bits */

	struct redstats q_stats[RIO_NDROPPREC];	/* statistics */
} rio_t;

typedef struct rio_queue {
	struct rio_queue	*rq_next;	/* next red_state in the list */
	struct ifaltq		*rq_ifq;	/* backpointer to ifaltq */

	class_queue_t		*rq_q;

	rio_t			*rq_rio;
} rio_queue_t;

extern rio_t		*rio_alloc(int, struct redparams *, int, int);
extern void		 rio_destroy(rio_t *);
extern void		 rio_getstats(rio_t *, struct redstats *);
extern int		 rio_addq(rio_t *, class_queue_t *, struct mbuf *,
			     struct altq_pktattr *);
extern struct mbuf	*rio_getq(rio_t *, class_queue_t *);

#endif /* _KERNEL */

#endif /* _ALTQ_ALTQ_RIO_H_ */
@


1.6
log
@remove an unused function prototype.
from KAME
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_rio.h,v 1.5 2002/12/16 17:27:20 henning Exp $	*/
@


1.5
log
@major KNF, Take 2

ok kjc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_rio.h,v 1.4 2002/12/16 09:18:05 kjc Exp $	*/
a124 1
extern int		 rio_set_meter(rio_t *, int, int, int);
@


1.4
log
@switchover to pf-based altq.
 - remove files which are no longer used, or we don't have plans to support
   in pf in the near future.
 - remove altq ioctl related stuff.
 - convert the PRIQ, HFSC and RIO modules to pf-based altq.
   (these are not enabled in GENERIC, CDNR is not converted yet.)
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_rio.h,v 1.3 2002/11/26 01:03:34 henning Exp $	*/
d46 3
a48 3
	struct rio_interface iface;
	int q_len[RIO_NDROPPREC];
	struct redstats q_stats[RIO_NDROPPREC];
d51 4
a54 4
	int q_limit;
	int weight;
	int flags;
	struct redparams q_params[RIO_NDROPPREC];
d58 6
a63 6
	struct rio_interface iface;
	struct redparams q_params[RIO_NDROPPREC];
	int rio_weight;		/* weight for EWMA */
	int rio_limit;		/* max queue length */
	int rio_pkttime;	/* average packet time in usec */
	int rio_flags;		/* see below */
d78 3
a80 3
		int inv_pmax;	/* inverse of max drop probability */
		int th_min;	/* red min threshold */
		int th_max;	/* red max threshold */
d83 11
a93 11
		int th_min_s;	/* th_min scaled by avgshift */
		int th_max_s;	/* th_max scaled by avgshift */
		int probd;	/* drop probability denominator */

		int qlen;	/* queue length */
		int avg;	/* (scaled) queue length average */
		int count; 	/* packet count since the last dropped/marked
				   packet */
		int idle;	/* queue was empty */
		int old;	/* avg is above th_min */
		struct timeval last;  /* timestamp when queue becomes idle */
d96 7
a102 7
	int rio_wshift;		/* log(red_weight) */
	int rio_weight;		/* weight for EWMA */
	struct wtab *rio_wtab;	/* weight table */

	int rio_pkttime; 	/* average packet time in micro sec
				   used for idle calibration */
	int rio_flags;		/* rio flags */
d104 2
a105 2
	u_int8_t rio_codepoint;		/* codepoint value to tag packets */
	u_int8_t rio_codepointmask;	/* codepoint mask bits */
d111 2
a112 2
	struct rio_queue *rq_next;	/* next red_state in the list */
	struct ifaltq *rq_ifq;		/* backpointer to ifaltq */
d114 1
a114 1
	class_queue_t *rq_q;
d116 1
a116 1
	rio_t *rq_rio;
d119 7
a125 7
extern rio_t *rio_alloc(int, struct redparams *, int, int);
extern void rio_destroy(rio_t *);
extern void rio_getstats(rio_t *, struct redstats *);
extern int rio_addq(rio_t *, class_queue_t *, struct mbuf *,
			 struct altq_pktattr *);
extern struct mbuf *rio_getq(rio_t *, class_queue_t *);
extern int rio_set_meter(rio_t *, int, int, int);
@


1.3
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_rio.h,v 1.2 2002/03/14 01:26:26 millert Exp $	*/
a70 11

/*
 * IOCTLs for RIO
 */
#define	RIO_IF_ATTACH		_IOW('Q', 1, struct rio_interface)
#define	RIO_IF_DETACH		_IOW('Q', 2, struct rio_interface)
#define	RIO_ENABLE		_IOW('Q', 3, struct rio_interface)
#define	RIO_DISABLE		_IOW('Q', 4, struct rio_interface)
#define	RIO_CONFIG		_IOWR('Q', 6, struct rio_conf)
#define	RIO_GETSTATS		_IOWR('Q', 12, struct rio_stats)
#define	RIO_SETDEFAULTS		_IOW('Q', 30, struct redparams[RIO_NDROPPREC])
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_rio.h,v 1.1 2001/06/27 05:28:36 kjc Exp $	*/
d72 1
a72 1
/* 
d106 1
a106 1
		
d117 1
a117 1
	
@


1.1
log
@import ALTQ, alternate queueing support, from KAME.
ALTQ allows to switch various queueing disciplines on output network
interfaces.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d130 7
a136 7
extern rio_t *rio_alloc __P((int, struct redparams *, int, int));
extern void rio_destroy __P((rio_t *));
extern void rio_getstats __P((rio_t *, struct redstats *));
extern int rio_addq __P((rio_t *, class_queue_t *, struct mbuf *,
			 struct altq_pktattr *));
extern struct mbuf *rio_getq __P((rio_t *, class_queue_t *));
extern int rio_set_meter __P((rio_t *, int, int, int));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_rio.h,v 1.1 2001/06/27 05:28:36 kjc Exp $	*/
d130 7
a136 7
extern rio_t *rio_alloc(int, struct redparams *, int, int);
extern void rio_destroy(rio_t *);
extern void rio_getstats(rio_t *, struct redstats *);
extern int rio_addq(rio_t *, class_queue_t *, struct mbuf *,
			 struct altq_pktattr *);
extern struct mbuf *rio_getq(rio_t *, class_queue_t *);
extern int rio_set_meter(rio_t *, int, int, int);
@


1.1.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 3
a48 3
	struct rio_interface	iface;
	int			q_len[RIO_NDROPPREC];
	struct redstats		q_stats[RIO_NDROPPREC];
d51 4
a54 4
	int			q_limit;
	int			weight;
	int			flags;
	struct redparams	q_params[RIO_NDROPPREC];
d58 6
a63 6
	struct rio_interface	iface;
	struct redparams	q_params[RIO_NDROPPREC];
	int			rio_weight;	/* weight for EWMA */
	int			rio_limit;	/* max queue length */
	int			rio_pkttime;	/* avg packet time in usec */
	int			rio_flags;	/* see below */
d72 11
d89 3
a91 3
		int	inv_pmax;	/* inverse of max drop probability */
		int	th_min;		/* red min threshold */
		int	th_max;		/* red max threshold */
d94 11
a104 11
		int	th_min_s;	/* th_min scaled by avgshift */
		int	th_max_s;	/* th_max scaled by avgshift */
		int	probd;		/* drop probability denominator */

		int	qlen;		/* queue length */
		int	avg;		/* (scaled) queue length average */
		int	count;		/* packet count since the last dropped/
					   marked packet */
		int	idle;		/* queue was empty */
		int	old;		/* avg is above th_min */
		struct timeval	last;	/* timestamp when queue becomes idle */
d106 12
a117 12

	int		 rio_wshift;	/* log(red_weight) */
	int		 rio_weight;	/* weight for EWMA */
	struct wtab	*rio_wtab;	/* weight table */

	int		 rio_pkttime;	/* average packet time in micro sec
					   used for idle calibration */
	int		 rio_flags;	/* rio flags */

	u_int8_t	 rio_codepoint;	/* codepoint value to tag packets */
	u_int8_t	 rio_codepointmask;	/* codepoint mask bits */

d122 2
a123 2
	struct rio_queue	*rq_next;	/* next red_state in the list */
	struct ifaltq		*rq_ifq;	/* backpointer to ifaltq */
d125 1
a125 1
	class_queue_t		*rq_q;
d127 1
a127 1
	rio_t			*rq_rio;
d130 7
a136 6
extern rio_t		*rio_alloc(int, struct redparams *, int, int);
extern void		 rio_destroy(rio_t *);
extern void		 rio_getstats(rio_t *, struct redstats *);
extern int		 rio_addq(rio_t *, class_queue_t *, struct mbuf *,
			     struct altq_pktattr *);
extern struct mbuf	*rio_getq(rio_t *, class_queue_t *);
@


1.1.2.1
log
@Merge in -current from about a week ago
@
text
@d130 7
a136 7
extern rio_t *rio_alloc(int, struct redparams *, int, int);
extern void rio_destroy(rio_t *);
extern void rio_getstats(rio_t *, struct redstats *);
extern int rio_addq(rio_t *, class_queue_t *, struct mbuf *,
			 struct altq_pktattr *);
extern struct mbuf *rio_getq(rio_t *, class_queue_t *);
extern int rio_set_meter(rio_t *, int, int, int);
@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@d46 3
a48 3
	struct rio_interface	iface;
	int			q_len[RIO_NDROPPREC];
	struct redstats		q_stats[RIO_NDROPPREC];
d51 4
a54 4
	int			q_limit;
	int			weight;
	int			flags;
	struct redparams	q_params[RIO_NDROPPREC];
d58 6
a63 6
	struct rio_interface	iface;
	struct redparams	q_params[RIO_NDROPPREC];
	int			rio_weight;	/* weight for EWMA */
	int			rio_limit;	/* max queue length */
	int			rio_pkttime;	/* avg packet time in usec */
	int			rio_flags;	/* see below */
d72 11
d89 3
a91 3
		int	inv_pmax;	/* inverse of max drop probability */
		int	th_min;		/* red min threshold */
		int	th_max;		/* red max threshold */
d94 11
a104 11
		int	th_min_s;	/* th_min scaled by avgshift */
		int	th_max_s;	/* th_max scaled by avgshift */
		int	probd;		/* drop probability denominator */

		int	qlen;		/* queue length */
		int	avg;		/* (scaled) queue length average */
		int	count;		/* packet count since the last dropped/
					   marked packet */
		int	idle;		/* queue was empty */
		int	old;		/* avg is above th_min */
		struct timeval	last;	/* timestamp when queue becomes idle */
d106 12
a117 12

	int		 rio_wshift;	/* log(red_weight) */
	int		 rio_weight;	/* weight for EWMA */
	struct wtab	*rio_wtab;	/* weight table */

	int		 rio_pkttime;	/* average packet time in micro sec
					   used for idle calibration */
	int		 rio_flags;	/* rio flags */

	u_int8_t	 rio_codepoint;	/* codepoint value to tag packets */
	u_int8_t	 rio_codepointmask;	/* codepoint mask bits */

d122 2
a123 2
	struct rio_queue	*rq_next;	/* next red_state in the list */
	struct ifaltq		*rq_ifq;	/* backpointer to ifaltq */
d125 1
a125 1
	class_queue_t		*rq_q;
d127 1
a127 1
	rio_t			*rq_rio;
d130 7
a136 6
extern rio_t		*rio_alloc(int, struct redparams *, int, int);
extern void		 rio_destroy(rio_t *);
extern void		 rio_getstats(rio_t *, struct redstats *);
extern int		 rio_addq(rio_t *, class_queue_t *, struct mbuf *,
			     struct altq_pktattr *);
extern struct mbuf	*rio_getq(rio_t *, class_queue_t *);
@


