head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.6.0.30
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.28
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.24
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.26
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.1.0.10
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2014.04.19.16.08.14;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2011.07.03.23.48.41;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.03.22.39.12;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.14.08.42.23;	author kjc;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.03.14.31.02;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.16.17.27.20;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.16.09.18.05;	author kjc;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.01.03.34;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.05.28.35;	author kjc;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;

1.1.2.1
date	2003.03.27.22.28.25;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.05.13.19.21.26;	author ho;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.51.22;	author niklas;	state Exp;
branches;
next	;

1.1.6.1
date	2003.05.19.21.50.54;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@bye bye
@
text
@/*	$OpenBSD: altq_priq.h,v 1.8 2011/07/03 23:48:41 henning Exp $	*/
/*	$KAME: altq_priq.h,v 1.1 2000/10/18 09:15:23 kjc Exp $	*/
/*
 * Copyright (C) 2000-2002
 *	Sony Computer Science Laboratories Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SONY CSL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL SONY CSL OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _ALTQ_ALTQ_PRIQ_H_
#define	_ALTQ_ALTQ_PRIQ_H_

#include <altq/altq.h>
#include <altq/altq_classq.h>
#include <altq/altq_red.h>

#ifdef __cplusplus
extern "C" {
#endif

#define	PRIQ_MAXPRI	16	/* upper limit of the number of priorities */

/* priq class flags */
#define	PRCF_RED		0x0001	/* use RED */
#define	PRCF_ECN		0x0002  /* use RED/ECN */
#define	PRCF_RIO		0x0004  /* use RIO */
#define	PRCF_DEFAULTCLASS	0x1000	/* default class */

/* special class handles */
#define	PRIQ_NULLCLASS_HANDLE	0

struct priq_classstats {
	u_int32_t		class_handle;

	u_int			qlength;
	u_int			qlimit;
	u_int			period;
	struct pktcntr		xmitcnt;  /* transmitted packet counter */
	struct pktcntr		dropcnt;  /* dropped packet counter */

	/* red and rio related info */
	int			qtype;
	struct redstats		red[3];	/* rio has 3 red stats */
};

#ifdef _KERNEL

struct priq_class {
	u_int32_t	cl_handle;	/* class handle */
	class_queue_t	*cl_q;		/* class queue structure */
	struct red	*cl_red;	/* RED state */
	int		cl_pri;		/* priority */
	int		cl_flags;	/* class flags */
	struct priq_if	*cl_pif;	/* back pointer to pif */
	struct altq_pktattr *cl_pktattr; /* saved header used by ECN */

	/* statistics */
	u_int		cl_period;	/* backlog period */
	struct pktcntr  cl_xmitcnt;	/* transmitted packet counter */
	struct pktcntr  cl_dropcnt;	/* dropped packet counter */
};

/*
 * priq interface state
 */
struct priq_if {
	struct priq_if		*pif_next;	/* interface state list */
	struct ifaltq		*pif_ifq;	/* backpointer to ifaltq */
	u_int			pif_bandwidth;	/* link bandwidth in bps */
	int			pif_maxpri;	/* max priority in use */
	struct priq_class	*pif_default;	/* default class */
	struct priq_class	*pif_classes[PRIQ_MAXPRI]; /* classes */
};

#endif /* _KERNEL */

#ifdef __cplusplus
}
#endif

#endif /* _ALTQ_ALTQ_PRIQ_H_ */
@


1.8
log
@g/c code to read/write the dscp field. with pf as classifier altq has no
business in mucking with it and since the _CLEARDSCP flags were never
possibly set that is effectively dead code
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.7 2011/07/03 22:39:12 tedu Exp $	*/
@


1.7
log
@cdnr and rio disciplines are not being used or supported, clear a path
for new code.  ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.6 2004/01/14 08:42:23 kjc Exp $	*/
a45 1
#define	PRCF_CLEARDSCP		0x0010  /* clear diffserv codepoint */
@


1.6
log
@eliminate the predefined special qids so that qids become simple
identifiers without embedded meanings.

this also allows us to make the semantics of the qid assignment in line
with the tag assignment in the next step.

ok, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.5 2003/04/03 14:31:02 henning Exp $	*/
a34 1
#include <altq/altq_rio.h>
@


1.5
log
@until now, the queue ID and the priority were tied together with PRIQ. this
diff changes that.
with PRIQ, the queues are in an array, with the priority as key. removing
the tie means we cannot access the array with (queueID - 1) as key any
more but need to traverse the array until the queue ID matches. As the array
has a maximum of 16 entries, traversing linear is okay.
a new queue ID allocation algorithm coming soon will require this.

ok dhartmei@@ kjc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.4 2002/12/16 17:27:20 henning Exp $	*/
a41 1
#define	PRIQ_MAXQID	256	/* upper limit of queues */
@


1.4
log
@major KNF, Take 2

ok kjc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.3 2002/12/16 09:18:05 kjc Exp $	*/
d42 1
@


1.3
log
@switchover to pf-based altq.
 - remove files which are no longer used, or we don't have plans to support
   in pf in the near future.
 - remove altq ioctl related stuff.
 - convert the PRIQ, HFSC and RIO modules to pf-based altq.
   (these are not enabled in GENERIC, CDNR is not converted yet.)
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.2 2002/11/26 01:03:34 henning Exp $	*/
d58 1
a58 1
	u_int 			period;
d63 2
a64 2
	int		qtype;
	struct redstats	red[3];		/* rio has 3 red stats */
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.1 2001/06/27 05:28:35 kjc Exp $	*/
d4 1
a4 1
 * Copyright (C) 2000
a42 14
struct priq_interface {
	char	ifname[IFNAMSIZ];	/* interface name (e.g., fxp0) */
	u_long	arg;			/* request-specific argument */
};

struct priq_add_class {
	struct priq_interface	iface;
	int			pri;	/* priority (0 is the lowest) */
	int			qlimit;	/* queue size limit */
	int			flags;	/* misc flags (see below) */

	u_long			class_handle;  /* return value */
};

d53 2
a54 28
struct priq_delete_class {
	struct priq_interface	iface;
	u_long			class_handle;
};

struct priq_modify_class {
	struct priq_interface	iface;
	u_long			class_handle;
	int			pri;
	int			qlimit;
	int			flags;
};

struct priq_add_filter {
	struct priq_interface	iface;
	u_long			class_handle;
	struct flow_filter	filter;

	u_long			filter_handle;  /* return value */
};

struct priq_delete_filter {
	struct priq_interface	iface;
	u_long			filter_handle;
};

struct class_stats {
	u_long			class_handle;
d57 1
a66 19
struct priq_class_stats {
	struct priq_interface	iface;
	int			maxpri;	  /* in/out */

	struct class_stats	*stats;   /* pointer to stats array */
};

#define	PRIQ_IF_ATTACH		_IOW('Q', 1, struct priq_interface)
#define	PRIQ_IF_DETACH		_IOW('Q', 2, struct priq_interface)
#define	PRIQ_ENABLE		_IOW('Q', 3, struct priq_interface)
#define	PRIQ_DISABLE		_IOW('Q', 4, struct priq_interface)
#define	PRIQ_CLEAR		_IOW('Q', 5, struct priq_interface)
#define	PRIQ_ADD_CLASS		_IOWR('Q', 7, struct priq_add_class)
#define	PRIQ_DEL_CLASS		_IOW('Q', 8, struct priq_delete_class)
#define	PRIQ_MOD_CLASS		_IOW('Q', 9, struct priq_modify_class)
#define	PRIQ_ADD_FILTER		_IOWR('Q', 10, struct priq_add_filter)
#define	PRIQ_DEL_FILTER		_IOW('Q', 11, struct priq_delete_filter)
#define	PRIQ_GETSTATS		_IOWR('Q', 12, struct priq_class_stats)

d70 1
a70 1
	u_long		cl_handle;	/* class handle */
a93 1
	struct acc_classifier	pif_classifier;	/* classifier */
@


1.1
log
@import ALTQ, alternate queueing support, from KAME.
ALTQ allows to switch various queueing disciplines on output network
interfaces.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
#endif 
d159 1
a159 1
#endif 
@


1.1.6.1
log
@sync
@
text
@d4 1
a4 1
 * Copyright (C) 2000-2002
d39 1
a39 1
#endif
d42 14
a55 1
#define	PRIQ_MAXQID	256	/* upper limit of queues */
d67 28
a94 2
struct priq_classstats {
	u_int32_t		class_handle;
d97 1
a97 2
	u_int			qlimit;
	u_int			period;
d102 2
a103 2
	int			qtype;
	struct redstats		red[3];	/* rio has 3 red stats */
d106 19
d128 1
a128 1
	u_int32_t	cl_handle;	/* class handle */
d152 1
d159 1
a159 1
#endif
@


1.1.2.1
log
@Sync the SMP branch with 3.3
@
text
@d4 1
a4 1
 * Copyright (C) 2000-2002
d39 1
a39 1
#endif
d43 14
d67 28
a94 2
struct priq_classstats {
	u_int32_t		class_handle;
d97 1
a97 2
	u_int			qlimit;
	u_int			period;
d102 2
a103 2
	int			qtype;
	struct redstats		red[3];	/* rio has 3 red stats */
d106 19
d128 1
a128 1
	u_int32_t	cl_handle;	/* class handle */
d152 1
d159 1
a159 1
#endif
@


1.1.2.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_priq.h,v 1.1.2.1 2003/03/27 22:28:25 niklas Exp $	*/
a41 1
#define	PRIQ_MAXQID	256	/* upper limit of queues */
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
@


