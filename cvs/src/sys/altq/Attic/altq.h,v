head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.12
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.8
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2014.04.19.16.08.14;	author henning;	state dead;
branches;
next	1.9;

1.9
date	2011.10.07.17.10.08;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.03.23.47.04;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.19.22.36.11;	author mikeb;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.03.05.11.28;	author kjc;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.30.09.55.42;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.13.08.06.13;	author kjc;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.09.15.30.10;	author kjc;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.08.09.14.32.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.05.28.34;	author kjc;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.02.43.21;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.06.02.07.07;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.03.27.22.28.24;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.05.13.19.21.26;	author ho;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.27.42;	author art;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.05.19.21.50.54;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@bye bye
@
text
@/*	$OpenBSD: altq.h,v 1.9 2011/10/07 17:10:08 henning Exp $	*/
/*	$KAME: altq.h,v 1.6 2000/12/14 08:12:45 thorpej Exp $	*/

/*
 * Copyright (C) 1998-2000
 *	Sony Computer Science Laboratories Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SONY CSL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL SONY CSL OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _ALTQ_ALTQ_H_
#define	_ALTQ_ALTQ_H_

/* altq discipline type */
#define	ALTQT_NONE		 0	/* reserved */
#define	ALTQT_CBQ		 1	/* cbq */
#define	ALTQT_HFSC		 8	/* hfsc */
#define	ALTQT_PRIQ		11	/* priority queue */
#define	ALTQT_MAX		12	/* should be max discipline type + 1 */

/* simple token bucket meter profile */
struct oldtb_profile {
	u_int	rate;	/* rate in bit-per-sec */
	u_int	depth;	/* depth in bytes */
};

/*
 * generic packet counter
 */
struct pktcntr {
	u_int64_t	packets;
	u_int64_t	bytes;
};

#define	PKTCNTR_ADD(cntr, len)	\
	do { (cntr)->packets++; (cntr)->bytes += len; } while (0)

#ifdef _KERNEL
#include <altq/altq_var.h>
#endif

#endif /* _ALTQ_ALTQ_H_ */
@


1.9
log
@rename some vars and functions
unfortunately altq is one giant namespace violation. rename just those that
conflict with new stuff for now only to be found on my laptop. reduce pain,
the diff is huge already. ok ryan
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.7 2010/11/19 22:36:11 mikeb Exp $	*/
@


1.8
log
@g/c ALTQT_ defines for disciplines we don't have
@
text
@d41 1
a41 1
struct tb_profile {
@


1.7
log
@typo;  from ilya a. kovalenko <shadow () oganer ! net>
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.6 2003/04/03 05:11:28 kjc Exp $	*/
a35 6
#define	ALTQT_WFQ		 2	/* wfq */
#define	ALTQT_AFMAP		 3	/* afmap */
#define	ALTQT_FIFOQ		 4	/* fifoq */
#define	ALTQT_RED		 5	/* red */
#define	ALTQT_RIO		 6	/* rio */
#define	ALTQT_LOCALQ		 7	/* local use */
a36 2
#define	ALTQT_CDNR		 9	/* traffic conditioner */
#define	ALTQT_BLUE		10	/* blue */
@


1.6
log
@remove remaining lines not needed by openbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.5 2003/01/30 09:55:42 henning Exp $	*/
d48 1
a48 1
/* simple token backet meter profile */
@


1.5
log
@big KNF & ANSI round
"accidently" typed while hunting a bug ;-)

ok kjc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.4 2002/02/13 08:06:13 kjc Exp $	*/
a32 9
#include <sys/param.h>
#include <sys/ioccom.h>
#include <sys/queue.h>
#include <netinet/in.h>

#ifndef IFNAMSIZ
#define	IFNAMSIZ	16
#endif

a47 5
struct	altqreq {
	char	ifname[IFNAMSIZ];	/* if name, e.g. "en0" */
	u_long	arg;			/* request-specific argument */
};

a53 76
struct tbrreq {
	char	ifname[IFNAMSIZ];	/* if name, e.g. "en0" */
	struct	tb_profile tb_prof;	/* token bucket profile */
};

/*
 * common network flow info structure
 */
struct flowinfo {
	u_char		fi_len;		/* total length */
	u_char		fi_family;	/* address family */
	u_int8_t	fi_data[46];	/* actually longer; address family
					   specific flow info. */
};

/*
 * flow info structure for internet protocol family.
 * (currently this is the only protocol family supported)
 */
struct flowinfo_in {
	u_char		fi_len;		/* sizeof(struct flowinfo_in) */
	u_char		fi_family;	/* AF_INET */
	u_int8_t	fi_proto;	/* IPPROTO_XXX */
	u_int8_t	fi_tos;		/* type-of-service */
	struct in_addr	fi_dst;		/* dest address */
	struct in_addr	fi_src;		/* src address */
	u_int16_t	fi_dport;	/* dest port */
	u_int16_t	fi_sport;	/* src port */
	u_int32_t	fi_gpi;		/* generalized port id for ipsec */
	u_int8_t	_pad[28];	/* make the size equal to
					   flowinfo_in6 */
};

#ifdef SIN6_LEN
struct flowinfo_in6 {
	u_char		fi6_len;	/* sizeof(struct flowinfo_in6) */
	u_char		fi6_family;	/* AF_INET6 */
	u_int8_t	fi6_proto;	/* IPPROTO_XXX */
	u_int8_t	fi6_tclass;	/* traffic class */
	u_int32_t	fi6_flowlabel;	/* ipv6 flowlabel */
	u_int16_t	fi6_dport;	/* dest port */
	u_int16_t	fi6_sport;	/* src port */
	u_int32_t	fi6_gpi;	/* generalized port id */
	struct in6_addr fi6_dst;	/* dest address */
	struct in6_addr fi6_src;	/* src address */
};
#endif /* INET6 */

/*
 * flow filters for AF_INET and AF_INET6
 */
struct flow_filter {
	int			ff_ruleno;
	struct flowinfo_in	ff_flow;
	struct {
		struct in_addr	mask_dst;
		struct in_addr	mask_src;
		u_int8_t	mask_tos;
		u_int8_t	_pad[3];
	} ff_mask;
	u_int8_t	_pad2[24];	/* make size equal to flow_filter6 */
};

#ifdef SIN6_LEN
struct flow_filter6 {
	int			ff_ruleno;
	struct flowinfo_in6	ff_flow6;
	struct {
		struct in6_addr	mask6_dst;
		struct in6_addr	mask6_src;
		u_int8_t	mask6_tclass;
		u_int8_t	_pad[3];
	} ff_mask6;
};
#endif /* INET6 */

a63 41

/*
 * altq related ioctls
 */
#define	ALTQGTYPE	_IOWR('q', 0, struct altqreq)	/* get queue type */
#if 0
/*
 * these ioctls are currently discipline-specific but could be shared
 * in the future.
 */
#define	ALTQATTACH	_IOW('q', 1, struct altqreq)	/* attach discipline */
#define	ALTQDETACH	_IOW('q', 2, struct altqreq)	/* detach discipline */
#define	ALTQENABLE	_IOW('q', 3, struct altqreq)	/* enable discipline */
#define	ALTQDISABLE	_IOW('q', 4, struct altqreq)	/* disable discipline*/
#define	ALTQCLEAR	_IOW('q', 5, struct altqreq)	/* (re)initialize */
#define	ALTQCONFIG	_IOWR('q', 6, struct altqreq)	/* set config params */
#define	ALTQADDCLASS	_IOWR('q', 7, struct altqreq)	/* add a class */
#define	ALTQMODCLASS	_IOWR('q', 8, struct altqreq)	/* modify a class */
#define	ALTQDELCLASS	_IOWR('q', 9, struct altqreq)	/* delete a class */
#define	ALTQADDFILTER	_IOWR('q', 10, struct altqreq)	/* add a filter */
#define	ALTQDELFILTER	_IOWR('q', 11, struct altqreq)	/* delete a filter */
#define	ALTQGETSTATS	_IOWR('q', 12, struct altqreq)	/* get statistics */
#define	ALTQGETCNTR	_IOWR('q', 13, struct altqreq)	/* get a pkt counter */
#endif /* 0 */
#define	ALTQTBRSET	_IOW('q', 14, struct tbrreq)	/* set tb regulator */
#define	ALTQTBRGET	_IOWR('q', 15, struct tbrreq)	/* get tb regulator */

/* queue macros only in FreeBSD */
#ifndef LIST_EMPTY
#define	LIST_EMPTY(head) ((head)->lh_first == NULL)
#endif
#ifndef LIST_FOREACH
#define	LIST_FOREACH(var, head, field)					\
	for ((var) = (head)->lh_first; (var); (var) = (var)->field.le_next)
#endif

#ifdef KERNEL
#ifndef _KERNEL
#define	_KERNEL
#endif
#endif
@


1.4
log
@move ALTQ_RED and ALTQ_CBQ from altq.h to altq_var.h.
protect them from duplicated defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.3 2001/08/09 15:30:10 kjc Exp $	*/
d29 1
d43 10
a52 10
#define	ALTQT_NONE		0	/* reserved */
#define	ALTQT_CBQ		1	/* cbq */
#define	ALTQT_WFQ		2	/* wfq */
#define	ALTQT_AFMAP		3	/* afmap */
#define	ALTQT_FIFOQ		4	/* fifoq */
#define	ALTQT_RED		5	/* red */
#define	ALTQT_RIO		6	/* rio */
#define	ALTQT_LOCALQ		7	/* local use */
#define	ALTQT_HFSC		8	/* hfsc */
#define	ALTQT_CDNR		9	/* traffic conditioner */
d63 1
a63 1
struct	tb_profile {
d68 1
a68 1
struct	tbrreq {
d128 1
a128 1
	u_int8_t _pad2[24];	/* make the size equal to flow_filter6 */
d187 1
a187 1
	for((var) = (head)->lh_first; (var); (var) = (var)->field.le_next)
@


1.3
log
@typo: ALTQ_CQB -> ALTQ_CBQ
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.2 2001/08/09 14:32:59 deraadt Exp $	*/
a35 3

#define ALTQ_RED		/* Always included */
#define ALTQ_CBQ		/* Always included */
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.3 2001/08/09 15:30:10 kjc Exp $	*/
d36 3
@


1.3.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a28 1

d32 9
d42 10
a51 10
#define	ALTQT_NONE		 0	/* reserved */
#define	ALTQT_CBQ		 1	/* cbq */
#define	ALTQT_WFQ		 2	/* wfq */
#define	ALTQT_AFMAP		 3	/* afmap */
#define	ALTQT_FIFOQ		 4	/* fifoq */
#define	ALTQT_RED		 5	/* red */
#define	ALTQT_RIO		 6	/* rio */
#define	ALTQT_LOCALQ		 7	/* local use */
#define	ALTQT_HFSC		 8	/* hfsc */
#define	ALTQT_CDNR		 9	/* traffic conditioner */
d56 5
d62 1
a62 1
struct tb_profile {
d67 76
d153 41
@


1.2
log
@change a maze of altq options into just "altq" for the base+red+cbq, and
then altq_* for each of the other * experimental options.  and.. enable
it by default in GENERIC.
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.1 2001/06/27 05:28:34 kjc Exp $	*/
d38 1
a38 1
#define ALTQ_CQB		/* Always included */
@


1.1
log
@import ALTQ, alternate queueing support, from KAME.
ALTQ allows to switch various queueing disciplines on output network
interfaces.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 3
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.1 2001/06/27 05:28:34 kjc Exp $	*/
a35 3

#define ALTQ_RED		/* Always included */
#define ALTQ_CBQ		/* Always included */
@


1.1.2.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 3
@


1.1.2.3
log
@Sync the SMP branch with 3.3
@
text
@a28 1

d42 10
a51 10
#define	ALTQT_NONE		 0	/* reserved */
#define	ALTQT_CBQ		 1	/* cbq */
#define	ALTQT_WFQ		 2	/* wfq */
#define	ALTQT_AFMAP		 3	/* afmap */
#define	ALTQT_FIFOQ		 4	/* fifoq */
#define	ALTQT_RED		 5	/* red */
#define	ALTQT_RIO		 6	/* rio */
#define	ALTQT_LOCALQ		 7	/* local use */
#define	ALTQT_HFSC		 8	/* hfsc */
#define	ALTQT_CDNR		 9	/* traffic conditioner */
d62 1
a62 1
struct tb_profile {
d67 1
a67 1
struct tbrreq {
d127 1
a127 1
	u_int8_t	_pad2[24];	/* make size equal to flow_filter6 */
d186 1
a186 1
	for ((var) = (head)->lh_first; (var); (var) = (var)->field.le_next)
@


1.1.2.4
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: altq.h,v 1.1.2.3 2003/03/27 22:28:24 niklas Exp $	*/
d33 9
d57 5
d68 76
d154 41
@


