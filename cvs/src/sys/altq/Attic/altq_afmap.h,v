head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2002.12.16.09.18.05;	author kjc;	state dead;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.05.28.34;	author kjc;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;

1.1.2.1
date	2002.03.28.11.26.44;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.27.22.28.24;	author niklas;	state dead;
branches;
next	;

1.1.6.1
date	2002.06.11.03.27.42;	author art;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2003.05.19.21.50.54;	author tedu;	state dead;
branches;
next	;


desc
@@


1.3
log
@switchover to pf-based altq.
 - remove files which are no longer used, or we don't have plans to support
   in pf in the near future.
 - remove altq ioctl related stuff.
 - convert the PRIQ, HFSC and RIO modules to pf-based altq.
   (these are not enabled in GENERIC, CDNR is not converted yet.)
@
text
@/*	$OpenBSD: altq_afmap.h,v 1.2 2002/03/14 01:26:26 millert Exp $	*/
/*	$KAME: altq_afmap.h,v 1.5 2000/12/14 08:12:45 thorpej Exp $	*/

/*
 * Copyright (C) 1997-2000
 *	Sony Computer Science Laboratories Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SONY CSL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL SONY CSL OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _ALTQ_ALTQ_AFMAP_H_
#define	_ALTQ_ALTQ_AFMAP_H_

#include <sys/queue.h>
#include <altq/altq.h>

struct atm_flowmap {
	char		af_ifname[IFNAMSIZ];	/* if name, e.g. "en0" */
	u_int8_t	af_vpi;
	u_int16_t	af_vci;
	u_int32_t	af_pcr;			/* peek cell rate */
	union {
		struct flowinfo	      afu_fi;
		struct flowinfo_in    afu_fi4;
#ifdef SIN6_LEN
		struct flowinfo_in6   afu_fi6;
#endif
	} af_fiu;
#define	af_flowinfo	af_fiu.afu_fi
#define	af_flowinfo4	af_fiu.afu_fi4
#define	af_flowinfo6	af_fiu.afu_fi6

	/* statistics */
	u_int32_t	afs_packets;		/* total packet count */
	u_int32_t	afs_bytes;		/* total byte count */
};

/* set or get flowmap */
#define	AFM_ADDFMAP	_IOWR('F', 30, struct atm_flowmap)
#define	AFM_DELFMAP	_IOWR('F', 31, struct atm_flowmap)
#define	AFM_CLEANFMAP	_IOWR('F', 32, struct atm_flowmap)
#define	AFM_GETFMAP	_IOWR('F', 33, struct atm_flowmap)

#ifdef _KERNEL

/* per flow information */
struct afm {
	LIST_ENTRY(afm) 	afm_list;
	u_int16_t		afm_vci;
	u_int8_t		afm_vpi;
	union {
		struct flowinfo      afmu_fi;
		struct flowinfo_in   afmu_fi4;
#ifdef SIN6_LEN
		struct flowinfo_in6  afmu_fi6;
#endif
	} afm_fiu;
#define	afm_flowinfo	afm_fiu.afmu_fi
#define	afm_flowinfo4	afm_fiu.afmu_fi4
#define	afm_flowinfo6	afm_fiu.afmu_fi6

	/* statistics */
	u_int32_t		afms_packets;	/* total packet count */
	u_int32_t		afms_bytes;	/* total byte count */
};

/* per interface */
struct afm_head {
	LIST_ENTRY(afm_head) 	afh_chain;
	LIST_HEAD(, afm)	afh_head;
	struct ifnet		*afh_ifp;
};

struct afm	*afm_top(struct ifnet *);
int		afm_alloc(struct ifnet *);
int		afm_dealloc(struct ifnet *);
int		afm_add(struct ifnet *, struct atm_flowmap *);
int		afm_remove(struct afm *);
int		afm_removeall(struct ifnet *);
struct		afm *afm_lookup(struct ifnet *, int, int);
struct afm 	*afm_match(struct ifnet *, struct flowinfo *);

#endif /* _KERNEL */

#endif /* _ALTQ_ALTQ_AFMAP_H_ */
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_afmap.h,v 1.1 2001/06/27 05:28:34 kjc Exp $	*/
@


1.1
log
@import ALTQ, alternate queueing support, from KAME.
ALTQ allows to switch various queueing disciplines on output network
interfaces.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 8
a100 8
struct afm	*afm_top __P((struct ifnet *));
int		afm_alloc __P((struct ifnet *));
int		afm_dealloc __P((struct ifnet *));
int		afm_add __P((struct ifnet *, struct atm_flowmap *));
int		afm_remove __P((struct afm *));
int		afm_removeall __P((struct ifnet *));
struct		afm *afm_lookup __P((struct ifnet *, int, int));
struct afm 	*afm_match __P((struct ifnet *, struct flowinfo *));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_afmap.h,v 1.1 2001/06/27 05:28:34 kjc Exp $	*/
d93 8
a100 8
struct afm	*afm_top(struct ifnet *);
int		afm_alloc(struct ifnet *);
int		afm_dealloc(struct ifnet *);
int		afm_add(struct ifnet *, struct atm_flowmap *);
int		afm_remove(struct afm *);
int		afm_removeall(struct ifnet *);
struct		afm *afm_lookup(struct ifnet *, int, int);
struct afm 	*afm_match(struct ifnet *, struct flowinfo *);
@


1.1.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_afmap.h,v 1.1.6.1 2002/06/11 03:27:42 art Exp $	*/
@


1.1.2.1
log
@Merge in -current from about a week ago
@
text
@d93 8
a100 8
struct afm	*afm_top(struct ifnet *);
int		afm_alloc(struct ifnet *);
int		afm_dealloc(struct ifnet *);
int		afm_add(struct ifnet *, struct atm_flowmap *);
int		afm_remove(struct afm *);
int		afm_removeall(struct ifnet *);
struct		afm *afm_lookup(struct ifnet *, int, int);
struct afm 	*afm_match(struct ifnet *, struct flowinfo *);
@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: altq_afmap.h,v 1.1.2.1 2002/03/28 11:26:44 niklas Exp $	*/
@


