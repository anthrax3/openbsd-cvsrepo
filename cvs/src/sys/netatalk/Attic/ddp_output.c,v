head	1.7;
access;
symbols
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.07.09.00.47.18;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2003.06.06.09.45.08;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.15.18.19.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.16.12.53.35;	author ho;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2000.06.16.21.47.15;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.07.23.03.39.54;	author denny;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2001.05.14.22.40.05;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2001.07.04.10.54.23;	author niklas;	state Exp;
branches;
next	1.1.12.3;

1.1.12.3
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.1.12.4;

1.1.12.4
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@begone, fucking rotten appletalk shit. ok room
@
text
@/*	$OpenBSD: ddp_output.c,v 1.6 2003/06/06 09:45:08 itojun Exp $	*/

/*
 * Copyright (c) 1990,1991 Regents of The University of Michigan.
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation, and that the name of The University
 * of Michigan not be used in advertising or publicity pertaining to
 * distribution of the software without specific, written prior
 * permission. This software is supplied as is without expressed or
 * implied warranties of any kind.
 *
 *	Research Systems Unix Group
 *	The University of Michigan
 *	c/o Mike Clark
 *	535 W. William Street
 *	Ann Arbor, Michigan
 *	+1-313-763-0525
 *	netatalk@@itd.umich.edu
 */

/*
 * The following is the contents of the COPYRIGHT file from the
 * netatalk-1.4a2 distribution, from which this file is derived.
 */
/*
 * Copyright (c) 1990,1996 Regents of The University of Michigan.
 *
 * All Rights Reserved.
 *
 *    Permission to use, copy, modify, and distribute this software and
 *    its documentation for any purpose and without fee is hereby granted,
 *    provided that the above copyright notice appears in all copies and
 *    that both that copyright notice and this permission notice appear
 *    in supporting documentation, and that the name of The University
 *    of Michigan not be used in advertising or publicity pertaining to
 *    distribution of the software without specific, written prior
 *    permission. This software is supplied as is without expressed or
 *    implied warranties of any kind.
 *
 * This product includes software developed by the University of
 * California, Berkeley and its contributors.
 *
 * Solaris code is encumbered by the following:
 *
 *     Copyright (C) 1996 by Sun Microsystems Computer Co.
 *
 *     Permission to use, copy, modify, and distribute this software and
 *     its documentation for any purpose and without fee is hereby
 *     granted, provided that the above copyright notice appear in all
 *     copies and that both that copyright notice and this permission
 *     notice appear in supporting documentation.  This software is
 *     provided "as is" without express or implied warranty.
 *
 * Research Systems Unix Group
 * The University of Michigan
 * c/o Wesley Craig
 * 535 W. William Street
 * Ann Arbor, Michigan
 * +1-313-764-2278
 * netatalk@@umich.edu
 */
/*
 * None of the Solaris code mentioned is included in OpenBSD.
 * This code also relies heavily on previous effort in FreeBSD and NetBSD.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/errno.h>
#include <sys/syslog.h>

#include <net/if.h>
#include <net/route.h>

#include <netinet/in.h>
#undef s_net
#include <netinet/if_ether.h>

#include <machine/endian.h>

#include <netatalk/at.h>
#include <netatalk/at_var.h>
#include <netatalk/ddp.h>
#include <netatalk/ddp_var.h>
#include <netatalk/at_extern.h>

int ddp_output( struct mbuf *, ... );
u_int16_t at_cksum( struct mbuf *, int );
int ddp_route(struct mbuf *, struct route * );

int	ddp_cksum = 1;

int
ddp_output(struct mbuf *m, ...)
{
    struct ddpcb	*ddp;
    struct ddpehdr	*deh;
    va_list		ap;

    va_start(ap, m);
    ddp = va_arg(ap, struct ddpcb *);
    va_end(ap);

    M_PREPEND( m, sizeof( struct ddpehdr ), M_DONTWAIT );
    if (!m)
	return (ENOBUFS);

    deh = mtod( m, struct ddpehdr *);
    deh->deh_pad = 0;
    deh->deh_hops = 0;

    deh->deh_len = m->m_pkthdr.len;

    deh->deh_dnet = ddp->ddp_fsat.sat_addr.s_net;
    deh->deh_dnode = ddp->ddp_fsat.sat_addr.s_node;
    deh->deh_dport = ddp->ddp_fsat.sat_port;
    deh->deh_snet = ddp->ddp_lsat.sat_addr.s_net;
    deh->deh_snode = ddp->ddp_lsat.sat_addr.s_node;
    deh->deh_sport = ddp->ddp_lsat.sat_port;

    /*
     * The checksum calculation is done after all of the other bytes have
     * been filled in.
     */
    if ( ddp_cksum ) {
	deh->deh_sum = at_cksum( m, sizeof( int ));
    } else {
	deh->deh_sum = 0;
    }
    deh->deh_bytes = htonl( deh->deh_bytes );

    return( ddp_route( m, &ddp->ddp_route ));
}

u_int16_t
at_cksum( m, skip )
    struct mbuf	*m;
    int		skip;
{
    u_int8_t	*data, *end;
    u_long	cksum = 0;

    for (; m; m = m->m_next ) {
	for ( data = mtod( m, u_int8_t * ), end = data + m->m_len; data < end;
		data++ ) {
	    if ( skip ) {
		skip--;
		continue;
	    }
	    cksum = ( cksum + *data ) << 1;
	    if ( cksum & 0x00010000 ) {
		cksum++;
	    }
	    cksum &= 0x0000ffff;
	}
    }

    if ( cksum == 0 ) {
	cksum = 0x0000ffff;
    }
    return( (u_int16_t)cksum );
}

int
ddp_route( m, ro )
    struct mbuf		*m;
    struct route	*ro;
{
    struct sockaddr_at	gate;
    struct elaphdr	*elh;
    struct at_ifaddr	*aa = NULL;
    struct ifnet	*ifp;
    u_int16_t		net;

    if ( ro->ro_rt && ( ifp = ro->ro_rt->rt_ifp )) {
	net = satosat( ro->ro_rt->rt_gateway )->sat_addr.s_net;
	for ( aa = at_ifaddr; aa; aa = aa->aa_next ) {
	    if ( aa->aa_ifp == ifp &&
		    ntohs( net ) >= ntohs( aa->aa_firstnet ) &&
		    ntohs( net ) <= ntohs( aa->aa_lastnet )) {
		break;
	    }
	}
    }
    if ( aa == NULL ) {
	m_freem( m );
	return( EINVAL );
    }

    /*
     * There are several places in the kernel where data is added to
     * an mbuf without ensuring that the mbuf pointer is aligned.
     * This is bad for transition routing, since phase 1 and phase 2
     * packets end up poorly aligned due to the three byte elap header.
     */
    if ( aa->aa_flags & AFA_PHASE2 ) {
	if (( m = m_pullup( m, MIN( MHLEN, m->m_pkthdr.len ))) == 0 ) {
	    return( ENOBUFS );
	}
    } else {
	M_PREPEND(m, SZ_ELAPHDR, M_DONTWAIT);
	if (!m)
	    return (ENOBUFS);

	elh = mtod( m, struct elaphdr *);
	elh->el_snode = satosat( &aa->aa_addr )->sat_addr.s_node;
	elh->el_type = ELAP_DDPEXTEND;
	if ( ntohs( satosat( &ro->ro_dst )->sat_addr.s_net ) >=
		ntohs( aa->aa_firstnet ) &&
		ntohs( satosat( &ro->ro_dst )->sat_addr.s_net ) <=
		ntohs( aa->aa_lastnet )) {
	    elh->el_dnode = satosat( &ro->ro_dst )->sat_addr.s_node;
	} else {
	    elh->el_dnode = satosat( ro->ro_rt->rt_gateway )->sat_addr.s_node;
	}
    }

    if ( ntohs( satosat( &ro->ro_dst )->sat_addr.s_net ) >=
	    ntohs( aa->aa_firstnet ) &&
	    ntohs( satosat( &ro->ro_dst )->sat_addr.s_net ) <=
	    ntohs( aa->aa_lastnet )) {
	gate = *satosat( &ro->ro_dst );
    } else {
	gate = *satosat( ro->ro_rt->rt_gateway );
    }
    ro->ro_rt->rt_use++;

    /* XXX The NULL should be a struct rtentry */
    return((*ifp->if_output)( ifp, m, (struct sockaddr *) &gate, NULL ));
}
@


1.6
log
@don't use M_WAIT in network stack.  use M_PREPEND to keep m_pkthdr.
(netbsd revision 1.7)
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.5 2002/03/15 18:19:52 millert Exp $	*/
@


1.5
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.4 2002/03/14 01:27:10 millert Exp $	*/
d112 3
a114 1
    M_PREPEND( m, sizeof( struct ddpehdr ), M_WAIT );
a178 1
    struct mbuf		*m0;
d209 3
a211 4
	MGET( m0, M_WAIT, MT_HEADER );
	m0->m_next = m;
	m0->m_len = SZ_ELAPHDR;
	m = m0;
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.3 2001/05/16 12:53:35 ho Exp $	*/
a101 1
#if __STDC__
a102 5
#else
ddp_output(m, va_alist)
	struct mbuf	*m;
	va_dcl
#endif
@


1.3
log
@No need to check M_WAIT/M_WAITOK malloc return values. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.2 2000/06/16 21:47:15 provos Exp $	*/
d95 3
a97 3
int ddp_output	__P(( struct mbuf *, ... ));
u_int16_t at_cksum	__P(( struct mbuf *, int ));
int ddp_route	__P((struct mbuf *, struct route * ));
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.3 2001/05/16 12:53:35 ho Exp $	*/
d95 3
a97 3
int ddp_output( struct mbuf *, ... );
u_int16_t at_cksum( struct mbuf *, int );
int ddp_route(struct mbuf *, struct route * );
d102 1
d104 5
@


1.2
log
@take MIN/MAX from param.h, okay theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.1 1997/07/23 03:39:54 denny Exp $	*/
a214 4
	if ( m0 == 0 ) {
	    m_freem( m );
	    return( ENOBUFS );
	}
@


1.1
log
@netatalk, based on the 1.4a2 dist from the University of Michigan.
The sys/netatalk files rely heavily on previous work done on FreeBSD, and to a lesser extent NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a93 2

#define MIN(a,b) (((a)<(b))?(a):(b))
@


1.1.12.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.2 2000/06/16 21:47:15 provos Exp $	*/
d94 2
@


1.1.12.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.1.12.1 2001/05/14 22:40:05 niklas Exp $	*/
d215 4
@


1.1.12.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 3
a97 3
int ddp_output( struct mbuf *, ... );
u_int16_t at_cksum( struct mbuf *, int );
int ddp_route(struct mbuf *, struct route * );
d102 1
d104 5
@


1.1.12.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ddp_output.c,v 1.1.12.3 2002/03/28 14:57:37 niklas Exp $	*/
d112 1
a112 3
    M_PREPEND( m, sizeof( struct ddpehdr ), M_DONTWAIT );
    if (!m)
	return (ENOBUFS);
d177 1
d208 4
a211 3
	M_PREPEND(m, SZ_ELAPHDR, M_DONTWAIT);
	if (!m)
	    return (ENOBUFS);
@


