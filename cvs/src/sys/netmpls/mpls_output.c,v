head	1.26;
access;
symbols
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.8
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.4
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.26
date	2015.12.02.08.47.00;	author claudio;	state Exp;
branches;
next	1.25;
commitid	bBZq0t5zueGnkAtX;

1.25
date	2015.09.23.08.49.46;	author mpi;	state Exp;
branches;
next	1.24;
commitid	24xqlqpNt9NPeWH3;

1.24
date	2015.09.13.17.53.44;	author mpi;	state Exp;
branches;
next	1.23;
commitid	zZXiESHR0g5lNO0l;

1.23
date	2015.09.12.20.26.07;	author mpi;	state Exp;
branches;
next	1.22;
commitid	UM7jfgLT8vWQUBm1;

1.22
date	2015.09.12.14.21.04;	author claudio;	state Exp;
branches;
next	1.21;
commitid	sR2CejOm1r5PEmGk;

1.21
date	2015.07.15.22.16.42;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	ncpqEGjDtSFuLAgn;

1.20
date	2014.12.23.03.24.08;	author tedu;	state Exp;
branches;
next	1.19;
commitid	PYnSnAqgemmk34E3;

1.19
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.18;
commitid	t9FBKDfc4VDxpEy2;

1.18
date	2014.11.01.21.40.39;	author mpi;	state Exp;
branches;
next	1.17;
commitid	w0MRp28dmfD1ZzO8;

1.17
date	2014.07.22.11.06.10;	author mpi;	state Exp;
branches;
next	1.16;
commitid	DQakU8LLWV6Iwx84;

1.16
date	2013.04.24.10.20.15;	author mpi;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.04.17.44.43;	author henning;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.04.16.20.02;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.21.17.42.57;	author mikeb;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.08.08.00.56;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.07.14.50.02;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.02.15.41.07;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.28.12.09.10;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.07.13.33.17;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.09.12.55.35;	author michele;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.29.19.26.52;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.28.22.18.44;	author michele;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.08.12.47.45;	author michele;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.16.13.55;	author michele;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.06.19.32.51;	author michele;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.28.01.16.14;	author michele;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Rework the MPLS handling. Remove the lookup loops since nothing is using
them and they make everything so much harder with no gain. Remove the
ifp argument from mpls_input since it is not needed. On the input side
the lookup side is modified a bit when it comes to BOS handling.
Tested in a L3VPN setup with ldpd and bgpd. Commiting now so we can move
on with cleaning up rt_ifp usage. If this breaks L2VPN I will fix it once
reported. OK mpi@@
@
text
@/* $OpenBSD: mpls_output.c,v 1.25 2015/09/23 08:49:46 mpi Exp $ */

/*
 * Copyright (c) 2008 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2008 Michele Marchetto <michele@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/mbuf.h>
#include <sys/systm.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/route.h>

#include <netmpls/mpls.h>

#include <netinet/in.h>
#include <netinet/ip.h>

#ifdef INET6
#include <netinet/ip6.h>
#endif

#ifdef MPLS_DEBUG
#define MPLS_LABEL_GET(l)	((ntohl((l) & MPLS_LABEL_MASK)) >> MPLS_LABEL_OFFSET)
#endif

void		mpls_do_cksum(struct mbuf *);
u_int8_t	mpls_getttl(struct mbuf *, sa_family_t);

int
mpls_output(struct ifnet *ifp, struct mbuf *m, struct sockaddr *dst,
    struct rtentry *rt)
{
	struct sockaddr_mpls	*smpls;
	struct sockaddr_mpls	 sa_mpls;
	struct shim_hdr		*shim;
	struct rt_mpls		*rt_mpls;
	int			 error;
	u_int8_t		 ttl;

	if (rt == NULL || (dst->sa_family != AF_INET &&
	    dst->sa_family != AF_INET6 && dst->sa_family != AF_MPLS)) {
		if (!ISSET(ifp->if_xflags, IFXF_MPLS))
			return (ifp->if_output(ifp, m, dst, rt));
		else
			return (ifp->if_ll_output(ifp, m, dst, rt));
	}

	/* need to calculate checksums now if necessary */
	mpls_do_cksum(m);

	/* initialize sockaddr_mpls */
	bzero(&sa_mpls, sizeof(sa_mpls));
	smpls = &sa_mpls;
	smpls->smpls_family = AF_MPLS;
	smpls->smpls_len = sizeof(*smpls);

	ttl = mpls_getttl(m, dst->sa_family);

	rt_mpls = (struct rt_mpls *)rt->rt_llinfo;
	if (rt_mpls == NULL || (rt->rt_flags & RTF_MPLS) == 0) {
		/* no MPLS information for this entry */
		if (!ISSET(ifp->if_xflags, IFXF_MPLS)) {
#ifdef MPLS_DEBUG
			printf("MPLS_DEBUG: interface not mpls enabled\n");
#endif
			error = ENETUNREACH;
			goto bad;
		}

		return (ifp->if_ll_output(ifp, m, dst, rt));
	}

	/* to be honest here only the push operation makes sense */
	switch (rt_mpls->mpls_operation) {
	case MPLS_OP_PUSH:
		m = mpls_shim_push(m, rt_mpls);
		break;
	case MPLS_OP_POP:
		m = mpls_shim_pop(m);
		break;
	case MPLS_OP_SWAP:
		m = mpls_shim_swap(m, rt_mpls);
		break;
	default:
		error = EINVAL;
		goto bad;
	}

	if (m == NULL) {
		error = ENOBUFS;
		goto bad;
	}

	/* refetch label */
	shim = mtod(m, struct shim_hdr *);
	/* mark first label with BOS flag */
	if (dst->sa_family != AF_MPLS)
		shim->shim_label |= MPLS_BOS_MASK;

	/* write back TTL */
	shim->shim_label &= ~MPLS_TTL_MASK;
	shim->shim_label |= htonl(ttl);

#ifdef MPLS_DEBUG
	printf("MPLS: sending on %s outshim %x outlabel %d\n",
	    ifp->if_xname, ntohl(shim->shim_label),
	    MPLS_LABEL_GET(rt_mpls->mpls_label));
#endif

	/* Output iface is not MPLS-enabled */
	if (!ISSET(ifp->if_xflags, IFXF_MPLS)) {
#ifdef MPLS_DEBUG
		printf("MPLS_DEBUG: interface not mpls enabled\n");
#endif
		error = ENETUNREACH;
		goto bad;
	}

	/* reset broadcast and multicast flags, this is a P2P tunnel */
	m->m_flags &= ~(M_BCAST | M_MCAST);

	smpls->smpls_label = shim->shim_label & MPLS_LABEL_MASK;
	error = ifp->if_ll_output(ifp, m, smplstosa(smpls), rt);
	return (error);
bad:
	m_freem(m);
	return (error);
}

void
mpls_do_cksum(struct mbuf *m)
{
	struct ip *ip;
	u_int16_t hlen;

	in_proto_cksum_out(m, NULL);

	if (m->m_pkthdr.csum_flags & M_IPV4_CSUM_OUT) {
		ip = mtod(m, struct ip *);
		hlen = ip->ip_hl << 2;
		ip->ip_sum = in_cksum(m, hlen);
		m->m_pkthdr.csum_flags &= ~M_IPV4_CSUM_OUT;
	}
}

u_int8_t
mpls_getttl(struct mbuf *m, sa_family_t af)
{
	struct shim_hdr *shim;
	struct ip *ip;
#ifdef INET6
	struct ip6_hdr *ip6hdr;
#endif
	u_int8_t ttl = mpls_defttl;

	/* If the AF is MPLS then inherit the TTL from the present label. */
	if (af == AF_MPLS) {
		shim = mtod(m, struct shim_hdr *);
		ttl = ntohl(shim->shim_label & MPLS_TTL_MASK);
		return (ttl);
	}
	/* Else extract TTL from the encapsualted packet. */
	switch (*mtod(m, u_char *) >> 4) {
	case IPVERSION:
		if (!mpls_mapttl_ip)
			break;
		if (m->m_len < sizeof(*ip))
			break;			/* impossible */
		ip = mtod(m, struct ip *);
		ttl = ip->ip_ttl;
		break;
#ifdef INET6
	case IPV6_VERSION >> 4:
		if (!mpls_mapttl_ip6)
			break;
		if (m->m_len < sizeof(struct ip6_hdr))
			break;			/* impossible */
		ip6hdr = mtod(m, struct ip6_hdr *);
		ttl = ip6hdr->ip6_hlim;
		break;
#endif
	default:
		break;
	}
	return (ttl);
}
@


1.25
log
@Always increment rt_use inside rtalloc(9) instead of doing it in some
specific places.

ok claudio@@, benno@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.24 2015/09/13 17:53:44 mpi Exp $ */
d46 2
a47 2
mpls_output(struct ifnet *ifp0, struct mbuf *m, struct sockaddr *dst,
    struct rtentry *rt0)
a48 1
	struct ifnet		*ifp = ifp0;
a51 1
	struct rtentry		*rt;
d53 1
a53 1
	int			 i, error;
d56 1
a56 1
	if (rt0 == NULL || (dst->sa_family != AF_INET &&
d59 1
a59 1
			return (ifp->if_output(ifp, m, dst, rt0));
d61 1
a61 1
			return (ifp->if_ll_output(ifp, m, dst, rt0));
d75 4
a78 6
	rt = rt0;
	for (i = 0; i < mpls_inkloop; i++) {
		rt_mpls = (struct rt_mpls *)rt->rt_llinfo;
		if (rt_mpls == NULL || (rt->rt_flags & RTF_MPLS) == 0) {
			/* no MPLS information for this entry */
			if (!ISSET(ifp->if_xflags, IFXF_MPLS)) {
d80 1
a80 1
				printf("MPLS_DEBUG: interface not mpls enabled\n");
d82 2
a83 5
				error = ENETUNREACH;
				goto bad;
			}

			return (ifp->if_ll_output(ifp0, m, dst, rt0));
d86 2
a87 14
		switch (rt_mpls->mpls_operation) {
		case MPLS_OP_PUSH:
			m = mpls_shim_push(m, rt_mpls);
			break;
		case MPLS_OP_POP:
			m = mpls_shim_pop(m);
			break;
		case MPLS_OP_SWAP:
			m = mpls_shim_swap(m, rt_mpls);
			break;
		default:
			error = EINVAL;
			goto bad;
		}
d89 15
a103 4
		if (m == NULL) {
			error = ENOBUFS;
			goto bad;
		}
d105 3
a107 23
		/* refetch label */
		shim = mtod(m, struct shim_hdr *);
		/* mark first label with BOS flag */
		if (rt0 == rt && dst->sa_family != AF_MPLS)
			shim->shim_label |= MPLS_BOS_MASK;

		ifp = rt->rt_ifp;
		if (ifp != NULL)
			break;

		smpls->smpls_label = shim->shim_label & MPLS_LABEL_MASK;
		if (rt != rt0)
			rtfree(rt);
		rt = rtalloc(smplstosa(smpls), RT_REPORT|RT_RESOLVE, 0);
		if (rt == NULL) {
			/* no entry for this label */
#ifdef MPLS_DEBUG
			printf("MPLS_DEBUG: label %d not found\n",
			    MPLS_LABEL_GET(shim->shim_label));
#endif
			error = EHOSTUNREACH;
			goto bad;
		}
d110 6
a139 2
	if (rt != rt0)
		rtfree(rt);
@


1.24
log
@There's no point in abstracting ifp->if_output() as long as pf_test()
needs to see lo0 in the output path.

ok claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.23 2015/09/12 20:26:07 mpi Exp $ */
a135 1
		rt->rt_use++;
@


1.23
log
@Stop overwriting the rt_ifp pointer of RTF_LOCAL routes with lo0ifp.

Use instead the RTF_LOCAL flag to loop local traffic back to the
corresponding protocol queue.

With this change rt_ifp is now always the same as rt_ifa->ifa_ifp.

ok claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.22 2015/09/12 14:21:04 claudio Exp $ */
d61 1
a61 1
			return (if_output(ifp, m, dst, rt0));
@


1.22
log
@Use rtfree() instead of playing with the refcount directly. Some care is
needed since rt0 as passed from the upper layer is freed by that layer.
Also if_output does not free the rt so handle that as well.
With and OK mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.21 2015/07/15 22:16:42 deraadt Exp $ */
d61 1
a61 1
			return (ifp->if_output(ifp, m, dst, rt0));
@


1.21
log
@m_freem() can handle NULL, do not check for this condition beforehands.
ok stsp mpi
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.20 2014/12/23 03:24:08 tedu Exp $ */
d53 1
a53 1
	struct rtentry		*rt = rt0;
d61 1
a61 1
			return (ifp->if_output(ifp, m, dst, rt));
d63 1
a63 1
			return (ifp->if_ll_output(ifp, m, dst, rt));
d77 1
d124 2
a136 1
		rt->rt_refcnt--;
d162 4
a165 1
	return (ifp->if_ll_output(ifp, m, smplstosa(smpls), rt));
@


1.20
log
@unifdef some more INET. v4 4life.
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.19 2014/12/05 15:50:04 mpi Exp $ */
d162 1
a162 2
	if (m)
		m_freem(m);
@


1.19
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.18 2014/11/01 21:40:39 mpi Exp $ */
a30 1
#ifdef INET
a32 1
#endif
a169 1
#ifdef INET
a180 1
#endif
@


1.18
log
@Rename rtalloc1() into rtalloc(9) and convert its flags to only enable
functionnality instead of a mix of enable/disable.

ok bluhm@@, jca@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.17 2014/07/22 11:06:10 mpi Exp $ */
d26 1
@


1.17
log
@Fewer <netinet/in_systm.h> !
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.16 2013/04/24 10:20:15 mpi Exp $ */
d124 1
a124 1
		rt = rtalloc1(smplstosa(smpls), RT_REPORT, 0);
@


1.16
log
@Move various extern declarations into their corresponding header file.
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.15 2011/04/04 17:44:43 henning Exp $ */
a31 1
#include <netinet/in_systm.h>
@


1.15
log
@de-guttenberg our stack a bit
we don't need 7 f***ing copies of the same code to do the protocol checksums
(or not, depending on hw capabilities). claudio ok
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.13 2011/01/21 17:42:57 mikeb Exp $ */
a38 2

extern int	mpls_inkloop;
@


1.14
log
@no need to check the csum flags before calling mpls_do_cksum which
immediately checks exactly those flags, claudio ok
@
text
@d178 2
a179 4
	if (m->m_pkthdr.csum_flags & (M_TCPV4_CSUM_OUT | M_UDPV4_CSUM_OUT)) {
		in_delayed_cksum(m);
		m->m_pkthdr.csum_flags &= ~(M_UDPV4_CSUM_OUT|M_TCPV4_CSUM_OUT);
	}
@


1.13
log
@make mpls compile w/o errors when inet6 is not defined

diff from form@@ who's too busy drinking vodka with pelmeni to commit this;
ok claudio
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.12 2010/09/08 08:00:56 claudio Exp $ */
d71 1
a71 3
	if (m->m_pkthdr.csum_flags & (M_IPV4_CSUM_OUT | M_TCPV4_CSUM_OUT |
	    M_UDPV4_CSUM_OUT))
		mpls_do_cksum(m);
@


1.12
log
@Map the TTL when building the initial MPLS stack from the encapsulated
packet. For IP and IPv6 the corresponding mapttl sysctl needs to be set.
This is needed to make traceroute work over MPLS.
OK michele@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.11 2010/07/07 14:50:02 claudio Exp $ */
d198 1
d200 1
d219 1
d228 1
@


1.11
log
@Remove duplicate mtod(). No need to do it twice since the mbuf is not
modified in between.
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.10 2010/06/02 15:41:07 claudio Exp $ */
d36 4
d46 2
a47 1
void	mpls_do_cksum(struct mbuf *);
d60 1
d81 2
d145 1
a145 1
	shim->shim_label |= htonl(mpls_defttl);
d191 38
@


1.10
log
@Kill the mpls enable sysctl knob. Since MPLS needs to be enabled explicitly
on each interface there is no need for yet another knob.
OK michele@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.9 2010/05/28 12:09:10 claudio Exp $ */
a119 1
		shim = mtod(m, struct shim_hdr *);
a120 1

@


1.9
log
@Rework the way we handle MPLS in the kernel. Instead of fumbling MPLS into
ether_output() and later on other L2 output functions use a trick and over-
load the ifp->if_output() function pointer on MPLS enabled interfaces to
go through mpls_output() which will then call the link level output function.
By setting IFXF_MPLS on an interface the output pointers are switched.
This now allows to cleanup the MPLS input and output pathes and fix mpe(4)
so that the MPLS code now actually works for both P and PE systems.
Tested by myself and michele
(A custom kernel with MPLS and mpe enabled is still needed).
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.8 2010/05/07 13:33:17 claudio Exp $ */
d56 1
a56 1
	if (!mpls_enable || rt0 == NULL || (dst->sa_family != AF_INET &&
@


1.8
log
@Start cleaning up the mess called rtalloc*. Kill rtalloc2, make rtalloc1
accept flags for report and nocloning. Move the rtableid into struct route
(with a minor twist for now) and make a few more codepathes rdomain aware.
Appart from the pf.c and route.c bits the diff is mostly mechanical.
More to come...
OK michele, henning
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.7 2009/07/09 12:55:35 michele Exp $ */
d30 6
d42 5
a46 2
struct mbuf *
mpls_output(struct mbuf *m, struct rtentry *rt0)
d48 1
a48 1
	struct ifnet		*ifp = m->m_pkthdr.rcvif;
d54 1
a54 1
	int			 i;
d56 6
a61 3
	if (!mpls_enable) {
		m_freem(m);
		goto bad;
d64 10
a73 2
	/* reset broadcast and multicast flags, this is a P2P tunnel */
	m->m_flags &= ~(M_BCAST | M_MCAST);
d76 4
a79 12
		if (rt == NULL) {
			shim = mtod(m, struct shim_hdr *);

			bzero(&sa_mpls, sizeof(sa_mpls));
			smpls = &sa_mpls;
			smpls->smpls_family = AF_MPLS;
			smpls->smpls_len = sizeof(*smpls);
			smpls->smpls_label = shim->shim_label & MPLS_LABEL_MASK;

			rt = rtalloc1(smplstosa(smpls), RT_REPORT, 0);
			if (rt == NULL) {
				/* no entry for this label */
d81 1
a81 1
				printf("MPLS_DEBUG: label not found\n");
d83 1
a83 1
				m_freem(m);
a85 2
			rt->rt_use++;
		}
d87 1
a87 8
		rt_mpls = (struct rt_mpls *)rt->rt_llinfo;
		if (rt_mpls == NULL || (rt->rt_flags & RTF_MPLS) == 0) {
			/* no MPLS information for this entry */
#ifdef MPLS_DEBUG
			printf("MPLS_DEBUG: no MPLS information attached\n");
#endif
			m_freem(m);
			goto bad;
d90 1
a90 3
		switch (rt_mpls->mpls_operation & (MPLS_OP_PUSH | MPLS_OP_POP |
		    MPLS_OP_SWAP)) {

d101 1
a101 1
			m_freem(m);
d105 2
a106 1
		if (m == NULL)
d108 1
d112 4
a116 1

d120 2
a121 2
		if (rt0 != rt)
			RTFREE(rt);
d123 12
a134 1
		rt = NULL;
d139 1
a139 1
	shim->shim_label |= MPLS_BOS_MASK | htonl(mpls_defttl);
d147 11
a157 2
	if (rt != rt0)
		RTFREE(rt);
d159 2
a160 1
	return (m);
d162 4
a165 2
	if (rt != rt0)
		RTFREE(rt);
d167 18
a184 1
	return (NULL);
@


1.7
log
@Remove commented variable.
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.6 2009/04/29 19:26:52 michele Exp $ */
d65 1
a65 1
			rt = rtalloc1(smplstosa(smpls), 1, 0);
@


1.6
log
@Split up functionalities between mpls_input and mpls_output.
The former is responsible to handle packets destined to localhost,
the latter handles packet that have to be forwarded or the ones
originated from localhost.

"i like it" claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.5 2009/01/28 22:18:44 michele Exp $ */
a44 1
	//u_int32_t		 ttl;
@


1.5
log
@Get rid of the ugly rtentry hack.

We can now act as edge node and allow ipv4 packets to
enter a Label Switched Path and not just forwarding
MPLS packets.

OK claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.4 2009/01/08 12:47:45 michele Exp $ */
d95 2
d98 2
a99 2
			/* We are entring a LSP. There isn't anything to pop
			   or swap yet. */
@


1.4
log
@Fix sockaddr_mpls structure.
Now it contains just the label as it must be.

This introduces a ugly hack in rtentry that will be removed
as soon as possible.

OK claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.3 2008/12/15 16:13:55 michele Exp $ */
d36 2
a37 2
void
mpls_output(struct mbuf *m)
d41 1
a41 2
	struct sockaddr_mpls	*newsmpls;
	struct sockaddr_mpls	 sa_mpls, sa_outmpls;
d43 3
a45 2
	struct rtentry		*rt = NULL;
	u_int32_t		 ttl;
d50 1
a50 1
		return;
a55 14
	if (m->m_len < sizeof(*shim))
		if ((m = m_pullup(m, sizeof(*shim))) == NULL)
			return;

	bzero(&sa_outmpls, sizeof(sa_outmpls));
	newsmpls = &sa_outmpls;
	newsmpls->smpls_family = AF_MPLS;
	newsmpls->smpls_len = sizeof(*smpls);

	shim = mtod(m, struct shim_hdr *);

	/* extract TTL */
	ttl = shim->shim_label & MPLS_TTL_MASK;

d57 2
a58 5
		bzero(&sa_mpls, sizeof(sa_mpls));
		smpls = &sa_mpls;
		smpls->smpls_family = AF_MPLS;
		smpls->smpls_len = sizeof(*smpls);
		smpls->smpls_label = shim->shim_label & MPLS_LABEL_MASK;
d60 9
d70 1
a70 4
		printf("smpls af %d len %d in_label %d in_ifindex %d\n",
		    smpls->smpls_family, smpls->smpls_len,
		    MPLS_LABEL_GET(smpls->smpls_label),
		    ifp->if_index);
d72 5
d78 3
a80 4
		rt = rtalloc1(smplstosa(smpls), 1, 0);

		if (rt == NULL) {
			/* no entry for this label */
d82 1
a82 1
			printf("MPLS_DEBUG: label not found\n");
d85 1
a85 1
			goto done;
d88 1
a88 12
		rt->rt_use++;
		smpls = satosmpls(rt_key(rt));
		newsmpls->smpls_label = rt->rt_mpls;

#ifdef MPLS_DEBUG
		printf("route af %d len %d in_label %d in_ifindex %d\n",
		    smpls->smpls_family, smpls->smpls_len,
		    MPLS_LABEL_GET(smpls->smpls_label),
		    ifp->if_index);
#endif

		switch (rt->rt_flags & (MPLS_OP_PUSH | MPLS_OP_POP |
a90 9
		case MPLS_OP_POP:
			if (MPLS_BOS_ISSET(shim->shim_label)) {
				/* drop to avoid loops */
				m_freem(m);
				goto done;
			}

			m = mpls_shim_pop(m);
			break;
d92 1
a92 1
			m = mpls_shim_push(m, newsmpls);
d94 1
d96 2
a97 2
			m = mpls_shim_swap(m, newsmpls);
			break;
d100 1
a100 1
			goto done;
d104 1
a104 1
			goto done;
d113 3
a115 1
		RTFREE(rt);
d120 2
a121 1
	shim->shim_label = (shim->shim_label & ~MPLS_TTL_MASK) | ttl;
d124 3
a126 4
	printf("MPLS: sending on %s outlabel %x dst af %d in %d out %d\n",
	    ifp->if_xname, ntohl(shim->shim_label), smpls->smpls_family,
	    MPLS_LABEL_GET(smpls->smpls_label),
	    MPLS_LABEL_GET(smpls->smpls_label));
d129 1
a129 3
	(*ifp->if_output)(ifp, m, smplstosa(smpls), rt);
done:
	if (rt)
d131 7
@


1.3
log
@Initial fixup of sockaddr_mpls struct.

Remove smpls_in_iface as labels must be per platform unique.
Remove smpls_out_iface. It is redudant and can be inferred from nexthop.
Move smpls_operation to rt_flags and temporary remove smpls_out_exp.

ok claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: mpls_output.c,v 1.2 2008/11/06 19:32:51 michele Exp $ */
d41 2
a42 1
	struct sockaddr_mpls	 sa_mpls;
d60 5
d75 1
a75 1
		smpls->smpls_in_label = shim->shim_label & MPLS_LABEL_MASK;
d80 1
a80 1
		    MPLS_LABEL_GET(smpls->smpls_in_label),
d97 1
d102 1
a102 1
		    MPLS_LABEL_GET(smpls->smpls_in_label),
d119 1
a119 1
			m = mpls_shim_push(m, smpls);
d122 1
a122 1
			m = mpls_shim_swap(m, smpls);
d149 2
a150 2
	    MPLS_LABEL_GET(smpls->smpls_in_label),
	    MPLS_LABEL_GET(smpls->smpls_out_label));
@


1.2
log
@Fix cvs id tag.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a68 1
		smpls->smpls_in_ifindex = ifp->if_index;
d75 1
a75 1
		    smpls->smpls_in_ifindex);
d96 1
a96 5
		    smpls->smpls_in_ifindex);
		printf("\top %d out_label %d out_ifindex %d\n",
		    smpls->smpls_operation,
		    MPLS_LABEL_GET(smpls->smpls_out_label),
		    smpls->smpls_out_ifindex);
d99 3
a101 1
		switch (smpls->smpls_operation) {
d129 1
a129 1
		if (smpls->smpls_out_ifindex)
@


1.1
log
@Added mpls_output() used to output mpls packets originating from local host.
Strictly similar to mpls_input().

Input and OK claudio@@, OK laurent@@
@
text
@d1 1
a1 1
/* $Id$ */
@

