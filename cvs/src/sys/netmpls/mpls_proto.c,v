head	1.16;
access;
symbols
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2017.03.02.08.58.24;	author mpi;	state Exp;
branches;
next	1.15;
commitid	tz6lHk1OQ6UxADoY;

1.15
date	2017.02.27.19.16.56;	author claudio;	state Exp;
branches;
next	1.14;
commitid	Ukq2QkllmG8rHpFv;

1.14
date	2015.12.03.21.57.59;	author mpi;	state Exp;
branches;
next	1.13;
commitid	nmbu8xP0zmz2PPN0;

1.13
date	2015.10.07.10.50.35;	author mpi;	state Exp;
branches;
next	1.12;
commitid	hPrd2a6fiZdlN2yP;

1.12
date	2015.09.04.08.43.39;	author mpi;	state Exp;
branches;
next	1.11;
commitid	qAevExm24QrBjVNL;

1.11
date	2015.08.30.10.39.16;	author mpi;	state Exp;
branches;
next	1.10;
commitid	avqdJydG8T8nvZhe;

1.10
date	2015.07.18.15.51.17;	author mpi;	state Exp;
branches;
next	1.9;
commitid	lwQKRpFyNEr7kjoF;

1.9
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.8;
commitid	t9FBKDfc4VDxpEy2;

1.8
date	2014.09.08.06.24.13;	author jsg;	state Exp;
branches;
next	1.7;
commitid	ZqXwxwmeo3l29NOg;

1.7
date	2013.04.24.10.20.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.31.10.36.42;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.15.12.42.56;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.08.12.47.45;	author michele;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.15.16.13.55;	author michele;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.23.11.22.23;	author norby;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.23.11.00.35;	author norby;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Convert domain declarations to C99 initializers.

ok dhill@@, florian@@, bluhm@@
@
text
@/*	$OpenBSD: mpls_proto.c,v 1.15 2017/02/27 19:16:56 claudio Exp $	*/

/*
 * Copyright (C) 1999, 2000 and 2001 AYAME Project, WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/rtable.h>

#include <netmpls/mpls.h>

/*
 * MPLS address family: needed for the routing table
 */
struct domain mplsdomain = {
  .dom_family = AF_MPLS,
  .dom_name = "mpls",
  .dom_rtkeylen = sizeof(struct sockaddr_mpls),
  .dom_rtoffset = offsetof(struct sockaddr_mpls, smpls_label),
  .dom_maxplen = 32
};
@


1.15
log
@Retire the AF_MPLS protosw struct. Nothing is using it and the code was super
basic anyway. Simplifies the code a lot also by calling the mpls sysctl no
longer via the protosw but instead directly.
OK mpi@@ on a previous diff. Also tested by renato@@ who actually found a bug
which is now fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.14 2015/12/03 21:57:59 mpi Exp $	*/
d49 5
a53 5
	AF_MPLS, "mpls", NULL, 0, 0,
	NULL,
	0,
	sizeof(struct sockaddr_mpls),
	offsetof(struct sockaddr_mpls, smpls_label), 32
@


1.14
log
@Get rid of rt_mask() and stop allocating a "struct sockaddr" for every
route entry in ART.

rt_plen() now represents the prefix length of a route entry and should
be used instead.

For now use a "struct sockaddr_in6" to represent the mask when needed,
this should be then replaced by the prefix length and RTA_NETMASK only
used for compatibility with userland.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.13 2015/10/07 10:50:35 mpi Exp $	*/
d46 1
a46 1
 * MPLS protocol family:
a47 19
struct protosw mplssw[] = {
{ 0,			&mplsdomain,		0,	0,
  0,			0,			0,	0,
  0,
  mpls_init,		0,			0,	0,	mpls_sysctl
},
{ SOCK_DGRAM,		&mplsdomain,		0,	PR_ATOMIC|PR_ADDR,
  0,			0,			0,	0,
  mpls_raw_usrreq,
  0,			0,			0,	0,	mpls_sysctl,
},
/* raw wildcard */
{ SOCK_RAW,		&mplsdomain,		0,	PR_ATOMIC|PR_ADDR,
  0,			0,			0,	0,
  mpls_raw_usrreq,
  0,			0,			0,	0,	mpls_sysctl,
},
};

d49 3
a51 3
	AF_MPLS, "mpls", mpls_init, 0, 0,
	mplssw,
	&mplssw[nitems(mplssw)],
@


1.13
log
@Initialize the routing table before domains.

The routing table is not an optional component of the network stack
and initializing it inside the "routing domain" requires some ugly
introspection in the domain interface.

This put the rtable* layer at the same level of the if* level.  These
two subsystem are organized around the two global data structure used
in the network stack:

- the global &ifnet list, to be used in process context only, and
- the routing table which can be read in interrupt context.

This change makes the rtable_* layer domain-aware and extends the
"struct domain" such that INET, INET6 and MPLS can specify the length
of the binary key used in lookups.  This allows us to keep, or move
towards, AF-free route and rtable layers.

While here stop the madness and pass the size of the maximum key length
in *byte* to rn_inithead0().

ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.12 2015/09/04 08:43:39 mpi Exp $	*/
d72 1
a72 1
	offsetof(struct sockaddr_mpls, smpls_label)
@


1.12
log
@Make every subsystem using a radix tree call rn_init() and pass the
length of the key as argument.

This way every consumer of the radix tree has a chance to explicitly
initialize the shared data structures and no longer rely on another
subsystem to do the initialization.

As a bonus ``dom_maxrtkey'' is no longer used an die.

ART kernels should now be fully usable because pf(4) and IPSEC properly
initialized the radix tree.

ok chris@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.11 2015/08/30 10:39:16 mpi Exp $	*/
d71 2
a72 2
	rtable_attach,
	offsetof(struct sockaddr_mpls, smpls_label) << 3
@


1.11
log
@Use a global table for domains instead of building a list at run time.

As a side effect there's no need to run if_attachdomain() after the
list of domains has been built.

ok claudio@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.10 2015/07/18 15:51:17 mpi Exp $	*/
d72 1
a72 2
	offsetof(struct sockaddr_mpls, smpls_label) << 3,
	sizeof(struct sockaddr_mpls)
@


1.10
log
@Abstract the routing table internals behind an rtable_* API.

Code abusing the radix internals for the routing table should now
includes <net/rtable.h> and only deal with "struct rtentry".

Code using a radix tree for another purpose can still include
<net/radix.h>.

Inputs from and ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.9 2014/12/05 15:50:04 mpi Exp $	*/
d70 1
a70 1
	&mplssw[nitems(mplssw)], 0,
@


1.9
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.8 2014/09/08 06:24:13 jsg Exp $	*/
d41 1
a41 2
#include <net/radix.h>
#include <net/radix_mpath.h>
d71 1
a71 1
	rn_mpath_inithead,
@


1.8
log
@remove uneeded route.h includes
ok miod@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.7 2013/04/24 10:20:15 mpi Exp $	*/
d40 1
@


1.7
log
@Move various extern declarations into their corresponding header file.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.6 2011/03/31 10:36:42 jasper Exp $	*/
d40 2
a41 1
#include <net/route.h>
@


1.6
log
@- use nitems(); no binary change

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.5 2010/10/15 12:42:56 claudio Exp $	*/
a46 3

extern	struct domain mplsdomain;

@


1.5
log
@Enable multipath support on the MPLS routing table. ldpd needs this and
the priority support that comes together with it. Currently no balancing
will happen, only the first path will be used.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.4 2009/01/08 12:47:45 michele Exp $	*/
d72 1
a72 1
	&mplssw[sizeof(mplssw)/sizeof(mplssw[0])], 0,
@


1.4
log
@Fix sockaddr_mpls structure.
Now it contains just the label as it must be.

This introduces a ugly hack in rtentry that will be removed
as soon as possible.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.3 2008/12/15 16:13:55 michele Exp $	*/
d73 1
a73 1
	rn_inithead,
@


1.3
log
@Initial fixup of sockaddr_mpls struct.

Remove smpls_in_iface as labels must be per platform unique.
Remove smpls_out_iface. It is redudant and can be inferred from nexthop.
Move smpls_operation to rt_flags and temporary remove smpls_out_exp.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.2 2008/04/23 11:22:23 norby Exp $	*/
d74 1
a74 1
	offsetof(struct sockaddr_mpls, smpls_in_label) << 3,
@


1.2
log
@I hate working outside the tree.

Fix my faulty import....
@
text
@d1 1
a1 1
/*	$OpenBSD: mpls_proto.c,v 1.1 2008/04/23 11:00:35 norby Exp $	*/
d74 1
a74 1
	offsetof(struct sockaddr_mpls, smpls_in_ifindex) << 3,
@


1.1
log
@Import MPLS (Multi Protocol Label Switching)

MPLS support partly based on the (abandoned?) AYAME project.
Basic LSR (Label Switch Router) functionality is present, but not fully
functional yet.

It is currently possible to insert entries in the LIB (Label Information Base)
with route(8), but setting the operation type is not supported yet.

Imported to allow more people to work on this in the coming weeks.

ok claudio@@ laurent@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a70 79
	mplssw,
	&mplssw[sizeof(mplssw)/sizeof(mplssw[0])], 0,
	rn_inithead,
	offsetof(struct sockaddr_mpls, smpls_in_ifindex) << 3,
	sizeof(struct sockaddr_mpls)
};
/*
 * Copyright (C) 1999, 2000 and 2001 AYAME Project, WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/*
 *
 *	$Id: ayame-src.diff,v 1.2 2006/03/04 10:45:08 koifren Exp $
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>

#include <net/if.h>
#include <net/route.h>

#include <netmpls/mpls.h>
#include <netmpls/mpls_var.h>

/*
 * MPLS protocol family:
 */

extern	struct domain mplsdomain;

struct protosw mplssw[] = {
{ 0,			&mplsdomain,		0,	0,
  0,			0,			0,	0,
  0,
  mpls_init,		0,			0,	0,	mpls_sysctl
},
{ SOCK_DGRAM,		&mplsdomain,		0,	PR_ATOMIC|PR_ADDR,
  0,			0,			0,	0,
  mpls_raw_usrreq,
  0,			0,			0,	0,	mpls_sysctl,
},
/* raw wildcard */
{ SOCK_RAW,		&mplsdomain,		0,	PR_ATOMIC|PR_ADDR,
  0,			0,			0,	0,
  mpls_raw_usrreq,
  0,			0,			0,	0,	mpls_sysctl,
},
};

struct domain mplsdomain = {
	AF_MPLS, "mpls", /*mpls_init */ 0 , 0, 0,
@

