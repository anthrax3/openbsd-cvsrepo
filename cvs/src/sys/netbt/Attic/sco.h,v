head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2014.07.11.21.54.38;	author tedu;	state dead;
branches;
next	1.5;
commitid	0n9cIGBISFAEt4b1;

1.5
date	2009.11.21.13.05.32;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.22.04.42.58;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.27.19.41.14;	author thib;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.01.02.46.12;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.30.03.42.53;	author uwe;	state Exp;
branches;
next	;


desc
@@


1.6
log
@"It's not the years, honey; it's the mileage."

bluetooth support doesn't work and isn't going anywhere. the current
design is a dead end, and should not be the basis for any future support.
general consensus says to whack it so as to not mislead the unwary.
@
text
@/*	$OpenBSD: sco.h,v 1.5 2009/11/21 13:05:32 guenther Exp $	*/
/*	$NetBSD: sco.h,v 1.3 2008/08/06 15:01:24 plunky Exp $	*/

/*-
 * Copyright (c) 2006 Itronix Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of Itronix Inc. may not be used to endorse
 *    or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ITRONIX INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ITRONIX INC. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _NETBT_SCO_H_
#define _NETBT_SCO_H_

#define SO_SCO_MTU		1
#define SO_SCO_HANDLE		2

#ifdef _KERNEL
/*
 * SCO protocol control block
 */
struct sco_pcb {
	struct hci_link		*sp_link;	/* SCO link */
	unsigned int		 sp_flags;	/* flags */
	bdaddr_t		 sp_laddr;	/* local address */
	bdaddr_t		 sp_raddr;	/* remote address */
	unsigned int		 sp_mtu;	/* link MTU */
	int			 sp_pending;	/* number of packets pending */

	const struct btproto	*sp_proto;	/* upper layer protocol */
	void			*sp_upper;	/* upper layer argument */

	LIST_ENTRY(sco_pcb)	 sp_next;
};

LIST_HEAD(sco_pcb_list, sco_pcb);
extern struct sco_pcb_list sco_pcb;

/* sp_flags */
#define SP_LISTENING		(1<<0)		/* is listening pcb */

/* sco_socket.c */
struct socket;
extern int sco_sendspace;
extern int sco_recvspace;
int sco_usrreq(struct socket *, int, struct mbuf *,
		struct mbuf *, struct mbuf *, struct proc *);
int sco_ctloutput(int, struct socket *, int, int, struct mbuf **);

/* sco_upper.c */
int sco_attach(struct sco_pcb **, const struct btproto *, void *);
int sco_bind(struct sco_pcb *, struct sockaddr_bt *);
int sco_sockaddr(struct sco_pcb *, struct sockaddr_bt *);
int sco_connect(struct sco_pcb *, struct sockaddr_bt *);
int sco_peeraddr(struct sco_pcb *, struct sockaddr_bt *);
int sco_disconnect(struct sco_pcb *, int);
int sco_detach(struct sco_pcb **);
int sco_listen(struct sco_pcb *);
int sco_send(struct sco_pcb *, struct mbuf *);
int sco_setopt(struct sco_pcb *, int, struct mbuf *);
int sco_getopt(struct sco_pcb *, int, void *);

#endif	/* _KERNEL */

#endif	/* _NETBT_SCO_H_ */
@


1.5
log
@User triggerable KASSERT()s and NULL dereferences in netbt setsockopt()s,
found by Clement LECIGNE, localhost DoS everywhere.  Also, don't leak
the mbuf when the wrong level is used.

ok claudio@@, "just commit" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sco.h,v 1.4 2008/11/22 04:42:58 uwe Exp $	*/
@


1.4
log
@Sync bluetooth with NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: sco.h,v 1.3 2008/05/27 19:41:14 thib Exp $	*/
d81 1
a81 1
int sco_setopt(struct sco_pcb *, int, void *);
@


1.3
log
@bring netbt's usrreqs up to speed on the usrreq changes.
allows it too compile again.

pointed out by mk@@ and deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD: sco.h,v 1.2 2007/06/01 02:46:12 uwe Exp $	*/
/*	$NetBSD: sco.h,v 1.2 2006/07/26 10:20:56 tron Exp $	*/
@


1.2
log
@complete the sys/netbt import and adopt some more code to our interfaces
@
text
@d1 1
a1 1
/*	$OpenBSD: sco.h,v 1.1 2007/05/30 03:42:53 uwe Exp $	*/
d68 1
a68 1
		struct mbuf *, struct mbuf *);
@


1.1
log
@Import parts of the NetBSD bluetooth stack; ok gwk, and grange on removal
of the existing code
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 1
a68 1
		struct mbuf *, struct mbuf *, struct proc *);
@

