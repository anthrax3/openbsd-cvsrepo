head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.20
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2013.08.20.09.14.29;	author mpi;	state dead;
branches;
next	1.10;

1.10
date	2009.01.28.15.12.03;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.06.02.18.39;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.03.10.52.11;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.05.21.48.57;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.04.22.40.16;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.16.12.54.08;	author ho;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	96.11.09.03.29.00;	author chuck;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	96.07.03.17.24.29;	author chuck;	state Exp;
branches;
next	1.1;

1.1
date	96.06.30.21.40.13;	author chuck;	state Exp;
branches;
next	;

1.3.14.1
date	2001.07.04.10.55.41;	author niklas;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2002.03.28.14.57.38;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@tedu netnatm and ueagle(4).

ok mikeb@@, sthen@@, tedu@@ (implied), doc bits ok jmc@@
@
text
@/*	$OpenBSD: natm_pcb.c,v 1.10 2009/01/28 15:12:03 claudio Exp $	*/

/*
 *
 * Copyright (c) 1996 Charles D. Cranor and Washington University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor and
 *      Washington University.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * atm_pcb.c: manage atm protocol control blocks and keep IP and NATM
 * from trying to use each other's VCs.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>
#include <sys/malloc.h>

#include <net/if.h>
#include <net/radix.h>
#include <net/route.h>

#include <netinet/in.h>

#include <netnatm/natm.h>

struct npcblist	natm_pcbs;

/*
 * npcb_alloc: allocate a npcb [in the free state]
 */

struct natmpcb *npcb_alloc(wait)

int wait;

{
  struct natmpcb *npcb;

  npcb = malloc(sizeof(*npcb), M_PCB, wait | M_ZERO);

  if (npcb) {
    npcb->npcb_flags = NPCB_FREE;
  }
  return(npcb);
}


/*
 * npcb_free: free a npcb
 */

void npcb_free(npcb, op)

struct natmpcb *npcb;
int op;

{
  int s = splnet();

  if ((npcb->npcb_flags & NPCB_FREE) == 0) {
    LIST_REMOVE(npcb, pcblist);
    npcb->npcb_flags = NPCB_FREE;
  }
  if (op == NPCB_DESTROY) {
    if (npcb->npcb_inq) {
      npcb->npcb_flags = NPCB_DRAIN;	/* flag for distruction */
    } else {
      free(npcb, M_PCB);		/* kill it! */
    }
  }

  splx(s);
}


/*
 * npcb_add: add or remove npcb from main list
 *   returns npcb if ok
 */

struct natmpcb *npcb_add(npcb, ifp, vci, vpi)

struct natmpcb *npcb;
struct ifnet *ifp;
u_int16_t vci;
u_int8_t vpi;

{
  struct natmpcb *cpcb = NULL;		/* current pcb */
  int s = splnet();


  /*
   * lookup required
   */

  LIST_FOREACH(cpcb, &natm_pcbs, pcblist) {
    if (ifp == cpcb->npcb_ifp && vci == cpcb->npcb_vci && vpi == cpcb->npcb_vpi)
      break;
  }

  /*
   * add & something already there?
   */

  if (cpcb) {
    cpcb = NULL;
    goto done;					/* fail */
  }
    
  /*
   * need to allocate a pcb?
   */

  if (npcb == NULL) {
    cpcb = npcb_alloc(M_NOWAIT);	/* could be called from lower half */
    if (cpcb == NULL) 
      goto done;			/* fail */
  } else {
    cpcb = npcb;
  }

  cpcb->npcb_ifp = ifp;
  cpcb->ipaddr.s_addr = 0;
  cpcb->npcb_vci = vci;
  cpcb->npcb_vpi = vpi;
  cpcb->npcb_flags = NPCB_CONNECTED;

  LIST_INSERT_HEAD(&natm_pcbs, cpcb, pcblist);

done:
  splx(s);
  return(cpcb);
}



#ifdef DDB

int npcb_dump(void);

int npcb_dump()

{
  struct natmpcb *cpcb;

  printf("npcb dump:\n");
  LIST_FOREACH(cpcb, &natm_pcbs, pcblist) {
    printf("if=%s, vci=%d, vpi=%d, IP=0x%x, sock=%p, flags=0x%x, inq=%d\n",
	cpcb->npcb_ifp->if_xname, cpcb->npcb_vci, cpcb->npcb_vpi,
	cpcb->ipaddr.s_addr, cpcb->npcb_socket, 
	cpcb->npcb_flags, cpcb->npcb_inq);
  }
  printf("done\n");
  return(0);
}

#endif
@


1.10
log
@Use extern for variable declarations in .h files so that we don't end up with
multiple common warnings when linking a kernel with NATM. Put the real variable
into natm_pcb.c which seems to be a good place for the pcb list. OK kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.9 2007/10/06 02:18:39 krw Exp $	*/
@


1.9
log
@Oops. Forgot to do FREE -> free when I did MALLOC -> malloc.
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.8 2007/10/03 10:52:11 krw Exp $	*/
d56 2
@


1.8
log
@MALLOC+bzero -> malloc+M_ZERO.

In ip_esp.c all allocated memory is now zero'd in the
"malloc(sizeof(*tc) + alen ..." case. The +alen memory was not
initialized by the bzero() call. Noticed by chl@@.

"Looks good" art@@ "seems ok" chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.7 2006/03/05 21:48:57 miod Exp $	*/
d97 1
a97 1
      FREE(npcb, M_PCB);		/* kill it! */
@


1.7
log
@Use more queue macros rather than doing it by hand; ok otto@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.6 2006/03/04 22:40:16 brad Exp $	*/
d68 1
a68 1
  MALLOC(npcb, struct natmpcb *, sizeof(*npcb), M_PCB, wait);
a70 1
    bzero(npcb, sizeof(*npcb));
@


1.6
log
@With the exception of two other small uncommited diffs this moves
the remainder of the network stack from splimp to splnet.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.5 2002/03/14 01:27:12 millert Exp $	*/
d127 1
a127 2
  for (cpcb = natm_pcbs.lh_first ; cpcb != NULL ; 
					cpcb = cpcb->pcblist.le_next) {
d178 1
a178 2
  for (cpcb = natm_pcbs.lh_first ; cpcb != NULL ; 
					cpcb = cpcb->pcblist.le_next) {
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.4 2001/05/16 12:54:08 ho Exp $	*/
d88 1
a88 1
  int s = splimp();
d120 1
a120 1
  int s = splimp();
@


1.4
log
@No need to check M_WAIT/M_WAITOK malloc return values. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.3 1996/11/09 03:29:00 chuck Exp $	*/
d171 1
a171 1
int npcb_dump __P((void));
@


1.4.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.4 2001/05/16 12:54:08 ho Exp $	*/
d171 1
a171 1
int npcb_dump(void);
@


1.3
log
@netbsd pr#2918 (jukka.partanen@@research.nokia.com):
 - fix up netnatm so that it compiles with new warning flags (and
        install headers)
 - sync in some minor changes from netbsd (Matthias Drochner)
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.4 1996/11/09 03:26:27 chuck Exp $	*/
a68 4

#ifdef DIAGNOSTIC
  if (wait == M_WAITOK && npcb == NULL) panic("npcb_alloc: malloc didn't wait");
#endif
@


1.3.14.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: natm_pcb.c,v 1.3 1996/11/09 03:29:00 chuck Exp $	*/
d69 4
@


1.3.14.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d171 1
a171 1
int npcb_dump(void);
@


1.2
log
@ported to FreeBSD 2.2-960612-SNAP.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d175 2
d185 1
a185 1
    printf("if=%s, vci=%d, vpi=%d, IP=0x%x, sock=0x%x, flags=0x%x, inq=%d\n",
@


1.1
log
@new: protocol layer to provide you with native mode ATM access.
	you can open raw aal5 and aal0 vcs with this protocol layer.
@
text
@d41 2
@
