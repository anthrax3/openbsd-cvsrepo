head	1.10;
access;
symbols
	OPENBSD_5_4:1.9.0.18
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.16
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.14
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.12
	OPENBSD_5_0:1.9.0.10
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.8
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.26
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.24
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.22
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.20
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.22
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.20
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2013.08.20.09.14.29;	author mpi;	state dead;
branches;
next	1.9;

1.9
date	2009.05.31.19.17.20;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.28.15.12.03;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.27.19.57.45;	author thib;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.12;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.10.11.01.32.08;	author angelos;	state Exp;
branches
	1.5.12.1
	1.5.22.1;
next	1.4;

1.4
date	97.10.11.01.21.17;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	97.07.19.22.56.35;	author chuck;	state Exp;
branches;
next	1.2;

1.2
date	96.07.03.17.24.30;	author chuck;	state Exp;
branches;
next	1.1;

1.1
date	96.06.30.21.40.14;	author chuck;	state Exp;
branches;
next	;

1.5.12.1
date	2002.03.28.14.57.38;	author niklas;	state Exp;
branches;
next	;

1.5.22.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@tedu netnatm and ueagle(4).

ok mikeb@@, sthen@@, tedu@@ (implied), doc bits ok jmc@@
@
text
@/*	$OpenBSD: natm.h,v 1.9 2009/05/31 19:17:20 claudio Exp $	*/

/*
 *
 * Copyright (c) 1996 Charles D. Cranor and Washington University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor and
 *      Washington University.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * natm.h: native mode atm
 */


/*
 * supported protocols
 */

#define PROTO_NATMAAL0		1
#define PROTO_NATMAAL5		2	

/*
 * sockaddr_natm
 */

struct sockaddr_natm {
  u_int8_t	snatm_len;		/* length */
  u_int8_t	snatm_family;		/* AF_NATM */
  char		snatm_if[IFNAMSIZ];	/* interface name */
  u_int16_t	snatm_vci;		/* vci */
  u_int8_t	snatm_vpi;		/* vpi */
};


#ifdef _KERNEL

/*
 * natm protocol control block
 */

struct natmpcb {
  LIST_ENTRY(natmpcb) pcblist;		/* list pointers */
  u_int	npcb_inq;			/* # of our pkts in proto q */
  struct socket	*npcb_socket;		/* backpointer to socket */
  struct ifnet *npcb_ifp;		/* pointer to hardware */
  struct in_addr ipaddr;		/* remote IP address, if NPCB_IP */
  u_int16_t npcb_vci;			/* VCI */
  u_int8_t npcb_vpi;			/* VPI */
  u_int8_t npcb_flags;			/* flags */
};

/* flags */
#define NPCB_FREE	0x01		/* free (not on any list) */
#define NPCB_CONNECTED	0x02		/* connected */
#define NPCB_IP		0x04		/* used by IP */
#define NPCB_DRAIN	0x08		/* destory as soon as inq == 0 */
#define NPCB_RAW	0x10		/* in 'raw' mode? */

/* flag arg to npcb_free */
#define NPCB_REMOVE	0		/* remove from global list */
#define NPCB_DESTROY	1		/* destroy and be free */

/*
 * NPCB_RAWCC is a hack which applies to connections in 'raw' mode.   it 
 * is used to override the sbspace() macro when you *really* don't want 
 * to drop rcv data.   the recv socket buffer size is raised to this value.
 *
 * XXX: socket buffering needs to be looked at.
 */

#define NPCB_RAWCC (1024*1024)		/* 1MB */

LIST_HEAD(npcblist, natmpcb);

/* global data structures */

extern	struct npcblist natm_pcbs;	/* global list of pcbs */
extern	struct ifqueue natmintrq;	/* natm packet input queue */
#define	NATM_STAT
#ifdef NATM_STAT
extern	u_int natm_sodropcnt,
		natm_sodropbytes;	/* account of droppage */
extern	u_int natm_sookcnt,
		natm_sookbytes;		/* account of ok */
#endif

/* atm_rawioctl: kernel's version of SIOCRAWATM [for internal use only!] */
struct atm_rawioctl {
  struct natmpcb *npcb;
  int rawvalue;
}; 
#define SIOCXRAWATM     _IOWR('a', 125, struct atm_rawioctl)

/* external functions */

/* natm_pcb.c */
struct	natmpcb *npcb_alloc(int);
void	npcb_free(struct natmpcb *, int);
struct	natmpcb *npcb_add(struct natmpcb *, struct ifnet *, int, int);

/* natm.c */
int	natm_usrreq(struct socket *, int, struct mbuf *,
	    struct mbuf *, struct mbuf *, struct proc *);
int	natm0_sysctl(int *, u_int, void *, size_t *, void *, size_t);
int	natm5_sysctl(int *, u_int, void *, size_t *, void *, size_t);
void	natmintr(void);

#endif
@


1.9
log
@Remove some #ifdef / #define maze that is not needed at all.
OK deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.8 2009/01/28 15:12:03 claudio Exp $	*/
@


1.8
log
@Use extern for variable declarations in .h files so that we don't end up with
multiple common warnings when linking a kernel with NATM. Put the real variable
into natm_pcb.c which seems to be a good place for the pcb list. OK kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.7 2008/05/27 19:57:45 thib Exp $	*/
a58 14

#if defined(__FreeBSD__) && defined(KERNEL)

#ifndef _KERNEL
#define _KERNEL
#endif

#define SPLSOFTNET() splnet()

#elif defined(__NetBSD__) || defined(__OpenBSD__)

#define SPLSOFTNET() splsoftnet()

#endif
@


1.7
log
@bring the netnatm usrreq's also up to speed on the addition of the
struct proc argument to the usrreq's routines...
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.6 2002/03/14 01:27:12 millert Exp $	*/
d116 1
a116 1
struct npcblist natm_pcbs;		/* global list of pcbs */
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.5 1997/10/11 01:32:08 angelos Exp $	*/
a140 1
#if defined(__NetBSD__)
d142 1
a142 5
                             struct mbuf *, struct mbuf *, struct proc *);
#elif defined(__OpenBSD__) || defined(FreeBSD)
int	natm_usrreq(struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *);
#endif
@


1.5
log
@Keep the ifdef for NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.4 1997/10/11 01:21:17 angelos Exp $	*/
d136 3
a138 3
struct	natmpcb *npcb_alloc __P((int));
void	npcb_free __P((struct natmpcb *, int));
struct	natmpcb *npcb_add __P((struct natmpcb *, struct ifnet *, int, int));
d142 2
a143 2
int	natm_usrreq __P((struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *, struct proc *));
d145 2
a146 2
int	natm_usrreq __P((struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *));
d148 3
a150 3
int	natm0_sysctl __P((int *, u_int, void *, size_t *, void *, size_t));
int	natm5_sysctl __P((int *, u_int, void *, size_t *, void *, size_t));
void	natmintr __P((void));
@


1.5.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.5 1997/10/11 01:32:08 angelos Exp $	*/
d136 3
a138 3
struct	natmpcb *npcb_alloc(int);
void	npcb_free(struct natmpcb *, int);
struct	natmpcb *npcb_add(struct natmpcb *, struct ifnet *, int, int);
d142 2
a143 2
int	natm_usrreq(struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *, struct proc *);
d145 2
a146 2
int	natm_usrreq(struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *);
d148 3
a150 3
int	natm0_sysctl(int *, u_int, void *, size_t *, void *, size_t);
int	natm5_sysctl(int *, u_int, void *, size_t *, void *, size_t);
void	natmintr(void);
@


1.5.12.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d136 3
a138 3
struct	natmpcb *npcb_alloc(int);
void	npcb_free(struct natmpcb *, int);
struct	natmpcb *npcb_add(struct natmpcb *, struct ifnet *, int, int);
d142 2
a143 2
int	natm_usrreq(struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *, struct proc *);
d145 2
a146 2
int	natm_usrreq(struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *);
d148 3
a150 3
int	natm0_sysctl(int *, u_int, void *, size_t *, void *, size_t);
int	natm5_sysctl(int *, u_int, void *, size_t *, void *, size_t);
void	natmintr(void);
@


1.4
log
@Fix some minor compilation problems.
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.3 1997/07/19 22:56:35 chuck Exp $	*/
d141 4
d147 1
@


1.3
log
@fix typo in comment (NetBSD PR3836: Curt Sampson)
@
text
@d1 1
a1 1
/*	$OpenBSD: natm.h,v 1.2 1996/07/03 17:24:30 chuck Exp $	*/
a140 4
#if defined(__NetBSD__) || defined(__OpenBSD__)
int	natm_usrreq __P((struct socket *, int, struct mbuf *,
                             struct mbuf *, struct mbuf *, struct proc *));
#elif defined(__FreeBSD__)
a142 1
#endif
@


1.2
log
@ported to FreeBSD 2.2-960612-SNAP.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 1
a85 1
  struct in_addr ipaddr;		/* remote IP address, if APCB_IP */
@


1.1
log
@new: protocol layer to provide you with native mode ATM access.
	you can open raw aal5 and aal0 vcs with this protocol layer.
@
text
@d60 14
d141 1
d144 4
@
