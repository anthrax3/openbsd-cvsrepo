head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.8
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.42
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.40
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.38
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.36
	OPENBSD_5_0:1.8.0.34
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.32
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.30
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.26
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.22
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.20
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.18
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.16
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.14
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.12
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.04.17.04.43.21;	author guenther;	state Exp;
branches;
next	1.9;
commitid	zOwbm07fp3gPB2qr;

1.9
date	2013.08.13.05.52.25;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.28.20;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.02.06.23.07.47;	author millert;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	98.12.28.17.49.21;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.08.19.22.26.59;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	96.03.31.13.16.27;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.02.29.09.25.04;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.21.14.42.32;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.23;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2003.06.07.11.07.44;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Tweaks utimensat/futimens handling to always update ctime, even when both
atime and mtime are UTIME_OMIT (at least for ufs, tmpfs, and ext2fs), and
to correctly handle a timestamp of -1.

ok millert@@
@
text
@/*	$OpenBSD: xdr_subs.h,v 1.9 2013/08/13 05:52:25 guenther Exp $	*/
/*	$NetBSD: xdr_subs.h,v 1.11 1996/02/18 11:54:12 fvdl Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Rick Macklem at The University of Guelph.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)xdr_subs.h	8.3 (Berkeley) 3/30/95
 */


#ifndef _NFS_XDR_SUBS_H_
#define _NFS_XDR_SUBS_H_

/*
 * Macros used for conversion to/from xdr representation by nfs...
 * These use the MACHINE DEPENDENT routines ntohl, htonl
 * As defined by "XDR: External Data Representation Standard" RFC1014
 *
 * To simplify the implementation, we use ntohl/htonl even on big-endian
 * machines, and count on them being `#define'd away.  Some of these
 * might be slightly more efficient as quad_t copies on a big-endian,
 * but we cannot count on their alignment anyway.
 */

#define	fxdr_unsigned(t, v)	((t)ntohl((int32_t)(v)))
#define	txdr_unsigned(v)	(htonl((int32_t)(v)))

#define	fxdr_nfsv2time(f, t) do { \
	(t)->tv_sec = ntohl(((struct nfsv2_time *)(f))->nfsv2_sec); \
	if (((struct nfsv2_time *)(f))->nfsv2_usec != 0xffffffff) \
		(t)->tv_nsec = 1000 * ntohl(((struct nfsv2_time *)(f))->nfsv2_usec); \
	else \
		(t)->tv_nsec = 0; \
} while (0)

struct nfsv2_time;
void txdr_nfsv2time(const struct timespec *_from, struct nfsv2_time *_to);

#define	fxdr_nfsv3time(f, t) do { \
	(t)->tv_sec = ntohl(((struct nfsv3_time *)(f))->nfsv3_sec); \
	(t)->tv_nsec = ntohl(((struct nfsv3_time *)(f))->nfsv3_nsec); \
} while (0)
#define	txdr_nfsv3time(f, t) do { \
	((struct nfsv3_time *)(t))->nfsv3_sec = htonl((f)->tv_sec); \
	((struct nfsv3_time *)(t))->nfsv3_nsec = htonl((f)->tv_nsec); \
} while (0)

#define	fxdr_hyper(f) 						\
        ((((u_quad_t)ntohl(((u_int32_t *)(f))[0])) << 32) |	\
	 (u_quad_t)(ntohl(((u_int32_t *)(f))[1])))


#define	txdr_hyper(f, t) do {						\
	((u_int32_t *)(t))[0] = htonl((u_int32_t)((f) >> 32));		\
	((u_int32_t *)(t))[1] = htonl((u_int32_t)((f) & 0xffffffff));	\
} while (0)

#endif
@


1.9
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.8 2003/06/02 23:28:20 millert Exp $	*/
d63 3
a65 7
#define	txdr_nfsv2time(f, t) do { \
	((struct nfsv2_time *)(t))->nfsv2_sec = htonl((f)->tv_sec); \
	if ((f)->tv_nsec != -1) \
		((struct nfsv2_time *)(t))->nfsv2_usec = htonl((f)->tv_nsec / 1000); \
	else \
		((struct nfsv2_time *)(t))->nfsv2_usec = 0xffffffff; \
} while (0)
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.7 1999/02/06 23:07:47 millert Exp $	*/
d56 1
a56 1
#define	fxdr_nfsv2time(f, t) { \
d62 2
a63 2
}
#define	txdr_nfsv2time(f, t) { \
d69 1
a69 1
}
d71 1
a71 1
#define	fxdr_nfsv3time(f, t) { \
d74 2
a75 2
}
#define	txdr_nfsv3time(f, t) { \
d78 1
a78 1
}
d85 1
a85 1
#define	txdr_hyper(f, t) {						\
d88 1
a88 1
}
@


1.7
log
@Use bitwise operations to extract high and low words from the quad
in txdr_hyper.  This should be more portable than casting to an array
of ints and pulling out the two 32-bit words (this produced incorrect
results on alpha for the high word for filesystems < 4gig).  As a side
effect, txdr_hyper now takes a u_quad_t as its first arg, not u_quad_t *.
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.6 1998/12/28 17:49:21 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7.6.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.7 1999/02/06 23:07:47 millert Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6
log
@Fix fxdr_hyper macro.  The cast to signed int caused incorrect behavior in the shift.  This only seems to have affected big endian machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.5 1998/08/19 22:26:59 csapuntz Exp $	*/
d89 3
a91 3
#define	txdr_hyper(f, t) { \
	((int32_t *)(t))[0] = htonl(((int32_t *)(f))[_QUAD_HIGHWORD]); \
	((int32_t *)(t))[1] = htonl(((int32_t *)(f))[_QUAD_LOWWORD]); \
@


1.5
log
@

Change fxdr_hyper to return a u_quad_t. This minimizes the evil clobbering
of lvalues that ANSI abhors.

And it fixes df on NFS version 3 mounts on Sparcs.
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.4 1996/03/31 13:16:27 mickey Exp $	*/
d85 2
a86 2
        ((((u_quad_t)ntohl(((int32_t *)(f))[0])) << 32) |	\
	 (u_quad_t)(ntohl(((int32_t *)(f))[1])))
@


1.4
log
@From NetBSD: NFSv3 import (tomorrow's Net's kernel)
Open's patches kept in. i'll possibly take a look at Lite2 soon,
is there smth usefull ?..
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_subs.h,v 1.3 1996/02/29 09:25:04 niklas Exp $	*/
d84 5
a88 4
#define	fxdr_hyper(f, t) { \
	((int32_t *)(t))[_QUAD_HIGHWORD] = ntohl(((int32_t *)(f))[0]); \
	((int32_t *)(t))[_QUAD_LOWWORD] = ntohl(((int32_t *)(f))[1]); \
}
@


1.3
log
@From NetBSD: merge with 960217 (still NFSv2)
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: xdr_subs.h,v 1.10 1996/02/01 00:41:32 jtc Exp $	*/
d39 1
a39 1
 *	@@(#)xdr_subs.h	8.1 (Berkeley) 6/10/93
d42 4
d60 4
a63 4
#define	fxdr_nfstime(f, t) { \
	(t)->tv_sec = ntohl((f)->nfs_sec); \
	if ((f)->nfs_usec != 0xffffffff) \
		(t)->tv_nsec = 1000 * ntohl((f)->nfs_usec); \
d67 6
a72 3
#define	txdr_nfstime(f, t) { \
	(t)->nfs_sec = htonl((f)->tv_sec); \
	(t)->nfs_usec = htonl((f)->tv_nsec) / 1000; \
d75 7
a81 7
#define	fxdr_nqtime(f, t) { \
	(t)->tv_sec = ntohl((f)->nq_sec); \
	(t)->tv_nsec = ntohl((f)->nq_nsec); \
}
#define	txdr_nqtime(f, t) { \
	(t)->nq_sec = htonl((f)->tv_sec); \
	(t)->nq_nsec = htonl((f)->tv_nsec); \
d92 2
@


1.2
log
@from cgd; handle 64-bit pointers and longs
@
text
@d1 2
a2 1
/*	$NetBSD: xdr_subs.h,v 1.9 1995/12/19 23:08:30 cgd Exp $	*/
d57 1
a57 1
	(t)->ts_sec = ntohl((f)->nfs_sec); \
d59 1
a59 1
		(t)->ts_nsec = 1000 * ntohl((f)->nfs_usec); \
d61 1
a61 1
		(t)->ts_nsec = 0; \
d64 2
a65 2
	(t)->nfs_sec = htonl((f)->ts_sec); \
	(t)->nfs_usec = htonl((f)->ts_nsec) / 1000; \
d69 2
a70 2
	(t)->ts_sec = ntohl((f)->nq_sec); \
	(t)->ts_nsec = ntohl((f)->nq_nsec); \
d73 2
a74 2
	(t)->nq_sec = htonl((f)->ts_sec); \
	(t)->nq_nsec = htonl((f)->ts_nsec); \
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: xdr_subs.h,v 1.8 1995/01/13 16:15:02 mycroft Exp $	*/
d52 2
a53 2
#define	fxdr_unsigned(t, v)	((t)ntohl((long)(v)))
#define	txdr_unsigned(v)	(htonl((long)(v)))
d56 3
a58 3
	(t)->ts_sec = ntohl(((struct nfsv2_time *)(f))->nfs_sec); \
	if (((struct nfsv2_time *)(f))->nfs_usec != 0xffffffff) \
		(t)->ts_nsec = 1000 * ntohl(((struct nfsv2_time *)(f))->nfs_usec); \
d63 2
a64 2
	((struct nfsv2_time *)(t))->nfs_sec = htonl((f)->ts_sec); \
	((struct nfsv2_time *)(t))->nfs_usec = htonl((f)->ts_nsec) / 1000; \
d68 2
a69 2
	(t)->ts_sec = ntohl(((struct nqnfs_time *)(f))->nq_sec); \
	(t)->ts_nsec = ntohl(((struct nqnfs_time *)(f))->nq_nsec); \
d72 2
a73 2
	((struct nqnfs_time *)(t))->nq_sec = htonl((f)->ts_sec); \
	((struct nqnfs_time *)(t))->nq_nsec = htonl((f)->ts_nsec); \
d77 2
a78 2
	((long *)(t))[_QUAD_HIGHWORD] = ntohl(((long *)(f))[0]); \
	((long *)(t))[_QUAD_LOWWORD] = ntohl(((long *)(f))[1]); \
d81 2
a82 2
	((long *)(t))[0] = htonl(((long *)(f))[_QUAD_HIGHWORD]); \
	((long *)(t))[1] = htonl(((long *)(f))[_QUAD_LOWWORD]); \
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
