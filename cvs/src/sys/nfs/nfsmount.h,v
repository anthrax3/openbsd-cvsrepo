head	1.27;
access;
symbols
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.25.0.16
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.12
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.14
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.6
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.10
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.8
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.4
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.24.0.12
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.10
	OPENBSD_5_0:1.24.0.8
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2017.02.22.11.42.46;	author mpi;	state Exp;
branches;
next	1.26;
commitid	QPdM5oUknMlUIDue;

1.26
date	2016.09.27.01.37.38;	author dlg;	state Exp;
branches;
next	1.25;
commitid	HwDxz9mxZKQUWHxT;

1.25
date	2012.09.10.11.10.59;	author jsing;	state Exp;
branches;
next	1.24;

1.24
date	2009.09.02.18.20.54;	author thib;	state Exp;
branches;
next	1.23;

1.23
date	2009.08.25.13.41.29;	author thib;	state Exp;
branches;
next	1.22;

1.22
date	2009.08.20.15.04.24;	author thib;	state Exp;
branches;
next	1.21;

1.21
date	2009.08.10.10.59.12;	author thib;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.03.00.12.34;	author thib;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.02.23.16.59;	author thib;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.27.14.14.30;	author thib;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.24.14.34.03;	author thib;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.05.12.51.04;	author thib;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.08.18.23.03;	author thib;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.13.18.05.27;	author thib;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.12.13.24.39;	author thib;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.20;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.27.13;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.30.08.35.27;	author csapuntz;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2001.06.25.03.28.14;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.20.01.50.11;	author assar;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.07.04.57.17;	author assar;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	99.06.10.05.55.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.02.08.22.41.46;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.12.17.03.46.39;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	96.03.31.13.16.12;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.29.09.25.03;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.23;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	2001.05.14.22.44.58;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.07.04.10.55.53;	author niklas;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2002.03.28.15.02.48;	author niklas;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2003.06.07.11.07.44;	author ho;	state Exp;
branches;
next	;

1.10.4.1
date	2002.06.11.03.32.04;	author art;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Keep local definitions local.

"good work" deraadt@@, ok visa@@
@
text
@/*	$OpenBSD: nfsmount.h,v 1.26 2016/09/27 01:37:38 dlg Exp $	*/
/*	$NetBSD: nfsmount.h,v 1.10 1996/02/18 11:54:03 fvdl Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Rick Macklem at The University of Guelph.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)nfsmount.h	8.3 (Berkeley) 3/30/95
 */


#ifndef _NFS_NFSMOUNT_H_
#define _NFS_NFSMOUNT_H_

/*
 * Mount structure.
 * One allocated on every NFS mount.
 * Holds NFS specific information for mount.
 */
struct	nfsmount {
	RBT_HEAD(nfs_nodetree, nfsnode)
		nm_ntree;		/* filehandle/node tree */
	TAILQ_HEAD(reqs, nfsreq)
		nm_reqsq;		/* request queue for this mount. */
	struct timeout nm_rtimeout;	/* timeout (scans/resends nm_reqsq). */
	int	nm_flag;		/* Flags for soft/hard... */
	struct	mount *nm_mountp;	/* Vfs structure for this filesystem */
	int	nm_numgrps;		/* Max. size of groupslist */
	u_char	nm_fh[NFSX_V3FHMAX];	/* File handle of root dir */
	int	nm_fhsize;		/* Size of root file handle */
	struct	socket *nm_so;		/* Rpc socket */
	int	nm_sotype;		/* Type of socket */
	int	nm_soproto;		/* and protocol */
	int	nm_soflags;		/* pr_flags for socket protocol */
	struct	mbuf *nm_nam;		/* Addr of server */
	int	nm_timeo;		/* Init timer for NFSMNT_DUMBTIMR */
	int	nm_retry;		/* Max retries */
	int	nm_srtt[NFS_MAX_TIMER];	/* RTT Timers for RPCs */
	int	nm_sdrtt[NFS_MAX_TIMER];
	int	nm_sent;		/* Request send count */
	int	nm_cwnd;		/* Request send window */
	int	nm_timeouts;		/* Request timeouts */
	int	nm_rsize;		/* Max size of read rpc */
	int	nm_wsize;		/* Max size of write rpc */
	int	nm_readdirsize;		/* Size of a readdir rpc */
	int	nm_readahead;		/* Num. of blocks to readahead */
	u_char	nm_verf[NFSX_V3WRITEVERF]; /* V3 write verifier */
	u_short	nm_acregmin;		/* Attr cache file recently modified */
	u_short	nm_acregmax;		/* ac file not recently modified */
	u_short	nm_acdirmin;		/* ac for dir recently modified */
	u_short	nm_acdirmax;		/* ac for dir not recently modified */
};

#ifdef _KERNEL

/* Convert mount ptr to nfsmount ptr: */
#define VFSTONFS(mp)	((struct nfsmount *)((mp)->mnt_data))

/* Prototypes for NFS mount operations: */
int	nfs_mount(struct mount *, const char *, void *, struct nameidata *,
	    struct proc *);
int	nfs_fsinfo(struct nfsmount *, struct vnode *, struct ucred *,
	    struct proc *);
void	nfs_init(void);

#endif /* _KERNEL */

#endif
@


1.26
log
@replace the use of RB macros with the RBT functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.25 2012/09/10 11:10:59 jsing Exp $	*/
a88 14
int	mountnfs(struct nfs_args *, struct mount *, struct mbuf *,
	    const char *, char *);
int	nfs_mountroot(void);
void	nfs_decode_args(struct nfsmount *, struct nfs_args *,
	    struct nfs_args *);
int	nfs_start(struct mount *, int, struct proc *);
int	nfs_unmount(struct mount *, int, struct proc *);
int	nfs_root(struct mount *, struct vnode **);
int	nfs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
int	nfs_statfs(struct mount *, struct statfs *, struct proc *);
int	nfs_sync(struct mount *, int, struct ucred *, struct proc *);
int	nfs_vget(struct mount *, ino_t, struct vnode **);
int	nfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int	nfs_vptofh(struct vnode *, struct fid *);
@


1.25
log
@Cleanup VFS mount string handling:

- Avoid using copyinstr() without checking the return value.

- sys_mount() has already copied the path in, so pass this to the
  filesystem mount code so that it does not have to copy it in again.

- Avoid copyinstr()/bzero() dance when we can simply bzero() and strlcpy().

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.19 2009/06/02 23:16:59 thib Exp $	*/
d48 1
a48 1
	RB_HEAD(nfs_nodetree, nfsnode)
@


1.24
log
@Backout the asyncio/aiod change, as it causes buf's to get hung.
problem noticed by deraadt@@

ok beck@@
@
text
@d89 2
a90 2
int	mountnfs(struct nfs_args *, struct mount *, struct mbuf *, char *,
	    char *);
@


1.23
log
@move to having requests on a per nfsmount tailq instead of one global one.
also make the rexmit timeout per nfsmount, and make sure to start/stop the
timer appropriately.

now the nfs_timer() only fires if there is work todo, not always at nfs_ticks
(it did, even if there where no nfsmounts in the system!).

OK blambert@@
@
text
@a73 3
	TAILQ_HEAD(, buf) nm_bufq;	/* async io buffer queue. */
	int	nm_bufqlen;		/* number of buffers in nm_bufq */
	int	nm_naiods;		/* # of aiods processing this mount */
@


1.22
log
@Rework the way we do async I/O in nfs. Introduce separate buf queues for
each mount, and when work is "found", peg an aiod to that mount todo the
I/O. Make nfs_asyncio() a bit smarter when deciding when to do asyncio
and when to force it sync, this is done by keeping the aiod's one two lists,
an "idle" and an "all" list, so asyncio is only done when there are aiods
hanging around todo it for us or are already pegged to the mount.

Idea liked by at least beck@@ (and I think art@@).
Extensive testing done by myself and jasper and a few others on various
arch's.

Ideas/Code from Net/Free.

OK blambert@@.
@
text
@d50 3
@


1.21
log
@Use an RB tree instead of a hashtable for fh/node lookups.

Idea from NetBSD.

OK blambert@@
@
text
@d71 3
@


1.20
log
@Lift the NFS over UDP retransmit logic from FreeBSD.

OK blambert@@

FreeBSD commit message:
Refactor the NFS over UDP retransmit timeout estimation logic to allow
the estimator to be more easily tuned and maintained.

There should be no functional change except there is now a lower limit
on the retransmit timeout to prevent the client from retransmitting
faster than the server's disks can fill requests, and an upper limit
to prevent the estimator from taking to long to retransmit during a
server outage.
@
text
@d48 2
@


1.19
log
@give the retransmission count booking keeping a facelift,
just store the maximun amount of rexmits in one place and
cleanup. Also make sure this only effects soft mounts.

OK blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.17 2008/12/24 14:34:03 thib Exp $	*/
d60 2
a61 2
	int	nm_srtt[4];		/* Timers for rpcs */
	int	nm_sdrtt[4];
@


1.18
log
@expand the ifdef _KERNEL around kernel only function prototypes
since they have no business being export to userland.

OK blambert@@
@
text
@a64 1
	int	nm_deadthresh;		/* Threshold of timeouts-->dead server*/
@


1.17
log
@remove argument names from function prototypes, this way the
file shares the same sane style.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.16 2008/07/05 12:51:04 thib Exp $	*/
d78 2
a79 3
/*
 * Convert mount ptr to nfsmount ptr.
 */
a80 1
#endif /* _KERNEL */
d82 1
a82 3
/*
 * Prototypes for NFS mount operations
 */
d102 2
@


1.16
log
@
Clean up some old dead code, mostly nqnfs and kerberos leftovers
for uid goo, mostly zapping unused members from various structures.

ok blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.15 2008/06/08 18:23:03 thib Exp $	*/
d87 4
a90 4
int	nfs_mount(struct mount *mp, const char *path, void *data,
		struct nameidata *ndp, struct proc *p);
int	mountnfs(struct nfs_args *argp, struct mount *mp,
		struct mbuf *nam, char *pth, char *hst);
d92 8
a99 9
void	nfs_decode_args(struct nfsmount *, struct nfs_args *, struct nfs_args *);
int	nfs_start(struct mount *mp, int flags, struct proc *p);
int	nfs_unmount(struct mount *mp, int mntflags, struct proc *p);
int	nfs_root(struct mount *mp, struct vnode **vpp);
int	nfs_quotactl(struct mount *mp, int cmds, uid_t uid, caddr_t arg,
		struct proc *p);
int	nfs_statfs(struct mount *mp, struct statfs *sbp, struct proc *p);
int	nfs_sync(struct mount *mp, int waitfor, struct ucred *cred,
		struct proc *p);
d101 2
a102 2
int	nfs_fhtovp(struct mount *mp, struct fid *fhp, struct vnode **vpp);
int	nfs_vptofh(struct vnode *vp, struct fid *fhp);
d104 1
a104 1
			struct proc *);
@


1.15
log
@remove a bunch of kerberos definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.14 2007/06/13 18:05:27 thib Exp $	*/
a69 6
	uid_t	nm_authuid;		/* Uid for authenticator */
	int	nm_authtype;		/* Authenticator type */
	int	nm_authlen;		/* and length */
	char	*nm_authstr;		/* Authenticator string */
	char	*nm_verfstr;		/* and the verifier */
	int	nm_verflen;
a70 3
	int	nm_numuids;		/* Number of nfsuid mappings */
	TAILQ_HEAD(, nfsuid) nm_uidlruhead; /* Lists of nfsuid mappings */
	LIST_HEAD(, nfsuid) nm_uidhashtbl[NFS_MUIDHASHSIZ];
@


1.14
log
@- Remove the nm_inprog member from struct nfsmount;
  NQNFS leftover.
- Remove setting of the NFSMNT_DISMINPROG flag, its set
  and unset in the same function servering no purpose,
  im however going to reuse it shortly.
- kill an if thats always true (NFSMNT_KERB cant be set)
- misc cleanup and KNF.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.13 2007/04/12 13:24:39 thib Exp $	*/
a76 1
	NFSKERBKEY_T nm_key;		/* and the session key */
@


1.13
log
@remove unused members from struct nfsmount and nfsnode;

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.12 2003/06/02 23:28:20 millert Exp $	*/
a69 1
	struct vnode *nm_inprog;	/* Vnode in prog by nqnfs_clientd() */
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.11 2002/03/14 01:27:13 millert Exp $	*/
a69 1
	CIRCLEQ_HEAD(, nfsnode) nm_timerhead; /* Head of lease timer queue */
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.10 2001/06/30 08:35:27 csapuntz Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@

Get root filehandle via nfs_root.

Fix problem with diskless clients
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.9 2001/06/25 03:28:14 csapuntz Exp $	*/
d103 20
a122 20
int	nfs_mount __P((struct mount *mp, const char *path, void *data,
		struct nameidata *ndp, struct proc *p));
int	mountnfs __P((struct nfs_args *argp, struct mount *mp,
		struct mbuf *nam, char *pth, char *hst));
int	nfs_mountroot __P((void));
void	nfs_decode_args __P((struct nfsmount *, struct nfs_args *, struct nfs_args *));
int	nfs_start __P((struct mount *mp, int flags, struct proc *p));
int	nfs_unmount __P((struct mount *mp, int mntflags, struct proc *p));
int	nfs_root __P((struct mount *mp, struct vnode **vpp));
int	nfs_quotactl __P((struct mount *mp, int cmds, uid_t uid, caddr_t arg,
		struct proc *p));
int	nfs_statfs __P((struct mount *mp, struct statfs *sbp, struct proc *p));
int	nfs_sync __P((struct mount *mp, int waitfor, struct ucred *cred,
		struct proc *p));
int	nfs_vget __P((struct mount *, ino_t, struct vnode **));
int	nfs_fhtovp __P((struct mount *mp, struct fid *fhp, struct vnode **vpp));
int	nfs_vptofh __P((struct vnode *vp, struct fid *fhp));
int	nfs_fsinfo __P((struct nfsmount *, struct vnode *, struct ucred *,
			struct proc *));
void	nfs_init __P((void));
@


1.10.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.10 2001/06/30 08:35:27 csapuntz Exp $	*/
d103 20
a122 20
int	nfs_mount(struct mount *mp, const char *path, void *data,
		struct nameidata *ndp, struct proc *p);
int	mountnfs(struct nfs_args *argp, struct mount *mp,
		struct mbuf *nam, char *pth, char *hst);
int	nfs_mountroot(void);
void	nfs_decode_args(struct nfsmount *, struct nfs_args *, struct nfs_args *);
int	nfs_start(struct mount *mp, int flags, struct proc *p);
int	nfs_unmount(struct mount *mp, int mntflags, struct proc *p);
int	nfs_root(struct mount *mp, struct vnode **vpp);
int	nfs_quotactl(struct mount *mp, int cmds, uid_t uid, caddr_t arg,
		struct proc *p);
int	nfs_statfs(struct mount *mp, struct statfs *sbp, struct proc *p);
int	nfs_sync(struct mount *mp, int waitfor, struct ucred *cred,
		struct proc *p);
int	nfs_vget(struct mount *, ino_t, struct vnode **);
int	nfs_fhtovp(struct mount *mp, struct fid *fhp, struct vnode **vpp);
int	nfs_vptofh(struct vnode *vp, struct fid *fhp);
int	nfs_fsinfo(struct nfsmount *, struct vnode *, struct ucred *,
			struct proc *);
void	nfs_init(void);
@


1.9
log
@Remove NQNFS
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.8 2001/02/20 01:50:11 assar Exp $	*/
d106 1
a106 1
		struct mbuf *nam, char *pth, char *hst, struct vnode **vpp));
@


1.8
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.7 2000/02/07 04:57:17 assar Exp $	*/
a73 1
	int	nm_leaseterm;		/* Term (sec) for NQNFS lease */
@


1.7
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.6 1999/06/10 05:55:15 millert Exp $	*/
d104 1
a104 1
int	nfs_mount __P((struct mount *mp, const char *path, caddr_t data,
@


1.7.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.8 2001/02/20 01:50:11 assar Exp $	*/
d104 1
a104 1
int	nfs_mount __P((struct mount *mp, const char *path, void *data,
@


1.7.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.7.2.1 2001/05/14 22:44:58 niklas Exp $	*/
d74 1
d107 1
a107 1
		struct mbuf *nam, char *pth, char *hst));
@


1.7.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d103 20
a122 20
int	nfs_mount(struct mount *mp, const char *path, void *data,
		struct nameidata *ndp, struct proc *p);
int	mountnfs(struct nfs_args *argp, struct mount *mp,
		struct mbuf *nam, char *pth, char *hst);
int	nfs_mountroot(void);
void	nfs_decode_args(struct nfsmount *, struct nfs_args *, struct nfs_args *);
int	nfs_start(struct mount *mp, int flags, struct proc *p);
int	nfs_unmount(struct mount *mp, int mntflags, struct proc *p);
int	nfs_root(struct mount *mp, struct vnode **vpp);
int	nfs_quotactl(struct mount *mp, int cmds, uid_t uid, caddr_t arg,
		struct proc *p);
int	nfs_statfs(struct mount *mp, struct statfs *sbp, struct proc *p);
int	nfs_sync(struct mount *mp, int waitfor, struct ucred *cred,
		struct proc *p);
int	nfs_vget(struct mount *, ino_t, struct vnode **);
int	nfs_fhtovp(struct mount *mp, struct fid *fhp, struct vnode **vpp);
int	nfs_vptofh(struct vnode *vp, struct fid *fhp);
int	nfs_fsinfo(struct nfsmount *, struct vnode *, struct ucred *,
			struct proc *);
void	nfs_init(void);
@


1.7.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.7.2.3 2002/03/28 15:02:48 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6
log
@Fill in mount_info in nfs_decode_args
 o that way zero fields in nfs_args get filled in
 o changes via mount -u become visible
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.5 1998/02/08 22:41:46 tholo Exp $	*/
d119 1
a119 2
int	nfs_fhtovp __P((struct mount *mp, struct fid *fhp, struct mbuf *nam,
		struct vnode **vpp, int *exflagsp, struct ucred **credanonp));
@


1.5
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.4 1996/12/17 03:46:39 dm Exp $	*/
d109 1
a109 1
void	nfs_decode_args __P((struct nfsmount *, struct nfs_args *));
@


1.4
log
@NFS attribute cache timeout mount param
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.3 1996/03/31 13:16:12 mickey Exp $	*/
d104 1
a104 1
int	nfs_mount __P((struct mount *mp, char *path, caddr_t data,
@


1.3
log
@From NetBSD: NFSv3 import (tomorrow's Net's kernel)
Open's patches kept in. i'll possibly take a look at Lite2 soon,
is there smth usefull ?..
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsmount.h,v 1.2 1996/02/29 09:25:03 niklas Exp $	*/
d88 4
@


1.2
log
@From NetBSD: merge with 960217 (still NFSv2)
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: nfsmount.h,v 1.9 1996/02/09 21:48:44 christos Exp $	*/
d39 1
a39 1
 *	@@(#)nfsmount.h	8.2 (Berkeley) 8/18/94
d42 4
d55 2
a56 1
	nfsv2fh_t nm_fh;		/* File handle of root dir */
d72 1
d81 7
d95 1
d100 21
a120 17
int nfs_statfs __P((struct mount *, struct statfs *, struct proc *));
int nfs_mountroot __P((void));
void nfs_decode_args __P((struct nfsmount *, struct nfs_args *));
int nfs_mount __P((struct mount *, char *, caddr_t, struct nameidata *,
		   struct proc *));
int mountnfs __P((struct nfs_args *, struct mount *, struct mbuf *, char *,
		  char *, struct vnode **));
int nfs_unmount __P((struct mount *, int, struct proc *));
int nfs_root __P((struct mount *, struct vnode **));
int nfs_sync __P((struct mount *, int, struct ucred *, struct proc *));
int nfs_vget __P((struct mount *, ino_t, struct vnode **));
int nfs_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
		    struct vnode **, int *, struct ucred **));
int nfs_vptofh __P((struct vnode *, struct fid *));
int nfs_start __P((struct mount *, int, struct proc *));
int nfs_quotactl __P((struct mount *, int, uid_t, caddr_t, struct proc *));
void nfs_init __P((void));
d122 1
a122 1
#endif /* _KERNEL */
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: nfsmount.h,v 1.8 1995/03/26 20:37:31 jtc Exp $	*/
a81 1
#endif /* _KERNEL */
d86 19
a104 43
int	nfs_mount __P((
		struct mount *mp,
		char *path,
		caddr_t data,
		struct nameidata *ndp,
		struct proc *p));
int	nfs_start __P((
		struct mount *mp,
		int flags,
		struct proc *p));
int	nfs_unmount __P((
		struct mount *mp,
		int mntflags,
		struct proc *p));
int	nfs_root __P((
		struct mount *mp,
		struct vnode **vpp));
int	nfs_quotactl __P((
		struct mount *mp,
		int cmds,
		uid_t uid,
		caddr_t arg,
		struct proc *p));
int	nfs_statfs __P((
		struct mount *mp,
		struct statfs *sbp,
		struct proc *p));
int	nfs_sync __P((
		struct mount *mp,
		int waitfor,
		struct ucred *cred,
		struct proc *p));
int	nfs_fhtovp __P((
		struct mount *mp,
		struct fid *fhp,
		struct mbuf *nam,
		struct vnode **vpp,
		int *exflagsp,
		struct ucred **credanonp));
int	nfs_vptofh __P((
		struct vnode *vp,
		struct fid *fhp));
int	nfs_init __P(());
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
