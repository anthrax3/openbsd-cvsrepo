head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.34
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.32
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.28
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.5.0.16
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.14
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.12
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2009.11.01.23.06.03;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.11.00.45.59;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.17.05.36.43;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.20.02.02.11;	author marco;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.02.17.11.25;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.09.06.35.53;	author smurph;	state Exp;
branches;
next	1.3;

1.3
date	96.11.28.13.17.53;	author niklas;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	96.10.31.01.09.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches;
next	;

1.3.14.1
date	2000.03.24.09.09.42;	author niklas;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2001.05.14.22.44.59;	author niklas;	state Exp;
branches;
next	1.3.14.3;

1.3.14.3
date	2004.06.05.23.13.08;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Move IS[12]BYTEMSG and ISEXTMSG defines to a common place.
Pointed out by miod@@. krw@@ miod@@ ok.
@
text
@/*	$OpenBSD: scsi_message.h,v 1.8 2006/05/11 00:45:59 krw Exp $	*/

#define IS1BYTEMSG(m)	(((m) != 0x01 && (m) < 0x20) || (m) >= 0x80)
#define IS2BYTEMSG(m)	(((m) & 0xf0) == 0x20)
#define ISEXTMSG(m)	((m) == 0x01)

/* Messages (1 byte) */		     /* I/T (M)andatory or (O)ptional */
#define MSG_CMDCOMPLETE		0x00 /* M/M */
#define MSG_EXTENDED		0x01 /* O/O */
#define MSG_SAVEDATAPOINTER	0x02 /* O/O */
#define MSG_RESTOREPOINTERS	0x03 /* O/O */
#define MSG_DISCONNECT		0x04 /* O/O */
#define MSG_INITIATOR_DET_ERR	0x05 /* M/M */
#define MSG_ABORT		0x06 /* O/M */
#define MSG_MESSAGE_REJECT	0x07 /* M/M */
#define MSG_NOOP		0x08 /* M/M */
#define MSG_PARITY_ERROR	0x09 /* M/M */
#define MSG_LINK_CMD_COMPLETE	0x0a /* O/O */
#define MSG_LINK_CMD_COMPLETEF	0x0b /* O/O */
#define MSG_BUS_DEV_RESET	0x0c /* O/M */
#define MSG_ABORT_TAG		0x0d /* O/O */
#define MSG_CLEAR_QUEUE		0x0e /* O/O */
#define MSG_INIT_RECOVERY	0x0f /* O/O */
#define MSG_REL_RECOVERY	0x10 /* O/O */
#define MSG_TERM_IO_PROC	0x11 /* O/O */
#define MSG_QAS_REQUEST		0x55 /* O/O */ /* SPI3 */

/* Messages (2 byte) */
#define MSG_SIMPLE_Q_TAG	0x20 /* O/O */
#define MSG_HEAD_OF_Q_TAG	0x21 /* O/O */
#define MSG_ORDERED_Q_TAG	0x22 /* O/O */
#define MSG_IGN_WIDE_RESIDUE	0x23 /* O/O */

/* Identify message */		     /* M/M */
#define MSG_IDENTIFYFLAG	0x80
#define MSG_IDENTIFY_DISCFLAG	0x40
#define MSG_IDENTIFY(lun, disc)	(((disc) ? 0xc0 : MSG_IDENTIFYFLAG) | (lun))
#define MSG_ISIDENTIFY(m)	((m) & MSG_IDENTIFYFLAG)
#define MSG_IDENTIFY_LUNMASK	0x01F

/* Extended messages (opcode and length) */
#define MSG_EXT_SDTR		0x01
#define MSG_EXT_SDTR_LEN	0x03

#define MSG_EXT_WDTR		0x03
#define MSG_EXT_WDTR_LEN	0x02

#define MSG_EXT_WDTR_BUS_8_BIT  0x00
#define MSG_EXT_WDTR_BUS_16_BIT 0x01
#define MSG_EXT_WDTR_BUS_32_BIT 0x02

#define MSG_EXT_PPR		0x04
#define MSG_EXT_PPR_LEN		0x06

#define	MSG_EXT_PPR_PCOMP_EN	0x80
#define	MSG_EXT_PPR_RTI		0x40
#define	MSG_EXT_PPR_RD_STRM	0x20
#define	MSG_EXT_PPR_WR_FLOW	0x10
#define	MSG_EXT_PPR_HOLD_MCS	0x08
#define MSG_EXT_PPR_PROT_QAS	0x04
#define MSG_EXT_PPR_PROT_DT	0x02
#define MSG_EXT_PPR_PROT_IUS	0x01
@


1.8
log
@Zap trailing whitespace.
@
text
@d1 5
a5 1
/*	$OpenBSD: scsi_message.h,v 1.7 2004/10/17 05:36:43 krw Exp $	*/
@


1.7
log
@Add some FreeBSD MSG_EXT_PPR_* defines. Will be used in (at least) ahd
to eliminate some magic numbers.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_message.h,v 1.6 2004/05/20 02:02:11 marco Exp $	*/
d30 3
a32 3
/* Identify message */		     /* M/M */	
#define MSG_IDENTIFYFLAG	0x80 
#define MSG_IDENTIFY_DISCFLAG	0x40 
d35 1
a35 1
#define MSG_IDENTIFY_LUNMASK	0x01F 
d46 1
a46 1
#define MSG_EXT_WDTR_BUS_32_BIT 0x02 
@


1.6
log
@Add QAS phase which is required by ahd.  ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_message.h,v 1.5 2001/04/02 17:11:25 krw Exp $	*/
d51 5
@


1.5
log
@Add padding and new field 'flags2' to struct scsi_inquiry_data,
bringing it in line with the spc-2 definition of standard
inquiry data.

scsi_inquiry_data grows from 50 to 57 bytes in size.

The new 'flags2' field gives access to PPR related
information, the IUS, QAS and DT bits, used
in negotiating Ultra3 transfers.

Also add PPR related extended message defines.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_message.h,v 1.4 2000/03/09 06:35:53 smurph Exp $	*/
d22 1
@


1.4
log
@update for new adaptec support.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_message.h,v 1.3 1996/11/28 13:17:53 niklas Exp $	*/
d46 7
@


1.3
log
@Sync to NetBSD 961107
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_message.h,v 1.2 1996/10/31 01:09:24 niklas Exp $	*/
d31 1
d34 1
d42 4
@


1.3.14.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a30 1
#define MSG_IDENTIFY_DISCFLAG	0x40 
a32 1
#define MSG_IDENTIFY_LUNMASK	0x01F 
a39 4

#define MSG_EXT_WDTR_BUS_8_BIT  0x00
#define MSG_EXT_WDTR_BUS_16_BIT 0x01
#define MSG_EXT_WDTR_BUS_32_BIT 0x02 
@


1.3.14.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_message.h,v 1.5 2001/04/02 17:11:25 krw Exp $	*/
a45 7

#define MSG_EXT_PPR		0x04
#define MSG_EXT_PPR_LEN		0x06

#define MSG_EXT_PPR_PROT_QAS	0x04
#define MSG_EXT_PPR_PROT_DT	0x02
#define MSG_EXT_PPR_PROT_IUS	0x01
@


1.3.14.3
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a21 1
#define MSG_QAS_REQUEST		0x55 /* O/O */ /* SPI3 */
@


1.2
log
@$OpenBSD RCSIDs + comment fix in sd.c
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d29 4
a32 3
/* Identify message */
#define MSG_IDENTIFY(lun, disc)	(((disc) ? 0xc0 : 0x80) | (lun))
#define MSG_ISIDENTIFY(m)	((m) & 0x80)
d34 1
a34 1
/* Extended messages (opcode) */
d36 4
a39 1
#define	MSG_EXT_WDTR		0x03
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
