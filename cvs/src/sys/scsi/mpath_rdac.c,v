head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.4
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7;
locks; strict;
comment	@ * @;


1.23
date	2015.03.14.03.38.52;	author jsg;	state Exp;
branches;
next	1.22;
commitid	p4LJxGKbi0BU2cG6;

1.22
date	2014.09.14.14.17.26;	author jsg;	state Exp;
branches;
next	1.21;
commitid	uzzBR7hz9ncd4O6G;

1.21
date	2014.04.02.11.31.57;	author dlg;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.02.10.37.59;	author dlg;	state Exp;
branches;
next	1.19;

1.19
date	2013.12.06.21.03.02;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2013.08.27.00.57.44;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2013.08.27.00.53.10;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2013.08.26.12.20.12;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2013.08.26.11.58.01;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2013.08.26.10.40.26;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.26.10.36.08;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.26.10.13.17;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.26.07.43.04;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2013.08.26.07.38.56;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2013.08.26.07.29.45;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2013.08.26.07.21.18;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.11.01.02.48;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.03.15.47.18;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.15.01.47.41;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.28.10.43.36;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.27.09.09.36;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.27.07.14.50;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.05.14.25.42;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: mpath_rdac.c,v 1.22 2014/09/14 14:17:26 jsg Exp $ */

/*
 * Copyright (c) 2010 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* Redundant Disk Array Controller support for mpath(4) */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/queue.h>
#include <sys/rwlock.h>
#include <sys/pool.h>
#include <sys/ioctl.h>
#include <sys/poll.h>
#include <sys/selinfo.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <scsi/mpathvar.h>

struct rdac_common_mode_page {
	u_int8_t	controller_serial[16];
	u_int8_t	alt_controller_serial[16];
	u_int8_t	mode[2];
	u_int8_t	alt_mode[2];
	u_int8_t	timeout;
	u_int8_t	options;
};

/*
 * RDAC VPD pages
 */
#define RDAC_VPD_HDWVER		0xc0	/* Hardware Version */
#define RDAC_VPD_SERNUM		0xc1	/* Serial Numbers */
#define RDAC_VPD_SFWVER		0xc2
#define RDAC_VPD_FEAPAR		0xc3	/* Feature Parameters */
#define RDAC_VPD_SUBSYS		0xc4
#define RDAC_VPD_HSTINT		0xc5
#define RDAC_VPD_DGM		0xc6
#define RDAC_VPD_HSTINT2	0xc7
#define RDAC_VPD_EXTDEVID	0xc8
#define RDAC_VPD_VOLACCESSCTL	0xc9

struct rdac_vpd_hdwver {
	struct scsi_vpd_hdr	hdr; /* RDAC_VPD_HDWVER */
	u_int8_t		pg_id[4];
#define RDAC_VPD_ID_HDWVER		0x68777234 /* "hwr4" */
	u_int8_t		num_channels;
	u_int8_t		flags;
	u_int8_t		proc_memory_size;
	u_int8_t		_reserved1[5];
	u_int8_t		board_name[64];
	u_int8_t		board_part_number[16];
	u_int8_t		schematic_number[12];
	u_int8_t		schematic_revision[4];
	u_int8_t		serial_number[16];
	u_int8_t		_reserved2[16];
	u_int8_t		date_manufactured[8];
	u_int8_t		board_revision[2];
	u_int8_t		board_identifier[4];
};

struct rdac_vpd_subsys {
	struct scsi_vpd_hdr	hdr; /* RDAC_VPD_SUBSYS */
	u_int8_t		pg_id[4];
#define RDAC_VPD_ID_SUBSYS		0x73756273 /* "subs" */
	u_int8_t		subsystem_id[16];
	u_int8_t		subsystem_revision[4];
	u_int8_t		controller_slot_id[2];
	u_int8_t		_reserved[2];
};

struct rdac_vpd_extdevid {
	struct scsi_vpd_hdr	hdr; /* RDAC_VPD_EXTDEVID */
	u_int8_t		pg_id[4];
#define RDAC_VPD_ID_EXTDEVID		0x65646964 /* "edid" */
	u_int8_t		_reserved[3];
	u_int8_t		vol_id_len;
	u_int8_t		vol_id[16];
	u_int8_t		vol_label_len;
	u_int8_t		vol_label[60];
	u_int8_t		array_id_len;
	u_int8_t		array_id[16];
	u_int8_t		array_label_len;
	u_int8_t		array_label[60];
	u_int8_t		lun[8];
};

struct rdac_vpd_volaccessctl {
	struct scsi_vpd_hdr	hdr; /* RDAC_VPD_VOLACCESSCTL */
	u_int8_t		pg_id[4];
#define RDAC_VPD_ID_VOLACCESSCTL	0x76616331 /* "vac1" */
	u_int8_t		avtcvp;
#define RDAC_VOLACCESSCTL_OWNER		0x01
#define RDAC_VOLACCESSCTL_AVT		0x70
	u_int8_t		_reserved1;
	u_int8_t		asym_access_state_cur;
	u_int8_t		vendor_specific_cur;
	u_int8_t		_reserved[36];
};

struct rdac_softc {
	struct device		sc_dev;
	struct mpath_path	sc_path;
	struct scsi_xshandler	sc_xsh;
	struct rdac_vpd_volaccessctl *sc_pg;
};
#define DEVNAME(_s) ((_s)->sc_dev.dv_xname)

int		rdac_match(struct device *, void *, void *);
void		rdac_attach(struct device *, struct device *, void *);
int		rdac_detach(struct device *, int);
int		rdac_activate(struct device *, int);

struct cfattach rdac_ca = {
	sizeof(struct rdac_softc),
	rdac_match,
	rdac_attach,
	rdac_detach,
	rdac_activate
};

struct cfdriver rdac_cd = {
	NULL,
	"rdac",
	DV_DULL
};

void		rdac_mpath_start(struct scsi_xfer *);
int		rdac_mpath_checksense(struct scsi_xfer *);
void		rdac_mpath_status(struct scsi_link *);

const struct mpath_ops rdac_mpath_ops = {
	"rdac",
	rdac_mpath_checksense,
	rdac_mpath_status
};

int		rdac_extdevid(struct rdac_softc *);
int		rdac_groupid(struct rdac_softc *);

void		rdac_status(struct scsi_xfer *);
void		rdac_status_done(struct scsi_xfer *);

struct rdac_device {
	char *vendor;
	char *product;
};

struct rdac_device rdac_devices[] = {
/*	  " vendor "  "     device     " */
/*	  "01234567"  "0123456789012345" */
	{ "SUN     ", "CSM200_" },
	{ "DELL    ", "MD3000          " },
	{ "DELL    ", "MD3000i         " },
	{ "DELL    ", "MD32xx          " },
	{ "DELL    ", "MD32xxi         " }
};

int
rdac_match(struct device *parent, void *match, void *aux)
{
	struct scsi_attach_args *sa = aux;
	struct scsi_inquiry_data *inq = sa->sa_inqbuf;
	struct rdac_device *s;
	int i;

	if (mpath_path_probe(sa->sa_sc_link) != 0)
		return (0);

	for (i = 0; i < nitems(rdac_devices); i++) {
		s = &rdac_devices[i];

		if (bcmp(s->vendor, inq->vendor, strlen(s->vendor)) == 0 &&
		    bcmp(s->product, inq->product, strlen(s->product)) == 0)
			return (8);
	}

	return (0);
}

void
rdac_attach(struct device *parent, struct device *self, void *aux)
{
	struct rdac_softc *sc = (struct rdac_softc *)self;
	struct scsi_attach_args *sa = aux;
	struct scsi_link *link = sa->sa_sc_link;
	int id;

	printf("\n");

	/* init link */
	link->device_softc = sc;

	/* init path */
	scsi_xsh_set(&sc->sc_path.p_xsh, link, rdac_mpath_start);
	sc->sc_path.p_link = link;

	/* init status handler */
	scsi_xsh_set(&sc->sc_xsh, link, rdac_status);
	sc->sc_pg = dma_alloc(sizeof(*sc->sc_pg), PR_WAITOK);

	/* let's go */
	if (rdac_extdevid(sc) != 0)
		return;

	id = rdac_groupid(sc);
	if (id == -1) {
		/* error printed by rdac_groupid */
		return;
	}

	if (mpath_path_attach(&sc->sc_path, id, &rdac_mpath_ops) != 0)
		printf("%s: unable to attach path\n", DEVNAME(sc));
}

int
rdac_detach(struct device *self, int flags)
{
	struct rdac_softc *sc = (struct rdac_softc *)self;

	dma_free(sc->sc_pg, sizeof(*sc->sc_pg));

	return (0);
}

int
rdac_activate(struct device *self, int act)
{
	struct rdac_softc *sc = (struct rdac_softc *)self;
	int rv = 0;

	switch (act) {
	case DVACT_DEACTIVATE:
		if (scsi_xsh_del(&sc->sc_xsh))
			mpath_path_status(&sc->sc_path, MPATH_S_UNKNOWN);
		if (sc->sc_path.p_group != NULL)
			mpath_path_detach(&sc->sc_path);
		break;
	}
	return (rv);
}

void
rdac_mpath_start(struct scsi_xfer *xs)
{
	struct rdac_softc *sc = xs->sc_link->device_softc;

	mpath_start(&sc->sc_path, xs);
}

int
rdac_mpath_checksense(struct scsi_xfer *xs)
{
	struct scsi_sense_data *sense = &xs->sense;
	u_int8_t skey;

	if ((sense->error_code & SSD_ERRCODE) != SSD_ERRCODE_CURRENT)
		return (MPATH_SENSE_DECLINED);

	skey = sense->flags & SSD_KEY;

	/* i wish i knew what the magic numbers meant */

	/* invalid request due to current lu ownership */
	if (skey == SKEY_ILLEGAL_REQUEST && ASC_ASCQ(sense) == 0x9401)
		return (MPATH_SENSE_FAILOVER);

	if (skey == SKEY_UNIT_ATTENTION && ASC_ASCQ(sense) == 0x8b02)
		return (MPATH_SENSE_FAILOVER);

	return (MPATH_SENSE_DECLINED);
}

void
rdac_mpath_status(struct scsi_link *link)
{
	struct rdac_softc *sc = link->device_softc;

	scsi_xsh_add(&sc->sc_xsh);
}

void
rdac_status(struct scsi_xfer *xs)
{
	struct scsi_link *link = xs->sc_link;
	struct rdac_softc *sc = link->device_softc;

	scsi_init_inquiry(xs, SI_EVPD, RDAC_VPD_VOLACCESSCTL,
	    sc->sc_pg, sizeof(*sc->sc_pg));

	xs->done = rdac_status_done;

	scsi_xs_exec(xs);
}

void
rdac_status_done(struct scsi_xfer *xs)
{
	struct scsi_link *link = xs->sc_link;
	struct rdac_softc *sc = link->device_softc;
	struct rdac_vpd_volaccessctl *pg = sc->sc_pg;
	int status = MPATH_S_UNKNOWN;

	if (xs->error == XS_NOERROR &&
	    _4btol(pg->pg_id) == RDAC_VPD_ID_VOLACCESSCTL) {
		status = (ISSET(pg->avtcvp, RDAC_VOLACCESSCTL_AVT) ||
		    ISSET(pg->avtcvp, RDAC_VOLACCESSCTL_OWNER)) ?
		    MPATH_S_ACTIVE : MPATH_S_PASSIVE;
	}

	scsi_xs_put(xs);
	mpath_path_status(&sc->sc_path, status);
}

int
rdac_groupid(struct rdac_softc *sc)
{
	struct rdac_vpd_subsys *pg;
	int rv = -1;

	pg = dma_alloc(sizeof(*pg), PR_WAITOK | PR_ZERO);

	if (scsi_inquire_vpd(sc->sc_path.p_link, pg, sizeof(*pg),
	    RDAC_VPD_SUBSYS, scsi_autoconf) != 0) {
		printf("%s: unable to fetch subsys vpd page\n", DEVNAME(sc));
		goto done;
	}

	if (_4btol(pg->pg_id) != RDAC_VPD_ID_SUBSYS) {
		printf("%s: subsys page is invalid\n", DEVNAME(sc));
		goto done;
	}

	rv = _2btol(pg->controller_slot_id);

done:
	dma_free(pg, sizeof(*pg));
	return (rv);
}

int
rdac_extdevid(struct rdac_softc *sc)
{
	struct rdac_vpd_extdevid *pg;
	char array[31];
	char vol[31];
	int i;
	int rv = 1;

	pg = dma_alloc(sizeof(*pg), PR_WAITOK | PR_ZERO);

	if (scsi_inquire_vpd(sc->sc_path.p_link, pg, sizeof(*pg),
	    RDAC_VPD_EXTDEVID, scsi_autoconf) != 0) {
		printf("%s: unable to fetch extdevid vpd page\n", DEVNAME(sc));
		goto done;
	}

	if (_4btol(pg->pg_id) != RDAC_VPD_ID_EXTDEVID) {
		printf("%s: extdevid page is invalid\n", DEVNAME(sc));
		goto done;
	}

	memset(array, 0, sizeof(array));
	for (i = 0; i < sizeof(pg->array_label) / 2; i++)
		array[i] = pg->array_label[i * 2 + 1];

	memset(vol, 0, sizeof(vol));
	for (i = 0; i < sizeof(pg->vol_label) / 2; i++)
		vol[i] = pg->vol_label[i * 2 + 1];

	printf("%s: array %s, volume %s\n", DEVNAME(sc), array, vol);

	rv = 0;
done:
	dma_free(pg, sizeof(*pg));
	return (rv);
}
@


1.22
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.21 2014/04/02 11:31:57 dlg Exp $ */
a22 1
#include <sys/buf.h>
@


1.21
log
@whitespace fix, no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.20 2014/04/02 10:37:59 dlg Exp $ */
a26 1
#include <sys/proc.h>
@


1.20
log
@skey == SKEY_ILLEGAL_REQUEST && ASC_ASCQ(sense) == 0x9401 means
invalid request due to current lu ownership
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.19 2013/12/06 21:03:02 deraadt Exp $ */
d308 1
a308 1
        scsi_init_inquiry(xs, SI_EVPD, RDAC_VPD_VOLACCESSCTL,
@


1.19
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.18 2013/08/27 00:57:44 dlg Exp $ */
d284 1
@


1.18
log
@make path driver match routes return 8 so they will definitely be higher
than the real device drivers. ses returns 3 on some dells, which could be
confusing for autoconf if it has to decide between that and a path driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.17 2013/08/27 00:53:10 dlg Exp $ */
a252 3
	case DVACT_SUSPEND:
	case DVACT_RESUME:
		break;
@


1.17
log
@get rid of the different path scheduler types, which simplifies the
code that picks the next path. we assume roundrobin within a group
of paths now. the asym sym(4) devices work around this by putting
every path in its own group.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.16 2013/08/26 12:20:12 dlg Exp $ */
d195 1
a195 1
			return (3);
@


1.16
log
@implement handling of group failover.

if a controller sends sense data back, the path driver can tell
mpath that its indicating failover which kicks off an iteration
over all the groups until one says its active. if no groups claim
to be active, a timeout fires the process off again after a second.

you can start controller handover on rdac (well, an md3200i is all
i had to test with, others might need more work) and everything
keeps going. ill try to get to emc and hds working when i can poke
hardware again.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.7 2011/07/11 01:02:48 dlg Exp $ */
d155 1
a155 2
	rdac_mpath_status,
	MPATH_ROUNDROBIN
@


1.15
log
@feng shui
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.14 2013/08/26 10:40:26 dlg Exp $ */
d260 1
a260 1
		if (sc->sc_path.p_dev != NULL)
@


1.14
log
@pull rdac_c9 apart and use its guts to implement the status check
handler for the mpath midlayer to call. the status check is completely
event driven.

a group is considered active if the VOLACCESSCTL vpd page has some
bits set.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.7 2011/07/11 01:02:48 dlg Exp $ */
d382 1
a382 2
		printf("%s: extdevid page is invalid\n",
		    DEVNAME(sc));
@


1.13
log
@rename rdac_c8 to rdac_extdevid and use less magic numbers in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.12 2013/08/26 10:13:17 dlg Exp $ */
d115 4
a118 2
	u_int8_t		path_priority;
	u_int8_t		_reserved[38];
d124 2
d161 3
a163 1
int		rdac_c9(struct rdac_softc *);
d219 5
a226 3
	if (rdac_c9(sc) != 0)
		return;

d240 4
d258 2
d302 34
a335 1
	mpath_path_status(&sc->sc_path, MPATH_S_UNKNOWN);
a401 35

int
rdac_c9(struct rdac_softc *sc)
{
	struct rdac_vpd_volaccessctl *pg;
	int rv = 1;

	pg = dma_alloc(sizeof(*pg), PR_WAITOK | PR_ZERO);

	if (scsi_inquire_vpd(sc->sc_path.p_link, pg, sizeof(*pg),
	    RDAC_VPD_VOLACCESSCTL, scsi_autoconf) != 0) {
		printf("%s: unable to fetch vpd page c9\n", DEVNAME(sc));
		goto done;
	}

	if (_4btol(pg->pg_id) != RDAC_VPD_ID_VOLACCESSCTL) {
		printf("%s: volume access control page id is invalid\n",
		    DEVNAME(sc));
		goto done;
	}

	if (ISSET(pg->avtcvp, RDAC_VOLACCESSCTL_AVT)) {
		printf("%s: avt\n", DEVNAME(sc));
		rv = 0;
	} else if (ISSET(pg->avtcvp, RDAC_VOLACCESSCTL_OWNER)) {
		printf("%s: owner\n", DEVNAME(sc));
		rv = 0;
	} else
		printf("%s: unowned\n", DEVNAME(sc));

done:
	dma_free(pg, sizeof(*pg));
	return (rv);
}

@


1.12
log
@when i first imagined how paths on mpath worked, i thought the
midlayer would be able to call things on paths to explicitely online
or offline them. turns out thats not how the Real World(tm) works,
instead its better to wait for failure and probe for the status of
paths, and pick the active group of paths from that. there's even
evidence that the mechanisms for forcing controllers into active/passive
roles from the scsi initiator are being deprecated. they expect
hosts to be able to cope with arbitrary controller role changes and
failover
accordingly.

this replaces the online and offline function pointers in the path_ops
structure with a status check function pointer. instead of returning a
state, the checker is expected to call mpath_path_status() when its
finished figuring out what the state is.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.11 2013/08/26 07:43:04 dlg Exp $ */
d155 1
a156 1
int		rdac_c8(struct rdac_softc *);
d213 1
a213 1
	if (rdac_c8(sc) != 0)
d318 1
a318 1
rdac_c8(struct rdac_softc *sc)
d328 3
a330 3
	if (scsi_inquire_vpd(sc->sc_path.p_link, pg, sizeof(*pg), 0xc8,
	    scsi_autoconf) != 0) {
		printf("%s: unable to fetch vpd page c8\n", DEVNAME(sc));
d335 1
a335 1
		printf("%s: extended hardware id page is invalid\n",
@


1.11
log
@my DELL MD3000i seems to return skey illegal request + asc 0x94 +
ascq 0x01, or skey unit attention + asc 0x8b + ascq 0x02 when i
tell it to change controller ownership of a volume. i wish i knew
what the numbers really meant, but alas, there's no doco cos this
is all magical and unique apparently.

anyway, empirically this can be used in rdac_checksense to return
MPATH_SENSE_FAILOVER.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.9 2013/08/26 07:29:45 dlg Exp $ */
d146 1
a146 2
int		rdac_mpath_online(struct scsi_link *);
int		rdac_mpath_offline(struct scsi_link *);
d151 1
a151 2
	rdac_mpath_online,
	rdac_mpath_offline,
d283 2
a284 2
int
rdac_mpath_online(struct scsi_link *link)
d286 1
a286 2
	return (0);
}
d288 1
a288 4
int
rdac_mpath_offline(struct scsi_link *link)
{
	return (0);
@


1.10
log
@checksense handlers in path drivers can return MPATH_SENSE_DECLINED
(who can tell ive spent time in web servers) to say they decline
interpreting the sense data, or MPATH_SENSE_FAILOVER to say the
sense data is from the controller saying its failed over.

all path drivers currently decline handling sense data.
@
text
@d266 16
@


1.9
log
@introduce the idea of groups of paths. mpath had stuff to managed
devices and paths. devices are what mpath presents as targets on
its scsibus, and paths are the things attached to hardware controllers
that are available to shove io down to the actual real target. all
paths were considered usable for handling io on behalf of a device.

this adds groups in between devices and paths. only paths on the
first group in the list will now be used to handle io now.

sym devices will only have one group. asym devices will treat each
path as a different group. rdac, emc, and hds will group paths based
on which controller in the array theyre connected to.

in the future we will intercept sense data from passive controllers
and use that to start running checks to pick a new primary group
so we can handle controller failover situations.

the group id in hds(4) is currently busted, everything else should
be correct.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.7 2011/07/11 01:02:48 dlg Exp $ */
d266 1
a266 1
	return (0);
@


1.8
log
@rdac_groupid queries which controller the path is attached to, which we'll
use as the group id later on.
@
text
@d204 1
d221 7
a227 1
	if (mpath_path_attach(&sc->sc_path, &rdac_mpath_ops) != 0)
@


1.7
log
@support "failover" style access to volumes, ie, only use one active
path when talking to an array until it goes away, then you fail
over to the next active path.

im using this to talk to ses(4) in my dell, and allows us to support
arrays that have multiple controllers but have no way of reporting
which one is active. using the MRU semantic means we can talk to
them without them flipping the active role between its controllers
all the time. claudios transtec iscsi box is like this.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.6 2011/07/03 15:47:18 matthew Exp $ */
d157 1
d272 26
@


1.6
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.5 2011/06/15 01:47:41 dlg Exp $ */
d149 1
a149 1
struct mpath_ops rdac_mpath_ops = {
d154 1
a211 1
	sc->sc_path.p_ops = &rdac_mpath_ops;
d219 1
a219 1
	if (mpath_path_attach(&sc->sc_path) != 0)
@


1.5
log
@all the dell md3xxx arrays are rdac
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.4 2011/04/28 10:43:36 dlg Exp $ */
a235 1
	case DVACT_ACTIVATE:
@


1.4
log
@clean up the path ops struct a bit. the path drivers init their xsh with
their start routines, they dont have to pass pointers to them in the
ops struct.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.3 2011/04/27 09:09:36 dlg Exp $ */
d168 4
a171 1
	{ "DELL    ", "MD3000i         " }
@


1.3
log
@whitespace fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.2 2011/04/27 07:14:50 dlg Exp $ */
a150 1
	rdac_mpath_start,
@


1.2
log
@use dma safe memory when talking to devices. this was written before bigmem
required this.

requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpath_rdac.c,v 1.1 2011/04/05 14:25:42 dlg Exp $ */
d24 1
a24 1
#include <sys/kernel.h>  
d236 2
a237 2
        case DVACT_RESUME:
                break;
d243 1
a243 2
        return (rv);

@


1.1
log
@move forward with scsi multipathing.

the big change is how paths between mpath capable devices and the
kernel are managed.

originally the midlayer would steal the links to the devices and
hide them behind mpath. all the changes an adapter made to a link
(eg activate or detach), the midlayer had to test if it was an mpath
link and then call special mpath code to handle it.

the original code also assumed that all paths behaved the same, but
the reality is that different devices have different command sets
and behaviours. figuring out which behaviour to pick and prioritising
them is basically the same job autoconf does with match and attach.

rather than special casing mpath in the midlayer and reimplimenting
autoconf, this turns paths into actual device drivers with match
and attach routines. after they figure out if the path is active,
they then give it to mpath(4) to use as a backend.

i have written drivers for symmetric access devices (sym(4)) where
all paths to the same logical unit are as good as each other,
lsi/engenio arrays (rdac(4), and emc arrays (emc(4)).

the rdac and emc drivers only detect active paths at attach time,
the do not cope if the controller changes state unless you unplug
the path and plug it in again to retest the active state. they also
do not have support for directing array failover.

operating and hoplugging has been tested with mpii(4), fc and sas
mpi(4), and iscsi via vscsi (claudio did this too).

ok krw@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d276 1
a276 1
	struct rdac_vpd_extdevid pg;
d280 1
d282 3
a284 1
	if (scsi_inquire_vpd(sc->sc_path.p_link, &pg, sizeof(pg), 0xc8,
d287 1
a287 1
		return (1);
d290 1
a290 1
	if (_4btol(pg.pg_id) != RDAC_VPD_ID_EXTDEVID) {
d293 1
a293 1
		return (1);
d297 2
a298 2
	for (i = 0; i < sizeof(pg.array_label) / 2; i++)
		array[i] = pg.array_label[i * 2 + 1];
d301 2
a302 2
	for (i = 0; i < sizeof(pg.vol_label) / 2; i++)
		vol[i] = pg.vol_label[i * 2 + 1];
d306 4
a309 1
	return (0);
d315 2
a316 1
	struct rdac_vpd_volaccessctl pg;
d318 3
a320 1
	if (scsi_inquire_vpd(sc->sc_path.p_link, &pg, sizeof(pg),
d323 1
a323 1
		return (1);
d326 1
a326 1
	if (_4btol(pg.pg_id) != RDAC_VPD_ID_VOLACCESSCTL) {
d329 1
a329 1
		return (1);
d332 1
a332 1
	if (ISSET(pg.avtcvp, RDAC_VOLACCESSCTL_AVT)) {
d334 2
a335 3
		return (0);
	}
	if (ISSET(pg.avtcvp, RDAC_VOLACCESSCTL_OWNER)) {
d337 7
a343 5
		return (0);
	}

	printf("%s: unowned\n", DEVNAME(sc));
	return (1);
@

