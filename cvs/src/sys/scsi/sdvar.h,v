head	1.42;
access;
symbols
	OPENBSD_6_2:1.42.0.18
	OPENBSD_6_2_BASE:1.42
	OPENBSD_6_1:1.42.0.16
	OPENBSD_6_1_BASE:1.42
	OPENBSD_6_0:1.42.0.12
	OPENBSD_6_0_BASE:1.42
	OPENBSD_5_9:1.42.0.8
	OPENBSD_5_9_BASE:1.42
	OPENBSD_5_8:1.42.0.10
	OPENBSD_5_8_BASE:1.42
	OPENBSD_5_7:1.42.0.2
	OPENBSD_5_7_BASE:1.42
	OPENBSD_5_6:1.42.0.6
	OPENBSD_5_6_BASE:1.42
	OPENBSD_5_5:1.42.0.4
	OPENBSD_5_5_BASE:1.42
	OPENBSD_5_4:1.41.0.2
	OPENBSD_5_4_BASE:1.41
	OPENBSD_5_3:1.40.0.2
	OPENBSD_5_3_BASE:1.40
	OPENBSD_5_2:1.38.0.6
	OPENBSD_5_2_BASE:1.38
	OPENBSD_5_1_BASE:1.38
	OPENBSD_5_1:1.38.0.4
	OPENBSD_5_0:1.38.0.2
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.34.0.2
	OPENBSD_4_9_BASE:1.34
	OPENBSD_4_8:1.31.0.2
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.42
date	2013.10.02.18.59.04;	author krw;	state Exp;
branches;
next	1.41;

1.41
date	2013.06.11.16.42.17;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2012.12.19.19.52.11;	author kettenis;	state Exp;
branches;
next	1.39;

1.39
date	2012.10.08.21.47.51;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2011.07.11.06.26.09;	author dlg;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.11.00.22.15;	author dlg;	state Exp;
branches;
next	1.36;

1.36
date	2011.06.06.01.59.49;	author matthew;	state Exp;
branches;
next	1.35;

1.35
date	2011.06.05.18.40.33;	author matthew;	state Exp;
branches;
next	1.34;

1.34
date	2010.09.12.02.05.54;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2010.09.11.22.40.10;	author krw;	state Exp;
branches;
next	1.32;

1.32
date	2010.09.01.01.38.12;	author dlg;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.02.13.32.13;	author dlg;	state Exp;
branches;
next	1.30;

1.30
date	2010.05.26.16.38.20;	author thib;	state Exp;
branches;
next	1.29;

1.29
date	2010.05.19.05.50.50;	author dlg;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.06.00.59.50;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2010.01.11.00.14.52;	author beck;	state Exp;
branches;
next	1.26;

1.26
date	2010.01.09.21.12.06;	author dlg;	state Exp;
branches;
next	1.25;

1.25
date	2009.12.03.14.31.03;	author dlg;	state Exp;
branches;
next	1.24;

1.24
date	2009.12.01.01.40.02;	author dlg;	state Exp;
branches;
next	1.23;

1.23
date	2009.11.12.06.20.27;	author dlg;	state Exp;
branches;
next	1.22;

1.22
date	2009.11.10.10.18.59;	author dlg;	state Exp;
branches;
next	1.21;

1.21
date	2009.11.10.10.13.08;	author dlg;	state Exp;
branches;
next	1.20;

1.20
date	2009.11.05.03.33.52;	author marco;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.14.00.03.28;	author dlg;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.17.01.30.32;	author thib;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.03.22.09.30;	author thib;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.10.18.04.41;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.26.05.42.20;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.21.21.11.34;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.06.02.49.19;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.15.19.22.18;	author bluhm;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.23.19.19.49;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.12.02.44.36;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.05.14.58.10;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.05.00.55.25;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.02.15.39.55;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.02.14.32.17;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.02.03.49.47;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.17.16.28.05;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.27.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.14.35.43;	author deraadt;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.07.25.07.09.20;	author csapuntz;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.07.04.11.00.07;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.06.07.11.07.44;	author ho;	state Exp;
branches;
next	;

1.2.4.1
date	2002.06.11.03.32.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Use u_int64_t instead of daddr_t parameters to sd_cmd_rw*() functions.
Ditto disksize field of sd_softc and a couple of local calculation
variables.

scsi/* now daddr_t clean except where they really are 512-byte
blocks.
@
text
@/*	$OpenBSD: sdvar.h,v 1.41 2013/06/11 16:42:17 deraadt Exp $	*/
/*	$NetBSD: sdvar.h,v 1.7 1998/08/17 00:49:03 mycroft Exp $	*/

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Originally written by Julian Elischer (julian@@dialix.oz.au)
 * for TRW Financial Systems for use under the MACH(2.5) operating system.
 *
 * TRW Financial Systems, in accordance with their agreement with Carnegie
 * Mellon University, makes this software available to CMU to distribute
 * or use in any manner that they see fit as long as this message is kept with
 * the software. For this reason TFS also grants any other persons or
 * organisations permission to use or modify this software.
 *
 * TFS supplies this software to be publicly redistributed
 * on the understanding that TFS is not responsible for the correct
 * functioning of this software in any circumstances.
 *
 * Ported to run under 386BSD by Julian Elischer (julian@@dialix.oz.au) Sept 1992
 */

#ifdef _KERNEL
struct sd_softc {
	struct device		sc_dev;
	struct disk		sc_dk;
	struct bufq		sc_bufq;

	int			flags;
#define	SDF_ANCIENT	0x10		/* disk is ancient; for minphys */
#define	SDF_DIRTY	0x20		/* disk is dirty; needs cache flush */
#define	SDF_DYING	0x40		/* dying, when deactivated */
#define	SDF_WAITING	0x80
#define	SDF_THIN	0x01		/* disk is thin provisioned */
	struct scsi_link	*sc_link; /* contains our targ, lun, etc. */
	struct disk_parms {
		u_long	heads;		/* number of heads */
		u_long	cyls;		/* number of cylinders */
		u_long	sectors;	/* number of sectors/track */
		u_long	secsize;	/* number of bytes/sector */
		u_int64_t	disksize;	/* total number sectors */
		u_int32_t	unmap_sectors;	/* maximum sectors/unmap */
		u_int32_t	unmap_descs;	/* maximum descriptors/unmap */
	} params;
	void *sc_sdhook;		/* our shutdown hook */
	struct timeout sc_timeout;

	struct scsi_xshandler sc_xsh;
};

#define	SDGP_RESULT_OK		0	/* parameters obtained */
#define	SDGP_RESULT_OFFLINE	1	/* no media, or otherwise losing */

#endif /* _KERNEL */
@


1.41
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.40 2012/12/19 19:52:11 kettenis Exp $	*/
d68 1
a68 1
		daddr_t	disksize;	/* total number sectors */
@


1.40
log
@Temporarily bring back the shutdown hook, but only use it to flush the disk
cache.  This shouldn't interfere with the hibernate code and makes sure we
still flush the cache for controller that don't pass DVACT_POWRDOWN down to
their children yet.  This will be removed when the autoconf subsystem gets
changed to do that for us by default.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.39 2012/10/08 21:47:51 deraadt Exp $	*/
d68 1
a68 1
		daddr64_t	disksize;	/* total number sectors */
@


1.39
log
@Revamp the sequences for suspend/hibernate -> resume so that the code
paths are reflexive.  It is now possible to fail part-way through a
suspend sequence, and recover along the resume code path.
Split DVACT_SUSPEND by adding a new DVACT_POWERDOWN method is used
after hibernate (and suspend too) to finish the job.  Some drivers
must be converted at the same time to use this instead of shutdown hooks
(the others will follow at a later time)
ok kettenis mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.38 2011/07/11 06:26:09 dlg Exp $	*/
d72 1
@


1.38
log
@ask the disk about unmap (read trim) parameters. check if we have the
required vpd pages, then read them for the values we want.

we look for the max blocks per unmap, the max descriptors per unmap, and
which scsi command to use for unmapping (unmap will be preferred).

two fixes and ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.37 2011/07/11 00:22:15 dlg Exp $	*/
a71 1
	void *sc_sdhook;		/* our shutdown hook */
@


1.37
log
@disks report trim^Wunmap^Wif theyre thin provisioned via a bit in
the read cap 16 data. move the read cap code into sd.c so i can get
at this bit without much contorting, and to make it trivial to get
at the other interesting things in there later.

thin disks report themselves as "thin" in dmesg along with their
size now.

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.36 2011/06/06 01:59:49 matthew Exp $	*/
d69 2
@


1.36
log
@Delete the long dead LOCKED and WANTED flags from cd(4), sd(4), and
wd(4).  They haven't been used for 10+ years, since the drivers were
switched to use disk_lock() and disk_unlock() instead.

No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.35 2011/06/05 18:40:33 matthew Exp $	*/
d61 1
@


1.35
log
@Drop kernel support for the useless DIOCWLABEL ioctl and prune a lot
of silly flag twiddling code in various disk drivers.

ok deraadt@@, miod@@

N.B., users will need a -current disklabel(8) to be able to write new
disklabels to disk now.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.34 2010/09/12 02:05:54 krw Exp $	*/
a56 2
#define	SDF_LOCKED	0x01
#define	SDF_WANTED	0x02
@


1.34
log
@Garbage collect rot_rate from disk_parms. No longer in disk label so no
need to calculate and save. Not used anywhere in tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.33 2010/09/11 22:40:10 krw Exp $	*/
a58 2
#define	SDF_WLABEL	0x04		/* label is writable */
#define	SDF_LABELLING	0x08		/* writing label */
@


1.33
log
@Be more ruthlessly consistent in variable names for blk/block ==
512 == DEV_BSIZE units and variable-sized physical device 'sectors'.
I hope this reduces confusion a bit more. No change to .o files.

ok for intent miod@@, with tweak.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.32 2010/09/01 01:38:12 dlg Exp $	*/
a70 1
		u_long	rot_rate;	/* rotational rate, in RPM */
@


1.32
log
@make struct bufq a member of the softc for devices that use it,
rather than it being a pointer to something that needs to be allocated
at attach. since all these devices need a bufq to operate, it makes
sense to have it allocated as part of the softc and get bufq_init
to just initialise all its fields. it also gets rid of the possibility
that you wont be able to allocate the bufq struct during attach,
which is something you dont want to happen.

secondly, it consistently implements a split between wrapper functions
and the per discipline implementation of the bufq handlers. it
consistently does the locking in the wrappers rather than doing
half in the wrappers and the other half in the implementations.

it also consistently handles the outstanding bufq bq pointer in the
wrappers.

this hides most of the implementation inside kern_bufq.c. the only
stuff left in buf.h is for the bits each implementation needs to
put inside struct buf.

tested by thib@@ krw@@ and me
ok thib@@ matthew@@
no objection from krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.31 2010/06/02 13:32:13 dlg Exp $	*/
d70 1
a70 1
		u_long	blksize;	/* number of bytes/sector */
@


1.31
log
@bring back the SDF_WAITING waiting flag while adapters still implement
NO_CCB.

if sd_buf_done is told that the adapter has no more ccbs via NO_CCB, this
sets a flag so sdstart doesnt try and queue more io straight away.

this fixes the lockups on ciss that halex and okan were experiencing after
the iopools code went in. it will fix any other hba that returns NO_CCB
too.

tested by me@@, okan@@, and halex@@
ok krw@@ okan@@ halex@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.30 2010/05/26 16:38:20 thib Exp $	*/
d54 1
a54 1
	struct bufq		*sc_bufq;
@


1.30
log
@Trying this again. Mixing anoncvs with cvs is _not_ a good idea.

Reintroduce bufqs. A few changes since it was backed out after some good
comments from dlg@@.

No need for a separate bufq.h, keep all of in buf.h; As requested by kittens
and deraadt.

Only sd(4) and wd(4) for now. The rest of the drivers will be converted soon,
also other goodies like heuristics for sd(4) for selecting the bufq type and
the death of disksort() are forthcoming.

Tested on: i386, amd64, sparc64, macppc, loongson and alpha by myself and
phessler.

OK art@@, beck@@, kettenis@@, oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.29 2010/05/19 05:50:50 dlg Exp $	*/
d64 1
@


1.29
log
@remove unused flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.28 2010/04/06 00:59:50 dlg Exp $	*/
d54 1
a72 2
	struct mutex sc_buf_mtx;
	struct buf sc_buf_queue;
@


1.28
log
@cut sd over to using the new shiny scsi_xsh api. instead of pushing io onto
the disk as soon as it gets any from the block layer, this now registers
a callback for when a resource becomes available on the bus.

ok krw@@ beck@@ marco@@
tested by many including krw@@ beck@@ mk@@ okan@@ todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.27 2010/01/11 00:14:52 beck Exp $	*/
a62 1
#define SDF_WAITING	0x80		/* bus is busy, try again later */
@


1.27
log
@Add mutex around work consuming loop in sdstart - this ensures that only
one thread will be grabbing xs's at a time and dequeuing work, but avoids
a race between notification there is work to do and exiting the loop
releasing the xs's.

Fixes problem noticed by claudio where usb disks would hang with the new
minty dlg midlayer.

ok krw@@, dlg@@, tested by claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.26 2010/01/09 21:12:06 dlg Exp $	*/
a73 2
	struct mutex sc_start_mtx;
	u_int sc_start_count;
d77 2
@


1.26
log
@dont try to prevent multiple concurrent runs of a devices start routine
by setting flags around the loop. there is a race which can prevent
necessary work being completed by any of the currently running instances
of xxstart.

the caveat with the removal of this code is because multiple xxstarts can
be running at the same time they can cause io reordering, but that is less
of a problem than no io.

found by and fix tested by claudio@@
debugged with krw@@ claudio@@ beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.25 2009/12/03 14:31:03 dlg Exp $	*/
d75 1
a78 1
	
@


1.25
log
@prevent a completion interrupt pulling io of the buf queue and shoving it
down to the disk while a process is doing the same thing. this will avoid
some relatively minor io reordering from occurring.

discovered by krw@@ during his long dark trek through the code. requested
by marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.24 2009/12/01 01:40:02 dlg Exp $	*/
a63 1
#define SDF_STARTING	0x100		/* sdstart is already running */
@


1.24
log
@put the midlayer changes back in.

the two issues affecting it last time are gone. the first, mishandling of
TRY_AGAIN_LATER is not relevant now that krw got rid of TRY_AGAIN_LATER.
the second, the misbehaving IBM disk was found to be a problem with siop
using ordered tags on most ops combined with the speed of the new code.

putting this in so we can move forward.

ok krw@@ "commit please" marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.23 2009/11/12 06:20:27 dlg Exp $	*/
d64 1
d75 1
@


1.23
log
@revert midlayer back to it was before i put my big rewrite in. this is
causing a weird problems on an alpha and also appears responsible for
isp(4) weirdness i havent had a chance to examine yet.

sigh, this makes me sad.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.20 2009/11/05 03:33:52 marco Exp $	*/
d52 2
a53 2
	struct device sc_dev;
	struct disk sc_dk;
d55 1
a55 1
	int flags;
d63 2
a64 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc. */
d73 2
a74 1
	struct buf buf_queue;
d77 1
@


1.22
log
@fix the NO_CCB handling i broke when working on simplifying the midlayer.

marco@@ discovered my rewrite retried commands rejected by an adapter
from a timeout, which was trivially starved by normal io going to
disks. this diff allows an xs to be marked as XS_NO_CCB, which will
cause it to be returned to the device driver to be retried as part
of the normal io queue.

tested by krw@@ marco@@ johan@@
ok krw@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.21 2009/11/10 10:13:08 dlg Exp $	*/
d52 2
a53 2
	struct device		sc_dev;
	struct disk		sc_dk;
d55 1
a55 1
	int			flags;
d63 1
a63 2
#define SDF_WAITING	0x80		/* bus is busy, try again later */
	struct scsi_link	*sc_link; /* contains our targ, lun, etc. */
d72 1
a72 2
	struct mutex sc_buf_mtx;
	struct buf sc_buf_queue;
a74 1
	
@


1.21
log
@backout the backout marco did of my code because of the NO_CCB breakage.
the fix for the NO_CCB breakage will follow shortly.

tested by krw@@ marco@@ johan@@
ok krw@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.20 2009/11/05 03:33:52 marco Exp $	*/
d63 1
@


1.20
log
@The big diff dlg committed to the midlayer breaks NO_CCB and
TRY_AGAIN_LATER.  NO_CCB is a timer based mechanism that can trivially
be made to fail by running IO to two or more disks simultaneously.  The
TRY_AGAIN_LATER thing is more subtle because it now is a permanent
failure instead of transient however this is much harder to hit because
something must have gone wrong before it hits.

ok deraadt krw miod
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.18 2009/06/17 01:30:32 thib Exp $	*/
d52 2
a53 2
	struct device sc_dev;
	struct disk sc_dk;
d55 1
a55 1
	int flags;
d63 1
a63 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc. */
d72 2
a73 1
	struct buf buf_queue;
d76 1
@


1.19
log
@rework the scsi midlayer to start addressing some problems i have
with it which became extremely annoying with what mpath wants to
do.

the major change is a new interface for submitting scsi commands.
previously the only way for drivers like sd, cd, st, etc to push
commands onto the hardware was via scsi_scsi_cmd(). the problem
with scsi_scsi_cmd is that it doesnt tell the caller if the command
failed, was queued, or completed unless you shoved a buf down with
it. this is important for mpath which wants to know what the physical
path to the device did so it can report it back to the midlayer
which called it.

this provides a new api which lets drivers like cd/sd/st/mpath etc
allocate an xs, fill it in, and provide a completion routine which
the midlayer will call with the state of the command when it is
finished with it. the caller is then responsible for freeing the
xs.

from the hba side of thing, the return code from the scsi_cmd
entrypoint is largely ignored now, and it is now always the
responsibility of the hba driver to call scsi_done when it has
completed the io, rather than returning COMPLETE and expecting the
midlayer to do it for you.

i have emulated scsi_scsi_cmd on top of this new api so existing
users of it will continue to work. sd(4) has been reworked to use
the new api directly to both demonstrate its use and test that the
new api actually does work.

this diff was mostly written in a day at f2k9. thanks to miod for poking
through hba drivers to help mitigate against fallout from the change to
the COMPLETE semantic. this has been reviewed by krw who didnt spot
anything wrong.

thanks to dave del debbio for testing.

ok deraadt@@
@
text
@d52 2
a53 2
	struct device		sc_dev;
	struct disk		sc_dk;
d55 1
a55 1
	int			flags;
d63 1
a63 1
	struct scsi_link	*sc_link; /* contains our targ, lun, etc. */
d72 1
a72 2
	struct mutex sc_buf_mtx;
	struct buf sc_buf_queue;
a74 1
	
@


1.18
log
@Revert bufq's. this is inline with the major midlayer reverts that
have been going on. this appears to bring us back to stable state.

lots of testing by oga and ariane and my self.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.17 2009/06/03 22:09:30 thib Exp $	*/
d52 2
a53 2
	struct device sc_dev;
	struct disk sc_dk;
d55 1
a55 1
	int flags;
d63 1
a63 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc. */
d72 2
a73 1
	struct buf buf_queue;
d76 1
@


1.17
log
@add a flexible buffer queue (bufq) api, based on the never used
one by tedu@@. It doesn't do anything smart yet, it just uses
plain old disksort. we also keep the old method of queueing bufs
since some miods have crazy MD drivers that need some love.

ok beck@@, art@@
tested by many on many archs.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.15 2008/06/26 05:42:20 ray Exp $	*/
d72 1
@


1.16
log
@clean namespace a fair bit; wrap kernel-use-only structures and gunk in
#ifdef _KERNEL
@
text
@a71 1
	struct buf buf_queue;
@


1.15
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.14 2008/06/21 21:11:34 krw Exp $	*/
d50 1
d79 2
@


1.14
log
@fgsch@@ points out my last commit changed the retry limit for CD capacity
commands. Bump limit back to the standard 4, and at the same time eliminate
SDRETRIES and CDRETRIES (both defined to 4) in favour of a new define,
SCSI_RETRIES, also defined to 4.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.13 2007/11/06 02:49:19 krw Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.13
log
@Fix SDF_DIRTY handling, eliminate useless SDF_FLUSHING. The sd_flush()
called from the last sdclose() on a device will now reset SDF_DIRTY
after submitting the SYNCHRONIZE CACHE command. sddone() need not
worry about SDF_DIRTY since it was never called for the SYNCHRONIZE
CACHE command anyway.

This eliminates a spurious SYNCHRONIZE CACHE command being issued for
every sd device from sd_shutdown().

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.12 2007/09/15 19:22:18 bluhm Exp $	*/
a55 2

#define	SDRETRIES	4
@


1.12
log
@Allow to pull out an usb stick with ffs filesystem while mounted
and a file is written onto the stick.  Without these fixes the
machine panics or hangs.
The usb fix calls the callback when the stick is pulled out to free
the associated buffers.  Otherwise we have busy buffers for ever
and the automatic unmount will panic.
The change in the scsi layer prevents passing down further dirty
buffers to usb after the stick has been deactivated.
In vfs the automatic unmount has moved from the function vgonel()
to vop_generic_revoke().  Both are called when the sd device's vnode
is removed.  In vgonel() the VXLOCK is already held which can cause
a deadlock.  So call dounmount() earlier.

ok krw@@, I like this marco@@, tested by ian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.11 2007/06/23 19:19:49 krw Exp $	*/
d70 1
a70 2
#define	SDF_FLUSHING	0x40		/* flushing, for sddone() */
#define	SDF_DYING	0x80		/* dying, when deactivated */
@


1.11
log
@Implement disk sizes > 2^32-1. Code modelled on NetBSD.

Tested, tweaked and ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.10 2006/12/12 02:44:36 krw Exp $	*/
d71 1
@


1.10
log
@Give the SCSI layer the ability to requeue i/o's rejected by a driver
using the new NO_CCB result. Currently a no-op since no driver produces
that result.

ok dlg@@ marco@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.9 2006/03/05 14:58:10 krw Exp $	*/
a76 1
		u_long	disksize;	/* total number sectors */
d78 1
@


1.9
log
@Remove NetBSDism NRND. Pointed out by Mickey.

ok miod@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.8 2005/07/05 00:55:25 krw Exp $	*/
d82 1
@


1.8
log
@Since scsi_link now includes a copy of the INQUIRY data, don't keep a
copy of the vendor/product/revision fields in sd_softc. Just use the
INQUIRY data to build the disklabel 'label' when required. No
functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.7 2005/07/02 15:39:55 krw Exp $	*/
a81 4

#if NRND > 0
	rndsource_element_t rnd_source;
#endif
@


1.7
log
@Remove unused cd_softc.name field. Use the saved INQUIRY data in
scsi_link to determine device type, rather than keeping a copy in
sd_softc.type. Remove unused sd_softc.type field.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.6 2005/07/02 14:32:17 krw Exp $	*/
a80 5
	struct disk_name {
		char vendor[9];		/* disk vendor/manufacturer */
		char product[17];	/* disk product model */
		char revision[5];	/* drive/firmware revision */
	} name;
a89 1

@


1.6
log
@Remove unused struct sd_ops.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.5 2005/07/02 03:49:47 krw Exp $	*/
a80 1
	u_int8_t type;
@


1.5
log
@Don't use READ FORMAT CAPACITIES to determine the size of ATAPI sd
devices. Use READ CAPACITY like NetBSD, FreeBSD, Linux and OpenSolaris
do. Well, NetBSD keeps READ FORMAT CAPACITIES as a backup. Fixes
problems with devices (such as my IBM USB Memory Key) which return
block counts that are off by one for READ FORMAT CAPACITIES.

This eliminates the significant difference between sd_atapi.c and
sd_scsi.c so merge sd_scsi.c into sd.c and just be careful to mark
ATAPI removable devices as both SDEV_NOSYNCCACHE and unable to return
MODE SENSE page 4 info.

All geometry faking is now in one place. Where it can be 'improved'.

sd_scsi.c, sd_atapi.c and atapi_disk.h will be removed as a result.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.4 2003/05/17 16:28:05 krw Exp $	*/
a57 2

struct sd_ops;
@


1.4
log
@paramters -> parameters in comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.3 2002/03/14 01:27:13 millert Exp $	*/
a88 2
	const struct sd_ops *sc_ops;	/* our bus-dependent ops vector */

a95 5
struct sd_ops {
	int	(*sdo_get_parms)(struct sd_softc *, struct disk_parms *,
		    int);
	void	(*sdo_flush)(struct sd_softc *, int);
};
a97 1
#define	SDGP_RESULT_UNFORMATTED	2	/* unformatted media (max params) */
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.2 2001/06/22 14:35:43 deraadt Exp $	*/
d103 1
a103 1
#define	SDGP_RESULT_OK		0	/* paramters obtained */
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.1 1999/07/25 07:09:20 csapuntz Exp $	*/
d99 3
a101 3
	int	(*sdo_get_parms) __P((struct sd_softc *, struct disk_parms *,
		    int));
	void	(*sdo_flush) __P((struct sd_softc *, int));
@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.2 2001/06/22 14:35:43 deraadt Exp $	*/
d99 3
a101 3
	int	(*sdo_get_parms)(struct sd_softc *, struct disk_parms *,
		    int);
	void	(*sdo_flush)(struct sd_softc *, int);
@


1.1
log
@

Merge sd stuff from NetBSD-current. Helps with LS-120, ZIP

More SCSI logic from NetBSD-current

Some tape fixes. ATAPI tapes do not work yet for most operations.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.7 1998/08/17 00:49:03 mycroft Exp $	*/
d84 5
a88 5
        struct disk_name {
                char vendor[9];         /* disk vendor/manufacturer */
                char product[17];       /* disk product model */
                char revision[5];       /* drive/firmware revision */
        } name;
@


1.1.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.1 1999/07/25 07:09:20 csapuntz Exp $	*/
d84 5
a88 5
	struct disk_name {
		char vendor[9];		/* disk vendor/manufacturer */
		char product[17];	/* disk product model */
		char revision[5];	/* drive/firmware revision */
	} name;
@


1.1.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d99 3
a101 3
	int	(*sdo_get_parms)(struct sd_softc *, struct disk_parms *,
		    int);
	void	(*sdo_flush)(struct sd_softc *, int);
@


1.1.4.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sdvar.h,v 1.1.4.2 2002/03/28 14:52:01 niklas Exp $	*/
d103 1
a103 1
#define	SDGP_RESULT_OK		0	/* parameters obtained */
@


