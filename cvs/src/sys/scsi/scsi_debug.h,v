head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.4
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.30
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.28
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.26
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.24
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.22
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.20
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.18
	OPENBSD_2_8:1.7.0.16
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.14
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.12
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.03.12.15.16.04;	author krw;	state Exp;
branches;
next	1.11;
commitid	zkFngOKA3woPgVlY;

1.11
date	2015.06.07.19.13.27;	author krw;	state Exp;
branches;
next	1.10;
commitid	MxUWuiPFtM1nRYxm;

1.10
date	2011.06.21.22.36.42;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.10.18.04.41;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.25.00.09.20;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	97.09.05.05.56.49;	author millert;	state Exp;
branches
	1.7.12.1;
next	1.6;

1.6
date	97.08.22.04.43.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.14.04.09.08;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.11.28.13.20.36;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.31.01.09.22;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.00.43.58;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches;
next	;

1.7.12.1
date	2004.02.19.11.01.30;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Standardize on calling local scsi_link variables 'link' instead of
'sc_link'. 'sc_link' is a field in the various device *_softc
structures, where the sc_ prefix was for 'softc'. Reduces potential
mental confusion. Newer code from down under was already using
'link'.

No functional change.

Prompted by bluhm@@'s adventures in scsi. ok dlg@@ jmatthew@@
@
text
@/*	$OpenBSD: scsi_debug.h,v 1.11 2015/06/07 19:13:27 krw Exp $	*/
/*	$NetBSD: scsi_debug.h,v 1.7 1996/10/12 23:23:16 christos Exp $	*/

/*
 * Written by Julian Elischer (julian@@tfs.com)
 */
#ifndef	_SCSI_SCSI_DEBUG_H
#define _SCSI_SCSI_DEBUG_H 1
#ifdef _KERNEL

/*
 * These are the new debug bits.  (Sat Oct  2 12:46:46 WST 1993)
 * the following DEBUG bits are defined to exist in the flags word of
 * the scsi_link structure.
 */
#define	SDEV_DB1		0x0010	/* scsi commands, errors, data	*/
#define	SDEV_DB2		0x0020	/* routine flow tracking */
#define	SDEV_DB3		0x0040	/* internal to routine flows	*/
#define	SDEV_DB4		0x0080	/* level 4 debugging for this dev */

/* targets and LUNs we want to debug */
#ifndef SCSIDEBUG_BUSES
#define SCSIDEBUG_BUSES		0
#endif
#ifndef SCSIDEBUG_TARGETS
#define	SCSIDEBUG_TARGETS	0
#endif
#ifndef SCSIDEBUG_LUNS
#define	SCSIDEBUG_LUNS		0
#endif
#ifndef SCSIDEBUG_LEVEL
#define	SCSIDEBUG_LEVEL		(SDEV_DB1|SDEV_DB2)
#endif


extern u_int32_t scsidebug_buses, scsidebug_targets, scsidebug_luns;
extern int scsidebug_level;

/*
 * This is the usual debug macro for use with the above bits
 */
#ifdef	SCSIDEBUG
#define	SC_DEBUG(link,Level,Printstuff) \
	if ((link)->flags & (Level)) {	\
		sc_print_addr(link);		\
		printf Printstuff;		\
	}
#define	SC_DEBUGN(link,Level,Printstuff) \
	if ((link)->flags & (Level)) {	\
		printf Printstuff;		\
	}
#else
#define SC_DEBUG(A,B,C)
#define SC_DEBUGN(A,B,C)
#endif

#endif /* _KERNEL */
#endif /* _SCSI_SCSI_DEBUG_H */
@


1.11
log
@More damned eye searing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.10 2011/06/21 22:36:42 matthew Exp $	*/
d43 3
a45 3
#define	SC_DEBUG(sc_link,Level,Printstuff) \
	if ((sc_link)->flags & (Level)) {	\
		sc_print_addr(sc_link);		\
d48 2
a49 2
#define	SC_DEBUGN(sc_link,Level,Printstuff) \
	if ((sc_link)->flags & (Level)) {	\
@


1.10
log
@scsi_link's scsibus field is redundant with bus->sc_dev.dv_unit, so
remove two of the remaining three uses of it.  (softraid(4) still uses
it at the moment, so the field and its assignment in scsibusattach()
stay for now...)

ok krw@@; feedback and "tenteiramen rejid"(!?) miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.9 2008/11/10 18:04:41 deraadt Exp $	*/
d16 1
a16 1
#define	SDEV_DB1		0x0010	/* scsi commands, errors, data	*/ 
d46 1
a46 1
 		printf Printstuff;		\
d50 1
a50 1
 		printf Printstuff;		\
@


1.9
log
@clean namespace a fair bit; wrap kernel-use-only structures and gunk in
#ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.8 2004/01/25 00:09:20 krw Exp $	*/
d36 2
a37 1
extern int scsidebug_buses, scsidebug_targets, scsidebug_luns, scsidebug_level;
@


1.8
log
@Allow restriction of SCSIDEBUG output to particular scsi buses in
addition to device targets and luns.

ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.7 1997/09/05 05:56:49 millert Exp $	*/
d9 1
d56 1
@


1.7
log
@Add SCSITERSE option which omits the (large) ASC/ASCQ table.
Old scsi error printing code is now gone.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.6 1997/08/22 04:43:26 millert Exp $	*/
d21 3
d34 2
a35 1
extern int scsidebug_targets, scsidebug_luns, scsidebug_level;
@


1.7.12.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a20 3
#ifndef SCSIDEBUG_BUSES
#define SCSIDEBUG_BUSES		0
#endif
d31 1
a31 2

extern int scsidebug_buses, scsidebug_targets, scsidebug_luns, scsidebug_level;
@


1.6
log
@Add more detailed SCSI error printing by Matthew Jacob.  Enabled by
default.  Use "option SCSIVERBOSE=0" to turn off (only added 8Kb to my kernel).
From the NetBSD commit message:
    Add in more detailed SCSI error printing, based off of final SCSI-2 spec.
    This will also print out things like progress indicator errors, and will
    also dump out additional sense bytes that haven't been decoded.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.5 1997/04/14 04:09:08 downsj Exp $	*/
a8 7

/*
 * Give verbose messages by default.
 */
#ifndef SCSIVERBOSE
#define SCSIVERBOSE	1
#endif
@


1.5
log
@Merge in various pieces of current NetBSD scsi code, including but not limited
to:

* New changer driver.
* Better optical support.
* Different `done' semantics.
* New quirks for SCSI QIC tape driver, SCSI floppy drives.
* Better support for SCSI-I devices.

Everybody needs to test this.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.4 1996/11/28 13:20:36 niklas Exp $	*/
d9 7
@


1.4
log
@Make SCSI debugging more dynamic, more targets and luns can be
debugged simultaneously and which ones, as well as the verbosity, can be
determined at runtime.
@
text
@d1 2
a2 2
/*	$OpenBSD: scsi_debug.h,v 1.3 1996/10/31 01:09:22 niklas Exp $	*/
/*	$NetBSD: scsi_debug.h,v 1.5 1994/12/28 19:43:00 mycroft Exp $	*/
@


1.3
log
@$OpenBSD RCSIDs + comment fix in sd.c
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_debug.h,v 1.5 1994/12/28 19:43:00 mycroft Exp $	*/
d20 13
a32 5
/* target and LUN we want to debug */
#define	DEBUGTARGET	-1 /* -1 = disable */
#define	DEBUGLUN	0
#define	DEBUGLEVEL	(SDEV_DB1|SDEV_DB2)
 
@


1.2
log
@Several changes:
	* Implemented NetBSD PR#2529, adding ZIP 100.
	* Added MTIOCTOP support to acd, cd, and sd.
	* Implemented eject on close for acd, cd, and sd.

`mt -f /dev/rcd0d offline' now ejects a mounted {acd|cd|sd} when it is
unmounted.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d14 4
a17 4
#define	SDEV_DB1		0x10	/* scsi commands, errors, data	*/ 
#define	SDEV_DB2		0x20	/* routine flow tracking */
#define	SDEV_DB3		0x40	/* internal to routine flows	*/
#define	SDEV_DB4		0x80	/* level 4 debugging for this dev */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
