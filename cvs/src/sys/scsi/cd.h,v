head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.28
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.24
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.26
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.18
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.22
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.20
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.16
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.14
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.12
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.10
	OPENBSD_5_0:1.25.0.8
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.6
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.4
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.1.0.28
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.26
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.24
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.22
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.20
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.18
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.16
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.14
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.25
date	2009.12.16.10.51.28;	author dlg;	state Exp;
branches;
next	1.24;

1.24
date	2009.12.13.03.31.13;	author dlg;	state Exp;
branches;
next	1.23;

1.23
date	2009.12.13.03.29.01;	author dlg;	state Exp;
branches;
next	1.22;

1.22
date	2009.12.12.13.03.56;	author dlg;	state Exp;
branches;
next	1.21;

1.21
date	2009.06.17.01.30.30;	author thib;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.03.22.09.30;	author thib;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.28.20.58.41;	author fgsch;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.21.21.11.34;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.21.18.50.24;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.17.01.32.49;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.27.01.15.32;	author mjc;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.12.02.44.36;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.19.01.21.28;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.02.01.20.41;	author mjc;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.11.00.45.59;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.05.14.58.10;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.03.23.37.07;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.02.15.39.55;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.27.18.17.57;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.08.21.57.44;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.03.17.29.55;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.28.22.53.00;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.27.16.07.51;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.16.16.54.34;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	99.07.20.06.21.59;	author csapuntz;	state Exp;
branches;
next	;


desc
@@


1.25
log
@nothing needs to see cd_softc except the driver, so move it into cd.c

ok marco@@ guenther@@
@
text
@/*	$OpenBSD: cd.h,v 1.24 2009/12/13 03:31:13 dlg Exp $	*/
/*	$NetBSD: scsi_cd.h,v 1.6 1996/03/19 03:06:39 mycroft Exp $	*/

/*
 * Written by Julian Elischer (julian@@tfs.com)
 * for TRW Financial Systems.
 *
 * TRW Financial Systems, in accordance with their agreement with Carnegie
 * Mellon University, makes this software available to CMU to distribute
 * or use in any manner that they see fit as long as this message is kept with
 * the software. For this reason TFS also grants any other persons or
 * organisations permission to use or modify this software.
 *
 * TFS supplies this software to be publicly redistributed
 * on the understanding that TFS is not responsible for the correct
 * functioning of this software in any circumstances.
 *
 * Ported to run under 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 */
#ifndef	_SCSI_CD_H
#define _SCSI_CD_H 1

/*
 *	Define two bits always in the same place in byte 2 (flag byte)
 */
#define	CD_RELADDR	0x01
#define	CD_MSF		0x02

/*
 * SCSI command format
 */

struct scsi_blank {
	u_int8_t opcode;
	u_int8_t byte2;
#define BLANK_DISC	0
#define BLANK_MINIMAL	1
	u_int8_t addr[4];
	u_int8_t unused[5];
	u_int8_t control;
};

struct scsi_close_track {
	u_int8_t opcode;
	u_int8_t flags;
#define CT_IMMED	1
	u_int8_t closefunc;
#define CT_CLOSE_TRACK	1
#define CT_CLOSE_SESS	2
#define CT_CLOSE_BORDER 3
	u_int8_t unused;
	u_int8_t track[2];
	u_int8_t unused1[3];
	u_int8_t control;
};

struct scsi_pause {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[6];
	u_int8_t resume;
	u_int8_t control;
};
#define	PA_PAUSE	1
#define PA_RESUME	0

struct scsi_play_msf {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused;
	u_int8_t start_m;
	u_int8_t start_s;
	u_int8_t start_f;
	u_int8_t end_m;
	u_int8_t end_s;
	u_int8_t end_f;
	u_int8_t control;
};

struct scsi_play_track {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[2];
	u_int8_t start_track;
	u_int8_t start_index;
	u_int8_t unused1;
	u_int8_t end_track;
	u_int8_t end_index;
	u_int8_t control;
};

struct scsi_play {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t blk_addr[4];
	u_int8_t unused;
	u_int8_t xfer_len[2];
	u_int8_t control;
};

struct scsi_play_big {
	u_int8_t opcode;
	u_int8_t byte2;	/* same as above */
	u_int8_t blk_addr[4];
	u_int8_t xfer_len[4];
	u_int8_t unused;
	u_int8_t control;
};

struct scsi_play_rel_big {
	u_int8_t opcode;
	u_int8_t byte2;	/* same as above */
	u_int8_t blk_addr[4];
	u_int8_t xfer_len[4];
	u_int8_t track;
	u_int8_t control;
};

struct scsi_read_header {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t blk_addr[4];
	u_int8_t unused;
	u_int8_t data_len[2];
	u_int8_t control;
};

struct scsi_read_subchannel {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t byte3;
#define	SRS_SUBQ	0x40
	u_int8_t subchan_format;
	u_int8_t unused[2];
	u_int8_t track;
	u_int8_t data_len[2];
	u_int8_t control;
};

struct scsi_read_toc {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[4];
	u_int8_t from_track;
	u_int8_t data_len[2];
	u_int8_t control;
};

struct scsi_read_track_info {
	u_int8_t opcode;
	u_int8_t addrtype;
#define RTI_LBA		0
#define RTI_TRACK	1
#define RTI_BORDER	2
	u_int8_t addr[4];
	u_int8_t unused;
	u_int8_t data_len[2];
	u_int8_t control;
};

struct scsi_load_unload {
	u_int8_t opcode;
	u_int8_t reserved;
#define	IMMED	0x1
	u_int8_t reserved2[2];
	u_int8_t options;
#define START	0x1
#define	LOUNLO	0x2
	u_int8_t reserved4[3];
	u_int8_t slot;
	u_int8_t reserved5[2];
	u_int8_t control;
};

struct scsi_set_cd_speed {
	u_int8_t opcode;
	u_int8_t rotation;
#define ROTATE_CLV 0
#define ROTATE_CAV 1
	u_int8_t read[2];
	u_int8_t write[2];
	u_int8_t reserved[5];
	u_int8_t control;
};

/*
 * Opcodes
 */

#define READ_SUBCHANNEL		0x42	/* cdrom read Subchannel */
#define READ_TOC		0x43	/* cdrom read TOC */
#define READ_HEADER		0x44	/* cdrom read header */
#define PLAY			0x45	/* cdrom play 'play audio' mode */
#define PLAY_MSF		0x47	/* cdrom play Min,Sec,Frames mode */
#define PLAY_TRACK		0x48	/* cdrom play track/index mode */
#define PLAY_TRACK_REL		0x49	/* cdrom play track/index mode */
#define PAUSE			0x4b	/* cdrom pause in 'play audio' mode */
#define READ_TRACK_INFO		0x52	/* read track/rzone info */
#define CLOSE_TRACK		0x5b	/* close track/rzone/session/border */
#define BLANK			0xa1	/* cdrom blank */
#define PLAY_BIG		0xa5	/* cdrom pause in 'play audio' mode */
#define LOAD_UNLOAD		0xa6	/* cdrom load/unload media */
#define PLAY_TRACK_REL_BIG	0xa9	/* cdrom play track/index mode */
#define SET_CD_SPEED		0xbb	/* set cdrom read/write speed */

/*
 * Mode pages
 */

#define ERR_RECOVERY_PAGE	0x01
#define WRITE_PARAM_PAGE	0x05
#define CDVD_CAPABILITIES_PAGE	0x2a

struct cd_audio_page {
	u_int8_t page_code;
#define	CD_PAGE_CODE	0x3F
#define	AUDIO_PAGE	0x0e
#define	CD_PAGE_PS	0x80
	u_int8_t param_len;
	u_int8_t flags;
#define		CD_PA_SOTC	0x02
#define		CD_PA_IMMED	0x04
	u_int8_t unused[2];
	u_int8_t format_lba;
#define		CD_PA_FORMAT_LBA	0x0F
#define		CD_PA_APR_VALID	0x80
	u_int8_t lb_per_sec[2];
	struct	port_control {
		u_int8_t channels;
#define	CHANNEL 0x0F
#define	CHANNEL_0 1
#define	CHANNEL_1 2
#define	CHANNEL_2 4
#define	CHANNEL_3 8
#define	LEFT_CHANNEL	CHANNEL_0
#define	RIGHT_CHANNEL	CHANNEL_1
#define MUTE_CHANNEL    0x0
#define BOTH_CHANNEL    LEFT_CHANNEL | RIGHT_CHANNEL
		u_int8_t volume;
	} port[4];
#define	LEFT_PORT	0
#define	RIGHT_PORT	1
};

/*
 * There are 2352 bytes in a CD digital audio frame.  One frame is 1/75 of a
 * second, at 44.1kHz sample rate, 16 bits/sample, 2 channels.
 *
 * The frame data have the two channels interleaved, with the left
 * channel first.  Samples are little endian 16-bit signed values.
 */
#define CD_DA_BLKSIZ		2352	/* # bytes in CD-DA frame */
#define CD_NORMAL_DENSITY_CODE	0x00	/* from Toshiba CD-ROM specs */
#define CD_DA_DENSITY_CODE	0x82	/* from Toshiba CD-ROM specs */

struct scsi_read_dvd_structure {
	u_int8_t	opcode;		/* GPCMD_READ_DVD_STRUCTURE */
	u_int8_t	reserved;
	u_int8_t	address[4];
	u_int8_t	layer;
	u_int8_t	format;
	u_int8_t	length[2];
	u_int8_t	agid;		/* bottom 6 bits reserved */
	u_int8_t	control;
};

struct scsi_read_dvd_structure_data {
	u_int8_t	len[2];		/* Big-endian length of valid data. */
	u_int8_t	reserved[2];
	u_int8_t	data[2048];
};

#endif
@


1.24
log
@remove #ifdef CDDA bits cos nothing in cd.c uses it and nothing i can find
defines it.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.23 2009/12/13 03:29:01 dlg Exp $	*/
a272 27
#ifdef _KERNEL

struct cd_softc {
	struct device sc_dev;
	struct disk sc_dk;

	int sc_flags;
#define	CDF_LOCKED	0x01
#define	CDF_WANTED	0x02
#define	CDF_WLABEL	0x04		/* label is writable */
#define	CDF_LABELLING	0x08		/* writing label */
#define	CDF_ANCIENT	0x10		/* disk is ancient; for minphys */
#define CDF_WAITING	0x100
#define CDF_STARTING	0x200
	struct scsi_link *sc_link;	/* contains our targ, lun, etc. */
	struct cd_parms {
		u_int32_t blksize;
		daddr64_t disksize;	/* total number sectors */
	} sc_params;
	struct buf sc_buf_queue;
	struct mutex sc_queue_mtx;
	struct mutex sc_start_mtx;
	struct timeout sc_timeout;
	void *sc_cdpwrhook;		/* our power hook */
};

#endif /* _KERNEL */
@


1.23
log
@prefix all softc members with sc_, not just most of them.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.22 2009/12/12 13:03:56 dlg Exp $	*/
a284 3
#ifdef CDDA
#define CDF_CDDA	0x20
#endif
a291 3
#ifdef CDDA
	struct cd_parms sc_orig_params;    /* filled in when CD-DA mode starts */
#endif
@


1.22
log
@move cd(4) from using scsi_scsi_cmd over to scsi_xs_exec for doing io.
this brings it in line with the new midlayer changes.

mostly borrowed from sd(4) changes.

tested by krw@@ and me
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.21 2009/06/17 01:30:30 thib Exp $	*/
d279 1
a279 1
	int flags;
d294 1
a294 1
	} params;
d296 1
a296 1
	struct cd_parms orig_params;    /* filled in when CD-DA mode starts */
d298 1
a298 1
	struct buf buf_queue;
@


1.21
log
@Revert bufq's. this is inline with the major midlayer reverts that
have been going on. this appears to bring us back to stable state.

lots of testing by oga and ariane and my self.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.20 2009/06/03 22:09:30 thib Exp $	*/
d288 2
d299 2
@


1.20
log
@add a flexible buffer queue (bufq) api, based on the never used
one by tedu@@. It doesn't do anything smart yet, it just uses
plain old disksort. we also keep the old method of queueing bufs
since some miods have crazy MD drivers that need some love.

ok beck@@, art@@
tested by many on many archs.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.18 2008/06/21 21:11:34 krw Exp $	*/
d296 1
@


1.19
log
@zap some extra spaces and tabs.
@
text
@a295 1
	struct buf buf_queue;
@


1.18
log
@fgsch@@ points out my last commit changed the retry limit for CD capacity
commands. Bump limit back to the standard 4, and at the same time eliminate
SDRETRIES and CDRETRIES (both defined to 4) in favour of a new define,
SCSI_RETRIES, also defined to 4.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.17 2008/06/21 18:50:24 krw Exp $	*/
d10 1
a10 1
 * or use in any manner that they see fit as long as this message is kept with 
d193 1
a193 1
#define PLAY			0x45	/* cdrom play  'play audio' mode */
d202 1
a202 1
#define	LOAD_UNLOAD		0xa6	/* cdrom load/unload media */
@


1.17
log
@Eliminate cd_size() and use scsi_size() + tweaked cd_get_params()
instead. We do not make use of the PMI and RELADDR bits in the
READ CAPACITY command, and thus there is no difference between
cd and sd capacity handling. Brings cd and sd more into line,
shrinks code and makes things easier to understand.

Make types for blocksize and disksize consistant and MI.

Make cdopen() as silent as sdopen().

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.16 2008/06/17 01:32:49 krw Exp $	*/
a254 2

#define	CDRETRIES	4
@


1.16
log
@Nuke unnecessary re-definition of READ_CAPACITY, scsi_read_capacity, and
scsi_read_cap_data as READ_CD_CAPACITY, scsi_read_cd_capacity and
scsi_read_cd_cap_data respectively. No functional change as all were
identical to their counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.15 2007/05/27 01:15:32 mjc Exp $	*/
d292 2
a293 2
		int blksize;
		u_long disksize;	/* total number sectors */
@


1.15
log
@add more struct/define stuff for use in cdio
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.14 2006/12/12 02:44:36 krw Exp $	*/
a160 8
struct scsi_read_cd_capacity {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t addr[4];
	u_int8_t unused[3];
	u_int8_t control;
};

a189 1
#define READ_CD_CAPACITY	0x25	/* slightly different from disk */
a212 5

struct scsi_read_cd_cap_data {
	u_int8_t addr[4];
	u_int8_t length[4];
};
@


1.14
log
@Give the SCSI layer the ability to requeue i/o's rejected by a driver
using the new NO_CCB result. Currently a no-op since no driver produces
that result.

ok dlg@@ marco@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.13 2006/07/19 01:21:28 krw Exp $	*/
d183 11
d213 1
@


1.13
log
@Add cd_powerhook(). Use it to lock CD drives having open partitions
when PWR_RESUME occurs. The drives may have forgotten they were
locked.

Noted and original diff by Alexey Vatchenko.

"I agree with the intent." miod@@ "Looks acceptable." deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.12 2006/06/02 01:20:41 mjc Exp $	*/
d301 1
@


1.12
log
@add structs and macros for a few MMC commands
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.11 2006/05/11 00:45:59 krw Exp $	*/
d301 1
@


1.11
log
@Zap trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.10 2006/03/05 14:58:10 krw Exp $	*/
d33 24
d149 12
d196 3
d203 7
@


1.10
log
@Remove NetBSDism NRND. Pointed out by Mickey.

ok miod@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.9 2005/08/03 23:37:07 krw Exp $	*/
d136 1
a136 1
#define	IMMED	0x1	
@


1.9
log
@Move a couple of 2048+4 byte structures from the stack to the heap.
Create structures to eliminate 2048+4 magic number everywhere. Mostly
adapted from NetBSD.

tested by sturm@@, beck@@. ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.8 2005/07/02 15:39:55 krw Exp $	*/
a254 4

#if NRND > 0
	rndsource_element_t	rnd_source;
#endif
@


1.8
log
@Remove unused cd_softc.name field. Use the saved INQUIRY data in
scsi_link to determine device type, rather than keeping a copy in
sd_softc.type. Remove unused sd_softc.type field.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.7 2005/06/27 18:17:57 krw Exp $	*/
d213 17
@


1.7
log
@Zap unused member of cd_softc: sc_ops.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.6 2005/06/08 21:57:44 espie Exp $	*/
a237 1
	char name[16]; /* product name, for default disklabel */
@


1.6
log
@fix include for userland (tsk, tsk, krw).
okay pval, nits miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.5 2005/06/03 17:29:55 krw Exp $	*/
a238 1
	const struct cd_ops *sc_ops;	/* our bus-dependent ops vector */
@


1.5
log
@Move definitions of struct cd_softc{} and CDRETRIES from cdvar.h into
cd.h. Remove include of cdvar.h from cd.c. cdvar.h becomes expendable.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.4 2005/05/28 22:53:00 krw Exp $	*/
d214 2
d246 1
@


1.4
log
@Kill extra semi-colon. Amazing what lint can find ...
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.3 2005/05/27 16:07:51 krw Exp $	*/
d211 32
@


1.3
log
@Convert cd code to new mode sense framework. Merge cd_scsi and
cd_atapi into cd since code is now almost identical, and only affects
volume adjusting ioctl's. Minor side effect of allowing
cd_load_unload() attempts to scsi cd's as NetBSD does.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.2 2005/04/16 16:54:34 krw Exp $	*/
a123 1
;
@


1.2
log
@Nuke another unused structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.h,v 1.1 1999/07/20 06:21:59 csapuntz Exp $	*/
d134 14
d162 1
a201 1
#ifdef CDDA
a209 1
#ifndef CD_NORMAL_DENSITY_CODE
a210 2
#endif
#ifndef CD_DA_DENSITY_CODE
d212 1
a213 4
#endif /* CDDA */

#endif /*_SCSI_CD_H*/

@


1.1
log
@

Make acd redundant.

Mostly based on NetBSD-current
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_cd.h,v 1.4 1996/10/31 01:09:21 niklas Exp $	*/
a31 8

struct scsi_read_capacity_cd {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t addr[4];
	u_int8_t unused[3];
	u_int8_t control;
};
@

