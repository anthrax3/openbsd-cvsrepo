head	1.8;
access;
symbols
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.4.0.40
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.38
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.36
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.34
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.32
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.30
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.28
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.26
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.24
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.22
	OPENBSD_2_8:1.4.0.20
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.18
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.16
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2010.07.08.00.42.39;	author krw;	state dead;
branches;
next	1.7;

1.7
date	2006.05.11.00.45.59;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.05.21.03.50;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.05.12.13.16;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	96.05.07.09.34.33;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.31.15;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.19.16.10.22;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.02.20.02.28.55;	author briggs;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Move ss and friends to the attic.

Enthusiastic huzzahs from many.

"A great day" dlg@@
@
text
@/*	$OpenBSD: ss_mustek.h,v 1.7 2006/05/11 00:45:59 krw Exp $	*/
/*	$NetBSD: ss_mustek.h,v 1.2 1996/03/19 03:08:37 mycroft Exp $	*/

/*
 * Copyright (c) 1995 Joachim Koenig-Baltes.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Joachim Koenig-Baltes.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_SS_MUSTEK_H_
#define _SS_MUSTEK_H_ 1

/*
 * support for MUSTEK flatbed SCSI scanners MFS-06000CX and MFS-12000CX
 * (600 and 1200 dpi horizontally resp), not conforming to the SCSI2 spec.
 */

/*
 * Configuration section: describes the mode in which scanner is driven
 * MUSTEK_INCH_SPEC: frame/window sizes are given in inches instead of
 *     pixels, note: unit is 1/8th of an inch
 * MUSTEK_WINDOWS: number of windows in a frame, up to 4 allowed,
 *     not used yet, so set to 0
 */
#define MUSTEK_INCH_SPEC		/* use inches to specify sizes */
#define MUSTEK_WINDOWS		0	/* no window support yet */

/* mustek scsi commands */
#define MUSTEK_SET_WINDOW	0x04	/* set image area and windows */
#define MUSTEK_READ		0x08	/* read command */
#define MUSTEK_GET_STATUS	0x0f	/* image status */
#define MUSTEK_MODE_SELECT	0x15	/* set resolution, paper length, .. */
#define MUSTEK_ADF		0x10	/* ADF and backtracking selection */
#define MUSTEK_START_STOP	0x1b	/* start/stop scan */
#define MUSTEK_LUT		0x55	/* look up table download */

/* the size spec is at the same bit position in different commands */
#define	MUSTEK_UNIT_INCHES		0x00
#define MUSTEK_UNIT_PIXELS		0x08
#ifdef MUSTEK_INCH_SPEC
#define MUSTEK_UNIT_SPEC	MUSTEK_UNIT_INCHES
#else
#define MUSTEK_UNIT_SPEC	MUSTEK_UNIT_PIXELS
#endif

/*
 * SCSI command formats
 */

struct mustek_set_window_cmd {
	u_int8_t opcode;		/* 0x04 */
	u_int8_t reserved[3];
	u_int8_t length;		/* in bytes */
	u_int8_t control;
};

struct mustek_window {
	u_int8_t header;		/* unit-defines also apply */
	u_int8_t tl_x[2];		/* LSB */
	u_int8_t tl_y[2];
	u_int8_t br_x[2];
	u_int8_t br_y[2];
};

struct mustek_set_window_data {
#define MUSTEK_LINEART_BACKGROUND	0x00
#define MUSTEK_HALFTONE_BACKGROUND	0x01
	struct	mustek_window frame;
#if MUSTEK_WINDOWS >= 1
#define MUSTEK_WINDOW_MASK	0x80
	struct	mustek_window window1;
#endif
#if MUSTEK_WINDOWS >= 2
	struct	mustek_window window2;
#endif
#if MUSTEK_WINDOWS >= 3
	struct	mustek_window window3;
#endif
#if MUSTEK_WINDOWS >= 4
	struct	mustek_window window4;
#endif
};

struct mustek_read_cmd {
	u_int8_t opcode;		/* 0x08 */
	u_int8_t reserved;
	u_int8_t length[3];
	u_int8_t control;
};

struct mustek_get_status_cmd {
	u_int8_t opcode;		/* 0x0f */
	u_int8_t reserved[3];
	u_int8_t length;		/* 0x06 */
	u_int8_t control;
};

struct mustek_get_status_data {
#define MUSTEK_READY 0
#define MUSTEK_BUSY  -1
	u_int8_t ready_busy;		/* 0 = ready */
	u_int8_t bytes_per_line[2];	/* LSB */
	u_int8_t lines[3];		/* LSB */
};

struct mustek_mode_select_cmd {
	u_int8_t opcode;		/* 0x15 */
	u_int8_t reserved[2];
	u_int8_t length[2];
	u_int8_t control;
};

/*
 * resolution settings:
 *   MFS06000CX:
 *   1% : 0x01 0x02 ... 0x64
 *           3    6 ...  300 dpi
 *   10%: 0x1e 0x3c 0x5a 0x14 0x32 0x50 0x0a 0x28 0x46 0x64
 *         330  360  390  420  450  480  510  540  570  600 dpi
 *   MFS12000CX:
 *   1% : 0x01 0x02 ... 0x64
 *           6   12 ...  600 dpi
 *   10%: 0x1e 0x3c 0x5a 0x14 0x32 0x50 0x0a 0x28 0x46 0x64
 *         660  720  780  840  900  960 1020 1080 1140 1200 dpi
 */
struct mustek_mode_select_data {
#define MUSTEK_MODE_MASK		0x83
#define MUSTEK_HT_PATTERN_BUILTIN	0x00
#define MUSTEK_HT_PATTERN_DOWNLOADED	0x10
	u_int8_t mode;
	u_int8_t resolution;
	u_int8_t brightness;
	u_int8_t contrast;
	u_int8_t grain;			/* 0 = 8x8, .....  5 = 2x2  */
	u_int8_t velocity;		/* 0 = fast, ...., 4 = slow */
	u_int8_t reserved[2];
	u_int8_t paperlength[2];	/* LSB */
};

struct mustek_start_scan_cmd {
	u_int8_t opcode;		/* 0x1b */
	u_int8_t reserved[3];
#define MUSTEK_SCAN_STOP	0x00
#define MUSTEK_SCAN_START	0x01
#define MUSTEK_GRAY_FILTER	0x00
#define MUSTEK_RED_FILTER	0x08
#define MUSTEK_GREEN_FILTER	0x10
#define MUSTEK_BLUE_FILTER	0x18
#define MUSTEK_GRAY_MODE	0x40
#define MUSTEK_BIT_MODE		0x00
#define MUSTEK_RES_STEP_1	0x00
#define MUSTEK_RES_STEP_10	0x80
	u_int8_t mode;
	u_int8_t control;
};

#endif /* _SS_MUSTEK_H_ */
@


1.7
log
@Zap trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: ss_mustek.h,v 1.6 2005/06/05 21:03:50 krw Exp $	*/
@


1.6
log
@Revert ss_mustek use of new scsi_mode_select(). Further development
revealed it is doing it's own weird stuff not reproduced in new
functions. e.g. it doesn't use mode sense headers. Rather than try to
fix it or figure it out at this time ...
@
text
@d1 1
a1 1
/*	$OpenBSD: ss_mustek.h,v 1.5 2005/04/05 12:13:16 krw Exp $	*/
d123 1
a123 1
#define MUSTEK_BUSY  -1	
@


1.5
log
@Factor out scsi_mode_sense() and scsi_mode_select() like NetBSD does.
Eliminate some duplicate structures and defines along the way. SCSI CD
drives will now pay attention to the 'flags' parameter for MODE SENSE
and MODE SELECT commands. No other functional change.

ok tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ss_mustek.h,v 1.4 1996/05/07 09:34:33 niklas Exp $	*/
d55 1
d127 7
@


1.4
log
@Remove erroneously doubled text (patch can do that when a new file
comes into existence simultaneously from two directions).
@
text
@d1 1
a1 1
/*	$OpenBSD: ss_mustek.h,v 1.3 1996/04/21 22:31:15 deraadt Exp $	*/
a54 1
#define MUSTEK_MODE_SELECT	0x15	/* set resolution, paper length, .. */
a125 7
};

struct mustek_mode_select_cmd {
	u_int8_t opcode;		/* 0x15 */
	u_int8_t reserved[2];
	u_int8_t length[2];
	u_int8_t control;
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: ss_mustek.h,v 1.2 1996/04/19 16:10:22 niklas Exp $	*/
a177 218
};

#endif /* _SS_MUSTEK_H_ */
/*	$NetBSD: ss_mustek.h,v 1.1 1996/02/18 20:32:48 mycroft Exp $	*/

/*
 * Copyright (c) 1995 Joachim Koenig-Baltes.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Joachim Koenig-Baltes.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_SS_MUSTEK_H_
#define _SS_MUSTEK_H_ 1

/*
 * support for MUSTEK flatbed SCSI scanners MFS-06000CX and MFS-12000CX
 * (600 and 1200 dpi horizontally resp), not conforming to the SCSI2 spec.
 */

/*
 * Configuration section: describes the mode in which scanner is driven
 * MUSTEK_INCH_SPEC: frame/window sizes are given in inches instead of
 *     pixels, note: unit is 1/8th of an inch
 * MUSTEK_WINDOWS: number of windows in a frame, up to 4 allowed,
 *     not used yet, so set to 0
 */
#define MUSTEK_INCH_SPEC		/* use inches to specify sizes */
#define MUSTEK_WINDOWS		0	/* no window support yet */

/* mustek scsi commands */
#define MUSTEK_SET_WINDOW	0x04	/* set image area and windows */
#define MUSTEK_READ		0x08	/* read command */
#define MUSTEK_GET_STATUS	0x0f	/* image status */
#define MUSTEK_MODE_SELECT	0x15	/* set resolution, paper length, .. */
#define MUSTEK_ADF		0x10	/* ADF and backtracking selection */
#define MUSTEK_START_STOP	0x1b	/* start/stop scan */
#define MUSTEK_LUT		0x55	/* look up table download */

/* the size spec is at the same bit position in different commands */
#define	MUSTEK_UNIT_INCHES		0x00
#define MUSTEK_UNIT_PIXELS		0x08
#ifdef MUSTEK_INCH_SPEC
#define MUSTEK_UNIT_SPEC	MUSTEK_UNIT_INCHES
#else
#define MUSTEK_UNIT_SPEC	MUSTEK_UNIT_PIXELS
#endif

/*
 * SCSI command formats
 */

struct mustek_set_window_cmd {
	u_char	opcode;			/* 0x04 */
	u_char	reserved[3];
	u_char	length;			/* in bytes */
	u_char	control;
};

struct mustek_set_window_data {
#define MUSTEK_LINEART_BACKGROUND	0x00
#define MUSTEK_HALFTONE_BACKGROUND	0x01
	u_char	frame_header;		/* unit-defines also apply */
	u_char	frame_tl_x_0;
	u_char	frame_tl_x_1;
	u_char	frame_tl_y_0;
	u_char	frame_tl_y_1;
	u_char	frame_br_x_0;
	u_char	frame_br_x_1;
	u_char	frame_br_y_0;
	u_char	frame_br_y_1;
#if MUSTEK_WINDOWS >= 1
#define MUSTEK_WINDOW_MASK	0x80
	u_char	window1_header;		/* unit-defines also apply */
	u_char	window1_tl_x_0;
	u_char	window1_tl_x_1;
	u_char	window1_tl_y_0;
	u_char	window1_tl_y_1;
	u_char	window1_br_x_0;
	u_char	window1_br_x_1;
	u_char	window1_br_y_0;
	u_char	window1_br_y_1;
#endif
#if MUSTEK_WINDOWS >= 2
	u_char	window2_header;
	u_char	window2_tl_x_0;
	u_char	window2_tl_x_1;
	u_char	window2_tl_y_0;
	u_char	window2_tl_y_1;
	u_char	window2_br_x_0;
	u_char	window2_br_x_1;
	u_char	window2_br_y_0;
	u_char	window2_br_y_1;
#endif
#if MUSTEK_WINDOWS >= 3
	u_char	window3_header;
	u_char	window3_tl_x_0;
	u_char	window3_tl_x_1;
	u_char	window3_tl_y_0;
	u_char	window3_tl_y_1;
	u_char	window3_br_x_0;
	u_char	window3_br_x_1;
	u_char	window3_br_y_0;
	u_char	window3_br_y_1;
#endif
#if MUSTEK_WINDOWS == 4
	u_char	window4_header;
	u_char	window4_tl_x_0;
	u_char	window4_tl_x_1;
	u_char	window4_tl_y_0;
	u_char	window4_tl_y_1;
	u_char	window4_br_x_0;
	u_char	window4_br_x_1;
	u_char	window4_br_y_0;
	u_char	window4_br_y_1;
#endif
};

struct mustek_read_cmd {
	u_char	opcode;			/* 0x08 */
	u_char	reserved;
	u_char	length_2;		/* number of LINES to be read (MSB) */
	u_char	length_1;		/* number of LINES to be read */
	u_char	length_0;		/* number of LINES to be read (LSB) */
	u_char	control;
};

struct mustek_get_status_cmd {
	u_char	opcode;			/* 0x0f */
	u_char	reserved[3];
	u_char	length;			/* 0x06 */
	u_char	control;
};

struct mustek_get_status_data {
#define MUSTEK_READY 0
#define MUSTEK_BUSY  -1	
	u_char	ready_busy;		/* 0 = ready */
	u_char	bytes_per_line_0;	/* LSB */
	u_char	bytes_per_line_1;	/* MSB */
	u_char	lines_0;		/* LSB */
	u_char	lines_1;
	u_char	lines_2;		/* MSB */
};

struct mustek_mode_select_cmd {
	u_char	opcode;			/* 0x15 */
	u_char	reserved[2];
	u_char	length_1;		/* MSB */
	u_char	length_0;		/* LSB */
	u_char	control;
};

/*
 * resolution settings:
 *   MFS06000CX:
 *   1% : 0x01 0x02 ... 0x64
 *           3    6 ...  300 dpi
 *   10%: 0x1e 0x3c 0x5a 0x14 0x32 0x50 0x0a 0x28 0x46 0x64
 *         330  360  390  420  450  480  510  540  570  600 dpi
 *   MFS12000CX:
 *   1% : 0x01 0x02 ... 0x64
 *           6   12 ...  600 dpi
 *   10%: 0x1e 0x3c 0x5a 0x14 0x32 0x50 0x0a 0x28 0x46 0x64
 *         660  720  780  840  900  960 1020 1080 1140 1200 dpi
 */
struct mustek_mode_select_data {
#define MUSTEK_MODE_MASK		0x83
#define MUSTEK_HT_PATTERN_BUILTIN	0x00
#define MUSTEK_HT_PATTERN_DOWNLOADED	0x10
	u_char	mode;
	u_char	resolution;
	u_char	brightness;
	u_char	contrast;
	u_char	grain;			/* 0 = 8x8, .....  5 = 2x2  */
	u_char	velocity;		/* 0 = fast, ...., 4 = slow */
	u_char	reserved[2];
	u_char	paperlength_0;		/* LSB */
	u_char	paperlength_1;		/* MSB */
};

struct mustek_start_scan_cmd {
	u_char	opcode;			/* 0x1b */
	u_char	reserved[3];
#define MUSTEK_SCAN_STOP	0x00
#define MUSTEK_SCAN_START	0x01
#define MUSTEK_GRAY_FILTER	0x00
#define MUSTEK_RED_FILTER	0x08
#define MUSTEK_GREEN_FILTER	0x10
#define MUSTEK_BLUE_FILTER	0x18
#define MUSTEK_GRAY_MODE	0x40
#define MUSTEK_BIT_MODE		0x00
#define MUSTEK_RES_STEP_1	0x00
#define MUSTEK_RES_STEP_10	0x80
	u_char	mode;
	u_char	control;
@


1.2
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: ss_mustek.h,v 1.1 1996/02/18 20:32:48 mycroft Exp $	*/
d74 12
a85 4
	u_char	opcode;			/* 0x04 */
	u_char	reserved[3];
	u_char	length;			/* in bytes */
	u_char	control;
d91 1
a91 9
	u_char	frame_header;		/* unit-defines also apply */
	u_char	frame_tl_x_0;
	u_char	frame_tl_x_1;
	u_char	frame_tl_y_0;
	u_char	frame_tl_y_1;
	u_char	frame_br_x_0;
	u_char	frame_br_x_1;
	u_char	frame_br_y_0;
	u_char	frame_br_y_1;
d94 1
a94 9
	u_char	window1_header;		/* unit-defines also apply */
	u_char	window1_tl_x_0;
	u_char	window1_tl_x_1;
	u_char	window1_tl_y_0;
	u_char	window1_tl_y_1;
	u_char	window1_br_x_0;
	u_char	window1_br_x_1;
	u_char	window1_br_y_0;
	u_char	window1_br_y_1;
d97 1
a97 9
	u_char	window2_header;
	u_char	window2_tl_x_0;
	u_char	window2_tl_x_1;
	u_char	window2_tl_y_0;
	u_char	window2_tl_y_1;
	u_char	window2_br_x_0;
	u_char	window2_br_x_1;
	u_char	window2_br_y_0;
	u_char	window2_br_y_1;
d100 1
a100 9
	u_char	window3_header;
	u_char	window3_tl_x_0;
	u_char	window3_tl_x_1;
	u_char	window3_tl_y_0;
	u_char	window3_tl_y_1;
	u_char	window3_br_x_0;
	u_char	window3_br_x_1;
	u_char	window3_br_y_0;
	u_char	window3_br_y_1;
d102 2
a103 10
#if MUSTEK_WINDOWS == 4
	u_char	window4_header;
	u_char	window4_tl_x_0;
	u_char	window4_tl_x_1;
	u_char	window4_tl_y_0;
	u_char	window4_tl_y_1;
	u_char	window4_br_x_0;
	u_char	window4_br_x_1;
	u_char	window4_br_y_0;
	u_char	window4_br_y_1;
d108 4
a111 6
	u_char	opcode;			/* 0x08 */
	u_char	reserved;
	u_char	length_2;		/* number of LINES to be read (MSB) */
	u_char	length_1;		/* number of LINES to be read */
	u_char	length_0;		/* number of LINES to be read (LSB) */
	u_char	control;
d115 4
a118 4
	u_char	opcode;			/* 0x0f */
	u_char	reserved[3];
	u_char	length;			/* 0x06 */
	u_char	control;
d124 3
a126 6
	u_char	ready_busy;		/* 0 = ready */
	u_char	bytes_per_line_0;	/* LSB */
	u_char	bytes_per_line_1;	/* MSB */
	u_char	lines_0;		/* LSB */
	u_char	lines_1;
	u_char	lines_2;		/* MSB */
d130 4
a133 5
	u_char	opcode;			/* 0x15 */
	u_char	reserved[2];
	u_char	length_1;		/* MSB */
	u_char	length_0;		/* LSB */
	u_char	control;
d153 8
a160 9
	u_char	mode;
	u_char	resolution;
	u_char	brightness;
	u_char	contrast;
	u_char	grain;			/* 0 = 8x8, .....  5 = 2x2  */
	u_char	velocity;		/* 0 = fast, ...., 4 = slow */
	u_char	reserved[2];
	u_char	paperlength_0;		/* LSB */
	u_char	paperlength_1;		/* MSB */
d164 2
a165 2
	u_char	opcode;			/* 0x1b */
	u_char	reserved[3];
d176 2
a177 2
	u_char	mode;
	u_char	control;
@


1.1
log
@Sync. with NetBSD:
- scsi prototypes.
- Add SCSI scanner support by Kenneth Stailey and Joachim Koenig-Baltes,
  hacked a but.  Needs more work.
ss.c:
- Truncate to the window size in ssminphys(), not ssread().
- Missed some prototyping foo.
- Minor tweak; make sure window size is 0 on close.
- Change variable name to avoid GCC warning.
- Handle EOF a little differently.
@
text
@d1 219
@
