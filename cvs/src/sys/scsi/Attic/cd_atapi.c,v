head	1.9;
access;
symbols
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.14
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2005.05.27.16.50.31;	author krw;	state dead;
branches;
next	1.8;

1.8
date	2005.05.23.18.29.15;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.23.07.06.16;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.23.06.46.38;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.14.00.20.43;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.16.16.41.46;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.09.14.08.11;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.13;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.07.20.06.21.59;	author csapuntz;	state Exp;
branches
	1.1.4.1
	1.1.14.1;
next	;

1.1.4.1
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2004.06.05.23.13.08;	author niklas;	state Exp;
branches;
next	;

1.1.14.1
date	2002.06.11.03.32.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@No longer used after merge of atapi/scsi cd code.
@
text
@/*	$OpenBSD: cd_atapi.c,v 1.8 2005/05/23 18:29:15 krw Exp $	*/
/*	$NetBSD: cd_atapi.c,v 1.10 1998/08/31 22:28:06 cgd Exp $	*/

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Originally written by Julian Elischer (julian@@tfs.com)
 * for TRW Financial Systems for use under the MACH(2.5) operating system.
 *
 * TRW Financial Systems, in accordance with their agreement with Carnegie
 * Mellon University, makes this software available to CMU to distribute
 * or use in any manner that they see fit as long as this message is kept with
 * the software. For this reason TFS also grants any other persons or
 * organisations permission to use or modify this software.
 *
 * TFS supplies this software to be publicly redistributed
 * on the understanding that TFS is not responsible for the correct
 * functioning of this software in any circumstances.
 *
 * Ported to run under 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/file.h>
#include <sys/device.h>
#include <sys/disk.h>
#include <sys/buf.h>
#include <sys/conf.h>
#if NRND > 0
#include <sys/rnd.h>
#endif

#include <sys/cdio.h>

#include <scsi/scsi_all.h>
#include <scsi/cd.h>
#include <scsi/atapi_cd.h>
#include <scsi/cdvar.h>
#include <scsi/scsiconf.h>


static int cd_atapibus_setchan(struct cd_softc *, int, int, int, int, int);
static int cd_atapibus_getvol(struct cd_softc *, struct ioc_vol *, int);
static int cd_atapibus_setvol(struct cd_softc *, const struct ioc_vol *,
	    int);
static int cd_atapibus_set_pa_immed(struct cd_softc *, int);
static int cd_atapibus_load_unload(struct cd_softc *, int, int);

const struct cd_ops cd_atapibus_ops = {
	cd_atapibus_setchan,
	cd_atapibus_getvol,
	cd_atapibus_setvol,
	cd_atapibus_set_pa_immed,
	cd_atapibus_load_unload,
};

static int
cd_atapibus_setchan(cd, p0, p1, p2, p3, flags)
	struct cd_softc *cd;
	int p0, p1, p2, p3, flags;
{
	struct atapi_cd_mode_data data;
	int error;

	error = scsi_mode_sense_big(cd->sc_link, 0, AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, sizeof(data), flags, 20000);
	if (error != 0)
		return (error);

	data.audio.port[LEFT_PORT].channels = p0;
	data.audio.port[RIGHT_PORT].channels = p1;
	data.audio.port[2].channels = p2;
	data.audio.port[3].channels = p3;

	error = scsi_mode_select_big(cd->sc_link, SMS_PF,
	    (struct scsi_mode_header_big *)&data, sizeof(data), flags, 20000);

	return (error);
}

static int
cd_atapibus_getvol(cd, arg, flags)
	struct cd_softc *cd;
	struct ioc_vol *arg;
	int flags;
{
	struct atapi_cd_mode_data data;
	int error;

	error = scsi_mode_sense_big(cd->sc_link, 0, AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, sizeof(data), flags, 20000);
	if (error != 0)
		return (error);

	arg->vol[0] = data.audio.port[0].volume;
	arg->vol[1] = data.audio.port[1].volume;
	arg->vol[2] = data.audio.port[2].volume;
	arg->vol[3] = data.audio.port[3].volume;

	return (0);
}

static int
cd_atapibus_setvol(cd, arg, flags)
	struct cd_softc *cd;
	const struct ioc_vol *arg;
	int flags;
{
	struct atapi_cd_mode_data data, mask;
	int error;

	error = scsi_mode_sense_big(cd->sc_link, 0, AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, sizeof(data), flags, 20000);
	if (error != 0)
		return (error);

	error = scsi_mode_sense_big(cd->sc_link, 0,
	    AUDIO_PAGE | SMS_PAGE_CTRL_CHANGEABLE,
	    (struct scsi_mode_header_big *)&mask, sizeof(mask), flags, 20000);
	if (error != 0)
		return (error);

	data.audio.port[0].volume = arg->vol[0] &
	    mask.audio.port[0].volume;
	data.audio.port[1].volume = arg->vol[1] &
	    mask.audio.port[1].volume;
	data.audio.port[2].volume = arg->vol[2] &
	    mask.audio.port[2].volume;
	data.audio.port[3].volume = arg->vol[3] &
	    mask.audio.port[3].volume;

	error = scsi_mode_select_big(cd->sc_link, SMS_PF,
	    (struct scsi_mode_header_big *)&data, sizeof(data), flags, 20000);

	return (error);
}

static int
cd_atapibus_set_pa_immed(cd, flags)
	struct cd_softc *cd;
	int flags;
{

	/* Noop. */
	return (0);
}

static int
cd_atapibus_load_unload(cd, options, slot)
	struct cd_softc *cd;
	int options, slot;
{
	struct atapi_load_unload atapi_cmd;

	bzero(&atapi_cmd, sizeof(atapi_cmd));
	atapi_cmd.opcode = ATAPI_LOAD_UNLOAD;
	atapi_cmd.options = options;    /* ioctl uses ATAPI values */
	atapi_cmd.slot = slot;
	return (scsi_scsi_cmd(cd->sc_link,
		(struct scsi_generic *)&atapi_cmd, sizeof(atapi_cmd),
		0, 0, CDRETRIES, 200000, NULL, 0));
}
@


1.8
log
@Remove superfluous and confusing define and use correct field names
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.7 2005/05/23 07:06:16 krw Exp $	*/
@


1.7
log
@Don't bzero() data before calling scsi_mode_sense[_big]() since
scsi_mode_sense[_big] bzero()'s it.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.6 2005/05/23 06:46:38 krw Exp $	*/
d147 2
a148 1
	error = scsi_mode_sense_big(cd->sc_link, 0, ATAPI_AUDIO_PAGE_MASK,
@


1.6
log
@Remove more superfluous structures, etc. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.5 2005/05/14 00:20:43 krw Exp $	*/
a94 1
	bzero(&data, sizeof(data));
a119 1
	bzero(&data, sizeof(data));
a141 1
	bzero(&data, sizeof(data));
a146 1
	bzero(&mask, sizeof(mask));
@


1.5
log
@Add scsi_mode_[sense|select]_big() and use it instead of
atapi_mode_[sense|select](). This will allow the removal of
atapi_base.c and atapi_all.h files, and sets the stage for better usb
mode sense handling amoung other things.

Remove cd_scsibus_[get|set]_mode() and
sd_scsibus_mode_sense() shims in favour of scsi_mode_[sense|select]().
Add zero'ing of reserved length field in scsi_mode_select(). Change
some uchar * type parameters to scsi_mode_header *.

No functional changes. Mostly from NetBSD.

ok dlg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.4 2005/04/16 16:41:46 krw Exp $	*/
d96 2
a97 2
	error = scsi_mode_sense_big(cd->sc_link, 0, ATAPI_AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags, 20000);
d101 4
a104 4
	data.pages.audio.port[LEFT_PORT].channels = p0;
	data.pages.audio.port[RIGHT_PORT].channels = p1;
	data.pages.audio.port[2].channels = p2;
	data.pages.audio.port[3].channels = p3;
d107 1
a107 1
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags, 20000);
d122 2
a123 2
	error = scsi_mode_sense_big(cd->sc_link, 0, ATAPI_AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags, 20000);
d127 4
a130 4
	arg->vol[0] = data.pages.audio.port[0].volume;
	arg->vol[1] = data.pages.audio.port[1].volume;
	arg->vol[2] = data.pages.audio.port[2].volume;
	arg->vol[3] = data.pages.audio.port[3].volume;
d145 2
a146 2
	error = scsi_mode_sense_big(cd->sc_link, 0, ATAPI_AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags, 20000);
d152 1
a152 1
	    (struct scsi_mode_header_big *)&mask, AUDIOPAGESIZE, flags, 20000);
d156 8
a163 8
	data.pages.audio.port[0].volume = arg->vol[0] &
	    mask.pages.audio.port[0].volume;
	data.pages.audio.port[1].volume = arg->vol[1] &
	    mask.pages.audio.port[1].volume;
	data.pages.audio.port[2].volume = arg->vol[2] &
	    mask.pages.audio.port[2].volume;
	data.pages.audio.port[3].volume = arg->vol[3] &
	    mask.pages.audio.port[3].volume;
d166 1
a166 1
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags, 20000);
@


1.4
log
@Nuke unused/duplicate structures and defines in favour of scsi ones.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.3 2004/05/09 14:08:11 krw Exp $	*/
a66 1
#include <scsi/atapi_all.h>
d95 4
a98 3
	if ((error = atapi_mode_sense(cd->sc_link, ATAPI_AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags,
	    CDRETRIES, 20000)) != 0)
d100 1
d105 5
a109 3
	return (atapi_mode_select(cd->sc_link,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags,
	    CDRETRIES, 20000));
d121 4
a124 3
	if ((error = atapi_mode_sense(cd->sc_link, ATAPI_AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags,
	    CDRETRIES, 20000)) != 0)
d126 1
d131 1
d144 4
a147 3
	if ((error = atapi_mode_sense(cd->sc_link, ATAPI_AUDIO_PAGE,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE, flags,
	    CDRETRIES, 20000)) != 0)
d149 5
a153 3
	if ((error = atapi_mode_sense(cd->sc_link, ATAPI_AUDIO_PAGE_MASK,
	    (struct scsi_mode_header_big *)&mask, AUDIOPAGESIZE, flags,
	    CDRETRIES, 20000)) != 0)
d165 4
a168 3
	return (atapi_mode_select(cd->sc_link,
	    (struct scsi_mode_header_big *)&data, AUDIOPAGESIZE,
	    flags, CDRETRIES, 20000));
@


1.3
log
@Remove some #ifndef __OpenBSD__/#endif sections that were intended to
make sync'ing with NetBSD easier. NetBSD has moved on, most of these
sections have not.

ok marco@@ deraadt@@ grange@@ csapuntz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.2 2002/03/14 01:27:13 millert Exp $	*/
d97 1
a97 1
	    (struct atapi_mode_header *)&data, AUDIOPAGESIZE, flags,
d105 1
a105 1
	    (struct atapi_mode_header *)&data, AUDIOPAGESIZE, flags,
d119 1
a119 1
	    (struct atapi_mode_header *)&data, AUDIOPAGESIZE, flags,
d139 1
a139 1
	    (struct atapi_mode_header *)&data, AUDIOPAGESIZE, flags,
d143 1
a143 1
	    (struct atapi_mode_header *)&mask, AUDIOPAGESIZE, flags,
d157 1
a157 1
	    (struct atapi_mode_header *)&data, AUDIOPAGESIZE,
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.1 1999/07/20 06:21:59 csapuntz Exp $	*/
a48 3
#ifndef __OpenBSD__
#include "rnd.h"
#endif
@


1.1
log
@

Make acd redundant.

Mostly based on NetBSD-current
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.10 1998/08/31 22:28:06 cgd Exp $	*/
d76 6
a81 6
static int cd_atapibus_setchan __P((struct cd_softc *, int, int, int, int, int));
static int cd_atapibus_getvol __P((struct cd_softc *, struct ioc_vol *, int));
static int cd_atapibus_setvol __P((struct cd_softc *, const struct ioc_vol *,
	    int));
static int cd_atapibus_set_pa_immed __P((struct cd_softc *, int));
static int cd_atapibus_load_unload __P((struct cd_softc *, int, int));
@


1.1.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cd_atapi.c,v 1.1 1999/07/20 06:21:59 csapuntz Exp $	*/
d76 6
a81 6
static int cd_atapibus_setchan(struct cd_softc *, int, int, int, int, int);
static int cd_atapibus_getvol(struct cd_softc *, struct ioc_vol *, int);
static int cd_atapibus_setvol(struct cd_softc *, const struct ioc_vol *,
	    int);
static int cd_atapibus_set_pa_immed(struct cd_softc *, int);
static int cd_atapibus_load_unload(struct cd_softc *, int, int);
@


1.1.4.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 6
a81 6
static int cd_atapibus_setchan(struct cd_softc *, int, int, int, int, int);
static int cd_atapibus_getvol(struct cd_softc *, struct ioc_vol *, int);
static int cd_atapibus_setvol(struct cd_softc *, const struct ioc_vol *,
	    int);
static int cd_atapibus_set_pa_immed(struct cd_softc *, int);
static int cd_atapibus_load_unload(struct cd_softc *, int, int);
@


1.1.4.2
log
@Merge with the trunk
@
text
@d49 3
@


