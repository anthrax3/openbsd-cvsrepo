head	1.19;
access;
symbols
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.20
	OPENBSD_2_8:1.7.0.18
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.16
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.14
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.19
date	2011.04.29.23.08.24;	author matthew;	state dead;
branches;
next	1.18;

1.18
date	2010.06.30.00.02.00;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.01.15.27.16;	author thib;	state Exp;
branches;
next	1.16;

1.16
date	2010.01.15.05.50.31;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.11.08.56.17;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2010.01.09.21.12.06;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.02.23.28.51;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.10.18.04.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.28.16.56.50;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.18.16.06.35;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.27.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.22.14.35.43;	author deraadt;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	97.03.10.02.29.41;	author kstailey;	state Exp;
branches
	1.7.14.1;
next	1.6;

1.6
date	97.03.08.05.39.01;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.03.08.03.06.51;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.05.07.09.34.35;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.31.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.19.16.10.26;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.02.20.02.28.56;	author briggs;	state Exp;
branches;
next	;

1.7.14.1
date	2001.07.04.11.00.10;	author niklas;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.7.14.3;

1.7.14.3
date	2003.06.07.11.07.44;	author ho;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.32.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@ss(4) is gone; no need for ssvar.h.
@
text
@/*	$OpenBSD: ssvar.h,v 1.18 2010/06/30 00:02:00 dlg Exp $	*/
/*	$NetBSD: ssvar.h,v 1.2 1996/03/30 21:47:11 christos Exp $	*/

/*
 * Copyright (c) 1995 Kenneth Stailey.  All rights reserved.
 *   modified for configurable scanner support by Joachim Koenig
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Kenneth Stailey.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef _KERNEL

/*
 * SCSI scanner interface description
 */

/*
 * Special handlers for impractically different scanner types.
 * Register NULL for a function if you want to try the real SCSI code
 * (with quirks table)
 */
struct ss_softc;
struct scan_io;

struct ss_special {
	int	(*set_params)(struct ss_softc *, struct scan_io *);
	int	(*trigger_scanner)(struct ss_softc *);
	int	(*get_params)(struct ss_softc *);
	/* some scanners only send line-multiples */
	void	(*minphys)(struct ss_softc *, struct buf *);
	int	(*read)(struct ss_softc *, struct scsi_xfer *, struct buf *);
	int	(*rewind_scanner)(struct ss_softc *);
	int	(*load_adf)(struct ss_softc *);
	int	(*unload_adf)(struct ss_softc *);
};

/*
 * ss_softc has to be declared here, because the device dependant
 * modules include it
 */
struct ss_softc {
	struct device sc_dev;

	int flags;
#define SSF_TRIGGERED	0x01	/* read operation has been primed */
#define	SSF_LOADED	0x02	/* parameters loaded */
#define SSF_WAITING	0x04
	struct scsi_link *sc_link;	/* contains our targ, lun, etc.	*/
	struct scan_io sio;
	struct bufq *sc_bufq;
	const struct quirkdata *quirkdata; /* if we have a rogue entry */
	struct ss_special special;	/* special handlers for spec. devices */
	struct timeout timeout;
	struct scsi_xshandler xsh;
};

/*
 * define the special attach routines if configured
 */
void mustek_attach(struct ss_softc *, struct scsi_attach_args *);
void scanjet_attach(struct ss_softc *, struct scsi_attach_args *);

#endif /* _KERNEL */
@


1.18
log
@switch ss over to using xshandlers for queuing io. this brings it into line
with sd/cd/st.

largely a mechanical change, untested due to a complete lack of hardware
anywhere.

ok krw@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.17 2010/06/01 15:27:16 thib Exp $	*/
@


1.17
log
@move cd, st & ss over to bufq's again.

Tested by myself and krw.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.16 2010/01/15 05:50:31 krw Exp $	*/
d77 1
a77 2
	struct mutex sc_start_mtx;
	u_int sc_start_count;
@


1.16
log
@Abstract and merge the manual buf queue manipulating functions into
one place for easier debugging and maintenance. No intended functional
changes.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.15 2010/01/11 08:56:17 krw Exp $	*/
d73 1
a73 1
	struct buf sc_buf_queue;	/* the queue of pending IO operations */
a76 1
	struct mutex sc_buf_mtx;
@


1.15
log
@Bring mutex protections to ststart, cdstart and ssstart, as already
done in sd. Make names consistant across all three.

ok dlg@@ tested (cd) & ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.14 2010/01/09 21:12:06 dlg Exp $	*/
d73 1
a73 1
	struct buf buf_queue;		/* the queue of pending IO operations */
a80 4

struct buf *ss_buf_dequeue(struct ss_softc *);
void	ss_buf_enqueue(struct ss_softc *, struct buf *);
void	ss_buf_requeue(struct ss_softc *, struct buf *);
@


1.14
log
@dont try to prevent multiple concurrent runs of a devices start routine
by setting flags around the loop. there is a race which can prevent
necessary work being completed by any of the currently running instances
of xxstart.

the caveat with the removal of this code is because multiple xxstarts can
be running at the same time they can cause io reordering, but that is less
of a problem than no io.

found by and fix tested by claudio@@
debugged with krw@@ claudio@@ beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.13 2010/01/02 23:28:51 dlg Exp $	*/
d77 3
a79 2
	struct mutex queue_mtx;
	struct mutex start_mtx;
@


1.13
log
@move the buf handling from using scsi_scsi_cmd over to scsi_xs_exec. i
think this is the last chunk of code using a buf pointer in the scsi_xfer
now.

this has not been tested due to a lack of hardware anywhere. if there are
problems please report them as soon as possible.

ok krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.12 2008/11/10 18:04:41 deraadt Exp $	*/
a70 1
#define SSF_STARTING	0x08
@


1.12
log
@clean namespace a fair bit; wrap kernel-use-only structures and gunk in
#ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.11 2006/11/28 16:56:50 dlg Exp $	*/
d54 1
a54 1
	int	(*read)(struct ss_softc *, struct buf *);
d70 2
d77 3
d81 4
@


1.11
log
@rename scsibus_attach_args to scsi_attach_args. this can help avoid
confusing when trying to attach scsibus to a hba, since it is really meant
for attaching scsi devices to scsibus.

ok deraadt@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.10 2003/05/18 16:06:35 mickey Exp $	*/
d34 2
d82 2
@


1.10
log
@constify the quirck tables and fix the scsi_inqmatch() proto accordingly; krw@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.9 2002/03/14 01:27:13 millert Exp $	*/
d78 2
a79 2
void mustek_attach(struct ss_softc *, struct scsibus_attach_args *);
void scanjet_attach(struct ss_softc *, struct scsibus_attach_args *);
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.8 2001/06/22 14:35:43 deraadt Exp $	*/
d71 1
a71 1
	struct quirkdata *quirkdata;	/* if we have a rogue entry */
@


1.8
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.7 1997/03/10 02:29:41 kstailey Exp $	*/
d47 3
a49 3
	int	(*set_params) __P((struct ss_softc *, struct scan_io *));
	int	(*trigger_scanner) __P((struct ss_softc *));
	int	(*get_params) __P((struct ss_softc *));
d51 5
a55 5
	void	(*minphys) __P((struct ss_softc *, struct buf *));
	int	(*read) __P((struct ss_softc *, struct buf *));
	int	(*rewind_scanner) __P((struct ss_softc *));
	int	(*load_adf) __P((struct ss_softc *));
	int	(*unload_adf) __P((struct ss_softc *));
d78 2
a79 2
void mustek_attach __P((struct ss_softc *, struct scsibus_attach_args *));
void scanjet_attach __P((struct ss_softc *, struct scsibus_attach_args *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.8 2001/06/22 14:35:43 deraadt Exp $	*/
d47 3
a49 3
	int	(*set_params)(struct ss_softc *, struct scan_io *);
	int	(*trigger_scanner)(struct ss_softc *);
	int	(*get_params)(struct ss_softc *);
d51 5
a55 5
	void	(*minphys)(struct ss_softc *, struct buf *);
	int	(*read)(struct ss_softc *, struct buf *);
	int	(*rewind_scanner)(struct ss_softc *);
	int	(*load_adf)(struct ss_softc *);
	int	(*unload_adf)(struct ss_softc *);
d78 2
a79 2
void mustek_attach(struct ss_softc *, struct scsibus_attach_args *);
void scanjet_attach(struct ss_softc *, struct scsibus_attach_args *);
@


1.7
log
@do GET_BUFFER_STATUS in special minphys
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.6 1997/03/08 05:39:01 kstailey Exp $	*/
d68 1
a68 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc.	      */
d71 1
a71 1
	struct quirkdata *quirkdata;	/* if we have a rogue entry	      */
@


1.7.14.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.7 1997/03/10 02:29:41 kstailey Exp $	*/
d68 1
a68 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc.	*/
d71 1
a71 1
	struct quirkdata *quirkdata;	/* if we have a rogue entry */
@


1.7.14.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 3
a49 3
	int	(*set_params)(struct ss_softc *, struct scan_io *);
	int	(*trigger_scanner)(struct ss_softc *);
	int	(*get_params)(struct ss_softc *);
d51 5
a55 5
	void	(*minphys)(struct ss_softc *, struct buf *);
	int	(*read)(struct ss_softc *, struct buf *);
	int	(*rewind_scanner)(struct ss_softc *);
	int	(*load_adf)(struct ss_softc *);
	int	(*unload_adf)(struct ss_softc *);
d78 2
a79 2
void mustek_attach(struct ss_softc *, struct scsibus_attach_args *);
void scanjet_attach(struct ss_softc *, struct scsibus_attach_args *);
@


1.7.14.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.7.14.2 2002/03/28 14:52:01 niklas Exp $	*/
d71 1
a71 1
	const struct quirkdata *quirkdata; /* if we have a rogue entry */
@


1.6
log
@generic set_window via quirk table
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.5 1997/03/08 03:06:51 kstailey Exp $	*/
d68 1
a68 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc.		*/
d70 3
a72 3
	struct buf buf_queue;		/* the queue of pending IO operations	*/
	struct quirkdata *quirkdata;	/* if we have a rogue entry		*/
	struct ss_special *special;	/* special handlers for spec. devices	*/
@


1.5
log
@remove unused struct member
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.3 1996/04/21 22:31:18 deraadt Exp $	*/
d68 1
a68 1
	struct scsi_link *sc_link;	/* contains our targ, lun, etc. */
d70 3
a72 7
	struct buf buf_queue;		/* the queue of pending IO operations */
#define SS_Q_GET_BUFFER_SIZE	0x0001	/* poll for available data in ssread() */
/* truncate to byte boundry is assumed by default unless one of these is set */
#define SS_Q_PAD_TO_BYTE	0x0002	/* pad monochrome data to byte boundary */
#define SS_Q_PAD_TO_WORD	0x0004	/* pad monochrome data to word boundary */
#define SS_Q_THRESHOLD_FOLLOWS_BRIGHTNESS 0x0008
	struct ss_special *special;	/* special handlers for spec. devices */
@


1.4
log
@Remove erroneously doubled text (patch can do that when a new file
comes into existence simultaneously from two directions).
@
text
@a70 1
	u_int quirks;			/* scanner is only mildly twisted */
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: ssvar.h,v 1.2 1996/04/19 16:10:26 niklas Exp $	*/
a55 79
};

/*
 * ss_softc has to be declared here, because the device dependant
 * modules include it
 */
struct ss_softc {
	struct device sc_dev;

	int flags;
#define SSF_TRIGGERED	0x01	/* read operation has been primed */
#define	SSF_LOADED	0x02	/* parameters loaded */
	struct scsi_link *sc_link;	/* contains our targ, lun, etc. */
	struct scan_io sio;
	struct buf buf_queue;		/* the queue of pending IO operations */
	u_int quirks;			/* scanner is only mildly twisted */
#define SS_Q_GET_BUFFER_SIZE	0x0001	/* poll for available data in ssread() */
/* truncate to byte boundry is assumed by default unless one of these is set */
#define SS_Q_PAD_TO_BYTE	0x0002	/* pad monochrome data to byte boundary */
#define SS_Q_PAD_TO_WORD	0x0004	/* pad monochrome data to word boundary */
#define SS_Q_THRESHOLD_FOLLOWS_BRIGHTNESS 0x0008
	struct ss_special *special;	/* special handlers for spec. devices */
};

/*
 * define the special attach routines if configured
 */
void mustek_attach __P((struct ss_softc *, struct scsibus_attach_args *));
void scanjet_attach __P((struct ss_softc *, struct scsibus_attach_args *));
/*	$NetBSD: ssvar.h,v 1.1 1996/02/18 20:32:50 mycroft Exp $	*/

/*
 * Copyright (c) 1995 Kenneth Stailey.  All rights reserved.
 *   modified for configurable scanner support by Joachim Koenig
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Kenneth Stailey.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * SCSI scanner interface description
 */

/*
 * Special handlers for impractically different scanner types.
 * Register NULL for a function if you want to try the real SCSI code
 * (with quirks table)
 */
struct ss_special {
	int	(*set_params)();
	int	(*trigger_scanner)();
	int	(*get_params)();
	void	(*minphys)(); /* some scanners only send line-multiples */
	int	(*read)();
	int	(*rewind_scanner)();
	int	(*load_adf)();
	int	(*unload_adf)();
@


1.2
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: ssvar.h,v 1.1 1996/02/18 20:32:50 mycroft Exp $	*/
d43 3
d47 9
a55 8
	int	(*set_params)();
	int	(*trigger_scanner)();
	int	(*get_params)();
	void	(*minphys)(); /* some scanners only send line-multiples */
	int	(*read)();
	int	(*rewind_scanner)();
	int	(*load_adf)();
	int	(*unload_adf)();
@


1.1
log
@Sync. with NetBSD:
- scsi prototypes.
- Add SCSI scanner support by Kenneth Stailey and Joachim Koenig-Baltes,
  hacked a but.  Needs more work.
ss.c:
- Truncate to the window size in ssminphys(), not ssread().
- Missed some prototyping foo.
- Minor tweak; make sure window size is 0 on close.
- Change variable name to avoid GCC warning.
- Handle EOF a little differently.
@
text
@d1 80
@
