head	1.7;
access;
symbols
	OPENBSD_3_7:1.6.0.18
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.16
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.14
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.12
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.10
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.8
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.6
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2005.05.27.16.50.31;	author krw;	state dead;
branches;
next	1.6;

1.6
date	2001.06.22.14.35.42;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.07.20.06.21.59;	author csapuntz;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	96.10.31.01.09.21;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.16.09.28.56;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.30.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches;
next	;

1.5.4.1
date	2001.07.04.11.00.04;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@No longer used after merge of atapi/scsi cd code.
@
text
@/*	$OpenBSD: scsi_cd.h,v 1.6 2001/06/22 14:35:42 deraadt Exp $	*/
/*	$NetBSD: scsi_cd.h,v 1.6 1996/03/19 03:06:39 mycroft Exp $	*/

/*
 * Written by Julian Elischer (julian@@tfs.com)
 * for TRW Financial Systems.
 *
 * TRW Financial Systems, in accordance with their agreement with Carnegie
 * Mellon University, makes this software available to CMU to distribute
 * or use in any manner that they see fit as long as this message is kept with 
 * the software. For this reason TFS also grants any other persons or
 * organisations permission to use or modify this software.
 *
 * TFS supplies this software to be publicly redistributed
 * on the understanding that TFS is not responsible for the correct
 * functioning of this software in any circumstances.
 *
 * Ported to run under 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 */
#ifndef	_SCSI_SCSI_CD_H
#define _SCSI_SCSI_CD_H 1

struct scsi_cd_write_params_page {
	u_int8_t page_code;
	u_int8_t page_len;
	u_int8_t write_type;
#define WRITE_TYPE_DUMMY	0x10	/* do not actually write blocks */
#define WRITE_TYPE_MASK		0x0f	/* session write type */
	u_int8_t track_mode;
#define TRACK_MODE_MULTI_SESS	0xc0	/* multisession write type */
#define TRACK_MODE_FP		0x20	/* fixed packet (if in packet mode) */
#define TRACK_MODE_COPY		0x10	/* 1st higher gen of copy prot track */
#define TRACK_MODE_PREEPMPASIS	0x01	/* audio w/ preemphasis (audio) */
#define TRACK_MODE_INCREMENTAL	0x01	/* incremental data track (data) */
#define TRACK_MODE_ALLOW_COPY	0x02	/* digital copy is permitted */
#define TRACK_MODE_DATA		0x04	/* this is a data track */
#define TRACK_MODE_4CHAN	0x08	/* four channel audio */
	u_int8_t dbtype;
#define DBTYPE_MASK		0x0f	/* data block type */
	u_int8_t reserved1[2];
	u_int8_t host_appl_code;
#define HOST_APPL_CODE_MASK	0x3f	/* host application code of disk */
	u_int8_t session_format;
	u_int8_t reserved2;
	u_int8_t packet_size[4];
	u_int8_t audio_pause_len[2];
	u_int8_t media_cat_number[16];
	u_int8_t isrc[14];
	u_int8_t sub_header[4];
	u_int8_t vendir_unique[4];
};

#ifdef CDDA
/*
 * There are 2352 bytes in a CD digital audio frame.  One frame is 1/75 of a
 * second, at 44.1kHz sample rate, 16 bits/sample, 2 channels.
 *
 * The frame data have the two channels interleaved, with the left
 * channel first.  Samples are little endian 16-bit signed values.
 */
#define CD_DA_BLKSIZ		2352	/* # bytes in CD-DA frame */
#ifndef CD_NORMAL_DENSITY_CODE
#define CD_NORMAL_DENSITY_CODE	0x00	/* from Toshiba CD-ROM specs */
#endif
#ifndef CD_DA_DENSITY_CODE
#define CD_DA_DENSITY_CODE	0x82	/* from Toshiba CD-ROM specs */
#endif
#endif /* CDDA */

union scsi_cd_pages {
	struct scsi_cd_write_params_page write_params;
	struct cd_audio_page audio;
};

struct scsi_cd_mode_data {
	struct scsi_mode_header header;
	struct scsi_blk_desc blk_desc;
	union scsi_cd_pages page;
};

#define AUDIOPAGESIZE \
	(sizeof(struct scsi_mode_header) + sizeof(struct scsi_blk_desc) \
	    + sizeof(struct cd_audio_page))

#endif /*_SCSI_SCSI_CD_H*/

@


1.6
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_cd.h,v 1.5 1999/07/20 06:21:59 csapuntz Exp $	*/
@


1.5
log
@

Make acd redundant.

Mostly based on NetBSD-current
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_cd.h,v 1.4 1996/10/31 01:09:21 niklas Exp $	*/
d24 27
a50 27
        u_int8_t page_code;
        u_int8_t page_len;
        u_int8_t write_type;
#define WRITE_TYPE_DUMMY        0x10    /* do not actually write blocks */
#define WRITE_TYPE_MASK         0x0f    /* session write type */
        u_int8_t track_mode;
#define TRACK_MODE_MULTI_SESS   0xc0    /* multisession write type */
#define TRACK_MODE_FP           0x20    /* fixed packet (if in packet mode) */
#define TRACK_MODE_COPY         0x10    /* 1st higher gen of copy prot track */
#define TRACK_MODE_PREEPMPASIS  0x01    /* audio w/ preemphasis (audio) */
#define TRACK_MODE_INCREMENTAL  0x01    /* incremental data track (data) */
#define TRACK_MODE_ALLOW_COPY   0x02    /* digital copy is permitted */
#define TRACK_MODE_DATA         0x04    /* this is a data track */
#define TRACK_MODE_4CHAN        0x08    /* four channel audio */
        u_int8_t dbtype;
#define DBTYPE_MASK             0x0f    /* data block type */
        u_int8_t reserved1[2];
        u_int8_t host_appl_code;
#define HOST_APPL_CODE_MASK     0x3f    /* host application code of disk */
        u_int8_t session_format;
        u_int8_t reserved2;
        u_int8_t packet_size[4];
        u_int8_t audio_pause_len[2];
        u_int8_t media_cat_number[16];
        u_int8_t isrc[14];
        u_int8_t sub_header[4];
        u_int8_t vendir_unique[4];
d71 2
a72 2
        struct scsi_cd_write_params_page write_params;
        struct cd_audio_page audio;
d82 2
a83 2
        (sizeof(struct scsi_mode_header) + sizeof(struct scsi_blk_desc) \
            + sizeof(struct cd_audio_page))
@


1.5.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_cd.h,v 1.5 1999/07/20 06:21:59 csapuntz Exp $	*/
d24 27
a50 27
	u_int8_t page_code;
	u_int8_t page_len;
	u_int8_t write_type;
#define WRITE_TYPE_DUMMY	0x10	/* do not actually write blocks */
#define WRITE_TYPE_MASK		0x0f	/* session write type */
	u_int8_t track_mode;
#define TRACK_MODE_MULTI_SESS	0xc0	/* multisession write type */
#define TRACK_MODE_FP		0x20	/* fixed packet (if in packet mode) */
#define TRACK_MODE_COPY		0x10	/* 1st higher gen of copy prot track */
#define TRACK_MODE_PREEPMPASIS	0x01	/* audio w/ preemphasis (audio) */
#define TRACK_MODE_INCREMENTAL	0x01	/* incremental data track (data) */
#define TRACK_MODE_ALLOW_COPY	0x02	/* digital copy is permitted */
#define TRACK_MODE_DATA		0x04	/* this is a data track */
#define TRACK_MODE_4CHAN	0x08	/* four channel audio */
	u_int8_t dbtype;
#define DBTYPE_MASK		0x0f	/* data block type */
	u_int8_t reserved1[2];
	u_int8_t host_appl_code;
#define HOST_APPL_CODE_MASK	0x3f	/* host application code of disk */
	u_int8_t session_format;
	u_int8_t reserved2;
	u_int8_t packet_size[4];
	u_int8_t audio_pause_len[2];
	u_int8_t media_cat_number[16];
	u_int8_t isrc[14];
	u_int8_t sub_header[4];
	u_int8_t vendir_unique[4];
d71 2
a72 2
	struct scsi_cd_write_params_page write_params;
	struct cd_audio_page audio;
d82 2
a83 2
	(sizeof(struct scsi_mode_header) + sizeof(struct scsi_blk_desc) \
	    + sizeof(struct cd_audio_page))
@


1.4
log
@$OpenBSD RCSIDs + comment fix in sd.c
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_cd.h,v 1.6 1996/03/19 03:06:39 mycroft Exp $	*/
d23 28
a50 170
/*
 *	Define two bits always in the same place in byte 2 (flag byte)
 */
#define	CD_RELADDR	0x01
#define	CD_MSF		0x02

/*
 * SCSI command format
 */

struct scsi_read_capacity_cd {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t addr[4];
	u_int8_t unused[3];
	u_int8_t control;
};

struct scsi_pause {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[6];
	u_int8_t resume;
	u_int8_t control;
};
#define	PA_PAUSE	1
#define PA_RESUME	0

struct scsi_play_msf {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused;
	u_int8_t start_m;
	u_int8_t start_s;
	u_int8_t start_f;
	u_int8_t end_m;
	u_int8_t end_s;
	u_int8_t end_f;
	u_int8_t control;
};

struct scsi_play_track {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[2];
	u_int8_t start_track;
	u_int8_t start_index;
	u_int8_t unused1;
	u_int8_t end_track;
	u_int8_t end_index;
	u_int8_t control;
};

struct scsi_play {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t blk_addr[4];
	u_int8_t unused;
	u_int8_t xfer_len[2];
	u_int8_t control;
};

struct scsi_play_big {
	u_int8_t opcode;
	u_int8_t byte2;	/* same as above */
	u_int8_t blk_addr[4];
	u_int8_t xfer_len[4];
	u_int8_t unused;
	u_int8_t control;
};

struct scsi_play_rel_big {
	u_int8_t opcode;
	u_int8_t byte2;	/* same as above */
	u_int8_t blk_addr[4];
	u_int8_t xfer_len[4];
	u_int8_t track;
	u_int8_t control;
};

struct scsi_read_header {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t blk_addr[4];
	u_int8_t unused;
	u_int8_t data_len[2];
	u_int8_t control;
};

struct scsi_read_subchannel {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t byte3;
#define	SRS_SUBQ	0x40
	u_int8_t subchan_format;
	u_int8_t unused[2];
	u_int8_t track;
	u_int8_t data_len[2];
	u_int8_t control;
};

struct scsi_read_toc {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[4];
	u_int8_t from_track;
	u_int8_t data_len[2];
	u_int8_t control;
};
;

struct scsi_read_cd_capacity {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t addr[4];
	u_int8_t unused[3];
	u_int8_t control;
};

/*
 * Opcodes
 */

#define READ_CD_CAPACITY	0x25	/* slightly different from disk */
#define READ_SUBCHANNEL		0x42	/* cdrom read Subchannel */
#define READ_TOC		0x43	/* cdrom read TOC */
#define READ_HEADER		0x44	/* cdrom read header */
#define PLAY			0x45	/* cdrom play  'play audio' mode */
#define PLAY_MSF		0x47	/* cdrom play Min,Sec,Frames mode */
#define PLAY_TRACK		0x48	/* cdrom play track/index mode */
#define PLAY_TRACK_REL		0x49	/* cdrom play track/index mode */
#define PAUSE			0x4b	/* cdrom pause in 'play audio' mode */
#define PLAY_BIG		0xa5	/* cdrom pause in 'play audio' mode */
#define PLAY_TRACK_REL_BIG	0xa9	/* cdrom play track/index mode */


struct scsi_read_cd_cap_data {
	u_int8_t addr[4];
	u_int8_t length[4];
};

union cd_pages {
	struct audio_page {
		u_int8_t page_code;
#define	CD_PAGE_CODE	0x3F
#define	AUDIO_PAGE	0x0e
#define	CD_PAGE_PS	0x80
		u_int8_t param_len;
		u_int8_t flags;
#define		CD_PA_SOTC	0x02
#define		CD_PA_IMMED	0x04
		u_int8_t unused[2];
		u_int8_t format_lba;
#define		CD_PA_FORMAT_LBA	0x0F
#define		CD_PA_APR_VALID	0x80
		u_int8_t lb_per_sec[2];
		struct	port_control {
			u_int8_t channels;
#define	CHANNEL 0x0F
#define	CHANNEL_0 1
#define	CHANNEL_1 2
#define	CHANNEL_2 4
#define	CHANNEL_3 8
#define	LEFT_CHANNEL	CHANNEL_0
#define	RIGHT_CHANNEL	CHANNEL_1
			u_int8_t volume;
		} port[4];
#define	LEFT_PORT	0
#define	RIGHT_PORT	1
	} audio;
d70 6
a75 1
struct cd_mode_data {
d78 1
a78 1
	union cd_pages page;
d80 5
@


1.3
log
@from NetBSD PR#812:
allow CDDA disks to be read.
not tested, anyone w/ SCSI CD is ought to.
here is the test program (not tested too ;):


#define CDDA


#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/scsiio.h>
#include <sys/cdio.h>
#include <scsi/scsi_all.h>
#include <scsi/scsi_cd.h>
#include <scsi/scsi_disk.h>


extern int errno;


void
usage()
{
    fprintf(stderr, "usage: cdda -d device -b blkcnt -o offset >output\n");
    exit(1);
}


char databuf[CD_DA_BLKSIZ];


main(int argc, char *argv[])
{
    int ch;
    int fd;
    off_t offset = 0;
    int cnt = 0;
    char *dev = 0;
    struct scsi_rw_big read_cmd;
    struct scsi_mode_sense sense_cmd;
    struct cd_mode_data bdesc;
    scsireq_t req;


    while ((ch = getopt(argc, argv, "d:b:o:")) != -1) {
        switch (ch) {
        case 'd':
            dev = optarg;
            break;
        case 'b':
            cnt = atoi(optarg);
            if (cnt <= 0)
                usage();
            break;
        case 'o':
            offset = atoi(optarg);
            break;
        case '?':
        default:
            usage();
        }
    }
    if (dev == NULL || cnt == 0)
        usage();
    fd = open(dev, O_RDONLY);
    if (fd == -1)
        err(1,"can't open device %s", dev);
#ifdef DEBUG
    ch = SC_DB_FLOW;
    ioctl(fd, SCIOCDEBUG, &ch);
#endif
    ch = 1;
    if (ioctl(fd, CDIOCSETCDDA, &ch) == -1)
        warn("can't set CDDA mode");


    read_cmd.opcode = READ_BIG;         /* READ10 */
    read_cmd.byte2 = 0;                 /* no relative */
    read_cmd.reserved = 0;
    read_cmd.length2 = 0;
    read_cmd.length1 = 1;               /* read one block at a time.
                                           hope it caches! */
    read_cmd.control = 0;               /* LBA mode, leave flag & link zero */


    for (; cnt > 0; cnt--, offset++) {
        read_cmd.addr_3 = (offset >> 24) & 0xff;
        read_cmd.addr_2 = (offset >> 16) & 0xff;
        read_cmd.addr_1 = (offset >> 8) & 0xff;
        read_cmd.addr_0 = offset & 0xff;
        memset(&req, 0, sizeof(req));
        req.flags = SCCMD_READ;
        /* timeout is in milliseconds--not that it's obvious from the
           include files!  */
        req.timeout = 10000;            /* 10 sec */


        bcopy(&read_cmd, req.cmd, sizeof(read_cmd));
        req.cmdlen = sizeof(read_cmd);
        req.databuf = databuf;
        req.datalen = sizeof(databuf);
        req.senselen = sizeof(req.sense); /* XXX */
        if (ioctl(fd, SCIOCCOMMAND, &req) == -1) {
            fprintf(stderr, "bad ioctl: %d\n", errno);
            ch = 0;
            ioctl(fd, CDIOCSETCDDA, &ch);
#ifdef DEBUG
            ioctl(fd, SCIOCDEBUG, &ch);
#endif
            exit(1);
        }
        if (req.retsts != 0 || req.error != 0) {
            ch = 0;
            ioctl(fd, CDIOCSETCDDA, &ch);
#ifdef DEBUG
            ioctl(fd, SCIOCDEBUG, &ch);
#endif
            errx(1,"return status %d, error %d\n", req.retsts, req.error);
        }
        if (req.datalen_used != sizeof(databuf)) {
            ch = 0;
            ioctl(fd, CDIOCSETCDDA, &ch);
#ifdef DEBUG
            ioctl(fd, SCIOCDEBUG, &ch);
#endif
            errx(1,"didn't get full buffer back (%x)", req.datalen_used);
        }
        write(1, databuf, sizeof(databuf));
    }
    ch = 0;
    if (ioctl(fd, CDIOCSETCDDA, &ch) == -1)
        warn("can't reset CDDA mode");
#ifdef DEBUG
    ioctl(fd, SCIOCDEBUG, &ch);
#endif
    close(fd);
    exit(0);
}
@
text
@d1 1
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d194 17
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: scsi_cd.h,v 1.5 1994/12/28 19:42:58 mycroft Exp $	*/
d34 4
a37 7
	u_char	byte2;
	u_char	addr_3;	/* Most Significant */
	u_char	addr_2;
	u_char	addr_1;
	u_char	addr_0;	/* Least Significant */
	u_char	unused[3];
	u_char	control;
d41 5
a45 5
	u_char	opcode;
	u_char	byte2;
	u_char	unused[6];
	u_char	resume;
	u_char	control;
d51 10
a60 10
	u_char	opcode;
	u_char	byte2;
	u_char	unused;
	u_char	start_m;
	u_char	start_s;
	u_char	start_f;
	u_char	end_m;
	u_char	end_s;
	u_char	end_f;
	u_char	control;
d64 9
a72 9
	u_char	opcode;
	u_char	byte2;
	u_char	unused[2];
	u_char	start_track;
	u_char	start_index;
	u_char	unused1;
	u_char	end_track;
	u_char	end_index;
	u_char	control;
d76 6
a81 6
	u_char	opcode;
	u_char	byte2;
	u_char	blk_addr[4];
	u_char	unused;
	u_char	xfer_len[2];
	u_char	control;
d85 6
a90 6
	u_char	opcode;
	u_char	byte2;	/* same as above */
	u_char	blk_addr[4];
	u_char	xfer_len[4];
	u_char	unused;
	u_char	control;
d94 6
a99 6
	u_char	opcode;
	u_char	byte2;	/* same as above */
	u_char	blk_addr[4];
	u_char	xfer_len[4];
	u_char	track;
	u_char	control;
d103 6
a108 6
	u_char	opcode;
	u_char	byte2;
	u_char	blk_addr[4];
	u_char	unused;
	u_char	data_len[2];
	u_char	control;
d112 3
a114 3
	u_char	opcode;
	u_char	byte2;
	u_char	byte3;
d116 5
a120 5
	u_char	subchan_format;
	u_char	unused[2];
	u_char	track;
	u_char	data_len[2];
	u_char	control;
d124 6
a129 6
	u_char	opcode;
	u_char	byte2;
	u_char	unused[4];
	u_char	from_track;
	u_char	data_len[2];
	u_char	control;
d134 5
a138 8
	u_char	opcode;
	u_char	byte2;
	u_char	addr_3;	/* Most Significant */
	u_char	addr_2;
	u_char	addr_1;
	u_char	addr_0;	/* Least Significant */
	u_char	unused[3];
	u_char	control;
d159 2
a160 8
	u_char	addr_3;	/* Most significant */
	u_char	addr_2;
	u_char	addr_1;
	u_char	addr_0;	/* Least significant */
	u_char	length_3;	/* Most significant */
	u_char	length_2;
	u_char	length_1;
	u_char	length_0;	/* Least significant */
d165 1
a165 1
		u_char	page_code;
d169 2
a170 2
		u_char	param_len;
		u_char	flags;
d173 2
a174 2
		u_char	unused[2];
		u_char	format_lba;
d177 1
a177 1
		u_char	lb_per_sec[2];
d179 1
a179 1
			u_char	channels;
d187 1
a187 1
			u_char	volume;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
