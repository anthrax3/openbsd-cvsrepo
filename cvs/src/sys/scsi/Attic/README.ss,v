head	1.7;
access;
symbols
	OPENBSD_4_7:1.6.0.56
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.58
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.54
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.52
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.50
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.48
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.46
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.44
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.42
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.40
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.38
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.36
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.34
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.32
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.30
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.28
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.26
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.24
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.22
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.20
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6;
locks; strict;
comment	@# @;


1.7
date	2010.06.02.13.37.39;	author dlg;	state dead;
branches;
next	1.6;

1.6
date	97.03.11.15.46.01;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.03.11.03.40.49;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.03.11.02.34.25;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.03.10.02.28.46;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.08.21.23.42;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.08.21.21.37;	author kstailey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ss has no value, its readme has even less value. it discusses development
which hasnt and wont happen, so stop perpetuating the lies by keeping it
around any longer.

ok deraadt@@
@
text
@$OpenBSD: README.ss,v 1.6 1997/03/11 15:46:01 kstailey Exp $

If you think SCSI tape drives are quirky you haven't seen anything.

There are many SCSI scanners that don't use the SCSI Scanner protocol with
CDB's like SET_WINDOW.  Instead they send Esc-code sequences over the SCSI
bus using the READ and WRITE operations.  True brain death at its finest.
The HP ScanJet, the Sharp JX-600S and the Epson ES-300C are among these.

Ricoh, UMAX, Mustek, Fujitsu, Microtek on the other hand all try to use the
SCSI scanner protocol, but scanning, unlike reading a block from a disk, is
a multi-step operation.  Certain steps must be performed in sequence and
the protocol does not define this.  In addition vendors are permitted by
the SCSI spec. to have unique additional features that the spec. does not
fully define.  Last but not least vendors make mistakes in implementing the
spec.

My SCSI scanner driver architecture is designed to support scanners
two ways.

The first way is used if a scanner uses CDB's like SET_WINDOW. The driver
code should be in ss.c and quirk tables and sequence strings etc. can
battle it out.  This part is not fully implemented yet.  Work is being done
on it from time to time.

The other way is used when the driver is used with an Esc-code-over-SCSI
case like a ScanJet it installs an "operations switch" so that parts of the
code in ss.c can be bypassed.  This feature is implemented for ScanJets.
Currently some Mustek scanners use this approach, as the Mustek scanners
use MODE_SELECT and not SET_WINDOW to send parameter data.  However it is
possible that too much code was farmed out to ss_mustek.c; it may be that
common code for ssread() in ss.c could be used.

Other Considerations

SCSI disconnect is missing from many scanners.  Sucks huh?  A slow
peripheral that also monopolizes the bus.  This means that if your
scanner does not support disconnect you need a second SCSI controller
for it since access of the controller by any other devices will be
locked out while you are scanning.  Scanners that do this include
MUSTEK flatbed scanners MFS 06000CX and MFS 12000CX, UMAX UC-630 &
UG-630.  Over time, as multi-tasking becomes more important to
commoners^H^H^H^H^H^H^H^H^HWindoze users, scanner vendors often supply
new ROMs that can do disconnect.

The image data from the scanner driver is currently supposed to resemble
headerless PBM "rawbits".  Depending on this is probably a bad idea
especially because it cannot always be attained.  The Fujutisu M3096G
grayscale data is photo-negative with repect to PBM and this cannot be
changed.  It would be better to extend the ioctl() interface to be able
to describe the kind of data that is available.

Halftone control of scanners is missing, save for one pre-defined
selection.  This also should be in the ioctl() interface.

Basic workflow for scanning

1. Open driver.
2. ioctl to get parameters (this fills in default values and generally makes
   step 3 easier.)
3. Modify parameters.
4. ioctl to set parameters.
5. ioctl to get data size (same as step 2, but values will be different if
   the image size, resolution, or image data type was set.)
6. Read data based on size from scanner retrieved in step 5 (the driver
   delivers an EOF if you overread.)
7. Close driver (or use ioctl to reset it so you can scan again.)
@


1.6
log
@more about disconnect
@
text
@d1 1
a1 1
$OpenBSD: README.ss,v 1.5 1997/03/11 03:40:49 kstailey Exp $
@


1.5
log
@move init. code to m.i. section
@
text
@d1 1
a1 1
$OpenBSD: README.ss,v 1.4 1997/03/11 02:34:25 kstailey Exp $
d37 8
a44 1
peripheral that also monopolizes the bus.
@


1.4
log
@Added notes about how to use the driver.
@
text
@d1 1
a1 1
$OpenBSD: README.ss,v 1.3 1997/03/10 02:28:46 kstailey Exp $
d35 3
@


1.3
log
@stuff about halftone
@
text
@d1 1
a1 1
$OpenBSD: README.ss,v 1.2 1997/03/08 21:23:42 kstailey Exp $
d45 13
@


1.2
log
@reformatted text
@
text
@d1 1
a1 1
$OpenBSD: README.ss,v 1.1 1997/03/08 21:21:37 kstailey Exp $
d34 11
@


1.1
log
@some scanner driver docs
@
text
@d1 1
a1 1
$OpenBSD$
d5 12
a16 13
There are many SCSI scanners that don't use the SCSI Scanner protocol
with CDB's like SET_WINDOW.  Instead they send Esc-code sequences over
the SCSI bus using the READ and WRITE operations.  True brain death at
its finest.  The HP ScanJet, the Sharp JX-600S and the Epson ES-300C
are among these.

Ricoh, UMAX, Mustek, Fujitsu, Microtek on the other hand all try to
use the SCSI scanner protocol, but scanning, unlike reading a block
from a disk, is a multi-step operation.  Certain steps must be
performed in sequence and the protocol does not define this.  In
addition vendors are permitted by the SCSI spec. to have unique
additional features that the spec. does not fully define.  Last but not
least vendors make mistakes in implementing the spec.
d21 12
a32 13
The first way is used if a scanner uses CDB's like SET_WINDOW. The
driver code should be in ss.c and quirk tables and sequence strings
etc. can battle it out.  This part is not fully implemented yet.
Work is being done on it from time to time.

The other way is used when the driver is used with an
Esc-code-over-SCSI case like a ScanJet it installs an "operations
switch" so that parts of the code in ss.c can be bypassed.  This
feature is implemented for ScanJets.  Currently some Mustek scanners
use this approach, as the Mustek scanners use MODE_SELECT and not
SET_WINDOW to send parameter data.  However it is possible that too
much code was farmed out to ss_mustek.c; it may be that common code
for ssread() in ss.c could be used.
@
