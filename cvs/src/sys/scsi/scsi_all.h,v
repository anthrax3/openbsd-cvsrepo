head	1.55;
access;
symbols
	OPENBSD_6_1_BASE:1.55
	OPENBSD_6_0:1.55.0.6
	OPENBSD_6_0_BASE:1.55
	OPENBSD_5_9:1.55.0.2
	OPENBSD_5_9_BASE:1.55
	OPENBSD_5_8:1.55.0.4
	OPENBSD_5_8_BASE:1.55
	OPENBSD_5_7:1.54.0.4
	OPENBSD_5_7_BASE:1.54
	OPENBSD_5_6:1.54.0.8
	OPENBSD_5_6_BASE:1.54
	OPENBSD_5_5:1.54.0.6
	OPENBSD_5_5_BASE:1.54
	OPENBSD_5_4:1.54.0.2
	OPENBSD_5_4_BASE:1.54
	OPENBSD_5_3:1.53.0.8
	OPENBSD_5_3_BASE:1.53
	OPENBSD_5_2:1.53.0.6
	OPENBSD_5_2_BASE:1.53
	OPENBSD_5_1_BASE:1.53
	OPENBSD_5_1:1.53.0.4
	OPENBSD_5_0:1.53.0.2
	OPENBSD_5_0_BASE:1.53
	OPENBSD_4_9:1.52.0.2
	OPENBSD_4_9_BASE:1.52
	OPENBSD_4_8:1.49.0.2
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.47.0.2
	OPENBSD_4_7_BASE:1.47
	OPENBSD_4_6:1.46.0.8
	OPENBSD_4_6_BASE:1.46
	OPENBSD_4_5:1.46.0.4
	OPENBSD_4_5_BASE:1.46
	OPENBSD_4_4:1.46.0.2
	OPENBSD_4_4_BASE:1.46
	OPENBSD_4_3:1.44.0.2
	OPENBSD_4_3_BASE:1.44
	OPENBSD_4_2:1.43.0.2
	OPENBSD_4_2_BASE:1.43
	OPENBSD_4_1:1.40.0.2
	OPENBSD_4_1_BASE:1.40
	OPENBSD_4_0:1.37.0.2
	OPENBSD_4_0_BASE:1.37
	OPENBSD_3_9:1.34.0.2
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.33.0.2
	OPENBSD_3_8_BASE:1.33
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.14.0.4
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.13
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.55
date	2015.06.07.19.13.27;	author krw;	state Exp;
branches;
next	1.54;
commitid	MxUWuiPFtM1nRYxm;

1.54
date	2013.06.06.14.00.44;	author krw;	state Exp;
branches;
next	1.53;

1.53
date	2011.07.08.08.13.19;	author dlg;	state Exp;
branches;
next	1.52;

1.52
date	2010.12.24.02.45.33;	author krw;	state Exp;
branches;
next	1.51;

1.51
date	2010.09.02.11.54.44;	author dlg;	state Exp;
branches;
next	1.50;

1.50
date	2010.09.01.04.44.26;	author dlg;	state Exp;
branches;
next	1.49;

1.49
date	2010.06.29.21.12.01;	author krw;	state Exp;
branches;
next	1.48;

1.48
date	2010.04.23.01.39.05;	author dlg;	state Exp;
branches;
next	1.47;

1.47
date	2009.10.12.00.30.15;	author dlg;	state Exp;
branches;
next	1.46;

1.46
date	2008.06.02.15.43.59;	author krw;	state Exp;
branches;
next	1.45;

1.45
date	2008.04.10.13.18.07;	author dlg;	state Exp;
branches;
next	1.44;

1.44
date	2007.12.28.16.19.15;	author dlg;	state Exp;
branches;
next	1.43;

1.43
date	2007.04.12.16.33.27;	author weingart;	state Exp;
branches;
next	1.42;

1.42
date	2007.04.03.04.55.34;	author dlg;	state Exp;
branches;
next	1.41;

1.41
date	2007.04.03.04.15.50;	author dlg;	state Exp;
branches;
next	1.40;

1.40
date	2006.11.27.23.14.22;	author beck;	state Exp;
branches;
next	1.39;

1.39
date	2006.11.27.20.15.09;	author beck;	state Exp;
branches;
next	1.38;

1.38
date	2006.11.27.18.24.43;	author beck;	state Exp;
branches;
next	1.37;

1.37
date	2006.07.29.02.52.49;	author krw;	state Exp;
branches;
next	1.36;

1.36
date	2006.07.23.14.34.55;	author krw;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.11.00.45.59;	author krw;	state Exp;
branches;
next	1.34;

1.34
date	2005.09.11.17.34.27;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2005.08.29.00.33.55;	author krw;	state Exp;
branches;
next	1.32;

1.32
date	2005.08.17.02.40.53;	author dlg;	state Exp;
branches;
next	1.31;

1.31
date	2005.08.09.14.27.56;	author marco;	state Exp;
branches;
next	1.30;

1.30
date	2005.08.05.00.25.15;	author dlg;	state Exp;
branches;
next	1.29;

1.29
date	2005.08.04.00.49.23;	author marco;	state Exp;
branches;
next	1.28;

1.28
date	2005.07.25.05.31.32;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2005.06.18.01.09.03;	author krw;	state Exp;
branches;
next	1.26;

1.26
date	2005.06.12.21.40.05;	author krw;	state Exp;
branches;
next	1.25;

1.25
date	2005.06.03.15.50.10;	author krw;	state Exp;
branches;
next	1.24;

1.24
date	2005.05.27.00.14.50;	author krw;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.25.20.52.41;	author krw;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.06.20.50.31;	author marco;	state Exp;
branches;
next	1.21;

1.21
date	2005.04.06.16.15.53;	author marco;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.06.02.12.54;	author marco;	state Exp;
branches;
next	1.19;

1.19
date	2005.04.06.00.00.09;	author marco;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.18.18.23.53;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.31.11.31.29;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.21.00.47.42;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.04.03.25.30;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2002.12.15.20.53.33;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.04.23.07.28;	author tdeval;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.11.21.38.17;	author krw;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.06.22.14.35.42;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.08.03.16.10;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.02.17.11.25;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.09.17.36.34;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.21.08.18.31;	author mjacob;	state Exp;
branches;
next	1.6;

1.6
date	99.07.25.07.09.19;	author csapuntz;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	97.04.14.04.09.06;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.07.02.20.18.49;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.16.23.53.15;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.30.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.24;	author deraadt;	state Exp;
branches;
next	;

1.6.4.1
date	2000.02.21.22.29.14;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2001.05.14.22.44.59;	author niklas;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2001.07.04.11.00.02;	author niklas;	state Exp;
branches;
next	1.6.4.4;

1.6.4.4
date	2001.11.13.23.02.30;	author niklas;	state Exp;
branches;
next	1.6.4.5;

1.6.4.5
date	2003.03.28.00.08.47;	author niklas;	state Exp;
branches;
next	1.6.4.6;

1.6.4.6
date	2004.02.19.11.01.30;	author niklas;	state Exp;
branches;
next	1.6.4.7;

1.6.4.7
date	2004.06.05.23.13.08;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2003.05.19.22.28.21;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.55
log
@More damned eye searing whitespace.
@
text
@/*	$OpenBSD: scsi_all.h,v 1.54 2013/06/06 14:00:44 krw Exp $	*/
/*	$NetBSD: scsi_all.h,v 1.10 1996/09/12 01:57:17 thorpej Exp $	*/

/*
 * SCSI general  interface description
 */

/*
 * Largely written by Julian Elischer (julian@@tfs.com)
 * for TRW Financial Systems.
 *
 * TRW Financial Systems, in accordance with their agreement with Carnegie
 * Mellon University, makes this software available to CMU to distribute
 * or use in any manner that they see fit as long as this message is kept with
 * the software. For this reason TFS also grants any other persons or
 * organisations permission to use or modify this software.
 *
 * TFS supplies this software to be publicly redistributed
 * on the understanding that TFS is not responsible for the correct
 * functioning of this software in any circumstances.
 *
 * Ported to run under 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 */

#ifndef	_SCSI_SCSI_ALL_H
#define _SCSI_SCSI_ALL_H 1

/*
 * SCSI command format
 */

/*
 * Define some bits that are in ALL (or a lot of) scsi commands
 */
#define SCSI_CTL_LINK		0x01
#define SCSI_CTL_FLAG		0x02
#define SCSI_CTL_VENDOR		0xC0


/*
 * Some old SCSI devices need the LUN to be set in the top 3 bits of the
 * second byte of the CDB.
 */
#define	SCSI_CMD_LUN_MASK	0xe0
#define	SCSI_CMD_LUN_SHIFT	5


struct scsi_generic {
	u_int8_t opcode;
	u_int8_t bytes[15];
};

struct scsi_test_unit_ready {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[3];
	u_int8_t control;
};

struct scsi_send_diag {
	u_int8_t opcode;
	u_int8_t byte2;
#define	SSD_UOL		0x01
#define	SSD_DOL		0x02
#define	SSD_SELFTEST	0x04
#define	SSD_PF		0x10
	u_int8_t unused[1];
	u_int8_t paramlen[2];
	u_int8_t control;
};

struct scsi_sense {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[2];
	u_int8_t length;
	u_int8_t control;
};

struct scsi_inquiry {
	u_int8_t opcode;
	u_int8_t flags;
#define SI_EVPD		0x01
	u_int8_t pagecode;
#define SI_PG_SUPPORTED	0x00
#define SI_PG_SERIAL	0x80
#define SI_PG_DEVID	0x83
#define SI_PG_ATA	0x89
	u_int8_t length[2];
	u_int8_t control;
};

struct scsi_mode_sense {
	u_int8_t opcode;
	u_int8_t byte2;
#define	SMS_DBD				0x08	/* Disable Block Descriptors */
	u_int8_t page;
#define	SMS_PAGE_CODE			0x3F
#define	SMS_PAGE_CTRL			0xC0
#define	SMS_PAGE_CTRL_CURRENT		0x00
#define	SMS_PAGE_CTRL_CHANGEABLE	0x40
#define	SMS_PAGE_CTRL_DEFAULT		0x80
#define	SMS_PAGE_CTRL_SAVED		0xC0
	u_int8_t unused;
	u_int8_t length;
	u_int8_t control;
};

struct scsi_mode_sense_big {
	u_int8_t opcode;
	u_int8_t byte2;				/* same bits as small version */
#define SMS_LLBAA			0x10	/*    plus: Long LBA Accepted */
	u_int8_t page;				/* same bits as small version */
	u_int8_t unused[4];
	u_int8_t length[2];
	u_int8_t control;
};

struct scsi_mode_select {
	u_int8_t opcode;
	u_int8_t byte2;
#define	SMS_SP	0x01
#define	SMS_PF	0x10
	u_int8_t unused[2];
	u_int8_t length;
	u_int8_t control;
};

struct scsi_mode_select_big {
	u_int8_t opcode;
	u_int8_t byte2;		/* same bits as small version */
	u_int8_t unused[5];
	u_int8_t length[2];
	u_int8_t control;
};

struct scsi_reserve {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[2];
	u_int8_t length;
	u_int8_t control;
};

struct scsi_release {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[2];
	u_int8_t length;
	u_int8_t control;
};

struct scsi_prevent {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused[2];
	u_int8_t how;
	u_int8_t control;
};
#define	PR_PREVENT 0x01
#define PR_ALLOW   0x00

struct scsi_report_luns {
	u_int8_t opcode;
	u_int8_t unused;
	u_int8_t selectreport;
#define	REPORT_NORMAL		0x00
#define	REPORT_WELLKNOWN	0x01
#define	REPORT_ALL		0x02
	u_int8_t unused2[3];
	u_int8_t length[4];
	u_int8_t unused4;
	u_int8_t control;
};

/*
 * Opcodes
 */
#define	TEST_UNIT_READY		0x00
#define REQUEST_SENSE		0x03
#define INQUIRY			0x12
#define MODE_SELECT		0x15
#define RESERVE			0x16
#define RELEASE			0x17
#define MODE_SENSE		0x1a
#define START_STOP		0x1b
#define RECEIVE_DIAGNOSTIC	0x1c
#define SEND_DIAGNOSTIC		0x1d
#define PREVENT_ALLOW		0x1e
#define POSITION_TO_ELEMENT	0x2b
#define WRITE_BUFFER		0x3b
#define READ_BUFFER		0x3c
#define	CHANGE_DEFINITION	0x40
#define	MODE_SELECT_BIG		0x55
#define	MODE_SENSE_BIG		0x5a
#define	REPORT_LUNS		0xa0

/*
 * Sort of an extra one, for SCSI_RESET.
 */
#define GENRETRY		1

/*
 * sense data format
 */
#define T_DIRECT	0
#define T_SEQUENTIAL	1
#define T_PRINTER	2
#define T_PROCESSOR	3
#define T_WORM		4
#define T_CDROM		5
#define T_SCANNER	6
#define T_OPTICAL	7
#define T_RDIRECT	14
#define T_NODEVICE	0x1F

#define T_CHANGER	8
#define T_COMM		9
#define	T_ENCLOSURE	13

#define T_REMOV		1
#define	T_FIXED		0

struct scsi_inquiry_data {
	u_int8_t device;
#define	SID_TYPE	0x1F
#define	SID_QUAL	0xE0
#define	SID_QUAL_LU_OK	0x00
#define	SID_QUAL_LU_OFFLINE	0x20
#define	SID_QUAL_RSVD	0x40
#define	SID_QUAL_BAD_LU	0x60
	u_int8_t dev_qual2;
#define	SID_QUAL2	0x7F
#define	SID_REMOVABLE	0x80
	u_int8_t version;
#define SID_ANSII	0x07
#define SID_ECMA	0x38
#define SID_ISO		0xC0
	u_int8_t response_format;
	u_int8_t additional_length;
#define SID_INQUIRY_HDR	5	/* Bytes up to & including additional_length */
#define SID_SCSI2_ALEN	31	/* Additional bytes of basic SCSI2 info */
	u_int8_t unused[2];
	u_int8_t flags;
#define	SID_SftRe	0x01
#define	SID_CmdQue	0x02
#define	SID_Linked	0x08
#define	SID_Sync	0x10
#define	SID_WBus16	0x20
#define	SID_WBus32	0x40
#define	SID_RelAdr	0x80
	char	vendor[8];
	char	product[16];
	char	revision[4];
	u_int8_t extra[20];
	u_int8_t flags2;
#define SID_IUS		0x01
#define SID_QAS		0x02
#define SID_CLOCKING	0x0c /* 0 == ST only, 1 == DT only, 3 == both */
	u_int8_t reserved;
};

struct scsi_vpd_hdr {
	u_int8_t device;
	u_int8_t page_code;
	u_int8_t page_length[2];
};

struct scsi_vpd_serial {
	struct scsi_vpd_hdr hdr;
	char serial[32];
};

#define VPD_PROTO_ID_FC		0x0 /* Fibre Channel */
#define VPD_PROTO_ID_SPI	0x1 /* Parallel SCSI */
#define VPD_PROTO_ID_SSA	0x2
#define VPD_PROTO_ID_IEEE1394	0x3
#define VPD_PROTO_ID_SRP	0x4 /* SCSI RDMA Protocol */
#define VPD_PROTO_ID_ISCSI	0x5 /* Internet SCSI (iSCSI) */
#define VPD_PROTO_ID_SAS	0x6 /* Serial Attached SCSI */
#define VPD_PROTO_ID_ADT	0x7 /* Automation/Drive Interface Transport */
#define VPD_PROTO_ID_ATA	0x7 /* ATA/ATAPI */
#define VPD_PROTO_ID_NONE	0xf

struct scsi_vpd_devid_hdr {
	u_int8_t pi_code;
#define VPD_DEVID_PI(_f)	(((_f) >> 4) & 0x0f)
#define VPD_DEVID_CODE(_f)	(((_f) >> 0) & 0x0f)
#define VPD_DEVID_CODE_BINARY		0x1
#define VPD_DEVID_CODE_ASCII		0x2
#define VPD_DEVID_CODE_UTF8		0x3
	u_int8_t flags;
#define VPD_DEVID_PIV		0x80
#define VPD_DEVID_ASSOC(_f)	((_f) & 0x30)
#define VPD_DEVID_ASSOC_LU		0x00
#define VPD_DEVID_ASSOC_PORT		0x10
#define VPD_DEVID_ASSOC_TARG		0x20
#define VPD_DEVID_TYPE(_f)	((_f) & 0x0f)
#define VPD_DEVID_TYPE_VENDOR		0x0
#define VPD_DEVID_TYPE_T10		0x1
#define VPD_DEVID_TYPE_EUI64		0x2
#define VPD_DEVID_TYPE_NAA		0x3
#define VPD_DEVID_TYPE_RELATIVE		0x4
#define VPD_DEVID_TYPE_PORT		0x5
#define VPD_DEVID_TYPE_LU		0x6
#define VPD_DEVID_TYPE_MD5		0x7
#define VPD_DEVID_TYPE_NAME		0x8
	u_int8_t reserved;
	u_int8_t len;
};

struct scsi_vpd_ata {
	struct scsi_vpd_hdr hdr;

	u_int8_t _reserved1[4];
	u_int8_t sat_vendor[8];
	u_int8_t sat_product[16];
	u_int8_t sat_revision[4];
	u_int8_t device_signature[20];
	u_int8_t command_code;
#define VPD_ATA_COMMAND_CODE_ATA	0xec
#define VPD_ATA_COMMAND_CODE_ATAPI	0xa1
	u_int8_t _reserved2[3];
	u_int8_t identify[512];
};

struct scsi_sense_data_unextended {
/* 1*/	u_int8_t error_code;
/* 4*/	u_int8_t block[3];
};

struct scsi_sense_data {
/* 1*/	u_int8_t error_code;
#define	SSD_ERRCODE_CURRENT	0x70
#define	SSD_ERRCODE_DEFERRED	0x71
#define	SSD_ERRCODE		0x7F
#define	SSD_ERRCODE_VALID	0x80
/* 2*/	u_int8_t segment;
/* 3*/	u_int8_t flags;
#define	SSD_KEY		0x0F
#define	SSD_ILI		0x20
#define	SSD_EOM		0x40
#define	SSD_FILEMARK	0x80
/* 7*/	u_int8_t info[4];
/* 8*/	u_int8_t extra_len;
/*12*/	u_int8_t cmd_spec_info[4];
/*13*/	u_int8_t add_sense_code;
/*14*/	u_int8_t add_sense_code_qual;
/*15*/	u_int8_t fru;
/*16*/	u_int8_t sense_key_spec_1;
#define	SSD_SCS_VALID		0x80
#define SSD_SCS_CDB_ERROR	0x40
#define SSD_SCS_SEGMENT_DESC	0x20
#define SSD_SCS_VALID_BIT_INDEX	0x08
#define SSD_SCS_BIT_INDEX	0x07
/*17*/	u_int8_t sense_key_spec_2;
/*18*/	u_int8_t sense_key_spec_3;
};

#define SKEY_NO_SENSE		0x00
#define SKEY_RECOVERED_ERROR	0x01
#define SKEY_NOT_READY		0x02
#define SKEY_MEDIUM_ERROR	0x03
#define SKEY_HARDWARE_ERROR	0x04
#define SKEY_ILLEGAL_REQUEST	0x05
#define SKEY_UNIT_ATTENTION	0x06
#define SKEY_WRITE_PROTECT	0x07
#define SKEY_BLANK_CHECK	0x08
#define SKEY_VENDOR_UNIQUE	0x09
#define SKEY_COPY_ABORTED	0x0A
#define SKEY_ABORTED_COMMAND	0x0B
#define SKEY_EQUAL		0x0C
#define SKEY_VOLUME_OVERFLOW	0x0D
#define SKEY_MISCOMPARE		0x0E
#define SKEY_RESERVED		0x0F


/* Additional sense code info */
#define ASC_ASCQ(ssd)	((ssd->add_sense_code << 8) | ssd->add_sense_code_qual)

#define SENSE_FILEMARK_DETECTED			0x0001
#define SENSE_END_OF_MEDIUM_DETECTED		0x0002
#define SENSE_SETMARK_DETECTED			0x0003
#define SENSE_BEGINNING_OF_MEDIUM_DETECTED	0x0004
#define SENSE_END_OF_DATA_DETECTED		0x0005
#define SENSE_NOT_READY_BECOMING_READY		0x0401
#define SENSE_NOT_READY_INIT_REQUIRED		0x0402
#define SENSE_NOT_READY_FORMAT			0x0404
#define SENSE_NOT_READY_REBUILD			0x0405
#define SENSE_NOT_READY_RECALC			0x0406
#define SENSE_NOT_READY_INPROGRESS		0x0407
#define SENSE_NOT_READY_LONGWRITE		0x0408
#define SENSE_NOT_READY_SELFTEST		0x0409
#define SENSE_POWER_RESET_OR_BUS		0x2900
#define SENSE_POWER_ON				0x2901
#define SENSE_BUS_RESET				0x2902
#define SENSE_BUS_DEVICE_RESET			0x2903
#define SENSE_DEVICE_INTERNAL_RESET		0x2904
#define SENSE_TSC_CHANGE_SE			0x2905
#define SENSE_TSC_CHANGE_LVD			0x2906
#define SENSE_IT_NEXUS_LOSS			0x2907
#define SENSE_BAD_MEDIUM			0x3000
#define SENSE_NR_MEDIUM_UNKNOWN_FORMAT		0x3001
#define SENSE_NR_MEDIUM_INCOMPATIBLE_FORMAT	0x3002
#define SENSE_NW_MEDIUM_UNKNOWN_FORMAT		0x3004
#define SENSE_NW_MEDIUM_INCOMPATIBLE_FORMAT	0x3005
#define SENSE_NF_MEDIUM_INCOMPATIBLE_FORMAT	0x3006
#define SENSE_NW_MEDIUM_AC_MISMATCH		0x3008
#define SENSE_NOMEDIUM				0x3A00
#define SENSE_NOMEDIUM_TCLOSED			0x3A01
#define SENSE_NOMEDIUM_TOPEN			0x3A02
#define SENSE_NOMEDIUM_LOADABLE			0x3A03
#define SENSE_NOMEDIUM_AUXMEM			0x3A04
#define SENSE_CARTRIDGE_FAULT			0x5200
#define SENSE_MEDIUM_REMOVAL_PREVENTED		0x5302

struct scsi_blk_desc {
	u_int8_t density;
	u_int8_t nblocks[3];
	u_int8_t reserved;
	u_int8_t blklen[3];
};

struct scsi_direct_blk_desc {
	u_int8_t nblocks[4];
	u_int8_t density;
	u_int8_t blklen[3];
};

struct scsi_blk_desc_big {
	u_int8_t nblocks[8];
	u_int8_t density;
	u_int8_t reserved[3];
	u_int8_t blklen[4];
};

struct scsi_mode_header {
	u_int8_t data_length;		/* Sense data length */
	u_int8_t medium_type;
	u_int8_t dev_spec;
	u_int8_t blk_desc_len;
};

struct scsi_mode_header_big {
	u_int8_t data_length[2];	/* Sense data length */
	u_int8_t medium_type;
	u_int8_t dev_spec;
	u_int8_t reserved;
#define LONGLBA	0x01
	u_int8_t reserved2;
	u_int8_t blk_desc_len[2];
};

/* Both disks and tapes use dev_spec to report READONLY status. */
#define	SMH_DSP_WRITE_PROT	0x80

union scsi_mode_sense_buf {
	struct scsi_mode_header hdr;
	struct scsi_mode_header_big hdr_big;
	u_char buf[254];	/* 255 & 256 bytes breaks some devices. */
				/* ahci doesn't like 255, various don't like */
				/* 256 because length must fit in 8 bits. */
} __packed;			/* Ensure sizeof() is 254! */

struct scsi_report_luns_data {
	u_int8_t length[4];	/* length of LUN inventory, in bytes */
	u_int8_t reserved[4];	/* unused */
	/*
	 * LUN inventory- we only support the type zero form for now.
	 */
#define RPL_LUNDATA_SIZE 8	/* Bytes per lun */
	struct {
		u_int8_t lundata[RPL_LUNDATA_SIZE];
	} luns[256];		/* scsi_link->luns is u_int8_t. */
};
#define	RPL_LUNDATA_T0LUN	1	/* Type 0 LUN is in lundata[1] */

/*
 * ATA PASS-THROUGH as per SAT2
 */

#define ATA_PASSTHRU_12		0xa1
#define ATA_PASSTHRU_16		0x85

#define ATA_PASSTHRU_PROTO_MASK		0x1e
#define ATA_PASSTHRU_PROTO_HW_RESET	0x00
#define ATA_PASSTHRU_PROTO_SW_RESET	0x02
#define ATA_PASSTHRU_PROTO_NON_DATA	0x06
#define ATA_PASSTHRU_PROTO_PIO_DATAIN	0x08
#define ATA_PASSTHRU_PROTO_PIO_DATAOUT	0x0a
#define ATA_PASSTHRU_PROTO_DMA		0x0c
#define ATA_PASSTHRU_PROTO_DMA_QUEUED	0x0e
#define ATA_PASSTHRU_PROTO_EXEC_DIAG	0x10
#define ATA_PASSTHRU_PROTO_NON_DATA_RST	0x12
#define ATA_PASSTHRU_PROTO_UDMA_DATAIN	0x14
#define ATA_PASSTHRU_PROTO_UDMA_DATAOUT	0x16
#define ATA_PASSTHRU_PROTO_FPDMA	0x18
#define ATA_PASSTHRU_PROTO_RESPONSE	0x1e

#define ATA_PASSTHRU_T_DIR_MASK		0x08
#define ATA_PASSTHRU_T_DIR_READ		0x08
#define ATA_PASSTHRU_T_DIR_WRITE	0x00

#define ATA_PASSTHRU_T_LEN_MASK		0x03
#define ATA_PASSTHRU_T_LEN_NONE		0x00
#define ATA_PASSTHRU_T_LEN_FEATURES	0x01
#define ATA_PASSTHRU_T_LEN_SECTOR_COUNT	0x02
#define ATA_PASSTHRU_T_LEN_TPSIU	0x03

struct scsi_ata_passthru_12 {
	u_int8_t opcode;
	u_int8_t count_proto;
	u_int8_t flags;
	u_int8_t features;
	u_int8_t sector_count;
	u_int8_t lba_low;
	u_int8_t lba_mid;
	u_int8_t lba_high;
	u_int8_t device;
	u_int8_t command;
	u_int8_t _reserved;
	u_int8_t control;
};

struct scsi_ata_passthru_16 {
	u_int8_t opcode;
	u_int8_t count_proto;
	u_int8_t flags;
	u_int8_t features[2];
	u_int8_t sector_count[2];
	u_int8_t lba_low[2];
	u_int8_t lba_mid[2];
	u_int8_t lba_high[2];
	u_int8_t device;
	u_int8_t command;
	u_int8_t control;
};

/*
 * SPI status information unit. See section 14.3.5 of SPI-3.
 */
struct scsi_status_iu_header {
/* 2*/	u_int8_t reserved[2];
/* 3*/	u_int8_t flags;
#define	SIU_SNSVALID 0x2
#define	SIU_RSPVALID 0x1
/* 4*/	u_int8_t status;
/* 8*/	u_int8_t sense_length[4];
/*12*/	u_int8_t pkt_failures_length[4];
	u_int8_t data[1]; /* <pkt failure list><sense data> OR <sense_data> */
};

#define SIU_PKTFAIL_CODE(siu)	((siu)->data[3])
#define		SIU_PFC_NONE			0x00
#define		SIU_PFC_CIU_FIELDS_INVALID	0x02
#define		SIU_PFC_TMF_NOT_SUPPORTED	0x04
#define		SIU_PFC_TMF_FAILED		0x05
#define		SIU_PFC_INVALID_TYPE_CODE	0x06
#define		SIU_PFC_ILLEGAL_REQUEST		0x07

#define SIU_SENSE_LENGTH(siu)	(_4btol((siu)->sense_length))
#define SIU_SENSE_DATA(siu)	(((siu)->flags & SIU_RSPVALID) ?	\
   &(siu)->data[_4btol((siu)->pkt_failures_length)] : &(siu)->data[0])

/*
 * Values for 'Task Management Flags' field of SPI command information unit.
 * See section 14.3.1 of SPI-3.
 */
#define	SIU_TASKMGMT_NONE		0x00
#define	SIU_TASKMGMT_ABORT_TASK		0x01
#define	SIU_TASKMGMT_ABORT_TASK_SET	0x02
#define	SIU_TASKMGMT_CLEAR_TASK_SET	0x04
#define	SIU_TASKMGMT_LUN_RESET		0x08
#define	SIU_TASKMGMT_TARGET_RESET	0x20
#define	SIU_TASKMGMT_CLEAR_ACA		0x40

/*
 * Status Byte
 */
#define SCSI_OK			0x00
#define SCSI_CHECK		0x02
#define SCSI_COND_MET		0x04
#define SCSI_BUSY		0x08
#define SCSI_INTERM		0x10
#define SCSI_INTERM_COND_MET	0x14
#define SCSI_RESV_CONFLICT	0x18
#define SCSI_TERMINATED		0x22
#define SCSI_QUEUE_FULL		0x28	/* Old (Pre SCSI-3) name */
#define SCSI_TASKSET_FULL	0x28	/* New (SCSI-3)     name */
#define SCSI_ACA_ACTIVE		0x30

#endif /* _SCSI_SCSI_ALL_H */
@


1.54
log
@Fix EOM handling. Makes Bacula much happier by allowing the use of
both 'Fast Forward Space File = yes' and 'Hardware End of Medium = yes'.

Mostly taken from FreeBSD.

Constant prodding by robert@@, testing actual backup and restore by
ajacoutot@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.53 2011/07/08 08:13:19 dlg Exp $	*/
d14 1
a14 1
 * or use in any manner that they see fit as long as this message is kept with 
d98 6
a103 6
#define	SMS_PAGE_CODE 			0x3F
#define	SMS_PAGE_CTRL 			0xC0
#define	SMS_PAGE_CTRL_CURRENT 		0x00
#define	SMS_PAGE_CTRL_CHANGEABLE 	0x40
#define	SMS_PAGE_CTRL_DEFAULT 		0x80
#define	SMS_PAGE_CTRL_SAVED 		0xC0
d212 3
a214 3
#define T_SCANNER 	6
#define T_OPTICAL 	7
#define T_RDIRECT 	14
@


1.53
log
@describe the ata vpd page
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.52 2010/12/24 02:45:33 krw Exp $	*/
d381 5
@


1.52
log
@Have sd(4) devices check for and respect read-only information the
way st(4) does. Have both decline to open read-only devices for
anything but read-only access.

Suggestion to fail opens rather than individual i/o's from deraadt@@.

Problem USB device found and donated by chefren, who also tested
diffs. Thanks!

ok dlg@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.51 2010/09/02 11:54:44 dlg Exp $	*/
d310 15
@


1.51
log
@the page_length field in the vpd page header is 2 bytes, not 1.

ok krw@@ marco@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.50 2010/09/01 04:44:26 dlg Exp $	*/
d433 3
@


1.50
log
@ata information vpd page id
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.49 2010/06/29 21:12:01 krw Exp $	*/
d266 1
a266 2
	u_int8_t reserved;
	u_int8_t page_length;
@


1.49
log
@Shrink struct scsi_sense_data and thus the sense member of scsi_xfer,
to 18 bytes by removing the extra_bytes field. sbic.c was the only
consumer, and that was in a DEBUG message.

18 bytes is the minimum length mandated by the SCSI spec. Anything
more is vendor/device specific information.

This fixes a usb key that yuo@@ had, and probably others.

Any device that decides to pay attention to extra sense data must
allocate its own space.

ok marco@@ matthew@@ miod@@ yuo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.48 2010/04/23 01:39:05 dlg Exp $	*/
d88 1
@


1.48
log
@the SAT spec from t10.org defines messages for tunnelling ATA commands over
SCSI when you're talking to a scsi to ata translation layer (satl). this
implements the ata command ioctl handler in scsi_ioctl.c that wraps the
ata command requests up in these scsi commands and then issues them against
the hardware. this cuts atascsi over to interpreting these scsi commands
rather than the ioctls directly.

this should allow mpi users (with a relatively recent firmware) to use
atactl against their SATA disks. i cant test cos my mpi(4) parts are too
old to either support these scsi commands or too old to take recent
firmwares.

ok marco@@ @@krw tested by krw@@ and me on ahci/atascsi
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.47 2009/10/12 00:30:15 dlg Exp $	*/
a342 1
/*32*/	u_int8_t extra_bytes[14];
@


1.47
log
@mask bits correctly in devid vpd for the PI
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.45 2008/04/10 13:18:07 dlg Exp $	*/
d455 61
@


1.46
log
@Shrink scsi_mode_sense_buf to 254 bytes so ahci doesn't get upset at
trying to dma-map odd length data areas. No other alignment should be
required according to miod@@. Makes my new SATA tape drive work.

ok deraadt@@
@
text
@d287 1
a287 1
#define VPD_DEVID_PI(_f)	(((_f) >> 4) & 0xf0)
@


1.45
log
@fix the macros that are used to read the devid vpd page.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.43 2007/04/12 16:33:27 weingart Exp $	*/
d438 4
a441 2
	u_char buf[255];	/* 256 bytes breaks some devices. */
} __packed;			/* Ensure sizeof() is 255! */
@


1.44
log
@massage the way vpds are defined. rename the page used for the devices
serial number and split the vpd header out for use in other places. while
here define the device identification page bits too.

ok krw@@ marco@@
@
text
@d294 1
a294 1
#define VPD_DEVID_ASSOC		0x30
d298 1
a298 1
#define VPD_DEVID_TYPE		(((_f) >> 0) & 0x0f)
@


1.43
log
@The beginnings of support for 16-byte cdb's in the scsi code.  This is
so we will be able to address devices larger than the 10-byte cdb's allow
us to do.

ok krw@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.42 2007/04/03 04:55:34 dlg Exp $	*/
d85 1
d87 1
d262 1
a262 1
struct scsi_inquiry_vpd {
d267 4
d272 38
@


1.42
log
@define the vpd inquiry page code.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.41 2007/04/03 04:15:50 dlg Exp $	*/
d50 1
a50 1
	u_int8_t bytes[11];
@


1.41
log
@modernise scsi_inquiry. the length field has grown and now theres pages to
query.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.40 2006/11/27 23:14:22 beck Exp $	*/
d85 1
@


1.40
log
@more magic removal
ok miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.39 2006/11/27 20:15:09 beck Exp $	*/
d82 1
a82 1
	u_int8_t byte2;
d84 2
a85 2
	u_int8_t unused[2];
	u_int8_t length;
@


1.39
log
@get rid of the rest of the asc/ascq magic codes in scsi
ok marco@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.38 2006/11/27 18:24:43 beck Exp $	*/
d274 2
@


1.38
log
@rework asc/ascq handling to get rid of "magic" 0x values in the code, changes
asc/ascq handling to deal with the pair together rather than seperately, since
modern scsi has long since polluted the "categories" of asc enough that you
pretty much need to always look as ascq.

ok krw@@ deraadt@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.37 2006/07/29 02:52:49 krw Exp $	*/
d321 1
@


1.37
log
@Zap a couple of unused defines - SID_ANSI_SCSI2 and SID_ANSI_SCSI3.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.36 2006/07/23 14:34:55 krw Exp $	*/
d315 34
@


1.36
log
@Use REPORT LUNS to get the list of LUNs to probe. If such a list is
obtained probe the LUNs given without checking for duplicate INQUIRY
data.

For non-USB, non-ATAPI, devices claiming to be SCSI-3 compliant. And
the target must have something attached at LUN 0.

If REPORT LUNS can't be used or isn't supported, the old scan process
is used.

Fixes Fibre Channel and SCSI enclosure devices that provide identical
INQUIRY data for all LUNs and were thus being misprobed as having
only LUN 0.

Tested by Bob Kitella, dlg@@, beck@@. Suggestions from deraadt@@.

ok dlg@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.35 2006/05/11 00:45:59 krw Exp $	*/
a232 2
#define SID_ANSII_SCSI2	0x02
#define SID_ANSII_SCSI3	0x03
@


1.35
log
@Zap trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.34 2005/09/11 17:34:27 krw Exp $	*/
d159 13
d192 1
d360 13
@


1.34
log
@Simplify code by changing struct scsi_mode_sense_buf{ union {}
headers; } to just union scsi_mode_sense_buf {}. No functional change.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.33 2005/08/29 00:33:55 krw Exp $	*/
d336 1
a336 1
#define LONGLBA	0x01	
d391 1
a391 1
#define SCSI_BUSY		0x08	
@


1.33
log
@Make sure certain architectures/compilers don't round up the size of
struct scsi_mode_sense_buf to 256, a value which doesn't fit in the 1
byte length field of a scsi command.

Found by aoyama@@ on luna88k.

Suggested by miod@@. ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.32 2005/08/17 02:40:53 dlg Exp $	*/
d341 5
a345 7
struct scsi_mode_sense_buf {
	union {
		struct scsi_mode_header hdr;
		struct scsi_mode_header_big hdr_big;
		u_char buf[255];	/* 256 bytes breaks some devices. */
	} __packed headers;		/* Ensure sizeof() is 255! */
} __packed;
@


1.32
log
@add a macro for the WRITE_BUFFER opcode

ok marco@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.31 2005/08/09 14:27:56 marco Exp $	*/
d346 2
a347 2
	} headers;
};
@


1.31
log
@Add Vital Product Data structure.  Requested deraadt@@ ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.30 2005/08/05 00:25:15 dlg Exp $	*/
d174 1
@


1.30
log
@a define for the scsi READ BUFFER opcode

for and ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.29 2005/08/04 00:49:23 marco Exp $	*/
d83 1
d244 8
@


1.29
log
@Add SCSI 3 define.  ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.28 2005/07/25 05:31:32 dlg Exp $	*/
d173 1
@


1.28
log
@SID_ANSII_SCSI2 is a valid value of SID_ANSII

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.27 2005/06/18 01:09:03 krw Exp $	*/
d217 1
@


1.27
log
@Shorten a couple of structure names:

scsi_mode_direct_blk_desc -> scsi_direct_blk_desc
scsi_mode_blk_desc_big -> scsi_blk_desc_big
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.26 2005/06/12 21:40:05 krw Exp $	*/
d216 1
@


1.26
log
@It turns out you need to ask for 16 byte block descriptors. We don't,
so eliminate code dealing with 16 byte block descriptors. No one else
seems to use them anyway. Add define for appropriate permission bit in
case we ever need it.

Simplify and clean up scsi_do_mode_sense() code as a result.

Strengthen check to ensure block descriptor data is a valid by
checking if it is a multiple of 8 bytes rather than just > 8 bytes.

Moves code to closer to what it was before scsi_do_mode_sense().
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.25 2005/06/03 15:50:10 krw Exp $	*/
d298 1
a298 1
struct scsi_mode_direct_blk_desc {
d304 1
a304 1
struct scsi_mode_blk_desc_big {
@


1.25
log
@Tweak scsi_do_mode_sense(). NetBSD was right and I was wrong. Sigh.
Add 'big' parameter to report which mode sense header type is being
returned. Eliminate icky pointer arithmetic, since it won't work if
only block descriptors are returned by the device.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.24 2005/05/27 00:14:50 krw Exp $	*/
d91 1
a91 1
#define	SMS_DBD				0x08
d106 3
a108 2
	u_int8_t byte2;		/* same bits as small version */
	u_int8_t page; 		/* same bits as small version */
@


1.24
log
@Reduce size of scsi_mode_sense_buf to 255 characters from 256. Fixes
Lexar Jumpdrive and probably others. Use better structure declaration
idiom, as suggested by drahn@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.23 2005/05/25 20:52:41 krw Exp $	*/
a325 8

/*
 * Block descriptors are 8 or 16 bytes. scsi_mode_header_big is 8 bytes. But
 * scsi_mode_header is 4 bytes, so if the page data starts at an offset that is
 * a multiple of 8 the header is scsi_mode_header_big.
 */
#define MODE_HEADER_IS_BIG(hdr, pgdata) \
	(((u_int8_t *)pgdata - (u_int8_t *)hdr) % 8 == 0)
@


1.23
log
@Introduce safer, more general mode sense capability. Transparently use
both 10 byte and 6 byte MODE SENSE commands and just return error
checked values.

Convert sd_scsi.c to use new mechanism for non-optical drives. USB
umass devices will now display actual mode sense info if it is
available via a 10 byte MODE SENSE. Which may mean 0 heads, etc. is
shown until cosmetics are finalized.

ok marco@@ 'that is pretty cool' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.22 2005/04/06 20:50:31 marco Exp $	*/
d327 8
d339 1
a340 1
	u_char pad[248];	/* To total length of 256 bytes. */
@


1.22
log
@Remove ses crud.
Requested and ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.21 2005/04/06 16:15:53 marco Exp $	*/
d297 13
d321 3
a323 1
	u_int8_t unused[2];
d325 8
@


1.21
log
@Add status/receive ses structures and #defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.20 2005/04/06 02:12:54 marco Exp $	*/
a69 70
};

/* FIXME does this go in ses.h? */
struct scsi_dev_elmt_ctrl_diag {
	u_int8_t common_ctrl;
	u_int8_t reserved;
	u_int8_t byte3;
#define SDECD_RQST_IDENT	0x02
#define SDECD_RQST_REMOVE	0x04
#define SDECD_RQST_INSERT	0x08
#define SDECD_DONT_REMOVE	0x40
#define SDECD_ACTIVE		0x80
	u_int8_t byte4;
#define SDECD_ENABLE_BYP_B	0x04
#define SDECD_ENABLE_BYP_A	0x08
#define SDECD_DEVICE_OFF	0x10
#define SDECD_RQST_FAULT	0x20
};

/* FIXME does this go in ses.h? */
struct scsi_enc_ctrl_diag_page {
	u_int8_t page_code;
	u_int8_t byte2;
#define SECDP_UNREC	0x01
#define SECDP_CRIT	0x02
#define SECDP_NONCRIT	0x04
#define SECDP_INFO	0x08
	u_int8_t length[2];
	u_int8_t gencode[4];
	u_int8_t overallctrl[4];
	/* first element starts here */
	struct scsi_dev_elmt_ctrl_diag elmts[0];
};

/* FIXME does this go in ses.h? */
struct scsi_dev_elmt_status_diag {
	u_int8_t common_status;
	u_int8_t slot_addr;
	u_int8_t byte3;
#define SDESD_REPORT		0x01
#define SDESD_IDENT		0x02
#define SDESD_RMV		0x04
#define SDESD_RDY_INSRT		0x08
#define SDESD_ENC_BYP_B		0x10
#define SDESD_ENC_BYP_A		0x20
#define SDESD_DONT_REMV		0x40
#define SDESD_CLNT_BYP_A	0x80
	u_int8_t byte4;
#define SDESD_DEV_BYP_B		0x01
#define SDESD_DEV_BYP_A		0x02
#define SDESD_BYP_B		0x04
#define SDESD_BYP_A		0x08
#define SDESD_DEV_OFF		0x10
#define SDESD_FLT_RQSTD		0x20
#define SDESD_FLT_SENSED	0x40
#define SDESD_CLNT_BYP_B	0x80
};

/* FIXME does this go in ses.h? */
struct scsi_enc_stat_diag_page {
	u_int8_t page_code;
	u_int8_t byte2;
#define SESDP_UNREC	0x01
#define SESDP_CRIT	0x02
#define SESDP_NONCRIT	0x04
#define SESDP_INFO	0x08
	u_int8_t length[2];
	u_int8_t gencode[4];
	u_int8_t overallstat[4];
	struct scsi_dev_elmt_status_diag elmts[0];
@


1.20
log
@Add control/send structures.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.19 2005/04/06 00:00:09 marco Exp $	*/
d93 3
a96 3
#define SECDP_NONCRIT	0x04
#define SECDP_CRIT	0x02
#define SECDP_UNREC	0x08
d102 38
@


1.19
log
@Add RECEIVE_DIAGNOSTIC & SEND_DIAGNOSTIC #defines for SES.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.18 2004/12/18 18:23:53 krw Exp $	*/
d70 32
@


1.18
log
@Add SPI status information unit structure and defines, along with some
command information unit 'Task Management Flags' defines. From FreeBSD
with a few tweaks. For ahd.

ok tdeval@@ marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.17 2004/07/31 11:31:29 krw Exp $	*/
d164 2
d168 2
a169 2
#define RESERVE			0x16
#define RELEASE			0x17
@


1.17
log
@Remove scsi_change_def() and related command structure. Its only use
in the tree is #ifdef'd out and is fundamentally wrong anyway - it
tries to force *all* devices to SCSI-2. Also recent SCSI specs seem to
have marked the command as obsolete. Bonus - eliminates another
undocumented option (SCSI_2_DEF).

Found in a list of unused kernel functions posted to tech-kern@@netbsd
by Krister Walfridsson in 2002.

ok marco@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.16 2004/02/21 00:47:42 krw Exp $	*/
d310 37
@


1.16
log
@Eliminate the quirks SDEV_NOSTARTUNIT, UMASS_QUIRK_NO_START_STOP, and
UMASS_QUIRK_FORCE_SHORT_INQUIRY. Fixes a bunch of USB devices. Based
on work by Mycroft in NetBSD.

ok tdeval@@ deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.15 2004/01/04 03:25:30 krw Exp $	*/
a155 12

struct scsi_changedef {
	u_int8_t opcode;
	u_int8_t byte2;
	u_int8_t unused1;
	u_int8_t how;
	u_int8_t unused[4];
	u_int8_t datalen;
	u_int8_t control;
};
#define SC_SCSI_1 0x01
#define SC_SCSI_2 0x03
@


1.15
log
@Rewrite scsi_decode_sense() to clean up code; eliminate many magic
numbers; fix passing a NULL to %s under some circumstances; fix the
bit index mask; etc.

No change in output.

ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.14 2002/12/15 20:53:33 krw Exp $	*/
d229 2
@


1.14
log
@Fix/Cleanup some SCSI #defines.

1) Correctly define MODE_SENSE_BIG as 0x5a, not 0x54.
2) Delete duplicate #define's of some opcodes in scsi_disk.h.
3) Delete multiple #define's for same opcode in scsi_disk.h.
4) Replace uses of deleted opcodes in umass.c with remaining ones.

ok millert@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.13 2002/09/04 23:07:28 tdeval Exp $	*/
d271 5
a275 1
#define	SSD_SCS_VALID	0x80
@


1.13
log
@Add support for RBC (simplified direct) devices.
ok costa@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.12 2001/11/11 21:38:17 krw Exp $	*/
a182 1
#define	MODE_SENSE_BIG		0x54
d184 1
d302 1
a302 1
	u_int8_t data_length;	/* Sense data length */
@


1.12
log
@Add missing values for SCSI status byte. Add new name for 0x28 to
reflect SCSI-3 editorial change from QUEUE FULL to TASK SET FULL.
Use same names as NetBSD where possible.

Some from NetBSD, some from Ashley M, some from SCSI-3 docs.

Now to edit drivers to use new constants instead of their own.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.11 2001/06/22 14:35:42 deraadt Exp $	*/
d202 1
@


1.12.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.12 2001/11/11 21:38:17 krw Exp $	*/
a201 1
#define T_RDIRECT 	14
@


1.12.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d183 1
a184 1
#define	MODE_SENSE_BIG		0x5a
d302 1
a302 1
	u_int8_t data_length;		/* Sense data length */
@


1.11
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.10 2001/04/08 03:16:10 krw Exp $	*/
d319 11
a329 5
#define	SCSI_OK		0x00
#define	SCSI_CHECK	0x02
#define	SCSI_BUSY	0x08	
#define SCSI_INTERM	0x10
#define SCSI_QUEUE_FULL	0x28
@


1.10
log
@Add one more 1 byte (reserved, as defined in spc-2) field to the
scsi_inquiry_data structure.

The last commit made the structure 57 bytes long, an odd number. This
caused problems with at least two drivers, which were not prepared to
handle the IGNORE WIDE RESIDUE message during probing. This message
apparently being generated during probes of non-existant LUNs.

Problem found on siop by Rev. Chris Cappuccio and on iha by Andreas
Gunnarsson <andreas@@zzlevo.net>.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.9 2001/04/02 17:11:25 krw Exp $	*/
d178 2
a179 2
#define RESERVE      		0x16
#define RELEASE      		0x17
d276 16
a291 16
#define SKEY_NO_SENSE           0x00
#define SKEY_RECOVERED_ERROR    0x01
#define SKEY_NOT_READY          0x02
#define SKEY_MEDIUM_ERROR       0x03
#define SKEY_HARDWARE_ERROR     0x04
#define SKEY_ILLEGAL_REQUEST    0x05
#define SKEY_UNIT_ATTENTION     0x06
#define SKEY_WRITE_PROTECT      0x07
#define SKEY_BLANK_CHECK        0x08
#define SKEY_VENDOR_UNIQUE      0x09
#define SKEY_COPY_ABORTED       0x0A
#define SKEY_ABORTED_COMMAND    0x0B
#define SKEY_EQUAL              0x0C
#define SKEY_VOLUME_OVERFLOW    0x0D
#define SKEY_MISCOMPARE         0x0E
#define SKEY_RESERVED           0x0F
@


1.9
log
@Add padding and new field 'flags2' to struct scsi_inquiry_data,
bringing it in line with the spc-2 definition of standard
inquiry data.

scsi_inquiry_data grows from 50 to 57 bytes in size.

The new 'flags2' field gives access to PPR related
information, the IUS, QAS and DT bits, used
in negotiating Ultra3 transfers.

Also add PPR related extended message defines.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.8 2001/01/09 17:36:34 krw Exp $	*/
d245 1
@


1.8
log
@Typo: dome -> some
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.7 2000/02/21 08:18:31 mjacob Exp $	*/
d240 5
a244 1
	u_int8_t extra[14];
@


1.7
log
@Add in Enclosure device type (0xd/13). Pad out inquiry data to 50 bytes
os that SAF-TE devices can be found.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.6 1999/07/25 07:09:19 csapuntz Exp $	*/
d33 1
a33 1
 * Define dome bits that are in ALL (or a lot of) scsi commands
@


1.6
log
@

Merge sd stuff from NetBSD-current. Helps with LS-120, ZIP

More SCSI logic from NetBSD-current

Some tape fixes. ATAPI tapes do not work yet for most operations.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.5 1997/04/14 04:09:06 downsj Exp $	*/
d206 1
d240 1
a240 1
	u_int8_t extra[8];
@


1.6.4.1
log
@sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.7 2000/02/21 08:18:31 mjacob Exp $	*/
a205 1
#define	T_ENCLOSURE	13
d239 1
a239 1
	u_int8_t extra[14];
@


1.6.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.10 2001/04/08 03:16:10 krw Exp $	*/
d33 1
a33 1
 * Define some bits that are in ALL (or a lot of) scsi commands
d240 1
a240 6
	u_int8_t extra[20];
	u_int8_t flags2;
#define SID_IUS		0x01
#define SID_QAS		0x02
#define SID_CLOCKING	0x0c /* 0 == ST only, 1 == DT only, 3 == both */
	u_int8_t reserved;
@


1.6.4.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.6.4.2 2001/05/14 22:44:59 niklas Exp $	*/
d178 2
a179 2
#define RESERVE			0x16
#define RELEASE			0x17
d276 16
a291 16
#define SKEY_NO_SENSE		0x00
#define SKEY_RECOVERED_ERROR	0x01
#define SKEY_NOT_READY		0x02
#define SKEY_MEDIUM_ERROR	0x03
#define SKEY_HARDWARE_ERROR	0x04
#define SKEY_ILLEGAL_REQUEST	0x05
#define SKEY_UNIT_ATTENTION	0x06
#define SKEY_WRITE_PROTECT	0x07
#define SKEY_BLANK_CHECK	0x08
#define SKEY_VENDOR_UNIQUE	0x09
#define SKEY_COPY_ABORTED	0x0A
#define SKEY_ABORTED_COMMAND	0x0B
#define SKEY_EQUAL		0x0C
#define SKEY_VOLUME_OVERFLOW	0x0D
#define SKEY_MISCOMPARE		0x0E
#define SKEY_RESERVED		0x0F
@


1.6.4.4
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d319 5
a323 11
#define SCSI_OK			0x00
#define SCSI_CHECK		0x02
#define SCSI_COND_MET		0x04
#define SCSI_BUSY		0x08	
#define SCSI_INTERM		0x10
#define SCSI_INTERM_COND_MET	0x14
#define SCSI_RESV_CONFLICT	0x18
#define SCSI_TERMINATED		0x22
#define SCSI_QUEUE_FULL		0x28	/* Old (Pre SCSI-3) name */
#define SCSI_TASKSET_FULL	0x28	/* New (SCSI-3)     name */
#define SCSI_ACA_ACTIVE		0x30
@


1.6.4.5
log
@Sync the SMP branch with 3.3
@
text
@d183 1
a184 1
#define	MODE_SENSE_BIG		0x5a
a201 1
#define T_RDIRECT 	14
d301 1
a301 1
	u_int8_t data_length;		/* Sense data length */
@


1.6.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d271 1
a271 5
#define	SSD_SCS_VALID		0x80
#define SSD_SCS_CDB_ERROR	0x40
#define SSD_SCS_SEGMENT_DESC	0x20
#define SSD_SCS_VALID_BIT_INDEX	0x08
#define SSD_SCS_BIT_INDEX	0x07
@


1.6.4.7
log
@Merge with the trunk
@
text
@a228 2
#define SID_INQUIRY_HDR	5	/* Bytes up to & including additional_length */
#define SID_SCSI2_ALEN	31	/* Additional bytes of basic SCSI2 info */
@


1.5
log
@Merge in various pieces of current NetBSD scsi code, including but not limited
to:

* New changer driver.
* Better optical support.
* Different `done' semantics.
* New quirks for SCSI QIC tape driver, SCSI floppy drives.
* Better support for SCSI-I devices.

Everybody needs to test this.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi_all.h,v 1.4 1996/07/02 20:18:49 deraadt Exp $	*/
d269 17
@


1.4
log
@handle SCSI_QUEUE_FULL correctly
@
text
@d1 2
a2 2
/*	$OpenBSD: scsi_all.h,v 1.3 1996/06/16 23:53:15 downsj Exp $	*/
/*	$NetBSD: scsi_all.h,v 1.7 1996/03/19 03:06:10 mycroft Exp $	*/
d38 8
a45 2
#define	SCSI_CMD_LUN		0xA0	/* these two should not be needed */
#define	SCSI_CMD_LUN_SHIFT	5	/* LUN in the cmd is no longer SCSI */
a184 2
#define MOVE_MEDIUM     	0xa5
#define READ_ELEMENT_STATUS	0xb8
@


1.3
log
@netbsd pr#2220: add SCIOCRESET.  I can't think of any reason not to.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d296 1
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
d181 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: scsi_all.h,v 1.6 1994/12/28 19:42:54 mycroft Exp $	*/
d232 4
a235 20
/*
 * This looks bad, and it is.  However it fixes padding problems
 * caused by using unions.  This *needs* to be an array, if this code
 * is to work on any architecture.
 */
struct	scsi_sense_data {
/* 1*/	u_int8_t error_code;		/* same bits as new version */
#define XXX_unextended_blockhi	extended_segment
#define XXX_unextended_blockmed	extended_flags
#define XXX_unextended_blocklow	extended_info[0]
/* 2*/	u_int8_t extended_segment;
/* 3*/	u_int8_t extended_flags;	/* same bits as new version */
/* 7*/	u_int8_t extended_info[4];
/* 8*/	u_int8_t extended_extra_len;
	/*
	 * allocate enough room to hold new stuff
	 * (by increasing 16 to 24 below)
	 */
/*32*/	u_int8_t extended_extra_bytes[24];
};	/* total of 32 bytes */
d237 1
a237 1
struct	scsi_sense_data_new {
d241 2
a242 9
	union {
		struct {	/* this is deprecated, the standard says "DON'T"*/
/* 2*/			u_int8_t blockhi;
/* 3*/			u_int8_t blockmed;
/* 4*/			u_int8_t blocklow;
		} unextended;
		struct {
/* 2*/			u_int8_t segment;
/* 3*/			u_int8_t flags;
d247 12
a258 14
/* 7*/			u_int8_t info[4];
/* 8*/			u_int8_t extra_len;
/*12*/			u_int8_t cmd_spec_info[4];
/*13*/			u_int8_t add_sense_code;
/*14*/			u_int8_t add_sense_code_qual;
/*15*/			u_int8_t fru;
/*16*/			u_int8_t sense_key_spec_1;
#define	SSD_SCS_VALID		0x80
/*17*/			u_int8_t sense_key_spec_2;
/*18*/			u_int8_t sense_key_spec_3;
/*32*/			u_int8_t extra_bytes[14];
		} extended;
	} ext;
}; /* total of 32 bytes */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
