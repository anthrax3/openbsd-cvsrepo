head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.8
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.14.0.4
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2016.05.04.14.30.01;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	n9OfCKyY3NAvSMg8;

1.16
date	2013.11.05.10.12.35;	author mpi;	state Exp;
branches;
next	1.15;

1.15
date	2012.08.29.09.17.55;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2011.10.10.19.42.36;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.21.21.36.40;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2010.12.04.17.06.31;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.29.22.08.29;	author jordan;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.06.19.12.34;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.07.13.38.58;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.22.02.54.51;	author mk;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.21.21.25.19;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.16.21.02.56;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.13.21.19.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.16.18.42.21;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.20.14.22.35;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.10.19.16.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.21.12.19;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Initial support for MSI-X.  Only supported on amd64 for now.  I have diffs to
actually use this in em(4) and xhci(4), but I'm not committing those yet
because we almost certainly need to save and restore the MSI-X registers
during suspend/resume.  However, this allows mpi@@ to play with multiple-vector
support in networking hardware.

Requested by mpi@@
ok mlarkin@@, mikeb@@
@
text
@/*	$OpenBSD: pci_machdep.h,v 1.16 2013/11/05 10:12:35 mpi Exp $ */

/*
 * Copyright (c) 2003-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
typedef struct mips_pci_chipset *pci_chipset_tag_t;
typedef u_long pcitag_t;
typedef u_long pci_intr_handle_t;

struct pci_attach_args;
struct sgi_device_location;

/*
 * mips-specific PCI structure and type definitions.
 * NOT TO BE USED DIRECTLY BY MACHINE INDEPENDENT CODE.
 */
struct mips_pci_chipset {
    void	*pc_conf_v;
    void	(*pc_attach_hook)(struct device *,
		    struct device *, struct pcibus_attach_args *);
    int		(*pc_bus_maxdevs)(void *, int);
    pcitag_t	(*pc_make_tag)(void *, int, int, int);
    void	(*pc_decompose_tag)(void *, pcitag_t, int *,
		    int *, int *);
    int		(*pc_conf_size)(void *, pcitag_t);
    pcireg_t	(*pc_conf_read)(void *, pcitag_t, int);
    void	(*pc_conf_write)(void *, pcitag_t, int, pcireg_t);
    int		(*pc_probe_device_hook)(void *, struct pci_attach_args *);

    int		(*pc_get_widget)(void *);
    int		(*pc_get_dl)(void *, pcitag_t, struct sgi_device_location *);

    void	*pc_intr_v;
    int		(*pc_intr_map)(struct pci_attach_args *, pci_intr_handle_t *);
    const char	*(*pc_intr_string)(void *, pci_intr_handle_t);
    void	*(*pc_intr_establish)(void *, pci_intr_handle_t,
		    int, int (*)(void *), void *, const char *);
    void	(*pc_intr_disestablish)(void *, void *);
    int		(*pc_intr_line)(void *, pci_intr_handle_t);

    int		(*pc_ppb_setup)(void *, pcitag_t, bus_addr_t *, bus_addr_t *,
		    bus_addr_t *, bus_addr_t *);

    void	*(*pc_rbus_parent_io)(struct pci_attach_args *);
    void	*(*pc_rbus_parent_mem)(struct pci_attach_args *);
};

/*
 * Functions provided to machine-independent PCI code.
 */
#define	pci_attach_hook(p, s, pba)					\
    (*(pba)->pba_pc->pc_attach_hook)((p), (s), (pba))
#define	pci_bus_maxdevs(c, b)						\
    (*(c)->pc_bus_maxdevs)((c)->pc_conf_v, (b))
#define	pci_make_tag(c, b, d, f)					\
    (*(c)->pc_make_tag)((c)->pc_conf_v, (b), (d), (f))
#define	pci_decompose_tag(c, t, bp, dp, fp)				\
    (*(c)->pc_decompose_tag)((c)->pc_conf_v, (t), (bp), (dp), (fp))
#define	pci_conf_size(c, t)						\
    (*(c)->pc_conf_size)((c)->pc_conf_v, (t))
#define	pci_conf_read(c, t, r)						\
    (*(c)->pc_conf_read)((c)->pc_conf_v, (t), (r))
#define	pci_conf_write(c, t, r, v)					\
    (*(c)->pc_conf_write)((c)->pc_conf_v, (t), (r), (v))
#define	pci_intr_map(c, ihp)						\
    (*(c)->pa_pc->pc_intr_map)((c), (ihp))
#define	pci_intr_map_msi(c, ihp)	(-1)
#define	pci_intr_map_msix(c, vec, ihp)	(-1)
#define	pci_intr_string(c, ih)						\
    (*(c)->pc_intr_string)((c)->pc_intr_v, (ih))
#define	pci_intr_establish(c, ih, l, h, a, nm)				\
    (*(c)->pc_intr_establish)((c)->pc_intr_v, (ih), (l), (h), (a), (nm))
#define	pci_intr_disestablish(c, iv)					\
    (*(c)->pc_intr_disestablish)((c)->pc_intr_v, (iv))
#define pci_intr_line(c, ih)						\
    (*(c)->pc_intr_line)((c)->pc_intr_v, (ih))
#define	pci_probe_device_hook(c, a)					\
    (*(c)->pc_probe_device_hook)((c)->pc_conf_v, (a))
#define	pci_dev_postattach(a, b)	do { } while (0)

#define	pci_min_powerstate(c, t)	(PCI_PMCSR_STATE_D3)
#define	pci_set_powerstate_md(c, t, s, p)

/*
 * Functions provided to machine-dependent PCI code.
 */
#define	pci_get_widget(c)						\
    (*(c)->pc_get_widget)((c)->pc_conf_v)
#define pci_get_device_location(c,t,l)					\
    (*(c)->pc_get_dl)((c)->pc_conf_v, (t), (l))

/*
 * Functions provided to machine-independent rbus code.
 */
#define	rbus_pccbb_parent_io(dev, pa)					\
    (rbus_tag_t)((*(pa)->pa_pc->pc_rbus_parent_io)(pa))
#define	rbus_pccbb_parent_mem(dev, pa)					\
    (rbus_tag_t)((*(pa)->pa_pc->pc_rbus_parent_mem)(pa))

void	pccbb_initialize(pci_chipset_tag_t, pcitag_t, uint, uint, uint);
void	ppb_initialize(pci_chipset_tag_t, pcitag_t, uint, uint, uint);
@


1.16
log
@Add a stub for the new MD hook needed to handle ACPI Power Resources.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.15 2012/08/29 09:17:55 kettenis Exp $ */
d90 1
@


1.15
log
@Implement pci_min_powerstate().
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.14 2011/10/10 19:42:36 miod Exp $ */
d103 1
@


1.14
log
@Introduce pci_probe_device_hook(pci_chipset_tag_t, struct pci_attach_args *).
This mandatory function will get invoked in pci_probe_device(), and allows
a pci host driver to alter the pci_attach_args passed to a device when
attaching.

This function will also, if returning non-zero, cause the device to be
skipped completely during all the phases of the PCI device discovery
(i.e. ressource enumeration, ressource assignment, and actual attachment).
This particular feature is experimental and might be reverted in the future
(or the scope narrowed to device attachment only).

A dummy #define pci_probe_device_hook() 0 is added to all platforms except
sgi, where real functions (currently only returning 0) are added; real meat
will be added shortly.

Discussed at s2k11, no objection from the usual suspects.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.13 2011/05/21 21:36:40 kettenis Exp $ */
d101 2
@


1.13
log
@Add pci_intr_map_msi() stub.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.12 2010/12/04 17:06:31 miod Exp $ */
d50 2
a86 4
#define	pci_get_widget(c)						\
    (*(c)->pc_get_widget)((c)->pc_conf_v)
#define pci_get_device_location(c,t,l)					\
    (*(c)->pc_get_dl)((c)->pc_conf_v, (t), (l))
d98 15
a119 2

#define	pci_dev_postattach(a, b)
@


1.12
log
@Introduce a new pci routine, pci_conf_size(), which returns the size of a
given pcitag_t configuration address space. Currently, all pci controllers
will return the usual 0x100 bytes of PCI configuration space, but this will
eventually change on PCIe-capable controlers.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.11 2010/06/29 22:08:29 jordan Exp $ */
d91 1
@


1.11
log
@Add support for mapping ACPI to PCI devices
ok kettenis, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.10 2010/04/06 19:12:34 miod Exp $ */
d47 1
d79 2
@


1.10
log
@Obtain struct sgi_device_location for the console input and output devices,
and compare against them when attaching potential console drivers, to figure
out whether they indeed are acting are console devices or not.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.9 2010/03/07 13:38:58 miod Exp $ */
d103 2
@


1.9
log
@Add an MD interface for PCI drivers to be able to retrieve the node and widget
number the PCI bus they are on is connected to. Will be used shortly to help
the console device selection logic.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.8 2009/08/22 02:54:51 mk Exp $ */
d33 1
a48 1
    int16_t	(*pc_get_nasid)(void *);
d50 1
a81 2
#define	pci_get_nasid(c)						\
    (*(c)->pc_get_nasid)((c)->pc_conf_v)
d84 3
a86 1
#define	pci_intr_map(c, ihp)				\
@


1.8
log
@Constify the what/name parameter of pci_intr_establish().

Tested by myself, sthen, oga, kettenis, and jasper.
Input from sthen and jasper.

ok kettenis

(Manpage follows shortly.)
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.7 2009/07/21 21:25:19 miod Exp $ */
d48 2
d81 4
@


1.7
log
@PCI-Cardbus bridge support for both O2 (macepcibr) and Octane/Origin (xbridge)
class systems. Tested on O2 and Origin 200 with wi@@pcmcia and xl@@cardbus,
using a Ricoh 5C475-based cbb(4) board.

acx@@cardbus doesn't work reliably yet, so your mileage may vary until more
bugs are fixed.

Thanks to matthieu@@ for lending me some cardbus devices for testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.6 2009/07/16 21:02:56 miod Exp $ */
d53 1
a53 1
		    int, int (*)(void *), void *, char *);
@


1.6
log
@Make the PCI-PCI bridge initialization code bus-independent, relying on a
per-pci_chipset_t function to perform actual resource allocation.
Add the necessary bits to macepcibr(4), and enable ppb(4) on O2 kernels now.

Joint effort with kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.5 2009/07/13 21:19:26 miod Exp $ */
d55 1
d59 3
d87 6
d94 2
a95 1
void	ppb_initialize(pci_chipset_tag_t, pcitag_t, uint, uint);
@


1.5
log
@Extend xbridge to support shared interrupt handlers, and perform PCI-PCI
bridge initialization if necessary; enable ppb on IP27 and IP30 kernels.
With feedback from kettenis@@; macepcibr to gain the same functionality soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.4 2008/02/16 18:42:21 miod Exp $ */
d55 3
d84 1
a84 2
void	ppb_initialize(pci_chipset_tag_t, pcitag_t, uint, uint, bus_addr_t,
	    bus_addr_t, bus_addr_t, bus_addr_t);
@


1.4
log
@Remove unused fields of struct mips_pci_chipset.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.3 2007/05/20 14:22:35 miod Exp $ */
d80 3
@


1.3
log
@Remove irrelevant code and defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.2 2004/08/10 19:16:18 deraadt Exp $ */
a54 3
    int		(*pc_ether_hw_addr)(u_int8_t *, u_int8_t, u_int8_t);
    int		(*pc_scsi_clock)(u_int8_t, u_int8_t);
    void	(*pc_sync_cache)(vaddr_t, int, int);
a79 6
#define	pci_ether_hw_addr(c, p, t, s)					\
    (*(c)->pc_ether_hw_addr)((p), (t), (s))
#define	pci_scsi_clock(c, t, s)						\
    (*(c)->pc_scsi_clock)((t), (s))
#define	pci_sync_cache(c, p, s, d)					\
    (*(c)->pc_sync_cache)((p), (s), (d))
@


1.2
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.1 2004/08/06 21:12:19 pefo Exp $ */
a58 5

#define	NEED_PCI_SYNC_CACHE_FUNC

#define	SYNC_R	0	/* Sync caches for reading data */
#define	SYNC_W	1	/* Sync caches for writing data */
@


1.1
log
@initial sgi import
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 * 
@

