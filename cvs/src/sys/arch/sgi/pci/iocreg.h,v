head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.26
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.18
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.01.02.05.49.36;	author visa;	state Exp;
branches;
next	1.10;
commitid	U9KGIaWU35EclYRl;

1.10
date	2009.11.18.19.03.27;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.11.15.54.25;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.10.15.50.10;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.08.13.11.19;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.03.18.48.39;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.01.19.17.56;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.14.20.21.14;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.18.19.32.47;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.12.17.56.58;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.22.53.00;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Take the PHY of iec(4) out of reset before attaching the interface.
Otherwise the PHY goes undetected on the slave node of a dual-node
Origin 200. The PHY gets enabled by diagnostic checks but only on the
master node. As the attach code will now do the enabling, the checks can
be disabled on reboot, making reboots faster especially on IP27.

Tested on Origin 200 (IP27), Fuel (IP35 with iec), and Origin 350
(IP35 without iec).

Diff from miod@@, ok krw@@
@
text
@/*	$OpenBSD: iocreg.h,v 1.10 2009/11/18 19:03:27 miod Exp $	*/

/*
 * Copyright (c) 2008 Joel Sing.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Register definitions for SGI IOC3 ASIC.
 */

#define IOC_NDEVS		6

#define IOCDEV_SERIAL_A		0
#define IOCDEV_SERIAL_B		1
#define IOCDEV_LPT		2
#define IOCDEV_KBC		3
#define IOCDEV_RTC		4
#define IOCDEV_EF		5

/* SuperIO registers */
#define IOC3_SIO_IR		0x0000001c	/* SIO interrupt register */
#define IOC3_SIO_IES		0x00000020	/* SIO interrupt enable */
#define IOC3_SIO_IEC		0x00000024	/* SIO interrupt disable */
#define IOC3_SIO_CR		0x00000028	/* SIO control register */
#define	IOC3_MCR		0x00000030	/* MicroLan control register */

/* GPIO registers */
#define	IOC3_GPCR_S		0x00000034	/* GPIO control bit set */
#define	IOC3_GPCR_C		0x00000038	/* GPIO control bit clear */
#define	IOC3_GPDR		0x0000003c	/* GPIO data */
#define	IOC3_GPPR_BASE		0x00000040	/* 9 GPIO pin registers */
#define	IOC3_GPPR(x)		(IOC3_GPPR_BASE + (x) * 4)

/* Keyboard controller registers. */
#define	IOC3_KBC_CTRL_STATUS	0x0000009c
#define	IOC3_KBC_KBD_RX		0x000000a0
#define	IOC3_KBC_AUX_RX		0x000000a4
#define	IOC3_KBC_KBD_TX		0x000000a8
#define	IOC3_KBC_AUX_TX		0x000000ac

/* Non-16550 mode UART registers */
#define	IOC3_UARTA_SSCR		0x000000b8	/* control register */
#define	IOC3_UARTA_STPIR	0x000000bc	/* TX producer index register */
#define	IOC3_UARTA_STCIR	0x000000c0	/* TX consumer index register */
#define	IOC3_UARTA_SRPIR	0x000000c4	/* RX producer index register */
#define	IOC3_UARTA_SRCIR	0x000000c8	/* RX consumer index register */
#define	IOC3_UARTA_SRTR		0x000000cc	/* receive timer register */
#define	IOC3_UARTA_SHADOW	0x000000d0	/* 16550 shadow register */

#define	IOC3_UARTB_SSCR		0x000000d4
#define	IOC3_UARTB_STPIR	0x000000d8
#define	IOC3_UARTB_STCIR	0x000000dc
#define	IOC3_UARTB_SRPIR	0x000000e0
#define	IOC3_UARTB_SRCIR	0x000000e4
#define	IOC3_UARTB_SRTR		0x000000e8
#define	IOC3_UARTB_SHADOW	0x000000ec

/* Ethernet registers */
#define	IOC3_ENET_MCR		0x000000f0	/* Master Control Register */
#define	IOC3_ENET_ISR		0x000000f4	/* Interrupt Status Register */
#define	IOC3_ENET_IER		0x000000f8	/* Interrupt Enable Register */
#define	IOC3_ENET_RCSR		0x000000fc	/* RX Control and Status Reg. */
#define	IOC3_ENET_RBR_H		0x00000100	/* RX Base Register */
#define	IOC3_ENET_RBR_L		0x00000104
#define	IOC3_ENET_RBAR		0x00000108	/* RX Barrier Register */
#define	IOC3_ENET_RCIR		0x0000010c	/* RX Consumer Index Register */
#define	IOC3_ENET_RPIR		0x00000110	/* RX Producer Index Register */
#define	IOC3_ENET_RTR		0x00000114	/* RX Timer Register */
#define	IOC3_ENET_TCSR		0x00000118	/* TX Control and Status Reg. */
#define	IOC3_ENET_RSR		0x0000011c	/* Random Seed Register */
#define	IOC3_ENET_TCDC		0x00000120	/* TX Collision Detect Counter */
#define	IOC3_ENET_BIR		0x00000124
#define	IOC3_ENET_TBR_H		0x00000128	/* TX Base Register */
#define	IOC3_ENET_TBR_L		0x0000012c
#define	IOC3_ENET_TCIR		0x00000130	/* TX Consumer Index Register */
#define	IOC3_ENET_TPIR		0x00000134	/* TX Producer Index Register */
#define	IOC3_ENET_MAR_H		0x00000138	/* MAC Address Register */
#define	IOC3_ENET_MAR_L		0x0000013c
#define	IOC3_ENET_HAR_H		0x00000140	/* Hash filter Address Reg. */
#define	IOC3_ENET_HAR_L		0x00000144
#define	IOC3_ENET_MICR		0x00000148	/* MII Control Register */
#define	IOC3_ENET_MIDR_R	0x0000014c	/* MII Data Register (read) */
#define	IOC3_ENET_MIDR_W	0x00000150	/* MII Data Register (write) */

/* bits in the SIO interrupt register */
#define	IOC3_IRQ_UARTA		0x00000040	/* UART A passthrough */
#define	IOC3_IRQ_UARTB		0x00008000	/* UART B passthrough */
#define	IOC3_IRQ_LPT		0x00040000	/* parallel port passthrough */
#define	IOC3_IRQ_KBC		0x00400000	/* keyboard controller */

/* bits in GPCR */
#define	IOC3_GPCR_PHY_RESET	0x00000020	/* reset Ethernet PHY */
#define	IOC3_GPCR_UARTA_PIO	0x00000040	/* UARTA in PIO mode */
#define	IOC3_GPCR_UARTB_PIO	0x00000080	/* UARTB in PIO mode */
#define	IOC3_GPCR_MLAN		0x00200000	/* MicroLan enable */

/* bits in SSCR */
#define	IOC3_SSCR_RESET		0x80000000

/* bits in ENET_MCR */
#define	IOC3_ENET_MCR_DUPLEX		0x00000001
#define	IOC3_ENET_MCR_PROMISC		0x00000002
#define	IOC3_ENET_MCR_PADEN		0x00000004
#define	IOC3_ENET_MCR_RXOFF_MASK	0x000001f8
#define	IOC3_ENET_MCR_RXOFF_SHIFT	3
#define	IOC3_ENET_MCR_PARITY_ENABLE	0x00000200
#define	IOC3_ENET_MCR_LARGE_SSRAM	0x00001000
#define	IOC3_ENET_MCR_TX_DMA		0x00002000
#define	IOC3_ENET_MCR_TX		0x00004000
#define	IOC3_ENET_MCR_RX_DMA		0x00008000
#define	IOC3_ENET_MCR_RX		0x00010000
#define	IOC3_ENET_MCR_LOOPBACK		0x00020000
#define	IOC3_ENET_MCR_RESET		0x80000000

/* bits in the ENET interrupt register */
#define	IOC3_ENET_ISR_RX_TIMER		0x00000001	/* RX periodic int */
#define	IOC3_ENET_ISR_RX_THRESHOLD	0x00000002	/* RX q above threshold */
#define	IOC3_ENET_ISR_RX_OFLOW		0x00000004	/* RX q overflow */
#define	IOC3_ENET_ISR_RX_BUF_OFLOW	0x00000008	/* RX buffer overflow */
#define	IOC3_ENET_ISR_RX_MEMORY		0x00000010	/* RX memory acc. err */
#define	IOC3_ENET_ISR_RX_PARITY		0x00000020	/* RX parity error */
#define	IOC3_ENET_ISR_TX_EMPTY		0x00010000	/* TX q empty */
#define	IOC3_ENET_ISR_TX_RETRY		0x00020000
#define	IOC3_ENET_ISR_TX_EXDEF		0x00040000
#define	IOC3_ENET_ISR_TX_LCOLL		0x00080000	/* TX Late Collision */
#define	IOC3_ENET_ISR_TX_GIANT		0x00100000
#define	IOC3_ENET_ISR_TX_BUF_UFLOW	0x00200000	/* TX buf underflow */
#define	IOC3_ENET_ISR_TX_EXPLICIT	0x00400000	/* TX int requested */
#define	IOC3_ENET_ISR_TX_COLL_WRAP	0x00800000
#define	IOC3_ENET_ISR_TX_DEFER_WRAP	0x01000000
#define	IOC3_ENET_ISR_TX_MEMORY		0x02000000	/* TX memory acc. err */
#define	IOC3_ENET_ISR_TX_PARITY		0x04000000	/* TX parity error */

#define	IOC3_ENET_ISR_TX_ALL		0x07ff0000	/* all TX bits */

/* bits in ENET_RCSR */
#define	IOC3_ENET_RCSR_THRESHOLD_MASK	0x000001ff

/* bits in ENET_RPIR */
#define	IOC3_ENET_PIR_SET		0x80000000	/* set new value */

/* bits in ENET_TCSR */
#define	IOC3_ENET_TCSR_IPGT_MASK	0x0000007f	/* interpacket gap */
#define	IOC3_ENET_TCSR_IPGT_SHIFT	0
#define	IOC3_ENET_TCSR_IPGR1_MASK	0x00007f00
#define	IOC3_ENET_TCSR_IPGR1_SHIFT	8
#define	IOC3_ENET_TCSR_IPGR2_MASK	0x007f0000
#define	IOC3_ENET_TCSR_IPGR2_SHIFT	16
#define	IOC3_ENET_TCSR_NOTXCLOCK	0x80000000
#define	IOC3_ENET_TCSR_FULL_DUPLEX \
	((17 << IOC3_ENET_TCSR_IPGR2_SHIFT) | \
	 (11 << IOC3_ENET_TCSR_IPGR1_SHIFT) | \
	 (21 << IOC3_ENET_TCSR_IPGT_SHIFT))
#define	IOC3_ENET_TCSR_HALF_DUPLEX \
	((21 << IOC3_ENET_TCSR_IPGR2_SHIFT) | \
	 (21 << IOC3_ENET_TCSR_IPGR1_SHIFT) | \
	 (21 << IOC3_ENET_TCSR_IPGT_SHIFT))

/* bits in ENET_TCDC */
#define	IOC3_ENET_TCDC_COLLISION_MASK	0x0000ffff
#define	IOC3_ENET_TCDC_DEFER_MASK	0xffff0000
#define	IOC3_ENET_TCDC_DEFER_SHIFT	16

/* bits in ENET_TCIR */
#define	IOC3_ENET_TCIR_IDLE		0x80000000

/* bits in ENET_MICR */
#define	IOC3_ENET_MICR_REG_MASK		0x0000001f
#define	IOC3_ENET_MICR_PHY_MASK		0x000003e0
#define	IOC3_ENET_MICR_PHY_SHIFT	5
#define	IOC3_ENET_MICR_READ		0x00000400
#define	IOC3_ENET_MICR_WRITE		0x00000000
#define	IOC3_ENET_MICR_BUSY		0x00000800

#define	IOC3_ENET_MIDR_MASK		0x0000ffff

/*
 * Offsets and sizes for subdevices handled by mi drivers.
 */

#define	IOC3_UARTA_BASE		0x00020178
#define	IOC3_UARTB_BASE		0x00020170

/*
 * Ethernet SSRAM.
 */

#define	IOC3_SSRAM_BASE		0x00040000
#define	IOC3_SSRAM_SMALL_SIZE	0x00020000
#define	IOC3_SSRAM_LARGE_SIZE	0x00040000

#define	IOC3_SSRAM_PARITY_BIT		0x00010000
#define	IOC3_SSRAM_DATA_MASK		0x0000ffff

/*
 * Offsets of devices connected to the four IOC3 `bytebus'.
 */

#define	IOC3_BYTEBUS_0		0x00080000
#define	IOC3_BYTEBUS_1		0x000a0000
#define	IOC3_BYTEBUS_2		0x000c0000
#define	IOC3_BYTEBUS_3		0x000e0000
@


1.10
log
@Add glue to attach iockbc(4) to iof(4) as well. Tested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.9 2009/11/11 15:54:25 miod Exp $	*/
d104 1
@


1.9
log
@Perform a bit more kbc initialization, instead of relying upon the prom to
do this for us; PS/2 ports on CADduo boards attach keyboard and mouse now.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.8 2009/11/10 15:50:10 jsing Exp $	*/
a109 30

/* bits in KBC_CTRL_STATUS */
#define	IOC3_KBC_STATUS_KBD_WRITE_PENDING	0x00000001
#define	IOC3_KBC_STATUS_AUX_WRITE_PENDING	0x00000002
#define	IOC3_KBC_STATUS_KBD_DATA		0x00000010
#define	IOC3_KBC_STATUS_KBD_CLOCK		0x00000020
#define	IOC3_KBC_CTRL_KBD_PULL_DATA_LOW		0x00000040
#define	IOC3_KBC_CTRL_KBD_PULL_CLOCK_LOW	0x00000080
#define	IOC3_KBC_STATUS_AUX_DATA		0x00000100
#define	IOC3_KBC_STATUS_AUX_CLOCK		0x00000200
#define	IOC3_KBC_CTRL_AUX_PULL_DATA_LOW		0x00000400
#define	IOC3_KBC_CTRL_AUX_PULL_CLOCK_LOW	0x00000800
#define	IOC3_KBC_CTRL_KBD_CLAMP_1		0x00100000
#define	IOC3_KBC_CTRL_AUX_CLAMP_1		0x00200000
#define	IOC3_KBC_CTRL_KBD_CLAMP_3		0x00400000
#define	IOC3_KBC_CTRL_AUX_CLAMP_3		0x00800000

/* bits in KBC_*_RX */
#define	IOC3_KBC_DATA_0_VALID		0x80000000
#define	IOC3_KBC_DATA_1_VALID		0x40000000
#define	IOC3_KBC_DATA_2_VALID		0x20000000
#define	IOC3_KBC_DATA_VALID		(IOC3_KBC_DATA_0_VALID | \
					 IOC3_KBC_DATA_1_VALID | \
					 IOC3_KBC_DATA_2_VALID)
#define	IOC3_KBC_DATA_0_MASK		0x00ff0000
#define	IOC3_KBC_DATA_0_SHIFT			16
#define	IOC3_KBC_DATA_1_MASK		0x0000ff00
#define	IOC3_KBC_DATA_1_SHIFT			8
#define	IOC3_KBC_DATA_2_MASK		0x000000ff
#define	IOC3_KBC_DATA_2_SHIFT			0
@


1.8
log
@Add iockbc(4), a driver for the PS/2 keyboard and mouse interface found on
ioc(4) devices. Joint work with miod@@.

Committed from the glass console on an SGI Fuel.
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.7 2009/11/08 13:11:19 miod Exp $	*/
d114 12
@


1.7
log
@Figure out the size of the SSRAM used as internal memory by the chip on
attach, print it, and decide how many RX descriptors to use accordingly.
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.6 2009/11/03 18:48:39 miod Exp $	*/
d46 7
d110 18
@


1.6
log
@A few cleanups and also reflect duplex state in mcr in addition to tcsr.
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.5 2009/11/01 19:17:56 miod Exp $	*/
d187 11
@


1.5
log
@Driver for the sgi IOC3 onboard Ethernet interface. Tested on Octane only so
far, and needs help to figure out its Ethernet address on IP35 systems.

Heavily derived from mec(4) written by Izumi Tsutsui and Christopher Sekiya,
although it required many changes to fit the IOC3 chip.
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.4 2009/10/14 20:21:14 miod Exp $	*/
d110 2
d167 3
@


1.4
log
@On IP30 and IP35 systems, try harder to figure out exactly what model we are
running on, and report this both as the hw.product sysctl and in dmesg.
Fuel and Origin 350 are no longer reported as being Origin 300 systems!
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.3 2009/08/18 19:32:47 miod Exp $	*/
d63 27
d104 69
a172 2
#define	IOC3_LPT_BASE		0x00000080
#define	IOC3_LPT_SIZE		0x0000001c
d174 1
a174 2
#define	IOC3_KBC_BASE		0x0000009c
#define	IOC3_KBC_SIZE		0x00000014
d176 3
a178 4
#define	IOC3_EF_BASE		0x000000f0
#define	IOC3_EF_SIZE		0x00000060

#define	IOC3_RTC_BASE		0x00020168
d182 4
@


1.3
log
@Replace a few hardcoded numbers from the interrupt register with proper
commented symbolic constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.2 2009/04/12 17:56:58 miod Exp $	*/
d32 30
a61 5
#define IOC3_SIO_IR		0x0000001c
#define IOC3_SIO_IES		0x00000020
#define IOC3_SIO_IEC		0x00000024
#define IOC3_SIO_CR		0x00000028
#define	IOC3_MCR		0x00000030
d68 8
@


1.2
log
@Interrupt support for IOC3 and its subdevices (currently limited to the
SuperIO part, the Ethernet part needs a whole driver); kernel now boot
single user (or bsd.rd). Joint work with jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iocreg.h,v 1.1 2008/04/07 22:53:00 miod Exp $	*/
d20 1
a20 1
 * Register definitions for SGI IOC ASIC.
d27 2
a28 2
#define IOCDEV_PARPORT		2
#define IOCDEV_KEYBOARD		3
d38 12
d51 1
a51 1
#define	IOC3_EF_SIZE		0x60
@


1.1
log
@Preliminary IOC3 multi-function chip driver, from jsing@@ and I. Currently
missing a driver for the ethernet part, and interrupt handling is not written
yet.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
a23 1
#define	IOC3_MCR		0x00030
d25 25
a49 9
#define	IOC3_RTC_BASE		0x20168

#define	IOC3_UARTA_BASE		0x20178
#define	IOC3_UARTB_BASE		0x20170

#define	IOC3_BYTEBUS_0		0x80000
#define	IOC3_BYTEBUS_1		0xa0000
#define	IOC3_BYTEBUS_2		0xc0000
#define	IOC3_BYTEBUS_3		0xe0000
@

