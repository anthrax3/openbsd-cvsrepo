head	1.84;
access;
symbols
	OPENBSD_6_1:1.78.0.4
	OPENBSD_6_1_BASE:1.78
	OPENBSD_6_0:1.70.0.2
	OPENBSD_6_0_BASE:1.70
	OPENBSD_5_9:1.69.0.4
	OPENBSD_5_9_BASE:1.69
	OPENBSD_5_8:1.69.0.6
	OPENBSD_5_8_BASE:1.69
	OPENBSD_5_7:1.69.0.2
	OPENBSD_5_7_BASE:1.69
	OPENBSD_5_6:1.65.0.4
	OPENBSD_5_6_BASE:1.65
	OPENBSD_5_5:1.62.0.4
	OPENBSD_5_5_BASE:1.62
	OPENBSD_5_4:1.61.0.2
	OPENBSD_5_4_BASE:1.61
	OPENBSD_5_3:1.58.0.2
	OPENBSD_5_3_BASE:1.58
	OPENBSD_5_2:1.56.0.2
	OPENBSD_5_2_BASE:1.56
	OPENBSD_5_1_BASE:1.55
	OPENBSD_5_1:1.55.0.2
	OPENBSD_5_0:1.54.0.2
	OPENBSD_5_0_BASE:1.54
	OPENBSD_4_9:1.51.0.2
	OPENBSD_4_9_BASE:1.51
	OPENBSD_4_8:1.48.0.2
	OPENBSD_4_8_BASE:1.48
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.21.0.2
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.4
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.2
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5;
locks; strict;
comment	@# @;


1.84
date	2017.06.13.16.40.01;	author deraadt;	state Exp;
branches;
next	1.83;
commitid	IBnCjqwIAePNl11k;

1.83
date	2017.06.11.22.51.21;	author deraadt;	state Exp;
branches;
next	1.82;
commitid	aJQfgtCEBEOL2P4T;

1.82
date	2017.06.11.20.50.33;	author bluhm;	state Exp;
branches;
next	1.81;
commitid	UEZLHpDQ2LYKTb3D;

1.81
date	2017.06.08.11.47.24;	author visa;	state Exp;
branches;
next	1.80;
commitid	QkICkbt6ZtasPvLZ;

1.80
date	2017.06.05.12.43.59;	author deraadt;	state Exp;
branches;
next	1.79;
commitid	wfRVAv0JN8rqN4EA;

1.79
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.78;
commitid	SGp9KIY6OZAZGoKD;

1.78
date	2017.03.18.17.31.31;	author visa;	state Exp;
branches;
next	1.77;
commitid	vFbZyjXkw28QhPsX;

1.77
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.76;
commitid	yUJbDchhkVm6F1HA;

1.76
date	2016.11.15.09.08.38;	author natano;	state Exp;
branches;
next	1.75;
commitid	uQeojuKIzgIWOEnv;

1.75
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.74;
commitid	eR4vLZnymgQjVxbj;

1.74
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.73;
commitid	84F8eQ949AbxN83e;

1.73
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.72;
commitid	TtDw6IYffbT8oPEE;

1.72
date	2016.10.14.18.43.02;	author deraadt;	state Exp;
branches;
next	1.71;
commitid	dUZQxi6w3YqAb6KQ;

1.71
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.70;
commitid	N8Z5nlTJHj3pmauV;

1.70
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.69;
commitid	Vbd8R29nZBKG6KtM;

1.69
date	2015.01.13.01.12.50;	author deraadt;	state Exp;
branches;
next	1.68;
commitid	xEYSgcMiEU7N21VE;

1.68
date	2015.01.11.19.25.14;	author tedu;	state Exp;
branches;
next	1.67;
commitid	Jqptj5xcqx8IMSNU;

1.67
date	2014.11.18.01.17.37;	author deraadt;	state Exp;
branches;
next	1.66;
commitid	Qj1gzxwenHvm4gTb;

1.66
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.65;
commitid	iaz4yUwbbR9oynrV;

1.65
date	2014.07.08.16.01.33;	author miod;	state Exp;
branches;
next	1.64;
commitid	GtDAGdrLtZPDbiHU;

1.64
date	2014.06.27.17.28.10;	author miod;	state Exp;
branches;
next	1.63;
commitid	4oLMUaAeehjjGoUk;

1.63
date	2014.05.19.21.18.42;	author miod;	state Exp;
branches;
next	1.62;

1.62
date	2013.10.15.19.23.29;	author guenther;	state Exp;
branches;
next	1.61;

1.61
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.60;

1.60
date	2013.04.01.19.12.14;	author miod;	state Exp;
branches;
next	1.59;

1.59
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.58;

1.58
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.57;

1.57
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.56;

1.56
date	2012.05.06.13.32.42;	author miod;	state Exp;
branches;
next	1.55;

1.55
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.54;

1.54
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.53;

1.53
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.52;

1.52
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.51;

1.51
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.12.02.04.35.03;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2010.06.01.23.49.23;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.46;

1.46
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2010.05.25.02.35.03;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2010.05.24.17.40.33;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.37;

1.37
date	2010.04.27.16.54.54;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2010.04.27.16.50.15;	author jsg;	state Exp;
branches;
next	1.35;

1.35
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2010.04.27.04.31.47;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2010.04.27.03.37.38;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.04.26.22.11.38;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.26.20.50.17;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.26.18.58.31;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.01.03.14.17.27;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2009.08.09.21.33.39;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2009.08.09.14.07.37;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.15.17.56.47;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2008.04.12.21.04.17;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.25.18.25.29;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.21.20.07.24;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.23.20.16.28;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.27.05.58.12;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.01.21.46.28;	author pascoe;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.27.18.27.04;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.16.20.42.02;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.08.07.11.04;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.20.10.43.17;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.15.16.59.30;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.22.11.39;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.23.14.26.24;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.19.08.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.08.11.56.13;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.21.12.18;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.84
log
@newbsd: target which re-links a kernel.  We cannot use the bsd: target
since it has source dependencies, and relinking doesn't have any.  Also
the bsd: target is created by config(8)...
worked on with rpe.
@
text
@#	$OpenBSD: Makefile.sgi,v 1.83 2017/06/11 22:51:21 deraadt Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip
AS?=	as
CC?=	cc
LD?=	ld ${ENDIAN}

AS+=${ENDIAN}
CC+=${ENDIAN}
LD+=${ENDIAN}

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mno-abicalls ${ABI} -msoft-float -G 0
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
.if ${IDENT:M-DSMALL_KERNEL}
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-e start -T ld.script -Ttext=${LINK_ADDRESS} --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ld.script
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

newbsd:
	${SYSTEM_LD_HEAD}
	${SYSTEM_LD} swapgeneric.o
	${SYSTEM_LD_TAIL}
	mv -f newbsd bsd

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

ld.script: ${_machdir}/conf/ld.script
	cp ${_machdir}/conf/ld.script $@@

vers.o: ${SYSTEM_DEP:Ngap.o} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

gap.S:	${SYSTEM_SWAP_DEP} Makefile $S/conf/makegap.sh
	umask 007; sh $S/conf/makegap.sh 0xef > gap.S

gap.o:	gap.S
	umask 007; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
	    gap.S lorder param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

symbols.sort: ${_machdir}/${_mach}/symbols.raw
	grep -v '^#' ${_machdir}/${_mach}/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore0.o: ${_machdir}/${_mach}/locore0.S assym.h
context.o cp0access.o exception.o exception_tfp.o: assym.h
lcore_access.o lcore_ddb.o lcore_float.o locore.o: assym.h
tlb_tfp.o tlbhandler.o: assym.h
cache_tfp_subr.o ip30_nmi.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	umask 077; cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.83
log
@make vers.o not depend on gap.o using a trick, because it is piece of
fiction participating only in the linkphase.
tricks from rpe and espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.82 2017/06/11 20:50:33 bluhm Exp $
d100 6
@


1.82
log
@Use umask 077 instead of cp -p when installing the kernel as root.
Otherwise owner of /bsd could be the build user with permissions
inherited from the compile directory.
OK deraadt@@ tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.81 2017/06/08 11:47:24 visa Exp $
d129 1
a129 1
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.81
log
@Split early startup code out of locore.S into locore0.S.  Adjust link
run so that this locore0.o is always at the start of the executable.
But randomize the link order of all other .o files in the kernel, so
that their exec/rodata/data/bss segments land all over the place.

Late during kernel boot, smash the startup code with traps so that
it does not point to the other randomly placed code.  It has be smashed,
because sgi runs in the kseg0 or xkphys space.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.80 2017/06/05 12:43:59 deraadt Exp $
d170 1
a170 1
	cp -p bsd /nbsd
@


1.80
log
@The arm* architectures edit the ld.script, creating a copy in the compile
directories.  Copy it in the same way on other architectures, for the same
effect.  Something upcoming will want that file there anyways.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.79 2017/06/03 22:21:33 deraadt Exp $
d39 1
d43 3
d79 2
a80 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d85 2
a86 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d133 6
d140 2
a141 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d157 1
a157 1
locore.o: ${_machdir}/${_mach}/locore.S assym.h
d159 2
a160 1
lcore_access.o lcore_ddb.o lcore_float.o tlb_tfp.o tlbhandler.o: assym.h
@


1.79
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.78 2017/03/18 17:31:31 visa Exp $
d47 1
a47 2
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-e start -T ${LDSCRIPT} -Ttext=${LINK_ADDRESS} --warn-common -nopie
d77 1
a77 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
d120 3
@


1.78
log
@Build mips64 kernels with -ffreestanding.

OK kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.77 2016/11/29 09:08:34 mpi Exp $
d81 1
d83 1
a83 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d87 1
a87 1
SYSTEM_LD_TAIL+=; \
d155 1
a155 1
	cp bsd /nbsd
@


1.77
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.76 2016/11/15 09:08:38 natano Exp $
d34 1
a34 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d38 1
a38 3
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.76
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.75 2016/10/27 20:44:20 natano Exp $
d45 1
a85 1
DEBUG?=
@


1.75
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.74 2016/10/24 18:26:17 deraadt Exp $
d127 2
a128 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
a132 5
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

d137 1
a137 7
obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.74
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.73 2016/10/15 13:45:08 deraadt Exp $
d128 1
a128 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.73
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.72 2016/10/14 18:43:02 deraadt Exp $
d132 1
a132 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.72
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.71 2016/09/24 19:13:03 kettenis Exp $
d129 4
a132 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.71
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.70 2016/04/29 12:44:52 mpi Exp $
d31 1
a31 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d139 2
@


1.70
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.69 2015/01/13 01:12:50 deraadt Exp $
d34 1
a34 1
		-Wno-main -Wno-uninitialized \
@


1.69
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.68 2015/01/11 19:25:14 tedu Exp $
d87 1
a87 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d93 1
a93 1
LINKFLAGS+=	-x
@


1.68
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.67 2014/11/18 01:17:37 deraadt Exp $
d163 1
a163 2
	rm -f /obsd
	ln /bsd /obsd
@


1.67
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.66 2014/10/04 18:10:14 brad Exp $
d33 1
a33 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.66
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.65 2014/07/08 16:01:33 miod Exp $
d48 2
a49 2
LINKFLAGS=	-e start -T ${_machdir}/conf/ld.script -Ttext=${LINK_ADDRESS} \
		--warn-common -nopie
d79 1
a79 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.65
log
@Typo in previous assym.h dependency changes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.64 2014/06/27 17:28:10 miod Exp $
d35 1
a35 1
		-Wstack-larger-than-2047
@


1.64
log
@Update list of .S depencies over assym.h.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.63 2014/05/19 21:18:42 miod Exp $
d153 1
a153 1
context.o cp0access.o exception.o exception_tfp: assym.h
@


1.63
log
@Format string fixes and removal of -Wno-format for sgi. Based upon an
initial diff from jasper@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.62 2013/10/15 19:23:29 guenther Exp $
d153 3
a155 2
cache_r10k.o cache_r5k.o context.o cp0access.o exception.o: assym.h
ip30_nmi.o lcore_access.o lcore_ddb.o lcore_float.o tlbhandler.o: assym.h
@


1.62
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.61 2013/06/23 20:33:51 miod Exp $
d34 1
a34 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.61
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.60 2013/04/01 19:12:14 miod Exp $
d147 1
a147 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d149 1
a149 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.60
log
@Build mips kernels with -G 0, to disable use of so-called `small' data and
bss sections. The current kernel linker script is not gp-friendly enough for
that; and while gas 2.15 was not attempting to output gp-relative relocations
for variables which might have ended up in .sdata or .sbss, gas 2.17 will,
and the kernel will fail to link.

To be improved eventually with a better kernel ld script putting the
gp-addressable sections close enough to gp... and making sure kernel gp is
reloaded in all the userland->kernel code paths which might need gp in the
kernel.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.59 2013/03/30 07:25:20 tedu Exp $
d47 1
a47 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CMACHFLAGS}
@


1.59
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.58 2012/08/28 21:03:32 pascal Exp $
d37 1
a37 1
CMACHFLAGS=	-mno-abicalls ${ABI} -msoft-float
@


1.58
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.57 2012/08/22 16:58:26 pascal Exp $
d31 1
a31 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.57
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.56 2012/05/06 13:32:42 miod Exp $
d48 2
a49 1
LINKFLAGS=	-e start -T ${_machdir}/conf/ld.script -Ttext=${LINK_ADDRESS} --warn-common
@


1.56
log
@Update the depencies of the .S files on assym.h; allows IP30 kernels to be built
with -j2.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.55 2011/11/08 18:41:34 matthieu Exp $
d40 1
a40 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.55
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.54 2011/07/07 22:28:18 guenther Exp $
d152 2
a153 2
cache_r10k.o context.o cp0access.o exception.o fp.o: assym.h
lcore_access.o lcore_float.o tlbhandler.o lcore_ddb.o: assym.h
@


1.54
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.53 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.53
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.52 2011/04/15 02:41:28 guenther Exp $
d173 5
a177 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.52
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.51 2010/12/30 18:49:31 deraadt Exp $
d129 1
a129 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.51
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.50 2010/12/02 20:57:08 deraadt Exp $
d33 1
a33 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d78 2
a79 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d99 5
d107 2
a108 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d141 3
a146 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d148 1
a148 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d166 12
@


1.50
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.49 2010/12/02 04:35:03 deraadt Exp $
d101 2
a102 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.49
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.48 2010/06/01 23:49:23 deraadt Exp $
d77 2
a78 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d80 2
a81 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.48
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.47 2010/05/28 14:27:08 guenther Exp $
d77 1
a77 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d80 2
a81 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.47
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.46 2010/05/25 17:27:55 deraadt Exp $
d49 1
a49 2
LINKFLAGS=	-e start -T ${_machdir}/conf/ld.script -Ttext=${LINK_ADDRESS}
STRIPFLAGS=	-g -x
d87 1
@


1.46
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.45 2010/05/25 15:05:01 deraadt Exp $
d101 1
a101 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.45
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.44 2010/05/25 02:35:03 deraadt Exp $
a28 2
_mach?=		sgi
_arch?=		mips64
@


1.44
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.43 2010/05/24 23:19:22 deraadt Exp $
d160 2
a161 1
	${NORMAL_S}
@


1.43
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.42 2010/05/24 17:49:37 deraadt Exp $
a140 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d142 1
a142 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.42
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.41 2010/05/24 17:40:33 deraadt Exp $
d38 1
a38 1
		-Wstack-larger-than-2047 -Wvariable-decl
d52 1
a52 1
STRIPFLAGS=	-g -X -x
a99 16
clean::
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

symbols.sort: ${_machdir}/${_mach}/symbols.raw
	grep -v '^#' ${_machdir}/${_mach}/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

locore.o: ${_machdir}/${_mach}/locore.S assym.h
	${NORMAL_S}

a106 11
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

tags:
	@@echo "see $S/kern/Makefile for tags"

d124 18
a141 2
SRCS=   ${_machdir}/${_mach}/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
d144 1
a144 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.S
d159 3
@


1.41
log
@CPP and TOUCH are not used
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.40 2010/05/24 14:59:16 deraadt Exp $
d157 1
d159 1
@


1.40
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.39 2010/04/28 15:31:33 deraadt Exp $
a17 1
CPP?=	cpp
a18 1
TOUCH?=	touch
d20 1
a20 1
CPP+=${ENDIAN}
a21 1
AS+=${ENDIAN}
@


1.39
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.38 2010/04/27 17:25:19 drahn Exp $
d13 3
a17 2
MKDEP?=	mkdep
SIZE?=	size
a19 1
STRIP?=	strip
d38 3
a40 3
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${_mach}__
CDIAGFLAGS=	-Werror -Wall -Wmissing-prototypes -Wstrict-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main \
d42 5
a46 3
CMACHFLAGS+=	-mno-abicalls ${ABI} -msoft-float \
		-fno-builtin-printf -fno-builtin-log -fno-builtin-log2 \
		-fno-builtin-malloc
d50 1
d52 3
a54 2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -mno-abicalls ${ABI} -D_LOCORE
d63 5
a69 1
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
a70 1
NORMAL_S_C=	${AS}  ${COPTS} ${PARAM} $< -o $@@
d85 3
a87 9
SYSTEM_LD_HEAD=	rm -f $@@
SYSTEM_LD=	@@if [ X${DEBUG} = X-g ]; \
		then strip=-X; \
		else strip=-x; \
		fi; \
		echo ${LD} $$strip -o $@@ -e start -T ${_machdir}/conf/ld.script \
			-Ttext=${LINK_ADDRESS} '$${SYSTEM_OBJ}' vers.o; \
		${LD} $$strip -o $@@ -e start -T ${_machdir}/conf/ld.script \
			-Ttext=${LINK_ADDRESS} ${SYSTEM_OBJ} vers.o
d92 1
d97 2
d104 1
a104 1
	rm -f eddep bsd bsd.gdb tags *.[io] [a-z]*.s \
d108 3
a110 2
	@@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} ${PARAM} -UKGDB \
	    ${CFILES} ioconf.c param.c
d142 1
a142 1
	${NORMAL_C_C}
@


1.38
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.37 2010/04/27 16:54:54 deraadt Exp $
d103 1
a103 1
lint: /tmp param.c
d126 2
a127 2
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink
@


1.37
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.36 2010/04/27 16:50:15 jsg Exp $
d37 1
a37 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.36
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.35 2010/04/27 06:46:26 deraadt Exp $
d87 1
a87 3
#
SYSTEM_LD_TAIL=	chmod 755 $@@; \
		${SIZE} $@@
@


1.35
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.34 2010/04/27 05:07:29 deraadt Exp $
d43 2
a44 1
		-fno-builtin-printf -fno-builtin-log
@


1.34
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.33 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 11
# Makefile for OpenBSD
#
# This makefile is constructed from a machine description:
#	config ``machineid''
# Most changes should be made in the machine description
#	/sys/arch/sgi/conf/``machineid''
# after which you should do
#	config ``machineid''
# Machine generic makefile changes should be made in
#	/sys/arch/sgi/conf/Makefile.``machinetype''
# after which config should be rerun for all machines of that type.
@


1.33
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.32 2010/04/27 04:31:47 deraadt Exp $
a16 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.32
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.31 2010/04/27 03:37:38 deraadt Exp $
d121 2
a122 2
symbols.sort: ${_machdir}/sgi/symbols.raw
	grep -v '^#' ${_machdir}/sgi/symbols.raw \
d125 1
a125 1
locore.o: ${_machdir}/sgi/locore.S assym.h
d163 1
a163 1
SRCS=   ${_machdir}/sgi/locore.S \
d167 1
a167 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/sgi/locore.S
@


1.31
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.30 2010/04/26 22:21:15 deraadt Exp $
d171 1
a171 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.30
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.29 2010/04/26 22:11:38 deraadt Exp $
a126 11

# the following are necessary because the files depend on the types of
# cpu's included in the system configuration
clock.o machdep.o autoconf.o conf.o locore.o: Makefile

# depend on network configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if_tun.o if_loop.o if_ethersubr.o: Makefile
if_arp.o if_ether.o: Makefile
ip_input.o ip_output.o in_pcb.o in_proto.o: Makefile
tcp_subr.o tcp_timer.o tcp_output.o: Makefile
@


1.29
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.28 2010/04/26 20:50:17 deraadt Exp $
a45 1
_machdir?=	$S/arch/sgi
d47 2
a48 1
_archdir?=	$S/arch/mips64
@


1.28
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.27 2010/04/26 18:58:31 deraadt Exp $
d139 5
a143 5
assym.h: $S/kern/genassym.sh \
	 ${_archdir}/mips64/genassym.cf ${_machdir}/sgi/genassym.cf Makefile
	cat ${_archdir}/mips64/genassym.cf ${_machdir}/sgi/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} \
	    > assym.h.tmp && \
d181 3
a183 2
	cat ${_archdir}/mips64/genassym.cf ${_machdir}/sgi/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
@


1.27
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.26 2010/01/03 14:17:27 miod Exp $
d44 5
a48 2
SGI=$S/arch/sgi
MIPS64=	$S/arch/mips64
d51 1
a51 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__sgi__
d95 1
a95 1
		echo ${LD} $$strip -o $@@ -e start -T ${SGI}/conf/ld.script \
d97 1
a97 1
		${LD} $$strip -o $@@ -e start -T ${SGI}/conf/ld.script \
d121 2
a122 2
symbols.sort: ${SGI}/sgi/symbols.raw
	grep -v '^#' ${SGI}/sgi/symbols.raw \
d125 1
a125 1
locore.o: ${SGI}/sgi/locore.S assym.h
d140 2
a141 2
	 ${MIPS64}/mips64/genassym.cf ${SGI}/sgi/genassym.cf Makefile
	cat ${MIPS64}/mips64/genassym.cf ${SGI}/sgi/genassym.cf | \
d174 1
a174 1
SRCS=   ${SGI}/sgi/locore.S \
d178 1
a178 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${SGI}/sgi/locore.S
d181 1
a181 1
	cat ${MIPS64}/mips64/genassym.cf ${SGI}/sgi/genassym.cf | \
@


1.26
log
@Use a split genassym.cf scheme on mips64 ports. Don't forget to rerun config(8).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.25 2009/10/19 19:46:56 guenther Exp $
d10 1
a10 1
#	 config ``machineid''
d21 2
a22 3

# DEBUG is set to -g if debugging
# PROF is set to -pg if profiling
@


1.25
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.24 2009/08/09 23:04:49 miod Exp $
d137 5
a141 3
assym.h: $S/kern/genassym.sh ${SGI}/sgi/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${SGI}/sgi/genassym.cf > assym.h.tmp && \
d179 2
a180 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${SGI}/sgi/genassym.cf
@


1.24
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.23 2009/08/09 21:33:39 miod Exp $
a110 4
newvers:
	sh $S/conf/newvers.sh
	${CC} $(CFLAGS) -c vers.c

a152 3
ioconf.o: ioconf.c
	${NORMAL_C}

d163 4
a166 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.23
log
@No need to clean genassym{.,o} during `make clean', genassym.sh does this
for us.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.22 2009/08/09 14:07:37 jsing Exp $
d63 6
d117 1
a117 1
	    [Ee]rrs linterrs makelinks assym.h
d177 1
a177 1
.depend: ${SRCS} assym.h param.c
d186 5
@


1.22
log
@Compile OpenBSD/sgi without -traditional-cpp. From jsg@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.20 2008/04/12 21:04:17 miod Exp $
d110 2
a111 2
	rm -f eddep bsd bsd.gdb bsd.ecoff tags *.o locore.i [a-z]*.s \
	    Errs errs linterrs makelinks
@


1.21
log
@Include .S files in make depend.
@
text
@d60 1
a60 2
AFLAGS=		-x assembler-with-cpp -traditional-cpp \
		-mno-abicalls ${ABI} -D_LOCORE
@


1.20
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.19 2007/11/30 07:52:06 miod Exp $
d169 2
d175 6
a180 1
#	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
@


1.19
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.18 2007/11/25 18:25:29 deraadt Exp $
d52 1
a52 1
		-Wstack-larger-than-2047
@


1.18
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.17 2007/11/25 11:23:33 deraadt Exp $
d64 1
@


1.17
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.16 2007/07/30 16:23:33 thib Exp $
a63 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d80 1
a80 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d160 3
@


1.16
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.15 2007/04/21 20:07:24 deraadt Exp $
a71 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d88 1
a88 4

SYSTEM_OBJ=	locore.o ${OBJS} param.o ioconf.o \
		${LIBKERN} ${LIBCOMPAT}
#
@


1.15
log
@do not ignore linker failures; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.14 2006/09/23 20:16:28 deraadt Exp $
d48 1
a48 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
@


1.14
log
@delete blank line; Paul Stoeber
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.13 2006/07/27 05:58:12 miod Exp $
d102 1
a102 1
SYSTEM_LD=	-@@if [ X${DEBUG} = X-g ]; \
@


1.13
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.12 2006/06/01 21:46:28 pascoe Exp $
a202 1

@


1.12
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.11 2004/11/27 18:27:04 matthieu Exp $
d51 2
a52 1
		-Wno-uninitialized -Wno-format -Wno-main
@


1.11
log
@Fix for building in another directory using config -s. ok deraadt@@, miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.10 2004/11/16 20:42:02 kettenis Exp $
d116 3
a118 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.10
log
@Strip kernels compiled with DEBUG=-g leaving an unstripped kernel as bsd.gdb.
ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.9 2004/10/20 12:49:15 pefo Exp $
d105 1
a105 1
		echo ${LD} $$strip -o $@@ -e start -T ../../conf/ld.script \
d107 1
a107 1
		${LD} $$strip -o $@@ -e start -T ../../conf/ld.script \
@


1.9
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.8 2004/10/08 07:11:04 grange Exp $
d61 1
d112 7
@


1.8
log
@Use ${MKDEP} instead of mkdep.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.7 2004/09/20 10:43:17 miod Exp $
d105 1
a105 1
			'$${SYSTEM_OBJ}' vers.o; \
d107 1
a107 1
			${SYSTEM_OBJ} vers.o
@


1.7
log
@Homogeneize with other platforms' Makefiles; mainly adds the ability to
compile a kernel with propolice disabled, and only disable the log() and
printf() gcc builtins.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.6 2004/09/15 16:59:30 matthieu Exp $
d176 3
a178 3
	mkdep ${AFLAGS} ${CPPFLAGS} ${SGI}/sgi/locore.S
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
#	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
@


1.6
log
@Add an install: target. Ok miod@@, pefo@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.5 2004/09/09 22:11:39 pefo Exp $
d25 2
d30 1
d35 1
d48 1
a48 1
INCLUDES=	-I. -I$S/arch -I$S
a49 1

d52 9
a60 4

CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} -mno-abicalls ${ABI} \
		${COPTS} -msoft-float -fno-builtin
AFLAGS=		-x assembler-with-cpp -traditional-cpp -mno-abicalls ${ABI} -D_LOCORE
a77 8
# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.

USRLAND_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
USRLAND_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

a79 4

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

d110 1
a110 1
		size $@@
d130 2
a131 3
locore.o: ${SGI}/sgi/locore.S ${MIPS64}/include/asm.h \
	${MIPS64}/include/cpu.h ${MIPS64}/include/reg.h assym.h
	${NORMAL_S} ${ISALEV} ${SGI}/sgi/locore.S
d135 1
a135 1
clock.o machdep.o autoconf.o conf.o: Makefile
a142 1

@


1.5
log
@Kernel moves to 64 bit. A few more tweaks when binutils is updated.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.4 2004/08/23 14:26:24 pefo Exp $
d185 12
@


1.4
log
@clean
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.3 2004/08/10 19:08:17 deraadt Exp $
a31 1
ISALEV?=-mips3 -mlong64 -fno-builtin
d50 3
a52 3
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} -mno-abicalls ${ISALEV} \
		${COPTS}
AFLAGS=		-x assembler-with-cpp -traditional-cpp -mno-abicalls ${ISALEV} -D_LOCORE
@


1.3
log
@spacing
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.2 2004/08/08 11:56:13 pefo Exp $
d46 1
a46 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Dmips_cachealias -D__sgi__
@


1.2
log
@locore.s -> locore.S, thanks Patrik
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.1 2004/08/06 21:12:18 pefo Exp $
d125 1
a125 1
	    Errs errs linterrs makelinks 
@


1.1
log
@initial sgi import
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sgi,v 1.12 1998/03/04 07:00:59 niklas Exp $
d183 1
a183 1
	mkdep ${AFLAGS} ${CPPFLAGS} ${SGI}/sgi/locore.s
@

