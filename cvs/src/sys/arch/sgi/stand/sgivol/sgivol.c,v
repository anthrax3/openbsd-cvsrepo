head	1.23;
access;
symbols
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.10
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.6
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.8
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.18.0.6
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.4
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.2
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.8
	OPENBSD_5_0:1.17.0.6
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.4
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.15.0.4
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.2
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.23
date	2014.07.12.19.01.49;	author tedu;	state Exp;
branches;
next	1.22;
commitid	oZu656PKSRXbpZyM;

1.22
date	2014.07.12.18.44.42;	author tedu;	state Exp;
branches;
next	1.21;
commitid	uKVPYMN2MLxdZxzH;

1.21
date	2013.11.13.07.16.18;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2013.11.12.23.31.34;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2013.11.12.01.48.43;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.29.06.32.57;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.18.04.41.14;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.23.15.25.20;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.04.21.57.56;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.05.14.18.55.41;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.10.03.13.20;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.25.14.53.34;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.08.17.12.37;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.08.16.07.41;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.12;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.18.15.58.27;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.01.19.34.50;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.01.18.00.30;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.28.10.03.35;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.27.07.13.41;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.08.21.24.46;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.25.18.19.35;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.23.14.22.40;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.23
log
@revert bogus free changes in not kernel files. got a little trigger happy.
@
text
@/*	$OpenBSD: sgivol.c,v 1.22 2014/07/12 18:44:42 tedu Exp $	*/
/*	$NetBSD: sgivol.c,v 1.8 2003/11/08 04:59:00 sekiya Exp $	*/

/*-
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Michael Hitch and Hubert Feyrer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <unistd.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <util.h>

#include <sys/disklabel.h>
#include <sys/endian.h>
#include <sys/ioctl.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/dkio.h>

/*
 * Some IRIX man pages refer to the size being a multiple of whole cylinders.
 * Later ones only refer to the size being "typically" 2MB.  IRIX fx(1)
 * uses a default drive geometry if one can't be determined, suggesting
 * that "whole cylinder" multiples are not required.
 */

#define SGI_SIZE_VOLHDR	3135	/* Can be overridden via -h parameter. */

/*
 * Mode of operation can be one of:
 * -i	Initialise volume header.
 * -r	Read a file from volume header.
 * -w	Write a file to volume header.
 * -l	Link a file into the volume header.
 * -d	Delete a file from the volume header.
 * -p	Modify a partition.
 */

char	mode;
int	quiet;
int	fd;
int	partno, partfirst, partblocks, parttype;
struct	sgilabel *volhdr;
int32_t	checksum;

/* Volume header size in sectors. */
u_int32_t volhdr_size = SGI_SIZE_VOLHDR;

const char *vfilename = "";
const char *ufilename = "";

struct disklabel lbl;

unsigned char *buf;
unsigned int bufsize;

const char *sgi_types[] = {
	"Volume Header",
	"Repl Trks",
	"Repl Secs",
	"Raw",
	"BSD4.2",
	"SysV",
	"Volume",
	"EFS",
	"LVol",
	"RLVol",
	"XFS",
	"XSFLog",
	"XLV",
	"XVM"
};

void	display_vol(void);
void	init_volhdr(void);
void	read_file(void);
void	write_file(void);
void	link_file(void);
void	delete_file(void);
void	modify_partition(void);
void	write_volhdr(void);
int	allocate_space(int);
void	checksum_vol(void);
void	usage(void);

int
main(int argc, char *argv[])
{
	int ch, oflags;
	char fname[FILENAME_MAX];
	char *endp;

	quiet = 0;
	mode = ' ';

	while ((ch = getopt(argc, argv, "irwlpdqfh:")) != -1) {
		switch (ch) {
		case 'q':
			quiet = 1;
			break;
		case 'f':
			/* Legacy. Do nothing. */
			break;
		case 'i':
			mode = 'i';
			break;
		case 'h':
			volhdr_size = strtol(optarg, &endp, 0);
			if (*endp != '\0' || errno != 0)
				errx(1, "incorrect volume header size: %s",
				    optarg);
			break;
		case 'r':
			mode = 'r';
			break;
		case 'w':
			mode = 'w';
			break;
		case 'l':
			mode = 'l';
			break;
		case 'd':
			mode = 'd';
			break;
		case 'p':
			mode = 'p';
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (mode == 'r' || mode == 'w' || mode == 'l') {
		if (argc != 3)
			usage();
		vfilename = argv[0];
		ufilename = argv[1];
		argc -= 2;
		argv += 2;
	} else if (mode == 'd') {
		if (argc != 2)
			usage();
		vfilename = argv[0];
		argc--;
		argv++;
	} else if (mode == 'p') {
		if (argc != 5)
			usage();
		partno = strtol(argv[0], &endp, 0);
		if (*endp != '\0' || errno != 0 ||
		    partno < 0 || partno > SGI_SIZE_VOLDIR)
			errx(1, "invalid partition number: %s", argv[0]);
		partfirst = strtol(argv[1], &endp, 0);
		if (*endp != '\0' || errno != 0)
			errx(1, "invalid partition start: %s", argv[1]);
		partblocks = strtol(argv[2], &endp, 0);
		if (*endp != '\0' || errno != 0)
			errx(1, "invalid partition size: %s", argv[2]);
		parttype = strtol(argv[3], &endp, 0);
		if (*endp != '\0' || errno != 0)
			errx(1, "invalid partition type: %s", argv[3]);
		argc -= 4;
		argv += 4;
	}
	if (argc != 1)
		usage();

	oflags = ((mode == 'i' || mode == 'w' || mode == 'l' || mode == 'd'
	    || mode == 'p') ? O_RDWR : O_RDONLY);

	/* Open raw device. */
	if ((fd = open(argv[0], oflags)) < 0) {
		snprintf(fname, sizeof(fname), "/dev/r%s%c",
		    argv[0], 'a' + getrawpartition());
		if ((fd = open(fname, oflags)) < 0)
			err(1, "open %s", fname);
	}

	/* Get disklabel for device. */
	if (ioctl(fd, DIOCGDINFO, &lbl) == -1)
		err(1, "ioctl DIOCGDINFO");

	/* Allocate a buffer that matches the device sector size. */
	bufsize = lbl.d_secsize;
	if (bufsize < sizeof(struct sgilabel))
		errx(1, "sector size is smaller than SGI volume header!\n");
	if ((buf = malloc(bufsize)) == NULL)
		err(1, "failed to allocate buffer");

	/* Read SGI volume header. */
	if (read(fd, buf, bufsize) != bufsize)
		err(1, "read volhdr");
	volhdr = (struct sgilabel *)buf;

	if (mode == 'i') {
		init_volhdr();
		exit(0);
	}

	if (betoh32(volhdr->magic) != SGILABEL_MAGIC)
		errx(2, "no Volume Header found, magic=%x.  Use -i first.",
		    betoh32(volhdr->magic));

	if (mode == 'r')
		read_file();
	else if (mode == 'w')
		write_file();
	else if (mode == 'l')
		link_file();
	else if (mode == 'd')
		delete_file();
	else if (mode == 'p')
		modify_partition();
	else if (!quiet)
		display_vol();

	exit (0);
}

void
display_vol(void)
{
	int32_t *l;
	int i;

	l = (int32_t *)buf;
	checksum = 0;
	for (i = 0; i < sizeof(struct sgilabel) / sizeof(int32_t); ++i)
		checksum += betoh32(l[i]);

	printf("disklabel shows %llu sectors with %u bytes per sector\n",
	    DL_GETDSIZE(&lbl), lbl.d_secsize);
	printf("checksum: %08x%s\n", checksum, checksum == 0 ? "" : " *ERROR*");
	printf("root part: %d\n", betoh32(volhdr->root));
	printf("swap part: %d\n", betoh32(volhdr->swap));
	printf("bootfile: %s\n", volhdr->bootfile);

	/* volhdr->devparams[0..47] */
	printf("\nVolume header files:\n");
	for (i = 0; i < SGI_SIZE_VOLDIR; ++i) {
		if (volhdr->voldir[i].name[0] != '\0') {
			printf("%-8s offset %4d blocks, "
			    "length %8d bytes (%d blocks)\n",
			    volhdr->voldir[i].name,
			    betoh32(volhdr->voldir[i].block),
			    betoh32(volhdr->voldir[i].bytes),
			    howmany(betoh32(volhdr->voldir[i].bytes),
			    DEV_BSIZE));
		}
	}

	printf("\nSGI partitions:\n");
	for (i = 0; i < MAXPARTITIONS; ++i) {
		if (betoh32(volhdr->partitions[i].blocks) != 0) {
			printf("%2d:%c blocks %8d first %8d type %2d (%s)\n",
			    i, i + 'a', betoh32(volhdr->partitions[i].blocks),
			    betoh32(volhdr->partitions[i].first),
			    betoh32(volhdr->partitions[i].type),
			    betoh32(volhdr->partitions[i].type) >
			    (sizeof(sgi_types) / sizeof(sgi_types[0])) ?
			    "???" :
			    sgi_types[betoh32(volhdr->partitions[i].type)]);
		}
	}
}

void
init_volhdr(void)
{
	memset(volhdr, 0, sizeof(struct sgilabel));
	volhdr->magic = htobe32(SGILABEL_MAGIC);
	volhdr->root = htobe16(0);
	volhdr->swap = htobe16(1);
	strlcpy(volhdr->bootfile, "/bsd", sizeof(volhdr->bootfile));
	volhdr->dp.dp_skew = 1; /* XXX */
	volhdr->dp.dp_gap1 = 1; /* XXX */
	volhdr->dp.dp_gap2 = 1; /* XXX */
	volhdr->dp.dp_cyls = htobe16(lbl.d_ncylinders);
	volhdr->dp.dp_shd0 = 0;
	volhdr->dp.dp_trks0 = htobe16(lbl.d_ntracks);
	volhdr->dp.dp_secs = htobe16(lbl.d_nsectors);
	volhdr->dp.dp_secbytes = htobe16(lbl.d_secsize);
	volhdr->dp.dp_interleave = 1;
	volhdr->dp.dp_nretries = htobe32(22);
	volhdr->partitions[10].blocks =
	    htobe32(DL_SECTOBLK(&lbl, DL_GETDSIZE(&lbl)));
	volhdr->partitions[10].first = 0;
	volhdr->partitions[10].type = htobe32(SGI_PTYPE_VOLUME);
	volhdr->partitions[8].blocks = htobe32(DL_SECTOBLK(&lbl, volhdr_size));
	volhdr->partitions[8].first = 0;
	volhdr->partitions[8].type = htobe32(SGI_PTYPE_VOLHDR);
	volhdr->partitions[0].blocks =
	    htobe32(DL_SECTOBLK(&lbl, DL_GETDSIZE(&lbl) - volhdr_size));
	volhdr->partitions[0].first = htobe32(DL_SECTOBLK(&lbl, volhdr_size));
	volhdr->partitions[0].type = htobe32(SGI_PTYPE_BSD);
	write_volhdr();
}

void
read_file(void)
{
	FILE *fp;
	int i;

	if (!quiet)
		printf("Reading file %s\n", vfilename);
	for (i = 0; i < SGI_SIZE_VOLDIR; ++i) {
		if (strncmp(vfilename, volhdr->voldir[i].name,
		    strlen(volhdr->voldir[i].name)) == 0)
			break;
	}
	if (i >= SGI_SIZE_VOLDIR)
		errx(1, "%s: file not found", vfilename);
	/* XXX assumes volume header starts at 0? */
	lseek(fd, betoh32(volhdr->voldir[i].block) * DEV_BSIZE, SEEK_SET);
	if ((fp = fopen(ufilename, "w")) == NULL)
		err(1, "open %s", ufilename);
	i = betoh32(volhdr->voldir[i].bytes);
	while (i > 0) {
		if (read(fd, buf, bufsize) != bufsize)
			err(1, "read file");
		fwrite(buf, 1, i > bufsize ? bufsize : i, fp);
		i -= i > bufsize ? bufsize : i;
	}
	fclose(fp);
}

void
write_file(void)
{
	FILE *fp;
	int slot;
	int block, i, fsize, fbufsize;
	struct stat st;
	char *fbuf;

	if (!quiet)
		printf("Writing file %s\n", ufilename);

	if (stat(ufilename, &st) != 0)
		err(1, "stat %s", ufilename);
	if (st.st_size == 0)
		errx(1, "%s: file is empty", vfilename);

	if (!quiet)
		printf("File %s has %lld bytes\n", ufilename, st.st_size);
	slot = -1;
	for (i = 0; i < SGI_SIZE_VOLDIR; ++i) {
		if (volhdr->voldir[i].name[0] == '\0' && slot < 0)
			slot = i;
		if (strcmp(vfilename, volhdr->voldir[i].name) == 0) {
			slot = i;
			break;
		}
	}
	if (slot == -1)
		errx(1, "no more directory entries available");
	if (betoh32(volhdr->voldir[slot].block) > 0) {
		if (!quiet)
			printf("File %s exists, removing old file\n",
			    vfilename);
		volhdr->voldir[slot].name[0] = 0;
		volhdr->voldir[slot].block = volhdr->voldir[slot].bytes = 0;
	}
	/* XXX assumes volume header starts at 0? */
	block = allocate_space((int)st.st_size);
	if (block < 0)
		errx(1, "no more space available");

	/*
	 * Make sure the name in the volume header is max. 8 chars,
	 * NOT including NUL.
	 */
	if (strlen(vfilename) > sizeof(volhdr->voldir[slot].name))
		warnx("%s: filename is too long and will be truncated",
		    vfilename);
	strncpy(volhdr->voldir[slot].name, vfilename,
	    sizeof(volhdr->voldir[slot].name));

	volhdr->voldir[slot].block = htobe32(block);
	volhdr->voldir[slot].bytes = htobe32(st.st_size);

	write_volhdr();

	/* Write the file itself. */
	if (lseek(fd, block * DEV_BSIZE, SEEK_SET) == -1)
		err(1, "lseek write");
	fbufsize = volhdr->dp.dp_secbytes;
	if ((fbuf = malloc(fbufsize)) == NULL)
		err(1, "failed to allocate buffer");
	i = st.st_size;
	fp = fopen(ufilename, "r");
	while (i > 0) {
		bzero(fbuf, fbufsize);
		fsize = i > fbufsize ? fbufsize : i;
		if (fread(fbuf, 1, fsize, fp) != fsize)
			err(1, "reading file from disk");
		if (write(fd, fbuf, fbufsize) != fbufsize)
			err(1, "writing file to SGI volume header");
		i -= fsize;
	}
	fclose(fp);
	free(fbuf);
}

void
link_file(void)
{
	int slot, i;
	int32_t block, bytes;

	if (!quiet)
		printf("Linking file %s to %s\n", vfilename, ufilename);
	for (i = 0; i < SGI_SIZE_VOLDIR; ++i) {
		if (strncmp(vfilename, volhdr->voldir[i].name,
		    strlen(volhdr->voldir[i].name)) == 0)
			break;
	}
	if (i >= SGI_SIZE_VOLDIR)
		errx(1, "%s: file not found", vfilename);

	block = volhdr->voldir[i].block;
	bytes = volhdr->voldir[i].bytes;

	slot = -1;
	for (i = 0; i < SGI_SIZE_VOLDIR; ++i) {
		if (volhdr->voldir[i].name[0] == '\0' && slot < 0)
			slot = i;
		if (strcmp(ufilename, volhdr->voldir[i].name) == 0) {
			slot = i;
			break;
		}
	}
	if (slot == -1)
		errx(1, "no more directory entries available");

	/*
	 * Make sure the name in the volume header is max. 8 chars,
	 * NOT including NUL.
	 */
	if (strlen(ufilename) > sizeof(volhdr->voldir[slot].name))
		warnx("%s: filename is too long and will be truncated",
		    ufilename);
	strncpy(volhdr->voldir[slot].name, ufilename,
	    sizeof(volhdr->voldir[slot].name));

	volhdr->voldir[slot].block = block;
	volhdr->voldir[slot].bytes = bytes;
	write_volhdr();
}

void
delete_file(void)
{
	int i;

	for (i = 0; i < SGI_SIZE_VOLDIR; ++i) {
		if (strcmp(vfilename, volhdr->voldir[i].name) == 0) {
			break;
		}
	}
	if (i >= SGI_SIZE_VOLDIR)
		errx(1, "%s: file not found", vfilename);

	/* XXX: we don't compact the file space, so get fragmentation */
	volhdr->voldir[i].name[0] = '\0';
	volhdr->voldir[i].block = volhdr->voldir[i].bytes = 0;
	write_volhdr();
}

void
modify_partition(void)
{
	if (!quiet)
		printf("Modify partition %d start %d length %d\n",
		    partno, partfirst, partblocks);
	volhdr->partitions[partno].blocks = htobe32(partblocks);
	volhdr->partitions[partno].first = htobe32(partfirst);
	volhdr->partitions[partno].type = htobe32(parttype);
	write_volhdr();
}

void
write_volhdr(void)
{
	checksum_vol();

	if (!quiet)
		display_vol();
	if (lseek(fd, 0, SEEK_SET) == -1)
		err(1, "lseek 0");
	if (write(fd, buf, bufsize) != bufsize)
		err(1, "write volhdr");
}

int
allocate_space(int size)
{
	int n, blocks;
	int first;

	blocks = howmany(size, DEV_BSIZE);
	first = roundup(2 * DEV_BSIZE, volhdr->dp.dp_secbytes) / DEV_BSIZE;

	for (n = 0; n < SGI_SIZE_VOLDIR;) {
		if (volhdr->voldir[n].name[0]) {
			if (first < (betoh32(volhdr->voldir[n].block) +
			    howmany(betoh32(volhdr->voldir[n].bytes),
			        DEV_BSIZE)) &&
			    (first + blocks) >
			        betoh32(volhdr->voldir[n].block)) {

				first = roundup(
				    betoh32(volhdr->voldir[n].block) +
				    howmany(betoh32(volhdr->voldir[n].bytes),
				        DEV_BSIZE),
				    volhdr->dp.dp_secbytes / DEV_BSIZE);
#if DEBUG
				printf("allocate: "
				    "n=%d first=%d blocks=%d size=%d\n",
				    n, first, blocks, size);
				printf("%s %d %d\n", volhdr->voldir[n].name,
				    volhdr->voldir[n].block,
				    volhdr->voldir[n].bytes);
				printf("first=%d block=%d last=%d end=%d\n",
				    first, volhdr->voldir[n].block,
				    first + blocks - 1,
				    volhdr->voldir[n].block +
				    howmany(volhdr->voldir[n].bytes,
				        DEV_BSIZE));
#endif
				n = 0;
				continue;
			}
		}
		++n;
	}
	if (first + blocks > DL_GETDSIZE(&lbl))
		first = -1;
	/* XXX assumes volume header is partition 8 */
	/* XXX assumes volume header starts at 0? */
	if (first + blocks >= betoh32(volhdr->partitions[8].blocks))
		first = -1;
	return (first);
}

void
checksum_vol(void)
{
	int32_t *l;
	int i;

	volhdr->checksum = checksum = 0;
	l = (int32_t *)buf;
	for (i = 0; i < sizeof(struct sgilabel) / sizeof(int32_t); ++i)
		checksum += betoh32(l[i]);
	volhdr->checksum = htobe32(-checksum);
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr,
	    "usage: %s [-q] disk\n"
	    "       %s [-q] -d vhfilename disk\n"
	    "       %s [-q] -i [-h vhsize] disk\n"
	    "       %s [-q] -l vhfilename1 vhfilename2 disk\n"
	    "       %s [-q] -r vhfilename diskfilename disk\n"
	    "       %s [-q] -w vhfilename diskfilename disk\n",
	    __progname, __progname, __progname, __progname, __progname,
	    __progname);

	exit(1);
}
@


1.22
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.21 2013/11/13 07:16:18 deraadt Exp $	*/
d435 1
a435 1
	free(fbuf, 0);
@


1.21
log
@fix typo in last commit
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.20 2013/11/12 23:31:34 krw Exp $	*/
d435 1
a435 1
	free(fbuf);
@


1.20
log
@Oops. Use %llu for DL_GETDSIZE() value.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.19 2013/11/12 01:48:43 krw Exp $	*/
d570 1
a570 1
	if (first + blocks > DL_GETDIZE(&lbl))
@


1.19
log
@Use DL_GETDSIZE() to get disk size.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.18 2012/05/29 06:32:57 matthew Exp $	*/
d263 1
a263 1
	printf("disklabel shows %lld sectors with %u bytes per sector\n",
@


1.18
log
@When writing the new volume header to disk, write back the whole
sector rather than just the bytes for the volume header itself.
Silences the "sloppy I/O" warnings triggered by sgi's distrib scripts.

tested and ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.17 2010/05/18 04:41:14 dlg Exp $	*/
d263 2
a264 2
	printf("disklabel shows %d sectors with %d bytes per sector\n",
	    lbl.d_secperunit, lbl.d_secsize);
d318 1
a318 1
	    htobe32(DL_SECTOBLK(&lbl, lbl.d_secperunit));
d325 1
a325 1
	    htobe32(DL_SECTOBLK(&lbl, lbl.d_secperunit - volhdr_size));
d570 1
a570 1
	if (first + blocks > lbl.d_secperunit)
@


1.17
log
@dont let sys/ioctl.h imply that you get the ioctls in dkio.h. this
gets rid of #include <sys/dkio.h> in sys/ioctl.h and adds #include
<sys/dkio.h> to the places that actually want and use the disk
ioctls.

this became an issue when krw@@'s X build failed when he was testing
a change to dkio.h.
tested by krw@@
help from and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.16 2010/04/23 15:25:20 jsing Exp $	*/
d524 1
a524 1
	if (write(fd, buf, sizeof(struct sgilabel)) != sizeof(struct sgilabel))
@


1.16
log
@Recycle unused disklabel fields in order to create a disklabel unique
identifier, allowing the disk to be identified without relying on the
device name.

ok deraadt@@ krw@@ beck@@ marco@@ todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.14 2009/05/14 18:55:41 miod Exp $	*/
d48 1
@


1.15
log
@More fallback from struct disklabel changes, yawn
@
text
@d314 1
a314 1
	volhdr->dp.dp_interleave = htobe16(lbl.d_interleave);
@


1.14
log
@Remove unused local.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.13 2009/02/10 03:13:20 jsing Exp $	*/
d306 1
a306 1
	volhdr->dp.dp_skew = lbl.d_trackskew;
@


1.13
log
@Unbreak sgivol. When writing to the raw device use the native blocksize.
Whilst here, check the return value of fread() and improve error messages.

ok krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.9 2008/06/26 05:42:12 ray Exp $	*/
a516 2
	int i;

@


1.12
log
@Make sgivol(8) use the device sector size for reads and writes. This allows
us to use sgivol on devices which have a sector size != DEV_BSIZE, such as
a CD drive.

ok miod@@ krw@@
@
text
@d425 1
d427 4
a430 3
		fread(fbuf, 1, fsize, fp);
		if (write(fd, fbuf, fsize) != fsize)
			err(1, "write file");
@


1.11
log
@Wrap long lines and remove useless comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.10 2008/08/08 16:07:41 jsing Exp $	*/
d74 2
d83 2
a84 1
unsigned char buf[DEV_BSIZE];
d119 1
d202 1
d204 1
a204 1
		snprintf(buf, sizeof(buf), "/dev/r%s%c",
d206 2
a207 2
		if ((fd = open(buf, oflags)) < 0)
			err(1, "open %s", buf);
d210 1
a210 2
	if (read(fd, buf, sizeof(buf)) != sizeof(buf))
		err(1, "read volhdr");
d213 11
a256 1
	printf("disklabel shows %d sectors\n", lbl.d_secperunit);
d259 1
a259 1
	for (i = 0; i < sizeof(buf) / sizeof(int32_t); ++i)
d261 3
d301 1
a301 1
	memset(buf, 0, sizeof(buf));
d316 2
a317 1
	volhdr->partitions[10].blocks = htobe32(lbl.d_secperunit);
d320 1
a320 1
	volhdr->partitions[8].blocks = htobe32(volhdr_size);
d323 3
a325 2
	volhdr->partitions[0].blocks = htobe32(lbl.d_secperunit - volhdr_size);
	volhdr->partitions[0].first = htobe32(volhdr_size);
d351 1
a351 1
		if (read(fd, buf, sizeof(buf)) != sizeof(buf))
d353 2
a354 2
		fwrite(buf, 1, i > sizeof(buf) ? sizeof(buf) : i, fp);
		i -= i > sizeof(buf) ? sizeof(buf) : i;
d364 1
a364 1
	int block, i;
d366 1
a366 1
	char fbuf[DEV_BSIZE];
d370 1
d375 1
d419 3
d425 3
a427 2
		fread(fbuf, 1, i > sizeof(fbuf) ? sizeof(fbuf) : i, fp);
		if (write(fd, fbuf, sizeof(fbuf)) != sizeof(fbuf))
d429 1
a429 1
		i -= i > sizeof(fbuf) ? sizeof(fbuf) : i;
d431 2
d523 1
a523 1
	if (write(fd, buf, sizeof(buf)) != sizeof(buf))
d534 2
a535 1
	first = 2;
d540 6
a545 3
			    DEV_BSIZE)) &&
			    (first + blocks) > betoh32(volhdr->voldir[n].block)) {
				first = betoh32(volhdr->voldir[n].block) +
d547 2
a548 1
				    DEV_BSIZE);
d586 1
a586 1
	for (i = 0; i < sizeof(buf) / sizeof(int32_t); ++i)
@


1.10
log
@Make sgivol use the sgilabel struct from machine/disklabel.h, rather than
declaring another.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.8 2008/02/18 15:58:27 jsing Exp $	*/
d256 2
a257 1
			printf("%-8s offset %4d blocks, length %8d bytes (%d blocks)\n",
a367 1
	/* -w can overwrite, -a won't overwrite */
d517 3
a519 2
#if 0
				printf("allocate: n=%d first=%d blocks=%d size=%d\n",
d528 2
a529 1
				    howmany(volhdr->voldir[n].bytes, DEV_BSIZE));
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@a55 2
#define SGILABEL_MAGIC	0xbe5a941

a56 59
#define SGI_SIZE_VOLDIR	15

#define SGI_PTYPE_VOLHDR	0
#define SGI_PTYPE_RAW		3
#define SGI_PTYPE_BSD		4
#define SGI_PTYPE_VOLUME	6
#define SGI_PTYPE_EFS		7
#define SGI_PTYPE_LVOL		8
#define SGI_PTYPE_RLVOL		9
#define SGI_PTYPE_XFS		10
#define SGI_PTYPE_XFSLOG	11
#define SGI_PTYPE_XLV		12
#define SGI_PTYPE_XVM		13

struct local_devparms {
	u_int8_t	dp_skew;
	u_int8_t	dp_gap1;
	u_int8_t	dp_gap2;
	u_int8_t	dp_spares_cyl;
	u_int16_t	dp_cyls;
	u_int16_t	dp_shd0;
	u_int16_t	dp_trks0;
	u_int8_t	dp_ctq_depth;
	u_int8_t	dp_cylshi;
	u_int16_t	dp_unused;
	u_int16_t	dp_secs;
	u_int16_t	dp_secbytes;
	u_int16_t	dp_interleave;
	u_int32_t	dp_flags;
	u_int32_t	dp_datarate;
	u_int32_t	dp_nretries;
	u_int32_t	dp_mspw;
	u_int16_t	dp_xgap1;
	u_int16_t	dp_xsync;
	u_int16_t	dp_xrdly;
	u_int16_t	dp_xgap2;
	u_int16_t	dp_xrgate;
	u_int16_t	dp_xwcont;
} __packed;

struct local_sgilabel {
	u_int32_t	magic;
	int16_t		root;
	int16_t		swap;
	char		bootfile[16];
	struct local_devparms dp;
	struct {
		char		name[8];
		int32_t		block;
		int32_t		bytes;
	} voldir[SGI_SIZE_VOLDIR];
	struct {
		int32_t		blocks;
		int32_t		first;
		int32_t		type;
	} partitions[MAXPARTITIONS];
	int32_t		checksum;
	int32_t		_pad;
} __packed;
d72 1
a72 1
struct	local_sgilabel *volhdr;
d209 1
a209 1
	volhdr = (struct local_sgilabel *)buf;
@


1.8
log
@Cleanup sgivol(8) and make it behave more appropriately. Remove the '-f'
option - if we ask sgivol(8) to manipulate the volume header we really
mean it. Also, use a single mode variable rather than a bunch of nutty
opt_* variables. Improve the man page and usage() whilst we're here.

Aside from the removal of '-f' there should be no functional changes.

ok miod@@ jmc@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.7 2005/08/01 19:34:50 jmc Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@put -l into the right place...
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.6 2005/08/01 18:00:30 kettenis Exp $	*/
d63 16
a78 1
#define SGI_SIZE_VOLHDR	3135	/* Can be overridden via -h parameter */
a105 2
#define	SGI_SIZE_VOLDIR	15

a106 1
#define SGILABEL_MAGIC  0xbe5a941
d126 9
a134 11
#define SGI_PTYPE_VOLHDR	0
#define SGI_PTYPE_RAW		3
#define SGI_PTYPE_BSD		4
#define SGI_PTYPE_VOLUME	6
#define SGI_PTYPE_EFS		7
#define SGI_PTYPE_LVOL		8
#define SGI_PTYPE_RLVOL		9
#define SGI_PTYPE_XFS		10
#define SGI_PTYPE_XFSLOG	11
#define SGI_PTYPE_XLV		12
#define SGI_PTYPE_XVM		13
d136 2
a138 8
int	opt_i;			/* Initialize volume header */
int	opt_r;			/* Read a file from volume header */
int	opt_w;			/* Write a file to volume header */
int	opt_l;			/* Link a file in volume header */
int	opt_d;			/* Delete a file from volume header */
int	opt_p;			/* Modify a partition */
int	opt_q;			/* quiet mode */
int	opt_f;			/* Don't ask, just do what you're told */
d140 1
a140 1
struct local_sgilabel *volhdr;
d142 1
a142 1
u_int32_t	volhdr_size = SGI_SIZE_VOLHDR;
d186 3
a190 2
		/* -i, -r, -w, -l, -d and -p override each other */
		/* -q implies -f */
d192 1
a192 2
			++opt_q;
			++opt_f;
d195 1
a195 1
			++opt_f;
d198 1
a198 2
			++opt_i;
			opt_r = opt_w = opt_l = opt_d = opt_p = 0;
d207 1
a207 2
			++opt_r;
			opt_i = opt_w = opt_l = opt_d = opt_p = 0;
d210 1
a210 2
			++opt_w;
			opt_i = opt_r = opt_l = opt_d = opt_p = 0;
d213 1
a213 2
			++opt_l;
			opt_i = opt_r = opt_w = opt_d = opt_p = 0;
d216 1
a216 2
			++opt_d;
			opt_i = opt_r = opt_w = opt_l = opt_p = 0;
d219 1
a219 2
			++opt_p;
			opt_i = opt_r = opt_w = opt_l = opt_d = 0;
d228 1
a228 1
	if (opt_r || opt_w || opt_l) {
d235 1
a235 2
	}
	if (opt_d) {
d241 1
a241 3
	}

	if (opt_p) {
d263 3
a265 1
	oflags = ((opt_i | opt_w | opt_l | opt_d | opt_p) ? O_RDWR : O_RDONLY);
d272 1
d278 2
a279 1
	if (opt_i) {
d283 1
d287 2
a288 1
	if (opt_r) {
d290 1
a290 3
		exit(0);
	}
	if (opt_w) {
d292 1
a292 3
		exit(0);
	}
	if (opt_l) {
d294 1
a294 3
		exit(0);
	}
	if (opt_d) {
d296 1
a296 3
		exit(0);
	}
	if (opt_p) {
d298 1
a298 4
		exit(0);
	}

	if (!opt_q)
d319 1
d332 1
d384 1
a384 1
	if (!opt_q)
d416 1
a416 1
	if (!opt_q)
d422 1
a422 1
	if (!opt_q)
d437 1
a437 1
		if (!opt_q)
d463 1
a463 1
	/* write the file itself */
d482 1
a482 1
	if (!opt_q)
d544 1
a544 1
	if (!opt_q)
d560 1
a560 1
	if (!opt_q)
a561 6
	if (!opt_f) {
		printf("\nDo you want to update volume (y/n)? ");
		i = getchar();
		if (i != 'Y' && i != 'y')
			exit(1);
	}
d631 9
a639 6
	    "usage: %s [-fq] [-d vhfilename] disk\n"
	    "       %s [-fiq] [-h vhsize] disk\n"
	    "       %s [-fq] [-l vhfilename1 vhfilename2] disk\n"
	    "       %s [-fq] [-r vhfilename diskfilename] disk\n"
	    "       %s [-fq] [-w vhfilename diskfilename] disk\n",
	    __progname, __progname, __progname, __progname, __progname);
@


1.6
log
@Add support for "hard links" in volume header.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.5 2005/04/28 10:03:35 jmc Exp $	*/
d647 1
d649 1
a649 2
	    "       %s [-fq] [-w vhfilename diskfilename] disk\n"
	    "       %s [-fq] [-l vhfilename1 vhfilename2] disk\n",
@


1.5
log
@- sort options
- sync usage()
- other minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.4 2005/04/27 07:13:41 deraadt Exp $	*/
d130 1
d168 1
d179 1
a179 1
	int ch;
d182 1
a182 1
	while ((ch = getopt(argc, argv, "irwpdqfh:")) != -1) {
d184 1
a184 1
		/* -i, -r, -w, -d and -p override each other */
d195 1
a195 1
			opt_r = opt_w = opt_d = opt_p = 0;
d205 1
a205 1
			opt_i = opt_w = opt_d = opt_p = 0;
d209 5
a213 1
			opt_i = opt_r = opt_d = opt_p = 0;
d217 1
a217 1
			opt_i = opt_r = opt_w = opt_p = 0;
d221 1
a221 1
			opt_i = opt_r = opt_w = opt_d = 0;
d230 1
a230 1
	if (opt_r || opt_w) {
d268 2
a269 2
	fd = open(argv[0], (opt_i | opt_w | opt_d | opt_p) ? O_RDWR : O_RDONLY);
	if (fd < 0) {
d272 1
a272 2
		if ((fd = open(buf,
		    (opt_i | opt_w | opt_d | opt_p) ? O_RDWR : O_RDONLY)) < 0)
d295 4
d485 46
d648 3
a650 2
	    "       %s [-fq] [-w vhfilename diskfilename] disk\n",
	    __progname, __progname, __progname, __progname);
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: sgivol.c,v 1.3 2004/11/08 21:24:46 miod Exp $	*/
d590 4
a593 4
	    "usage: %s [-qf] [-i] [-h vhsize] device\n"
	    "       %s [-qf] [-r vhfilename diskfilename] device\n"
	    "       %s [-qf] [-w vhfilename diskfilename] device\n"
	    "       %s [-qf] [-d vhfilename] device\n",
@


1.3
log
@Simple cleaning of sgivol, with no functional change (yet):
- remove hardcoded constants
- use strtol() and check for errors instead of using atoi()
- use err()/errx()/warnx() when applicable
- use bounded string operations whenever possible
- use strncpy() instead of a home-grown construct

Plus you get the "/usr/mdec/sgivol -p" instant coredump fixed for free.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 23
a88 23
	u_int8_t        dp_skew;
	u_int8_t        dp_gap1;
	u_int8_t        dp_gap2;
	u_int8_t        dp_spares_cyl;
	u_int16_t       dp_cyls;
	u_int16_t       dp_shd0;
	u_int16_t       dp_trks0;
	u_int8_t        dp_ctq_depth;
	u_int8_t        dp_cylshi;
	u_int16_t       dp_unused;
	u_int16_t       dp_secs;
	u_int16_t       dp_secbytes;
	u_int16_t       dp_interleave;
	u_int32_t       dp_flags;
	u_int32_t       dp_datarate;
	u_int32_t       dp_nretries;
	u_int32_t       dp_mspw;
	u_int16_t       dp_xgap1;
	u_int16_t       dp_xsync;
	u_int16_t       dp_xrdly;
	u_int16_t       dp_xgap2;
	u_int16_t       dp_xrgate;
	u_int16_t       dp_xwcont;
d95 4
a98 4
	u_int32_t       magic;
	int16_t         root;
	int16_t         swap;
	char            bootfile[16];
d101 4
a104 4
		char            name[8];
		int32_t         block;
		int32_t         bytes;
	}               voldir[SGI_SIZE_VOLDIR];
d106 6
a111 6
		int32_t         blocks;
		int32_t         first;
		int32_t         type;
	}               partitions[MAXPARTITIONS];
	int32_t         checksum;
	int32_t         _pad;
d114 11
a124 11
#define SGI_PTYPE_VOLHDR        0
#define SGI_PTYPE_RAW           3
#define SGI_PTYPE_BSD           4
#define SGI_PTYPE_VOLUME        6
#define SGI_PTYPE_EFS           7
#define SGI_PTYPE_LVOL          8
#define SGI_PTYPE_RLVOL         9
#define SGI_PTYPE_XFS           10
#define SGI_PTYPE_XFSLOG        11
#define SGI_PTYPE_XLV           12
#define SGI_PTYPE_XVM           13
d261 1
a261 1
	
d280 1
a280 1
		errx(2, "no Volume Header found, magic=%x.  Use -i first.", 
d329 1
a329 1
			      DEV_BSIZE));
d340 3
a342 3
			      (sizeof(sgi_types) / sizeof(sgi_types[0])) ?
			      "???" :
			      sgi_types[betoh32(volhdr->partitions[i].type)]);
d387 1
a387 1
			    strlen(volhdr->voldir[i].name)) == 0)
d437 2
a438 2
			printf("File %s exists, removing old file\n", 
				vfilename);
d453 1
a453 1
		       vfilename);
d498 1
a498 1
		printf("Modify partition %d start %d length %d\n", 
d539 1
a539 1
			      DEV_BSIZE)) &&
d543 1
a543 1
				      DEV_BSIZE);
d545 10
a554 4
				printf("allocate: n=%d first=%d blocks=%d size=%d\n", n, first, blocks, size);
				printf("%s %d %d\n", volhdr->voldir[n].name, volhdr->voldir[n].block, volhdr->voldir[n].bytes);
				printf("first=%d block=%d last=%d end=%d\n", first, volhdr->voldir[n].block,
				       first + blocks - 1, volhdr->voldir[n].block + howmany(volhdr->voldir[n].bytes, DEV_BSIZE));
@


1.2
log
@Minor tweaks to make things work in install.
@
text
@d1 1
d40 2
a41 5
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <sys/disklabel.h>

d43 1
a45 1
#include <unistd.h>
a46 1
#include <fcntl.h>
d48 2
d51 4
d89 3
a91 1
}               __attribute__((__packed__));
d104 1
a104 1
	}               voldir[15];
d112 1
a112 1
}               __attribute__((__packed__));
d144 1
a144 1
unsigned char buf[512];
a162 2
int	main(int, char *[]);

d178 2
d196 4
a199 1
			volhdr_size = atoi(optarg);
a215 4
			partno = atoi(argv[0]);
			partfirst = atoi(argv[1]);
			partblocks = atoi(argv[2]);
			parttype = atoi(argv[3]);
a216 1
		case '?':
d243 13
a255 4
		partno = atoi(argv[0]);
		partfirst = atoi(argv[1]);
		partblocks = atoi(argv[2]);
		parttype = atoi(argv[3]);
d264 11
a274 18
		sprintf(buf, "/dev/r%s%c", argv[0], 'a' + getrawpartition());
		fd = open(buf, (opt_i | opt_w | opt_d | opt_p) 
				? O_RDWR : O_RDONLY);
		if (fd < 0) {
			printf("Error opening device %s: %s\n",
				argv[0], strerror(errno));
			exit(1);
		}
	}
	if (read(fd, buf, sizeof(buf)) != sizeof(buf)) {
		perror("read volhdr");
		exit(1);
	}
	if (ioctl(fd, DIOCGDINFO, &lbl) < 0) {
		perror("DIOCGDINFO");
		exit(1);
	}
	volhdr = (struct local_sgilabel *) buf;
d279 3
a281 5
	if (betoh32(volhdr->magic) != SGILABEL_MAGIC) {
		printf("No Volume Header found, magic=%x.  Use -i first.\n", 
		       betoh32(volhdr->magic));
		exit(2);
	}
d302 1
a302 1
	return 0;
d314 1
a314 1
	for (i = 0; i < 512 / 4; ++i)
d322 2
a323 2
	for (i = 0; i < 15; ++i)
		if (volhdr->voldir[i].name[0])
d325 7
a331 2
			       volhdr->voldir[i].name, betoh32(volhdr->voldir[i].block),
			       betoh32(volhdr->voldir[i].bytes), (betoh32(volhdr->voldir[i].bytes) + 511) / 512);
d334 1
a334 1
		if (betoh32(volhdr->partitions[i].blocks)) {
d336 7
a342 5
			  i, i + 'a', betoh32(volhdr->partitions[i].blocks),
			       betoh32(volhdr->partitions[i].first),
			       betoh32(volhdr->partitions[i].type),
			  betoh32(volhdr->partitions[i].type) > 13 ? "???" :
			    sgi_types[betoh32(volhdr->partitions[i].type)]);
d354 1
a354 1
	strcpy(volhdr->bootfile, "/bsd");
d385 1
a385 1
	for (i = 0; i < 15; ++i) {
d390 2
a391 4
	if (i >= 15) {
		printf("file %s not found\n", vfilename);
		exit(1);
	}
d393 3
a395 6
	lseek(fd, betoh32(volhdr->voldir[i].block) * 512, SEEK_SET);
	fp = fopen(ufilename, "w");
	if (fp == NULL) {
		perror("open write");
		exit(1);
	}
d398 2
a399 4
		if (read(fd, buf, sizeof(buf)) != sizeof(buf)) {
			perror("read file");
			exit(1);
		}
a410 1
	size_t namelen;
d413 1
a413 1
	char fbuf[512];
d417 4
a420 4
	if (stat(ufilename, &st) < 0) {
		perror("stat");
		exit(1);
	}
d424 1
a424 1
	for (i = 0; i < 15; ++i) {
d432 2
a433 4
	if (slot == -1) {
		printf("No directory space for file %s\n", vfilename);
		exit(1);
	}
a441 4
	if (st.st_size == 0) {
		printf("bad file size\n");
		exit(1);
	}
d444 2
a445 4
	if (block < 0) {
		printf("No space for file\n");
		exit(1);
	}
d451 2
a452 3
	namelen = strlen(vfilename);
	if (namelen > sizeof(volhdr->voldir[slot].name)) {
		printf("Warning: '%s' is too long for volume header, ",
d454 1
a454 6
		namelen = sizeof(volhdr->voldir[slot].name);
		printf("truncating to '%-8s'\n", vfilename);
	}

	/* Populate it w/ NULs */
	memset(volhdr->voldir[slot].name, 0,
a455 2
	/* Then copy the name */
	memcpy(volhdr->voldir[slot].name, vfilename, namelen);
d463 2
a464 5
	i = lseek(fd, block * 512, SEEK_SET);
	if (i < 0) {
		perror("lseek write");
		exit(1);
	}
d468 4
a471 6
		fread(fbuf, 1, i > 512 ? 512 : i, fp);
		if (write(fd, fbuf, 512) != 512) {
			perror("write file");
			exit(1);
		}
		i -= i > 512 ? 512 : i;
d480 1
a480 1
	for (i = 0; i < 15; ++i) {
d485 2
a486 4
	if (i >= 15) {
		printf("File %s not found\n", vfilename);
		exit(1);
	}
d499 1
a499 5
			partno, partfirst, partblocks);
	if (partno < 0 || partno > 15) {
		printf("Invalid partition number: %d\n", partno);
		exit(1);
	}
d521 4
a524 8
	i = lseek(fd, 0, SEEK_SET);
	if (i < 0) {
		perror("lseek 0");
		exit(1);
	}
	i = write(fd, buf, 512);
	if (i < 0)
		perror("write volhdr");
d533 1
a533 1
	blocks = (size + 511) / 512;
d535 1
a535 2
	n = 0;
	while (n < 15) {
d538 2
a539 1
			  (betoh32(volhdr->voldir[n].bytes) + 511) / 512) &&
d542 2
a543 1
					(betoh32(volhdr->voldir[n].bytes) + 511) / 512;
d548 1
a548 1
				       first + blocks - 1, volhdr->voldir[n].block + (volhdr->voldir[n].bytes + 511) / 512);
d573 1
a573 1
	for (i = 0; i < 512 / 4; ++i)
d581 9
a589 6
	printf("Usage:	sgivol [-qf] [-i] [-h vhsize] device\n"
	       "	sgivol [-qf] [-r vhfilename diskfilename] device\n"
	       "	sgivol [-qf] [-w vhfilename diskfilename] device\n"
	       "	sgivol [-qf] [-d vhfilename] device\n"
	       );
	exit(0);
@


1.1
log
@disk boot and tools for sgi
@
text
@d277 1
a277 1
		exit(1);
@

