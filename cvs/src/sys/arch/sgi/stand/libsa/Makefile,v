head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.14
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2016.11.06.16.04.20;	author tb;	state Exp;
branches;
next	1.9;
commitid	tupV2UpHQlnB6RWH;

1.9
date	2015.11.16.19.33.52;	author miod;	state Exp;
branches;
next	1.8;
commitid	5gnqUR6VheSiU9SF;

1.8
date	2013.01.01.18.49.33;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.31.08.14.08;	author pascal;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.14.18.57.43;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.26.10.26.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.22.22.06.18;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.16.18.54.49;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.23.14.22.40;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile,v 1.9 2015/11/16 19:33:52 miod Exp $

LIB=	sa

.PATH:	${.CURDIR}/../../../../lib/libsa

CLEANFILES += machine mips64

CFLAGS+= ${CEXTRAFLAGS} ${SAABI} -nostdinc -mno-abicalls -D_NO_ABICALLS \
	-fno-pie \
	-I${.CURDIR} -I${.CURDIR}/../include -I${.CURDIR}/../.. \
	-I${.CURDIR}/../../.. -I${.CURDIR}/../../../.. \
	-I${.CURDIR}/../../../../lib/libsa \
	-I${.OBJDIR}

CPPFLAGS+= -D__INTERNAL_LIBSA_CREAD ${STANDALONE}
CPPFLAGS+= ${LIBSA_CPPFLAGS}

# stand routines
SRCS=	alloc.c exit.c getfile.c getln.c globals.c \
	memcmp.c memcpy.c memset.c printf.c snprintf.c strerror.c strncpy.c

# io routines
SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c ioctl.c lseek.c \
	open.c read.c stat.c write.c cread.c

# boot filesystems
SRCS+=	ufs.c nfs.c cd9660.c

${OBJS}:	${.CURDIR}/../Makefile.inc

NOPROFILE=
NOPIC=

.if !make(clean) && !make(cleandir) && !make(includes) && !make(libdep) && \
    !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../include machine)
	@@([ -h mips64 ] || ln -s ${.CURDIR}/../../../mips64/include mips64)
.endif

install:

.include <bsd.lib.mk>
@


1.9
log
@Replace unbounded gets() in libsa with getln() which takes a buffer size,
and convert all gets() users.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2013/01/01 18:49:33 miod Exp $
d35 2
a36 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
@


1.8
log
@Remove libsa exec.c, not used by anything anymore; all boot blocks now use
loadfile or a derivative of.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2012/08/31 08:14:08 pascal Exp $
d20 1
a20 1
SRCS=	alloc.c exit.c getfile.c gets.c globals.c \
@


1.7
log
@Move sgi/stand to plain -fno-pie -nopie.  Binaries are the same.

tested by and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2012/08/21 14:46:19 pascal Exp $
d20 1
a20 1
SRCS=	alloc.c exit.c exec.c getfile.c gets.c globals.c \
@


1.6
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2009/05/14 18:57:43 miod Exp $
d10 1
a33 1
NOPIE=
@


1.5
log
@In addition to the existing IP32 boot block, build a real 64 bit boot block
as a relocatable object, suitable for IP27/IP30/IP35.

Boot blocks are now found is /usr/mdec/boot{32,64}, with boot-IP## being
hard links to them for easy boot block pick.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2007/11/26 10:26:02 deraadt Exp $
d33 1
@


1.4
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/09/22 22:06:18 miod Exp $
d9 1
a9 1
CFLAGS= ${CEXTRAFLAGS} -O2 ${SAABI} -nostdinc -mno-abicalls -D_NO_ABICALLS \
d16 1
a16 1
CPPFLAGS+= -DLIBSA_LONGLONG_PRINTF
@


1.3
log
@Bring in libsa code for proper %llx printf display; necessary for /boot.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/09/16 18:54:49 pefo Exp $
d34 1
a34 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.2
log
@Update boot with miods ELF64 symtab fixes and my 32 bit compiles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/08/23 14:22:40 pefo Exp $
d16 1
@


1.1
log
@disk boot and tools for sgi
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2003/06/01 17:00:40 deraadt Exp $
d9 1
a9 1
CFLAGS= ${CEXTRAFLAGS} -O2 -nostdinc -mno-abicalls -D_NO_ABICALLS \
@

