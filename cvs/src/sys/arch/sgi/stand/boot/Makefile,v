head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.2
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.15.0.16
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.12
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.14
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.6
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.10
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.12
	OPENBSD_5_0:1.11.0.10
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.8
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.6
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.2
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.18
date	2016.11.06.16.04.20;	author tb;	state Exp;
branches;
next	1.17;
commitid	tupV2UpHQlnB6RWH;

1.17
date	2016.10.05.11.55.45;	author visa;	state Exp;
branches;
next	1.16;
commitid	caBYKspBPiC2w13Q;

1.16
date	2016.07.30.03.25.49;	author guenther;	state Exp;
branches;
next	1.15;
commitid	HVbAtwruDlJazNH2;

1.15
date	2012.08.31.08.14.08;	author pascal;	state Exp;
branches;
next	1.14;

1.14
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.29.20.22.18;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.19.17.38.31;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.14.18.57.43;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.20.18.12.19;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.30.14.02.00;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.29.09.27.13;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.26.10.26.02;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.25.18.25.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.21.13.22.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.27.03.06.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.16.18.54.48;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.22.11.39;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.23.14.22.40;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile,v 1.17 2016/10/05 11:55:45 visa Exp $

NOMAN=		noman

CFLAGS+=	${SAABI} -mno-abicalls -D_NO_ABICALLS -nostdinc -D__sgi__ \
		-I${.CURDIR}/../include -I${.CURDIR}/../../../.. \
		-I${.CURDIR}/../../../../lib/libsa \
		-I${.OBJDIR}
CFLAGS+=	-D__INTERNAL_LIBSA_CREAD ${STANDALONE} -fno-pie
LDFLAGS+=	-nopie -znorelro

AFLAGS+=	${SAABI}

S=		${.CURDIR}/../../../..
SRCS=		start.S arcbios.c boot.c conf.c diskio.c filesystem.c \
		netfs.c netio.c strstr.c

.PATH:		${S}/lib/libsa
SRCS+=		loadfile.c

.PATH:		${S}/lib/libkern/arch/mips64 ${S}/lib/libkern
SRCS+=		memcpy.c strchr.c strcmp.S strlcat.c strlcpy.c strlen.c \
		strncmp.c strrchr.c

CLEANFILES+=	machine mips64

.if !make(clean) && !make(cleandir) && !make(includes) && !make(libdep) && \
    !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../include machine)
	@@([ -h mips64 ] || ln -s ${.CURDIR}/../../../mips64/include mips64)
.endif
@


1.17
log
@Make the sgi boot blocks read the real OpenBSD disklabel instead of
assuming that the 'a' partition starts at the same location as the
volume header partition #0.

Diff from Miod Vallat
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2016/07/30 03:25:49 guenther Exp $
d27 2
a28 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
@


1.16
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2012/08/31 08:14:08 pascal Exp $
d16 1
a16 1
		netfs.c netio.c strchr.c strstr.c
d22 2
a23 2
SRCS+=		strlcpy.c memcpy.c strlen.c strrchr.c strlcat.c strncmp.c \
		strcmp.S
@


1.15
log
@Move sgi/stand to plain -fno-pie -nopie.  Binaries are the same.

tested by and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2012/08/21 14:46:19 pascal Exp $
d10 1
a10 1
LDFLAGS+=	-nopie
@


1.14
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2012/03/29 20:22:18 miod Exp $
a3 1
NOPIE=
d9 2
a10 1
CFLAGS+=	-D__INTERNAL_LIBSA_CREAD ${STANDALONE}
@


1.13
log
@Put more smarts into the limited bootblocks brain; they will now happily
recognize a kernel bootpath (when not autobooting) even if it does not start
with a /, and will also recognize when this is a full path (e.g.
bootp()mykernel), in which case OSLoadPartition does not need to be
prepended to the constructed path.

This will allow ELF kernels to be booted on ELF-unaware PROM with
bootp()bootecoff bootp()kernel
without doomed-to-fail tomfoolery to convert the 64-bit ELF kernel to a
32-bit ECOFF binary.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/03/19 17:38:31 miod Exp $
d4 1
@


1.12
log
@Teach the bootblocks how to load kernel from tftp (i.e. when OSLoadPartition
is bootp() instead of a disk). Kind of ugly because of the usual `can't seek'
problem causing kernels with symbols to be read from the network twice.

While there, add a 32 bit ECOFF boot block, not hooked to the build yet,
to be used shortly.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/05/14 18:57:43 miod Exp $
d15 1
a15 1
		netfs.c netio.c strstr.c
@


1.11
log
@In addition to the existing IP32 boot block, build a real 64 bit boot block
as a relocatable object, suitable for IP27/IP30/IP35.

Boot blocks are now found is /usr/mdec/boot{32,64}, with boot-IP## being
hard links to them for easy boot block pick.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2008/05/20 18:12:19 jsing Exp $
d14 2
a15 1
SRCS=		start.S boot.c filesystem.c conf.c diskio.c arcbios.c strstr.c
@


1.10
log
@Change the OpenBSD/sgi boot loader so that we use libsa loadfile(), rather
than rolling our own load functions.

tested jasper@@, feedback and ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/11/29 09:27:13 deraadt Exp $
a2 1
PROG=		boot
d5 1
a5 1
CFLAGS+=	-O2 ${SAABI} -mno-abicalls -D_NO_ABICALLS -nostdinc -D__sgi__ \
a12 2
LDFLAGS+=	${SALDFLAGS} -T ${.CURDIR}/ld.script -e __start

d20 2
a21 2
SRCS+=		strlcpy.c memcpy.c strlen.c strrchr.c strlcat.c ashrdi3.c strncmp.c \
		strcmp.S udivdi3.c umoddi3.c qdivrem.c
a29 9

${PROG}: $(OBJS) $(LDADD)
	$(LD) $(LDFLAGS) -o boot $(OBJS) -L${LIBSADIR} ${LIBSA} \
	-L${LIBZDIR} ${LIBZ}

install:
	install -c -m 555 -g bin -o bin ${PROG} ${DESTDIR}/usr/mdec

.include <bsd.prog.mk>
@


1.9
log
@Unbreak build. Also tested by jasper@@.
@
text
@a2 1

d19 2
a20 1
CLEANFILES+= machine mips64
d26 2
a36 1

@


1.8
log
@needs at least S defined
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2007/11/26 10:26:02 deraadt Exp $
d23 2
a24 1
SRCS+=		strlcpy.c memcpy.c strlen.c strrchr.c strlcat.c ashrdi3.c
@


1.7
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2007/11/25 18:25:32 deraadt Exp $
d17 1
@


1.6
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2005/07/21 13:22:53 deraadt Exp $
d24 1
a24 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.5
log
@put libkern after libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/04/27 03:06:22 deraadt Exp $
d21 3
d32 1
a32 1
	-L${LIBZDIR} ${LIBZ} -L${LIBKERNDIR} ${LIBKERN}
@


1.4
log
@if SystemPartition contains a cdrom boot specifier, whack the
OSLoadPartition variable to point to partition 0 of the same unit.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/09/16 18:54:48 pefo Exp $
d29 1
a29 1
	-L${LIBKERNDIR} ${LIBKERN}  -L${LIBZDIR} ${LIBZ}
@


1.3
log
@Update boot with miods ELF64 symtab fixes and my 32 bit compiles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/09/09 22:11:39 pefo Exp $
d17 1
a17 1
SRCS=		start.S boot.c filesystem.c conf.c diskio.c arcbios.c
@


1.2
log
@Kernel moves to 64 bit. A few more tweaks when binutils is updated.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/08/23 14:22:40 pefo Exp $
d7 1
a7 1
CFLAGS+=	-O2 -mabi=32 -mno-abicalls -D_NO_ABICALLS -nostdinc -D__sgi__ \
d13 3
a15 1
LDFLAGS+=	${SALDFLAGS} -T ${.CURDIR}/../../conf/ld.script -Ttext 80010000 -e __start
@


1.1
log
@disk boot and tools for sgi
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 1997/07/21 06:58:11 pefo Exp $
d7 1
a7 1
CFLAGS+=	-O2 -mno-abicalls -D_NO_ABICALLS -nostdinc -D__sgi__ \
d13 1
a13 1
LDFLAGS+=	${SALDFLAGS} -T ${.CURDIR}/../../conf/ld.script -Ttext 80002000 -e __start
@

