head	1.9;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2016.10.05.11.55.45;	author visa;	state Exp;
branches;
next	1.8;
commitid	caBYKspBPiC2w13Q;

1.8
date	2016.09.13.18.27.49;	author jasper;	state Exp;
branches;
next	1.7;
commitid	PHzGPdVfpKxkA6ei;

1.7
date	2015.09.23.21.22.27;	author miod;	state Exp;
branches;
next	1.6;
commitid	3MSSZgQTEhlhvoXG;

1.6
date	2014.02.22.20.27.21;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2013.12.28.02.53.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.18.16.54.35;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.09.29.21.40.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.25.11.31.04;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.29.20.22.18;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Make the sgi boot blocks read the real OpenBSD disklabel instead of
assuming that the 'a' partition starts at the same location as the
volume header partition #0.

Diff from Miod Vallat
@
text
@/*	$OpenBSD: version,v 1.8 2016/09/13 18:27:49 jasper Exp $	*/
/* Public domain. Come on, this can hardly be considered as code. */

#if 0

No version strings up to 2012
	many changes, but nothing to tell bootblocks apart, except perhaps
	their size (har, har)

1.1
	smarter argv[] analysis: the first argument which does neither look
	like an environment variable nor dash-prefixed options, is assumed
	to be a file path. If there are no signs of it being a full ARC
	path, OSLoadPartition is prepended to it.
	The old behaviour was to only accept filenames starting with "/", and
	thus always relative to OSLoadPartition.

1.2
	IP28 support. Also, no longer refuse to run on IP26 systems, they
	will hopefully run at some point in the future.

1.3
	IP26 support, for real.

1.4
	Unbreak IP27 support, broken by accident in 1.3

1.5
	Loadfile support for .openbsd.randomdata section

1.6
	/etc/random.seed support

1.7
	Loadfile support for .SUNW_ctf section

1.8
	Use the OpenBSD disklabel instead of assuming OpenBSD partition `a`
	starts at the beginning of the volume header partition #0.

#endif

static const char version[] = "1.8";
@


1.8
log
@crank bootloader version after .SUNW_ctf change

as discussed with jsing@@ it's easier this way to ensure people have
bootblocks capable of loading the section
@
text
@d1 1
a1 1
/*	$OpenBSD: version,v 1.7 2015/09/23 21:22:27 miod Exp $	*/
d37 4
d43 1
a43 1
static const char version[] = "1.7";
@


1.7
log
@typos
@
text
@d1 1
a1 1
/*	$OpenBSD: version,v 1.6 2014/02/22 20:27:21 miod Exp $	*/
d34 3
d39 1
a39 1
static const char version[] = "1.6";
@


1.6
log
@/etc/random.seed support in the boot blocks (only when loading from disk).
@
text
@d1 2
a2 2
/*	$OpenBSD: version,v 1.5 2013/12/28 02:53:04 deraadt Exp $	*/
/* Public domain. Come on, it can hardly be considered as code. */
d7 1
a7 1
	many changes, but nothing to tell bootblocks about, except perhaps
@


1.5
log
@crank the version
@
text
@d1 1
a1 1
/*	$OpenBSD: version,v 1.4 2012/10/18 16:54:35 miod Exp $	*/
d28 6
d36 1
a36 1
static const char version[] = "1.5";
@


1.4
log
@Put back the kl_n_shift variable, removed by mistake in 1.18, causing the
boot blocks to fail on IP27 and IP35 (IP26, IP30 and 32-bit ARCBios systems
unaffected).

While there, provide a simpler ARC_Call() macro for 32-bit boot blocks, and
put a few more variables and statements within explicit __LP64__ guards.

Crank boot blocks version as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: version,v 1.3 2012/09/29 21:40:48 miod Exp $	*/
d30 1
a30 1
static const char version[] = "1.4";
@


1.3
log
@Bring the `let decide ARCBios address at runtime' code to the SGI bootblocks,
which allows them to run on IP26 (POWER Indigo2 R8000).

Crank boot blocks version.
@
text
@d1 1
a1 1
/*	$OpenBSD: version,v 1.2 2012/05/25 11:31:04 miod Exp $	*/
d25 3
d30 1
a30 1
static const char version[] = "1.3";
@


1.2
log
@Support for the POWER Indigo2 R10000 systems (IP28). Currently running with
ECC checking disabled, which allows the existing Indigo2 drivers to run
unmodified.
@
text
@d1 1
a1 1
/*	$OpenBSD: version,v 1.1 2012/03/29 20:22:18 miod Exp $	*/
d22 3
d27 1
a27 1
static const char version[] = "1.2";
@


1.1
log
@Put more smarts into the limited bootblocks brain; they will now happily
recognize a kernel bootpath (when not autobooting) even if it does not start
with a /, and will also recognize when this is a full path (e.g.
bootp()mykernel), in which case OSLoadPartition does not need to be
prepended to the constructed path.

This will allow ELF kernels to be booted on ELF-unaware PROM with
bootp()bootecoff bootp()kernel
without doomed-to-fail tomfoolery to convert the 64-bit ELF kernel to a
32-bit ECOFF binary.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 4
d24 1
a24 1
static const char version[] = "1.1";
@

