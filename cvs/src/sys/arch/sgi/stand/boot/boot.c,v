head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.14
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.12
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.8
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.10
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.22.0.4
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.2
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.21.0.2
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.13.0.2
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.24
date	2014.02.22.20.27.21;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2013.12.28.02.51.07;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2012.09.29.21.40.48;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2012.05.25.11.31.04;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2012.03.29.20.22.18;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2012.03.19.17.38.31;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.09.20.46.33;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.14.16.57.15;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.14.16.55.10;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.30.05.19.20;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.24.13.31.41;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.05.30.03.59.27;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.14.18.57.43;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.20.18.12.19;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.28.02.50.02;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.08.16.52.28;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.11.10.28.20;	author jj;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.01.19.58.13;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.27.04.37.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.27.03.06.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.27.03.03.38;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.16.18.54.48;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.22.11.39;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.23.14.22.40;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.24
log
@/etc/random.seed support in the boot blocks (only when loading from disk).
@
text
@/*	$OpenBSD: boot.c,v 1.23 2013/12/28 02:51:07 deraadt Exp $ */

/*
 * Copyright (c) 2004 Opsycon AB, www.opsycon.se.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/stat.h>
#define _KERNEL
#include <sys/fcntl.h>
#undef _KERNEL

#include <lib/libkern/libkern.h>
#include <stand.h>

#include <mips64/arcbios.h>
#include <mips64/cpu.h>

#include <sys/exec_elf.h>
#undef ELFSIZE
#include "loadfile.h"

void	 dobootopts(int, char **);
void	 loadrandom(const char *, const char *, void *, size_t);
char	*strstr(char *, const char *);	/* strstr.c */

enum {
	AUTO_NONE,
	AUTO_YES,
	AUTO_NO,
	AUTO_MINI,
	AUTO_DEBUG
} bootauto = AUTO_NONE;
char *OSLoadPartition = NULL;
char *OSLoadFilename = NULL;

int	IP;

char   rnddata[BOOTRANDOM_MAX];

#include "version"

/*
 * OpenBSD/sgi Boot Loader.
 */
void
boot_main(int argc, char *argv[])
{
	u_long marks[MARK_MAX];
	u_int64_t *esym;
	char line[1024];
	u_long entry;
	int fd;
	extern int arcbios_init(void);

	IP = arcbios_init();
	printf("\nOpenBSD/sgi-IP%d ARCBios boot version %s\n", IP, version);
	/* we want to print IP20 but load IP22 */
	if (IP == 20)
		IP = 22;

	for (entry = 0; entry < argc; entry++)
		printf("arg %d: %s\n", entry, argv[entry]);

	dobootopts(argc, argv);
	if (OSLoadPartition == NULL) {
		/*
		 * Things are probably horribly wrong, or user has no idea
		 * what's he's doing.  Be nice lads and try to provide
		 * working defaults, which ought to work on all systems.
		 */
		OSLoadPartition = "disk(0)part(0)";
	}
	strlcpy(line, OSLoadPartition, sizeof(line));
	if (OSLoadFilename != NULL)
		strlcat(line, OSLoadFilename, sizeof(line));

	printf("Boot: %s\n", line);

	/*
	 * Try and load randomness if booting from a disk.
	 */
	
	if (bootauto != AUTO_MINI &&
	    strstr(OSLoadPartition, "bootp(") == NULL &&
	    strstr(OSLoadPartition, "cdrom(") == NULL) {
		loadrandom(OSLoadPartition, BOOTRANDOM, rnddata,
		    sizeof(rnddata));
	}

	/*
	 * Load the kernel and symbol table.
	 */

	marks[MARK_START] = 0;
	if ((fd = loadfile(line, marks, LOAD_KERNEL | COUNT_KERNEL)) != -1) {
		(void)close(fd);

		entry = marks[MARK_ENTRY];
#ifdef __LP64__
		esym = (u_int64_t *)marks[MARK_END];
#else
#undef  CKSEG0_BASE
#define CKSEG0_BASE	0xffffffff80000000ULL
		esym = (u_int64_t *)(uint32_t)PHYS_TO_CKSEG0(marks[MARK_END]);
#endif

		if (entry != 0)
			((void (*)())entry)(argc, argv, esym);
	}

	/* We failed to load the kernel. */
	panic("Boot FAILED!");
	/* NOTREACHED */
}

__dead void
_rtt()
{
	Bios_EnterInteractiveMode();
	for (;;) ;
}

/*
 * Decode boot options.
 */
void
dobootopts(int argc, char **argv)
{
	static char filenamebuf[1 + 32];
	char *SystemPartition = NULL;
	char *cp, *sep;
	int i;
	char *writein = NULL;

	for (i = 1; i < argc; i++) {
		cp = argv[i];
		if (cp == NULL)
			continue;
		if (strncmp(cp, "OSLoadOptions=", 14) == 0) {
			if (strcmp(&cp[14], "auto") == 0)
				bootauto = AUTO_YES;
			else if (strcmp(&cp[14], "single") == 0)
				bootauto = AUTO_NO;
			else if (strcmp(&cp[14], "mini") == 0)
				bootauto = AUTO_MINI;
			else if (strcmp(&cp[14], "debug") == 0)
				bootauto = AUTO_DEBUG;
		} else if (strncmp(cp, "OSLoadPartition=", 16) == 0)
			OSLoadPartition = &cp[16];
		else if (strncmp(cp, "OSLoadFilename=", 15) == 0)
			OSLoadFilename = &cp[15];
		else if (strncmp(cp, "SystemPartition=", 16) == 0)
			SystemPartition = &cp[16];
		else {
			/*
			 * Either a boot-related environment variable, or
			 * a boot write-in (boot path or options to the
			 * program being loaded).
			 */
			if (*cp == '-')
				continue;	/* options */
			if (strchr(cp, '=') != NULL)
				continue;	/* variable (or bad choice */
						/* of filename) */
			if (writein == NULL)
				writein = cp;
		}
	}

	switch (bootauto) {
	case AUTO_NONE:
		/* If "OSLoadOptions=" is missing, use boot path if given. */
		if (writein != NULL) {
			/* check for a possible path component */
			sep = strchr(writein, '(');
			if (sep != NULL && strchr(sep, ')') != NULL) {
				/* looks like this is a full path */
				OSLoadPartition = "";
			} else {
				/* relative path, keep OSLoadPartition */
			}
			OSLoadFilename = writein;
		}
		break;
	case AUTO_MINI:
	    {
		static char loadpart[64];
		char *p;

		strlcpy(loadpart, argv[0], sizeof loadpart);
		if ((p = strstr(loadpart, "partition(8)")) != NULL) {
			p += strlen("partition(");
		} else if (strncmp(loadpart, "dksc(", 5) == 0) {
			p = strstr(loadpart, ",8)");
			if (p != NULL)
				p++;
		} else
			p = NULL;

		if (p != NULL) {
			p[0] = '0';
			p[2] = '\0';
			snprintf(filenamebuf, sizeof filenamebuf,
			    "/bsd.rd.IP%d", IP);
			OSLoadPartition = loadpart;
			OSLoadFilename = filenamebuf;
		}
	    }
		break;
	default:
		break;
	}
}

/*
 * Prevent loading a wrong kernel.
 */
int
check_phdr(void *v)
{
	Elf64_Phdr *phdr = (Elf64_Phdr *)v;
	uint64_t addr;

	switch (IP) {
	case 22:
		addr = 0xffffffff88000000ULL >> 24;
		break;
	case 26:
		addr = 0xa800000008000000ULL >> 24;
		break;
	case 27:
		addr = 0xa800000000000000ULL >> 24;
		break;
	case 28:
	case 30:
		addr = 0xa800000020000000ULL >> 24;
		break;
	case 32:
		addr = 0xffffffff80000000ULL >> 24;
		break;
	default:
		/*
		 * If the system could not be identified, accept any
		 * address and hope the user knows what's he's doing.
		 */
		return 0;
	}

	if ((phdr->p_vaddr >> 24) != addr) {
		/* I'm sorry Dave, I can't let you do that. */
		printf("This kernel does not seem to be compiled for this"
		    " machine type.\nYou need to boot an IP%d kernel.\n", IP);
		return 1;
	}

	return 0;
}

/*
 * Load the saved randomness file.
 */
void
loadrandom(const char *partition, const char *name, void *buf, size_t buflen)
{
	char path[MAXPATHLEN];
	struct stat sb;
	int fd;

	strlcpy(path, partition, sizeof path);
	strlcat(path, name, sizeof path);

	fd = open(path, O_RDONLY);
	if (fd == -1) {
		if (errno != EPERM)
			printf("cannot open %s: %s\n", path, strerror(errno));
		return;
	}
	if (fstat(fd, &sb) == -1 || sb.st_uid != 0 || !S_ISREG(sb.st_mode) ||
	    (sb.st_mode & (S_IWOTH|S_IROTH)))
		goto fail;
	(void) read(fd, buf, buflen);
fail:
	close(fd);
}
@


1.23
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.22 2012/09/29 21:40:48 miod Exp $ */
d30 5
d45 3
a47 4
char *strstr(char *, const char *);	/* strstr.c */

int	main(int, char **);
void	dobootopts(int, char **);
d61 1
a61 1
char   rnddata[BOOTRANDOM_MAX];		/* XXX dummy */
d103 11
d136 1
d280 27
@


1.22
log
@Bring the `let decide ARCBios address at runtime' code to the SGI bootblocks,
which allows them to run on IP26 (POWER Indigo2 R8000).

Crank boot blocks version.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.21 2012/05/25 11:31:04 miod Exp $ */
d56 2
@


1.21
log
@Support for the POWER Indigo2 R10000 systems (IP28). Currently running with
ECC checking disabled, which allows the existing Indigo2 drivers to run
unmodified.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.20 2012/03/29 20:22:18 miod Exp $ */
d62 2
a63 2
int
main(int argc, char *argv[])
d232 3
@


1.20
log
@Put more smarts into the limited bootblocks brain; they will now happily
recognize a kernel bootpath (when not autobooting) even if it does not start
with a /, and will also recognize when this is a full path (e.g.
bootp()mykernel), in which case OSLoadPartition does not need to be
prepended to the constructed path.

This will allow ELF kernels to be booted on ELF-unaware PROM with
bootp()bootecoff bootp()kernel
without doomed-to-fail tomfoolery to convert the 64-bit ELF kernel to a
32-bit ECOFF binary.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.19 2012/03/19 17:38:31 miod Exp $ */
d236 1
@


1.19
log
@Teach the bootblocks how to load kernel from tftp (i.e. when OSLoadPartition
is bootp() instead of a disk). Kind of ugly because of the usual `can't seek'
problem causing kernels with symbols to be read from the network twice.

While there, add a 32 bit ECOFF boot block, not hooked to the build yet,
to be used shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.18 2011/04/09 20:46:33 miod Exp $ */
a51 1

d54 1
d57 2
d73 4
d78 2
a79 1
	printf("\nOpenBSD/sgi-IP%d ARCBios boot\n", IP);
d82 11
a92 9
	if (OSLoadPartition != NULL) {
		strlcpy(line, OSLoadPartition, sizeof(line));
		if (OSLoadFilename != NULL)
			strlcat(line, OSLoadFilename, sizeof(line));
	} else
		strlcpy(line, "invalid argument setup", sizeof(line));

	for (entry = 0; entry < argc; entry++)
		printf("arg %d: %s\n", entry, argv[entry]);
d136 1
a136 1
	char *cp;
d138 1
d159 14
d175 17
a191 5
	/* If "OSLoadOptions=" is missing, see if any arg was given. */
	if (bootauto == AUTO_NONE && *argv[1] == '/')
		OSLoadFilename = argv[1];

	if (bootauto == AUTO_MINI) {
d213 4
a229 1
	case 20:
d231 1
a231 1
		addr = 0xffffffff88000000ULL >> 28;
d234 1
a234 1
		addr = 0xa800000000000000ULL >> 28;
d237 1
a237 1
		addr = 0xa800000020000000ULL >> 28;
d240 1
a240 1
		addr = 0xffffffff80000000ULL >> 28;
d250 1
a250 1
	if ((phdr->p_vaddr >> 28) != addr) {
@


1.18
log
@Make this compile without warnings in all modes, and do not use NULL when
integer zero is intended.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.17 2010/09/14 16:57:15 miod Exp $ */
d190 4
@


1.17
log
@Undo unrelated changes commitedby mistake.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.15 2009/11/30 05:19:20 miod Exp $ */
a29 1
#include <sys/stat.h>
d37 1
d101 1
a101 1
		esym = (u_int64_t *)PHYS_TO_CKSEG0(marks[MARK_END]);
d104 1
a104 1
		if (entry != NULL)
@


1.16
log
@Force .rodata.str1.4 section to be merged into .text for the 32-bit bootblocks,
fallout from using -mno-abicalls noticed by jsing@@
@
text
@d151 3
a153 5
	/* If "OSLoadFilename=" is missing, see if any arg was given. */
	if (bootauto == AUTO_NONE) {
		if (*argv[1] == '/')
			OSLoadFilename = argv[1];
	}
@


1.15
log
@Use the new Elfxx_Phdr check hook to prevent loading a kernel not compiled
for the platform we are running on (i.e. trying to boot e.g. bsd.IP32 on an
IP27 machine).
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.14 2009/11/24 13:31:41 miod Exp $ */
d151 5
a155 3
	/* If "OSLoadOptions=" is missing, see if any arg was given. */
	if (bootauto == AUTO_NONE && *argv[1] == '/')
		OSLoadFilename = argv[1];
@


1.14
log
@KSEG->CKSEG fallout.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.13 2009/05/30 03:59:27 miod Exp $ */
d37 1
d178 37
@


1.13
log
@When booting in `install software' mode from the SGI boot menu, do not try to
load bsd.rd but bsd.rd.IP## matching the IP code of the machine.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.12 2009/05/14 18:57:43 miod Exp $ */
d98 3
a100 3
#undef  KSEG0_BASE
#define KSEG0_BASE	0xffffffff80000000ULL
		esym = (u_int64_t *)PHYS_TO_KSEG0(marks[MARK_END]);
@


1.12
log
@In addition to the existing IP32 boot block, build a real 64 bit boot block
as a relocatable object, suitable for IP27/IP30/IP35.

Boot blocks are now found is /usr/mdec/boot{32,64}, with boot-IP## being
hard links to them for easy boot block pick.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.11 2008/05/20 18:12:19 jsing Exp $ */
d31 1
d39 2
d54 1
d66 4
a69 2
	int fd, i;
	extern void arcbios_init(void);
d71 1
a71 1
	arcbios_init();
a75 1
		i = strlen(line);
d77 1
a77 1
			strlcpy(&line[i], OSLoadFilename, sizeof(line) - i - 1);
d79 1
a79 1
		strlcpy("invalid argument setup", line, sizeof(line));
a83 2
	printf("\nOpenBSD/sgi ARCBios boot\n");

d115 1
d124 1
d161 8
d171 2
d174 1
a174 9
			OSLoadFilename = "/bsd.rd";
		} else if (strncmp(loadpart, "dksc(", 5) == 0) {
			p = strstr(loadpart, ",8)");
			if (p != NULL) {
				p[1] = '0';
				p[3] = '\0';
				OSLoadPartition = loadpart;
				OSLoadFilename = "/bsd.rd";
			}
@


1.11
log
@Change the OpenBSD/sgi boot loader so that we use libsa loadfile(), rather
than rolling our own load functions.

tested jasper@@, feedback and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.10 2008/03/28 02:50:02 jsing Exp $ */
a30 2
#include <sys/exec.h>
#include <sys/exec_elf.h>
d63 3
d105 6
a110 1
	printf("Boot FAILED!\n");
d154 1
a154 2
		p = strstr(loadpart, "partition(8)");
		if (p) {
d156 2
a157 1
			p[0] = '0'; p[2] = 0;
d160 8
@


1.10
log
@If we fail to load the kernel, drop the user into interactive mode of ARCS,
rather than just rebooting.

ok deraadt@@, miod@@, jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.9 2008/03/08 16:52:28 jsing Exp $ */
d36 1
d38 1
a38 3
void	gets(char *);
ssize_t	read(int, void *, size_t);
int	close(int);
a41 5
Elf32_Addr loadfile(char *);
Elf32_Addr loadfile32(int, Elf32_Ehdr *);
Elf32_Addr loadfile64(int, Elf64_Ehdr *);
int	loadsymtab32(int, Elf32_Ehdr *, int);
int	loadsymtab64(int, Elf64_Ehdr *, int);
a53 25
unsigned long tablebase;

static void *
readtable(int fd, int offs, void *base, int size, char *name, int flags)
{
	if (lseek(fd, offs, SEEK_SET) != offs ||
	    read(fd, base, size) != size) {
		printf("\nCannot read %s table!", name);
		return (0);
	}
	return ((void *) base);
}

static void *
gettable(int size, char *name, int flags, size_t align)
{
	long base;

	/* Put table after loaded code to support kernel DDB. */
	tablebase = roundup(tablebase, align);
	base = tablebase;
	tablebase += size;
	return ((void *) base);
}

d55 1
a55 1
 * OpenBSD/sgi boot loader.
d60 2
d63 2
a64 2
	int i;
	Elf32_Addr entry;
d82 20
a101 3
	entry = loadfile(line);
	if (entry != NULL)
		((void (*)())entry)(argc, argv);
a155 362
}

/*
 * Open 'filename', read in program and return the entry point or -1 if error.
 */
Elf32_Addr
loadfile(register char *fname)
{
	union {
		Elf32_Ehdr eh32;
		Elf64_Ehdr eh64;
	} eh;
	int fd;
	Elf32_Addr entry = NULL;

	if ((fd = open(fname, 0)) < 0) {
		printf("Cannot open file %s!\n", fname);
		return (NULL);
	}

	/* Read the ELF header and check that it IS an ELF header. */
	if (read(fd, (char *)&eh, sizeof(eh)) != sizeof(eh)) {
		printf("Error: ELF header read error.\n");
		return (NULL);
	}
	if (!IS_ELF(eh.eh32)) {
		printf("Not an ELF file.\n");
		return (NULL);
	}

	/* Determine CLASS. */
	if (eh.eh32.e_ident[EI_CLASS] == ELFCLASS32)
		entry = loadfile32(fd, (void *)&eh);
	else if (eh.eh32.e_ident[EI_CLASS] == ELFCLASS64)
		entry = loadfile64(fd, (void *)&eh);
	else
		printf("Unknown ELF class.\n");
	
	return (entry);
}

Elf32_Addr
loadfile32(int fd, Elf32_Ehdr *eh)
{
	char buf[4096];
	Elf32_Phdr *ph;
	int i;

	ph = (Elf32_Phdr *) buf;
	lseek(fd, eh->e_phoff, 0);
	if (read(fd, (char *)ph, 4096) != 4096) {
		printf("Unexpected EOF!\n");
		return (NULL);
	}

	tablebase = 0;
	printf("Loading ELF32 file\n");

	for (i = 0; i < eh->e_phnum; i++, ph++) {
		if (ph->p_type == PT_LOAD) {
			lseek(fd, ph->p_offset, 0);
			printf("0x%x:0x%x, ",(long)ph->p_paddr, (long)ph->p_filesz);
			if (read(fd, (char *)ph->p_paddr,
			    ph->p_filesz) != ph->p_filesz) {
				printf("Unexpected EOF!\n");
				return (NULL);
			}
			if (ph->p_memsz > ph->p_filesz) {
				printf("Zero 0x%x:0x%x, ",
				    (long)(ph->p_paddr + ph->p_filesz),
				    (long)(ph->p_memsz - ph->p_filesz));
				bzero((void *)(ph->p_paddr + ph->p_filesz),
				    ph->p_memsz - ph->p_filesz);
			}
			if ((ph->p_paddr + ph->p_memsz) > tablebase)
				tablebase = ph->p_paddr + ph->p_memsz;
		}
	}
	memset((void *)tablebase, 0, 4096);
	loadsymtab32(fd, eh, 0);
	printf("Start at 0x%x\n", eh->e_entry);
	return(eh->e_entry);
}

Elf32_Addr
loadfile64(int fd, Elf64_Ehdr *eh)
{
	char buf[4096];
	Elf64_Phdr *ph;
	int i;

	ph = (Elf64_Phdr *) buf;
	lseek(fd, eh->e_phoff, 0);
	if (read(fd, (char *)ph, 4096) != 4096) {
		printf("Unexpected EOF!\n");
		return (NULL);
	}

	tablebase = 0;
	printf("Loading ELF64 file\n");

	for (i = 0; i < eh->e_phnum; i++, ph++) {
		if (ph->p_type == PT_LOAD) {
			lseek(fd, ph->p_offset, 0);
			printf("0x%llx:0x%llx, ",ph->p_paddr, ph->p_filesz);
			if (read(fd, (char *)(long)ph->p_paddr,
			    ph->p_filesz) != ph->p_filesz) {
				printf("Unexpected EOF!\n");
				return (NULL);
			}
			if (ph->p_memsz > ph->p_filesz) {
				printf("Zero 0x%llx:0x%llx, ",
				    ph->p_paddr + ph->p_filesz,
				    ph->p_memsz - ph->p_filesz);
				bzero((void *)(long)(ph->p_paddr + ph->p_filesz),
				    ph->p_memsz - ph->p_filesz);
			}
			if ((ph->p_paddr + ph->p_memsz) > tablebase)
				tablebase = ph->p_paddr + ph->p_memsz;
		}
	}
	memset((void *)tablebase, 0, 4096);
	loadsymtab64(fd, eh, 0);
	printf("Start at 0x%llx\n", eh->e_entry);
	return(eh->e_entry);
}

int
loadsymtab32(int fd, Elf32_Ehdr *eh, int flags)
{
	Elf32_Ehdr *keh;
	Elf32_Shdr *shtab;
	Elf32_Shdr *sh, *ksh, *shstrh, *strh;
	Elf32_Sym *symtab;
	int *symptr;
	char *shstrtab, *strtab, *symend;
	int i, nsym, offs, size;

	printf("Loading symbol table\n");
	size =  eh->e_shnum * sizeof(Elf32_Shdr);
	shtab = (Elf32_Shdr *) alloc(size);
	if (lseek (fd, eh->e_shoff, SEEK_SET) != eh->e_shoff ||
	    read (fd, shtab, size) != size) {
		printf("Seek to section headers failed.\n");
		return (-1);
        }

	tablebase = roundup(tablebase, sizeof(long));
	symptr = (int *)tablebase;
	tablebase = roundup(tablebase, 4096);
	keh = (Elf32_Ehdr *)tablebase;
	tablebase += sizeof(Elf32_Ehdr);
	tablebase = roundup(tablebase, sizeof(long));
	ksh = (Elf32_Shdr *)tablebase;
	tablebase += roundup((sizeof(Elf32_Shdr) * eh->e_shnum), sizeof(long));
	memcpy(ksh, shtab, roundup((sizeof(Elf32_Shdr) * eh->e_shnum), sizeof(long)));
	sh = ksh;

	shstrh = &sh[eh->e_shstrndx];

	for (i = 0; i < eh->e_shnum; sh++, i++) {
		if (sh->sh_type == SHT_SYMTAB)
			break;
	}
	if (i >= eh->e_shnum) {
		printf("No symbol table found!\n");
		return (-1);
	}

	strh = &ksh[sh->sh_link];
	nsym = sh->sh_size / sh->sh_entsize;
	offs = sh->sh_offset;
	size = sh->sh_size;

	/*
	 * Allocate tables in correct order so that the kernel groks it.
	 * Then we read them in the order they are in the ELF file.
	 */
	shstrtab = gettable(shstrh->sh_size, "shstrtab", flags, sizeof(long));
	strtab = gettable(strh->sh_size, "strtab", flags, sizeof(long));
	symtab = gettable(size, "symtab", flags, sizeof(long));
	symend = (char *)symtab + size;

        do {
		if(shstrh->sh_offset < offs && shstrh->sh_offset < strh->sh_offset) {
#if 0
			/*
			 * We would like to read the shstrtab from the file
			 * but since this table is located in front of the shtab
			 * it is already gone. We can't position backwards
			 * outside the current segment when using tftp.
			 * Instead we create the names we need in the string
			 * table because it can be reconstructed from the info
			 * we now have access to.
			 */
			if (!readtable (shstrh->sh_offset, (void *)shstrtab,
			    shstrh->sh_size, "shstring", flags))
				return(0);
#else
			memset(shstrtab, 0, shstrh->sh_size);
			strncpy(shstrtab + shstrh->sh_name, ".shstrtab", 10);
			strncpy(shstrtab + strh->sh_name, ".strtab", 10);
			strncpy(shstrtab + sh->sh_name, ".symtab", 10);
#endif
			shstrh->sh_offset = 0x7fffffff;
		}

		if (offs < strh->sh_offset && offs < shstrh->sh_offset) {
			if (!(readtable(fd, offs, (void *)symtab, size,
			    "sym", flags)))
				return (0);
			offs = 0x7fffffff;
		}

		if (strh->sh_offset < offs && strh->sh_offset < shstrh->sh_offset) {
			if (!(readtable (fd, strh->sh_offset, (void *)strtab,
			    strh->sh_size, "string", flags)))
				return (0);
			strh->sh_offset = 0x7fffffff;
		}
		if (offs == 0x7fffffff && strh->sh_offset == 0x7fffffff &&
		    shstrh->sh_offset == 0x7fffffff)
			break;
	} while (1);

	/*
	 * Update the kernel headers with the current info.
	 */
	shstrh->sh_offset = (Elf32_Off)shstrtab - (Elf32_Off)keh;
	strh->sh_offset = (Elf32_Off)strtab - (Elf32_Off)keh;
	sh->sh_offset = (Elf32_Off)symtab - (Elf32_Off)keh;
	memcpy(keh, eh, sizeof(Elf32_Ehdr));
	keh->e_phoff = 0;
	keh->e_shoff = sizeof(Elf32_Ehdr);
	keh->e_phentsize = 0;
	keh->e_phnum = 0;

	symptr[0] = (int)keh;
	symptr[1] = roundup((int)symend, sizeof(int));

	return(0);
}

int
loadsymtab64(int fd, Elf64_Ehdr *eh, int flags)
{
	Elf64_Ehdr *keh;
	Elf64_Shdr *shtab;
	Elf64_Shdr *sh, *ksh, *shstrh, *strh;
	Elf64_Sym *symtab;
	u_int64_t *symptr;
	char *shstrtab, *strtab, *symend;
	int i, nsym;
	Elf64_Xword size;
	Elf64_Off offs;

	printf("Loading symbol table\n");
	size =  eh->e_shnum * sizeof(Elf64_Shdr);
	shtab = (Elf64_Shdr *) alloc(size);
	if (lseek (fd, (int)eh->e_shoff, SEEK_SET) != (int)eh->e_shoff ||
	    read (fd, shtab, size) != size) {
		printf("Seek to section headers failed.\n");
		return (-1);
        }

	tablebase = roundup(tablebase, sizeof(u_int64_t));
	symptr = (u_int64_t *)tablebase;
	tablebase = roundup(tablebase, 4096);
	keh = (Elf64_Ehdr *)tablebase;
	tablebase += sizeof(Elf64_Ehdr);
	tablebase = roundup(tablebase, sizeof(u_int64_t));
	ksh = (Elf64_Shdr *)tablebase;
	tablebase += roundup((sizeof(Elf64_Shdr) * eh->e_shnum), sizeof(u_int64_t));
	memcpy(ksh, shtab, roundup((sizeof(Elf64_Shdr) * eh->e_shnum),
	    sizeof(u_int64_t)));
	sh = ksh;

	shstrh = &sh[eh->e_shstrndx];

	for (i = 0; i < eh->e_shnum; sh++, i++) {
		if (sh->sh_type == SHT_SYMTAB) {
			break;
		}
	}
	if (i >= eh->e_shnum) {
		printf("No symbol table found!\n");
		return (-1);
	}

	strh = &ksh[sh->sh_link];
	nsym = sh->sh_size / sh->sh_entsize;
	offs = sh->sh_offset;
	size = sh->sh_size;

	/*
	 * Allocate tables in correct order so that the kernel groks it.
	 * Then we read them in the order they are in the ELF file.
	 */
	shstrtab = gettable(shstrh->sh_size, "shstrtab", flags, sizeof(u_int64_t));
	strtab = gettable(strh->sh_size, "strtab", flags, sizeof(u_int64_t));
	symtab = gettable(size, "symtab", flags, sizeof(u_int64_t));
	symend = (char *)symtab + size;

        do {
		if(shstrh->sh_offset < offs && shstrh->sh_offset < strh->sh_offset) {
#if 0
			/*
			 * We would like to read the shstrtab from the file
			 * but since this table is located in front of the shtab
			 * it is already gone. We can't position backwards
			 * outside the current segment when using tftp.
			 * Instead we create the names we need in the string
			 * table because it can be reconstructed from the
			 * info we now have access to.
			 */
			if (!readtable (shstrh->sh_offset, (void *)shstrtab,
			    shstrh->sh_size, "shstring", flags))
				return (0);
#else
			memset(shstrtab, 0, shstrh->sh_size);
			strncpy(shstrtab + shstrh->sh_name, ".shstrtab", 10);
			strncpy(shstrtab + strh->sh_name, ".strtab", 10);
			strncpy(shstrtab + sh->sh_name, ".symtab", 10);
#endif
			shstrh->sh_offset = 0x7fffffff;
		}

		if (offs < strh->sh_offset && offs < shstrh->sh_offset) {
			if (!(readtable(fd, offs, (void *)symtab,
			    size, "sym", flags)))
				return (0);
			offs = 0x7fffffff;
		}

		if (strh->sh_offset < offs && strh->sh_offset < shstrh->sh_offset) {
			if (!(readtable (fd, strh->sh_offset, (void *)strtab,
			    strh->sh_size, "string", flags))) {
				return (0);
			}
			strh->sh_offset = 0x7fffffff;
		}
		if (offs == 0x7fffffff && strh->sh_offset == 0x7fffffff &&
		    shstrh->sh_offset == 0x7fffffff)
			break;
	} while (1);

	/*
	 * Update the kernel headers with the current info.
	 */
	shstrh->sh_offset = (Elf64_Off)(long)shstrtab - (Elf64_Off)(long)keh;
	strh->sh_offset = (Elf64_Off)(long)strtab - (Elf64_Off)(long)keh;
	sh->sh_offset = (Elf64_Off)(long)symtab - (Elf64_Off)(long)keh;
	memcpy(keh, eh, sizeof(Elf64_Ehdr));
	keh->e_phoff = 0;
	keh->e_shoff = sizeof(Elf64_Ehdr);
	keh->e_phentsize = 0;
	keh->e_phnum = 0;

	symptr[0] = (Elf64_Off)keh;
	symptr[1] = (Elf64_Off)roundup((Elf64_Off)symend, sizeof(u_int64_t));

	return (0);
@


1.9
log
@Cleanup/style(9) code and comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.7 2005/08/01 19:58:13 kettenis Exp $ */
d116 2
a117 2
	printf("Boot FAILED!\n                ");
	Bios_Restart();
@


1.8
log
@simple misspell, miod@@ ok
@
text
@d37 3
a39 3
void gets(char *);
ssize_t read(int, void *, size_t);
int close(int);
d41 2
a42 2
int main(int, char **);
void dobootopts(int, char **);
d46 2
a47 2
int loadsymtab32(int, Elf32_Ehdr *, int);
int loadsymtab64(int, Elf64_Ehdr *, int);
d56 1
d67 2
a68 2
		printf("\ncannot read %s table", name);
		return 0;
d70 1
a70 1
	return (void *) base;
d78 1
a78 1
	/* Put table after loaded code to support kernel DDB */
d82 1
a82 1
	return (void *) base;
d86 1
d91 2
a92 2
	char  line[1024];
	int   i;
d100 1
a100 1
			strlcpy(&line[i], OSLoadFilename, sizeof(line) - i -1);
d106 2
a107 1
	printf("\nOpenBSD/sgi Arcbios boot\n");
d114 2
d121 1
a121 1
 *  Decode boot options.
d150 2
a151 1
	/* If "OSLoadOptions=" is missing, see if any arg was given */
d174 1
a174 2
loadfile(fname)
	register char *fname;
d181 1
a181 1
	Elf32_Addr entry;
d184 2
a185 2
		printf("can't open file %s\n", fname);
		return NULL;
d188 1
a188 1
	/* read the ELF header and check that it IS an ELF header */
d190 2
a191 2
		printf("error: ELF header read error\n");
		return NULL;
d194 2
a195 2
		printf("not an elf file\n");
		return NULL;
d198 1
a198 1
	/* Determine CLASS */
d203 4
a206 5
	else {
		printf("unknown ELF class\n");
		return NULL;
	}
	return entry;
d219 2
a220 2
		printf("unexpected EOF\n");
		return NULL;
d232 2
a233 2
				printf("unexpected EOF\n");
				return NULL;
d235 1
a235 1
			if(ph->p_memsz > ph->p_filesz) {
d242 1
a242 1
			if((ph->p_paddr + ph->p_memsz) > tablebase)
d262 2
a263 2
		printf("unexpected EOF\n");
		return NULL;
d275 2
a276 2
				printf("unexpected EOF\n");
				return NULL;
d278 1
a278 1
			if(ph->p_memsz > ph->p_filesz) {
d285 1
a285 1
			if((ph->p_paddr + ph->p_memsz) > tablebase)
d312 1
a312 1
		return -1;
d334 1
a334 1
		return -1;
d343 2
a344 2
	 *  Allocate tables in correct order so the kernel groks it.
	 *  Then we read them in the order they are in the ELF file.
d391 1
a391 1
	} while(1);
d394 1
a394 1
	 *  Update the kernel headers with the current info.
a408 1

d430 1
a430 1
		return -1;
d454 1
a454 1
		return -1;
d463 2
a464 2
	 *  Allocate tables in correct order so the kernel groks it.
	 *  Then we read them in the order they are in the ELF file.
d485 1
a485 1
				return(0);
d512 1
a512 1
	} while(1);
d515 1
a515 1
	 *  Update the kernel headers with the current info.
d529 1
a529 2
	return(0);

@


1.7
log
@Create installation media that is recognized as such by the PROM.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.6 2005/04/27 04:37:33 deraadt Exp $ */
d339 1
a339 1
	 *  Allocate tables in correct order so the kernel grooks it.
d460 1
a460 1
	 *  Allocate tables in correct order so the kernel grooks it.
@


1.6
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.5 2005/04/27 03:06:23 deraadt Exp $ */
d49 7
a55 1
enum { AUTO_NONE, AUTO_YES, AUTO_NO, AUTO_DEBUG } bootauto = AUTO_NONE;
d134 2
d149 11
a159 15
	if (SystemPartition) {
		printf("SystemPartition %s\n", SystemPartition);
		if (strstr(SystemPartition, ")cdrom(")) {
			static char syspart[64];
			char *p;

			strlcpy(syspart, SystemPartition, sizeof syspart);
			p = strstr(syspart, "partition(");
			if (p) {
				p += strlen("partition(");
				if (*p == '8')
					*p = '0';
			}
			OSLoadPartition = syspart;
			printf("new OSLoadPartition=%s\n", OSLoadPartition);
@


1.5
log
@if SystemPartition contains a cdrom boot specifier, whack the
OSLoadPartition variable to point to partition 0 of the same unit.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.4 2005/04/27 03:03:38 deraadt Exp $ */
d67 1
a67 1
gettable (int size, char *name, int flags, size_t align)
d70 1
d81 1
a81 3
main(argc, argv)
	int argc;
	char **argv;
d103 1
a103 1
	if (entry != NULL) {
a104 1
	}
d146 1
a146 1
	
d222 2
a223 1
			if (read(fd, (char *)ph->p_paddr, ph->p_filesz) !=  ph->p_filesz) {
d229 2
a230 2
					(long)(ph->p_paddr + ph->p_filesz),
					(long)(ph->p_memsz - ph->p_filesz));
d232 1
a232 1
					ph->p_memsz - ph->p_filesz);
d234 1
a234 1
			if((ph->p_paddr + ph->p_memsz) > tablebase) {
a235 1
			}
d265 2
a266 1
			if (read(fd, (char *)(long)ph->p_paddr, ph->p_filesz) !=  ph->p_filesz) {
d272 2
a273 2
					ph->p_paddr + ph->p_filesz,
					ph->p_memsz - ph->p_filesz);
d275 1
a275 1
					ph->p_memsz - ph->p_filesz);
d277 1
a277 1
			if((ph->p_paddr + ph->p_memsz) > tablebase) {
a278 1
			}
d321 1
a321 1
		if (sh->sh_type == SHT_SYMTAB) {
a322 1
		}
d347 7
a353 5
			 *  We would like to read the shstrtab from the file but since this
			 *  table is located in front of the shtab it is already gone. We can't
			 *  position backwards outside the current segment when using tftp.
			 *  Instead we create the names we need in the string table because
			 *  it can be reconstructed from the info we now have access to.
d356 1
a356 1
					shstrh->sh_size, "shstring", flags)) {
a357 1
			}
d367 3
a369 2
			if (offs < strh->sh_offset && offs < shstrh->sh_offset) {
			if (!(readtable(fd, offs, (void *)symtab, size, "sym", flags))) {
a370 1
			}
d375 2
a376 2
		if (!(readtable (fd, strh->sh_offset, (void *)strtab,
					 strh->sh_size, "string", flags))) {
a377 1
			}
d381 1
a381 1
		    shstrh->sh_offset == 0x7fffffff) {
a382 1
		}
d434 2
a435 1
	memcpy(ksh, shtab, roundup((sizeof(Elf64_Shdr) * eh->e_shnum), sizeof(u_int64_t)));
d468 7
a474 5
			 *  We would like to read the shstrtab from the file but since this
			 *  table is located in front of the shtab it is already gone. We can't
			 *  position backwards outside the current segment when using tftp.
			 *  Instead we create the names we need in the string table because
			 *  it can be reconstructed from the info we now have access to.
d477 1
a477 1
					shstrh->sh_size, "shstring", flags)) {
a478 1
			}
d488 3
a490 2
			if (offs < strh->sh_offset && offs < shstrh->sh_offset) {
			if (!(readtable(fd, offs, (void *)symtab, size, "sym", flags))) {
a491 1
			}
d496 2
a497 2
		if (!(readtable (fd, strh->sh_offset, (void *)strtab,
					 strh->sh_size, "string", flags))) {
d503 1
a503 1
		    shstrh->sh_offset == 0x7fffffff) {
a504 1
		}
@


1.4
log
@avoid the o{open,read,lseek} interfaces, and use the regular ones, because
we want to be able to handle gzip files
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3 2004/09/16 18:54:48 pefo Exp $ */
a96 2
	printf("\nOpenBSD/sgi Arcbios boot\n");

d99 1
d117 1
a120 1
	/* XXX Should this be done differently, eg env vs. args? */
a124 1

d127 1
a127 1
					bootauto = AUTO_YES;
d129 1
a129 1
					bootauto = AUTO_NO;
d131 2
a132 3
					bootauto = AUTO_DEBUG;
		}
		else if (strncmp(cp, "OSLoadPartition=", 16) == 0)
d136 2
d142 18
@


1.3
log
@Update boot with miods ELF64 symtab fixes and my 32 bit compiles
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2 2004/09/09 22:11:39 pefo Exp $ */
d56 1
a56 1
readtable (int fd, int offs, void *base, int size, char *name, int flags)
d58 2
a59 2
	if (olseek(fd, offs, SEEK_SET) != offs ||
	    oread(fd, base, size) != size) {
d159 1
a159 1
	if ((fd = oopen(fname, 0)) < 0) {
d165 1
a165 1
	if (oread(fd, (char *)&eh, sizeof(eh)) != sizeof(eh)) {
d194 2
a195 2
	olseek(fd, eh->e_phoff, 0);
	if (oread(fd, (char *)ph, 4096) != 4096) {
d205 1
a205 1
			olseek(fd, ph->p_offset, 0);
d207 1
a207 1
			if (oread(fd, (char *)ph->p_paddr, ph->p_filesz) !=  ph->p_filesz) {
d237 2
a238 2
	olseek(fd, eh->e_phoff, 0);
	if (oread(fd, (char *)ph, 4096) != 4096) {
d248 1
a248 1
			olseek(fd, ph->p_offset, 0);
d250 1
a250 1
			if (oread(fd, (char *)(long)ph->p_paddr, ph->p_filesz) !=  ph->p_filesz) {
d286 2
a287 2
	if (olseek (fd, eh->e_shoff, SEEK_SET) != eh->e_shoff ||
	    oread (fd, shtab, size) != size) {
d407 2
a408 2
	if (olseek (fd, (int)eh->e_shoff, SEEK_SET) != (int)eh->e_shoff ||
	    oread (fd, shtab, size) != size) {
@


1.2
log
@Kernel moves to 64 bit. A few more tweaks when binutils is updated.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.1 2004/08/23 14:22:40 pefo Exp $ */
a36 1

d46 2
a47 1
int loadsymtab(int, Elf32_Ehdr *, int);
d67 1
a67 1
gettable (int size, char *name, int flags)
d71 1
a71 1
	tablebase = roundup(tablebase, sizeof(long));
a84 1
	char *cp;
a105 1
		printf("start at 0x%x\n", entry);
d156 1
a156 1
	int fd, i;
a157 1
	char *errs = 0;
d224 2
a225 1
	loadsymtab(fd, eh, 0);
d249 1
a249 1
			printf("0x%x:0x%x, ",ph->p_paddr, ph->p_filesz);
d255 1
a255 1
				printf("Zero 0x%x:0x%x, ",
d267 2
a268 1
//	loadsymtab(fd, &eh, 0);
a271 2


d273 1
a273 1
loadsymtab(int fd, Elf32_Ehdr *eh, int flags)
d283 1
d324 3
a326 3
	shstrtab = gettable(shstrh->sh_size, "shstrtab", flags);
	strtab = gettable(strh->sh_size, "strtab", flags);
	symtab = gettable(size, "symtab", flags);
d386 121
@


1.1
log
@disk boot and tools for sgi
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a40 2
void pmon_write(int, char *, int);
void pmon_synccache(void);
d42 10
a51 3
int main(int, char **, char **);
int loadfile(char *);
int loadsymtab(int fd, Elf32_Ehdr *eh, int flags);
d80 1
a80 1
main(argc, argv, envp)
a82 1
	char **envp;
d84 1
d86 2
a87 4
	int   i, ask, entry;
	char  line[1024];

	ask = 0;
d89 3
a91 3
	cp = Bios_GetEnvironmentVariable("OSLoadPartition");
	if (cp != NULL) {
		strncpy(line, cp, sizeof(line));
d93 2
a94 5
		cp = Bios_GetEnvironmentVariable("OSLoadFilename");
		if (cp != NULL)
			strncpy(&line[i], cp, sizeof(line) - i -1);
		else
			ask = 1;
d96 1
a96 1
		ask = 1;
d103 33
a135 13
	while (1) {
		do {
			printf("Boot: ");
			if (ask) {
				gets(line);
			}
			else
				printf("%s\n", line);
		} while(ask && line[0] == '\0');

		entry = loadfile(line);
		if (entry != -1) {
			((void (*)())entry)(argc, argv);
d137 4
a140 1
		ask = 1;
d142 3
a144 1
	return(0);
d150 1
a150 1
int
d154 4
d159 1
a159 2
	Elf32_Ehdr eh;
	Elf32_Phdr *ph;
a160 1
	char buf[4096];
d163 12
a174 2
		errs="open err: %s\n";
		goto err;
d177 8
a184 3
	/* read the elf header */
	if(oread(fd, (char *)&eh, sizeof(eh)) != sizeof(eh)) {
		goto serr;
d186 9
d197 46
a242 3
	olseek(fd, eh.e_phoff, 0);
	if(oread(fd, (char *)ph, 4096) != 4096) {
		goto serr;
d246 1
d248 2
a249 2
	for(i = 0; i < eh.e_phnum; i++, ph++) {
		if(ph->p_type == PT_LOAD) {
d252 3
a254 2
			if(oread(fd, (char *)ph->p_paddr, ph->p_filesz) !=  ph->p_filesz) {
				goto serr;
d260 1
a260 1
				bzero((void *)(ph->p_paddr + ph->p_filesz),
d268 3
a270 9
	printf("start at 0x%x\n", eh.e_entry);
	memset(tablebase, 0, 4096);
	loadsymtab(fd, &eh, 0);
	return(eh.e_entry);
serr:
	errs = "%s sz err\n";
err:
	printf(errs, fname);
	return (-1);
d272 3
@

