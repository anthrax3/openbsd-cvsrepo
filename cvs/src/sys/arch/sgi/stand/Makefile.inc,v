head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.20
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.16
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.12
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.14
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.6
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.10
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2012.10.19.13.51.59;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.31.08.14.08;	author pascal;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.18.06.21.40;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.14.14.28.05;	author marco;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.14.18.57.41;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.26.10.01.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.30.02.03.49;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.16.18.54.48;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.23.14.22.40;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Be sure to compile boot block objects with -D_NO_ABICALLS, to prevent .S files
in libkern from getting a ".abicalls" pseudo-op from including <machine/asm.h>;
this will in turn flag the .o file as PIC even though it doesn't contain PIC
code, really.

This gets rid of the annoying "linking PIC files with non-PIC files" warnings
spewed by ld at link time.
@
text
@#	$OpenBSD: Makefile.inc,v 1.9 2012/08/31 08:14:08 pascal Exp $
#	$NetBSD: Makefile.inc,v 1.7 2000/08/20 14:57:16 mrg Exp $

.ifndef __INCLUDED_STAND_MAKEFILE_INC
__INCLUDED_STAND_MAKEFILE_INC=

BINDIR=		/usr/mdec

STANDALONE?=	-D_STANDALONE

.if ${MACHINE} == "sgi"
CPPFLAGS+=	${STANDALONE}
CPPFLAGS+=	-I.

CFLAGS+=	-fno-stack-protector -Wall
CFLAGS+=	-fno-builtin-vprintf -fno-builtin-printf -fno-builtin-putchar
CFLAGS+=	-fno-builtin-exit
SAABI?=		-mips3 -mno-abicalls -D_NO_ABICALLS -G 0 -fno-pic -fno-common
AS?=		as
LD?=		ld
LIBSA_CPPFLAGS?= -DNEEDS_HEAP_H
.endif

### Figure out what to use for libsa
LIBSADIR?=               ${.CURDIR}/../libsa

.if exists(${LIBSADIR}/${__objdir})
LIBSAOBJDIR=            ${LIBSADIR}/${__objdir}
.else
LIBSAOBJDIR=            ${LIBSADIR}
.endif

LIBSA=                  ${LIBSAOBJDIR}/libsa.a

### Figure out what to use for libz
LIBZDIR?=                ${.CURDIR}/../libz

.if exists(${LIBZDIR}/${__objdir})
LIBZOBJDIR=             ${LIBZDIR}/${__objdir}
.else
LIBZOBJDIR=             ${LIBZDIR}
.endif

LIBZ=                   ${LIBZOBJDIR}/libz.a

.endif
@


1.9
log
@Move sgi/stand to plain -fno-pie -nopie.  Binaries are the same.

tested by and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2012/08/21 14:46:19 pascal Exp $
d18 1
a18 1
SAABI?=		-mips3 -mno-abicalls -G 0 -fno-pic -fno-common
@


1.8
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2011/03/18 06:21:40 matthew Exp $
a21 3
.else
AFLAGS+=	${NOPIE_FLAGS}
CFLAGS+=	${NOPIE_FLAGS}
a22 2

CFLAGS+=	${NOPIE_FLAGS}
@


1.7
log
@Fix obj directory probing to support cross compiling.

"Go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2010/09/14 14:28:05 marco Exp $
d22 3
d26 2
@


1.6
log
@Fix couple of warnings

ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2009/05/14 18:57:41 miod Exp $
d27 2
a28 4
.if exists(${LIBSADIR}/obj.${MACHINE})
LIBSAOBJDIR=            ${LIBSADIR}/obj.${MACHINE}
.elif exists(${LIBSADIR}/obj)
LIBSAOBJDIR=            ${LIBSADIR}/obj
d38 2
a39 4
.if exists(${LIBZDIR}/obj.${MACHINE})
LIBZOBJDIR=             ${LIBZDIR}/obj.${MACHINE}
.elif exists(${LIBZDIR}/obj)
LIBZOBJDIR=             ${LIBZDIR}/obj
@


1.5
log
@In addition to the existing IP32 boot block, build a real 64 bit boot block
as a relocatable object, suitable for IP27/IP30/IP35.

Boot blocks are now found is /usr/mdec/boot{32,64}, with boot-IP## being
hard links to them for easy boot block pick.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2007/11/26 10:01:42 deraadt Exp $
d17 1
@


1.4
log
@More LIBKERN bits that go away
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2005/12/30 02:03:49 millert Exp $
a6 2
#CEXTRAFLAGS?=-D_LP64

d15 1
a15 1
CFLAGS+=	-fno-stack-protector
d17 4
a20 3
SAABI=		-mabi=32 -mips2 -Wl,-m=elf32btsmip
AS=		as -32
LD=		ld -m elf32btsmip
d24 1
a24 1
LIBSADIR=               ${.CURDIR}/../libsa
d37 1
a37 1
LIBZDIR=                ${.CURDIR}/../libz
@


1.3
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2004/09/16 18:54:48 pefo Exp $
a22 15



### Figure out what to use for libkern
LIBKERNDIR=             ${.CURDIR}/../libkern

.if exists(${LIBKERNDIR}/obj.${MACHINE})
LIBKERNOBJDIR=          ${LIBKERNDIR}/obj.${MACHINE}
.elif exists(${LIBKERNDIR}/obj)
LIBKERNOBJDIR=          ${LIBKERNDIR}/obj
.else 
LIBKERNOBJDIR=          ${LIBKERNDIR}
.endif

LIBKERN=                ${LIBKERNOBJDIR}/libkern.a
@


1.2
log
@Update boot with miods ELF64 symtab fixes and my 32 bit compiles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2004/08/23 14:22:40 pefo Exp $
a15 1
CPPFLAGS+=	-Derrno=errno
@


1.1
log
@disk boot and tools for sgi
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2004/07/13 21:03:38 marc Exp $
d20 3
@

