head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2016.03.06.19.42.27;	author mpi;	state Exp;
branches;
next	1.9;
commitid	cyYKarj4qRTft4gD;

1.9
date	2016.01.05.05.27.54;	author visa;	state Exp;
branches;
next	1.8;
commitid	916i76I5mjNtTg33;

1.8
date	2015.12.23.11.45.24;	author visa;	state Exp;
branches;
next	1.7;
commitid	5tJtHmnrkadggDW1;

1.7
date	2015.09.24.18.37.50;	author miod;	state Exp;
branches;
next	1.6;
commitid	uvWNbivpqdkdyHcp;

1.6
date	2015.09.20.12.49.15;	author miod;	state Exp;
branches;
next	1.5;
commitid	fj48ALJu5tPOlbBO;

1.5
date	2014.05.19.21.18.42;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2014.03.09.10.12.17;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.29.21.46.02;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Rename mips64's trap_frame into trapframe.

For coherency with other archs and in order to use it in MI code.

ok visa@@, tobiasu@@
@
text
@/*	$OpenBSD: tcc.c,v 1.9 2016/01/05 05:27:54 visa Exp $	*/

/*
 * Copyright (c) 2012 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * POWER Indigo2 TBus Cache Controller (Stream Cache) support code.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/kernel.h>

#include <uvm/uvm_extern.h>

#include <mips64/archtype.h>
#include <mips64/cache.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>
#include <mips64/mips_cpu.h>

#include <sgi/sgi/ip22.h>
#include <sgi/localbus/tccreg.h>
#include <sgi/localbus/tccvar.h>

int	tcc_match(struct device *, void *, void *);
void	tcc_attach(struct device *, struct device *, void *);

const struct cfattach tcc_ca = {
	sizeof(struct device), tcc_match, tcc_attach
};

struct cfdriver tcc_cd = {
	NULL, "tcc", DV_DULL
};

uint32_t tcc_bus_error(uint32_t, struct trapframe *);

CACHE_PROTOS(tcc)

int
tcc_match(struct device *parent, void *match, void *aux)
{
	struct mainbus_attach_args *maa = (void *)aux;

	switch (sys_config.system_type) {
	case SGI_IP26:
		return strcmp(maa->maa_name, tcc_cd.cd_name) == 0;
	default:
		return 0;
	}
}

void
tcc_attach(struct device *parent, struct device *self, void *aux)
{
	uint32_t ctrl, rev;

	ctrl = (uint32_t)tcc_read(TCC_GCACHE_CTRL);
	rev = (ctrl & TCC_GCACHE_REV_MASK) >> TCC_GCACHE_REV_SHIFT;
	printf(": streaming cache revision %d\n", rev);

	tcc_bus_reset();

	/* Enable bus error and machine check interrupts. */
	set_intr(INTPRI_BUSERR_TCC, CR_INT_4, tcc_bus_error);
	tcc_write(TCC_INTR, TCC_INTR_MCHECK_ENAB | TCC_INTR_BERR_ENAB);

	/* Enable all cache sets. */
	tcc_write(TCC_GCACHE_CTRL, (ctrl | TCC_GCACHE_SET_ALL) &
	    ~TCC_GCACHE_DISABLE_WB);

	/* Enable prefetching. */
	tcc_prefetch_enable();
}

void
tcc_bus_reset()
{
	tcc_write(TCC_INTR, (tcc_read(TCC_INTR) & TCC_INTR_ENABLE_MASK) |
	    TCC_INTR_MCHECK | TCC_INTR_BERR);
	tcc_write(TCC_ERROR, TCC_ERROR_NESTED_MCHECK | TCC_ERROR_NESTED_BERR);
}

uint32_t
tcc_bus_error(uint32_t hwpend, struct trapframe *tf)
{
	uint64_t intr, error, addr, errack;
	unsigned int errtype;

	intr = tcc_read(TCC_INTR);
	error = tcc_read(TCC_ERROR);

	errtype = (error & TCC_ERROR_TYPE_MASK) >> TCC_ERROR_TYPE_SHIFT;

	/*
	 * Execution of the `sync' instruction is not supported by the
	 * T-Bus and raises a machine check exception.
	 * Do not report anything on console in that case, so that
	 * userland does not suffer too much.
	 */
	if (errtype != TCC_ERROR_TYPE_TBUS || (intr & TCC_INTR_MCHECK) == 0) {
		addr = tcc_read(TCC_BERR_ADDR);

		printf("tcc bus error: intr %llx error %llx (%u) addr %08llx\n",
		    intr, error, errtype, addr);
	}

	/* Ack error condition */
	errack = 0;
	if (intr & TCC_INTR_MCHECK)
		errack |= TCC_ERROR_NESTED_MCHECK;
	if (intr & TCC_INTR_BERR)
		errack |= TCC_ERROR_NESTED_BERR;
	tcc_write(TCC_INTR, (intr & TCC_INTR_ENABLE_MASK) |
	    (intr & (TCC_INTR_MCHECK | TCC_INTR_BERR)));
	tcc_write(TCC_ERROR, errack);

	return hwpend;
}

/*
 * Cache maintainance routines
 */

#define	tcc_cache_hit(addr,op) \
__asm__ volatile ("lw $0, %0(%1)" :: "i" (TCC_CACHEOP_HIT), \
    "r" (PHYS_TO_XKPHYS(TCC_CACHEOP_BASE | (addr) | (op), CCA_NC)) : "memory")
#define	tcc_cache_index(s,i,op) \
__asm__ volatile ("lw $0, %0(%1)" :: "i" (TCC_CACHEOP_INDEX | (op)), \
    "r" (PHYS_TO_XKPHYS(TCC_CACHEOP_BASE | ((s) << TCC_CACHEOP_SET_SHIFT) | \
	 ((i) << TCC_CACHEOP_INDEX_SHIFT), CCA_NC)) : "memory")

void tcc_virtual(struct cpu_info *, vaddr_t, vsize_t, uint64_t);

void
tcc_ConfigCache(struct cpu_info *ci)
{
	struct cache_info l2;

	l2 = ci->ci_l2;

	tfp_ConfigCache(ci);

	if (l2.size != 0) {
		ci->ci_l2 = l2;

		ci->ci_SyncCache = tcc_SyncCache;
		ci->ci_SyncDCachePage = tcc_SyncDCachePage;
		ci->ci_HitSyncDCachePage = tcc_SyncDCachePage;
		ci->ci_HitSyncDCache = tcc_HitSyncDCache;
		ci->ci_HitInvalidateDCache = tcc_HitInvalidateDCache;
		ci->ci_IOSyncDCache = tcc_IOSyncDCache;
	}
}

void
tcc_SyncCache(struct cpu_info *ci)
{
	uint64_t idx;

	mips_sync();
	tcc_prefetch_invalidate();
	tfp_InvalidateICache(ci, 0, ci->ci_l1inst.size);

	/*
	 * The following relies upon the fact that the (line, set)
	 * fields are contiguous. Therefore by pretending there is
	 * a huge number of sets and only one line, we can span the
	 * whole cache.
	 */
	idx = (uint64_t)ci->ci_l2.size / TCC_CACHE_LINE;
	while (idx != 0) {
		idx--;
		tcc_cache_index(idx, 0,
		    TCC_CACHEOP_WRITEBACK | TCC_CACHEOP_INVALIDATE);
	}
	tcc_prefetch_invalidate();
}

void
tcc_SyncDCachePage(struct cpu_info *ci, vaddr_t va, paddr_t pa)
{
	vaddr_t epa;

	mips_sync();
	tcc_prefetch_invalidate();
	epa = pa + PAGE_SIZE;
	do {
		tcc_cache_hit(pa,
		    TCC_CACHEOP_WRITEBACK | TCC_CACHEOP_INVALIDATE);
		pa += TCC_CACHE_LINE;
	} while (pa != epa);
	tcc_prefetch_invalidate();
}

void
tcc_virtual(struct cpu_info *ci, vaddr_t va, vsize_t sz, uint64_t op)
{
	paddr_t pa;

	if (IS_XKPHYS(va)) {
		pa = XKPHYS_TO_PHYS(va);

		while (sz != 0) {
			tcc_cache_hit(pa, op);
			pa += TCC_CACHE_LINE;
			sz -= TCC_CACHE_LINE;
		}
		return;
	}

	while (sz != 0) {
		/* get the proper physical address */
		if (pmap_extract(pmap_kernel(), va, &pa) == 0) {
#ifdef DIAGNOSTIC
			panic("%s: invalid va %p", __func__, (void *)va);
#else
			/* should not happen */
#endif
		}

		while (sz != 0) {
			tcc_cache_hit(pa, op);
			pa += TCC_CACHE_LINE;
			va += TCC_CACHE_LINE;
			sz -= TCC_CACHE_LINE;
			if (sz == 0)
				return;
			if ((va & PAGE_MASK) == 0)
				break;	/* need new pmap_extract() */
		}
	}
}

void
tcc_HitSyncDCache(struct cpu_info *ci, vaddr_t _va, size_t _sz)
{
	vaddr_t va;
	vsize_t sz;

	/* extend the range to integral cache lines */
	va = _va & ~(TCC_CACHE_LINE - 1);
	sz = ((_va + _sz + TCC_CACHE_LINE - 1) & ~(TCC_CACHE_LINE - 1)) - va;

	mips_sync();
	tcc_prefetch_invalidate();
	tcc_virtual(ci, va, sz, TCC_CACHEOP_WRITEBACK | TCC_CACHEOP_INVALIDATE);
	tcc_prefetch_invalidate();
}

void
tcc_HitInvalidateDCache(struct cpu_info *ci, vaddr_t _va, size_t _sz)
{
	vaddr_t va;
	vsize_t sz;

	/* extend the range to integral cache lines */
	va = _va & ~(TCC_CACHE_LINE - 1);
	sz = ((_va + _sz + TCC_CACHE_LINE - 1) & ~(TCC_CACHE_LINE - 1)) - va;

	mips_sync();
	tcc_prefetch_invalidate();
	tcc_virtual(ci, va, sz, TCC_CACHEOP_INVALIDATE);
	tcc_prefetch_invalidate();
}

void
tcc_IOSyncDCache(struct cpu_info *ci, vaddr_t _va, size_t _sz, int how)
{
	vaddr_t va;
	vsize_t sz;
	int partial_start, partial_end;

	/* extend the range to integral cache lines */
	va = _va & ~(TCC_CACHE_LINE - 1);
	sz = ((_va + _sz + TCC_CACHE_LINE - 1) & ~(TCC_CACHE_LINE - 1)) - va;

	mips_sync();

	switch (how) {
	default:
	case CACHE_SYNC_R:
		/* writeback partial cachelines */
		if (((_va | _sz) & (TCC_CACHE_LINE - 1)) != 0) {
			partial_start = va != _va;
			partial_end = va + sz != _va + _sz;
		} else {
			partial_start = partial_end = 0;
		}
		tcc_prefetch_invalidate();
		if (partial_start) {
			tcc_virtual(ci, va, TCC_CACHE_LINE,
			    TCC_CACHEOP_WRITEBACK | TCC_CACHEOP_INVALIDATE);
			va += TCC_CACHE_LINE;
			sz -= TCC_CACHE_LINE;
		}
		if (sz != 0 && partial_end) {
			sz -= TCC_CACHE_LINE;
			tcc_virtual(ci, va + sz, TCC_CACHE_LINE,
			    TCC_CACHEOP_WRITEBACK | TCC_CACHEOP_INVALIDATE);
		}
		if (sz != 0)
			tcc_virtual(ci, va, sz, TCC_CACHEOP_INVALIDATE);
		break;

	case CACHE_SYNC_X:
		tcc_prefetch_invalidate();
		tcc_virtual(ci, va, sz, TCC_CACHEOP_WRITEBACK);
		break;

	case CACHE_SYNC_W:
		tcc_prefetch_invalidate();
		tcc_virtual(ci, va, sz,
		    TCC_CACHEOP_WRITEBACK | TCC_CACHEOP_INVALIDATE);
		break;
	}
	tcc_prefetch_invalidate();

	tfp_IOSyncDCache(ci, _va, _sz, how);
}
@


1.9
log
@Some implementations of HitSyncDCache() call pmap_extract() for va->pa
conversion. Because pmap_extract() acquires the PTE mutex, a "locking
against myself" panic is triggered if the cache routine gets called in
a context where the mutex is already held.

In the pmap, all calls to HitSyncDCache() are for a whole page. Add a
new cache routine, HitSyncDCachePage(), which gets both the va and the
pa of a page. This removes the need of the va->pa conversion. The new
routine has the same signature as SyncDCachePage(), allowing reuse of
the same routine for cache implementations that do not need differences
between "Hit" and non-"Hit" routines.

With the diff, POWER Indigo2 R8000 boots multiuser again. Tested on sgi
GENERIC-IP27.MP and octeon GENERIC.MP, too.

Diff from miod@@, ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.8 2015/12/23 11:45:24 visa Exp $	*/
d53 1
a53 1
uint32_t tcc_bus_error(uint32_t, struct trap_frame *);
d102 1
a102 1
tcc_bus_error(uint32_t hwpend, struct trap_frame *tf)
@


1.8
log
@Execution of the `sync' instruction is not supported by the T-Bus and
raises a machine check exception.  Do not report anything on console in
that case, so that userland does not suffer too much.

Diff from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.7 2015/09/24 18:37:50 miod Exp $	*/
d166 1
@


1.7
log
@IP26 streaming cache controller bus error interrupts are reported as hardware
level 4 interrupts, just like memory controller bus errors; register the
tcc(4) handler with the right cause register bitmask, and teach imc(4) not
to claim the interrupt if it did not trigger it.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.6 2015/09/20 12:49:15 miod Exp $	*/
d105 1
a108 1
	addr = tcc_read(TCC_BERR_ADDR);
d110 14
a123 3
	printf("tcc bus error: intr %llx error %llx (%llu) addr %08llx\n",
	    intr, error, (error & TCC_ERROR_TYPE_MASK) >> TCC_ERROR_TYPE_SHIFT,
	    addr);
@


1.6
log
@Invoke tfp_IOSyncDCache() from tcc_IOSyncDCache() as well, so that invalidate
operations are also carried on the internal write-through cache.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.5 2014/05/19 21:18:42 miod Exp $	*/
d82 1
a82 1
	set_intr(INTPRI_BUSERR_TCC, CR_BERR, tcc_bus_error);
a123 1
	cp0_reset_cause(CR_BERR);
@


1.5
log
@Format string fixes and removal of -Wno-format for sgi. Based upon an
initial diff from jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.4 2014/03/29 18:09:30 guenther Exp $	*/
d168 1
d192 1
a246 2
	mips_sync();

d251 2
a262 2
	mips_sync();

d267 2
a279 2
	mips_sync();

d284 2
d296 1
a309 2

		tcc_prefetch_invalidate();
d313 1
d318 1
a320 1
		tcc_prefetch_invalidate();
d323 3
@


1.4
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.3 2014/03/09 10:12:17 miod Exp $	*/
d110 1
a110 1
	printf("tcc bus error: intr %lx error %lx (%d) addr %08lx\n",
d220 1
a220 1
			panic("%s: invalid va %p", __func__, va);
@


1.3
log
@Rework the per-cpu cache information. Use a common struct to store the line
size, the number of sets, and the total size (and the set size, for convenience)
per cache (I$, D$, L2, L3).
This allows cpu.c to print the number of ways (sets) of L2 and L3 caches from
the cache information, rather than hardcoding this from the processor type.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.2 2012/10/03 11:18:23 miod Exp $	*/
d133 1
a133 1
__asm__ __volatile__ ("lw $0, %0(%1)" :: "i" (TCC_CACHEOP_HIT), \
d136 1
a136 1
__asm__ __volatile__ ("lw $0, %0(%1)" :: "i" (TCC_CACHEOP_INDEX | (op)), \
@


1.2
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcc.c,v 1.1 2012/09/29 21:46:02 miod Exp $	*/
d145 1
a145 1
	uint l2line, l2size;
d147 1
a147 2
	l2line = ci->ci_l2line;
	l2size = ci->ci_l2size;
d151 2
a152 3
	if (l2size != 0) {
		ci->ci_l2line = l2line;
		ci->ci_l2size = l2size;
d168 1
a168 1
	tfp_InvalidateICache(ci, 0, ci->ci_l1instcachesize);
d176 1
a176 1
	idx = (uint64_t)ci->ci_l2size / TCC_CACHE_LINE;
@


1.1
log
@Work in progress support for the Power Indigo2 R8000 system (IP26). This is
basically an IP22 system (R4000 Indigo2) with the ECC memory board of IP28,
and a so-called ``streaming'' L2 cache.

IP26 kernels currently boot single-user, but don't live long; I am suspecting
a bug in the tcc cache routines, but am currently not able to find it (come
to think of it, my understanding of how this cache works could be wrong, and
of course there is no documentation for it but what can be gathered from
IRIX' <sys/IP26.h> comments and defines).

Hopefully this situation will improve in the near future; in the meantime I
am commiting this as `work in progress' to make sure this code doesn't get
lost.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 2

#include <machine/cpu.h>
@

