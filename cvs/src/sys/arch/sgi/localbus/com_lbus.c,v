head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.20
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.16
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.12
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.14
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.9.0.2
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2012.10.03.22.46.09;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.26.18.00.06;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.16.14.38.13;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.18.07.36.10;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.01.13.36.09;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.27.14.38.17;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.20.18.46.20;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.11.15.13.35;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.10.19.16.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.21.12.19;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Don't include <mips64/archtype.h> unless you really need it.
@
text
@/*	$OpenBSD: com_lbus.c,v 1.11 2009/10/26 18:00:06 miod Exp $ */

/*
 * Copyright (c) 2001-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/tty.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>
#include <dev/ic/ns16550reg.h>

#include <sgi/localbus/macebusvar.h>

int	com_macebus_probe(struct device *, void *, void *);
void	com_macebus_attach(struct device *, struct device *, void *);

struct cfattach com_macebus_ca = {
	sizeof(struct com_softc), com_macebus_probe, com_macebus_attach
};

int
com_macebus_probe(struct device *parent, void *match, void *aux)
{
	struct macebus_attach_args *maa = aux;
	bus_space_handle_t ioh;
	int rv;

	/* If it's in use as the console, then it's there. */
	if (maa->maa_baseaddr == comconsaddr && !comconsattached)
		return (1);

	if (bus_space_map(maa->maa_iot, maa->maa_baseaddr, COM_NPORTS, 0, &ioh))
		return (0);

	rv = comprobe1(maa->maa_iot, ioh);
	bus_space_unmap(maa->maa_iot, ioh, COM_NPORTS);

	return rv;
}

void
com_macebus_attach(struct device *parent, struct device *self, void *aux)
{
	struct com_softc *sc = (void *)self;
	struct macebus_attach_args *maa = aux;

	sc->sc_iot = maa->maa_iot;
	sc->sc_hwflags = 0;
	sc->sc_swflags = 0;
	sc->sc_iobase = maa->maa_baseaddr;
	sc->sc_frequency = 1843200;

	/* If it's in use as the console, then it's there. */
	if (maa->maa_baseaddr == comconsaddr && !comconsattached) {
		if (comcnattach(sc->sc_iot, sc->sc_iobase, comconsrate,
		    sc->sc_frequency, (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8))
			panic("failed to setup serial console!");
		sc->sc_ioh = comconsioh;
	} else {
		if (bus_space_map(sc->sc_iot, maa->maa_baseaddr, COM_NPORTS, 0,
		    &sc->sc_ioh)) {
			printf(": can't map i/o space\n");
			return;
		}
	}

	com_attach_subr(sc);

	macebus_intr_establish(maa->maa_intr, maa->maa_mace_intr,
	    IST_EDGE, IPL_TTY, comintr, (void *)sc, sc->sc_dev.dv_xname);
}
@


1.11
log
@Better crime/mace interrupt handling; interrupt information is no longer
specified in the kernel configuration file, but is provided by macebus(4)
as part of the  child device attachment args, and provide both crime and
mace interrupt bitmasks; this allows us to only really enable interrupt
sources we care about, and to avoid invoking interrupt handler we don't need
to for the few mace interrupts multiplexed at the crime level.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.10 2009/10/16 14:38:13 miod Exp $ */
a33 1
#include <machine/autoconf.h>
a39 2

#include <mips64/archtype.h>
@


1.10
log
@Honour serial console speed on O2 too.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.9 2009/03/29 21:53:52 sthen Exp $ */
d44 1
a44 1
#include <sgi/localbus/macebus.h>
d56 1
a56 1
	struct confargs *ca = aux;
d61 1
a61 1
	if (ca->ca_baseaddr == comconsaddr && !comconsattached)
d64 1
a64 1
	if (bus_space_map(ca->ca_iot, ca->ca_baseaddr, COM_NPORTS, 0, &ioh))
d67 2
a68 2
	rv = comprobe1(ca->ca_iot, ioh);
	bus_space_unmap(ca->ca_iot, ioh, COM_NPORTS);
d77 1
a77 1
	struct confargs *ca = aux;
d79 1
a79 1
	sc->sc_iot = ca->ca_iot;
d82 1
a82 1
	sc->sc_iobase = ca->ca_baseaddr;
d86 1
a86 1
	if (ca->ca_baseaddr == comconsaddr && !comconsattached) {
d92 1
a92 1
		if (bus_space_map(sc->sc_iot, ca->ca_baseaddr, COM_NPORTS, 0,
d101 2
a102 2
	macebus_intr_establish(NULL, ca->ca_intr, IST_EDGE, IPL_TTY, comintr,
	    (void *)sc, sc->sc_dev.dv_xname);
@


1.9
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.8 2008/05/18 07:36:10 jsing Exp $ */
d87 1
a87 1
		if (comcnattach(sc->sc_iot, sc->sc_iobase, TTYDEF_SPEED,
@


1.8
log
@Unbreak glass console on OpenBSD/sgi - if we're supposed to be using the
glass console set comconsaddr to zero so we don't switch to serial when
com* attach.

spotted by jasper@@, ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.6 2008/03/27 14:38:17 jsing Exp $ */
d94 1
a94 1
			printf(": failed to map I/O space!\n");
@


1.7
log
@Don't forget to bus_space_unmap() after probing for a com chip.
@
text
@a86 1
		sc->sc_ioh = comconsioh;
d90 1
@


1.6
log
@Majorly cleanup/overhaul com @@ macebus code.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.4 2004/10/20 12:49:15 pefo Exp $ */
d58 1
d67 4
a70 1
	return comprobe1(ca->ca_iot, ioh);
@


1.5
log
@Completely overhault attachment rules on sgi. No more indirect configuration
inherited from OpenBSD/arc machines with ISA bus; mainbus children match on
device name and other hierarchies match on simplified locators.
As a bonus, attachment lines in dmesg will now print their locators.

ok jsing@@
@
text
@a34 1
#include <mips64/archtype.h>
d42 2
a48 1

a52 3
extern void com_raisedtr(void *);
extern struct timeout compoll_to;

d54 1
a54 3
com_macebus_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d56 1
a56 1
	bus_space_tag_t iot;
a57 2
	struct confargs *ca = aux;
	bus_addr_t iobase, rv = 0;
d59 8
a66 12
	iobase = (bus_addr_t)ca->ca_baseaddr;
	if (iobase) {
		iot = ca->ca_iot;
		/* if it's in use as console, it's there. */
		if (!(iobase == comconsaddr && !comconsattached)) {
			bus_space_map(iot, iobase, COM_NPORTS, 0, &ioh);
			rv = comprobe1(iot, ioh);
		} else {
			rv = 1;
		}
	}
	return (rv);
d70 1
a70 3
com_macebus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
a72 3
	int intr;
	bus_addr_t iobase;
	bus_space_handle_t ioh;
d75 1
d78 2
a79 6
	iobase = (bus_addr_t)ca->ca_baseaddr;
	intr = ca->ca_intr;
	sc->sc_iobase = iobase;
	sc->sc_frequency = sys_config.cons_baudclk;	/* XXX */

	sc->sc_iot = ca->ca_iot;
d81 11
a91 4
	/* if it's in use as console, it's there. */
	if (!(iobase == comconsaddr && !comconsattached)) {
		if (bus_space_map(sc->sc_iot, iobase, COM_NPORTS, 0, &ioh)) {
			panic("unexpected bus_space_map failure");
a93 5
	else {
		ioh = comconsioh;
	}

	sc->sc_ioh = ioh;
d97 2
a98 7
	/* Enable IE pin. Some boards are not edge sensitive */
	SET(sc->sc_mcr, MCR_IENABLE);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, com_mcr, sc->sc_mcr);

	macebus_intr_establish(NULL, intr, IST_EDGE, IPL_TTY,
				comintr, (void *)sc, sc->sc_dev.dv_xname);

@


1.4
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.3 2004/08/11 15:13:35 deraadt Exp $ */
d43 1
a43 2
int	com_localbus_probe(struct device *, void *, void *);
void	com_localbus_attach(struct device *, struct device *, void *);
d45 2
a47 3
struct cfattach com_localbus_ca = {
	sizeof(struct com_softc), com_localbus_probe, com_localbus_attach
};
d49 2
a50 2
struct cfattach com_xbow_ca = {
	sizeof(struct com_softc), com_localbus_probe, com_localbus_attach
d57 1
a57 1
com_localbus_probe(parent, match, aux)
a62 1
	struct cfdata *cf = match;
d66 1
a66 11
	/*
	 *  Check if this is our com. If low nibble is 0 match
	 *  against system CLASS. Else a perfect match is checked.
	 */
	if ((ca->ca_sys & 0x000f) == 0) {
		if (ca->ca_sys != (sys_config.system_type & 0xfff0))
			return 0;
	} else if (ca->ca_sys != sys_config.system_type)
		return 0;

	iobase = (bus_addr_t)sys_config.cons_ioaddr[cf->cf_unit];
d68 1
a68 1
		iot = sys_config.cons_iot;
d81 1
a81 1
com_localbus_attach(parent, self, aux)
d93 1
a93 1
	iobase = (bus_addr_t)sys_config.cons_ioaddr[sc->sc_dev.dv_unit];
d96 1
a96 1
	sc->sc_frequency = sys_config.cons_baudclk;
d98 1
a98 1
	sc->sc_iot = sys_config.cons_iot;
d118 1
a118 1
	BUS_INTR_ESTABLISH(ca, NULL, intr, IST_EDGE, IPL_TTY,
@


1.3
log
@various ansi and spacing issues; pefo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.2 2004/08/10 19:16:18 deraadt Exp $ */
d51 4
d67 1
a67 1
	int iobase, rv = 0;
d99 2
a100 1
	int iobase, intr;
@


1.2
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.1 2004/08/06 21:12:19 pefo Exp $ */
a60 2
	int iobase;
	int rv;
d62 2
a63 1
        struct confargs *ca = aux;
d69 1
a69 1
        if ((ca->ca_sys & 0x000f) == 0) {
d72 1
a72 1
	} else if (ca->ca_sys != sys_config.system_type) {
a73 1
	}
d76 1
a76 3
	if (iobase == 0) {
		rv = 0;	/* Not present */
	} else {
@


1.1
log
@initial sgi import
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 * 
d78 1
a78 1
	if(iobase == 0) {
d80 1
a80 2
	}
	else {
d86 1
a86 2
		}
		else {
@

