head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.22
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.14
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.16
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4;
locks; strict;
comment	@ * @;


1.4
date	2012.05.17.19.46.52;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.24.20.11.26;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.16.22.28.13;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Yet another rework of the crucial gio_id() function responsible for correctly
recognizing a GIO device or an id-less frame buffer in a GIO slot.

Turns out that GIO32 devices (at least those with a 32-bit ID register, but
likely all of them) do NOT like accesses to the minimal GIO register area
NOT done on 32-bit boundaries. While frame buffers won't mind, especially
if their slots are pipelined.

This makes it a lot easier to tell them apart.

While there, split gio_intr_establish() into gio_intr_map(), which will return
a logical interrupt number out of a GIO slot number, and gio_intr_establish(),
which will now expect a logical interrupt number, instead of a logical slot
number. These two functions are still unused, but upcoming changes depend on
this work. (Yes, I'm too lazy to make two commits for this tonite)
@
text
@/*	$OpenBSD: giovar.h,v 1.3 2012/04/24 20:11:26 miod Exp $	*/
/*	$NetBSD: giovar.h,v 1.10 2011/07/01 18:53:46 dyoung Exp $	*/

/*
 * Copyright (c) 2000 Soren S. Jorvang
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *          This product includes software developed for the
 *          NetBSD Project.  See http://www.NetBSD.org/ for
 *          information about NetBSD.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GIO 32/32-bis/64 bus
 */

struct gio_attach_args {
	bus_space_tag_t		 ga_iot;
	bus_space_handle_t	 ga_ioh;
	bus_dma_tag_t		 ga_dmat;

	int			 ga_slot;	/* -1 if graphics */
	u_int64_t		 ga_addr;

	u_int32_t		 ga_product;	/* not valid if graphics */
	const char		*ga_descr;	/* only valid if graphics */
};


#define GIO_SLOT_GFX		0
#define GIO_SLOT_EXP0		1
#define GIO_SLOT_EXP1		2

#define GIO_ARB_RT		0x001	/* real-time device */
#define GIO_ARB_LB		0x002	/* long-burst device */

#define GIO_ARB_MST		0x004	/* bus master enable */
#define GIO_ARB_SLV		0x008	/* slave */

#define GIO_ARB_PIPE		0x010	/* pipelining enable */
#define GIO_ARB_NOPIPE		0x020	/* pipelining disable */

#define GIO_ARB_32BIT		0x040	/* 32-bit transfers */
#define GIO_ARB_64BIT		0x080	/* 64-bit transfers */

#define GIO_ARB_HPC2_32BIT	0x100	/* 32-bit secondary HPC (ignores slot)*/
#define GIO_ARB_HPC2_64BIT	0x200	/* 64-bit secondary HPC (ignores slot)*/

/*
 * Maximum number of graphics boards installed. The known limit is 2,
 * but we're allowing room for some surprises.
 */
#define	GIO_MAX_FB		3

int		gio_arb_config(int, uint32_t);
int		gio_intr_map(int);
void	       *gio_intr_establish(int, int, int (*)(void *), void *,
		    const char *);
const char     *gio_product_string(int);

int		giofb_cnattach(void);
int		giofb_cnprobe(void);

extern paddr_t	giofb_consaddr;
extern const char *giofb_names[GIO_MAX_FB];

/*
 * Fake GIO device IDs to identify frame buffers without GIO IDs.
 * These are built as 32-bit GIO IDs without the `32-bit ID' bit set.
 */

#define	GIO_PRODUCT_FAKEID_LIGHT	0xff010000
#define	GIO_PRODUCT_FAKEID_NEWPORT	0xff020000
#define	GIO_PRODUCT_FAKEID_GRTWO	0xff030000
@


1.3
log
@Pour even more smarts into the GIO device identification code, to the point
that it can now tell ID-less framebuffers apart correctly. Therefore, we can
use direct configuration instead of ugly games. Frame buffer drivers match
routines now only need to check for the fake ID they receive.

Tested on various newport and grtwo setups (including multihead configurations)
@
text
@d1 1
a1 1
/*	$OpenBSD: giovar.h,v 1.2 2012/04/16 22:28:13 miod Exp $	*/
d79 1
@


1.2
log
@Improve the way frame buffers are probed to reduce (and hopefully avoid)
false positives.

Do not look for framebuffers past GIO EXP1, there shouldn't be anything there.

Add the console code machinery to attach a glass console on IP22, when the
appropriate drivers will exist.

On multihead systems, get console framebuffer address (well, sort of) from a
completely undocumented interface (knowledge taken from Linux, confirmed to
work on a dual-head Indigo 2 here).

While there, get frame buffer names from ARCBios whenever possible, to be used
in dmesg eventually.
@
text
@d1 1
a1 1
/*	$OpenBSD: giovar.h,v 1.1 2012/03/28 20:44:23 miod Exp $	*/
d88 9
@


1.1
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 3
a43 3
	bus_space_tag_t	ga_iot;
	bus_space_handle_t ga_ioh;
	bus_dma_tag_t	ga_dmat;
d45 2
a46 2
	int		ga_slot;	/* not valid if graphics */
	u_int64_t	ga_addr;
d48 2
a49 1
	u_int32_t	ga_product;	/* not valid if graphics */
d72 6
a77 1
int		gio_cnattach(void);
d82 6
@

