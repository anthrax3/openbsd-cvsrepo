head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2014.07.02.17.44.35;	author miod;	state Exp;
branches;
next	1.3;
commitid	TjYmL9K0bGKNWIOi;

1.3
date	2012.05.10.21.30.39;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.16.22.28.12;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@On IP28, ignore (as in, do not report) GIO bus errors where the address isn't
actually part of the GIO address range; these obviously come from speculative
R10000 execution and are completely harmless (except for the need to acknowledge
them, which we have to do anyway).
@
text
@/*	$OpenBSD: gioreg.h,v 1.3 2012/05/10 21:30:39 miod Exp $	*/
/*	$NetBSD: gioreg.h,v 1.4 2006/08/31 00:01:10 rumble Exp $	*/

/*
 * Copyright (c) 2003 Ilpo Ruotsalainen
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * <<Id: LICENSE_GC,v 1.1 2001/10/01 23:24:05 cgd Exp>>
 */

/*
 * The GIO Product Identification Word is the first word (1 or 4 bytes)
 * in each GIO device's address space. It is the same format for GIO32,
 * GIO32-bis, and GIO64 devices. The macros below extract the following
 * fields:
 *
 * Bits:
 *    0-6 Product ID Code
 *	7 Product Identification Word size (0: 8 bits, 1: 32 bits)
 *   8-15 Product Revision
 *     16 GIO Interface Size (0: 32, 1: 64; NB: GIO64 devices may be 32)
 *     17 Rom Present (1: present)
 *  18-31 Manufacturer-specific Code
 *
 * The upper three bytes containing the Product Revision, GIO Interface
 * Size, Rom Presence indicator, and Manufacturer-specific Code are only 
 * valid if bit 7 is set in the Product ID Word. If it is not set, all
 * values default to 0.
 *
 * If the Rom Present bit is set, the three words after the Product ID are
 * reserved for three ROM registers:
 *	Board Serial Number Register	(base_address + 0x4)
 *	ROM Index Register		(base_address + 0x8)
 *	ROM Read Register		(base_address + 0xc)
 *
 * The ROM Index Register is initialised by the CPU to 0 and incremented by
 * 4 on each read from the ROM Read Register. The Board Serial Number
 * Register contains a manufacturer-specific serial number.
 */

#define GIO_PRODUCT_32BIT_ID(x)		((x) & 0x80)
#define GIO_PRODUCT_PRODUCTID(x)	((x) & 0x7f)
#define GIO_PRODUCT_REVISION(x)		(((x) >> 8) & 0xff)
#define GIO_PRODUCT_IS_64BIT(x)		(!!((x) & 0x10000))
#define GIO_PRODUCT_HAS_ROM(x)		(!!((x) & 0x20000))
#define GIO_PRODUCT_MANUCODE(x)		((x) >> 18)

#define	GIO_ADDR_GFX			0x1f000000	/* 4MB */
#define	GIO_ADDR_EXP0			0x1f400000	/* 2MB */
#define	GIO_ADDR_EXP1			0x1f600000	/* 4MB */
#define	GIO_ADDR_END			0x1fa00000

#define	IS_GIO_ADDRESS(pa)	((pa) >= GIO_ADDR_GFX && (pa) < GIO_ADDR_END)
@


1.3
log
@Fix a few macros to operate on the right bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: gioreg.h,v 1.2 2012/04/16 22:28:12 miod Exp $	*/
d74 2
@


1.2
log
@Improve the way frame buffers are probed to reduce (and hopefully avoid)
false positives.

Do not look for framebuffers past GIO EXP1, there shouldn't be anything there.

Add the console code machinery to attach a glass console on IP22, when the
appropriate drivers will exist.

On multihead systems, get console framebuffer address (well, sort of) from a
completely undocumented interface (knowledge taken from Linux, confirmed to
work on a dual-head Indigo 2 here).

While there, get frame buffer names from ARCBios whenever possible, to be used
in dmesg eventually.
@
text
@d1 1
a1 1
/*	$OpenBSD: gioreg.h,v 1.1 2012/03/28 20:44:23 miod Exp $	*/
d66 2
a67 2
#define GIO_PRODUCT_IS_64BIT(x)		(!!((x) & 0x8000))
#define GIO_PRODUCT_HAS_ROM(x)		(!!((x) & 0x10000))
@


1.1
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 5
@

