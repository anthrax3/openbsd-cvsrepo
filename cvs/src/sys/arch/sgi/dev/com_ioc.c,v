head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.20
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.16
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.12
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.14
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.6
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2012.10.03.22.46.09;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.07.13.44.24;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.16.00.15.46;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.11.19.36.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.19.58.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.12.17.56.58;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.17.01.29.39;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.01.13.36.08;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.22.53.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Don't include <mips64/archtype.h> unless you really need it.
@
text
@/*	$OpenBSD: com_ioc.c,v 1.8 2010/03/07 13:44:24 miod Exp $ */

/*
 * Copyright (c) 2001-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/tty.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>
#include <dev/ic/ns16550reg.h>

#include <sgi/pci/iocvar.h>

int	com_ioc_probe(struct device *, void *, void *);
void	com_ioc_attach(struct device *, struct device *, void *);

struct cfattach com_ioc_ca = {
	sizeof(struct com_softc), com_ioc_probe, com_ioc_attach
};

extern struct cfdriver com_cd;

int
com_ioc_probe(struct device *parent, void *match, void *aux)
{
	struct cfdata *cf = match;
	struct ioc_attach_args *iaa = aux;
	bus_space_tag_t iot = iaa->iaa_memt;
	bus_space_handle_t ioh;
	int rv = 0, console = 0;

	if (strcmp(iaa->iaa_name, com_cd.cd_name) != 0)
		return 0;

	if (comconsiot != NULL)
		console = iaa->iaa_memh + iaa->iaa_base ==
		    comconsiot->bus_base + comconsaddr;

	/* if it's in use as console, it's there. */
	if (!(console && !comconsattached)) {
		if (bus_space_subregion(iot, iaa->iaa_memh,
		    iaa->iaa_base, COM_NPORTS, &ioh) == 0)
			rv = comprobe1(iot, ioh);
	} else
		rv = 1;

	/* make a config stanza with exact locators match over a generic line */
	if (cf->cf_loc[0] != -1)
		rv += rv;

	return rv;
}

void
com_ioc_attach(struct device *parent, struct device *self, void *aux)
{
	struct com_softc *sc = (void *)self;
	struct ioc_attach_args *iaa = aux;
	bus_space_handle_t ioh;
	int console = 0;

	if (comconsiot != NULL)
		console = iaa->iaa_memh + iaa->iaa_base ==
		    comconsiot->bus_base + comconsaddr;

	sc->sc_hwflags = 0;
	sc->sc_swflags = 0;
	sc->sc_frequency = 22000000 / 3;

	/* if it's in use as console, it's there. */
	if (!(console && !comconsattached)) {
		sc->sc_iot = iaa->iaa_memt;
		sc->sc_iobase = iaa->iaa_base;

		if (bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh,
		    iaa->iaa_base, COM_NPORTS, &ioh) != 0) {
			printf(": can't map registers\n");
			return;
		}
	} else {
		/*
		 * If we are the console, reuse the existing bus_space
		 * information, so that comcnattach() invokes bus_space_map()
		 * with correct parameters.
		 */
		sc->sc_iot = comconsiot;
		sc->sc_iobase = comconsaddr;

		if (comcnattach(sc->sc_iot, sc->sc_iobase, comconsrate,
		    sc->sc_frequency, (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8))
			panic("can't setup serial console");
		ioh = comconsioh;
	}

	sc->sc_ioh = ioh;

	com_attach_subr(sc);

	ioc_intr_establish(parent, iaa->iaa_dev, IPL_TTY, comintr,
	    (void *)sc, sc->sc_dev.dv_xname);
}
@


1.8
log
@Allow iockbc(4) and odysseey(4) to act as console devices and attach early;
this gives us working glass console on Fuel, as well as on Octane systems
with Odyssey graphics.
Joint work with jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_ioc.c,v 1.7 2009/10/16 00:15:46 miod Exp $ */
a34 1
#include <mips64/archtype.h>
@


1.7
log
@Get serial console speed from prom, and use it instead of hardcoding 9600 bps,
on all systems but O2 (to catch up soon). Also use the IOC4 MCR register to
figure out the IOC4 clock, instead of checking the widget control register,
to be consistent with iof(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: com_ioc.c,v 1.6 2009/10/11 19:36:25 miod Exp $ */
d61 1
a61 1
	int rv = 0, console;
d66 3
a68 2
	console = iaa->iaa_memh + iaa->iaa_base ==
	    comconsiot->bus_base + comconsaddr;
d91 1
a91 1
	int console;
d93 3
a95 2
	console = iaa->iaa_memh + iaa->iaa_base ==
	    comconsiot->bus_base + comconsaddr;
@


1.6
log
@Make sure com@@io[cf] attachment stanzas with locators win over generic com*
lines. (This is done only to make dmesg look nice)
@
text
@d1 1
a1 1
/*	$OpenBSD: com_ioc.c,v 1.5 2009/07/26 19:58:49 miod Exp $ */
d118 1
a118 1
		if (comcnattach(sc->sc_iot, sc->sc_iobase, TTYDEF_SPEED,
@


1.5
log
@Rework ioc children attachment: instead of having ioc build a semi-bogus
bus_space_handle_t, pass them ioc's own bus_space_handle and bus_space_tag,
and have the children use bus_space_subregion() on it.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_ioc.c,v 1.4 2009/04/12 17:56:58 miod Exp $ */
d57 1
d76 4
@


1.4
log
@Interrupt support for IOC3 and its subdevices (currently limited to the
SuperIO part, the Ethernet part needs a whole driver); kernel now boot
single user (or bsd.rd). Joint work with jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_ioc.c,v 1.3 2008/09/17 01:29:39 jsing Exp $ */
d52 2
d62 4
a65 1
	console = iot->bus_base + iaa->iaa_base ==
d70 3
a72 3
		bus_space_map(iot, iaa->iaa_base, COM_NPORTS, 0, &ioh);
		rv = comprobe1(iot, ioh);
		bus_space_unmap(iot, ioh, COM_NPORTS);
d87 1
a87 1
	console = iaa->iaa_memt->bus_base + iaa->iaa_base ==
a91 1
	sc->sc_iobase = iaa->iaa_base;
a92 1
	sc->sc_iot = iaa->iaa_memt;
d96 5
a100 2
		if (bus_space_map(sc->sc_iot, sc->sc_iobase, COM_NPORTS, 0,
		    &ioh)) {
d105 8
a112 1
		ioh = comconsioh;
d116 1
@


1.3
log
@Unbreak com@@ioc probing.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_lbus.c,v 1.5 2008/02/20 18:46:20 miod Exp $ */
d109 2
a110 4
#ifdef notyet
	ioc_intr_establish(NULL, iaa->iaa_intr, IST_EDGE, IPL_TTY,
	    comintr, (void *)sc, sc->sc_dev.dv_xname);
#endif
@


1.2
log
@Don't forget to bus_space_unmap() after probing for a com chip.
@
text
@d61 1
a61 1
	    sys_config.cons_iot->bus_base + comconsaddr;
d83 1
a83 1
	    sys_config.cons_iot->bus_base + comconsaddr;
@


1.1
log
@Simple com@@ioc (with interrupt handling disabled until ioc interrupt code is
written). Joint work with jsing@@
@
text
@d67 1
@

