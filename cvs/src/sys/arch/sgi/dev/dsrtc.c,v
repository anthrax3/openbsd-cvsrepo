head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.16
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.12
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.01.21.06.28.56;	author jsg;	state Exp;
branches;
next	1.12;
commitid	X8jJJvRTpfJFmpU8;

1.12
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.07.14.49.01;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.26.20.14.42;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.26.18.34.53;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.26.18.00.06;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.07.20.39.45;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.26.19.58.49;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.15.23.02.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.08.18.35.13;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.20.20.31.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.13.21.17.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.22.36.26;	author miod;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove now uneeded bus_space_unmap calls in the DS1742W/Origin path that
have had uninitialised bus space handle arguments since the mapping became
conditional in rev 1.9

confirmed with miod
@
text
@/*	$OpenBSD: dsrtc.c,v 1.12 2012/03/28 20:44:23 miod Exp $ */

/*
 * Copyright (c) 2001-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/bus.h>

#include <dev/ic/ds1687reg.h>
#define	todr_chip_handle_t void *	/* XXX that's just to eat prototypes */
#include <dev/ic/mk48txxreg.h>

#include <mips64/archtype.h>
#include <mips64/dev/clockvar.h>

#include <sgi/dev/dsrtcvar.h>
#include <sgi/localbus/macebusvar.h>
#include <sgi/pci/iocreg.h>
#include <sgi/pci/iocvar.h>
#include <sgi/pci/iofvar.h>

struct	dsrtc_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_clkt;
	bus_space_handle_t	sc_clkh, sc_clkh2;
	int			sc_yrbase;

	int			(*read)(struct dsrtc_softc *, int);
	void			(*write)(struct dsrtc_softc *, int, int);
};

int	dsrtc_match(struct device *, void *, void *);
void	dsrtc_attach_ioc(struct device *, struct device *, void *);
void	dsrtc_attach_iof(struct device *, struct device *, void *);
void	dsrtc_attach_macebus(struct device *, struct device *, void *);

struct cfdriver dsrtc_cd = {
	NULL, "dsrtc", DV_DULL
};

struct cfattach dsrtc_macebus_ca = {
	sizeof(struct dsrtc_softc), dsrtc_match, dsrtc_attach_macebus
};

struct cfattach dsrtc_ioc_ca = {
	sizeof(struct dsrtc_softc), dsrtc_match, dsrtc_attach_ioc
};

struct cfattach dsrtc_iof_ca = {
	sizeof(struct dsrtc_softc), dsrtc_match, dsrtc_attach_ioc
};

int	ip32_dsrtc_read(struct dsrtc_softc *, int);
void	ip32_dsrtc_write(struct dsrtc_softc *, int, int);
int	ioc_ds1687_dsrtc_read(struct dsrtc_softc *, int);
void	ioc_ds1687_dsrtc_write(struct dsrtc_softc *, int, int);

void	ds1687_get(void *, time_t, struct tod_time *);
void	ds1687_set(void *, struct tod_time *);
void	ds1742_get(void *, time_t, struct tod_time *);
void	ds1742_set(void *, struct tod_time *);

static inline int frombcd(int, int);
static inline int tobcd(int, int);
static inline int
frombcd(int x, int binary)
{
	return binary ? x : (x >> 4) * 10 + (x & 0xf);
}
static inline int
tobcd(int x, int binary)
{
	return binary ? x : (x / 10 * 16) + (x % 10);
}

int
dsrtc_match(struct device *parent, void *match, void *aux)
{
	/*
	 * Depending on what dsrtc attaches to, the actual attach_args
	 * may be a different struct, but all of them start with the
	 * same name field.
	 */
	struct mainbus_attach_args *maa = aux;

	return strcmp(maa->maa_name, dsrtc_cd.cd_name) == 0;
}

void
dsrtc_attach_ioc(struct device *parent, struct device *self, void *aux)
{
	struct dsrtc_softc *sc = (void *)self;
	struct ioc_attach_args *iaa = aux;
	bus_space_handle_t ih, ih2;

	/*
	 * The IOC3 RTC is either a Dallas (now Maxim) DS1397 or compatible
	 * (likely a more recent DS1687), or a DS1747 or compatible
	 * (itself being a Mostek MK48T35 clone).
	 *
	 * Surprisingly, the chip found on Fuel has a DS1742W label,
	 * which has much less memory than the DS1747. I guess whatever
	 * the chip is, it is mapped to the end of the DS1747 address
	 * space, so that the clock registers always appear at the same
	 * addresses in memory.
	 */

	sc->sc_clkt = iaa->iaa_memt;

	if (iaa->iaa_base != IOC3_BYTEBUS_0) {
		/* DS1687 */

		if (bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh,
		    IOC3_BYTEBUS_1, 1, &ih) != 0 ||
		    bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh,
		    IOC3_BYTEBUS_2, 1, &ih2) != 0)
			goto fail;

		printf(": DS1687\n");

		sc->sc_clkh = ih;
		sc->sc_clkh2 = ih2;

		sc->read = ioc_ds1687_dsrtc_read;
		sc->write = ioc_ds1687_dsrtc_write;

		sys_tod.tod_get = ds1687_get;
		sys_tod.tod_set = ds1687_set;
	} else {
		/* DS1742W */

		if (bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh,
		    iaa->iaa_base + MK48T35_CLKOFF,
		    MK48T35_CLKSZ - MK48T35_CLKOFF, &ih) != 0)
			goto fail;

		printf(": DS1742W\n");

		sc->sc_clkh = ih;

		/*
		 * For some reason, the base year differs between IP27
		 * and IP35.
		 */
		sc->sc_yrbase = sys_config.system_type == SGI_IP35 ?
		    POSIX_BASE_YEAR - 2 : POSIX_BASE_YEAR;
		/* mips64 clock code expects year relative to 1900 */
		sc->sc_yrbase -= 1900;

		sys_tod.tod_get = ds1742_get;
		sys_tod.tod_set = ds1742_set;
	}
	sys_tod.tod_cookie = self;

	return;

fail:
	printf(": can't map registers\n");
}

void
dsrtc_attach_iof(struct device *parent, struct device *self, void *aux)
{
	struct dsrtc_softc *sc = (void *)self;
	struct iof_attach_args *iaa = aux;
	bus_space_handle_t ih;

	/*
	 * The IOC4 RTC is a DS1747 or compatible (itself being a Mostek
	 * MK48T35 clone).
	 */

	if (bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh,
	    iaa->iaa_base + MK48T35_CLKOFF,
	    MK48T35_CLKSZ - MK48T35_CLKOFF, &ih) != 0)
		goto fail;

	printf(": DS1742W\n");

	sc->sc_clkh = ih;

	/*
	 * For some reason, the base year differs between IP27
	 * and IP35.
	 */
	sc->sc_yrbase = sys_config.system_type == SGI_IP35 ?
	    POSIX_BASE_YEAR - 2 : POSIX_BASE_YEAR;
	/* mips64 clock code expects year relative to 1900 */
	sc->sc_yrbase -= 1900;

	sys_tod.tod_cookie = self;
	sys_tod.tod_get = ds1742_get;
	sys_tod.tod_set = ds1742_set;

	return;

fail:
	printf(": can't map registers\n");
}

void
dsrtc_attach_macebus(struct device *parent, struct device *self, void *aux)
{
	struct dsrtc_softc *sc = (void *)self;
	struct macebus_attach_args *maa = aux;

	sc->sc_clkt = maa->maa_iot;
	if (bus_space_map(sc->sc_clkt, maa->maa_baseaddr, 128 * 256, 0,
	    &sc->sc_clkh)) {
		printf(": can't map registers\n");
		return;
	}

	printf(": DS1687\n");

	sc->read = ip32_dsrtc_read;
	sc->write = ip32_dsrtc_write;

	sys_tod.tod_cookie = self;
	sys_tod.tod_get = ds1687_get;
	sys_tod.tod_set = ds1687_set;
}

int
ip32_dsrtc_read(struct dsrtc_softc *sc, int reg)
{
	return bus_space_read_1(sc->sc_clkt, sc->sc_clkh, reg);
}

void
ip32_dsrtc_write(struct dsrtc_softc *sc, int reg, int val)
{
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, reg, val);
}

int
ioc_ds1687_dsrtc_read(struct dsrtc_softc *sc, int reg)
{
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, 0, reg);
	return bus_space_read_1(sc->sc_clkt, sc->sc_clkh2, 0);
}

void
ioc_ds1687_dsrtc_write(struct dsrtc_softc *sc, int reg, int val)
{
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, 0, reg);
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh2, 0, val);
}

/*
 * Dallas DS1687 clock driver.
 */

void
ds1687_get(void *v, time_t base, struct tod_time *ct)
{
	struct dsrtc_softc *sc = v;
	int ctrl, century, dm;

	/* Select bank 1. */
	ctrl = (*sc->read)(sc, DS1687_CTRL_A);
	(*sc->write)(sc, DS1687_CTRL_A, ctrl | DS1687_BANK_1);

	/* Figure out which data mode to use. */
	dm = (*sc->read)(sc, DS1687_CTRL_B) & DS1687_DM_1;

	/* Wait for no update in progress. */
	while ((*sc->read)(sc, DS1687_CTRL_A) & DS1687_UIP)
		/* Do nothing. */;

	/* Read the RTC. */
	ct->sec = frombcd((*sc->read)(sc, DS1687_SEC), dm);
	ct->min = frombcd((*sc->read)(sc, DS1687_MIN), dm);
	ct->hour = frombcd((*sc->read)(sc, DS1687_HOUR), dm);
	ct->day = frombcd((*sc->read)(sc, DS1687_DAY), dm);
	ct->mon = frombcd((*sc->read)(sc, DS1687_MONTH), dm);
	ct->year = frombcd((*sc->read)(sc, DS1687_YEAR), dm);
	century = frombcd((*sc->read)(sc, DS1687_CENTURY), dm);

	ct->year += 100 * (century - 19);
}

void
ds1687_set(void *v, struct tod_time *ct)
{
	struct dsrtc_softc *sc = v;
	int year, century, ctrl, dm;

	century = ct->year / 100 + 19;
	year = ct->year % 100;

	/* Select bank 1. */
	ctrl = (*sc->read)(sc, DS1687_CTRL_A);
	(*sc->write)(sc, DS1687_CTRL_A, ctrl | DS1687_BANK_1);

	/* Figure out which data mode to use, and select 24 hour time. */
	ctrl = (*sc->read)(sc, DS1687_CTRL_B);
	dm = ctrl & DS1687_DM_1;
	(*sc->write)(sc, DS1687_CTRL_B, ctrl | DS1687_24_HR);

	/* Prevent updates. */
	ctrl = (*sc->read)(sc, DS1687_CTRL_B);
	(*sc->write)(sc, DS1687_CTRL_B, ctrl | DS1687_SET_CLOCK);

	/* Update the RTC. */
	(*sc->write)(sc, DS1687_SEC, tobcd(ct->sec, dm));
	(*sc->write)(sc, DS1687_MIN, tobcd(ct->min, dm));
	(*sc->write)(sc, DS1687_HOUR, tobcd(ct->hour, dm));
	(*sc->write)(sc, DS1687_DOW, tobcd(ct->dow, dm));
	(*sc->write)(sc, DS1687_DAY, tobcd(ct->day, dm));
	(*sc->write)(sc, DS1687_MONTH, tobcd(ct->mon, dm));
	(*sc->write)(sc, DS1687_YEAR, tobcd(year, dm));
	(*sc->write)(sc, DS1687_CENTURY, tobcd(century, dm));

	/* Enable updates. */
	(*sc->write)(sc, DS1687_CTRL_B, ctrl);
}

/*
 * Dallas DS1742 clock driver.
 */

void
ds1742_get(void *v, time_t base, struct tod_time *ct)
{
	struct dsrtc_softc *sc = v;
	int csr;

	/* Freeze update. */
	csr = bus_space_read_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR);
	csr |= MK48TXX_CSR_READ;
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR, csr);

	/* Read the RTC. */
	ct->sec = frombcd(bus_space_read_1(sc->sc_clkt, sc->sc_clkh,
	    MK48TXX_ISEC), 0);
	ct->min = frombcd(bus_space_read_1(sc->sc_clkt, sc->sc_clkh,
	    MK48TXX_IMIN), 0);
	ct->hour = frombcd(bus_space_read_1(sc->sc_clkt, sc->sc_clkh,
	    MK48TXX_IHOUR), 0);
	ct->day = frombcd(bus_space_read_1(sc->sc_clkt, sc->sc_clkh,
	    MK48TXX_IDAY), 0);
	ct->mon = frombcd(bus_space_read_1(sc->sc_clkt, sc->sc_clkh,
	    MK48TXX_IMON), 0);
	ct->year = frombcd(bus_space_read_1(sc->sc_clkt, sc->sc_clkh,
	    MK48TXX_IYEAR), 0) + sc->sc_yrbase;

	/* Enable updates again. */
	csr = bus_space_read_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR);
	csr &= ~MK48TXX_CSR_READ;
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR, csr);
}

void
ds1742_set(void *v, struct tod_time *ct)
{
	struct dsrtc_softc *sc = v;
	int csr;

	/* Enable write. */
	csr = bus_space_read_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR);
	csr |= MK48TXX_CSR_WRITE;
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR, csr);

	/* Update the RTC. */
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ISEC,
	    tobcd(ct->sec, 0));
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_IMIN,
	    tobcd(ct->min, 0));
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_IHOUR,
	    tobcd(ct->hour, 0));
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_IWDAY,
	    tobcd(ct->dow, 0));
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_IDAY,
	    tobcd(ct->day, 0));
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_IMON,
	    tobcd(ct->mon, 0));
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_IYEAR,
	    tobcd(ct->year - sc->sc_yrbase, 0));

	/* Load new values. */
	csr = bus_space_read_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR);
	csr &= ~MK48TXX_CSR_WRITE;
	bus_space_write_1(sc->sc_clkt, sc->sc_clkh, MK48TXX_ICSR, csr);
}

/*
 * Routines allowing external access to the RTC registers, used by
 * power(4).
 */

int
dsrtc_register_read(int reg)
{
	struct dsrtc_softc *sc;

	if (dsrtc_cd.cd_ndevs == 0 ||
	    (sc = (struct dsrtc_softc *)dsrtc_cd.cd_devs[0]) == NULL ||
	    sc->read == NULL)
		return -1;

	return (*sc->read)(sc, reg);
}

void
dsrtc_register_write(int reg, int val)
{
	struct dsrtc_softc *sc;

	if (dsrtc_cd.cd_ndevs == 0 ||
	    (sc = (struct dsrtc_softc *)dsrtc_cd.cd_devs[0]) == NULL ||
	    sc->write == NULL)
		return;

	(*sc->write)(sc, reg, val);
}
@


1.12
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.11 2009/11/07 14:49:01 miod Exp $ */
a158 3

		bus_space_unmap(iaa->iaa_memt, ih, 1);
		bus_space_unmap(iaa->iaa_memt, ih2, 1);
@


1.11
log
@Change sgi system identification from a single system type list, to a smaller
system type list (which really is the system family) and a subsystem type.

No functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.10 2009/10/26 20:14:42 miod Exp $ */
d125 1
a125 1
	 * The IOC3 RTC is either a Dallas (now Maxim) DS1386 or compatible
@


1.10
log
@Rename struct confargs to struct mainbus_attach_args for consistency and also
to prevent further abuse of it.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.9 2009/10/26 18:34:53 miod Exp $ */
d176 1
a176 1
		sc->sc_yrbase = sys_config.system_type == SGI_O300 ?
d217 1
a217 1
	sc->sc_yrbase = sys_config.system_type == SGI_O300 ?
@


1.9
log
@Remove DS1687 vs DS742 runtime detection code; we only attach dsrtc on the
onboard ioc(4) devices, and on Octane this is always a DS1687 wired to
IOC3 bytebus #1 and #2, while on Origin this is always a DS1742 wired to
IOC3 bytebus #0.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.8 2009/10/26 18:00:06 miod Exp $ */
d107 6
a112 1
	struct confargs *ca = (struct confargs *)aux;
d114 1
a114 1
	return strcmp(ca->ca_name, dsrtc_cd.cd_name) == 0;
@


1.8
log
@Better crime/mace interrupt handling; interrupt information is no longer
specified in the kernel configuration file, but is provided by macebus(4)
as part of the  child device attachment args, and provide both crime and
mace interrupt bitmasks; this allows us to only really enable interrupt
sources we care about, and to avoid invoking interrupt handler we don't need
to for the few mace interrupts multiplexed at the crime level.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.7 2009/10/07 20:39:45 miod Exp $ */
a117 2
	uint c, c2, c3;
	int ds1687 = 0;
d131 1
a131 4
	if (bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh, IOC3_BYTEBUS_1,
	    1, &ih) != 0 || bus_space_subregion(iaa->iaa_memt, iaa->iaa_memh,
	    IOC3_BYTEBUS_2, 1, &ih2) != 0)
		goto fail;
d133 2
a134 10
	/*
	 * Check the low 4 bits of control register C. If any is set,
	 * or if the values written to them stick, then this is not
	 * a Dallas chip.
	 *
	 * Note that the value we read the next few times can't be
	 * compared to the first value read, as the upper four bits
	 * are cleared by reading them. And might get set again
	 * between two reads.
	 */
d136 5
a140 29
	bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
	c = bus_space_read_1(iaa->iaa_memt, ih2, 0);
	if ((c & 0x0f) != 0)
		goto done;

	bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
	bus_space_write_1(iaa->iaa_memt, ih2, 0, c | 0x0f);

	bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
	c2 = bus_space_read_1(iaa->iaa_memt, ih2, 0);
	if ((c2 & 0x0f) == 0)
		ds1687 = 1;	/* maybe... */
	
	bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
	bus_space_write_1(iaa->iaa_memt, ih2, 0, c2 | 0x0f);

	bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
	c3 = bus_space_read_1(iaa->iaa_memt, ih2, 0);
	if ((c3 & 0x0f) != 0)
		ds1687 = 0;	/* ...well, no. */

	/* write back first value read in case this is not a DS1687 */
	if (ds1687 == 0) {
		bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
		bus_space_write_1(iaa->iaa_memt, ih2, 0, c);
	}
	
done:
	sc->sc_clkt = iaa->iaa_memt;
a141 1
	if (ds1687) {
a149 1
		sys_tod.tod_cookie = self;
d153 2
d159 1
a159 1
		    IOC3_BYTEBUS_0 + MK48T35_CLKOFF,
a175 1
		sys_tod.tod_cookie = self;
d179 1
@


1.7
log
@Attach DS1742 style dsrtc to iof (IOC4) too.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.6 2009/07/26 19:58:49 miod Exp $ */
d45 1
a45 1
#include <sgi/localbus/macebus.h>
d268 1
a268 1
	struct confargs *ca = aux;
d270 2
a271 2
	sc->sc_clkt = ca->ca_iot;
	if (bus_space_map(sc->sc_clkt, MACE_ISA_RTC_OFFS, 128 * 256, 0,
@


1.6
log
@Rework ioc children attachment: instead of having ioc build a semi-bogus
bus_space_handle_t, pass them ioc's own bus_space_handle and bus_space_tag,
and have the children use bus_space_subregion() on it.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.5 2009/05/15 23:02:23 miod Exp $ */
d48 1
d62 1
d77 4
d217 40
@


1.5
log
@TOD clock support for IOC3 flavours with DS174x chips (which are rebadged
MK48Txx). Entangled with preliminary changes which will hopefully eventually
lead to power(4) attaching on IP30 (but not finished yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.4 2009/05/08 18:35:13 miod Exp $ */
d101 3
a103 1
	return 1;
d127 4
a130 4
	if (bus_space_map(iaa->iaa_memt, IOC3_BYTEBUS_1, 1, 0, &ih) != 0)
		goto fail0;
	if (bus_space_map(iaa->iaa_memt, IOC3_BYTEBUS_2, 1, 0, &ih2) != 0)
		goto fail1;
d189 1
a189 1
		if (bus_space_map(iaa->iaa_memt,
d191 2
a192 2
		    MK48T35_CLKSZ - MK48T35_CLKOFF, 0, &ih) != 0)
			goto fail0;
d214 1
a214 3
fail1:
	bus_space_unmap(iaa->iaa_memt, ih, 1);
fail0:
@


1.4
log
@IP30 Dallas clock runs in non-BCD mode, so make sure to check which mode
the chip is in, and honour it.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.3 2009/04/20 20:31:06 miod Exp $ */
a33 2
#include <dev/ic/ds1687reg.h>

d37 4
d44 1
a48 2
bus_space_handle_t clock_h;	/* XXX */

d53 1
d59 1
a59 1
int	dsrtc_match_ioc(struct device *, void *, void *);
a60 1
int	dsrtc_match_macebus(struct device *, void *, void *);
d68 1
a68 1
	sizeof(struct dsrtc_softc), dsrtc_match_macebus, dsrtc_attach_macebus
d72 1
a72 1
	sizeof(struct dsrtc_softc), dsrtc_match_ioc, dsrtc_attach_ioc
d77 2
a78 2
int	ip30_dsrtc_read(struct dsrtc_softc *, int);
void	ip30_dsrtc_write(struct dsrtc_softc *, int, int);
d82 2
d99 7
a105 1
dsrtc_match_ioc(struct device *parent, void *match, void *aux)
d107 1
d111 1
a111 1
	int rc = 0;
d115 8
a122 2
	 * (likely a more recent DS1687), or a Mostek (now SGS Thomson)
	 * MK48T35.
d126 1
a126 2
		return 0;

d128 1
a128 1
		goto unmap;
d152 1
a152 1
		rc = 1;
d160 1
a160 1
		rc = 0;
d162 5
a166 3
	/* write back first value read in case this is not a Dallas chip */
	bus_space_write_1(iaa->iaa_memt, ih, 0, DS1687_CTRL_C);
	bus_space_write_1(iaa->iaa_memt, ih2, 0, c);
d169 4
a172 3
	bus_space_unmap(iaa->iaa_memt, ih2, 1);
unmap:
	bus_space_unmap(iaa->iaa_memt, ih, 1);
d174 2
a175 2
	return rc;
}
d177 2
a178 5
void
dsrtc_attach_ioc(struct device *parent, struct device *self, void *aux)
{
	struct dsrtc_softc *sc = (void *)self;
	struct ioc_attach_args *iaa = aux;
d180 28
a207 5
	sc->sc_clkt = iaa->iaa_memt;
	if (bus_space_map(sc->sc_clkt, IOC3_BYTEBUS_1, 1, 0, &sc->sc_clkh) ||
	    bus_space_map(sc->sc_clkt, IOC3_BYTEBUS_2, 1, 0, &sc->sc_clkh2)) {
		printf(": can't map registers\n");
		return;
d210 1
a210 1
	printf(": DS1687\n");
d212 4
a215 12
	sc->read = ip30_dsrtc_read;
	sc->write = ip30_dsrtc_write;

	sys_tod.tod_cookie = self;
	sys_tod.tod_get = ds1687_get;
	sys_tod.tod_set = ds1687_set;
}

int
dsrtc_match_macebus(struct device *parent, void *match, void *aux)
{
	return 1;
d225 1
a225 1
	if (bus_space_map(sc->sc_clkt, MACE_ISA_RTC_OFFS, 128*256, 0,
a238 7

	/*
	 * XXX Expose the clock address space so that it can be used
	 * outside of clock(4). This is rather inelegant, however it
	 * will have to do for now...
	 */
	clock_h = sc->sc_clkh;
d254 1
a254 1
ip30_dsrtc_read(struct dsrtc_softc *sc, int reg)
d261 1
a261 1
ip30_dsrtc_write(struct dsrtc_softc *sc, int reg, int val)
d268 1
a268 1
 * Dallas clock driver.
d270 1
d334 99
@


1.3
log
@Some recent IOC3 do not have Dallas timekeepers, so perform a few more tests
before deciding to attach dsrtc.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.2 2009/04/13 21:17:54 miod Exp $ */
d82 2
a83 2
static inline int frombcd(int);
static inline int tobcd(int);
d85 1
a85 1
frombcd(int x)
d87 1
a87 1
	return (x >> 4) * 10 + (x & 0xf);
d90 1
a90 1
tobcd(int x)
d92 1
a92 1
	return (x / 10 * 16) + (x % 10);
d251 1
a251 1
	int ctrl, century;
d257 3
d265 7
a271 7
	ct->sec = frombcd((*sc->read)(sc, DS1687_SEC));
	ct->min = frombcd((*sc->read)(sc, DS1687_MIN));
	ct->hour = frombcd((*sc->read)(sc, DS1687_HOUR));
	ct->day = frombcd((*sc->read)(sc, DS1687_DAY));
	ct->mon = frombcd((*sc->read)(sc, DS1687_MONTH));
	ct->year = frombcd((*sc->read)(sc, DS1687_YEAR));
	century = frombcd((*sc->read)(sc, DS1687_CENTURY));
d280 1
a280 1
	int year, century, ctrl;
d289 1
a289 1
	/* Select data mode 0 (BCD) and 24 hour time. */
d291 2
a292 2
	(*sc->write)(sc, DS1687_CTRL_B,
	    (ctrl & ~DS1687_DM_1) | DS1687_24_HR);
d299 8
a306 8
	(*sc->write)(sc, DS1687_SEC, tobcd(ct->sec));
	(*sc->write)(sc, DS1687_MIN, tobcd(ct->min));
	(*sc->write)(sc, DS1687_HOUR, tobcd(ct->hour));
	(*sc->write)(sc, DS1687_DOW, tobcd(ct->dow));
	(*sc->write)(sc, DS1687_DAY, tobcd(ct->day));
	(*sc->write)(sc, DS1687_MONTH, tobcd(ct->mon));
	(*sc->write)(sc, DS1687_YEAR, tobcd(year));
	(*sc->write)(sc, DS1687_CENTURY, tobcd(century));
@


1.2
log
@The start of Origin 200 support. Based on some code contributed by pefo@@
some years ago for KL enumeration, building on the existing XBow support
to limit ourselves to a single node for now.

This is a work-in-progress; it currently lacks complete interrupt code,
as well as PCI resource management. And there are likely bugs creeping
inside.
@
text
@d1 1
a1 1
/*	$OpenBSD: dsrtc.c,v 1.1 2008/04/07 22:36:26 miod Exp $ */
d98 12
a109 5
	switch (sys_config.system_type) {
	case SGI_OCTANE:
	case SGI_O200:
		return 1;
	default:
d111 46
a156 1
	}
@


1.1
log
@Split clock attachment in two parts: a timecounter attachment (at mainbus),
and a time-of-day chip (wherever it gets found).
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.11 2008/02/20 18:46:20 miod Exp $ */
d98 5
a102 1
	if (sys_config.system_type != SGI_OCTANE)
d104 1
a104 2

	return 1;
@

