head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.10
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.13
date	2015.02.11.07.05.39;	author dlg;	state Exp;
branches;
next	1.12;
commitid	JTpbkhDknrIuy9pn;

1.12
date	2012.08.10.17.49.31;	author shadchin;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.07.15.30.16;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.03.18.29.56;	author shadchin;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.26.18.00.06;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.15.19.12.19;	author blambert;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.14.18.29.52;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.21.13.30.04;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.20.18.46.20;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.14.16.09.23;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.26.10.05.52;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.25.11.58.41;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.18.18.59.29;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.13
log
@no md code wants lockmgr locks, so no md code needs to include sys/lock.h

with and ok miod@@
@
text
@/*	$OpenBSD: mkbc.c,v 1.12 2012/08/10 17:49:31 shadchin Exp $  */

/*
 * Copyright (c) 2006, 2007, Joel Sing
 * All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF MIND,
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Derived from sys/dev/ic/pckbc.c under the following terms:
 * $NetBSD: pckbc.c,v 1.5 2000/06/09 04:58:35 soda Exp $ */

/*
 * Copyright (c) 1998
 *	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for Moosehead PS/2 Controllers (mkbc)
 *
 * There are actually two separate controllers attached to the macebus.
 * However in the interest of reusing code, we want to act like a pckbc(4)
 * so that we can directly attach pckbd(4) and pms(4). As a result, we make 
 * each controller look like a "slot" and combine them into a single device.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/timeout.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/errno.h>
#include <sys/queue.h>

#include <machine/autoconf.h>
#include <machine/bus.h>

#include <mips64/archtype.h>

#include <sgi/localbus/crimebus.h>
#include <sgi/localbus/macebusvar.h>

#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>

#include "mkbcreg.h"

const char *mkbc_slot_names[] = { "kbd", "mouse" };

#define KBC_DEVCMD_ACK 0xfa
#define KBC_DEVCMD_RESEND 0xfe

#define KBD_DELAY       DELAY(8)

struct mkbc_softc {
	struct pckbc_softc sc_pckbc;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
};

int	mkbc_match(struct device *, void *, void *);
void	mkbc_attach(struct device *, struct device *, void *);

struct cfattach mkbc_ca = {
	sizeof(struct mkbc_softc), mkbc_match, mkbc_attach
};

struct cfdriver mkbc_cd = {
	NULL, "mkbc", DV_DULL
};

/* Descriptor for one device command. */
struct pckbc_devcmd {
	TAILQ_ENTRY(pckbc_devcmd) next;
	int flags;
#define KBC_CMDFLAG_SYNC 1 /* Give descriptor back to caller. */
#define KBC_CMDFLAG_SLOW 2
	u_char cmd[4];
	int cmdlen, cmdidx, retries;
	u_char response[4];
	int status, responselen, responseidx;
};

/* Data per slave device. */
struct pckbc_slotdata {
	int polling; /* Don't read data port in interrupt handler. */
	TAILQ_HEAD(, pckbc_devcmd) cmdqueue; /* Active commands. */
	TAILQ_HEAD(, pckbc_devcmd) freequeue; /* Free commands. */
#define NCMD 5
	struct pckbc_devcmd cmds[NCMD];
	bus_space_handle_t ioh;
};

#define CMD_IN_QUEUE(q) (TAILQ_FIRST(&(q)->cmdqueue) != NULL)

static int mkbc_console;
static struct pckbc_slotdata mkbc_cons_slotdata;
struct	pckbc_internal mkbc_consdata;

void	mkbc_start(struct pckbc_internal *, pckbc_slot_t);
int	mkbc_attach_slot(struct mkbc_softc *, pckbc_slot_t);
void	mkbc_init_slotdata(struct pckbc_slotdata *);
int	mkbc_submatch(struct device *, void *, void *);
int	mkbcprint(void *, const char *);
int	mkbcintr(void *);
int	mkbcintr_internal(struct pckbc_internal *, struct pckbc_softc *);
void	mkbc_cleanqueue(struct pckbc_slotdata *);
void	mkbc_cleanup(void *);
void	mkbc_poll(void *);
int	mkbc_cmdresponse(struct pckbc_internal *, pckbc_slot_t, u_char);
int	mkbc_poll_read(bus_space_tag_t, bus_space_handle_t);
int	mkbc_poll_write(bus_space_tag_t, bus_space_handle_t, int);

int
mkbc_match(struct device *parent, void *cf, void *aux)
{
	return 1;
}

void
mkbc_init_slotdata(struct pckbc_slotdata *q)
{
	int i;
	TAILQ_INIT(&q->cmdqueue);
	TAILQ_INIT(&q->freequeue);

	for (i = 0; i < NCMD; i++) {
		TAILQ_INSERT_TAIL(&q->freequeue, &(q->cmds[i]), next);
	}
	q->polling = 0;
}

int
mkbcprint(void *aux, const char *pnp)
{
	struct pckbc_attach_args *pa = aux;

	if (!pnp)
		printf(" (%s slot)", mkbc_slot_names[pa->pa_slot]);

	return (QUIET);
}

int
mkbc_submatch(struct device *parent, void *match, void *aux)
{
	struct cfdata *cf = match;
	struct pckbc_attach_args *pa = aux;

	if (cf->cf_loc[PCKBCCF_SLOT] != PCKBCCF_SLOT_DEFAULT &&
	    cf->cf_loc[PCKBCCF_SLOT] != pa->pa_slot)
		return (0);
	return ((*cf->cf_attach->ca_match)(parent, cf, aux));
}

int
mkbc_attach_slot(struct mkbc_softc *msc, pckbc_slot_t slot)
{
	struct pckbc_softc *sc = &msc->sc_pckbc;
	struct pckbc_internal *t = sc->id;
	struct pckbc_attach_args pa;
	bus_space_handle_t ioh;
	int found;

	if (!t->t_slotdata[slot]) {

		t->t_slotdata[slot] = malloc(sizeof(struct pckbc_slotdata),
		    M_DEVBUF, M_NOWAIT);

		if (t->t_slotdata[slot] == NULL) {
			printf("Failed to allocate slot data!\n");
			return 0;
		}
		mkbc_init_slotdata(t->t_slotdata[slot]);

		/* Map subregion of bus space for this "slot". */
		if (bus_space_subregion(msc->iot, msc->ioh, 
		    MKBC_PORTSIZE * slot, MKBC_PORTSIZE, &ioh)) {
			printf("Unable to map slot subregion!\n");
			return 0;
		}
		t->t_slotdata[slot]->ioh = ioh;

		/* Initialise controller. */
		bus_space_write_8(msc->iot, ioh, MKBC_CONTROL,
		    MKBC_CONTROL_TX_CLOCK_DISABLE | MKBC_CONTROL_RESET);
		delay(100); /* 100us */

		/* Enable controller. */
		bus_space_write_8(t->t_iot, t->t_slotdata[slot]->ioh, 
		    MKBC_CONTROL,
		    MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE);

	}

	pa.pa_tag = t;
	pa.pa_slot = slot;
	found = (config_found_sm((struct device *)msc, &pa,
	    mkbcprint, mkbc_submatch) != NULL);

	return (found);
}

void
mkbc_attach(struct device *parent, struct device *self, void *aux)
{
	struct mkbc_softc *msc = (void*)self;
	struct macebus_attach_args *maa = aux;
	struct pckbc_softc *sc = &msc->sc_pckbc;
	struct pckbc_internal *t;

	if (mkbc_console == 0) {

		/* Setup bus space mapping. */
		msc->iot = maa->maa_iot;
		if (bus_space_map(msc->iot, maa->maa_baseaddr,
		    MKBC_PORTSIZE * 2, 0, &msc->ioh)) {
			printf(": unable to map bus space!\n");
			return;
		}

		/* Setup pckbc_internal structure. */
		t = malloc(sizeof(struct pckbc_internal), M_DEVBUF,
		    M_WAITOK | M_ZERO);
		t->t_iot = msc->iot;
		t->t_ioh_d = 0;
		t->t_ioh_c = 0;
		t->t_addr = maa->maa_baseaddr;
		t->t_sc = (struct pckbc_softc *)msc;
		sc->id = t;

		timeout_set(&t->t_cleanup, mkbc_cleanup, t);
		timeout_set(&t->t_poll, mkbc_poll, t);

	} else {

		/* Things have already been setup in mkbc_cnattach. */
		msc->iot = mkbc_consdata.t_iot;
		msc->ioh = mkbc_consdata.t_ioh_d;
		mkbc_consdata.t_sc = (struct pckbc_softc *)msc;
		sc->id = &mkbc_consdata;

	}

	/* Establish interrupt handler. */
	if (macebus_intr_establish(maa->maa_intr, maa->maa_mace_intr,
	    IST_EDGE, IPL_TTY, mkbcintr, msc, sc->sc_dv.dv_xname))
		printf("\n");
	else
		printf(": unable to establish interrupt\n");

	/*
	 * Attach "slots" - technically these are separate controllers
	 * in the same bus space, however we want to act like pckbc(4) so
	 * that we can attach pckbd(4) and pms(4). 
	 */
	mkbc_attach_slot(msc, PCKBC_KBD_SLOT);
	mkbc_attach_slot(msc, PCKBC_AUX_SLOT);
}

int
mkbcintr(void *vsc)
{
	struct mkbc_softc *msc = (struct mkbc_softc *)vsc;
	struct pckbc_softc *sc = &msc->sc_pckbc;
	struct pckbc_internal *t = sc->id;

	return mkbcintr_internal(t, sc);
}

int
mkbcintr_internal(struct pckbc_internal *t, struct pckbc_softc *sc)
{
	pckbc_slot_t slot;
	struct pckbc_slotdata *q;
	int served = 0;
	u_int64_t stat;
	u_int64_t data;

	/* Reschedule timeout further into the idle times. */
	if (timeout_pending(&t->t_poll))
		timeout_add_sec(&t->t_poll, 1);

	/*
	 * Need to check both "slots" since interrupt could be from
	 * either controller.
	 */ 
	slot = PCKBC_KBD_SLOT;
	q = t->t_slotdata[slot];
	for(;;) {

		if (!q) {
			printf("mkbcintr: no kbd slot data!\n");
			break;
		}

		stat = bus_space_read_8(t->t_iot, q->ioh, MKBC_STATUS);
		if (!(stat & MKBC_STATUS_RX_FULL))
			break;

		served = 1;

		if (q->polling)
			break; /* pckbc_poll_data() will get it */

		KBD_DELAY;
		data = bus_space_read_8(t->t_iot, q->ioh, MKBC_RX_PORT) & 0xff;
		if (CMD_IN_QUEUE(q) && mkbc_cmdresponse(t, slot, data))
			continue;

		if (sc->inputhandler[slot])
			(*sc->inputhandler[slot])(sc->inputarg[slot], data);
#ifdef MKBCDEBUG
		else
			printf("mkbcintr: slot %d lost %d\n", slot, data);
#endif
	}
	
	/* Mouse controller/slot. */
	slot = PCKBC_AUX_SLOT;
	q = t->t_slotdata[slot];
	for(;;) {

		if (!q) {
			printf("mkbcintr: no mouse slot data!\n");
			break;
		}

		stat = bus_space_read_8(t->t_iot, q->ioh, MKBC_STATUS);
		if (!(stat & MKBC_STATUS_RX_FULL))
			break;

		served = 1;

		if (q->polling)
			break; /* pckbc_poll_data() will get it. */

		KBD_DELAY;
		data = bus_space_read_8(t->t_iot, q->ioh, MKBC_RX_PORT) & 0xff;
		if (CMD_IN_QUEUE(q) && mkbc_cmdresponse(t, slot, data))
			continue;

		if (sc->inputhandler[slot])
			(*sc->inputhandler[slot])(sc->inputarg[slot], data);
#ifdef MKBCDEBUG
		else
			printf("mkbcintr: slot %d lost %d\n", slot, data);
#endif
	}

	return (served);
}

int
mkbc_poll_write(bus_space_tag_t iot, bus_space_handle_t ioh, int val)
{
	int timeout = 10000;
	u_int64_t stat;

	/* Attempt to write a value to the controller. */
	while (timeout--) {
		stat = bus_space_read_8(iot, ioh, MKBC_STATUS);
		if (stat & MKBC_STATUS_TX_EMPTY) {
			bus_space_write_8(iot, ioh, MKBC_TX_PORT, val & 0xff);
			return 0;
		}
		delay(50);
	}
	return -1;
}

int
mkbc_poll_read(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	int timeout = 10000;
	u_int64_t stat, val;

	/* Poll input from controller. */
	while (timeout--) {
		stat = bus_space_read_8(iot, ioh, MKBC_STATUS);
		if (stat & MKBC_STATUS_RX_FULL) {
			val = bus_space_read_8(iot, ioh, MKBC_RX_PORT);
			return val & 0xff;
		}
		delay(50);
	}
	return -1;
}

/*
 * Pass command to device, poll for ACK and data.
 * to be called at spltty()
 */
static void
mkbc_poll_cmd(struct pckbc_internal *t, pckbc_slot_t slot, 
    struct pckbc_devcmd *cmd)
{
	bus_space_tag_t iot = t->t_iot;
	bus_space_handle_t ioh = t->t_slotdata[slot]->ioh;

	int i, c = 0;

	while (cmd->cmdidx < cmd->cmdlen) {
		if (mkbc_poll_write(iot, ioh, cmd->cmd[cmd->cmdidx]) == -1) {
			printf("mkbc_poll_cmd: send error\n");
			cmd->status = EIO;
			return;
		}
		for (i = 10; i; i--) { /* 1s ??? */
			c = mkbc_poll_read(iot, ioh);
			if (c != -1)
				break;
		}

		if (c == KBC_DEVCMD_ACK) {
			cmd->cmdidx++;
			continue;
		}
		if (c == KBC_DEVCMD_RESEND) {
#ifdef MKBCDEBUG
			printf("mkbc_cmd: RESEND\n");
#endif
			if (cmd->retries++ < 5)
				continue;
			else {
#ifdef MKBCDEBUG
				printf("mkbc: cmd failed\n");
#endif
				cmd->status = EIO;
				return;
			}
		}
		if (c == -1) {
#ifdef MKBCDEBUG
			printf("mkbc_cmd: timeout\n");
#endif
			cmd->status = EIO;
			return;
		}
#ifdef MKBCDEBUG
		printf("mkbc_cmd: lost 0x%x\n", c);
#endif
	}

	while (cmd->responseidx < cmd->responselen) {
		if (cmd->flags & KBC_CMDFLAG_SLOW)
			i = 100; /* 10s ??? */
		else
			i = 10; /* 1s ??? */
		while (i--) {
			c = mkbc_poll_read(iot, ioh);
			if (c != -1)
				break;
		}
		if (c == -1) {
#ifdef MKBCDEBUG
			printf("mkbc_poll_cmd: no data\n");
#endif
			cmd->status = ETIMEDOUT;
			return;
		} else
			cmd->response[cmd->responseidx++] = c;
	}
}

/*
 * Clean up a command queue, throw away everything.
 */
void
mkbc_cleanqueue(struct pckbc_slotdata *q)
{
	struct pckbc_devcmd *cmd;
#ifdef MKBCDEBUG
	int i;
#endif

	while ((cmd = TAILQ_FIRST(&q->cmdqueue))) {
		TAILQ_REMOVE(&q->cmdqueue, cmd, next);
#ifdef MKBCDEBUG
		printf("mkbc_cleanqueue: removing");
		for (i = 0; i < cmd->cmdlen; i++)
			printf(" %02x", cmd->cmd[i]);
		printf("\n");
#endif
		TAILQ_INSERT_TAIL(&q->freequeue, cmd, next);
	}
}

/*
 * Timeout error handler: clean queues and data port.
 * XXX could be less invasive.
 */
void
mkbc_cleanup(void *self)
{
	struct pckbc_internal *t = self;
	int s;

	printf("mkbc: command timeout\n");

	s = spltty();

	if (t->t_slotdata[PCKBC_KBD_SLOT])
		mkbc_cleanqueue(t->t_slotdata[PCKBC_KBD_SLOT]);
	if (t->t_slotdata[PCKBC_AUX_SLOT])
		mkbc_cleanqueue(t->t_slotdata[PCKBC_AUX_SLOT]);

	while (mkbc_poll_read(t->t_iot, t->t_slotdata[PCKBC_KBD_SLOT]->ioh) 
	       != -1) ;
	while (mkbc_poll_read(t->t_iot, t->t_slotdata[PCKBC_AUX_SLOT]->ioh) 
	       != -1) ;

	/* Reset KBC? */

	splx(s);
}

/*
 * Pass command to device during normal operation.
 * to be called at spltty()
 */
void
mkbc_start(struct pckbc_internal *t, pckbc_slot_t slot)
{
	struct pckbc_slotdata *q = t->t_slotdata[slot];
	struct pckbc_devcmd *cmd = TAILQ_FIRST(&q->cmdqueue);

	if (q->polling) {
		do {
			mkbc_poll_cmd(t, slot, cmd);
			if (cmd->status)
				printf("mkbc_start: command error\n");

			TAILQ_REMOVE(&q->cmdqueue, cmd, next);
			if (cmd->flags & KBC_CMDFLAG_SYNC)
				wakeup(cmd);
			else {
				timeout_del(&t->t_cleanup);
				TAILQ_INSERT_TAIL(&q->freequeue, cmd, next);
			}
			cmd = TAILQ_FIRST(&q->cmdqueue);
		} while (cmd);
		return;
	}

	if (mkbc_poll_write(t->t_iot, t->t_slotdata[slot]->ioh, 
	    cmd->cmd[cmd->cmdidx])) {
		printf("mkbc_start: send error\n");
		/* XXX what now? */
		return;
	}
}

/*
 * Handle command responses coming in asynchronously,
 * return nonzero if valid response.
 * to be called at spltty()
 */
int
mkbc_cmdresponse(struct pckbc_internal *t, pckbc_slot_t slot, u_char data)
{
	struct pckbc_slotdata *q = t->t_slotdata[slot];
	struct pckbc_devcmd *cmd = TAILQ_FIRST(&q->cmdqueue);
#ifdef DIAGNOSTIC
	if (!cmd)
		panic("mkbc_cmdresponse: no active command");
#endif
	if (cmd->cmdidx < cmd->cmdlen) {
		if (data != KBC_DEVCMD_ACK && data != KBC_DEVCMD_RESEND)
			return (0);

		if (data == KBC_DEVCMD_RESEND) {
			if (cmd->retries++ < 5) {
				/* try again last command */
				goto restart;
			} else {
#ifdef MKBCDEBUG
				printf("mkbc: cmd failed\n");
#endif
				cmd->status = EIO;
				/* dequeue */
			}
		} else {
			if (++cmd->cmdidx < cmd->cmdlen)
				goto restart;
			if (cmd->responselen)
				return (1);
			/* else dequeue */
		}
	} else if (cmd->responseidx < cmd->responselen) {
		cmd->response[cmd->responseidx++] = data;
		if (cmd->responseidx < cmd->responselen)
			return (1);
		/* else dequeue */
	} else
		return (0);

	/* dequeue: */
	TAILQ_REMOVE(&q->cmdqueue, cmd, next);
	if (cmd->flags & KBC_CMDFLAG_SYNC)
		wakeup(cmd);
	else {
		timeout_del(&t->t_cleanup);
		TAILQ_INSERT_TAIL(&q->freequeue, cmd, next);
	}
	if (!CMD_IN_QUEUE(q))
		return (1);
restart:
	mkbc_start(t, slot);
	return (1);
}

/*
 * Interfaces to act like pckbc(4).
 */

int
pckbc_xt_translation(pckbc_tag_t self)
{
	/* Translation isn't supported... */
	return (-1);
}

/* For use in autoconfiguration. */
int
pckbc_poll_cmd(pckbc_tag_t self, pckbc_slot_t slot, u_char *cmd, int len, 
	       int responselen, u_char *respbuf, int slow)
{
	struct pckbc_devcmd nc;
	int s;

	if ((len > 4) || (responselen > 4))
		return (EINVAL);

	bzero(&nc, sizeof(nc));
	bcopy(cmd, nc.cmd, len);
	nc.cmdlen = len;
	nc.responselen = responselen;
	nc.flags = (slow ? KBC_CMDFLAG_SLOW : 0);

	s = spltty();
	mkbc_poll_cmd(self, slot, &nc);
	splx(s);

	if (nc.status == 0 && respbuf)
		bcopy(nc.response, respbuf, responselen);

	return (nc.status);
}

void
pckbc_flush(pckbc_tag_t self, pckbc_slot_t slot)
{
	/* Read any data and discard. */
	struct pckbc_internal *t = self;
	(void) mkbc_poll_read(t->t_iot, t->t_slotdata[slot]->ioh);
}

/*
 * Put command into the device's command queue, return zero or errno.
 */
int
pckbc_enqueue_cmd(pckbc_tag_t self, pckbc_slot_t slot, u_char *cmd, int len, 
    int responselen, int sync, u_char *respbuf)
{
	struct pckbc_internal *t = self;
	struct pckbc_slotdata *q = t->t_slotdata[slot];
	struct pckbc_devcmd *nc;
	int s, isactive, res = 0;

	if ((len > 4) || (responselen > 4))
		return (EINVAL);
	s = spltty();
	nc = TAILQ_FIRST(&q->freequeue);
	if (nc) {
		TAILQ_REMOVE(&q->freequeue, nc, next);
	}
	splx(s);
	if (!nc)
		return (ENOMEM);

	bzero(nc, sizeof(*nc));
	bcopy(cmd, nc->cmd, len);
	nc->cmdlen = len;
	nc->responselen = responselen;
	nc->flags = (sync ? KBC_CMDFLAG_SYNC : 0);

	s = spltty();

	if (q->polling && sync) {
		/*
		 * XXX We should poll until the queue is empty.
		 * But we don't come here normally, so make
		 * it simple and throw away everything.
		 */
		mkbc_cleanqueue(q);
	}

	isactive = CMD_IN_QUEUE(q);
	TAILQ_INSERT_TAIL(&q->cmdqueue, nc, next);
	if (!isactive)
		mkbc_start(t, slot);

	if (q->polling)
		res = (sync ? nc->status : 0);
	else if (sync) {
		if ((res = tsleep(nc, 0, "kbccmd", 1*hz))) {
			TAILQ_REMOVE(&q->cmdqueue, nc, next);
			mkbc_cleanup(t);
		} else
			res = nc->status;
	} else
		timeout_add_sec(&t->t_cleanup, 1);

	if (sync) {
		if (respbuf)
			bcopy(nc->response, respbuf, responselen);
		TAILQ_INSERT_TAIL(&q->freequeue, nc, next);
	}

	splx(s);

	return (res);
}

int
pckbc_poll_data(pckbc_tag_t self, pckbc_slot_t slot)
{
	struct pckbc_internal *t = self;
	struct pckbc_slotdata *q = t->t_slotdata[slot];
	int c;

	c = mkbc_poll_read(t->t_iot, q->ioh);
	if (c != -1 && q && CMD_IN_QUEUE(q)) {
		/* We jumped into a running command - try to deliver the 
		   response. */
		if (mkbc_cmdresponse(t, slot, c))
			return (-1);
	}
	return (c);
}

void
pckbc_set_inputhandler(pckbc_tag_t self, pckbc_slot_t slot, pckbc_inputfcn func,
    void *arg, char *name)
{
	struct pckbc_internal *t = (struct pckbc_internal *)self;
	struct pckbc_softc *sc = t->t_sc;

	if (slot >= PCKBC_NSLOTS)
		panic("mkbc_set_inputhandler: bad slot %d", slot);

	sc->inputhandler[slot] = func;
	sc->inputarg[slot] = arg;
	sc->subname[slot] = name;

	if (mkbc_console && slot == PCKBC_KBD_SLOT)
		timeout_add_sec(&t->t_poll, 1);
}

void
pckbc_slot_enable(pckbc_tag_t self, pckbc_slot_t slot, int on)
{
	struct pckbc_internal *t = (struct pckbc_internal *)self;

	/*
	 * Should we also enable/disable the controller?? 
	 * If we did then none of the poll_ functions would work...
	 */

	if (on) {
	
		/* Enable controller interrupts. */
		bus_space_write_8(t->t_iot, t->t_slotdata[slot]->ioh, 
		    MKBC_CONTROL,
		    MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE
		    | MKBC_CONTROL_RX_INT_ENABLE);

	} else {

		/* Disable controller interrupts. */
		bus_space_write_8(t->t_iot, t->t_slotdata[slot]->ioh, 
		    MKBC_CONTROL,
		    MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE);

	}

	if (slot == PCKBC_KBD_SLOT) {
		if (on)
			timeout_add_sec(&t->t_poll, 1);
		else
			timeout_del(&t->t_poll);
	}
}

void
pckbc_set_poll(pckbc_tag_t self, pckbc_slot_t slot, int on)
{
	struct pckbc_internal *t = (struct pckbc_internal *)self;

	t->t_slotdata[slot]->polling = on;

	if (!on) {
		int s;

		/*
		 * If disabling polling on a device that's been configured,
		 * make sure there are no bytes left in the FIFO, holding up
		 * the interrupt line.  Otherwise we won't get any further
		 * interrupts.
		 */
		if (t->t_sc) {
			s = spltty();
			mkbcintr(t->t_sc);
			splx(s);
		}
	}
}

int
mkbc_cnattach(bus_space_tag_t iot, bus_addr_t addr)
{
	bus_space_handle_t ioh, slot_ioh;
	int res = 0;

	/* Ensure that we're on an O2. */
	if (sys_config.system_type != SGI_O2)
		return (ENXIO);

	if (bus_space_map(iot, addr, MKBC_PORTSIZE * 2, 0, &ioh))
                return (ENXIO);

	mkbc_consdata.t_addr = addr;
	mkbc_consdata.t_iot = iot;
	mkbc_consdata.t_ioh_d = ioh;

	/* Map subregion of bus space for this "slot". */
	if (bus_space_subregion(iot, ioh, 0, MKBC_PORTSIZE, &slot_ioh)) {
		bus_space_unmap(iot, ioh, MKBC_PORTSIZE * 2);
		return (ENXIO);
	}

	mkbc_cons_slotdata.ioh = slot_ioh;
	mkbc_init_slotdata(&mkbc_cons_slotdata);
	mkbc_consdata.t_slotdata[PCKBC_KBD_SLOT] = &mkbc_cons_slotdata;

	/* Initialise controller. */
	bus_space_write_8(iot, slot_ioh, MKBC_CONTROL,
	    MKBC_CONTROL_TX_CLOCK_DISABLE | MKBC_CONTROL_RESET);
	delay(100); /* 100us */

	/* Enable controller. */
	bus_space_write_8(iot, slot_ioh, MKBC_CONTROL,
	    MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE
	    | MKBC_CONTROL_RX_INT_ENABLE);

	timeout_set(&mkbc_consdata.t_cleanup, mkbc_cleanup, &mkbc_consdata);
	timeout_set(&mkbc_consdata.t_poll, mkbc_poll, &mkbc_consdata);

	/* Flush input buffer. */
	(void) mkbc_poll_read(iot, slot_ioh);

	res = pckbd_cnattach(&mkbc_consdata);

	if (res) {
		bus_space_unmap(iot, ioh, MKBC_PORTSIZE * 2);
	} else {
		mkbc_console = 1;
	}

	return (res);
}

void
mkbc_poll(void *self)
{
	struct pckbc_internal *t = self;
        int s;

	s = spltty();
	(void)mkbcintr_internal(t, t->t_sc);
	timeout_add_sec(&t->t_poll, 1);
	splx(s);
}
@


1.12
log
@simplify pckbc_xt_translation()
* call only for set translation on (once in /sys/dev/pckbd.c)
  therefore we can delete unused code.
* change behavior (more standard) - return zero on success

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.11 2011/04/07 15:30:16 miod Exp $  */
a76 1
#include <sys/lock.h>
@


1.11
log
@Do not use NULL in integer comparisons. No functional change.
ok matthew@@ tedu@@, also eyeballed by at least krw@@ oga@@ kettenis@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.10 2010/12/03 18:29:56 shadchin Exp $  */
d662 1
a662 1
pckbc_xt_translation(pckbc_tag_t self, pckbc_slot_t slot, int on)
d665 1
a665 1
	return 0;
@


1.10
log
@removed slot argument of function pckbd_cnattach
because it is always PCKBC_KBD_SLOT

ok miod@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.9 2009/10/26 18:00:06 miod Exp $  */
d270 2
a271 2
		t->t_ioh_d = NULL;
		t->t_ioh_c = NULL;
@


1.9
log
@Better crime/mace interrupt handling; interrupt information is no longer
specified in the kernel configuration file, but is provided by macebus(4)
as part of the  child device attachment args, and provide both crime and
mace interrupt bitmasks; this allows us to only really enable interrupt
sources we care about, and to avoid invoking interrupt handler we don't need
to for the few mace interrupts multiplexed at the crime level.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.8 2008/10/15 19:12:19 blambert Exp $  */
d865 1
a865 1
mkbc_cnattach(bus_space_tag_t iot, bus_addr_t addr, pckbc_slot_t slot)
d882 1
a882 2
	if (bus_space_subregion(iot, ioh, MKBC_PORTSIZE * slot, MKBC_PORTSIZE,
	    &slot_ioh)) {
d889 1
a889 1
	mkbc_consdata.t_slotdata[slot] = &mkbc_cons_slotdata;
d907 1
a907 1
	res = pckbd_cnattach(&mkbc_consdata, slot);
@


1.8
log
@Second pass of simple timeout_add -> timeout_add_sec conversions
This should take care of the simpler ones (i.e., timeout values of
integer multiples of hz).

ok krw@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.7 2008/06/14 18:29:52 miod Exp $  */
d85 1
a85 1
#include <sgi/localbus/macebus.h>
d252 1
a252 1
	struct confargs *ca = aux;
d259 3
a261 3
		msc->iot = ca->ca_iot;
		if (bus_space_map(msc->iot, ca->ca_baseaddr, MKBC_PORTSIZE * 2, 0, 
		    &msc->ioh)) {
d272 1
a272 1
		t->t_addr = ca->ca_baseaddr;
d290 2
a291 2
	if (macebus_intr_establish(NULL, ca->ca_intr, IST_EDGE, IPL_TTY,
	    mkbcintr, msc, sc->sc_dv.dv_xname))
@


1.7
log
@Mask the upper 56 bits of the rx ports when reading them, pckbd_input() will
rely on this very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.6 2008/02/21 13:30:04 jsing Exp $  */
d326 1
a326 1
		timeout_add(&t->t_poll, hz);
d757 1
a757 1
		timeout_add(&t->t_cleanup, hz);
d802 1
a802 1
		timeout_add(&t->t_poll, hz);
d834 1
a834 1
			timeout_add(&t->t_poll, hz);
d927 1
a927 1
	timeout_add(&t->t_poll, hz);
@


1.6
log
@There's no need to print the IRQ now that we have direct configuration.
Cleanup the interrupt establishment code a little whilst we're here.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkbc.c,v 1.4 2007/12/14 16:09:23 jsing Exp $  */
d351 1
a351 1
		data = bus_space_read_8(t->t_iot, q->ioh, MKBC_RX_PORT);
d383 1
a383 1
		data = bus_space_read_8(t->t_iot, q->ioh, MKBC_RX_PORT);
@


1.5
log
@Completely overhault attachment rules on sgi. No more indirect configuration
inherited from OpenBSD/arc machines with ISA bus; mainbus children match on
device name and other hierarchies match on simplified locators.
As a bonus, attachment lines in dmesg will now print their locators.

ok jsing@@
@
text
@a100 1
	int sc_irq;
d184 1
a254 3
	void *rv = NULL;

	printf(": ");
d262 1
a262 1
			printf("unable to map bus space!\n");
d290 3
a292 5
	msc->sc_irq = ca->ca_intr;
	rv = macebus_intr_establish(NULL, msc->sc_irq, IST_EDGE,
	    IPL_TTY, mkbcintr, msc, sc->sc_dv.dv_xname);
	if (rv == NULL)
		printf("unable to establish interrupt\n");
d294 1
a294 1
		printf("using irq %d\n", msc->sc_irq);
a302 2

	return;
@


1.4
log
@Add console/cnattach support to mkbc(4). This allows for early attachment
of pckbd(4) and provides us with a console keyboard. Tested by jasper@@.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$  */
d162 1
a162 7
	struct confargs *ca = aux;

	/* MACE PS/2 controller only on SGI O2 */
	if (ca->ca_sys == SGI_O2)
		return 1;

	return 0;
@


1.3
log
@Fix some style(9) issues.

ok miod@@
@
text
@d1 2
d4 1
a4 1
 * Copyright (c) 2006-2007, Joel Sing
a29 1
 * $OpenBSD: mkbc.c,v 1.1 2007/10/18 18:59:29 jsing Exp $ 
d61 2
a62 2
 * However in the interest of reusing code, we want to act like a pckbc
 * so that we can directly attach pckbd and pms. As a result, we make 
d75 3
d80 1
d84 1
a85 1
#include <sgi/localbus/crimebus.h>
d88 1
a88 6

#include <sys/errno.h>
#include <sys/queue.h>
#include <sys/lock.h>

#include <machine/bus.h>
d106 2
a107 2
int mkbc_match(struct device *, void *, void *);
void mkbc_attach(struct device *, struct device *, void *);
d141 4
d151 1
d153 3
a155 2
void	mkbc_cleanup(void *self);
int	mkbc_cmdresponse(struct pckbc_internal *t, pckbc_slot_t slot, u_char data);
d240 2
a241 1
		bus_space_write_8(t->t_iot, ioh, MKBC_CONTROL,
d265 24
a288 7
	/* Setup bus space mapping. */
	msc->iot = ca->ca_iot;
	if (bus_space_map(msc->iot, ca->ca_baseaddr, MKBC_PORTSIZE * 2, 0, 
	    &msc->ioh)) {
		printf("unable to map bus space!\n");
		return;
	}
d290 5
a294 10
	/* Setup pckbc_internal structure (from pckbc_isa.c). */
	t = malloc(sizeof(struct pckbc_internal), M_DEVBUF, M_WAITOK);
	bzero(t, sizeof(struct pckbc_internal));
	t->t_iot = msc->iot;
	t->t_ioh_d = NULL;
	t->t_ioh_c = NULL;
	t->t_addr = ca->ca_baseaddr;
	t->t_cmdbyte = 0;
	t->t_sc = (struct pckbc_softc *)msc;
	sc->id = t;
d296 1
a296 1
	timeout_set(&t->t_cleanup, mkbc_cleanup, t);
d309 2
a310 2
	 * in the same bus space, however we want to act like pckbc so
	 * that we can attach pckbd and pms. 
d324 7
d337 4
d711 1
a711 1
	/* Read any data and discard */
d793 1
a793 1
		   response */
d813 3
d832 3
a834 3
			MKBC_CONTROL,
			MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE
			| MKBC_CONTROL_RX_INT_ENABLE);
d840 4
a843 2
			MKBC_CONTROL,
			MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE);
d845 5
d875 67
@


1.2
log
@It helps if you initialise timeouts before you try using them...

ok miod@@
@
text
@d141 11
a151 11
void mkbc_start(struct pckbc_internal *, pckbc_slot_t);
int mkbc_attach_slot(struct mkbc_softc *, pckbc_slot_t);
void mkbc_init_slotdata(struct pckbc_slotdata *);
int mkbc_submatch(struct device *, void *, void *);
int mkbcprint(void *, const char *);
int mkbcintr(void *);
void mkbc_cleanqueue(struct pckbc_slotdata *);
void mkbc_cleanup(void *self);
int mkbc_cmdresponse(struct pckbc_internal *t, pckbc_slot_t slot, u_char data);
int mkbc_poll_read(bus_space_tag_t, bus_space_handle_t);
int mkbc_poll_write(bus_space_tag_t, bus_space_handle_t, int);
d212 1
a212 1
					     M_DEVBUF, M_NOWAIT);
d222 1
a222 2
					MKBC_PORTSIZE * slot, 
					MKBC_PORTSIZE, &ioh)) {
d230 1
a230 1
			MKBC_CONTROL_TX_CLOCK_DISABLE | MKBC_CONTROL_RESET);
d235 1
a235 1
			MKBC_CONTROL_RX_CLOCK_ENABLE | MKBC_CONTROL_TX_ENABLE);
d242 1
a242 1
				 mkbcprint, mkbc_submatch) != NULL);
d256 2
d262 1
a262 1
		printf(": unable to map bus space!\n");
d282 5
a286 6
		IPL_TTY, mkbcintr, msc, sc->sc_dv.dv_xname);
	if (rv == NULL) {
		printf(": unable to establish interrupt\n");
	} else {
		printf(": using irq %d\n", msc->sc_irq);
	}
a296 1

a378 1

a383 1

d391 2
a392 2
		    bus_space_write_8(iot, ioh, MKBC_TX_PORT, val & 0xff);
		    return 0;
a396 1

a401 1

d409 2
a410 2
		    val = bus_space_read_8(iot, ioh, MKBC_RX_PORT);
		    return val & 0xff;
a414 1

d423 1
a423 1
	      struct pckbc_devcmd *cmd)
d641 1
a641 1
 * Interfaces to act like a pckbc(4).
d691 1
a691 1
		  int responselen, int sync, u_char *respbuf)
d762 2
a763 2
		/* we jumped into a running command - try to
		 deliver the response */
d772 1
a772 1
		       void *arg, char *name)
a810 1

@


1.1
log
@Add support for the Moosehead PS/2 controller as found on SGI O2 workstations.

ok miod@@ deraadt@@
@
text
@d28 1
a28 1
 * $OpenBSD: pckbc.c,v 1.12 2006/05/08 19:52:13 deraadt Exp $ 
d275 2
@

