head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.16
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.12
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.10
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8;
locks; strict;
comment	@ * @;


1.10
date	2015.09.18.20.50.02;	author miod;	state Exp;
branches;
next	1.9;
commitid	WbAU9whMk9BmFUgM;

1.9
date	2015.09.05.21.13.24;	author miod;	state Exp;
branches;
next	1.8;
commitid	1Tj9UMvH0jts1O49;

1.8
date	2012.05.27.14.27.08;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.04.30.21.30.33;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2012.04.17.15.22.02;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.04.15.20.50.32;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.15.20.40.39;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.08.22.08.25;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.05.21.45.51;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Go back to the previous approach when managing individual HPC DMA descriptors:
provide again an optional storage for a copy of the descriptor in the `sync'
(fetch) function, and use the returned address afterwards.

On IP22 systems (in the broader sense of the term, thus IP20/IP22/IP24),
descriptors will remain in uncached memory and no local copies need to be made.
On IP28 systems, descriptors will remain in cached memory (so as to avoid
switching to `slow mode'), but a local copy will be performed with the necessary
cache eviction work, so that speculative code execution on R10000 will not
touch the real descriptor.

With this in place, all the explicit descriptor cache operations in if_sq,
some of them being redundant or operating on the wrong number of
descriptors, can be removed, with the HPC DMA wrappers taking care of doing
the right thing.

Tested on IP22 and IP28. IP26 still unhappy but no worse than before.
@
text
@/*	$OpenBSD: hpcvar.h,v 1.9 2015/09/05 21:13:24 miod Exp $	*/
/*	$NetBSD: hpcvar.h,v 1.12 2011/01/25 12:21:04 tsutsui Exp $	*/

/*
 * Copyright (c) 2001 Rafal K. Boni
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* HPC 1.5/3 differ a bit, thus we need an abstraction layer */

struct hpc_values {
	int		revision;
	uint32_t	scsi0_regs;
	uint32_t	scsi0_regs_size;
	uint32_t	scsi0_cbp;
	uint32_t	scsi0_ndbp;
	uint32_t	scsi0_bc;
	uint32_t	scsi0_ctl;
	uint32_t	scsi0_gio;
	uint32_t	scsi0_dev;
	uint32_t	scsi0_dmacfg;
	uint32_t	scsi0_piocfg;
	uint32_t	scsi1_regs;
	uint32_t	scsi1_regs_size;
	uint32_t	scsi1_cbp;
	uint32_t	scsi1_ndbp;
	uint32_t	scsi1_bc;
	uint32_t	scsi1_ctl;
	uint32_t	scsi1_gio;
	uint32_t	scsi1_dev;
	uint32_t	scsi1_dmacfg;
	uint32_t	scsi1_piocfg;
	uint32_t	enet_regs;
	uint32_t	enet_regs_size;
	uint32_t	enet_intdelay;
	uint32_t	enet_intdelayval;
	uint32_t	enetr_cbp;
	uint32_t	enetr_ndbp;
	uint32_t	enetr_bc;
	uint32_t	enetr_ctl;
	uint32_t	enetr_ctl_active;
	uint32_t	enetr_reset;
	uint32_t	enetr_dmacfg;
	uint32_t	enetr_piocfg;
	uint32_t	enetx_cbp;
	uint32_t	enetx_ndbp;
	uint32_t	enetx_bc;
	uint32_t	enetx_ctl;
	uint32_t	enetx_ctl_active;
	uint32_t	enetx_dev;
	uint32_t	enetr_fifo;
	uint32_t	enetr_fifo_size;
	uint32_t	enetx_fifo;
	uint32_t	enetx_fifo_size;
	uint32_t	enet_devregs;
	uint32_t	enet_devregs_size;
	uint32_t	pbus_fifo;
	uint32_t	pbus_fifo_size;
	uint32_t	pbus_bbram;
	uint32_t	scsi_dma_segs;
	uint32_t	scsi_dma_segs_size;
	uint32_t	scsi_dma_datain_cmd;
	uint32_t	scsi_dma_dataout_cmd;
	uint32_t	scsi_dmactl_flush;
	uint32_t	scsi_dmactl_active;
	uint32_t	scsi_dmactl_reset;
};

struct hpc_attach_args {
	const char		*ha_name;	/* name of device */
	bus_addr_t		 ha_base;	/* address of hpc device */
	bus_addr_t		 ha_devoff;	/* offset of device */
	bus_addr_t		 ha_dmaoff;	/* offset of DMA regs */
	int			 ha_irq;	/* interrupt line */

	bus_space_tag_t		 ha_st;		/* HPC space tag */
	bus_space_handle_t	 ha_sh;		/* HPC space handle XXX */
	bus_dma_tag_t		 ha_dmat;	/* HPC DMA tag */

	struct hpc_values	*hpc_regs;	/* HPC register definitions */
	int			 ha_giofast;	/* GIO bus speed */

	uint8_t			 hpc_eeprom[256];/* HPC eeprom contents */
};

void	*hpc_intr_establish(int, int, int (*)(void *), void *, const char *);
int	 hpc_is_intr_pending(int);
void	 hpc_intr_disable(void *);
void	 hpc_intr_enable(void *);

/*
 * Routines to copy and update HPC DMA descriptors in uncached memory;
 * needed for proper operation on ECC MC systems.
 */
struct hpc_dma_desc;

struct hpc_dma_desc *hpc_sync_dma_desc(struct hpc_dma_desc *,
	    struct hpc_dma_desc *);
void	hpc_update_dma_desc(struct hpc_dma_desc *, struct hpc_dma_desc *);

extern bus_space_t hpc3bus_tag;
@


1.9
log
@Give up trying to map DMA descriptor in uncached memory on ECC flavours of the
IP22 motherboard (IP26, IP28). Instead, do not ask for a BUS_DMA_COHERENT
mapping, but perform explicit cache operations.

This removes the need for the memory controller to switch between `fast' and
`slow' mode every time a DMA descriptor is updated.

Tested on IP22 and IP28.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.8 2012/05/27 14:27:08 miod Exp $	*/
d119 3
a121 2
void	hpc_sync_dma_desc(struct hpc_dma_desc *desc);
void	hpc_update_dma_desc(struct hpc_dma_desc *desc);
@


1.8
log
@Proper support for the so-called `fast mode' of the Indigo2 ECC memory
controller. In this mode, access to physical memory are not allowed to
bypass the cache, and this allows the memory subsystem to run faster.

Of course, some device drivers will require uncached memory access (e.g.
for proper HPC DMA descriptor operation).

New ip22-specific functions to switch between `fast mode' and `slow mode'
are introduced.

hpc(4) now provides read and write routines to fetch a dma descriptor from
uncached memory into a local copy, and update it from said modified copy.
On systems without the ECC MC, these will do nothing and operation will
continue to access the uncached memory directly. On systems with the ECC MC,
they will perform a copy, and the writeback will be done in slow mode.

bus_dmamem_map() requests for DMA memory with BUS_DMA_COHERENT set in flags,
which would return uncached memory, will now always fail on systems with
the ECC memory controller. Drivers which really need uncached memory, and
are aware of this particular setup, will now pass
BUS_DMA_COHERENT | BUS_DMA_BUS1, which will let the request succeed.

sq(4) will use all of the above to work mostly unmodified on ECC MC systems
in fast mode.

Finally, fast mode is enabled after autoconf.

Tested on IP22 and IP28.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.7 2012/04/30 21:30:33 miod Exp $	*/
d119 2
a120 3
struct hpc_dma_desc *hpc_read_dma_desc(struct hpc_dma_desc *src,
	    struct hpc_dma_desc *store);
void	hpc_write_dma_desc(struct hpc_dma_desc *dst, struct hpc_dma_desc *src);
@


1.7
log
@Pass the base address of the hpc to child devices, to let them be able to
figure out whether they attach to the onboard hpc or to an expansion slot
(or the Challenge S IO+ mezzanine). No functional change (yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.6 2012/04/17 15:22:02 miod Exp $	*/
d112 10
@


1.6
log
@Infrastructure to allow an interrupt handler to request its interrupt to be
temporarily disabled (and then reenabled later). Will be necessary for the
next driver commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.5 2012/04/15 20:50:32 miod Exp $	*/
d93 8
a100 7
	bus_addr_t		ha_devoff;	/* offset of device */
	bus_addr_t		ha_dmaoff;	/* offset of DMA regs */
	int			ha_irq;		/* interrupt line */

	bus_space_tag_t		ha_st;		/* HPC space tag */
	bus_space_handle_t	ha_sh;		/* HPC space handle XXX */
	bus_dma_tag_t		ha_dmat;	/* HPC DMA tag */
d103 1
a103 1
	int			ha_giofast;	/* GIO bus speed */
d105 1
a105 1
	uint8_t			hpc_eeprom[256];/* HPC eeprom contents */
d108 1
a108 2
void	*hpc_intr_establish(int, int, int (*)(void *),
	    void *, const char *);
@


1.5
log
@Overhaul hpc child device attachments:
- break each hpc1/hpc3 child lists into two lists, one for the onboard
  devices, and one for the expansion devices.
- do not try to attach Indy-only devices (pckbc, haltwo) on Challenge S.
- do not duplicate entries for expansion devices, only with different interrupt
  numbers depending on the system, but instead use a single entry with -1 as
  the interrupt level, and have the attachment glue figure out which
  interrupt vector applies, depending upon the system.
- on expansion hpc1 (or 1.5) boards, do a minimal bus check to decide whether
  or not the hardware we are attaching is there, since we currently don't
  know how to tell E++ (sq only) and GIO32 SCSI (wdsc only) boards apart.
  This hopefully will get rid of misleading `device not configured' messages.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.4 2012/04/15 20:40:39 miod Exp $	*/
d109 3
@


1.4
log
@Provide an hpc_intr_establish() function for hpc subdevices, so they don't
need to have knowledge of the underlying interrupt controller. No functional
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.3 2012/04/08 22:08:25 miod Exp $	*/
a30 4
#define HPCDEV_IP20		(1U << 1)	/* Indigo R4k */
#define HPCDEV_IP22		(1U << 2)	/* Indigo2 */
#define HPCDEV_IP24		(1U << 3)	/* Indy */

d33 1
a33 1
struct hpc_values {     
d36 1
a36 1
	uint32_t	scsi0_regs_size; 
@


1.3
log
@Be more careful when reprogramming the sq(4) DMA and PIO timing parameters;
the current logic can be traced back to DaveM's intership at SGI in 1996,
and are adequate for the hardware he had access to.

However, ``recent'' Indigo2 and Indy systems are fit with a faster (33MHz
instead of 25MHz) GIO64 bus, which need different timing parameters, and
guess what? The PROM knows the right values to set.

Since programming these timing registers was apparently only necessary for
the Challenge S second interface:
1) only reprogram those registers on an IP24 (Indy, Challenge S) system.
2) pick proper values depending upon the actual GIO64 bus speed.

Item #1 fixes Ethernet operation on Indigo2 (at least my teal R4400SC).
Item #2 fixes Ethernet operation on my R5000SC Indy.

For the record, programming unoptimal value caused `TX DMA underrun' errors
(documented as `can't happen' in the HPC3 documentation, oh the irony),
which could be reproduced reliably with ypbind(8).
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.2 2012/04/05 21:45:51 miod Exp $	*/
d110 5
@


1.2
log
@DMA descriptors only need to be aligned on 8-byte boundaries, and the struct
layout is enough to enforce this. Don't request DMA page boundary alignment
when allocating them.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpcvar.h,v 1.1 2012/03/28 20:44:23 miod Exp $	*/
d106 1
@


1.1
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 47
a85 48
        uint32_t	scsi0_regs;
        uint32_t	scsi0_regs_size; 
        uint32_t	scsi0_cbp;
        uint32_t	scsi0_ndbp;
        uint32_t	scsi0_bc;
        uint32_t	scsi0_ctl;
        uint32_t	scsi0_gio;
        uint32_t	scsi0_dev;
        uint32_t	scsi0_dmacfg;
        uint32_t	scsi0_piocfg;
        uint32_t	scsi1_regs;
        uint32_t	scsi1_regs_size;
        uint32_t	scsi1_cbp;
        uint32_t	scsi1_ndbp;
        uint32_t	scsi1_bc;
        uint32_t	scsi1_ctl;
        uint32_t	scsi1_gio;
        uint32_t	scsi1_dev;
        uint32_t	scsi1_dmacfg;
        uint32_t	scsi1_piocfg;
        uint32_t	enet_regs;
        uint32_t	enet_regs_size;
        uint32_t	enet_intdelay;
        uint32_t	enet_intdelayval;
        uint32_t	enetr_cbp;
        uint32_t	enetr_ndbp;
        uint32_t	enetr_bc;
        uint32_t	enetr_ctl;
        uint32_t	enetr_ctl_active;
        uint32_t	enetr_reset;
        uint32_t	enetr_dmacfg;
        uint32_t	enetr_piocfg;
        uint32_t	enetx_cbp;
        uint32_t	enetx_ndbp;
        uint32_t	enetx_bc;
        uint32_t	enetx_ctl;
        uint32_t	enetx_ctl_active;
        uint32_t	enetx_dev;
        uint32_t	enetr_fifo;
        uint32_t	enetr_fifo_size;
        uint32_t	enetx_fifo;
        uint32_t	enetx_fifo_size;
	uint32_t	enet_dma_boundary;
        uint32_t	enet_devregs;
        uint32_t	enet_devregs_size;
        uint32_t	pbus_fifo;
        uint32_t	pbus_fifo_size;
        uint32_t	pbus_bbram;
d87 6
a92 6
        uint32_t	scsi_dma_segs_size;
        uint32_t	scsi_dma_datain_cmd;
        uint32_t	scsi_dma_dataout_cmd;
        uint32_t	scsi_dmactl_flush;
        uint32_t	scsi_dmactl_active;
        uint32_t	scsi_dmactl_reset;
@

