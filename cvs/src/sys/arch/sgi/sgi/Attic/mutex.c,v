head	1.16;
access;
symbols
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.10
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2015.07.08.13.37.31;	author dlg;	state dead;
branches;
next	1.15;
commitid	Ds9kNjjKbF4CbIsT;

1.15
date	2015.04.21.01.31.51;	author dlg;	state Exp;
branches;
next	1.14;
commitid	MPAfPnneafy9UNX1;

1.14
date	2014.02.10.20.30.05;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2013.12.26.21.02.37;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.21.04.34.12;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.03.22.26.24;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.03.18.46.40;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.28.20.27.55;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.04.02.26.24;	author syuu;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.13.17.06.05;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.13.13.24.55;	author weingart;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.27.21.48.56;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.25.20.14.43;	author weingart;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.14.17.32.17;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.01.18.59.40;	author miod;	state Exp;
branches;
next	;


desc
@@


1.16
log
@unify the mutex implementations on all the mips64 platforms.

this basically copies the sgi implementation to mips64 and removes
it from the rest. this way they get an optimised UP mutex implementation
and correct asserts on all platforms.

ok miod@@ jmatthew@@
@
text
@/*	$OpenBSD: mutex.c,v 1.15 2015/04/21 01:31:51 dlg Exp $	*/

/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/param.h>
#include <sys/mutex.h>
#include <sys/systm.h>
#include <sys/atomic.h>

#include <machine/intr.h>


void
__mtx_init(struct mutex *mtx, int wantipl)
{
	mtx->mtx_owner = NULL;
	mtx->mtx_wantipl = wantipl;
	mtx->mtx_oldipl = IPL_NONE;
}

#ifdef MULTIPROCESSOR
void
mtx_enter(struct mutex *mtx)
{
	while (mtx_enter_try(mtx) == 0)
		;
}

int
mtx_enter_try(struct mutex *mtx)
{
	struct cpu_info *owner, *ci = curcpu();
	int s;
	
 	if (mtx->mtx_wantipl != IPL_NONE)
		s = splraise(mtx->mtx_wantipl);

	owner = atomic_cas_ptr(&mtx->mtx_owner, NULL, ci);
#ifdef DIAGNOSTIC
	if (__predict_false(owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif
	if (owner == NULL) {
		if (mtx->mtx_wantipl != IPL_NONE)
			mtx->mtx_oldipl = s;
#ifdef DIAGNOSTIC
		ci->ci_mutex_level++;
#endif
		membar_enter();
		return (1);
	}

	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);

	return (0);
}
#else
void
mtx_enter(struct mutex *mtx)
{
	struct cpu_info *ci = curcpu();

#ifdef DIAGNOSTIC
	if (__predict_false(mtx->mtx_owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif

	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = splraise(mtx->mtx_wantipl);

	mtx->mtx_owner = ci;

#ifdef DIAGNOSTIC
	ci->ci_mutex_level++;
#endif
}

int
mtx_enter_try(struct mutex *mtx)
{
	mtx_enter(mtx);
	return (1);
}
#endif

void
mtx_leave(struct mutex *mtx)
{
	int s;

	MUTEX_ASSERT_LOCKED(mtx);

#ifdef MULTIPROCESSOR
	membar_exit();
#endif
#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level--;
#endif

	s = mtx->mtx_oldipl;
	mtx->mtx_owner = NULL;
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);
}
@


1.15
log
@rework sgi mutexes to use the owner pointer as the lock.

this is like src/sys/arch/alpha/alpha/mutex.c r1.14.

this changes sgi mutexes so they record which cpu owns the lock
rather than just if the lock is held or not. the diagnostics compare
the owner to the current cpus curcpu() address so they can actually
tell if the current cpu holds the lock instead of whether any cpu
holds the lock.

instead of using custom asm to implement a cas this uses atomic_cas_ptr.

while im here i also shuffled the code. on MULTIPROCESSOR systems
instead of duplicating code between mtx_enter and mtx_enter_try,
mtx_enter simply loops on mtx_enter_try until it succeeds.

this also provides an alternative implementation of mutexes on
!MULTIPROCESSOR systems that avoids interlocking opcodes. mutexes
wont contend on UP boxes, theyre basically wrappers around spls.
we can just do the splraise, stash the owner as a guard value for
DIAGNOSTIC and return. similarly, mtx_enter_try on UP will never
fail, so we can just call mtx_enter and return 1.

tested by and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.14 2014/02/10 20:30:05 kettenis Exp $	*/
@


1.14
log
@To prevent lock ordering problems with the kernel lock, we need to make sure
we block all interrupts that can grab the kernel lock.  The simplest way to
achieve this is to make sure mutexes always raise the ipl to the highest
level that has interrupts that grab the kernel lock.  This will allow us
to have "mpsafe" interrupt handlers at lower priority levels.

No change for non-MULTIPROCESSOR kernels.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.13 2013/12/26 21:02:37 miod Exp $	*/
d31 1
a34 27
static inline int
try_lock(struct mutex *mtx)
{
#ifdef MULTIPROCESSOR
	int tmp, ret = 0;

        asm volatile (
		".set noreorder\n"
		"1:\n"
		"ll	%0, %2\n"		/* tmp = mtx->mtx_lock */
		"bnez	%0, 2f\n"
		" li	%1, 0\n"		/* ret = 0 */
		"li	%1, 1\n"		/* ret = 1 */
		"sc	%1, %2\n"		/* mtx->mtx_lock = 1 */
		"beqz	%1, 1b\n"		/* update failed */
		" nop\n"
		"2:\n"
		".set reorder\n"
		: "+r"(tmp), "+r"(ret)
		: "m"(mtx->mtx_lock));
	
	return ret;
#else  /* MULTIPROCESSOR */
	mtx->mtx_lock = 1;
	return 1;
#endif /* MULTIPROCESSOR */
}
d39 1
a39 1
	mtx->mtx_lock = 0;
d44 1
d48 2
a49 17
	int s;

	for (;;) {
		if (mtx->mtx_wantipl != IPL_NONE)
			s = splraise(mtx->mtx_wantipl);
		if (try_lock(mtx)) {
			if (mtx->mtx_wantipl != IPL_NONE)
				mtx->mtx_oldipl = s;
			mtx->mtx_owner = curcpu();
#ifdef DIAGNOSTIC
			curcpu()->ci_mutex_level++;
#endif
			return;
		}
		if (mtx->mtx_wantipl != IPL_NONE)
			splx(s);
	}
d55 1
d60 7
a66 1
	if (try_lock(mtx)) {
a68 1
		mtx->mtx_owner = curcpu();
d70 1
a70 1
		curcpu()->ci_mutex_level++;
d72 2
a73 1
		return 1;
d75 1
d78 22
a99 1
	return 0;
d102 8
d116 4
d123 1
a125 1
	mtx->mtx_lock = 0;
@


1.13
log
@When running the ll/sc version of the mutex code (for MULTIPROCESSOR kernels),
correctly handle sc failures. All other ll/sc constructs were doing this
correctly but apparently noone had noticed mutex did not.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.12 2011/04/21 04:34:12 miod Exp $	*/
d63 1
a63 1
mtx_init(struct mutex *mtx, int wantipl)
@


1.12
log
@Revert the ``remove the `skip splraise/splx for IPL_NONE mutexes' optimization''
change. It seems to have unexpected side effects, especially on MP systems,
and drahn@@ disagrees with the way this change has been done and think there
is a better way to solve the original problem of msleep() fiddling with
mutex internals.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.9 2010/09/28 20:27:55 miod Exp $	*/
a41 5
		"ll	%0, %2\n"
		"bnez	%0, 1f\n"
		"nop\n"
		"li	%1, 1\n"
		"sc	%1, %2\n"
d43 8
@


1.11
log
@In mtx_leave(), make sure resetting mtx_lock is the last operation on the
struct mutex. Modelled after hppa.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.10 2011/04/03 18:46:40 miod Exp $	*/
d73 2
a74 1
		s = splraise(mtx->mtx_wantipl);
d76 2
a77 1
			mtx->mtx_oldipl = s;
d84 2
a85 1
		splx(s);
d94 2
a95 1
	s = splraise(mtx->mtx_wantipl);
d97 2
a98 1
		mtx->mtx_oldipl = s;
d105 2
a106 1
	splx(s);
d122 2
a123 1
	splx(s);
@


1.10
log
@Remove the `skip splraise/splx for IPL_NONE mutexes' optimizations. It is not
always gaining anything, and msleep() implementation depends upon mtx_leave()
invoking splx().
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.9 2010/09/28 20:27:55 miod Exp $	*/
d107 2
d113 2
d116 1
a116 2
	splx(mtx->mtx_oldipl);
	mtx->mtx_owner = NULL;
@


1.9
log
@Implement a per-cpu held mutex counter if DIAGNOSTIC on all non-x86 platforms,
to complete matthew@@'s commit of a few days ago, and drop __HAVE_CPU_MUTEX_LEVEL
define. With help from, and ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.8 2009/11/04 02:26:24 syuu Exp $	*/
d73 1
a73 2
		if (mtx->mtx_wantipl != IPL_NONE)
			s = splraise(mtx->mtx_wantipl);
d75 1
a75 2
			if (mtx->mtx_wantipl != IPL_NONE)
				mtx->mtx_oldipl = s;
d82 1
a82 2
		if (mtx->mtx_wantipl != IPL_NONE)
			splx(s);
d91 1
a91 2
 	if (mtx->mtx_wantipl != IPL_NONE)
		s = splraise(mtx->mtx_wantipl);
d93 1
a93 2
		if (mtx->mtx_wantipl != IPL_NONE)
			mtx->mtx_oldipl = s;
d100 1
a100 2
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);
d112 1
a112 2
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(mtx->mtx_oldipl);
@


1.8
log
@MP safe mutex.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.7 2009/10/22 22:08:54 miod Exp $	*/
d79 3
d100 3
d114 3
@


1.7
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.6 2009/08/13 17:06:05 miod Exp $	*/
d34 3
d38 20
a57 2
#error This code needs more work
#endif
a58 4
/*
 * Single processor systems don't need any mutexes, but they need the spl
 * raising semantics of the mutexes.
 */
d70 1
a70 2
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = splraise(mtx->mtx_wantipl);
d72 12
a83 2
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;
d89 10
d100 2
a101 5
		mtx->mtx_oldipl = splraise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;

	return 1;
d111 1
@


1.6
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.5 2009/08/13 13:24:55 weingart Exp $	*/
a45 1
	/* We can't access imask[] here, since MUTEX_INITIALIZER can't. */
d47 1
a47 1
	mtx->mtx_oldcpl = IPL_NONE;
d54 1
a54 1
		mtx->mtx_oldcpl = splraise(imask[mtx->mtx_wantipl]);
d64 1
a64 1
		mtx->mtx_oldcpl = splraise(imask[mtx->mtx_wantipl]);
d77 1
a77 1
		splx(mtx->mtx_oldcpl);
@


1.5
log
@A new(er) mtx_enter_try().

Ok oga@@, "the time is now" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.4 2009/04/27 21:48:56 kettenis Exp $	*/
d65 1
a65 1
		mtx->mtx_oldipl = splraise(imask[mtx->mtx_wantipl]);
@


1.4
log
@Revert mtx_enter_try.  It didn't compile on hppa, it doesn't compile on
landisk, and the sparc implementation is obviously wrong.  That's where I
stopped looking, so who knows what else was broken.  A simple comparison of
the existing mtx_enter with the new mtx_enter_try would have told anybody.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.2 2007/05/14 17:32:17 miod Exp $	*/
d59 11
@


1.3
log
@Enter mtx_enter_try.  In part for completeness, things may start
using this soon(ish).  Ok oga@@, sorta yes kettenis@@.
@
text
@a60 11
int
mtx_enter_try(struct mutex *mtx)
{
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;

	return 1;
}

@


1.2
log
@Oops, IPL_NONE is not zero in HEAD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.1 2007/05/01 18:59:40 miod Exp $	*/
d59 11
@


1.1
log
@Simple monoprocessor mutex implementation, faster than the MI code, four left
to go.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
	mtx->mtx_oldcpl = 0;
d66 1
a66 1
	if (mtx->mtx_wantipl != 0)
@

