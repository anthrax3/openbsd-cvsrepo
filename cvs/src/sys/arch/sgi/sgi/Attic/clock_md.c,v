head	1.13;
access;
symbols
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2008.04.07.22.36.26;	author miod;	state dead;
branches;
next	1.12;

1.12
date	2008.03.27.14.36.11;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2008.02.20.18.46.20;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.27.02.59.13;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.18.08.07.54;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.31.21.25.21;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.16.09.24.52;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.11.15.13.35;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.10.18.47.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.09.21.13.29;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.07.10.24.41;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.21.12.19;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Split clock attachment in two parts: a timecounter attachment (at mainbus),
and a time-of-day chip (wherever it gets found).
@
text
@/*	$OpenBSD: clock_md.c,v 1.12 2008/03/27 14:36:11 jsing Exp $ */

/*
 * Copyright (c) 2001-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <dev/ic/ds1687reg.h>

#include <machine/autoconf.h>
#include <machine/bus.h>

#include <mips64/archtype.h>
#include <mips64/dev/clockvar.h>

#include <sgi/localbus/macebus.h>

extern int clockmatch(struct device *, void *, void *);
extern void clockattach(struct device *, struct device *, void *);
extern void clock_int5_init(struct clock_softc *);
extern int clock_started;

#define FROMBCD(x)	(((x) >> 4) * 10 + ((x) & 0xf))
#define TOBCD(x)	(((x) / 10 * 16) + ((x) % 10))

void	ds1687_get(struct clock_softc *, time_t, struct tod_time *);
void	ds1687_set(struct clock_softc *, struct tod_time *);

void
md_clk_attach(struct device *parent, struct device *self, void *aux)
{
	struct clock_softc *sc = (struct clock_softc *)self;
	struct confargs *ca = aux;

	switch (sys_config.system_type) {
	case SGI_O2:
		sc->sc_clock.clk_get = ds1687_get;
		sc->sc_clock.clk_set = ds1687_set;
		sc->sc_clock.clk_init = clock_int5_init;
		sc->sc_clock.clk_hz = 100;
		sc->sc_clock.clk_profhz = 100;
		sc->sc_clock.clk_stathz = 0;	/* XXX no stat clock yet */
		sc->sc_clk_t = ca->ca_iot;
		if (bus_space_map(sc->sc_clk_t, MACE_ISA_RTC_OFFS, 128*256, 0,
		    &sc->sc_clk_h))
			printf("UH!? Can't map clock device!\n");
		printf(": TOD with DS1687,");

		/*
		 * XXX Expose the clock address space so that it can be used
		 * outside of clock(4). This is rather inelegant, however it
		 * will have to do for now...
		 */
		clock_h = sc->sc_clk_h;

		break;

	case SGI_O200:
		sc->sc_clock.clk_init = clock_int5_init;
		sc->sc_clock.clk_hz = 100;
		sc->sc_clock.clk_profhz = 100;
		sc->sc_clock.clk_stathz = 0;	/* XXX no stat clock yet */
		/* XXX MK48T35 */
		break;

	case SGI_OCTANE:
		sc->sc_clock.clk_init = clock_int5_init;
		sc->sc_clock.clk_hz = 100;
		sc->sc_clock.clk_profhz = 100;
		sc->sc_clock.clk_stathz = 0;	/* XXX no stat clock yet */
		/* XXX DS1687 */
		break;

	default:
		panic("don't know how to set up clock.");
	}
}

/*
 * Dallas clock driver.
 */
void
ds1687_get(struct clock_softc *sc, time_t base, struct tod_time *ct)
{
	bus_space_tag_t clk_t = sc->sc_clk_t;
	bus_space_handle_t clk_h = sc->sc_clk_h;
	int ctrl, century;

	/* Select bank 1. */
	ctrl = bus_space_read_1(clk_t, clk_h, DS1687_CTRL_A);
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_A, ctrl | DS1687_BANK_1);

	/* Wait for no update in progress. */
	while (bus_space_read_1(clk_t, clk_h, DS1687_CTRL_A) & DS1687_UIP)
		/* Do nothing. */;

	/* Read the RTC. */
	ct->sec = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_SEC));
	ct->min = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_MIN));
	ct->hour = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_HOUR));
	ct->day = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_DAY));
	ct->mon = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_MONTH));
	ct->year = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_YEAR));
	century = FROMBCD(bus_space_read_1(clk_t, clk_h, DS1687_CENTURY));

	ct->year += 100 * (century - 19);
}

void
ds1687_set(struct clock_softc *sc, struct tod_time *ct)
{
	bus_space_tag_t clk_t = sc->sc_clk_t;
	bus_space_handle_t clk_h = sc->sc_clk_h;
	int year, century, ctrl;

	century = ct->year / 100 + 19;
	year = ct->year % 100;

	/* Select bank 1. */
	ctrl = bus_space_read_1(clk_t, clk_h, DS1687_CTRL_A);
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_A, ctrl | DS1687_BANK_1);

	/* Select data mode 0 (BCD) and 24 hour time. */
	ctrl = bus_space_read_1(clk_t, clk_h, DS1687_CTRL_B);
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_B,
	    (ctrl & ~DS1687_DM_1) | DS1687_24_HR);

	/* Prevent updates. */
	ctrl = bus_space_read_1(clk_t, clk_h, DS1687_CTRL_B);
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_B, ctrl | DS1687_SET_CLOCK);

	/* Update the RTC. */
	bus_space_write_1(clk_t, clk_h, DS1687_SEC, TOBCD(ct->sec));
	bus_space_write_1(clk_t, clk_h, DS1687_MIN, TOBCD(ct->min));
	bus_space_write_1(clk_t, clk_h, DS1687_HOUR, TOBCD(ct->hour));
	bus_space_write_1(clk_t, clk_h, DS1687_DOW, TOBCD(ct->dow));
	bus_space_write_1(clk_t, clk_h, DS1687_DAY, TOBCD(ct->day));
	bus_space_write_1(clk_t, clk_h, DS1687_MONTH, TOBCD(ct->mon));
	bus_space_write_1(clk_t, clk_h, DS1687_YEAR, TOBCD(year));
	bus_space_write_1(clk_t, clk_h, DS1687_CENTURY, TOBCD(century));

	/* Enable updates. */
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_B, ctrl);
}
@


1.12
log
@Data mode can only be changed when updating the clock, so don't bother
trying to change to BCD mode before reading. Also, don't assume that the
clock is in 24 hour mode when updating.

tested jasper@@, ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.10 2007/12/27 02:59:13 jsing Exp $ */
@


1.11
log
@Completely overhault attachment rules on sgi. No more indirect configuration
inherited from OpenBSD/arc machines with ISA bus; mainbus children match on
device name and other hierarchies match on simplified locators.
As a bonus, attachment lines in dmesg will now print their locators.

ok jsing@@
@
text
@a104 1

a118 4
	/* Select data mode 0 (BCD). */
	ctrl = bus_space_read_1(clk_t, clk_h, DS1687_CTRL_B);
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_B, ctrl & ~DS1687_DM_1);

d149 1
a149 1
	/* Select data mode 0 (BCD). */
d151 2
a152 1
	bus_space_write_1(clk_t, clk_h, DS1687_CTRL_B, ctrl & ~DS1687_DM_1);
@


1.10
log
@Clean up the clock MD code. Move all of the DS1687 register definitions to
the appropriate place and remove all of the magic numbers. Whilst we're
here fix up some KNF issues. Also, the get/set functions used the wrong
control registers, allowing the clock to update during operation.

ok miod@@, jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.8 2005/01/31 21:25:21 grange Exp $ */
a51 8
struct cfattach clock_macebus_ca = {
        sizeof(struct clock_softc), clockmatch, clockattach
};

struct cfattach clock_xbowmux_ca = {
        sizeof(struct clock_softc), clockmatch, clockattach
};

d59 1
a59 3
	struct confargs *ca;

	ca = aux;
d89 9
a97 1
		printf("TODO set up clock.");
d101 1
a101 1
		printf("don't know how to set up clock.");
@


1.9
log
@Expose the clock address space so that it can be used outside of clock(4).

ok miod@@
@
text
@d34 2
d55 1
a59 1

d64 1
a64 4
md_clk_attach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
d109 1
a109 1
 *  Dallas clock driver.
d112 1
a112 4
ds1687_get(sc, base, ct)
	struct clock_softc *sc;
	time_t base;
	struct tod_time *ct;
d116 1
a116 17
	int tmp12, century;

	/* Select bank 1 */
	tmp12 = bus_space_read_1(clk_t, clk_h, 12);
	bus_space_write_1(clk_t, clk_h, 12, tmp12 | 0x10);

	/* Wait for no update in progress */
	while (bus_space_read_1(clk_t, clk_h, 12) & 0x80)
		/* Do nothing */;

	ct->sec = FROMBCD(bus_space_read_1(clk_t, clk_h, 0));
	ct->min = FROMBCD(bus_space_read_1(clk_t, clk_h, 2));
	ct->hour = FROMBCD(bus_space_read_1(clk_t, clk_h, 4));
	ct->day = FROMBCD(bus_space_read_1(clk_t, clk_h, 7));
	ct->mon = FROMBCD(bus_space_read_1(clk_t, clk_h, 8));
	ct->year = FROMBCD(bus_space_read_1(clk_t, clk_h, 9));
	century = FROMBCD(bus_space_read_1(clk_t, clk_h, 72));
d118 20
a137 1
	bus_space_write_1(clk_t, clk_h, 12, tmp12 | 0x10);
d143 1
a143 3
ds1687_set(sc, ct)
	struct clock_softc *sc;
	struct tod_time *ct;
d147 1
a147 1
	int year, century, tmp12, tmp13;
d152 21
a172 16
	/* Select bank 1 */
	tmp12 = bus_space_read_1(clk_t, clk_h, 12);
	bus_space_write_1(clk_t, clk_h, 12, tmp12 | 0x10);

	/* Stop update */
	tmp13 = bus_space_read_1(clk_t, clk_h, 13);
	bus_space_write_1(clk_t, clk_h, 13, tmp13 | 0x80);

	bus_space_write_1(clk_t, clk_h, 0, TOBCD(ct->sec));
	bus_space_write_1(clk_t, clk_h, 2, TOBCD(ct->min));
	bus_space_write_1(clk_t, clk_h, 4, TOBCD(ct->hour));
	bus_space_write_1(clk_t, clk_h, 6, TOBCD(ct->dow));
	bus_space_write_1(clk_t, clk_h, 7, TOBCD(ct->day));
	bus_space_write_1(clk_t, clk_h, 8, TOBCD(ct->mon));
	bus_space_write_1(clk_t, clk_h, 9, TOBCD(year));
	bus_space_write_1(clk_t, clk_h, 72, TOBCD(century));
d174 2
a175 2
	bus_space_write_1(clk_t, clk_h, 12, tmp12);
	bus_space_write_1(clk_t, clk_h, 13, tmp13);
@


1.8
log
@Move md_clk_attach() prototype to mips64/dev/clockvar.h.

ok pefo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.7 2004/10/20 12:49:15 pefo Exp $ */
d85 8
@


1.7
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.6 2004/09/16 09:24:52 pefo Exp $ */
a56 2

void	md_clk_attach(struct device *parent, struct device *self, void *aux);
@


1.6
log
@Don't adjust month from tod clock. clock.c does
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.5 2004/08/11 15:13:35 deraadt Exp $ */
d42 2
d50 8
d87 8
@


1.5
log
@various ansi and spacing issues; pefo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.4 2004/08/10 18:47:22 deraadt Exp $ */
d110 1
a110 1
	ct->mon = FROMBCD(bus_space_read_1(clk_t, clk_h, 8)) - 1;
d144 1
a144 1
	bus_space_write_1(clk_t, clk_h, 8, TOBCD(ct->mon + 1));
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.3 2004/08/09 21:13:29 pefo Exp $ */
d76 1
a76 1
		printf(" TOD with DS1687,");
@


1.3
log
@sgi TOD clock
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.2 2004/08/07 10:24:41 pefo Exp $ */
d5 1
a5 1
 * 
d45 2
a46 2
#define FROMBCD(x)      (((x) >> 4) * 10 + ((x) & 0xf))
#define TOBCD(x)        (((x) / 10 * 16) + ((x) % 10))
d64 1
a64 1
        switch (sys_config.system_type) {
@


1.2
log
@remove localbus.h include
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_md.c,v 1.1 2004/08/06 21:12:19 pefo Exp $ */
a36 3
#include <dev/ic/mc146818reg.h>
#include <machine/m48t37.h>

d38 1
d40 1
a40 1
#include <mips64/dev/clockvar.h>
d50 2
a51 5
void	m48clock_get(struct clock_softc *, time_t, struct tod_time *);
void	m48clock_set(struct clock_softc *, struct tod_time *);

void	dsclock_get(struct clock_softc *, time_t, struct tod_time *);
void	dsclock_set(struct clock_softc *, struct tod_time *);
d66 2
a67 2
		sc->sc_clock.clk_get = m48clock_get;
		sc->sc_clock.clk_set = m48clock_set;
d71 3
a73 3
		sc->sc_clock.clk_stathz = 100;
#if 0
		if (bus_space_map(sc->sc_clk_t, 0xfc807ff0, 16, 0,
d76 1
a76 2
		printf(" M48x compatible using counter as ticker");
#endif
a83 63
/*
 *  M48TXX clock driver.
 */
void
m48clock_get(sc, base, ct)
	struct clock_softc *sc;
	time_t base;
	struct tod_time *ct;
{
	bus_space_tag_t clk_t = sc->sc_clk_t;
	bus_space_handle_t clk_h = sc->sc_clk_h;
        int century, tmp;

return;
	tmp = bus_space_read_1(clk_t, clk_h, TOD_CTRL) | TOD_CTRL_R;
	bus_space_write_1(clk_t, clk_h, TOD_CTRL, tmp);

	ct->sec = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_SECOND));
	ct->min = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_MINUTE));
	ct->hour = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_HOUR));
	ct->dow = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_DAY));
	ct->day = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_DATE));
	ct->mon = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_MONTH)) - 1;
	ct->year = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_YEAR));
	century = FROMBCD(bus_space_read_1(clk_t, clk_h, TOD_CENTURY));
	tmp = bus_space_read_1(clk_t, clk_h, TOD_CTRL) & ~TOD_CTRL_R;
	bus_space_write_1(clk_t, clk_h, TOD_CTRL, tmp);

        /* Since tm_year is defined to be years since 1900 we compute */
        /* the correct value here                                     */
        ct->year = century*100 + ct->year - 1900;
}

void
m48clock_set(sc, ct)
	struct clock_softc *sc;
	struct tod_time *ct;
{
	bus_space_tag_t clk_t = sc->sc_clk_t;
	bus_space_handle_t clk_h = sc->sc_clk_h;
        int tmp;
	int year, century;

return;
	century = (ct->year + 1900) / 100;
	year = ct->year % 100;

	tmp = bus_space_read_1(clk_t, clk_h, TOD_CTRL) | TOD_CTRL_W;
	bus_space_write_1(clk_t, clk_h, TOD_CTRL, tmp);

	bus_space_write_1(clk_t, clk_h, TOD_SECOND, TOBCD(ct->sec));
	bus_space_write_1(clk_t, clk_h, TOD_MINUTE, TOBCD(ct->min));
	bus_space_write_1(clk_t, clk_h, TOD_HOUR, TOBCD(ct->hour));
	bus_space_write_1(clk_t, clk_h, TOD_DAY, TOBCD(ct->dow));
	bus_space_write_1(clk_t, clk_h, TOD_DATE, TOBCD(ct->day));
	bus_space_write_1(clk_t, clk_h, TOD_MONTH, TOBCD(ct->mon + 1));
	bus_space_write_1(clk_t, clk_h, TOD_YEAR, TOBCD(year));
	bus_space_write_1(clk_t, clk_h, TOD_CENTURY, TOBCD(century));

	tmp = bus_space_read_1(clk_t, clk_h, TOD_CTRL) & ~TOD_CTRL_W;
	bus_space_write_1(clk_t, clk_h, TOD_CTRL, tmp);
}

d89 1
a89 1
dsclock_get(sc, base, ct)
d96 1
a96 1
        int century, tmp;
d98 7
a104 2
	tmp = bus_space_read_1(clk_t, clk_h, 15);
	bus_space_write_1(clk_t, clk_h, 15, tmp | 0x80);
d107 10
a116 10
	ct->min = FROMBCD(bus_space_read_1(clk_t, clk_h, 1));
	ct->hour = FROMBCD(bus_space_read_1(clk_t, clk_h, 2));
	ct->day = FROMBCD(bus_space_read_1(clk_t, clk_h, 4));
	ct->mon = FROMBCD(bus_space_read_1(clk_t, clk_h, 5)) - 1;
	ct->year = FROMBCD(bus_space_read_1(clk_t, clk_h, 6));
	bus_space_write_1(clk_t, clk_h, 15, tmp);

        /* Since tm_year is defined to be years since 1900 we compute */
        /* the correct value here                                     */
        ct->year = century*100 + ct->year - 1900;
d120 1
a120 1
dsclock_set(sc, ct)
d126 1
a126 2
        int tmp;
	int year, century;
d128 1
a128 1
	century = (ct->year + 1900) / 100;
d131 7
a137 2
	tmp = bus_space_read_1(clk_t, clk_h, 15);
	bus_space_write_1(clk_t, clk_h, 15, tmp | 0x80);
d140 7
a146 6
	bus_space_write_1(clk_t, clk_h, 1, TOBCD(ct->min));
	bus_space_write_1(clk_t, clk_h, 2, TOBCD(ct->hour));
	bus_space_write_1(clk_t, clk_h, 3, TOBCD(ct->dow));
	bus_space_write_1(clk_t, clk_h, 4, TOBCD(ct->day));
	bus_space_write_1(clk_t, clk_h, 5, TOBCD(ct->mon + 1));
	bus_space_write_1(clk_t, clk_h, 6, TOBCD(year));
d148 2
a149 1
	bus_space_write_1(clk_t, clk_h, 15, tmp);
@


1.1
log
@initial sgi import
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a38 2

#include <pmonmips/localbus/localbus.h>
@

