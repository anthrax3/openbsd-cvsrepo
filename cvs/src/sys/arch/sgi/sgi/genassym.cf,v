head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.30
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.32
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.28
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.24
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.26
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.18
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.22
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.20
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.16
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.14
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.12
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.10
	OPENBSD_5_0:1.21.0.8
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.6
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.13.0.2
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@# @;


1.21
date	2010.01.03.14.17.27;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.01.15.04.00;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2009.12.07.18.58.37;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2009.11.19.20.16.27;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.22.20.59.24;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.07.08.35.47;	author syuu;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.30.06.22.00;	author syuu;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.10.18.05.31;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.07.22.30.49;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.24.20.01.38;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.10.15.53.52;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.18.20.25.55;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.27.09.23.06;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.07.18.42.13;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.20.07.06.29;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.17.20.17.48;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.08.07.16.53;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.19.16.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.08.14.21.27;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.21.12.19;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Use a split genassym.cf scheme on mips64 ports. Don't forget to rerun config(8).
@
text
@#	$OpenBSD: genassym.cf,v 1.20 2010/01/01 15:04:00 miod Exp $
@


1.20
log
@Make sure we grab the kernel lock before invoking trapsignal().
@
text
@d1 1
a1 84
#	$OpenBSD: genassym.cf,v 1.19 2009/12/07 18:58:37 miod Exp $
#
# Copyright (c) 1997 Per Fogelstrom / Opsycon AB
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#


include <sys/param.h>
include <sys/buf.h>
include <sys/proc.h>
include <sys/mbuf.h>
include <sys/user.h>
include <sys/siginfo.h>

include <uvm/uvm.h>

include <machine/cpu.h>

export	SONPROC

struct	proc
member	p_stat
member	p_addr
member	p_vmspace
member	P_ASTPENDING	p_md.md_astpending
member	P_PC_CTRL	p_md.md_pc_ctrl
member	P_PC_COUNT	p_md.md_pc_count
member	P_WATCH_1	p_md.md_watch_1
member	P_WATCH_2	p_md.md_watch_2
member	P_WATCH_M	p_md.md_watch_m

struct	pcb
member	pcb_regs
member	PCB_FPREGS	pcb_regs.f0
member	pcb_context
member	pcb_onfault
member	pcb_segtab

struct	cpu_info
member	ci_curproc
member	ci_curprocpaddr
member	ci_ipl

export	CKSEG0_BASE
export	CKSEG1_BASE
export	VM_MIN_KERNEL_ADDRESS
export	SIGFPE

struct	vmspace
member	VMSPACE_PMAP	vm_map.pmap

struct	pmap
member	pm_tlbpid
export	NPTEPG
export	PMAP_SEGTABSIZE
export	SEGSHIFT

export	CCA_CACHED

export	FPE_FLTDIV
export	FPE_FLTOVF
export	FPE_FLTUND
export	FPE_FLTRES
export	FPE_FLTINV
@


1.19
log
@Use a pool to manage pmap pte pages and top level segment table, instead of
directly allocating pages from uvm; this will allow us to eventually use
a different kernel page size without having to alter the pmap structures
layout.
No functional change; measured slowdown of 1.6% for 4KB page kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.18 2009/11/19 20:16:27 miod Exp $
d33 1
d79 6
@


1.18
log
@Rename KSEG* defines to CKSEG* to match their names in 64 bit mode; also
define more 64 bit spaces.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.17 2009/10/22 22:08:54 miod Exp $
d73 1
d75 1
@


1.17
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.16 2009/10/22 20:59:24 miod Exp $
d63 2
@


1.16
log
@With the splx() changes, it is no longer necessary to remember which interrupt
sources were masked and saved in ci_ipending, as splx() will unmask what needs
to be unmasked anyway. ci_ipending only now needs to store pending soft
interrupts, so rename it to ci_softpending.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.15 2009/10/07 08:35:47 syuu Exp $
d61 1
a61 1
member	ci_cpl
@


1.15
log
@ipending, cpl moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.14 2009/09/30 06:22:00 syuu Exp $
a61 1
member	ci_ipending
@


1.14
log
@curproc, curprocpaddr moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.13 2009/06/10 18:05:31 miod Exp $
d61 2
@


1.13
log
@Switch sgi to per-process AST, and move ast() from interrupt.c to trap.c
where it can use userret() instead of duplicating it.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.12 2008/04/07 22:30:49 miod Exp $
d60 1
@


1.12
log
@Use CCA_CACHED as the default CCA for all cached mappings and addresses.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.11 2007/10/24 20:01:38 miod Exp $
a40 1
#member	p_priority
d44 1
a44 1
#member	P_UPTE		p_md.md_upte
@


1.11
log
@In cpu_switchto(), load pmap->pm_tlbpid manually, instead of expecting
pmap_update() to return with this value in v0. A void function. Bwahahaha.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.10 2007/10/10 15:53:52 art Exp $
d72 1
a72 2
export	CCA_NC
export	CCA_NONCOHERENT
@


1.10
log
@Make context switching much more MI:
 - Move the functionality of choosing a process from cpu_switch into
   a much simpler function: cpu_switchto. Instead of having the locore
   code walk the run queues, let the MI code choose the process we
   want to run and only implement the context switching itself in MD
   code.
 - Let MD context switching run without worrying about spls or locks.
 - Instead of having the idle loop implemented with special contexts
   in MD code, implement one idle proc for each cpu. make the idle
   loop MI with MD hooks.
 - Change the proc lists from the old style vax queues to TAILQs.
 - Change the sleep queue from vax queues to TAILQs. This makes
   wakeup() go from O(n^2) to O(n)

there will be some MD fallout, but it will be fixed shortly.
There's also a few cleanups to be done after this.

deraadt@@, kettenis@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.9 2007/06/18 20:25:55 miod Exp $
d44 1
d65 5
@


1.9
log
@Use a shorter form to load XKPHYS constants in .S code, shaves a few text
bytes, no functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.8 2007/05/27 09:23:06 miod Exp $
d41 1
a41 3
member	p_forw
member	p_back
member	p_priority
@


1.8
log
@Always use XKPHYS addresses to perform cache operations now, for consistency.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.7 2007/05/07 18:42:13 kettenis Exp $
d68 2
a69 2
define	XKPHYS_NC		PHYS_TO_XKPHYS(0, CCA_NC)
define	XKPHYS_NONCOHERENT	PHYS_TO_XKPHYS(0, CCA_NONCOHERENT)
@


1.7
log
@Move sgo to __HAVE_CPUINFO.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.6 2005/12/20 07:06:29 miod Exp $
d36 2
d67 3
@


1.6
log
@Since we are allowed to rely on the fact that the pcb is the first element
of struct user, use syntactic sugar in genassym.cf and use PCB_xxx defines
instead of U_PCB_xxx, like all other platforms do; no functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.5 2005/12/17 20:17:48 miod Exp $
d57 3
@


1.5
log
@Let the xtlb refill handler fault if the userland va is out of the supported
address space instead of using the tlb of the va modulo the address space size.

ok pefo@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.4 2004/10/08 07:16:53 grange Exp $
d51 6
a56 6
struct	user
member	U_PCB_REGS	u_pcb.pcb_regs.zero
member	U_PCB_FPREGS	u_pcb.pcb_regs.f0
member	U_PCB_CONTEXT	u_pcb.pcb_context
member	U_PCB_ONFAULT	u_pcb.pcb_onfault
member	U_PCB_SEGTAB	u_pcb.pcb_segtab
@


1.4
log
@Pasto in comment.

ok pefo@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.3 2004/08/10 19:16:18 deraadt Exp $
d34 2
d60 2
@


1.3
log
@spacing
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.2 2004/08/08 14:21:27 pefo Exp $ */
@


1.2
log
@Various fixes and cleanups from miod@@, tested and OK.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.1 2004/08/06 21:12:19 pefo Exp $ */
d4 1
a4 1
# 
@


1.1
log
@initial sgi import
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.2 1998/09/15 10:58:53 pefo Exp $ */
d36 12
a47 16
define	P_FORW		offsetof(struct proc, p_forw)
define	P_BACK		offsetof(struct proc, p_back)
define	P_PRIORITY	offsetof(struct proc, p_priority)
define	P_STAT		offsetof(struct proc, p_stat)
define	P_ADDR		offsetof(struct proc, p_addr)
#define	P_UPTE		offsetof(struct proc, p_md.md_upte)
define	P_PC_CTRL	offsetof(struct proc, p_md.md_pc_ctrl)
define	P_PC_COUNT	offsetof(struct proc, p_md.md_pc_count)
define	P_WATCH_1	offsetof(struct proc, p_md.md_watch_1)
define	P_WATCH_2	offsetof(struct proc, p_md.md_watch_2)
define	P_WATCH_M	offsetof(struct proc, p_md.md_watch_m)
define	U_PCB_REGS	offsetof(struct user, u_pcb.pcb_regs.zero)
define	U_PCB_FPREGS	offsetof(struct user, u_pcb.pcb_regs.f0)
define	U_PCB_CONTEXT	offsetof(struct user, u_pcb.pcb_context)
define	U_PCB_ONFAULT	offsetof(struct user, u_pcb.pcb_onfault)
define	U_PCB_SEGTAB	offsetof(struct user, u_pcb.pcb_segtab)
d49 9
a57 2
define	VM_MIN_KERNEL_ADDRESS VM_MIN_KERNEL_ADDRESS
define	SIGFPE SIGFPE
@

