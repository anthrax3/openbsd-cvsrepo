head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.22
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.20
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.16
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.29.19.02.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.17.12.34.19;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.28.16.20.28;	author syuu;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.13.23.24.27;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.13.22.57.30;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@/*	$OpenBSD: ip30_nmi.S,v 1.5 2012/09/29 19:02:26 miod Exp $	*/

/*
 * Copyright (c) 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/asm.h>
#include <machine/cpu.h>
#include <mips64/mips_cpu.h>
#include <machine/regnum.h>
#include <machine/cpustate.h>

#define	HW_CPU_NUMBER_REG	0x900000000ff50000	/* HEART_PRID */

#include "assym.h"

	.set	mips3

/*
 * The NMI handler routine is shared accross all processors.
 *
 * When the NMI is triggered, we might be in the middle of an exception
 * handler, and relying upon k0 and k1.
 *
 * Unfortunately, since there is no way to know whether our stack is valid,
 * we will need these registers. Therefore NMI are fatal if they occur in
 * kernel mode... but we don't even try to resume from them, yet.
 */
	.globl	ip30_nmi
ip30_nmi:
	.set	noat
	sync

	LOAD_XKPHYS(k0, CCA_CACHED)
	LA	k1, IP30_MEMORY_BASE + 0x4000
	PTR_ADDU k0, k0, k1

	/*
	 * We use part of the low memory as stack and save area.
	 * This is safe since we reserved this area early.
	 * We give ourselves 8KB, minus the size of the frame, of stack.
	 */

	LA	k1, HW_CPU_NUMBER_REG
	PTR_L	k1, 0(k1)
	beqz	k1, 1f
	nop

	/* CPU #1 */
	PTR_ADDU k0, k0, 0x2000
1:
	/*
	 * Save state.
	 * k0 = frame base, k1 = cpu number
	 */

	SAVE_CPU(k0, 0)
	SAVE_CPU_SREG(k0, 0)
	.set	at

	PTR_ADDU sp, k0, 0x2000
	LA	gp, _gp
	
	/*
	 * Interrupts should be disabled. Just in case they aren't,
	 * enforce this (a1 still contains the value of cop0 SR).
	 */
	
	and	a1, a1, ~SR_INT_ENAB
	mtc0	a1, COP_0_STATUS_REG
	MTC0_SR_IE_HAZARD

	jal	ip30_nmi_handler		/* ip30_machdep.c */
	nop

9:
	sync
	b	9b
	nop
@


1.5
log
@Introduce assembly macros for specific processor hazards: tlb update, status
register update, status register update causing a change to the interrupt
enable flag, and a few other arcane ones. <mips64/asm.h> will provide
(supposedly sane) defaults, and <machine/asm.h> may override these with
better tuned versions.

Use these macros instead of random strings of nop in the various .S files
requiring hazard workarounds.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip30_nmi.S,v 1.4 2012/06/17 12:34:19 miod Exp $	*/
d21 2
a23 1
#include <machine/regnum.h>
@


1.4
log
@Using the LLAddr register to store our curcpu() pointer on R10k SMP kernels
was a nice trick, but this register is only 32-bit wide and will be
sign-extended, which requires all cpu_info structs to be allocated within 2GB
physical - something which may not be possible on some configurations.

This diff changes IP30.MP kernels to no longer use LLAddr to store curcpu,
but use unused fields of the MPConf structure in low memory, indexed with the
physical processor id, which can be obtained from the Heart PRID register.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip30_nmi.S,v 1.3 2010/04/28 16:20:28 syuu Exp $	*/
d82 1
a82 1
	ITLBNOPFIX
@


1.3
log
@Storeing current cpu_info address into LLAddr register, for curcpu().
Instead of previous implementation, we won't use physical cpuid to fetch curcpu().
This requires to implement IP27/35 SMP.
Implemented getcurcpu() and setcurcpu() for it, smp_malloc() renamed alloc_contiguous_pages() because now it only allocate by page.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip30_nmi.S,v 1.2 2010/01/13 23:24:27 miod Exp $	*/
a22 2

#include <arch/sgi/sgi/ip30.h>
@


1.2
log
@Freeze the secondary CPU later in the nmi handling, and put it in a better
state from a ddb point of view.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a25 1
#ifndef MULTIPROCESSOR
a26 1
#endif
@


1.1
log
@Crude handler for the Octane NMI button, for kernels compiled with
option DDB.
@
text
@a87 5
	LA	k0, HW_CPU_NUMBER_REG
	PTR_L	k1, 0(k0)
	bnez	k1, 9f
	nop

@

