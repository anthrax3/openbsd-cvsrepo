head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7;
locks; strict;
comment	@ * @;


1.11
date	2015.09.23.21.22.26;	author miod;	state Exp;
branches;
next	1.10;
commitid	3MSSZgQTEhlhvoXG;

1.10
date	2015.09.05.21.14.07;	author miod;	state Exp;
branches;
next	1.9;
commitid	tejzV6F0u2CEtvy0;

1.9
date	2014.07.17.19.51.58;	author miod;	state Exp;
branches;
next	1.8;
commitid	o86FcMSRojJgDsY0;

1.8
date	2012.09.29.21.46.02;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.24.20.29.46;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2012.05.27.14.27.10;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.27.14.13.00;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.15.20.38.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.06.19.00.49;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.03.21.17.35;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@typos
@
text
@/*	$OpenBSD: ip22.h,v 1.10 2015/09/05 21:14:07 miod Exp $	*/

/*
 * Copyright (c) 2012 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * IP20/IP22/IP24 definitions
 */

/* IP22/IP24 system types */

#define	IP22_INDY	0	/* IP24 Indy */
#define	IP22_CHALLS	1	/* IP24 Challenge S */
#define	IP22_INDIGO2	2	/* IP22 Indigo 2, Challenge M */

/* Interrupt handling priority */

#ifdef CPU_R8000
#define	INTPRI_BUSERR_TCC	(INTPRI_CLOCK + 1)
#define	INTPRI_BUSERR		(INTPRI_BUSERR_TCC + 1)
#else
#define	INTPRI_BUSERR		(INTPRI_CLOCK + 1)
#endif
#define	INTPRI_L1		(INTPRI_BUSERR + 1)
#define	INTPRI_L0		(INTPRI_L1 + 1)

extern int hpc_old;	/* nonzero if at least one HPC 1.x device found */
extern int bios_year;
extern int ip22_ecc;	/* nonzero if running with an ECC memory system */

void	ip22_ConfigCache(struct cpu_info *);
extern void (*ip22_extsync)(struct cpu_info *, paddr_t, size_t, int);
@


1.10
log
@Do not make ip22_{slow,fast}_mode() public anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.9 2014/07/17 19:51:58 miod Exp $	*/
d42 1
a42 1
extern int ip22_ecc;	/* nonzero if runinng with an ECC memory system */
@


1.9
log
@Rework management of the external L2 cache on the few Indy/Indigo2 systems
which have it.

Instead of implementing external L2 maintainance at the cache routine level,
let bus_dmamap_sync(9) know about the possible existence of an external L2,
and invoke a dedicated routine to perform the necessary cache operations.

This way, the external L2 dmamap_sync function pointer can get invoked with
the physical address to operate on; this saves the pmap_extract() calls the
previous cache routine had to do.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.8 2012/09/29 21:46:02 miod Exp $	*/
a42 4

int	ip22_fast_mode(void);
int	ip22_slow_mode(void);
int	ip22_restore_mode(int);
@


1.8
log
@Work in progress support for the Power Indigo2 R8000 system (IP26). This is
basically an IP22 system (R4000 Indigo2) with the ECC memory board of IP28,
and a so-called ``streaming'' L2 cache.

IP26 kernels currently boot single-user, but don't live long; I am suspecting
a bug in the tcc cache routines, but am currently not able to find it (come
to think of it, my understanding of how this cache works could be wrong, and
of course there is no documentation for it but what can be gathered from
IRIX' <sys/IP26.h> comments and defines).

Hopefully this situation will improve in the near future; in the meantime I
am commiting this as `work in progress' to make sure this code doesn't get
lost.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.7 2012/06/24 20:29:46 miod Exp $	*/
d49 1
@


1.7
log
@Code for the external L2 cache controller on Indy/Indigo2 R4600SC and Indy
R5000SC processor modules; these sport an up to 512KB, physically indexed,
write-through L2 cache which is not connected to the canonical external cache
interface of these processors (hence requiring specific code to drive it).
The cache is enabled early and disabled before returning to ARCBios (for very
nasty things happen otherwise).

Tested on R5000SC, will be tested on R4600SC soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.6 2012/05/27 14:27:10 miod Exp $	*/
d31 8
a38 3
#define	INTPRI_BUSERR	(INTPRI_CLOCK + 1)
#define	INTPRI_L1	(INTPRI_BUSERR + 1)
#define	INTPRI_L0	(INTPRI_L1 + 1)
@


1.6
log
@Proper support for the so-called `fast mode' of the Indigo2 ECC memory
controller. In this mode, access to physical memory are not allowed to
bypass the cache, and this allows the memory subsystem to run faster.

Of course, some device drivers will require uncached memory access (e.g.
for proper HPC DMA descriptor operation).

New ip22-specific functions to switch between `fast mode' and `slow mode'
are introduced.

hpc(4) now provides read and write routines to fetch a dma descriptor from
uncached memory into a local copy, and update it from said modified copy.
On systems without the ECC MC, these will do nothing and operation will
continue to access the uncached memory directly. On systems with the ECC MC,
they will perform a copy, and the writeback will be done in slow mode.

bus_dmamem_map() requests for DMA memory with BUS_DMA_COHERENT set in flags,
which would return uncached memory, will now always fail on systems with
the ECC memory controller. Drivers which really need uncached memory, and
are aware of this particular setup, will now pass
BUS_DMA_COHERENT | BUS_DMA_BUS1, which will let the request succeed.

sq(4) will use all of the above to work mostly unmodified on ECC MC systems
in fast mode.

Finally, fast mode is enabled after autoconf.

Tested on IP22 and IP28.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.5 2012/05/27 14:13:00 miod Exp $	*/
d42 2
@


1.5
log
@Decide once for all whether IP22/IP28 systems are running with the ECC memory
controller or not, and store this in a global variable. This is better than
checking for the IP number everytime, especially since, according to IRIX
header files, not all IP26 use the ECC memory controller (not that it matters
much for us since we do not run on them yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.4 2012/04/15 20:38:10 miod Exp $	*/
d38 4
@


1.4
log
@Tell Indy and Challenge S apart.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.3 2012/04/06 19:00:49 miod Exp $	*/
d37 1
@


1.3
log
@Rework IP22 RTC year base computation, again. It turns out that different
Indy PROM versions use different year bases - after all, using 1970 instead
of the previously used value of 1940 smelled like a bug, and probably was,
so this eventually got fixed in later PROM versions.

Instead of hardcoding a year base depending upon the system, we will now ask
ARCBios for its current year, and compare it to what can be read from the RTC
registers to figure out what year base is in use by the PROM.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.2 2012/04/03 21:17:35 miod Exp $	*/
d23 1
a23 1
/* IP22 system types */
d25 3
a27 2
#define	IP22_INDY	0	/* Indy, Challenge S */
#define	IP22_INDIGO2	1	/* Indigo 2 */
@


1.2
log
@Default DMA-reachable address constraints to the whole address space, and
narrow these in the various ipXX_machdep.c. On IP22-like systems, narrow
them to 28 bit physical addresses, but unpessimize this by extending this
to 32 bit after autoconf, if no 28-bit limited hpc(4) device has been found.
Since physical memory on these systems start at 128MB, this means that Indigo
systems with more than 128MB memory will behave correctly (and so will Indy
systems with E++ boards and more than 128MB memory).
@
text
@d1 1
a1 1
/*	$OpenBSD: ip22.h,v 1.1 2012/03/28 20:44:23 miod Exp $	*/
d35 1
@


1.1
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 2
@

