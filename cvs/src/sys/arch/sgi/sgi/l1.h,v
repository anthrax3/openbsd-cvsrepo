head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.20
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.18
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2014.11.25.19.08.42;	author miod;	state Exp;
branches;
next	1.5;
commitid	jlNGoFCojoG6HmlC;

1.5
date	2010.05.09.18.37.47;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.15.20.32.50;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.22.21.22.08;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.29.17.03.53;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.08.22.44.16;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Brag about what OS we are running on the LCD panel, if there is one.
@
text
@/*	$OpenBSD: l1.h,v 1.5 2010/05/09 18:37:47 miod Exp $	*/

/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * High-level L1 communication defines
 */

/* L1 command types and destination addresses */
#define	L1_ADDRESS(type,addr)	(((type) << 28) | (addr))

#define	L1_TYPE_L1	0x00
#define	L1_TYPE_L2	0x01
#define	L1_TYPE_L3	0x02
#define	L1_TYPE_CBRICK	0x03
#define	L1_TYPE_IOBRICK	0x04

#define	L1_ADDRESS_RACK_MASK	0x0ffc0000
#define	L1_ADDRESS_RACK_SHIFT		18
#define	L1_ADDRESS_RACK_LOCAL		0x3ff
#define	L1_ADDRESS_BAY_MASK	0x0003f000
#define	L1_ADDRESS_BAY_SHIFT		12
#define	L1_ADDRESS_BAY_LOCAL		0x3f
#define	L1_ADDRESS_TASK_MASK	0x0000001f
#define	L1_ADDRESS_TASK_SHIFT		0

#define	L1_ADDRESS_LOCAL \
	((L1_ADDRESS_RACK_LOCAL << L1_ADDRESS_RACK_SHIFT) | \
	 (L1_ADDRESS_BAY_LOCAL << L1_ADDRESS_BAY_SHIFT))

#define	L1_TASK_INVALID		0x00
#define	L1_TASK_ROUTER		0x01
#define	L1_TASK_SYSMGMT		0x02
#define	L1_TASK_COMMAND		0x03
#define	L1_TASK_ENVIRONMENT	0x04
#define	L1_TASK_BEDROCK		0x05
#define	L1_TASK_GENERAL		0x06

/* response codes */
#define	L1_RESP_OK		((uint32_t)0)
#define	L1_RESP_NXDATA		((uint32_t)-0x68)
#define	L1_RESP_INVAL		((uint32_t)-0x6b)

/*
 * Various commands (very incomplete list)
 */

/* L1_TASK_COMMAND requests */
#define	L1_REQ_EXEC_CMD	0x0000	/* interpret plaintext command */

/* L1_TASK_GENERAL requests */
#define	L1_REQ_EEPROM	0x0006	/* access eeprom */
#define	L1_REQ_DISP1	0x1004	/* display text on LCD first line */
#define	L1_REQ_DISP2	0x1005	/* display text on LCD second line */

/* L1_REQ_EEPROM additional argument value */
/* non C-brick component */
#define	L1_EEP_POWER	0x00		/* power board */
#define	L1_EEP_LOGIC	0x01		/* logic board */
/* C-brick component */
#define	L1_EEP_DIMM_NOINTERLEAVE_BASE	0x04
#define	L1_EEP_DIMM_BASE_CBRICK		0x03
#define	L1_EEP_DIMM_BASE_CHIMERA	0x05
#define	L1_EEP_DIMM_NOINTERLEAVE(dimm) \
	(L1_EEP_DIMM_NOINTERLEAVE_BASE + (dimm))
#define	L1_EEP_DIMM_INTERLEAVE(base, dimm) \
	((base) + ((dimm) >> 1) + ((dimm) & 0x01 ? 4 : 0))
/* ia code */
#define	L1_EEP_CHASSIS	0x01		/* chassis ia */
#define	L1_EEP_BOARD	0x02		/* board ia */
#define	L1_EEP_IUSE	0x03		/* internal use ia */
#define	L1_EEP_SPD	0x04		/* spd record */

#define	L1_SPD_DIMM_MAX	8

struct spdmem_attach_args {
	struct mainbus_attach_args	maa;
	int				dimm;
};

int	l1_display(int16_t, int, const char *);
int	l1_exec_command(int16_t, const char *);
int	l1_get_brick_ethernet_address(int16_t, uint8_t *);
int	l1_get_brick_spd_record(int16_t, int, u_char **, size_t *);
@


1.5
log
@Proper support for IP35 C-Brick types (i.e. Origin 3000): do not attach
a (missing) second serial port to ioc(4), read spdmem(4) records from the
right index, and query the Ethernet address from the I-Brick eeprom instead
of the C-Brick eeprom.
Tested by Sebastian Reitenbach, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: l1.h,v 1.4 2010/04/15 20:32:50 miod Exp $	*/
d95 1
@


1.4
log
@Match the interleaving scheme used on dual-PIMM capable IP35 systems (i.e.
every ip35 but Fuel), when fetching spdmem records, so the DIMM number
reported matches the numbering on the PIMM.
@
text
@d1 1
a1 1
/*	$OpenBSD: l1.h,v 1.3 2010/03/22 21:22:08 miod Exp $	*/
d76 6
a81 5
#define	L1_EEP_DIMM_INTERLEAVE_BASE	0x05
#define	L1_EEP_DIMM_NOINTERLEAVE(d) \
	(L1_EEP_DIMM_NOINTERLEAVE_BASE + (d))
#define	L1_EEP_DIMM_INTERLEAVE(d) \
	(L1_EEP_DIMM_INTERLEAVE_BASE + ((d) >> 1) + ((d) & 0x01 ? 4 : 0))
a97 1
int	l1_read_board_ia(int16_t, u_char **, size_t *);
@


1.3
log
@On SGI IP35 systems, get SPD memory records from L1 and attach spdmem to
decode them when available; tested on Fuel and Origin 350.
@
text
@d1 1
a1 1
/*	$OpenBSD: l1.h,v 1.2 2009/11/29 17:03:53 miod Exp $	*/
d75 6
a80 2
#define	L1_EEP_DIMMBASE_SINGLEPIMM	0x04
#define	L1_EEP_DIMMBASE_DUALPIMM	0x05
@


1.2
log
@Send a powerdown command to L1 on IP35 if powerdown is requested.
@
text
@d1 1
a1 1
/*	$OpenBSD: l1.h,v 1.1 2009/11/08 22:44:16 miod Exp $	*/
d54 3
a56 1
#define	L1_RESP_OK		0x00000000
d71 18
a88 2
#define	L1_EEP_LOGIC	0x01	/* component: logic board */
#define	L1_EEP_BOARD	0x02	/* ia code: board */
d90 3
a93 2
int	l1_get_brick_ethernet_address(int16_t, uint8_t *);
int	l1_exec_command(int16_t, const char *);
@


1.1
log
@Add code to send L1 commands and parse command results; use it to add a way
for IP35 systems with IOC3 onboard Ethernet to get their Ethernet address
since it's no longer stored as an owmac(4) device on the IOC3 device itself.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d74 1
@

