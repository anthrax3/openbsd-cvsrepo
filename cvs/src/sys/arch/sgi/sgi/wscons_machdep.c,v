head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.16
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.8
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.12
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.10
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.6
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2015.12.22.21.36.57;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	ea5GZDc4EQ86MZA8;

1.11
date	2012.04.18.17.28.24;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.16.22.28.15;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.03.18.29.56;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.06.19.12.34;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.06.19.06.07;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.07.21.26.24;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.07.13.44.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.26.18.00.06;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.23.16.37.56;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.31.12.46.14;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2007.12.31.11.42.43;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.12
log
@commited -> committed
@
text
@/*	$OpenBSD: wscons_machdep.c,v 1.11 2012/04/18 17:28:24 miod Exp $ */

/*
 * Copyright (c) 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Copyright (c) 2001 Aaron Campbell
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/extent.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>
#if defined(TGT_ORIGIN)
#include <machine/mnode.h>
#endif

#include <mips64/arcbios.h>
#include <mips64/archtype.h>

#include <dev/cons.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
#include <dev/usb/ukbdvar.h>
#include <dev/wscons/wskbdvar.h>
#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>

#include <sgi/dev/gbereg.h>
#include <sgi/dev/impactvar.h>
#include <sgi/dev/iockbcvar.h>
#include <sgi/dev/mkbcreg.h>
#include <sgi/gio/giovar.h>
#include <sgi/hpc/hpcreg.h>
#include <sgi/hpc/hpcvar.h>
#include <sgi/hpc/iocreg.h>
#include <sgi/localbus/crimebus.h>
#include <sgi/localbus/macebus.h>
#include <sgi/localbus/macebusvar.h>
#include <sgi/xbow/odysseyvar.h>

#if defined(TGT_OCTANE)
#include <sgi/sgi/ip30.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>
#endif

#include "gbe.h"
#include "gio.h"
#include "iockbc.h"
#include "impact.h"
#include "mkbc.h"
#include "odyssey.h"
#include "pckbc.h"
#include "ukbd.h"
#include "zskbd.h"

cons_decl(ws);
extern bus_addr_t comconsaddr;

#if defined(TGT_OCTANE) || defined(TGT_ORIGIN)
struct	sgi_device_location	console_output;
struct	sgi_device_location	console_input;
int	(*output_widget_cninit)(void) = NULL;

int	widget_cnprobe(void);
void	widget_cnattach(void);
#endif

void
wscnprobe(struct consdev *cp)
{
	int maj;

	/* Locate the major number. */
	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;
	}

	if (maj == nchrdev) {
		/* We are not in cdevsw[], give up. */
		panic("wsdisplay is not in cdevsw[]");
	}

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_DEAD;

        switch (sys_config.system_type) {
#if defined(TGT_INDIGO) || defined(TGT_INDY) || defined(TGT_INDIGO2)
	case SGI_IP20:
	case SGI_IP22:
	case SGI_IP26:
	case SGI_IP28:
#if NGIO > 0
		if (giofb_cnprobe() == 0) {
			if (strncmp(bios_console, "video", 5) == 0)
				cp->cn_pri = CN_FORCED;
			else
				cp->cn_pri = CN_MIDPRI;
		}
#endif
		break;
#endif	/* TGT_INDIGO || TGT_INDY || TGT_INDIGO2 */

#if defined(TGT_O2)
	case SGI_O2:
#if NGBE > 0
		if (gbe_cnprobe(&crimebus_tag, GBE_BASE) != 0) {
			if (strncmp(bios_console, "video", 5) == 0)
				cp->cn_pri = CN_FORCED;
			else
				cp->cn_pri = CN_MIDPRI;
		}
#endif
		break;
#endif	/* TGT_O2 */

#if defined(TGT_ORIGIN)
	case SGI_IP27:
	case SGI_IP35:
		if (widget_cnprobe() != 0) {
			if (strncmp(bios_console,
			    "/dev/graphics/textport", 22) == 0)
				cp->cn_pri = CN_FORCED;
			else
				cp->cn_pri = CN_MIDPRI;
		}
		break;
#endif	/* TGT_ORIGIN */

#if defined(TGT_OCTANE)
	case SGI_OCTANE:
		if (widget_cnprobe() != 0) {
			if (strncmp(bios_console, "video", 5) == 0)
				cp->cn_pri = CN_FORCED;
			else
				cp->cn_pri = CN_MIDPRI;
		}
		break;
#endif	/* TGT_OCTANE */

	default:
		break;
	}
}

void
wscninit(struct consdev *cp)
{
static int initted;

	if (initted)
		return;

	initted = 1;

        switch (sys_config.system_type) {
#if defined(TGT_INDIGO) || defined(TGT_INDY) || defined(TGT_INDIGO2)
	case SGI_IP20:
	case SGI_IP22:
	case SGI_IP26:
	case SGI_IP28:
#if NGIO > 0
		if (giofb_cnattach() != 0)
			return;
#endif
		if (sys_config.system_type == SGI_IP20) {
#if NZSKBD > 0
			extern void zskbd_cnattach(int, int);
			zskbd_cnattach(0, 0);
#endif
		} else {
#if NPCKBC > 0
			if (pckbc_cnattach(&hpc3bus_tag,
			    HPC_BASE_ADDRESS_0 + IOC_BASE + IOC_KB_REGS + 3,
			    KBCMDP - KBDATAP, 0))
				return;
#endif
		}
		break;
#endif	/* TGT_INDIGO || TGT_INDY || TGT_INDIGO2 */

#if defined(TGT_O2)
	case SGI_O2:
#if NGBE > 0
		if (gbe_cnattach(&crimebus_tag, GBE_BASE) != 0)
			return;
#endif

#if NMKBC > 0
		if (mkbc_cnattach(&macebus_tag, MACE_IO_KBC_OFFS) == 0)
			return;	/* console keyboard found */
#endif
#if NUKBD > 0
		/* fallback keyboard console attachment if the others failed */
		ukbd_cnattach();
#endif
		break;
#endif	/* TGT_O2 */

#if defined(TGT_OCTANE) || defined(TGT_ORIGIN)
	case SGI_IP27:
	case SGI_IP35:
	case SGI_OCTANE:
		widget_cnattach();
		break;
#endif	/* TGT_OCTANE || TGT_ORIGIN */

	default:
		break;
	}
}

void
wscnputc(dev_t dev, int i)
{
	wsdisplay_cnputc(dev, i);
}

int
wscngetc(dev_t dev)
{
	int c;

	wskbd_cnpollc(dev, 1);
	c = wskbd_cngetc(dev);
	wskbd_cnpollc(dev, 0);

	return c;
}

void
wscnpollc(dev_t dev, int on)
{
	wskbd_cnpollc(dev, on);
}

/*
 * Try to figure out if we have a glass console widget, and if we have
 * a driver for it.
 */

#if defined(TGT_OCTANE) || defined(TGT_ORIGIN)
int
widget_cnprobe()
{
#ifdef TGT_ORIGIN
	console_t *cons;
#endif

        switch (sys_config.system_type) {
#ifdef TGT_ORIGIN
	case SGI_IP27:
	case SGI_IP35:
		/*
		 * Our first pass over the KL configuration data has figured
		 * out which component is the glass console, if any.
		 */
		if (kl_glass_console == NULL)
			return 0;
		kl_get_location(kl_glass_console, &console_output);

		cons = kl_get_console();
		kl_get_console_location(cons, &console_input);
		break;
#endif
#ifdef TGT_OCTANE
	case SGI_OCTANE:
		console_output.nasid = masternasid;
		console_output.widget = ip30_find_video();
		if (console_output.widget == 0)
			return 0;

		console_input.nasid = masternasid;
		console_input.widget = IP30_BRIDGE_WIDGET;
		console_input.bus = 0;
		console_input.device = IP30_IOC_SLOTNO;
		console_input.fn = -1;
		console_input.specific =
		    PCI_ID_CODE(PCI_VENDOR_SGI, PCI_PRODUCT_SGI_IOC3);
		break;
#endif
	default:
		return 0;
	}

	/*
	 * Try supported frame buffers in no particular order.
	 */

#if NIMPACT_XBOW > 0
	if (impact_xbow_cnprobe() != 0) {
		output_widget_cninit = impact_xbow_cnattach;
		goto success;
	}
#endif
#if NODYSSEY > 0
	if (odyssey_cnprobe() != 0) {
		output_widget_cninit = odyssey_cnattach;
		goto success;
	}
#endif

	return 0;

success:
	/*
	 * At this point, we are committed to setup a glass console,
	 * so prevent serial console from winning over.
	 */
	comconsaddr = 0;

	return 1;
}

void
widget_cnattach()
{
	/* should not happen */
	if (output_widget_cninit == NULL)
		return;

	if ((*output_widget_cninit)() != 0)
		return;

#if NIOCKBC > 0
	if (iockbc_cnattach() == 0)
		return;	/* console keyboard found */
#endif
#if NUKBD > 0
	/* fallback keyboard console attachment if the others failed */
	ukbd_cnattach();
#endif
}
#endif	/* TGT_ORIGIN || TGT_OCTANE */
@


1.11
log
@Split the existing impact@@xbow attachment into generic impact routines, and
bus-specific attachment; impactreg.h and impactvar.h move from sgi/xbow/ to
sgi/dev/.

Teach the generic impact code how to code with pre-ImpactSR boards, which have
a slightly different register layout (information obtained from Peter Fuerst's
Linux IP28 patches).

Add an impact@@gio attachment (unfortunately untested, no Impact GIO boards
here). All Indigo 2 graphics options should be supported now (assuming the
Extreme/Ultra will actually work with grtwo(4) out of the box).

Tested not to disturb operation on IP30.

** ATTENTION! If you are building IP27 or IP30 kernels, be sure to rm impact.d
** before building a new kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.10 2012/04/16 22:28:15 miod Exp $ */
d349 1
a349 1
	 * At this point, we are commited to setup a glass console,
@


1.10
log
@Improve the way frame buffers are probed to reduce (and hopefully avoid)
false positives.

Do not look for framebuffers past GIO EXP1, there shouldn't be anything there.

Add the console code machinery to attach a glass console on IP22, when the
appropriate drivers will exist.

On multihead systems, get console framebuffer address (well, sort of) from a
completely undocumented interface (knowledge taken from Linux, confirmed to
work on a dual-head Indigo 2 here).

While there, get frame buffer names from ARCBios whenever possible, to be used
in dmesg eventually.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.9 2010/12/03 18:29:56 shadchin Exp $ */
d70 1
a79 1
#include <sgi/xbow/impactvar.h>
d332 3
a334 3
#if NIMPACT > 0
	if (impact_cnprobe() != 0) {
		output_widget_cninit = impact_cnattach;
@


1.9
log
@removed slot argument of function pckbd_cnattach
because it is always PCKBC_KBD_SLOT

ok miod@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.8 2010/04/06 19:12:34 miod Exp $ */
d53 1
a60 4
#include <sgi/localbus/crimebus.h>
#include <sgi/localbus/macebus.h>
#include <sgi/localbus/macebusvar.h>

d62 1
d72 7
d89 1
d94 1
d96 1
d130 16
d157 1
a157 1
#endif
d170 1
a170 1
#endif
d181 1
a181 1
#endif
d199 25
d240 1
a240 1
#endif
d248 1
a248 1
#endif
d376 1
a376 1
#endif
@


1.8
log
@Obtain struct sgi_device_location for the console input and output devices,
and compare against them when attaching potential console drivers, to figure
out whether they indeed are acting are console devices or not.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.7 2010/04/06 19:06:07 miod Exp $ */
d183 1
a183 2
		if (mkbc_cnattach(&macebus_tag, MACE_IO_KBC_OFFS,
		    PCKBC_KBD_SLOT) == 0)
d319 1
a319 1
	if (iockbc_cnattach(PCKBC_KBD_SLOT) == 0)
@


1.7
log
@Introduce struct sgi_device_location to carry enough information to uniquely
identify a given device by its physical connection, and add a lazy compare
routine. This will be used shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.6 2010/03/07 21:26:24 miod Exp $ */
d96 1
a96 8
int16_t	output_widget_nasid;
int	output_widget_id;
int	(*output_widget_cninit)(int16_t, int) = NULL;

int16_t	input_widget_nasid;
int	input_widget_id;
int	input_widget_npci;
uint32_t input_widget_type;
d254 1
a254 2
		output_widget_nasid = kl_glass_console->nasid;
		output_widget_id = kl_glass_console->widid;
d257 1
a257 4
		input_widget_nasid = cons->nasid;
		input_widget_id = cons->wid;
		input_widget_npci = cons->npci;
		input_widget_type = (uint32_t)cons->type;
d262 3
a264 3
		output_widget_nasid = masternasid;
		output_widget_id = ip30_find_video();
		if (output_widget_id == 0)
d267 6
a272 4
		input_widget_nasid = masternasid;
		input_widget_id = IP30_BRIDGE_WIDGET;
		input_widget_npci = IP30_IOC_SLOTNO;
		input_widget_type =
d285 1
a285 1
	if (impact_cnprobe(output_widget_nasid, output_widget_id) != 0) {
d291 1
a291 1
	if (odyssey_cnprobe(output_widget_nasid, output_widget_id) != 0) {
d316 1
a316 1
	if ((*output_widget_cninit)(output_widget_nasid, output_widget_id) != 0)
d320 1
a320 2
	if (iockbc_cnattach(input_widget_nasid, input_widget_id,
	    input_widget_npci, input_widget_type, PCKBC_KBD_SLOT) == 0)
@


1.6
log
@Minimalistic driver for the ImpactSR (Mardigras) video option found on older
Octane systems, as well as some Onyxes. With special permission to change a
systemwide .h file and add a manpage from deraadt@@
Magic numbers and operation sequencing borrowed from Linux; tested on
Octane + ESI.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2010/03/07 13:44:26 miod Exp $ */
d94 2
@


1.5
log
@Allow iockbc(4) and odysseey(4) to act as console devices and attach early;
this gives us working glass console on Fuel, as well as on Octane systems
with Odyssey graphics.
Joint work with jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.4 2009/10/26 18:00:06 miod Exp $ */
d74 1
d85 1
d291 6
@


1.4
log
@Better crime/mace interrupt handling; interrupt information is no longer
specified in the kernel configuration file, but is provided by macebus(4)
as part of the  child device attachment args, and provide both crime and
mace interrupt bitmasks; this allows us to only really enable interrupt
sources we care about, and to avoid invoking interrupt handler we don't need
to for the few mace interrupts multiplexed at the crime level.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.3 2008/01/23 16:37:56 jsing Exp $ */
d4 15
d53 3
d61 1
a63 3
#include <sgi/dev/gbereg.h>
#include <sgi/dev/mkbcreg.h>

d69 12
d83 1
d85 15
d101 2
a102 3
#include "wsdisplay.h"
#if NWSDISPLAY > 0
#include <dev/wscons/wsdisplayvar.h>
a104 2
cons_decl(ws);

d125 1
d128 1
a128 1
		if (gbe_cnprobe(&crimebus_tag, GBE_BASE)) {
d136 26
d177 3
d181 2
a182 2
	if (!gbe_cnattach(&crimebus_tag, GBE_BASE))
		return;
d184 1
d186 17
a202 2
	if (!mkbc_cnattach(&macebus_tag, 0x00320000, PCKBC_KBD_SLOT))
		return;
d204 4
d233 96
@


1.3
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.2 2007/12/31 12:46:14 jsing Exp $ */
d43 1
a43 1
#include <sgi/localbus/macebus.h>
@


1.2
log
@Significantly improve the gbe(4) driver, including:

- Internal restructure to separate code paths.

- Add support for early console. This allows for gbe(4) to takeover were
the ARCBios leaves off (if we should do so).

- Add support for 8bpp and 16bpp colour depths. As a result, we also have
support for colourmaps. We now use 8bpp as the default.

- Add mmap() support, enabling wsfb to operate correctly.

- Correct initial origin problem that occurred occasionally.

ok miod@@. tested by jasper@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2007/11/13 12:01:45 jsing Exp $ */
d90 1
a90 1
				cp->cn_pri = CN_INTERNAL;
@


1.1
log
@Move wscons_machdep.c to it's rightful location. This brings OpenBSD/sgi
inline with all other architectures.

ok miod@@
@
text
@d40 1
d42 4
a46 1
#include <sgi/localbus/macebus.h>
d54 1
d81 1
d83 13
a95 5
	/* Attach as console if necessary. */
	if (strncmp(bios_console, "video", 5) == 0) {
		cp->cn_pri = CN_REMOTE;
	} else {
		cp->cn_pri = CN_INTERNAL;
d109 4
a116 5
#if notyet
	ukbd_cnattach();
#endif

	return;
@

