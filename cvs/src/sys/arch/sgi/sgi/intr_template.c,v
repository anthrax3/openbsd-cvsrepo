head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10;
locks; strict;
comment	@ * @;


1.18
date	2017.02.11.03.44.22;	author visa;	state Exp;
branches;
next	1.17;
commitid	xjkuO7IpWLYltL4L;

1.17
date	2016.03.06.19.42.27;	author mpi;	state Exp;
branches;
next	1.16;
commitid	cyYKarj4qRTft4gD;

1.16
date	2015.12.25.09.22.00;	author visa;	state Exp;
branches;
next	1.15;
commitid	mo9Cs2HTLrPLm8sR;

1.15
date	2015.05.01.11.17.22;	author miod;	state Exp;
branches;
next	1.14;
commitid	nmL9Wvs1cOBMQGl7;

1.14
date	2014.09.30.06.51.58;	author jmatthew;	state Exp;
branches;
next	1.13;
commitid	pUEUpP9FlbomZUiI;

1.13
date	2012.09.29.19.24.31;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.29.18.54.39;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.15.20.40.06;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.18.17.01.14;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.28.06.55.27;	author syuu;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.02.01.52.28;	author syuu;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.27.00.08.27;	author syuu;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.25.17.39.51;	author syuu;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.12.17.13.33;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.26.20.14.15;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.26.18.13.34;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.26.18.00.06;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Let MP-safe interrupt handlers run without the kernel lock on sgi.

OK miod@@
@
text
@/*	$OpenBSD: intr_template.c,v 1.17 2016/03/06 19:42:27 mpi Exp $	*/

/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Common interrupt dispatcher bowels.
 *
 * This file is not a standalone file; to use it, define the following
 * macros and #include <sgi/sgi/intr_template.c>:
 *
 * INTR_FUNCTIONNAME	interrupt handler function name
 * MASK_FUNCTIONNAME	interrupt mask computation function name
 * INTR_GETMASKS	logic to get `imr', `isr', and initialize `bit'
 * INTR_HANDLER(bit)	logic to access intrhand array head for `bit'
 * INTR_IMASK(ipl)	logic to access imask array for `ipl'
 * INTR_LOCAL_DECLS	local declarations (may be empty)
 * MASK_LOCAL_DECLS	local declarations (may be empty)
 * INTR_MASKPENDING	logic to mask `isr'
 * INTR_MASKRESTORE	logic to reset `imr'
 * INTR_MASKSIZE	size of interrupt mask in bits
 * INTR_SPURIOUS(bit)	print a spurious interrupt message for `bit'
 *
 * The following macros are optional:
 * INTR_HANDLER_SKIP(ih)	nonzero to skip intrhand invocation
 * INTR_IPI_HOOK(ipl)		special case logic for IPIs
 */

/*
 * Recompute interrupt masks.
 */
void
MASK_FUNCTIONNAME()
{
	int irq, level;
	struct intrhand *q;
	uint intrlevel[INTR_MASKSIZE];

	MASK_LOCAL_DECLS

	/* First, figure out which levels each IRQ uses. */
	for (irq = 0; irq < INTR_MASKSIZE; irq++) {
		uint levels = 0;
		for (q = INTR_HANDLER(irq); q != NULL; q = q->ih_next)
			levels |= 1 << q->ih_level;
		intrlevel[irq] = levels;
	}

	/*
	 * Then figure out which IRQs use each level.
	 * Note that we make sure never to overwrite imask[IPL_HIGH], in
	 * case an interrupt occurs during intr_disestablish() and causes
	 * an unfortunate splx() while we are here recomputing the masks.
	 */
	for (level = IPL_NONE; level < NIPLS; level++) {
		uint64_t irqs = 0;
		for (irq = 0; irq < INTR_MASKSIZE; irq++)
			if (intrlevel[irq] & (1 << level))
				irqs |= 1UL << irq;
		INTR_IMASK(level) = irqs;
	}

	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so vm > (tty | net | bio).
	 *
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
	INTR_IMASK(IPL_NET) |= INTR_IMASK(IPL_BIO);
	INTR_IMASK(IPL_TTY) |= INTR_IMASK(IPL_NET);
	INTR_IMASK(IPL_VM) |= INTR_IMASK(IPL_TTY);
	INTR_IMASK(IPL_CLOCK) |= INTR_IMASK(IPL_VM);
	INTR_IMASK(IPL_HIGH) |= INTR_IMASK(IPL_CLOCK);
	INTR_IMASK(IPL_IPI) |= INTR_IMASK(IPL_HIGH);

	/*
	 * These are pseudo-levels.
	 */
	INTR_IMASK(IPL_NONE) = 0;
}

/*
 * Interrupt dispatcher.
 */
uint32_t
INTR_FUNCTIONNAME(uint32_t hwpend, struct trapframe *frame)
{
	struct cpu_info *ci = curcpu();
	uint64_t imr, isr, mask;
	int ipl;
	int bit;
	struct intrhand *ih;
	int rc, ret;
	INTR_LOCAL_DECLS

	INTR_GETMASKS;

	isr &= imr;
	if (isr == 0)
		return 0;	/* not for us */

#ifdef INTR_IPI_HOOK
	INTR_IPI_HOOK(frame->ipl);
#endif

	/*
	 * Mask all pending interrupts.
	 */
	INTR_MASKPENDING;

	/*
	 * If interrupts are spl-masked, mask them and wait for splx()
	 * to reenable them when necessary.
	 */
	if ((mask = isr & INTR_IMASK(frame->ipl)) != 0) {
		isr &= ~mask;
		imr &= ~mask;
	}

	/*
	 * Now process allowed interrupts.
	 */
	if (isr != 0) {
		int lvl, bitno;
		uint64_t tmpisr;

		__asm__ (".set noreorder\n");
		ipl = ci->ci_ipl;
		mips_sync();
		__asm__ (".set reorder\n");

		/* Service higher level interrupts first */
		for (lvl = NIPLS - 1; lvl != IPL_NONE; lvl--) {
			tmpisr = isr & (INTR_IMASK(lvl) ^ INTR_IMASK(lvl - 1));
			if (tmpisr == 0)
				continue;
			for (bitno = bit, mask = 1UL << bitno; mask != 0;
			    bitno--, mask >>= 1) {
				if ((tmpisr & mask) == 0)
					continue;

				rc = 0;
				for (ih = INTR_HANDLER(bitno); ih != NULL;
				    ih = ih->ih_next) {
#ifdef MULTIPROCESSOR
					register_t sr;
					int need_lock;
#endif
#if defined(INTR_HANDLER_SKIP)
					if (INTR_HANDLER_SKIP(ih) != 0)
						continue;
#endif
					splraise(ih->ih_level);
#ifdef MULTIPROCESSOR
					if (ih->ih_level < IPL_IPI) {
						sr = getsr();
						ENABLEIPI();
					}
					if (ih->ih_flags & IH_MPSAFE)
						need_lock = 0;
					else
						need_lock =
						    ih->ih_level < IPL_CLOCK;
					if (need_lock)
						__mp_lock(&kernel_lock);
#endif
					ret = (*ih->ih_fun)(ih->ih_arg);
					if (ret != 0) {
						rc = 1;
						atomic_inc_long((unsigned long *)
						    &ih->ih_count.ec_count);
					}
#ifdef MULTIPROCESSOR
					if (need_lock)
						__mp_unlock(&kernel_lock);
					if (ih->ih_level < IPL_IPI)
						setsr(sr);
#endif
					__asm__ (".set noreorder\n");
					ci->ci_ipl = ipl;
					mips_sync();
					__asm__ (".set reorder\n");
					if (ret == 1)
						break;
				}
				if (rc == 0)
					INTR_SPURIOUS(bitno);

				isr ^= mask;
				if ((tmpisr ^= mask) == 0)
					break;
			}
		}

		/*
		 * Reenable interrupts which have been serviced.
		 */
		INTR_MASKRESTORE;
	}

	return hwpend;
}

#undef	INTR_FUNCTIONNAME
#undef	MASK_FUNCTIONNAME
#undef	INTR_GETMASKS
#undef	INTR_HANDLER
#undef	INTR_HANDLER_SKIP
#undef	INTR_IMASK
#undef	INTR_LOCAL_DECLS
#undef	MASK_LOCAL_DECLS
#undef	INTR_MASKPENDING
#undef	INTR_MASKRESTORE
#undef	INTR_SPURIOUS
#undef	INTR_IPI_HOOK
@


1.17
log
@Rename mips64's trap_frame into trapframe.

For coherency with other archs and in order to use it in MI code.

ok visa@@, tobiasu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.16 2015/12/25 09:22:00 visa Exp $	*/
d161 1
a171 2
						if (ih->ih_level < IPL_CLOCK)
							__mp_lock(&kernel_lock);
d173 7
d188 3
a190 3
					if (ih->ih_level < IPL_IPI) {
						if (ih->ih_level < IPL_CLOCK)
							__mp_unlock(&kernel_lock);
a191 1
					}
@


1.16
log
@Add IPI logic. Assign two additional interrupts for inter-processor
signalling as a workaround to a limitation in the hub interrupt code,
to allow four CPUs per node. At the moment, multi-node setups are not
supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.15 2015/05/01 11:17:22 miod Exp $	*/
d100 1
a100 1
INTR_FUNCTIONNAME(uint32_t hwpend, struct trap_frame *frame)
@


1.15
log
@Do not grab the kernel lock for clock interrupts. Help and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.14 2014/09/30 06:51:58 jmatthew Exp $	*/
d39 1
d116 4
d224 1
@


1.14
log
@implement atomic operations using ll/sc, and convert rw_cas and callers of the
pre-existing atomics to match.

tested on sgi (octane) and octeon (erl)
ok miod@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.13 2012/09/29 19:24:31 miod Exp $	*/
d166 1
a166 1
						if (ipl < IPL_SCHED)
d178 1
a178 1
						if (ipl < IPL_SCHED)
@


1.13
log
@Handle the coprocessor 0 cause and status registers as a 64 bit value now,
as some odd mips designs need moro than 32 bits in there. This causes a lot
of mechanical changes everywhere getsr() is used.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.12 2012/09/29 18:54:39 miod Exp $	*/
d173 2
a174 1
						atomic_add_uint64(&ih->ih_count.ec_count, 1);
@


1.12
log
@Proide a mips_sync() macro to wrap asm("sync"), and replace gazillions of
such statements with it.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.11 2011/04/15 20:40:06 deraadt Exp $	*/
d155 1
a155 1
					u_int32_t sr;
@


1.11
log
@More than a decade ago, interrupt handlers on sparc started returning 0
(interrupt was not for me), 1 (positive interrupt was for me), or -1
(i am not sure...).  We have continued with this practice in as many
drivers as possible, throughout the tree.

This makes some of the architectures use that information in their
interrupt handler calling code -- if 1 is returned (and we know
this specific machine does not have edge-shared interrupts), we
finish servicing other possible handlers on the same pin.  If the
interrupt pin remains asserted (from a different device), we will
end up back in the interrupt servicing code of course... but this is
cheaper than calling all the chained interrupts on a pin.

This does of course count on shared level interrupts being properly
sorted by IPL.

There have been some concerns about starvation of drivers which
incorrectly return 1.  Those drivers should be hunted down so that
they return -1.

(other architectures will follow)

ok kettenis drahn dlg miod
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.10 2010/01/18 17:01:14 miod Exp $	*/
d138 2
a139 1
		__asm__ ("sync\n\t.set reorder\n");
d184 2
a185 1
					__asm__ ("sync\n\t.set reorder\n");
@


1.10
log
@In the interrupt handler, only attempt to acquire kernel_lock if coming from
an ipl lower than IPL_SCHED, not IPL_IPI.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.9 2009/12/28 06:55:27 syuu Exp $	*/
d106 1
a106 1
	int rc;
d169 2
a170 1
					if ((*ih->ih_fun)(ih->ih_arg) != 0) {
d184 2
@


1.9
log
@MP-safe pmap implemented, enable IPI in interrupt handler to avoid deadlock.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.8 2009/12/02 01:52:28 syuu Exp $	*/
d165 2
a166 1
						__mp_lock(&kernel_lock);
d175 2
a176 1
						__mp_unlock(&kernel_lock);
@


1.8
log
@IPL_IPI priority raised to IPL_IPI > IPL_HIGH for handling TLB shootdown.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.7 2009/11/27 00:08:27 syuu Exp $	*/
d153 3
d161 7
d172 6
@


1.7
log
@atomic counter increment for SMP.
ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.6 2009/11/25 17:39:51 syuu Exp $	*/
d67 1
a67 1
	for (level = IPL_NONE; level < IPL_HIGH; level++) {
d86 2
a92 1
	INTR_IMASK(IPL_HIGH) = -1UL;
d141 1
a141 1
		for (lvl = IPL_HIGH - 1; lvl != IPL_NONE; lvl--) {
@


1.6
log
@IP30 IPI implementation.
Also few xheart modification for SMP.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.5 2009/11/12 17:13:33 miod Exp $	*/
d159 1
a159 1
						ih->ih_count.ec_count++;
@


1.5
log
@Move the interrupt makemasks() code to the interrupt template; no functional
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.4 2009/10/26 20:14:15 miod Exp $	*/
d31 1
d51 2
d190 1
@


1.4
log
@Get rid of unused `frame' member of struct intrhand; only hardclock() needs
a frame and clock interrupt doesn't need a struct intrhand.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.3 2009/10/26 18:13:34 miod Exp $	*/
d26 1
d33 1
d40 54
d181 1
@


1.3
log
@Add support for the Octane power button to power(4). Took me a while to
figure out how the interrupt was routed from xbridge to xheart... (it bypasses
the regular `have xbridge send a xio interrupt packet' mechanism)
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.2 2009/10/26 18:00:06 miod Exp $	*/
a97 1
					ih->frame = frame;
@


1.2
log
@Better crime/mace interrupt handling; interrupt information is no longer
specified in the kernel configuration file, but is provided by macebus(4)
as part of the  child device attachment args, and provide both crime and
mace interrupt bitmasks; this allows us to only really enable interrupt
sources we care about, and to avoid invoking interrupt handler we don't need
to for the few mace interrupts multiplexed at the crime level.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr_template.c,v 1.1 2009/10/22 22:08:54 miod Exp $	*/
d85 1
a85 1
			for (bitno = bit, mask = 1UL << bitno; tmpisr != 0;
@


1.1
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 3
d93 4
d128 1
@

