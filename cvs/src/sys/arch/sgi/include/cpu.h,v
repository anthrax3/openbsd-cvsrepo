head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.15.0.14
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.10
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.6
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.1.0.22
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.20
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.18
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.16
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.14
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.10
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.07.30.16.05.24;	author visa;	state Exp;
branches;
next	1.15;
commitid	OXR2nDTbL2KN6sIb;

1.15
date	2014.03.09.10.12.17;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.06.24.16.26.04;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.21.12.20.30;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.11.11.29.50;	author syuu;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.09.10.59.01;	author syuu;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.28.16.20.28;	author syuu;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.09.23.34.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.28.07.18.39;	author syuu;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.25.21.02.18;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.25.17.39.51;	author syuu;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.30.08.13.57;	author syuu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.30.06.22.00;	author syuu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.15.04.54.31;	author syuu;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.21.12.18;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Define MAXCPUS per mips64 port.
@
text
@/*	$OpenBSD: cpu.h,v 1.15 2014/03/09 10:12:17 miod Exp $ */
/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 *
 *	from: @@(#)cpu.h	8.4 (Berkeley) 1/4/94
 */

#ifndef _MACHINE_CPU_H_
#define _MACHINE_CPU_H_

#ifdef _KERNEL
#if defined(MULTIPROCESSOR) && !defined(_LOCORE)
#define MAXCPUS 4
struct cpu_info;
struct cpu_info *hw_getcurcpu(void);
void hw_setcurcpu(struct cpu_info *);
void hw_cpu_boot_secondary(struct cpu_info *);
void hw_cpu_hatch(struct cpu_info *);
void hw_cpu_spinup_trampoline(struct cpu_info *);
int  hw_ipi_intr_establish(int (*)(void *), u_long);
void hw_ipi_intr_set(u_long);
void hw_ipi_intr_clear(u_long);
#endif	/* MULTIPROCESSOR && !_LOCORE */


#endif/* _KERNEL */

#include <mips64/cpu.h>

#endif /* !_MACHINE_CPU_H_ */
@


1.15
log
@Rework the per-cpu cache information. Use a common struct to store the line
size, the number of sets, and the total size (and the set size, for convenience)
per cache (I$, D$, L2, L3).
This allows cpu.c to print the number of ways (sets) of L2 and L3 caches from
the cache information, rather than hardcoding this from the processor type.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.14 2012/06/24 16:26:04 miod Exp $ */
d49 1
@


1.14
log
@Add cache operation functions pointers to struct cpu_info; the various
cache lines and sizes are already there, after all.

The ConfigCache cache routine is responsible for filling these function
pointers; cache routine invocation macros are updated to use the cpu_info
fields, but may still be overriden in <machine/cpu.h> on platforms where
only one set of cache routines is used.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.13 2012/04/21 12:20:30 miod Exp $ */
a57 1
void hw_cpu_init_secondary(struct cpu_info *);
@


1.13
log
@Rework the signature of the cache handling routines again. It makes more sense
to pass both the virtual and physical addresses of the page to clean to
SyncDCachePage, which is the only routine using `Index' operations on the data
cache, which might be virtually indexed at some levels but physically indexed
at others. On the other hand, it does not make any sense to pass a physical
address to routines using `Hit' operations (and they were discarding them
anyway).

In addition to making things cleaner, this fixes sporadic userland misbehaviour
(read: SIGSGEV) on RM7000 O2 systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12 2011/03/23 16:54:36 pirofti Exp $ */
a60 15
/*
 * Define soft selected cache functions.
 */
#define	Mips_SyncCache(ci)			\
	(*(sys_config._SyncCache))((ci))
#define	Mips_InvalidateICache(ci, va, l)	\
	(*(sys_config._InvalidateICache))((ci), (va), (l))
#define	Mips_SyncDCachePage(ci, va, pa)		\
	(*(sys_config._SyncDCachePage))((ci), (va), (pa))
#define	Mips_HitSyncDCache(ci, va, l)	\
	(*(sys_config._HitSyncDCache))((ci), (va), (l))
#define	Mips_IOSyncDCache(ci, va, l, h)	\
	(*(sys_config._IOSyncDCache))((ci), (va), (l), (h))
#define	Mips_HitInvalidateDCache(ci, va, l)	\
	(*(sys_config._HitInvalidateDCache))((ci), (va), (l))
@


1.12
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.11 2010/09/11 11:29:50 syuu Exp $ */
d69 2
a70 2
	(*(sys_config._SyncDCachePage))((ci), (va))
#define	Mips_HitSyncDCache(ci, va, pa, l)	\
d72 1
a72 1
#define	Mips_IOSyncDCache(ci, va, pa, l, h)	\
d74 1
a74 1
#define	Mips_HitInvalidateDCache(ci, va, pa, l)	\
@


1.11
log
@move machine dependent GET_CPU_INFO(), getcurcpu(), setcurcpu() to arch/sgi. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.10 2010/09/09 10:59:01 syuu Exp $ */
d44 2
a45 2
#ifndef _SGI_CPU_H_
#define _SGI_CPU_H_
d81 1
a81 1
#endif /* !_SGI_CPU_H_ */
@


1.10
log
@Move cache settings into hw_cpu_init_secondary() ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.9 2010/04/28 16:20:28 syuu Exp $ */
d50 2
@


1.9
log
@Storeing current cpu_info address into LLAddr register, for curcpu().
Instead of previous implementation, we won't use physical cpuid to fetch curcpu().
This requires to implement IP27/35 SMP.
Implemented getcurcpu() and setcurcpu() for it, smp_malloc() renamed alloc_contiguous_pages() because now it only allocate by page.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.8 2010/01/09 23:34:29 miod Exp $ */
d56 1
@


1.8
log
@Move cache information from global variables to per-cpu_info fields; this
allows processors with different cache sizes to be used.

Cache management routines now take a struct cpu_info * as first parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.7 2009/12/28 07:18:39 syuu Exp $ */
d48 1
a48 10

#ifdef MULTIPROCESSOR

#if defined(TGT_OCTANE)
#define HW_CPU_NUMBER_REG 0x900000000ff50000 /* HEART_PRID */
#else
#error MULTIPROCESSOR kernel not supported on this configuration
#endif

#if !defined(_LOCORE)
d56 1
a56 9
#endif

#define hw_cpu_number() (*(uint64_t *)HW_CPU_NUMBER_REG)

#else	/* MULTIPROCESSOR */

#define hw_cpu_number() 0

#endif	/* MULTIPROCESSOR */
@


1.7
log
@Fix compile error caused from previous commit
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.6 2009/12/25 21:02:18 miod Exp $ */
d78 12
a89 12
#define	Mips_SyncCache()			\
	(*(sys_config._SyncCache))()
#define	Mips_InvalidateICache(va, l)		\
	(*(sys_config._InvalidateICache))((va), (l))
#define	Mips_SyncDCachePage(va, pa)		\
	(*(sys_config._SyncDCachePage))((va))
#define	Mips_HitSyncDCache(va, pa, l)		\
	(*(sys_config._HitSyncDCache))((va), (l))
#define	Mips_IOSyncDCache(va, pa, l, h)		\
	(*(sys_config._IOSyncDCache))((va), (l), (h))
#define	Mips_HitInvalidateDCache(va, pa, l)	\
	(*(sys_config._HitInvalidateDCache))((va), (l))
@


1.6
log
@Pass both the virtual address and the physical address of the memory range
when invoking the cache functions. The physical address is needed when
operating on physically-indexed caches, such as the L2 cache on Loongson
processors.

Preprocessor abuse makes sure that the physical address computation gets
compiled out when running on a kernel compiled for virtually-indexed
caches only, such as the sgi kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.5 2009/11/25 17:39:51 syuu Exp $ */
d58 1
@


1.5
log
@IP30 IPI implementation.
Also few xheart modification for SMP.
ok miod@@
@
text
@d1 42
a42 1
/*	$OpenBSD: cpu.h,v 1.4 2009/10/30 08:13:57 syuu Exp $ */
d48 1
d50 1
d53 1
a53 1
#else /* TGT_OCTANE */
d55 1
a55 6
#endif /* TGT_OCTANE */
#define hw_cpu_number() (*(uint64_t *)HW_CPU_NUMBER_REG)
#else/* MULTIPROCESSOR */
#define hw_cpu_number() 0
#endif/* MULTIPROCESSOR */
#endif/* _KERNEL */
d57 1
a57 3
#include <mips64/cpu.h>

#if defined(_KERNEL) && defined(MULTIPROCESSOR) && !defined(_LOCORE)
d64 30
a93 1
#endif/* _KERNEL && MULTIPROCESSOR && !_LOCORE */
@


1.4
log
@Support IP30 secondary cpu bootup. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.3 2009/09/30 06:22:00 syuu Exp $ */
d3 2
a4 1
/* Use Mips generic include file */
d25 3
d29 1
@


1.3
log
@curproc, curprocpaddr moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.2 2009/09/15 04:54:31 syuu Exp $ */
d19 6
@


1.2
log
@cpu status flag, cpuid added to cpu_info.
cpu_info pointer array, cpu_info iterator, cpu_number() implementation added.
constraint modifier fixed in lock.h to output correct assembly.
calling proc_trampoline_mp in exception.S.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.1 2004/08/06 21:12:18 pefo Exp $ */
d8 2
a9 2
#define HW_CPU_NUMBER 0x900000000ff50000/* HEART_PRID */
#else
d11 2
a12 2
#endif
#define hw_cpu_number() (*(uint64_t *)HW_CPU_NUMBER)
@


1.1
log
@initial sgi import
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.9 1998/01/28 13:46:10 pefo Exp $ */
d5 13
a18 1

@

