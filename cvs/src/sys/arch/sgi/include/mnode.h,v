head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.22
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.18
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.20
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.12
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.16
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.8.0.2
	OPENBSD_4_6_BASE:1.8;
locks; strict;
comment	@ * @;


1.18
date	2011.04.17.17.44.24;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.05.14.43.10;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.06.19.09.44;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.21.13.52.03;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.07.13.42.15;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.09.20.33.16;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.16.00.15.48;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.08.19.11.57;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.11.19.56.02;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.06.22.46.40;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.13.18.47.30;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.13.16.28.09;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.28.18.02.41;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.27.19.00.15;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.06.20.08.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.02.21.26.00;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.13.21.17.54;	author miod;	state Exp;
branches;
next	;


desc
@@


1.18
log
@On IP27 systems, fill the array of node hub widget numbers early, so that all
hubs are known during autoconf. Then, pick the most populated 2GB window
as our DMA memory window. xbridge(4) can thus program the correct settings
regardless of the order in which the xbow(4) attach.
@
text
@/*	$OpenBSD: mnode.h,v 1.17 2011/04/05 14:43:10 miod Exp $ */

/*
 * Copyright (c) 2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _MACHINE_MNODE_H_
#define _MACHINE_MNODE_H_

/*
 * Definitions for Nodes set up in M-Mode. Some stuff here
 * inspired by information gathered from Linux source code.
 */

/*
 * IP27 uses XKSSEG to access the 1TB memory area.
 */
#define	IP27_CAC_BASE	PHYS_TO_XKPHYS(0, CCA_CACHED)

/*
 * IP27 uses XKPHYS space for accessing special objects.
 * Note that IP27_UNCAC_BASE is a linear space without specials.
 */
#define	IP27_HSPEC_BASE	PHYS_TO_XKPHYS_UNCACHED(0, SP_HUB)
#define	IP27_IO_BASE	PHYS_TO_XKPHYS_UNCACHED(0, SP_IO)
#define	IP27_MSPEC_BASE	PHYS_TO_XKPHYS_UNCACHED(0, SP_SPECIAL)
#define	IP27_UNCAC_BASE	PHYS_TO_XKPHYS_UNCACHED(0, SP_NC)

/*
 * Macros used to find the base of each nodes address space.
 * In M mode each node space is 4GB; in N mode each node space is 2GB only.
 */
#define IP27_NODE_BASE(base, node) ((base) + ((uint64_t)(node) << kl_n_shift))
#define	IP27_NODE_SIZE_MASK	   ((1UL << kl_n_shift) - 1)

#define IP27_NODE_CAC_BASE(node)	(IP27_NODE_BASE(IP27_CAC_BASE, node))
#define IP27_NODE_HSPEC_BASE(node)	(IP27_NODE_BASE(IP27_HSPEC_BASE, node))
#define IP27_NODE_IO_BASE(node)		(IP27_NODE_BASE(IP27_IO_BASE, node))
#define IP27_NODE_MSPEC_BASE(node)	(IP27_NODE_BASE(IP27_MSPEC_BASE, node))
#define IP27_NODE_UNCAC_BASE(node)	(IP27_NODE_BASE(IP27_UNCAC_BASE, node))

/* Get typed address to nodes uncached space */
#define IP27_UNCAC_ADDR(type, node, offs) \
	((type)(IP27_NODE_UNCAC_BASE(node) + ((offs) & IP27_NODE_SIZE_MASK)))

/*
 * Convert a physical (XIO) address to a node number.
 */
#define	IP27_PHYS_TO_NODE(addr)	((addr) >> kl_n_shift)

/*
 * IP27 platforms uses something called kldir to describe each
 * nodes configuration. Directory entries looks like:
 */
#define IP27_KLDIR_MAGIC	0x434d5f53505f5357

typedef struct kldir_entry {
	uint64_t	 magic;
	off_t		 offset;	/* Offset from start of node space */
	void		*pointer;
	size_t		 size;		/* Size in bytes */
	uint64_t	 count;		/* # of entries if array, 1 if not */
	size_t		 stride;	/* Stride if array, 0 if not */
	char		 rsvd[16];	/* Pad entry to 0x40 bytes */
} kldir_entry_t;

/* Get address to a specific directory entry */
#define IP27_KLD_BASE(node)	IP27_UNCAC_ADDR(kldir_entry_t *, node, 0x2000)
#define IP27_KLD_LAUNCH(node)		(IP27_KLD_BASE(node) + 0)
#define IP27_KLD_KLCONFIG(node)		(IP27_KLD_BASE(node) + 1)
#define IP27_KLD_NMI(node)		(IP27_KLD_BASE(node) + 2)
#define IP27_KLD_GDA(node)		(IP27_KLD_BASE(node) + 3)
#define IP27_KLD_FREEMEM(node)		(IP27_KLD_BASE(node) + 4)
#define IP27_KLD_SYMMON_STK(node)	(IP27_KLD_BASE(node) + 5)
#define IP27_KLD_PI_ERROR(node)		(IP27_KLD_BASE(node) + 6)
#define IP27_KLD_KERN_VARS(node)	(IP27_KLD_BASE(node) + 7)
#define IP27_KLD_KERN_XP(node)		(IP27_KLD_BASE(node) + 8)
#define IP27_KLD_KERN_PARTID(node)	(IP27_KLD_BASE(node) + 9)

/* ========== */

/*
 * KLCONFIG is a linked list of data structures describing the
 * system configuration. 
 */
typedef uint32_t klconf_off_t;
typedef char confidence_t;
 
typedef struct console_s {
	unsigned long	uart_base;
	unsigned long	config_base;
	unsigned long	memory_base;
	short		baud;
	short		flag;
	int		type;
	int16_t		nasid;
	char		wid;
	char		npci;
	uint64_t	baseio_nic;
} console_t;

typedef struct klc_malloc_hdr {
	klconf_off_t km_base;
	klconf_off_t km_limit;
	klconf_off_t km_current;
} klc_malloc_hdr_t;

/* KLCONFIG header addressed by IP27_KLCONFIG_HDR(node) */
#define IP27_KLCONFIG_HDR(n) \
	IP27_UNCAC_ADDR(kl_config_hdr_t *, n, IP27_KLD_KLCONFIG(n)->offset)

typedef struct kl_config_hdr {
	uint64_t	magic;		/* set this to KLCFGINFO_MAGIC */
	uint32_t	version;	/* structure version number */
	klconf_off_t	malloc_hdr_off;	/* offset of ch_malloc_hdr */
	klconf_off_t	cons_off;	/* offset of ch_cons */
	klconf_off_t	board_info;	/* the link list of boards */
	console_t	cons_info;	/* address info of the console */
	klc_malloc_hdr_t malloc_hdr[3];
	confidence_t	sw_belief;	/* confidence that software is bad */
	confidence_t	sn0net_belief; /* confidence that sn0net is bad */
} kl_config_hdr_t;

/* Board info. */
#define IP27_KLFIRST_BOARD(n) \
	IP27_UNCAC_ADDR(lboard_t *, n, IP27_KLCONFIG_HDR(n)->board_info)
#define IP27_KLNEXT_BOARD(n, board) \
	IP27_UNCAC_ADDR(lboard_t *, n, board->brd_next)
#define	MAX_COMPTS_PER_BRD	24

typedef struct lboard_s {
	klconf_off_t	brd_next;	/* Next BOARD */
	uint8_t		struct_type;	/* type, local or remote */
	unsigned char	brd_type;	/* type+class */
	unsigned char	brd_sversion;	/* version of this structure */
	unsigned char	brd_brevision;	/* board revision */
	unsigned char	brd_promver;	/* board prom version, if any */
	unsigned char	brd_flags;	/* Enabled, Disabled etc */
	unsigned char	brd_slot;	/* slot number (widget on IP35) */
	unsigned short	brd_bus_num: 2,	/* PIC bus number (IP35) */
			brd_unused: 14;
	short		brd_module;	/* module to which it belongs */
	char		brd_partition;	/* Partition number */
	unsigned short	brd_diagval;	/* diagnostic value */
	unsigned short	brd_diagparm;	/* diagnostic parameter */
	unsigned char	brd_inventory;	/* inventory history */
	unsigned char	brd_numcompts;	/* Number of components */
	uint64_t	brd_nic;	/* Number in CAN */
	int16_t		brd_nasid;	/* passed parameter */
	klconf_off_t	brd_compts[MAX_COMPTS_PER_BRD]; /* COMPONENTS */
	klconf_off_t	brd_errinfo;	/* Board's error information */
	struct lboard_s *brd_parent;	/* Logical parent for this brd */
	uint32_t	brd_graph_link;	/* vertex hdl to connect extrn compts */
	confidence_t	brd_confidence;	/* confidence that the board is bad */
	int16_t		brd_owner;	/* who owns this board */
	uint8_t		brd_nic_flags;	/* To handle 8 more NICs */
	char		brd_name[32];
} lboard_t;

#define	LBOARD	0x01
#define	RBOARD	0x02

/* Definitions of board type and class */
#define	IP27_BC_MASK	0xf0
#define	IP27_BT_MASK	0x0f

#define	IP27_BC_NODE	0x10
#define	IP27_BC_IO	0x20
#define	IP27_BC_ROUTER	0x30
#define	IP27_BC_MPLANE	0x40
#define	IP27_BC_GRAF	0x50
#define	IP27_BC_HDTV	0x60
#define	IP27_BC_BRICK	0x70
#define	IP27_BC_IO2	0x80

/* NODE types */
#define	IP27_BRD_CPU		(IP27_BC_NODE | 0x01)
/* IO types */
#define	IP27_BRD_BASEIO		(IP27_BC_IO | 0x01)	/* IO6 */
#define	IP27_BRD_MSCSI		(IP27_BC_IO | 0x02)
#define	IP27_BRD_MENET		(IP27_BC_IO | 0x03)
#define	IP27_BRD_FDDI		(IP27_BC_IO | 0x04)
#define	IP27_BRD_PCI1		(IP27_BC_IO | 0x06)	/* PCI shoebox */
#define	IP27_BRD_VME		(IP27_BC_IO | 0x07)
#define	IP27_BRD_MIO		(IP27_BC_IO | 0x08)
#define	IP27_BRD_FC		(IP27_BC_IO | 0x09)
#define	IP27_BRD_LINC		(IP27_BC_IO | 0x0a)
/* MPLANE types */
#define	IP27_BRD_MPLANE8	(IP27_BC_MPLANE | 0x01)
#define	IP27_BRD_IOBRICK_XBOW	(IP27_BC_MPLANE | 0x02)
/* GRAF types */
#define	IP27_BRD_KONA		(IP27_BC_GRAF | 0x01)
#define	IP27_BRD_MGRAS		(IP27_BC_GRAF | 0x03)
#define	IP27_BRD_ODSY		(IP27_BC_GRAF | 0x04)
/* BRICK types */
#define	IP27_BRD_IOBRICK	(IP27_BC_BRICK | 0x00)
#define	IP27_BRD_IBRICK		(IP27_BC_BRICK | 0x01)
#define	IP27_BRD_PBRICK		(IP27_BC_BRICK | 0x02)
#define	IP27_BRD_XBRICK		(IP27_BC_BRICK | 0x03)
#define	IP27_BRD_NBRICK		(IP27_BC_BRICK | 0x04)
#define	IP27_BRD_PEBRICK	(IP27_BC_BRICK | 0x05)
#define	IP27_BRD_PXBRICK	(IP27_BC_BRICK | 0x06)
#define	IP27_BRD_IXBRICK	(IP27_BC_BRICK | 0x07)
#define	IP27_BRD_CGBRICK	(IP27_BC_BRICK | 0x08)
/* IO2 types */
#define	IP27_BRD_DIVO		(IP27_BC_IO2 | 0x01)
#define	IP27_BRD_TPU		(IP27_BC_IO2 | 0x02)
#define	IP27_BRD_GSN		(IP27_BC_IO2 | 0x03)
#define	IP27_BRD_GSN_AUX	(IP27_BC_IO2 | 0x04)
#define	IP27_BRD_PCI3		(IP27_BC_IO2 | 0x05)	/* PCI shoehorn */
#define	IP27_BRD_HIPPI		(IP27_BC_IO2 | 0x06)
#define	IP27_BRD_ATM		(IP27_BC_IO2 | 0x07)

/* Component info. Common info about a component. */
typedef struct klinfo_s {			/* Generic info */
	unsigned char	struct_type;	/* type of this structure */
	unsigned char	struct_version;	/* version of this structure */
	unsigned char	flags;		/* Enabled, disabled etc */
	unsigned char	revision;	/* component revision */
	unsigned short	diagval;	/* result of diagnostics */
	unsigned short	diagparm;	/* diagnostic parameter */
	unsigned char	inventory;	/* previous inventory status */
	uint64_t	nic;		/* Must be aligned properly */
	unsigned char	physid;		/* physical id of component */
	unsigned int	virtid;		/* virtual id as seen by system */
	unsigned char	widid;		/* Widget id - if applicable */
	int16_t		nasid;		/* node number - from parent */
	unsigned short	port: 2,	/* (IP35) port on dual port controller */
			pci_bus_num: 2,	/* (IP35) PCI bus number if on PIC */
			pci_multifunc: 1,
			pci_func_num: 3,/* (IP35) PCI function number */
			pci_unused: 8;
	char		pad2;		/* pad out structure. */
	void		*arcs_compt;	/* ptr to the arcs struct for ease*/
	klconf_off_t	errinfo;	/* component specific errors */
	unsigned short	pad3;		/* pci fields have moved over to */
	unsigned short	pad4;		/* klbri_t */
} klinfo_t;

#define	KLINFO_PHYSID_PIC_BUS1		0x10	/* set if on PIC bus 1 */
#define	KLINFO_PHYSID_WIDGET_MASK	0x0f

#define	KLINFO_ENABLED	0x01
#define	KLINFO_FAILED	0x02

/*
 * Component structure types.
 */
#define	KLSTRUCT_UNKNOWN	0
#define	KLSTRUCT_CPU		1
#define	KLSTRUCT_HUB		2
#define	KLSTRUCT_MEMBNK		3
#define	KLSTRUCT_XBOW		4
#define	KLSTRUCT_BRI		5
#define	KLSTRUCT_IOC3		6
#define	KLSTRUCT_PCI		7
#define	KLSTRUCT_VME		8
#define	KLSTRUCT_ROU		9
#define	KLSTRUCT_GFX		10
#define	KLSTRUCT_SCSI		11
#define	KLSTRUCT_FDDI		12
#define	KLSTRUCT_MIO		13
#define	KLSTRUCT_DISK		14
#define	KLSTRUCT_TAPE		15
#define	KLSTRUCT_CDROM		16
#define	KLSTRUCT_HUB_UART	17
#define	KLSTRUCT_IOC3ENET	18
#define	KLSTRUCT_IOC3UART	19
#define	KLSTRUCT_IOC3PCKM	21
#define	KLSTRUCT_RAD		22
#define	KLSTRUCT_HUB_TTY	23
#define	KLSTRUCT_IOC3_TTY	24
/* new IP35 values */
#define	KLSTRUCT_FIBERCHANNEL	25
#define	KLSTRUCT_MOD_SERIAL_NUM	26
#define	KLSTRUCT_IOC3MS		27
#define	KLSTRUCT_TPU		28
#define	KLSTRUCT_GSN		29
#define	KLSTRUCT_GSN_AUX	30
#define	KLSTRUCT_XTHD		31
#define	KLSTRUCT_QLFIBRE	32
#define	KLSTRUCT_FIREWIRE	33
#define	KLSTRUCT_USB		34
#define	KLSTRUCT_USBKBD		35
#define	KLSTRUCT_USBMS		36
#define	KLSTRUCT_SCSI2		37
#define	KLSTRUCT_PEBRICK	38
#define	KLSTRUCT_GIGENET	39
#define	KLSTRUCT_IDE		40
/* new IP53 values */
#define	KLSTRUCT_IOC4		41
#define	KLSTRUCT_IOC4UART	42
#define	KLSTRUCT_IOC4_TTY	43
#define	KLSTRUCT_IOC4PCKM	44
#define	KLSTRUCT_IOC4MS		45
#define	KLSTRUCT_IOC4_ATA	46
#define	KLSTRUCT_VGAGFX		47

typedef struct klport_s {
	int16_t		port_nasid;
	unsigned char	port_flag;
	klconf_off_t	port_offset;
} klport_t;

/* KLSTRUCT_CPU: CPU component info */
typedef struct klcpu_s {
	klinfo_t	cpu_info;
	uint16_t	cpu_prid;	/* Processor PRID value */
	uint16_t	cpu_fpirr;	/* IP27: FPU IRR value */
					/* IP35: mode information (?) */
	uint16_t	cpu_speed;	/* Speed in MHZ */
	uint16_t	cpu_scachesz;	/* secondary cache size in MB */
	uint16_t	cpu_scachespeed;/* secondary cache speed in MHz */
} klcpu_t;

/* KLSTRUCT_HUB: Hub */
typedef struct klhub_s {
	klinfo_t	hub_info;
	uint32_t	hub_flags;	/* PCFG_HUB_xxx flags */
	klport_t	hub_port;	/* hub is connected to this */
	uint64_t	hub_box_nic;	/* nic of containing box */
	klconf_off_t	hub_mfg_nic;	/* MFG NIC string */
	uint64_t	hub_speed;	/* Speed of hub in HZ */
} klhub_t;

/* KLSTRUCT_MEMBNK: Memory bank */
#define	MD_MEM_BANKS_M	8	/* M-Mode */
typedef struct klmembnk_m_s {
	klinfo_t	membnk_info;
	int16_t		membnk_memsz;		/* Total memory in megabytes */
	int16_t		membnk_dimm_select;	/* bank to phys addr mapping*/
	int16_t		membnk_bnksz[MD_MEM_BANKS_M]; /* Memory bank sizes */
	int16_t		membnk_attr;		/* directory memory, per bank */
} klmembnk_m_t;

#define	MD_MEM_BANKS_N	4	/* N-Mode */
typedef struct klmembnk_n_s {
	klinfo_t	membnk_info;
	int16_t		membnk_memsz;		/* Total memory in megabytes */
	int16_t		membnk_dimm_select;	/* bank to phys addr mapping*/
	int16_t		membnk_bnksz[MD_MEM_BANKS_N]; /* Memory bank sizes */
	int16_t		membnk_attr;		/* directory memory, per bank */
} klmembnk_n_t;

/* KLSTRUCT_XBOW: Xbow */
#define	MAX_XBOW_LINKS	16
typedef struct klxbow_s {
	klinfo_t	xbow_info;
	klport_t	xbow_port_info[MAX_XBOW_LINKS];	/* Module number */
	int		xbow_hub_master_link;
} klxbow_t;

/* xbow_port_info.port_flag bits */
#define	XBOW_PORT_IO		0x01
#define	XBOW_PORT_HUB		0x02
#define	XBOW_PORT_ENABLE	0x04

/* KLSTRUCT_SCSI: SCSI Bus, or single-bus SCSI Controller */
#define	MAX_SCSI_DEVS	16
typedef struct klscsi_s {
	klinfo_t	scsi_info;
	uint64_t	scsi_specific;
	uint8_t		scsi_numdevs;
	klconf_off_t	scsi_devinfo[MAX_SCSI_DEVS];
} klscsi_t;

/* KLSTRUCT_IOC3: Basic I/O Controller */
typedef struct klioc3_s {
	klinfo_t	ioc3_info;
	unsigned char	ioc3_ssram;	/* Info about ssram */
	unsigned char	ioc3_nvram;	/* Info about nvram */
	klconf_off_t	ioc3_tty_off;
	klconf_off_t	ioc3_kbd_off;
	klinfo_t	ioc3_superio;	/* Info about superio */
	klinfo_t	ioc3_enet;
	klconf_off_t	ioc3_enet_off;
} klioc3_t;

/* KLSTRUCT_IOC3_TTY: IOC3 attached TTY */
typedef struct klttydev_s {
	klinfo_t	ttydev_info;
	struct terminal_data *ttydev_cfg;	/* driver fills up this */
} klttydev_t;

/* KLSTRUCT_SCSI2: SCSI Controller */
typedef struct klscctl_s {
	klinfo_t	scsi_info;
	uint		type;
	uint		scsi_buscnt;
	uint64_t	scsi_bus[2];
} klscctl_t;

/* ========== */

#define IP27_NMI(n) \
	IP27_UNCAC_ADDR(nmi_t *, n, IP27_KLD_NMI(n)->offset)

#define	NMI_MAGIC	0x0048414d4d455201	/* \x00HAMMER\x01 */

typedef struct nmi {
	uint64_t	magic;			/* NMI_MAGIC */
	uint64_t	flags;
	uint64_t	cb;			/* callback function */
	uint64_t	cb_complement;		/* two's complement of above */
	uint64_t	cb_arg;			/* callback arg */
	uint64_t	master;			/* nonzero if master node */
} nmi_t;

/* ========== */

#define IP27_GDA(n)		(gda_t *)(IP27_KLD_GDA(n)->pointer)
#define IP27_GDA_SIZE(n)	(IP27_KLD_GDA(n)->size)

#define	GDA_MAGIC	0x58464552		/* XFER */

#define	GDA_MAXNODES	128

typedef struct gda {
	uint32_t	 magic;			/* GDA_MAGIC */
	uint16_t	 ver;
	uint16_t	 masternasid;		/* NASID of the master cpu */
	uint32_t	 promop;		/* Request to pass to PROM */
	uint32_t	 switches;
	void		*tlb_handlers[3];
	uint		 partid;
	uint		 symcnt;
	void		*symtab;
	char		*symnames;
	void		*replication_mask;
	uint32_t	 pad[14];
	int16_t		 nasid[GDA_MAXNODES];	/* NASID of connected nodes */
} gda_t;

#define	GDA_PROMOP_MAGIC	0x0ead0000
/* commands */
#define	GDA_PROMOP_HALT		0x00000010
#define	GDA_PROMOP_POWERDOWN	0x00000020
#define	GDA_PROMOP_RESTART	0x00000030
#define	GDA_PROMOP_REBOOT	0x00000040
#define	GDA_PROMOP_EIM		0x00000050
/* options */
#define	GDA_PROMOP_NO_DIAGS	0x00000100	/* don't run diagnostics */
#define	GDA_PROMOP_NO_MEMINIT	0x00000200	/* don't initialize memory */
#define	GDA_PROMOP_NO_DEVINIT	0x00000400	/* don't initialize devices */

/* ========== */

/*
 * Functions.
 */

console_t *kl_get_console(void);
void	kl_init(int);
int	kl_scan_all_nodes(uint, int (*)(lboard_t *, void *), void *);
int	kl_scan_node(int, uint, int (*)(lboard_t *, void *), void *);
#define	KLBRD_ANY	0
int	kl_scan_board(lboard_t *, uint, int (*)(klinfo_t *, void *), void *);
#define	KLSTRUCT_ANY	((uint)~0)
void	kl_get_location(klinfo_t *, struct sgi_device_location *);
void	kl_get_console_location(console_t *, struct sgi_device_location *);

/* widget number of the XBow `hub', for each node */
extern int kl_hub_widget[GDA_MAXNODES];

extern int kl_n_mode;
extern u_int kl_n_shift;
extern klinfo_t *kl_glass_console;
extern gda_t *gda;
extern uint maxnodes;

#endif /* _MACHINE_MNODE_H_ */
@


1.17
log
@Rename a few xbow global variable names to make them less ambiguous.
Remember the hub widget number of each node, instead of only the master node.
Use this in xbridge to compute the proper direct DMA map configuration
register value (it needs to embed the hub widget number matching the
physical address range).
This should allow us to pick memory from a different node than the one
we booted from, as the DMA window, if wanted.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.16 2011/03/23 16:54:36 pirofti Exp $ */
d483 3
@


1.16
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.15 2010/04/06 19:09:44 miod Exp $ */
d67 5
@


1.15
log
@Add more KL grovelling routines: one routine to enumerate on all nodes,
and routines to turn a KL console and a KL component structs, respectively,
into struct sgi_device_location for further device identification.

XXX Due to the way PCI devices are numbered on PIC buses, this code is tainted
XXX by knowledge about PIC widgets, to compensate. I have considered changing
XXX xbridge(4) to have our PCI device numbering match KL on PIC-connected
XXX devices, but I expect this to be even uglier. This is not settled yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.14 2010/03/21 13:52:03 miod Exp $ */
d29 2
a30 2
#ifndef __MACHINE_MNODE_H__
#define __MACHINE_MNODE_H__
d485 1
a485 1
#endif /* __MACHINE_MNODE_H__ */
@


1.14
log
@Update KL structure definitions to match IP35 use of previously unused fields.
No functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.13 2010/03/07 13:42:15 miod Exp $ */
d471 1
a471 1
void	kl_scan_config(int, int16_t);
d476 2
d482 2
@


1.13
log
@On Origin-like systems, get glass console information (if any) from the
fake ARCBios component structures associated to the KL configuration.
The ARCBios data tells us if the device is the output console, and the
KL component data tells us its node and widget numbers.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.12 2010/01/09 20:33:16 miod Exp $ */
d156 3
a158 2
	unsigned char	brd_slot;	/* slot number */
	unsigned short	brd_debugsw;	/* Debug switches */
d182 2
d191 1
d193 21
a213 6
#define	IP27_BT_MASK	0x0f
#define	IP27_BT_CPU	0x01
#define	IP27_BT_BASEIO	0x01
#define	IP27_BT_MPLANE8	0x01

#define	IP27_BRD_BASEIO		(IP27_BC_IO | IP27_BT_BASEIO)
d222 8
a229 1

d233 22
a254 18
	unsigned char	struct_type;	  /* type of this structure */
	unsigned char	struct_version;   /* version of this structure */
	unsigned char	flags;		  /* Enabled, disabled etc */
	unsigned char	revision;	  /* component revision */
	unsigned short	diagval;	  /* result of diagnostics */
	unsigned short	diagparm;	  /* diagnostic parameter */
	unsigned char	inventory;	  /* previous inventory status */
	uint64_t	nic;		  /* Must be aligned properly */
	unsigned char	physid;		  /* physical id of component */
	unsigned int	virtid;		  /* virtual id as seen by system */
	unsigned char	widid;		  /* Widget id - if applicable */
	int16_t		nasid;		  /* node number - from parent */
	char		pad1;		  /* pad out structure. */
	char		pad2;		  /* pad out structure. */
	void		*arcs_compt;	  /* ptr to the arcs struct for ease*/
	klconf_off_t	errinfo;	  /* component specific errors */
	unsigned short	pad3;		  /* pci fields have moved over to */
	unsigned short	pad4;		  /* klbri_t */
d257 3
a285 1
#define	KLSTRUCT_UNUSED		20
d295 2
a296 2
#define	KLSTRUCT_GSN_A		29
#define	KLSTRUCT_GSN_B		30
d307 8
d326 2
a327 1
	uint16_t	cpu_fpirr;	/* FPU IRR value */
d350 1
a350 1
	int16_t		membnk_attr;
d359 1
a359 1
	int16_t		membnk_attr;
d375 9
d389 2
a391 1
	klconf_off_t	ioc3_tty_off;
a393 1
	klconf_off_t	ioc3_kbd_off;
d402 8
d471 1
a471 1
void	kl_scan_config(int);
@


1.12
log
@Define struct cpu_hwinfo, to hold hardware specific information about each
processor (instead of sys_config.cpu[]), and pass it in the attach_args
when attaching cpu devices.

This allows per-cpu information to be gathered late in the bootstrap process,
and not be limited by an arbitrary MAX_CPUS limit; this will suit IP27 and
IP35 systems better.

While there, use this information to make sure delay() uses the speed
information from the cpu it is invoked on.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.11 2009/10/16 00:15:48 miod Exp $ */
d421 1
@


1.11
log
@Get serial console speed from prom, and use it instead of hardcoding 9600 bps,
on all systems but O2 (to catch up soon). Also use the IOC4 MCR register to
figure out the IOC4 clock, instead of checking the widget control register,
to be consistent with iof(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.10 2009/10/08 19:11:57 miod Exp $ */
a413 1
void	kl_scan_done(void);
@


1.10
log
@Recognize more brick types and probe fooX bricks in the same order as
foo bricks (they differ by having PCI-X bridges instead of PCI bridges
but are otherwise built the same)
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.9 2009/07/11 19:56:02 miod Exp $ */
d411 1
a411 1
vaddr_t	kl_get_console_base(void);
@


1.9
log
@When rebooting, pass a request to the PROM for it to skip diagnostics and
memory initialization. This reduces memory test and initialization time
from a "in soviet russia, memory test you" time of over 2 minutes for 1GB
on Origin 200, to a more reasonable 12 seconds (and on a Fuel with 2GB,
time goes down from 6 seconds to under a second).
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.8 2009/07/06 22:46:40 miod Exp $ */
d198 5
@


1.8
log
@Almost rewrite xbridge PCI resource allocation:
- introduce an interface for widget drivers to ask the xbow to map arbitrary
  views of their address space, in addition to the low 16MB. This operation
  may fail or map a subset range of what the caller asked for, depending on
  the platform we're running on.
- use this in xbridge to set up views on the direct memory and i/o spaces,
  to map devices resources when they don't fit in one of the devio small
  ranges (limited to 2MB anyway). These views are only allocated when
  devio can't do the job, so as not to consume too many resources on
  Origin family systems where such views are scarce resources (and
  shared accross the whole crossbow).

This makes pci devices with large resource needs configure correctly.

While there, fix programming of 64 bit memory BAR; this makes bge(4)
work.

Tested on Octane (with Bridge revision < 4 and >= 4), Origin 200 (Bridge >= 4)
and Fuel (XBridge).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.7 2009/06/13 18:47:30 miod Exp $ */
d376 1
a376 1
	uint32_t	 promop;
d387 12
@


1.7
log
@Figure out which nodes are connected, and use all of their memory for now;
other hardware resources will follow shortly.
Tested on a dual-Origin 200 setup.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.6 2009/06/13 16:28:09 miod Exp $ */
d395 1
a395 1
void	kl_init(uint64_t);
@


1.6
log
@Shuffle and rename HUB defines for consistency, no functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.5 2009/05/28 18:02:41 miod Exp $ */
d33 2
a34 2
 *  Definitions for Nodes set up in M-Mode. Some stuff here
 *  inspired by information gathered from Linux source code.
d43 2
a44 2
 *  IP27 uses XKPHYS space for accessing special objects.
 *  Note that IP27_UNCAC_BASE is a linear space without specials.
d52 2
a53 2
 *  Macros used to find the base of each nodes address space.
 *  In M mode each node space is 4GB; in N mode each node space is 2GB only.
d58 5
a62 5
#define IP27_NODE_CAC_BASE(node)       (IP27_NODE_BASE(IP27_CAC_BASE, node))
#define IP27_NODE_HSPEC_BASE(node)     (IP27_NODE_BASE(IP27_HSPEC_BASE, node))
#define IP27_NODE_IO_BASE(node)        (IP27_NODE_BASE(IP27_IO_BASE, node))
#define IP27_NODE_MSPEC_BASE(node)     (IP27_NODE_BASE(IP27_MSPEC_BASE, node))
#define IP27_NODE_UNCAC_BASE(node)     (IP27_NODE_BASE(IP27_UNCAC_BASE, node))
d69 2
a70 2
 *  IP27 platforms uses something called kldir to describe each
 *  nodes configuration. Directory entries looks like:
d75 7
a81 9
	uint64_t	magic;
        off_t           offset;	/* Offset from start of node space  */
        void		*pointer;
        size_t          size;	/* Size in bytes                    */
        uint64_t	count;	/* Number of entries if array, 1 if not  */
        size_t          stride;         /* Stride if array, 0 if not        */
        char            rsvd[16];       /* Pad entry to 0x40 bytes          */
        /* NOTE: These 16 bytes are used in the Partition KLDIR
           entry to store partition info. Refer to klpart.h for this. */
d97 2
d100 2
a101 2
 *  KLCONFIG is a linked list of data structures describing the
 *  system configuration. 
d120 3
a122 3
        klconf_off_t km_base;
        klconf_off_t km_limit;
        klconf_off_t km_current;
d125 1
a125 1
/*  KLCONFIG header addressed by IP27_KLCONFIG_HDR(node) */
d130 9
a138 9
	uint64_t	magic;       /* set this to KLCFGINFO_MAGIC */
        uint32_t	version;    /* structure version number */
        klconf_off_t	malloc_hdr_off; /* offset of ch_malloc_hdr */
        klconf_off_t	cons_off;       /* offset of ch_cons */
        klconf_off_t	board_info;  /* the link list of boards */
        console_t	cons_info;   /* address info of the console */
        klc_malloc_hdr_t malloc_hdr[3];
        confidence_t	sw_belief;   /* confidence that software is bad*/
        confidence_t	sn0net_belief; /* confidence that sn0net is bad */
d159 5
a163 5
	char	        brd_partition;	/* Partition number */
	unsigned short  brd_diagval;	/* diagnostic value */
	unsigned short  brd_diagparm;	/* diagnostic parameter */
	unsigned char   brd_inventory;	/* inventory history */
	unsigned char   brd_numcompts;	/* Number of components */
d166 2
a167 2
	klconf_off_t    brd_compts[MAX_COMPTS_PER_BRD]; /* COMPONENTS */
	klconf_off_t    brd_errinfo;	/* Board's error information */
d201 19
a219 19
typedef struct klinfo_s {                  /* Generic info */
	unsigned char   struct_type;       /* type of this structure */
	unsigned char   struct_version;    /* version of this structure */
	unsigned char   flags;            /* Enabled, disabled etc */
	unsigned char   revision;         /* component revision */
	unsigned short  diagval;          /* result of diagnostics */
	unsigned short  diagparm;         /* diagnostic parameter */
	unsigned char   inventory;        /* previous inventory status */
	uint64_t	nic;              /* Must be aligned properly */
	unsigned char   physid;           /* physical id of component */
	unsigned int    virtid;           /* virtual id as seen by system */
	unsigned char   widid;            /* Widget id - if applicable */
	int16_t         nasid;            /* node number - from parent */
	char            pad1;             /* pad out structure. */
	char            pad2;             /* pad out structure. */
	void       *arcs_compt;      /* ptr to the arcs struct for ease*/
	klconf_off_t    errinfo;          /* component specific errors */
	unsigned short  pad3;             /* pci fields have moved over to */
	unsigned short  pad4;             /* klbri_t */
d280 4
a283 4
	uint16_t	cpu_prid;       /* Processor PRID value */
	uint16_t	cpu_fpirr;      /* FPU IRR value */
	uint16_t	cpu_speed;      /* Speed in MHZ */
	uint16_t	cpu_scachesz;   /* secondary cache size in MB */
d304 1
a304 1
        int16_t		membnk_attr;
d313 1
a313 1
        int16_t		membnk_attr;
d343 1
a343 1
	klinfo_t        ttydev_info;
d347 4
a350 3
/*  KLNMI header addressed by IP27_KLNMI_HDR(node) */
#define IP27_KLNMI_HDR(n) \
	IP27_UNCAC_ADDR(kl_nmi_t *, n, IP27_KLD_NMI(n)->offset)
d354 1
a354 1
typedef struct kl_nmi {
d361 28
a388 1
} kl_nmi_t;
d391 1
a391 1
 *  Functions.
@


1.5
log
@Handle NMI interrupts on IP27/IP35, gives us a change to play with ddb,
and then restart system (NMI on these systems aren't intended to be
recoverable).
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.4 2009/05/27 19:00:15 miod Exp $ */
d40 1
a40 1
#define	IP27_CAC_BASE	0xa800000000000000	/* Cached space */
d46 4
a49 4
#define	IP27_HSPEC_BASE	0x9000000000000000	/* Hub Special space */
#define	IP27_IO_BASE	0x9200000000000000	/* I/O space */
#define	IP27_MSPEC_BASE	0x9400000000000000	/* Memory Special space */
#define	IP27_UNCAC_BASE	0x9600000000000000	/* Uncached space */
d53 1
a53 1
 *  In M mode each node space is 4GB.
d55 2
a56 3
#define IP27_NODE_BASE(space, node) (space + ((long)(node) << 32))
#define	OP27_NODE_SIZE		0x00000000100000000ULL
#define	IP27_NODE_SIZE_MASK	0x000000000ffffffffULL
a361 55

/*                            H U B                    */
/*                            =====                    */
/*
 *  HUB access macros.
 */
#define	BWIN_SIZE_BITS		29
#define	BWIN_INDEX_BITS		3
#define	BWIN_SIZE		(1ULL << BWIN_SIZE_BITS)
#define	BWIN_SIZEMASK		(BWIN_SIZE - 1)
#define	BWIN_WIDGET_MASK	0x7

#define	LWIN_SIZE_BITS		24
#define	LWIN_SIZE		(1ULL << LWIN_SIZE_BITS)
#define	LWIN_SIZEMASK		(LWIN_SIZE - 1)
#define	LWIN_WIDGET_MASK	0xF

#define	RAW_NODE_LWIN_BASE(nasid, widget)                               \
        (IP27_NODE_IO_BASE(nasid) + ((uint64_t)(widget) << LWIN_SIZE_BITS))

#define	NODE_BWIN_BASE0(nasid)  (IP27_NODE_IO_BASE(nasid) + BWIN_SIZE)
#define	NODE_BWIN_BASE(nasid, bigwin)   (NODE_BWIN_BASE0(nasid) +       \
                        ((uint64_t)(bigwin) << BWIN_SIZE_BITS))

#define	NODE_LWIN_BASE(nasid, widget)					\
	((widget == 0) ? NODE_BWIN_BASE((nasid), 6)			\
			: RAW_NODE_LWIN_BASE(nasid, widget))


#define	IP27_LHUB_ADDR(_x) \
	((volatile uint64_t *)(NODE_LWIN_BASE(0, 1) + (_x)))
#define	IP27_RHUB_ADDR(_n, _x) \
	((volatile uint64_t *)(NODE_LWIN_BASE(_n, 1) + 0x800000 + (_x)))
#define	IP27_RHUB_PI_ADDR(_n, _sn, _x) \
	((volatile uint64_t *)(NODE_LWIN_BASE(_n, 1) + 0x800000 + (_x)))

#define	IP27_LHUB_L(r)			*(IP27_LHUB_ADDR(r))
#define	IP27_LHUB_S(r, d)		*(IP27_LHUB_ADDR(r)) = (d)
#define	IP27_RHUB_L(n, r)		*(IP27_RHUB_ADDR((n), (r))
#define	IP27_RHUB_S(n, r, d)		*(IP27_RHUB_ADDR((n), (r)) = (d)
#define IP27_RHUB_PI_L(n, s, r)		*(IP27_RHUB_PI_ADDR((n), (s), (r)))
#define	IP27_RHUB_PI_S(n, s, r, d)	*(IP27_RHUB_PI_ADDR((n), (s), (r))) = (d)


/* HUB I/O registers */
#define	PI_REGION_PRESENT       0x000018
#define	PI_CALIAS_SIZE          0x000028
#define		PI_CALIAS_SIZE_0	0


/* HUB network interface */
#define	NI_STATUS_REV_ID	0x600000

#define	NSRI_MORENODES_MASK	(1ULL << 18)	/* Mnodes  */

d367 1
a367 1
void	kl_init(void);
d375 2
a376 1
int	kl_n_mode;
@


1.4
log
@Rework KL board and component enumeration, to allow it to be used from
drivers with callback routines. While there, skip disabled or failed
components.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.3 2009/05/06 20:08:44 miod Exp $ */
d347 15
@


1.3
log
@Workaround a bridge deadlock, as advised by comments found in the linux sn1
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.2 2009/05/02 21:26:00 miod Exp $ */
d148 1
d177 3
d195 5
d223 3
a225 1
#define KLCONFIG_INFO_ENABLED(_i)       ((_i)->flags & KLINFO_ENABLE)
d227 1
a227 7
 * Component structures.
 * Following are the currently identified components:
 *  CPU, HUB, MEM_BANK,
 *  XBOW(consists of 16 WIDGETs, each of which can be HUB or GRAPHICS or BRIDGE)
 *  BRIDGE, IOC3, SuperIO, SCSI, FDDI
 *  ROUTER
 *  GRAPHICS
d249 1
a249 1
#define	KLSTRUCT_UNUSED		20 /* XXX UNUSED */
d254 17
d407 2
d410 5
a414 1
vaddr_t	kl_get_console_base(void);
@


1.2
log
@More KL configuration structures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mnode.h,v 1.1 2009/04/13 21:17:54 miod Exp $ */
d366 2
a367 2
#define IP27_RHUB_PI_L(n, s, r)		*(IP27_RHUB_PI_ADDR((n), (s), (r))
#define	IP27_RHUB_PI_S(n, s, r, d)	*(IP27_RHUB_PI_ADDR((n), (s), (r)) = (d)
@


1.1
log
@The start of Origin 200 support. Based on some code contributed by pefo@@
some years ago for KL enumeration, building on the existing XBow support
to limit ourselves to a single node for now.

This is a work-in-progress; it currently lacks complete interrupt code,
as well as PCI resource management. And there are likely bugs creeping
inside.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d294 13
@

