head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2015.07.08.13.37.31;	author dlg;	state Exp;
branches;
next	1.8;
commitid	Ds9kNjjKbF4CbIsT;

1.8
date	2015.04.21.01.31.51;	author dlg;	state Exp;
branches;
next	1.7;
commitid	MPAfPnneafy9UNX1;

1.7
date	2014.02.10.20.30.05;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.28.06.55.27;	author syuu;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.04.02.26.24;	author syuu;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.14.17.32.15;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.05.12.06.20;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.01.18.59.40;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@unify the mutex implementations on all the mips64 platforms.

this basically copies the sgi implementation to mips64 and removes
it from the rest. this way they get an optimised UP mutex implementation
and correct asserts on all platforms.

ok miod@@ jmatthew@@
@
text
@/*	$OpenBSD: mutex.h,v 1.8 2015/04/21 01:31:51 dlg Exp $	*/

#include <mips64/mutex.h>
@


1.8
log
@rework sgi mutexes to use the owner pointer as the lock.

this is like src/sys/arch/alpha/alpha/mutex.c r1.14.

this changes sgi mutexes so they record which cpu owns the lock
rather than just if the lock is held or not. the diagnostics compare
the owner to the current cpus curcpu() address so they can actually
tell if the current cpu holds the lock instead of whether any cpu
holds the lock.

instead of using custom asm to implement a cas this uses atomic_cas_ptr.

while im here i also shuffled the code. on MULTIPROCESSOR systems
instead of duplicating code between mtx_enter and mtx_enter_try,
mtx_enter simply loops on mtx_enter_try until it succeeds.

this also provides an alternative implementation of mutexes on
!MULTIPROCESSOR systems that avoids interlocking opcodes. mutexes
wont contend on UP boxes, theyre basically wrappers around spls.
we can just do the splraise, stash the owner as a guard value for
DIAGNOSTIC and return. similarly, mtx_enter_try on UP will never
fail, so we can just call mtx_enter and return 1.

tested by and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.7 2014/02/10 20:30:05 kettenis Exp $	*/
d3 1
a3 71
/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#ifndef _MACHINE_MUTEX_H_
#define _MACHINE_MUTEX_H_

struct mutex {
	void *mtx_owner;
	int mtx_wantipl;
	int mtx_oldipl;
};

/*
 * To prevent lock ordering problems with the kernel lock, we need to
 * make sure we block all interrupts that can grab the kernel lock.
 * The simplest way to achieve this is to make sure mutexes always
 * raise the interrupt priority level to the highest level that has
 * interrupts that grab the kernel lock.
 */
#ifdef MULTIPROCESSOR
#define __MUTEX_IPL(ipl) \
    (((ipl) > IPL_NONE && (ipl) < IPL_TTY) ? IPL_TTY : (ipl))
#else
#define __MUTEX_IPL(ipl) (ipl)
#endif

#define MUTEX_INITIALIZER(ipl) { NULL, __MUTEX_IPL((ipl)), IPL_NONE }

void __mtx_init(struct mutex *, int);
#define mtx_init(mtx, ipl) __mtx_init((mtx), __MUTEX_IPL((ipl)))

#ifdef DIAGNOSTIC
#define MUTEX_ASSERT_LOCKED(mtx) do {					\
	if ((mtx)->mtx_owner != curcpu())				\
		panic("mutex %p not held in %s", (mtx), __func__);	\
} while (0)

#define MUTEX_ASSERT_UNLOCKED(mtx) do {					\
	if ((mtx)->mtx_owner == curcpu())				\
		panic("mutex %p held in %s", (mtx), __func__);		\
} while (0)
#else
#define MUTEX_ASSERT_LOCKED(mtx) do { } while (0)
#define MUTEX_ASSERT_UNLOCKED(mtx) do { } while (0)
#endif

#define MUTEX_OLDIPL(mtx)	(mtx)->mtx_oldipl

#endif
@


1.7
log
@To prevent lock ordering problems with the kernel lock, we need to make sure
we block all interrupts that can grab the kernel lock.  The simplest way to
achieve this is to make sure mutexes always raise the ipl to the highest
level that has interrupts that grab the kernel lock.  This will allow us
to have "mpsafe" interrupt handlers at lower priority levels.

No change for non-MULTIPROCESSOR kernels.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.6 2009/12/28 06:55:27 syuu Exp $	*/
d32 1
a32 1
	int mtx_lock;
a34 1
	void *mtx_owner;
d51 1
a51 1
#define MUTEX_INITIALIZER(ipl) { 0, __MUTEX_IPL((ipl)), IPL_NONE }
d58 1
a58 1
	if ((mtx)->mtx_lock == 0)					\
d63 1
a63 1
	if ((mtx)->mtx_lock != 0)					\
@


1.6
log
@MP-safe pmap implemented, enable IPI in interrupt handler to avoid deadlock.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.5 2009/11/04 02:26:24 syuu Exp $	*/
d38 15
a52 1
void mtx_init(struct mutex *, int);
d54 2
a55 1
#define MUTEX_INITIALIZER(ipl) { 0, (ipl), IPL_NONE }
@


1.5
log
@MP safe mutex.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.4 2009/10/22 22:08:54 miod Exp $	*/
a30 3
/*
 * Simple non-mp implementation.
 */
@


1.4
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.3 2007/05/14 17:32:15 miod Exp $	*/
d38 1
@


1.3
log
@Oops, IPL_NONE is not zero in HEAD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.2 2007/05/05 12:06:20 miod Exp $	*/
d37 1
a37 1
	int mtx_oldcpl;
d59 1
a59 1
#define MUTEX_OLDIPL(mtx)	(mtx)->mtx_oldcpl
@


1.2
log
@Define MUTEX_OLDIPL where they were missing, will be used (reasonably) shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.1 2007/05/01 18:59:40 miod Exp $	*/
d42 1
a42 1
#define MUTEX_INITIALIZER(ipl) { 0, (ipl), 0 }
@


1.1
log
@Simple monoprocessor mutex implementation, faster than the MI code, four left
to go.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 2
@

