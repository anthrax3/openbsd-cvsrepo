head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.12
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.10
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.16
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.7.0.2
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.06.16.18.24.38;	author miod;	state Exp;
branches;
next	1.14;
commitid	GYwJoWxw2NUyueuh;

1.14
date	2014.08.19.19.04.07;	author miod;	state Exp;
branches;
next	1.13;
commitid	Bqi6dmJx3KoUAcSD;

1.13
date	2011.04.05.01.17.41;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.13.20.45.51;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.26.20.16.19;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.22.19.55.45;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.07.04.17.48;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.18.19.31.59;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.06.22.46.43;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.24.17.33.12;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.14.21.10.33;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.06.20.08.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.03.19.44.28;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.02.21.30.13;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.22.47.40;	author miod;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Clear the PIC `write request' memory at initialization time. There is
apparently a risk of spurious parity errors if we don't.
@
text
@/*	$OpenBSD: xbridgereg.h,v 1.14 2014/08/19 19:04:07 miod Exp $	*/

/*
 * Copyright (c) 2008, 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * IP27/IP30/IP35 Bridge and XBridge Registers
 * IP35 PIC Registers
 */

#define	BRIDGE_REGISTERS_SIZE		0x00030000
#define	BRIDGE_BUS_OFFSET		0x00800000

#define	BRIDGE_NBUSES				1
#define	PIC_NBUSES				2

#define	BRIDGE_NSLOTS				8
#define	PIC_NSLOTS				4
#define	MAX_SLOTS				BRIDGE_NSLOTS

#define	BRIDGE_NINTRS				8

#define	PIC_WIDGET_STATUS_PCIX_SPEED_MASK	0x0000000c00000000UL
#define	PIC_WIDGET_STATUS_PCIX_SPEED_SHIFT	34
#define	PIC_WIDGET_STATUS_PCIX_MODE		0x0000000200000000UL

#define	PIC_WIDGET_CONTROL_NO_SNOOP		0x4000000000000000UL
#define	PIC_WIDGET_CONTROL_RELAX_ORDER		0x2000000000000000UL
#define	BRIDGE_WIDGET_CONTROL_IO_SWAP		0x00800000
#define	BRIDGE_WIDGET_CONTROL_MEM_SWAP		0x00400000
#define	BRIDGE_WIDGET_CONTROL_LARGE_PAGES	0x00200000
#define	BRIDGE_WIDGET_CONTROL_SPEED_MASK	0x00000030
#define	BRIDGE_WIDGET_CONTROL_SPEED_SHIFT	4

/* Response Buffer Address */
#define	BRIDGE_WIDGET_RESP_UPPER	0x00000060
#define	BRIDGE_WIDGET_RESP_LOWER	0x00000068

/*
 * DMA Direct Window
 *
 * The direct map register allows the 2GB direct window to map to
 * a given widget address space. The upper bits of the XIO address,
 * identifying the node to access, are provided in the low-order
 * bits of the register.
 */

#define	BRIDGE_DIR_MAP			0x00000080

#define	BRIDGE_DIRMAP_WIDGET_SHIFT		20
#define	BRIDGE_DIRMAP_ADD_512MB			0x00020000	/* add 512MB */
#define	BRIDGE_DIRMAP_BASE_MASK			0x0001ffff
#define	BRIDGE_DIRMAP_BASE_SHIFT		31

#define	BRIDGE_PCI0_MEM_SPACE_BASE		0x0000000040000000ULL
#define	BRIDGE_PCI_MEM_SPACE_LENGTH		0x0000000040000000ULL
#define	BRIDGE_PCI1_MEM_SPACE_BASE		0x00000000c0000000ULL
#define	BRIDGE_PCI_IO_SPACE_BASE		0x0000000100000000ULL
#define	BRIDGE_PCI_IO_SPACE_LENGTH		0x0000000100000000ULL

#define	BRIDGE_NIC			0x000000b0

#define	BRIDGE_BUS_TIMEOUT		0x000000c0
#define	BRIDGE_BUS_PCI_RETRY_CNT_SHIFT			0
#define	BRIDGE_BUS_PCI_RETRY_CNT_MASK		0x000003ff
#define	BRIDGE_BUS_GIO_TIMEOUT			0x00001000
#define	BRIDGE_BUS_PCI_RETRY_HOLD_SHIFT			16
#define	BRIDGE_BUS_PCI_RETRY_HOLD_MASK		0x001f0000

#define	BRIDGE_PCI_CFG			0x000000c8
#define	BRIDGE_PCI_ERR_UPPER		0x000000d0
#define	BRIDGE_PCI_ERR_LOWER		0x000000d8

/*
 * Interrupt handling
 */

#define	BRIDGE_ISR			0x00000100
#define	BRIDGE_IER			0x00000108
#define	BRIDGE_ICR			0x00000110
#define	BRIDGE_INT_MODE			0x00000118
#define	BRIDGE_INT_DEV			0x00000120
#define	BRIDGE_INT_HOST_ERR		0x00000128
#define	BRIDGE_INT_ADDR(d)		(0x00000130 + 8 * (d))
/* the following two are XBridge-only */
#define	BRIDGE_INT_FORCE_ALWAYS(d)	(0x00000180 + 8 * (d))
#define	BRIDGE_INT_FORCE_PIN(d)		(0x000001c0 + 8 * (d))

/*
 * BRIDGE_ISR bits (bits 32 and beyond are PIC only)
 */

/* PCI-X split completion message parity error */
#define	BRIDGE_ISR_PCIX_SPLIT_MSG_PARITY	0x0000200000000000ULL
/* PCI-X split completion error message */
#define	BRIDGE_ISR_PCIX_SPLIT_EMSG		0x0000100000000000ULL
/* PCI-X split completion timeout */
#define	BRIDGE_ISR_PCIX_SPLIT_TO		0x0000080000000000ULL
/* PCI-X unexpected completion cycle */
#define	BRIDGE_ISR_PCIX_UNEX_COMP		0x0000040000000000ULL
/* internal RAM parity error */
#define	BRIDGE_ISR_INT_RAM_PERR			0x0000020000000000ULL
/* PCI/PCI-X arbitration error */
#define	BRIDGE_ISR_PCIX_ARB_ERR			0x0000010000000000ULL
/* PCI-X read request timeout */
#define	BRIDGE_ISR_PCIX_REQ_TMO			0x0000008000000000ULL
/* PCI-X target abort */
#define	BRIDGE_ISR_PCIX_TABORT			0x0000004000000000ULL
/* PCI-X PERR */
#define	BRIDGE_ISR_PCIX_PERR			0x0000002000000000ULL
/* PCI-X SERR */
#define	BRIDGE_ISR_PCIX_SERR			0x0000001000000000ULL
/* PCI-X PIO retry counter exceeded */
#define	BRIDGE_ISR_PCIX_MRETRY			0x0000000800000000ULL
/* PCI-X master timeout */
#define	BRIDGE_ISR_PCIX_MTMO			0x0000000400000000ULL
/* PCI-X data cycle parity error */
#define	BRIDGE_ISR_PCIX_D_PARITY		0x0000000200000000ULL
/* PCI-X address or attribute cycle parity error */
#define	BRIDGE_ISR_PCIX_A_PARITY		0x0000000100000000ULL
/* multiple errors occured - bridge only */
#define	BRIDGE_ISR_MULTIPLE_ERR			0x0000000080000000ULL
/* PMU access fault */
#define	BRIDGE_ISR_PMU_ESIZE_FAULT		0x0000000040000000ULL
/* unexpected xtalk incoming response */
#define	BRIDGE_ISR_UNEXPECTED_RESP		0x0000000020000000ULL
/* xtalk incoming response framing error */
#define	BRIDGE_ISR_BAD_XRESP_PACKET		0x0000000010000000ULL
/* xtalk incoming request framing error */
#define	BRIDGE_ISR_BAD_XREQ_PACKET		0x0000000008000000ULL
/* xtalk incoming response command word error bit set */
#define	BRIDGE_ISR_RESP_XTALK_ERR		0x0000000004000000ULL
/* xtalk incoming request command word error bit set */
#define	BRIDGE_ISR_REQ_XTALK_ERR		0x0000000002000000ULL
/* request packet has invalid address for this widget */
#define	BRIDGE_ISR_INVALID_ADDRESS		0x0000000001000000ULL
/* request operation not supported by the bridge */
#define	BRIDGE_ISR_UNSUPPORTED_XOP		0x0000000000800000ULL
/* request packet overflow */
#define	BRIDGE_ISR_XREQ_FIFO_OFLOW		0x0000000000400000ULL
/* LLP receiver sequence number error */
#define	BRIDGE_ISR_LLP_REC_SNERR		0x0000000000200000ULL
/* LLP receiver check bit error */
#define	BRIDGE_ISR_LLP_REC_CBERR		0x0000000000100000ULL
/* LLP receiver retry count exceeded */
#define	BRIDGE_ISR_LLP_RCTY			0x0000000000080000ULL
/* LLP transmitter side required retry */
#define	BRIDGE_ISR_LLP_TX_RETRY			0x0000000000040000ULL
/* LLP transmitter retry count exceeded */
#define	BRIDGE_ISR_LLP_TCTY			0x0000000000020000ULL
/* (ATE) SSRAM parity error - bridge only */
#define	BRIDGE_ISR_SSRAM_PERR			0x0000000000010000ULL
/* PCI abort condition */
#define	BRIDGE_ISR_PCI_ABORT			0x0000000000008000ULL
/* PCI bridge detected parity error */
#define	BRIDGE_ISR_PCI_PARITY			0x0000000000004000ULL
/* PCI address or command parity error */
#define	BRIDGE_ISR_PCI_SERR			0x0000000000002000ULL
/* PCI device parity error */
#define	BRIDGE_ISR_PCI_PERR			0x0000000000001000ULL
/* PCI device selection timeout */
#define	BRIDGE_ISR_PCI_MASTER_TMO		0x0000000000000800ULL
/* PCI retry count exceeded */
#define	BRIDGE_ISR_PCI_RETRY_CNT		0x0000000000000400ULL
/* PCI to xtalk read request timeout */
#define	BRIDGE_ISR_XREAD_REQ_TMO		0x0000000000000200ULL
/* GIO non-contiguous byte enable in xtalk packet - bridge only */
#define	BRIDGE_ISR_GIO_BENABLE_ERR		0x0000000000000100ULL
#define	BRIDGE_ISR_HWINTR_MASK			0x00000000000000ffULL

#define	BRIDGE_ISR_ERRMASK			0x00000000fffffe00ULL
#define	PIC_ISR_ERRMASK				0x00003fff7ffffe00ULL

/*
 * BRIDGE_ICR bits, for Bridge and XBridge chips only (error interrupts
 * being cleared in groups)
 */

#define	BRIDGE_ICR_MULTIPLE			0x00000040
#define	BRIDGE_ICR_CRP				0x00000020
#define	BRIDGE_ICR_RESP_BUF			0x00000010
#define	BRIDGE_ICR_REQ_DSP			0x00000008
#define	BRIDGE_ICR_LLP				0x00000004
#define	BRIDGE_ICR_SSRAM			0x00000002
#define	BRIDGE_ICR_PCI				0x00000001
#define	BRIDGE_ICR_ALL				0x0000007f

/*
 * PCI Resource Mapping control
 *
 * There are three ways to map a given device:
 * - memory mapping in the long window, at BRIDGE_PCI_MEM_SPACE_BASE,
 *   shared by all devices.
 * - I/O mapping in the long window, at BRIDGE_PCI_IO_SPACE_BASE,
 *   shared by all devices, but only on widget revision 4 or later.
 * - programmable memory or I/O mapping at a selectable place in the
 *   short window, with an 1MB granularity. The size of this
 *   window is 2MB for the windows at 2MB and 4MB, and 1MB onwards.
 *
 * ARCBios will setup mappings in the short window for us, and
 * the selected address will match BAR0.
 */

#define	BRIDGE_DEVICE(d)		(0x00000200 + 8 * (d))
/* flags applying to the device itself */
/* enable write gathering through ATE */
#define	BRIDGE_DEVICE_WGATHER_PMU		0x01000000
/* enable write gathering through the direct window */
#define	BRIDGE_DEVICE_WGATHER_DIR		0x00800000
/* byteswap DMA done through ATE */
#define	BRIDGE_DEVICE_SWAP_PMU			0x00100000
/* byteswap DMA done through the direct window */
#define	BRIDGE_DEVICE_SWAP_DIR			0x00080000
/* flags applying to the mapping in this devio register */
#define	BRIDGE_DEVICE_PREFETCH			0x00040000
#define	BRIDGE_DEVICE_PRECISE			0x00020000
#define	BRIDGE_DEVICE_COHERENT			0x00010000
#define	BRIDGE_DEVICE_BARRIER			0x00008000
/* byteswap PIO */
#define	BRIDGE_DEVICE_SWAP			0x00002000
/* set if memory space, clear if I/O space */
#define	BRIDGE_DEVICE_IO_MEM			0x00001000
#define	BRIDGE_DEVICE_BASE_MASK			0x00000fff
#define	BRIDGE_DEVICE_BASE_SHIFT		20

#define	BRIDGE_DEVIO_BASE			0x00200000
#define	BRIDGE_DEVIO_LARGE			0x00200000
#define	BRIDGE_DEVIO_SHORT			0x00100000

#define	BRIDGE_DEVIO_OFFS(d) \
	(BRIDGE_DEVIO_BASE + \
	 BRIDGE_DEVIO_LARGE * ((d) < 2 ? (d) : 2) + \
	 BRIDGE_DEVIO_SHORT * ((d) < 2 ? 0 : (d) - 2))
#define	BRIDGE_DEVIO_SIZE(d) \
	((d) < 2 ? BRIDGE_DEVIO_LARGE : BRIDGE_DEVIO_SHORT)
#define	PIC_DEVIO_OFFS(bus,d) \
	(BRIDGE_DEVIO_OFFS(d) + ((bus) != 0 ? BRIDGE_BUS_OFFSET : 0))


#define	BRIDGE_DEVICE_WBFLUSH(d)	(0x00000240 + 8 * (d))

/*
 * Read Response Buffer configuration registers
 *
 * There are 16 RRB, which are shared among the PCI devices.
 * The following registers provide four bits per RRB, describing
 * their RRB assignment.
 *
 * Since these four bits only assign two bits to map to a PCI slot,
 * the low-order bit is implied by the RRB register: one controls the
 * even-numbered PCI slots, while the other controls the odd-numbered
 * PCI slots.
 */

#define	BRIDGE_RRB_EVEN			0x00000280
#define	BRIDGE_RRB_ODD			0x00000288

#define	RRB_VALID				0x8
#define	RRB_VCHAN				0x4
#define	RRB_DEVICE_MASK				0x3
#define	RRB_SHIFT				4

/*
 * Address Translation Entries
 */

#define	BRIDGE_INTERNAL_ATE			128
#define	XBRIDGE_INTERNAL_ATE			1024

#define	BRIDGE_ATE_SSHIFT			12	/* 4KB */
#define	BRIDGE_ATE_LSHIFT			14	/* 16KB */
#define	BRIDGE_ATE_SSIZE			(1ULL << BRIDGE_ATE_SSHIFT)
#define	BRIDGE_ATE_LSIZE			(1ULL << BRIDGE_ATE_LSHIFT)
#define	BRIDGE_ATE_SMASK			(BRIDGE_ATE_SSIZE - 1)
#define	BRIDGE_ATE_LMASK			(BRIDGE_ATE_LSIZE - 1)

#define	BRIDGE_ATE(a)			(0x00010000 + (a) * 8)

#define	ATE_NV					0x0000000000000000ULL
#define	ATE_V					0x0000000000000001ULL
#define	ATE_COH					0x0000000000000002ULL
#define	ATE_PRECISE				0x0000000000000004ULL
#define	ATE_PREFETCH				0x0000000000000008ULL
#define	ATE_BARRIER				0x0000000000000010ULL
#define	ATE_BSWAP				0x0000000000000020ULL	/* XB */
#define	ATE_WIDGET_MASK				0x0000000000000f00ULL
#define	ATE_WIDGET_SHIFT			8
#define	ATE_ADDRESS_MASK			0x0000fffffffff000ULL
#define	ATE_RMF_MASK				0x00ff000000000000ULL	/* BR */

/*
 * PIC Write Request memory
 */

#define	PIC_WR_REQ_LOWER(a)		(0x00018000 + (a) * 8)
#define	PIC_WR_REQ_UPPER(a)		(0x00018800 + (a) * 8)
#define	PIC_WR_REQ_PARITY(a)		(0x00019000 + (a) * 8)

#define	PIC_WR_REQ_ENTRIES				0x100

/*
 * Configuration space
 *
 * Access to the first bus is done in the first area, sorted by
 * device number and function number.
 * Access to other buses is done in the second area, after programming
 * BRIDGE_PCI_CFG to the appropriate bus and slot number.
 */

#define	BRIDGE_PCI_CFG_SPACE		0x00020000
#define	BRIDGE_PCI_CFG1_SPACE		0x00028000

/*
 * DMA addresses
 * The Bridge can do DMA either through a direct 2GB window, or through
 * a 1GB translated window, using its ATE memory.
 */

#define	BRIDGE_DMA_TRANSLATED_BASE	0x40000000ULL
#define	XBRIDGE_DMA_TRANSLATED_SWAP	0x20000000ULL
#define	ATE_ADDRESS(a,s) \
		(BRIDGE_DMA_TRANSLATED_BASE + ((a) << (s)))
#define	ATE_INDEX(a,s) \
		(((a) - BRIDGE_DMA_TRANSLATED_BASE) >> (s))

#define	BRIDGE_DMA_DIRECT_BASE		0x80000000ULL
#define	BRIDGE_DMA_DIRECT_LENGTH	0x80000000ULL
@


1.14
log
@More PIC programming magic, as well as a specific workaround for lost
interrupts in PIC rev 1; from IRIX via Linux 2.5.69.

This doesn't fix the lost SCSI interrupts jasper@@ eventually experiences on
Origin 350 systems, but this can't hurt anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.13 2011/04/05 01:17:41 miod Exp $	*/
d27 2
a28 2
#define	BRIDGE_NBUSES			1
#define	PIC_NBUSES			2
d30 3
a32 3
#define	BRIDGE_NSLOTS			8
#define	PIC_NSLOTS			4
#define	MAX_SLOTS			BRIDGE_NSLOTS
d34 1
a34 1
#define	BRIDGE_NINTRS			8
d63 10
a72 10
#define	BRIDGE_DIRMAP_WIDGET_SHIFT	20
#define	BRIDGE_DIRMAP_ADD_512MB		0x00020000	/* add 512MB */
#define	BRIDGE_DIRMAP_BASE_MASK		0x0001ffff
#define	BRIDGE_DIRMAP_BASE_SHIFT	31

#define	BRIDGE_PCI0_MEM_SPACE_BASE	0x0000000040000000ULL
#define	BRIDGE_PCI_MEM_SPACE_LENGTH	0x0000000040000000ULL
#define	BRIDGE_PCI1_MEM_SPACE_BASE	0x00000000c0000000ULL
#define	BRIDGE_PCI_IO_SPACE_BASE	0x0000000100000000ULL
#define	BRIDGE_PCI_IO_SPACE_LENGTH	0x0000000100000000ULL
d77 5
a81 5
#define	BRIDGE_BUS_PCI_RETRY_CNT_SHIFT		0
#define	BRIDGE_BUS_PCI_RETRY_CNT_MASK	0x000003ff
#define	BRIDGE_BUS_GIO_TIMEOUT		0x00001000
#define	BRIDGE_BUS_PCI_RETRY_HOLD_SHIFT		16
#define	BRIDGE_BUS_PCI_RETRY_HOLD_MASK	0x001f0000
d192 8
a199 8
#define	BRIDGE_ICR_MULTIPLE		0x00000040
#define	BRIDGE_ICR_CRP			0x00000020
#define	BRIDGE_ICR_RESP_BUF		0x00000010
#define	BRIDGE_ICR_REQ_DSP		0x00000008
#define	BRIDGE_ICR_LLP			0x00000004
#define	BRIDGE_ICR_SSRAM		0x00000002
#define	BRIDGE_ICR_PCI			0x00000001
#define	BRIDGE_ICR_ALL			0x0000007f
d271 4
a274 4
#define	RRB_VALID			0x8
#define	RRB_VCHAN			0x4
#define	RRB_DEVICE_MASK			0x3
#define	RRB_SHIFT			4
d280 2
a281 2
#define	BRIDGE_INTERNAL_ATE		128
#define	XBRIDGE_INTERNAL_ATE		1024
d283 6
a288 6
#define	BRIDGE_ATE_SSHIFT		12	/* 4KB */
#define	BRIDGE_ATE_LSHIFT		14	/* 16KB */
#define	BRIDGE_ATE_SSIZE		(1ULL << BRIDGE_ATE_SSHIFT)
#define	BRIDGE_ATE_LSIZE		(1ULL << BRIDGE_ATE_LSHIFT)
#define	BRIDGE_ATE_SMASK		(BRIDGE_ATE_SSIZE - 1)
#define	BRIDGE_ATE_LMASK		(BRIDGE_ATE_LSIZE - 1)
d292 21
a312 11
#define	ATE_NV				0x0000000000000000ULL
#define	ATE_V				0x0000000000000001ULL
#define	ATE_COH				0x0000000000000002ULL
#define	ATE_PRECISE			0x0000000000000004ULL
#define	ATE_PREFETCH			0x0000000000000008ULL
#define	ATE_BARRIER			0x0000000000000010ULL
#define	ATE_BSWAP			0x0000000000000020ULL	/* XBridge */
#define	ATE_WIDGET_MASK			0x0000000000000f00ULL
#define	ATE_WIDGET_SHIFT		8
#define	ATE_ADDRESS_MASK		0x0000fffffffff000ULL
#define	ATE_RMF_MASK			0x00ff000000000000ULL	/* Bridge */
@


1.13
log
@Get rid of the ATE code, and do not assume the direct DMA window is set up
at physical address zero onwards, but instead assume it is controlled by
the dma_constraints range.
This will eventually allow a different window to be selected.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.12 2011/03/13 20:45:51 miod Exp $	*/
d40 2
@


1.12
log
@Disable write gathering on devio settings we inherit from ARCS.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.11 2009/12/26 20:16:19 miod Exp $	*/
d63 1
a63 1
#define	BRIDGE_DIRMAP_BASE_MASK		0x00001fff
@


1.11
log
@Register an interrupt handler for PCI error conditions (as well as xtalk
errors at the widget level). Extremely crude for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.10 2009/10/22 19:55:45 miod Exp $	*/
d217 4
@


1.10
log
@Introduce a logical xbpci(4) device between xbridge and pci, since more than
one pci bus can attach to an xbridge (if PIC) and both being `bus 0' would
make dmesg confusing.
While there, seize the opportunity of this new dmesg line to display the
bus mode (PCI or PCIX) and speed.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.9 2009/10/07 04:17:48 miod Exp $	*/
d4 1
a4 1
 * Copyright (c) 2008 Miodrag Vallat.
d46 4
d73 1
d75 6
d99 99
@


1.9
log
@Small steps towards getting the serial clock correct on IOC4 serial ports.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.8 2009/08/18 19:31:59 miod Exp $	*/
a28 1
#define	MAX_BUSES			PIC_NBUSES
d36 4
d44 1
a44 2
#define	BRIDGE_WIDGET_CONTROL_SPEED_33MHZ	0x00000000
#define	BRIDGE_WIDGET_CONTROL_SPEED_66MHZ	0x00000010
@


1.8
log
@Blind support for SGI PIC PCI-X controller found on Origin 350 and Tezro
systems. PIC was supposed to be mostly XBridge compatible, but a silicon
bug prevents it from working correctly if 32 bit register writes are used,
so the xbridge(4) code now needs to issue 64 bit writes.

In order to make this a bit more transparent, rebase all widget registers to
a 8 byte boundary, and provide a few inline accessors which will do the right
thing if you want 32 bit writes.

Tested to not cause regressions on Octane, Origin 200 and Fuel; covering
Bridge < 4, Bridge >= 4 and XBridge flavours.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.7 2009/07/06 22:46:43 miod Exp $	*/
d40 3
@


1.7
log
@Almost rewrite xbridge PCI resource allocation:
- introduce an interface for widget drivers to ask the xbow to map arbitrary
  views of their address space, in addition to the low 16MB. This operation
  may fail or map a subset range of what the caller asked for, depending on
  the platform we're running on.
- use this in xbridge to set up views on the direct memory and i/o spaces,
  to map devices resources when they don't fit in one of the devio small
  ranges (limited to 2MB anyway). These views are only allocated when
  devio can't do the job, so as not to consume too many resources on
  Origin family systems where such views are scarce resources (and
  shared accross the whole crossbow).

This makes pci devices with large resource needs configure correctly.

While there, fix programming of 64 bit memory BAR; this makes bge(4)
work.

Tested on Octane (with Bridge revision < 4 and >= 4), Origin 200 (Bridge >= 4)
and Fuel (XBridge).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.6 2009/05/24 17:33:12 miod Exp $	*/
d20 2
a21 1
 * IP27/IP30 Bridge Registers
d25 6
d32 3
d50 1
a50 1
#define	BRIDGE_DIR_MAP			0x00000084
d57 1
a57 1
#define	BRIDGE_PCI_MEM_SPACE_BASE	0x0000000040000000ULL
d59 1
d63 5
a67 5
#define	BRIDGE_NIC			0x000000b4
#define	BRIDGE_BUS_TIMEOUT		0x000000c4
#define	BRIDGE_PCI_CFG			0x000000cc
#define	BRIDGE_PCI_ERR_UPPER		0x000000d4
#define	BRIDGE_PCI_ERR_LOWER		0x000000dc
d73 7
a79 7
#define	BRIDGE_ISR			0x00000104
#define	BRIDGE_IER			0x0000010c
#define	BRIDGE_ICR			0x00000114
#define	BRIDGE_INT_MODE			0x0000011c
#define	BRIDGE_INT_DEV			0x00000124
#define	BRIDGE_INT_HOST_ERR		0x0000012c
#define	BRIDGE_INT_ADDR(d)		(0x00000134 + 8 * (d))
d81 2
a82 2
#define	BRIDGE_INT_FORCE_ALWAYS(d)	(0x00000184 + 8 * (d))
#define	BRIDGE_INT_FORCE_PIN(d)		(0x000001c4 + 8 * (d))
d100 1
a100 1
#define	BRIDGE_DEVICE(d)		(0x00000204 + 8 * (d))
d128 2
d132 1
a132 1
#define	BRIDGE_DEVICE_WBFLUSH(d)	(0x00000244 + 8 * (d))
d147 2
a148 2
#define	BRIDGE_RRB_EVEN			0x00000284
#define	BRIDGE_RRB_ODD			0x0000028c
@


1.6
log
@Provide more xbridge-specific functions in the bus_dma_tag_t we use for
PCI buses on xbridge.

In addition to this, we now support the limited IOMMU, allowing memory
outside of the 2GB direct window to be used for DMA.

Only tested on XBridge chip so far; this lets an IP35 machine with
physical memory after the 2GB boundary run stable again.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.5 2009/05/14 21:10:33 miod Exp $	*/
d90 7
a96 2
#define	BRIDGE_DEVICE_SWAP_PMU			0x00080000	/* ??? */
#define	BRIDGE_DEVICE_SWAP_DIR			0x00040000	/* ??? */
d100 1
d102 2
a103 1
#define	BRIDGE_DEVICE_IO_MEM			0x00001000 /* clear if I/O */
@


1.5
log
@More interrupt deadlock tomfoolery; turns out the non-XBridge workaround
doesn't appear to trigger the expected interrupt, so use a fugly nanotimeout
instead.

This makes Origin 200 disks not stall as soon as some serious I/O is intended.
They now run multiuser.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.4 2009/05/06 20:08:47 miod Exp $	*/
d136 28
d180 7
@


1.4
log
@Workaround a bridge deadlock, as advised by comments found in the linux sn1
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.3 2009/05/03 19:44:28 miod Exp $	*/
d110 3
@


1.3
log
@Complete overhaul of the PCI bridge initialization. It will now allocate
resources to cards not configured by the PROM. There are still some
shortcomings, but this is a good start.

Tested on IP35 with an fxp(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.2 2009/05/02 21:30:13 miod Exp $	*/
d69 3
@


1.2
log
@More progress taming the xbow and the pci bridge; still needs code to write,
but (currently commented out) code makes isp happier on IP27 and IP35, to the
point of seeing disks (but considering them offline so far).
@
text
@d1 1
a1 1
/*	$OpenBSD: xbridgereg.h,v 1.1 2008/04/07 22:47:40 miod Exp $	*/
d93 1
a93 1
#define	BRIDGE_DEVICE_IO			0x00001000
d105 2
@


1.1
log
@A first cut at XBow bus support, very minimal, limited to a local bus only;
HUB driver (for IP27) is a stub, and interrupt support is a shoot in the dark
and will need some serious debugging until it is sane, but I want to reduce
the weight of these diffs first.

Based on a lot of tinkering and experiments, as well as knowledge extracted
from the Linux source code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d29 10
d41 11
d71 1
a71 1
 * Mapping control
d87 5
d97 29
a125 4
#define	BRIDGE_PCI_MEM_SPACE_BASE	0x0000000040000000ULL
#define	BRIDGE_PCI_MEM_SPACE_LENGTH	0x0000000040000000ULL
#define	BRIDGE_PCI_IO_SPACE_BASE	0x0000000100000000ULL
#define	BRIDGE_PCI_IO_SPACE_LENGTH	0x0000000100000000ULL
@

