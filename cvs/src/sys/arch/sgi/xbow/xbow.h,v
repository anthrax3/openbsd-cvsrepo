head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.26
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.22
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.18
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.20
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.12
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.16
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.14
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.10
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.6.0.2
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2011.04.17.17.44.24;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.05.14.43.11;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.25.11.23.30;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.18.19.05.53;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.26.18.11.27;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.18.19.31.59;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.06.22.46.43;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.01.21.56.38;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.13.21.48.03;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.15.18.45.41;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.13.21.17.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.22.47.40;	author miod;	state Exp;
branches;
next	;


desc
@@


1.12
log
@On IP27 systems, fill the array of node hub widget numbers early, so that all
hubs are known during autoconf. Then, pick the most populated 2GB window
as our DMA memory window. xbridge(4) can thus program the correct settings
regardless of the order in which the xbow(4) attach.
@
text
@/*	$OpenBSD: xbow.h,v 1.11 2011/04/05 14:43:11 miod Exp $	*/

/*
 * Copyright (c) 2008 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef	_XBOW_H_
#define	_XBOW_H_

/*
 * Devices connected to the XBow are called ``widgets'' and are
 * identified by a common widget memory area at the beginning of their
 * memory space.
 *
 * Each widget has its own memory space.  The lowest 16MB are always
 * accessible as a so-called ``short window''.  Other `views' of the
 * widget are possible, depending on the system (the whole widget
 * address space is always visible on Octane, while Origin family
 * systems can only map a few ``large windows'', which are a scarce
 * resource).
 *
 * Apart from the crossbow itself being widget #0, the widgets are divided
 * in two groups: widgets #8 to #b are the ``upper'' widgets, while widgets
 * #c to #f are the ``lower'' widgets.
 *
 * Widgets are uniquely identified with their widget number on the XBow
 * bus. However, the way they are mapped and accessed will depend on the
 * processor (well, the processor board node) requesting access. Hence the
 * two parameters needed to map a widget.
 */

extern	paddr_t (*xbow_widget_base)(int16_t, u_int);
extern	paddr_t	(*xbow_widget_map)(int16_t, u_int, bus_addr_t *, bus_size_t *);

extern	int	(*xbow_widget_id)(int16_t, u_int, uint32_t *);

extern	int	(*xbow_intr_widget_intr_register)(int, int, int *);
extern	int	(*xbow_intr_widget_intr_establish)(int (*)(void *), void *,
		    int, int, const char *, struct intrhand *);
extern	void	(*xbow_intr_widget_intr_disestablish)(int);

extern	void	(*xbow_intr_widget_intr_set)(int);
extern	void	(*xbow_intr_widget_intr_clear)(int);

/*
 * Valid widget values
 */

#define	WIDGET_MIN			8
#define	WIDGET_MAX			15

/* interrupt register address on the master hub */
extern	uint64_t xbow_intr_address;

struct xbow_attach_args {
	int16_t		xaa_nasid;
	int		xaa_widget;

	uint32_t	xaa_vendor;
	uint32_t	xaa_product;
	uint32_t	xaa_revision;

	bus_space_tag_t xaa_iot;
	/*
	 * WARNING! xaa_iot points to memory allocated on the stack,
	 * drivers need to make a copy of it.
	 */
};

void	xbow_build_bus_space(struct mips_bus_space *, int, int);
int	xbow_intr_register(int, int, int *);
int	xbow_intr_establish(int (*)(void *), void *, int, int, const char *,
	    struct intrhand *);
void	xbow_intr_disestablish(int);
void	xbow_intr_clear(int);
void	xbow_intr_set(int);

paddr_t	xbow_widget_map_space(struct device *, u_int,
	    bus_addr_t *, bus_size_t *);

int	xbow_space_map(bus_space_tag_t, bus_addr_t, bus_size_t, int,
	    bus_space_handle_t *);
uint8_t xbow_read_1(bus_space_tag_t, bus_space_handle_t, bus_size_t);
uint16_t xbow_read_2(bus_space_tag_t, bus_space_handle_t, bus_size_t);
void	xbow_read_raw_2(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    uint8_t *, bus_size_t);
void	xbow_write_1(bus_space_tag_t, bus_space_handle_t, bus_size_t, uint8_t);
void	xbow_write_2(bus_space_tag_t, bus_space_handle_t, bus_size_t,
	    uint16_t);
void	xbow_write_raw_2(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    const uint8_t *, bus_size_t);

/*
 * Widget register access routines hiding addressing games depending upon
 * the access width.
 */
static __inline__ uint32_t
widget_read_4(bus_space_tag_t t, bus_space_handle_t h, bus_addr_t a)
{
	return bus_space_read_4(t, h, a | 4);
}
static __inline__ uint64_t
widget_read_8(bus_space_tag_t t, bus_space_handle_t h, bus_addr_t a)
{
	return bus_space_read_8(t, h, a);
}
static __inline__ void
widget_write_4(bus_space_tag_t t, bus_space_handle_t h, bus_addr_t a,
    uint32_t v)
{
	bus_space_write_4(t, h, a | 4, v);
}
static __inline__ void
widget_write_8(bus_space_tag_t t, bus_space_handle_t h, bus_addr_t a,
    uint64_t v)
{
	bus_space_write_8(t, h, a, v);
}

#endif	/* _XBOW_H_ */
@


1.11
log
@Rename a few xbow global variable names to make them less ambiguous.
Remember the hub widget number of each node, instead of only the master node.
Use this in xbridge to compute the proper direct DMA map configuration
register value (it needs to embed the hub widget number matching the
physical address range).
This should allow us to pick memory from a different node than the one
we booted from, as the DMA window, if wanted.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.10 2009/11/25 11:23:30 miod Exp $	*/
a63 8
#ifdef TGT_OCTANE
#define	XBOW_MAX			1
#else
#define	XBOW_MAX			GDA_MAXNODES
#endif

/* widget number of the XBow `hub', for each node */
extern	int	xbow_node_hub_widget[/*XBOW_MAX*/];
@


1.10
log
@Allow xbow_intr_establish() callers to provide optional storage for the
struct intrhand, instead of having it malloc()'ed.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.9 2009/11/18 19:05:53 miod Exp $	*/
a47 2
extern	int	xbow_intr_widget;
extern	paddr_t	xbow_intr_widget_register;
d63 11
@


1.9
log
@Move widget register information apart from xbow software interface, and
update #include needs. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.8 2009/10/26 18:11:27 miod Exp $	*/
d53 1
a53 1
		    int, int, const char *);
d83 2
a84 1
int	xbow_intr_establish(int (*)(void *), void *, int, int, const char *);
@


1.8
log
@Add new xbow routines to explicitely trigger or clear an interrupt source,
instead of embedding that knowledge in xbridge(4); will be used elsewhere
shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.7 2009/08/18 19:31:59 miod Exp $	*/
a59 51
 * Common Widget Registers.  Every widget provides them.
 *
 * Registers are 32 or 64 bit wide (depending on the particular widget
 * or register) on 64 bit boundaries.
 * The widget_{read,write}_[48] functions below hide the addressing
 * games required to perform 32 bit accesses.
 */

#define	WIDGET_ID			0x0000
#define	WIDGET_ID_REV_MASK			0xf0000000
#define	WIDGET_ID_REV_SHIFT			28
#define	WIDGET_ID_PRODUCT_MASK			0x0ffff000
#define	WIDGET_ID_PRODUCT_SHIFT			12
#define	WIDGET_ID_VENDOR_MASK			0x00000ffe
#define	WIDGET_ID_VENDOR_SHIFT			1
#define	WIDGET_STATUS			0x0008
#define	WIDGET_ERR_ADDR_UPPER		0x0010
#define	WIDGET_ERR_ADDR_LOWER		0x0018
#define	WIDGET_CONTROL			0x0020
#define	WIDGET_REQ_TIMEOUT		0x0028
#define	WIDGET_INTDEST_ADDR_UPPER	0x0030
#define	WIDGET_INTDEST_ADDR_LOWER	0x0038
#define	WIDGET_ERR_CMD_WORD		0x0040
#define	WIDGET_LLP_CFG			0x0048
#define	WIDGET_TFLUSH			0x0050

/*
 * Crossbow Specific Registers.
 */

#define	XBOW_WID_ARB_RELOAD		0x0058
#define	XBOW_PERFCNTR_A			0x0060
#define	XBOW_PERFCNTR_B			0x0068
#define	XBOW_NIC			0x0070
#define	XBOW_WIDGET_LINK(w)		(0x0100 + ((w) & 7) * 0x0040)

/*
 * Per-widget ``Link'' Register Set.
 */
#define	WIDGET_LINK_IBF			0x0000
#define	WIDGET_LINK_CONTROL		0x0008
#define	WIDGET_CONTROL_ALIVE			0x80000000
#define	WIDGET_LINK_STATUS		0x0010
#define	WIDGET_STATUS_ALIVE			0x80000000
#define	WIDGET_LINK_ARB_UPPER		0x0018
#define	WIDGET_LINK_ARB_LOWER		0x0020
#define	WIDGET_LINK_STATUS_CLEAR	0x0028
#define	WIDGET_LINK_RESET		0x0030
#define	WIDGET_LINK_AUX_STATUS		0x0038

/*
a65 1

d75 4
@


1.7
log
@Blind support for SGI PIC PCI-X controller found on Origin 350 and Tezro
systems. PIC was supposed to be mostly XBridge compatible, but a silicon
bug prevents it from working correctly if 32 bit register writes are used,
so the xbridge(4) code now needs to issue 64 bit writes.

In order to make this a bit more transparent, rebase all widget registers to
a 8 byte boundary, and provide a few inline accessors which will do the right
thing if you want 32 bit writes.

Tested to not cause regressions on Octane, Origin 200 and Fuel; covering
Bridge < 4, Bridge >= 4 and XBridge flavours.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.6 2009/07/06 22:46:43 miod Exp $	*/
d56 3
d133 2
@


1.6
log
@Almost rewrite xbridge PCI resource allocation:
- introduce an interface for widget drivers to ask the xbow to map arbitrary
  views of their address space, in addition to the low 16MB. This operation
  may fail or map a subset range of what the caller asked for, depending on
  the platform we're running on.
- use this in xbridge to set up views on the direct memory and i/o spaces,
  to map devices resources when they don't fit in one of the devio small
  ranges (limited to 2MB anyway). These views are only allocated when
  devio can't do the job, so as not to consume too many resources on
  Origin family systems where such views are scarce resources (and
  shared accross the whole crossbow).

This makes pci devices with large resource needs configure correctly.

While there, fix programming of 64 bit memory BAR; this makes bge(4)
work.

Tested on Octane (with Bridge revision < 4 and >= 4), Origin 200 (Bridge >= 4)
and Fuel (XBridge).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.5 2009/07/01 21:56:38 miod Exp $	*/
d58 5
d65 1
a65 2
/* all registers are 32 bits within big-endian 64 bit blocks */
#define	WIDGET_ID			0x0004
d72 10
a81 10
#define	WIDGET_STATUS			0x000c
#define	WIDGET_ERR_ADDR_UPPER		0x0014
#define	WIDGET_ERR_ADDR_LOWER		0x001c
#define	WIDGET_CONTROL			0x0024
#define	WIDGET_REQ_TIMEOUT		0x002c
#define	WIDGET_INTDEST_ADDR_UPPER	0x0034
#define	WIDGET_INTDEST_ADDR_LOWER	0x003c
#define	WIDGET_ERR_CMD_WORD		0x0044
#define	WIDGET_LLP_CFG			0x004c
#define	WIDGET_TFLUSH			0x0054
d87 4
a90 4
#define	XBOW_WID_ARB_RELOAD		0x005c
#define	XBOW_PERFCNTR_A			0x0064
#define	XBOW_PERFCNTR_B			0x006c
#define	XBOW_NIC			0x0074
d96 2
a97 2
#define	WIDGET_LINK_IBF			0x0004
#define	WIDGET_LINK_CONTROL		0x000c
d99 1
a99 1
#define	WIDGET_LINK_STATUS		0x0014
d101 5
a105 5
#define	WIDGET_LINK_ARB_UPPER		0x001c
#define	WIDGET_LINK_ARB_LOWER		0x0024
#define	WIDGET_LINK_STATUS_CLEAR	0x002c
#define	WIDGET_LINK_RESET		0x0034
#define	WIDGET_LINK_AUX_STATUS		0x003c
d145 27
@


1.5
log
@The widget mapping code has been written back when I was only working on
Octane support. The Octane being a single-node system, address space is
ludicrous enough to allow the whole address space of every widget to be
directly accessible in whole, using the address bits reserved to nasid.

However, on IP27 and IP35, things do not work this way - while we still have
the low 16MB address space of each widget available (the so-called
``short window''), access to other parts of the wiget address space is done
through translation slots (IOTTE) at the Hub I/O space level, on a per-node
basis.

Given the imminent release lock, give up completely on ``large'' mappings
of widgets, and restrict ourselves to short window operation, all the time
(thus reinforcing the use of devio registers to map pci resources on xbridge).
A proper interface to request mappings of specific widget areas, either
directly on Octane, or through IOTTE if available on Origin, will appear
post-release.

No functional change (except from silently repairing Octane support which the
previous xbridge commit silently broke).
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.4 2009/06/13 21:48:03 miod Exp $	*/
d27 6
a32 4
 * Each widget has its own memory space, upon which windows of different
 * sizes can be defined. OpenBSD only cares about the shortest window
 * (which fits in 32 bits of address space), and the longest window (which
 * provides access to the complete widget space).
d45 1
d126 3
@


1.4
log
@Enumerate all available nodes for hardware on IP27/IP35 systems; works to some
extent, but isp(4) on other nodes do not work correctly yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.3 2009/04/15 18:45:41 miod Exp $	*/
d42 1
a42 3
extern	paddr_t (*xbow_widget_short)(int16_t, u_int);
extern	paddr_t (*xbow_widget_long)(int16_t, u_int);
extern	unsigned int xbow_long_shift;
d116 1
a116 2
	bus_space_tag_t xaa_short_tag;
	bus_space_tag_t xaa_long_tag;
d119 1
a119 1
void	xbow_build_bus_space(struct mips_bus_space *, int, int, int);
d124 1
a124 1
int	xbow_space_map_short(bus_space_tag_t, bus_addr_t, bus_size_t, int,
d128 2
d133 2
@


1.3
log
@Change the way the widget interrupt register is computed and have it become
a complete physical address. Also add proper cpu pa<->device pa for dma
on Origin 200.

This lets xbridge work and route interrupts correctly on Origin 200.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.2 2009/04/13 21:17:54 miod Exp $	*/
d111 1
@


1.2
log
@The start of Origin 200 support. Based on some code contributed by pefo@@
some years ago for KL enumeration, building on the existing XBow support
to limit ourselves to a single node for now.

This is a work-in-progress; it currently lacks complete interrupt code,
as well as PCI resource management. And there are likely bugs creeping
inside.
@
text
@d1 1
a1 1
/*	$OpenBSD: xbow.h,v 1.1 2008/04/07 22:47:40 miod Exp $	*/
d48 1
a48 1
extern	unsigned int xbow_intr_widget_register;
@


1.1
log
@A first cut at XBow bus support, very minimal, limited to a local bus only;
HUB driver (for IP27) is a stub, and interrupt support is a shoot in the dark
and will need some serious debugging until it is sane, but I want to reduce
the weight of these diffs first.

Based on a lot of tinkering and experiments, as well as knowledge extracted
from the Linux source code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d102 7
d126 2
@

