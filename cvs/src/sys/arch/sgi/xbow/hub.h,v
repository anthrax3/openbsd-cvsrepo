head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.11
date	2016.01.02.05.49.36;	author visa;	state Exp;
branches;
next	1.10;
commitid	U9KGIaWU35EclYRl;

1.10
date	2015.12.25.09.22.00;	author visa;	state Exp;
branches;
next	1.9;
commitid	mo9Cs2HTLrPLm8sR;

1.9
date	2015.12.25.06.18.50;	author visa;	state Exp;
branches;
next	1.8;
commitid	3iP5dZrT3IkHWgNZ;

1.8
date	2015.12.12.16.48.19;	author visa;	state Exp;
branches;
next	1.7;
commitid	pPyUB37tzEMGatDM;

1.7
date	2009.11.08.22.44.16;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.14.20.21.16;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.06.22.46.43;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.13.16.28.11;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.28.18.02.43;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.15.18.45.41;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Take the PHY of iec(4) out of reset before attaching the interface.
Otherwise the PHY goes undetected on the slave node of a dual-node
Origin 200. The PHY gets enabled by diagnostic checks but only on the
master node. As the attach code will now do the enabling, the checks can
be disabled on reboot, making reboots faster especially on IP27.

Tested on Origin 200 (IP27), Fuel (IP35 with iec), and Origin 350
(IP35 without iec).

Diff from miod@@, ok krw@@
@
text
@/*	$OpenBSD: hub.h,v 1.10 2015/12/25 09:22:00 visa Exp $	*/

/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 *  HUB access macros.
 */
#define	LWIN_SIZE_BITS		24
#define	LWIN_SIZE		(1ULL << LWIN_SIZE_BITS)

#define	NODE_LWIN_BASE(nasid, widget)                               \
        (IP27_NODE_IO_BASE(nasid) + ((uint64_t)(widget) << LWIN_SIZE_BITS))

#define	IP27_LHUB_ADDR(_x) \
	((volatile uint64_t *)(NODE_LWIN_BASE(0, 1) + (_x)))
#define	IP27_RHUB_ADDR(_n, _x) \
	((volatile uint64_t *)(NODE_LWIN_BASE(_n, 1) + 0x800000 + (_x)))
#define	IP27_RHUB_PI_ADDR(_n, _sn, _x) \
	((volatile uint64_t *)(NODE_LWIN_BASE(_n, 1) + 0x800000 + \
	    ((_sn) ? HUBPI_OFFSET : 0) + (_x)))

#define	IP27_LHUB_L(r)			*(IP27_LHUB_ADDR(r))
#define	IP27_LHUB_S(r, d)		*(IP27_LHUB_ADDR(r)) = (d)
#define	IP27_RHUB_L(n, r)		*(IP27_RHUB_ADDR((n), (r)))
#define	IP27_RHUB_S(n, r, d)		*(IP27_RHUB_ADDR((n), (r))) = (d)
#define IP27_RHUB_PI_L(n, s, r)		*(IP27_RHUB_PI_ADDR((n), (s), (r)))
#define	IP27_RHUB_PI_S(n, s, r, d)	*(IP27_RHUB_PI_ADDR((n), (s), (r))) = (d)

#define	NODE_HSPEC_BASE(nasid) \
        (IP27_NODE_HSPEC_BASE(nasid))

#define	IP27_LHSPEC_ADDR(_x) \
	((volatile uint64_t *)(NODE_HSPEC_BASE(0) + (_x)))
#define	IP27_RHSPEC_ADDR(_n, _x) \
	((volatile uint64_t *)(NODE_HSPEC_BASE(_n) + 0x20000000 + (_x)))

#define	IP27_LHSPEC_L(r)		*(IP27_LHSPEC_ADDR(r))
#define	IP27_LHSPEC_S(r, d)		*(IP27_LHSPEC_ADDR(r)) = (d)
#define	IP27_RHSPEC_L(n, r)		*(IP27_RHSPEC_ADDR((n), (r)))
#define	IP27_RHSPEC_S(n, r, d)		*(IP27_RHSPEC_ADDR((n), (r))) = (d)

/*
 * HUB SPECIAL space (very incomplete)
 */

#define	LBOOTBASE_IP27		0x10000000
#define	LBOOTSIZE_IP27		0x10000000

#define	LREGBASE_IP35		0x10000000
#define	LREGSIZE_IP35		0x08000000
#define	LBOOTBASE_IP35		0x18000000
#define	LBOOTSIZE_IP35		0x08000000

#define	HSPEC_L1_UARTBASE	0x00000080
#define	HSPEC_SYNERGY0		0x04000000	/* synergy #0 base */
#define	HSPEC_SYNERGY1		0x05000000	/* synergy #1 base */

#define	HSPEC_L1_UART(r) \
	(LREGBASE_IP35 + HSPEC_L1_UARTBASE + ((r) << 3))
#define	HSPEC_SYNERGY(s,r) \
	(LREGBASE_IP35 + ((s) ? HSPEC_SYNERGY1 : HSPEC_SYNERGY0) + ((r) << 3))

/*
 * HUB IO space (very incomplete)
 */

/*
 * HUB PI - Processor Interface
 */

#define	HUBPIBASE			0x00000000

#define	HUBPI_REGION_PRESENT		0x00000018
#define	HUBPI_CPU_NUMBER		0x00000020
#define	HUBPI_CALIAS_SIZE		0x00000028
#define PI_CALIAS_SIZE_0			0


#define	HUBPI_CPU0_PRESENT		0x00000040
#define	HUBPI_CPU1_PRESENT		0x00000048
#define	HUBPI_CPU0_ENABLED		0x00000050
#define	HUBPI_CPU1_ENABLED		0x00000058

#define	HUBPI_IR_CHANGE			0x00000090
#define	PI_IR_SET				0x100
#define	PI_IR_CLR				0x000
#define	HUBPI_IR0			0x00000098
#define	HUBPI_IR1			0x000000a0
#define	HUBPI_CPU0_IMR0			0x000000a8
#define	HUBPI_CPU0_IMR1			0x000000b0
#define	HUBPI_CPU1_IMR0			0x000000b8
#define	HUBPI_CPU1_IMR1			0x000000c0

#define	HUBPI_RT_COUNT			0x00030100

/*
 * Offset to use to access the second PI over the remote hub interface
 * on IP35.
 */
#define	HUBPI_OFFSET			0x00200000

/*
 * ISR bit assignments.
 */

/** Level 1 interrupt */
/* ?? MSC panic */
#define	HUBPI_ISR1_MSC_ERROR		63
/* NI interface error */
#define	HUBPI_ISR1_NI_ERROR		62
/* MD correctable error */
#define	HUBPI_ISR1_MD_COR_ERROR		61
/* cpu correctable error B */
#define	HUBPI_ISR1_COR_ERROR_B		60
/* cpu correctable error A */
#define	HUBPI_ISR1_COR_ERROR_A		59
/* clock error */
#define	HUBPI_ISR1_CLOCK_ERROR		58
/* IP35 NACK interrupts */
#define	HUBPI_ISR1_NACK_B		57
#define	HUBPI_ISR1_NACK_A		56
/* IP35 LB error */
#define	HUBPI_ISR1_LB			55
/* IP35 XB error */
#define	HUBPI_ISR1_XB			54
/* 53-45 used by PROM */
/* 44-43 available */
/* 42-41 LLP errors */
/* NI broadcast errors */
#define	HUBPI_ISR1_NI_ERROR_B		40
#define	HUBPI_ISR1_NI_ERROR_A		39
/* 38-36 used by IP35 PROM */
/* 35-0 available */

/** Level 0 interrupt */
/* 63-11 available */
/* IPI interrupts */
#define	HUBPI_ISR0_IPI_D		10
#define	HUBPI_ISR0_IPI_C		9
#define	HUBPI_ISR0_IPI_B		8
#define	HUBPI_ISR0_IPI_A		7
/* ? */
#define	HUBPI_CC_PEND_B			6
#define	HUBPI_CC_PEND_A			5
/* ? */
#define	HUBPI_ISR0_UART			4
/* page migration interrupt */
#define	HUBPI_ISR0_PAGE_MIGRATION	3
/* graphics->cpu interrupts */
#define	HUBPI_ISR0_GFX_B		2
#define	HUBPI_ISR0_GFX_A		1
/* 0 reserved */

#define	HUBPI_INTR1_WIDGET_MAX		35
#define	HUBPI_INTR1_WIDGET_MIN		0
#define	HUBPI_INTR0_WIDGET_MAX		63
#define	HUBPI_INTR0_WIDGET_MIN		11

#define	HUBPI_NINTS			64	/* per register */

/*
 * HUB MD - Memory/Directory
 */

#define	HUBMDBASE_IP27			0x00200000
#define	HUBMDBASE_IP35			0x00780000

#define	HUBMD_LED0			0x00020050


/*
 * HUB IO - Widget I/O
 */

#define	HUBIOBASE			0x00400000

#define	HUBIO_IOTTE(x)			(0x00000160 + (x) * 8)
#define	IOTTE_MAX				7
#define	IOTTE_SWIN0				(IOTTE_MAX - 1)

#define	IOTTE(space,widget,offset) \
	(((space) << 12) | ((widget) << 8) | (offset))
#define	IOTTE_SPACE_DEVICE		1
#define	IOTTE_SPACE_MEMORY		0
#define	IOTTE_SPACE(iotte)		(((iotte) >> 12) & 0x01)
#define	IOTTE_WIDGET(iotte)		(((iotte) >> 8) & 0x0f)
#define	IOTTE_OFFSET(iotte)		((iotte) & 0xff)


/*
 * HUB LB - Local Bedrock
 */

#define	HUBLBBASE_IP35			0x00600000

/*
 * HUB NI - Network Interface
 */

#define	HUBNIBASE_IP27			0x00600000
#define	HUBNIBASE_IP35			0x00680000

#define	HUBNI_STATUS			0x00000000
#define	NI_MORENODES				0x0000000000040000
#define	HUBNI_RESET			0x00000008
#define	NI_RESET_ACTION_IP27			0x02
#define	NI_RESET_PORT_IP27			0x80
#define	NI_RESET_LOCAL_IP27			0x01
#define	NI_RESET_ACTION_IP35			0x01
#define	NI_RESET_PORT_IP35			0x02
#define	NI_RESET_LOCAL_IP35			0x04
#define	HUBNI_RESET_ENABLE		0x00000010
#define	NI_RESET_ENABLE				0x01

/*
 * HUB XB - Crossbar interface
 */

#define	HUBXBBASE_IP35			0x00700000
@


1.10
log
@Add IPI logic. Assign two additional interrupts for inter-processor
signalling as a workaround to a limitation in the hub interrupt code,
to allow four CPUs per node. At the moment, multi-node setups are not
supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.9 2015/12/25 06:18:50 visa Exp $	*/
d181 2
@


1.9
log
@Add timecounter for MP.
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.8 2015/12/12 16:48:19 visa Exp $	*/
d150 1
a150 1
/* 63-9 available */
d152 2
d171 1
a171 1
#define	HUBPI_INTR0_WIDGET_MIN		9
@


1.8
log
@Adjust IPI numbers to get the interrupts working. Bits 5 and 6 do not
seem to trigger an IPI. According to IP27 headers in Linux, those have a
special meaning in hardware.
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.7 2009/11/08 22:44:16 miod Exp $	*/
d107 2
@


1.7
log
@Add code to send L1 commands and parse command results; use it to add a way
for IP35 systems with IOC3 onboard Ethernet to get their Ethernet address
since it's no longer stored as an owmac(4) device on the IOC3 device itself.
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.6 2009/10/22 22:08:54 miod Exp $	*/
d148 1
a148 1
/* 63-7 available */
d150 5
a154 2
#define	HUBPI_ISR0_IPI_B		6
#define	HUBPI_ISR0_IPI_A		5
d167 1
a167 1
#define	HUBPI_INTR0_WIDGET_MIN		7
@


1.6
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.5 2009/10/14 20:21:16 miod Exp $	*/
d68 1
d72 2
@


1.5
log
@On IP30 and IP35 systems, try harder to figure out exactly what model we are
running on, and report this both as the hw.product sysctl and in dmesg.
Fuel and Origin 350 are no longer reported as being Origin 300 systems!
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.4 2009/07/06 22:46:43 miod Exp $	*/
d110 54
@


1.4
log
@Almost rewrite xbridge PCI resource allocation:
- introduce an interface for widget drivers to ask the xbow to map arbitrary
  views of their address space, in addition to the low 16MB. This operation
  may fail or map a subset range of what the caller asked for, depending on
  the platform we're running on.
- use this in xbridge to set up views on the direct memory and i/o spaces,
  to map devices resources when they don't fit in one of the devio small
  ranges (limited to 2MB anyway). These views are only allocated when
  devio can't do the job, so as not to consume too many resources on
  Origin family systems where such views are scarce resources (and
  shared accross the whole crossbow).

This makes pci devices with large resource needs configure correctly.

While there, fix programming of 64 bit memory BAR; this makes bge(4)
work.

Tested on Octane (with Bridge revision < 4 and >= 4), Origin 200 (Bridge >= 4)
and Fuel (XBridge).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.3 2009/06/13 16:28:11 miod Exp $	*/
d43 13
d57 1
a57 1
 * IP27 specific registers
d60 14
d75 1
a75 1
 * HUB space (very incomplete)
@


1.3
log
@Shuffle and rename HUB defines for consistency, no functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.2 2009/05/28 18:02:43 miod Exp $	*/
d33 2
a34 1
	((volatile uint64_t *)(NODE_LWIN_BASE(_n, 1) + 0x800000 + (_x)))
d38 2
a39 2
#define	IP27_RHUB_L(n, r)		*(IP27_RHUB_ADDR((n), (r))
#define	IP27_RHUB_S(n, r, d)		*(IP27_RHUB_ADDR((n), (r)) = (d)
d52 1
a52 1
 * HUB PI
d55 2
d78 38
d118 1
a118 1
 * HUB NI
d121 2
a122 2
#define	HUBNI_IP27			0x00600000
#define	HUBNI_IP35			0x00680000
d127 6
a132 3
#define	NI_RESET_ACTION				0x01
#define	NI_RESET_PORT				0x02
#define	NI_RESET_LOCAL				0x04
d135 6
@


1.2
log
@Handle NMI interrupts on IP27/IP35, gives us a change to play with ddb,
and then restart system (NMI on these systems aren't intended to be
recoverable).
@
text
@d1 1
a1 1
/*	$OpenBSD: hub.h,v 1.1 2009/04/15 18:45:41 miod Exp $	*/
d20 23
d54 20
a73 16
#define	HUB_CPU_NUMBER			0x00000020

#define	HUB_CPU0_PRESENT		0x00000040
#define	HUB_CPU1_PRESENT		0x00000048
#define	HUB_CPU0_ENABLED		0x00000050
#define	HUB_CPU1_ENABLED		0x00000058

#define	HUB_IR_CHANGE			0x00000090
#define	HUB_IR_SET				0x100
#define	HUB_IR_CLR				0x000
#define	HUB_IR0				0x00000098
#define	HUB_IR1				0x000000a0
#define	HUB_CPU0_IMR0			0x000000a8
#define	HUB_CPU0_IMR1			0x000000b0
#define	HUB_CPU1_IMR0			0x000000b8
#define	HUB_CPU1_IMR1			0x000000c0
d80 2
a81 2
#define	HUB_NI_IP27			0x00600000
#define	HUB_NI_IP35			0x00680000
d83 8
a90 7
#define	HUB_NI_STATUS			0x00000000
#define	HUB_NI_RESET			0x00000008
#define	RESET_ACTION				0x01
#define	RESET_PORT				0x02
#define	RESET_LOCAL				0x04
#define	HUB_NI_RESET_ENABLE		0x00000010
#define	RESET_ENABLE				0x01
@


1.1
log
@Change the way the widget interrupt register is computed and have it become
a complete physical address. Also add proper cpu pa<->device pa for dma
on Origin 200.

This lets xbridge work and route interrupts correctly on Origin 200.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 4
d47 16
@

