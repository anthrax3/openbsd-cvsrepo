head	1.20;
access;
symbols
	OPENBSD_5_5:1.19.0.14
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.10
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.8
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.6
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.4
	OPENBSD_5_0:1.19.0.2
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.18.0.8
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.6
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.17.0.12
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.10
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.8
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.6
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.4
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.2
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.11.0.2
	UBC_BASE:1.11
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.19;

1.19
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.10.15.58.51;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.09.19.41.23;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.04.17.20.38;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.30.21.26.17;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.02.23.27.45;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.27.19.37.27;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.17.22.59.52;	author maja;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.22.18.00.09;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.13.00.13.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.12.20.06.08;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.27.06.19.44;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.05.20.56.35;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.04.22.49.00;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.02.55.29;	author downsj;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	97.01.12.15.13.46;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.26;	author deraadt;	state Exp;
branches;
next	;

1.3.14.1
date	2001.07.04.10.15.54;	author niklas;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2001.10.31.02.52.46;	author nate;	state Exp;
branches;
next	1.3.14.3;

1.3.14.3
date	2001.12.05.00.39.09;	author niklas;	state Exp;
branches;
next	1.3.14.4;

1.3.14.4
date	2002.03.06.00.57.22;	author niklas;	state Exp;
branches;
next	1.3.14.5;

1.3.14.5
date	2003.03.27.23.19.21;	author niklas;	state Exp;
branches;
next	1.3.14.6;

1.3.14.6
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;

1.11.2.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2003.05.19.21.39.16;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: vmparam.h,v 1.19 2011/03/23 16:54:34 pirofti Exp $	*/
/*	$NetBSD: vmparam.h,v 1.16 1998/08/20 08:33:48 kleink Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: vmparam.h 1.16 91/01/18$
 *
 *	@@(#)vmparam.h	8.2 (Berkeley) 4/19/94
 */

#ifndef _MACHINE_VMPARAM_H_
#define	_MACHINE_VMPARAM_H_

/*
 * Machine dependent constants for HP300
 */

/* address where direct translation starts */
#define	HP300_DIRECT_BASE	0xc0000000

#include <m68k/vmparam.h>

#undef	VM_MAX_KERNEL_ADDRESS
#define	VM_MAX_KERNEL_ADDRESS	(HP300_DIRECT_BASE - PAGE_SIZE)

/*
 * Constants which control the way the VM system deals with memory segments.
 * The hp300 only has one physical memory segment.
 */
#define	VM_PHYSSEG_MAX		1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_RANDOM

#endif /* _MACHINE_VMPARAM_H_ */
@


1.19
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2009/06/10 15:58:51 miod Exp $	*/
@


1.18
log
@Allow /dev/kmem reads in the direct mapping region where there is
corresponding physical memory; makes procmap(8) happy on hp300.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2006/07/09 19:41:23 miod Exp $	*/
d42 2
a43 2
#ifndef _HP300_VMPARAM_H_
#define	_HP300_VMPARAM_H_
d64 1
a64 1
#endif /* _HP300_VMPARAM_H_ */
@


1.17
log
@If running on a 68030 or 68040 system, use the transparent translation
registers to program an 1GB untranslated window over the physical memory,
and use it to define __HAVE_PMAP_DIRECT for faster pool operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2006/06/04 17:20:38 miod Exp $	*/
d49 3
d55 1
a55 1
#define	VM_MAX_KERNEL_ADDRESS	(0xc0000000 - PAGE_SIZE)
@


1.16
log
@When VM_PHYSSEG_MAX is 1, use VM_PSTRAT_RANDOM for VM_PHYSSEG_STRAT, this
makes uvm_page.o smaller.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2004/12/30 21:26:17 miod Exp $	*/
d50 3
@


1.15
log
@Kill the EIOMAPSIZE and instead, dynamically size the external I/O map,
based on the DIO-II space probing results.

This does not win much for now, but this will be very useful for SGC bus
support (coming soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2003/06/02 23:27:45 millert Exp $	*/
d56 1
a56 1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2003/01/27 19:37:27 miod Exp $	*/
a49 10

/*
 * External IO space map size.
 * By default we make it large enough to map up to 3 DIO-II devices and
 * the complete DIO space.  For a 320-only configuration (which has no
 * DIO-II) you could define a considerably smaller region.
 */
#ifndef EIOMAPSIZE
#define EIOMAPSIZE	3584		/* 14mb */
#endif
@


1.13
log
@Convert m68k pmap from physseg to VM_PAGE_MD.

This allows us to remove some ambiguities on how some functions are called,
remove some diagnostic checks for conditions that can never happen and
remove the ugly hack with "pmap_initialized".

Then, rework internal function interfaces and some logic so as to stop
fetching vm_page from a pa and the reverse every now and then - this makes
some pmap operations run much faster.

per art@@'s idea.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2002/02/17 22:59:52 maja Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2001/12/05 16:25:44 art Exp $	*/
d53 1
a53 56
/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack.  LOWPAGES and HIGHPAGES are
 * the number of pages from the beginning of the P0 region to the
 * beginning of the text and from the beginning of the P1 region to the
 * beginning of the stack respectively.
 *
 * NOTE: the ONLY reason that HIGHPAGES is 0x100 instead of UPAGES (3)
 * is for HPUX compatibility.  Why??  Because HPUX's debuggers
 * have the user's stack hard-wired at FFF00000 for post-mortems,
 * and we must be compatible...
 */
#define	USRTEXT		8192
#define	USRSTACK	(-HIGHPAGES*NBPG)	/* Start of user stack */
#define	LOWPAGES	0
#define HIGHPAGES	(0x100000/NBPG)

/*
 * Virtual memory related constants, all in bytes
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(8*1024*1024)		/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(64*1024*1024)		/* max data size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(512*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		MAXDSIZ			/* max stack size */
#endif

/*
 * Sizes of the system and user portions of the system page table.
 */
#define	USRPTSIZE 	(1 * NPTEPG)	/* 4mb */

/*
 * PTEs for mapping user space into the kernel for phyio operations.
 * One page is enough to handle 4Mb of simultaneous raw IO operations.
 */
#ifndef USRIOSIZE
#define USRIOSIZE	(1 * NPTEPG)	/* 4mb */
#endif

/*
 * PTEs for system V style shared memory.
 * This is basically slop for kmempt which we actually allocate (malloc) from.
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	1024		/* 4mb */
#endif
a65 27
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20

/* user/kernel map constants */
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)0xFFF00000)
#define VM_MAX_ADDRESS		((vaddr_t)0xFFF00000)
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xFFFFF000)

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

/* # of kernel PT pages (initial only, can grow dynamically) */
#define VM_KERNEL_PT_PAGES	((vsize_t)2)

/* pcb base */
#define	pcbb(p)		((u_int)(p)->p_addr)

/*
a70 13
#define	VM_PHYSSEG_NOADD

#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0

/*
 * pmap-specific data stored in the vm_physmem[] array.
 */
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pv_entry *pvent;		/* pv table for this seg */
	char *attrs;			/* page attributes for this seg */
};
@


1.11
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2001/11/30 17:37:43 art Exp $	*/
a138 1
#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
@


1.11.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2001/12/05 16:25:44 art Exp $	*/
d139 1
@


1.11.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 56
a108 1
#include <m68k/vmparam.h>
d121 27
d153 13
@


1.10
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2001/09/22 18:00:09 miod Exp $	*/
a139 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
@


1.9
log
@Remove more old, dusty, unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2001/08/13 00:13:05 miod Exp $	*/
d163 1
@


1.8
log
@SYSPTSIZE is orhpaned, so g/c the poor define.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2001/08/12 20:06:08 miod Exp $	*/
a89 10
 * Default sizes of swap allocation chunks (see dmap.h).
 * The actual values may be changed in vminit() based on MAXDSIZ.
 * With MAXDSIZ of 16Mb and NDMAP of 38, dmmax will be 1024.
 * DMMIN should be at least ctod(1) so that vtod() works.
 * vminit() insures this.
 */
#define	DMMIN	32			/* smallest swap allocation */
#define	DMMAX	4096			/* largest potential swap allocation */

/*
a129 12

/*
 * A swapped in process is given a small amount of core without being bothered
 * by the page replacement algorithm.  Basically this says that if you are
 * swapped in you deserve some resources.  We protect the last SAFERSS
 * pages against paging and will just swap you out rather than paging you.
 */
#define	SAFERSS		4		/* nominal ``small'' resident set size
					   protected against replacement */
/*
 * Mach derived constants
 */
@


1.7
log
@KUSER_AREA, BTOPUSRSTACK, P1PAGES are never used, so get rid of them.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2001/06/27 06:19:44 art Exp $	*/
a101 2
/* SYSPTSIZE IS SILLY; IT SHOULD BE COMPUTED AT BOOT TIME */
#define	SYSPTSIZE	(2 * NPTEPG)	/* 8mb */
d166 1
a166 1
#define VM_KERNEL_PT_PAGES	((vsize_t)2)		/* XXX: SYSPTSIZE */
@


1.6
log
@MNN is no longer an option.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2001/05/05 20:56:35 art Exp $	*/
a66 2
#define	BTOPUSRSTACK	(0x100000-HIGHPAGES)	/* btop(USRSTACK) */
#define P1PAGES		0x100000
@


1.5
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2001/05/04 22:49:00 aaron Exp $	*/
a173 3

/* Use new VM page bootstrap interface. */
#define	MACHINE_NEW_NONCONTIG
@


1.4
log
@Substantial update from NetBSD, most notably gives us UVM support; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 1997/01/15 02:55:29 downsj Exp $	*/
a134 12
 * Boundary at which to place first MAPMEM segment if not explicitly
 * specified.  Should be a power of two.  This allows some slop for
 * the data segment to grow underneath the first mapped segment.
 */
#define MMSEG		0x200000

/*
 * The size of the clock loop.
 */
#define	LOOPPAGES	(maxfree - firstfree)

/*
a149 11
 * Note that each process has at least UPAGES+CLSIZE pages which are not
 * paged anyways (this is currently 8+2=10 pages or 5k bytes), so this
 * number just means a swapped in process is given around 25k bytes.
 * Just for fun: current memory prices are 4600$ a megabyte on VAX (4/22/81),
 * so we loan each swapped in process memory worth 100$, or just admit
 * that we don't consider it worthwhile and swap it out to disk which costs
 * $30/mb or about $0.75.
 * Update: memory prices have changed recently (9/96). At the current    
 * value of $6 per megabyte, we lend each swapped in process memory worth
 * $0.15, or just admit that we don't consider it worthwhile and swap it out
 * to disk which costs $0.20/MB, or just under half a cent. 
a152 62

/*
 * DISKRPM is used to estimate the number of paging i/o operations
 * which one can expect from a single disk controller.
 */
#define	DISKRPM		60

/*
 * Klustering constants.  Klustering is the gathering
 * of pages together for pagein/pageout, while clustering
 * is the treatment of hardware page size as though it were
 * larger than it really is.
 *
 * KLMAX gives maximum cluster size in CLSIZE page (cluster-page)
 * units.  Note that ctod(KLMAX*CLSIZE) must be <= DMMIN in dmap.h.
 * ctob(KLMAX) should also be less than MAXPHYS (in vm_swp.c)
 * unless you like "big push" panics.
 */

#define	KLMAX	(4/CLSIZE)
#define	KLSEQL	(2/CLSIZE)		/* in klust if vadvise(VA_SEQL) */
#define	KLIN	(4/CLSIZE)		/* default data/stack in klust */
#define	KLTXT	(4/CLSIZE)		/* default text in klust */
#define	KLOUT	(4/CLSIZE)

/*
 * KLSDIST is the advance or retard of the fifo reclaim for sequential
 * processes data space.
 */
#define	KLSDIST	3		/* klusters advance/retard for seq. fifo */

/*
 * Paging thresholds (see vm_sched.c).
 * Strategy of 1/19/85:
 *	lotsfree is 512k bytes, but at most 1/4 of memory
 *	desfree is 200k bytes, but at most 1/8 of memory
 */
#define	LOTSFREE	(512 * 1024)
#define	LOTSFREEFRACT	4
#define	DESFREE		(200 * 1024)
#define	DESFREEFRACT	8

/*
 * There are two clock hands, initially separated by HANDSPREAD bytes
 * (but at most all of user memory).  The amount of time to reclaim
 * a page once the pageout process examines it increases with this
 * distance and decreases as the scan rate rises.
 */
#define	HANDSPREAD	(2 * 1024 * 1024)

/*
 * The number of times per second to recompute the desired paging rate
 * and poke the pagedaemon.
 */
#define	RATETOSCHEDPAGING	4

/*
 * Believed threshold (in megabytes) for which interleaved
 * swapping area is desirable.
 */
#define	LOTSOFMEM	2

d166 2
a167 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*CLBYTES)
#define VM_PHYS_SIZE		(USRIOSIZE*CLBYTES)
@


1.3
log
@8k
@
text
@d1 2
a2 2
/*	$OpenBSD: vmparam.h,v 1.2 1997/01/12 15:13:46 downsj Exp $	*/
/*	$NetBSD: vmparam.h,v 1.9 1996/10/20 23:23:28 thorpej Exp $	*/
d46 3
d52 1
d169 4
d243 5
a247 5
#define VM_MIN_ADDRESS		((vm_offset_t)0)
#define VM_MAXUSER_ADDRESS	((vm_offset_t)0xFFF00000)
#define VM_MAX_ADDRESS		((vm_offset_t)0xFFF00000)
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)0xFFFFF000)
d255 1
a255 1
#define VM_KERNEL_PT_PAGES	((vm_size_t)2)		/* XXX: SYSPTSIZE */
d259 24
@


1.3.14.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: vmparam.h,v 1.16 1998/08/20 08:33:48 kleink Exp $	*/
a45 3
#ifndef _HP300_VMPARAM_H_
#define	_HP300_VMPARAM_H_

a48 1

d131 12
d158 7
d168 1
d170 15
a184 1
 * Mach derived constants
d187 5
a191 6
/* user/kernel map constants */
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)0xFFF00000)
#define VM_MAX_ADDRESS		((vaddr_t)0xFFF00000)
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xFFFFF000)
d193 5
a197 4
/* virtual sizes (bytes) for various kernel submaps */
#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)
d199 10
a208 2
/* # of kernel PT pages (initial only, can grow dynamically) */
#define VM_KERNEL_PT_PAGES	((vsize_t)2)		/* XXX: SYSPTSIZE */
d210 7
a216 2
/* pcb base */
#define	pcbb(p)		((u_int)(p)->p_addr)
d219 2
a220 2
 * Constants which control the way the VM system deals with memory segments.
 * The hp300 only has one physical memory segment.
d222 1
a222 3
#define	VM_PHYSSEG_MAX		1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
#define	VM_PHYSSEG_NOADD
d224 5
a228 2
#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0
d231 1
a231 1
 * pmap-specific data stored in the vm_physmem[] array.
a232 4
struct pmap_physseg {
	struct pv_entry *pvent;		/* pv table for this seg */
	char *attrs;			/* page attributes for this seg */
};
d234 17
a250 1
#endif /* _HP300_VMPARAM_H_ */
@


1.3.14.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3.14.1 2001/07/04 10:15:54 niklas Exp $	*/
d67 2
d92 10
d104 2
d145 12
d170 1
a170 1
#define VM_KERNEL_PT_PAGES	((vsize_t)2)
@


1.3.14.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3.14.2 2001/10/31 02:52:46 nate Exp $	*/
a162 1
#define __HAVE_PMAP_PHYSSEG
@


1.3.14.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d139 2
@


1.3.14.5
log
@Sync the SMP branch with 3.3
@
text
@d53 56
a108 1
#include <m68k/vmparam.h>
d121 27
d153 13
@


1.3.14.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3.14.5 2003/03/27 23:19:21 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
a61 1
#define	USRTEXT		NBPG
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: vmparam.h,v 1.7 1994/10/26 07:26:52 cgd Exp $	*/
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
