head	1.31;
access;
symbols
	OPENBSD_5_5:1.30.0.6
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.29.0.6
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.4
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.2
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.27.0.4
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.2
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.24.0.4
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.2
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.4
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.31
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.30;

1.30
date	2013.05.17.19.38.51;	author kettenis;	state Exp;
branches;
next	1.29;

1.29
date	2011.12.21.22.39.11;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.23.03.50.22;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.18.19.32.39;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2009.03.15.20.40.25;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2008.07.18.21.39.16;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.26.05.42.10;	author ray;	state Exp;
branches;
next	1.22;

1.22
date	2007.11.09.17.46.03;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.09.17.32.27;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.25.21.27.15;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.15.13.46.22;	author martin;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.11.20.46.48;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.13.19.39.52;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2005.05.01.09.55.49;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.19.15.29.47;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.14.22.39.29;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.30.16.22.59;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.29.07.35.54;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.22.15.05.05;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.05.01.51.27;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.29.07.35.17;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.03.15.52;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.17.01.13.07;	author miod;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.11.23.00.47.39;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.06.15.25.03;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	99.05.04.19.57.25;	author millert;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	97.09.23.07.09.55;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.04.16.11.56.35;	author downsj;	state Exp;
branches;
next	;

1.3.4.1
date	2001.04.18.16.05.45;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.12.05.00.39.09;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.03.06.00.57.22;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2002.03.28.10.07.18;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.03.27.23.19.21;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2004.02.19.10.48.39;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2003.05.19.21.39.16;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: intr.h,v 1.30 2013/05/17 19:38:51 kettenis Exp $	*/
/*	$NetBSD: intr.h,v 1.2 1997/07/24 05:43:08 scottr Exp $	*/

/*-
 * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_INTR_H_
#define	_MACHINE_INTR_H_

#include <machine/psl.h>
#include <sys/evcount.h>
#include <sys/queue.h>

#ifdef _KERNEL
struct isr {
	LIST_ENTRY(isr) isr_link;
	int		(*isr_func)(void *);
	void		*isr_arg;
	int		isr_ipl;
	int		isr_priority;
	struct evcount	isr_count;
};

#define NISR		8

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0
#define	IPL_SOFTINT	1
#define	IPL_BIO		2
#define	IPL_NET		3
#define	IPL_TTY		4
#define	IPL_VM		5
#define	IPL_AUDIO	6
#define	IPL_CLOCK	6
#define	IPL_STATCLOCK	6
#define	IPL_SCHED	7
#define	IPL_HIGH	7

#define	IPL_MPSAFE	0	/* no "mpsafe" interrupts */

/*
 * This array contains the appropriate PSL_S|PSL_IPL? values
 * to raise interrupt priority to the requested level.
 */
extern	unsigned short hp300_varpsl[NISR];
#define	MD_IPLTOPSL(ipl)	hp300_varpsl[ipl]

/* These spl calls are used by machine-independent code. */
#define	splsoft()		_splraise(PSL_S | PSL_IPL1)
#define	splsoftclock()		splsoft()
#define	splsoftnet()		splsoft()
#define	splbio()		_splraise(hp300_varpsl[IPL_BIO])
#define	splnet()		_splraise(hp300_varpsl[IPL_NET])
#define	spltty()		_splraise(hp300_varpsl[IPL_TTY])
#define	splaudio()		_splraise(PSL_S | PSL_IPL6)
#define	splclock()		_splraise(PSL_S | PSL_IPL6)
#define	splstatclock()		_splraise(PSL_S | PSL_IPL6)
#define	splvm()			_splraise(PSL_S | PSL_IPL5)
#define	splhigh()		_spl(PSL_S | PSL_IPL7)
#define	splsched()		splhigh()

/* watch out for side effects */
#define	splx(s)			((s) & PSL_IPL ? _spl((s)) : spl0())

#include <m68k/intr.h>		/* soft interrupt support */

/* locore.s */
int	spl0(void);

/* intr.c */
void	intr_init(void);
void	intr_establish(struct isr *, const char *);
void	intr_disestablish(struct isr *);
void	intr_dispatch(int);
void	intr_printlevels(void);
#endif /* _KERNEL */

#endif /* _MACHINE_INTR_H_ */
@


1.30
log
@Add a dummy IPL_MPSAFE definition.

ok miod@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.29 2011/12/21 22:39:11 miod Exp $	*/
@


1.29
log
@Allow intr_dispatch() on hp300 to be used on the clock interrupt level
(level 6). Will be used shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.28 2011/03/23 16:54:34 pirofti Exp $	*/
d71 2
@


1.28
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.27 2010/04/23 03:50:22 miod Exp $	*/
d66 1
d86 1
@


1.27
log
@Make sure IPL_SCHED is always defined by MD headers, instead of having a MI
fallback definition in <sys/sched.h>, so that there is no hidden include
ordering requirement between <machine/intr.h> and <sys/sched.h>.
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.26 2009/09/18 19:32:39 miod Exp $	*/
d33 2
a34 2
#ifndef _HP300_INTR_H_
#define	_HP300_INTR_H_
d107 1
a107 1
#endif /* _HP300_INTR_H_ */
@


1.26
log
@Fix conversion of symbolic IPL level to hardware PSL value in the mutex code.
This is a noop on all arches but hp300, where this fixes (at least) IPL_BIO
mutexes.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.25 2009/03/15 20:40:25 miod Exp $	*/
d68 1
@


1.25
log
@Generic softinterrupt code for m68k platforms, now copied from m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.24 2008/07/18 21:39:16 miod Exp $	*/
d75 1
@


1.24
log
@Make IPL_VM level 5, which is guaranteed to be above bio tty and net, instead
of making it dynamic and the smallest value above the former three. Idea
from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.23 2008/06/26 05:42:10 ray Exp $	*/
d61 1
a61 2
#define	IPL_SOFTNET	1
#define	IPL_SOFTCLOCK	1
d92 1
a92 15
/*
 * Simulated software interrupt register.
 */
extern volatile u_int8_t ssir;

#define	SIR_NET		0x01
#define	SIR_CLOCK	0x02

#define	siron(mask)	\
	__asm __volatile ( "orb %1,%0" : "=m" (ssir) : "i" (mask))
#define	siroff(mask)	\
	__asm __volatile ( "andb %1,%0" : "=m" (ssir) : "ir" (~(mask)))

#define	setsoftnet()	siron(SIR_NET)
#define	setsoftclock()	siron(SIR_CLOCK)
@


1.23
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.22 2007/11/09 17:46:03 miod Exp $	*/
d86 1
a86 1
#define	splvm()			_splraise(hp300_varpsl[IPL_VM])
@


1.22
log
@IPL_xxx values on hp300 are logical values (although some of them happen to
match the real hardware level used for them).

So instead of keeping a few loose variables to store the runtime computed
psr bits to use for the logical IPL levels, just keep a complete array of
all psr values. Thus we can have a correct splassert_check().
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.21 2007/11/09 17:32:27 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.21
log
@Get rid of IPL_TTYNOBUF, it was handled exactly like IPL_TTY for years.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.20 2007/05/25 21:27:15 krw Exp $	*/
d57 1
a57 8
/*
 * These four globals contain the appropriate PSL_S|PSL_IPL? values
 * to raise interrupt priority to the requested level.
 */
extern	unsigned short hp300_bioipl;
extern	unsigned short hp300_netipl;
extern	unsigned short hp300_ttyipl;
extern	unsigned short hp300_vmipl;
d70 4
a73 3
#define	IPL_BIO		1
#define	IPL_NET		2
#define	IPL_TTY		3
d78 6
d88 3
a90 3
#define	splbio()		_splraise(hp300_bioipl)
#define	splnet()		_splraise(hp300_netipl)
#define	spltty()		_splraise(hp300_ttyipl)
d93 1
a93 1
#define	splvm()			_splraise(hp300_vmipl)
@


1.20
log
@"interupt" -> "interrupt" in various comments. Mostly from Diego Casati.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.19 2007/05/15 13:46:22 martin Exp $	*/
a79 1
#define	IPL_TTYNOBUF	4 /* XXX */
@


1.19
log
@switch m68k to __HAVE_CPUINFO

help miod@@, art@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.18 2006/06/11 20:46:48 miod Exp $	*/
d59 1
a59 1
 * to raise interupt priority to the requested level.
@


1.18
log
@Factorize spl handling functions and software interrupt routines between
m68k-based platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.17 2006/03/13 19:39:52 brad Exp $	*/
d96 1
@


1.17
log
@remove splimp.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.16 2005/05/01 09:55:49 miod Exp $	*/
a57 34
 * spl functions; all but spl0 are done in-line
 */

#define	_spl(s)								\
({									\
	register int _spl_r;						\
									\
	__asm __volatile ("clrl %0; movew sr,%0; movew %1,sr" :		\
	    "=&d" (_spl_r) : "di" (s));					\
	_spl_r;								\
})

#define	_splraise(s)							\
({									\
	int _spl_r;							\
									\
	__asm __volatile ("						\
		clrl	d0					;	\
		movw	sr,d0					;	\
		movl	d0,%0					;	\
		andw	#0x700,d0				;	\
		movw	%1,d1					;	\
		andw	#0x700,d1				;	\
		cmpw	d0,d1					;	\
		jle	1f					;	\
		movw	%1,sr					;	\
	    1:"							:	\
		    "=&d" (_spl_r)				:	\
		    "di" (s)					:	\
		    "d0", "d1");					\
	_spl_r;								\
})

/*
d109 1
a109 1
	__asm __volatile ( "orb %0,_ssir" : : "i" ((mask)))
d111 1
a111 1
	__asm __volatile ( "andb %0,_ssir" : : "ir" (~(mask)));
@


1.16
log
@Bring raise-only semantics to splsoft* on m68k and m88k, as done elsewhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.15 2005/04/19 15:29:47 mickey Exp $	*/
d98 1
a98 1
extern	unsigned short hp300_impipl;
a125 1
#define	splimp()		_splraise(hp300_impipl)
d128 1
a128 1
#define	splvm()			_splraise(hp300_impipl)
@


1.15
log
@nothing uses spllowersoftclock() anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.14 2005/01/14 22:39:29 miod Exp $	*/
a90 9
/* spl0 requires checking for software interrupts */
#define	spl1()	_spl(PSL_S|PSL_IPL1)
#define	spl2()	_spl(PSL_S|PSL_IPL2)
#define	spl3()	_spl(PSL_S|PSL_IPL3)
#define	spl4()	_spl(PSL_S|PSL_IPL4)
#define	spl5()	_spl(PSL_S|PSL_IPL5)
#define	spl6()	_spl(PSL_S|PSL_IPL6)
#define	spl7()	_spl(PSL_S|PSL_IPL7)

d120 3
a122 2
#define	splsoftclock()		spl1()
#define	splsoftnet()		spl1()
d127 4
a130 4
#define	splclock()		spl6()
#define	splstatclock()		spl6()
#define	splvm()			splimp()
#define	splhigh()		spl7()
d133 1
a133 1
#define	splx(s)		((s) & PSL_IPL ? _spl((s)) : spl0())
@


1.14
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.13 2004/09/30 16:22:59 millert Exp $	*/
a128 1
#define	spllowersoftclock()	spl1()
@


1.13
log
@Protect struct isr with #ifdef _KERNEL since struct evcount is
not visible unless _KERNEL is defined.  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.12 2004/09/29 07:35:54 miod Exp $	*/
a127 5
/* These spl calls are _not_ to be used by machine-independent code. */
#define	splhil()	_splraise(PSL_S|PSL_IPL1)
#define	splkbd()	splhil()
#define	splsoft()	spl1()

d129 3
a131 3
#define	spllowersoftclock()	splsoft()
#define	splsoftclock()		splsoft()
#define	splsoftnet()		splsoft()
@


1.12
log
@Switch hp300 to evcount.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.11 2003/12/22 15:05:05 millert Exp $	*/
d47 1
a56 1
#ifdef _KERNEL
@


1.11
log
@IPL_HIGH should be 7, not 6.  This is purely cosmetic as that value is
not actually used but it makes things consistent wrt spls and potential
future splasserts.  miod@@ OK.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.10 2003/01/05 01:51:27 miod Exp $	*/
d44 1
a44 2

#ifdef _HP300_INTR_H_PRIVATE
a46 7
/*
 * The location and size of the autovectored interrupt portion
 * of the vector table.
 */
#define ISRLOC		0x18
#define NISR		8

d53 1
a54 1
#endif /* _HP300_INTR_H_PRIVATE */
d170 2
a171 2
void	*intr_establish(int (*)(void *), void *, int, int);
void	intr_disestablish(void *);
@


1.10
log
@splassert on m68k-based arches. Not totally accurate on hp300 at the moment,
still.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.9 2002/04/29 07:35:17 miod Exp $	*/
d134 1
a134 1
#define	IPL_HIGH	6
@


1.9
log
@Define placeholders for art's splassert() debugging stuff on all arches.
Currently as no-ops everywhere.

ok art@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.8 2002/03/14 03:15:52 millert Exp $	*/
a63 22
/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0	/* disable only this interrupt */
#define	IPL_BIO		1	/* disable block I/O interrupts */
#define	IPL_NET		2	/* disable network interrupts */
#define	IPL_TTY		3	/* disable terminal interrupts */
#define	IPL_TTYNOBUF	4	/* IPL_TTY + higher ISR priority */
#define	IPL_CLOCK	5	/* disable clock interrupts */
#define	IPL_HIGH	6	/* disable all interrupts */

/*
 * Convert PSL values to CPU IPLs and vice-versa.
 */
#define	PSLTOIPL(x)	(((x) >> 8) & 0xf)
#define	IPLTOPSL(x)	((((x) & 0xf) << 8) | PSL_S)

a68 3
/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

d116 19
@


1.8
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.7 2002/03/14 01:26:31 millert Exp $	*/
d90 3
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.6 2001/12/17 01:13:07 miod Exp $	*/
d181 1
a181 1
void	*intr_establish __P((int (*)(void *), void *, int, int));
@


1.6
log
@Decrease splvm() level to the splimp() level.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.5 2001/11/23 00:47:39 miod Exp $	*/
d57 1
a57 1
	int		(*isr_func) __P((void *));
d177 1
a177 1
int	spl0 __P((void));
d180 1
a180 1
void	intr_init __P((void));
d182 3
a184 3
void	intr_disestablish __P((void *));
void	intr_dispatch __P((int));
void	intr_printlevels __P((void));
@


1.6.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.6 2001/12/17 01:13:07 miod Exp $	*/
d57 1
a57 1
	int		(*isr_func)(void *);
a90 3
/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

d177 1
a177 1
int	spl0(void);
d180 5
a184 5
void	intr_init(void);
void	*intr_establish(int (*)(void *), void *, int, int);
void	intr_disestablish(void *);
void	intr_dispatch(int);
void	intr_printlevels(void);
@


1.6.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 22
d91 3
a140 19

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0
#define	IPL_SOFTNET	1
#define	IPL_SOFTCLOCK	1
#define	IPL_BIO		1
#define	IPL_NET		2
#define	IPL_TTY		3
#define	IPL_TTYNOBUF	4 /* XXX */
#define	IPL_CLOCK	6
#define	IPL_STATCLOCK	6
#define	IPL_HIGH	6
@


1.5
log
@Remove splsched() declaration and related stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2000/07/06 15:25:03 ho Exp $	*/
d154 1
a154 1
#define	splvm()			spl6()
@


1.4
log
@Add spllowersoftclock(), same as splsoftclock(). (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 1999/05/04 19:57:25 millert Exp $	*/
a155 1
#define	splsched()		spl7()
@


1.3
log
@Change "&=" to "=&", make egcs happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 1997/09/23 07:09:55 downsj Exp $	*/
d145 12
a156 11
#define	splsoftclock()	splsoft()
#define	splsoftnet()	splsoft()
#define	splbio()	_splraise(hp300_bioipl)
#define	splnet()	_splraise(hp300_netipl)
#define	spltty()	_splraise(hp300_ttyipl)
#define	splimp()	_splraise(hp300_impipl)
#define	splclock()	spl6()
#define	splstatclock()	spl6()
#define	splvm()		spl6()
#define	splhigh()	spl7()
#define	splsched()	spl7()
@


1.3.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2000/07/06 15:25:03 ho Exp $	*/
d145 11
a155 12
#define	spllowersoftclock()	splsoft()
#define	splsoftclock()		splsoft()
#define	splsoftnet()		splsoft()
#define	splbio()		_splraise(hp300_bioipl)
#define	splnet()		_splraise(hp300_netipl)
#define	spltty()		_splraise(hp300_ttyipl)
#define	splimp()		_splraise(hp300_impipl)
#define	splclock()		spl6()
#define	splstatclock()		spl6()
#define	splvm()			spl6()
#define	splhigh()		spl7()
#define	splsched()		spl7()
@


1.3.4.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3.4.1 2001/04/18 16:05:45 niklas Exp $	*/
d156 1
@


1.3.4.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d154 1
a154 1
#define	splvm()			splimp()
@


1.3.4.4
log
@Merge in -current from about a week ago
@
text
@d57 1
a57 1
	int		(*isr_func)(void *);
d177 1
a177 1
int	spl0(void);
d180 5
a184 5
void	intr_init(void);
void	*intr_establish(int (*)(void *), void *, int, int);
void	intr_disestablish(void *);
void	intr_dispatch(int);
void	intr_printlevels(void);
@


1.3.4.5
log
@Sync the SMP branch with 3.3
@
text
@d64 22
a137 19

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0
#define	IPL_SOFTNET	1
#define	IPL_SOFTCLOCK	1
#define	IPL_BIO		1
#define	IPL_NET		2
#define	IPL_TTY		3
#define	IPL_TTYNOBUF	4 /* XXX */
#define	IPL_CLOCK	6
#define	IPL_STATCLOCK	6
#define	IPL_HIGH	6
@


1.3.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d134 1
a134 1
#define	IPL_HIGH	7
@


1.2
log
@Some NetBSD changes, up to NETBSD_CURRENT_970921.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 1997/04/16 11:56:35 downsj Exp $	*/
d96 1
a96 1
	    "&=d" (_spl_r) : "di" (s));					\
d115 1
a115 1
		    "&=d" (_spl_r)				:	\
@


1.1
log
@Merge portions of NetBSD up to 970415.

This includes:
	* All of the prototyping and KNF changes.
	* The new interrupt system.
	* Portions of the Domain Keyboard support from Mike Smith.

This does not include:
	* m68k changes, namely generic dumps.

Various sundry changes and fixes by me.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: intr.h,v 1.1 1997/04/14 02:28:51 thorpej Exp $	*/
d102 1
a102 1
	register int _spl_r;						\
d104 14
a117 3
	__asm __volatile ("clrl %0; movew sr,%0;" : "&=d" (_spl_r) : );	\
	if ((_spl_r & PSL_IPL) < ((s) & PSL_IPL))			\
		__asm __volatile ("movew %0,sr;" : : "di" (s));		\
@
