head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2013.02.02.13.34.29;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.24.21.36.39;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.14.22.39.26;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: rboxreg.h,v 1.3 2013/02/02 13:34:29 miod Exp $	*/
/*	$NetBSD: grf_rbreg.h,v 1.4 1994/10/26 07:24:03 cgd Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grf_rbreg.h 1.9 92/01/21$
 *
 *	@@(#)grf_rbreg.h	8.1 (Berkeley) 6/10/93
 */

/*
 * Map of the Renaissance frame buffer controller chip in memory ...
 */

#define rb_waitbusy(regaddr)						\
do {									\
	while (((volatile struct rboxfb *)(regaddr))->wbusy & 0x01)	\
		DELAY(10);						\
} while (0)

#define	RBOX_DUALROP(rop)	((rop) << 4 | (rop))

#define	CM1RED(fb)	((volatile struct rencm  *)((fb)->regkva + 0x6400))
#define	CM1GRN(fb)	((volatile struct rencm  *)((fb)->regkva + 0x6800))
#define	CM1BLU(fb)	((volatile struct rencm  *)((fb)->regkva + 0x6C00))
#define	CM2RED(fb)	((volatile struct rencm  *)((fb)->regkva + 0x7400))
#define	CM2GRN(fb)	((volatile struct rencm  *)((fb)->regkva + 0x7800))
#define	CM2BLU(fb)	((volatile struct rencm  *)((fb)->regkva + 0x7C00))

struct rencm {
	u_int8_t  :8, :8, :8;
	u_int8_t value;
};

struct rboxfb {
	struct diofbreg regs;
	u_int8_t filler2[16359];
	u_int8_t wbusy;			/* window mover is active     0x4047 */
	u_int8_t filler3[0x405b - 0x4048];
	u_int8_t scanbusy;		/* scan converteris active    0x405B */
	u_int8_t filler3b[0x4083 - 0x405c];
	u_int8_t video_enable;   	/* drive vid. refresh bus     0x4083 */
	u_int8_t filler4[3];
	u_int8_t display_enable;	/* enable the display	      0x4087 */
	u_int8_t filler5[8];
	u_int32_t write_enable;		/* write enable register      0x4090 */
	u_int8_t filler6[11];
	u_int8_t wmove;			/* start window mover	      0x409f */
	u_int8_t filler7[3];
	u_int8_t blink;			/* blink register	      0x40a3 */
	u_int8_t filler8[15];
	u_int8_t fold;			/* fold  register	      0x40b3 */
	u_int32_t opwen;		/* overlay plane write enable 0x40b4 */
	u_int8_t filler9[3];
	u_int8_t tmode;			/* Tile mode size	      0x40bb */
	u_int8_t filler9a[3];
	u_int8_t drive;			/* drive register	      0x40bf */
	u_int8_t filler10[3];
	u_int8_t vdrive;		/* vdrive register	      0x40c3 */
	u_int8_t filler10a[0x40cb-0x40c4];
	u_int8_t zconfig;		/* Z-buffer mode	      0x40cb */
	u_int8_t filler11a[2];
	u_int16_t tpatt;		/* Transparency pattern	      0x40ce */
	u_int8_t filler11b[3];
	u_int8_t dmode;			/* dither mode		      0x40d3 */
	u_int8_t filler11c[3];
	u_int8_t en_scan;		/* enable scan board to DTACK 0x40d7 */
	u_int8_t filler11d[0x40ef-0x40d8];
	u_int8_t rep_rule;		/* replacement rule	      0x40ef */
	u_int8_t filler12[2];
	u_int16_t source_x;		/* source x		      0x40f2 */
	u_int8_t filler13[2];
	u_int16_t source_y;		/* source y		      0x40f6 */
	u_int8_t filler14[2];
	u_int16_t dest_x;		/* dest x		      0x40fa */
	u_int8_t filler15[2];
	u_int16_t dest_y;		/* dest y		      0x40fe */
	u_int8_t filler16[2];
	u_int16_t wwidth;		/* window width		      0x4102 */
	u_int8_t filler17[2];
	u_int16_t wheight;		/* window height	      0x4106 */
	u_int8_t filler18[18];
	u_int16_t patt_x;		/* pattern x		      0x411a */
	u_int8_t filler19[2];
	u_int16_t patt_y;		/* pattern y		      0x411e */
	u_int8_t filler20[0x8012 - 0x4120];
	u_int16_t te_status;		/* transform engine status    0x8012 */
	u_int8_t filler21[0x1ffff-0x8014];
} __packed;
@


1.3
log
@hp300 ELF bits. Requires many device and prom related structs to now be declared
as packed due to them containing 32-bit types at 16-bit but not 32-bit aligned
offsets. The boot block updates (especially mkboot) come straight from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: rboxreg.h,v 1.2 2005/01/24 21:36:39 miod Exp $	*/
@


1.2
log
@Switch hp300 wscons code to rasops, for DIO frame buffers.
Features:
- coloured kernel messages
- color support in console (use TERM=wsvt25)
- pretty Gallant wsfont, rather than the acceptable or ugly (depending upon
  the frame buffer) ROM font
- colormap ioctl support for Gatorbox and Topcat; DaVinci and Renaissance
  not done due to lack of hardware and/or documentation
- even more code factorization

tested on hyperion, and 4/6/8bpp catseye/topcat/kathmandu hardware, by
millert@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: rboxreg.h,v 1.1 2005/01/14 22:39:26 miod Exp $	*/
d120 1
a120 1
};
@


1.1
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
a67 26
	u_int8_t :8;
	u_int8_t reset;			/* reset register		0x01 */
	u_int8_t fb_address;		/* frame buffer address 	0x02 */
	u_int8_t interrupt;		/* interrupt register		0x03 */
	u_int8_t :8;
	u_int8_t fbwmsb;		/* frame buffer width MSB	0x05 */
	u_int8_t :8;
	u_int8_t fbwlsb;		/* frame buffer width MSB	0x07 */
	u_int8_t :8;
	u_int8_t fbhmsb;		/* frame buffer height MSB	0x09 */
	u_int8_t :8;
	u_int8_t fbhlsb;		/* frame buffer height MSB	0x0b */
	u_int8_t :8;
	u_int8_t dwmsb;			/* display width MSB		0x0d */
	u_int8_t :8;
	u_int8_t dwlsb;			/* display width MSB		0x0f */
	u_int8_t :8;
	u_int8_t dhmsb;			/* display height MSB		0x11 */
	u_int8_t :8;
	u_int8_t dhlsb;			/* display height MSB		0x13 */
	u_int8_t :8;
	u_int8_t fbid;			/* frame buffer id		0x15 */
	u_int8_t filler1[0x47];
	u_int8_t fbomsb;		/* frame buffer offset MSB	0x5d */
	u_int8_t :8;
	u_int8_t fbolsb;		/* frame buffer offset LSB	0x5f */
@

