head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8;
locks; strict;
comment	@ * @;


1.14
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2008.07.30.18.08.02;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.14.21.51.55;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.22.21.11.12;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.22.21.07.29;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.29.07.35.52;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.30.17.01.43;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.25.21.00.37;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.25.20.57.38;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.21.18.01.55;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.21.18.00.26;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.21.17.58.34;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.19.10.22.01;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.03.21.46.56;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/* $OpenBSD: spc.c,v 1.13 2008/07/30 18:08:02 miod Exp $ */
/* $NetBSD: spc.c,v 1.2 2003/11/17 14:37:59 tsutsui Exp $ */

/*
 * Copyright (c) 2003 Izumi Tsutsui.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/buf.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <machine/intr.h>

#include <hp300/dev/dioreg.h>
#include <hp300/dev/diovar.h>
#include <hp300/dev/diodevs.h>

#include <scsi/scsi_all.h>
#include <scsi/scsi_message.h>
#include <scsi/scsiconf.h>

#include <hp300/dev/mb89352reg.h>
#include <hp300/dev/mb89352var.h>

#include <hp300/dev/hp98265reg.h>
#include <hp300/dev/dmareg.h>
#include <hp300/dev/dmavar.h>

#ifdef USELEDS
#include <hp300/hp300/leds.h>
#endif

int  spc_dio_match(struct device *, void *, void *);
void spc_dio_attach(struct device *, struct device *, void *);
int  spc_dio_dmastart(struct spc_softc *, void *, size_t, int);
int  spc_dio_dmadone(struct spc_softc *);
void spc_dio_dmago(void *);
void spc_dio_dmastop(void *);
int  spc_dio_intr(void *);
void spc_dio_reset(struct spc_softc *);

#define	HPSPC_ADDRESS(o)	(dsc->sc_dregs + ((o) << 1) + 1)
#define	hpspc_read(o)		*(volatile u_int8_t *)(HPSPC_ADDRESS(o))
#define	hpspc_write(o, v)	*(volatile u_int8_t *)(HPSPC_ADDRESS(o)) = (v)

struct spc_dio_softc {
	struct spc_softc sc_spc;	/* MI spc softc */
	struct isr sc_isr;
	volatile u_int8_t *sc_dregs;	/* Complete registers */

	struct dmaqueue sc_dq;		/* DMA job queue */
	u_int sc_dflags;		/* DMA flags */
#define SCSI_DMA32	0x01		/* 32-bit DMA should be used */
#define SCSI_HAVEDMA	0x02		/* controller has DMA channel */
#define SCSI_DATAIN	0x04		/* DMA direction */
};

struct cfattach spc_ca = {
	sizeof(struct spc_dio_softc), spc_dio_match, spc_dio_attach
};

struct cfdriver spc_cd = {
	NULL, "spc", DV_DULL
};

/* cf_flags */
#define	SPC_NODMA	0x01

int
spc_dio_match(struct device *parent, void *vcf, void *aux)
{
	struct dio_attach_args *da = aux;

	switch (da->da_id) {
	case DIO_DEVICE_ID_SCSI0:
	case DIO_DEVICE_ID_SCSI1:
	case DIO_DEVICE_ID_SCSI2:
	case DIO_DEVICE_ID_SCSI3:
		return 1;
	}

	return 0;
}

void
spc_dio_attach(struct device *parent, struct device *self, void *aux)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)self;
	struct spc_softc *sc = &dsc->sc_spc;
	struct dio_attach_args *da = aux;
	int ipl;
	u_int8_t id, hconf;

	dsc->sc_dregs = (u_int8_t *)iomap(dio_scodetopa(da->da_scode),
	    da->da_size);
	if (dsc->sc_dregs == NULL) {
		printf(": can't map SCSI registers\n");
		return;
	}
	sc->sc_regs = dsc->sc_dregs + SPC_OFFSET;

	ipl = DIO_IPL(sc->sc_regs);
	printf(" ipl %d: 98265A SCSI", ipl);

	hpspc_write(HPSCSI_ID, 0xff);
	DELAY(100);
	id = hpspc_read(HPSCSI_ID);
	hconf = hpspc_read(HPSCSI_HCONF);

	if ((id & ID_WORD_DMA) == 0) {
		printf(", 32-bit DMA");
		dsc->sc_dflags |= SCSI_DMA32;
	}
	if ((hconf & HCONF_PARITY) == 0)
		printf(", no parity");

	printf("\n");

	if ((hconf & HCONF_PARITY) != 0)
		sc->sc_ctlflags = SCTL_PARITY_ENAB;

	id &= ID_MASK;
	sc->sc_initiator = id;

	if ((sc->sc_dev.dv_cfdata->cf_flags & SPC_NODMA) == 0) {
		sc->sc_dma_start = spc_dio_dmastart;
		sc->sc_dma_done  = spc_dio_dmadone;
	}
	sc->sc_reset = spc_dio_reset;

	dsc->sc_dq.dq_softc = dsc;
	dsc->sc_dq.dq_start = spc_dio_dmago;
	dsc->sc_dq.dq_done  = spc_dio_dmastop;

	hpspc_write(HPSCSI_CSR, 0x00);
	hpspc_write(HPSCSI_HCONF, 0x00);

	dsc->sc_isr.isr_func = spc_dio_intr;
	dsc->sc_isr.isr_arg = dsc;
	dsc->sc_isr.isr_ipl = ipl;
	dsc->sc_isr.isr_priority = IPL_BIO;
	dio_intr_establish(&dsc->sc_isr, self->dv_xname);

	spc_attach(sc);

	/* Enable SPC interrupts. */
	hpspc_write(HPSCSI_CSR, CSR_IE);
}

int
spc_dio_dmastart(struct spc_softc *sc, void *addr, size_t size, int datain)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)sc;

	/*
	 * The HP98658 hardware cannot do odd length transfers, the
	 * last byte of data will always be 0x00.
	 */
	if ((size & 1) != 0)
		return (EINVAL);

	dsc->sc_dq.dq_chan = DMA0 | DMA1;
	dsc->sc_dflags |= SCSI_HAVEDMA;
	if (datain)
		dsc->sc_dflags |= SCSI_DATAIN;
	else
		dsc->sc_dflags &= ~SCSI_DATAIN;

	if (dmareq(&dsc->sc_dq) != 0)
		/* DMA channel is available, so start DMA immediately */
		spc_dio_dmago((void *)dsc);
	/* else dma start function will be called later from dmafree(). */

	return (0);
}

void
spc_dio_dmago(void *arg)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)arg;
	struct spc_softc *sc = &dsc->sc_spc;
	int len, chan;
	u_int32_t dmaflags;
	u_int8_t cmd;

	hpspc_write(HPSCSI_HCONF, 0);
	cmd = CSR_IE;
	dmaflags = DMAGO_NOINT;
	chan = dsc->sc_dq.dq_chan;
	if ((dsc->sc_dflags & SCSI_DATAIN) != 0) {
		cmd |= CSR_DMAIN;
		dmaflags |= DMAGO_READ;
	}
	if ((dsc->sc_dflags & SCSI_DMA32) != 0 &&
	    ((u_int)sc->sc_dp & 3) == 0 &&
	    (sc->sc_dleft & 3) == 0) {
		cmd |= CSR_DMA32;
		dmaflags |= DMAGO_LWORD;
	} else {
		dmaflags |= DMAGO_WORD;
	}

	sc->sc_flags |= SPC_DOINGDMA;
	dmago(chan, sc->sc_dp, sc->sc_dleft, dmaflags);

	hpspc_write(HPSCSI_CSR, cmd);
	cmd |= (chan == 0) ? CSR_DE0 : CSR_DE1;
	hpspc_write(HPSCSI_CSR, cmd);

	cmd = SCMD_XFR;
	len = sc->sc_dleft;

	if ((len & (DEV_BSIZE -1)) != 0) {
		cmd |= SCMD_PAD;
#if 0
		/*
		 * XXX - If we don't do this, the last 2 or 4 bytes
		 * (depending on word/lword DMA) of a read get trashed.
		 * It looks like it is necessary for the DMA to complete
		 * before the SPC goes into "pad mode"???  Note: if we
		 * also do this on a write, the request never completes.
		 */
		if ((dsc->sc_dflags & SCSI_DATAIN) != 0)
			len += 2;
#endif
	}

	spc_write(TCH, len >> 16);
	spc_write(TCM, len >>  8);
	spc_write(TCL, len);
	spc_write(PCTL, sc->sc_phase | PCTL_BFINT_ENAB);
	spc_write(SCMD, cmd);
}

int
spc_dio_dmadone(struct spc_softc *sc)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)sc;
	int resid, trans;
	u_int8_t cmd;

	/* Check if the DMA operation is finished. */
	if ((spc_read(SSTS) & SSTS_BUSY) != 0)
		return (0);

	sc->sc_flags &= ~SPC_DOINGDMA;
	if ((dsc->sc_dflags & SCSI_HAVEDMA) != 0) {
		dsc->sc_dflags &= ~SCSI_HAVEDMA;
		dmafree(&dsc->sc_dq);
	}

	cmd = hpspc_read(HPSCSI_CSR);
	cmd &= ~(CSR_DE1 | CSR_DE0);
	hpspc_write(HPSCSI_CSR, cmd);

	resid = spc_read(TCH) << 16 |
	    spc_read(TCM) << 8 |
	    spc_read(TCL);
	trans = sc->sc_dleft - resid;
	sc->sc_dp += trans;
	sc->sc_dleft -= trans;

	return (1);
}

void
spc_dio_dmastop(void *arg)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)arg;
	struct spc_softc *sc = &dsc->sc_spc;
	u_int8_t cmd;

	cmd = hpspc_read(HPSCSI_CSR);
	cmd &= ~(CSR_DE1 | CSR_DE0);
	hpspc_write(HPSCSI_CSR, cmd);

	dsc->sc_dflags &= ~SCSI_HAVEDMA;
	sc->sc_flags &= ~SPC_DOINGDMA;
}

int
spc_dio_intr(void *arg)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)arg;

	/* if we are sharing the ipl level, this interrupt may not be for us. */
	if ((hpspc_read(HPSCSI_CSR) & (CSR_IE | CSR_IR)) != (CSR_IE | CSR_IR))
		return (0);

#ifdef USELEDS
	ledcontrol(0, 0, LED_DISK);
#endif

	return (spc_intr(arg));
}

void
spc_dio_reset(struct spc_softc *sc)
{
	struct spc_dio_softc *dsc = (struct spc_dio_softc *)sc;

	spc_reset(sc);
	hpspc_write(HPSCSI_HCONF, 0x00);
}
@


1.13
log
@Do not print adapter target id on the attachment line, now that scsibus(4)
prints it. These should be the last offenders.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.12 2005/11/14 21:51:55 miod Exp $ */
@


1.12
log
@Restore the disk blinkenlichten lost with the new scsi code, and hp300 users
like me again.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.11 2004/12/22 21:11:12 miod Exp $ */
d143 1
a143 2
	id &= ID_MASK;
	printf(", SCSI ID %d\n", id);
d148 1
@


1.11
log
@Upon SCSI command timeout, check if we have missed a DMA completion,
and if so, resume to regular phase change processing (due to the way this
SCSI controller works, it is not possible to rely upon DMA completion
interrupts).

While there, bring back openings to 2 in all cases, and move timeout_del()
to spc_done().

Tested by deraadt@@, millert@@ and I.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.10 2004/12/22 21:07:29 miod Exp $ */
d55 4
d314 5
a318 1
		return 0;
d320 1
a320 1
	return spc_intr(arg);
@


1.10
log
@Do not use DMA for odd-size transfers, as the last byte will not be
transferred correctly.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.9 2004/09/29 07:35:52 miod Exp $ */
d58 1
a58 1
void spc_dio_dmadone(struct spc_softc *);
d221 1
a221 1
	} else
d223 1
d257 1
a257 1
void
d266 1
a266 1
		return;
d284 2
@


1.9
log
@Switch hp300 to evcount.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.8 2004/08/30 17:01:43 miod Exp $ */
d57 1
a57 1
void spc_dio_dmastart(struct spc_softc *, void *, size_t, int);
d172 1
a172 1
void
d177 7
d195 2
@


1.8
log
@In the interrupt handler, if there is a DMA transfer in progress, do
not busy wait for the transfer to complete at the very beginning, as
this interrupt could be unrelated to the transfer; busywaiting could
cause the scsi command timeout to be triggered, and the code would not
recover correctly.

Instead, make the DMA check simply return, leaving the "busy" flag set;
and perform the usual interrupt handler duties, except for the phase
change.

test&ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.7 2004/08/25 21:00:37 miod Exp $ */
d70 1
d160 5
a164 1
	dio_intr_establish(spc_dio_intr, (void *)dsc, ipl, IPL_BIO);
@


1.7
log
@Allow DMA transfers to be disabled through device flags; default is to enable
DMA.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.6 2004/08/25 20:57:38 miod Exp $ */
d249 3
a251 12
	/* wait DMA complete */
	if ((spc_read(SSTS) & SSTS_BUSY) != 0) {
		int timeout = 1000; /* XXX how long? */
		while ((spc_read(SSTS) & SSTS_BUSY) != 0) {
			if (--timeout < 0) {
				printf("%s: DMA complete timeout\n",
				    sc->sc_dev.dv_xname);
				timeout = 1000;
			}
			DELAY(1);
		}
	}
@


1.6
log
@Set SCMD_PAD in non-integral sector DMA transfers, or the transfer never
completes; from the old driver, forgotten during the replacement here.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.5 2004/08/21 18:01:55 miod Exp $ */
d87 3
d146 4
a149 2
	sc->sc_dma_start = spc_dio_dmastart;
	sc->sc_dma_done  = spc_dio_dmadone;
@


1.5
log
@Be more paranoid about the SPC_DOINGDMA and SPC_HAVEDMA flag usage.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.4 2004/08/21 18:00:26 miod Exp $ */
d214 15
@


1.4
log
@Check for disabled parity in the master chip hconf register upon attach,
and do not enable parity in the scsi chip in this case.
From the old scsi code.

Tested by millert@@ and I, though none of us has non-parity capable 98658.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.3 2004/08/21 17:58:34 miod Exp $ */
d205 1
a219 2

	sc->sc_flags |= SPC_DOINGDMA;
d242 1
d244 1
a245 1
		dsc->sc_dflags &= ~SCSI_HAVEDMA;
a257 2

	sc->sc_flags &= ~SPC_DOINGDMA;
@


1.3
log
@Be sure to reset the master hconf register when resetting the scsi chip.
Tested by millert@@ and I.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.2 2004/08/19 10:22:01 miod Exp $ */
d110 1
a110 1
	u_int8_t id;
d126 2
d132 3
d138 3
a189 1

@


1.2
log
@If a DMA operation takes longer time than usual, do not flood the console
too much with warning messages.
@
text
@d1 1
a1 1
/* $OpenBSD: spc.c,v 1.1 2004/08/03 21:46:56 miod Exp $ */
d62 1
d137 1
d280 9
@


1.1
log
@Replace the old 4.4BSD scsi code used on hp300 with a ``real'' driver
interfaced with the MI scsi code.

Adapted from NetBSD with some changes (especially to get tape and old
cd-rom drives to not cause the driver to spin during probe).

Tested by millert@@ and I, ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d225 1
a225 1
			if (--timeout < 0)
d228 2
@

