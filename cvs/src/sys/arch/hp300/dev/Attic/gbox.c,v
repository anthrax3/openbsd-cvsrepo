head	1.18;
access;
symbols
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.15.0.28
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.26
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.24
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.22
	OPENBSD_5_0:1.15.0.20
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.18
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.16
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.12
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.14
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.10
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.8
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9;
locks; strict;
comment	@ * @;


1.18
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.17;

1.17
date	2013.10.21.10.36.12;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2013.10.20.20.07.22;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.07.15.13.52;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.11.18.33.13;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.31.18.13.41;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.30.18.14.09;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.30.18.03.33;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.30.18.00.20;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.27.21.24.48;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.24.21.36.39;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.21.16.24.12;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.21.16.22.34;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.19.10.51.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.16.16.14.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.15.21.19.42;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.15.21.08.36;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.14.22.39.25;	author miod;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: gbox.c,v 1.17 2013/10/21 10:36:12 miod Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grf_gb.c 1.18 93/08/13$
 *
 *	@@(#)grf_gb.c	8.4 (Berkeley) 1/12/94
 */

/*
 * Graphics routines for the Gatorbox.
 *
 * Note: In the context of this system, "gator" and "gatorbox" both refer to
 *       HP 987x0 graphics systems.  "Gator" is not used for high res mono.
 *       (as in 9837 Gator systems)
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/ioctl.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>

#include <hp300/dev/dioreg.h>
#include <hp300/dev/diovar.h>
#include <hp300/dev/diodevs.h>
#include <hp300/dev/intiovar.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/rasops/rasops.h>

#include <hp300/dev/diofbreg.h>
#include <hp300/dev/diofbvar.h>
#include <hp300/dev/gboxreg.h>

struct	gbox_softc {
	struct device	sc_dev;
	struct diofb	*sc_fb;
	struct diofb	sc_fb_store;
	int		sc_scode;
};

int	gbox_dio_match(struct device *, void *, void *);
void	gbox_dio_attach(struct device *, struct device *, void *);
int	gbox_intio_match(struct device *, void *, void *);
void	gbox_intio_attach(struct device *, struct device *, void *);

struct cfattach gbox_dio_ca = {
	sizeof(struct gbox_softc), gbox_dio_match, gbox_dio_attach
};

struct cfattach gbox_intio_ca = {
	sizeof(struct gbox_softc), gbox_intio_match, gbox_intio_attach
};

struct cfdriver gbox_cd = {
	NULL, "gbox", DV_DULL
};

int	gbox_reset(struct diofb *, int, struct diofbreg *);
void	gbox_restore(struct diofb *);
int	gbox_setcmap(struct diofb *, struct wsdisplay_cmap *);
void	gbox_setcolor(struct diofb *, u_int);
int	gbox_windowmove(struct diofb *, u_int16_t, u_int16_t, u_int16_t,
	    u_int16_t, u_int16_t, u_int16_t, int16_t, int16_t);

int	gbox_ioctl(void *, u_long, caddr_t, int, struct proc *);
void	gbox_burner(void *, u_int, u_int);

struct	wsdisplay_accessops	gbox_accessops = {
	.ioctl = gbox_ioctl,
	.mmap = diofb_mmap,
	.alloc_screen = diofb_alloc_screen,
	.free_screen = diofb_free_screen,
	.show_screen = diofb_show_screen,
	.load_font = diofb_load_font,
	.list_font = diofb_list_font,
	.burn_screen = gbox_burner
};

/*
 * Attachment glue
 */
int
gbox_intio_match(struct device *parent, void *match, void *aux)
{
	struct intio_attach_args *ia = aux;
	struct diofbreg *fbr;

	fbr = (struct diofbreg *)IIOV(GRFIADDR);

	if (badaddr((caddr_t)fbr))
		return (0);

	if (fbr->id == GRFHWID && fbr->fbid == GID_GATORBOX) {
		ia->ia_addr = (caddr_t)GRFIADDR;
		return (1);
	}

	return (0);
}

void
gbox_intio_attach(struct device *parent, struct device *self, void *aux)
{
	struct gbox_softc *sc = (struct gbox_softc *)self;
	struct diofbreg *fbr;

	fbr = (struct diofbreg *)IIOV(GRFIADDR);
	sc->sc_scode = CONSCODE_INTERNAL;

	if (sc->sc_scode == conscode) {
		sc->sc_fb = &diofb_cn;
	} else {
		sc->sc_fb = &sc->sc_fb_store;
		gbox_reset(sc->sc_fb, sc->sc_scode, fbr);
	}

	diofb_end_attach(sc, &gbox_accessops, sc->sc_fb,
	    sc->sc_scode == conscode, NULL);
}

int
gbox_dio_match(struct device *parent, void *match, void *aux)
{
	struct dio_attach_args *da = aux;

	/* We can not appear in DIO-II space */
	if (DIO_ISDIOII(da->da_scode))
		return (0);

	if (da->da_id == DIO_DEVICE_ID_FRAMEBUFFER &&
	    da->da_secid == DIO_DEVICE_SECID_GATORBOX)
		return (1);

	return (0);
}

void
gbox_dio_attach(struct device *parent, struct device *self, void *aux)
{
	struct gbox_softc *sc = (struct gbox_softc *)self;
	struct dio_attach_args *da = aux;
	struct diofbreg * fbr;

	sc->sc_scode = da->da_scode;
	if (sc->sc_scode == conscode) {
		fbr = (struct diofbreg *)conaddr;	/* already mapped */
		sc->sc_fb = &diofb_cn;
	} else {
		sc->sc_fb = &sc->sc_fb_store;
		fbr = (struct diofbreg *)
		    iomap(dio_scodetopa(sc->sc_scode), da->da_size);
		if (fbr == NULL ||
		    gbox_reset(sc->sc_fb, sc->sc_scode, fbr) != 0) {
			printf(": can't map framebuffer\n");
			return;
		}
	}

	diofb_end_attach(sc, &gbox_accessops, sc->sc_fb,
	    sc->sc_scode == conscode, NULL);
}

/*
 * Initialize hardware and display routines.
 */

const u_int8_t crtc_init_data[] = {
    0x29, 0x20, 0x23, 0x04, 0x30, 0x0b, 0x30,
    0x30, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00
};

int
gbox_reset(struct diofb *fb, int scode, struct diofbreg *fbr)
{
	int rc;
	u_int i;

	/* XXX don't trust hardware, force defaults */
	fb->fbwidth = 1024;
	fb->fbheight = 1024;
	fb->dwidth = 1024;
	fb->dheight = 768;
	if ((rc = diofb_fbinquire(fb, scode, fbr)) != 0)
		return (rc);

	fb->bmv = gbox_windowmove;
	gbox_restore(fb);

	/*
	 * Find out how many colors are available by determining
	 * which planes are installed.  That is, write all ones to
	 * a frame buffer location, see how many ones are read back.
	 */
	if (1 /* fb->planes == 0 */) {
		volatile u_int8_t *fbp;
		u_int8_t save;

		fbp = (u_int8_t *)fb->fbkva;
		save = *fbp;
		*fbp = 0xff;
		fb->planemask = *fbp;
		*fbp = save;

		for (fb->planes = 1; fb->planemask >= (1 << fb->planes);
		    fb->planes++);
		if (fb->planes > 8)
			fb->planes = 8;
		fb->planemask = (1 << fb->planes) - 1;
	}

	diofb_fbsetup(fb);
	for (i = 0; i <= fb->planemask; i++)
		gbox_setcolor(fb, i);

	return (0);
}

void
gbox_restore(struct diofb *fb)
{
	volatile struct gboxfb *gb = (struct gboxfb *)fb->regkva;
	u_int i;

	/*
	 * The minimal info here is from the Gatorbox X driver.
	 */
	gb->write_protect = 0x0;
	gb->regs.interrupt = 0x4;
	gb->rep_rule = RR_COPY;
	gb->blink1 = 0xff;
	gb->blink2 = 0xff;

	/*
	 * Program the 6845.
	 */
	for (i = 0; i < sizeof(crtc_init_data); i++) {
		gb->crtc_address = i;
		gb->crtc_data = crtc_init_data[i];
	}

	tile_mover_waitbusy(gb);

	/* Enable display */
	gb->regs.sec_interrupt = 0x01;
}

int
gbox_ioctl(void *v, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct diofb *fb = v;
	struct wsdisplay_fbinfo *wdf;
	u_int i;

	switch (cmd) {
	case WSDISPLAYIO_GTYPE:
		*(u_int *)data = WSDISPLAY_TYPE_GBOX;
		break;
	case WSDISPLAYIO_SMODE:
		fb->mapmode = *(u_int *)data;
		if (fb->mapmode == WSDISPLAYIO_MODE_EMUL) {
			gbox_restore(fb);
			for (i = 0; i <= fb->planemask; i++)
				gbox_setcolor(fb, i);
		}
		break;
	case WSDISPLAYIO_GINFO:
		wdf = (void *)data;
		wdf->width = fb->ri.ri_width;
		wdf->height = fb->ri.ri_height;
		wdf->depth = fb->ri.ri_depth;
		wdf->cmsize = 1 << fb->planes;
		break;
	case WSDISPLAYIO_LINEBYTES:
		*(u_int *)data = fb->ri.ri_stride;
		break;
	case WSDISPLAYIO_GETCMAP:
		return (diofb_getcmap(fb, (struct wsdisplay_cmap *)data));
	case WSDISPLAYIO_PUTCMAP:
		return (gbox_setcmap(fb, (struct wsdisplay_cmap *)data));
	case WSDISPLAYIO_GVIDEO:
	case WSDISPLAYIO_SVIDEO:
		break;
	default:
		return (-1);
	}

	return (0);
}

void
gbox_burner(void *v, u_int on, u_int flags)
{
	struct diofb *fb = v;
	volatile struct gboxfb *gb = (struct gboxfb *)fb->regkva;

	if (on)
		gb->regs.sec_interrupt = 0x01;
	else
		gb->regs.sec_interrupt = 0x00;
}

void
gbox_setcolor(struct diofb *fb, u_int index)
{
	volatile struct gboxfb *gb = (struct gboxfb *)fb->regkva;

	gb->creg_select = index;
	gb->cmap_red = fb->cmap.r[index];
	gb->cmap_grn = fb->cmap.g[index];
	gb->cmap_blu = fb->cmap.b[index];
	gb->cmap_write = !!index;
	gbcm_waitbusy(gb);
}

int
gbox_setcmap(struct diofb *fb, struct wsdisplay_cmap *cm)
{
	u_int8_t r[256], g[256], b[256];
	u_int index = cm->index, count = cm->count;
	u_int colcount = 1 << fb->planes;
	int error;

	if (index >= colcount || count > colcount - index)
		return (EINVAL);

	if ((error = copyin(cm->red, r, count)) != 0)
		return (error);
	if ((error = copyin(cm->green, g, count)) != 0)
		return (error);
	if ((error = copyin(cm->blue, b, count)) != 0)
		return (error);

	bcopy(r, fb->cmap.r + index, count);
	bcopy(g, fb->cmap.g + index, count);
	bcopy(b, fb->cmap.b + index, count);

	while (count-- != 0)
		gbox_setcolor(fb, index++);

	return (0);
}

int
gbox_windowmove(struct diofb *fb, u_int16_t sx, u_int16_t sy,
    u_int16_t dx, u_int16_t dy, u_int16_t cx, u_int16_t cy, int16_t rop,
    int16_t planemask)
{
	volatile struct gboxfb *gb = (struct gboxfb *)fb->regkva;
	int src, dest;

	if (planemask != 0xff)
		return (EINVAL);

	src  = (sy * 1024) + sx; /* upper left corner in pixels */
	dest = (dy * 1024) + dx;

	tile_mover_waitbusy(gb);

	gb->width = -(cx / 4);
	gb->height = -(cy / 4);
	if (src < dest)
		gb->rep_rule = MOVE_DOWN_RIGHT | rop;
	else {
		gb->rep_rule = MOVE_UP_LEFT | rop;
		/*
		 * Adjust to top of lower right tile of the block.
		 */
		src = src + ((cy - 4) * 1024) + (cx - 4);
		dest= dest + ((cy - 4) * 1024) + (cx - 4);
	}
	*(volatile u_int8_t *)(fb->fbkva + dest) =
	    *(volatile u_int8_t *)(fb->fbkva + src);

	tile_mover_waitbusy(gb);

	return (0);
}

/*
 * Gatorbox console support
 */

void
gboxcninit()
{
	gbox_reset(&diofb_cn, conscode, (struct diofbreg *)conaddr);
	diofb_cnattach(&diofb_cn);
}
@


1.17
log
@Add load_font and list_font accessops to all rasops-based wsdisplay drivers.
Trivial except for tga(4) and gpx(4/vax) which need a bit more care setting
up a new font.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.16 2013/10/20 20:07:22 miod Exp $	*/
@


1.16
log
@Use C99 named initializers for struct wsdisplay_accessops fields.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.15 2007/01/07 15:13:52 miod Exp $	*/
d138 2
@


1.15
log
@Get rid of PROM font-related defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.14 2006/08/11 18:33:13 miod Exp $	*/
d133 6
a138 9
	gbox_ioctl,
	diofb_mmap,
	diofb_alloc_screen,
	diofb_free_screen,
	diofb_show_screen,
	NULL,   /* load_font */
	NULL,   /* scrollback */
	NULL,   /* getchar */
	gbox_burner
@


1.14
log
@Let the windowmove() callbacks return whether they could perform the operation
or not, so that we can always feed them the complex operations before falling
back to rasops; and then topcat can perform coloured solid fills in
erase{cols,rows}.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.13 2005/12/31 18:13:41 miod Exp $	*/
d436 2
a437 1
	FBBASE(fb)[dest] = FBBASE(fb)[src];
@


1.13
log
@Rework (once again) the console code, in order to match the PROM's logic better.
When not running on serial console, the PROM will pick the ``internal''
graphics device, and if it does not exist, the DIO device with the lowest
select code, and will resort to SGC devices if no internal or DIO device
was found.

However, the current logic would search for a certain frame buffer type first,
then for its best hardware location, following the order they are listed
in conf.c.

By replacing gazillions of almost-exactly-duplicated frame buffer code with
one single instance, which is device type-agnostic, we can match the PROM
(and the bootblocks) logic again. Plus this saves a few KB of code!
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.12 2005/12/30 18:14:09 miod Exp $	*/
d126 2
a127 2
void	gbox_windowmove(struct diofb *, u_int16_t, u_int16_t,
	     u_int16_t, u_int16_t, u_int16_t, u_int16_t, int);
d408 1
a408 1
void
d410 2
a411 1
    u_int16_t dx, u_int16_t dy, u_int16_t cx, u_int16_t cy, int rop)
d416 3
d439 2
@


1.12
log
@Kill conforced, and have console devices use CN_FORCED priority instead.
This means we are no longer aborting the console scans even if the final
console has been found, but on the other hand makes some logic simpler;
plus it will be necessary for upcoming scode vs device loop order reversal.
No user-visible change.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.11 2005/12/30 18:03:33 miod Exp $	*/
a89 2
#include <dev/cons.h>

a440 89
int gbox_console_scan(int, caddr_t, void *);
cons_decl(gbox);

int
gbox_console_scan(int scode, caddr_t va, void *arg)
{
	struct diofbreg *fbr = (struct diofbreg *)va;
	struct consdev *cp = arg;
	u_int pri;

	if (fbr->id != GRFHWID || fbr->fbid != GID_GATORBOX)
		return (0);

	pri = CN_NORMAL;

#ifdef CONSCODE
	/*
	 * Raise our priority, if appropriate.
	 */
	if (scode == CONSCODE)
		pri = CN_FORCED;
#endif

	/* Only raise priority. */
	if (pri > cp->cn_pri)
		cp->cn_pri = pri;

	/*
	 * If our priority is higher than the currently-remembered
	 * console, stash our priority.
	 */
	if (cn_tab == NULL || cp->cn_pri > cn_tab->cn_pri) {
		cn_tab = cp;
		conscode = scode;
		return (DIO_SIZE(scode, va));
	}
	return (0);
}

void
gboxcnprobe(struct consdev *cp)
{
	int maj;
	caddr_t va;
	struct diofbreg *fbr;

	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;
	}

	if (maj == nchrdev)
		return;

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_DEAD;

	/* Look for "internal" framebuffer. */
	va = (caddr_t)IIOV(GRFIADDR);
	fbr = (struct diofbreg *)va;
	if (!badaddr(va) &&
	    fbr->id == GRFHWID && fbr->fbid == GID_GATORBOX) {
		cp->cn_pri = CN_INTERNAL;

#ifdef CONSCODE
		if (CONSCODE == CONSCODE_INTERNAL)
			cp->cn_pri = CN_FORCED;
#endif

		/*
		 * If our priority is higher than the currently
		 * remembered console, stash our priority, and
		 * unmap whichever device might be currently mapped.
		 * Since we're internal, we set the saved size to 0
		 * so they don't attempt to unmap our fixed VA later.
		 */
		if (cn_tab == NULL || cp->cn_pri > cn_tab->cn_pri) {
			cn_tab = cp;
			if (convasize)
				iounmap(conaddr, convasize);
			conscode = CONSCODE_INTERNAL;
			conaddr = va;
			convasize = 0;
		}
	}

	console_scan(gbox_console_scan, cp, HP300_BUS_DIO);
}

d442 1
a442 2
gboxcninit(cp)
	struct consdev *cp;
@


1.11
log
@When a driver claims console, let it set conscode to itself, instead of
letting the bus walkers do this for it. This is necessary since apci does
not use the bus walkers, now that we do not force console probes to stop
when apci claims console.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.10 2005/12/30 18:00:20 miod Exp $	*/
d451 1
a451 1
	int force = 0, pri;
d462 2
a463 4
	if (scode == CONSCODE) {
		pri = CN_REMOTE;
		force = conforced = 1;
	}
d474 1
a474 1
	if (((cn_tab == NULL) || (cp->cn_pri > cn_tab->cn_pri)) || force) {
a487 5
	int force = 0;

	/* Abort early if console already forced. */
	if (conforced)
		return;
d508 2
a509 3
		if (CONSCODE == CONSCODE_INTERNAL) {
			force = conforced = 1;
		}
d519 1
a519 2
		if (((cn_tab == NULL) || (cp->cn_pri > cn_tab->cn_pri))
		    || force) {
@


1.10
log
@Introduce symbolic constants for the magic conscode values.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.9 2005/01/27 21:24:48 miod Exp $	*/
d478 1
@


1.9
log
@In windowmove(), put another hardware blitter synchronization before
returning, so that rasops bursts including non-accelerated operations
do not have side effects.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.8 2005/01/24 21:36:39 miod Exp $	*/
d175 1
a175 1
	sc->sc_scode = -1;	/* XXX internal i/o */
d514 1
a514 1
		if (CONSCODE == -1) {
d531 1
a531 1
			conscode = -1;
@


1.8
log
@Switch hp300 wscons code to rasops, for DIO frame buffers.
Features:
- coloured kernel messages
- color support in console (use TERM=wsvt25)
- pretty Gallant wsfont, rather than the acceptable or ugly (depending upon
  the frame buffer) ROM font
- colormap ioctl support for Gatorbox and Topcat; DaVinci and Renaissance
  not done due to lack of hardware and/or documentation
- even more code factorization

tested on hyperion, and 4/6/8bpp catseye/topcat/kathmandu hardware, by
millert@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.7 2005/01/21 16:24:12 miod Exp $	*/
d421 1
d435 2
@


1.7
log
@Oops, revert changes not intended to be commited in previous commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.5 2005/01/19 10:51:23 miod Exp $	*/
d94 1
d125 3
d160 1
a160 1
	if (fbr->id == GRFHWID && fbr->id2 == GID_GATORBOX) {
d185 1
a185 1
	    sc->sc_scode == conscode, 0, NULL);
d227 1
a227 1
	    sc->sc_scode == conscode, 0, NULL);
a241 2
	volatile struct gboxfb *gb = (struct gboxfb *)fbr;
	u_int8_t *fbp, save;
d243 1
a243 1
	int i;
d253 38
d295 1
a295 1
	gb->interrupt = 0x4;
a307 44
	/*
	 * Find out how many colors are available by determining
	 * which planes are installed.  That is, write all ones to
	 * a frame buffer location, see how many ones are read back.
	 */
	fbp = (u_int8_t *)fb->fbkva;
	save = *fbp;
	*fbp = 0x0ff;
	fb->planemask = *fbp;
	*fbp = save;
	for (fb->planes = 1; fb->planemask >= (1 << fb->planes);
	    fb->planes++);

	/*
	 * Set up the color map entries. We use three entries in the
	 * color map. The first, is for black, the second is for
	 * white, and the very last entry is for the inverted cursor.
	 */
	gb->creg_select = 0x00;
	gb->cmap_red    = 0x00;
	gb->cmap_grn    = 0x00;
	gb->cmap_blu    = 0x00;
	gb->cmap_write  = 0x00;
	gbcm_waitbusy(gb);

	gb->creg_select = 0x01;
	gb->cmap_red    = 0xFF;
	gb->cmap_grn    = 0xFF;
	gb->cmap_blu    = 0xFF;
	gb->cmap_write  = 0x01;
	gbcm_waitbusy(gb);

	/* XXX is the cursors entry necessary??? */
	gb->creg_select = 0xFF;
	gb->cmap_red    = 0xFF;
	gb->cmap_grn    = 0xFF;
	gb->cmap_blu    = 0xFF;
	gb->cmap_write  = 0x01;
	gbcm_waitbusy(gb);

	fb->bmv = gbox_windowmove;
	diofb_fbsetup(fb);
	diofb_fontunpack(fb);

d310 2
a311 6
	/*
	 * Enable display.
	 */
	gb->sec_interrupt = 0x01;

	return (0);
d319 1
d325 8
d335 3
a337 3
		wdf->height = fb->dheight;
		wdf->width = fb->dwidth;
		wdf->depth = fb->planes;
d341 1
a341 1
		*(u_int *)data = (fb->fbwidth * fb->planes) >> 3;
d344 1
d346 1
a346 2
		/* XXX TBD */
		break;
d364 1
a364 1
		gb->sec_interrupt = 0x01;
d366 42
a407 1
		gb->sec_interrupt = 0x00;
d450 1
a450 1
	if (fbr->id != GRFHWID || fbr->id2 != GID_GATORBOX)
d507 1
a507 1
	    fbr->id == GRFHWID && fbr->id2 == GID_GATORBOX) {
a540 2
	long defattr;

d542 1
a542 2
	diofb_alloc_attr(NULL, 0, 0, 0, &defattr);
	wsdisplay_cnattach(&diofb_cn.wsd, &diofb_cn, 0, 0, defattr);
@


1.6
log
@Overhaul of the pxa2x0_lcd code, to allow early (before autoconf) attachment,
and collateral changes.

Because this driver requires us_dma (and as such, vm services) to work, it
can not be selected in consinit(). Instead, add a hook to the arm
cpu_startup() which will, on zaurus, switch console from serial (selected
in consinit()) to lcd.

This also makes the zaurus-specific early pxa2x0_clkman() substitute code
cleaner.

While there, move boot -c handling later, after the glass console is set up.

Tested by drahn@@ and uwe@@
@
text
@d340 1
a340 1
		*(u_int *)data = fb->fbwidth;
@


1.5
log
@Report the appropriate wsdisplay types to WSDISPLAYIO_GTYPE.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.4 2005/01/16 16:14:10 miod Exp $	*/
d340 1
a340 1
		*(u_int *)data = (fb->fbwidth * fb->planes) >> 3;
@


1.4
log
@Simplify diofb_fbinquire(), since in the only case where we need to know
the video registers size, this value can easily be computed from the standard
fb registers.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.3 2005/01/15 21:19:42 miod Exp $	*/
d330 1
a330 1
		*(u_int *)data = WSDISPLAY_TYPE_UNKNOWN;
@


1.3
log
@Glitch in console detection code would match unsupported frame buffers with
gatorbox during console initialization. Oops.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.2 2005/01/15 21:08:36 miod Exp $	*/
d248 1
a248 1
	if ((rc = diofb_fbinquire(fb, scode, fbr, 0x10000)) != 0)
@


1.2
log
@Use DIO_SIZE() macro instead of rolling our own implementation of it.
@
text
@d1 1
a1 1
/*	$OpenBSD: gbox.c,v 1.1 2005/01/14 22:39:25 miod Exp $	*/
d408 1
a408 1
	if (fbr->id != GRFHWID || fbr->id2 == GID_GATORBOX)
@


1.1
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a405 1
	u_char *dioiidev;
d433 1
a433 5
		if (scode >= DIOII_SCBASE) {
			dioiidev = (u_char *)va;
			return ((dioiidev[0x101] + 1) * 0x100000);
		}
		return (DIO_DEVSIZE);
@

