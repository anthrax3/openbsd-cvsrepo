head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.13.0.30
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.28
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.26
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.24
	OPENBSD_5_0:1.13.0.22
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.20
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.18
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.14
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.16
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.12
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8;
locks; strict;
comment	@ * @;


1.16
date	2014.03.18.22.36.31;	author miod;	state dead;
branches;
next	1.15;

1.15
date	2013.10.21.10.36.12;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2013.10.20.20.07.22;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.11.18.33.13;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.31.18.13.41;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.30.18.14.09;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.30.18.03.33;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.30.18.00.20;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.27.21.24.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.24.21.36.39;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.21.16.24.12;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.21.16.22.34;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.19.10.51.23;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.16.16.14.10;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.15.21.08.36;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.14.22.39.25;	author miod;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: dvbox.c,v 1.15 2013/10/21 10:36:12 miod Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grf_dv.c 1.12 93/08/13$
 *
 *	@@(#)grf_dv.c	8.4 (Berkeley) 1/12/94
 */

/*
 * Graphics routines for the DaVinci, HP98730/98731 Graphics system.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/ioctl.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>

#include <hp300/dev/dioreg.h>
#include <hp300/dev/diovar.h>
#include <hp300/dev/diodevs.h>
#include <hp300/dev/intiovar.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/rasops/rasops.h>

#include <hp300/dev/diofbreg.h>
#include <hp300/dev/diofbvar.h>
#include <hp300/dev/dvboxreg.h>

struct	dvbox_softc {
	struct device	sc_dev;
	struct diofb	*sc_fb;
	struct diofb	sc_fb_store;
	int		sc_scode;
};

int	dvbox_dio_match(struct device *, void *, void *);
void	dvbox_dio_attach(struct device *, struct device *, void *);
int	dvbox_intio_match(struct device *, void *, void *);
void	dvbox_intio_attach(struct device *, struct device *, void *);

struct cfattach dvbox_dio_ca = {
	sizeof(struct dvbox_softc), dvbox_dio_match, dvbox_dio_attach
};

struct cfattach dvbox_intio_ca = {
	sizeof(struct dvbox_softc), dvbox_intio_match, dvbox_intio_attach
};

struct cfdriver dvbox_cd = {
	NULL, "dvbox", DV_DULL
};

int	dvbox_reset(struct diofb *, int, struct diofbreg *);
void	dvbox_restore(struct diofb *);
void	dvbox_setcolor(struct diofb *, u_int,
	    u_int8_t, u_int8_t, u_int8_t);
int	dvbox_windowmove(struct diofb *, u_int16_t, u_int16_t, u_int16_t,
	    u_int16_t, u_int16_t, u_int16_t, int16_t, int16_t);

int	dvbox_ioctl(void *, u_long, caddr_t, int, struct proc *);
void	dvbox_burner(void *, u_int, u_int);

struct	wsdisplay_accessops	dvbox_accessops = {
	.ioctl = dvbox_ioctl,
	.mmap = diofb_mmap,
	.alloc_screen = diofb_alloc_screen,
	.free_screen = diofb_free_screen,
	.show_screen = diofb_show_screen,
	.load_font = diofb_load_font,
	.list_font = diofb_list_font,
	.burn_screen = dvbox_burner
};

/*
 * Attachment glue
 */

int
dvbox_intio_match(struct device *parent, void *match, void *aux)
{
	struct intio_attach_args *ia = aux;
	struct diofbreg *fbr;

	fbr = (struct diofbreg *)IIOV(GRFIADDR);

	if (badaddr((caddr_t)fbr))
		return (0);

	if (fbr->id == GRFHWID && fbr->fbid == GID_DAVINCI) {
		ia->ia_addr = (caddr_t)GRFIADDR;
		return (1);
	}

	return (0);
}

void
dvbox_intio_attach(struct device *parent, struct device *self, void *aux)
{
	struct dvbox_softc *sc = (struct dvbox_softc *)self;
	struct diofbreg *fbr;

	fbr = (struct diofbreg *)IIOV(GRFIADDR);
	sc->sc_scode = CONSCODE_INTERNAL;

        if (sc->sc_scode == conscode) {
                sc->sc_fb = &diofb_cn;
        } else {
                sc->sc_fb = &sc->sc_fb_store;
                dvbox_reset(sc->sc_fb, sc->sc_scode, fbr);
        }

	diofb_end_attach(sc, &dvbox_accessops, sc->sc_fb,
	    sc->sc_scode == conscode, NULL);
}

int
dvbox_dio_match(struct device *parent, void *match, void *aux)
{
	struct dio_attach_args *da = aux;

	if (da->da_id == DIO_DEVICE_ID_FRAMEBUFFER &&
	    da->da_secid == DIO_DEVICE_SECID_DAVINCI)
		return (1);

	return (0);
}

void
dvbox_dio_attach(struct device *parent, struct device *self, void *aux)
{
	struct dvbox_softc *sc = (struct dvbox_softc *)self;
	struct dio_attach_args *da = aux;
	struct diofbreg *fbr;

	sc->sc_scode = da->da_scode;
	if (sc->sc_scode == conscode) {
		fbr = (struct diofbreg *)conaddr;	/* already mapped */
		sc->sc_fb = &diofb_cn;
	} else {
		sc->sc_fb = &sc->sc_fb_store;
		fbr = (struct diofbreg *)
		    iomap(dio_scodetopa(sc->sc_scode), da->da_size);
		if (fbr == NULL ||
		    dvbox_reset(sc->sc_fb, sc->sc_scode, fbr) != 0) {
			printf(": can't map framebuffer\n");
			return;
		}
	}

	diofb_end_attach(sc, &dvbox_accessops, sc->sc_fb,
	    sc->sc_scode == conscode, NULL);
}

/*
 * Initialize hardware and display routines.
 */
int
dvbox_reset(struct diofb *fb, int scode, struct diofbreg *fbr)
{
	int rc;

	if ((rc = diofb_fbinquire(fb, scode, fbr)) != 0)
		return (rc);

	/*
	 * Restrict the framebuffer to a monochrome view for now, until
	 * I know better how to detect and frob overlay planes, and
	 * setup a proper colormap. -- miod
	 */
	fb->planes = fb->planemask = 1;

	fb->bmv = dvbox_windowmove;
	dvbox_restore(fb);
	diofb_fbsetup(fb);

	return (0);
}

/*
 * Magic initialization code.
 */
void
dvbox_restore(struct diofb *fb)
{
	volatile struct dvboxfb *db = (struct dvboxfb *)fb->regkva;
	u_int i;

  	db->regs.id = 0x80;
	DELAY(100);

	db->regs.interrupt = 0x04;
	db->en_scan = 0x01;
	db->fbwen = ~0;
	db->opwen = ~0;
	db->fold = 0x01;	/* 8bpp */
	db->drive = 0x01;	/* use FB plane */
	db->rep_rule = DVBOX_DUALROP(RR_COPY);
	db->alt_rr = DVBOX_DUALROP(RR_COPY);
	db->zrr = DVBOX_DUALROP(RR_COPY);

	db->fbvenp = 0xFF;	/* enable video */
	db->dispen = 0x01;	/* enable display */
	db->fbvens = 0x0;
	db->fv_trig = 0x01;
	DELAY(100);
	db->vdrive = 0x0;
	db->zconfig = 0x0;

	while (db->wbusy & 0x01)
		DELAY(10);

	db->cmapbank = 0;

	db->red0 = 0;
	db->red1 = 0;
	db->green0 = 0;
	db->green1 = 0;
	db->blue0 = 0;
	db->blue1 = 0;

	db->panxh = 0;
	db->panxl = 0;
	db->panyh = 0;
	db->panyl = 0;
	db->zoom = 0;
	db->cdwidth = 0x50;
	db->chstart = 0x52;
	db->cvwidth = 0x22;
	db->pz_trig = 1;

	/*
	 * Turn on frame buffer, turn on overlay planes, set replacement
	 * rule, enable top overlay plane writes for ite, disable all frame
	 * buffer planes, set byte per pixel, and display frame buffer 0.
	 * Lastly, turn on the box.
	 */
	db->regs.interrupt = 0x04;
	db->drive = 0x10;
 	db->rep_rule = DVBOX_DUALROP(RR_COPY);
	db->opwen = 0x01;
	db->fbwen = 0x0;
	db->fold = 0x01;
	db->vdrive = 0x0;
	db->dispen = 0x01;

	/*
	 * Video enable top overlay plane.
	 */
	db->opvenp = 0x01;
	db->opvens = 0x01;

	/*
	 * Make sure that overlay planes override frame buffer planes.
	 */
	db->ovly0p = 0x0;
	db->ovly0s = 0x0;
	db->ovly1p = 0x0;
	db->ovly1s = 0x0;
	db->fv_trig = 0x1;
	DELAY(100);

	/*
	 * Setup the overlay colormaps. Need to set the 0,1 (black/white)
	 * color for both banks.
	 */
	db_waitbusy(db);
	for (i = 0; i <= 1; i++) {
		db->cmapbank = i;
		db->rgb[0].red = 0x00;
		db->rgb[0].green = 0x00;
		db->rgb[0].blue = 0x00;
		db->rgb[1].red = 0xff;
		db->rgb[1].green = 0xff;
		db->rgb[1].blue = 0xff;
	}
	db->cmapbank = 0;
	db_waitbusy(db);
}

int
dvbox_ioctl(void *v, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct diofb *fb = v;
	struct wsdisplay_fbinfo *wdf;

	switch (cmd) {
	case WSDISPLAYIO_GTYPE:
		*(u_int *)data = WSDISPLAY_TYPE_DVBOX;
		break;
	case WSDISPLAYIO_SMODE:
		fb->mapmode = *(u_int *)data;
		if (fb->mapmode == WSDISPLAYIO_MODE_EMUL)
			dvbox_restore(fb);
		break;
	case WSDISPLAYIO_GINFO:
		wdf = (void *)data;
		wdf->width = fb->ri.ri_width;
		wdf->height = fb->ri.ri_height;
		wdf->depth = fb->ri.ri_depth;
		wdf->cmsize = 0;	/* XXX */
		break;
	case WSDISPLAYIO_LINEBYTES:
		*(u_int *)data = fb->ri.ri_stride;
		break;
	case WSDISPLAYIO_GETCMAP:
	case WSDISPLAYIO_PUTCMAP:
		break;		/* XXX until color support is implemented */
	case WSDISPLAYIO_GVIDEO:
	case WSDISPLAYIO_SVIDEO:
		break;
	default:
		return (-1);
	}

	return (0);
}

void
dvbox_burner(void *v, u_int on, u_int flags)
{
	struct diofb *fb = v;
	volatile struct dvboxfb *db = (struct dvboxfb *)fb->regkva;

	if (on)
		db->dispen = 0x01;
	else
		db->dispen = 0x00;
}

int
dvbox_windowmove(struct diofb *fb, u_int16_t sx, u_int16_t sy,
    u_int16_t dx, u_int16_t dy, u_int16_t cx, u_int16_t cy, int16_t rop,
    int16_t planemask)
{
	volatile struct dvboxfb *db = (struct dvboxfb *)fb->regkva;

	if (planemask != 0xff)
		return (EINVAL);

	db_waitbusy(db);

	db->rep_rule = DVBOX_DUALROP(rop);
	db->source_y = sy;
	db->source_x = sx;
	db->dest_y = dy;
	db->dest_x = dx;
	db->wheight = cy;
	db->wwidth = cx;
	db->wmove = 1;

	db_waitbusy(db);

	return (0);
}

/*
 * DaVinci console support
 */

void
dvboxcninit()
{
	dvbox_reset(&diofb_cn, conscode, (struct diofbreg *)conaddr);
	diofb_cnattach(&diofb_cn);
}
@


1.15
log
@Add load_font and list_font accessops to all rasops-based wsdisplay drivers.
Trivial except for tga(4) and gpx(4/vax) which need a bit more care setting
up a new font.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.14 2013/10/20 20:07:22 miod Exp $	*/
@


1.14
log
@Use C99 named initializers for struct wsdisplay_accessops fields.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.13 2006/08/11 18:33:13 miod Exp $	*/
d134 2
@


1.13
log
@Let the windowmove() callbacks return whether they could perform the operation
or not, so that we can always feed them the complex operations before falling
back to rasops; and then topcat can perform coloured solid fills in
erase{cols,rows}.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.12 2005/12/31 18:13:41 miod Exp $	*/
d129 6
a134 9
	dvbox_ioctl,
	diofb_mmap,
	diofb_alloc_screen,
	diofb_free_screen,
	diofb_show_screen,
	NULL,   /* load_font */
	NULL,   /* scrollback */
	NULL,   /* getchar */
	dvbox_burner
@


1.12
log
@Rework (once again) the console code, in order to match the PROM's logic better.
When not running on serial console, the PROM will pick the ``internal''
graphics device, and if it does not exist, the DIO device with the lowest
select code, and will resort to SGC devices if no internal or DIO device
was found.

However, the current logic would search for a certain frame buffer type first,
then for its best hardware location, following the order they are listed
in conf.c.

By replacing gazillions of almost-exactly-duplicated frame buffer code with
one single instance, which is device type-agnostic, we can match the PROM
(and the bootblocks) logic again. Plus this saves a few KB of code!
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.11 2005/12/30 18:14:09 miod Exp $	*/
d122 2
a123 2
void	dvbox_windowmove(struct diofb *, u_int16_t, u_int16_t,
	    u_int16_t, u_int16_t, u_int16_t, u_int16_t, int);
d397 1
a397 1
void
d399 2
a400 1
    u_int16_t dx, u_int16_t dy, u_int16_t cx, u_int16_t cy, int rop)
d404 3
d419 2
@


1.11
log
@Kill conforced, and have console devices use CN_FORCED priority instead.
This means we are no longer aborting the console scans even if the final
console has been found, but on the other hand makes some logic simpler;
plus it will be necessary for upcoming scode vs device loop order reversal.
No user-visible change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.10 2005/12/30 18:03:33 miod Exp $	*/
a85 2
#include <dev/cons.h>

a420 89
int dvbox_console_scan(int, caddr_t, void *);
cons_decl(dvbox);

int
dvbox_console_scan(int scode, caddr_t va, void *arg)
{
	struct diofbreg *fbr = (struct diofbreg *)va;
	struct consdev *cp = arg;
	u_int pri;

	if (fbr->id != GRFHWID || fbr->fbid != GID_DAVINCI)
		return (0);

	pri = CN_NORMAL;

#ifdef CONSCODE
	/*
	 * Raise our priority, if appropriate.
	 */
	if (scode == CONSCODE)
		pri = CN_FORCED;
#endif

	/* Only raise priority. */
	if (pri > cp->cn_pri)
		cp->cn_pri = pri;

	/*
	 * If our priority is higher than the currently-remembered
	 * console, stash our priority.
	 */
	if (cn_tab == NULL || cp->cn_pri > cn_tab->cn_pri) {
		cn_tab = cp;
		conscode = scode;
		return (DIO_SIZE(scode, va));
	}
	return (0);
}

void
dvboxcnprobe(struct consdev *cp)
{
	int maj;
	caddr_t va;
	struct diofbreg *fbr;

	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;
	}

	if (maj == nchrdev)
		return;

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_DEAD;

	/* Look for "internal" framebuffer. */
	va = (caddr_t)IIOV(GRFIADDR);
	fbr = (struct diofbreg *)va;
	if (!badaddr(va) &&
	    fbr->id == GRFHWID && fbr->fbid == GID_DAVINCI) {
		cp->cn_pri = CN_INTERNAL;

#ifdef CONSCODE
		if (CONSCODE == CONSCODE_INTERNAL)
			cp->cn_pri = CN_FORCED;
#endif

		/*
		 * If our priority is higher than the currently
		 * remembered console, stash our priority, and
		 * unmap whichever device might be currently mapped.
		 * Since we're internal, we set the saved size to 0
		 * so they don't attempt to unmap our fixed VA later.
		 */
		if (cn_tab == NULL || cp->cn_pri > cn_tab->cn_pri) {
			cn_tab = cp;
			if (convasize)
				iounmap(conaddr, convasize);
			conscode = CONSCODE_INTERNAL;
			conaddr = va;
			convasize = 0;
		}
	}

	console_scan(dvbox_console_scan, cp, HP300_BUS_DIO);
}

d422 1
a422 1
dvboxcninit(struct consdev *cp)
@


1.10
log
@When a driver claims console, let it set conscode to itself, instead of
letting the bus walkers do this for it. This is necessary since apci does
not use the bus walkers, now that we do not force console probes to stop
when apci claims console.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.9 2005/12/30 18:00:20 miod Exp $	*/
d431 1
a431 1
	int force = 0, pri;
d442 2
a443 4
	if (scode == CONSCODE) {
		pri = CN_REMOTE;
		force = conforced = 1;
	}
d454 1
a454 1
	if (((cn_tab == NULL) || (cp->cn_pri > cn_tab->cn_pri)) || force) {
a467 5
	int force = 0;

	/* Abort early if console is already forced. */
	if (conforced)
		return;
d488 2
a489 3
		if (CONSCODE == CONSCODE_INTERNAL) {
			force = conforced = 1;
		}
d499 1
a499 2
		if (((cn_tab == NULL) || (cp->cn_pri > cn_tab->cn_pri)) ||
		    force) {
@


1.9
log
@Introduce symbolic constants for the magic conscode values.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.8 2005/01/27 21:24:48 miod Exp $	*/
d458 1
@


1.8
log
@In windowmove(), put another hardware blitter synchronization before
returning, so that rasops bursts including non-accelerated operations
do not have side effects.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.7 2005/01/24 21:36:39 miod Exp $	*/
d172 1
a172 1
	sc->sc_scode = -1;	/* XXX internal i/o */
d494 1
a494 1
		if (CONSCODE == -1) {
d511 1
a511 1
			conscode = -1;
@


1.7
log
@Switch hp300 wscons code to rasops, for DIO frame buffers.
Features:
- coloured kernel messages
- color support in console (use TERM=wsvt25)
- pretty Gallant wsfont, rather than the acceptable or ugly (depending upon
  the frame buffer) ROM font
- colormap ioctl support for Gatorbox and Topcat; DaVinci and Renaissance
  not done due to lack of hardware and/or documentation
- even more code factorization

tested on hyperion, and 4/6/8bpp catseye/topcat/kathmandu hardware, by
millert@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.6 2005/01/21 16:24:12 miod Exp $	*/
d406 1
d415 2
@


1.6
log
@Oops, revert changes not intended to be commited in previous commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.4 2005/01/19 10:51:23 miod Exp $	*/
d90 1
d121 1
d157 1
a157 1
	if (fbr->id == GRFHWID && fbr->id2 == GID_DAVINCI) {
d182 1
a182 1
	    sc->sc_scode == conscode, 4 /* XXX */, NULL);
d220 1
a220 1
	    sc->sc_scode == conscode, 4 /* XXX */, NULL);
a228 1
	volatile struct dvboxfb *db = (struct dvboxfb *)fbr;
a229 1
	int i;
a233 3
	fb->planes = 8;
	fb->planemask = (1 << fb->planes) - 1;

d235 3
a237 1
	 * Magic initialization code.
d239 8
d248 10
a257 1
  	db->reset = 0x80;
d260 14
a273 14
	db->interrupt = 0x04;
	db->en_scan   = 0x01;
	db->fbwen     = ~0;
	db->opwen     = ~0;
	db->fold      = 0x01;	/* 8bpp */
	db->drive     = 0x01;	/* use FB plane */
	db->rep_rule  = DVBOX_DUALROP(RR_COPY);
	db->alt_rr    = DVBOX_DUALROP(RR_COPY);
	db->zrr       = DVBOX_DUALROP(RR_COPY);

	db->fbvenp    = 0xFF;	/* enable video */
	db->dispen    = 0x01;	/* enable display */
	db->fbvens    = 0x0;
	db->fv_trig   = 0x01;
d275 2
a276 2
	db->vdrive    = 0x0;
	db->zconfig   = 0x0;
d283 2
a284 2
	db->red0   = 0;
	db->red1   = 0;
d287 2
a288 2
	db->blue0  = 0;
	db->blue1  = 0;
d290 5
a294 5
	db->panxh   = 0;
	db->panxl   = 0;
	db->panyh   = 0;
	db->panyl   = 0;
	db->zoom    = 0;
d306 8
a313 8
	db->interrupt = 0x04;
	db->drive     = 0x10;
 	db->rep_rule  = DVBOX_DUALROP(RR_COPY);
	db->opwen     = 0x01;
	db->fbwen     = 0x0;
	db->fold      = 0x01;
	db->vdrive    = 0x0;
	db->dispen    = 0x01;
d324 4
a327 4
	db->ovly0p  = 0x0;
	db->ovly0s  = 0x0;
	db->ovly1p  = 0x0;
	db->ovly1s  = 0x0;
a330 5
	fb->bmv = dvbox_windowmove;

	diofb_fbsetup(fb);
	diofb_fontunpack(fb);

a334 1

d338 1
a338 1
		db->rgb[0].red   = 0x00;
d340 4
a343 4
		db->rgb[0].blue  = 0x00;
		db->rgb[1].red   = 0xFF;
		db->rgb[1].green = 0xFF;
		db->rgb[1].blue  = 0xFF;
a346 2

	return (0);
d359 5
d366 4
a369 4
		wdf->height = fb->dheight;
		wdf->width = fb->dwidth;
		wdf->depth = fb->planes;
		wdf->cmsize = 8;	/* XXX 16 because of overlay? */
d372 1
a372 1
		*(u_int *)data = (fb->fbwidth * fb->planes) >> 3;
d376 1
a376 2
		/* XXX TBD */
		break;
d409 5
a413 5
	db->dest_y   = dy;
	db->dest_x   = dx;
	db->wheight  = cy;
	db->wwidth   = cx;
	db->wmove    = 1;
d430 1
a430 1
	if (fbr->id != GRFHWID || fbr->id2 != GID_DAVINCI)
d487 1
a487 1
	    fbr->id == GRFHWID && fbr->id2 == GID_DAVINCI) {
a519 2
	long defattr;

d521 1
a521 2
	diofb_alloc_attr(NULL, 0, 0, 0, &defattr);
	wsdisplay_cnattach(&diofb_cn.wsd, &diofb_cn, 0, 0, defattr);
@


1.5
log
@Overhaul of the pxa2x0_lcd code, to allow early (before autoconf) attachment,
and collateral changes.

Because this driver requires us_dma (and as such, vm services) to work, it
can not be selected in consinit(). Instead, add a hook to the arm
cpu_startup() which will, on zaurus, switch console from serial (selected
in consinit()) to lcd.

This also makes the zaurus-specific early pxa2x0_clkman() substitute code
cleaner.

While there, move boot -c handling later, after the glass console is set up.

Tested by drahn@@ and uwe@@
@
text
@d359 1
a359 1
		*(u_int *)data = fb->fbwidth;
@


1.4
log
@Report the appropriate wsdisplay types to WSDISPLAYIO_GTYPE.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.3 2005/01/16 16:14:10 miod Exp $	*/
d359 1
a359 1
		*(u_int *)data = (fb->fbwidth * fb->planes) >> 3;
@


1.3
log
@Simplify diofb_fbinquire(), since in the only case where we need to know
the video registers size, this value can easily be computed from the standard
fb registers.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.2 2005/01/15 21:08:36 miod Exp $	*/
d349 1
a349 1
		*(u_int *)data = WSDISPLAY_TYPE_UNKNOWN;
@


1.2
log
@Use DIO_SIZE() macro instead of rolling our own implementation of it.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvbox.c,v 1.1 2005/01/14 22:39:25 miod Exp $	*/
d231 1
a231 1
	if ((rc = diofb_fbinquire(fb, scode, fbr, 0x20000)) != 0)
@


1.1
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a415 1
	u_char *dioiidev;
d443 1
a443 5
		if (scode >= DIOII_SCBASE) {
			dioiidev = (u_char *)va;
			return ((dioiidev[0x101] + 1) * 0x100000);
		}
		return (DIO_DEVSIZE);
@

