head	1.10;
access;
symbols
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.24
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.22
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.20
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2005.01.14.22.39.25;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2005.01.08.22.13.53;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.27.44;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.30;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.04.16.11.56.03;	author downsj;	state Exp;
branches
	1.6.14.1
	1.6.24.1;
next	1.5;

1.5
date	97.02.05.16.01.11;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.02.03.04.47.27;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.01.12.15.12.33;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.04.25.06.36.34;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.18;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2002.03.28.10.07.18;	author niklas;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2003.06.07.11.11.34;	author ho;	state Exp;
branches;
next	;

1.6.24.1
date	2002.06.11.03.35.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@/*	$OpenBSD: grf_gb.c,v 1.9 2005/01/08 22:13:53 miod Exp $	*/
/*	$NetBSD: grf_gb.c,v 1.11 1997/03/31 07:34:15 scottr Exp $	*/

/*
 * Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grf_gb.c 1.18 93/08/13$
 *
 *	@@(#)grf_gb.c	8.4 (Berkeley) 1/12/94
 */

/*
 * Graphics routines for the Gatorbox.
 *
 * Note: In the context of this system, "gator" and "gatorbox" both refer to
 *       HP 987x0 graphics systems.  "Gator" is not used for high res mono.
 *       (as in 9837 Gator systems)
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/proc.h>
#include <sys/tty.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>
 
#include <dev/cons.h>

#include <hp300/dev/dioreg.h>
#include <hp300/dev/diovar.h>
#include <hp300/dev/diodevs.h>
#include <hp300/dev/intiovar.h>

#include <hp300/dev/grfioctl.h>
#include <hp300/dev/grfvar.h>
#include <hp300/dev/grfreg.h>
#include <hp300/dev/grf_gbreg.h>

#include <hp300/dev/itevar.h>
#include <hp300/dev/itereg.h>
 
#include "ite.h"

#define CRTC_DATA_LENGTH  0x0e
u_char crtc_init_data[CRTC_DATA_LENGTH] = {
    0x29, 0x20, 0x23, 0x04, 0x30, 0x0b, 0x30,
    0x30, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00
};

int	gb_init(struct grf_data *gp, int, caddr_t);
int	gb_mode(struct grf_data *gp, int, caddr_t);
void	gb_microcode(struct gboxfb *);

int	gbox_intio_match(struct device *, void *, void *);
void	gbox_intio_attach(struct device *, struct device *, void *);

int	gbox_dio_match(struct device *, void *, void *);
void	gbox_dio_attach(struct device *, struct device *, void *);

int	gbox_console_scan(int, caddr_t, void *);
void	gboxcnprobe(struct consdev *cp);
void	gboxcninit(struct consdev *cp);

struct cfattach gbox_intio_ca = {
	sizeof(struct grfdev_softc), gbox_intio_match, gbox_intio_attach
};

struct cfattach gbox_dio_ca = {
	sizeof(struct grfdev_softc), gbox_dio_match, gbox_dio_attach
};

struct cfdriver gbox_cd = {
	NULL, "gbox", DV_DULL
};

/* Gatorbox grf switch */
struct grfsw gbox_grfsw = {
	GID_GATORBOX, GRFGATOR, "gatorbox", gb_init, gb_mode
};

#if NITE > 0
void	gbox_init(struct ite_data *);
void	gbox_deinit(struct ite_data *);
void	gbox_putc(struct ite_data *, int, int, int, int);
void	gbox_cursor(struct ite_data *, int);
void	gbox_clear(struct ite_data *, int, int, int, int);
void	gbox_scroll(struct ite_data *, int, int, int, int);
void	gbox_windowmove(struct ite_data *, int, int, int, int,
		int, int, int);

/* Gatorbox ite switch */
struct itesw gbox_itesw = {
	gbox_init, gbox_deinit, gbox_clear, gbox_putc,
	gbox_cursor, gbox_scroll, ite_readbyte, ite_writeglyph
};
#endif /* NITE > 0 */

int
gbox_intio_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct intio_attach_args *ia = aux;
	struct grfreg *grf;

	grf = (struct grfreg *)IIOV(GRFIADDR);
	if (badaddr((caddr_t)grf))
		return (0);

	if (grf->gr_id == DIO_DEVICE_ID_FRAMEBUFFER &&
	    grf->gr_id2 == DIO_DEVICE_SECID_GATORBOX) {
		ia->ia_addr = (caddr_t)GRFIADDR;
		return (1);
	}

	return (0);
}

void
gbox_intio_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct grfdev_softc *sc = (struct grfdev_softc *)self;
	caddr_t grf;

	grf = (caddr_t)IIOV(GRFIADDR);
	sc->sc_scode = -1;	/* XXX internal i/o */

#if NITE > 0
	grfdev_attach(sc, gb_init, grf, &gbox_grfsw, &gbox_itesw);
#else
	grfdev_attach(sc, gb_init, grf, &gbox_grfsw, NULL);
#endif	/* NITE > 0 */
}

int
gbox_dio_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct dio_attach_args *da = aux;

	if (da->da_id == DIO_DEVICE_ID_FRAMEBUFFER &&
	    da->da_secid == DIO_DEVICE_SECID_GATORBOX)
		return (1);

	return (0);
}

void
gbox_dio_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct grfdev_softc *sc = (struct grfdev_softc *)self;
	struct dio_attach_args *da = aux;
	caddr_t grf;

	sc->sc_scode = da->da_scode;
	if (sc->sc_scode == conscode)
		grf = conaddr;
	else {
		grf = iomap(dio_scodetopa(sc->sc_scode), da->da_size);
		if (grf == 0) {
			printf("%s: can't map framebuffer\n",
			    sc->sc_dev.dv_xname);
			return;
		}
	}

#if NITE > 0
	grfdev_attach(sc, gb_init, grf, &gbox_grfsw, &gbox_itesw);
#else
	grfdev_attach(sc, gb_init, grf, &gbox_grfsw, NULL);
#endif	/* NITE > 0 */
}

/*
 * Initialize hardware.
 * Must point g_display at a grfinfo structure describing the hardware.
 * Returns 0 if hardware not present, non-zero ow.
 */
int
gb_init(gp, scode, addr)
	struct grf_data *gp;
	int scode;
	caddr_t addr;
{
	struct gboxfb *gbp;
	struct grfinfo *gi = &gp->g_display;
	u_char *fbp, save;
	int fboff;

	/*
	 * If the console has been initialized, and it was us, there's
	 * no need to repeat this.
	 */
	if (consinit_active || (scode != conscode)) {
		gbp = (struct gboxfb *) addr;
		if (ISIIOVA(addr))
			gi->gd_regaddr = (caddr_t) IIOP(addr);
		else
			gi->gd_regaddr = dio_scodetopa(scode);
		gi->gd_regsize = 0x10000;
		gi->gd_fbwidth = 1024;		/* XXX */
		gi->gd_fbheight = 1024;		/* XXX */
		gi->gd_fbsize = gi->gd_fbwidth * gi->gd_fbheight;
		fboff = (gbp->fbomsb << 8) | gbp->fbolsb;
		gi->gd_fbaddr = (caddr_t) (*((u_char *)addr + fboff) << 16);
		gp->g_regkva = addr;
		gp->g_fbkva = iomap(gi->gd_fbaddr, gi->gd_fbsize);
		gi->gd_dwidth = 1024;		/* XXX */
		gi->gd_dheight = 768;		/* XXX */
		gi->gd_planes = 0;		/* how do we do this? */
		/*
		 * The minimal info here is from the Gatorbox X driver.
		 */
		fbp = (u_char *) gp->g_fbkva;
		gbp->write_protect = 0;
		gbp->interrupt = 4;		/** fb_enable ? **/
		gbp->rep_rule = 3;		/* GXcopy */
		gbp->blink1 = 0xff;
		gbp->blink2 = 0xff;

		gb_microcode(gbp);

		/*
		 * Find out how many colors are available by determining
		 * which planes are installed.  That is, write all ones to
		 * a frame buffer location, see how many ones are read back.
		 */
		save = *fbp;
		*fbp = 0xFF;
		gi->gd_colors = *fbp + 1;
		*fbp = save;
	}
	return(1);
}

/*
 * Program the 6845.
 */
void
gb_microcode(gbp)
	struct gboxfb *gbp;
{
	int i;
	
	for (i = 0; i < CRTC_DATA_LENGTH; i++) {
		gbp->crtc_address = i;
		gbp->crtc_data = crtc_init_data[i];
	}
}

/*
 * Change the mode of the display.
 * Right now all we can do is grfon/grfoff.
 * Return a UNIX error number or 0 for success.
 */
int
gb_mode(gp, cmd, data)
	struct grf_data *gp;
	int cmd;
	caddr_t data;
{
	struct gboxfb *gbp;
	int error = 0;

	gbp = (struct gboxfb *)gp->g_regkva;
	switch (cmd) {
	case GM_GRFON:
		gbp->sec_interrupt = 1;
		break;

	case GM_GRFOFF:
		break;

	/*
	 * Remember UVA of mapping for GCDESCRIBE.
	 * XXX this should be per-process.
	 */
	case GM_MAP:
		gp->g_data = data;
		break;

	case GM_UNMAP:
		gp->g_data = 0;
		break;

#ifdef COMPAT_HPUX
	case GM_DESCRIBE:
	{
		struct grf_fbinfo *fi = (struct grf_fbinfo *)data;
		struct grfinfo *gi = &gp->g_display;
		int i;

		/* feed it what HP-UX expects */
		fi->id = gi->gd_id;
		fi->mapsize = gi->gd_fbsize;
		fi->dwidth = gi->gd_dwidth;
		fi->dlength = gi->gd_dheight;
		fi->width = gi->gd_fbwidth;
		fi->length = gi->gd_fbheight;
		fi->bpp = NBBY;
		fi->xlen = (fi->width * fi->bpp) / NBBY;
		fi->npl = gi->gd_planes;
		fi->bppu = fi->npl;
		fi->nplbytes = fi->xlen * ((fi->length * fi->bpp) / NBBY);
		bcopy("HP98700", fi->name, 8);
		fi->attr = 2;	/* HW block mover */
		/*
		 * If mapped, return the UVA where mapped.
		 */
		if (gp->g_data) {
			fi->regbase = gp->g_data;
			fi->fbbase = fi->regbase + gp->g_display.gd_regsize;
		} else {
			fi->fbbase = 0;
			fi->regbase = 0;
		}
		for (i = 0; i < 6; i++)
			fi->regions[i] = 0;
		break;
	}
#endif

	default:
		error = EINVAL;
		break;
	}
	return(error);
}

#if NITE > 0

/*
 * Gatorbox ite routines
 */

#define REGBASE     	((struct gboxfb *)(ip->regbase))
#define WINDOWMOVER 	gbox_windowmove

void
gbox_init(ip)
	struct ite_data *ip;
{
	/* XXX */
	if (ip->regbase == 0) {
		struct grf_data *gp = ip->grf;

		ip->regbase = gp->g_regkva;
		ip->fbbase = gp->g_fbkva;
		ip->fbwidth = gp->g_display.gd_fbwidth;
		ip->fbheight = gp->g_display.gd_fbheight;
		ip->dwidth = gp->g_display.gd_dwidth;
		ip->dheight = gp->g_display.gd_dheight;
	}

	REGBASE->write_protect = 0x0;
	REGBASE->interrupt = 0x4;
	REGBASE->rep_rule = RR_COPY;
	REGBASE->blink1 = 0xff;
	REGBASE->blink2 = 0xff;
	gb_microcode((struct gboxfb *)ip->regbase);
	REGBASE->sec_interrupt = 0x01;

	/*
	 * Set up the color map entries. We use three entries in the
	 * color map. The first, is for black, the second is for
	 * white, and the very last entry is for the inverted cursor.
	 */
	REGBASE->creg_select = 0x00;
	REGBASE->cmap_red    = 0x00;
	REGBASE->cmap_grn    = 0x00;
	REGBASE->cmap_blu    = 0x00;
	REGBASE->cmap_write  = 0x00;
	gbcm_waitbusy(ip->regbase);
	
	REGBASE->creg_select = 0x01;
	REGBASE->cmap_red    = 0xFF;
	REGBASE->cmap_grn    = 0xFF;
	REGBASE->cmap_blu    = 0xFF;
	REGBASE->cmap_write  = 0x01;
	gbcm_waitbusy(ip->regbase);

	REGBASE->creg_select = 0xFF;
	REGBASE->cmap_red    = 0xFF;
	REGBASE->cmap_grn    = 0xFF;
	REGBASE->cmap_blu    = 0xFF;
	REGBASE->cmap_write  = 0x01;
	gbcm_waitbusy(ip->regbase);

	ite_fontinfo(ip);
	ite_fontinit(ip);

	/*
	 * Clear the display. This used to be before the font unpacking
	 * but it crashes. Figure it out later.
	 */
	gbox_windowmove(ip, 0, 0, 0, 0, ip->dheight, ip->dwidth, RR_CLEAR);
	tile_mover_waitbusy(ip->regbase);

	/*
	 * Stash the inverted cursor.
	 */
	gbox_windowmove(ip, charY(ip, ' '), charX(ip, ' '),
			ip->cblanky, ip->cblankx, ip->ftheight,
			ip->ftwidth, RR_COPYINVERTED);
}

void
gbox_deinit(ip)
	struct ite_data *ip;
{
	gbox_windowmove(ip, 0, 0, 0, 0, ip->dheight, ip->dwidth, RR_CLEAR);
	tile_mover_waitbusy(ip->regbase);

   	ip->flags &= ~ITE_INITED;
}

void
gbox_putc(ip, c, dy, dx, mode)
	struct ite_data *ip;
        int dy, dx;
	int c, mode;
{
        int wrr = ((mode == ATTR_INV) ? RR_COPYINVERTED : RR_COPY);

	gbox_windowmove(ip, charY(ip, c), charX(ip, c),
			    dy * ip->ftheight, dx * ip->ftwidth,
			    ip->ftheight, ip->ftwidth, wrr);
}

void
gbox_cursor(ip, flag)
	struct ite_data *ip;
        int flag;
{
	if (flag == DRAW_CURSOR)
		draw_cursor(ip)
	else if (flag == MOVE_CURSOR) {
		erase_cursor(ip)
		draw_cursor(ip)
	}
	else
		erase_cursor(ip)
}

void
gbox_clear(ip, sy, sx, h, w)
	struct ite_data *ip;
	int sy, sx, h, w;
{
	gbox_windowmove(ip, sy * ip->ftheight, sx * ip->ftwidth,
			sy * ip->ftheight, sx * ip->ftwidth, 
			h  * ip->ftheight, w  * ip->ftwidth,
			RR_CLEAR);
}
#define	gbox_blockmove(ip, sy, sx, dy, dx, h, w) \
	gbox_windowmove((ip), \
			(sy) * ip->ftheight, \
			(sx) * ip->ftwidth, \
			(dy) * ip->ftheight, \
			(dx) * ip->ftwidth, \
			(h)  * ip->ftheight, \
			(w)  * ip->ftwidth, \
			RR_COPY)

void
gbox_scroll(ip, sy, sx, count, dir)
        struct ite_data *ip;
        int sy, dir, sx, count;
{
	int height, dy, i;
	
	tile_mover_waitbusy(ip->regbase);
	REGBASE->write_protect = 0x0;
	
	if (dir == SCROLL_UP) {
		dy = sy - count;
		height = ip->rows - sy;
		for (i = 0; i < height; i++)
			gbox_blockmove(ip, sy + i, sx, dy + i, 0, 1, ip->cols);
	}
	else if (dir == SCROLL_DOWN) {
		dy = sy + count;
		height = ip->rows - dy;
		for (i = (height - 1); i >= 0; i--)
			gbox_blockmove(ip, sy + i, sx, dy + i, 0, 1, ip->cols);
	}
	else if (dir == SCROLL_RIGHT) {
		gbox_blockmove(ip, sy, sx, sy, sx + count,
			       1, ip->cols - (sx + count));
	}
	else {
		gbox_blockmove(ip, sy, sx, sy, sx - count,
			       1, ip->cols - sx);
	}		
}

void
gbox_windowmove(ip, sy, sx, dy, dx, h, w, mask)
     struct ite_data *ip;
     int sy, sx, dy, dx, mask, h, w;
{
	int src, dest;

	src  = (sy * 1024) + sx;	/* upper left corner in pixels */
	dest = (dy * 1024) + dx;

	tile_mover_waitbusy(ip->regbase);
	REGBASE->width = -(w / 4);
	REGBASE->height = -(h / 4);
	if (src < dest)
		REGBASE->rep_rule = MOVE_DOWN_RIGHT|mask;
	else {
		REGBASE->rep_rule = MOVE_UP_LEFT|mask;
		/*
		 * Adjust to top of lower right tile of the block.
		 */
		src = src + ((h - 4) * 1024) + (w - 4);
		dest= dest + ((h - 4) * 1024) + (w - 4);
	}
	FBBASE[dest] = FBBASE[src];
}

/*
 * Gatorbox console support
 */

int
gbox_console_scan(scode, va, arg)
	int scode;
	caddr_t va;
	void *arg;
{
	struct grfreg *grf = (struct grfreg *)va;
	struct consdev *cp = arg;
	u_char *dioiidev;
	int force = 0, pri;

	if ((grf->gr_id == GRFHWID) && (grf->gr_id2 == GID_GATORBOX)) {
		pri = CN_NORMAL;

#ifdef CONSCODE
		/*
		 * Raise our priority, if appropriate.
		 */
		if (scode == CONSCODE) {
			pri = CN_REMOTE;
			force = conforced = 1;
		}
#endif

		/* Only raise priority. */
		if (pri > cp->cn_pri)
			cp->cn_pri = pri;

		/*
		 * If our priority is higher than the currently-remembered
		 * console, stash our priority.
		 */
		if (((cn_tab == NULL) || (cp->cn_pri > cn_tab->cn_pri))
		    || force) {
			cn_tab = cp;
			if (scode >= 132) {
				dioiidev = (u_char *)va;
				return ((dioiidev[0x101] + 1) * 0x100000);
			}
			return (DIO_DEVSIZE);
		}
	}
	return (0);
}

void
gboxcnprobe(cp)
	struct consdev *cp;
{
	int maj;
	caddr_t va;
	struct grfreg *grf;
	int force = 0;

	maj = ite_major();

	/* initialize required fields */
	cp->cn_dev = makedev(maj, 0);		/* XXX */
	cp->cn_pri = CN_DEAD;

	/* Abort early if console already forced. */
	if (conforced)
		return;

	/* Look for "internal" framebuffer. */
	va = (caddr_t)IIOV(GRFIADDR);
	grf = (struct grfreg *)va;
	if (!badaddr(va) &&
	    ((grf->gr_id == GRFHWID) && (grf->gr_id2 == GID_GATORBOX))) {
		cp->cn_pri = CN_INTERNAL;

#ifdef CONSCODE
		/*
		 * Raise our priority and save some work, if appropriate.
		 */
		if (CONSCODE == -1) {
			cp->cn_pri = CN_REMOTE;
			force = conforced = 1;
		}
#endif

		/*
		 * If our priority is higher than the currently
		 * remembered console, stash our priority, and
		 * unmap whichever device might be currently mapped.
		 * Since we're internal, we set the saved size to 0
		 * so they don't attempt to unmap our fixed VA later.
		 */
		if (((cn_tab == NULL) || (cp->cn_pri > cn_tab->cn_pri))
		    || force) {
			cn_tab = cp;
			if (convasize)
				iounmap(conaddr, convasize);
			conscode = -1;
			conaddr = va;
			convasize = 0;
		}
	}

	console_scan(gbox_console_scan, cp);
}

void
gboxcninit(cp)
	struct consdev *cp;
{
	struct grf_data *gp = &grf_cn;

	/*
	 * Initialize the framebuffer hardware.
	 */
	(void)gb_init(gp, conscode, conaddr);

	/*
	 * Set up required grf data.
	 */
	gp->g_sw = &gbox_grfsw;
	gp->g_display.gd_id = gp->g_sw->gd_swid;
	gp->g_flags = GF_ALIVE;

	/*
	 * Initialize the terminal emulator.
	 */
	itecninit(gp, &gbox_itesw);
}

#endif /* NITE > 0 */
@


1.9
log
@Only use one set of DIO size and address defines, from <dev/dioreg.h>
rather than <include/cpu.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.8 2003/06/02 23:27:44 millert Exp $	*/
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.7 2002/03/14 01:26:30 millert Exp $	*/
d64 1
d606 1
a606 1
			return (DIOCSIZE);
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.6 1997/04/16 11:56:03 downsj Exp $	*/
d22 1
a22 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Merge portions of NetBSD up to 970415.

This includes:
	* All of the prototyping and KNF changes.
	* The new interrupt system.
	* Portions of the Domain Keyboard support from Mike Smith.

This does not include:
	* m68k changes, namely generic dumps.

Various sundry changes and fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.5 1997/02/05 16:01:11 downsj Exp $	*/
d88 13
a100 13
int	gb_init __P((struct grf_data *gp, int, caddr_t));
int	gb_mode __P((struct grf_data *gp, int, caddr_t));
void	gb_microcode __P((struct gboxfb *));

int	gbox_intio_match __P((struct device *, void *, void *));
void	gbox_intio_attach __P((struct device *, struct device *, void *));

int	gbox_dio_match __P((struct device *, void *, void *));
void	gbox_dio_attach __P((struct device *, struct device *, void *));

int	gbox_console_scan __P((int, caddr_t, void *));
void	gboxcnprobe __P((struct consdev *cp));
void	gboxcninit __P((struct consdev *cp));
d120 8
a127 8
void	gbox_init __P((struct ite_data *));
void	gbox_deinit __P((struct ite_data *));
void	gbox_putc __P((struct ite_data *, int, int, int, int));
void	gbox_cursor __P((struct ite_data *, int));
void	gbox_clear __P((struct ite_data *, int, int, int, int));
void	gbox_scroll __P((struct ite_data *, int, int, int, int));
void	gbox_windowmove __P((struct ite_data *, int, int, int, int,
		int, int, int));
@


1.6.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.6 1997/04/16 11:56:03 downsj Exp $	*/
d88 13
a100 13
int	gb_init(struct grf_data *gp, int, caddr_t);
int	gb_mode(struct grf_data *gp, int, caddr_t);
void	gb_microcode(struct gboxfb *);

int	gbox_intio_match(struct device *, void *, void *);
void	gbox_intio_attach(struct device *, struct device *, void *);

int	gbox_dio_match(struct device *, void *, void *);
void	gbox_dio_attach(struct device *, struct device *, void *);

int	gbox_console_scan(int, caddr_t, void *);
void	gboxcnprobe(struct consdev *cp);
void	gboxcninit(struct consdev *cp);
d120 8
a127 8
void	gbox_init(struct ite_data *);
void	gbox_deinit(struct ite_data *);
void	gbox_putc(struct ite_data *, int, int, int, int);
void	gbox_cursor(struct ite_data *, int);
void	gbox_clear(struct ite_data *, int, int, int, int);
void	gbox_scroll(struct ite_data *, int, int, int, int);
void	gbox_windowmove(struct ite_data *, int, int, int, int,
		int, int, int);
@


1.6.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d88 13
a100 13
int	gb_init(struct grf_data *gp, int, caddr_t);
int	gb_mode(struct grf_data *gp, int, caddr_t);
void	gb_microcode(struct gboxfb *);

int	gbox_intio_match(struct device *, void *, void *);
void	gbox_intio_attach(struct device *, struct device *, void *);

int	gbox_dio_match(struct device *, void *, void *);
void	gbox_dio_attach(struct device *, struct device *, void *);

int	gbox_console_scan(int, caddr_t, void *);
void	gboxcnprobe(struct consdev *cp);
void	gboxcninit(struct consdev *cp);
d120 8
a127 8
void	gbox_init(struct ite_data *);
void	gbox_deinit(struct ite_data *);
void	gbox_putc(struct ite_data *, int, int, int, int);
void	gbox_cursor(struct ite_data *, int);
void	gbox_clear(struct ite_data *, int, int, int, int);
void	gbox_scroll(struct ite_data *, int, int, int, int);
void	gbox_windowmove(struct ite_data *, int, int, int, int,
		int, int, int);
@


1.6.14.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.6.14.1 2002/03/28 10:07:18 niklas Exp $	*/
d22 5
a26 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5
log
@Non-console ITE devices need to be initialized properly, too, ya know.

Add enough glue to the aux attach structure to do so, and teach all the
device drivers how to set it.

This fixes the last ITE panic I know of...
@
text
@d1 2
a2 2
/*	$OpenBSD: grf_gb.c,v 1.4 1997/02/03 04:47:27 downsj Exp $	*/
/*	$NetBSD: grf_gb.c,v 1.10 1997/01/30 09:18:45 thorpej Exp $	*/
d55 1
d57 1
d59 1
a60 1
#include <sys/ioctl.h>
a61 2
#include <sys/systm.h>
#include <sys/device.h>
d98 4
d228 1
a228 1
	register struct gboxfb *gbp;
a231 1
	extern caddr_t iomap();
d255 1
a255 1
		 * The minimal register info here is from the Gatorbox X driver.
d286 1
a286 1
	register int i;
d301 1
a301 1
	register struct grf_data *gp;
d384 1
a384 1
	register struct ite_data *ip;
d466 1
a466 1
        register int wrr = ((mode == ATTR_INV) ? RR_COPYINVERTED : RR_COPY);
d513 1
a513 1
	register int height, dy, i;
d545 1
a545 1
	register int src, dest;
@


1.4
log
@Merge new config(8) support from NetBSD, by Jason Thorpe.
Also add siginfo glue, BOOT_CONFIG, and various other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: grf_gb.c,v 1.3 1997/01/12 15:12:33 downsj Exp $	*/
d164 5
a168 1
	grfdev_attach(sc, gb_init, grf, &gbox_grfsw);
d206 5
a210 1
	grfdev_attach(sc, gb_init, grf, &gbox_grfsw);
@


1.3
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: grf_gb.c,v 1.9 1996/12/17 08:41:08 thorpej Exp $	*/
d92 1
a92 2
#ifdef NEWCONFIG
int	gbox_intio_match __P((struct device *, struct cfdata *, void *));
d95 1
a95 1
int	gbox_dio_match __P((struct device *, struct cfdata *, void *));
a108 1
#endif /* NEWCONFIG */
a131 1
#ifdef NEWCONFIG
d135 1
a135 2
	struct cfdata *match;
	void *aux;
d170 1
a170 2
	struct cfdata *match;
	void *aux;
a203 1
#endif /* NEWCONFIG */
@


1.2
log
@sync w/ Net 960424
@
text
@d1 2
a2 1
/*	$NetBSD: grf_gb.c,v 1.7 1996/03/03 16:48:58 thorpej Exp $	*/
a46 3
#include "grf.h"
#if NGRF > 0

d61 1
d68 4
d92 20
d134 77
d226 1
a226 1
	extern caddr_t sctopa(), iomap();
d237 1
a237 1
			gi->gd_regaddr = sctopa(scode);
a670 1
	struct ite_data *ip = &ite_cn;
d686 1
a686 1
	 * Set up required ite data and initialize ite.
d688 1
a688 7
	ip->isw = &gbox_itesw;
	ip->grf = gp;
	ip->flags = ITE_ALIVE|ITE_CONSOLE|ITE_ACTIVE|ITE_ISCONS;
	ip->attrbuf = console_attributes;
	iteinit(ip);

	kbd_ite = ip;		/* XXX */
a691 1
#endif /* NGRF > 0 */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: grf_gb.c,v 1.4 1994/10/26 07:23:52 cgd Exp $	*/
d4 1
d57 1
d59 9
d71 1
d74 4
a77 1
#include <machine/cpu.h>
d85 26
d116 4
a119 2
gb_init(gp, addr)
	struct grf_softc *gp;
d128 43
a170 37
	gbp = (struct gboxfb *) addr;
	if (ISIIOVA(addr))
		gi->gd_regaddr = (caddr_t) IIOP(addr);
	else
		gi->gd_regaddr = sctopa(vatosc(addr));
	gi->gd_regsize = 0x10000;
	gi->gd_fbwidth = 1024;		/* XXX */
	gi->gd_fbheight = 1024;		/* XXX */
	gi->gd_fbsize = gi->gd_fbwidth * gi->gd_fbheight;
	fboff = (gbp->fbomsb << 8) | gbp->fbolsb;
	gi->gd_fbaddr = (caddr_t) (*((u_char *)addr + fboff) << 16);
	gp->g_regkva = addr;
	gp->g_fbkva = iomap(gi->gd_fbaddr, gi->gd_fbsize);
	gi->gd_dwidth = 1024;		/* XXX */
	gi->gd_dheight = 768;		/* XXX */
	gi->gd_planes = 0;		/* how do we do this? */
	/*
	 * The minimal register info here is from the Gatorbox X driver.
	 */
	fbp = (u_char *) gp->g_fbkva;
	gbp->write_protect = 0;
	gbp->interrupt = 4;		/** fb_enable ? **/
	gbp->rep_rule = 3;		/* GXcopy */
	gbp->blink1 = 0xff;
	gbp->blink2 = 0xff;

	gb_microcode(gbp);

	/*
	 * Find out how many colors are available by determining
	 * which planes are installed.  That is, write all ones to
	 * a frame buffer location, see how many ones are read back.
	 */
	save = *fbp;
	*fbp = 0xFF;
	gi->gd_colors = *fbp + 1;
	*fbp = save;
d177 1
d179 1
a179 1
	register struct gboxfb *gbp;
d194 1
d196 1
a196 1
	register struct grf_softc *gp;
d203 1
a203 1
	gbp = (struct gboxfb *) gp->g_regkva;
d268 219
d488 112
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
