head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.30
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.28
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.26
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.24
	OPENBSD_5_0:1.10.0.22
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.20
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.12
date	2014.03.18.22.36.31;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2013.10.21.10.36.12;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.11.18.33.13;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.09.21.23.51;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.21.05.43;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.12.22.52.59;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.12.22.22.39;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.31.18.13.41;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.24.21.36.39;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.18.19.17.03;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.16.16.14.10;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.14.22.39.25;	author miod;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: diofbvar.h,v 1.11 2013/10/21 10:36:12 miod Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef	_KERNEL

struct diocmap {
	u_int8_t r[256], g[256], b[256];
};

/*
 * Minimal frame buffer state structure.
 */
struct diofb {
	caddr_t	regkva;			/* KVA of registers */
	caddr_t	fbkva;			/* KVA of framebuffer */

	caddr_t	regaddr;		/* control registers physaddr */
	caddr_t	fbaddr;			/* frame buffer physaddr */

	u_int	fbsize;			/* frame buffer size */
	u_int	fbwidth;		/* frame buffer width */
	u_int	fbheight;		/* frame buffer height */
	u_int	dwidth;			/* displayed part width */
	u_int	dheight;		/* displayed part height */

	u_int	planes;			/* number of planes */
	u_int	planemask;		/* and related mask */

	/* rasops information */
	struct rasops_info ri;

	/* color information */
	struct diocmap cmap;

	/* wsdisplay information */
	struct wsscreen_descr wsd;
	struct wsscreen_list wsl;
	struct wsscreen_descr *scrlist[1];
	int	nscreens;
	u_int	mapmode;

	/* blockmove routine */
	int	(*bmv)(struct diofb *, u_int16_t, u_int16_t, u_int16_t,
		    u_int16_t, u_int16_t, u_int16_t, int16_t, int16_t);
};

/* Replacement Rules (rops) */
#define	RR_CLEAR		0x0
#define	RR_COPY			0x3
#define	RR_XOR			0x6
#define	RR_INVERT		0xa
#define	RR_COPYINVERTED  	0xc

void	diofb_cnattach(struct diofb *);
void	diofb_end_attach(void *, struct wsdisplay_accessops *, struct diofb *,
	    int, const char *);
int	diofb_fbinquire(struct diofb *, int, struct diofbreg *);
void	diofb_fbsetup(struct diofb *);
int	diofb_getcmap(struct diofb *, struct wsdisplay_cmap *);
void	diofb_resetcmap(struct diofb *);

int	diofb_alloc_attr(void *, int, int, int, long *);
int	diofb_alloc_screen(void *, const struct wsscreen_descr *, void **,
	    int *, int *, long *);
void	diofb_free_screen(void *, void *);
paddr_t	diofb_mmap(void *, off_t, int);
int	diofb_show_screen(void *, void *, int, void (*)(void *, int, int),
	    void *);
int	diofb_load_font(void *, void *, struct wsdisplay_font *);
int	diofb_list_font(void *, struct wsdisplay_font *);

int	diofb_mono_windowmove(struct diofb *, u_int16_t, u_int16_t, u_int16_t,
	    u_int16_t, u_int16_t, u_int16_t, int16_t, int16_t);

/* Console support */
void	dvboxcninit(void);
void	gboxcninit(void);
void	hypercninit(void);
void	rboxcninit(void);
void	topcatcninit(void);
void	tvrxcninit(void);
extern	struct diofb diofb_cn;		/* struct diofb for console device */

#endif

/*
 * In mapped mode, mmap() will provide the following layout:
 * 0 - (DIOFB_REGSPACE - 1)	frame buffer registers
 * DIOFB_REGSPACE onwards	frame buffer memory
 */
#define	DIOFB_REGSPACE	0x020000
@


1.11
log
@Add load_font and list_font accessops to all rasops-based wsdisplay drivers.
Trivial except for tga(4) and gpx(4/vax) which need a bit more care setting
up a new font.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.10 2006/08/11 18:33:13 miod Exp $	*/
@


1.10
log
@Let the windowmove() callbacks return whether they could perform the operation
or not, so that we can always feed them the complex operations before falling
back to rasops; and then topcat can perform coloured solid fills in
erase{cols,rows}.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.9 2006/08/09 21:23:51 miod Exp $	*/
d126 2
@


1.9
log
@Use the blitter again for the cursor on non-mono frame buffers.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.8 2006/04/14 21:05:43 miod Exp $	*/
d100 2
a101 2
	void	(*bmv)(struct diofb *, u_int16_t, u_int16_t,
		    u_int16_t, u_int16_t, u_int16_t, u_int16_t, int);
d127 2
a128 2
void	diofb_mono_windowmove(struct diofb *, u_int16_t, u_int16_t,
	    u_int16_t, u_int16_t, u_int16_t, u_int16_t, int);
@


1.8
log
@Minimal support for the HP98705 ``Tigershark'' TurboVRX frame buffer
(using an overlay plane only for now). Bootblocks, text console and X11
are supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.7 2006/03/12 22:52:59 miod Exp $	*/
d105 5
a109 4
#define RR_CLEAR		0x0
#define RR_COPY			0x3
#define RR_XOR			0x6
#define RR_COPYINVERTED  	0xc
@


1.7
log
@Previous fix was half-done, move the wsscreen_list array into the softc
as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofxvar.h,v 1.5 2005/12/31 18:13:41 miod Exp $	*/
d126 3
d135 1
@


1.6
log
@Move struct wsscreen_list out of the stack as on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.5 2005/12/31 18:13:41 miod Exp $	*/
d95 1
@


1.5
log
@Rework (once again) the console code, in order to match the PROM's logic better.
When not running on serial console, the PROM will pick the ``internal''
graphics device, and if it does not exist, the DIO device with the lowest
select code, and will resort to SGC devices if no internal or DIO device
was found.

However, the current logic would search for a certain frame buffer type first,
then for its best hardware location, following the order they are listed
in conf.c.

By replacing gazillions of almost-exactly-duplicated frame buffer code with
one single instance, which is device type-agnostic, we can match the PROM
(and the bootblocks) logic again. Plus this saves a few KB of code!
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.4 2005/01/24 21:36:39 miod Exp $	*/
d94 1
@


1.4
log
@Switch hp300 wscons code to rasops, for DIO frame buffers.
Features:
- coloured kernel messages
- color support in console (use TERM=wsvt25)
- pretty Gallant wsfont, rather than the acceptable or ugly (depending upon
  the frame buffer) ROM font
- colormap ioctl support for Gatorbox and Topcat; DaVinci and Renaissance
  not done due to lack of hardware and/or documentation
- even more code factorization

tested on hyperion, and 4/6/8bpp catseye/topcat/kathmandu hardware, by
millert@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.3 2005/01/18 19:17:03 miod Exp $	*/
d124 6
@


1.3
log
@Colormap handling for topcat; Xwsfb now runs.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.2 2005/01/16 16:14:10 miod Exp $	*/
d61 2
a75 4
	int	fbsize;			/* frame buffer size */

	u_int	planes;			/* number of planes */
	u_int	planemask;		/* and related mask */
d77 1
d83 5
a87 10
	/* font information */
	u_int	rows, cols;		/* display size, in chars */
	u_int   cpl;			/* chars per line off screen */
	u_int	ftheight, ftwidth, ftscale;	/* font metrics */
	u_int	fontx, fonty;		/* off screen font position */

	/* cursor information */
	int	curvisible;
	u_int   cursorx, cursory;	/* cursor position */
	u_int   cblankx, cblanky;	/* off screen cursor shape */
d95 1
d108 1
a108 8
#define	getbyte(fb, disp)						\
	((u_char) *((u_char *)(fb)->regkva + (disp)))

#define getword(fb, offset) \
	((getbyte((fb), offset) << 8) | getbyte((fb), (offset) + 2))

#define	FONTMAXCHAR	128

d110 1
a110 1
	    int, int, const char *);
d113 2
a114 1
void	diofb_fontunpack(struct diofb *);
d125 9
@


1.2
log
@Simplify diofb_fbinquire(), since in the only case where we need to know
the video registers size, this value can easily be computed from the standard
fb registers.
@
text
@d1 1
a1 1
/*	$OpenBSD: diofbvar.h,v 1.1 2005/01/14 22:39:25 miod Exp $	*/
d61 4
a83 2
	int	curvisible;

d91 1
d94 3
@


1.1
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a68 2
	int	regsize;		/* control registers size */

d117 1
a117 1
int	diofb_fbinquire(struct diofb *, int, struct diofbreg *, int);
@

