head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	UBC_SYNC_B:1.5
	SMP:1.5.0.2
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	97.02.03.04.47.29;	author downsj;	state dead;
branches;
next	1.4;

1.4
date	97.01.12.15.12.36;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.04.25.06.36.36;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.28.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge new config(8) support from NetBSD, by Jason Thorpe.
Also add siginfo glue, BOOT_CONFIG, and various other changes.
@
text
@/*	$OpenBSD: grf_machdep.c,v 1.4 1997/01/12 15:12:36 downsj Exp $	*/
/*	$NetBSD: grf_machdep.c,v 1.7 1996/12/17 08:41:09 thorpej Exp $	*/

/*
 * XXX This file is old config only!
 */

/*
 * Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1991 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grf_machdep.c 1.1 92/01/21
 *
 *	@@(#)grf_machdep.c	8.2 (Berkeley) 1/12/94
 */

/*
 * Graphics display driver for the HP300/400 DIO/DIO-II based machines.
 * This is the hardware-dependent configuration portion of the driver.
 */

#include "grf.h"
#if NGRF > 0

#include <sys/param.h>
#include <sys/malloc.h>
#include <sys/systm.h>

#include <machine/autoconf.h>

#include <hp300/dev/device.h>
#include <hp300/dev/grfioctl.h>
#include <hp300/dev/grfvar.h>
#include <hp300/dev/grfreg.h>

#include <hp300/dev/itevar.h>

#include "ite.h"

int grfmatch();
void grfattach();

int	grfinit __P((struct hp_device *, struct grf_data *, int));

struct	driver grfdriver = { grfmatch, grfattach, "grf" };

int
grfmatch(hd)
	struct hp_device *hd;
{
	struct grf_softc *sc = &grf_softc[hd->hp_unit];
	int scode;

	if (hd->hp_args->hw_pa == (caddr_t)GRFIADDR) /* XXX */
		scode = -1;
	else
		scode = hd->hp_args->hw_sc;

	if (scode == conscode) {
		/*
		 * We've already been initialized.
		 */
		sc->sc_data = &grf_cn;
		return (1);
	}

	/*
	 * Allocate storage space for the grf_data.
	 */
	sc->sc_data = (struct grf_data *)malloc(sizeof(struct grf_data),
	    M_DEVBUF, M_NOWAIT);
	if (sc->sc_data == NULL) {
		printf("grfmatch: malloc for grf_data failed\n");
		return (0);
	}
	bzero(sc->sc_data, sizeof(struct grf_data));

	return (grfinit(hd, sc->sc_data, scode));
}

void
grfattach(hd)
	struct hp_device *hd;
{
	struct grf_softc *sc = &grf_softc[hd->hp_unit];
	struct grf_data *gp = sc->sc_data;
	int scode, isconsole;

	if (hd->hp_args->hw_pa == (caddr_t)GRFIADDR) /* XXX */
		scode = -1;
	else
		scode = hd->hp_args->hw_sc;

	if (scode == conscode)
		isconsole = 1;
	else
		isconsole = 0;

	sc->sc_scode = scode;

	printf(": %d x %d ", gp->g_display.gd_dwidth,
	    gp->g_display.gd_dheight);
	if (gp->g_display.gd_colors == 2)
		printf("monochrome");
	else
		printf("%d color", gp->g_display.gd_colors);
	printf(" %s display", gp->g_sw->gd_desc);
	if (isconsole)
		printf(" (console)");
	printf("\n");

#if NITE > 0
	/* XXX hack */
	ite_attach_grf(hd->hp_unit, isconsole);
#endif /* NITE > 0 */
}

int
grfinit(hd, gp, scode)
	struct hp_device *hd;
	struct grf_data *gp;
	int scode;
{
	register struct grfsw *gsw;
	struct grfreg *gr;
	caddr_t addr = hd->hp_addr;
	int i;

	gr = (struct grfreg *) addr;
	if (gr->gr_id != GRFHWID)
		return(0);
	for (i = 0; i < ngrfsw; ++i) {
		gsw = grfsw[i];
		if (gsw->gd_hwid == gr->gr_id2)
			break;
	}
	if ((i < ngrfsw) && (*gsw->gd_init)(gp, scode, addr)) {
		gp->g_sw = gsw;
		gp->g_display.gd_id = gsw->gd_swid;
		gp->g_flags = GF_ALIVE;
		return(1);
	}
	return(0);
}
#endif /* NGRF > 0 */
@


1.4
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@sync w/ Net 960424
@
text
@d1 6
a6 1
/*	$NetBSD: grf_machdep.c,v 1.4 1996/02/24 00:55:13 thorpej Exp $	*/
d132 2
@


1.2
log
@update from netbsd (verbatim)
@
text
@d1 1
a1 1
/*	$NetBSD: grf_machdep.c,v 1.3 1995/12/02 18:21:58 thorpej Exp $	*/
d4 1
d55 4
d65 4
d71 3
d76 3
a78 5
/*
 * XXX called from ite console init routine.
 * Does just what configure will do later but without printing anything.
 */
grfconfig()
d80 9
a88 32
	register caddr_t addr;
	register struct hp_hw *hw;
	register struct hp_device *hd, *nhd;

	for (hw = sc_table; hw->hw_type; hw++) {
	        if (!HW_ISDEV(hw, D_BITMAP))
			continue;
		/*
		 * Found one, now match up with a logical unit number
		 */
		nhd = NULL;		
		addr = hw->hw_kva;
		for (hd = hp_dinit; hd->hp_driver; hd++) {
			if (hd->hp_driver != &grfdriver || hd->hp_alive)
				continue;
			/*
			 * Wildcarded.  If first, remember as possible match.
			 */
			if (hd->hp_addr == NULL) {
				if (nhd == NULL)
					nhd = hd;
				continue;
			}
			/*
			 * Not wildcarded.
			 * If exact match done searching, else keep looking.
			 */
			if (sctova(hd->hp_addr) == addr) {
				nhd = hd;
				break;
			}
		}
d90 1
a90 1
		 * Found a match, initialize
d92 2
a93 2
		if (nhd && grfinit(addr, nhd->hp_unit))
			nhd->hp_addr = addr;
a94 1
}
d96 7
a102 11
/*
 * Normal init routine called by configure() code
 */
int
grfmatch(hd)
	struct hp_device *hd;
{
	struct grf_softc *gp = &grf_softc[hd->hp_unit];

	if ((gp->g_flags & GF_ALIVE) == 0 &&
	    !grfinit(hd->hp_addr, hd->hp_unit))
d104 2
d107 1
a107 1
	return(1);
d114 13
a126 1
	struct grf_softc *gp = &grf_softc[hd->hp_unit];
d134 9
a142 1
	printf(" %s display\n", gp->g_sw->gd_desc);
d145 5
a149 3
grfinit(addr, unit)
	caddr_t addr;
	int unit;
a150 1
	struct grf_softc *gp = &grf_softc[unit];
d153 2
d159 2
a160 1
	for (gsw = grfsw; gsw < &grfsw[ngrfsw]; gsw++)
d163 2
a164 1
	if (gsw < &grfsw[ngrfsw] && (*gsw->gd_init)(gp, addr)) {
d172 1
a172 1
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: grf_machdep.c,v 1.2 1994/10/26 07:23:59 cgd Exp $	*/
d60 3
a62 2
int grfprobe();
struct	driver grfdriver = { grfprobe, "grf" };
d113 2
a114 1
grfprobe(hd)
d121 13
a133 3
		return(0);
	printf("grf%d: %d x %d ", hd->hp_unit,
	       gp->g_display.gd_dwidth, gp->g_display.gd_dheight);
a138 1
	return(1);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
