head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2011.05.30.20.01.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.02.17.44.43;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.04.17.40.14;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.22.21.11.12;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.22.21.07.29;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.21.18.00.26;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.21.17.58.34;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.03.21.46.56;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: mb89352var.h,v 1.8 2011/05/30 20:01:29 miod Exp $	*/
/*	$NetBSD: mb89352var.h,v 1.6 2003/08/02 12:48:09 tsutsui Exp $	*/
/*	NecBSD: mb89352var.h,v 1.4 1998/03/14 07:31:22 kmatsuda Exp 	*/

/*-
 * Copyright (c) 1996,97,98,99 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum, Masaru Oki and Kouichi Matsuda.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * Copyright (c) 1994 Jarle Greipsland
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * [NetBSD for NEC PC-98 series]
 *  Copyright (c) 1996, 1997, 1998
 *	NetBSD/pc98 porting staff. All rights reserved.
 *  Copyright (c) 1996, 1997, 1998
 *	Kouich Matsuda. All rights reserved.
 */

#ifndef	_MB89352VAR_H_
#define	_MB89352VAR_H_

/*
 * ACB. Holds additional information for each SCSI command Comments: We
 * need a separate scsi command block because we may need to overwrite it
 * with a request sense command.  Basicly, we refrain from fiddling with
 * the scsi_xfer struct (except do the expected updating of return values).
 * We'll generally update: xs->{flags,resid,error,sense,status} and
 * occasionally xs->retries.
 */
struct spc_acb {
	struct scsi_generic scsi_cmd;
	int scsi_cmd_length;
	u_char *data_addr;		/* Saved data pointer */
	int data_length;		/* Residue */

	u_char target_stat;		/* SCSI status byte */

#ifdef notdef
	struct spc_dma_seg dma[SPC_NSEG]; /* Physical addresses+len */
#endif

	TAILQ_ENTRY(spc_acb) chain;
	struct scsi_xfer *xs;	/* SCSI xfer ctrl block from above */
	int flags;
#define ACB_NEXUS	0x02
#define ACB_SENSE	0x04
#define ACB_ABORT	0x40
#define ACB_RESET	0x80
	int timeout;
};

/*
 * Some info about each (possible) target on the SCSI bus.  This should
 * probably have been a "per target+lunit" structure, but we'll leave it at
 * this for now.
 */
struct spc_tinfo {
	int	cmds;		/* #commands processed */
	int	dconns;		/* #disconnects */
	int	touts;		/* #timeouts */
	int	perrs;		/* #parity errors */
	int	senses;		/* #request sense commands sent */
	ushort	lubusy;		/* What local units/subr. are busy? */
	u_char  flags;
#define DO_SYNC		0x01	/* (Re)Negotiate synchronous options */
#define DO_WIDE		0x02	/* (Re)Negotiate wide options */
	u_char  period;		/* Period suggestion */
	u_char  offset;		/* Offset suggestion */
	u_char	width;		/* Width suggestion */
};

struct spc_softc {
	struct device sc_dev;

	volatile u_int8_t *sc_regs;

	struct scsi_link sc_link;	/* prototype for subdevs */

	TAILQ_HEAD(, spc_acb) free_list, ready_list, nexus_list;
	struct spc_acb *sc_nexus;	/* current command */
	struct spc_acb sc_acb[8];
	struct spc_tinfo sc_tinfo[8];
	struct mutex sc_acb_mtx;
	struct scsi_iopool sc_iopool;

	/* Data about the current nexus (updated for every cmd switch) */
	u_char	*sc_dp;		/* Current data pointer */
	size_t	sc_dleft;	/* Data bytes left to transfer */
	u_char	*sc_cp;		/* Current command pointer */
	size_t	sc_cleft;	/* Command bytes left to transfer */

	/* Adapter state */
	u_char	 sc_phase;	/* Current bus phase */
	u_char	 sc_prevphase;	/* Previous bus phase */
	u_char	 sc_state;	/* State applicable to the adapter */
#define SPC_INIT	0
#define SPC_IDLE	1
#define SPC_SELECTING	2	/* SCSI command is arbiting  */
#define SPC_RESELECTED	3	/* Has been reselected */
#define SPC_CONNECTED	4	/* Actively using the SCSI bus */
#define SPC_DISCONNECT	5	/* MSG_DISCONNECT received */
#define SPC_CMDCOMPLETE	6	/* MSG_CMDCOMPLETE received */
#define SPC_CLEANING	7
	u_char	 sc_flags;
#define SPC_DROP_MSGIN	0x01	/* Discard all msgs (parity err detected) */
#define SPC_ABORTING	0x02	/* Bailing out */
#define SPC_DOINGDMA	0x04	/* doing DMA */
#define SPC_INACTIVE	0x80	/* The FIFO data path is active! */
	u_char	sc_selid;	/* Reselection ID */

	/* Message stuff */
	u_char	sc_msgpriq;	/* Messages we want to send */
	u_char	sc_msgoutq;	/* Messages sent during last MESSAGE OUT */
	u_char	sc_lastmsg;	/* Message last transmitted */
	u_char	sc_currmsg;	/* Message currently ready to transmit */
#define SEND_DEV_RESET		0x01
#define SEND_PARITY_ERROR	0x02
#define SEND_INIT_DET_ERR	0x04
#define SEND_REJECT		0x08
#define SEND_IDENTIFY		0x10
#define SEND_ABORT		0x20
#define SEND_SDTR		0x40
#define SEND_WDTR		0x80
#define SPC_MAX_MSG_LEN 8
	u_char  sc_omess[SPC_MAX_MSG_LEN];
	u_char	*sc_omp;		/* Outgoing message pointer */
	u_char	sc_imess[SPC_MAX_MSG_LEN];
	u_char	*sc_imp;		/* Incoming message pointer */

	/* Hardware stuff */
	int	sc_initiator;		/* Our scsi id */
	int	sc_freq;		/* Clock frequency in MHz */
	int	sc_minsync;		/* Minimum sync period / 4 */
	int	sc_maxsync;		/* Maximum sync period / 4 */
	int	sc_ctlflags;

	/* DMA function set from MD code */
	int (*sc_dma_start)(struct spc_softc *, void *, size_t, int);
	int (*sc_dma_done)(struct spc_softc *);

	/* Reset hook */
	void (*sc_reset)(struct spc_softc *);
};

#ifdef SPC_DEBUG
#define SPC_SHOWACBS	0x01
#define SPC_SHOWINTS	0x02
#define SPC_SHOWCMDS	0x04
#define SPC_SHOWMISC	0x08
#define SPC_SHOWTRACE	0x10
#define SPC_SHOWSTART	0x20
#define SPC_DOBREAK	0x40
extern int spc_debug; /* SPC_SHOWSTART|SPC_SHOWMISC|SPC_SHOWTRACE; */
#define SPC_PRINT(b, s)	do {if ((spc_debug & (b)) != 0) printf s;} while (0)
#define SPC_BREAK()	do {if ((spc_debug & SPC_DOBREAK) != 0) Debugger();} while (0)
#define SPC_ASSERT(x)	do {if (x) {} else {printf("%s at line %d: assertion failed\n", sc->sc_dev.dv_xname, __LINE__); Debugger();}} while (0)
#else
#define SPC_PRINT(b, s)
#define SPC_BREAK()
#define SPC_ASSERT(x)
#endif

#define SPC_ACBS(s)	SPC_PRINT(SPC_SHOWACBS, s)
#define SPC_INTS(s)	SPC_PRINT(SPC_SHOWINTS, s)
#define SPC_CMDS(s)	SPC_PRINT(SPC_SHOWCMDS, s)
#define SPC_MISC(s)	SPC_PRINT(SPC_SHOWMISC, s)
#define SPC_TRACE(s)	SPC_PRINT(SPC_SHOWTRACE, s)
#define SPC_START(s)	SPC_PRINT(SPC_SHOWSTART, s)

void	spc_attach(struct spc_softc *);
int	spc_intr(void *);
void	spc_init(struct spc_softc *);
void	spc_sched(struct spc_softc *);
void	spc_scsi_cmd(struct scsi_xfer *);
void	spc_reset(struct spc_softc *);

#define	SPC_ADDRESS(o)	(sc->sc_regs + ((o) << 1) + 1)
#define	spc_read(o)	*(volatile u_int8_t *)(SPC_ADDRESS(o))
#define	spc_write(o, v)	*(volatile u_int8_t *)(SPC_ADDRESS(o)) = (v)

#endif	/* _MB89352VAR_H_ */
@


1.8
log
@Remove unused ACB_ALLOC define.
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.7 2011/04/02 17:44:43 krw Exp $	*/
@


1.7
log
@Iopoolification.

ok dlg@@ "I'm interested" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.6 2010/04/04 17:40:14 miod Exp $	*/
a85 1
#define ACB_ALLOC	0x01
@


1.6
log
@Fix build after spc_scsi_cmd() prototype change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.5 2004/12/22 21:11:12 miod Exp $	*/
d125 2
@


1.5
log
@Upon SCSI command timeout, check if we have missed a DMA completion,
and if so, resume to regular phase change processing (due to the way this
SCSI controller works, it is not possible to rely upon DMA completion
interrupts).

While there, bring back openings to 2 in all cases, and move timeout_del()
to spc_done().

Tested by deraadt@@, millert@@ and I.
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.4 2004/12/22 21:07:29 miod Exp $	*/
d214 1
a214 1
int	spc_scsi_cmd(struct scsi_xfer *);
@


1.4
log
@Do not use DMA for odd-size transfers, as the last byte will not be
transferred correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.3 2004/08/21 18:00:26 miod Exp $	*/
d179 1
a179 1
	void (*sc_dma_done)(struct spc_softc *);
@


1.3
log
@Check for disabled parity in the master chip hconf register upon attach,
and do not enable parity in the scsi chip in this case.
From the old scsi code.

Tested by millert@@ and I, though none of us has non-parity capable 98658.
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.2 2004/08/21 17:58:34 miod Exp $	*/
d178 1
a178 1
	void (*sc_dma_start)(struct spc_softc *, void *, size_t, int);
@


1.2
log
@Be sure to reset the master hconf register when resetting the scsi chip.
Tested by millert@@ and I.
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.1 2004/08/03 21:46:56 miod Exp $	*/
d175 1
@


1.1
log
@Replace the old 4.4BSD scsi code used on hp300 with a ``real'' driver
interfaced with the MI scsi code.

Adapted from NetBSD with some changes (especially to get tape and old
cd-rom drives to not cause the driver to spin during probe).

Tested by millert@@ and I, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mb89352var.h,v 1.1 2004/04/21 15:23:55 aoyama Exp $	*/
d179 3
d214 1
a214 1
void	spc_minphys(struct buf *);
@

