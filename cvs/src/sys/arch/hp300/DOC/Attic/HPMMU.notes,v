head	1.5;
access;
symbols
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.10.02.21.28.03;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2002.02.10.23.15.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.20.17.02.29;	author mpech;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	97.01.12.15.12.09;	author downsj;	state Exp;
branches
	1.2.14.1;
next	1.1;

1.1
date	95.10.18.08.50.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.15;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.10.31.02.52.46;	author nate;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2002.03.06.00.57.21;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.35.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Too much dust on these files, it's time for them to leave the building.
@
text
@$OpenBSD: HPMMU.notes,v 1.4 2002/02/10 23:15:05 deraadt Exp $
$NetBSD: HPMMU.notes,v 1.2 1994/10/26 07:22:51 cgd Exp $

Overview:
--------

	(Some of this is gleaned from an article in the September 1986
	Hewlett-Packard Journal and info in the July 1987 HP Communicator)

	Page and segment table entries mimic the Motorola 68851 PMMU,
	in an effort at upward compatibility.  The HP MMU uses a two
	level translation scheme.  There are separate (but equal!)
	translation tables for both supervisor and user modes.  At the
	lowest level are page tables.  Each page table consists of one
	or more 4k pages of 1024x4 byte page table entries.  Each PTE
	maps one 4k page of VA space.  At the highest level is the
	segment table.  The segment table is a single 4K page of 1024x4
	byte entries.  Each entry points to a 4k page of PTEs.  Hence
	one STE maps 4Mb of VA space and one page of STEs is sufficient
	to map the entire 4Gb address space (what a coincidence!).  The
	unused valid bit in page and segment table entries must be
	zero.

	There are separate translation lookaside buffers for the user
	and supervisor modes, each containing 1024 entries.

	To augment the 68020's instruction cache, the HP CPU has an
	external cache.  A direct-mapped, virtual cache implementation
	is used with 16 Kbytes of cache on 320 systems and 32 Kbytes on
	350 systems.  Each cache entry can contain instructions or data,
	from either user or supervisor space.  Separate valid bits are
	kept for user and supervisor entries, allowing for descriminatory
	flushing of the cache.

	MMU translation and cache-miss detection are done in parallel.


Segment table entries:
------- ----- -------

	bits 31-12:	Physical page frame number of PT page
	bits 11-4:	Reserved at zero
			(can software use them?)
	bit 3:		Reserved at one
	bit 2:		Set to 1 if segment is read-only, ow read-write
	bits 1-0:	Valid bits
			(hardware uses bit 1)


Page table entries:
---- ----- -------

	bits 31-12:	Physical page frame number of page
	bits 11-7:	Available for software use
	bit 6:		If 1, inhibits caching of data in this page.
			(both instruction and external cache)
	bit 5:		Reserved at zero
	bit 4:		Hardware modify bit
	bit 3:		Hardware reference bit
	bit 2:		Set to 1 if page is read-only, ow read-write
	bits 1-0:	Valid bits
			(hardware uses bit 0)


Hardware registers:
-------- ---------

	The hardware has four longword registers controlling the MMU.
	The registers can be accessed as shortwords also (remember to
	add 2 to addresses given below).

	5F4000:	Supervisor mode segment table pointer.  Loaded (as longword)
		with page frame number (i.e. Physaddr >> 12) of the segment
		table mapping supervisor space.
	5F4004: User mode segment table pointer.  Loaded (as longword) with
		page frame number of the segment table mapping user space.
	5F4008: TLB control register.  Used to invalid large sections of the
		TLB.  More info below.
	5F400C:	MMU command/status register.  Defined as follows:

		bit 15:	If 1, indicates a page table fault occurred
		bit 14:	If 1, indicates a page fault occurred
		bit 13: If 1, indicates a protection fault (write to RO page)
		bit 6:	MC68881 enable.  Tied to chip enable line.
			(set this bit to enable)
		bit 5:	MC68020 instruction cache enable.  Tied to Insruction
			cache disable line.  (set this bit to enable)
		bit 3:	If 1, indicates an MMU related bus error occurred.
			Bits 13-15 are now valid.
		bit 2:	External cache enable.  (set this bit to enable)
		bit 1:	Supervisor mapping enable.  Enables translation of
			supervisor space VAs.
		bit 0:	User mapping enable.  Enables translation of user
			space VAs.


	Any bits set by the hardware are cleared only by software.
	(i.e. bits 3,13,14,15)

Invalidating TLB:
------------ ---

	All translations:
		Read the TLB control register (5F4008) as a longword.

	User translations only:
		Write a longword 0 to TLB register or set the user
		segment table pointer.

	Supervisor translations only:
		Write a longword 0x8000 to TLB register or set the
		supervisor segment table pointer.

	A particular VA translation:
		Set destination function code to 3 ("purge" space),
		write a longword 0 to the VA whose translation we are to
		invalidate, and restore function code.  This apparently
		invalidates any translation for that VA in both the user
		and supervisor LB.  Here is what I did:

		#define FC_PURGE 3
		#define FC_USERD 1
		_TBIS:
			movl	sp@@(4),a0	| VA to invalidate
			moveq	#FC_PURGE,d0	| change address space
			movc	d0,dfc		|   for destination
			moveq	#0,d0		| zero to invalidate?
			movsl	d0,a0@@		| hit it
			moveq	#FC_USERD,d0	| back to old
			movc	d0,dfc		|   address space
			rts			| done


Invalidating the external cache:
------------ --- -------- -----

	Everything:
		Toggle the cache enable bit (bit 2) in the MMU control
		register (5F400C).  Can be done by ANDing and ORing the
		register location.

	User:
		Change the user segment table pointer register (5F4004),
		i.e. read the current value and write it back.

	Supervisor:
		Change the supervisor segment table pointer register
		(5F4000), i.e. read the current value and write it back.
@


1.4
log
@spelling
@
text
@d1 1
a1 1
$OpenBSD: HPMMU.notes,v 1.3 2001/09/20 17:02:29 mpech Exp $
@


1.3
log
@occured->occurred

idea from deraadt@@ via NetBSD
millert@@ ok
@
text
@d1 1
a1 1
$OpenBSD: HPMMU.notes,v 1.2 1997/01/12 15:12:09 downsj Exp $
d12 1
a12 1
	level translation scheme.  There are seperate (but equal!)
d24 1
a24 1
	There are seperate translation lookaside buffers for the user
d31 1
a31 1
	from either user or supervisor space.  Seperate valid bits are
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
$OpenBSD: HPMMU.notes,v 1.3 2001/09/20 17:02:29 mpech Exp $
d12 1
a12 1
	level translation scheme.  There are separate (but equal!)
d24 1
a24 1
	There are separate translation lookaside buffers for the user
d31 1
a31 1
	from either user or supervisor space.  Separate valid bits are
@


1.2
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 1
a1 1
$OpenBSD$
d81 2
a82 2
		bit 15:	If 1, indicates a page table fault occured
		bit 14:	If 1, indicates a page fault occured
d88 1
a88 1
		bit 3:	If 1, indicates an MMU related bus error occured.
@


1.2.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
$OpenBSD: HPMMU.notes,v 1.2 1997/01/12 15:12:09 downsj Exp $
d81 2
a82 2
		bit 15:	If 1, indicates a page table fault occurred
		bit 14:	If 1, indicates a page fault occurred
d88 1
a88 1
		bit 3:	If 1, indicates an MMU related bus error occurred.
@


1.2.14.2
log
@Merge in trunk
@
text
@d1 1
a1 1
$OpenBSD$
d12 1
a12 1
	level translation scheme.  There are separate (but equal!)
d24 1
a24 1
	There are separate translation lookaside buffers for the user
d31 1
a31 1
	from either user or supervisor space.  Separate valid bits are
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
