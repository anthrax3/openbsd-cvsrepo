head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.24
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.22
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.20
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.18
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.16
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.8
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2014.03.18.22.36.33;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2013.03.21.21.51.00;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2013.02.02.13.34.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.18.19.54.19;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.31.17.59.47;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.05.10.11.31.21;	author downsj;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	97.11.06.19.42.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.58;	author downsj;	state Exp;
branches;
next	;

1.3.8.1
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: srt0.S,v 1.9 2013/03/21 21:51:00 deraadt Exp $	*/
/*	$NetBSD: srt0.S,v 1.4 1997/05/12 07:56:00 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: srt0.c 1.18 92/12/21$
 *
 *	@@(#)srt0.c	8.1 (Berkeley) 6/10/93
 */

/*
 * Startup code for standalone system
 */

#include <machine/asm.h>
#include <machine/hp300spu.h>

	STACK =	   0xfffff000		| below the ROM page
	BOOTTYPE = 0xfffffdc0
	LOWRAM =   0xfffffdce
	SYSFLAG =  0xfffffed2		| system flags
	MSUS =	   0xfffffedc		| MSUS (?) structure
	VECTORS =  0xfffffee0		| beginning of jump vectors
	NMIRESET = 0xffffff9c		| reset vector
	BUSERR =   0xfffffffc
	MAXADDR =  0xfffff000
	PAGE_SIZE =4096
	MMUCMD =   0x005f400c		| MMU command/status register

	.data
GLOBAL(bootdev)
	.long	0
GLOBAL(howto)
	.long	0
GLOBAL(lowram)
	.long	0
GLOBAL(machineid)
	.long	0
GLOBAL(mmuid)
	.long	0

	.chip	68020
	.text
ASENTRY_NOPROFILE(begin)
	movl	#STACK,%sp
	moveq	#47,%d0			| # of vectors - 1
	movl	#VECTORS+2,%a0		| addr part of first vector
1:
	movl	#_ASM_LABEL(__trap),%a0@@ | make it direct to __trap
	addql	#6,%a0			| move to next vector addr
	dbf	%d0,1b			| go til done
	movl	#NMIRESET,%a0		| NMI keyboard reset addr
	movl	#nmi,%a0@@		| catch in reset routine

/*
 * Determine our SPU type and look for internal HP-IB
 */
	lea	_C_LABEL(machineid),%a0
	movl	#0x808,%d0
	movc	%d0,%cacr		| clear and disable on-chip cache(s)
	movl	#0x200,%d0		| data freeze bit
	movc	%d0,%cacr		|   only exists on 68030
	movc	%cacr,%d0		| read it back
	tstl	%d0			| zero?
	jeq	not68030		| yes, we have 68020/68040

	/*
	 * 68030 models
	 */

	.chip	68030
	movl	#0x808,%d0
	movc	%d0,%cacr		| clear data freeze bit again
	movl	#0x80,MMUCMD		| set magic cookie
	movl	MMUCMD,%d0		| read it back
	btst	#7,%d0			| cookie still on?
	jeq	not370			| no, 360 or 375
	movl	#HP_370,%a0@@		| consider a 370 for now
	movl	#0,MMUCMD		| clear magic cookie
	movl	MMUCMD,%d0		| read it back
	btst	#7,%d0			| still on?
	jeq	ihpibcheck		| no, a 370
	movl	#HP_340,%a0@@		| yes, must be a 340
	jra	ihpibcheck

not370:
	movl	#HP_36X,%a0@@		| type is at least a 360
	movl	#0,MMUCMD		| clear magic cookie2
	movl	MMUCMD,%d0		| read it back
	btst	#16,%d0			| still on?
	jeq	ihpibcheck		| no, a 360 or a 362
	lsrl	#MMUID_SHIFT,%d0	| save MMU ID
	andl	#MMUID_MASK,%d0
	movl	%d0,_C_LABEL(mmuid)	| save mmuid
	cmpb	#MMUID_345,%d0		| are we a 345?
	jeq	isa345
	cmpb	#MMUID_375,%d0		| how about a 375?
	jeq	isa375
	movl	#HP_400,%a0@@		| must be a 400
	jra	ihpibcheck
isa345:
	movl	#HP_345,%a0@@
	jra	ihpibcheck
isa375:
	movl	#HP_375,%a0@@
	jra	ihpibcheck
	.chip	68020

	/*
	 * End of 68030 section
	 */

not68030:
	bset	#31,%d0			| data cache enable bit
	movc	%d0,%cacr		|   only exists on 68040
	movc	%cacr,%d0		| read it back
	tstl	%d0			| zero?
	beq	is68020			| yes, we have 68020
	moveq	#0,%d0			| now turn it back off
	movec	%d0,%cacr		|   before we access any data

	/*
	 * 68040 models
	 */

	.chip	68040
	movc	%d0,%itt0
	movc	%d0,%itt1
	movc	%d0,%dtt0
	movc	%d0,%dtt1
	cinva	%bc
	movl	MMUCMD,%d0		| get MMU ID
	lsrl	#MMUID_SHIFT,%d0
	andl	#MMUID_MASK,%d0
	movl	%d0,_C_LABEL(mmuid)	| save mmuid
	cmpb	#MMUID_425_T,%d0	| are we a 425t?
	jeq	isa425
	cmpb	#MMUID_425_S,%d0	| how about 425s?
	jeq	isa425
	cmpb	#MMUID_425_E,%d0	| or maybe a 425e?
	jeq	isa425
	cmpb	#MMUID_433_T,%d0	| or a 433t?
	jeq	isa433
	cmpb	#MMUID_433_S,%d0	| maybe a 433s?
	jeq	isa433
	cmpb	#MMUID_385,%d0		| then a 385?
	jeq	isa385
	cmpb	#MMUID_382,%d0		| last chance...
	jeq	isa382
	movl	#HP_380,%a0@@		| guess we are a 380
	jra	ihpibcheck
isa425:
	movl	#HP_425,%a0@@
	jra	ihpibcheck
isa433:
	movl	#HP_433,%a0@@
	jra	ihpibcheck
isa385:
	movl	#HP_385,%a0@@
	jra	ihpibcheck
isa382:
	movl	#HP_382,%a0@@
	jra	ihpibcheck
	.chip	68020

	/*
	 * End 68040 section
	 */

	/*
	 * 68020 models
	 */

is68020:
	movl	#HP_330,%a0@@		| consider a 330 for now
	movl	#1,MMUCMD		| a 68020, write HP MMU location
	movl	MMUCMD,%d0		| read it back
	btst	#0,%d0			| zero?
	jeq	ihpibcheck		| yes, a 330
	movl	#HP_320,%a0@@		| no, consider a 320 for now
	movl	#0x80,MMUCMD		| set magic cookie
	movl	MMUCMD,%d0		| read it back
	btst	#7,%d0			| cookie still on?
	jeq	ihpibcheck		| no, just a 320
	movl	#HP_350,%a0@@		| yes, a 350

	/*
	 * End 68020 section
	 */

ihpibcheck:
	movl	#0,MMUCMD		| make sure MMU is off
	btst	#5,SYSFLAG		| do we have an internal HP-IB?
	jeq	boottype		| yes, continue
	clrl	_C_LABEL(internalhpib)	| no, clear the internal address
/*
 * If this is a reboot, extract howto/bootdev stored by kernel
 */
boottype:
	cmpw	#12,BOOTTYPE		| is this a reboot (REQ_REBOOT)?
	jne	notreboot		| no, skip
	lea	MAXADDR,%a0		| find last page
	movl	%a0@@+,%d7		| and extract howto, bootdev
	movl	%a0@@+,%d6		|   from where doboot() left them
	jra	boot1
/*
 * At this point we do not know which logical device the MSUS select
 * code refers to so we cannot construct bootdev.  So we just punt
 * and let configure() construct it.
 */
notreboot:
	moveq	#0,%d6			| make sure bootdev is invalid
	cmpw	#18,BOOTTYPE		| does the user want to interact?
	jeq	askme			| yes, go to it
	moveq	#0,%d7			| default to RB_AUTOBOOT
	jra	boot1
askme:
	moveq	#3,%d7			| default to RB_SINGLE|RB_ASKNAME
boot1:
	movl	%d6,_C_LABEL(bootdev)	| save bootdev and howto
	movl	%d7,_C_LABEL(howto)	|   globally so all can access
	movl	LOWRAM,%d0		| read lowram value from bootrom
	/*
	 * Must preserve the scratch area for the BOOT ROM.
	 * Round up to the next 8k boundary.
	 */
	addl	#((2*PAGE_SIZE)-1),%d0
	andl	#-(2*PAGE_SIZE),%d0
	movl	%d0,_C_LABEL(lowram)	| stash that value
start:
	movl	#_C_LABEL(edata),%a2	| start of BSS
	movl	#_C_LABEL(end),%a3	| end
1:
	clrb	%a2@@+			| clear BSS
	cmpl	%a2,%a3			| done?
	bne	1b			| no, keep going
	jsr	_C_LABEL(configure)	| configure critical devices
	jsr	_C_LABEL(main)		| lets go
GLOBAL(_rtt)
	movl	#3,_C_LABEL(howto)	| restarts get RB_SINGLE|RB_ASKNAME
	jmp	start

/*
 * probe a location and see if it causes a bus error
 */
ENTRY_NOPROFILE(badaddr)
	movl	BUSERR,_C_LABEL(_bsave)	| save ROM bus error handler address
	movl	%sp,_C_LABEL(_ssave)	| and current stack pointer
	movl	#catchbad,BUSERR	| plug in our handler
	movl	%sp@@(4),%a0		| address to probe
	movw	%a0@@,%d1		| do it
	movl	_C_LABEL(_bsave),BUSERR	| if we got here, it did not fault
	clrl	%d0			| return that this was not a bad addr
	rts

catchbad:
	movl	_C_LABEL(_bsave),BUSERR	| got a bus error, so restore
					|   old handler
	movl	_C_LABEL(_ssave),%sp	| manually restore stack
	moveq	#1,%d0			| indicate that we got a fault
	rts				| return to caller of badaddr()

	.data
GLOBAL(_bsave)
	.long	0

GLOBAL(_ssave)
	.long	0

ASENTRY_NOPROFILE(__trap)
	moveml	#0xFFFF,%sp@@-		| save registers
	movl	%sp,%sp@@-		| push pointer to frame
	jsr	_C_LABEL(trap)		| call C routine to deal with it
	tstl	%d0
	jeq	Lstop
	addql	#4,%sp
	moveml	%sp@@+,#0x7FFF
	addql	#8,%sp
	rte
Lstop:
	stop	#0x2700			| stop cold

ASENTRY_NOPROFILE(nmi)
	movw	#18,BOOTTYPE		| mark as system switch
	jsr	_C_LABEL(kbdnmi)	| clear the interrupt, and
					|   reset the system
	stop	#0			| SCREEEECH!

ENTRY_NOPROFILE(call_req_reboot)
	jmp	0x1A4			| call ROM reboot function
	rts				| XXX: just in case?

ENTRY_NOPROFILE(romout)
	movl	%sp@@(4),%d0		| line number
	movl	%sp@@(8),%a0		| string
	jsr	0x150			| do it
	rts
@


1.9
log
@NBPG -> PAGE_SIZE, PGSHIFT -> PAGE_SHIFT, PGOFSET -> PAGE_MASK
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.8 2013/02/02 13:34:29 miod Exp $	*/
@


1.8
log
@hp300 ELF bits. Requires many device and prom related structs to now be declared
as packed due to them containing 32-bit types at 16-bit but not 32-bit aligned
offsets. The boot block updates (especially mkboot) come straight from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.7 2011/08/18 19:54:19 miod Exp $	*/
d58 1
a58 1
	NBPG =	   4096
d258 2
a259 2
	addl	#((2*NBPG)-1),%d0
	andl	#-(2*NBPG),%d0
@


1.7
log
@Because model 362 does not have an SGC bus (or a blind, deaf and mute one),
there is no way we can tell models 360 and 362 apart by probing for an SGC
bus, or for a frodo(4) chip since of the `lil' black swan' 3x2 models, only
model 382 has frodo. So don't bother trying to tell models 360 and 362
apart, and use a common 36X symbol. No functional change except for useless
code removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.6 2006/08/17 06:31:10 miod Exp $	*/
d73 1
d76 3
a78 3
	movl	#STACK,sp
	moveq	#47,d0			| # of vectors - 1
	movl	#VECTORS+2,a0		| addr part of first vector
d80 5
a84 5
	movl	#_ASM_LABEL(__trap),a0@@	| make it direct to __trap
	addql	#6,a0			| move to next vector addr
	dbf	d0,1b			| go til done
	movl	#NMIRESET,a0		| NMI keyboard reset addr
	movl	#nmi,a0@@		| catch in reset routine
d89 7
a95 7
	lea	_C_LABEL(machineid),a0
	movl	#0x808,d0
	movc	d0,cacr			| clear and disable on-chip cache(s)
	movl	#0x200,d0		| data freeze bit
	movc	d0,cacr			|   only exists on 68030
	movc	cacr,d0			| read it back
	tstl	d0			| zero?
d102 3
a104 2
	movl	#0x808,d0
	movc	d0,cacr			| clear data freeze bit again
d106 2
a107 2
	movl	MMUCMD,d0		| read it back
	btst	#7,d0			| cookie still on?
d109 1
a109 1
	movl	#HP_370,a0@@		| consider a 370 for now
d111 2
a112 2
	movl	MMUCMD,d0		| read it back
	btst	#7,d0			| still on?
d114 1
a114 1
	movl	#HP_340,a0@@		| yes, must be a 340
d118 1
a118 1
	movl	#HP_36X,a0@@		| type is at least a 360
d120 2
a121 2
	movl	MMUCMD,d0		| read it back
	btst	#16,d0			| still on?
d123 4
a126 4
	lsrl	#MMUID_SHIFT,d0		| save MMU ID
	andl	#MMUID_MASK,d0
	movl	d0,_C_LABEL(mmuid)	| save mmuid
	cmpb	#MMUID_345,d0		| are we a 345?
d128 1
a128 1
	cmpb	#MMUID_375,d0		| how about a 375?
d130 1
a130 1
	movl	#HP_400,a0@@		| must be a 400
d133 1
a133 1
	movl	#HP_345,a0@@
d136 1
a136 1
	movl	#HP_375,a0@@
d138 1
d145 4
a148 4
	bset	#31,d0			| data cache enable bit
	movc	d0,cacr			|   only exists on 68040
	movc	cacr,d0			| read it back
	tstl	d0			| zero?
d150 2
a151 2
	moveq	#0,d0			| now turn it back off
	movec	d0,cacr			|   before we access any data
d157 11
a167 10
	.long	0x4e7b0004		| movc d0,itt0
	.long	0x4e7b0005		| movc d0,itt1
	.long	0x4e7b0006		| movc d0,dtt0
	.long	0x4e7b0007		| movc d0,dtt1
	.word	0xf4d8			| cinva bc
	movl	MMUCMD,d0		| get MMU ID
	lsrl	#MMUID_SHIFT,d0
	andl	#MMUID_MASK,d0
	movl	d0,_C_LABEL(mmuid)	| save mmuid
	cmpb	#MMUID_425_T,d0		| are we a 425t?
d169 1
a169 1
	cmpb	#MMUID_425_S,d0		| how about 425s?
d171 1
a171 1
	cmpb	#MMUID_425_E,d0		| or maybe a 425e?
d173 1
a173 1
	cmpb	#MMUID_433_T,d0		| or a 433t?
d175 1
a175 1
	cmpb	#MMUID_433_S,d0		| maybe a 433s?
d177 1
a177 1
	cmpb	#MMUID_385,d0		| then a 385?
d179 1
a179 1
	cmpb	#MMUID_382,d0		| last chance...
d181 1
a181 1
	movl	#HP_380,a0@@		| guess we are a 380
d184 1
a184 1
	movl	#HP_425,a0@@
d187 1
a187 1
	movl	#HP_433,a0@@
d190 1
a190 1
	movl	#HP_385,a0@@
d193 1
a193 1
	movl	#HP_382,a0@@
d195 1
d206 1
a206 1
	movl	#HP_330,a0@@		| consider a 330 for now
d208 2
a209 2
	movl	MMUCMD,d0		| read it back
	btst	#0,d0			| zero?
d211 1
a211 1
	movl	#HP_320,a0@@		| no, consider a 320 for now
d213 2
a214 2
	movl	MMUCMD,d0		| read it back
	btst	#7,d0			| cookie still on?
d216 1
a216 1
	movl	#HP_350,a0@@		| yes, a 350
d233 3
a235 3
	lea	MAXADDR,a0		| find last page
	movl	a0@@+,d7			| and extract howto, bootdev
	movl	a0@@+,d6			|   from where doboot() left them
d243 1
a243 1
	moveq	#0,d6			| make sure bootdev is invalid
d246 1
a246 1
	moveq	#0,d7			| default to RB_AUTOBOOT
d249 1
a249 1
	moveq	#3,d7			| default to RB_SINGLE|RB_ASKNAME
d251 3
a253 3
	movl	d6,_C_LABEL(bootdev)	| save bootdev and howto
	movl	d7,_C_LABEL(howto)	|   globally so all can access
	movl	LOWRAM,d0		| read lowram value from bootrom
d258 3
a260 3
	addl	#((2*NBPG)-1),d0
	andl	#-(2*NBPG),d0
	movl	d0,_C_LABEL(lowram)	| stash that value
d262 2
a263 2
	movl	#_C_LABEL(edata),a2	| start of BSS
	movl	#_C_LABEL(end),a3	| end
d265 2
a266 2
	clrb	a2@@+			| clear BSS
	cmpl	a2,a3			| done?
d279 1
a279 1
	movl	sp,_C_LABEL(_ssave)	| and current stack pointer
d281 2
a282 2
	movl	sp@@(4),a0		| address to probe
	movw	a0@@,d1			| do it
d284 1
a284 1
	clrl	d0			| return that this was not a bad addr
d290 2
a291 2
	movl	_C_LABEL(_ssave),sp	| manually restore stack
	moveq	#1,d0			| indicate that we got a fault
d302 2
a303 2
	moveml	#0xFFFF,sp@@-		| save registers
	movl	sp,sp@@-			| push pointer to frame
d305 1
a305 1
	tstl	d0
d307 3
a309 3
	addql	#4,sp
	moveml	sp@@+,#0x7FFF
	addql	#8,sp
d325 2
a326 2
	movl	sp@@(4),d0		| line number
	movl	sp@@(8),a0		| string
@


1.6
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.5 2005/12/31 17:59:47 miod Exp $	*/
d116 1
a116 1
	movl	#HP_360,a0@@		| type is at least a 360
@


1.5
log
@Sync with recent kernel changes: recognize more models, use the same logic
to pick apci as a console on 425e. Crank version.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.4 2003/06/02 23:27:46 millert Exp $	*/
d177 1
a177 1
	movl	#HP_380,a0@@		| guess we're a 380
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.3 1998/05/10 11:31:21 downsj Exp $	*/
d46 1
a46 1
/* For machineid and mmuid constants */
a48 3
/* For _C_LABEL() and friends. */
#include <machine/asm.h>

a63 1

a65 1

a67 1

a69 1

a96 3
	movl	#0x808,d0
	movc	d0,cacr			| clear data freeze bit again

d101 2
d120 1
a120 1
	jeq	ihpibcheck		| no, a 360
d150 4
a158 5

	/*
	 * 68040 models
	 */

d173 1
a173 1
	cmpb	#MMUID_385,d0		| last chance...
d175 2
d187 3
@


1.3
log
@* Remove stupid, non-working ROM printf()s from apci.c
* Add 425e autodetection.
* Increment version number.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.2 1997/11/06 19:42:45 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3.8.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.3 1998/05/10 11:31:21 downsj Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@Idnetify/support hp385 (33Mhz 68040)
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.1 1997/07/14 08:14:58 downsj Exp $	*/
d179 2
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d182 1
a182 1
	cmpb	#MMUID_433_S,d0		| last chance...
d184 2
d193 3
@
