head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	UBC_SYNC_B:1.5
	SMP:1.5.0.2
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	97.07.14.08.13.28;	author downsj;	state dead;
branches;
next	1.4;

1.4
date	97.07.13.07.21.45;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.02.03.07.19.03;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.01.17.08.32.40;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.26;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@/*	$OpenBSD: conf.c,v 1.4 1997/07/13 07:21:45 downsj Exp $	*/
/*	$NetBSD: conf.c,v 1.12 1996/10/14 07:29:15 thorpej Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)conf.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>

#include <lib/libsa/stand.h>

#include <hp300/stand/samachdep.h>

#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/in_systm.h>

#include <lib/libsa/nfs.h>
#include <hp300/stand/rawfs.h>
#include <lib/libsa/ufs.h>

int	debug = 0;	/* XXX */

/*
 * Device configuration
 */
int	netstrategy __P((void *, int, daddr_t, size_t, void *, size_t *));
int	netopen __P((struct open_file *, ...));
int	netclose __P((struct open_file *));
#define netioctl	noioctl

int	ctstrategy __P((void *, int, daddr_t, size_t, void *, size_t *));
int	ctopen __P((struct open_file *, ...));
int	ctclose __P((struct open_file *));
#define	ctioctl		noioctl

int	hdstrategy __P((void *, int, daddr_t, size_t, void *, size_t *));
int	hdopen __P((struct open_file *, ...));
int	hdclose __P((struct open_file *));
#define hdioctl		noioctl

int	sdstrategy __P((void *, int, daddr_t, size_t, void *, size_t *));
int	sdopen __P((struct open_file *, ...));
int	sdclose __P((struct open_file *));
#define	sdioctl		noioctl

#define xxstrategy	\
	(int (*) __P((void *, int, daddr_t, size_t, void *, size_t *)))nullsys
#define xxopen		(int (*) __P((struct open_file *, ...)))nodev
#define xxclose		(int (*) __P((struct open_file *)))nullsys

/*
 * Note: "le" isn't a major offset.
 */
struct devsw devsw[] = {
	{ "ct",	ctstrategy,	ctopen,	ctclose,	ctioctl }, /*0*/
	{ "??",	xxstrategy,	xxopen,	xxclose,	noioctl }, /*1*/
	{ "hd",	hdstrategy,	hdopen,	hdclose,	hdioctl }, /*2*/
	{ "??",	xxstrategy,	xxopen,	xxclose,	noioctl }, /*3*/
	{ "sd",	sdstrategy,	sdopen,	sdclose,	sdioctl }, /*4*/
	{ "??",	xxstrategy,	xxopen,	xxclose,	noioctl }, /*5*/
	{ "le",	netstrategy,	netopen, netclose,	netioctl },/*6*/
};
int	ndevs = (sizeof(devsw) / sizeof(devsw[0]));

extern struct netif_driver le_driver;

struct netif_driver *netif_drivers[] = {
	&le_driver,
};
int	n_netif_drivers = (sizeof(netif_drivers) / sizeof(netif_drivers[0]));

/*
 * Physical unit/lun detection.
 */
int	punitzero __P((int, int, int *));

int
punitzero(ctlr, slave, punit)
	int ctlr, slave, *punit;
{

	*punit = 0;
	return (0);
}

extern	int ctpunit __P((int, int, int *));
#define	xxpunit		punitzero
#define	hdpunit		punitzero
#define	sdpunit		punitzero
#define	lepunit		punitzero

struct punitsw punitsw[] = {
	{ ctpunit },
	{ xxpunit },
	{ hdpunit },
	{ xxpunit },
	{ sdpunit },
	{ xxpunit },
	{ lepunit },
};
int	npunit = (sizeof(punitsw) / sizeof(punitsw[0]));

/*
 * Filesystem configuration
 */
struct fs_ops file_system_rawfs[] = {
	{ rawfs_open, rawfs_close, rawfs_read, rawfs_write, rawfs_seek,
	    rawfs_stat },
};

struct fs_ops file_system_ufs[] = {
	{ ufs_open, ufs_close, ufs_read, ufs_write, ufs_seek, ufs_stat },
};

struct fs_ops file_system_nfs[] = {
	{ nfs_open, nfs_close, nfs_read, nfs_write, nfs_seek, nfs_stat },
};

struct fs_ops file_system[1];
int	nfsys = 1;		/* we always know which one we want */


/*
 * Inititalize controllers
 * 
 * XXX this should be a table
 */
void ctlrinit()
{
	leinit();
	hpibinit();
	scsiinit();
}
@


1.4
log
@APCI support and new CPU configuration from NetBSD.
Fix all of the include refs.
Bump version number to 2.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.3 1997/02/03 07:19:03 downsj Exp $	*/
@


1.3
log
@rd -> hd
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.2 1997/01/17 08:32:40 downsj Exp $	*/
d41 3
a43 2
#include "stand.h"
#include "samachdep.h"
d51 3
a53 3
#include "nfs.h"
#include "rawfs.h"
#include "ufs.h"
@


1.2
log
@hp300 bootblocks, sync'd with NetBSD 011697, with changes and a new build
method.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 4
a72 4
int	rdstrategy __P((void *, int, daddr_t, size_t, void *, size_t *));
int	rdopen __P((struct open_file *, ...));
int	rdclose __P((struct open_file *));
#define rdioctl		noioctl
d90 1
a90 1
	{ "rd",	rdstrategy,	rdopen,	rdclose,	rdioctl }, /*2*/
d121 1
a121 1
#define	rdpunit		punitzero
d128 1
a128 1
	{ rdpunit },
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: conf.c,v 1.10 1995/09/23 17:28:11 thorpej Exp $	*/
d42 1
a43 1
#if defined(NETBOOT) || defined(SYS_INST)
d51 1
a51 4

#endif /* NETBOOT || SYS_INST */

#ifndef NETBOOT
a52 1
#endif /* ! NETBOOT */
a58 1
#if defined(NETBOOT) || defined(SYS_INST)
a62 1
#endif /* NETBOOT || SYS_INST */
a63 3
#ifndef NETBOOT
/* XXX: no support for tapes in SYS_INST yet. */
#ifdef TAPEBOOT
a66 7
#else
#define	ctstrategy	\
	(int (*) __P((void *, int, daddr_t, size_t, void *, size_t *)))nullsys
#define	ctopen		(int (*) __P((struct open_file *, ...)))nodev
#define	ctclose		(int (*) __P((struct open_file *)))nullsys
#endif /* TAPEBOOT */

d84 3
a86 2
#endif /* ! NETBOOT */

a87 3
#ifdef NETBOOT
	{ "le", netstrategy,	netopen, netclose,	netioctl }, /*0*/
#else
d93 2
a94 4
#ifdef SYS_INST
	{ "le", netstrategy,	netopen, netclose,	netioctl },
#endif /* SYS_INST */
#endif /* NETBOOT */
d96 39
a134 1
int	ndevs = (sizeof(devsw)/sizeof(devsw[0]));
d139 6
a144 2
struct fs_ops file_system[] = {
#ifndef NETBOOT
d146 3
a148 2
#endif /* ! NETBOOT */
#if defined(NETBOOT) || defined(SYS_INST)
a149 1
#endif /* NETBOOT || SYS_INST */
d152 2
a153 4
int nfsys = (sizeof(file_system) / sizeof(file_system[0]));

#if defined(NETBOOT) || defined(SYS_INST)
extern struct netif_driver le_driver;
a154 5
struct netif_driver *netif_drivers[] = {
	&le_driver,
};
int n_netif_drivers = sizeof(netif_drivers)/sizeof(netif_drivers[0]);
#endif /* NETBOOT */
a162 1
#if defined(NETBOOT) || defined(SYS_INST)
a163 2
#endif /* NETBOOT || SYS_INST */
#ifndef NETBOOT
a165 1
#endif /* ! NETBOOT */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
