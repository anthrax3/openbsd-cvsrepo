head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.18
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.16
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.14
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.12
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@# @;


1.14
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2013.02.10.20.27.18;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.01.17.17.44;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.18.20.02.58;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.18.06.21.40;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.26.10.01.42;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.17.06.31.08;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.14.21.02.54;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.30.02.03.48;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.13.21.03.37;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.02.09.00.23;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	99.08.16.09.43.07;	author downsj;	state Exp;
branches
	1.3.4.1
	1.3.14.1;
next	1.2;

1.2
date	97.09.14.12.54.20;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.13.25;	author downsj;	state Exp;
branches;
next	;

1.3.4.1
date	2003.03.27.23.19.22;	author niklas;	state Exp;
branches;
next	;

1.3.14.1
date	2003.05.19.21.39.16;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@#	$OpenBSD: Makefile.inc,v 1.13 2013/02/10 20:27:18 miod Exp $
#	$NetBSD: Makefile.inc,v 1.7 1997/05/12 07:43:18 thorpej Exp $

BINDIR=			/usr/mdec

# RELOC=FFF00000 allows for boot prog up to FF000 (1044480) bytes long
RELOC=	FFF00000

CFLAGS+=		-Wall -Wstrict-prototypes -Wmissing-prototypes \
			-fno-stack-protector -msoft-float
CFLAGS+=		-fno-builtin-printf -fno-builtin-putchar \
			-fno-builtin-vprintf

SA_CPPFLAGS+=		-DAPCICONSOLE -DDCACONSOLE -DDCMCONSOLE -DITECONSOLE
SA_CPPFLAGS+=		-DHIL_KEYBOARD -DDOMAIN_KEYBOARD
SA_CPPFLAGS+=		-D_STANDALONE -D__hp300__
SA_CPPFLAGS+=		-DCOMPAT_UFS -DNO_LSEEK

# Limit the alloc() heap to below the msgbuf and ROM scratch pages.
SA_CPPFLAGS+=		-DHEAP_LIMIT="0xffffdfff"

### Figure out what to use for libcommon
COMMONDIR=		${.CURDIR}/../common

.if exists(${COMMONDIR}/${__objdir})
COMMONOBJDIR=		${COMMONDIR}/${__objdir}
.else
COMMONOBJDIR=		${COMMONDIR}
.endif

LIBCOMMON=		${COMMONOBJDIR}/libcommon.a

### Figure out what to use for libsa
LIBSADIR=		${.CURDIR}/../libsa

.if exists(${LIBSADIR}/${__objdir})
LIBSAOBJDIR=		${LIBSADIR}/${__objdir}
.else
LIBSAOBJDIR=		${LIBSADIR}
.endif

LIBSA=			${LIBSAOBJDIR}/libsa.a

### Figure out what to use for libsaz
LIBSAZDIR=		${.CURDIR}/../libsaz

.if exists(${LIBSAZDIR}/${__objdir})
LIBSAZOBJDIR=		${LIBSAZDIR}/${__objdir}
.else
LIBSAZOBJDIR=		${LIBSAZDIR}
.endif

LIBSAZ=			${LIBSAZOBJDIR}/libsaz.a

### Figure out what to use for libz
LIBZDIR=		${.CURDIR}/../libz

.if exists(${LIBZDIR}/${__objdir})
LIBZOBJDIR=		${LIBZDIR}/${__objdir}
.else
LIBZOBJDIR=		${LIBZDIR}
.endif

LIBZ=			${LIBZOBJDIR}/libz.a

### Figure out what to use for mkboot
MKBOOTDIR=		${.CURDIR}/../mkboot

.if exists(${MKBOOTDIR}/${__objdir})
MKBOOTOBJDIR=		${MKBOOTDIR}/${__objdir}
.else
MKBOOTOBJDIR=		${MKBOOTDIR}
.endif

MKBOOT_PROG=		${MKBOOTOBJDIR}/mkboot

### Figure out what to use for stripboot
STRIPBOOTDIR=		${.CURDIR}/../stripboot

.if exists(${STRIPBOOTDIR}/${__objdir})
STRIPBOOTOBJDIR=	${STRIPBOOTDIR}/${__objdir}
.else
STRIPBOOTOBJDIR=	${STRIPBOOTDIR}
.endif

STRIPBOOT_PROG=		${STRIPBOOTOBJDIR}/stripboot

# Make sure ${MKBOOT_PROG} is always available
${MKBOOT_PROG}:
	@@cd ${MKBOOTDIR} && make depend && make

# Make sure ${STRIPBOOT_PROG} is always available
${STRIPBOOT_PROG}:
	@@cd ${STRIPBOOTDIR} && make depend && make
@


1.13
log
@switch m68k ports to gcc3
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2013/01/01 17:17:44 miod Exp $
@


1.12
log
@Define _STANDALONE, not STANDALONE, in the hp300 bootblocks, to follow the
common (and expected) practice. This exposes a flaw, in that mkboot, a host
tool, gets built with boot block settings (and won't compile if _STANDALONE
is defined). Fix this by using different set of CPPFLAGS for host tools and
boot blocks. While there, avoid sourcing ../Makefile.inc twice.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2011/08/18 20:02:58 miod Exp $
d11 2
@


1.11
log
@So, it turns out that models 362 and 382 built-in frame buffer only shows up
in DIO-II space, as a fat device spanning four select codes (i.e. 16MB of
memory). This is way too much for an at-most 2 Mpixel 8bit frame buffer, and
it turns out that this is because the device provides both a regular DIO-II
frame buffer (spanning two select codes) and a regular STI frame buffer
(spanning the other two select codes).
This commit introduces a straightforward sti@@dio attachment to get a working
sti(4) and wsdisplay(4) in a ridiculously small number of lines; however
the console code needs some changes to avoid duplicating globals.

While there, add sti@@dio support for the bootblocks, and I couldn't help
myself but clean the most rotten parts of them, and try to have them reuse
various files in sys/arch/hp300/dev instead of rolling their outdated ones.

Tested on a real 382 with the low-resolution frame buffer:
sti0 at dio0 scode 132: rev 8.02;129, ID 0x27134CB440A00499
sti0: 382V, 2048x512 frame buffer, 640x480x8 display
sti0: 8x16 font type 1, 16 bpc, charset 0-255
wsdisplay0 at sti0 mux 1: console (std, vt100 emulation)

Boot blocks updates tested on DIO-II 425t (serial/glass console), SGC 425e
(serial/glass console) and 382 (serial/glass console). And will be tested
on SGC 425t soon as well.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2011/03/18 06:21:40 matthew Exp $
d12 4
a15 4
CPPFLAGS+=		-DAPCICONSOLE -DDCACONSOLE -DDCMCONSOLE -DITECONSOLE
CPPFLAGS+=		-DHIL_KEYBOARD -DDOMAIN_KEYBOARD
CPPFLAGS+=		-DSTANDALONE -D__hp300__
CPPFLAGS+=		-DCOMPAT_UFS -DNO_LSEEK
d18 1
a18 1
CPPFLAGS+=		-DHEAP_LIMIT="0xffffdfff"
@


1.10
log
@Fix obj directory probing to support cross compiling.

"Go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2007/11/26 10:01:42 deraadt Exp $
d13 2
a14 3
CPPFLAGS+=		-DHIL_KEYBOARD -DUK_KEYBOARD
CPPFLAGS+=		-DDOMAIN_KEYBOARD
CPPFLAGS+=		-DSTANDALONE -Dhp300
@


1.9
log
@More LIBKERN bits that go away
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2006/08/17 06:31:08 miod Exp $
d24 2
a25 4
.if exists(${COMMONDIR}/obj.${MACHINE})
COMMONOBJDIR=		${COMMONDIR}/obj.${MACHINE}
.elif exists(${COMMONDIR}/obj)
COMMONOBJDIR=		${COMMONDIR}/obj
d35 2
a36 4
.if exists(${LIBSADIR}/obj.${MACHINE})
LIBSAOBJDIR=		${LIBSADIR}/obj.${MACHINE}
.elif exists(${LIBSADIR}/obj)
LIBSAOBJDIR=		${LIBSADIR}/obj
d46 2
a47 4
.if exists(${LIBSAZDIR}/obj.${MACHINE})
LIBSAZOBJDIR=		${LIBSAZDIR}/obj.${MACHINE}
.elif exists(${LIBSAZDIR}/obj)
LIBSAZOBJDIR=		${LIBSAZDIR}/obj
d57 2
a58 4
.if exists(${LIBZDIR}/obj.${MACHINE})
LIBZOBJDIR=		${LIBZDIR}/obj.${MACHINE}
.elif exists(${LIBZDIR}/obj)
LIBZOBJDIR=		${LIBZDIR}/obj
d68 2
a69 4
.if exists(${MKBOOTDIR}/obj.${MACHINE})
MKBOOTOBJDIR=		${MKBOOTDIR}/obj.${MACHINE}
.elif exists(${MKBOOTDIR}/obj)
MKBOOTOBJDIR=		${MKBOOTDIR}/obj
d79 2
a80 4
.if exists(${STRIPBOOTDIR}/obj.${MACHINE})
STRIPBOOTOBJDIR=	${STRIPBOOTDIR}/obj.${MACHINE}
.elif exists(${STRIPBOOTDIR}/obj)
STRIPBOOTOBJDIR=	${STRIPBOOTDIR}/obj
@


1.8
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2006/04/14 21:02:54 miod Exp $
a32 13

### Figure out what to use for libkern
LIBKERNDIR=		${.CURDIR}/../libkern

.if exists(${LIBKERNDIR}/obj.${MACHINE})
LIBKERNOBJDIR=		${LIBKERNDIR}/obj.${MACHINE}
.elif exists(${LIBKERNDIR}/obj)
LIBKERNOBJDIR=		${LIBKERNDIR}/obj
.else
LIBKERNOBJDIR=		${LIBKERNDIR}
.endif

LIBKERN=		${LIBKERNOBJDIR}/libkern.a
@


1.7
log
@Compile hp300 stand with Wall or I'll never get motivated to make it clean.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2005/12/30 02:03:48 millert Exp $
d9 2
a10 1
CFLAGS+=		-Wall -fno-stack-protector
d12 1
a12 1
CPPFLAGS+=		-DDCACONSOLE -DAPCICONSOLE -DITECONSOLE -DDCMCONSOLE
@


1.6
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2004/07/13 21:03:37 marc Exp $
d9 1
a9 1
CFLAGS+=		-fno-stack-protector
@


1.5
log
@errno changes, lib major version bumps, and general flag day
To build you must:
cd /usr/src && make obj && make includes
cd lib/libc && make depend && make && NOMAN=1 sudo make install
cd /usr/src && make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2002/12/02 09:00:23 miod Exp $
a15 1
CPPFLAGS+=		-Derrno=errno
@


1.4
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1999/08/16 09:43:07 downsj Exp $
d16 1
@


1.3
log
@Implement real CD booting, aka SYS_CDBOOT, the LIF file small enough to
fit in the begining of an ISO9660 image...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1997/09/14 12:54:20 downsj Exp $
d8 2
@


1.3.14.1
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
a7 2

CFLAGS+=		-fno-stack-protector
@


1.3.4.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
a7 2

CFLAGS+=		-fno-stack-protector
@


1.2
log
@Make and install a raw version of uboot, too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 1997/07/14 08:13:25 downsj Exp $
d56 13
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
#	$OpenBSD$
d83 13
d99 4
@
