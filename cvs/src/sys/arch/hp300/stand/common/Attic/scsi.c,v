head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2013.09.23.22.14.44;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.23.16.08.28;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.18.20.02.58;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.13.00.13.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.03.21.44.35;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.29.06.26.50;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.28;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2003.03.27.23.19.22;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;

1.1.22.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: scsi.c,v 1.10 2013/09/23 22:14:44 miod Exp $	*/
/*	$NetBSD: scsi.c,v 1.7 1997/01/30 10:32:57 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Van Jacobson of Lawrence Berkeley Laboratory and the Systems
 * Programming Group of the University of Utah Computer Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: scsi.c 1.3 90/01/27$
 *
 *	@@(#)scsi.c	8.1 (Berkeley) 6/10/93
 */

/*
 * SCSI bus driver for standalone programs.
 */

#include <sys/param.h>
#include <sys/reboot.h>

#include <lib/libsa/stand.h>

#include "samachdep.h"
#include "device.h"
#include "scsireg.h"
#include "scsivar.h"

struct	scsi_softc scsi_softc[NSCSI];

int scsi_cmd_wait = 50000;	/* use the "real" driver init_wait value */
int scsi_data_wait = 50000;	/* use the "real" driver init_wait value */

void	scsiabort(struct scsi_softc *, volatile struct scsidevice *);
void	scsireset(int);
int	scsi_request_sense(int, int, u_char *, u_int);

void
scsiinit()
{
	extern struct hp_hw sc_table[];
	struct hp_hw *hw;
	struct scsi_softc *hs;
	int i;
	static int waitset = 0;

	i = 0;
	for (hw = sc_table; i < NSCSI && hw < &sc_table[MAXCTLRS]; hw++) {
		if (!HW_ISSCSI(hw))
			continue;
		hs = &scsi_softc[i];
		hs->sc_addr = hw->hw_kva;
		scsireset(i);
		if (howto & RB_ASKNAME)
			printf("scsi%d at sc%d\n", i, hw->hw_sc);
		hw->hw_ctrl = i;
		hs->sc_alive = 1;
		i++;
	}
	/*
	 * Adjust the wait values
	 */
	if (!waitset) {
		scsi_cmd_wait *= cpuspeed;
		scsi_data_wait *= cpuspeed;
		waitset = 1;
	}
}

int
scsialive(int unit)
{
	if (unit >= NSCSI || scsi_softc[unit].sc_alive == 0)
		return (0);
	return (1);
}

void
scsireset(int unit)
{
	volatile struct scsidevice *hd;
	struct scsi_softc *hs;
	u_int i;

	hs = &scsi_softc[unit];
	hd = (struct scsidevice *)hs->sc_addr;
	hd->scsi_id = 0xFF;
	DELAY(100);
	/*
	 * Disable interrupts then reset the FUJI chip.
	 */
	hd->scsi_csr  = 0;
	hd->scsi_sctl = SCTL_DISABLE | SCTL_CTRLRST;
	hd->scsi_scmd = 0;
	hd->scsi_tmod = 0;
	hd->scsi_pctl = 0;
	hd->scsi_temp = 0;
	hd->scsi_tch  = 0;
	hd->scsi_tcm  = 0;
	hd->scsi_tcl  = 0;
	hd->scsi_ints = 0;

	/*
	 * Configure the FUJI chip with its SCSI address, all
	 * interrupts enabled & appropriate parity.
	 */
	i = (~hd->scsi_hconf) & 0x7;
	hs->sc_scsi_addr = 1 << i;
	hd->scsi_bdid = i;
	if (hd->scsi_hconf & HCONF_PARITY)
		hd->scsi_sctl = SCTL_DISABLE | SCTL_ABRT_ENAB |
				SCTL_SEL_ENAB | SCTL_RESEL_ENAB |
				SCTL_INTR_ENAB | SCTL_PARITY_ENAB;
	else
		hd->scsi_sctl = SCTL_DISABLE | SCTL_ABRT_ENAB |
				SCTL_SEL_ENAB | SCTL_RESEL_ENAB |
				SCTL_INTR_ENAB;
	hd->scsi_sctl &=~ SCTL_DISABLE;
}


void
scsiabort(struct scsi_softc *hs, volatile struct scsidevice *hd)
{
	printf("scsi%d error: scsiabort\n", (int)(hs - scsi_softc));

	scsireset(hs - scsi_softc);
	DELAY(1000000);
}

static int
issue_select(volatile struct scsidevice *hd, u_char target, u_char our_addr)
{
	if (hd->scsi_ssts & (SSTS_INITIATOR|SSTS_TARGET|SSTS_BUSY))
		return (1);

	if (hd->scsi_ints & INTS_DISCON)
		hd->scsi_ints = INTS_DISCON;

	hd->scsi_pctl = 0;
	hd->scsi_temp = (1 << target) | our_addr;
	/* select timeout is hardcoded to 250ms */
	hd->scsi_tch = 2;
	hd->scsi_tcm = 113;
	hd->scsi_tcl = 3;

	hd->scsi_scmd = SCMD_SELECT;
	return (0);
}

static int
wait_for_select(volatile struct scsidevice *hd)
{
	int wait;
	u_char ints;

	wait = scsi_data_wait;
	while ((ints = hd->scsi_ints) == 0) {
		if (--wait < 0)
			return (1);
		DELAY(1);
	}
	hd->scsi_ints = ints;
	return (!(hd->scsi_ssts & SSTS_INITIATOR));
}

static int
ixfer_start(volatile struct scsidevice *hd, int len, u_char phase, int wait)
{

	hd->scsi_tch = len >> 16;
	hd->scsi_tcm = len >> 8;
	hd->scsi_tcl = len;
	hd->scsi_pctl = phase;
	hd->scsi_tmod = 0; /*XXX*/
	hd->scsi_scmd = SCMD_XFR | SCMD_PROG_XFR;

	/* wait for xfer to start or svc_req interrupt */
	while ((hd->scsi_ssts & SSTS_BUSY) == 0) {
		if (hd->scsi_ints || --wait < 0)
			return (0);
		DELAY(1);
	}
	return (1);
}

static int
ixfer_out(volatile struct scsidevice *hd, int len, u_char *buf)
{
	int wait = scsi_data_wait;

	for (; len > 0; --len) {
		while (hd->scsi_ssts & SSTS_DREG_FULL) {
			if (hd->scsi_ints || --wait < 0)
				return (len);
			DELAY(1);
		}
		hd->scsi_dreg = *buf++;
	}
	return (0);
}

static int
ixfer_in(volatile struct scsidevice *hd, int len, u_char *buf)
{
	int wait = scsi_data_wait;

	for (; len > 0; --len) {
		while (hd->scsi_ssts & SSTS_DREG_EMPTY) {
			if (hd->scsi_ints || --wait < 0) {
				while (! (hd->scsi_ssts & SSTS_DREG_EMPTY)) {
					*buf++ = hd->scsi_dreg;
					--len;
				}
				return (len);
			}
			DELAY(1);
		}
		*buf++ = hd->scsi_dreg;
	}
	return (len);
}

static int
scsiicmd(struct scsi_softc *hs, int target, u_char *cbuf, int clen, u_char *buf,
    int len, u_char xferphase)
{
	volatile struct scsidevice *hd = (struct scsidevice *)hs->sc_addr;
	u_char phase, ints;
	int wait;

	/* select the SCSI bus (it's an error if bus isn't free) */
	if (issue_select(hd, target, hs->sc_scsi_addr))
		return (-2);
	if (wait_for_select(hd))
		return (-2);
	/*
	 * Wait for a phase change (or error) then let the device
	 * sequence us through the various SCSI phases.
	 */
	hs->sc_stat = -1;
	phase = CMD_PHASE;
	while (1) {
		wait = scsi_cmd_wait;
		switch (phase) {

		case CMD_PHASE:
			if (ixfer_start(hd, clen, phase, wait))
				if (ixfer_out(hd, clen, cbuf))
					goto abort;
			phase = xferphase;
			break;

		case DATA_IN_PHASE:
			if (len <= 0)
				goto abort;
			wait = scsi_data_wait;
			if (ixfer_start(hd, len, phase, wait) ||
			    !(hd->scsi_ssts & SSTS_DREG_EMPTY))
				ixfer_in(hd, len, buf);
			phase = STATUS_PHASE;
			break;

		case DATA_OUT_PHASE:
			if (len <= 0)
				goto abort;
			wait = scsi_data_wait;
			if (ixfer_start(hd, len, phase, wait))
				if (ixfer_out(hd, len, buf))
					goto abort;
			phase = STATUS_PHASE;
			break;

		case STATUS_PHASE:
			wait = scsi_data_wait;
			if (ixfer_start(hd, sizeof(hs->sc_stat), phase, wait) ||
			    !(hd->scsi_ssts & SSTS_DREG_EMPTY))
				ixfer_in(hd, sizeof(hs->sc_stat), &hs->sc_stat);
			phase = MESG_IN_PHASE;
			break;

		case MESG_IN_PHASE:
			if (ixfer_start(hd, sizeof(hs->sc_msg), phase, wait) ||
			    !(hd->scsi_ssts & SSTS_DREG_EMPTY)) {
				ixfer_in(hd, sizeof(hs->sc_msg),
				    (u_char *)&hs->sc_msg);
				hd->scsi_scmd = SCMD_RST_ACK;
			}
			phase = BUS_FREE_PHASE;
			break;

		case BUS_FREE_PHASE:
			goto out;

		default:
			printf("scsi%d: unexpected scsi phase %d\n",
			    (int)(hs - scsi_softc), phase);
			goto abort;
		}
		/* wait for last command to complete */
		while ((ints = hd->scsi_ints) == 0) {
			if (--wait < 0)
				goto abort;
			DELAY(1);
		}
		hd->scsi_ints = ints;
		if (ints & INTS_SRV_REQ)
			phase = hd->scsi_psns & PHASE;
		else if (ints & INTS_DISCON)
			goto out;
		else if ((ints & INTS_CMD_DONE) == 0)
			goto abort;
	}
abort:
	scsiabort(hs, hd);
out:
	return (hs->sc_stat);
}

int
scsi_test_unit_rdy(int ctlr, int slave)
{
	struct scsi_softc *hs = &scsi_softc[ctlr];
	static struct scsi_cdb6 cdb = { CMD_TEST_UNIT_READY };

	return (scsiicmd(hs, slave, (u_char *)&cdb, sizeof(cdb),
	    (u_char *)0, 0, STATUS_PHASE));
}

int
scsi_request_sense(int ctlr, int slave, u_char *buf, u_int len)
{
	struct scsi_softc *hs = &scsi_softc[ctlr];
	static struct scsi_cdb6 cdb = { CMD_REQUEST_SENSE };

	cdb.len = len;
	return (scsiicmd(hs, slave, (u_char *)&cdb, sizeof(cdb),
	    buf, len, DATA_IN_PHASE));
}

int
scsi_read_capacity(int ctlr, int slave, u_char *buf, u_int len)
{
	struct scsi_softc *hs = &scsi_softc[ctlr];
	static struct scsi_cdb10 cdb = { CMD_READ_CAPACITY };

	return (scsiicmd(hs, slave, (u_char *)&cdb, sizeof(cdb),
	    buf, len, DATA_IN_PHASE));
}

int
scsi_tt_read(int ctlr, int slave, u_char *buf, u_int len, daddr32_t blk,
    u_int nblk)
{
	struct scsi_softc *hs = &scsi_softc[ctlr];
	struct scsi_cdb10 cdb;

	bzero(&cdb, sizeof(cdb));
	cdb.cmd = CMD_READ_EXT;
	cdb.lbah = blk >> 24;
	cdb.lbahm = blk >> 16;
	cdb.lbalm = blk >> 8;
	cdb.lbal = blk;
	cdb.lenh = nblk / (256 * DEV_BSIZE);
	cdb.lenl = nblk / DEV_BSIZE;
	return (scsiicmd(hs, slave, (u_char *)&cdb, sizeof(cdb),
	    buf, len, DATA_IN_PHASE));
}

int
scsi_tt_write(int ctlr, int slave, u_char *buf, u_int len, daddr32_t blk,
    u_int nblk)
{
	struct scsi_softc *hs = &scsi_softc[ctlr];
	struct scsi_cdb10 cdb;

	bzero(&cdb, sizeof(cdb));
	cdb.cmd = CMD_WRITE_EXT;
	cdb.lbah = blk >> 24;
	cdb.lbahm = blk >> 16;
	cdb.lbalm = blk >> 8;
	cdb.lbal = blk;
	cdb.lenh = nblk / (256 * DEV_BSIZE);
	cdb.lenl = nblk / DEV_BSIZE;
	return (scsiicmd(hs, slave, (u_char *)&cdb, sizeof(cdb),
	    buf, len, DATA_OUT_PHASE));
}
@


1.10
log
@Remove SLOWSCSI and the millisecond delay after each phase change it introduces.
This code was added back when the scsi code between the kernel and the boot
blocks was shared, to work around an obscure kernel problem (and definitely
not related to bootstrap, at all).

While there, increase the target selection timeout from 2ms to 250ms, to
match the value currently used by the kernel.

Crank boot blocks version. Booting a kernel from disk is now significantly
faster.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.9 2013/03/23 16:08:28 deraadt Exp $	*/
@


1.9
log
@Avoid using DEV_BSHIFT, and use DEV_BSIZE instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.8 2011/08/18 20:02:58 miod Exp $	*/
a4 6
 * This is reported to fix some odd failures when disklabeling
 * SCSI disks in SYS_INST.
 */
#define SLOWSCSI

/*
d169 4
a172 4
	/* select timeout is hardcoded to 2ms */
	hd->scsi_tch = 0;
	hd->scsi_tcm = 32;
	hd->scsi_tcl = 4;
a326 9
#ifdef SLOWSCSI
		/*
		 * XXX we have weird transient problems with booting from
		 * slow scsi disks on fast machines.  I have never been
		 * able to pin the problem down, but a large delay here
		 * seems to always work.
		 */
		DELAY(1000);
#endif
@


1.8
log
@So, it turns out that models 362 and 382 built-in frame buffer only shows up
in DIO-II space, as a fat device spanning four select codes (i.e. 16MB of
memory). This is way too much for an at-most 2 Mpixel 8bit frame buffer, and
it turns out that this is because the device provides both a regular DIO-II
frame buffer (spanning two select codes) and a regular STI frame buffer
(spanning the other two select codes).
This commit introduces a straightforward sti@@dio attachment to get a working
sti(4) and wsdisplay(4) in a ridiculously small number of lines; however
the console code needs some changes to avoid duplicating globals.

While there, add sti@@dio support for the bootblocks, and I couldn't help
myself but clean the most rotten parts of them, and try to have them reuse
various files in sys/arch/hp300/dev instead of rolling their outdated ones.

Tested on a real 382 with the low-resolution frame buffer:
sti0 at dio0 scode 132: rev 8.02;129, ID 0x27134CB440A00499
sti0: 382V, 2048x512 frame buffer, 640x480x8 display
sti0: 8x16 font type 1, 16 bpc, charset 0-255
wsdisplay0 at sti0 mux 1: console (std, vt100 emulation)

Boot blocks updates tested on DIO-II 425t (serial/glass console), SGC 425e
(serial/glass console) and 382 (serial/glass console). And will be tested
on SGC 425t soon as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.7 2011/03/13 00:13:52 deraadt Exp $	*/
d406 2
a407 2
	cdb.lenh = nblk >> (8 + DEV_BSHIFT);
	cdb.lenl = nblk >> DEV_BSHIFT;
d425 2
a426 2
	cdb.lenh = nblk >> (8 + DEV_BSHIFT);
	cdb.lenl = nblk >> DEV_BSHIFT;
@


1.7
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.6 2006/08/17 06:31:10 miod Exp $	*/
d89 1
a89 1
		hw->hw_pa = (caddr_t) i;	/* XXX for autoconfig */
@


1.6
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.5 2005/04/22 00:42:16 miod Exp $	*/
d394 1
a394 1
scsi_tt_read(int ctlr, int slave, u_char *buf, u_int len, daddr_t blk,
d413 1
a413 1
scsi_tt_write(int ctlr, int slave, u_char *buf, u_int len, daddr_t blk,
@


1.5
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.4 2004/08/03 21:44:35 miod Exp $	*/
d55 3
a57 1
#define _IOCTL_
a61 4
#include <lib/libsa/stand.h>

#include "samachdep.h"

a63 1
void scsireset();
d67 4
d75 3
a77 3
	register struct hp_hw *hw;
	register struct scsi_softc *hs;
	register int i;
d79 1
a79 1
	
d104 1
a104 2
scsialive(unit)
	register int unit;
d112 1
a112 2
scsireset(unit)
	register int unit;
d114 2
a115 2
	volatile register struct scsidevice *hd;
	register struct scsi_softc *hs;
d156 1
a156 3
scsiabort(hs, hd)
	register struct scsi_softc *hs;
	volatile register struct scsidevice *hd;
d158 1
a158 1
	printf("scsi%d error: scsiabort\n", hs - scsi_softc);
d165 1
a165 3
issue_select(hd, target, our_addr)
	volatile register struct scsidevice *hd;
	u_char target, our_addr;
d185 1
a185 2
wait_for_select(hd)
	volatile register struct scsidevice *hd;
d187 1
a187 1
	register int wait;
d201 1
a201 5
ixfer_start(hd, len, phase, wait)
	volatile register struct scsidevice *hd;
	int len;
	u_char phase;
	register int wait;
d221 1
a221 4
ixfer_out(hd, len, buf)
	volatile register struct scsidevice *hd;
	int len;
	register u_char *buf;
d223 1
a223 1
	register int wait = scsi_data_wait;
d237 1
a237 4
ixfer_in(hd, len, buf)
	volatile register struct scsidevice *hd;
	int len;
	register u_char *buf;
d239 1
a239 1
	register int wait = scsi_data_wait;
d258 2
a259 8
scsiicmd(hs, target, cbuf, clen, buf, len, xferphase)
	struct scsi_softc *hs;
	int target;
	u_char *cbuf;
	int clen;
	u_char *buf;
	int len;
	u_char xferphase;
d261 1
a261 2
	volatile register struct scsidevice *hd =
				(struct scsidevice *)hs->sc_addr;
d263 1
a263 1
	register int wait;
d318 2
a319 1
				ixfer_in(hd, sizeof(hs->sc_msg), &hs->sc_msg);
d330 1
a330 1
			       hs - scsi_softc, phase);
d363 1
a363 2
scsi_test_unit_rdy(ctlr, slave)
	int ctlr, slave;
d365 1
a365 1
	register struct scsi_softc *hs = &scsi_softc[ctlr];
d368 2
a369 2
	return (scsiicmd(hs, slave, &cdb, sizeof(cdb), (u_char *)0, 0,
			 STATUS_PHASE));
d373 1
a373 4
scsi_request_sense(ctlr, slave, buf, len)
	int ctlr, slave;
	u_char *buf;
	unsigned len;
d375 1
a375 1
	register struct scsi_softc *hs = &scsi_softc[ctlr];
d379 2
a380 2
	return (scsiicmd(hs, slave, &cdb, sizeof(cdb), buf, len,
			 DATA_IN_PHASE));
d384 1
a384 4
scsi_read_capacity(ctlr, slave, buf, len)
	int ctlr, slave;
	u_char *buf;
	unsigned len;
d386 1
a386 1
	register struct scsi_softc *hs = &scsi_softc[ctlr];
d389 2
a390 2
	return (scsiicmd(hs, slave, &cdb, sizeof(cdb), buf, len,
			 DATA_IN_PHASE));
d394 2
a395 6
scsi_tt_read(ctlr, slave, buf, len, blk, nblk)
	int ctlr, slave;
	u_char *buf;
	u_int len;
	daddr_t blk;
	u_int nblk;
d397 1
a397 1
	register struct scsi_softc *hs = &scsi_softc[ctlr];
d408 2
a409 2
	return (scsiicmd(hs, slave, &cdb, sizeof(cdb), buf, len,
			 DATA_IN_PHASE));
d413 2
a414 6
scsi_tt_write(ctlr, slave, buf, len, blk, nblk)
	int ctlr, slave;
	u_char *buf;
	u_int len;
	daddr_t blk;
	u_int nblk;
d416 1
a416 1
	register struct scsi_softc *hs = &scsi_softc[ctlr];
d427 2
a428 2
	return (scsiicmd(hs, slave, &cdb, sizeof(cdb), buf, len,
			 DATA_OUT_PHASE));
@


1.4
log
@Copy scsireg.h from hp300/dev to hp300/stand, and use it within hp300/stand.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.3 2003/06/02 23:27:46 millert Exp $	*/
d70 1
d76 1
a76 1
	register int i, addr;
d102 1
d156 1
a156 1
int
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.2 2002/04/29 06:26:50 pvalchev Exp $	*/
a55 2
#include <hp300/dev/scsireg.h>

d57 1
@


1.2
log
@wierd -> weird
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.1 1997/07/14 08:14:28 downsj Exp $	*/
d27 1
a27 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.4 1997/07/13 07:21:52 downsj Exp $	*/
d360 1
a360 1
		 * XXX we have wierd transient problems with booting from
@


1.1.12.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d360 1
a360 1
		 * XXX we have weird transient problems with booting from
@


1.1.12.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.1.12.1 2003/03/27 23:19:22 niklas Exp $	*/
d27 5
a31 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scsi.c,v 1.1 1997/07/14 08:14:28 downsj Exp $	*/
d360 1
a360 1
		 * XXX we have weird transient problems with booting from
@


