head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.28
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.26
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2011.03.13.00.13.52;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.23.07.15.57;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.09;	author downsj;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: ct.c,v 1.6 2011/03/13 00:13:52 deraadt Exp $	*/
/*	$NetBSD: ct.c,v 1.9 1996/10/14 07:29:57 thorpej Exp $	*/

/*
 * Copyright (c) 1982, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ct.c	8.1 (Berkeley) 7/15/93
 */

/*
 * CS80 tape driver
 */
#include <sys/param.h>

#include <hp300/dev/ctreg.h>

#include <lib/libsa/stand.h>

#include "samachdep.h"
#include "hpibvar.h"

struct	ct_iocmd ct_ioc;
struct	ct_rscmd ct_rsc;
struct	ct_stat ct_stat;
struct	ct_ssmcmd ct_ssmc;

struct	ct_softc {
	int	sc_ctlr;
	int	sc_unit;
	char	sc_retry;
	char	sc_alive;
	short	sc_punit;
	int	sc_blkno;
} ct_softc[NHPIB][NCT];

#define	CTRETRY		5
#define	MTFSF		10
#define	MTREW		11

int	ctclose(struct open_file *);
int	cterror(int, int);
int	ctident(int, int);
int	ctinit(int, int);
int	ctopen(struct open_file *, int, int, int);
int	ctpunit(int, int, int *);
int	ctstrategy(void *, int, daddr32_t, size_t, void *, size_t *);

char ctio_buf[MAXBSIZE];

struct	ctinfo {
	short	hwid;
	short	punit;
} ctinfo[] = {
	{ CT7946ID,	1 },
	{ CT7912PID,	1 },
	{ CT7914PID,	1 },
	{ CT9144ID,	0 },
	{ CT9145ID,	0 }
};
int	nctinfo = sizeof(ctinfo) / sizeof(ctinfo[0]);

int
ctinit(int ctlr, int unit)
{
	struct ct_softc *rs = &ct_softc[ctlr][unit];
	u_char stat;

	if (hpibrecv(ctlr, unit, C_QSTAT, &stat, 1) != 1 || stat)
		return (0);
	if (ctident(ctlr, unit) < 0)
		return (0);
	bzero(&ct_ssmc, sizeof(ct_ssmc));
	ct_ssmc.unit = C_SUNIT(rs->sc_punit);
	ct_ssmc.cmd = C_SSM;
	ct_ssmc.fefm = FEF_MASK;
	ct_ssmc.refm = REF_MASK;
	ct_ssmc.aefm = AEF_MASK;
	ct_ssmc.iefm = IEF_MASK;
	hpibsend(ctlr, unit, C_CMD, &ct_ssmc, sizeof(ct_ssmc));
	hpibswait(ctlr, unit);
	hpibrecv(ctlr, unit, C_QSTAT, &stat, 1);
	rs->sc_alive = 1;
	return (1);
}

int
ctident(int ctlr, int unit)
{
	struct cs80_describe desc;
	u_char stat, cmd[3];
	char name[7];
	int id, i;

	id = hpibid(ctlr, unit);
	if ((id & 0x200) == 0)
		return(-1);
	for (i = 0; i < nctinfo; i++)
		if (id == ctinfo[i].hwid)
			break;
	if (i == nctinfo)
		return(-1);
	ct_softc[ctlr][unit].sc_punit = ctinfo[i].punit;
	id = i;

	/*
	 * Collect device description.
	 * Right now we only need this to differentiate 7945 from 7946.
	 * Note that we always issue the describe command to unit 0.
	 */
	cmd[0] = C_SUNIT(0);
	cmd[1] = C_SVOL(0);
	cmd[2] = C_DESC;
	hpibsend(ctlr, unit, C_CMD, cmd, sizeof(cmd));
	hpibrecv(ctlr, unit, C_EXEC, &desc, sizeof(desc));
	hpibrecv(ctlr, unit, C_QSTAT, &stat, sizeof(stat));
	bzero(name, sizeof(name));
	if (!stat) {
		int n = desc.d_name;
		for (i = 5; i >= 0; i--) {
			name[i] = (n & 0xf) + '0';
			n >>= 4;
		}
	}
	switch (ctinfo[id].hwid) {
	case CT7946ID:
		if (bcmp(name, "079450", 6) == 0)
			id = -1;		/* not really a 7946 */
		break;
	default:
		break;
	}
	return(id);
}

int
ctpunit(int ctlr, int slave, int *punit)
{
	struct ct_softc *rs;

	if (ctlr >= NHPIB || hpibalive(ctlr) == 0)
		return(EADAPT);
	if (slave >= NCT)
		return(ECTLR);
	rs = &ct_softc[ctlr][slave];

	if (rs->sc_alive == 0)
		return(ENXIO);

	*punit = rs->sc_punit;
	return (0);
}

int
ctopen(struct open_file *f, int ctlr, int unit, int part)
{
	struct ct_softc *rs;
	int skip;
	size_t resid;

	if (ctlr >= NHPIB || hpibalive(ctlr) == 0)
		return(EADAPT);
	if (unit >= NCT)
		return(ECTLR);
	rs = &ct_softc[ctlr][unit];
	rs->sc_blkno = 0;
	rs->sc_unit = unit;
	rs->sc_ctlr = ctlr;
	if (rs->sc_alive == 0)
		if (ctinit(ctlr, unit) == 0)
			return(ENXIO);
	f->f_devdata = (void *)rs;
	ctstrategy(f->f_devdata, MTREW, 0, 0, ctio_buf, &resid);
	skip = part;
	while (skip--)
		ctstrategy(f->f_devdata, MTFSF, 0, 0, ctio_buf, &resid);
	return(0);
}

int
ctclose(struct open_file *f)
{
	size_t resid;

	ctstrategy(f->f_devdata, MTREW, 0, 0, ctio_buf, &resid);
	return (0);
}

int
ctstrategy(void *devdata, int func, daddr32_t dblk, size_t size, void *v_buf,
    size_t *rsize)
{
	struct ct_softc *rs = devdata;
	char *buf = v_buf;
	int ctlr = rs->sc_ctlr;
	int unit = rs->sc_unit;
	char stat;

	if (size == 0 && (func == F_READ || func == F_WRITE))
		return(0);

	rs->sc_retry = 0;
	bzero(&ct_ioc, sizeof(ct_ioc));
	ct_ioc.unit = C_SUNIT(rs->sc_punit);
	ct_ioc.saddr = C_SADDR;
	ct_ioc.nop2 = C_NOP;
	ct_ioc.slen = C_SLEN;
	ct_ioc.nop3 = C_NOP;
top:
	if (func == F_READ) {
		ct_ioc.cmd = C_READ;
		ct_ioc.addr = rs->sc_blkno;
		ct_ioc.len = size;
	}
	else if (func == F_WRITE) {
		ct_ioc.cmd = C_WRITE;
		ct_ioc.addr = rs->sc_blkno;
		ct_ioc.len = size;
	}
	else if (func == MTFSF) {
		ct_ioc.cmd = C_READ;
		ct_ioc.addr = rs->sc_blkno;
		ct_ioc.len = size = MAXBSIZE;
	}
	else {
		ct_ioc.cmd = C_READ;
		ct_ioc.addr = 0;
		ct_ioc.len = 0;
		rs->sc_blkno = 0;
		size = 0;
	}
retry:
	hpibsend(ctlr, unit, C_CMD, &ct_ioc, sizeof(ct_ioc));
	if (func != MTREW) {
		hpibswait(ctlr, unit);
		hpibgo(ctlr, unit, C_EXEC, buf, size,
			func != F_WRITE ? F_READ : F_WRITE);
		hpibswait(ctlr, unit);
	} else {
		while (hpibswait(ctlr, unit) < 0)
			;
	}
	hpibrecv(ctlr, unit, C_QSTAT, &stat, 1);
	if (stat) {
		stat = cterror(ctlr, unit);
		if (stat == 0)
			return (-1);
		if (stat == 2)
			return (0);
		if (++rs->sc_retry > CTRETRY)
			return (-1);
		goto retry;
	}
	rs->sc_blkno += CTBTOK(size);
	if (func == MTFSF)
		goto top;
	*rsize = size;

	return(0);
}

int
cterror(int ctlr, int unit)
{
	struct ct_softc *rs = &ct_softc[ctlr][unit];
	char stat;

	bzero(&ct_rsc, sizeof(ct_rsc));
	bzero(&ct_stat, sizeof(ct_stat));
	ct_rsc.unit = C_SUNIT(rs->sc_punit);
	ct_rsc.cmd = C_STATUS;
	hpibsend(ctlr, unit, C_CMD, &ct_rsc, sizeof(ct_rsc));
	hpibrecv(ctlr, unit, C_EXEC, &ct_stat, sizeof(ct_stat));
	hpibrecv(ctlr, unit, C_QSTAT, &stat, 1);
	if (stat) {
		printf("ct%d: request status fail %d\n", unit, stat);
		return(0);
	}
	if (ct_stat.c_aef & AEF_EOF) {
		/* 9145 drives don't increment block number at EOF */
		if ((ct_stat.c_blk - rs->sc_blkno) == 0)
			rs->sc_blkno++;
		else
			rs->sc_blkno = ct_stat.c_blk;
		return (2);
	}
	printf("ct%d err: vu 0x%x, pend 0x%x, bn%ld", unit,
		ct_stat.c_vu, ct_stat.c_pend, ct_stat.c_blk);
	printf(", R 0x%x F 0x%x A 0x%x I 0x%x\n", ct_stat.c_ref,
		ct_stat.c_fef, ct_stat.c_aef, ct_stat.c_ief);
	return (1);
}
@


1.6
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.5 2006/08/17 06:31:10 miod Exp $	*/
@


1.5
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.4 2005/11/23 07:15:57 miod Exp $	*/
d71 1
a71 1
int	ctstrategy(void *, int, daddr_t, size_t, void *, size_t *);
d214 1
a214 1
ctstrategy(void *devdata, int func, daddr_t dblk, size_t size, void *v_buf,
@


1.4
log
@Pick HP-IB describe structures changes from main kernel code here as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.3 2005/04/22 00:42:16 miod Exp $	*/
a40 1
#include "hpibvar.h"
d45 1
d65 8
d88 1
a88 2
ctinit(ctlr, unit)
	register int ctlr, unit;
d90 1
a90 1
	register struct ct_softc *rs = &ct_softc[ctlr][unit];
d112 1
a112 2
ctident(ctlr, unit)
	int ctlr, unit;
d143 1
a143 1
		register int n = desc.d_name;
d161 1
a161 2
ctpunit(ctlr, slave, punit)
	int ctlr, slave, *punit;
d163 1
a163 1
	register struct ct_softc *rs;
d179 1
a179 3
ctopen(f, ctlr, unit, part)
	struct open_file *f;
	int ctlr, unit, part;
d181 2
a182 2
	register struct ct_softc *rs;
	register int skip;
d205 1
a205 2
ctclose(f)
	struct open_file *f;
d214 2
a215 7
ctstrategy(devdata, func, dblk, size, v_buf, rsize)
	void *devdata;
	int func;
	daddr_t dblk;
	size_t size;
	void *v_buf;
	size_t *rsize;
d287 1
a287 2
cterror(ctlr, unit)
	register int ctlr, unit;
d289 1
a289 1
	register struct ct_softc *rs = &ct_softc[ctlr][unit];
@


1.3
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.2 2003/06/02 23:27:46 millert Exp $	*/
d41 1
d108 1
a108 1
	struct ct_describe desc;
d133 1
a133 1
	hpibrecv(ctlr, unit, C_EXEC, &desc, 37);
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.1 1997/07/14 08:14:09 downsj Exp $	*/
d70 5
a74 5
	CT7946ID,	1,
	CT7912PID,	1,
	CT7914PID,	1,
	CT9144ID,	0,
	CT9145ID,	0,
d78 1
a83 1
	register int type;
d103 1
d172 1
d200 1
d207 1
d210 1
d288 1
d314 1
a314 1
	printf("ct%d err: vu 0x%x, pend 0x%x, bn%d", unit,
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.3 1997/07/13 07:21:46 downsj Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.12.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ct.c,v 1.1 1997/07/14 08:14:09 downsj Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


