head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.22
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2013.02.02.13.34.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.13.00.13.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.03.21.44.35;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.09.14.12.54.24;	author downsj;	state Exp;
branches
	1.2.12.1;
next	1.1;

1.1
date	97.07.14.08.14.29;	author downsj;	state Exp;
branches;
next	;

1.2.12.1
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: sd.c,v 1.8 2013/02/02 13:34:29 miod Exp $	*/
/*	$NetBSD: sd.c,v 1.9 1996/12/21 21:34:41 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Van Jacobson of Lawrence Berkeley Laboratory and the Systems
 * Programming Group of the University of Utah Computer Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: sd.c 1.9 92/12/21$
 *
 *	@@(#)sd.c	8.1 (Berkeley) 6/10/93
 */

/*
 * SCSI CCS disk driver
 */

#include <sys/param.h>
#include <sys/disklabel.h>

#include <lib/libsa/stand.h>

#include "samachdep.h"
#include "scsireg.h"

struct	disklabel sdlabel;

struct	sdminilabel {
	u_short	npart;
	u_long	offset[MAXPARTITIONS];
};

struct	sd_softc {
	int	sc_ctlr;
	int	sc_unit;
	int	sc_part;
	char	sc_retry;
	char	sc_alive;
	short	sc_blkshift;
	struct	sdminilabel sc_pinfo;
} sd_softc[NSCSI][NSD];

#define	SDRETRY		2

int	sdclose(struct open_file *);
int	sdgetinfo(struct sd_softc *);
int	sdinit(int, int);
int	sdopen(struct open_file *, int, int, int);
void	sdreset(int, int);
int	sdstrategy(struct sd_softc *, int, daddr32_t, size_t, void *, size_t *);

int
sdinit(int ctlr, int unit)
{
	struct sd_softc *ss = &sd_softc[ctlr][unit];
	u_char stat;
	int capbuf[2];

	stat = scsi_test_unit_rdy(ctlr, unit);
	if (stat) {
		/* drive may be doing RTZ - wait a bit */
		if (stat == STS_CHECKCOND) {
			DELAY(1000000);
			stat = scsi_test_unit_rdy(ctlr, unit);
		}
		if (stat) {
			printf("sd(%d,%d,0,0): init failed (stat=%x)\n",
			       ctlr, unit, stat);
			return (0);
		}
	}
	/*
	 * try to get the drive block size.
	 */
	capbuf[0] = 0;
	capbuf[1] = 0;
	stat = scsi_read_capacity(ctlr, unit,
				  (u_char *)capbuf, sizeof(capbuf));
	if (stat == 0) {
		if (capbuf[1] > DEV_BSIZE)
			for (; capbuf[1] > DEV_BSIZE; capbuf[1] >>= 1)
				++ss->sc_blkshift;
	}
	ss->sc_alive = 1;
	return (1);
}

void
sdreset(int ctlr, int unit)
{
}

char sdio_buf[MAXBSIZE];

int
sdgetinfo(struct sd_softc *ss)
{
	struct sdminilabel *pi = &ss->sc_pinfo;
	struct disklabel *lp = &sdlabel;
	char *msg;
	int err, savepart;
	size_t i;

	bzero((caddr_t)lp, sizeof *lp);
	lp->d_secsize = (DEV_BSIZE << ss->sc_blkshift);

	/* Disklabel is always from RAW_PART. */
	savepart = ss->sc_part;
	ss->sc_part = RAW_PART;
	err = sdstrategy(ss, F_READ, LABELSECTOR,
	    lp->d_secsize ? lp->d_secsize : DEV_BSIZE, sdio_buf, &i);
	ss->sc_part = savepart;

	if (err) {
		printf("sdgetinfo: sdstrategy error %d\n", err);
		return(0);
	}

	msg = getdisklabel(sdio_buf, lp);
	if (msg) {
		printf("sd(%d,%d,%d): WARNING: %s, ",
		       ss->sc_ctlr, ss->sc_unit, ss->sc_part, msg);
		printf("defining `c' partition as entire disk\n");
		pi->npart = 3;
#ifdef CD9660_DUMMYLABEL
		pi->offset[0] = 0;
		lp->d_partitions[0].p_fstype = FS_ISO9660; /* just for kicks */
#else
		pi->offset[0] = -1;
#endif
		pi->offset[1] = -1;
		pi->offset[2] = 0;
	} else {
		pi->npart = lp->d_npartitions;
		for (i = 0; i < pi->npart; i++)
			pi->offset[i] = lp->d_partitions[i].p_size == 0 ?
				-1 : lp->d_partitions[i].p_offset;
	}
	return(1);
}

int
sdopen(struct open_file *f, int ctlr, int unit, int part)
{
	struct sd_softc *ss;

#ifdef SD_DEBUG
	if (debug)
	printf("sdopen: ctlr=%d unit=%d part=%d\n",
	    ctlr, unit, part);
#endif

	if (ctlr >= NSCSI || scsialive(ctlr) == 0)
		return (EADAPT);
	if (unit >= NSD)
		return (ECTLR);
	ss = &sd_softc[ctlr][unit];
	ss->sc_part = part;
	ss->sc_unit = unit;
	ss->sc_ctlr = ctlr;
	if (ss->sc_alive == 0) {
		if (sdinit(ctlr, unit) == 0)
			return (ENXIO);
		if (sdgetinfo(ss) == 0)
			return (ERDLAB);
	}
	if (part != RAW_PART &&     /* always allow RAW_PART to be opened */
	    (part >= ss->sc_pinfo.npart || ss->sc_pinfo.offset[part] == -1))
		return (EPART);
	f->f_devdata = (void *)ss;
	return (0);
}

int
sdclose(struct open_file *f)
{
	struct sd_softc *ss = f->f_devdata;

	/*
	 * Mark the disk `not alive' so that the disklabel
	 * will be re-loaded at next open.
	 */
	bzero(ss, sizeof(sd_softc));
	f->f_devdata = NULL;

	return (0);
}

int
sdstrategy(struct sd_softc *ss, int func, daddr32_t dblk, size_t size,
    void *v_buf, size_t *rsize)
{
	char *buf = v_buf;
	int ctlr = ss->sc_ctlr;
	int unit = ss->sc_unit;
	u_int nblk = size >> ss->sc_blkshift;
	daddr32_t blk;
	char stat;

	if (size == 0)
		return(0);

	/*
	 * Don't do partition translation on the `raw partition'.
	 */
	blk = (dblk + ((ss->sc_part == RAW_PART) ? 0 :
	    ss->sc_pinfo.offset[ss->sc_part])) >> ss->sc_blkshift;

	ss->sc_retry = 0;

#ifdef SD_DEBUG
	if (debug)
	printf("sdstrategy(%d,%d): size=%d blk=%d nblk=%d\n",
	    ctlr, unit, size, blk, nblk);
#endif

retry:
	if (func == F_READ)
		stat = scsi_tt_read(ctlr, unit, buf, size, blk, nblk);
	else
		stat = scsi_tt_write(ctlr, unit, buf, size, blk, nblk);
	if (stat) {
		printf("sd(%d,%d,%d): block=%x, error=0x%x\n",
		       ctlr, unit, ss->sc_part, blk, stat);
		if (++ss->sc_retry > SDRETRY)
			return(EIO);
		goto retry;
	}
	*rsize = size;

	return(0);
}
@


1.8
log
@hp300 ELF bits. Requires many device and prom related structs to now be declared
as packed due to them containing 32-bit types at 16-bit but not 32-bit aligned
offsets. The boot block updates (especially mkboot) come straight from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.7 2011/03/13 00:13:52 deraadt Exp $	*/
@


1.7
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.6 2006/08/17 06:31:10 miod Exp $	*/
d121 1
a121 1
char io_buf[MAXBSIZE];
d139 1
a139 1
	    lp->d_secsize ? lp->d_secsize : DEV_BSIZE, io_buf, &i);
d147 1
a147 1
	msg = getdisklabel(io_buf, lp);
@


1.6
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.5 2005/04/22 00:42:16 miod Exp $	*/
d78 1
a78 1
int	sdstrategy(struct sd_softc *, int, daddr_t, size_t, void *, size_t *);
d218 1
a218 1
sdstrategy(struct sd_softc *ss, int func, daddr_t dblk, size_t size,
d225 1
a225 1
	daddr_t blk;
@


1.5
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.4 2004/08/03 21:44:35 miod Exp $	*/
a51 2

#define _IOCTL_
d73 7
d81 1
a81 2
sdinit(ctlr, unit)
	int ctlr, unit;
d83 1
a83 1
	register struct sd_softc *ss = &sd_softc[ctlr][unit];
d117 1
a117 2
sdreset(ctlr, unit)
	int ctlr, unit;
d124 1
a124 2
sdgetinfo(ss)
	register struct sd_softc *ss;
d126 4
a129 4
	register struct sdminilabel *pi = &ss->sc_pinfo;
	register struct disklabel *lp = &sdlabel;
	char *msg, *getdisklabel();
	int sdstrategy(), err, savepart;
d146 1
a146 1
	
d171 1
a171 3
sdopen(f, ctlr, unit, part)
	struct open_file *f;
	int ctlr, unit, part;
d173 1
a173 1
	register struct sd_softc *ss;
d180 1
a180 1
	
d203 1
a203 2
sdclose(f)
	struct open_file *f;
d218 2
a219 7
sdstrategy(ss, func, dblk, size, v_buf, rsize)
	register struct sd_softc *ss;
	int func;
	daddr_t dblk;
	size_t size;
	void *v_buf;
	size_t *rsize;
d222 2
a223 2
	register int ctlr = ss->sc_ctlr;
	register int unit = ss->sc_unit;
d258 1
a258 1
	
@


1.4
log
@Copy scsireg.h from hp300/dev to hp300/stand, and use it within hp300/stand.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.3 2003/06/02 23:27:46 millert Exp $	*/
d75 1
d112 1
d120 1
d168 1
d202 1
d218 1
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.2 1997/09/14 12:54:24 downsj Exp $	*/
d54 1
a54 1
#include <hp300/dev/scsireg.h>
@


1.2
log
@Make and install a raw version of uboot, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.1 1997/07/14 08:14:29 downsj Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.12.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.2 1997/09/14 12:54:24 downsj Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: sd.c,v 1.3 1997/07/13 07:21:53 downsj Exp $	*/
d152 7
a158 1
		pi->offset[0] = pi->offset[1] = -1;
@
