head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.34
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.30
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.28
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.26
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.05.09.58.57;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.19.17.09.30;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.20;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2002.03.28.10.07.19;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;

1.1.22.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: ite_hy.c,v 1.7 2006/08/17 06:31:10 miod Exp $	*/
/*	$NetBSD: ite_hy.c,v 1.3 1996/03/03 04:23:37 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Mark Davies of the Department of Computer
 * Science, Victoria University of Wellington, New Zealand.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: ite_hy.c 1.1 92/01/22$
 *
 *	@@(#)ite_hy.c	8.1 (Berkeley) 6/10/93
 */

#ifdef ITECONSOLE
#include <sys/param.h>

#include "samachdep.h"
#include "itevar.h"
#include "grf_hyreg.h"

#define REGBASE	    	((struct hyboxfb *)(ip->regbase))

void
hyper_init(struct ite_data *ip)
{
	int width;

	ip->bmv = ite_dio_windowmove1bpp;
	ite_fontinfo(ip);
	width = ((ip->ftwidth + 7) / 8) * 8;
	ip->cpl      = (ip->fbwidth - ip->dwidth) / width;
	ip->cblanky  = ip->fonty + ((128 / ip->cpl) +1) * ip->ftheight;

	REGBASE->nblank = 0x05;

	/*
	 * Clear the framebuffer on all planes.
	 */
	ite_dio_windowmove1bpp(ip, 0, 0, 0, 0, ip->fbheight, ip->fbwidth,
	    RR_CLEAR);

	ite_fontinit1bpp(ip);

	/*
	 * Stash the inverted cursor.
	 */
	ite_dio_windowmove1bpp(ip, charY(ip, ' '), charX1bpp(ip, ' '),
	    ip->cblanky, ip->cblankx, ip->ftheight, ip->ftwidth,
	    RR_COPYINVERTED);
}
#endif
@


1.7
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.6 2006/08/05 09:58:57 miod Exp $	*/
@


1.6
log
@Since the maskbits code only gets invoked with RR_COPY or RR_CLEAR those
days, simplify and inline more of it, to avoid doing unnecessary dest and/or
source loads. A copy of the old maskbits.h is moved to stand/ as the ite code
there needs the complete RR_ code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.5 2005/04/22 00:42:16 miod Exp $	*/
a42 2
#include "samachdep.h"

d46 1
a47 1
#include "itereg.h"
a50 9
#define WINDOWMOVER     hyper_windowmove

#undef charX
#define	charX(ip,c)	\
	(((c) % (ip)->cpl) * ((((ip)->ftwidth + 7) / 8) * 8) + (ip)->fontx)

void	hyper_ite_fontinit(struct ite_data *);
void	hyper_windowmove(struct ite_data *, int, int, int, int,
	    int, int, int);
d53 1
a53 2
hyper_init(ip)
	register struct ite_data *ip;
d57 1
d64 1
a64 1
	
d68 2
a69 1
	hyper_windowmove(ip, 0, 0, 0, 0, ip->fbheight, ip->fbwidth, RR_CLEAR);
d71 1
a71 1
	hyper_ite_fontinit(ip);
d76 3
a78 287
	hyper_windowmove(ip, charY(ip, ' '), charX(ip, ' '),
			 ip->cblanky, ip->cblankx, ip->ftheight,
			 ip->ftwidth, RR_COPYINVERTED);
}

void
hyper_ite_fontinit(ip)
	register struct ite_data *ip;
{
	register u_char *fbmem, *dp;
	int c, l, b;
	int stride, width;

	dp = (u_char *)(getword(ip, getword(ip, FONTROM) + FONTADDR) +
	    ip->regbase) + FONTDATA;
	stride = ip->fbwidth >> 3;
	width = (ip->ftwidth + 7) / 8;

	for (c = 0; c < 128; c++) {
		fbmem = (u_char *) FBBASE +
			(ip->fonty + (c / ip->cpl) * ip->ftheight) *
			stride;
		fbmem += (ip->fontx >> 3) + (c % ip->cpl) * width;
		for (l = 0; l < ip->ftheight; l++) {
			for (b = 0; b < width; b++) {
				*fbmem++ = *dp;
				dp += 2;
			}
			fbmem -= width;
			fbmem += stride;
		}
	}
}

void
hyper_putc(ip, c, dy, dx, mode)
	register struct ite_data *ip;
        register int dy, dx;
	int c, mode;
{
	hyper_windowmove(ip, charY(ip, c), charX(ip, c),
			 dy * ip->ftheight, dx * ip->ftwidth,
			 ip->ftheight, ip->ftwidth, RR_COPY);
}

void
hyper_cursor(ip, flag)
	register struct ite_data *ip;
        int flag;
{
	switch (flag) {
	case MOVE_CURSOR:
		erase_cursor(ip);
		/* fall through ... */
	case DRAW_CURSOR:
		draw_cursor(ip);
		break;
	default:
		erase_cursor(ip);
		break;
	}
}

void
hyper_clear(ip, sy, sx, h, w)
	struct ite_data *ip;
	register int sy, sx, h, w;
{
	hyper_windowmove(ip, sy * ip->ftheight, sx * ip->ftwidth,
			 sy * ip->ftheight, sx * ip->ftwidth, 
			 h  * ip->ftheight, w  * ip->ftwidth,
			 RR_CLEAR);
}

void
hyper_scroll(ip, sy, sx, count, dir)
        register struct ite_data *ip;
        register int sy, count;
        int dir, sx;
{
	register int dy = sy - count;
	register int height = ip->rows - sy;

	hyper_cursor(ip, ERASE_CURSOR);

	hyper_windowmove(ip, sy * ip->ftheight, sx * ip->ftwidth,
			 dy * ip->ftheight, sx * ip->ftwidth,
			 height * ip->ftheight,
			 ip->cols  * ip->ftwidth, RR_COPY);
}

#include "maskbits.h"

/* NOTE:
 * the first element in starttab could be 0xffffffff.  making it 0
 * lets us deal with a full first word in the middle loop, rather
 * than having to do the multiple reads and masks that we'd
 * have to do if we thought it was partial.
 */
int starttab[32] =
    {
	0x00000000,
	0x7FFFFFFF,
	0x3FFFFFFF,
	0x1FFFFFFF,
	0x0FFFFFFF,
	0x07FFFFFF,
	0x03FFFFFF,
	0x01FFFFFF,
	0x00FFFFFF,
	0x007FFFFF,
	0x003FFFFF,
	0x001FFFFF,
	0x000FFFFF,
	0x0007FFFF,
	0x0003FFFF,
	0x0001FFFF,
	0x0000FFFF,
	0x00007FFF,
	0x00003FFF,
	0x00001FFF,
	0x00000FFF,
	0x000007FF,
	0x000003FF,
	0x000001FF,
	0x000000FF,
	0x0000007F,
	0x0000003F,
	0x0000001F,
	0x0000000F,
	0x00000007,
	0x00000003,
	0x00000001
    };

int endtab[32] =
    {
	0x00000000,
	0x80000000,
	0xC0000000,
	0xE0000000,
	0xF0000000,
	0xF8000000,
	0xFC000000,
	0xFE000000,
	0xFF000000,
	0xFF800000,
	0xFFC00000,
	0xFFE00000,
	0xFFF00000,
	0xFFF80000,
	0xFFFC0000,
	0xFFFE0000,
	0xFFFF0000,
	0xFFFF8000,
	0xFFFFC000,
	0xFFFFE000,
	0xFFFFF000,
	0xFFFFF800,
	0xFFFFFC00,
	0xFFFFFE00,
	0xFFFFFF00,
	0xFFFFFF80,
	0xFFFFFFC0,
	0xFFFFFFE0,
	0xFFFFFFF0,
	0xFFFFFFF8,
	0xFFFFFFFC,
	0xFFFFFFFE
    };

void
hyper_windowmove(ip, sy, sx, dy, dx, h, w, func)
	struct ite_data *ip;
	int sy, sx, dy, dx, h, w, func;
{
	int width;		/* add to get to same position in next line */

	unsigned int *psrcLine, *pdstLine;
                                /* pointers to line with current src and dst */
	register unsigned int *psrc;  /* pointer to current src longword */
	register unsigned int *pdst;  /* pointer to current dst longword */

                                /* following used for looping through a line */
	unsigned int startmask, endmask;  /* masks for writing ends of dst */
	int nlMiddle;		/* whole longwords in dst */
	register int nl;	/* temp copy of nlMiddle */
	register unsigned int tmpSrc;
                                /* place to store full source word */
	register int xoffSrc;	/* offset (>= 0, < 32) from which to
                                   fetch whole longwords fetched
                                   in src */
	int nstart;		/* number of ragged bits at start of dst */
	int nend;		/* number of ragged bits at end of dst */
	int srcStartOver;	/* pulling nstart bits from src
                                   overflows into the next word? */

	if (h == 0 || w == 0)
		return;

	width = ip->fbwidth >> 5;
	psrcLine = ((unsigned int *) ip->fbbase) + (sy * width);
	pdstLine = ((unsigned int *) ip->fbbase) + (dy * width);

	/* x direction doesn't matter for < 1 longword */
	if (w <= 32)
	{
	    int srcBit, dstBit;     /* bit offset of src and dst */

	    pdstLine += (dx >> 5);
	    psrcLine += (sx >> 5);
	    psrc = psrcLine;
	    pdst = pdstLine;

	    srcBit = sx & 0x1f;
	    dstBit = dx & 0x1f;

	    while(h--)
	    {
                getandputrop(psrc, srcBit, dstBit, w, pdst, func);
	        pdst += width;
		psrc += width;
	    }
	}
	else
        {
	    maskbits(dx, w, startmask, endmask, nlMiddle);
	    if (startmask)
	      nstart = 32 - (dx & 0x1f);
	    else
	      nstart = 0;
	    if (endmask)
	      nend = (dx + w) & 0x1f;
	    else
	      nend = 0;

	    xoffSrc = ((sx & 0x1f) + nstart) & 0x1f;
	    srcStartOver = ((sx & 0x1f) + nstart) > 31;

	    pdstLine += (dx >> 5);
	    psrcLine += (sx >> 5);

	    while (h--)
	    {
	        psrc = psrcLine;
		pdst = pdstLine;

		if (startmask)
		{
		    getandputrop(psrc, (sx & 0x1f),
				 (dx & 0x1f), nstart, pdst, func);
		    pdst++;
		    if (srcStartOver)
		        psrc++;
		}

		/* special case for aligned operations */
		if (xoffSrc == 0)
		{
		    nl = nlMiddle;
		    while (nl--)
		    {
		        DoRop (*pdst, func, *psrc++, *pdst);
			pdst++;
		    }
		}
		else
		{
		    nl = nlMiddle + 1;
		    while (--nl)
		    {
		        getunalignedword (psrc, xoffSrc, tmpSrc);
			DoRop (*pdst, func, tmpSrc, *pdst);
			pdst++;
			psrc++;
		    }
		}

		if (endmask)
		{
		    getandputrop0(psrc, xoffSrc, nend, pdst, func);
		}

		pdstLine += width;
		psrcLine += width;
	    }
	}
@


1.5
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.4 2005/01/19 17:09:30 miod Exp $	*/
d177 1
a177 1
#include <hp300/dev/maskbits.h>
@


1.4
log
@Oops, repair stand/ by putting copies of the old grf/ite include files
in stand/include until they are cleaned up.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.3 2003/06/02 23:27:46 millert Exp $	*/
a261 2
	unsigned int *psrcBase, *pdstBase;
				/* start of src and dst bitmaps */
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.2 2002/03/14 01:26:31 millert Exp $	*/
d49 2
a50 3

#include <hp300/dev/itereg.h>
#include <hp300/dev/grf_hyreg.h>
d307 1
a307 1
                getandputrop(psrc, srcBit, dstBit, w, pdst, func)
d314 1
a314 1
	    maskbits(dx, w, startmask, endmask, nlMiddle)
d338 1
a338 1
				 (dx & 0x1f), nstart, pdst, func)
d359 1
a359 1
		        getunalignedword (psrc, xoffSrc, tmpSrc)
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.1 1997/07/14 08:14:20 downsj Exp $	*/
d22 1
a22 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.3 1997/01/17 08:32:49 downsj Exp $	*/
d64 3
a66 3
void	hyper_ite_fontinit __P((struct ite_data *));
void	hyper_windowmove __P((struct ite_data *, int, int, int, int,
	    int, int, int));
@


1.1.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.1 1997/07/14 08:14:20 downsj Exp $	*/
d64 3
a66 3
void	hyper_ite_fontinit(struct ite_data *);
void	hyper_windowmove(struct ite_data *, int, int, int, int,
	    int, int, int);
@


1.1.12.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 3
a66 3
void	hyper_ite_fontinit(struct ite_data *);
void	hyper_windowmove(struct ite_data *, int, int, int, int,
	    int, int, int);
@


1.1.12.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_hy.c,v 1.1.12.1 2002/03/28 10:07:19 niklas Exp $	*/
d22 5
a26 1
 * 3. Neither the name of the University nor the names of its contributors
@


