head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.28
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.26
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2013.04.01.12.55.27;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2013.02.02.13.34.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.13.00.13.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.23.07.15.57;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.06.19.01.01;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.13;	author downsj;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: hd.c,v 1.9 2013/04/01 12:55:27 miod Exp $	*/
/*	$NetBSD: rd.c,v 1.11 1996/12/21 21:34:40 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah Hdr: rd.c 1.20 92/12/21
 *
 *	@@(#)rd.c	8.1 (Berkeley) 7/15/93
 */

/*
 * CS80/SS80 disk driver
 */
#include <sys/param.h>
#include <sys/disklabel.h>

#include <lib/libsa/stand.h>

#include "samachdep.h"

#define	DEV_BSHIFT _DEV_BSHIFT
#include <hp300/dev/hdreg.h>
#include "hpibvar.h"

struct	hd_iocmd hd_ioc;
struct	hd_rscmd hd_rsc;
struct	hd_stat hd_stat;
struct	hd_ssmcmd hd_ssmc;

struct	disklabel hdlabel;

struct	hdminilabel {
	u_short	npart;
	u_long	offset[MAXPARTITIONS];
};

struct	hd_softc {
	int	sc_ctlr;
	int	sc_unit;
	int	sc_part;
	char	sc_retry;
	char	sc_alive;
	short	sc_type;
	struct	hdminilabel sc_pinfo;
} hd_softc[NHPIB][NHD];

#define	HDRETRY		5

struct	hdidentinfo {
	short	ri_hwid;
	short	ri_maxunum;
	int	ri_nblocks;
} hdidentinfo[] = {
	{ HD7946AID,	0,	 108416 },
	{ HD9134DID,	1,	  29088 },
	{ HD9134LID,	1,	   1232 },
	{ HD7912PID,	0,	 128128 },
	{ HD7914PID,	0,	 258048 },
	{ HD7958AID,	0,	 255276 },
	{ HD7957AID,	0,	 159544 },
	{ HD7933HID,	0,	 789958 },
	{ HD9134LID,	1,	  77840 },
	{ HD7936HID,	0,	 600978 },
	{ HD7937HID,	0,	1116102 },
	{ HD7914CTID,	0,	 258048 },
	{ HD7946AID,	0,	 108416 },
	{ HD9134LID,	1,	   1232 },
	{ HD7957BID,	0,	 159894 },
	{ HD7958BID,	0,	 297108 },
	{ HD7959BID,	0,	 594216 },
	{ HD2200AID,	0,	 654948 },
	{ HD2203AID,	0,	1309896 }
};
int numhdidentinfo = sizeof(hdidentinfo) / sizeof(hdidentinfo[0]);

int	hdclose(struct open_file *);
int	hderror(int, int, int);
int	hdgetinfo(struct hd_softc *);
int	hdident(int, int);
int	hdinit(int, int);
int	hdopen(struct open_file *, int, int, int);
void	hdreset(int, int);
int	hdstrategy(void *, int, daddr32_t, size_t, void *, size_t *);

int
hdinit(int ctlr, int unit)
{
	struct hd_softc *rs = &hd_softc[ctlr][unit];

	rs->sc_type = hdident(ctlr, unit);
	if (rs->sc_type < 0)
		return (0);
	rs->sc_alive = 1;
	return (1);
}

void
hdreset(int ctlr, int unit)
{
	u_char stat;

	hd_ssmc.c_unit = C_SUNIT(0);
	hd_ssmc.c_cmd = C_SSM;
	hd_ssmc.c_refm = REF_MASK;
	hd_ssmc.c_fefm = FEF_MASK;
	hd_ssmc.c_aefm = AEF_MASK;
	hd_ssmc.c_iefm = IEF_MASK;
	hpibsend(ctlr, unit, C_CMD, &hd_ssmc, sizeof(hd_ssmc));
	hpibswait(ctlr, unit);
	hpibrecv(ctlr, unit, C_QSTAT, &stat, 1);
}

int
hdident(int ctlr, int unit)
{
	struct cs80_describe desc;
	u_char stat, cmd[3];
	char name[7];
	int id, i;

	id = hpibid(ctlr, unit);
	if ((id & 0x200) == 0)
		return(-1);
	for (i = 0; i < numhdidentinfo; i++)
		if (id == hdidentinfo[i].ri_hwid)
			break;
	if (i == numhdidentinfo)
		return(-1);
	id = i;
	hdreset(ctlr, unit);
	cmd[0] = C_SUNIT(0);
	cmd[1] = C_SVOL(0);
	cmd[2] = C_DESC;
	hpibsend(ctlr, unit, C_CMD, cmd, sizeof(cmd));
	hpibrecv(ctlr, unit, C_EXEC, &desc, sizeof(desc));
	hpibrecv(ctlr, unit, C_QSTAT, &stat, sizeof(stat));
	bzero(name, sizeof(name));
	if (!stat) {
		int n = desc.d_name;
		for (i = 5; i >= 0; i--) {
			name[i] = (n & 0xf) + '0';
			n >>= 4;
		}
	}
	/*
	 * Take care of a couple of anomalies:
	 * 1. 7945A and 7946A both return same HW id
	 * 2. 9122S and 9134D both return same HW id
	 * 3. 9122D and 9134L both return same HW id
	 */
	switch (hdidentinfo[id].ri_hwid) {
	case HD7946AID:
		if (bcmp(name, "079450", 6) == 0)
			id = HD7945A;
		else
			id = HD7946A;
		break;

	case HD9134LID:
		if (bcmp(name, "091340", 6) == 0)
			id = HD9134L;
		else
			id = HD9122D;
		break;

	case HD9134DID:
		if (bcmp(name, "091220", 6) == 0)
			id = HD9122S;
		else
			id = HD9134D;
		break;
	}
	return(id);
}

char hdio_buf[MAXBSIZE];

int
hdgetinfo(struct hd_softc *rs)
{
	struct hdminilabel *pi = &rs->sc_pinfo;
	struct disklabel *lp = &hdlabel;
	char *msg;
	int err, savepart;
	size_t i;

	bzero((caddr_t)lp, sizeof *lp);
	lp->d_secsize = DEV_BSIZE;

	/* Disklabel is always from RAW_PART. */
	savepart = rs->sc_part;
	rs->sc_part = RAW_PART;
	err = hdstrategy(rs, F_READ, LABELSECTOR,
	    lp->d_secsize ? lp->d_secsize : DEV_BSIZE, hdio_buf, &i);
	rs->sc_part = savepart;

	if (err) {
		printf("hdgetinfo: hdstrategy error %d\n", err);
		return(0);
	}

	msg = getdisklabel(hdio_buf, lp);
	if (msg) {
		printf("hd(%d,%d,%d): WARNING: %s, ",
		       rs->sc_ctlr, rs->sc_unit, rs->sc_part, msg);
		printf("defining `c' partition as entire disk\n");
		pi->npart = 3;
		pi->offset[0] = pi->offset[1] = -1;
		pi->offset[2] = 0;
	} else {
		pi->npart = lp->d_npartitions;
		for (i = 0; i < pi->npart; i++)
			pi->offset[i] = lp->d_partitions[i].p_size == 0 ?
				-1 : lp->d_partitions[i].p_offset;
	}
	return(1);
}

int
hdopen(struct open_file *f, int ctlr, int unit, int part)
{
	struct hd_softc *rs;

	if (ctlr >= NHPIB || hpibalive(ctlr) == 0)
		return (EADAPT);
	if (unit >= NHD)
		return (ECTLR);
	rs = &hd_softc[ctlr][unit];
	rs->sc_part = part;
	rs->sc_unit = unit;
	rs->sc_ctlr = ctlr;
	if (rs->sc_alive == 0) {
		if (hdinit(ctlr, unit) == 0)
			return (ENXIO);
		if (hdgetinfo(rs) == 0)
			return (ERDLAB);
	}
	if (part != RAW_PART &&     /* always allow RAW_PART to be opened */
	    (part >= rs->sc_pinfo.npart || rs->sc_pinfo.offset[part] == -1))
		return (EPART);
	f->f_devdata = (void *)rs;
	return (0);
}

int
hdclose(struct open_file *f)
{
	struct hd_softc *rs = f->f_devdata;

	/*
	 * Mark the disk `not alive' so that the disklabel
	 * will be re-loaded at next open.
	 */
	bzero(rs, sizeof(struct hd_softc));
	f->f_devdata = NULL;
	return (0);
}

int
hdstrategy(void *devdata, int func, daddr32_t dblk, size_t size, void *v_buf,
    size_t *rsize)
{
	char *buf = v_buf;
	struct hd_softc *rs = devdata;
	int ctlr = rs->sc_ctlr;
	int unit = rs->sc_unit;
	daddr32_t blk;
	char stat;

	if (size == 0)
		return(0);

	/*
	 * Don't do partition translation on the `raw partition'.
	 */
	blk = (dblk + ((rs->sc_part == RAW_PART) ? 0 :
	    rs->sc_pinfo.offset[rs->sc_part]));

	rs->sc_retry = 0;
	hd_ioc.c_unit = C_SUNIT(0);
	hd_ioc.c_volume = C_SVOL(0);
	hd_ioc.c_saddr = C_SADDR;
	hd_ioc.c_hiaddr = 0;
	hd_ioc.c_addr = HDBTOS(blk);
	hd_ioc.c_nop2 = C_NOP;
	hd_ioc.c_slen = C_SLEN;
	hd_ioc.c_len = size;
	hd_ioc.c_cmd = func == F_READ ? C_READ : C_WRITE;
retry:
	hpibsend(ctlr, unit, C_CMD, &hd_ioc.c_unit, sizeof(hd_ioc)-2);
	hpibswait(ctlr, unit);
	hpibgo(ctlr, unit, C_EXEC, buf, size, func);
	hpibswait(ctlr, unit);
	hpibrecv(ctlr, unit, C_QSTAT, &stat, 1);
	if (stat) {
		if (hderror(ctlr, unit, rs->sc_part) == 0)
			return(EIO);
		if (++rs->sc_retry > HDRETRY)
			return(EIO);
		goto retry;
	}
	*rsize = size;

	return(0);
}

int
hderror(int ctlr, int unit, int part)
{
	char stat;

	hd_rsc.c_unit = C_SUNIT(0);
	hd_rsc.c_sram = C_SRAM;
	hd_rsc.c_ram = C_RAM;
	hd_rsc.c_cmd = C_STATUS;
	hpibsend(ctlr, unit, C_CMD, &hd_rsc, sizeof(hd_rsc));
	hpibrecv(ctlr, unit, C_EXEC, &hd_stat, sizeof(hd_stat));
	hpibrecv(ctlr, unit, C_QSTAT, &stat, 1);
	if (stat) {
		printf("hd(%d,%d,0,%d): request status fail %d\n",
		       ctlr, unit, part, stat);
		return(0);
	}
	printf("hd(%d,%d,0,%d) err: vu 0x%x",
	       ctlr, unit, part, hd_stat.c_vu);
	if ((hd_stat.c_aef & AEF_UD) || (hd_stat.c_ief & (IEF_MD|IEF_RD)))
		printf(", block %ld", hd_stat.c_blk);
	printf(", R0x%x F0x%x A0x%x I0x%x\n",
	       hd_stat.c_ref, hd_stat.c_fef, hd_stat.c_aef, hd_stat.c_ief);
	return(1);
}
@


1.9
log
@Let the hp300 boot blocks compile again after all the md include churning.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.8 2013/02/02 13:34:29 miod Exp $	*/
@


1.8
log
@hp300 ELF bits. Requires many device and prom related structs to now be declared
as packed due to them containing 32-bit types at 16-bit but not 32-bit aligned
offsets. The boot block updates (especially mkboot) come straight from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.7 2011/03/13 00:13:52 deraadt Exp $	*/
d52 1
@


1.7
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.6 2006/08/17 06:31:10 miod Exp $	*/
d206 1
a206 1
char io_buf[MAXBSIZE];
d224 1
a224 1
	    lp->d_secsize ? lp->d_secsize : DEV_BSIZE, io_buf, &i);
d232 1
a232 1
	msg = getdisklabel(io_buf, lp);
@


1.6
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.5 2005/11/23 07:15:57 miod Exp $	*/
d113 1
a113 1
int	hdstrategy(void *, int, daddr_t, size_t, void *, size_t *);
d290 1
a290 1
hdstrategy(void *devdata, int func, daddr_t dblk, size_t size, void *v_buf,
d297 1
a297 1
	daddr_t blk;
@


1.5
log
@Pick HP-IB describe structures changes from main kernel code here as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.4 2005/09/06 19:01:01 miod Exp $	*/
d106 9
d116 1
a116 2
hdinit(ctlr, unit)
	int ctlr, unit;
d118 1
a118 1
	register struct hd_softc *rs = &hd_softc[ctlr][unit];
d128 1
a128 2
hdreset(ctlr, unit)
	register int ctlr, unit;
d144 1
a144 2
hdident(ctlr, unit)
	register int ctlr, unit;
d149 1
a149 1
	register int id, i;
d169 1
a169 1
		register int n = desc.d_name;
d209 1
a209 2
hdgetinfo(rs)
	register struct hd_softc *rs;
d211 4
a214 4
	register struct hdminilabel *pi = &rs->sc_pinfo;
	register struct disklabel *lp = &hdlabel;
	char *msg, *getdisklabel();
	int hdstrategy(), err, savepart;
d231 1
a231 1
	
d250 1
a250 3
hdopen(f, ctlr, unit, part)
	struct open_file *f;
	int ctlr, unit, part;
d252 1
a252 1
	register struct hd_softc *rs;
d276 1
a276 2
hdclose(f)
	struct open_file *f;
d290 2
a291 7
hdstrategy(devdata, func, dblk, size, v_buf, rsize)
	void *devdata;
	int func;
	daddr_t dblk;
	size_t size;
	void *v_buf;
	size_t *rsize;
d295 2
a296 2
	register int ctlr = rs->sc_ctlr;
	register int unit = rs->sc_unit;
d338 1
a338 3
hderror(ctlr, unit, part)
	register int ctlr, unit;
	int part;
@


1.4
log
@anomoly -> anomaly
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.3 2005/04/22 00:42:16 miod Exp $	*/
d53 1
d140 1
a140 1
	struct hd_describe desc;
d159 1
a159 1
	hpibrecv(ctlr, unit, C_EXEC, &desc, 37);
@


1.3
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.2 2003/06/02 23:27:46 millert Exp $	*/
d169 1
a169 1
	 * Take care of a couple of anomolies:
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.1 1997/07/14 08:14:13 downsj Exp $	*/
d105 1
a109 1
	u_char stat;
d118 1
d135 1
d201 1
d243 1
a248 1
	struct hdinfo *ri;
d271 1
a282 1

d286 1
d339 1
a343 1
	register struct hd_softc *hd = &hd_softc[ctlr][unit];
d361 1
a361 1
		printf(", block %d", hd_stat.c_blk);
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.2 1997/07/13 07:21:47 downsj Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.12.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd.c,v 1.1 1997/07/14 08:14:13 downsj Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


