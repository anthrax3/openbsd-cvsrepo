head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2011.08.18.20.02.58;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.18.19.54.19;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.15.20.35.22;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.23.16.37.56;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.14.21.05.44;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.19.17.09.30;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.17;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2002.03.28.10.07.19;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;

1.1.22.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: ite.c,v 1.11 2011/08/18 20:02:58 miod Exp $	*/
/*	$NetBSD: ite.c,v 1.12 1997/01/30 10:32:55 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: ite.c 1.24 93/06/25$
 *
 *	@@(#)ite.c	8.1 (Berkeley) 7/8/93
 */

/*
 * Standalone Internal Terminal Emulator (CRT and keyboard)
 */

#ifdef ITECONSOLE

#include <sys/param.h>

#include <hp300/dev/dioreg.h>
#include <hp300/dev/sgcreg.h>
#include <hp300/dev/diofbreg.h>
#include <dev/ic/stireg.h>

#include "samachdep.h"
#include "consdefs.h"
#include "device.h"
#include "itevar.h"
#include "kbdvar.h"

void	itecheckwrap(struct ite_data *, struct itesw *);
void	iteconfig(void);
void	ite_clrtoeol(struct ite_data *, struct itesw *, int, int);

#define	GID_STI		0x100	/* any value which is not a DIO fb, really */

struct itesw itesw[] = {
	{ GID_TOPCAT,
	NULL,		topcat_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_GATORBOX,
	NULL,		gbox_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	gbox_scroll },

	{ GID_RENAISSANCE,
	NULL,		rbox_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_LRCATSEYE,
	NULL,		topcat_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_HRCCATSEYE,
	NULL,		topcat_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_HRMCATSEYE,
	NULL,		topcat_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_DAVINCI,
      	NULL,		dvbox_init,
	ite_dio_clear,	ite_dio_putc8bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_HYPERION,
	NULL,		hyper_init,
	ite_dio_clear,	ite_dio_putc1bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_TIGER,
	NULL,		tvrx_init,
	ite_dio_clear,	ite_dio_putc1bpp,	ite_dio_cursor,	ite_dio_scroll },

	{ GID_FB3X2_A,
	sti_dio_probe,	sti_iteinit_dio,
	sti_clear,	sti_putc,		sti_cursor,	sti_scroll },

	{ GID_FB3X2_B,
	sti_dio_probe,	sti_iteinit_dio,
	sti_clear,	sti_putc,		sti_cursor,	sti_scroll },

	{ GID_STI,
	NULL,		sti_iteinit_sgc,
	sti_clear,	sti_putc,		sti_cursor,	sti_scroll }
};

/* these guys need to be in initialized data */
int itecons = -1;
struct  ite_data ite_data[NITE] = { { 0 } };

/*
 * Locate all bitmapped displays
 */
void
iteconfig()
{
	extern struct hp_hw sc_table[];
	int dtype, fboff, slotno, i;
	u_int8_t *va;
	struct hp_hw *hw;
	struct diofbreg *fb;
	struct ite_data *ip;

	i = 0;
	for (hw = sc_table; hw < &sc_table[MAXCTLRS]; hw++) {
	        if (!HW_ISDEV(hw, D_BITMAP))
			continue;
		fb = (struct diofbreg *)hw->hw_kva;
		/* XXX: redundent but safe */
		if (badaddr((caddr_t)fb) || fb->id != GRFHWID)
			continue;
		for (dtype = 0; dtype < nitems(itesw); dtype++)
			if (itesw[dtype].ite_hwid == fb->fbid)
				break;
		if (dtype == nitems(itesw))
			continue;
		if (i >= NITE)
			break;
		ip = &ite_data[i];
		ip->scode = hw->hw_sc;
		ip->isw = &itesw[dtype];
		ip->regbase = (caddr_t)fb;
		fboff = (fb->fbomsb << 8) | fb->fbolsb;
		ip->fbbase = (caddr_t) (*((u_char *)ip->regbase+fboff) << 16);
		/* DIO II: FB offset is relative to select code space */
		if (DIO_ISDIOII(ip->scode))
			ip->fbbase += (int)ip->regbase;
		ip->fbwidth  = fb->fbwmsb << 8 | fb->fbwlsb;
		ip->fbheight = fb->fbhmsb << 8 | fb->fbhlsb;
		ip->dwidth   = fb->dwmsb << 8 | fb->dwlsb;
		ip->dheight  = fb->dhmsb << 8 | fb->dhlsb;
		/*
		 * XXX some displays (e.g. the davinci) appear
		 * to return a display height greater than the
		 * returned FB height.  Guess we should go back
		 * to getting the display dimensions from the
		 * fontrom...
		 */
		if (ip->dwidth > ip->fbwidth)
			ip->dwidth = ip->fbwidth;
		if (ip->dheight > ip->fbheight)
			ip->dheight = ip->fbheight;
		/* confirm hardware is what we think it is */
		if (itesw[dtype].ite_probe != NULL &&
		    (*itesw[dtype].ite_probe)(ip) != 0)
			continue;
		ip->alive = 1;
		i++;
	}

	/*
	 * Now probe for SGC frame buffers.
	 */
	switch (machineid) {
	case HP_400:
	case HP_425:
	case HP_433:
		break;
	default:
		return;
	}

	/* SGC frame buffers can only be STI... */
	for (dtype = 0; dtype < nitems(itesw); dtype++)
		if (itesw[dtype].ite_hwid == GID_STI)
			break;
	if (dtype == nitems(itesw))
		return;

	for (slotno = 0; slotno < SGC_NSLOTS; slotno++) {
		va = (u_int8_t *)IIOV(SGC_BASE + (slotno * SGC_DEVSIZE));

		/* Check to see if hardware exists. */
		if (badaddr(va) != 0)
			continue;

		/* Check hardware. */
		if (va[3] == STI_DEVTYPE1) {
			if (i >= NITE)
				break;
			ip = &ite_data[i];
			ip->scode = slotno;
			ip->isw = &itesw[dtype];
			ip->regbase = (caddr_t)GRFIADDR; /* to get CN_MIDPRI */
			/* ...and do not need an ite_probe() check */
			ip->alive = 1;
			i++;
			/* we only support one SGC frame buffer at the moment */
			break;
		}
	}
}

void
iteprobe(struct consdev *cp)
{
	int ite;
	struct ite_data *ip;
	int unit, pri;

	iteconfig();
	unit = -1;
	pri = CN_DEAD;
	for (ite = 0; ite < NITE; ite++) {
		ip = &ite_data[ite];
		if (ip->alive == 0)
			continue;
		if ((int)ip->regbase == GRFIADDR) {
			pri = CN_MIDPRI;
			unit = ite;
		} else if (unit < 0) {
			pri = CN_LOWPRI;
			unit = ite;
		}
	}
	cp->cn_dev = unit;
	cp->cn_pri = pri;
}

void
iteinit(struct consdev *cp)
{
	int ite = cp->cn_dev;
	struct ite_data *ip;

	ip = &ite_data[ite];

	ip->curx = 0;
	ip->cury = 0;
	ip->cursorx = 0;
	ip->cursory = 0;

	(*ip->isw->ite_init)(ip);
	(*ip->isw->ite_cursor)(ip, DRAW_CURSOR);

	itecons = ite;
	kbdinit();
}

/* ARGSUSED */
void
iteputchar(dev_t dev, int c)
{
	struct ite_data *ip = &ite_data[itecons];
	struct itesw *sp = ip->isw;

	c &= 0x7F;
	switch (c) {

	case '\n':
		if (++ip->cury == ip->rows) {
			ip->cury--;
			(*sp->ite_scroll)(ip);
			ite_clrtoeol(ip, sp, ip->cury, 0);
		}
		else
			(*sp->ite_cursor)(ip, MOVE_CURSOR);
		break;

	case '\r':
		ip->curx = 0;
		(*sp->ite_cursor)(ip, MOVE_CURSOR);
		break;

	case '\b':
		if (--ip->curx < 0)
			ip->curx = 0;
		else
			(*sp->ite_cursor)(ip, MOVE_CURSOR);
		break;

	default:
		if (c < ' ' || c == 0177)
			break;
		(*sp->ite_putc)(ip, c, ip->cury, ip->curx);
		(*sp->ite_cursor)(ip, DRAW_CURSOR);
		itecheckwrap(ip, sp);
		break;
	}
}

void
itecheckwrap(struct ite_data *ip, struct itesw *sp)
{
	if (++ip->curx == ip->cols) {
		ip->curx = 0;
		if (++ip->cury == ip->rows) {
			--ip->cury;
			(*sp->ite_scroll)(ip);
			ite_clrtoeol(ip, sp, ip->cury, 0);
			return;
		}
	}
	(*sp->ite_cursor)(ip, MOVE_CURSOR);
}

void
ite_clrtoeol(struct ite_data *ip, struct itesw *sp, int y, int x)
{
	(*sp->ite_clear)(ip, y, x, 1, ip->cols - x);
	(*sp->ite_cursor)(ip, DRAW_CURSOR);
}

/* ARGSUSED */
int
itegetchar(dev_t dev)
{
#ifdef SMALL
	return (0);
#else
	return (kbdgetc());
#endif
}
#endif
@


1.11
log
@So, it turns out that models 362 and 382 built-in frame buffer only shows up
in DIO-II space, as a fat device spanning four select codes (i.e. 16MB of
memory). This is way too much for an at-most 2 Mpixel 8bit frame buffer, and
it turns out that this is because the device provides both a regular DIO-II
frame buffer (spanning two select codes) and a regular STI frame buffer
(spanning the other two select codes).
This commit introduces a straightforward sti@@dio attachment to get a working
sti(4) and wsdisplay(4) in a ridiculously small number of lines; however
the console code needs some changes to avoid duplicating globals.

While there, add sti@@dio support for the bootblocks, and I couldn't help
myself but clean the most rotten parts of them, and try to have them reuse
various files in sys/arch/hp300/dev instead of rolling their outdated ones.

Tested on a real 382 with the low-resolution frame buffer:
sti0 at dio0 scode 132: rev 8.02;129, ID 0x27134CB440A00499
sti0: 382V, 2048x512 frame buffer, 640x480x8 display
sti0: 8x16 font type 1, 16 bpc, charset 0-255
wsdisplay0 at sti0 mux 1: console (std, vt100 emulation)

Boot blocks updates tested on DIO-II 425t (serial/glass console), SGC 425e
(serial/glass console) and 382 (serial/glass console). And will be tested
on SGC 425t soon as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.10 2011/08/18 19:54:19 miod Exp $	*/
@


1.10
log
@Because model 362 does not have an SGC bus (or a blind, deaf and mute one),
there is no way we can tell models 360 and 362 apart by probing for an SGC
bus, or for a frodo(4) chip since of the `lil' black swan' 3x2 models, only
model 382 has frodo. So don't bother trying to tell models 360 and 362
apart, and use a common 36X symbol. No functional change except for useless
code removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.9 2010/04/15 20:35:22 miod Exp $	*/
d50 1
d52 1
a57 1
#include "grfreg.h"
d65 2
d69 2
a70 2
	topcat_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	ite_dio_scroll },
d73 2
a74 2
	gbox_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	gbox_scroll },
d77 2
a78 2
	rbox_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	ite_dio_scroll },
d81 2
a82 2
	topcat_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	ite_dio_scroll },
d85 2
a86 2
	topcat_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	ite_dio_scroll },
d89 2
a90 2
	topcat_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	ite_dio_scroll },
d93 2
a94 2
      	dvbox_init,	ite_dio_clear,	ite_dio_putc8bpp,
	ite_dio_cursor,	ite_dio_scroll },
d97 2
a98 2
	hyper_init,	ite_dio_clear,	ite_dio_putc1bpp,
	ite_dio_cursor,	ite_dio_scroll },
d101 10
a110 2
	tvrx_init,	ite_dio_clear,	ite_dio_putc1bpp,
	ite_dio_cursor,	ite_dio_scroll },
d113 2
a114 2
	sti_iteinit,	sti_clear,	sti_putc,
	sti_cursor,	sti_scroll },
a115 1
int	nitesw = sizeof(itesw) / sizeof(itesw[0]);
d131 1
a131 1
	struct grfreg *gr;
d138 1
a138 1
		gr = (struct grfreg *) hw->hw_kva;
d140 1
a140 1
		if (badaddr((caddr_t)gr) || gr->gr_id != GRFHWID)
d142 2
a143 2
		for (dtype = 0; dtype < nitesw; dtype++)
			if (itesw[dtype].ite_hwid == gr->gr_id2)
d145 1
a145 1
		if (dtype == nitesw)
d150 1
d152 2
a153 2
		ip->regbase = (caddr_t) gr;
		fboff = (gr->gr_fbomsb << 8) | gr->gr_fbolsb;
d156 1
a156 1
		if (ip->regbase >= (caddr_t)DIOIIBASE)
d158 4
a161 4
		ip->fbwidth  = gr->gr_fbwidth_h << 8 | gr->gr_fbwidth_l;
		ip->fbheight = gr->gr_fbheight_h << 8 | gr->gr_fbheight_l;
		ip->dwidth   = gr->gr_dwidth_h << 8 | gr->gr_dwidth_l;
		ip->dheight  = gr->gr_dheight_h << 8 | gr->gr_dheight_l;
d173 4
d193 2
a194 1
	for (dtype = 0; dtype < nitesw; dtype++)
d197 1
a197 1
	if (dtype == nitesw)
d212 1
d215 1
a215 1
			ip->fbbase = (caddr_t)slotno;
@


1.9
log
@Let sgc(4) attach on models 362 and 382 - recent documents uploaded to
bitsavers confirm the long suspicion the onboard frame buffer on these
machines is an SGC device.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.8 2008/01/23 16:37:56 jsing Exp $	*/
a167 1
	 * Note that we do not tell 360 from 362 in the bootblocks.
a169 2
	case HP_360:
	case HP_382:
@


1.8
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.7 2006/08/17 06:31:10 miod Exp $	*/
d167 2
a168 1
	 * Now probe for SGC frame buffers
d170 8
a177 2
	if (machineid != HP_400 && machineid != HP_425 &&
	    machineid != HP_433)
d179 1
@


1.7
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.6 2006/04/14 21:05:44 miod Exp $	*/
d192 1
a192 1
			ip->regbase = (caddr_t)GRFIADDR;/* to get CN_INTERNAL */
d217 1
a217 1
			pri = CN_INTERNAL;
d220 1
a220 1
			pri = CN_NORMAL;
@


1.6
log
@Minimal support for the HP98705 ``Tigershark'' TurboVRX frame buffer
(using an overlay plane only for now). Bootblocks, text console and X11
are supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.5 2005/04/22 00:42:16 miod Exp $	*/
a48 1
#include <dev/cons.h>
d50 6
a56 1
#include "device.h"
d58 1
a58 2
#include "consdefs.h"
#include "samachdep.h"
d61 1
a62 1
void	ite_deinit_noop(struct ite_data *);
d66 2
a67 2
	topcat_init,	ite_deinit_noop, topcat_clear,	topcat_putc,
	topcat_cursor,	topcat_scroll,	ite_readbyte,	ite_writeglyph },
d70 2
a71 2
	gbox_init,	ite_deinit_noop, gbox_clear,	gbox_putc,
	gbox_cursor,	gbox_scroll,	ite_readbyte,	ite_writeglyph },
d74 2
a75 2
	rbox_init,	ite_deinit_noop, rbox_clear,	rbox_putc,
	rbox_cursor,	rbox_scroll,	ite_readbyte,	ite_writeglyph },
d78 2
a79 2
	topcat_init,	ite_deinit_noop, topcat_clear,	topcat_putc,
	topcat_cursor,	topcat_scroll,	ite_readbyte,	ite_writeglyph },
d82 2
a83 2
	topcat_init,	ite_deinit_noop, topcat_clear,	topcat_putc,
	topcat_cursor,	topcat_scroll,	ite_readbyte,	ite_writeglyph },
d86 2
a87 2
	topcat_init,	ite_deinit_noop, topcat_clear,	topcat_putc,
	topcat_cursor,	topcat_scroll,	ite_readbyte,	ite_writeglyph },
d90 2
a91 2
      	dvbox_init,	ite_deinit_noop, dvbox_clear,	dvbox_putc,
	dvbox_cursor,	dvbox_scroll,	ite_readbyte,	ite_writeglyph },
d94 2
a95 2
	hyper_init,	ite_deinit_noop, hyper_clear,	hyper_putc,
	hyper_cursor,	hyper_scroll,	ite_readbyte,	ite_writeglyph },
d98 6
a103 2
	tvrx_init,	ite_deinit_noop, hyper_clear,	hyper_putc,
	hyper_cursor,	hyper_scroll,	ite_readbyte,	ite_writeglyph },
a109 1
int	ite_scode[NITE] = { 0 };
d118 2
a119 1
	int dtype, fboff, i;
a138 1
		ite_scode[i] = hw->hw_sc;
d162 1
a162 1
		ip->flags = ITE_ALIVE|ITE_CONSOLE;
d165 35
a201 8
#ifdef CONSDEBUG
/*
 * Allows us to cycle through all possible consoles (NITE ites and serial port)
 * by using SHIFT-RESET on the keyboard.
 */
int	whichconsole = -1;
#endif

d203 1
a203 2
iteprobe(cp)
	struct consdev *cp;
d205 2
a206 2
	register int ite;
	register struct ite_data *ip;
a208 7
#ifdef CONSDEBUG
	whichconsole = ++whichconsole % (NITE+1);
#endif

	if (itecons != -1)
		return;

a212 4
#ifdef CONSDEBUG
		if (ite < whichconsole)
			continue;
#endif
d214 1
a214 2
		if ((ip->flags & (ITE_ALIVE|ITE_CONSOLE))
		    != (ITE_ALIVE|ITE_CONSOLE))
a223 1
	curcons_scode = ite_scode[unit];
d229 1
a229 2
iteinit(cp)
	struct consdev *cp;
a233 3
	if (itecons != -1)
		return;

d250 1
a250 3
iteputchar(dev, c)
	dev_t dev;
	register int c;
d252 2
a253 2
	register struct ite_data *ip = &ite_data[itecons];
	register struct itesw *sp = ip->isw;
d261 1
a261 1
			(*sp->ite_scroll)(ip, 1, 0, 1, SCROLL_UP);
d283 1
a283 1
		(*sp->ite_putc)(ip, c, ip->cury, ip->curx, ATTR_NOR);
d297 1
a297 1
			(*sp->ite_scroll)(ip, 1, 0, 1, SCROLL_UP);
d314 1
a314 2
itegetchar(dev)
	dev_t dev;
a322 7

/* ARGSUSED */
void
ite_deinit_noop(ip)
	struct ite_data *ip;
{
}
@


1.5
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.4 2005/01/19 17:09:30 miod Exp $	*/
d92 4
@


1.4
log
@Oops, repair stand/ by putting copies of the old grf/ite include files
in stand/include until they are cleaned up.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.3 2003/06/02 23:27:46 millert Exp $	*/
d57 2
d98 1
a98 1
struct  ite_data ite_data[NITE] = { 0 };
d104 1
d273 2
a274 3
itecheckwrap(ip, sp)
     register struct ite_data *ip;
     register struct itesw *sp;
d288 2
a289 4
ite_clrtoeol(ip, sp, y, x)
     register struct ite_data *ip;
     register struct itesw *sp;
     register int y, x;
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.2 2002/03/14 01:26:31 millert Exp $	*/
d51 1
a51 2
#include <hp300/dev/grfreg.h>

@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.1 1997/07/14 08:14:17 downsj Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.4 1997/02/03 04:48:06 downsj Exp $	*/
d62 1
a62 1
void	ite_deinit_noop __P((struct ite_data *));
@


1.1.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.1 1997/07/14 08:14:17 downsj Exp $	*/
d62 1
a62 1
void	ite_deinit_noop(struct ite_data *);
@


1.1.12.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
a62 1
void	ite_deinit_noop(struct ite_data *);
@


1.1.12.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite.c,v 1.1.12.1 2002/03/28 10:07:19 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


