head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.36
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.34
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.22
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2014.03.18.22.36.33;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2013.01.11.23.22.35;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.22.00.42.16;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	97.09.14.07.02.05;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.48;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: devopen.c,v 1.5 2013/01/11 23:22:35 miod Exp $	*/
/*	$NetBSD: devopen.c,v 1.7 1996/10/14 07:31:47 thorpej Exp $	*/

/*-
 *  Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 *  Copyright (c) 1993 John Brezak
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/reboot.h>

#include <lib/libsa/stand.h>

#include "samachdep.h"

int	atoi(char *);
int	devlookup(const char *, int);
int	devopen(struct open_file *, const char *, char **);
int	devparse(const char *, int *, int *, int *, int *, int *, char **);
void	usage(void);

u_int opendev;

#define ispart(c)	((c) >= 'a' && (c) <= 'h')

int
atoi(char *cp)
{
	int val = 0;

	while(isdigit(*cp))
		val = val * 10 + (*cp++ - '0');
	return(val);
}

void
usage()
{
	printf("Usage: device(adaptor, controller, drive, partition)file\n"
	       "       <device><unit><partitionletter>:file\n");
}

int
devlookup(const char *d, int len)
{
	struct devsw *dp = devsw;
	int i;

	for (i = 0; i < ndevs; i++, dp++) {
		if (dp->dv_name && strncmp(dp->dv_name, d, len) == 0) {
			/*
			 * Set the filesystem and startup up according to
			 * the device being opened.
			 */
			switch (i) {
			case 0:	/* ct */
				bcopy(file_system_rawfs, file_system,
				    sizeof(struct fs_ops));
				break;

			case 2:	/* hd */
				bcopy(file_system_ufs, file_system,
				    sizeof(struct fs_ops));
				break;

			case 4:	/* sd */
				bcopy(file_system_ufs, file_system,
				    sizeof(struct fs_ops));
				bcopy(file_system_cd9660, &file_system[1],
				    sizeof(struct fs_ops));
				nfsys = 2;
				break;

			case 6:	/* le */
				bcopy(file_system_nfs, file_system,
				    sizeof(struct fs_ops));
				break;

			default:
				/* Agh!  What happened?! */
				goto bad;
			}
			return(i);
		}
	}

bad:
	printf("No such device - Configured devices are:\n");
	for (dp = devsw, i = 0; i < ndevs; i++, dp++)
		if (dp->dv_name)
			printf(" %s", dp->dv_name);
	printf("\n");
	errno = ENODEV;
	return(-1);
}

/*
 * Parse a device spec in one of two forms.
 *
 * dev(adapt, ctlr, unit, part)file
 * [A-Za-z]*[0-9]*[A-Za-z]:file
 *    dev   unit  part
 */
int
devparse(const char *fname, int *dev, int *adapt, int *ctlr, int *unit,
    int *part, char **file)
{
	int i;
	char *s, *args[4];

	/* check for device name */
	for (s = (char *)fname; *s && *s != '/' && *s != ':' && *s != '('; s++)
		/* if (isupper(*s)) *s = tolower(*s) */;

	/* first form */
	if (*s == '(') {
		/* make device name lower case */
		for (s = (char *)fname; *s != '('; s++)
			if (isupper(*s)) *s = tolower(*s);
		/* lookup device and get index */
		if ((*dev = devlookup(fname, s - fname)) < 0)
			goto baddev;

		/* tokenize device ident */
		args[0] = ++s;
		for (args[0] = s, i = 1; *s && *s != ')'; s++) {
			if (*s == ',')
				args[i++] = ++s;
		}
		switch(i) {
		case 4:
			*adapt = atoi(args[0]);
			*ctlr  = atoi(args[1]);
			*unit  = atoi(args[2]);
			*part  = atoi(args[3]);
			break;
		case 3:
			*ctlr  = atoi(args[0]);
			*unit  = atoi(args[1]);
			*part  = atoi(args[2]);
			break;
		case 2:
			*unit  = atoi(args[0]);
			*part  = atoi(args[1]);
			break;
		case 1:
			*part  = atoi(args[0]);
			break;
		case 0:
			break;
		}
		*file = ++s;
	}

	/* second form */
	else if (*s == ':') {
		int temp;

		/* isolate device and make its name lower case*/
		for (s = (char *)fname; *s != ':' && !isdigit(*s); s++)
			if (isupper(*s)) *s = tolower(*s);

		/* lookup device and get index */
		if ((*dev = devlookup(fname, s - fname)) < 0)
			goto baddev;

		/* isolate unit */
		if ((temp = atoi(s)) > 255)
			goto bad;
		*adapt = temp / 8;
		*ctlr = temp % 8;
		for (; isdigit(*s); s++);

		/* translate partition */
		if (!ispart(*s))
			goto bad;

		*part = *s++ - 'a';
		if (*s != ':')
			goto bad;
		*file = ++s;
	}

	/* no device present */
	else
		*file = (char *)fname;

	/* return the remaining unparsed part as the file to boot */
	return(0);

bad:
	usage();

baddev:
	return(-1);
}

int
devopen(struct open_file *f, const char *fname, char **file)
{
	int error;
	int dev, adapt, ctlr, unit, part;
	struct devsw *dp = &devsw[0];

	dev   = B_TYPE(bootdev);
	adapt = B_ADAPTOR(bootdev);
	ctlr  = B_CONTROLLER(bootdev);
	unit  = B_UNIT(bootdev);
	part  = B_PARTITION(bootdev);

	if ((error = devparse(fname, &dev, &adapt, &ctlr, &unit, &part, file)))
	    return(error);

	/*
	 * Set up filesystem type based on what device we're opening.
	 */
	switch (dev) {
	case 0:		/* ct */
		bcopy(file_system_rawfs, file_system, sizeof(struct fs_ops));
		break;

	case 2:		/* hd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		break;

	case 4:		/* sd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		bcopy(file_system_cd9660, &file_system[1],
		    sizeof(struct fs_ops));
		nfsys = 2;
		break;

	case 6:		/* le */
		bcopy(file_system_nfs, file_system, sizeof(struct fs_ops));
		break;

	default:
		/* XXX what else should we do here? */
		printf("WARNING: BOGUS BOOT DEV TYPE 0x%x!\n", dev);
		return (EIO);
	}

	dp = &devsw[dev];

	if (!dp->dv_open)
		return(ENODEV);

	f->f_dev = dp;

	if ((error = (*dp->dv_open)(f, adapt, ctlr, part)) == 0) {
		if ((error =
		    (*punitsw[dev].p_punit)(adapt, ctlr, &unit)) != 0) {
			goto bad;
		}
		opendev = MAKEBOOTDEV(dev, adapt, ctlr, unit, part);
		return(0);
	}

 bad:
	printf("%s(%d,%d,%d,%d): %s\n", devsw[dev].dv_name,
	    adapt, ctlr, unit, part, strerror(error));

	return(error);
}
@


1.5
log
@Change boot commandline parsing to only force lowercase of the device name
part, and keep the filename unchanged.
This allows a kernel which name contains uppercase letters to be bootable,
instead of getting a `file not found' error with the filename being all
lower case.
A workaround was to prepend the filename with `/', to give an absolute path.
Yet there is no reason to lowercase the filename unless there is a boot device
prefix.

Crank version.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.4 2006/08/17 06:31:10 miod Exp $	*/
@


1.4
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.3 2005/04/22 00:42:16 miod Exp $	*/
d135 1
a135 1
	/* get device name and make lower case */
d137 1
a137 1
		if (isupper(*s)) *s = tolower(*s);
d141 3
d183 3
a185 2
		/* isolate device */
		for (s = (char *)fname; *s != ':' && !isdigit(*s); s++);
@


1.3
log
@Pass -Wall, complete prototypes, some KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.2 1997/09/14 07:02:05 downsj Exp $	*/
d8 1
a8 1
 * 
d19 1
a19 1
 * 
d40 6
d73 36
a108 31
    for (i = 0; i < ndevs; i++, dp++) {
	if (dp->dv_name && strncmp(dp->dv_name, d, len) == 0) {
	    /*
	     * Set the filesystem and startup up according to the device
	     * being opened.
	     */
	    switch (i) {
	    case 0:	/* ct */
		bcopy(file_system_rawfs, file_system, sizeof(struct fs_ops));
		break;

	    case 2:	/* hd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		break;

	    case 4:	/* sd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		bcopy(file_system_cd9660, &file_system[1],
		    sizeof(struct fs_ops));
		nfsys = 2;
		break;

	    case 6:	/* le */
		bcopy(file_system_nfs, file_system, sizeof(struct fs_ops));
		break;

	    default:
		/* Agh!  What happened?! */
		goto bad;
	    }
	    return(i);
a109 1
    }
d111 8
a118 8
 bad:
    printf("No such device - Configured devices are:\n");
    for (dp = devsw, i = 0; i < ndevs; i++, dp++)
	if (dp->dv_name)
	    printf(" %s", dp->dv_name);
    printf("\n");
    errno = ENODEV;
    return(-1);
d129 2
a130 4
devparse(fname, dev, adapt, ctlr, unit, part, file)
	const char *fname;
	int *dev, *adapt, *ctlr, *unit, *part;
	char **file;
d132 2
a133 2
    int i;
    char *s, *args[4];
d135 39
a173 15
    /* get device name and make lower case */
    for (s = (char *)fname; *s && *s != '/' && *s != ':' && *s != '('; s++)
	if (isupper(*s)) *s = tolower(*s);

    /* first form */
    if (*s == '(') {
	/* lookup device and get index */
	if ((*dev = devlookup(fname, s - fname)) < 0)
	    goto baddev;

	/* tokenize device ident */
	args[0] = ++s;
	for (args[0] = s, i = 1; *s && *s != ')'; s++) {
	    if (*s == ',')
		args[i++] = ++s;
d175 27
a201 21
	switch(i) {
	case 4:
	    *adapt = atoi(args[0]);
	    *ctlr  = atoi(args[1]);
	    *unit  = atoi(args[2]);
	    *part  = atoi(args[3]);
	    break;
	case 3:
	    *ctlr  = atoi(args[0]);
	    *unit  = atoi(args[1]);
	    *part  = atoi(args[2]);
	    break;
	case 2:
	    *unit  = atoi(args[0]);
	    *part  = atoi(args[1]);
	    break;
	case 1:
	    *part  = atoi(args[0]);
	    break;
	case 0:
	    break;
a202 2
	*file = ++s;
    }
d204 3
a206 31
    /* second form */
    else if (*s == ':') {
	int temp;

	/* isolate device */
	for (s = (char *)fname; *s != ':' && !isdigit(*s); s++);
	
	/* lookup device and get index */
	if ((*dev = devlookup(fname, s - fname)) < 0)
	    goto baddev;

	/* isolate unit */
	if ((temp = atoi(s)) > 255)
	    goto bad;
	*adapt = temp / 8;
	*ctlr = temp % 8;
	for (; isdigit(*s); s++);
	
	/* translate partition */
	if (!ispart(*s))
	    goto bad;
	
	*part = *s++ - 'a';
	if (*s != ':')
	    goto bad;
	*file = ++s;
    }

    /* no device present */
    else
	*file = (char *)fname;
d208 2
a209 2
    /* return the remaining unparsed part as the file to boot */
    return(0);
d211 2
a212 2
 bad:
    usage();
d214 2
a215 2
 baddev:
    return(-1);
d244 1
a244 1
		break; 
d251 1
a251 1
		break; 
d264 1
a264 1
	
@


1.2
log
@Add cd9660 support.  OpenBSD/hp300 boots from SCSI CD-ROM now.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.1 1997/07/14 08:14:48 downsj Exp $	*/
d44 1
d47 5
a51 4
    int val = 0;
    while(isdigit(*cp))
	val = val * 10 + (*cp++ - '0');
    return(val);
d54 1
d57 2
a58 4
    printf("\
Usage: device(adaptor, controller, drive, partition)file\n\
       <device><unit><partitionletter>:file\n\
");
d61 2
a62 3
devlookup(d, len)
	const char *d;
	int len;
d64 3
a66 3
    struct devsw *dp = devsw;
    int i;
    
d118 1
d124 1
a124 1
    int *argp, i;
d199 1
a199 1
    
d202 1
a202 1
    
d208 1
a208 2
}    

d210 2
a211 4
devopen(f, fname, file)
	struct open_file *f;
	const char *fname;
	char **file;
d213 1
a213 1
	int n, error;
d223 1
a223 1
	if (error = devparse(fname, &dev, &adapt, &ctlr, &unit, &part, file))
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.4 1997/07/13 07:21:47 downsj Exp $	*/
d79 3
d84 3
d237 3
d242 3
@
