head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.16
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.03.18.22.36.33;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2011.03.13.00.13.52;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.17.06.31.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.18.14.15.12;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.14.08.14.48;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2002.03.28.10.07.19;	author niklas;	state Exp;
branches;
next	;

1.1.22.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: rawfs.c,v 1.5 2011/03/13 00:13:52 deraadt Exp $	*/
/*	$NetBSD: rawfs.c,v 1.2 1996/10/06 19:07:53 thorpej Exp $	*/

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Raw file system - for stream devices like tapes.
 * No random access, only sequential read allowed.
 * This exists only to allow upper level code to be
 * shielded from the fact that the device must be
 * read only with whole block position and size.
 */

#include <sys/param.h>

#include <lib/libsa/stand.h>
#include "rawfs.h"

extern int debug;

/* Our devices are generally willing to do 8K transfers. */
#define	RAWFS_BSIZE	0x2000

/*
 * In-core open file.
 */
struct rawfs_file {
	daddr32_t	fs_nextblk;	/* block number to read next */
	int		fs_len;		/* amount left in f_buf */
	char *		fs_ptr;		/* read pointer into f_buf */
	char		fs_buf[RAWFS_BSIZE];
};

static int
rawfs_get_block(struct open_file *);

int
rawfs_open(char *path, struct open_file *f)
{
	struct rawfs_file *fs;

	/*
	 * The actual tape driver has already been opened.
	 * Just allocate the I/O buffer, etc.
	 */
	fs = alloc(sizeof(struct rawfs_file));
	fs->fs_nextblk = 0;
	fs->fs_len = 0;
	fs->fs_ptr = fs->fs_buf;

#ifdef	DEBUG_RAWFS
	printf("rawfs_open: fs=0x%x\n", (u_long)fs);
#endif

	f->f_fsdata = fs;
	return (0);
}

int
rawfs_close(struct open_file *f)
{
	struct rawfs_file *fs;

	fs = (struct rawfs_file *) f->f_fsdata;
	f->f_fsdata = (void *)0;

#ifdef	DEBUG_RAWFS
	printf("rawfs_close: fs=0x%x\n", (u_long)fs);
#endif

	if (fs != (struct rawfs_file *)0)
		free(fs, sizeof(*fs));

	return (0);
}

int
rawfs_read(struct open_file *f, void *start, size_t size, size_t *resid)
{
	struct rawfs_file *fs = (struct rawfs_file *)f->f_fsdata;
	char *addr = start;
	int error = 0;
	size_t csize;

#ifdef DEBUG_RAWFS
	printf("rawfs_read: file=0x%x, start=0x%x, size=%d, resid=0x%x\n",
	    (u_long)f, (u_long)start, size, resid);
	printf("            fs=0x%x\n", (u_long)fs);
#endif

	while (size != 0) {

		if (fs->fs_len == 0)
			if ((error = rawfs_get_block(f)) != 0)
				break;

		if (fs->fs_len <= 0)
			break;	/* EOF */

		csize = size;
		if (csize > fs->fs_len)
			csize = fs->fs_len;

		bcopy(fs->fs_ptr, addr, csize);
		fs->fs_ptr += csize;
		fs->fs_len -= csize;
		addr += csize;
		size -= csize;
	}
	if (resid)
		*resid = size;
	return (error);
}

int
rawfs_write(struct open_file *f, void *start, size_t size, size_t *resid)
{
#ifdef	DEBUG_RAWFS
	printf("rawfs_write: YOU'RE NOT SUPPOSED TO GET HERE!\n");
#endif
	return (EROFS);
}

off_t
rawfs_seek(struct open_file *f, off_t offset, int where)
{
#ifdef	DEBUG_RAWFS
	printf("rawfs_seek: YOU'RE NOT SUPPOSED TO GET HERE!\n");
#endif
	return (EFTYPE);
}

int
rawfs_stat(struct open_file *f, struct stat *sb)
{
#ifdef	DEBUG_RAWFS
	printf("rawfs_stat: I'll let you live only because of exec.c\n");
#endif
	/*
	 * Clear out the stat buffer so that the uid check
	 * won't fail.  See sys/lib/libsa/exec.c
	 */
	bzero(sb, sizeof(*sb));

	return (EFTYPE);
}

/*
 * Read a block from the underlying stream device
 * (In our case, a tape drive.)
 */
static int
rawfs_get_block(struct open_file *f)
{
	struct rawfs_file *fs;
	size_t len;
	int error;

	fs = (struct rawfs_file *)f->f_fsdata;
	fs->fs_ptr = fs->fs_buf;

	twiddle();
#ifdef DEBUG_RAWFS
	printf("rawfs_get_block: calling strategy\n");
#endif
	error = f->f_dev->dv_strategy(f->f_devdata, F_READ,
		fs->fs_nextblk, RAWFS_BSIZE, fs->fs_buf, &len);
#ifdef DEBUG_RAWFS
	printf("rawfs_get_block: strategy returned %d\n", error);
#endif

	if (!error) {
		fs->fs_len = len;
		fs->fs_nextblk += (RAWFS_BSIZE / DEV_BSIZE);
	}

	return (error);
}
@


1.5
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.4 2006/08/17 06:31:10 miod Exp $	*/
@


1.4
log
@Large cleanup of the bootblocks, including ansi protos and de-register,
removal of unused hil stuff, oversimplification of the stand ite code
(including dio frame buffer common code factorization), and sgc frame
buffer console support, at last.

This shaves ~1800 bytes off SYS_UBOOT and ~500 bytes of SYS_CDBOOT
despite the addition of the sgc code.

Tested on dca, hyper, topcat and sti.
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.3 2006/01/18 14:15:12 deraadt Exp $	*/
d56 1
a56 1
	daddr_t		fs_nextblk;	/* block number to read next */
@


1.3
log
@more size_t vs u_int fallout.. i guess the last
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2 2002/03/14 01:26:31 millert Exp $	*/
d66 1
a66 3
rawfs_open(path, f)
	char *path;
	struct open_file *f;
d88 1
a88 2
rawfs_close(f)
	struct open_file *f;
d106 1
a106 5
rawfs_read(f, start, size, resid)
	struct open_file *f;
	void *start;
	size_t size;
	size_t *resid;
d144 1
a144 5
rawfs_write(f, start, size, resid)
	struct open_file *f;
	void *start;
	size_t size;
	size_t *resid;	/* out */
d153 1
a153 4
rawfs_seek(f, offset, where)
	struct open_file *f;
	off_t offset;
	int where;
d162 1
a162 3
rawfs_stat(f, sb)
	struct open_file *f;
	struct stat *sb;
d181 1
a181 2
rawfs_get_block(f)
	struct open_file *f;
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.1 1997/07/14 08:14:48 downsj Exp $	*/
d112 2
a113 2
	u_int size;
	u_int *resid;
d201 2
a202 1
	int error, len;
@


1.1
log
@The grand reorganization, OpenBSD style.

Lossely based on the NetBSD reorg, but much improved upon, simpler, and doesn't
scribble needless junk into the bootblocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2 1997/07/13 07:21:51 downsj Exp $	*/
d63 1
a63 1
rawfs_get_block __P((struct open_file *));
@


1.1.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.1 1997/07/14 08:14:48 downsj Exp $	*/
d63 1
a63 1
rawfs_get_block(struct open_file *);
@


1.1.12.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 1
rawfs_get_block(struct open_file *);
@


