head	1.27;
access;
symbols
	OPENBSD_5_5:1.26.0.16
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.12
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.8
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.6
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.6
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.24.0.6
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.4
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.23.0.8
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.23.0.6
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.4
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.2
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.22.0.4
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.2
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.21.0.6
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.20
	OPENBSD_3_3:1.20.0.4
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	UBC_SYNC_B:1.20
	UBC:1.18.0.2
	UBC_BASE:1.18
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.11.0.8
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.6
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.2
	SMP_BASE:1.11
	kame_19991208:1.10
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.26;

1.26
date	2010.12.26.15.40.59;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2009.06.10.15.58.49;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2007.09.08.09.28.49;	author martin;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.28.09.07.48;	author martin;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.30.21.26.15;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.02.23.27.45;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.04.28.15.17.07;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.12.06.18.53.01;	author millert;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.11.06.19.53.14;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.25.13.25.31;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.27.04.05.45;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.05.20.56.34;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.04.22.48.59;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.12.14.18.24.02;	author downsj;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	99.11.22.19.21.57;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	99.09.03.18.00.42;	author art;	state Exp;
branches;
next	1.8;

1.8
date	98.11.20.06.58.51;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	98.08.31.17.42.28;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.06.08.02.06;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	97.04.16.11.56.29;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.03.26.08.32.43;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.02.10.11.13.31;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.01.12.15.13.24;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.23;	author deraadt;	state Exp;
branches;
next	;

1.11.2.1
date	2001.07.04.10.15.46;	author niklas;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2001.10.31.02.52.46;	author nate;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2001.11.13.21.00.51;	author niklas;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2002.03.06.00.57.22;	author niklas;	state Exp;
branches;
next	1.11.2.5;

1.11.2.5
date	2002.03.28.10.07.18;	author niklas;	state Exp;
branches;
next	1.11.2.6;

1.11.2.6
date	2003.03.27.23.19.21;	author niklas;	state Exp;
branches;
next	1.11.2.7;

1.11.2.7
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	;

1.18.2.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: mem.c,v 1.26 2010/12/26 15:40:59 miod Exp $	*/
/*	$NetBSD: mem.c,v 1.25 1999/03/27 00:30:06 mycroft Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/conf.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/uio.h>

#include <machine/cpu.h>

#include <uvm/uvm_extern.h>

extern u_int lowram;
extern char *extiobase;
extern int eiomapsize;
static caddr_t devzeropage;

#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);

/*ARGSUSED*/
int
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 12:
			return (0);
		default:
			return (ENXIO);
	}
}

/*ARGSUSED*/
int
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	return (0);
}

/*ARGSUSED*/
int
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	vaddr_t o, v;
	int c;
	struct iovec *iov;
	int error = 0;
	static int physlock;
	vm_prot_t prot;

	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
	}
	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;

			/*
			 * Only allow reads in physical RAM.
			 */
			if (v >= 0xFFFFFFFC || v < lowram) {
				error = EFAULT;
				goto unlock;
			}

			prot = uio->uio_rw == UIO_READ ? VM_PROT_READ :
			    VM_PROT_WRITE;
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
			    trunc_page(v), prot, prot|PMAP_WIRED);
			pmap_update(pmap_kernel());
			o = uio->uio_offset & PGOFSET;
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
			pmap_update(pmap_kernel());
			continue;

/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = min(iov->iov_len, MAXPHYS);

			if (v > HP300_DIRECT_BASE) {
				/*
				 * Direct mapping: only allow access to
				 * physical memory.
				 */
				if (v >= 0xfffffffc || v < lowram)
					return (EFAULT);
			} else {
				/*
				 * Translated mapping: check for permission.
				 */
				if (!uvm_kernacc((caddr_t)v, c,
				    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
					return (EFAULT);
			}

			/*
			 * Don't allow reading intio or dio
			 * device space.  This could lead to
			 * corruption of device registers.
			 */
			if (ISIIOVA(v) ||
			    ((caddr_t)v >= extiobase &&
			    (caddr_t)v < (extiobase + (eiomapsize * NBPG))))
				return (EFAULT);

			error = uiomove((caddr_t)v, c, uio);
			continue;

/* minor device 2 is EOF/RATHOLE */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}
			/*
			 * On the first call, allocate and zero a page
			 * of memory for use with /dev/zero.
			 */
			if (devzeropage == NULL) {
				devzeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP,
					M_WAITOK | M_ZERO);
			}
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomove(devzeropage, c, uio);
			continue;

		default:
			return (ENXIO);
		}
		if (error)
			break;
		iov->iov_base = (caddr_t)iov->iov_base + c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	if (minor(dev) == 0) {
unlock:
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
	}
	return (error);
}

paddr_t
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	/*
	 * /dev/mem is the only one that makes sense through this
	 * interface.  For /dev/kmem any physaddr we return here
	 * could be transient and hence incorrect or invalid at
	 * a later time.  /dev/null just doesn't make any sense
	 * and /dev/zero is a hack that is handled via the default
	 * pager in mmap().
	 */
	if (minor(dev) != 0)
		return (-1);

	/*
	 * Allow access only in RAM.
	 */
	if ((u_int)off < lowram || (u_int)off >= 0xFFFFFFFC)
		return (-1);
	return (off);
}

int
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EOPNOTSUPP);
}
@


1.26
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.25 2009/06/10 15:58:49 miod Exp $	*/
@


1.25
log
@Allow /dev/kmem reads in the direct mapping region where there is
corresponding physical memory; makes procmap(8) happy on hp300.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.24 2007/09/08 09:28:49 martin Exp $	*/
d256 1
a256 1
	return (atop(off));
@


1.24
log
@use M_ZERO.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.23 2005/10/28 09:07:48 martin Exp $	*/
d160 16
a175 3
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
@


1.23
log
@convert the last m68k_btop() and m68k_ptob() macros
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.22 2004/12/30 21:26:15 miod Exp $	*/
d195 2
a196 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(devzeropage, PAGE_SIZE);
@


1.22
log
@Kill the EIOMAPSIZE and instead, dynamically size the external I/O map,
based on the DIO-II space probing results.

This does not win much for now, but this will be very useful for SGC bus
support (coming soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.21 2003/06/02 23:27:45 millert Exp $	*/
d243 1
a243 1
	return (m68k_btop((u_int)off));
@


1.21
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.20 2002/04/28 15:17:07 miod Exp $	*/
d58 1
d171 1
a171 1
			    (caddr_t)v < (extiobase + (EIOMAPSIZE * NBPG))))
@


1.20
log
@Use the prototypes defined via cdev_decl() macros, instead of rolling our
own; thus fix a lot of foo_open(), foo_close() and foo_ioctl() prototypes
in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.19 2002/03/14 01:26:31 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.19
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2001/12/06 18:53:01 millert Exp $	*/
d64 3
a66 5
int	mmopen(dev_t, int, int);
int	mmclose(dev_t, int, int);
int	mmrw(dev_t, struct uio *, int);
paddr_t	mmmmap(dev_t, off_t, int);
int	mmioctl(dev_t, u_long, caddr_t, int, struct proc *);
d70 1
a70 1
mmopen(dev, flag, mode)
d73 1
d89 1
a89 1
mmclose(dev, flag, mode)
d92 1
@


1.18
log
@Sprinkle pmap_update() calls (based on NetBSD)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2001/11/06 19:53:14 miod Exp $	*/
d64 5
a68 5
int	mmopen __P((dev_t, int, int));
int	mmclose __P((dev_t, int, int));
int	mmrw __P((dev_t, struct uio *, int));
paddr_t	mmmmap __P((dev_t, off_t, int));
int	mmioctl __P((dev_t, u_long, caddr_t, int, struct proc *));
@


1.18.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2001/12/06 18:53:01 millert Exp $	*/
d64 5
a68 3
#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
d72 1
a72 1
mmopen(dev, flag, mode, p)
a74 1
	struct proc *p;
d90 1
a90 1
mmclose(dev, flag, mode, p)
a92 1
	struct proc *p;
@


1.17
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2001/11/01 12:13:46 art Exp $	*/
d150 1
d156 1
@


1.16
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2001/07/25 13:25:31 art Exp $	*/
a57 1
#include <vm/vm.h>
@


1.15
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/06/27 04:05:45 art Exp $	*/
d68 1
a68 1
int	mmmmap __P((dev_t, int, int));
d223 1
a223 1
int
d226 2
a227 1
	int off, prot;
@


1.14
log
@no more old VM
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/05/05 20:56:34 art Exp $	*/
d150 1
a150 1
			    trunc_page(v), prot, TRUE, prot);
@


1.13
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2001/05/04 22:48:59 aaron Exp $	*/
a58 1
#if defined(UVM)
a59 1
#endif
a161 1
#if defined(UVM)
a164 5
#else
			if (!kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#endif
@


1.12
log
@Substantial update from NetBSD, most notably gives us UVM support; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 1999/12/14 18:24:02 downsj Exp $	*/
d205 2
a206 2
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(devzeropage, CLBYTES);
d208 1
a208 1
			c = min(iov->iov_len, CLBYTES);
@


1.11
log
@Compile.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.10 1999/11/22 19:21:57 matthieu Exp $	*/
/*	$NetBSD: mem.c,v 1.17 1997/06/10 18:51:31 veego Exp $	*/
d59 3
d108 1
a108 1
	vm_offset_t o, v;
d113 1
d149 4
a152 3
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), uio->uio_rw == UIO_READ ?
			    VM_PROT_READ : VM_PROT_WRITE, TRUE, 0);
d156 2
a157 2
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + NBPG);
d164 5
d172 1
d217 1
a217 1
		iov->iov_base += c;
@


1.11.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mem.c,v 1.25 1999/03/27 00:30:06 mycroft Exp $	*/
a58 1
#include <uvm/uvm_extern.h>
d105 1
a105 1
	vaddr_t o, v;
a109 1
	vm_prot_t prot;
d145 3
a147 4
			prot = uio->uio_rw == UIO_READ ? VM_PROT_READ :
			    VM_PROT_WRITE;
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
			    trunc_page(v), prot, TRUE, prot);
d151 2
a152 2
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
d159 1
a159 1
			if (!uvm_kernacc((caddr_t)v, c,
d194 2
a195 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(devzeropage, PAGE_SIZE);
d197 1
a197 1
			c = min(iov->iov_len, PAGE_SIZE);
d206 1
a206 1
		iov->iov_base = (caddr_t)iov->iov_base + c;
@


1.11.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11.2.1 2001/07/04 10:15:46 niklas Exp $	*/
d150 1
a150 1
			    trunc_page(v), prot, prot|PMAP_WIRED);
@


1.11.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
d68 1
a68 1
paddr_t	mmmmap __P((dev_t, off_t, int));
d223 1
a223 1
paddr_t
d226 1
a226 2
	off_t off;
	int prot;
@


1.11.2.4
log
@Merge in trunk
@
text
@a149 1
			pmap_update(pmap_kernel());
a154 1
			pmap_update(pmap_kernel());
@


1.11.2.5
log
@Merge in -current from about a week ago
@
text
@d64 5
a68 5
int	mmopen(dev_t, int, int);
int	mmclose(dev_t, int, int);
int	mmrw(dev_t, struct uio *, int);
paddr_t	mmmmap(dev_t, off_t, int);
int	mmioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.11.2.6
log
@Sync the SMP branch with 3.3
@
text
@d64 5
a68 3
#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
d72 1
a72 1
mmopen(dev, flag, mode, p)
a74 1
	struct proc *p;
d90 1
a90 1
mmclose(dev, flag, mode, p)
a92 1
	struct proc *p;
@


1.11.2.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11.2.6 2003/03/27 23:19:21 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.10
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 1999/09/03 18:00:42 art Exp $	*/
d68 1
@


1.9
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 1998/11/20 06:58:51 downsj Exp $	*/
d241 11
@


1.8
log
@Add cast, from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 1998/08/31 17:42:28 millert Exp $	*/
d146 1
a146 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
@


1.7
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 1997/07/06 08:02:06 downsj Exp $	*/
d238 1
a238 1
	if ((unsigned)off < lowram || (unsigned)off >= 0xFFFFFFFC)
d240 1
a240 1
	return (m68k_btop(off));
@


1.6
log
@Sync with changes from NetBSD, up to 970705.

This includes all of the new frodo drivers, from Michael Smith, hacked up
by Jason R. Thorpe; other changes, mostly configuration and/or m68k
abstraction related, from Thorpe.  A few others of my own.

This compiles and runs, have not yet tested Domain kbd or apci ports.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1997/04/16 11:56:29 downsj Exp $	*/
d76 9
a84 1
	return (0);
@


1.5
log
@Merge portions of NetBSD up to 970415.

This includes:
	* All of the prototyping and KNF changes.
	* The new interrupt system.
	* Portions of the Domain Keyboard support from Mike Smith.

This does not include:
	* m68k changes, namely generic dumps.

Various sundry changes and fixes by me.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.4 1997/03/26 08:32:43 downsj Exp $	*/
/*	$NetBSD: mem.c,v 1.16 1997/04/01 03:12:25 scottr Exp $	*/
d232 1
a232 1
	return (hp300_btop(off));
@


1.4
log
@Merge changes from NetBSD, up to 3/19/97; undoes some local changes.
Changed to match new arch/m68k code.
genassym.cf is currently just a place holder.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.3 1997/02/10 11:13:31 downsj Exp $	*/
/*	$NetBSD: mem.c,v 1.15 1997/03/15 23:30:12 thorpej Exp $	*/
d49 2
d52 2
a53 2
#include <sys/buf.h>
#include <sys/systm.h>
a54 1
#include <sys/malloc.h>
d64 5
d96 3
a98 3
	register vm_offset_t o, v;
	register int c;
	register struct iovec *iov;
@


1.3
log
@hp300 portion of the copypage/zeropage/mappedcopy changes from NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.2 1997/01/12 15:13:24 downsj Exp $	*/
/*	$NetBSD: mem.c,v 1.14 1997/02/02 07:59:41 thorpej Exp $	*/
d60 1
d121 4
a124 2
#ifndef DEBUG
			/* allow reads only in RAM (except for DEBUG) */
d129 1
a129 1
#endif
d147 11
a175 3
			 *
			 * XXX on the hp300 we already know where there
			 * is a global zeroed page, the null segment table.
a177 4
#if CLBYTES == NBPG
				extern caddr_t Segtabzero;
				devzeropage = Segtabzero;
#else
a180 1
#endif
d220 1
a222 3
	 *
	 * XXX could be extended to allow access to IO space but must
	 * be very careful.
@


1.2
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mem.c,v 1.13 1995/04/10 13:10:51 mycroft Exp $	*/
d60 1
a60 1
caddr_t zeropage;
d166 1
a166 1
			if (zeropage == NULL) {
d169 1
a169 1
				zeropage = Segtabzero;
d171 1
a171 1
				zeropage = (caddr_t)
d173 1
a173 1
				bzero(zeropage, CLBYTES);
d177 1
a177 1
			error = uiomove(zeropage, c, uio);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
