head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.40
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.36
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.34
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.32
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.30
	OPENBSD_5_0:1.10.0.28
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.26
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.24
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.20
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.22
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.18
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.16
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.24
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.6.0.22
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.20
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.18
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.16
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.14
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.12
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.11
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2005.01.14.22.39.28;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.27.16.16.22;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.04.22.08.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.16.23.42.20;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	97.09.23.07.09.54;	author downsj;	state Exp;
branches
	1.6.12.1
	1.6.22.1;
next	1.5;

1.5
date	97.07.06.08.02.09;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.12.15.13.29;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.11.47.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.25.06.37.08;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.24;	author deraadt;	state Exp;
branches;
next	;

1.6.12.1
date	2003.03.27.23.19.21;	author niklas;	state Exp;
branches;
next	1.6.12.2;

1.6.12.2
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	1.6.12.3;

1.6.12.3
date	2004.02.19.10.48.39;	author niklas;	state Exp;
branches;
next	;

1.6.22.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@|	$OpenBSD: vectors.s,v 1.10 2005/01/14 22:39:28 miod Exp $
|	$NetBSD: vectors.s,v 1.12 1997/07/14 19:18:32 thorpej Exp $

| Copyright (c) 1997 Jason R. Thorpe.  All rights reserved.
| Copyright (c) 1988 University of Utah
| Copyright (c) 1990, 1993
|	The Regents of the University of California.  All rights reserved.
|
| Redistribution and use in source and binary forms, with or without
| modification, are permitted provided that the following conditions
| are met:
| 1. Redistributions of source code must retain the above copyright
|    notice, this list of conditions and the following disclaimer.
| 2. Redistributions in binary form must reproduce the above copyright
|    notice, this list of conditions and the following disclaimer in the
|    documentation and/or other materials provided with the distribution.
| 3. Neither the name of the University nor the names of its contributors
|    may be used to endorse or promote products derived from this software
|    without specific prior written permission.
|
| THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
| ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
| IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
| ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
| FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
| DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
| OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
| HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
| LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
| OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
| SUCH DAMAGE.
|
|	@@(#)vectors.s	8.2 (Berkeley) 1/21/94
|

#define	BADTRAP16	\
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap) ; \
	VECTOR(badtrap) ; VECTOR(badtrap)

	/*
	 * bus error and address error vectors are initialized
	 * in locore.s once we know our CPU type.
	 */

	.data
GLOBAL(vectab)
	VECTOR_UNUSED		/* 0: NOT USED (reset SSP) */
	VECTOR_UNUSED		/* 1: NOT USED (reset PC) */
	VECTOR_UNUSED		/* 2: bus error */
	VECTOR_UNUSED		/* 3: address error */
	VECTOR(illinst)		/* 4: illegal instruction */
	VECTOR(zerodiv)		/* 5: zero divide */
	VECTOR(chkinst)		/* 6: CHK instruction */
	VECTOR(trapvinst)	/* 7: TRAPV instruction */
	VECTOR(privinst)	/* 8: privilege violation */
	VECTOR(trace)		/* 9: trace */
	VECTOR(illinst)		/* 10: line 1010 emulator */
	VECTOR(fpfline)		/* 11: line 1111 emulator */
	VECTOR(badtrap)		/* 12: unassigned, reserved */
	VECTOR(coperr)		/* 13: coprocessor protocol violation */
	VECTOR(fmterr)		/* 14: format error */
	VECTOR(badtrap)		/* 15: uninitialized interrupt vector */
	VECTOR(badtrap)		/* 16: unassigned, reserved */
	VECTOR(badtrap)		/* 17: unassigned, reserved */
	VECTOR(badtrap)		/* 18: unassigned, reserved */
	VECTOR(badtrap)		/* 19: unassigned, reserved */
	VECTOR(badtrap)		/* 20: unassigned, reserved */
	VECTOR(badtrap)		/* 21: unassigned, reserved */
	VECTOR(badtrap)		/* 22: unassigned, reserved */
	VECTOR(badtrap)		/* 23: unassigned, reserved */
	VECTOR(spurintr)	/* 24: spurious interrupt */
	VECTOR(intrhand)	/* 25: level 1 interrupt autovector */
	VECTOR(intrhand)	/* 26: level 2 interrupt autovector */
	VECTOR(intrhand)	/* 27: level 3 interrupt autovector */
	VECTOR(intrhand)	/* 28: level 4 interrupt autovector */
	VECTOR(intrhand)	/* 29: level 5 interrupt autovector */
	VECTOR(lev6intr)	/* 30: level 6 interrupt autovector */
	VECTOR(lev7intr)	/* 31: level 7 interrupt autovector */
	VECTOR(trap0)		/* 32: syscalls */
	VECTOR(trap1)		/* 33: sigreturn syscall or breakpoint */
	VECTOR(trap2)		/* 34: breakpoint or sigreturn syscall */
	VECTOR(illinst)		/* 35: TRAP instruction vector */
	VECTOR(illinst)		/* 36: TRAP instruction vector */
	VECTOR(illinst)		/* 37: TRAP instruction vector */
	VECTOR(illinst)		/* 38: TRAP instruction vector */
	VECTOR(illinst)		/* 39: TRAP instruction vector */
	VECTOR(illinst)		/* 40: TRAP instruction vector */
	VECTOR(illinst)		/* 41: TRAP instruction vector */
	VECTOR(illinst)		/* 42: TRAP instruction vector */
	VECTOR(illinst)		/* 43: TRAP instruction vector */
	VECTOR(trap12)		/* 44: TRAP instruction vector */
	VECTOR(illinst)		/* 45: TRAP instruction vector */
	VECTOR(illinst)		/* 46: TRAP instruction vector */
	VECTOR(trap15)		/* 47: TRAP instruction vector */

GLOBAL(fpvect_tab)
	VECTOR(fpfault)		/* 48: FPCP branch/set on unordered cond */
	VECTOR(fpfault)		/* 49: FPCP inexact result */
	VECTOR(fpfault)		/* 50: FPCP divide by zero */
	VECTOR(fpfault)		/* 51: FPCP underflow */
	VECTOR(fpfault)		/* 52: FPCP operand error */
	VECTOR(fpfault)		/* 53: FPCP overflow */
	VECTOR(fpfault)		/* 54: FPCP signalling NAN */
GLOBAL(fpvect_end)

	VECTOR(fpunsupp)	/* 55: FPCP unimplemented data type */
	VECTOR(badtrap)		/* 56: unassigned, reserved */
	VECTOR(badtrap)		/* 57: unassigned, reserved */
	VECTOR(badtrap)		/* 58: unassigned, reserved */
	VECTOR(badtrap)		/* 59: unassigned, reserved */
	VECTOR(badtrap)		/* 60: unassigned, reserved */
	VECTOR(badtrap)		/* 61: unassigned, reserved */
	VECTOR(badtrap)		/* 62: unassigned, reserved */
	VECTOR(badtrap)		/* 63: unassigned, reserved */

	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */

#ifdef FPSP
	/*
	 * 68040: this chunk of vectors is copied into the fpfault zone
	 */
GLOBAL(fpsp_tab)
	ASVECTOR(fpsp_bsun)	/* 48: FPCP branch/set on unordered cond */
	ASVECTOR(inex)		/* 49: FPCP inexact result */
	ASVECTOR(dz)		/* 50: FPCP divide by zero */
	ASVECTOR(fpsp_unfl)	/* 51: FPCP underflow */
	ASVECTOR(fpsp_operr)	/* 52: FPCP operand error */
	ASVECTOR(fpsp_ovfl)	/* 53: FPCP overflow */
	ASVECTOR(fpsp_snan)	/* 54: FPCP signalling NAN */
#endif /* FPSP */
@


1.10
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.9 2004/01/27 16:16:22 miod Exp $
@


1.9
log
@Only install the fpsp exception vectors if the cpu is a 68040.
Thus, it becomes unnecessary to check for the cpu type in the exception
handlers, saving a few cycles and a few bytes.

Tested by various people on hp300, mac68k, mvme68k, 68040 and non-68040.
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.8 2003/06/04 22:08:14 deraadt Exp $
d78 1
a78 1
	VECTOR(lev1intr)	/* 25: level 1 interrupt autovector */
@


1.8
log
@Delete UCB term 3.  When there are other copyright owners, we affirm
that we can see no legal situation under which they could require that
term to remain (ie. This is equivelant to us taking the old UCB file,
removing term 3 as specified by UCB, then re-applying each diff
afterwards from the various authors)
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.7 2002/04/16 23:42:20 miod Exp $
d101 10
a110 17
#ifdef FPSP
 	ASVECTOR(bsun)		/* 48: FPCP branch/set on unordered cond */
 	ASVECTOR(inex)		/* 49: FPCP inexact result */
 	ASVECTOR(dz)		/* 50: FPCP divide by zero */
 	ASVECTOR(unfl)		/* 51: FPCP underflow */
 	ASVECTOR(operr)		/* 52: FPCP operand error */
 	ASVECTOR(ovfl)		/* 53: FPCP overflow */
 	ASVECTOR(snan)		/* 54: FPCP signalling NAN */
#else
 	VECTOR(fpfault)		/* 48: FPCP branch/set on unordered cond */
 	VECTOR(fpfault)		/* 49: FPCP inexact result */
 	VECTOR(fpfault)		/* 50: FPCP divide by zero */
 	VECTOR(fpfault)		/* 51: FPCP underflow */
 	VECTOR(fpfault)		/* 52: FPCP operand error */
 	VECTOR(fpfault)		/* 53: FPCP overflow */
 	VECTOR(fpfault)		/* 54: FPCP signalling NAN */
#endif
d134 14
@


1.7
log
@Same .text vs .data issue as for mvme68k.
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.6 1997/09/23 07:09:54 downsj Exp $
d17 1
a17 5
| 3. All advertising materials mentioning features or use of this software
|    must display the following acknowledgement:
|	This product includes software developed by the University of
|	California, Berkeley and its contributors.
| 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Some NetBSD changes, up to NETBSD_CURRENT_970921.
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.5 1997/07/06 08:02:09 downsj Exp $
d55 1
a55 1
	.text
@


1.6.12.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
|	$OpenBSD$
d55 1
a55 1
	.data
@


1.6.12.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.6.12.1 2003/03/27 23:19:21 niklas Exp $
d17 5
a21 1
| 3. Neither the name of the University nor the names of its contributors
@


1.6.12.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
|	$OpenBSD$
d101 17
a117 10

GLOBAL(fpvect_tab)
	VECTOR(fpfault)		/* 48: FPCP branch/set on unordered cond */
	VECTOR(fpfault)		/* 49: FPCP inexact result */
	VECTOR(fpfault)		/* 50: FPCP divide by zero */
	VECTOR(fpfault)		/* 51: FPCP underflow */
	VECTOR(fpfault)		/* 52: FPCP operand error */
	VECTOR(fpfault)		/* 53: FPCP overflow */
	VECTOR(fpfault)		/* 54: FPCP signalling NAN */
GLOBAL(fpvect_end)
a140 14

#ifdef FPSP
	/*
	 * 68040: this chunk of vectors is copied into the fpfault zone
	 */
GLOBAL(fpsp_tab)
	ASVECTOR(fpsp_bsun)	/* 48: FPCP branch/set on unordered cond */
	ASVECTOR(inex)		/* 49: FPCP inexact result */
	ASVECTOR(dz)		/* 50: FPCP divide by zero */
	ASVECTOR(fpsp_unfl)	/* 51: FPCP underflow */
	ASVECTOR(fpsp_operr)	/* 52: FPCP operand error */
	ASVECTOR(fpsp_ovfl)	/* 53: FPCP overflow */
	ASVECTOR(fpsp_snan)	/* 54: FPCP signalling NAN */
#endif /* FPSP */
@


1.6.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
|	$OpenBSD: vectors.s,v 1.6 1997/09/23 07:09:54 downsj Exp $
d55 1
a55 1
	.data
@


1.5
log
@Sync with changes from NetBSD, up to 970705.

This includes all of the new frodo drivers, from Michael Smith, hacked up
by Jason R. Thorpe; other changes, mostly configuration and/or m68k
abstraction related, from Thorpe.  A few others of my own.

This compiles and runs, have not yet tested Domain kbd or apci ports.
@
text
@d1 2
a2 2
|	$OpenBSD: vectors.s,v 1.4 1997/01/12 15:13:29 downsj Exp $
|	$NetBSD: vectors.s,v 1.11 1997/04/25 02:16:38 thorpej Exp $
d50 5
d59 2
a60 2
	VECTOR(buserr)		/* 2: bus error */
	VECTOR(addrerr)		/* 3: address error */
@


1.4
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 2
a2 2
|	$OpenBSD$
|	$NetBSD: vectors.s,v 1.10 1996/10/14 22:11:18 thorpej Exp $
d4 1
d40 10
d51 49
a99 59
	.globl	_buserr,_addrerr
	.globl	_illinst,_zerodiv,_chkinst,_trapvinst,_privinst,_trace
	.globl	_badtrap
	.globl	_spurintr,_lev1intr,_lev6intr,_lev7intr
	.globl	_intrhand
	.globl	_trap0,_trap1,_trap2,_trap15
	.globl	_fpfline, _fpunsupp
	.globl	_trap12

	.globl	_vectab
_vectab:
	.long	0		/* 0: NOT USED (reset SSP) */
	.long	0		/* 1: NOT USED (reset PC) */
	.long	_buserr		/* 2: bus error */
	.long	_addrerr	/* 3: address error */
	.long	_illinst	/* 4: illegal instruction */
	.long	_zerodiv	/* 5: zero divide */
	.long	_chkinst	/* 6: CHK instruction */
	.long	_trapvinst	/* 7: TRAPV instruction */
	.long	_privinst	/* 8: privilege violation */
	.long	_trace		/* 9: trace */
	.long	_illinst	/* 10: line 1010 emulator */
	.long	_fpfline	/* 11: line 1111 emulator */
	.long	_badtrap	/* 12: unassigned, reserved */
	.long	_coperr		/* 13: coprocessor protocol violation */
	.long	_fmterr		/* 14: format error */
	.long	_badtrap	/* 15: uninitialized interrupt vector */
	.long	_badtrap	/* 16: unassigned, reserved */
	.long	_badtrap	/* 17: unassigned, reserved */
	.long	_badtrap	/* 18: unassigned, reserved */
	.long	_badtrap	/* 19: unassigned, reserved */
	.long	_badtrap	/* 20: unassigned, reserved */
	.long	_badtrap	/* 21: unassigned, reserved */
	.long	_badtrap	/* 22: unassigned, reserved */
	.long	_badtrap	/* 23: unassigned, reserved */
	.long	_spurintr	/* 24: spurious interrupt */
	.long	_lev1intr	/* 25: level 1 interrupt autovector */
	.long	_intrhand	/* 26: level 2 interrupt autovector */
	.long	_intrhand	/* 27: level 3 interrupt autovector */
	.long	_intrhand	/* 28: level 4 interrupt autovector */
	.long	_intrhand	/* 29: level 5 interrupt autovector */
	.long	_lev6intr	/* 30: level 6 interrupt autovector */
	.long	_lev7intr	/* 31: level 7 interrupt autovector */
	.long	_trap0		/* 32: syscalls */
	.long	_trap1		/* 33: sigreturn syscall or breakpoint */
	.long	_trap2		/* 34: breakpoint or sigreturn syscall */
	.long	_illinst	/* 35: TRAP instruction vector */
	.long	_illinst	/* 36: TRAP instruction vector */
	.long	_illinst	/* 37: TRAP instruction vector */
	.long	_illinst	/* 38: TRAP instruction vector */
	.long	_illinst	/* 39: TRAP instruction vector */
	.long	_illinst	/* 40: TRAP instruction vector */
	.long	_illinst	/* 41: TRAP instruction vector */
	.long	_illinst	/* 42: TRAP instruction vector */
	.long	_illinst	/* 43: TRAP instruction vector */
	.long	_trap12		/* 44: TRAP instruction vector */
	.long	_illinst	/* 45: TRAP instruction vector */
	.long	_illinst	/* 46: TRAP instruction vector */
	.long	_trap15		/* 47: TRAP instruction vector */
d101 7
a107 8
	.globl	bsun, inex, dz, unfl, operr, ovfl, snan
 	.long	bsun		/* 48: FPCP branch/set on unordered cond */
 	.long	inex		/* 49: FPCP inexact result */
 	.long	dz		/* 50: FPCP divide by zero */
 	.long	unfl		/* 51: FPCP underflow */
 	.long	operr		/* 52: FPCP operand error */
 	.long	ovfl		/* 53: FPCP overflow */
 	.long	snan		/* 54: FPCP signalling NAN */
d109 7
a115 8
	.globl	_fpfault
 	.long	_fpfault	/* 48: FPCP branch/set on unordered cond */
 	.long	_fpfault	/* 49: FPCP inexact result */
 	.long	_fpfault	/* 50: FPCP divide by zero */
 	.long	_fpfault	/* 51: FPCP underflow */
 	.long	_fpfault	/* 52: FPCP operand error */
 	.long	_fpfault	/* 53: FPCP overflow */
 	.long	_fpfault	/* 54: FPCP signalling NAN */
d118 10
a127 13
	.long	_fpunsupp	/* 55: FPCP unimplemented data type */
	.long	_badtrap	/* 56: unassigned, reserved */
	.long	_badtrap	/* 57: unassigned, reserved */
	.long	_badtrap	/* 58: unassigned, reserved */
	.long	_badtrap	/* 59: unassigned, reserved */
	.long	_badtrap	/* 60: unassigned, reserved */
	.long	_badtrap	/* 61: unassigned, reserved */
	.long	_badtrap	/* 62: unassigned, reserved */
	.long	_badtrap	/* 63: unassigned, reserved */
#define BADTRAP16	.long	_badtrap,_badtrap,_badtrap,_badtrap,\
				_badtrap,_badtrap,_badtrap,_badtrap,\
				_badtrap,_badtrap,_badtrap,_badtrap,\
				_badtrap,_badtrap,_badtrap,_badtrap
@


1.3
log
@sync to 0622
@
text
@d1 2
a2 1
|	$NetBSD: vectors.s,v 1.9 1996/05/18 00:52:53 thorpej Exp $
d51 1
a51 1
	.long	0x4ef80400	/* 0: jmp 0x400:w (unused reset SSP) */
@


1.2
log
@sync w/ Net 960424
@
text
@d1 1
a1 1
|	$NetBSD: vectors.s,v 1.7 1996/02/14 02:57:07 thorpej Exp $
d48 2
a49 1
Lvectab:
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
|	$NetBSD: vectors.s,v 1.6 1994/10/26 07:26:03 cgd Exp $
d42 2
a43 2
	.globl	_spurintr,_lev1intr,_lev2intr,_lev3intr
	.globl	_lev4intr,_lev5intr,_lev6intr,_lev7intr
d75 4
a78 4
	.long	_lev2intr	/* 26: level 2 interrupt autovector */
	.long	_lev3intr	/* 27: level 3 interrupt autovector */
	.long	_lev4intr	/* 28: level 4 interrupt autovector */
	.long	_lev5intr	/* 29: level 5 interrupt autovector */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
