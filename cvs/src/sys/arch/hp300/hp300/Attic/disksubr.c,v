head	1.52;
access;
symbols
	OPENBSD_5_5:1.51.0.14
	OPENBSD_5_5_BASE:1.51
	OPENBSD_5_4:1.51.0.10
	OPENBSD_5_4_BASE:1.51
	OPENBSD_5_3:1.51.0.8
	OPENBSD_5_3_BASE:1.51
	OPENBSD_5_2:1.51.0.6
	OPENBSD_5_2_BASE:1.51
	OPENBSD_5_1_BASE:1.51
	OPENBSD_5_1:1.51.0.4
	OPENBSD_5_0:1.51.0.2
	OPENBSD_5_0_BASE:1.51
	OPENBSD_4_9:1.48.0.2
	OPENBSD_4_9_BASE:1.48
	OPENBSD_4_8:1.47.0.4
	OPENBSD_4_8_BASE:1.47
	OPENBSD_4_7:1.47.0.2
	OPENBSD_4_7_BASE:1.47
	OPENBSD_4_6:1.46.0.2
	OPENBSD_4_6_BASE:1.46
	OPENBSD_4_5:1.44.0.4
	OPENBSD_4_5_BASE:1.44
	OPENBSD_4_4:1.44.0.2
	OPENBSD_4_4_BASE:1.44
	OPENBSD_4_3:1.41.0.4
	OPENBSD_4_3_BASE:1.41
	OPENBSD_4_2:1.41.0.2
	OPENBSD_4_2_BASE:1.41
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.20.0.2
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.6
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.4
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.6
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	UBC_SYNC_B:1.14
	UBC:1.13.0.8
	UBC_BASE:1.13
	OPENBSD_3_0:1.13.0.6
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.4
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.12.0.8
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.6
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.4
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.52
date	2014.03.18.22.36.32;	author miod;	state dead;
branches;
next	1.51;

1.51
date	2011.04.16.03.21.15;	author krw;	state Exp;
branches;
next	1.50;

1.50
date	2011.04.15.14.57.28;	author krw;	state Exp;
branches;
next	1.49;

1.49
date	2011.04.06.13.46.50;	author miod;	state Exp;
branches;
next	1.48;

1.48
date	2011.02.26.13.07.48;	author krw;	state Exp;
branches;
next	1.47;

1.47
date	2009.08.13.15.23.10;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2009.07.05.19.18.22;	author miod;	state Exp;
branches;
next	1.45;

1.45
date	2009.06.04.21.13.01;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2008.06.12.06.58.33;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2008.06.11.12.35.41;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2008.06.10.20.50.22;	author beck;	state Exp;
branches;
next	1.41;

1.41
date	2007.06.20.18.15.45;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.17.00.27.28;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.14.03.35.29;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.14.03.29.34;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2007.06.12.20.57.42;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2007.06.09.23.06.46;	author krw;	state Exp;
branches;
next	1.35;

1.35
date	2007.06.09.04.08.39;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2007.06.08.05.34.27;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2007.06.07.00.28.17;	author krw;	state Exp;
branches;
next	1.32;

1.32
date	2007.06.06.16.42.06;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2007.06.05.02.38.36;	author krw;	state Exp;
branches;
next	1.30;

1.30
date	2007.06.05.00.38.15;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2007.06.02.02.35.26;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.31.22.06.02;	author krw;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.19.57.43;	author krw;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.02.57.53;	author krw;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.29.06.28.14;	author otto;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.29.05.08.19;	author krw;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.29.14.12.21;	author krw;	state Exp;
branches;
next	1.22;

1.22
date	2006.10.20.00.55.32;	author jsg;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.24.22.43.00;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2006.08.17.10.34.14;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.15.20.20.39;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.22.00.40.01;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.30.07.52.31;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.17.14.16.04;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.27.45;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.14.01.26.30;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.18.21.00.34;	author mickey;	state Exp;
branches
	1.13.8.1;
next	1.12;

1.12
date	99.01.08.04.29.05;	author millert;	state Exp;
branches
	1.12.6.1;
next	1.11;

1.11
date	98.10.04.20.35.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.10.04.00.54.53;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.10.03.21.18.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.05.02.05.09.59;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.10.02.00.58.08;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.08.08.21.46.42;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.04.16.11.56.22;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.04.07.08.59.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.12.15.13.14;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.04.25.06.37.02;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.22;	author deraadt;	state Exp;
branches;
next	;

1.12.6.1
date	2001.04.18.16.05.39;	author niklas;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2002.03.28.10.07.18;	author niklas;	state Exp;
branches;
next	1.12.6.3;

1.12.6.3
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	1.12.6.4;

1.12.6.4
date	2004.06.05.23.10.46;	author niklas;	state Exp;
branches;
next	;

1.13.8.1
date	2002.06.11.03.35.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: disksubr.c,v 1.51 2011/04/16 03:21:15 krw Exp $	*/
/*	$NetBSD: disksubr.c,v 1.9 1997/04/01 03:12:13 scottr Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/disk.h>
#include <sys/disklabel.h>
#include <sys/syslog.h>

/*
 * Attempt to read a disk label from a device using the indicated strategy
 * routine.  The label must be partly set up before this: secpercyl and
 * anything required in the strategy routine (e.g., sector size) must be
 * filled in before calling us.
 */
int
readdisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, int spoofonly)
{
	struct buf *bp = NULL;
	int error;

	if ((error = initdisklabel(lp)))
		goto done;

	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	DL_SETBSTART(lp, lp->d_secpercyl);

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		goto done;

	bp->b_blkno = LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if (biowait(bp)) {
		error = bp->b_error;
		goto done;
	}

	error = checkdisklabel(bp->b_data + LABELOFFSET, lp,
	    DL_GETBSTART(lp), DL_GETDSIZE(lp));
	if (error == 0)
		goto done;

#if defined(CD9660)
	error = iso_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif
#if defined(UDF)
	error = udf_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}

/*
 * Write disk label back to device after modification.
 */
int
writedisklabel(dev_t dev, void (*strat)(struct buf *), struct disklabel *lp)
{
	struct buf *bp = NULL;
	struct disklabel *dlp;
	int error = 0;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;
	bp->b_blkno = LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if ((error = biowait(bp)) != 0)
		goto done;

	/* Write it in the regular place. */
	dlp = (struct disklabel *)(bp->b_data + LABELOFFSET);
	*dlp = *lp;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_WRITE | B_RAW);
	(*strat)(bp);
	error = biowait(bp);

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}
@


1.51
log
@Use 'CLR(<buf>->b_flags, B_READ | B_WRITE | B_DONE)' regardless of
what the previous IO was. Less chance of copy and paste errors.
Suggested by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.50 2011/04/15 14:57:28 krw Exp $	*/
@


1.50
log
@In days of yore one could arbitrarily whack buffer flags. Those days
are past. Use CLR() and SET() to modify necessary flags while leaving
the flags used by the buffer cache in peace.

Should make bufcache code much less confused about the state of the
bufs used in reading/writing disklabels. Other such flag abuses no
doubt await a visit.

Errors in original diff found by miod@@.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.49 2011/04/06 13:46:50 miod Exp $	*/
d72 1
a72 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d120 1
a120 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d129 1
a129 1
	CLR(bp->b_flags, B_READ | B_DONE);
@


1.49
log
@The various read*label() have stopped returning error strings for quite
some time, and return errnos instead. Fix or remove out-of-date comments
mentioning the error strings, and make their callers check the return value
against zero, not NULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.48 2011/02/26 13:07:48 krw Exp $	*/
d72 2
a73 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d120 2
a121 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d129 2
a130 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.48
log
@Force the DUID cache used to generate hw.disknames to be updated
after every disklabel read or write. This keeps the DUID cache more
in sync with the physical world. De-syncing noted by drahn@@ while
zapping disklabels with dd.

ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.47 2009/08/13 15:23:10 deraadt Exp $	*/
d49 1
a49 2
 * filled in before calling us.  Returns null on success and an error
 * string on failure.
@


1.47
log
@Replace the error strings that were being passed around with much simpler
errnos.  Note that the error strings are being ignored, since we long ago
decided to not spam the console, and there is no other nice way to use the
errors (without changing the ioctls to pass it back)
The errno is now useful, since we can pass b_error from failing IO up, and
the drive can decide how to use that
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.46 2009/07/05 19:18:22 miod Exp $	*/
d101 1
d137 1
@


1.46
log
@Make sure the OpenBSD bounds exclude the first cylinder, which is used
to store the bootblocks.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.45 2009/06/04 21:13:01 deraadt Exp $	*/
d52 1
a52 1
char *
d57 1
a57 1
	char *msg;
d59 1
a59 1
	if ((msg = initdisklabel(lp)))
d76 1
a76 1
		msg = "disk label I/O error";
d80 1
a80 1
	msg = checkdisklabel(bp->b_data + LABELOFFSET, lp,
d82 1
a82 1
	if (msg == NULL)
d86 2
a87 2
	if (iso_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a88 1
	}
d91 2
a92 2
	if (udf_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a93 1
	}
d101 1
a101 1
	return (msg);
@


1.45
log
@Recycle four ancient fields in the disklabel structure, replacing them with
bounds information, ie. the zone of the disk that OpenBSD can use.  Have each
pre-disklabel parser (MBR, DPME, or per-arch MD disklabel parsers) figure out
this area and pass it up to userland.  Then, delete all the same disk parsing
code from disklabel(8) since the kernel passes it up.  Lots and lots of - signs
in the disklabel(8) code.
Tested on as many platforms as possible, the fallout will be repaired as time
goes on.  To test, use disklabel -d <drive> and validate that the bounds do not
overlap any boot blocks.  This same information is used by disklabel -A...
OK for the concept from krw, miod, and drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.44 2008/06/12 06:58:33 deraadt Exp $	*/
d65 2
d80 2
a81 1
	msg = checkdisklabel(bp->b_data + LABELOFFSET, lp, 0, DL_GETDSIZE(lp));
@


1.44
log
@Bring biomem diff back into the tree after the nfs_bio.c fix went in.
ok thib beck art
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.42 2008/06/10 20:50:22 beck Exp $	*/
d78 1
a78 1
	msg = checkdisklabel(bp->b_data + LABELOFFSET, lp);
@


1.43
log
@back out biomem diff since it is not right yet.  Doing very large
file copies to nfsv2 causes the system to eventually peg the console.
On the console ^T indicates that the load is increasing rapidly, ddb
indicates many calls to getbuf, there is some very slow nfs traffic
making none (or extremely slow) progress.  Eventually some machines
seize up entirely.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.41 2007/06/20 18:15:45 deraadt Exp $	*/
d71 1
a71 1
	bp->b_flags = B_BUSY | B_READ;
d118 1
a118 1
	bp->b_flags = B_BUSY | B_READ;
d126 1
a126 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.42
log
@Fix buffer cache pending read statistics by ensuring we can identify
biowait() reads that do *not* come from the buffer cache - we use the
B_RAW flag to identify these at art's suggestion - since it makes sense
and the flag was not being used. this just flags all these buffers with
B_RAW - biodone already ignores returned buffers marked B_RAW.
ok art@@
@
text
@d71 1
a71 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d118 1
a118 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d126 1
a126 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.41
log
@b_cylinder does not need to be set on the callpath down into drivers.
cpu_disklabel can go away, since nothing anymore needs to use it; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.40 2007/06/17 00:27:28 deraadt Exp $	*/
d71 1
a71 1
	bp->b_flags = B_BUSY | B_READ;
d118 1
a118 1
	bp->b_flags = B_BUSY | B_READ;
d126 1
a126 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.40
log
@significantly simplified disklabel infrastructure.  MBR handling becomes MI
to support hotplug media on most architectures.  disklabel setup and
verification done using new helper functions.  Disklabels must *always*
have a correct checksum now.  Same code paths are used to learn on-disk
location disklabels, to avoid new errors sneaking in.  Tested on almost all
cases, testing help from todd, kettenis, krw, otto, dlg, robert, gwk, drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.39 2007/06/14 03:35:29 deraadt Exp $	*/
d54 1
a54 1
    struct disklabel *lp, struct cpu_disklabel *osdep, int spoofonly)
a71 1
	bp->b_cylinder = LABELSECTOR / lp->d_secpercyl;
d107 1
a107 2
writedisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, struct cpu_disklabel *osdep)
@


1.39
log
@set the prototype disklabel to version 1
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.38 2007/06/14 03:29:34 deraadt Exp $	*/
a35 2
 *
 *	@@(#)ufs_disksubr.c	8.5 (Berkeley) 1/21/94
d57 1
a57 3
	struct disklabel *dlp;
	int i;
	char *msg = NULL;
d59 1
a59 7
	/* minimal requirements for archetypal disk label */
	if (lp->d_secsize < DEV_BSIZE)
		lp->d_secsize = DEV_BSIZE;
	if (DL_GETDSIZE(lp) == 0)
		DL_SETDSIZE(lp, MAXDISKSIZE);
	if (lp->d_secpercyl == 0) {
		msg = "invalid geometry";
d61 3
a63 10
	}
	lp->d_npartitions = RAW_PART + 1;
	for (i = 0; i < RAW_PART; i++) {
		DL_SETPSIZE(&lp->d_partitions[i], 0);
		DL_SETPOFFSET(&lp->d_partitions[i], 0);
	}
	if (DL_GETPSIZE(&lp->d_partitions[RAW_PART]) == 0)
		DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[RAW_PART], 0);
	lp->d_version = 1;
a68 2
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;
d74 1
a74 1
	if (biowait(bp))
d76 7
a82 6
	else for (dlp = (struct disklabel *)bp->b_data;
	    dlp <= (struct disklabel *)((char *)bp->b_data +
	    DEV_BSIZE - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic != DISKMAGIC || dlp->d_magic2 != DISKMAGIC) {
			if (msg == NULL) {
d84 4
a87 1
				if (iso_disklabelspoof(dev, strat, lp) != 0)
a88 1
					msg = "no disk label";
d90 4
a93 2
				if (msg && udf_disklabelspoof(dev, strat, lp) == 0)
					msg = NULL;
a94 11
			}
		} else if (dlp->d_npartitions > MAXPARTITIONS ||
			   dkcksum(dlp) != 0)
			msg = "disk label corrupted";
		else {
			DL_SETDSIZE(dlp, DL_GETDSIZE(lp));
			*lp = *dlp;
			msg = NULL;
			break;
		}
	}
a100 1
	disklabeltokernlabel(lp);
a112 1
	int labelpart;
d115 1
a115 6
	labelpart = DISKPART(dev);
	if (DL_GETPOFFSET(&lp->d_partitions[labelpart]) != 0) {
		if (DL_GETPOFFSET(&lp->d_partitions[0]) != 0)
			return (EXDEV);			/* not quite right */
		labelpart = 0;
	}
d117 1
a117 1
	bp->b_dev = MAKEDISKDEV(major(dev), DISKUNIT(dev), labelpart);
d122 1
a122 1
	if ((error = biowait(bp)))
d124 1
a124 13
	for (dlp = (struct disklabel *)bp->b_data;
	    dlp <= (struct disklabel *)
	      ((char *)bp->b_data + lp->d_secsize - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic == DISKMAGIC && dlp->d_magic2 == DISKMAGIC &&
		    dkcksum(dlp) == 0) {
			*dlp = *lp;
			bp->b_flags = B_BUSY | B_WRITE;
			(*strat)(bp);
			error = biowait(bp);
			goto done;
		}
	}
d126 2
a127 1
	*(struct disklabel *)bp->b_data = *lp;
@


1.38
log
@do not depend on previous loop variable, use a constant instead
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.37 2007/06/12 20:57:42 deraadt Exp $	*/
d80 1
@


1.37
log
@all disksubr.c did their b_flags manipulation differently (and wrong).
correct and unify; ok thib miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.36 2007/06/09 23:06:46 krw Exp $	*/
d77 3
a79 3
	if (DL_GETPSIZE(&lp->d_partitions[i]) == 0)
		DL_SETPSIZE(&lp->d_partitions[i], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[i], 0);
@


1.36
log
@The differences in the last non-homogeneous bounds_check_with_label()
routines (alpha, vax) prove to be not worth keeping. Move
bounds_check_with_label() into the MI world. Eliminate unreliable and
almost certainly useless checks for overwriting a disklabel.

After discussion with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.35 2007/06/09 04:08:39 deraadt Exp $	*/
d122 1
a122 1
		bp->b_flags = B_INVAL | B_AGE;
d136 1
a136 1
	struct buf *bp;
d151 1
a151 1
	bp->b_flags = B_READ;
d162 1
a162 1
			bp->b_flags = B_WRITE;
d175 4
a178 1
	brelse(bp);
@


1.35
log
@by hand i carefully found that all the differences in setdisklabel()
implimentations were simply either missing code, or spacing and such.
setdisklabel() can become MI now.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.34 2007/06/08 05:34:27 deraadt Exp $	*/
a176 56
}

/*
 * Determine the size of the transfer, and make sure it is
 * within the boundaries of the partition. Adjust transfer
 * if needed, and signal errors or early completion.
 */
int
bounds_check_with_label(struct buf *bp, struct disklabel *lp,
    struct cpu_disklabel *osdep, int wlabel)
{
#define blockpersec(count, lp) ((count) * (((lp)->d_secsize) / DEV_BSIZE))
	struct partition *p = lp->d_partitions + DISKPART(bp->b_dev);
	int labelsector = blockpersec(DL_GETPOFFSET(&lp->d_partitions[RAW_PART]), lp) +
	    LABELSECTOR;
	int sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* avoid division by zero */
	if (lp->d_secpercyl == 0) {
		bp->b_error = EINVAL;
		goto bad;
	}

	/* beyond partition? */
	if (bp->b_blkno + sz > blockpersec(DL_GETPSIZE(p), lp)) {
		sz = blockpersec(DL_GETPSIZE(p), lp) - bp->b_blkno;
		if (sz == 0) {
			/* If exactly at end of disk, return EOF. */
			bp->b_resid = bp->b_bcount;
			return (-1);
		}
		if (sz < 0) {
			/* If past end of disk, return EINVAL. */
			bp->b_error = EINVAL;
			goto bad;
		}
		/* Otherwise, truncate request. */
		bp->b_bcount = sz << DEV_BSHIFT;
	}

	/* Overwriting disk label? */
	if (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) <= labelsector &&
	    bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) + sz > labelsector &&
	    (bp->b_flags & B_READ) == 0 && !wlabel) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* calculate cylinder for disksort to order transfers with */
	bp->b_cylinder = (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp)) /
	    lp->d_secpercyl;
	return (1);

bad:
	bp->b_flags |= B_ERROR;
	return (-1);
@


1.34
log
@all disklabels read from the kernel now always contain a total sector
size which is the REAL DISK SIZE.  always.  if a driver fails to set
this right, please fix it.  agreed with otto and krw
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.33 2007/06/07 00:28:17 krw Exp $	*/
a126 39
}

/*
 * Check new disk label for sensibility before setting it.
 */
int
setdisklabel(struct disklabel *olp, struct disklabel *nlp,
    u_int openmask, struct cpu_disklabel *osdep)
{
	int i;
	struct partition *opp, *npp;

	if (nlp->d_magic != DISKMAGIC || nlp->d_magic2 != DISKMAGIC ||
	    dkcksum(nlp) != 0)
		return (EINVAL);
	while ((i = ffs(openmask)) != 0) {
		i--;
		openmask &= ~(1 << i);
		if (nlp->d_npartitions <= i)
			return (EBUSY);
		opp = &olp->d_partitions[i];
		npp = &nlp->d_partitions[i];
		if (DL_GETPOFFSET(npp) != DL_GETPOFFSET(opp) ||
		    DL_GETPSIZE(npp) < DL_GETPSIZE(opp))
			return (EBUSY);
		/*
		 * Copy internally-set partition information
		 * if new label doesn't include it.		XXX
		 */
		if (npp->p_fstype == FS_UNUSED && opp->p_fstype != FS_UNUSED) {
			npp->p_fstype = opp->p_fstype;
			npp->p_fragblock = opp->p_fragblock;
			npp->p_cpg = opp->p_cpg;
		}
	}
	nlp->d_checksum = 0;
	nlp->d_checksum = dkcksum(nlp);
	*olp = *nlp;
	return (0);
@


1.33
log
@More bounds_check_with_label homogenization. Fix a couple of typos while
there.

'so go to it!' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.32 2007/06/06 16:42:06 deraadt Exp $	*/
d113 1
@


1.32
log
@a fair sprinking of knf, code movement, and sometimes character-by-character
accuracy so that the variious disksubr.c's can be compared easier.
setdisklabel() starts taking an int for openmask.
ok krw, and read by quite a few other people
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.31 2007/06/05 02:38:36 krw Exp $	*/
d228 1
a228 1
	int labelsector = blockpersec(DL_GETPOFFSET(&lp->d_partitions[0]), lp) +
d244 1
a244 1
			return (0);
d257 1
@


1.31
log
@bounds_check_with_label() checks for i/o outside of the partition and
for overwriting the disklabel. Reorder some checks so all copies of
bounds_check_with_label do the checks in the same order. Order picked
by using the currently most popular one. Should be no functional
change.

"If it's boring, commit it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.30 2007/06/05 00:38:15 deraadt Exp $	*/
d55 2
a56 6
readdisklabel(dev, strat, lp, osdep, spoofonly)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int spoofonly;
d132 2
a133 4
setdisklabel(olp, nlp, openmask, osdep)
	struct disklabel *olp, *nlp;
	u_long openmask;
	struct cpu_disklabel *osdep;
d141 1
a141 1
	while ((i = ffs((long)openmask)) != 0) {
d171 2
a172 5
writedisklabel(dev, strat, lp, osdep)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
d254 1
a254 1
	
@


1.30
log
@use six new macros to access & store the 48-bit disklabel fields related
to size.  tested on almost all machines, double checked by miod and krw
next comes the type handling surrounding these values
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.29 2007/06/02 02:35:26 krw Exp $	*/
a246 7
	/* Overwriting disk label? */
	if (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) <= labelsector &&
	    (bp->b_flags & B_READ) == 0 && !wlabel) {
		bp->b_error = EROFS;
		goto bad;
	}

d262 7
@


1.29
log
@Rename cvtdisklabelv1 -> disklabeltokernlabel. It does more than just
convert version 0 to version 1 disklabels.

Suggested by deraadt@@.

ok deraadt@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.28 2007/05/31 22:06:02 krw Exp $	*/
d70 2
a71 2
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
d78 2
a79 2
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
d81 3
a83 3
	if (lp->d_partitions[i].p_size == 0)
		lp->d_partitions[i].p_size = lp->d_secperunit;
	lp->d_partitions[i].p_offset = 0;
d154 2
a155 1
		if (npp->p_offset != opp->p_offset || npp->p_size < opp->p_size)
d189 2
a190 2
	if (lp->d_partitions[labelpart].p_offset != 0) {
		if (lp->d_partitions[0].p_offset != 0)
d237 1
a237 1
	int labelsector = blockpersec(lp->d_partitions[0].p_offset, lp) +
d248 1
a248 1
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsector &&
d255 2
a256 2
	if (bp->b_blkno + sz > blockpersec(p->p_size, lp)) {
		sz = blockpersec(p->p_size, lp) - bp->b_blkno;
d272 1
a272 1
	bp->b_cylinder = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
@


1.28
log
@Minor bounds_check_with_label nits.

1) Use local variable 'labelsector' not 'labelsect' to be consistant (hp300,
mac68k, mvme68k, mvme88k, vax).

2) Having checked for sz == 0, the next check needs only be sz < 0, not <= 0.
(mac68k, mvme68k, mvme88k)

3) Use lp->d_partitions + DISKPART(dev), rather than
lp->d_partitions[DISKPART(dev)] (hp300).

Assuming no typos there should be no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.27 2007/05/31 19:57:43 krw Exp $	*/
d128 1
a128 1
	cvtdisklabelv1(lp);
@


1.27
log
@KNF, whitespace and comment rectification to make all
bounds_check_with_label() routines as identical as possible without
changing any code. Code nits and adjustments to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.26 2007/05/31 02:57:53 krw Exp $	*/
d235 2
a236 2
	struct partition *p = &lp->d_partitions[DISKPART(bp->b_dev)];
	int labelsect = blockpersec(lp->d_partitions[0].p_offset, lp) +
d247 1
a247 1
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsect &&
@


1.26
log
@Be consistant and use b_cylinder when saving the cylinder number for
disksort, not b_resid. b_cylinder is defined to be 'b_resid' so no
functional change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.25 2007/05/29 06:28:14 otto Exp $	*/
d231 2
a232 5
bounds_check_with_label(bp, lp, osdep, wlabel)
	struct buf *bp;
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int wlabel;
d262 1
d266 1
a266 1
		/* ... or truncate if part of it fits */
@


1.25
log
@Updated disklabel format to support larger disks and partitions. We
free room in struct partition by packing fragment size and
fragments/block more tighlty and use the resulting space to make
offset and size 48 bits.  For the disk part we use spare fields in
struct disklabel.  Kernel converts in-mem copy of the on-disk
label if needed, disklabel(8) writes new version.
We are careful to only change fields not used by bootloaders.
Conception of basic scheme by deraadt.
ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.24 2007/05/29 05:08:19 krw Exp $	*/
d273 1
a273 1
	bp->b_resid = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
@


1.24
log
@Refactor readdisklabel() to ensure there is a single point of return, in
preparation for translating all disk labels visible to the kernel to
the soon to arrive V1 format.

ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.23 2006/10/29 14:12:21 krw Exp $	*/
d128 1
d162 1
a162 2
			npp->p_fsize = opp->p_fsize;
			npp->p_frag = opp->p_frag;
@


1.23
log
@Don't need to 'goto done;' when 'done:' is the next line.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.22 2006/10/20 00:55:32 jsg Exp $	*/
d62 1
a62 1
	struct buf *bp;
d72 4
a75 2
	if (lp->d_secpercyl == 0)
		return ("invalid geometry");
d87 1
a87 1
		return (NULL);
d122 6
a127 2
	bp->b_flags = B_INVAL | B_AGE;
	brelse(bp);
@


1.22
log
@Declare loop variable so this compiles.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.21 2006/09/24 22:43:00 krw Exp $	*/
a212 1
	goto done;
@


1.21
log
@Bring hp300, mac68k and mvme68k disklabel initialization code into
line with all other archs by initializing partitions up to RAWPART the
same way. Should be no functional change.

ok martin@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.20 2006/08/17 10:34:14 krw Exp $	*/
d64 1
@


1.20
log
@Check d_secpercyl in all readdisklable() functions, and have all of
them return 'invalid geometry' when d_secpercyl == 0. While there move
the check to a consistant location (after the check of d_secperunit)
and use a consistant idiom (i.e. some readdisklabel()'s have no 'done'
label).

prodded by thib@@ after a bad macppc experience. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.19 2006/03/15 20:20:39 miod Exp $	*/
d74 7
a80 3
	if (lp->d_partitions[RAW_PART].p_size == 0)
		lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
	lp->d_partitions[RAW_PART].p_offset = 0;
@


1.19
log
@Nuke dk_establish(), no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.18 2006/01/22 00:40:01 miod Exp $	*/
d72 1
a72 1
		lp->d_secpercyl = 1;
@


1.18
log
@b_cylin -> b_cylinder; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.17 2005/03/30 07:52:31 deraadt Exp $	*/
a45 7

void
dk_establish(dk, dev)
	struct disk *dk;
	struct device *dev;
{
}
@


1.17
log
@first approximation:  spoof UDF filesystem disklabels when we see them.
it is likely a slight bug or two will sneak in with this, so everyone
please keep an eye out on your disklabels
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16 2004/03/17 14:16:04 miod Exp $	*/
a45 2

#define	b_cylinder	b_resid
@


1.16
log
@Make sure disklabels use at least DEV_BSIZE as their sector size.
This allows the kernel to survive reading the disklabel off a 256-bytes/sector
scsi device...

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.15 2003/06/02 23:27:45 millert Exp $	*/
d110 4
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.14 2002/03/14 01:26:30 millert Exp $	*/
d76 1
a76 1
	if (lp->d_secsize == 0)
@


1.14
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 2000/10/18 21:00:34 mickey Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@typo in comment; from gluk@@ptci.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.12 1999/01/08 04:29:05 millert Exp $	*/
d70 1
a70 1
	void (*strat) __P((struct buf *));
d176 1
a176 1
	void (*strat) __P((struct buf *));
@


1.13.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 2000/10/18 21:00:34 mickey Exp $	*/
d70 1
a70 1
	void (*strat)(struct buf *);
d176 1
a176 1
	void (*strat)(struct buf *);
@


1.12
log
@check for lp->d_secpercyl == 0) in bounds_check_with_label()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 1998/10/04 20:35:16 millert Exp $	*/
d61 1
a61 1
 * Attempt to read a disk label from a device using the indicated stategy
@


1.12.6.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 2000/10/18 21:00:34 mickey Exp $	*/
d61 1
a61 1
 * Attempt to read a disk label from a device using the indicated strategy
@


1.12.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 1
a70 1
	void (*strat)(struct buf *);
d176 1
a176 1
	void (*strat)(struct buf *);
@


1.12.6.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.12.6.2 2002/03/28 10:07:18 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.12.6.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
a76 1
	if (lp->d_secsize < DEV_BSIZE)
@


1.11
log
@if the 'c' partition lacks a size, give it a reasonable one
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10 1998/10/04 00:54:53 millert Exp $	*/
d241 6
@


1.10
log
@Use a sensible 'c' partition for spoofed labels.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.9 1998/10/03 21:18:54 millert Exp $	*/
d88 1
a88 1
		lp->d_partitions[RAW_PART].p_size = 0x1fffffff;
@


1.9
log
@Add a "spoofonly" argument to readdisklabel() which will be used to
implement an ioctl to get a spoofed label even for disks that have
a label on them.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.8 1998/05/02 05:09:59 millert Exp $	*/
d84 1
a84 1
	if (lp->d_secpercyl == 0) {
d86 4
a89 6
	}

	lp->d_npartitions = 1;
	if (lp->d_partitions[0].p_size == 0)
		lp->d_partitions[0].p_size = 0x1fffffff;
	lp->d_partitions[0].p_offset = 0;
@


1.8
log
@Add defaults for d_secsize and d_secpercyl if they are zero (should not happen)
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.7 1997/10/02 00:58:08 deraadt Exp $	*/
d68 1
a68 1
readdisklabel(dev, strat, lp, osdep)
d73 1
d93 4
d105 1
a105 1
		msg = "I/O error";
@


1.7
log
@kill ESRCH in writedisklabel()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.6 1997/08/08 21:46:42 niklas Exp $	*/
d78 3
d83 4
@


1.6
log
@Change the bounds_check_with_label API to also take a cpu_disklabel
reference for making transferral of meta-information possible from
readdisklabel to bounds_check_with_label.  The first (and maybe only)
thing that will use this is the multi-disklabel-format code on the
alpha where the labelsector is passed via cpu_disklabel so the label
write-protection can work correctly no matter what label was found.

Also use a new macro DKBAD to get at the dkbad field of the cpu_disklabel
implementations that contain it.  This too is for multi-disklabel
architectures where the "bad" field can be inside a union.  Use this
macro as a means for a driver to check if an architecture supports
dkbad constructs.

Remove proto of bounds_check_with_label from all MD disklabel.h as it
is in sys/disklabel.h.

I have not been able to test the changes everywhere, if I break anything
I apologize, and promise to fix it as soon as I become aware of it.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.5 1997/04/16 11:56:22 downsj Exp $	*/
d202 7
a208 1
	error = ESRCH;
@


1.5
log
@Merge portions of NetBSD up to 970415.

This includes:
	* All of the prototyping and KNF changes.
	* The new interrupt system.
	* Portions of the Domain Keyboard support from Mike Smith.

This does not include:
	* m68k changes, namely generic dumps.

Various sundry changes and fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.4 1997/04/07 08:59:19 deraadt Exp $	*/
d214 1
a214 1
bounds_check_with_label(bp, lp, wlabel)
d217 1
@


1.4
log
@deal with partition/block size differences
@
text
@d1 2
a2 2
/*	$OpenBSD: disksubr.c,v 1.3 1997/01/12 15:13:14 downsj Exp $	*/
/*	$NetBSD: disksubr.c,v 1.8 1996/02/02 19:50:26 scottr Exp $	*/
d47 1
d70 2
a71 2
	void (*strat)();
	register struct disklabel *lp;
d74 1
a74 1
	register struct buf *bp;
d124 1
a124 1
	register struct disklabel *olp, *nlp;
d128 2
a129 2
	register i;
	register struct partition *opp, *npp;
d166 2
a167 2
	void (*strat)();
	register struct disklabel *lp;
d187 1
a187 1
	if (error = biowait(bp))
@


1.3
log
@Mostly sync to NetBSD-current of 011196.  Compiles, links, boots to single
user.

KNOWN NOT WORKING:
	* DIO-II devices
	* Dynamic executables

NOT EVEN TRIED:
	* New config support
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d98 6
a103 2
			if (msg == NULL)
				msg = "no disk label";
d218 1
d220 3
a222 3
	int labelsect = lp->d_partitions[0].p_offset;
	int maxsz = p->p_size;
	int sz = (bp->b_bcount + DEV_BSIZE - 1) >> DEV_BSHIFT;
d225 1
a225 1
	if (bp->b_blkno + p->p_offset <= LABELSECTOR + labelsect &&
d232 3
a234 2
	if (bp->b_blkno < 0 || bp->b_blkno + sz > maxsz) {
		if (bp->b_blkno == maxsz) {
d239 1
a239 3
		/* ...or truncate if part of it fits */
		sz = maxsz - bp->b_blkno;
		if (sz <= 0) {
d243 1
d248 2
a249 1
	bp->b_resid = (bp->b_blkno + p->p_offset) / lp->d_secpercyl;
d252 1
a252 1
 bad:
@


1.2
log
@sync w/ Net 960424
@
text
@d1 1
d51 7
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: disksubr.c,v 1.6 1995/08/08 06:23:08 thorpej Exp $	*/
d43 5
a47 5
#include "param.h"
#include "systm.h"
#include "buf.h"
#include "disklabel.h"
#include "syslog.h"
d141 2
a142 2
 	nlp->d_checksum = 0;
 	nlp->d_checksum = dkcksum(nlp);
a146 5
/* encoding of disk minor numbers, should be elsewhere... */
#define dkunit(dev)		(minor(dev) >> 3)
#define dkpart(dev)		(minor(dev) & 07)
#define dkminor(unit, part)	(((unit) << 3) | (part))

d162 1
a162 1
	labelpart = dkpart(dev);
d169 1
a169 1
	bp->b_dev = makedev(major(dev), dkminor(dkunit(dev), labelpart));
d206 1
a206 1
	struct partition *p = &lp->d_partitions[dkpart(bp->b_dev)];
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
