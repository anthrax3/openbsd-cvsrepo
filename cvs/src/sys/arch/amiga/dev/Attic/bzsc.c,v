head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.20
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.30.22.08.16;	author miod;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.11.06.01.47.02;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.11.20.05.20;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	97.01.18.12.26.25;	author niklas;	state Exp;
branches
	1.6.14.1;
next	1.5;

1.5
date	97.01.16.09.23.48;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.21.45.06;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.05.02.06.43.34;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.15.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.55;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2001.10.31.02.52.45;	author nate;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2001.11.13.21.00.50;	author niklas;	state Exp;
branches;
next	1.6.14.3;

1.6.14.3
date	2001.12.05.00.39.09;	author niklas;	state Exp;
branches;
next	1.6.14.4;

1.6.14.4
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.6.14.5;

1.6.14.5
date	2003.03.27.23.19.17;	author niklas;	state dead;
branches;
next	;

1.9.2.1
date	2002.06.11.03.34.57;	author art;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2003.05.19.21.49.38;	author tedu;	state dead;
branches;
next	;


desc
@@


1.11
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: bzsc.c,v 1.10 2002/03/14 01:26:28 millert Exp $	*/

/*	$NetBSD: bzsc.c,v 1.14 1996/12/23 09:09:53 veego Exp $	*/

/*
 * Copyright (c) 1995 Daniel Widenfalk
 * Copyright (c) 1994 Christian E. Hopps
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)dma.c
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <uvm/uvm_extern.h>
#include <amiga/amiga/custom.h>
#include <amiga/amiga/cc.h>
#include <amiga/amiga/device.h>
#include <amiga/amiga/isr.h>
#include <amiga/dev/sfasreg.h>
#include <amiga/dev/sfasvar.h>
#include <amiga/dev/zbusvar.h>
#include <amiga/dev/bzscreg.h>
#include <amiga/dev/bzscvar.h>

void bzscattach(struct device *, struct device *, void *);
int  bzscmatch(struct device *, void *, void *);

struct scsi_adapter bzsc_scsiswitch = {
	sfas_scsicmd,
	sfas_minphys,
	0,			/* no lun support */
	0,			/* no lun support */
};

struct scsi_device bzsc_scsidev = {
	NULL,		/* use default error handler */
	NULL,		/* do not have a start functio */
	NULL,		/* have no async handler */
	NULL,		/* Use default done routine */
};

struct cfattach bzsc_ca = {
	sizeof(struct bzsc_softc), bzscmatch, bzscattach
};

struct cfdriver bzsc_cd = {
	NULL, "bzsc", DV_DULL, NULL, 0
};

int bzsc_intr(void *);
void bzsc_set_dma_adr(struct sfas_softc *sc, vm_offset_t ptr, int mode);       
void bzsc_set_dma_tc(struct sfas_softc *sc, unsigned int len);
int bzsc_setup_dma(struct sfas_softc *sc, vm_offset_t ptr, int len,
			     int mode);
int bzsc_build_dma_chain(struct sfas_softc *sc,
				struct sfas_dma_chain *chain, void *p, int l);
int bzsc_need_bump(struct sfas_softc *sc, vm_offset_t ptr, int len);
void bzsc_led_dummy(struct sfas_softc *sc, int mode);

/*
 * if we are an Advanced Systems & Software FastlaneZ3
 */
int
bzscmatch(pdp, match, auxp)
	struct device *pdp;
	void *match, *auxp;
{
	struct zbus_args *zap;
	vu_char *ta;

	if (!is_a1200())
		return(0);

	zap = auxp;
	if (zap->manid != 0x2140 || zap->prodid != 11)
		return(0);

	ta = (vu_char *)(((char *)zap->va)+0x10010);
	if (badbaddr((caddr_t)ta))
		return(0);

	*ta = 0;
	*ta = 1;
	DELAY(5);
	if (*ta != 1)
		return(0);

	return(1);
}

void
bzscattach(pdp, dp, auxp)
	struct device *pdp;
	struct device *dp;
	void *auxp;
{
	struct bzsc_softc *sc;
	struct zbus_args  *zap;
	bzsc_regmap_p	   rp;
	vu_char		  *fas;

	zap = auxp;
	fas = (vu_char *)(((char *)zap->va)+0x10000);

	sc = (struct bzsc_softc *)dp;
	rp = &sc->sc_regmap;

	rp->FAS216.sfas_tc_low   = &fas[0x00];
	rp->FAS216.sfas_tc_mid   = &fas[0x02];
	rp->FAS216.sfas_fifo     = &fas[0x04];
	rp->FAS216.sfas_command  = &fas[0x06];
	rp->FAS216.sfas_dest_id  = &fas[0x08];
	rp->FAS216.sfas_timeout  = &fas[0x0A];
	rp->FAS216.sfas_syncper  = &fas[0x0C];
	rp->FAS216.sfas_syncoff  = &fas[0x0E];
	rp->FAS216.sfas_config1  = &fas[0x10];
	rp->FAS216.sfas_clkconv  = &fas[0x12];
	rp->FAS216.sfas_test     = &fas[0x14];
	rp->FAS216.sfas_config2  = &fas[0x16];
	rp->FAS216.sfas_config3  = &fas[0x18];
	rp->FAS216.sfas_tc_high  = &fas[0x1C];
	rp->FAS216.sfas_fifo_bot = &fas[0x1E];
	rp->cclkaddr		 = &fas[0x21];
	rp->epowaddr		 = &fas[0x31];

	sc->sc_softc.sc_fas  = (sfas_regmap_p)rp;
	sc->sc_softc.sc_spec = 0;

	sc->sc_softc.sc_led  = bzsc_led_dummy;

	sc->sc_softc.sc_setup_dma	= bzsc_setup_dma;
	sc->sc_softc.sc_build_dma_chain = bzsc_build_dma_chain;
	sc->sc_softc.sc_need_bump	= bzsc_need_bump;

	sc->sc_softc.sc_clock_freq   = 40; /* BlizzardII 1230 runs at 40MHz? */
	sc->sc_softc.sc_timeout      = 250; /* Set default timeout to 250ms */
	sc->sc_softc.sc_config_flags = 0;
	sc->sc_softc.sc_host_id      = 7;

	sc->sc_softc.sc_bump_sz = NBPG;
	sc->sc_softc.sc_bump_pa = 0x0;

	sfasinitialize((struct sfas_softc *)sc);

	sc->sc_softc.sc_link.adapter_softc = sc;
	sc->sc_softc.sc_link.adapter_target = sc->sc_softc.sc_host_id;
	sc->sc_softc.sc_link.adapter = &bzsc_scsiswitch;
	sc->sc_softc.sc_link.device = &bzsc_scsidev;
	sc->sc_softc.sc_link.openings = 1;

	printf("\n");

	sc->sc_softc.sc_isr.isr_intr = bzsc_intr;
	sc->sc_softc.sc_isr.isr_arg = &sc->sc_softc;
	sc->sc_softc.sc_isr.isr_ipl = 2;
	add_isr(&sc->sc_softc.sc_isr);

	/* attach all scsi units on us */
	config_found(dp, &sc->sc_softc.sc_link, scsiprint);
}

int
bzsc_intr(arg)
	void *arg;
{
	struct sfas_softc *dev = arg;
	bzsc_regmap_p	rp;
	int		quickints;

	rp = (bzsc_regmap_p)dev->sc_fas;

	if (!(*rp->FAS216.sfas_status & SFAS_STAT_INTERRUPT_PENDING))
		return(0);

	quickints = 16;
	do {
		dev->sc_status = *rp->FAS216.sfas_status;
		dev->sc_interrupt = *rp->FAS216.sfas_interrupt;
		
		if (dev->sc_interrupt & SFAS_INT_RESELECTED) {
			dev->sc_resel[0] = *rp->FAS216.sfas_fifo;
			dev->sc_resel[1] = *rp->FAS216.sfas_fifo;
		}
		sfasintr(dev);
	} while((*rp->FAS216.sfas_status & SFAS_STAT_INTERRUPT_PENDING) &&
		--quickints);

	return(1);
}

/* --------- */
void
bzsc_set_dma_adr(sc, ptr, mode)
	struct sfas_softc *sc;
	vm_offset_t ptr;
	int mode;
{
	bzsc_regmap_p	rp;
	unsigned long	p;

	rp = (bzsc_regmap_p)sc->sc_fas;

	p = ((unsigned long)ptr)>>1;
	
	if (mode == SFAS_DMA_WRITE)
		p |= BZSC_DMA_WRITE;
	else
		p |= BZSC_DMA_READ;

	*rp->epowaddr = (u_char)(p>>24) & 0xFF;
	*rp->cclkaddr = (u_char)(p>>16) & 0xFF;
	*rp->cclkaddr = (u_char)(p>> 8) & 0xFF;
	*rp->cclkaddr = (u_char)(p    ) & 0xFF;
}

/* Set DMA transfer counter */
void
bzsc_set_dma_tc(sc, len)
	struct sfas_softc *sc;
	unsigned int len;
{
	*sc->sc_fas->sfas_tc_low  = len; len >>= 8;
	*sc->sc_fas->sfas_tc_mid  = len; len >>= 8;
	*sc->sc_fas->sfas_tc_high = len;
}

/* Initialize DMA for transfer */
int
bzsc_setup_dma(sc, ptr, len, mode)
	struct sfas_softc *sc;
	vm_offset_t ptr;
	int len;
	int mode;
{
	int	retval;

	retval = 0;

	switch(mode) {
	case SFAS_DMA_READ:
	case SFAS_DMA_WRITE:
		bzsc_set_dma_adr(sc, ptr, mode);
		bzsc_set_dma_tc(sc, len);
		break;
	case SFAS_DMA_CLEAR:
	default:
		retval = (*sc->sc_fas->sfas_tc_high << 16) |
			 (*sc->sc_fas->sfas_tc_mid  <<  8) |
			  *sc->sc_fas->sfas_tc_low;
      
		bzsc_set_dma_tc(sc, 0);
		break;
	}

	return(retval);
}

/* Check if address and len is ok for DMA transfer */
int
bzsc_need_bump(sc, ptr, len)
	struct sfas_softc *sc;
	vm_offset_t ptr;
	int len;
{
	int	p;

	p = (int)ptr & 0x03;

	if (p) {
		p = 4-p;

		if (len < 256)
			p = len;
	}

	return(p);
}

/* Interrupt driven routines */
int
bzsc_build_dma_chain(sc, chain, p, l)
	struct sfas_softc *sc;
	struct sfas_dma_chain *chain;
	void *p;
	int l;
{
	int	n;

	if (!l)
		return(0);

#define set_link(n, p, l, f)\
do { chain[n].ptr = (p); chain[n].len = (l); chain[n++].flg = (f); } while(0)

	n = 0;

	if (l < 512)
		set_link(n, (vm_offset_t)p, l, SFAS_CHAIN_BUMP);
	else if (
#if defined(M68040) || defined(M68060)
		 ((mmutype <= MMU_68040) && ((vm_offset_t)p >= 0xFFFC0000)) &&
#endif
		 ((vm_offset_t)p >= 0xFF000000)) {
		int	len;

		while(l) {
			len = ((l > sc->sc_bump_sz) ? sc->sc_bump_sz : l);

			set_link(n, (vm_offset_t)p, len, SFAS_CHAIN_BUMP);

			p += len;
			l -= len;
		}
	} else  {
		char		*ptr;
		vm_offset_t	 pa, lastpa;
		int		 len,  prelen,  max_t;

		ptr = p;
		len = l;

		pa = kvtop(ptr);
		prelen = ((int)ptr & 0x03);

		if (prelen) {
			prelen = 4-prelen;
			set_link(n, (vm_offset_t)ptr, prelen, SFAS_CHAIN_BUMP);
			ptr += prelen;
			len -= prelen;
		}

		lastpa = 0;
		while(len > 3) {
			pa = kvtop(ptr);
			max_t = NBPG - (pa & PGOFSET);
			if (max_t > len)
				max_t = len;
	  
			max_t &= ~3;
	  
			if (lastpa == pa)
				sc->sc_chain[n-1].len += max_t;
			else
				set_link(n, pa, max_t, SFAS_CHAIN_DMA);
	  
			lastpa = pa+max_t;
	  
			ptr += max_t;
			len -= max_t;
		}
      
		if (len)
			set_link(n, (vm_offset_t)ptr, len, SFAS_CHAIN_BUMP);
	}

	return(n);
}

/* Turn on led */
void bzsc_led_dummy(sc, mode)
	struct sfas_softc *sc;
	int mode;
{
}
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.9 2001/11/30 22:08:16 miod Exp $	*/
@


1.9
log
@Make it possible for mmutype to contain MMU_68060 if the hardware is
actually '060-based, instead to look at the machineid.
This is simpler, and will be required to switch to pmap_motorola anyways.
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.8 2001/11/06 01:47:02 art Exp $	*/
d59 2
a60 2
void bzscattach __P((struct device *, struct device *, void *));
int  bzscmatch  __P((struct device *, void *, void *));
d84 9
a92 9
int bzsc_intr		__P((void *));
void bzsc_set_dma_adr	__P((struct sfas_softc *sc, vm_offset_t ptr, int mode));       
void bzsc_set_dma_tc	__P((struct sfas_softc *sc, unsigned int len));
int bzsc_setup_dma	__P((struct sfas_softc *sc, vm_offset_t ptr, int len,
			     int mode));
int bzsc_build_dma_chain __P((struct sfas_softc *sc,
				struct sfas_dma_chain *chain, void *p, int l));
int bzsc_need_bump	__P((struct sfas_softc *sc, vm_offset_t ptr, int len));
void bzsc_led_dummy	__P((struct sfas_softc *sc, int mode));
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.9 2001/11/30 22:08:16 miod Exp $	*/
d59 2
a60 2
void bzscattach(struct device *, struct device *, void *);
int  bzscmatch(struct device *, void *, void *);
d84 9
a92 9
int bzsc_intr(void *);
void bzsc_set_dma_adr(struct sfas_softc *sc, vm_offset_t ptr, int mode);       
void bzsc_set_dma_tc(struct sfas_softc *sc, unsigned int len);
int bzsc_setup_dma(struct sfas_softc *sc, vm_offset_t ptr, int len,
			     int mode);
int bzsc_build_dma_chain(struct sfas_softc *sc,
				struct sfas_dma_chain *chain, void *p, int l);
int bzsc_need_bump(struct sfas_softc *sc, vm_offset_t ptr, int len);
void bzsc_led_dummy(struct sfas_softc *sc, int mode);
@


1.9.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.9.2.1 2002/06/11 03:34:57 art Exp $	*/
@


1.8
log
@redundant includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.7 2001/09/11 20:05:20 miod Exp $	*/
d335 1
a335 1
		 ((mmutype == MMU_68040) && ((vm_offset_t)p >= 0xFFFC0000)) &&
@


1.7
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.6 1997/01/18 12:26:25 niklas Exp $	*/
d48 1
a48 3
#include <vm/vm.h>
#include <vm/vm_page.h>
#include <machine/pmap.h>
@


1.6
log
@Use scsiprint
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.5 1997/01/16 09:23:48 niklas Exp $	*/
a48 1
#include <vm/vm_kern.h>
@


1.6.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.6 1997/01/18 12:26:25 niklas Exp $	*/
d49 1
@


1.6.14.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 3
a50 1
#include <uvm/uvm_extern.h>
@


1.6.14.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.6.14.2 2001/11/13 21:00:50 niklas Exp $	*/
d335 1
a335 1
		 ((mmutype <= MMU_68040) && ((vm_offset_t)p >= 0xFFFC0000)) &&
@


1.6.14.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 2
a60 2
void bzscattach(struct device *, struct device *, void *);
int  bzscmatch(struct device *, void *, void *);
d84 9
a92 9
int bzsc_intr(void *);
void bzsc_set_dma_adr(struct sfas_softc *sc, vm_offset_t ptr, int mode);       
void bzsc_set_dma_tc(struct sfas_softc *sc, unsigned int len);
int bzsc_setup_dma(struct sfas_softc *sc, vm_offset_t ptr, int len,
			     int mode);
int bzsc_build_dma_chain(struct sfas_softc *sc,
				struct sfas_dma_chain *chain, void *p, int l);
int bzsc_need_bump(struct sfas_softc *sc, vm_offset_t ptr, int len);
void bzsc_led_dummy(struct sfas_softc *sc, int mode);
@


1.6.14.5
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.6.14.4 2002/03/28 10:06:14 niklas Exp $	*/
@


1.5
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.4 1996/11/23 21:45:06 kstailey Exp $	*/
a61 1
int  bzscprint  __P((void *auxp, const char *));
d196 1
a196 13
	config_found(dp, &sc->sc_softc.sc_link, bzscprint);
}

/* print diag if pnp is NULL else just extra */
int
bzscprint(auxp, pnp)
	void *auxp;
	const char *pnp;
{
	if (pnp == NULL)
		return(UNCONF);

	return(QUIET);
@


1.4
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.3 1996/05/02 06:43:34 niklas Exp $	*/
d3 1
a3 1
/*	$NetBSD: bzsc.c,v 1.7 1996/04/21 21:10:52 veego Exp $	*/
d62 1
a62 1
int  bzscprint  __P((void *auxp, const char *)); 
d107 1
d113 6
a118 2
	if (zap->manid == 0x2140 && zap->prodid == 11)
		return(1);
d120 7
a126 1
	return(0);
d350 1
a350 1
#ifdef M68040
@


1.3
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d1 1
a1 1
/*	$OpenBSD: bzsc.c,v 1.2 1996/04/21 22:15:00 deraadt Exp $	*/
d62 1
a62 1
int  bzscprint  __P((void *auxp, char *));
d193 1
a193 1
	char *pnp;
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 3
a3 1
/*	$OpenBSD$	*/
d88 4
a91 2
int bzsc_intr		__P((struct sfas_softc *dev));
int bzsc_setup_dma	__P((struct sfas_softc *sc, void *ptr, int len,
d95 2
a96 2
int bzsc_need_bump	__P((struct sfas_softc *sc, void *ptr, int len));
void bzsc_led_dummy	__P((struct sfas_softc *sc));
d101 4
a104 1
int bzscmatch(struct device *pdp, void *match,	void *auxp)
d106 1
a106 1
  struct zbus_args *zap;
d108 2
a109 2
  if (!is_a1200())
    return(0);
d111 3
a113 3
  zap = auxp;
  if (zap->manid == 0x2140 && zap->prodid == 11)
    return(1);
d115 1
a115 1
  return(0);
d118 5
a122 1
void bzscattach(struct device *pdp, struct device *dp, void *auxp)
a126 1
	u_int		  *pte, page;
d190 4
a193 1
int bzscprint(void *auxp, char *pnp)
d201 3
a203 1
int bzsc_intr(struct sfas_softc *dev)
d205 1
d231 5
a235 1
void bzsc_set_dma_adr(struct sfas_softc *sc, void *ptr, int mode)
d256 4
a259 1
void bzsc_set_dma_tc(struct sfas_softc *sc, unsigned int len)
d267 6
a272 1
int bzsc_setup_dma(struct sfas_softc *sc, void *ptr, int len, int mode)
d298 5
a302 1
int bzsc_need_bump(struct sfas_softc *sc, void *ptr, int len)
d319 6
a324 2
int bzsc_build_dma_chain(struct sfas_softc *sc, struct sfas_dma_chain *chain,
			   void *p, int l)
d356 1
a356 1
		int		 len,  prelen,  postlen, max_t;
d399 3
a401 1
void bzsc_led_dummy(struct sfas_softc *sc)
@


1.1
log
@Initial revision
@
text
@d1 2
d62 1
a62 1
int  bzscmatch  __P((struct device *, struct cfdata *, void *));
d78 3
d82 3
a84 3
struct cfdriver bzsccd = {
	NULL, "bzsc", (cfmatch_t)bzscmatch, bzscattach, 
	DV_DULL, sizeof(struct bzsc_softc), NULL, 0 };
d97 1
a97 1
int bzscmatch(struct device *pdp, struct cfdata *cdp,	void *auxp)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
