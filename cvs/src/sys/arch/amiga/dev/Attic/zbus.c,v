head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.10
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.8
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.6
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	SMP:1.9.0.12
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.29.19.05.22;	author niklas;	state Exp;
branches
	1.10.10.1;
next	1.9;

1.9
date	97.09.11.07.39.55;	author niklas;	state Exp;
branches
	1.9.12.1;
next	1.8;

1.8
date	97.01.16.09.25.35;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.11.23.21.45.24;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	96.05.29.10.15.45;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.07.10.10.19;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.15.50;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.30.22.18.25;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.20.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.03;	author deraadt;	state Exp;
branches;
next	;

1.9.12.1
date	2000.03.02.07.04.26;	author niklas;	state Exp;
branches;
next	1.9.12.2;

1.9.12.2
date	2002.03.28.10.06.15;	author niklas;	state Exp;
branches;
next	1.9.12.3;

1.9.12.3
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.10.10.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.10.10.2;

1.10.10.2
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.12
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: zbus.c,v 1.11 2002/03/14 01:26:29 millert Exp $	*/
/*	$NetBSD: zbus.c,v 1.33 1997/03/27 23:50:39 veego Exp $	*/

/*
 * Copyright (c) 1994 Christian E. Hopps
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christian E. Hopps.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <machine/cpu.h>
#include <machine/pte.h>
#include <amiga/amiga/cfdev.h>
#include <amiga/amiga/device.h>
#include <amiga/dev/zbusvar.h>

struct aconfdata {
	char *name;
	int manid;
	int prodid;
};

struct preconfdata {
	int manid;
	int prodid;
	caddr_t vaddr;
};


/* 
 * explain the names.. 0123456789 => zothfisven
 */
static struct aconfdata aconftab[] = {
	/* Commodore Amiga */
	{ "atzee",	513,	1 },
	{ "atzsc",	514,	2 },
	{ "atzsc",	514,	3 },
	{ "bah",	514,	9 },	/* A2060 */
	{ "ql",		514,	69 },
	{ "ql",		514,	70 },
	{ "atfsc",	514,	84 },
	{ "le",		514,	112 },
	/* Ameristar */
	{ "le",		1053,	1 },
	{ "bah",	1053,	9 },	/* A2060 */
	{ "es",		1053,	10 },
	/* University of Lowell */
	{ "grful",	1030,	0 },
	/* DMI */
	{ "grfrs",	2129,	1 },	/* Resolver graphics board */
	/* Macrosystems */
	{ "grfrt",	18260,	6 },
	{ "grfrh",	18260,	16},	/* Retina BLT Z3 */
	{ "grfrh",	18260,	19},	/* Altais */
	/* Greater valley products */
	{ "gvpbus",	2017,	2 },
	{ "gvpbus",	2017,	11 },
	{ "giv",	2017,	32 },
	{ "gio",	2017,	255 },
	/* progressive perhiperals */
	{ "zssc",	2026,	150 },
	{ "ppia",	2026,	187 },
	{ "ppta",	2026,	105 },
	{ "ppha",	2026,	1 },
	{ "mrsc",	2026,	0 },
	/* CSA */
	{ "mgnsc",	1058,	17 },
	{ "otgsc",	1058,	21 },
	/* Microbotics */
	{ "vhzsc",	1010,	69 },
	/* Supra */
	{ "wstsc",	1056,	12 },
	{ "wstsc",	1056,	13 },
	/* IVS */
	{ "itrmp",	2112,	48 },
	{ "itrmp",	2112,	52 },
	{ "ivasc",	2112,	242 },
	{ "ivsc",	2112,	243 },
	/* Hydra */
	{ "ed",		2121,	1 },
	/* ASDG */
	{ "ed",		1023,	254 },
	/* Village Tronic Ariadne */
	{ "le",		2167,	201},
	/* Village Tronic Ariadne II */
	{ "ne",		2167,	202},
	/* bsc/Alf Data */
	{ "Tandem",	2092,    6 },	/* Tandem AT disk controler */
	{ "mfc",	2092,	16 },
	{ "mfc",	2092,	17 },
	{ "mfc",	2092,	18 },
	/* Cirrus CL GD 5426 -> Picasso, Piccolo, EGS Spectrum */
	{ "grfcl",	2167,	11},	/* PicassoII mem */
	{ "grfcl",	2167,	12},	/* PicassoII regs */
	{ "grfcl",	2167,	21},	/* PicassoIV Z2 mem1 */
	{ "grfcl",	2167,	22},	/* PicassoIV Z2 mem2 */
	{ "grfcl",	2167,	23},	/* PicassoIV Z2 regs */
	{ "grfcl",	2167,	24},	/* PicassoIV Z3 */
	{ "grfcl",	2193,	2},	/* Spectrum mem */
	{ "grfcl",	2193,	1},	/* Spectrum regs */
	{ "grfcl",	2195,	5},	/* Piccolo mem */
	{ "grfcl",	2195,	6},	/* Piccolo regs */
	{ "grfcl",	2195,	10},	/* Piccolo SD64 mem */
	{ "grfcl",	2195,	11},	/* Piccolo SD64 regs */
	/* MacroSystemsUS */
	{ "wesc",	2203,	19},	/* Warp engine */
	/* phase 5 digital products */
	{ "flmem",	8512,	10},	/* FastlaneZ3 memory */
	{ "flsc",	8512,	11},	/* FastlaneZ3 */
	{ "cbsc",	8512,	12},	/* Cyberstorm Mk I SCSI */
	{ "bzivsc",	8512,	17},	/* Blizzard IV SCSI */
	{ "bztzsc", 	8512,	24},	/* Blizzard 2060 SCSI */
	{ "cbiisc", 	8512,	25},	/* Cyberstorm Mk II SCSI */
	{ "grfcv",	8512,	34},	/* CyberVison 64 */
	/* Hacker Inc. */
	{ "mlhsc",	2011,	1 },
	/* Resource Management Force */
	{ "qn",		2011,	2 },	/* QuickNet Ethernet */
	/* ??? */
	{ "empsc",	2171,	21 },	/* Emplant SCSI */
	{ "empsc",	2171,	32 },	/* Emplant SCSI */
	/* Tseng ET4000 boards */
	{ "grfet",	2117,	3 },	/* Merlin mem */
	{ "grfet",	2117,	4 },	/* Merlin regs */
	{ "grfet",	2167,	1 },	/* Domnio mem */
	{ "grfet",	2167,	2 },	/* Domino regs */
	{ "grfet",	2167,	3 },	/* Domino regs (proto 16M) */
	{ "grfet",	2181,	0 },	/* oMniBus */
	/* Advanced Systems */
	{ "nxsc",	2102,	1 },	/* Nexus SCSI board */
	/* Masoboshi */
	{ "mcsc",	8535,	4 },	/* Masoboshi Mastercard 702 */
	/* Apollo */
	{ "apssc",	8738,	35 }	/* Apollo '060 scsi */
};
static int naconfent = sizeof(aconftab) / sizeof(struct aconfdata);

/*
 * Anything listed in this table is subject to pre-configuration,
 * if autoconf.c:config_console() calls amiga_config_found() on
 * the Zorro III device.
 */
static struct preconfdata preconftab[] = {
	{18260, 6, 0 },	/* Retina Z2 */			/* grf1 */
	{18260, 16, 0}, /* Retina BLT Z3 */		/* grf2 */
	{18260, 19, 0}, /* Altais */
	{2167,	11, 0},	/* PicassoII mem */		/* grf3 */
	{2167,	12, 0},	/* PicassoII regs */
	{2167,	21, 0},	/* PicassoIV Z2 mem1 */
	{2167,	22, 0},	/* PicassoIV Z2 mem2 */
	{2167,	23, 0},	/* PicassoIV Z2 regs */
	{2167,	24, 0},	/* PicassoIV Z3 */
	{2193,	2, 0},	/* Spectrum mem */
	{2193,	1, 0},	/* Spectrum regs */
	{2195,	5, 0},	/* Piccolo mem */
	{2195,	6, 0},	/* Piccolo regs */
	{2195,	10, 0},	/* Piccolo SD64 mem */
	{2195,	11, 0},	/* Piccolo SD64 regs */
	{1030,	0, 0},	/* Ulwl board */		/* grf4 */
	{8512,	34, 0},	/* Cybervison 64 */		/* grf5 */
	{2117,	3, 0},	/* Merlin mem */		/* grf6 */
	{2117,	4, 0},	/* Merlin regs */
	{2167,	1, 0},	/* Domino mem */
	{2167,	2, 0},	/* Domino regs */
	{2167,	3, 0},	/* Domino regs (proto 16M) */
	{2181,	0, 0}	/* oMniBus mem or regs */
};
static int npreconfent = sizeof(preconftab) / sizeof(struct preconfdata);

void zbusattach(struct device *, struct device *, void *);
int zbusprint(void *, const char *);
int zbusmatch(struct device *, void *, void *);
caddr_t zbusmap(caddr_t, u_int);
static char *aconflookup(int, int);

/*
 * given a manufacturer id and product id, find the name
 * that describes this board.
 */
static char *
aconflookup(mid, pid)
	int mid, pid;
{
	struct aconfdata *adp, *eadp;

	eadp = &aconftab[naconfent];
	for (adp = aconftab; adp < eadp; adp++)
		if (adp->manid == mid && adp->prodid == pid)
			return(adp->name);
	return("board");
}

/* 
 * mainbus driver 
 */

struct cfattach zbus_ca = {
	sizeof(struct device), zbusmatch, zbusattach
};

struct cfdriver zbus_cd = {
	NULL, "zbus", DV_DULL, NULL, 0
};

static struct cfdata *early_cfdata;

/*ARGSUSED*/
int
zbusmatch(pdp, match, auxp)
	struct device *pdp;
	void *match, *auxp;
{
	struct cfdata *cfp = match;

	if (matchname(auxp, "zbus") == 0)
		return(0);
	if (amiga_realconfig == 0)
		early_cfdata = cfp;
	return(1);
}

/*
 * called to attach bus, we probe, i.e., scan configdev structs passed
 * in, for each found name call config_found() which will do this again
 * with that driver if matched else print a diag.
 */
void
zbusattach(pdp, dp, auxp)
	struct device *pdp, *dp;
	void *auxp;
{
	struct zbus_args za;
	struct preconfdata *pcp, *epcp;
	struct cfdev *cdp, *ecdp;

	epcp = &preconftab[npreconfent];
	ecdp = &cfdev[ncfdev];
	if (amiga_realconfig) {
		if (ZTWOMEMADDR)
			printf(": mem 0x%08lx-0x%08lx",
			    ZTWOMEMADDR, ZTWOMEMADDR + NBPG * NZTWOMEMPG - 1);
		if (ZBUSAVAIL)
			printf (": i/o size 0x%08x", ZBUSAVAIL);
		printf("\n");
	}
	for (cdp = cfdev; cdp < ecdp; cdp++) {
		for (pcp = preconftab; pcp < epcp; pcp++) {
			if (pcp->manid == cdp->rom.manid && 
			    pcp->prodid == cdp->rom.prodid)
				break;
		}
		if (amiga_realconfig == 0 && pcp >= epcp)
			continue;

		/*
		 * check if it's a Zorro II or III board and not linked into
		 * MemList (i.e. not a memory board)
		 */
		if ((cdp->rom.type & 0xe0) != 0xc0 &&
		    (cdp->rom.type & 0xe0) != 0x80)
			continue;	/* er_Type != Zorro I/O */

		za.pa = cdp->addr;
		za.size = cdp->size;
		if (amiga_realconfig && pcp < epcp && pcp->vaddr)
			za.va = pcp->vaddr;
		else {
			za.va = (void *) (isztwopa(za.pa) ? ztwomap(za.pa) 
			    : zbusmap(za.pa, za.size));
/*                     		??????? */
			/*
			 * save value if early console init 
			 */
			if (amiga_realconfig == 0)
				pcp->vaddr = za.va;
		}
		za.manid = cdp->rom.manid;
		za.prodid = cdp->rom.prodid;
		za.serno = cdp->rom.serno;
		za.slot = (((u_long)za.pa >> 16) & 0xF) - 0x9;
		amiga_config_found(early_cfdata, dp, &za, zbusprint);
	}
}

/*
 * print configuration info.
 */
int
zbusprint(auxp, pnp)
	void *auxp;
	const char *pnp;
{
	struct zbus_args *zap;
	int rv;

	rv = UNCONF;
	zap = auxp;

	if (pnp) {
		printf("%s at %s:", aconflookup(zap->manid, zap->prodid),
		    pnp);
		if (zap->manid == -1)
			rv = UNSUPP;
	}
	printf(" rom %p man/pro %d/%d", zap->pa, zap->manid, zap->prodid);
	return(rv);
}

/*
 * this function is used to map Zorro physical I/O addresses into kernel
 * virtual addresses. We don't keep track which address we map where, we don't
 * NEED to know this. We made sure in amiga_init.c (by scanning all available
 * Zorro devices) to have enough kva-space available, so there is no extra
 * range check done here.
 */
caddr_t
zbusmap (pa, size)
	caddr_t pa;
	u_int size;
{
	static vm_offset_t nextkva = 0;
	vm_offset_t kva;

	if (nextkva == 0)
		nextkva = ZBUSADDR;

	if (nextkva > ZBUSADDR + ZBUSAVAIL)
		return 0;

	/* size better be an integral multiple of the page size... */
	kva = nextkva;
	nextkva += size;
	if (nextkva > ZBUSADDR + ZBUSAVAIL)
		panic("allocating too much Zorro I/O address space");
	physaccess((caddr_t)kva, (caddr_t)pa, size, PG_RW|PG_CI);
	return((caddr_t)kva);
}
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.10 2000/02/29 19:05:22 niklas Exp $	*/
@


1.10
log
@This one is for jj: The AriadneII driver, adapted from Bernd Enesti's
NetBSD driver
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.9 1997/09/11 07:39:55 niklas Exp $	*/
d195 5
a199 5
void zbusattach __P((struct device *, struct device *, void *));
int zbusprint __P((void *, const char *));
int zbusmatch __P((struct device *, void *, void *));
caddr_t zbusmap __P((caddr_t, u_int));
static char *aconflookup __P((int, int));
@


1.10.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.10 2000/02/29 19:05:22 niklas Exp $	*/
d195 5
a199 5
void zbusattach(struct device *, struct device *, void *);
int zbusprint(void *, const char *);
int zbusmatch(struct device *, void *, void *);
caddr_t zbusmap(caddr_t, u_int);
static char *aconflookup(int, int);
@


1.10.10.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.10.10.1 2002/06/11 03:34:58 art Exp $	*/
@


1.9
log
@from NetBSD: new and altered devices, some reorg
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.8 1997/01/16 09:25:35 niklas Exp $	*/
d110 2
@


1.9.12.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a109 2
	/* Village Tronic Ariadne II */
	{ "ne",		2167,	202},
@


1.9.12.2
log
@Merge in -current from about a week ago
@
text
@d195 5
a199 5
void zbusattach(struct device *, struct device *, void *);
int zbusprint(void *, const char *);
int zbusmatch(struct device *, void *, void *);
caddr_t zbusmap(caddr_t, u_int);
static char *aconflookup(int, int);
@


1.9.12.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.9.12.2 2002/03/28 10:06:15 niklas Exp $	*/
@


1.8
log
@Sync to NetBSD 970110
@
text
@d1 2
a2 2
/*	$OpenBSD: zbus.c,v 1.7 1996/11/23 21:45:24 kstailey Exp $	*/
/*	$NetBSD: zbus.c,v 1.31 1997/01/06 18:05:15 is Exp $	*/
d109 1
a109 1
	{ "ae",		2167,	201},
d116 6
a121 2
	{ "grfcl",	2167,	11},	/* Picasso-II mem*/
	{ "grfcl",	2167,	12},	/* regs */
d146 2
a147 1
	{ "grfet",	2181,	0 },	/* oMniBus */
d150 2
a151 2
	{ "grfet",	2117,	3 },	/* Merlin mem */
	{ "grfet",	2117,	4 },	/* Merlin regs */
d167 2
a168 2
	{18260, 6, 0 },	/* Retina Z2 */
	{18260, 16, 0}, /* Retina BLT Z3 */
d170 6
a175 2
	{2167,	11, 0},	/* Picasso-II mem*/
	{2167,	12, 0},	/* Picasso-II regs */
d182 4
a185 4
	{1030,	0, 0},	/* Ulwl board */
	{8512,	34, 0},	/* Cybervison 64 */
	{8512,  34, 0}, /* Cybervison 64 */
	{2181,	0, 0},	/* oMniBus mem or regs */
d188 2
a189 2
	{2117,	3, 0},	/* Merlin mem */
	{2117,	4, 0}	/* Merlin regs */
a191 1

@


1.7
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: zbus.c,v 1.6 1996/05/29 10:15:45 niklas Exp $	*/
/*	$NetBSD: zbus.c,v 1.19 1996/05/19 21:06:09 veego Exp $	*/
a59 1
	{ "atfsc",	514,	84 },
d61 1
a63 1
	{ "le",		514,	112 },
d66 2
d74 2
d107 1
a107 1
	{ "ed",		9999,	9 },		/* XXXX */
d111 1
d129 4
a133 2
	/* Commodore Amiga */
	{ "afsc",	514,	84},	/* A4091 SCSI HD Controller */
d140 1
d146 7
a152 1
	{ "grfet",	2117,	4 }	/* Merlin regs */
@


1.6
log
@Merge of 960526 NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.4 1996/04/21 22:15:50 deraadt Exp $	*/
d173 1
a173 1
int zbusprint __P((void *, char *));
d293 1
a293 1
	char *pnp;
@


1.5
log
@RCS ID update
@
text
@d2 1
a2 1
/*	$NetBSD: zbus.c,v 1.17 1996/03/28 18:41:49 is Exp $	*/
d118 2
d133 7
a139 1
	{ "empsc",	2171,	21 }	/* Emplant SCSI */
d153 1
a153 1
	{2167,	12, 0},	/* regs */
d158 2
d161 7
a167 1
	{8512,	34, 0}	/* Cybervison 64 */
d270 3
a272 3
			za.va = (void *) (isztwopa(za.pa) ? ztwomap(za.pa) :
			    zbusmap(za.pa, za.size));
/*                          ??????? */
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: zbus.c,v 1.3 1996/03/30 22:18:25 niklas Exp $	*/
@


1.3
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: zbus.c,v 1.15 1996/03/06 20:13:32 is Exp $	*/
d129 3
a131 1
	{ "qn",		2011,	2 }	/* QuickNet Ethernet */
d158 1
a158 1
int zbusmatch __P((struct device *, struct cfdata *,void *));
d182 7
a188 3
struct cfdriver zbuscd = {
	NULL, "zbus", (cfmatch_t)zbusmatch, zbusattach, 
	DV_DULL, sizeof(struct device), NULL, 0
d195 1
a195 1
zbusmatch(pdp, cfp, auxp)
d197 1
a197 2
	struct cfdata *cfp;
	void *auxp;
d199 2
d296 5
a300 5
 * this function is used to map Zorro physical I/O addresses into kernel virtual
 * addresses. We don't keep track which address we map where, we don't NEED
 * to know this. We made sure in amiga_init.c (by scanning all available Zorro
 * devices) to have enough kva-space available, so there is no extra range
 * check done here.
@


1.2
log
@from netbsd: fixup the table (pr#980) from Ignatios Souvatzis
@
text
@d1 2
a2 1
/*	$NetBSD: zbus.c,v 1.13 1995/12/27 07:31:58 chopps Exp $	*/
d35 1
d76 1
d139 3
a141 3
	{ 18260, 6, 0 },
	/* Retina BLT Z3 */
	{ 18260, 16, 0},
d148 2
a149 1
	{1030,	0, 0}	/* Ulwl board */
d219 1
a219 1
			printf(": mem 0x%08x-0x%08x",
d284 1
a284 1
	printf(" rom 0x%x man/pro %d/%d", zap->pa, zap->manid, zap->prodid);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: zbus.c,v 1.12 1995/10/09 02:08:50 chopps Exp $	*/
d61 1
d67 1
d69 1
a69 1
	/* Univeristy of lowell */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
