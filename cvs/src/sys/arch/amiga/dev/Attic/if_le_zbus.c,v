head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.18
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.16
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.14
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.12
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.10
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.8
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.09.16.22.41.16;	author jason;	state Exp;
branches
	1.8.8.1
	1.8.18.1;
next	1.7;

1.7
date	97.08.08.08.30.14;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.01.16.09.24.45;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.09.22.43.24;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.05.02.06.44.06;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.15.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.20.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.59;	author deraadt;	state Exp;
branches;
next	;

1.8.8.1
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.8.8.2;

1.8.8.2
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.8.18.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.8.18.2;

1.8.18.2
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.10
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: if_le_zbus.c,v 1.9 2002/03/14 01:26:29 millert Exp $	*/
/*	$NetBSD: if_le.c,v 1.22 1996/12/23 09:10:18 veego Exp $	*/

/*-
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_le.c	8.2 (Berkeley) 11/16/93
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>

#include <net/if.h>

#ifdef INET
#include <netinet/in.h>
#include <netinet/if_ether.h>
#endif

#include <net/if_media.h>

#include <machine/cpu.h>
#include <machine/mtpr.h>

#include <amiga/amiga/device.h>
#include <amiga/amiga/isr.h>

#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

#include <amiga/dev/zbusvar.h>
#include <amiga/dev/if_levar.h>

/* offsets for:	   ID,   REGS,    MEM */
int	lestd[] = { 0, 0x4000, 0x8000 };

int le_zbus_match(struct device *, void *, void *);
void le_zbus_attach(struct device *, struct device *, void *);

struct cfattach le_zbus_ca = {
	sizeof(struct le_softc), le_zbus_match, le_zbus_attach
};

hide void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);

hide void
lewrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
{
	struct lereg1 *ler1 = ((struct le_softc *)sc)->sc_r1;

	ler1->ler1_rap = port;
	ler1->ler1_rdp = val;
}

hide u_int16_t
lerdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
{
	struct lereg1 *ler1 = ((struct le_softc *)sc)->sc_r1;
	u_int16_t val;

	ler1->ler1_rap = port;
	val = ler1->ler1_rdp;
	return (val);
}

int
le_zbus_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct zbus_args *zap = aux;

	/* Commodore ethernet card */
	if (zap->manid == 514 && zap->prodid == 112)
		return (1);

	/* Ameristar ethernet card */
	if (zap->manid == 1053 && zap->prodid == 1)
		return (1);

	return (0);
}

void
le_zbus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct le_softc *lesc = (struct le_softc *)self;
	struct am7990_softc *sc = &lesc->sc_am7990;
	struct zbus_args *zap = aux;
	u_long ser;

	lesc->sc_r1 = (struct lereg1 *)(lestd[1] + (int)zap->va);
	sc->sc_mem = (void *)(lestd[2] + (int)zap->va);

	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;

	sc->sc_rdcsr = lerdcsr;
	sc->sc_wrcsr = lewrcsr;
	sc->sc_hwreset = NULL;
	sc->sc_hwinit = NULL;

	sc->sc_conf3 = LE_C3_BSWP;
	sc->sc_addr = 0x8000;

	/*
	 * Manufacturer decides the 3 first bytes, i.e. ethernet vendor ID.
	 */
	switch (zap->manid) {
	case 514:
		/* Commodore */
		sc->sc_memsize = 32768;
		sc->sc_arpcom.ac_enaddr[0] = 0x00;
		sc->sc_arpcom.ac_enaddr[1] = 0x80;
		sc->sc_arpcom.ac_enaddr[2] = 0x10;
		break;

	case 1053:
		/* Ameristar */
		sc->sc_memsize = 32768;
		sc->sc_arpcom.ac_enaddr[0] = 0x00;
		sc->sc_arpcom.ac_enaddr[1] = 0x00;
		sc->sc_arpcom.ac_enaddr[2] = 0x9f;
		break;

	default:
		panic("le_zbus_attach: bad manid");
	}

	/*
	 * Serial number for board is used as host ID.
	 */
	ser = (u_long)zap->serno;
	sc->sc_arpcom.ac_enaddr[3] = (ser >> 16) & 0xff;
	sc->sc_arpcom.ac_enaddr[4] = (ser >>  8) & 0xff;
	sc->sc_arpcom.ac_enaddr[5] = (ser      ) & 0xff;

	am7990_config(sc);

	lesc->sc_isr.isr_intr = am7990_intr;
	lesc->sc_isr.isr_arg = sc;
	lesc->sc_isr.isr_ipl = 2;
	add_isr(&lesc->sc_isr);
}
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_zbus.c,v 1.8 1998/09/16 22:41:16 jason Exp $	*/
@


1.8
log
@o if_media'fied am7990
o if_media'fied sun4m le.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_zbus.c,v 1.7 1997/08/08 08:30:14 downsj Exp $	*/
d76 2
a77 2
int le_zbus_match __P((struct device *, void *, void *));
void le_zbus_attach __P((struct device *, struct device *, void *));
d83 2
a84 2
hide void lewrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
hide u_int16_t lerdcsr __P((struct am7990_softc *, u_int16_t));
@


1.8.18.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_zbus.c,v 1.8 1998/09/16 22:41:16 jason Exp $	*/
d76 2
a77 2
int le_zbus_match(struct device *, void *, void *);
void le_zbus_attach(struct device *, struct device *, void *);
d83 2
a84 2
hide void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
@


1.8.18.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_zbus.c,v 1.8.18.1 2002/06/11 03:34:58 art Exp $	*/
@


1.8.8.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 2
a77 2
int le_zbus_match(struct device *, void *, void *);
void le_zbus_attach(struct device *, struct device *, void *);
d83 2
a84 2
hide void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
@


1.8.8.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_zbus.c,v 1.8.8.1 2002/03/28 10:06:14 niklas Exp $	*/
@


1.7
log
@Initialize hwreset.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.6 1997/01/16 09:24:45 niklas Exp $	*/
d58 2
@


1.6
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.3 1996/04/21 22:15:28 deraadt Exp $	*/
d147 1
@


1.5
log
@From NetBSD:
Make the MI LANCE driver standalone, and use cfattach to resolve
naming conflicts between bus attachments on ports that can have
multiple instances of the LANCE.
@
text
@d2 1
a2 1
/*	$NetBSD: if_le.c,v 1.21 1996/05/07 00:35:07 thorpej Exp $	*/
@


1.4
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d2 1
a2 1
/*	$NetBSD: if_le.c,v 1.20 1996/04/22 02:33:08 christos Exp $	*/
d64 4
a69 3
#include <dev/ic/am7990reg.h>
#define LE_NEED_BUF_CONTIG
#include <dev/ic/am7990var.h>
a73 3
#define	LE_SOFTC(unit)	le_cd.cd_devs[unit]
#define	LE_DELAY(x)	DELAY(x)

a75 1
int leintr __P((void *));
d81 2
a82 9
struct cfdriver le_cd = {
	NULL, "le", DV_IFNET
};

integrate void
lehwinit(sc)
	struct le_softc *sc;
{
}
d84 1
a84 1
integrate void
d86 1
a86 1
	struct le_softc *sc;
d89 1
a89 1
	struct lereg1 *ler1 = sc->sc_r1;
d95 1
a95 1
integrate u_int16_t
d97 1
a97 1
	struct le_softc *sc;
d100 1
a100 1
	struct lereg1 *ler1 = sc->sc_r1;
d131 2
a132 1
	struct le_softc *sc = (void *)self;
d136 1
a136 1
	sc->sc_r1 = (struct lereg1 *)(lestd[1] + (int)zap->va);
d145 4
d173 1
a173 1
		panic("leattach: bad manid");
d184 1
a184 2
	sc->sc_arpcom.ac_if.if_name = le_cd.cd_name;
	leconfig(sc);
d186 4
a189 4
	sc->sc_isr.isr_intr = leintr;
	sc->sc_isr.isr_arg = sc;
	sc->sc_isr.isr_ipl = 2;
	add_isr(&sc->sc_isr);
a190 2

#include <dev/ic/am7990.c>
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: if_le.c,v 1.17 1996/03/17 01:17:35 thorpej Exp $	*/
d89 6
a142 2
	char *cp;
	int i;
d148 5
a152 5
	sc->sc_copytodesc = copytobuf_contig;
	sc->sc_copyfromdesc = copyfrombuf_contig;
	sc->sc_copytobuf = copytobuf_contig;
	sc->sc_copyfrombuf = copyfrombuf_contig;
	sc->sc_zerobuf = zerobuf_contig;
@


1.2
log
@from netbsd: remove uneeded routines (pr#1837) from Bernd Ernesti
@
text
@d1 2
a2 1
/*	$NetBSD: if_le.c,v 1.16 1995/12/27 07:09:37 chopps Exp $	*/
d73 1
a73 1
#define	LE_SOFTC(unit)	lecd.cd_devs[unit]
d76 2
a77 2
int lematch __P((struct device *, void *, void *));
void leattach __P((struct device *, struct device *, void *));
d80 6
a85 2
struct cfdriver lecd = {
	NULL, "le", lematch, leattach, DV_IFNET, sizeof(struct le_softc)
d113 1
a113 1
lematch(parent, match, aux)
d131 1
a131 1
leattach(parent, self, aux)
d185 1
a185 1
	sc->sc_arpcom.ac_if.if_name = lecd.cd_name;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: if_le.c,v 1.15 1995/09/29 13:51:56 chopps Exp $	*/
d66 1
a186 45
}

/*
 * Routines for accessing the transmit and receive buffers.
 */

void
copytobuf_contig(sc, from, boff, len)
	struct le_softc *sc;
	caddr_t from;
	int boff, len;
{
	volatile caddr_t buf = sc->sc_mem;

	/*
	 * Just call bcopy() to do the work.
	 */
	bcopy(from, buf + boff, len);
}

void
copyfrombuf_contig(sc, to, boff, len)
	struct le_softc *sc;
	caddr_t to;
	int boff, len;
{
	volatile caddr_t buf = sc->sc_mem;

	/*
	 * Just call bcopy() to do the work.
	 */
	bcopy(buf + boff, to, len);
}

void
zerobuf_contig(sc, boff, len)
	struct le_softc *sc;
	int boff, len;
{
	volatile caddr_t buf = sc->sc_mem;

	/*
	 * Just call bzero() to do the work.
	 */
	bzero(buf + boff, len);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
