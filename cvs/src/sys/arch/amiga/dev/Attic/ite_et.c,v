head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.22
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.20
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2002.06.11.03.25.42;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.09.18.13.39.58;	author niklas;	state Exp;
branches
	1.4.12.1
	1.4.22.1;
next	1.3;

1.3
date	97.01.16.09.24.51;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.23.18.53.09;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.05.29.10.15.29;	author niklas;	state Exp;
branches;
next	;

1.4.12.1
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.4.22.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.4.22.2;

1.4.22.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.4.22.3;

1.4.22.3
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.7
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: ite_et.c,v 1.6 2002/06/11 03:25:42 miod Exp $	*/
/*	$NetBSD: ite_et.c,v 1.3 1997/03/05 22:50:41 veego Exp $	*/

/*
 * Copyright (c) 1995 Ezra Story
 * Copyright (c) 1995 Kari Mettinen
 * Copyright (c) 1994 Markus Wild
 * Copyright (c) 1994 Lutz Vieweg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Lutz Vieweg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   
 */

#include "grfet.h"
#if NGRFET > 0

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/systm.h>
#include <dev/cons.h>
#include <machine/conf.h>
#include <machine/cpu.h>
#include <amiga/amiga/device.h>
#include <amiga/dev/grfioctl.h>
#include <amiga/dev/grfvar.h>
#include <amiga/dev/grf_etreg.h>
#include <amiga/dev/itevar.h>

#ifdef TSENGCONSOLE
int et_console = 1;
#else
int et_console = 0;
#endif

void et_init(struct ite_softc *ip);
void et_cursor(struct ite_softc *ip, int flag);
void et_deinit(struct ite_softc *ip);
void et_putc(struct ite_softc *ip, int c, int dy, int dx, int mode);
void et_clear(struct ite_softc *ip, int sy, int sx, int h, int w);
void et_scroll(struct ite_softc *ip, int sy, int sx, int count,
    int dir);
static void etbcopy(const void *src, void *dst, size_t len);


/*
 * Called to determine ite status.  Because the connection between the
 * console & ite in this driver is rather intimate, we return CN_DEAD
 * if the cl_console is not active.
 */
int
grfet_cnprobe(void)
{
	static int done;
	int rv;

	if (et_console && (done == 0))
		rv = CN_INTERNAL;
	else
		rv = CN_DEAD;

	done = 1;
	return(rv);
}


void
grfet_iteinit(gp)
	struct grf_softc *gp;
{
	gp->g_iteinit = et_init;
	gp->g_itedeinit = et_deinit;
	gp->g_iteclear = et_clear;
	gp->g_iteputc = et_putc;
	gp->g_itescroll = et_scroll;
	gp->g_itecursor = et_cursor;
}


void
et_init(ip)
	struct ite_softc *ip;
{
	struct grfettext_mode *md;

	ip->priv = ip->grf->g_data;
	md = (struct grfettext_mode *) ip->priv;

	ip->cols = md->cols;
	ip->rows = md->rows;
}


void
et_cursor(ip, flag)
	struct ite_softc *ip;
	int flag;
{
	volatile u_char *ba = ip->grf->g_regkva;

	switch (flag) {
 	    case DRAW_CURSOR:
		/*WCrt(ba, CRT_ID_CURSOR_START, & ~0x20); */
	    case MOVE_CURSOR:
		flag = ip->curx + ip->cury * ip->cols;
		WCrt(ba, CRT_ID_CURSOR_LOC_LOW, flag & 0xff);
		WCrt(ba, CRT_ID_CURSOR_LOC_HIGH, (flag >> 8) & 0xff);
		WCrt(ba, CRT_ID_EXT_START, (flag >> (16-2)) & 0x0c);

		ip->cursorx = ip->curx;
		ip->cursory = ip->cury;
		break;
	    case ERASE_CURSOR:
		/*WCrt(ba, CRT_ID_CURSOR_START, | 0x20); */
	    case START_CURSOROPT:
	    case END_CURSOROPT:
	    default:
		break;
    	}
}


void
et_deinit(ip)
	struct ite_softc *ip;
{
	ip->flags &= ~ITE_INITED;
}


void
et_putc(ip, c, dy, dx, mode)
	struct ite_softc *ip;
	int c;
	int dy;
	int dx;
	int mode;
{
	volatile unsigned char *ba = ip->grf->g_regkva;
	unsigned char *fb = ip->grf->g_fbkva;
	unsigned char attr;
	unsigned char *cp;

	attr =(unsigned char) ((mode & ATTR_INV) ? (0x70) : (0x07));
	if (mode & ATTR_UL)     attr  = 0x01;	/* ???????? */
	if (mode & ATTR_BOLD)   attr |= 0x08;
	if (mode & ATTR_BLINK)  attr |= 0x80;

	cp = fb + ((dy * ip->cols) + dx);
	SetTextPlane(ba,0x00);
	*cp = (unsigned char) c;
	SetTextPlane(ba,0x01);
	*cp = (unsigned char) attr;
}


void
et_clear(ip, sy, sx, h, w)
	struct ite_softc *ip;
	int sy;
	int sx;
	int h;
	int w;
{
	/* cl_clear and cl_scroll both rely on ite passing arguments
	 * which describe continuous regions.  For a VT200 terminal,
	 * this is safe behavior.
	 */
	unsigned char *src, *dst;
	volatile unsigned char *ba = ip->grf->g_regkva;
	int len;

	dst = ip->grf->g_fbkva + (sy * ip->cols) + sx;
	src = dst + (ip->rows*ip->cols); 
	len = w*h;

	SetTextPlane(ba, 0x00);
	etbcopy(src, dst, len);
	SetTextPlane(ba, 0x01);
	etbcopy(src, dst, len);
}


void
et_scroll(ip, sy, sx, count, dir)
	struct ite_softc *ip;
	int sy;
	int sx;
	int count;
	int dir;
{
	unsigned char *fb;
	volatile unsigned char *ba = ip->grf->g_regkva;

	fb = ip->grf->g_fbkva + sy * ip->cols;
	SetTextPlane(ba, 0x00);

	switch (dir) {
	    case SCROLL_UP:
		etbcopy(fb, fb - (count * ip->cols), 
		    (ip->bottom_margin + 1 - sy) * ip->cols);
		break;
	    case SCROLL_DOWN:
		etbcopy(fb, fb + (count * ip->cols),
		    (ip->bottom_margin + 1 - (sy + count)) * ip->cols);
		break;
	    case SCROLL_RIGHT:
		etbcopy(fb+sx, fb+sx+count, ip->cols - (sx + count));
		break;
	    case SCROLL_LEFT:
		etbcopy(fb+sx, fb+sx-count, ip->cols - sx);
		break;
	}

	SetTextPlane(ba, 0x01);

	switch (dir) {
	    case SCROLL_UP:
		etbcopy(fb, fb - (count * ip->cols), 
		    (ip->bottom_margin + 1 - sy) * ip->cols);
		break;
	    case SCROLL_DOWN:
		etbcopy(fb, fb + (count * ip->cols),
		    (ip->bottom_margin + 1 - (sy + count)) * ip->cols);
		break;
	    case SCROLL_RIGHT:
		etbcopy(fb+sx, fb+sx+count, ip->cols - (sx + count));
		break;
	    case SCROLL_LEFT:
		etbcopy(fb+sx, fb+sx-count, ip->cols - sx);
		break;
	}
}


static void etbcopy(src, dst, len)
	const void *src;
	void *dst;
	size_t len;
{
	int i;

	if (src == dst)
		return;

	if (src > dst)
		for (i=len; i>0; i--) {
			*((char *)dst)++ = *((char *)src)++;
		}
	else {
		((char *)src) += len;
		((char *)dst) += len;
		
		for (i=len; i>0; i--){
			*--((char *)dst) = *--((char *)src);
		}
	}
}

#endif /* NGRFET */
@


1.6
log
@Include <sys/conf.h> from <machine/conf.h> like in other arches.  Changes
to come soon depend on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.5 2002/03/14 01:26:29 millert Exp $	*/
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.4 1997/09/18 13:39:58 niklas Exp $	*/
a40 1
#include <sys/conf.h>
d47 1
@


1.4
log
@Merge of NetBSD changes upto last week or so, with the exception of stand/
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.3 1997/01/16 09:24:51 niklas Exp $	*/
d61 7
a67 7
void et_init __P((struct ite_softc *ip));
void et_cursor __P((struct ite_softc *ip, int flag));
void et_deinit __P((struct ite_softc *ip));
void et_putc __P((struct ite_softc *ip, int c, int dy, int dx, int mode));
void et_clear __P((struct ite_softc *ip, int sy, int sx, int h, int w));
void et_scroll __P((struct ite_softc *ip, int sy, int sx, int count,
    int dir));
@


1.4.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.4 1997/09/18 13:39:58 niklas Exp $	*/
d61 7
a67 7
void et_init(struct ite_softc *ip);
void et_cursor(struct ite_softc *ip, int flag);
void et_deinit(struct ite_softc *ip);
void et_putc(struct ite_softc *ip, int c, int dy, int dx, int mode);
void et_clear(struct ite_softc *ip, int sy, int sx, int h, int w);
void et_scroll(struct ite_softc *ip, int sy, int sx, int count,
    int dir);
@


1.4.22.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.4.22.1 2002/06/11 03:34:58 art Exp $	*/
d41 1
a47 1
#include <machine/conf.h>
@


1.4.22.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.4.22.2 2002/10/29 00:28:01 art Exp $	*/
@


1.4.12.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 7
a67 7
void et_init(struct ite_softc *ip);
void et_cursor(struct ite_softc *ip, int flag);
void et_deinit(struct ite_softc *ip);
void et_putc(struct ite_softc *ip, int c, int dy, int dx, int mode);
void et_clear(struct ite_softc *ip, int sy, int sx, int h, int w);
void et_scroll(struct ite_softc *ip, int sy, int sx, int count,
    int dir);
@


1.4.12.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_et.c,v 1.4.12.1 2002/03/28 10:06:14 niklas Exp $	*/
@


1.3
log
@Sync to NetBSD 970110
@
text
@d1 2
a2 2
/*	$OpenBSD: ite_et.c,v 1.2 1996/10/08 23:18:54 thorpej Exp $	*/
/*	$NetBSD: ite_et.c,v 1.2 1996/10/08 23:18:54 thorpej Exp $	*/
d133 1
a133 1
		WCrt(ba, CTR_ID_EXT_START, (flag >> (16-2)) & 0x0c);
@


1.2
log
@Merge to late July NetBSD, more to come...
@
text
@d1 2
a2 1
/*	$NetBSD: ite_et.c,v 1.1.4.1 1996/05/27 01:12:10 is Exp $	*/
@


1.1
log
@Merge of 960526 NetBSD
@
text
@d1 1
a1 1
/*	$NetBSD: ite_et.c,v 1.1 1996/05/19 21:06:00 veego Exp $	*/
d67 1
d202 1
a202 1
	bcopy(src, dst, len);
d204 1
a204 1
	bcopy(src, dst, len);
d224 1
a224 1
		bcopy(fb, fb - (count * ip->cols), 
d228 1
a228 1
		bcopy(fb, fb + (count * ip->cols),
d232 1
a232 1
		bcopy(fb+sx, fb+sx+count, ip->cols - (sx + count));
d235 1
a235 1
		bcopy(fb+sx, fb+sx-count, ip->cols - sx);
d243 1
a243 1
		bcopy(fb, fb - (count * ip->cols), 
d247 1
a247 1
		bcopy(fb, fb + (count * ip->cols),
d251 1
a251 1
		bcopy(fb+sx, fb+sx+count, ip->cols - (sx + count));
d254 1
a254 1
		bcopy(fb+sx, fb+sx-count, ip->cols - sx);
d258 26
@
