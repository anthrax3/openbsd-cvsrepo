head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.27.05.44.44;	author nate;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	96.05.02.06.44.33;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.50.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.02;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.07.04.10.15.13;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.3.4.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.6
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: sfasvar.h,v 1.5 2002/03/15 01:20:04 millert Exp $	*/
/*	$NetBSD: sfasvar.h,v 1.4 1996/04/21 21:12:33 veego Exp $	*/

/*
 * Copyright (c) 1995 Daniel Widenfalk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Daniel Widenfalk
 *      for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SFASVAR_H_
#define _SFASVAR_H_

#ifndef _SFASREG_H_
#include <amiga/dev/sfasreg.h>
#endif

/*
 * Do not define if we don't need the vm FIX
 */
#define SFAS_NEED_VM_PATCH	1

/*
 * MAXCHAIN is the anticipated maximum number of chain blocks needed. This
 * assumes that we are NEVER requested to transfer more than MAXPHYS bytes.
 */
#define MAXCHAIN	(MAXPHYS/NBPG+2)

/*
 * Maximum number of requests standing by. Could be anything, but I think 9
 * looks nice :-) NOTE: This does NOT include requests already started!
 */
#define MAXPENDING	9	/* 7 IDs + 2 extra */

/*
 * DMA chain block. If flg == SFAS_CHAIN_PRG or flg == SFAS_CHAIN_BUMP then
 * ptr is a VIRTUAL adress. If flg == SFAS_CHAIN_DMA then ptr is a PHYSICAL
 * adress.
 */
struct	sfas_dma_chain {
	vm_offset_t	ptr;
	u_short		len;
	short		flg;
};
#define SFAS_CHAIN_DMA	0x00
#define SFAS_CHAIN_BUMP	0x01
#define SFAS_CHAIN_PRG	0x02

/*
 * This is the data that we need for the vm FIX. offset is the offset into
 * the first page. pa is the physical adress of each page. pages is the number
 * of slots used in pa. If pages == 0 the we don't need the FIX right now.
 */
#ifdef SFAS_NEED_VM_PATCH
struct	vm_link_data {
	vm_offset_t	pa[MAXCHAIN];
	short		offset;
	short		pages;
};
#endif

/*
 * This struct contains the necessary info for a pending request. Pointer to
 * a scsi_xfer struct and an optional vm_link_data.
 */
struct	sfas_pending {
	TAILQ_ENTRY(sfas_pending) link;
	struct scsi_xfer	 *xs;
#ifdef SFAS_NEED_VM_PATCH
	struct vm_link_data	  vm_link_data;
#endif
};

/*
 * nexus contains all active data for one SCSI unit. Parts of the info in this
 * struct survives between scsi commands.
 */
struct nexus {
	struct	scsi_xfer 	*xs;		/* Pointer to request */

	u_char			 ID;		/* ID message to be sent */
	u_char			 clen;		/* scsi command length + */
	u_char			 cbuf[14];	/* the actual command bytes */

	struct sfas_dma_chain	 dma[MAXCHAIN];	/* DMA chain blocks */
	short			 max_link;	/* Maximum used of above */
	short			 cur_link;	/* Currently handled block */

	u_char			*buf;		/* Virtual adress of data */
	int			 len;		/* Bytes left to transfer */

	vm_offset_t		 dma_buf;	/* Current DMA adress */
	int			 dma_len;	/* Current DMA length */

	vm_offset_t		 dma_blk_ptr;	/* Current chain adress */
	int			 dma_blk_len;	/* Current chain length */
	u_char			 dma_blk_flg;	/* Current chain flags */

	u_char			 state;		/* Nexus state, see below */
	u_short			 flags;		/* Nexus flags, see below */

	short			 period;	/* Sync period to request */
	u_char			 offset;	/* Sync offset to request */

	u_char			 syncper;	/* FAS216 variable storage */
	u_char			 syncoff;	/* FAS216 variable storage */
	u_char			 config3;	/* FAS216 variable storage */

	u_char			 lun_unit;	/* (Lun<<4) | Unit of nexus */
	u_char			 status;	/* Status byte from unit*/

#ifdef SFAS_NEED_VM_PATCH
	struct vm_link_data	 vm_link_data;	/* Optional vm FIX data */
#endif
};

/* SCSI nexus_states */
#define SFAS_NS_IDLE		0	/* Nexus idle */
#define SFAS_NS_SELECTED	1	/* Last command was a SELECT command */
#define SFAS_NS_DATA_IN		2	/* Last command was a TRANSFER_INFO */
					/* command during a data in phase */
#define SFAS_NS_DATA_OUT	3	/* Last command was a TRANSFER_INFO */
					/* command during a data out phase */
#define SFAS_NS_STATUS		4	/* We have send a COMMAND_COMPLETE */
					/* command and are awaiting status */
#define SFAS_NS_MSG_IN		5	/* Last phase was MESSAGE IN */
#define SFAS_NS_MSG_OUT		6	/* Last phase was MESSAGE OUT */
#define SFAS_NS_SVC		7	/* We have sent the command */
#define SFAS_NS_DISCONNECTING	8	/* We have received a disconnect msg */
#define SFAS_NS_DISCONNECTED	9	/* We are disconnected */
#define SFAS_NS_RESELECTED	10	/* We was reselected */
#define SFAS_NS_DONE		11	/* Done. Prephsase to FINISHED */
#define SFAS_NS_FINISHED	12	/* Realy done. Call scsi_done */
#define SFAS_NS_SENSE		13	/* We are requesting sense */
#define SFAS_NS_RESET		14	/* We are reseting this unit */

/* SCSI nexus flags */
#define SFAS_NF_UNIT_BUSY	0x0001	/* Unit is not available */

#define SFAS_NF_SELECT_ME	0x0002	/* Nexus is set up, waiting for bus */

#define SFAS_NF_REQUEST_SENSE	0x0004	/* We should request sense */
#define SFAS_NF_SENSING		0x0008	/* We are sensing */

#define SFAS_NF_HAS_MSG		0x0010	/* We have received a complete msg */

#define SFAS_NF_DO_SDTR		0x0020	/* We should send a SDTR */
#define SFAS_NF_SDTR_SENT	0x0040	/* We have sent a SDTR */
#define SFAS_NF_SYNC_TESTED	0x0080	/* We have negotiated sync */

#define SFAS_NF_RESET		0x0100	/* Reset this nexus */
#define SFAS_NF_IMMEDIATE	0x0200	/* We are operating from sfasicmd */

#define SFAS_NF_DEBUG		0x8000	/* As it says: DEBUG */

struct	sfas_softc {
	struct	device		 sc_dev;	/* System required struct */
	struct	scsi_link	 sc_link;	/* For sub devices */
	struct	isr		 sc_isr;	/* Interrupt chain struct */

	TAILQ_HEAD(,sfas_pending) sc_xs_pending;
	TAILQ_HEAD(,sfas_pending) sc_xs_free;
	struct	sfas_pending 	 sc_xs_store[MAXPENDING];

	sfas_regmap_p		 sc_fas;	/* FAS216 Address */
	void			*sc_spec;	/* Board-specific data */

#ifdef SFAS_NEED_VM_PATCH
	u_char			*sc_vm_link;
#endif

	u_char			*sc_bump_va;	/* Bumpbuf virtual adr */
	vm_offset_t		 sc_bump_pa;	/* Bumpbuf physical adr */
	int			 sc_bump_sz;	/* Bumpbuf size */

/* Configuration registers, must be set BEFORE sfasinitialize */
	u_char			 sc_clock_freq;
	u_short			 sc_timeout;
	u_char			 sc_host_id;
	u_char			 sc_config_flags;

/* Generic DMA functions */
	int		       (*sc_setup_dma)(struct sfas_softc *sc,
				    vm_offset_t ptr, int len, int mode);
	int		       (*sc_build_dma_chain)(struct sfas_softc *sc,
				    struct sfas_dma_chain *chain,
				    void *p, int l);
	int		       (*sc_need_bump)(struct sfas_softc *sc,
				    vm_offset_t ptr, int len);

/* Generic Led data */
	int			 sc_led_status;
	void			(*sc_led)(struct sfas_softc *sc, int mode);

/* Nexus list */
	struct nexus		 sc_nexus[8];
	struct nexus		*sc_cur_nexus;
	struct nexus		*sc_sel_nexus;

/* Current transfer data */
#ifdef SFAS_NEED_VM_PATCH
	short			 sc_vm_link_pages;
#endif

	u_char			*sc_buf;	/* va */
	int			 sc_len;

	vm_offset_t		 sc_dma_buf;	/* pa */
	int			 sc_dma_len;
	vm_offset_t		 sc_dma_blk_ptr;
	int			 sc_dma_blk_len;
	short			 sc_dma_blk_flg;

	struct sfas_dma_chain	*sc_chain;	/* Current DMA chain */
	short			 sc_max_link;
	short			 sc_cur_link;

/* Interrupt registers */
	u_char			 sc_status;
	u_char			 sc_interrupt;
	u_char			 sc_resel[2];

	u_char			 sc_units_disconnected;

/* Storage for FAS216 config registers (current values) */
	u_char			 sc_config1;
	u_char			 sc_config2;
	u_char			 sc_config3;
	u_char			 sc_clock_conv_fact;
	u_char			 sc_timeout_val;
	u_char			 sc_clock_period;

	u_char			 sc_msg_in[7];
	u_char			 sc_msg_in_len;

	u_char			 sc_msg_out[7];
	u_char			 sc_msg_out_len;

	u_char			 sc_unit;
	u_char			 sc_lun;
	u_char			 sc_flags;
};

#define SFAS_DMA_READ	0
#define SFAS_DMA_WRITE	1
#define SFAS_DMA_CLEAR	2

/* sc_flags */
#define SFAS_ACTIVE	 0x01
#define SFAS_DONT_WAIT	 0x02
#ifdef SFAS_NEED_VM_PATCH
#define SFAS_HAS_VM_LINK 0x04
#endif

/* SCSI Selection modes */
#define SFAS_SELECT	0x00	/* Normal selection: No sync, no resel */
#define SFAS_SELECT_R	0x01	/* Reselection allowed */
#define SFAS_SELECT_S	0x02	/* Synchronous transfer allowed */
#define SFAS_SELECT_I	0x04	/* Selection for sfasicmd */
#define SFAS_SELECT_K	0x08	/* Send a BUS DEVICE RESET message (Kill) */

/* Nice abbreviations of the above */
#define SFAS_SELECT_RS	(SFAS_SELECT_R|SFAS_SELECT_S)
#define SFAS_SELECT_RI	(SFAS_SELECT_R|SFAS_SELECT_I)
#define SFAS_SELECT_SI	(SFAS_SELECT_S|SFAS_SELECT_I)
#define SFAS_SELECT_RSI	(SFAS_SELECT_R|SFAS_SELECT_S|SFAS_SELECT_I)

/* sc_config_flags */
#define SFAS_NO_SYNCH	 0x01	/* Disable synchronous transfer */
#define SFAS_NO_DMA	 0x02	/* Do not use DMA! EVER! */
#define SFAS_NO_RESELECT 0x04	/* Do not allow relesection */
#define SFAS_SLOW_CABLE	 0x08	/* Cable is "unsafe" for fast scsi-2 */
#define SFAS_SLOW_START	 0x10	/* There are slow starters on the bus */

void	sfasinitialize(struct sfas_softc *sc);
void	sfas_minphys(struct buf *bp);
int	sfas_scsicmd(struct scsi_xfer *);
void	sfasintr(struct sfas_softc *dev);

#endif /* _SFASVAR_H_ */
@


1.5
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.4 2002/03/14 01:26:29 millert Exp $	*/
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.3 2001/06/27 05:44:44 nate Exp $	*/
d207 1
a207 1
					    vm_offset_t ptr, int len, int mode);
d209 2
a210 2
					    struct sfas_dma_chain *chain,
					    void *p, int l);
d212 1
a212 1
					    vm_offset_t ptr, int len);
@


1.3
log
@recieve -> receive
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.2 1996/05/02 06:44:33 niklas Exp $	*/
d206 3
a208 5
	int		       (*sc_setup_dma)
					__P((struct sfas_softc *sc,
					    vm_offset_t ptr, int len, int mode));
	int		       (*sc_build_dma_chain)
					__P((struct sfas_softc *sc,
d210 3
a212 4
					    void *p, int l));
	int		       (*sc_need_bump)
					__P((struct sfas_softc *sc,
					    vm_offset_t ptr, int len));
d216 1
a216 1
	void			(*sc_led) __P((struct sfas_softc *sc, int mode));
d298 4
a301 4
void	sfasinitialize __P((struct sfas_softc *sc));
void	sfas_minphys   __P((struct buf *bp));
int	sfas_scsicmd   __P((struct scsi_xfer *));
void	sfasintr	__P((struct sfas_softc *dev));
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.3 2001/06/27 05:44:44 nate Exp $	*/
d206 10
a215 7
	int		       (*sc_setup_dma)(struct sfas_softc *sc,
				    vm_offset_t ptr, int len, int mode);
	int		       (*sc_build_dma_chain)(struct sfas_softc *sc,
				    struct sfas_dma_chain *chain,
				    void *p, int l);
	int		       (*sc_need_bump)(struct sfas_softc *sc,
				    vm_offset_t ptr, int len);
d219 1
a219 1
	void			(*sc_led)(struct sfas_softc *sc, int mode);
d301 4
a304 4
void	sfasinitialize(struct sfas_softc *sc);
void	sfas_minphys(struct buf *bp);
int	sfas_scsicmd(struct scsi_xfer *);
void	sfasintr(struct sfas_softc *dev);
@


1.3.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.3.4.1 2002/06/11 03:34:58 art Exp $	*/
@


1.2
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d152 1
a152 1
#define SFAS_NS_DISCONNECTING	8	/* We have recieved a disconnect msg */
d168 1
a168 1
#define SFAS_NF_HAS_MSG		0x0010	/* We have recieved a complete msg */
@


1.2.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.2 1996/05/02 06:44:33 niklas Exp $	*/
d152 1
a152 1
#define SFAS_NS_DISCONNECTING	8	/* We have received a disconnect msg */
d168 1
a168 1
#define SFAS_NF_HAS_MSG		0x0010	/* We have received a complete msg */
@


1.2.16.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d206 10
a215 7
	int		       (*sc_setup_dma)(struct sfas_softc *sc,
				    vm_offset_t ptr, int len, int mode);
	int		       (*sc_build_dma_chain)(struct sfas_softc *sc,
				    struct sfas_dma_chain *chain,
				    void *p, int l);
	int		       (*sc_need_bump)(struct sfas_softc *sc,
				    vm_offset_t ptr, int len);
d219 1
a219 1
	void			(*sc_led)(struct sfas_softc *sc, int mode);
d301 4
a304 4
void	sfasinitialize(struct sfas_softc *sc);
void	sfas_minphys(struct buf *bp);
int	sfas_scsicmd(struct scsi_xfer *);
void	sfasintr(struct sfas_softc *dev);
@


1.2.16.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: sfasvar.h,v 1.2.16.2 2002/03/28 10:06:14 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 3
d206 10
a215 3
	int		       (*sc_setup_dma)();
	int		       (*sc_build_dma_chain)();
	int		       (*sc_need_bump)();
d219 1
a219 1
	void		       (*sc_led)();
d304 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
