head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.24
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.22
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.20
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.01.18.12.26.23;	author niklas;	state Exp;
branches
	1.6.14.1
	1.6.24.1;
next	1.5;

1.5
date	97.01.16.09.23.45;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.21.45.06;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.05.02.06.43.34;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.14.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.55;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2003.03.27.23.19.17;	author niklas;	state dead;
branches;
next	;

1.6.24.1
date	2002.06.11.03.34.57;	author art;	state Exp;
branches;
next	1.6.24.2;

1.6.24.2
date	2003.05.19.21.49.38;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: atzsc.c,v 1.7 2002/03/14 01:26:28 millert Exp $	*/
/*	$NetBSD: atzsc.c,v 1.22 1996/12/23 09:09:52 veego Exp $	*/

/*
 * Copyright (c) 1994 Christian E. Hopps
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)dma.c
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <amiga/amiga/custom.h>
#include <amiga/amiga/cc.h>
#include <amiga/amiga/device.h>
#include <amiga/amiga/isr.h>
#include <amiga/dev/dmavar.h>
#include <amiga/dev/sbicreg.h>
#include <amiga/dev/sbicvar.h>
#include <amiga/dev/atzscreg.h>
#include <amiga/dev/zbusvar.h>

void atzscattach(struct device *, struct device *, void *);
int atzscmatch(struct device *, void *, void *);

void atzsc_enintr(struct sbic_softc *);
void atzsc_dmastop(struct sbic_softc *);
int atzsc_dmanext(struct sbic_softc *);
int atzsc_dmaintr(void *);
int atzsc_dmago(struct sbic_softc *, char *, int, int);

#ifdef DEBUG
void atzsc_dump(void);
#endif

struct scsi_adapter atzsc_scsiswitch = {
	sbic_scsicmd,
	sbic_minphys,
	0,			/* no lun support */
	0,			/* no lun support */
};

struct scsi_device atzsc_scsidev = {
	NULL,		/* use default error handler */
	NULL,		/* do not have a start functio */
	NULL,		/* have no async handler */
	NULL,		/* Use default done routine */
};


#ifdef DEBUG
int	atzsc_dmadebug = 0;
#endif

struct cfattach atzsc_ca = {
	sizeof(struct sbic_softc), atzscmatch, atzscattach
};

struct cfdriver atzsc_cd = {
	NULL, "atzsc", DV_DULL, NULL, 0
};

/*
 * if we are an A3000 we are here.
 */
int
atzscmatch(pdp, match, auxp)
	struct device *pdp;
	void *match, *auxp;
{
	struct zbus_args *zap;

	zap = auxp;

	/*
	 * Check manufacturer and product id.
	 * I was informed that older boards can be 2 also.
	 */
	if (zap->manid == 514 && (zap->prodid == 3 || zap->prodid == 2))
		return(1);
	else
		return(0);
}

void
atzscattach(pdp, dp, auxp)
	struct device *pdp, *dp;
	void *auxp;
{
	volatile struct sdmac *rp;
	struct sbic_softc *sc;
	struct zbus_args *zap;

	zap = auxp;
	
	sc = (struct sbic_softc *)dp;
	sc->sc_cregs = rp = zap->va;
	/*
	 * disable ints and reset bank register
	 */
	rp->CNTR = CNTR_PDMD;
	rp->DAWR = DAWR_ATZSC;
	sc->sc_enintr = atzsc_enintr;
	sc->sc_dmago = atzsc_dmago;
	sc->sc_dmanext = atzsc_dmanext;
	sc->sc_dmastop = atzsc_dmastop;
	sc->sc_dmacmd = 0;

	/*
	 * only 24 bit mem.
	 */
	sc->sc_flags |= SBICF_BADDMA;
	sc->sc_dmamask = ~0x00ffffff;
#if 0
	/*
	 * If the users kva space is not ztwo try and allocate a bounce buffer. 
	 * XXX this needs to change if we move to multiple memory segments.
	 */
	if (kvtop(sc) & sc->sc_dmamask) {
		sc->sc_dmabuffer = (char *)alloc_z2mem(MAXPHYS * 8); /* XXX */
		if (isztwomem(sc->sc_dmabuffer))
			printf(" bounce pa 0x%x", kvtop(sc->sc_dmabuffer));
		else if (sc->sc_dmabuffer)
			printf(" bounce pa 0x%x",
			    PREP_DMA_MEM(sc->sc_dmabuffer));
	}
#endif
	sc->sc_sbicp = (sbic_regmap_p) ((int)rp + 0x91);
	sc->sc_clkfreq = sbic_clock_override ? sbic_clock_override : 77;
	
	printf(": dmamask 0x%lx\n", ~sc->sc_dmamask);

	sc->sc_link.adapter_softc = sc;
	sc->sc_link.adapter_target = 7;
	sc->sc_link.adapter = &atzsc_scsiswitch;
	sc->sc_link.device = &atzsc_scsidev;
	sc->sc_link.openings = 2;

	sbicinit(sc);

	sc->sc_isr.isr_intr = atzsc_dmaintr;
	sc->sc_isr.isr_arg = sc;
	sc->sc_isr.isr_ipl = 2;
	add_isr (&sc->sc_isr);

	/*
	 * attach all scsi units on us
	 */
	config_found(dp, &sc->sc_link, scsiprint);
}

void
atzsc_enintr(dev)
	struct sbic_softc *dev;
{
	volatile struct sdmac *sdp;

	sdp = dev->sc_cregs;

	dev->sc_flags |= SBICF_INTR;
	sdp->CNTR = CNTR_PDMD | CNTR_INTEN;
}

int
atzsc_dmago(dev, addr, count, flags)
	struct sbic_softc *dev;
	char *addr;
	int count, flags;
{
	volatile struct sdmac *sdp;

	sdp = dev->sc_cregs;
	/*
	 * Set up the command word based on flags
	 */
	dev->sc_dmacmd = CNTR_PDMD | CNTR_INTEN;
	if ((flags & DMAGO_READ) == 0)
		dev->sc_dmacmd |= CNTR_DDIR;
#ifdef DEBUG
	if (atzsc_dmadebug & DDB_IO)
		printf("atzsc_dmago: cmd %x\n", dev->sc_dmacmd);
#endif

	dev->sc_flags |= SBICF_INTR;
	sdp->CNTR = dev->sc_dmacmd;
	sdp->ACR = (u_int) dev->sc_cur->dc_addr;
	sdp->ST_DMA = 1;

	return(dev->sc_tcnt);
}

void
atzsc_dmastop(dev)
	struct sbic_softc *dev;
{
	volatile struct sdmac *sdp;
	int s;

	sdp = dev->sc_cregs;

#ifdef DEBUG
	if (atzsc_dmadebug & DDB_FOLLOW)
		printf("atzsc_dmastop()\n");
#endif
	if (dev->sc_dmacmd) {
		s = splbio();
		if ((dev->sc_dmacmd & (CNTR_TCEN | CNTR_DDIR)) == 0) {
			/*
			 * only FLUSH if terminal count not enabled,
			 * and reading from peripheral
			 */
			sdp->FLUSH = 1;
			while ((sdp->ISTR & ISTR_FE_FLG) == 0)
				;
		}
		/* 
		 * clear possible interrupt and stop dma
		 */
		sdp->CINT = 1;
		sdp->SP_DMA = 1;
		dev->sc_dmacmd = 0;
		splx(s);
	}
}

int
atzsc_dmaintr(arg)
	void *arg;
{
	struct sbic_softc *dev = arg;
	volatile struct sdmac *sdp;
	int stat, found;

	sdp = dev->sc_cregs;
	stat = sdp->ISTR;

	if ((stat & (ISTR_INT_F|ISTR_INT_P)) == 0)
		return (0);

#ifdef DEBUG
	if (atzsc_dmadebug & DDB_FOLLOW)
		printf("%s: dmaintr 0x%x\n", dev->sc_dev.dv_xname, stat);
#endif

	/*
	 * both, SCSI and DMA interrupts arrive here. I chose
	 * arbitrarily that DMA interrupts should have higher
	 * precedence than SCSI interrupts.
	 */
	found = 0;
	if (stat & ISTR_E_INT) {
		found++;

		sdp->CINT = 1;	/* clear possible interrupt */
	
		/*
		 * check for SCSI ints in the same go and 
		 * eventually save an interrupt
		 */
	}

	if (dev->sc_flags & SBICF_INTR && stat & ISTR_INTS)
		found += sbicintr(dev);
	return(found);
}


int
atzsc_dmanext(dev)
	struct sbic_softc *dev;
{
	volatile struct sdmac *sdp;

	sdp = dev->sc_cregs;

	if (dev->sc_cur > dev->sc_last) {
		/* shouldn't happen !! */
		printf("atzsc_dmanext at end !!!\n");
		atzsc_dmastop(dev);
		return(0);
	}
	if ((dev->sc_dmacmd & (CNTR_TCEN | CNTR_DDIR)) == 0) {
		  /* 
		   * only FLUSH if terminal count not enabled,
		   * and reading from peripheral
		   */
		sdp->FLUSH = 1;
		while ((sdp->ISTR & ISTR_FE_FLG) == 0)
			;
        }
	/* 
	 * clear possible interrupt and stop dma
	 */
	sdp->CINT = 1;	/* clear possible interrupt */
	sdp->SP_DMA = 1;	/* stop dma */
	sdp->CNTR = dev->sc_dmacmd;
	sdp->ACR = (u_int)dev->sc_cur->dc_addr;
	sdp->ST_DMA = 1;

	dev->sc_tcnt = dev->sc_cur->dc_count << 1;
	return(dev->sc_tcnt);
}

#ifdef DEBUG
void
atzsc_dump()
{
	int i;

	for (i = 0; i < atzsc_cd.cd_ndevs; ++i)
		if (atzsc_cd.cd_devs[i])
			sbic_dump(atzsc_cd.cd_devs[i]);
}
#endif
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.6 1997/01/18 12:26:23 niklas Exp $	*/
@


1.6
log
@Use scsiprint
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.5 1997/01/16 09:23:45 niklas Exp $	*/
d55 2
a56 2
void atzscattach __P((struct device *, struct device *, void *));
int atzscmatch __P((struct device *, void *, void *));
d58 5
a62 5
void atzsc_enintr __P((struct sbic_softc *));
void atzsc_dmastop __P((struct sbic_softc *));
int atzsc_dmanext __P((struct sbic_softc *));
int atzsc_dmaintr __P((void *));
int atzsc_dmago __P((struct sbic_softc *, char *, int, int));
d65 1
a65 1
void atzsc_dump __P((void));
@


1.6.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.6 1997/01/18 12:26:23 niklas Exp $	*/
d55 2
a56 2
void atzscattach(struct device *, struct device *, void *);
int atzscmatch(struct device *, void *, void *);
d58 5
a62 5
void atzsc_enintr(struct sbic_softc *);
void atzsc_dmastop(struct sbic_softc *);
int atzsc_dmanext(struct sbic_softc *);
int atzsc_dmaintr(void *);
int atzsc_dmago(struct sbic_softc *, char *, int, int);
d65 1
a65 1
void atzsc_dump(void);
@


1.6.24.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.6.24.1 2002/06/11 03:34:57 art Exp $	*/
@


1.6.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 2
a56 2
void atzscattach(struct device *, struct device *, void *);
int atzscmatch(struct device *, void *, void *);
d58 5
a62 5
void atzsc_enintr(struct sbic_softc *);
void atzsc_dmastop(struct sbic_softc *);
int atzsc_dmanext(struct sbic_softc *);
int atzsc_dmaintr(void *);
int atzsc_dmago(struct sbic_softc *, char *, int, int);
d65 1
a65 1
void atzsc_dump(void);
@


1.6.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.6.14.1 2002/03/28 10:06:14 niklas Exp $	*/
@


1.5
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.4 1996/11/23 21:45:06 kstailey Exp $	*/
a54 1
int atzscprint __P((void *auxp, const char *));
d181 1
a181 1
	config_found(dp, &sc->sc_link, atzscprint);
a182 14

/*
 * print diag if pnp is NULL else just extra
 */
int
atzscprint(auxp, pnp)
	void *auxp;
	const char *pnp;
{
	if (pnp == NULL)
		return(UNCONF);
	return(QUIET);
}

@


1.4
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: atzsc.c,v 1.3 1996/05/02 06:43:34 niklas Exp $	*/
/*	$NetBSD: atzsc.c,v 1.16 1996/04/21 21:10:51 veego Exp $	*/
@


1.3
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d1 1
a1 1
/*	$OpenBSD: atzsc.c,v 1.2 1996/04/21 22:14:59 deraadt Exp $	*/
d55 1
a55 1
int atzscprint __P((void *auxp, char *));
d191 1
a191 1
	char *pnp;
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: atzsc.c,v 1.15 1996/03/18 04:58:37 mhitch Exp $	*/
d62 1
a62 1
int atzsc_dmaintr __P((struct sbic_softc *));
d65 4
a103 1
	struct cfdata *cdp = match;
d164 1
a164 1
	printf(": dmamask 0x%x\n", ~sc->sc_dmamask);
d274 2
a275 2
atzsc_dmaintr(dev)
	struct sbic_softc *dev;
d277 1
a319 1
	int i, stat;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: atzsc.c,v 1.13 1995/09/04 13:04:42 chopps Exp $	*/
d57 1
a57 1
int atzscmatch __P((struct device *, struct cfdata *, void *));
d84 7
a90 3
struct cfdriver atzsccd = {
	NULL, "atzsc", (cfmatch_t)atzscmatch, atzscattach,
	DV_DULL, sizeof(struct sbic_softc), NULL, 0 };
d96 1
a96 1
atzscmatch(pdp, cdp, auxp)
d98 1
a98 2
	struct cfdata *cdp;
	void *auxp;
d100 1
d354 3
a356 3
	for (i = 0; i < atzsccd.cd_ndevs; ++i)
		if (atzsccd.cd_devs[i])
			sbic_dump(atzsccd.cd_devs[i]);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
