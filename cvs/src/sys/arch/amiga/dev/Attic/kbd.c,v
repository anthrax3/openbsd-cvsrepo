head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.5.0.24
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.22
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.20
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2002.06.11.03.25.43;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.01.16.09.24.55;	author niklas;	state Exp;
branches
	1.5.14.1
	1.5.24.1;
next	1.4;

1.4
date	96.05.29.10.15.33;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.02.06.44.16;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.15.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.59;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.5.24.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.5.24.2;

1.5.24.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.5.24.3;

1.5.24.3
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: kbd.c,v 1.7 2002/06/11 03:25:43 miod Exp $	*/
/*	$NetBSD: kbd.c,v 1.28 1996/12/23 09:10:22 veego Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	kbd.c
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/proc.h>
#include <sys/file.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/signalvar.h>
#include <dev/cons.h>
#include <machine/cpu.h>
#include <amiga/amiga/device.h>
#include <amiga/amiga/custom.h>
#ifdef DRACO
#include <amiga/amiga/drcustom.h>
#endif
#include <amiga/amiga/cia.h>
#include <amiga/dev/itevar.h>
#include <amiga/dev/kbdreg.h>
#include <amiga/dev/kbdmap.h>
#include <amiga/dev/event_var.h>
#include <amiga/dev/vuid_event.h>
#include "kbd.h"

#include <machine/conf.h>

struct kbd_softc {
	int k_event_mode;	/* if true, collect events, else pass to ite */
	struct evvar k_events;	/* event queue state */
#ifdef DRACO
	u_char k_rlprfx;	/* MF-II rel. prefix has been seen */
#endif
};
struct kbd_softc kbd_softc;

int kbdmatch(struct device *, void *, void *);
void kbdattach(struct device *, struct device *, void *);
void kbdintr(int);
void kbdstuffchar(u_char);

struct cfattach kbd_ca = {
	sizeof(struct device), kbdmatch, kbdattach
};

struct cfdriver kbd_cd = {
	NULL, "kbd", DV_DULL, NULL, 0
};

/*ARGSUSED*/
int
kbdmatch(pdp, match, auxp)
	struct device *pdp;
	void *match, *auxp;
{

	if (matchname((char *)auxp, "kbd"))
		return(1);
	return(0);
}

/*ARGSUSED*/
void
kbdattach(pdp, dp, auxp)
	struct device *pdp, *dp;
	void *auxp;
{
#ifdef DRACO
	/* 
	 * XXX Must be kept in sync with kbdenable() switch.
	 * XXX This should be probed, but this way we dont need to initialize
	 * the keyboards.
	 */
	switch (is_draco()) {
		case 0: 
		case 1: 
		case 2: 
			printf(": CIA A type Amiga\n");
			break;
		case 3:
		case 4:
		default:
			printf(": QuickLogic type MF-II\n");
			break;
	}
#else
	printf(": CIA A type Amiga\n");
#endif

}

/* definitions for amiga keyboard encoding. */
#define KEY_CODE(c)  ((c) & 0x7f)
#define KEY_UP(c)    ((c) & 0x80)

void
kbdenable()
{
	int s;

#ifdef DRACO
	u_char c;
#endif
	/*
	 * collides with external ints from SCSI, watch out for this when
	 * enabling/disabling interrupts there !!
	 */
	s = spltty();
#ifdef DRACO
	switch (is_draco()) {
		case 0:
			custom.intena = INTF_SETCLR | INTF_PORTS;

			ciaa.icr = CIA_ICR_IR_SC | CIA_ICR_SP;
						/* SP interrupt enable */
			ciaa.cra &= ~(1<<6);	/* serial line == input */
			break;
		case 1:
		case 2:
			/* XXX: tobedone: conditionally enable that one */
			/* XXX: for now, just enable DraCo ports and CIA */
			*draco_intena |= DRIRQ_INT2;
			ciaa.icr = CIA_ICR_IR_SC | CIA_ICR_SP;
						/* SP interrupt enable */
			ciaa.cra &= ~(1<<6);	/* serial line == input */
			break;

		case 3:
			ciaa.icr = CIA_ICR_SP;  /* CIA SP interrupt disable */
			ciaa.cra &= ~(1<<6);	/* serial line == input */
			/* FALLTHROUGH */
		case 4:
		default:
			/* XXX: for now: always enable own keyboard */

			while (draco_ioct->io_status & DRSTAT_KBDRECV) {
				c = draco_ioct->io_kbddata;
				draco_ioct->io_kbdrst = 0;
				DELAY(2000);
			}

			draco_ioct->io_control &= ~DRCNTRL_KBDINTENA;
			break;
	}
#else
	custom.intena = INTF_SETCLR | INTF_PORTS;
	ciaa.icr = CIA_ICR_IR_SC | CIA_ICR_SP;  /* SP interrupt enable */
	ciaa.cra &= ~(1<<6);		/* serial line == input */
#endif
	kbd_softc.k_event_mode = 0;
	kbd_softc.k_events.ev_io = 0;
	splx(s);
}


int
kbdopen(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{

	if (kbd_softc.k_events.ev_io)
		return EBUSY;

	kbd_softc.k_events.ev_io = p;
	ev_init(&kbd_softc.k_events);
	return (0);
}

int
kbdclose(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{

	/* Turn off event mode, dump the queue */
	kbd_softc.k_event_mode = 0;
	ev_fini(&kbd_softc.k_events);
	kbd_softc.k_events.ev_io = NULL;
	return (0);
}

int
kbdread(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	return ev_read (&kbd_softc.k_events, uio, flags);
}

int
kbdioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	register caddr_t data;
	int flag;
	struct proc *p;
{
	register struct kbd_softc *k = &kbd_softc;

	switch (cmd) {
		case KIOCTRANS:
			if (*(int *)data == TR_UNTRANS_EVENT)
				return 0;
			break;

		case KIOCGTRANS:
			/* Get translation mode */
			*(int *)data = TR_UNTRANS_EVENT;
			return 0;

		case KIOCSDIRECT:
			k->k_event_mode = *(int *)data;
			return 0;

		case FIONBIO:	/* we will remove this someday (soon???) */
			return 0;

		case FIOASYNC:
			k->k_events.ev_async = *(int *)data != 0;
			return 0;

		case TIOCSPGRP:
			if (*(int *)data != k->k_events.ev_io->p_pgid)
				return EPERM;
			return 0;

		default:
			return ENOTTY;
	}

	/* We identified the ioctl, but we do not handle it. */
	return EOPNOTSUPP;	/* misuse, but what the heck */
}

int
kbdselect(dev, rw, p)
	dev_t dev;
	int rw;
	struct proc *p;
{
	return ev_select (&kbd_softc.k_events, rw, p);
}


void
kbdintr(mask)
	int mask;
{
	u_char c;
#ifdef KBDRESET
	static int reset_warn;
#endif
 
	/* 
	 * now only invoked from generic CIA interrupt handler if there *is*
	 * a keyboard interrupt pending
	 */
    
	c = ~ciaa.sdr;	/* keyboard data is inverted */
	/* ack */
	ciaa.cra |= (1 << 6);	/* serial line output */
#ifdef KBDRESET
	if (reset_warn && c == 0xf0) {
#ifdef DEBUG
		printf ("kbdintr: !!!! Reset Warning !!!!\n");
#endif
		bootsync();
		reset_warn = 0;
		DELAY(30000000);
	}
#endif
	/* wait 200 microseconds (for bloody Cherry keyboards..) */
	DELAY(2000);			/* fudge delay a bit for some keyboards */
	ciaa.cra &= ~(1 << 6);

	/* process the character */
	c = (c >> 1) | (c << 7);	/* rotate right once */

#ifdef KBDRESET
	if (c == 0x78) {
#ifdef DEBUG
		printf ("kbdintr: Reset Warning started\n");
#endif
		++reset_warn;
		return;
	}
#endif
	kbdstuffchar(c);
}
  
#ifdef DRACO
/* maps MF-II keycodes to Amiga keycodes */

const u_char drkbdtab[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x50,
	0x45, 0xff, 0xff, 0xff, 0xff, 0x42, 0x00, 0x51,

	0xff, 0x64, 0x60, 0x30, 0x63, 0x10, 0x01, 0x52,
	0xff, 0x66, 0x31, 0x21, 0x20, 0x11, 0x02, 0x53,

	0xff, 0x33, 0x32, 0x22, 0x12, 0x04, 0x03, 0x54,
	0xff, 0x40, 0x34, 0x23, 0x14, 0x13, 0x05, 0x55,

	0xff, 0x36, 0x35, 0x25, 0x24, 0x15, 0x06, 0x56,
	0xff, 0x67, 0x37, 0x26, 0x16, 0x07, 0x08, 0x57,
	/* --- */
	0xff, 0x38, 0x27, 0x17, 0x18, 0x0a, 0x09, 0x58,
	0xff, 0x39, 0x3a, 0x28, 0x29, 0x19, 0x0b, 0x59,

	0xff, 0xff, 0x2a, 0x2b, 0x1a, 0x0c, 0x4b, 0xff,
	0x65, 0x61, 0x44, 0x1b, 0xff, 0xff, 0x6f, 0xff,

	0x4d, 0x4f, 0xff, 0x4c, 0x0d, 0xff, 0x41, 0x46,
	0xff, 0x1d, 0x4e, 0x2d, 0x3d, 0x4a, 0x5f, 0x62,

	0x0f, 0x3c, 0x1e, 0x2e, 0x2f, 0x3e, 0x5a, 0x5b,
	0xff, 0x43, 0x1f, 0xff, 0x5e, 0x3f, 0x5c, 0xff,
	/* --- */
	0xff, 0xff, 0xff, 0xff, 0x5d
};
#endif


int
kbdgetcn ()
{
	int s;
	u_char ints, mask, c, in;

#ifdef DRACO
	/*
	 * XXX todo: if CIA DraCo, get from cia if cia kbd 
	 * installed.
	 */
	if (is_draco()) {
		c = 0;
		s = spltty ();
		while ((draco_ioct->io_status & DRSTAT_KBDRECV) == 0);
		in = draco_ioct->io_kbddata;
		draco_ioct->io_kbdrst = 0;
		if (in == 0xF0) { /* release prefix */
			c = 0x80;
			while ((draco_ioct->io_status & DRSTAT_KBDRECV) == 0);
			in = draco_ioct->io_kbddata;
			draco_ioct->io_kbdrst = 0;
		}
		splx(s);
#ifdef DRACORAWKEYDEBUG
		printf("<%02x>", in);
#endif
		return (in>=sizeof(drkbdtab) ? 0xff : drkbdtab[in]|c);
	}
#endif
	s = spltty();
	for (ints = 0; ! ((mask = ciaa.icr) & CIA_ICR_SP); 
	    ints |= mask) ;

	in = ciaa.sdr;
	c = ~in;
  
	/* ack */
	ciaa.cra |= (1 << 6);	/* serial line output */
	ciaa.sdr = 0xff;	/* ack */
	/* wait 200 microseconds */
	DELAY(2000);	/* XXXX only works as long as DELAY doesn't 
			 * use a timer and waits.. */
	ciaa.cra &= ~(1 << 6);
	ciaa.sdr = in;

	splx (s);
	c = (c >> 1) | (c << 7);

	/* take care that no CIA-interrupts are lost */
	if (ints)
		dispatch_cia_ints (0, ints);

	return c;
}

void
kbdstuffchar(c)
	u_char c;
{
	struct firm_event *fe;
	struct kbd_softc *k = &kbd_softc;
	int put;

	/* 
	 * If not in event mode, deliver straight to ite to process 
	 * key stroke 
	 */

	if (! k->k_event_mode) {
		ite_filter (c, ITEFILT_TTY);
		return;
	}

	/* 
	 * Keyboard is generating events. Turn this keystroke into an
	 * event and put it in the queue. If the queue is full, the
	 * keystroke is lost (sorry!).
	 */
	
	put = k->k_events.ev_put;
	fe = &k->k_events.ev_q[put];
	put = (put + 1) % EV_QSIZE;
	if (put == k->k_events.ev_get) {
		log(LOG_WARNING, "keyboard event queue overflow\n");
			/* ??? */
		return;
	}
	fe->id = KEY_CODE(c);
	fe->value = KEY_UP(c) ? VKEY_UP : VKEY_DOWN;
	fe->time = time;
	k->k_events.ev_put = put;
	EV_WAKEUP(&k->k_events);
}


#ifdef DRACO
void
drkbdintr()
{
	u_char in;
	struct kbd_softc *k = &kbd_softc;

	in = draco_ioct->io_kbddata;
	draco_ioct->io_kbdrst = 0;

	if (in == 0xF0) 
		k->k_rlprfx = 0x80;
	else {
		kbdstuffchar(in>=sizeof(drkbdtab) ? 0xff :
		    drkbdtab[in] | k->k_rlprfx);
		k->k_rlprfx = 0;
	}
}

#endif
@


1.7
log
@Include <sys/conf.h> from <machine/conf.h> like in other arches.  Changes
to come soon depend on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.6 2002/03/14 01:26:29 millert Exp $	*/
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.5 1997/01/16 09:24:55 niklas Exp $	*/
a62 1
#include <sys/conf.h>
@


1.5
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.4 1996/05/29 10:15:33 niklas Exp $	*/
d75 4
a78 4
int kbdmatch __P((struct device *, void *, void *));
void kbdattach __P((struct device *, struct device *, void *));
void kbdintr __P((int));
void kbdstuffchar __P((u_char));
@


1.5.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.5 1997/01/16 09:24:55 niklas Exp $	*/
d75 4
a78 4
int kbdmatch(struct device *, void *, void *);
void kbdattach(struct device *, struct device *, void *);
void kbdintr(int);
void kbdstuffchar(u_char);
@


1.5.24.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.5.24.1 2002/06/11 03:34:58 art Exp $	*/
d63 1
@


1.5.24.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.5.24.2 2002/10/29 00:28:01 art Exp $	*/
@


1.5.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 4
a78 4
int kbdmatch(struct device *, void *, void *);
void kbdattach(struct device *, struct device *, void *);
void kbdintr(int);
void kbdstuffchar(u_char);
@


1.5.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: kbd.c,v 1.5.14.1 2002/03/28 10:06:14 niklas Exp $	*/
@


1.4
log
@Merge of 960526 NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: kbd.c,v 1.2 1996/04/21 22:15:33 deraadt Exp $	*/
/*	$NetBSD: kbd.c,v 1.22 1996/05/16 20:18:01 is Exp $	*/
a154 1
			printf("ok.\n");
a176 1
				printf(".");
d336 1
a336 1
u_char drkbdtab[] = {
@


1.3
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d2 1
a2 1
/*	$NetBSD: kbd.c,v 1.18 1996/04/21 21:12:05 veego Exp $	*/
d52 3
d69 3
d78 1
d106 22
a127 1
	printf("\n");
d139 3
d147 39
d189 1
a293 3
	struct kbd_softc *k = &kbd_softc;
	struct firm_event *fe;
	int put;
d298 2
a299 1
	/* now only invoked from generic CIA interrupt handler if there *is*
d332 105
a436 1
	/* if not in event mode, deliver straight to ite to process key stroke */
d442 3
a444 2
	/* Keyboard is generating events.  Turn this keystroke into an
	 * event and put it in the queue.  If the queue is full, the
d447 1
a447 1
 
d452 2
a453 1
		log(LOG_WARNING, "keyboard event queue overflow\n"); /* ??? */
d464 3
a466 2
int
kbdgetcn()
d468 2
a469 2
	int s = spltty ();
	u_char ints, mask, c, in;
d471 2
a472 1
	for (ints = 0; ! ((mask = ciaa.icr) & CIA_ICR_SP); ints |= mask) ;
d474 8
a481 2
	in = ciaa.sdr;
	c = ~in;
d483 1
a483 17
	/* ack */
	ciaa.cra |= (1 << 6);	/* serial line output */
	ciaa.sdr = 0xff;		/* ack */
	/* wait 200 microseconds */
	DELAY(2000);    /* XXXX only works as long as DELAY doesn't use a timer and waits.. */
	ciaa.cra &= ~(1 << 6);
	ciaa.sdr = in;

	splx (s);
	c = (c >> 1) | (c << 7);

	/* take care that no CIA-interrupts are lost */
	if (ints)
		dispatch_cia_ints (0, ints);

	return c;
}
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: kbd.c,v 1.17 1996/03/17 05:58:50 mhitch Exp $	*/
a43 1
#include <sys/conf.h>
d47 1
d55 1
d60 3
d71 1
a86 1
	struct cfdata *cfp = match;
d107 1
a107 1
kbdenable ()
d126 4
a129 1
kbdopen (dev_t dev, int flags, int mode, struct proc *p)
a130 1
  int s, error;
d132 2
a133 2
  if (kbd_softc.k_events.ev_io)
    return EBUSY;
d135 3
a137 3
  kbd_softc.k_events.ev_io = p;
  ev_init(&kbd_softc.k_events);
  return (0);
d141 4
a144 1
kbdclose (dev_t dev, int flags, int mode, struct proc *p)
d146 6
a151 5
  /* Turn off event mode, dump the queue */
  kbd_softc.k_event_mode = 0;
  ev_fini(&kbd_softc.k_events);
  kbd_softc.k_events.ev_io = NULL;
  return (0);
d155 4
a158 1
kbdread (dev_t dev, struct uio *uio, int flags)
d160 1
a160 1
  return ev_read (&kbd_softc.k_events, uio, flags);
d164 6
a169 1
kbdioctl(dev_t dev, u_long cmd, register caddr_t data, int flag, struct proc *p)
d171 32
a202 1
  register struct kbd_softc *k = &kbd_softc;
d204 2
a205 38
  switch (cmd) 
    {
    case KIOCTRANS:
      if (*(int *)data == TR_UNTRANS_EVENT)
	return 0;
      break;

    case KIOCGTRANS:
      /*
       * Get translation mode
       */
      *(int *)data = TR_UNTRANS_EVENT;
      return 0;

    case KIOCSDIRECT:
      k->k_event_mode = *(int *)data;
      return 0;

    case FIONBIO:		/* we will remove this someday (soon???) */
      return 0;

    case FIOASYNC:
      k->k_events.ev_async = *(int *)data != 0;
      return 0;

    case TIOCSPGRP:
      if (*(int *)data != k->k_events.ev_io->p_pgid)
	return EPERM;
      return 0;

    default:
      return ENOTTY;
    }

  /*
   * We identified the ioctl, but we do not handle it.
   */
  return EOPNOTSUPP;		/* misuse, but what the heck */
d209 4
a212 1
kbdselect (dev_t dev, int rw, struct proc *p)
d214 1
a214 1
  return ev_select (&kbd_softc.k_events, rw, p);
d218 3
a220 3
int
kbdintr (mask)
     int mask;
d222 4
a225 4
  u_char c;
  struct kbd_softc *k = &kbd_softc;
  struct firm_event *fe;
  int put;
d227 1
a227 1
  static int reset_warn;
d230 3
a232 2
  /* now only invoked from generic CIA interrupt handler if there *is*
     a keyboard interrupt pending */
d234 3
a236 3
  c = ~ciaa.sdr;	/* keyboard data is inverted */
  /* ack */
  ciaa.cra |= (1 << 6);	/* serial line output */
d238 1
a238 1
  if (reset_warn && c == 0xf0) {
d240 1
a240 1
    printf ("kbdintr: !!!! Reset Warning !!!!\n");
d242 4
a245 4
    bootsync();
    reset_warn = 0;
    DELAY(30000000);
  }
d247 6
a252 7
  /* wait 200 microseconds (for bloody Cherry keyboards..) */
  DELAY(2000);			/* fudge delay a bit for some keyboards */
  ciaa.cra &= ~(1 << 6);

  /* process the character */
  
  c = (c >> 1) | (c << 7);	/* rotate right once */
a253 1
  
d255 1
a255 1
  if (c == 0x78) {
d257 1
a257 1
    printf ("kbdintr: Reset Warning started\n");
d259 3
a261 3
    ++reset_warn;
    return;
  }
d263 23
a285 24
  /* if not in event mode, deliver straight to ite to process key stroke */
  if (! k->k_event_mode)
    {
      ite_filter (c, ITEFILT_TTY);
      return;
    }

  /* Keyboard is generating events.  Turn this keystroke into an
     event and put it in the queue.  If the queue is full, the
     keystroke is lost (sorry!). */
  
  put = k->k_events.ev_put;
  fe = &k->k_events.ev_q[put];
  put = (put + 1) % EV_QSIZE;
  if (put == k->k_events.ev_get) 
    {
      log(LOG_WARNING, "keyboard event queue overflow\n"); /* ??? */
      return;
    }
  fe->id = KEY_CODE(c);
  fe->value = KEY_UP(c) ? VKEY_UP : VKEY_DOWN;
  fe->time = time;
  k->k_events.ev_put = put;
  EV_WAKEUP(&k->k_events);
d290 1
a290 1
kbdgetcn ()
d292 4
a295 2
  int s = spltty ();
  u_char ints, mask, c, in;
d297 2
a298 1
  for (ints = 0; ! ((mask = ciaa.icr) & CIA_ICR_SP); ints |= mask) ;
d300 14
a313 17
  in = ciaa.sdr;
  c = ~in;
  
  /* ack */
  ciaa.cra |= (1 << 6);	/* serial line output */
  ciaa.sdr = 0xff;		/* ack */
  /* wait 200 microseconds */
  DELAY(2000);    /* XXXX only works as long as DELAY doesn't use a timer and waits.. */
  ciaa.cra &= ~(1 << 6);
  ciaa.sdr = in;

  splx (s);
  c = (c >> 1) | (c << 7);

  /* take care that no CIA-interrupts are lost */
  if (ints)
    dispatch_cia_ints (0, ints);
d315 1
a315 1
  return c;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: kbd.c,v 1.15 1995/05/07 15:37:11 chopps Exp $	*/
d65 1
a66 1
int kbdmatch __P((struct device *, struct cfdata *, void *));
d68 7
a74 3
struct cfdriver kbdcd = {
	NULL, "kbd", (cfmatch_t)kbdmatch, kbdattach, DV_DULL,
	sizeof(struct device), NULL, 0 };
d78 1
a78 1
kbdmatch(pdp, cfp, auxp)
d80 1
a80 2
	struct cfdata *cfp;
	void *auxp;
d82 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
