head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.07.07.46.50;	author art;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	97.01.18.12.26.27;	author niklas;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	97.01.16.09.23.58;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.21.45.07;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.29.10.14.50;	author niklas;	state Exp;
branches;
next	;

1.4.14.1
date	2001.04.18.16.02.06;	author niklas;	state Exp;
branches;
next	1.4.14.2;

1.4.14.2
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.4.14.3;

1.4.14.3
date	2003.03.27.23.19.17;	author niklas;	state dead;
branches;
next	;

1.5.6.1
date	2002.06.11.03.34.57;	author art;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.05.19.21.49.38;	author tedu;	state dead;
branches;
next	;


desc
@@


1.7
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: drsc.c,v 1.6 2002/03/14 01:26:28 millert Exp $	*/
/*	$NetBSD: drsc.c,v 1.9 1996/12/23 09:09:57 veego Exp $	*/

/*
 * Copyright (c) 1996 Ignatios Souvatzis
 * Copyright (c) 1994 Michael L. Hitch
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)dma.c
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <amiga/amiga/custom.h>
#include <amiga/amiga/cc.h>
#include <amiga/amiga/device.h>
#include <amiga/amiga/isr.h>
#include <amiga/dev/siopreg.h>
#include <amiga/dev/siopvar.h>
#include <amiga/amiga/drcustom.h>

void drscattach(struct device *, struct device *, void *);
int drscmatch(struct device *, void *, void *);
int drsc_dmaintr(struct siop_softc *);
#ifdef DEBUG
void drsc_dump(void);
#endif

struct scsi_adapter drsc_scsiswitch = {
	siop_scsicmd,
	siop_minphys,
	0,			/* no lun support */
	0,			/* no lun support */
};

struct scsi_device drsc_scsidev = {
	NULL,		/* use default error handler */
	NULL,		/* do not have a start functio */
	NULL,		/* have no async handler */
	NULL,		/* Use default done routine */
};


#ifdef DEBUG
#endif

struct cfattach drsc_ca = {
	sizeof(struct siop_softc),
	drscmatch,
	drscattach
};

struct cfdriver drsc_cd = {
	NULL, "drsc", DV_DULL, NULL, 0 
};

static struct siop_softc *drsc_softc;

/*
 * One of us is on every DraCo motherboard, 
 */
int
drscmatch(pdp, match, auxp)
	struct device *pdp;
	void *match, *auxp;
{
	struct cfdata *cfp = (struct cfdata *)match;

	if (is_draco() && matchname(auxp, "drsc") && (cfp->cf_unit == 0))
		return(1);
	return(0);
}

void
drscattach(pdp, dp, auxp)
	struct device *pdp, *dp;
	void *auxp;
{
	struct siop_softc *sc;
	struct zbus_args *zap;
	siop_regmap_p rp;

	printf("\n");

	zap = auxp;

	sc = (struct siop_softc *)dp;
	sc->sc_siopp = rp = (siop_regmap_p)(DRCCADDR+NBPG*DRSCSIPG);

	/*
	 * CTEST7 = TT1
	 */
	sc->sc_clock_freq = 50;		/* Clock = 50MHz */
	sc->sc_ctest7 = 0x02;

	alloc_sicallback();

	sc->sc_link.adapter_softc = sc;
	sc->sc_link.adapter_target = 7;
	sc->sc_link.adapter = &drsc_scsiswitch;
	sc->sc_link.device = &drsc_scsidev;
	sc->sc_link.openings = 2;

	siopinitialize(sc);

#if 0
	sc->sc_isr.isr_intr = drsc_dmaintr;
	sc->sc_isr.isr_arg = sc;
	sc->sc_isr.isr_ipl = 4;
	add_isr(&sc->sc_isr);
#else
	drsc_softc = sc;
	*draco_intpen &= ~DRIRQ_SCSI;
	*draco_intena |= DRIRQ_SCSI;
#endif
	/*
	 * attach all scsi units on us
	 */
	config_found(dp, &sc->sc_link, scsiprint);
}

/*
 * Level 4 interrupt processing for the MacroSystem DraCo mainboard
 * SCSI.  Because the level 4 interrupt is above splbio, the
 * interrupt status is saved and an sicallback to the level 2 interrupt
 * handler scheduled.  This way, the actual processing of the interrupt
 * can be deferred until splbio is unblocked.
 */

void
drsc_handler()
{
	struct siop_softc *sc = drsc_softc;

	siop_regmap_p rp;
	int istat;

	if (sc->sc_flags & SIOP_INTSOFF)
		return;		/* interrupts are not active */

	rp = sc->sc_siopp;
	istat = rp->siop_istat;

	if ((istat & (SIOP_ISTAT_SIP | SIOP_ISTAT_DIP)) == 0)
		return;

	/*
	 * save interrupt status, DMA status, and SCSI status 0
	 * (may need to deal with stacked interrupts?)
	 */
	sc->sc_sstat0 = rp->siop_sstat0;
	sc->sc_istat = istat;
	sc->sc_dstat = rp->siop_dstat;
	/*
	 * disable interrupts until the callback can process this
	 * interrupt.
	 */
#ifdef DRSC_NOCALLBACK
	/* XXX */
	(void)spl1();
	siopintr(sc);
#else
	rp->siop_sien = 0;
	rp->siop_dien = 0;
	sc->sc_flags |= SIOP_INTDEFER | SIOP_INTSOFF;
	*draco_intpen &= ~DRIRQ_SCSI;
#ifdef DEBUG
	if (*draco_intpen & DRIRQ_SCSI)
		printf("%s: intpen still 0x%x\n", sc->sc_dev.dv_xname,
		    *draco_intpen);
#endif
	add_sicallback((sifunc_t)siopintr, sc, NULL);
#endif
	return;
}

#ifdef DEBUG
void
drsc_dump()
{
	int i;

	for (i = 0; i < drsc_cd.cd_ndevs; ++i)
		if (drsc_cd.cd_devs[i])
			siop_dump(drsc_cd.cd_devs[i]);
}
#endif
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.5 2001/02/07 07:46:50 art Exp $	*/
@


1.5
log
@XXX two horrible abuses of spl.
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.4 1997/01/18 12:26:27 niklas Exp $	*/
d55 3
a57 3
void drscattach __P((struct device *, struct device *, void *));
int drscmatch __P((struct device *, void *, void *));
int drsc_dmaintr __P((struct siop_softc *));
d59 1
a59 1
void drsc_dump __P((void));
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.5 2001/02/07 07:46:50 art Exp $	*/
d55 3
a57 3
void drscattach(struct device *, struct device *, void *);
int drscmatch(struct device *, void *, void *);
int drsc_dmaintr(struct siop_softc *);
d59 1
a59 1
void drsc_dump(void);
@


1.5.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.5.6.1 2002/06/11 03:34:57 art Exp $	*/
@


1.4
log
@Use scsiprint
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.3 1997/01/16 09:23:58 niklas Exp $	*/
d192 1
@


1.4.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.5 2001/02/07 07:46:50 art Exp $	*/
a191 1
	/* XXX */
@


1.4.14.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 3
a57 3
void drscattach(struct device *, struct device *, void *);
int drscmatch(struct device *, void *, void *);
int drsc_dmaintr(struct siop_softc *);
d59 1
a59 1
void drsc_dump(void);
@


1.4.14.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.4.14.2 2002/03/28 10:06:14 niklas Exp $	*/
@


1.3
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: drsc.c,v 1.2 1996/05/19 19:03:01 is Exp $	*/
a54 1
int drscprint __P((void *auxp, const char *));
d152 1
a152 1
	config_found(dp, &sc->sc_link, drscprint);
a153 14

/*
 * print diag if pnp is NULL else just extra
 */
int
drscprint(auxp, pnp)
	void *auxp;
	const char *pnp;
{
	if (pnp == NULL)
		return(UNCONF);
	return(QUIET);
}

@


1.2
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 1
/*	$NetBSD: drsc.c,v 1.2 1996/05/19 19:03:01 is Exp $	*/
d101 3
a103 2
	struct cfdata *cdp = (struct cfdata *)match;
	if (is_draco() && (cdp->cf_unit == 0))
@


1.1
log
@Merge of 960526 NetBSD
@
text
@d54 1
a54 1
int drscprint __P((void *auxp, char *));
d160 1
a160 1
	char *pnp;
@
