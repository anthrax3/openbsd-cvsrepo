head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.3.0.26
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.24
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2002.12.31.16.35.37;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2002.06.11.03.25.42;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.05.29.10.15.28;	author niklas;	state Exp;
branches
	1.3.16.1
	1.3.26.1;
next	1.2;

1.2
date	96.05.02.06.44.12;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.03.30.22.18.21;	author niklas;	state Exp;
branches;
next	;

1.3.16.1
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.3.26.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.3.26.2;

1.3.26.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.3.26.3;

1.3.26.3
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.6
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: ite_cv.c,v 1.5 2002/06/11 03:25:42 miod Exp $	*/
/*	$NetBSD: ite_cv.c,v 1.3 1996/05/19 21:05:58 veego Exp $	*/

/*
 * Copyright (c) 1995 Michael Teske
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christian E. Hopps,
 *      Ezra Story, Kari Mettinen, Markus Wild, Lutz Vieweg
 *      and Michael Teske.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code is based on ite_cl.c and ite_rh.c by
 * Ezra Story, Kari Mettinen, Markus Wild, Lutz Vieweg.
 */

#include "grfcv.h"
#if NGRFCV > 0

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/termios.h>
#include <sys/malloc.h>
#include <dev/cons.h>
#include <machine/conf.h>
#include <machine/cpu.h>
#include <amiga/dev/itevar.h>
#include <amiga/dev/iteioctl.h>
#include <amiga/amiga/device.h> 
#include <amiga/dev/grfioctl.h>
#include <amiga/dev/grfvar.h>
#include <amiga/dev/grf_cvreg.h>

void cv_ite_init(struct ite_softc *);
void cv_ite_deinit(struct ite_softc *);
static void cv_cursor(struct ite_softc *, int);
static void cv_putc(struct ite_softc *, int, int, int, int);
static void cv_clear(struct ite_softc *, int, int, int, int);
static void cv_scroll(struct ite_softc *, int, int, int, int);

/*
 * called from grf_cv to return console priority
 */
int
grfcv_cnprobe()
{
	static int done;
	int rv;

	if (done == 0)
#ifdef CV64CONSOLE
		rv = CN_INTERNAL;
#else
		rv = CN_DEAD;
#endif
	else
#ifdef CV64CONSOLE
		rv = CN_NORMAL;
#else
		rv = CN_DEAD;
#endif
	done = 1;
	return(rv);
}


/*
 * called from grf_cv to init ite portion of
 * grf_softc struct
 */
void
grfcv_iteinit(gp)
	struct grf_softc *gp;
{
	gp->g_itecursor = cv_cursor;
	gp->g_iteputc = cv_putc;
	gp->g_iteclear = cv_clear;
	gp->g_itescroll = cv_scroll;
	gp->g_iteinit = cv_ite_init;
	gp->g_itedeinit = cv_ite_deinit;
}


void
cv_ite_deinit(ip)
	struct ite_softc *ip;
{
	ip->flags &= ~ITE_INITED;
}


static unsigned short cv_rowc[MAXCOLS*(MAXROWS+1)];

/*
 * Console buffer to avoid the slow reading from gfx mem.
 */

static unsigned short *console_buffer;

void
cv_ite_init(ip)
	register struct ite_softc *ip;
{
	struct grfcvtext_mode *md;
	int i;
	static char first = 1;
	volatile unsigned short *fb = (volatile unsigned short *)ip->grf->g_fbkva;
	unsigned short *buffer;


	ip->priv = ip->grf->g_data;
	md = (struct grfcvtext_mode *) ip->grf->g_data;

	ip->cols = md->cols;
	ip->rows = md->rows;

	/* alloc buffers */

#if 0  /* XXX malloc seems not to work in early init :( */
	if (cv_rowc)
		free(cv_rowc, M_DEVBUF);
 
	/* alloc all in one */
	cv_rowc = malloc(sizeof(short) * (ip->rows + 1) * (ip->cols + 2),
		M_DEVBUF, M_WAITOK);
	if (!cv_rowc)
		panic("No buffers for ite_cv!");
#endif
 
	console_buffer = cv_rowc + ip->rows + 1;


	for (i = 0; i < ip->rows; i++)
		cv_rowc[i] = i * ip->cols;

	if (first) {
		for (i = 0; i < ip->rows * ip->cols; i++)
			console_buffer[i] = 0x2007;
		first = 0;
	} else { /* restore console */
		buffer = console_buffer;
		for (i = 0; i < ip->rows * ip->cols; i++) {
			*fb++ = *buffer++;
			*fb++;
		}
	}
}


void
cv_cursor(ip, flag)
	struct ite_softc *ip;
	int flag;
{
	volatile caddr_t ba = ip->grf->g_regkva;

	switch (flag) {
	    case DRAW_CURSOR:
		/*WCrt(ba, CRT_ID_CURSOR_START, & ~0x20); */
	    case MOVE_CURSOR:
		flag = ip->curx + ip->cury * ip->cols;
		WCrt(ba, CRT_ID_CURSOR_LOC_LOW, flag & 0xff);
		WCrt(ba, CRT_ID_CURSOR_LOC_HIGH, flag >> 8);
		ip->cursorx = ip->curx;
		ip->cursory = ip->cury;
		break;
	    case ERASE_CURSOR:
		/*WCrt(ba, CRT_ID_CURSOR_START, | 0x20); */
	    case START_CURSOROPT:
	    case END_CURSOROPT:
	    default:
		break;
	}
}


void
cv_putc(ip, c, dy, dx, mode)
	struct ite_softc *ip;
	int c;
	int dy;
	int dx;
	int mode;
{
	caddr_t fb = ip->grf->g_fbkva;
	unsigned char attr;
	unsigned char *cp;

	attr = (unsigned char) ((mode & ATTR_INV) ? (0x70) : (0x07));
	if (mode & ATTR_UL)     attr  = 0x01;
	if (mode & ATTR_BOLD)   attr |= 0x08;
	if (mode & ATTR_BLINK)  attr |= 0x80;

	cp = fb + ((cv_rowc[dy] + dx) << 2); /* *4 */
	*cp++ = (unsigned char) c;
	*cp = (unsigned char) attr;

	cp = (unsigned char *) &console_buffer[cv_rowc[dy]+dx];
	*cp++ = (unsigned char) c;
	*cp = (unsigned char) attr;
}


void
cv_clear(ip, sy, sx, h, w)
	struct ite_softc *ip;
	int sy;
	int sx;
	int h;
	int w;
{
	/* cv_clear and cv_scroll both rely on ite passing arguments
	 * which describe continuous regions.  For a VT200 terminal,
	 * this is safe behavior.
	 */
	unsigned short  *dst;
	int len;

	dst = (unsigned short *) (ip->grf->g_fbkva + (((sy * ip->cols) + sx) << 2));

	for (len = w * h; len > 0 ; len--) {
		*dst = 0x2007;
		dst +=2;
	}

	dst = &console_buffer[(sy * ip->cols) + sx];
	for (len = w * h; len > 0 ; len--) {
		*dst++ = 0x2007;
	}
}

void
cv_scroll(ip, sy, sx, count, dir)
	struct ite_softc *ip;
	int sy;
	int sx;
	int count;
	int dir;
{
	unsigned short *src, *dst, *dst2;
	int i;
	int len;

	src = (unsigned short *)(ip->grf->g_fbkva + (cv_rowc[sy] << 2));

	switch (dir) {
	    case SCROLL_UP:
		dst = src - ((cv_rowc[count])<<1);

		len = cv_rowc[(ip->bottom_margin + 1 - sy)];
		src = &console_buffer[cv_rowc[sy]];

		if (count > sy) { /* boundary checks */
			dst2 = console_buffer;
			dst = (unsigned short *)(ip->grf->g_fbkva);
			len -= cv_rowc[(count - sy)];
			src += cv_rowc[(count - sy)];
		} else
			dst2 = &console_buffer[cv_rowc[(sy-count)]];

		bcopy (src, dst2, len << 1);

		for (i = 0; i < len; i++) {
			*dst++ = *dst2++;
			dst++;
		}
		break;
	    case SCROLL_DOWN:
		dst = src + ((cv_rowc[count]) << 1);

		len = cv_rowc[(ip->bottom_margin + 1 - (sy + count))];
		src = &console_buffer[cv_rowc[sy]];
		dst2 = &console_buffer[cv_rowc[(sy + count)]];

		if (len < 0)
			return;  /* do some boundary check */

		bcopy (src, dst2, len << 1);

		for (i = 0; i < len; i++) {
			*dst++ = *dst2++;
			dst++;
		}
		break;
	    case SCROLL_RIGHT:
		dst = src + ((sx+count)<<1);
		src = &console_buffer[cv_rowc[sy] + sx];
		len = ip->cols - (sx + count);
		dst2 = &console_buffer[cv_rowc[sy] + sx + count];
		bcopy (src, dst2, len << 1);

		for (i = 0; i < len; i++) {
			*dst++ = *dst2++;
			dst++;
		}
		break;
	    case SCROLL_LEFT:
		dst = src + ((sx - count)<<1);
		src = &console_buffer[cv_rowc[sy] + sx];
		len = ip->cols - sx;
		dst2 = &console_buffer[cv_rowc[sy] + sx - count];
		bcopy (src, dst2, len << 1);

		for (i = 0; i < len; i++) {
			*dst++ = *dst2++;
			dst++;
		}
	}
}

#endif /* NGRFCV */
@


1.5
log
@Include <sys/conf.h> from <machine/conf.h> like in other arches.  Changes
to come soon depend on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.4 2002/03/14 01:26:29 millert Exp $	*/
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.3 1996/05/29 10:15:28 niklas Exp $	*/
a44 1
#include <sys/conf.h>
d54 1
@


1.3
log
@Merge of 960526 NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.1 1996/03/30 22:18:21 niklas Exp $	*/
d63 6
a68 6
void cv_ite_init __P((struct ite_softc *));
void cv_ite_deinit __P((struct ite_softc *));
static void cv_cursor __P((struct ite_softc *, int));
static void cv_putc __P((struct ite_softc *, int, int, int, int));
static void cv_clear __P((struct ite_softc *, int, int, int, int));
static void cv_scroll __P((struct ite_softc *, int, int, int, int));
@


1.3.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.3 1996/05/29 10:15:28 niklas Exp $	*/
d63 6
a68 6
void cv_ite_init(struct ite_softc *);
void cv_ite_deinit(struct ite_softc *);
static void cv_cursor(struct ite_softc *, int);
static void cv_putc(struct ite_softc *, int, int, int, int);
static void cv_clear(struct ite_softc *, int, int, int, int);
static void cv_scroll(struct ite_softc *, int, int, int, int);
@


1.3.26.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.3.26.1 2002/06/11 03:34:58 art Exp $	*/
d45 1
a54 1
#include <machine/conf.h>
@


1.3.26.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.3.26.2 2002/10/29 00:28:01 art Exp $	*/
@


1.3.16.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 6
a68 6
void cv_ite_init(struct ite_softc *);
void cv_ite_deinit(struct ite_softc *);
static void cv_cursor(struct ite_softc *, int);
static void cv_putc(struct ite_softc *, int, int, int, int);
static void cv_clear(struct ite_softc *, int, int, int, int);
static void cv_scroll(struct ite_softc *, int, int, int, int);
@


1.3.16.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: ite_cv.c,v 1.3.16.1 2002/03/28 10:06:14 niklas Exp $	*/
@


1.2
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d2 1
a2 1
/*	$NetBSD: ite_cv.c,v 1.2 1996/04/21 21:11:59 veego Exp $	*/
d37 1
a37 1
 * The text console is based on ite_cl.c and ite_rh.c by
a38 1
 * The gfx console is based on ite_cc.c from Christian E. Hopps.
a69 14
#define MAXROWS 200
#define MAXCOLS 200
static unsigned short cv_rowc[MAXROWS];

#ifndef CV_DONT_USE_CONBUFFER

/*
 * Console buffer to avoid the slow reading from gfx mem.
 * this takes up 40k but it makes scrolling 3 times faster.
 * I'd like to alocate it dynamically.
 */
static unsigned short console_buffer[MAXCOLS*MAXROWS];
#endif

d121 8
d135 4
d145 16
a160 2
	if (ip->rows > MAXROWS)
		panic ("ite_cv.c: Too many rows!");
d164 12
a175 4
#ifndef CV_DONT_USE_CONBUFFER
	for (i = 0; i < MAXCOLS*MAXROWS; i++)
		console_buffer[i] = 0x2007;
#endif
d226 1
a226 1
#ifndef CV_DONT_USE_CONBUFFER
a229 1
#endif
d250 1
a250 1
	for (len = w*h; len > 0 ; len--) {
a254 1
#ifndef CV_DONT_USE_CONBUFFER
d256 1
a256 1
	for (len = w*h; len > 0 ; len--) {
a258 1
#endif
d273 1
a273 1
	src = (unsigned short *)(ip->grf->g_fbkva + ((sy * ip->cols) << 2));
d277 5
a281 10
		dst = src - ((count * ip->cols)<<1);
#ifdef CV_DONT_USE_CONBUFFER
		for (i = 0; i < (ip->bottom_margin + 1 - sy) * ip->cols; i++) {
			*dst++ = *src++; /* copy only plane 0 and 1 */
			dst++; src++;
		}
#else
		len = (ip->bottom_margin + 1 - sy) * ip->cols;
		src = &console_buffer[sy*ip->cols];
#if 0
d284 6
a289 5
			len -= (count - sy) * ip->cols;
			src += (count - sy) * ip->cols;
		} else 
#endif
			dst2 = &console_buffer[(sy-count)*ip->cols];
a295 1
#endif
d298 9
a306 13
		dst = src + ((count * ip->cols)<<1);
#ifdef CV_DONT_USE_CONBUFFER
		len= (ip->bottom_margin + 1 - (sy + count)) * ip->cols;
		dst += len << 1;
		src += len << 1;
		for (i = 0; i < len; i++) {
			*dst-- = *src--;
			dst--; src--;
		}
#else
		len = (ip->bottom_margin + 1 - (sy + count)) * ip->cols;
		src = &console_buffer[sy*ip->cols];
		dst2 = &console_buffer[(sy+count)*ip->cols];
a312 1
#endif
d316 1
a316 12
#ifdef CV_DONT_USE_CONBUFFER
		src += sx << 1;
		len = (ip->cols - (sx + count));
		dst += (len-1) << 1;
		src += (len-1) << 1;

		for (i = 0; i < len ; i++) {
			*dst-- = *src--;
			dst--; src--;
		}
#else
		src = &console_buffer[sy*ip->cols + sx];
d318 1
a318 1
		dst2 = &console_buffer[sy*ip->cols + sx + count];
a324 1
#endif
d328 1
a328 8
#ifdef CV_DONT_USE_CONBUFFER
		src += sx << 1;
		for (i = 0; i < (ip->cols - sx) ; i++) {
			*dst++ = *src++;
			dst++; src++;
		}
#else
		src = &console_buffer[sy*ip->cols + sx];
d330 1
a330 1
		dst2 = &console_buffer[sy*ip->cols + sx - count];
a336 1
#endif
@


1.1
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: ite_cv.c,v 1.1 1996/03/02 14:28:51 veego Exp $	*/
d18 3
a20 2
 *      This product includes software developed by Christian E. Hopps
 *	and Michael Teske.
d35 1
a35 1
 
d37 3
a39 1
 * This code is based on ite_cc.c from Christian E. Hopps.
d41 1
a41 1
 
d44 1
a44 1
 
a62 36
 
 
#ifndef KFONT_CUSTOM
#ifdef KFONT_8X11
#define kernel_font_width       kernel_font_width_8x11
#define kernel_font_height      kernel_font_height_8x11
#define kernel_font_baseline    kernel_font_baseline_8x11
#define kernel_font_boldsmear   kernel_font_boldsmear_8x11
#define kernel_font_lo  kernel_font_lo_8x11
#define kernel_font_hi  kernel_font_hi_8x11
#define kernel_font     kernel_font_8x11
#define kernel_cursor   kernel_cursor_8x11
#else
#define kernel_font_width       kernel_font_width_8x8
#define kernel_font_height      kernel_font_height_8x8
#define kernel_font_baseline    kernel_font_baseline_8x8
#define kernel_font_boldsmear   kernel_font_boldsmear_8x8
#define kernel_font_lo  kernel_font_lo_8x8
#define kernel_font_hi  kernel_font_hi_8x8
#define kernel_font     kernel_font_8x8
#define kernel_cursor   kernel_cursor_8x8
#endif
#endif
 
extern u_char kernel_font_width, kernel_font_height, kernel_font_baseline;
extern short  kernel_font_boldsmear;
extern u_char kernel_font_lo, kernel_font_hi;
extern u_char kernel_font[], kernel_cursor[];
 
 
/*
 * This is what ip->priv points to;
 * it contains local variables for CV64 ite in gfx mode.
 */
#define MAXCOLS 200 /* Does someone use more than this? */
#define MAXROWS 200
a63 17
struct ite_priv {
	u_int rowc[MAXROWS];		/* row coordinates  */
	u_int colc[MAXCOLS];		/* column coods */
	u_long row_bytes;
	u_long cursor_opt;
	u_int  row_offset;	/* the row offset */
	u_short width;		/* the framebuffer width */
	u_short height;
	u_short underline;	/* where the underline goes */
	u_short ft_x;		/* the font width */
	u_short ft_y;		/* the font height */
	u_short font_srcx[256]; /* the font source */
	u_short font_srcy[256];
};
typedef struct ite_priv ipriv_t;
 
void cv_load_font __P((struct ite_softc *));
a65 1
void cv_inv_rect __P((volatile caddr_t, u_short, u_short, u_short, u_short));
a66 11
static inline void cv_blt_font __P((volatile caddr_t, int, int, int,
	int, int, int, int, int, int, int));
void cv_uline __P((volatile caddr_t, int, int, int, int));
void cv_putc_nm __P((struct ite_softc *, int, int, int)); 
void cv_putc_ul __P((struct ite_softc *, int, int, int)); 
void cv_putc_bd __P((struct ite_softc *, int, int, int)); 
void cv_putc_bd_ul __P((struct ite_softc *, int, int, int)); 
void cv_putc_in __P((struct ite_softc *, int, int, int)); 
void cv_putc_ul_in __P((struct ite_softc *, int, int, int)); 
void cv_putc_bd_in __P((struct ite_softc *, int, int, int)); 
void cv_putc_bd_ul_in __P((struct ite_softc *, int, int, int)); 
a67 1
void cv_clr_rect __P((volatile caddr_t, u_short, u_short, u_short, u_short));
a68 1
void cv_bitblt __P((volatile caddr_t, int, int, int, int, int, int));
d70 15
a84 2
 
 
d93 2
a94 2
 
        if (done == 0)
d96 1
a96 1
	rv = CN_INTERNAL;
d109 1
a109 1
 
a125 1
 
d127 1
a127 4
/*
 * Load font into display memory (behind visible area!)
 * Could be faster, but it's called only on ite init, so who cares?
 */
d129 2
a130 2
cv_load_font(ip)
	register struct ite_softc *ip;
d132 1
a132 61
	int w, h;
	int i,j,k,l;
	int ncol;
	volatile caddr_t a, font_loc, ba, fb;
	ipriv_t *cvi;
 
	ba = (volatile caddr_t)ip->grf->g_regkva;
	fb = (volatile caddr_t)ip->grf->g_fbkva;
 
	cvi = ip->priv;
	w = cvi->width;
	h = cvi->height + 30; /* 30 lines space, to be sure:-) */
 
	font_loc = (volatile caddr_t)ip->grf->g_fbkva + w*h;
	ncol = ip->cols;
 
	if (ncol == 0)
              return;
	a = font_loc;
	j=0;
	for (i = 0 ;i <= ip->font_hi - ip->font_lo; i++) {
 
		/* Font location in memory */
		a = font_loc+(i%ncol)*ip->ftwidth+(i/ncol)*w*ip->ftheight;
 
		/* P2C conversion */
		for (k=0; k < ip->ftheight; k++) {
			for (l = ip->ftwidth - 1; l >= 0; l--) {
				/* XXX depends on fwidth = 8 !!!!! */
				if (ip->font[i*ip->ftheight+k] & (1 << l))
					*a++ = 1;
				else
					*a++ = 0;
			}
			a += w - ip->ftwidth;  /* next line */
		}
	}
 
	/* set up the font source */
        for (i = 0; i <= ip->font_hi; i++) {
		j = i - ip->font_lo;
		if (i < ip->font_lo) {
			cvi->font_srcx[i] = 0;
			cvi->font_srcy[i] = h ;
		} else {
			cvi->font_srcx[i] = (j%ncol) * ip->ftwidth;
			cvi->font_srcy[i] = h + (j/ncol)*ip->ftheight;
		}
	}
 
	/* set up column and row coordinates */
 
	if (ip->cols > MAXCOLS)
		panic ("ite_cv: too many columns");
	if (ip->rows > MAXROWS)
		panic ("ite_cv: too many rows");
 
	for (i = 0; i <= ip->cols; i++)
		cvi->colc[i] = i * ip->ftwidth;
	for (i = 0; i <= ip->rows; i++)
		cvi->rowc[i] = i * ip->ftheight;
d134 2
a135 2
 
 
d140 1
a140 5
        struct grfcvtext_mode *md;
	static ipriv_t cv_priv;
	volatile caddr_t vgaba, fb;
 
	ipriv_t *cvi;
d142 2
a143 7
 
	cvi = ip->priv ;
	if (cvi == NULL) {    /* first time */
		cvi = &cv_priv;
		ip->priv = cvi;
	}
 
d145 1
a145 16
 
	ip->font     = md->fdata; /*kernel_font;*/
	ip->font_lo  = md->fdstart; /*kernel_font_lo;*/
	ip->font_hi  = md->fdend; /* kernel_font_hi;*/
	ip->ftwidth  = md->fx; /*kernel_font_width;*/
	ip->ftheight = md->fy; /*kernel_font_height;*/
 
	ip->ftbaseline = kernel_font_baseline;
	ip->ftboldsmear = kernel_font_boldsmear;
 
	/* Find the correct set of rendering routines for this font.  */
	if (ip->ftwidth > 8)
		panic("kernel font size not supported");
 
	cvi->cursor_opt = 0;
 
d148 9
a156 38
 
	cvi->width = md->gv.disp_width;
	cvi->height = md->gv.disp_height;
	cvi->underline = ip->ftbaseline + 1;
	cvi->row_offset = md->gv.disp_width;
	cvi->ft_x = ip->ftwidth;
	cvi->ft_y = ip->ftheight;
	cvi->row_bytes = cvi->row_offset * ip->ftheight;
 
	vgaba = (volatile caddr_t)ip->grf->g_regkva;
 
	vgaw16(vgaba, ECR_READ_REG_DATA, 0x1000);
	delay(200000);
	vgaw16(vgaba, ECR_READ_REG_DATA, 0x2000);
	GfxBusyWait(vgaba);
	vgaw16(vgaba, ECR_READ_REG_DATA, 0x3fff);
	GfxBusyWait(vgaba);
	delay(200000);
	vgaw16(vgaba, ECR_READ_REG_DATA, 0x4fff);
	vgaw16(vgaba, ECR_READ_REG_DATA, 0xe000);
	vgaw16(vgaba, ECR_CURRENT_Y_POS2, 0x0);
	vgaw16(vgaba, ECR_CURRENT_X_POS2, 0x0);
	vgaw16(vgaba, ECR_DEST_Y__AX_STEP, 0x0);
	vgaw16(vgaba, ECR_DEST_Y2__AX_STEP2, 0x0);
	vgaw16(vgaba, ECR_DEST_X__DIA_STEP, 0x0);
	vgaw16(vgaba, ECR_DEST_X2__DIA_STEP2, 0x0);
	vgaw16(vgaba, ECR_SHORT_STROKE, 0x0);
	vgaw16(vgaba, ECR_DRAW_CMD, 0x01);
 
	/* It ain't easy to write here, so let's do it again */
	vgaw16(vgaba, ECR_READ_REG_DATA, 0x4fff);
 
	/* Clear with brute force... */
	fb = (volatile caddr_t) ip->grf->g_fbkva;
	for (i = 0; i < cvi->width * cvi->height; i++)
		*fb++=0;
	cv_clr_rect (vgaba, 0, 0,  cvi->width,  cvi->height);
	cv_load_font(ip);
a157 9
 
 
void
cv_ite_deinit(ip)
	struct ite_softc *ip;
{
	ip->flags &= ~ITE_INITED;
}
 
d159 1
a159 1
/* Draws inverted rectangle (cursor) */
a160 20
cv_inv_rect(vgaba, x, y, w, h)
	volatile caddr_t vgaba;
	u_short x, y, w, h;
{
	GfxBusyWait(vgaba);
	vgaw16 (vgaba, ECR_FRGD_MIX, 0x0025);
	vgaw32 (vgaba, ECR_FRGD_COLOR, 0x02);
 
	vgaw16 (vgaba, ECR_READ_REG_DATA, 0xA000);
	vgaw16 (vgaba, ECR_CURRENT_Y_POS , y);
	vgaw16 (vgaba, ECR_CURRENT_X_POS , x);
	vgaw16 (vgaba, ECR_READ_REG_DATA, h - 1);
	vgaw16 (vgaba, ECR_MAJ_AXIS_PIX_CNT, w - 1);
	vgaw16 (vgaba, ECR_DRAW_CMD, 0x40B1);
 
}
 

/*** (M<8)-by-N routines ***/
static void
d165 18
a182 19
	int cend, cstart;
	struct grfcvtext_mode *md;
	volatile caddr_t ba, fb;
        ipriv_t *cvi;
 
	ba = ip->grf->g_regkva;
        fb = ip->grf->g_fbkva;
 
	md = (struct grfcvtext_mode *) ip->grf->g_data;
 
	cvi = ip->priv;
 
	if (flag == END_CURSOROPT)
		cvi->cursor_opt--;
	else if (flag == START_CURSOROPT) {
		if (!cvi->cursor_opt)
			cv_cursor (ip, ERASE_CURSOR);
		cvi->cursor_opt++;
		return;		  /* if we are already opted. */
a183 33
 
	if (cvi->cursor_opt)
		return;		  /* if we are still nested. */
				  /* else we draw the cursor. */
	cstart = 0;
	cend = ip->ftheight;
 
	if (flag != DRAW_CURSOR && flag != END_CURSOROPT) {
		/*
		 * erase the cursor by drawing again
		 */
		cv_inv_rect (ba, ip->cursorx * ip->ftwidth,
			ip->cursory * ip->ftheight + cstart,
			ip->ftwidth, cend);
	}
 
	if (flag != DRAW_CURSOR && flag != MOVE_CURSOR &&
	    flag != END_CURSOROPT)
		return;
 
	/*
	 * draw the cursor
	 */
 
	ip->cursorx = min(ip->curx, ip->cols-1);
	ip->cursory = ip->cury;
	cstart = 0;
	cend = ip->ftheight;
 
	cv_inv_rect (ba, ip->cursorx * ip->ftwidth,
		ip->cursory * ip->ftheight + cstart,
		ip->ftwidth, cend);
 
a184 27
 
 
static inline void
cv_blt_font(vgaba, sx, sy, dx, dy, fw, fh, fg, bg, fmix, bmix)
	register volatile caddr_t vgaba;
	register int sx, sy, dx, dy, fw, fh;
	int fg, bg, fmix, bmix;
{
 
	GfxBusyWait(vgaba);
 
	vgaw16 (vgaba, ECR_READ_REG_DATA, 0xA0C0);
	vgaw16 (vgaba, ECR_BKGD_MIX, bmix);
	vgaw16 (vgaba, ECR_FRGD_MIX, fmix);
	vgaw16 (vgaba, ECR_BKGD_COLOR, bg);
	vgaw16 (vgaba, ECR_FRGD_COLOR, fg);
	vgaw16 (vgaba, ECR_BITPLANE_READ_MASK, 0x1);
	vgaw16 (vgaba, ECR_BITPLANE_WRITE_MASK, 0xfff);
	vgaw16 (vgaba, ECR_CURRENT_Y_POS , sy);
	vgaw16 (vgaba, ECR_CURRENT_X_POS , sx);
	vgaw16 (vgaba, ECR_DEST_Y__AX_STEP, dy);
	vgaw16 (vgaba, ECR_DEST_X__DIA_STEP, dx);
	vgaw16 (vgaba, ECR_READ_REG_DATA, fh);
	vgaw16 (vgaba, ECR_MAJ_AXIS_PIX_CNT, fw);
	vgaw16 (vgaba, ECR_DRAW_CMD, 0xc0f1);
}
 
a185 6
/* Draws horizontal line */
void
cv_uline(vgaba, x, y, x2, fgcol)
	volatile caddr_t vgaba;
	int x, y, x2, fgcol;
{
a186 13
	GfxBusyWait(vgaba);
	vgaw16 (vgaba, ECR_FRGD_MIX, 0x27);
	vgaw16 (vgaba, ECR_FRGD_COLOR, fgcol);
	vgaw16 (vgaba, ECR_READ_REG_DATA, 0xA000);
	vgaw16 (vgaba, ECR_CURRENT_Y_POS , y);
	vgaw16 (vgaba, ECR_CURRENT_X_POS , x);
	vgaw16 (vgaba, ECR_DEST_Y__AX_STEP, y);
	vgaw16 (vgaba, ECR_DEST_X__DIA_STEP, x2);
	GfxBusyWait(vgaba);
	vgaw16 (vgaba, ECR_DRAW_CMD, 0x2811);
}
 
 
d188 1
a188 1
cv_putc_nm(ip, c, dy, dx)
d190 22
a211 23
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx], cvi->rowc[dy],
		cvi->ft_x-1, cvi->ft_y-1, 1, 0, 0x27, 0x7);
}
 
 
void
cv_putc_ul(ip, c, dy, dx)
	struct ite_softc *ip;
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx], cvi->rowc[dy],
		cvi->ft_x-1, cvi->ft_y-1, 1, 0, 0x27, 0x7);
 
	cv_uline (ip->grf->g_regkva,cvi->colc[dx], cvi->rowc[dy] +
                 cvi->underline, cvi->colc[dx] + cvi->ft_x-1, 1);
a212 18
 
 
void
cv_putc_bd(ip, c, dy, dx)
	struct ite_softc *ip;
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx], cvi->rowc[dy],
		cvi->ft_x-1, cvi->ft_y-1, 1, 0, 0x27,0x7);
	/* smear bold with OR mix */
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx]+1, cvi->rowc[dy],
		cvi->ft_x-2, cvi->ft_y-1, 1, 0, 0x2b,0x5);
}
 
a213 25
void
cv_putc_bd_ul(ip, c, dy, dx)
	struct ite_softc *ip;
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_putc_bd(ip, c, dy, dx);
	cv_uline (ip->grf->g_regkva,cvi->colc[dx], cvi->rowc[dy] +
		cvi->underline, cvi->colc[dx] + cvi->ft_x-1, 1);
}
 
 
void
cv_putc_in(ip, c, dy, dx)
	struct ite_softc *ip;
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx], cvi->rowc[dy],
		cvi->ft_x-1, cvi->ft_y-1, 0, 1, 0x27,0x7);
}
 
d216 1
a216 1
cv_putc_ul_in(ip, c, dy, dx)
d218 11
a228 67
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx], cvi->rowc[dy],
		cvi->ft_x-1, cvi->ft_y-1, 0, 1, 0x27,0x7);
 
	cv_uline (ip->grf->g_regkva,cvi->colc[dx], cvi->rowc[dy] +
		cvi->underline, cvi->colc[dx] + cvi->ft_x-1, 0);
}
 
 
void
cv_putc_bd_in(ip, c, dy, dx)
	struct ite_softc *ip;
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx], cvi->rowc[dy],
		cvi->ft_x-1, cvi->ft_y-1, 0, 1, 0x27,0x7);
 
	/* smear bold with AND mix */
	cv_blt_font (ip->grf->g_regkva, cvi->font_srcx[c],
		cvi->font_srcy[c], cvi->colc[dx]+1, cvi->rowc[dy],
		cvi->ft_x-2, cvi->ft_y-1, 0, 1, 0x27, 0xc);
}
 
 
void
cv_putc_bd_ul_in(ip, c, dy, dx)
	struct ite_softc *ip;
	int c, dy, dx;
{
	ipriv_t *cvi = (ipriv_t *)ip->priv;
 
	cv_putc_bd_in(ip, c, dy, dx);
 
	cv_uline(ip->grf->g_regkva,cvi->colc[dx], cvi->rowc[dy] +
		cvi->underline, cvi->colc[dx] + cvi->ft_x-1, 0);
}
 
 
typedef void cv_putc_func ();
 
cv_putc_func *cv_put_func[ATTR_ALL+1] = {
    cv_putc_nm,
    cv_putc_in,
    cv_putc_ul,
    cv_putc_ul_in,
    cv_putc_bd,
    cv_putc_bd_in,
    cv_putc_bd_ul,
    cv_putc_bd_ul_in,
/* no support for blink */
    cv_putc_nm,
    cv_putc_in,
    cv_putc_ul,
    cv_putc_ul_in,
    cv_putc_bd,
    cv_putc_bd_in,
    cv_putc_bd_ul,
    cv_putc_bd_ul_in
};
 
d230 1
a230 5
static void
cv_putc(ip, c, dy, dx, mode)
	struct ite_softc *ip;
	int c, dy, dx, mode;
{
d232 4
a235 12
	c = (u_char)c;
	if (c < ip->font_lo || c > ip->font_hi)
		c = ip->font_hi;
	cv_put_func[mode](ip, c, dy, dx);
}
 
 
void
cv_clr_rect (vgaba, x, y, w, h)
	volatile caddr_t vgaba;
	u_short x, y, w, h;
{
d237 6
a242 9
	GfxBusyWait(vgaba);
	vgaw16 (vgaba, ECR_FRGD_MIX, 0x0027);
	vgaw32 (vgaba, ECR_FRGD_COLOR, 0x00);
	vgaw16 (vgaba, ECR_READ_REG_DATA, 0xA000);
	vgaw16 (vgaba, ECR_CURRENT_Y_POS , y);
	vgaw16 (vgaba, ECR_CURRENT_X_POS , x);
	vgaw16 (vgaba, ECR_READ_REG_DATA, h - 1);
	vgaw16 (vgaba, ECR_MAJ_AXIS_PIX_CNT, w - 1);
	vgaw16 (vgaba, ECR_DRAW_CMD, 0x40B1);
a243 1
 
d245 2
a246 2
static void
cv_clear(ip, sy, sx, h, w)
d248 8
a255 8
	int sy, sx, h, w;
{ 
 
	cv_clr_rect (ip->grf->g_regkva, sx*ip->ftwidth,
			sy*ip->ftheight, w*ip->ftwidth,
			h*ip->ftheight);
}
 
d257 1
a257 6
void
cv_bitblt(vgaba, sx, sy, dx, dy, fw, fh)
	volatile caddr_t vgaba;
	int sx, sy, dx, dy, fw, fh;
{
	unsigned short drawdir = 0;
a258 44
	/* Assume overlap */
	if (sx > dx)
		drawdir |=1<<5; /* X positive */
	else {
		sx += fw -1;
		dx += fw -1;
	}
	if (sy > dy)
		drawdir |=1<<7; /* Y positive */
	else {
		sy += fh - 1;
		dy += fh - 1;
	}
	GfxBusyWait (vgaba);
	vgaw16 (vgaba, ECR_READ_REG_DATA, 0xA000);
	vgaw16 (vgaba, ECR_BKGD_MIX, 0x7);
	vgaw16 (vgaba, ECR_FRGD_MIX, 0x67);
	vgaw16 (vgaba, ECR_BKGD_COLOR, 0x0);
	vgaw16 (vgaba, ECR_FRGD_COLOR, 0x1);
 
	vgaw16 (vgaba, ECR_BITPLANE_READ_MASK, 0x1);
	vgaw16 (vgaba, ECR_BITPLANE_WRITE_MASK, 0xfff);
	vgaw16 (vgaba, ECR_CURRENT_Y_POS , sy);
	vgaw16 (vgaba, ECR_CURRENT_X_POS , sx);
	vgaw16 (vgaba, ECR_DEST_Y__AX_STEP, dy);
	vgaw16 (vgaba, ECR_DEST_X__DIA_STEP, dx);
	vgaw16 (vgaba, ECR_READ_REG_DATA, fh - 1);
	vgaw16 (vgaba, ECR_MAJ_AXIS_PIX_CNT, fw - 1);
	vgaw16 (vgaba, ECR_DRAW_CMD, 0xc051 | drawdir);
}
 
 
/* Note: sx is only relevant for SCROLL_LEFT or SCROLL_RIGHT.  */
static void
cv_scroll(ip, sy, sx, count, dir)
        register struct ite_softc *ip;
        register int sy;
        int dir, sx, count;
 
{
	int dy, dx;
	ipriv_t *cvi = (ipriv_t *) ip->priv;
 
	cv_cursor(ip, ERASE_CURSOR);
d260 25
a284 9
	case SCROLL_UP:
		dy = sy - count;
 
		cv_bitblt(ip->grf->g_regkva,
			0,sy*ip->ftheight,
			0, dy*ip->ftheight,
                        cvi->width,
			(ip->bottom_margin-dy+1)*ip->ftheight);
 
d286 21
a306 8
	case SCROLL_DOWN:
		dy = sy + count;
 
		cv_bitblt(ip->grf->g_regkva,
			0,sy*ip->ftheight,
			0, dy*ip->ftheight,
			cvi->width,
			(ip->bottom_margin-dy+1)*ip->ftheight);
d308 23
a330 15
	case SCROLL_RIGHT:   /* one line */
		dx = sx + count;
		cv_bitblt(ip->grf->g_regkva,
			sx*ip->ftwidth, sy*ip->ftheight,
			dx*ip->ftwidth, sy*ip->ftheight,
			(ip->cols-dx-1)*ip->ftwidth,
			ip->ftheight);
		break;
	case SCROLL_LEFT:
		dx = sx - count;
		cv_bitblt(ip->grf->g_regkva,
			sx*ip->ftwidth, sy*ip->ftheight,
			dx*ip->ftwidth, sy*ip->ftheight,
			(ip->cols-dx-1)*ip->ftwidth,
			ip->ftheight);
d332 19
d353 1
a353 1
 
@
