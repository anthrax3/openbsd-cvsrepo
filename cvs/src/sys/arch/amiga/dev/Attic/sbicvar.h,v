head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.03.15.51;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.25.03.50.46;	author todd;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	96.05.02.06.44.27;	author niklas;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	95.11.28.19.36.12;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.01;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.04.18.16.02.15;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.4.6.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.7
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: sbicvar.h,v 1.6 2002/03/14 03:15:51 millert Exp $	*/
/*	$NetBSD: sbicvar.h,v 1.11 1996/04/21 21:12:23 veego Exp $	*/

/*
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Van Jacobson of Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)scsivar.h	7.1 (Berkeley) 5/8/90
 */
#ifndef _SBICVAR_H_
#define _SBICVAR_H_
#include <sys/malloc.h>

/*
 * The largest single request will be MAXPHYS bytes which will require
 * at most MAXPHYS/NBPG+1 chain elements to describe, i.e. if none of
 * the buffer pages are physically contiguous (MAXPHYS/NBPG) and the
 * buffer is not page aligned (+1).
 */
#define	DMAMAXIO	(MAXPHYS/NBPG+1)

struct	dma_chain {
	int	dc_count;
	char	*dc_addr;
};

/*
 * ACB. Holds additional information for each SCSI command Comments: We
 * need a separate scsi command block because we may need to overwrite it
 * with a request sense command.  Basicly, we refrain from fiddling with
 * the scsi_xfer struct (except do the expected updating of return values).
 * We'll generally update: xs->{flags,resid,error,sense,status} and
 * occasionally xs->retries.
 */
struct sbic_acb {
	TAILQ_ENTRY(sbic_acb) chain;
	struct scsi_xfer *xs;		/* SCSI xfer ctrl block from above */
	int		flags;		/* Status */
#define ACB_FREE	0x00
#define ACB_ACTIVE	0x01
#define ACB_DONE	0x04
#define ACB_CHKSENSE	0x08
#define ACB_BBUF	0x10	/* DMA input needs to be copied from bounce */
#define	ACB_DATAIN	0x20	/* DMA direction flag */
	struct scsi_generic cmd;	/* SCSI command block */
	int	 clen;
	struct	dma_chain sc_kv;	/* Virtual address of whole DMA */
	struct	dma_chain sc_pa;	/* Physical address of DMA segment */
	u_long	sc_tcnt;		/* number of bytes for this DMA */
	u_char *sc_dmausrbuf;		/* user buffer kva - for bounce copy */
	u_long  sc_dmausrlen;		/* length of bounce copy */
	u_short sc_dmacmd;		/* Internal data for this DMA */
	char *pa_addr;			/* XXXX initial phys addr */
	u_char *sc_usrbufpa;		/* user buffer phys addr */
};

/*
 * Some info about each (possible) target on the SCSI bus.  This should
 * probably have been a "per target+lunit" structure, but we'll leave it at
 * this for now.  Is there a way to reliably hook it up to sc->fordriver??
 */
struct sbic_tinfo {
	int	cmds;		/* #commands processed */
	int	dconns;		/* #disconnects */
	int	touts;		/* #timeouts */
	int	perrs;		/* #parity errors */
	int	senses;		/* #request sense commands sent */
	u_char *bounce;		/* Bounce buffer for this device */
	ushort	lubusy;		/* What local units/subr. are busy? */
	u_char  flags;
	u_char  period;		/* Period suggestion */
	u_char  offset;		/* Offset suggestion */
} tinfo_t;

struct	sbic_softc {
	struct	device sc_dev;
	struct	isr sc_isr;
	struct	target_sync {
		u_char	state;
		u_char	period;
		u_char	offset;
	} sc_sync[8];
	u_char	target;			/* Currently active target */
	u_char  lun;
	struct	scsi_link sc_link;	/* proto for sub devices */
	sbic_regmap_p	sc_sbicp;	/* the SBIC */
	volatile void 	*sc_cregs;	/* driver specific regs */

	/* Lists of command blocks */
	TAILQ_HEAD(acb_list, sbic_acb) free_list,
				       ready_list,
				       nexus_list;

	struct sbic_acb *sc_nexus;	/* current command */
	struct sbic_acb sc_acb[8];	/* the real command blocks */
	struct sbic_tinfo sc_tinfo[8];

	struct	scsi_xfer *sc_xs;	/* transfer from high level code */
	u_char	sc_flags;
	u_char	sc_scsiaddr;
	u_char	sc_stat[2];
	u_char	sc_msg[7];
	u_long	sc_clkfreq;
	u_long	sc_tcnt;		/* number of bytes transferred */
	u_short sc_dmacmd;		/* used by dma drivers */
	u_short	sc_dmatimo;		/* dma timeout */
	u_long	sc_dmamask;		/* dma valid mem mask */
	struct	dma_chain *sc_cur;
	struct	dma_chain *sc_last;
	int  (*sc_dmago)(struct sbic_softc *, char *, int, int);
	int  (*sc_dmanext)(struct sbic_softc *);
	void (*sc_enintr)(struct sbic_softc *);
	void (*sc_dmastop)(struct sbic_softc *);
	u_short	gtsc_bankmask;		/* GVP specific bank selected */
};

/* sc_flags */
#define	SBICF_ALIVE	0x01	/* controller initialized */
#define SBICF_DCFLUSH	0x02	/* need flush for overlap after dma finishes */
#define SBICF_SELECTED	0x04	/* bus is in selected state. */
#define SBICF_ICMD	0x08	/* Immediate command in execution */
#define SBICF_BADDMA	0x10	/* controller can only DMA to ztwobus space */
#define	SBICF_INTR	0x40	/* SBICF interrupt expected */
#define	SBICF_INDMA	0x80	/* not used yet, DMA I/O in progress */

/* sync states */
#define SYNC_START	0	/* no sync handshake started */
#define SYNC_SENT	1	/* we sent sync request, no answer yet */
#define SYNC_DONE	2	/* target accepted our (or inferior) settings,
				   or it rejected the request and we stay async */
#ifdef DEBUG
#define	DDB_FOLLOW	0x04
#define DDB_IO		0x08
#endif
extern u_char sbic_inhibit_sync[8];
extern int sbic_no_dma;
extern int sbic_clock_override;

#define	PHASE		0x07		/* mask for psns/pctl phase */
#define	DATA_OUT_PHASE	0x00
#define	DATA_IN_PHASE	0x01
#define	CMD_PHASE	0x02
#define	STATUS_PHASE	0x03
#define	BUS_FREE_PHASE	0x04
#define	ARB_SEL_PHASE	0x05	/* Fuji chip combines arbitration with sel. */
#define	MESG_OUT_PHASE	0x06
#define	MESG_IN_PHASE	0x07

#define	MSG_CMD_COMPLETE	0x00
#define MSG_EXT_MESSAGE		0x01
#define	MSG_SAVE_DATA_PTR	0x02
#define	MSG_RESTORE_PTR		0x03
#define	MSG_DISCONNECT		0x04
#define	MSG_INIT_DETECT_ERROR	0x05
#define	MSG_ABORT		0x06
#define	MSG_REJECT		0x07
#define	MSG_NOOP		0x08
#define	MSG_PARITY_ERROR	0x09
#define	MSG_BUS_DEVICE_RESET	0x0C
#define	MSG_IDENTIFY		0x80
#define	MSG_IDENTIFY_DR		0xc0	/* (disconnect/reconnect allowed) */
#define	MSG_SYNC_REQ 		0x01

#define MSG_ISIDENTIFY(x) (x&MSG_IDENTIFY)
#define IFY_TRN		0x20
#define IFY_LUNTRN(x)	(x&0x07)
#define IFY_LUN(x)	(!(x&0x20))

/* Check if high bit set */

#define	STS_CHECKCOND	0x02	/* Check Condition (ie., read sense) */
#define	STS_CONDMET	0x04	/* Condition Met (ie., search worked) */
#define	STS_BUSY	0x08
#define	STS_INTERMED	0x10	/* Intermediate status sent */
#define	STS_EXT		0x80	/* Extended status valid */


/* States returned by our state machine */

#define SBIC_STATE_ERROR	-1
#define SBIC_STATE_DONE		0
#define SBIC_STATE_RUNNING	1
#define SBIC_STATE_DISCONNECT	2

/*
 * XXXX
 */
struct scsi_fmt_cdb {
	int len;		/* cdb length (in bytes) */
	u_char cdb[28];		/* cdb to use on next read/write */
};

struct buf;
struct scsi_xfer;

void sbic_minphys(struct buf *bp);
int sbic_scsicmd(struct scsi_xfer *);
void sbicinit(struct sbic_softc *);
int  sbicintr(struct sbic_softc *);
#ifdef DEBUG
void sbic_dump(struct sbic_softc *dev);
#endif

#endif /* _SBICVAR_H_ */
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: sbicvar.h,v 1.5 2002/03/14 01:26:29 millert Exp $	*/
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sbicvar.h,v 1.4 2001/01/25 03:50:46 todd Exp $	*/
d99 1
a99 1
	u_char*	bounce;		/* Bounce buffer for this device */
@


1.4
log
@spelling
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d141 4
a144 4
	int  (*sc_dmago)	__P((struct sbic_softc *, char *, int, int));
	int  (*sc_dmanext)	__P((struct sbic_softc *));
	void (*sc_enintr)	__P((struct sbic_softc *));
	void (*sc_dmastop)	__P((struct sbic_softc *));
d227 4
a230 4
void sbic_minphys __P((struct buf *bp));
int sbic_scsicmd __P((struct scsi_xfer *));
void sbicinit __P((struct sbic_softc *));
int  sbicintr __P((struct sbic_softc *));
d232 1
a232 1
void sbic_dump __P((struct sbic_softc *dev));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbicvar.h,v 1.4 2001/01/25 03:50:46 todd Exp $	*/
d99 1
a99 1
	u_char *bounce;		/* Bounce buffer for this device */
d141 4
a144 4
	int  (*sc_dmago)(struct sbic_softc *, char *, int, int);
	int  (*sc_dmanext)(struct sbic_softc *);
	void (*sc_enintr)(struct sbic_softc *);
	void (*sc_dmastop)(struct sbic_softc *);
d227 4
a230 4
void sbic_minphys(struct buf *bp);
int sbic_scsicmd(struct scsi_xfer *);
void sbicinit(struct sbic_softc *);
int  sbicintr(struct sbic_softc *);
d232 1
a232 1
void sbic_dump(struct sbic_softc *dev);
@


1.4.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: sbicvar.h,v 1.4.6.1 2002/06/11 03:34:58 art Exp $	*/
@


1.3
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d135 1
a135 1
	u_long	sc_tcnt;		/* number of bytes transfered */
@


1.3.16.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbicvar.h,v 1.4 2001/01/25 03:50:46 todd Exp $	*/
d135 1
a135 1
	u_long	sc_tcnt;		/* number of bytes transferred */
@


1.3.16.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d99 1
a99 1
	u_char *bounce;		/* Bounce buffer for this device */
d141 4
a144 4
	int  (*sc_dmago)(struct sbic_softc *, char *, int, int);
	int  (*sc_dmanext)(struct sbic_softc *);
	void (*sc_enintr)(struct sbic_softc *);
	void (*sc_dmastop)(struct sbic_softc *);
d227 4
a230 4
void sbic_minphys(struct buf *bp);
int sbic_scsicmd(struct scsi_xfer *);
void sbicinit(struct sbic_softc *);
int  sbicintr(struct sbic_softc *);
d232 1
a232 1
void sbic_dump(struct sbic_softc *dev);
@


1.3.16.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: sbicvar.h,v 1.3.16.2 2002/03/28 10:06:14 niklas Exp $	*/
@


1.2
log
@let loadbsd define sync scsi operation
@
text
@d1 2
a2 1
/*	$NetBSD: sbicvar.h,v 1.9.2.1 1995/11/24 07:51:20 chopps Exp $	*/
d229 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: sbicvar.h,v 1.9 1995/09/04 13:04:48 chopps Exp $	*/
d165 1
a165 1
extern int sbic_inhibit_sync;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
