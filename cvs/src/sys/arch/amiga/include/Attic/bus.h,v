head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_2:1.11.0.8
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.6
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.11.0.4
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.8
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.4
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2001.10.16.16.03.21;	author jj;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	99.09.09.21.28.14;	author espie;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	99.01.20.17.46.20;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	98.10.05.09.58.21;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	98.03.26.12.45.00;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.09.17.19.27.21;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.09.09.22.41.42;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.02.21.10.59.16;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.11.28.23.33.05;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.04.01.34.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.04.27.18.38.52;	author niklas;	state Exp;
branches;
next	;

1.10.4.1
date	2001.10.31.02.52.45;	author nate;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.11.4.1
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.12
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: bus.h,v 1.11 2001/10/16 16:03:21 jj Exp $	*/

/*
 * Copyright (c) 1996 Niklas Hallqvist.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Niklas Hallqvist.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _AMIGA_BUS_H_
#define _AMIGA_BUS_H_

#include <machine/endian.h>

#ifdef __STDC__
#define CAT(a,b)	a##b
#define CAT3(a,b,c)	a##b##c
#else
#define CAT(a,b)	a/**/b
#define CAT3(a,b,c)	a/**/b/**/c
#endif

/* Bus access types.  */
typedef u_int32_t bus_addr_t;
typedef u_int32_t bus_size_t;
typedef u_int32_t bus_space_handle_t;

typedef struct amiga_bus_space *bus_space_tag_t;

struct amiga_bus_space {
	void	*bs_data;

	int	(*bs_map)(bus_space_tag_t, bus_addr_t, bus_size_t, int,
		    bus_space_handle_t *);
	int	(*bs_unmap)(bus_space_tag_t, bus_space_handle_t, bus_size_t);

	/* We need swapping of 16-bit entities */
	int	bs_swapped;

	/* How much to shift an bus_size_t */
	int	bs_shift;
};

#define bus_space_map(t, port, size, cacheable, bshp) \
    (*(t)->bs_map)((t), (port), (size), (cacheable), (bshp))
#define bus_space_unmap(t, bshp, size) \
    (*(t)->bs_unmap)((t), (bshp), (size))

static __inline u_int8_t
bus_space_subregion(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t offset, bus_size_t size, bus_space_handle_t *nbshp)
{
	*nbshp = bsh + (offset << bst->bs_shift);
	return (0);
}

static __inline u_int8_t
bus_space_read_1(bus_space_tag_t bst, bus_space_handle_t bsh, bus_size_t ba)
{
	return *(volatile u_int8_t *)(bsh + (ba << bst->bs_shift));
}

static __inline u_int16_t
bus_space_read_2(bus_space_tag_t bst, bus_space_handle_t bsh, bus_size_t ba)
{
	u_int16_t x =
	    *(volatile u_int16_t *)((bsh & ~1) + (ba << bst->bs_shift));

	return bst->bs_swapped ? swap16(x) : x;
}

static __inline u_int32_t
bus_space_read_4(bus_space_tag_t bst, bus_space_handle_t bsh, bus_size_t ba)
{
	panic("bus_space_read_4: operation not allowed on this bus (tag %x)",
	    bst);
	return 0;
}

#define	bus_space_read_8	!!! bus_space_read_8 not implemented !!!

#define bus_space_read_multi(n, m)					      \
static __inline void						       	      \
CAT(bus_space_read_multi_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,     \
    bus_size_t ba, CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
{									      \
	while (cnt--)							      \
		*buf++ = CAT(bus_space_read_,n)(bst, bsh, ba);		      \
}

bus_space_read_multi(1,8)
bus_space_read_multi(2,16)
bus_space_read_multi(4,32)

#define	bus_space_read_multi_8	!!! bus_space_read_multi_8 not implemented !!!

#define bus_space_read_region(n, m)					      \
static __inline void						       	      \
CAT(bus_space_read_region_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,    \
    bus_size_t ba, CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
{									      \
	while (cnt--) {							      \
		*buf++ = CAT(bus_space_read_,n)(bst, bsh, ba);		      \
		ba += n;						      \
	}								      \
}

bus_space_read_region(1,8)
bus_space_read_region(2,16)
bus_space_read_region(4,32)

#define	bus_space_read_region_8	!!! bus_space_read_region_8 not implemented !!!

static __inline void
bus_space_write_1(bus_space_tag_t bst, bus_space_handle_t bsh, bus_size_t ba,
    u_int8_t x)
{
	*(volatile u_int8_t *)(bsh + (ba << bst->bs_shift)) = x;
}

static __inline void
bus_space_write_2(bus_space_tag_t bst, bus_space_handle_t bsh, bus_size_t ba,
    u_int16_t x)
{
	*(volatile u_int16_t *)((bsh & ~1) + (ba << bst->bs_shift)) =
            bst->bs_swapped ? swap16(x) : x;
}

static __inline void
bus_space_write_4(bus_space_tag_t bst, bus_space_handle_t bsh, bus_size_t ba,
    u_int32_t x)
{
	panic("bus_space_write_4: operation not allowed on this bus (tag %x)",
	    bst);
}

#define	bus_space_write_8	!!! bus_space_write_8 not implemented !!!

#define bus_space_write_multi(n, m)					      \
static __inline void								      \
CAT(bus_space_write_multi_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,    \
    bus_size_t ba, const CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
{									      \
	while (cnt--)							      \
		CAT(bus_space_write_,n)(bst, bsh, ba, *buf++);		      \
}

bus_space_write_multi(1,8)
bus_space_write_multi(2,16)
bus_space_write_multi(4,32)

#define	bus_space_write_multi_8	!!! bus_space_write_multi_8 not implemented !!!

#define bus_space_write_region(n, m)					      \
static __inline void						       	      \
CAT(bus_space_write_region_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,   \
    bus_size_t ba, const CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
{									      \
	while (cnt--) {							      \
		CAT(bus_space_write_,n)(bst, bsh, ba, *buf++);		      \
		ba += n;						      \
	}								      \
}

bus_space_write_region(1,8)
bus_space_write_region(2,16)
bus_space_write_region(4,32)

#define	bus_space_write_region_8 \
    !!! bus_space_write_region_8 not implemented !!!

#define bus_space_set_region(n, m)					      \
static __inline void							      \
CAT(bus_space_set_region_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,     \
    bus_size_t bs, CAT3(u_int,m,_t) val, size_t count)			      \
{									      \
  while (count--)							      \
    CAT(bus_space_write_,n)(bst, bsh, bs++, val);			      \
}

bus_space_set_region(1,8)
bus_space_set_region(2,16)
bus_space_set_region(4,32)

#define	bus_space_set_region_8 \
    !!! bus_space_set_region_8 not implemented !!!

/* OpenBSD extensions */
static __inline void
bus_space_read_raw_multi_2(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, u_int8_t *buf, bus_size_t cnt)
{
	u_int16_t *buf16 = (u_int16_t *)buf;

	while (cnt) {
		u_int16_t x = *(volatile u_int16_t *)
		    ((bsh & ~1) + (ba << bst->bs_shift));

		*buf16++ = bst->bs_swapped ? x : swap16(x);
		cnt -= 2;
	}
}

static __inline void
bus_space_read_raw_multi_4(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, u_int8_t *buf, bus_size_t cnt)
{
	panic("%s: operation not allowed on this bus (tag %x)",
	    "bus_space_read_raw_multi_4", bst);
}

#define	bus_space_read_raw_multi_8 \
    !!! bus_space_read_raw_multi_8 not implemented !!!

static __inline void
bus_space_read_raw_region_2(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, u_int8_t *buf, bus_size_t cnt)
{
	u_int16_t *buf16 = (u_int16_t *)buf;

	while (cnt) {
		u_int16_t x = *(volatile u_int16_t *)
		    ((bsh & ~1) + (ba << bst->bs_shift));

		*buf16++ = bst->bs_swapped ? x : swap16(x);
		ba += 2;
		cnt -= 2;
	}
}

static __inline void
bus_space_read_raw_region_4(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, u_int8_t *buf, bus_size_t cnt)
{
	panic("%s: operation not allowed on this bus (tag %x)",
	    "bus_space_read_raw_region_4", bst);
}

#define	bus_space_read_raw_region_8 \
    !!! bus_space_read_raw_region_8 not implemented !!!

static __inline void
bus_space_write_raw_multi_2(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, const u_int8_t *buf, bus_size_t cnt)
{
	const u_int16_t *buf16 = (const u_int16_t *)buf;

	while (cnt) {
		*(volatile u_int16_t *)((bsh & ~1) + (ba << bst->bs_shift)) =
		    bst->bs_swapped ? *buf16 : swap16(*buf16);
		buf16++;
		cnt -= 2;
	}
}

static __inline void
bus_space_write_raw_multi_4(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, const u_int8_t *buf, bus_size_t cnt)
{
	panic("%s: operation not allowed on this bus (tag %x)",
	    "bus_space_write_raw_multi_4", bst);
}

#define	bus_space_write_raw_multi_8 \
    !!! bus_space_write_raw_multi_8 not implemented !!!

static __inline void
bus_space_write_raw_region_2(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, const u_int8_t *buf, bus_size_t cnt)
{
	const u_int16_t *buf16 = (const u_int16_t *)buf;

	while (cnt) {
		*(volatile u_int16_t *)((bsh & ~1) + (ba << bst->bs_shift)) =
		    bst->bs_swapped ? *buf16 : swap16(*buf16);
		buf16++;
		ba += 2;
		cnt -= 2;
	}
}

static __inline void
bus_space_write_raw_region_4(bus_space_tag_t bst, bus_space_handle_t bsh,
    bus_size_t ba, const u_int8_t *buf, bus_size_t cnt)
{
	panic("%s: operation not allowed on this bus (tag %x)",
	    "bus_space_write_raw_region_4", bst);
}

#define	bus_space_write_raw_region_8 \
    !!! bus_space_write_raw_region_8 not implemented !!!

static __inline int
bus_space_alloc(bus_space_tag_t t, bus_addr_t rstart, bus_addr_t rend,
		bus_size_t size, bus_size_t alignment, bus_size_t boundary,
		int cacheable, bus_addr_t *bpap, bus_space_handle_t *bshp)
{
	/* XXX Always fail for now.  */
	return (1);
}

static __inline void
bus_space_free(bus_space_tag_t t, bus_space_handle_t bsh, bus_size_t size)
{
	/* XXX Nothing here yet.  */
}

/*
 * No 68k cpus require barriers, but we need to provide these for MI code.
 */
#define bus_space_barrier(t, h, o, l, f)
#define BUS_SPACE_BARRIER_READ	0x1
#define BUS_SPACE_BARRIER_WRITE 0x2

/* let MI code be happy */
typedef void *bus_dmamap_t;

#endif /* _AMIGA_BUS_H_ */
@


1.11
log
@Fix for bus_space_barrier which m68k doesn't need normally.
From art@@, same as Niklas@@ suggested.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.10 1999/09/09 21:28:14 espie Exp $	*/
@


1.11.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.11 2001/10/16 16:03:21 jj Exp $	*/
@


1.10
log
@Keep wdc_isa.c happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.9 1999/01/20 17:46:20 niklas Exp $	*/
d332 7
@


1.10.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.10 1999/09/09 21:28:14 espie Exp $	*/
a331 7

/*
 * No 68k cpus require barriers, but we need to provide these for MI code.
 */
#define bus_space_barrier(t, h, o, l, f)
#define BUS_SPACE_BARRIER_READ	0x1
#define BUS_SPACE_BARRIER_WRITE 0x2
@


1.10.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.10.4.1 2001/10/31 02:52:45 nate Exp $	*/
@


1.9
log
@Add dummy versions of bus_space_{alloc,free}
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.8 1998/10/05 09:58:21 niklas Exp $	*/
d332 3
@


1.8
log
@Update the API to be more compatibe with NetBSD, but also add new extensions:
bus_sapce_{read,write}_raw_region_[248] a la the raw_multi variants.  These
last ones are not yet used.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.7 1998/03/26 12:45:00 niklas Exp $	*/
d317 15
@


1.7
log
@Use new defs from MI endian.h for swapping, remove register
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.6 1997/09/17 19:27:21 niklas Exp $	*/
d65 1
a65 1
	/* How much to shift an bus_addr_t */
d75 9
a83 1
bus_space_read_1(bus_space_tag_t bst, bus_space_handle_t bsh, bus_addr_t ba)
d89 1
a89 1
bus_space_read_2(bus_space_tag_t bst, bus_space_handle_t bsh, bus_addr_t ba)
d98 1
a98 1
bus_space_read_4(bus_space_tag_t bst, bus_space_handle_t bsh, bus_addr_t ba)
d110 1
a110 1
    bus_addr_t ba, CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
d125 1
a125 1
    bus_addr_t ba, CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
d140 1
a140 1
bus_space_write_1(bus_space_tag_t bst, bus_space_handle_t bsh, bus_addr_t ba,
d147 1
a147 1
bus_space_write_2(bus_space_tag_t bst, bus_space_handle_t bsh, bus_addr_t ba,
d155 1
a155 1
bus_space_write_4(bus_space_tag_t bst, bus_space_handle_t bsh, bus_addr_t ba,
d167 1
a167 1
    bus_addr_t ba, const CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
d182 1
a182 1
    bus_addr_t ba, const CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
d197 16
d216 1
a216 1
    bus_addr_t ba, u_int8_t *buf, bus_size_t cnt)
d231 1
a231 1
    bus_addr_t ba, u_int8_t *buf, bus_size_t cnt)
d241 27
d269 1
a269 1
    bus_addr_t ba, const u_int8_t *buf, bus_size_t cnt)
d283 1
a283 1
    bus_addr_t ba, const u_int8_t *buf, bus_size_t cnt)
d291 26
@


1.6
log
@It is indeed tricky to get all bus accesses right when factoring out
the canonical form for all the three bus access interfaces amiga ave now
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.5 1997/09/09 22:41:42 niklas Exp $	*/
d38 2
a73 8
/* Swap bytes in a short word.  */
static __inline u_int16_t
swap(u_int16_t x)
{
	__asm("rolw #8,%0" : "=r" (x) : "0" (x));
	return x;
}

d86 1
a86 1
	return bst->bs_swapped ? swap(x) : x;
d143 1
a143 1
            bst->bs_swapped ? swap(x) : x;
d194 1
a194 1
	register u_int16_t *buf16 = (u_int16_t *)buf;
d197 1
a197 1
		register u_int16_t x = *(volatile u_int16_t *)
d200 1
a200 1
		*buf16++ = bst->bs_swapped ? x : swap(x);
d220 1
a220 1
	register const u_int16_t *buf16 = (const u_int16_t *)buf;
d224 1
a224 1
		    bst->bs_swapped ? *buf16 : swap(*buf16);
@


1.5
log
@Make the bus_addr_t shift amount in addr calculations dynamic
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.4 1997/02/21 10:59:16 niklas Exp $	*/
d89 2
a90 1
	u_int16_t x = *(volatile u_int16_t *)(bsh + (ba << bst->bs_shift));
d148 1
a148 1
	*(volatile u_int16_t *)(bsh + (ba << bst->bs_shift)) =
d203 2
a204 2
		register u_int16_t x =
		    *(volatile u_int16_t *)(bsh + (ba << bst->bs_shift));
d229 1
a229 1
		*(volatile u_int16_t *)(bsh + (ba << bst->bs_shift)) =
@


1.4
log
@add bus_space_{read,write}_region_* + some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.3 1996/11/28 23:33:05 niklas Exp $	*/
d62 3
d83 1
a83 1
	return *(volatile u_int8_t *)(bsh + (ba << 1));
d89 1
a89 1
	register u_int16_t x = *(volatile u_int16_t *)((bsh & ~1) + (ba << 1));
d140 1
a140 1
	*(volatile u_int8_t *)(bsh + (ba << 1)) = x;
d147 1
a147 1
	*(volatile u_int16_t *)((bsh & ~1) + (ba << 1)) =
d203 1
a203 1
		    *(volatile u_int16_t *)((bsh & ~1) + (ba << 1));
d228 1
a228 1
		*(volatile u_int16_t *)((bsh & ~1) + (ba << 1)) =
@


1.3
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.2 1996/08/04 01:34:38 niklas Exp $	*/
d57 1
a57 1
	    bus_space_handle_t *);
d116 17
d172 18
@


1.2
log
@Change of our extensions to the bus.h interface.  Remove host_to_bus
functions and instead provide raw byte-buffer reads with wide datapaths.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 2
a36 2
#ifndef _MACHINE_BUS_H_
#define _MACHINE_BUS_H_
d38 21
a58 9
/* I/O access types.  */
typedef u_long bus_io_addr_t;
typedef u_long bus_io_size_t;
typedef u_long bus_io_handle_t;

/* Memory access types.  */
typedef u_long bus_mem_addr_t;
typedef u_long bus_mem_size_t;
typedef u_long bus_mem_handle_t;
d60 3
a62 5
/*
 * The big switch, that delegates each bus operation to the right
 * implementation.
 */
typedef struct amiga_bus_chipset *bus_chipset_tag_t;
d64 89
a152 2
struct amiga_bus_chipset {
	void	*bc_data;
d154 1
a154 61
	int	(*bc_io_map)(bus_chipset_tag_t, bus_io_addr_t, bus_io_size_t,
	    bus_io_handle_t *);
	int	(*bc_io_unmap)(bus_io_handle_t, bus_io_size_t);

	u_int8_t (*bc_io_read_1)(bus_io_handle_t, bus_io_size_t);
	u_int16_t (*bc_io_read_2)(bus_io_handle_t, bus_io_size_t);
	u_int32_t (*bc_io_read_4)(bus_io_handle_t, bus_io_size_t);
	u_int64_t (*bc_io_read_8)(bus_io_handle_t, bus_io_size_t);

	void	(*bc_io_read_multi_1)(bus_io_handle_t, bus_io_size_t,
		    u_int8_t *, bus_io_size_t);
	void	(*bc_io_read_multi_2)(bus_io_handle_t, bus_io_size_t,
		    u_int16_t *, bus_io_size_t);
	void	(*bc_io_read_multi_4)(bus_io_handle_t, bus_io_size_t,
		    u_int32_t *, bus_io_size_t);
	void	(*bc_io_read_multi_8)(bus_io_handle_t, bus_io_size_t,
		    u_int64_t *, bus_io_size_t);

	void	(*bc_io_write_1)(bus_io_handle_t, bus_io_size_t, u_int8_t);
	void	(*bc_io_write_2)(bus_io_handle_t, bus_io_size_t, u_int16_t);
	void	(*bc_io_write_4)(bus_io_handle_t, bus_io_size_t, u_int32_t);
	void	(*bc_io_write_8)(bus_io_handle_t, bus_io_size_t, u_int64_t);

	void	(*bc_io_write_multi_1)(bus_io_handle_t, bus_io_size_t,
		    const u_int8_t *, bus_io_size_t);
	void	(*bc_io_write_multi_2)(bus_io_handle_t, bus_io_size_t,
		    const u_int16_t *, bus_io_size_t);
	void	(*bc_io_write_multi_4)(bus_io_handle_t, bus_io_size_t,
		    const u_int32_t *, bus_io_size_t);
	void	(*bc_io_write_multi_8)(bus_io_handle_t, bus_io_size_t,
		    const u_int64_t *, bus_io_size_t);

	int	(*bc_mem_map)(bus_chipset_tag_t, bus_mem_addr_t,
		    bus_mem_size_t, int, bus_mem_handle_t *);
	int	(*bc_mem_unmap)(bus_mem_handle_t, bus_mem_size_t);

	u_int8_t (*bc_mem_read_1)(bus_mem_handle_t, bus_mem_size_t);
	u_int16_t (*bc_mem_read_2)(bus_mem_handle_t, bus_mem_size_t);
	u_int32_t (*bc_mem_read_4)(bus_mem_handle_t, bus_mem_size_t);
	u_int64_t (*bc_mem_read_8)(bus_mem_handle_t, bus_mem_size_t);

	void	(*bc_mem_write_1)(bus_mem_handle_t, bus_mem_size_t, u_int8_t);
	void	(*bc_mem_write_2)(bus_mem_handle_t, bus_mem_size_t, u_int16_t);
	void	(*bc_mem_write_4)(bus_mem_handle_t, bus_mem_size_t, u_int32_t);
	void	(*bc_mem_write_8)(bus_mem_handle_t, bus_mem_size_t, u_int64_t);

	/* These are extensions to the general NetBSD bus interface.  */
	void	(*bc_io_read_raw_multi_2)(bus_io_handle_t, bus_io_size_t,
		    u_int8_t *, bus_io_size_t);
	void	(*bc_io_read_raw_multi_4)(bus_io_handle_t, bus_io_size_t,
		    u_int8_t *, bus_io_size_t);
	void	(*bc_io_read_raw_multi_8)(bus_io_handle_t, bus_io_size_t,
		    u_int8_t *, bus_io_size_t);

	void	(*bc_io_write_raw_multi_2)(bus_io_handle_t, bus_io_size_t,
		    const u_int8_t *, bus_io_size_t);
	void	(*bc_io_write_raw_multi_4)(bus_io_handle_t, bus_io_size_t,
		    const u_int8_t *, bus_io_size_t);
	void	(*bc_io_write_raw_multi_8)(bus_io_handle_t, bus_io_size_t,
		    const u_int8_t *, bus_io_size_t);
};
d156 48
a203 63
#define bus_io_map(t, port, size, iohp) \
    (*(t)->bc_io_map)((t), (port), (size), (iohp))
#define bus_io_unmap(t, iohp, size) \
    (*(t)->bc_io_unmap)((iohp), (size))

#define	bus_io_read_1(t, h, o) \
    (*(t)->bc_io_read_1)((h), (o))
#define	bus_io_read_2(t, h, o) \
    (*(t)->bc_io_read_2)((h), (o))
#define	bus_io_read_4(t, h, o) \
    (*(t)->bc_io_read_4)((h), (o))
#define	bus_io_read_8(t, h, o) \
    (*(t)->bc_io_read_8)((h), (o))

#define	bus_io_read_multi_1(t, h, o, a, s) \
    (*(t)->bc_io_read_multi_1)((h), (o), (a), (s))
#define	bus_io_read_multi_2(t, h, o, a, s) \
    (*(t)->bc_io_read_multi_2)((h), (o), (a), (s))
#define	bus_io_read_multi_4(t, h, o, a, s) \
    (*(t)->bc_io_read_multi_4)((h), (o), (a), (s))
#define	bus_io_read_multi_8(t, h, o, a, s) \
    (*(t)->bc_io_read_multi_8)((h), (o), (a), (s))

#define	bus_io_write_1(t, h, o, v) \
    (*(t)->bc_io_write_1)((h), (o), (v))
#define	bus_io_write_2(t, h, o, v) \
    (*(t)->bc_io_write_2)((h), (o), (v))
#define	bus_io_write_4(t, h, o, v) \
    (*(t)->bc_io_write_4)((h), (o), (v))
#define	bus_io_write_8(t, h, o, v) \
    (*(t)->bc_io_write_8)((h), (o), (v))

#define	bus_io_write_multi_1(t, h, o, a, s) \
    (*(t)->bc_io_write_multi_1)((h), (o), (a), (s))
#define	bus_io_write_multi_2(t, h, o, a, s) \
    (*(t)->bc_io_write_multi_2)((h), (o), (a), (s))
#define	bus_io_write_multi_4(t, h, o, a, s) \
    (*(t)->bc_io_write_multi_4)((h), (o), (a), (s))
#define	bus_io_write_multi_8(t, h, o, a, s) \
    (*(t)->bc_io_write_multi_8)((h), (o), (a), (s))

#define bus_mem_map(t, port, size, cacheable, mhp) \
    (*(t)->bc_mem_map)((t), (port), (size), (cacheable), (mhp))
#define bus_mem_unmap(t, mhp, size) \
    (*(t)->bc_mem_unmap)((mhp), (size))

#define	bus_mem_read_1(t, h, o) \
    (*(t)->bc_mem_read_1)((h), (o))
#define	bus_mem_read_2(t, h, o) \
    (*(t)->bc_mem_read_2)((h), (o))
#define	bus_mem_read_4(t, h, o) \
    (*(t)->bc_mem_read_4)((h), (o))
#define	bus_mem_read_8(t, h, o) \
    (*(t)->bc_mem_read_8)((h), (o))

#define	bus_mem_write_1(t, h, o, v) \
    (*(t)->bc_mem_write_1)((h), (o), (v))
#define	bus_mem_write_2(t, h, o, v) \
    (*(t)->bc_mem_write_2)((h), (o), (v))
#define	bus_mem_write_4(t, h, o, v) \
    (*(t)->bc_mem_write_4)((h), (o), (v))
#define	bus_mem_write_8(t, h, o, v) \
    (*(t)->bc_mem_write_8)((h), (o), (v))
d205 2
a206 14
/* OpenBSD extensions */
#define	bus_io_read_raw_multi_2(t, h, o, a, s) \
    (*(t)->bc_io_read_raw_multi_2)((h), (o), (a), (s))
#define	bus_io_read_raw_multi_4(t, h, o, a, s) \
    (*(t)->bc_io_read_raw_multi_4)((h), (o), (a), (s))
#define	bus_io_read_raw_multi_8(t, h, o, a, s) \
    (*(t)->bc_io_read_raw_multi_8)((h), (o), (a), (s))

#define	bus_io_write_raw_multi_2(t, h, o, a, s) \
    (*(t)->bc_io_write_raw_multi_2)((h), (o), (a), (s))
#define	bus_io_write_raw_multi_4(t, h, o, a, s) \
    (*(t)->bc_io_write_raw_multi_4)((h), (o), (a), (s))
#define	bus_io_write_raw_multi_8(t, h, o, a, s) \
    (*(t)->bc_io_write_raw_multi_8)((h), (o), (a), (s))
d208 1
a208 1
#endif /* _MACHINE_BUS_H_ */
@


1.1
log
@Bring forward the Amiga ISA support, and resolve a conflict with if_ed
@
text
@d104 13
a116 7
	u_int16_t (*bc_to_host_2)(u_int16_t);
	u_int32_t (*bc_to_host_4)(u_int32_t);
	u_int64_t (*bc_to_host_8)(u_int64_t);

	u_int16_t (*bc_from_host_2)(u_int16_t);
	u_int32_t (*bc_from_host_4)(u_int32_t);
	u_int64_t (*bc_from_host_8)(u_int64_t);
d183 14
a196 8
/* These are extensions to the general NetBSD bus interface.  */
#define bus_to_host_2(t, v) (*(t)->bc_to_host_2)(v)
#define bus_to_host_4(t, v) (*(t)->bc_to_host_4)(v)
#define bus_to_host_8(t, v) (*(t)->bc_to_host_8)(v)

#define bus_from_host_2(t, v) (*(t)->bc_from_host_2)(v)
#define bus_from_host_4(t, v) (*(t)->bc_from_host_4)(v)
#define bus_from_host_8(t, v) (*(t)->bc_from_host_8)(v)
@
