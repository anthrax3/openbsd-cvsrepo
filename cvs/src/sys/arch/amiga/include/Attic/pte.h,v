head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.4.0.2
	UBC_BASE:1.4
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2002.03.25.19.41.03;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.23.00.31.11;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.20.19.02.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.06.22.33.18;	author miod;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.11.30.23.20.09;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.09.26.05;	author niklas;	state Exp;
branches
	1.2.14.1;
next	1.1;

1.1
date	95.10.18.08.50.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.04;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.12.05.00.39.09;	author niklas;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2002.03.06.00.56.19;	author niklas;	state Exp;
branches;
next	1.2.14.3;

1.2.14.3
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.4.2.1
date	2002.01.31.22.55.07;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: pte.h,v 1.7 2002/03/25 19:41:03 niklas Exp $	*/
/*	$NetBSD: pte.h,v 1.14 1995/09/29 13:52:09 chopps Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: pte.h 1.11 89/09/03$
 *
 *	@@(#)pte.h	7.3 (Berkeley) 5/8/91
 */
#ifndef _MACHINE_PTE_H_
#define _MACHINE_PTE_H_

/*
 * AMIGA hardware segment/page table entries
 */

struct pte {
	u_int pte;
};
typedef u_int pt_entry_t;		/* Mach page table entry */

struct ste {
	u_int ste;
};
typedef u_int st_entry_t;		/* segment table entry */

#define	PT_ENTRY_NULL	((pt_entry_t *) 0)
#define	ST_ENTRY_NULL	((st_entry_t *) 0)

#define	SG_V		0x00000002	/* segment is valid */
#define	SG_NV		0x00000000
#define	SG_PROT		0x00000004	/* access protection mask */
#define	SG_RO		0x00000004
#define	SG_RW		0x00000000
#define SG_U		0x00000008	/* modified bit (68040) */
#define	SG_FRAME	0xffffe000
#define SG_IMASK	0xff000000
#define SG_ISHIFT	24
#define SG_PMASK	0x00ffe000
#define SG_PSHIFT	13

/* 68040 additions */
#define SG4_MASK1	0xfe000000	/* pointer table 1 index mask */
#define SG4_SHIFT1	25
#define SG4_MASK2	0x01fc0000	/* pointer table 2 index mask */
#define	SG4_SHIFT2	18
#define SG4_MASK3	0x0003e000	/* page table index mask */
#define	SG4_SHIFT3	13
#define	SG4_ADDR1	0xfffffe00	/* pointer table address mask */
#define	SG4_ADDR2	0xffffff80	/* page table address mask */
#define SG4_LEV1SIZE	128		/* entries in pointer table 1 */
#define SG4_LEV2SIZE	128		/* entries in pointer table 2 */
#define SG4_LEV3SIZE	32		/* entries in page table */

#define	PG_V		0x00000001
#define	PG_NV		0x00000000
#define	PG_PROT		0x00000004
#define	PG_U		0x00000008
#define	PG_M		0x00000010
#define	PG_W		0x00000100
#define	PG_RO		0x00000004
#define	PG_RW		0x00000000
#define PG_FRAME	0xffffe000
#define	PG_CI		0x00000040
#define PG_SHIFT	13
#define	PG_PFNUM(x)	(((x) & PG_FRAME) >> PG_SHIFT)

/* 68040 additions */
#define PG_CMASK	0x00000060	/* cache mode mask */
#define PG_CWT		0x00000000	/* writethrough caching */
#define PG_CCB		0x00000020	/* copyback caching */
#define PG_CIS		0x00000040	/* cache inhibited serialized */
#define PG_CIN		0x00000060	/* cache inhibited nonserialized */
#define PG_SO		0x00000080	/* supervisor only */

#define AMIGA_040RTSIZE		512	/* root (level 1) table size */
#define AMIGA_040STSIZE		512	/* segment (level 2) table size */
#define	AMIGA_040PTSIZE		128	/* page (level 3) table size */
#if 0
#define AMIGA_STSIZE		1024	/* segment table size */
#else
#define	AMIGA_STSIZE		(MAXUL2SIZE*SG4_LEV2SIZE*sizeof(st_entry_t))
#endif
/*
 * AMIGA_MAX_COREUPT	maximum number of incore user page tables
 * AMIGA_USER_PTSIZE	the number of bytes for user pagetables
 * AMIGA_PTBASE		the VA start of the map from which upt's are allocated
 * AMIGA_PTSIZE		the size of the map from which upt's are allocated
 * AMIGA_KPTSIZE	size of kernel page table
 * AMIGA_MAX_KPTSIZE	the most number of bytes for kpt pages
 * AMIGA_MAX_PTSIZE	the number of bytes to map everything
 */
#define AMIGA_MAX_COREUPT	1024
#define AMIGA_UPTSIZE		roundup(VM_MAXUSER_ADDRESS / NPTEPG, NBPG)
#define AMIGA_UPTBASE		0x10000000
#define AMIGA_UPTMAXSIZE \
    roundup((AMIGA_MAX_COREUPT * AMIGA_UPTSIZE), NBPG)
#define AMIGA_MAX_KPTSIZE \
    (AMIGA_MAX_COREUPT * AMIGA_UPTSIZE / NPTEPG)
#define AMIGA_KPTSIZE \
    roundup((VM_MAX_KERNEL_ADDRESS - VM_MIN_KERNEL_ADDRESS) / NPTEPG, NBPG)
#define AMIGA_MAX_PTSIZE	roundup(0xffffffff / NPTEPG, NBPG)

/*
 * Kernel virtual address to page table entry and to physical address.
 */
#define	kvtopte(va) \
	(&Sysmap[((unsigned)(va) - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT])
#define	ptetokv(pt) \
	((((u_int *)(pt) - Sysmap) << PGSHIFT) + VM_MIN_KERNEL_ADDRESS)
#define	kvtophys(va) \
	((kvtopte(va)->pg_pfnum << PGSHIFT) | ((int)(va) & PGOFSET))


#endif /* !_MACHINE_PTE_H_ */
@


1.7
log
@revert the pmap stuff to 0221, so we can boot
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.5 2001/12/20 19:02:26 miod Exp $	*/
@


1.6
log
@Bring back pmap_motorola in service for amiga, too.
@
text
@d2 1
d48 28
a75 1
#include <m68k/pte_motorola.h>
d77 37
a127 1
extern vaddr_t amiga_uptbase;
d130 1
a130 1
#define AMIGA_UPTBASE		amiga_uptbase
d139 10
a148 5
#define	MACHINE_STSIZE		AMIGA_STSIZE
#define	MACHINE_MAX_PTSIZE	AMIGA_MAX_PTSIZE
#define	MACHINE_MAX_KPTSIZE	AMIGA_MAX_KPTSIZE
#define	MACHINE_PTBASE		AMIGA_UPTBASE
#define	MACHINE_PTMAXSIZE	AMIGA_UPTMAXSIZE
d150 1
a150 1
#endif /* _MACHINE_PTE_H_ */
@


1.5
log
@Temporarily revert the pmap_motorola changes, as they may account for
some problems as well.
Requested by deraadt@@
@
text
@d1 1
a1 2
/*	$OpenBSD: pte.h,v 1.4 2001/12/06 22:33:18 miod Exp $	*/
/*	$NetBSD: pte.h,v 1.14 1995/09/29 13:52:09 chopps Exp $	*/
d47 1
a47 28
/*
 * AMIGA hardware segment/page table entries
 */

struct pte {
	u_int pte;
};
typedef u_int pt_entry_t;		/* Mach page table entry */

struct ste {
	u_int ste;
};
typedef u_int st_entry_t;		/* segment table entry */

#define	PT_ENTRY_NULL	((pt_entry_t *) 0)
#define	ST_ENTRY_NULL	((st_entry_t *) 0)

#define	SG_V		0x00000002	/* segment is valid */
#define	SG_NV		0x00000000
#define	SG_PROT		0x00000004	/* access protection mask */
#define	SG_RO		0x00000004
#define	SG_RW		0x00000000
#define SG_U		0x00000008	/* modified bit (68040) */
#define	SG_FRAME	0xffffe000
#define SG_IMASK	0xff000000
#define SG_ISHIFT	24
#define SG_PMASK	0x00ffe000
#define SG_PSHIFT	13
a48 37
/* 68040 additions */
#define SG4_MASK1	0xfe000000	/* pointer table 1 index mask */
#define SG4_SHIFT1	25
#define SG4_MASK2	0x01fc0000	/* pointer table 2 index mask */
#define	SG4_SHIFT2	18
#define SG4_MASK3	0x0003e000	/* page table index mask */
#define	SG4_SHIFT3	13
#define	SG4_ADDR1	0xfffffe00	/* pointer table address mask */
#define	SG4_ADDR2	0xffffff80	/* page table address mask */
#define SG4_LEV1SIZE	128		/* entries in pointer table 1 */
#define SG4_LEV2SIZE	128		/* entries in pointer table 2 */
#define SG4_LEV3SIZE	32		/* entries in page table */

#define	PG_V		0x00000001
#define	PG_NV		0x00000000
#define	PG_PROT		0x00000004
#define	PG_U		0x00000008
#define	PG_M		0x00000010
#define	PG_W		0x00000100
#define	PG_RO		0x00000004
#define	PG_RW		0x00000000
#define PG_FRAME	0xffffe000
#define	PG_CI		0x00000040
#define PG_SHIFT	13
#define	PG_PFNUM(x)	(((x) & PG_FRAME) >> PG_SHIFT)

/* 68040 additions */
#define PG_CMASK	0x00000060	/* cache mode mask */
#define PG_CWT		0x00000000	/* writethrough caching */
#define PG_CCB		0x00000020	/* copyback caching */
#define PG_CIS		0x00000040	/* cache inhibited serialized */
#define PG_CIN		0x00000060	/* cache inhibited nonserialized */
#define PG_SO		0x00000080	/* supervisor only */

#define AMIGA_040RTSIZE		512	/* root (level 1) table size */
#define AMIGA_040STSIZE		512	/* segment (level 2) table size */
#define	AMIGA_040PTSIZE		128	/* page (level 3) table size */
d63 1
d66 1
a66 1
#define AMIGA_UPTBASE		0x10000000
d75 5
a79 10
/*
 * Kernel virtual address to page table entry and to physical address.
 */
#define	kvtopte(va) \
	(&Sysmap[((unsigned)(va) - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT])
#define	ptetokv(pt) \
	((((u_int *)(pt) - Sysmap) << PGSHIFT) + VM_MIN_KERNEL_ADDRESS)
#define	kvtophys(va) \
	((kvtopte(va)->pg_pfnum << PGSHIFT) | ((int)(va) & PGOFSET))

d81 1
a81 1
#endif /* !_MACHINE_PTE_H_ */
@


1.4
log
@MACHINE_UPTBASE is not constant on amiga, ouch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.3 2001/11/30 23:20:09 miod Exp $	*/
d48 62
a109 1
#include <m68k/pte_motorola.h>
a113 1

a127 1
extern vaddr_t amiga_uptbase;
d130 1
a130 1
#define AMIGA_UPTBASE		amiga_uptbase
d139 10
a148 5
#define	MACHINE_STSIZE		AMIGA_STSIZE
#define	MACHINE_MAX_PTSIZE	AMIGA_MAX_PTSIZE
#define	MACHINE_MAX_KPTSIZE	AMIGA_MAX_KPTSIZE
#define	MACHINE_PTBASE		AMIGA_UPTBASE
#define	MACHINE_PTMAXSIZE	AMIGA_UPTMAXSIZE
@


1.4.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.5 2001/12/20 19:02:26 miod Exp $	*/
d48 1
a48 62
/*
 * AMIGA hardware segment/page table entries
 */

struct pte {
	u_int pte;
};
typedef u_int pt_entry_t;		/* Mach page table entry */

struct ste {
	u_int ste;
};
typedef u_int st_entry_t;		/* segment table entry */

#define	PT_ENTRY_NULL	((pt_entry_t *) 0)
#define	ST_ENTRY_NULL	((st_entry_t *) 0)

#define	SG_V		0x00000002	/* segment is valid */
#define	SG_NV		0x00000000
#define	SG_PROT		0x00000004	/* access protection mask */
#define	SG_RO		0x00000004
#define	SG_RW		0x00000000
#define SG_U		0x00000008	/* modified bit (68040) */
#define	SG_FRAME	0xffffe000
#define SG_IMASK	0xff000000
#define SG_ISHIFT	24
#define SG_PMASK	0x00ffe000
#define SG_PSHIFT	13

/* 68040 additions */
#define SG4_MASK1	0xfe000000	/* pointer table 1 index mask */
#define SG4_SHIFT1	25
#define SG4_MASK2	0x01fc0000	/* pointer table 2 index mask */
#define	SG4_SHIFT2	18
#define SG4_MASK3	0x0003e000	/* page table index mask */
#define	SG4_SHIFT3	13
#define	SG4_ADDR1	0xfffffe00	/* pointer table address mask */
#define	SG4_ADDR2	0xffffff80	/* page table address mask */
#define SG4_LEV1SIZE	128		/* entries in pointer table 1 */
#define SG4_LEV2SIZE	128		/* entries in pointer table 2 */
#define SG4_LEV3SIZE	32		/* entries in page table */

#define	PG_V		0x00000001
#define	PG_NV		0x00000000
#define	PG_PROT		0x00000004
#define	PG_U		0x00000008
#define	PG_M		0x00000010
#define	PG_W		0x00000100
#define	PG_RO		0x00000004
#define	PG_RW		0x00000000
#define PG_FRAME	0xffffe000
#define	PG_CI		0x00000040
#define PG_SHIFT	13
#define	PG_PFNUM(x)	(((x) & PG_FRAME) >> PG_SHIFT)

/* 68040 additions */
#define PG_CMASK	0x00000060	/* cache mode mask */
#define PG_CWT		0x00000000	/* writethrough caching */
#define PG_CCB		0x00000020	/* copyback caching */
#define PG_CIS		0x00000040	/* cache inhibited serialized */
#define PG_CIN		0x00000060	/* cache inhibited nonserialized */
#define PG_SO		0x00000080	/* supervisor only */
d53 1
d68 1
d71 1
a71 1
#define AMIGA_UPTBASE		0x10000000
d80 5
a84 10
/*
 * Kernel virtual address to page table entry and to physical address.
 */
#define	kvtopte(va) \
	(&Sysmap[((unsigned)(va) - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT])
#define	ptetokv(pt) \
	((((u_int *)(pt) - Sysmap) << PGSHIFT) + VM_MIN_KERNEL_ADDRESS)
#define	kvtophys(va) \
	((kvtopte(va)->pg_pfnum << PGSHIFT) | ((int)(va) & PGOFSET))

@


1.4.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.4.2.1 2002/01/31 22:55:07 niklas Exp $	*/
@


1.4.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.4.2.2 2002/06/11 03:34:58 art Exp $	*/
@


1.3
log
@More changes that cvs forgot to commit in the pmap_motorola switch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2 1997/01/16 09:26:05 niklas Exp $	*/
d68 1
d71 1
a71 1
#define AMIGA_UPTBASE		0x10000000
@


1.2
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.14 1995/09/29 13:52:09 chopps Exp $	*/
d48 1
a48 62
/*
 * AMIGA hardware segment/page table entries
 */

struct pte {
	u_int pte;
};
typedef u_int pt_entry_t;		/* Mach page table entry */

struct ste {
	u_int ste;
};
typedef u_int st_entry_t;		/* segment table entry */

#define	PT_ENTRY_NULL	((pt_entry_t *) 0)
#define	ST_ENTRY_NULL	((st_entry_t *) 0)

#define	SG_V		0x00000002	/* segment is valid */
#define	SG_NV		0x00000000
#define	SG_PROT		0x00000004	/* access protection mask */
#define	SG_RO		0x00000004
#define	SG_RW		0x00000000
#define SG_U		0x00000008	/* modified bit (68040) */
#define	SG_FRAME	0xffffe000
#define SG_IMASK	0xff000000
#define SG_ISHIFT	24
#define SG_PMASK	0x00ffe000
#define SG_PSHIFT	13

/* 68040 additions */
#define SG4_MASK1	0xfe000000	/* pointer table 1 index mask */
#define SG4_SHIFT1	25
#define SG4_MASK2	0x01fc0000	/* pointer table 2 index mask */
#define	SG4_SHIFT2	18
#define SG4_MASK3	0x0003e000	/* page table index mask */
#define	SG4_SHIFT3	13
#define	SG4_ADDR1	0xfffffe00	/* pointer table address mask */
#define	SG4_ADDR2	0xffffff80	/* page table address mask */
#define SG4_LEV1SIZE	128		/* entries in pointer table 1 */
#define SG4_LEV2SIZE	128		/* entries in pointer table 2 */
#define SG4_LEV3SIZE	32		/* entries in page table */

#define	PG_V		0x00000001
#define	PG_NV		0x00000000
#define	PG_PROT		0x00000004
#define	PG_U		0x00000008
#define	PG_M		0x00000010
#define	PG_W		0x00000100
#define	PG_RO		0x00000004
#define	PG_RW		0x00000000
#define PG_FRAME	0xffffe000
#define	PG_CI		0x00000040
#define PG_SHIFT	13
#define	PG_PFNUM(x)	(((x) & PG_FRAME) >> PG_SHIFT)

/* 68040 additions */
#define PG_CMASK	0x00000060	/* cache mode mask */
#define PG_CWT		0x00000000	/* writethrough caching */
#define PG_CCB		0x00000020	/* copyback caching */
#define PG_CIS		0x00000040	/* cache inhibited serialized */
#define PG_CIN		0x00000060	/* cache inhibited nonserialized */
#define PG_SO		0x00000080	/* supervisor only */
d53 1
d79 5
a83 10
/*
 * Kernel virtual address to page table entry and to physical address.
 */
#define	kvtopte(va) \
	(&Sysmap[((unsigned)(va) - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT])
#define	ptetokv(pt) \
	((((u_int *)(pt) - Sysmap) << PGSHIFT) + VM_MIN_KERNEL_ADDRESS)
#define	kvtophys(va) \
	((kvtopte(va)->pg_pfnum << PGSHIFT) | ((int)(va) & PGOFSET))

@


1.2.14.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2 1997/01/16 09:26:05 niklas Exp $	*/
d48 62
a109 1
#include <m68k/pte_motorola.h>
a113 1

d139 10
a148 5
#define	MACHINE_STSIZE		AMIGA_STSIZE
#define	MACHINE_MAX_PTSIZE	AMIGA_MAX_PTSIZE
#define	MACHINE_MAX_KPTSIZE	AMIGA_MAX_KPTSIZE
#define	MACHINE_PTBASE		AMIGA_UPTBASE
#define	MACHINE_PTMAXSIZE	AMIGA_UPTMAXSIZE
@


1.2.14.2
log
@Merge in trunk
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d50 4
a67 1
extern vaddr_t amiga_uptbase;
d70 1
a70 1
#define AMIGA_UPTBASE		amiga_uptbase
d85 1
a85 1
#endif /* _MACHINE_PTE_H_ */
@


1.2.14.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2.14.2 2002/03/06 00:56:19 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
