head	1.22;
access;
symbols
	SMP_SYNC_A:1.22
	SMP_SYNC_B:1.22
	UBC_SYNC_A:1.22
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.20.0.2
	OPENBSD_3_1_BASE:1.20
	UBC_SYNC_B:1.21
	UBC:1.16.0.2
	UBC_BASE:1.16
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.12.0.16
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.14
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.12
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.10
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.8
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.6
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.12.0.4
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.12.0.2
	OPENBSD_2_3_BASE:1.12
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.21;

1.21
date	2002.06.07.21.33.43;	author nordin;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.25.19.41.03;	author niklas;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.23.00.31.11;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.20.19.02.26;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.12.07.00.59.16;	author miod;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.11.30.23.20.09;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.20.19.48.55;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.05.22.33.31;	author art;	state Exp;
branches;
next	1.12;

1.12
date	98.03.01.00.37.22;	author niklas;	state Exp;
branches
	1.12.10.1;
next	1.11;

1.11
date	97.09.19.17.16.18;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.09.18.13.40.01;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.01.16.09.25.46;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.05.29.10.15.50;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.05.02.07.57.23;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.05.02.06.44.44;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.04.21.22.15.55;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.03.30.22.18.27;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.03.24.17.28.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.21.14.40.29;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.03;	author deraadt;	state Exp;
branches;
next	;

1.12.10.1
date	2001.07.04.10.15.15;	author niklas;	state Exp;
branches;
next	1.12.10.2;

1.12.10.2
date	2001.10.31.02.52.45;	author nate;	state Exp;
branches;
next	1.12.10.3;

1.12.10.3
date	2001.12.05.00.39.09;	author niklas;	state Exp;
branches;
next	1.12.10.4;

1.12.10.4
date	2002.03.06.00.56.19;	author niklas;	state Exp;
branches;
next	1.12.10.5;

1.12.10.5
date	2002.03.28.10.06.15;	author niklas;	state Exp;
branches;
next	1.12.10.6;

1.12.10.6
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.16.2.1
date	2002.01.31.22.55.07;	author niklas;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.22
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: cpu.h,v 1.21 2002/06/07 21:33:43 nordin Exp $	*/
/*	$NetBSD: cpu.h,v 1.36 1996/09/11 00:11:42 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: cpu.h 1.16 91/03/25$
 *
 *	@@(#)cpu.h	7.7 (Berkeley) 6/27/91
 */
#ifndef _MACHINE_CPU_H_
#define _MACHINE_CPU_H_

/*
 * Exported definitions unique to amiga/68k cpu support.
 */
#include <machine/psl.h>

/*
 * Get common m68k CPU definitions.
 */
#include <m68k/cpu.h>
#define	M68K_MMU_MOTOROLA

/*
 * definitions of cpu-dependent requirements
 * referenced in generic code
 */
#define	cpu_swapin(p)			/* nothing */
#define	cpu_wait(p)			/* nothing */
#define	cpu_swapout(p)			/* nothing */

/*
 * Arguments to hardclock and gatherstats encapsulate the previous
 * machine state in an opaque clockframe.  One the hp300, we use
 * what the hardware pushes on an interrupt (frame format 0).
 */
struct clockframe {
	u_short	sr;		/* sr at time of interrupt */
	u_long	pc;		/* pc at time of interrupt */
	u_short	vo;		/* vector offset (4-word frame) */
};

#define	CLKF_USERMODE(framep)	(((framep)->sr & PSL_S) == 0)
#define	CLKF_PC(framep)		((framep)->pc)
#if 0
/* We would like to do it this way... */
#define	CLKF_INTR(framep)	(((framep)->sr & PSL_M) == 0)
#else
/* but until we start using PSL_M, we have to do this instead */
#define	CLKF_INTR(framep)	(0)	/* XXX */
#endif


/*
 * Preempt the current process if in interrupt from user mode,
 * or after the current trap/syscall if in system mode.
 */
#define	need_resched()	{want_resched = 1; setsoftast();}

/*
 * Give a profiling tick to the current process from the softclock
 * interrupt.  On hp300, request an ast to send us through trap(),
 * marking the proc as needing a profiling tick.
 */
#define	profile_tick(p, framep)	((p)->p_flag |= P_OWEUPC, setsoftast())
#define	need_proftick(p)	((p)->p_flag |= P_OWEUPC, setsoftast())

/*
 * Notify the current process (p) that it has a signal pending,
 * process as soon as possible.
 */
#define	signotify(p)	setsoftast()

#define setsoftast()	(astpending = 1)

int	astpending;		/* need trap before returning to user mode */
int	want_resched;		/* resched() was called */

/* include support for software interrupts */
#include <machine/mtpr.h>

/*
 * The rest of this should probably be moved to ../amiga/amigacpu.h,
 * although some of it could probably be put into generic 68k headers.
 */

/* values for machineid (happen to be AFF_* settings of AttnFlags) */
#define AMIGA_68020	(1L<<1)
#define AMIGA_68030	(1L<<2)
#define AMIGA_68040	(1L<<3)
#define AMIGA_68881	(1L<<4)
#define AMIGA_68882	(1L<<5)
#define	AMIGA_FPU40	(1L<<6)
#define AMIGA_68060	(1L<<7)

#ifdef _KERNEL
int machineid;
#endif

/*
 * CTL_MACHDEP definitions.
 */
#define CPU_CONSDEV	1	/* dev_t: console terminal device */
#define CPU_MAXID	2	/* number of valid machdep ids */

#define CTL_MACHDEP_NAMES { \
	{ 0, 0 }, \
	{ "console_device", CTLTYPE_STRUCT }, \
}

#ifdef _KERNEL
/*
 * Prototypes from amiga_init.c
 */
void	*alloc_z2mem(long);

/*
 * Prototypes from autoconf.c
 */
int	is_a1200(void);
int	is_a3000(void);
int	is_a4000(void);
#ifdef DRACO
int	is_draco(void);
#endif

/*
 * Prototypes from clock.c
 */
u_long	clkread(void);

#ifdef DRACO
/*
 * Prototypes from kbd.c
 */
void	drkbdintr(void);

/*
 * Prototypes from drsc.c
 */
void	drsc_handler(void);
#endif

/*
 * Prototypes from locore.s
 */
struct fpframe;
struct user;
struct pcb;

void	clearseg(vm_offset_t);
void	doboot(void) __attribute__((__noreturn__));
void	loadustp(int);
void	m68881_save(struct fpframe *);
void	m68881_restore(struct fpframe *);
void	physcopyseg(vm_offset_t, vm_offset_t);
u_int	probeva(u_int, u_int);
void	proc_trampoline(void);
void	savectx(struct pcb *);
void	switch_exit(struct proc *);
void	DCIAS(vm_offset_t);
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
void	ICIA(void);
void	ICPA(void);
void	PCIA(void);
void	TBIA(void);
void	TBIS(vm_offset_t);
void	TBIAS(void);
void	TBIAU(void);
#if defined(M68040) || defined(M68060)
void	DCFA(void);
void	DCFP(vm_offset_t);
void	DCFL(vm_offset_t);
void	DCPL(vm_offset_t);
void	DCPP(vm_offset_t);
void	ICPL(vm_offset_t);
void	ICPP(vm_offset_t);
#endif

/*
 * Prototypes from machdep.c
 */
int	badaddr(caddr_t);
int	badbaddr(caddr_t);
void	bootsync(void);
void	dumpconf(void);

/*
 * Prototypes from sys_machdep.c:
 */
int	cachectl(int, caddr_t, int);
int	dma_cachectl(caddr_t, int);

/*
 * Prototypes from vm_machdep.c
 */
int	kvtop(caddr_t);
void	physaccess(caddr_t,  caddr_t, int, int);
void	physunaccess(caddr_t, int);

#ifdef GENERIC
/*
 * Prototypes from swapgeneric.c:
 */
void	setconf(void);
#endif

/*
 * Prototypes from pmap.c:
 */
void	pmap_bootstrap(vm_offset_t, vm_offset_t);
vm_offset_t pmap_map(vm_offset_t, vm_offset_t, vm_offset_t, int);

#endif /* _KERNEL */

#endif /* !_MACHINE_CPU_H_ */
@


1.21
log
@Remove obsolete CLKF_BASEPRI(). ok niklas@@, miod@@ and art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.20 2002/03/25 19:41:03 niklas Exp $	*/
@


1.20
log
@revert the pmap stuff to 0221, so we can boot
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.17 2001/12/20 19:02:26 miod Exp $	*/
a78 1
#define	CLKF_BASEPRI(framep)	(((framep)->sr & PSL_IPL) == 0)
@


1.19
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.18 2002/02/23 00:31:11 miod Exp $	*/
d187 1
d192 1
@


1.18
log
@Bring back pmap_motorola in service for amiga, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.17 2001/12/20 19:02:26 miod Exp $	*/
d151 1
a151 1
void	*alloc_z2mem __P((long));
d156 3
a158 3
int	is_a1200 __P((void));
int	is_a3000 __P((void));
int	is_a4000 __P((void));
d160 1
a160 1
int	is_draco __P((void));
d166 1
a166 1
u_long	clkread __P((void));
d172 1
a172 1
void	drkbdintr __P((void));
d177 1
a177 1
void	drsc_handler __P((void));
d187 19
a205 19
void	doboot __P((void)) __attribute__((__noreturn__));
void	loadustp __P((int));
void	m68881_save __P((struct fpframe *));
void	m68881_restore __P((struct fpframe *));
u_int	probeva __P((u_int, u_int));
void	proc_trampoline __P((void));
void	savectx __P((struct pcb *));
void	switch_exit __P((struct proc *));
void	DCIAS __P((vm_offset_t));
void	DCIA __P((void));
void	DCIS __P((void));
void	DCIU __P((void));
void	ICIA __P((void));
void	ICPA __P((void));
void	PCIA __P((void));
void	TBIA __P((void));
void	TBIS __P((vm_offset_t));
void	TBIAS __P((void));
void	TBIAU __P((void));
d207 7
a213 7
void	DCFA __P((void));
void	DCFP __P((vm_offset_t));
void	DCFL __P((vm_offset_t));
void	DCPL __P((vm_offset_t));
void	DCPP __P((vm_offset_t));
void	ICPL __P((vm_offset_t));
void	ICPP __P((vm_offset_t));
d219 4
a222 4
int	badaddr __P((caddr_t));
int	badbaddr __P((caddr_t));
void	bootsync __P((void));
void	dumpconf __P((void));
d227 2
a228 2
int	cachectl __P((int, caddr_t, int));
int	dma_cachectl __P((caddr_t, int));
d233 3
a235 3
int	kvtop __P((caddr_t));
void	physaccess __P((caddr_t,  caddr_t, int, int));
void	physunaccess __P((caddr_t, int));
d241 1
a241 1
void	setconf __P((void));
d247 2
a248 2
void	pmap_bootstrap __P((vm_offset_t, vm_offset_t));
vm_offset_t pmap_map __P((vm_offset_t, vm_offset_t, vm_offset_t, int));
@


1.17
log
@Temporarily revert the pmap_motorola changes, as they may account for
some problems as well.
Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.16 2001/12/07 00:59:16 miod Exp $	*/
a186 1
void	clearseg __P((vm_offset_t));
a190 1
void	physcopyseg __P((vm_offset_t, vm_offset_t));
@


1.16
log
@Ratibibugle setredzone()

[Ratibibugle is local slang for g/c, remove, rototill, etc]
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.15 2001/11/30 23:20:09 miod Exp $	*/
d187 1
d192 1
@


1.16.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.17 2001/12/20 19:02:26 miod Exp $	*/
a186 1
void	clearseg __P((vm_offset_t));
a190 1
void	physcopyseg __P((vm_offset_t, vm_offset_t));
@


1.16.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.16.2.1 2002/01/31 22:55:07 niklas Exp $	*/
d79 1
d151 1
a151 1
void	*alloc_z2mem(long);
d156 3
a158 3
int	is_a1200(void);
int	is_a3000(void);
int	is_a4000(void);
d160 1
a160 1
int	is_draco(void);
d166 1
a166 1
u_long	clkread(void);
d172 1
a172 1
void	drkbdintr(void);
d177 1
a177 1
void	drsc_handler(void);
d187 21
a207 21
void	clearseg(vm_offset_t);
void	doboot(void) __attribute__((__noreturn__));
void	loadustp(int);
void	m68881_save(struct fpframe *);
void	m68881_restore(struct fpframe *);
void	physcopyseg(vm_offset_t, vm_offset_t);
u_int	probeva(u_int, u_int);
void	proc_trampoline(void);
void	savectx(struct pcb *);
void	switch_exit(struct proc *);
void	DCIAS(vm_offset_t);
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
void	ICIA(void);
void	ICPA(void);
void	PCIA(void);
void	TBIA(void);
void	TBIS(vm_offset_t);
void	TBIAS(void);
void	TBIAU(void);
d209 7
a215 7
void	DCFA(void);
void	DCFP(vm_offset_t);
void	DCFL(vm_offset_t);
void	DCPL(vm_offset_t);
void	DCPP(vm_offset_t);
void	ICPL(vm_offset_t);
void	ICPP(vm_offset_t);
d221 4
a224 4
int	badaddr(caddr_t);
int	badbaddr(caddr_t);
void	bootsync(void);
void	dumpconf(void);
d229 2
a230 2
int	cachectl(int, caddr_t, int);
int	dma_cachectl(caddr_t, int);
d235 3
a237 3
int	kvtop(caddr_t);
void	physaccess(caddr_t,  caddr_t, int, int);
void	physunaccess(caddr_t, int);
d243 1
a243 1
void	setconf(void);
d249 2
a250 2
void	pmap_bootstrap(vm_offset_t, vm_offset_t);
vm_offset_t pmap_map(vm_offset_t, vm_offset_t, vm_offset_t, int);
@


1.16.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.16.2.2 2002/06/11 03:34:58 art Exp $	*/
@


1.15
log
@More changes that cvs forgot to commit in the pmap_motorola switch.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.14 2001/08/20 19:48:55 miod Exp $	*/
a235 1
void	setredzone __P((u_int *, caddr_t));
@


1.14
log
@Bring get[sd]fc() prototypes to <m68k/cpu.h>, this will be needed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.13 2001/05/05 22:33:31 art Exp $	*/
a186 1
void	clearseg __P((vm_offset_t));
a190 1
void	physcopyseg __P((vm_offset_t, vm_offset_t));
@


1.13
log
@Rename configure() to cpu_configure().
Move it from cpu_startup() to main().
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12 1998/03/01 00:37:22 niklas Exp $	*/
a188 2
u_long	getdfc __P((void));
u_long	getsfc __P((void));
@


1.12
log
@Merge of MACHINE_NEW_CONTIG (aka MNN) code from Chuck Cranor,
<chuck@@openbsd.org>. This code is as of yet disabled on all platforms,
actually not yet supported on more than mvme68k, although other
platforms are expected soon, as code is already available.
This code makes handling of multiple physical memory regions
consistent over all platforms, as well as keeping the performance of
maintaining a single continuous memory chunk.  It is also a
requirement for the upcoming UVM replacement VM system.

What I did in this merge: just declared the pmap_map function in a
MD include file per port that needs it.  It's not an exported pmap
interface, says Chuck.  It ended up in differnt include files on
differnet ports, as I tried to follow the current policy on a per-arch
basis.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.11 1997/09/19 17:16:18 niklas Exp $	*/
a155 1
void	configure __P((void));
@


1.12.10.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12 1998/03/01 00:37:22 niklas Exp $	*/
d156 1
@


1.12.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12.10.1 2001/07/04 10:15:15 niklas Exp $	*/
d189 2
@


1.12.10.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12.10.2 2001/10/31 02:52:45 nate Exp $	*/
d187 1
d192 1
@


1.12.10.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d236 1
@


1.12.10.5
log
@Merge in -current from about a week ago
@
text
@d151 1
a151 1
void	*alloc_z2mem(long);
d156 3
a158 3
int	is_a1200(void);
int	is_a3000(void);
int	is_a4000(void);
d160 1
a160 1
int	is_draco(void);
d166 1
a166 1
u_long	clkread(void);
d172 1
a172 1
void	drkbdintr(void);
d177 1
a177 1
void	drsc_handler(void);
d187 19
a205 19
void	doboot(void) __attribute__((__noreturn__));
void	loadustp(int);
void	m68881_save(struct fpframe *);
void	m68881_restore(struct fpframe *);
u_int	probeva(u_int, u_int);
void	proc_trampoline(void);
void	savectx(struct pcb *);
void	switch_exit(struct proc *);
void	DCIAS(vm_offset_t);
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
void	ICIA(void);
void	ICPA(void);
void	PCIA(void);
void	TBIA(void);
void	TBIS(vm_offset_t);
void	TBIAS(void);
void	TBIAU(void);
d207 7
a213 7
void	DCFA(void);
void	DCFP(vm_offset_t);
void	DCFL(vm_offset_t);
void	DCPL(vm_offset_t);
void	DCPP(vm_offset_t);
void	ICPL(vm_offset_t);
void	ICPP(vm_offset_t);
d219 4
a222 4
int	badaddr(caddr_t);
int	badbaddr(caddr_t);
void	bootsync(void);
void	dumpconf(void);
d227 2
a228 2
int	cachectl(int, caddr_t, int);
int	dma_cachectl(caddr_t, int);
d233 3
a235 3
int	kvtop(caddr_t);
void	physaccess(caddr_t,  caddr_t, int, int);
void	physunaccess(caddr_t, int);
d241 1
a241 1
void	setconf(void);
d247 2
a248 2
void	pmap_bootstrap(vm_offset_t, vm_offset_t);
vm_offset_t pmap_map(vm_offset_t, vm_offset_t, vm_offset_t, int);
@


1.12.10.6
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12.10.5 2002/03/28 10:06:15 niklas Exp $	*/
@


1.11
log
@Kill FPCOPROC (and some forgotten {SWAP,DEV}PAGER)
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.10 1997/09/18 13:40:01 niklas Exp $	*/
d254 1
@


1.10
log
@Merge of NetBSD changes upto last week or so, with the exception of stand/
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.9 1997/01/16 09:25:46 niklas Exp $	*/
a192 1
#ifdef FPCOPROC
a194 1
#endif
@


1.9
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.8 1996/05/29 10:15:50 niklas Exp $	*/
a229 2
struct frame;
void	regdump __P((struct frame *, int));
@


1.8
log
@Merge of 960526 NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.5 1996/04/21 22:15:55 deraadt Exp $	*/
/*	$NetBSD: cpu.h,v 1.35 1996/05/19 15:35:43 is Exp $	*/
d54 6
a131 11
/* values for fputype */
#define FPU_NONE	0
#define FPU_68881	1
#define FPU_68882	2
#define FPU_68040	3

/* values for mmutype (assigned for quick testing) */
#define	MMU_68030	-1	/* 68030 on-chip subset of 68851 */
#define	MMU_68851	1	/* Motorola 68851 */
#define MMU_68040	-2	/* 68040 on-chip subsubset */

d133 1
a133 1
int machineid, mmutype, fputype;
a134 66

/*
 * 68851 and 68030 MMU
 */
#define	PMMU_LVLMASK	0x0007
#define	PMMU_INV	0x0400
#define	PMMU_WP		0x0800
#define	PMMU_ALV	0x1000
#define	PMMU_SO		0x2000
#define	PMMU_LV		0x4000
#define	PMMU_BE		0x8000
#define	PMMU_FAULT	(PMMU_WP|PMMU_INV)

/* 680X0 function codes */
#define	FC_USERD	1	/* user data space */
#define	FC_USERP	2	/* user program space */
#define	FC_SUPERD	5	/* supervisor data space */
#define	FC_SUPERP	6	/* supervisor program space */
#define	FC_CPU		7	/* CPU space */

/* fields in the 68020 cache control register */
#define	IC_ENABLE	0x0001	/* enable instruction cache */
#define	IC_FREEZE	0x0002	/* freeze instruction cache */
#define	IC_CE		0x0004	/* clear instruction cache entry */
#define	IC_CLR		0x0008	/* clear entire instruction cache */

/* additional fields in the 68030 cache control register */
#define	IC_BE		0x0010	/* instruction burst enable */
#define	DC_ENABLE	0x0100	/* data cache enable */
#define	DC_FREEZE	0x0200	/* data cache freeze */
#define	DC_CE		0x0400	/* clear data cache entry */
#define	DC_CLR		0x0800	/* clear entire data cache */
#define	DC_BE		0x1000	/* data burst enable */
#define	DC_WA		0x2000	/* write allocate */

/* fields in the 68040 cache control register */
#define	IC40_ENABLE	0x00008000	/* enable instruction cache */
#define DC40_ENABLE	0x80000000	/* enable data cache */

/* additional fields in the 68060 cache control register */

#define DC60_NAD	0x40000000	/* no allocate mode, data cache */
#define DC60_ESB	0x20000000	/* enable store buffer */
#define DC60_DPI	0x10000000	/* disable CPUSH invalidation */
#define DC60_FOC	0x08000000	/* four kB data cache mode (else 8) */

#define IC60_EBC	0x00800000	/* enable branch cache */
#define IC60_CABC	0x00400000	/* clear all branch cache entries */
#define IC60_CUBC	0x00200000	/* clear user branch cache entries */

#define IC60_NAI	0x00004000	/* no allocate mode, instr. cache */
#define IC60_FIC	0x00002000	/* four kB instr. cache (else 8) */


#define	CACHE_ON	(DC_WA|DC_BE|DC_CLR|DC_ENABLE|IC_BE|IC_CLR|IC_ENABLE)
#define	CACHE_OFF	(DC_CLR|IC_CLR)
#define	CACHE_CLR	(CACHE_ON)
#define	IC_CLEAR	(DC_WA|DC_BE|DC_ENABLE|IC_BE|IC_CLR|IC_ENABLE)
#define	DC_CLEAR	(DC_WA|DC_BE|DC_CLR|DC_ENABLE|IC_BE|IC_ENABLE)

/* 68040 cache control */
#define	CACHE40_ON	(IC40_ENABLE|DC40_ENABLE)
#define	CACHE40_OFF	0x00000000

#define CACHE60_ON	(CACHE40_ON |IC60_CABC|IC60_EBC|DC60_ESB)
#define CACHE60_OFF	(CACHE40_OFF|IC60_CABC)
@


1.7
log
@Make cpu.h self-contained by including psl.h
@
text
@d2 1
a2 1
/*	$NetBSD: cpu.h,v 1.31 1996/04/27 20:55:08 veego Exp $	*/
d231 3
d240 12
d274 1
d284 1
a284 1
#ifdef M68040
d318 1
d323 1
@


1.6
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d51 1
@


1.5
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.4 1996/03/30 22:18:27 niklas Exp $	*/
/*	$NetBSD: cpu.h,v 1.28 1996/03/30 16:22:55 is Exp $	*/
d216 96
@


1.4
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: cpu.h,v 1.26 1996/03/15 19:47:48 is Exp $	*/
d178 15
d202 3
@


1.3
log
@Actually make CLKF_BASEPRI do what it's supposed to do.
@
text
@d1 2
a2 1
/*	$NetBSD: cpu.h,v 1.25 1995/12/21 05:01:48 mycroft Exp $	*/
d123 1
@


1.2
log
@from netbsd; cpu_setstack() is depricated
@
text
@d71 1
a71 2
/*#define	CLKF_BASEPRI(framep)	(((framep)->sr & PSL_IPL) == 0)*/
#define	CLKF_BASEPRI(framep)	(0)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cpu.h,v 1.24 1995/08/18 15:28:23 chopps Exp $	*/
a56 1
#define cpu_setstack(p, ap)		(p)->p_md.md_regs[SP] = ap
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

