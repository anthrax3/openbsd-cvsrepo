head	1.17;
access;
symbols
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	UBC_SYNC_A:1.17
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.16
	UBC:1.14.0.4
	UBC_BASE:1.14
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.13.0.4
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.12.0.12
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.10
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.8
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.6
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.12.0.4
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.12.0.2
	OPENBSD_2_3_BASE:1.12
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2002.12.31.16.35.36;	author miod;	state dead;
branches;
next	1.16;

1.16
date	2002.06.11.03.25.30;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.05.22.33.28;	author art;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	2000.09.02.13.45.38;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	98.04.09.07.34.00;	author niklas;	state Exp;
branches
	1.12.10.1;
next	1.11;

1.11
date	97.10.07.10.58.42;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.09.18.13.39.32;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.01.16.09.23.15;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.01.04.12.40.31;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.11.23.21.45.03;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	96.08.19.00.04.13;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.29.10.14.20;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.05.04.20.04.28;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.02.06.43.11;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.14.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.51;	author deraadt;	state Exp;
branches;
next	;

1.12.10.1
date	2001.04.18.16.01.55;	author niklas;	state Exp;
branches;
next	1.12.10.2;

1.12.10.2
date	2001.07.04.10.14.55;	author niklas;	state Exp;
branches;
next	1.12.10.3;

1.12.10.3
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.12.10.4;

1.12.10.4
date	2003.03.27.23.19.16;	author niklas;	state dead;
branches;
next	;

1.14.4.1
date	2002.06.11.03.34.56;	author art;	state Exp;
branches;
next	1.14.4.2;

1.14.4.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.14.4.3;

1.14.4.3
date	2003.05.19.21.49.37;	author tedu;	state dead;
branches;
next	;


desc
@@


1.17
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: autoconf.c,v 1.16 2002/06/11 03:25:30 miod Exp $	*/
/*	$NetBSD: autoconf.c,v 1.59 1998/01/15 21:55:51 is Exp $	*/

/*
 * Copyright (c) 1994 Christian E. Hopps
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christian E. Hopps.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/reboot.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <machine/conf.h>
#include <machine/cpu.h>
#include <amiga/amiga/cfdev.h>
#include <amiga/amiga/device.h>
#include <amiga/amiga/custom.h>

void setroot(void);
void swapconf(void);
void mbattach(struct device *, struct device *, void *);
int mbprint(void *, const char *);
int mbmatch(struct device *, void *, void *);

int cold;	/* 1 if still booting */
#include <sys/kernel.h>
/*
 * called at boot time, configure all devices on system
 */
void
cpu_configure()
{
	int s;

	/*
	 * this is the real thing baby (i.e. not console init)
	 */
	amiga_realconfig = 1;
#ifdef DRACO
	if (is_draco()) {
		*draco_intena &= ~DRIRQ_GLOBAL;
	} else
#endif
	custom.intena = INTF_INTEN;
	s = splhigh();

	if (config_rootfound("mainbus", "mainbus") == NULL)
		panic("no mainbus found");
#ifdef DEBUG_KERNEL_START
	printf("survived autoconf, going to enable interrupts\n");
#endif
	
#ifdef DRACO
	if (is_draco()) {
		*draco_intena |= DRIRQ_GLOBAL;
		/* softints always enabled */
	} else
#endif
	{
		custom.intena = INTF_SETCLR | INTF_INTEN;

		/* also enable hardware aided software interrupts */
		custom.intena = INTF_SETCLR | INTF_SOFTINT;
	}
	splx(s);
#ifdef DEBUG_KERNEL_START
	printf("survived interrupt enable\n");
#endif

#ifdef GENERIC
	if ((boothowto & RB_ASKNAME) == 0) {
		setroot();
#ifdef DEBUG_KERNEL_START
		printf("survived setroot()\n");
#endif
	}
	setconf();
#ifdef DEBUG_KERNEL_START
	printf("survived setconf()\n");
#endif
#else
	setroot();
#ifdef DEBUG_KERNEL_START
	printf("survived setroot()\n");
#endif
#endif
#ifdef DEBUG_KERNEL_START
	printf("survived root device search\n");
#endif
	swapconf();
#ifdef DEBUG_KERNEL_START
	printf("survived swap device search\n");
#endif
	dumpconf();
	if (dumplo < 0)
		dumplo = 0;
#ifdef DEBUG_KERNEL_START
	printf("survived dump device search\n");
#endif
	cold = 0;
}

/*ARGSUSED*/
int
simple_devprint(auxp, pnp)
	void *auxp;
	const char *pnp;
{
	return(QUIET);
}

int
matchname(fp, sp)
	char *fp, *sp;
{
	int len;

	len = strlen(fp);
	if (strlen(sp) != len)
		return(0);
	if (bcmp(fp, sp, len) == 0)
		return(1);
	return(0);
}

/*
 * use config_search to find appropriate device, then call that device
 * directly with NULL device variable storage.  A device can then 
 * always tell the difference betwean the real and console init 
 * by checking for NULL.
 */
int
amiga_config_found(pcfp, pdp, auxp, pfn)
	struct cfdata *pcfp;
	struct device *pdp;
	void *auxp;
	cfprint_t pfn;
{
	struct device temp;
	struct cfdata *cf;

	if (amiga_realconfig)
		return(config_found(pdp, auxp, pfn) != NULL);

	if (pdp == NULL)
		pdp = &temp;

	pdp->dv_cfdata = pcfp;
	if ((cf = config_search((cfmatch_t)NULL, pdp, auxp)) != NULL) {
		cf->cf_attach->ca_attach(pdp, NULL, auxp);
		pdp->dv_cfdata = NULL;
		return(1);
	}
	pdp->dv_cfdata = NULL;
	return(0);
}

/*
 * this function needs to get enough configured to do a console
 * basically this means start attaching the grfxx's that support 
 * the console. Kinda hacky but it works.
 */
void
config_console()
{	
	struct cfdata *cf;

	/*
	 * we need mainbus' cfdata.
	 */
	cf = config_rootsearch(NULL, "mainbus", "mainbus");
	if (cf == NULL) {
		panic("no mainbus");
	}

	/*
	 * delay clock calibration.
	 */
	amiga_config_found(cf, NULL, "clock", NULL);

	/*
	 * internal grf.
	 */
#ifdef DRACO
	if (!(is_draco()))
#endif
		amiga_config_found(cf, NULL, "grfcc", NULL);
	/*
	 * zbus knows when its not for real and will
	 * only configure the appropriate hardware
	 */
	amiga_config_found(cf, NULL, "zbus", NULL);
}

/* 
 * mainbus driver 
 */
struct cfattach mainbus_ca = {
	sizeof(struct device), mbmatch, mbattach
};

struct cfdriver mainbus_cd = {
	NULL, "mainbus", DV_DULL, NULL, 0
};

int
mbmatch(pdp, match, auxp)
	struct device *pdp;
	void *match, *auxp;
{
	struct cfdata *cfp = match;

	if (cfp->cf_unit > 0)
		return(0);
	/*
	 * We are always here
	 */
	return(1);
}

/*
 * "find" all the things that should be there.
 */
void
mbattach(pdp, dp, auxp)
	struct device *pdp, *dp;
	void *auxp;
{
	printf("\n");
	config_found(dp, "clock", simple_devprint);
	if (is_a3000() || is_a4000()) {
		config_found(dp, "a34kbbc", simple_devprint);
	} else
#ifdef DRACO
	if (!is_draco())
#endif
	{
		config_found(dp, "a2kbbc", simple_devprint);
	}
#ifdef DRACO
	if (is_draco()) {
		config_found(dp, "drbbc", simple_devprint);
		config_found(dp, "kbd", simple_devprint);
		config_found(dp, "drsc", simple_devprint);
		config_found(dp, "drsupio", simple_devprint);
	} else 
#endif
	{
		config_found(dp, "joy", simple_devprint);
		config_found(dp, "ser", simple_devprint);
		config_found(dp, "par", simple_devprint);
		config_found(dp, "kbd", simple_devprint);
		config_found(dp, "ms", simple_devprint);
		config_found(dp, "ms", simple_devprint);
		config_found(dp, "grfcc", simple_devprint);
		config_found(dp, "fdc", simple_devprint);
	}
	if (is_a4000() || is_a1200())
		config_found(dp, "idesc", simple_devprint);
	if (is_a4000())			/* Try to configure A4000T SCSI */
		config_found(dp, "afsc", simple_devprint);
	if (is_a3000())
		config_found(dp, "ahsc", simple_devprint);
#ifdef DRACO
	if (!is_draco())
#endif
		config_found(dp, "aucc", simple_devprint);

	config_found(dp, "zbus", simple_devprint);
}

int
mbprint(auxp, pnp)
	void *auxp;
	const char *pnp;
{
	if (pnp)
		printf("%s at %s", (char *)auxp, pnp);
	return(UNCONF);
}

void
swapconf()
{
	struct swdevt *swp;
	u_int maj;
	int nb;

	for (swp = swdevt; swp->sw_dev != NODEV; swp++) {
		maj = major(swp->sw_dev);

		if (maj > nblkdev)
			break;

		if (bdevsw[maj].d_psize) {
			nb = bdevsw[maj].d_psize(swp->sw_dev);
			if (nb > 0 && 
			    (swp->sw_nblks == 0 || swp->sw_nblks > nb))
				swp->sw_nblks = nb;
			else
				swp->sw_nblks = 0;
		}
		swp->sw_nblks = ctod(dtoc(swp->sw_nblks));
	}
}

#define	DOSWAP			/* change swdevt and dumpdev */
u_long	bootdev = 0;		/* should be dev_t, but not until 32 bits */

static	char devname[][2] = {
	{ 0	,0	},
	{ 0	,0	},
	{ 'f'	,'d'	},	/* 2 = fd */
	{ 0	,0	},
	{ 's'	,'d'	}	/* 4 = sd -- new SCSI system */
};

void
setroot()
{
	int majdev, mindev, unit, part, adaptor;
	dev_t temp = 0;
	dev_t orootdev;
	struct swdevt *swp;

	if (boothowto & RB_DFLTROOT ||
	    (bootdev & B_MAGICMASK) != (u_long)B_DEVMAGIC)
		return;
	majdev = B_TYPE(bootdev);
	if (majdev > sizeof(devname) / sizeof(devname[0]))
		return;
	adaptor = B_ADAPTOR(bootdev);
	part = B_PARTITION(bootdev);
	unit = B_UNIT(bootdev);
	orootdev = rootdev;
	rootdev = MAKEDISKDEV(majdev, unit, part);
	/*
	 * If the original rootdev is the same as the one
	 * just calculated, don't need to adjust the swap configuration.
	 */
	if (rootdev == orootdev)
		return;
	printf("changing root device to %c%c%d%c\n", devname[majdev][0],
	    devname[majdev][1], unit, part + 'a');
#ifdef DOSWAP
	mindev = DISKUNIT(rootdev);
	for (swp = swdevt; swp->sw_dev; swp++) {
		if (majdev == major(swp->sw_dev) &&
		    mindev == DISKUNIT(swp->sw_dev)) {
			temp = swdevt[0].sw_dev;
			swdevt[0].sw_dev = swp->sw_dev;
			swp->sw_dev = temp;
			break;
		}
	}
	if (swp->sw_dev == 0)
		return;
	/*
	 * If dumpdev was the same as the old primary swap
	 * device, move it to the new primary swap device.
	 */
	if (temp == dumpdev)
		dumpdev = swdevt[0].sw_dev;
#endif
}


/*
 * Try to determine, of this machine is an A3000, which has a builtin
 * realtime clock and scsi controller, so that this hardware is only
 * included as "configured" if this IS an A3000
 */

int a3000_flag = 1;		/* patchable */
#ifdef A4000
int a4000_flag = 1;		/* patchable - default to A4000 */
#else
int a4000_flag = 0;		/* patchable */
#endif

int
is_a3000()
{
	/* this is a dirty kludge.. but how do you do this RIGHT ? :-) */
	extern long boot_fphystart;
	short sc;

	if ((machineid >> 16) == 3000)
		return (1);			/* It's an A3000 */
	if (machineid >> 16)
		return (0);			/* It's not an A3000 */
	/* Machine type is unknown, so try to guess it */
	/* where is fastram on the A4000 ?? */
	/* if fastram is below 0x07000000, assume it's not an A3000 */
	if (boot_fphystart < 0x07000000)
		return(0);
	/*
	 * OK, fastram starts at or above 0x07000000, check specific
	 * machines
	 */
	for (sc = 0; sc < ncfdev; sc++) {
		switch (cfdev[sc].rom.manid) {
		case 2026:		/* Progressive Peripherals, Inc */
			switch (cfdev[sc].rom.prodid) {
			case 0:		/* PPI Mercury - A3000 */
			case 1:		/* PP&S A3000 '040 */
				return(1);
			case 150:	/* PPI Zeus - it's an A2000 */
			case 105:	/* PP&S A2000 '040 */
			case 187:	/* PP&S A500 '040 */
				return(0);
			}
			break;

		case 2112:			/* IVS */
			switch (cfdev[sc].rom.prodid) {
			case 242:
				return(0);	/* A2000 accelerator? */
			}
			break;
		}
	}
	return (a3000_flag);		/* XXX let flag tell now */
}

int
is_a4000()
{
	if ((machineid >> 16) == 4000)
		return (1);		/* It's an A4000 */
	if ((machineid >> 16) == 1200)
		return (0);		/* It's an A1200, so not A4000 */
#ifdef DRACO
	if (is_draco())
		return (0);
#endif
	/* Do I need this any more? */
	if ((custom.deniseid & 0xff) == 0xf8)
		return (1);
#ifdef DEBUG
	if (a4000_flag)
		printf("Denise ID = %04x\n", (unsigned short)custom.deniseid);
#endif
	if (machineid >> 16)
		return (0);		/* It's not an A4000 */
	return (a4000_flag);		/* Machine type not set */
}

int
is_a1200()
{
	if ((machineid >> 16) == 1200)
		return (1);		/* It's an A1200 */
	return (0);			/* Machine type not set */
}

#ifdef DRACO
int
is_draco()
{
	if ((machineid >> 24) == 0x7D)
		return ((machineid >> 16) & 0xFF);
	return (0);
}
#endif
@


1.16
log
@Include <sys/conf.h> from <machine/conf.h> like in other arches.  Changes
to come soon depend on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.15 2002/03/14 01:26:28 millert Exp $	*/
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.14 2001/05/05 22:33:28 art Exp $	*/
a35 1
#include <sys/conf.h>
d38 1
@


1.14
log
@Rename configure() to cpu_configure().
Move it from cpu_startup() to main().
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.13 2000/09/02 13:45:38 espie Exp $	*/
d44 5
a48 5
void setroot __P((void));
void swapconf __P((void));
void mbattach __P((struct device *, struct device *, void *));
int mbprint __P((void *, const char *));
int mbmatch __P((struct device *, void *, void *));
@


1.14.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.14 2001/05/05 22:33:28 art Exp $	*/
d44 5
a48 5
void setroot(void);
void swapconf(void);
void mbattach(struct device *, struct device *, void *);
int mbprint(void *, const char *);
int mbmatch(struct device *, void *, void *);
@


1.14.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.14.4.1 2002/06/11 03:34:56 art Exp $	*/
d36 1
a38 1
#include <machine/conf.h>
@


1.14.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.14.4.2 2002/10/29 00:28:01 art Exp $	*/
@


1.13
log
@Amiga joystick driver. Stylistic comments by Niklas.
Missing documentation yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.12 1998/04/09 07:34:00 niklas Exp $	*/
d56 1
a56 1
configure()
@


1.12
log
@From netbsd: detect clock correctly, fix order of zbus probe
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.11 1997/10/07 10:58:42 niklas Exp $	*/
d274 1
@


1.12.10.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.13 2000/09/02 13:45:38 espie Exp $	*/
a273 1
		config_found(dp, "joy", simple_devprint);
@


1.12.10.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.12.10.1 2001/04/18 16:01:55 niklas Exp $	*/
d56 1
a56 1
cpu_configure()
@


1.12.10.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 5
a48 5
void setroot(void);
void swapconf(void);
void mbattach(struct device *, struct device *, void *);
int mbprint(void *, const char *);
int mbmatch(struct device *, void *, void *);
@


1.12.10.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.12.10.3 2002/03/28 10:06:14 niklas Exp $	*/
@


1.11
log
@Move dumpconf, and make swapconf more standard
@
text
@d1 2
a2 2
/*	$OpenBSD: autoconf.c,v 1.10 1997/09/18 13:39:32 niklas Exp $	*/
/*	$NetBSD: autoconf.c,v 1.56 1997/08/31 16:33:13 is Exp $	*/
d258 1
a258 1
	} else if (
d260 1
a260 1
	    !is_draco() &&
d262 1
a262 2
	    !is_a1200()) {

a285 1
	config_found(dp, "zbus", simple_devprint);
d293 1
@


1.10
log
@Merge of NetBSD changes upto last week or so, with the exception of stand/
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.9 1997/01/16 09:23:15 niklas Exp $	*/
d119 6
d314 1
a314 1
	for (swp = swdevt; swp->sw_dev > 0; swp++) {
a329 4
	dumpconf();
	if (dumplo < 0)
		dumplo = 0;

@


1.9
log
@Sync to NetBSD 970110
@
text
@d1 2
a2 2
/*	$OpenBSD: autoconf.c,v 1.8 1997/01/04 12:40:31 niklas Exp $	*/
/*	$NetBSD: autoconf.c,v 1.45 1996/12/23 09:15:39 veego Exp $	*/
a73 1
	splx(s);
d90 1
d250 10
d262 1
d265 1
a265 8
		config_found(dp, "drcom", simple_devprint);
		config_found(dp, "drcom", simple_devprint);
		/*
		 * XXX -- missing here:
		 * SuperIO chip serial, parallel, floppy
		 * or maybe just make that into a pseudo
		 * ISA bus.
		 */
d284 5
@


1.8
log
@Use fancy macros
@
text
@d1 2
a2 2
/*	$OpenBSD: autoconf.c,v 1.7 1996/11/23 21:45:03 kstailey Exp $	*/
/*	$NetBSD: autoconf.c,v 1.38.4.1 1996/05/26 16:23:26 is Exp $	*/
d58 2
d70 1
d74 1
a74 1

d194 6
d248 1
a248 1
	printf ("\n");
d254 2
d357 2
a358 3
	printf("changing root device to %c%c%d%c\n",
		devname[majdev][0], devname[majdev][1],
		unit, part + 'a');
d456 1
a456 1
		printf ("Denise ID = %04x\n", (unsigned short)custom.deniseid);
@


1.7
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.6 1996/08/19 00:04:13 niklas Exp $	*/
d332 1
a332 1
	majdev = (bootdev >> B_TYPESHIFT) & B_TYPEMASK;
d335 3
a337 3
	adaptor = (bootdev >> B_ADAPTORSHIFT) & B_ADAPTORMASK;
	part = (bootdev >> B_PARTITIONSHIFT) & B_PARTITIONMASK;
	unit = (bootdev >> B_UNITSHIFT) & B_UNITMASK;
@


1.6
log
@Merge of Late July NetBSD sources (mostly DRACO support).  More to come...
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 1996/05/29 10:14:20 niklas Exp $	*/
d47 1
a47 1
int mbprint __P((void *, char *));
d123 1
a123 1
	char *pnp;
d274 1
a274 1
	char *pnp;
@


1.5
log
@Merge of 960526 NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: autoconf.c,v 1.2 1996/04/21 22:14:49 deraadt Exp $	*/
/*	$NetBSD: autoconf.c,v 1.38 1996/05/12 02:41:00 mhitch Exp $	*/
d72 1
d74 1
d88 1
d90 1
d95 1
d97 1
d100 1
d102 1
d105 1
d108 2
d111 1
d113 1
d115 1
@


1.4
log
@From NetBSD:
Amiga's have two mouse ports
@
text
@d2 1
a2 1
/*	$NetBSD: autoconf.c,v 1.34 1996/04/27 20:48:47 veego Exp $	*/
d62 5
d71 2
d74 8
a81 1
	custom.intena = INTF_SETCLR | INTF_INTEN;
d83 4
a86 2
	/* also enable hardware aided software interrupts */
	custom.intena = INTF_SETCLR | INTF_SOFTINT;
d89 1
a89 1
	if ((boothowto & RB_ASKNAME) == 0)
d91 2
d94 1
d97 1
d99 1
d101 1
d174 1
a174 1
	if (cf == NULL)
d176 1
d180 4
a183 1
	amiga_config_found(cf, NULL, "grfcc", NULL);
d227 21
a247 7
	config_found(dp, "ser", simple_devprint);
	config_found(dp, "par", simple_devprint);
	config_found(dp, "kbd", simple_devprint);
	config_found(dp, "ms", simple_devprint);
	config_found(dp, "ms", simple_devprint);
	config_found(dp, "grfcc", simple_devprint);
	config_found(dp, "fdc", simple_devprint);
d290 1
a290 4
	if (dumplo == 0 && bdevsw[major(dumpdev)].d_psize)
	/*dumplo = (*bdevsw[major(dumpdev)].d_psize)(dumpdev) - physmem;*/
		dumplo = (*bdevsw[major(dumpdev)].d_psize)(dumpdev) -
			ctob(physmem)/DEV_BSIZE;
d423 4
d446 10
@


1.3
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d205 1
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: autoconf.c,v 1.31 1996/04/04 06:25:07 cgd Exp $	*/
a43 1
void configure __P((void));
d143 1
a143 1
int
d204 1
d262 5
a266 5
	0,0,
	0,0,
	'f','d',	/* 2 = fd */
	0,0,
	's','d',	/* 4 = sd -- new SCSI system */
d273 2
a274 1
	dev_t temp, orootdev;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: autoconf.c,v 1.29 1995/10/05 12:40:54 chopps Exp $	*/
d49 1
a49 1
int mbmatch __P((struct device *, struct cfdata *, void *));
d65 1
a65 1
	if (config_rootfound("mainbus", "mainbus") == 0)
d124 1
a124 1
		return(config_found(pdp, auxp, pfn));
d131 1
a131 1
		cf->cf_driver->cd_attach(pdp, NULL, auxp);
d169 6
a174 3
struct cfdriver mainbuscd = {
	NULL, "mainbus", (cfmatch_t)mbmatch, mbattach, 
	DV_DULL, sizeof(struct device), NULL, 0
d178 1
a178 1
mbmatch(pdp, cfp, auxp)
d180 1
a180 2
	struct cfdata *cfp;
	void *auxp;
d182 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
