head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.20
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.18
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.16
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.14
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.12
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.12.31.16.35.36;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	97.10.07.10.57.37;	author niklas;	state Exp;
branches
	1.6.12.1;
next	1.5;

1.5
date	97.09.08.21.29.11;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.01.16.09.23.17;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.02.06.43.14;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.14.21.20.10;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.52;	author deraadt;	state Exp;
branches;
next	;

1.6.12.1
date	2001.11.13.21.00.50;	author niklas;	state Exp;
branches;
next	1.6.12.2;

1.6.12.2
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.6.12.3;

1.6.12.3
date	2003.03.27.23.19.16;	author niklas;	state dead;
branches;
next	;

1.7.2.1
date	2002.06.11.03.34.57;	author art;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.05.19.21.49.37;	author tedu;	state dead;
branches;
next	;


desc
@@


1.9
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: db_memrw.c,v 1.8 2002/03/14 01:26:28 millert Exp $	*/
/*	$NetBSD: db_memrw.c,v 1.7 1997/06/10 18:24:34 veego Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Interface to the debugger for virtual memory read/write.
 * To write in the text segment, we have to first make
 * the page writable, do the write, then restore the PTE.
 * For reads, validate address first to avoid MMU trap.
 */

#include <sys/param.h>
#include <sys/proc.h>

#include <uvm/uvm_extern.h>

#include <machine/db_machdep.h>
#include <ddb/db_sym.h>
#include <ddb/db_output.h>
#include <ddb/db_access.h>

#include <machine/cpu.h>
#include <machine/pte.h>

char db_read_data(char *src);
void db_write_text(char *dst, int ch);
void db_write_data(char *dst, int ch);

/*
 * Read one byte somewhere in the kernel.
 * It does not matter if this is slow. -gwr
 */
char
db_read_data(src)
	char *src;
{
	u_int *pte;
	vm_offset_t pgva;

	pgva = m68k_trunc_page((long)src);
	pte = kvtopte(pgva);

	if ((*pte & PG_V) == 0) {
		db_printf(" address %p not a valid page\n", src);
		return 0;
	}
	return (*src);
}

/*
 * Read bytes from kernel address space for debugger.
 * It does not matter if this is slow. -gwr
 */
void
db_read_bytes(addr, size, data)
	vm_offset_t	addr;
	size_t		size;
	char	       *data;
{
	char	*src, *limit;

	src = (char *)addr;
	limit = src + size;

	while (src < limit) {
		*data = db_read_data(src);
		data++;
		src++;
	}
}

/*
 * Write one byte somewhere in kernel text.
 * It does not matter if this is slow. -gwr
 */
void
db_write_text(dst, ch)
	char *dst;
	int ch;
{
	u_int *pte, oldpte;

	pte = kvtopte((vm_offset_t)dst);
	oldpte = *pte;
	if ((oldpte & PG_V) == 0) {
		db_printf(" address %p not a valid page\n", dst);
		return;
	}

#if 0
	printf("db_write_text: %x: %x = %x (%x:%x)\n", dst, *dst, ch, pte,
	    *pte);
#endif
	*pte &= ~PG_RO;
	TBIS((vm_offset_t)dst);

	*dst = (char) ch;

	*pte = oldpte;
	TBIS((vm_offset_t)dst);
	dma_cachectl (dst, 1);
}

/*
 * Write one byte somewhere outside kernel text.
 * It does not matter if this is slow. -gwr
 */
void
db_write_data(dst, ch)
	char *dst;
	int ch;
{
	u_int *pte;

	pte = kvtopte((vm_offset_t)dst);

	if ((*pte & (PG_V | PG_RO)) != PG_V) {
		db_printf(" address %p not a valid page\n", dst);
		return;
	}
	*dst = (char) ch;
}

/*
 * Write bytes to kernel address space for debugger.
 */
void
db_write_bytes(addr, size, data)
	vm_offset_t	addr;
	size_t		size;
	char	       *data;
{
	extern char	etext[];
	char	       *dst, *limit;

	dst = (char *)addr;
	limit = dst + size;

	while (dst < limit) {
		if (dst < etext)	/* kernel text starts at 0 */
			db_write_text(dst, *data);
		else
			db_write_data(dst, *data);
		dst++;
		data++;
	}
}
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.7 2001/11/06 19:53:13 miod Exp $	*/
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.6 1997/10/07 10:57:37 niklas Exp $	*/
d60 3
a62 3
char db_read_data __P((char *src));
void db_write_text __P((char *dst, int ch));
void db_write_data __P((char *dst, int ch));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.7 2001/11/06 19:53:13 miod Exp $	*/
d60 3
a62 3
char db_read_data(char *src);
void db_write_text(char *dst, int ch);
void db_write_data(char *dst, int ch);
@


1.7.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.7.2.1 2002/06/11 03:34:57 art Exp $	*/
@


1.6
log
@Prototype correctness, lose statics, and fix style
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.5 1997/09/08 21:29:11 niklas Exp $	*/
d50 1
a50 1
#include <vm/vm.h>
@


1.6.12.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 1
#include <uvm/uvm_extern.h>
@


1.6.12.2
log
@Merge in -current from about a week ago
@
text
@d60 3
a62 3
char db_read_data(char *src);
void db_write_text(char *dst, int ch);
void db_write_data(char *dst, int ch);
@


1.6.12.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.6.12.2 2002/03/28 10:06:14 niklas Exp $	*/
@


1.5
log
@From NetBSD: use m68k_trunc_page
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.4 1997/01/16 09:23:17 niklas Exp $	*/
d55 1
d60 3
a62 6
static char db_read_data __P((char *src));
void db_read_bytes __P((vm_offset_t addr, register int size, register char *data));
static void db_write_text __P((char *dst, int ch));
static void db_write_data __P((char *dst, int ch));
void db_write_bytes __P((vm_offset_t addr, int size, char *data));

d68 1
a68 1
static char
d92 2
a93 2
	register int	size;
	register char	*data;
d111 1
a111 1
static void
d126 2
a127 1
printf("db_write_text: %x: %x = %x (%x:%x)\n", dst, *dst, ch, pte, *pte);
d143 1
a143 1
static void
d165 2
a166 2
	int	size;
	char	*data;
d168 2
a169 2
	extern char	etext[] ;
	char	*dst, *limit;
@


1.4
log
@Sync to NetBSD 970110
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: db_memrw.c,v 1.6 1996/12/09 17:53:07 thorpej Exp $	*/
d77 1
a77 1
	pgva = amiga_trunc_page((long)src);
@


1.3
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d2 1
a2 1
/*	$NetBSD: db_memrw.c,v 1.3 1996/04/21 21:06:55 veego Exp $	*/
d4 2
a5 2
/*
 * Copyright (c) 1994 Gordon W. Ross
d8 3
d19 7
a25 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d27 11
a37 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d127 3
a129 1
/*printf("db_write_text: %x: %x = %x (%x:%x)\n", dst, *dst, ch, pte, *pte);*/
@


1.2
log
@Use dma_cachectl instead of cachectl when writing into the kernel text
segment.  Ordinary cachectl is for userlevel virtual addresses.
@
text
@d1 2
a2 1
/*	$NetBSD: db_memrw.c,v 1.1 1995/02/13 00:27:37 chopps Exp $	*/
d44 4
d50 7
a66 1
	int ch;
d72 1
a72 1
		db_printf(" address 0x%x not a valid page\n", src);
d114 1
a114 1
		db_printf(" address 0x%x not a valid page\n", dst);
d120 1
a120 1
	TBIS(dst);
d125 1
a125 1
	TBIS(dst);
d143 1
a143 1
		db_printf(" address 0x%x not a valid page\n", dst);
@


1.1
log
@Initial revision
@
text
@d115 1
a115 1
	cachectl (4, dst, 1);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
