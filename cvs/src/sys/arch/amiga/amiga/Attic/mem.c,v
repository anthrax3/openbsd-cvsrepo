head	1.20;
access;
symbols
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	UBC_SYNC_A:1.20
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	UBC_SYNC_B:1.19
	UBC:1.17.0.2
	UBC_BASE:1.17
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.2
	SMP_BASE:1.9
	kame_19991208:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2002.12.31.16.35.36;	author miod;	state dead;
branches;
next	1.19;

1.19
date	2002.06.11.03.25.31;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.08.02.24.06;	author art;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2001.11.06.19.53.14;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.01.12.13.45;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.25.13.25.31;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.27.03.54.13;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.05.20.56.32;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.31.22.39.39;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.27.20.46.51;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2000.01.19.15.20.59;	author espie;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	99.11.22.19.21.57;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	99.09.03.18.00.29;	author art;	state Exp;
branches;
next	1.6;

1.6
date	98.08.31.17.42.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.09.09.10.56.17;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.02.21.08.55.13;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.31.00.39.22;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.02.06.43.21;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.53;	author deraadt;	state Exp;
branches;
next	;

1.9.2.1
date	2001.04.18.16.01.59;	author niklas;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2001.07.04.10.14.58;	author niklas;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2001.10.31.02.52.45;	author nate;	state Exp;
branches;
next	1.9.2.4;

1.9.2.4
date	2001.11.13.21.00.50;	author niklas;	state Exp;
branches;
next	1.9.2.5;

1.9.2.5
date	2002.03.06.00.56.18;	author niklas;	state Exp;
branches;
next	1.9.2.6;

1.9.2.6
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.9.2.7;

1.9.2.7
date	2003.03.27.23.19.17;	author niklas;	state dead;
branches;
next	;

1.10.2.1
date	2001.01.31.22.48.11;	author jason;	state Exp;
branches;
next	;

1.17.2.1
date	2002.06.11.03.34.57;	author art;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2003.05.19.21.49.38;	author tedu;	state dead;
branches;
next	;


desc
@@


1.20
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: mem.c,v 1.19 2002/06/11 03:25:31 miod Exp $	*/
/*	$NetBSD: mem.c,v 1.18 1997/02/02 07:17:14 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#include <sys/proc.h>

#include <machine/conf.h>
#include <machine/cpu.h>

#include <uvm/uvm_extern.h>

extern int kernel_reload_write(struct uio *uio);
extern u_int lowram;
caddr_t devzeropage;

int mmopen(dev_t, int, int, struct proc *);
int mmclose(dev_t, int, int, struct proc *);
int mmrw(dev_t, struct uio *, int);
paddr_t mmmmap(dev_t, off_t, int);
int mmioctl(dev_t, u_long, caddr_t, int, struct proc *);

/*ARGSUSED*/
int
mmopen(dev, flag, mode, p)
	dev_t		dev;
	int		flag, mode;
	struct proc	*p;
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 12:
		case 20:
			return (0);
		default:
			return (ENXIO);
	}
}

/*ARGSUSED*/
int
mmclose(dev, flag, mode, p)
	dev_t		dev;
	int		flag, mode;
	struct proc	*p;
{

	return (0);
}

/*ARGSUSED*/
int
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	register vm_offset_t o, v;
	register int c;
	register struct iovec *iov;
	int error = 0;
	static int physlock;

	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
	}
	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

		/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;
#ifndef DEBUG
			/* allow reads only in RAM (except for DEBUG) */
			if (v >= 0xFFFFFFFC || v < lowram) {
				error = EFAULT;
				goto unlock;
			}
#endif
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), uio->uio_rw == UIO_READ ?
			    VM_PROT_READ : VM_PROT_WRITE, PMAP_WIRED);
			pmap_update(pmap_kernel());
			o = uio->uio_offset & PGOFSET;
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + NBPG);
			pmap_update(pmap_kernel());
			continue;

		/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = min(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			if (v < NBPG) {
#ifdef DEBUG
				/*
				 * For now, return zeros on read of page 0
				 * and EFAULT for writes.
				 */
				if (uio->uio_rw == UIO_READ) {
					if (devzeropage == NULL) {
						devzeropage = (caddr_t)
						    malloc(PAGE_SIZE, M_TEMP,
						    M_WAITOK);
						bzero(devzeropage, PAGE_SIZE);
					}
					c = min(c, NBPG - (int)v);
					v = (vm_offset_t)devzeropage;
				} else
#endif
					return (EFAULT);
			}
			error = uiomove((caddr_t)v, c, uio);
			continue;

		/* minor device 2 is EOF/RATHOLE */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

		/*
		 * minor device 12 (/dev/zero) is source of nulls on read,
		 * rathole on write
		 */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}
			if (devzeropage == NULL) {
				devzeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(devzeropage, PAGE_SIZE);
			}
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomove(devzeropage, c, uio);
			continue;

		/*
		 * minor device 20 (/dev/reload) represents magic memory
		 * which you can write a kernel image to, causing a reboot
		 * into that kernel
		 */
		case 20:
			if (uio->uio_rw == UIO_READ)
				return 0;
			error = kernel_reload_write(uio);
			continue;

		default:
			return (ENXIO);
		}
		if (error)
			break;
		iov->iov_base += c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	if (minor(dev) == 0) {
#ifndef DEBUG
unlock:
#endif
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
	}
	return (error);
}

paddr_t
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	return (-1);
}

int
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EOPNOTSUPP);
}
@


1.19
log
@Include <sys/conf.h> from <machine/conf.h> like in other arches.  Changes
to come soon depend on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2002/03/14 01:26:28 millert Exp $	*/
@


1.18
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2001/12/08 02:24:06 art Exp $	*/
a48 1
#include <sys/conf.h>
d55 1
@


1.17
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2001/11/06 19:53:14 miod Exp $	*/
d64 5
a68 5
int mmopen __P((dev_t, int, int, struct proc *));
int mmclose __P((dev_t, int, int, struct proc *));
int mmrw __P((dev_t, struct uio *, int));
paddr_t mmmmap __P((dev_t, off_t, int));
int mmioctl __P((dev_t, u_long, caddr_t, int, struct proc *));
@


1.17.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2001/12/08 02:24:06 art Exp $	*/
d64 5
a68 5
int mmopen(dev_t, int, int, struct proc *);
int mmclose(dev_t, int, int, struct proc *);
int mmrw(dev_t, struct uio *, int);
paddr_t mmmmap(dev_t, off_t, int);
int mmioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.17.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17.2.1 2002/06/11 03:34:57 art Exp $	*/
d49 1
a55 1
#include <machine/conf.h>
@


1.17.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17.2.2 2002/10/29 00:28:01 art Exp $	*/
@


1.16
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2001/11/01 12:13:45 art Exp $	*/
d149 1
d155 1
@


1.15
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/07/25 13:25:31 art Exp $	*/
a57 1
#include <vm/vm.h>
@


1.14
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/06/27 03:54:13 art Exp $	*/
d68 1
a68 1
int mmmmap __P((dev_t, int, int));
d242 1
a242 1
int
d245 1
a245 1
	int off;
@


1.13
log
@No more old VM on amiga.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2001/05/05 20:56:32 art Exp $	*/
d149 1
a149 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE, 0);
@


1.12
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2001/01/31 22:39:39 jason Exp $	*/
a58 1
#if defined(UVM)
a59 1
#endif
a160 1
#if defined(UVM)
a163 5
#else
			if (!kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#endif
@


1.11
log
@based on art's sparc patch:
mmap should return -1 on failure, not EOPNOTSUPP.
As it was now, an mmap of /dev/mem always returned page 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2000/05/27 20:46:51 art Exp $	*/
d181 1
a181 1
						    malloc(CLBYTES, M_TEMP,
d183 1
a183 1
						bzero(devzeropage, CLBYTES);
d211 2
a212 2
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(devzeropage, CLBYTES);
d214 1
a214 1
			c = min(iov->iov_len, CLBYTES);
@


1.10
log
@UVM support. (kernacc -> uvm_kernacc)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 2000/01/19 15:20:59 espie Exp $	*/
d256 1
a256 1
	return (EOPNOTSUPP);
@


1.10.2.1
log
@Pull in patches from current:
Fix (art,jason):
mmap should return -1 on failure, not EOPNOTSUPP.
As it was now, an mmap of /dev/mem always returned page 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2000/05/27 20:46:51 art Exp $	*/
d256 1
a256 1
	return (-1);
@


1.9
log
@Fix matthieu's damage. Amiga kernel sure compiles better with a prototype
for mmioctl.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 1999/11/22 19:21:57 matthieu Exp $	*/
d59 3
d163 5
d171 1
@


1.9.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2001/01/31 22:39:39 jason Exp $	*/
a58 3
#if defined(UVM)
#include <uvm/uvm_extern.h>
#endif
a159 5
#if defined(UVM)
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#else
a162 1
#endif
d247 1
a247 1
	return (-1);
@


1.9.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.1 2001/04/18 16:01:59 niklas Exp $	*/
d59 1
d61 1
d163 1
d167 5
d181 1
a181 1
						    malloc(PAGE_SIZE, M_TEMP,
d183 1
a183 1
						bzero(devzeropage, PAGE_SIZE);
d211 2
a212 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(devzeropage, PAGE_SIZE);
d214 1
a214 1
			c = min(iov->iov_len, PAGE_SIZE);
@


1.9.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.2 2001/07/04 10:14:58 niklas Exp $	*/
d149 1
a149 1
			    VM_PROT_READ : VM_PROT_WRITE, PMAP_WIRED);
@


1.9.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
d68 1
a68 1
paddr_t mmmmap __P((dev_t, off_t, int));
d242 1
a242 1
paddr_t
d245 1
a245 1
	off_t off;
@


1.9.2.5
log
@Merge in trunk
@
text
@a148 1
			pmap_update(pmap_kernel());
a153 1
			pmap_update(pmap_kernel());
@


1.9.2.6
log
@Merge in -current from about a week ago
@
text
@d64 5
a68 5
int mmopen(dev_t, int, int, struct proc *);
int mmclose(dev_t, int, int, struct proc *);
int mmrw(dev_t, struct uio *, int);
paddr_t mmmmap(dev_t, off_t, int);
int mmioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.9.2.7
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.6 2002/03/28 10:06:14 niklas Exp $	*/
@


1.8
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 1999/09/03 18:00:29 art Exp $	*/
d68 1
@


1.7
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 1998/08/31 17:42:27 millert Exp $	*/
d245 11
@


1.6
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1997/09/09 10:56:17 niklas Exp $	*/
d147 1
a147 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
@


1.5
log
@make mmmap type-correct; from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 1997/02/21 08:55:13 niklas Exp $	*/
d77 10
a86 1
	return (0);
@


1.4
log
@copypage/zeropage adaption. cputype setting needs more work.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.3 1996/10/31 00:39:22 niklas Exp $	*/
/*	$NetBSD: mem.c,v 1.17 1996/04/23 05:14:40 veego Exp $	*/
d67 1
a67 1
int mmmmap __P((dev_t, vm_offset_t, int));
d234 1
a234 1
	vm_offset_t off;
a236 1

@


1.3
log
@Correct mmmap's 2nd arg type
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
a62 1
caddr_t zeropage;
d160 2
a161 2
					if (zeropage == NULL) {
						zeropage = (caddr_t)
d164 1
a164 1
						bzero(zeropage, CLBYTES);
d167 1
a167 1
					v = (vm_offset_t) zeropage;
d190 2
a191 2
			if (zeropage == NULL) {
				zeropage = (caddr_t)
d193 1
a193 1
				bzero(zeropage, CLBYTES);
d196 1
a196 1
			error = uiomove(zeropage, c, uio);
@


1.2
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d67 1
a67 2
int mmmmap __P((dev_t, int, int));

d234 2
a235 1
	int off, prot;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: mem.c,v 1.15 1995/10/09 02:46:09 chopps Exp $	*/
d54 1
d64 6
d72 4
a75 3
mmopen(dev, flag, mode)
	dev_t dev;
	int flag, mode;
d83 4
a86 3
mmclose(dev, flag, mode)
	dev_t dev;
	int flag, mode;
d127 1
a127 1
/* minor device 0 is physical memory */
d147 1
a147 1
/* minor device 1 is kernel memory */
d176 1
a176 1
/* minor device 2 is EOF/RATHOLE */
d182 4
a185 1
/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
d200 5
a204 1
/* minor device 20 (/dev/reload) represents magic memory which you can write a kernel image to, causing a reboot into that kernel */
d222 1
d224 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
