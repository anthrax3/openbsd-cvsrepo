head	1.17;
access;
symbols
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	UBC_SYNC_A:1.17
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.16
	UBC:1.13.0.4
	UBC_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.12.0.10
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.8
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.4
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.11.0.6
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2002.12.31.16.35.36;	author miod;	state dead;
branches;
next	1.16;

1.16
date	2002.06.11.03.25.31;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.29.18.40.29;	author miod;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	99.07.30.19.41.29;	author deraadt;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	98.03.01.16.07.18;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.09.09.11.08.08;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.05.29.01.18.18;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.02.03.11.37.37;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.01.16.09.23.28;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.10.05.15.47.51;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.29.10.14.35;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.05.02.06.43.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.14.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.12.20.19.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.53;	author deraadt;	state Exp;
branches;
next	;

1.12.4.1
date	2001.10.31.02.52.45;	author nate;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2002.03.28.10.06.14;	author niklas;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2003.03.27.23.19.17;	author niklas;	state dead;
branches;
next	;

1.13.4.1
date	2002.06.11.03.34.57;	author art;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.13.4.3;

1.13.4.3
date	2003.05.19.21.49.38;	author tedu;	state dead;
branches;
next	;


desc
@@


1.17
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: swapgeneric.c,v 1.16 2002/06/11 03:25:31 miod Exp $	*/
/*	$NetBSD: swapgeneric.c,v 1.27 1997/01/26 22:58:32 rat Exp $	*/

/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)swapgeneric.c	7.5 (Berkeley) 5/7/91
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/reboot.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/fcntl.h>		/* XXXX and all that uses it */
#include <sys/proc.h>		/* XXXX and all that uses it */
#include <sys/disk.h>
#include <dev/cons.h>
#include <machine/conf.h>
#include <machine/cpu.h>

#include "fd.h"
#include "sd.h"
#include "wd.h"
#include "cd.h"

int (*mountroot)(void) = dk_mountroot;

void gets(char *);

/*
 * Generic configuration;  all in one
 */
dev_t	rootdev = NODEV;
dev_t	dumpdev = NODEV;

struct	swdevt swdevt[] = {
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
};

#if NFD > 0
extern	struct cfdriver fd_cd;
#endif
#if NSD > 0
extern	struct cfdriver sd_cd;
#endif
#if NWD > 0
extern	struct cfdriver wd_cd;
#endif
#if NCD > 0
extern	struct cfdriver cd_cd;
#endif

struct genericconf {
	struct cfdriver *gc_driver;
	dev_t gc_root;
};

/*
 * the system will assign rootdev to the first partition 'a' 
 * found with FS_BSDFFS fstype. so these should be ordered
 * in prefernece of boot. however it does walk units backwards
 * to remain compatible with the old amiga method of picking
 * the last root found.
 */
struct genericconf genericconf[] = {
#if NFD > 0
	{&fd_cd,	makedev(2, 0)},
#endif
#if NSD > 0
	{&sd_cd,	makedev(4, 0)},
#endif
#if NWD > 0
	{&wd_cd,	makedev(0, 0)},
#endif
#if NCD > 0
	{&cd_cd,	makedev(7, 0)},
#endif
	{ 0 },
};

struct genericconf *getgenconf(char *); 

struct genericconf *
getgenconf(bp)
	char *bp;
{
	char *cp;
	struct genericconf *gc;

	for (;;) {
		printf("root device> ");
		gets(bp);
		for (gc = genericconf; gc->gc_driver; gc++)
			if (gc->gc_driver->cd_name[0] == bp[0] &&
			    gc->gc_driver->cd_name[1] == bp[1])
				break;
		if (gc->gc_driver == NULL) {
			printf("use one of:");
			for (gc = genericconf; gc->gc_driver; gc++)
				printf(" %s%%d", gc->gc_driver->cd_name);
			printf("\n");
			continue;
		}
		cp = bp + 2;
		if (*cp >= '0' && *cp <= '9')
			break;
		printf("bad/missing unit number\n");
	}
	return(gc);
}

#ifdef GENERIC
void
setconf()
{
	struct disk *dkp;
	struct device **devpp;
	struct partition *pp;
	struct genericconf *gc;
	struct bdevsw *bdp;
	int unit, swaponroot;
	char name[128];
	char *cp;

	swaponroot = 0;

	if (rootdev != NODEV)
		goto justdoswap;

	unit = 0;
	if (boothowto & RB_ASKNAME) {
		gc = getgenconf(name);
		cp = name + 2;
		while (*cp >= '0' && *cp <= '9')
			unit = 10 * unit + *cp++ - '0';
		if (*cp == '*')
			swaponroot = 1;
		unit &= 0x7;
		goto found;
	}

	for (gc = genericconf; gc->gc_driver; gc++) {
		for (unit = gc->gc_driver->cd_ndevs - 1; unit >= 0; unit--) { 
			if (gc->gc_driver->cd_devs[unit] == NULL)
				continue;

			/*
			 * Find the disk corresponding to the current
			 * device.
			 */
			devpp = (struct device **)gc->gc_driver->cd_devs;
			if ((dkp = disk_find(devpp[unit]->dv_xname)) == NULL)
				continue;

			if (dkp->dk_driver == NULL ||
			    dkp->dk_driver->d_strategy == NULL)
				continue;
			for (bdp = bdevsw; bdp < (bdevsw + nblkdev); bdp++)
				if (bdp->d_strategy ==
				    dkp->dk_driver->d_strategy)
					break;
			if (bdp->d_open(MAKEDISKDEV(major(gc->gc_root),
			    unit, 0), FREAD | FNONBLOCK, 0, curproc))
				continue;
			bdp->d_close(MAKEDISKDEV(major(gc->gc_root), unit, 
			    0), FREAD | FNONBLOCK, 0, curproc);
			pp = &dkp->dk_label->d_partitions[0];
			if (pp->p_size == 0 || pp->p_fstype != FS_BSDFFS)
				continue;
			goto found;
		}
	}
	printf("no suitable root\n");
	asm("stop #0x2700");
	/*NOTREACHED*/
found:
	gc->gc_root = MAKEDISKDEV(major(gc->gc_root), unit, 0);
	rootdev = gc->gc_root;

justdoswap:
	swdevt[0].sw_dev = dumpdev = MAKEDISKDEV(major(rootdev), 
	    DISKUNIT(rootdev), 1);
	/* swap size and dumplo set during autoconfigure */
	if (swaponroot)
		rootdev = dumpdev;
}
#endif

void
gets(cp)
	char *cp;
{
	char *lp;
	int c;

	lp = cp;
	for (;;) {
		cnputc(c = cngetc());
		switch (c) {
		case '\n':
		case '\r':
			*lp = 0;
			return;
		case '\b':
		case '\177':
			if (lp > cp) {
				lp--;
				cnputc(' ');
				cnputc('\b');
			}
			continue;
		case '#':
			lp--;
			if (lp < cp)
				lp = cp;
			continue;
		case '@@':
		case 'u'&037:
			lp = cp;
			cnputc('\n');
			continue;
		default:
			*lp++ = c;
		}
	}
}
@


1.16
log
@Include <sys/conf.h> from <machine/conf.h> like in other arches.  Changes
to come soon depend on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.15 2002/03/15 01:20:04 millert Exp $	*/
@


1.15
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.14 2002/03/14 01:26:28 millert Exp $	*/
a40 1
#include <sys/conf.h>
d49 1
@


1.14
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.13 2001/09/29 18:40:29 miod Exp $	*/
d113 1
a113 1
struct genericconf * getgenconf(char *); 
@


1.13
log
@The "swap generic" configuration needs only two entries in swdevt[].
So shrink it when necessary, and remove unwanted stuff as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.12 1999/07/30 19:41:29 deraadt Exp $	*/
d57 1
a57 1
int (*mountroot) __P((void)) = dk_mountroot;
d59 1
a59 1
void gets __P((char *));
d113 1
a113 1
struct genericconf * getgenconf __P((char *)); 
@


1.13.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.13 2001/09/29 18:40:29 miod Exp $	*/
d57 1
a57 1
int (*mountroot)(void) = dk_mountroot;
d59 1
a59 1
void gets(char *);
d113 1
a113 1
struct genericconf *getgenconf(char *); 
@


1.13.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.13.4.1 2002/06/11 03:34:57 art Exp $	*/
d41 1
a49 1
#include <machine/conf.h>
@


1.13.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.13.4.2 2002/10/29 00:28:01 art Exp $	*/
@


1.12
log
@acd goes away
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.11 1998/03/01 16:07:18 niklas Exp $	*/
d68 2
a69 2
	{ NODEV,	1,	0 },
	{ NODEV,	0,	0 },
@


1.12.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.12 1999/07/30 19:41:29 deraadt Exp $	*/
d68 2
a69 2
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
@


1.12.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
int (*mountroot)(void) = dk_mountroot;
d59 1
a59 1
void gets(char *);
d113 1
a113 1
struct genericconf *getgenconf(char *); 
@


1.12.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.12.4.2 2002/03/28 10:06:14 niklas Exp $	*/
@


1.11
log
@GCC 2.8 requires explicit types
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.10 1997/09/09 11:08:08 niklas Exp $	*/
a55 1
#include "acd.h"
a83 3
#if NACD > 0
extern	struct cfdriver acd_cd;
#endif
a108 3
#endif
#if NACD > 0
	{&acd_cd,	makedev(15, 0)},
@


1.10
log
@NetBSD RCS Id update
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.9 1997/05/29 01:18:18 niklas Exp $	*/
d232 2
a233 2
	register char *lp;
	register c;
@


1.9
log
@small style nits
@
text
@d1 2
a2 2
/*	$OpenBSD: swapgeneric.c,v 1.8 1997/02/03 11:37:37 deraadt Exp $	*/
/*	$NetBSD: swapgeneric.c,v 1.26 1996/10/13 03:06:40 christos Exp $	*/
@


1.8
log
@use dk_mountroot
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.7 1997/01/16 09:23:28 niklas Exp $	*/
d163 1
a163 1
	
@


1.7
log
@Sync to NetBSD 970110
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.6 1996/10/05 15:47:51 niklas Exp $	*/
d58 1
a58 6
#if NCD + NACD > 0
#include <sys/mount.h>
#include <isofs/cd9660/iso.h>
#endif
#include <ufs/ffs/ffs_extern.h>
int (*mountroot) __P((void)) = ffs_mountroot;
a217 4
#if NCD > 0
	if (major(rootdev) == 7)
		mountroot = cd9660_mountroot;
#endif
@


1.6
log
@use wd.h not wdc.h.  Teach booting logic about wd and acd
@
text
@d1 2
a2 2
/*	$OpenBSD: swapgeneric.c,v 1.5 1996/05/29 10:14:35 niklas Exp $	*/
/*	$NetBSD: swapgeneric.c,v 1.24 1996/05/21 17:15:40 is Exp $	*/
@


1.5
log
@Merge of 960526 NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.3 1996/04/21 22:14:51 deraadt Exp $	*/
d54 1
d56 1
d58 1
a58 1
#if NCD > 0
d84 3
d90 3
d113 3
d118 3
@


1.4
log
@Sync with NetBSD 9600430.  The port has gone over a major -Wall treat
@
text
@d2 1
a2 1
/*	$NetBSD: swapgeneric.c,v 1.22 1996/04/21 21:07:12 veego Exp $	*/
d142 1
a206 1

d221 1
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: swapgeneric.c,v 1.21 1996/03/17 05:54:41 mhitch Exp $	*/
d49 2
d57 2
a58 1
int cd9660_mountroot();
d60 4
a63 2
int ffs_mountroot();
int (*mountroot)() = ffs_mountroot;
d111 2
d142 1
d222 1
@


1.2
log
@from netbsd;
New generic disk framework.  Highlights:
New metrics handling.  Metrics are now kept in the new `struct disk'.
Busy time is now stored as a timeval, and transfer count in bytes.
Storage for disklabels is now dynamically allocated, so that the size
of the disk structure is not machine-dependent.
Several new functions for attaching and detaching disks, and handling
metrics calculation.
Old-style instrumentation is still supported in drivers that did it
before.  However, old-style instrumentation is being deprecated, and
will go away once the userland utilities are updated for the new
framework.
For usage and architectural details, see the forthcoming disk(9)
manual page.
@
text
@d1 2
a2 1
/*	$NetBSD: swapgeneric.c,v 1.20 1996/01/07 22:01:46 thorpej Exp $	*/
d72 1
a72 1
extern	struct cfdriver fdcd;
d75 1
a75 1
extern	struct cfdriver sdcd;
d78 1
a78 1
extern	struct cfdriver cdcd;
d95 1
a95 1
	{&fdcd,	makedev(2, 0)},
d98 1
a98 1
	{&sdcd,	makedev(4, 0)},
d101 1
a101 1
	{&cdcd,	makedev(7, 0)},
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.19 1995/04/19 13:02:57 chopps Exp $	*/
d136 2
a137 1
	struct dkdevice *dkp;
d161 1
d166 1
d168 2
a169 2
			 * this is a hack these drivers should use
			 * dk_dev and not another instance directly above.
d171 4
a174 2
			dkp = (struct dkdevice *)
			   ((struct device *)gc->gc_driver->cd_devs[unit] + 1);
d187 1
a187 1
			pp = &dkp->dk_label.d_partitions[0];
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

