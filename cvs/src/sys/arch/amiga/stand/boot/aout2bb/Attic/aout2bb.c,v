head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.5
	UBC:1.2.0.24
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2002.12.31.16.35.39;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2002.07.16.21.21.00;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.11.05.18.21;	author jsyn;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.03.22.00.20.48;	author niklas;	state Exp;
branches
	1.2.14.1
	1.2.24.1;
next	1.1;

1.1
date	97.01.16.09.26.48;	author niklas;	state Exp;
branches;
next	;

1.2.14.1
date	2002.03.28.10.06.15;	author niklas;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2003.03.27.23.19.19;	author niklas;	state dead;
branches;
next	;

1.2.24.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.2.24.2;

1.2.24.2
date	2002.10.29.00.28.01;	author art;	state Exp;
branches;
next	1.2.24.3;

1.2.24.3
date	2003.05.19.21.49.40;	author tedu;	state dead;
branches;
next	;


desc
@@


1.6
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*
 * $OpenBSD: aout2bb.c,v 1.5 2002/07/16 21:21:00 fgsch Exp $
 * $NetBSD: aout2bb.c,v 1.2 1996/12/31 22:39:58 veego Exp $
 *
 * Copyright (c) 1996 Ignatios Souvatzis
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Ignatios Souvatzis
 *      for the NetBSD project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/types.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <sys/mman.h>		/* of the machine we're running on */
#include <machine/endian.h>	/* of the machine we're running on */

#include <machine/exec.h>	/* TARGET */
#include <sys/exec_aout.h>	/* TARGET */

#include "aout2bb.h"
#include "chksum.h"

void usage(void);
int intcmp(const void *, const void *);
int main(int argc, char *argv[]);

#ifdef DEBUG
#define dprintf(x) printf x
#else
#define dprintf(x)
#endif

#define BBSIZE 8192

char *progname;
u_int8_t buffer[BBSIZE];
u_int32_t relbuf[BBSIZE/sizeof(u_int32_t)]; 
	/* can't have more relocs than that*/

int
intcmp(i, j)
	const void *i, *j;
{
	int r;

	r = (*(u_int32_t *)i) < (*(u_int32_t *)j);
	
	return 2*r-1; 
}

int
main(argc, argv)
	int argc;
	char *argv[];
{
	int ifd, ofd;
	u_int mid, flags, magic;
	caddr_t image;
	struct exec *eh;
	struct relocation_info_m68k *rpi;
	u_int32_t *lptr;
	int i, delta;
	u_int8_t *rpo;
	u_int32_t oldaddr, addrdiff;
	u_int32_t tsz, dsz, bsz, trsz, drsz, entry, relver;
	int sumsize = 16;
	int c;
	

	progname = argv[0];

	/* insert getopt here, if needed */
	while ((c = getopt(argc, argv, "F")) != -1)
	switch(c) {
	case 'F':
		sumsize = 2;
		break;
	default:
		usage();
	}
	argv += optind;
	argc -= optind;

	if (argc < 2)
		usage();

	ifd = open(argv[0], O_RDONLY, 0);
	if (ifd < 0)
		err(1, "Can't open %s", argv[0]);

	image = mmap(0, 65536, PROT_READ, MAP_FILE|MAP_PRIVATE, ifd, 0);
	if (image == 0)
		err(1, "Can't mmap %s", argv[1]);

	eh = (struct exec *)image; /* XXX endianness */

	magic = N_GETMAGIC(*eh);
	if (magic != OMAGIC)
		errx(1, "%s isn't an OMAGIC file, but 0%o", argv[0], magic);

	flags = N_GETFLAG(*eh);
	if (flags != 0)
		errx(1, "%s has strange exec flags 0x%x", argv[0], flags);

	mid = N_GETMID(*eh);
	switch(mid) {
	case MID_M68K:
		break;
	default:
		errx(1, "%s has strange machine id 0x%x (%d)", argv[0], mid,
		    mid);
	}

	tsz = ntohl(eh->a_text);
	dsz = ntohl(eh->a_data);
	bsz = ntohl(eh->a_bss);
	trsz = ntohl(eh->a_trsize);
	drsz = ntohl(eh->a_drsize);
	entry = ntohl(eh->a_entry);

	dprintf(("tsz = 0x%x, dsz = 0x%x, bsz = 0x%x, total 0x%x, entry=0x%x\n", 
		tsz, dsz, bsz, tsz+dsz+bsz, entry));

	if ((trsz+drsz)==0)
		errx(1, "%s has no relocation records.", argv[0]);

	dprintf(("%d text relocs, %d data relocs\n", trsz/8, drsz/8));
	if (entry != 12)
		errx(1, "%s: entry point 0x%04x is not 0x000c", argv[0],
		    entry);

	/*
	 * We have one contiguous area allocated by the ROM to us.
	 */
	if (tsz+dsz+bsz > BBSIZE)
		errx(1, "%s: resulting image too big", argv[0]);

	memset(buffer, 0, sizeof(buffer));
	memcpy(buffer, image + N_TXTOFF(*eh), tsz+dsz);

	/*
	 * Hm. This tool REALLY should understand more than one 
	 * relocator version. For now, check that the relocator at
	 * the image start does understand what we output.
	 */
	relver = ntohl(*(u_int32_t *)(image+0x24));
	switch (relver) {
		default:
			errx(1, "%s: unrecognized relocator version %d",
				argv[0], relver);
			/*NOTREACHED*/

		case RELVER_RELATIVE_BYTES:
			rpo = buffer + BBSIZE - 1;
			delta = -1;
			break;

		case RELVER_RELATIVE_BYTES_FORWARD:
			rpo = buffer + tsz + dsz;
			delta = +1;
			*(u_int16_t *)(buffer + 14) = htons(tsz + dsz);
			break;
	}


	
	i = 0;

	for (rpi = (struct relocation_info_m68k *)(image+N_TRELOFF(*eh));
	    (caddr_t)rpi < image+N_TRELOFF(*eh)+trsz; rpi++) {

		NTOHL(((u_int32_t *)rpi)[0]);
		NTOHL(((u_int32_t *)rpi)[1]);

		dprintf(("0x%08x 0x%08x %c\n", *(u_int32_t *)rpi,
		    ((u_int32_t *)rpi)[1], rpi->r_extern ? 'U' : ' '));

		if (rpi->r_extern)
			errx(1, "code accesses unresolved symbol");
		if (rpi->r_copy)
			errx(1, "code accesses r_copy symbol");
		if (rpi->r_jmptable)
			errx(1, "code accesses r_jmptable symbol");
		if (rpi->r_relative)
			errx(1, "code accesses r_relative symbol");
		if (rpi->r_baserel)
			errx(1, "code accesses r_baserel symbol");

		/*
		 * We don't worry about odd sized symbols which are pc
		 * relative, so test for pcrel first:
		 */

		if (rpi->r_pcrel)
			continue;

		if (rpi->r_length != 2)
			errx(1, "code accesses size %d symbol", rpi->r_length);

		relbuf[i++] = rpi->r_address;
	}

	for (rpi = (struct relocation_info_m68k *)(image+N_DRELOFF(*eh));
	    (caddr_t)rpi < image+N_DRELOFF(*eh)+drsz; rpi++) {

		NTOHL(((u_int32_t *)rpi)[0]);
		NTOHL(((u_int32_t *)rpi)[1]);

		dprintf(("0x%08x 0x%08x %c\n", *(u_int32_t *)rpi,
		    ((u_int32_t *)rpi)[1], rpi->r_extern ? 'U' : ' '));

		if (rpi->r_extern)
			errx(1, "data accesses unresolved symbol");
		if (rpi->r_copy)
			errx(1, "data accesses r_copy symbol");
		if (rpi->r_jmptable)
			errx(1, "data accesses r_jmptable symbol");
		if (rpi->r_relative)
			errx(1, "data accesses r_relative symbol");
		if (rpi->r_baserel)
			errx(1, "data accesses r_baserel symbol");

		/*
		 * We don't worry about odd sized symbols which are pc
		 * relative, so test for pcrel first:
		 */

		if (rpi->r_pcrel)
			continue;

		if (rpi->r_length != 2)
			errx(1, "data accesses size %d symbol", rpi->r_length);


		relbuf[i++] = rpi->r_address + tsz;
	}
	printf("%d absolute reloc%s found, ", i, i==1?"":"s");
	
	if (i > 1)
		heapsort(relbuf, i, 4, intcmp);

	oldaddr = 0;
	
	for (--i; i>=0; --i) {
		dprintf(("0x%04x: ", relbuf[i]));
		lptr = (u_int32_t *)&buffer[relbuf[i]];
		addrdiff = relbuf[i] - oldaddr;
		dprintf(("(0x%04x, 0x%04x): ", *lptr, addrdiff));
		if (addrdiff > 255) {
			*rpo = 0;
			if (delta > 0) {
				++rpo;
				*rpo++ = (relbuf[i] >> 8) & 0xff;
				*rpo++ = relbuf[i] & 0xff;
				dprintf(("%02x%02x%02x\n",
				    rpo[-3], rpo[-2], rpo[-1]));
			} else {
				*--rpo = relbuf[i] & 0xff;
				*--rpo = (relbuf[i] >> 8) & 0xff;
				--rpo;
				dprintf(("%02x%02x%02x\n",
				    rpo[0], rpo[1], rpo[2]));
			}
		} else {
			*rpo = addrdiff;
			dprintf(("%02x\n", *rpo));
			rpo += delta;
		}

		oldaddr = relbuf[i];

		if (delta < 0 ? rpo <= buffer+tsz+dsz
		    : rpo >= buffer + BBSIZE)
			errx(1, "Relocs don't fit.");
	}
	*rpo = 0; rpo += delta;
	*rpo = 0; rpo += delta;
	*rpo = 0; rpo += delta;

	printf("using %d bytes.\n", delta > 0 ?
	    rpo-buffer-tsz-dsz : buffer+BBSIZE-rpo);
	/*
	 * RELOCs must fit into the bss area.
	 */
	if (delta < 0 ? rpo <= buffer+tsz+dsz
	    : rpo >= buffer + BBSIZE)
		errx(1, "Relocs don't fit.");

	((u_int32_t *)buffer)[1] = 0; 
	((u_int32_t *)buffer)[1] = 
	    (0xffffffff - chksum((u_int32_t *)buffer, sumsize * 512 / 4));

	ofd = open(argv[1], O_CREAT|O_WRONLY, 0644);
	if (ofd < 0)
		err(1, "Can't open %s", argv[1]);

	if (write(ofd, buffer, BBSIZE) != BBSIZE)
		err(1, "Writing output file");

	exit(0);
}

void
usage()
{
	fprintf(stderr, "Usage: %s [-F] bootprog bootprog.bin\n",
	    progname);
	exit(1);
	/* NOTREACHED */
}
@


1.5
log
@correct memset arguments; from Moritz Jodeit <moritz@@jodeit.org> via PR/2822.
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.4 2002/06/11 05:18:21 jsyn Exp $
@


1.4
log
@err(3) appends a newline already; ok miod@@
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.3 2002/03/14 01:26:29 millert Exp $
d169 1
a169 1
	memset(buffer, sizeof(buffer), 0);
@


1.3
log
@First round of __P removal in sys
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.2 1997/03/22 00:20:48 niklas Exp $
d156 1
a156 1
		errx(1, "%s has no relocation records.\n", argv[0]);
d160 1
a160 1
		errx(1, "%s: entry point 0x%04x is not 0x000c\n", argv[0],
d167 1
a167 1
		errx(1, "%s: resulting image too big\n", argv[0]);
d180 1
a180 1
			errx(1, "%s: unrecognized relocator version %d\n",
@


1.2
log
@get __LDPGSZ def
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.1 1997/01/16 09:26:48 niklas Exp $
d54 1
a54 1
void usage __P((void));
@


1.2.24.1
log
@Sync UBC branch to -current
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.2 1997/03/22 00:20:48 niklas Exp $
d54 1
a54 1
void usage(void);
@


1.2.24.2
log
@sync to -current
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.2.24.1 2002/06/11 03:34:58 art Exp $
d156 1
a156 1
		errx(1, "%s has no relocation records.", argv[0]);
d160 1
a160 1
		errx(1, "%s: entry point 0x%04x is not 0x000c", argv[0],
d167 1
a167 1
		errx(1, "%s: resulting image too big", argv[0]);
d169 1
a169 1
	memset(buffer, 0, sizeof(buffer));
d180 1
a180 1
			errx(1, "%s: unrecognized relocator version %d",
@


1.2.24.3
log
@sync
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.2.24.2 2002/10/29 00:28:01 art Exp $
@


1.2.14.1
log
@Merge in -current from about a week ago
@
text
@d2 1
a2 1
 * $OpenBSD$
d54 1
a54 1
void usage(void);
@


1.2.14.2
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.2.14.1 2002/03/28 10:06:15 niklas Exp $
@


1.1
log
@Sync to NetBSD 970110
@
text
@d2 1
a2 1
 * $OpenBSD: aout2bb.c,v 1.2 1996/12/31 22:39:58 veego Exp $
d48 1
@
