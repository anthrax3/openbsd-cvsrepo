head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_2:1.4.0.20
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.18
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.16
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.6
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.4;

1.4
date	99.03.05.19.17.44;	author niklas;	state Exp;
branches
	1.4.6.1
	1.4.16.1;
next	1.3;

1.3
date	96.04.27.18.39.03;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.02.27.15.40.59;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.02.26.21.55.57;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.4.16.1
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.5
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: isa_machdep.c,v 1.4 1999/03/05 19:17:44 niklas Exp $	*/

/*
 * Copyright (c) 1999 Niklas Hallqvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/intr.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>

/*
 * Just check to see if an IRQ is available/can be shared.
 * 0 = interrupt not available
 * 1 = interrupt shareable
 * 2 = interrupt all to ourself
 */
int
__isa_intr_check(irq, type, intrtype)
	int irq;
	int type;
	int *intrtype;
{
	if (type == IST_NONE)
		return (0);

	switch (intrtype[irq]) {
	case IST_NONE:
		return (2);
		break;
	case IST_LEVEL:
		if (type != intrtype[irq])
			return (0);
		return (1);
		break;
	case IST_EDGE:
	case IST_PULSE:
		if (type != IST_NONE)
			return (0);
	}
	return (1);
}

@


1.4
log
@Add forgotten file, espie@@ has checked it compiles
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.c,v 1.4 1999/03/05 19:17:44 niklas Exp $	*/
@


1.4.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.c,v 1.4 1999/03/05 19:17:44 niklas Exp $	*/
@


1.3
log
@Bring forward the Amiga ISA support, and resolve a conflict with if_ed
@
text
@a1 1
/*	$NetBSD: isa_machdep.c,v 1.1 1995/08/02 14:10:17 niklas Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Niklas Hallqvist
d32 3
a34 1
#include <sys/param.h>
a35 1
#include <sys/malloc.h>
d37 3
a41 8
#include <machine/pio.h>

#include <amiga/amiga/device.h>
#include <amiga/isa/isa_intr.h>

void	isaattach __P((struct device *, struct device *, void *));
int	isamatch __P((struct device *, void *, void *));

d43 4
a46 6
 * After careful thought about this issue I decided that allowing only
 * one isabus configured into a system would be sufficient.  I'm not
 * lazy, I did the original design with possibilities of multiple ISA
 * busses, but that made porting of existing drivers a bit harder and
 * error-prone, as well as I had to write obfuscated code.  This
 * solution is more in the spirit of KISS.  --niklas@@appli.se
a47 8
struct isa_link *isa;
int isadebug = 0;

struct cfdriver isacd = {
	NULL, "isa", isamatch, isaattach,
	DV_DULL, sizeof(struct device), 1
};

d49 4
a52 3
isamatch(parent, cfdata, aux)
	struct device *parent;
	void *cfdata, *aux;
d54 1
a54 9
	struct cfdata *cf = cfdata;

#ifdef DEBUG
	if (isadebug)
		printf(" isamatch");
#endif

	/* See if the unit number is valid. */
	if (cf->cf_unit > 0)
d57 14
a73 83
void
isaattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct isa_softc *sc = (struct isa_softc *)self;

	isa = (struct isa_link *)aux;

	printf("\n");

	TAILQ_INIT (&sc->sc_subdevs);

	config_scan(isascan, self);
}

void *
isa_intr_establish(intr, type, level, ih_fun, ih_arg, ih_what)
	int intr;
	int type;
	int level;
	int (*ih_fun)(void *);
	void *ih_arg;
	char *ih_what;
{
	return (*isa_intr_fcns->isa_intr_establish)(intr, type, level,
	    ih_fun, ih_arg, ih_what);
}

void
isa_intr_disestablish(handler)
	void *handler;
{
	(*isa_intr_fcns->isa_intr_disestablish)(handler);
}

void
isa_outsb(port, addr, cnt)
	int port;
	void *addr;
	int cnt;
{
	u_int8_t *p = addr;

	while (cnt--)
		outb(port, *p++);
}

void
isa_insb(port, addr, cnt)
	int port;
	void *addr;
	int cnt;
{
	u_int8_t *p = addr;

	while (cnt--)
		*p++ = inb(port);
}

void
isa_outsw(port, addr, cnt)
	int port;
	void *addr;
	int cnt;
{
	u_int16_t *p = addr;

	while (cnt--)
		outw(port, *p++);
}

void
isa_insw(port, addr, cnt)
	int port;
	void *addr;
	int cnt;
{
	u_int16_t *p = addr;

	while (cnt--)
		*p++ = inw(port);
}
@


1.2
log
@Adapt to our isa_intr_establish interface
@
text
@@


1.1
log
@Initial checkin of the Amiga ISA-kit
@
text
@d1 1
d99 1
a99 1
isa_intr_establish(intr, type, level, ih_fun, ih_arg)
d105 1
d108 1
a108 1
	    ih_fun, ih_arg);
@
