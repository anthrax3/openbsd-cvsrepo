head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.4.0.16
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.6
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2002.12.31.16.35.38;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.03.15.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.01.19.10.04.55;	author niklas;	state Exp;
branches
	1.4.6.1
	1.4.16.1;
next	1.3;

1.3
date	98.06.29.05.47.37;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.04.27.18.39.04;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.02.26.21.55.57;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.03.28.10.06.15;	author niklas;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2003.03.27.23.19.18;	author niklas;	state dead;
branches;
next	;

1.4.16.1
date	2002.06.11.03.34.58;	author art;	state Exp;
branches;
next	1.4.16.2;

1.4.16.2
date	2003.05.19.21.49.39;	author tedu;	state dead;
branches;
next	;


desc
@@


1.7
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: isa_machdep.h,v 1.6 2002/03/14 03:15:52 millert Exp $	*/

/*
 * Copyright (c) 1995, 1996 Niklas Hallqvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _ISA_MACHDEP_H_
#define _ISA_MACHDEP_H_

#include <machine/endian.h>

/*
 * Types provided to machine-independent ISA code.
 */
typedef struct amiga_isa_chipset *isa_chipset_tag_t;

struct amiga_isa_chipset {
	void	*ic_data;

	void	(*ic_attach_hook)(struct device *, struct device *,
		    struct isabus_attach_args *);
	void	*(*ic_intr_establish)(void *, int, int, int,
		    int (*)(void *), void *, char *);
	void	(*ic_intr_disestablish)(void *, void *);
	int	(*ic_intr_check)(void *, int, int);
};

int	__isa_intr_check(int, int, int *);

/*
 * Functions provided to machine-independent ISA code.
 */
#define	isa_attach_hook(p, s, a)					\
    (*(a)->iba_ic->ic_attach_hook)((p), (s), (a))
#define	isa_intr_establish(c, i, t, l, f, a, w)				\
    (*(c)->ic_intr_establish)((c)->ic_data, (i), (t), (l), (f), (a), (w))
#define	isa_intr_disestablish(c, h)					\
    (*(c)->ic_intr_disestablish)((c)->ic_data, (h))
#define	isa_intr_check(c, i, t)						\
    (*(c)->ic_intr_check)((c)->ic_data, (i), (t))

#endif
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.5 2002/03/14 01:26:29 millert Exp $	*/
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.4 1999/01/19 10:04:55 niklas Exp $	*/
d47 2
a48 2
	void	*(*ic_intr_establish) __P((void *, int, int, int,
		    int (*)(void *), void *, char *));
@


1.4
log
@Add isa_intr_check functionality
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.3 1998/06/29 05:47:37 downsj Exp $	*/
d45 2
a46 2
	void	(*ic_attach_hook) __P((struct device *, struct device *,
		    struct isabus_attach_args *));
d49 2
a50 2
	void	(*ic_intr_disestablish) __P((void *, void *));
	int	(*ic_intr_check) __P((void *, int, int));
d53 1
a53 1
int	__isa_intr_check __P((int, int, int *));
@


1.4.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.4 1999/01/19 10:04:55 niklas Exp $	*/
d45 6
a50 6
	void	(*ic_attach_hook)(struct device *, struct device *,
		    struct isabus_attach_args *);
	void	*(*ic_intr_establish)(void *, int, int, int,
		    int (*)(void *), void *, char *);
	void	(*ic_intr_disestablish)(void *, void *);
	int	(*ic_intr_check)(void *, int, int);
d53 1
a53 1
int	__isa_intr_check(int, int, int *);
@


1.4.16.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.4.16.1 2002/06/11 03:34:58 art Exp $	*/
@


1.4.6.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 6
a50 6
	void	(*ic_attach_hook)(struct device *, struct device *,
		    struct isabus_attach_args *);
	void	*(*ic_intr_establish)(void *, int, int, int,
		    int (*)(void *), void *, char *);
	void	(*ic_intr_disestablish)(void *, void *);
	int	(*ic_intr_check)(void *, int, int);
d53 1
a53 1
int	__isa_intr_check(int, int, int *);
@


1.4.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.4.6.1 2002/03/28 10:06:15 niklas Exp $	*/
@


1.3
log
@Add a __NO_ISA_INTR_CHECK #define, until the maintainers add the code.
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.2 1996/04/27 18:39:04 niklas Exp $	*/
d50 1
d53 2
d64 2
a65 2

#define __NO_ISA_INTR_CHECK	/* FIXME */
@


1.2
log
@Bring forward the Amiga ISA support, and resolve a conflict with if_ed
@
text
@d1 1
a1 1
/*	$OpenBSD: isa_machdep.h,v 1.1 1995/07/21 23:07:17 niklas Exp $	*/
d61 2
@


1.1
log
@Initial checkin of the Amiga ISA-kit
@
text
@d1 1
a1 1
/*	$NetBSD: isa_machdep.h,v 1.1 1995/07/21 23:07:17 niklas Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Niklas Hallqvist
a36 5
void	isa_insb __P((int port, void *addr, int));
void	isa_outsb __P((int port, void *addr, int));
void	isa_insw __P((int port, void *addr, int));
void	isa_outsw __P((int port, void *addr, int));

d38 1
a38 1
 * The link between the ISA device drivers and the bridgecard used.
d40 1
a40 7
struct isa_link {
	struct	device *il_dev;
	void	(*il_stb)(struct device *, int, u_char);
	u_char	(*il_ldb)(struct device *, int);
	void	(*il_stw)(struct device *, int, u_short);
	u_short	(*il_ldw)(struct device *, int);
};
d42 2
a43 2
extern struct isa_link *isa;
extern struct cfdriver isacd;
d45 6
a50 129
static __inline void
stb(addr, val)
	int addr;
	u_char val;
{
	(*isa->il_stb)(isa->il_dev, addr, val);
}

static __inline u_char
ldb(addr)
	int addr;
{
	return (*isa->il_ldb)(isa->il_dev, addr);
}

static __inline void
stw(addr, val)
	int addr;
	u_short val;
{
	(*isa->il_stw)(isa->il_dev, addr, val);
}

static __inline u_short
ldw(addr)
	int addr;
{
	return (*isa->il_ldw)(isa->il_dev, addr);
}

/*
 * Should these be out-of-line instead?  If so, move them to isa.c!
 * How about unaligned word accesses?  Does the '020 allow them?  If not
 * we have to do odd to even moves and vice versa bytewise instead of
 * wordwise.
 */
static __inline void
copy_from_isa (void *from, void *to, int cnt)
{
	int a = (int)from;

	if (a & 1 && cnt) {
		*(u_char *)to = ldb(a++);
		to = ((u_char *)to) + 1;
		cnt--;
	}
	/* Maybe use Duff's device here... */
	while (cnt > 1) {
		*(u_short *)to = ldw(a);
		a += sizeof(u_short);
		to = ((u_short *)to) + 1;
		cnt -= 2;
	}
	if (cnt)
		*(u_char *)to = ldb(a);
}

static __inline void
copy_to_isa (const void *from, void *to, int cnt)
{
	int a = (int)to;

	if (a & 1 && cnt) {
		stb(a++, *(u_char *)from);
		from = ((u_char *)from) + 1;
		cnt--;
	}
	/* Maybe use Duff's device here... */
	while (cnt > 1) {
		stw(a, *(u_short *)from);
		a += sizeof(u_short);
		from = ((u_short *)from) + 1;
		cnt -= 2;
	}
	if (cnt)
		stb(a, *(u_char *)from);
}

static __inline void
zero_isa (void *addr, int cnt)
{
	int a = (int)addr;

	if (a & 1 && cnt) {
		stb(a++, 0);
		cnt--;
	}
	/* Maybe use Duff's device here... */
	while (cnt > 1) {
		stw(a, 0);
		a += sizeof(u_short);
		cnt -= 2;
	}
	if (cnt)
		stb(a, 0);
}

/*
 * These inlines convert shorts from/to isa (intel) byte order to host
 * byte-order.  I know both are exactly equal, but I think it make code
 * more readable to have separate names for them as they indeed have
 * distinctive functionalities.
 */
static __inline u_short
swap(u_short x)
{
	__asm("rolw #8,%0" : "=r" (x) : "0" (x));
	return x;
}

static __inline u_short
itohs(u_short x)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	return x;
#else
	return swap(x);
#endif
}

static __inline u_short
htois(u_short x)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	return x;
#else
	return swap(x);
#endif
}
d53 1
a53 2
 * Given a physical address in the "hole",
 * return a kernel virtual address.
d55 6
a60 1
#define	ISA_HOLE_VADDR(p)  ((caddr_t)p)
@
