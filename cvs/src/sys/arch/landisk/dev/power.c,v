head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.07.11.08.18.30;	author guenther;	state Exp;
branches;
next	1.5;
commitid	zJyOCNTjgsYVGLiw;

1.5
date	2011.06.24.19.47.48;	author naddy;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.15.18.17.25;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.26.18.12.13;	author martin;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.23.21.27.37;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.15.22.22.18;	author martin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@It's init as a process that's special, not init's original thread.
Remember initprocess instead of initproc.

ok matthew@@ blambert@@
@
text
@/*	$OpenBSD: power.c,v 1.5 2011/06/24 19:47:48 naddy Exp $	*/

/*
 * Copyright (c) 2007 Martin Reindl.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/proc.h>
#include <sys/signalvar.h>

#include <machine/bus.h>
#include <machine/autoconf.h>

#include <sh/include/devreg.h>

#include <landisk/landisk/landiskreg.h>
#include <landisk/dev/obiovar.h>

struct power_softc {
	struct device		sc_dev;
	void			*sc_ih;
};

int	power_match(struct device *, void *, void *);
void	power_attach(struct device *, struct device *, void *);
int	power_intr(void *aux);

struct cfattach power_ca = {
	sizeof(struct power_softc),
	power_match,
	power_attach
};

struct cfdriver power_cd = {
	NULL, "power", DV_DULL
};

struct power_softc *power_softc;

int
power_match(struct device *parent, void *match, void *aux)
{
	struct obio_attach_args *oa = aux;
	static struct obio_irq power_match_irq;

	oa->oa_nio = 0;
	oa->oa_niomem = 0;
	if (oa->oa_nirq == 0)
		oa->oa_irq = &power_match_irq;
	oa->oa_nirq = 1;
	oa->oa_irq[0].or_irq = LANDISK_INTR_PWRSW;

	return (1);
}

void
power_attach(struct device *parent, struct device *self, void *aux)
{
	struct power_softc *sc = (void *)self;

	power_softc = sc;

	sc->sc_ih = extintr_establish(LANDISK_INTR_PWRSW, IPL_TTY,
	    power_intr, sc, sc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": couldn't map interrupt\n");
		return;
	}

	printf("\n");
}

int
power_intr(void *arg)
{
	extern int allowpowerdown;
	int status;

	status = (int8_t)_reg_read_1(LANDISK_BTNSTAT);
	if (status == -1) {
		return (0);
	}

	status = ~status;
	if (status & BTN_POWER_BIT) {
#ifdef DEBUG
		printf("%s switched\n", sc->sc_dev.dv_xname);
		Debugger();
#endif
		_reg_write_1(LANDISK_PWRSW_INTCLR, 1);
		if (allowpowerdown == 1) {
			allowpowerdown = 0;
			prsignal(initprocess, SIGUSR1);
		}
		return (1);
	}
	return (0);
}
@


1.5
log
@machdep.kbdreset enables a shutdown by Ctrl-Alt-Del on amd64 and
i386.  Stop abusing it on other archs for controling a shutdown by
pressing the soft power button:

* Add a MI sysctl hw.allowpowerdown; if set to 1 (the default) it
  allows a power button shutdown.
* Make acpi(4)/acpibtn(4) honor hw.allowpowerdown.
* Switch the various power button intercepts on landisk, sgi, sparc64
  and zaurus over to hw.allowpowerdown.
* Garbage collect the machdep.kbdreset sysctl on all archs other than
  amd64 and i386.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.4 2007/06/15 18:17:25 miod Exp $	*/
d110 1
a110 1
			psignal(initproc, SIGUSR1);
@


1.4
log
@In power_match(), make sure oa_irq is correctly initialized.
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.3 2007/04/26 18:12:13 martin Exp $	*/
d93 1
a93 1
	extern int kbd_reset;
d108 2
a109 2
		if (kbd_reset == 1) {
			kbd_reset = 0;
@


1.3
log
@ack the power switch interrupt even if machdep.kbdreset is not set

from Matthew R. Dempsky
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.2 2007/03/23 21:27:37 miod Exp $	*/
d61 1
d65 2
@


1.2
log
@Do not enter ddb from the interrupt handler unless option DEBUG.
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.1 2007/01/15 22:22:18 martin Exp $	*/
d99 1
a99 1
	if ((status & BTN_POWER_BIT) && (kbd_reset == 1)) {
a103 1
		kbd_reset = 0;
d105 4
a108 1
		psignal(initproc, SIGUSR1);
@


1.1
log
@power(4) driver for the power switch on many landisk models, hooked
up to machdep.kbdreset; modelled after the sparc64 power(4) driver

discussed with miod@@ and jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 1
a80 1
		printf(": couldn't map interrupt");
d102 1
a103 1
		Debugger();
@

