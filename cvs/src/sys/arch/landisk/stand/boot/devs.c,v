head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.14
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.18
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.16
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2014.07.17.13.14.06;	author miod;	state Exp;
branches;
next	1.9;
commitid	1zmNQgoSpjTYOUzD;

1.9
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.8;
commitid	Cnjup0HpCIRrcQ6o;

1.8
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.7;
commitid	3HeD4LaLGiS22I3y;

1.7
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.16.23.12.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.29.14.53.45;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.29.14.47.59;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.16.21.22.59;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.11.23.06.46;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.21.48.50;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Turn the console code into regular cons_decl() ones, to better fit libsa
getchar/putchar and be able to link again. Crank minor version.
@
text
@/*	$OpenBSD: devs.c,v 1.9 2014/07/13 09:26:08 jasper Exp $	*/

/*
 * Copyright (c) 2006 Michael Shalayeff
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <libsa.h>
#include <lib/libsa/loadfile.h>

int sector;

void
machdep(void)
{
	tick_init();
	cninit();
}

int
devopen(struct open_file *f, const char *fname, char **file)
{  
	if (fname[0] != 'c' || fname[1] != 'f' || fname[2] != ':')
		return EINVAL;

	*file = (char *)fname + 3;
	f->f_flags |= F_NODEV;
	f->f_dev = &devsw[0];
	return (0);
}

void
devboot(dev_t bootdev, char *p)
{
	sector = bootdev;	/* passed from pbr */
	p[0] = 'c';
	p[1] = 'f';
	p[2] = '\0';
}

char *
ttyname(int fd)
{
	return "scif";
}

dev_t
ttydev(char *name)
{
	return NODEV;
}

int
cnspeed(dev_t dev, int sp)
{
	scif_init(sp);
	return sp;
}

void
run_loadfile(u_long *marks, int howto)
{
	u_long entry;

	entry = marks[MARK_ENTRY];
	cache_flush();
	cache_disable();

	(*(void (*)(int,int,int))entry)(howto, marks[MARK_END], 0);
}

int
blkdevopen(struct open_file *f, ...)
{
	return 0;
}

int
blkdevstrategy(void *v, int flag, daddr32_t dblk, size_t size, void *buf, size_t *rsize)
{

	if (flag != F_READ)
		return EROFS;

	if (size & (DEV_BSIZE - 1))
		return EINVAL;

	if (rsize)
		*rsize = size;

	if (size != 0 && readsects(0x40, sector + dblk, buf,
	    size / DEV_BSIZE) != 0)
		return EIO;

	return 0;
}

int
blkdevclose(struct open_file *f)
{
	return 0;
}
@


1.9
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.8 2014/07/12 21:54:58 jasper Exp $	*/
d30 1
a30 2

	/* scif_init(9600); */
@


1.8
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.7 2011/03/13 00:13:53 deraadt Exp $	*/
a115 32
}

int pch_pos = 0;

void
putchar(int c)
{
	switch (c) {
	case '\177':	/* DEL erases */
		scif_putc('\b');
		scif_putc(' ');
	case '\b':
		scif_putc('\b');
		if (pch_pos)
			pch_pos--;
		break;
	case '\t':
		do
			scif_putc(' ');
		while (++pch_pos % 8);
		break;
	case '\n':
		scif_putc(c);
	case '\r':
		scif_putc('\r');
		pch_pos=0;
		break;
	default:
		scif_putc(c);
		pch_pos++;
		break;
	}
@


1.7
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.6 2006/11/16 23:12:56 deraadt Exp $	*/
a147 15
}

int
getchar(void)
{
	int c = scif_getc();

	if (c == '\r')
		c = '\n';

	if ((c < ' ' && c != '\n') || c == '\177')
		return c;

	putchar(c);
	return c;
@


1.6
log
@initialize tick timer
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.5 2006/10/29 14:53:45 drahn Exp $	*/
d93 1
a93 1
blkdevstrategy(void *v, int flag, daddr_t dblk, size_t size, void *buf, size_t *rsize)
@


1.5
log
@These printfs appear unnecessary now that the cache is disabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.4 2006/10/29 14:47:59 drahn Exp $	*/
d29 2
@


1.4
log
@Disable cache before jumping into the kernel, makes bootloader more reliable.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.3 2006/10/16 21:22:59 drahn Exp $	*/
a80 5
	printf("entry point at 0x%x\n", (int)entry);
	printf("start at  0x%x\n", (int)marks[MARK_START]);
	printf("NSYMS 0x%x\n", (int)marks[MARK_NSYM]);
	printf("SYM at 0x%x\n", (int)marks[MARK_SYM]);
	printf("END at 0x%x\n", (int)marks[MARK_END]);
@


1.3
log
@yes this looks like debug, however it allows the kernel to load. ???
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.2 2006/10/11 23:06:46 drahn Exp $	*/
d79 1
@


1.2
log
@flush the cache before jumping into the just loaded kernel.
Now it succesfully gets into the kernel 100%
@
text
@d1 1
a1 1
/*	$OpenBSD: devs.c,v 1.1 2006/10/06 21:48:50 mickey Exp $	*/
d81 4
@


1.1
log
@w/ help of netbsd srcs and some mother unzel made it lift off
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
@

