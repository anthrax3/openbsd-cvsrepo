head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.38
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.34
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.30
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.32
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.24
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.28
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.26
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.22
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.20
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.18
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.11
date	2008.07.21.04.35.54;	author todd;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.01.19.25.10;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.15.01.56.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.04.19.30.55;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.04.03.44.44;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.03.21.37.27;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.06.19.42.52;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.06.19.05.31;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.20.34.29;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.22.30.26;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.11
log
@nam2blk[] needs a "vnd" entry for some things (like softraid)
ok marco@@ no objection miod@@ need this for regress djm@@ no objection krw@@
@
text
@/*	$OpenBSD: autoconf.c,v 1.10 2008/06/26 05:42:11 ray Exp $	*/
/*	$NetBSD: autoconf.c,v 1.1 2006/09/01 21:26:18 uwe Exp $	*/

/*-
 * Copyright (c) 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/conf.h>
#include <sys/reboot.h>

#include <dev/cons.h>

#include <machine/cpu.h>
#include <machine/intr.h>

int cold = 1;

void
device_register(struct device *dev, void *aux)
{
}

void
cpu_configure(void)
{
	/* Start configuration */
	splhigh();
	softintr_init();
	intr_init();

	if (config_rootfound("mainbus", NULL) == NULL)
		panic("no mainbus found");

	/* Configuration is finished, turn on interrupts. */
	spl0();
	cold = 0;
}

void
diskconf(void)
{
	struct device *dv;
	dev_t tmpdev;

	dv = parsedisk("wd0a", strlen("wd0a"), 0, &tmpdev);
	setroot(dv, 0, RB_USERREQ);
	dumpconf();
}

struct nam2blk nam2blk[] = {
	{ "wd",		16 },
	{ "rd",		18 },
	{ "sd",		24 },
	{ "vnd",	19 },
	{ NULL,		-1 }
};
@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.9 2007/06/01 19:25:10 deraadt Exp $	*/
d80 1
@


1.9
log
@some architectures called setroot() from cpu_configure(), *way* before some
subsystems were enabled.  others used a *md_diskconf -> diskconf() method to
make sure init_main could "do late setroot".  Change all architectures to
have diskconf(), use it directly & late.  tested by todd and myself on most
architectures, ok miod too
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.9 2007/06/01 19:20:46 deraadt Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@kill __HAVE_DEVICE_REGISTER by requiring all architectures to have a
device_register() function -- even if it does nothing.  reduces the
cpp-based blather different between architectures
idea ok'd by miod; tested on all architectures (except a few miod will
need to cleanup because he has them)
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.7 2007/05/04 19:30:55 deraadt Exp $	*/
a50 2
void	diskconf(void);

a66 2
	md_diskconf = diskconf;

a68 1

@


1.7
log
@make findblkmajor() and findblkname() MI; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.6 2007/05/04 03:44:44 deraadt Exp $	*/
d52 5
@


1.6
log
@setroot() was a ugly mix of MI and MD code, with different bugs on different
machines.  Instead -- build one solid clean MI version, and thenchange all
the architectures to use it.  ok various people, tested on almost all cases.
(it is a 10094 line diff..)
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 2007/03/03 21:37:27 miod Exp $	*/
d83 1
a83 4
static struct {
	char	*name;
	int	maj;
} nam2blk[] = {
d86 2
a87 1
	{ "sd",		24 }
a88 23

int
findblkmajor(struct device *dv)
{
	char *name = dv->dv_xname;
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); i++)
		if (!strncmp(name, nam2blk[i].name, strlen(nam2blk[i].name)))
			return (nam2blk[i].maj);
	return (-1);
}

char *
findblkname(int maj)
{
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); i++)
		if (nam2blk[i].maj == maj)
			return (nam2blk[i].name);
	return (NULL);
}
@


1.5
log
@Kernel crash dumps and associated libkvm bits for landisk.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.4 2006/11/06 19:42:52 miod Exp $	*/
a50 3
struct device *booted_device;
struct device *root_device;

a51 5
struct device *parsedisk(char *, int, int, dev_t *);
void	setroot(void);
int	findblkmajor(struct device *);
char	*findblkname(int);
struct device *getdisk(char *, int, int, dev_t *);
d75 5
a79 3
	printf("boot device: %s\n",
	    booted_device ? booted_device->dv_xname : "<unknown>");
	setroot();
d83 3
a85 3
static	struct nam2blk {
	char *name;
	int  maj;
d87 3
a89 3
	{ "wd",	16 },
	{ "rd",	18 },
	{ "sd",	24 }
d98 2
a99 3
	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); ++i)
		if (strncmp(name, nam2blk[i].name, strlen(nam2blk[i].name)) ==
		    0)
d112 1
a112 258
	 return (NULL);
}

struct device *
getdisk(char *str, int len, int defpart, dev_t *devp)
{
	struct device *dv;

	if ((dv = parsedisk(str, len, defpart, devp)) == NULL) {
		printf("use one of:");
		TAILQ_FOREACH(dv, &alldevs, dv_list) {
			if (dv->dv_class == DV_DISK)
				printf(" %s[a-p]", dv->dv_xname);
#ifdef NFSCLIENT
			if (dv->dv_class == DV_IFNET)
				printf(" %s", dv->dv_xname);
#endif
		}
		printf(" halt\n");
	}
	return (dv);
}

struct device *
parsedisk(char *str, int len, int defpart, dev_t *devp)
{
	struct device *dv;
	char *cp, c;
	int majdev, part;

	if (len == 0)
		return (NULL);

	if (len == 4 && strcmp(str, "halt") == 0)
		boot(RB_HALT);

	cp = str + len - 1;
	c = *cp;
	if (c >= 'a' && (c - 'a') < MAXPARTITIONS) {
		part = c - 'a';
		*cp = '\0';
	} else
		part = defpart;

	TAILQ_FOREACH(dv, &alldevs, dv_list) {
		if (dv->dv_class == DV_DISK &&
		    strcmp(str, dv->dv_xname) == 0) {
			majdev = findblkmajor(dv);
			if (majdev < 0) {
				printf("%s is not a valid boot device\n", str);
				dv = NULL;
				break;
			}
			*devp = MAKEDISKDEV(majdev, dv->dv_unit, part);
			break;
		}
#ifdef NFSCLIENT
		if (dv->dv_class == DV_IFNET &&
		    strcmp(str, dv->dv_xname) == 0) {
			*devp = NODEV;
			break;
		}
#endif
	}

	*cp = c;
	return (dv);
}

/*
 * Attempt to find the device from which we were booted.
 * If we can do so, and not instructed not to do so,
 * change rootdev to correspond to the load device.
 */
void
setroot()
{
	int  majdev, mindev, unit, part, len;
	dev_t temp;
	struct swdevt *swp;
	struct device *dv;
	dev_t nrootdev, nswapdev = NODEV;
	char buf[128];
	int s;

#if defined(NFSCLIENT)
	extern char *nfsbootdevname;
#endif

	if (boothowto & RB_DFLTROOT)
		return;		/* Boot compiled in */

	if (booted_device == NULL && rootdev == NULL) {
		boothowto |= RB_ASKNAME; /* Don't Panic :-) */
		/* boothowto |= RB_SINGLE; */
	}

	if (boothowto & RB_ASKNAME) {
		for (;;) {
			printf("root device");
			if (booted_device != NULL) {
				 printf(" (default %s",
					booted_device->dv_xname);
				if (booted_device->dv_class == DV_DISK)
					printf("a");
				printf(")");
			}
			printf(": ");
			s = splhigh();
			cnpollc(1);
			len = getsn(buf, sizeof(buf));
			cnpollc(0);
			splx(s);
			if (len == 0 && booted_device != NULL) {
				strlcpy(buf, booted_device->dv_xname,
				    sizeof buf);
				len = strlen(buf);
			}
			if (len > 0 && buf[len - 1] == '*') {
				buf[--len] = '\0';
				dv = getdisk(buf, len, 1, &nrootdev);
				if (dv != NULL) {
					booted_device = dv;
					nswapdev = nrootdev;
					goto gotswap;
				}
			}
			dv = getdisk(buf, len, 0, &nrootdev);
			if (dv != NULL) {
				booted_device = dv;
				break;
			}
		}

		/*
		 * because swap must be on same device as root, for
		 * network devices this is easy.
		 */
		if (booted_device->dv_class == DV_IFNET)
			goto gotswap;

		for (;;) {
			printf("swap device");
			if (booted_device != NULL) {
				printf(" (default %s",
				    booted_device->dv_xname);
				if (booted_device->dv_class == DV_DISK)
					printf("b");
				printf(")");
			}
			printf(": ");
			s = splhigh();
			cnpollc(1);
			len = getsn(buf, sizeof(buf));
			cnpollc(0);
			splx(s);
			if (len == 0 && booted_device != NULL) {
				switch (booted_device->dv_class) {
				case DV_IFNET:
					nswapdev = NODEV;
					break;
				case DV_DISK:
					nswapdev = MAKEDISKDEV(major(nrootdev),
					    DISKUNIT(nrootdev), 1);
					break;
				case DV_TAPE:
				case DV_TTY:
				case DV_DULL:
				case DV_CPU:
					break;
				}
				break;
			}
			dv = getdisk(buf, len, 1, &nswapdev);
			if (dv) {
				if (dv->dv_class == DV_IFNET)
					nswapdev = NODEV;
				break;
			}
		}

gotswap:
		rootdev = nrootdev;
		dumpdev = nswapdev;
		swdevt[0].sw_dev = nswapdev;
		swdevt[1].sw_dev = NODEV;
	}
	else if(mountroot == NULL) {
		/*
		 * `swap generic'
		 */
		majdev = findblkmajor(booted_device);
		if (majdev >= 0) {
			/*
			 * Root and Swap are on disk.
			 * Boot is always from partition 0.
			 */
			rootdev = MAKEDISKDEV(majdev, booted_device->dv_unit, 0);
			nswapdev = dumpdev =
			    MAKEDISKDEV(majdev, booted_device->dv_unit, 1);
		} else {
			/*
			 *  Root and Swap are on net.
			 */
			nswapdev = dumpdev = NODEV;
		}
		swdevt[0].sw_dev = nswapdev;
		swdevt[1].sw_dev = NODEV;
	} else {
		/*
		 * `root DEV swap DEV': honour rootdev/swdevt.
		 * rootdev/swdevt/mountroot already properly set.
		 */
		return;
	}

	switch (booted_device->dv_class) {
#if defined(NFSCLIENT)
	case DV_IFNET:
		mountroot = nfs_mountroot;
		nfsbootdevname = booted_device->dv_xname;
		return;
#endif
	case DV_DISK:
		mountroot = dk_mountroot;
		majdev = major(rootdev);
		mindev = minor(rootdev);
		unit = DISKUNIT(rootdev);
		part = DISKPART(rootdev);
		printf("root on %s%c\n", booted_device->dv_xname, part + 'a');
		break;
	default:
		printf("can't figure root, hope your kernel is right\n");
		return;
	}

	/*
	 * Make the swap partition on the root drive the primary swap.
	 */
	temp = NODEV;
	for (swp = swdevt; swp->sw_dev != NODEV; swp++) {
		if (majdev == major(swp->sw_dev) &&
		    unit == DISKUNIT(swp->sw_dev)) {
			temp = swdevt[0].sw_dev;
			swdevt[0].sw_dev = swp->sw_dev;
			swp->sw_dev = temp;
			break;
		}
	}
	if (swp->sw_dev == NODEV)
		return;

	/*
	 * If dumpdev was the same as the old primary swap device, move
	 * it to the new primary swap device.
	 */
	if (temp == dumpdev)
		dumpdev = swdevt[0].sw_dev;
@


1.4
log
@Don't ask for root device if boot device is not known but root configuration
has been specified in the kernel configuration file.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.3 2006/11/06 19:05:31 miod Exp $	*/
d46 1
a54 3
#ifdef notyet
void	dumpconf(void);
#endif
a85 1
#ifdef notyet
a86 1
#endif
@


1.3
log
@Root device machinery. Boot device is still not known yet.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d215 1
a215 1
	if (booted_device == NULL) {
@


1.2
log
@Move towards winter.
@
text
@d1 1
d42 3
a44 6
#include <sys/malloc.h>
#include <sys/vnode.h>
#include <sys/fcntl.h>
#include <sys/disk.h>
#include <sys/dkio.h>
#include <sys/proc.h>
a45 1
#include <machine/bootinfo.h>
d49 1
d51 1
a51 1
int booted_partition;
d53 9
a61 3
void findroot(void);
int is_valid_disk(struct device *dv);
int match_bootdisk(struct device *dv, struct btinfo_bootdisk *bid);
d74 2
d82 20
d103 14
a116 1
is_valid_disk(struct device *dv)
d118 7
a124 1
	const char *name;
d126 4
a129 4
	if (dv->dv_class != DV_DISK)
		return (0);
	
	name = dv->dv_cfdata->cf_driver->cd_name;
d131 13
a143 1
	return (strcmp(name, "sd") == 0 || strcmp(name, "wd") == 0);
d146 2
a147 6
/*
 * Helper function for findroot():
 * Return non-zero if disk device matches bootinfo.
 */
int
match_bootdisk(struct device *dv, struct btinfo_bootdisk *bid)
d149 3
a151 5
	struct vnode *tmpvn;
	int error;
	struct disklabel label;
	int found = 0;
	int bmajor;
d153 2
a154 7
	/*
	 * A disklabel is required here.  The boot loader doesn't refuse
	 * to boot from a disk without a label, but this is normally not
	 * wanted.
	 */
	if (bid->labelsector == -1)
		return (0);
d156 2
a157 8
#if 0
	/*
	 * Lookup major number for disk block device.
	 */
	bmajor = devsw_name2blk(dv->dv_xname, NULL, 0);
	if (bmajor == -1)
		return (0);	/* XXX panic ??? */
#endif
d159 26
a184 14
	/*
	 * Fake a temporary vnode for the disk, open it, and read
	 * the disklabel for comparison.
	 */
	if (bdevvp(MAKEDISKDEV(bmajor, dv->dv_unit, RAW_PART), &tmpvn))
		panic("match_bootdisk: can't alloc vnode");
	error = VOP_OPEN(tmpvn, FREAD, NOCRED, 0);
	if (error) {
#ifndef DEBUG
		/*
		 * Ignore errors caused by missing device, partition,
		 * or medium.
		 */
		if (error != ENXIO && error != ENODEV)
a185 14
			printf("match_bootdisk: can't open dev %s (%d)\n",
			    dv->dv_xname, error);
		vput(tmpvn);
		return (0);
	}
	error = VOP_IOCTL(tmpvn, DIOCGDINFO, &label, FREAD, NOCRED, 0);
	if (error) {
		/*
		 * XXX Can't happen -- open() would have errored out
		 * or faked one up.
		 */
		printf("match_bootdisk: can't get label for dev %s (%d)\n",
		    dv->dv_xname, error);
		goto closeout;
d188 2
a189 10
	/* Compare with our data. */
	if (label.d_type == bid->label.type &&
	    label.d_checksum == bid->label.checksum &&
	    strncmp(label.d_packname, bid->label.packname, 16) == 0)
	    	found = 1;

closeout:
	VOP_CLOSE(tmpvn, FREAD, NOCRED, 0);
	vput(tmpvn);
	return (found);
d193 3
a195 3
 * Attempt to find the device from which we were booted.  If we can do so,
 * and not instructed not to do so, change rootdev to correspond to the
 * load device.
d198 1
a198 1
findroot(void)
d200 3
a202 1
	struct btinfo_bootdisk *bid;
d204 10
d215 41
a255 2
	if (booted_device)
		return;
a256 1
	if ((bid = lookup_bootinfo(BTINFO_BOOTDISK)) != NULL) {
d258 2
a259 5
		 * Scan all disk devices for ones that match the passed data.
		 * Don't break if one is found, to get possible multiple
		 * matches - for problem tracking.  Use the first match anyway
		 * because lower device numbers are more likely to be the
		 * boot device.
d261 2
a262 4
		for (dv = TAILQ_FIRST(&alldevs); dv != NULL;
		     dv = TAILQ_NEXT(dv, dv_list)) {
			if (dv->dv_class != DV_DISK)
				continue;
d264 8
a271 4
			if (is_valid_disk(dv)) {
				if (match_bootdisk(dv, bid) == 0)
				    	continue;
				goto bootdisk_found;
d273 28
a300 8
			continue;

bootdisk_found:
			if (booted_device) {
				printf("WARNING: double match for boot "
				    "device (%s, %s)\n",
				    booted_device->dv_xname, dv->dv_xname);
				continue;
a301 2
			booted_device = dv;
			booted_partition = bid->partition;
d304 33
a336 2
		if (booted_device)
			return;
a337 1
}
d339 19
a357 4
#if 0
void
cpu_rootconf(void)
{
d359 15
a373 1
	findroot();
d375 6
a380 3
	printf("boot device: %s\n",
	    booted_device ? booted_device->dv_xname : "<unknown>");
	/* setroot(booted_device, booted_partition); */
a381 1
#endif
@


1.1
log
@few more files
@
text
@d51 1
a51 1
int cold;
d72 2
@

