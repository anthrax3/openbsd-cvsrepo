head	1.14;
access;
symbols
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	UBC_SYNC_A:1.14
	UBC_SYNC_B:1.14
	SMP:1.14.0.2
	pica_1:1.1.1.1;
locks; strict;
comment	@# @;


1.14
date	96.08.30.21.31.48;	author pefo;	state dead;
branches;
next	1.13;

1.13
date	96.06.06.23.03.19;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.05.30.14.38.12;	author pefo;	state Exp;
branches;
next	1.11;

1.11
date	96.05.18.12.07.24;	author pefo;	state Exp;
branches;
next	1.10;

1.10
date	96.05.15.08.08.28;	author pefo;	state Exp;
branches;
next	1.9;

1.9
date	96.05.15.07.09.08;	author pefo;	state Exp;
branches;
next	1.8;

1.8
date	96.05.02.07.59.35;	author pefo;	state Exp;
branches;
next	1.7;

1.7
date	96.04.24.12.05.23;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.03.26.15.09.52;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.01.15.20.05.00;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	95.10.30.13.38.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.10.28.23.25.47;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.22.07.00.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.39.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.39.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@The pica tree is now obsolete and removed. Use arch/arc.
@
text
@#	$NetBSD: Makefile.pica,v 1.15 1995/06/24 20:46:54 christos Exp $

#	@@(#)Makefile.pica	8.2 (Berkeley) 2/16/94
#
# Makefile for 4.4 BSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/MACHINE/conf/``machineid''
# after which you should do
#	 config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/MACHINE/conf/Makefile.``machinetype''
# after which config should be rerun for all machines of that type.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas


# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).
AS?=	as
CC?=	cc
CPP?=	cpp
LD=	ld.ok			# XXX TEMPORARY
STRIP?=	strip -d
TOUCH?=	touch -f -c

# source tree is located via $S relative to the compilation directory
S=	../../../..
PICA=	../..

INCLUDES=	-I. -I$S/arch -I$S
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Dpica
CFLAGS=		${DEBUG} -O2 -Werror -mno-abicalls -mips2 -mcpu=r4000
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE

### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.

USRLAND_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
USRLAND_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<
NORMAL_S_C=	${AS}  ${COPTS} ${PARAM} $< -o $@@

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}

SYSTEM_OBJ=	locore.o fp.o ${OBJS} param.o ioconf.o ${LIBKERN} \
		${LIBCOMPAT}
#
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	rm -f $@@
SYSTEM_LD=	-@@if [ X${DEBUG} = X-g ]; \
		then strip=-X; \
		else strip=-x; \
		fi; \
		echo ${LD} $$strip -N -o $@@ -e start -Ttext 80080000 \
			'$${SYSTEM_OBJ}' vers.o; \
		${LD} $$strip -N -o $@@ -e start -Ttext 80080000 \
			${SYSTEM_OBJ} vers.o
#
SYSTEM_LD_TAIL=	chmod 755 $@@; \
		elf2ecoff $@@ $@@.ecoff; \
		size $@@

%LOAD

newvers:
	sh $S/conf/newvers.sh
	${CC} $(CFLAGS) -c vers.c

clean::
	rm -f eddep bsd bsd.gdb tags *.o locore.i [a-z]*.s \
	    Errs errs linterrs makelinks genassym

lint: /tmp param.c
	@@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} ${PARAM} -UKGDB \
	    ${PICA}/pica/Locore.c ${CFILES} ${PICA}/pica/swapgeneric.c \
	    ioconf.c param.c

symbols.sort: ${PICA}/pica/symbols.raw
	grep -v '^#' ${PICA}/pica/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

locore.o: ${PICA}/pica/locore.S ${PICA}/include/asm.h \
	${PICA}/include/cpu.h ${PICA}/include/reg.h assym.h
	${NORMAL_S} -mips3 ${PICA}/pica/locore.S

fp.o: ${PICA}/pica/fp.S ${PICA}/include/asm.h \
	${PICA}/include/cpu.h ${PICA}/include/reg.h assym.h
	${NORMAL_S} -mips3 ${PICA}/pica/fp.S

# the following are necessary because the files depend on the types of
# cpu's included in the system configuration
clock.o machdep.o autoconf.o conf.o: Makefile

# depend on network configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if_tun.o if_loop.o if_ethersubr.o: Makefile
in_proto.o: Makefile

assym.h: genassym
	./genassym >assym.h

genassym: genassym.o
	${CC} -o $@@ genassym.o

genassym.o: ${PICA}/pica/genassym.c
	${CC} ${INCLUDES} ${IDENT} -D_KERNEL -Dpica -c $<

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

tags:
	@@echo "see $S/kern/Makefile for tags"

ioconf.o: ioconf.c
	${NORMAL_C}

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C_C}

newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

depend:: .depend
.depend: ${SRCS} assym.h param.c
	mkdep ${AFLAGS} ${CPPFLAGS} ${PICA}/pica/locore.s
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
	mkdep -a ${CFLAGS} ${CPPFLAGS} ${PARAM} ${PICA}/pica/genassym.c

%RULES

@


1.13
log
@compile genassym non-kernel, asm.h/cpu.h instead of mach*.h, still using ld.ok
@
text
@@


1.12
log
@A few small changes.
@
text
@d26 6
a31 1
TOUCH=	touch -f -c
a36 2
LD=ld.ok

d39 1
a39 1
CFLAGS=         ${DEBUG} -O2 -Werror -mno-abicalls -mips2 -mcpu=r4000
d63 2
a64 2
USRLAND_C=	${CC} ${CFLAGS} -mabicalls ${CPPFLAGS} ${PROF} -c $<
USRLAND_C_C=	${CC} ${CFLAGS} -mabicalls ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d102 1
a102 1
		elf2ecoff ${@@} ${@@}.ecoff; \
d124 2
a125 2
locore.o: ${PICA}/pica/locore.S ${PICA}/include/machAsmDefs.h \
	${PICA}/include/machConst.h ${PICA}/include/reg.h assym.h
d128 2
a129 2
fp.o: ${PICA}/pica/fp.S ${PICA}/include/machAsmDefs.h \
	${PICA}/include/machConst.h ${PICA}/include/reg.h assym.h
d148 1
a148 1
	${USRLAND_C_C}
@


1.11
log
@a.out kernel build removed. mips is now ELF only. (boot image still ecoff though)
@
text
@d76 2
a128 3
# the following is necessary because autoconf.o depends on #if GENERIC
autoconf.o: Makefile

a146 4
depend: assym.h param.c
	mkdep ${COPTS} ${CFILES} ioconf.c param.c
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM} ${PICA}/pica/genassym.c

d171 7
@


1.10
log
@Some cc flags given to cpp, not nice...
@
text
@d84 1
a84 1
#SYSTEM_DEP=	Makefile symbols.sort ${SYSTEM_OBJ} ${LIBKERN}
d95 4
a98 10
#SYSTEM_LD_TAIL= @@echo rearranging symbols;\
#		symorder symbols.sort $@@;\
#SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@; \
#		[ X${DEBUG} = X-g ] && { \
#		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
#		echo strip -d $@@; strip -d $@@; } || true
SYSTEM_LD_TAIL=	mv $@@ ${@@}.elf; \
		elf2aout ${@@}.elf $@@; \
		chmod 755 $@@; \
		elf2ecoff ${@@}.elf ${@@}.ecoff
@


1.9
log
@Catchup of interface changes + prototyping.
@
text
@d35 2
a36 3
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Dpica -D__NetBSD__ ${GP} \
		-mips2 -mcpu=r4000
CFLAGS=         ${DEBUG} -O2 -Werror -mno-abicalls
@


1.8
log
@Updated for new config etc.
@
text
@d37 1
a37 1
CFLAGS=         ${DEBUG} -O2 -Werror
d61 3
d149 5
a153 2
genassym: ${PICA}/pica/genassym.c
	${NORMAL_C_C}
@


1.7
log
@Add network config dependencies.
@
text
@d32 1
a32 1
LD=ld.kern
d34 5
a38 9
INCLUDES= -I. -I$S/arch -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL -Dpica -D__NetBSD__ ${GP} \
	-mips2 -mcpu=r4000
CPPOPTS=${INCLUDES} ${IDENT} -D_KERNEL -Dpica -D__NetBSD__
.ifdef DEBUG 
CFLAGS=	${DEBUG} ${COPTS}
.else
CFLAGS= -O2 ${COPTS}
.endif
d61 2
a62 5
NORMAL_C=	${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<

DRIVER_C=	${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
d64 2
a65 1
PROFILE_C=	${CC} -p -c ${COPTS} $<
d67 1
a67 1
NORMAL_S=	${AS} ${COPTS} $< -o $@@
d79 1
d125 1
a125 1
	${CC} -c ${COPTS} ${PARAM} -DLOCORE -mips3 ${PICA}/pica/locore.S
d129 1
a129 1
	${CC} -c ${COPTS} ${PARAM} -DLOCORE ${PICA}/pica/fp.S
d147 1
a147 1
	${CC} ${INCLUDES} ${IDENT} ${PARAM} -o genassym ${PICA}/pica/genassym.c
d165 1
a165 1
	${CC} -c ${CFLAGS} ioconf.c
d172 1
a172 1
	${CC} -c ${CFLAGS} ${PARAM} param.c
d174 1
a174 1
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
d176 1
a176 1
	${CC} ${CFLAGS} -c vers.c
a178 2


@


1.6
log
@From NetBSD: vnode_if.[ch] made machine independent.
very usefull (for <sys/vnode.h> inclusion).
from the other side this is really machine independent ...
tested w/ i386, but should not cause errors w/ other arch's.
pls, test it (don't forget to reconfig kernel ;)
@
text
@d144 3
a146 1
uipc_proto.o vfs_conf.o: Makefile
@


1.5
log
@Remove vnode_if.[ch] during a "make clean", per PR#536 from
Dan Carosone <danielce@@ee.mu.oz.au>.
@
text
@d85 1
a85 1
SYSTEM_OBJ=	locore.o fp.o vnode_if.o ${OBJS} param.o ioconf.o ${LIBKERN} \
d117 1
a117 1
	    vnode_if.[ch] Errs errs linterrs makelinks genassym
d152 1
a152 1
depend: assym.h param.c vnode_if.h
a179 5

vnode_if.c: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
@


1.4
log
@locore.s has mips3 code in it (for speed)
@
text
@d117 1
a117 1
		Errs errs linterrs makelinks genassym
@


1.3
log
@use ld.kern (XXX)
don't try to link ${LIBKERN} into the kernel twice
@
text
@d130 1
a130 1
	${CC} -c ${COPTS} ${PARAM} -DLOCORE ${PICA}/pica/locore.S
@


1.2
log
@kernel is called /bsd
@
text
@d32 2
d95 1
a95 1
			'$${SYSTEM_OBJ}' vers.o $(LIBKERN); \
d97 1
a97 1
			${SYSTEM_OBJ} vers.o $(LIBKERN)
@


1.1
log
@Initial revision
@
text
@d114 1
a114 1
	rm -f eddep *vmunix vmunix.gdb tags *.o locore.i [a-z]*.s \
@


1.1.1.1
log
@initial import of pica stuff (a few theo modifications already in here) 
@
text
@@
