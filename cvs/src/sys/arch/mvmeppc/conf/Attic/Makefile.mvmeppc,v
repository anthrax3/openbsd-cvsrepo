head	1.59;
access;
symbols
	OPENBSD_4_9:1.56.0.2
	OPENBSD_4_9_BASE:1.56
	OPENBSD_4_8:1.53.0.2
	OPENBSD_4_8_BASE:1.53
	OPENBSD_4_7:1.31.0.2
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.28.0.6
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.2
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.27.0.2
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.26.0.2
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.23.0.2
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.22.0.4
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.2
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.20.0.4
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.19.0.2
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.18.0.4
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.9
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.59
date	2011.07.07.19.16.42;	author deraadt;	state dead;
branches;
next	1.58;

1.58
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.57;

1.57
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.56;

1.56
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2010.12.02.04.35.03;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2010.06.01.23.49.23;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.51;

1.51
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.43;

1.43
date	2010.04.27.16.54.54;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2010.04.27.16.50.15;	author jsg;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2010.04.27.05.08.30;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2010.04.27.04.31.47;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2010.04.27.03.37.38;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2010.04.26.22.11.38;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2010.04.26.20.50.17;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2009.08.09.21.33.39;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.27;

1.27
date	2008.04.12.21.04.17;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2007.11.25.18.25.29;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.22;

1.22
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.01.21.46.27;	author pascoe;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.07.19.04.00;	author ian;	state Exp;
branches;
next	1.19;

1.19
date	2004.11.19.06.41.14;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.26.06.54.09;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.23.10.40.25;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.24.17.35.13;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.23.22.16.16;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.13.22.45.11;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.13.06.12.44;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.25.21.10.26;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.02.09.00.25;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.09.20.24.43;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.08.23.30.22;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.03.20.37.16;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.08.49.45;	author miod;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.07.15.13.10.49;	author assar;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.06.05.14.29;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.06.00.38.19;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.21.57.38;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.03.01.20;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.06.02.04.45;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.03.27.23.52.16;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.05.16.00.29.39;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.06.07.11.13.18;	author ho;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2004.02.19.10.49.09;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.01.31.22.55.20;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.06.11.03.37.22;	author art;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2002.10.29.00.28.08;	author art;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2003.05.19.21.49.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.59
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@#	$OpenBSD: Makefile.mvmeppc,v 1.58 2011/07/06 02:08:05 tedu Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

MKDEP?=	mkdep
SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I. -I$S -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-main -Wno-uninitialized -Wno-format \
		-Wstack-larger-than-2047

CMACHFLAGS=	-msoft-float -Wa,-m7400
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc 
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE ${CMACHFLAGS}
LINKFLAGS=	-N -Ttext 100114 -e start --warn-common

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S -x
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.S assym.h
mutex.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
.  endif
. endfor
.endif

%RULES
@


1.58
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.57 2011/04/15 02:41:28 guenther Exp $
@


1.57
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.56 2010/12/30 18:49:31 deraadt Exp $
d122 1
a122 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.56
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.55 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d71 2
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d92 5
d100 2
a101 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d130 3
a135 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d137 1
a137 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d154 12
@


1.55
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.54 2010/12/02 04:35:03 deraadt Exp $
d94 2
a95 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.54
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.53 2010/06/01 23:49:23 deraadt Exp $
d70 2
a71 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.53
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.52 2010/05/28 14:27:08 guenther Exp $
d70 1
a70 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.52
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.51 2010/05/25 17:27:55 deraadt Exp $
a42 1
STRIPFLAGS=	-g -x
d80 1
@


1.51
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.50 2010/05/25 15:05:01 deraadt Exp $
d94 1
a94 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.50
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.49 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		mvmeppc
_arch?=		powerpc
@


1.49
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.48 2010/05/24 23:19:22 deraadt Exp $
d149 1
a149 1
	${NORMAL_S}
@


1.48
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.47 2010/05/24 17:49:37 deraadt Exp $
a129 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d131 1
a131 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.47
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.46 2010/05/24 14:59:16 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d45 1
a45 1
STRIPFLAGS=	-g -X -x
d119 1
a119 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d129 2
a130 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
d133 1
a133 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.S
@


1.46
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.45 2010/04/28 15:31:33 deraadt Exp $
d143 1
a143 1
.if ${SFILES} != ""
@


1.45
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.44 2010/04/27 17:25:19 drahn Exp $
d14 1
a15 1
SIZE?=	size
d18 1
a18 1
.ifndef	S
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${_mach}__
d30 1
a30 1
		-Wno-uninitialized -Wno-format -Wno-main \
d32 5
a36 2
CMACHFLAGS=	-msoft-float -Wa,-m7400 -fno-builtin-printf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc
d40 1
d43 1
a43 1
AFLAGS=		-D_LOCORE
d56 1
a56 5

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a59 2
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

a60 1
NORMAL_S_C=	${AS}  ${COPTS} ${PARAM} $< -o $@@
d75 1
a75 1
SYSTEM_LD_HEAD=	rm -f $@@
d105 1
a105 1
	${NORMAL_C_C}
d118 1
a118 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d122 3
a124 3
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB ${CFILES} \
		ioconf.c param.c | \
		grep -v 'static function .* unused'
@


1.44
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.43 2010/04/27 16:54:54 deraadt Exp $
d54 1
a54 1
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
a61 3
DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

a64 1

d138 1
a138 1
	sh makelinks && rm -f dontlink
@


1.43
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.42 2010/04/27 16:50:15 jsg Exp $
d27 1
a27 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.42
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.41 2010/04/27 06:46:26 deraadt Exp $
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL \
		-D__mvmeppc__
@


1.41
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.40 2010/04/27 05:08:30 deraadt Exp $
d33 2
a34 1
CMACHFLAGS=	-msoft-float -Wa,-m7400 -fno-builtin-printf -fno-builtin-log
@


1.40
log
@No need for a specific .SUFFIXES list; ok drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.39 2010/04/27 05:07:29 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/powerpc/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/powerpc/conf/Makefile.powerpc
# after which config should be rerun for all machines of that type.
@


1.39
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.38 2010/04/27 05:05:21 deraadt Exp $
a18 2

.SUFFIXES:	.S .c .o
@


1.38
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.37 2010/04/27 04:31:47 deraadt Exp $
a14 5
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas
#

@


1.37
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.36 2010/04/27 03:37:38 deraadt Exp $
d158 1
a158 1
SRCS=	${_machdir}/mvmeppc/locore.S \
d162 1
a162 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/mvmeppc/locore.S
d178 1
a178 1
locore.o: ${_machdir}/mvmeppc/locore.S assym.h
@


1.36
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.35 2010/04/26 22:21:15 deraadt Exp $
d168 1
a168 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.35
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.34 2010/04/26 22:11:38 deraadt Exp $
a177 13

# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
genassym.o machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile

@


1.34
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.33 2010/04/26 20:50:17 deraadt Exp $
a36 1
_machdir?=	$S/arch/mvmeppc
d38 2
a39 1
_archdir?=	$S/arch/powerpc
@


1.33
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.32 2010/04/26 18:58:30 deraadt Exp $
d114 5
a118 3
assym.h: $S/kern/genassym.sh ${_machdir}/mvmeppc/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    < ${_machdir}/mvmeppc/genassym.cf > assym.h.tmp && \
d167 3
a169 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/mvmeppc/genassym.cf
@


1.32
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.31 2009/10/19 19:46:56 guenther Exp $
d35 5
a39 1
MVMEPPC=	$S/arch/mvmeppc
d114 1
a114 1
assym.h: $S/kern/genassym.sh ${MVMEPPC}/mvmeppc/genassym.cf Makefile
d116 1
a116 1
	    < ${MVMEPPC}/mvmeppc/genassym.cf > assym.h.tmp && \
d156 1
a156 1
SRCS=	${MVMEPPC}/mvmeppc/locore.S \
d160 1
a160 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${MVMEPPC}/mvmeppc/locore.S
d166 1
a166 1
	    ${CPPFLAGS} < ${MVMEPPC}/mvmeppc/genassym.cf
d189 1
a189 1
locore.o: ${MVMEPPC}/mvmeppc/locore.S assym.h
@


1.31
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 2
a2 4
#	$OpenBSD: Makefile.mvmeppc,v 1.30 2009/08/09 23:04:49 miod Exp $
#
# Makefile for OpenBSD PowerPC
#
a18 1
.SUFFIXES:	.S .c .o
d20 2
a21 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d24 2
@


1.30
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.29 2009/08/09 21:33:39 miod Exp $
d129 1
a129 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.29
log
@No need to clean genassym{.,o} during `make clean', genassym.sh does this
for us.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.28 2009/01/11 21:02:03 pirofti Exp $
d54 6
d135 1
a135 1
		[Ee]rrs linterrs makelinks assym.h
d156 1
a156 1
.depend: ${SRCS} assym.h param.c
d167 5
@


1.28
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.27 2008/04/12 21:04:17 miod Exp $
d129 1
a129 1
		[Ee]rrs linterrs makelinks genassym genassym.o assym.h
@


1.27
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.26 2007/11/30 07:52:06 miod Exp $
d158 2
a159 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.26
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.25 2007/11/25 18:25:29 deraadt Exp $
d43 1
a43 1
		-Wstack-larger-than-2047
@


1.25
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.24 2007/11/25 11:23:33 deraadt Exp $
d63 1
a63 3
USRLAND_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
USRLAND_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

@


1.24
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.23 2007/07/30 16:23:33 thib Exp $
a57 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d87 1
a87 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d118 3
@


1.23
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.22 2006/07/27 05:58:11 miod Exp $
a65 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d95 1
a95 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.22
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.21 2006/06/01 21:46:27 pascoe Exp $
d38 1
a38 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
@


1.21
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.20 2005/04/07 19:04:00 ian Exp $
d42 2
a43 1
		-Wno-uninitialized -Wno-format -Wno-main
@


1.20
log
@Remove spurious -L for /usr/include in INCLUDES defn. ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.19 2004/11/19 06:41:14 miod Exp $
d113 3
a115 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.19
log
@More aggressive strip flags for non debug kernels; this is a noop on some
architectures, but saves a few dozen KB on alpha and ppc.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.18 2004/01/26 06:54:09 miod Exp $
d38 1
a38 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc -L${DESTDIR}/usr/include
@


1.18
log
@Bump load address, same as done on macppc last year.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.17 2004/01/23 10:40:25 miod Exp $
d116 1
a116 1
LINKFLAGS+=	-S
@


1.17
log
@Sync options and defines with other ppc ports.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.16 2003/11/24 17:35:13 espie Exp $
d50 1
a50 1
LINKFLAGS=	-N -Ttext 100074 -e start --warn-common
@


1.16
log
@-fno-builtin. okay dale `mvmeppc doesn't exist' rahn.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.15 2003/07/22 19:39:50 otto Exp $
d36 1
a36 1
PPC=	$S/arch/mvmeppc
d40 1
a40 1
		-Dpowerpc -D__mvmeppc__
d50 1
a50 1
LINKFLAGS=	-N -Ttext 100074 -e start
d121 1
a121 1
assym.h: $S/kern/genassym.sh ${PPC}/mvmeppc/genassym.cf Makefile
d123 1
a123 1
	    < ${PPC}/mvmeppc/genassym.cf > assym.h.tmp && \
d145 1
a145 2
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB \
		${PPC}/mvmeppc/Locore.c \
d160 1
a160 1
SRCS=	${PPC}/mvmeppc/locore.S \
d164 1
a164 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${PPC}/mvmeppc/locore.S
d170 1
a170 1
	    ${CPPFLAGS} < ${PPC}/mvmeppc/genassym.cf
d187 1
a187 1
locore.o: ${PPC}/mvmeppc/locore.S assym.h
@


1.15
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.14 2003/05/23 22:16:16 tedu Exp $
d43 1
a43 1
CMACHFLAGS=	-msoft-float -Wa,-m7400
@


1.14
log
@move swapgeneric to truly generic code.  tested on many archs by miod and mickey.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.13 2003/05/13 22:45:11 miod Exp $
d170 4
@


1.13
log
@Add option NO_PROPOLICE, which explicitely disables the use of the propolice
stack protection when building kernels. Intended to be used on installation
media, with tight space constraints - currently, only added where
SMALL_KERNEL was already defined.

Not thoroughly tested, but requested by deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.12 2003/05/13 06:12:44 tedu Exp $
d146 1
a146 1
		${PPC}/mvmeppc/Locore.c ${CFILES} ${PPC}/mvmeppc/swapgeneric.c \
@


1.12
log
@remove -fno-stack-protector (enable propolice)
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.11 2002/12/25 21:10:26 miod Exp $
d44 3
@


1.11
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.10 2002/12/02 09:00:25 miod Exp $
d43 1
a43 1
CMACHFLAGS=	-msoft-float -Wa,-m7400 -fno-stack-protector
@


1.10
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.9 2002/08/09 20:24:43 miod Exp $
a27 4
AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
@


1.9
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.8 2002/06/22 14:05:51 millert Exp $
d47 1
a47 1
CMACHFLAGS=	-msoft-float -Wa,-m7400
@


1.8
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.7 2002/06/08 23:30:22 miod Exp $
d122 1
a122 1
assym.h: $S/kern/genassym.sh ${PPC}/mvmeppc/genassym.cf
@


1.7
log
@compile with -Wall -Werror -Whatever
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.6 2002/01/03 20:37:16 miod Exp $
d49 1
a49 1
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS}
@


1.6
log
@Use STRIPFLAGS=-g -X -x rather than =-d on all ELF arches.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.5 2001/08/21 08:49:45 miod Exp $
d45 5
a49 2
CWARNFLAGS=	-Werror -Wreturn-type
CFLAGS=		${DEBUG} ${CWARNFLAGS} -O2 -msoft-float
@


1.5
log
@Get libkern to compile.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.4 2001/07/15 13:10:49 assar Exp $
d49 1
a49 1
STRIPFLAGS=	-d
@


1.5.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.6 2002/01/03 20:37:16 miod Exp $
d49 1
a49 1
STRIPFLAGS=	-g -X -x
@


1.5.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.5.4.1 2002/01/31 22:55:20 niklas Exp $
d45 2
a46 5
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main
CMACHFLAGS=	-msoft-float -Wa,-m7400
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS}
@


1.5.4.3
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.5.4.2 2002/06/11 03:37:22 art Exp $
d49 1
a49 1
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d122 1
a122 1
assym.h: $S/kern/genassym.sh ${PPC}/mvmeppc/genassym.cf Makefile
@


1.5.4.4
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d28 4
a47 3
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
@


1.4
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.3 2001/07/06 05:14:29 smurph Exp $
d37 4
a40 5
#.ifndef	S
#S!=	cd ../../../..; pwd
#.endif
S=	../../../..
PPC=	../..
@


1.3
log
@resolve compile problems
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.1 2001/06/26 21:57:38 smurph Exp $
d26 2
d185 12
@


1.2
log
@misc fixes
@
text
@a115 3
bsd.rd: bsd
	echo cp $@@ $@@.rd; ./rdsetroot bsd.rd < mr.fs;
	
@


1.1
log
@Initial import of mvmeppc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.powerpc,v 1.9 2000/10/20 20:54:26 deraadt Exp $
d43 1
a43 1
		-Dpowerpc -Dmvmeppc
d116 3
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.1 2001/06/26 21:57:38 smurph Exp $
a25 2
.include <bsd.own.mk>

d35 5
a39 4
.ifndef	S
S!=	cd ../../../..; pwd
.endif
PPC=	$S/arch/mvmeppc
d43 1
a43 1
		-Dpowerpc -D__mvmeppc__
a182 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.1.2.2
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
d49 1
a49 1
STRIPFLAGS=	-g -X -x
@


1.1.2.3
log
@Sync the SMP branch with 3.3
@
text
@d28 4
d45 2
a46 5
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main
CMACHFLAGS=	-msoft-float -Wa,-m7400 -fno-stack-protector
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d119 1
a119 1
assym.h: $S/kern/genassym.sh ${PPC}/mvmeppc/genassym.cf Makefile
@


1.1.2.4
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d43 1
a43 4
CMACHFLAGS=	-msoft-float -Wa,-m7400
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
@


1.1.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvmeppc,v 1.1.2.4 2003/05/16 00:29:39 niklas Exp $
d146 1
a146 1
		${PPC}/mvmeppc/Locore.c \
@


1.1.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
d36 1
a36 1
MVMEPPC=	$S/arch/mvmeppc
d40 1
a40 1
		-D__mvmeppc__
d43 1
a43 1
CMACHFLAGS=	-msoft-float -Wa,-m7400 -fno-builtin-printf -fno-builtin-log
d50 1
a50 1
LINKFLAGS=	-N -Ttext 100114 -e start --warn-common
d121 1
a121 1
assym.h: $S/kern/genassym.sh ${MVMEPPC}/mvmeppc/genassym.cf Makefile
d123 1
a123 1
	    < ${MVMEPPC}/mvmeppc/genassym.cf > assym.h.tmp && \
d145 2
a146 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB ${CFILES} \
d161 1
a161 1
SRCS=	${MVMEPPC}/mvmeppc/locore.S \
d165 1
a165 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${MVMEPPC}/mvmeppc/locore.S
a169 4
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${MVMEPPC}/mvmeppc/genassym.cf
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
	@@rm -f assym.dep
d184 1
a184 1
locore.o: ${MVMEPPC}/mvmeppc/locore.S assym.h
@


