head	1.3;
access;
symbols
	OPENBSD_4_9:1.2.0.42
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.40
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.36
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.38
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.34
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.32
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.30
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.28
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.26
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.24
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.22
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.20
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.18
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.16
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.14
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.12
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2011.07.07.19.16.43;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2001.09.02.19.40.24;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.21.57.47;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.03.01.21;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.30.00.42.37;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@/*	$OpenBSD: pio.h,v 1.2 2001/09/02 19:40:24 miod Exp $	*/

#include <powerpc/pio.h>
@


1.2
log
@Convert mvmeppc to use common powerpc parts.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Initial import of mvmeppc.
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.4 1999/11/09 04:13:54 rahnds Exp $ */
d3 1
a3 193
/*
 * Copyright (c) 1997 Per Fogelstrom, Opsycon AB and RTMX Inc, USA.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom Opsycon AB for RTMX Inc, North Carolina, USA.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _MACHINE_PIO_H_
#define _MACHINE_PIO_H_
/*
 * I/O macros.
 */
void *mapiodev(paddr_t pa, psize_t len);

static __inline void
__outb(a,v)
	volatile u_int8_t *a;
	int v;
{
	*a = v;
	__asm__ volatile("eieio");
}

static __inline void
__outw(a,v)
	volatile u_int16_t *a;
	u_int16_t v;
{
	*a = v;
	__asm__ volatile("eieio");
}

static __inline void
__outl(a,v)
	volatile u_int32_t *a;
	int v;
{
	*a = v;
	__asm__ volatile("eieio");
}

static __inline void
__outwrb(a,v)
	volatile u_int16_t *a;
	u_int16_t v;
{
	u_int32_t _p_ = (u_int32_t)a;

	__asm__ volatile("sthbrx %0, 0, %1" :: "r"(v), "r"(_p_));
	__asm__ volatile("eieio");
}

static __inline void
__outlrb(a,v)
	volatile u_int32_t *a;
	u_int32_t v;
{
	u_int32_t _p_ = (u_int32_t)a;

	__asm__ volatile("stwbrx %0, 0, %1" :: "r"(v), "r"(_p_));
	__asm__ volatile("eieio");
}

static __inline u_int8_t
__inb(a)
	volatile u_int8_t *a;
{
	u_int8_t _v_;

	__asm__ volatile("eieio");
	_v_ = *a;
	return _v_;
}

static __inline u_int16_t
__inw(a)
	volatile u_int16_t *a;
{
	u_int16_t _v_;

	__asm__ volatile("eieio");
	_v_ = *a;
	return _v_;
}

static __inline u_int32_t
__inl(a)
	volatile u_int32_t *a;
{
	u_int32_t _v_;

	__asm__ volatile("eieio");
	_v_ = *a;
	return _v_;
}

static __inline u_int16_t
__inwrb(a)
	volatile u_int16_t *a;
{
	u_int16_t _v_;
	u_int32_t _p_ = (u_int32_t)a;

	__asm__ volatile("eieio");
	__asm__ volatile("lhbrx %0, 0, %1" : "=r"(_v_) : "r"(_p_));
	return _v_;
}

static __inline u_int32_t
__inlrb(a)
	volatile u_int32_t *a;
{
	u_int32_t _v_;
	u_int32_t _p_ = (u_int32_t)a;

	__asm__ volatile("eieio");
	__asm__ volatile("lwbrx %0, 0, %1" : "=r"(_v_) : "r"(_p_));
	return _v_;
}


#define	outb(a,v)	(__outb((volatile u_int8_t *)(a), v))
#define	out8(a,v)	outb(a,v)
#define	outw(a,v)	(__outw((volatile u_int16_t *)(a), v))
#define	out16(a,v)	outw(a,v)
#define	outl(a,v)	(__outl((volatile u_int32_t *)(a), v))
#define	out32(a,v)	outl(a,v)
#define	inb(a)		(__inb((volatile u_int8_t *)(a)))
#define	in8(a)		inb(a)
#define	inw(a)		(__inw((volatile u_int16_t *)(a)))
#define	in16(a)		inw(a)
#define	inl(a)		(__inl((volatile u_int32_t *)(a)))
#define	in32(a)		inl(a)

#define	out8rb(a,v)	outb(a,v)
#define	outwrb(a,v)	(__outwrb((volatile u_int16_t *)(a), v))
#define	out16rb(a,v)	outwrb(a,v)
#define	outlrb(a,v)	(__outlrb((volatile u_int32_t *)(a), v))
#define	out32rb(a,v)	outlrb(a,v)
#define	in8rb(a)	inb(a)
#define	inwrb(a)	(__inwrb((volatile u_int16_t *)(a)))
#define	in16rb(a)	inwrb(a)
#define	inlrb(a)	(__inlrb((volatile u_int32_t *)(a)))
#define	in32rb(a)	inlrb(a)

#ifdef DEBUG_SPEC
static __inline void
__flash_led(bits, count)
	int bits;
{
	int i, v = 0;

	if(bits == 0) {
		v = 1; bits = 3;
	}
	bits &= 3;
	count += count;
	v |= (*(volatile u_int8_t *)(MPC106_V_ISA_IO_SPACE + 0x01f4)) & ~3;
	while(count--) {
		v ^= bits;
		for(i = 100000; i > 0; i--)
			*(volatile u_int8_t *)(MPC106_V_ISA_IO_SPACE + 0x01f4) = v;
	}
	*(u_int8_t *)(MPC106_V_ISA_IO_SPACE + 0x01f4) &= ~3;
}
#endif /* DEBUG */

#endif /*_MACHINE_PIO_H_*/
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.1 2001/06/26 21:57:47 smurph Exp $ */
d3 193
a195 1
#include <powerpc/pio.h>
@


1.1.2.2
log
@Manual merge of changes long forgotten
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


