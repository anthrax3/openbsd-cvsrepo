head	1.7;
access;
symbols
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2011.07.07.19.16.42;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2004.05.14.20.38.32;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.29.10.58.06;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.06.22.45.54;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.21.57.41;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.28.10.36.03;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.49.09;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2004.06.05.23.10.54;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.37.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@/*	$OpenBSD: raven.c,v 1.6 2004/05/14 20:38:32 miod Exp $ */

/*
 * Copyright (c) 2001 Steve Murphree, Jr.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD for RTMX Inc
 *      by Per Fogelstrom, Opsycon AB.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Motorola 'Raven' ASIC driver.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>

#include <mvmeppc/dev/ravenreg.h>
#include <mvmeppc/dev/ravenvar.h>

int	 raven_match(struct device *, void *, void *);
void	 raven_attach(struct device *, struct device *, void *);

struct cfattach raven_ca = {
        sizeof(struct raven_softc), raven_match, raven_attach,
};

struct cfdriver raven_cd = {
	NULL, "raven", DV_DULL,
};

int
raven_match(struct device *parent, void *match, void *aux)
{
	struct confargs *ca = aux;
	void *va;
	u_int32_t probe;

	if (strcmp(ca->ca_name, raven_cd.cd_name) != 0)
		return 0;

	if ((va = mapiodev((paddr_t)RAVEN_BASE, RAVEN_SIZE)) == NULL)
		return 0;

	/* check for a live address */
	if (badaddr(va, 4) != 0) {
		unmapiodev(va, RAVEN_SIZE);
		return 0;
	}
	
	/* now check and see if it's a raven ASIC */	
	probe = *(u_int32_t*)va;
	unmapiodev((void *)va, RAVEN_SIZE);

	if (probe != RAVEN_MAGIC)
		return 0;
	
	return 1;
}

/* need to be global for mpcpcibr.c - XXX */
u_int8_t *ravenregs;

void
raven_attach(struct device *parent, struct device *self, void *aux)
{
	struct raven_softc *sc = (void *)self;

	/*
	 * Map Raven registers and MPCIC
	 *
	 * XXX steal them from devio_ex as well!
	 */
	ravenregs = sc->sc_regs = mapiodev((paddr_t)RAVEN_BASE, RAVEN_SIZE);
	if (sc->sc_regs == NULL) {
		printf(": can't map registers!\n");
		return;
	}

	/* set system type */
	system_type = MVME;		/* We are a Motorola MVME SBC */

	printf(": version 0x%x\n", sc->sc_regs[RAVEN_REVID]);

	while (config_found(self, NULL, NULL))
		;
}
@


1.6
log
@Attach a working bugtty device - userland needs at least a console tty.
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.5 2004/01/29 10:58:06 miod Exp $ */
@


1.5
log
@Map the raven, pcic, and isa/pci io space virtual rather than 1:1.
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.4 2002/03/14 01:26:41 millert Exp $ */
d66 1
d69 3
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.3 2001/11/06 22:45:54 miod Exp $ */
d64 1
a64 3
raven_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d66 5
a70 1
	unsigned *reg = (unsigned *)RAVEN_REG;
d73 2
a74 1
	if (badaddr((char *)reg, 4))
d76 1
d79 4
a82 1
	if (*reg != RAVEN_MAGIC)
d88 3
d92 1
a92 3
raven_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d94 12
a105 1
	struct mpic_feature *feature = (struct mpic_feature *)MPCIC_FEATURE;
d110 2
a111 1
	printf(": RAVEN, Version 0x%x.\n", feature->vid);
a114 2
                 

@


1.3
log
@-Wall -Werror cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.2 2001/11/06 19:53:15 miod Exp $ */
d52 2
a53 2
int	 raven_match __P((struct device *, void *, void *));
void	 raven_attach __P((struct device *, struct device *, void *));
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.3 2001/11/06 22:45:54 miod Exp $ */
d52 2
a53 2
int	 raven_match(struct device *, void *, void *);
void	 raven_attach(struct device *, struct device *, void *);
@


1.2
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.1 2001/06/26 21:57:41 smurph Exp $ */
a67 1
	struct confargs *ca = aux;
a85 2
	struct raven_softc *sc = (struct raven_softc *)self;
	struct confargs *ca = aux;
@


1.1
log
@Initial import of mvmeppc.
@
text
@d1 1
a1 1
/*	$OpenBSD: raven.c,v 1.23 2001/03/03 05:40:01 drahn Exp $ */
d45 1
a45 1
#include <vm/vm.h>
@


1.1.2.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d45 1
a45 1
#include <uvm/uvm_extern.h>
d68 1
d87 2
@


1.1.2.2
log
@Merge in -current from about a week ago
@
text
@d52 2
a53 2
int	 raven_match(struct device *, void *, void *);
void	 raven_attach(struct device *, struct device *, void *);
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d64 3
a66 1
raven_match(struct device *parent, void *match, void *aux)
d68 1
a68 5
	void *va;
	u_int32_t probe;

	if ((va = mapiodev((paddr_t)RAVEN_BASE, RAVEN_SIZE)) == NULL)
		return 0;
d71 1
a71 2
	if (badaddr(va, 4) != 0) {
		unmapiodev(va, RAVEN_SIZE);
a72 1
	}
d75 1
a75 4
	probe = *(u_int32_t*)va;
	unmapiodev((void *)va, RAVEN_SIZE);

	if (probe != RAVEN_MAGIC)
a80 3
/* need to be global for mpcpcibr.c - XXX */
u_int8_t *ravenregs;

d82 3
a84 1
raven_attach(struct device *parent, struct device *self, void *aux)
d86 1
a86 12
	struct raven_softc *sc = (void *)self;

	/*
	 * Map Raven registers and MPCIC
	 *
	 * XXX steal them from devio_ex as well!
	 */
	ravenregs = sc->sc_regs = mapiodev((paddr_t)RAVEN_BASE, RAVEN_SIZE);
	if (sc->sc_regs == NULL) {
		printf(": can't map registers!\n");
		return;
	}
d91 1
a91 2
	printf(": version 0x%x\n", sc->sc_regs[RAVEN_REVID]);

d95 2
@


1.1.2.4
log
@Merge with the trunk
@
text
@a65 1
	struct confargs *ca = aux;
a67 3

	if (strcmp(ca->ca_name, raven_cd.cd_name) != 0)
		return 0;
@


