head	1.8;
access;
symbols
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2011.07.07.19.16.42;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2004.11.15.11.01.35;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.25.22.13.36;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.25.21.41.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.24.21.10.29;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.08.15.48.01;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.04.08.31.31;	author niklas;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.06.26.21.57.40;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.03.01.20;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.27.23.52.16;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.49.09;	author niklas;	state Exp;
branches;
next	;

1.2.4.1
date	2002.06.11.03.37.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@/*	$OpenBSD: bugio.c,v 1.7 2004/11/15 11:01:35 miod Exp $	*/

/*
 * bug routines -- assumes that the necessary sections of memory
 * are preserved.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/types.h>

#include <machine/bugio.h>
#include <machine/cpu.h>

int bugenvsz(void);

/*
 * BUG register preserving
 */

register_t sprg0, sprg1, sprg2, sprg3;
register_t bugsprg3;

#define	BUGCTXT(msr) \
	do { \
		msr = ppc_mfmsr(); \
		sprg0 = ppc_mfsprg0(); \
		sprg1 = ppc_mfsprg1(); \
		sprg2 = ppc_mfsprg2(); \
		sprg3 = ppc_mfsprg3(); \
		ppc_mtsprg3(bugsprg3); \
        	ppc_mtmsr(((msr | PSL_IP) & ~(PSL_EE | PSL_IR | PSL_DR))); \
	} while (0)

#define	OSCTXT(msr) \
	do { \
		bugsprg3 = ppc_mfsprg3(); \
		ppc_mtsprg0(sprg0); \
		ppc_mtsprg1(sprg1); \
		ppc_mtsprg2(sprg2); \
		ppc_mtsprg3(sprg3); \
        	ppc_mtmsr(msr); \
	} while (0)

/* Invoke the BUG */
#define MVMEPROM_CALL(x)	\
	__asm__ __volatile__ ("addi %r10,%r0," __STRING(x)); \
	__asm__ __volatile__ ("sc");

void
buginit()
{
	bugsprg3 = ppc_mfsprg3();
}


/* BUG - query board routines */
void
mvmeprom_brdid(id)
	struct mvmeprom_brdid *id;
{
	unsigned long msr;

	BUGCTXT(msr);
	MVMEPROM_CALL(MVMEPROM_BRD_ID);
	asm volatile ("mr %0, 3": "=r" (id):);
	OSCTXT(msr);
}

/* returns 0 if no characters ready to read */
int
mvmeprom_getchar()
{
	int ret;
	unsigned long msr;

	BUGCTXT(msr);
	MVMEPROM_CALL(MVMEPROM_INCHR);
	asm volatile ("mr %0, 3" :  "=r" (ret));
	OSCTXT(msr);
	return ret;
}

/* returns 0 if no characters ready to read */
int
mvmeprom_instat()
{
	int ret;
	unsigned long msr;

	BUGCTXT(msr);
	MVMEPROM_CALL(MVMEPROM_INSTAT);
	asm volatile ("mr %0, 3" :  "=r" (ret));
	OSCTXT(msr);
	return (!(ret & 0x4));
}

void
mvmeprom_outln(start, end)
	char *start, *end;
{
	unsigned long msr;

	BUGCTXT(msr);
	asm volatile ("mr 3, %0": : "r" (start));
	asm volatile ("mr 4, %0": : "r" (end));
	MVMEPROM_CALL(MVMEPROM_OUTLN);
	OSCTXT(msr);
}

void
mvmeprom_outstr(start, end)
	char *start, *end;
{
	unsigned long msr;

	BUGCTXT(msr);
	asm volatile ("mr 3, %0": : "r" (start));
	asm volatile ("mr 4, %0": : "r" (end));
	MVMEPROM_CALL(MVMEPROM_OUTSTR);
	OSCTXT(msr);
}

void
mvmeprom_outchar(c)
	int c;
{
	unsigned long msr;

	BUGCTXT(msr);
	asm  volatile ("mr 3, %0" :: "r" (c));
	MVMEPROM_CALL(MVMEPROM_OUTCHR);
	OSCTXT(msr);
}

/* BUG - return to bug routine */
void
mvmeprom_return()
{
	unsigned long msr;

	BUGCTXT(msr);
	MVMEPROM_CALL(MVMEPROM_RETURN);
	OSCTXT(msr);
	/*NOTREACHED*/
}


void
mvmeprom_rtc_rd(ptime)
	struct mvmeprom_time *ptime;
{
	unsigned long msr;

	BUGCTXT(msr);
	asm volatile ("mr 3, %0": : "r" (ptime));
	MVMEPROM_CALL(MVMEPROM_RTC_RD);
	OSCTXT(msr);
}

int 
bugenvsz(void)
{
	register int ret;
	char tmp[1];
	void *ptr = tmp;
	unsigned long msr;

	BUGCTXT(msr);
	asm volatile ("mr 3, %0": : "r" (ptr));
	asm volatile ("li 5, 0x1");
	asm volatile ("li 5, 0x0"); /* get size */
	MVMEPROM_CALL(MVMEPROM_ENVIRON);
	asm volatile ("mr %0, 3" :  "=r" (ret));
	OSCTXT(msr);
	
	return(ret);
}

struct bugenviron bugenviron; 
int bugenv_init = 0;
char bugenv_buf[1024];

#ifdef BUG_DEBUG
void bug_printenv(void);

void
bug_printenv(void)
{
	printf("Startup Mode: %c\n", bugenviron.s.s_mode);
	printf("Startup Menu: %c\n", bugenviron.s.s_menu);
	printf("Remote Start: %c\n", bugenviron.s.s_remotestart);
	printf("Probe Devs: %c\n", bugenviron.s.s_probe);
	printf("Negate Sysfail: %c\n", bugenviron.s.s_negsysfail);
	printf("Reset SCSI Bus: %c\n", bugenviron.s.s_resetscsi);
	printf("Ignore CFNA Block: %c\n", bugenviron.s.s_nocfblk);
	printf("SCSI sync method: %c\n", bugenviron.s.s_scsisync);

	printf("Auto Boot Enable: %c\n", bugenviron.b.b_enable);
	printf("Auto Boot on power-up Only: %c\n", bugenviron.b.b_poweruponly);
	printf("Auto Boot CLUN: %02x\n", bugenviron.b.b_clun);
	printf("Auto Boot DLUN: %02x\n", bugenviron.b.b_dlun);
	printf("Auto Boot Delay: %02x\n", bugenviron.b.b_delay);
	printf("Auto Boot String: %s\n", bugenviron.b.b_string);

	printf("ROM Boot Enable: %c\n", bugenviron.r.r_enable);
	printf("ROM Boot on power-up Only: %c\n", bugenviron.r.r_poweruponly);
	printf("ROM Boot Scan VME bus: %c\n", bugenviron.r.r_bootvme);
	printf("ROM Boot Delay: %02x\n", bugenviron.r.r_delay);
	printf("ROM Boot Start: %08x\n", bugenviron.r.r_start);
	printf("ROM Boot End: %08x\n", bugenviron.r.r_end);

	printf("Net Boot Enable: %c\n", bugenviron.n.n_enable);
	printf("Net Boot on power-up Only: %c\n", bugenviron.n.n_poweruponly);
	printf("Net Boot CLUN: %02x\n", bugenviron.n.n_clun);
	printf("Net Boot DLUN: %02x\n", bugenviron.n.n_dlun);
	printf("Net Boot Delay: %02x\n", bugenviron.n.n_delay);
	printf("Net Boot CFG param pointer: %08x\n", bugenviron.n.n_param);

	printf("Memory Size Enable: %c\n", bugenviron.m.m_sizeenable);
	printf("Memory Start: %08x\n", bugenviron.m.m_start);
	printf("Memory End: %08x\n", bugenviron.m.m_end);

	Debugger();
}
#else
#define	bug_printenv()	
#endif 

struct bugenviron *
mvmeprom_envrd(void)
{
	register int ret;
	char *ptr, *dptr, *ptr_end;
	int env_size = 0;
	int pkt_typ, pkt_len;
	unsigned long msr;

	env_size = bugenvsz();
        bzero(&bugenviron, sizeof(struct bugenviron)); 
        bzero(&bugenv_buf[0], 1024); 
	ptr = bugenv_buf;
	
	if (ptr != NULL) {

		BUGCTXT(msr);
		asm volatile ("mr 3, %0": : "r" (ptr));
		asm volatile ("mr 4, %0": : "r" (env_size));
		asm volatile ("li 5, 0x2");
		MVMEPROM_CALL(MVMEPROM_ENVIRON);
		asm volatile ("mr %0, 3" :  "=r" (ret));
		OSCTXT(msr);

		if (ret)
			return NULL;

		ptr_end = ptr + env_size;
		while (ptr <= ptr_end) {
	                pkt_typ = *ptr++;
			pkt_len = *ptr++;
			dptr = ptr;
			switch (pkt_typ) {
			case BUG_ENV_END:
				bugenv_init = 1; /* we have read the env */
				bug_printenv();				
				return(&bugenviron);
				break;
			case BUG_STARTUP_PARAM:
				/* All chars.  We can use bcopy. */
				bcopy(dptr, &bugenviron.s.s_mode, pkt_len);
				break;
			case BUG_AUTOBOOT_INFO:
				/* All chars.  We can use bcopy. */
				bcopy(dptr, &bugenviron.b.b_enable, pkt_len);
				break;
			case BUG_ROMBOOT_INFO:
				/* This data stream has integer info that 
				 * may not be word aligned.  We can't use 
				 * bcopy for the whole struct in this 
				 * instance. */
				bcopy(dptr, &bugenviron.r.r_enable, 4);
				dptr+=4;
				bcopy(dptr, &bugenviron.r.r_start, 4);
				dptr+=4;
				bcopy(dptr, &bugenviron.r.r_end, 4);
				break;
			case BUG_NETBOOT_INFO:
				/* This data stream has integer info that 
				 * may not be word aligned.  We can't use 
				 * bcopy for the whole struct in this 
				 * instance. */
				bcopy(dptr, &bugenviron.n.n_enable, 5);
				dptr+=5;
				bcopy(dptr, &bugenviron.n.n_param, 4);
				break;
			case BUG_MEMORY_INFO:
                                bugenviron.m.m_sizeenable = *dptr++;
				bcopy(dptr, &bugenviron.m.m_start, 4);
				dptr+=4;
				bcopy(dptr, &bugenviron.m.m_end, 4);
				break;
			}
			ptr += pkt_len;
		}
	}
	return NULL;
}
@


1.7
log
@Compile with gcc 3.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugio.c,v 1.6 2004/01/25 22:13:36 miod Exp $	*/
@


1.6
log
@Put the msr fiddling in the CTXT macros, and unset PSL_IR and PSL_DR while
invoking the PPC1Bug. From drahn@@ in a previous life.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugio.c,v 1.4 2004/01/24 21:10:29 miod Exp $	*/
d46 1
a46 1
	__asm__ __volatile__ ( __CONCAT("addi %r10,%r0,",__STRING(x)) ); \
@


1.5
log
@Get rid of ppc_[gs]et_msr(), use ppc_m[ft]msr() instead.
@
text
@d23 1
a23 1
#define	BUGCTXT() \
d25 1
d31 1
d34 1
a34 1
#define	OSCTXT() \
d36 1
d41 1
d61 1
a61 1
	unsigned long omsr = ppc_mfmsr();
d63 1
a63 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d66 1
a66 2
	OSCTXT();
        ppc_mtmsr(omsr);
d74 1
a74 1
	unsigned long omsr = ppc_mfmsr();
d76 1
a76 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d79 1
a79 2
	OSCTXT();
        ppc_mtmsr(omsr);
d88 1
a88 1
	unsigned long omsr = ppc_mfmsr();
d90 1
a90 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d93 1
a93 2
	OSCTXT();
        ppc_mtmsr(omsr);
d101 1
a101 1
	unsigned long omsr = ppc_mfmsr();
d103 1
a103 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d107 1
a107 2
	OSCTXT();
        ppc_mtmsr(omsr);
d114 1
a114 1
	unsigned long omsr = ppc_mfmsr();
d116 1
a116 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d120 1
a120 2
	OSCTXT();
        ppc_mtmsr(omsr);
d127 1
a127 1
	unsigned long omsr = ppc_mfmsr();
d129 1
a129 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d132 1
a132 2
	OSCTXT();
        ppc_mtmsr(omsr);
d139 1
a139 1
	unsigned long omsr = ppc_mfmsr();
d141 1
a141 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d143 1
a143 2
	OSCTXT();
        ppc_mtmsr(omsr);
d152 3
a154 2
	unsigned long omsr = ppc_mfmsr();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d157 1
a157 2
	OSCTXT();
        ppc_mtmsr(omsr);
d166 1
a166 1
	unsigned long omsr = ppc_mfmsr();
d168 1
a168 2
	BUGCTXT();
        ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
d174 1
a174 2
	OSCTXT();
        ppc_mtmsr(omsr);
d236 1
a236 1
	unsigned long omsr = ppc_mfmsr();
d245 1
a245 2
        	ppc_mtmsr(((omsr | PSL_IP) & ~PSL_EE));
		BUGCTXT();
d251 1
a251 2
		OSCTXT();
        	ppc_mtmsr(omsr);
@


1.4
log
@Preserve SPRG0-SPRG3 around BUG calls, as required in the PPC1Bug UM;
reminded by drahn@@, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: bugio.c,v 1.3 2002/06/08 15:48:01 miod Exp $	*/
d57 1
a57 1
	unsigned long omsr = ppc_get_msr();
d60 1
a60 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d64 1
a64 1
        ppc_set_msr(omsr);
d72 1
a72 1
	unsigned long omsr = ppc_get_msr();
d75 1
a75 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d79 1
a79 1
        ppc_set_msr(omsr);
d88 1
a88 1
	unsigned long omsr = ppc_get_msr();
d91 1
a91 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d95 1
a95 1
        ppc_set_msr(omsr);
d103 1
a103 1
	unsigned long omsr = ppc_get_msr();
d106 1
a106 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d111 1
a111 1
        ppc_set_msr(omsr);
d118 1
a118 1
	unsigned long omsr = ppc_get_msr();
d121 1
a121 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d126 1
a126 1
        ppc_set_msr(omsr);
d133 1
a133 1
	unsigned long omsr = ppc_get_msr();
d136 1
a136 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d140 1
a140 1
        ppc_set_msr(omsr);
d147 1
a147 1
	unsigned long omsr = ppc_get_msr();
d150 1
a150 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d153 1
a153 1
        ppc_set_msr(omsr);
d162 2
a163 2
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d167 1
a167 1
        ppc_set_msr(omsr);
d176 1
a176 1
	unsigned long omsr = ppc_get_msr();
d179 1
a179 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d186 1
a186 1
        ppc_set_msr(omsr);
d248 1
a248 1
	unsigned long omsr = ppc_get_msr();
d257 1
a257 1
        	ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d265 1
a265 1
        	ppc_set_msr(omsr);
a278 1
				ppc_set_msr(omsr);
@


1.3
log
@Strict prototypes, and fix mvmeprom_brdid interface.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugio.c,v 1.2 2001/07/04 08:31:31 niklas Exp $	*/
d16 36
d58 2
a60 1

d63 1
d73 2
a75 1

d78 1
d89 2
a91 1

d94 1
d104 2
d110 1
d119 2
d125 1
d134 2
d139 1
d148 2
d152 1
d166 1
d177 2
a179 1
	
d185 1
a248 1
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
d257 2
d264 2
d267 1
a267 2
		if (ret) { /* scram if we have an error */
			ppc_set_msr(omsr);
d269 1
a269 1
		}
a319 1
        ppc_set_msr(omsr);
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a9 1
#include <machine/prom.h>
d11 2
d14 1
a14 43
/* BUG - timing routine */
void
mvmeprom_delay(msec)
	int msec; /* This is r3 */
{
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	asm volatile ("mr 3, %0" :: "r"(msec));
	MVMEPROM_CALL(MVMEPROM_DELAY);
        ppc_set_msr(omsr);
}

/* returns 0: success, nonzero: error */
int
mvmeprom_diskrd(arg)
	struct mvmeprom_dskio *arg;
{
	int ret;
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));

	asm volatile ("mr 3, %0" :: "r"(arg));
	MVMEPROM_CALL(MVMEPROM_NETRD);
	asm volatile ("mr %0, 3" :  "=r" (ret));
        ppc_set_msr(omsr);
	return ((ret & 0x8));
}

/* returns 0: success, nonzero: error */
int
mvmeprom_diskwr(arg)
	struct mvmeprom_dskio *arg;
{
	int ret;
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));

	asm volatile ("mr 3, %0" :: "r"(arg));
	MVMEPROM_CALL(MVMEPROM_DSKWR);
	asm volatile ("mr %0, 3" :  "=r" (ret));
        ppc_set_msr(omsr);
	return ((ret & 0x8));
}
d17 3
a19 2
struct mvmeprom_brdid *
mvmeprom_brdid()
a20 1
	struct mvmeprom_brdid *id;
a26 1
	return (id);
a56 178
/* returns 0: success, nonzero: error */
int
mvmeprom_netctrl(arg)
	struct mvmeprom_netctrl *arg;
{
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	asm volatile ("mr 3, %0":: "r" (arg));
	MVMEPROM_CALL(MVMEPROM_NETCTRL);
        ppc_set_msr(omsr);
	return (arg->status);
}

int 
mvmeprom_netctrl_init(clun, dlun)
u_char	clun;
u_char	dlun;
{
	struct mvmeprom_netctrl niocall;
	niocall.clun = clun;
	niocall.dlun = dlun;
	niocall.status = 0;
	niocall.cmd = 0; /* init */
	niocall.addr = 0;
	niocall.len = 0;
	niocall.flags = 0;
	mvmeprom_netctrl(&niocall);
	return(niocall.status);
}

int 
mvmeprom_netctrl_hwa(clun, dlun, addr, len)
u_char	clun;
u_char	dlun;
void 	*addr;
u_long  *len;
{
	struct mvmeprom_netctrl niocall;
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	niocall.clun = clun;
	niocall.dlun = dlun;
	niocall.status = 0;
	niocall.cmd = 1; /* get hw address */
	niocall.addr = addr;
	niocall.len = *len;
	niocall.flags = 0;
	mvmeprom_netctrl(&niocall);
	*len = niocall.len;
	return(niocall.status);
}

int 
mvmeprom_netctrl_tx(clun, dlun, addr, len)
u_char	clun;
u_char	dlun;
void 	*addr;
u_long  *len;
{
	struct mvmeprom_netctrl niocall;
	niocall.clun = clun;
	niocall.dlun = dlun;
	niocall.status = 0;
	niocall.cmd = 2; /* transmit */
	niocall.addr = addr;
	niocall.len = *len;
	niocall.flags = 0;
	mvmeprom_netctrl(&niocall);
	*len = niocall.len;
	return(niocall.status);
}

int 
mvmeprom_netctrl_rx(clun, dlun, addr, len)
u_char	clun;
u_char	dlun;
void 	*addr;
u_long  *len;
{
	struct mvmeprom_netctrl niocall;
	niocall.clun = clun;
	niocall.dlun = dlun;
	niocall.status = 0;
	niocall.cmd = 3; /* receive */
	niocall.addr = addr;
	niocall.len = *len;
	niocall.flags = 0;
	mvmeprom_netctrl(&niocall);
	*len = niocall.len;
	return(niocall.status);
}

int 
mvmeprom_netctrl_flush_rx(clun, dlun)
u_char	clun;
u_char	dlun;
{
	struct mvmeprom_netctrl niocall;
	niocall.clun = clun;
	niocall.dlun = dlun;
	niocall.status = 0;
	niocall.cmd = 4; /* reset */
	niocall.addr = 0;
	niocall.len = 0;
	niocall.flags = 0;
	mvmeprom_netctrl(&niocall);
	return(niocall.status);
}

int 
mvmeprom_netctrl_reset(clun, dlun)
u_char	clun;
u_char	dlun;
{
	struct mvmeprom_netctrl niocall;
	niocall.clun = clun;
	niocall.dlun = dlun;
	niocall.status = 0;
	niocall.cmd = 5; /* reset */
	niocall.addr = 0;
	niocall.len = 0;
	niocall.flags = 0;
	mvmeprom_netctrl(&niocall);
	return(niocall.status);
}

/* returns 0: success, nonzero: error */
int
mvmeprom_netfopen(arg)
	struct mvmeprom_netfopen *arg;
{
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	asm volatile ("mr 3, %0": : "r" (arg));
	MVMEPROM_CALL(MVMEPROM_NETFOPEN);
        ppc_set_msr(omsr);
	return (arg->status);
}

/* returns 0: success, nonzero: error */
int
mvmeprom_netfread(arg)
	struct mvmeprom_netfread *arg;
{
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	asm volatile ("mr 3, %0": : "r" (arg));
	MVMEPROM_CALL(MVMEPROM_NETFREAD);
        ppc_set_msr(omsr);
	return (arg->status);
}

/* returns 0: success, nonzero: error */
int
mvmeprom_netrd(arg)
	struct mvmeprom_netio *arg;
{
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	asm volatile ("mr 3, %0": : "r" (arg));
	MVMEPROM_CALL(MVMEPROM_NETRD);
        ppc_set_msr(omsr);
	return (arg->status);
}

/* returns 0: success, nonzero: error */
int
mvmeprom_netwr(arg)
	struct mvmeprom_netio *arg;
{
	unsigned long omsr = ppc_get_msr();
        ppc_set_msr(((omsr | PSL_IP) &~ PSL_EE));
	asm volatile ("mr 3, %0": : "r" (arg));
	MVMEPROM_CALL(MVMEPROM_NETWR);
        ppc_set_msr(omsr);
	return (arg->status);
}

a263 1

@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bugio.c,v 1.2 2001/07/04 08:31:31 niklas Exp $	*/
d10 1
a11 2
#include <machine/bugio.h>
#include <machine/cpu.h>
d13 43
a55 1
int bugenvsz(void);
d58 3
a60 2
void
mvmeprom_brdid(id)
a61 1
{
d68 1
d99 178
d484 1
@


1.1
log
@Initial import of mvmeppc.
@
text
@d1 2
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@d10 1
a11 2
#include <machine/bugio.h>
#include <machine/cpu.h>
d13 43
a55 1
int bugenvsz(void);
d58 3
a60 2
void
mvmeprom_brdid(id)
a61 1
{
d68 1
d99 178
d484 1
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a15 40
/*
 * BUG register preserving
 */

register_t sprg0, sprg1, sprg2, sprg3;
register_t bugsprg3;

#define	BUGCTXT(msr) \
	do { \
		msr = ppc_mfmsr(); \
		sprg0 = ppc_mfsprg0(); \
		sprg1 = ppc_mfsprg1(); \
		sprg2 = ppc_mfsprg2(); \
		sprg3 = ppc_mfsprg3(); \
		ppc_mtsprg3(bugsprg3); \
        	ppc_mtmsr(((msr | PSL_IP) & ~(PSL_EE | PSL_IR | PSL_DR))); \
	} while (0)

#define	OSCTXT(msr) \
	do { \
		bugsprg3 = ppc_mfsprg3(); \
		ppc_mtsprg0(sprg0); \
		ppc_mtsprg1(sprg1); \
		ppc_mtsprg2(sprg2); \
		ppc_mtsprg3(sprg3); \
        	ppc_mtmsr(msr); \
	} while (0)

/* Invoke the BUG */
#define MVMEPROM_CALL(x)	\
	__asm__ __volatile__ ( __CONCAT("addi %r10,%r0,",__STRING(x)) ); \
	__asm__ __volatile__ ("sc");

void
buginit()
{
	bugsprg3 = ppc_mfsprg3();
}


d21 2
a22 1
	unsigned long msr;
a23 1
	BUGCTXT(msr);
d26 1
a26 1
	OSCTXT(msr);
d34 2
a35 1
	unsigned long msr;
a36 1
	BUGCTXT(msr);
d39 1
a39 1
	OSCTXT(msr);
d48 2
a49 1
	unsigned long msr;
a50 1
	BUGCTXT(msr);
d53 1
a53 1
	OSCTXT(msr);
d61 2
a62 3
	unsigned long msr;

	BUGCTXT(msr);
d66 1
a66 1
	OSCTXT(msr);
d73 2
a74 3
	unsigned long msr;

	BUGCTXT(msr);
d78 1
a78 1
	OSCTXT(msr);
d85 2
a86 3
	unsigned long msr;

	BUGCTXT(msr);
d89 1
a89 1
	OSCTXT(msr);
d96 2
a97 3
	unsigned long msr;

	BUGCTXT(msr);
d99 1
a99 1
	OSCTXT(msr);
d108 2
a109 3
	unsigned long msr;

	BUGCTXT(msr);
d112 1
a112 1
	OSCTXT(msr);
d121 3
a123 3
	unsigned long msr;

	BUGCTXT(msr);
d129 1
a129 1
	OSCTXT(msr);
d191 2
a192 1
	unsigned long msr;
a200 1
		BUGCTXT(msr);
a205 1
		OSCTXT(msr);
d207 2
a208 1
		if (ret)
d210 1
a210 1

d220 1
d261 1
@


