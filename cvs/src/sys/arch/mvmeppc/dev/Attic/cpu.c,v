head	1.10;
access;
symbols
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2011.07.07.19.16.42;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.18.16.10.28;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.14.20.50.49;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.11.19.41.11;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.11.19.20.26;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.08.15.49.52;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.06.22.45.54;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.09.02.19.40.45;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.21.57.41;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.03.01.20;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.03.27.23.52.16;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.05.13.19.41.07;	author ho;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.02.19.10.49.09;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.37.22;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.05.19.21.49.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@/*	$OpenBSD: cpu.c,v 1.9 2010/06/26 23:24:44 guenther Exp $ */

/*
 * Copyright (c) 1997 Per Fogelstrom
 * Copyright (c) 1997 RTMX Inc
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD for RTMX Inc
 *	North Carolina, USA, by Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/device.h>

#include <machine/autoconf.h>

/* only valid on 603(e,ev) and G3, G4 */
#define HID0_DOZE	(1 << (31-8))
#define HID0_NAP	(1 << (31-9))
#define HID0_SLEEP	(1 << (31-10))
#define HID0_DPM	(1 << (31-11))
#define HID0_SGE	(1 << (31-24))
#define HID0_BTIC	(1 << (31-26))
#define HID0_LRSTK	(1 << (31-27))
#define HID0_FOLD	(1 << (31-28))
#define HID0_BHT	(1 << (31-29))

char cpu_model[80];
char machine[] = MACHINE;	/* cpu architecture */

/* Definition of the driver for autoconfig. */
int	cpumatch(struct device *, void *, void *);
void	cpuattach(struct device *, struct device *, void *);

struct cfattach cpu_ca = {
	sizeof(struct device), cpumatch, cpuattach
};

struct cfdriver cpu_cd = {
	NULL, "cpu", DV_DULL
};

void config_l2cr(int cpu);

int
cpumatch(parent, cfdata, aux)
	struct device *parent;
	void *cfdata;
	void *aux;
{
	struct confargs *ca = aux;

	/* make sure that we're looking for a CPU. */
	if (strcmp(ca->ca_name, cpu_cd.cd_name) != 0)
		return (0);

	return (1);
}

void
cpuattach(struct device *parent, struct device *dev, void *aux)
{
	unsigned int cpu, pvr, hid0;

	pvr = ppc_mfpvr();
	cpu = pvr >> 16;
	switch (cpu) {
	case PPC_CPU_MPC601:
		snprintf(cpu_model, sizeof(cpu_model), "601");
		break;
	case PPC_CPU_MPC603:
		snprintf(cpu_model, sizeof(cpu_model), "603");
		break;
	case PPC_CPU_MPC604:
		snprintf(cpu_model, sizeof(cpu_model), "604");
		break;
	case PPC_CPU_MPC603e:
		snprintf(cpu_model, sizeof(cpu_model), "603e");
		break;
	case PPC_CPU_MPC603ev:
		snprintf(cpu_model, sizeof(cpu_model), "603ev");
		break;
	case PPC_CPU_MPC750:
		snprintf(cpu_model, sizeof(cpu_model), "750");
		break;
	case PPC_CPU_MPC604ev:
		snprintf(cpu_model, sizeof(cpu_model), "604ev");
		break;
	case PPC_CPU_MPC7400:
		snprintf(cpu_model, sizeof(cpu_model), "7400");
		break;
	case PPC_CPU_IBM750FX:
		snprintf(cpu_model, sizeof(cpu_model), "750FX");
		break;
	case PPC_CPU_MPC7410:
		snprintf(cpu_model, sizeof(cpu_model), "7410");
		break;
	case PPC_CPU_MPC7450:
		if ((pvr & 0xf) < 3)
			snprintf(cpu_model, sizeof(cpu_model), "7450");
		 else
			snprintf(cpu_model, sizeof(cpu_model), "7451");
		break;
	case PPC_CPU_MPC7455:
		snprintf(cpu_model, sizeof(cpu_model), "7455");
		break;
	default:
		snprintf(cpu_model, sizeof(cpu_model), "Version %x", cpu);
		break;
	}
	snprintf(cpu_model + strlen(cpu_model),
	    sizeof(cpu_model) - strlen(cpu_model),
	    " (Revision %x)", pvr & 0xffff);
	printf(": %s", cpu_model);

	/* power savings mode */
	hid0 = ppc_mfhid0();
	switch (cpu) {
	case PPC_CPU_MPC603:
	case PPC_CPU_MPC603e:
	case PPC_CPU_MPC750:
	case PPC_CPU_MPC7400:
	case PPC_CPU_IBM750FX:
	case PPC_CPU_MPC7410:
		/* select DOZE mode */
		hid0 &= ~(HID0_NAP | HID0_SLEEP);
		hid0 |= HID0_DOZE | HID0_DPM;
		break;
	case PPC_CPU_MPC7450:
	case PPC_CPU_MPC7455:
		/* select NAP mode */
		hid0 &= ~(HID0_DOZE | HID0_SLEEP);
		hid0 |= HID0_NAP | HID0_DPM;
		/* try some other flags */
		hid0 |= HID0_SGE | HID0_BTIC;
		hid0 |= HID0_LRSTK | HID0_FOLD | HID0_BHT;
		/* Disable BTIC on 7450 Rev 2.0 or earlier */
		if (cpu == PPC_CPU_MPC7450 && (pvr & 0xffff) < 0x0200)
			hid0 &= ~HID0_BTIC;
		break;
	}
	ppc_mthid0(hid0);

	/* if processor is G3 or G4, configure l2 cache */
	if (cpu == PPC_CPU_MPC750 || cpu == PPC_CPU_MPC7400 ||
	    cpu == PPC_CPU_IBM750FX || cpu == PPC_CPU_MPC7410 ||
	    cpu == PPC_CPU_MPC7450 || cpu == PPC_CPU_MPC7455) {
		config_l2cr(cpu);
	}
	printf("\n");
}

/* L2CR bit definitions */
#define L2CR_L2E        0x80000000 /* 0: L2 enable */
#define L2CR_L2PE       0x40000000 /* 1: L2 data parity enable */
#define L2CR_L2SIZ      0x30000000 /* 2-3: L2 size */
#define  L2SIZ_RESERVED         0x00000000
#define  L2SIZ_256K             0x10000000
#define  L2SIZ_512K             0x20000000
#define  L2SIZ_1M       0x30000000
#define L2CR_L2CLK      0x0e000000 /* 4-6: L2 clock ratio */
#define  L2CLK_DIS              0x00000000 /* disable L2 clock */
#define  L2CLK_10               0x02000000 /* core clock / 1   */
#define  L2CLK_15               0x04000000 /*            / 1.5 */
#define  L2CLK_20               0x08000000 /*            / 2   */
#define  L2CLK_25               0x0a000000 /*            / 2.5 */
#define  L2CLK_30               0x0c000000 /*            / 3   */
#define L2CR_L2RAM      0x01800000 /* 7-8: L2 RAM type */
#define  L2RAM_FLOWTHRU_BURST   0x00000000
#define  L2RAM_PIPELINE_BURST   0x01000000
#define  L2RAM_PIPELINE_LATE    0x01800000
#define L2CR_L2DO       0x00400000 /* 9: L2 data-only.
                                      Setting this bit disables instruction
                                      caching. */
#define L2CR_L2I        0x00200000 /* 10: L2 global invalidate. */
#define L2CR_L2CTL      0x00100000 /* 11: L2 RAM control (ZZ enable).
                                      Enables automatic operation of the
                                      L2ZZ (low-power mode) signal. */
#define L2CR_L2WT       0x00080000 /* 12: L2 write-through. */
#define L2CR_L2TS       0x00040000 /* 13: L2 test support. */
#define L2CR_L2OH       0x00030000 /* 14-15: L2 output hold. */
#define L2CR_L2SL       0x00008000 /* 16: L2 DLL slow. */
#define L2CR_L2DF       0x00004000 /* 17: L2 differential clock. */
#define L2CR_L2BYP      0x00002000 /* 18: L2 DLL bypass. */
#define L2CR_L2IP       0x00000001 /* 31: L2 global invalidate in progress
				       (read only). */
#ifdef L2CR_CONFIG
u_int l2cr_config = L2CR_CONFIG;
#else
u_int l2cr_config = 0;
#endif

/* L3CR bit definitions */
#define   L3CR_L3E                0x80000000 /*  0: L3 enable */
#define   L3CR_L3SIZ              0x10000000 /*  3: L3 size (0=1MB, 1=2MB) */

void
config_l2cr(int cpu)
{
	u_int l2cr, x;

	l2cr = ppc_mfl2cr();

	/*
	 * Configure L2 cache if not enabled.
	 */
	if ((l2cr & L2CR_L2E) == 0 && l2cr_config != 0) {
		l2cr = l2cr_config;
		ppc_mtl2cr(l2cr);

		/* Wait for L2 clock to be stable (640 L2 clocks). */
		delay(100);

		/* Invalidate all L2 contents. */
		l2cr |= L2CR_L2I;
		ppc_mtl2cr(l2cr);
		do {
			x = ppc_mfl2cr();
		} while (x & L2CR_L2IP);

		/* Enable L2 cache. */
		l2cr &= ~L2CR_L2I;
		l2cr |= L2CR_L2E;
		ppc_mtl2cr(l2cr);
	}

	if (l2cr & L2CR_L2E) {
		if (cpu == PPC_CPU_MPC7450 || cpu == PPC_CPU_MPC7455) {
			u_int l3cr;

			printf(": 256KB L2 cache");

			l3cr = ppc_mfl3cr();
			if (l3cr & L3CR_L3E)
				printf(", %cMB L3 cache",
				    l3cr & L3CR_L3SIZ ? '2' : '1');
		} else if (cpu == PPC_CPU_IBM750FX)
			printf(": 512KB L2 cache");
		else {
			switch (l2cr & L2CR_L2SIZ) {
			case L2SIZ_256K:
				printf(": 256KB");
				break;
			case L2SIZ_512K:
				printf(": 512KB");
				break;
			case L2SIZ_1M:
				printf(": 1MB");
				break;
			default:
				printf(": unknown size");
			}
			printf(" backside cache");
		}
#if 0
		switch (l2cr & L2CR_L2RAM) {
		case L2RAM_FLOWTHRU_BURST:
			printf(" Flow-through synchronous burst SRAM");
			break;
		case L2RAM_PIPELINE_BURST:
			printf(" Pipelined synchronous burst SRAM");
			break;
		case L2RAM_PIPELINE_LATE:
			printf(" Pipelined synchronous late-write SRAM");
			break;
		default:
			printf(" unknown type");
		}

		if (l2cr & L2CR_L2PE)
			printf(" with parity");
#endif
	} else
		printf(": L2 cache not enabled");
}
@


1.9
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.8 2004/11/18 16:10:28 miod Exp $ */
@


1.8
log
@Feature sync with macppc
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.19 2004/02/14 15:09:22 grange Exp $ */
a38 1
#include <sys/user.h>
@


1.7
log
@Do not fill more than the first three fields of cfdriver structures unless
necessary. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.6 2003/05/11 19:41:11 deraadt Exp $ */
d6 1
a6 1
 * 
d44 11
d59 2
a60 2
static int	cpumatch(struct device *, void *, void *);
static void	cpuattach(struct device *, struct device *, void *);
d65 1
d70 3
a72 1
static int
d87 2
a88 7
void config_l2cr(void);

static void
cpuattach(parent, dev, aux)
	struct device *parent;
	struct device *dev;
	void *aux;
d90 1
a90 6
	int cpu, pvr;
#ifdef OFW
	char name[32];
	int qhandle, phandle;
	unsigned int clock_freq = 0;
#endif
d92 1
a92 1
	__asm__ ("mfpvr %0" : "=r"(pvr));
d95 5
a99 2
	case 1:
		snprintf(cpu_model, sizeof cpu_model, "601");
d101 2
a102 2
	case 3:
		snprintf(cpu_model, sizeof cpu_model, "603");
d104 2
a105 2
	case 4:
		snprintf(cpu_model, sizeof cpu_model, "604");
d107 2
a108 2
	case 5:
		snprintf(cpu_model, sizeof cpu_model, "602");
d110 2
a111 2
	case 6:
		snprintf(cpu_model, sizeof cpu_model, "603e");
d113 2
a114 2
	case 7:
		snprintf(cpu_model, sizeof cpu_model, "603ev");
d116 2
a117 2
	case 8:
		snprintf(cpu_model, sizeof cpu_model, "750");
d119 2
a120 2
	case 9:
		snprintf(cpu_model, sizeof cpu_model, "604ev");
d122 2
a123 2
	case 12:
		snprintf(cpu_model, sizeof cpu_model, "7400(G4)");
d125 8
a132 2
	case 20:
		snprintf(cpu_model, sizeof cpu_model, "620");
d135 1
a135 1
		snprintf(cpu_model, sizeof cpu_model, "Version %x", cpu);
d139 1
a139 1
	    sizeof cpu_model - strlen(cpu_model),
d143 25
a167 17
	/* This should only be executed on openfirmware systems... */
#ifdef OFW
	for (qhandle = OF_peer(0); qhandle; qhandle = phandle) {
                if (OF_getprop(qhandle, "device_type", name, sizeof name) >= 0
                    && !strcmp(name, "cpu")
                    && OF_getprop(qhandle, "clock-frequency",
                                  &clock_freq , sizeof clock_freq ) >= 0)
		{
			break;
		}
                if (phandle = OF_child(qhandle))
                        continue;
                while (qhandle) {
                        if (phandle = OF_peer(qhandle))
                                break;
                        qhandle = OF_parent(qhandle);
                }
d169 1
d171 5
a175 10
	if (clock_freq != 0) {
		/* Openfirmware stores clock in HZ, not MHz */
		clock_freq /= 1000000;
		printf(": %d MHz", clock_freq);

	}
#endif
	/* if processor is G3 or G4, configure l2 cache */ 
	if  ( (cpu == 8) || (cpu == 12) ) {
		config_l2cr();
a177 2


d180 1
a180 2
#define L2CR 1017

d213 1
a213 1
                                      (read only). */
d220 4
d225 1
a225 1
config_l2cr()
d229 1
a229 1
	__asm __volatile ("mfspr %0, 1017" : "=r"(l2cr));
d236 1
a236 1
		asm volatile ("mtspr 1017,%0" :: "r"(l2cr));
d243 1
a243 1
		asm volatile ("mtspr 1017,%0" :: "r"(l2cr));
d245 1
a245 1
			asm volatile ("mfspr %0, 1017" : "=r"(x));
d247 1
a247 1
				      
d251 1
a251 1
		asm volatile ("mtspr 1017,%0" :: "r"(l2cr));
d255 26
a280 12
		switch (l2cr & L2CR_L2SIZ) {
		case L2SIZ_256K:
			printf(": 256KB");
			break;
		case L2SIZ_512K:
			printf(": 512KB");
			break;
		case L2SIZ_1M:  
			printf(": 1MB");
			break;
		default:
			printf(": unknown size");
d296 1
a296 1
		
d298 1
a298 1
			printf(" with parity");  
a299 1
		printf(" backside cache");
a301 1
		
@


1.6
log
@string cleaning; krw ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.5 2003/02/11 19:20:26 mickey Exp $ */
d55 1
a55 1
	NULL, "cpu", DV_DULL, NULL, 0
@


1.5
log
@be consistant on Hz vs hz
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.4 2002/06/08 15:49:52 miod Exp $ */
d92 1
a92 1
		sprintf(cpu_model, "601");
d95 1
a95 1
		sprintf(cpu_model, "603");
d98 1
a98 1
		sprintf(cpu_model, "604");
d101 1
a101 1
		sprintf(cpu_model, "602");
d104 1
a104 1
		sprintf(cpu_model, "603e");
d107 1
a107 1
		sprintf(cpu_model, "603ev");
d110 1
a110 1
		sprintf(cpu_model, "750");
d113 1
a113 1
		sprintf(cpu_model, "604ev");
d116 1
a116 1
		sprintf(cpu_model, "7400(G4)");
d119 1
a119 1
		sprintf(cpu_model, "620");
d122 1
a122 1
		sprintf(cpu_model, "Version %x", cpu);
d125 3
a127 1
	sprintf(cpu_model + strlen(cpu_model), " (Revision %x)", pvr & 0xffff);
@


1.4
log
@Strict prototypes, and some KNF touches while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.3 2001/11/06 22:45:54 miod Exp $ */
d148 1
a148 1
		/* Openfirmware stores clock in HZ, not Mhz */
d150 1
a150 1
		printf(": %d Mhz", clock_freq);
@


1.3
log
@-Wall -Werror cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.2 2001/09/02 19:40:45 miod Exp $ */
d72 2
a73 1
void config_l2cr();
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.3 2001/11/06 22:45:54 miod Exp $ */
d72 1
a72 2

void config_l2cr(void);
@


1.3.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d92 1
a92 1
		snprintf(cpu_model, sizeof cpu_model, "601");
d95 1
a95 1
		snprintf(cpu_model, sizeof cpu_model, "603");
d98 1
a98 1
		snprintf(cpu_model, sizeof cpu_model, "604");
d101 1
a101 1
		snprintf(cpu_model, sizeof cpu_model, "602");
d104 1
a104 1
		snprintf(cpu_model, sizeof cpu_model, "603e");
d107 1
a107 1
		snprintf(cpu_model, sizeof cpu_model, "603ev");
d110 1
a110 1
		snprintf(cpu_model, sizeof cpu_model, "750");
d113 1
a113 1
		snprintf(cpu_model, sizeof cpu_model, "604ev");
d116 1
a116 1
		snprintf(cpu_model, sizeof cpu_model, "7400(G4)");
d119 1
a119 1
		snprintf(cpu_model, sizeof cpu_model, "620");
d122 1
a122 1
		snprintf(cpu_model, sizeof cpu_model, "Version %x", cpu);
d125 1
a125 3
	snprintf(cpu_model + strlen(cpu_model),
	    sizeof cpu_model - strlen(cpu_model),
	    " (Revision %x)", pvr & 0xffff);
d148 1
a148 1
		/* Openfirmware stores clock in HZ, not MHz */
d150 1
a150 1
		printf(": %d MHz", clock_freq);
@


1.2
log
@Convert mvmeppc to use common powerpc parts.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.1 2001/06/26 21:57:41 smurph Exp $ */
d81 1
d85 1
@


1.1
log
@Initial import of mvmeppc.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.7 2001/03/04 05:10:57 brad Exp $ */
d45 1
a45 1
char machine[] = "powerpc";	/* cpu architecture */
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.1 2001/06/26 21:57:41 smurph Exp $ */
d45 1
a45 1
char machine[] = MACHINE;	/* cpu architecture */
@


1.1.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a80 1
#ifdef OFW
a83 1
#endif
@


1.1.2.3
log
@Sync the SMP branch with 3.3
@
text
@d72 1
a72 2

void config_l2cr(void);
d147 1
a147 1
		/* Openfirmware stores clock in HZ, not MHz */
d149 1
a149 1
		printf(": %d MHz", clock_freq);
@


1.1.2.4
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.1.2.3 2003/03/27 23:52:16 niklas Exp $ */
d92 1
a92 1
		snprintf(cpu_model, sizeof cpu_model, "601");
d95 1
a95 1
		snprintf(cpu_model, sizeof cpu_model, "603");
d98 1
a98 1
		snprintf(cpu_model, sizeof cpu_model, "604");
d101 1
a101 1
		snprintf(cpu_model, sizeof cpu_model, "602");
d104 1
a104 1
		snprintf(cpu_model, sizeof cpu_model, "603e");
d107 1
a107 1
		snprintf(cpu_model, sizeof cpu_model, "603ev");
d110 1
a110 1
		snprintf(cpu_model, sizeof cpu_model, "750");
d113 1
a113 1
		snprintf(cpu_model, sizeof cpu_model, "604ev");
d116 1
a116 1
		snprintf(cpu_model, sizeof cpu_model, "7400(G4)");
d119 1
a119 1
		snprintf(cpu_model, sizeof cpu_model, "620");
d122 1
a122 1
		snprintf(cpu_model, sizeof cpu_model, "Version %x", cpu);
d125 1
a125 3
	snprintf(cpu_model + strlen(cpu_model),
	    sizeof cpu_model - strlen(cpu_model),
	    " (Revision %x)", pvr & 0xffff);
@


1.1.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d55 1
a55 1
	NULL, "cpu", DV_DULL
@


