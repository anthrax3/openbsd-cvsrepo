head	1.30;
access;
symbols
	OPENBSD_4_9:1.28.0.2
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.27.0.2
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.21.0.4
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.18.0.8
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.4
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.6
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.11
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.30
date	2011.07.07.19.16.43;	author deraadt;	state dead;
branches;
next	1.29;

1.29
date	2011.06.23.20.44.39;	author ariane;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.26.15.40.59;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.26;

1.26
date	2010.03.29.19.21.58;	author oga;	state Exp;
branches;
next	1.25;

1.25
date	2009.06.07.16.02.41;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.20.00.42.06;	author oga;	state Exp;
branches;
next	1.23;

1.23
date	2009.04.14.16.01.04;	author oga;	state Exp;
branches;
next	1.22;

1.22
date	2009.03.07.15.34.34;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.26.05.42.12;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2007.10.06.23.12.17;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.03.01.09.09;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.26.18.57.51;	author martin;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.25.23.02.25;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.09.19.17.01;	author claudio;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.14.20.38.00;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.08.20.12.23;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.29.20.26.48;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.07.07.25;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.07.18.35.56;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.06.22.06.15;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.08.02.24.06;	author art;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.11.09.15.14.13;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.05.17.25.58;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.19.20.50.57;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.25.13.25.32;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.04.08.31.33;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.27.04.32.46;	author art;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.06.26.21.57.52;	author smurph;	state Exp;
branches;
next	;

1.2.2.1
date	2001.10.31.03.01.21;	author nate;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2003.06.07.11.13.18;	author ho;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	2004.02.19.10.49.10;	author niklas;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	2004.06.05.23.10.54;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.10.29.00.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.30
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@/*      $OpenBSD: bus_dma.c,v 1.29 2011/06/23 20:44:39 ariane Exp $        */
/*      $NetBSD: bus_dma.c,v 1.2 2001/06/10 02:31:25 briggs Exp $        */

/*-
 * Copyright (c) 1996, 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/extent.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/mount.h>

#include <uvm/uvm.h>
#include <uvm/uvm_page.h>

#define _POWERPC_BUS_DMA_PRIVATE
#include <machine/bus.h>
#include <machine/intr.h>

int     _bus_dmamap_load_buffer (bus_dma_tag_t, bus_dmamap_t, void *,
            bus_size_t, struct proc *, int, paddr_t *, int *, int);

/*
 * Common function for DMA map creation.  May be called by bus-specific
 * DMA map creation functions.
 */
int
_bus_dmamap_create(t, size, nsegments, maxsegsz, boundary, flags, dmamp)
        bus_dma_tag_t t;
        bus_size_t size;
        int nsegments;
        bus_size_t maxsegsz;
        bus_size_t boundary;
        int flags;
        bus_dmamap_t *dmamp;
{
        struct powerpc_bus_dmamap *map;
        void *mapstore;
        size_t mapsize;

        /*
         * Allocate and initialize the DMA map.  The end of the map
         * is a variable-sized array of segments, so we allocate enough
         * room for them in one shot.
         *
         * Note we don't preserve the WAITOK or NOWAIT flags.  Preservation
         * of ALLOCNOW notifies others that we've reserved these resources,
         * and they are not to be freed.
         *
         * The bus_dmamap_t includes one bus_dma_segment_t, hence
         * the (nsegments - 1).
         */
        mapsize = sizeof(struct powerpc_bus_dmamap) +
            (sizeof(bus_dma_segment_t) * (nsegments - 1));
        if ((mapstore = malloc(mapsize, M_DEVBUF, (flags & BUS_DMA_NOWAIT) ?
	    (M_NOWAIT | M_ZERO) : (M_WAITOK | M_ZERO))) == NULL)
                return (ENOMEM);

        map = (struct powerpc_bus_dmamap *)mapstore;
        map->_dm_size = size;
        map->_dm_segcnt = nsegments;
        map->_dm_maxsegsz = maxsegsz;
        map->_dm_boundary = boundary;
        map->_dm_bounce_thresh = t->_bounce_thresh;
        map->_dm_flags = flags & ~(BUS_DMA_WAITOK|BUS_DMA_NOWAIT);
        map->dm_mapsize = 0;                /* no valid mappings */
        map->dm_nsegs = 0;

        *dmamp = map;
        return (0);
}

/*
 * Common function for DMA map destruction.  May be called by bus-specific
 * DMA map destruction functions.
 */
void
_bus_dmamap_destroy(t, map)
        bus_dma_tag_t t;
        bus_dmamap_t map;
{

        free(map, M_DEVBUF);
}

/*
 * Utility function to load a linear buffer.  lastaddrp holds state
 * between invocations (for multiple-buffer loads).  segp contains
 * the starting segment on entrance, and the ending segment on exit.
 * first indicates if this is the first invocation of this function.
 */
int
_bus_dmamap_load_buffer(t, map, buf, buflen, p, flags, lastaddrp, segp, first)
        bus_dma_tag_t t;
        bus_dmamap_t map;
        void *buf;
        bus_size_t buflen;
        struct proc *p;
        int flags;
        paddr_t *lastaddrp;
        int *segp;
        int first;
{
        bus_size_t sgsize;
        bus_addr_t curaddr, lastaddr, baddr, bmask;
        vaddr_t vaddr = (vaddr_t)buf;
        int seg;
	pmap_t pmap;

	if (p != NULL)
		pmap = p->p_vmspace->vm_map.pmap;
	else
		pmap = pmap_kernel();

        lastaddr = *lastaddrp;
        bmask = ~(map->_dm_boundary - 1);

        for (seg = *segp; buflen > 0 ; ) {
                /*
                 * Get the physical address for this segment.
                 */
		if (pmap_extract(pmap, vaddr, (paddr_t *)&curaddr) == FALSE) {
			panic("dmamap_load_buffer pmap %p vaddr %lx "
			    "pmap_extract failed", pmap, vaddr);
		}

                /*
                 * If we're beyond the bounce threshold, notify
                 * the caller.
                 */
                if (map->_dm_bounce_thresh != 0 &&
                    curaddr >= map->_dm_bounce_thresh)
                        return (EINVAL);

                /*
                 * Compute the segment size, and adjust counts.
                 */
                sgsize = NBPG - ((u_long)vaddr & PGOFSET);
                if (buflen < sgsize)
                        sgsize = buflen;

                /*
                 * Make sure we don't cross any boundaries.
                 */
                if (map->_dm_boundary > 0) {
                        baddr = (curaddr + map->_dm_boundary) & bmask;
                        if (sgsize > (baddr - curaddr))
                                sgsize = (baddr - curaddr);
                }

                /*
                 * Insert chunk into a segment, coalescing with
                 * the previous segment if possible.
                 */
                if (first) {
                        map->dm_segs[seg].ds_addr = PHYS_TO_PCI_MEM(curaddr);
                        map->dm_segs[seg].ds_len = sgsize;
                        first = 0;
                } else {
                        if (curaddr == lastaddr &&
                            (map->dm_segs[seg].ds_len + sgsize) <=
                             map->_dm_maxsegsz &&
                            (map->_dm_boundary == 0 ||
                             (map->dm_segs[seg].ds_addr & bmask) ==
                             (PHYS_TO_PCI_MEM(curaddr) & bmask)))
                                map->dm_segs[seg].ds_len += sgsize;
                        else {
                                if (++seg >= map->_dm_segcnt)
                                        break;
                                map->dm_segs[seg].ds_addr =
                                        PHYS_TO_PCI_MEM(curaddr);
                                map->dm_segs[seg].ds_len = sgsize;
                        }
                }

                lastaddr = curaddr + sgsize;
                vaddr += sgsize;
                buflen -= sgsize;
        }

        *segp = seg;
        *lastaddrp = lastaddr;

        /*
         * Did we fit?
         */
        if (buflen != 0)
                return (EFBIG);                /* XXX better return value here? */

        return (0);
}

/*
 * Common function for loading a DMA map with a linear buffer.  May
 * be called by bus-specific DMA map load functions.
 */
int
_bus_dmamap_load(t, map, buf, buflen, p, flags)
        bus_dma_tag_t t;
        bus_dmamap_t map;
        void *buf;
        bus_size_t buflen;
        struct proc *p;
        int flags;
{
        paddr_t lastaddr;
        int seg, error;

        /*
         * Make sure that on error condition we return "no valid mappings".
         */
        map->dm_mapsize = 0;
        map->dm_nsegs = 0;

        if (buflen > map->_dm_size)
                return (EINVAL);

        seg = 0;
        error = _bus_dmamap_load_buffer(t, map, buf, buflen, p, flags,
                &lastaddr, &seg, 1);
        if (error == 0) {
                map->dm_mapsize = buflen;
                map->dm_nsegs = seg + 1;
        }
        return (error);
}

/*
 * Like _bus_dmamap_load(), but for mbufs.
 */
int
_bus_dmamap_load_mbuf(t, map, m0, flags)
        bus_dma_tag_t t;
        bus_dmamap_t map;
        struct mbuf *m0;
        int flags;
{
        paddr_t lastaddr;
        int seg, error, first;
        struct mbuf *m;

        /*
         * Make sure that on error condition we return "no valid mappings."
         */
        map->dm_mapsize = 0;
        map->dm_nsegs = 0;

#ifdef DIAGNOSTIC
        if ((m0->m_flags & M_PKTHDR) == 0)
                panic("_bus_dmamap_load_mbuf: no packet header");
#endif

        if (m0->m_pkthdr.len > map->_dm_size)
                return (EINVAL);

        first = 1;
        seg = 0;
        error = 0;
        for (m = m0; m != NULL && error == 0; m = m->m_next) {
		if (m->m_len == 0)
			continue;
                error = _bus_dmamap_load_buffer(t, map, m->m_data, m->m_len,
                    NULL, flags, &lastaddr, &seg, first);
                first = 0;
        }
        if (error == 0) {
                map->dm_mapsize = m0->m_pkthdr.len;
                map->dm_nsegs = seg + 1;
        }
        return (error);
}

/*
 * Like _bus_dmamap_load(), but for uios.
 */
int
_bus_dmamap_load_uio(t, map, uio, flags)
        bus_dma_tag_t t;
        bus_dmamap_t map;
        struct uio *uio;
        int flags;
{
        paddr_t lastaddr;
        int seg, i, error, first;
        bus_size_t minlen, resid;
        struct proc *p = NULL;
        struct iovec *iov;
        caddr_t addr;

        /*
         * Make sure that on error condition we return "no valid mappings."
         */
        map->dm_mapsize = 0;
        map->dm_nsegs = 0;

        resid = uio->uio_resid;
        iov = uio->uio_iov;

	if (resid > map->_dm_size)
		return (EINVAL);

        if (uio->uio_segflg == UIO_USERSPACE) {
                p = uio->uio_procp;
#ifdef DIAGNOSTIC
                if (p == NULL)
                        panic("_bus_dmamap_load_uio: USERSPACE but no proc");
#endif
        }

        first = 1;
        seg = 0;
        error = 0;
        for (i = 0; i < uio->uio_iovcnt && resid != 0 && error == 0; i++) {
                /*
                 * Now at the first iovec to load.  Load each iovec
                 * until we have exhausted the residual count.
                 */
                minlen = resid < iov[i].iov_len ? resid : iov[i].iov_len;
                addr = (caddr_t)iov[i].iov_base;

                error = _bus_dmamap_load_buffer(t, map, addr, minlen,
                    p, flags, &lastaddr, &seg, first);
                first = 0;

                resid -= minlen;
        }
        if (error == 0) {
                map->dm_mapsize = uio->uio_resid;
                map->dm_nsegs = seg + 1;
        }
        return (error);
}

/*
 * Like _bus_dmamap_load(), but for raw memory allocated with
 * bus_dmamem_alloc().
 */
int
_bus_dmamap_load_raw(t, map, segs, nsegs, size, flags)
        bus_dma_tag_t t;
        bus_dmamap_t map;
        bus_dma_segment_t *segs;
        int nsegs;
        bus_size_t size;
        int flags;
{

        panic("_bus_dmamap_load_raw: not implemented");
}

/*
 * Common function for unloading a DMA map.  May be called by
 * chipset-specific DMA map unload functions.
 */
void
_bus_dmamap_unload(t, map)
        bus_dma_tag_t t;
        bus_dmamap_t map;
{

        /*
         * No resources to free; just mark the mappings as
         * invalid.
         */
        map->dm_mapsize = 0;
        map->dm_nsegs = 0;
}

/*
 * Common function for DMA map synchronization.  May be called
 * by chipset-specific DMA map synchronization functions.
 */

void
_bus_dmamap_sync(t, map, offset, len, op)
        bus_dma_tag_t t;
        bus_dmamap_t map;
	bus_addr_t offset;
	bus_size_t len;
	int op;
{
	int i;

	/* XXX and if it's not a PCI device??? */
	if ((op & (BUS_DMASYNC_PREREAD | BUS_DMASYNC_PREWRITE)) == 0)
		return;

	for (i = map->dm_nsegs; i--; )
		invdcache((void *)PCI_MEM_TO_PHYS(map->dm_segs[i].ds_addr), 
		    len);
}

/*
 * Common function for DMA-safe memory allocation.  May be called
 * by bus-specific DMA memory allocation functions.
 */
int
_bus_dmamem_alloc(t, size, alignment, boundary, segs, nsegs, rsegs, flags)
        bus_dma_tag_t t;
        bus_size_t size, alignment, boundary;
        bus_dma_segment_t *segs;
        int nsegs;
        int *rsegs;
        int flags;
{
        return _bus_dmamem_alloc_range(t, size, alignment, boundary, segs,
            nsegs, rsegs, flags, 0, -1);
}

/*
 * Common function for freeing DMA-safe memory.  May be called by
 * bus-specific DMA memory free functions.
 */
void
_bus_dmamem_free(t, segs, nsegs)
        bus_dma_tag_t t;
        bus_dma_segment_t *segs;
        int nsegs;
{
        struct vm_page *m;
        bus_addr_t addr;
        struct pglist mlist;
        int curseg;

        /*
         * Build a list of pages to free back to the VM system.
         */
        TAILQ_INIT(&mlist);
        for (curseg = 0; curseg < nsegs; curseg++) {
                for (addr = PCI_MEM_TO_PHYS(segs[curseg].ds_addr);
                    addr < (PCI_MEM_TO_PHYS(segs[curseg].ds_addr)
                        + segs[curseg].ds_len);
                    addr += PAGE_SIZE) {
                        m = PHYS_TO_VM_PAGE(addr);
                        TAILQ_INSERT_TAIL(&mlist, m, pageq);
                }
        }

        uvm_pglistfree(&mlist);
}

/*
 * Common function for mapping DMA-safe memory.  May be called by
 * bus-specific DMA memory map functions.
 */
int
_bus_dmamem_map(t, segs, nsegs, size, kvap, flags)
        bus_dma_tag_t t;
        bus_dma_segment_t *segs;
        int nsegs;
        size_t size;
        caddr_t *kvap;
        int flags;
{
        vaddr_t va, sva;
        size_t ssize;
        bus_addr_t addr;
        int curseg, error;

        size = round_page(size);

        va = uvm_km_valloc(kernel_map, size);

        if (va == 0)
                return (ENOMEM);

        *kvap = (caddr_t)va;

        sva = va;
        ssize = size;
        for (curseg = 0; curseg < nsegs; curseg++) {
                for (addr = PCI_MEM_TO_PHYS(segs[curseg].ds_addr);
                    addr < (PCI_MEM_TO_PHYS(segs[curseg].ds_addr)
                        + segs[curseg].ds_len);
                    addr += NBPG, va += NBPG, size -= NBPG) {
                        if (size == 0)
                                panic("_bus_dmamem_map: size botch");
                        error = pmap_enter(pmap_kernel(), va, addr,
                             VM_PROT_READ | VM_PROT_WRITE, VM_PROT_READ |
                             VM_PROT_WRITE | PMAP_WIRED | PMAP_CANFAIL);
                        if (error) {
                                pmap_update(pmap_kernel());
                                uvm_km_free(kernel_map, sva, ssize);
                                return (error);
                        }
                }
        }
	pmap_update(pmap_kernel());

        return (0);
}

/*
 * Common function for unmapping DMA-safe memory.  May be called by
 * bus-specific DMA memory unmapping functions.
 */
void
_bus_dmamem_unmap(t, kva, size)
        bus_dma_tag_t t;
        caddr_t kva;
        size_t size;
{

#ifdef DIAGNOSTIC
        if ((u_long)kva & PGOFSET)
                panic("_bus_dmamem_unmap");
#endif

        size = round_page(size);

        uvm_km_free(kernel_map, (vaddr_t)kva, size);
}

/*
 * Common function for mmap(2)'ing DMA-safe memory.  May be called by
 * bus-specific DMA mmap(2)'ing functions.
 */
paddr_t
_bus_dmamem_mmap(t, segs, nsegs, off, prot, flags)
        bus_dma_tag_t t;
        bus_dma_segment_t *segs;
        int nsegs;
        off_t off;
        int prot, flags;
{
        int i;

        for (i = 0; i < nsegs; i++) {
#ifdef DIAGNOSTIC
                if (off & PGOFSET)
                        panic("_bus_dmamem_mmap: offset unaligned");
                if (PCI_MEM_TO_PHYS(segs[i].ds_addr) & PGOFSET)
                        panic("_bus_dmamem_mmap: segment unaligned");
                if (segs[i].ds_len & PGOFSET)
                        panic("_bus_dmamem_mmap: segment size not multiple"
                            " of page size");
#endif
                if (off >= segs[i].ds_len) {
                        off -= segs[i].ds_len;
                        continue;
                }

                return (PCI_MEM_TO_PHYS(segs[i].ds_addr) + off);
        }

        /* Page not found. */
        return (-1);
}

/*
 * Allocate physical memory from the given physical address range.
 * Called by DMA-safe memory allocation methods.
 */
int
_bus_dmamem_alloc_range(t, size, alignment, boundary, segs, nsegs, rsegs,
    flags, low, high)
        bus_dma_tag_t t;
        bus_size_t size, alignment, boundary;
        bus_dma_segment_t *segs;
        int nsegs;
        int *rsegs;
        int flags;
        paddr_t low;
        paddr_t high;
{
        paddr_t curaddr, lastaddr;
        struct vm_page *m;
        struct pglist mlist;
        int curseg, error, plaflag;

        /* Always round the size. */
        size = round_page(size);

        /*
         * Allocate pages from the VM system.
         */
	plaflag = flags & BUS_DMA_NOWAIT ? UVM_PLA_NOWAIT : UVM_PLA_WAITOK;
	if (flags & BUS_DMA_ZERO)
		plaflag |= UVM_PLA_ZERO;

        TAILQ_INIT(&mlist);
        error = uvm_pglistalloc(size, low, high, alignment, boundary,
            &mlist, nsegs, plaflag);
        if (error)
                return (error);

        /*
         * Compute the location, size, and number of segments actually
         * returned by the VM code.
         */
        m = TAILQ_FIRST(&mlist);
        curseg = 0;
        lastaddr = VM_PAGE_TO_PHYS(m);
        segs[curseg].ds_addr = PHYS_TO_PCI_MEM(lastaddr);
        segs[curseg].ds_len = PAGE_SIZE;
	m = TAILQ_NEXT(m, pageq);

	for (; m != TAILQ_END(&mlist); m = TAILQ_NEXT(m, pageq)) {
                curaddr = VM_PAGE_TO_PHYS(m);
#ifdef DIAGNOSTIC
                if (curaddr < low || curaddr >= high) {
                        printf("vm_page_alloc_memory returned non-sensical"
                            " address 0x%lx\n", curaddr);
                        panic("_bus_dmamem_alloc_range");
                }
#endif
                if (curaddr == (lastaddr + PAGE_SIZE))
                        segs[curseg].ds_len += PAGE_SIZE;
                else {
                        curseg++;
                        segs[curseg].ds_addr = PHYS_TO_PCI_MEM(curaddr);
                        segs[curseg].ds_len = PAGE_SIZE;
                }
                lastaddr = curaddr;
        }

        *rsegs = curseg + 1;

        return (0);
}

@


1.29
log
@Fix the error path in bus_dmamem_map.
As discussed on icb: remove the comment,
remove pmap_remove (uvm_km_free does that for us).

ok oga@@, deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.28 2010/12/26 15:40:59 miod Exp $        */
@


1.28
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.27 2010/06/26 23:24:44 guenther Exp $        */
a514 4
                                /*
                                 * Clean up after ourselves.
                                 * XXX uvm_wait on WAITOK
                                 */
d516 1
a516 1
                                uvm_km_free(kernel_map, va, ssize);
@


1.27
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.26 2010/03/29 19:21:58 oga Exp $        */
d580 1
a580 1
                return (atop(PCI_MEM_TO_PHYS(segs[i].ds_addr) + off));
@


1.26
log
@PMAP_CANFAIL for bus_dmamem_map on all other architectures (and some
whitespace tweaks on i386 so that it matches).

ok kettenis@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.25 2009/06/07 16:02:41 miod Exp $        */
a35 1
#include <sys/user.h>
@


1.25
log
@Do not look at the avail_{start,end} members from vm_physmem[] anymore.
These values were used to eventually pass ranges to uvm_pglistalloc(),
which has been fixed to correctly skip no-memory ranges a lot of time ago;
however mvme68k would still use the computed range and osiop would no
longer attach; this repairs it.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.24 2009/04/20 00:42:06 oga Exp $        */
d489 2
a490 1
        vaddr_t va;
d492 1
a492 1
        int curseg;
d503 2
d512 12
a523 3
                        pmap_enter(pmap_kernel(), va, addr,
                            VM_PROT_READ | VM_PROT_WRITE,
                            VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED);
@


1.24
log
@Add a BUS_DMA_ZERO flag for bus_dmamem_alloc() to return zeroed memory.

Saves every damned driver calling bzero(), and continues the M_ZERO,
PR_ZERO symmetry.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.23 2009/04/14 16:01:04 oga Exp $        */
a439 10
        paddr_t avail_start = 0xffffffff, avail_end = 0;
        int bank;

        for (bank = 0; bank < vm_nphysseg; bank++) {
                if (avail_start > vm_physmem[bank].avail_start << PGSHIFT)
                        avail_start = vm_physmem[bank].avail_start << PGSHIFT;
                if (avail_end < vm_physmem[bank].avail_end << PGSHIFT)
                        avail_end = vm_physmem[bank].avail_end << PGSHIFT;
        }

@


1.23
log
@Convert the waitok field of uvm_pglistalloc to "flags", more will be added soon.

For the possibility of sleeping, the first two flags are UVM_PLA_WAITOK
and UVM_PLA_NOWAIT. It is an error not to show intention, so assert that
one of the two is provided. Switch over every caller in the tree to
using the appropriate flag.

ok art@@, ariane@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.22 2009/03/07 15:34:34 miod Exp $        */
d614 2
@


1.22
log
@When allocating memory in bus_dmamem_alloc() with uvm_pglistalloc(), do not
try to be smart for the address range, uvm_pglistalloc() is smart enough
nowadays.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.21 2008/06/26 05:42:12 ray Exp $        */
d605 1
a605 1
        int curseg, error;
d613 2
d617 1
a617 1
            &mlist, nsegs, (flags & BUS_DMA_NOWAIT) == 0);
@


1.21
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.20 2007/10/06 23:12:17 krw Exp $        */
d451 1
a451 1
            nsegs, rsegs, flags, avail_start, avail_end - PAGE_SIZE);
@


1.20
log
@Some archs used memset() rather than bzero(). So duplicate diff
previously applied to other archs deleting a memset() this time. e.g.

-	if ((mapstore = malloc(mapsize, M_DEVBUF,
-	    (flags & BUS_DMA_NOWAIT) ? M_NOWAIT : M_WAITOK)) == NULL)
+	if ((mapstore = malloc(mapsize, M_DEVBUF, (flags & BUS_DMA_NOWAIT) ?
+	    (M_NOWAIT | M_ZERO) : (M_WAITOK | M_ZERO))) == NULL)
 		return (ENOMEM);

-	memset(mapstore, 0, mapsize);
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.19 2007/09/03 01:09:09 krw Exp $        */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.19
log
@Typos from miod. 'functin' -> 'functin' in some comments.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.18 2005/10/26 18:57:51 martin Exp $        */
d96 2
a97 2
        if ((mapstore = malloc(mapsize, M_DEVBUF,
            (flags & BUS_DMA_NOWAIT) ? M_NOWAIT : M_WAITOK)) == NULL)
a99 1
        memset(mapstore, 0, mapsize);
@


1.18
log
@Mach-macro wipeout

'do it' deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.17 2004/12/25 23:02:25 miod Exp $        */
d559 1
a559 1
 * Common functin for mmap(2)'ing DMA-safe memory.  May be called by
@


1.17
log
@Use list and queue macros where applicable to make the code easier to read;
no functional change.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.16 2004/11/09 19:17:01 claudio Exp $        */
d587 1
a587 1
                return (powerpc_btop(PCI_MEM_TO_PHYS(segs[i].ds_addr) + off));
@


1.16
log
@Do not map empty mbufs (m_len == 0) in bus_dmamap_load_mbuf() as these mappings
may disturb the dma as seen in ipw(4). Emtpy mbufs are at the beginning of the
mbuf chain and are as example a "side-effect" of a previous m_adj() call.
OK miod@@ mickey@@ jason@@ markus@@
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.15 2004/05/14 20:38:00 miod Exp $        */
d631 1
a631 1
        m = mlist.tqh_first;
d636 1
a636 1
        m = m->pageq.tqe_next;
d638 1
a638 1
        for (; m != NULL; m = m->pageq.tqe_next) {
@


1.15
log
@Correctly coalesce buffers in _bus_dmamap_load_buffer().
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.14 2004/05/08 20:12:23 miod Exp $        */
d302 2
@


1.14
log
@Better bus_dmamap_load() implementation which does not use vtophys(),
from macppc.

Also properly handle BUS_DMASYNC_PREREAD | BUS_DMASYNC_PREWRITE in
bus_dmamap_sync().
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.13 2004/01/29 20:26:48 miod Exp $        */
d207 1
a207 1
                             (curaddr & bmask)))
@


1.13
log
@In bus_dmamap_sync(), be sure to flush a host pa.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.12 2003/06/02 07:07:25 deraadt Exp $        */
d150 6
d164 4
a167 5
                if (p != NULL)
                        (void) pmap_extract(p->p_vmspace->vm_map.pmap,
                            vaddr, (paddr_t *)&curaddr);
                else
                        curaddr = vtophys(vaddr);
d423 8
a430 10
	switch (op) {
	case BUS_DMASYNC_POSTREAD:
	case BUS_DMASYNC_POSTWRITE:
	case BUS_DMASYNC_PREWRITE:
	case BUS_DMASYNC_PREREAD:
		for (i = map->dm_nsegs; i--; )
			invdcache((void *)PCI_MEM_TO_PHYS(map->dm_segs[i].ds_addr), 
			    len);
		break;
	}
@


1.12
log
@licence cleanup
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.11 2002/10/07 18:35:56 mickey Exp $        */
d424 1
a424 1
			invdcache((void *)map->dm_segs[i].ds_addr, 
d582 1
a582 1
                return (PCI_MEM_TO_PHYS(segs[i].ds_addr) + off);
@


1.11
log
@this removes the functionality of adding allocated
pages into the queue already containing allocated pages.
breaks i386:setup_buffers() because of this.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.10 2002/10/06 22:06:15 art Exp $        */
d333 3
@


1.10
log
@No more need to initialize the result list before uvm_pglistalloc.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.9 2001/12/08 02:24:06 art Exp $        */
d613 1
@


1.9
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.8 2001/11/09 15:14:13 art Exp $        */
a612 1
        TAILQ_INIT(&mlist);
@


1.9.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.9 2001/12/08 02:24:06 art Exp $        */
@


1.8
log
@unbreak
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.7 2001/11/06 19:53:15 miod Exp $        */
d524 1
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.6 2001/11/05 17:25:58 art Exp $        */
d421 1
a421 1
			invdcache(map->dm_segs[i].ds_addr, 
@


1.6
log
@Switch everything to the new bus_dmamap_sync API.
Most work by Wilbern Cobb <vedge@@csoft.org> with some fixes from me, mickey@@
and drahn@@.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.5 2001/09/19 20:50:57 mickey Exp $        */
a53 1
#include <vm/vm.h>
@


1.5
log
@merge vm/vm_kern.h into uvm/uvm_extern.h; art@@ ok
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.4 2001/07/25 13:25:32 art Exp $        */
d408 1
a408 1
_bus_dmamap_sync(t, map, op)
d411 3
a413 1
	bus_dmasync_op_t op;
d423 1
a423 1
					map->dm_segs[i].ds_len);
@


1.4
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.3 2001/07/04 08:31:33 niklas Exp $        */
a54 1
#include <vm/vm_kern.h>
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.2 2001/06/10 02:31:25 briggs Exp $        */
d520 2
a521 2
                            VM_PROT_READ | VM_PROT_WRITE, TRUE,
                            VM_PROT_READ | VM_PROT_WRITE);
@


1.2
log
@whack old vm
@
text
@d1 1
@


1.2.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*      $OpenBSD$        */
d54 1
d519 2
a520 2
                            VM_PROT_READ | VM_PROT_WRITE,
                            VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED);
@


1.2.2.2
log
@Merge in -current
@
text
@d54 1
d408 1
a408 1
_bus_dmamap_sync(t, map, offset, len, op)
d411 1
a411 3
	bus_addr_t offset;
	bus_size_t len;
	int op;
d420 2
a421 2
			invdcache((void *)map->dm_segs[i].ds_addr, 
			    len);
@


1.2.2.3
log
@Merge in trunk
@
text
@a523 1
	pmap_update(pmap_kernel());
@


1.2.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*      $OpenBSD: bus_dma.c,v 1.2.2.3 2002/03/06 02:04:46 niklas Exp $        */
a332 3

	if (resid > map->_dm_size)
		return (EINVAL);
@


1.2.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*      $OpenBSD$        */
d424 1
a424 1
			invdcache((void *)PCI_MEM_TO_PHYS(map->dm_segs[i].ds_addr), 
d582 1
a582 1
                return (powerpc_btop(PCI_MEM_TO_PHYS(segs[i].ds_addr) + off));
@


1.2.2.6
log
@Merge with the trunk
@
text
@a149 6
	pmap_t pmap;

	if (p != NULL)
		pmap = p->p_vmspace->vm_map.pmap;
	else
		pmap = pmap_kernel();
d158 5
a162 4
		if (pmap_extract(pmap, vaddr, (paddr_t *)&curaddr) == FALSE) {
			panic("dmamap_load_buffer pmap %p vaddr %lx "
			    "pmap_extract failed", pmap, vaddr);
		}
d202 1
a202 1
                             (PHYS_TO_PCI_MEM(curaddr) & bmask)))
d418 10
a427 8

	/* XXX and if it's not a PCI device??? */
	if ((op & (BUS_DMASYNC_PREREAD | BUS_DMASYNC_PREWRITE)) == 0)
		return;

	for (i = map->dm_nsegs; i--; )
		invdcache((void *)PCI_MEM_TO_PHYS(map->dm_segs[i].ds_addr), 
		    len);
@


1.1
log
@Initial import of mvmeppc.
@
text
@a54 1
#ifdef UVM
a56 2
#else
#endif
@

