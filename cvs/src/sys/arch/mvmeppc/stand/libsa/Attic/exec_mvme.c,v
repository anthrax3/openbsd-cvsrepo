head	1.9;
access;
symbols
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2011.07.07.19.16.43;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2004.01.29.21.30.04;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.28.23.46.40;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.24.22.15.34;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.24.21.12.22;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.01.01.11.12;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.04.08.31.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.21.58.07;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.10.31.03.01.21;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.06.07.11.13.18;	author ho;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.49.10;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@/*	$OpenBSD: exec_mvme.c,v 1.8 2004/01/29 21:30:04 miod Exp $	*/

/*-
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	@@(#)boot.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <sys/exec_elf.h>

#include <machine/prom.h>

#include <lib/libkern/libkern.h>
#include <lib/libsa/stand.h>
#include <lib/libsa/loadfile.h>

#include "libsa.h"

/*ARGSUSED*/
void
exec_mvme(file, flag)
	char    *file;
	int     flag;
{
	int fd;
	u_long marks[MARK_MAX];
	void (*entry)();
	u_long *entryp;
	void *esym;
	int bootdev;

#ifdef DEBUG
	printf("exec_mvme: file=%s flag=0x%x cputyp=%x\n", file, flag, bugargs.cputyp);
#endif

	fd = open(file, 0);
	if (fd < 0)
		return;

	printf("Booting %s...", file);
	marks[MARK_START] = 0;
	if (loadfile(file, marks, LOAD_ALL) >= 0) {
		close(fd);

		entryp = (u_long *)&entry;
		*entryp = marks[MARK_ENTRY];
		esym = (void *)marks[MARK_END];

		printf("Start @@ 0x%x\n", (unsigned int)entry);
		printf("Controller Address 0x%x\n", bugargs.ctrl_addr);
		if (flag & RB_HALT)
			mvmeprom_return();

		bootdev = (bugargs.ctrl_lun << 8) | (bugargs.dev_lun & 0xFF);
		/*
		 * Arguments to start on mvmeppc:
		 * r1 - stack provided by firmware/bootloader
		 * r3 - boot flags
		 * r4 - boot device
		 * r5 - firmware pointer (NULL for PPC1bug)
		 * r6 - arg list
		 * r7 - arg list length
		 * r8 - end of symbol table
		 */
		/*       r3                 r4       r5    r6    r7 r8 */
	 	(*entry)(flag, bootdev, NULL, NULL, 0, esym);

		printf("exec: kernel returned!\n");
	} else {
		close(fd);
	}
}
@


1.8
log
@Have the bootloader pass RB_ flags, as well as the boot device, to the kernel,
and have the kernel process them correctly.

Right now code to match the BUG's idea of the boot device with the kernel's is
missing.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.7 2004/01/28 23:46:40 miod Exp $	*/
@


1.7
log
@Better fix the typo for real, this time. Oops.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.6 2004/01/24 22:15:34 miod Exp $	*/
d82 2
a83 1
		/* arguments to start
d85 2
a86 2
		 * r3 - unused
		 * r4 - unused
d88 1
a88 1
		 * r6 - arg list (currently empty)
d93 1
a93 1
	 	(*entry)(bugargs.ctrl_addr, bootdev, NULL, NULL, 0, esym);
@


1.6
log
@Switch libsa to use loadfile()
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.5 2004/01/24 21:12:22 miod Exp $	*/
d77 1
a77 1
		printf("Controler Address 0x%x\n", bugargs.ctrl_addr);
@


1.5
log
@RB_xxx constants and values cleanup.
@
text
@d1 1
a1 2
/*	$OpenBSD: exec_mvme.c,v 1.4 2004/01/01 01:11:12 miod Exp $	*/

a35 2
#include <machine/prom.h>
#include <a.out.h>
d38 1
a38 2
#include "stand.h"
#include "libsa.h"
d40 3
a42 1
vaddr_t ssym, esym;
d44 1
a44 131
int
load_elf(fd, elf, entryp, esymp)
	int fd;
	Elf32_Ehdr *elf;
	u_int32_t *entryp;
	void **esymp;
	
{
	Elf32_Shdr *shpp;
	Elf32_Off off;
	Elf32_Ehdr *elfp;
	void *addr;
	size_t size;
	int n, havesyms, i, first = 1;
	size_t sz;
	
	void *maxp = 0; /*  correct type? */
	
	/*
	 * Don't display load address for ELF; it's encoded in
	 * each section.
	 */

	for (i = 0; i < elf->e_phnum; i++) {
		Elf32_Phdr phdr;
		(void)lseek(fd, elf->e_phoff + sizeof(phdr) * i, SEEK_SET);
		if (read(fd, (void *)&phdr, sizeof(phdr)) != sizeof(phdr)) {
			printf("read phdr: %s\n", strerror(errno));
			return (1);
		}
		if (phdr.p_type != PT_LOAD ||
		    (phdr.p_flags & (PF_W|PF_X)) == 0)
			continue;

		/* Read in segment. */
		printf("%s%lu@@0x%lx", first ? "" : "+", phdr.p_filesz,
		    (u_long)phdr.p_vaddr);
		(void)lseek(fd, phdr.p_offset, SEEK_SET);
		maxp = maxp > (void *)(phdr.p_vaddr+ phdr.p_memsz) ?
			maxp : (void *)(phdr.p_vaddr+ phdr.p_memsz);
		if (read(fd, (void *)phdr.p_vaddr, phdr.p_filesz) !=
		    phdr.p_filesz) {
			printf("read segment: %s\n", strerror(errno));
			return (1);
		}
		syncicache((void *)phdr.p_vaddr, phdr.p_filesz);

		/* Zero BSS. */
		if (phdr.p_filesz < phdr.p_memsz) {
			printf("+%lu@@0x%lx", phdr.p_memsz - phdr.p_filesz,
			    (u_long)(phdr.p_vaddr + phdr.p_filesz));
			bzero((void *)(phdr.p_vaddr + phdr.p_filesz),
			    phdr.p_memsz - phdr.p_filesz);
		}
		first = 0;
	}

#if 1
	/*
	 * Copy the ELF and section headers.
	 */
	maxp = (void *)roundup((long)maxp, sizeof(long));
	(void *)ssym = elfp = maxp; /* mark the start of the symbol table */
	
	maxp += sizeof(Elf_Ehdr);

	if (lseek(fd, elf->e_shoff, SEEK_SET) == -1)  {
		printf("lseek section headers: %s\n", strerror(errno));
		return 1;
	}
	sz = elf->e_shnum * sizeof(Elf_Shdr);
		
	shpp = maxp;
	maxp += roundup(sz, sizeof(long)); 

	if (read(fd, shpp, sz) != sz) {
		printf("read section headers: %s\n", strerror(errno));
		return 1;
	}
	/*
	 * Now load the symbol sections themselves.  Make sure the
	 * sections are aligned. Don't bother with string tables if
	 * there are no symbol sections.
	 */
	off = roundup((sizeof(Elf_Ehdr) + sz), sizeof(long));
	
	for (havesyms = i = 0; i < elf->e_shnum; i++)
		if (shpp[i].sh_type == SHT_SYMTAB)
			havesyms = 1;
	if (!havesyms)
		goto no_syms;

	for (first = 1, i = 0; i < elf->e_shnum; i++) {
		if (shpp[i].sh_type == SHT_SYMTAB ||
		    shpp[i].sh_type == SHT_STRTAB) {
			printf("%s%ld", first ? " [" : "+",
			    (u_long)shpp[i].sh_size);
			if (lseek(fd, shpp[i].sh_offset, SEEK_SET) == -1) {
				printf("lseek symbols: %s\n", strerror(errno));
				return 1;
			}
			if (read(fd, maxp, shpp[i].sh_size) != shpp[i].sh_size) {
				printf("read symbols: %s\n", strerror(errno));
				return 1;
			}
			maxp += roundup(shpp[i].sh_size, sizeof(long));
			shpp[i].sh_offset = off;
			off += roundup(shpp[i].sh_size, sizeof(long));
			first = 0;
		}
	}
	if (first == 0)
		printf("]");

	/*
	 * Frob the copied ELF header to give information relative
	 * to elfp.
	 */
	elf->e_phoff = 0;
	elf->e_shoff = sizeof(Elf_Ehdr);
	elf->e_phentsize = 0;
	elf->e_phnum = 0;
	bcopy(elf, elfp, sizeof(*elf));

#endif
no_syms:
	*esymp = (void *)esym = maxp; /* mark end of symbol table */
	*entryp = elf->e_entry;
	printf(" \n");
	return (0);
}
d49 2
a50 2
char    *file;
int     flag;
d52 2
a53 5
	char *loadaddr;
	register int io;
	Elf32_Ehdr hdr;
	struct exec x;
	int cc, magic;
d55 1
a56 3
	register char *cp;
	register int *ip;
	int n;
a57 2
	int rval = 1; 
	char dummy[]="\0";
d63 2
a64 2
	io = open(file, 0);
	if (io < 0)
d67 28
a94 11
	printf("Booting %s\n", file);
	/*
	 * Read in the exec header, and validate it.
	 */
	if (read(io, &hdr, sizeof(hdr)) != sizeof(hdr)) {
		printf("read header: %s\n", strerror(errno));
		goto shread;
	}
	
	if (IS_ELF(hdr)) {
		rval = load_elf(io, &hdr, &entry, &esym);
d96 1
a96 3
		printf("unknown executable format\n");
		errno = EFTYPE;
		goto closeout;
a97 31
	if (rval)
		goto closeout;

	close(io);

	printf("Start @@ 0x%x\n", (int)entry);
	printf("Controler Address 0x%x\n", bugargs.ctrl_addr);
	if (flag & RB_HALT) mvmeprom_return();

	bootdev = (bugargs.ctrl_lun << 8) | (bugargs.dev_lun & 0xFF);

/* arguments to start 
 * r1 - stack provided by firmware/bootloader
 * r3 - unused
 * r4 - unused
 * r5 - firmware pointer (NULL for PPC1bug)
 * r6 - arg list
 * r7 - arg list length
 * r8 - end of symbol table
 */
/*               r3                 r4       r5    r6      r7 r8 */
 	(*entry)(bugargs.ctrl_addr, bootdev, NULL, &dummy, 0, esym);
	printf("exec: kernel returned!\n");
	return;

shread:
	printf("exec: short read\n");
	errno = EIO;
closeout:
	close(io);
	return;
@


1.4
log
@Some typos just never die (here controler vs controller).
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.3 2003/06/02 23:27:53 millert Exp $	*/
a43 5
#define RB_NOSYM 0x400
#define RB_MULTI 0x4000
#define RB_EXTRA 0x8000
#define RB_ASKKERN 0x0010  /* ask kernel name  */

d198 3
a200 3
	if (flag & RB_EXTRA) {
		printf("exec_mvme: file=%s flag=0x%x cputyp=%x\n", file, flag, bugargs.cputyp);
	}
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.2 2001/07/04 08:31:38 niklas Exp $	*/
d232 2
a233 2
	printf("Start @@ 0x%x ...\n", (int)entry);
	printf("Controler Address @@ %x ...\n", bugargs.ctrl_addr);
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@Initial import of mvmeppc.
@
text
@d1 2
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

@


1.1.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.1.2.1 2001/10/31 03:01:21 nate Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d37 2
d41 123
a163 1
#include <machine/prom.h>
d165 9
a173 3
#include <lib/libkern/libkern.h>
#include <lib/libsa/stand.h>
#include <lib/libsa/loadfile.h>
d175 7
a181 1
#include "libsa.h"
d186 2
a187 2
	char    *file;
	int     flag;
d189 5
a193 2
	int fd;
	u_long marks[MARK_MAX];
a194 1
	u_long *entryp;
d196 3
d200 2
d203 3
a205 3
#ifdef DEBUG
	printf("exec_mvme: file=%s flag=0x%x cputyp=%x\n", file, flag, bugargs.cputyp);
#endif
d207 2
a208 2
	fd = open(file, 0);
	if (fd < 0)
d211 11
a221 29
	printf("Booting %s...", file);
	marks[MARK_START] = 0;
	if (loadfile(file, marks, LOAD_ALL) >= 0) {
		close(fd);

		entryp = (u_long *)&entry;
		*entryp = marks[MARK_ENTRY];
		esym = (void *)marks[MARK_END];

		printf("Start @@ 0x%x\n", (unsigned int)entry);
		printf("Controller Address 0x%x\n", bugargs.ctrl_addr);
		if (flag & RB_HALT)
			mvmeprom_return();

		bootdev = (bugargs.ctrl_lun << 8) | (bugargs.dev_lun & 0xFF);
		/*
		 * Arguments to start on mvmeppc:
		 * r1 - stack provided by firmware/bootloader
		 * r3 - boot flags
		 * r4 - boot device
		 * r5 - firmware pointer (NULL for PPC1bug)
		 * r6 - arg list
		 * r7 - arg list length
		 * r8 - end of symbol table
		 */
		/*       r3                 r4       r5    r6    r7 r8 */
	 	(*entry)(flag, bootdev, NULL, NULL, 0, esym);

		printf("exec: kernel returned!\n");
d223 3
a225 1
		close(fd);
d227 31
@


