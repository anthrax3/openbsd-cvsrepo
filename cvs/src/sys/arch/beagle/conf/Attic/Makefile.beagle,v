head	1.46;
access;
symbols
	OPENBSD_5_4:1.44.0.2
	OPENBSD_5_4_BASE:1.44
	OPENBSD_5_3:1.40.0.2
	OPENBSD_5_3_BASE:1.40
	OPENBSD_5_2:1.38.0.4
	OPENBSD_5_2_BASE:1.38
	OPENBSD_5_1_BASE:1.38
	OPENBSD_5_1:1.38.0.2
	OPENBSD_5_0:1.35.0.2
	OPENBSD_5_0_BASE:1.35
	OPENBSD_4_9:1.32.0.2
	OPENBSD_4_9_BASE:1.32
	OPENBSD_4_8:1.29.0.2
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@# @;


1.46
date	2013.09.04.14.38.34;	author patrick;	state dead;
branches;
next	1.45;

1.45
date	2013.08.02.09.09.17;	author rapha;	state Exp;
branches;
next	1.44;

1.44
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2013.05.31.19.24.16;	author rapha;	state Exp;
branches;
next	1.42;

1.42
date	2013.04.30.13.57.02;	author patrick;	state Exp;
branches;
next	1.41;

1.41
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.40;

1.40
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.39;

1.39
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.38;

1.38
date	2012.01.28.21.56.53;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.36;

1.36
date	2011.10.17.02.59.48;	author drahn;	state Exp;
branches;
next	1.35;

1.35
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2011.07.06.02.08.04;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2010.12.30.18.49.30;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.05.25.15.05.00;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.24.23.19.21;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.24.14.59.15;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.28.15.31.32;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.19;

1.19
date	2010.04.27.16.54.53;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.27.16.50.14;	author jsg;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.27.15.33.08;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.27.06.46.25;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.27.05.07.28;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.27.04.31.46;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.26.22.21.14;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.26.20.52.50;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.12.17.37.06;	author mk;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.10.20.36.03;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.24.21.02.48;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.08.03.13.26;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.46
log
@In the future, we shouldn't have one port port ARM SoC, that's just
ridiculous.  This is the first step for a common and generic ARM port
for ARMv7 SoCs.
@
text
@#	$OpenBSD: Makefile.beagle,v 1.45 2013/08/02 09:09:17 rapha Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I. -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-main -Wno-uninitialized -Wno-format \
		-Wstack-larger-than-2047

CMACHFLAGS=	-ffreestanding -msoft-float -march=armv6
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ldscript --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	${_mach}_start.o locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD_HEAD+=; \
		cat ${_archdir}/conf/ldscript.head ${_archdir}/conf/ldscript.tail | \
		    sed -e 's/@@KERNEL_BASE_PHYS@@/${KERNEL_BASE_PHYS}/' \
		    -e 's/@@KERNEL_BASE_VIRT@@/${KERNEL_BASE_VIRT}/' > ldscript

SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-x
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
	rm -f db_structinfo.o

${_mach}_start.o: ${_machdir}/${_mach}/${_mach}_start.S
locore.o: ${_archdir}/${_arch}/locore.S assym.h
in_cksum_arm.o fiq_subr.o bcopyinout.o copystr.o sigcode.o: assym.h
vectors.o cpuswitch7.o exception.o bcopy_page.o irq_dispatch.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif


# until we get native booting working, put this in the tree.

bsdrd.umg: bsd.rd
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsd.rd bsdrd.umg

bsd.umg: bsd
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsd bsd.umg

bsd.rd: bsd
	cp bsd bsd.rd
	$S/../distrib/${_mach}/ramdisk/rdsetroot < $S/../distrib/${_mach}/ramdisk/mr.fs bsd.rd

%RULES
@


1.45
log
@Drop the dependecy on objcopy.

ok florian@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.44 2013/06/23 20:33:51 miod Exp $
@


1.44
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.43 2013/05/31 19:24:16 rapha Exp $
a57 2
OBJCOPY?=	objcopy

a177 5
bsdrd.img: bsd.rd
	${OBJCOPY} -O binary bsd.rd bsdrd.img

bsd.img: bsd
	${OBJCOPY} -O binary bsd bsd.img
d179 2
a180 2
bsdrd.umg: bsdrd.img
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsdrd.img bsdrd.umg
d182 2
a183 2
bsd.umg: bsd.img
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsd.img bsd.umg
@


1.43
log
@Change option -mcpu=armv5 to -march=armv6 and move it to Makefile.beagle.

ok bmercer@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.42 2013/04/30 13:57:02 patrick Exp $
d40 1
a40 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CMACHFLAGS}
@


1.42
log
@Fix beagle makefile dependency after switching to new context switching
code.

ok bmercer@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.41 2013/03/30 07:25:20 tedu Exp $
d30 1
a30 1
CMACHFLAGS=	-ffreestanding -msoft-float # -march=armv4 -mtune=strongarm
@


1.41
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.40 2012/08/28 21:03:32 pascal Exp $
d150 1
a150 1
vectors.o cpuswitch.o exception.o bcopy_page.o irq_dispatch.o: assym.h
@


1.40
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.39 2012/08/22 16:58:26 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.39
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.38 2012/01/28 21:56:53 miod Exp $
d41 1
a41 1
LINKFLAGS=	-T ldscript --warn-common
@


1.38
log
@Provide a default value for ${OBJCOPY} for native muilds.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.37 2011/11/08 18:41:34 matthieu Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc
@


1.37
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.36 2011/10/17 02:59:48 drahn Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
d57 2
@


1.36
log
@Rules to build bsd.rd and bsd.umg, Should not be here, but until we get
bootloader working and rather than have several people maintain this
in their own trees... As soon as a bootloader is written this can be removed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.35 2011/07/07 22:28:18 guenther Exp $
a12 1
MKDEP?=	mkdep
@


1.35
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.34 2011/07/06 02:08:04 tedu Exp $
d176 18
@


1.34
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.33 2011/04/15 02:41:28 guenther Exp $
d168 5
a172 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.33
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.32 2010/12/30 18:49:30 deraadt Exp $
d127 1
a127 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.32
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.31 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d71 2
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d97 5
d105 2
a106 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d135 3
a140 14
AFILES=	${_machdir}/${_mach}/${_mach}_start.S ${_archdir}/${_arch}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d142 1
a142 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d161 12
@


1.31
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.30 2010/12/02 04:35:02 deraadt Exp $
d99 2
a100 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.30
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.29 2010/06/01 23:49:22 deraadt Exp $
d70 2
a71 2
SYSTEM_OBJ=	${_mach}_start.o locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d78 2
a79 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.29
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.28 2010/05/28 14:27:08 guenther Exp $
d70 1
a70 1
SYSTEM_OBJ=	${_mach}_start.o locore.o param.o ioconf.o ${OBJS}
d78 2
a79 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.28
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.27 2010/05/25 17:27:55 deraadt Exp $
d42 1
a42 3
LINKFLAGS=	-T ldscript
LINKFLAGS+=	--warn-common
STRIPFLAGS=	-g -x
d85 1
@


1.27
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.26 2010/05/25 15:05:00 deraadt Exp $
d100 1
a100 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.26
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.25 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		beagle
_arch?=		arm
@


1.25
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.24 2010/05/24 23:19:21 deraadt Exp $
d154 1
a154 3
${_mach}_start.o: ${_machdir}/${_mach}/${_mach}_start.S assym.h
	${NORMAL_S}

d156 2
a157 1
	${NORMAL_S}
@


1.24
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.23 2010/05/24 17:49:37 deraadt Exp $
a135 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d137 1
a137 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.23
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.22 2010/05/24 14:59:15 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d46 1
a46 1
STRIPFLAGS=	-g -X -x
a122 1

d125 1
a125 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d135 2
a136 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_archdir}/${_arch}/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
d139 1
a139 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_archdir}/${_arch}/locore.S
@


1.22
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.21 2010/04/28 15:31:32 deraadt Exp $
d150 1
a150 1
.if ${SFILES} != ""
@


1.21
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.20 2010/04/27 17:25:19 drahn Exp $
d28 3
a30 3
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${_mach}__
CDIAGFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main \
d33 4
a36 2
CMACHFLAGS= -ffreestanding
#CMACHFLAGS=	-march=armv4 -mtune=strongarm -ffreestanding
a39 2
CMACHFLAGS+=	-msoft-float -fno-builtin-printf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc
d42 2
a43 2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -D_LOCORE ${CMACHFLAGS}
d54 1
a54 1
HOSTCC= ${CC}
d57 1
a57 5

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a60 2
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

a61 3
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d76 1
a76 1
SYSTEM_LD_HEAD=	rm -f $@@
d111 1
a111 1
	${NORMAL_C_C}
d125 1
a125 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d129 1
a129 1
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
@


1.20
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.19 2010/04/27 16:54:53 deraadt Exp $
d59 1
a59 1
# where TYPE is NORMAL, DRIVER, or PROFILE; SUFFIX is the file suffix,
a65 3

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
@


1.19
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.18 2010/04/27 16:50:14 jsg Exp $
d27 1
a27 1
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
d30 2
a31 1
		-Wno-uninitialized -Wno-format -Wno-main
a43 2
#LINKFLAGS=	-Ttext 0xF0000020 -e start --warn-common
#LINKFLAGS=	-T ${_machdir}/conf/kern.ldscript
d102 3
a104 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
d167 2
a168 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.18
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.17 2010/04/27 15:33:08 deraadt Exp $
d156 1
a156 1
SRCS=	${_archdir}/arm/locore.S \
d160 1
a160 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_archdir}/arm/locore.S
d178 1
a178 1
locore.o: ${_archdir}/arm/locore.S assym.h
@


1.17
log
@teeny bit more unification
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.16 2010/04/27 06:46:25 deraadt Exp $
d37 2
a38 1
CMACHFLAGS+=	-msoft-float -fno-builtin-printf -fno-builtin-log
@


1.16
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.15 2010/04/27 05:07:28 deraadt Exp $
d90 3
a92 5
    ( cat ${_archdir}/conf/ldscript.head ;\
    cat ${_archdir}/conf/ldscript.tail ) |  \
	sed -e 's/@@KERNEL_BASE_PHYS@@/${KERNEL_BASE_PHYS}/' \
	-e 's/@@KERNEL_BASE_VIRT@@/${KERNEL_BASE_VIRT}/' \
     > ldscript
@


1.15
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.14 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/beagle/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/beagle/conf/Makefile.beagle
# after which config should be rerun for all machines of that type.
@


1.14
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.13 2010/04/27 04:31:46 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.13
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.12 2010/04/27 03:37:37 deraadt Exp $
d171 1
a171 1
.depend: ${SRCS} assym.h param.c ${APMINC} ${DB_STRUCTINFO}
@


1.12
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.11 2010/04/26 22:21:14 deraadt Exp $
d178 1
a178 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.11
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.10 2010/04/26 22:11:37 deraadt Exp $
a186 17


# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if.o if_tun.o if_loop.o if_ethersubr.o: Makefile
if_arp.o if_ether.o: Makefile
ip_input.o ip_output.o in_pcb.o in_proto.o: Makefile
tcp_subr.o tcp_timer.o tcp_output.o: Makefile

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile
@


1.10
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.9 2010/04/26 20:52:50 deraadt Exp $
a33 1
_machdir?=	$S/arch/beagle
d35 2
a36 1
_archdir?=	$S/arch/arm
@


1.9
log
@next unification step: remove bsd.rd test build goop
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.8 2010/04/26 20:50:16 deraadt Exp $
d123 5
a127 4
assym.h: $S/kern/genassym.sh ${_archdir}/arm/genassym.cf Makefile
	cat ${_archdir}/arm/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} \
	    ${CPPFLAGS} ${PARAM} > assym.h.tmp && \
d177 3
a179 3
	cat ${_archdir}/arm/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS}
@


1.8
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.7 2010/04/26 18:58:30 deraadt Exp $
a189 10

bsd.rd: bsd
		cp bsd bsd.rd
		$S/../distrib/${_mach}/ramdisk/rdsetroot < $S/../distrib/${_mach}/ramdisk/mr.fs bsd.rd

bsd.img: bsd.rd
	${OBJCOPY} -O binary bsd.rd bsd.img

bsd.umg: bsd.img
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsd.img bsd.umg
@


1.7
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.6 2010/02/12 17:37:06 mk Exp $
d32 5
a36 2
THISARM=	$S/arch/${BOARDTYPE}
ARM=	$S/arch/arm
d39 1
a39 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${BOARDTYPE}__
d54 1
a54 1
#LINKFLAGS=	-T ${THISARM}/conf/kern.ldscript
d97 1
a97 1
SYSTEM_OBJ=	${BOARDTYPE}_start.o locore.o param.o ioconf.o ${OBJS}
d101 2
a102 2
    ( cat ${ARM}/conf/ldscript.head ;\
    cat ${ARM}/conf/ldscript.tail ) |  \
d123 2
a124 2
assym.h: $S/kern/genassym.sh ${ARM}/arm/genassym.cf Makefile
	cat ${ARM}/arm/genassym.cf | \
d167 1
a167 1
SRCS=	${ARM}/arm/locore.S \
d171 1
a171 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${ARM}/arm/locore.S
d176 1
a176 1
	cat ${ARM}/arm/genassym.cf | \
d193 1
a193 1
		$S/../distrib/${BOARDTYPE}/ramdisk/rdsetroot < $S/../distrib/${BOARDTYPE}/ramdisk/mr.fs bsd.rd
d214 1
a214 1
${BOARDTYPE}_start.o: ${THISARM}/${BOARDTYPE}/${BOARDTYPE}_start.S assym.h
d217 1
a217 1
locore.o: ${ARM}/arm/locore.S assym.h
@


1.6
log
@Switch to using mkuboot for building the U-Boot image.

`looks right' drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.5 2010/02/10 20:36:03 drahn Exp $
a2 2
# Makefile for OpenBSD
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d49 1
a49 1
AFLAGS=		-x assembler-with-cpp -D_LOCORE ${CMACHFLAGS} 
d175 1
a175 1
	    ${CPPFLAGS} 
d197 3
a199 3
 
# depend on network or filesystem configuration 
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile 
d208 1
a208 1
# depend on CPU configuration 
@


1.5
log
@Unfortunately, newer versions of u-boot found on the beagle do not allow
the OS type of OpenBSD, so claim to be linux so u-boot is happy. Sigh.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.4 2009/10/19 19:46:56 guenther Exp $
d198 1
a198 1
	mkimage -C none -A arm -O Linux -e 0x80300000 -a 0x80300000 -d bsd.img bsd.umg
@


1.4
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.3 2009/08/09 23:04:49 miod Exp $
d198 1
a198 1
	mkimage -C none -A arm -O OpenBSD -e 0x80300000 -a 0x80300000 -d bsd.img bsd.umg
@


1.3
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.2 2009/05/24 21:02:48 drahn Exp $
d141 1
a141 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.2
log
@Device changes to go along with prcm rewrite.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.1 2009/05/08 03:13:26 drahn Exp $
d58 6
d148 1
a148 1
	    [Ee]rrs linterrs makelinks assym.h
d169 1
a169 1
.depend: ${SRCS} assym.h param.c ${APMINC}
d180 5
@


1.1
log
@Initial effort on a port to the omap35xx platform specifically beagleboard,
however other omap system may be supportable. Not functional until armv7
core changes are complete.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.2 2005/01/16 18:13:00 deraadt Exp $
d185 3
@

