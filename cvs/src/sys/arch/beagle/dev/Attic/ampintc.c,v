head	1.12;
access;
symbols
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2;
locks; strict;
comment	@ * @;


1.12
date	2013.05.01.00.16.26;	author patrick;	state dead;
branches;
next	1.11;

1.11
date	2013.04.26.00.09.14;	author patrick;	state Exp;
branches;
next	1.10;

1.10
date	2013.04.25.22.14.17;	author patrick;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.15.23.17.01;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.10.19.37.01;	author uwe;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.10.00.19.36;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.09.00.17.15;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.09.00.15.06;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.07.20.25.27;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.06.01.34.53;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.15.13.51;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.05.11.48.26;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add a cortex bus which represents the ARM MPCore Complex.
It will attach only to ARM Cortex A9 and A15 SoCs.
The generic interrupt controller and timer will attach to this bus,
later a secondary cache controller can be added.
The base address for those controllers are figured out using
the periphbase register.

ok bmercer@@
@
text
@/* $OpenBSD: ampintc.c,v 1.11 2013/04/26 00:09:14 patrick Exp $ */
/*
 * Copyright (c) 2007,2009,2011 Dale Rahn <drahn@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * This driver implements the interrupt controller as specified in 
 * DDI0407E_cortex_a9_mpcore_r2p0_trm with the 
 * IHI0048A_gic_architecture_spec_v1_0 underlying specification
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/evcount.h>
#include <arm/cpufunc.h>
#include <machine/bus.h>
#include <beagle/dev/omapvar.h>

/* registers */
#define	ICD_DCR			0x000
#define		ICD_DCR_ES		0x00000001
#define		ICD_DCR_ENS		0x00000002

#define ICD_ICTR			0x004
#define		ICD_ICTR_LSPI_SH	11
#define		ICD_ICTR_LSPI_M		0x1f
#define		ICD_ICTR_CPU_SH		5
#define		ICD_ICTR_CPU_M		0x07
#define		ICD_ICTR_ITL_SH		0
#define		ICD_ICTR_ITL_M		0x1f
#define ICD_IDIR			0x008
#define 	ICD_DIR_PROD_SH		24
#define 	ICD_DIR_PROD_M		0xff
#define 	ICD_DIR_REV_SH		12
#define 	ICD_DIR_REV_M		0xfff
#define 	ICD_DIR_IMP_SH		0
#define 	ICD_DIR_IMP_M		0xfff

#define IRQ_TO_REG32(i)		(((i) >> 5) & 0x7)
#define IRQ_TO_REG32BIT(i)	((i) & 0x1f)
#define IRQ_TO_REG4(i)		(((i) >> 2) & 0x3f)
#define IRQ_TO_REG4BIT(i)	((i) & 0x3)
#define IRQ_TO_REG16(i)		(((i) >> 4) & 0xf)
#define IRQ_TO_REGBIT_S(i)	8
#define IRQ_TO_REG4BIT_M(i)	8

#define ICD_ISRn(i)		(0x080 + (IRQ_TO_REG32(i) * 4))
#define ICD_ISERn(i)		(0x100 + (IRQ_TO_REG32(i) * 4))
#define ICD_ICERn(i)		(0x180 + (IRQ_TO_REG32(i) * 4))
#define ICD_ISPRn(i)		(0x200 + (IRQ_TO_REG32(i) * 4))
#define ICD_ICPRn(i)		(0x280 + (IRQ_TO_REG32(i) * 4))
#define ICD_ABRn(i)		(0x300 + (IRQ_TO_REG32(i) * 4))
#define ICD_IPRn(i)		(0x400 + (i))
#define ICD_IPTRn(i)		(0x800 + (i))
#define ICD_ICRn(i)		(0xC00 + (IRQ_TO_REG16(i) * 4))
/*
 * what about (ppi|spi)_status
 */
#define ICD_PPI			0xD00
#define 	ICD_PPI_GTIMER	(1 << 11)
#define 	ICD_PPI_FIQ		(1 << 12)
#define 	ICD_PPI_PTIMER	(1 << 13)
#define 	ICD_PPI_PWDOG	(1 << 14)
#define 	ICD_PPI_IRQ		(1 << 15)
#define ICD_SPI_BASE		0xD04
#define ICD_SPIn(i)			(ICD_SPI_BASE + ((i) * 4))


#define ICD_SGIR			0xF00

#define ICD_PERIPH_ID_0			0xFD0
#define ICD_PERIPH_ID_1			0xFD4
#define ICD_PERIPH_ID_2			0xFD8
#define ICD_PERIPH_ID_3			0xFDC
#define ICD_PERIPH_ID_4			0xFE0
#define ICD_PERIPH_ID_5			0xFE4
#define ICD_PERIPH_ID_6			0xFE8
#define ICD_PERIPH_ID_7			0xFEC

#define ICD_COMP_ID_0			0xFEC
#define ICD_COMP_ID_1			0xFEC
#define ICD_COMP_ID_2			0xFEC
#define ICD_COMP_ID_3			0xFEC

#define ICD_SIZE 			0x1000


#define ICPICR				0x00
#define ICPIPMR				0x04
/* XXX - must left justify bits to  0 - 7  */
#define 	ICMIPMR_SH 		4
#define ICPBPR				0x08
#define ICPIAR				0x0C
#define 	ICPIAR_IRQ_SH		0
#define 	ICPIAR_IRQ_M		0x3ff
#define 	ICPIAR_CPUID_SH		10
#define 	ICPIAR_CPUID_M		0x7
#define 	ICPIAR_NO_PENDING_IRQ	ICPIAR_IRQ_M
#define ICPEOIR				0x10
#define ICPPRP				0x14
#define ICPHPIR				0x18
#define ICPIIR				0xFC
#define ICP_SIZE			0x100
/*
 * what about periph_id and component_id 
 */

#define AMPAMPINTC_SIZE			0x1000


#define IRQ_ENABLE	1
#define IRQ_DISABLE	0

struct ampintc_softc {
	struct device		 sc_dev;
	struct intrq 		*sc_ampintc_handler;
	int			 sc_nintr;
	bus_space_tag_t		 sc_iot;
	bus_space_handle_t	 sc_d_ioh, sc_p_ioh;
};
struct ampintc_softc *ampintc;


struct intrhand {
	TAILQ_ENTRY(intrhand) ih_list;	/* link on intrq list */
	int (*ih_func)(void *);		/* handler */
	void *ih_arg;			/* arg for handler */
	int ih_ipl;			/* IPL_* */
	int ih_irq;			/* IRQ number */
	struct evcount	ih_count;
	char *ih_name;
};

struct intrq {
	TAILQ_HEAD(, intrhand) iq_list;	/* handler list */
	int iq_irq;			/* IRQ to mask while handling */
	int iq_levels;			/* IPL_*'s this IRQ has */
	int iq_ist;			/* share type */
};


int		 ampintc_match(struct device *, void *, void *);
void		 ampintc_attach(struct device *, struct device *, void *);
int		 ampintc_spllower(int);
void		 ampintc_splx(int);
int		 ampintc_splraise(int);
void		 ampintc_setipl(int);
void		 ampintc_calc_mask(void);
void		*ampintc_intr_establish(int, int, int (*)(void *), void *,
		    char *);
void		*ampintc_intr_establish_ext(int, int, int (*)(void *), void *,
		    char *);
void		 ampintc_intr_disestablish(void *);
void		 ampintc_irq_handler(void *);
const char	*ampintc_intr_string(void *);
uint32_t	 ampintc_iack(void);
void		 ampintc_eoi(uint32_t);
void		 ampintc_set_priority(int, int);
void		 ampintc_intr_enable(int);
void		 ampintc_intr_disable(int);
void		 ampintc_route(int, int , int);

struct cfattach	ampintc_ca = {
	sizeof (struct ampintc_softc), ampintc_match, ampintc_attach
};

struct cfdriver ampintc_cd = {
	NULL, "ampintc", DV_DULL
};

int
ampintc_match(struct device *parent, void *cfdata, void *aux)
{
	return (1);
}

void
ampintc_attach(struct device *parent, struct device *self, void *args)
{
	struct ampintc_softc *sc = (struct ampintc_softc *)self;
	struct omap_attach_args *oa = args;
	int i, nintr;
	bus_space_tag_t		iot;
	bus_space_handle_t	d_ioh, p_ioh;

	ampintc = sc;

	arm_init_smask();

	iot = oa->oa_iot;

	if (bus_space_map(iot, oa->oa_dev->mem[0].addr,
	    oa->oa_dev->mem[0].size, 0, &p_ioh))
		panic("ampintc_attach: ICP bus_space_map failed!");

	if (bus_space_map(iot, oa->oa_dev->mem[1].addr,
	    oa->oa_dev->mem[1].size, 0, &d_ioh))
		panic("ampintc_attach: ICD bus_space_map failed!");

	sc->sc_iot = iot;
	sc->sc_d_ioh = d_ioh;
	sc->sc_p_ioh = p_ioh;

	nintr = 32 * (bus_space_read_4(iot, d_ioh, ICD_ICTR) & ICD_ICTR_ITL_M);
	nintr += 32; /* ICD_ICTR + 1, irq 0-31 is SGI, 32+ is PPI */
	sc->sc_nintr = nintr;
	printf(" nirq %d\n", nintr);


	/* Disable all interrupts, clear all pending */
	for (i = 0; i < nintr/32; i++) {
		bus_space_write_4(iot, d_ioh, ICD_ICERn(i*32), ~0);
		bus_space_write_4(iot, d_ioh, ICD_ICPRn(i*32), ~0);
	}
	for (i = 0; i < nintr; i++) {
		/* lowest priority ?? */
		bus_space_write_1(iot, d_ioh, ICD_IPRn(i), 0xff);
		/* target no cpus */
		bus_space_write_1(iot, d_ioh, ICD_IPTRn(i), 0);
	}
	for (i = 2; i < nintr/16; i++) {
		/* irq 32 - N */
		bus_space_write_4(iot, d_ioh, ICD_ICRn(i*16), 0);
	}

	/* software reset of the part? */
	/* set protection bit (kernel only)? */

	/* XXX - check power saving bit */


	sc->sc_ampintc_handler = malloc(
	    (sizeof (*sc->sc_ampintc_handler) * nintr),
	    M_DEVBUF, M_ZERO | M_NOWAIT);
	for (i = 0; i < nintr; i++) {
		TAILQ_INIT(&sc->sc_ampintc_handler[i].iq_list);
	}

	ampintc_setipl(IPL_HIGH);  /* XXX ??? */
	ampintc_calc_mask();

	/* insert self as interrupt handler */
	arm_set_intr_handler(ampintc_splraise, ampintc_spllower, ampintc_splx,
	    ampintc_setipl, ampintc_intr_establish_ext,
	    ampintc_intr_disestablish, ampintc_intr_string, ampintc_irq_handler);

	/* enable interrupts */
	bus_space_write_4(iot, d_ioh, ICD_DCR, 3);
	bus_space_write_4(iot, p_ioh, ICPICR, 1);
	enable_interrupts(I32_bit);
}

void
ampintc_set_priority(int irq, int pri)
{
	struct ampintc_softc	*sc = ampintc;
	uint32_t		 prival;

	/*
	 * We only use 16 (13 really) interrupt priorities, 
	 * and a CPU is only required to implement bit 4-7 of each field
	 * so shift into the top bits.
	 * also low values are higher priority thus IPL_HIGH - pri
	 */
	prival = (IPL_HIGH - pri) << ICMIPMR_SH;
	bus_space_write_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPRn(irq), prival);
}

void
ampintc_setipl(int new)
{
	struct cpu_info		*ci = curcpu();
	struct ampintc_softc	*sc = ampintc;
	int			 psw;

	/* disable here is only to keep hardware in sync with ci->ci_cpl */
	psw = disable_interrupts(I32_bit);
	ci->ci_cpl = new;

	/* low values are higher priority thus IPL_HIGH - pri */
	bus_space_write_4(sc->sc_iot, sc->sc_p_ioh, ICPIPMR,
	    (IPL_HIGH - new) << ICMIPMR_SH);
	restore_interrupts(psw);
}

void
ampintc_intr_enable(int irq)
{
	struct ampintc_softc	*sc = ampintc;

#ifdef DEBUG
	printf("enable irq %d register %x bitmask %08x\n",
	    irq, ICD_ISERn(irq), 1 << IRQ_TO_REG32BIT(irq));
#endif

	bus_space_write_4(sc->sc_iot, sc->sc_d_ioh, ICD_ISERn(irq),
	    1 << IRQ_TO_REG32BIT(irq));
}

void
ampintc_intr_disable(int irq)
{
	struct ampintc_softc	*sc = ampintc;

	bus_space_write_4(sc->sc_iot, sc->sc_d_ioh, ICD_ICERn(irq),
	    1 << IRQ_TO_REG32BIT(irq));
}


void
ampintc_calc_mask(void)
{
	struct cpu_info		*ci = curcpu();
        struct ampintc_softc	*sc = ampintc;
	struct intrhand		*ih;
	int			 irq;

	for (irq = 0; irq < sc->sc_nintr; irq++) {
		int max = IPL_NONE;
		int min = IPL_HIGH;
		TAILQ_FOREACH(ih, &sc->sc_ampintc_handler[irq].iq_list,
		    ih_list) {
			if (ih->ih_ipl > max)
				max = ih->ih_ipl;

			if (ih->ih_ipl < min)
				min = ih->ih_ipl;
		}

		if (sc->sc_ampintc_handler[irq].iq_irq == max) {
			continue;
		}
		sc->sc_ampintc_handler[irq].iq_irq = max;

		if (max == IPL_NONE)
			min = IPL_NONE;

#ifdef DEBUG_INTC
		if (min != IPL_NONE) {
			printf("irq %d to block at %d %d reg %d bit %d\n",
			    irq, max, min, AMPINTC_IRQ_TO_REG(irq),
			    AMPINTC_IRQ_TO_REGi(irq));
		}
#endif
		/* Enable interrupts at lower levels, clear -> enable */
		/* Set interrupt priority/enable */
		if (min != IPL_NONE) {
			ampintc_set_priority(irq, min);
			ampintc_intr_enable(irq);
			ampintc_route(irq, IRQ_ENABLE, 0);
		} else {
			ampintc_intr_disable(irq);
			ampintc_route(irq, IRQ_DISABLE, 0);

		}
	}
	ampintc_setipl(ci->ci_cpl);
}

void
ampintc_splx(int new)
{
	struct cpu_info *ci = curcpu();

	if (ci->ci_ipending & arm_smask[new])
		arm_do_pending_intr(new);

	ampintc_setipl(new);
}

int
ampintc_spllower(int new)
{
	struct cpu_info *ci = curcpu();
	int old = ci->ci_cpl;
	ampintc_splx(new);
	return (old);
}

int
ampintc_splraise(int new)
{
	struct cpu_info *ci = curcpu();
	int old;
	old = ci->ci_cpl;

	/*
	 * setipl must always be called because there is a race window
	 * where the variable is updated before the mask is set
	 * an interrupt occurs in that window without the mask always
	 * being set, the hardware might not get updated on the next
	 * splraise completely messing up spl protection.
	 */
	if (old > new)
		new = old;

	ampintc_setipl(new);

	return (old);
}


uint32_t 
ampintc_iack(void)
{
	uint32_t intid;
	struct ampintc_softc	*sc = ampintc;

	intid = bus_space_read_4(sc->sc_iot, sc->sc_p_ioh, ICPIAR);

	return (intid);
}

void
ampintc_eoi(uint32_t eoi)
{
	struct ampintc_softc	*sc = ampintc;

	bus_space_write_4(sc->sc_iot, sc->sc_p_ioh, ICPEOIR, eoi);
}

void
ampintc_route(int irq, int enable, int cpu)
{
	uint8_t  val;
	struct ampintc_softc	*sc = ampintc;

	val = bus_space_read_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPTRn(irq));
	if (enable == IRQ_ENABLE)
		val |= (1 << cpu);
	else
		val &= ~(1 << cpu);
	bus_space_write_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPTRn(irq), val);
}

void
ampintc_irq_handler(void *frame)
{
	struct ampintc_softc	*sc = ampintc;
	struct intrhand		*ih;
	void			*arg;
	uint32_t		 iack_val;
	int			 irq, pri, s;

	iack_val = ampintc_iack();
//#define DEBUG_INTC
#ifdef DEBUG_INTC
	if (iack_val != 27)
	printf("irq  %d fired\n", iack_val);
	else {
		static int cnt = 0;
		if ((cnt++ % 100) == 0) {
			printf("irq  %d fired * _100\n", iack_val);
			Debugger();
		}

	}
#endif

	if (iack_val == 1023) {
		printf("spur\n");
		return;
	}
	irq = iack_val & ((1 << sc->sc_nintr) - 1);

	pri = sc->sc_ampintc_handler[irq].iq_irq;
	s = ampintc_splraise(pri);
	TAILQ_FOREACH(ih, &sc->sc_ampintc_handler[irq].iq_list, ih_list) {
		if (ih->ih_arg != 0)
			arg = ih->ih_arg;
		else
			arg = frame;

		if (ih->ih_func(arg)) 
			ih->ih_count.ec_count++;

	}
	ampintc_eoi(iack_val);

	ampintc_splx(s);
}

void *
ampintc_intr_establish_ext(int irqno, int level, int (*func)(void *),
    void *arg, char *name)
{
	return ampintc_intr_establish(irqno+32, level, func, arg, name);
}

void *
ampintc_intr_establish(int irqno, int level, int (*func)(void *),
    void *arg, char *name)
{
	struct ampintc_softc	*sc = ampintc;
	struct intrhand		*ih;
	int			 psw;

	if (irqno < 0 || irqno >= sc->sc_nintr)
		panic("ampintc_intr_establish: bogus irqnumber %d: %s",
		     irqno, name);

	/* no point in sleeping unless someone can free memory. */
	ih = (struct intrhand *)malloc (sizeof *ih, M_DEVBUF,
	    cold ? M_NOWAIT : M_WAITOK);
	if (ih == NULL)
		panic("intr_establish: can't malloc handler info");
	ih->ih_func = func;
	ih->ih_arg = arg;
	ih->ih_ipl = level;
	ih->ih_irq = irqno;
	ih->ih_name = name;

	psw = disable_interrupts(I32_bit);

	TAILQ_INSERT_TAIL(&sc->sc_ampintc_handler[irqno].iq_list, ih, ih_list);

	if (name != NULL)
		evcount_attach(&ih->ih_count, name, &ih->ih_irq);

#ifdef DEBUG_INTC
	printf("ampintc_intr_establish irq %d level %d [%s]\n", irqno, level,
	    name);
#endif
	ampintc_calc_mask();
	
	restore_interrupts(psw);
	return (ih);
}

void
ampintc_intr_disestablish(void *cookie)
{
#if 0
	int psw;
	struct intrhand *ih = cookie;
	int irqno = ih->ih_irq;
	psw = disable_interrupts(I32_bit);
	TAILQ_REMOVE(&sc->sc_ampintc_handler[irqno].iq_list, ih, ih_list);
	if (ih->ih_name != NULL)
		evcount_detach(&ih->ih_count);
	free(ih, M_DEVBUF);
	restore_interrupts(psw);
#endif
}

const char *
ampintc_intr_string(void *cookie)
{
	struct intrhand *ih = (struct intrhand *)cookie;
	static char irqstr[1 + sizeof("ampintc irq ") + 4];

	snprintf(irqstr, sizeof irqstr, "ampintc irq %d", ih->ih_irq);
	return irqstr;
}
@


1.11
log
@Clean up ARM's generic interrupt controller and timer.  Add the ability to
change the frequency and add match functions.

ok bmercer@@
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.10 2013/04/25 22:14:17 patrick Exp $ */
@


1.10
log
@Correctly enable ARM's Generic Interrupt Controller.

ok bmercer@@
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.9 2011/11/15 23:17:01 drahn Exp $ */
d156 1
d178 1
a178 1
	sizeof (struct ampintc_softc), NULL, ampintc_attach
d185 6
d270 1
a270 1
        struct ampintc_softc	*sc = ampintc;
d303 1
a303 1
        struct ampintc_softc	*sc = ampintc;
d317 1
a317 1
        struct ampintc_softc	*sc = ampintc;
d379 1
a379 1
        if (ci->ci_ipending & arm_smask[new])
d412 1
a412 1
  
@


1.9
log
@Remove pointless/debug prints during config.
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.8 2011/11/10 19:37:01 uwe Exp $ */
d230 1
a230 1
		bus_space_write_4(iot, d_ioh, ICD_ICRn(i*4), 0);
d254 3
@


1.8
log
@Reduce autoconf(4) overuse on beagle

Renamed `ahb' to `omap' and extended it to configure the on-chip
devices directly, based a board-specific table instead of trying to
maintain addresses, interrupt numbers and such for two OMAP variants
in the same config file.

This may be an intermediate step, but should provide us some relief
already. :)

Suggestions from deraadt and drahn; ok drahn@@
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.7 2011/11/10 00:19:36 matthieu Exp $ */
a198 6
	printf("ICP addr 0x%x-0x%x\n", oa->oa_dev->mem[0].addr,
	    oa->oa_dev->mem[0].addr + oa->oa_dev->mem[0].size);

	printf("ICD addr 0x%x-0x%x\n", oa->oa_dev->mem[1].addr,
	    oa->oa_dev->mem[1].addr + oa->oa_dev->mem[1].size);

a215 10
	printf("periph_id 0 %x\n",
	    bus_space_read_1(iot, d_ioh, ICD_PERIPH_ID_0));
	printf("periph_id 1 %x\n",
	    bus_space_read_1(iot, d_ioh, ICD_PERIPH_ID_1));
	printf("periph_id 2 %x\n",
	    bus_space_read_1(iot, d_ioh, ICD_PERIPH_ID_2));
	printf("periph_id 3 %x\n",
	    bus_space_read_1(iot, d_ioh, ICD_PERIPH_ID_3));
	printf("periph_id 4 %x\n",
	    bus_space_read_1(iot, d_ioh, ICD_PERIPH_ID_4));
@


1.7
log
@Add gumstix overo support. It's very similar to be beagleboard at this
point. So add it's card id and handle it like the beagleboard.
ok drahn@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.6 2011/11/09 00:17:15 drahn Exp $ */
d31 1
a31 1
#include <arch/beagle/beagle/ahb.h>
a155 1
int		 ampintc_match(struct device *, void *, void *);
d177 1
a177 1
	sizeof (struct ampintc_softc), ampintc_match, ampintc_attach
a183 22
int ampintc_attached = 0;

int
ampintc_match(struct device *parent, void *v, void *aux)
{
	switch (board_id) {
	case BOARD_ID_OMAP3_BEAGLE:
	case BOARD_ID_OMAP3_OVERO:
		return 0; /* not ported yet ??? - different */
	case BOARD_ID_OMAP4_PANDA:
		break; /* continue trying */
	default:
		return 0; /* unknown */
	}
	if (ampintc_attached != 0)
		return 0;

	/* XXX */
	return (1);
}


a186 1
        struct ahb_attach_args *aa = args;
d188 1
d197 7
a203 5
#define ICD_ADDR 0x48241000
#define ICP_ADDR 0x48240100
	iot = aa->aa_iot;
	if (bus_space_map(iot, ICD_ADDR, ICD_SIZE, 0, &d_ioh))
		panic("ampintc_attach: bus_space_map failed!");
d205 7
a211 2
	if (bus_space_map(iot, ICP_ADDR, ICP_SIZE, 0, &p_ioh))
		panic("ampintc_attach: bus_space_map failed!");
a263 2

	ampintc_attached = 1;
@


1.6
log
@Use the new priority as the priority to check against,
not the current (not yet lowered) priority. problem spotted by miod.
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.5 2011/11/09 00:15:06 drahn Exp $ */
d192 1
@


1.5
log
@External ampintc interrupts need to add 32 to the interrupt number,
while 'internal' should not. no complaints uwe@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.4 2011/11/07 20:25:27 miod Exp $ */
d402 3
a404 2
        if (ci->ci_ipending & arm_smask[ci->ci_cpl])
		arm_do_pending_intr(ci->ci_cpl);
@


1.4
log
@Cleanup and make initialization more readable. ok drahn@@ uwe@@
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.3 2011/11/06 01:34:53 drahn Exp $ */
d165 2
d284 2
a285 2
	    ampintc_setipl, ampintc_intr_establish, ampintc_intr_disestablish,
	    ampintc_intr_string, ampintc_irq_handler);
d517 7
@


1.3
log
@Further on the road to working.
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.2 2011/11/05 15:13:51 drahn Exp $ */
a249 1
		bus_space_write_1(iot, d_ioh, ICD_IPTRn(i), 0);
d251 1
a251 1
	for (i = 0; i < nintr/4; i++) {
d253 1
a253 1
		bus_space_write_4(iot, d_ioh, ICD_IPRn(i*32), 0xffffffff);
d255 1
d270 1
a270 1
	    M_DEVBUF, M_ZERO|M_NOWAIT);
a271 1

d314 1
a315 1

d326 1
d328 2
a329 1
		irq, ICD_ISERn(irq), 1 << IRQ_TO_REG32BIT(irq));
a391 1
	printf("cpl %d\n", ci->ci_cpl);
d442 1
d452 1
d461 3
a463 2
	if (enable == IRQ_ENABLE) {
		val = bus_space_read_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPTRn(irq));
d465 1
a465 3
		bus_space_write_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPTRn(irq), val);
	} else  {
		val = bus_space_read_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPTRn(irq));
d467 1
a467 2
		bus_space_write_1(sc->sc_iot, sc->sc_d_ioh, ICD_IPTRn(irq), val);
	}
a524 1
	printf("ampintc intr_establish %s %d %d\n", name, irqno, level);
d576 2
a577 3
	return "huh?";
}

d579 2
a580 28
#if 0
int ampintc_tst(void *a);

int
ampintc_tst(void *a)
{
	printf("inct_tst called\n");
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, AMPINTC_ISR_CLEAR0, 2);
	return 1;
}

void ampintc_test(void);
void ampintc_test(void)
{
	void * ih;
	printf("about to register handler\n");
	ih = ampintc_intr_establish(1, IPL_BIO, ampintc_tst, NULL, "intctst");

	printf("about to set bit\n");
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, AMPINTC_ISR_SET0, 2);

	printf("about to clear bit\n");
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, AMPINTC_ISR_CLEAR0, 2);

	printf("about to remove handler\n");
	ampintc_intr_disestablish(ih);

	printf("done\n");
a581 1
#endif
@


1.2
log
@Many fixes.
@
text
@d1 1
a1 1
/* $OpenBSD: ampintc.c,v 1.1 2011/11/05 11:48:26 drahn Exp $ */
d68 1
a68 1
#define ICD_IPTRn(i)		(0x800 + (IRQ_TO_REG4(i) * 4))
d125 3
d173 1
d250 1
a252 1

a255 1
		bus_space_write_4(iot, d_ioh, ICD_IPTRn(i*32), 0);
d257 1
a257 1
	for (i = 2; i < nintr/15; i++) {
d259 1
a259 1
		bus_space_write_4(iot, d_ioh, ICD_ICRn(i*32), 0);
d327 3
d384 1
d387 2
d391 1
a391 1
	printf("cpl %d", ci->ci_cpl);
a449 2
#if 0
	uint32_t intid;
d451 17
a467 2
	intid = bus_space_write_4(sc->sc_cpu, ICPEOIR, eoi);
#endif
d479 2
d482 10
a491 1
	printf("irq %d fired\n", irq);
d493 5
a497 1
	iack_val = ampintc_iack();
d525 1
a525 1
	printf("ampintc intr_establish %s %d %d", name, irqno, level);
@


1.1
log
@Initial drivers for Cortex A9 interrupt controller and global timer as clock.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d69 1
a69 1
#define ICD_ICRn(i)		(0xC00 + (IRQ_TO_REG16(i) / 4))
a123 1
#define NIRQ			256
a183 1
	printf("ampintc_match board %d\n", board_id);
a187 1
		printf("Yea?\n");
a191 1
		printf("Yea1\n");
a193 1
	printf("Yea2\n");
d222 1
d230 1
a230 7
	if (nintr > NIRQ) {
		panic("ampintc needs NIRQ bumped to at least %d", nintr);
		/*
		 * or should this code just dynamically allocate 
		 * ampintc_handler[]
		 */
	}
d267 1
a267 1
	    M_DEVBUF, M_ZERO);
d273 1
a282 1
	ampintc_setipl(IPL_HIGH);  /* XXX ??? */
d299 1
a299 1
	bus_space_write_4(sc->sc_iot, sc->sc_d_ioh, ICD_IPRn(irq), prival);
d346 1
a346 1
	for (irq = 0; irq < NIRQ; irq++) {
d382 1
a389 1
	ampintc_setipl(new);
d393 1
d488 2
a489 1
	if (irqno < 0 || irqno >= NIRQ)
@

