head	1.9;
access;
symbols
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2;
locks; strict;
comment	@ * @;


1.9
date	2013.05.01.00.16.26;	author patrick;	state dead;
branches;
next	1.8;

1.8
date	2013.04.26.00.09.14;	author patrick;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.16.14.06.32;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.10.19.37.01;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.10.16.15.24;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.09.00.15.06;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.06.11.09.21;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.06.01.34.53;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.05.11.48.26;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Add a cortex bus which represents the ARM MPCore Complex.
It will attach only to ARM Cortex A9 and A15 SoCs.
The generic interrupt controller and timer will attach to this bus,
later a secondary cache controller can be added.
The base address for those controllers are figured out using
the periphbase register.

ok bmercer@@
@
text
@/* $OpenBSD: amptimer.c,v 1.8 2013/04/26 00:09:14 patrick Exp $ */
/*
 * Copyright (c) 2011 Dale Rahn <drahn@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/timetc.h>
#include <sys/evcount.h>

#include <arm/cpufunc.h>
#include <machine/bus.h>
#include <machine/intr.h>
#include <beagle/dev/omapvar.h>

/* registers */
#define GTIMER_CNT_LOW		0x200
#define GTIMER_CNT_HIGH		0x204
#define GTIMER_CTRL		0x208
#define GTIMER_CTRL_AA		(1 << 3)
#define GTIMER_CTRL_IRQ		(1 << 2)
#define GTIMER_CTRL_COMP	(1 << 1)
#define GTIMER_CTRL_TIMER	(1 << 0)
#define GTIMER_STATUS		0x20c
#define GTIMER_STATUS_EVENT	(1 << 0)
#define GTIMER_CMP_LOW		0x210
#define GTIMER_CMP_HIGH		0x214
#define GTIMER_AUTOINC		0x218

#define TIMER_FREQUENCY		500 * 1000 * 1000 /* ARM core clock */
int32_t amptimer_frequency = TIMER_FREQUENCY;

u_int amptimer_get_timecount(struct timecounter *);

static struct timecounter amptimer_timecounter = {
	amptimer_get_timecount, NULL, 0x7fffffff, 0, "amptimer", 0, NULL
};

struct amptimer_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	volatile u_int64_t	sc_nexttickevent;
	volatile u_int64_t	sc_nextstatevent;
	u_int32_t		sc_ticks_per_second;
	u_int32_t		sc_ticks_per_intr;
	u_int32_t		sc_ticks_err_cnt;
	u_int32_t		sc_ticks_err_sum;
	u_int32_t		sc_statvar;
	u_int32_t		sc_statmin;

#ifdef AMPTIMER_DEBUG
	struct evcount		sc_clk_count;
	struct evcount		sc_stat_count;
#endif
};

int		amptimer_match(struct device *, void *, void *);
void		amptimer_attach(struct device *, struct device *, void *);
uint64_t	amptimer_readcnt64(struct amptimer_softc *sc);
int		amptimer_intr(void *);
void		amptimer_cpu_initclocks(void);
void		amptimer_delay(u_int);
void		amptimer_setstatclockrate(int stathz);
void		amptimer_set_clockrate(int32_t new_frequency);

/* hack - XXXX
 * gptimer connects directly to ampintc, not thru the generic
 * inteface because it uses an 'internal' interupt
 * not a peripheral interrupt.
 */
void	*ampintc_intr_establish(int, int, int (*)(void *), void *, char *);



struct cfattach amptimer_ca = {
	sizeof (struct amptimer_softc), amptimer_match, amptimer_attach
};

struct cfdriver amptimer_cd = {
	NULL, "amptimer", DV_DULL
};

uint64_t
amptimer_readcnt64(struct amptimer_softc *sc)
{
	uint32_t high0, high1, low;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;

	do {
		high0 = bus_space_read_4(iot, ioh, GTIMER_CNT_HIGH);
		low = bus_space_read_4(iot, ioh, GTIMER_CNT_LOW);
		high1 = bus_space_read_4(iot, ioh, GTIMER_CNT_HIGH);
	} while (high0 != high1);

	return ((((uint64_t)high1) << 32) | low);
}

int
amptimer_match(struct device *parent, void *cfdata, void *aux)
{
	return (1);
}

void
amptimer_attach(struct device *parent, struct device *self, void *args)
{
	struct amptimer_softc *sc = (struct amptimer_softc *)self;
	struct omap_attach_args *oa = args;
	bus_space_handle_t ioh;

	sc->sc_iot = oa->oa_iot;

	if (bus_space_map(sc->sc_iot, oa->oa_dev->mem[0].addr,
	    oa->oa_dev->mem[0].size, 0, &ioh))
		panic("amptimer_attach: bus_space_map failed!");

	sc->sc_ticks_per_second = amptimer_frequency;
	printf(": tick rate %d KHz\n", sc->sc_ticks_per_second /1000);

	sc->sc_ioh = ioh;

	/* disable global timer */
	bus_space_write_4(sc->sc_iot, ioh, GTIMER_CTRL, 0);

	/* XXX ??? reset counters to 0 - gives us uptime in the counter */
	bus_space_write_4(sc->sc_iot, ioh, GTIMER_CNT_LOW, 0);
	bus_space_write_4(sc->sc_iot, ioh, GTIMER_CNT_HIGH, 0);

	/* enable global timer */
	bus_space_write_4(sc->sc_iot, ioh, GTIMER_CTRL, GTIMER_CTRL_TIMER);

	/* clear event */
	bus_space_write_4(sc->sc_iot, ioh, GTIMER_STATUS, 1);

#ifdef AMPTIMER_DEBUG
	evcount_attach(&sc->sc_clk_count, "clock", NULL);
	evcount_attach(&sc->sc_stat_count, "stat", NULL);
#endif

	/*
	 * comparator registers and interrupts not enabled until
	 * timer configures
	 */

	arm_clock_register(amptimer_cpu_initclocks, amptimer_delay,
	    amptimer_setstatclockrate);

	amptimer_timecounter.tc_frequency = sc->sc_ticks_per_second;
	amptimer_timecounter.tc_priv = sc;

	tc_init(&amptimer_timecounter);
}

u_int
amptimer_get_timecount(struct timecounter *tc)
{
	struct amptimer_softc *sc = amptimer_timecounter.tc_priv;
	return bus_space_read_4(sc->sc_iot, sc->sc_ioh, GTIMER_CNT_LOW);
}


int
amptimer_intr(void *frame)
{
	struct amptimer_softc	*sc = amptimer_cd.cd_devs[0];
	uint64_t		 now;
	uint64_t		 nextevent;
	uint32_t		 r, reg;
	int			 skip = 1;
	int			 rc = 0;

	/*
	 * DSR - I know that the tick timer is 64 bits, but the following
	 * code deals with rollover, so there is no point in dealing
	 * with the 64 bit math, just let the 32 bit rollover 
	 * do the right thing
	 */

	now = amptimer_readcnt64(sc);

	while (sc->sc_nexttickevent <= now) {
		sc->sc_nexttickevent += sc->sc_ticks_per_intr;
		sc->sc_ticks_err_sum += sc->sc_ticks_err_cnt;
		/* looping a few times is faster than divide */
		while (sc->sc_ticks_err_sum > hz) {
			sc->sc_nexttickevent += 1;
			sc->sc_ticks_err_sum -= hz;
		}

		/* looping a few times is faster than divide */
		while (sc->sc_ticks_err_sum  > hz) {
			sc->sc_nexttickevent += 1;
			sc->sc_ticks_err_sum -= hz;
		}

#ifdef AMPTIMER_DEBUG
		sc->sc_clk_count.ec_count++;
#endif
		rc = 1;
		hardclock(frame);
	}
	while (sc->sc_nextstatevent <= now) {
		do {
			r = random() & (sc->sc_statvar -1);
		} while (r == 0); /* random == 0 not allowed */
		sc->sc_nextstatevent += sc->sc_statmin + r;

		/* XXX - correct nextstatevent? */
#ifdef AMPTIMER_DEBUG
		sc->sc_stat_count.ec_count++;
#endif
		rc = 1;
		statclock(frame);
	}

	if (sc->sc_nexttickevent < sc->sc_nextstatevent)
		nextevent = sc->sc_nexttickevent;
	else
		nextevent = sc->sc_nextstatevent;

again:
	reg = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GTIMER_CTRL);
	reg &= ~GTIMER_CTRL_COMP;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CTRL, reg);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CMP_LOW,
	    nextevent & 0xffffffff);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CMP_HIGH,
	    nextevent >> 32);
	reg |= GTIMER_CTRL_COMP;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CTRL, reg);

	now = amptimer_readcnt64(sc);
	if (now >= nextevent) {
		nextevent = now + skip;
		skip += 1;
		goto again;
	}

	return (rc);
}

void
amptimer_set_clockrate(int32_t new_frequency)
{
	struct amptimer_softc	*sc = amptimer_cd.cd_devs[0];

	amptimer_frequency = new_frequency;

	if (sc == NULL)
		return;

	sc->sc_ticks_per_second = amptimer_frequency;
	amptimer_timecounter.tc_frequency = sc->sc_ticks_per_second;
	printf("amptimer0: adjusting clock: new tick rate %d KHz\n",
	    sc->sc_ticks_per_second /1000);
}

void
amptimer_cpu_initclocks()
{
	struct amptimer_softc	*sc = amptimer_cd.cd_devs[0];
	uint64_t		 next;
	uint32_t		 reg;

	stathz = hz;
	profhz = hz * 10;

	if (sc->sc_ticks_per_second != amptimer_frequency) {
		amptimer_set_clockrate(amptimer_frequency);
	}

	amptimer_setstatclockrate(stathz);

	sc->sc_ticks_per_intr = sc->sc_ticks_per_second / hz;
	sc->sc_ticks_err_cnt = sc->sc_ticks_per_second % hz;
	sc->sc_ticks_err_sum = 0;; 

	/* establish interrupts */
	/* XXX - irq */
	ampintc_intr_establish(27, IPL_CLOCK, amptimer_intr,
	    NULL, "tick");

	/* setup timer 0 (hardware timer 2) */
	next = amptimer_readcnt64(sc) + sc->sc_ticks_per_intr;
	sc->sc_nexttickevent = sc->sc_nextstatevent = next;

	reg = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GTIMER_CTRL);
	reg &= ~GTIMER_CTRL_COMP;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CTRL, reg);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CMP_LOW,
	    next & 0xffffffff);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CMP_HIGH,
	    next >> 32);
	reg |= GTIMER_CTRL_COMP | GTIMER_CTRL_IRQ;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GTIMER_CTRL, reg);
}

void
amptimer_delay(u_int usecs)
{
	struct amptimer_softc	*sc = amptimer_cd.cd_devs[0];
	u_int32_t		clock, oclock, delta, delaycnt;
	volatile int		j;
	int			csec, usec;

	if (usecs > (0x80000000 / (sc->sc_ticks_per_second))) {
		csec = usecs / 10000;
		usec = usecs % 10000;

		delaycnt = (sc->sc_ticks_per_second / 100) * csec +
		    (sc->sc_ticks_per_second / 100) * usec / 10000;
	} else {
		delaycnt = sc->sc_ticks_per_second * usecs / 1000000;
	}
	if (delaycnt <= 1)
		for (j = 100; j > 0; j--)
			;

	oclock = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GTIMER_CNT_LOW);
	while (1) {
		for (j = 100; j > 0; j--)
			;
		clock = bus_space_read_4(sc->sc_iot, sc->sc_ioh,
		    GTIMER_CNT_LOW);
		delta = clock - oclock;
		if (delta > delaycnt)
			break;
	}
}

void
amptimer_setstatclockrate(int newhz)
{
	struct amptimer_softc	*sc = amptimer_cd.cd_devs[0];
	int			 minint, statint;
	int			 s;

	s = splclock();

	statint = sc->sc_ticks_per_second / newhz;
	/* calculate largest 2^n which is smaller that just over half statint */
	sc->sc_statvar = 0x40000000; /* really big power of two */
	minint = statint / 2 + 100;
	while (sc->sc_statvar > minint)
		sc->sc_statvar >>= 1;

	sc->sc_statmin = statint - (sc->sc_statvar >> 1);

	splx(s);

	/*
	 * XXX this allows the next stat timer to occur then it switches
	 * to the new frequency. Rather than switching instantly.
	 */
}
@


1.8
log
@Clean up ARM's generic interrupt controller and timer.  Add the ability to
change the frequency and add match functions.

ok bmercer@@
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.7 2011/11/16 14:06:32 drahn Exp $ */
@


1.7
log
@Better clock rate .7% error is much better than 7% error.
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.6 2011/11/10 19:37:01 uwe Exp $ */
d32 1
d36 4
a39 4
#define 	GTIMER_CTRL_AA		(1 << 3)
#define 	GTIMER_CTRL_IRQ		(1 << 2)
#define 	GTIMER_CTRL_COMP	(1 << 1)
#define 	GTIMER_CTRL_TIMER	(1 << 0)
d41 1
a41 1
#define 	GTIMER_STATUS_EVENT		(1 << 0)
d46 2
a47 2
/* XXX - PERIPHCLK */
#define TIMER_FREQUENCY                 500 * 1000 * 1000 /* XXX - PERIPHCLK? */
d52 1
a52 1
        amptimer_get_timecount, NULL, 0x7fffffff, 0, "amptimer", 0, NULL
d57 2
a58 2
        bus_space_tag_t		sc_iot;
        bus_space_handle_t	sc_ioh;
d74 1
d81 1
d93 1
a93 1
	sizeof (struct amptimer_softc), NULL, amptimer_attach
d104 2
a105 2
        bus_space_tag_t iot = sc->sc_iot;
        bus_space_handle_t ioh = sc->sc_ioh;
d116 5
d135 2
a136 2
	sc->sc_ticks_per_second = TIMER_FREQUENCY;
	printf(": tick rate %d KHz\n", sc->sc_ticks_per_second /1024);
d176 1
a176 1
        return bus_space_read_4(sc->sc_iot, sc->sc_ioh, GTIMER_CNT_LOW);
d249 1
a249 1
		
d261 16
d286 3
a288 1
	sc->sc_ticks_per_second = TIMER_FREQUENCY;
a313 1
	
d315 1
a346 1
	
d355 1
a355 1
	
d366 1
a366 1
	
@


1.6
log
@Reduce autoconf(4) overuse on beagle

Renamed `ahb' to `omap' and extended it to configure the on-chip
devices directly, based a board-specific table instead of trying to
maintain addresses, interrupt numbers and such for two OMAP variants
in the same config file.

This may be an intermediate step, but should provide us some relief
already. :)

Suggestions from deraadt and drahn; ok drahn@@
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.5 2011/11/10 16:15:24 drahn Exp $ */
d46 1
a46 1
#define TIMER_FREQUENCY                 512 * 1024 * 1024 /* XXX - PERIPHCLK? */
@


1.5
log
@Fix bug where 'now' recomputation was incorrect,
do not bother subtracting the old 'now' from the 64bit counters to
determine which was sooner, add event counters for the clock/stat
Do not have timers unless debugging the driver.
Switch statclock to multiple of hz;
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.4 2011/11/09 00:15:06 drahn Exp $ */
d30 1
a30 1
#include <arch/beagle/beagle/ahb.h>
a44 2
#define GTIMER_SIZE		0x300

a72 1
int		amptimer_match(struct device *, void *, void *);
d90 1
a90 1
	sizeof (struct amptimer_softc), amptimer_match, amptimer_attach
a96 12
int
amptimer_match(struct device *parent, void *v, void *aux)
{
	switch (board_id) {
	case BOARD_ID_OMAP4_PANDA:
		break; /* continue trying */
	default:
		return 0; /* unknown */
	}
	return (1);
}

d118 4
a121 2
	struct ahb_attach_args *aa = args;
        bus_space_handle_t ioh;
d123 3
a125 3
	sc->sc_iot = aa->aa_iot;
        if (bus_space_map(sc->sc_iot, aa->aa_addr, GTIMER_SIZE, 0, &ioh))
                panic("amptimer_attach: bus_space_map failed!");
@


1.4
log
@External ampintc interrupts need to add 32 to the interrupt number,
while 'internal' should not. no complaints uwe@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.3 2011/11/06 11:09:21 miod Exp $ */
d69 1
d72 1
a72 1

d158 5
d219 1
d221 1
d232 1
d234 1
d239 1
a239 1
	if ((sc->sc_nexttickevent - now) < (sc->sc_nextstatevent - now))
d255 1
a255 1
	now = amptimer_readcnt64(sc) + sc->sc_ticks_per_intr;
d272 2
a273 2
	stathz = 128;
	profhz = 1024;
@


1.3
log
@Fix GTIMER_STATUS offset
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.2 2011/11/06 01:34:53 drahn Exp $ */
d82 9
d275 1
a275 1
	arm_intr_establish(27, IPL_CLOCK, amptimer_intr,
@


1.2
log
@Further on the road to working.
@
text
@d1 1
a1 1
/* $OpenBSD: amptimer.c,v 1.1 2011/11/05 11:48:26 drahn Exp $ */
d39 1
a39 1
#define GTIMER_STATUS		0x10c
d131 1
a131 1
	printf("tick rate %d KHz\n", sc->sc_ticks_per_second /1024);
d149 1
a149 1
	 * comparitor registers and interrupts not enabled until
@


1.1
log
@Initial drivers for Cortex A9 interrupt controller and global timer as clock.
@
text
@d1 1
a1 1
/* $OpenBSD: intc.c,v 1.8 2011/10/24 22:49:07 drahn Exp $ */
d32 3
a34 3
#define GTIMER_CNT_LOW		0x00
#define GTIMER_CNT_HIGH		0x04
#define GTIMER_CTRL		0x08
d39 1
a39 1
#define GTIMER_STATUS		0x0c
d41 3
a43 3
#define GTIMER_CMP_LOW		0x10
#define GTIMER_CMP_HIGH		0x14
#define GTIMER_AUTOINC		0x18
d45 1
a45 1
#define GTIMER_SIZE		0x20
d48 1
a48 1
#define TIMER_FREQUENCY                 32768
d79 2
d94 1
a94 1
	case BOARD_ID_OMAP3_BEAGLE:
a95 2
	case BOARD_ID_OMAP4_PANDA:
		return 0; /* not ported yet ??? - different */
a126 1

d130 3
d152 3
a154 5
	/*
	 * XXX - configure delay -> amptimer_delay()
	 * XXX - configure cpu_initclocks -> amptimer_initclocks()
	 */
	sc->sc_ticks_per_second = TIMER_FREQUENCY;
d187 1
a187 1
	now = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GTIMER_CNT_LOW);
d258 1
a258 1
	setstatclockrate(stathz);
d283 59
@

