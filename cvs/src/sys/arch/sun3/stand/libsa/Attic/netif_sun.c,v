head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.6
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.04.08.33.51;	author niklas;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	99.01.11.05.12.05;	author millert;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	96.10.11.23.06.49;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.04.06;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.58;	author deraadt;	state Exp;
branches;
next	;

1.4.6.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.5.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: netif_sun.c,v 1.7 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: netif_sun.c,v 1.4 1996/01/29 23:41:07 gwr Exp $	*/

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * The Sun PROM has a fairly general set of network drivers,
 * so it is easiest to just replace the netif module with
 * this adaptation to the PROM network interface.
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <string.h>
#include <time.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/in_systm.h>

#include <machine/control.h>
#include <machine/idprom.h>
#include <machine/mon.h>
#include <machine/saio.h>

#include "stand.h"
#include "net.h"
#include "netif.h"

#include "clock.h"
#include "dvma.h"
#include "promdev.h"

#define	PKT_BUF_SIZE 2048

int debug;
int errno;

static void sun3_getether(u_char *);

struct iodesc sockets[SOPEN_MAX];

static struct netif prom_nif;
static struct devdata {
	struct saioreq dd_si;
	int rbuf_len;
	char *rbuf;
	int tbuf_len;
	char *tbuf;
	u_short dd_opens;
	char dd_myea[6];
} prom_dd;

static struct idprom sun3_idprom;


void
sun3_getether(ea)
	u_char *ea;
{
	u_char *src, *dst;
	int len, x;

	if (sun3_idprom.idp_format == 0) {
		dst = (char *)&sun3_idprom;
		src = (char *)IDPROM_BASE;
		len = IDPROM_SIZE;
		do {
			x = get_control_byte(src++);
			*dst++ = x;
		} while (--len > 0);
	}
	MACPY(sun3_idprom.idp_etheraddr, ea);
}


/*
 * Open the PROM device.
 * Return netif ptr on success.
 */
struct devdata *
netif_init(aux)
	void *aux;
{
	struct devdata *dd = &prom_dd;
	struct saioreq *si;
	struct bootparam *bp;
	int error;

	/*
	 * Setup our part of the saioreq.
	 * (determines what gets opened)
	 */
	si = &dd->dd_si;
	bzero((caddr_t)si, sizeof(*si));
	bp = *romp->bootParam;
	si->si_boottab = bp->bootDevice;
	si->si_ctlr = bp->ctlrNum;
	si->si_unit = bp->unitNum;
	si->si_boff = bp->partNum;

#ifdef NETIF_DEBUG
	if (debug)
		printf("netif_init: calling prom_iopen\n");
#endif

	/*
	 * Note: Sun PROMs will do RARP on open, but does not tell
	 * you the IP address it gets, so it is just noise to us...
	 */
	if ((error = prom_iopen(si)) != 0) {
		printf("netif_init: prom_iopen, error=%d\n", error);
		return (NULL);
	}

	if (si->si_sif == NULL) {
		printf("netif_init: not a network device\n");
		prom_iclose(si);
		return (NULL);
	}

#ifdef NETIF_DEBUG
	if (debug)
		printf("netif_init: allocating buffers\n");
#endif

	/* Allocate the transmit/receive buffers. */
	if (dd->rbuf == NULL) {
		dd->rbuf_len = PKT_BUF_SIZE;
		dd->rbuf = dvma_alloc(dd->rbuf_len);
	}
	if (dd->tbuf == NULL) {
		dd->tbuf_len = PKT_BUF_SIZE;
		dd->tbuf = dvma_alloc(dd->tbuf_len);
	}
	if ((dd->rbuf == NULL) ||
	    (dd->tbuf == NULL))
		panic("netif_init: malloc failed");

#ifdef NETIF_DEBUG
	if (debug)
		printf("netif_init: rbuf=0x%x, tbuf=0x%x\n",
			   dd->rbuf, dd->tbuf);
#endif

	/* Record our ethernet address. */
	sun3_getether(dd->dd_myea);
	dd->dd_opens = 0;

	return(dd);
}

void
netif_fini(dd)
	struct devdata *dd;
{
	struct saioreq *si;

	si = &dd->dd_si;

#ifdef NETIF_DEBUG
	if (debug)
		printf("netif_fini: calling prom_iclose\n");
#endif

	prom_iclose(si);
	/* Dellocate the transmit/receive buffers. */
	if (dd->rbuf) {
		dvma_free(dd->rbuf, dd->rbuf_len);
		dd->rbuf = NULL;
	}
	if (dd->tbuf) {
		dvma_free(dd->tbuf, dd->tbuf_len);
		dd->tbuf = NULL;
	}
}

int
netif_attach(nif, s, aux)
	struct netif *nif;
	struct iodesc *s;
	void *aux;
{
	struct devdata *dd;

	dd = nif->nif_devdata;
	if (dd == NULL) {
		dd = netif_init(aux);
		if (dd == NULL)
			return (ENXIO);
		nif->nif_devdata = dd;
	}
	dd->dd_opens++;
	MACPY(dd->dd_myea, s->myea);
	s->io_netif = nif;
	return(0);
}

void
netif_detach(nif)
	struct netif *nif;
{
	struct devdata *dd;

	dd = nif->nif_devdata;
	if (dd == NULL)
		return;
	dd->dd_opens--;
	if (dd->dd_opens > 0)
		return;
	netif_fini(dd);
	nif->nif_devdata = NULL;
}

int
netif_open(aux)
	void *aux;
{
	struct netif *nif;
	struct iodesc *s;
	int fd, error;

	/* find a free socket */
	for (fd = 0, s = sockets; fd < SOPEN_MAX; fd++, s++)
		if (s->io_netif == NULL)
			goto found;
	errno = EMFILE;
	return (-1);

found:
	bzero(s, sizeof(*s));
	nif = &prom_nif;
	error = netif_attach(nif, s);
	if (error != 0) {
		errno = error;
		return (-1);
	}
	return (fd);
}

int
netif_close(fd)
	int fd;
{
	struct iodesc *s;
	struct netif *nif;

	if (fd < 0 || fd >= SOPEN_MAX) {
		errno = EBADF;
		return(-1);
	}
	s = &sockets[fd];
	nif = s->io_netif;
	/* Already closed? */
	if (nif == NULL)
		return(0);
	netif_detach(nif);
	s->io_netif = NULL;
	return(0);
}


struct iodesc *
socktodesc(fd)
	int fd;
{
	if (fd < 0 || fd >= SOPEN_MAX) {
		errno = EBADF;
		return (NULL);
	}
	return (&sockets[fd]);
}


/*
 * Send a packet.  The ether header is already there.
 * Return the length sent (or -1 on error).
 */
int
netif_put(desc, pkt, len)
	struct iodesc *desc;
	void *pkt;
	size_t len;
{
	struct netif *nif;
	struct devdata *dd;
	struct saioreq *si;
	struct saif *sif;
	char *dmabuf;
	int rv, slen;

#ifdef NETIF_DEBUG
	if (debug > 1) {
		struct ether_header *eh;

		printf("netif_put: desc=0x%x pkt=0x%x len=%d\n",
			   desc, pkt, len);
		eh = pkt;
		printf("dst: %s ", ether_sprintf(eh->ether_dhost));
		printf("src: %s ", ether_sprintf(eh->ether_shost));
		printf("type: 0x%x\n", eh->ether_type & 0xFFFF);
	}
#endif

	nif = desc->io_netif;
	dd = nif->nif_devdata;
	si = &dd->dd_si;
	sif = si->si_sif;
	slen = len;

#ifdef PARANOID
	if (sif == NULL)
		panic("netif_put: no saif ptr");
#endif

	/*
	 * Copy into our transmit buffer because the PROM
	 * network driver might continue using the packet
	 * after the sif_xmit call returns.  We never send
	 * very much data anyway, so the copy is fine.
	 */
	if (slen > dd->tbuf_len)
		panic("netif_put: slen=%d", slen);
	bcopy(pkt, dd->tbuf, slen);

	if (slen < 60) {
		slen = 60;
	}

	rv = (*sif->sif_xmit)(si->si_devdata, dd->tbuf, slen);

#ifdef NETIF_DEBUG
	if (debug > 1)
		printf("netif_put: xmit returned %d\n", rv);
#endif
	/*
	 * Just ignore the return value.  If the PROM transmit
	 * function fails, it will make some noise, such as:
	 *      le: No Carrier
	 */

	return len;
}

/*
 * Receive a packet, including the ether header.
 * Return the total length received (or -1 on error).
 */
int
netif_get(desc, pkt, maxlen, timo)
	struct iodesc *desc;
	void *pkt;
	size_t maxlen;
	time_t timo;	/* seconds */
{
	struct netif *nif;
	struct devdata *dd;
	struct saioreq *si;
	struct saif *sif;
	int tick0, tmo_ticks;
	int rlen = 0;

#ifdef NETIF_DEBUG
	if (debug > 1)
		printf("netif_get: pkt=0x%x, maxlen=%d, tmo=%d\n",
			   pkt, maxlen, timo);
#endif

	nif = desc->io_netif;
	dd = nif->nif_devdata;
	si = &dd->dd_si;
	sif = si->si_sif;

	tmo_ticks = timo * hz;

	/* Have to receive into our own buffer and copy. */
	do {
		tick0 = getticks();
		do {
			rlen = (*sif->sif_poll)(si->si_devdata, dd->rbuf);
			if (rlen != 0)
				goto break2;
		} while (getticks() == tick0);
	} while (--tmo_ticks > 0);

	/* No packet arrived.  Better reset the interface. */
	printf("netif_get: timeout; resetting\n");
	(*sif->sif_reset)(si->si_devdata, si);

break2:

#ifdef NETIF_DEBUG
	if (debug > 1)
		printf("netif_get: received rlen=%d\n", rlen);
#endif

	/* Need at least a valid Ethernet header. */
	if (rlen < 12)
		return -1;

	/* If we went beyond our buffer, were dead! */
	if (rlen > dd->rbuf_len)
		panic("netif_get: rlen=%d", rlen);

	/* The caller's buffer may be smaller... */
	if (rlen > maxlen)
		rlen = maxlen;

	bcopy(dd->rbuf, pkt, rlen);

#ifdef NETIF_DEBUG
	if (debug > 1) {
		struct ether_header *eh = pkt;

		printf("dst: %s ", ether_sprintf(eh->ether_dhost));
		printf("src: %s ", ether_sprintf(eh->ether_shost));
		printf("type: 0x%x\n", eh->ether_type & 0xFFFF);
	}
#endif

	return rlen;
}
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_sun.c,v 1.6 2002/03/14 01:26:47 millert Exp $	*/
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_sun.c,v 1.5 2001/07/04 08:33:51 niklas Exp $	*/
d95 2
a96 2
		dst = (char*)&sun3_idprom;
		src = (char*)IDPROM_BASE;
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_sun.c,v 1.4 1996/01/29 23:41:07 gwr Exp $	*/
d69 1
a69 1
static void sun3_getether __P((u_char *));
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_sun.c,v 1.5 2001/07/04 08:33:51 niklas Exp $	*/
d69 1
a69 1
static void sun3_getether(u_char *);
d95 2
a96 2
		dst = (char *)&sun3_idprom;
		src = (char *)IDPROM_BASE;
@


1.5.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_sun.c,v 1.5.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.4
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
@


1.4.6.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.4.6.2
log
@Merge in -current from about a week ago
@
text
@d69 1
a69 1
static void sun3_getether(u_char *);
d95 2
a96 2
		dst = (char *)&sun3_idprom;
		src = (char *)IDPROM_BASE;
@


1.4.6.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_sun.c,v 1.4.6.2 2002/03/28 11:26:45 niklas Exp $	*/
@


1.3
log
@sync + our changes
@
text
@d167 1
a167 1
		panic("netif_init: malloc failed\n");
d342 1
a342 1
		panic("netif_put: no saif ptr\n");
d352 1
a352 1
		panic("netif_put: slen=%d\n", slen);
d432 1
a432 1
		panic("netif_get: rlen=%d\n", rlen);
@


1.2
log
@sync with 0430.
@
text
@d407 1
a407 1
	tick0 = getticks();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: netif_sun.c,v 1.3 1995/10/13 21:45:18 gwr Exp $	*/
d63 5
a67 1
static struct netif netif_prom;
d70 14
a83 3
#ifdef NETIF_DEBUG
int netif_debug;
#endif
a84 2
struct saioreq net_ioreq;
struct iodesc sockets[SOPEN_MAX];
d86 3
a88 3
struct iodesc *
socktodesc(sock)
	int sock;
d90 11
a100 2
	if (sock != 0) {
		return(NULL);
d102 1
a102 1
	return (sockets);
d105 8
a112 3
int
netif_open(machdep_hint)
	void *machdep_hint;
d114 2
a116 2
	struct saioreq *si;
	struct iodesc *io;
a118 10
	/* find a free socket */
	io = sockets;
	if (io->io_netif) {
#ifdef	DEBUG
		printf("netif_open: device busy\n");
#endif
		return (-1);
	}
	bzero(io, sizeof(*io));

d123 1
a123 1
	si = &net_ioreq;
a125 1

d131 5
d141 2
a142 4
#ifdef	DEBUG
		printf("netif_open: prom_iopen, error=%d\n", error);
#endif
		return (-1);
d144 1
d146 1
a146 3
#ifdef	DEBUG
		printf("netif_open: not a network device\n");
#endif
d148 1
a148 1
		return (-1);
d151 17
a167 2
	netif_prom.devdata = si;
	io->io_netif = &netif_prom;
d169 45
a213 2
	/* Put our ethernet address in io->myea */
	sun3_getether(io->myea);
d215 10
d228 42
d274 2
a275 3
	struct saioreq *si;
	struct iodesc *io;
	struct netif *ni;
d277 1
a277 1
	if (fd != 0) {
d281 9
d291 8
a298 7
	io = sockets;
	ni = io->io_netif;
	if (ni != NULL) {
		si = ni->devdata;
		prom_iclose(si);
		ni->devdata = NULL;
		io->io_netif = NULL;
d300 1
a300 1
	return(0);
d303 1
d314 2
d319 1
a319 1
	int rv, sendlen;
d322 1
a322 1
	if (netif_debug) {
d334 3
a336 1
	si = desc->io_netif->devdata;
d338 1
a338 7
	sendlen = len;
	if (sendlen < 60) {
		sendlen = 60;
#ifdef NETIF_DEBUG
		printf("netif_put: length padded to %d\n", sendlen);
#endif
	}
d345 15
a359 3
	dmabuf = dvma_mapin(pkt, sendlen);
	rv = sif->sif_xmit(si->si_devdata, dmabuf, sendlen);
	dvma_mapout(dmabuf, sendlen);
d362 1
a362 1
	if (netif_debug)
d365 5
a369 2
	if (rv == 0) rv = len;
	else rv = -1;
d371 1
a371 1
	return rv;
d383 1
a383 1
	time_t timo;
d385 2
a388 1
	char *dmabuf;
d390 1
a390 1
	int len;
d393 1
a393 1
	if (netif_debug)
d398 3
a400 1
	si = desc->io_netif->devdata;
d403 1
a403 4
#ifdef PARANOID
	if (sif == NULL)
		panic("netif_get: no saif ptr\n");
#endif
d405 2
a406 1
	tmo_ticks = timo * hz;
d408 10
d419 1
a419 4
	dmabuf = dvma_mapin(pkt, maxlen);
	do  len = sif->sif_poll(si->si_devdata, dmabuf);
	while ((len == 0) && ((getticks() - tick0) < tmo_ticks));
	dvma_mapout(dmabuf, maxlen);
d422 2
a423 2
	if (netif_debug)
		printf("netif_get: received len=%d\n", len);
d426 2
a427 1
	if (len < 12)
d430 10
d441 1
a441 1
	if (netif_debug) {
d450 1
a450 1
	return len;
a451 22

static struct idprom sun3_idprom;

static void
sun3_getether(ea)
	u_char *ea;
{
	u_char *src, *dst;
	int len, x;

	if (sun3_idprom.idp_format == 0) {
		dst = (char*)&sun3_idprom;
		src = (char*)IDPROM_BASE;
		len = IDPROM_SIZE;
		do {
			x = get_control_byte(src++);
			*dst++ = x;
		} while (--len > 0);
	}
	MACPY(sun3_idprom.idp_etheraddr, ea);
}

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
