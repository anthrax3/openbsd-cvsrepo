head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.04.08.33.48;	author niklas;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	97.09.07.14.05.18;	author kstailey;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	96.05.03.16.04.01;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.58;	author deraadt;	state Exp;
branches;
next	;

1.3.12.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.4.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.7
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: dvma.c,v 1.6 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: dvma.c,v 1.6 1996/01/31 17:20:39 gwr Exp $	*/

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * The easiest way to deal with the need for DVMA mappings is to
 * create a DVMA alias mapping of the entire address range used by
 * the boot program.  That way, dvma_mapin can just compute the
 * DVMA alias address, and dvma_mapout does nothing.
 *
 * Note that this assumes that standalone programs will do I/O
 * operations only within range (SA_MIN_VA .. SA_MAX_VA) checked.
 */

#include <sys/param.h>
#include "stand.h"

/* XXX */
extern int  get_segmap(int);
extern void set_segmap(int, int);


#define	DVMA_BASE 0xFFf00000
#define DVMA_MAPLEN  0xE0000	/* 1 MB - 128K (save MONSHORTSEG) */

#define SA_MIN_VA	0x200000
#define SA_MAX_VA	(SA_MIN_VA + DVMA_MAPLEN)

/* This points to the end of the free DVMA space. */
u_int dvma_end = DVMA_BASE + DVMA_MAPLEN;

void
dvma_init()
{
	int segva, dmava, sme;

	segva = SA_MIN_VA;
	dmava = DVMA_BASE;

	while (segva < SA_MAX_VA) {
		sme = get_segmap(segva);
		set_segmap(dmava, sme);
		segva += NBSG;
		dmava += NBSG;
	}
}

/* Convert a local address to a DVMA address. */
char *
dvma_mapin(char *addr, int len)
{
	int va = (int)addr;

	/* Make sure the address is in the DVMA map. */
	if ((va < SA_MIN_VA) || (va >= SA_MAX_VA))
		panic("dvma_mapin");

	va -= SA_MIN_VA;
	va += DVMA_BASE;

	return ((char *) va);
}

/* Convert a DVMA address to a local address. */
char *
dvma_mapout(char *addr, int len)
{
	int va = (int)addr;

	/* Make sure the address is in the DVMA map. */
	if ((va < DVMA_BASE) || (va >= (DVMA_BASE + DVMA_MAPLEN)))
		panic("dvma_mapout");

	va -= DVMA_BASE;
	va += SA_MIN_VA;

	return ((char *) va);
}

char *
dvma_alloc(int len)
{
	len = m68k_round_page(len);
	dvma_end -= len;
	return((char *)dvma_end);
}

void
dvma_free(char *dvma, int len)
{
	/* not worth the trouble */
}
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.5 2002/03/14 01:26:47 millert Exp $	*/
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.4 2001/07/04 08:33:48 niklas Exp $	*/
d114 1
a114 1
	return((char*)dvma_end);
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.6 1996/01/31 17:20:39 gwr Exp $	*/
d48 2
a49 2
extern int  get_segmap __P((int));
extern void set_segmap __P((int, int));
@


1.4.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.4 2001/07/04 08:33:48 niklas Exp $	*/
d48 2
a49 2
extern int  get_segmap(int);
extern void set_segmap(int, int);
d114 1
a114 1
	return((char *)dvma_end);
@


1.4.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.4.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.3
log
@switch from private Mach derived conversion macros to m68k ones
@
text
@d1 1
@


1.3.12.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.3.12.2
log
@Merge in -current from about a week ago
@
text
@d48 2
a49 2
extern int  get_segmap(int);
extern void set_segmap(int, int);
d114 1
a114 1
	return((char *)dvma_end);
@


1.3.12.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.3.12.2 2002/03/28 11:26:45 niklas Exp $	*/
@


1.2
log
@sync with 0430.
@
text
@d111 1
a111 1
	len = sun3_round_page(len);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: dvma.c,v 1.4 1995/09/26 21:29:25 gwr Exp $	*/
d57 3
d111 3
a113 6
	char *mem;

	mem = alloc(len);
	if (!mem)
		return(mem);
	return(dvma_mapin(mem, len));
d119 1
a119 5
	char *mem;

	mem = dvma_mapout(dvma, len);
	if (mem)
		free(mem, len);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
