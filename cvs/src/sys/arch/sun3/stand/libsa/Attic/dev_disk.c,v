head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2001.07.04.08.33.48;	author niklas;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	96.10.11.23.06.46;	author deraadt;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	96.05.03.16.04.00;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.10.26.01.15.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.57;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.4.14.2;

1.4.14.2
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.5.4.1
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.6
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: dev_disk.c,v 1.5 2001/07/04 08:33:48 niklas Exp $ */
/*	$NetBSD: dev_disk.c,v 1.4 1996/04/10 18:31:14 gwr Exp $ */

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This module implements a "raw device" interface suitable for
 * use by the stand-alone I/O library UFS file-system code, and
 * possibly for direct access (i.e. boot from tape).
 *
 * The implementation is deceptively simple because it uses the
 * drivers provided by the Sun PROM monitor.  Note that only the
 * PROM driver used to load the boot program is available here.
 */

#include <sys/types.h>
#include <machine/mon.h>
#include <machine/saio.h>

#include "stand.h"

#include "dvma.h"
#include "promdev.h"
 
#define RETRY_COUNT 5

extern int debug;
int disk_opencount;
struct saioreq disk_ioreq;

int
disk_open(f, devname)
	struct open_file *f;
	char *devname;		/* Device part of file name (or NULL). */
{
	struct bootparam *bp;
	struct saioreq *si;
	int	error;

#ifdef DEBUG_PROM
	if (debug)
		printf("disk_open: %s\n", devname);
#endif

	si = &disk_ioreq;
	if (disk_opencount == 0) {
		/*
		 * Setup our part of the saioreq.
		 * (determines what gets opened)
		 */
		bp = *romp->bootParam;
		si->si_boottab = bp->bootDevice;
		si->si_ctlr = bp->ctlrNum;
		si->si_unit = bp->unitNum;
		si->si_boff = bp->partNum;
		if ((error = prom_iopen(si)) != 0)
			return (error);
	}
	disk_opencount++;

	f->f_devdata = si;
	return 0;
}

int
disk_close(f)
	struct open_file *f;
{
	struct saioreq *si;

#ifdef DEBUG_PROM
	if (debug)
		printf("disk_close: ocnt=%d\n", disk_opencount);
#endif

	si = f->f_devdata;
	f->f_devdata = NULL;
	if (disk_opencount <= 0)
		return 0;
	if (--disk_opencount == 0)
		prom_iclose(si);
	return 0;
}

int
disk_strategy(devdata, flag, dblk, size, buf, rsize)
	void	*devdata;
	int	flag;
	daddr_t	dblk;
	u_int	size;
	char	*buf;
	u_int	*rsize;
{
	struct saioreq *si;
	struct boottab *ops;
	char *dmabuf;
	int retry, si_flag, xcnt;

	si = devdata;
	ops = si->si_boottab;

#ifdef DEBUG_PROM
	if (debug > 1)
		printf("disk_strategy: size=%d dblk=%d\n", size, dblk);
#endif

	dmabuf = dvma_mapin(buf, size);
	si_flag = (flag == F_READ) ? SAIO_F_READ : SAIO_F_WRITE;
	
	/*
	 * The PROM strategy will occasionally return -1 and expect
	 * us to try again.  From mouse@@Collatz.McRCIM.McGill.EDU
	 */
	retry = RETRY_COUNT;
	do {
		si->si_bn = dblk;
		si->si_ma = dmabuf;
		si->si_cc =	size;
		xcnt = (*ops->b_strategy)(si, si_flag);
	} while ((xcnt <= 0) && (--retry > 0));

	dvma_mapout(dmabuf, size);

#ifdef DEBUG_PROM
	if (debug > 1)
		printf("disk_strategy: xcnt = %x retries=%d\n",
		   xcnt, RETRY_COUNT - retry);
#endif

	if (xcnt <= 0)
		return (EIO);

	*rsize = xcnt;
	return (0);
}

int
disk_ioctl()
{
	return EIO;
}

@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_disk.c,v 1.4 1996/04/10 18:31:14 gwr Exp $ */
@


1.5.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_disk.c,v 1.5 2001/07/04 08:33:48 niklas Exp $ */
@


1.4
log
@sync + our changes
@
text
@d1 1
@


1.4.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$ */
@


1.4.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_disk.c,v 1.4.14.1 2001/10/31 03:08:00 nate Exp $ */
@


1.3
log
@sync with 0430.
@
text
@d51 2
a52 2

#define RETRY_COUNT	5
d55 1
a55 1
int	disk_opencount;
d69 1
a69 1
	printf("disk_open: %s\n", devname);
d74 11
a84 11
	/*
	 * Setup our part of the saioreq.
	 * (determines what gets opened)
	 */
	bp = *romp->bootParam;
	si->si_boottab = bp->bootDevice;
	si->si_ctlr = bp->ctlrNum;
	si->si_unit = bp->unitNum;
	si->si_boff = bp->partNum;
	if ((error = prom_iopen(si)) != 0)
		return (error);
d131 1
a131 1
	printf("disk_strategy: size=%d dblk=%d\n", size, dblk);
d143 4
a146 4
	si->si_bn = dblk;
	si->si_ma = dmabuf;
	si->si_cc =	size;
	xcnt = (*ops->b_strategy)(si, si_flag);
@


1.2
log
@update from netbsd tree
@
text
@d1 1
a1 1
/*	$NetBSD: dev_disk.c,v 1.3 1995/10/17 23:07:19 gwr Exp $ */
d52 4
d68 1
d72 2
a77 2
	si = &disk_ioreq;
	bzero((caddr_t)si, sizeof(*si));
a78 1

a82 1

d85 2
d98 5
a103 1
	prom_iclose(si);
d105 4
d124 1
a124 1
	int	si_flag, xcnt;
d130 1
d135 1
d137 6
d146 2
a148 2
	si_flag = (flag == F_READ) ? SAIO_F_READ : SAIO_F_WRITE;
	xcnt = (*ops->b_strategy)(si, si_flag);
d152 3
a154 1
	printf("disk_strategy: xcnt = %x\n", xcnt);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: dev_disk.c,v 1.2 1995/10/13 21:45:15 gwr Exp $ */
a117 2
#else
	twiddle();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
