head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.6
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.04.08.33.52;	author niklas;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	99.01.11.05.12.05;	author millert;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	97.09.07.14.05.19;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.11.23.06.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.04.11;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.58;	author deraadt;	state Exp;
branches;
next	;

1.5.6.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.5.6.3;

1.5.6.3
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.6.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.9
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: promdev.c,v 1.8 2002/03/14 03:16:01 millert Exp $ */
/*	$NetBSD: promdev.c,v 1.7 1996/01/29 23:41:10 gwr Exp $ */

/*
 * Copyright (c) 1995 Gordon W. Ross
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <machine/mon.h>
#include <machine/pte.h>
#include <machine/saio.h>

#include "stand.h"
#include "dvma.h"

extern void set_pte(int, int);
extern int debug;

static int promdev_inuse;

static char *
prom_mapin(u_long physaddr, int length, int maptype);

/*
 * Note: caller sets the fields:
 *	si->si_boottab
 *	si->si_ctlr
 *	si->si_unit
 *	si->si_boff
 */

int
prom_iopen(si)
	struct saioreq *si;
{
	struct boottab *ops;
	struct devinfo *dip;
	int	error;

	if (promdev_inuse)
		return(EMFILE);

	ops = si->si_boottab;
	dip = ops->b_devinfo;

#ifdef DEBUG_PROM
	if (debug) {
		printf("Boot device type: %s\n", ops->b_desc);
		printf("d_devbytes=%d\n", dip->d_devbytes);
		printf("d_dmabytes=%d\n", dip->d_dmabytes);
		printf("d_localbytes=%d\n", dip->d_localbytes);
		printf("d_stdcount=%d\n", dip->d_stdcount);
		printf("d_stdaddrs[%d]=%x\n", si->si_ctlr,
			   dip->d_stdaddrs[si->si_ctlr]);
		printf("d_devtype=%d\n", dip->d_devtype);
		printf("d_maxiobytes=%d\n", dip->d_maxiobytes);
	}
#endif

	if (si->si_ctlr > dip->d_stdcount) {
		printf("Invalid controller number\n");
		return(ENXIO);
	}

	dvma_init();

	if (dip->d_devbytes) {
		si->si_devaddr = prom_mapin(dip->d_stdaddrs[si->si_ctlr],
			dip->d_devbytes, dip->d_devtype);
#ifdef	DEBUG_PROM
		if (debug)
			printf("prom_iopen: devaddr=0x%x pte=0x%x\n",
				   si->si_devaddr, get_pte(si->si_devaddr));
#endif
	}

	if (dip->d_dmabytes) {
		int addr, size;
		/* try page-aligned address... */
		size = dip->d_dmabytes + NBPG;
		addr = (int) dvma_alloc(size);
		addr = m68k_round_page(addr);
		si->si_dmaaddr = (char *) addr;
#ifdef	DEBUG_PROM
		if (debug)
			printf("prom_iopen: dmaaddr=0x%x\n", si->si_dmaaddr);
#endif
	}

	if (dip->d_localbytes) {
		si->si_devdata = alloc(dip->d_localbytes);
#ifdef	DEBUG_PROM
		if (debug)
			printf("prom_iopen: devdata=0x%x\n", si->si_devdata);
#endif
	}

	/* OK, call the PROM device open routine. */
#ifdef	DEBUG_PROM
	if (debug)
		printf("prom_iopen: calling prom open...\n");
#endif
	error = (*ops->b_open)(si);
	if (error != 0) {
		printf("prom_iopen: \"%s\" error=%d\n",
			   ops->b_desc, error);
		return (ENXIO);
	}
#ifdef	DEBUG_PROM
	if (debug)
		printf("prom_iopen: prom open returned %d\n", error);
#endif

	promdev_inuse++;
	return (0);
}

void
prom_iclose(si)
	struct saioreq *si;
{
	struct boottab *ops;
	struct devinfo *dip;

	if (promdev_inuse == 0)
		return;

	ops = si->si_boottab;
	dip = ops->b_devinfo;

#ifdef	DEBUG_PROM
	if (debug)
		printf("prom_iclose: calling prom close...\n");
#endif
	(*ops->b_close)(si);

	promdev_inuse = 0;
}

struct mapinfo {
	int maptype;
	int pgtype;
	int base;
};

static struct mapinfo
prom_mapinfo[] = {
	/* On-board memory, I/O */
	{ MAP_MAINMEM,   PGT_OBMEM, 0 },
	{ MAP_OBIO,      PGT_OBIO,  0 },
	/* Multibus adapter */
	{ MAP_MBMEM,     PGT_VME_D16, 0xFF000000 },
	{ MAP_MBIO,      PGT_VME_D16, 0xFFFF0000 },
	/* VME A16 */
	{ MAP_VME16A16D, PGT_VME_D16, 0xFFFF0000 },
	{ MAP_VME16A32D, PGT_VME_D32, 0xFFFF0000 },
	/* VME A24 */
	{ MAP_VME24A16D, PGT_VME_D16, 0xFF000000 },
	{ MAP_VME24A32D, PGT_VME_D32, 0xFF000000 },
	/* VME A32 */
	{ MAP_VME32A16D, PGT_VME_D16, 0 },
	{ MAP_VME32A32D, PGT_VME_D32, 0 },
};
static prom_mapinfo_cnt = sizeof(prom_mapinfo) / sizeof(prom_mapinfo[0]);

/* The virtual address we will use for PROM device mappings. */
static int prom_devmap = MONSHORTSEG;

static char *
prom_mapin(physaddr, length, maptype)
	u_long physaddr;
	int length, maptype;
{
	int i, pa, pte, va;

	if (length > (4*NBPG))
		panic("prom_mapin: length=%d", length);

	for (i = 0; i < prom_mapinfo_cnt; i++)
		if (prom_mapinfo[i].maptype == maptype)
			goto found;
	panic("prom_mapin: invalid maptype %d", maptype);
found:

	pte = prom_mapinfo[i].pgtype;
	pte |= PG_PERM;
	pa = prom_mapinfo[i].base;
	pa += physaddr;
	pte |= PA_PGNUM(pa);

	va = prom_devmap;
	do {
		set_pte(va, pte);
		va += NBPG;
		pte += 1;
		length -= NBPG;
	} while (length > 0);
	return ((char *)(prom_devmap | (pa & PGOFSET)));
}
@


1.8
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.c,v 1.7 2002/03/14 01:26:47 millert Exp $ */
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.c,v 1.6 2001/07/04 08:33:52 niklas Exp $ */
d110 1
a110 1
		si->si_dmaaddr = (char*) addr;
d225 1
a225 1
	return ((char*)(prom_devmap | (pa & PGOFSET)));
@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.c,v 1.7 1996/01/29 23:41:10 gwr Exp $ */
d43 1
a43 1
extern void set_pte __P((int, int));
@


1.6.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.c,v 1.6 2001/07/04 08:33:52 niklas Exp $ */
d43 1
a43 1
extern void set_pte(int, int);
d110 1
a110 1
		si->si_dmaaddr = (char *) addr;
d225 1
a225 1
	return ((char *)(prom_devmap | (pa & PGOFSET)));
@


1.6.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.c,v 1.6.4.1 2002/06/11 03:39:01 art Exp $ */
@


1.5
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
@


1.5.6.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$ */
@


1.5.6.2
log
@Merge in -current from about a week ago
@
text
@d43 1
a43 1
extern void set_pte(int, int);
d110 1
a110 1
		si->si_dmaaddr = (char *) addr;
d225 1
a225 1
	return ((char *)(prom_devmap | (pa & PGOFSET)));
@


1.5.6.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.c,v 1.5.6.2 2002/03/28 11:26:45 niklas Exp $ */
@


1.4
log
@switch from private Mach derived conversion macros to m68k ones
@
text
@d203 1
a203 1
		panic("prom_mapin: length=%d\n", length);
d208 1
a208 1
	panic("prom_mapin: invalid maptype %d\n", maptype);
@


1.3
log
@sync + our changes
@
text
@d108 1
a108 1
		addr = sun3_round_page(addr);
@


1.2
log
@sync with 0430.
@
text
@d80 1
a80 1
	              dip->d_stdaddrs[si->si_ctlr]);
d99 1
a99 1
			   si->si_devaddr, get_pte(si->si_devaddr));
d112 1
a112 1
		printf("prom_iopen: dmaaddr=0x%x\n", si->si_dmaaddr);
d125 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: promdev.c,v 1.6 1995/10/13 21:45:21 gwr Exp $ */
d43 1
d73 7
a79 6
	printf("Boot device type: %s\n", ops->b_desc);
	printf("d_devbytes=%d\n", dip->d_devbytes);
	printf("d_dmabytes=%d\n", dip->d_dmabytes);
	printf("d_localbytes=%d\n", dip->d_localbytes);
	printf("d_stdcount=%d\n", dip->d_stdcount);
	printf("d_stdaddrs[%d]=%x\n", si->si_ctlr,
d81 3
a83 2
	printf("d_devtype=%d\n", dip->d_devtype);
	printf("d_maxiobytes=%d\n", dip->d_maxiobytes);
d97 2
a98 1
		printf("prom_iopen: devaddr=0x%x pte=0x%x\n",
d104 6
a109 1
		si->si_dmaaddr = dvma_alloc(dip->d_dmabytes);
d111 1
d119 2
a120 1
		printf("prom_iopen: devdata=0x%x\n", si->si_devdata);
d132 2
a133 1
	printf("prom_iopen: succeeded, error=%d\n", error);
d153 4
a157 5

	if (si->si_dmaaddr) {
		dvma_free(si->si_dmaaddr, dip->d_dmabytes);
		si->si_dmaaddr = NULL;
	}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
