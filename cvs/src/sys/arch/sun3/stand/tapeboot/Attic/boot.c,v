head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2001.07.04.08.33.55;	author niklas;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	96.10.14.09.05.16;	author deraadt;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	95.10.26.01.15.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.59;	author deraadt;	state Exp;
branches;
next	;

1.3.14.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.4.4.1
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.5
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: boot.c,v 1.4 2001/07/04 08:33:55 niklas Exp $ */
/*	$NetBSD: boot.c,v 1.2 1995/10/17 22:58:14 gwr Exp $ */

/*-
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	@@(#)boot.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/reboot.h>

#include <machine/mon.h>

#include "stand.h"
#include "promboot.h"

int debug;
int errno;

/*
 * Boot device is derived from ROM provided information.
 */
#define LOADADDR	0x4000

extern char		*version;
char	defname[32] = "1";
char	line[80];


main()
{
	char *cp, *file;
	int	io;

	printf(">> OpenBSD tapeboot [%s]\n", version);
	prom_get_boot_info();
	file = defname;

	cp = prom_bootfile;
	if (cp && *cp)
		file = cp;

	for (;;) {
		if (prom_boothow & RB_ASKNAME) {
			printf("tapeboot: segment? [1] ");
			gets(line);
			if (line[0])
				file = line;
		}
		exec_sun(file, LOADADDR);
		printf("tapeboot: %s: %s\n", file, strerror(errno));
		prom_boothow |= RB_ASKNAME;
	}
}
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2 1995/10/17 22:58:14 gwr Exp $ */
@


1.4.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.4 2001/07/04 08:33:55 niklas Exp $ */
@


1.3
log
@openbsd
@
text
@d1 1
@


1.3.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$ */
@


1.3.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3.14.1 2001/10/31 03:08:00 nate Exp $ */
@


1.2
log
@update from netbsd tree
@
text
@d64 1
a64 1
	printf(">> NetBSD tapeboot [%s]\n", version);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: boot.c,v 1.1.1.1 1995/10/13 21:27:30 gwr Exp $	*/
d3 3
a5 3
/*
 * Copyright (c) 1994 Paul Kranenburg
 * All rights reserved.
d17 5
a21 18
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This is a generic "first-stage" boot program.
d23 11
a33 1
 * Note that this program has absolutely no filesystem knowledge!
d35 1
a35 3
 * Instead, this uses a table of disk block numbers that are
 * filled in by the installboot program such that this program
 * can load the "second-stage" boot program.
a39 1
#include <sys/exec.h>
d46 3
a53 1
extern int debug;
d55 1
a55 1

a57 2
int block_size = 512;

d61 2
a62 5
	struct open_file	f;
	struct bootparam *bp;
	void	(*entry)();
	char	*addr;
	int n, error;
d66 1
d68 3
a70 6
	/*
	 * Set the tape file number to the next one, because
	 * the boot program is first, then the kernel.
	 */
	bp = *romp->bootParam;
	bp->partNum += 1;
d74 1
a74 1
			printf("tapeboot: segment? [%d] ", bp->partNum);
d76 2
a77 10
			if (('0' <= line[0]) && (line[0] <= '9')) {
				bp->partNum = line[0] - '0';
			}
		}
		
		printf("tapeboot: opening segment %d\n", bp->partNum);
		f.f_flags = F_RAW;
		if ((error = devopen(&f, 0, &addr)) != 0) {
			printf("tapeboot: open failed, error=%d\n", error);
			goto ask;
d79 2
a80 11

		addr = (char*)LOADADDR;
		error = loadfile(&f, addr);

		printf("tapeboot: close (rewind)...\n");
		f.f_dev->dv_close(&f);
		if (error == 0)
			break;

		printf("tapeboot: load failed, error=%d\n", error);
	ask:
a82 54

	if (debug) {
		printf("Debug mode - enter c to continue...");
		/* This will print "\nAbort at ...\n" */
		asm("	trap #0");
	}

	printf("Starting program at 0x%x\n", (long)addr);
	entry = (void (*)())addr;
	(*entry)();
}

int
loadfile(fp, addr)
	struct open_file	*fp;
	char			*addr;
{
	char *buf;
	int	n, blknum;
	int error = 0;
	/*
	 * Loading a kernel.  It WILL have an a.out header.
	 * XXX - This assumes OMAGIC format!
	 */
	addr -= sizeof(struct exec); /* XXX */

	/* Need to use a buffer that can be mapped into DVMA space. */
	buf = alloc(block_size);
	if (!buf)
		panic("tapeboot: alloc failed");

	printf("tapeboot: loading ... ");
	/* limit program size to < 2MB */
	for (blknum = 0; blknum < 4096; blknum++) {

		error = (fp->f_dev->dv_strategy)(fp->f_devdata, F_READ,
		                blknum, block_size, buf, &n);
		if (error) {
			printf("(error=%d)\n", error);
			return EIO;
		}
		if (n == 0)
			break;	/* end of tape */
		if (n != block_size) {
			printf(" (short read)\n");
			return EIO;
		}

		bcopy(buf, addr, block_size);
		addr += block_size;
	}

	printf("(%d blocks)\n", blknum);
	return 0;
a83 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
