head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.04.08.33.57;	author niklas;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	95.10.26.01.15.38;	author deraadt;	state Exp;
branches
	1.1.16.1;
next	;

1.1.16.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.1.16.3;

1.1.16.3
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.2.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.4
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: rawfs.c,v 1.3 2002/03/14 01:26:47 millert Exp $	*/
/*	$NetBSD: rawfs.c,v 1.1 1995/10/17 22:58:27 gwr Exp $	*/

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Raw file system - for stream devices like tapes.
 * No random access, only sequential read allowed.
 * This exists only to allow upper level code to be
 * shielded from the fact that the device must be
 * read only with whole block position and size.
 */

#include <sys/param.h>
#include <stand.h>
#include <rawfs.h>

extern int debug;

/* Our devices are generally willing to do 8K transfers. */
#define	RAWFS_BSIZE	0x2000

/*
 * In-core open file.
 */
struct file {
	daddr_t		fs_nextblk;	/* block number to read next */
	int			fs_len;		/* amount left in f_buf */
	char *		fs_ptr;		/* read pointer into f_buf */
	char		fs_buf[RAWFS_BSIZE];
};

static int
rawfs_get_block(struct open_file *);

int	rawfs_open(path, f)
	char *path;
	struct open_file *f;
{
	struct file *fs;

	/*
	 * The actual PROM driver has already been opened.
	 * Just allocate the I/O buffer, etc.
	 */
	fs = alloc(sizeof(struct file));
	fs->fs_nextblk = 0;
	fs->fs_len = 0;
	fs->fs_ptr = fs->fs_buf;

#ifdef	DEBUG_RAWFS
	printf("rawfs_open: fs=0x%x\n", fs);
#endif

	f->f_fsdata = fs;
	return (0);
}

int	rawfs_close(f)
	struct open_file *f;
{
	struct file *fs;

	fs = (struct file *) f->f_fsdata;
	f->f_fsdata = (void *)0;

#ifdef	DEBUG_RAWFS
	if (debug) {
		printf("rawfs_close: breakpoint...", fs->fs_buf);
		__asm ("	trap #0");
	}
#endif

	if (fs != (struct file *)0)
		free(fs, sizeof(*fs));

	return (0);
}

int	rawfs_read(f, start, size, resid)
	struct open_file *f;
	void *start;
	u_int size;
	u_int *resid;
{
	struct file *fs = (struct file *)f->f_fsdata;
	char *addr = start;
	int error = 0;
	size_t csize;

	while (size != 0) {

		if (fs->fs_len == 0)
			if ((error = rawfs_get_block(f)) != 0)
				break;

		if (fs->fs_len <= 0)
			break;	/* EOF */

		csize = size;
		if (csize > fs->fs_len)
			csize = fs->fs_len;

		bcopy(fs->fs_ptr, addr, csize);
		fs->fs_ptr += csize;
		fs->fs_len -= csize;
		addr += csize;
		size -= csize;
	}
	if (resid)
		*resid = size;
	return (error);
}

int	rawfs_write(f, start, size, resid)
	struct open_file *f;
	void *start;
	size_t size;
	size_t *resid;	/* out */
{
#ifdef	DEBUG_RAWFS
	panic("rawfs_write");
#endif
	return (EROFS);
}

off_t	rawfs_seek(f, offset, where)
	struct open_file *f;
	off_t offset;
	int where;
{
#ifdef	DEBUG_RAWFS
	panic("rawfs_seek");
#endif
	return (EFTYPE);
}

int	rawfs_stat(f, sb)
	struct open_file *f;
	struct stat *sb;
{
#ifdef	DEBUG_RAWFS
	panic("rawfs_stat");
#endif
	return (EFTYPE);
}


/*
 * Read a block from the underlying stream device
 * (In our case, a tape drive.)
 */
static int
rawfs_get_block(f)
	struct open_file *f;
{
	struct file *fs;
	int error, len;

	fs = (struct file *)f->f_fsdata;
	fs->fs_ptr = fs->fs_buf;

	twiddle();
	error = f->f_dev->dv_strategy(f->f_devdata, F_READ,
		fs->fs_nextblk, RAWFS_BSIZE,	fs->fs_buf, &len);

	if (!error) {
		fs->fs_len = len;
		fs->fs_nextblk += (RAWFS_BSIZE / DEV_BSIZE);
	}

	return (error);
}
	
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2 2001/07/04 08:33:57 niklas Exp $	*/
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.1 1995/10/17 22:58:27 gwr Exp $	*/
d62 1
a62 1
rawfs_get_block __P((struct open_file *));
@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2 2001/07/04 08:33:57 niklas Exp $	*/
d62 1
a62 1
rawfs_get_block(struct open_file *);
@


1.2.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.1
log
@update from netbsd tree
@
text
@d1 1
@


1.1.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.1.16.2
log
@Merge in -current from about a week ago
@
text
@d62 1
a62 1
rawfs_get_block(struct open_file *);
@


1.1.16.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.1.16.2 2002/03/28 11:26:45 niklas Exp $	*/
@


