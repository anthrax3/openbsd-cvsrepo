head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.04.08.33.56;	author niklas;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	95.10.26.01.15.37;	author deraadt;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.51.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.59;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.3.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.5
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: dev_tape.c,v 1.4 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: dev_tape.c,v 1.2 1995/10/17 22:58:20 gwr Exp $	*/

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This module implements a "raw device" interface suitable for
 * use by the stand-alone I/O library UFS file-system code, and
 * possibly for direct access (i.e. boot from tape).
 *
 * The implementation is deceptively simple because it uses the
 * drivers provided by the Sun PROM monitor.  Note that only the
 * PROM driver used to load the boot program is available here.
 */

#include <sys/types.h>
#include <machine/mon.h>
#include <machine/saio.h>

#include "stand.h"

#include "dvma.h"
#include "promdev.h"
/* #include "dev_tape.h" XXX - needs stdarg.h */

extern int debug;

struct saioreq tape_ioreq;

/*
 * This is a special version of devopen() for tape boot.
 * In this version, the file name is a numeric string of
 * one digit, which is passed to the device open so it
 * can open the appropriate tape segment.
 */
int
devopen(f, fname, file)
	struct open_file *f;
	const char *fname;		/* normally "1" */
	char **file;
{
	struct devsw *dp;
	int error;

	*file = (char *)fname;
	dp = &devsw[0];
	f->f_dev = dp;

	/* The following will call tape_open() */
	return (dp->dv_open(f, fname));
}

int
tape_open(f, fname)
	struct open_file *f;
	char *fname;		/* partition number, i.e. "1" */
{
	struct bootparam *bp;
	struct saioreq *si;
	int	error, part;

#ifdef DEBUG
	printf("tape_open: part=%s\n", fname);
#endif

	/*
	 * Set the tape segment number to the one indicated
	 * by the single digit fname passed in above.
	 */
	if ((fname[0] < '0') && (fname[0] > '9')) {
		return ENOENT;
	}
	part = fname[0] - '0';

	/*
	 * Setup our part of the saioreq.
	 * (determines what gets opened)
	 */
	si = &tape_ioreq;
	bzero((caddr_t)si, sizeof(*si));

	bp = *romp->bootParam;
	si->si_boottab = bp->bootDevice;
	si->si_ctlr = bp->ctlrNum;
	si->si_unit = bp->unitNum;
	si->si_boff = part; 	/* default = bp->partNum + 1; */

	error = prom_iopen(si);

#ifdef DEBUG
	printf("tape_open: prom_iopen returned 0x%x\n", error);
#endif

	if (!error)
		f->f_devdata = si;

	return (error);
}

int
tape_close(f)
	struct open_file *f;
{
	struct saioreq *si;

#ifdef DEBUG
	printf("tape_close: calling prom_iclose\n");
#endif

	si = f->f_devdata;
	prom_iclose(si);
	f->f_devdata = NULL;
	return 0;
}

int
tape_strategy(devdata, flag, dblk, size, buf, rsize)
	void	*devdata;
	int	flag;
	daddr_t	dblk;
	u_int	size;
	char	*buf;
	u_int	*rsize;
{
	struct saioreq *si;
	struct boottab *ops;
	char *dmabuf;
	int	si_flag, xcnt;

	si = devdata;
	ops = si->si_boottab;

#ifdef DEBUG
	if (debug > 1)
		printf("tape_strategy: size=%d dblk=%d\n", size, dblk);
#endif

	dmabuf = dvma_mapin(buf, size);
	
	si->si_bn = dblk;
	si->si_ma = dmabuf;
	si->si_cc =	size;

	si_flag = (flag == F_READ) ? SAIO_F_READ : SAIO_F_WRITE;
	xcnt = (*ops->b_strategy)(si, si_flag);
	dvma_mapout(dmabuf, size);

#ifdef DEBUG
	if (debug > 1)
		printf("tape_strategy: xcnt = %x\n", xcnt);
#endif

	/* At end of tape, xcnt == 0 (not an error) */
	if (xcnt < 0)
		return (EIO);

	*rsize = xcnt;
	return (0);
}

int
tape_ioctl()
{
	return EIO;
}

@


1.4
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_tape.c,v 1.3 2001/07/04 08:33:56 niklas Exp $	*/
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_tape.c,v 1.2 1995/10/17 22:58:20 gwr Exp $	*/
d73 1
a73 1
	*file = (char*)fname;
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_tape.c,v 1.3 2001/07/04 08:33:56 niklas Exp $	*/
d73 1
a73 1
	*file = (char *)fname;
@


1.3.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_tape.c,v 1.3.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.2
log
@update from netbsd tree
@
text
@d1 1
@


1.2.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.2.16.2
log
@Merge in -current from about a week ago
@
text
@d73 1
a73 1
	*file = (char *)fname;
@


1.2.16.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_tape.c,v 1.2.16.2 2002/03/28 11:26:45 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: dev_tape.c,v 1.1.1.1 1995/10/13 21:27:30 gwr Exp $	*/
d53 2
d57 6
d64 1
a64 1
tape_open(f, devname)
d66 18
a83 1
	char *devname;		/* Device part of file name (or NULL). */
d87 1
a87 1
	int	error;
d89 2
a90 2
#ifdef DEBUG_PROM
	printf("tape_open: %s\n", devname);
d94 9
d108 1
a109 1

d113 3
a115 1
	si->si_boff = bp->partNum;
d117 6
a122 2
	if ((error = prom_iopen(si)) != 0)
		return (error);
d124 1
a124 2
	f->f_devdata = si;
	return 0;
d133 4
d160 3
a162 4
#ifdef DEBUG_PROM
	printf("tape_strategy: size=%d dblk=%d\n", size, dblk);
#else
	twiddle();
d175 3
a177 2
#ifdef DEBUG_PROM
	printf("tape_strategy: xcnt = %x\n", xcnt);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
