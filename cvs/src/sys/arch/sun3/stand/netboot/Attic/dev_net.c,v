head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.04.08.33.54;	author niklas;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	96.10.11.23.06.55;	author deraadt;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	96.05.03.16.04.16;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.59;	author deraadt;	state Exp;
branches;
next	;

1.3.14.1
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.3.14.3;

1.3.14.3
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.4.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.6
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: dev_net.c,v 1.5 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: dev_net.c,v 1.4 1996/01/29 23:54:15 gwr Exp $	*/

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This module implements a "raw device" interface suitable for
 * use by the stand-alone I/O library NFS code.  This interface
 * does not support any "block" access, and exists only for the
 * purpose of initializing the network interface, getting boot
 * parameters, and performing the NFS mount.
 *
 * At open time, this does:
 *
 * find interface      - netif_open()
 * RARP for IP address - rarp_getipaddress()
 * RPC/bootparams      - callrpc(d, RPC_BOOTPARAMS, ...)
 * RPC/mountd          - nfs_mount(sock, ip, path)
 *
 * the root file handle from mountd is saved in a global
 * for use by the NFS open code (NFS/lookup).
 */

#include <stdarg.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/in_systm.h>

#include "stand.h"
#include "net.h"
#include "netif.h"
#include "bootparam.h"
#include "dev_net.h"

extern int debug;
extern int nfs_root_node[];	/* XXX - get from nfs_mount() */

/*
 * Various globals needed by the network code:
 */

/* for arp.c, rarp.c */
u_char bcea[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

struct	in_addr myip;		/* my ip address */
struct	in_addr rootip;		/* root ip address */
struct	in_addr gateip;		/* swap ip address */
n_long	netmask;		/* subnet or net mask */

char rootpath[FNAME_SIZE];

int hostnamelen;
char hostname[FNAME_SIZE];

int domainnamelen;
char domainname[FNAME_SIZE];

/*
 * Local things...
 */
static int netdev_sock = -1;
static int netdev_opens;

/*
 * Called by devopen after it sets f->f_dev to our devsw entry.
 * This opens the low-level device and sets f->f_devdata.
 * This is declared with variable arguments...
 */
int
net_open(struct open_file *f, ...)
{
	va_list ap;
	char *devname;		/* Device part of file name (or NULL). */
	int error = 0;

	va_start(ap, f);
	devname = va_arg(ap, char *);
	va_end(ap);

#ifdef	NETIF_DEBUG
	if (debug)
		printf("net_open: %s\n", devname);
#endif

	/* On first open, do netif open, mount, etc. */
	if (netdev_opens == 0) {
		/* Find network interface. */
		if (netdev_sock < 0) {
			netdev_sock = netif_open(devname);
			if (netdev_sock < 0) {
				printf("net_open: netif_open() failed\n");
				return (ENXIO);
			}
			if (debug)
				printf("net_open: netif_open() succeeded\n");
		}
		if (rootip.s_addr == 0) {
			/* Get root IP address, and path, etc. */
			error = net_getparams(netdev_sock);
			if (error) {
				/* getparams makes its own noise */
				goto fail;
			}
			/* Get the NFS file handle (mountd). */
			error = nfs_mount(netdev_sock, rootip, rootpath);
			if (error) {
				printf("net_open: NFS mount error=%d\n", error);
				rootip.s_addr = 0;
			fail:
				netif_close(netdev_sock);
				netdev_sock = -1;
				return (error);
			}
			if (debug)
				printf("net_open: NFS mount succeeded\n");
		}
	}
	netdev_opens++;
	f->f_devdata = nfs_root_node;
	return (error);
}

int
net_close(f)
	struct open_file *f;
{

#ifdef	NETIF_DEBUG
	if (debug)
		printf("net_close: opens=%d\n", netdev_opens);
#endif

	/* On last close, do netif close, etc. */
	f->f_devdata = NULL;
	/* Extra close call? */
	if (netdev_opens <= 0)
		return (0);
	netdev_opens--;
	/* Not last close? */
	if (netdev_opens > 0)
		return(0);
	rootip.s_addr = 0;
	if (netdev_sock >= 0) {
		if (debug)
			printf("net_close: calling netif_close()\n");
		netif_close(netdev_sock);
		netdev_sock = -1;
	}
	return (0);
}

int
net_ioctl()
{
	return EIO;
}

int
net_strategy()
{
	return EIO;
}

int
net_getparams(sock)
	int sock;
{
	/*
	 * Get info for NFS boot: our IP address, our hostname,
	 * server IP address, and our root path on the server.
	 * There are two ways to do this:  The old, Sun way,
	 * and the more modern, BOOTP way. (RFC951, RFC1048)
	 */

#ifdef	SUN_BOOTPARAMS
	/* Get our IP address.  (rarp.c) */
	if (rarp_getipaddress(sock)) {
		printf("net_open: RARP failed\n");
		return (EIO);
	}
#else	/* BOOTPARAMS */
	/*
	 * Get boot info using BOOTP. (RFC951, RFC1048)
	 * This also gets the server IP address, gateway,
	 * root path, etc.
	 */
	bootp(sock);
	if (myip.s_addr == 0) {
		printf("net_open: BOOTP failed\n");
		return (EIO);
	}
#endif	/* BOOTPARAMS */

	printf("boot: client addr: %s\n", inet_ntoa(myip));

#ifdef	SUN_BOOTPARAMS
	/* Get our hostname, server IP address, gateway. */
	if (bp_whoami(sock)) {
		printf("net_open: bootparam/whoami RPC failed\n");
		return (EIO);
	}
#endif	/* BOOTPARAMS */

	printf("boot: client name: %s\n", hostname);
	if (gateip.s_addr) {
		printf("boot: subnet mask: %s\n", intoa(netmask));
		printf("boot: net gateway: %s\n", inet_ntoa(gateip));
	}

#ifdef	SUN_BOOTPARAMS
	/* Get the root pathname. */
	if (bp_getfile(sock, "root", &rootip, rootpath)) {
		printf("net_open: bootparam/getfile RPC failed\n");
		return (EIO);
	}
#endif	/* BOOTPARAMS */

	printf("boot: server addr: %s\n", inet_ntoa(rootip));
	printf("boot: server path: %s\n", rootpath);

	return (0);
}
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.4 2001/07/04 08:33:54 niklas Exp $	*/
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.4 1996/01/29 23:54:15 gwr Exp $	*/
d108 1
a108 1
	devname = va_arg(ap, char*);
@


1.4.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.4 2001/07/04 08:33:54 niklas Exp $	*/
d108 1
a108 1
	devname = va_arg(ap, char *);
@


1.4.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.4.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.3
log
@sync + our changes
@
text
@d1 1
@


1.3.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.3.14.2
log
@Merge in -current from about a week ago
@
text
@d108 1
a108 1
	devname = va_arg(ap, char *);
@


1.3.14.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.3.14.2 2002/03/28 11:26:45 niklas Exp $	*/
@


1.2
log
@sync with 0430.
@
text
@d142 2
a143 2
			return (error);
	}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: dev_net.c,v 1.3 1995/09/23 03:42:51 gwr Exp $	*/
d51 1
d63 1
d65 1
d92 1
a92 1
static int open_count;
d97 1
d100 3
a102 2
net_open(f, devname)
	struct open_file *f;
a103 1
{
d106 9
d116 1
a116 1
	if (open_count == 0) {
d118 24
a141 3
		if ((netdev_sock = netif_open(devname)) < 0)
			return (error=ENXIO);
		if ((error = net_mountroot(f, devname)) != 0)
d144 5
a148 1
	open_count++;
d157 6
a163 3
	if (open_count > 0)
		if (--open_count == 0)
			netif_close(netdev_sock);
d165 15
d195 2
a196 3
net_mountroot(f, devname)
	struct open_file *f;
	char *devname;		/* Device part of file name (or NULL). */
a197 6
	int error;

#ifdef DEBUG
	printf("net_mountroot: %s\n", devname);
#endif

d207 2
a208 1
	if (rarp_getipaddress(netdev_sock))
d210 1
d217 5
a221 1
	bootp(netdev_sock);	/* XXX - Error return? */
d228 2
a229 1
	if (bp_whoami(netdev_sock))
d231 1
d242 2
a243 1
	if (bp_getfile(netdev_sock, "root", &rootip, rootpath))
d245 1
d251 1
a251 4
	/* Get the NFS file handle (mount). */
	error = nfs_mount(netdev_sock, rootip, rootpath);

	return (error);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
