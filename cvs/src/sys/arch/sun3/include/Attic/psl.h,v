head	1.14;
access;
symbols
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.13
	UBC:1.11.0.2
	UBC_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.16
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.14
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2002.04.29.07.35.23;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.23.00.47.47;	author miod;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.06.24.17.05.43;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.03.01.48.07;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.14.14.24.54;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	97.02.14.17.49.35;	author kstailey;	state Exp;
branches
	1.7.14.1;
next	1.6;

1.6
date	97.01.16.04.04.10;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.01.07.23.36.20;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.31.06.13.23;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.08.25.58;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.03.53;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.55;	author deraadt;	state Exp;
branches;
next	;

1.7.14.1
date	2001.05.14.21.37.31;	author niklas;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2001.07.04.10.24.04;	author niklas;	state Exp;
branches;
next	1.7.14.3;

1.7.14.3
date	2001.12.05.00.39.14;	author niklas;	state Exp;
branches;
next	1.7.14.4;

1.7.14.4
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.7.14.5;

1.7.14.5
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.11.2.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.14
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: psl.h,v 1.13 2002/04/29 07:35:23 miod Exp $	*/
/*	$NetBSD: psl.h,v 1.14 1998/11/24 17:07:54 kleink Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_SUN3_PSL_H_
#define	_SUN3_PSL_H_
 
#include <m68k/psl.h>

/* Could define this in the common <m68k/psl.h> instead. */

#if defined(_KERNEL) && !defined(_LOCORE)

#ifndef __GNUC__
/* No inline, use the real functions in locore.s */
extern int _getsr(void);
extern int _spl(int new);
extern int _splraise(int new);
#else	/* GNUC */
/*
 * Define inline functions for PSL manipulation.
 * These are as close to macros as one can get.
 * When not optimizing gcc will call the locore.s
 * functions by the same names, so breakpoints on
 * these functions will work normally, etc.
 * (See the GCC extensions info document.)
 */

static __inline int _getsr(void);
static __inline int _spl(int);
static __inline int _splraise(int);

/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

/* Get current sr value. */
static __inline int
_getsr(void)
{
	register int rv;

	__asm __volatile ("clrl %0; movew sr,%0" : "=&d" (rv));
	return (rv);
}

/* Set the current sr and return the old value. */
static __inline int
_spl(int new)
{
	register int old;

	__asm __volatile (
		"clrl %0; movew sr,%0; movew %1,sr" :
			"=&d" (old) : "di" (new));
	return (old);
}

/*
 * Like _spl() but can be used in places where the
 * interrupt priority may already have been raised,
 * without risk of enabling interrupts by accident.
 * The comparison includes the "S" bit (always on)
 * because that generates more efficient code.
 */
static __inline int
_splraise(int new)
{
	register int old;

	__asm __volatile ("clrl %0; movew sr,%0" : "=&d" (old));
	if ((old & PSL_HIGHIPL) < new) {
		__asm __volatile ("movew %0,sr;" : : "di" (new));
	}
	return (old);
}
#endif	/* GNUC */

/*
 * The rest of this is sun3 specific, because other ports may
 * need to do special things in spl0() (i.e. simulate SIR).
 * Suns have a REAL interrupt register, so spl0() and splx(s)
 * have no need to check for any simulated interrupts, etc.
 */

#define spl0()  _spl(PSL_S|PSL_IPL0)
#define spl1()  _spl(PSL_S|PSL_IPL1)
#define spl2()  _spl(PSL_S|PSL_IPL2)
#define spl3()  _spl(PSL_S|PSL_IPL3)
#define spl4()  _spl(PSL_S|PSL_IPL4)
#define spl5()  _spl(PSL_S|PSL_IPL5)
#define spl6()  _spl(PSL_S|PSL_IPL6)
#define spl7()  _spl(PSL_S|PSL_IPL7)
#define splx(x)	_spl(x)

/* IPL used by soft interrupts: netisr, softclock() */
#define spllowersoftclock()  spl1()
#define splsoftclock()  spl1()
#define splsoftnet()    spl1()

/* Highest block device (strategy) IPL. */
#define splbio()        spl2()

/* Highest network interface IPL. */
#define splnet()        spl3()

/* Highest tty device IPL. */
#define spltty()        spl4()

/*
 * Requirement: imp >= (highest network, tty, or disk IPL)
 * This is used mostly in the VM code. (Why not splvm?)
 * Note that the VM code runs at spl7 during kernel
 * initialization, and later at spl0, so we have to 
 * use splraise to avoid enabling interrupts early.
 */
#define splimp()        _splraise(PSL_S|PSL_IPL4)
#define splvm()         _splraise(PSL_S|PSL_IPL4)

/* Intersil clock hardware interrupts (hard-wired at 5) */
#define splclock()      spl5()
#define splstatclock()  splclock()

/* Zilog Serial hardware interrupts (hard-wired at 6) */
#define splzs()		spl6()

/* Block out all interrupts (except NMI of course). */
#define splhigh()       spl7()

#endif	/* KERNEL && !_LOCORE */
#endif	/* _SUN3_PSL_H_ */
@


1.13
log
@Define placeholders for art's splassert() debugging stuff on all arches.
Currently as no-ops everywhere.

ok art@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.12 2002/03/14 01:26:46 millert Exp $	*/
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.11 2001/11/23 00:47:47 miod Exp $	*/
d67 3
@


1.11
log
@Remove splsched() declaration and related stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.10 2001/06/24 17:05:43 miod Exp $	*/
d51 3
a53 3
extern int _getsr __P((void));
extern int _spl __P((int new));
extern int _splraise __P((int new));
d64 3
a66 3
static __inline int _getsr __P((void));
static __inline int _spl __P((int));
static __inline int _splraise __P((int));
@


1.11.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.11 2001/11/23 00:47:47 miod Exp $	*/
d51 3
a53 3
extern int _getsr(void);
extern int _spl(int new);
extern int _splraise(int new);
d64 3
a66 6
static __inline int _getsr(void);
static __inline int _spl(int);
static __inline int _splraise(int);

/* SPL asserts */
#define	splassert(wantipl)	/* nothing */
@


1.11.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.11.2.1 2002/06/11 03:39:01 art Exp $	*/
@


1.10
log
@Define splvm() for arches who don't already provide it, with the same
definition as splimp().
art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.9 2001/01/03 01:48:07 miod Exp $	*/
a159 1
#define splsched()      spl7()
@


1.9
log
@netintr() doesn't exist anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.8 2000/07/14 14:24:54 miod Exp $	*/
d149 1
@


1.8
log
@Move splXXXX() stuff from <machine/param.h> to <machine/psl.h>, and
define more inline functions for dealing with this.
From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.7 1997/02/14 17:49:35 kstailey Exp $	*/
d127 1
a127 1
/* IPL used by soft interrupts: netintr(), softclock() */
@


1.7
log
@move spl() stuff from psl.h to param.h
@
text
@d1 2
a2 1
/*	$OpenBSD: psl.h,v 1.6 1997/01/16 04:04:10 kstailey Exp $	*/
d4 39
d44 119
@


1.7.14.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 2
/*	$OpenBSD: psl.h,v 1.9 2001/01/03 01:48:07 miod Exp $	*/
/*	$NetBSD: psl.h,v 1.14 1998/11/24 17:07:54 kleink Exp $	*/
a2 39
/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_SUN3_PSL_H_
#define	_SUN3_PSL_H_
 
a3 119

/* Could define this in the common <m68k/psl.h> instead. */

#if defined(_KERNEL) && !defined(_LOCORE)

#ifndef __GNUC__
/* No inline, use the real functions in locore.s */
extern int _getsr __P((void));
extern int _spl __P((int new));
extern int _splraise __P((int new));
#else	/* GNUC */
/*
 * Define inline functions for PSL manipulation.
 * These are as close to macros as one can get.
 * When not optimizing gcc will call the locore.s
 * functions by the same names, so breakpoints on
 * these functions will work normally, etc.
 * (See the GCC extensions info document.)
 */

static __inline int _getsr __P((void));
static __inline int _spl __P((int));
static __inline int _splraise __P((int));

/* Get current sr value. */
static __inline int
_getsr(void)
{
	register int rv;

	__asm __volatile ("clrl %0; movew sr,%0" : "=&d" (rv));
	return (rv);
}

/* Set the current sr and return the old value. */
static __inline int
_spl(int new)
{
	register int old;

	__asm __volatile (
		"clrl %0; movew sr,%0; movew %1,sr" :
			"=&d" (old) : "di" (new));
	return (old);
}

/*
 * Like _spl() but can be used in places where the
 * interrupt priority may already have been raised,
 * without risk of enabling interrupts by accident.
 * The comparison includes the "S" bit (always on)
 * because that generates more efficient code.
 */
static __inline int
_splraise(int new)
{
	register int old;

	__asm __volatile ("clrl %0; movew sr,%0" : "=&d" (old));
	if ((old & PSL_HIGHIPL) < new) {
		__asm __volatile ("movew %0,sr;" : : "di" (new));
	}
	return (old);
}
#endif	/* GNUC */

/*
 * The rest of this is sun3 specific, because other ports may
 * need to do special things in spl0() (i.e. simulate SIR).
 * Suns have a REAL interrupt register, so spl0() and splx(s)
 * have no need to check for any simulated interrupts, etc.
 */

#define spl0()  _spl(PSL_S|PSL_IPL0)
#define spl1()  _spl(PSL_S|PSL_IPL1)
#define spl2()  _spl(PSL_S|PSL_IPL2)
#define spl3()  _spl(PSL_S|PSL_IPL3)
#define spl4()  _spl(PSL_S|PSL_IPL4)
#define spl5()  _spl(PSL_S|PSL_IPL5)
#define spl6()  _spl(PSL_S|PSL_IPL6)
#define spl7()  _spl(PSL_S|PSL_IPL7)
#define splx(x)	_spl(x)

/* IPL used by soft interrupts: netisr, softclock() */
#define spllowersoftclock()  spl1()
#define splsoftclock()  spl1()
#define splsoftnet()    spl1()

/* Highest block device (strategy) IPL. */
#define splbio()        spl2()

/* Highest network interface IPL. */
#define splnet()        spl3()

/* Highest tty device IPL. */
#define spltty()        spl4()

/*
 * Requirement: imp >= (highest network, tty, or disk IPL)
 * This is used mostly in the VM code. (Why not splvm?)
 * Note that the VM code runs at spl7 during kernel
 * initialization, and later at spl0, so we have to 
 * use splraise to avoid enabling interrupts early.
 */
#define splimp()        _splraise(PSL_S|PSL_IPL4)

/* Intersil clock hardware interrupts (hard-wired at 5) */
#define splclock()      spl5()
#define splstatclock()  splclock()

/* Zilog Serial hardware interrupts (hard-wired at 6) */
#define splzs()		spl6()

/* Block out all interrupts (except NMI of course). */
#define splhigh()       spl7()
#define splsched()      spl7()

#endif	/* KERNEL && !_LOCORE */
#endif	/* _SUN3_PSL_H_ */
@


1.7.14.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.7.14.1 2001/05/14 21:37:31 niklas Exp $	*/
a148 1
#define splvm()         _splraise(PSL_S|PSL_IPL4)
@


1.7.14.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.7.14.2 2001/07/04 10:24:04 niklas Exp $	*/
d160 1
@


1.7.14.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 3
a53 3
extern int _getsr(void);
extern int _spl(int new);
extern int _splraise(int new);
d64 3
a66 3
static __inline int _getsr(void);
static __inline int _spl(int);
static __inline int _splraise(int);
@


1.7.14.5
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: psl.h,v 1.7.14.4 2002/03/28 11:26:45 niklas Exp $	*/
@


1.6
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 2
/*	$OpenBSD$	*/
/*	$NetBSD: psl.h,v 1.10 1996/11/20 18:57:17 gwr Exp $	*/
a2 37
/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	PSL_C
a3 75

/* Could define this in the common <m68k/psl.h> instead. */

#if defined(_KERNEL) && !defined(_LOCORE)

#ifndef __GNUC__
/* No inline, use real function in locore.s */
extern int _spl(int new);
#else	/* GNUC */
/*
 * Define an inline function for PSL manipulation.
 * This is as close to a macro as one can get.
 * If not optimizing, the one in locore.s is used.
 * (See the GCC extensions info document.)
 */
extern __inline__ int _spl(int new)
{
	register int old;

	__asm __volatile (
		"clrl %0; movew sr,%0; movew %1,sr" :
			"&=d" (old) : "di" (new));
	return (old);
}
#endif	/* GNUC */

/*
 * The rest of this is sun3 specific, because other ports may
 * need to do special things in spl0() (i.e. simulate SIR).
 * Suns have a REAL interrupt register, so spl0() and splx(s)
 * have no need to check for any simulated interrupts, etc.
 */

#define spl0()  _spl(PSL_S|PSL_IPL0)
#define spl1()  _spl(PSL_S|PSL_IPL1)
#define spl2()  _spl(PSL_S|PSL_IPL2)
#define spl3()  _spl(PSL_S|PSL_IPL3)
#define spl4()  _spl(PSL_S|PSL_IPL4)
#define spl5()  _spl(PSL_S|PSL_IPL5)
#define spl6()  _spl(PSL_S|PSL_IPL6)
#define spl7()  _spl(PSL_S|PSL_IPL7)
#define splx(x)	_spl(x)

/* IPL used by soft interrupts: netintr(), softclock() */
#define splsoftclock()  spl1()
#define splsoftnet()    spl1()

/* Highest block device (strategy) IPL. */
#define splbio()        spl2()

/* Highest network interface IPL. */
#define splnet()        spl3()

/* Highest tty device IPL. */
#define spltty()        spl4()

/* Requirement: imp >= (highest network, tty, or disk IPL) */
#define splimp()        spl4()

/* Intersil clock hardware interrupts (hard-wired at 5) */
#define splclock()      spl5()
#define splstatclock()  splclock()

/* Zilog Serial hardware interrupts (hard-wired at 6) */
#define splzs()         spl6()

/* Block out all interrupts (except NMI of course). */
#define splhigh()       spl7()
#define splsched()      spl7()

/* Get current sr value (debug, etc.) */
extern int getsr __P((void));

#endif	/* KERNEL && !_LOCORE */
#endif	/* PSL_C */
@


1.5
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d111 3
@


1.4
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: psl.h,v 1.11 1996/12/17 21:11:11 gwr Exp $	*/
d104 3
a109 3

/* Get current sr value (debug, etc.) */
extern int getsr __P((void));
@


1.3
log
@sync with NetBSD -- copyright changes only
@
text
@d1 1
a1 1
/*	$NetBSD: psl.h,v 1.10 1996/11/20 18:57:17 gwr Exp $	*/
a103 3
/* Zilog Serial hardware interrupts (hard-wired at 6) */
#define splzs()         spl6()

d107 3
@


1.2
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: psl.h,v 1.9 1996/02/01 22:33:10 mycroft Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1995 Gordon W. Ross
d7 3
d18 1
a18 3
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
d20 5
a24 1
 *      This product includes software developed by Gordon Ross
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: psl.h,v 1.8 1995/10/10 21:28:00 gwr Exp $	*/
d38 1
a38 1
#if defined(_KERNEL) && !defined(LOCORE)
d105 1
a105 1
#endif	/* KERNEL && !LOCORE */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
