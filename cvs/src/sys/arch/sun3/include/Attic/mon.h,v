head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.5.0.24
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.22
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.20
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.01.16.04.04.08;	author kstailey;	state Exp;
branches
	1.5.14.1
	1.5.24.1;
next	1.4;

1.4
date	97.01.07.23.36.19;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.31.06.13.15;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.08.25.57;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.55;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.5.24.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.5.24.2;

1.5.24.2
date	2003.05.19.21.49.45;	author tedu;	state dead;
branches;
next	;


desc
@@


1.9
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: mon.h,v 1.8 2002/03/15 01:20:04 millert Exp $	*/
/*	$NetBSD: mon.h,v 1.19 1996/11/20 18:57:12 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Adam Glass.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file derived from kernel/mach/sun3.md/machMon.h from the
 * sprite distribution.
 *
 * In particular, this file came out of the Walnut Creek cdrom collection
 * which contained no warnings about any possible copyright infringement.
 * It was also indentical to a file in the sprite kernel tar file found on
 * allspice.berkeley.edu.
 * It also written in the annoying sprite coding style.  I've made
 * efforts not to heavily edit their file, just ifdef parts out. -- glass
 */

#ifndef _MACHINE_MON_H
#define _MACHINE_MON_H
/*
 * machMon.h --
 *
 *     Structures, constants and defines for access to the sun monitor.
 *     These are translated from the sun monitor header file "sunromvec.h".
 *
 * NOTE: The file keyboard.h in the monitor directory has all sorts of useful
 *       keyboard stuff defined.  I haven't attempted to translate that file
 *       because I don't need it.  If anyone wants to use it, be my guest.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * Header: /cdrom/src/kernel/Cvsroot/kernel/mach/sun3.md/machMon.h,v 9.1 90/10/03 13:52:34 mgbaker Exp SPRITE (Berkeley)
 */

#ifndef _MACHMON
#define _MACHMON

/*
 * The memory addresses for the PROM, and the EEPROM.
 * On the sun2 these addresses are actually 0x00EF??00
 * but only the bottom 24 bits are looked at so these still
 * work ok.
 */

#define PROM_BASE       0x0fef0000

/*
 * Structure set up by the boot command to pass arguments to the program that
 * is booted.
 */
typedef struct bootparam {
	char		*argPtr[8];	/* String arguments */
	char		strings[100];	/* String table for string arguments */
	char		devName[2];	/* Device name */
	int		ctlrNum;	/* Controller number */
	int		unitNum;	/* Unit number */
	int		partNum;	/* Partition/file number */
	char		*fileName;	/* File name, points into strings */
	struct boottab   *bootDevice;	/* Defined in saio.h */
} MachMonBootParam;

/*
 * Here is the structure of the vector table which is at the front of the boot
 * rom.  The functions defined in here are explained below.
 *
 * NOTE: This struct has references to the structures keybuf and globram which
 *       I have not translated.  If anyone needs to use these they should
 *       translate these structs into Sprite format.
 */
typedef struct {
	char	*initSp;		/* Initial system stack ptr
					 * for hardware */
	int	(*startMon)(void);	/* Initial PC for hardware */

	int	*diagberr;		/* Bus err handler for diags */

	/*
	 * Monitor and hardware revision and identification
	 */

	struct bootparam **bootParam;	/* Info for bootstrapped pgm */
 	u_int	*memorySize;		/* Usable memory in bytes */

	/*
	 * Single-character input and output
	 */

	u_char	(*getChar)(void);	/* Get char from input source */
	int	(*putChar)(int);	/* Put char to output sink */
	int	(*mayGet)(void);	/* Maybe get char, or -1 */
	int	(*mayPut)(int);		/* Maybe put char, or -1 */
	u_char	*echo;			/* Should getchar echo? */
	u_char	*inSource;		/* Input source selector */
	u_char	*outSink;		/* Output sink selector */

	/*
	 * Keyboard input (scanned by monitor nmi routine)
	 */

	int	(*getKey)(void);		/* Get next key if one exists */
	int	(*initGetKey)(void *);		/* Initialize get key */
	u_int	*translation;			/* Kbd translation selector
						   (see keyboard.h in sun
						    monitor code) */
	u_char		*keyBid;		/* Keyboard ID byte */
	int		*screen_x;		/* V2: Screen x pos (R/O) */
	int		*screen_y;		/* V2: Screen y pos (R/O) */
	struct keybuf	*keyBuf;		/* Up/down keycode buffer */

	/*
	 * Monitor revision level.
	 */

	char	*monId;

	/*
	 * Frame buffer output and terminal emulation
	 */

	int	(*fbWriteChar)(int);	/* Write a character to FB */
	int	*fbAddr;		/* Address of frame buffer */
	char	**font;			/* Font table for FB */
	/* Quickly write string to FB */
	int	(*fbWriteStr)(char *buf, int len);

	/*
	 * Reboot interface routine -- resets and reboots system.  No return.
	 * XXX should this be declared volatile?
	 */

	int	(*reBoot)(char *);	/* e.g. reBoot("sd()bsd") */

	/*
	 * Line input and parsing
	 */

	u_char	*lineBuf;			/* The line input buffer */
	u_char	**linePtr;			/* Cur pointer into linebuf */
	int	*lineSize;			/* length of line in linebuf */
	int	(*getLine)(int);		/* Get line from user */
	u_char	(*getNextChar)(void);		/* Get next char from linebuf */
	u_char	(*peekNextChar)(void);		/* Peek at next char */
	int	*fbThere;			/* =1 if frame buffer there */
	int	(*getNum)(void);		/* Grab hex num from line */

	/*
	 * Print formatted output to current output sink
	 */

	int	(*printf)(char *, ...);		/* Similar to "Kernel printf" */
	int	(*printHex)(int,int);		/* Format N digits in hex */

	/*
	 * Led stuff
	 */

	u_char	*leds;				/* RAM copy of LED register */
	int	(*setLeds)(int);		/* Sets LED's and RAM copy */

	/*
	 * Non-maskable interrupt  (nmi) information
	 */

	int	(*nmiAddr)(void *);		/* Addr for level 7 vector */
	int	(*abortEntry)(void *);		/* Entry for keyboard abort */
	int	*nmiClock;			/* Counts up in msec */

	/*
	 * Frame buffer type: see <machine/fbio.h>
	 */

	int	*fbType;

	/*
	 * Assorted other things
	 */

	u_int		romvecVersion;		/* Version # of Romvec */
	struct globram  *globRam;		/* monitor global variables */
	caddr_t		kbdZscc;		/* Addr of keyboard in use */

	int	*keyrInit;			/* ms before kbd repeat */
	u_char	*keyrTick; 			/* ms between repetitions */
	u_int	*memoryAvail;			/* V1: Main mem usable size */
	long	*resetAddr;			/* where to jump on a reset */
	long	*resetMap;			/* pgmap entry for resetaddr */
						/* Really struct pgmapent *  */
	int	(*exitToMon)(void);		/* Exit from user program */
	u_char	**memorybitmap;			/* V1: &{0 or &bits} */
	void	(*setcxsegmap)(int,int,int);	/* Set seg in any context */
	void	(**vector_cmd)(int, char *);	/* V2: Handler for 'v' cmd */
	int	dummy1z;
	int	dummy2z;
	int	dummy3z;
	int	dummy4z;
} MachMonRomVector;

/*
 * Functions defined in the vector:
 *
 *
 * getChar -- Return the next character from the input source
 *
 *     unsigned char getChar()
 *
 * putChar -- Write the given character to the output source.
 *
 *     void putChar(ch)
 *	   char ch;
 *
 * mayGet -- Maybe get a character from the current input source.  Return -1
 *           if don't return a character.
 *
 * 	int mayGet()
 *
 * mayPut -- Maybe put a character to the current output source.   Return -1
 *           if no character output.
 *
 *	int  mayPut(ch)
 *	    char ch;
 *
 * getKey -- Returns a key code (if up/down codes being returned),
 * 	     a byte of ASCII (if that's requested),
 * 	     NOKEY (if no key has been hit).
 *
 *	int getKey()
 *
 * initGetKey --  Initialize things for get key.
 *
 *	void initGetKey()
 *
 * fbWriteChar -- Write a character to the frame buffer
 *
 *	void fwritechar(ch)
 *	    unsigned char ch;
 *
 * fbWriteStr -- Write a string to the frame buffer.
 *
 *   	void fwritestr(addr,len)
 *  	    register unsigned char *addr;	/ * String to be written * /
 *  	    register short len;			/ * Length of string * /
 *
 * getLine -- read the next input line into a global buffer
 *
 *	getline(echop)
 *          int echop;	/ * 1 if should echo input, 0 if not * /
 *
 * getNextChar -- return the next character from the global line buffer.
 *
 *	unsigned char getNextChar()
 *
 * peekNextChar -- look at the next character in the global line buffer.
 *
 *	unsigned char peekNextChar()
 *
 * getNum -- Grab hex num from the global line buffer.
 *
 *	int getNum()
 *
 * printf -- Scaled down version of C library printf.  Only %d, %x, %s, and %c
 * 	     are recognized.
 *
 * printhex -- prints rightmost <digs> hex digits of <val>
 *
 *      printhex(val,digs)
 *          register int val;
 *     	    register int digs;
 *
 * abortEntry -- Entry for keyboard abort.
 *
 *     abortEntry()
 */

/*
 * Where the rom vector is defined.
 */

#define	romVectorPtr	((MachMonRomVector *) PROM_BASE)

/*
 * Functions and defines to access the monitor.
 */

#define mon_printf (romVectorPtr->printf)
#define mon_putchar (romVectorPtr->putChar)
#define mon_may_getchar (romVectorPtr->mayGet)
#define mon_exit_to_mon (romVectorPtr->exitToMon)
#define mon_reboot (romVectorPtr->reBoot)
#define mon_panic(x) { mon_printf(x); mon_exit_to_mon();}

#define mon_setcxsegmap(context, va, sme) \
     romVectorPtr->setcxsegmap(context, va, sme)
#define romp (romVectorPtr)

/*
 * MONSTART and MONEND denote the range of the damn monitor.
 *
 * supposedly you can steal pmegs within this range that do not contain
 * valid pages.
 */
#define MONSTART     0x0FE00000
#define MONEND       0x0FF00000

/*
 * These describe the monitor's short segment which it basically uses to map
 * one stupid page that it uses for storage.  MONSHORTPAGE is the page,
 * and MONSHORTSEG is the segment that it is in.  If this sounds dumb to
 * you, it is.  I can change the pmeg, but not the virtual address.
 * Sun defines these with the high nibble set to 0xF.  I believe this was
 * for the monitor source which accesses this piece of memory with addressing
 * limitations or some such crud.  I haven't replicated this here, because
 * it is confusing, and serves no obvious purpose if you aren't the monitor.
 *
 */

#define MONSHORTPAGE 0x0FFFE000
#define MONSHORTSEG  0x0FFE0000

#endif /* _MACHMON */
#endif /* MACHINE_MON_H */
@


1.8
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: mon.h,v 1.7 2002/03/14 03:16:01 millert Exp $	*/
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: mon.h,v 1.6 2002/03/14 01:26:46 millert Exp $	*/
d127 1
a127 1
	int	(*mayPut)(int);	/* Maybe put char, or -1 */
d137 1
a137 1
	int	(*initGetKey)(void *);	/* Initialize get key */
d156 1
a156 1
	int	(*fbWriteChar)(int); /* Write a character to FB */
d177 2
a178 2
	u_char	(*getNextChar)(void);	/* Get next char from linebuf */
	u_char	(*peekNextChar)(void);	/* Peek at next char */
d186 2
a187 2
	int	(*printf)(char *, ...);	/* Similar to "Kernel printf" */
	int	(*printHex)(int,int);	/* Format N digits in hex */
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mon.h,v 1.5 1997/01/16 04:04:08 kstailey Exp $	*/
d137 1
a137 1
	int	(*initGetKey)(void*);	/* Initialize get key */
d200 2
a201 2
	int	(*nmiAddr)(void*);		/* Addr for level 7 vector */
	int	(*abortEntry)(void*);	/* Entry for keyboard abort */
d224 1
a224 1
	int	(*exitToMon)(void);	/* Exit from user program */
d226 2
a227 2
	void	(*setcxsegmap)(int,int,int); /* Set seg in any context */
	void	(**vector_cmd)(int, char*); /* V2: Handler for 'v' cmd */
@


1.5
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d109 1
a109 1
	int	(*startMon)__P((void));	/* Initial PC for hardware */
d124 4
a127 4
	u_char	(*getChar)__P((void));	/* Get char from input source */
	int	(*putChar)__P((int));	/* Put char to output sink */
	int	(*mayGet)__P((void));	/* Maybe get char, or -1 */
	int	(*mayPut)__P((int));	/* Maybe put char, or -1 */
d136 2
a137 2
	int	(*getKey)__P((void));		/* Get next key if one exists */
	int	(*initGetKey)__P((void*));	/* Initialize get key */
d156 1
a156 1
	int	(*fbWriteChar)__P((int)); /* Write a character to FB */
d160 1
a160 1
	int	(*fbWriteStr)__P((char *buf, int len));
d167 1
a167 1
	int	(*reBoot)__P((char *));	/* e.g. reBoot("sd()bsd") */
d176 3
a178 3
	int	(*getLine)__P((int));		/* Get line from user */
	u_char	(*getNextChar)__P((void));	/* Get next char from linebuf */
	u_char	(*peekNextChar)__P((void));	/* Peek at next char */
d180 1
a180 1
	int	(*getNum)__P((void));		/* Grab hex num from line */
d186 2
a187 2
	int	(*printf)__P((char *, ...));	/* Similar to "Kernel printf" */
	int	(*printHex)__P((int,int));	/* Format N digits in hex */
d194 1
a194 1
	int	(*setLeds)__P((int));		/* Sets LED's and RAM copy */
d200 2
a201 2
	int	(*nmiAddr)__P((void*));		/* Addr for level 7 vector */
	int	(*abortEntry)__P((void*));	/* Entry for keyboard abort */
d224 1
a224 1
	int	(*exitToMon)__P((void));	/* Exit from user program */
d226 2
a227 2
	void	(*setcxsegmap)__P((int,int,int)); /* Set seg in any context */
	void	(**vector_cmd)__P((int, char*)); /* V2: Handler for 'v' cmd */
@


1.5.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mon.h,v 1.5 1997/01/16 04:04:08 kstailey Exp $	*/
d109 1
a109 1
	int	(*startMon)(void);	/* Initial PC for hardware */
d124 4
a127 4
	u_char	(*getChar)(void);	/* Get char from input source */
	int	(*putChar)(int);	/* Put char to output sink */
	int	(*mayGet)(void);	/* Maybe get char, or -1 */
	int	(*mayPut)(int);		/* Maybe put char, or -1 */
d136 2
a137 2
	int	(*getKey)(void);		/* Get next key if one exists */
	int	(*initGetKey)(void *);		/* Initialize get key */
d156 1
a156 1
	int	(*fbWriteChar)(int);	/* Write a character to FB */
d160 1
a160 1
	int	(*fbWriteStr)(char *buf, int len);
d167 1
a167 1
	int	(*reBoot)(char *);	/* e.g. reBoot("sd()bsd") */
d176 3
a178 3
	int	(*getLine)(int);		/* Get line from user */
	u_char	(*getNextChar)(void);		/* Get next char from linebuf */
	u_char	(*peekNextChar)(void);		/* Peek at next char */
d180 1
a180 1
	int	(*getNum)(void);		/* Grab hex num from line */
d186 2
a187 2
	int	(*printf)(char *, ...);		/* Similar to "Kernel printf" */
	int	(*printHex)(int,int);		/* Format N digits in hex */
d194 1
a194 1
	int	(*setLeds)(int);		/* Sets LED's and RAM copy */
d200 2
a201 2
	int	(*nmiAddr)(void *);		/* Addr for level 7 vector */
	int	(*abortEntry)(void *);		/* Entry for keyboard abort */
d224 1
a224 1
	int	(*exitToMon)(void);		/* Exit from user program */
d226 2
a227 2
	void	(*setcxsegmap)(int,int,int);	/* Set seg in any context */
	void	(**vector_cmd)(int, char *);	/* V2: Handler for 'v' cmd */
@


1.5.24.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: mon.h,v 1.5.24.1 2002/06/11 03:39:01 art Exp $	*/
@


1.5.14.1
log
@Merge in -current from about a week ago
@
text
@d109 1
a109 1
	int	(*startMon)(void);	/* Initial PC for hardware */
d124 4
a127 4
	u_char	(*getChar)(void);	/* Get char from input source */
	int	(*putChar)(int);	/* Put char to output sink */
	int	(*mayGet)(void);	/* Maybe get char, or -1 */
	int	(*mayPut)(int);		/* Maybe put char, or -1 */
d136 2
a137 2
	int	(*getKey)(void);		/* Get next key if one exists */
	int	(*initGetKey)(void *);		/* Initialize get key */
d156 1
a156 1
	int	(*fbWriteChar)(int);	/* Write a character to FB */
d160 1
a160 1
	int	(*fbWriteStr)(char *buf, int len);
d167 1
a167 1
	int	(*reBoot)(char *);	/* e.g. reBoot("sd()bsd") */
d176 3
a178 3
	int	(*getLine)(int);		/* Get line from user */
	u_char	(*getNextChar)(void);		/* Get next char from linebuf */
	u_char	(*peekNextChar)(void);		/* Peek at next char */
d180 1
a180 1
	int	(*getNum)(void);		/* Grab hex num from line */
d186 2
a187 2
	int	(*printf)(char *, ...);		/* Similar to "Kernel printf" */
	int	(*printHex)(int,int);		/* Format N digits in hex */
d194 1
a194 1
	int	(*setLeds)(int);		/* Sets LED's and RAM copy */
d200 2
a201 2
	int	(*nmiAddr)(void *);		/* Addr for level 7 vector */
	int	(*abortEntry)(void *);		/* Entry for keyboard abort */
d224 1
a224 1
	int	(*exitToMon)(void);		/* Exit from user program */
d226 2
a227 2
	void	(*setcxsegmap)(int,int,int);	/* Set seg in any context */
	void	(**vector_cmd)(int, char *);	/* V2: Handler for 'v' cmd */
@


1.5.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: mon.h,v 1.5.14.1 2002/03/28 11:26:45 niklas Exp $	*/
@


1.4
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d107 3
a109 3
	char		*initSp;		/* Initial system stack ptr  
						 * for hardware */
	int		(*startMon)();		/* Initial PC for hardware */
d111 1
a111 1
	int		*diagberr;		/* Bus err handler for diags */
d113 1
a113 1
	/* 
d117 2
a118 2
	struct bootparam **bootParam;		/* Info for bootstrapped pgm */
 	unsigned	*memorySize;		/* Usable memory in bytes */
d120 2
a121 2
	/* 
	 * Single-character input and output 
d124 7
a130 7
	unsigned char	(*getChar)();		/* Get char from input source */
	int		(*putChar)();		/* Put char to output sink */
	int		(*mayGet)();		/* Maybe get char, or -1 */
	int		(*mayPut)();		/* Maybe put char, or -1 */
	unsigned char	*echo;			/* Should getchar echo? */
	unsigned char	*inSource;		/* Input source selector */
	unsigned char	*outSink;		/* Output sink selector */
d132 2
a133 2
	/* 
	 * Keyboard input (scanned by monitor nmi routine) 
d136 4
a139 4
	int		(*getKey)();		/* Get next key if one exists */
	int		(*initGetKey)();	/* Initialize get key */
	unsigned int	*translation;		/* Kbd translation selector 
						   (see keyboard.h in sun 
d141 1
a141 1
	unsigned char	*keyBid;		/* Keyboard ID byte */
d150 1
a150 1
	char		*monId;
d152 2
a153 2
	/* 
	 * Frame buffer output and terminal emulation 
d156 5
a160 4
	int		(*fbWriteChar)();	/* Write a character to FB */
	int		*fbAddr;		/* Address of frame buffer */
	char		**font;			/* Font table for FB */
	int		(*fbWriteStr)();	/* Quickly write string to FB */
d162 3
a164 2
	/* 
	 * Reboot interface routine -- resets and reboots system.  No return. 
d167 1
a167 1
	int		(*reBoot)();		/* e.g. reBoot("xy()vmunix") */
d169 2
a170 2
	/* 
	 * Line input and parsing 
d173 8
a180 8
	unsigned char	*lineBuf;		/* The line input buffer */
	unsigned char	**linePtr;		/* Cur pointer into linebuf */
	int		*lineSize;		/* length of line in linebuf */
	int		(*getLine)();		/* Get line from user */
	unsigned char	(*getNextChar)();	/* Get next char from linebuf */
	unsigned char	(*peekNextChar)();	/* Peek at next char */
	int		*fbThere;		/* =1 if frame buffer there */
	int		(*getNum)();		/* Grab hex num from line */
d182 2
a183 2
	/* 
	 * Print formatted output to current output sink 
d186 2
a187 2
	int		(*printf)();		/* Similar to "Kernel printf" */
	int		(*printHex)();		/* Format N digits in hex */
d190 1
a190 1
	 * Led stuff 
d193 2
a194 2
	unsigned char	*leds;			/* RAM copy of LED register */
	int		(*setLeds)();		/* Sets LED's and RAM copy */
d196 1
a196 1
	/* 
d198 1
a198 1
	 */ 
d200 3
a202 3
	int		(*nmiAddr)();		/* Addr for level 7 vector */
	int		(*abortEntry)();	/* Entry for keyboard abort */
	int		*nmiClock;		/* Counts up in msec */
d205 1
a205 1
	 * Frame buffer type: see <sun/fbio.h>
d208 1
a208 1
	int		*fbType;
d210 2
a211 2
	/* 
	 * Assorted other things 
d214 1
a214 1
	unsigned	romvecVersion;		/* Version # of Romvec */ 
d218 5
a222 5
	int		*keyrInit;		/* ms before kbd repeat */
	unsigned char	*keyrTick; 		/* ms between repetitions */
	unsigned	*memoryAvail;		/* V1: Main mem usable size */
	long		*resetAddr;		/* where to jump on a reset */
	long		*resetMap;		/* pgmap entry for resetaddr */
d224 8
a231 8
	int		(*exitToMon)();		/* Exit from user program */
	unsigned char	**memorybitmap;		/* V1: &{0 or &bits} */
	void		(*setcxsegmap)();	/* Set seg in any context */
	void		(**vector_cmd)();	/* V2: Handler for 'v' cmd */
	int		dummy1z;
	int		dummy2z;
	int		dummy3z;
	int		dummy4z;
d245 1
a245 1
 *	   char ch;	
d247 1
a247 1
 * mayGet -- Maybe get a character from the current input source.  Return -1 
d251 1
a251 1
 *	
d263 1
a263 1
 *	
d333 1
a333 1
 * 
d335 1
a335 1
 * valid pages. 
d352 2
a353 2
#define MONSHORTPAGE 0x0FFFE000	
#define MONSHORTSEG  0x0FFE0000     
d356 1
a356 1
#endif /* MACHINE_MON_H */     
@


1.3
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: mon.h,v 1.20 1996/12/17 21:11:08 gwr Exp $	*/
d106 3
a108 3
	char	*initSp;		/* Initial system stack ptr  
					 * for hardware */
	int	(*startMon)__P((void));	/* Initial PC for hardware */
d110 1
a110 1
	int	*diagberr;		/* Bus err handler for diags */
d116 2
a117 2
	struct bootparam **bootParam;	/* Info for bootstrapped pgm */
 	u_int	*memorySize;		/* Usable memory in bytes */
d123 7
a129 7
	u_char	(*getChar)__P((void));	/* Get char from input source */
	int	(*putChar)__P((int));	/* Put char to output sink */
	int	(*mayGet)__P((void));	/* Maybe get char, or -1 */
	int	(*mayPut)__P((int));	/* Maybe put char, or -1 */
	u_char	*echo;		/* Should getchar echo? */
	u_char	*inSource;	/* Input source selector */
	u_char	*outSink;	/* Output sink selector */
d135 9
a143 9
	int	(*getKey)__P((void));	/* Get next key if one exists */
	int	(*initGetKey)__P((void*)); /* Initialize get key */
	u_int	*translation;		/* Kbd translation selector 
					   (see keyboard.h in sun 
					    monitor code) */
	u_char	*keyBid;		/* Keyboard ID byte */
	int	*screen_x;		/* V2: Screen x pos (R/O) */
	int	*screen_y;		/* V2: Screen y pos (R/O) */
	struct keybuf	*keyBuf;	/* Up/down keycode buffer */
d155 4
a158 5
	int	(*fbWriteChar)__P((int)); /* Write a character to FB */
	int	*fbAddr;		/* Address of frame buffer */
	char	**font;			/* Font table for FB */
	/* Quickly write string to FB */
	int	(*fbWriteStr)__P((char *buf, int len));
d164 1
a164 1
	int	(*reBoot)__P((char *));	/* e.g. reBoot("xy()vmunix") */
d170 6
a175 6
	u_char	*lineBuf;	/* The line input buffer */
	u_char	**linePtr;	/* Cur pointer into linebuf */
	int		*lineSize;	/* length of line in linebuf */
	int	(*getLine)__P((int));	/* Get line from user */
	u_char	(*getNextChar)__P((void)); /* Get next char from linebuf */
	u_char	(*peekNextChar)__P((void));	/* Peek at next char */
d177 1
a177 1
	int		(*getNum)__P((void));	/* Grab hex num from line */
d183 2
a184 2
	int	(*printf)__P((char *, ...));	/* Like kernel printf */
	int	(*printHex)__P((int,int));	/* Format N digits in hex */
d190 2
a191 2
	u_char	*leds;			/* RAM copy of LED register */
	int	(*setLeds)__P((int));	/* Sets LED's and RAM copy */
d197 3
a199 3
	int	(*nmiAddr)__P((void*));	/* Addr for level 7 vector */
	int	(*abortEntry)__P((void*)); /* Entry for keyboard abort */
	int	*nmiClock;		/* Counts up in msec */
d211 18
a228 22
	u_int	romvecVersion;		/* Version # of Romvec */ 
	struct globram  *globRam;	/* monitor global variables */
	caddr_t		kbdZscc;	/* Addr of keyboard in use */

	int	*keyrInit;		/* ms before kbd repeat */
	u_char	*keyrTick; 		/* ms between repetitions */
	u_int	*memoryAvail;		/* V1: Main mem usable size */
	long	*resetAddr;		/* where to jump on a reset */
	long	*resetMap;		/* pgmap entry for resetaddr */
					/* Really struct pgmapent *  */
	int	(*exitToMon)__P((void)); /* Exit from user program */
	u_char	**memorybitmap;		/* V1: &{0 or &bits} */

	/* Set seg in all contexts */
	void	(*setcxsegmap)__P((int,int,int));

	/* V2: Handler for 'v' cmd */
	void	(**vector_cmd)__P((int, char*));
	int	dummy1z;
	int	dummy2z;
	int	dummy3z;
	int	dummy4z;
d237 1
a237 1
 *     u_char getChar()
d268 1
a268 1
 *	    u_char ch;
d273 1
a273 1
 *  	    register u_char *addr;	/ * String to be written * /
d283 1
a283 1
 *	u_char getNextChar()
d287 1
a287 1
 *	u_char peekNextChar()
@


1.2
log
@sync with NetBSD -- copyright changes only
@
text
@d1 1
a1 1
/*	$NetBSD: mon.h,v 1.19 1996/11/20 18:57:12 gwr Exp $	*/
d106 3
a108 3
	char		*initSp;		/* Initial system stack ptr  
						 * for hardware */
	int		(*startMon)();		/* Initial PC for hardware */
d110 1
a110 1
	int		*diagberr;		/* Bus err handler for diags */
d116 2
a117 2
	struct bootparam **bootParam;		/* Info for bootstrapped pgm */
 	unsigned	*memorySize;		/* Usable memory in bytes */
d123 7
a129 7
	unsigned char	(*getChar)();		/* Get char from input source */
	int		(*putChar)();		/* Put char to output sink */
	int		(*mayGet)();		/* Maybe get char, or -1 */
	int		(*mayPut)();		/* Maybe put char, or -1 */
	unsigned char	*echo;			/* Should getchar echo? */
	unsigned char	*inSource;		/* Input source selector */
	unsigned char	*outSink;		/* Output sink selector */
d135 9
a143 9
	int		(*getKey)();		/* Get next key if one exists */
	int		(*initGetKey)();	/* Initialize get key */
	unsigned int	*translation;		/* Kbd translation selector 
						   (see keyboard.h in sun 
						    monitor code) */
	unsigned char	*keyBid;		/* Keyboard ID byte */
	int		*screen_x;		/* V2: Screen x pos (R/O) */
	int		*screen_y;		/* V2: Screen y pos (R/O) */
	struct keybuf	*keyBuf;		/* Up/down keycode buffer */
d155 5
a159 4
	int		(*fbWriteChar)();	/* Write a character to FB */
	int		*fbAddr;		/* Address of frame buffer */
	char		**font;			/* Font table for FB */
	int		(*fbWriteStr)();	/* Quickly write string to FB */
d165 1
a165 1
	int		(*reBoot)();		/* e.g. reBoot("xy()vmunix") */
d171 6
a176 6
	unsigned char	*lineBuf;		/* The line input buffer */
	unsigned char	**linePtr;		/* Cur pointer into linebuf */
	int		*lineSize;		/* length of line in linebuf */
	int		(*getLine)();		/* Get line from user */
	unsigned char	(*getNextChar)();	/* Get next char from linebuf */
	unsigned char	(*peekNextChar)();	/* Peek at next char */
d178 1
a178 1
	int		(*getNum)();		/* Grab hex num from line */
d184 2
a185 2
	int		(*printf)();		/* Similar to "Kernel printf" */
	int		(*printHex)();		/* Format N digits in hex */
d191 2
a192 2
	unsigned char	*leds;			/* RAM copy of LED register */
	int		(*setLeds)();		/* Sets LED's and RAM copy */
d198 3
a200 3
	int		(*nmiAddr)();		/* Addr for level 7 vector */
	int		(*abortEntry)();	/* Entry for keyboard abort */
	int		*nmiClock;		/* Counts up in msec */
d212 22
a233 18
	unsigned	romvecVersion;		/* Version # of Romvec */ 
	struct globram  *globRam;		/* monitor global variables */
	caddr_t		kbdZscc;		/* Addr of keyboard in use */

	int		*keyrInit;		/* ms before kbd repeat */
	unsigned char	*keyrTick; 		/* ms between repetitions */
	unsigned	*memoryAvail;		/* V1: Main mem usable size */
	long		*resetAddr;		/* where to jump on a reset */
	long		*resetMap;		/* pgmap entry for resetaddr */
						/* Really struct pgmapent *  */
	int		(*exitToMon)();		/* Exit from user program */
	unsigned char	**memorybitmap;		/* V1: &{0 or &bits} */
	void		(*setcxsegmap)();	/* Set seg in any context */
	void		(**vector_cmd)();	/* V2: Handler for 'v' cmd */
	int		dummy1z;
	int		dummy2z;
	int		dummy3z;
	int		dummy4z;
d242 1
a242 1
 *     unsigned char getChar()
d273 1
a273 1
 *	    unsigned char ch;
d278 1
a278 1
 *  	    register unsigned char *addr;	/ * String to be written * /
d288 1
a288 1
 *	unsigned char getNextChar()
d292 1
a292 1
 *	unsigned char peekNextChar()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mon.h,v 1.16 1995/02/07 05:01:05 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1993 Adam Glass
d7 3
d20 5
a24 3
 *	This product includes software developed by Adam Glass.
 * 4. The name of the Author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 11
a36 11
 * THIS SOFTWARE IS PROVIDED BY Adam Glass ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
