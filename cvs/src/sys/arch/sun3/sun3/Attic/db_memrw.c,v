head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.18
	OPENBSD_2_8:1.7.0.16
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.14
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.12
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2002.12.31.16.35.41;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.06.11.01.30.13;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	97.09.07.14.05.20;	author kstailey;	state Exp;
branches
	1.7.12.1;
next	1.6;

1.6
date	97.01.16.04.04.17;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.01.07.23.36.25;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.31.06.13.37;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.08.26.05;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.10.11.23.07.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.16.04.31;	author mickey;	state Exp;
branches;
next	;

1.7.12.1
date	2001.07.04.10.24.08;	author niklas;	state Exp;
branches;
next	1.7.12.2;

1.7.12.2
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.7.12.3;

1.7.12.3
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.7.12.4;

1.7.12.4
date	2003.03.27.23.52.18;	author niklas;	state dead;
branches;
next	;

1.9.2.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2003.05.19.21.49.46;	author tedu;	state dead;
branches;
next	;


desc
@@


1.12
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: db_memrw.c,v 1.11 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: db_memrw.c,v 1.13 1996/11/20 18:57:28 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Interface to the debugger for virtual memory read/write.
 * This file is shared by DDB and KGDB, and must work even
 * when only KGDB is included (thus no db_printf calls).
 *
 * To write in the text segment, we have to first make
 * the page writable, do the write, then restore the PTE.
 * For writes outside the text segment, and all reads,
 * just do the access -- if it causes a fault, the debugger
 * will recover with a longjmp to an appropriate place.
 *
 * ALERT!  If you want to access device registers with a
 * specific size, then the read/write functions have to
 * make sure to do the correct sized pointer access.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <uvm/uvm_extern.h>

#include <machine/control.h>
#include <machine/pte.h>
#include <machine/db_machdep.h>
#include <machine/machdep.h>

#include <ddb/db_access.h>


static void db_write_text(vm_offset_t, size_t size, char *);

/*
 * Read bytes from kernel address space for debugger.
 * This used to check for valid PTEs, but now that
 * traps in DDB work correctly, "Just Do It!"
 */
void
db_read_bytes(addr, size, data)
	vm_offset_t	addr;
	register size_t	size;
	register char	*data;
{
	register char	*src = (char *)addr;

	if (size == 4) {
		*((int *)data) = *((int *)src);
		return;
	}

	if (size == 2) {
		*((short *)data) = *((short *)src);
		return;
	}

	while (size > 0) {
		--size;
		*data++ = *src++;
	}
}

/*
 * Write bytes somewhere in kernel text.
 * Makes text page writable temporarily.
 */
static void
db_write_text(addr, size, data)
	vm_offset_t	addr;
	register size_t	size;
	register char	*data;
{
	register char	*dst;
	int		oldpte, tmppte;
	vm_offset_t	pgva, prevpg;

	/* Prevent restoring a garbage PTE. */
	if (size <= 0)
		return;

	dst = (char *)addr;
	pgva = trunc_page((long)dst);

	goto firstpage;
	do {

		/*
		 * If we are on a new page, restore the PTE
		 * for the previous page, and make the new
		 * page writable.
		 */
		pgva = trunc_page((long)dst);
		if (pgva != prevpg) {
			/*
			 * Restore old PTE.  No cache flush,
			 * because the tmp PTE has no-cache.
			 */
			set_pte(prevpg, oldpte);

		firstpage:
			/*
			 * Flush the VAC to prevent a cache hit
			 * on the old, read-only PTE.
			 */
#ifdef	HAVECACHE
			if (cache_size)
				cache_flush_page(pgva);
#endif
			oldpte = get_pte(pgva);
			if ((oldpte & PG_VALID) == 0) {
				printf(" address %p not a valid page\n", dst);
				return;
			}
			tmppte = oldpte | PG_WRITE | PG_NC;
			set_pte(pgva, tmppte);

			prevpg = pgva;
		}

		/* Now we can write in this page of kernel text... */
		*dst++ = *data++;

	} while (--size > 0);

	/* Restore old PTE for the last page touched. */
	set_pte(prevpg, oldpte);

	/* Finally, clear the instruction cache. */
	ICIA();
}

/*
 * Write bytes to kernel address space for debugger.
 */

extern char	kernel_text[], etext[];

void
db_write_bytes(addr, size, data)
	vm_offset_t	addr;
	register size_t	size;
	register char	*data;
{
	register char	*dst = (char *)addr;

	/* If any part is in kernel text, use db_write_text() */
	if ((dst < etext) && ((dst + size) > kernel_text)) {
		db_write_text((vm_offset_t)dst, size, data);
		return;
	}

	if (size == 4) {
		*((int *)dst) = *((int *)data);
		return;
	}

	if (size == 2) {
		*((short *)dst) = *((short *)data);
		return;
	}

	while (size > 0) {
		--size;
		*dst++ = *data++;
	}
}

@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.10 2002/03/14 01:26:47 millert Exp $	*/
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.9 2001/11/06 19:53:16 miod Exp $	*/
d83 1
a83 1
	register char	*src = (char*)addr;
d86 1
a86 1
		*((int*)data) = *((int*)src);
d91 1
a91 1
		*((short*)data) = *((short*)src);
d119 1
a119 1
	dst = (char*)addr;
d191 1
a191 1
		*((int*)dst) = *((int*)data);
d196 1
a196 1
		*((short*)dst) = *((short*)data);
@


1.9
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.8 2001/06/11 01:30:13 miod Exp $	*/
d70 1
a70 1
static void db_write_text __P((vm_offset_t, size_t size, char *));
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.9 2001/11/06 19:53:16 miod Exp $	*/
d70 1
a70 1
static void db_write_text(vm_offset_t, size_t size, char *);
d83 1
a83 1
	register char	*src = (char *)addr;
d86 1
a86 1
		*((int *)data) = *((int *)src);
d91 1
a91 1
		*((short *)data) = *((short *)src);
d119 1
a119 1
	dst = (char *)addr;
d191 1
a191 1
		*((int *)dst) = *((int *)data);
d196 1
a196 1
		*((short *)dst) = *((short *)data);
@


1.9.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.9.2.1 2002/06/11 03:39:01 art Exp $	*/
@


1.8
log
@Use MI {trunc,round}_page macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.7 1997/09/07 14:05:20 kstailey Exp $	*/
d60 1
a60 1
#include <vm/vm.h>
@


1.7
log
@switch from private Mach derived conversion macros to m68k ones
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.6 1997/01/16 04:04:17 kstailey Exp $	*/
d120 1
a120 1
	pgva = m68k_trunc_page((long)dst);
d130 1
a130 1
		pgva = m68k_trunc_page((long)dst);
@


1.7.12.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.7 1997/09/07 14:05:20 kstailey Exp $	*/
d120 1
a120 1
	pgva = trunc_page((long)dst);
d130 1
a130 1
		pgva = trunc_page((long)dst);
@


1.7.12.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a60 1
#include <uvm/uvm_extern.h>
@


1.7.12.3
log
@Merge in -current from about a week ago
@
text
@d70 1
a70 1
static void db_write_text(vm_offset_t, size_t size, char *);
d83 1
a83 1
	register char	*src = (char *)addr;
d86 1
a86 1
		*((int *)data) = *((int *)src);
d91 1
a91 1
		*((short *)data) = *((short *)src);
d119 1
a119 1
	dst = (char *)addr;
d191 1
a191 1
		*((int *)dst) = *((int *)data);
d196 1
a196 1
		*((short *)dst) = *((short *)data);
@


1.7.12.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: db_memrw.c,v 1.7.12.3 2002/03/28 11:26:45 niklas Exp $	*/
@


1.6
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d120 1
a120 1
	pgva = sun3_trunc_page((long)dst);
d130 1
a130 1
		pgva = sun3_trunc_page((long)dst);
@


1.5
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d57 1
d62 1
d65 1
d69 2
a70 1
#include "cache.h"
d111 3
a113 3
	register char *dst;
	int		ch, oldpte, tmppte;
	vm_offset_t pgva, prevpg;
d149 1
a149 1
				printf(" address 0x%x not a valid page\n", dst);
d173 1
d175 1
d186 1
a186 1
		db_write_text(dst, size, data);
@


1.4
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: db_memrw.c,v 1.14 1996/12/17 21:11:20 gwr Exp $	*/
a55 1
#include <sys/systm.h>
a59 1
#include <machine/control.h>
d65 1
a65 7
#include "machdep.h"

extern char etext[];	/* defined by the linker */
extern char	kernel_text[];	/* locore.s */

static void db_write_text __P((char *, size_t size, char *));

d101 2
a102 2
db_write_text(dst, size, data)
	register char *dst;
d106 2
a107 1
	int		oldpte, tmppte;
d114 1
d144 1
a144 1
				printf(" address %p not a valid page\n", dst);
d168 1
@


1.3
log
@sync with NetBSD -- copyright changes only
@
text
@d1 1
a1 1
/*	$NetBSD: db_memrw.c,v 1.13 1996/11/20 18:57:28 gwr Exp $	*/
d56 1
d61 1
d67 7
a73 1
#include "cache.h"
d109 2
a110 2
db_write_text(addr, size, data)
	vm_offset_t	addr;
d114 1
a114 2
	register char *dst;
	int		ch, oldpte, tmppte;
a120 1
	dst = (char*)addr;
d150 1
a150 1
				printf(" address 0x%x not a valid page\n", dst);
a173 1
extern char	kernel_text[], etext[];
@


1.2
log
@sync + our changes
@
text
@d1 1
a1 1
/*	$NetBSD: db_memrw.c,v 1.12 1996/06/17 15:40:48 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1996 Gordon W. Ross
d7 3
d18 7
a24 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: db_memrw.c,v 1.11 1996/02/20 02:42:55 gwr Exp $	*/
d32 2
d135 1
a135 1
				db_printf(" address 0x%x not a valid page\n", dst);
@
