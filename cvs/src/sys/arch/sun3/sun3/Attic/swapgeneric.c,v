head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.20
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.12.31.16.35.42;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.29.18.40.33;	author miod;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.05.30.20.37.54;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	97.01.16.04.04.33;	author kstailey;	state Exp;
branches
	1.5.14.1;
next	1.4;

1.4
date	97.01.07.23.36.35;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.31.06.14.04;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.11.07.01.40.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.02;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2001.07.04.10.24.17;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.5.14.3;

1.5.14.3
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.5.14.4;

1.5.14.4
date	2003.03.27.23.52.19;	author niklas;	state dead;
branches;
next	;

1.7.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2003.05.19.21.49.46;	author tedu;	state dead;
branches;
next	;


desc
@@


1.9
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: swapgeneric.c,v 1.8 2002/03/14 01:26:47 millert Exp $	*/
/*	$NetBSD: swapgeneric.c,v 1.14 1995/04/26 23:30:08 gwr Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * fake swapgeneric.c -- should do this differently.
 */

#include <sys/param.h>
#include <sys/conf.h>

int (*mountroot)(void) = NULL;	/* tells autoconf.c that we are "generic" */

dev_t	rootdev = NODEV;
dev_t	dumpdev = NODEV;

struct	swdevt swdevt[] = {
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
};
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.7 2001/09/29 18:40:33 miod Exp $	*/
@


1.7
log
@The "swap generic" configuration needs only two entries in swdevt[].
So shrink it when necessary, and remove unwanted stuff as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.6 2001/05/30 20:37:54 miod Exp $	*/
d41 1
a41 1
int (*mountroot) __P((void)) = NULL;	/* tells autoconf.c that we are "generic" */
@


1.7.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.7 2001/09/29 18:40:33 miod Exp $	*/
d41 1
a41 1
int (*mountroot)(void) = NULL;	/* tells autoconf.c that we are "generic" */
@


1.7.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.7.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.6
log
@Bring the root device selection code up-to-date with modern standards
(and other ports).
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5 1997/01/16 04:04:33 kstailey Exp $	*/
d35 1
a35 1
 * Generic swap locations
a39 1
#include <sys/systm.h>
d47 2
a48 10
	{ makedev(7, 1),	0,	0 },	/* sd0b */
	{ makedev(7, 17),	0,	0 },	/* sd1b */
	{ makedev(7, 33),	0,	0 },	/* sd2b */
	{ makedev(7, 49),	0,	0 },	/* sd3b */
	{ makedev(3, 1),	0,	0 },	/* xy0b */
	{ makedev(3, 17),	0,	0 },	/* xy1b */
	{ makedev(10, 1),	0,	0 },	/* xd0b */
	{ makedev(10, 17),	0,	0 },	/* xd1b */
	{ NODEV,		0,	0 },
	{ NODEV,		0,	0 }
@


1.5
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 1
a35 5
 * Generic configuration (one kernel fits all 8-)
 * Some ideas taken from i386 port but no code.
 *
 * Allow root/swap on any of: le,sd
 * Eventually, allow: ie,st,xd,xy
a39 1
#include <sys/buf.h>
a40 6
#include <sys/reboot.h>

#include <dev/cons.h>

#include <machine/machdep.h>
#include <machine/mon.h>
d42 1
a42 5
#ifdef	NFSCLIENT
extern char	*nfsbootdevname;	/* nfs_boot.c */
#endif	/* NFSCLIENT */

int (*mountroot) __P((void)) = NULL;
d48 10
a57 2
	{ NODEV,	0,	0 },
	{ NODEV,	0,	0 },
a58 322


struct devspec {
	int  major;
	int  unit;
	int  part;
	char name[4];
};

#define NAMESZ 16
char boot_ifname[NAMESZ];


static int net_mkunit __P((int, int));
static int sd_mkunit __P((int, int));
static int xx_mkunit __P((int, int));
static struct genconf *gc_lookup __P((char *));
static void gc_print_all __P((void));
static int ds_parse __P((struct devspec *, char *));
static int ds_tostr __P((struct devspec *, char *));
static void ds_from_boot __P((struct devspec *));
static void ds_query __P((struct devspec *, char *));
static dev_t ds_todev __P((struct devspec *));

/*
 * Devices which MIGHT be available.
 * If gc_root is NODEV, use NFS root.
 */
static struct genconf {
	char gc_name[4];
	int  gc_major;
	int  (*gc_mkunit)__P((int, int));
} genconf[] = {
	{ {"ie"}, -1, net_mkunit },
	{ {"le"}, -1, net_mkunit },
	{ {"sd"},  7, sd_mkunit },
	{ {"xy"},  3, xx_mkunit },
	{ {"xd"}, 10, xx_mkunit },
	{ {0}, },
};

/*
 * Functions to convert PROM ctlr/unit into our unit numbers
 */
static int
net_mkunit(ctlr, unit)
	int ctlr, unit;
{

	/* XXX - Not sure which is set. */
	return (ctlr + unit);
}

static int
sd_mkunit(ctlr, unit)
	int ctlr, unit;
{
	int target, lun;

	/* This only supports LUNs 0, 1 */
	target = unit >> 3;
	lun = unit & 1;
	return (target * 2 + lun);
}

static int
xx_mkunit(ctlr, unit)
	int ctlr, unit;
{

	return (ctlr * 2 + unit);
}

static struct genconf *
gc_lookup(name)
	char *name;
{
	struct genconf *gc;

	gc = genconf;
	while (gc->gc_major) {
		if ((gc->gc_name[0] == name[0]) &&
			(gc->gc_name[1] == name[1]))
			return gc;
		gc++;
	}
	return NULL;
}

static void
gc_print_all()
{
	struct genconf *gc;

	gc = genconf;
	for (;;) {
		printf("%s", gc->gc_name);
		gc++;
		if (gc->gc_major == 0)
			break;
		printf(", ");
	}
	printf("\n");
}

/*
 * Set devspec from a string like: "sd0a"
 * Return length of recognized part.
 */
static int
ds_parse(ds, str)
	struct devspec *ds;
	char *str;
{
	struct genconf *gc;
	int unit, part;
	char *p;

	bzero((caddr_t)ds, sizeof(*ds));
	while (*str == ' ')
		str++;
	p = str;

	gc = gc_lookup(p);
	if (!gc) return 0;

	/* Major number from the genconf table. */
	ds->major = gc->gc_major;

	/* Device name (always two letters on Suns) */
	ds->name[0] = *p++;
	ds->name[1] = *p++;

	/* Unit number */
	unit = 0;
	while ('0' <= *p && *p <= '9') {
		unit *= 10;
		unit += (*p++ - '0');
	}
	ds->unit = unit & 0x1F;

	/* Partition letter */
	part = 0;
	if ('a' <= *p && *p <= 'h')
		part = *p++ - 'a';
	ds->part = part;

	return (p - str);
}

/*
 * Format a devspec into a string like: "sd0a"
 * Returns length of string.
 */
static int
ds_tostr(ds, str)
	struct devspec *ds;
	char *str;
{
	int unit, part;
	char *p;

	p = str;

	/* Device name (always two letters on Suns) */
	*p++ = ds->name[0];
	*p++ = ds->name[1];

	/* Unit number */
	unit = ds->unit & 0x1f;
	if (unit >= 10) {
		*p++ = '0' + (unit / 10);
		unit = unit % 10;
	}
	*p++ = '0' + unit;

	/* Partition letter (only for disks). */
	if (ds->major >= 0) {
		part = ds->part & 7;
		*p++ = 'a' + part;
	}

	*p = '\0';
	return (p - str);
}

/*
 * Set the devspec to the device we booted from.
 * (Just converts PROM boot parameters.)
 */
static void
ds_from_boot(ds)
	struct devspec *ds;
{
	MachMonBootParam *bpp;
	struct genconf *gc;

	bpp = *romp->bootParam;

	bzero((caddr_t)ds, sizeof(*ds));

	/* Device name (always two letters) */
	ds->name[0] = bpp->devName[0];
	ds->name[1] = bpp->devName[1];

	/* Is this device known? */
	gc = gc_lookup(ds->name);
	if (gc == NULL) {
		/* Boot device not in genconf, so ask. */
		boothowto |= RB_ASKNAME;
		return;
	}

	/* Compute our equivalents of the prom info. */
	ds->major = gc->gc_major;
	ds->unit = gc->gc_mkunit(bpp->ctlrNum, bpp->unitNum);
	ds->part = bpp->partNum;
}

/*
 * Fill in the devspec by asking the operator.
 * The ds passed may hold a default value.
 */
static void
ds_query(ds, what)
	struct devspec *ds;
	char *what;
{
	int len;
	char buf[64];

	for (;;) {
		len = ds_tostr(ds, buf);
		printf("%s device? [%s] ", what, buf);

		getsn(buf, 64);
		if (buf[0] == '\0')
			return;

		len = ds_parse(ds, buf);
		if (len > 2)
			break;

		printf("Invalid name.  Use one of: ");
		gc_print_all();
	}
}

static dev_t
ds_todev(ds)
	struct devspec *ds;
{
	int minor;
	if (ds->major < 0)
		return NODEV;
	minor = (ds->unit << 3) + (ds->part & 7);
	return (makedev(ds->major, minor));
}

/*
 * Choose the root and swap device, either by asking,
 * (if RB_ASKNAME) or from the PROM boot parameters.
 */
void
swapgeneric()
{
	struct devspec ds;
	char buf[NAMESZ];

	/*
	 * Choose the root device.
	 * Default is boot device.
	 */
	ds_from_boot(&ds);
	if (boothowto & RB_ASKNAME)
		ds_query(&ds, "root");
	else {
		ds_tostr(&ds, buf);
		printf("root on %s\n", buf);
	}
	rootdev = ds_todev(&ds);

	/*
	 * Choose the root fstype.
	 * XXX - Hard coded for now.
	 */
#ifdef NFSCLIENT
	if (rootdev == NODEV) {
		/* Set boot interface name for nfs_mountroot. */
		nfsbootdevname = boot_ifname;
		ds_tostr(&ds, boot_ifname);
		mountroot = nfs_mountroot;
	} else
#endif /* NFSCLIENT */
	{
		/* XXX - Should ask for the root fstype here. -gwr */
		mountroot = dk_mountroot;
	}

	/*
	 * Choose the swap device.  (Default from root)
	 */
	ds.part = 1;
	if (boothowto & RB_ASKNAME)
		ds_query(&ds, "swap");
	else {
		ds_tostr(&ds, buf);
		printf("swap on %s\n", buf);
	}
	swdevt[0].sw_dev = ds_todev(&ds);

	/*
	 * Choose the dump device.  (Default from swap)
	 */
	if (boothowto & RB_ASKNAME)
		ds_query(&ds, "dump");
	else {
		ds_tostr(&ds, buf);
		printf("dump on %s\n", buf);
	}
	dumpdev = ds_todev(&ds);
}
@


1.5.14.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5 1997/01/16 04:04:33 kstailey Exp $	*/
d35 5
a39 1
 * Generic swap locations
d44 1
d46 6
d53 5
a57 1
int (*mountroot) __P((void)) = NULL;	/* tells autoconf.c that we are "generic" */
d63 2
a64 10
	{ makedev(7, 1),	0,	0 },	/* sd0b */
	{ makedev(7, 17),	0,	0 },	/* sd1b */
	{ makedev(7, 33),	0,	0 },	/* sd2b */
	{ makedev(7, 49),	0,	0 },	/* sd3b */
	{ makedev(3, 1),	0,	0 },	/* xy0b */
	{ makedev(3, 17),	0,	0 },	/* xy1b */
	{ makedev(10, 1),	0,	0 },	/* xd0b */
	{ makedev(10, 17),	0,	0 },	/* xd1b */
	{ NODEV,		0,	0 },
	{ NODEV,		0,	0 }
d66 322
@


1.5.14.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5.14.1 2001/07/04 10:24:17 niklas Exp $	*/
d35 1
a35 1
 * fake swapgeneric.c -- should do this differently.
d40 1
d48 10
a57 2
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
@


1.5.14.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
int (*mountroot)(void) = NULL;	/* tells autoconf.c that we are "generic" */
@


1.5.14.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5.14.3 2002/03/28 11:26:45 niklas Exp $	*/
@


1.4
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d48 3
d52 1
a52 1
  
d55 1
a55 1
#else	/* NFSCLIENT */
d67 8
d78 29
d110 2
a111 1
static int net_mkunit(ctlr, unit)
d114 1
d119 2
a120 1
static int sd_mkunit(ctlr, unit)
d131 2
a132 1
static int xx_mkunit(ctlr, unit)
d135 1
a138 17
/*
 * Devices which MIGHT be available.
 * If gc_root is NODEV, use NFS root.
 */
static struct genconf {
	char gc_name[4];
	int  gc_major;
	int  (*gc_mkunit)();
} genconf[] = {
	{ "ie", -1, net_mkunit },
	{ "le", -1, net_mkunit },
	{ "sd",	7,  sd_mkunit },
	{ "xy",	3,  xx_mkunit },
	{ "xd",	10, xx_mkunit },
	{ 0 },
};

d155 2
a156 1
static void gc_print_all()
a169 8
	

struct devspec {
	int  major;
	int  unit;
	int  part;
	char name[4];
};
d175 2
a176 1
static int ds_parse(ds, str)
d220 2
a221 1
static int ds_tostr(ds, str)
a224 1
	struct genconf *gc;
d256 2
a257 1
static void ds_from_boot(ds)
d289 2
a290 1
static void ds_query(ds, what)
d294 1
a294 3
	struct genconf *gc;
	char *p;
	int len, minor;
d301 1
a301 1
		gets(buf);
d314 2
a315 1
static dev_t ds_todev(ds)
d329 1
a331 3
	struct genconf *gc;
	dev_t root, swap, dump;
	int minor;
a386 44
}

/* XXX - Isn't this in some common file? */
gets(cp)
	char *cp;
{
	register char *lp;
	register c;

 top:
	lp = cp;
	for (;;) {
		c = cngetc();
		switch (c) {

		case '\n':
		case '\r':
			cnputc('\n');
			*lp++ = '\0';
			return;

		case '\b':
		case '\177':
			if (lp > cp) {
				lp--;
				printf("\b \b");
			}
			continue;

		case ('U'&037):
			cnputc('\n');
			goto top;

		default:
			if (c < ' ') {
				cnputc('^');
				*lp++ = '^';
				c |= 0100;
			}
			cnputc(c);
			*lp++ = c;
			break;
		}
	}
@


1.3
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.19 1996/12/17 21:11:41 gwr Exp $	*/
d3 2
a4 2
/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
a6 3
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
d15 3
a17 1
 * 3. All advertising materials mentioning features or use of this software
d19 1
a19 5
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d21 10
a30 11
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
a46 2
#include <dev/cons.h>

d48 1
a48 8
#include "machdep.h"

static int net_mkunit __P((int ctlr, int unit));
static int sd_mkunit  __P((int ctlr, int unit));
static int xx_mkunit  __P((int ctlr, int unit));
static struct genconf * gc_lookup __P((char *));


d50 2
a51 2
extern char	*nfsbootdevname;          /* nfs_boot.c */
#endif	/* NFSCLIENT */
d69 1
a69 2
static int
net_mkunit(ctlr, unit)
d76 1
a76 2
static int
sd_mkunit(ctlr, unit)
d87 1
a87 2
static int
xx_mkunit(ctlr, unit)
d100 1
a100 1
	int  (*gc_mkunit) __P((int, int));
d102 6
a107 6
	{ {"ie"}, -1, net_mkunit },
	{ {"le"}, -1, net_mkunit },
	{ {"sd"},  7, sd_mkunit },
	{ {"xy"},  3, xx_mkunit },
	{ {"xd"}, 10, xx_mkunit },
	{ {0}, 0, 0 },
d126 1
a126 2
static void
gc_print_all __P((void))
d140 1
a140 1

a148 8
static int ds_parse __P((struct devspec *, char *));
static int ds_tostr __P((struct devspec *, char *));
static void ds_from_boot __P((struct devspec *));
static void ds_query __P((struct devspec *, char *));
static dev_t ds_todev __P((struct devspec *));
static void gets __P((char *cp));


d153 1
a153 2
static int
ds_parse(ds, str)
d197 1
a197 2
static int
ds_tostr(ds, str)
d201 1
d233 1
a233 2
static void
ds_from_boot(ds)
d265 1
a265 2
static void
ds_query(ds, what)
d269 3
a272 1
	int len;
d291 1
a291 2
static dev_t
ds_todev(ds)
a304 1
void
d307 3
a367 1
static void
@


1.2
log
@dk_mountroot
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.14 1995/04/26 23:30:08 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1994 Gordon W. Ross
d7 3
d18 1
a18 3
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
d20 5
a24 1
 *      This product includes software developed by Gordon W. Ross
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d53 2
d56 8
a63 1
  
d65 2
a66 2
extern char	*nfsbootdevname;	/* nfs_boot.c */
#else	/* NFSCLIENT */
d84 2
a85 1
static int net_mkunit(ctlr, unit)
d92 2
a93 1
static int sd_mkunit(ctlr, unit)
d104 2
a105 1
static int xx_mkunit(ctlr, unit)
d118 1
a118 1
	int  (*gc_mkunit)();
d120 6
a125 6
	{ "ie", -1, net_mkunit },
	{ "le", -1, net_mkunit },
	{ "sd",	7,  sd_mkunit },
	{ "xy",	3,  xx_mkunit },
	{ "xd",	10, xx_mkunit },
	{ 0 },
d144 2
a145 1
static void gc_print_all()
d159 1
a159 1
	
d168 8
d180 2
a181 1
static int ds_parse(ds, str)
d225 2
a226 1
static int ds_tostr(ds, str)
a229 1
	struct genconf *gc;
d261 2
a262 1
static void ds_from_boot(ds)
d294 2
a295 1
static void ds_query(ds, what)
a298 3
	struct genconf *gc;
	char *p;
	int len, minor;
d300 1
d319 2
a320 1
static dev_t ds_todev(ds)
d334 1
a336 3
	struct genconf *gc;
	dev_t root, swap, dump;
	int minor;
d395 1
@


1.1
log
@Initial revision
@
text
@a48 19
/*
 * This will be called if the config file fails to include:
 *  	option GENERIC
 *      option NFSCLIENT
 *      option FFS
 */
static int
no_mountroot()
{
	printf("swapgeneric: configuration error!\n");
	boot(RB_HALT);
}

#ifdef	FFS
extern int ffs_mountroot();
#else	/* FFS */
#define ffs_mountroot no_mountroot
#endif	/* FFS */

a50 1
extern int nfs_mountroot(); 	/* nfs_vfsops.c */
a51 3
static char	*nfsbootdevname;
#define nfs_mountroot no_mountroot
#endif	/* NFSCLIENT */
d53 1
a53 1
int (*mountroot)() = no_mountroot;
d330 1
d336 3
a338 1
	} else {
d340 1
a340 1
		mountroot = ffs_mountroot;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
