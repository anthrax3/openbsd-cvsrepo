head	1.13;
access;
symbols
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	UBC_SYNC_A:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.12
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.20
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.12;

1.12
date	2002.08.02.16.13.07;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.16.00.42.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.01.16.04.03.43;	author kstailey;	state Exp;
branches
	1.6.14.1
	1.6.18.1
	1.6.20.1;
next	1.5;

1.5
date	97.01.07.23.36.04;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.31.06.12.30;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.08.25.48;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.02.13;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.6.14.3;

1.6.14.3
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.6.14.4;

1.6.14.4
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.6.18.1
date	2001.09.16.15.22.03;	author miod;	state Exp;
branches;
next	;

1.6.20.1
date	2001.10.14.20.44.48;	author jason;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2002.10.29.00.28.12;	author art;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.13
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: cg2.c,v 1.12 2002/08/02 16:13:07 millert Exp $	*/
/*	$NetBSD: cg2.c,v 1.7 1996/10/13 03:47:26 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)cgthree.c	8.2 (Berkeley) 10/30/93
 */

/*
 * color display (cg2) driver.
 *
 * Does not handle interrupts, even though they can occur.
 *
 * XXX should defer colormap updates to vertical retrace interrupts
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>
#include <sys/mman.h>
#include <sys/tty.h>
#include <sys/conf.h>

#include <uvm/uvm_extern.h>

#include <machine/conf.h>
#include <machine/fbio.h>
#include <machine/autoconf.h>
#include <machine/pmap.h>
#include <machine/cg2reg.h>

#include "fbvar.h"

#define	CMSIZE 256

/* offset to and size of mapped part of frame buffer */
#define PLANEMAP_SIZE		0x100000
#define PIXELMAP_SIZE		0x100000
#define ROWOPMAP_SIZE		0x100000

#define	CTLREGS_OFF 		0x300000
#define	CTLREGS_SIZE		 0x10600

#define	CG2_MAPPED_OFFSET	(PLANEMAP_SIZE + PIXELMAP_SIZE)
#define	CG2_MAPPED_SIZE 	(CTLREGS_OFF + CTLREGS_SIZE)

/* per-display variables */
struct cg2_softc {
	struct	device sc_dev;		/* base device */
	struct	fbdevice sc_fb;		/* frame buffer device */
	int 	sc_phys;		/* display RAM (phys addr) */
	int 	sc_pmtype;		/* pmap type bits */
	struct	cg2fb *sc_ctlreg;	/* control registers */
};

/* autoconfiguration driver */
static void	cg2attach(struct device *, struct device *, void *);
static int	cg2match(struct device *, void *, void *);

struct cfattach cgtwo_ca = {
	sizeof(struct cg2_softc), cg2match, cg2attach
};

struct cfdriver cgtwo_cd = {
	NULL, "cgtwo", DV_DULL
};

static int	cg2gattr(struct fbdevice *, struct fbgattr *);
static int	cg2gvideo(struct fbdevice *, int *);
static int	cg2svideo(struct fbdevice *, int *);
static int	cg2getcmap(struct fbdevice *, struct fbcmap *);
static int	cg2putcmap(struct fbdevice *, struct fbcmap *);

static struct fbdriver cg2fbdriver = {
	cg2open, cg2close, cg2mmap, cg2gattr,
	cg2gvideo, cg2svideo,
	cg2getcmap, cg2putcmap
};

static int	cg2intr(void *);

/*
 * Match a cg2.
 */
static int
cg2match(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct confargs *ca = args;
	int x;

	if (ca->ca_paddr == -1)
		return (0);

	if (ca->ca_bustype != BUS_VME16)
		return (0);

	x = bus_peek(ca->ca_bustype, ca->ca_paddr + CTLREGS_OFF, 1);
	if (x == -1)
		return (0);

	/* XXX */
	/* printf("cg2: id=0x%x\n", x); */

	return (1);
}

/*
 * Attach a display.  We need to notice if it is the console, too.
 */
static void
cg2attach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct cg2_softc *sc = (struct cg2_softc *)self;
	struct fbdevice *fb = &sc->sc_fb;
	struct confargs *ca = args;
	struct fbtype *fbt;

	sc->sc_phys = ca->ca_paddr;
	sc->sc_pmtype = PMAP_NC | PMAP_VME16;

	sc->sc_ctlreg = (struct cg2fb *) bus_mapin(ca->ca_bustype,
			ca->ca_paddr + CTLREGS_OFF, CTLREGS_SIZE);

	isr_add_vectored(cg2intr, (void *)sc,
					 ca->ca_intpri, ca->ca_intvec);

	/*
	 * XXX - Initialize?  Determine type?
	 */
	sc->sc_ctlreg->intrptvec.reg = ca->ca_intvec;
	sc->sc_ctlreg->status.word = 1;

	fb->fb_driver = &cg2fbdriver;
	fb->fb_private = sc;
	fb->fb_name = sc->sc_dev.dv_xname;

	fbt = &fb->fb_fbtype;
	fbt->fb_type = FBTYPE_SUN2COLOR;
	fbt->fb_depth = 8;
	fbt->fb_cmsize = CMSIZE;

	fbt->fb_width = 1152;
	fbt->fb_height = 900;
	fbt->fb_size = CG2_MAPPED_SIZE;

	printf(" (%dx%d)\n", fbt->fb_width, fbt->fb_height);
	fb_attach(fb, 2);
}

int
cg2open(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{
	int unit = minor(dev);

	if (unit >= cgtwo_cd.cd_ndevs || cgtwo_cd.cd_devs[unit] == NULL)
		return (ENXIO);
	return (0);
}

int
cg2close(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{

	return (0);
}

int
cg2ioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct cg2_softc *sc = cgtwo_cd.cd_devs[minor(dev)];

	return (fbioctlfb(&sc->sc_fb, cmd, data));
}

/*
 * Return the address that would map the given device at the given
 * offset, allowing for the given protection, or return -1 for error.
 */
paddr_t
cg2mmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	struct cg2_softc *sc = cgtwo_cd.cd_devs[minor(dev)];

	if (off & PGOFSET)
		panic("cg2mmap");

	if ((unsigned)off >= CG2_MAPPED_SIZE)
		return (-1);

	/*
	 * I turned on PMAP_NC here to disable the cache as I was
	 * getting horribly broken behaviour with it on.
	 */
	return ((sc->sc_phys + off) | sc->sc_pmtype);
}

/*
 * Internal ioctl functions.
 */

/* FBIOGATTR: */
static int
cg2gattr(fb, fba)
	struct fbdevice *fb;
	struct fbgattr *fba;
{

	fba->real_type = fb->fb_fbtype.fb_type;
	fba->owner = 0;		/* XXX - TIOCCONS stuff? */
	fba->fbtype = fb->fb_fbtype;
	fba->sattr.flags = 0;
	fba->sattr.emu_type = fb->fb_fbtype.fb_type;
	fba->sattr.dev_specific[0] = -1;
	fba->emu_types[0] = fb->fb_fbtype.fb_type;
	fba->emu_types[1] = -1;
	return (0);
}

/* FBIOGVIDEO: */
static int
cg2gvideo(fb, on)
	struct fbdevice *fb;
	int *on;
{
	struct cg2_softc *sc = fb->fb_private;

	*on = sc->sc_ctlreg->status.reg.video_enab;
	return (0);
}

/* FBIOSVIDEO: */
static int cg2svideo(fb, on)
	struct fbdevice *fb;
	int *on;
{
	struct cg2_softc *sc = fb->fb_private;

	sc->sc_ctlreg->status.reg.video_enab = (*on) & 1;

	return (0);
}

/* FBIOGETCMAP: */
static int
cg2getcmap(fb, cmap)
	struct fbdevice *fb;
	struct fbcmap *cmap;
{
	struct cg2_softc *sc = fb->fb_private;
	u_char red[CMSIZE], green[CMSIZE], blue[CMSIZE];
	int error;
	u_int start, count, ecount;
	register u_int i;
	register u_short *p;

	start = cmap->index;
	count = cmap->count;
	ecount = start + count;
	if (start >= CMSIZE || count > CMSIZE - start)
		return (EINVAL);

	/* XXX - Wait for retrace? */

	/* Copy hardware to local arrays. */
	p = &sc->sc_ctlreg->redmap[start];
	for (i = start; i < ecount; i++)
		red[i] = *p++;
	p = &sc->sc_ctlreg->greenmap[start];
	for (i = start; i < ecount; i++)
		green[i] = *p++;
	p = &sc->sc_ctlreg->bluemap[start];
	for (i = start; i < ecount; i++)
		blue[i] = *p++;

	/* Copy local arrays to user space. */
	if ((error = copyout(red + start, cmap->red, count)) != 0)
		return (error);
	if ((error = copyout(green + start, cmap->green, count)) != 0)
		return (error);
	if ((error = copyout(blue + start, cmap->blue, count)) != 0)
		return (error);

	return (0);
}

/* FBIOPUTCMAP: */
static int
cg2putcmap(fb, cmap)
	struct fbdevice *fb;
	struct fbcmap *cmap;
{
	struct cg2_softc *sc = fb->fb_private;
	u_char red[CMSIZE], green[CMSIZE], blue[CMSIZE];
	int error;
	u_int start, count, ecount;
	register u_int i;
	register u_short *p;

	start = cmap->index;
	count = cmap->count;
	ecount = start + count;
	if (start >= CMSIZE || count > CMSIZE - start)
		return (EINVAL);

	/* Copy from user space to local arrays. */
	if ((error = copyin(cmap->red, red + start, count)) != 0)
		return (error);
	if ((error = copyin(cmap->green, green + start, count)) != 0)
		return (error);
	if ((error = copyin(cmap->blue, blue + start, count)) != 0)
		return (error);

	/* XXX - Wait for retrace? */

	/* Copy from local arrays to hardware. */
	p = &sc->sc_ctlreg->redmap[start];
	for (i = start; i < ecount; i++)
		*p++ = red[i];
	p = &sc->sc_ctlreg->greenmap[start];
	for (i = start; i < ecount; i++)
		*p++ = green[i];
	p = &sc->sc_ctlreg->bluemap[start];
	for (i = start; i < ecount; i++)
		*p++ = blue[i];

	return (0);

}

static int
cg2intr(vsc)
	void *vsc;
{
	struct cg2_softc *sc = vsc;

	/* XXX - Just disable interrupts for now. */
	sc->sc_ctlreg->status.reg.inten = 0;

	printf("cg2intr\n");
	return (1);
}
@


1.12
log
@Do correct bounds checking in get/set/put cmap routines.  A few of
these check were already OK but have been modified for consistency.
Problem found by Silvio Cesare.
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.11 2002/03/14 03:16:01 millert Exp $	*/
@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.10 2002/03/14 01:26:46 millert Exp $	*/
d318 1
a318 1
	if (start >= CMSIZE || ecount > CMSIZE)
d361 1
a361 1
	if (start >= CMSIZE || ecount > CMSIZE)
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.9 2001/11/06 19:53:16 miod Exp $	*/
d121 1
a121 1
static int	cg2intr(void*);
d169 1
a169 1
	isr_add_vectored(cg2intr, (void*)sc,
@


1.9
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.8 2001/11/01 12:13:46 art Exp $	*/
d98 2
a99 2
static void	cg2attach __P((struct device *, struct device *, void *));
static int	cg2match __P((struct device *, void *, void *));
d109 5
a113 5
static int	cg2gattr __P((struct fbdevice *, struct fbgattr *));
static int	cg2gvideo __P((struct fbdevice *, int *));
static int	cg2svideo __P((struct fbdevice *, int *));
static int	cg2getcmap __P((struct fbdevice *, struct fbcmap *));
static int	cg2putcmap __P((struct fbdevice *, struct fbcmap *));
d121 1
a121 1
static int	cg2intr __P((void*));
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.9 2001/11/06 19:53:16 miod Exp $	*/
d98 2
a99 2
static void	cg2attach(struct device *, struct device *, void *);
static int	cg2match(struct device *, void *, void *);
d109 5
a113 5
static int	cg2gattr(struct fbdevice *, struct fbgattr *);
static int	cg2gvideo(struct fbdevice *, int *);
static int	cg2svideo(struct fbdevice *, int *);
static int	cg2getcmap(struct fbdevice *, struct fbcmap *);
static int	cg2putcmap(struct fbdevice *, struct fbcmap *);
d121 1
a121 1
static int	cg2intr(void *);
d169 1
a169 1
	isr_add_vectored(cg2intr, (void *)sc,
@


1.9.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.9.2.1 2002/06/11 03:39:01 art Exp $	*/
d318 1
a318 1
	if (start >= CMSIZE || count > CMSIZE - start)
d361 1
a361 1
	if (start >= CMSIZE || count > CMSIZE - start)
@


1.9.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.9.2.2 2002/10/29 00:28:12 art Exp $	*/
@


1.8
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.7 2001/09/16 00:42:44 millert Exp $	*/
d65 1
a65 1
#include <vm/vm.h>
@


1.7
log
@Add some missing lengths checks when passing data from userland to
kernel.  From based on NetBSD patches.
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.6 1997/01/16 04:03:43 kstailey Exp $	*/
d235 1
a235 1
int
d238 2
a239 1
	int off, prot;
@


1.6
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d309 2
a310 1
	int error, start, count, ecount;
d352 2
a353 1
	int error, start, count, ecount;
@


1.6.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.6 1997/01/16 04:03:43 kstailey Exp $	*/
d309 1
a309 2
	int error;
	u_int start, count, ecount;
d351 1
a351 2
	int error;
	u_int start, count, ecount;
@


1.6.14.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
#include <uvm/uvm_extern.h>
d235 1
a235 1
paddr_t
d238 1
a238 2
	off_t off;
	int prot;
@


1.6.14.3
log
@Merge in -current from about a week ago
@
text
@d98 2
a99 2
static void	cg2attach(struct device *, struct device *, void *);
static int	cg2match(struct device *, void *, void *);
d109 5
a113 5
static int	cg2gattr(struct fbdevice *, struct fbgattr *);
static int	cg2gvideo(struct fbdevice *, int *);
static int	cg2svideo(struct fbdevice *, int *);
static int	cg2getcmap(struct fbdevice *, struct fbcmap *);
static int	cg2putcmap(struct fbdevice *, struct fbcmap *);
d121 1
a121 1
static int	cg2intr(void *);
d169 1
a169 1
	isr_add_vectored(cg2intr, (void *)sc,
@


1.6.14.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.6.14.3 2002/03/28 11:26:45 niklas Exp $	*/
@


1.6.20.1
log
@MFS (from millert):
Add some missing lengths checks when passing data from userland to
kernel.  From based on NetBSD patches.
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.6 1997/01/16 04:03:43 kstailey Exp $	*/
d309 1
a309 2
	int error;
	u_int start, count, ecount;
d351 1
a351 2
	int error;
	u_int start, count, ecount;
@


1.6.18.1
log
@MFC:
Add some missing lengths checks when passing data from userland to the
kernel. From NetBSD via millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cg2.c,v 1.7 2001/09/16 00:42:44 millert Exp $	*/
d309 1
a309 2
	int error;
	u_int start, count, ecount;
d351 1
a351 2
	int error;
	u_int start, count, ecount;
@


1.5
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d57 1
d63 1
d67 1
d109 2
a110 5
/* frame buffer generic driver */
int cg2open(), cg2close(), cg2mmap();

static int  cg2gattr __P((struct fbdevice *, struct fbgattr *));
static int  cg2gvideo __P((struct fbdevice *, int *));
d118 2
a119 1
	cg2getcmap, cg2putcmap };
d121 1
a121 2
static void cg2loadcmap __P((struct cg2_softc *, int, int));
static int cg2intr __P((void*));
a161 1
	int i, ramsize, pa;
a240 1
	int realoff;
d260 2
a261 1
static int  cg2gattr(fb, fba)
d278 2
a279 1
static int  cg2gvideo(fb, on)
d302 2
a303 1
static int cg2getcmap(fb, cmap)
d344 2
a345 1
static int cg2putcmap(fb, cmap)
@


1.4
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: cg2.c,v 1.8 1996/12/17 21:10:38 gwr Exp $	*/
a55 2
#include <sys/systm.h>
#include <sys/conf.h>
a59 1
#include <sys/proc.h>
a70 2
cdev_decl(cg2);

d105 8
a112 5
static int  cg2gattr __P((struct fbdevice *,  void *));
static int  cg2gvideo __P((struct fbdevice *, void *));
static int	cg2svideo __P((struct fbdevice *, void *));
static int	cg2getcmap __P((struct fbdevice *, void *));
static int	cg2putcmap __P((struct fbdevice *, void *));
d119 1
d161 1
d241 1
d261 1
a261 1
static int  cg2gattr(fb, data)
d263 1
a263 1
	void *data;
a264 1
	struct fbgattr *fba = data;
d278 1
a278 1
static int  cg2gvideo(fb, data)
d280 1
a280 1
	void *data;
a281 1
	int *on = data;
d289 1
a289 1
static int cg2svideo(fb, data)
d291 1
a291 1
	void *data;
a292 1
	int *on = data;
d301 1
a301 1
static int cg2getcmap(fb, data)
d303 1
a303 1
	void *data;
a304 1
	struct fbcmap *cmap = data;
d342 1
a342 1
static int cg2putcmap(fb, data)
d344 1
a344 1
	void *data;
a345 1
	struct fbcmap *cmap = data;
@


1.3
log
@sync with NetBSD -- copyright changes only
@
text
@d1 1
a1 1
/*	$NetBSD: cg2.c,v 1.7 1996/10/13 03:47:26 christos Exp $	*/
d56 2
d62 1
d74 2
d110 5
a114 8
/* frame buffer generic driver */
int cg2open(), cg2close(), cg2mmap();

static int  cg2gattr __P((struct fbdevice *, struct fbgattr *));
static int  cg2gvideo __P((struct fbdevice *, int *));
static int	cg2svideo __P((struct fbdevice *, int *));
static int	cg2getcmap __P((struct fbdevice *, struct fbcmap *));
static int	cg2putcmap __P((struct fbdevice *, struct fbcmap *));
a120 1
static void cg2loadcmap __P((struct cg2_softc *, int, int));
a161 1
	int i, ramsize, pa;
a240 1
	int realoff;
d260 1
a260 1
static int  cg2gattr(fb, fba)
d262 1
a262 1
	struct fbgattr *fba;
d264 1
d278 1
a278 1
static int  cg2gvideo(fb, on)
d280 1
a280 1
	int *on;
d282 1
d290 1
a290 1
static int cg2svideo(fb, on)
d292 1
a292 1
	int *on;
d294 1
d303 1
a303 1
static int cg2getcmap(fb, cmap)
d305 1
a305 1
	struct fbcmap *cmap;
d307 1
d345 1
a345 1
static int cg2putcmap(fb, cmap)
d347 1
a347 1
	struct fbcmap *cmap;
d349 1
@


1.2
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: cg2.c,v 1.5 1996/03/17 02:03:43 thorpej Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cg2.c,v 1.4 1995/04/10 07:05:57 mycroft Exp $	*/
d97 7
a103 3
struct cfdriver cgtwocd = {
	NULL, "cgtwo", cg2match, cg2attach,
	DV_DULL, sizeof(struct cg2_softc) };
d203 1
a203 1
	if (unit >= cgtwocd.cd_ndevs || cgtwocd.cd_devs[unit] == NULL)
d226 1
a226 1
	struct cg2_softc *sc = cgtwocd.cd_devs[minor(dev)];
d240 1
a240 1
	struct cg2_softc *sc = cgtwocd.cd_devs[minor(dev)];
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
