head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.16
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.14
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.20.19.34.40;	author miod;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2001.04.17.04.30.49;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.06.15.42.49;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	97.01.16.04.03.49;	author kstailey;	state Exp;
branches
	1.7.14.1;
next	1.6;

1.6
date	96.11.23.21.46.22;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.07.54.55;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.10.11.23.06.04;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.16.02.31;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.01.31.06.41.11;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.52;	author deraadt;	state Exp;
branches;
next	;

1.7.14.1
date	2001.05.14.21.37.27;	author niklas;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2001.10.31.03.08.00;	author nate;	state Exp;
branches;
next	1.7.14.3;

1.7.14.3
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.7.14.4;

1.7.14.4
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.10.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.12
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: kd.c,v 1.11 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: kd.c,v 1.21 1996/11/20 18:56:55 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Keyboard/Display device.
 *
 * This driver exists simply to provide a tty device that
 * the indirect console driver can point to.
 * The kbd driver sends its input here.
 * Output goes to the screen via PROM printf.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/file.h>
#include <sys/conf.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/conf.h>
#include <machine/machdep.h>
#include <machine/mon.h>
#include <machine/psl.h>

#include <dev/cons.h>
#include <dev/sun/kbd_xlate.h>

#include "zs_cons.h"

#define	KDMAJOR 1
#define PUT_WSIZE	64

struct kd_softc {
	struct	device kd_dev;		/* required first: base device */
	struct  tty *kd_tty;
};

/*
 * There is no point in pretending there might be
 * more than one keyboard/display device.
 */
struct kd_softc kd_softc;

static int kdparam(struct tty *, struct termios *);
static void kdstart(struct tty *);

int kd_is_console;

/*
 * This is called by kbd_attach()
 * XXX - Make this a proper child of kbd?
 */
void
kd_init(unit)
	int unit;
{
	struct kd_softc *kd;
	struct tty *tp;

	if (unit != 0)
		return;
	kd = &kd_softc; 	/* XXX */

	tp = ttymalloc();
	tp->t_oproc = kdstart;
	tp->t_param = kdparam;
	tp->t_dev = makedev(KDMAJOR, unit);
	tty_attach(tp);

	kd->kd_tty = tp;

	return;
}

struct tty *
kdtty(dev)
	dev_t dev;
{
	struct kd_softc *kd;

	kd = &kd_softc; 	/* XXX */
	return (kd->kd_tty);
}

int
kdopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	struct kd_softc *kd;
	int error, s, unit;
	struct tty *tp;

	unit = minor(dev);
	if (unit != 0)
		return ENXIO;
	kd = &kd_softc; 	/* XXX */
	tp = kd->kd_tty;

	if ((error = kbd_iopen(unit)) != 0) {
#ifdef	DIAGNOSTIC
		printf("kd: kbd_iopen, error=%d\n", error);
#endif
		return (error);
	}

	/* It's simpler to do this up here. */
	if (((tp->t_state & (TS_ISOPEN | TS_XCLUDE))
	     ==             (TS_ISOPEN | TS_XCLUDE))
	    && (p->p_ucred->cr_uid != 0) )
	{
		return (EBUSY);
	}

	s = spltty();

	if ((tp->t_state & TS_ISOPEN) == 0) {
		/* First open. */
		ttychars(tp);
		tp->t_iflag = TTYDEF_IFLAG;
		tp->t_oflag = TTYDEF_OFLAG;
		tp->t_cflag = TTYDEF_CFLAG;
		tp->t_lflag = TTYDEF_LFLAG;
		tp->t_ispeed = tp->t_ospeed = TTYDEF_SPEED;
		(void) kdparam(tp, &tp->t_termios);
		ttsetwater(tp);
		/* Flush pending input?  Clear translator? */
		/* This (pseudo)device always has SOFTCAR */
		tp->t_state |= TS_CARR_ON;
	}

	splx(s);

	return ((*linesw[tp->t_line].l_open)(dev, tp));
}

int
kdclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	struct kd_softc *kd;
	struct tty *tp;

	kd = &kd_softc; 	/* XXX */
	tp = kd->kd_tty;

	/* XXX This is for cons.c. */
	if ((tp->t_state & TS_ISOPEN) == 0)
		return 0;

	(*linesw[tp->t_line].l_close)(tp, flag);
	ttyclose(tp);
	return (0);
}

int
kdread(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	struct kd_softc *kd;
	struct tty *tp;

	kd = &kd_softc; 	/* XXX */
	tp = kd->kd_tty;

	return ((*linesw[tp->t_line].l_read)(tp, uio, flag));
}

int
kdwrite(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	struct kd_softc *kd;
	struct tty *tp;

	kd = &kd_softc; 	/* XXX */
	tp = kd->kd_tty;

	return ((*linesw[tp->t_line].l_write)(tp, uio, flag));
}

int
kdioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	struct kd_softc *kd;
	struct tty *tp;
	int error;

	kd = &kd_softc; 	/* XXX */
	tp = kd->kd_tty;

	error = (*linesw[tp->t_line].l_ioctl)(tp, cmd, data, flag, p);
	if (error >= 0)
		return error;
	error = ttioctl(tp, cmd, data, flag, p);
	if (error >= 0)
		return error;

	/* Handle any ioctl commands specific to kbd/display. */
	/* XXX - Send KB* ioctls to kbd module? */
	/* XXX - Send FB* ioctls to fb module?  */

	return ENOTTY;
}


static int
kdparam(tp, t)
	struct tty *tp;
	struct termios *t;
{
	/* XXX - These are ignored... */
	tp->t_ispeed = t->c_ispeed;
	tp->t_ospeed = t->c_ospeed;
	tp->t_cflag = t->c_cflag;
	return (0);
}


int
kdstop(tp, flag)
	struct tty *tp;
	int flag;
{
	return (0);
}

static void kd_later(void *);
static void kd_putfb(struct tty *);
static struct timeout kd_timeout;

void
kdstart(tp)
	struct tty *tp;
{
	struct clist *cl;
	register int s;

	s = spltty();
	if (tp->t_state & (TS_BUSY|TS_TTSTOP|TS_TIMEOUT))
		goto out;

	cl = &tp->t_outq;
	if (cl->c_cc) {
		if (kd_is_console) {
			tp->t_state |= TS_BUSY;
			if ((s & PSL_IPL) == 0) {
				/* called at level zero - update screen now. */
				(void) spllowersoftclock();
				kd_putfb(tp);
				(void) spltty();
				tp->t_state &= ~TS_BUSY;
			} else {
				/* called at interrupt level - do it later */
				timeout_set(&kd_timeout, kd_later, tp);
				timeout_add(&kd_timeout, 0);
			}
		} else {
			/*
			 * This driver uses the PROM for writing the screen,
			 * and that only works if this is the console device.
			 * If this is not the console, just flush the output.
			 * Sorry.  (In that case, use xdm instead of getty.)
			 */
			ndflush(cl, cl->c_cc);
		}
	}
	if (cl->c_cc <= tp->t_lowat) {
		if (tp->t_state & TS_ASLEEP) {
			tp->t_state &= ~TS_ASLEEP;
			wakeup((caddr_t)cl);
		}
		selwakeup(&tp->t_wsel);
	}
out:
	splx(s);
}

/*
 * Timeout function to do delayed writes to the screen.
 * Called at splsoftclock when requested by kdstart.
 */
static void
kd_later(tpaddr)
	void *tpaddr;
{
	struct tty *tp = tpaddr;
	register int s;

	kd_putfb(tp);

	s = spltty();
	tp->t_state &= ~TS_BUSY;
	(*linesw[tp->t_line].l_start)(tp);
	splx(s);
}

/*
 * Put text on the screen using the PROM monitor.
 * This can take a while, so to avoid missing
 * interrupts, this is called at splsoftclock.
 */
static void kd_putfb(tp)
	struct tty *tp;
{
	char buf[PUT_WSIZE];
	struct clist *cl = &tp->t_outq;
	char *p, *end;
	int len;

	while ((len = q_to_b(cl, buf, PUT_WSIZE-1)) > 0) {
		/* PROM will barf if high bits are set. */
		p = buf;
		end = buf + len;
		while (p < end)
			*p++ &= 0x7f;
		(romVectorPtr->fbWriteStr)(buf, len);
	}
}

/*
 * Our "interrupt" routine for input. This is called by
 * the keyboard driver (dev/sun/kbd.c) at spltty.
 */
void
kd_input(c)
	int c;
{
	struct kd_softc *kd = &kd_softc;
	struct tty *tp;

	/* XXX: Make sure the device is open. */
	tp = kd->kd_tty;
	if (tp == NULL)
		return;
    if ((tp->t_state & TS_ISOPEN) == 0)
		return;

	(*linesw[tp->t_line].l_rint)(c, tp);
}


/****************************************************************
 * kd console support
 ****************************************************************/

extern void *zs_conschan;

/* The debugger gets its own key translation state. */
static struct kbd_state kdcn_state;

cons_decl(kd);

void
kdcninit(cn)
	struct consdev *cn;
{
	struct kbd_state *ks = &kdcn_state;

	mon_printf("console on kd0 (keyboard/display)\n");

	/* This prepares kbd_translate() */
	ks->kbd_id = KBD_MIN_TYPE;
	kbd_xlate_init(ks);

	/* Indicate that it is OK to use the PROM fbwrite */
	kd_is_console = 1;
}

int
kdcngetc(dev)
	dev_t dev;
{
	struct kbd_state *ks = &kdcn_state;
	int code, class, data, keysym;

	for (;;) {
		code = zs_getc(zs_conschan);
		keysym = kbd_code_to_keysym(ks, code);
		class = KEYSYM_CLASS(keysym);

		switch (class) {
		case KEYSYM_ASCII:
			goto out;

		case KEYSYM_CLRMOD:
		case KEYSYM_SETMOD:
			data = (keysym & 0x1F);
			/* Only allow ctrl or shift. */
			if (data > KBMOD_SHIFT_R)
				break;
			data = 1 << data;
			if (class == KEYSYM_SETMOD)
				ks->kbd_modbits |= data;
			else
				ks->kbd_modbits &= ~data;
			break;

		case KEYSYM_ALL_UP:
			/* No toggle keys here. */
			ks->kbd_modbits = 0;
			break;

		default:	/* ignore all other keysyms */
			break;
		}
	}
out:
	return (keysym);
}

void
kdcnputc(dev, c)
	dev_t dev;
	int c;
{
	(romVectorPtr->fbWriteChar)(c & 0x7f);
}

void kdcnpollc(dev, on)
	dev_t dev;
	int on;
{
	struct kbd_state *ks = &kdcn_state;

	if (on) {
		/* Entering debugger. */
		fb_unblank();
		/* Clear shift keys too. */
		ks->kbd_modbits = 0;
	} else {
		/* Resuming kernel. */
	}
}

struct consdev consdev_kd = {
	nullcnprobe,
	kdcninit,
	kdcngetc,
	kdcnputc,
	kdcnpollc,
	NULL,
	makedev(KDMAJOR, 0),
	CN_INTERNAL
};

@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.10 2001/08/20 19:34:40 miod Exp $	*/
@


1.10
log
@Missed one timeout conversion.
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.9 2001/04/17 04:30:49 aaron Exp $	*/
d279 1
a279 1
static void kd_later(void*);
@


1.10.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.10 2001/08/20 19:34:40 miod Exp $	*/
d279 1
a279 1
static void kd_later(void *);
@


1.10.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.10.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.9
log
@Implement cnbell(), an optional entrypoint that rings the console bell; from
NetBSD. deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.8 2000/07/06 15:42:49 ho Exp $	*/
d281 1
d306 2
a307 1
				timeout(kd_later, (void*)tp, 0);
@


1.8
log
@Change splsoftclock() call to spllowersoftclock() to conform with other
code and keep old behaviour. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.7 1997/01/16 04:03:49 kstailey Exp $	*/
d491 1
@


1.7
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d299 1
a299 1
				(void) splsoftclock();
@


1.7.14.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.9 2001/04/17 04:30:49 aaron Exp $	*/
d299 1
a299 1
				(void) spllowersoftclock();
a490 1
	NULL,
@


1.7.14.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.7.14.1 2001/05/14 21:37:27 niklas Exp $	*/
a280 1
static struct timeout kd_timeout;
d305 1
a305 2
				timeout_set(&kd_timeout, kd_later, tp);
				timeout_add(&kd_timeout, 0);
@


1.7.14.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d279 1
a279 1
static void kd_later(void *);
@


1.7.14.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: kd.c,v 1.7.14.3 2002/03/28 11:26:45 niklas Exp $	*/
@


1.6
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
d59 2
d67 2
d89 1
a89 1
 * This is called by kbd_attach() 
d133 1
a133 1
	
d267 1
a267 1
	return 0;
d271 1
a271 1
void
d276 1
a276 1

a396 3
extern int zs_getc();
extern void nullcnprobe();
cons_decl(kd);
d401 2
a468 1
extern void fb_unblank();
@


1.5
log
@sync with NetBSD
@
text
@a66 2
cdev_decl(kd);	/* open, close, read, write, ioctl, stop, ... */

@


1.4
log
@sync + our changes
@
text
@d1 1
a1 1
/*	$NetBSD: kd.c,v 1.17 1996/06/15 14:58:02 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1994, 1995 Gordon W. Ross
d7 3
d18 1
a18 3
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
d20 5
a24 1
 *      This product includes software developed by Gordon Ross
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d268 1
a268 1
int
@


1.3
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: kd.c,v 1.16 1996/04/26 18:36:54 gwr Exp $	*/
d93 1
a94 2

	kd->kd_tty = tp;
d98 3
d334 1
a334 1
		(*linesw[tp->t_line].l_start)(tp);
@


1.2
log
@sync with netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: kd.c,v 1.14 1996/01/24 22:40:20 gwr Exp $	*/
a331 1
	if (tp->t_line)
a332 2
	else
		kdstart(tp);
d360 2
a361 1
 * Our "interrupt" routine for input.
d377 1
a377 1
	ttyinput(c, kd->kd_tty);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: kd.c,v 1.13 1995/04/26 23:20:15 gwr Exp $	*/
d56 1
d58 9
a66 1
#define BURST	64
d72 1
a72 7
struct tty *kd_tty[1];

int kdopen(dev_t, int, int, struct proc *);
int kdclose(dev_t, int, int, struct proc *);
int kdread(dev_t, struct uio *, int);
int kdwrite(dev_t, struct uio *, int);
int kdioctl(dev_t, int, caddr_t, int, struct proc *);
d79 4
a82 1
/* This is called by kbd_serial() like a pseudo-device. */
d84 2
a85 2
kd_attach(n)
	int n;
d87 7
a93 1
	kd_tty[0] = ttymalloc();
d95 6
a100 2
	/* Tell keyboard module where to send read data. */
	kbd_ascii(kd_tty[0]);
d107 4
a110 1
	return kd_tty[0];
d119 2
a120 1
	int error, unit;
d124 1
a124 4
	if (unit) return ENXIO;

	tp = kd_tty[unit];
	if (tp == NULL)
d126 2
d129 1
a129 1
	if ((error = kbd_iopen()) != 0) {
d136 10
a145 3
	tp->t_oproc = kdstart;
	tp->t_param = kdparam;
	tp->t_dev = dev;
d147 1
a147 1
		tp->t_state |= TS_WOPEN;
d154 1
a154 1
		kdparam(tp, &tp->t_termios);
d156 6
a161 3
	} else if (tp->t_state & TS_XCLUDE && p->p_ucred->cr_uid != 0)
		return EBUSY;
	tp->t_state |= TS_CARR_ON;
d172 9
a180 2
	int unit = minor(dev);
	struct tty *tp = kd_tty[unit];
d193 5
a197 2
	int unit = minor(dev);
	struct tty *tp = kd_tty[unit];
d208 5
a212 2
	int unit = minor(dev);
	struct tty *tp = kd_tty[unit];
a217 8
kdstop(tp, flag)
	struct tty *tp;
	int flag;
{

}

int
d220 1
a220 1
	int cmd;
d225 2
d228 3
a230 2
	int unit = minor(dev);
	struct tty *tp = kd_tty[unit];
d246 22
d347 1
a347 1
	char buf[BURST];
d352 1
a352 1
	while ((len = q_to_b(cl, buf, BURST-1)) > 0) {
d362 16
d379 1
a379 10
static int
kdparam(tp, t)
	struct tty *tp;
	struct termios *t;
{
	/* XXX - These are ignored... */
	tp->t_ispeed = t->c_ispeed;
	tp->t_ospeed = t->c_ospeed;
	tp->t_cflag = t->c_cflag;
	return 0;
d383 1
a383 1
/*
d385 1
a385 1
 */
d387 4
a390 1
extern int zscnprobe_kbd(), zscngetc(), kbd_translate();
d392 2
a393 4
kdcnprobe(cp)
	struct consdev *cp;
{
	int maj;
d395 3
a397 12
	/* locate the major number */
	for (maj = 0; maj < nchrdev; maj++)
		if (cdevsw[maj].d_open == (void*)kdopen)
			break;

	/* initialize required fields */
	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = zscnprobe_kbd();
}

kdcninit(cp)
	struct consdev *cp;
d399 1
d401 1
a401 2
	/* This prepares zscngetc() */
	zs_set_conschan(1, 0);
d404 2
a405 1
	kbd_init_tables();
a408 2

	mon_printf("console on kd0 (keyboard/display)\n");
d411 1
d415 24
a438 1
	int c;
d440 4
a443 4
	do {
		c = zscngetc(0);
		c = kbd_translate(c);
	} while (c == -1);
d445 6
a450 1
	return (c);
d453 1
d466 4
a469 1
	if (on)
d471 5
d477 11
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
