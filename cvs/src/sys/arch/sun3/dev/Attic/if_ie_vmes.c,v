head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.8
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.28.21.59.35;	author miod;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	97.01.16.04.03.48;	author kstailey;	state Exp;
branches
	1.5.14.1;
next	1.4;

1.4
date	97.01.07.23.36.09;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.31.06.12.45;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.08.25.49;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.16.02.23;	author mickey;	state Exp;
branches;
next	;

1.5.14.1
date	2001.05.14.21.37.26;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.5.14.3;

1.5.14.3
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.6.8.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: if_ie_vmes.c,v 1.7 2002/03/14 01:26:46 millert Exp $	*/
/*	$NetBSD: if_ie_vmes.c,v 1.5 1996/11/20 18:56:51 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-dependent glue for the Intel Ethernet (ie) driver.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <net/if.h>

#ifdef INET
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/in_var.h>
#include <netinet/ip.h>
#include <netinet/if_ether.h>
#endif

#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <machine/dvma.h>
#include <machine/idprom.h>
#include <machine/vmparam.h>

#include <sparc/dev/i82586.h>
#include <sun3/dev/if_iereg.h>
#include <sun3/dev/if_ievar.h>

static void ie_vmereset(struct ie_softc *);
static void ie_vmeattend(struct ie_softc *);
static void ie_vmerun(struct ie_softc *);

/*
 * zero/copy functions: OBIO can use the normal functions, but VME
 *    must do only byte or half-word (16 bit) accesses...
 */
static void wcopy(const void *, void *, u_int);
static void wzero(void *, u_int);

/*
 * New-style autoconfig attachment
 */

static int  ie_vmes_match(struct device *, void *, void *);
static void ie_vmes_attach(struct device *, struct device *, void *);

struct cfattach ie_vmes_ca = {
	sizeof(struct ie_softc), ie_vmes_match, ie_vmes_attach
};


static int
ie_vmes_match(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct confargs *ca = args;
	int x;

#ifdef	DIAGNOSTIC
	if (ca->ca_bustype != BUS_VME16) {
		printf("ie_vmes_match: bustype %d?\n", ca->ca_bustype);
		return (0);
	}
#endif

	/* No default VME address. */
	if (ca->ca_paddr == -1)
		return(0);

	/* Default interrupt level. */
	if (ca->ca_intpri == -1)
		ca->ca_intpri = 3;

	x = bus_peek(ca->ca_bustype, ca->ca_paddr, 2);
	return (x != -1);
}

/*
 * *note*: we don't detect the difference between a VME3E and
 * a multibus/vme card.   if you want to use a 3E you'll have
 * to fix this.
 */
void
ie_vmes_attach(parent, self, args)
	struct device *parent;
	struct device *self;
	void *args;
{
	struct ie_softc *sc = (void *) self;
	struct confargs *ca = args;
	volatile struct ievme *iev;
	u_long  rampaddr;
	int     lcv, off;

	sc->hard_type = IE_VME;
	sc->reset_586 = ie_vmereset;
	sc->chan_attn = ie_vmeattend;
	sc->run_586 = ie_vmerun;
	sc->sc_bcopy = wcopy;
	sc->sc_bzero = wzero;

	/*
	 * There is 64K of memory on the VME board.
	 * (determined by hardware - NOT configurable!)
	 */
	sc->sc_msize = 0x10000; /* MEMSIZE 64K */

	/* Map in the board control regs. */
	sc->sc_reg = bus_mapin(ca->ca_bustype, ca->ca_paddr,
						   sizeof(struct ievme));
	iev = (volatile struct ievme *) sc->sc_reg;

	/*
	 * Find and map in the board memory.
	 */
	/* top 12 bits */
	rampaddr = ca->ca_paddr & 0xfff00000;
	/* 4 more */
	rampaddr |= ((iev->status & IEVME_HADDR) << 16);
	sc->sc_maddr = bus_mapin(ca->ca_bustype, rampaddr, sc->sc_msize);

	/*
	 * On this hardware, the i82586 address is just
	 * masked to 16 bits, so sc_iobase == sc_maddr
	 */
	sc->sc_iobase = sc->sc_maddr;

	/*
	 * Set up on-board mapping registers for linear map.
	 */
	iev->pectrl |= IEVME_PARACK; /* clear to start */
	for (lcv = 0; lcv < IEVME_MAPSZ; lcv++)
		iev->pgmap[lcv] = IEVME_SBORDR | IEVME_OBMEM | lcv;
	(sc->sc_bzero)(sc->sc_maddr, sc->sc_msize);

	/*
	 * Set the System Configuration Pointer (SCP).
	 * Its location is system-dependent because the
	 * i82586 reads it from a fixed physical address.
	 * On this hardware, the i82586 address is just
	 * masked down to 16 bits, so the SCP is found
	 * at the end of the RAM on the VME board.
	 */
	off = IE_SCP_ADDR & 0xFFFF;
	sc->scp = (volatile void *) (sc->sc_maddr + off);

	/*
	 * The rest of ram is used for buffers, etc.
	 */
	sc->buf_area = sc->sc_maddr;
	sc->buf_area_sz = off;

	/* Set the ethernet address. */
	idprom_etheraddr(sc->sc_addr);

	/* Do machine-independent parts of attach. */
	ie_attach(sc);

	/* Install interrupt handler. */
	isr_add_vectored(ie_intr, (void *)sc,
		ca->ca_intpri, ca->ca_intvec);
}


/*
 * MULTIBUS/VME support
 */
void
ie_vmereset(sc)
	struct ie_softc *sc;
{
	volatile struct ievme *iev = (struct ievme *) sc->sc_reg;
	iev->status = IEVME_RESET;
	delay(100);		/* XXX could be shorter? */
	iev->status = 0;
}

void
ie_vmeattend(sc)
	struct ie_softc *sc;
{
	volatile struct ievme *iev = (struct ievme *) sc->sc_reg;

	iev->status |= IEVME_ATTEN;	/* flag! */
	iev->status &= ~IEVME_ATTEN;	/* down. */
}

void
ie_vmerun(sc)
	struct ie_softc *sc;
{
	volatile struct ievme *iev = (struct ievme *) sc->sc_reg;

	iev->status |= (IEVME_ONAIR | IEVME_IENAB | IEVME_PEINT);
}

/*
 * wcopy/wzero - like bcopy/bzero but largest access is 16-bits,
 * and also does byte swaps...
 * XXX - Would be nice to have asm versions in some library...
 */

static void
wzero(vb, l)
	void *vb;
	u_int l;
{
	u_char *b = vb;
	u_char *be = b + l;
	u_short *sp;

	if (l == 0)
		return;

	/* front, */
	if ((u_long)b & 1)
		*b++ = 0;

	/* back, */
	if (b != be && ((u_long)be & 1) != 0) {
		be--;
		*be = 0;
	}

	/* and middle. */
	sp = (u_short *)b;
	while (sp != (u_short *)be)
		*sp++ = 0;
}

static void
wcopy(vb1, vb2, l)
	const void *vb1;
	void *vb2;
	u_int l;
{
	const u_char *b1e, *b1 = vb1;
	u_char *b2 = vb2;
	u_short *sp;
	int bstore = 0;

	if (l == 0)
		return;

	/* front, */
	if ((u_long)b1 & 1) {
		*b2++ = *b1++;
		l--;
	}

	/* middle, */
	sp = (u_short *)b1;
	b1e = b1 + l;
	if (l & 1)
		b1e--;
	bstore = (u_long)b2 & 1;

	while (sp < (u_short *)b1e) {
		if (bstore) {
			b2[1] = *sp & 0xff;
			b2[0] = *sp >> 8;
		} else
			*((short *)b2) = *sp;
		sp++;
		b2 += 2;
	}

	/* and back. */
	if (l & 1)
		*b2 = *b1e;
}
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie_vmes.c,v 1.6 2000/08/28 21:59:35 miod Exp $	*/
@


1.6
log
@Use sparc version (more realistic settings) of header file for ie
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie_vmes.c,v 1.5 1997/01/16 04:03:48 kstailey Exp $	*/
d69 3
a71 3
static void ie_vmereset __P((struct ie_softc *));
static void ie_vmeattend __P((struct ie_softc *));
static void ie_vmerun __P((struct ie_softc *));
d77 2
a78 2
static void wcopy __P((const void *, void *, u_int));
static void wzero __P((void *, u_int));
d84 2
a85 2
static int  ie_vmes_match __P((struct device *, void *, void *));
static void ie_vmes_attach __P((struct device *, struct device *, void *));
@


1.6.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie_vmes.c,v 1.6 2000/08/28 21:59:35 miod Exp $	*/
d69 3
a71 3
static void ie_vmereset(struct ie_softc *);
static void ie_vmeattend(struct ie_softc *);
static void ie_vmerun(struct ie_softc *);
d77 2
a78 2
static void wcopy(const void *, void *, u_int);
static void wzero(void *, u_int);
d84 2
a85 2
static int  ie_vmes_match(struct device *, void *, void *);
static void ie_vmes_attach(struct device *, struct device *, void *);
@


1.6.8.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie_vmes.c,v 1.6.8.1 2002/06/11 03:39:01 art Exp $	*/
@


1.5
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 3
a67 3
#include "i82586.h"
#include "if_iereg.h"
#include "if_ievar.h"
@


1.5.14.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie_vmes.c,v 1.6 2000/08/28 21:59:35 miod Exp $	*/
d65 3
a67 3
#include <sparc/dev/i82586.h>
#include <sun3/dev/if_iereg.h>
#include <sun3/dev/if_ievar.h>
@


1.5.14.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 3
a71 3
static void ie_vmereset(struct ie_softc *);
static void ie_vmeattend(struct ie_softc *);
static void ie_vmerun(struct ie_softc *);
d77 2
a78 2
static void wcopy(const void *, void *, u_int);
static void wzero(void *, u_int);
d84 2
a85 2
static int  ie_vmes_match(struct device *, void *, void *);
static void ie_vmes_attach(struct device *, struct device *, void *);
@


1.5.14.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie_vmes.c,v 1.5.14.2 2002/03/28 11:26:45 niklas Exp $	*/
@


1.4
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
a61 1
#include <machine/isr.h>
d77 2
a78 1
static void wcopy(), wzero();
d98 1
a98 1
	int x, sz;
d209 1
a209 1
void 
d219 1
a219 1
void 
d229 1
a229 1
void 
@


1.3
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: if_ie_vmes.c,v 1.6 1996/12/17 21:10:46 gwr Exp $	*/
d61 1
d77 1
a77 3
static void wcopy __P((const void *vb1, void *vb2, u_int l));
static void wzero __P((void *vb, u_int l));

a95 1
	struct cfdata *cf = vcf;
d97 1
a97 1
	int x;
@


1.2
log
@sync with NetBSD -- copyright changes only
@
text
@d1 1
a1 1
/*	$NetBSD: if_ie_vmes.c,v 1.5 1996/11/20 18:56:51 gwr Exp $	*/
a60 1
#include <machine/isr.h>
d76 3
a78 1
static void wcopy(), wzero();
d97 1
d99 1
a99 1
	int x, sz;
@


1.1
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: if_ie_vmes.c,v 1.2 1996/03/26 22:04:28 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1994 Gordon W. Ross
d7 3
d20 5
a24 3
 *	This product includes software developed by Gordon Ross
 * 4. The name of the Author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
