head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.16
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.14
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.12
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.11.05.12.02;	author millert;	state Exp;
branches
	1.7.6.1
	1.7.16.1;
next	1.6;

1.6
date	97.01.16.04.03.51;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.01.07.23.36.11;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.31.06.12.51;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.07.54.56;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.02.47;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.53;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.7.16.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.7.16.2;

1.7.16.2
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.9
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: obio.c,v 1.8 2002/03/14 01:26:46 millert Exp $	*/
/*	$NetBSD: obio.c,v 1.23 1996/11/20 18:56:56 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Adam Glass and Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/control.h>
#include <machine/pte.h>
#include <machine/mon.h>
#include <machine/obio.h>

static int  obio_match(struct device *, void *, void *);
static void obio_attach(struct device *, struct device *, void *);
static int  obio_print(void *, const char *parentname);
static int  obio_submatch(struct device *, void *, void *);

static void save_prom_mappings(void);
static void make_required_mappings(void);

struct cfattach obio_ca = {
	sizeof(struct device), obio_match, obio_attach
};

struct cfdriver obio_cd = {
	NULL, "obio", DV_DULL
};

static int
obio_match(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct confargs *ca = aux;

	if (ca->ca_bustype != BUS_OBIO)
		return (0);
	return(1);
}

#define	OBIO_INCR	0x020000
#define OBIO_END	0x200000

static void
obio_attach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct confargs *ca = aux;
	int	addr;

	printf("\n");

	/* Configure these in order of address. */
	for (addr = 0; addr < OBIO_END; addr += OBIO_INCR) {

		/* We know ca_bustype == BUS_OBIO */
		ca->ca_paddr = addr;
		ca->ca_intpri = -1;
		ca->ca_intvec = -1;

		(void) config_found_sm(self, ca, obio_print, obio_submatch);
	}
}

/*
 * Print out the confargs.  The (parent) name is non-NULL
 * when there was no match found by config_found().
 */
static int
obio_print(args, name)
	void *args;
	const char *name;
{
	struct confargs *ca = args;

	/* Be quiet about empty OBIO locations. */
	if (name)
		return(QUIET);

	if (ca->ca_paddr != -1)
		printf(" addr 0x%x", ca->ca_paddr);
	if (ca->ca_intpri != -1)
		printf(" level %d", ca->ca_intpri);

	return(UNCONF);
}

int
obio_submatch(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct cfdata *cf = vcf;
	struct confargs *ca = aux;
	cfmatch_t submatch;

	/*
	 * Default addresses are mostly useless for OBIO.
	 * The address assignments are fixed for all time,
	 * so our config files might as well reflect that.
	 */
	if (cf->cf_paddr != ca->ca_paddr)
		return 0;

	/* Now call the match function of the potential child. */
	submatch = cf->cf_attach->ca_match;
	if (submatch == NULL)
		panic("obio_submatch: no match function for: %s",
			  cf->cf_driver->cd_name);

	return ((*submatch)(parent, vcf, aux));
}


/*****************************************************************/

/*
 * Spacing of "interesting" OBIO mappings.  We will
 * record only those with an OBIO address that is a
 * multiple of SAVE_INCR and below SAVE_LAST.
 * The saved mappings are just one page each, which
 * is good enough for all the devices that use this.
 */
#define SAVE_SHIFT 17
#define SAVE_INCR (1<<SAVE_SHIFT)
#define SAVE_MASK (SAVE_INCR-1)
#define SAVE_SLOTS  16
#define SAVE_LAST (SAVE_SLOTS * SAVE_INCR)

/*
 * This is our record of "interesting" OBIO mappings that
 * the PROM has left in the virtual space reserved for it.
 * Each non-null array element holds the virtual address
 * of an OBIO mapping where the OBIO address mapped is:
 *     (array_index * SAVE_INCR)
 * and the length of the mapping is one page.
 */
static caddr_t prom_mappings[SAVE_SLOTS];

caddr_t obio_find_mapping(int pa, int size)
{
	if ((size <= NBPG) &&
		(pa < SAVE_LAST) &&
		((pa & SAVE_MASK) == 0))
	{
		return prom_mappings[pa >> SAVE_SHIFT];
	}
	return (caddr_t)0;
}

/*
 * This defines the permission bits to put in our PTEs.
 * Device space is never cached, and the PROM appears to
 * leave off the "no-cache" bit, so we can do the same.
 */
#define PGBITS (PG_VALID|PG_WRITE|PG_SYSTEM)

static void
save_prom_mappings()
{
	vm_offset_t pa, segva, pgva;
	int pte, sme, i;

	segva = (vm_offset_t)MONSTART;
	while (segva < (vm_offset_t)MONEND) {
		sme = get_segmap(segva);
		if (sme == SEGINV) {
			segva += NBSG;
			continue;			/* next segment */
		}
		/*
		 * We have a valid segmap entry, so examine the
		 * PTEs for all the pages in this segment.
		 */
		pgva = segva;	/* starting page */
		segva += NBSG;	/* ending page (next seg) */
		while (pgva < segva) {
			pte = get_pte(pgva);
			if ((pte & (PG_VALID | PG_TYPE)) ==
				(PG_VALID | PGT_OBIO))
			{
				/* Have a valid OBIO mapping. */
				pa = PG_PA(pte);
				/* Is it one we want to record? */
				if ((pa < SAVE_LAST) &&
					((pa & SAVE_MASK) == 0))
				{
					i = pa >> SAVE_SHIFT;
					if (prom_mappings[i] == NULL) {
						prom_mappings[i] = (caddr_t)pgva;
#ifdef	DEBUG
						mon_printf("obio: found pa=0x%x\n", pa);
#endif
					}
				}
				/* Make sure it has the right permissions. */
				if ((pte & PGBITS) != PGBITS) {
#ifdef	DEBUG
					mon_printf("obio: fixing pte=0x%x\n", pte);
#endif
					pte |= PGBITS;
					set_pte(pgva, pte);
				}
			}
			pgva += NBPG;		/* next page */
		}
	}
}

/*
 * These are all the OBIO address that are required early in
 * the life of the kernel.  All are less than one page long.
 */
static vm_offset_t required_mappings[] = {
	/* Basically the first six OBIO devices. */
	OBIO_KEYBD_MS,
	OBIO_ZS,
	OBIO_EEPROM,
	OBIO_CLOCK,
	OBIO_MEMERR,
	OBIO_INTERREG,
	(vm_offset_t)-1,	/* end marker */
};

static void
make_required_mappings()
{
	vm_offset_t *rmp;

	rmp = required_mappings;
	while (*rmp != (vm_offset_t)-1) {
		if (!obio_find_mapping(*rmp, NBPG)) {
			/*
			 * XXX - Ack! Need to create one!
			 * I don't think this can happen, but if
			 * it does, we can allocate a PMEG in the
			 * "high segment" and add it there. -gwr
			 */
			mon_printf("obio: no mapping for 0x%x\n", *rmp);
			mon_panic("obio: Ancient PROM?\n");
		}
		rmp++;
	}
}


/*
 * this routine "configures" any internal OBIO devices which must be
 * accessible before the mainline OBIO autoconfiguration as part of
 * configure().
 */
void
obio_init()
{
	save_prom_mappings();
	make_required_mappings();
}

caddr_t
obio_alloc(obio_addr, obio_size)
	int obio_addr, obio_size;
{
	caddr_t cp;

	cp = obio_find_mapping((vm_offset_t)obio_addr, obio_size);
	if (cp) return (cp);

	cp = bus_mapin(BUS_OBIO, obio_addr, obio_size);
	return (cp);
}
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: obio.c,v 1.7 1999/01/11 05:12:02 millert Exp $	*/
@


1.7
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: obio.c,v 1.6 1997/01/16 04:03:51 kstailey Exp $	*/
d50 4
a53 4
static int  obio_match __P((struct device *, void *, void *));
static void obio_attach __P((struct device *, struct device *, void *));
static int  obio_print __P((void *, const char *parentname));
static int  obio_submatch __P((struct device *, void *, void *));
d55 2
a56 2
static void save_prom_mappings __P((void));
static void make_required_mappings __P((void));
@


1.7.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: obio.c,v 1.7 1999/01/11 05:12:02 millert Exp $	*/
d50 4
a53 4
static int  obio_match(struct device *, void *, void *);
static void obio_attach(struct device *, struct device *, void *);
static int  obio_print(void *, const char *parentname);
static int  obio_submatch(struct device *, void *, void *);
d55 2
a56 2
static void save_prom_mappings(void);
static void make_required_mappings(void);
@


1.7.16.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: obio.c,v 1.7.16.1 2002/06/11 03:39:01 art Exp $	*/
@


1.7.6.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 4
a53 4
static int  obio_match(struct device *, void *, void *);
static void obio_attach(struct device *, struct device *, void *);
static int  obio_print(void *, const char *parentname);
static int  obio_submatch(struct device *, void *, void *);
d55 2
a56 2
static void save_prom_mappings(void);
static void make_required_mappings(void);
@


1.7.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: obio.c,v 1.7.6.1 2002/03/28 11:26:45 niklas Exp $	*/
@


1.6
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d147 1
a147 1
		panic("obio_submatch: no match function for: %s\n",
@


1.5
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d45 1
a47 1
#include <machine/isr.h>
d53 4
a56 1
static int	obio_submatch __P((struct device *, void *, void *));
d197 2
a198 1
static void save_prom_mappings()
d200 1
a200 2
	vm_offset_t pa;
	caddr_t segva, pgva;
d202 3
a204 3
	
	segva = (caddr_t)MONSTART;
	while (segva < (caddr_t)MONEND) {
d229 1
a229 1
						prom_mappings[i] = pgva;
d264 2
a265 1
static void make_required_mappings()
d267 2
a268 3
	vm_offset_t pa, *rmp;
	int idx;
	
d291 2
a292 1
void obio_init()
d298 2
a299 1
caddr_t obio_alloc(obio_addr, obio_size)
@


1.4
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: obio.c,v 1.25 1996/12/17 21:21:13 gwr Exp $	*/
a43 1
#include <machine/control.h>
d46 1
d52 1
a52 1
static int  obio_submatch __P((struct device *, void *, void *));
d63 1
a63 1
obio_match(parent, cf, aux)
d65 1
a65 1
	void *cf, *aux;
a136 5
#ifdef	DIAGNOSTIC
	if (cf->cf_paddr == -1)
		panic("obio_submatch: invalid address for: %s%d\n",
			cf->cf_driver->cd_name, cf->cf_unit);
#endif
d146 1
a146 1
	return ((*submatch)(parent, cf, aux));
d193 1
a193 2
static void
save_prom_mappings __P((void))
d195 2
a196 1
	vm_offset_t pa, segva, pgva;
d198 3
a200 3

	segva = (vm_offset_t)MONSTART;
	while (segva < (vm_offset_t)MONEND) {
d225 1
a225 1
						prom_mappings[i] = (caddr_t)pgva;
d260 1
a260 2
static void
make_required_mappings __P((void))
d262 3
a264 2
	vm_offset_t *rmp;

d283 3
a285 4
 * Find mappings for devices that are needed before autoconfiguration.
 * We first look for and record any useful PROM mappings, then call
 * the "init" functions for drivers that we need to use before the
 * normal autoconfiguration calls configure().
d287 1
a287 2
void
obio_init()
a290 6

	/* Init drivers that use the required OBIO mappings. */
	zs_init();
	eeprom_init();
	intreg_init();
	clock_init();
d293 1
a293 2
caddr_t
obio_alloc(obio_addr, obio_size)
@


1.3
log
@sync with NetBSD
@
text
@d1 1
a1 1
/*	$NetBSD: obio.c,v 1.23 1996/11/20 18:56:56 gwr Exp $	*/
d44 1
a46 1
#include <machine/isr.h>
d52 1
a52 1
static int	obio_submatch __P((struct device *, void *, void *));
d63 1
a63 1
obio_match(parent, vcf, aux)
d65 1
a65 1
	void *vcf, *aux;
d137 5
d151 1
a151 1
	return ((*submatch)(parent, vcf, aux));
d198 2
a199 1
static void save_prom_mappings()
d201 1
a201 2
	vm_offset_t pa;
	caddr_t segva, pgva;
d203 3
a205 3
	
	segva = (caddr_t)MONSTART;
	while (segva < (caddr_t)MONEND) {
d230 1
a230 1
						prom_mappings[i] = pgva;
d265 2
a266 1
static void make_required_mappings()
d268 2
a269 3
	vm_offset_t pa, *rmp;
	int idx;
	
d288 4
a291 3
 * this routine "configures" any internal OBIO devices which must be
 * accessible before the mainline OBIO autoconfiguration as part of
 * configure().
d293 2
a294 1
void obio_init()
d298 6
d306 2
a307 1
caddr_t obio_alloc(obio_addr, obio_size)
@


1.2
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: obio.c,v 1.18 1996/03/26 15:16:14 gwr Exp $	*/
d3 2
a4 3
/*
 * Copyright (c) 1994 Gordon W. Ross
 * Copyright (c) 1993 Adam Glass
d7 3
d20 5
a24 3
 *	This product includes software developed by Adam Glass and Gordon Ross.
 * 4. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d51 2
a52 1
static int  obio_print __P((void *, char *parentname));
d96 1
a96 1
		(void) config_found(self, ca, obio_print);
d107 1
a107 1
	char *name;
d115 4
a118 1
	printf(" addr 0x%x", ca->ca_paddr);
d122 27
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: obio.c,v 1.16 1995/02/13 22:23:57 gwr Exp $	*/
d44 1
d46 1
a46 1
static void obio_scan __P((struct device *, void *));
d48 22
a69 3
struct cfdriver obiocd = {
	NULL, "obio", always_match, obio_attach, DV_DULL,
	sizeof(struct device), 0 };
d72 1
a72 1
obio_attach(parent, self, args)
d75 1
a75 1
	void *args;
d77 3
d81 11
a91 1
	config_scan(obio_scan, self);
d94 8
a101 4
static void
obio_scan(parent, child)
	struct device *parent;
	void *child;
d103 9
a111 1
	bus_scan(parent, child, BUS_OBIO);
d113 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
