head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.24
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.22
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.20
	OPENBSD_2_8:1.8.0.18
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.16
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.14
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.12
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.10
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.01.16.04.03.50;	author kstailey;	state Exp;
branches
	1.8.14.1
	1.8.24.1;
next	1.7;

1.7
date	97.01.07.23.36.10;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	96.12.31.06.12.50;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.11.24.16.26.36;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.24.14.58.03;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.21.46.23;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.07.54.56;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.16.02.33;	author mickey;	state Exp;
branches;
next	;

1.8.14.1
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.8.14.2;

1.8.14.2
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.8.24.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.8.24.2;

1.8.24.2
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.10
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: memerr.c,v 1.9 2002/03/14 01:26:46 millert Exp $	*/
/*	$NetBSD: memerr.c,v 1.6 1996/11/13 07:05:14 thorpej Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)memreg.c	8.1 (Berkeley) 6/11/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/control.h>
#include <machine/cpu.h>
#include <machine/obio.h>
#include <machine/pte.h>

#include <sun3/dev/memerr.h>
/* #include <sun3/dev/eccreg.h> - not yet */

#define	ME_PRI	7	/* Interrupt level (NMI) */

extern unsigned char cpu_machine_id;

enum memerr_type { ME_PAR = 0, ME_ECC = 1 };

struct memerr_softc {
	struct device sc_dev;
	struct memerr *sc_reg;
	enum memerr_type sc_type;
	char *sc_typename;	/* "Parity" or "ECC" */
	char *sc_csrbits;	/* how to print csr bits */
	/* XXX: counters? */
};

static int  memerr_match(struct device *, void *vcf, void *args);
static void memerr_attach(struct device *, struct device *, void *);
static int  memerr_interrupt(void *);
static void memerr_correctable(struct memerr_softc *);

struct cfattach memerr_ca = {
	sizeof(struct memerr_softc), memerr_match, memerr_attach
};

struct cfdriver memerr_cd = {
	NULL, "memerr", DV_DULL
};


static int
memerr_match(parent, vcf, args)
    struct device *parent;
    void *vcf, *args;
{
    struct cfdata *cf = vcf;
	struct confargs *ca = args;

	/* This driver only supports one unit. */
	if (cf->cf_unit != 0)
		return (0);

	/* The peek returns -1 on bus error. */
	if (bus_peek(ca->ca_bustype, ca->ca_paddr, 1) == -1)
		return (0);

	/* Default interrupt priority. */
	if (ca->ca_intpri == -1)
		ca->ca_intpri = ME_PRI;

	return (1);
}

static void
memerr_attach(parent, self, args)
	struct device *parent;
	struct device *self;
	void *args;
{
	struct memerr_softc *sc = (void *)self;
	struct confargs *ca = args;
	struct memerr *mer;

	/*
	 * Which type of memory subsystem do we have?
	 */
	switch (cpu_machine_id) {
	case SUN3_MACH_160:		/* XXX: correct? */
	case SUN3_MACH_260:
		sc->sc_type = ME_ECC;
		sc->sc_typename = "ECC";
		sc->sc_csrbits = ME_ECC_STR;
		break;

	default:
		sc->sc_type = ME_PAR;
		sc->sc_typename = "Parity";
		sc->sc_csrbits = ME_PAR_STR;
		break;
	}
	printf(": (%s memory)\n", sc->sc_typename);

	mer = (struct memerr *)
	    obio_alloc(ca->ca_paddr, sizeof(*mer));
	if (mer == NULL)
		panic("memerr: can not map register");
	sc->sc_reg = mer;

	/* Install interrupt handler. */
	isr_add_autovect(memerr_interrupt,
		(void *)sc, ca->ca_intpri);

	/* Enable error interrupt (and checking). */
	if (sc->sc_type == ME_PAR)
		mer->me_csr = ME_CSR_IENA | ME_PAR_CHECK;
	else {
		/*
		 * XXX:  Some day, figure out how to decode
		 * correctable errors and set ME_ECC_CE_ENA
		 * here so we can log them...
		 */
		mer->me_csr = ME_CSR_IENA; /* | ME_ECC_CE_ENA */
	}
}

/*****************************************************************
 * Functions for ECC memory
 *****************************************************************/

static int
memerr_interrupt(arg)
	void *arg;
{
	struct memerr_softc *sc = arg;
	volatile struct memerr *me = sc->sc_reg;
	u_char csr, ctx;
	u_int pa, va;
	int pte;

	csr = me->me_csr;
	if ((csr & ME_CSR_IPEND) == 0)
		return (0);

	va = me->me_vaddr;
 	ctx = (va >> 28) & 0xF;
	va &= 0x0FFFffff;
	pte = get_pte(va);
	pa = PG_PA(pte);

	printf("\nMemory error on %s cycle!\n",
		(ctx & 8) ? "DVMA" : "CPU");
	printf(" ctx=%d, vaddr=0x%x, paddr=0x%x\n",
		   (ctx & 7), va, pa);
	printf(" csr=%x\n", csr);

	/*
	 * If we have parity-checked memory, there is
	 * not much to be done.  Any error is fatal.
	 */
	if (sc->sc_type == ME_PAR) {
		if (csr & ME_PAR_EMASK)
			/* Parity errors are fatal. */
			goto die;
		/* The IPEND bit was set, but no error bits. */
		goto noerror;
	}

	/*
	 * We have ECC memory.  More complicated...
	 */
	if (csr & (ME_ECC_WBTMO | ME_ECC_WBERR)) {
		printf(" write-back failed, pte=0x%x\n", pte);
		goto die;
	}
	if (csr & ME_ECC_UE) {
		printf(" uncorrectable ECC error\n");
		goto die;
	}
	if (csr & ME_ECC_CE) {
		/* Just log this and continue. */
		memerr_correctable(sc);
		goto recover;
	}
	/* The IPEND bit was set, but no error bits. */
	goto noerror;

die:
	panic("all bets are off...");

noerror:
	printf("memerr: no error bits set?\n");

recover:
	/* Clear the error by writing the address register. */
	me->me_vaddr = 0;
	return (1);
}

/*
 * Announce (and log) a correctable ECC error.
 * Need to look at the ECC syndrome register on
 * the memory board that caused the error...
 */
void
memerr_correctable(sc)
	struct memerr_softc *sc;
{
	/* XXX: Not yet... */
}
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: memerr.c,v 1.8 1997/01/16 04:03:50 kstailey Exp $	*/
@


1.8
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 4
a79 4
static int  memerr_match __P((struct device *, void *vcf, void *args));
static void memerr_attach __P((struct device *, struct device *, void *));
static int  memerr_interrupt __P((void *));
static void memerr_correctable __P((struct memerr_softc *));
@


1.8.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: memerr.c,v 1.8 1997/01/16 04:03:50 kstailey Exp $	*/
d76 4
a79 4
static int  memerr_match(struct device *, void *vcf, void *args);
static void memerr_attach(struct device *, struct device *, void *);
static int  memerr_interrupt(void *);
static void memerr_correctable(struct memerr_softc *);
@


1.8.24.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: memerr.c,v 1.8.24.1 2002/06/11 03:39:01 art Exp $	*/
@


1.8.14.1
log
@Merge in -current from about a week ago
@
text
@d76 4
a79 4
static int  memerr_match(struct device *, void *vcf, void *args);
static void memerr_attach(struct device *, struct device *, void *);
static int  memerr_interrupt(void *);
static void memerr_correctable(struct memerr_softc *);
@


1.8.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: memerr.c,v 1.8.14.1 2002/03/28 11:26:45 niklas Exp $	*/
@


1.7
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d53 1
d175 1
a175 1
	u_char csr, ctx, err;
@


1.6
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: memerr.c,v 1.7 1996/12/17 21:10:50 gwr Exp $ */
a51 1
#include <machine/control.h>
a52 1
#include <machine/idprom.h>
d74 1
a74 1
static int  memerr_match __P((struct device *, void *, void *));
d93 1
a93 1
	struct cfdata *cf = vcf;
d173 1
a173 1
	u_char csr, ctx;
@


1.5
log
@removed ref to bitmask_snprintf()
@
text
@d1 1
a1 1
/*	$NetBSD: memerr.c,v 1.6 1996/11/13 07:05:14 thorpej Exp $ */
d52 1
d54 1
d76 1
a76 1
static int  memerr_match __P((struct device *, void *vcf, void *args));
d95 1
a95 1
    struct cfdata *cf = vcf;
d175 1
a175 1
	u_char csr, ctx, err;
@


1.4
log
@remove bogus diagnostic
@
text
@a175 1
	char bits[64];
d191 1
a191 2
	printf(" csr=%s\n", bitmask_snprintf(csr, sc->sc_csrbits,
	    bits, sizeof(bits)));
@


1.3
log
@added const to second parameter of cfprint_t routines
@
text
@d200 1
a200 4
		if (csr & ME_PAR_EMASK) {
			/* true for Sun3/60, probably some others too */
			printf("probably should replace SIMM %d\n",
			       pa / 1048576 + 1);
a202 1
		}
@


1.2
log
@sync with NetBSD
@
text
@d201 3
@


1.1
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: memerr.c,v 1.2 1996/04/07 05:47:28 gwr Exp $ */
a94 1
	int pa, x;
d100 2
a101 5
	if ((pa = cf->cf_paddr) == -1) {
		/* Use our default PA. */
		pa = OBIO_MEMERR;
	}
	if (pa != ca->ca_paddr)
d104 5
a108 3
	/* The peek returns -1 on bus error. */
	x = bus_peek(ca->ca_bustype, ca->ca_paddr, 1);
	return (x != -1);
a120 6
	mer = (struct memerr *)
	    obio_alloc(ca->ca_paddr, sizeof(*mer));
	if (mer == NULL)
		panic(": can not map register");
	sc->sc_reg = mer;

d138 1
d140 5
a144 1
	printf(" (%s memory)\n", sc->sc_typename);
d147 2
a148 1
	isr_add_autovect(memerr_interrupt, (void *)sc, ME_PRI);
d176 1
d192 2
a193 1
	printf(" csr=%b\n", csr, sc->sc_csrbits);
@
