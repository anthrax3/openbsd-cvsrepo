head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.24
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.22
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.20
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.01.16.04.03.46;	author kstailey;	state Exp;
branches
	1.6.14.1
	1.6.24.1;
next	1.5;

1.5
date	97.01.07.23.36.07;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.31.06.12.39;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.07.54.53;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.02.16;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.6.24.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.6.24.2;

1.6.24.2
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: idprom.c,v 1.7 2002/03/14 03:16:01 millert Exp $	*/
/*	$NetBSD: idprom.c,v 1.13 1996/11/20 18:56:50 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Adam Glass and Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine ID PROM - system type and serial number
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/conf.h>
#include <machine/control.h>
#include <machine/idprom.h>
#include <machine/mon.h>

extern long hostid;	/* in kern_sysctl.c */

/*
 * This structure is what this driver is all about.
 * It is copied from control space early in startup.
 */
struct idprom identity_prom;

int
idpromopen(dev, oflags, devtype, p)
	dev_t dev;
	int oflags;
	int devtype;
	struct proc *p;
{
	return 0;
}

int
idpromclose(dev, fflag, devtype, p)
	dev_t dev;
	int fflag;
	int devtype;
	struct proc *p;
{
	return 0;
}

int
idpromread(dev, uio, ioflag)
	dev_t dev;
	struct uio *uio;
	int ioflag;
{
	int error, length;

	error = 0;
	while (uio->uio_resid > 0 && error == 0) {
		if (uio->uio_offset >= IDPROM_SIZE)
			break; /* past or at end */
		length = min(uio->uio_resid,
					 (IDPROM_SIZE - (int)uio->uio_offset));
		error = uiomove((caddr_t) &identity_prom, length, uio);
	}
	return error;
}

/*
 * This is called very early during startup to
 * get a copy of the idprom from control space.
 */
int
idprom_init()
{
	struct idprom *idp;
	char *src, *dst;
	int len, x, xorsum;
	union {
		long l;
		char c[4];
	} hid;

	idp = &identity_prom;
	dst = (char *)idp;
	src = (char *)IDPROM_BASE;
	len = IDPROM_SIZE;
	xorsum = 0;	/* calculated as xor of data */

	do {
		x = get_control_byte(src++);
		*dst++ = x;
		xorsum ^= x;
	} while (--len > 0);

	if (xorsum != 0) {
		mon_printf("idprom_fetch: bad checksum=%d\n", xorsum);
		return xorsum;
	}
	if (idp->idp_format < 1) {
		mon_printf("idprom_fetch: bad version=%d\n", idp->idp_format);
		return -1;
	}

	/*
	 * Construct the hostid from the idprom contents.
	 * This appears to be the way SunOS does it.
	 */
	hid.c[0] = idp->idp_machtype;
	hid.c[1] = idp->idp_serialnum[0];
	hid.c[2] = idp->idp_serialnum[1];
	hid.c[3] = idp->idp_serialnum[2];
	hostid = hid.l;

	return 0;
}

void
idprom_etheraddr(eaddrp)
	u_char *eaddrp;
{
	u_char *src, *dst;
	int len = 6;

	src = identity_prom.idp_etheraddr;
	dst = eaddrp;

	do *dst++ = *src++;
	while (--len > 0);
}
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: idprom.c,v 1.6 1997/01/16 04:03:46 kstailey Exp $	*/
@


1.6
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d118 2
a119 2
	dst = (char*)idp;
	src = (char*)IDPROM_BASE;
@


1.6.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: idprom.c,v 1.6 1997/01/16 04:03:46 kstailey Exp $	*/
d118 2
a119 2
	dst = (char *)idp;
	src = (char *)IDPROM_BASE;
@


1.6.24.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: idprom.c,v 1.6.24.1 2002/06/11 03:39:01 art Exp $	*/
@


1.6.14.1
log
@Merge in -current from about a week ago
@
text
@d118 2
a119 2
	dst = (char *)idp;
	src = (char *)IDPROM_BASE;
@


1.6.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: idprom.c,v 1.6.14.1 2002/03/28 11:26:45 niklas Exp $	*/
@


1.5
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d46 1
d50 1
d63 2
a64 1
int idpromopen(dev, oflags, devtype, p)
d73 2
a74 1
int idpromclose(dev, fflag, devtype, p)
d83 1
d89 1
a89 1
	int error, unit, length;
d106 2
a107 1
int idprom_init()
d151 2
a152 1
void idprom_etheraddr(eaddrp)
@


1.4
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: idprom.c,v 1.15 1996/12/17 21:10:43 gwr Exp $	*/
a45 1
#include <sys/kernel.h>
d52 2
d60 36
d100 1
a100 2
int
idprom_init()
@


1.3
log
@sync with NetBSD
@
text
@d1 1
a1 1
/*	$NetBSD: idprom.c,v 1.13 1996/11/20 18:56:50 gwr Exp $	*/
d46 1
a52 2
extern long hostid;	/* in kern_sysctl.c */

a58 36
int idpromopen(dev, oflags, devtype, p)
	dev_t dev;
	int oflags;
	int devtype;
	struct proc *p;
{
	return 0;
}

int idpromclose(dev, fflag, devtype, p)
	dev_t dev;
	int fflag;
	int devtype;
	struct proc *p;
{
	return 0;
}

idpromread(dev, uio, ioflag)
	dev_t dev;
	struct uio *uio;
	int ioflag;
{
	int error, unit, length;

	error = 0;
	while (uio->uio_resid > 0 && error == 0) {
		if (uio->uio_offset >= IDPROM_SIZE)
			break; /* past or at end */
		length = min(uio->uio_resid,
					 (IDPROM_SIZE - (int)uio->uio_offset));
		error = uiomove((caddr_t) &identity_prom, length, uio);
	}
	return error;
}

d63 2
a64 1
int idprom_init()
@


1.2
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: idprom.c,v 1.12 1996/03/26 15:16:09 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1993 Adam Glass
d7 3
d20 5
a24 3
 *	This product includes software developed by Adam Glass.
 * 4. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: idprom.c,v 1.10 1995/02/11 20:57:11 gwr Exp $	*/
a53 45
static int  idprom_match __P((struct device *, void *vcf, void *args));
static void idprom_attach __P((struct device *, struct device *, void *));

struct cfdriver idpromcd = {
	NULL, "idprom", idprom_match, idprom_attach,
	DV_DULL, sizeof(struct device), 0 };

int idprom_match(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct cfdata *cf = vcf;

	/* This driver only supports one unit. */
	if (cf->cf_unit != 0)
		return (0);

	return (1);
}

void idprom_attach(parent, self, args)
	struct device *parent;
	struct device *self;
	void *args;
{
	struct idprom *idp;
	union {
		long l;
		char c[4];
	} id;

	/*
	 * Construct the hostid from the idprom contents.
	 * This appears to be the way SunOS does it.
	 */
	idp = &identity_prom;
	id.c[0] = idp->idp_machtype;
	id.c[1] = idp->idp_serialnum[0];
	id.c[2] = idp->idp_serialnum[1];
	id.c[3] = idp->idp_serialnum[2];
	hostid = id.l;

	printf(" hostid 0x%x\n", id.l);
}

d99 4
d124 11
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
