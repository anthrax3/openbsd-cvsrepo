head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.16.12.49.48;	author ho;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.01.04.22.34.42;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	97.01.16.04.03.44;	author kstailey;	state Exp;
branches
	1.6.14.1;
next	1.5;

1.5
date	97.01.07.23.36.05;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.31.06.12.33;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.12.08.27.12;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.02.15;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2001.05.14.21.37.25;	author niklas;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2001.07.04.10.23.54;	author niklas;	state Exp;
branches;
next	1.6.14.3;

1.6.14.3
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.6.14.4;

1.6.14.4
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.8.4.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.10
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: eeprom.c,v 1.9 2002/03/14 01:26:46 millert Exp $	*/
/*	$NetBSD: eeprom.c,v 1.8 1996/03/26 15:16:06 gwr Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Access functions for the EEPROM (Electrically Eraseable PROM)
 * The main reason for the existence of this module is to
 * handle the painful task of updating the EEPROM contents.
 * After a write, it must not be touched for 10 milliseconds.
 * (See the Sun-3 Architecture Manual sec. 5.9)
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/buf.h>
#include <sys/malloc.h>
#include <sys/proc.h>

#include <machine/autoconf.h>
#include <machine/obio.h>
#include <machine/eeprom.h>

int ee_console;		/* for convenience of drivers */

static char *eeprom_va;
static int ee_busy, ee_want;

static int  eeprom_match(struct device *, void *vcf, void *args);
static void eeprom_attach(struct device *, struct device *, void *);
static int  ee_update(caddr_t, int, int);
static int  ee_take(void);
static void ee_give(void);
int ee_get_byte(int, int);

struct cfattach eeprom_ca = {
	sizeof(struct device), eeprom_match, eeprom_attach
};

struct cfdriver eeprom_cd = {
	NULL, "eeprom", DV_DULL
};

/* Called very early by internal_configure. */
void
eeprom_init()
{
	eeprom_va = obio_find_mapping(OBIO_EEPROM, OBIO_EEPROM_SIZE);
	ee_console = ((struct eeprom *)eeprom_va)->ee_diag.eed_console;
}

static int
eeprom_match(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct cfdata *cf = vcf;
	struct confargs *ca = args;
	int pa;

	/* This driver only supports one unit. */
	if (cf->cf_unit != 0)
		return (0);

	if ((pa = cf->cf_paddr) == -1) {
		/* Use our default PA. */
		pa = OBIO_EEPROM;
	} else {
		/* Validate the given PA. */
		if (pa != OBIO_EEPROM)
			return (0);
	}
	if (pa != ca->ca_paddr)
		return (0);

	if (eeprom_va == NULL)
		return (0);

	return (1);
}

static void
eeprom_attach(parent, self, args)
	struct device *parent;
	struct device *self;
	void *args;
{

	printf("\n");
}


static int
ee_take()	/* Take the lock. */
{
	int error = 0;

	while (ee_busy) {
		ee_want = 1;
		error = tsleep(&ee_busy, PZERO | PCATCH, "eeprom", 0);
		ee_want = 0;
		if (error)	/* interrupted */
			goto out;
	}
	ee_busy = 1;
 out:
	return error;
}

static void
ee_give()	/* Give the lock. */
{

	ee_busy = 0;
	if (ee_want) {
		ee_want = 0;
		wakeup(&ee_busy);
	}
}

int
eeprom_uio(uio)
	struct uio *uio;
{
	int error;
	int off;	/* NOT off_t */
	u_int cnt;
	caddr_t va;
	caddr_t buf = (caddr_t)0;

	off = uio->uio_offset;
	if (off >= OBIO_EEPROM_SIZE)
		return (EFAULT);

	cnt = uio->uio_resid;
	if (cnt > (OBIO_EEPROM_SIZE - off))
		cnt = (OBIO_EEPROM_SIZE - off);

	if ((error = ee_take()) != 0)
		return (error);

	if (eeprom_va == NULL) {
		error = ENXIO;
		goto out;
	}

	va = eeprom_va;
	if (uio->uio_rw != UIO_READ) {
		/* Write requires a temporary buffer. */
		va = buf = malloc(OBIO_EEPROM_SIZE, M_DEVBUF, M_WAITOK);
	}

	if ((error = uiomove(va + off, (int)cnt, uio)) != 0)
		goto out;

	if (uio->uio_rw != UIO_READ)
		error = ee_update(buf, off, cnt);

 out:
	if (buf)
		free(buf, M_DEVBUF);
	ee_give();
	return (error);
}

/*
 * Update the EEPROM from the passed buf.
 */
static int
ee_update(buf, off, cnt)
	caddr_t buf;
	int off, cnt;
{
	volatile char *ep;
	char *bp;

	if (eeprom_va == NULL)
		return (ENXIO);

	ep = eeprom_va + off;
	bp = buf + off;

	while (cnt > 0) {
		/*
		 * DO NOT WRITE IT UNLESS WE HAVE TO because the
		 * EEPROM has a limited number of write cycles.
		 * After some number of writes it just fails!
		 */
		if (*ep != *bp) {
			*ep  = *bp;
			/*
			 * We have written the EEPROM, so now we must
			 * sleep for at least 10 milliseconds while
			 * holding the lock to prevent all access to
			 * the EEPROM while it recovers.
			 */
			(void)tsleep(eeprom_va, PZERO-1, "eeprom", hz/50);
		}
		/* Make sure the write worked. */
		if (*ep != *bp)
			return (EIO);
		ep++;
		bp++;
		cnt--;
	}
	return(0);
}

/*
 * Read a byte out of the EEPROM.  This is called from
 * things like the zs driver very early to find out
 * which device should be used as the console.
 */
int
ee_get_byte(off, canwait)
	int off, canwait;
{
	int c = -1;
	if ((off < 0) || (off >= OBIO_EEPROM_SIZE))
		goto out;
	if (eeprom_va == NULL)
		goto out;

	if (canwait) {
		if (ee_take())
			goto out;
	} else {
		if (ee_busy)
			goto out;
	}

	c = eeprom_va[off] & 0xFF;

	if (canwait)
		ee_give();
 out:
	return c;
}
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.8 2001/05/16 12:49:48 ho Exp $	*/
@


1.8
log
@No need to check M_WAIT/M_WAITOK malloc return values. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.7 2001/01/04 22:34:42 miod Exp $	*/
d57 6
a62 6
static int  eeprom_match __P((struct device *, void *vcf, void *args));
static void eeprom_attach __P((struct device *, struct device *, void *));
static int  ee_update __P((caddr_t, int, int));
static int  ee_take __P((void));
static void ee_give __P((void));
int ee_get_byte __P((int, int));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.8 2001/05/16 12:49:48 ho Exp $	*/
d57 6
a62 6
static int  eeprom_match(struct device *, void *vcf, void *args);
static void eeprom_attach(struct device *, struct device *, void *);
static int  ee_update(caddr_t, int, int);
static int  ee_take(void);
static void ee_give(void);
int ee_get_byte(int, int);
@


1.8.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.8.4.1 2002/06/11 03:39:01 art Exp $	*/
@


1.7
log
@KNF, add prototypes to compile with -Wmissing-prototypes.
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.6 1997/01/16 04:03:44 kstailey Exp $	*/
d178 1
a178 6
		buf = malloc(OBIO_EEPROM_SIZE, M_DEVBUF, M_WAITOK);
		if (!buf) {
			error = EAGAIN;
			goto out;
		}
		va = buf;
@


1.6
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
d73 2
a74 1
void eeprom_init()
d150 2
a151 1
eeprom_uio(struct uio *uio)
d203 3
a205 1
ee_update(char *buf, int off, int cnt)
d248 2
a249 1
ee_get_byte(int off, int canwait)
@


1.6.14.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.7 2001/01/04 22:34:42 miod Exp $	*/
a61 1
int ee_get_byte __P((int, int));
d72 1
a72 2
void
eeprom_init()
d148 1
a148 2
eeprom_uio(uio)
	struct uio *uio;
d200 1
a200 3
ee_update(buf, off, cnt)
	caddr_t buf;
	int off, cnt;
d243 1
a243 2
ee_get_byte(off, canwait)
	int off, canwait;
@


1.6.14.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.6.14.1 2001/05/14 21:37:25 niklas Exp $	*/
d178 6
a183 1
		va = buf = malloc(OBIO_EEPROM_SIZE, M_DEVBUF, M_WAITOK);
@


1.6.14.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 6
a62 6
static int  eeprom_match(struct device *, void *vcf, void *args);
static void eeprom_attach(struct device *, struct device *, void *);
static int  ee_update(caddr_t, int, int);
static int  ee_take(void);
static void ee_give(void);
int ee_get_byte(int, int);
@


1.6.14.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: eeprom.c,v 1.6.14.3 2002/03/28 11:26:45 niklas Exp $	*/
@


1.5
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d40 1
d46 1
a51 2
#define HZ 100	/* XXX */

a53 2
static int ee_update(caddr_t buf, int off, int cnt);

d59 3
d80 2
a81 2
    struct device *parent;
    void *vcf, *args;
d83 1
a83 1
    struct cfdata *cf = vcf;
a113 1
	struct confargs *ca = args;
d119 2
a120 1
static int ee_take()	/* Take the lock. */
d123 1
d136 2
a137 1
static void ee_give()	/* Give the lock. */
d139 1
d147 2
a148 1
int eeprom_uio(struct uio *uio)
d199 2
a200 1
static int ee_update(char *buf, int off, int cnt)
d225 1
a225 1
			(void)tsleep(eeprom_va, PZERO-1, "eeprom", HZ/50);
d242 2
a243 1
int ee_get_byte(int off, int canwait)
@


1.4
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: eeprom.c,v 1.13 1996/12/17 21:10:40 gwr Exp $	*/
d3 2
a4 2
/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
a6 3
 * This code is derived from software contributed to The NetBSD Foundation
 * by Gordon W. Ross.
 *
d15 2
a16 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d18 10
a27 11
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
a35 3
 *
 * XXX: Should just keep a copy of the EEPROM contents in RAM
 * (read it once at init time) to avoid the eeprom_uio hair.
a43 1
#include <sys/proc.h>
d58 1
a58 1
static int  eeprom_match __P((struct device *, void *, void *));
d81 1
a81 1
	struct cfdata *cf = vcf;
d83 1
d89 9
a97 2
	/* Validate the given address. */
	if (ca->ca_paddr != OBIO_EEPROM)
d112 1
d118 1
a118 3
/* Take the lock. */
static int
ee_take __P((void))
d133 1
a133 3
/* Give the lock. */
static void
ee_give __P((void))
d142 1
a142 5
/*
 * XXX - Just keep a soft copy of the eeprom?
 */
int
eeprom_uio(struct uio *uio)
d193 1
a193 2
static int
ee_update(char *buf, int off, int cnt)
@


1.3
log
@use my eeprom.h with sun-alike definitions
@
text
@d1 1
a1 1
/*	$NetBSD: eeprom.c,v 1.8 1996/03/26 15:16:06 gwr Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1994 Gordon W. Ross
d7 3
d18 7
a24 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 11
a36 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d45 3
d56 1
d71 1
a71 1
static int  eeprom_match __P((struct device *, void *vcf, void *args));
d94 1
a94 1
    struct cfdata *cf = vcf;
a95 1
	int pa;
d101 2
a102 9
	if ((pa = cf->cf_paddr) == -1) {
		/* Use our default PA. */
		pa = OBIO_EEPROM;
	} else {
		/* Validate the given PA. */
		if (pa != OBIO_EEPROM)
			return (0);
	}
	if (pa != ca->ca_paddr)
a116 1
	struct confargs *ca = args;
d122 3
a124 1
static int ee_take()	/* Take the lock. */
d139 3
a141 1
static void ee_give()	/* Give the lock. */
d150 5
a154 1
int eeprom_uio(struct uio *uio)
d205 2
a206 1
static int ee_update(char *buf, int off, int cnt)
@


1.2
log
@sync with 0430.
@
text
@d73 1
a73 1
	ee_console = ((struct eeprom *)eeprom_va)->eeConsole;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: eeprom.c,v 1.6 1995/05/24 20:47:41 gwr Exp $	*/
d58 2
a59 2
int eeprom_match __P((struct device *, void *vcf, void *args));
void eeprom_attach __P((struct device *, struct device *, void *));
d61 7
a67 3
struct cfdriver eepromcd = {
	NULL, "eeprom", eeprom_match, eeprom_attach,
	DV_DULL, sizeof(struct device), 0 };
d76 2
a77 1
int eeprom_match(parent, vcf, args)
d83 1
d88 12
d102 1
a102 2
	if (ca->ca_paddr == -1)
		ca->ca_paddr = OBIO_EEPROM;
d106 2
a107 1
void eeprom_attach(parent, self, args)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
