head	1.13;
access;
symbols
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	UBC_SYNC_A:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.12
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.8.0.22
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.20
	OPENBSD_2_8:1.8.0.18
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.16
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.14
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.12
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.10
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2002.12.31.16.35.40;	author miod;	state dead;
branches;
next	1.12;

1.12
date	2002.08.02.16.13.07;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.46;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.8;

1.8
date	97.01.16.04.03.43;	author kstailey;	state Exp;
branches
	1.8.14.1;
next	1.7;

1.7
date	97.01.07.23.36.05;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	96.12.31.06.12.32;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.08.25.48;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.07.54.51;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.11.23.05.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.16.02.14;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.51;	author deraadt;	state Exp;
branches;
next	;

1.8.14.1
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.8.14.2;

1.8.14.2
date	2002.03.28.11.26.45;	author niklas;	state Exp;
branches;
next	1.8.14.3;

1.8.14.3
date	2003.03.27.23.52.17;	author niklas;	state dead;
branches;
next	;

1.10.2.1
date	2002.06.11.03.39.01;	author art;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2002.10.29.00.28.12;	author art;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2003.05.19.21.49.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.13
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: cg4.c,v 1.12 2002/08/02 16:13:07 millert Exp $	*/
/*	$NetBSD: cg4.c,v 1.11 1996/10/29 19:54:19 gwr Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)cgthree.c	8.2 (Berkeley) 10/30/93
 */

/*
 * color display (cg4) driver.
 *
 * Credits, history:
 * Gordon Ross created this driver based on the cg3 driver from
 * the sparc port as distributed in BSD 4.4 Lite, but included
 * support for only the "type B" adapter (Brooktree DACs).
 * Ezra Story added support for the "type A" (AMD DACs).
 *
 * Todo:
 * Make this driver handle video interrupts.
 * Defer colormap updates to vertical retrace interrupts.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>
#include <sys/mman.h>
#include <sys/tty.h>
#include <sys/conf.h>

#include <uvm/uvm_extern.h>

#include <machine/conf.h>
#include <machine/cpu.h>
#include <machine/fbio.h>
#include <machine/autoconf.h>
#include <machine/pmap.h>

#include "fbvar.h"
#include "btreg.h"
#include "btvar.h"
#include "cg4reg.h"

#define	CG4_MMAP_SIZE (CG4_OVERLAY_SIZE + CG4_ENABLE_SIZE + CG4_PIXMAP_SIZE)

extern unsigned char cpu_machine_id;

#define CMAP_SIZE 256
struct soft_cmap {
	u_char r[CMAP_SIZE];
	u_char g[CMAP_SIZE];
	u_char b[CMAP_SIZE];
};

/* per-display variables */
struct cg4_softc {
	struct	device sc_dev;		/* base device */
	struct	fbdevice sc_fb;		/* frame buffer device */
	int 	sc_cg4type;		/* A or B */
	void	*sc_va_cmap;		/* Colormap h/w (mapped KVA) */
	int 	sc_pa_overlay;		/* phys. addr. of overlay plane */
	int 	sc_pa_enable;		/* phys. addr. of enable plane */
	int 	sc_pa_pixmap;		/* phys. addr. of color plane */
	int 	sc_blanked;		/* true if blanked */

	union bt_cmap *sc_btcm;		/* Brooktree color map */
	struct soft_cmap sc_cmap;	/* Generic soft colormap. */
};

/* autoconfiguration driver */
static void	cg4attach(struct device *, struct device *, void *);
static int	cg4match(struct device *, void *, void *);

struct cfattach cgfour_ca = {
	sizeof(struct cg4_softc), cg4match, cg4attach
};

struct cfdriver cgfour_cd = {
	NULL, "cgfour", DV_DULL
};

/* frame buffer generic driver */

static int	cg4gattr(struct fbdevice *, struct fbgattr *);
static int	cg4gvideo(struct fbdevice *, int *);
static int	cg4svideo(struct fbdevice *, int *);
static int	cg4getcmap(struct fbdevice *, struct fbcmap *);
static int	cg4putcmap(struct fbdevice *, struct fbcmap *);

static void	cg4a_init(struct cg4_softc *);
static void	cg4a_svideo(struct cg4_softc *, int);
static void	cg4a_ldcmap(struct cg4_softc *);

static void	cg4b_init(struct cg4_softc *);
static void	cg4b_svideo(struct cg4_softc *, int);
static void	cg4b_ldcmap(struct cg4_softc *);

static struct fbdriver cg4_fbdriver = {
	cg4open, cg4close, cg4mmap, cg4gattr,
	cg4gvideo, cg4svideo,
	cg4getcmap, cg4putcmap
};

/*
 * Match a cg4.
 */
static int
cg4match(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct confargs *ca = args;
	int paddr;

	/* XXX: Huge hack due to lack of probe info... */
	/* XXX: Machines that might have a cg4 (gag). */
	/* XXX: Need info on the "P4" register... */
	switch (cpu_machine_id) {

	case SUN3_MACH_110:
		/* XXX: Assume type A. */
		if (ca->ca_paddr == -1)
			ca->ca_paddr = CG4A_DEF_BASE;
		if (bus_peek(ca->ca_bustype, ca->ca_paddr, 1) == -1)
			return (0);
		if (bus_peek(BUS_OBIO, CG4A_OBIO_CMAP, 1) == -1)
			return (0);
		break;

	case SUN3_MACH_60:
		/* XXX: Assume type A. */
		if (ca->ca_paddr == -1)
			ca->ca_paddr = CG4B_DEF_BASE;
		paddr = ca->ca_paddr;
		if (bus_peek(ca->ca_bustype, paddr, 1) == -1)
			return (0);
        /* Make sure we're color */
		paddr += CG4B_OFF_PIXMAP;
		if (bus_peek(ca->ca_bustype, paddr, 1) == -1)
			return (0);
		break;

	default:
		return (0);
	}

	return (1);
}

/*
 * Attach a display.  We need to notice if it is the console, too.
 */
static void
cg4attach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct cg4_softc *sc = (struct cg4_softc *)self;
	struct fbdevice *fb = &sc->sc_fb;
	struct confargs *ca = args;
	struct fbtype *fbt;

	/* XXX: should do better than this... */
	switch (cpu_machine_id) {
	case SUN3_MACH_110:
		sc->sc_cg4type = CG4_TYPE_A;
		break;
	case SUN3_MACH_60:
	default:
		sc->sc_cg4type = CG4_TYPE_B;
	}

	fb->fb_driver = &cg4_fbdriver;
	fb->fb_private = sc;
	fb->fb_name = sc->sc_dev.dv_xname;

	fbt = &fb->fb_fbtype;
	fbt->fb_type = FBTYPE_SUN4COLOR;
	fbt->fb_depth = 8;
	fbt->fb_cmsize = 256;

	fbt->fb_width = 1152;
	fbt->fb_height = 900;
	fbt->fb_size = CG4_MMAP_SIZE;

	switch (sc->sc_cg4type) {
	case CG4_TYPE_A:	/* Sun3/110 */
		sc->sc_va_cmap = bus_mapin(BUS_OBIO, CG4A_OBIO_CMAP,
		                           sizeof(struct amd_regs));
		sc->sc_pa_overlay = ca->ca_paddr + CG4A_OFF_OVERLAY;
		sc->sc_pa_enable  = ca->ca_paddr + CG4A_OFF_ENABLE;
		sc->sc_pa_pixmap  = ca->ca_paddr + CG4A_OFF_PIXMAP;
		sc->sc_btcm = NULL;
		cg4a_init(sc);
		break;

	case CG4_TYPE_B:	/* Sun3/60 */
	default:
		sc->sc_va_cmap = (struct bt_regs *)
			bus_mapin(ca->ca_bustype, ca->ca_paddr,
					  sizeof(struct bt_regs *));
		sc->sc_pa_overlay = ca->ca_paddr + CG4B_OFF_OVERLAY;
		sc->sc_pa_enable  = ca->ca_paddr + CG4B_OFF_ENABLE;
		sc->sc_pa_pixmap  = ca->ca_paddr + CG4B_OFF_PIXMAP;
		sc->sc_btcm = malloc(sizeof(union bt_cmap), M_DEVBUF, M_WAITOK);
		cg4b_init(sc);
		break;
	}

	printf(" (%dx%d)\n", fbt->fb_width, fbt->fb_height);
	fb_attach(fb, 4);
}

int
cg4open(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{
	int unit = minor(dev);

	if (unit >= cgfour_cd.cd_ndevs || cgfour_cd.cd_devs[unit] == NULL)
		return (ENXIO);
	return (0);
}

int
cg4close(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{

	return (0);
}

int
cg4ioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct cg4_softc *sc = cgfour_cd.cd_devs[minor(dev)];

	return (fbioctlfb(&sc->sc_fb, cmd, data));
}

/*
 * Return the address that would map the given device at the given
 * offset, allowing for the given protection, or return -1 for error.
 *
 * X11 expects its mmap'd region to look like this:
 * 	128k overlay data memory
 * 	128k overlay enable bitmap
 * 	1024k color memory
 *
 * The hardware really looks like this (starting at ca_paddr)
 *  4 bytes Brooktree DAC registers
 *  2MB-4 gap
 * 	128k overlay memory
 * 	1920k gap
 * 	128k overlay-enable bitmap
 * 	1920k gap
 * 	1024k color memory
 */
paddr_t
cg4mmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	struct cg4_softc *sc = cgfour_cd.cd_devs[minor(dev)];
	register int physbase;

	if (off & PGOFSET)
		panic("cg4mmap");

	if ((unsigned)off >= CG4_MMAP_SIZE)
		return (-1);

	if (off < 0x40000) {
		if (off < 0x20000) {
			physbase = sc->sc_pa_overlay;
		} else {
			/* enable plane */
			off -= 0x20000;
			physbase = sc->sc_pa_enable;
		}
	} else {
		/* pixel map */
		off -= 0x40000;
		physbase = sc->sc_pa_pixmap;
	}

	/*
	 * I turned on PMAP_NC here to disable the cache as I was
	 * getting horribly broken behaviour with it on.
	 */
	return ((physbase + off) | PMAP_NC);
}

/*
 * Internal ioctl functions.
 */

/* FBIOGATTR: */
static int
cg4gattr(fb, fba)
	struct fbdevice *fb;
	struct fbgattr *fba;
{

	fba->real_type = fb->fb_fbtype.fb_type;
	fba->owner = 0;		/* XXX - TIOCCONS stuff? */
	fba->fbtype = fb->fb_fbtype;
	fba->sattr.flags = 0;
	fba->sattr.emu_type = fb->fb_fbtype.fb_type;
	fba->sattr.dev_specific[0] = -1;
	fba->emu_types[0] = fb->fb_fbtype.fb_type;
	fba->emu_types[1] = -1;
	return (0);
}

/* FBIOGVIDEO: */
static int
cg4gvideo(fb, on)
	struct fbdevice *fb;
	int *on;
{
	struct cg4_softc *sc = fb->fb_private;

	*on = !sc->sc_blanked;
	return (0);
}

/* FBIOSVIDEO: */
static int
cg4svideo(fb, on)
	struct fbdevice *fb;
	int *on;
{
	struct cg4_softc *sc = fb->fb_private;
	int state;

	state = *on;
	if (sc->sc_cg4type == CG4_TYPE_A)
		cg4a_svideo(sc, state);
	else
		cg4b_svideo(sc, state);
	return (0);
}

/*
 * FBIOGETCMAP:
 * Copy current colormap out to user space.
 */
static int
cg4getcmap(fb, fbcm)
	struct fbdevice *fb;
	struct fbcmap *fbcm;
{
	struct cg4_softc *sc = fb->fb_private;
	struct soft_cmap *cm = &sc->sc_cmap;
	u_int start, count;
	int error;

	start = fbcm->index;
	count = fbcm->count;
	if (start >= CMAP_SIZE || count > CMAP_SIZE - start)
		return (EINVAL);

	if ((error = copyout(&cm->r[start], fbcm->red, count)) != 0)
		return (error);

	if ((error = copyout(&cm->g[start], fbcm->green, count)) != 0)
		return (error);

	if ((error = copyout(&cm->b[start], fbcm->blue, count)) != 0)
		return (error);

	return (0);
}

/*
 * FBIOPUTCMAP:
 * Copy new colormap from user space and load.
 */
static int 
cg4putcmap(fb, fbcm)
	struct fbdevice *fb;
	struct fbcmap *fbcm;
{
	struct cg4_softc *sc = fb->fb_private;
	struct soft_cmap *cm = &sc->sc_cmap;
	u_int start, count;
	int error;

	start = fbcm->index;
	count = fbcm->count;
	if (start >= CMAP_SIZE || count > CMAP_SIZE - start)
		return (EINVAL);

	if ((error = copyin(fbcm->red, &cm->r[start], count)) != 0)
		return (error);

	if ((error = copyin(fbcm->green, &cm->g[start], count)) != 0)
		return (error);

	if ((error = copyin(fbcm->blue, &cm->b[start], count)) != 0)
		return (error);

	if (sc->sc_cg4type == CG4_TYPE_A)
		cg4a_ldcmap(sc);
	else
		cg4b_ldcmap(sc);

	return (0);
}

/****************************************************************
 * Routines for the "Type A" hardware
 ****************************************************************/

static void
cg4a_init(sc)
	struct cg4_softc *sc;
{
	volatile struct amd_regs *ar = sc->sc_va_cmap;
	struct soft_cmap *cm = &sc->sc_cmap;
	int i;

	/* grab initial (current) color map */
	for(i = 0; i < 256; i++) {
		cm->r[i] = ar->r[i];
		cm->g[i] = ar->g[i];
		cm->b[i] = ar->b[i];
	}
}

static void
cg4a_ldcmap(sc)
	struct cg4_softc *sc;
{
	volatile struct amd_regs *ar = sc->sc_va_cmap;
	struct soft_cmap *cm = &sc->sc_cmap;
	int i;

	/*
	 * Now blast them into the chip!
	 * XXX Should use retrace interrupt!
	 * Just set a "need load" bit and let the
	 * retrace interrupt handler do the work.
	 */
	for(i = 0; i < 256; i++) {
		ar->r[i] = cm->r[i];
		ar->g[i] = cm->g[i];
		ar->b[i] = cm->b[i];
	}
}

static void
cg4a_svideo(sc, on)
	struct cg4_softc *sc;
	int on;
{
	volatile struct amd_regs *ar = sc->sc_va_cmap;
	int i;

	if ((on == 0) && (sc->sc_blanked == 0)) {
		/* Turn OFF video (make it blank). */
		sc->sc_blanked = 1;
		/* Load fake "all zero" colormap. */
		for (i = 0; i < 256; i++) {
			ar->r[i] = 0;
			ar->g[i] = 0;
			ar->b[i] = 0;
		}
	}

	if ((on != 0) && (sc->sc_blanked != 0)) {
		/* Turn video back ON (unblank). */
		sc->sc_blanked = 0;
		/* Restore normal colormap. */
		cg4a_ldcmap(sc);
	}
}


/****************************************************************
 * Routines for the "Type B" hardware
 ****************************************************************/

static void
cg4b_init(sc)
	struct cg4_softc *sc;
{
	volatile struct bt_regs *bt = sc->sc_va_cmap;
	struct soft_cmap *cm = &sc->sc_cmap;
	union bt_cmap *btcm = sc->sc_btcm;
	int i;

	/*
	 * BT458 chip initialization as described in Brooktree's
	 * 1993 Graphics and Imaging Product Databook (DB004-1/93).
	 */
	bt->bt_addr = 0x04;	/* select read mask register */
	bt->bt_ctrl = 0xff;	/* all planes on */
	bt->bt_addr = 0x05;	/* select blink mask register */
	bt->bt_ctrl = 0x00;	/* all planes non-blinking */
	bt->bt_addr = 0x06;	/* select command register */
	bt->bt_ctrl = 0x43;	/* palette enabled, overlay planes enabled */
	bt->bt_addr = 0x07;	/* select test register */
	bt->bt_ctrl = 0x00;	/* set test mode */

	/* grab initial (current) color map */
	bt->bt_addr = 0;
	for (i = 0; i < (256 * 3 / 4); i++) {
		btcm->cm_chip[i] = bt->bt_cmap;
	}

	/* Transpose into S/W form. */
	for (i = 0; i < 256; i++) {
		cm->r[i] = btcm->cm_map[i][0];
		cm->g[i] = btcm->cm_map[i][1];
		cm->b[i] = btcm->cm_map[i][2];
	}
}

static void
cg4b_ldcmap(sc)
	struct cg4_softc *sc;
{
	volatile struct bt_regs *bt = sc->sc_va_cmap;
	struct soft_cmap *cm = &sc->sc_cmap;
	union bt_cmap *btcm = sc->sc_btcm;
	int i;

	/*
	 * Now blast them into the chip!
	 * XXX Should use retrace interrupt!
	 * Just set a "need load" bit and let the
	 * retrace interrupt handler do the work.
	 */

	/* Transpose into H/W form. */
	for (i = 0; i < 256; i++) {
		btcm->cm_map[i][0] = cm->r[i];
		btcm->cm_map[i][1] = cm->g[i];
		btcm->cm_map[i][2] = cm->b[i];
	}

	bt->bt_addr = 0;
	for (i = 0; i < (256 * 3 / 4); i++) {
		bt->bt_cmap = btcm->cm_chip[i];
	}
}

static void
cg4b_svideo(sc, on)
	struct cg4_softc *sc;
	int on;
{
	volatile struct bt_regs *bt = sc->sc_va_cmap;
	int i;

	if ((on == 0) && (sc->sc_blanked == 0)) {
		/* Turn OFF video (make it blank). */
		sc->sc_blanked = 1;
		/* Load fake "all zero" colormap. */
		bt->bt_addr = 0;
		for (i = 0; i < (256 * 3 / 4); i++)
			bt->bt_cmap = 0;
	}

	if ((on != 0) && (sc->sc_blanked != 0)) {
		/* Turn video back ON (unblank). */
		sc->sc_blanked = 0;
		/* Restore normal colormap. */
		cg4b_ldcmap(sc);
	}
}

@


1.12
log
@Do correct bounds checking in get/set/put cmap routines.  A few of
these check were already OK but have been modified for consistency.
Problem found by Silvio Cesare.
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.11 2002/03/14 01:26:46 millert Exp $	*/
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.10 2001/11/06 19:53:16 miod Exp $	*/
d406 2
a407 1
	int error, start, count;
d411 1
a411 2
	if ((start < 0) || (start >= CMAP_SIZE) ||
	    (count < 0) || (start + count > CMAP_SIZE) )
d437 2
a438 1
	int error, start, count;
d442 1
a442 2
	if ((start < 0) || (start >= CMAP_SIZE) ||
	    (count < 0) || (start + count > CMAP_SIZE) )
@


1.10
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.9 2001/11/01 12:13:46 art Exp $	*/
d111 2
a112 2
static void	cg4attach __P((struct device *, struct device *, void *));
static int	cg4match __P((struct device *, void *, void *));
d124 13
a136 13
static int	cg4gattr   __P((struct fbdevice *, struct fbgattr *));
static int	cg4gvideo  __P((struct fbdevice *, int *));
static int	cg4svideo  __P((struct fbdevice *, int *));
static int	cg4getcmap __P((struct fbdevice *, struct fbcmap *));
static int	cg4putcmap __P((struct fbdevice *, struct fbcmap *));

static void	cg4a_init   __P((struct cg4_softc *));
static void	cg4a_svideo __P((struct cg4_softc *, int));
static void	cg4a_ldcmap __P((struct cg4_softc *));

static void	cg4b_init   __P((struct cg4_softc *));
static void	cg4b_svideo __P((struct cg4_softc *, int));
static void	cg4b_ldcmap __P((struct cg4_softc *));
@


1.10.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.10 2001/11/06 19:53:16 miod Exp $	*/
d111 2
a112 2
static void	cg4attach(struct device *, struct device *, void *);
static int	cg4match(struct device *, void *, void *);
d124 13
a136 13
static int	cg4gattr(struct fbdevice *, struct fbgattr *);
static int	cg4gvideo(struct fbdevice *, int *);
static int	cg4svideo(struct fbdevice *, int *);
static int	cg4getcmap(struct fbdevice *, struct fbcmap *);
static int	cg4putcmap(struct fbdevice *, struct fbcmap *);

static void	cg4a_init(struct cg4_softc *);
static void	cg4a_svideo(struct cg4_softc *, int);
static void	cg4a_ldcmap(struct cg4_softc *);

static void	cg4b_init(struct cg4_softc *);
static void	cg4b_svideo(struct cg4_softc *, int);
static void	cg4b_ldcmap(struct cg4_softc *);
@


1.10.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.10.2.1 2002/06/11 03:39:01 art Exp $	*/
d406 1
a406 2
	u_int start, count;
	int error;
d410 2
a411 1
	if (start >= CMAP_SIZE || count > CMAP_SIZE - start)
d437 1
a437 2
	u_int start, count;
	int error;
d441 2
a442 1
	if (start >= CMAP_SIZE || count > CMAP_SIZE - start)
@


1.10.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.10.2.2 2002/10/29 00:28:12 art Exp $	*/
@


1.9
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.8 1997/01/16 04:03:43 kstailey Exp $	*/
d71 1
a71 1
#include <vm/vm.h>
@


1.8
log
@all modified code can now compile with -Werror -Wall -Wstrict-prototypes
CAVEAT: turning off -O2 produces warnings about "defined but not used"
        functions from libkern.h

removed internal copy of gets() replaced with call to getsn()

fixed #ifdef ... #endif mismatch in swapgeneric.c

fixed printf() in if_ie.c that was missing an argument

fixed si.c so that it compiles

added tags to all edited files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d308 1
a308 1
int
d311 1
a311 1
	register int off;
@


1.8.14.1
log
@Merge in -current
@
text
@d71 1
a71 1
#include <uvm/uvm_extern.h>
d308 1
a308 1
paddr_t
d311 1
a311 1
	off_t off;
@


1.8.14.2
log
@Merge in -current from about a week ago
@
text
@d111 2
a112 2
static void	cg4attach(struct device *, struct device *, void *);
static int	cg4match(struct device *, void *, void *);
d124 13
a136 13
static int	cg4gattr(struct fbdevice *, struct fbgattr *);
static int	cg4gvideo(struct fbdevice *, int *);
static int	cg4svideo(struct fbdevice *, int *);
static int	cg4getcmap(struct fbdevice *, struct fbcmap *);
static int	cg4putcmap(struct fbdevice *, struct fbcmap *);

static void	cg4a_init(struct cg4_softc *);
static void	cg4a_svideo(struct cg4_softc *, int);
static void	cg4a_ldcmap(struct cg4_softc *);

static void	cg4b_init(struct cg4_softc *);
static void	cg4b_svideo(struct cg4_softc *, int);
static void	cg4b_ldcmap(struct cg4_softc *);
@


1.8.14.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: cg4.c,v 1.8.14.2 2002/03/28 11:26:45 niklas Exp $	*/
@


1.7
log
@backed out prev. netbsd merge except for smaller proc table
@
text
@d1 1
d69 1
d73 1
a122 1
int cg4open(), cg4close(), cg4mmap();
d141 2
a142 1
	cg4getcmap, cg4putcmap };
d236 1
a236 1
		
d298 1
a298 1
 * 
d349 2
a350 1
static int  cg4gattr(fb, fba)
d367 2
a368 1
static int  cg4gvideo(fb, on)
d379 2
a380 1
static int cg4svideo(fb, on)
d399 2
a400 1
static int cg4getcmap(fb, fbcm)
d430 2
a431 1
static int cg4putcmap(fb, fbcm)
@


1.6
log
@sync with 17-Dec-1996
@
text
@d1 1
a1 1
/*	$NetBSD: cg4.c,v 1.12 1996/12/17 21:10:39 gwr Exp $	*/
a62 1
#include <sys/conf.h>
a66 1
#include <sys/proc.h>
a70 1
#include <machine/autoconf.h>
d73 1
a73 1
#include <machine/idprom.h>
a80 2
cdev_decl(cg4);

d119 8
a126 5
static int	cg4gattr   __P((struct fbdevice *, void *));
static int	cg4gvideo  __P((struct fbdevice *, void *));
static int	cg4svideo  __P((struct fbdevice *, void *));
static int	cg4getcmap __P((struct fbdevice *, void *));
static int	cg4putcmap __P((struct fbdevice *, void *));
d346 1
a346 1
static int  cg4gattr(fb, data)
d348 1
a348 1
	void *data;
a349 1
	struct fbgattr *fba = data;
d363 1
a363 1
static int  cg4gvideo(fb, data)
d365 1
a365 1
	void *data;
a366 1
	int *on = data;
d374 1
a374 1
static int cg4svideo(fb, data)
d376 1
a376 1
	void *data;
a377 1
	int *on = data;
d393 1
a393 1
static int cg4getcmap(fb, data)
d395 1
a395 1
	void *data;
a396 1
	struct fbcmap *fbcm = data;
d423 1
a423 1
static int cg4putcmap(fb, data)
d425 1
a425 1
	void *data;
a426 1
	struct fbcmap *fbcm = data;
@


1.5
log
@sync with NetBSD -- copyright changes only
@
text
@d1 1
a1 1
/*	$NetBSD: cg4.c,v 1.11 1996/10/29 19:54:19 gwr Exp $	*/
d63 1
d68 1
d73 1
d76 1
a76 1
#include <machine/autoconf.h>
d84 2
d124 5
a128 8
/* frame buffer generic driver */
int cg4open(), cg4close(), cg4mmap();

static int	cg4gattr   __P((struct fbdevice *, struct fbgattr *));
static int	cg4gvideo  __P((struct fbdevice *, int *));
static int	cg4svideo  __P((struct fbdevice *, int *));
static int	cg4getcmap __P((struct fbdevice *, struct fbcmap *));
static int	cg4putcmap __P((struct fbdevice *, struct fbcmap *));
d348 1
a348 1
static int  cg4gattr(fb, fba)
d350 1
a350 1
	struct fbgattr *fba;
d352 1
d366 1
a366 1
static int  cg4gvideo(fb, on)
d368 1
a368 1
	int *on;
d370 1
d378 1
a378 1
static int cg4svideo(fb, on)
d380 1
a380 1
	int *on;
d382 1
d398 1
a398 1
static int cg4getcmap(fb, fbcm)
d400 1
a400 1
	struct fbcmap *fbcm;
d402 1
d429 1
a429 1
static int cg4putcmap(fb, fbcm)
d431 1
a431 1
	struct fbcmap *fbcm;
d433 1
@


1.4
log
@sync with NetBSD
@
text
@d1 1
a1 1
/*	$NetBSD: cg4.c,v 1.7.4.1 1996/08/08 23:14:47 gwr Exp $	*/
@


1.3
log
@sync + our changes
@
text
@d50 5
a54 1
 * Does not handle interrupts, even though they can occur.
d56 3
a58 1
 * XXX should defer colormap updates to vertical retrace interrupts
d62 1
d81 2
d85 7
d96 5
a100 2
	volatile struct bt_regs *sc_bt;	/* Brooktree registers */
	int 	sc_phys;		/* display RAM (phys addr) */
d102 3
a104 1
	union	bt_cmap sc_cmap;	/* Brooktree color map */
d122 3
a124 3
static int  cg4gattr __P((struct fbdevice *, struct fbgattr *));
static int  cg4gvideo __P((struct fbdevice *, int *));
static int	cg4svideo __P((struct fbdevice *, int *));
d128 9
a136 1
static struct fbdriver cg4fbdriver = {
a140 2
static void cg4loadcmap __P((struct cg4_softc *, int, int));

d150 1
a150 1
	int paddr, x;
d152 3
a154 1
	/* XXX - Huge hack due to lack of probe info... */
d156 11
a166 2
		/* Machines that might have a cg4 (gag). */
	case SUN3_MACH_50:
d168 10
a177 1
	case SUN3_MACH_110:
d179 1
a183 13
	if (ca->ca_paddr == -1)
		ca->ca_paddr = 0xFF200000;

	paddr = ca->ca_paddr;
	x = bus_peek(ca->ca_bustype, paddr, 1);
	if (x == -1)
		return (0);

	paddr += CG4REG_PIXMAP;
	x = bus_peek(ca->ca_bustype, paddr, 1);
	if (x == -1)
		return (0);

a198 2
	volatile struct bt_regs *bt;
	int i;
d200 11
a210 1
	fb->fb_driver = &cg4fbdriver;
d223 23
a245 22
	sc->sc_phys = ca->ca_paddr;
	sc->sc_bt = bt = (volatile struct bt_regs *)
		bus_mapin(ca->ca_bustype, ca->ca_paddr,
				  sizeof(struct bt_regs *));

	/* grab initial (current) color map */
	bt->bt_addr = 0;
	for (i = 0; i < (256 * 3 / 4); i++)
		sc->sc_cmap.cm_chip[i] = bt->bt_cmap;

	/*
	 * BT458 chip initialization as described in Brooktree's
	 * 1993 Graphics and Imaging Product Databook (DB004-1/93).
	 */
	bt->bt_addr = 0x04;	/* select read mask register */
	bt->bt_ctrl = 0xff;	/* all planes on */
	bt->bt_addr = 0x05;	/* select blink mask register */
	bt->bt_ctrl = 0x00;	/* all planes non-blinking */
	bt->bt_addr = 0x06;	/* select command register */
	bt->bt_ctrl = 0x43;	/* palette enabled, overlay planes enabled */
	bt->bt_addr = 0x07;	/* select test register */
	bt->bt_ctrl = 0x00;	/* set test mode */
d292 2
a293 2
 * 	128k overlay memory
 * 	128k overlay-enable bitmap
a319 1
	physbase = sc->sc_phys;
d322 1
a322 2
			/* overlay plane */
			physbase += CG4REG_OVERLAY;
d326 1
a326 1
			physbase += CG4REG_ENABLE;
d331 1
a331 1
		physbase += CG4REG_PIXMAP;
d379 71
a449 1
	register volatile struct bt_regs *bt = sc->sc_bt;
d451 51
a501 12
	if ((*on == 0) && (sc->sc_blanked == 0)) {
		/* Turn OFF video (blank it). */
		bt->bt_addr = 0x06;	/* command reg */
		bt->bt_ctrl = 0x70;	/* overlay plane */
		bt->bt_addr = 0x04;	/* read mask */
		bt->bt_ctrl = 0x00;	/* color planes */
		/*
		 * Set color 0 to black -- note that this overwrites
		 * R of color 1.
		 */
		bt->bt_addr = 0;
		bt->bt_cmap = 0;
d503 2
d506 6
d514 1
a514 1
	if ((*on != 0) && (sc->sc_blanked != 0)) {
d517 9
d527 27
a553 3
		/* restore color 0 (and R of color 1) */
		bt->bt_addr = 0;
		bt->bt_cmap = sc->sc_cmap.cm_chip[0];
d555 5
a559 5
		/* restore read mask */
		bt->bt_addr = 0x06;	/* command reg */
		bt->bt_ctrl = 0x73;	/* overlay plane */
		bt->bt_addr = 0x04;	/* read mask */
		bt->bt_ctrl = 0xff;	/* color planes */
a560 1
	return (0);
d563 3
a565 4
/* FBIOGETCMAP: */
static int cg4getcmap(fb, cmap)
	struct fbdevice *fb;
	struct fbcmap *cmap;
d567 4
a570 1
	struct cg4_softc *sc = fb->fb_private;
d572 6
a577 2
	return (bt_getcmap(cmap, &sc->sc_cmap, 256));
}
d579 6
a584 7
/* FBIOPUTCMAP: */
static int cg4putcmap(fb, cmap)
	struct fbdevice *fb;
	struct fbcmap *cmap;
{
	struct cg4_softc *sc = fb->fb_private;
	int error;
d586 3
a588 6
	/* copy to software map */
	error = bt_putcmap(cmap, &sc->sc_cmap, 256);
	if (error == 0) {
		/* now blast them into the chip */
		/* XXX should use retrace interrupt */
		cg4loadcmap(sc, cmap->index, cmap->count);
a589 1
	return (error);
a591 3
/*
 * Load a subset of the current (new) colormap into the Brooktree DAC.
 */
d593 1
a593 1
cg4loadcmap(sc, start, ncolors)
d595 1
a595 1
	int start, ncolors;
d597 18
a614 10
	volatile struct bt_regs *bt;
	u_int *ip;
	int count;

	ip = &sc->sc_cmap.cm_chip[BT_D4M3(start)];	/* start/4 * 3 */
	count = BT_D4M3(start + ncolors - 1) - BT_D4M3(start) + 3;
	bt = sc->sc_bt;
	bt->bt_addr = BT_D4M4(start);
	while (--count >= 0)
		bt->bt_cmap = *ip++;
d616 1
@


1.2
log
@sync with 0430.
@
text
@d1 1
a1 1
/*	$NetBSD: cg4.c,v 1.7 1996/03/17 02:03:45 thorpej Exp $	*/
d165 1
a165 1
	int i, ramsize, pa;
d181 1
a181 1
	sc->sc_bt = (struct bt_regs *)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cg4.c,v 1.6 1995/04/13 21:51:34 gwr Exp $	*/
d90 7
a96 3
struct cfdriver cgfourcd = {
	NULL, "cgfour", cg4match, cg4attach,
	DV_DULL, sizeof(struct cg4_softc) };
d215 1
a215 1
	if (unit >= cgfourcd.cd_ndevs || cgfourcd.cd_devs[unit] == NULL)
d238 1
a238 1
	struct cg4_softc *sc = cgfourcd.cd_devs[minor(dev)];
d267 1
a267 1
	struct cg4_softc *sc = cgfourcd.cd_devs[minor(dev)];
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
