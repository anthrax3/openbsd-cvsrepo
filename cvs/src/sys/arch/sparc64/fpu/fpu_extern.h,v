head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.40
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.38
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.34
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.30
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.32
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.24
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.28
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.26
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.22
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.20
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.18
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	OPENBSD_5_0:1.6.0.14
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.12
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2008.06.26.05.42.13;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.21.19.24.38;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.03.15.22.06;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.09.22.44.44;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.09.08.22.33.51;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: fpu_extern.h,v 1.5 2006/06/21 19:24:38 jason Exp $	*/
/*	$NetBSD: fpu_extern.h,v 1.4 2000/08/03 18:32:08 eeh Exp $	*/

/*-
 * Copyright (c) 1995 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Christos Zoulas.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

struct proc;
struct fpstate64;
struct trapframe64;
union instr;
struct fpemu;
struct fpn;

/* fpu.c */
void fpu_cleanup(struct proc *, struct fpstate64 *);
int fpu_emulate(struct proc *, struct trapframe64 *, struct fpstate64 *);
int fpu_execute(struct proc *, struct fpemu *, union instr);

/* fpu_add.c */
struct fpn *fpu_add(struct fpemu *);

/* fpu_compare.c */
void fpu_compare(struct fpemu *, int);

/* fpu_div.c */
struct fpn *fpu_div(struct fpemu *);

/* fpu_explode.c */
int fpu_itof(struct fpn *, u_int);
int fpu_xtof(struct fpn *, u_int64_t);
int fpu_stof(struct fpn *, u_int);
int fpu_dtof(struct fpn *, u_int, u_int );
int fpu_qtof(struct fpn *, u_int, u_int , u_int , u_int );
void fpu_explode(struct fpemu *, struct fpn *, int, int );

/* fpu_implode.c */
u_int fpu_ftoi(struct fpemu *, struct fpn *);
u_int fpu_ftox(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftos(struct fpemu *, struct fpn *);
u_int fpu_ftod(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftoq(struct fpemu *, struct fpn *, u_int *);

/* fpu_mul.c */
struct fpn *fpu_mul(struct fpemu *);

/* fpu_sqrt.c */
struct fpn *fpu_sqrt(struct fpemu *);

/* fpu_subr.c */
int fpu_shr(register struct fpn *, register int);
void fpu_norm(register struct fpn *);
struct fpn *fpu_newnan(register struct fpemu *);
@


1.5
log
@There was hope, at one time, of sharing fpu/ with sparc.  That's still
possible, but not with #ifdef SUN4U all over the place.  The define should
be _v9 or __sparc64__ since it will equally well apply to all v9 machines.
We'll burn that bridge before we cross it.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.4 2002/08/03 15:22:06 jason Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@Don't depend on curproc, pass the proc * down to the functions that need it (fmovr/fmovcc).
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.3 2002/03/14 01:26:45 millert Exp $	*/
a40 4
#ifndef SUN4U
struct fpstate;
struct trapframe;
#else /* SUN4U */
a42 1
#endif /* SUN4U */
a47 4
#ifndef SUN4U
void fpu_cleanup(struct proc *, struct fpstate *);
int fpu_emulate(struct proc *, struct trapframe *, struct fpstate *);
#else /* SUN4U */
a49 1
#endif /* SUN4U */
a62 1
#ifdef SUN4U
a63 1
#endif /* SUN4U */
a70 1
#ifdef SUN4U
a71 1
#endif /* SUN4U */
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.2 2001/09/09 22:44:44 jason Exp $	*/
d60 1
a60 1
int fpu_execute(struct fpemu *, union instr);
@


1.2
log
@only one prototype for fpu_implode necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.1 2001/09/08 22:33:51 jason Exp $	*/
d54 2
a55 2
void fpu_cleanup __P((struct proc *, struct fpstate *));
int fpu_emulate __P((struct proc *, struct trapframe *, struct fpstate *));
d57 2
a58 2
void fpu_cleanup __P((struct proc *, struct fpstate64 *));
int fpu_emulate __P((struct proc *, struct trapframe64 *, struct fpstate64 *));
d60 1
a60 1
int fpu_execute __P((struct fpemu *, union instr));
d63 1
a63 1
struct fpn *fpu_add __P((struct fpemu *));
d66 1
a66 1
void fpu_compare __P((struct fpemu *, int));
d69 1
a69 1
struct fpn *fpu_div __P((struct fpemu *));
d72 1
a72 1
int fpu_itof __P((struct fpn *, u_int));
d74 1
a74 1
int fpu_xtof __P((struct fpn *, u_int64_t));
d76 4
a79 4
int fpu_stof __P((struct fpn *, u_int));
int fpu_dtof __P((struct fpn *, u_int, u_int ));
int fpu_qtof __P((struct fpn *, u_int, u_int , u_int , u_int ));
void fpu_explode __P((struct fpemu *, struct fpn *, int, int ));
d82 1
a82 1
u_int fpu_ftoi __P((struct fpemu *, struct fpn *));
d84 1
a84 1
u_int fpu_ftox __P((struct fpemu *, struct fpn *, u_int *));
d86 3
a88 3
u_int fpu_ftos __P((struct fpemu *, struct fpn *));
u_int fpu_ftod __P((struct fpemu *, struct fpn *, u_int *));
u_int fpu_ftoq __P((struct fpemu *, struct fpn *, u_int *));
d91 1
a91 1
struct fpn *fpu_mul __P((struct fpemu *));
d94 1
a94 1
struct fpn *fpu_sqrt __P((struct fpemu *));
d97 3
a99 3
int fpu_shr __P((register struct fpn *, register int));
void fpu_norm __P((register struct fpn *));
struct fpn *fpu_newnan __P((register struct fpemu *));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.2 2001/09/09 22:44:44 jason Exp $	*/
d54 2
a55 2
void fpu_cleanup(struct proc *, struct fpstate *);
int fpu_emulate(struct proc *, struct trapframe *, struct fpstate *);
d57 2
a58 2
void fpu_cleanup(struct proc *, struct fpstate64 *);
int fpu_emulate(struct proc *, struct trapframe64 *, struct fpstate64 *);
d60 1
a60 1
int fpu_execute(struct fpemu *, union instr);
d63 1
a63 1
struct fpn *fpu_add(struct fpemu *);
d66 1
a66 1
void fpu_compare(struct fpemu *, int);
d69 1
a69 1
struct fpn *fpu_div(struct fpemu *);
d72 1
a72 1
int fpu_itof(struct fpn *, u_int);
d74 1
a74 1
int fpu_xtof(struct fpn *, u_int64_t);
d76 4
a79 4
int fpu_stof(struct fpn *, u_int);
int fpu_dtof(struct fpn *, u_int, u_int );
int fpu_qtof(struct fpn *, u_int, u_int , u_int , u_int );
void fpu_explode(struct fpemu *, struct fpn *, int, int );
d82 1
a82 1
u_int fpu_ftoi(struct fpemu *, struct fpn *);
d84 1
a84 1
u_int fpu_ftox(struct fpemu *, struct fpn *, u_int *);
d86 3
a88 3
u_int fpu_ftos(struct fpemu *, struct fpn *);
u_int fpu_ftod(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftoq(struct fpemu *, struct fpn *, u_int *);
d91 1
a91 1
struct fpn *fpu_mul(struct fpemu *);
d94 1
a94 1
struct fpn *fpu_sqrt(struct fpemu *);
d97 3
a99 3
int fpu_shr(register struct fpn *, register int);
void fpu_norm(register struct fpn *);
struct fpn *fpu_newnan(register struct fpemu *);
@


1.2.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.2.6.1 2002/06/11 03:38:43 art Exp $	*/
d60 1
a60 1
int fpu_execute(struct proc *, struct fpemu *, union instr);
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d54 2
a55 2
void fpu_cleanup(struct proc *, struct fpstate *);
int fpu_emulate(struct proc *, struct trapframe *, struct fpstate *);
d57 2
a58 2
void fpu_cleanup(struct proc *, struct fpstate64 *);
int fpu_emulate(struct proc *, struct trapframe64 *, struct fpstate64 *);
d60 1
a60 1
int fpu_execute(struct fpemu *, union instr);
d63 1
a63 1
struct fpn *fpu_add(struct fpemu *);
d66 1
a66 1
void fpu_compare(struct fpemu *, int);
d69 1
a69 1
struct fpn *fpu_div(struct fpemu *);
d72 1
a72 1
int fpu_itof(struct fpn *, u_int);
d74 1
a74 1
int fpu_xtof(struct fpn *, u_int64_t);
d76 4
a79 4
int fpu_stof(struct fpn *, u_int);
int fpu_dtof(struct fpn *, u_int, u_int );
int fpu_qtof(struct fpn *, u_int, u_int , u_int , u_int );
void fpu_explode(struct fpemu *, struct fpn *, int, int );
d82 1
a82 1
u_int fpu_ftoi(struct fpemu *, struct fpn *);
d84 1
a84 1
u_int fpu_ftox(struct fpemu *, struct fpn *, u_int *);
d86 3
a88 3
u_int fpu_ftos(struct fpemu *, struct fpn *);
u_int fpu_ftod(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftoq(struct fpemu *, struct fpn *, u_int *);
d91 1
a91 1
struct fpn *fpu_mul(struct fpemu *);
d94 1
a94 1
struct fpn *fpu_sqrt(struct fpemu *);
d97 3
a99 3
int fpu_shr(register struct fpn *, register int);
void fpu_norm(register struct fpn *);
struct fpn *fpu_newnan(register struct fpemu *);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d60 1
a60 1
int fpu_execute(struct proc *, struct fpemu *, union instr);
@


1.1
log
@Import netbsd's fpu handling (modified to be separate from sparc); this is
for paranoia's sake (don't want to break sparc32 while hacking on it).
Real work by art.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a88 1
void fpu_implode __P((struct fpemu *, struct fpn *, int, u_int *));
@

