head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.8
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.14
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.10
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.15.0.8
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.6
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.8
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2015.09.19.21.07.04;	author semarie;	state Exp;
branches;
next	1.20;
commitid	9KMPSlP02LD1SpJP;

1.20
date	2015.02.11.01.14.06;	author miod;	state Exp;
branches;
next	1.19;
commitid	1P7DLA0YBfQBUq9v;

1.19
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.18;
commitid	C5iGb36LQxjM60Q3;

1.18
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.17;
commitid	uKVPYMN2MLxdZxzH;

1.17
date	2011.06.17.07.06.46;	author mk;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.22.12.47.26;	author marco;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.12.22.17.52;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.21.12.24.26;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.13.13.50.10;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.10.14.25.08;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.07.14.54.49;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.09.22.27.11;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.31.18.39.22;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.31.04.36.15;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.31.01.12.28;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.31.01.09.32;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.14.04.16.23;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.08.20.20.23.53;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.19.05.21.38;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.42.37;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.06.07.11.14.46;	author ho;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.38.44;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.28.12;	author art;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.05.19.21.46.58;	author tedu;	state Exp;
branches;
next	;

1.3.2.1
date	2002.07.31.16.37.42;	author jason;	state Exp;
branches;
next	;


desc
@@


1.21
log
@trivial "if(x) free(x)" replacement by "free(x)"

ok miod@@
@
text
@/*	$OpenBSD: openprom.c,v 1.20 2015/02/11 01:14:06 miod Exp $	*/
/*	$NetBSD: openprom.c,v 1.4 2002/01/10 06:21:53 briggs Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)openprom.c	8.1 (Berkeley) 6/11/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/fcntl.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>
#include <sys/conf.h>
#include <sys/device.h>

#include <machine/openpromio.h>
#include <machine/autoconf.h>
#include <machine/conf.h>
#include <machine/mdesc.h>

#include <dev/clock_subr.h>
#include <dev/ofw/openfirm.h>

extern todr_chip_handle_t todr_handle;

#define OPROMMAXPARAM		32

static	int lastnode;			/* speed hack */
extern	int optionsnode;		/* node ID of ROM's options */

static int openpromcheckid(int, int);
static int openpromgetstr(int, char *, char **);

int
openpromopen(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{

	return (0);
}

int
openpromclose(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{

	return (0);
}

int
openpromread(dev_t dev, struct uio *uio, int flags)
{
#ifdef SUN4V
	int error;
	size_t len;
	caddr_t v;

	if (minor(dev) != 1)
		return (ENXIO);

	if (uio->uio_offset < 0)
		return (EINVAL);

	while (uio->uio_resid > 0) {
		if (uio->uio_offset >= mdesc_len)
			break;

		v = mdesc + uio->uio_offset;
		len = mdesc_len - uio->uio_offset;
		if (len > uio->uio_resid)
			len = uio->uio_resid;

		error = uiomove(v, len, uio);
		if (error)
			return (error);
	}

	return (0);
#else
	return (ENXIO);
#endif
}

/*
 * Verify target ID is valid (exists in the OPENPROM tree), as
 * listed from node ID sid forward.
 */
static int
openpromcheckid(sid, tid)
	int sid, tid;
{
	for (; sid != 0; sid = OF_peer(sid))
		if (sid == tid || openpromcheckid(OF_child(sid), tid))
			return (1);

	return (0);
}

static int
openpromgetstr(len, user, cpp)
	int len;
	char *user, **cpp;
{
	int error;
	char *cp;

	/* Reject obvious bogus requests */
	if ((u_int)len > (8 * 1024) - 1)
		return (ENAMETOOLONG);

	*cpp = cp = malloc(len + 1, M_TEMP, M_WAITOK);
	error = copyin(user, cp, len);
	cp[len] = '\0';
	return (error);
}

int
openpromioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct opiocdesc *op;
	int node, len, ok, error, s;
	char *name, *value, *nextprop;

	/* All too easy... */
	if (cmd == OPIOCGETOPTNODE) {
		*(int *)data = optionsnode;
		return (0);
	}

	/* Verify node id */
	op = (struct opiocdesc *)data;
	node = op->op_nodeid;
	if (node != 0 && node != lastnode && node != optionsnode) {
		/* Not an easy one, must search for it */
		s = splhigh();
		ok = openpromcheckid(findroot(), node);
		splx(s);
		if (!ok)
			return (EINVAL);
		lastnode = node;
	}

	name = value = NULL;
	error = 0;
	switch (cmd) {

	case OPIOCGET:
		if ((flags & FREAD) == 0)
			return (EBADF);
		if (node == 0)
			return (EINVAL);
		error = openpromgetstr(op->op_namelen, op->op_name, &name);
		if (error)
			break;
		s = splhigh();
		len = getproplen(node, name);
		splx(s);
		if (len > op->op_buflen) {
			error = ENOMEM;
			break;
		}
		op->op_buflen = len;
		/* -1 means no entry; 0 means no value */
		if (len <= 0)
			break;
		value = malloc(len, M_TEMP, M_WAITOK);
		s = splhigh();
		error = getprop(node, name, 1, &len, (void **)&value);
		splx(s);
		if (error != 0)
			break;
		error = copyout(value, op->op_buf, len);
		break;

	case OPIOCSET:
		if ((flags & FWRITE) == 0)
			return (EBADF);
		if (node == 0)
			return (EINVAL);
		error = openpromgetstr(op->op_namelen, op->op_name, &name);
		if (error)
			break;
		error = openpromgetstr(op->op_buflen, op->op_buf, &value);
		if (error)
			break;
		s = splhigh();
		/*
		 * Make sure we can write to nvram, which on many
		 * machines lives on the clock chip (and shares its
		 * address space with the clock).
		 */
		if (todr_handle)
			todr_wenable(todr_handle, 1);
		len = OF_setprop(node, name, value, op->op_buflen + 1);
		if (todr_handle)
			todr_wenable(todr_handle, 0);
		splx(s);
		if (len != op->op_buflen)
			error = EINVAL;
		break;

	case OPIOCNEXTPROP:
		if ((flags & FREAD) == 0)
			return (EBADF);
		if (node == 0)
			return (EINVAL);
		error = openpromgetstr(op->op_namelen, op->op_name, &name);
		if (error)
			break;
		if (op->op_buflen <= 0) {
			error = ENAMETOOLONG;
			break;
		}
		value = nextprop = malloc(OPROMMAXPARAM, M_TEMP,
		    M_WAITOK | M_CANFAIL);
		if (nextprop == NULL) {
			error = ENOMEM;
			break;
		}
		s = splhigh();
		error = OF_nextprop(node, name, nextprop);
		splx(s);
		if (error == -1) {
			error = EINVAL;
			break;
		}
		if (error == 0) {
			char nul = '\0';

			op->op_buflen = 0;
			error = copyout(&nul, op->op_buf, sizeof(char));
			break;
		}
		len = strlen(nextprop);
		if (len > op->op_buflen)
			len = op->op_buflen;
		else
			op->op_buflen = len;
		error = copyout(nextprop, op->op_buf, len);
		break;

	case OPIOCGETNEXT:
		if ((flags & FREAD) == 0)
			return (EBADF);
		s = splhigh();
		node = nextsibling(node);
		splx(s);
		*(int *)data = lastnode = node;
		break;

	case OPIOCGETCHILD:
		if ((flags & FREAD) == 0)
			return (EBADF);
		if (node == 0)
			return (EINVAL);
		s = splhigh();
		node = firstchild(node);
		splx(s);
		*(int *)data = lastnode = node;
		break;

	default:
		return (ENOTTY);
	}

	free(name, M_TEMP, 0);
	free(value, M_TEMP, 0);

	return (error);
}
@


1.20
log
@Convert to uiomove(). ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.18 2014/07/12 18:44:43 tedu Exp $	*/
d312 2
a313 4
	if (name)
		free(name, M_TEMP, 0);
	if (value)
		free(value, M_TEMP, 0);
@


1.19
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d102 3
d114 1
a114 1
		error = uiomovei(v, len, uio);
@


1.18
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.17 2011/06/17 07:06:46 mk Exp $	*/
d111 1
a111 1
		error = uiomove(v, len, uio);
@


1.17
log
@M_WAITOK cleanup of two cases:

1) Allocating with M_WAITOK, checking for NULL, and calling panic() is
pointless (malloc() will panic if it can't allocate) so remove the check
and the call.

2) Allocating with M_WAITOK, checking for NULL, and then gracefully
handling failure to allocate is pointless.  Instead also pass M_CANFAIL
so malloc() doesn't panic so we can actually handle it gracefully.

1) was done using Coccinelle.

Input from oga.

ok miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.16 2011/04/22 12:47:26 marco Exp $	*/
d310 1
a310 1
		free(name, M_TEMP);
d312 1
a312 1
		free(value, M_TEMP);
@


1.16
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.15 2009/04/12 22:17:52 kettenis Exp $	*/
d257 2
a258 1
		value = nextprop = malloc(OPROMMAXPARAM, M_TEMP, M_WAITOK);
@


1.15
log
@Implement /dev/mdesc, a device to read the machine description on sun4v
(virtual) machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.14 2009/03/21 12:24:26 kettenis Exp $	*/
d110 1
a110 1
		
@


1.14
log
@Make nvram writable (if necessary) before calling OF_setprop().  Prevents
faults on machines where we map nvram write-only (through the clock chip).
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.13 2007/11/13 13:50:10 kettenis Exp $	*/
d56 1
d89 31
@


1.13
log
@Remove bsd_openprom.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.12 2007/08/10 14:25:08 fgsch Exp $	*/
d57 1
d60 2
d198 7
d206 2
@


1.12
log
@Be more careful when asking for the next property. help and ok kettenis@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.11 2003/06/02 23:27:56 millert Exp $	*/
a52 1
#include <machine/bsd_openprom.h>
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.10 2003/03/07 14:54:49 jason Exp $	*/
d60 2
d210 5
a214 1
		value = nextprop = malloc(op->op_buflen, M_TEMP, M_WAITOK);
@


1.10
log
@- make a copyout into a copyin for correct semantics
- handle openfirmware error reports correctly
ok pb
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.9 2003/01/09 22:27:11 miod Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.8 2002/07/31 18:39:22 jason Exp $	*/
d220 4
d225 1
a225 1
			char nul = 0;
d228 1
a228 5
			error = copyin(&nul, op->op_buf, sizeof(char));
			break;
		}
		if (error == -1) {
			error = EINVAL;
@


1.8
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.7 2002/07/31 04:36:15 jason Exp $	*/
d221 2
d224 1
a224 1
			error = subyte(op->op_buf, 0);
@


1.7
log
@From NetBSD:
In OPIOCNEXTPROP: if we are at the last property, set the buffer length to
0 instead of setting it to an uninitialized value (len).
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.6 2002/07/31 01:12:28 jason Exp $	*/
d110 2
a111 2
	register int error;
	register char *cp;
@


1.6
log
@Remove the other references to promvec
@
text
@d1 2
a2 2
/*	$OpenBSD: openprom.c,v 1.5 2002/07/31 01:09:32 jason Exp $	*/
/*	$NetBSD: openprom.c,v 1.2 2000/11/18 23:45:05 mrg Exp $ */
d221 1
a221 1
			op->op_buflen = len;
@


1.5
log
@promvec was never initialized.  For now, just call OF directly.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.4 2002/06/14 04:16:23 art Exp $	*/
a65 1
extern	struct promvec *promvec;
d96 1
a96 1
	register int sid, tid;
a97 3
	register struct nodeops *no;

	no = promvec->pv_nodeops;
@


1.4
log
@ifdef SUN4 ? yeah, right.
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.3 2002/03/14 01:26:45 millert Exp $	*/
d102 2
a103 2
	for (; sid != 0; sid = no->no_nextnode(sid))
		if (sid == tid || openpromcheckid(no->no_child(sid), tid))
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.2 2001/08/20 20:23:53 jason Exp $	*/
a76 4
#if defined(SUN4)
	if (cputyp==CPU_SUN4)
		return (ENODEV);
#endif
@


1.3.2.1
log
@Pull in patch from current:
Fix (jason):
- promvec was never initialized.  For now, just call OF directly.
- Remove the other references to promvec
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.3 2002/03/14 01:26:45 millert Exp $	*/
d66 1
d101 1
a101 1
	int sid, tid;
d103 5
a107 2
	for (; sid != 0; sid = OF_peer(sid))
		if (sid == tid || openpromcheckid(OF_child(sid), tid))
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 2
a69 2
static int openpromcheckid __P((int, int));
static int openpromgetstr __P((int, char *, char **));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.2 2001/08/20 20:23:53 jason Exp $	*/
d68 2
a69 2
static int openpromcheckid(int, int);
static int openpromgetstr(int, char *, char **);
@


1.2.6.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: openprom.c,v 1.4 2002/01/10 06:21:53 briggs Exp $ */
d66 1
d77 4
d101 1
a101 1
	int sid, tid;
d103 5
a107 2
	for (; sid != 0; sid = OF_peer(sid))
		if (sid == tid || openpromcheckid(OF_child(sid), tid))
d118 2
a119 2
	int error;
	char *cp;
d229 1
a229 1
			op->op_buflen = 0;
@


1.2.6.3
log
@sync
@
text
@d220 5
a226 7
			break;
		}
		if (error == 0) {
			char nul = '\0';

			op->op_buflen = 0;
			error = copyout(&nul, op->op_buf, sizeof(char));
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d68 2
a69 2
static int openpromcheckid(int, int);
static int openpromgetstr(int, char *, char **);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: openprom.c,v 1.4 2002/01/10 06:21:53 briggs Exp $ */
d66 1
d77 4
d101 1
a101 1
	int sid, tid;
d103 5
a107 2
	for (; sid != 0; sid = OF_peer(sid))
		if (sid == tid || openpromcheckid(OF_child(sid), tid))
d118 2
a119 2
	int error;
	char *cp;
d228 5
a234 7
			break;
		}
		if (error == 0) {
			char nul = '\0';

			op->op_buflen = 0;
			error = copyout(&nul, op->op_buf, sizeof(char));
@


1.2.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: openprom.c,v 1.2.4.3 2003/03/27 23:42:37 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Lot of stuff... Some from NetBSD, some from OpenBSD, minor modifications
@
text
@d1 1
@

