head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.14
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.24
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.20
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.18
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.16
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.14
	OPENBSD_5_0:1.13.0.12
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.10
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.15
date	2014.05.10.12.29.58;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.12.18.53.14;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.18.12.32;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.21.10.07.14;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.05.42.13;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.10.19.25.42;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.31.22.14.01;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.15.22.05.51;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.27.19.00.26;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.16.16.20.55;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.20.16.54.52;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.18.20.44.47;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.10.21.44.06;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.10.21.33.16;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.15
log
@A few more straightforward format string fixes.
@
text
@/*	$OpenBSD: ipifuncs.c,v 1.14 2014/03/29 18:09:30 guenther Exp $	*/
/*	$NetBSD: ipifuncs.c,v 1.8 2006/10/07 18:11:36 rjs Exp $ */

/*-
 * Copyright (c) 2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/ctlreg.h>
#include <machine/hypervisor.h>
#include <machine/pmap.h>
#include <machine/sparc64.h>

extern int db_active;

#define SPARC64_IPI_RETRIES	10000

#define	sparc64_ipi_sleep()	delay(1000)

void	sun4u_send_ipi(int, void (*)(void), u_int64_t, u_int64_t);
void	sun4u_broadcast_ipi(void (*)(void), u_int64_t, u_int64_t);
void	sun4v_send_ipi(int, void (*)(void), u_int64_t, u_int64_t);
void	sun4v_broadcast_ipi(void (*)(void), u_int64_t, u_int64_t);

/*
 * These are the "function" entry points in locore.s to handle IPI's.
 */
void	sun4u_ipi_tlb_page_demap(void);
void	sun4u_ipi_tlb_context_demap(void);
void	sun4v_ipi_tlb_page_demap(void);
void	sun4v_ipi_tlb_context_demap(void);
void	ipi_softint(void);

/*
 * Send an interprocessor interrupt.
 */
void
sparc64_send_ipi(int itid, void (*func)(void), u_int64_t arg0, u_int64_t arg1)
{
	if (CPU_ISSUN4V)
		sun4v_send_ipi(itid, func, arg0, arg1);
	else
		sun4u_send_ipi(itid, func, arg0, arg1);
}

void
sun4u_send_ipi(int itid, void (*func)(void), u_int64_t arg0, u_int64_t arg1)
{
	int i, j, shift = 0;

	KASSERT((u_int64_t)func > MAXINTNUM);

	/*
	 * UltraSPARC-IIIi CPUs select the BUSY/NACK pair based on the
	 * lower two bits of the ITID.
	 */
	if (((getver() & VER_IMPL) >> VER_IMPL_SHIFT) == IMPL_JALAPENO)
		shift = (itid & 0x3) * 2;

	if (ldxa(0, ASR_IDSR) & (IDSR_BUSY << shift)) {
		__asm volatile("ta 1; nop");
	}

	/* Schedule an interrupt. */
	for (i = 0; i < SPARC64_IPI_RETRIES; i++) {
		u_int64_t s = intr_disable();

		stxa(IDDR_0H, ASI_INTERRUPT_DISPATCH, (u_int64_t)func);
		stxa(IDDR_1H, ASI_INTERRUPT_DISPATCH, arg0);
		stxa(IDDR_2H, ASI_INTERRUPT_DISPATCH, arg1);
		stxa(IDCR(itid), ASI_INTERRUPT_DISPATCH, 0);
		membar(Sync);

		for (j = 0; j < 1000000; j++) {
			if (ldxa(0, ASR_IDSR) & (IDSR_BUSY << shift))
				continue;
			else
				break;
		}
		intr_restore(s);

		if (j == 1000000)
			break;

		if ((ldxa(0, ASR_IDSR) & (IDSR_NACK << shift)) == 0)
			return;
	}

#if 1
	if (db_active || panicstr != NULL)
		printf("ipi_send: couldn't send ipi to module %u\n", itid);
	else
		panic("ipi_send: couldn't send ipi");
#else
	__asm volatile("ta 1; nop" : :);
#endif
}

void
sun4v_send_ipi(int itid, void (*func)(void), u_int64_t arg0, u_int64_t arg1)
{
	struct cpu_info *ci = curcpu();
	int err, i;

	stha(ci->ci_cpuset, ASI_PHYS_CACHED, itid);
	stxa(ci->ci_mondo, ASI_PHYS_CACHED, (vaddr_t)func);
	stxa(ci->ci_mondo + 8, ASI_PHYS_CACHED, arg0);
	stxa(ci->ci_mondo + 16, ASI_PHYS_CACHED, arg1);

	for (i = 0; i < SPARC64_IPI_RETRIES; i++) {
		err = hv_cpu_mondo_send(1, ci->ci_cpuset, ci->ci_mondo);
		if (err != H_EWOULDBLOCK)
			break;
		delay(10);
	}
	if (err != H_EOK)
		panic("Unable to send mondo %llx to cpu %d: %d",
		    (u_int64_t)func, itid, err);
}

/*
 * Broadcast an IPI to all but ourselves.
 */
void
sparc64_broadcast_ipi(void (*func)(void), u_int64_t arg0, u_int64_t arg1)
{
	if (CPU_ISSUN4V)
		sun4v_broadcast_ipi(func, arg0, arg1);
	else
		sun4u_broadcast_ipi(func, arg0, arg1);
}

void
sun4u_broadcast_ipi(void (*func)(void), u_int64_t arg0, u_int64_t arg1)
{
	struct cpu_info *ci;

	for (ci = cpus; ci != NULL; ci = ci->ci_next) {
		if (ci->ci_number == cpu_number())
			continue;
		if ((ci->ci_flags & CPUF_RUNNING) == 0)
			continue;
		sun4u_send_ipi(ci->ci_itid, func, arg0, arg1);
	}
}

void
sun4v_broadcast_ipi(void (*func)(void), u_int64_t arg0, u_int64_t arg1)
{
	struct cpu_info *ci = curcpu();
	paddr_t cpuset = ci->ci_cpuset;
	int err, i, ncpus = 0;

	for (ci = cpus; ci != NULL; ci = ci->ci_next) {
		if (ci->ci_number == cpu_number())
			continue;
		if ((ci->ci_flags & CPUF_RUNNING) == 0)
			continue;
		stha(cpuset, ASI_PHYS_CACHED, ci->ci_itid);
		cpuset += sizeof(int16_t);
		ncpus++;
	}

	if (ncpus == 0)
		return;

	ci = curcpu();
	stxa(ci->ci_mondo, ASI_PHYS_CACHED, (vaddr_t)func);
	stxa(ci->ci_mondo + 8, ASI_PHYS_CACHED, arg0);
	stxa(ci->ci_mondo + 16, ASI_PHYS_CACHED, arg1);

	for (i = 0; i < SPARC64_IPI_RETRIES; i++) {
		err = hv_cpu_mondo_send(ncpus, ci->ci_cpuset, ci->ci_mondo);
		if (err != H_EWOULDBLOCK)
			break;
		delay(10);
	}
	if (err != H_EOK)
		panic("Unable to broadcast mondo %llx: %d",
		    (u_int64_t)func, err);
}

void
smp_tlb_flush_pte(vaddr_t va, int ctx)
{
	sp_tlb_flush_pte(va, ctx);

	if (db_active)
		return;

	if (CPU_ISSUN4V)
		sun4v_broadcast_ipi(sun4v_ipi_tlb_page_demap, va, ctx);
	else
		sun4u_broadcast_ipi(sun4u_ipi_tlb_page_demap, va, ctx);
}

void
smp_tlb_flush_ctx(int ctx)
{
	sp_tlb_flush_ctx(ctx);

	if (db_active)
		return;

	if (CPU_ISSUN4V)
		sun4v_broadcast_ipi(sun4v_ipi_tlb_context_demap, ctx, 0);
	else
		sun4u_broadcast_ipi(sun4u_ipi_tlb_context_demap, ctx, 0);
}

void
cpu_unidle(struct cpu_info *ci)
{
	if (ci == curcpu() || db_active || ((ci->ci_flags & CPUF_RUNNING) == 0))
		return;

	if (CPU_ISSUN4V)
		sun4v_send_ipi(ci->ci_itid, ipi_softint, 1 << IPL_SOFTINT, 0);
	else
		sun4u_send_ipi(ci->ci_itid, ipi_softint, 1 << IPL_SOFTINT, 0);
}
@


1.14
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.13 2009/02/12 18:53:14 miod Exp $	*/
d145 2
a146 1
		panic("Unable to send mondo %lx to cpu %d: %d", func, itid, err);
d207 2
a208 1
		panic("Unable to broadcast mondo %lx: %d", func, err);
@


1.13
log
@Add a pm_statistics struct to all pmap, and keep track of resident
pages. Use this to provide a real pmap_resident_count() function.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.12 2008/11/22 18:12:32 art Exp $	*/
d89 1
a89 1
		__asm __volatile("ta 1; nop");
d123 1
a123 1
	__asm __volatile("ta 1; nop" : :);
@


1.12
log
@The last parts of cpu_unidle. i386, amd64 and sparc64
In short, make cpu_unidle do what signotify used to do and
make signotify use cpu_unidle.
Also, include a cpu_unidle in need_resched, it won't change much right now
but will be needed in the future.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.11 2008/07/21 10:07:14 kettenis Exp $	*/
d33 2
@


1.11
log
@IPL_NONE doesn't really exist.  The corresponding bit in the
per-processor soft interrupt register is used for hardware clock-tick
counter interrupts.  So make smp_signotify() use IPL_SOFTINT instead
such that we don't unintentionally trigger a spurious clock interrupt.
This seems to fix the timekeeping anomalies on the t1k.

tested by art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.10 2008/06/26 05:42:13 ray Exp $	*/
d236 1
a236 1
smp_signotify(struct proc *p)
d238 1
a238 3
	struct cpu_info *ci = p->p_cpu;

	if (db_active)
@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.9 2008/04/10 19:25:42 kettenis Exp $	*/
d244 1
a244 1
		sun4v_send_ipi(ci->ci_itid, ipi_softint, 1 << IPL_NONE, 0UL);
d246 1
a246 1
		sun4u_send_ipi(ci->ci_itid, ipi_softint, 1 << IPL_NONE, 0UL);
@


1.9
log
@Make sun4v_broadcast_ipi() do its job by making a single hypervisor call
instead of repeatedly calling sun4v_send_ipi().  Makes compiling a kernel
almost 20% faster.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.8 2008/03/31 22:14:01 kettenis Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@Make MULTIPROCESSOR kernels work on sun4v.  Won't gracefully halt, powerdown
or reboot yet, but that will (hopefully) be fixed in the near future.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.7 2008/03/15 22:05:51 kettenis Exp $	*/
d182 3
a184 1
	struct cpu_info *ci;
d191 18
a208 1
		sun4v_send_ipi(ci->ci_itid, func, arg0, arg1);
d210 2
@


1.7
log
@Make GENERIC.MP work on the e10k.  The e10k is a bit funky since UPA only
supports 32 ports, and a machine with up to 64 CPUs obviously needs more.
So the machine has a special ASIC that does port translation, and because
of that we need to distinguish between port ID's and interrupt target ID's.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.6 2007/11/27 19:00:26 kettenis Exp $	*/
d43 1
d53 5
d61 4
a64 2
void	ipi_tlb_page_demap(void);
void	ipi_tlb_context_demap(void);
d73 9
d132 21
d159 23
d189 1
a189 1
		sparc64_send_ipi(ci->ci_itid, func, arg0, arg1);
d201 4
a204 1
	sparc64_broadcast_ipi(ipi_tlb_page_demap, va, ctx);
d215 4
a218 1
	sparc64_broadcast_ipi(ipi_tlb_context_demap, ctx, 0);
d224 2
d229 4
a232 1
	sparc64_send_ipi(p->p_cpu->ci_itid, ipi_softint, 1 << IPL_NONE, 0UL);
@


1.6
log
@intr_disable() returns an u_int64_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.5 2007/11/16 16:20:55 kettenis Exp $	*/
d63 1
a63 1
sparc64_send_ipi(int upaid, void (*func)(void), u_int64_t arg0, u_int64_t arg1)
d71 1
a71 1
	 * lower two bits of the target CPU ID.
d74 1
a74 1
		shift = (upaid & 0x3) * 2;
d87 1
a87 1
		stxa(IDCR(upaid), ASI_INTERRUPT_DISPATCH, 0);
d107 1
a107 1
		printf("ipi_send: couldn't send ipi to module %u\n", upaid);
d128 1
a128 1
		sparc64_send_ipi(ci->ci_upaid, func, arg0, arg1);
d160 1
a160 1
	sparc64_send_ipi(p->p_cpu->ci_upaid, ipi_softint, 1 << IPL_NONE, 0UL);
@


1.5
log
@UltraSPARC-IIIi CPUs are different and choose the BUSY/NACK pair based on the
target CPU ID.  Make sure we check the right bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.4 2007/10/20 16:54:52 miod Exp $	*/
d82 1
a82 1
		int s = intr_disable();
@


1.4
log
@Make sure to send an ipi to the processor a given proc runs on in signotify(),
in the MULTIPROCESOR case.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.3 2007/10/18 20:44:47 kettenis Exp $	*/
d65 1
a65 1
	int i, j;
d69 8
a76 1
	if (ldxa(0, ASR_IDSR) & IDSR_BUSY) {
d91 1
a91 1
			if (ldxa(0, ASR_IDSR) & IDSR_BUSY)
d101 1
a101 1
		if ((ldxa(0, ASR_IDSR) & IDSR_NACK) == 0)
@


1.3
log
@Don't try to send IPIs to CPUs that aren't running (yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.2 2007/09/10 21:44:06 kettenis Exp $	*/
d39 1
a39 1
#include <sys/malloc.h>
d57 1
d145 9
@


1.2
log
@Missing $OpenBSD$ tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 7
a121 3
	for (ci = cpus; ci != NULL; ci = ci->ci_next)
		if (ci->ci_number != cpu_number())
			sparc64_send_ipi(ci->ci_upaid, func, arg0, arg1);
@


1.1
log
@IPI implementation.  Bits and pieces from NetBSD, but the interface has been
changed to free up another 64-bit word in the interrupt transaction.  This
means we have two 64-bit words available for arguments, which means we
probably don't need to pass arguments through structures.
@
text
@d1 1
@

