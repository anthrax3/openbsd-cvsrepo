head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.8.0.18
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2017.04.20.13.57.30;	author visa;	state Exp;
branches;
next	1.8;
commitid	RHJVP52IiQkInZzu;

1.8
date	2013.07.14.21.22.09;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2010.09.28.20.27.55;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.13.13.24.55;	author weingart;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.27.21.48.56;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.25.20.14.43;	author weingart;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.13.16.32.55;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.31.22.14.01;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.25.18.36.47;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Hook up mutex(9) to witness(4).
@
text
@/*	$OpenBSD: mutex.S,v 1.8 2013/07/14 21:22:09 kettenis Exp $	*/

/*
 * Copyright (c) 2007 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Mutex implementation based on Example 9 from Appendix J of
 * SPARC-V9/R1.4.5, The SPARC Architecture Manual.
 */

#include "assym.h"
#include <machine/asm.h>
#include <machine/param.h>

#ifdef MULTIPROCESSOR

#define GET_CURCPU(ci) \
	ldx	[%g7 + CI_SELF], ci

#else

#define GET_CURCPU(ci) \
	set	CPUINFO_VA, ci

#endif


ENTRY(__mtx_init)
	stx	%g0, [%o0 + MTX_OWNER]
	stw	%o1, [%o0 + MTX_WANTIPL]
	retl
	 stw	%g0, [%o0 + MTX_OLDIPL]

ENTRY(__mtx_enter)
	rdpr	%pil, %g4
	GET_CURCPU(%g1)
1:
	ld	[%o0 + MTX_WANTIPL], %g5
	cmp	%g4, %g5
	bge	2f
	 nop
	wrpr	%g5, %pil
2:
	mov	%g1, %g5
/*
 * The assembler doesn't like the next line, even if MTX_OWNER is 0.
 */
!	casx	[%o0 + MTX_OWNER], %g0, %g5
	casx	[%o0], %g0, %g5
	tst	%g5
	be	4f
	 nop
	wrpr	%g4, %pil
3:
	ldx	[%o0 + MTX_OWNER], %g5
	tst	%g5
	bne	3b
	 nop
	ba,a	1b
4:
	stw	%g4, [%o0 + MTX_OLDIPL]
#ifdef DIAGNOSTIC
	ld	[%g1 + CI_MUTEX_LEVEL], %g5
	add	%g5, 1, %g5
	st	%g5, [%g1 + CI_MUTEX_LEVEL]
#endif
	retl
	 membar	#LoadLoad | #LoadStore

ENTRY(__mtx_enter_try)
	rdpr	%pil, %g4
	GET_CURCPU(%g1)
1:
	ld	[%o0 + MTX_WANTIPL], %g5
	bge	2f
	 nop
	wrpr	%g5, %pil
2:
	mov	%g1, %g5
/*
 * The assembler doesn't like the next line, even if MTX_OWNER is 0.
 */
!	casx	[%o0 + MTX_OWNER], %g0, %g5
	casx	[%o0], %g0, %g5
	tst	%g5
	be	3f
	 nop
	wrpr	%g4, %pil
	retl
	 mov	0, %o0
3:
	stw	%g4, [%o0 + MTX_OLDIPL]
#ifdef DIAGNOSTIC
	ld	[%g1 + CI_MUTEX_LEVEL], %g5
	add	%g5, 1, %g5
	st	%g5, [%g1 + CI_MUTEX_LEVEL]
#endif
	membar	#LoadLoad | #LoadStore
	retl
	 mov	1, %o0

ENTRY(__mtx_leave)
#ifdef DIAGNOSTIC
	GET_CURCPU(%g1)
	ld	[%g1 + CI_MUTEX_LEVEL], %g5
	sub	%g5, 1, %g5
	st	%g5, [%g1 + CI_MUTEX_LEVEL]
#endif
	ld	[%o0 + MTX_OLDIPL], %g1
	membar	#StoreStore | #LoadStore
	stx	%g0, [%o0 + MTX_OWNER]
	retl
	 wrpr	%g1, %pil
@


1.8
log
@To prevent lock ordering problems with the kernel lock, we need to make sure
we block all interrupts that can grab the kernel lock.  The simplest way to
achieve this is to make sure mutexes always raise the ipl to the highest
level that has interrupts that grab the kernel lock.  This will allow us
to have "mpsafe" interrupt handlers at lower priority levels.

No change for non-MULTIPROCESSOR kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.S,v 1.7 2010/09/28 20:27:55 miod Exp $	*/
d47 1
a47 1
ENTRY(mtx_enter)
d83 1
a83 1
ENTRY(mtx_enter_try)
d115 1
a115 1
ENTRY(mtx_leave)
@


1.7
log
@Implement a per-cpu held mutex counter if DIAGNOSTIC on all non-x86 platforms,
to complete matthew@@'s commit of a few days ago, and drop __HAVE_CPU_MUTEX_LEVEL
define. With help from, and ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.S,v 1.6 2009/08/13 13:24:55 weingart Exp $	*/
d41 1
a41 1
ENTRY(mtx_init)
@


1.6
log
@A new(er) mtx_enter_try().

Ok oga@@, "the time is now" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.S,v 1.5 2009/04/27 21:48:56 kettenis Exp $	*/
d75 5
d106 5
d116 6
@


1.5
log
@Revert mtx_enter_try.  It didn't compile on hppa, it doesn't compile on
landisk, and the sparc implementation is obviously wrong.  That's where I
stopped looking, so who knows what else was broken.  A simple comparison of
the existing mtx_enter with the new mtx_enter_try would have told anybody.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.S,v 1.3 2008/04/13 16:32:55 kettenis Exp $	*/
d77 27
@


1.4
log
@Enter mtx_enter_try.  In part for completeness, things may start
using this soon(ish).  Ok oga@@, sorta yes kettenis@@.
@
text
@a77 27
ENTRY(mtx_enter_try)
	rdpr	%pil, %g4
	GET_CURCPU(%g1)
1:
	ld	[%o0 + MTX_WANTIPL], %g5
	bge	2f
	 nop
	wrpr	%g5, %pil
2:
	mov	%g1, %g5
/*
 * The assembler doesn't like the next line, even if MTX_OWNER is 0.
 */
!	casx	[%o0 + MTX_OWNER], %g0, %g5
	casx	[%o0], %g0, %g5
	tst	%g5
	be	3f
	 nop
	wrpr	%g4, %pil
	retl
	 mov	0, %o0
3:
	stw	%g4, [%o0 + MTX_OLDIPL]
	membar	#LoadLoad | #LoadStore
	retl
	 mov	1, %o0

@


1.3
log
@Use %g7 to store a pointer `struct cpu_info', and use it whereever possible.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.S,v 1.2 2008/03/31 22:14:01 kettenis Exp $	*/
d77 27
@


1.2
log
@Make MULTIPROCESSOR kernels work on sun4v.  Won't gracefully halt, powerdown
or reboot yet, but that will (hopefully) be fixed in the near future.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.S,v 1.1 2007/08/25 18:36:47 kettenis Exp $	*/
a29 2
#include <machine/ctlreg.h>

d31 1
a31 6
	sethi	%hi(CPUINFO_VA + CI_SELF), ci		;\
999:	ldx	[ci + %lo(CPUINFO_VA + CI_SELF)], ci	;\
	.section	.sun4v_mp_patch, "ax"		;\
	.word	999b					;\
	ldxa	[%g0] ASI_SCRATCHPAD, ci		;\
	.previous
a83 10

/*
 *	XXX Move this back to locore.s.
 */
#ifdef MULTIPROCESSOR
	.section	.sun4v_mp_patch, "ax"
	.globl _C_LABEL(sun4v_mp_patch_end)
_C_LABEL(sun4v_mp_patch_end):
	.previous
#endif
@


1.1
log
@Real mutexes for sparc64.  Some comments from henric@@ and claudio@@.
Tested by fkr@@, claudio@@, nick@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 20
a54 6
#ifdef MULTIPROCESSOR
	sethi	%hi(CPUINFO_VA+CI_SELF), %g1
	ldx	[%g1 + %lo(CPUINFO_VA+CI_SELF)], %g1
#else
	set	CPUINFO_VA, %g1
#endif
d56 1
d91 10
@

