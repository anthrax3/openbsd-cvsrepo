head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.11.0.30
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.28
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.24
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.22
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.20
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.18
	OPENBSD_5_0:1.11.0.16
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.14
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.12
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.8
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.2
	UBC_BASE:1.6
	SMP:1.3.0.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.18
date	2016.09.25.15.23.37;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	YxqfPf79WCjoxCH9;

1.17
date	2016.08.16.18.17.36;	author tedu;	state Exp;
branches;
next	1.16;
commitid	dgebCYPvUOhYeX5I;

1.16
date	2016.08.15.22.01.59;	author tedu;	state Exp;
branches;
next	1.15;
commitid	hzJmUc5FH2irhNvz;

1.15
date	2016.07.27.15.12.36;	author tedu;	state Exp;
branches;
next	1.14;
commitid	VIg8qGyfeLhNwGiG;

1.14
date	2015.02.10.22.44.35;	author miod;	state Exp;
branches;
next	1.13;
commitid	lsrmQ0A4gY4UmdnD;

1.13
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.12;
commitid	C5iGb36LQxjM60Q3;

1.12
date	2014.11.16.12.30.59;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	yv0ECmCdICvq576h;

1.11
date	2007.11.14.20.43.12;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.22.16.21.32;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2007.01.12.22.09.08;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.09.22.27.11;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.04.23.22.42;	author art;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.20.23.53;	author jason;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.08.19.19.13.06;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.05.21.38;	author jason;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2003.03.27.23.42.37;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.06.07.11.14.46;	author ho;	state Exp;
branches;
next	;

1.6.2.1
date	2003.05.19.21.46.58;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Make a move towards ending 4 decades of kernel snooping.

Add sysctl kern.allowkmem (default 0) which controls the ability to open
/dev/mem or /dev/kmem at securelevel > 0.  Over 15 years we converted 99%
of utilities in the tree to operate on sysctl-nodes (either by themselves
or via code hiding in the guts of -lkvm).

pstat -d and -v & procmap are affected and continued use of them will
require kern.allowkmem=1 in /etc/sysctl.conf.  acpidump (and it's
buddy sendbug) are affected, but we'll work out a solution soon.

There will be some impact in ports.

ok kettenis guenther
@
text
@/*	$OpenBSD: mem.c,v 1.17 2016/08/16 18:17:36 tedu Exp $	*/
/*	$NetBSD: mem.c,v 1.18 2001/04/24 04:31:12 thorpej Exp $ */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/rwlock.h>
#include <sys/conf.h>

#include <machine/conf.h>
#include <machine/ctlreg.h>

#include <uvm/uvm_extern.h>

vaddr_t prom_vstart = 0xf000000;
vaddr_t prom_vend = 0xf0100000;
caddr_t zeropage;

int
mmopen(dev_t dev, int flag, int mode, struct proc *p)
{
	extern int allowkmem;

	switch (minor(dev)) {
	case 0:
	case 1:
		if (securelevel <= 0 || allowkmem)
			break;
		return (EPERM);
	case 2:
	case 12:
		break;
	default:
		return (ENXIO);		
	}
	return (0);
}

int
mmclose(dev_t dev, int flag, int mode, struct proc *p)
{

	return (0);
}

int
mmrw(dev_t dev, struct uio *uio, int flags)
{
	static struct rwlock physlock = RWLOCK_INITIALIZER("mmrw");
	vaddr_t o, v;
	size_t c;
	struct iovec *iov;
	int error = 0;
	vm_prot_t prot;
	extern caddr_t vmmap;

	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		error = rw_enter(&physlock, RW_WRITE | RW_INTR);
		if (error)
			return (error);
	}
	while (uio->uio_resid > 0 && error == 0) {
		int n;
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}

		/* Note how much is still to go */
		n = uio->uio_resid;

		switch (minor(dev)) {

		/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;
			if (!pmap_pa_exists(v)) {
				error = EFAULT;
				goto unlock;
			}
			prot = uio->uio_rw == UIO_READ ? PROT_READ :
			    PROT_WRITE;
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
			    trunc_page(v), prot, prot|PMAP_WIRED);
			pmap_update(pmap_kernel());
			o = uio->uio_offset & PGOFSET;
			c = ulmin(uio->uio_resid, NBPG - o);
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
			pmap_update(pmap_kernel());
			break;

		/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = ulmin(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			error = uiomove((caddr_t)v, c, uio);
			break;

		/* minor device 2 is /dev/null */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

		/* minor device 12 is /dev/zero */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				uio->uio_resid = 0;
				return(0);
			}
			if (zeropage == NULL)
				zeropage = malloc(NBPG, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = ulmin(iov->iov_len, NBPG);
			error = uiomove(zeropage, c, uio);
			break;

		default:
			return (ENXIO);
		}

		/* If we didn't make any progress (i.e. EOF), we're done here */
		if (n == uio->uio_resid)
			break;
	}
	if (minor(dev) == 0) {
unlock:
		rw_exit(&physlock);
	}
	return (error);
}

paddr_t
mmmmap(dev_t dev, off_t off, int prot)
{

	return (-1);
}

int
mmioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	return (EOPNOTSUPP);
}

@


1.17
log
@replace hand rolled tsleep physlock with rwlock. ok mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2016/08/15 22:01:59 tedu Exp $	*/
d65 1
d67 12
@


1.16
log
@normalize some comments
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2016/07/27 15:12:36 tedu Exp $	*/
d50 1
d79 1
a83 1
	static int physlock;
d89 3
a91 8
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
d168 1
a168 3
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
@


1.15
log
@ansify mem.c to the latest fashion. with a fix from mike burns. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2015/02/10 22:44:35 miod Exp $	*/
d143 1
a143 1
		/* minor device 2 is EOF/RATHOLE */
d149 1
a149 4
		/*
		 * minor device 12 (/dev/zero) is source of nulls on read,
		 * rathole on write.
		 */
@


1.14
log
@Convert to uiomove().
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2014/11/16 12:30:59 deraadt Exp $	*/
a60 1
/*ARGSUSED*/
d62 1
a62 4
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
a67 1
/*ARGSUSED*/
d69 1
a69 4
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
a74 1
/*ARGSUSED*/
d76 1
a76 4
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
a148 2
/* XXX should add sbus, etc */

d183 1
a183 4
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
@


1.13
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d91 1
a91 1
	int c;
d138 2
a139 2
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomovei((caddr_t)vmmap + o, c, uio);
d148 1
a148 1
			c = min(iov->iov_len, MAXPHYS);
d152 1
a152 1
			error = uiomovei((caddr_t)v, c, uio);
d175 2
a176 2
			c = min(iov->iov_len, NBPG);
			error = uiomovei(zeropage, c, uio);
@


1.12
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2007/11/14 20:43:12 kettenis Exp $	*/
d139 1
a139 1
			error = uiomove((caddr_t)vmmap + o, c, uio);
d152 1
a152 1
			error = uiomove((caddr_t)v, c, uio);
d176 1
a176 1
			error = uiomove(zeropage, c, uio);
@


1.11
log
@Remove eeprom.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2007/09/22 16:21:32 krw Exp $	*/
d132 2
a133 2
			prot = uio->uio_rw == UIO_READ ? VM_PROT_READ :
			    VM_PROT_WRITE;
@


1.10
log
@M_ZERO -> bzero.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 2007/01/12 22:09:08 kettenis Exp $	*/
a51 1
#include <machine/eeprom.h>
@


1.9
log
@Get rid of some dead code.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 2003/06/02 23:27:56 millert Exp $	*/
d173 3
a175 5
			if (zeropage == NULL) {
				zeropage = (caddr_t)
				    malloc(NBPG, M_TEMP, M_WAITOK);
				bzero(zeropage, NBPG);
			}
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 2003/01/09 22:27:11 miod Exp $	*/
a127 1
#if 1
a144 73
#else
			/* On v9 we can just use the physical ASI and not bother w/mapin & mapout */
			v = uio->uio_offset;
			if (!pmap_pa_exists(v)) {
				error = EFAULT;
				goto unlock;
			}
			o = uio->uio_offset & PGOFSET;
			c = min(uio->uio_resid, (int)(NBPG - o));
			/* However, we do need to partially re-implement uiomove() */
			if (uio->uio_rw != UIO_READ && uio->uio_rw != UIO_WRITE)
				panic("mmrw: uio mode");
			if (uio->uio_segflg == UIO_USERSPACE && uio->uio_procp != curproc)
				panic("mmrw: uio proc");
			while (c > 0 && uio->uio_resid) {
				struct iovec *iov;
				u_int cnt;
				int d;

				iov = uio->uio_iov;
				cnt = iov->iov_len;
				if (cnt == 0) {
					uio->uio_iov++;
					uio->uio_iovcnt--;
					continue;
				}
				if (cnt > c)
					cnt = c;
				d = iov->iov_base;
				switch (uio->uio_segflg) {
					
				case UIO_USERSPACE:
					if (uio->uio_rw == UIO_READ)
						while (cnt--) {
							char tmp;

							tmp = lduba(v++, ASI_PHYS_CACHED);
							error = copyout(&tmp, d++, sizeof(tmp));
							if (error != 0)
								break;
						}
					else
						while (cnt--) {
							char tmp;

							error = copyin(d++, &tmp, sizeof(tmp));
							if (error != 0)
								break;
							stba(v++, ASI_PHYS_CACHED, tmp);
						}
					if (error)
						goto unlock;
					break;
					
				case UIO_SYSSPACE:
					if (uio->uio_rw == UIO_READ)
						while (cnt--)
							stba(d++, ASI_P, lduba(v++, ASI_PHYS_CACHED));
					else
						while (cnt--)
							stba(v++, ASI_PHYS_CACHED, lduba(d++, ASI_P));
					break;
				}
				iov->iov_base =  (caddr_t)iov->iov_base + cnt;
				iov->iov_len -= cnt;
				uio->uio_resid -= cnt;
				uio->uio_offset += cnt;
				c -= cnt;
			}
			/* Should not be necessary */
			blast_vcache();
			break;
#endif
@


1.7
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 2001/12/04 23:22:42 art Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Yet another sync to NetBSD uvm.
Today we add a pmap argument to pmap_update() and allocate map entries for
kernel_map from kmem_map instead of using the static entries. This should
get rid of MAX_KMAPENT panics. Also some uvm_loan problems are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 2001/11/06 19:53:16 miod Exp $	*/
d183 8
a190 5
						while (cnt--)
							if(subyte(d++, lduba(v++, ASI_PHYS_CACHED))) {
								error = EFAULT;
								goto unlock;
							}
d192 8
a199 2
						while (cnt--)
							stba(v++, ASI_PHYS_CACHED, fubyte(d++));
@


1.6.2.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d183 5
a187 8
						while (cnt--) {
							char tmp;

							tmp = lduba(v++, ASI_PHYS_CACHED);
							error = copyout(&tmp, d++, sizeof(tmp));
							if (error != 0)
								break;
						}
d189 2
a190 8
						while (cnt--) {
							char tmp;

							error = copyin(d++, &tmp, sizeof(tmp));
							if (error != 0)
								break;
							stba(v++, ASI_PHYS_CACHED, tmp);
						}
@


1.5
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 2001/11/01 12:13:46 art Exp $	*/
d142 1
a142 1
			pmap_update();
d148 1
a148 1
			pmap_update();
@


1.4
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 2001/08/20 20:23:53 jason Exp $	*/
a59 1
#include <vm/vm.h>
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d269 1
a269 1
int
d272 1
a272 1
	int off;
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.3.4.2
log
@Merge in -current
@
text
@d60 1
d269 1
a269 1
paddr_t
d272 1
a272 1
	off_t off;
@


1.3.4.3
log
@Merge in trunk
@
text
@d142 1
a142 1
			pmap_update(pmap_kernel());
d148 1
a148 1
			pmap_update(pmap_kernel());
@


1.3.4.4
log
@Sync the SMP branch with 3.3
@
text
@d183 5
a187 8
						while (cnt--) {
							char tmp;

							tmp = lduba(v++, ASI_PHYS_CACHED);
							error = copyout(&tmp, d++, sizeof(tmp));
							if (error != 0)
								break;
						}
d189 2
a190 8
						while (cnt--) {
							char tmp;

							error = copyin(d++, &tmp, sizeof(tmp));
							if (error != 0)
								break;
							stba(v++, ASI_PHYS_CACHED, tmp);
						}
@


1.3.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3.4.4 2003/03/27 23:42:37 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@mmioctl
@
text
@d1 1
@


1.1
log
@Lot of stuff... Some from NetBSD, some from OpenBSD, minor modifications
@
text
@d277 7
@

