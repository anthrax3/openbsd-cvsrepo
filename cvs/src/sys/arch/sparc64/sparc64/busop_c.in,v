head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.16
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.32
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.34
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.30
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.28
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.26
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.24
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.22
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.20
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.18
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.16
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.14
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.12
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.10
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.8
	OPENBSD_3_4_BASE:1.1
	UBC:1.1.0.6
	UBC_SYNC_A:1.1
	SMP:1.1.0.4
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.04.04.12.49.30;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2003.05.19.21.20.21;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@OpenBSD uses bus_space_copy_#, not bus_space_copy_region_#. Make sure only the
first name is used, and remove any #define foo_region foo compatibility
defines.
Also, on sparc64, do not provide a `raw' version of bus_space_copy.
@
text
@ECHO:/*      $OpenBSD: busop_c.in,v 1.1 2003/02/17 01:29:20 henric Exp $   */
ECHO:
ECHO:/*
ECHO: * Copyright (c) 2003 Henric Jungheim
ECHO: * All rights reserved.
ECHO: *
ECHO: * Redistribution and use in source and binary forms, with or without
ECHO: * modification, are permitted provided that the following conditions
ECHO: * are met:
ECHO: * 1. Redistributions of source code must retain the above copyright
ECHO: *    notice, this list of conditions and the following disclaimer.
ECHO: * 2. Redistributions in binary form must reproduce the above copyright
ECHO: *    notice, this list of conditions and the following disclaimer in the
ECHO: *    documentation and/or other materials provided with the distribution.
ECHO: * 3. The name of the author may not be used to endorse or promote products
ECHO: *    derived from this software without specific prior written permission.
ECHO: *
ECHO: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
ECHO: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
ECHO: * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
ECHO: * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
ECHO: * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
ECHO: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
ECHO: * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
ECHO: * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
ECHO: * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
ECHO: * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ECHO: */
ECHO:
ECHO:#include <sys/param.h>
ECHO:#include <sys/systm.h>
ECHO:#include <sys/kernel.h>
ECHO:
ECHO:#include <machine/bus.h>
ECHO:

void
bus_space_read_<RAW>multi_<NUM>(bus_space_tag_t t, bus_space_handle_t h,
    bus_size_t o,
NRAW:    <TYPE> *a, bus_size_t c)
RAW:    void *a, size_t c)
{
	<TYPE> *p = a;

	BUS_SPACE_ASSERT(t, h, o, <NUM>);
	BUS_SPACE_TRACE(t, h,
	    ("bsrm<NUM>(%llx + %llx, %x, %x) ->", (long long)h.bh_ptr,
	    (long long)o, t-><ASI>, c));
RAW:	c /= sizeof(<TYPE>);

	++c;  /* Looping on "--c" is slightly faster than on "c--" */
	asi_set(t-><ASI>);
	while (--c > 0) {
		<TYPE> r = <LOAD>_asi(h.bh_ptr + o);
		BUS_SPACE_TRACE(t, h, (" <FMT>", r));
		*p++ = r;
	}

	BUS_SPACE_TRACE(t, h, ("\n"));
}

void
bus_space_write_<RAW>multi_<NUM>(bus_space_tag_t t, bus_space_handle_t h,
    bus_size_t o,
NRAW:    const <TYPE> *a, bus_size_t c)
RAW:    const void *a, size_t c)
{
	const <TYPE> *p = a;

	BUS_SPACE_ASSERT(t, h, o, <NUM>);
	BUS_SPACE_TRACE(t, h,
	    ("bswm<NUM>(%llx + %llx, %x, %x) <-", (long long)h.bh_ptr,
	    (long long)o, t-><ASI>, c));
RAW:	c /= sizeof(<TYPE>);

	++c;  /* Looping on "--c" is slightly faster than on "c--" */
	asi_set(t-><ASI>);
	while (--c > 0) {
		<TYPE> r = *p++;
		BUS_SPACE_TRACE(t, h, (" <FMT>", r));
		<STORE>_asi(h.bh_ptr + o, r);
	}

	BUS_SPACE_TRACE(t, h, ("\n"));
}

void
bus_space_set_<RAW>multi_<NUM>(bus_space_tag_t t, bus_space_handle_t h,
    bus_size_t o, <TYPE> v,
NRAW:    bus_size_t c)
RAW:    size_t c)
{
	BUS_SPACE_ASSERT(t, h, o, <NUM>);
	BUS_SPACE_TRACE(t, h,
	    ("bssm<NUM>(%llx + %llx, %x, %x) <- <FMT>\n", (long long)h.bh_ptr,
	    (long long)o, t-><ASI>, c, v));
RAW:	c /= sizeof(<TYPE>);

	++c;  /* Looping on "--c" is slightly faster than on "c--" */
	asi_set(t-><ASI>);
	while (--c > 0)
		<STORE>_asi(h.bh_ptr + o, v);
}

void
bus_space_read_<RAW>region_<NUM>(bus_space_tag_t t, bus_space_handle_t h,
    bus_size_t o,
NRAW:    <TYPE> *a, bus_size_t c)
RAW:    void *a, size_t c)
{
	<TYPE> *p = a;
	paddr_t ptr = h.bh_ptr + o;

	BUS_SPACE_ASSERT(t, h, o, <NUM>);
	BUS_SPACE_TRACE(t, h,
	    ("bsrr<NUM>(%llx + %llx, %x, %x) <- \n", (long long)h.bh_ptr,
	    (long long)o, t-><ASI>, c));
RAW:	c /= sizeof(<TYPE>);

	asi_set(t-><ASI>);
	for (; c; p++, c--, ptr += <NUM>) {
		<TYPE> r = <LOAD>_asi(ptr);
		BUS_SPACE_TRACE(t, h, (" <FMT>", r));
		*p = r;
	}

	BUS_SPACE_TRACE(t, h, ("\n"));
}

void
bus_space_write_<RAW>region_<NUM>(bus_space_tag_t t, bus_space_handle_t h,
    bus_size_t o,
NRAW:    const <TYPE> *a, bus_size_t c)
RAW:    const void *a, size_t c)
{
	const <TYPE> *p = a;
	paddr_t ptr = h.bh_ptr + o;

	BUS_SPACE_ASSERT(t, h, o, <NUM>);
	BUS_SPACE_TRACE(t, h,
	    ("bswr<NUM>(%llx + %llx, %x, %x) <-", (long long)h.bh_ptr,
	    (long long)o, t-><ASI>, c));
RAW:	c /= sizeof(<TYPE>);

	asi_set(t-><ASI>);
	for (; c; p++, c--, ptr += <NUM>) {
		<TYPE> r = *p;
		BUS_SPACE_TRACE(t, h, (" <FMT>", r));
		<STORE>_asi(ptr, r);
	}

	BUS_SPACE_TRACE(t, h, ("\n"));
}

void
bus_space_set_<RAW>region_<NUM>(bus_space_tag_t t, bus_space_handle_t h,
    bus_size_t o, <TYPE> v,
NRAW:    bus_size_t c)
RAW:    size_t c)
{
	paddr_t ptr = h.bh_ptr + o;

	BUS_SPACE_ASSERT(t, h, o, <NUM>);
	BUS_SPACE_TRACE(t, h,
	    ("bssr<NUM>(%llx + %llx, %x, %x) <- <FMT>\n", (long long)h.bh_ptr,
	    (long long)o, t-><ASI>, c, v));
RAW:	c /= sizeof(<TYPE>);

	asi_set(t-><ASI>);
	for (; c; c--, ptr += <NUM>)
		<STORE>_asi(ptr, v);
}

NRAW:void
NRAW:bus_space_copy_<RAW><NUM>(bus_space_tag_t t, bus_space_handle_t h1,
NRAW:    bus_size_t o1, bus_space_handle_t h2, bus_size_t o2,
NRAW:    bus_size_t c)
NRAW:{
NRAW:	paddr_t ptr1 = h1.bh_ptr + o1;
NRAW:	paddr_t ptr2 = h2.bh_ptr + o2;
NRAW:
NRAW:	BUS_SPACE_ASSERT(t, h1, o2, <NUM>);
NRAW:	BUS_SPACE_ASSERT(t, h2, o2, <NUM>);
NRAW:	BUS_SPACE_TRACE(t, h1,
NRAW:	    ("bscr<NUM>(%llx + %llx, %llx + %llx, %x, %x) <-> \n",
NRAW:	    (long long)h1.bh_ptr, (long long)o1,
NRAW:	    (long long)h2.bh_ptr, (long long)o2,
NRAW:	    t-><ASI>, c));
NRAW:
NRAW:	asi_set(t-><ASI>);
NRAW:	for (; c; c--, ptr1 += <NUM>, ptr2 += <NUM>) {
NRAW:		<TYPE> r = <LOAD>_asi(ptr2);
NRAW:		BUS_SPACE_TRACE(t, h1, (" <FMT>", r));
NRAW:		<STORE>_asi(ptr1, r);
NRAW:	}
NRAW:	BUS_SPACE_TRACE(t, h1, ("\n"));
NRAW:}

@


1.1
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
ECHO:/*      $OpenBSD: $   */
d50 1
a50 1
	
d58 1
a58 1
	
d174 3
a176 3
void
bus_space_copy_<RAW>region_<NUM>(bus_space_tag_t t, bus_space_handle_t h1,
    bus_size_t o1, bus_space_handle_t h2, bus_size_t o2,
d178 20
a197 22
RAW:    size_t c)
{
	paddr_t ptr1 = h1.bh_ptr + o1;
	paddr_t ptr2 = h2.bh_ptr + o2;

	BUS_SPACE_ASSERT(t, h1, o2, <NUM>);
	BUS_SPACE_ASSERT(t, h2, o2, <NUM>);
	BUS_SPACE_TRACE(t, h1,
	    ("bscr<NUM>(%llx + %llx, %llx + %llx, %x, %x) <-> \n",
	    (long long)h1.bh_ptr, (long long)o1,
	    (long long)h2.bh_ptr, (long long)o2,
	    t-><ASI>, c));
RAW:	c /= sizeof(<TYPE>);

	asi_set(t-><ASI>);
        for (; c; c--, ptr1 += <NUM>, ptr2 += <NUM>) {
		<TYPE> r = <LOAD>_asi(ptr2);
		BUS_SPACE_TRACE(t, h1, (" <FMT>", r));
		<STORE>_asi(ptr1, r);
	}
	BUS_SPACE_TRACE(t, h1, ("\n"));
}
@


1.1.6.1
log
@sync
@
text
@d1 1
a1 1
ECHO:/*      $OpenBSD$   */
@

