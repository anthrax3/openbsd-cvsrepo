head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.30
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.28
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.26
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.24
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.22
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.20
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.18
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.16
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.14
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.12
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.10
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.6
	UBC_BASE:1.6
	SMP:1.6.0.4
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	SPARC64:1.1.1.1
	NETBSD:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2016.11.06.16.04.20;	author tb;	state Exp;
branches;
next	1.12;
commitid	tupV2UpHQlnB6RWH;

1.12
date	2014.07.15.22.14.37;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	NR8siXEkpaNp3MWn;

1.11
date	2013.10.30.00.43.46;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.31.17.19.29;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.30.19.29.14;	author pascal;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.26.10.26.03;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.08.22.19.38;	author jason;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.09.06.19.12.34;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.06.18.36.41;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.22.10.53.28;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.22.06.43.14;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.04.16.37;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.18.04.16.37;	author jason;	state Exp;
branches;
next	;

1.6.4.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile,v 1.12 2014/07/15 22:14:37 deraadt Exp $
#	$NetBSD: Makefile,v 1.1 2000/08/20 14:58:45 mrg Exp $

CURDIR=	${.CURDIR}
S=	${CURDIR}/../../../..

#
# Override normal settings
#

CLEANFILES=	assym.fth.h assym.fth.h.tmp machine \
		bootblk bootblk.text bootblk.text.tmp

NOMAN=
STRIPFLAG=
BINMODE=644

INCLUDES=	-I. -I$S/arch -I$S -nostdinc
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM}

.if !make(clean) && !make(cleandir) && !make(includes) && !make(libdep) && \
    !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../include machine)
.endif

all: bootblk.text bootblk

assym.fth.h: ${.CURDIR}/genassym.sh genfth.cf
	sh ${.CURDIR}/genassym.sh ${CC} ${CFLAGS} \
	    ${CPPFLAGS} ${PROF} <${.CURDIR}/genfth.cf >assym.fth.h.tmp && \
	    mv -f assym.fth.h.tmp assym.fth.h

bootblk.text: bootblk.fth assym.fth.h
	awk '/fload/ { file=$$2; while ((ret = getline <file) == 1) print; close(file); if (ret == -1) print "unable to read " file >"/dev/stderr"; next }; !/fload/' \
	    ${.CURDIR}/bootblk.fth >bootblk.text.tmp && \
	    mv -f bootblk.text.tmp bootblk.text

bootblk: bootblk.fth assym.fth.h
	fgen -o bootblk ${.CURDIR}/bootblk.fth

beforedepend:
	@@touch .depend

beforeinstall:
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
	    bootblk ${DESTDIR}/usr/mdec

#
# The following are if you grab the fakeboot program from the Sun website
#

fake: bootblk bootblk.text
	../fakeboot/fakeboot -elf32 <bootblk >/bootblk
	../fakeboot/fakeboot -elf32 <bootblk.text >/bootblk.text

.include <bsd.prog.mk>
@


1.12
log
@mode 644 for installing these files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2013/10/30 00:43:46 guenther Exp $
d21 2
a22 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
@


1.11
log
@Stop using cpp -tradition for fcode; handle the inclusion of a
generated file using awk instead.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2012/08/31 17:19:29 deraadt Exp $
d16 1
@


1.10
log
@remove some compat junk; ok kettenis
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2012/08/30 19:29:14 pascal Exp $
d11 1
a11 1
CLEANFILES=	assym.fth.h assym.fth.h.tmp machine sparc \
a26 3
sparc:
	ln -s ${.CURDIR}/../../../sparc/include sparc

d33 2
a34 2
	awk '/fload/ { print "#include \"" $$2 "\"" }; !/fload/' \
	    ${.CURDIR}/bootblk.fth | /usr/bin/cpp -traditional -P >bootblk.text.tmp && \
@


1.9
log
@Kill NOPIE and NOPIE_FLAGS in sparc64/stand.  Binaries are identical according
to deraadt@@, ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2012/08/21 14:46:19 pascal Exp $
a16 10
# deal with Solaris vs. NetBSD build environments for now ..
OS!=uname -s
.if (${OS} == "OpenBSD")
USE_GENASSYM?=	no
SVR4=
.else
USE_GENASSYM?=	yes
SVR4=-U__SVR4 -U__svr4__ -D__NetBSD__
.endif

d18 1
a18 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_LKM ${SVR4}
@


1.8
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2007/11/26 10:26:03 deraadt Exp $
a28 1
NOPIE=
@


1.7
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2001/10/08 22:19:38 jason Exp $
d29 1
@


1.6
log
@We're not cross hosted these days.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/09/06 19:12:34 jason Exp $
d30 1
a30 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.6.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.5
log
@use some make magic (borrowed from macppc) to build {obj/}machine
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2001/09/06 18:36:41 jason Exp $
d19 1
a19 1
.if (${OS} == "NetBSD")
a21 3
.elif (${OS} == "OpenBSD")
USE_GENASSYM?=	no
SVR4=-U__NetBSD__ -D__OpenBSD__
@


1.4
log
@compile with native userland
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2001/08/22 10:53:28 art Exp $
d33 5
a39 3
#clean:: 
#	rm assym.fth.h bootblk.text machine bootblk

d43 1
a43 4
machine:
	ln -s ${.CURDIR}/../../../${MACHINE}/include machine

assym.fth.h: ${.CURDIR}/genassym.sh genfth.cf machine
@


1.3
log
@Make it work correctly with our make. (including install).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2001/08/22 06:43:14 art Exp $
d22 3
d51 1
a51 1
	    ${.CURDIR}/bootblk.fth | /usr/bin/cpp -P >bootblk.text.tmp &&
@


1.2
log
@Make this work a bit better.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1.1.1 2001/08/18 04:16:37 jason Exp $
a10 3
PROG=	
SRCS=		bootblk.fth
OBJS=
d56 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d11 1
a11 1
PROG=	bootblk
d33 1
a33 1
#all:: bootblk.text bootblk
@


1.1.1.1
log
@Enough of NetBSD/sparc64 to get compilable/working bootblk... more to come.
@
text
@@
