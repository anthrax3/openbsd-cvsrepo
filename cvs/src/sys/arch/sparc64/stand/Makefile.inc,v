head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.24
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.26
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.22
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.18
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.20
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@# @;


1.10
date	2011.04.10.12.32.11;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.18.06.21.40;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.26.10.26.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.25.18.25.33;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.30.02.03.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.13.21.03.38;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.10.09.35.42;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.02.09.00.25;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.19.55.33;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.18.16.19.28;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.03.27.23.42.37;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2004.02.19.10.50.01;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.05.19.21.46.58;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Add -fno-builtin-exit to CFLAGS to silence gcc4.
@
text
@#	$OpenBSD: Makefile.inc,v 1.9 2011/03/18 06:21:40 matthew Exp $
#	$NetBSD: Makefile.inc,v 1.7 2000/08/20 14:57:16 mrg Exp $

.ifndef __INCLUDED_STAND_MAKEFILE_INC
__INCLUDED_STAND_MAKEFILE_INC=

CEXTRAFLAGS?=-D_LP64
AFLAGS+= -Wa,-Av9a

BINDIR=		/usr/mdec

STANDALONE?=	-D_STANDALONE

.if ${MACHINE} == "sparc64"
CPPFLAGS+=	${STANDALONE} -DSUN4U
CPPFLAGS+=	-I.

CFLAGS+=	-fno-stack-protector
CFLAGS+=	-msoft-float
CFLAGS+=	-fno-builtin-vprintf -fno-builtin-printf -fno-builtin-putchar
CFLAGS+=	-fno-builtin-exit
.endif

### Figure out what to use for libsa
LIBSADIR=               ${.CURDIR}/../libsa

.if exists(${LIBSADIR}/${__objdir})
LIBSAOBJDIR=            ${LIBSADIR}/${__objdir}
.else
LIBSAOBJDIR=            ${LIBSADIR}
.endif

LIBSA=                  ${LIBSAOBJDIR}/libsa.a

### Figure out what to use for libz
LIBZDIR=                ${.CURDIR}/../libz

.if exists(${LIBZDIR}/${__objdir})
LIBZOBJDIR=             ${LIBZDIR}/${__objdir}
.else
LIBZOBJDIR=             ${LIBZDIR}
.endif

LIBZ=                   ${LIBZOBJDIR}/libz.a

.endif
@


1.9
log
@Fix obj directory probing to support cross compiling.

"Go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2007/11/26 10:26:02 deraadt Exp $
d21 1
@


1.8
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2007/11/25 18:25:33 deraadt Exp $
d26 2
a27 4
.if exists(${LIBSADIR}/obj.${MACHINE})
LIBSAOBJDIR=            ${LIBSADIR}/obj.${MACHINE}
.elif exists(${LIBSADIR}/obj)
LIBSAOBJDIR=            ${LIBSADIR}/obj
d37 2
a38 4
.if exists(${LIBZDIR}/obj.${MACHINE})
LIBZOBJDIR=             ${LIBZDIR}/obj.${MACHINE}
.elif exists(${LIBZDIR}/obj)
LIBZOBJDIR=             ${LIBZDIR}/obj
@


1.7
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2005/12/30 02:03:49 millert Exp $
a21 2


@


1.6
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2004/07/13 21:03:38 marc Exp $
a23 13

### Figure out what to use for libkern
LIBKERNDIR=             ${.CURDIR}/../libkern

.if exists(${LIBKERNDIR}/obj.${MACHINE})
LIBKERNOBJDIR=          ${LIBKERNDIR}/obj.${MACHINE}
.elif exists(${LIBKERNDIR}/obj)
LIBKERNOBJDIR=          ${LIBKERNDIR}/obj
.else 
LIBKERNOBJDIR=          ${LIBKERNDIR}
.endif

LIBKERN=                ${LIBKERNOBJDIR}/libkern.a
@


1.5
log
@errno changes, lib major version bumps, and general flag day
To build you must:
cd /usr/src && make obj && make includes
cd lib/libc && make depend && make && NOMAN=1 sudo make install
cd /usr/src && make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2004/01/10 09:35:42 pvalchev Exp $
a16 1
CPPFLAGS+=	-Derrno=errno
@


1.4
log
@- shift some variables
- fix a problem caused by the fact that in gcc3, gcc -Ufoo -Dfoo in this
order causes "foo" to be defined (different in gcc2)
make logic from espie; tested on gcc2 by brad
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2002/12/02 09:00:25 miod Exp $
d17 1
@


1.3
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2001/08/20 19:55:33 jason Exp $
d12 2
d15 1
a15 1
CPPFLAGS+=	-D_STANDALONE -DSUN4U
d20 1
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
#	$OpenBSD$
d16 1
@


1.2.6.1
log
@sync
@
text
@a15 1
CFLAGS+=	-fno-stack-protector
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Sync the SMP branch with 3.3
@
text
@a15 1
CFLAGS+=	-fno-stack-protector
@


1.2.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a11 2
STANDALONE?=	-D_STANDALONE

d13 1
a13 1
CPPFLAGS+=	${STANDALONE} -DSUN4U
a17 1
CFLAGS+=	-fno-builtin-vprintf -fno-builtin-printf -fno-builtin-putchar
@


1.1
log
@More files needed to compile/link ofwboot
@
text
@d1 1
@

