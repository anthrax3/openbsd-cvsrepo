head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.19.0.8
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.10
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.8
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.4
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.12
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.10
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.6
	UBC_BASE:1.6
	SMP:1.6.0.4
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	SPARC64:1.1.1.1
	NETBSD:1.1.1;
locks; strict;
comment	@# @;


1.25
date	2016.11.06.16.04.21;	author tb;	state Exp;
branches;
next	1.24;
commitid	tupV2UpHQlnB6RWH;

1.24
date	2016.09.18.16.34.59;	author jsing;	state Exp;
branches;
next	1.23;
commitid	xxSOamF7jPcxnio1;

1.23
date	2016.09.11.17.53.26;	author jsing;	state Exp;
branches;
next	1.22;
commitid	BqYFMxtCOwuz1mwM;

1.22
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.21;
commitid	m28Q0aUDbVqwDb3p;

1.21
date	2016.09.10.16.38.16;	author jsing;	state Exp;
branches;
next	1.20;
commitid	Guvt83tYQgzHIRwk;

1.20
date	2016.07.30.03.25.49;	author guenther;	state Exp;
branches;
next	1.19;
commitid	HVbAtwruDlJazNH2;

1.19
date	2014.11.26.20.30.41;	author stsp;	state Exp;
branches;
next	1.18;
commitid	e315CjZvNnS0qsAl;

1.18
date	2012.08.30.19.29.14;	author pascal;	state Exp;
branches;
next	1.17;

1.17
date	2012.08.21.14.46.20;	author pascal;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.25.12.53.38;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2010.08.21.17.22.42;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2009.08.28.13.21.55;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.05.21.17.28;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.26.10.26.03;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.25.18.25.33;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.17.20.45.27;	author hshoexer;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.03.18.38.11;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.18.20.46.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.10.02.42.58;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.06.19.12.34;	author jason;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.08.22.10.41.46;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.22.10.33.01;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.22.10.27.26;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.19.55.33;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.15.51.00;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.18.15.51.00;	author jason;	state Exp;
branches;
next	;

1.6.4.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile,v 1.24 2016/09/18 16:34:59 jsing Exp $
#	$NetBSD: Makefile,v 1.2 2001/03/04 14:50:05 mrg Exp $

CURDIR=	${.CURDIR}
S=	${CURDIR}/../../../..

#
# Override normal settings
#

WARNS=		0

PROG?=		ofwboot
NOMAN=		ja, man!

.if ${PROG} == "ofwboot"
SOFTRAID?=	yes
.else
SOFTRAID?=	no
.endif

.PATH:		${S}/arch/sparc64/sparc64
SRCS=		srt0.s Locore.c alloc.c boot.c elf64_exec.c net.c netif_of.c \
		ofdev.c vers.c
.if ${SOFTRAID:L} == "yes"
SRCS+=		diskprobe.c softraid_sparc64.c
.endif

.PATH:		${S}/lib/libkern/arch/sparc64 ${S}/lib/libkern
SRCS+=		strlcpy.c strcmp.c strlcat.c strlen.c

.if ${SOFTRAID:L} == "yes"
.PATH:		${S}/lib/libsa
SRCS+=		aes_xts.c bcrypt_pbkdf.c blowfish.c explicit_bzero.c \
		hmac_sha1.c pkcs5_pbkdf2.c rijndael.c sha1.c sha2.c softraid.c
.endif

CWARNFLAGS+=	-Wno-main
AFLAGS+=	-Wa,-Av9a
AFLAGS+=	-x assembler-with-cpp -D_LOCORE -D__ELF__ -fno-pie
CFLAGS+=	${COPTS} -fno-pie
CPPFLAGS+=	-D_STANDALONE -DSUN4U -nostdinc
#CPPFLAGS+=	-DNETIF_DEBUG 

BINMODE=	444

NEWVERSWHAT=	"OpenFirmware Boot"

#
# ELF64 defaults to 1MB
#
RELOC=		100000

ENTRY=		_start

CLEANFILES+=	sparc machine

CPPFLAGS+=	-I${CURDIR}/../../.. -I${CURDIR}/../../../.. -I${CURDIR} -I.
CPPFLAGS+=	-DRELOC=0x${RELOC}

#
# XXXXX FIXME
#
CPPFLAGS+=	-DSPARC_BOOT_UFS
#CPPFLAGS+=	-DSPARC_BOOT_HSFS
.if ${SOFTRAID:L} == "yes"
CPPFLAGS+=	-DSOFTRAID
.endif

.if !make(clean) && !make(cleandir) && !make(includes) && !make(libdep) && \
    !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../include machine)
.endif

${PROG}: ${OBJS} ${LIBSA} ${LIBZ}
	${LD} -N -Ttext ${RELOC} -e ${ENTRY} -o ${PROG} -nopie -znorelro \
	    ${OBJS} -L${LIBSADIR} ${LIBSA} \
	    -L${LIBZDIR} ${LIBZ}

NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<
srt0.o: srt0.s
	${NORMAL_S}

.include <bsd.prog.mk>
@


1.24
log
@Add bcrypt pbkdf support to the softraid crypto boot loader code.

Based on a diff from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2016/09/11 17:53:26 jsing Exp $
d70 2
a71 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
@


1.23
log
@Switch sparc64 boot code to libsa MI softraid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2016/09/11 15:54:11 jsing Exp $
d34 2
a35 2
SRCS+=		aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c \
		rijndael.c sha1.c softraid.c
@


1.22
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2016/09/10 16:38:16 jsing Exp $
d34 2
a35 2
SRCS+=		aes_xts.c explicit_bzero.c hmac_sha1.c sha1.c pkcs5_pbkdf2.c \
		rijndael.c
@


1.21
log
@Rename libsa pbkdf2.c to pkcs5_pbkdf2.c so that we match libutil.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2016/07/30 03:25:49 guenther Exp $
d26 1
a26 1
SRCS+=		diskprobe.c softraid.c
@


1.20
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2014/11/26 20:30:41 stsp Exp $
d34 1
a34 1
SRCS+=		aes_xts.c explicit_bzero.c hmac_sha1.c sha1.c pbkdf2.c \
@


1.19
log
@Introduce softraid boot support to sparc64 ofwboot.
sparc64 machines should now be able to boot from softraid raid1 and crypto.
Tested on sun blade100, sunfire v240, and sun t1000 ldom guests.
Lots of encouragement from deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2012/08/30 19:29:14 pascal Exp $
d76 1
a76 1
	${LD} -N -Ttext ${RELOC} -e ${ENTRY} -o ${PROG} -nopie \
@


1.18
log
@Kill NOPIE and NOPIE_FLAGS in sparc64/stand.  Binaries are identical according
to deraadt@@, ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2012/08/21 14:46:20 pascal Exp $
d16 6
d25 3
d32 6
d66 3
@


1.17
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2010/08/25 12:53:38 jsing Exp $
d25 2
a26 2
AFLAGS+=	-x assembler-with-cpp -D_LOCORE -D__ELF__
CFLAGS+=	${COPTS}
a28 1
NOPIE=
d58 1
a58 1
	${LD} -N -Ttext ${RELOC} -e ${ENTRY} -o ${PROG} \
@


1.16
log
@Remove the SPARC_BOOT_ELF define and associated machinery since it does
not make sense to compile ofwboot without support for ELF. Whilst here,
nuke the unused SPARC_BOOT_NFS define and compile elf64_exec.c as an
object rather than including it in boot.c.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2010/08/21 17:22:42 jsing Exp $
d29 1
@


1.15
log
@Rename file to reflect that it handles 64 bit ELF only.

ok miod@@ (some time ago)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2007/11/26 10:26:03 deraadt Exp $
d17 2
a18 1
SRCS=		srt0.s Locore.c boot.c ofdev.c alloc.c net.c netif_of.c vers.c
a48 1
CPPFLAGS+=	-DSPARC_BOOT_ELF
a49 1
CPPFLAGS+=	-DSPARC_BOOT_NFS
a64 3

# Explicit dependency for this.
boot.o: boot.c elf64_exec.c
@


1.14
log
@ofwboot can be compiled without -traditional-cpp.

From jsg@@
@
text
@d68 1
a68 1
boot.o: boot.c elfXX_exec.c
@


1.13
log
@Link bootloader at 1MB (same a the Solaris bootloader) instead of 8MB (which
the firmware on the v1280 doesn't like).

tested by many
@
text
@d24 1
a24 1
AFLAGS+=	-x assembler-with-cpp -traditional-cpp -D_LOCORE -D__ELF__
@


1.12
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2007/11/25 18:25:33 deraadt Exp $
d36 1
a36 4
# We may get address conflicts with other bootloaders, say
# Sun's ufsboot, so we'll pick a reasonably empty address.
#
RELOC=		800000
@


1.11
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2007/10/17 20:45:27 hshoexer Exp $
d56 1
a56 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.10
log
@Do not clean up vers.c as it is not autogenerated anymore.

ok deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2007/05/03 18:38:11 deraadt Exp $
d15 2
d18 3
a20 1
.PATH:		${S}/arch/sparc64/sparc64
d61 1
a61 1
${PROG}: ${OBJS} ${LIBSA} ${LIBZ} ${LIBKERN}
d63 1
a63 1
	    ${OBJS} -L${LIBSADIR} ${LIBSA} -L${LIBKERNDIR} ${LIBKERN} \
@


1.9
log
@sensible version strings; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2004/10/18 20:46:48 miod Exp $
d39 1
a39 1
CLEANFILES+=	vers.c sparc machine
@


1.8
log
@Do not pass -print-map to the linker anymore, as we don't care about this
output.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2003/06/10 02:42:58 brad Exp $
a55 3

vers.c: version
	sh ${S}/conf/newvers.sh ${CURDIR}/version "sparc64" ${NEWVERSWHAT}
@


1.7
log
@- rip out support for a.out and 32-bit kernels
- cleanup and simplify Makefile
jason@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2001/09/06 19:12:34 jason Exp $
d61 1
a61 1
	${LD} -N -p -Ttext ${RELOC} -e ${ENTRY} >lderr -o ${PROG} \
@


1.6
log
@use some make magic (borrowed from macppc) to build {obj/}machine
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/08/22 10:41:46 art Exp $
d19 3
a21 1
CFLAGS+=	${COPTS} ${CEXTRAFLAGS}
a24 2
MKMAN=		no
STRIPFLAG=
a25 1
OBJCOPY?=	objcopy
d30 1
a30 1
# Elf64 defaults to 1MB
a46 1
CPPFLAGS+=	-DSPARC_BOOT_AOUT
a64 16
.include <bsd.prog.mk>

.if ${MACHINE_ARCH} == "sparc64"
AFLAGS+=		-Wa,-Av9a
CEXTRAFLAGS?=		-D_LP64
.else
AFLAGS+=		-Wa,-Av8plusa
.endif

.if CROSS
AFLAGS+=		-x assembler-with-cpp -traditional-cpp -D_LOCORE -D__ELF__
CEXTRAFLAGS?=		-D_LP64
.else
AFLAGS+=		-x assembler-with-cpp -traditional-cpp -D_LOCORE -D__ELF__ ${CEXTRAFLAGS}
.endif

d71 2
@


1.6.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.6.4.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d19 1
a19 3
AFLAGS+=	-Wa,-Av9a
AFLAGS+=	-x assembler-with-cpp -traditional-cpp -D_LOCORE -D__ELF__
CFLAGS+=	${COPTS}
d23 2
d26 1
d31 1
a31 1
# ELF64 defaults to 1MB
d48 1
d67 16
a88 2

.include <bsd.prog.mk>
@


1.5
log
@nostdinc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2001/08/22 10:33:01 art Exp $
d54 4
a57 10
.NOPATH: machine sparc64
beforedepend: machine sparc64

machine:
	rm -f machine
	ln -s sparc64 machine

sparc64:
	rm -f sparc64
	ln -s ${.CURDIR}/../../../sparc64/include sparc64
@


1.4
log
@NOMAN
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2001/08/22 10:27:26 art Exp $
d20 1
a20 1
CPPFLAGS+=	-D_STANDALONE -DSUN4U
@


1.3
log
@another dependency on make bugs.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2001/08/20 19:55:33 jason Exp $
d14 1
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
#	$OpenBSD$
d54 1
a54 1
${SRCS}: machine sparc64
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Enough of NetBSD/sparc64 for ofwboot to compile/link
@
text
@@
