head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2016.01.20.16.05.15;	author stsp;	state Exp;
branches;
next	1.3;
commitid	TIKr0yaN4ThpV2gE;

1.3
date	2014.12.09.18.05.16;	author stsp;	state Exp;
branches;
next	1.2;
commitid	p8TgAnVNHMlozyJa;

1.2
date	2014.12.04.10.33.41;	author stsp;	state Exp;
branches;
next	1.1;
commitid	mxMkF8JHhHLMGMOm;

1.1
date	2014.11.26.20.30.41;	author stsp;	state Exp;
branches;
next	;
commitid	e315CjZvNnS0qsAl;


desc
@@


1.4
log
@Check for disks deeper than 4 levels down in the Open Firmware device tree.
Makes softraid(4) boot possible on more sparc64 machines.
Tested on Sun Fire machines by mikeb@@ and Alexander Bochmann via misc@@
ok mikeb@@
@
text
@/*	$OpenBSD: diskprobe.c,v 1.3 2014/12/09 18:05:16 stsp Exp $ */

/*
 * Copyright (c) 2008 Mark Kettenis <kettenis@@openbsd.org>
 * Copyright (c) 2014 Stefan Sperling <stsp@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/disklabel.h>

#include <lib/libsa/stand.h>

#include "ofdev.h"
#include "disk.h"
#include "openfirm.h"

/* List of disk devices we found/probed */
struct disklist_lh disklist;

struct diskinfo *bootdev_dip;

void
new_diskinfo(int node)
{
	struct diskinfo *dip;
	struct of_dev ofdev;
	int ihandle = -1;
	int len;
	const char *unit;
	int i;

	dip = alloc(sizeof(*dip));
	bzero(dip, sizeof(*dip));

	len = OF_package_to_path(node, dip->path, sizeof(dip->path));
	if (len < 0) { 
		DPRINTF("could not get path for disk node %x\n", node);
		goto bad;
	} else if (len >= sizeof(dip->path)) {
		printf("disk device path too long: %s", dip->path);
		goto bad;
	}
	dip->path[len] = '\0';

	/* If no device unit was supplied by the firmware, add it. */
	unit = NULL;
	for (i = len - 1; i >= 0; i--) {
		if (dip->path[i] == '/')
			break;
		else if (dip->path[i] == '@@') {
			unit = &dip->path[i];
			break;
		}
	}
	if (unit == NULL) {
		len = strlcat(dip->path, "@@0", sizeof(dip->path));
		if (len >= sizeof(dip->path)) {
			printf("disk device path too long: %s", dip->path);
			goto bad;
		}
	}

	DPRINTF("found disk %s\n", dip->path);

	ihandle = OF_open(dip->path);
	if (ihandle == -1)
		goto bad;

	bzero(&ofdev, sizeof(ofdev));
	ofdev.handle = ihandle;
	ofdev.type = OFDEV_DISK;
	ofdev.bsize = DEV_BSIZE;
	if (load_disklabel(&ofdev, &dip->disklabel) != 0)
		goto bad;
	OF_close(ihandle);
	TAILQ_INSERT_TAIL(&disklist, dip, list);

	return;
bad:
	if (ihandle != -1)
		OF_close(ihandle);
	free(dip, sizeof(*dip));
}

#ifdef BOOT_DEBUG
void dump_node(int node)
{
	char buf[32];

	printf("node %x ", node);
	if (OF_getprop(node, "device_type", buf, sizeof(buf)) > 0)
		printf("type %s ", buf);
	if (OF_getprop(node, "name", buf, sizeof(buf)) > 0)
		printf("name %s ", buf);
	printf("\n");
}
#endif

/*
 * Hunt through the device tree for disks.  There should be no need to
 * go more than 10 levels deep.
 */
void
diskprobe(void)
{
	int node, child, stack[10], depth;
	char buf[32];

	stack[0] = OF_peer(0);
	if (stack[0] == 0)
		return;
	depth = 0;
	TAILQ_INIT(&disklist);

	for (;;) {
		node = stack[depth];

		if (node == 0 || node == -1) {
			if (--depth < 0)
				return;
			
			stack[depth] = OF_peer(stack[depth]);
			continue;
		}

#ifdef BOOT_DEBUG
		dump_node(node);
#endif
		if ((OF_getprop(node, "device_type", buf, sizeof(buf)) > 0 &&
		    strcmp(buf, "block") == 0 &&
		    OF_getprop(node, "name", buf, sizeof(buf)) > 0 &&
		    strcmp(buf, "disk") == 0)) {
			new_diskinfo(node);
		}

		child = OF_child(node);
		if (child != 0 && child != -1 && depth < 9)
			stack[++depth] = child;
		else
			stack[depth] = OF_peer(stack[depth]);
	}
}
@


1.3
log
@Check strlcpy(), strlcat(), and snprintf() return values in sparc64 ofwboot.
tweak and ok millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: diskprobe.c,v 1.2 2014/12/04 10:33:41 stsp Exp $ */
d113 1
a113 1
 * go more than four levels deep.
d118 1
a118 1
	int node, child, stack[4], depth;
d149 1
a149 1
		if (child != 0 && child != -1 && depth < 3)
@


1.2
log
@The sparc64 Open Firmware package-to-path call (used since softraid boot
support was introduced) may return a device path without a unit number?!?
Open Firmware's open-dev routine will crash if given such a path, rendering
the system unbootable. Repair such paths by adding unit number "0".
Breakage found by sebiasta@@ on a Sun Enterprise E450, fix tested by him.
helpful hints from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: diskprobe.c,v 1.1 2014/11/26 20:30:41 stsp Exp $ */
d48 1
a48 1
	if (len < 0 || len >= sizeof(dip->path)) {
d51 3
d67 7
a73 2
	if (unit == NULL)
		strlcat(dip->path, "@@0", sizeof(dip->path));
@


1.1
log
@Introduce softraid boot support to sparc64 ofwboot.
sparc64 machines should now be able to boot from softraid raid1 and crypto.
Tested on sun blade100, sunfire v240, and sun t1000 ldom guests.
Lots of encouragement from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d40 3
d47 2
a48 3
	if (OF_package_to_path(node, dip->path, sizeof(dip->path)) > 0)
		DPRINTF("found disk %s\n", dip->path);
	else {
d51 17
a67 1
	}	
@

