head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.7;
commitid	m28Q0aUDbVqwDb3p;

1.7
date	2014.11.26.20.30.41;	author stsp;	state Exp;
branches;
next	1.6;
commitid	e315CjZvNnS0qsAl;

1.6
date	2014.07.12.21.03.38;	author tedu;	state Exp;
branches;
next	1.5;
commitid	BPzam5MbotE66TAj;

1.5
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.4;
commitid	uKVPYMN2MLxdZxzH;

1.4
date	2013.12.28.21.00.21;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.21.21.51.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.25.12.53.38;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.21.17.22.42;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@/*	$OpenBSD: elf64_exec.c,v 1.7 2014/11/26 20:30:41 stsp Exp $	*/
/*	$NetBSD: elfXX_exec.c,v 1.2 2001/08/15 20:08:15 eeh Exp $	*/

/*
 * Copyright (c) 1998-2000 Eduardo Horvath.  All rights reserved.
 * Copyright (c) 1997 Jason R. Thorpe.  All rights reserved.
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * ELF support derived from NetBSD/alpha's boot loader, written
 * by Christopher G. Demetriou.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * First try for the boot code
 *
 * Input syntax is:
 *	[promdev[{:|,}partition]]/[filename] [flags]
 */

#define	ELFSIZE		64
#define	MB		(1024 * 1024)

#define ELF_ALIGN(x)	(((x) + 7) & (~7))

#include <lib/libsa/stand.h>

#include <sys/param.h>
#include <sys/exec_elf.h>

#include <machine/boot_flag.h>

#ifdef SOFTRAID
#include <sys/param.h>
#include <sys/queue.h>
#include <sys/disklabel.h>
#include <dev/biovar.h>
#include <dev/softraidvar.h>

#include "disk.h"
#include "softraid_sparc64.h"
#endif

#include "openfirm.h"

int
elf64_exec(int fd, Elf_Ehdr *elf, u_int64_t *entryp, void **ssymp, void **esymp){ 
	Elf_Shdr *shp;
	Elf_Off off;
	void *addr;
	size_t size;
	u_int align;
	int i, first = 1;
	int n;
	struct openbsd_bootdata *obd;
#ifdef SOFTRAID
	struct sr_boot_volume *bv;
#endif

	/*
	 * Don't display load address for ELF; it's encoded in
	 * each section.
	 */
	for (i = 0; i < elf->e_phnum; i++) {
		Elf_Phdr phdr;
		size = lseek(fd, (size_t)(elf->e_phoff + sizeof(phdr) * i),
		    SEEK_SET);
		if (read(fd, (void *)&phdr, sizeof(phdr)) != sizeof(phdr)) {
			printf("read phdr: %s\n", strerror(errno));
			return (1);
		}

		if (phdr.p_type == PT_OPENBSD_BOOTDATA) {
			memset((void *) (long)phdr.p_paddr, 0, phdr.p_filesz);

			if (phdr.p_filesz < sizeof(struct openbsd_bootdata))
				continue;

			obd = (struct openbsd_bootdata *)(long)phdr.p_paddr;
			obd->version = BOOTDATA_VERSION;
			obd->len = sizeof(struct openbsd_bootdata);
#ifdef SOFTRAID
			/* 
			 * If booting from softraid we must pass additional
			 * information to the kernel:
			 * 1) The uuid of the softraid volume we booted from.
			 * 2) The maskkey for decryption, if applicable.
			 */
			if (bootdev_dip && bootdev_dip->sr_vol) {
				bv = bootdev_dip->sr_vol;
				memcpy(obd->sr_uuid, bv->sbv_uuid.sui_id,
				    sizeof(obd->sr_uuid));
				if (bv->sbv_maskkey)
					memcpy(obd->sr_maskkey, bv->sbv_maskkey,
					    sizeof(obd->sr_maskkey));
			}

#endif
			continue;
		}

		if (phdr.p_type == PT_OPENBSD_RANDOMIZE) {
			int m, pos;

			/* Fill segment. */
			for (pos = 0; pos < phdr.p_filesz; pos += m) {
				m = MIN(phdr.p_filesz - pos, sizeof(rnddata));
				bcopy(rnddata, (void *)(long)phdr.p_paddr + pos, m);
			}
			continue;
		}

		if (phdr.p_type != PT_LOAD ||
		    (phdr.p_flags & (PF_W|PF_X)) == 0)
			continue;

		/* Read in segment. */
		printf("%s%lu@@0x%lx", first ? "" : "+", (u_long)phdr.p_filesz,
		    (u_long)phdr.p_vaddr);
		(void)lseek(fd, (size_t)phdr.p_offset, SEEK_SET);

		/* 
		 * If the segment's VA is aligned on a 4MB boundary, align its
		 * request 4MB aligned physical memory.  Otherwise use default
		 * alignment.  Make sure BSS is extended to a 4MB boundary, too.
		 */
		align = phdr.p_align;
		if ((phdr.p_vaddr & (4 * MB - 1)) == 0)
			align = 4 * MB;
		if (phdr.p_filesz < phdr.p_memsz)
			phdr.p_memsz = roundup(phdr.p_memsz, 4 * MB);
		phdr.p_memsz = roundup(phdr.p_memsz, PAGE_SIZE);
		if (OF_claim((void *)(long)phdr.p_vaddr, phdr.p_memsz, align) ==
		    (void *)-1)
			panic("cannot claim memory");
		if (read(fd, (void *)(long)phdr.p_vaddr, phdr.p_filesz) !=
		    phdr.p_filesz) {
			printf("read segment: %s\n", strerror(errno));
			return (1);
		}
		syncicache((void *)(long)phdr.p_vaddr, phdr.p_filesz);

		/* Zero BSS. */
		if (phdr.p_filesz < phdr.p_memsz) {
			printf("+%lu@@0x%lx",
			    (u_long)phdr.p_memsz - phdr.p_filesz,
			    (u_long)(phdr.p_vaddr + phdr.p_filesz));
			bzero((void *)(long)phdr.p_vaddr + phdr.p_filesz,
			    (size_t)phdr.p_memsz - phdr.p_filesz);
		}
		first = 0;
	}

	printf(" \n");

	/*
	 * Compute the size of the symbol table.
	 */
	size = sizeof(Elf_Ehdr) + (elf->e_shnum * sizeof(Elf_Shdr));
	shp = addr = alloc(elf->e_shnum * sizeof(Elf_Shdr));
	(void)lseek(fd, (off_t)elf->e_shoff, SEEK_SET);
	if (read(fd, addr, (size_t)(elf->e_shnum * sizeof(Elf_Shdr))) !=
	    elf->e_shnum * sizeof(Elf_Shdr)) {
		printf("read section headers: %s\n", strerror(errno));
		return (1);
	}
	for (i = 0; i < elf->e_shnum; i++, shp++) {
		if (shp->sh_type == SHT_NULL)
			continue;
		if (shp->sh_type != SHT_SYMTAB
		    && shp->sh_type != SHT_STRTAB) {
			shp->sh_offset = 0; 
			continue;
		}
		size += shp->sh_size;
	}
	shp = addr;

	/*
	 * Reserve memory for the symbols.
	 */
	if ((addr = OF_claim(0, roundup(size, PAGE_SIZE), PAGE_SIZE)) == (void *)-1)
		panic("no space for symbol table");

	/*
	 * Copy the headers.
	 */
	elf->e_phoff = 0;
	elf->e_shoff = sizeof(Elf_Ehdr);
	elf->e_phentsize = 0;
	elf->e_phnum = 0;
	bcopy(elf, addr, sizeof(Elf_Ehdr));
	bcopy(shp, addr + sizeof(Elf_Ehdr), elf->e_shnum * sizeof(Elf_Shdr));
	free(shp, elf->e_shnum * sizeof(Elf_Shdr));
	*ssymp = addr;

	/*
	 * Now load the symbol sections themselves.
	 */
	shp = addr + sizeof(Elf_Ehdr);
	size = sizeof(Elf_Ehdr) + (elf->e_shnum * sizeof(Elf_Shdr));
	size = ELF_ALIGN(size);
	addr += size;
	off = size;
	for (first = 1, i = 0; i < elf->e_shnum; i++, shp++) {
		if (shp->sh_type == SHT_SYMTAB
		    || shp->sh_type == SHT_STRTAB) {
			if (first)
				printf("symbols @@ 0x%lx ", (u_long)addr);
			printf("%s%d", first ? "" : "+", (int)shp->sh_size);
			(void)lseek(fd, shp->sh_offset, SEEK_SET);
			if (read(fd, addr, shp->sh_size) != shp->sh_size) {
				printf("read symbols: %s\n", strerror(errno));
				return (1);
			}
			addr += ELF_ALIGN(shp->sh_size);
			shp->sh_offset = off;
			off += ELF_ALIGN(shp->sh_size);
			first = 0;
		}
	}
	*esymp = addr;

	*entryp = elf->e_entry;
	return (0);
}

#undef ELF_ALIGN
@


1.7
log
@Introduce softraid boot support to sparc64 ofwboot.
sparc64 machines should now be able to boot from softraid raid1 and crypto.
Tested on sun blade100, sunfire v240, and sun t1000 ldom guests.
Lots of encouragement from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elf64_exec.c,v 1.6 2014/07/12 21:03:38 tedu Exp $	*/
d67 1
a67 1
#include "softraid.h"
@


1.6
log
@revert a few stragglers hiding out
@
text
@d1 1
a1 1
/*	$OpenBSD: elf64_exec.c,v 1.5 2014/07/12 18:44:43 tedu Exp $	*/
d57 13
d81 4
d97 29
@


1.5
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: elf64_exec.c,v 1.4 2013/12/28 21:00:21 kettenis Exp $	*/
d174 1
a174 1
	free(shp, elf->e_shnum * sizeof(Elf_Shdr), 0);
@


1.4
log
@Try to load entropy data from disk:/etc/random.seed.  Then, insert this into
the ELF openbsd.randomdata of the kernel, so that it has entropy right from
the start.
@
text
@d1 1
a1 1
/*	$OpenBSD: elf64_exec.c,v 1.3 2013/03/21 21:51:01 deraadt Exp $	*/
d174 1
a174 1
	free(shp, elf->e_shnum * sizeof(Elf_Shdr));
@


1.3
log
@NBPG -> PAGE_SIZE, PGSHIFT -> PAGE_SHIFT, PGOFSET -> PAGE_MASK
@
text
@d1 1
a1 1
/*	$OpenBSD: elf64_exec.c,v 1.2 2010/08/25 12:53:38 jsing Exp $	*/
d81 12
@


1.2
log
@Remove the SPARC_BOOT_ELF define and associated machinery since it does
not make sense to compile ofwboot without support for ELF. Whilst here,
nuke the unused SPARC_BOOT_NFS define and compile elf64_exec.c as an
object rather than including it in boot.c.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elf64_exec.c,v 1.1 2010/08/21 17:22:42 jsing Exp $	*/
d100 1
a100 1
		phdr.p_memsz = roundup(phdr.p_memsz, NBPG);
d150 1
a150 1
	if ((addr = OF_claim(0, roundup(size, NBPG), NBPG)) == (void *)-1)
@


1.1
log
@Rename file to reflect that it handles 64 bit ELF only.

ok miod@@ (some time ago)
@
text
@d1 1
a1 1
/*	$OpenBSD: elfXX_exec.c,v 1.8 2010/08/21 17:09:49 jsing Exp $	*/
d52 7
a72 5
#ifdef DEBUG
	printf("elf%d_exec: ", ELFSIZE);
#endif
	printf("Booting %s\n", opened_name);

d89 1
d113 2
a114 1
			printf("+%lu@@0x%lx", (u_long)phdr.p_memsz - phdr.p_filesz,
@

