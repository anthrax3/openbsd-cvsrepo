head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.4.0.40
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.36
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.34
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.32
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.30
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.28
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.26
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.24
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.22
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.20
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.18
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.16
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.14
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.12
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.10
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.6
	UBC_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SPARC64:1.1.1.1
	NETBSD:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.08.21.14.24.08;	author mpi;	state Exp;
branches;
next	1.6;
commitid	5eFitDmQJIvEdtoI;

1.6
date	2009.11.04.12.03.57;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.17.14.23.09;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.22.10.44.02;	author art;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.08.22.10.41.08;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.19.55.33;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.15.50.50;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.18.15.50.50;	author jason;	state Exp;
branches;
next	;

1.4.4.1
date	2001.10.31.03.07.59;	author nate;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Kill the remaining <netinet/in_systm.h> inclusion!
@
text
@/*	$OpenBSD: netif_of.c,v 1.6 2009/11/04 12:03:57 jsing Exp $	*/
/*	$NetBSD: netif_of.c,v 1.1 2000/08/20 14:58:39 mrg Exp $	*/

/*
 * Copyright (C) 1995 Wolfgang Solfrank.
 * Copyright (C) 1995 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Open Firmware does most of the job for interfacing to the hardware,
 * so it is easiest to just replace the netif module with
 * this adaptation to the PROM network interface.
 *
 * Note: this is based in part on sys/arch/sparc/stand/netif_sun.c
 */

#include <sys/param.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <lib/libsa/stand.h>
#include <lib/libsa/net.h>
#include <lib/libsa/netif.h>

#include "ofdev.h"
#include "openfirm.h"

static struct netif netif_of;

struct iodesc sockets[SOPEN_MAX];

struct iodesc *
socktodesc(int sock)
{
	if (sock != 0)
		return NULL;
	return sockets;
}

int
netif_open(void *machdep_hint)
{
	struct of_dev *op = machdep_hint;
	struct iodesc *io;
	int fd, error;
	char addr[32];
	
	DNPRINTF(BOOT_D_OFNET, "netif_open...");

	/* find a free socket */
	io = sockets;
	if (io->io_netif) {
		DNPRINTF(BOOT_D_OFNET, "device busy\n");
		errno = ENFILE;
		return -1;
	}
	bzero(io, sizeof *io);

	netif_of.nif_devdata = op;
	io->io_netif = &netif_of;
	
	/* Put our ethernet address in io->myea */
	OF_getprop(OF_instance_to_package(op->handle),
		   "mac-address", io->myea, sizeof io->myea);

	DNPRINTF(BOOT_D_OFNET, "OK\n");
	return 0;
}

int
netif_close(int fd)
{
	struct iodesc *io;
	struct netif *ni;

	DNPRINTF(BOOT_D_OFNET, "netif_close(%x)...", fd);

	if (fd != 0) {
		DNPRINTF(BOOT_D_OFNET, "EBADF\n");
		errno = EBADF;
		return -1;
	}

	io = &sockets[fd];
	ni = io->io_netif;
	if (ni != NULL) {
		ni->nif_devdata = NULL;
		io->io_netif = NULL;
	}

	DNPRINTF(BOOT_D_OFNET, "OK\n");
	return 0;
}

/*
 * Send a packet.  The ether header is already there.
 * Return the length sent (or -1 on error).
 */
ssize_t
netif_put(struct iodesc *desc, void *pkt, size_t len)
{
	struct of_dev *op;
	ssize_t rv;
	size_t sendlen;

	op = desc->io_netif->nif_devdata;

	DNPRINTF(BOOT_D_OFNET, "netif_put: desc=0x%x pkt=0x%x len=%d\n",
	    desc, pkt, len);
	DNPRINTF(BOOT_D_OFNET, "dst: %s, src: %s, type: 0x%x\n",
	    ether_sprintf(((struct ether_header *)pkt)->ether_dhost),
	    ether_sprintf(((struct ether_header *)pkt)->ether_shost),
	    ((struct ether_header *)pkt)->ether_type & 0xFFFF);

	sendlen = len;
	if (sendlen < 60) {
		sendlen = 60;
		DNPRINTF(BOOT_D_OFNET, "netif_put: length padded to %d\n",
		    sendlen);
	}

	rv = OF_write(op->handle, pkt, sendlen);

	DNPRINTF(BOOT_D_OFNET, "netif_put: xmit returned %d\n", rv);

	return rv;
}

/*
 * Receive a packet, including the ether header.
 * Return the total length received (or -1 on error).
 */
ssize_t
netif_get(struct iodesc *desc, void *pkt, size_t maxlen, time_t timo)
{
	struct of_dev *op;
	int tick0, tmo_ms;
	int len;

	op = desc->io_netif->nif_devdata;

	DNPRINTF(BOOT_D_OFNET, "netif_get: pkt=0x%x, maxlen=%d, tmo=%d\n",
	    pkt, maxlen, timo);

	tmo_ms = timo * 1000;
	tick0 = OF_milliseconds();

	do {
		len = OF_read(op->handle, pkt, maxlen);
	} while ((len == -2 || len == 0) &&
		 (OF_milliseconds() - tick0 < tmo_ms));

	DNPRINTF(BOOT_D_OFNET, "netif_get: received len=%d\n", len);

	if (len < 12)
		return -1;

	DNPRINTF(BOOT_D_OFNET, "dst: %s, src: %s, type: 0x%x\n",
	    ether_sprintf(((struct ether_header *)pkt)->ether_dhost),
	    ether_sprintf(((struct ether_header *)pkt)->ether_shost),
	    ((struct ether_header *)pkt)->ether_type & 0xFFFF);

	return len;
}

/*
 * Shouldn't really be here, but is used solely for networking, so...
 */
time_t
getsecs(void)
{
	return OF_milliseconds() / 1000;
}
@


1.6
log
@Replace the #ifdef NON_DEBUG and #ifdef NOTDEF_DEBUG mess with more sane
DPRINTF/DNPRINTF() debugging.
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_of.c,v 1.5 2009/08/17 14:23:09 jsing Exp $	*/
a48 1
#include <netinet/in_systm.h>
@


1.5
log
@Use ANSI function declarations. No binary change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_of.c,v 1.4 2001/08/22 10:44:02 art Exp $	*/
d79 2
a80 3
#ifdef	NETIF_DEBUG
	printf("netif_open...");
#endif
d84 1
a84 3
#ifdef	NETIF_DEBUG
		printf("device busy\n");
#endif
d97 1
a97 3
#ifdef	NETIF_DEBUG
	printf("OK\n");
#endif
d107 2
a108 3
#ifdef	NETIF_DEBUG
	printf("netif_close(%x)...", fd);
#endif
d110 1
a110 3
#ifdef	NETIF_DEBUG
		printf("EBADF\n");
#endif
d121 2
a122 3
#ifdef	NETIF_DEBUG
	printf("OK\n");
#endif
d139 6
a144 12
#ifdef	NETIF_DEBUG
	{
		struct ether_header *eh;

		printf("netif_put: desc=0x%x pkt=0x%x len=%d\n",
		       desc, pkt, len);
		eh = pkt;
		printf("dst: %s ", ether_sprintf(eh->ether_dhost));
		printf("src: %s ", ether_sprintf(eh->ether_shost));
		printf("type: 0x%x\n", eh->ether_type & 0xFFFF);
	}
#endif
d149 2
a150 3
#ifdef	NETIF_DEBUG
		printf("netif_put: length padded to %d\n", sendlen);
#endif
d155 1
a155 3
#ifdef	NETIF_DEBUG
	printf("netif_put: xmit returned %d\n", rv);
#endif
d173 2
a174 4
#ifdef	NETIF_DEBUG
	printf("netif_get: pkt=0x%x, maxlen=%d, tmo=%d\n",
	       pkt, maxlen, timo);
#endif
d184 1
a184 3
#ifdef	NETIF_DEBUG
	printf("netif_get: received len=%d\n", len);
#endif
d189 4
a192 9
#ifdef	NETIF_DEBUG
	{
		struct ether_header *eh = pkt;

		printf("dst: %s ", ether_sprintf(eh->ether_dhost));
		printf("src: %s ", ether_sprintf(eh->ether_shost));
		printf("type: 0x%x\n", eh->ether_type & 0xFFFF);
	}
#endif
@


1.4
log
@rearrange includes
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_of.c,v 1.3 2001/08/22 10:41:08 art Exp $	*/
d64 1
a64 2
socktodesc(sock)
	int sock;
d72 1
a72 2
netif_open(machdep_hint)
	void *machdep_hint;
d107 1
a107 2
netif_close(fd)
	int fd;
d140 1
a140 4
netif_put(desc, pkt, len)
	struct iodesc *desc;
	void *pkt;
	size_t len;
d183 1
a183 5
netif_get(desc, pkt, maxlen, timo)
	struct iodesc *desc;
	void *pkt;
	size_t maxlen;
	time_t timo;
d228 1
a228 1
getsecs()
@


1.4.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@netinet/if_ether.h, not net/if_ether.h.
Isn't it fun to not notice bugs because of pollution by the cross-compilation
environment?
@
text
@d1 1
a1 1
/*	$OpenBSD: netif_of.c,v 1.2 2001/08/20 19:55:33 jason Exp $	*/
a46 1
#include <netinet/if_ether.h>
d50 1
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
#include <net/if_ether.h>
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Enough of NetBSD/sparc64 for ofwboot to compile/link
@
text
@@
