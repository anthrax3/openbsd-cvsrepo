head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.18
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.20
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.16
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.12
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.14
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.10
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.18
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.16
	OPENBSD_5_0:1.16.0.14
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.12
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.10
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.6
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.8
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.8
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2012.08.17.20.46.50;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.12.13.08.04;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.29.09.53.59;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.26.16.53.28;	author tsi;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.27.18.55.57;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.28.06.28.08;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.26.14.57.11;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.27.19.20.57;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.27.55;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.22.21.56.45;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.16.17.18.14;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.06.08.26.08;	author henric;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.24.19.03.19;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.22.16.11.59;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.18.21.30.00;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.18.20.56.41;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.57;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.42.35;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Properly initialize the IOMMU control and status register for pyro(4).
Fixes DMA problems spotted on the v445.
@
text
@/*	$OpenBSD: iommureg.h,v 1.16 2008/07/12 13:08:04 kettenis Exp $	*/
/*	$NetBSD: iommureg.h,v 1.6 2001/07/20 00:07:13 eeh Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sbusreg.h	8.1 (Berkeley) 6/11/93
 */

#ifndef _SPARC64_DEV_IOMMUREG_H_
#define _SPARC64_DEV_IOMMUREG_H_

/*
 * UltraSPARC IOMMU registers, common to both the sbus and PCI
 * controllers.
 */

/* iommmu registers */
struct iommureg {
	volatile u_int64_t	iommu_cr;	/* IOMMU control register */
	volatile u_int64_t	iommu_tsb;	/* IOMMU TSB base register */
	volatile u_int64_t	iommu_flush;	/* IOMMU flush register */
	volatile u_int64_t	iommu_ctxflush;
	volatile u_int64_t	iommu_reserved[28];
	volatile u_int64_t	iommu_cache_flush;
	volatile u_int64_t	iommu_cache_invalidate;
	volatile u_int64_t	iommu_reserved2[30];
};

/* streaming buffer registers */
struct iommu_strbuf {
	volatile u_int64_t	strbuf_ctl;	/* streaming buffer control reg */
	volatile u_int64_t	strbuf_pgflush;	/* streaming buffer page flush */
	volatile u_int64_t	strbuf_flushsync;/* streaming buffer flush sync */
};

#define IOMMUREG(x)     (offsetof(struct iommureg, x))
#define STRBUFREG(x)    (offsetof(struct iommu_strbuf, x))

/* streaming buffer control register */
#define STRBUF_EN		0x000000000000000001LL
#define STRBUF_D		0x000000000000000002LL

/* control register bits */
#define IOMMUCR_TSB1K		0x000000000000000000LL	/* Nummber of entries in IOTSB */
#define IOMMUCR_TSB2K		0x000000000000010000LL
#define IOMMUCR_TSB4K		0x000000000000020000LL
#define IOMMUCR_TSB8K		0x000000000000030000LL
#define IOMMUCR_TSB16K		0x000000000000040000LL
#define IOMMUCR_TSB32K		0x000000000000050000LL
#define IOMMUCR_TSB64K		0x000000000000060000LL
#define IOMMUCR_TSB128K		0x000000000000070000LL
#define IOMMUCR_TSBMASK		0xfffffffffffff8ffffLL	/* Mask for above */
#define IOMMUCR_8KPG		0x000000000000000000LL	/* 8K iommu page size */
#define IOMMUCR_64KPG		0x000000000000000004LL	/* 64K iommu page size */
#define IOMMUCR_DE		0x000000000000000002LL	/* Diag enable */
#define IOMMUCR_EN		0x000000000000000001LL	/* Enable IOMMU */

#define IOMMUCR_FIRE_SE		0x000000000000000400LL	/* Snoop enable */
#define IOMMUCR_FIRE_CM_EN	0x000000000000000300LL  /* Cache mode enable */
#define IOMMUCR_FIRE_BE		0x000000000000000002LL	/* Bypass enable */
#define IOMMUCR_FIRE_TE		0x000000000000000001LL	/* Translation enabled */

/*
 * IOMMU stuff
 */
#define	IOTTE_V		0x8000000000000000LL	/* Entry valid */
#define IOTTE_64K	0x2000000000000000LL	/* 8K or 64K page? */
#define IOTTE_8K	0x0000000000000000LL
#define IOTTE_STREAM	0x1000000000000000LL	/* Is page streamable? */
#define	IOTTE_LOCAL	0x0800000000000000LL	/* Accesses to same bus segment? */
#define	IOTTE_CONTEXT	0x07ff800000000000LL	/* context number */
#define IOTTE_PAMASK	0x00007fffffffe000LL	/* Let's assume this is correct (bits 42..13) */
#define IOTTE_C		0x0000000000000010LL	/* Accesses to cacheable space */
#define IOTTE_W		0x0000000000000002LL	/* Writeable */
#define IOTTE_SOFTWARE	0x0000000000001f80LL	/* For software use (bits 12..7) */


/*
 * On sun4u each bus controller has a separate IOMMU.  The IOMMU has 
 * a TSB which must be page aligned and physically contiguous.  Mappings
 * can be of 8K IOMMU pages or 64K IOMMU pages.  We use 8K for compatibility
 * with the CPU's MMU.
 *
 * On sysio, psycho, and psycho+, IOMMU TSBs using 8K pages can map the
 * following size segments:
 *
 *	VA size		VA base		TSB size	tsbsize
 *	--------	--------	---------	-------
 *	8MB		ff800000	8K		0
 *	16MB		ff000000	16K		1
 *	32MB		fe000000	32K		2
 *	64MB		fc000000	64K		3
 *	128MB		f8000000	128K		4
 *	256MB		f0000000	256K		5
 *	512MB		e0000000	512K		6
 *	1GB		c0000000	1MB		7
 *
 * Unfortunately, sabres on UltraSPARC IIi and IIe processors does not use
 * this scheme to determine the IOVA base address.  Instead, bits 31-29 are
 * used to check against the Target Address Space register in the IIi and
 * the IOMMU is used if they hit.  God knows what goes on in the IIe.
 *
 */


#define IOTSB_VEND		0xffffffffU
#define IOTSB_VSTART(sz)	(u_int)(IOTSB_VEND << ((sz)+10+PGSHIFT)) 
#define IOTSB_VSIZE(sz)		(u_int)(1 << ((sz)+10+PGSHIFT))

#define MAKEIOTTE(pa,w,c,s)	(((pa)&IOTTE_PAMASK)|((w)?IOTTE_W:0)|((c)?IOTTE_C:0)|((s)?IOTTE_STREAM:0)|(IOTTE_V|IOTTE_8K))
#define IOTSBSLOT(va,sz)	((u_int)(((vaddr_t)(va))-(is->is_dvmabase))>>PGSHIFT)

/*
 * interrupt map stuff.  this belongs elsewhere.
 */

#define INTMAP_V	0x080000000LL	/* Interrupt valid (enabled) */
#define INTMAP_TID	0x07c000000LL	/* UPA target ID mask */
#define INTMAP_IGN	0x0000007c0LL	/* Interrupt group no (sbus only). */
#define INTMAP_IGN_SHIFT	6
#define INTMAP_INO	0x00000003fLL	/* Interrupt number */
#define INTMAP_INR	(INTMAP_IGN|INTMAP_INO)
#define INTMAP_SBUSSLOT	0x000000018LL	/* SBus slot # */
#define INTMAP_PCIBUS	0x000000010LL	/* PCI bus number (A or B) */
#define INTMAP_PCISLOT	0x00000000cLL	/* PCI slot # */
#define INTMAP_PCIINT	0x000000003LL	/* PCI interrupt #A,#B,#C,#D */
#define INTMAP_OBIO	0x000000020LL	/* Onboard device */
#define INTMAP_LSHIFT	11		/* Encode level in vector */
#define	INTLEVENCODE(x)	(((x)&0x0f)<<INTMAP_LSHIFT)
#define INTLEV(x)	(((x)>>INTMAP_LSHIFT)&0x0f)
#define INTVEC(x)	((x)&INTMAP_INR)
#define INTSLOT(x)	(((x)>>3)&0x7)
#define	INTPRI(x)	((x)&0x7)
#define INTIGN(x)	((x)&INTMAP_IGN)
#define	INTINO(x)	((x)&INTMAP_INO)
#define INTTID_SHIFT	26
#define INTTID(x)	(((x) & INTMAP_TID) >> INTTID_SHIFT)

#define	INTPCI_MAXOBINO	0x16		/* maximum OBIO INO value for PCI */
#define	INTPCIOBINOX(x)	((x)&0x1f)	/* OBIO ino index (for PCI machines) */
#define	INTPCIINOX(x)	(((x)&0x1c)>>2)	/* PCI ino index */

#define	INTCLR_IDLE	0

#endif /* _SPARC64_DEV_IOMMUREG_H_ */
@


1.16
log
@Perform IOMMU cache flushes on Oberon.
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.14 2007/01/26 16:53:28 tsi Exp $	*/
d92 5
@


1.15
log
@use the right capitalization for `SBus'

ok jmc@@
@
text
@d57 5
d102 1
a102 1
#define IOTTE_PAMASK	0x000007ffffffe000LL	/* Let's assume this is correct (bits 42..13) */
@


1.14
log
@Deal with zero wraparound in DVMA range checks;
Fix default DVMA range for Schizo's with no "virtual-dma" property;
Add TSB size indicator to Schizo & Psycho debugging messages.

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.13 2006/08/27 18:55:57 kettenis Exp $	*/
d148 1
a148 1
#define INTMAP_SBUSSLOT	0x000000018LL	/* SBUS slot # */
@


1.13
log
@Use the correct IGN for the B side of schizo.  Makes interrupts actually work
in the PCI slot of the v210.

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.12 2006/05/28 06:28:08 jason Exp $	*/
d131 3
a133 3
#define IOTSB_VEND		(u_int)(0xffffffffffffffffLL<<PGSHIFT)
#define IOTSB_VSTART(sz)	(u_int)(IOTSB_VEND << ((sz)+10)) 
#define	IOTSB_VSIZE(sz)		(u_int)(1 << ((sz)+10+PGSHIFT))
@


1.12
log
@don't hardcode the iova... it uses the same scheme as the sbus machines
(cd0 at scsibus0 at siop0 now attaches on the blade2k)
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.11 2005/04/26 14:57:11 miod Exp $	*/
d159 1
@


1.11
log
@the the
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.10 2004/09/27 19:20:57 jason Exp $	*/
d96 1
@


1.10
log
@shift value for the ign
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.9 2003/06/02 23:27:55 millert Exp $	*/
d125 1
a125 1
 * the the IOMMU is used if they hit.  God knows what goes on in the IIe.
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.8 2003/05/22 21:56:45 jason Exp $	*/
d144 1
@


1.8
log
@Fix comment: IOTTE_PAMASK is 42..13 not 42..12
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.7 2003/05/16 17:18:14 jason Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@move the interrupt idle stuff to the generic intr_establish function
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.6 2003/03/06 08:26:08 henric Exp $	*/
d100 1
a100 1
#define IOTTE_PAMASK	0x000007ffffffe000LL	/* Let's assume this is correct (bits 42..12) */
@


1.6
log
@The existing IOMMU code had a rounding problem that was most noticeable
on faster systems under heavy network load.  This replaces some of the
unreadable iommu functions with something a little less dense and a lot
less crash prone.

The bus_dma function pointer/cookie handling was broken.  Change them
to work like the stacked bus_space drivers (where "work" is the key
word).

Tested my many (thanks).

ok jason@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.5 2003/02/17 01:29:20 henric Exp $	*/
d168 2
@


1.5
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.4 2002/07/24 19:03:19 jason Exp $	*/
d100 1
a100 1
#define IOTTE_PAMASK	0x000001ffffffe000LL	/* Let's assume this is correct */
d103 2
@


1.4
log
@more use of volatile on registers, cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.3 2002/02/22 16:11:59 jason Exp $	*/
d70 3
d160 2
@


1.3
log
@From NetBSD:
- Fix pr sparc64/15633: datafault at tlp_start causes panic
- Also clean up some additional 32-bit kernel printf issues.
- Handle the case where a DMA operation wraps from the end of a page to the
beginning of the same page properly by double-mapping that page.
- Move a brace so this will compile w/o DEBUG.
- Overhaul iommu_dvmamap_load_raw().
From Me:
- Verify the streaming cache exists before waiting on it to clear during flush.
- Force sync of flush status (hardware sets it to 1 when its done)
- Force sync flush of registers (bus_space_barrier)
- Flush ALL segments on BUS_DMA_POSTREAD operations (not just the first!)
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.2 2001/08/18 21:30:00 jason Exp $	*/
d58 3
a60 3
	u_int64_t	iommu_cr;	/* IOMMU control register */
	u_int64_t	iommu_tsb;	/* IOMMU TSB base register */
	u_int64_t	iommu_flush;	/* IOMMU flush register */
d65 3
a67 3
	u_int64_t	strbuf_ctl;	/* streaming buffer control reg */
	u_int64_t	strbuf_pgflush;	/* streaming buffer page flush */
	u_int64_t	strbuf_flushsync;/* streaming buffer flush sync */
d71 2
a72 2
#define STRBUF_EN	0x000000000000000001LL
#define STRBUF_D	0x000000000000000002LL
@


1.2
log
@RCSids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d129 1
a129 1
#define IOTSB_VEND		(0xffffffffffffffffLL<<PGSHIFT)
d131 1
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.2 2001/08/18 21:30:00 jason Exp $	*/
d129 1
a129 1
#define IOTSB_VEND		(u_int)(0xffffffffffffffffLL<<PGSHIFT)
a130 1
#define	IOTSB_VSIZE(sz)		(u_int)(1 << ((sz)+10+PGSHIFT))
@


1.2.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.2.6.1 2002/06/11 03:38:43 art Exp $	*/
d58 3
a60 3
	volatile u_int64_t	iommu_cr;	/* IOMMU control register */
	volatile u_int64_t	iommu_tsb;	/* IOMMU TSB base register */
	volatile u_int64_t	iommu_flush;	/* IOMMU flush register */
d65 3
a67 3
	volatile u_int64_t	strbuf_ctl;	/* streaming buffer control reg */
	volatile u_int64_t	strbuf_pgflush;	/* streaming buffer page flush */
	volatile u_int64_t	strbuf_flushsync;/* streaming buffer flush sync */
d71 2
a72 2
#define STRBUF_EN		0x000000000000000001LL
#define STRBUF_D		0x000000000000000002LL
@


1.2.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a69 3
#define IOMMUREG(x)     (offsetof(struct iommureg, x))
#define STRBUFREG(x)    (offsetof(struct iommu_strbuf, x))

d97 1
a97 1
#define IOTTE_PAMASK	0x000007ffffffe000LL	/* Let's assume this is correct (bits 42..12) */
a99 2
#define IOTTE_SOFTWARE	0x0000000000001f80LL	/* For software use (bits 12..7) */

a156 2
#define INTTID_SHIFT	26
#define INTTID(x)	(((x) & INTMAP_TID) >> INTTID_SHIFT)
a160 2

#define	INTCLR_IDLE	0
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Merge in trunk
@
text
@d129 1
a129 1
#define IOTSB_VEND		(u_int)(0xffffffffffffffffLL<<PGSHIFT)
a130 1
#define	IOTSB_VSIZE(sz)		(u_int)(1 << ((sz)+10+PGSHIFT))
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d58 3
a60 3
	volatile u_int64_t	iommu_cr;	/* IOMMU control register */
	volatile u_int64_t	iommu_tsb;	/* IOMMU TSB base register */
	volatile u_int64_t	iommu_flush;	/* IOMMU flush register */
d65 3
a67 3
	volatile u_int64_t	strbuf_ctl;	/* streaming buffer control reg */
	volatile u_int64_t	strbuf_pgflush;	/* streaming buffer page flush */
	volatile u_int64_t	strbuf_flushsync;/* streaming buffer flush sync */
a69 3
#define IOMMUREG(x)     (offsetof(struct iommureg, x))
#define STRBUFREG(x)    (offsetof(struct iommu_strbuf, x))

d71 2
a72 2
#define STRBUF_EN		0x000000000000000001LL
#define STRBUF_D		0x000000000000000002LL
d97 1
a97 1
#define IOTTE_PAMASK	0x000007ffffffe000LL	/* Let's assume this is correct (bits 42..12) */
a99 2
#define IOTTE_SOFTWARE	0x0000000000001f80LL	/* For software use (bits 12..7) */

a156 2
#define INTTID_SHIFT	26
#define INTTID(x)	(((x) & INTMAP_TID) >> INTTID_SHIFT)
@


1.2.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iommureg.h,v 1.2.4.3 2003/03/27 23:42:35 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
d100 1
a100 1
#define IOTTE_PAMASK	0x000007ffffffe000LL	/* Let's assume this is correct (bits 42..13) */
a167 2

#define	INTCLR_IDLE	0
@


1.1
log
@enough to get sbus.o from NetBSD
@
text
@d1 1
@

