head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.6
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2016.12.20.13.40.50;	author jsg;	state Exp;
branches;
next	1.20;
commitid	i01X1vVvVdPgOOHT;

1.20
date	2016.05.19.09.18.42;	author kettenis;	state Exp;
branches;
next	1.19;
commitid	LMc49ijACBU7Ay2Z;

1.19
date	2015.09.27.11.29.20;	author kettenis;	state Exp;
branches;
next	1.18;
commitid	Um3BvP4zKyWaKQpf;

1.18
date	2014.12.09.06.58.29;	author doug;	state Exp;
branches;
next	1.17;
commitid	yWAxzpQP2PPpYlfT;

1.17
date	2014.11.24.22.41.12;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	qJozpsq4jr9tFWCl;

1.16
date	2014.11.24.22.09.32;	author kettenis;	state Exp;
branches;
next	1.15;
commitid	xS7484W6QI87rf1A;

1.15
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.14;
commitid	uKVPYMN2MLxdZxzH;

1.14
date	2014.05.10.11.49.31;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.24.05.42.23;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.29.23.25.48;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.25.20.56.02;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.06.05.35.53;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.06.05.08.50;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.26.21.46.23;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2011.06.26.20.32.36;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.15.14;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.04.17.06.32;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.29.22.52.11;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.02.20.01.45;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.08.22.05.19;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.09.18.58.11;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.21
log
@no need to test if an array is non-NULL
ok kettenis@@
@
text
@/*	$OpenBSD: vpci.c,v 1.20 2016/05/19 09:18:42 kettenis Exp $	*/
/*
 * Copyright (c) 2008 Mark Kettenis <kettenis@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#define _SPARC_BUS_DMA_PRIVATE
#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/hypervisor.h>
#include <machine/openfirm.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>

#include <sparc64/dev/viommuvar.h>
#include <sparc64/dev/msivar.h>

extern struct sparc_pci_chipset _sparc_pci_chipset;

struct vpci_msi_msg {
	uint32_t	mm_version;
	uint8_t		mm_reserved[3];
	uint8_t		mm_type;
	uint64_t	mm_sysino;
	uint64_t	mm_reserved1;
	uint64_t	mm_stick;
	uint16_t	mm_reserved2[3];
	uint16_t	mm_reqid;
	uint64_t	mm_addr;
	uint64_t	mm_data;
	uint64_t	mm_reserved3;
};

struct vpci_range {
	u_int32_t	cspace;
	u_int32_t	child_hi;
	u_int32_t	child_lo;
	u_int32_t	phys_hi;
	u_int32_t	phys_lo;
	u_int32_t	size_hi;
	u_int32_t	size_lo;
};

struct vpci_pbm {
	struct vpci_softc *vp_sc;
	uint64_t vp_devhandle;

	struct vpci_range *vp_range;
	pci_chipset_tag_t vp_pc;
	int vp_nrange;

	bus_space_tag_t		vp_memt;
	bus_space_tag_t		vp_iot;
	bus_dma_tag_t		vp_dmat;
	struct iommu_state	vp_is;

	struct msi_eq *vp_meq;
	bus_addr_t vp_msiaddr;
	int vp_msinum;
	struct intrhand **vp_msi;

	int vp_flags;
};

struct vpci_softc {
	struct device sc_dv;
	bus_dma_tag_t sc_dmat;
	bus_space_tag_t sc_bust;
	int sc_node;
};

int vpci_match(struct device *, void *, void *);
void vpci_attach(struct device *, struct device *, void *);
void vpci_init_iommu(struct vpci_softc *, struct vpci_pbm *);
void vpci_init_msi(struct vpci_softc *, struct vpci_pbm *);
int vpci_print(void *, const char *);

pci_chipset_tag_t vpci_alloc_chipset(struct vpci_pbm *, int,
    pci_chipset_tag_t);
bus_space_tag_t vpci_alloc_mem_tag(struct vpci_pbm *);
bus_space_tag_t vpci_alloc_io_tag(struct vpci_pbm *);
bus_space_tag_t vpci_alloc_bus_tag(struct vpci_pbm *, const char *,
    int, int, int);
bus_dma_tag_t vpci_alloc_dma_tag(struct vpci_pbm *);

int vpci_conf_size(pci_chipset_tag_t, pcitag_t);
pcireg_t vpci_conf_read(pci_chipset_tag_t, pcitag_t, int);
void vpci_conf_write(pci_chipset_tag_t, pcitag_t, int, pcireg_t);

int vpci_intr_map(struct pci_attach_args *, pci_intr_handle_t *);
int vpci_bus_map(bus_space_tag_t, bus_space_tag_t, bus_addr_t,
    bus_size_t, int, bus_space_handle_t *);
paddr_t vpci_bus_mmap(bus_space_tag_t, bus_space_tag_t, bus_addr_t, off_t,
    int, int);
void *vpci_intr_establish(bus_space_tag_t, bus_space_tag_t, int, int, int,
    int (*)(void *), void *, const char *);
void vpci_intr_ack(struct intrhand *);
void vpci_msi_ack(struct intrhand *);

int vpci_msi_eq_intr(void *);

int vpci_dmamap_create(bus_dma_tag_t, bus_dma_tag_t, bus_size_t, int,
    bus_size_t, bus_size_t, int, bus_dmamap_t *);
void vpci_dmamap_destroy(bus_dma_tag_t, bus_dma_tag_t, bus_dmamap_t);
int vpci_dmamap_load(bus_dma_tag_t, bus_dma_tag_t, bus_dmamap_t,
    void *, bus_size_t, struct proc *, int);
void vpci_dmamap_unload(bus_dma_tag_t, bus_dma_tag_t, bus_dmamap_t);
int vpci_dmamem_alloc(bus_dma_tag_t, bus_dma_tag_t, bus_size_t,
    bus_size_t, bus_size_t, bus_dma_segment_t *, int, int *, int);
int vpci_dmamem_map(bus_dma_tag_t, bus_dma_tag_t, bus_dma_segment_t *,
    int, size_t, caddr_t *, int);
void vpci_dmamem_unmap(bus_dma_tag_t, bus_dma_tag_t, caddr_t, size_t);

int
vpci_match(struct device *parent, void *match, void *aux)
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, "pci") != 0)
		return (0);

	return OF_is_compatible(ma->ma_node, "SUNW,sun4v-pci");
}

void
vpci_attach(struct device *parent, struct device *self, void *aux)
{
	struct vpci_softc *sc = (struct vpci_softc *)self;
	struct mainbus_attach_args *ma = aux;
	struct pcibus_attach_args pba;
	struct vpci_pbm *pbm;
	int *busranges = NULL, nranges;

	sc->sc_dmat = ma->ma_dmatag;
	sc->sc_bust = ma->ma_bustag;
	sc->sc_node = ma->ma_node;

	pbm = malloc(sizeof(*pbm), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (pbm == NULL)
		panic("vpci: can't alloc vpci pbm");

	pbm->vp_sc = sc;
	pbm->vp_devhandle = (ma->ma_reg[0].ur_paddr >> 32) & 0x0fffffff;

	if (getprop(ma->ma_node, "ranges", sizeof(struct vpci_range),
	    &pbm->vp_nrange, (void **)&pbm->vp_range))
		panic("vpci: can't get ranges");

	if (getprop(ma->ma_node, "bus-range", sizeof(int), &nranges,
	    (void **)&busranges))
		panic("vpci: can't get bus-range");

	printf(": bus %d to %d, ", busranges[0], busranges[1]);

	pbm->vp_memt = vpci_alloc_mem_tag(pbm);
	pbm->vp_iot = vpci_alloc_io_tag(pbm);
	pbm->vp_dmat = vpci_alloc_dma_tag(pbm);

	pbm->vp_pc = vpci_alloc_chipset(pbm, ma->ma_node, &_sparc_pci_chipset);
	pbm->vp_pc->bustag = pbm->vp_memt;

	vpci_init_iommu(sc, pbm);
	vpci_init_msi(sc, pbm);

	bzero(&pba, sizeof(pba));
	pba.pba_busname = "pci";
	pba.pba_domain = pci_ndomains++;
	pba.pba_bus = busranges[0];
	pba.pba_pc = pbm->vp_pc;
	pba.pba_flags = pbm->vp_flags;
	pba.pba_dmat = pbm->vp_dmat;
	pba.pba_memt = pbm->vp_memt;
	pba.pba_iot = pbm->vp_iot;
	pba.pba_pc->conf_size = vpci_conf_size;
	pba.pba_pc->conf_read = vpci_conf_read;
	pba.pba_pc->conf_write = vpci_conf_write;
	pba.pba_pc->intr_map = vpci_intr_map;

	free(busranges, M_DEVBUF, 0);

	config_found(&sc->sc_dv, &pba, vpci_print);
}

void
vpci_init_iommu(struct vpci_softc *sc, struct vpci_pbm *pbm)
{
	struct iommu_state *is = &pbm->vp_is;
	int tsbsize = 8;
	u_int32_t iobase = 0x80000000;
	char *name;

	name = (char *)malloc(32, M_DEVBUF, M_NOWAIT);
	if (name == NULL)
		panic("couldn't malloc iommu name");
	snprintf(name, 32, "%s dvma", sc->sc_dv.dv_xname);

	viommu_init(name, is, tsbsize, iobase);
	is->is_devhandle = pbm->vp_devhandle;
}

void
vpci_init_msi(struct vpci_softc *sc, struct vpci_pbm *pbm)
{
	u_int32_t msi_addr_range[3];
	u_int32_t msi_eq_devino[3] = { 0, 36, 24 };
	uint64_t sysino;
	int msis, msi_eq_size;
	int err;

	if (OF_getprop(sc->sc_node, "msi-address-ranges",
	    msi_addr_range, sizeof(msi_addr_range)) <= 0)
		return;
	pbm->vp_msiaddr = msi_addr_range[1];
	pbm->vp_msiaddr |= ((bus_addr_t)msi_addr_range[0]) << 32;

	msis = getpropint(sc->sc_node, "#msi", 256);
	pbm->vp_msi = mallocarray(msis, sizeof(*pbm->vp_msi), M_DEVBUF,
	    M_NOWAIT | M_ZERO);
	if (pbm->vp_msi == NULL)
		return;

	msi_eq_size = getpropint(sc->sc_node, "msi-eq-size", 256);
	pbm->vp_meq = msi_eq_alloc(sc->sc_dmat, msi_eq_size);
	if (pbm->vp_meq == NULL)
		goto free_table;

	err = hv_pci_msiq_conf(pbm->vp_devhandle, 0,
	    pbm->vp_meq->meq_map->dm_segs[0].ds_addr,
	    pbm->vp_meq->meq_nentries);
	if (err != H_EOK)
		goto free_queue;

	OF_getprop(sc->sc_node, "msi-eq-to-devino",
	    msi_eq_devino, sizeof(msi_eq_devino));
	err = hv_intr_devino_to_sysino(pbm->vp_devhandle,
	    msi_eq_devino[2], &sysino);
	if (err != H_EOK)
		goto disable_queue;

	if (vpci_intr_establish(sc->sc_bust, sc->sc_bust, sysino,
	    IPL_HIGH, 0, vpci_msi_eq_intr, pbm, sc->sc_dv.dv_xname) == NULL)
		goto disable_queue;

	err = hv_pci_msiq_setvalid(pbm->vp_devhandle, 0, PCI_MSIQ_VALID);
	if (err != H_EOK) {
		printf("%s: pci_msiq_setvalid: err %d\n", __func__, err);
		goto disable_queue;
	}

	err = hv_pci_msiq_setstate(pbm->vp_devhandle, 0, PCI_MSIQSTATE_IDLE);
	if (err != H_EOK) {
		printf("%s: pci_msiq_setstate: err %d\n", __func__, err);
		goto disable_queue;
	}

	pbm->vp_flags |= PCI_FLAGS_MSI_ENABLED;
	return;

disable_queue:
	hv_pci_msiq_conf(pbm->vp_devhandle, 0, 0, 0);
free_queue:
	msi_eq_free(sc->sc_dmat, pbm->vp_meq);
free_table:
	free(pbm->vp_msi, M_DEVBUF, 0);
}

int
vpci_print(void *aux, const char *p)
{
	if (p == NULL)
		return (UNCONF);
	return (QUIET);
}

int
vpci_conf_size(pci_chipset_tag_t pc, pcitag_t tag)
{
	return PCIE_CONFIG_SPACE_SIZE;
}

pcireg_t
vpci_conf_read(pci_chipset_tag_t pc, pcitag_t tag, int reg)
{
	struct vpci_pbm *pbm = pc->cookie;
	uint64_t error_flag, data;

	hv_pci_config_get(pbm->vp_devhandle, PCITAG_OFFSET(tag), reg, 4,
	    &error_flag, &data);

	return (error_flag ? (pcireg_t)~0 : data);
}

void
vpci_conf_write(pci_chipset_tag_t pc, pcitag_t tag, int reg, pcireg_t data)
{
	struct vpci_pbm *pbm = pc->cookie;
	uint64_t error_flag;

	hv_pci_config_put(pbm->vp_devhandle, PCITAG_OFFSET(tag), reg, 4,
            data, &error_flag);
}

/*
 * Bus-specific interrupt mapping
 */
int
vpci_intr_map(struct pci_attach_args *pa, pci_intr_handle_t *ihp)
{
	struct vpci_pbm *pbm = pa->pa_pc->cookie;
	uint64_t devhandle = pbm->vp_devhandle;
	uint64_t devino = INTINO(*ihp);
	uint64_t sysino;
	int err;

	if (*ihp != (pci_intr_handle_t)-1) {
		err = hv_intr_devino_to_sysino(devhandle, devino, &sysino);
		if (err != H_EOK)
			return (-1);

		KASSERT(sysino == INTVEC(sysino));
		*ihp = sysino;
		return (0);
	}

	return (-1);
}

bus_space_tag_t
vpci_alloc_mem_tag(struct vpci_pbm *pp)
{
	return (vpci_alloc_bus_tag(pp, "mem",
	    0x02,       /* 32-bit mem space (where's the #define???) */
	    ASI_PRIMARY, ASI_PRIMARY_LITTLE));
}

bus_space_tag_t
vpci_alloc_io_tag(struct vpci_pbm *pp)
{
	return (vpci_alloc_bus_tag(pp, "io",
	    0x01,       /* IO space (where's the #define???) */
	    ASI_PRIMARY, ASI_PRIMARY_LITTLE));
}

bus_space_tag_t
vpci_alloc_bus_tag(struct vpci_pbm *pbm, const char *name, int ss,
    int asi, int sasi)
{
	struct vpci_softc *sc = pbm->vp_sc;
	struct sparc_bus_space_tag *bt;

	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (bt == NULL)
		panic("vpci: could not allocate bus tag");

	snprintf(bt->name, sizeof(bt->name), "%s-pbm_%s(%d/%2.2x)",
	    sc->sc_dv.dv_xname, name, ss, asi);

	bt->cookie = pbm;
	bt->parent = sc->sc_bust;
	bt->default_type = ss;
	bt->asi = asi;
	bt->sasi = sasi;
	bt->sparc_bus_map = vpci_bus_map;
	bt->sparc_bus_mmap = vpci_bus_mmap;
	bt->sparc_intr_establish = vpci_intr_establish;
	return (bt);
}

bus_dma_tag_t
vpci_alloc_dma_tag(struct vpci_pbm *pbm)
{
	struct vpci_softc *sc = pbm->vp_sc;
	bus_dma_tag_t dt, pdt = sc->sc_dmat;

	dt = malloc(sizeof(*dt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (dt == NULL)
		panic("vpci: could not alloc dma tag");

	dt->_cookie = pbm;
	dt->_parent = pdt;
	dt->_dmamap_create = vpci_dmamap_create;
	dt->_dmamap_destroy = viommu_dvmamap_destroy;
	dt->_dmamap_load = viommu_dvmamap_load;
	dt->_dmamap_load_raw = viommu_dvmamap_load_raw;
	dt->_dmamap_unload = viommu_dvmamap_unload;
	dt->_dmamap_sync = viommu_dvmamap_sync;
	dt->_dmamem_alloc = viommu_dvmamem_alloc;
	dt->_dmamem_free = viommu_dvmamem_free;
	return (dt);
}

pci_chipset_tag_t
vpci_alloc_chipset(struct vpci_pbm *pbm, int node, pci_chipset_tag_t pc)
{
	pci_chipset_tag_t npc;

	npc = malloc(sizeof *npc, M_DEVBUF, M_NOWAIT);
	if (npc == NULL)
		panic("vpci: could not allocate pci_chipset_tag_t");
	memcpy(npc, pc, sizeof *pc);
	npc->cookie = pbm;
	npc->rootnode = node;
	return (npc);
}

#define BUS_DMA_FIND_PARENT(t, fn)                                      \
        if (t->_parent == NULL)                                         \
                panic("null bus_dma parent (" #fn ")");                 \
        for (t = t->_parent; t->fn == NULL; t = t->_parent)             \
                if (t->_parent == NULL)                                 \
                        panic("no bus_dma " #fn " located");

int
vpci_dmamap_create(bus_dma_tag_t t, bus_dma_tag_t t0, bus_size_t size,
    int nsegments, bus_size_t maxsegsz, bus_size_t boundary, int flags,
    bus_dmamap_t *dmamap)
{
	struct vpci_pbm *vp = t->_cookie;

	return (viommu_dvmamap_create(t, t0, &vp->vp_is, size, nsegments,
	    maxsegsz, boundary, flags, dmamap));
}

int
vpci_bus_map(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t offset,
    bus_size_t size, int flags, bus_space_handle_t *hp)
{
	struct vpci_pbm *pbm = t->cookie;
	int i, ss = t->default_type;

	if (t->parent == 0 || t->parent->sparc_bus_map == 0)
		panic("vpci_bus_map: invalid parent");

	if (flags & BUS_SPACE_MAP_PROMADDRESS) {
		return ((*t->parent->sparc_bus_map)
		    (t, t0, offset, size, flags, hp));
	}

	for (i = 0; i < pbm->vp_nrange; i++) {
		bus_addr_t paddr;

		if (((pbm->vp_range[i].cspace >> 24) & 0x03) != ss)
			continue;

		paddr = pbm->vp_range[i].phys_lo + offset;
		paddr |= ((bus_addr_t)pbm->vp_range[i].phys_hi) << 32;
		return ((*t->parent->sparc_bus_map)
		    (t, t0, paddr, size, flags, hp));
	}

	return (EINVAL);
}

paddr_t
vpci_bus_mmap(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t paddr,
    off_t off, int prot, int flags)
{
	bus_addr_t offset = paddr;
	struct vpci_pbm *pbm = t->cookie;
	int i, ss = t->default_type;

	if (t->parent == 0 || t->parent->sparc_bus_mmap == 0)
		panic("vpci_bus_mmap: invalid parent");

	for (i = 0; i < pbm->vp_nrange; i++) {
		bus_addr_t paddr;

		if (((pbm->vp_range[i].cspace >> 24) & 0x03) != ss)
			continue;

		paddr = pbm->vp_range[i].phys_lo + offset;
		paddr |= ((bus_addr_t)pbm->vp_range[i].phys_hi) << 32;
		return ((*t->parent->sparc_bus_mmap)
		    (t, t0, paddr, off, prot, flags));
	}

	return (-1);
}

void *
vpci_intr_establish(bus_space_tag_t t, bus_space_tag_t t0, int ihandle,
    int level, int flags, int (*handler)(void *), void *arg, const char *what)
{
	struct vpci_pbm *pbm = t->cookie;
	uint64_t sysino = INTVEC(ihandle);
	struct intrhand *ih;
	int err;

	ih = bus_intr_allocate(t0, handler, arg, ihandle, level,
	    NULL, NULL, what);
	if (ih == NULL)
		return (NULL);

	if (flags & BUS_INTR_ESTABLISH_MPSAFE)
		ih->ih_mpsafe = 1;

	if (ihandle & PCI_INTR_MSI) {
		pci_chipset_tag_t pc = pbm->vp_pc;
		pcitag_t tag = ihandle & ~PCI_INTR_MSI;
		int msinum = pbm->vp_msinum++;

		evcount_attach(&ih->ih_count, ih->ih_name, NULL);

		ih->ih_ack = vpci_msi_ack;

		pbm->vp_msi[msinum] = ih;
		ih->ih_number = msinum;

		pci_msi_enable(pc, tag, pbm->vp_msiaddr, msinum);

		err = hv_pci_msi_setmsiq(pbm->vp_devhandle, msinum, 0, 0);
		if (err != H_EOK) {
			printf("%s: pci_msi_setmsiq: err %d\n", __func__, err);
			return (NULL);
		}

		err = hv_pci_msi_setvalid(pbm->vp_devhandle, msinum, PCI_MSI_VALID);
		if (err != H_EOK) {
			printf("%s: pci_msi_setvalid: err %d\n", __func__, err);
			return (NULL);
		}

		err = hv_pci_msi_setstate(pbm->vp_devhandle, msinum, PCI_MSISTATE_IDLE);
		if (err != H_EOK) {
			printf("%s: pci_msi_setstate: err %d\n", __func__, err);
			return (NULL);
		}

		return (ih);
	}

	intr_establish(ih->ih_pil, ih);
	ih->ih_ack = vpci_intr_ack;

	err = hv_intr_settarget(sysino, ih->ih_cpu->ci_upaid);
	if (err != H_EOK)
		return (NULL);

	/* Clear pending interrupts. */
	err = hv_intr_setstate(sysino, INTR_IDLE);
	if (err != H_EOK)
		return (NULL);

	err = hv_intr_setenabled(sysino, INTR_ENABLED);
	if (err != H_EOK)
		return (NULL);

	return (ih);
}

void
vpci_intr_ack(struct intrhand *ih)
{
	hv_intr_setstate(ih->ih_number, INTR_IDLE);
}

void
vpci_msi_ack(struct intrhand *ih)
{
}

int
vpci_msi_eq_intr(void *arg)
{
	struct vpci_pbm *pbm = arg;
	struct msi_eq *meq = pbm->vp_meq;
	struct vpci_msi_msg *msg;
	uint64_t head, tail;
	struct intrhand *ih;
	int msinum;
	int err;

	err = hv_pci_msiq_gethead(pbm->vp_devhandle, 0, &head);
	if (err != H_EOK)
		printf("%s: pci_msiq_gethead: %d\n", __func__, err);

	err = hv_pci_msiq_gettail(pbm->vp_devhandle, 0, &tail);
	if (err != H_EOK)
		printf("%s: pci_msiq_gettail: %d\n", __func__, err);

	if (head == tail)
		return (0);

	while (head != tail) {
		msg = (struct vpci_msi_msg *)(meq->meq_va + head);

		if (msg->mm_type == 0)
			break;
		msg->mm_type = 0;

		msinum = msg->mm_data;
		ih = pbm->vp_msi[msinum];
		err = hv_pci_msi_setstate(pbm->vp_devhandle,
		    msinum, PCI_MSISTATE_IDLE);
		if (err != H_EOK)
			printf("%s: pci_msi_setstate: %d\n", __func__, err);

		send_softint(-1, ih->ih_pil, ih);

		head += sizeof(struct vpci_msi_msg);
		head &= ((meq->meq_nentries * sizeof(struct vpci_msi_msg)) - 1);
	}

	err = hv_pci_msiq_sethead(pbm->vp_devhandle, 0, head);
	if (err != H_EOK)
		printf("%s: pci_msiq_sethead: %d\n", __func__, err);

	return (1);
}

const struct cfattach vpci_ca = {
	sizeof(struct vpci_softc), vpci_match, vpci_attach
};

struct cfdriver vpci_cd = {
	NULL, "vpci", DV_DULL
};
@


1.20
log
@Use OF_is_compatible(9).  Simplifies the code and should make pci within
a guest domain on a Fujitsu M10 work.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.19 2015/09/27 11:29:20 kettenis Exp $	*/
d522 1
a522 4
		if (ih->ih_name)
			evcount_attach(&ih->ih_count, ih->ih_name, NULL);
		else
			evcount_attach(&ih->ih_count, "unknown", NULL);
@


1.19
log
@Store the target CPU in "struct intrhand" and use it in intr_barrier().
Also use it wherever we configure the hardware to direct interrupts to the
right CPU.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.18 2014/12/09 06:58:29 doug Exp $	*/
a137 1
	char compat[32];
d142 1
a142 7
	if (OF_getprop(ma->ma_node, "compatible", compat, sizeof(compat)) == -1)
		return (0);

	if (strcmp(compat, "SUNW,sun4v-pci") == 0)
		return (1);

	return (0);
@


1.18
log
@Replace some malloc(n*size,...) calls with mallocarray().

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.17 2014/11/24 22:41:12 kettenis Exp $	*/
d565 1
a565 1
	err = hv_intr_settarget(sysino, cpus->ci_upaid);
@


1.17
log
@Actually, the previous change didn't quite work on the SPARC T5-2.  But if
we change the order of the xxx_setvalidand xxx_setstate hypervisor calls
things actually work.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.16 2014/11/24 22:09:32 kettenis Exp $	*/
d244 2
a245 2
	pbm->vp_msi = malloc(msis * sizeof(*pbm->vp_msi),
	    M_DEVBUF, M_NOWAIT | M_ZERO);
@


1.16
log
@Add missing pci_msiq_setstate and pci_msi_setstate calls.  Makes MSI work
on the SPARC T5-2.  Make error messages a bit more consistent while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.15 2014/07/12 18:44:43 tedu Exp $	*/
d271 1
a271 1
	err = hv_pci_msiq_setstate(pbm->vp_devhandle, 0, PCI_MSIQSTATE_IDLE);
d273 1
a273 1
		printf("%s: pci_msiq_setstate: err %d\n", __func__, err);
d277 1
a277 1
	err = hv_pci_msiq_setvalid(pbm->vp_devhandle, 0, PCI_MSIQ_VALID);
d279 1
a279 1
		printf("%s: pci_msiq_setvalid: err %d\n", __func__, err);
d547 1
a547 1
		err = hv_pci_msi_setstate(pbm->vp_devhandle, msinum, PCI_MSISTATE_IDLE);
d549 1
a549 1
			printf("%s: pci_msi_setstate: err %d\n", __func__, err);
d553 1
a553 1
		err = hv_pci_msi_setvalid(pbm->vp_devhandle, msinum, PCI_MSI_VALID);
d555 1
a555 1
			printf("%s: pci_msi_setvalid: err %d\n", __func__, err);
@


1.15
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.14 2014/05/10 11:49:31 kettenis Exp $	*/
d235 1
a235 1
	int64_t err;
d271 6
d278 4
a281 2
	if (err != H_EOK)
		panic("vpci: can't enable msi eq");
d543 7
a549 1
			printf("pci_msi_setmsiq: err %d\n", err);
d555 1
a555 1
			printf("pci_msi_setvalid: err %d\n", err);
d605 1
a605 1
		printf("%s: hv_pci_msiq_gethead: %d\n", __func__, err);
d609 1
a609 1
		printf("%s: hv_pci_msiq_gettail: %d\n", __func__, err);
d626 1
a626 1
			printf("%s: hv_pci_msiq_setstate: %d\n", __func__, err);
@


1.14
log
@Some straightforward format string fixes.  Also, print both the tx and rx
interrupt vector numbers instead of printing rx; pointed out by florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.13 2014/01/24 05:42:23 kettenis Exp $	*/
d206 1
a206 1
	free(busranges, M_DEVBUF);
d283 1
a283 1
	free(pbm->vp_msi, M_DEVBUF);
@


1.13
log
@Add support for BUS_INTR_ESTABLISH_MPSAFE.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.12 2012/10/29 23:25:48 kettenis Exp $	*/
d535 1
a535 1
			printf("pci_msi_setmsiq: err %ld\n", err);
d541 1
a541 1
			printf("pci_msi_setvalid: err %ld\n", err);
@


1.12
log
@Set the type of a processed MSI data record to 0, and check that the type
is non-zero before handling them, like we do in pyro(4).  Seems to fix issues
with MSIs on sun4v, so enable them again.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.11 2011/07/25 20:56:02 kettenis Exp $	*/
d512 3
@


1.11
log
@Disable MSI for now; something is still not quite right on UltrSPARC T2
systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.10 2011/07/06 05:35:53 kettenis Exp $	*/
a274 1
#ifdef notyet
a275 1
#endif
d583 1
d599 7
a605 1
		ih = pbm->vp_msi[msg->mm_data];
d607 1
a607 1
		    msg->mm_data, PCI_MSISTATE_IDLE);
@


1.10
log
@Split some generic MSI code out into its own file.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.9 2011/07/06 05:08:50 kettenis Exp $	*/
d275 1
d277 1
@


1.9
log
@Move pci_msi_enable() out of the vpci(4) driver into the MD pci(4) code.
Soon to be used by pyro(4) as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.8 2011/06/26 21:46:23 kettenis Exp $	*/
d36 1
d40 1
a40 8
struct msi_eq {
	bus_dmamap_t	meq_map;
	bus_dma_segment_t meq_seg;
	caddr_t		meq_va;
	int		meq_nentries;
};

struct msi_msg {
a121 3
struct msi_eq *msi_eq_alloc(bus_dma_tag_t, int);
void msi_eq_free(bus_dma_tag_t t, struct msi_eq *);

d580 1
a580 1
	struct msi_msg *msg;
d597 1
a597 1
		msg = (struct msi_msg *)(meq->meq_va + head);
d606 2
a607 2
		head += sizeof(struct msi_msg);
		head &= ((meq->meq_nentries * sizeof(struct msi_msg)) - 1);
a614 58
}

struct msi_eq *
msi_eq_alloc(bus_dma_tag_t t, int msi_eq_size)
{
	struct msi_eq *meq;
	bus_size_t size;
	caddr_t va;
	int nsegs;

	meq = malloc(sizeof(struct msi_eq), M_DEVBUF, M_NOWAIT);
	if (meq == NULL)
		return NULL;

	size = roundup(msi_eq_size * sizeof(struct msi_msg), PAGE_SIZE);

	if (bus_dmamap_create(t, size, 1, size, 0,
	    BUS_DMA_NOWAIT | BUS_DMA_ALLOCNOW, &meq->meq_map) != 0)
		return (NULL);

	if (bus_dmamem_alloc(t, size, PAGE_SIZE, 0, &meq->meq_seg, 1,
	    &nsegs, BUS_DMA_NOWAIT) != 0)
		goto destroy;

	if (bus_dmamem_map(t, &meq->meq_seg, 1, size, &va,
	    BUS_DMA_NOWAIT) != 0)
		goto free;

	if (bus_dmamap_load(t, meq->meq_map, va, size, NULL,
	    BUS_DMA_NOWAIT) != 0)
		goto unmap;

	meq->meq_va = va;
	meq->meq_nentries = msi_eq_size;
	return (meq);

unmap:
	bus_dmamem_unmap(t, va, size);
free:
	bus_dmamem_free(t, &meq->meq_seg, 1);
destroy:
	bus_dmamap_destroy(t, meq->meq_map);

	return (NULL);
}

void
msi_eq_free(bus_dma_tag_t t, struct msi_eq *meq)
{
	bus_size_t size;

	size = roundup(meq->meq_nentries * sizeof(struct msi_msg), PAGE_SIZE);

	bus_dmamap_unload(t, meq->meq_map);
	bus_dmamem_unmap(t, meq->meq_va, size);
	bus_dmamem_free(t, &meq->meq_seg, 1);
	bus_dmamap_destroy(t, meq->meq_map);
	free(meq, M_DEVBUF);
@


1.8
log
@First stab at MSI support for vpci(4).  Still a few rough edges, but seems
to work fine on a t1k and a t5120, so let's enable this right from the start.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.7 2011/06/26 20:32:36 kettenis Exp $	*/
a128 1
void pci_msi_enable(pci_chipset_tag_t, pcitag_t, bus_addr_t, int);
a623 20
}

void
pci_msi_enable(pci_chipset_tag_t pc, pcitag_t tag, bus_addr_t addr, int vec)
{
	pcireg_t reg;
	int off;

	if (pci_get_capability(pc, tag, PCI_CAP_MSI, &off, &reg) == 0)
		panic("%s: no msi capability", __func__);

	if (reg & PCI_MSI_MC_C64) {
		pci_conf_write(pc, tag, off + PCI_MSI_MA, addr);
		pci_conf_write(pc, tag, off + PCI_MSI_MAU32, 0);
		pci_conf_write(pc, tag, off + PCI_MSI_MD64, vec);
	} else {
		pci_conf_write(pc, tag, off + PCI_MSI_MA, addr);
		pci_conf_write(pc, tag, off + PCI_MSI_MD32, vec);
	}
	pci_conf_write(pc, tag, off, reg | PCI_MSI_MC_MSIE);
@


1.7
log
@Fix some inconsistencies in how we build 64-bit addresses from OF properties.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.6 2010/12/05 15:15:14 kettenis Exp $	*/
d39 21
d82 7
d95 1
d101 1
d124 7
d173 1
d200 1
d207 1
d238 58
d513 1
d523 32
d578 125
@


1.6
log
@PCIe based sparc64 machines have always supported access to the extended PCIe
configuration space.  So on pyro(4) and vpci(4) return the size appropriate
for the extended PCIe configuration space.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.5 2010/12/04 17:06:32 miod Exp $	*/
d403 1
a403 1
		paddr |= ((bus_addr_t)pbm->vp_range[i].phys_hi<<32);
@


1.5
log
@Introduce a new pci routine, pci_conf_size(), which returns the size of a
given pcitag_t configuration address space. Currently, all pci controllers
will return the usual 0x100 bytes of PCI configuration space, but this will
eventually change on PCIe-capable controlers.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.4 2009/03/29 22:52:11 kettenis Exp $	*/
d209 1
a209 1
	return PCI_CONFIG_SPACE_SIZE;
@


1.4
log
@bzero pci attach args

ok deraadt@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.3 2009/01/02 20:01:45 kettenis Exp $	*/
d82 1
d171 1
d204 6
@


1.3
log
@Make IOMMU code use the generic _bus_dmamem_map() and _bus_dmamem_unmap().
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.2 2008/04/08 22:05:19 kettenis Exp $	*/
d162 1
a165 1
	pba.pba_bridgetag = NULL;
@


1.2
log
@For some reason access to io space using ASI_PHYS_NON_CACHED_LITTLE doesn't
work, so go through the MMU just like we do for mem space.  Makes puc(4)
work on the t1k, and hopefully fixes the problems on the t2k.
@
text
@d1 1
a1 1
/*	$OpenBSD: vpci.c,v 1.1 2008/03/09 18:58:11 kettenis Exp $	*/
a311 2
	dt->_dmamem_map = viommu_dvmamem_map;
	dt->_dmamem_unmap = viommu_dvmamem_unmap;
@


1.1
log
@Driver for the virtual PCI host bridge on sun4v.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d264 1
a264 1
	    ASI_PHYS_NON_CACHED_LITTLE, ASI_PHYS_NON_CACHED));
@

