head	1.9;
access;
symbols
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.5
	SMP:1.5.0.2
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	UBC:1.3.0.4
	UBC_SYNC_B:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2006.05.15.21.38.36;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2005.04.05.21.49.33;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.17.17.35.40;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.02.49;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.27.18.17.58;	author jason;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2002.12.03.19.25.54;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.26.16.39.04;	author jason;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2002.07.25.19.40.33;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.11.10.48.24;	author jason;	state Exp;
branches;
next	;

1.3.4.1
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;

1.5.2.1
date	2003.04.19.19.17.49;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2003.05.13.19.41.09;	author ho;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge creator attachment code again, it turns out the upa/mainbus attachment
code split is not necessary after all; ok jason@@
@
text
@/*	$OpenBSD: creator_upa.c,v 1.8 2005/04/05 21:49:33 miod Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/wscons/wscons_raster.h>
#include <dev/rasops/rasops.h>
#include <machine/fbvar.h>

#include <sparc64/dev/creatorreg.h>
#include <sparc64/dev/creatorvar.h>

int	creator_upa_match(struct device *, void *, void *);
void	creator_upa_attach(struct device *, struct device *, void *);

struct cfattach creator_upa_ca = {
	sizeof(struct creator_softc), creator_upa_match,
	    creator_upa_attach
};

int
creator_upa_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, "SUNW,ffb") == 0 ||
	    strcmp(ma->ma_name, "SUNW,afb") == 0)
		return (1);
	return (0);
}

void
creator_upa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct creator_softc *sc = (struct creator_softc *)self;
	struct mainbus_attach_args *ma = aux;
	extern int fbnode;
	int i, nregs;

	sc->sc_bt = ma->ma_bustag;

	nregs = min(ma->ma_nreg, FFB_NREGS);

	if (nregs <= FFB_REG_DFB24) {
		printf(": no dfb24 regs found\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[FFB_REG_DFB24].ur_paddr,
	    ma->ma_reg[FFB_REG_DFB24].ur_len, BUS_SPACE_MAP_LINEAR,
	    &sc->sc_pixel_h)) {
		printf(": failed to map dfb24\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[FFB_REG_FBC].ur_paddr,
	    ma->ma_reg[FFB_REG_FBC].ur_len, 0, &sc->sc_fbc_h)) {
		printf(": failed to map fbc\n");
		goto unmap_dfb24;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[FFB_REG_DAC].ur_paddr,
	    ma->ma_reg[FFB_REG_DAC].ur_len, 0, &sc->sc_dac_h)) {
		printf(": failed to map dac\n");
		goto unmap_fbc;
	}

	for (i = 0; i < nregs; i++) {
		sc->sc_addrs[i] = ma->ma_reg[i].ur_paddr;
		sc->sc_sizes[i] = ma->ma_reg[i].ur_len;
	}
	sc->sc_nreg = nregs;

	sc->sc_console = (fbnode == ma->ma_node);
	sc->sc_node = ma->ma_node;

	if (strcmp(ma->ma_name, "SUNW,afb") == 0)
		sc->sc_type = FFB_AFB;

	creator_attach(sc);
	return;

unmap_fbc:
	bus_space_unmap(sc->sc_bt, sc->sc_fbc_h,
	    ma->ma_reg[FFB_REG_FBC].ur_len);
unmap_dfb24:
	bus_space_unmap(sc->sc_bt, sc->sc_pixel_h,
	    ma->ma_reg[FFB_REG_DFB24].ur_len);
}
@


1.8
log
@Off-by-ones in register comparisons.
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.7 2003/06/17 17:35:40 miod Exp $	*/
@


1.7
log
@Extend the sunfb structure to take care of the PROM cursor position
pointers, and adapt creator to the fb api.
ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.6 2003/06/02 20:02:49 jason Exp $	*/
d85 1
a85 1
	if (nregs < FFB_REG_DFB24) {
@


1.6
log
@nuke terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.5 2003/03/27 18:17:58 jason Exp $	*/
d45 1
@


1.5
log
@- Add support for the *CURS* ioctls (requires mapping the DAC registers
and tweaking appropriately)
- add support for VADDR->PADDR mappings expected by the X server
- fix attachment error handling (it depended on bus_space_vaddr() working
for non-linear mappings).
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.4 2002/12/03 19:25:54 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5.2.1
log
@A sweep to fix remaining files not in sync with the SMP_SYNC_B point.
@
text
@d91 1
a91 1
		goto fail;
d98 1
a98 1
		goto fail;
d104 7
a110 1
		goto fail;
a125 1

d128 6
a133 7
fail:
	if (bus_space_vaddr(sc->sc_bt, sc->sc_fbc_h))
		bus_space_unmap(sc->sc_bt, sc->sc_fbc_h,
		    ma->ma_reg[FFB_REG_FBC].ur_len);
	if (bus_space_vaddr(sc->sc_bt, sc->sc_pixel_h))
		bus_space_unmap(sc->sc_bt, sc->sc_pixel_h,
		    ma->ma_reg[FFB_REG_DFB24].ur_len);
@


1.5.2.2
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.5.2.1 2003/04/19 19:17:49 niklas Exp $	*/
d91 1
a91 1
		return;
d98 1
a98 1
		return;
d104 1
a104 7
		goto unmap_dfb24;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[FFB_REG_DAC].ur_paddr,
	    ma->ma_reg[FFB_REG_DAC].ur_len, 0, &sc->sc_dac_h)) {
		printf(": failed to map dac\n");
		goto unmap_fbc;
d120 1
d123 7
a129 6
unmap_fbc:
	bus_space_unmap(sc->sc_bt, sc->sc_fbc_h,
	    ma->ma_reg[FFB_REG_FBC].ur_len);
unmap_dfb24:
	bus_space_unmap(sc->sc_bt, sc->sc_pixel_h,
	    ma->ma_reg[FFB_REG_DFB24].ur_len);
@


1.5.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.5.2.2 2003/05/13 19:41:09 ho Exp $	*/
d15 5
@


1.5.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a44 1
#include <machine/fbvar.h>
@


1.4
log
@Use bus_space_vaddr() instead of checking the mapping directly (this will
be necessary soon); from henric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.3 2002/07/26 16:39:04 jason Exp $	*/
d91 1
a91 1
		goto fail;
d98 1
a98 1
		goto fail;
d104 7
a110 1
		goto fail;
a125 1

d128 6
a133 7
fail:
	if (bus_space_vaddr(sc->sc_bt, sc->sc_fbc_h))
		bus_space_unmap(sc->sc_bt, sc->sc_fbc_h,
		    ma->ma_reg[FFB_REG_FBC].ur_len);
	if (bus_space_vaddr(sc->sc_bt, sc->sc_pixel_h))
		bus_space_unmap(sc->sc_bt, sc->sc_pixel_h,
		    ma->ma_reg[FFB_REG_DFB24].ur_len);
@


1.3
log
@- Move register defns to their own header file and add a whole bunch of them
- map the fbc register set
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.2 2002/07/25 19:40:33 jason Exp $	*/
d124 1
a124 1
	if (sc->sc_fbc_h != 0)
d127 1
a127 1
	if (sc->sc_pixel_h != 0)
@


1.3.4.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3.4.2
log
@sync
@
text
@d91 1
a91 1
		return;
d98 1
a98 1
		return;
d104 1
a104 7
		goto unmap_dfb24;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[FFB_REG_DAC].ur_paddr,
	    ma->ma_reg[FFB_REG_DAC].ur_len, 0, &sc->sc_dac_h)) {
		printf(": failed to map dac\n");
		goto unmap_fbc;
d120 1
d123 7
a129 6
unmap_fbc:
	bus_space_unmap(sc->sc_bt, sc->sc_fbc_h,
	    ma->ma_reg[FFB_REG_FBC].ur_len);
unmap_dfb24:
	bus_space_unmap(sc->sc_bt, sc->sc_pixel_h,
	    ma->ma_reg[FFB_REG_DFB24].ur_len);
@


1.2
log
@use bus_space_map, not bus_space_map2, and fix failure printf's
@
text
@d1 1
a1 1
/*	$OpenBSD: creator_upa.c,v 1.1 2002/06/11 10:48:24 jason Exp $	*/
d51 1
d95 2
a96 1
	    ma->ma_reg[FFB_REG_DFB24].ur_len, 0, &sc->sc_pixel_h)) {
d101 6
d124 3
@


1.1
log
@UPA attachment for creator
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 3
a95 3
	if (bus_space_map2(sc->sc_bt, 0, ma->ma_reg[FFB_REG_DFB24].ur_paddr,
	    ma->ma_reg[FFB_REG_DFB24].ur_len, 0, NULL, &sc->sc_pixel_h)) {
		printf("%s: failed to map dfb24\n", sc->sc_dv.dv_xname);
@

