head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.52
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.48
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.50
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.42
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.46
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.44
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.40
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.38
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.36
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.34
	OPENBSD_5_0:1.8.0.32
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	UBC_SYNC_B:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	UBC:1.5.0.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.8
date	2003.12.16.15.04.56;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.18.02.20.17;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.27.20.07.06;	author deraadt;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2002.04.16.19.49.06;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.16.16.19.32;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.20.06.54.06;	author jason;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.03.14.20.15.00;	author jason;	state Exp;
branches;
next	;

1.2.2.1
date	2003.03.27.23.42.35;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@don't do a linear mapping (prevents warnings on the leopard)
@
text
@/*	$OpenBSD: lpt_ebus.c,v 1.7 2003/02/17 01:29:20 henric Exp $	*/
/*	$NetBSD: lpt_ebus.c,v 1.8 2002/03/01 11:51:00 martin Exp $	*/

/*
 * Copyright (c) 1999, 2000 Matthew R. Green
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * NS Super I/O PC87332VLJ "lpt" to ebus attachment
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/tty.h>

#include <machine/bus.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include <dev/ic/lptvar.h>

struct lpt_ebus_softc {
	struct lpt_softc sc_lpt;
	bus_space_handle_t sc_ctrl;
};

int	lpt_ebus_match(struct device *, void *, void *);
void	lpt_ebus_attach(struct device *, struct device *, void *);

struct cfattach lpt_ebus_ca = {
	sizeof(struct lpt_ebus_softc), lpt_ebus_match, lpt_ebus_attach
};

int
lpt_ebus_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct ebus_attach_args *ea = aux;

	if (!strcmp(ea->ea_name, "ecpp") ||
	    !strcmp(ea->ea_name, "parallel"))
		return (1);
	return (0);
}

void
lpt_ebus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lpt_ebus_softc *sc = (void *)self;
	struct ebus_attach_args *ea = aux;


	if (ebus_bus_map(ea->ea_memtag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    0, 0, &sc->sc_lpt.sc_ioh) == 0) {
		sc->sc_lpt.sc_iot = ea->ea_memtag;
	} else if (ebus_bus_map(ea->ea_iotag, 0,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
		    0, 0, &sc->sc_lpt.sc_ioh) == 0) {
		sc->sc_lpt.sc_iot = ea->ea_iotag;
	} else {
		printf(": can't map register space\n");
		return;
	}

	if (ebus_bus_map(sc->sc_lpt.sc_iot, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[1]), ea->ea_regs[1].size, 0, 0,
	    &sc->sc_ctrl) != 0) {
		printf(": can't map control space\n");
		bus_space_unmap(sc->sc_lpt.sc_iot, sc->sc_lpt.sc_ioh,
		    ea->ea_regs[0].size);
		return;
	}

	sc->sc_lpt.sc_flags |= LPT_POLLED;
	printf(": polled");

	lpt_attach_common(&sc->sc_lpt);
}
@


1.7
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.6 2002/07/18 02:20:17 jason Exp $	*/
d98 2
a99 2
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[1]), ea->ea_regs[1].size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ctrl) != 0) {
@


1.6
log
@another name, 'parallel'
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.5 2002/05/27 20:07:06 deraadt Exp $	*/
a82 1
	sc->sc_lpt.sc_iot = ea->ea_bustag;
d84 1
a84 1
	if (ebus_bus_map(sc->sc_lpt.sc_iot, 0,
d86 7
a92 1
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_lpt.sc_ioh) != 0) {
d94 1
a94 1
                return;
@


1.5
log
@left over __P removals
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.4 2002/04/16 19:49:06 jason Exp $	*/
d69 2
a70 1
	if (strcmp(ea->ea_name, "ecpp") == 0)
a71 1

@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.5.2.1 2002/06/11 03:38:43 art Exp $	*/
d69 1
a69 2
	if (!strcmp(ea->ea_name, "ecpp") ||
	    !strcmp(ea->ea_name, "parallel"))
d71 1
@


1.5.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 1
d85 1
a85 1
	if (ebus_bus_map(ea->ea_memtag, 0,
d87 1
a87 7
	    0, 0, &sc->sc_lpt.sc_ioh) == 0) {
		sc->sc_lpt.sc_iot = ea->ea_memtag;
	} else if (ebus_bus_map(ea->ea_iotag, 0,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
		    0, 0, &sc->sc_lpt.sc_ioh) == 0) {
		sc->sc_lpt.sc_iot = ea->ea_iotag;
	} else {
d89 1
a89 1
		return;
@


1.4
log
@use polled access for now (prevents a hang on the Momenco Leopard-V)
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.3 2002/04/16 16:19:32 jason Exp $	*/
d54 2
a55 2
int	lpt_ebus_match __P((struct device *, void *, void *));
void	lpt_ebus_attach __P((struct device *, struct device *, void *));
@


1.3
log
@- Don't bother checking to see if the prom has already mapped this
- a bunch of KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.2 2002/03/20 06:54:06 jason Exp $	*/
d49 5
d58 1
a58 1
	sizeof(struct lpt_softc), lpt_ebus_match, lpt_ebus_attach
d80 1
a80 1
	struct lpt_softc *sc = (void *)self;
a81 1
	int i;
d83 1
a83 1
	sc->sc_iot = ea->ea_bustag;
d85 3
a87 2
	if (ebus_bus_map(sc->sc_iot, 0, EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ioh) != 0) {
d92 11
a102 3
	for (i = 0; i < ea->ea_nintrs; i++)
		bus_intr_establish(ea->ea_bustag, ea->ea_intrs[i], IPL_SERIAL,
		    0, lptintr, sc);
d104 1
a104 1
	lpt_attach_common(sc);
@


1.2
log
@lpt_attach_common() prints the newline for us
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_ebus.c,v 1.1 2002/03/14 20:15:00 jason Exp $	*/
a55 2
#define	ROM_LPT_NAME	"ecpp"

d64 1
a64 1
	if (strcmp(ea->ea_name, ROM_LPT_NAME) == 0)
d80 3
a82 18
	/*
	 * Addresses that shoud be supplied by the prom:
	 *	- normal lpt registers
	 *	- ns873xx configuration registers
	 *	- DMA space
	 * The `lpt' driver does not use DMA accesses, so we can
	 * ignore that for now.  We should enable the lpt port in
	 * the ns873xx registers here. XXX
	 *
	 * Use the prom address if there.
	 */
	if (ea->ea_nvaddrs)
		sc->sc_ioh = (bus_space_handle_t)ea->ea_vaddrs[0];
	else if (ebus_bus_map(sc->sc_iot, 0,
			      EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
			      ea->ea_regs[0].size,
			      BUS_SPACE_MAP_LINEAR,
			      0, &sc->sc_ioh) != 0) {
d88 2
a89 2
		bus_intr_establish(ea->ea_bustag, ea->ea_intrs[i],
				   IPL_SERIAL, 0, lptintr, sc);
@


1.2.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 2
a50 7
struct lpt_ebus_softc {
	struct lpt_softc sc_lpt;
	bus_space_handle_t sc_ctrl;
};

int	lpt_ebus_match(struct device *, void *, void *);
void	lpt_ebus_attach(struct device *, struct device *, void *);
d53 1
a53 1
	sizeof(struct lpt_ebus_softc), lpt_ebus_match, lpt_ebus_attach
d56 2
d66 1
a66 2
	if (!strcmp(ea->ea_name, "ecpp") ||
	    !strcmp(ea->ea_name, "parallel"))
d68 1
d77 1
a77 1
	struct lpt_ebus_softc *sc = (void *)self;
d79 1
d81 19
a99 10

	if (ebus_bus_map(ea->ea_memtag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    0, 0, &sc->sc_lpt.sc_ioh) == 0) {
		sc->sc_lpt.sc_iot = ea->ea_memtag;
	} else if (ebus_bus_map(ea->ea_iotag, 0,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
		    0, 0, &sc->sc_lpt.sc_ioh) == 0) {
		sc->sc_lpt.sc_iot = ea->ea_iotag;
	} else {
d101 1
a101 10
		return;
	}

	if (ebus_bus_map(sc->sc_lpt.sc_iot, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[1]), ea->ea_regs[1].size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ctrl) != 0) {
		printf(": can't map control space\n");
		bus_space_unmap(sc->sc_lpt.sc_iot, sc->sc_lpt.sc_ioh,
		    ea->ea_regs[0].size);
		return;
d104 3
a106 2
	sc->sc_lpt.sc_flags |= LPT_POLLED;
	printf(": polled");
d108 1
a108 1
	lpt_attach_common(&sc->sc_lpt);
@


1.2.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d98 2
a99 2
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[1]), ea->ea_regs[1].size, 0, 0,
	    &sc->sc_ctrl) != 0) {
@


1.1
log
@From NetBSD: driver for lpt at ebus
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a106 1
	printf("\n");
@

