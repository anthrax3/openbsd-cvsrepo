head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.24
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.16
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.20
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.18
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2016.03.19.11.34.22;	author mpi;	state Exp;
branches;
next	1.6;
commitid	15xZY6veDWwRM6Iq;

1.6
date	2016.01.08.15.54.13;	author jcs;	state Exp;
branches;
next	1.5;
commitid	kI4H556ZKYkRQGw5;

1.5
date	2010.07.31.16.04.50;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.24.14.54.49;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.29.03.26.54;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.00.17.25;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.28.23.37.42;	author jason;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Reduces the noise around the global ``ticks'' variable by renaming
all the local ones to ``nticks''.

ok stefan@@, deraadt@@
@
text
@/*	$OpenBSD: beep.c,v 1.6 2016/01/08 15:54:13 jcs Exp $	*/

/*
 * Copyright (c) 2006 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for beeper device on BBC machines (Blade 1k, 2k, etc)
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include "hidkbd.h"
#if NHIDKBD > 0
#include <dev/hid/hidkbdvar.h>
#endif

#define	BEEP_CTRL		0
#define	BEEP_CNT_0		2
#define	BEEP_CNT_1		3
#define	BEEP_CNT_2		4
#define	BEEP_CNT_3		5

#define	BEEP_CTRL_ON		0x01
#define	BEEP_CTRL_OFF		0x00

struct beep_freq {
	int freq;
	u_int32_t reg;
};

struct beep_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	int			sc_clk;
	struct beep_freq	sc_freqs[9];
	struct timeout		sc_to;
	int			sc_belltimeout;
	int			sc_bellactive;
};

int beep_match(struct device *, void *, void *);
void beep_attach(struct device *, struct device *, void *);
void beep_setfreq(struct beep_softc *, int);

struct cfattach beep_ca = {
	sizeof(struct beep_softc), beep_match, beep_attach
};

struct cfdriver beep_cd = {
	NULL, "beep", DV_DULL
};

#if NHIDKBD > 0
void beep_stop(void *);
void beep_bell(void *, u_int, u_int, u_int, int);
#endif

int
beep_match(struct device *parent, void *match, void *aux)
{
	struct ebus_attach_args *ea = aux;

	if (strcmp(ea->ea_name, "beep") == 0)
		return (1);
	return (0);
}

void
beep_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct beep_softc *sc = (void *)self;
	struct ebus_attach_args *ea = aux;
	int i;

	sc->sc_iot = ea->ea_memtag;

	/* Use prom address if available, otherwise map it. */
	if (ea->ea_nvaddrs) {
		if (bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_ioh)) {
			printf(": can't map PROM register space\n");
			return;
		}
	} else if (ebus_bus_map(sc->sc_iot, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size, 0, 0,
	    &sc->sc_ioh) != 0) {
		printf(": can't map register space\n");
                return;
	}

	/* The bbc,beep is clocked at half the BBC frequency */
	sc->sc_clk = getpropint(findroot(), "clock-frequency", 0);
	sc->sc_clk /= 2;

	/*
	 * Compute the frequence table based on the scalar and base
	 * board clock speed.
	 */
	for (i = 0; i < 9; i++) {
		sc->sc_freqs[i].reg = 1 << (18 - i);
		sc->sc_freqs[i].freq = sc->sc_clk / sc->sc_freqs[i].reg;
	}

	/* set beep at around 1200hz */
	beep_setfreq(sc, 1200);

#if 0
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CTRL,
	    BEEP_CTRL_ON);
	for (i = 0; i < 1000; i++)
		DELAY(1000);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CTRL,
	    BEEP_CTRL_OFF);
#endif

	printf(": clock %sMHz\n", clockfreq(sc->sc_clk));

#if NHIDKBD > 0
	timeout_set(&sc->sc_to, beep_stop, sc);
	hidkbd_hookup_bell(beep_bell, sc);
#endif
}

void
beep_setfreq(struct beep_softc *sc, int freq)
{
	int i, n, selected = -1;

	n = sizeof(sc->sc_freqs)/sizeof(sc->sc_freqs[0]);

	if (freq < sc->sc_freqs[0].freq)
		selected = 0;
	if (freq > sc->sc_freqs[n - 1].freq)
		selected = n - 1;

	for (i = 1; selected == -1 && i < n; i++) {
		if (sc->sc_freqs[i].freq == freq)
			selected = i;
		else if (sc->sc_freqs[i].freq > freq) {
			int diff1, diff2;

			diff1 = freq - sc->sc_freqs[i - 1].freq;
			diff2 = sc->sc_freqs[i].freq - freq;
			if (diff1 < diff2)
				selected = i - 1;
			else
				selected = i;
		}
	}

	if (selected == -1)
		selected = 0;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CNT_0,
	    (sc->sc_freqs[i].reg >> 24) & 0xff);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CNT_1,
	    (sc->sc_freqs[i].reg >> 16) & 0xff);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CNT_2,
	    (sc->sc_freqs[i].reg >>  8) & 0xff);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CNT_3,
	    (sc->sc_freqs[i].reg >>  0) & 0xff);
}

#if NHIDKBD > 0
void
beep_stop(void *vsc)
{
	struct beep_softc *sc = vsc;
	int s;

	s = spltty();
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CTRL,
	    BEEP_CTRL_OFF);
	sc->sc_bellactive = 0;
	sc->sc_belltimeout = 0;
	splx(s);
}

void
beep_bell(void *vsc, u_int pitch, u_int period, u_int volume, int poll)
{
	struct beep_softc *sc = vsc;
	int s, nticks;

	nticks = (period * hz) / 1000;
	if (nticks <= 0)
		nticks = 1;

	s = spltty();
	if (sc->sc_bellactive) {
		if (sc->sc_belltimeout == 0)
			timeout_del(&sc->sc_to);
	}
	if (pitch == 0 || period == 0 || volume == 0) {
		beep_stop(sc);
		splx(s);
		return;
	}
	if (!sc->sc_bellactive) {
		sc->sc_bellactive = 1;
		sc->sc_belltimeout = 1;
		bus_space_write_1(sc->sc_iot, sc->sc_ioh, BEEP_CTRL,
	    	    BEEP_CTRL_ON);
		timeout_add(&sc->sc_to, nticks);
	}
	splx(s);
}
#endif /* NHIDKBD > 0 */
@


1.6
log
@Move HID support files out of dev/usb into new dev/hid directory

These files aren't USB-specific and were used by the previous
Bluetooth implementation, and will be used by the upcoming
HID-over-i2C implementation

ok deraadt
previous version ok kettenis and mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: beep.c,v 1.5 2010/07/31 16:04:50 miod Exp $	*/
d222 1
a222 1
	int s, ticks;
d224 3
a226 3
	ticks = (period * hz) / 1000;
	if (ticks <= 0)
		ticks = 1;
d243 1
a243 1
		timeout_add(&sc->sc_to, ticks);
@


1.5
log
@Factorization of the bluetooth and usb hid input driver logic, to reduce code
duplication and divergence.
Thanks to mlarkin@@ for bluetooth devices tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: beep.c,v 1.4 2008/01/24 14:54:49 robert Exp $	*/
d50 1
a50 1
#include <dev/usb/hidkbdvar.h>
@


1.4
log
@Finish the beep(4) driver by hooking it up to the ukbd(4) beep handler
and disable the one second long beep on attach.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: beep.c,v 1.3 2006/05/29 03:26:54 jason Exp $	*/
d48 3
a50 3
#include "ukbd.h"
#if NUKBD > 0
#include <dev/usb/ukbdvar.h>
d90 1
a90 1
#if NUKBD > 0
d157 1
a157 1
#if NUKBD > 0
d159 1
a159 1
	ukbd_hookup_bell(beep_bell, sc);
d203 1
a203 1
#if NUKBD > 0
d247 1
a247 1
#endif /* NUKBD > 0 */
@


1.3
log
@implement frequency setting for the beep.  It also beeps for one second
during boot (this is annoying, I know... I'll hook it up to the keyboard
handler later).
@
text
@d1 1
a1 1
/*	$OpenBSD: beep.c,v 1.2 2006/05/29 00:17:25 jason Exp $	*/
d48 5
d73 3
d90 5
d146 1
d153 1
d156 5
d202 46
@


1.2
log
@fetch the beep clock frequency (we'll need it to compute the audio frequency later)
@
text
@d1 1
a1 1
/*	$OpenBSD: beep.c,v 1.1 2006/05/28 23:37:42 jason Exp $	*/
d57 5
d67 1
d70 3
a72 2
int	beep_match(struct device *, void *, void *);
void	beep_attach(struct device *, struct device *, void *);
d99 1
d121 19
d141 40
@


1.1
log
@placeholder driver for the bbc,beep device.  should be straightforward
to fill in later.
@
text
@d1 1
a1 1
/*	$OpenBSD: beep.c,v 1.10 2005/12/20 16:50:33 martin Exp $	*/
d61 1
d109 5
a113 1
	printf("\n");
@

