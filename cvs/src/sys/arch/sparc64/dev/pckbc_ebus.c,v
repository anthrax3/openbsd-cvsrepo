head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.14
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.18
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	UBC_SYNC_B:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	UBC:1.2.0.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2015.05.24.10.57.47;	author miod;	state Exp;
branches;
next	1.12;
commitid	lWcX96d8OBs4r9kK;

1.12
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.21.20.10.17;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.29.04.20.35;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.16.20.03.22;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.01.16.11.19;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.02.21.17.39;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.16.15.08.50;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.24.21.54.39;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.02.49;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2002.02.18.17.52.08;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.03.27.23.42.35;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.2.4.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Follow the recent pckbc@@isa changes and always establish all the necessary
interrupts at pckbc attach time, and get rid of the `intr_establish'
pckbc callback.

Tested on hppa (gsckbc) and sgi (pckbc@@hpc); not tested on sparc64 (pckbc@@ebus)
but this attachment was already behaving this way and its intr_establish
callback was an empty function.
@
text
@/*	$OpenBSD: pckbc_ebus.c,v 1.12 2010/11/23 04:07:55 shadchin Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for i8042 keyboard controller found on some PCI based
 * UltraSPARCs
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>

struct pckbc_ebus_softc {
	struct pckbc_softc sc_pckbc;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	bus_space_handle_t sc_ioh_c;
	bus_space_handle_t sc_ioh_d;
	void *sc_irq[2];
	int sc_node;
};

int pckbc_ebus_match(struct device *, void *, void *);
void pckbc_ebus_attach(struct device *, struct device *, void *);

struct cfattach pckbc_ebus_ca = {
	sizeof(struct pckbc_ebus_softc), pckbc_ebus_match, pckbc_ebus_attach
};

int pckbc_ebus_is_console(struct pckbc_ebus_softc *);

int
pckbc_ebus_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct ebus_attach_args *ea = aux;

	if (strcmp(ea->ea_name, "8042") == 0)
		return (1);
	return (0);
}

void
pckbc_ebus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pckbc_ebus_softc *sc = (void *)self;
	struct pckbc_softc *psc = &sc->sc_pckbc;
	struct ebus_attach_args *ea = aux;
	struct pckbc_internal *t = NULL;
	int console;
	int flags = 0;

	sc->sc_node = ea->ea_node;
	console = pckbc_ebus_is_console(sc);

	/* Use prom address if available, otherwise map it. */
	if (ea->ea_nvaddrs && bus_space_map(ea->ea_iotag, ea->ea_vaddrs[0], 0,
	    0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_iotag;
	} else if (ebus_bus_map(ea->ea_iotag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_iotag;
	} else if (ebus_bus_map(ea->ea_memtag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_memtag;
	} else {
		printf(": can't map register space\n");
		return;
	}

	/*
	 * The 8042 controller found on the Tadpole SPARCLE doesn't
	 * implement XT scan code translation.
	 * XXX I have not checked the value of the model property on
	 * XXX UltraAXe boards...
	 */
	{
		char model[128];
		OF_getprop(ea->ea_node, "model", &model, sizeof model);
		if (strcmp(model, "INTC,80c42") == 0)
			flags = PCKBC_CANT_TRANSLATE | PCKBC_NEED_AUXWRITE;
	}

	if (console) {
		if (pckbc_cnattach(sc->sc_iot,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), KBCMDP, flags) == 0) {
			t = &pckbc_consdata;
			pckbc_console_attached = 1;
			sc->sc_ioh_c = t->t_ioh_c;
			sc->sc_ioh_d = t->t_ioh_d;
		} else
			console = 0;
	}

	if (console == 0) {
		if (bus_space_subregion(sc->sc_iot, sc->sc_ioh,
		    KBCMDP, sizeof(u_int32_t), &sc->sc_ioh_c) != 0) {
			printf(": couldn't get cmd subregion\n");
			return;
		}
		if (bus_space_subregion(sc->sc_iot, sc->sc_ioh,
		    KBDATAP, sizeof(u_int32_t), &sc->sc_ioh_d) != 0) {
			printf(": couldn't get data subregion\n");
			return;
		}

		t = malloc(sizeof(*t), M_DEVBUF, M_NOWAIT | M_ZERO);
		t->t_flags = flags;
	}

	sc->sc_irq[0] = bus_intr_establish(sc->sc_iot, ea->ea_intrs[0],
	    IPL_TTY, 0, pckbcintr, psc, self->dv_xname);
	if (sc->sc_irq[0] == NULL) {
		printf(": couldn't get intr0\n");
		return;
	}

	sc->sc_irq[1] = bus_intr_establish(sc->sc_iot, ea->ea_intrs[1],
	    IPL_TTY, 0, pckbcintr, psc, self->dv_xname);
	if (sc->sc_irq[1] == NULL) {
		printf(": couldn't get intr1\n");
		return;
	}

	t->t_iot = sc->sc_iot;
	t->t_ioh_c = sc->sc_ioh_c;
	t->t_ioh_d = sc->sc_ioh_d;
	t->t_cmdbyte = KC8_CPU;
	t->t_sc = psc;

	psc->id = t;

	printf("\n");
	pckbc_attach(psc, 0);
}

int
pckbc_ebus_is_console(sc)
	struct pckbc_ebus_softc *sc;
{
	char *name;
	int node;

	/*
	 * Loop through the children of 8042 and see if the keyboard
	 * exists, and further, whether it is the console input device.
	 * This is almost redundant because 8042 doesn't show up in
	 * device tree unless a keyboard is in fact attached.
	 */
	for (node = OF_child(sc->sc_node); node; node = OF_peer(node)) {
		name = getpropstring(node, "name");
		if (name == NULL)
			continue;
		if (strcmp("kb_ps2", name) == 0 ||
		    strcmp("keyboard", name) == 0) {
			if (node == OF_instance_to_package(OF_stdin()))
				return (1);
		}
	}
	return (0);
}
@


1.12
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.11 2010/07/21 20:10:17 miod Exp $	*/
a72 1
void pckbc_ebus_intr_establish(struct pckbc_softc *, pckbc_slot_t);
a159 2
	psc->intr_establish = pckbc_ebus_intr_establish;

a209 8
}

void
pckbc_ebus_intr_establish(psc, slot)
	struct pckbc_softc *psc;
	pckbc_slot_t slot;
{
	/* Nothing to do, interrupts were mapped in attach. */
@


1.11
log
@Disable the heuristics for legacy free systems if pckbc flags are set to 1
in UKC; found the hard way by jakemsr@@ on an old Tecra laptop.
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.10 2008/07/29 04:20:35 miod Exp $	*/
d136 1
a136 2
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), KBCMDP,
		    PCKBC_KBD_SLOT, flags) == 0) {
@


1.10
log
@Reenable the AUXWRITE dance to try and find the aux port in pckbc(4), based
on an attachment dependent flag; the Tadople SPARCLE needs it.
ok kettenis@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.9 2008/07/16 20:03:22 miod Exp $	*/
d187 1
a187 1
	pckbc_attach(psc);
@


1.9
log
@Add a new parameter to pckbc_cnattach(): flags to put in the pckbc bowels.
For now, only one such flag is defined, PCKBC_CANT_TRANSLATE. It hints
pckbc that the device does not behave correctly to the ``set translation''
commands.

Set this flag if we are running on a Tadpole Ultrabook machine, which needs it.
This makes the built-in keyboard work correctly on this laptop (with the
help of the software translation pckbd diff).

tested & ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.8 2007/10/01 16:11:19 krw Exp $	*/
d131 1
a131 1
			flags = PCKBC_CANT_TRANSLATE;
@


1.8
log
@More easy bzero() -> M_ZERO. Use 'p = malloc(sizeof(*p) ...' where
obvious.
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.7 2004/11/02 21:17:39 miod Exp $	*/
d99 1
d121 13
d137 1
a137 1
		    PCKBC_KBD_SLOT) == 0) {
d159 1
d183 1
a187 1

@


1.7
log
@Use PROM mappings, if available, whenever we are the console device or not;
should help on SPARCenginc Ultra AXe, does not change anything on other
machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.6 2003/12/16 15:08:50 jason Exp $	*/
d144 1
a144 2
		t = malloc(sizeof(struct pckbc_internal), M_DEVBUF, M_NOWAIT);
		bzero(t, sizeof(struct pckbc_internal));
@


1.6
log
@Don't need linear mappings here either
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.5 2003/06/24 21:54:39 henric Exp $	*/
a99 1
	sc->sc_iot = ea->ea_iotag;
d103 17
a132 11
		/* Use prom address if available, otherwise map it. */
		if (ea->ea_nvaddrs)
			bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0, 0,
			    &sc->sc_ioh);
		else if (ebus_bus_map(sc->sc_iot, 0,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
		    0, 0, &sc->sc_ioh) != 0) {
			printf(": can't map register space\n");
			return;
		}

d150 1
a150 1
	sc->sc_irq[0] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[0],
d157 1
a157 1
	sc->sc_irq[1] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[1],
@


1.5
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.4 2003/06/02 20:02:49 jason Exp $	*/
d123 1
a123 1
		    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ioh) != 0) {
@


1.4
log
@nuke terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.3 2003/02/17 01:29:20 henric Exp $	*/
d146 1
a146 1
	    IPL_TTY, 0, pckbcintr, psc);
d153 1
a153 1
	    IPL_TTY, 0, pckbcintr, psc);
@


1.3
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.2 2002/04/08 17:49:42 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.2
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.1 2002/02/18 17:52:08 jason Exp $	*/
d102 1
a102 1
	struct pckbc_internal *t;
d105 1
a105 1
	sc->sc_iot = ea->ea_bustag;
d124 2
a125 1
			sc->sc_ioh = (bus_space_handle_t)ea->ea_vaddrs[0];
d150 1
a150 1
	sc->sc_irq[0] = bus_intr_establish(ea->ea_bustag, ea->ea_intrs[0],
d157 1
a157 1
	sc->sc_irq[1] = bus_intr_establish(ea->ea_bustag, ea->ea_intrs[1],
@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@sync
@
text
@d102 1
a102 1
	struct pckbc_internal *t = NULL;
d105 1
a105 1
	sc->sc_iot = ea->ea_iotag;
d124 1
a124 2
			bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0, 0,
			    &sc->sc_ioh);
d149 1
a149 1
	sc->sc_irq[0] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[0],
d156 1
a156 1
	sc->sc_irq[1] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[1],
@


1.1
log
@Driver for the i8042 keyboard controller on systems with ebus
(why you'd want to use a PS/2 keyboard on a sun machine is beyond me,
but whatever...)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 5
@


1.1.2.1
log
@Sync the SMP branch with 3.3
@
text
@a36 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d97 1
a97 1
	struct pckbc_internal *t = NULL;
d100 1
a100 1
	sc->sc_iot = ea->ea_iotag;
d119 1
a119 2
			bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0, 0,
			    &sc->sc_ioh);
d144 1
a144 1
	sc->sc_irq[0] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[0],
d151 1
a151 1
	sc->sc_irq[1] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[1],
@


1.1.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.1.2.1 2003/03/27 23:42:35 niklas Exp $	*/
d15 5
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d123 1
a123 1
		    0, 0, &sc->sc_ioh) != 0) {
d146 1
a146 1
	    IPL_TTY, 0, pckbcintr, psc, self->dv_xname);
d153 1
a153 1
	    IPL_TTY, 0, pckbcintr, psc, self->dv_xname);
@


