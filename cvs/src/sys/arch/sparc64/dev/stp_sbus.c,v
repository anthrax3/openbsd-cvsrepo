head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.38
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.34
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.30
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.32
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.24
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.28
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.26
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.22
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.20
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.18
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.16
	OPENBSD_5_0:1.10.0.14
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.12
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.10
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	SMP:1.5.0.2
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2008.06.26.05.42.13;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2008.02.03.15.01.02;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.29.09.54.19;	author sobrado;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.02.23.10.17;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.16.15.08.50;	author jason;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2003.06.25.17.36.51;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.24.21.54.39;	author henric;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.23.19.47.03;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.23.09.28.00;	author miod;	state Exp;
branches;
next	;

1.5.2.1
date	2004.06.05.23.11.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: stp_sbus.c,v 1.9 2008/02/03 15:01:02 kettenis Exp $	*/
/*	$NetBSD: stp4020.c,v 1.23 2002/06/01 23:51:03 lukem Exp $	*/

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * STP4020: SBus/PCMCIA bridge supporting one Type-3 PCMCIA card, or up to
 * two Type-1 and Type-2 PCMCIA cards..
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/extent.h>
#include <sys/proc.h>
#include <sys/kernel.h>
#include <sys/kthread.h>
#include <sys/device.h>

#include <dev/pcmcia/pcmciareg.h>
#include <dev/pcmcia/pcmciavar.h>
#include <dev/pcmcia/pcmciachip.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/sbus/sbusvar.h>
#include <dev/sbus/stp4020reg.h>
#include <dev/sbus/stp4020var.h>

struct stp4020_sbus_softc {
	struct stp4020_softc stp;
	struct sparc_bus_space_tag *sc_bustag_le;
};

int	stpmatch(struct device *, void *, void *);
void	stpattach(struct device *, struct device *, void *);

struct cfattach stp_sbus_ca = {
	sizeof(struct stp4020_sbus_softc), stpmatch, stpattach
};

int
stpmatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct sbus_attach_args *sa = aux;

	return (strcmp("SUNW,pcmcia", sa->sa_name) == 0);
}

/*
 * Attach all the sub-devices we can find
 */
void
stpattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct sbus_attach_args *sa = aux;
	struct stp4020_sbus_softc *ssc = (void *)self;
	struct stp4020_softc *sc = (void *)self;
	int node;
	int i;
	bus_space_tag_t bt;
	bus_space_handle_t bh;

	node = sa->sa_node;

	/* Allocate little-endian bus tag */
	ssc->sc_bustag_le = malloc(sizeof(*sa->sa_bustag), M_DEVBUF, M_NOWAIT);
	if (ssc->sc_bustag_le == NULL)
		panic("could not allocate stp bus tag");
	*ssc->sc_bustag_le = *sa->sa_bustag;
	ssc->sc_bustag_le->asi = ASI_PRIMARY_LITTLE;

	/* Transfer bus tags */
	sc->sc_bustag = sa->sa_bustag;

	/* Set up per-socket static initialization */
	sc->sc_socks[0].sc = sc->sc_socks[1].sc = sc;
	sc->sc_socks[0].tag = sc->sc_socks[1].tag = sa->sa_bustag;

	if (sa->sa_nreg < 8) {
		printf(": only %d register sets\n", sa->sa_nreg);
		return;
	}

	if (sa->sa_nintr != 2) {
		printf(": expect 2 interrupt SBus levels; got %d\n",
		    sa->sa_nintr);
		return;
	}

#define STP4020_BANK_PROM	0
#define STP4020_BANK_CTRL	4
	for (i = 0; i < 8; i++) {

		/*
		 * STP4020 Register address map:
		 *	bank  0:   Forth PROM
		 *	banks 1-3: socket 0, windows 0-2
		 *	bank  4:   control registers
		 *	banks 5-7: socket 1, windows 0-2
		 */

		if (i == STP4020_BANK_PROM)
			/* Skip the PROM */
			continue;

		if (i == STP4020_BANK_CTRL)
			bt = sc->sc_bustag;
		else
			bt = ssc->sc_bustag_le;

		if (sbus_bus_map(bt, sa->sa_reg[i].sbr_slot,
		    sa->sa_reg[i].sbr_offset, sa->sa_reg[i].sbr_size, 0, 0,
		    &bh) != 0) {
			printf(": attach: cannot map registers\n");
			return;
		}

		if (i == STP4020_BANK_CTRL) {
			/*
			 * Copy tag and handle to both socket structures
			 * for easy access in control/status IO functions.
			 */
			sc->sc_socks[0].regs = sc->sc_socks[1].regs = bh;
		} else if (i < STP4020_BANK_CTRL) {
			/* banks 1-3 */
			sc->sc_socks[0].windows[i-1].winaddr = bh;
			sc->sc_socks[0].wintag = bt;
		} else {
			/* banks 5-7 */
			sc->sc_socks[1].windows[i-5].winaddr = bh;
			sc->sc_socks[1].wintag = bt;
		}
	}

	/*
	 * We get to use two SBus interrupt levels.
	 * The higher level we use for status change interrupts;
	 * the lower level for PC card I/O.
	 */
	bus_intr_establish(sa->sa_bustag, sa->sa_intr[1].sbi_pri,
	    IPL_NONE, 0, stp4020_statintr, sc, self->dv_xname);

	bus_intr_establish(sa->sa_bustag, sa->sa_intr[0].sbi_pri,
	    IPL_NONE, 0, stp4020_iointr, sc, self->dv_xname);

	stpattach_common(sc, sa->sa_frequency);
}
@


1.9
log
@Map windows little-endian like the MI pcmcia code expects.

"Diff looks correct and appears to work as intended" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.8 2007/05/29 09:54:19 sobrado Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@use the right capitalization for `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.7 2006/06/02 20:00:56 miod Exp $	*/
d68 1
d98 1
d102 1
d107 7
d148 6
a153 1
		if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[i].sbr_slot,
d169 1
a169 1
			sc->sc_socks[0].wintag = sc->sc_bustag;
d173 1
a173 1
			sc->sc_socks[1].wintag = sc->sc_bustag;
@


1.7
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.6 2004/03/02 23:10:17 miod Exp $	*/
d117 1
a117 1
		printf(": expect 2 interrupt Sbus levels; got %d\n",
@


1.6
log
@Rework the card insertion/removal detection logic:
- instead of queueing events each time the sense information changes,
  only remember that the slot needs attention
- when processing a slot needing attention, decide what to do depending upon
  its current sense information, rather than what it was when the change
  was detected
- handle the ``only one sensor asserted'' state happening during slow
  insertion or removal.

This makes the driver much more reactive to insertions and removals, and
also removes unnecessary attach/detach calls.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.5 2003/12/16 15:08:50 jason Exp $	*/
a67 1
	struct sbusdev	sc_sd;		/* SBus device */
a96 1
	struct stp4020_sbus_softc *ssc = (void *)self;
a160 2

	sbus_establish(&ssc->sc_sd, &sc->sc_dev);
@


1.5
log
@Don't need linear mappings here either
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.4 2003/06/25 17:36:51 miod Exp $	*/
d41 2
a42 1
 * STP4020: SBus/PCMCIA bridge supporting two Type-3 PCMCIA cards.
@


1.5.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 2
 * STP4020: SBus/PCMCIA bridge supporting one Type-3 PCMCIA card, or up to
 * two Type-1 and Type-2 PCMCIA cards..
@


1.4
log
@Let the stp driver use different bus_space_tag_t for its own device access,
and for access to the pcmcia windows from the pcmcia drivers.
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.3 2003/06/24 21:54:39 henric Exp $	*/
d140 2
a141 2
		    sa->sa_reg[i].sbr_offset, sa->sa_reg[i].sbr_size,
		    BUS_SPACE_MAP_LINEAR, 0, &bh) != 0) {
@


1.3
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.2 2003/06/23 19:47:03 jason Exp $	*/
d155 1
d159 1
@


1.2
log
@no need to check nintr late in the code... it's verified pretty early
@
text
@d1 1
a1 1
/*	$OpenBSD: stp_sbus.c,v 1.1 2003/06/23 09:28:00 miod Exp $	*/
d169 1
a169 1
	    IPL_NONE, 0, stp4020_statintr, sc);
d172 1
a172 1
	    IPL_NONE, 0, stp4020_iointr, sc);
@


1.1
log
@Split the stp driver into its core, and md attachment routines, and provide
attachment routines for sparc and sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d168 2
a169 3
	if (sa->sa_nintr != 0) {
		bus_intr_establish(sa->sa_bustag, sa->sa_intr[1].sbi_pri,
		    IPL_NONE, 0, stp4020_statintr, sc);
d171 2
a172 3
		bus_intr_establish(sa->sa_bustag, sa->sa_intr[0].sbi_pri,
		    IPL_NONE, 0, stp4020_iointr, sc);
	}
@

