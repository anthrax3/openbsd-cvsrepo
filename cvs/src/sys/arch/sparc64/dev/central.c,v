head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	uRv5pa9QDlZaYgwD;

1.9
date	2015.12.29.04.46.28;	author mmcc;	state Exp;
branches;
next	1.8;
commitid	QKSTqnEw1KIrhSLM;

1.8
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.7;
commitid	uKVPYMN2MLxdZxzH;

1.7
date	2010.11.11.17.58.23;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.17.22.53.18;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.17.01.33.33;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.27.17.28.03;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.24.20.49.57;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.23.16.26.59;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.22.21.31.51;	author jason;	state Exp;
branches;
next	;


desc
@@


1.10
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: central.c,v 1.9 2015/12/29 04:46:28 mmcc Exp $	*/

/*
 * Copyright (c) 2004 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/centralvar.h>

struct central_softc {
	struct device sc_dv;
	bus_space_tag_t sc_bt;
	bus_space_tag_t sc_cbt;
	int sc_node;
	int sc_nrange;
	struct central_range *sc_range;
};

int central_match(struct device *, void *, void *);
void central_attach(struct device *, struct device *, void *);

int central_print(void *, const char *);
int central_get_string(int, char *, char **);

bus_space_tag_t central_alloc_bus_tag(struct central_softc *);
int _central_bus_map(bus_space_tag_t, bus_space_tag_t, bus_addr_t, bus_size_t,
    int, bus_space_handle_t *);

int
central_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, "central") == 0)
		return (1);
	return (0);
}

void
central_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct central_softc *sc = (struct central_softc *)self;
	struct mainbus_attach_args *ma = aux;
	int node0, node;

	sc->sc_bt = ma->ma_bustag;
	sc->sc_node = ma->ma_node;
	sc->sc_cbt = central_alloc_bus_tag(sc);

	getprop(sc->sc_node, "ranges", sizeof(struct central_range),
	    &sc->sc_nrange, (void **)&sc->sc_range);

	printf("\n");

	node0 = firstchild(sc->sc_node);
	for (node = node0; node; node = nextsibling(node)) {
		struct central_attach_args ca;

		bzero(&ca, sizeof(ca));
		ca.ca_node = node;
		ca.ca_bustag = sc->sc_cbt;
		if (central_get_string(ca.ca_node, "name", &ca.ca_name)) {
			printf("can't fetch name for node 0x%x\n", node);
			continue;
		}

		getprop(node, "reg", sizeof(struct central_reg),
		    &ca.ca_nreg, (void **)&ca.ca_reg);

		(void)config_found(&sc->sc_dv, (void *)&ca, central_print);

		free(ca.ca_name, M_DEVBUF, 0);
	}
}

int
central_get_string(int node, char *name, char **buf)
{
	int len;

	len = getproplen(node, name);
	if (len < 0)
		return (len);
	*buf = (char *)malloc(len + 1, M_DEVBUF, M_NOWAIT);
	if (*buf == NULL)
		return (-1);

	if (len != 0)
		getpropstringA(node, name, *buf);
	(*buf)[len] = '\0';
	return (0);
}

int
central_print(void *args, const char *busname)
{
	struct central_attach_args *ca = args;
	char *class;

	if (busname != NULL) {
		printf("\"%s\" at %s", ca->ca_name, busname);
		class = getpropstring(ca->ca_node, "device_type");
		if (*class != '\0')
			printf(" class %s", class);
	}
	return (UNCONF);
}

bus_space_tag_t
central_alloc_bus_tag(struct central_softc *sc)
{
	struct sparc_bus_space_tag *bt;

	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (bt == NULL)
		panic("central: couldn't alloc bus tag");

	strlcpy(bt->name, sc->sc_dv.dv_xname, sizeof(bt->name));
	bt->cookie = sc;
	bt->parent = sc->sc_bt;
	bt->asi = bt->parent->asi;
	bt->sasi = bt->parent->sasi;
	bt->sparc_bus_map = _central_bus_map;
	/* XXX bt->sparc_bus_mmap = central_bus_mmap; */
	/* XXX bt->sparc_intr_establish = upa_intr_establish; */
	return (bt);
}

int
_central_bus_map(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t addr,
    bus_size_t size, int flags, bus_space_handle_t *hp)
{
	struct central_softc *sc = t->cookie;
	int64_t slot = BUS_ADDR_IOSPACE(addr);
	int64_t offset = BUS_ADDR_PADDR(addr);
	int i;

	if (t->parent == NULL || t->parent->sparc_bus_map == NULL) {
		printf("\ncentral_bus_map: invalid parent");
		return (EINVAL);
	}

	if (flags & BUS_SPACE_MAP_PROMADDRESS)
		return ((*t->parent->sparc_bus_map)(t, t0, addr,
		    size, flags, hp));

	for (i = 0; i < sc->sc_nrange; i++) {
		bus_addr_t paddr;

		if (sc->sc_range[i].cspace != slot)
			continue;

		paddr = offset - sc->sc_range[i].coffset;
		paddr += sc->sc_range[i].poffset;
		paddr |= ((bus_addr_t)sc->sc_range[i].pspace << 32);

		return ((*t->parent->sparc_bus_map)(t->parent, t0, paddr,
		    size, flags, hp));
	}

	return (EINVAL);
}

struct cfattach central_ca = {
	sizeof(struct central_softc), central_match, central_attach
};

struct cfdriver central_cd = {
	NULL, "central", DV_DULL
};
@


1.9
log
@Remove NULL-checks before free().

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.8 2014/07/12 18:44:43 tedu Exp $	*/
a28 1
#include <sys/types.h>
@


1.8
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.7 2010/11/11 17:58:23 miod Exp $	*/
d110 1
a110 2
		if (ca.ca_name != NULL)
			free(ca.ca_name, M_DEVBUF, 0);
@


1.7
log
@Replace snprintf(foo, sizeof foo, "%s", ...) with strlcpy. ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.6 2008/01/17 22:53:18 kettenis Exp $	*/
d111 1
a111 1
			free(ca.ca_name, M_DEVBUF);
@


1.6
log
@Print names we get from the prom within double quotes.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.5 2007/09/17 01:33:33 krw Exp $	*/
d157 1
a157 1
	snprintf(bt->name, sizeof(bt->name), "%s", sc->sc_dv.dv_xname);
@


1.5
log
@Only the most obvious bzero() -> M_ZERO changes. No cast changes, no
MALLOC/FREE, etc. Just adding M_ZERO to malloc() and deleting an
immediately adjacent bzero().
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.4 2004/09/27 17:28:03 jason Exp $	*/
d140 1
a140 1
		printf("%s at %s", ca->ca_name, busname);
@


1.4
log
@check malloc return correctly; from Patrick Latifi
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.3 2004/09/24 20:49:57 jason Exp $	*/
d153 1
a153 1
	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT);
a156 1
	bzero(bt, sizeof(*bt));
@


1.3
log
@clean
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.2 2004/09/23 16:26:59 jason Exp $	*/
d124 1
a124 1
	if (buf == NULL)
@


1.2
log
@- fix the bus_map functions (get the parent node right)
- remove a bunch of debugging goop
@
text
@d1 1
a1 1
/*	$OpenBSD: central.c,v 1.1 2004/09/22 21:31:51 jason Exp $	*/
d196 1
a210 1

@


1.1
log
@driver for the "central" controller on the E4500 (and others) [fhc and others to follow]
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d196 1
a196 1
		return ((*t->parent->sparc_bus_map)(t, t0, paddr,
@

