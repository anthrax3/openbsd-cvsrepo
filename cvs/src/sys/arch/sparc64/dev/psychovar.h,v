head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.40
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.38
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.34
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.30
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.32
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.24
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.28
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.26
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.22
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.20
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.18
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2008.05.24.23.31.37;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.16.06.59.12;	author henric;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.31.18.27.26;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.29.02.47.58;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.22.12.05.10;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.03.28.11.23.51;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.03.27.23.42.35;	author niklas;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	;

1.2.6.1
date	2002.01.31.22.55.23;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Found some documentation that suggests that CMU-CH doesn't have an IOMMU and
streaming cache, so don't try to initialize it.
@
text
@/*	$OpenBSD: psychovar.h,v 1.6 2003/05/16 06:59:12 henric Exp $	*/
/*	$NetBSD: psychovar.h,v 1.6 2001/07/20 00:07:13 eeh Exp $	*/

/*
 * Copyright (c) 1999, 2000 Matthew R. Green
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _SPARC64_DEV_PSYCHOVAR_H_
#define _SPARC64_DEV_PSYCHOVAR_H_

/* per real PCI bus info */
struct psycho_softc;

struct psycho_pbm {
	/* link to mum */
	struct psycho_softc		*pp_sc;

	/*
	 * note that the sabre really only has one ranges property,
	 * used for both simba a and simba b (but the ranges for
	 * real psychos are the same for PCI A and PCI B anyway).
	 */
	struct psycho_registers		*pp_regs;
	struct psycho_ranges		*pp_range;

	/* counts of above */
	int				pp_nregs;
	int				pp_nrange;
	int				pp_nintmap;

	/* PCI Bus Module A or PCI Bus Module B */
	int				pp_id;
#define PSYCHO_PBM_UNKNOWN	0
#define PSYCHO_PBM_A		1
#define PSYCHO_PBM_B		2

	/* chipset tag for this instance */
	pci_chipset_tag_t		pp_pc;

	/* our tags */
	bus_space_tag_t			pp_memt;
	bus_space_tag_t			pp_iot;
	bus_dma_tag_t			pp_dmat;
	int				pp_bus;
	int				pp_flags;

	/* and pointers into the psycho regs for our bits */
	bus_space_handle_t		pp_pcictl;
	struct strbuf_ctl		pp_sb;
	/* area we can use for flushing our streaming buffer */
	char				pp_flush[0x80];
};

/*
 * per-PCI bus on mainbus softc structure; one for sabre, or two
 * per pair of psycho's.
 */
struct psycho_softc {
	struct	device			sc_dev;

	/*
	 * one sabre has two simba's.  psycho's are separately attached,
	 * with the `other' psycho_pbm allocated at the first's attach.
	 */
	struct psycho_pbm		*__sc_psycho_this;
	struct psycho_pbm		*__sc_psycho_other;
#define	sc_psycho_this	__sc_psycho_this
#define	sc_psycho_other	__sc_psycho_other

	/*
	 * PSYCHO register.  we record the base physical address of these 
	 * also as it is the base of the entire PSYCHO
	 */
	bus_space_handle_t		sc_regsh;
	bus_space_handle_t		sc_pcictl;
	paddr_t				sc_basepaddr;

	/* Interrupt Group Number for this device */
	int				sc_ign;

	/* our tags (from parent) */
	bus_space_tag_t			sc_bustag;
	bus_dma_tag_t			sc_dmatag;	

	/* config space */
	bus_space_tag_t			sc_configtag;
	bus_space_handle_t		sc_configaddr;

	int				sc_clockfreq;
	int				sc_node;	/* prom node */
	int				sc_mode;	/* (whatareya?) */
#define	PSYCHO_MODE_SABRE	1	/* i'm a sabre (yob) */
#define	PSYCHO_MODE_PSYCHO	2	/* i'm a psycho (w*nker) */
#define	PSYCHO_MODE_CMU_CH	3	/* i'm a CMU-CH (castrate) */

	struct iommu_state		*sc_is;
};

/* config space is per-psycho.  mem/io/dma are per-pci bus */
bus_dma_tag_t psycho_alloc_dma_tag(struct psycho_pbm *);

bus_space_tag_t psycho_alloc_mem_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_io_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_config_tag(struct psycho_pbm *);

/* uperf attachment to psycho's */
struct uperf_psycho_attach_args {
	char *upaa_name;
	struct perfmon *upaa_regs;
};

#define psycho_psychoreg_read(sc, reg)				\
	bus_space_read_8((sc)->sc_bustag, (sc)->sc_regsh,	\
	    offsetof(struct psychoreg, reg))

#define psycho_psychoreg_write(sc, reg, v)			\
	bus_space_write_8((sc)->sc_bustag, (sc)->sc_regsh,	\
	    offsetof(struct psychoreg, reg), (v))

#define psycho_psychoreg_vaddr(sc, reg)				\
        (bus_space_vaddr((sc)->sc_bustag, (sc)->sc_regsh) +	\
                offsetof(struct psychoreg, reg))

#define psycho_pcictl_read(sc, reg)				\
	bus_space_read_8((sc)->sc_bustag, (sc)->sc_pcictl,	\
	     offsetof(struct pci_ctl, reg))

#define psycho_pcictl_write(sc, reg, v)	\
	bus_space_write_8((sc)->sc_bustag, (sc)->sc_pcictl,	\
	    offsetof(struct pci_ctl, reg), (v))

#endif /* _SPARC64_DEV_PSYCHOVAR_H_ */
@


1.6
log
@The sparc64 proms do not map all interrupt vectors.  Instead of
trying to use the interrupt pin (or is it that the PCI
function?) as the interrupt vector, this computes the vector
from the PCI bus, slot, and pin.  This will only change mappings
on psycho-based machines (*not* sabre, i.e., IIi/e) and only for
those vectors reported as nonsense INRs (INO 0-3).

This should fix the mapping of non-bridge expansion cards on U60
and E450, and other psycho boxen.  U30 seems to do its own
thing.
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.5 2003/02/17 01:29:20 henric Exp $	*/
d118 1
@


1.5
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.4 2002/03/14 01:26:44 millert Exp $	*/
d54 6
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.3 2002/01/31 18:27:26 jason Exp $	*/
d66 4
a69 1
	struct pci_ctl			*pp_pcictl;
d92 2
a93 1
	struct psychoreg		*sc_regs;
a117 1
bus_space_tag_t psycho_alloc_bus_tag(struct psycho_pbm *, int);
d119 3
a121 3
#define psycho_alloc_config_tag(pp) psycho_alloc_bus_tag((pp), PCI_CONFIG_BUS_SPACE)
#define psycho_alloc_mem_tag(pp) psycho_alloc_bus_tag((pp), PCI_MEMORY_BUS_SPACE)
#define psycho_alloc_io_tag(pp) psycho_alloc_bus_tag((pp), PCI_IO_BUS_SPACE)
d128 20
@


1.3
log
@Don't need uperf_psychovar.h to define one structure, put it in psychovar.h
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.2 2001/08/29 02:47:58 jason Exp $	*/
d113 2
a114 2
bus_dma_tag_t psycho_alloc_dma_tag __P((struct psycho_pbm *));
bus_space_tag_t psycho_alloc_bus_tag __P((struct psycho_pbm *, int));
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d119 6
@


1.2.6.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.3 2002/01/31 18:27:26 jason Exp $	*/
a118 6

/* uperf attachment to psycho's */
struct uperf_psycho_attach_args {
	char *upaa_name;
	struct perfmon *upaa_regs;
};
@


1.2.6.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.2.6.1 2002/01/31 22:55:23 niklas Exp $	*/
d113 2
a114 2
bus_dma_tag_t psycho_alloc_dma_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_bus_tag(struct psycho_pbm *, int);
@


1.2.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a54 6
	/* PCI Bus Module A or PCI Bus Module B */
	int				pp_id;
#define PSYCHO_PBM_UNKNOWN	0
#define PSYCHO_PBM_A		1
#define PSYCHO_PBM_B		2

d66 1
a66 4
	bus_space_handle_t		pp_pcictl;
	struct strbuf_ctl		pp_sb;
	/* area we can use for flushing our streaming buffer */
	char				pp_flush[0x80];
d89 1
a89 2
	bus_space_handle_t		sc_regsh;
	bus_space_handle_t		sc_pcictl;
d114 1
d116 3
a118 3
bus_space_tag_t psycho_alloc_mem_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_io_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_config_tag(struct psycho_pbm *);
a124 20

#define psycho_psychoreg_read(sc, reg)				\
	bus_space_read_8((sc)->sc_bustag, (sc)->sc_regsh,	\
	    offsetof(struct psychoreg, reg))

#define psycho_psychoreg_write(sc, reg, v)			\
	bus_space_write_8((sc)->sc_bustag, (sc)->sc_regsh,	\
	    offsetof(struct psychoreg, reg), (v))

#define psycho_psychoreg_vaddr(sc, reg)				\
        (bus_space_vaddr((sc)->sc_bustag, (sc)->sc_regsh) +	\
                offsetof(struct psychoreg, reg))

#define psycho_pcictl_read(sc, reg)				\
	bus_space_read_8((sc)->sc_bustag, (sc)->sc_pcictl,	\
	     offsetof(struct pci_ctl, reg))

#define psycho_pcictl_write(sc, reg, v)	\
	bus_space_write_8((sc)->sc_bustag, (sc)->sc_pcictl,	\
	    offsetof(struct pci_ctl, reg), (v))
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Merge in trunk
@
text
@a119 6
/* uperf attachment to psycho's */
struct uperf_psycho_attach_args {
	char *upaa_name;
	struct perfmon *upaa_regs;
};

@


1.2.4.3
log
@Merge in -current from about a week ago
@
text
@d113 2
a114 2
bus_dma_tag_t psycho_alloc_dma_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_bus_tag(struct psycho_pbm *, int);
@


1.2.4.4
log
@Sync the SMP branch with 3.3
@
text
@d66 1
a66 4
	bus_space_handle_t		pp_pcictl;
	struct strbuf_ctl		pp_sb;
	/* area we can use for flushing our streaming buffer */
	char				pp_flush[0x80];
d89 1
a89 2
	bus_space_handle_t		sc_regsh;
	bus_space_handle_t		sc_pcictl;
d114 1
d116 3
a118 3
bus_space_tag_t psycho_alloc_mem_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_io_tag(struct psycho_pbm *);
bus_space_tag_t psycho_alloc_config_tag(struct psycho_pbm *);
a124 20

#define psycho_psychoreg_read(sc, reg)				\
	bus_space_read_8((sc)->sc_bustag, (sc)->sc_regsh,	\
	    offsetof(struct psychoreg, reg))

#define psycho_psychoreg_write(sc, reg, v)			\
	bus_space_write_8((sc)->sc_bustag, (sc)->sc_regsh,	\
	    offsetof(struct psychoreg, reg), (v))

#define psycho_psychoreg_vaddr(sc, reg)				\
        (bus_space_vaddr((sc)->sc_bustag, (sc)->sc_regsh) +	\
                offsetof(struct psychoreg, reg))

#define psycho_pcictl_read(sc, reg)				\
	bus_space_read_8((sc)->sc_bustag, (sc)->sc_pcictl,	\
	     offsetof(struct pci_ctl, reg))

#define psycho_pcictl_write(sc, reg, v)	\
	bus_space_write_8((sc)->sc_bustag, (sc)->sc_pcictl,	\
	    offsetof(struct pci_ctl, reg), (v))
@


1.2.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: psychovar.h,v 1.2.4.4 2003/03/27 23:42:35 niklas Exp $	*/
a53 6

	/* PCI Bus Module A or PCI Bus Module B */
	int				pp_id;
#define PSYCHO_PBM_UNKNOWN	0
#define PSYCHO_PBM_A		1
#define PSYCHO_PBM_B		2
@


1.1
log
@psycho -> the pci host bridge on Ultra 5s.
From NetBSD.
@
text
@d1 1
@

