head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.14
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2014.07.11.08.18.31;	author guenther;	state Exp;
branches;
next	1.9;
commitid	zJyOCNTjgsYVGLiw;

1.9
date	2011.06.24.19.47.49;	author naddy;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.10.12.52.39;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.07.13.01.39;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.16.18.33.42;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.15.20.57.32;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.20.22.00.01;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.24.18.30.45;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.09.20.03.02;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.09.19.59.06;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.10
log
@It's init as a process that's special, not init's original thread.
Remember initprocess instead of initproc.

ok matthew@@ blambert@@
@
text
@/*	$OpenBSD: rtc.c,v 1.9 2011/06/24 19:47:49 naddy Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1994 Gordon W. Ross
 * Copyright (c) 1993 Adam Glass
 * Copyright (c) 1996 Paul Kranenburg
 * Copyright (c) 1996
 * 	The President and Fellows of Harvard College. All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by Harvard University.
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 *	This product includes software developed by Paul Kranenburg.
 *	This product includes software developed by Harvard University.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Driver for rtc device on Blade 1000, Fire V210, etc.
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/systm.h>

#include <machine/bus.h>
#include <machine/autoconf.h>

#include <dev/clock_subr.h>
#include <dev/ic/mc146818reg.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

/*
 * Register definitions for the Texas Instruments bq4802.
 */

#define BQ4802_SEC		0x00	/* Seconds. */
#define BQ4802_MIN		0x02	/* Minutes. */
#define BQ4802_HOUR		0x04	/* Hours. */
#define BQ4802_DAY		0x06	/* Day (01-31). */
#define BQ4802_DOW		0x08	/* Day of week (01-07). */
#define BQ4802_MONTH		0x09	/* Month (01-12). */
#define BQ4802_YEAR		0x0a	/* Year (00-99). */
#define BQ4802_CENTURY		0x0f	/* Century (00-99). */

#define BQ4802_CTRL		0x0e	/* Control. */
#define   BQ4802_24HR		0x02	/* 24-hour mode. */
#define   BQ4802_UTI		0x08	/* Update transfer inhibit. */

extern todr_chip_handle_t todr_handle;

struct rtc_softc {
	struct device		sc_dv;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	struct intrhand		*sc_ih;
};

int	rtc_match(struct device *, void *, void *);
void	rtc_attach(struct device *, struct device *, void *);

struct cfattach rtc_ca = {
	sizeof(struct rtc_softc), rtc_match, rtc_attach
};

struct cfdriver rtc_cd = {
	NULL, "rtc", DV_DULL
};

int rtc_intr(void *arg);

u_int8_t rtc_read_reg(struct rtc_softc *, bus_size_t);
void rtc_write_reg(struct rtc_softc *sc, bus_size_t, u_int8_t);

int rtc_gettime(todr_chip_handle_t, struct timeval *);
int rtc_settime(todr_chip_handle_t, struct timeval *);
int rtc_bq4802_gettime(todr_chip_handle_t, struct timeval *);
int rtc_bq4802_settime(todr_chip_handle_t, struct timeval *);
int rtc_getcal(todr_chip_handle_t, int *);
int rtc_setcal(todr_chip_handle_t, int);

int
rtc_match(struct device *parent, void *cf, void *aux)
{
	struct ebus_attach_args *ea = aux;

	if (strcmp("rtc", ea->ea_name) == 0)
		return (1);
	return (0);
}

void
rtc_attach(struct device *parent, struct device *self, void *aux)
{
	struct rtc_softc *sc = (void *)self;
	struct ebus_attach_args *ea = aux;
	todr_chip_handle_t handle;
	char *model;
	u_int8_t csr;

	if (ebus_bus_map(ea->ea_iotag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_iotag;
	} else if (ebus_bus_map(ea->ea_memtag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_memtag;
	} else {
		printf("%s: can't map register\n", self->dv_xname);
		return;
	}

	model = getpropstring(ea->ea_node, "model");
	if (*model == '\0')
		model = getpropstring(ea->ea_node, "compatible");
	printf(": %s\n", *model != '\0' ? model : "unknown");

	/* Setup our todr_handle */
	handle = malloc(sizeof(struct todr_chip_handle), M_DEVBUF, M_NOWAIT);
	if (handle == NULL)
		panic("couldn't allocate todr_handle");
	handle->cookie = sc;
	handle->todr_gettime = rtc_gettime;
	handle->todr_settime = rtc_settime;
	handle->todr_getcal = rtc_getcal;
	handle->todr_setcal = rtc_setcal;

	handle->bus_cookie = NULL;
	handle->todr_setwen = NULL;
	todr_handle = handle;

	/* The bq4802 is not compatible with the mc146818. */
	if (strcmp(model, "bq4802") == 0) {
		handle->todr_gettime = rtc_bq4802_gettime;
		handle->todr_settime = rtc_bq4802_settime;

		/* Turn on 24-hour mode. */
		csr = bus_space_read_1(sc->sc_iot, sc->sc_ioh, BQ4802_CTRL);
		csr |= BQ4802_24HR;
		bus_space_write_1(sc->sc_iot, sc->sc_ioh, BQ4802_CTRL, csr);
		return;
	}

	/* 
	 * Turn interrupts off, just in case. (Although they shouldn't
	 * be wired to an interrupt controller on sparcs).
	 */
	rtc_write_reg(sc, MC_REGB, MC_REGB_BINARY | MC_REGB_24HR);

	/*
	 * On ds1287 models (which really are ns87317 chips), the
	 * interrupt is wired to the powerbutton.
	 */
	if (strcmp(model, "ds1287") == 0 && ea->ea_nintrs > 0) {
		sc->sc_ih = bus_intr_establish(sc->sc_iot, ea->ea_intrs[0],
		    IPL_BIO, 0, rtc_intr, sc, self->dv_xname);
		if (sc->sc_ih == NULL) {
			printf("%s: can't establish interrupt\n",
			    self->dv_xname);
		}
	}
}

int
rtc_intr(void *arg)
{
	extern int allowpowerdown;

	if (allowpowerdown == 1) {
		allowpowerdown = 0;
		prsignal(initprocess, SIGUSR2);
	}
	return (1);
}

/*
 * Register access is indirect, through an address and data port.
 */

#define	RTC_ADDR	0
#define	RTC_DATA	1

u_int8_t 
rtc_read_reg(struct rtc_softc *sc, bus_size_t reg)
{
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, RTC_ADDR, reg);
	return (bus_space_read_1(sc->sc_iot, sc->sc_ioh, RTC_DATA));
}

void 
rtc_write_reg(struct rtc_softc *sc, bus_size_t reg, u_int8_t val)
{
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, RTC_ADDR, reg);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, RTC_DATA, val);
}

/*
 * RTC todr routines.
 */

/*
 * Get time-of-day and convert to a `struct timeval'
 * Return 0 on success; an error number otherwise.
 */
int
rtc_gettime(todr_chip_handle_t handle, struct timeval *tv)
{
	struct rtc_softc *sc = handle->cookie;
	struct clock_ymdhms dt;
	int year;
	u_int8_t csr;

	/* Stop updates. */
	csr = rtc_read_reg(sc, MC_REGB);
	csr |= MC_REGB_SET;
	rtc_write_reg(sc, MC_REGB, csr);

	/* Read time */
	dt.dt_sec = rtc_read_reg(sc, MC_SEC);
	dt.dt_min = rtc_read_reg(sc, MC_MIN);
	dt.dt_hour = rtc_read_reg(sc, MC_HOUR);
	dt.dt_day = rtc_read_reg(sc, MC_DOM);
	dt.dt_wday = rtc_read_reg(sc, MC_DOW);
	dt.dt_mon = rtc_read_reg(sc, MC_MONTH);
	year = rtc_read_reg(sc, MC_YEAR);

	if ((year += 1900) < POSIX_BASE_YEAR)
		year += 100;

	dt.dt_year = year;

	/* time wears on */
	csr = rtc_read_reg(sc, MC_REGB);
	csr &= ~MC_REGB_SET;
	rtc_write_reg(sc, MC_REGB, csr);

	/* simple sanity checks */
	if (dt.dt_mon > 12 || dt.dt_day > 31 ||
	    dt.dt_hour >= 24 || dt.dt_min >= 60 || dt.dt_sec >= 60)
		return (1);

	tv->tv_sec = clock_ymdhms_to_secs(&dt);
	tv->tv_usec = 0;
	return (0);
}

/*
 * Set the time-of-day clock based on the value of the `struct timeval' arg.
 * Return 0 on success; an error number otherwise.
 */
int
rtc_settime(todr_chip_handle_t handle, struct timeval *tv)
{
	struct rtc_softc *sc = handle->cookie;
	struct clock_ymdhms dt;
	u_int8_t csr;
	int year;

	/* Note: we ignore `tv_usec' */
	clock_secs_to_ymdhms(tv->tv_sec, &dt);

	year = dt.dt_year % 100;

	/* enable write */
	csr = rtc_read_reg(sc, MC_REGB);
	csr |= MC_REGB_SET;
	rtc_write_reg(sc, MC_REGB, csr);

	rtc_write_reg(sc, MC_SEC, dt.dt_sec);
	rtc_write_reg(sc, MC_MIN, dt.dt_min);
	rtc_write_reg(sc, MC_HOUR, dt.dt_hour);
	rtc_write_reg(sc, MC_DOW, dt.dt_wday);
	rtc_write_reg(sc, MC_DOM, dt.dt_day);
	rtc_write_reg(sc, MC_MONTH, dt.dt_mon);
	rtc_write_reg(sc, MC_YEAR, year);

	/* load them up */
	csr = rtc_read_reg(sc, MC_REGB);
	csr &= ~MC_REGB_SET;
	rtc_write_reg(sc, MC_REGB, csr);
	return (0);
}

/*
 * Get time-of-day and convert to a `struct timeval'
 * Return 0 on success; an error number otherwise.
 */
int
rtc_bq4802_gettime(todr_chip_handle_t handle, struct timeval *tv)
{
	struct rtc_softc *sc = handle->cookie;
	struct clock_ymdhms dt;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	u_int8_t csr;

	/* Stop updates. */
	csr = bus_space_read_1(iot, ioh, BQ4802_CTRL);
	csr |= BQ4802_UTI;
	bus_space_write_1(iot, ioh, BQ4802_CTRL, csr);

	/* Read time */
	dt.dt_sec = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_SEC));
	dt.dt_min = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_MIN));
	dt.dt_hour = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_HOUR)); 
	dt.dt_day = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_DAY));
	dt.dt_wday = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_DOW));
	dt.dt_mon = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_MONTH));
	dt.dt_year = FROMBCD(bus_space_read_1(iot, ioh, BQ4802_YEAR)) +
	    FROMBCD(bus_space_read_1(iot, ioh, BQ4802_CENTURY)) * 100;

	/* time wears on */
	csr = bus_space_read_1(iot, ioh, BQ4802_CTRL);
	csr &= ~BQ4802_UTI;
	bus_space_write_1(iot, ioh, BQ4802_CTRL, csr);

	/* simple sanity checks */
	if (dt.dt_mon > 12 || dt.dt_day > 31 ||
	    dt.dt_hour >= 24 || dt.dt_min >= 60 || dt.dt_sec >= 60)
		return (1);

	tv->tv_sec = clock_ymdhms_to_secs(&dt);
	tv->tv_usec = 0;
	return (0);
}

/*
 * Set the time-of-day clock based on the value of the `struct timeval' arg.
 * Return 0 on success; an error number otherwise.
 */
int
rtc_bq4802_settime(todr_chip_handle_t handle, struct timeval *tv)
{
	struct rtc_softc *sc = handle->cookie;
	struct clock_ymdhms dt;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	u_int8_t csr;

	/* Note: we ignore `tv_usec' */
	clock_secs_to_ymdhms(tv->tv_sec, &dt);

	/* enable write */
	csr = bus_space_read_1(iot, ioh, BQ4802_CTRL);
	csr |= BQ4802_UTI;
	bus_space_write_1(iot, ioh, BQ4802_CTRL, csr);

	bus_space_write_1(iot, ioh, BQ4802_SEC, TOBCD(dt.dt_sec));
	bus_space_write_1(iot, ioh, BQ4802_MIN, TOBCD(dt.dt_min));
	bus_space_write_1(iot, ioh, BQ4802_HOUR, TOBCD(dt.dt_hour));
	bus_space_write_1(iot, ioh, BQ4802_DOW, TOBCD(dt.dt_wday));
	bus_space_write_1(iot, ioh, BQ4802_DAY, TOBCD(dt.dt_day));
	bus_space_write_1(iot, ioh, BQ4802_MONTH, TOBCD(dt.dt_mon));
	bus_space_write_1(iot, ioh, BQ4802_YEAR, TOBCD(dt.dt_year % 100));
	bus_space_write_1(iot, ioh, BQ4802_CENTURY, TOBCD(dt.dt_year / 100));

	/* load them up */
	csr = bus_space_read_1(iot, ioh, BQ4802_CTRL);
	csr &= ~BQ4802_UTI;
	bus_space_write_1(iot, ioh, BQ4802_CTRL, csr);
	return (0);
}

int
rtc_getcal(todr_chip_handle_t handle, int *vp)
{
	return (EOPNOTSUPP);
}

int
rtc_setcal(todr_chip_handle_t handle, int v)
{
	return (EOPNOTSUPP);
}
@


1.9
log
@machdep.kbdreset enables a shutdown by Ctrl-Alt-Del on amd64 and
i386.  Stop abusing it on other archs for controling a shutdown by
pressing the soft power button:

* Add a MI sysctl hw.allowpowerdown; if set to 1 (the default) it
  allows a power button shutdown.
* Make acpi(4)/acpibtn(4) honor hw.allowpowerdown.
* Switch the various power button intercepts on landisk, sgi, sparc64
  and zaurus over to hw.allowpowerdown.
* Garbage collect the machdep.kbdreset sysctl on all archs other than
  amd64 and i386.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.8 2010/04/10 12:52:39 kettenis Exp $	*/
d215 1
a215 1
		psignal(initproc, SIGUSR2);
@


1.8
log
@The statement c != '\0' != 0 doesn't make an awful lot of sense, so drop the
!= 0 bit.  Makes GCC 4.2.1 happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.7 2009/01/07 13:01:39 kettenis Exp $	*/
d211 1
a211 1
	extern int kbd_reset;
d213 2
a214 2
	if (kbd_reset == 1) {
		kbd_reset = 0;
@


1.7
log
@Fix typo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.6 2008/04/16 18:33:42 kettenis Exp $	*/
d160 1
a160 1
	printf(": %s\n", *model != '\0' != 0 ? model : "unknown");
@


1.6
log
@Turns out getpropstring() returns an empty string if a property is missing
instead of NULL.  Makes rtc(4) really work on the u25.

tested by mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.5 2008/04/15 20:57:32 kettenis Exp $	*/
d202 1
a202 1
			printf("%s: can't establush interrupt\n",
@


1.5
log
@Add support for the Texas Instruments bq4802 real-time clock found on the
Ultra 25 and Ultra 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.4 2008/03/20 22:00:01 kettenis Exp $	*/
d158 1
a158 1
	if (model == NULL)
d160 1
a160 1
	printf(": %s\n", model ? model : "unknown");
@


1.4
log
@Fix whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.3 2007/04/24 18:30:45 kettenis Exp $	*/
d76 17
d120 2
d142 1
a157 1
#ifdef DIAGNOSTIC
d159 2
a160 3
		panic("rtc_attach: no model property");
#endif
	printf(": %s\n", model);
d176 12
d325 80
@


1.3
log
@Tell init(8) to power down machine instead of just halting it.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.2 2007/04/09 20:03:02 kettenis Exp $	*/
d168 1
a168 1
	if(strcmp(model, "ds1287") == 0 && ea->ea_nintrs > 0) {
@


1.2
log
@Unbreak the tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc.c,v 1.1 2007/04/09 19:59:06 kettenis Exp $	*/
d185 1
a185 1
		psignal(initproc, SIGUSR1);
@


1.1
log
@Seperate rtc(4) code out into its own file.  Add support for catching the
power button interrupts on ds1287 models.  The hardware will stil power off
automatically about 20 seconds after the power button is pressed, but we get
a decent chance at doing a clean shutdown before that.

"a good start" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d162 1
a162 2
	rtc_write_reg(sc->sc_iot, sc->sc_ioh,
	    MC_REGB, MC_REGB_BINARY | MC_REGB_24HR);
@

