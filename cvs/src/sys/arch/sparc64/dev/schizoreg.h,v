head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.34
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.36
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.32
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.28
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.30
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.22
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.26
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.24
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.20
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.18
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.16
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.14
	OPENBSD_5_0:1.21.0.12
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.10
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.8
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.4
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.6
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.2
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.2
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.18.0.4
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.2
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	SMP:1.6.0.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	UBC_SYNC_B:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	UBC:1.2.0.2;
locks; strict;
comment	@ * @;


1.21
date	2008.12.16.22.27.34;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.12.13.08.04;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.10.12.53.01;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2007.01.20.16.26.53;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2007.01.14.16.18.56;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.12.21.32.38;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2006.06.02.04.47.05;	author jason;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.02.01.22.03;	author jason;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.01.20.58.19;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.01.19.12.45;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.01.09.07.09;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.01.07.54.10;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.28.22.09.57;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.19.18.28.59;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.20.02.49;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.02.16.44.39;	author jason;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2002.07.24.19.10.54;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.18.16.45.08;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.11.04.40;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.09.00.01.05;	author jason;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.06.08.23.31.30;	author jason;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;

1.6.6.1
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Make the "machine xir" ddb command work on machines with Tomatillo
schizo(4) variants.
@
text
@/*	$OpenBSD: schizoreg.h,v 1.20 2008/07/12 13:08:04 kettenis Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
struct schizo_pbm_regs {
	volatile u_int64_t	_unused1[64];		/* 0x0000 - 0x01ff */
	struct iommureg		iommu;			/* 0x0200 - 0x03ff */
	volatile u_int64_t	_unused2[384];
	volatile u_int64_t	imap[64];
	volatile u_int64_t	_unused3[64];
	volatile u_int64_t	iclr[64];
	volatile u_int64_t	_unused4[320];
	volatile u_int64_t	ctrl;
	volatile u_int64_t	__unused0;
	volatile u_int64_t	afsr;
	volatile u_int64_t	afar;
	volatile u_int64_t	_unused5[252];
	struct iommu_strbuf	strbuf;
	volatile u_int64_t	strbuf_ctxflush;
	volatile u_int64_t	_unused6[4012];
	volatile u_int64_t	iommu_tag;
	volatile u_int64_t	_unused7[15];
	volatile u_int64_t	iommu_data;
	volatile u_int64_t	_unused8[63];
	volatile u_int64_t	istat[2];
	volatile u_int64_t	_unused9[2814];
	volatile u_int64_t	strbuf_ctxmatch;
	volatile u_int64_t	_unused10[122879];
};

struct schizo_regs {
	volatile u_int64_t	_unused0[8];
	volatile u_int64_t	pcia_mem_match;
	volatile u_int64_t	pcia_mem_mask;
	volatile u_int64_t	pcia_io_match;
	volatile u_int64_t	pcia_io_mask;
	volatile u_int64_t	pcib_mem_match;
	volatile u_int64_t	pcib_mem_mask;
	volatile u_int64_t	pcib_io_match;
	volatile u_int64_t	pcib_io_mask;
	volatile u_int64_t	_unused1[8176];

	volatile u_int64_t	control_status;
	volatile u_int64_t	error_control;
	volatile u_int64_t	interrupt_control;
	volatile u_int64_t	safari_errlog;
	volatile u_int64_t	eccctrl;
	volatile u_int64_t	_unused3[1];
	volatile u_int64_t	ue_afsr;
	volatile u_int64_t	ue_afar;
	volatile u_int64_t	ce_afsr;
	volatile u_int64_t	ce_afar;

	volatile u_int64_t	_unused4[253942];
	struct schizo_pbm_regs pbm_a;
	struct schizo_pbm_regs pbm_b;
};

#define	SCZ_PCIA_MEM_MATCH		0x00040
#define	SCZ_PCIA_MEM_MASK		0x00048
#define	SCZ_PCIA_IO_MATCH		0x00050
#define	SCZ_PCIA_IO_MASK		0x00058
#define	SCZ_PCIB_MEM_MATCH		0x00060
#define	SCZ_PCIB_MEM_MASK		0x00068
#define	SCZ_PCIB_IO_MATCH		0x00070
#define	SCZ_PCIB_IO_MASK		0x00078
#define	SCZ_CONTROL_STATUS		0x10000
#define	SCZ_SAFARI_INTCTRL		0x10010
#define	SCZ_SAFARI_ERRLOG		0x10018
#define	SCZ_ECCCTRL			0x10020
#define	SCZ_UE_AFSR			0x10030
#define	SCZ_UE_AFAR			0x10038
#define	SCZ_CE_AFSR			0x10040
#define	SCZ_CE_AFAR			0x10048
#define	TOM_RESET_GEN			0x17010

/* These are relative to the PBM */
#define	SCZ_PCI_IOMMU_CTRL		0x00200
#define	SCZ_PCI_IOMMU_TSBBASE		0x00208
#define	SCZ_PCI_IOMMU_FLUSH		0x00210
#define	SCZ_PCI_IOMMU_CTXFLUSH		0x00218
#define	TOM_PCI_IOMMU_TFAR		0x00220
#define	SCZ_PCI_IMAP_BASE		0x01000
#define	SCZ_PCI_ICLR_BASE		0x01400
#define	SCZ_PCI_INTR_RETRY		0x01a00	/* interrupt retry */
#define	SCZ_PCI_DMA_FLUSH		0x01a08	/* pci consistent dma flush */
#define	SCZ_PCI_CTRL			0x02000
#define	SCZ_PCI_AFSR			0x02010
#define	SCZ_PCI_AFAR			0x02018
#define	SCZ_PCI_DIAG			0x02020
#define	SCZ_PCI_ESTAR			0x02028
#define	SCZ_PCI_STRBUF_CTRL		0x02800
#define	SCZ_PCI_STRBUF_FLUSH		0x02808
#define	SCZ_PCI_STRBUF_FSYNC		0x02810
#define	SCZ_PCI_STRBUF_CTXFLUSH		0x02818
#define	SCZ_PCI_IOMMU_TAG		0x0a580
#define	SCZ_PCI_IOMMU_DATA		0x0a600
#define	SCZ_PCI_STRBUF_CTXMATCH		0x10000

#define	SCZ_ECCCTRL_EE_INTEN		0x8000000000000000UL
#define	SCZ_ECCCTRL_UE_INTEN		0x4000000000000000UL
#define	SCZ_ECCCTRL_CE_INTEN		0x2000000000000000UL

#define	SCZ_UEAFSR_PPIO			0x8000000000000000UL
#define	SCZ_UEAFSR_PDRD			0x4000000000000000UL
#define	SCZ_UEAFSR_PDWR			0x2000000000000000UL
#define	SCZ_UEAFSR_SPIO			0x1000000000000000UL
#define	SCZ_UEAFSR_SDMA			0x0800000000000000UL
#define	SCZ_UEAFSR_ERRPNDG		0x0300000000000000UL
#define	SCZ_UEAFSR_BMSK			0x000003ff00000000UL
#define	SCZ_UEAFSR_QOFF			0x00000000c0000000UL
#define	SCZ_UEAFSR_AID			0x000000001f000000UL
#define	SCZ_UEAFSR_PARTIAL		0x0000000000800000UL
#define	SCZ_UEAFSR_OWNEDIN		0x0000000000400000UL
#define	SCZ_UEAFSR_MTAGSYND		0x00000000000f0000UL
#define	SCZ_UEAFSR_MTAG			0x000000000000e000UL
#define	SCZ_UEAFSR_ECCSYND		0x00000000000001ffUL

#define	SCZ_UEAFAR_PIO			0x0000080000000000UL	/* 0=pio, 1=memory */
#define	SCZ_UEAFAR_PIO_TYPE		0x0000078000000000UL	/* pio type: */
#define	SCZ_UEAFAR_PIO_UPA		0x0000078000000000UL	/*  upa */
#define	SZC_UEAFAR_PIO_SAFARI		0x0000060000000000UL	/*  safari/upa64s */
#define	SCZ_UEAFAR_PIO_NLAS		0x0000058000000000UL	/*  newlink alt space */
#define	SCZ_UEAFAR_PIO_NLS		0x0000050000000000UL	/*  newlink space */
#define	SCZ_UEAFAR_PIO_NLI		0x0000040000000000UL	/*  newlink interface */
#define	SCZ_UEAFAR_PIO_PCIAM		0x0000030000000000UL	/*  pcia: memory */
#define	SCZ_UEAFAR_PIO_PCIAI		0x0000020000000000UL	/*  pcia: interface */
#define	SZC_UEAFAR_PIO_PCIBC		0x0000018000000000UL	/*  pcia: config / i/o */
#define	SZC_UEAFAR_PIO_PCIBM		0x0000010000000000UL	/*  pcib: memory */
#define	SZC_UEAFAR_PIO_PCIBI		0x0000000000000000UL	/*  pcib: interface */
#define	SCZ_UEAFAR_PIO_PCIAC		0x0000038000000000UL	/*  pcib: config / i/o */
#define	SCZ_UEAFAR_MEMADDR		0x000007fffffffff0UL	/* memory address */

#define	SCZ_CEAFSR_PPIO			0x8000000000000000UL
#define	SCZ_CEAFSR_PDRD			0x4000000000000000UL
#define	SCZ_CEAFSR_PDWR			0x2000000000000000UL
#define	SCZ_CEAFSR_SPIO			0x1000000000000000UL
#define	SCZ_CEAFSR_SDMA			0x0800000000000000UL
#define	SCZ_CEAFSR_ERRPNDG		0x0300000000000000UL
#define	SCZ_CEAFSR_BMSK			0x000003ff00000000UL
#define	SCZ_CEAFSR_QOFF			0x00000000c0000000UL
#define	SCZ_CEAFSR_AID			0x000000001f000000UL
#define	SCZ_CEAFSR_PARTIAL		0x0000000000800000UL
#define	SCZ_CEAFSR_OWNEDIN		0x0000000000400000UL
#define	SCZ_CEAFSR_MTAGSYND		0x00000000000f0000UL
#define	SCZ_CEAFSR_MTAG			0x000000000000e000UL
#define	SCZ_CEAFSR_ECCSYND		0x00000000000001ffUL

#define	SCZ_CEAFAR_PIO			0x0000080000000000UL	/* 0=pio, 1=memory */
#define	SCZ_CEAFAR_PIO_TYPE		0x0000078000000000UL	/* pio type: */
#define	SCZ_CEAFAR_PIO_UPA		0x0000078000000000UL	/*  upa */
#define	SZC_CEAFAR_PIO_SAFARI		0x0000060000000000UL	/*  safari/upa64s */
#define	SCZ_CEAFAR_PIO_NLAS		0x0000058000000000UL	/*  newlink alt space */
#define	SCZ_CEAFAR_PIO_NLS		0x0000050000000000UL	/*  newlink space */
#define	SCZ_CEAFAR_PIO_NLI		0x0000040000000000UL	/*  newlink interface */
#define	SCZ_CEAFAR_PIO_PCIAM		0x0000030000000000UL	/*  pcia: memory */
#define	SCZ_CEAFAR_PIO_PCIAI		0x0000020000000000UL	/*  pcia: interface */
#define	SZC_CEAFAR_PIO_PCIBC		0x0000018000000000UL	/*  pcia: config / i/o */
#define	SZC_CEAFAR_PIO_PCIBM		0x0000010000000000UL	/*  pcib: memory */
#define	SZC_CEAFAR_PIO_PCIBI		0x0000000000000000UL	/*  pcib: interface */
#define	SCZ_CEAFAR_PIO_PCIAC		0x0000038000000000UL	/*  pcib: config / i/o */
#define	SCZ_CEAFAR_MEMADDR		0x000007fffffffff0UL	/* memory address */

#define	TOM_RESET_GEN_XIR		0x00000000000000002L

#define	SCZ_PCICTRL_BUS_UNUS		(1UL << 63UL)		/* bus unusable */
#define	TOM_PCICTRL_DTO_ERR		(1UL << 62UL)		/* pci discard timeout */
#define	TOM_PCICTRL_DTO_INT		(1UL << 61UL)		/* discard intr en */
#define	SCZ_PCICTRL_ESLCK		(1UL << 51UL)		/* error slot locked */
#define	SCZ_PCICTRL_ERRSLOT		(7UL << 48UL)		/* error slot */
#define	SCZ_PCICTRL_TTO_ERR		(1UL << 38UL)		/* pci trdy# timeout */
#define	SCZ_PCICTRL_RTRY_ERR		(1UL << 37UL)		/* pci rtry# timeout */
#define	SCZ_PCICTRL_MMU_ERR		(1UL << 36UL)		/* pci mmu error */
#define	SCZ_PCICTRL_SBH_ERR		(1UL << 35UL)		/* pci strm hole */
#define	SCZ_PCICTRL_SERR		(1UL << 34UL)		/* pci serr# sampled */
#define	SCZ_PCICTRL_PCISPD		(1UL << 33UL)		/* speed (0=clk/2,1=clk) */
#define	SCZ_PCICTRL_PTO			(3UL << 24UL)		/* pci timeout interval */
#define	SCZ_PCICTRL_MMU_INT		(1UL << 19UL)		/* mmu intr en */
#define	SCZ_PCICTRL_SBH_INT		(1UL << 18UL)		/* strm byte hole intr en */
#define	SCZ_PCICTRL_EEN			(1UL << 17UL)		/* error intr en */
#define	SCZ_PCICTRL_PARK		(1UL << 16UL)		/* bus parked */
#define	SCZ_PCICTRL_PCIRST		(1UL <<  8UL)		/* pci reset */
#define	SCZ_PCICTRL_ARB			(0x3fUL << 0UL)		/* dma arb enables */
#define SCZ_PCICTRL_BITS "\20\277UNUS\276DTO\275DTO_INT\263ESLCK\246TTO\245RTRY\244MMU\243SBH\242SERR\241SPD\223MMU_INT\222SBH_INT\221EEN\220PARK\210PCIRST"

#define	SCZ_PCIAFSR_PMA			0x8000000000000000UL
#define	SCZ_PCIAFSR_PTA			0x4000000000000000UL
#define	SCZ_PCIAFSR_PRTRY		0x2000000000000000UL
#define	SCZ_PCIAFSR_PPERR		0x1000000000000000UL
#define	SCZ_PCIAFSR_PTTO		0x0800000000000000UL
#define	SCZ_PCIAFSR_PUNUS		0x0400000000000000UL
#define	SCZ_PCIAFSR_SMA			0x0200000000000000UL
#define	SCZ_PCIAFSR_STA			0x0100000000000000UL
#define	SCZ_PCIAFSR_SRTRY		0x0080000000000000UL
#define	SCZ_PCIAFSR_SPERR		0x0040000000000000UL
#define	SCZ_PCIAFSR_STTO		0x0020000000000000UL
#define	SCZ_PCIAFSR_SUNUS		0x0010000000000000UL
#define	SCZ_PCIAFSR_BMSK		0x000003ff00000000UL
#define	SCZ_PCIAFSR_BLK			0x0000000080000000UL
#define	SCZ_PCIAFSR_CFG			0x0000000040000000UL
#define	SCZ_PCIAFSR_MEM			0x0000000020000000UL
#define	SCZ_PCIAFSR_IO			0x0000000010000000UL

#define SCZ_PCIAFSR_BITS "\20\277PMA\276PTA\275PRTRY\274PPERR\273PTTO\272PUNUS\271SMA\270STA\267SRTRY\266SPERR\265STTO\264SUNUS\237BLK\236CFG\235MEM\234IO"

#define	SCZ_PCIDIAG_D_BADECC		(1UL << 10UL)	/* disable bad ecc */
#define	SCZ_PCIDIAG_D_BYPASS		(1UL <<  9UL)	/* disable mmu bypass */
#define	SCZ_PCIDIAG_D_TTO		(1UL <<  8UL)	/* disable trdy# timeout */
#define	SCZ_PCIDIAG_D_RTRYARB		(1UL <<  7UL)	/* disable retry arb */
#define	SCZ_PCIDIAG_D_RETRY		(1UL <<  6UL)	/* disable retry lim */
#define	SCZ_PCIDIAG_D_INTSYNC		(1UL <<  5UL)	/* disable write sync */
#define	SCZ_PCIDIAG_I_DMADPAR		(1UL <<  3UL)	/* invert dma parity */
#define	SCZ_PCIDIAG_I_PIODPAR		(1UL <<  2UL)	/* invert pio data parity */
#define	SCZ_PCIDIAG_I_PIOAPAR		(1UL <<  1UL)	/* invert pio addr parity */

#define	TOM_IOMMU_ERR			(1UL << 24)
#define	TOM_IOMMU_ERR_MASK		(3UL << 25)
#define	TOM_IOMMU_PROT_ERR		(0UL << 25)
#define	TOM_IOMMU_INV_ERR		(1UL << 25)
#define	TOM_IOMMU_TO_ERR		(2UL << 25)
#define	TOM_IOMMU_ECC_ERR		(3UL << 25)
#define	TOM_IOMMU_ILLTSBTBW_ERR		(1UL << 27)
#define	TOM_IOMMU_BADVA_ERR		(1UL << 28)

#define	SCZ_PBM_A_REGS			(0x600000UL - 0x400000UL)
#define	SCZ_PBM_B_REGS			(0x700000UL - 0x400000UL)

#define	SCZ_UE_INO			0x30	/* uncorrectable error */
#define	SCZ_CE_INO			0x31	/* correctable ecc error */
#define	SCZ_PCIERR_A_INO		0x32	/* PCI A bus error */
#define	SCZ_PCIERR_B_INO		0x33	/* PCI B bus error */
#define	SCZ_SERR_INO			0x34	/* safari interface error */

struct schizo_range {
	u_int32_t	cspace;
	u_int32_t	child_hi;
	u_int32_t	child_lo;
	u_int32_t	phys_hi;
	u_int32_t	phys_lo;
	u_int32_t	size_hi;
	u_int32_t	size_lo;
};
@


1.20
log
@Perform IOMMU cache flushes on Oberon.
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.18 2007/01/20 16:26:53 kettenis Exp $	*/
d98 1
d186 2
@


1.19
log
@Add interrupt state diagnostic registers.
@
text
@d30 2
a31 3
	struct iommureg		iommu;			/* 0x0200 - 0x0217 */
	volatile u_int64_t	iommu_ctxflush;		/* 0x0218 - 0x021f */
	volatile u_int64_t	_unused2[444];
@


1.18
log
@Do not panic on non-fatal iommu errors.
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.17 2007/01/14 16:18:56 kettenis Exp $	*/
d48 3
a50 1
	volatile u_int64_t	_unused8[2879];
d52 1
a52 1
	volatile u_int64_t	_unused9[122879];
@


1.17
log
@Add another Tomatillo-specific register.
Fix definition of TOM_PCICTRL_DTO_INT.
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.16 2007/01/12 21:32:38 kettenis Exp $	*/
d234 9
@


1.16
log
@According to the OpenSolaris sources, the DTO bits are really MMU bit.
Add the real DTO bits for Tomatillo.
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.15 2006/06/02 04:47:05 jason Exp $	*/
d103 1
d187 1
a187 1
#define	TOM_PCICTRL_DTO_INT		(1UL << 19UL)		/* discard intr en */
@


1.15
log
@correct bits for bus type in PCIAFSR
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.14 2006/06/02 01:22:03 jason Exp $	*/
d185 2
d191 1
a191 1
#define	SCZ_PCICTRL_DTO_ERR		(1UL << 36UL)		/* pci discard timeout */
d196 1
a196 1
#define	SCZ_PCICTRL_DTO_INT		(1UL << 19UL)		/* discard intr en */
d202 1
a202 1
#define SCZ_PCICTRL_BITS "\20\277UNUS\263ESLCK\246TTO\245RTRY\244DTO\243SBH\242SERR\241SPD\223DTO_INT\222SBH_INT\221EEN\220PARK\210PCIRST"
@


1.14
log
@bits bits bits, who got dat bits
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.13 2006/06/01 20:58:19 jason Exp $	*/
d220 1
a220 1
#define SCZ_PCIAFSR_BITS "\20\277PMA\276PTA\275PRTRY\274PPERR\273PTTO\272PUNUS\271SMA\270STA\267SRTRY\266SPERR\265STTO\264SUNUS\240IO\241MEM\242CFG\243BLK"
@


1.13
log
@do a better job of setting up the PBM.  Doesn't fix the PIO faults we're
seeing, I"m not convinced they're fixable any more.
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.12 2006/06/01 19:12:45 jason Exp $	*/
d220 1
a220 1
#define SCZ_PCIAFSR_BITS "\20\277PMA\276PTA\275PRTRY\274PPERR\273PTTO\272PUNUS\271SMA\270STA\267SRTRY\266SPERR\265STTO\264SUNUS"
@


1.12
log
@- stop using magic constants for the onboard error INOs (one was wrong anyway)
- setup pci error interrupts and do an interpretive dance with the registers
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.11 2006/06/01 09:07:09 jason Exp $	*/
d105 2
d221 10
@


1.11
log
@add bit defns for [UE]FAR
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.10 2006/06/01 07:54:10 jason Exp $	*/
d90 1
d108 2
d182 17
a198 16
#define	SCZ_PCICTRL_BUS_UNUS		(1UL << 63UL)
#define	SCZ_PCICTRL_ESLCK		(1UL << 51UL)
#define	SCZ_PCICTRL_ERRSLOT		(7UL << 48UL)
#define	SCZ_PCICTRL_TTO_ERR		(1UL << 38UL)
#define	SCZ_PCICTRL_RTRY_ERR		(1UL << 37UL)
#define	SCZ_PCICTRL_DTO_ERR		(1UL << 36UL)
#define	SCZ_PCICTRL_SBH_ERR		(1UL << 35UL)
#define	SCZ_PCICTRL_SERR		(1UL << 34UL)
#define	SCZ_PCICTRL_PCISPD		(1UL << 33UL)
#define	SCZ_PCICTRL_PTO			(3UL << 24UL)
#define	SCZ_PCICTRL_DTO_INT		(1UL << 19UL)
#define	SCZ_PCICTRL_SBH_INT		(1UL << 18UL)
#define	SCZ_PCICTRL_EEN			(1UL << 17UL)
#define	SCZ_PCICTRL_PARK		(1UL << 16UL)
#define	SCZ_PCICTRL_PCIRST		(1UL <<  8UL)
#define	SCZ_PCICTRL_ARB			(0x3fUL << 0UL)
d217 2
@


1.10
log
@enable error interrupts and install handlers for same (the handlers don't do much yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.9 2006/05/28 22:09:57 jason Exp $	*/
d134 15
d163 15
@


1.9
log
@- Implement schizo_intr_map (mainly to | in the agentid).
- get correct IGN for intr_establish
all of this is from kettenis and henric, I'm just cleaning it up and committing
the easy bits
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.8 2005/05/19 18:28:59 mickey Exp $	*/
d115 3
a117 3
#define	SCZ_ECCCTRL_EE			0x8000000000000000UL
#define	SCZ_ECCCTRL_UE			0x4000000000000000UL
#define	SCZ_ECCCTRL_CE			0x2000000000000000UL
@


1.8
log
@ __unused is used now
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.7 2003/06/02 20:02:49 jason Exp $	*/
d29 3
a31 3
	volatile u_int64_t	_unused1[64];
	struct iommureg		iommu;
	volatile u_int64_t	iommu_ctxflush;
d65 3
a67 1
	volatile u_int64_t	_unused2[3];
d89 1
@


1.7
log
@nuke terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.6 2002/08/02 16:44:39 jason Exp $	*/
d38 1
a38 1
	volatile u_int64_t	__unused;
@


1.6
log
@registers should be volatile, also add yet more register defns
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.5 2002/07/24 19:10:54 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6.6.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.6 2002/08/02 16:44:39 jason Exp $	*/
d15 5
@


1.5
log
@add support for schizo streaming buffers (per PBM), but leave the buffers disabled for now
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.4 2002/07/18 16:45:08 jason Exp $	*/
d34 22
a55 13
	u_int64_t	_unused1[64];
	struct iommureg	iommu;
	u_int64_t	iommu_ctxflush;
	u_int64_t	_unused2[1212];
	struct iommu_strbuf strbuf;
	u_int64_t	strbuf_ctxflush;
	u_int64_t	_unused3[4012];
	u_int64_t	iommu_tag;
	u_int64_t	_unused4[15];
	u_int64_t	iommu_data;
	u_int64_t	_unused5[2879];
	u_int64_t	strbuf_ctxmatch;
	u_int64_t	_unusedN[122879];
d59 19
a77 19
	u_int64_t	_unused0[8];
	u_int64_t	pcia_mem_match;
	u_int64_t	pcia_mem_mask;
	u_int64_t	pcia_io_match;
	u_int64_t	pcia_io_mask;
	u_int64_t	pcib_mem_match;
	u_int64_t	pcib_mem_mask;
	u_int64_t	pcib_io_match;
	u_int64_t	pcib_io_mask;
	u_int64_t	_unused1[8176];

	u_int64_t	_unused2[3];
	u_int64_t	safari_errlog;
	u_int64_t	eccctrl;
	u_int64_t	_unused3[1];
	u_int64_t	ue_afsr;
	u_int64_t	ue_afar;
	u_int64_t	ce_afsr;
	u_int64_t	ce_afar;
d79 1
a79 1
	u_int64_t	_unused4[253942];
d106 1
d150 35
@


1.4
log
@- Add support for both of the schizo iommu's(There is an iommu per pbm)
- const the cfattach
- clean
- deal with the fact that the register property doesn't reflect the true
length of the register set (grr!)
- move away from home grown read/write_8 and use bus_space where possible
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.3 2002/06/11 11:04:40 jason Exp $	*/
d34 1
a34 1
	u_int64_t	unused1[64];
d37 4
a40 1
	u_int64_t	unused2[5228];
d42 1
a42 1
	u_int64_t	unused3[15];
d44 3
a46 1
	u_int64_t	unusedN[125759];
d90 16
a105 4
#define	SCZ_PCI_IMAP_BASE		0x1000
#define	SCZ_PCI_ICLR_BASE		0x1400
#define	SCZ_PCI_AFSR			0x2010
#define	SCZ_PCI_AFAR			0x2018
@


1.3
log
@More registers
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.2 2002/06/09 00:01:05 jason Exp $	*/
d33 36
@


1.2
log
@more of those crazy registers
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 2
d87 9
@


1.2.2.1
log
@Sync UBC branch to -current
@
text
@@


1.2.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: schizoreg.h,v 1.2.2.1 2002/06/11 03:38:43 art Exp $	*/
a32 50
struct schizo_pbm_regs {
	volatile u_int64_t	_unused1[64];
	struct iommureg		iommu;
	volatile u_int64_t	iommu_ctxflush;
	volatile u_int64_t	_unused2[444];
	volatile u_int64_t	imap[64];
	volatile u_int64_t	_unused3[64];
	volatile u_int64_t	iclr[64];
	volatile u_int64_t	_unused4[320];
	volatile u_int64_t	ctrl;
	volatile u_int64_t	__unused;
	volatile u_int64_t	afsr;
	volatile u_int64_t	afar;
	volatile u_int64_t	_unused5[252];
	struct iommu_strbuf	strbuf;
	volatile u_int64_t	strbuf_ctxflush;
	volatile u_int64_t	_unused6[4012];
	volatile u_int64_t	iommu_tag;
	volatile u_int64_t	_unused7[15];
	volatile u_int64_t	iommu_data;
	volatile u_int64_t	_unused8[2879];
	volatile u_int64_t	strbuf_ctxmatch;
	volatile u_int64_t	_unused9[122879];
};

struct schizo_regs {
	volatile u_int64_t	_unused0[8];
	volatile u_int64_t	pcia_mem_match;
	volatile u_int64_t	pcia_mem_mask;
	volatile u_int64_t	pcia_io_match;
	volatile u_int64_t	pcia_io_mask;
	volatile u_int64_t	pcib_mem_match;
	volatile u_int64_t	pcib_mem_mask;
	volatile u_int64_t	pcib_io_match;
	volatile u_int64_t	pcib_io_mask;
	volatile u_int64_t	_unused1[8176];

	volatile u_int64_t	_unused2[3];
	volatile u_int64_t	safari_errlog;
	volatile u_int64_t	eccctrl;
	volatile u_int64_t	_unused3[1];
	volatile u_int64_t	ue_afsr;
	volatile u_int64_t	ue_afar;
	volatile u_int64_t	ce_afsr;
	volatile u_int64_t	ce_afar;

	volatile u_int64_t	_unused4[253942];
	struct schizo_pbm_regs pbm_a;
	struct schizo_pbm_regs pbm_b;
};
d49 2
a50 17
/* These are relative to the PBM */
#define	SCZ_PCI_IOMMU_CTRL		0x00200
#define	SCZ_PCI_IOMMU_TSBBASE		0x00208
#define	SCZ_PCI_IOMMU_FLUSH		0x00210
#define	SCZ_PCI_IOMMU_CTXFLUSH		0x00218
#define	SCZ_PCI_IMAP_BASE		0x01000
#define	SCZ_PCI_ICLR_BASE		0x01400
#define	SCZ_PCI_CTRL			0x02000
#define	SCZ_PCI_AFSR			0x02010
#define	SCZ_PCI_AFAR			0x02018
#define	SCZ_PCI_STRBUF_CTRL		0x02800
#define	SCZ_PCI_STRBUF_FLUSH		0x02808
#define	SCZ_PCI_STRBUF_FSYNC		0x02810
#define	SCZ_PCI_STRBUF_CTXFLUSH		0x02818
#define	SCZ_PCI_IOMMU_TAG		0x0a580
#define	SCZ_PCI_IOMMU_DATA		0x0a600
#define	SCZ_PCI_STRBUF_CTXMATCH		0x10000
a84 44

#define	SCZ_PCICTRL_BUS_UNUS		(1UL << 63UL)
#define	SCZ_PCICTRL_ESLCK		(1UL << 51UL)
#define	SCZ_PCICTRL_ERRSLOT		(7UL << 48UL)
#define	SCZ_PCICTRL_TTO_ERR		(1UL << 38UL)
#define	SCZ_PCICTRL_RTRY_ERR		(1UL << 37UL)
#define	SCZ_PCICTRL_DTO_ERR		(1UL << 36UL)
#define	SCZ_PCICTRL_SBH_ERR		(1UL << 35UL)
#define	SCZ_PCICTRL_SERR		(1UL << 34UL)
#define	SCZ_PCICTRL_PCISPD		(1UL << 33UL)
#define	SCZ_PCICTRL_PTO			(3UL << 24UL)
#define	SCZ_PCICTRL_DTO_INT		(1UL << 19UL)
#define	SCZ_PCICTRL_SBH_INT		(1UL << 18UL)
#define	SCZ_PCICTRL_EEN			(1UL << 17UL)
#define	SCZ_PCICTRL_PARK		(1UL << 16UL)
#define	SCZ_PCICTRL_PCIRST		(1UL <<  8UL)
#define	SCZ_PCICTRL_ARB			(0x3fUL << 0UL)

#define	SCZ_PCIAFSR_PMA			0x8000000000000000UL
#define	SCZ_PCIAFSR_PTA			0x4000000000000000UL
#define	SCZ_PCIAFSR_PRTRY		0x2000000000000000UL
#define	SCZ_PCIAFSR_PPERR		0x1000000000000000UL
#define	SCZ_PCIAFSR_PTTO		0x0800000000000000UL
#define	SCZ_PCIAFSR_PUNUS		0x0400000000000000UL
#define	SCZ_PCIAFSR_SMA			0x0200000000000000UL
#define	SCZ_PCIAFSR_STA			0x0100000000000000UL
#define	SCZ_PCIAFSR_SRTRY		0x0080000000000000UL
#define	SCZ_PCIAFSR_SPERR		0x0040000000000000UL
#define	SCZ_PCIAFSR_STTO		0x0020000000000000UL
#define	SCZ_PCIAFSR_SUNUS		0x0010000000000000UL
#define	SCZ_PCIAFSR_BMSK		0x000003ff00000000UL
#define	SCZ_PCIAFSR_BLK			0x0000000080000000UL
#define	SCZ_PCIAFSR_CFG			0x0000000040000000UL
#define	SCZ_PCIAFSR_MEM			0x0000000020000000UL
#define	SCZ_PCIAFSR_IO			0x0000000010000000UL

#define	SCZ_PBM_A_REGS			(0x600000UL - 0x400000UL)
#define	SCZ_PBM_B_REGS			(0x700000UL - 0x400000UL)

#define	SCZ_UE_INO			0x30	/* uncorrectable error */
#define	SCZ_CE_INO			0x31	/* correctable ecc error */
#define	SCZ_PCIERR_A_INO		0x32	/* PCI A bus error */
#define	SCZ_PCIERR_B_INO		0x33	/* PCI B bus error */
#define	SCZ_SERR_INO			0x34	/* safari interface error */
@


1.1
log
@Move stuff around like a crazy man... (split into var/reg)
@
text
@d42 43
@

