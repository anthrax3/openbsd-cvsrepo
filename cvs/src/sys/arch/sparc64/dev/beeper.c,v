head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.40
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.42
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.34
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.38
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.36
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.32
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.30
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.28
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.26
	OPENBSD_5_0:1.10.0.24
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.22
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.20
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.16
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.18
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.1.0.6
	UBC_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.03.19.11.34.22;	author mpi;	state Exp;
branches;
next	1.10;
commitid	15xZY6veDWwRM6Iq;

1.10
date	2005.12.20.16.50.33;	author martin;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.16.15.08.50;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.02.49;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.17.01.29.19;	author henric;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.19.20.19.13;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.08.17.49.41;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.23.04.42.35;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.19.04.14.02;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.29.07.16.12;	author jason;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2001.10.31.03.07.57;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2003.03.27.23.42.35;	author niklas;	state Exp;
branches;
next	1.1.4.5;

1.1.4.5
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	1.1.4.6;

1.1.4.6
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.38.42;	author art;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.1.6.3;

1.1.6.3
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Reduces the noise around the global ``ticks'' variable by renaming
all the local ones to ``nticks''.

ok stefan@@, deraadt@@
@
text
@/*	$OpenBSD: beeper.c,v 1.10 2005/12/20 16:50:33 martin Exp $	*/

/*
 * Copyright (c) 2001 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

/*
 * Driver for beeper device on SUNW,Ultra-1-Engine.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include "pckbd.h"
#if NPCKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>
#endif

struct beeper_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	struct timeout		sc_to;
	int 			sc_belltimeout, sc_bellactive;
};

#define	BEEP_REG	0

int	beeper_match(struct device *, void *, void *);
void	beeper_attach(struct device *, struct device *, void *);

struct cfattach beeper_ca = {
	sizeof(struct beeper_softc), beeper_match, beeper_attach
};

struct cfdriver beeper_cd = {
	NULL, "beeper", DV_DULL
};

#if NPCKBD > 0
void beeper_stop(void *);
void beeper_bell(void *, u_int, u_int, u_int, int);
#endif

int
beeper_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct ebus_attach_args *ea = aux;

	if (strcmp(ea->ea_name, "beeper") == 0)
		return (1);
	return (0);
}

void
beeper_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct beeper_softc *sc = (void *)self;
	struct ebus_attach_args *ea = aux;

	sc->sc_iot = ea->ea_memtag;

	/* Use prom address if available, otherwise map it. */
	if (ea->ea_nvaddrs) {
		if (bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_ioh)) {
			printf(": can't map PROM register space\n");
			return;
		}
	} else if (ebus_bus_map(sc->sc_iot, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size, 0, 0,
	    &sc->sc_ioh) != 0) {
		printf(": can't map register space\n");
                return;
	}

#if NPCKBD > 0
	timeout_set(&sc->sc_to, beeper_stop, sc);
	pckbd_hookup_bell(beeper_bell, sc);
#endif
	printf("\n");
}

#if NPCKBD > 0
void
beeper_stop(vsc)
	void *vsc;
{
	struct beeper_softc *sc = vsc;
	int s;

	s = spltty();
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 0);
	sc->sc_bellactive = 0;
	sc->sc_belltimeout = 0;
	splx(s);
}

void
beeper_bell(vsc, pitch, period, volume, poll)
	void *vsc;
	u_int pitch, period, volume;
	int poll;
{
	struct beeper_softc *sc = vsc;
	int s, nticks;

	nticks = (period * hz) / 1000;
	if (nticks <= 0)
		nticks = 1;

	s = spltty();
	if (sc->sc_bellactive) {
		if (sc->sc_belltimeout == 0)
			timeout_del(&sc->sc_to);
	}
	if (pitch == 0 || period == 0) {
		beeper_stop(sc);
		splx(s);
		return;
	}
	if (!sc->sc_bellactive) {
		sc->sc_bellactive = 1;
		sc->sc_belltimeout = 1;
		bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 1);
		timeout_add(&sc->sc_to, nticks);
	}
	splx(s);
}
#endif /* NPCKBD > 0 */
@


1.10
log
@using the right ebus bus space makes this beep again
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.9 2003/12/16 15:08:50 jason Exp $	*/
d151 1
a151 1
	int s, ticks;
d153 3
a155 3
	ticks = (period * hz) / 1000;
	if (ticks <= 0)
		ticks = 1;
d171 1
a171 1
		timeout_add(&sc->sc_to, ticks);
@


1.9
log
@Don't need linear mappings here either
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.8 2003/06/02 20:02:49 jason Exp $	*/
d106 1
a106 1
	sc->sc_iot = ea->ea_iotag;
@


1.8
log
@nuke terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.7 2003/02/17 01:29:19 henric Exp $	*/
d116 2
a117 2
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ioh) != 0) {
@


1.7
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.6 2002/08/19 20:19:13 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6
log
@KNF (4 char continuations)
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.5 2002/04/08 17:49:41 jason Exp $	*/
d111 1
a111 1
	sc->sc_iot = ea->ea_bustag;
d114 7
a120 3
	if (ea->ea_nvaddrs)
		sc->sc_ioh = (bus_space_handle_t)ea->ea_vaddrs[0];
	else if (ebus_bus_map(sc->sc_iot, 0,
@


1.5
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.4 2002/03/14 01:26:44 millert Exp $	*/
d117 2
a118 4
			      EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
			      ea->ea_regs[0].size,
			      BUS_SPACE_MAP_LINEAR,
			      0, &sc->sc_ioh) != 0) {
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.3 2002/02/23 04:42:35 jason Exp $	*/
d32 5
@


1.3
log
@make this compile w/out pckbd (thanks marco for pointing this out)
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.2 2002/02/19 04:14:02 jason Exp $	*/
d69 2
a70 2
int	beeper_match __P((struct device *, void *, void *));
void	beeper_attach __P((struct device *, struct device *, void *));
@


1.2
log
@If there are pckbd's, register ourselves to handle beeps... AXi's can now
squawk with the best of 'em.
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.1 2001/09/29 07:16:12 jason Exp $	*/
d44 1
a106 1
	timeout_set(&sc->sc_to, beeper_stop, sc);
d121 1
@


1.1
log
@from the "Ok, so I couldn't sleep" department: minimal driver for the beeper at ebus device
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
d52 6
d62 2
d79 5
d106 1
d120 15
a134 2
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 1);
	DELAY(0xc8 * 1000);
d136 35
a170 1
	printf("\n");
d172 1
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.1 2001/09/29 07:16:12 jason Exp $	*/
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a40 1
#include <sys/kernel.h>
a42 1
#include <sys/timeout.h>
a50 6
#include "pckbd.h"
#if NPCKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>
#endif

a54 2
	struct timeout		sc_to;
	int 			sc_belltimeout, sc_bellactive;
d59 2
a60 2
int	beeper_match(struct device *, void *, void *);
void	beeper_attach(struct device *, struct device *, void *);
a69 5
#if NPCKBD > 0
void beeper_stop(void *);
void beeper_bell(void *, u_int, u_int, u_int, int);
#endif

d105 3
a107 4
#if NPCKBD > 0
	timeout_set(&sc->sc_to, beeper_stop, sc);
	pckbd_hookup_bell(beeper_bell, sc);
#endif
a109 48

#if NPCKBD > 0
void
beeper_stop(vsc)
	void *vsc;
{
	struct beeper_softc *sc = vsc;
	int s;

	s = spltty();
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 0);
	sc->sc_bellactive = 0;
	sc->sc_belltimeout = 0;
	splx(s);
}

void
beeper_bell(vsc, pitch, period, volume, poll)
	void *vsc;
	u_int pitch, period, volume;
	int poll;
{
	struct beeper_softc *sc = vsc;
	int s, ticks;

	ticks = (period * hz) / 1000;
	if (ticks <= 0)
		ticks = 1;

	s = spltty();
	if (sc->sc_bellactive) {
		if (sc->sc_belltimeout == 0)
			timeout_del(&sc->sc_to);
	}
	if (pitch == 0 || period == 0) {
		beeper_stop(sc);
		splx(s);
		return;
	}
	if (!sc->sc_bellactive) {
		sc->sc_bellactive = 1;
		sc->sc_belltimeout = 1;
		bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 1);
		timeout_add(&sc->sc_to, ticks);
	}
	splx(s);
}
#endif /* NPCKBD > 0 */
@


1.1.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.1.6.1 2002/06/11 03:38:42 art Exp $	*/
d117 4
a120 2
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ioh) != 0) {
@


1.1.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d111 1
a111 1
	sc->sc_iot = ea->ea_iotag;
d114 3
a116 7
	if (ea->ea_nvaddrs) {
		if (bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_ioh)) {
			printf(": can't map PROM register space\n");
			return;
		}
	} else if (ebus_bus_map(sc->sc_iot, 0,
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in trunk
@
text
@a40 1
#include <sys/kernel.h>
a42 1
#include <sys/timeout.h>
a50 6
#include "pckbd.h"
#if NPCKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>
#endif

a54 2
	struct timeout		sc_to;
	int 			sc_belltimeout, sc_bellactive;
a69 5
#if NPCKBD > 0
void beeper_stop(void *);
void beeper_bell(void *, u_int, u_int, u_int, int);
#endif

d105 3
a107 4
#if NPCKBD > 0
	timeout_set(&sc->sc_to, beeper_stop, sc);
	pckbd_hookup_bell(beeper_bell, sc);
#endif
a109 48

#if NPCKBD > 0
void
beeper_stop(vsc)
	void *vsc;
{
	struct beeper_softc *sc = vsc;
	int s;

	s = spltty();
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 0);
	sc->sc_bellactive = 0;
	sc->sc_belltimeout = 0;
	splx(s);
}

void
beeper_bell(vsc, pitch, period, volume, poll)
	void *vsc;
	u_int pitch, period, volume;
	int poll;
{
	struct beeper_softc *sc = vsc;
	int s, ticks;

	ticks = (period * hz) / 1000;
	if (ticks <= 0)
		ticks = 1;

	s = spltty();
	if (sc->sc_bellactive) {
		if (sc->sc_belltimeout == 0)
			timeout_del(&sc->sc_to);
	}
	if (pitch == 0 || period == 0) {
		beeper_stop(sc);
		splx(s);
		return;
	}
	if (!sc->sc_bellactive) {
		sc->sc_bellactive = 1;
		sc->sc_belltimeout = 1;
		bus_space_write_4(sc->sc_iot, sc->sc_ioh, BEEP_REG, 1);
		timeout_add(&sc->sc_to, ticks);
	}
	splx(s);
}
#endif /* NPCKBD > 0 */
@


1.1.4.3
log
@Merge in -current from about a week ago
@
text
@d69 2
a70 2
int	beeper_match(struct device *, void *, void *);
void	beeper_attach(struct device *, struct device *, void *);
@


1.1.4.4
log
@Sync the SMP branch with 3.3
@
text
@a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d106 1
a106 1
	sc->sc_iot = ea->ea_iotag;
d109 7
a115 9
	if (ea->ea_nvaddrs) {
		if (bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_ioh)) {
			printf(": can't map PROM register space\n");
			return;
		}
	} else if (ebus_bus_map(sc->sc_iot, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ioh) != 0) {
@


1.1.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: beeper.c,v 1.1.4.4 2003/03/27 23:42:35 niklas Exp $	*/
d15 5
@


1.1.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d116 2
a117 2
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size, 0, 0,
	    &sc->sc_ioh) != 0) {
@


