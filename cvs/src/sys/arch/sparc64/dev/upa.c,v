head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.9.0.28
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.24
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.20
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.14
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	SMP:1.3.0.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	UBC:1.2.0.4
	UBC_SYNC_B:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	uRv5pa9QDlZaYgwD;

1.9
date	2010.11.11.17.58.23;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.17.22.53.18;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.03.20.43.13;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.17.01.33.33;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.05.18.58.30;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.02.49;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2002.06.11.11.03.07;	author jason;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2002.06.11.10.49.14;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;

1.3.4.1
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: upa.c,v 1.9 2010/11/11 17:58:23 miod Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>
#include <sys/malloc.h>

#define _SPARC_BUS_DMA_PRIVATE
#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

struct upa_range {
	u_int64_t	ur_space;
	u_int64_t	ur_addr;
	u_int64_t	ur_len;
};

struct upa_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_bt;
	bus_space_handle_t	sc_reg[3];
	struct upa_range	*sc_range;
	int			sc_node;
	int			sc_nrange;
	bus_space_tag_t		sc_cbt;
};

int	upa_match(struct device *, void *, void *);
void	upa_attach(struct device *, struct device *, void *);

struct cfattach upa_ca = {
	sizeof(struct upa_softc), upa_match, upa_attach
};

struct cfdriver upa_cd = {
	NULL, "upa", DV_DULL
};

int upa_print(void *, const char *);
bus_space_tag_t upa_alloc_bus_tag(struct upa_softc *);
int upa_bus_map(bus_space_tag_t, bus_space_tag_t, bus_addr_t,
    bus_size_t, int, bus_space_handle_t *);
paddr_t upa_bus_mmap(bus_space_tag_t, bus_space_tag_t,
    bus_addr_t, off_t, int, int);

int
upa_match(struct device *parent, void *match, void *aux)
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, "upa") == 0)
		return (1);

	return (0);
}

void
upa_attach(struct device *parent, struct device *self, void *aux)
{
	struct upa_softc *sc = (void *)self;
	struct mainbus_attach_args *ma = aux;
	int i, node;

	sc->sc_bt = ma->ma_bustag;
	sc->sc_node = ma->ma_node;

	for (i = 0; i < 3; i++) {
		if (i >= ma->ma_nreg) {
			printf(": no register %d\n", i);
			return;
		}
		if (bus_space_map(sc->sc_bt, ma->ma_reg[i].ur_paddr,
		    ma->ma_reg[i].ur_len, 0, &sc->sc_reg[i])) {
			printf(": failed to map reg%d\n", i);
			return;
		}
	}

	if (getprop(sc->sc_node, "ranges", sizeof(struct upa_range),
	    &sc->sc_nrange, (void **)&sc->sc_range))
		panic("upa: can't get ranges");

	printf("\n");

	sc->sc_cbt = upa_alloc_bus_tag(sc);

	for (node = OF_child(sc->sc_node); node; node = OF_peer(node)) {
		char buf[32];
		struct mainbus_attach_args map;

		bzero(&map, sizeof(map));
		if (OF_getprop(node, "device_type", buf, sizeof(buf)) <= 0)
			continue;
		if (getprop(node, "reg", sizeof(*map.ma_reg),
		    &map.ma_nreg, (void **)&map.ma_reg) != 0)
			continue;
		if (OF_getprop(node, "name", buf, sizeof(buf)) <= 0)
			continue;
		map.ma_node = node;
		map.ma_name = buf;
		map.ma_bustag = sc->sc_cbt;
		map.ma_dmatag = ma->ma_dmatag;
		config_found(&sc->sc_dev, &map, upa_print);
	}
}

int
upa_print(void *args, const char *name)
{
	struct mainbus_attach_args *ma = args;

	if (name)
		printf("\"%s\" at %s", ma->ma_name, name);
	return (UNCONF);
}

bus_space_tag_t
upa_alloc_bus_tag(struct upa_softc *sc)
{
	struct sparc_bus_space_tag *bt;

	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (bt == NULL)
		panic("upa: couldn't alloc bus tag");

	strlcpy(bt->name, sc->sc_dev.dv_xname, sizeof(bt->name));
	bt->cookie = sc;
	bt->parent = sc->sc_bt;
	bt->asi = bt->parent->asi;
	bt->sasi = bt->parent->sasi;
	bt->sparc_bus_map = upa_bus_map;
	bt->sparc_bus_mmap = upa_bus_mmap;
	/* XXX bt->sparc_intr_establish = upa_intr_establish; */
	return (bt);
}

int
upa_bus_map(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t offset,
    bus_size_t size, int flags, bus_space_handle_t *hp)
{
	struct upa_softc *sc = t->cookie;
	int i;

	if (t->parent == 0 || t->parent->sparc_bus_map == 0) {
		printf("\n__upa_bus_map: invalid parent");
		return (EINVAL);
	}

	t = t->parent;

        if (flags & BUS_SPACE_MAP_PROMADDRESS) {
		return ((*t->sparc_bus_map)
		    (t, t0, offset, size, flags, hp));
	}

	for (i = 0; i < sc->sc_nrange; i++) {
		if (offset < sc->sc_range[i].ur_space)
			continue;
		if (offset >= (sc->sc_range[i].ur_space +
		    sc->sc_range[i].ur_space))
			continue;
		break;
	}
	if (i == sc->sc_nrange)
		return (EINVAL);

	offset -= sc->sc_range[i].ur_space;
	offset += sc->sc_range[i].ur_addr;

	return ((*t->sparc_bus_map)(t, t0, offset, size, flags, hp));
}

paddr_t
upa_bus_mmap(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t paddr,
    off_t off, int prot, int flags)
{
	struct upa_softc *sc = t->cookie;
	int i;

	if (t->parent == 0 || t->parent->sparc_bus_map == 0) {
		printf("\n__upa_bus_map: invalid parent");
		return (EINVAL);
	}

	t = t->parent;

        if (flags & BUS_SPACE_MAP_PROMADDRESS)
		return ((*t->sparc_bus_mmap)(t, t0, paddr, off, prot, flags));

	for (i = 0; i < sc->sc_nrange; i++) {
		if (paddr + off < sc->sc_range[i].ur_space)
			continue;
		if (paddr + off >= (sc->sc_range[i].ur_space +
		    sc->sc_range[i].ur_space))
			continue;
		break;
	}
	if (i == sc->sc_nrange)
		return (EINVAL);

	paddr -= sc->sc_range[i].ur_space;
	paddr += sc->sc_range[i].ur_addr;

	return ((*t->sparc_bus_mmap)(t, t0, paddr, off, prot, flags));
}
@


1.9
log
@Replace snprintf(foo, sizeof foo, "%s", ...) with strlcpy. ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.8 2008/01/17 22:53:18 kettenis Exp $	*/
a33 1
#include <sys/types.h>
@


1.8
log
@Print names we get from the prom within double quotes.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.7 2008/01/03 20:43:13 kettenis Exp $	*/
d162 1
a162 2
	snprintf(bt->name, sizeof(bt->name), "%s",
			sc->sc_dev.dv_xname);
@


1.7
log
@Remove some junk.
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.6 2007/09/17 01:33:33 krw Exp $	*/
d149 1
a149 1
		printf("%s at %s", ma->ma_name, name);
@


1.6
log
@Only the most obvious bzero() -> M_ZERO changes. No cast changes, no
MALLOC/FREE, etc. Just adding M_ZERO to malloc() and deleting an
immediately adjacent bzero().
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.5 2007/03/05 18:58:30 kettenis Exp $	*/
a47 9
#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include "pckbd.h"
#if NPCKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>
#endif

d89 1
@


1.5
log
@Add mmap for upa(4).  Makes the X wsfb(4) driver actually work instead of
crashing the machine on UltraSPARC-III machines with creator(4) framebuffers.

ok jason@@, tsi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.4 2003/06/02 20:02:49 jason Exp $	*/
d166 1
a166 1
	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT);
a169 1
	bzero(bt, sizeof *bt);
@


1.4
log
@nuke terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.3 2003/02/17 01:29:20 henric Exp $	*/
d86 1
a86 1
int __upa_bus_map(bus_space_tag_t, bus_space_tag_t, bus_addr_t,
d88 2
d177 2
a178 2
	bt->sparc_bus_map = __upa_bus_map;
	/* XXX bt->sparc_bus_mmap = upa_bus_mmap; */
d184 1
a184 1
__upa_bus_map(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t offset,
a215 1

d219 33
@


1.3
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.2 2002/06/11 11:03:07 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.3.4.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.3 2003/02/17 01:29:20 henric Exp $	*/
d15 5
@


1.2
log
@remove call to debugger
@
text
@d1 1
a1 1
/*	$OpenBSD: upa.c,v 1.1 2002/06/11 10:49:14 jason Exp $	*/
a38 4
/*
 *
 */

d91 2
a92 2
int __upa_bus_map(bus_space_tag_t, bus_type_t, bus_addr_t,
    bus_size_t, int, vaddr_t, bus_space_handle_t *);
d95 1
a95 4
upa_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d105 1
a105 3
upa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d155 1
a155 3
upa_print(args, name)
	void *args;
	const char *name;
d165 1
a165 2
upa_alloc_bus_tag(sc)
	struct upa_softc *sc;
d167 1
a167 1
	bus_space_tag_t bt;
d169 1
a169 2
	bt = (bus_space_tag_t)malloc(sizeof(struct sparc_bus_space_tag),
	    M_DEVBUF, M_NOWAIT);
d174 2
d178 2
a179 1
	bt->type = sc->sc_bt->type;
d187 2
a188 8
__upa_bus_map(t, btype, offset, size, flags, vaddr, hp)
	bus_space_tag_t t;
	bus_type_t btype;
	bus_addr_t offset;
	bus_size_t size;
	int flags;
	vaddr_t vaddr;
	bus_space_handle_t *hp;
d193 12
d219 2
a220 2
	return (bus_space_map2(sc->sc_bt, btype, offset, size,
	    flags, vaddr, hp));
d222 1
@


1.2.4.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@sync
@
text
@d39 4
d95 2
a96 2
int __upa_bus_map(bus_space_tag_t, bus_space_tag_t, bus_addr_t,
    bus_size_t, int, bus_space_handle_t *);
d99 4
a102 1
upa_match(struct device *parent, void *match, void *aux)
d112 3
a114 1
upa_attach(struct device *parent, struct device *self, void *aux)
d164 3
a166 1
upa_print(void *args, const char *name)
d176 2
a177 1
upa_alloc_bus_tag(struct upa_softc *sc)
d179 1
a179 1
	struct sparc_bus_space_tag *bt;
d181 2
a182 1
	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT);
a186 2
	snprintf(bt->name, sizeof(bt->name), "%s",
			sc->sc_dev.dv_xname);
d189 1
a189 2
	bt->asi = bt->parent->asi;
	bt->sasi = bt->parent->sasi;
d197 8
a204 2
__upa_bus_map(bus_space_tag_t t, bus_space_tag_t t0, bus_addr_t offset,
    bus_size_t size, int flags, bus_space_handle_t *hp)
a208 12
	if (t->parent == 0 || t->parent->sparc_bus_map == 0) {
		printf("\n__upa_bus_map: invalid parent");
		return (EINVAL);
	}

	t = t->parent;

        if (flags & BUS_SPACE_MAP_PROMADDRESS) {
		return ((*t->sparc_bus_map)
		    (t, t0, offset, size, flags, hp));
	}

d223 2
a224 2

	return ((*t->sparc_bus_map)(t, t0, offset, size, flags, hp));
a225 1

@


1.1
log
@UPA driver for the Blade1000
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a222 1
	Debugger();
@

