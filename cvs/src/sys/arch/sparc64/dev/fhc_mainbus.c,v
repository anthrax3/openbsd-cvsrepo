head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.52
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.48
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.44
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.46
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.38
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.36
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.34
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.32
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.30
	OPENBSD_5_0:1.4.0.28
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.26
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.24
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.20
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	uRv5pa9QDlZaYgwD;

1.4
date	2004.09.27.18.32.35;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.27.18.15.32;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.27.17.44.16;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.22.21.44.45;	author jason;	state Exp;
branches;
next	;


desc
@@


1.5
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: fhc_mainbus.c,v 1.4 2004/09/27 18:32:35 jason Exp $	*/

/*
 * Copyright (c) 2004 Jason L. Wright (jason@@thought.net).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/fhcvar.h>

int	fhc_mainbus_match(struct device *, void *, void *);
void	fhc_mainbus_attach(struct device *, struct device *, void *);

struct cfattach fhc_mainbus_ca = {
	sizeof(struct fhc_softc), fhc_mainbus_match, fhc_mainbus_attach
};

int
fhc_mainbus_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, "fhc") == 0)
		return (1);
	return (0);
}

void
fhc_mainbus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct fhc_softc *sc = (struct fhc_softc *)self;
	struct mainbus_attach_args *ma = aux;

	sc->sc_node = ma->ma_node;
	sc->sc_bt = ma->ma_bustag;
	sc->sc_is_central = 0;

	if (bus_space_map(sc->sc_bt, ma->ma_reg[0].ur_paddr,
	    ma->ma_reg[0].ur_len, 0, &sc->sc_preg)) {
		printf(": failed to map preg\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[1].ur_paddr,
	    ma->ma_reg[1].ur_len, 0, &sc->sc_ireg)) {
		printf(": failed to map ireg\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[2].ur_paddr,
	    ma->ma_reg[2].ur_len, BUS_SPACE_MAP_LINEAR, &sc->sc_freg)) {
		printf(": failed to map freg\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[3].ur_paddr,
	    ma->ma_reg[3].ur_len, BUS_SPACE_MAP_LINEAR, &sc->sc_sreg)) {
		printf(": failed to map sreg\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[4].ur_paddr,
	    ma->ma_reg[4].ur_len, BUS_SPACE_MAP_LINEAR, &sc->sc_ureg)) {
		printf(": failed to map ureg\n");
		return;
	}

	if (bus_space_map(sc->sc_bt, ma->ma_reg[5].ur_paddr,
	    ma->ma_reg[5].ur_len, BUS_SPACE_MAP_LINEAR, &sc->sc_treg)) {
		printf(": failed to map treg\n");
		return;
	}

	sc->sc_board = getpropint(sc->sc_node, "board#", -1);

	fhc_attach(sc);

	return;
}
@


1.4
log
@compute the board number of each fhc
@
text
@d1 1
a1 1
/*	$OpenBSD: fhc_mainbus.c,v 1.3 2004/09/27 18:15:32 jason Exp $	*/
a28 1
#include <sys/types.h>
@


1.3
log
@setup control register correctly and clear interrupts before attaching children
@
text
@d1 1
a1 1
/*	$OpenBSD: fhc_mainbus.c,v 1.2 2004/09/27 17:44:16 jason Exp $	*/
d109 2
@


1.2
log
@map registers for fhc@@mainbus
@
text
@d1 1
a1 1
/*	$OpenBSD: fhc_mainbus.c,v 1.1 2004/09/22 21:44:45 jason Exp $	*/
d72 1
@


1.1
log
@firehose controller driver (not quite working) for the e4500 (and others)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 37
d110 1
@

