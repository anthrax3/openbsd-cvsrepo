head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.14
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.16
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.14
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.12
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2014.07.11.08.18.31;	author guenther;	state Exp;
branches;
next	1.6;
commitid	zJyOCNTjgsYVGLiw;

1.6
date	2011.06.24.19.47.49;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.24.18.30.45;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.24.17.46.41;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.21.22.55.38;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.16.22.21.22;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.16.22.01.30;	author jason;	state Exp;
branches;
next	;


desc
@@


1.7
log
@It's init as a process that's special, not init's original thread.
Remember initprocess instead of initproc.

ok matthew@@ blambert@@
@
text
@/*	$OpenBSD: power.c,v 1.6 2011/06/24 19:47:49 naddy Exp $	*/

/*
 * Copyright (c) 2006 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for power-button device on U5, U10, etc.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>
#include <sys/proc.h>
#include <sys/signalvar.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#define	POWER_REG		0

#define	POWER_REG_CPWR_OFF	0x00000002	/* courtesy power off */
#define	POWER_REG_SPWR_OFF	0x00000001	/* system power off */

struct power_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	struct intrhand		*sc_ih;
};

int	power_match(struct device *, void *, void *);
void	power_attach(struct device *, struct device *, void *);
int	power_intr(void *);

struct cfattach power_ca = {
	sizeof(struct power_softc), power_match, power_attach
};

struct cfdriver power_cd = {
	NULL, "power", DV_DULL
};

int
power_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct ebus_attach_args *ea = aux;

	if (strcmp(ea->ea_name, "power") == 0)
		return (1);
	return (0);
}

void
power_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct power_softc *sc = (void *)self;
	struct ebus_attach_args *ea = aux;

	if (ea->ea_nregs < 1) {
		printf(": no registers\n");
		return;
	}

	/* Use prom address if available, otherwise map it. */
	if (ea->ea_nvaddrs) {
		if (bus_space_map(ea->ea_memtag, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_ioh)) {
			printf(": can't map PROM register space\n");
			return;
		}
		sc->sc_iot = ea->ea_memtag;
	} else if (ebus_bus_map(ea->ea_iotag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_iotag;
	} else if (ebus_bus_map(ea->ea_memtag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_memtag;
	} else {
		printf("%s: can't map register space\n", self->dv_xname);
		return;
	}

	if (ea->ea_nintrs > 0 && OF_getproplen(ea->ea_node, "button") >= 0) {
	        sc->sc_ih = bus_intr_establish(sc->sc_iot, ea->ea_intrs[0],
		    IPL_BIO, 0, power_intr, sc, self->dv_xname);
		if (sc->sc_ih == NULL) {
			printf(": can't establish interrupt\n");
			return;
		}
	}
	printf("\n");
}

int
power_intr(void *vsc)
{
	extern int allowpowerdown;

	if (allowpowerdown == 1) {
		allowpowerdown = 0;
		prsignal(initprocess, SIGUSR2);
	}
	return (1);
}
@


1.6
log
@machdep.kbdreset enables a shutdown by Ctrl-Alt-Del on amd64 and
i386.  Stop abusing it on other archs for controling a shutdown by
pressing the soft power button:

* Add a MI sysctl hw.allowpowerdown; if set to 1 (the default) it
  allows a power button shutdown.
* Make acpi(4)/acpibtn(4) honor hw.allowpowerdown.
* Switch the various power button intercepts on landisk, sgi, sparc64
  and zaurus over to hw.allowpowerdown.
* Garbage collect the machdep.kbdreset sysctl on all archs other than
  amd64 and i386.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.5 2007/04/24 18:30:45 kettenis Exp $	*/
d139 1
a139 1
		psignal(initproc, SIGUSR2);
@


1.5
log
@Tell init(8) to power down machine instead of just halting it.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.4 2007/04/24 17:46:41 kettenis Exp $	*/
d135 1
a135 1
	extern int kbd_reset;
d137 2
a138 2
	if (kbd_reset == 1) {
		kbd_reset = 0;
@


1.4
log
@Make power(4) map registers in io space if mem space fails.
Tested on u5, u10, blade100 and v210.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.3 2006/06/21 22:55:38 jason Exp $	*/
d139 1
a139 1
		psignal(initproc, SIGUSR1);
@


1.3
log
@if machdep.kbdreset==1 and the front panel button interrupt fires, tell init
that it's time to go sleepy-bye.
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.2 2006/06/16 22:21:22 jason Exp $	*/
d57 2
a58 2
	bus_space_tag_t		sc_tag;
	bus_space_handle_t	sc_handle;
a94 2
	sc->sc_tag = ea->ea_memtag;

d102 2
a103 2
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_handle)) {
d107 12
a118 5
	} else if (ebus_bus_map(sc->sc_tag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size, 0, 0,
	    &sc->sc_handle) != 0) {
		printf(": can't map register space\n");
                return;
d122 1
a122 1
	        sc->sc_ih = bus_intr_establish(sc->sc_tag, ea->ea_intrs[0],
@


1.2
log
@documentation on the register
@
text
@d1 1
a1 1
/*	$OpenBSD: power.c,v 1.1 2006/06/16 22:01:30 jason Exp $	*/
d40 2
d118 1
a118 1
		    IPL_HIGH, 0, power_intr, sc, self->dv_xname);
a123 1

d130 6
a135 5
	/*
	 * to turn the machine off:
	 *	bus_space_write_4(sc->sc_tag, sc->sc_handle, POWER_REG,
	 *	    POWER_REG_CPWR_OFF | POWER_REG_SPWR_OFF);
	 */
@


1.1
log
@skeleton driver for power button on u5.. does precisely nothing except attach.
Will hook it into the right places this weekend (and put it into GENERIC
and write a man page when it does something useful).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 5
d95 5
d129 6
a134 1
	return (0);
@

