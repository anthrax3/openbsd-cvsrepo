head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.48
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.46
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.38
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.42
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.40
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2005.03.09.18.41.48;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.01.18.18.49;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.17.01.29.19;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.01.21.48.23;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.29.02.47.58;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.22.14.17.04;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.57;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.03.27.23.42.35;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.38.42;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Preliminary support for the floppy drive on Ultrasparcs. Only tested on
SBus machines so far, although EBus attachment glue is provided but not enabled
by default.

Also, fdformat(8) does not work correctly yet, although reading and writing
is safe; this will hopefully be fixed in the near future.

ok deraadt@@
@
text
@/*	$OpenBSD: auxio.c,v 1.6 2004/10/01 18:18:49 jason Exp $	*/
/*	$NetBSD: auxio.c,v 1.1 2000/04/15 03:08:13 mrg Exp $	*/

/*
 * Copyright (c) 2000 Matthew R. Green
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * AUXIO registers support on the sbus & ebus2.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/timeout.h>
#include <sys/kernel.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>
#include <sparc64/dev/sbusvar.h>
#include <sparc64/dev/auxioreg.h>
#include <sparc64/dev/auxiovar.h>

#define	AUXIO_ROM_NAME		"auxio"

/*
 * ebus code.
 */
int	auxio_ebus_match(struct device *, void *, void *);
void	auxio_ebus_attach(struct device *, struct device *, void *);
int	auxio_sbus_match(struct device *, void *, void *);
void	auxio_sbus_attach(struct device *, struct device *, void *);
void	auxio_attach_common(struct auxio_softc *);

struct cfattach auxio_ebus_ca = {
	sizeof(struct auxio_softc), auxio_ebus_match, auxio_ebus_attach
};

struct cfattach auxio_sbus_ca = {
	sizeof(struct auxio_softc), auxio_sbus_match, auxio_sbus_attach
};

struct cfdriver auxio_cd = {
	NULL, "auxio", DV_DULL
};

void auxio_led_blink(void *, int);

int
auxio_ebus_match(parent, cf, aux)
	struct device *parent;
	void *cf;
	void *aux;
{
	struct ebus_attach_args *ea = aux;

	return (strcmp(AUXIO_ROM_NAME, ea->ea_name) == 0);
}

void
auxio_ebus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct auxio_softc *sc = (struct auxio_softc *)self;
	struct ebus_attach_args *ea = aux;

	if (ea->ea_nregs < 1 || ea->ea_nvaddrs < 1) {
		printf(": no registers??\n");
		return;
	}

	sc->sc_tag = ea->ea_memtag;

	if (ea->ea_nregs != 5 || ea->ea_nvaddrs != 5) {
		printf(": not 5 (%d) registers, only setting led",
		    ea->ea_nregs);
		sc->sc_flags = AUXIO_LEDONLY|AUXIO_EBUS;
	} else {
		sc->sc_flags = AUXIO_EBUS;
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[2],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_freq)) {
			printf(": unable to map freq\n");
			return;
		}
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[3],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_scsi)) {
			printf(": unable to map SCSI\n");
			return;
		}
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[4],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_temp)) {
			printf(": unable to map temp\n");
			return;
		}
	}

	if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[0], sizeof(u_int32_t),
	    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_led)) {
		printf(": unable to map LED\n");
		return;
	}

	auxio_attach_common(sc);
}

int
auxio_sbus_match(parent, cf, aux)
	struct device *parent;
	void *cf;
	void *aux;
{
	struct sbus_attach_args *sa = aux;

	return (strcmp(AUXIO_ROM_NAME, sa->sa_name) == 0);
}

void
auxio_sbus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct auxio_softc *sc = (struct auxio_softc *)self;
	struct sbus_attach_args *sa = aux;

	sc->sc_tag = sa->sa_bustag;

	if (sa->sa_nreg < 1 || sa->sa_npromvaddrs < 1) {
		printf(": no registers??\n");
		return;
	}

	if (sa->sa_nreg != 1 || sa->sa_npromvaddrs != 1) {
		printf(": not 1 (%d/%d) registers??", sa->sa_nreg, sa->sa_npromvaddrs);
		return;
	}

	/* sbus auxio only has one set of registers */
	sc->sc_flags = AUXIO_LEDONLY|AUXIO_SBUS;
	if (bus_space_map(sc->sc_tag, sa->sa_promvaddr, 1,
	    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_led)) {
		printf(": couldn't map registers\n");
		return;
	}

	auxio_attach_common(sc);
}

void
auxio_attach_common(sc)
	struct auxio_softc *sc;
{
	sc->sc_blink.bl_func = auxio_led_blink;
	sc->sc_blink.bl_arg = sc;
	blink_led_register(&sc->sc_blink);
	printf("\n");
}

void
auxio_led_blink(void *vsc, int on)
{
	struct auxio_softc *sc = vsc;
	u_int32_t led;
	int s;

	s = splhigh();

	if (sc->sc_flags & AUXIO_EBUS)
		led = letoh32(bus_space_read_4(sc->sc_tag, sc->sc_led, 0));
	else
		led = bus_space_read_1(sc->sc_tag, sc->sc_led, 0);

	if (on)
		led |= AUXIO_LED_LED;
	else
		led &= ~AUXIO_LED_LED;

	if (sc->sc_flags & AUXIO_EBUS)
		bus_space_write_4(sc->sc_tag, sc->sc_led, 0, htole32(led));
	else
		bus_space_write_1(sc->sc_tag, sc->sc_led, 0, led);

	splx(s);
}

int
auxio_fd_control(u_int32_t bits)
{
	struct auxio_softc *sc;
	u_int32_t led;

	if (auxio_cd.cd_ndevs == 0) {
		return ENXIO;
	}

	/*
	 * XXX This does not handle > 1 auxio correctly.
	 * We'll assume the floppy drive is tied to first auxio found.
	 */
	sc = (struct auxio_softc *)auxio_cd.cd_devs[0];
	if (sc->sc_flags & AUXIO_EBUS)
		led = letoh32(bus_space_read_4(sc->sc_tag, sc->sc_led, 0));
	else
		led = bus_space_read_1(sc->sc_tag, sc->sc_led, 0);

	led = (led & ~AUXIO_LED_FLOPPY_MASK) | bits;

	if (sc->sc_flags & AUXIO_EBUS)
		bus_space_write_4(sc->sc_tag, sc->sc_led, 0, htole32(led));
	else
		bus_space_write_1(sc->sc_tag, sc->sc_led, 0, led);

	return 0;
}
@


1.6
log
@add a blink_led API (shaves ~1k from GENERIC) rather than have the same
logic in 3 files.  Devices register a function to be called to turn the
led on and off based on load average. (Note: rerun config and make depend)
@
text
@d1 1
a1 1
/*	$OpenBSD: auxio.c,v 1.5 2003/02/17 01:29:19 henric Exp $	*/
d215 30
@


1.5
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: auxio.c,v 1.4 2002/03/14 01:26:44 millert Exp $	*/
d75 1
a75 1
extern int sparc_led_blink;
a95 2
	timeout_set(&sc->sc_to, auxio_led_blink, sc);

a156 2
	timeout_set(&sc->sc_to, auxio_led_blink, sc);

d184 3
a186 2
	if (sparc_led_blink)
		auxio_led_blink(sc);
d191 1
a191 2
auxio_led_blink(vsc)
	void *vsc;
d195 1
a195 10
	int i, s;

	if (sc == NULL) {
		for (i = 0; i < auxio_cd.cd_ndevs; i++) {
			sc = auxio_cd.cd_devs[i];
			if (sc != NULL)
				auxio_led_blink(sc);
		}
		return;
	}
d204 1
a204 1
	if (!sparc_led_blink)
d207 1
a207 1
		led ^= AUXIO_LED_LED;
a214 13

	if (!sparc_led_blink)
		return;

	/*
	 * Blink rate is:
	 *      full cycle every second if completely idle (loadav = 0)
	 *      full cycle every 2 seconds if loadav = 1
	 *      full cycle every 3 seconds if loadav = 2
	 * etc.
	 */
	s = (((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 1));
	timeout_add(&sc->sc_to, s);
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: auxio.c,v 1.3 2002/02/01 21:48:23 jason Exp $	*/
d103 2
d111 24
a134 4
		sc->sc_pci = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_freq = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_scsi = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_temp = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
a135 2
	sc->sc_led = (bus_space_handle_t)(u_long)ea->ea_vaddrs[0];
	sc->sc_tag = ea->ea_bustag;
d161 2
d175 5
a179 2
	sc->sc_led = (bus_space_handle_t)(u_long)sa->sa_promvaddr;
	sc->sc_tag = sa->sa_bustag;
@


1.3
log
@Clean up auxio a bit and add machdep.led_blink sysctl (like sparc),
portions from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: auxio.c,v 1.2 2001/08/29 02:47:58 jason Exp $	*/
d57 5
a61 5
int	auxio_ebus_match __P((struct device *, void *, void *));
void	auxio_ebus_attach __P((struct device *, struct device *, void *));
int	auxio_sbus_match __P((struct device *, void *, void *));
void	auxio_sbus_attach __P((struct device *, struct device *, void *));
void	auxio_attach_common __P((struct auxio_softc *));
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 2
a41 1
#include <sys/malloc.h>
d61 1
d75 2
d96 2
d109 4
a112 4
		sc->sc_registers.auxio_pci = (u_int32_t *)(u_long)ea->ea_vaddrs[1];
		sc->sc_registers.auxio_freq = (u_int32_t *)(u_long)ea->ea_vaddrs[2];
		sc->sc_registers.auxio_scsi = (u_int32_t *)(u_long)ea->ea_vaddrs[3];
		sc->sc_registers.auxio_temp = (u_int32_t *)(u_long)ea->ea_vaddrs[4];
d114 2
a115 4
	sc->sc_registers.auxio_led = (u_int32_t *)(u_long)ea->ea_vaddrs[0];
	
	if (!auxio_reg)
		auxio_reg = (u_char *)(u_long)ea->ea_vaddrs[0];
d117 1
a117 1
	printf("\n");
d139 2
d153 2
a154 1
	sc->sc_registers.auxio_led = (u_int32_t *)(u_long)sa->sa_promvaddr;
d156 2
a157 2
	if (!auxio_reg)
		auxio_reg = (u_char *)(u_long)sa->sa_promvaddr;
d159 6
d168 3
a170 6
/*
 * old interface; used by fd driver for now
 */
unsigned int
auxregbisc(bis, bic)
	int bis, bic;
d172 29
a200 1
	register int v, s = splhigh();
a201 2
	v = *auxio_reg;
	*auxio_reg = ((v | bis) & ~bic) | AUXIO_LED_MB1;
d203 13
a215 1
	return v;
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: auxio.c,v 1.2 2001/08/29 02:47:58 jason Exp $	*/
d40 1
a40 2
#include <sys/timeout.h>
#include <sys/kernel.h>
d56 4
a59 5
int	auxio_ebus_match(struct device *, void *, void *);
void	auxio_ebus_attach(struct device *, struct device *, void *);
int	auxio_sbus_match(struct device *, void *, void *);
void	auxio_sbus_attach(struct device *, struct device *, void *);
void	auxio_attach_common(struct auxio_softc *);
a72 2
extern int sparc_led_blink;

a91 2
	timeout_set(&sc->sc_to, auxio_led_blink, sc);

d103 4
a106 4
		sc->sc_pci = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_freq = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_scsi = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_temp = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
d108 4
a111 2
	sc->sc_led = (bus_space_handle_t)(u_long)ea->ea_vaddrs[0];
	sc->sc_tag = ea->ea_bustag;
d113 1
a113 1
	auxio_attach_common(sc);
a134 2
	timeout_set(&sc->sc_to, auxio_led_blink, sc);

d147 1
a147 2
	sc->sc_led = (bus_space_handle_t)(u_long)sa->sa_promvaddr;
	sc->sc_tag = sa->sa_bustag;
d149 2
a150 2
	auxio_attach_common(sc);
}
a151 6
void
auxio_attach_common(sc)
	struct auxio_softc *sc;
{
	if (sparc_led_blink)
		auxio_led_blink(sc);
d155 6
a160 3
void
auxio_led_blink(vsc)
	void *vsc;
d162 1
a162 29
	struct auxio_softc *sc = vsc;
	u_int32_t led;
	int i, s;

	if (sc == NULL) {
		for (i = 0; i < auxio_cd.cd_ndevs; i++) {
			sc = auxio_cd.cd_devs[i];
			if (sc != NULL)
				auxio_led_blink(sc);
		}
		return;
	}

	s = splhigh();

	if (sc->sc_flags & AUXIO_EBUS)
		led = letoh32(bus_space_read_4(sc->sc_tag, sc->sc_led, 0));
	else
		led = bus_space_read_1(sc->sc_tag, sc->sc_led, 0);

	if (!sparc_led_blink)
		led |= AUXIO_LED_LED;
	else
		led ^= AUXIO_LED_LED;

	if (sc->sc_flags & AUXIO_EBUS)
		bus_space_write_4(sc->sc_tag, sc->sc_led, 0, htole32(led));
	else
		bus_space_write_1(sc->sc_tag, sc->sc_led, 0, led);
d164 2
d167 1
a167 13

	if (!sparc_led_blink)
		return;

	/*
	 * Blink rate is:
	 *      full cycle every second if completely idle (loadav = 0)
	 *      full cycle every 2 seconds if loadav = 1
	 *      full cycle every 3 seconds if loadav = 2
	 * etc.
	 */
	s = (((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 1));
	timeout_add(&sc->sc_to, s);
@


1.2.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a102 2
	sc->sc_tag = ea->ea_memtag;

d109 4
a112 24
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[2],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_freq)) {
			printf(": unable to map freq\n");
			return;
		}
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[3],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_scsi)) {
			printf(": unable to map SCSI\n");
			return;
		}
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[4],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_temp)) {
			printf(": unable to map temp\n");
			return;
		}
	}

	if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[0], sizeof(u_int32_t),
	    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_led)) {
		printf(": unable to map LED\n");
		return;
d114 2
a140 2
	sc->sc_tag = sa->sa_bustag;

d153 2
a154 5
	if (bus_space_map(sc->sc_tag, sa->sa_promvaddr, 1,
	    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_led)) {
		printf(": couldn't map registers\n");
		return;
	}
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Merge in trunk
@
text
@d40 1
a40 2
#include <sys/timeout.h>
#include <sys/kernel.h>
a59 1
void	auxio_attach_common __P((struct auxio_softc *));
a72 2
extern int sparc_led_blink;

a91 2
	timeout_set(&sc->sc_to, auxio_led_blink, sc);

d103 4
a106 4
		sc->sc_pci = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_freq = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_scsi = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
		sc->sc_temp = (bus_space_handle_t)(u_long)ea->ea_vaddrs[1];
d108 4
a111 2
	sc->sc_led = (bus_space_handle_t)(u_long)ea->ea_vaddrs[0];
	sc->sc_tag = ea->ea_bustag;
d113 1
a113 1
	auxio_attach_common(sc);
a134 2
	timeout_set(&sc->sc_to, auxio_led_blink, sc);

d147 1
a147 2
	sc->sc_led = (bus_space_handle_t)(u_long)sa->sa_promvaddr;
	sc->sc_tag = sa->sa_bustag;
d149 2
a150 2
	auxio_attach_common(sc);
}
a151 6
void
auxio_attach_common(sc)
	struct auxio_softc *sc;
{
	if (sparc_led_blink)
		auxio_led_blink(sc);
d155 6
a160 3
void
auxio_led_blink(vsc)
	void *vsc;
d162 1
a162 29
	struct auxio_softc *sc = vsc;
	u_int32_t led;
	int i, s;

	if (sc == NULL) {
		for (i = 0; i < auxio_cd.cd_ndevs; i++) {
			sc = auxio_cd.cd_devs[i];
			if (sc != NULL)
				auxio_led_blink(sc);
		}
		return;
	}

	s = splhigh();

	if (sc->sc_flags & AUXIO_EBUS)
		led = letoh32(bus_space_read_4(sc->sc_tag, sc->sc_led, 0));
	else
		led = bus_space_read_1(sc->sc_tag, sc->sc_led, 0);

	if (!sparc_led_blink)
		led |= AUXIO_LED_LED;
	else
		led ^= AUXIO_LED_LED;

	if (sc->sc_flags & AUXIO_EBUS)
		bus_space_write_4(sc->sc_tag, sc->sc_led, 0, htole32(led));
	else
		bus_space_write_1(sc->sc_tag, sc->sc_led, 0, led);
d164 2
d167 1
a167 13

	if (!sparc_led_blink)
		return;

	/*
	 * Blink rate is:
	 *      full cycle every second if completely idle (loadav = 0)
	 *      full cycle every 2 seconds if loadav = 1
	 *      full cycle every 3 seconds if loadav = 2
	 * etc.
	 */
	s = (((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 1));
	timeout_add(&sc->sc_to, s);
@


1.2.4.3
log
@Merge in -current from about a week ago
@
text
@d57 5
a61 5
int	auxio_ebus_match(struct device *, void *, void *);
void	auxio_ebus_attach(struct device *, struct device *, void *);
int	auxio_sbus_match(struct device *, void *, void *);
void	auxio_sbus_attach(struct device *, struct device *, void *);
void	auxio_attach_common(struct auxio_softc *);
@


1.2.4.4
log
@Sync the SMP branch with 3.3
@
text
@a102 2
	sc->sc_tag = ea->ea_memtag;

d109 4
a112 24
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[2],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_freq)) {
			printf(": unable to map freq\n");
			return;
		}
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[3],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_scsi)) {
			printf(": unable to map SCSI\n");
			return;
		}
		if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[4],
		    sizeof(u_int32_t), BUS_SPACE_MAP_PROMADDRESS,
		    &sc->sc_temp)) {
			printf(": unable to map temp\n");
			return;
		}
	}

	if (bus_space_map(sc->sc_tag, ea->ea_vaddrs[0], sizeof(u_int32_t),
	    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_led)) {
		printf(": unable to map LED\n");
		return;
d114 2
a140 2
	sc->sc_tag = sa->sa_bustag;

d153 2
a154 5
	if (bus_space_map(sc->sc_tag, sa->sa_promvaddr, 1,
	    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_led)) {
		printf(": couldn't map registers\n");
		return;
	}
@


1.1
log
@auxio from NetBSD
@
text
@d1 1
@

