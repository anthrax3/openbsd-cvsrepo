head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.22
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.18
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.20
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.16
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	SMP:1.2.0.4
	UBC:1.2.0.2
	UBC_SYNC_B:1.4;
locks; strict;
comment	@ * @;


1.7
date	2016.12.20.13.47.38;	author jsg;	state Exp;
branches;
next	1.6;
commitid	lEoNDofM93YyLOXX;

1.6
date	2011.04.07.15.30.16;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.02.49;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.31.18.35.19;	author jason;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2002.01.30.23.58.02;	author jason;	state Exp;
branches;
next	;

1.2.2.1
date	2002.01.31.22.55.24;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fix use of uninitialised variables
ok kettenis@@
@
text
@/*	$OpenBSD: uperf.c,v 1.6 2011/04/07 15:30:16 miod Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/ioctl.h>
#include <sys/conf.h>

#include <machine/conf.h>

#include <dev/sun/uperfio.h>
#include <arch/sparc64/dev/uperfvar.h>

struct cfdriver uperf_cd = {
	NULL, "uperf", DV_DULL
};

int uperf_getcntsrc(struct uperf_softc *, struct uperf_io *);
int uperf_findbyval(struct uperf_softc *, int, u_int, int *);
int uperf_findbysrc(struct uperf_softc *, int, int, u_int32_t *);
int uperf_setcntsrc(struct uperf_softc *, struct uperf_io *);

int
uperfopen(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{
	if (minor(dev) >= uperf_cd.cd_ndevs)
		return (ENXIO);
	if (uperf_cd.cd_devs[minor(dev)] == NULL)
		return (ENXIO);
	return (0);
}

int
uperfclose(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{
	return (0);
}

int
uperfioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct uperf_softc *usc = uperf_cd.cd_devs[minor(dev)];
	struct uperf_io *io = (struct uperf_io *)data;
	int error = EINVAL;

	switch (cmd) {
	case UPIO_GCNTSRC:
		error = uperf_getcntsrc(usc, io);
		break;
	case UPIO_SCNTSRC:
		error = uperf_setcntsrc(usc, io);
		break;
	case UPIO_CLRCNT:
		error = usc->usc_clrcnt(usc->usc_cookie, io->cnt_flags);
		break;
	case UPIO_GETCNT:
		error = usc->usc_getcnt(usc->usc_cookie, io->cnt_flags,
		    &io->cnt_val0, &io->cnt_val1);
		break;
	}

	return (error);
}

int
uperf_getcntsrc(usc, io)
	struct uperf_softc *usc;
	struct uperf_io *io;
{
	u_int cnt0_src, cnt1_src;
	int error;

	error = usc->usc_getcntsrc(usc->usc_cookie, io->cnt_flags,
	    &cnt0_src, &cnt1_src);
	if (error)
		return (error);

	if (io->cnt_flags & UPERF_CNT0) {
		error = uperf_findbyval(usc, UPERF_CNT0,
		    cnt0_src, &io->cnt_src0);
		if (error)
			return (error);
	}

	if (io->cnt_flags & UPERF_CNT1) {
		error = uperf_findbyval(usc, UPERF_CNT1,
		    cnt1_src, &io->cnt_src1);
		if (error)
			return (error);
	}
	return (0);
}

int
uperf_findbyval(usc, cnt, uval, rval)
	struct uperf_softc *usc;
	int cnt;
	u_int uval;
	int *rval;
{
	struct uperf_src *srcs = usc->usc_srcs;

	if (srcs->us_src == 0)
		return (EINVAL);

	while (srcs->us_src != -1) {
		if (srcs->us_val == uval && srcs->us_flags & cnt) {
			*rval = srcs->us_src;
			return (0);
		}
		srcs++;
	}
	return (EINVAL);
}

int
uperf_setcntsrc(usc, io)
	struct uperf_softc *usc;
	struct uperf_io *io;
{
	u_int32_t cnt0_src, cnt1_src;
	int error;

	cnt0_src = cnt1_src = 0;

	if (io->cnt_flags & UPERF_CNT0) {
		error = uperf_findbysrc(usc, UPERF_CNT0,
		    io->cnt_src0, &cnt0_src);
		if (error)
			return (error);
	}
	if (io->cnt_flags & UPERF_CNT1) {
		error = uperf_findbysrc(usc, UPERF_CNT1,
		    io->cnt_src1, &cnt1_src);
		if (error)
			return (error);
	}
	return ((usc->usc_setcntsrc)(usc->usc_cookie, io->cnt_flags,
	    cnt0_src, cnt1_src));
}

int
uperf_findbysrc(usc, cnt, src, rval)
	struct uperf_softc *usc;
	int cnt, src;
	u_int32_t *rval;
{
	struct uperf_src *srcs = usc->usc_srcs;

	if (srcs->us_src == 0)
		return (EINVAL);

	while (srcs->us_src != -1) {
		if (srcs->us_src == src && srcs->us_flags & cnt) {
			*rval = srcs->us_val;
			return (0);
		}
		srcs++;
	}
	return (EINVAL);
}
@


1.6
log
@Do not use NULL in integer comparisons. No functional change.
ok matthew@@ tedu@@, also eyeballed by at least krw@@ oga@@ kettenis@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.5 2003/06/02 20:02:49 jason Exp $	*/
d169 2
@


1.5
log
@nuke terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.4 2002/04/08 17:49:42 jason Exp $	*/
d149 1
a149 1
	if (srcs->us_src == NULL)
d194 1
a194 1
	if (srcs->us_src == NULL)
@


1.4
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.3 2002/03/14 01:26:44 millert Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.2 2002/01/31 18:35:19 jason Exp $	*/
d32 5
@


1.2
log
@Move ioctl userland accessible stuff to <dev/sun/uperfio.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.1 2002/01/30 23:58:02 jason Exp $	*/
d53 4
a56 4
int uperf_getcntsrc __P((struct uperf_softc *, struct uperf_io *));
int uperf_findbyval __P((struct uperf_softc *, int, u_int, int *));
int uperf_findbysrc __P((struct uperf_softc *, int, int, u_int32_t *));
int uperf_setcntsrc __P((struct uperf_softc *, struct uperf_io *));
@


1.2.4.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 4
a56 4
int uperf_getcntsrc(struct uperf_softc *, struct uperf_io *);
int uperf_findbyval(struct uperf_softc *, int, u_int, int *);
int uperf_findbysrc(struct uperf_softc *, int, int, u_int32_t *);
int uperf_setcntsrc(struct uperf_softc *, struct uperf_io *);
@


1.2.4.2
log
@Sync the SMP branch with 3.3
@
text
@a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
@


1.2.4.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.2.4.2 2003/03/27 23:42:36 niklas Exp $	*/
d15 5
@


1.2.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.2 2002/01/31 18:35:19 jason Exp $	*/
@


1.2.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.2.2.1 2002/01/31 22:55:24 niklas Exp $	*/
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d53 4
a56 4
int uperf_getcntsrc(struct uperf_softc *, struct uperf_io *);
int uperf_findbyval(struct uperf_softc *, int, u_int, int *);
int uperf_findbysrc(struct uperf_softc *, int, int, u_int32_t *);
int uperf_setcntsrc(struct uperf_softc *, struct uperf_io *);
@


1.1
log
@Driver for getting at performance counters.  These manifest them
selves as "sc at sbus" and a couple of registers on psycho (sabre
doesn't appear to have these registers).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
@

