head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.36
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.38
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.34
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.30
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.32
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.24
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.28
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2008.06.08.03.07.40;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.16.19.00.07;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.28.10.50.11;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.24.20.13.19;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.22.22.39.10;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.20.18.54.42;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.21.03.11.11;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.29.00.01.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.22.08.33.45;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.14.01.15.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.09.12.16.25;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.01.11.08.22;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.01.11.03.33;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.13
log
@put the PCF_FREQ codes into the clock
@
text
@/*	$OpenBSD: pcfiic_ebus.c,v 1.12 2008/04/16 19:00:07 kettenis Exp $ */

/*
 * Copyright (c) 2006 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Device specific driver for the EBus i2c devices found on some sun4u
 * systems. On systems not having a boot-bus controller the i2c devices
 * are PCF8584.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/rwlock.h>

#include <machine/bus.h>
#include <machine/openfirm.h>
#include <machine/autoconf.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include <dev/i2c/i2cvar.h>
#include <sparc64/dev/ofwi2cvar.h>

#include <dev/ic/pcf8584var.h>

int	pcfiic_ebus_match(struct device *, void *, void *);
void	pcfiic_ebus_attach(struct device *, struct device *, void *);

struct pcfiic_ebus_softc {
	struct pcfiic_softc	esc_sc;

	int			esc_node;
	void			*esc_ih;
};

struct cfattach pcfiic_ebus_ca = {
	sizeof(struct pcfiic_ebus_softc), pcfiic_ebus_match, pcfiic_ebus_attach
};

void	envctrl_scan(struct device *, struct i2cbus_attach_args *, void *);
void	envctrltwo_scan(struct device *, struct i2cbus_attach_args *, void *);

int
pcfiic_ebus_match(struct device *parent, void *match, void *aux)
{
	struct ebus_attach_args		*ea = aux;
	char				compat[32];

	if (strcmp(ea->ea_name, "SUNW,envctrl") == 0 ||
	    strcmp(ea->ea_name, "SUNW,envctrltwo") == 0)
		return (1);

	if (strcmp(ea->ea_name, "i2c") != 0)
		return (0);

	if (OF_getprop(ea->ea_node, "compatible", compat, sizeof(compat)) == -1)
		return (0);

	if (strcmp(compat, "pcf8584") == 0 ||
	    strcmp(compat, "i2cpcf,8584") == 0 ||
	    strcmp(compat, "SUNW,i2c-pic16f747") == 0 ||
	    strcmp(compat, "SUNW,bbc-i2c") == 0)
		return (1);

	return (0);
}

void
pcfiic_ebus_attach(struct device *parent, struct device *self, void *aux)
{
	struct pcfiic_ebus_softc	*esc = (struct pcfiic_ebus_softc *)self;
	struct pcfiic_softc		*sc = &esc->esc_sc;
	struct ebus_attach_args		*ea = aux;
	char				compat[32];
	u_int64_t			addr;
	u_int8_t			clock = PCF_CLOCK_12 | PCF_FREQ_90;
	int				swapregs = 0;

	if (ea->ea_nregs < 1 || ea->ea_nregs > 2) {
		printf(": expected 1 or 2 registers, got %d\n", ea->ea_nregs);
		return;
	}

	if (OF_getprop(ea->ea_node, "compatible", compat, sizeof(compat)) > 0 &&
	    strcmp(compat, "SUNW,bbc-i2c") == 0) {
		/*
		 * On BBC-based machines, Sun swapped the order of
		 * the registers on their clone pcf, plus they feed
		 * it a non-standard clock.
		 */
		int clk = getpropint(findroot(), "clock-frequency", 0);

		if (clk < 105000000)
			clock = PCF_CLOCK_3 | PCF_FREQ_90;
		else if (clk < 160000000)
			clock = PCF_CLOCK_4_43 | PCF_FREQ_90;
		swapregs = 1;
	}

	if (OF_getprop(ea->ea_node, "own-address", &addr, sizeof(addr)) == -1) {
		addr = 0xaa;
	} else if (addr == 0x00 || addr > 0xff) {
		printf(": invalid address on I2C bus");
		return;
	}

	/* Prefer prom mapping, then memory mapping, then io mapping */
	if (ea->ea_nvaddrs) {
		if (bus_space_map(ea->ea_memtag, ea->ea_vaddrs[0], 0,
		    BUS_SPACE_MAP_PROMADDRESS, &sc->sc_ioh) != 0)
			goto fail;
		sc->sc_iot = ea->ea_memtag;
	} else if (ebus_bus_map(ea->ea_memtag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_memtag;
	} else if (ebus_bus_map(ea->ea_iotag, 0,
	    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) == 0) {
		sc->sc_iot = ea->ea_iotag;
	} else {
fail:
		printf(": can't map register space\n");
               	return;
	}

	if (ea->ea_nregs == 2) {
		/*
		 * Second register only occurs on BBC-based machines,
		 * and is likely not prom mapped
		*/
		if (ebus_bus_map(sc->sc_iot, 0, EBUS_PADDR_FROM_REG(&ea->ea_regs[1]),
		    ea->ea_regs[1].size, 0, 0, &sc->sc_ioh2) != 0) {
			printf(": can't map 2nd register space\n");
			return;
		}
		sc->sc_master = 1;
	}

	if (ea->ea_nintrs >= 1)
		esc->esc_ih = bus_intr_establish(sc->sc_iot, ea->ea_intrs[0],
		    IPL_BIO, 0, pcfiic_intr, sc, self->dv_xname);
	else
		esc->esc_ih = NULL;


	if (esc->esc_ih == NULL)
		sc->sc_poll = 1;

	if (strcmp(ea->ea_name, "SUNW,envctrl") == 0)
		pcfiic_attach(sc, 0x55, PCF_CLOCK_12 | PCF_FREQ_45, 0,
		    envctrl_scan, &ea->ea_node);
	else if (strcmp(ea->ea_name, "SUNW,envctrltwo") == 0)
		pcfiic_attach(sc, 0x55, PCF_CLOCK_12 | PCF_FREQ_45, 0,
		    envctrltwo_scan, &ea->ea_node);
	else
		pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), clock, swapregs,
		    ofwiic_scan, &ea->ea_node);
}

void
envctrl_scan(struct device *self, struct i2cbus_attach_args *iba, void *aux)
{
	extern int iic_print(void *, const char *);
	struct i2c_attach_args ia;

	memset(&ia, 0, sizeof(ia));
	ia.ia_tag = iba->iba_tag;
	ia.ia_cookie = aux;

	/* Power supply 1 temperature. */
	ia.ia_addr = 0x48;
	ia.ia_name = "ecadc";
	config_found(self, &ia, iic_print);

	/* Power supply 2 termperature. */
	ia.ia_addr = 0x49;
	ia.ia_name = "ecadc";
	config_found(self, &ia, iic_print);

	/* Power supply 3 tempterature. */
	ia.ia_addr = 0x4a;
	ia.ia_name = "ecadc";
	config_found(self, &ia, iic_print);

	/* Ambient tempterature. */
	ia.ia_addr = 0x4d;
	ia.ia_name = "lm75";
	config_found(self, &ia, iic_print);

	/* CPU temperatures. */
	ia.ia_addr = 0x4f;
	ia.ia_name = "ecadc";
	config_found(self, &ia, iic_print);
}

void
envctrltwo_scan(struct device *self, struct i2cbus_attach_args *iba, void *aux)
{
	extern int iic_print(void *, const char *);
	struct i2c_attach_args ia;

	memset(&ia, 0, sizeof(ia));
	ia.ia_tag = iba->iba_tag;
	ia.ia_cookie = aux;

	ia.ia_addr = 0x4a;
	ia.ia_name = "ecadc";
	config_found(self, &ia, iic_print);

	ia.ia_addr = 0x4f;
	ia.ia_name = "ecadc";
	config_found(self, &ia, iic_print);
}
@


1.12
log
@Support the pcf8584 variant found on the u25/45.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.11 2007/10/28 10:50:11 kettenis Exp $ */
d93 1
a93 1
	u_int8_t			clock = PCF_CLOCK_12;
d111 1
a111 1
			clock = PCF_CLOCK_3;
d113 1
a113 1
			clock = PCF_CLOCK_4_43;
@


1.11
log
@Match on compatible: 'pcf8584', such that we attach on the V210 again.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.10 2007/10/24 20:13:19 kettenis Exp $ */
d78 1
@


1.10
log
@Enable power supply temperature sensors on the E450.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.9 2007/10/22 22:39:10 kettenis Exp $ */
d76 2
a77 1
	if (strcmp(compat, "i2cpcf,8584") == 0 ||
@


1.9
log
@Add support for SUNW,envctrl as found on the E450.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.8 2007/10/20 18:54:42 kettenis Exp $ */
a185 1
#ifdef notyet
a199 1
#endif
@


1.8
log
@Add support for the temperature sensors on the SUNW,envctrltwo device found
on the Sun Enterprise 250.  This device (and SUNW,envctrl found on the
Enterprise 450) is a PCF8584 I2C controller with several generic I2C chips
attached to it.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.7 2007/05/21 03:11:11 jsg Exp $ */
d57 1
d66 2
a67 1
	if (strcmp(ea->ea_name, "SUNW,envctrltwo") == 0)
d99 2
a100 4
	if (OF_getprop(ea->ea_node, "compatible", compat, sizeof(compat)) == -1)
		return;

	if (strcmp(compat, "SUNW,bbc-i2c") == 0) {
d165 4
a168 1
	if (strcmp(ea->ea_name, "SUNW,envctrltwo") == 0)
d174 38
@


1.7
log
@Switch pcfiic to rwlock.
ok dlg@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.6 2006/06/29 00:01:03 deraadt Exp $ */
d57 2
d65 3
d74 2
a75 2
	if (strcmp(compat, "i2cpcf,8584") ||
	    strcmp(compat, "SUNW,bbc-i2c"))
d165 25
a189 2
	pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), clock, swapregs,
	    ofwiic_scan, &ea->ea_node);
@


1.6
log
@try prom mapping first, then memory mapping, then io mapping.. this works
on v210 and on netra t1 105, good sign it will work on others.  mechanism
pointed out by miod, tested by dlg and djm and I
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.5 2006/06/22 08:33:45 deraadt Exp $ */
d29 1
@


1.5
log
@BBC-based machines swap the two registers (good going Sun -- that is why we
don't get documentation, right?), and the clock fed into the chip can vary
from model to model; help & testing from dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.4 2006/06/14 01:15:19 deraadt Exp $ */
a85 2
	sc->sc_iot = ea->ea_memtag;

d116 16
a131 2
	if (ebus_bus_map(sc->sc_iot, 0, EBUS_PADDR_FROM_REG(&ea->ea_regs[0]),
	    ea->ea_regs[0].size, 0, 0, &sc->sc_ioh) != 0) {
d133 1
a133 1
		return;
d137 4
@


1.4
log
@support the iic busses on the ultrasparc III machines (something is still
wrong, likely clocking); tested to not break older machines by dlg & djm
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.3 2006/02/09 12:16:25 dlg Exp $ */
d32 1
d80 2
a81 1
        struct ebus_attach_args		*ea = aux;
d83 2
d93 18
d120 3
a122 3
                printf(": can't map register space\n");
                return;
        }
d143 2
a144 2
	pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), ofwiic_scan, &ea->ea_node);
	/* the rest of the attach line is printed by pcfiic_attach() */
@


1.3
log
@split the ofw scan up into two parts: one to find the i2c bus on a pci
device, and one to find i2c devices on the i2c bus.

tweaks and ok kettenis@@ ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.2 2006/02/01 11:08:22 dlg Exp $ */
d67 3
a69 2
	if (strcmp(compat, "i2cpcf,8584") != 0)
		return (0);
d71 1
a71 1
	return (1);
d84 2
a85 2
	if (ea->ea_nregs != 1) {
		printf(": expected 1 register, got %d\n", ea->ea_nregs);
d90 3
a92 5
		printf(": unable to get own address\n");
		return;
	}
	if (addr == 0x00 || addr > 0xff) {
		printf(": invalid address on I2C bus\n");
d101 9
@


1.2
log
@oops
@
text
@d1 1
a1 1
/*	$OpenBSD: pcfiic_ebus.c,v 1.1 2006/02/01 11:03:33 dlg Exp $ */
d113 1
a113 4
	pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), NULL, NULL);
#ifdef notyet
	pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), ofwi2c_scan, &ea->ea_node);
#endif
@


1.1
log
@a driver for the phillips pcf8584 i2c controller as found on the sun netra
t1 105.

tested by henning@@ djm@@
ok kettenis@@ put it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d113 1
d115 1
a115 1
	pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), NULL, NULL);
a116 1
	pcfiic_attach(sc, (i2c_addr_t)(addr >> 1), ofwi2c_scan, &ea->ea_node);
@

