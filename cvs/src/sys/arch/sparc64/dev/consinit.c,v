head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.18
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.20
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.12
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.16
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.14
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.10
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.14
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.12
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.4.0.6
	UBC_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.15
date	2016.03.07.13.21.51;	author naddy;	state Exp;
branches;
next	1.14;
commitid	EDvRPKRZUDEEb6oR;

1.14
date	2011.04.13.00.56.25;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.23.16.37.57;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.14.20.43.12;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.13.13.50.10;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.26.15.16.20;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.13.20.31.25;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.16.20.46.10;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.25.03.36.25;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.03.22.49.35;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.20.22.17.49;	author jason;	state Exp;
branches
	1.4.4.1
	1.4.6.1;
next	1.3;

1.3
date	2001.09.05.22.23.52;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.05.21.37;	author jason;	state Exp;
branches;
next	;

1.4.4.1
date	2001.10.31.03.07.57;	author nate;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.01.31.22.55.23;	author niklas;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.06.11.03.38.42;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Sync no-argument function declaration and definition by adding (void).
ok mpi@@
@
text
@/*	$OpenBSD: consinit.c,v 1.14 2011/04/13 00:56:25 deraadt Exp $	*/
/*	$NetBSD: consinit.c,v 1.9 2000/10/20 05:32:35 mrg Exp $	*/

/*-
 * Copyright (c) 1999 Eduardo E. Horvath
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "pcons.h"
#include "ukbd.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/file.h>
#include <sys/ioctl.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/tty.h>
#include <sys/time.h>
#include <sys/syslog.h>

#include <machine/autoconf.h>
#include <machine/openfirm.h>
#include <machine/conf.h>
#include <machine/cpu.h>
#include <machine/psl.h>
#include <machine/z8530var.h>
#include <machine/sparc64.h>

#include <dev/cons.h>

#include <sparc64/dev/cons.h>

#include <dev/usb/ukbdvar.h>

cons_decl(prom_);

int stdin = 0, stdout = 0;

/*
 * The console is set to this one initially,
 * which lets us use the PROM until consinit()
 * is called to select a real console.
 */
struct consdev consdev_prom = {
	prom_cnprobe,
	prom_cninit,
	prom_cngetc,
	prom_cnputc,
	prom_cnpollc,
	NULL
};

/*
 * The console table pointer is statically initialized
 * to point to the PROM (output only) table, so that
 * early calls to printf will work.
 */
struct consdev *cn_tab = &consdev_prom;

void
prom_cnprobe(struct consdev *cd)
{
#if NPCONS > 0
	int maj;

	for (maj = 0; maj < nchrdev; maj++)
		if (cdevsw[maj].d_open == pconsopen)
			break;
	cd->cn_dev = makedev(maj, 0);
	cd->cn_pri = CN_MIDPRI;
#endif
}

int
prom_cngetc(dev_t dev)
{
	unsigned char ch = '\0';
	int l;
#ifdef DDB
	static int nplus = 0;
#endif
	
	while ((l = OF_read(stdin, &ch, 1)) != 1)
		/* void */;
#ifdef DDB
	if (ch == '+') {
		if (nplus++ > 3)
			Debugger();
	} else
		nplus = 0;
#endif
	if (ch == '\r')
		ch = '\n';
	if (ch == '\b')
		ch = '\177';
	return ch;
}

void
prom_cninit(struct consdev *cn)
{
	if (!stdin) stdin = OF_stdin();
	if (!stdout) stdout = OF_stdout();
}

/*
 * PROM console output putchar.
 */
void
prom_cnputc(dev_t dev, int c)
{
	int s;
	char c0 = (c & 0x7f);

#if 0
	if (!stdout) stdout = OF_stdout();
#endif
	s = splhigh();
	OF_write(stdout, &c0, 1);
	splx(s);
}

void
prom_cnpollc(dev_t dev, int on)
{
	if (on) {
                /* Entering debugger. */
                fb_unblank();
	} else {
                /* Resuming kernel. */
	}
#if NPCONS > 0
	pcons_cnpollc(dev, on);
#endif  
}

/*****************************************************************/

#ifdef	DEBUG
#define	DBPRINT(x)	prom_printf x
#else
#define	DBPRINT(x)
#endif

/*
 * This function replaces sys/dev/cninit.c
 * Determine which device is the console using
 * the PROM "input source" and "output sink".
 */
void
consinit(void)
{
	register int chosen;
	char buffer[128];
	extern int stdinnode, fbnode;
	char *consname = "unknown";
	
	DBPRINT(("consinit()\r\n"));
	if (cn_tab != &consdev_prom) return;
	
	DBPRINT(("setting up stdin\r\n"));
	chosen = OF_finddevice("/chosen");
	OF_getprop(chosen, "stdin",  &stdin, sizeof(stdin));
	DBPRINT(("stdin instance = %x\r\n", stdin));
	
	if ((stdinnode = OF_instance_to_package(stdin)) == 0) {
		printf("WARNING: no PROM stdin\n");
	}
#if NUKBD > 0
	else {
		if (OF_getprop(stdinnode, "compatible", buffer,
		    sizeof(buffer)) != -1 && strncmp("usb", buffer, 3) == 0)
			ukbd_cnattach();
	}
#endif

	DBPRINT(("setting up stdout\r\n"));
	OF_getprop(chosen, "stdout", &stdout, sizeof(stdout));
	
	DBPRINT(("stdout instance = %x\r\n", stdout));
	
	if ((fbnode = OF_instance_to_package(stdout)) == 0)
		printf("WARNING: no PROM stdout\n");
	
	DBPRINT(("stdout package = %x\r\n", fbnode));
	
	if (stdinnode && (OF_getproplen(stdinnode,"keyboard") >= 0)) {
		consname = "keyboard/display";
	} else if (fbnode && 
		   (OF_instance_to_path(stdin, buffer, sizeof(buffer)) >= 0)) {
		consname = buffer;
	}
	printf("console is %s\n", consname);
 
	/* Initialize PROM console */
	(*cn_tab->cn_probe)(cn_tab);
	(*cn_tab->cn_init)(cn_tab);
}
@


1.14
log
@do not use NULL in an integer context
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.13 2008/01/23 16:37:57 jsing Exp $	*/
d177 1
a177 1
consinit()
@


1.13
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.12 2007/11/14 20:43:12 kettenis Exp $	*/
d63 1
a63 1
int stdin = NULL, stdout = NULL;
@


1.12
log
@Remove eeprom.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.11 2007/11/13 13:50:10 kettenis Exp $	*/
d96 1
a96 1
	cd->cn_pri = CN_INTERNAL;
@


1.11
log
@Remove bsd_openprom.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.10 2005/04/26 15:16:20 miod Exp $	*/
a50 1
#include <machine/eeprom.h>
@


1.10
log
@Use cons_decl() rather than rolling our own prototypes, and some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.9 2004/09/13 20:31:25 deraadt Exp $	*/
a48 1
#include <machine/bsd_openprom.h>
@


1.9
log
@for pcons tty and kernel console (ie. boot -a) input, replace prom ^H
with ^? as that is what we have standardized on for all delete keys.
this got missed, meaning boot -a and RAMDISK console tty were gross.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.8 2003/06/16 20:46:10 miod Exp $	*/
d63 1
a63 6
static void prom_cnprobe(struct consdev *);
static void prom_cninit(struct consdev *);
int  prom_cngetc(dev_t);
static void prom_cnputc(dev_t, int);
static void prom_cnpollc(dev_t, int);
static void prom_cnputc(dev_t, int);
d78 1
a78 1
	NULL,
d89 1
a89 2
prom_cnprobe(cd)
	struct consdev *cd;
d103 1
a103 2
prom_cngetc(dev)
	dev_t dev;
d115 4
a118 2
		if (nplus++ > 3) Debugger();
	} else nplus = 0;
d127 2
a128 3
static void
prom_cninit(cn)
	struct consdev *cn;
d137 2
a138 4
static void
prom_cnputc(dev, c)
	dev_t dev;
	int c;
d152 1
a152 3
prom_cnpollc(dev, on)
	dev_t dev;
	int on;
a226 1

@


1.8
log
@Provide the same fbxxx() api as on sparc, in order to factorize more code
and eventually share some drivers.
This also brings us screen unblanking upon entering ddb, which can be really
useful at times...
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.7 2002/03/14 01:26:44 millert Exp $	*/
d127 2
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.6 2002/01/25 03:36:25 jason Exp $	*/
a163 1
#if NFB > 0
a164 1
#endif  
@


1.6
log
@Remove more NKBD/NMS references (jason == cpp tonight I guess)
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.5 2002/01/03 22:49:35 jason Exp $	*/
d63 6
a68 6
static void prom_cnprobe __P((struct consdev *));
static void prom_cninit __P((struct consdev *));
int  prom_cngetc __P((dev_t));
static void prom_cnputc __P((dev_t, int));
static void prom_cnpollc __P((dev_t, int));
static void prom_cnputc __P((dev_t, int));
@


1.5
log
@call ukbd_cnattach() if the console keyboard is usb
[XXX this probbably doesn't belong here, but I haven't found a better
place yet and I'm bloody tired of using boot -d to set ukbd_is_console].
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.4 2001/09/20 22:17:49 jason Exp $	*/
a225 3
#if NKBD > 0		
		printf("cninit: kdb/display not configured\n");
#endif
@


1.4
log
@Incorrect parens (from netbsd)
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.3 2001/09/05 22:23:52 art Exp $	*/
d33 1
d61 2
d206 9
a214 2
	} 
		
@


1.4.6.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.6 2002/01/25 03:36:25 jason Exp $	*/
a32 1
#include "ukbd.h"
a59 2
#include <dev/usb/ukbdvar.h>

d203 2
a204 9
	}
#if NUKBD > 0
	else {
		if (OF_getprop(stdinnode, "compatible", buffer,
		    sizeof(buffer)) != -1 && strncmp("usb", buffer, 3) == 0)
			ukbd_cnattach();
	}
#endif

d216 3
@


1.4.6.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.4.6.1 2002/01/31 22:55:23 niklas Exp $	*/
d63 6
a68 6
static void prom_cnprobe(struct consdev *);
static void prom_cninit(struct consdev *);
int  prom_cngetc(dev_t);
static void prom_cnputc(dev_t, int);
static void prom_cnpollc(dev_t, int);
static void prom_cnputc(dev_t, int);
@


1.4.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4.4.2
log
@Merge in trunk
@
text
@a32 1
#include "ukbd.h"
a59 2
#include <dev/usb/ukbdvar.h>

d203 2
a204 9
	}
#if NUKBD > 0
	else {
		if (OF_getprop(stdinnode, "compatible", buffer,
		    sizeof(buffer)) != -1 && strncmp("usb", buffer, 3) == 0)
			ukbd_cnattach();
	}
#endif

d216 3
@


1.4.4.3
log
@Merge in -current from about a week ago
@
text
@d63 6
a68 6
static void prom_cnprobe(struct consdev *);
static void prom_cninit(struct consdev *);
int  prom_cngetc(dev_t);
static void prom_cnputc(dev_t, int);
static void prom_cnpollc(dev_t, int);
static void prom_cnputc(dev_t, int);
@


1.4.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d164 1
d166 1
@


1.3
log
@OF magic. From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: consinit.c,v 1.2 2001/08/20 20:23:52 jason Exp $	*/
d221 1
a221 1
		   (OF_instance_to_path(stdin, buffer, sizeof(buffer) >= 0))) {
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d221 1
a221 1
		   (OF_instance_to_path(stdinnode, buffer, sizeof(buffer) >= 0))) {
@


1.1
log
@Lot of stuff... Some from NetBSD, some from OpenBSD, minor modifications
@
text
@d1 1
@

