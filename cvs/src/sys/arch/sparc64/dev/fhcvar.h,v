head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.52
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.48
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.44
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.46
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.38
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.42
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.40
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.36
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.34
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.32
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.30
	OPENBSD_5_0:1.8.0.28
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.26
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.24
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2004.10.01.18.18.49;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.28.18.37.43;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.27.21.12.40;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.27.19.23.07;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.27.18.32.35;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.27.18.15.32;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.24.20.50.49;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.22.21.44.45;	author jason;	state Exp;
branches;
next	;


desc
@@


1.8
log
@add a blink_led API (shaves ~1k from GENERIC) rather than have the same
logic in 3 files.  Devices register a function to be called to turn the
led on and off based on load average. (Note: rerun config and make depend)
@
text
@/*	$OpenBSD: fhcvar.h,v 1.7 2004/09/28 18:37:43 jason Exp $	*/

/*
 * Copyright (c) 2004 Jason L. Wright (jason@@thought.net).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

struct fhc_reg {
	u_int32_t	fbr_slot;
	u_int32_t	fbr_offset;
	u_int32_t	fbr_size;
};

struct fhc_range {
	u_int32_t	cspace;		/* Client space */
	u_int32_t	coffset;	/* Client offset */
	u_int32_t	pspace;		/* Parent space */
	u_int32_t	poffset;	/* Parent offset */
	u_int32_t	size;		/* Size in bytes of this range */
};

struct fhc_softc {
	struct device sc_dv;
	int sc_node;
	int sc_is_central;		/* parent is central */
	int sc_board;
	u_int32_t sc_ign;
	bus_space_tag_t sc_bt;
	bus_space_tag_t sc_cbt;
	int sc_nrange;
	struct fhc_range *sc_range;
	bus_space_handle_t sc_preg;	/* internal regs */
	bus_space_handle_t sc_ireg;	/* ign regs */
	bus_space_handle_t sc_freg;	/* fanfail regs */
	bus_space_handle_t sc_sreg;	/* system regs */
	bus_space_handle_t sc_ureg;	/* uart regs */
	bus_space_handle_t sc_treg;	/* tod regs */
	struct blink_led sc_blink;
};

void fhc_attach(struct fhc_softc *);
int fhc_get_string(int, char *, char **);

struct fhc_attach_args {
	bus_space_tag_t fa_bustag;
	char *fa_name;
	int *fa_intr;
	struct fhc_reg *fa_reg;
	u_int32_t *fa_promvaddrs;
	int fa_node;
	int fa_nreg;
	int fa_nintr;
	int fa_npromvaddrs;
};

#define	fhc_bus_map(t, slot, offset, sz, flags, hp)		\
    bus_space_map(t, BUS_ADDR(slot, offset), sz, flags, hp)
@


1.7
log
@use prom mappings when availavk
@
text
@d1 1
a1 1
/*	$OpenBSD: fhcvar.h,v 1.6 2004/09/27 21:12:40 jason Exp $	*/
a52 1
	struct timeout sc_to;
d59 1
a78 2

void fhc_led_blink(void *);
@


1.6
log
@Important stuff: blinky lights for fhc
@
text
@d1 1
a1 1
/*	$OpenBSD: fhcvar.h,v 1.5 2004/09/27 19:23:07 jason Exp $	*/
d66 1
d68 3
d74 1
a74 3
	int *fa_intr;
	struct fhc_reg *fa_reg;
	bus_space_tag_t fa_bustag;
@


1.5
log
@setup ign based on board number
@
text
@d1 1
a1 1
/*	$OpenBSD: fhcvar.h,v 1.4 2004/09/27 18:32:35 jason Exp $	*/
d53 1
d77 2
@


1.4
log
@compute the board number of each fhc
@
text
@d1 1
a1 1
/*	$OpenBSD: fhcvar.h,v 1.3 2004/09/27 18:15:32 jason Exp $	*/
d48 1
@


1.3
log
@setup control register correctly and clear interrupts before attaching children
@
text
@d1 1
a1 1
/*	$OpenBSD: fhcvar.h,v 1.2 2004/09/24 20:50:49 jason Exp $	*/
d47 1
@


1.2
log
@setup interrupt handling for fhc attached devices
@
text
@d1 1
a1 1
/*	$OpenBSD: fhcvar.h,v 1.1 2004/09/22 21:44:45 jason Exp $	*/
d46 1
@


1.1
log
@firehose controller driver (not quite working) for the e4500 (and others)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 2
@

