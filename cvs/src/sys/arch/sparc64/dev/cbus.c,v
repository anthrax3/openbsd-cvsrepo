head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2016.12.20.13.40.50;	author jsg;	state Exp;
branches;
next	1.15;
commitid	i01X1vVvVdPgOOHT;

1.15
date	2015.09.27.11.29.20;	author kettenis;	state Exp;
branches;
next	1.14;
commitid	Um3BvP4zKyWaKQpf;

1.14
date	2015.01.25.21.42.13;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	ZoO3iubG0jt8mq0g;

1.13
date	2014.11.24.12.47.14;	author kettenis;	state Exp;
branches;
next	1.12;
commitid	PNLdVBxDaRSOa9UD;

1.12
date	2014.11.24.10.58.37;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	kWWAmEQQGwyhtyor;

1.11
date	2013.07.16.19.45.37;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2012.11.23.21.55.43;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.26.20.57.07;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.11.17.58.23;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.14.16.06.35;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.10.12.48.24;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.12.14.53.15;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.04.11.35.03;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.04.17.53.25;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.01.23.24.59;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.30.21.34.07;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.16
log
@no need to test if an array is non-NULL
ok kettenis@@
@
text
@/*	$OpenBSD: cbus.c,v 1.15 2015/09/27 11:29:20 kettenis Exp $	*/
/*
 * Copyright (c) 2008 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/systm.h>

#include <machine/autoconf.h>
#include <machine/hypervisor.h>
#include <machine/mdesc.h>
#include <machine/openfirm.h>

#include <sparc64/dev/cbusvar.h>
#include <sparc64/dev/vbusvar.h>

struct cbus_softc {
	struct device		sc_dv;
	bus_space_tag_t		sc_bustag;
	bus_dma_tag_t		sc_dmatag;

	uint64_t		sc_devhandle;

	/* Machine description. */
	int			sc_idx;
};

int	cbus_match(struct device *, void *, void *);
void	cbus_attach(struct device *, struct device *, void *);
int	cbus_print(void *, const char *);

struct cfattach cbus_ca = {
	sizeof(struct cbus_softc), cbus_match, cbus_attach
};

struct cfdriver cbus_cd = {
	NULL, "cbus", DV_DULL
};

void	*cbus_intr_establish(bus_space_tag_t, bus_space_tag_t, int, int, int,
    int (*)(void *), void *, const char *);
void	cbus_intr_ack(struct intrhand *);
bus_space_tag_t cbus_alloc_bus_tag(struct cbus_softc *, bus_space_tag_t);

int	cbus_get_channel_endpoint(struct cbus_softc *,
	    struct cbus_attach_args *);

int
cbus_match(struct device *parent, void *match, void *aux)
{
	struct vbus_attach_args *va = aux;

	if (strcmp(va->va_name, "channel-devices") == 0)
		return (1);

	return (0);
}

void
cbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct cbus_softc *sc = (struct cbus_softc *)self;
	struct vbus_attach_args *va = aux;
	int node;
	int reg;

	sc->sc_bustag = cbus_alloc_bus_tag(sc, va->va_bustag);
	sc->sc_dmatag = va->va_dmatag;

	if (OF_getprop(va->va_node, "reg", &reg, sizeof(reg)) != sizeof(reg))
		return;
	sc->sc_devhandle = reg;

	printf("\n");

	sc->sc_idx = mdesc_find(va->va_name, va->va_reg[0]);
	if (sc->sc_idx == -1)
		return;

	for (node = OF_child(va->va_node); node; node = OF_peer(node)) {
		struct cbus_attach_args ca;
		char buf[32];

		bzero(&ca, sizeof(ca));
		ca.ca_node = node;
		if (OF_getprop(node, "name", buf, sizeof(buf)) <= 0)
			continue;
		ca.ca_name = buf;
		ca.ca_bustag = sc->sc_bustag;
		ca.ca_dmatag = sc->sc_dmatag;
		getprop(node, "reg", sizeof(*ca.ca_reg),
		    &ca.ca_nreg, (void **)&ca.ca_reg);
		if (cbus_get_channel_endpoint(sc, &ca) != 0)
			continue;

		config_found(self, &ca, cbus_print);
	}
}

int
cbus_print(void *aux, const char *name)
{
	struct cbus_attach_args *ca = aux;

	if (name)
		printf("\"%s\" at %s", ca->ca_name, name);
	if (ca->ca_id != -1)
		printf(" chan 0x%llx", ca->ca_id);
	return (UNCONF);
}

int
cbus_intr_setstate(bus_space_tag_t t, uint64_t devino, uint64_t state)
{
	struct cbus_softc *sc = t->cookie;
	uint64_t devhandle = sc->sc_devhandle;
	int err;

	err = hv_vintr_setstate(devhandle, devino, state);
	if (err != H_EOK)
		return (-1);

	return (0);
}

int
cbus_intr_setenabled(bus_space_tag_t t, uint64_t devino, uint64_t enabled)
{
	struct cbus_softc *sc = t->cookie;
	uint64_t devhandle = sc->sc_devhandle;
	int err;

	err = hv_vintr_setenabled(devhandle, devino, enabled);
	if (err != H_EOK)
		return (-1);

	return (0);
}

void *
cbus_intr_establish(bus_space_tag_t t, bus_space_tag_t t0, int ihandle,
    int level, int flags, int (*handler)(void *), void *arg, const char *what)
{
	struct cbus_softc *sc = t0->cookie;
	uint64_t devhandle = sc->sc_devhandle;
	uint64_t devino = ihandle;
	struct intrhand *ih;
	int err;

	ih = bus_intr_allocate(t0, handler, arg, ihandle, level,
	    NULL, NULL, what);
	if (ih == NULL)
		return (NULL);

	err = hv_vintr_setenabled(devhandle, devino, INTR_DISABLED);
	if (err != H_EOK) {
		printf("hv_vintr_setenabled: %d\n", err);
		return (NULL);
	}

	err = hv_vintr_setcookie(devhandle, devino, (vaddr_t)ih);
	if (err != H_EOK) {
		printf("hv_vintr_setcookie: %d\n", err);
		return (NULL);
	}

	if (flags & BUS_INTR_ESTABLISH_MPSAFE)
		ih->ih_mpsafe = 1;

	evcount_attach(&ih->ih_count, ih->ih_name, NULL);

	ih->ih_ack = cbus_intr_ack;
	ih->ih_cpu = cpus;

	err = hv_vintr_settarget(devhandle, devino, ih->ih_cpu->ci_upaid);
	if (err != H_EOK) {
		printf("hv_vintr_settarget: %d\n", err);
		return (NULL);
	}

	/* Clear pending interrupts. */
	err = hv_vintr_setstate(devhandle, devino, INTR_IDLE);
	if (err != H_EOK) {
		printf("hv_vintr_setstate: %d\n", err);
		return (NULL);
	}

	return (ih);
}

void
cbus_intr_ack(struct intrhand *ih)
{
	bus_space_tag_t t = ih->ih_bus;
	struct cbus_softc *sc = t->cookie;
	uint64_t devhandle = sc->sc_devhandle;
	uint64_t devino = ih->ih_number;

	hv_vintr_setstate(devhandle, devino, INTR_IDLE);
}

bus_space_tag_t
cbus_alloc_bus_tag(struct cbus_softc *sc, bus_space_tag_t parent)
{
	struct sparc_bus_space_tag *bt;

	bt = malloc(sizeof(*bt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (bt == NULL)
		panic("could not allocate cbus bus tag");

	strlcpy(bt->name, sc->sc_dv.dv_xname, sizeof(bt->name));
	bt->cookie = sc;
	bt->parent = parent;
	bt->asi = parent->asi;
	bt->sasi = parent->sasi;
	bt->sparc_bus_map = parent->sparc_bus_map;
	bt->sparc_intr_establish = cbus_intr_establish;

	return (bt);
}

int
cbus_get_channel_endpoint(struct cbus_softc *sc, struct cbus_attach_args *ca)
{
	struct md_header *hdr;
	struct md_element *elem;
	const char *name_blk;
	const char *str;
	int idx;
	int arc;

	idx = mdesc_find_child(sc->sc_idx, ca->ca_name, ca->ca_reg[0]);
	if (idx == -1)
		return (ENOENT);

	hdr = (struct md_header *)mdesc;
	elem = (struct md_element *)(mdesc + sizeof(struct md_header));
	name_blk = mdesc + sizeof(struct md_header) + hdr->node_blk_sz;

	ca->ca_idx = idx;

	ca->ca_id = -1;
	ca->ca_tx_ino = -1;
	ca->ca_rx_ino = -1;

	if (strcmp(ca->ca_name, "disk") != 0 &&
	    strcmp(ca->ca_name, "network") != 0)
		return (0);

	for (; elem[idx].tag != 'E'; idx++) {
		str = name_blk + elem[idx].name_offset;
		if (elem[idx].tag != 'a' || strcmp(str, "fwd") != 0)
			continue;

		arc = elem[idx].d.val;
		str = name_blk + elem[arc].name_offset;
		if (strcmp(str, "virtual-device-port") == 0) {
			idx = arc;
			continue;
		}

		if (strcmp(str, "channel-endpoint") == 0) {
			ca->ca_id = mdesc_get_prop_val(arc, "id");
			ca->ca_tx_ino = mdesc_get_prop_val(arc, "tx-ino");
			ca->ca_rx_ino = mdesc_get_prop_val(arc, "rx-ino");
			return (0);
		}
	}

	return (0);
}
@


1.15
log
@Store the target CPU in "struct intrhand" and use it in intr_barrier().
Also use it wherever we configure the hardware to direct interrupts to the
right CPU.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.14 2015/01/25 21:42:13 kettenis Exp $	*/
d184 1
a184 4
	if (ih->ih_name)
		evcount_attach(&ih->ih_count, ih->ih_name, NULL);
	else
		evcount_attach(&ih->ih_count, "unknown", NULL);
@


1.14
log
@Rework cbus(4) interrupt support a bit.  Instead of merging devhandle and
devino into a pseudo-sysino, directly use the devino as the ihandle.  The
devhandle is stored in the cbus softc, and accessed through the bus space
tag.  This allows us to have more than 256 interrupts on a single cbus, and
avoids relying on the lower bits of the devhandle being zero.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.13 2014/11/24 12:47:14 kettenis Exp $	*/
d190 1
d192 1
a192 1
	err = hv_vintr_settarget(devhandle, devino, cpus->ci_upaid);
@


1.13
log
@If we use the vintr cookie to point at the interrupt handler struct, we
shouldn't link it into the table.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.12 2014/11/24 10:58:37 kettenis Exp $	*/
a30 3
#define CBUS_HANDLE(x) ((x) & ~0xff)
#define CBUS_INO(x) ((x) & 0xff)

d36 2
d79 1
d84 4
d127 1
a127 15
cbus_intr_map(int node, int ino, uint64_t *sysino)
{
	int parent;
	int reg;

	parent = OF_parent(node);
	if (OF_getprop(parent, "reg", &reg, sizeof(reg)) != sizeof(reg))
		return (-1);

	*sysino = CBUS_HANDLE(reg) | CBUS_INO(ino);
	return (0);
}

int
cbus_intr_setstate(uint64_t sysino, uint64_t state)
d129 2
a130 2
	uint64_t devhandle = CBUS_HANDLE(sysino);
	uint64_t devino = CBUS_INO(sysino);
d141 1
a141 1
cbus_intr_setenabled(uint64_t sysino, uint64_t enabled)
d143 2
a144 2
	uint64_t devhandle = CBUS_HANDLE(sysino);
	uint64_t devino = CBUS_INO(sysino);
d158 3
a160 2
	uint64_t devhandle = CBUS_HANDLE(ihandle);
	uint64_t devino = CBUS_INO(ihandle);
d210 4
a213 2
	uint64_t devhandle = CBUS_HANDLE(ih->ih_number);
	uint64_t devino = CBUS_INO(ih->ih_number);
@


1.12
log
@Use the pointer to "struct intrhand" as the vintr cookie.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.11 2013/07/16 19:45:37 kettenis Exp $	*/
d193 5
a197 1
	intr_establish(ih->ih_pil, ih);
@


1.11
log
@Add support for BUS_INTR_ESTABLISH_MPSAFE.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.10 2012/11/23 21:55:43 kettenis Exp $	*/
a126 1
	int err;
a132 4
	err = hv_vintr_setcookie(reg, ino, *sysino);
	if (err != H_EOK)
		return (-1);

d181 6
@


1.10
log
@Change the way we encode devhandle and devino in the sysino such that we can
handle up to 256 different interrupt vectors on cbus(4).  This is enough to
handle 128 channels.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.9 2012/10/26 20:57:07 kettenis Exp $	*/
d188 3
@


1.9
log
@Turns out that for devices that attach to cbus(4), it is better to disable
interrupts up-front and explicitly enabling them later than the other way
around.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.8 2010/11/11 17:58:23 miod Exp $	*/
d31 3
d133 1
a133 1
	*sysino = INTIGN(reg) | INTINO(ino);
d144 2
a145 2
	uint64_t devhandle = INTIGN(sysino);
	uint64_t devino = INTINO(sysino);
d158 2
a159 2
	uint64_t devhandle = INTIGN(sysino);
	uint64_t devino = INTINO(sysino);
d173 2
a174 2
	uint64_t devhandle = INTIGN(ihandle);
	uint64_t devino = INTINO(ihandle);
d211 2
a212 2
	uint64_t devhandle = INTIGN(ih->ih_number);
	uint64_t devino = INTINO(ih->ih_number);
@


1.8
log
@Replace snprintf(foo, sizeof foo, "%s", ...) with strlcpy. ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.7 2009/12/14 16:06:35 kettenis Exp $	*/
d180 6
a198 6
		return (NULL);
	}

	err = hv_vintr_setenabled(devhandle, devino, INTR_ENABLED);
	if (err != H_EOK) {
		printf("hv_vintr_setenabled: %d\n", err);
@


1.7
log
@Add wrapper functions to enable/disable interrupts and manipulate their state.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.6 2009/05/10 12:48:24 kettenis Exp $	*/
d223 1
a223 1
	snprintf(bt->name, sizeof(bt->name), "%s", sc->sc_dv.dv_xname);
@


1.6
log
@Handle devices with multiple ports.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.5 2009/04/12 14:53:15 kettenis Exp $	*/
d132 28
@


1.5
log
@Move code handling Machine Descriptions out of the cbus(4) driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.4 2009/04/04 11:35:03 kettenis Exp $	*/
d183 1
a183 1
	hv_vintr_setstate(devhandle, devino,  INTR_IDLE);
d224 10
a253 3
	ca->ca_id = -1;
	ca->ca_tx_ino = -1;
	ca->ca_rx_ino = -1;
@


1.4
log
@Cleanup debug printfs.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.3 2009/01/04 17:53:25 kettenis Exp $	*/
d25 1
a30 21
struct md_header {
	uint32_t	transport_version;
	uint32_t	node_blk_sz;
	uint32_t	name_blk_sz;
	uint32_t	data_blk_sz;
};

struct md_element {
	uint8_t		tag;
	uint8_t		name_len;
	uint16_t	_reserved_field;
	uint32_t	name_offset;
	union {
		struct {
			uint32_t	data_len;
			uint32_t	data_offset;
		} y;
		uint64_t	val;
	} d;
};

a36 1
	caddr_t			sc_md;
a56 1
caddr_t	cbus_get_mach_desc(struct cbus_softc *);
a59 5
uint64_t sun4v_mdesc_get_prop_val(caddr_t, int, const char *);
const char *sun4v_mdesc_get_prop_string(caddr_t, int, const char *);
int	sun4v_mdesc_find(caddr_t, const char *, uint64_t);
int	sun4v_mdesc_find_child(caddr_t, int, const char *, uint64_t);

a80 6
	sc->sc_md = cbus_get_mach_desc(sc);
	if (sc->sc_md == NULL) {
		printf(": can't read machine description\n");
		return;
	}

d83 1
a83 1
	sc->sc_idx = sun4v_mdesc_find(sc->sc_md, va->va_name, va->va_reg[0]);
a205 60
caddr_t
cbus_get_mach_desc(struct cbus_softc *sc)
{
	bus_dmamap_t map;
	bus_dma_segment_t seg;
	psize_t len;
	bus_size_t size;
	caddr_t va;
	int nsegs, err = 0;

	len = 0;
	hv_mach_desc((paddr_t)NULL, &len);
	KASSERT(len != 0);

again:
	size = roundup(len, PAGE_SIZE);

	if (bus_dmamap_create(sc->sc_dmatag, size, 1, size, 0,
	    BUS_DMA_NOWAIT | BUS_DMA_ALLOCNOW, &map) != 0)
		return (NULL);

	if (bus_dmamem_alloc(sc->sc_dmatag, size, PAGE_SIZE, 0, &seg,
	    1, &nsegs, BUS_DMA_NOWAIT) != 0)
		goto destroy;

	if (bus_dmamem_map(sc->sc_dmatag, &seg, 1, size,
	    &va, BUS_DMA_NOWAIT) != 0)
		goto free;

	if (bus_dmamap_load(sc->sc_dmatag, map, va, size,
	    NULL, BUS_DMA_NOWAIT) != 0)
		goto unmap;

	len = size;
	err = hv_mach_desc(map->dm_segs[0].ds_addr, &len);
	if (err != H_EOK)
		goto unload;

	return (va);

unload:
	bus_dmamap_unload(sc->sc_dmatag, map);
unmap:
	bus_dmamem_unmap(sc->sc_dmatag, va, size);
free:
	bus_dmamem_free(sc->sc_dmatag, &seg, 1);
destroy:
	bus_dmamap_destroy(sc->sc_dmatag, map);

	/*
	 * If the machine description was updated while we were trying
	 * to fetch it, the allocated buffer may have been to small.
	 * Try again in that case.
	 */
	if (err == H_EINVAL && len > size)
		goto again;

	return (NULL);
}

d216 1
a216 2
	idx = sun4v_mdesc_find_child(sc->sc_md, sc->sc_idx,
	    ca->ca_name, ca->ca_reg[0]);
d220 3
a222 3
	hdr = (struct md_header *)sc->sc_md;
	elem = (struct md_element *)(sc->sc_md + sizeof(struct md_header));
	name_blk = sc->sc_md + sizeof(struct md_header) + hdr->node_blk_sz;
d237 3
a239 6
			ca->ca_id =
			    sun4v_mdesc_get_prop_val(sc->sc_md, arc, "id");
			ca->ca_tx_ino =
			    sun4v_mdesc_get_prop_val(sc->sc_md, arc, "tx-ino");
			ca->ca_rx_ino = 
			    sun4v_mdesc_get_prop_val(sc->sc_md, arc, "rx-ino");
a247 98
}

uint64_t
sun4v_mdesc_get_prop_val(caddr_t md, int idx, const char *name)
{
	struct md_header *hdr;
	struct md_element *elem;
	const char *name_blk;
	const char *str;

	hdr = (struct md_header *)md;
	elem = (struct md_element *)(md + sizeof(struct md_header));
	name_blk = md + sizeof(struct md_header) + hdr->node_blk_sz;

	while (elem[idx].tag != 'E') {
		str = name_blk + elem[idx].name_offset;
		if (elem[idx].tag == 'v' && strcmp(str, name) == 0)
			return (elem[idx].d.val);
		idx++;
	}

	return (-1);
}

const char *
sun4v_mdesc_get_prop_string(caddr_t md, int idx, const char *name)
{
	struct md_header *hdr;
	struct md_element *elem;
	const char *name_blk;
	const char *data_blk;
	const char *str;

	hdr = (struct md_header *)md;
	elem = (struct md_element *)(md + sizeof(struct md_header));
	name_blk = md + sizeof(struct md_header) + hdr->node_blk_sz;
	data_blk = name_blk + hdr->name_blk_sz;

	while (elem[idx].tag != 'E') {
		str = name_blk + elem[idx].name_offset;
		if (elem[idx].tag == 's' && strcmp(str, name) == 0)
			return (data_blk + elem[idx].d.y.data_offset);
		idx++;
	}

	return (NULL);
}

int
sun4v_mdesc_find(caddr_t md, const char *name, uint64_t cfg_handle)
{
	struct md_header *hdr;
	struct md_element *elem;
	const char *str;
	uint64_t val;
	int idx;

	hdr = (struct md_header *)md;
	elem = (struct md_element *)(md + sizeof(struct md_header));

	for (idx = 0; elem[idx].tag == 'N'; idx = elem[idx].d.val) {
		str = sun4v_mdesc_get_prop_string(md, idx, "name");
		val = sun4v_mdesc_get_prop_val(md, idx, "cfg-handle");
		if (str && strcmp(str, name) == 0 && val == cfg_handle)
			return (idx);
	}

	return (-1);
}

int
sun4v_mdesc_find_child(caddr_t md, int idx, const char *name,
    uint64_t cfg_handle)
{
	struct md_header *hdr;
	struct md_element *elem;
	const char *name_blk;
	const char *str;
	uint64_t val;
	int arc;

	hdr = (struct md_header *)md;
	elem = (struct md_element *)(md + sizeof(struct md_header));
	name_blk = md + sizeof(struct md_header) + hdr->node_blk_sz;

	for (; elem[idx].tag != 'E'; idx++) {
		str = name_blk + elem[idx].name_offset;
		if (elem[idx].tag != 'a' || strcmp(str, "fwd") != 0)
			continue;

		arc = elem[idx].d.val;
		str = sun4v_mdesc_get_prop_string(md, arc, "name");
		val = sun4v_mdesc_get_prop_val(md, arc, "cfg-handle");
		if (str && strcmp(str, name) == 0 && val == cfg_handle)
			return (arc);
	}

	return (-1);
@


1.3
log
@Make cbus_print() less chatty and use "chan" instead of "id" when printing the
logical domain channel ID.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.2 2009/01/01 23:24:59 kettenis Exp $	*/
a279 1
	printf("unload\n");
a281 1
	printf("unmap\n");
a283 1
	printf("free\n");
a285 1
	printf("destroy\n");
@


1.2
log
@Add code to handle virtual interrupt for channel devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbus.c,v 1.1 2008/12/30 21:34:07 kettenis Exp $	*/
d148 1
a148 5
		printf(" id 0x%llx", ca->ca_id);
	if (ca->ca_tx_ino != -1)
		printf(" tx-ino 0x%llx", ca->ca_tx_ino);
	if (ca->ca_rx_ino != -1)
		printf(" rx-ino 0x%llx", ca->ca_rx_ino);
@


1.1
log
@Add cbus(4), a virtual bus for devices that use logical domain channels as
found on sun4v systems with multiple domains configured.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 5
d105 1
a105 1
	sc->sc_bustag = va->va_bustag;
d154 87
@

