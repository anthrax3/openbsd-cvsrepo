head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.36
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.38
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.34
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.30
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.32
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.24
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.28
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.26
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.22
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.20
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.18
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.16
	OPENBSD_5_0:1.18.0.14
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.12
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.10
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.6
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.5.0.6
	UBC_BASE:1.5
	SMP:1.5.0.4
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.18
date	2008.06.26.05.42.13;	author ray;	state Exp;
branches;
next	1.17;

1.17
date	2008.03.08.16.30.36;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.01.15.56.09;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.29.09.54.27;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.04.03.44.44;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.07.14.20.10;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.31.20.11.31;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.04.10.31.50;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.15.18.46.38;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.15.17.23.31;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.00;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.26.20.21.04;	author jason;	state Exp;
branches
	1.5.4.1
	1.5.6.1;
next	1.4;

1.4
date	2001.08.31.15.12.05;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.19.40.43;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.21.09.15;	author jason;	state Exp;
branches;
next	;

1.5.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;

1.5.6.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: autoconf.h,v 1.17 2008/03/08 16:30:36 kettenis Exp $	*/
/*	$NetBSD: autoconf.h,v 1.10 2001/07/24 19:32:11 eeh Exp $ */

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)autoconf.h	8.2 (Berkeley) 9/30/93
 */

/*
 * Autoconfiguration information.
 */

#include <machine/bus.h>
#include <dev/sbus/sbusvar.h>

/* This is used to map device classes to IPLs */
struct intrmap {
	char	*in_class;
	int	in_lev;
};
extern struct intrmap intrmap[];

/* The "mainbus" on ultra desktops is actually the UPA bus.  We need to
 * separate this from peripheral buses like SBus and PCI because each bus may
 * have different ways of encoding properties, such as "reg" and "interrupts".
 */

/* Device register space description */
struct upa_reg {
	int64_t	ur_paddr;
	int64_t	ur_len;
};

/* 
 * Attach arguments presented by mainbus_attach() 
 *
 * Large fields first followed by smaller ones to minimize stack space used.
 */
struct mainbus_attach_args {
	bus_space_tag_t	ma_bustag;	/* parent bus tag */
	bus_dma_tag_t	ma_dmatag;
	char		*ma_name;	/* PROM node name */
	struct upa_reg	*ma_reg;	/* "reg" properties */
	u_int		*ma_address;	/* "address" properties -- 32 bits */
	u_int		*ma_interrupts;	/* "interrupts" properties */
	int		ma_upaid;	/* UPA bus ID */
	int		ma_node;	/* PROM handle */
	int		ma_nreg;	/* Counts for those properties */
	int		ma_naddress;
	int		ma_ninterrupts;
	int		ma_pri;		/* priority (IPL) */
};

/*
 * length; the others convert or make some other guarantee.
 */
long	getproplen(int node, char *name);
int	getprop(int, char *, size_t, int *, void **);
char	*getpropstring(int node, char *name);
int	getpropint(int node, char *name, int deflt);
int	getpropspeed(int node, char *name);

/* Frequently used options node */
extern int optionsnode;

	/* new interfaces: */
char	*getpropstringA(int, char *, char *);

/*
 * `clockfreq' produces a printable representation of a clock frequency
 * (this is just a frill).
 */
char	*clockfreq(long freq);

/* Openprom V2 style boot path */
struct device;
struct bootpath {
	int	node;
	char	name[16];	/* name of this node */
	long	val[3];		/* up to three optional values */
	struct device *dev;	/* device that recognised this component */
};
struct bootpath	*bootpath_store(int, struct bootpath *);

/* Establish a mountroot_hook, for benefit of floppy drive, mostly. */
void	mountroot_hook_establish(void (*)(struct device *), struct device *);

void	bootstrap(int);
int	firstchild(int);
int	nextsibling(int);
void	callrom(void);
struct device *getdevunit(char *, int);
void	*findzs(int);
int	romgetcursoraddr(int **, int **);
int	findroot(void);
int	findnode(int, const char *);
int	checkstatus(int);
int	node_has_property(int, const char *);
void	device_register(struct device *, void *);
@


1.17
log
@Introduce a function to check the "status" property of an OFW node, and use it
to avoid attaching disabled or failed devices.

This should make it possible to manually deconfigure devices on mid-range and
high-end servers like the V880 using the "asr-disable" PROM command, and make
OpenBSD avoid using hardware that has been detected as faulty by the POST or
OpenBoot Diagnostics.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.16 2008/03/01 15:56:09 kettenis Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.16
log
@Add getpropspeed(); a function which decodes a property describing a serial
port configuration and returns the configured speed.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.15 2007/05/29 09:54:27 sobrado Exp $	*/
d168 1
@


1.15
log
@use the right capitalization for `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.14 2007/05/04 03:44:44 deraadt Exp $	*/
d132 1
@


1.14
log
@setroot() was a ugly mix of MI and MD code, with different bugs on different
machines.  Instead -- build one solid clean MI version, and thenchange all
the architectures to use it.  ok various people, tested on almost all cases.
(it is a 10094 line diff..)
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.13 2007/04/07 14:20:10 kettenis Exp $	*/
d95 1
a95 1
 * separate this from peripheral buses like SBUS and PCI because each bus may
@


1.13
log
@Replace code that tries to find the boot device by pretending to walk the
device tree and matching locators in the bootpath string components with
code that tries to match the PROM node of the devices to bootpath components.
This way we don't need a list of possible boot devices that needs to be
tweaked whenever we try to support new Sun hardware (or when dlg plugs a
new fancy storage controller in a sparc64 machine).

Tested by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.12 2006/05/31 20:11:31 jason Exp $	*/
a153 3

/* Parse a disk string into a dev_t, return device struct pointer */
struct	device *parsedisk(char *, int, int, dev_t *);
@


1.12
log
@extend the bootpath values to 64bits, and deal with fallout
extend str2hex to handle long's, and teach it that strings starting with 'w',
consisting of hex digits are really just hex digits
match fp to scsibus (fiber port)
match fiber channel portwwn/lun to it's bootpath variables
result: with a small change to isp(mailed to mjacob) we can correctly
autoconf with a boot path of:
/pci@@8,600000/SUNW,qlc@@4/fp@@0,0/disk@@w21000004cf948498,0:a/bsd
ie. schizo/   isp/       scsisbus/disk with port WWN of 21...98, lun 0, partition a
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.11 2006/03/04 10:31:50 miod Exp $	*/
d148 1
a149 1
	char	compatible[16];	/* "compatible" name of this node */
@


1.11
log
@<sparc64/dev/upavar.h> is unused except for struct upa_reg for autoconf, so
move it to <machine/autoconf.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.10 2005/03/15 18:46:38 miod Exp $	*/
d150 1
a150 1
	int	val[3];		/* up to three optional values */
@


1.10
log
@Nuke matchbyname(), which isn't used anymore.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.9 2003/06/02 23:27:56 millert Exp $	*/
a84 1
#include <sparc64/dev/upavar.h>
a96 3
 *
 * Eventually I'll create a real UPA bus module to allow servers with multiple
 * peripheral buses and things like FHC bus systems.
d98 6
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.8 2002/06/15 17:23:31 art Exp $	*/
a137 10
 * The matchbyname function is useful in drivers that are matched
 * by romaux name, i.e., all `mainbus attached' devices.  It expects
 * its aux pointer to point to a pointer to the name (the address of
 * a romaux structure suffices, for instance). (OBSOLETE)
 */
struct device;
struct cfdata;
int	matchbyname(struct device *, struct cfdata *cf, void *aux);

/*
d144 1
@


1.8
log
@Decruftification.

We will never have a.out kernels.
We will never have 32-bit kernels.
We will never have sun4c, sun4 and sun4m support in the sparc64 kernels.
We don't need support old netbsd libc.
The cpu will never be identified as some of the sun4c and sun4m types.
We don't need the gazillion of fields in cpuinfo that the sparc port uses.
Just generally remove dead code.

This is just a first step in making this meess readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.7 2002/03/14 03:16:00 millert Exp $	*/
d61 1
a61 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.6 2002/03/14 01:26:45 millert Exp $	*/
a164 1
int		sd_crazymap(int);
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.5 2001/09/26 20:21:04 jason Exp $	*/
d171 1
a171 2
void	mountroot_hook_establish __P((void (*)(struct device *),
				      struct device *));
@


1.5
log
@grab the "compatible" prom property and use that for searching the device
tree as well as the "name".  This allows us to differentiate 'sd' and 'wd'
pretty easily (and makes it less ambiguous).
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.4 2001/08/31 15:12:05 jason Exp $	*/
d130 4
a133 4
long	getproplen __P((int node, char *name));
int	getprop __P((int, char *, size_t, int *, void **));
char	*getpropstring __P((int node, char *name));
int	getpropint __P((int node, char *name, int deflt));
d139 1
a139 1
char	*getpropstringA __P((int, char *, char *));
d149 1
a149 1
int	matchbyname __P((struct device *, struct cfdata *cf, void *aux));
d155 1
a155 1
char	*clockfreq __P((long freq));
d164 2
a165 2
struct bootpath	*bootpath_store __P((int, struct bootpath *));
int		sd_crazymap __P((int));
d168 1
a168 1
struct	device *parsedisk __P((char *, int, int, dev_t *));
d171 1
a171 1
void	mountroot_hook_establish __P((void (*) __P((struct device *)),
d174 11
a184 11
void	bootstrap __P((int));
int	firstchild __P((int));
int	nextsibling __P((int));
void	callrom __P((void));
struct device *getdevunit __P((char *, int));
void	*findzs __P((int));
int	romgetcursoraddr __P((int **, int **));
int	findroot __P((void));
int	findnode __P((int, const char *));
int	node_has_property __P((int, const char *));
void	device_register __P((struct device *, void *));
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.5 2001/09/26 20:21:04 jason Exp $	*/
d130 4
a133 4
long	getproplen(int node, char *name);
int	getprop(int, char *, size_t, int *, void **);
char	*getpropstring(int node, char *name);
int	getpropint(int node, char *name, int deflt);
d139 1
a139 1
char	*getpropstringA(int, char *, char *);
d149 1
a149 1
int	matchbyname(struct device *, struct cfdata *cf, void *aux);
d155 1
a155 1
char	*clockfreq(long freq);
d164 2
a165 2
struct bootpath	*bootpath_store(int, struct bootpath *);
int		sd_crazymap(int);
d168 1
a168 1
struct	device *parsedisk(char *, int, int, dev_t *);
d171 2
a172 1
void	mountroot_hook_establish(void (*)(struct device *), struct device *);
d174 11
a184 11
void	bootstrap(int);
int	firstchild(int);
int	nextsibling(int);
void	callrom(void);
struct device *getdevunit(char *, int);
void	*findzs(int);
int	romgetcursoraddr(int **, int **);
int	findroot(void);
int	findnode(int, const char *);
int	node_has_property(int, const char *);
void	device_register(struct device *, void *);
@


1.5.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.5.6.1 2002/06/11 03:38:43 art Exp $	*/
d165 1
@


1.5.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.2
log
@Merge in -current from about a week ago
@
text
@d130 4
a133 4
long	getproplen(int node, char *name);
int	getprop(int, char *, size_t, int *, void **);
char	*getpropstring(int node, char *name);
int	getpropint(int node, char *name, int deflt);
d139 1
a139 1
char	*getpropstringA(int, char *, char *);
d149 1
a149 1
int	matchbyname(struct device *, struct cfdata *cf, void *aux);
d155 1
a155 1
char	*clockfreq(long freq);
d164 2
a165 2
struct bootpath	*bootpath_store(int, struct bootpath *);
int		sd_crazymap(int);
d168 1
a168 1
struct	device *parsedisk(char *, int, int, dev_t *);
d171 2
a172 1
void	mountroot_hook_establish(void (*)(struct device *), struct device *);
d174 11
a184 11
void	bootstrap(int);
int	firstchild(int);
int	nextsibling(int);
void	callrom(void);
struct device *getdevunit(char *, int);
void	*findzs(int);
int	romgetcursoraddr(int **, int **);
int	findroot(void);
int	findnode(int, const char *);
int	node_has_property(int, const char *);
void	device_register(struct device *, void *);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@d165 1
@


1.5.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.5.4.3 2003/03/27 23:42:36 niklas Exp $	*/
d61 5
a65 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@implement autoconf mechanism using device_register(); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.h,v 1.3 2001/08/20 20:23:52 jason Exp $	*/
d160 1
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a124 1
	struct bootpath	*ma_bp;
d183 1
a183 1

@


1.2
log
@more stuff to do with OpenBSD/sparc style bootpath determination
@
text
@d1 1
@


1.1
log
@more includes from NetBSD
@
text
@d124 1
@

