head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.34
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.36
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.32
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.28
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.30
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.22
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.26
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.24
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.20
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.18
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.16
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.14
	OPENBSD_5_0:1.13.0.12
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.10
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.6
	UBC_BASE:1.3
	SMP:1.3.0.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2008.12.30.00.54.24;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.09.21.06.05;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.10.08.57.05;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.07.14.46.18;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.19.20.21.01;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.08.15.42.26;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.08.17.48.12;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.17.03.51.48;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.16.20.00.16;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.26.17.32.19;	author deraadt;	state Exp;
branches
	1.3.4.1
	1.3.6.1;
next	1.2;

1.2
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.21.09.15;	author jason;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2004.02.19.10.50.00;	author niklas;	state Exp;
branches;
next	;

1.3.6.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Add domain state related PROM calls.
@
text
@/*	$OpenBSD: sparc64.h,v 1.12 2008/08/09 21:06:05 kettenis Exp $	*/
/*	$NetBSD: sparc64.h,v 1.3 2000/10/20 05:47:03 mrg Exp $	*/

/*
 * Copyright (C) 1996 Wolfgang Solfrank.
 * Copyright (C) 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef	_MACHINE_SPARC64_H_
#define	_MACHINE_SPARC64_H_

struct mem_region {
	u_int64_t start;
	u_int64_t size;
};

int prom_set_trap_table(vaddr_t tba, paddr_t mmfsa);
paddr_t prom_vtop(vaddr_t vaddr);
vaddr_t prom_claim_virt(vaddr_t vaddr, int len);
vaddr_t prom_alloc_virt(int len, int align);
int prom_free_virt(vaddr_t vaddr, int len);
int prom_unmap_virt(vaddr_t vaddr, int len);
int prom_map_phys(paddr_t paddr, off_t size, vaddr_t vaddr, int mode);
paddr_t prom_alloc_phys(int len, int align);
paddr_t prom_claim_phys(paddr_t phys, int len);
int prom_free_phys(paddr_t paddr, int len);
paddr_t prom_get_msgbuf(int len, int align);
int prom_itlb_load(int index, u_int64_t data, vaddr_t vaddr);
int prom_dtlb_load(int index, u_int64_t data, vaddr_t vaddr);
void prom_start_cpu(int cpu, void *func, long arg);
void prom_start_cpu_by_cpuid(int cpu, void *func, long arg);
const char *prom_serengeti_set_console_input(const char *);
time_t prom_opl_get_tod(void);
uint64_t prom_set_sun4v_api_version(uint64_t, uint64_t, uint64_t, uint64_t *);
void prom_sun4v_soft_state_supported(void);

/*
 * Debug
 */
void prom_printf(const char *, ...);
#endif	/* _MACHINE_SPARC64_H_ */
@


1.12
log
@Add prom_set_sun4v_api_version().
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.11 2008/07/10 08:57:05 kettenis Exp $	*/
d60 1
@


1.11
log
@Add a function to get the time of day from the prom on the m4k.
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.9 2008/03/19 20:21:01 kettenis Exp $	*/
d59 1
@


1.10
log
@Extend sbbc(4) to provide a console driver for the v1280.
@
text
@d58 1
@


1.9
log
@Add prom_itlb_load() and prom_dtlb_load().
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.8 2008/03/08 15:42:26 kettenis Exp $	*/
d57 1
@


1.8
log
@SUNW,set-trap-table takes an extra argument on sun4v; sun4u doesn't seem to
mind.

tested by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.7 2007/09/08 17:48:12 kettenis Exp $	*/
d53 2
@


1.7
log
@Add prom functions to start secondary CPUs.
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.6 2003/12/17 03:51:48 jason Exp $	*/
d42 1
a42 1
int prom_set_trap_table(vaddr_t tba);
@


1.6
log
@bad me, left commented code in here...
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.5 2003/12/16 20:00:16 jason Exp $	*/
d53 2
@


1.5
log
@uncessary defns
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.4 2002/03/14 01:26:45 millert Exp $	*/
a52 6

/*
 * Compatibility stuff.
 */
// #define OF_findroot()	OF_peer(0)
// #define OF_fd_phandle(x) OF_instance_to_package(x)
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.3 2001/09/26 17:32:19 deraadt Exp $	*/
d57 2
a58 14
#define OF_findroot()	OF_peer(0)
#define OF_fd_phandle(x) OF_instance_to_package(x)

/*
 * These two functions get used solely in boot() in machdep.c.
 *
 * Not sure whether boot itself should be implementation dependent instead.	XXX
 */
void ppc_exit(void) __attribute__((__noreturn__));
void ppc_boot(char *bootspec) __attribute__((__noreturn__));

int dk_match(char *name);

void ofrootfound(void);
@


1.3
log
@change *int64*_t types to long long; ok art/jason
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.2 2001/08/20 20:23:52 jason Exp $	*/
d42 11
a52 11
int prom_set_trap_table __P((vaddr_t tba));
paddr_t prom_vtop __P((vaddr_t vaddr));
vaddr_t prom_claim_virt __P((vaddr_t vaddr, int len));
vaddr_t prom_alloc_virt __P((int len, int align));
int prom_free_virt __P((vaddr_t vaddr, int len));
int prom_unmap_virt __P((vaddr_t vaddr, int len));
int prom_map_phys __P((paddr_t paddr, off_t size, vaddr_t vaddr, int mode));
paddr_t prom_alloc_phys __P((int len, int align));
paddr_t prom_claim_phys __P((paddr_t phys, int len));
int prom_free_phys __P((paddr_t paddr, int len));
paddr_t prom_get_msgbuf __P((int len, int align));
d65 2
a66 2
void ppc_exit __P((void)) __attribute__((__noreturn__));
void ppc_boot __P((char *bootspec)) __attribute__((__noreturn__));
d68 1
a68 1
int dk_match __P((char *name));
d70 1
a70 1
void ofrootfound __P((void));
d75 1
a75 1
void prom_printf __P((const char *, ...));
@


1.3.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sparc64.h,v 1.3 2001/09/26 17:32:19 deraadt Exp $	*/
d42 11
a52 11
int prom_set_trap_table(vaddr_t tba);
paddr_t prom_vtop(vaddr_t vaddr);
vaddr_t prom_claim_virt(vaddr_t vaddr, int len);
vaddr_t prom_alloc_virt(int len, int align);
int prom_free_virt(vaddr_t vaddr, int len);
int prom_unmap_virt(vaddr_t vaddr, int len);
int prom_map_phys(paddr_t paddr, off_t size, vaddr_t vaddr, int mode);
paddr_t prom_alloc_phys(int len, int align);
paddr_t prom_claim_phys(paddr_t phys, int len);
int prom_free_phys(paddr_t paddr, int len);
paddr_t prom_get_msgbuf(int len, int align);
d65 2
a66 2
void ppc_exit(void) __attribute__((__noreturn__));
void ppc_boot(char *bootspec) __attribute__((__noreturn__));
d68 1
a68 1
int dk_match(char *name);
d70 1
a70 1
void ofrootfound(void);
d75 1
a75 1
void prom_printf(const char *, ...);
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3.4.2
log
@Merge in -current from about a week ago
@
text
@d42 11
a52 11
int prom_set_trap_table(vaddr_t tba);
paddr_t prom_vtop(vaddr_t vaddr);
vaddr_t prom_claim_virt(vaddr_t vaddr, int len);
vaddr_t prom_alloc_virt(int len, int align);
int prom_free_virt(vaddr_t vaddr, int len);
int prom_unmap_virt(vaddr_t vaddr, int len);
int prom_map_phys(paddr_t paddr, off_t size, vaddr_t vaddr, int mode);
paddr_t prom_alloc_phys(int len, int align);
paddr_t prom_claim_phys(paddr_t phys, int len);
int prom_free_phys(paddr_t paddr, int len);
paddr_t prom_get_msgbuf(int len, int align);
d65 2
a66 2
void ppc_exit(void) __attribute__((__noreturn__));
void ppc_boot(char *bootspec) __attribute__((__noreturn__));
d68 1
a68 1
int dk_match(char *name);
d70 1
a70 1
void ofrootfound(void);
d75 1
a75 1
void prom_printf(const char *, ...);
@


1.3.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d55 18
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
u_int64_t prom_vtop __P((vaddr_t vaddr));
d48 3
a50 3
int prom_map_phys __P((u_int64_t paddr, off_t size, vaddr_t vaddr, int mode));
u_int64_t prom_alloc_phys __P((int len, int align));
u_int64_t prom_claim_phys __P((paddr_t phys, int len));
d52 1
a52 1
u_int64_t prom_get_msgbuf __P((int len, int align));
@


1.1
log
@more includes from NetBSD
@
text
@d1 1
@

