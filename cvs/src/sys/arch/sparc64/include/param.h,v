head	1.40;
access;
symbols
	OPENBSD_6_2:1.40.0.2
	OPENBSD_6_2_BASE:1.40
	OPENBSD_6_1:1.40.0.4
	OPENBSD_6_1_BASE:1.40
	OPENBSD_6_0:1.39.0.14
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.39.0.10
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.39.0.12
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.39.0.4
	OPENBSD_5_7_BASE:1.39
	OPENBSD_5_6:1.39.0.8
	OPENBSD_5_6_BASE:1.39
	OPENBSD_5_5:1.39.0.6
	OPENBSD_5_5_BASE:1.39
	OPENBSD_5_4:1.39.0.2
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.36.0.6
	OPENBSD_5_3_BASE:1.36
	OPENBSD_5_2:1.36.0.4
	OPENBSD_5_2_BASE:1.36
	OPENBSD_5_1_BASE:1.36
	OPENBSD_5_1:1.36.0.2
	OPENBSD_5_0:1.35.0.2
	OPENBSD_5_0_BASE:1.35
	OPENBSD_4_9:1.33.0.2
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.32.0.2
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.31.0.6
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.31.0.8
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.4
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.2
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.29.0.2
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.21.0.4
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.11
	UBC:1.6.0.2
	UBC_BASE:1.6
	SMP:1.4.0.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SPARC64:1.1.1.1
	NETBSD:1.1.1;
locks; strict;
comment	@ * @;


1.40
date	2016.09.03.14.25.27;	author bluhm;	state Exp;
branches;
next	1.39;
commitid	9KYyCUntEsgBdw9n;

1.39
date	2013.03.26.05.04.10;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2013.03.25.17.46.24;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2013.03.23.16.12.28;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2011.09.08.03.40.32;	author guenther;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.07.15.45.18;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.33;

1.33
date	2010.11.22.20.28.31;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2010.06.18.23.49.37;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2008.05.21.19.23.15;	author kettenis;	state Exp;
branches;
next	1.30;

1.30
date	2008.03.22.21.10.28;	author kettenis;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.27.22.20.16;	author martin;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.09.14.59.37;	author kettenis;	state Exp;
branches;
next	1.27;

1.27
date	2007.07.24.15.45.10;	author kettenis;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.22.21.33.04;	author kettenis;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.28.21.02.49;	author thib;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.02.14.05.39;	author tom;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.10.16.43.37;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2007.03.20.14.42.52;	author deanna;	state Exp;
branches;
next	1.21;

1.21
date	2006.08.12.17.54.38;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.19.01.47.24;	author martin;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.24.19.07.40;	author martin;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.12.23.05.06;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.08.15.25.55;	author martin;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.31.15.31.17;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.09.22.51.13;	author robert;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.06.22.31.31;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.19.22.55.50;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.15.17.23.31;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.15.00.38.37;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.12.01.49.43;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.19.05.22.57;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.10.01.05.28;	author miod;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.12.05.01.57.15;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.11.03.50.46;	author jason;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.08.18.20.15.34;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.18.15.27.30;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.04.16.37;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.18.04.16.37;	author jason;	state Exp;
branches;
next	;

1.4.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	1.4.4.5;

1.4.4.5
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	1.4.4.6;

1.4.4.6
date	2004.06.05.23.11.00;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Increase the number of mbufs on most architectures.  This is based
on a guess how much memory a typical machine has.  If the value is
too high, users may run out of kernel memory.  Then we will have
to adjust this again.
OK claudio@@ deraadt@@
@
text
@/*	$OpenBSD: param.h,v 1.39 2013/03/26 05:04:10 deraadt Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1996-1999 Eduardo Horvath
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR  ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR  BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef	_MACHINE_PARAM_H_
#define	_MACHINE_PARAM_H_

#define	_MACHINE	sparc64
#define	MACHINE		"sparc64"
#define	_MACHINE_ARCH	sparc64
#define	MACHINE_ARCH	"sparc64"
#define	MID_MACHINE	MID_SPARC64

#define	PAGE_SHIFT	13
#define	PAGE_SIZE	(1 << PAGE_SHIFT)
#define	PAGE_MASK	(PAGE_SIZE - 1)

/*
 * Here are all the magic kernel virtual addresses and how they're allocated.
 *
 * First, the PROM is usually a fixed-sized block from 0x00000000f0000000 to
 * 0x00000000f0100000.  It also uses some space around 0x00000000fff00000 to
 * map in device registers.  The rest is pretty much ours to play with.
 *
 * The kernel starts at KERNBASE.  Here's the layout.  We use macros to set
 * the addresses so we can relocate everything easily.  We use 4MB locked TTEs
 * to map in the kernel text and data segments.  Any extra pages are recycled,
 * so they can potentially be double-mapped.  This shouldn't really be a
 * problem since they're unused, but wild pointers can cause silent data
 * corruption if they are in those segments.
 *
 * 0x0000000000000000:	64K NFO page zero
 * 0x0000000000010000:	Userland or PROM
 * KERNBASE:		4MB kernel text and read only data
 *				This is mapped in the ITLB and
 *				Read-Only in the DTLB
 * KERNBASE+0x400000:	4MB kernel data and BSS -- not in ITLB
 *				Contains context table, kernel pmap,
 *				and other important structures.
 * KERNBASE+0x800000:	Unmapped page -- redzone
 * KERNBASE+0x802000:	Process 0 stack and u-area
 * KERNBASE+0x806000:	2 pages for pmap_copy_page and /dev/mem
 * KERNBASE+0x80a000:	Start of kernel VA segment
 * KERNEND:		End of kernel VA segment
 * KERNEND+0x02000:	Auxreg_va (unused?)
 * KERNEND+0x04000:	TMPMAP_VA (unused?)
 * KERNEND+0x06000:	message buffer.
 * KERNEND+0x010000:	64K locked TTE -- different for each CPU
 *			Contains interrupt stack, cpu_info structure,
 *			and 32KB kernel TSB.
 *
 */
#define	KERNBASE	0x001000000	/* start of kernel virtual space */

#ifdef _KERNEL

#define	KERNEND		0x0e0000000	/* end of kernel virtual space */

#define	_MAXNBPG	8192	/* fixed VAs, independent of actual NBPG */

#define	AUXREG_VA	(      KERNEND + _MAXNBPG) /* 1 page REDZONE */
#define	TMPMAP_VA	(    AUXREG_VA + _MAXNBPG)
#define	MSGBUF_VA	(    TMPMAP_VA + _MAXNBPG)
/*
 * Here's the location of the interrupt stack and CPU structure.
 */
#define	INTSTACK	(      KERNEND + 8*_MAXNBPG)/* 64K after kernel end */
#define	EINTSTACK	(     INTSTACK + 2*USPACE)	/* 32KB */
#define	CPUINFO_VA	(    EINTSTACK)

#define	NBPG		PAGE_SIZE		/* bytes/page */
#define	PGSHIFT		PAGE_SHIFT		/* LOG2(PAGE_SIZE) */
#define	PGOFSET		PAGE_MASK		/* byte offset into page */

#define	UPAGES		2			/* pages of u-area */
#define	USPACE		(UPAGES * PAGE_SIZE)	/* total size of u-area */
#define	USPACE_ALIGN	0			/* u-area alignment 0-none */

#define	NMBCLUSTERS	(16 * 1024)		/* max cluster allocation */

#ifndef	MSGBUFSIZE
#define	MSGBUFSIZE	(1 * PAGE_SIZE)
#endif

/*
 * Maximum size of the kernel malloc arena in PAGE_SIZE-sized
 * logical pages.
 */
#define	NKMEMPAGES_MAX_DEFAULT	((128 * 1024 * 1024) >> PAGE_SHIFT)

#ifndef _LOCORE

extern void	delay(unsigned int);
#define	DELAY(n)	delay(n)

extern int cputyp;

#if defined (SUN4US) || defined (SUN4V)
#define	CPU_ISSUN4U	(cputyp == CPU_SUN4U)
#define	CPU_ISSUN4US	(cputyp == CPU_SUN4US)
#define	CPU_ISSUN4V	(cputyp == CPU_SUN4V)
#else
#define	CPU_ISSUN4U	(1)
#define	CPU_ISSUN4US	(0)
#define	CPU_ISSUN4V	(0)
#endif

#endif /* _LOCORE */

/*
 * Values for the cputyp variable.
 */
#define	CPU_SUN4	0
#define	CPU_SUN4C	1
#define	CPU_SUN4M	2
#define	CPU_SUN4U	3
#define	CPU_SUN4US	4
#define	CPU_SUN4V	5

/*
 * On a sun4u machine, the page size is 8192.
 */

#ifndef _LOCORE
#include <machine/cpu.h>
#endif

#endif /* _KERNEL */

#endif /* _MACHINE_PARAM_H_ */
@


1.39
log
@PGSHIFT and PGOFSET are now contained inside the kernel namespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.38 2013/03/25 17:46:24 deraadt Exp $	*/
d138 1
a138 1
#define	NMBCLUSTERS	4096			/* map size, max cluster allocation */
@


1.38
log
@ALIGNBYTES/ALIGN/ALIGNED_POINTER can move to the MI file.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.37 2013/03/23 16:12:28 deraadt Exp $	*/
a75 2
#define	PGSHIFT		PAGE_SHIFT		/* LOG2(PAGE_SIZE) */
#define	PGOFSET		PAGE_MASK		/* byte offset into page */
d131 2
@


1.37
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.36 2011/09/08 03:40:32 guenther Exp $	*/
a71 4

#define	ALIGNBYTES		_ALIGNBYTES
#define	ALIGN(p)		_ALIGN(p)
#define	ALIGNED_POINTER(p,t)	_ALIGNED_POINTER(p,t)
@


1.36
log
@Provide namespace-safe alignment macros in <machine/_types.h>, with
compat names kept in <machine/param.h>.  In <sys/socket.h>, pull
in <sys/_types.h> instead of the namespace polluting <machine/param.h>
and completely eliminate __CMSG_ALIGN, replaced by _ALIGN

ok deraadt@@
@
text
@d1 1
a1 2
/*	$OpenBSD: param.h,v 1.35 2011/04/07 15:45:18 miod Exp $	*/
/*	$NetBSD: param.h,v 1.25 2001/05/30 12:28:51 mrg Exp $ */
a38 2
 *
 *	@@(#)param.h	8.1 (Berkeley) 6/11/93
d49 1
a49 1
 *  
d64 2
a65 2
#ifndef _MACHINE_PARAM_H_
#define _MACHINE_PARAM_H_
d77 5
a81 10
#define	DEV_BSHIFT	9		/* log2(DEV_BSIZE) */
#define	DEV_BSIZE	(1 << DEV_BSHIFT)
#define	BLKDEV_IOSIZE	2048
#define	MAXPHYS		(64 * 1024)

/* We get stack overflows w/8K stacks in 64-bit mode */
#define	UPAGES		2		/* initial stack size in pages */
#define	USPACE		(UPAGES*8192)
#define	USPACE_ALIGN	(0)		/* u-area alignment 0-none */

d85 1
a85 1
 * 
d100 1
a100 1
 *				This is mapped in the ITLB and 
d119 3
d124 1
a124 1
#define _MAXNBPG	8192	/* fixed VAs, independent of actual NBPG */
d132 1
a132 1
#define INTSTACK	(      KERNEND + 8*_MAXNBPG)/* 64K after kernel end */
d136 7
a142 4
/*
 * Constants related to network buffer management.
 */
#define	NMBCLUSTERS	4096		/* map size, max cluster allocation */
d144 3
a146 1
#define MSGBUFSIZE	NBPG
d149 1
a149 1
 * Minimum and maximum sizes of the kernel malloc arena in PAGE_SIZE-sized
a151 1
#define	NKMEMPAGES_MIN_DEFAULT	((8 * 1024 * 1024) >> PAGE_SHIFT)
a153 9
/* pages ("clicks") to disk blocks */
#define	ctod(x)		((x) << (PGSHIFT - DEV_BSHIFT))
#define	dtoc(x)		((x) >> (PGSHIFT - DEV_BSHIFT))

/* bytes to disk blocks */
#define	btodb(x)	((x) >> DEV_BSHIFT)
#define	dbtob(x)	((x) << DEV_BSHIFT)

#ifdef _KERNEL
d162 3
a164 3
#define CPU_ISSUN4U	(cputyp == CPU_SUN4U)
#define CPU_ISSUN4US	(cputyp == CPU_SUN4US)
#define CPU_ISSUN4V	(cputyp == CPU_SUN4V)
d166 3
a168 3
#define CPU_ISSUN4U	(1)
#define CPU_ISSUN4US	(0)
#define CPU_ISSUN4V	(0)
a171 1
#endif /* _KERNEL */
d176 6
a181 6
#define CPU_SUN4	0
#define CPU_SUN4C	1
#define CPU_SUN4M	2
#define CPU_SUN4U	3
#define CPU_SUN4US	4
#define CPU_SUN4V	5 
a186 9
#define	NBPG		8192		/* bytes/page */
#define	PGOFSET		(NBPG-1)	/* byte offset into page */
#define	PGSHIFT		13		/* log2(NBPG) */

#define PAGE_SHIFT	13
#define PAGE_SIZE	(1 << PAGE_SHIFT)
#define PAGE_MASK	(PAGE_SIZE - 1)

#ifdef _KERNEL
a189 1
#endif
d191 3
a193 1
#endif	/* _MACHINE_PARAM_H_ */
@


1.35
log
@Make sure the ALIGN() macro uses u_long on all platforms for consistency, and
update the comment block accordingly.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.34 2011/03/23 16:54:37 pirofti Exp $	*/
d76 3
a78 14
/*
 * Round p (pointer or byte index) up to a correctly-aligned value for
 * the machine's strictest data type.  The result is u_long and must be
 * cast to any desired pointer type.
 *
 * ALIGNED_POINTER is a boolean macro that checks whether an address
 * is valid to fetch data elements of type t from on this architecture.
 * This does not reflect the optimal alignment, just the possibility
 * (within reasonable limits). 
 *
 */
#define	ALIGNBYTES		0xf
#define	ALIGN(p)		(((u_long)(p) + ALIGNBYTES) & ~ALIGNBYTES)
#define ALIGNED_POINTER(p,t)	((((u_long)(p)) & (sizeof(t)-1)) == 0)
@


1.34
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.33 2010/11/22 20:28:31 miod Exp $	*/
d78 1
a78 1
 * the machine's strictest data type.  The result is u_int and must be
@


1.33
log
@Remove unused VM_MAX_KERNEL_BUF define.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.32 2010/06/18 23:49:37 miod Exp $	*/
d67 2
a68 2
#ifndef _SPARC64_PARAM_H_
#define _SPARC64_PARAM_H_
d223 1
a223 1
#endif	/* _SPARC64_PARAM_H_ */
@


1.32
log
@Remove obsolete dvmamap comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.31 2008/05/21 19:23:15 kettenis Exp $	*/
a138 1
#define	VM_MAX_KERNEL_BUF	((KERNEND-KERNBASE)/4)
@


1.31
log
@First step towards supporting sun4us machines with Fujitsu's SPARC64-V CPU.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.30 2008/03/22 21:10:28 kettenis Exp $	*/
a174 10
/*
 * dvmamap manages a range of DVMA addresses intended to create double
 * mappings of physical memory. In a way, `dvmamap' is a submap of the
 * VM map `phys_map'. The difference is the use of the `resource map'
 * routines to manage page allocation, allowing DVMA addresses to be
 * allocated and freed from within interrupt routines.
 *
 * Note that `phys_map' can still be used to allocate memory-backed pages
 * in DVMA space.
 */
@


1.30
log
@Reintroduce the cputyp variable, and use it to distinguish between sun4u and
sun4v.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.29 2007/10/27 22:20:16 martin Exp $	*/
d193 3
a195 1
#ifdef SUN4V
a196 1
#define CPU_ISSUN4U	(cputyp == CPU_SUN4U)
d198 2
a200 1
#define CPU_ISSUN4U	(1)
d213 2
a214 1
#define CPU_SUN4V	4 
@


1.29
log
@get rid of btoc/ctob in favor of atop/ptoa
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.28 2007/09/09 14:59:37 kettenis Exp $	*/
d191 10
d211 1
@


1.28
log
@Add a few missing bits to include/cpu.h required for MULTIPROCESSOR kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.27 2007/07/24 15:45:10 kettenis Exp $	*/
a169 4

/* pages to bytes */
#define	ctob(x)		((x) << PGSHIFT)
#define	btoc(x)		(((vsize_t)(x) + PGOFSET) >> PGSHIFT)
@


1.27
log
@Remove some goo for dealing with 32-bit cpu's.

"I don't mind this diff" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.26 2007/07/22 21:33:04 kettenis Exp $	*/
a75 6
#ifdef _KERNEL				/* XXX */
#ifndef _LOCORE				/* XXX */
#include <machine/cpu.h>		/* XXX */
#endif					/* XXX */
#endif					/* XXX */

d217 6
@


1.26
log
@Get rid of the fixe VA range for device mappings; use uvm_km_valloc() instead.
This allows mappings of more than 256MB, needed by some frame buffers.

"looks good", miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.25 2007/05/28 21:02:49 thib Exp $	*/
a96 11

/*
 * The following variables are always defined and initialized (in locore)
 * so independently compiled modules (e.g. LKMs) can be used irrespective
 * of the `options SUN4?' combination a particular kernel was configured with.
 * See also the definitions of NBPG, PGOFSET and PGSHIFT below.
 */
#if (defined(_KERNEL) || defined(_STANDALONE)) && !defined(_LOCORE)
extern int nbpg, pgofset, pgshift;
#endif

a212 3
 * Shorthand CPU-type macros. Enumerate all seven cases.
 * Let compiler optimize away code conditional on constants.
 *
a213 4
 *
 * Note that whenever the macros defined below evaluate to expressions
 * involving variables, the kernel will perform slightly worse due to the
 * extra memory references they'll generate.
a215 7
#define CPU_ISSUN4U	(1)
#define CPU_ISSUN4MOR4U	(1)
#define CPU_ISSUN4M	(0)
#define CPU_ISSUN4C	(0)
#define CPU_ISSUN4	(0)
#define CPU_ISSUN4OR4C	(0)
#define CPU_ISSUN4COR4M	(0)
@


1.25
log
@Move the MSIZE, MCLSHIFT, MCLBYTES and the MCLOFSET
mbuf constants from MD param.h to MI param.h.
Besides being the same on every arch, things will
most probly break if any arch has different values
then the others.

The NMBCLUSTERS constants needs to be MD though;

ok miod@@,krw@@,claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.24 2007/05/02 14:05:39 tom Exp $	*/
a151 2
 * KERNEND+0x020000:	IODEV_BASE -- begin mapping IO devices here.
 * 0x00000000fe000000:	IODEV_END -- end of device mapping space.
a168 2
#define	IODEV_BASE	(   CPUINFO_VA + 8*_MAXNBPG)/* 64K long */
#define	IODEV_END	0x0f0000000UL		/* 16 MB of iospace */
@


1.24
log
@Fix typo.  ok miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.23 2007/04/10 16:43:37 miod Exp $	*/
d176 1
a176 9
 * MCLBYTES must be no larger than NBPG (the software page size), and,
 * on machines that exchange pages of input or output buffers with mbuf
 * clusters (MAPPED_MBUFS), MCLBYTES must also be an integral multiple
 * of the hardware page size.
 */
#define	MSIZE		256		/* size of an mbuf */
#define	MCLSHIFT	11		/* log2(MCLBYTES) */
#define	MCLBYTES	(1 << MCLSHIFT)	/* enough for whole Ethernet packet */
#define	MCLOFSET	(MCLBYTES - 1)
@


1.23
log
@slighly -> slightly
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.22 2007/03/20 14:42:52 deanna Exp $	*/
d126 1
a126 1
 * The kernel starts at KERNBASE.  Here's they layout.  We use macros to set
@


1.22
log
@Remove unused ALIGN32 macro.  It wouldn't work anyway, since
ALIGNBYTES32 has been gone for years.

ok art
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.21 2006/08/12 17:54:38 krw Exp $	*/
d242 1
a242 1
 * involving variables, the kernel will perform slighly worse due to the
@


1.21
log
@Make all DEV_BSIZE definitions consistant by using (1 << DEV_BSHIFT)
in the six cases using "512".

As DEV_BSHIFT is always 9, this should be a no-op.

"no objections" miod@@ "I can't see any problem doing this." pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.20 2006/03/19 01:47:24 martin Exp $	*/
a94 1
#define ALIGN32(p)		(((u_long)(p) + ALIGNBYTES32) & ~ALIGNBYTES32)
@


1.20
log
@remove unused bdbtofsb(bn) macro

found by drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.19 2005/10/24 19:07:40 martin Exp $	*/
a108 1
#define	DEV_BSIZE	512
d110 1
@


1.19
log
@Mach-macro free
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.18 2005/09/12 23:05:06 miod Exp $	*/
a207 8

/*
 * Map a ``block device block'' to a file system block.
 * This should be device dependent, and should use the bsize
 * field from the disk label.
 * For now though just use DEV_BSIZE.
 */
#define	bdbtofsb(bn)	((bn) / (BLKDEV_IOSIZE / DEV_BSIZE))
@


1.18
log
@Change the NKMEMPAGES range to 4-64MB for 32bit arches, and 8-128MB for 64bit
arches; except on sparc where the range is 4-8 for !sun4m and 4-64 for sun4m,
selected at runtime.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.17 2005/09/08 15:25:55 martin Exp $	*/
a215 5

/*
 * Mach derived conversion macros
 */
#define sparc64_btop(x)	((unsigned long)(x) >> PGSHIFT)
@


1.17
log
@make comments match the fact that we are on sun4u, plus minor cleanup

ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.16 2005/07/31 15:31:17 miod Exp $	*/
d194 1
a194 1
#define	NKMEMPAGES_MIN_DEFAULT	((6 * 1024 * 1024) >> PAGE_SHIFT)
@


1.16
log
@Get rid of unused SINCR and SSIZE constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.15 2005/07/09 22:51:13 robert Exp $	*/
d250 1
a250 1
 * Shorthand CPU-type macros. Enumerate all eight cases.
d253 1
a253 4
 * On a sun4 machine, the page size is 8192, while on a sun4c and sun4m
 * it is 4096. Therefore, in the (SUN4 && (SUN4C || SUN4M)) cases below,
 * NBPG, PGOFSET and PGSHIFT are defined as variables which are initialized
 * early in locore.s after the machine type has been detected.
@


1.15
log
@Implement _bus_dmamem_mmap instead of just calling panic();
This is needed by bktr(4).

ok mickey@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.14 2004/08/06 22:31:31 mickey Exp $	*/
d115 2
a116 2
#define	SSIZE		2		/* initial stack size in pages */
#define	USPACE		(SSIZE*8192)
@


1.14
log
@provide md USPACE_ALIGN zero on all but mips; deradat@@ pefo@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.13 2004/04/19 22:55:50 deraadt Exp $	*/
d216 5
@


1.13
log
@remove the GATEWAY junk thingy; at the same time, select a new fat
cluster value that noone will really need to crank.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.12 2003/06/02 23:27:56 millert Exp $	*/
d117 1
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.11 2002/06/15 17:23:31 art Exp $	*/
d185 1
a185 8

#ifndef NMBCLUSTERS
#ifdef GATEWAY
#define	NMBCLUSTERS	2048		/* map size, max cluster allocation */
#else
#define	NMBCLUSTERS	1024		/* map size, max cluster allocation */
#endif
#endif
@


1.11
log
@Decruftification.

We will never have a.out kernels.
We will never have 32-bit kernels.
We will never have sun4c, sun4 and sun4m support in the sparc64 kernels.
We don't need support old netbsd libc.
The cpu will never be identified as some of the sun4c and sun4m types.
We don't need the gazillion of fields in cpuinfo that the sparc port uses.
Just generally remove dead code.

This is just a first step in making this meess readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.10 2002/06/15 00:38:37 art Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@gc some leftovers from sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.9 2002/06/12 01:49:43 art Exp $	*/
a75 1
#ifdef __arch64__
a78 5
#else
#define	_MACHINE_ARCH	sparc
#define	MACHINE_ARCH	"sparc"
#define	MID_MACHINE	MID_SPARC
#endif
d97 1
a97 7
#define ALIGNBYTES32		0x7
#define ALIGNBYTES64		0xf
#ifdef __arch64__
#define	ALIGNBYTES		ALIGNBYTES64
#else
#define	ALIGNBYTES		ALIGNBYTES32
#endif
a117 1
#ifdef __arch64__
a119 3
#else
#define	SSIZE		2
#endif
@


1.9
log
@Remove some #if 0 cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.8 2002/03/14 01:26:45 millert Exp $	*/
a257 4

extern int cputyp;
extern int cpumod;
extern int mmumod;
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.7 2002/02/19 05:22:57 jason Exp $	*/
a254 15
#if 0
extern vaddr_t	dvma_base;
extern vaddr_t	dvma_end;
extern struct map	*dvmamap;
/*
 * The dvma resource map is defined in page units, which are numbered 1 to N.
 * Use these macros to convert to/from virtual addresses.
 */
#define rctov(n)		(ctob(((n)-1))+dvma_base)
#define vtorc(v)		((btoc((v)-dvma_base))+1)

extern caddr_t	kdvma_mapin(caddr_t, int, int);
extern caddr_t	dvma_malloc(size_t, void *, int);
extern void	dvma_free(caddr_t, size_t, void *);
#endif
@


1.7
log
@bump NMBCLUSTERS
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.6 2001/12/10 01:05:28 miod Exp $	*/
d266 3
a268 3
extern caddr_t	kdvma_mapin __P((caddr_t, int, int));
extern caddr_t	dvma_malloc __P((size_t, void *, int));
extern void	dvma_free __P((caddr_t, size_t, void *));
d271 1
a271 1
extern void	delay __P((unsigned int));
@


1.6
log
@Define MCLBYTES from MCLSHIFT, rather than providing the final value.
(sync with other arches)
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.5 2001/12/05 01:57:15 provos Exp $	*/
d208 1
a208 1
#define	NMBCLUSTERS	512		/* map size, max cluster allocation */
d210 1
a210 1
#define	NMBCLUSTERS	256		/* map size, max cluster allocation */
@


1.6.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.6 2001/12/10 01:05:28 miod Exp $	*/
d208 1
a208 1
#define	NMBCLUSTERS	2048		/* map size, max cluster allocation */
d210 1
a210 1
#define	NMBCLUSTERS	1024		/* map size, max cluster allocation */
d266 3
a268 3
extern caddr_t	kdvma_mapin(caddr_t, int, int);
extern caddr_t	dvma_malloc(size_t, void *, int);
extern void	dvma_free(caddr_t, size_t, void *);
d271 1
a271 1
extern void	delay(unsigned int);
@


1.6.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.6.2.1 2002/06/11 03:38:43 art Exp $	*/
d76 1
d80 5
d103 7
a109 1
#define	ALIGNBYTES		0xf
d130 1
d133 3
d255 15
d273 4
@


1.5
log
@make nkmempages dynamic based on memory. okay art@@ from netbsd:
date: 2000/02/11 19:22:52;  author: thorpej;
Add some very simple code to auto-size the kmem_map.  We take the
amount of physical memory, divide it by 4, and then allow machine
dependent code to place upper and lower bounds on the size.  Export
the computed value to userspace via the new "vm.nkmempages" sysctl.

NKMEMCLUSTERS is now deprecated and will generate an error if you
attempt to use it.  The new option, should you choose to use it,
is called NKMEMPAGES, and two new options NKMEMPAGES_MIN and
NKMEMPAGES_MAX allow the user to configure the bounds in the kernel
config file.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.4 2001/09/11 03:50:46 jason Exp $	*/
a201 1
#define	MCLBYTES	2048		/* enough for whole Ethernet packet */
d203 1
@


1.4
log
@protect from multiple inclusion
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.3 2001/08/18 20:15:34 art Exp $	*/
d216 6
a221 3
#ifndef NKMEMCLUSTERS
#define NKMEMCLUSTERS	(16 * 1024 * 1024 / PAGE_SIZE)
#endif
@


1.4.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4.4.2
log
@Merge in trunk
@
text
@d202 1
a203 1
#define	MCLBYTES	(1 << MCLSHIFT)	/* enough for whole Ethernet packet */
d208 1
a208 1
#define	NMBCLUSTERS	2048		/* map size, max cluster allocation */
d210 1
a210 1
#define	NMBCLUSTERS	1024		/* map size, max cluster allocation */
d216 3
a218 6
/*
 * Minimum and maximum sizes of the kernel malloc arena in PAGE_SIZE-sized
 * logical pages.
 */
#define	NKMEMPAGES_MIN_DEFAULT	((6 * 1024 * 1024) >> PAGE_SHIFT)
#define	NKMEMPAGES_MAX_DEFAULT	((128 * 1024 * 1024) >> PAGE_SHIFT)
@


1.4.4.3
log
@Merge in -current from about a week ago
@
text
@d266 3
a268 3
extern caddr_t	kdvma_mapin(caddr_t, int, int);
extern caddr_t	dvma_malloc(size_t, void *, int);
extern void	dvma_free(caddr_t, size_t, void *);
d271 1
a271 1
extern void	delay(unsigned int);
@


1.4.4.4
log
@Sync the SMP branch with 3.3
@
text
@d76 1
d80 5
d103 7
a109 1
#define	ALIGNBYTES		0xf
d130 1
d133 3
d255 15
d273 4
@


1.4.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.4.4.4 2003/03/27 23:42:36 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4.4.6
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d185 8
a192 1
#define	NMBCLUSTERS	4096		/* map size, max cluster allocation */
@


1.3
log
@NKMEMCLUSTERS + PAGE_SIZE & co.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.2 2001/08/18 15:27:30 art Exp $	*/
d71 2
a72 1

d315 1
@


1.2
log
@Get rid of the opt_ PITA.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.1.1.1 2001/08/18 04:16:37 jason Exp $	*/
d215 3
a217 6
/*
 * Minimum and maximum sizes of the kernel malloc arena in PAGE_SIZE-sized
 * logical pages.
 */
#define	NKMEMPAGES_MIN_DEFAULT	((6 * 1024 * 1024) >> PAGE_SHIFT)
#define	NKMEMPAGES_MAX_DEFAULT	((128 * 1024 * 1024) >> PAGE_SHIFT)
d309 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a203 4

#if defined(_KERNEL_OPT)
#include "opt_gateway.h"
#endif
@


1.1.1.1
log
@Enough of NetBSD/sparc64 to get compilable/working bootblk... more to come.
@
text
@@
