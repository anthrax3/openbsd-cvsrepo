head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.12
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.05.05.02.13.47;	author guenther;	state Exp;
branches;
next	1.9;
commitid	dNPv28CJI5BxtRGW;

1.9
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.16.20.55.37;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.26.00.36.03;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.02.18.46.06;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.29.19.34.07;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.10.17.00.57;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.18.18.17.42;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;

1.2.6.1
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@emul_native is only used for kernel threads which can't dump core, so
delete coredump_trad(), uvm_coredump(), cpu_coredump(), struct md_coredump,
and various #includes that are superfluous.

This leaves compat_linux processes without a coredump callback.  If that
ability is desired, someone should update it to use coredump_elf32() and
verify the results...

ok kettenis@@
@
text
@/*	$OpenBSD: pcb.h,v 1.9 2011/03/23 16:54:37 pirofti Exp $	*/
/*	$NetBSD: pcb.h,v 1.7 2000/12/29 17:12:05 eeh Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)pcb.h	8.1 (Berkeley) 6/11/93
 */

#ifndef _MACHINE_PCB_H_
#define _MACHINE_PCB_H_

#include <machine/reg.h>

#ifdef notyet
#define	PCB_MAXWIN	32	/* architectural limit */
#else
#define	PCB_MAXWIN	8	/* worried about u area sizes ... */
#endif

/*
 * SPARC Process Control Block.
 *
 * pcb_uw is positive if there are any user windows that are
 * are currently in the CPU windows rather than on the user
 * stack.  Whenever we are running in the kernel with traps
 * enabled, we decrement pcb_uw for each ``push'' of a CPU
 * register window into the stack, and we increment it for
 * each ``pull'' from the stack into the CPU.  (If traps are
 * disabled, or if we are in user mode, pcb_uw is junk.)
 *
 * To ease computing pcb_uw on traps from user mode, we keep track
 * of the log base 2 of the single bit that is set in %wim.
 *
 * If an overflow occurs while the associated user stack pages
 * are invalid (paged out), we have to store the registers
 * in a page that is locked in core while the process runs,
 * i.e., right here in the pcb.  We also need the stack pointer
 * for the last such window (but only the last, as the others
 * are in each window) and the count of windows saved.  We
 * cheat by having a whole window structure for that one %sp.
 * Thus, to save window pcb_rw[i] to memory, we write it at
 * pcb_rw[i + 1].rw_in[6].
 *
 * pcb_nsaved has three `kinds' of values.  If 0, it means no
 * registers are in the PCB (though if pcb_uw is positive,
 * there may be the next time you look).  If positive, it means
 * there are no user registers in the CPU, but there are some
 * saved in pcb_rw[].  As a special case, traps that needed
 * assistance to pull user registers from the stack also store
 * the registers in pcb_rw[], and set pcb_nsaved to -1.  This
 * special state is normally short-term: it can only last until the
 * trap returns, and it can never persist across entry to user code.
 */
/*
 * v9 addendum:
 *
 * Window handling between v8 and v9 has changed somewhat.  There
 * is no %wim.  Instead, we have a %cwp, %cansave, %canrestore,
 * %cleanwin, and %otherwin.  By definition:
 *
 *	 %cansave + %canrestore + %otherwin = NWINDOWS - 2
 *
 * In addition, %cleanwin >= %canrestore since restorable windows
 * are considered clean.  This means that by storing %canrestore
 * and %otherwin, we should be able to compute the values of all
 * the other registers.
 *
 * The only other register we need to save is %cwp because it cannot
 * be trivially computed from the other registers.  The %cwp is
 * stored in the %tstate register, but if the machine was in a register
 * window spill/fill handler, the value of that %cwp may be off by 
 * as much as 2 register windows.  We will also store %cwp.  [We will
 * try to steal pcb_uw or pcb_nsaved for this purpose eventually.]
 *
 * To calculate what registers are in the pcb, start with pcb_cwp
 * and proceed to (pcb_cwp - pcb_canrestore) % NWINDOWS.  These should
 * be saved to their appropriate register windows.  The client routine
 * (trap handler) is responsible for saving pcb_cwp + 1 [%o1-%o7] in
 * the trap frame or on the stack.
 *
 *
 * Even more addendum:
 *
 * With the new system for keeping track of register windows we don't
 * care about anything other than pcb_uw which keeps track of how many
 * full windows we have.  As soon as a flush traps, we dump all user
 * windows to the pcb, handle the fault, then restore all user windows.
 *
 * XXX we are using pcb_nsaved as the counter.  pcb_uw is still a mask.  
 * change this as soon as the new scheme is debugged.
 */
struct pcb {
	u_int64_t	pcb_sp;		/* sp (%o6) when switch() was called */
	u_int64_t	pcb_pc;		/* pc (%o7) when switch() was called */
	caddr_t	pcb_onfault;	/* for copyin/out */
	short	pcb_pstate;	/* %pstate when switch() was called -- may be useful if we support multiple memory models */
	char	pcb_nsaved;	/* number of windows saved in pcb */

	/* The rest is probably not needed except for pcb_rw */
	char	pcb_cwp;	/* %cwp when switch() was called */
	char	pcb_pil;	/* %pil when switch() was called -- probably not needed */

	const char *lastcall;	/* DEBUG -- name of last system call */
	u_int64_t	pcb_wcookie;

	/* the following MUST be aligned on a 64-bit boundary */
	struct	rwindow64 pcb_rw[PCB_MAXWIN];	/* saved windows */
	u_int64_t	pcb_rwsp[PCB_MAXWIN];
};

#ifndef _KERNEL
/* Let gdb compile.  We need fancier macros to make these make sense. */
#define pcb_psr	pcb_pstate
#define pcb_wim	pcb_cwp
#endif /* _KERNEL */

#endif /* _MACHINE_PCB_H_ */
@


1.9
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.8 2008/01/16 20:55:37 kettenis Exp $	*/
a143 12
};

/*
 * The pcb is augmented with machine-dependent additional data for
 * core dumps.  Note that the trapframe here is a copy of the one
 * from the top of the kernel stack (included here so that the kernel
 * stack itself need not be dumped).
 */
struct md_coredump {
	struct	trapframe64 md_tf;
	struct	fpstate64 md_fpstate;
	u_int64_t md_wcookie;
@


1.8
log
@Simplify spilling register windows into the pcb by storing the stack pointer
seperately from the window and copying out data back to the stack by using the
T_RWRET softtrap and rwindow_save().
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.7 2007/05/26 00:36:03 krw Exp $	*/
d44 2
a45 2
#ifndef _SPARC64_PCB_H_
#define _SPARC64_PCB_H_
d164 1
a164 1
#endif /* _SPARC64_PCB_H_ */
@


1.7
log
@More comment typos from Diego Casati. Including winners like funtion, allmost,
oustside, seqencer, toghether, nessissary, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.6 2007/05/02 18:46:06 kettenis Exp $	*/
d143 1
@


1.6
log
@Move sparc64 to __HAVE_CPUINFO.

ok miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.5 2005/03/29 19:34:07 kettenis Exp $	*/
d136 1
a136 1
	char	pcb_pil;	/* %pil when switch() was called -- prolly not needed */
@


1.5
log
@sparc64 StackGhost.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.4 2003/06/02 23:27:56 millert Exp $	*/
d157 1
a157 3
#ifdef _KERNEL
extern struct pcb *cpcb;
#else
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.3 2002/10/10 17:00:57 pvalchev Exp $	*/
d139 2
d154 1
@


1.3
log
@protect against multiple inclusion; pointed out by naddy, miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.2 2001/08/20 20:23:52 jason Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 3
d165 2
@


1.2.6.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.2 2001/08/20 20:23:52 jason Exp $	*/
a47 3
#ifndef _SPARC64_PCB_H_
#define _SPARC64_PCB_H_

a161 2

#endif /* _SPARC64_PCB_H_ */
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Sync the SMP branch with 3.3
@
text
@a47 3
#ifndef _SPARC64_PCB_H_
#define _SPARC64_PCB_H_

a161 2

#endif /* _SPARC64_PCB_H_ */
@


1.2.4.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.2.4.2 2003/03/27 23:42:36 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Some more includes from NetBSD.
@
text
@d1 1
@

