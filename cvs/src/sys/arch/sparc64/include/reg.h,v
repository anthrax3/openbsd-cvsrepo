head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.34
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.32
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.28
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.30
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.22
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.26
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.24
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.20
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.18
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.16
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.14
	OPENBSD_5_0:1.5.0.12
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.1.0.4
	UBC_BASE:1.1
	SMP:1.1.0.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	SPARC64:1.1.1.1
	NETBSD:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2008.12.22.23.01.31;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.15.17.23.31;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.17.18.38.43;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.04.16.40;	author jason;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.4.1;
next	;

1.1.1.1
date	2001.08.18.04.16.40;	author jason;	state Exp;
branches;
next	;

1.1.2.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;

1.1.4.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@We never actually rely on storing %fp in tf_global[0] for clockframes.  So
save ourselves an instruction and remove the pretty misleading comments.
@
text
@/*	$OpenBSD: reg.h,v 1.4 2003/06/02 23:27:56 millert Exp $	*/
/*	$NetBSD: reg.h,v 1.8 2001/06/19 12:59:16 wiz Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)reg.h	8.1 (Berkeley) 6/11/93
 */

#ifndef _MACHINE_REG_H_
#define	_MACHINE_REG_H_

/*
 * Registers passed to trap/syscall/etc.
 * This structure is known to occupy exactly 80 bytes (see locore.s).
 * Note, tf_global[0] is not actually written (since g0 is always 0).
 * (The slot tf_global[0] is used to send a copy of %wim to kernel gdb.
 * This is known as `cheating'.)
 */
struct trapframe32 {
	int	tf_psr;		/* psr */
	int	tf_pc;		/* return pc */
	int	tf_npc;		/* return npc */
	int	tf_y;		/* %y register */
	int	tf_global[8];	/* global registers in trap's caller */
	int	tf_out[8];	/* output registers in trap's caller */
};

/*
 * The v9 trapframe is a bit more complex.  Since we don't get a free 
 * register window with each trap we need some way to keep track of
 * pending traps.  We use tf_fault to save the faulting address for
 * memory faults and tf_kstack to thread trapframes on the kernel
 * stack(s).  If tf_kstack == 0 then this is the lowest level trap;
 * we came from user mode.
 */
struct trapframe64 {
	int64_t		tf_tstate;	/* tstate register */
	int64_t		tf_pc;		/* return pc */
	int64_t		tf_npc;		/* return npc */
	int64_t		tf_fault;	/* faulting addr -- need somewhere to save it */
	int64_t		tf_kstack;	/* kernel stack of prev tf */
	int		tf_y;		/* %y register -- 32-bits */
	short		tf_tt;		/* What type of trap this was */
	char		tf_pil;		/* What IRQ we're handling */
	char		tf_oldpil;	/* What our old SPL was */
	int64_t		tf_global[8];	/* global registers in trap's caller */
	int64_t		tf_out[8];	/* output registers in trap's caller */
	int64_t		tf_local[8];	/* local registers in trap's caller */
	int64_t		tf_in[8];	/* in registers in trap's caller (for debug) */
};

/*
 * Register windows.  Each stack pointer (%o6 aka %sp) in each window
 * must ALWAYS point to some place at which it is safe to scribble on
 * 64 bytes.  (If not, your process gets mangled.)  Furthermore, each
 * stack pointer should be aligned on an 8-byte boundary for v8 stacks
 * or a 16-byte boundary (plus the BIAS) for v9 stacks (the kernel
 * as currently coded allows arbitrary alignment, but with a hefty
 * performance penalty).
 */
struct rwindow32 {
	int	rw_local[8];		/* %l0..%l7 */
	int	rw_in[8];		/* %i0..%i7 */
};

/* Don't forget the BIAS!! */
struct rwindow64 {
	int64_t	rw_local[8];		/* %l0..%l7 */
	int64_t	rw_in[8];		/* %i0..%i7 */
};

/*
 * Clone trapframe for now; this seems to be the more useful
 * than the old struct reg above.
 */
struct reg32 {
	int	r_psr;		/* psr */
	int	r_pc;		/* return pc */
	int	r_npc;		/* return npc */
	int	r_y;		/* %y register */
	int	r_global[8];	/* global registers in trap's caller */
	int	r_out[8];	/* output registers in trap's caller */
};

struct reg64 {
	int64_t	r_tstate;	/* tstate register */
	int64_t	r_pc;		/* return pc */
	int64_t	r_npc;		/* return npc */
	int	r_y;		/* %y register -- 32-bits */
	int64_t	r_global[8];	/* %g* registers in trap's caller */
	int64_t	r_out[8];	/* %o* registers in trap's caller */
	int64_t r_local[8];	/* %l* registers in trap's caller */
	int64_t r_in[8];	/* %i* registers in trap's caller */
};

#include <machine/fsr.h>

/*
 * FP coprocessor registers.
 *
 * FP_QSIZE is the maximum coprocessor instruction queue depth
 * of any implementation on which the kernel will run.  David Hough:
 * ``I'd suggest allowing 16 ... allowing an indeterminate variable
 * size would be even better''.  Of course, we cannot do that; we
 * need to malloc these.
 *
 * XXXX UltraSPARC processors don't implement a floating point queue.
 */
#define	FP_QSIZE	16
#define ALIGNFPSTATE(f)		((struct fpstate64 *)(((long)(f))&(~BLOCK_ALIGN)))

struct fp_qentry {
	int	*fq_addr;		/* the instruction's address */
	int	fq_instr;		/* the instruction itself */
};

struct fpstate64 {
	u_int	fs_regs[64];		/* our view is 64 32-bit registers */
	int64_t	fs_fsr;			/* %fsr */
	int	fs_gsr;			/* graphics state reg */
	int	fs_qsize;		/* actual queue depth */
	struct	fp_qentry fs_queue[FP_QSIZE];	/* queue contents */
};

/* 
 * For 32-bit emulations.
 */
struct fpstate32 {
	u_int	fs_regs[32];		/* our view is 32 32-bit registers */
	int	fs_fsr;			/* %fsr */
	int	fs_qsize;		/* actual queue depth */
	struct	fp_qentry fs_queue[FP_QSIZE];	/* queue contents */
};

/*
 * The actual FP registers are made accessible (c.f. ptrace(2)) through
 * a `struct fpreg'; <arch/sparc64/sparc64/process_machdep.c> relies on the
 * fact that `fpreg' is a prefix of `fpstate'.
 */
struct fpreg64 {
	u_int	fr_regs[64];		/* our view is 64 32-bit registers */
	int64_t	fr_fsr;			/* %fsr */
	int	fr_gsr;			/* graphics state reg */
};

/*
 * 32-bit fpreg used by 32-bit sparc CPUs
 */
struct fpreg32 {
	u_int	fr_regs[32];		/* our view is 32 32-bit registers */
	int	fr_fsr;			/* %fsr */
};

/* Here we gotta do naughty things to let gdb work on 32-bit binaries */
#define reg		reg64
#define fpreg		fpreg64
#define fpstate		fpstate64
#define trapframe	trapframe64
#define rwindow		rwindow64

#endif /* _MACHINE_REG_H_ */
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: reg.h,v 1.3 2002/06/15 17:23:31 art Exp $	*/
a69 2
 * (The slot tf_global[0] is used to store the %fp when this is used
 * as a clockframe.  This is known as `cheating'.)
a81 1
	/* n.b. tf_global[0] is used for fp when this is a clockframe */
@


1.3
log
@Decruftification.

We will never have a.out kernels.
We will never have 32-bit kernels.
We will never have sun4c, sun4 and sun4m support in the sparc64 kernels.
We don't need support old netbsd libc.
The cpu will never be identified as some of the sun4c and sun4m types.
We don't need the gazillion of fields in cpuinfo that the sparc port uses.
Just generally remove dead code.

This is just a first step in making this meess readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: reg.h,v 1.2 2002/03/17 18:38:43 art Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@In PT_{GET,SET}REGS there is no reason to not get/set %l* and %i*.
This change will break debuggers, so if you have any, rebuild.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a195 1
#if defined(__arch64__)
a201 7
#else
#define reg		reg32
#define fpreg		fpreg32
#define fpstate		fpstate32
#define trapframe	trapframe32
#define rwindow		rwindow32
#endif
@


1.1
log
@Initial revision
@
text
@d132 4
a135 2
	int64_t	r_global[8];	/* global registers in trap's caller */
	int64_t	r_out[8];	/* output registers in trap's caller */
@


1.1.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: reg.h,v 1.1 2001/08/18 04:16:40 jason Exp $	*/
d132 2
a133 4
	int64_t	r_global[8];	/* %g* registers in trap's caller */
	int64_t	r_out[8];	/* %o* registers in trap's caller */
	int64_t r_local[8];	/* %l* registers in trap's caller */
	int64_t r_in[8];	/* %i* registers in trap's caller */
@


1.1.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: reg.h,v 1.1.4.1 2002/06/11 03:38:43 art Exp $	*/
d196 1
d203 7
@


1.1.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.2.2
log
@Merge in -current from about a week ago
@
text
@d132 2
a133 4
	int64_t	r_global[8];	/* %g* registers in trap's caller */
	int64_t	r_out[8];	/* %o* registers in trap's caller */
	int64_t r_local[8];	/* %l* registers in trap's caller */
	int64_t r_in[8];	/* %i* registers in trap's caller */
@


1.1.2.3
log
@Sync the SMP branch with 3.3
@
text
@d196 1
d203 7
@


1.1.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: reg.h,v 1.1.2.3 2003/03/27 23:42:36 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1.1.1
log
@Enough of NetBSD/sparc64 to get compilable/working bootblk... more to come.
@
text
@@
