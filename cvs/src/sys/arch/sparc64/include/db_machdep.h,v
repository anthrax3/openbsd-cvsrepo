head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.14
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.5.0.2
	UBC_BASE:1.5
	SMP:1.4.0.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.18
date	2016.04.27.11.10.48;	author mpi;	state Exp;
branches;
next	1.17;
commitid	57btDderNGPG4fjG;

1.17
date	2016.03.07.13.21.51;	author naddy;	state Exp;
branches;
next	1.16;
commitid	EDvRPKRZUDEEb6oR;

1.16
date	2016.02.27.13.08.07;	author mpi;	state Exp;
branches;
next	1.15;
commitid	hnv9KfQtxhCytAnd;

1.15
date	2015.08.28.23.28.39;	author kettenis;	state Exp;
branches;
next	1.14;
commitid	IIvmUURykkPFbth0;

1.14
date	2014.03.16.20.31.46;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.12;

1.12
date	2010.11.27.19.57.23;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.14.17.10.44;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.17.23.10.21;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.04.21.14.35;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.12.06.32.59;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.15.17.23.31;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.08.22.05.08.11;	author jason;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.19.15.36.51;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.15.08.40;	author art;	state Exp;
branches;
next	;

1.4.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.05.19.21.46.57;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@G/C DDB_REGS.
@
text
@/*	$OpenBSD: db_machdep.h,v 1.17 2016/03/07 13:21:51 naddy Exp $	*/
/*	$NetBSD: db_machdep.h,v 1.12 2001/07/07 15:16:13 eeh Exp $ */

/*
 * Mach Operating System
 * Copyright (c) 1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#ifndef	_MACHINE_DB_MACHDEP_H_
#define	_MACHINE_DB_MACHDEP_H_

/*
 * Machine-dependent defines for new kernel debugger.
 */

#include <uvm/uvm_extern.h>

#include <machine/frame.h>
#include <machine/psl.h>
#include <machine/trap.h>
#include <machine/reg.h>

/* end of mangling */

typedef	vaddr_t		db_addr_t;	/* address - unsigned */
typedef	long		db_expr_t;	/* expression - signed */

struct trapstate {
	int64_t tstate;
	int64_t tpc;
	int64_t	tnpc;
	int64_t	tt;
};
#if 1
typedef struct {
	struct trapframe64	ddb_tf;
	struct frame64		ddb_fr;
	struct trapstate	ddb_ts[5];
	int			ddb_tl;
	struct fpstate64	ddb_fpstate;
} db_regs_t;
#else
typedef struct db_regs {
	struct trapregs dbr_traps[4];
	int		dbr_y;
	char		dbr_tl;
	char		dbr_canrestore;
	char		dbr_cansave;
	char		dbr_cleanwin;
	char		dbr_cwp;
	char		dbr_wstate;
	int64_t		dbr_g[8];
	int64_t		dbr_ag[8];
	int64_t		dbr_ig[8];
	int64_t		dbr_mg[8];
	int64_t		dbr_out[8];
	int64_t		dbr_local[8];
	int64_t		dbr_in[8];
} db_regs_t;
#endif

extern	db_regs_t ddb_regs;	/* register state */
#define	DDB_TF		(&ddb_regs.ddb_tf)
#define	DDB_FR		(&ddb_regs.ddb_fr)
#define	DDB_FP		(&ddb_regs.ddb_fpstate)

#define	PC_REGS(regs)	((db_addr_t)(regs)->ddb_tf.tf_pc)
#define	SET_PC_REGS(regs, value)	(regs)->ddb_tf.tf_pc = (int32_t)(value)
#define	PC_ADVANCE(regs) do {				\
	vaddr_t n = (regs)->ddb_tf.tf_npc;		\
	(regs)->ddb_tf.tf_pc = n;			\
	(regs)->ddb_tf.tf_npc = n + 4;			\
} while(0)

#define	BKPT_INST	0x91d02001	/* breakpoint instruction */
#define	BKPT_SIZE	(4)		/* size of breakpoint inst */
#define	BKPT_SET(inst)	(BKPT_INST)

#define	IS_BREAKPOINT_TRAP(type, code)	\
	((type) == T_BREAKPOINT || (type) == T_KGDB_EXEC)
#define IS_WATCHPOINT_TRAP(type, code)	\
	((type) ==T_PA_WATCHPT || (type) == T_VA_WATCHPT)

/*
 * Sparc cpus have no hardware single-step.
 */
#define SOFTWARE_SSTEP

boolean_t	db_inst_trap_return(int inst);
boolean_t	db_inst_return(int inst);
boolean_t	db_inst_call(int inst);
boolean_t	db_inst_branch(int inst);
boolean_t	db_inst_unconditional_flow_transfer(int inst);
db_addr_t	db_branch_taken(int inst, db_addr_t pc, db_regs_t *regs);

#define inst_trap_return(ins)	db_inst_trap_return(ins)
#define inst_return(ins)	db_inst_return(ins)
#define inst_call(ins)		db_inst_call(ins)
#define inst_branch(ins)	db_inst_branch(ins)
#define	inst_unconditional_flow_transfer(ins) \
				db_inst_unconditional_flow_transfer(ins)
#define branch_taken(ins, pc, fun, regs) \
				db_branch_taken((ins), (pc), (regs))

/* see note in db_interface.c about reversed breakpoint addrs */
#define next_instr_address(pc, bd) \
	((bd) ? (pc) : ddb_regs.ddb_tf.tf_npc)

#define DB_MACHINE_COMMANDS

void db_machine_init(void);
int db_ktrap(int, struct trapframe64 *);

int db_enter_ddb(void);
void db_startcpu(struct cpu_info *);
void db_stopcpu(struct cpu_info *);

extern struct mutex ddb_mp_mutex;

#define DDB_STATE_NOT_RUNNING	0
#define DDB_STATE_RUNNING	1
#define DDB_STATE_EXITING	2

/* Register device-specific method for triggering XIRs. */
void db_register_xir(void (*)(void *, int), void *);

#endif	/* _MACHINE_DB_MACHDEP_H_ */
@


1.17
log
@Sync no-argument function declaration and definition by adding (void).
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.16 2016/02/27 13:08:07 mpi Exp $	*/
a83 1
#define	DDB_REGS	(&ddb_regs)
@


1.16
log
@Rename kdb_trap() into db_ktrap().

The goal is to include it in the list of functions that must not be
instrumented.  All ddb(8) functions should be in this list and have
their names start with 'db_'.

ok visa@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.15 2015/08/28 23:28:39 kettenis Exp $	*/
a116 1
void		db_machine_init(void);
@


1.15
log
@Add support for switching CPUs in ddb on sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.14 2014/03/16 20:31:46 guenther Exp $	*/
d135 1
a135 1
int kdb_trap(int, struct trapframe64 *);
@


1.14
log
@DDB supports ELF symbols are all archs, and it's always the same as the
native size, so eliminate the #defines.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.13 2011/03/23 16:54:37 pirofti Exp $	*/
d136 10
@


1.13
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.12 2010/11/27 19:57:23 miod Exp $	*/
a135 6

/*
 * We will use elf symbols in DDB when they work.
 */
#define	DB_ELF_SYMBOLS
#define DB_ELFSIZE	64
@


1.12
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.11 2008/12/14 17:10:44 kettenis Exp $	*/
d30 2
a31 2
#ifndef	_SPARC_DB_MACHDEP_H_
#define	_SPARC_DB_MACHDEP_H_
d146 1
a146 1
#endif	/* _SPARC_DB_MACHDEP_H_ */
@


1.11
log
@Implement a "machine xir" ddb command, making it possible to send an
External Initiated Reset (XIR) to processors.  A XIR is non-maskable and will
drop us at the PROM ok prompt.  This makes it possible to diagnose problems
where a CPU is spinning with interrupts disabled.

For now, this is only supported on machines with bbc(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.10 2008/03/17 23:10:21 kettenis Exp $	*/
a114 2
int		db_inst_load(int inst);
int		db_inst_store(int inst);
a122 2
#define inst_load(ins)		db_inst_load(ins)
#define inst_store(ins)		db_inst_store(ins)
@


1.10
log
@Remove KGDB code.  It was never converted to 64-bit, and just makes locore.s
even more unreadable.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.9 2005/01/04 21:14:35 espie Exp $	*/
d146 3
@


1.9
log
@SET_PC_REGS, arches tested between me and miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.8 2003/02/12 06:32:59 jason Exp $	*/
a145 7

/*
 * KGDB definitions
 */
typedef u_long		kgdb_reg_t;
#define KGDB_NUMREGS	72
#define KGDB_BUFLEN	1024
@


1.8
log
@Kill more commons in sparc64 code
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.7 2002/06/15 17:23:31 art Exp $	*/
a88 3
#if defined(lint)
#define	PC_REGS(regs)	((regs)->ddb_tf.tf_pc)
#else
d90 1
a90 1
#endif
@


1.7
log
@Decruftification.

We will never have a.out kernels.
We will never have 32-bit kernels.
We will never have sun4c, sun4 and sun4m support in the sparc64 kernels.
We don't need support old netbsd libc.
The cpu will never be identified as some of the sun4c and sun4m types.
We don't need the gazillion of fields in cpuinfo that the sparc port uses.
Just generally remove dead code.

This is just a first step in making this meess readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.6 2002/03/14 01:26:45 millert Exp $	*/
d83 1
a83 1
db_regs_t		ddb_regs;	/* register state */
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5 2001/11/06 19:53:16 miod Exp $	*/
a146 1
#if 1
a147 1
#ifdef __arch64__
d149 1
a149 6
#else
#define DB_ELFSIZE	32
#endif
#else
#define DB_AOUT_SYMBOLS
#endif
@


1.5
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.4 2001/08/22 05:08:11 jason Exp $	*/
d114 9
a122 9
boolean_t	db_inst_trap_return __P((int inst));
boolean_t	db_inst_return __P((int inst));
boolean_t	db_inst_call __P((int inst));
boolean_t	db_inst_branch __P((int inst));
int		db_inst_load __P((int inst));
int		db_inst_store __P((int inst));
boolean_t	db_inst_unconditional_flow_transfer __P((int inst));
db_addr_t	db_branch_taken __P((int inst, db_addr_t pc, db_regs_t *regs));
void		db_machine_init __P((void));
d141 2
a142 2
void db_machine_init __P((void));
int kdb_trap __P((int, struct trapframe64 *));
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5 2001/11/06 19:53:16 miod Exp $	*/
d114 9
a122 9
boolean_t	db_inst_trap_return(int inst);
boolean_t	db_inst_return(int inst);
boolean_t	db_inst_call(int inst);
boolean_t	db_inst_branch(int inst);
int		db_inst_load(int inst);
int		db_inst_store(int inst);
boolean_t	db_inst_unconditional_flow_transfer(int inst);
db_addr_t	db_branch_taken(int inst, db_addr_t pc, db_regs_t *regs);
void		db_machine_init(void);
d141 2
a142 2
void db_machine_init(void);
int kdb_trap(int, struct trapframe64 *);
@


1.5.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5.2.1 2002/06/11 03:38:43 art Exp $	*/
d147 1
d149 1
d151 6
a156 1

@


1.5.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 1
a83 1
extern	db_regs_t ddb_regs;	/* register state */
@


1.4
log
@setup the 'machine' commands for ddb
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.3 2001/08/20 20:23:52 jason Exp $	*/
a36 1
#include <vm/vm.h>
@


1.4.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4.4.2
log
@Merge in -current
@
text
@d37 1
@


1.4.4.3
log
@Merge in -current from about a week ago
@
text
@d114 9
a122 9
boolean_t	db_inst_trap_return(int inst);
boolean_t	db_inst_return(int inst);
boolean_t	db_inst_call(int inst);
boolean_t	db_inst_branch(int inst);
int		db_inst_load(int inst);
int		db_inst_store(int inst);
boolean_t	db_inst_unconditional_flow_transfer(int inst);
db_addr_t	db_branch_taken(int inst, db_addr_t pc, db_regs_t *regs);
void		db_machine_init(void);
d141 2
a142 2
void db_machine_init(void);
int kdb_trap(int, struct trapframe64 *);
@


1.4.4.4
log
@Sync the SMP branch with 3.3
@
text
@d83 1
a83 1
extern	db_regs_t ddb_regs;	/* register state */
d147 1
d149 1
d151 6
a156 1

@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d123 1
@


1.2
log
@adapt to our variant of branch_taken
@
text
@d1 1
@


1.1
log
@db_machdep from NetBSD.
@
text
@d131 1
a131 1
#define branch_taken(ins, pc, regs) \
@

