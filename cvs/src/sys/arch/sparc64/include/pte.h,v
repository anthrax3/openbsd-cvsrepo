head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.14
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.10
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.12
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.8
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.18
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.16
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.14
	OPENBSD_5_0:1.14.0.12
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.10
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.8
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2013.03.31.17.07.03;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.26.14.10.23;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.12.11.09.02;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.10.09.29.33;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2008.04.20.09.18.52;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.30.12.30.02;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.23.21.49.48;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.17.19.25.22;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.02.19.53.30;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.02.18.53.57;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.28.22.32.03;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.17.19.30.55;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.18.19.04.49;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@try to avoid pulling in pte.h and other more crazy things.  Checked against
the things that libkvm needs.
@
text
@/*	$OpenBSD: pte.h,v 1.14 2008/11/26 14:10:23 claudio Exp $	*/
/*	$NetBSD: pte.h,v 1.7 2001/07/31 06:55:46 eeh Exp $ */

/*
 * Copyright (c) 1996-1999 Eduardo Horvath
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR  ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR  BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef	_MACHINE_PTE_H_
#define	_MACHINE_PTE_H_

/*
 * Address translation works as follows:
 *
 **
 * For sun4u:
 *	
 *	Take your pick; it's all S/W anyway.  We'll start by emulating a sun4.
 *	Oh, here's the sun4u TTE for reference:
 *
 *	struct sun4u_tte {
 *		u_int64	tag_g:1,	(global flag)
 *			tag_ctxt:15,	(context for mapping)
 *			tag_unassigned:6,
 *			tag_va:42;	(virtual address bits<63:22>)
 *		u_int64	data_v:1,	(valid bit)
 *			data_size:2,	(page size [8K*8**<SIZE>])
 *			data_nfo:1,	(no-fault only)
 *			data_ie:1,	(invert endianness [inefficient])
 *			data_soft2:2,	(reserved for S/W)
 *			data_pa:36,	(physical address)
 *			data_soft:6,	(reserved for S/W)
 *			data_lock:1,	(lock into TLB)
 *			data_cacheable:2,	(cacheability control)
 *			data_e:1,	(explicit accesses only)
 *			data_priv:1,	(privileged page)
 *			data_w:1,	(writeable)
 *			data_g:1;	(same as tag_g)
 *	};	
 */

/* virtual address to virtual page number */
#define	VA_SUN4U_VPG(va)	(((int)(va) >> 13) & 31)

/* virtual address to offset within page */
#define VA_SUN4U_OFF(va)       	(((int)(va)) & 0x1FFF)

/* When we go to 64-bit VAs we need to handle the hole */
#define VA_VPG(va)	VA_SUN4U_VPG(va)
#define VA_OFF(va)	VA_SUN4U_OFF(va)

#define PG_SHIFT4U	13
#define MMU_PAGE_ALIGN	8192

/* If you know where a tte is in the tsb, how do you find its va? */	
#define TSBVA(i)	((tsb[(i)].tag.f.tag_va<<22)|(((i)<<13)&0x3ff000))

#ifndef _LOCORE
/* 
 *  This is the spitfire TTE.
 *
 *  We could use bitmasks and shifts to construct this if
 *  we had a 64-bit compiler w/64-bit longs.  Otherwise it's
 *  a real pain to do this in C.
 */
#if 0
/* We don't use bitfields anyway. */
struct sun4u_tag_fields {
	u_int64_t	tag_g:1,	/* global flag */
		tag_ctxt:15,	/* context for mapping */
		tag_unassigned:6,
		tag_va:42;	/* virtual address bits<64:22> */
};
union sun4u_tag { struct sun4u_tag_fields f; int64_t tag; };
struct sun4u_data_fields {
	u_int64_t	data_v:1,	/* valid bit */
		data_size:2,	/* page size [8K*8**<SIZE>] */
		data_nfo:1,	/* no-fault only */
		data_ie:1,	/* invert endianness [inefficient] */
		data_soft2:2,	/* reserved for S/W */
		data_pa:36,	/* physical address */
		data_accessed:1,/* S/W accessed bit */
		data_modified:1,/* S/W modified bit */
		data_realw:1,	/* S/W real writable bit (to manage modified) */
		data_tsblock:1,	/* S/W TSB locked entry */
		data_exec:1,	/* S/W Executable */
		data_onlyexec:1,/* S/W Executable only */
		data_lock:1,	/* lock into TLB */
		data_cacheable:2,	/* cacheability control */
		data_e:1,	/* explicit accesses only */
		data_priv:1,	/* privileged page */
		data_w:1,	/* writeable */
		data_g:1;	/* same as tag_g */
};
union sun4u_data { struct sun4u_data_fields f; int64_t data; };
struct sun4u_tte {
	union sun4u_tag tag;
	union sun4u_data data;
};
#else
struct sun4u_tte {
	int64_t tag;
	int64_t data;
};
#endif
typedef struct sun4u_tte pte_t;

/* Assembly routine to flush a mapping */
extern void sp_tlb_flush_pte(vaddr_t addr, int ctx);
extern void sp_tlb_flush_ctx(int ctx);

#if defined(MULTIPROCESSOR)
void smp_tlb_flush_pte(vaddr_t, int);
void smp_tlb_flush_ctx(int);
#define tlb_flush_pte(va,ctx)	smp_tlb_flush_pte(va, ctx)
#define tlb_flush_ctx(ctx)	smp_tlb_flush_ctx(ctx)
#else
#define tlb_flush_pte(va,ctx)	sp_tlb_flush_pte(va, ctx)
#define tlb_flush_ctx(ctx)	sp_tlb_flush_ctx(ctx)
#endif

#endif /* _LOCORE */

/* TSB tag masks */
#define CTX_MASK		((1<<13)-1)
#define TSB_TAG_CTX_SHIFT	48
#define TSB_TAG_VA_SHIFT	22

#define TSB_TAG_LOCKED		0x0000040000000000LL

#define TSB_TAG_G		0x8000000000000000LL
#define TSB_TAG_CTX(t)		((((int64_t)(t))>>TSB_TAG_CTX_SHIFT)&CTX_MASK)
#define TSB_TAG_VA(t)		((((int64_t)(t))<<TSB_TAG_VA_SHIFT))
#define TSB_TAG(g,ctx,va)	((((u_int64_t)((g)!=0))<<63)|(((u_int64_t)(ctx)&CTX_MASK)<<TSB_TAG_CTX_SHIFT)|(((u_int64_t)va)>>TSB_TAG_VA_SHIFT))

/* Page sizes */
#define	PGSZ_8K			0
#define	PGSZ_64K		1
#define	PGSZ_512K		2
#define	PGSZ_4M			3

#define	SUN4U_PGSZ_SHIFT	61
#define	SUN4U_TLB_SZ(s)		(((uint64_t)(s)) << SUN4U_PGSZ_SHIFT)

/* TLB data masks */
#define SUN4U_TLB_V		0x8000000000000000LL
#define SUN4U_TLB_8K		SUN4U_TLB_SZ(PGSZ_8K)
#define SUN4U_TLB_64K		SUN4U_TLB_SZ(PGSZ_64K)
#define SUN4U_TLB_512K		SUN4U_TLB_SZ(PGSZ_512K)
#define SUN4U_TLB_4M		SUN4U_TLB_SZ(PGSZ_4M)
#define SUN4U_TLB_SZ_MASK	0x6000000000000000LL
#define SUN4U_TLB_NFO		0x1000000000000000LL
#define SUN4U_TLB_IE		0x0800000000000000LL
#define SUN4U_TLB_SOFT2_MASK	0x07fc000000000000LL
#define SUN4U_TLB_RESERVED_MASK	0x0003800000000000LL
#define SUN4U_TLB_PA_MASK	0x00007fffffffe000LL
#define SUN4U_TLB_SOFT_MASK	0x0000000000001f80LL
/* S/W bits */
#define SUN4U_TLB_ACCESS	0x0000000000000200LL
#define SUN4U_TLB_MODIFY	0x0000000000000800LL
#define SUN4U_TLB_REAL_W	0x0000000000000400LL
#define SUN4U_TLB_TSB_LOCK	0x0000000000001000LL
#define SUN4U_TLB_EXEC		0x0000000000000100LL
#define SUN4U_TLB_EXEC_ONLY	0x0000000000000080LL
/* H/W bits */
#define SUN4U_TLB_L		0x0000000000000040LL
#define SUN4U_TLB_CACHE_MASK	0x0000000000000030LL
#define SUN4U_TLB_CP		0x0000000000000020LL
#define SUN4U_TLB_CV		0x0000000000000010LL
#define SUN4U_TLB_E		0x0000000000000008LL
#define SUN4U_TLB_P		0x0000000000000004LL
#define SUN4U_TLB_W		0x0000000000000002LL
#define SUN4U_TLB_G		0x0000000000000001LL

#define SUN4U_TSB_DATA(g,sz,pa,priv,write,cache,aliased,valid,ie) \
(((valid)?SUN4U_TLB_V:0LL)|SUN4U_TLB_SZ(sz)|\
(((u_int64_t)(pa))&SUN4U_TLB_PA_MASK)|\
((cache)?((aliased)?SUN4U_TLB_CP:SUN4U_TLB_CACHE_MASK):SUN4U_TLB_E)|\
((priv)?SUN4U_TLB_P:0LL)|((write)?SUN4U_TLB_W:0LL)|((g)?SUN4U_TLB_G:0LL)|\
((ie)?SUN4U_TLB_IE:0LL))

#define SUN4V_PGSZ_SHIFT	0
#define	SUN4V_TLB_SZ(s)		(((uint64_t)(s))<<SUN4V_PGSZ_SHIFT)

/* TLB data masks */
#define SUN4V_TLB_V		0x8000000000000000LL
#define SUN4V_TLB_8K		SUN4V_TLB_SZ(PGSZ_8K)
#define SUN4V_TLB_64K		SUN4V_TLB_SZ(PGSZ_64K)
#define SUN4V_TLB_512K		SUN4V_TLB_SZ(PGSZ_512K)
#define SUN4V_TLB_4M		SUN4V_TLB_SZ(PGSZ_4M)
#define SUN4V_TLB_SZ_MASK	0x000000000000000fLL
#define SUN4V_TLB_NFO		0x4000000000000000LL
#define SUN4V_TLB_IE		0x0000000000001000LL
#define SUN4V_TLB_SOFT2_MASK	0x3f00000000000000LL
#define SUN4V_TLB_PA_MASK	0x00ffffffffffe000LL
#define SUN4V_TLB_SOFT_MASK	0x0000000000000030LL
/* S/W bits */
#define SUN4V_TLB_ACCESS	0x0000000000000010LL
#define SUN4V_TLB_MODIFY	0x0000000000000020LL
#define SUN4V_TLB_REAL_W	0x2000000000000000LL
#define SUN4V_TLB_TSB_LOCK	0x1000000000000000LL
#define SUN4V_TLB_EXEC		SUN4V_TLB_X
#define SUN4V_TLB_EXEC_ONLY	0x0200000000000000LL
/* H/W bits */
#define SUN4V_TLB_CACHE_MASK	0x0000000000000600LL
#define SUN4V_TLB_CP		0x0000000000000400LL
#define SUN4V_TLB_CV		0x0000000000000200LL
#define SUN4V_TLB_E		0x0000000000000800LL
#define SUN4V_TLB_P		0x0000000000000100LL
#define SUN4V_TLB_X		0x0000000000000080LL
#define SUN4V_TLB_W		0x0000000000000040LL
#define SUN4V_TLB_G		0x0000000000000000LL

#define SUN4V_TSB_DATA(g,sz,pa,priv,write,cache,aliased,valid,ie) \
(((valid)?SUN4V_TLB_V:0LL)|SUN4V_TLB_SZ(sz)|\
(((u_int64_t)(pa))&SUN4V_TLB_PA_MASK)|\
((cache)?((aliased)?SUN4V_TLB_CP:SUN4V_TLB_CACHE_MASK):SUN4V_TLB_E)|\
((priv)?SUN4V_TLB_P:0LL)|((write)?SUN4V_TLB_W:0LL)|((g)?SUN4V_TLB_G:0LL)|\
((ie)?SUN4V_TLB_IE:0LL))


#define MMU_CACHE_VIRT	0x3
#define MMU_CACHE_PHYS	0x2
#define MMU_CACHE_NONE	0x0

/* This needs to be updated for sun4u IOMMUs */
/*
 * IOMMU PTE bits.
 */
#define IOPTE_PPN_MASK  0x07ffff00
#define IOPTE_PPN_SHIFT 8
#define IOPTE_RSVD      0x000000f1
#define IOPTE_WRITE     0x00000004
#define IOPTE_VALID     0x00000002

#endif /* _MACHINE_PTE_H_ */

@


1.14
log
@Sparc64 still only has 64 virtual address bits and not 65.
OK kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.13 2008/07/12 11:09:02 kettenis Exp $	*/
d27 3
d253 3
@


1.13
log
@Adjust SUN4U_TLB_RESERVED_MASK for updated SUN4U_TLB_PA_MASK.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.12 2008/07/10 09:29:33 kettenis Exp $	*/
d40 1
a40 1
 *			tag_va:42;	(virtual address bits<64:22>)
@


1.12
log
@Add support for Fujitsu SPARC64-VI CPUs.

UltraSPARC I/II has a 41-bit physical address space, UltraSPARC III/IV has a
43-bit physical address space.  The Fujitsu SPARC64-VI extends this to 46 bits.
Adjust the TTE masks to take this into account and adjust some locore code
that truncated physical addresses to 41 bits (fixing a potential bug for
UltraSPARC III/IV too).

While there, fix the locore code for UltraSPARC Architecture 2007 CPUs, which
may support up to 56 bits of physical address space.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.10 2008/03/30 12:30:02 kettenis Exp $	*/
d170 1
a170 1
#define SUN4U_TLB_RESERVED_MASK	0x0003f80000000000LL
@


1.11
log
@Implement locking of sun4u TSB entries for MULTIPROCESSOR kernels.
Make sun4v code use the new TSB_TAG_LOCKED define.
@
text
@d171 1
a171 1
#define SUN4U_TLB_PA_MASK	0x000007ffffffe000LL
@


1.10
log
@More sun4v support.  GENERIC and RAMDISK kernels will now boot on both
sun4u and sun4v.  GENERIC.MP won't work yet though.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.9 2008/03/23 21:49:48 kettenis Exp $	*/
d143 3
a146 1

@


1.9
log
@Sigh!  The sun4v TTEs have a different layout than sun4u TTEs.  Rename the
existing sun4u defines and add sun4v.  For now, decide which set to use
at compile time.  Change the sun4u-specific code in locore.s to use the sun4u
defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.8 2007/10/17 19:25:22 kettenis Exp $	*/
a232 48

#ifdef SUN4V
#define TLB_SZ		SUN4V_TLB_SZ

#define TLB_V		SUN4V_TLB_V
#define TLB_NFO		SUN4V_TLB_NFO
#define TLB_IE		SUN4V_TLB_IE
#define TLB_PA_MASK	SUN4V_TLB_PA_MASK
#define TLB_ACCESS	SUN4V_TLB_ACCESS
#define TLB_MODIFY	SUN4V_TLB_MODIFY
#define TLB_REAL_W	SUN4V_TLB_REAL_W
#define TLB_TSB_LOCK	SUN4V_TLB_TSB_LOCK
#define TLB_EXEC	SUN4V_TLB_EXEC
#define TLB_EXEC_ONLY	SUN4V_TLB_EXEC_ONLY
#define TLB_L		0ULL
#define TLB_CACHE_MASK	SUN4V_TLB_CACHE_MASK
#define TLB_CP		SUN4V_TLB_CP
#define TLB_CV		SUN4V_TLB_CV
#define TLB_E		SUN4V_TLB_E
#define TLB_P		SUN4V_TLB_P
#define TLB_W		SUN4V_TLB_W
#define TLB_G		SUN4V_TLB_G

#define TSB_DATA	SUN4V_TSB_DATA
#else
#define TLB_SZ		SUN4U_TLB_SZ

#define TLB_V		SUN4U_TLB_V
#define TLB_NFO		SUN4U_TLB_NFO
#define TLB_IE		SUN4U_TLB_IE
#define TLB_PA_MASK	SUN4U_TLB_PA_MASK
#define TLB_ACCESS	SUN4U_TLB_ACCESS
#define TLB_MODIFY	SUN4U_TLB_MODIFY
#define TLB_REAL_W	SUN4U_TLB_REAL_W
#define TLB_TSB_LOCK	SUN4U_TLB_TSB_LOCK
#define TLB_EXEC	SUN4U_TLB_EXEC
#define TLB_EXEC_ONLY	SUN4U_TLB_EXEC_ONLY
#define TLB_L		SUN4U_TLB_L
#define TLB_CACHE_MASK	SUN4U_TLB_CACHE_MASK
#define TLB_CP		SUN4U_TLB_CP
#define TLB_CV		SUN4U_TLB_CV
#define TLB_E		SUN4U_TLB_E
#define TLB_P		SUN4U_TLB_P
#define TLB_W		SUN4U_TLB_W
#define TLB_G		SUN4U_TLB_G

#define TSB_DATA	SUN4U_TSB_DATA
#endif
@


1.8
log
@Proper TLB flushing for MULTIPROCESSOR kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.7 2006/06/02 19:53:30 miod Exp $	*/
d155 2
a156 2
#define	PGSZ_SHIFT		61
#define	TLB_SZ(s)		(((uint64_t)(s))<<PGSZ_SHIFT)
d159 12
a170 12
#define TLB_V			0x8000000000000000LL
#define TLB_8K			TLB_SZ(PGSZ_8K)
#define TLB_64K			TLB_SZ(PGSZ_64K)
#define TLB_512K		TLB_SZ(PGSZ_512K)
#define TLB_4M			TLB_SZ(PGSZ_4M)
#define TLB_SZ_MASK		0x6000000000000000LL
#define TLB_NFO			0x1000000000000000LL
#define TLB_IE			0x0800000000000000LL
#define TLB_SOFT2_MASK		0x07fc000000000000LL
#define TLB_RESERVED_MASK	0x0003f80000000000LL
#define TLB_PA_MASK		0x000007ffffffe000LL
#define TLB_SOFT_MASK		0x0000000000001f80LL
d172 6
a177 9
/* Access & TSB locked bits are swapped so I can set access w/one insn */
/* #define TLB_ACCESS		0x0000000000001000LL */
#define TLB_ACCESS		0x0000000000000200LL
#define TLB_MODIFY		0x0000000000000800LL
#define TLB_REAL_W		0x0000000000000400LL
/* #define TLB_TSB_LOCK		0x0000000000000200LL */
#define TLB_TSB_LOCK		0x0000000000001000LL
#define TLB_EXEC		0x0000000000000100LL
#define TLB_EXEC_ONLY		0x0000000000000080LL
d179 103
a281 13
#define TLB_L			0x0000000000000040LL
#define TLB_CACHE_MASK		0x0000000000000030LL
#define TLB_CP			0x0000000000000020LL
#define TLB_CV			0x0000000000000010LL
#define TLB_E			0x0000000000000008LL
#define TLB_P			0x0000000000000004LL
#define TLB_W			0x0000000000000002LL
#define TLB_G			0x0000000000000001LL

#define TSB_DATA(g,sz,pa,priv,write,cache,aliased,valid,ie) \
(((valid)?TLB_V:0LL)|TLB_SZ(sz)|(((u_int64_t)(pa))&TLB_PA_MASK)|\
((cache)?((aliased)?TLB_CP:TLB_CACHE_MASK):TLB_E)|\
((priv)?TLB_P:0LL)|((write)?TLB_W:0LL)|((g)?TLB_G:0LL)|((ie)?TLB_IE:0LL))
@


1.7
log
@All I wanted was to fix the bogus PG_SZ macro, but this is better:
Do not try to map the message buffer with large pages, it's just as easy to
simply use as many 8KB pages as necessary. From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.6 2006/06/02 18:53:57 miod Exp $	*/
d124 12
a135 2
extern void tlb_flush_pte(vaddr_t addr, int ctx);
extern void tlb_flush_ctx(int ctx);
@


1.6
log
@feild -> field
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.5 2005/06/28 22:32:03 deraadt Exp $	*/
a145 8

/*
 * Why couldn't Sun pick better page sizes?
 *
 * Page sizes are 2**(12+(3*sz)), except for 8K which
 * is 2**12+1 instead of 2**12.
 */
#define	PG_SZ(s)		(1<<(12+(s?(3*s):1)))
@


1.5
log
@2 more bits of PA in the TLB entries when you get to ultrasparc3; from henric
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.4 2003/05/17 19:30:55 art Exp $	*/
d82 1
a82 1
/* We don't use bitfeilds anyway. */
@


1.4
log
@No need to duplicate TLB_ defines manually with TTE_ defines.
assym.h can do that for us.

mdw@@ henric@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.3 2002/03/14 01:26:45 millert Exp $	*/
d165 3
a167 3
#define TLB_SOFT2_MASK		0x07fe000000000000LL
#define TLB_DIAG_MASK		0x0001fe0000000000LL
#define TLB_PA_MASK		0x000001ffffffe000LL
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2 2001/08/20 20:23:52 jason Exp $	*/
a187 31

/* 
 * The following bits are used by locore so they should
 * be duplicates of the above w/o the "long long"
 */
/* S/W bits */
/* #define TTE_ACCESS		0x0000000000001000 */
#define TTE_ACCESS		0x0000000000000200
#define TTE_MODIFY		0x0000000000000800
#define TTE_REAL_W		0x0000000000000400
/* #define TTE_TSB_LOCK		0x0000000000000200 */
#define TTE_TSB_LOCK		0x0000000000001000
#define TTE_EXEC		0x0000000000000100
#define TTE_EXEC_ONLY		0x0000000000000080
/* H/W bits */
#define TTE_L			0x0000000000000040
#define TTE_CACHE_MASK		0x0000000000000030
#define TTE_CP			0x0000000000000020
#define TTE_CV			0x0000000000000010
#define TTE_E			0x0000000000000008
#define TTE_P			0x0000000000000004
#define TTE_W			0x0000000000000002
#define TTE_G			0x0000000000000001

#define TTE_DATA_BITS	"\177\20" \
        "b\77V\0" "f\75\2SIZE\0" "b\77V\0" "f\75\2SIZE\0" \
        "=\0008K\0" "=\00164K\0" "=\002512K\0" "=\0034M\0" \
        "b\74NFO\0"     "b\73IE\0"      "f\62\10SOFT2\0" \
        "f\51\10DIAG\0" "f\15\33PA<40:13>\0" "f\7\5SOFT\0" \
        "b\6L\0"        "b\5CP\0"       "b\4CV\0" \
        "b\3E\0"        "b\2P\0"        "b\1W\0"        "b\0G\0"
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d124 2
a125 2
extern void tlb_flush_pte __P((vaddr_t addr, int ctx));
extern void tlb_flush_ctx __P((int ctx));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2 2001/08/20 20:23:52 jason Exp $	*/
d124 2
a125 2
extern void tlb_flush_pte(vaddr_t addr, int ctx);
extern void tlb_flush_ctx(int ctx);
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d124 2
a125 2
extern void tlb_flush_pte(vaddr_t addr, int ctx);
extern void tlb_flush_ctx(int ctx);
@


1.2.4.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2.4.2 2002/03/28 11:23:52 niklas Exp $	*/
d188 31
@


1.1
log
@Some more includes from NetBSD.
No modifications.
@
text
@d1 1
@

