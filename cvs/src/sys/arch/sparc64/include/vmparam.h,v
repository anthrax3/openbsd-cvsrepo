head	1.32;
access;
symbols
	OPENBSD_6_2:1.32.0.6
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.32.0.8
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.32.0.4
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.31.0.6
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.25.0.6
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.23.0.10
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.8
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.6
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.4
	OPENBSD_5_0:1.23.0.2
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.18.0.6
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.10
	UBC:1.5.0.2
	UBC_BASE:1.5
	SMP:1.3.0.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.32
date	2015.11.01.20.10.00;	author miod;	state Exp;
branches;
next	1.31;
commitid	sHllVPiKPJBfwmTJ;

1.31
date	2015.02.10.10.02.55;	author tedu;	state Exp;
branches;
next	1.30;
commitid	X8GpdpDRNqUOBsMT;

1.30
date	2015.02.08.03.48.25;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	FyI2yQpd2OUfUZHS;

1.29
date	2015.02.05.23.06.22;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	3ih3vC0eJxychlMb;

1.28
date	2014.10.24.20.26.58;	author kettenis;	state Exp;
branches;
next	1.27;
commitid	uHRFGdi1cruubpXH;

1.27
date	2014.10.09.04.01.27;	author tedu;	state Exp;
branches;
next	1.26;
commitid	wAdRwhtUH36R0JxT;

1.26
date	2014.10.09.03.59.59;	author tedu;	state Exp;
branches;
next	1.25;
commitid	I0KLtD9aVxAdm6aW;

1.25
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.23.22.06.30;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2011.05.30.22.25.22;	author oga;	state Exp;
branches;
next	1.22;

1.22
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.28.15.21.59;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.27.03.03.48;	author thib;	state Exp;
branches;
next	1.19;

1.19
date	2010.04.22.19.02.49;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.18.16.40.17;	author kurt;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.04.18.11.34;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.21.13.43.38;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.12.19.19.34;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.28.01.36.39;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.23.21.20.54;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.27.56;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.20.21.38.52;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.15.17.23.31;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.45;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.17.22.59.53;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.11.01.23.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.20.23.52;	author jason;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.08.18.20.14.40;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.18.17.42;	author art;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.07.58;	author nate;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.12.05.00.39.13;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2002.03.28.11.23.52;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.03.27.23.42.36;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2003.06.07.11.14.45;	author ho;	state Exp;
branches;
next	1.3.4.7;

1.3.4.7
date	2004.02.19.10.50.00;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.38.43;	author art;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: vmparam.h,v 1.31 2015/02/10 10:02:55 tedu Exp $	*/
/*	$NetBSD: vmparam.h,v 1.18 2001/05/01 02:19:19 thorpej Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vmparam.h	8.1 (Berkeley) 6/11/93
 */

/*
 * Machine dependent constants for sun4u and sun4v UltraSPARC
 */

#ifndef VMPARAM_H
#define VMPARAM_H

#define USRSTACK	0xffffffffffffe000L

/*
 * Virtual memory related constants, all in bytes
 */
/*
 * Since the compiler generates `call' instructions we can't
 * have more than 4GB in a single text segment.
 *
 * And since we only have a 40-bit address space, allow half
 * of that for data and the other half for stack.
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(1L*1024*1024*1024)	/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(128L*1024*1024)	/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(8L*1024*1024*1024)	/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2L*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		(32L*1024*1024)		/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/*
 * Size of shared memory map
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	4096			/* 32mb */
#endif

/*
 * Size of User Raw I/O map
 */
#define USRIOSIZE 	300

/*
 * Mach derived constants
 */

/*
 * User/kernel map constants.
 */
#define VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define VM_MAX_ADDRESS		((vaddr_t)-1)
#define VM_MAXUSER_ADDRESS	((vaddr_t)-1)

/* map PIE into the first quarter of the address space before hole */
#define VM_PIE_MIN_ADDR		PAGE_SIZE
#define VM_PIE_MAX_ADDR		0x10000000000

#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)0x000007ffffffffffL)

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

#define VM_PHYSSEG_MAX          32       /* up to 32 segments */
#define VM_PHYSSEG_STRAT        VM_PSTRAT_BSEARCH
#define VM_PHYSSEG_NOADD                /* can't add RAM after vm_mem_init */

#if defined (_KERNEL) && !defined(_LOCORE)
struct vm_map;
vaddr_t		dvma_mapin(struct vm_map *, vaddr_t, int, int);
void		dvma_mapout(vaddr_t, vaddr_t, int);
#endif
#endif
@


1.31
log
@increase min address to page size for all remaining min == 0 systems.
not necessary, but consistent with other platforms. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.30 2015/02/08 03:48:25 deraadt Exp $	*/
a50 5
/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack.
 */
#define	USRTEXT		0x2000			/* Start of user text */
@


1.30
log
@Hilarious!  We are not ready yet for large stack random biases, due to
the stack region handling in uvm.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.29 2015/02/05 23:06:22 deraadt Exp $	*/
d108 1
a108 1
#define VM_MIN_ADDRESS		((vaddr_t)0)
@


1.29
log
@Expand STACKGAP_RANDOM to 2MB on machines with large user VA
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.29 2015/02/05 22:49:05 deraadt Exp $	*/
d87 1
a87 1
#define STACKGAP_RANDOM	2*1024*1024
@


1.28
log
@Bring phys_map to sparc64 and use it in vmapbuf(9) and vunmapbuf(9).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.27 2014/10/09 04:01:27 tedu Exp $	*/
d87 1
a87 1
#define STACKGAP_RANDOM	256*1024
@


1.27
log
@revert unintentional commit unrelated to LKM
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.26 2014/10/09 03:59:59 tedu Exp $	*/
d97 5
d118 3
@


1.26
log
@remove LKM devices
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.25 2014/01/30 18:16:41 miod Exp $	*/
d103 1
a103 1
#define VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
@


1.25
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.24 2014/01/23 22:06:30 miod Exp $	*/
d103 1
a103 1
#define VM_MIN_ADDRESS		((vaddr_t)0)
@


1.24
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.23 2011/05/30 22:25:22 oga Exp $	*/
a116 24

/*
 * For each struct vm_page, there is a list of all currently valid virtual
 * mappings of that page.  An entry is a pv_entry_t, the list is pv_table.
 *
 * XXX - this doesn't belong here, but for now we have to keep it here
 *       because of include ordering issues.
 */
typedef struct pv_entry {
	struct pv_entry	*pv_next;	/* next pv_entry */
	struct pmap	*pv_pmap;	/* pmap where mapping lies */
	vaddr_t	pv_va;		/* virtual address for mapping */
} *pv_entry_t;
/* PV flags encoded in the low bits of the VA of the first pv_entry */

struct vm_page_md {
	struct pv_entry pvent;
};

#define VM_MDPAGE_INIT(pg) do {			\
	(pg)->mdpage.pvent.pv_next = NULL;	\
	(pg)->mdpage.pvent.pv_pmap = NULL;	\
	(pg)->mdpage.pvent.pv_va = 0;		\
} while (0)
@


1.23
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.22 2010/12/15 05:30:19 tedu Exp $	*/
a117 1
#define __HAVE_VM_PAGE_MD
@


1.22
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.21 2010/06/28 15:21:59 kettenis Exp $	*/
a116 3

#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0
@


1.21
log
@Change MAXDSIZ and MAXSSIZ to more reasonable values for a 64-bit architecture.

ok deraadt@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2010/06/27 03:03:48 thib Exp $	*/
d76 3
@


1.20
log
@uvm constraints. Add two mandatory MD symbols, uvm_md_constraints
which contains the constraints for DMA/memory allocation for each
architecture, and dma_constraints which contains the range of addresses
that are dma accessable by the system.

This is based on ariane@@'s physcontig diff, with lots of bugfixes and
additions the following additions by my self:

Introduce a new function pool_set_constraints() which sets the address
range for which we allocate pages for the pool from, this is now used
for the mbuf/mbuf cluster pools to keep them dma accessible.

The !direct archs no longer stuff pages into the kernel object in
uvm_km_getpage_pla but rather do a pmap_extract() in uvm_km_putpages.

Tested heavily by my self on i386, amd64 and sparc64. Some tests on
alpha and SGI.

"commit it" beck, art, oga, deraadt
"i like the diff" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2008/07/18 16:40:17 kurt Exp $	*/
a60 2
/* #ifdef __arch64__ */
#if 0
a61 2
 * 64-bit limits:
 *
d69 1
a69 1
#define	MAXTSIZ		(4L*1024*1024*1024)	/* max text size */
d75 1
a75 26
#define	MAXDSIZ		(512L*1024*1024*1024)	/* max data size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		MAXDSIZ			/* max stack size */
#endif
#else
/*
 * 32-bit limits:
 *
 * We only have 4GB to play with.  Limit stack, data, and text
 * each to half of that.
 *
 * This is silly.  Apparently if we go above these numbers
 * integer overflows in other parts of the kernel cause hangs.
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(1*1024*1024*1024)	/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(128*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
d78 1
a78 1
#define	DFLSSIZ		(1024*1024)		/* initial stack size limit */
d81 1
a81 2
#define	MAXSSIZ		(8*1024*1024)			/* max stack size */
#endif
@


1.19
log
@Committing on behalf or ariane@@.

recommit pmemrange:
        physmem allocator: change the view of free memory from single
        free pages to free ranges.  Classify memory based on region with
        associated use-counter (which is used to construct a priority
        list of where to allocate memory).

	Based on code from tedu@@, help from many.

Useable now that bugs have been found and fixed in most architecture's
pmap.c

ok by everyone who has done a pmap or uvm commit in the last year.
@
text
@a147 3
/* No UVM_IO_RANGES required: IOMMU takes care of this. */
#define UVM_IO_RANGES {}

@


1.18
log
@Add new uvm function called uvm_map_pie() which takes align as a
parameter and returns an aligned random load address for position
independent executables to use. This also adds three new vmparam.h
defines to specify the maximum address, minimum address and minimum
allowed alignment for uvm_map_pie() to use. The PIE address range
for i386 was carefully selected to work well within the i386 W^X
framework.

With much help and feedback from weingart@@.
okay weingart@@, miod@@, kettenis@@, drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2008/06/04 18:11:34 miod Exp $	*/
d147 3
@


1.17
log
@adderss -> address
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2007/04/21 13:43:38 art Exp $	*/
d133 4
@


1.16
log
@Do a simple switch to VM_PAGE_MD. Just the path of least resistance for now,
more work coming soon.

kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2007/01/12 19:19:34 kettenis Exp $	*/
d45 1
a45 1
 * Machine dependent constants for Sun-4c SPARC
d69 1
a69 1
 * And since we only have a 40-bit adderss space, allow half
@


1.15
log
@Move kernel virtual address space to make sure it doesn't overlap with
physical memory to avoid problems on UltraSPARC-III and III+.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2005/04/11 15:13:01 deraadt Exp $	*/
d144 1
d146 5
a150 1
 * pmap specific data stored in the vm_physmem[] array
d152 6
d159 2
a160 3
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pv_entry *pvent;
d162 6
@


1.14
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2004/11/28 01:36:39 mickey Exp $	*/
a132 1
#define VM_MAXUSER_ADDRESS32	((vaddr_t)(0x00000000ffffffffL&~PGOFSET))
d135 1
a135 1
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)KERNEND)
@


1.13
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2004/01/23 21:20:54 millert Exp $	*/
d113 3
@


1.12
log
@Crank SHMMAXPGS to 32mb; deraadt@@ OK for all, drahn@@ OK for macppc + pegasos
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2003/06/02 23:27:56 millert Exp $	*/
a118 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2002/07/20 21:38:52 art Exp $	*/
d117 1
a117 1
#define SHMMAXPGS	1024
@


1.10
log
@duplicate define.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2002/06/15 17:23:31 art Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Decruftification.

We will never have a.out kernels.
We will never have 32-bit kernels.
We will never have sun4c, sun4 and sun4m support in the sparc64 kernels.
We don't need support old netbsd libc.
The cpu will never be identified as some of the sun4c and sun4m types.
We don't need the gazillion of fields in cpuinfo that the sparc port uses.
Just generally remove dead code.

This is just a first step in making this meess readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2002/03/14 01:26:45 millert Exp $	*/
a155 2

#define	__HAVE_PMAP_PHYSSEG
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2002/02/17 22:59:53 maja Exp $	*/
a59 2
#define USRSTACK32	0xffffe000L
#ifdef __arch64__
a60 3
#else
#define USRSTACK	USRSTACK32
#endif
@


1.7
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2002/02/11 01:23:36 deraadt Exp $	*/
d175 2
a176 2
vaddr_t		dvma_mapin __P((struct vm_map *, vaddr_t, int, int));
void		dvma_mapout __P((vaddr_t, vaddr_t, int));
@


1.6
log
@1<<39 is horrible
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2001/12/05 16:25:44 art Exp $	*/
a153 2

#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
@


1.5
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2001/11/30 17:37:43 art Exp $	*/
d88 1
a88 1
#define	MAXDSIZ		(1L<<39)		/* max data size */
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2001/12/05 16:25:44 art Exp $	*/
d88 1
a88 1
#define	MAXDSIZ		(512L*1024*1024*1024)	/* max data size */
d155 2
d177 2
a178 2
vaddr_t		dvma_mapin(struct vm_map *, vaddr_t, int, int);
void		dvma_mapout(vaddr_t, vaddr_t, int);
@


1.5.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5.2.1 2002/06/11 03:38:43 art Exp $	*/
d60 2
d63 3
d161 2
@


1.4
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2001/08/20 20:23:52 jason Exp $	*/
a155 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d171 1
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.3.4.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3.4.1 2001/10/31 03:07:58 nate Exp $	*/
a170 1
#define __HAVE_PMAP_PHYSSEG
@


1.3.4.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d88 1
a88 1
#define	MAXDSIZ		(512L*1024*1024*1024)	/* max data size */
d154 3
@


1.3.4.4
log
@Merge in -current from about a week ago
@
text
@d175 2
a176 2
vaddr_t		dvma_mapin(struct vm_map *, vaddr_t, int, int);
void		dvma_mapout(vaddr_t, vaddr_t, int);
@


1.3.4.5
log
@Sync the SMP branch with 3.3
@
text
@d60 2
d63 3
d161 2
@


1.3.4.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3.4.5 2003/03/27 23:42:36 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.4.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d117 1
a117 1
#define SHMMAXPGS	4096			/* 32mb */
@


1.2
log
@VM_MBUF_SIZE and VM_KMEM_SIZE.
@
text
@d1 1
@


1.1
log
@Some more includes from NetBSD.
@
text
@d154 3
@

