head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.14
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.12
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.17.0.12
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.8
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.6
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.14.0.22
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.20
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.16
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.18
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.14
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.12
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.10
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.8
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.6
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.12
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.10
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.8
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.11.0.6
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.8
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.4
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.6
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2014.10.22.23.56.47;	author dlg;	state Exp;
branches;
next	1.20;
commitid	W6i4CJDuhqS3nLLJ;

1.20
date	2014.07.12.16.25.09;	author guenther;	state Exp;
branches;
next	1.19;
commitid	r9gXh8PA6rI3P7q2;

1.19
date	2014.03.25.04.25.06;	author dlg;	state Exp;
branches;
next	1.18;

1.18
date	2014.03.14.10.47.21;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.22.18.22.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.11.15.17.08;	author pirofti;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.13.14.13.53;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.21.09.02;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.02.20.45.21;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	99.05.10.16.02.15;	author espie;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	97.11.09.23.05.15;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.10.13.10.53.43;	author pefo;	state Exp;
branches;
next	1.7;

1.7
date	97.06.25.12.41.43;	author grr;	state Exp;
branches;
next	1.6;

1.6
date	97.06.25.12.32.53;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	97.06.24.20.50.42;	author grr;	state Exp;
branches;
next	1.4;

1.4
date	97.04.04.03.05.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.28.06.25.05;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.09.20;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.54;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.54;	author rahnds;	state Exp;
branches;
next	;

1.10.4.1
date	2001.04.18.16.13.02;	author niklas;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	1.10.4.3;

1.10.4.3
date	2002.03.29.16.11.59;	author niklas;	state Exp;
branches;
next	1.10.4.4;

1.10.4.4
date	2003.06.07.11.13.18;	author ho;	state Exp;
branches;
next	;


desc
@@


1.21
log
@make [bl]emtoh{16,32,64} take volatile const foo *, not volatile foo *

while in the manpage add volatile where the code has it too.

ok miod@@ guenther@@
@
text
@/*	$OpenBSD: endian.h,v 1.20 2014/07/12 16:25:09 guenther Exp $ */

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _POWERPC_ENDIAN_H_
#define _POWERPC_ENDIAN_H_

#ifdef _KERNEL

static inline __uint16_t
__mswap16(volatile const __uint16_t *m)
{
	__uint16_t v;

	__asm("lhbrx %0, 0, %1"
	    : "=r" (v)
            : "r" (m), "m" (*m));

	return (v);
}

static inline __uint32_t
__mswap32(volatile const __uint32_t *m)
{
	__uint32_t v;

	__asm("lwbrx %0, 0, %1"
	    : "=r" (v)
            : "r" (m), "m" (*m));

	return (v);
}

static inline __uint64_t
__mswap64(volatile const __uint64_t *m)
{
	__uint32_t *a = (__uint32_t *)m;
	__uint64_t v;

	v = (__uint64_t)__mswap32(a + 1) << 32 |
	    (__uint64_t)__mswap32(a);

	return (v);
}

static inline void
__swapm16(volatile __uint16_t *m, __uint16_t v)
{
	__asm("sthbrx %1, 0, %2"
	    : "=m" (*m)
	    : "r" (v), "r" (m));
}

static inline void
__swapm32(volatile __uint32_t *m, __uint32_t v)
{
	__asm("stwbrx %1, 0, %2"
	    : "=m" (*m)
	    : "r" (v), "r" (m));
}

static inline void
__swapm64(volatile __uint64_t *m, __uint64_t v)
{
	__uint32_t *a = (__uint32_t *)m;

	__swapm32(a + 1, v >> 32);
	__swapm32(a, v);
}

#define __HAVE_MD_SWAPIO
#endif /* _KERNEL */

#undef _BIG_ENDIAN	/* XXX - gcc may define _BIG_ENDIAN too */
#define _BYTE_ORDER _BIG_ENDIAN

#ifndef __FROM_SYS__ENDIAN
#include <sys/endian.h>
#endif

#endif /* _POWERPC_ENDIAN_H_ */
@


1.20
log
@Tackle the endian.h mess.  Make it so that:
 * you can #include <sys/endian.h> instead of <machine/endian.h>,
   and ditto <endian.h>  (fixes code that pulls in <sys/endian.h> first)

 * those will always export the symbols that POSIX specified for
   <endian.h>, including the new {be,le}{16,32,64}toh() set.  c.f.
	http://austingroupbugs.net/view.php?id=162

   if __BSD_VISIBLE then you also get the symbols that our <machine/endian.h>
   currently exports (ntohs, NTOHS, dlg's bemtoh*, etc)

 * when doing POSIX compiles (not __BSD_VISIBLE), then <netinet/in.h> and
   <arpa/inet.h> will *stop* exporting the extra symbols like BYTE_ORDER
   and betoh*

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.19 2014/03/25 04:25:06 dlg Exp $ */
d33 1
a33 1
__mswap16(volatile __uint16_t *m)
d45 1
a45 1
__mswap32(volatile __uint32_t *m)
d57 1
a57 1
__mswap64(volatile __uint64_t *m)
@


1.19
log
@the memory constraints are correct, so we dont need volatile to provide
extra restrictions on ordering.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.18 2014/03/14 10:47:21 dlg Exp $ */
d93 1
a93 1
#define MD_SWAPIO
d98 2
d101 1
@


1.18
log
@provide an MI api for doing byteswapping loads and stores. some
archs have instrutions that can do this, and the rest that dont get
to use wrappers around the byteswap(3) api.

this provides MI backends for sparc64 and powerpc which get a big
benefit from this because byteswapping in registers is really hard
for them.

the intended use case is for reading and writing bits of dma memory
handed to and from hardware.

discussed with miod@@ guenther@@ deraadt@@
ok miod@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.17 2011/08/22 18:22:07 deraadt Exp $ */
d37 1
a37 1
	__asm volatile("lhbrx %0, 0, %1"
d49 1
a49 1
	__asm volatile("lwbrx %0, 0, %1"
d71 1
a71 1
	__asm __volatile("sthbrx %1, 0, %2"
d79 1
a79 1
	__asm __volatile("stwbrx %1, 0, %2"
@


1.17
log
@move powerpc to non-__STRICT_ALIGNMENT, as it always was.  Essentially
__STRICT_ALIGNMENT is talking about accessing of integer types; it does
not cover doubles or floats or other things
ok miod kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.16 2011/03/23 16:54:36 pirofti Exp $ */
d29 66
@


1.16
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.15 2011/03/11 15:17:08 pirofti Exp $ */
a32 2

#define	__STRICT_ALIGNMENT
@


1.15
log
@Use _MACHINE_ENDIAN_H_ for this is The Right Thing To Do.

Okay guenther@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.14 2005/12/13 14:13:53 millert Exp $ */
d27 2
a28 2
#ifndef _MACHINE_ENDIAN_H_
#define _MACHINE_ENDIAN_H_
d36 1
a36 1
#endif /* _MACHINE_ENDIAN_H_ */
@


1.14
log
@Whoops, need to #undef _BIG_ENDIAN not _BYTE_ORDER
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.13 2005/12/13 00:35:23 millert Exp $ */
d27 2
a28 2
#ifndef _POWERPC_ENDIAN_H_
#define _POWERPC_ENDIAN_H_
d36 1
a36 1
#endif /* _POWERPC_ENDIAN_H_ */
@


1.13
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.12 2003/06/03 21:09:02 deraadt Exp $ */
d30 1
a30 1
#undef _BYTE_ORDER	/* XXX - gcc may define _BYTE_ORDER too */
@


1.12
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 2001/03/02 20:45:21 jason Exp $ */
d30 2
a31 1
#define BYTE_ORDER BIG_ENDIAN
@


1.11
log
@add #define __STRICT_ALIGNMENT
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 1999/05/10 16:02:15 espie Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@Use symbolic define for BYTE_ORDER.

(don't forget that cpp is `lazy':
#define A B
#define B value
#if A == value

works, since A isn't extended before it's needed, by which time B is known)
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.9 1997/11/09 23:05:15 niklas Exp $ */
d37 2
@


1.10.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 2001/03/02 20:45:21 jason Exp $ */
a36 2

#define	__STRICT_ALIGNMENT
@


1.10.4.2
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10.4.1 2001/04/18 16:13:02 niklas Exp $ */
@


1.10.4.3
log
@Re-add missing pieces
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 2001/03/02 20:45:21 jason Exp $ */
@


1.10.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10.4.3 2002/03/29 16:11:59 niklas Exp $ */
d14 5
@


1.9
log
@New endian.h design.  All architectures now use a common file for the bulk
part.  Some ports can optimize the swap operations.  This also means the
general API is extended with swap16, swap32, htobe16, htobe32, betoh16,
betoh32, htole16, htole32, letoh16 and letoh32.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1997/08/08 08:26:15 downsj Exp $ */
d35 1
a35 1
#define BYTE_ORDER 4321
@


1.8
log
@Monolithic PowerPC kernel, new include
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d3 3
a5 3
/*
 * Copyright (c) 1997 Per Fogelstrom
 * 
d16 1
a16 2
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
d20 10
a29 24
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef	_MACHINE_ENDIAN_H_
#define	_MACHINE_ENDIAN_H_

#ifndef	_POSIX_SOURCE

#define _QUAD_HIGHWORD	0
#define _QUAD_LOWWORD	1

/*
 * Byte order definition. Byte numbers given in increasing address order.
a30 35
#define	LITTLE_ENDIAN	1234	/* LSB first: i386, NS32K */
#define	BIG_ENDIAN	4321	/* MSB first: M68K */
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */

#define	BYTE_ORDER	BIG_ENDIAN

#include <sys/cdefs.h>

typedef u_int32_t in_addr_t;                      
typedef u_int16_t in_port_t;

__BEGIN_DECLS
u_int32_t       htonl __P((u_int32_t));
u_int16_t       htons __P((u_int16_t));
u_int32_t       ntohl __P((u_int32_t));
u_int16_t       ntohs __P((u_int16_t));
__END_DECLS

/*
 * Macros for network/external number representation conversion where
 * network/external is defined to be in BIG_ENDIAN byte order.
 *
 * *NOTE* That the macros are supposed to work on the arrgument (x) and
 * thus should *NOT* be used in assignments such as 'foo=HTONS(bar)'.
 */
#if BYTE_ORDER == BIG_ENDIAN && !defined(lint)
#define	ntohl(x)	(x)
#define	ntohs(x)	(x)
#define	htonl(x)	(x)
#define	htons(x)	(x)

#define	NTOHL(x)	(void) (x)
#define	NTOHS(x)	(void) (x)
#define	HTONL(x)	(void) (x)
#define	HTONS(x)	(void) (x)
d32 2
a33 1
#else
d35 2
a36 5
#define	NTOHL(x)	(x) = ntohl((u_int32_t)x)
#define	NTOHS(x)	(x) = ntohs((u_int16_t)x)
#define	HTONL(x)	(x) = htonl((u_int32_t)x)
#define	HTONS(x)	(x) = htons((u_int16_t)x)
#endif
d38 1
a38 2
#endif	/* _POSIX_SOURCE */
#endif	/* _MACHINE_ENDIAN_H_ */
@


1.7
log
@Sigh, Revert changes to endian.h - it was all confusion due to incorrect
usage in new ip_* code, since fixed.  Added usage notes to prevent future
confusion in this regard.
@
text
@d1 1
a1 2
/*	$OpenBSD: endian.h,v 1.6 1997/06/25 12:32:53 downsj Exp $	*/
/*	$NetBSD: endian.h,v 1.2 1996/10/13 03:16:41 christos Exp $	*/
d3 3
a5 5
/*-
 * Copyright (C) 1995 Wolfgang Solfrank.
 * Copyright (C) 1995 TooLs GmbH.
 * All rights reserved.
 *
d16 3
a18 2
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
d21 12
a32 10
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d35 2
a36 2
#ifndef	_PPC_ENDIAN_H_
#define	_PPC_ENDIAN_H_
d44 1
a44 2
 * Definitions for byte order, according to byte significance from low
 * address to high.
d46 2
a47 2
#define	LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
#define	BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
d50 1
a50 1
#define	BYTE_ORDER	BIG_ENDIAN	/* for now */
d65 2
a66 1
 * Macros for network/external number representation conversion.
d68 2
a69 6
 * The way this works is that HTONS(x) modifies x and *can't* be used as
 * and rvalue i.e.  foo=HTONS(bar) is wrong.  Likewise x=htons(x) should
 * never be used where HTONS(x) will serve i.e. foo=htons(foo) is wrong.
 * Failing to observe these rule will result in code that appears to work
 * and probably does work, but generates gcc warnings on architectures
 * where the macros are used to optimize away an unneeded conversion.
d91 1
a91 1
#endif	/* _PPC_ENDIAN_H_ */
@


1.6
log
@Big endian HTON?() macros should be (void)(x).
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.5 1997/06/24 20:50:42 grr Exp $	*/
d67 7
d81 4
a84 4
#define	NTOHL(x)	(void)(x)
#define	NTOHS(x)	(void)(x)
#define	HTONL(x)	(void)(x)
#define	HTONS(x)	(void)(x)
@


1.5
log
@change like sparc/include/endian.h
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.4 1997/04/04 03:05:34 millert Exp $	*/
d74 4
a77 4
#define	NTOHL(x)	(x)
#define	NTOHS(x)	(x)
#define	HTONL(x)	(x)
#define	HTONS(x)	(x)
@


1.4
log
@Define in_addr_t and in_port_t everywhere but use u_intXX_t for
htonl and friends.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.3 1996/12/28 06:25:05 rahnds Exp $	*/
d74 4
a77 4
#define	NTOHL(x)	(void) (x)
#define	NTOHS(x)	(void) (x)
#define	HTONL(x)	(void) (x)
#define	HTONS(x)	(void) (x)
@


1.3
log
@adding OpenBSD tag to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d55 3
d81 4
a84 4
#define	NTOHL(x)	(x) = ntohl((in_addr_t)x)
#define	NTOHS(x)	(x) = ntohs((in_port_t)x)
#define	HTONL(x)	(x) = htonl((in_addr_t)x)
#define	HTONS(x)	(x) = htons((in_port_t)x)
@


1.2
log
@Changes necessary to make the kernel compile and boot.
Some merging with NetBSD port.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d55 4
a58 4
unsigned long htonl __P((unsigned long));
unsigned short htons __P((unsigned short));
unsigned long ntohl __P((unsigned long));
unsigned short ntohs __P((unsigned short));
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
