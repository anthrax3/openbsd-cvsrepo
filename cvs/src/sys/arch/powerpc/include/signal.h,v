head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.14
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.28
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.26
	OPENBSD_5_0:1.7.0.24
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.22
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.20
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.16
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.10.18.39.47;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	qfOifNidEGDB2jL1;

1.8
date	2012.12.02.07.03.31;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.08.14.20.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.06.18.53.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.14.21.46.31;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.01.15.49.05;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	97.02.18.15.54.27;	author rahnds;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	97.02.05.01.33.53;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.55;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.55;	author rahnds;	state Exp;
branches;
next	;

1.3.14.1
date	2001.10.31.03.07.55;	author nate;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	1.3.14.3;

1.3.14.3
date	2002.03.29.16.11.59;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@SROP mitigation.  sendsig() stores a (per-process ^ &sigcontext) cookie
inside the sigcontext.  sigreturn(2) checks syscall entry was from the
exact PC addr in the (per-process ASLR) sigtramp, verifies the cookie,
and clears it to prevent sigcontext reuse.
not yet tested on landisk, sparc, *88k, socppc.
ok kettenis
@
text
@/*	$OpenBSD: signal.h,v 1.8 2012/12/02 07:03:31 guenther Exp $	*/
/*	$NetBSD: signal.h,v 1.1 1996/09/30 16:34:34 ws Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef	_POWERPC_SIGNAL_H_
#define	_POWERPC_SIGNAL_H_

#include <sys/cdefs.h>

typedef int sig_atomic_t;

#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
#include <machine/_types.h>

/*
 * We have to save all registers on every trap, because
 *	1. user could attach this process every time
 *	2. we must be able to restore all user registers in case of fork
 * Actually, we do not save the fp registers on trap, since
 * these are not used by the kernel. They are saved only when switching
 * between processes using the FPU.
 *
 */
struct trapframe {
	__register_t fixreg[32];
	__register_t lr;
	__register_t cr;
	__register_t xer;
	__register_t ctr;
	int srr0;
	int srr1;
	int dar;			/* dar & dsisr are only filled on a DSI trap */
	int dsisr;
	__register_t exc;
};

struct sigcontext {
	long sc_cookie;
	int sc_mask;			/* saved signal mask */
	struct trapframe sc_frame;	/* saved registers */
};
#endif /* __BSD_VISIBLE || __XPG_VISIBLE >= 420 */
#endif	/* _POWERPC_SIGNAL_H_ */
@


1.8
log
@Determine whether we're currently on the alternative signal stack
dynamically, by comparing the stack pointer against the altstack
base and size, so that you get the correct answer if you longjmp
out of the signal handler, as tested by regress/sys/kern/stackjmp/.
Also, fix alt stack handling on vax, where it was completely broken.

Testing and corrections by miod@@, krw@@, tobiasu@@, pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.7 2006/01/08 14:20:17 millert Exp $	*/
d67 1
a67 1
	int __sc_unused;
@


1.7
log
@Expose struct sigcontext, struct sigstat and struct sigaltstack for XPG4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.6 2006/01/06 18:53:05 millert Exp $	*/
d67 1
a67 1
	int sc_onstack;			/* saved onstack flag */
@


1.6
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.5 2005/12/14 21:46:31 millert Exp $	*/
d41 1
a41 1
#if __BSD_VISIBLE
d71 1
a71 1
#endif /* __BSD_VISIBLE */
@


1.5
log
@convert _FOO_SOURCE -> __FOO_VISIBLE in machine.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.4 2001/09/01 15:49:05 drahn Exp $	*/
d42 1
a42 1
#include <machine/types.h>
d54 5
a58 5
	u_int32_t fixreg[32];
	u_int32_t lr;
	u_int32_t cr;
	u_int32_t xer;
	u_int32_t ctr;
d63 1
a63 1
	u_int32_t exc;
@


1.4
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/include to macppc/include
Some files were not "moved" but wrapper files were created which include
the powerpc/include version.

Several of the powerpc/include files where changed to reflect that they
are POWERPC_* not MACHINE_*.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.3 1997/02/18 15:54:27 rahnds Exp $	*/
d37 2
d41 1
d71 1
@


1.3
log
@Ok, these are more stragglers in my source tree. These changes were necessary
to clean up the interdependancies caused by the siginfo changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.2 1997/02/05 01:33:53 rahnds Exp $	*/
d34 2
a35 2
#ifndef	_MACHINE_SIGNAL_H_
#define	_MACHINE_SIGNAL_H_
d68 1
a68 1
#endif	/* _MACHINE_SIGNAL_H_ */
@


1.3.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.3 1997/02/18 15:54:27 rahnds Exp $	*/
d34 2
a35 2
#ifndef	_POWERPC_SIGNAL_H_
#define	_POWERPC_SIGNAL_H_
d68 1
a68 1
#endif	/* _POWERPC_SIGNAL_H_ */
@


1.3.14.2
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.3.14.1 2001/10/31 03:07:55 nate Exp $	*/
@


1.3.14.3
log
@Re-add missing pieces
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.4 2001/09/01 15:49:05 drahn Exp $	*/
@


1.2
log
@Siginfo changes.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d39 2
a48 1
 * Change ordering to cluster together these register_t's.		XXX
d51 8
a58 8
	register_t fixreg[32];
	register_t lr;
	int cr;
	int xer;
	register_t ctr;
	register_t srr0;
	register_t srr1;
	register_t dar;			/* dar & dsisr are only filled on a DSI trap */
d60 1
a60 1
	int exc;
@


1.1
log
@Initial revision
@
text
@d1 1
d37 1
a37 1
#include <machine/frame.h>
d39 22
a60 1
typedef int sig_atomic_t;
a65 6
};

struct sigframe {
	int sf_signum;
	int sf_code;
	struct sigcontext sf_sc;
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
