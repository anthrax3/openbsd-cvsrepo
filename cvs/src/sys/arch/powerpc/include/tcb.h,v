head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.12
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2;
locks; strict;
comment	@ * @;


1.5
date	2016.09.04.08.42.47;	author guenther;	state Exp;
branches;
next	1.4;
commitid	M0npygQocLB5DC2R;

1.4
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.3;
commitid	d9R7VGw9CHTkwXE1;

1.3
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.09.15.35.01;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.27.04.01.17;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Telling gcc the TCB pointer is in %r2 via the 'register asm' extension
tests out on powerpc and generates slightly better code
@
text
@/*	$OpenBSD: tcb.h,v 1.4 2016/05/07 19:05:21 guenther Exp $	*/

/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MACHINE_TCB_H_
#define _MACHINE_TCB_H_

#ifdef _KERNEL

#define TCB_GET(p)		\
	((void *)trapframe(p)->fixreg[2])
#define TCB_SET(p, addr)	\
	(trapframe(p)->fixreg[2] = (__register_t)(addr))

#else /* _KERNEL */

/* ELF TLS ABI calls for small TCB, with static TLS data after it */
#define TLS_VARIANT	1

/* powerpc offsets the TCB pointer 0x7000 bytes after the data */
#define TCB_OFFSET	0x7000

register void *__tcb __asm__ ("%r2");
#define TCB_GET()		(__tcb)
#define TCB_SET(tcb)		((__tcb) = (tcb))

#endif /* _KERNEL */
#endif /* _MACHINE_TCB_H_ */
@


1.4
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.3 2014/03/29 18:09:30 guenther Exp $	*/
d37 1
a37 3
#if 0	/* XXX perhaps use the gcc global register extension? */
struct thread_control_block;
__register__ struct thread_control_block *__tcb __asm__ ("%r2");
a38 1
#define TCB_GET_MEMBER(member)	((void *)(__tcb->member))
a40 29
#else

#include <stddef.h>		/* for offsetof */

/* Get a pointer to the TCB itself */
static inline void *
__powerpc_get_tcb(void)
{
	void *val;
	__asm__ ("mr %0, %%r2" : "=r" (val));
	return val;
}
#define TCB_GET()	__powerpc_get_tcb()

/* Get the value of a specific member in the TCB */
static inline void *
__powerpc_read_tcb(int offset)
{
	void *val;
	__asm__ ("lwzx %0, %%r2, %1" : "=r" (val) : "r" (offset));
	return val;
}
#define TCB_GET_MEMBER(member) \
	__powerpc_read_tcb(offsetof(struct thread_control_block, member))

#define TCB_SET(tcb)	__asm volatile("mr %%r2, %0" : : "r" (tcb))

#endif /* 0 */

a41 1

@


1.3
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.2 2011/11/09 15:35:01 kettenis Exp $	*/
d33 3
@


1.2
log
@Add magic to use %r2 as the userland thread register.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.1 2011/10/27 04:01:17 guenther Exp $	*/
d66 1
a66 1
#define TCB_SET(tcb)	__asm __volatile("mr %%r2, %0" : : "r" (tcb))
@


1.1
log
@Specify the TLS variant for each platform.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 4
a27 1
#error "not yet"
d33 36
@

