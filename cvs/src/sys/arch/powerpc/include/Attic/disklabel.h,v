head	1.16;
access;
symbols
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	UBC_SYNC_A:1.16
	UBC_SYNC_B:1.16
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.13.0.6
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.4
	OPENBSD_2_7_BASE:1.13
	SMP:1.13.0.2
	SMP_BASE:1.13
	kame_19991208:1.13
	OPENBSD_2_6:1.11.0.4
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2001.09.01.15.49.05;	author drahn;	state dead;
branches;
next	1.15;

1.15
date	2001.06.24.04.54.21;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.14.08.02.11;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	99.12.04.03.35.57;	author deraadt;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	99.10.26.03.43.48;	author downsj;	state Exp;
branches;
next	1.11;

1.11
date	99.03.23.16.36.18;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.02.19.20.36.35;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.01.11.20.42.01;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.10.14.17.11.10;	author pefo;	state Exp;
branches;
next	1.7;

1.7
date	97.10.13.13.49.57;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	97.10.13.10.53.42;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	97.09.29.18.55.13;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.21.46.49;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.05.05.16.43.58;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.25.04;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.53;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.53;	author rahnds;	state Exp;
branches;
next	;

1.13.2.1
date	2001.04.18.16.13.01;	author niklas;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2001.07.04.10.22.22;	author niklas;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	1.13.2.4;

1.13.2.4
date	2001.11.13.21.04.16;	author niklas;	state Exp;
branches;
next	1.13.2.5;

1.13.2.5
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	;


desc
@@


1.16
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/include to macppc/include
Some files were not "moved" but wrapper files were created which include
the powerpc/include version.

Several of the powerpc/include files where changed to reflect that they
are POWERPC_* not MACHINE_*.
@
text
@/*	$OpenBSD: disklabel.h,v 1.15 2001/06/24 04:54:21 drahn Exp $	*/

/*
 * Copyright (c) 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_DISKLABEL_H_
#define _MACHINE_DISKLABEL_H_

#define	LABELSECTOR	1		/* sector containing label */
#define	LABELOFFSET	0		/* offset of label in sector */
#define	MAXPARTITIONS	16		/* number of partitions */
#define	RAW_PART	2		/* raw partition: ie. rsd0c */

/* MBR partition table */
#define	DOSBBSECTOR	0		/* MBR sector number */
#define	DOSPARTOFF	446		/* Offset of MBR partition table */
#define	NDOSPART	4		/* # of partitions in MBR */
#define	DOSMAGICOFF	510		/* Offset of magic number */
#define	DOSMAGIC	0xaa55		/* Actual magic number */
#define	MBRMAGIC	DOSMAGIC
#define DOSMBR_SIGNATURE MBRMAGIC
#define DOSMBR_SIGNATURE_OFF DOSMAGICOFF
#define	DOSACTIVE	0x80

struct dos_partition {
	unsigned char	dp_flag;	/* default boot flag */
	unsigned char	dp_shd;	/* start head, IsN't Always Meaningful */
	unsigned char	dp_ssect;	/* start sector, INAM */
	unsigned char	dp_scyl;	/* start cylinder, INAM */
	unsigned char	dp_typ;		/* partition type */
	unsigned char	dp_ehd;	/* end head, INAM */
	unsigned char	dp_esect;	/* end sector, INAM */
	unsigned char	dp_ecyl;	/* end cylinder, INAM */
	unsigned long	dp_start;	/* absolute start sector number */
	unsigned long	dp_size;	/* partition size in sectors */
};

/* Known DOS partition types. */
#define	DOSPTYP_UNUSED	0x00		/* Unused partition */
#define DOSPTYP_FAT12	0x01		/* 12-bit FAT */
#define DOSPTYP_FAT16S	0x04		/* 16-bit FAT, less than 32M */
#define DOSPTYP_EXTEND	0x05		/* Extended; contains sub-partitions */
#define DOSPTYP_FAT16B	0x06		/* 16-bit FAT, more than 32M */
#define DOSPTYP_FAT32	0x0b		/* 32-bit FAT */
#define DOSPTYP_FAT32L	0x0c		/* 32-bit FAT, LBA-mapped */
#define DOSPTYP_FAT16C	0x0e		/* 16-bit FAT, CHS-mapped */
#define DOSPTYP_EXTENDL 0x0f		/* Extended, LBA-mapped; contains sub-partitions */
#define DOSPTYP_ONTRACK	0x54
#define	DOSPTYP_LINUX	0x83		/* That other thing */
#define DOSPTYP_FREEBSD	0xa5		/* FreeBSD partition type */
#define DOSPTYP_OPENBSD	0xa6		/* OpenBSD partition type */
#define DOSPTYP_NETBSD	0xa9		/* NetBSD partition type */

#include <sys/dkbad.h>

/* Isolate the relevant bits to get sector and cylinder. */
#define	DPSECT(s)	((s) & 0x3f)
#define	DPCYL(c, s)	((c) + (((s) & 0xc0) << 2))

static __inline u_int32_t get_le __P((void *p));

static __inline u_int32_t
#ifdef __cplusplus
get_le(void *p)
#else
get_le(p)
	void *p;
#endif
{
	u_int8_t *_p = (u_int8_t *)p;
	int x;
	x = _p[0];
	x |= _p[1] << 8;
	x |= _p[2] << 16;
	x |= _p[3] << 24;
	return x;
}

/* HFS/DPME */

/* partition map structure from Inside Macintosh: Devices, SCSI Manager
 * pp. 13-14.  The partition map always begins on physical block 1.  
 * 
 * With the exception of block 0, all blocks on the disk must belong to
 * exactly one partition.  The partition map itself belongs to a partition
 * of type `APPLE_PARTITION_MAP', and is not limited in size by anything
 * other than available disk space.  The partition map is not necessarily
 * the first partition listed.
 */
struct part_map_entry {
#define PART_ENTRY_MAGIC        0x504d
	u_int16_t       pmSig;          /* partition signature */   
	u_int16_t       pmSigPad;       /* (reserved) */
	u_int32_t       pmMapBlkCnt;    /* number of blocks in partition map */
	u_int32_t       pmPyPartStart;  /* first physical block of partition */
	u_int32_t       pmPartBlkCnt;   /* number of blocks in partition */
	char            pmPartName[32]; /* partition name */
	char            pmPartType[32]; /* partition type */
	u_int32_t       pmLgDataStart;  /* first logical block of data area */
	u_int32_t       pmDataCnt;      /* number of blocks in data area */
	u_int32_t       pmPartStatus;   /* partition status information */
	u_int32_t       pmLgBootStart;  /* first logical block of boot code */
	u_int32_t       pmBootSize;     /* size of boot code, in bytes */
	u_int32_t       pmBootLoad;     /* boot code load address */
	u_int32_t       pmBootLoad2;    /* (reserved) */
	u_int32_t       pmBootEntry;    /* boot code entry point */
	u_int32_t       pmBootEntry2;   /* (reserved) */
	u_int32_t       pmBootCksum;    /* boot code checksum */
	char            pmProcessor[16]; /* processor type (e.g. "68020") */
	u_int8_t        pmBootArgs[128]; /* A/UX boot arguments */
	/* we do not index the disk image as an array,
	 * leave out the on disk padding
	 */
#if 0
	u_int8_t        pad[248];       /* pad to end of block */
#endif
};

#define PART_TYPE_DRIVER        "APPLE_DRIVER"
#define PART_TYPE_DRIVER43      "APPLE_DRIVER43"
#define PART_TYPE_DRIVERATA     "APPLE_DRIVER_ATA"
#define PART_TYPE_DRIVERIOKIT   "APPLE_DRIVER_IOKIT"
#define PART_TYPE_FWDRIVER      "APPLE_FWDRIVER"
#define PART_TYPE_FWB_COMPONENT "FWB DRIVER COMPONENTS"
#define PART_TYPE_FREE          "APPLE_FREE"
#define PART_TYPE_MAC           "APPLE_HFS"
#define PART_TYPE_OPENBSD       "OPENBSD"


struct cpu_disklabel {
	struct dos_partition dosparts[NDOSPART];
	/* only store first entry and openbsd partition */
	struct part_map_entry macparts[2];
	struct dkbad bad;
};

#define DKBAD(x) ((x)->bad)

#endif /* _MACHINE_DISKLABEL_H_ */
@


1.15
log
@Unused variable, poof.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.14 2001/03/14 08:02:11 drahn Exp $	*/
@


1.14
log
@Support shared disks with MacOS. This is only one of the pieces of
the task. The kernel now support a BSD disklabel located inside
a HFS(DPME) partition of type "OpenBSD". It will use this disklabel
for OpenBSD. If no OpenBSD DPME partition exists it will fake HFS
partitions for apple HFS partitions of the disk.
The tool to change the DPME partition type to OpenBSD and booting
support in ofwboot are not yet ready.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.14 2001/03/14 07:57:46 drahn Exp $	*/
a96 1
	u_int32_t c;
@


1.13
log
@DOSPTYP_EXTENDL; sigh@@kuzirabekon.econ.nagasaki-u.ac.jp
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.12 1999/10/26 03:43:48 downsj Exp $	*/
a81 6
struct cpu_disklabel {
	struct dos_partition dosparts[NDOSPART];
	struct dkbad bad;
};

#define DKBAD(x) ((x)->bad)
d106 60
@


1.13.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.14 2001/03/14 08:02:11 drahn Exp $	*/
d82 6
a111 60

/* HFS/DPME */

/* partition map structure from Inside Macintosh: Devices, SCSI Manager
 * pp. 13-14.  The partition map always begins on physical block 1.  
 * 
 * With the exception of block 0, all blocks on the disk must belong to
 * exactly one partition.  The partition map itself belongs to a partition
 * of type `APPLE_PARTITION_MAP', and is not limited in size by anything
 * other than available disk space.  The partition map is not necessarily
 * the first partition listed.
 */
struct part_map_entry {
#define PART_ENTRY_MAGIC        0x504d
	u_int16_t       pmSig;          /* partition signature */   
	u_int16_t       pmSigPad;       /* (reserved) */
	u_int32_t       pmMapBlkCnt;    /* number of blocks in partition map */
	u_int32_t       pmPyPartStart;  /* first physical block of partition */
	u_int32_t       pmPartBlkCnt;   /* number of blocks in partition */
	char            pmPartName[32]; /* partition name */
	char            pmPartType[32]; /* partition type */
	u_int32_t       pmLgDataStart;  /* first logical block of data area */
	u_int32_t       pmDataCnt;      /* number of blocks in data area */
	u_int32_t       pmPartStatus;   /* partition status information */
	u_int32_t       pmLgBootStart;  /* first logical block of boot code */
	u_int32_t       pmBootSize;     /* size of boot code, in bytes */
	u_int32_t       pmBootLoad;     /* boot code load address */
	u_int32_t       pmBootLoad2;    /* (reserved) */
	u_int32_t       pmBootEntry;    /* boot code entry point */
	u_int32_t       pmBootEntry2;   /* (reserved) */
	u_int32_t       pmBootCksum;    /* boot code checksum */
	char            pmProcessor[16]; /* processor type (e.g. "68020") */
	u_int8_t        pmBootArgs[128]; /* A/UX boot arguments */
	/* we do not index the disk image as an array,
	 * leave out the on disk padding
	 */
#if 0
	u_int8_t        pad[248];       /* pad to end of block */
#endif
};

#define PART_TYPE_DRIVER        "APPLE_DRIVER"
#define PART_TYPE_DRIVER43      "APPLE_DRIVER43"
#define PART_TYPE_DRIVERATA     "APPLE_DRIVER_ATA"
#define PART_TYPE_DRIVERIOKIT   "APPLE_DRIVER_IOKIT"
#define PART_TYPE_FWDRIVER      "APPLE_FWDRIVER"
#define PART_TYPE_FWB_COMPONENT "FWB DRIVER COMPONENTS"
#define PART_TYPE_FREE          "APPLE_FREE"
#define PART_TYPE_MAC           "APPLE_HFS"
#define PART_TYPE_OPENBSD       "OPENBSD"


struct cpu_disklabel {
	struct dos_partition dosparts[NDOSPART];
	/* only store first entry and openbsd partition */
	struct part_map_entry macparts[2];
	struct dkbad bad;
};

#define DKBAD(x) ((x)->bad)
@


1.13.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.13.2.1 2001/04/18 16:13:01 niklas Exp $	*/
d97 1
@


1.13.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.13.2.2 2001/07/04 10:22:22 niklas Exp $	*/
@


1.13.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.13.2.5
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.13.2.4 2001/11/13 21:04:16 niklas Exp $	*/
@


1.12
log
@Fix inline function decls to work with C++.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.11 1999/03/23 16:36:18 millert Exp $	*/
d72 1
d74 1
@


1.11
log
@Add DOSMBR_SIGNATURE_OFF define, needed for last disklabel change
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.10 1998/02/19 20:36:35 deraadt Exp $	*/
d91 2
d94 3
d99 1
@


1.10
log
@add netbsd partition, rename 386BSD one to FreeBSD..
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.9 1998/01/11 20:42:01 provos Exp $	*/
d49 1
@


1.9
log
@disklabel spoofing for FAT32.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.8 1997/10/14 17:11:10 pefo Exp $	*/
d74 1
a74 2
#define DOSPTYP_386BSD	0xa5		/* 386BSD partition type */
#define DOSPTYP_NETBSD	DOSPTYP_386BSD	/* NetBSD partition type (XXX) */
d76 1
@


1.8
log
@Get a few things right...
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.7 1997/10/13 13:49:57 pefo Exp $	*/
d70 1
@


1.7
log
@A few adjustments.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.6 1997/10/13 10:53:42 pefo Exp $	*/
d42 6
a47 5
#define	MBRSECTOR	0		/* MBR sector number */
#define	MBRPARTOFF	446		/* Offset of MBR partition table */
#define	NMBRPART	4		/* # of partitions in MBR */
#define	MBRMAGICOFF	510		/* Offset of magic number */
#define	MBRMAGIC	0xaa55		/* Actual magic number */
d49 1
d51 11
a61 11
struct mbr_partition {
	unsigned char	mbr_flag;	/* default boot flag */
	unsigned char	mbr_shd;	/* start head, IsN't Always Meaningful */
	unsigned char	mbr_ssect;	/* start sector, INAM */
	unsigned char	mbr_scyl;	/* start cylinder, INAM */
	unsigned char	mbr_type;	/* partition type */
	unsigned char	mbr_ehd;	/* end head, INAM */
	unsigned char	mbr_esect;	/* end sector, INAM */
	unsigned char	mbr_ecyl;	/* end cylinder, INAM */
	unsigned long	mbr_start;	/* absolute start sector number */
	unsigned long	mbr_size;	/* partition size in sectors */
d79 1
a79 1
	struct mbr_partition dosparts[NMBRPART];
@


1.6
log
@Monolithic PowerPC kernel, new include
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.7 1997/08/08 21:46:37 niklas Exp $	*/
d77 1
a77 1
	struct dos_partition dosparts[NDOSPART];
@


1.5
log
@DOSMBR_SIGNATURE, DOSACTIVE; weingart
@
text
@d1 1
a1 2
/*	$OpenBSD: disklabel.h,v 1.4 1997/08/08 21:46:49 niklas Exp $	*/
/*	$NetBSD: disklabel.h,v 1.1 1996/09/30 16:34:22 ws Exp $	*/
d3 2
a4 3
/*-
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
d17 3
a19 3
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d21 1
a21 1
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
d24 7
a30 7
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d33 2
a34 2
#ifndef	_MACHINE_DISKLABEL_H_
#define	_MACHINE_DISKLABEL_H_
d39 1
a39 1
#define	RAW_PART	2		/* raw partition: XX?c */
d62 4
a65 22
/* Known partition types: */
#define	MBR_EXTENDED	0x05		/* Extended partition */
#define	MBR_NETBSD_LE	0xa5		/* NetBSD little endian partition */
#define	MBR_NETBSD_BE	0xa6		/* NetBSD big endian partition */
#define	MBR_NETBSD	MBR_NETBSD_BE	/* on this machine, we default to BE */

/* For compatibility reasons (mainly for fdisk): */
#define	dos_partition	mbr_partition
#define	dp_flag		mbr_flag
#define	dp_shd		mbr_shd
#define	dp_ssect	mbr_ssect
#define	dp_scyl		mbr_scyl
#define	dp_typ		mbr_type
#define	dp_ehd		mbr_ehd
#define	dp_esect	mbr_esect
#define	dp_ecyl		mbr_ecyl
#define	dp_start	mbr_start
#define	dp_size		mbr_size

#define	DOSPARTOFF	MBRPARTOFF
#define	NDOSPART	NMBRPART

d67 7
a73 3
#define	DOSPTYP_386BSD	MBR_NETBSD
#define DOSPTYP_OPENBSD     0xa6            /* OpenBSD partition type */
#define DOSACTIVE	0x80
d75 1
d77 2
a78 1
	int cd_start;		/* Offset to NetBSD partition in blocks */
d81 2
d87 15
a101 1
#endif	/* _MACHINE_DISKLABEL_H_ */
@


1.4
log
@Change the bounds_check_with_label API to also take a cpu_disklabel
reference for making transferral of meta-information possible from
readdisklabel to bounds_check_with_label.  The first (and maybe only)
thing that will use this is the multi-disklabel-format code on the
alpha where the labelsector is passed via cpu_disklabel so the label
write-protection can work correctly no matter what label was found.

Also use a new macro DKBAD to get at the dkbad field of the cpu_disklabel
implementations that contain it.  This too is for multi-disklabel
architectures where the "bad" field can be inside a union.  Use this
macro as a means for a driver to check if an architecture supports
dkbad constructs.

Remove proto of bounds_check_with_label from all MD disklabel.h as it
is in sys/disklabel.h.

I have not been able to test the changes everywhere, if I break anything
I apologize, and promise to fix it as soon as I become aware of it.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.3 1997/05/05 16:43:58 rahnds Exp $	*/
d49 1
d89 1
@


1.3
log
@add Extended partition id.

I hate when things are sitting around in trees forgotten.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.2 1996/12/28 06:25:04 rahnds Exp $	*/
a95 5

#ifdef	_KERNEL
struct disklabel;
int bounds_check_with_label __P((struct buf *bp, struct disklabel *lp, int wlabel));
#endif	/* _KERNEL */
@


1.2
log
@adding OpenBSD tag to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d85 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
