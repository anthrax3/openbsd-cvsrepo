head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2000.09.06.02.23.25;	author rahnds;	state dead;
branches;
next	1.2;

1.2
date	99.01.23.19.41.33;	author rahnds;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	98.09.27.03.55.58;	author rahnds;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.21.36.44;	author niklas;	state dead;
branches;
next	;


desc
@@


1.3
log
@The ISA based systems are not currently supported. When or If they are
supported in the future, some of this code can be revived, or rewritten
as appropriate. But since it not maintained and will likely not compile,
there is little reason to keep it around for now.
@
text
@/*	$OpenBSD: pcppi.c,v 1.2 1999/01/23 19:41:33 rahnds Exp $	*/
/*	$NetBSD: pcppi.c,v 1.3 1996/12/05 01:39:31 cgd Exp $	*/

/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/bus.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <powerpc/isa/pcppivar.h>

struct pcppi_softc {
	struct device sc_dv;

	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_pit1_ioh, sc_ppi_ioh;
};

#ifdef __BROKEN_INDIRECT_CONFIG
int	pcppi_match __P((struct device *, void *, void *));
#else
int	pcppi_match __P((struct device *, struct cfdata *, void *));
#endif
void	pcppi_attach __P((struct device *, struct device *, void *));

/* ARGH pcppi_ca -> pckbc_ca */
struct cfattach pckbc_ca = {
	sizeof(struct pcppi_softc), pcppi_match, pcppi_attach,
};

/* ARGH pcppi_cd -> pckbc_cd */
struct cfdriver pckbc_cd = {
	NULL, "pcppi", DV_DULL,
};

int	pcppiprint __P((void *, const char *));

int
pcppi_match(parent, match, aux)
	struct device *parent;
#ifdef __BROKEN_INDIRECT_CONFIG
	void *match;
#else
	struct cfdata *match;
#endif
	void *aux;
{
	struct isa_attach_args *ia = aux;
	bus_space_handle_t ppi_ioh, pit1_ioh;
	int have_pit1, have_ppi, rv;
	u_int8_t v, nv;

	/* If values are hardwired to something that they can't be, punt. */
	if (ia->ia_iobase != IOBASEUNK || /* ia->ia_iosize != 0 || XXX isa.c */
	    ia->ia_maddr != MADDRUNK || ia->ia_msize != 0 ||
	    ia->ia_irq != IRQUNK || ia->ia_drq != DRQUNK)
		return (0);

	rv = 0;
	have_pit1 = have_ppi = 0;

	if (bus_space_map(ia->ia_iot, 0x40, 4, 0, &pit1_ioh))	/* XXX */
		goto lose;
	have_pit1 = 1;
	if (bus_space_map(ia->ia_iot, 0x60, 4, 0, &ppi_ioh))	/* XXX */
		goto lose;
	have_ppi = 1;

	/*
	 * Check for existence of PPI.  Realistically, this is either going to
	 * be here or nothing is going to be here.
	 *
	 * We don't want to have any chance of changing speaker output (which
	 * this test might, if it crashes in the middle, or something;
	 * normally it's be to quick to produce anthing audible), but
	 * many "combo chip" mock-PPI's don't seem to support the top bit
	 * of Port B as a settable bit.  The bottom bit has to be settable,
	 * since the speaker driver hardware still uses it.
	 */
	v = bus_space_read_1(ia->ia_iot, ppi_ioh, 1);		/* XXX */
	bus_space_write_1(ia->ia_iot, ppi_ioh, 1, v ^ 0x01);	/* XXX */
	nv = bus_space_read_1(ia->ia_iot, ppi_ioh, 1);		/* XXX */
	if (((nv ^ v) & 0x01) == 0x01)
		rv = 1;
	bus_space_write_1(ia->ia_iot, ppi_ioh, 1, v);		/* XXX */
	nv = bus_space_read_1(ia->ia_iot, ppi_ioh, 1);		/* XXX */
	if (((nv ^ v) & 0x01) != 0x00)
		rv = 0;

	/*
	 * We assume that the programmable interval timer is there.
	 */

lose:
	if (have_pit1)
		bus_space_unmap(ia->ia_iot, pit1_ioh, 4);
	if (have_ppi)
		bus_space_unmap(ia->ia_iot, ppi_ioh, 4);
	if (rv) {
		ia->ia_iobase = 0x60;
		ia->ia_iosize = 0x5;
		ia->ia_msize = 0x0;
	}
	return (rv);
}

void
pcppi_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pcppi_softc *sc = (struct pcppi_softc *)self;
	struct isa_attach_args *ia = aux;
	struct pcppi_attach_args pa;
	bus_space_tag_t iot;

	sc->sc_iot = iot = ia->ia_iot;
	if (bus_space_map(iot, 0x40, 4, 0, &sc->sc_pit1_ioh) ||		/*XXX*/
	    bus_space_map(iot, 0x60, 5, 0, &sc->sc_ppi_ioh))		/*XXX*/
		panic("pcppi_attach: couldn't map");

	printf("\n");

	pa.pa_slot = PCPPI_KBD_SLOT;
	pa.pa_iot = iot;				/* XXX */
	pa.pa_ioh = sc->sc_ppi_ioh;			/* XXX */
	pa.pa_pit_ioh = sc->sc_pit1_ioh;		/* XXX */
	pa.pa_delaybah = ia->ia_delaybah;		/* XXX */
	pa.pa_ic = ia->ia_ic;				/* XXX */
	config_found(self, &pa, pcppiprint);

	/* XXX SHOULD ONLY ATTACH IF SOMETHING IS THERE */
	pa.pa_slot = PCPPI_AUX_SLOT;
	pa.pa_iot = iot;				/* XXX */
	pa.pa_ioh = sc->sc_ppi_ioh;			/* XXX */
	pa.pa_pit_ioh = sc->sc_pit1_ioh;		/* XXX */
	pa.pa_delaybah = ia->ia_delaybah;		/* XXX */
	pa.pa_ic = ia->ia_ic;				/* XXX */
	config_found(self, &pa, pcppiprint);
}

int
pcppiprint(aux, pnp)
	void *aux;
	const char *pnp;
{
	struct pcppi_attach_args *pa = aux;
	const char *type;

	switch (pa->pa_slot) {
	case PCPPI_KBD_SLOT:
		type = "pckbd";
		break;
	case PCPPI_AUX_SLOT:
		type = "pms";
		/* XXX XXX XXX should make sure it's there before configuring */
		return (QUIET);
		break;
	default:
		panic("pcppiprint: bad slot");
	}

        if (pnp)
                printf("%s at %s", type, pnp);
        return (UNCONF);
}
@


1.2
log
@Fixes to update to that the powerpc port builds again.
These change were necessary due to the following changes:
The change/import of the "generic" isa/pcppi driver. The powerpc
port currently has it's own copy of that driver. The two versions
need to be merged.
The parameter changes to cpu_set_kpc. The powerpc change was not quite correct.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcppi.c,v 1.1 1998/09/27 03:55:58 rahnds Exp $	*/
@


1.2.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: pcppi.c,v 1.2 1999/01/23 19:41:33 rahnds Exp $	*/
@


1.1
log
@add wscons support to powerpc port.
This contains several pieces of the port
MI:
    vgafb, on powerpc under openfirmware the vga card comes up in gfx mode.
    instead of resetting it to text mode, vgafb treats this as a raster
    display. The mechanism used may not have been the best, it's
    interface to wscons is as a text display, and it does the character
    plotting itself.
    font_8x16.c was stolen from the atari port for use.

MD:
    ppcppi support stolen from alpha
    pms.c, pckbd.c and the rest of the support files were
    used nearly directly.

    powerpc
      conf.c to support wscon, vga/kbd
      machdep.c hack to get around a bus_space_set_region,bus_space_copy error.
      ofw_machdep.c some hack code on the road to supporting wscons as console.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcppi.c,v 1.2 1997/11/10 15:53:10 niklas Exp $	*/
d57 2
a58 1
struct cfattach pcppi_ca = {
d62 2
a63 1
struct cfdriver pcppi_cd = {
@

