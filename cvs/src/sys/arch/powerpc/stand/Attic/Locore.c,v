head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	UBC_SYNC_B:1.9
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.8
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2001.09.01.15.39.02;	author drahn;	state dead;
branches;
next	1.8;

1.8
date	2001.06.23.01.53.00;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	99.11.09.06.30.15;	author rahnds;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	98.05.29.04.15.43;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	97.04.17.02.27.36;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	97.02.18.22.36.40;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	97.02.06.23.44.54;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.31.06;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.59;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.59;	author rahnds;	state Exp;
branches;
next	;

1.7.2.1
date	2001.07.04.10.23.06;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.10.31.03.07.56;	author nate;	state dead;
branches;
next	;


desc
@@


1.9
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/stand to macppc/stand
@
text
@/*	$OpenBSD: Locore.c,v 1.8 2001/06/23 01:53:00 drahn Exp $	*/
/*	$NetBSD: Locore.c,v 1.1 1997/04/16 20:29:11 thorpej Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <lib/libsa/stand.h>
#include <powerpc/stand/openfirm.h>

/*
#include "machine/cpu.h"
*/

static int (*openfirmware)(void *);

static void setup __P((void));

#ifdef XCOFF_GLUE
asm (".text; .globl _entry; _entry: .long _start,0,0");
#endif
asm("
	.text
	.globl	bat_init
bat_init:

	mfmsr   8
        li      0,0
        mtmsr   0
        isync

        mtibatu 0,0
        mtibatu 1,0
        mtibatu 2,0
        mtibatu 3,0
        mtdbatu 0,0
        mtdbatu 1,0
        mtdbatu 2,0
        mtdbatu 3,0

        li      9,0x12          /* BATL(0, BAT_M, BAT_PP_RW) */
        mtibatl 0,9
        mtdbatl 0,9
        li      9,0x1ffe        /* BATU(0, BAT_BL_256M, BAT_Vs) */
        mtibatu 0,9
        mtdbatu 0,9
        isync

        mtmsr   8
	isync
	blr
");

__dead void
_start(vpd, res, openfirm, arg, argl)
	void *vpd;
	int res;
	int (*openfirm)(void *);
	char *arg;
	int argl;
{
	extern char etext[];

#ifdef	FIRMWORKSBUGS
	syncicache((void *)RELOC, etext - (char *)RELOC);
#endif
	bat_init();
	openfirmware = openfirm;	/* Save entry to Open Firmware */
#if 0
	patch_dec_intr();
#endif
	setup();
	main(arg, argl);
	exit();
}

#if 0
void handle_decr_intr();
__asm (	"	.globl handle_decr_intr\n"
	"	.type handle_decr_intr@@function\n"
	"handle_decr_intr:\n"
	"	rfi\n");


patch_dec_intr()
{
	int time;
	unsigned int *decr_intr = (unsigned int *)0x900;
	unsigned int br_instr;

	/* this hack is to prevent unexected Decrementer Exceptions
	 * when Apple openfirmware enables interrupts
	 */
	time = 0x40000000;
	asm("mtdec %0" :: "r"(time));
	/* we assume that handle_decr_intr is in the first 128 Meg */
	br_instr = (18 << 23) | (unsigned int)handle_decr_intr;
	*decr_intr = br_instr;



}
#endif
__dead void
_rtt()
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
	} args = {
		"exit",
		0,
		0
	};

	openfirmware(&args);
	while (1);			/* just in case */
}

int
OF_finddevice(name)
	char *name;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *device;
		int phandle;
	} args = {
		"finddevice",
		1,
		1,
	};	
	
	args.device = name;
	if (openfirmware(&args) == -1)
		return -1;
	return args.phandle;
}

int
OF_instance_to_package(ihandle)
	int ihandle;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		int phandle;
	} args = {
		"instance-to-package",
		1,
		1,
	};
	
	args.ihandle = ihandle;
	if (openfirmware(&args) == -1)
		return -1;
	return args.phandle;
}

int
OF_getprop(handle, prop, buf, buflen)
	int handle;
	char *prop;
	void *buf;
	int buflen;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int phandle;
		char *prop;
		void *buf;
		int buflen;
		int size;
	} args = {
		"getprop",
		4,
		1,
	};
	
	args.phandle = handle;
	args.prop = prop;
	args.buf = buf;
	args.buflen = buflen;
	if (openfirmware(&args) == -1)
		return -1;
	return args.size;
}

#ifdef	__notyet__	/* Has a bug on FirePower */
int
OF_setprop(handle, prop, buf, len)
	int handle;
	char *prop;
	void *buf;
	int len;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int phandle;
		char *prop;
		void *buf;
		int len;
		int size;
	} args = {
		"setprop",
		4,
		1,
	};
	
	args.phandle = handle;
	args.prop = prop;
	args.buf = buf;
	args.len = len;
	if (openfirmware(&args) == -1)
		return -1;
	return args.size;
}
#endif

int
OF_open(dname)
	char *dname;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *dname;
		int handle;
	} args = {
		"open",
		1,
		1,
	};
	
	args.dname = dname;
	if (openfirmware(&args) == -1)
		return -1;
	return args.handle;
}

void
OF_close(handle)
	int handle;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int handle;
	} args = {
		"close",
		1,
		0,
	};
	
	args.handle = handle;
	openfirmware(&args);
}

int
OF_write(handle, addr, len)
	int handle;
	void *addr;
	int len;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		void *addr;
		int len;
		int actual;
	} args = {
		"write",
		3,
		1,
	};

	args.ihandle = handle;
	args.addr = addr;
	args.len = len;
	if (openfirmware(&args) == -1)
		return -1;
	return args.actual;
}

int
OF_read(handle, addr, len)
	int handle;
	void *addr;
	int len;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		void *addr;
		int len;
		int actual;
	} args = {
		"read",
		3,
		1,
	};

	args.ihandle = handle;
	args.addr = addr;
	args.len = len;
	if (openfirmware(&args) == -1)
		return -1;
	return args.actual;
}

int
OF_seek(handle, pos)
	int handle;
	u_quad_t pos;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int handle;
		int poshi;
		int poslo;
		int status;
	} args = {
		"seek",
		3,
		1,
	};
	
	args.handle = handle;
	args.poshi = (int)(pos >> 32);
	args.poslo = (int)pos;
	if (openfirmware(&args) == -1)
		return -1;
	return args.status;
}

void *
OF_claim(virt, size, align)
	void *virt;
	u_int size;
	u_int align;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		void *virt;
		u_int size;
		u_int align;
		void *baseaddr;
	} args = {
		"claim",
		3,
		1,
	};

/*
#ifdef	FIRMWORKSBUGS
*/
#if 0
	/*
	 * Bug with Firmworks OFW
	 */
	if (virt)
		return virt;
#endif
	args.virt = virt;
	args.size = size;
	args.align = align;
	if (openfirmware(&args) == -1)
		return (void *)-1;
	if (virt != 0) {
		return virt;
	}
	return args.baseaddr;
}

void
OF_release(virt, size)
	void *virt;
	u_int size;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		void *virt;
		u_int size;
	} args = {
		"release",
		2,
		0,
	};
	
	args.virt = virt;
	args.size = size;
	openfirmware(&args);
}

int
OF_milliseconds()
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ms;
	} args = {
		"milliseconds",
		0,
		1,
	};
	
	openfirmware(&args);
	return args.ms;
}

#ifdef __notyet__
void
OF_chain(virt, size, entry, arg, len)
	void *virt;
	u_int size;
	void (*entry)();
	void *arg;
	u_int len;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		void *virt;
		u_int size;
		void (*entry)();
		void *arg;
		u_int len;
	} args = {
		"chain",
		5,
		0,
	};

	args.virt = virt;
	args.size = size;
	args.entry = entry;
	args.arg = arg;
	args.len = len;
	openfirmware(&args);
}
#else
void
OF_chain(virt, size, entry, arg, len)
	void *virt;
	u_int size;
	void (*entry)();
	void *arg;
	u_int len;
{
	/*
	 * This is a REALLY dirty hack till the firmware gets this going
	OF_release(virt, size);
	 */
	entry(0, 0, openfirmware, arg, len);
}
#endif

int
#ifdef	__STDC__
OF_call_method(char *method, int ihandle, int nargs, int nreturns, ...)
#else
OF_call_method(method, ihandle, nargs, nreturns, va_alist)
	char *method;
	int ihandle;
	int nargs;
	int nreturns;
	va_dcl
#endif
{
	va_list ap;
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *method;
		int ihandle;
		int args_n_results[12];
	} args = {
		"call-method",
		2,
		1,
	};
	int *ip, n;

	if (nargs > 6)
		return -1;
	args.nargs = nargs + 2;
	args.nreturns = nreturns + 1;
	args.method = method;
	args.ihandle = ihandle;
	va_start(ap, nreturns);
	for (ip = args.args_n_results + (n = nargs); --n >= 0;)
		*--ip = va_arg(ap, int);

	if (openfirmware(&args) == -1)
		return -1;
	if (args.args_n_results[nargs])
		return args.args_n_results[nargs];
	for (ip = args.args_n_results + nargs + (n = args.nreturns); --n > 0;)
		*va_arg(ap, int *) = *--ip;
	va_end(ap);
	return 0;
}

static int stdin;
static int stdout;

static void
setup()
{
	int chosen;
	
	if ((chosen = OF_finddevice("/chosen")) == -1)
		_rtt();
	if (OF_getprop(chosen, "stdin", &stdin, sizeof(stdin)) != sizeof(stdin)
	    || OF_getprop(chosen, "stdout", &stdout, sizeof(stdout)) !=
	    sizeof(stdout))
		_rtt();
}

void
putchar(c)
	int c;
{
	char ch = c;

	if (c == '\n')
		putchar('\r');
	OF_write(stdout, &ch, 1);
}

int
getchar()
{
	unsigned char ch = '\0';
	int l;

	while ((l = OF_read(stdin, &ch, 1)) != 1)
		if (l != -2 && l != 0)
			return -1;
	return ch;
}
@


1.8
log
@Support for powerpc to load symbols, uses new libsa loadfile.
@
text
@d1 1
a1 1
/*	$OpenBSD: Locore.c,v 1.8 2001/06/23 01:48:41 drahn Exp $	*/
@


1.7
log
@Add OpenBSD tags.
changes to boot on Apple iMac G3 (333). ethernet address changes
Locore.c
	OpenBSD tag
	hack to delay decrementer exception until after bootload,
	apple OFW enables interrupts during "system calls"
	add OF_call_method, to make ofw call by name.
	Apple OFW can return unexpected values from getchar calls.
alloc.c
	OpenBSD tag
boot.c
	OpenBSD tag
	updated (but still unused load symbol code).
	Code cleanup for egcs.
cache.c
	OpenBSD tag
	use dcbst, not dcbf
	icbi has both arguments as registers, not constant and register.
net.c
	OpenBSD tag
netif_of.c
	OpenBSD tag
	add "local-mac-address" to methods of fetching mac address,
	it can be stored in that variable or in mac-address.
	support dma buffers,
	add additional return value for OF_read for network timeout purposes.
ofdev.c
	OpenBSD tag
	support dma buffers,
ofdev.h
	OpenBSD tag
	add dmabuf
	remove MAC default kernel def.
ofwmagic.S
	OpenBSD tag
openfirm.h
	OpenBSD tag
boot.mac/Makefile
	Build debug, - not used for version 3 apple openfirmware, ie imacs.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d49 31
d94 1
@


1.7.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: Locore.c,v 1.7 1999/11/09 06:30:15 rahnds Exp $	*/
a48 31
asm("
	.text
	.globl	bat_init
bat_init:

	mfmsr   8
        li      0,0
        mtmsr   0
        isync

        mtibatu 0,0
        mtibatu 1,0
        mtibatu 2,0
        mtibatu 3,0
        mtdbatu 0,0
        mtdbatu 1,0
        mtdbatu 2,0
        mtdbatu 3,0

        li      9,0x12          /* BATL(0, BAT_M, BAT_PP_RW) */
        mtibatl 0,9
        mtdbatl 0,9
        li      9,0x1ffe        /* BATU(0, BAT_BL_256M, BAT_Vs) */
        mtibatu 0,9
        mtdbatu 0,9
        isync

        mtmsr   8
	isync
	blr
");
a62 1
	bat_init();
@


1.7.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: Locore.c,v 1.7.2.1 2001/07/04 10:23:06 niklas Exp $	*/
@


1.6
log
@Major changes here and there, tweaks elsewhere.
Support for Openfirmware drivers was reintroduced so that more systems
were supported. This should work with the real driver configurations
as well.

Bootloader files were deleted/replaced with the newer versions in the
subdirectory. Some effort has been made to be closer to support booting
(at least the bootloader) on the Mac.

Config files that end with OFW are the openfirmware versions of the kernels
without have native drivers.

Native driver support has not been changed, presumably it still works.
I couldn't test that.
@
text
@d1 1
d64 3
d72 27
d368 1
d370 2
d383 3
d429 1
a429 1
#ifdef	__notyet__
d471 1
a472 1
	OF_release(virt, size);
d477 47
d554 1
a554 1
	unsigned char ch;
d558 1
a558 1
		if (l != -2)
@


1.5
log
@Apple's firmware returns 0 from OF_read(stdin,)
if no characters are available.  Deal with it.
@
text
@d1 1
a1 2
/*	$OpenBSD: Locore.c,v 1.4 1997/02/18 22:36:40 rahnds Exp $	*/
/*	$NetBSD: Locore.c,v 1.1 1996/09/30 16:34:58 ws Exp $	*/
d33 3
a35 2
#include <stand.h>
#include <openfirm.h>
d38 1
a38 1
#include <machine/cpu.h>
d43 1
a43 4
static void
setup();

void _start();
d45 3
a47 3
#define __dead

void const *__start[3] = { &_start, 0, 0};
d57 1
a57 1
	extern char etext;
d59 3
a67 1

d337 1
a337 1
#ifdef	FIREPOWERBUGS
d339 1
a339 1
	 * Bug with FirePower machines (actually Firmworks OFW)
d451 2
a452 1
	    || OF_getprop(chosen, "stdout", &stdout, sizeof(stdout)) != sizeof(stdout))
d474 1
a474 1
		if (l != -2 && l != 0)
@


1.4
log
@Add the necessary pieces to boot on a PowerMAC, does not currently work,
Debugging in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: Locore.c,v 1.3 1997/02/06 23:44:54 rahnds Exp $	*/
d474 1
a474 1
		if (l != -2)
@


1.3
log
@Add zlib support for booting gzipped kernels.
Clean up to allow this to happen.
@
text
@d1 1
a1 1
/*	$OpenBSD: Locore.c,v 1.2 1996/12/28 06:31:06 rahnds Exp $	*/
d46 2
d50 2
d67 1
@


1.2
log
@add OpenBSD tag to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d37 1
d39 1
a57 3
#ifdef	FIREPOWERBUGS
	syncicache((void *)RELOC, &etext - (char *)RELOC);
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
