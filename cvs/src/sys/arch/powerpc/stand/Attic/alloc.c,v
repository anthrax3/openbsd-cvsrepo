head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	UBC_SYNC_B:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.2
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2001.09.01.15.39.02;	author drahn;	state dead;
branches;
next	1.6;

1.6
date	99.11.09.06.30.15;	author rahnds;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	98.05.29.04.15.45;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	97.02.06.23.44.55;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	97.01.09.05.21.28;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.31.10;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.59;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.59;	author rahnds;	state Exp;
branches;
next	;

1.6.2.1
date	2001.10.31.03.07.56;	author nate;	state dead;
branches;
next	;


desc
@@


1.7
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/stand to macppc/stand
@
text
@/*	$OpenBSD: alloc.c,v 1.6 1999/11/09 06:30:15 rahnds Exp $	*/
/*	$NetBSD: alloc.c,v 1.1 1997/04/16 20:29:16 thorpej Exp $	*/

/*
 * Copyright (c) 1997 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1997 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1996
 *	Matthias Drochner.  All rights reserved.
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Dynamic memory allocator suitable for use with OpenFirmware.
 *
 * Compile options:
 *
 *	ALLOC_TRACE	enable tracing of allocations/deallocations
 *
 *	ALLOC_FIRST_FIT	use a first-fit allocation algorithm, rather than
 *			the default best-fit algorithm.
 *
 *	DEBUG		enable debugging sanity checks.
 */

#include <sys/param.h>
#include <sys/queue.h>

#include <lib/libsa/stand.h>

#include <powerpc/stand/openfirm.h>

/*
 * Each block actually has ALIGN(struct ml) + ALIGN(size) bytes allocated
 * to it, as follows:
 *
 * 0 ... (sizeof(struct ml) - 1)
 *	allocated or unallocated: holds size of user-data part of block.
 *
 * sizeof(struct ml) ... (ALIGN(sizeof(struct ml)) - 1)
 *	allocated: unused
 *	unallocated: depends on packing of struct fl
 *
 * ALIGN(sizeof(struct ml)) ... (ALIGN(sizeof(struct ml)) +
 *   ALIGN(data size) - 1)
 *	allocated: user data
 *	unallocated: depends on packing of struct fl
 *
 * 'next' is only used when the block is unallocated (i.e. on the free list).
 * However, note that ALIGN(sizeof(struct ml)) + ALIGN(data size) must
 * be at least 'sizeof(struct fl)', so that blocks can be used as structures
 * when on the free list.
 */

/*
 * Memory lists.
 */
struct ml {
	unsigned	size;
	LIST_ENTRY(ml)	list;
};

/* XXX - this is from NetBSD  */
#define LIST_HEAD_INITIALIZER(head) { NULL }

LIST_HEAD(, ml) freelist = LIST_HEAD_INITIALIZER(freelist);
LIST_HEAD(, ml) allocatedlist = LIST_HEAD_INITIALIZER(allocatedlist);

#define	OVERHEAD	ALIGN(sizeof (struct ml))	/* shorthand */

void *
alloc(size)
	unsigned size;
{
	struct ml *f, *bestf;
	unsigned bestsize = 0xffffffff;	/* greater than any real size */
	char *help;
	int failed;

#ifdef ALLOC_TRACE
	printf("alloc(%u)", size);
#endif

	/*
	 * Account for overhead now, so that we don't get an
	 * "exact fit" which doesn't have enough space.
	 */
	size = ALIGN(size) + OVERHEAD;

#ifdef ALLOC_FIRST_FIT
	/* scan freelist */
	for (f = freelist.lh_first; f != NULL && f->size < size;
	    f = f->list.le_next)
		/* noop */ ;
	bestf = f;
	failed = (bestf == (struct fl *)0);
#else
	/* scan freelist */
	f = freelist.lh_first;
	while (f != NULL) {
		if (f->size >= size) {
			if (f->size == size)	/* exact match */
				goto found;

			if (f->size < bestsize) {
				/* keep best fit */
				bestf = f;
				bestsize = f->size;
			}
		}
		f = f->list.le_next;
	}

	/* no match in freelist if bestsize unchanged */
	failed = (bestsize == 0xffffffff);
#endif

	if (failed) {	/* nothing found */
		/*
		 * Allocate memory from the OpenFirmware, rounded
		 * to page size, and record the chunk size.
		 */
		size = roundup(size, NBPG);
		help = OF_claim(0, size, NBPG);
		if (help == (char *)-1)
			panic("alloc: out of memory");

		f = (struct ml *)help;
		f->size = size;
#ifdef ALLOC_TRACE
		printf("=%lx (new chunk size %u)\n",
		    (u_long)(help + OVERHEAD), f->f_size);
#endif
		goto out;
	}

	/* we take the best fit */
	f = bestf;

 found:
	/* remove from freelist */
	LIST_REMOVE(f, list);
	help = (char *)f;
#ifdef ALLOC_TRACE
	printf("=%lx (origsize %u)\n", (u_long)(help + OVERHEAD), f->size);
#endif
 out:
	/* place on allocated list */
	LIST_INSERT_HEAD(&allocatedlist, f, list);
	return (help + OVERHEAD);
}

void
free(ptr, size)
	void *ptr;
	unsigned size;	/* only for consistenct check */
{
	register struct ml *a = (struct ml *)((char*)ptr - OVERHEAD);

#ifdef ALLOC_TRACE
	printf("free(%lx, %u) (origsize %u)\n", (u_long)ptr, size, a->size);
#endif
#ifdef DEBUG
	if (size > a->size)
		printf("free %u bytes @@%lx, should be <=%u\n",
		    size, (u_long)ptr, a->size);
#endif

	/* Remove from allocated list, place on freelist. */
	LIST_REMOVE(a, list);
	LIST_INSERT_HEAD(&freelist, a, list);
}

void
freeall()
{
#ifdef __notyet__		/* Firmware bug ?! */
	struct ml *m;

	/* Release chunks on freelist... */
	while ((m = freelist.lh_first) != NULL) {
		LIST_REMOVE(m, list);
		OF_release(m, m->size);
	}

	/* ...and allocated list. */
	while ((m = allocatedlist.lh_first) != NULL) {
		LIST_REMOVE(m, list);
		OF_release(m, m->size);
	}
#endif /* __notyet__ */
}
@


1.6
log
@Add OpenBSD tags.
changes to boot on Apple iMac G3 (333). ethernet address changes
Locore.c
	OpenBSD tag
	hack to delay decrementer exception until after bootload,
	apple OFW enables interrupts during "system calls"
	add OF_call_method, to make ofw call by name.
	Apple OFW can return unexpected values from getchar calls.
alloc.c
	OpenBSD tag
boot.c
	OpenBSD tag
	updated (but still unused load symbol code).
	Code cleanup for egcs.
cache.c
	OpenBSD tag
	use dcbst, not dcbf
	icbi has both arguments as registers, not constant and register.
net.c
	OpenBSD tag
netif_of.c
	OpenBSD tag
	add "local-mac-address" to methods of fetching mac address,
	it can be stored in that variable or in mac-address.
	support dma buffers,
	add additional return value for OF_read for network timeout purposes.
ofdev.c
	OpenBSD tag
	support dma buffers,
ofdev.h
	OpenBSD tag
	add dmabuf
	remove MAC default kernel def.
ofwmagic.S
	OpenBSD tag
openfirm.h
	OpenBSD tag
boot.mac/Makefile
	Build debug, - not used for version 3 apple openfirmware, ie imacs.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
@


1.6.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.6 1999/11/09 06:30:15 rahnds Exp $	*/
@


1.5
log
@Major changes here and there, tweaks elsewhere.
Support for Openfirmware drivers was reintroduced so that more systems
were supported. This should work with the real driver configurations
as well.

Bootloader files were deleted/replaced with the newer versions in the
subdirectory. Some effort has been made to be closer to support booting
(at least the bootloader) on the Mac.

Config files that end with OFW are the openfirmware versions of the kernels
without have native drivers.

Native driver support has not been changed, presumably it still works.
I couldn't test that.
@
text
@d1 1
@


1.4
log
@Add zlib support for booting gzipped kernels.
Clean up to allow this to happen.
@
text
@d1 1
a1 2
/*	$OpenBSD: alloc.c,v 1.3 1997/01/09 05:21:28 rahnds Exp $	*/
/*	$NetBSD: alloc.c,v 1.1 1996/09/30 16:35:00 ws Exp $	*/
d4 4
d39 10
a48 1
 * Substitute alloc.c for Openfirmware machines
d50 1
d52 5
d58 21
a78 2
#include <openfirm.h>
#include <stand.h>
d81 1
a81 1
 * al tracks the allocated regions, fl tracks the free list
d84 11
a94 3
	struct ml *next;
	unsigned int size;
} *al, *fl;
d100 35
a134 25
	struct ml **fp, *f;
	unsigned rsz;
	
	size = ALIGN(size) + ALIGN(sizeof(struct ml));
	for (fp = &fl; f = *fp; fp = &f->next)
		if (f->size >= size)
			break;
	if (!f) {
		rsz = roundup(size, NBPG);
		f = OF_claim(0, rsz, NBPG);
		if (f == (void *)-1)
			panic("alloc");
		f->size = rsz;
	} else {
		*fp = f->next;
		if (f->size > roundup(size, NBPG)) {
			/* if the buffer is larger than necessary, split it */
			/* still rounding to page size */
			struct ml *f1;
			f1 = (struct ml *)((u_int)f + roundup(size, NBPG));
			f1->size = f->size - roundup(size, NBPG);
			f->size = roundup(size, NBPG);
			/* put the unused portion back on free list */
			f1->next = fl;
			fl = f1;
d136 1
d138 38
a175 4
		
	f->next = al;
	al = f;
	return (void *)f + ALIGN(sizeof(struct ml));
d181 1
a181 1
	unsigned size;
d183 4
a186 7
	struct ml *f = (struct ml *)(ptr - ALIGN(sizeof(struct ml)));
	
#if IGNORE_FOR_NOW
	if (f->size != roundup(ALIGN(size) + ALIGN(sizeof(struct ml)), NBPG))
		panic("free: wrong size (%x != %x)",
		      f->size,
		      roundup(ALIGN(size) + ALIGN(sizeof(struct ml)), NBPG));
d188 9
a196 2
	f->next = fl;
	fl = f;
d202 2
a203 2
#ifdef	__notyet__		/* looks like there is a bug in Motorola OFW */
	struct ml *m1, *m2;
d205 4
a208 7
	for (m1 = fl; m1; m1 = m2) {
		m2 = m1->next;
		OF_release(m1, m1->size);
	}
	for (m1 = al; m1; m1 = m2) {
		m2 = m1->next;
		OF_release(m1, m1->size);
a209 15
#endif
}

#ifdef	__notdef__
#ifdef	FIREPOWERBUGS
/*
 * Since firmware insists on running virtual, we manage memory ourselves,
 * hoping that OpenFirmware will not need extra memory.
 * (But then, the callbacks don't work anyway).
 */
#define	OFMEM_REGIONS	32
static struct {
	u_int start;
	u_int size;
} OFavail[OFMEM_REGIONS];
d211 4
a214 47
void *
OF_claim(virt, size, align)
	void *virt;
	u_int size, align;
{
	static int init;
	int i;
	u_int addr = -1;
	
	if (!init) {
		int phandle;
		
		init = 1;

		if ((phandle = OF_finddevice("/memory")) == -1
		    || OF_getprop(phandle, "available",
				  OFavail, sizeof OFavail) <= 0)
			return (void *)-1;
	}
	if (align) {
		/* Due to the above, anything is page aligned here */
		for (i = 0; i < OFMEM_REGIONS; i++) {
			if (!OFavail[i].size)
				break;
			if (OFavail[i].size > size) {
				addr = OFavail[i].start;
				OFavail[i].start += size;
				OFavail[i].size -= size;
				break;
			}
		}
	} else {
		addr = (u_int)virt;
		for (i = 0; i < OFMEM_REGIONS; i++) {
			if (!OFavail[i].size) {
				addr = -1;
				break;
			}
			if (OFavail[i].start <= addr
			    && addr + size - OFavail[i].start <= OFavail[i].size) {
				/* Be lazy here, just cut off anything below addr */
				size += addr - OFavail[i].start;
				OFavail[i].start += size;
				OFavail[i].size -= size;
				break;
			}
		}
d216 1
a216 9
	return (void *)addr;
}

/* Since this is called solely immediately before chain, we ignore it. */
void
OF_release(virt, size)
	void *virt;
	u_int size;
{
a217 2
#endif	/* FIREPOWERBUGS */
#endif
@


1.3
log
@Fix the SALIB dependancies correctly so that it builds and locates
the library.

Fix alloc.c so that the piece allocated is of the "correct" size for
the current allocation by splitting the buffer.
This was required so that free would work correctly if a large buffer
was allocated, then freed, the allocated again with a small allocation.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.2 1996/12/28 06:31:10 rahnds Exp $	*/
d95 1
d100 1
@


1.2
log
@add OpenBSD tag to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d68 1
a68 1
	} else
d70 12
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
