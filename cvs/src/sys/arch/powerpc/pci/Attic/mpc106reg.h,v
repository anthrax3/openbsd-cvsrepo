head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	UBC_SYNC_B:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.4
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2001.09.01.15.55.17;	author drahn;	state dead;
branches;
next	1.6;

1.6
date	2000.03.20.07.10.50;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.22.03.55.40;	author rahnds;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.11.08.23.49.00;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	98.10.09.02.09.19;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	98.08.25.07.40.47;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	97.10.11.11.29.29;	author pefo;	state Exp;
branches;
next	;

1.5.2.1
date	2000.03.24.09.08.42;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	1.5.2.3;

1.5.2.3
date	2001.11.13.21.04.16;	author niklas;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	;


desc
@@


1.7
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/pci to macppc/pci

The file pci_machdep.h was not moved in this conversion.
It needs to be check if it is correct that should be the only shared
powerpc/pci file. Or if that file too should be MD, or more files MI.
@
text
@/*	$OpenBSD: mpc106reg.h,v 1.6 2000/03/20 07:10:50 rahnds Exp $ */

/*
 * Copyright (c) 1997 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD for RTMX Inc
 *	by Per Fogelstrom, Opsycon AB.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *
 * mpc106reg.h: PowerPC to PCI bridge controller
 *              This code will probably work with the 105 as well.
 */

#ifndef _MACHINE_MPC106REG_H_
#define _MACHINE_MPC106REG_H_

/* Where we map the PCI memory space - MAP A*/
#define MPC106_V_PCI_MEM_SPACE	0xc0000000	/* Viritual */
#define MPC106_P_PCI_MEM_SPACE	0xc0000000	/* Physical */

/* Where we map the PCI I/O space - MAP A*/
#define MPC106_P_ISA_IO_SPACE	0x80000000
#define MPC106_V_ISA_IO_SPACE	0x80000000
#define MPC106_V_PCI_IO_SPACE	0x80000000
#define MPC106_P_PCI_IO_SPACE	0x80000000

/* Where we map the config space */
#define MPC106_PCI_CONF_SPACE	(MPC106_V_ISA_IO_SPACE + 0x00800000)

/* Where we map the PCI memory space - MAP B*/
#define MPC106_P_PCI_MEM_SPACE_MAP_B	0x80000000	/* Physical */

/* Where we map the PCI I/O space - MAP B*/
#define MPC106_P_PCI_IO_SPACE_MAP_B	0xfe000000

/* offsets from base pointer */
#define	MPC106_REGOFFS(x)	((x) | 0x80000000)

/* Where PCI devices sees CPU memory. */
#define	MPC106_PCI_CPUMEM	0x80000000

#define MPC106_PCI_VENDOR		0x00
#define MPC106_PCI_DEVICE		0x02
#define MPC106_PCI_CMD			0x04
#define MPC106_PCI_STAT			0x06
#define MPC106_PCI_REVID		0x08

#define	MPC106_PCI_PMGMT		0x70

void
mpc_cfg_write_1( struct pcibr_config *cp, u_int32_t reg, u_int8_t val);
void
mpc_cfg_write_2( struct pcibr_config *cp, u_int32_t reg, u_int16_t val);
void
mpc_cfg_write_4( struct pcibr_config *cp, u_int32_t reg, u_int32_t val);

u_int8_t
mpc_cfg_read_1( struct pcibr_config *cp, u_int32_t reg);

u_int16_t
mpc_cfg_read_2( struct pcibr_config *cp, u_int32_t reg);

u_int32_t
mpc_cfg_read_4( struct pcibr_config *cp, u_int32_t reg);

#endif /* _MACHINE_MPC106REG_H_ */
@


1.6
log
@Changes to support uninorth bridge (probably a bit of a hack for now).
cleaned up the previous support for the macobio that was there previously.

Now registers real interupt handler devices instead of the pseudo configed
ones before.

The G4 systems are not yet working, the onboard ide configures properly
and interrupts seem to work, but the system hangs before mounting
the root drive (even ramdisks). Maybe someone will point out something
bogus in the code, so it is being checked in.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.5 2000/01/22 03:55:40 rahnds Exp $ */
@


1.5
log
@Fix pci probing for the powerpc port, it was previously only probing a
portion of the pci devices, 1,2,4,8,... instead of 1,2,3,4,5,6,7,8,...

Updated to use indirect PCI configuration, so that pci-pci buses could
be probed. And that devices > 11 on the pci bus could be detected.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.4 1999/11/08 23:49:00 rahnds Exp $ */
d75 1
a75 2
mpc_cfg_write_1( bus_space_tag_t iot, bus_space_handle_t ioh_cf8,
	bus_space_handle_t ioh_cfc, u_int32_t reg, u_int8_t val);
d77 1
a77 2
mpc_cfg_write_2( bus_space_tag_t iot, bus_space_handle_t ioh_cf8,
	bus_space_handle_t ioh_cfc, u_int32_t reg, u_int16_t val);
d79 1
a79 2
mpc_cfg_write_4( bus_space_tag_t iot, bus_space_handle_t ioh_cf8,
	bus_space_handle_t ioh_cfc, u_int32_t reg, u_int32_t val);
d82 1
a82 2
mpc_cfg_read_1( bus_space_tag_t iot, bus_space_handle_t ioh_cf8,
	bus_space_handle_t ioh_cfc, u_int32_t reg);
d85 1
a85 2
mpc_cfg_read_2( bus_space_tag_t iot, bus_space_handle_t ioh_cf8,
	bus_space_handle_t ioh_cfc, u_int32_t reg);
d88 1
a88 2
mpc_cfg_read_4( bus_space_tag_t iot, bus_space_handle_t ioh_cf8,
	bus_space_handle_t ioh_cfc, u_int32_t reg);
@


1.5.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d75 2
a76 1
mpc_cfg_write_1( struct pcibr_config *cp, u_int32_t reg, u_int8_t val);
d78 2
a79 1
mpc_cfg_write_2( struct pcibr_config *cp, u_int32_t reg, u_int16_t val);
d81 2
a82 1
mpc_cfg_write_4( struct pcibr_config *cp, u_int32_t reg, u_int32_t val);
d85 2
a86 1
mpc_cfg_read_1( struct pcibr_config *cp, u_int32_t reg);
d89 2
a90 1
mpc_cfg_read_2( struct pcibr_config *cp, u_int32_t reg);
d93 2
a94 1
mpc_cfg_read_4( struct pcibr_config *cp, u_int32_t reg);
@


1.5.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.5.2.1 2000/03/24 09:08:42 niklas Exp $ */
@


1.5.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.5.2.4
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.5.2.3 2001/11/13 21:04:16 niklas Exp $ */
@


1.4
log
@Changes for imac support. support for VI computers and MCG Powerstack
will need to be merged back in. Both are currently untested.
mac interrupt support is currently a big hack and needs to be redesigned
as part of the system, several of the mac drivers need busified also.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.3 1998/10/09 02:09:19 rahnds Exp $ */
d58 1
a58 5
#define MPC106_P_PCI_IO_SPACE_MAP_B	0xf0000000

/* Where we map the config space */
#define MPC106_PCI_CONF_SPACE_MAP_B \
	(MPC106_V_ISA_IO_SPACE_MAP_B + 0x00800000)
a65 95
#if 0
static __inline void
mpc_cfg_write_1(iot, ioh, reg, data)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_int32_t reg;
	u_int8_t val;
{
	bus_space_write_4(iot, ioh, 0xcf8, MPC106_REGOFFS(reg));
	bus_space_write_1(iot, ioh, 0xcfc, val);

	u_int32_t addr;
	int device;
	int s;
	int handle; 
	int tag = 0;
	printf("mpc_cfg_write tag %x offset %x data %x\n", tag, offset, data);

	device = (tag >> 11) & 0x1f;
	addr = (0x800 << device) | (tag & 0x380) | MPC106_REGOFFS(reg);

	handle = ppc_open_pci_bridge();
	s = splhigh();

	OF_call_method("config-l!", handle, 1, 1,
		0x80000000 | addr, &data);
	splx(s);
	ppc_close_pci_bridge(handle);
}

static __inline void
mpc_cfg_write_2(iot, ioh, reg, val)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_int32_t reg;
	u_int16_t val;
{
	bus_space_write_4(iot, ioh, 0xcf8, MPC106_REGOFFS(reg));
	bus_space_write_2(iot, ioh, 0xcfc, val);
}

static __inline void
mpc_cfg_write_4(iot, ioh, reg, val)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_int32_t reg;
	u_int32_t val;
{

	bus_space_write_4(iot, ioh, 0xcf8, MPC106_REGOFFS(reg));
	bus_space_write_4(iot, ioh, 0xcfc, val);
}
#endif

static __inline u_int8_t
mpc_cfg_read_1(iot, ioh, reg)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_int32_t reg;
{
	u_int8_t _v_;

	bus_space_write_4(iot, ioh, 0xcf8, MPC106_REGOFFS(reg));
	_v_ = bus_space_read_1(iot, ioh, 0xcfc);
	return(_v_);
}

#if 0
static __inline u_int16_t
mpc_cfg_read_2(iot, ioh, reg)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_int32_t reg;
{
	u_int16_t _v_;

	bus_space_write_4(iot, ioh, 0xcf8, MPC106_REGOFFS(reg));
	_v_ = bus_space_read_2(iot, ioh, 0xcfc);
	return(_v_);
}

static __inline u_int32_t
mpc_cfg_read_4(iot, ioh, reg)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_int32_t reg;
{
	u_int32_t _v_;

	bus_space_write_4(iot, ioh, 0xcf8, MPC106_REGOFFS(reg));
	_v_ = bus_space_read_4(iot, ioh, 0xcfc);
	return(_v_);
}
#endif

d73 22
@


1.3
log
@PCI io space starts at 0x80000000 not 16MB added to that address, when
referring to the offset specified in the pci base address config register.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.2 1998/08/25 07:40:47 pefo Exp $ */
d41 1
a41 1
/* Where we map the PCI memory space */
d45 1
a45 1
/* Where we map the PCI I/O space */
d49 1
d54 10
d65 1
a65 3
#define MPC106_CONF_BASE	(MPC106_V_ISA_IO_SPACE + 0x0cf8)
#define MPC106_CONF_DATA	(MPC106_V_ISA_IO_SPACE + 0x0cfc)
#define	MPC106_REGOFFS(x)	((x << 24) | 0x80)
d70 1
d72 3
a74 1
mpc_cfg_write_1(reg, val)
d78 20
a97 2
	out32(MPC106_CONF_BASE, MPC106_REGOFFS(reg));
	outb(MPC106_CONF_DATA + (reg & 3), val);
d101 3
a103 1
mpc_cfg_write_2(reg, val)
d107 2
a108 5
        u_int32_t _p_ = MPC106_CONF_DATA + (reg & 2);

	out32(MPC106_CONF_BASE, MPC106_REGOFFS(reg));
	__asm__ volatile("sthbrx %0, 0, %1\n" :: "r"(val), "r"(_p_));
	__asm__ volatile("sync"); __asm__ volatile("eieio");
d112 3
a114 1
mpc_cfg_write_4(reg, val)
a117 1
        u_int32_t _p_ = MPC106_CONF_DATA;
d119 2
a120 3
	out32(MPC106_CONF_BASE, MPC106_REGOFFS(reg));
	__asm__ volatile("stwbrx %0, 0, %1\n" :: "r"(val), "r"(_p_));
	__asm__ volatile("sync"); __asm__ volatile("eieio");
d122 1
d125 3
a127 1
mpc_cfg_read_1(reg)
d132 2
a133 2
	out32(MPC106_CONF_BASE, MPC106_REGOFFS(reg));
	_v_ = inb(MPC106_CONF_DATA);
d137 1
d139 3
a141 1
mpc_cfg_read_2(reg)
a144 1
        u_int32_t _p_ = MPC106_CONF_DATA + (reg & 2);
d146 2
a147 3
	out32(MPC106_CONF_BASE, MPC106_REGOFFS(reg));
	__asm__ volatile("lhbrx %0, 0, %1\n" : "=r"(_v_) : "r"(_p_));
	__asm__ volatile("sync"); __asm__ volatile("eieio");
d152 3
a154 1
mpc_cfg_read_4(reg)
a157 1
        u_int32_t _p_ = MPC106_CONF_DATA;
d159 2
a160 3
	out32(MPC106_CONF_BASE, MPC106_REGOFFS(reg));
	__asm__ volatile("lwbrx %0, 0, %1\n" : "=r"(_v_) : "r"(_p_));
	__asm__ volatile("sync"); __asm__ volatile("eieio");
d163 1
@


1.2
log
@Add a few defines and change some.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpc106reg.h,v 1.1 1997/10/11 11:29:29 pefo Exp $ */
d48 1
a48 1
#define MPC106_V_PCI_IO_SPACE	(MPC106_V_ISA_IO_SPACE + 0x01000000)
@


1.1
log
@PCI bus code for monolithic PowerPC kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a40 3
/* Where we map the config space */
#define MPC106_PCI_CONF_SPACE	0x80800000

d46 6
a51 1
#define MPC106_PCI_IO_SPACE	0x81000000
d54 2
a55 2
#define MPC106_CONF_BASE	0x80000cf8
#define MPC106_CONF_DATA	0x80000cfc
a59 4

#define	SWAP32(x)	\
			(((x) << 24) | ((x) >> 24) | \
			(((x) >> 8) & 0xff00) | (((x) & 0xff00) << 8))
@

