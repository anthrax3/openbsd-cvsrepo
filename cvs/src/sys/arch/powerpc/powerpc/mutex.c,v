head	1.7;
access;
symbols
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2017.09.11.09.52.15;	author mpi;	state Exp;
branches;
next	1.6;
commitid	Qfibz8vAOKej3gnC;

1.6
date	2017.05.29.14.19.50;	author mpi;	state Exp;
branches;
next	1.5;
commitid	4u6PWvBw90PH7UDq;

1.5
date	2017.04.30.16.45.45;	author mpi;	state Exp;
branches;
next	1.4;
commitid	2Gtqjzrin9LL2yHk;

1.4
date	2017.04.20.13.57.30;	author visa;	state Exp;
branches;
next	1.3;
commitid	RHJVP52IiQkInZzu;

1.3
date	2016.03.19.11.34.22;	author mpi;	state Exp;
branches;
next	1.2;
commitid	15xZY6veDWwRM6Iq;

1.2
date	2015.09.21.06.21.49;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	oTaEfXOeUQVsOYwt;

1.1
date	2015.08.14.06.14.19;	author dlg;	state Exp;
branches;
next	;
commitid	fjF8E1NC4JOIKQOD;


desc
@@


1.7
log
@Sync alpha/mips64/powerpc mutex implementations.

No functionnal change.

ok visa@@
@
text
@/*	$OpenBSD: mutex.c,v 1.6 2017/05/29 14:19:50 mpi Exp $	*/

/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/param.h>
#include <sys/mutex.h>
#include <sys/systm.h>
#include <sys/atomic.h>

#include <machine/intr.h>
#include <machine/cpu.h>

#include <ddb/db_output.h>

void
__mtx_init(struct mutex *mtx, int wantipl)
{
	mtx->mtx_owner = NULL;
	mtx->mtx_wantipl = wantipl;
	mtx->mtx_oldipl = IPL_NONE;
}

#ifdef MULTIPROCESSOR
#ifdef MP_LOCKDEBUG
#ifndef DDB
#error "MP_LOCKDEBUG requires DDB"
#endif

/* CPU-dependent timing, needs this to be settable from ddb. */
extern int __mp_lock_spinout;
#endif

void
__mtx_enter(struct mutex *mtx)
{
#ifdef MP_LOCKDEBUG
	int nticks = __mp_lock_spinout;
#endif

	while (__mtx_enter_try(mtx) == 0) {
		CPU_BUSY_CYCLE();

#ifdef MP_LOCKDEBUG
		if (--nticks == 0) {
			db_printf("%s: %p lock spun out", __func__, mtx);
			db_enter();
			nticks = __mp_lock_spinout;
		}
#endif
	}
}

int
__mtx_enter_try(struct mutex *mtx)
{
	struct cpu_info *owner, *ci = curcpu();
	int s;

	if (mtx->mtx_wantipl != IPL_NONE)
		s = splraise(mtx->mtx_wantipl);

	owner = atomic_cas_ptr(&mtx->mtx_owner, NULL, ci);
#ifdef DIAGNOSTIC
	if (__predict_false(owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif
	if (owner == NULL) {
		membar_enter();
		if (mtx->mtx_wantipl != IPL_NONE)
			mtx->mtx_oldipl = s;
#ifdef DIAGNOSTIC
		ci->ci_mutex_level++;
#endif
		return (1);
	}

	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);

	return (0);
}
#else
void
__mtx_enter(struct mutex *mtx)
{
	struct cpu_info *ci = curcpu();

#ifdef DIAGNOSTIC
	if (__predict_false(mtx->mtx_owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif

	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = splraise(mtx->mtx_wantipl);

	mtx->mtx_owner = ci;

#ifdef DIAGNOSTIC
	ci->ci_mutex_level++;
#endif
}

int
__mtx_enter_try(struct mutex *mtx)
{
	__mtx_enter(mtx);
	return (1);
}
#endif

void
__mtx_leave(struct mutex *mtx)
{
	int s;

	MUTEX_ASSERT_LOCKED(mtx);

#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level--;
#endif

	s = mtx->mtx_oldipl;
#ifdef MULTIPROCESSOR
	membar_exit();
#endif
	mtx->mtx_owner = NULL;
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);
}
@


1.6
log
@Kill SPINLOCK_SPIN_HOOK, use CPU_BUSY_CYCLE() instead.

ok visa@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.5 2017/04/30 16:45:45 mpi Exp $	*/
d39 1
a39 1
__mtx_init(struct mutex *mtx, int ipl)
d42 1
a42 1
	mtx->mtx_wantipl = ipl;
d47 1
a47 1
#if defined(MP_LOCKDEBUG)
d59 1
a59 1
#if defined(MP_LOCKDEBUG)
d66 1
a66 1
#if defined(MP_LOCKDEBUG)
d70 1
d115 1
@


1.5
log
@Rename Debugger() into db_enter().

Using a name with the 'db_' prefix makes it invisible from the dynamic
profiler.

ok deraadt@@, kettenis@@, visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.4 2017/04/20 13:57:30 visa Exp $	*/
d34 1
a34 1
#include <machine/lock.h>
d64 1
a64 1
		SPINLOCK_SPIN_HOOK;
@


1.4
log
@Hook up mutex(9) to witness(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.3 2016/03/19 11:34:22 mpi Exp $	*/
d69 1
a69 1
			Debugger();
@


1.3
log
@Reduces the noise around the global ``ticks'' variable by renaming
all the local ones to ``nticks''.

ok stefan@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.2 2015/09/21 06:21:49 kettenis Exp $	*/
d57 1
a57 1
mtx_enter(struct mutex *mtx)
d63 1
a63 1
	while (mtx_enter_try(mtx) == 0) {
d76 1
a76 1
mtx_enter_try(struct mutex *mtx)
d106 1
a106 1
mtx_enter(struct mutex *mtx)
d125 1
a125 1
mtx_enter_try(struct mutex *mtx)
d127 1
a127 1
	mtx_enter(mtx);
d133 1
a133 1
mtx_leave(struct mutex *mtx)
@


1.2
log
@Fix membar positioning in mtx_enter_try() and (critically!) mtx_leave()

Same diff as guenther@@ committed for alpha.
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.1 2015/08/14 06:14:19 dlg Exp $	*/
d60 1
a60 1
	int ticks = __mp_lock_spinout;
d67 1
a67 1
		if (--ticks == 0) {
@


1.1
log
@replace the asm mutexes with a c implementation.

there's no real functional advantage to this, except that it will
make it easier to add deadlock detection to the code.

this is modelled on the c mutex implementation thats on alpha,
mips64, and hppa.

ok mpi@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.14 2015/04/17 12:38:54 dlg Exp $	*/
d90 1
a95 1
		membar_enter();
a138 3
#ifdef MULTIPROCESSOR
	membar_exit();
#endif
d144 3
@

