head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2001.09.01.15.44.20;	author drahn;	state dead;
branches;
next	1.5;

1.5
date	2001.08.18.21.59.48;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.01.04.34.24;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	99.10.28.04.28.03;	author rahnds;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.07.05.20.56.26;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	98.05.29.04.15.41;	author rahnds;	state Exp;
branches;
next	;

1.3.2.1
date	2001.07.04.10.23.00;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	1.3.2.3;

1.3.2.3
date	2001.11.13.21.04.16;	author niklas;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/powerpc to macppc/macppc

This moves hardware specific files from the common directory to the
platform specific directory. This leaves common files.
With this change all of the debugger (db_) files have been moved to
the platform specific directory. The debugger should be reconsidered
and commonized.
@
text
@/*	$OpenBSD: opendev.c,v 1.5 2001/08/18 21:59:48 drahn Exp $	*/
/*	$NetBSD: openfirm.c,v 1.1 1996/09/30 16:34:52 ws Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>

#include <machine/psl.h>
#include <machine/stdarg.h>

#include <dev/ofw/openfirm.h>
#include <lib/libkern/libkern.h>

extern void ofw_stack __P((void));
extern void ofbcopy __P((const void *, void *, size_t));

int
OF_instance_to_package(ihandle)
	int ihandle;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		int phandle;
	} args = {
		"instance-to-package",
		1,
		1,
	};

	ofw_stack();
	args.ihandle = ihandle;
	if (openfirmware(&args) == -1)
		return -1;
	return args.phandle;
}

int
OF_package_to_path(phandle, buf, buflen)
	int phandle;
	char *buf;
	int buflen;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int phandle;
		char *buf;
		int buflen;
		int length;
	} args = {
		"package-to-path",
		3,
		1,
	};
	
	ofw_stack();
	if (buflen > PAGE_SIZE)
		return -1;
	args.phandle = phandle;
	args.buf = OF_buf;
	args.buflen = buflen;
	if (openfirmware(&args) < 0)
		return -1;
	if (args.length > 0)
		ofbcopy(OF_buf, buf, args.length);
	return args.length;
}


int
#ifdef	__STDC__
OF_call_method(char *method, int ihandle, int nargs, int nreturns, ...)
#else
OF_call_method(method, ihandle, nargs, nreturns, va_alist)
	char *method;
	int ihandle;
	int nargs;
	int nreturns;
	va_dcl
#endif
{
	va_list ap;
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *method;
		int ihandle;
		int args_n_results[12];
	} args = {
		"call-method",
		2,
		1,
	};
	int *ip, n;
	
	if (nargs > 6)
		return -1;
	args.nargs = nargs + 2;
	args.nreturns = nreturns + 1;
	args.method = method;
	args.ihandle = ihandle;
	va_start(ap, nreturns);
	for (ip = args.args_n_results + (n = nargs); --n >= 0;)
		*--ip = va_arg(ap, int);
	ofw_stack();
	if (openfirmware(&args) == -1)
		return -1;
	if (args.args_n_results[nargs])
		return args.args_n_results[nargs];
	for (ip = args.args_n_results + nargs + (n = args.nreturns); --n > 0;)
		*va_arg(ap, int *) = *--ip;
	va_end(ap);
	return 0;
}
int
#ifdef	__STDC__
OF_call_method_1(char *method, int ihandle, int nargs, ...)
#else
OF_call_method_1(method, ihandle, nargs, va_alist)
	char *method;
	int ihandle;
	int nargs;
	va_dcl
#endif
{
	va_list ap;
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *method;
		int ihandle;
		int args_n_results[8];
	} args = {
		"call-method",
		2,
		2,
	};
	int *ip, n;
	
	if (nargs > 6)
		return -1;
	args.nargs = nargs + 2;
	args.method = method;
	args.ihandle = ihandle;
	va_start(ap, nargs);
	for (ip = args.args_n_results + (n = nargs); --n >= 0;)
		*--ip = va_arg(ap, int);
	va_end(ap);
	ofw_stack();
	if (openfirmware(&args) == -1)
		return -1;
	if (args.args_n_results[nargs])
		return -1;
	return args.args_n_results[nargs + 1];
}

int
OF_open(dname)
	char *dname;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *dname;
		int handle;
	} args = {
		"open",
		1,
		1,
	};
	int l;
	
	ofw_stack();
	if ((l = strlen(dname)) >= PAGE_SIZE)
		return -1;
	ofbcopy(dname, OF_buf, l + 1);
	args.dname = OF_buf;
	if (openfirmware(&args) == -1)
		return -1;
	return args.handle;
}

void
OF_close(handle)
	int handle;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int handle;
	} args = {
		"close",
		1,
		0,
	};

	ofw_stack();
	args.handle = handle;
	openfirmware(&args);
}

/* 
 * This assumes that character devices don't read in multiples of PAGE_SIZE.
 */
int
OF_read(handle, addr, len)
	int handle;
	void *addr;
	int len;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		void *addr;
		int len;
		int actual;
	} args = {
		"read",
		3,
		1,
	};
	int l, act = 0;
	
	ofw_stack();
	args.ihandle = handle;
	args.addr = OF_buf;
	for (; len > 0; len -= l, addr += l) {
		l = min(PAGE_SIZE, len);
		args.len = l;
		if (openfirmware(&args) == -1)
			return -1;
		if (args.actual > 0) {
			ofbcopy(OF_buf, addr, args.actual);
			act += args.actual;
		}
		if (args.actual < l) {
			if (act)
				return act;
			else
				return args.actual;
			
		}
	}
	return act;
}

int
OF_write(handle, addr, len)
	int handle;
	void *addr;
	int len;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		void *addr;
		int len;
		int actual;
	} args = {
		"write",
		3,
		1,
	};
	int l, act = 0;
	
	ofw_stack();
	args.ihandle = handle;
	args.addr = OF_buf;
	for (; len > 0; len -= l, addr += l) {
		l = min(PAGE_SIZE, len);
		ofbcopy(addr, OF_buf, l);
		args.len = l;
		if (openfirmware(&args) == -1)
			return -1;
		l = args.actual;
		act += l;
	}
	return act;
}

int
OF_seek(handle, pos)
	int handle;
	u_quad_t pos;
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int handle;
		int poshi;
		int poslo;
		int status;
	} args = {
		"seek",
		3,
		1,
	};

	ofw_stack();
	args.handle = handle;
	args.poshi = (int)(pos >> 32);
	args.poslo = (int)pos;
	if (openfirmware(&args) == -1)
		return -1;
	return args.status;
}
@


1.5
log
@Some NBPG to PAGE_SIZE conversions.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.4 2001/07/01 04:34:24 drahn Exp $	*/
@


1.4
log
@More prototype/header file cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.3 1999/10/28 04:28:03 rahnds Exp $	*/
d89 1
a89 1
	if (buflen > NBPG)
d209 1
a209 1
	if ((l = strlen(dname)) >= NBPG)
d239 1
a239 1
 * This assumes that character devices don't read in multiples of NBPG.
d266 1
a266 1
		l = min(NBPG, len);
d310 1
a310 1
		l = min(NBPG, len);
@


1.3
log
@clean up a global pointer/array reference for OF_buf.
fix typo someone made.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.2 1999/07/05 20:56:26 rahnds Exp $	*/
d40 1
a44 3



d274 1
a274 1
		if (args.actual < l)
d279 2
@


1.3.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.3 1999/10/28 04:28:03 rahnds Exp $	*/
a39 1
#include <lib/libkern/libkern.h>
d44 3
d276 1
a276 1
		if (args.actual < l) {
a280 2
			
		}
@


1.3.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.3.2.1 2001/07/04 10:23:00 niklas Exp $	*/
@


1.3.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3.2.4
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.3.2.3 2001/11/13 21:04:16 niklas Exp $	*/
@


1.2
log
@Several changes here:
(Some of these changes are work in progress and may change more later)
locore.S:
        rearranged to remove most of the direct openfirmware references in
        the attempt to move all of the openfirmware pieces into ofw_ files.
        This could allow other firmware type to be supported easier. Also
        this keeps the openfirmware code grouped in the same files.

        OF_buf is now statically allocated in the data/bss section instead
        of allocated during initialization.

machdep.c:
        change the order of vm initialization, Still considering removing
        the BATs from use. instead of calls directly to ppc_exit and ppc_boot
        these are now called via a firmware function pointer structure.
        Add iMac recognition to systems
ofw_machdep.c:
        function pointer structure to allow different firmware to supply
        specific system functionality, normally startup and reset,
        including a hook to notify when bsd is about to go virtual,
        in case firmware calls need to act different after that time.

        Allow BSD to handle the virtual memory operations for openfirmware.
        this idea was copied from NetBSD macppc, It is not fully implemented,
        among other problems, openfirmware does not have a mechanism to
        add new mappings.

ofwreal.S:
        Major rewrite of the firmware call code, It still copies
        a portion of the stack, but now does not restore exeception vectors.
        Modified to be similar in idea to NetBSD macppc with BSD handling
        the openfirmware VM faults/TLB misses.
        This still needs to be reviewed, Should be possible to not require
        any stack copy.

opendev.c:
        OF_bus is not a pointer to the buffer, but is the buffer itself now.

openfirm.c:
        OF_bus is not a pointer to the buffer, but is the buffer itself now.
        Dont panic if OF_boot fails, OF_boot can be called by panic.
        instead print and the hang in a spin loop.

pmap.c:
        call the firmware function to get memory regions.
        Scale the PowerPC hash table size by size of real memory.
        Properly align the hash table based on the start, not just
        the size.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.1 1998/05/29 04:15:41 rahnds Exp $	*/
a39 2

extern char OF_buf[];
@


1.1
log
@Major changes here and there, tweaks elsewhere.
Support for Openfirmware drivers was reintroduced so that more systems
were supported. This should work with the real driver configurations
as well.

Bootloader files were deleted/replaced with the newer versions in the
subdirectory. Some effort has been made to be closer to support booting
(at least the bootloader) on the Mac.

Config files that end with OFW are the openfirmware versions of the kernels
without have native drivers.

Native driver support has not been changed, presumably it still works.
I couldn't test that.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d41 1
a41 1
char *OF_buf;
@

