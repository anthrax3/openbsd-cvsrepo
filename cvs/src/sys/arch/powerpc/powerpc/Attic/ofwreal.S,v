head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	powerpc_1:1.1.1.1;
locks; strict;
comment	@# @;


1.6
date	2001.09.01.15.44.20;	author drahn;	state dead;
branches;
next	1.5;

1.5
date	99.07.05.20.56.26;	author rahnds;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	97.10.13.13.42.59;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	97.01.27.03.40.09;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.22.10;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.58;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.58;	author rahnds;	state Exp;
branches;
next	;

1.5.4.1
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	1.5.4.2;

1.5.4.2
date	2001.11.13.21.04.16;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/powerpc to macppc/macppc

This moves hardware specific files from the common directory to the
platform specific directory. This leaves common files.
With this change all of the debugger (db_) files have been moved to
the platform specific directory. The debugger should be reconsidered
and commonized.
@
text
@/*	$OpenBSD: ofwreal.S,v 1.5 1999/07/05 20:56:26 rahnds Exp $	*/
/*	$NetBSD: ofwreal.S,v 1.1 1996/09/30 16:34:51 ws Exp $	*/

/*
 * Copyright (C) 1996 Wolfgang Solfrank.
 * Copyright (C) 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file provides a real-mode client interface on machines, that
 * (incorrectly) only implement virtual mode client interface.
 *
 * It assumes though, that any actual memory in the machine is
 * mapped 1:1 even by the virtual mode OpenFirmware.
 * Furthermore it assumes that addresses returned by OpenFirmware are not
 * accessed by the client.
 *
 */
#include <machine/asm.h>
#include <machine/psl.h>
#include <machine/trap.h>
#include <machine/param.h>

#define	CACHELINE	32		/* Note that this value is really hardwired */

	.data
ofentry:	.long	0		/* actual entry to firmware in virtual mode */

#define	SRSIZE		(16*4+4)
#define	SPRGSIZE	(4*4)
#define	SDR1SIZE	4
#define MSRSIZE		4
#define	SVSIZE		(SRSIZE+SPRGSIZE+SDR1SIZE+MSRSIZE)
#define BATSIZE		(16*4)

	.global _C_LABEL(fwcall)
_C_LABEL(fwcall): .long 0

.lcomm	fwsave,SVSIZE,8
.lcomm	fwbatsave,BATSIZE,8
.lcomm	clsave,SVSIZE,8
.lcomm	clbatsave,BATSIZE,8
.lcomm	ofsrsave,16*4,4	/* 16 words of 4 bytes to store OF segment registers */
.lcomm	srsave,16*4,4 	/* 16 words of 4 bytes to swap OF segment registers*/
	.globl _C_LABEL(ofmsr)
_C_LABEL(ofmsr):	.long	0	/* area to store msr for openfirmware*/

	.text
_ENTRY(_C_LABEL(ofw_init))
	mflr	31			/* save return address */

	mr	13,6			/* save args (only pointer used) */
	lis	8,ofentry@@ha
	stw	5,ofentry@@l(8)		/* save virtual mode firmware entry */

	lis	4,fwcall@@ha		/* call ofw directly until vm setup */
	stw	5,fwcall@@l(4)

	mfmsr	5
	lis	4,_C_LABEL(ofmsr)@@ha	/* save msr from openfirmware */
	stw	5,_C_LABEL(ofmsr)@@l(4)
#if 0
	lis	0,(0x80001ffe)@@ha
	addi	0,0,(0x80001ffe)@@l
	mtdbatu 0,0
	lis	0,(0x80000022)@@ha
	addi	0,0,(0x80000022)@@l
	mtdbatl 0,0
#endif

	lis	3,fwsave@@ha	/* save the mmu values of the firmware */
	addi	3,3,fwsave@@l
	lis	4,fwbatsave@@ha
	addi	4,4,fwbatsave@@l
	bl	savemmu

	/* save openfirmware address mappings */
	bl	_C_LABEL(save_ofw_mapping)

#if 0
	/* dont really need the bats from firmware saved, 0 to disable */
	lis	3,fwbatsave@@ha
	addi	3,3,fwbatsave@@l
	li	4,64
	li	5,0
1:	subi	4,4,4
	stwx	5,4,3
	cmpi	4,0,0
	bne	1b
#endif

	mr	6,13			/* restore args pointer */
	mtlr	31			/* restore return address */
	blr

/*
 * Save everyting related to the mmu to the saveare pointed to by r3.
 */
	.type	savemmu,@@function
savemmu:

	mr	6,4	/* r4 holds pointer to BAT save area */

	li	4,0			/* save SRs */
1:
	addis	4,4,-0x10000000@@ha
	or.	4,4,4
	mfsrin	5,4
	stwu	5,4(3)
	bne	1b

	mfibatl	4,0			/* save BATs */
	stw	4,0(6)
	mfibatu	4,0
	stw	4,4(6)
	mfibatl	4,1
	stw	4,8(6)
	mfibatu	4,1
	stw	4,0xc(6)
	mfibatl	4,2
	stw	4,0x10(6)
	mfibatu	4,2
	stw	4,0x14(6)
	mfibatl	4,3
	stw	4,0x18(6)
	mfibatu	4,3
	stw	4,0x1c(6)
	mfdbatl	4,0
	stw	4,0x20(6)
	mfdbatu	4,0
	stw	4,0x24(6)
	mfdbatl	4,1
	stw	4,0x28(6)
	mfdbatu	4,1
	stw	4,0x2c(6)
	mfdbatl	4,2
	stw	4,0x30(6)
	mfdbatu	4,2
	stw	4,0x34(6)
	mfdbatl	4,3
	stw	4,0x38(6)
	mfdbatu	4,3
	stw	4,0x3c(6)

	mfsprg	4,0			/* save SPRGs */
	stw	4,4(3)
	mfsprg	4,1
	stw	4,8(3)
	mfsprg	4,2
	stw	4,12(3)
	mfsprg	4,3
	stw	4,16(3)

	mfsdr1	4			/* save SDR1 */
	stw	4,20(3)

	addi	4,3,24

	mfmsr	4
	stw	4,24(3)

	sync
	isync

	blr

/*
 * Restore everyting related to the mmu from the savearea pointed to by r3.
 * and bats pointed to by r4.
 */
	.type	restoremmu,@@function
restoremmu:

	li	0,0
	mtmsr	0
	mr	6,4			/* pointer to sr to restore */
	li	4,0			/* restore SRs */
1:
	lwzu	5,4(3)
	addis	4,4,-0x10000000@@ha
	or.	4,4,4
	mtsrin	5,4
	bne	1b

	mfmsr	4
	lis	5,(PSL_IR|PSL_DR)@@h	/* turn off MMU */
	ori	5,5,(PSL_IR|PSL_DR)@@l	/* turn off MMU */
	andc	4,4,5			/* turn off MMU */
	mtmsr	4
	isync

	li	4,0			/* first, invalidate BATs */
	mtibatu	0,4
	mtibatu	1,4
	mtibatu	2,4
	mtibatu	3,4
	mtdbatu	0,4
	mtdbatu	1,4
	mtdbatu	2,4
	mtdbatu	3,4

	lwz	4,0(6)
	mtibatl	0,4			/* restore BATs */
	lwz	4,4(6)
	mtibatu	0,4
	lwz	4,8(6)
	mtibatl	1,4
	lwz	4,12(6)
	mtibatu	1,4
	lwz	4,16(6)
	mtibatl	2,4
	lwz	4,20(6)
	mtibatu	2,4
	lwz	4,24(6)
	mtibatl	3,4
	lwz	4,28(6)
	mtibatu	3,4
	lwz	4,32(6)
	mtdbatl	0,4
	lwz	4,36(6)
	mtdbatu	0,4
	lwz	4,40(6)
	mtdbatl	1,4
	lwz	4,44(6)
	mtdbatu	1,4
	lwz	4,48(6)
	mtdbatl	2,4
	lwz	4,52(6)
	mtdbatu	2,4
	lwz	4,56(6)
	mtdbatl	3,4
	lwz	4,60(6)
	mtdbatu	3,4

	lwz	4,4(3)
	mtsprg	0,4			/* restore SPRGs */
	lwz	4,8(3)
	mtsprg	1,4
	lwz	4,12(3)
	mtsprg	2,4
	lwz	4,16(3)
	mtsprg	3,4

	sync				/* remove everything from tlb */
	lis	4,0x40000@@ha
	li	5,0x1000
1:
	subf.	4,5,4
	tlbie	4
	bne	1b

	sync
	tlbsync
	sync

	lwz	4,20(3)
	sync
	mtsdr1	4			/* restore SDR1 */


	/* tlbia */
	sync
	li	5,0x40
	mtctr	5
	li	4,0
    1:
	tlbie	4
	addi	4,4,0x1000
	bdnz	1b
	sync
	tlbsync
	sync

	lwz	4,24(3)
	mtmsr	4
	isync

	blr


_ENTRY(_C_LABEL(fwentry))
	stwu	1,-16(1)
	mflr	4
	stw	4,20(1)
	stw	3,12(1)			/* save arg */

	lis	3,clsave@@ha		/* save mmu values of client */
	addi	3,3,clsave@@l
	lis	4,clbatsave@@ha		/* save mmu values of client */
	addi	4,4,clbatsave@@l
	bl	savemmu

	lis	3,fwsave@@ha		/* restore mmu values of firmware */
	addi	3,3,fwsave@@l
	lis	4,fwbatsave@@ha
	addi	4,4,fwbatsave@@l
	bl	restoremmu

	lis	3,ofentry@@ha
	lwz	3,ofentry@@l(3)		/* get actual firmware entry */
	mtlr	3

	mfmsr	4
	ori	4,4,PSL_IR|PSL_DR	/* turn on MMU */
	mtmsr	4
	isync

	lwz	3,12(1)			/* restore arg */
	blrl				/* do actual firmware call */

	stw	3,12(1)			/* save return value */

	lis	3,fwsave@@ha		/* save mmu values of firmare */
	addi	3,3,fwsave@@l		/* (might not be necessary, but... */
	lis	4,fwbatsave@@ha
	addi	4,4,fwbatsave@@l
	bl	savemmu

	lis	3,clsave@@ha		/* restore mmu values of client */
	addi	3,3,clsave@@l
	lis	4,clbatsave@@ha		/* save mmu values of client */
	addi	4,4,clbatsave@@l
	bl	restoremmu

	lwz	4,20(1)
	lwz	3,12(1)			/* restore return value */

	mtlr	4
	addi	1,1,16
	blr

/*
 * OpenFirmware entry point
 */
_ENTRY(_C_LABEL(openfirmware))
	stwu	1,-16(1)
	mflr	0			/* save return address */
	stw	0,20(1)

	lis	4,fwcall@@ha
	lwz	4,fwcall@@l(4)

	mtlr	4
	blrl

	lwz	0,20(1)
	mtlr	0
	lwz	1,0(1)
	blr

/*
 * Switch to/from OpenFirmware real mode stack
 *
 * Note: has to be called as the very first thing in OpenFirmware interface routines.
 * E.g.:
 * int
 * OF_xxx(arg1, arg2)
 * type arg1, arg2;
 * {
 *	static struct {
 *		char *name;
 *		int nargs;
 *		int nreturns;
 *		char *method;
 *		int arg1;
 *		int arg2;
 *		int ret;
 *	} args = {
 *		"xxx",
 *		2,
 *		1,
 *	};
 *
 *	ofw_stack();
 *	args.arg1 = arg1;
 *	args.arg2 = arg2;
 *	if (openfirmware(&args) < 0)
 *		return -1;
 *	return args.ret;
 * }
 */
.lcomm	firmstk,NBPG,16
.comm	_C_LABEL(OF_buf),NBPG,PGOFSET

_ENTRY(_C_LABEL(ofw_stack))
	mfmsr	8			/* turn off interrupts */
	andi.	0,8,~(PSL_EE|PSL_RI)@@l
	mtmsr	0
	stw	8,4(1)			/* abuse return address slot */

	lwz	5,0(1)			/* get length of stack frame */
	subf	5,1,5

	lis	7,firmstk+NBPG-8@@ha
	addi	7,7,firmstk+NBPG-8@@l
	li	6,0xf
	andc	7,7,6
	lis	6,ofw_back@@ha
	addi	6,6,ofw_back@@l
	subf	4,5,7			/* make room for stack frame on new stack */
	stwu	1,-16(7)
	stw	6,4(7)			/* setup return pointer */
	
	stw	7,-16(4)

	addi	3,1,8
	addi	1,4,-16
	subi	5,5,8
	subi	4,4,8

	b	_C_LABEL(ofbcopy)		/* and copy it */

	.type ofw_back,@@function
ofw_back:
	lwz	1,0(1)			/* get callers original stack pointer */

	lwz	0,4(1)			/* get saved msr from abused slot */
	mtmsr	0
	
	lwz	1,0(1)			/* return */
	lwz	0,4(1)
	mtlr	0
	blr

@


1.5
log
@Several changes here:
(Some of these changes are work in progress and may change more later)
locore.S:
        rearranged to remove most of the direct openfirmware references in
        the attempt to move all of the openfirmware pieces into ofw_ files.
        This could allow other firmware type to be supported easier. Also
        this keeps the openfirmware code grouped in the same files.

        OF_buf is now statically allocated in the data/bss section instead
        of allocated during initialization.

machdep.c:
        change the order of vm initialization, Still considering removing
        the BATs from use. instead of calls directly to ppc_exit and ppc_boot
        these are now called via a firmware function pointer structure.
        Add iMac recognition to systems
ofw_machdep.c:
        function pointer structure to allow different firmware to supply
        specific system functionality, normally startup and reset,
        including a hook to notify when bsd is about to go virtual,
        in case firmware calls need to act different after that time.

        Allow BSD to handle the virtual memory operations for openfirmware.
        this idea was copied from NetBSD macppc, It is not fully implemented,
        among other problems, openfirmware does not have a mechanism to
        add new mappings.

ofwreal.S:
        Major rewrite of the firmware call code, It still copies
        a portion of the stack, but now does not restore exeception vectors.
        Modified to be similar in idea to NetBSD macppc with BSD handling
        the openfirmware VM faults/TLB misses.
        This still needs to be reviewed, Should be possible to not require
        any stack copy.

opendev.c:
        OF_bus is not a pointer to the buffer, but is the buffer itself now.

openfirm.c:
        OF_bus is not a pointer to the buffer, but is the buffer itself now.
        Dont panic if OF_boot fails, OF_boot can be called by panic.
        instead print and the hang in a spin loop.

pmap.c:
        call the firmware function to get memory regions.
        Scale the PowerPC hash table size by size of real memory.
        Properly align the hash table based on the start, not just
        the size.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofwreal.S,v 1.4 1997/10/13 13:42:59 pefo Exp $	*/
@


1.5.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ofwreal.S,v 1.5 1999/07/05 20:56:26 rahnds Exp $	*/
@


1.5.4.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.3
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: ofwreal.S,v 1.5.4.2 2001/11/13 21:04:16 niklas Exp $	*/
@


1.4
log
@Monolithic (No OpenFirmware driver crap...) PowerPC kernel. This is the
first release based on Wolfgang Solfrank, TooLs GmbH, work. Most OFW stuff
has been ripped out. Only a few functions for memory probing and halt/reboot
functionality has been kept. The kernel currently works with V.I's power.4e
PowerPC604 board, but more will come.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofwreal.S,v 1.3 1997/01/27 03:40:09 rahnds Exp $	*/
d48 1
d55 1
a55 2
#define	BATSIZE		(8*8)
#define	SRSIZE		(16*4)
d58 6
a63 3
#define	SI1SIZE		(2*256)
#define	SI2SIZE		(3*256)
#define	SVSIZE		(BATSIZE+SRSIZE+SPRGSIZE+SDR1SIZE+SI1SIZE+SI2SIZE)
d66 1
d68 5
d74 2
a75 1
_ENTRY(_C_LABEL(ofwr_init))
d82 16
a97 1
	lis	3,fwsave@@ha		/* save the mmu values of the firmware */
d99 2
d103 14
a116 2
	lis	5,fwentry@@ha		/* get new firmware entry */
	addi	5,5,fwentry@@l
d123 1
a123 1
 * Emulated firmware entry.
d125 2
a126 5
fwentry:
	mflr	0			/* save return address */
	stw	0,4(1)
	stwu	1,-16(1)		/* setup stack frame */
	stw	3,8(1)			/* save arg */
d128 1
a128 3
	lis	3,clsave@@ha		/* save mmu values of client */
	addi	3,3,clsave@@l
	bl	savemmu
d130 7
a136 43
	lis	3,fwsave@@ha		/* restore mmu values of firmware */
	addi	3,3,fwsave@@l
	bl	restoremmu

	lis	3,ofentry@@ha
	lwz	3,ofentry@@l(3)		/* get actual firmware entry */
	mtlr	3

	mfmsr	4
	ori	4,4,PSL_IR|PSL_DR	/* turn on MMU */
	mtmsr	4
	isync

	lwz	3,8(1)			/* restore arg */
	blrl				/* do actual firmware call */

	stw	3,8(1)			/* save return value */

	mfmsr	4
	lis	3,(PSL_IR|PSL_DR)@@h	/* turn off MMU */
	ori	3,3,(PSL_IR|PSL_DR)@@l	/* turn off MMU */
	andc	4,4,3			/* turn off MMU */
	mtmsr	4
	isync

	lis	3,fwsave@@ha		/* save mmu values of firmare */
	addi	3,3,fwsave@@l		/* (might not be necessary, but... */
	bl	savemmu

	lis	3,clsave@@ha		/* restore mmu values of client */
	addi	3,3,clsave@@l
	bl	restoremmu

	lwz	3,8(1)			/* restore return value */
	lwz	1,0(1)			/* and return */
	lwz	0,4(1)
	mtlr	0
	blr

/*
 * Save everyting related to the mmu to the saveare pointed to by r3.
 */
savemmu:
d139 1
a139 1
	stw	4,0(3)
d141 1
a141 1
	stw	4,4(3)
d143 1
a143 1
	stw	4,8(3)
d145 1
a145 1
	stw	4,12(3)
d147 1
a147 1
	stw	4,16(3)
d149 1
a149 1
	stw	4,20(3)
d151 1
a151 1
	stw	4,24(3)
d153 1
a153 1
	stw	4,28(3)
d155 1
a155 1
	stw	4,32(3)
d157 1
a157 1
	stw	4,36(3)
d159 1
a159 1
	stw	4,40(3)
d161 1
a161 1
	stw	4,44(3)
d163 1
a163 1
	stw	4,48(3)
d165 1
a165 1
	stw	4,52(3)
d167 1
a167 1
	stw	4,56(3)
d169 1
a169 9
	stwu	4,60(3)

	li	4,0			/* save SRs */
1:
	addis	4,4,-0x10000000@@ha
	or.	4,4,4
	mfsrin	5,4
	stwu	5,4(3)
	bne	1b
a183 8
	mflr	11
	li	3,EXC_DSI		/* save DSI/ISI trap vectors */
	li	5,SI1SIZE
	bl	copy

	mtlr	11
	li	3,EXC_IMISS		/* save MISS trap vectors */
	li	5,SI2SIZE
d185 2
a186 28
copy:
	li	6,CACHELINE
1:
	lwz	7,0(3)
	lwz	8,4(3)
	lwz	9,8(3)
	lwz	10,12(3)
	stw	7,0(4)
	stw	8,4(4)
	stw	9,8(4)
	stw	10,12(4)
	lwz	7,16(3)
	lwz	8,20(3)
	lwz	9,24(3)
	lwz	10,28(3)
	stw	7,16(4)
	stw	8,20(4)
	stw	9,24(4)
	stw	10,28(4)
	dcbst	0,4
	icbi	0,4
	add	3,3,6
	add	4,4,6
	subf.	5,6,5
	bgt	1b

	dcbst	0,4
	icbi	0,4
d194 2
a195 1
 * Restore everyting related to the mmu from the saveare pointed to by r3.
d197 1
d200 18
d228 1
a228 1
	lwz	4,0(3)
d230 1
a230 1
	lwz	4,4(3)
d232 1
a232 1
	lwz	4,8(3)
d234 1
a234 1
	lwz	4,12(3)
d236 1
a236 1
	lwz	4,16(3)
d238 1
a238 1
	lwz	4,20(3)
d240 1
a240 1
	lwz	4,24(3)
d242 1
a242 1
	lwz	4,28(3)
d244 1
a244 1
	lwz	4,32(3)
d246 1
a246 1
	lwz	4,36(3)
d248 1
a248 1
	lwz	4,40(3)
d250 1
a250 1
	lwz	4,44(3)
d252 1
a252 1
	lwz	4,48(3)
d254 1
a254 1
	lwz	4,52(3)
d256 1
a256 1
	lwz	4,56(3)
d258 1
a258 1
	lwzu	4,60(3)
a260 8
	li	4,0			/* restore SRs */
1:
	lwzu	5,4(3)
	addis	4,4,-0x10000000@@ha
	or.	4,4,4
	mtsrin	5,4
	bne	1b

a285 9
	addi	3,3,24
	mflr	11
	li	4,EXC_DSI		/* restore DSI/ISI trap vectors */
	li	5,SI1SIZE
	bl	copy

	li	4,EXC_IMISS		/* restore MISS trap vectors */
	li	5,SI2SIZE
	bl	copy
d289 2
a290 2
	li	3,0x40
	mtctr	3
d300 4
a303 1
	mtlr	11
d305 146
@


1.3
log
@Fix another 16 bit operation on a 32 bit quantity.
don't do and of 16 bit quantity on a 32 bit register.
Also gets rid of the assembler warning/error.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofwreal.S,v 1.2 1996/12/28 06:22:10 rahnds Exp $	*/
a43 1
 * TODO: handle set-callback specially
@


1.2
log
@Adding OpenBSD tags to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d116 3
a118 1
	andi.	4,4,~(PSL_IR|PSL_DR)	/* turn off MMU */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
