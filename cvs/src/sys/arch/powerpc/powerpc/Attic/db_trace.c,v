head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	UBC_SYNC_B:1.12
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2001.09.01.15.44.20;	author drahn;	state dead;
branches;
next	1.11;

1.11
date	2001.08.25.05.00.26;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.09.02.07.05;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.25.23.30.02;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.24.22.00.13;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.23.01.58.01;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	99.07.05.20.24.29;	author rahnds;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	98.09.09.04.39.56;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	98.08.22.17.54.27;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	97.03.21.02.10.48;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.21.53;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.35.56;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.56;	author rahnds;	state Exp;
branches;
next	;

1.6.4.1
date	2001.07.04.10.22.53;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	1.6.4.3;

1.6.4.3
date	2001.11.13.21.04.16;	author niklas;	state Exp;
branches;
next	1.6.4.4;

1.6.4.4
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	;


desc
@@


1.12
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/powerpc to macppc/macppc

This moves hardware specific files from the common directory to the
platform specific directory. This leaves common files.
With this change all of the debugger (db_) files have been moved to
the platform specific directory. The debugger should be reconsidered
and commonized.
@
text
@/*	$OpenBSD: db_trace.c,v 1.11 2001/08/25 05:00:26 drahn Exp $	*/
/*	$NetBSD: db_trace.c,v 1.15 1996/02/22 23:23:41 gwr Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <machine/db_machdep.h>
#include <machine/signal.h>

#include <ddb/db_access.h>
#include <ddb/db_sym.h>
#include <ddb/db_variables.h>
#include <ddb/db_interface.h>
#include <ddb/db_output.h>

struct db_variable db_regs[] = {
	{ "r0",  (long *)&(DDB_REGS->tf.fixreg[0]),	FCN_NULL },
	{ "r1",  (long *)&(DDB_REGS->tf.fixreg[1]),	FCN_NULL },
	{ "r2",  (long *)&(DDB_REGS->tf.fixreg[2]),	FCN_NULL },
	{ "r3",  (long *)&(DDB_REGS->tf.fixreg[3]),	FCN_NULL },
	{ "r4",  (long *)&(DDB_REGS->tf.fixreg[4]),	FCN_NULL },
	{ "r5",  (long *)&(DDB_REGS->tf.fixreg[5]),	FCN_NULL },
	{ "r6",  (long *)&(DDB_REGS->tf.fixreg[6]),	FCN_NULL },
	{ "r7",  (long *)&(DDB_REGS->tf.fixreg[7]),	FCN_NULL },
	{ "r8",  (long *)&(DDB_REGS->tf.fixreg[8]),	FCN_NULL },
	{ "r9",  (long *)&(DDB_REGS->tf.fixreg[9]),	FCN_NULL },
	{ "r10", (long *)&(DDB_REGS->tf.fixreg[10]),	FCN_NULL },
	{ "r11", (long *)&(DDB_REGS->tf.fixreg[11]),	FCN_NULL },
	{ "r12", (long *)&(DDB_REGS->tf.fixreg[12]),	FCN_NULL },
	{ "r13", (long *)&(DDB_REGS->tf.fixreg[13]),	FCN_NULL },
	{ "r14", (long *)&(DDB_REGS->tf.fixreg[13]),	FCN_NULL },
	{ "r15", (long *)&(DDB_REGS->tf.fixreg[13]),	FCN_NULL },
	{ "r16", (long *)&(DDB_REGS->tf.fixreg[13]),	FCN_NULL },
	{ "r17", (long *)&(DDB_REGS->tf.fixreg[17]),	FCN_NULL },
	{ "r18", (long *)&(DDB_REGS->tf.fixreg[18]),	FCN_NULL },
	{ "r19", (long *)&(DDB_REGS->tf.fixreg[19]),	FCN_NULL },
	{ "r20", (long *)&(DDB_REGS->tf.fixreg[20]),	FCN_NULL },
	{ "r21", (long *)&(DDB_REGS->tf.fixreg[21]),	FCN_NULL },
	{ "r22", (long *)&(DDB_REGS->tf.fixreg[22]),	FCN_NULL },
	{ "r23", (long *)&(DDB_REGS->tf.fixreg[23]),	FCN_NULL },
	{ "r24", (long *)&(DDB_REGS->tf.fixreg[24]),	FCN_NULL },
	{ "r25", (long *)&(DDB_REGS->tf.fixreg[25]),	FCN_NULL },
	{ "r26", (long *)&(DDB_REGS->tf.fixreg[26]),	FCN_NULL },
	{ "r27", (long *)&(DDB_REGS->tf.fixreg[27]),	FCN_NULL },
	{ "r28", (long *)&(DDB_REGS->tf.fixreg[28]),	FCN_NULL },
	{ "r29", (long *)&(DDB_REGS->tf.fixreg[29]),	FCN_NULL },
	{ "r30", (long *)&(DDB_REGS->tf.fixreg[30]),	FCN_NULL },
	{ "r31", (long *)&(DDB_REGS->tf.fixreg[31]),	FCN_NULL },
	{ "lr", (long *)&(DDB_REGS->tf.lr),	FCN_NULL },
	{ "cr", (long *)&(DDB_REGS->tf.cr),	FCN_NULL },
	{ "xer", (long *)&(DDB_REGS->tf.xer),	FCN_NULL },
	{ "ctr", (long *)&(DDB_REGS->tf.ctr),	FCN_NULL },
	{ "iar", (long *)&(DDB_REGS->tf.srr0),	FCN_NULL },
	{ "msr", (long *)&(DDB_REGS->tf.srr1),	FCN_NULL },
};
struct db_variable *db_eregs = db_regs + sizeof(db_regs)/sizeof(db_regs[0]);

extern label_t	*db_recover;

/*
 * this is probably hackery.
 */
void
db_save_regs(struct trapframe *frame)
{
	bcopy(frame, &(ddb_regs.tf), sizeof (struct trapframe));
}


db_expr_t
db_dumpframe(u_int32_t pframe)
{
	u_int32_t nextframe;
	u_int32_t lr;
	u_int32_t *access;
	char *name;
	db_expr_t offset;

	access = (u_int32_t *)(pframe);
	nextframe = *access;

	access = (u_int32_t *)(pframe+4);
	lr = *access;

	db_find_sym_and_offset(lr-4, &name, &offset);
	if (!name) {
		name = "?";
		offset = 65536;
	}
	db_printf("%x %s+0x%x fp %x nfp %x\n",
		lr-4, name, offset, pframe, nextframe);

	return nextframe;
}
/*
 *	Frame tracing.
 */
void
db_stack_trace_cmd(addr, have_addr, count, modif)
	db_expr_t	addr;
	int		have_addr;
	db_expr_t	count;
	char		*modif;
{

	if (have_addr == 0){
		addr = ddb_regs.tf.fixreg[1];
	}
	while (addr != 0) {
		addr = db_dumpframe(addr);
	}
}
@


1.11
log
@It is nice to have the hex address of the function as well as the symbol
address.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.10 2001/07/09 02:07:05 mickey Exp $	*/
@


1.10
log
@protos, includes, spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.9 2001/06/25 23:30:02 drahn Exp $	*/
d117 2
a118 1
	db_printf("%s+0x%x fp %x nfp %x\n", name, offset, pframe, nextframe);
@


1.9
log
@closer to building with -Wno-uninitialized
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.8 2001/06/24 22:00:13 drahn Exp $	*/
d4 1
a4 1
/* 
d8 1
a8 1
 * 
d14 1
a14 1
 * 
d18 1
a18 1
 * 
d20 1
a20 1
 * 
d25 2
a26 2
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon 
d31 1
d40 2
d43 1
a43 1
struct db_variable db_regs[] = { 
d98 1
a98 1
db_dumpframe (u_int32_t pframe)
@


1.8
log
@Changes in ddb, mostly from NetBSD, to support ddb continue.
Other cleanups in debugger.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.7 2001/06/23 01:58:01 drahn Exp $	*/
a99 2
	db_sym_t  sym;
	int error;
a127 5
	int i, val, nargs, spa;
	db_addr_t	regp;
	char *		name;
	boolean_t	kernel_only = TRUE;
	boolean_t	trace_thread = FALSE;
@


1.7
log
@Perform symbol lookup on ddb trace command.
Slightly more useful this way, some say.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.6 1999/07/05 20:24:29 rahnds Exp $	*/
d116 1
a116 1
	db_printf("lr %s+%x fp %x nfp %x\n", name, offset, pframe, nextframe);
@


1.6
log
@Fix backtraces from ddb for powerpc, If addr is not specified, it will
start using the ddb_regs. If the address is specififed, start from the
address.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.5 1998/09/09 04:39:56 rahnds Exp $	*/
d100 1
d102 2
d111 6
a116 1
	db_printf("lr %x fp %x nfp %x\n", lr, pframe, nextframe);
@


1.6.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.6 1999/07/05 20:24:29 rahnds Exp $	*/
d100 1
a100 2
	char *name;
	db_expr_t offset;
d108 1
a108 6
	db_find_sym_and_offset(lr-4, &name, &offset);
	if (!name) {
		name = "?";
		offset = 65536;
	}
	db_printf("%s+0x%x fp %x nfp %x\n", name, offset, pframe, nextframe);
d122 5
@


1.6.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.6.4.1 2001/07/04 10:22:53 niklas Exp $	*/
@


1.6.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.6.4.4
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.6.4.3 2001/11/13 21:04:16 niklas Exp $	*/
@


1.5
log
@remove debugging printf that had been forgotten.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.4 1998/08/22 17:54:27 rahnds Exp $	*/
d128 4
a131 1
	while (1) {
a132 5
		if (addr == 0) {
			break;
		}
	}
	for (i = count; i > 0 ; i--) {
@


1.4
log
@Changes to get a at least mostly working kernel debugger.
Need to get symbol support in the loader too.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.3 1997/03/21 02:10:48 niklas Exp $	*/
a89 1
	printf ("%x %x %d\n", frame, &(ddb_regs.tf), sizeof (struct trapframe));
@


1.3
log
@Yet more DDB type correctness
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.2 1996/12/28 06:21:53 rahnds Exp $	*/
d34 1
d41 38
a78 33
	{ "r1",  (long *)&ddb_regs.r1,	FCN_NULL },
	{ "r2",  (long *)&ddb_regs.r2,	FCN_NULL },
	{ "r3",  (long *)&ddb_regs.r3,	FCN_NULL },
	{ "r4",  (long *)&ddb_regs.r4,	FCN_NULL },
	{ "r5",  (long *)&ddb_regs.r5,	FCN_NULL },
	{ "r6",  (long *)&ddb_regs.r6,	FCN_NULL },
	{ "r7",  (long *)&ddb_regs.r7,	FCN_NULL },
	{ "r8",  (long *)&ddb_regs.r8,	FCN_NULL },
	{ "r9",  (long *)&ddb_regs.r9,	FCN_NULL },
	{ "r10", (long *)&ddb_regs.r10,	FCN_NULL },
	{ "r11", (long *)&ddb_regs.r11,	FCN_NULL },
	{ "r12", (long *)&ddb_regs.r12,	FCN_NULL },
	{ "r13", (long *)&ddb_regs.r13,	FCN_NULL },
	{ "r14", (long *)&ddb_regs.r13,	FCN_NULL },
	{ "r15", (long *)&ddb_regs.r13,	FCN_NULL },
	{ "r16", (long *)&ddb_regs.r13,	FCN_NULL },
	{ "r17", (long *)&ddb_regs.r17,	FCN_NULL },
	{ "r18", (long *)&ddb_regs.r18,	FCN_NULL },
	{ "r19", (long *)&ddb_regs.r19,	FCN_NULL },
	{ "r20", (long *)&ddb_regs.r20,	FCN_NULL },
	{ "r21", (long *)&ddb_regs.r21,	FCN_NULL },
	{ "r22", (long *)&ddb_regs.r22,	FCN_NULL },
	{ "r23", (long *)&ddb_regs.r23,	FCN_NULL },
	{ "r24", (long *)&ddb_regs.r24,	FCN_NULL },
	{ "r25", (long *)&ddb_regs.r25,	FCN_NULL },
	{ "r26", (long *)&ddb_regs.r26,	FCN_NULL },
	{ "r27", (long *)&ddb_regs.r27,	FCN_NULL },
	{ "r28", (long *)&ddb_regs.r28,	FCN_NULL },
	{ "r29", (long *)&ddb_regs.r29,	FCN_NULL },
	{ "r30", (long *)&ddb_regs.r30,	FCN_NULL },
	{ "r31", (long *)&ddb_regs.r31,	FCN_NULL },
	{ "r32", (long *)&ddb_regs.r32,	FCN_NULL },
	{ "iar", (long *)&ddb_regs.iar,	FCN_NULL },
d85 29
d129 8
a136 1
	db_printf("not supported");
a137 1

@


1.2
log
@Adding OpenBSD tags to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d40 33
a72 33
	{ "r1",  (int *) &ddb_regs.r1,	FCN_NULL },
	{ "r2",  (int *) &ddb_regs.r2,	FCN_NULL },
	{ "r3",  (int *) &ddb_regs.r3,	FCN_NULL },
	{ "r4",  (int *) &ddb_regs.r4,	FCN_NULL },
	{ "r5",  (int *) &ddb_regs.r5,	FCN_NULL },
	{ "r6",  (int *) &ddb_regs.r6,	FCN_NULL },
	{ "r7",  (int *) &ddb_regs.r7,	FCN_NULL },
	{ "r8",  (int *) &ddb_regs.r8,	FCN_NULL },
	{ "r9",  (int *) &ddb_regs.r9,	FCN_NULL },
	{ "r10", (int *) &ddb_regs.r10,	FCN_NULL },
	{ "r11", (int *) &ddb_regs.r11,	FCN_NULL },
	{ "r12", (int *) &ddb_regs.r12,	FCN_NULL },
	{ "r13", (int *) &ddb_regs.r13,	FCN_NULL },
	{ "r14", (int *) &ddb_regs.r13,	FCN_NULL },
	{ "r15", (int *) &ddb_regs.r13,	FCN_NULL },
	{ "r16", (int *) &ddb_regs.r13,	FCN_NULL },
	{ "r17", (int *) &ddb_regs.r17,	FCN_NULL },
	{ "r18", (int *) &ddb_regs.r18,	FCN_NULL },
	{ "r19", (int *) &ddb_regs.r19,	FCN_NULL },
	{ "r20", (int *) &ddb_regs.r20,	FCN_NULL },
	{ "r21", (int *) &ddb_regs.r21,	FCN_NULL },
	{ "r22", (int *) &ddb_regs.r22,	FCN_NULL },
	{ "r23", (int *) &ddb_regs.r23,	FCN_NULL },
	{ "r24", (int *) &ddb_regs.r24,	FCN_NULL },
	{ "r25", (int *) &ddb_regs.r25,	FCN_NULL },
	{ "r26", (int *) &ddb_regs.r26,	FCN_NULL },
	{ "r27", (int *) &ddb_regs.r27,	FCN_NULL },
	{ "r28", (int *) &ddb_regs.r28,	FCN_NULL },
	{ "r29", (int *) &ddb_regs.r29,	FCN_NULL },
	{ "r30", (int *) &ddb_regs.r30,	FCN_NULL },
	{ "r31", (int *) &ddb_regs.r31,	FCN_NULL },
	{ "r32", (int *) &ddb_regs.r32,	FCN_NULL },
	{ "iar", (int *) &ddb_regs.iar,	FCN_NULL },
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
