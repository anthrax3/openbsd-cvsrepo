head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.12
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.14
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.26
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.4
	UBC:1.2.0.24
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.07.09.08.34.49;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	vomGI6oJKwOTU2NS;

1.13
date	2014.05.09.18.16.15;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.10.16.46.09;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.04.27.16.01.47;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2007.03.20.20.59.53;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.09.14.52.12;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.15.02.43.09;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.02.22.09.29;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.02.21.57.52;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.02.21.30.12;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.15.09.01.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.15.02.02.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.28.06.21.56;	author rahnds;	state Exp;
branches
	1.2.14.1
	1.2.24.1;
next	1.1;

1.1
date	96.12.21.20.35.57;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.35.57;	author rahnds;	state Exp;
branches;
next	;

1.2.14.1
date	2001.11.13.22.14.34;	author niklas;	state dead;
branches;
next	1.2.14.2;

1.2.14.2
date	2002.03.29.19.46.01;	author niklas;	state Exp;
branches;
next	1.2.14.3;

1.2.14.3
date	2004.02.19.10.49.57;	author niklas;	state Exp;
branches;
next	;

1.2.24.1
date	2002.10.29.00.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@obvious need for systm.h, which no longer comes in from something user.h includes
@
text
@/*	$OpenBSD: fpu.c,v 1.13 2014/05/09 18:16:15 miod Exp $	*/
/*	$NetBSD: fpu.c,v 1.1 1996/09/30 16:34:44 ws Exp $	*/

/*
 * Copyright (C) 1996 Wolfgang Solfrank.
 * Copyright (C) 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/user.h>

#include <machine/fpu.h>
#include <machine/psl.h>

void
enable_fpu(struct proc *p)
{
	struct cpu_info *ci = curcpu();
	struct pcb *pcb = &p->p_addr->u_pcb;
	struct trapframe *tf = trapframe(p);
	int msr;
	
	if (!(pcb->pcb_flags & PCB_FPU)) {
		bzero(&pcb->pcb_fpu, sizeof pcb->pcb_fpu);
		pcb->pcb_flags |= PCB_FPU;
	}

	if (pcb->pcb_fpcpu != NULL || ci->ci_fpuproc != NULL) {
		printf("attempting to restore fpu state when in use pcb %p"
		    " fpproc %p\n", pcb->pcb_fpcpu, ci->ci_fpuproc);
	}
	msr = ppc_mfmsr();
	ppc_mtmsr((msr  & ~PSL_EE) | PSL_FP);
	__asm volatile("isync");

	asm volatile ("lfd 0,0(%0); mtfsf 0xff,0" :: "b"(&pcb->pcb_fpu.fpcsr));
	asm ("lfd 0,0(%0);"
	     "lfd 1,8(%0);"
	     "lfd 2,16(%0);"
	     "lfd 3,24(%0);"
	     "lfd 4,32(%0);"
	     "lfd 5,40(%0);"
	     "lfd 6,48(%0);"
	     "lfd 7,56(%0);"
	     "lfd 8,64(%0);"
	     "lfd 9,72(%0);"
	     "lfd 10,80(%0);"
	     "lfd 11,88(%0);"
	     "lfd 12,96(%0);"
	     "lfd 13,104(%0);"
	     "lfd 14,112(%0);"
	     "lfd 15,120(%0);"
	     "lfd 16,128(%0);"
	     "lfd 17,136(%0);"
	     "lfd 18,144(%0);"
	     "lfd 19,152(%0);"
	     "lfd 20,160(%0);"
	     "lfd 21,168(%0);"
	     "lfd 22,176(%0);"
	     "lfd 23,184(%0);"
	     "lfd 24,192(%0);"
	     "lfd 25,200(%0);"
	     "lfd 26,208(%0);"
	     "lfd 27,216(%0);"
	     "lfd 28,224(%0);"
	     "lfd 29,232(%0);"
	     "lfd 30,240(%0);"
	     "lfd 31,248(%0)" :: "b"(&pcb->pcb_fpu.fpr[0]));
	ci->ci_fpuproc = p;
	pcb->pcb_fpcpu = ci;
	tf->srr1 |= PSL_FP;
	ppc_mtmsr(msr);
	__asm volatile("isync");
}

void
save_fpu(void)
{
	struct cpu_info *ci = curcpu();
	struct pcb *pcb;
	struct proc *p;
	struct trapframe *tf;
	int msr;
		
	msr = ppc_mfmsr();
	ppc_mtmsr((msr  & ~PSL_EE) | PSL_FP);

	p = ci->ci_fpuproc;

	if (p == NULL) {
		ppc_mtmsr(msr);
		return;
	}

	pcb = &p->p_addr->u_pcb;
	
	__asm volatile("isync");

	asm ("stfd 0,0(%0);"
	     "stfd 1,8(%0);"
	     "stfd 2,16(%0);"
	     "stfd 3,24(%0);"
	     "stfd 4,32(%0);"
	     "stfd 5,40(%0);"
	     "stfd 6,48(%0);"
	     "stfd 7,56(%0);"
	     "stfd 8,64(%0);"
	     "stfd 9,72(%0);"
	     "stfd 10,80(%0);"
	     "stfd 11,88(%0);"
	     "stfd 12,96(%0);"
	     "stfd 13,104(%0);"
	     "stfd 14,112(%0);"
	     "stfd 15,120(%0);"
	     "stfd 16,128(%0);"
	     "stfd 17,136(%0);"
	     "stfd 18,144(%0);"
	     "stfd 19,152(%0);"
	     "stfd 20,160(%0);"
	     "stfd 21,168(%0);"
	     "stfd 22,176(%0);"
	     "stfd 23,184(%0);"
	     "stfd 24,192(%0);"
	     "stfd 25,200(%0);"
	     "stfd 26,208(%0);"
	     "stfd 27,216(%0);"
	     "stfd 28,224(%0);"
	     "stfd 29,232(%0);"
	     "stfd 30,240(%0);"
	     "stfd 31,248(%0)" :: "b"(&pcb->pcb_fpu.fpr[0]));
	asm volatile ("mffs 0; stfd 0,0(%0)" :: "b"(&pcb->pcb_fpu.fpcsr));
	asm ("lfd 0,0(%0);" :: "b"(&pcb->pcb_fpu.fpr[0]));

	tf = trapframe(ci->ci_fpuproc);
	tf->srr1 &= ~PSL_FP;
	ci->ci_fpuproc = NULL;
	pcb->pcb_fpcpu = NULL;

	ppc_mtmsr(msr);
	__asm volatile("isync");
}
@


1.13
log
@Format string fixes and removal of -Wno-format for *ppc kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.12 2009/12/10 16:46:09 deraadt Exp $	*/
d35 1
@


1.12
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.11 2008/04/27 16:01:47 drahn Exp $	*/
d55 2
a56 2
		printf("attempting to restore fpu state when in use pcb %x"
		    " fpproc %x\n", pcb->pcb_fpcpu, ci->ci_fpuproc);
@


1.11
log
@FPU/Altivec cleanup and prep for SMP.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.10 2007/03/20 20:59:53 kettenis Exp $	*/
d103 1
a103 1
save_fpu()
@


1.10
log
@Move macppc to __HAVE_CPUINFO, and make locore.S and trap.c suitable for
MULTIPROCESSOR.  From now on sprg0 holds a pointer to struct cpuinfo, which
is used to spill registers to during trap instead of the globals we used to
use for that purpose.  Bits and pieces from NetBSD.  Help from drahn@@ and art@@.
Tested by xsa@@, thib@@, miod@@, gwk@@, deraadt@@.

ok drahn@@, gwk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.9 2005/10/09 14:52:12 drahn Exp $	*/
d53 5
d96 1
d163 1
@


1.9
log
@Subtle changes to the powerpc fpu handling, basically fpuproc is handled
in a non-raceable manner inside save_fpu and enable_fpu so that the
eventual SMP case will not grab a half loaded fpu context.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.8 2003/10/15 02:43:09 drahn Exp $	*/
d44 1
a44 1
	int msr;
d47 1
d90 1
a90 1
	fpuproc = p;
d99 1
a99 1
	int msr;
d103 1
d108 1
a108 1
	p = fpuproc;
d154 1
a154 1
	tf = trapframe(fpuproc);
d156 1
a156 1
	fpuproc = NULL;
@


1.8
log
@Sometimes KNF is not a destination, but a journey. Also ANSI.
Binaries unchanged.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.7 2003/07/02 22:09:29 drahn Exp $	*/
a47 1
	tf->srr1 |= PSL_FP;
d53 1
a53 1
	ppc_mtmsr(msr | PSL_FP);
d89 2
d96 1
a96 1
save_fpu(struct proc *p)
d100 7
d108 2
a109 1
	if (p == NULL)
d111 1
a114 2
	msr = ppc_mfmsr();
	ppc_mtmsr(msr | PSL_FP);
d150 6
@


1.7
log
@[kick] fix merge error.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.6 2003/07/02 21:57:52 drahn Exp $	*/
d42 1
a42 2
enable_fpu(p)
	struct proc *p;
d95 1
a95 2
save_fpu(p)
	struct proc *p;
@


1.6
log
@If the fpu or vector registers are not currently associated with any
process, the fpuproc or vecproc are set to NULL, prevent these
functions from potentially attempting to access thru a NULL pointer.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.5 2003/07/02 21:30:12 drahn Exp $	*/
d99 1
a99 1
	int msr, scratch;
@


1.5
log
@Reduce the amount of asm code in powerpc/macppc by replacing it with
inlined functions, helps improve readability and fix a couple of bugs.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.4 2002/09/15 09:01:59 deraadt Exp $	*/
d99 7
a105 2
	int msr;
	struct pcb *pcb = &p->p_addr->u_pcb;
@


1.4
log
@backout premature
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.2 1996/12/28 06:21:56 rahnds Exp $	*/
d45 1
a45 1
	int msr, scratch;
d54 4
a57 2
	asm volatile ("mfmsr %0; ori %1,%0,%2; mtmsr %1; isync"
		      : "=r"(msr), "=r"(scratch) : "K"(PSL_FP));
d91 2
a92 1
	asm volatile ("mtmsr %0; isync" :: "r"(msr));
d99 1
a99 1
	int msr, scratch;
d102 4
a105 2
	asm volatile ("mfmsr %0; ori %1,%0,%2; mtmsr %1; isync"
		      : "=r"(msr), "=r"(scratch) : "K"(PSL_FP));
d139 2
a140 1
	asm volatile ("mtmsr %0; isync" :: "r"(msr));
@


1.3
log
@KNF
@
text
@d48 1
a48 1

d55 1
a55 1
	    : "=r"(msr), "=r"(scratch) : "K"(PSL_FP));
d58 31
a88 31
	    "lfd 1,8(%0);"
	    "lfd 2,16(%0);"
	    "lfd 3,24(%0);"
	    "lfd 4,32(%0);"
	    "lfd 5,40(%0);"
	    "lfd 6,48(%0);"
	    "lfd 7,56(%0);"
	    "lfd 8,64(%0);"
	    "lfd 9,72(%0);"
	    "lfd 10,80(%0);"
	    "lfd 11,88(%0);"
	    "lfd 12,96(%0);"
	    "lfd 13,104(%0);"
	    "lfd 14,112(%0);"
	    "lfd 15,120(%0);"
	    "lfd 16,128(%0);"
	    "lfd 17,136(%0);"
	    "lfd 18,144(%0);"
	    "lfd 19,152(%0);"
	    "lfd 20,160(%0);"
	    "lfd 21,168(%0);"
	    "lfd 22,176(%0);"
	    "lfd 23,184(%0);"
	    "lfd 24,192(%0);"
	    "lfd 25,200(%0);"
	    "lfd 26,208(%0);"
	    "lfd 27,216(%0);"
	    "lfd 28,224(%0);"
	    "lfd 29,232(%0);"
	    "lfd 30,240(%0);"
	    "lfd 31,248(%0)" :: "b"(&pcb->pcb_fpu.fpr[0]));
d98 1
a98 1

d100 1
a100 1
	    : "=r"(msr), "=r"(scratch) : "K"(PSL_FP));
d102 31
a132 31
	    "stfd 1,8(%0);"
	    "stfd 2,16(%0);"
	    "stfd 3,24(%0);"
	    "stfd 4,32(%0);"
	    "stfd 5,40(%0);"
	    "stfd 6,48(%0);"
	    "stfd 7,56(%0);"
	    "stfd 8,64(%0);"
	    "stfd 9,72(%0);"
	    "stfd 10,80(%0);"
	    "stfd 11,88(%0);"
	    "stfd 12,96(%0);"
	    "stfd 13,104(%0);"
	    "stfd 14,112(%0);"
	    "stfd 15,120(%0);"
	    "stfd 16,128(%0);"
	    "stfd 17,136(%0);"
	    "stfd 18,144(%0);"
	    "stfd 19,152(%0);"
	    "stfd 20,160(%0);"
	    "stfd 21,168(%0);"
	    "stfd 22,176(%0);"
	    "stfd 23,184(%0);"
	    "stfd 24,192(%0);"
	    "stfd 25,200(%0);"
	    "stfd 26,208(%0);"
	    "stfd 27,216(%0);"
	    "stfd 28,224(%0);"
	    "stfd 29,232(%0);"
	    "stfd 30,240(%0);"
	    "stfd 31,248(%0)" :: "b"(&pcb->pcb_fpu.fpr[0]));
@


1.2
log
@Adding OpenBSD tags to files.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d48 1
a48 1
	
d55 1
a55 1
		      : "=r"(msr), "=r"(scratch) : "K"(PSL_FP));
d58 31
a88 31
	     "lfd 1,8(%0);"
	     "lfd 2,16(%0);"
	     "lfd 3,24(%0);"
	     "lfd 4,32(%0);"
	     "lfd 5,40(%0);"
	     "lfd 6,48(%0);"
	     "lfd 7,56(%0);"
	     "lfd 8,64(%0);"
	     "lfd 9,72(%0);"
	     "lfd 10,80(%0);"
	     "lfd 11,88(%0);"
	     "lfd 12,96(%0);"
	     "lfd 13,104(%0);"
	     "lfd 14,112(%0);"
	     "lfd 15,120(%0);"
	     "lfd 16,128(%0);"
	     "lfd 17,136(%0);"
	     "lfd 18,144(%0);"
	     "lfd 19,152(%0);"
	     "lfd 20,160(%0);"
	     "lfd 21,168(%0);"
	     "lfd 22,176(%0);"
	     "lfd 23,184(%0);"
	     "lfd 24,192(%0);"
	     "lfd 25,200(%0);"
	     "lfd 26,208(%0);"
	     "lfd 27,216(%0);"
	     "lfd 28,224(%0);"
	     "lfd 29,232(%0);"
	     "lfd 30,240(%0);"
	     "lfd 31,248(%0)" :: "b"(&pcb->pcb_fpu.fpr[0]));
d98 1
a98 1
	
d100 1
a100 1
		      : "=r"(msr), "=r"(scratch) : "K"(PSL_FP));
d102 31
a132 31
	     "stfd 1,8(%0);"
	     "stfd 2,16(%0);"
	     "stfd 3,24(%0);"
	     "stfd 4,32(%0);"
	     "stfd 5,40(%0);"
	     "stfd 6,48(%0);"
	     "stfd 7,56(%0);"
	     "stfd 8,64(%0);"
	     "stfd 9,72(%0);"
	     "stfd 10,80(%0);"
	     "stfd 11,88(%0);"
	     "stfd 12,96(%0);"
	     "stfd 13,104(%0);"
	     "stfd 14,112(%0);"
	     "stfd 15,120(%0);"
	     "stfd 16,128(%0);"
	     "stfd 17,136(%0);"
	     "stfd 18,144(%0);"
	     "stfd 19,152(%0);"
	     "stfd 20,160(%0);"
	     "stfd 21,168(%0);"
	     "stfd 22,176(%0);"
	     "stfd 23,184(%0);"
	     "stfd 24,192(%0);"
	     "stfd 25,200(%0);"
	     "stfd 26,208(%0);"
	     "stfd 27,216(%0);"
	     "stfd 28,224(%0);"
	     "stfd 29,232(%0);"
	     "stfd 30,240(%0);"
	     "stfd 31,248(%0)" :: "b"(&pcb->pcb_fpu.fpr[0]));
@


1.2.24.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.2 1996/12/28 06:21:56 rahnds Exp $	*/
@


1.2.14.1
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu.c,v 1.2 1996/12/28 06:21:56 rahnds Exp $	*/
@


1.2.14.2
log
@Re-add missing pieces
@
text
@@


1.2.14.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a43 1
enable_fpu(struct proc *p)
d45 1
a45 1
	int msr;
d54 2
a55 4
	msr = ppc_mfmsr();
	ppc_mtmsr(msr | PSL_FP);
	__asm volatile("isync");

d89 1
a89 2
	ppc_mtmsr(msr);
	__asm volatile("isync");
d93 2
a94 1
save_fpu(struct proc *p)
d96 2
a97 7
	int msr;
	struct pcb *pcb;

	if (p == NULL)
		return;

	pcb = &p->p_addr->u_pcb;
d99 2
a100 4
	msr = ppc_mfmsr();
	ppc_mtmsr(msr | PSL_FP);
	__asm volatile("isync");

d134 1
a134 2
	ppc_mtmsr(msr);
	__asm volatile("isync");
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF. 
@
text
@@
