head	1.15;
access;
symbols
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	UBC_SYNC_A:1.15
	UBC_SYNC_B:1.15
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.15
date	2001.09.01.15.50.00;	author drahn;	state dead;
branches;
next	1.14;

1.14
date	2001.07.09.03.30.20;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.29.06.55.36;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.27.04.37.18;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.26.18.19.43;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.25.23.29.56;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.25.00.43.15;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.02.06.02.46;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.08.05.00.26;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.31.03.47.35;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.28.13.09.01;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.15.03.11.01;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.31.05.14.37;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.20.07.26.50;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	99.11.08.23.46.01;	author rahnds;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.03.24.09.08.41;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.14.21.36.49;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.07.04.10.22.38;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	;


desc
@@


1.15
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@/*	$OpenBSD: macintr.c,v 1.14 2001/07/09 03:30:20 mickey Exp $	*/

/*-
 * Copyright (c) 1995 Per Fogelstrom
 * Copyright (c) 1993, 1994 Charles M. Hannum.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz and Don Ahn.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)isa.c	7.2 (Berkeley) 5/12/91
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <vm/vm.h>
#include <vm/vm_kern.h>
#include <uvm/uvm.h>

#include <machine/autoconf.h>
#include <machine/intr.h>
#include <machine/psl.h>
#include <machine/pio.h>
#include <machine/powerpc.h>

#include <dev/ofw/openfirm.h>

#define ICU_LEN 64
#define LEGAL_IRQ(x) ((x >= 0) && (x < ICU_LEN))

static int intrtype[ICU_LEN], intrmask[ICU_LEN], intrlevel[ICU_LEN];
static struct intrhand *intrhand[ICU_LEN];
static int hwirq[ICU_LEN], virq[64];
unsigned int imen = 0xffffffff;
int virq_max = 0;

struct evcnt evirq[ICU_LEN*2];

static int fakeintr __P((void *));
static char *intr_typename __P((int type));
static void intr_calculatemasks __P((void));
static void enable_irq __P((int x));
static __inline int cntlzw __P((int x));
static int mapirq __P((int irq));
static int read_irq __P((void));
static void mac_intr_do_pending_int __P((void));

extern u_int32_t *heathrow_FCR;

#define HWIRQ_MAX 27
#define HWIRQ_MASK 0x0fffffff

#define INT_STATE_REG0  (interrupt_reg + 0x20)
#define INT_ENABLE_REG0 (interrupt_reg + 0x24)
#define INT_CLEAR_REG0  (interrupt_reg + 0x28)
#define INT_LEVEL_REG0  (interrupt_reg + 0x2c)
#define INT_STATE_REG1  (INT_STATE_REG0  - 0x10)
#define INT_ENABLE_REG1 (INT_ENABLE_REG0 - 0x10)
#define INT_CLEAR_REG1  (INT_CLEAR_REG0  - 0x10)
#define INT_LEVEL_REG1  (INT_LEVEL_REG0  - 0x10)

struct macintr_softc {
	struct device sc_dev;
};

int	macintr_match __P((struct device *parent, void *cf, void *aux));
void	macintr_attach __P((struct device *, struct device *, void *));
void	mac_do_pending_int __P((void));
void	mac_ext_intr __P((void));

struct cfattach macintr_ca = { 
	sizeof(struct macintr_softc),
	macintr_match,
	macintr_attach
};

struct cfdriver macintr_cd = {
	NULL, "macintr", DV_DULL
};

int
macintr_match(parent, cf, aux) 
	struct device *parent;
	void *cf;
	void *aux;
{
	struct confargs *ca = aux;
	char type[40];

	/*
	 * Match entry according to "present" openfirmware entry.
	 */
	if (strcmp(ca->ca_name, "interrupt-controller") == 0 ) {
		OF_getprop(ca->ca_node, "device_type", type, sizeof(type));
		if (strcmp(type,  "interrupt-controller") == 0) {
			return 1;
		}
	}

	/*
	 * Check name for legacy interrupt controller, this is
	 * faked to allow old firmware which does not have an entry
	 * to attach to this device.
	 */
	if (strcmp(ca->ca_name, "legacy-interrupt-controller") == 0 ) {
		return 1;
	}
	return 0;
}

u_int8_t *interrupt_reg;
typedef void  (void_f) (void);
extern void_f *pending_int_f;
int prog_switch (void *arg);

intr_establish_t macintr_establish;
intr_disestablish_t macintr_disestablish;
extern intr_establish_t *mac_intr_establish_func;
extern intr_disestablish_t *mac_intr_disestablish_func;
void macintr_collect_preconf_intr __P((void));

void
macintr_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	extern intr_establish_t *intr_establish_func;
	extern intr_disestablish_t *intr_disestablish_func;

	interrupt_reg = (void *)ca->ca_baseaddr; /* XXX */

	install_extint(mac_ext_intr);
	pending_int_f = mac_intr_do_pending_int;
	intr_establish_func  = macintr_establish;
	intr_disestablish_func  = macintr_disestablish;
	mac_intr_establish_func  = macintr_establish;
	mac_intr_disestablish_func  = macintr_disestablish;

	macintr_collect_preconf_intr();

	mac_intr_establish(parent, 0x14, IST_LEVEL, IPL_HIGH,
		prog_switch, (void *)0x14, "prog button");

	ppc_intr_enable(1);

	printf("\n");
}
void
macintr_collect_preconf_intr()
{
	int i;
	for (i = 0; i < ppc_configed_intr_cnt; i++) {
		printf("\n\t%s irq %d level %d fun %x arg %x",
			ppc_configed_intr[i].ih_what,
			ppc_configed_intr[i].ih_irq,
			ppc_configed_intr[i].ih_level,
			ppc_configed_intr[i].ih_fun,
			ppc_configed_intr[i].ih_arg
			);
		macintr_establish(NULL,
			ppc_configed_intr[i].ih_irq,
			IST_LEVEL,
			ppc_configed_intr[i].ih_level,
			ppc_configed_intr[i].ih_fun,
			ppc_configed_intr[i].ih_arg,
			ppc_configed_intr[i].ih_what);
	}
}


int
prog_switch (void *arg)
{
#ifdef DDB
        Debugger();
#else
	printf("programmer button pressed, debugger not available\n");
#endif
	return 1;
}

static int
fakeintr(arg)
	void *arg;
{

	return 0;
}

void nameinterrupt( int replace, char *newstr);

/*
 * Register an interrupt handler.
 */
void *
macintr_establish(lcv, irq, type, level, ih_fun, ih_arg, name)
	void * lcv;
	int irq;
	int type;
	int level;
	int (*ih_fun) __P((void *));
	void *ih_arg;
	char *name;
{
	struct intrhand **p, *q, *ih;
	static struct intrhand fakehand;

	fakehand.ih_next = NULL;
	fakehand.ih_fun  = fakeintr;

#if 0
printf("macintr_establish, hI %d L %d ", irq, type);
printf("addr reg0 %x\n", INT_STATE_REG0);
#endif
	nameinterrupt(irq, name);
	irq = mapirq(irq);
#if 0
printf("vI %d ", irq);
#endif

	/* no point in sleeping unless someone can free memory. */
	ih = malloc(sizeof *ih, M_DEVBUF, cold ? M_NOWAIT : M_WAITOK);
	if (ih == NULL)
		panic("intr_establish: can't malloc handler info");

	if (!LEGAL_IRQ(irq) || type == IST_NONE)
		panic("intr_establish: bogus irq or type");

	switch (intrtype[irq]) {
	case IST_NONE:
		intrtype[irq] = type;
		break;
	case IST_EDGE:
	case IST_LEVEL:
		if (type == intrtype[irq])
			break;
	case IST_PULSE:
		if (type != IST_NONE)
			panic("intr_establish: can't share %s with %s",
			    intr_typename(intrtype[irq]),
			    intr_typename(type));
		break;
	}

	/*
	 * Figure out where to put the handler.
	 * This is O(N^2), but we want to preserve the order, and N is
	 * generally small.
	 */
	for (p = &intrhand[irq]; (q = *p) != NULL; p = &q->ih_next)
		;

	/*
	 * Actually install a fake handler momentarily, since we might be doing
	 * this with interrupts enabled and DON'T WANt the real routine called
	 * until masking is set up.
	 */
	fakehand.ih_level = level;
	*p = &fakehand;

	intr_calculatemasks();

	/*
	 * Poke the real handler in now.
	 */
	ih->ih_fun = ih_fun;
	ih->ih_arg = ih_arg;
	ih->ih_count = 0;
	ih->ih_next = NULL;
	ih->ih_level = level;
	ih->ih_irq = irq;
	*p = ih;

	return (ih);
}

/*
 * Deregister an interrupt handler.
 */
void
macintr_disestablish(lcp, arg)
	void *lcp;
	void *arg;
{
	struct intrhand *ih = arg;
	int irq = ih->ih_irq;
	struct intrhand **p, *q;

	if (!LEGAL_IRQ(irq))
		panic("intr_disestablish: bogus irq");

	/*
	 * Remove the handler from the chain.
	 * This is O(n^2), too.
	 */
	for (p = &intrhand[irq]; (q = *p) != NULL && q != ih; p = &q->ih_next)
		;
	if (q)
		*p = q->ih_next;
	else
		panic("intr_disestablish: handler not registered");
	free((void *)ih, M_DEVBUF);

	intr_calculatemasks();

	if (intrhand[irq] == NULL)
		intrtype[irq] = IST_NONE;
}


static char *
intr_typename(type)
	int type;
{

	switch (type) {
        case IST_NONE :
		return ("none");
        case IST_PULSE:
		return ("pulsed");
        case IST_EDGE:
		return ("edge-triggered");
        case IST_LEVEL:
		return ("level-triggered");
	default:
		panic("intr_typename: invalid type %d", type);
#if 1 /* XXX */
		return ("unknown");
#endif
	}
}
/*
 * Recalculate the interrupt masks from scratch.
 * We could code special registry and deregistry versions of this function that
 * would be faster, but the code would be nastier, and we don't expect this to
 * happen very much anyway.
 */
static void
intr_calculatemasks()
{
	int irq, level;
	struct intrhand *q;

	/* First, figure out which levels each IRQ uses. */
	for (irq = 0; irq < ICU_LEN; irq++) {
		register int levels = 0;
		for (q = intrhand[irq]; q; q = q->ih_next)
			levels |= 1 << q->ih_level;
		intrlevel[irq] = levels;
	}

	/* Then figure out which IRQs use each level. */
	for (level = 0; level < 5; level++) {
		register int irqs = 0;
		for (irq = 0; irq < ICU_LEN; irq++)
			if (intrlevel[irq] & (1 << level))
				irqs |= 1 << irq;
		imask[level] = irqs | SINT_MASK;
	}

	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so imp > (tty | net | bio).
	 */
	imask[IPL_IMP] |= imask[IPL_TTY] | imask[IPL_NET] | imask[IPL_BIO];

	/*
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
	imask[IPL_TTY] |= imask[IPL_NET] | imask[IPL_BIO];
	imask[IPL_NET] |= imask[IPL_BIO];

	/*
	 * These are pseudo-levels.
	 */
	imask[IPL_NONE] = 0x00000000;
	imask[IPL_HIGH] = 0xffffffff;

	/* And eventually calculate the complete masks. */
	for (irq = 0; irq < ICU_LEN; irq++) {
		register int irqs = 1 << irq;
		for (q = intrhand[irq]; q; q = q->ih_next)
			irqs |= imask[q->ih_level];
		intrmask[irq] = irqs | SINT_MASK;
	}

	/* Lastly, determine which IRQs are actually in use. */
	{
		register int irqs = 0;
		for (irq = 0; irq < ICU_LEN; irq++) {
			if (intrhand[irq])
				irqs |= 1 << irq;
		}
		imen = ~irqs;
		enable_irq(~imen);
	}
}
static void
enable_irq(x)
	int x;
{
	int state0, state1, v;
	int irq;

	x &= HWIRQ_MASK;	/* XXX Higher bits are software interrupts. */

	state0 = state1 = 0;
	while (x) {
		v = 31 - cntlzw(x);
		irq = hwirq[v];
		if (irq < 32) {
			state0 |= 1 << irq;
		} else {
			state1 |= 1 << (irq - 32);
		}
		x &= ~(1 << v);
	}

	if (heathrow_FCR) {
		out32rb(INT_ENABLE_REG1, state1);
	}
	out32rb(INT_ENABLE_REG0, state0);
}
/*
 * Map 64 irqs into 32 (bits).
 */
static int
mapirq(irq)
	int irq;
{
	int v;

	if (irq < 0 || irq >= 64)
		panic("invalid irq");
	virq_max++;
	v = virq_max;
	if (v > HWIRQ_MAX)
		panic("virq overflow");

	hwirq[v] = irq;
	virq[irq] = v;
#if 0
printf("\nmapirq %x to %x\n", irq, v);
#endif

	return v;
}

/*
 * Count leading zeros.
 */
static __inline int
cntlzw(x)
	int x;
{
	int a;

	__asm __volatile ("cntlzw %0,%1" : "=r"(a) : "r"(x));

	return a;
}

/*
 * external interrupt handler
 */
void
mac_ext_intr()
{
	int irq = 0;
	int o_imen, r_imen;
	int pcpl;
	struct intrhand *ih;
	volatile unsigned long int_state;

	pcpl = splhigh();	/* Turn off all */

#if 0
printf("mac_intr \n");
#endif
	int_state = read_irq();
	if (int_state == 0)
		goto out;

start:
	irq = 31 - cntlzw(int_state);
	intrcnt[hwirq[irq]]++;

	o_imen = imen;
	r_imen = 1 << irq;

	if ((pcpl & r_imen) != 0) {
		ipending |= r_imen;	/* Masked! Mark this as pending */
		imen |= r_imen;
		enable_irq(~imen);
	} else {
		ih = intrhand[irq];
		while (ih) {
#if 0
printf("calling handler %x\n", ih->ih_fun);
#endif
			(*ih->ih_fun)(ih->ih_arg);
			ih = ih->ih_next;
		}

		uvmexp.intrs++;
		evirq[hwirq[irq]].ev_count++;
	}
	int_state &= ~r_imen;
	if (int_state)
		goto start;

out:
	splx(pcpl);	/* Process pendings. */
}

void
mac_intr_do_pending_int()
{
	struct intrhand *ih;
	int irq;
	int pcpl;
	int hwpend;
	int emsr, dmsr;
	static int processing;

	if (processing)
		return;

	processing = 1;
	pcpl = splhigh();		/* Turn off all */
	asm volatile("mfmsr %0" : "=r"(emsr));
	dmsr = emsr & ~PSL_EE;
	asm volatile("mtmsr %0" :: "r"(dmsr));

	hwpend = ipending & ~pcpl;	/* Do now unmasked pendings */
	imen &= ~hwpend;
	enable_irq(~imen);
	hwpend &= HWIRQ_MASK;
	while (hwpend) {
		irq = 31 - cntlzw(hwpend);
		hwpend &= ~(1L << irq);
		ih = intrhand[irq];
		while(ih) {
			(*ih->ih_fun)(ih->ih_arg);
			ih = ih->ih_next;
		}

		evirq[hwirq[irq]].ev_count++;
	}

	/*out32rb(INT_ENABLE_REG, ~imen);*/

	do {
		if((ipending & SINT_CLOCK) & ~pcpl) {
			ipending &= ~SINT_CLOCK;
			softclock();
		}
		if((ipending & SINT_NET) & ~pcpl) {
			extern int netisr;
			int pisr = netisr;
			netisr = 0;
			ipending &= ~SINT_NET;
			softnet(pisr);
		}
	} while (ipending & (SINT_NET|SINT_CLOCK) & ~cpl);
	ipending &= pcpl;
	cpl = pcpl;	/* Don't use splx... we are here already! */
	asm volatile("mtmsr %0" :: "r"(emsr));
	processing = 0;
}

static int
read_irq()
{
	int rv = 0;
	int state0, state1, p;
	int state0save, state1save;

	state0 = in32rb(INT_STATE_REG0);
	if (state0)
		out32rb(INT_CLEAR_REG0, state0);
		state0save = state0;
	while (state0) {
		p = 31 - cntlzw(state0);
		rv |= 1 << virq[p];
		state0 &= ~(1 << p);
	}

	if (heathrow_FCR)			/* has heathrow? */
		state1 = in32rb(INT_STATE_REG1);
	else
		state1 = 0;

	if (state1)
		out32rb(INT_CLEAR_REG1, state1);
	state1save = state1;
	while (state1) {
		p = 31 - cntlzw(state1);
		rv |= 1 << virq[p + 32];
		state1 &= ~(1 << p);
	}
#if 0
printf("mac_intr int_stat 0:%x 1:%x\n", state0save, state1save);
#endif

	/* 1 << 0 is invalid. */
	return rv & ~1;
}
@


1.14
log
@a wagon and a small cart of protos, spaces, and includes
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.13 2001/06/29 06:55:36 drahn Exp $	*/
@


1.13
log
@Include/header cleanup. More.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.12 2001/06/27 04:37:18 art Exp $	*/
d73 7
a79 7
static char *intr_typename(int type);
static void intr_calculatemasks();
static void enable_irq(int x);
static __inline int cntlzw(int x);
static int mapirq(int irq);
static int read_irq();
static void mac_intr_do_pending_int();
d101 2
a102 2
void	mac_do_pending_int();
void	mac_ext_intr();
d153 1
a153 1
void macintr_collect_preconf_intr();
@


1.12
log
@kill old vm
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.11 2001/06/26 18:19:43 drahn Exp $	*/
d57 3
@


1.11
log
@Cleanup of interrupt configuration, move prototypes to header file,
not in each file.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.10 2001/06/25 23:29:56 drahn Exp $	*/
a48 1
#ifdef UVM
a51 1
#endif
a536 1
#ifdef UVM
a537 2
#else
#endif
@


1.10
log
@closer to building with -Wno-uninitialized
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.9 2001/06/25 00:43:15 mickey Exp $	*/
a146 5
typedef int mac_intr_handle_t;

typedef void     *(intr_establish_t) __P((void *, mac_intr_handle_t,
            int, int, int (*func)(void *), void *, char *));
typedef void     (intr_disestablish_t) __P((void *, void *));
@


1.9
log
@cold is in systm now
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.8 2001/05/02 06:02:46 drahn Exp $	*/
a164 1
	struct macintr_softc *sc = (void *)self;
d508 1
a508 1
	int i, irq = 0;
@


1.8
log
@Move powerpc interrupt enablement into the interrupt controller, not after
config runs. openpic already had this change.
Cleans up config operations for other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.7 2001/04/08 05:00:26 drahn Exp $	*/
a245 1
	extern int cold;
@


1.7
log
@Attempt at tracking interrupt source better than "irqN", with this
change, when the interrupt is established, the string will be changed
from irqN to irqN/dvrname. Some drivers establish nice names, "usb0"
some do not, "wdc_obio".
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.6 2000/07/31 03:47:35 rahnds Exp $	*/
d182 2
@


1.6
log
@Correction for legacy interrupt controller attachment.
The previous change would incorrectly allow the macintr interrupt
controller to configure for the openpic interrupt controller.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.6 2000/07/31 04:45:15 drahn Exp $	*/
d227 2
d253 1
a253 1

@


1.5
log
@First cut at supporting older bandit based machines
Adds mesh scsi, changes to interrupt controller to allow
preconfiguration of interrupts.
Mesh work by Andy.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.4 2000/06/15 03:11:01 rahnds Exp $	*/
d120 1
d123 1
a123 2
	 * Only check name, to allow legacy interrupt controllers
	 * to slip in here.
d126 12
@


1.4
log
@UVM compatibility changes, UVM still not working, but can build.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.3 2000/03/31 05:14:37 rahnds Exp $	*/
a118 1
	char type[40];
d121 4
a124 2
	bzero (type, sizeof(type));

d126 1
a126 4
		OF_getprop(ca->ca_node, "device_type", type, sizeof(type));
		if (strcmp(type,  "interrupt-controller") == 0) {
			return 1;
		}
d145 1
d166 1
d173 22
@


1.3
log
@Add interrupt counter.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.2 2000/03/20 07:26:50 rahnds Exp $	*/
d49 5
@


1.2
log
@Interrupt code changed from called routines, to initialized driver.
Added openpic support with this new driver scheme.

added support for keylargo-ata, G4 ide configures properly.
interrupt configuration changed to be more full featured, like isa had been.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.1 1999/11/08 23:46:01 rahnds Exp $	*/
d484 1
@


1.1
log
@Initial import of NetBSD macppc code to allow OpenBSD/powerpc to run
on the imac computer, Additional hardware and driver support will follow.
Initially wdc_obio support the imac (333Mhz) atapi cdrom and the ATA harddrive.
also Bmac ethernet is supported at least at 10Mb.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
d44 4
a47 2
#include <sys/proc.h>
#include <sys/user.h>
a48 7
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <vm/vm.h>
#include <vm/vm_kern.h>
d50 1
d71 3
d89 38
a126 2
int      macintrmatch __P((struct device *, void *, void *));
void     macintrattach __P((struct device *, struct device *, void *));
d129 50
d192 2
a193 1
mac_intr_establish(irq, type, level, ih_fun, ih_arg)
d199 1
d204 1
d209 1
a209 1
printf("mac_intr_establish, hI %d L %d ", irq, type);
d252 1
a252 1
	 * this with interrupts enabled and don't want the real routine called
d278 2
a279 1
mac_intr_disestablish(arg)
d425 1
a425 1
int
d517 1
a517 1
mac_do_pending_int()
d572 1
a572 1
int
@


1.1.2.1
log
@Sync with -current
@
text
@a41 1

d43 5
d49 4
a52 4
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/systm.h>
a53 1
#include <machine/autoconf.h>
a73 3
static int mapirq(int irq);
static int read_irq();
static void mac_intr_do_pending_int();
d89 2
a90 38
struct macintr_softc {
	struct device sc_dev;
};

int	macintr_match __P((struct device *parent, void *cf, void *aux));
void	macintr_attach __P((struct device *, struct device *, void *));
void	mac_do_pending_int();
void	mac_ext_intr();

struct cfattach macintr_ca = { 
	sizeof(struct macintr_softc),
	macintr_match,
	macintr_attach
};

struct cfdriver macintr_cd = {
	NULL, "macintr", DV_DULL
};

int
macintr_match(parent, cf, aux) 
	struct device *parent;
	void *cf;
	void *aux;
{
	char type[40];
	struct confargs *ca = aux;

	bzero (type, sizeof(type));

	if (strcmp(ca->ca_name, "interrupt-controller") == 0 ) {
		OF_getprop(ca->ca_node, "device_type", type, sizeof(type));
		if (strcmp(type,  "interrupt-controller") == 0) {
			return 1;
		}
	}
	return 0;
}
a92 50
typedef void  (void_f) (void);
extern void_f *pending_int_f;
int prog_switch (void *arg);
typedef int mac_intr_handle_t;

typedef void     *(intr_establish_t) __P((void *, mac_intr_handle_t,
            int, int, int (*func)(void *), void *, char *));
typedef void     (intr_disestablish_t) __P((void *, void *));

intr_establish_t macintr_establish;
intr_disestablish_t macintr_disestablish;
extern intr_establish_t *mac_intr_establish_func;
extern intr_disestablish_t *mac_intr_disestablish_func;

void
macintr_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	struct macintr_softc *sc = (void *)self;
	extern intr_establish_t *intr_establish_func;
	extern intr_disestablish_t *intr_disestablish_func;

	interrupt_reg = (void *)ca->ca_baseaddr; /* XXX */

	install_extint(mac_ext_intr);
	pending_int_f = mac_intr_do_pending_int;
	intr_establish_func  = macintr_establish;
	intr_disestablish_func  = macintr_disestablish;
	mac_intr_establish_func  = macintr_establish;
	mac_intr_disestablish_func  = macintr_disestablish;


	mac_intr_establish(parent, 0x14, IST_LEVEL, IPL_HIGH,
		prog_switch, (void *)0x14, "prog button");

	printf("\n");
}

int
prog_switch (void *arg)
{
#ifdef DDB
        Debugger();
#else
	printf("programmer button pressed, debugger not available\n");
#endif
	return 1;
}
d106 1
a106 2
macintr_establish(lcv, irq, type, level, ih_fun, ih_arg, name)
	void * lcv;
a111 1
	char *name;
a115 1

d120 1
a120 1
printf("macintr_establish, hI %d L %d ", irq, type);
d163 1
a163 1
	 * this with interrupts enabled and DON'T WANt the real routine called
d189 1
a189 2
macintr_disestablish(lcp, arg)
	void *lcp;
d335 1
a335 1
static int
d427 1
a427 1
mac_intr_do_pending_int()
d482 1
a482 1
static int
@


1.1.2.2
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.7 2001/04/08 05:00:26 drahn Exp $	*/
a48 5
#ifdef UVM
#include <vm/vm.h>
#include <vm/vm_kern.h>
#include <uvm/uvm.h>
#endif
d114 1
a115 1
	char type[40];
d117 2
a118 3
	/*
	 * Match entry according to "present" openfirmware entry.
	 */
a124 9

	/*
	 * Check name for legacy interrupt controller, this is
	 * faked to allow old firmware which does not have an entry
	 * to attach to this device.
	 */
	if (strcmp(ca->ca_name, "legacy-interrupt-controller") == 0 ) {
		return 1;
	}
a141 1
void macintr_collect_preconf_intr();
a161 1
	macintr_collect_preconf_intr();
a167 22
void
macintr_collect_preconf_intr()
{
	int i;
	for (i = 0; i < ppc_configed_intr_cnt; i++) {
		printf("\n\t%s irq %d level %d fun %x arg %x",
			ppc_configed_intr[i].ih_what,
			ppc_configed_intr[i].ih_irq,
			ppc_configed_intr[i].ih_level,
			ppc_configed_intr[i].ih_fun,
			ppc_configed_intr[i].ih_arg
			);
		macintr_establish(NULL,
			ppc_configed_intr[i].ih_irq,
			IST_LEVEL,
			ppc_configed_intr[i].ih_level,
			ppc_configed_intr[i].ih_fun,
			ppc_configed_intr[i].ih_arg,
			ppc_configed_intr[i].ih_what);
	}
}

a187 2
void nameinterrupt( int replace, char *newstr);

d212 1
a212 1
	nameinterrupt(irq, name);
a483 1
	intrcnt[hwirq[irq]]++;
@


1.1.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.1.2.2 2001/05/14 21:36:49 niklas Exp $	*/
d49 1
d53 1
a58 3
#include <machine/powerpc.h>

#include <dev/ofw/openfirm.h>
d147 5
d165 1
a182 2
	ppc_intr_enable(1);

d244 1
d508 1
a508 1
	int irq = 0;
d544 1
d546 2
@


1.1.2.4
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.1.2.3 2001/07/04 10:22:38 niklas Exp $	*/
@


