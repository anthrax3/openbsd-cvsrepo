head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	UBC_SYNC_A:1.11
	UBC_SYNC_B:1.11
	SMP:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2;
locks; strict;
comment	@ * @;


1.11
date	2001.09.01.15.50.00;	author drahn;	state dead;
branches;
next	1.10;

1.10
date	2001.07.25.08.21.08;	author maja;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.17.23.34.14;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.09.03.30.19;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.04.08.38.50;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.01.04.31.23;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.29.16.22.11;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.29.06.55.36;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.29.19.06.20;	author drahn;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.03.03.08.53.46;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.28.19.49.45;	author drahn;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.21.36.46;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.07.04.10.22.32;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	;


desc
@@


1.11
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@/*	$OpenBSD: akbd.c,v 1.10 2001/07/25 08:21:08 maja Exp $	*/
/*	$NetBSD: akbd.c,v 1.13 2001/01/25 14:08:55 tsubai Exp $	*/

/*
 * Copyright (C) 1998	Colin Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Colin Wood.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/fcntl.h>
#include <sys/poll.h>
#include <sys/select.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/systm.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wskbdvar.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>

#include <machine/autoconf.h>
#define KEYBOARD_ARRAY

#include <powerpc/mac/keyboard.h>
#include <powerpc/mac/adbvar.h>
#include <powerpc/mac/aedvar.h>
#include <powerpc/mac/akbdmap.h>
#include <powerpc/mac/akbdvar.h>
#include <powerpc/mac/amsvar.h>
#include <powerpc/mac/adb_direct.h>
#include <powerpc/mac/pm_direct.h>

#include "aed.h"

/*
 * Function declarations.
 */
static int	akbdmatch __P((struct device *, void *, void *));
static void	akbdattach __P((struct device *, struct device *, void *));
void		kbd_adbcomplete __P((caddr_t buffer, caddr_t data_area, int adb_command));
static void	kbd_processevent __P((adb_event_t *event, struct akbd_softc *));
#ifdef notyet
static u_char	getleds __P((int));
static int	setleds __P((struct akbd_softc *, u_char));
static void	blinkleds __P((struct akbd_softc *));
#endif

/* Driver definition. */
struct cfattach akbd_ca = {
	sizeof(struct akbd_softc), akbdmatch, akbdattach
};
struct cfdriver akbd_cd = {
	NULL, "akbd", DV_DULL
};


extern struct cfdriver akbd_cd;

int akbd_enable __P((void *, int));
void akbd_set_leds __P((void *, int));
int akbd_ioctl __P((void *, u_long, caddr_t, int, struct proc *));
int akbd_intr __P((adb_event_t *event));

struct wskbd_accessops akbd_accessops = {
	akbd_enable,
	akbd_set_leds,
	akbd_ioctl,
};

void akbd_cngetc __P((void *, u_int *, int *));
void akbd_cnpollc __P((void *, int));

struct wskbd_consops akbd_consops = {
	akbd_cngetc,
	akbd_cnpollc,
};

struct wskbd_mapdata akbd_keymapdata = {
	akbd_keydesctab,
#ifdef AKBD_LAYOUT
	AKBD_LAYOUT,
#else
	KB_US,
#endif
};

static int akbd_is_console;

static int
akbdmatch(parent, cf, aux)
	struct device *parent;
	void *cf;
	void   *aux;
{
	struct adb_attach_args *aa_args = aux;

	if (aa_args->origaddr == ADBADDR_KBD)
		return 1;
	else
		return 0;
}

static void
akbdattach(parent, self, aux)
	struct device *parent, *self;
	void   *aux;
{
	ADBSetInfoBlock adbinfo;
	struct akbd_softc *sc = (struct akbd_softc *)self;
	struct adb_attach_args *aa_args = aux;
	int error, kbd_done;
	short cmd;
	u_char buffer[9];
	struct wskbddev_attach_args a;

	sc->origaddr = aa_args->origaddr;
	sc->adbaddr = aa_args->adbaddr;
	sc->handler_id = aa_args->handler_id;

	sc->sc_leds = (u_int8_t)0x00;	/* initially off */

	adbinfo.siServiceRtPtr = (Ptr)kbd_adbcomplete;
	adbinfo.siDataAreaAddr = (caddr_t)sc;

	switch (sc->handler_id) {
	case ADB_STDKBD:
		printf("standard keyboard\n");
		break;
	case ADB_ISOKBD:
		printf("standard keyboard (ISO layout)\n");
		break;
	case ADB_EXTKBD:
		cmd = ADBTALK(sc->adbaddr, 1);
		kbd_done =
		    (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) == 0);

		/* Ignore Logitech MouseMan/Trackman pseudo keyboard */
		if (kbd_done && buffer[1] == 0x9a && buffer[2] == 0x20) {
			printf("Mouseman (non-EMP) pseudo keyboard\n");
			adbinfo.siServiceRtPtr = (Ptr)0;
			adbinfo.siDataAreaAddr = (Ptr)0;
		} else if (kbd_done && buffer[1] == 0x9a && buffer[2] == 0x21) {
			printf("Trackman (non-EMP) pseudo keyboard\n");
			adbinfo.siServiceRtPtr = (Ptr)0;
			adbinfo.siDataAreaAddr = (Ptr)0;
		} else {
			printf("extended keyboard\n");
#ifdef notyet
			blinkleds(sc);
#endif
		}
		break;
	case ADB_EXTISOKBD:
		printf("extended keyboard (ISO layout)\n");
#ifdef notyet
		blinkleds(sc);
#endif
		break;
	case ADB_KBDII:
		printf("keyboard II\n");
		break;
	case ADB_ISOKBDII:
		printf("keyboard II (ISO layout)\n");
		break;
	case ADB_PBKBD:
		printf("PowerBook keyboard\n");
		break;
	case ADB_PBISOKBD:
		printf("PowerBook keyboard (ISO layout)\n");
		break;
	case ADB_ADJKPD:
		printf("adjustable keypad\n");
		break;
	case ADB_ADJKBD:
		printf("adjustable keyboard\n");
		break;
	case ADB_ADJISOKBD:
		printf("adjustable keyboard (ISO layout)\n");
		break;
	case ADB_ADJJAPKBD:
		printf("adjustable keyboard (Japanese layout)\n");
		break;
	case ADB_PBEXTISOKBD:
		printf("PowerBook extended keyboard (ISO layout)\n");
		break;
	case ADB_PBEXTJAPKBD:
		printf("PowerBook extended keyboard (Japanese layout)\n");
		break;
	case ADB_JPKBDII:
		printf("keyboard II (Japanese layout)\n");
		break;
	case ADB_PBEXTKBD:
		printf("PowerBook extended keyboard\n");
		break;
	case ADB_DESIGNKBD:
		printf("extended keyboard\n");
#ifdef notyet
		blinkleds(sc);
#endif
		break;
	case ADB_PBJPKBD:
		printf("PowerBook keyboard (Japanese layout)\n");
		break;
	case ADB_PBG3JPKBD:
		printf("PowerBook G3 keyboard (Japanese layout)\n");
		break;
	case ADB_PBG4KBD:
		printf("PowerBook G4 keyboard (Inverted T)\n");
		break;
	case ADB_IBITISOKBD:
		printf("iBook keyboard with inverted T (ISO layout)\n");
		break;
	default:
		printf("mapped device (%d)\n", sc->handler_id);
		break;
	}
	error = SetADBInfo(&adbinfo, sc->adbaddr);
#ifdef ADB_DEBUG
	if (adb_debug)
		printf("akbd: returned %d from SetADBInfo\n", error);
#endif

	a.console = akbd_is_console;
	a.keymap = &akbd_keymapdata;
	a.accessops = &akbd_accessops;
	a.accesscookie = sc;

	sc->sc_wskbddev = config_found(self, &a, wskbddevprint);
}


/*
 * Handle putting the keyboard data received from the ADB into
 * an ADB event record.
 */
void 
kbd_adbcomplete(buffer, data_area, adb_command)
	caddr_t buffer;
	caddr_t data_area;
	int adb_command;
{
	adb_event_t event;
	struct akbd_softc *ksc;
	int adbaddr;
#ifdef ADB_DEBUG
	int i;

	if (adb_debug)
		printf("adb: transaction completion\n");
#endif

	adbaddr = ADB_CMDADDR(adb_command);
	ksc = (struct akbd_softc *)data_area;

	event.addr = adbaddr;
	event.hand_id = ksc->handler_id;
	event.def_addr = ksc->origaddr;
	event.byte_count = buffer[0];
	memcpy(event.bytes, buffer + 1, event.byte_count);

#ifdef ADB_DEBUG
	if (adb_debug) {
		printf("akbd: from %d at %d (org %d) %d:", event.addr,
		    event.hand_id, event.def_addr, buffer[0]);
		for (i = 1; i <= buffer[0]; i++)
			printf(" %x", buffer[i]);
		printf("\n");
	}
#endif

	microtime(&event.timestamp);

	kbd_processevent(&event, ksc);
}

/*
 * Given a keyboard ADB event, record the keycodes and call the key 
 * repeat handler, optionally passing the event through the mouse
 * button emulation handler first.
 */
static void
kbd_processevent(event, ksc)
        adb_event_t *event;
        struct akbd_softc *ksc;
{
        adb_event_t new_event;

        new_event = *event;
	new_event.u.k.key = event->bytes[0];
	new_event.bytes[1] = 0xff;
	akbd_intr(&new_event);
#if NAED > 0
	aed_input(&new_event);
#endif
	if (event->bytes[1] != 0xff) {
		new_event.u.k.key = event->bytes[1];
		new_event.bytes[0] = event->bytes[1];
		new_event.bytes[1] = 0xff;
		akbd_intr(&new_event);
#if NAED > 0
		aed_input(&new_event);
#endif
	}

}

#ifdef notyet
/*
 * Get the actual hardware LED state and convert it to softc format.
 */
static u_char
getleds(addr)
	int	addr;
{
	short cmd;
	u_char buffer[9], leds;

	leds = 0x00;	/* all off */
	buffer[0] = 0;

	/* talk R2 */
	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) == 0 &&
	    buffer[0] > 0)
		leds = ~(buffer[2]) & 0x07;

	return (leds);
}

/*
 * Set the keyboard LED's.
 * 
 * Automatically translates from ioctl/softc format to the
 * actual keyboard register format
 */
static int 
setleds(ksc, leds)
	struct akbd_softc *ksc;
	u_char	leds;
{
	int addr;
	short cmd;
	u_char buffer[9];

	if ((leds & 0x07) == (ksc->sc_leds & 0x07))
		return (0);

	addr = ksc->adbaddr;
	buffer[0] = 0;

	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) || buffer[0] == 0)
		return (EIO);

	leds = ~leds & 0x07;
	buffer[2] &= 0xf8;
	buffer[2] |= leds;

	cmd = ADBLISTEN(addr, 2);
	adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd);

	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) || buffer[0] == 0)
		return (EIO);

	ksc->sc_leds = ~((u_int8_t)buffer[2]) & 0x07;

	if ((buffer[2] & 0xf8) != leds)
		return (EIO);
	else
		return (0); 
}

/*
 * Toggle all of the LED's on and off, just for show.
 */
static void 
blinkleds(ksc)
	struct akbd_softc *ksc;
{
	int addr, i;
	u_char blinkleds, origleds;

	addr = ksc->adbaddr;
	origleds = getleds(addr);
	blinkleds = LED_NUMLOCK | LED_CAPSLOCK | LED_SCROLL_LOCK;

	(void)setleds(ksc, blinkleds);

	for (i = 0; i < 10000; i++)
		delay(50);

	/* make sure that we restore the LED settings */
	i = 10;
	do {
		(void)setleds(ksc, (u_char)0x00);
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0)); 

	return;
}
#endif

int
akbd_enable(v, on)
	void *v;
	int on;
{
	return 0;
}

void
akbd_set_leds(v, on)
	void *v;
	int on;
{
}

int
akbd_ioctl(v, cmd, data, flag, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	switch (cmd) {

	case WSKBDIO_GTYPE:
		*(int *)data = WSKBD_TYPE_ADB;
		return 0;
	case WSKBDIO_SETLEDS:
		return 0;
	case WSKBDIO_GETLEDS:
		*(int *)data = 0;
		return 0;
	}
	/* kbdioctl(...); */

	return -1;
}

static int polledkey;
extern int adb_polling;

int
akbd_intr(event)
	adb_event_t *event;
{
	int key, press, val;
	int type;

	struct akbd_softc *sc = akbd_cd.cd_devs[0];

	key = event->u.k.key;
	press = ADBK_PRESS(key);
	val = ADBK_KEYVAL(key);

	type = press ? WSCONS_EVENT_KEY_DOWN : WSCONS_EVENT_KEY_UP;

	switch (key) {
	case 57:	/* Caps Lock pressed */
	case 185:	/* Caps Lock released */
		type = WSCONS_EVENT_KEY_DOWN;
		wskbd_input(sc->sc_wskbddev, type, val);
		type = WSCONS_EVENT_KEY_UP;
		break;
#if 0
	/* not supported... */
	case 245:
		pm_eject_pcmcia(0);
		break;
	case 244:
		pm_eject_pcmcia(1);
		break;
#endif
	}

	if (adb_polling)
		polledkey = key;
	else
		wskbd_input(sc->sc_wskbddev, type, val);

	return 0;
}

int
akbd_cnattach()
{

	akbd_is_console = 1;
	wskbd_cnattach(&akbd_consops, NULL, &akbd_keymapdata);
	return 0;
}

void
akbd_cngetc(v, type, data)
	void *v;
	u_int *type;
	int *data;
{
	int key, press, val;
	int s;

	s = splhigh();

	polledkey = -1;
	adb_polling = 1;

	while (polledkey == -1) {
		adb_intr(NULL); /* adb does not use the argument */
		DELAY(10000);				/* XXX */
	}

	adb_polling = 0;
	splx(s);

	key = polledkey;
	press = ADBK_PRESS(key);
	val = ADBK_KEYVAL(key);

	*data = val;
	*type = press ? WSCONS_EVENT_KEY_DOWN : WSCONS_EVENT_KEY_UP;
}

void
akbd_cnpollc(v, on)
	void *v;
	int on;
{
}
@


1.10
log
@Added missing break. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.9 2001/07/17 23:34:14 drahn Exp $	*/
@


1.9
log
@Remove one crash on PBG4. With this patch <PGUP> and <PGDN> are useable.
This code probably should check which keyboard type is present to figure
out operations for the special keys, just commented out for now.
Noticed in NetBSD mailing list.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.8 2001/07/09 03:30:19 mickey Exp $	*/
d239 1
@


1.8
log
@a wagon and a small cart of protos, spaces, and includes
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.7 2001/07/04 08:38:50 niklas Exp $	*/
d493 2
d501 1
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.13 2001/01/25 14:08:55 tsubai Exp $	*/
d57 2
d89 1
d317 1
a317 1
	kbd_intr(&new_event);
d325 1
a325 1
		kbd_intr(&new_event);
d472 1
a472 1
kbd_intr(event)
@


1.6
log
@Properly identify the PBG4 keyboard, US keyboard at least.
@
text
@d1 1
@


1.5
log
@Add kbd info for iBook. -moj
@
text
@d230 3
@


1.4
log
@Include/header cleanup. More.
@
text
@d230 2
@


1.3
log
@Update for adb keyboard driver, from Nbsd.
@
text
@d524 1
a524 1
		adb_intr();
@


1.3.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@@


1.3.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@a229 5
	case ADB_PBG4KBD:
		printf("PowerBook G4 keyboard (Inverted T)\n");
		break;
	case ADB_IBITISOKBD:
		printf("iBook keyboard with inverted T (ISO layout)\n");
d524 1
a524 1
		adb_intr(NULL); /* adb does not use the argument */
@


1.3.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2
log
@complete wscons support for abd keyboard. -moj ok @@deraadt
@
text
@d1 1
a1 2
/*	$OpenBSD: akbd.c,v 1.1 2001/01/28 19:49:45 drahn Exp $	*/
/*	$NetBSD: akbd.c,v 1.10 2000/09/01 16:00:38 tsubai Exp $	*/
a71 5
/*
 * Local variables.
 */
static volatile int kbd_done;  /* Did ADBOp() complete? */

d73 3
a79 4
/* Driver definition. */
struct cfattach akbd_ca = {
	sizeof(struct akbd_softc), akbdmatch, akbdattach
};
d118 1
a118 1
	struct adb_attach_args *aa_args = (struct adb_attach_args *)aux;
d133 2
a134 2
	struct adb_attach_args *aa_args = (struct adb_attach_args *)aux;
	int count, error;
d156 3
a158 9
		kbd_done = 0;
		cmd = (((sc->adbaddr << 4) & 0xf0) | 0x0d ); /* talk R1 */
		ADBOp((Ptr)buffer, (Ptr)extdms_complete,
		    (Ptr)&kbd_done, cmd);

		/* Wait until done, but no more than 2 secs */
		count = 40000;
		while (!kbd_done && count-- > 0)
			delay(50);
a223 1
#ifdef ADB_PBJPKBD 
a226 2
#endif /* ADB_PBJPKBD  */
#ifdef  ADB_PBG3JPKBD
a229 1
#endif /* ADB_PBG3JPKBD */
d237 1
a237 1
		printf("kbd: returned %d from SetADBInfo\n", error);
d269 1
a269 1
	adbaddr = (adb_command & 0xf0) >> 4;
d280 1
a280 1
		printf("kbd: from %d at %d (org %d) %d:", event.addr,
a336 1
	kbd_done = 0;
d339 3
a341 6
	cmd = ((addr & 0xf) << 4) | 0x0c | 0x02;
	ADBOp((Ptr)buffer, (Ptr)extdms_complete, (Ptr)&kbd_done, cmd);
	while (!kbd_done)
		/* busy-wait until done */ ;

	if (buffer[0] > 0)
a366 1
	kbd_done = 0;
d368 2
a369 7
	/* talk R2 */
	cmd = ((addr & 0xf) << 4) | 0x0c | 0x02;
	ADBOp((Ptr)buffer, (Ptr)extdms_complete, (Ptr)&kbd_done, cmd);
	while (!kbd_done)
		/* busy-wait until done */ ;

	if (buffer[0] == 0)
d376 2
a377 11
	/* listen R2 */
	cmd = ((addr & 0xf) << 4) | 0x08 | 0x02;
	ADBOp((Ptr)buffer, (Ptr)extdms_complete, (Ptr)&kbd_done, cmd);
	while (!kbd_done)
		/* busy-wait until done */ ;

	/* talk R2 */
	cmd = ((addr & 0xf) << 4) | 0x0c | 0x02;
	ADBOp((Ptr)buffer, (Ptr)extdms_complete, (Ptr)&kbd_done, cmd);
	while (!kbd_done)
		/* busy-wait until done */ ;
d379 2
a380 1
	if (buffer[0] == 0)
d478 1
@


1.1
log
@Adding ADB keyboard/mouse/apple event drivers. From Nbsd with changes to build.
aed configures on newer systems. akbd and ams not tested on system which
has a real ADB bus.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d481 1
a481 1
		*(int *)data = 0;		/* XXX */
@

