head	1.18;
access;
symbols
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	UBC_SYNC_A:1.18
	UBC_SYNC_B:1.18
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.18
date	2001.09.01.15.50.00;	author drahn;	state dead;
branches;
next	1.17;

1.17
date	2001.07.09.04.41.28;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.09.03.30.20;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.29.06.55.36;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.27.04.37.19;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.26.18.19.43;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.25.23.29.56;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.25.00.43.15;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.08.05.00.26;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.20.04.20.35;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.07.18.03.28;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.06.02.04.50;	author rahnds;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.28.13.09.01;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.08.19.53.12;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.07.13.22.42;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.15.03.11.01;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.31.04.20.20;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.20.07.26.50;	author rahnds;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.03.24.09.08.41;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.14.21.36.50;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.07.04.10.22.38;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.10.31.03.07.55;	author nate;	state dead;
branches;
next	;


desc
@@


1.18
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@/*	$OpenBSD: openpic.c,v 1.17 2001/07/09 04:41:28 mickey Exp $	*/

/*-
 * Copyright (c) 1995 Per Fogelstrom
 * Copyright (c) 1993, 1994 Charles M. Hannum.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz and Don Ahn.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)isa.c	7.2 (Berkeley) 5/12/91
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <vm/vm.h>
#include <vm/vm_kern.h>
#include <uvm/uvm.h>

#include <machine/autoconf.h>
#include <machine/intr.h>
#include <machine/psl.h>
#include <machine/pio.h>
#include <machine/powerpc.h>
#include <powerpc/mac/openpicreg.h>
#include <dev/ofw/openfirm.h>

#define ICU_LEN 128
#define LEGAL_IRQ(x) ((x >= 0) && (x < ICU_LEN))

static int intrtype[ICU_LEN], intrmask[ICU_LEN], intrlevel[ICU_LEN];
static struct intrhand *intrhand[ICU_LEN] = { 0 };
static int hwirq[ICU_LEN], virq[ICU_LEN];
unsigned int imen /* = 0xffffffff */; /* XXX */
static int virq_max = 0;

struct evcnt evirq[ICU_LEN];

static int fakeintr __P((void *));
static char *intr_typename __P((int type));
static void intr_calculatemasks __P((void));
static __inline int cntlzw __P((int x));
static int mapirq __P((int irq));
int prog_switch __P((void *arg));
void openpic_enable_irq_mask __P((int irq_mask));

extern u_int32_t *heathrow_FCR;

#define HWIRQ_MAX 27
#define HWIRQ_MASK 0x0fffffff


static __inline u_int openpic_read __P((int));
static __inline void openpic_write __P((int, u_int));
void openpic_enable_irq __P((int, int));
void openpic_disable_irq __P((int));
void openpic_init __P((void));
void openpic_set_priority __P((int, int));
static __inline int openpic_read_irq __P((int));
static __inline void openpic_eoi __P((int));

struct openpic_softc {
	struct device sc_dev;
};

int	openpic_match __P((struct device *parent, void *cf, void *aux));
void	openpic_attach __P((struct device *, struct device *, void *));
void	openpic_do_pending_int __P((void));
void	openpic_collect_preconf_intr __P((void));
void	ext_intr_openpic __P((void));

struct cfattach openpic_ca = { 
	sizeof(struct openpic_softc),
	openpic_match,
	openpic_attach
};

struct cfdriver openpic_cd = {
	NULL, "openpic", DV_DULL
};

int
openpic_match(parent, cf, aux) 
	struct device *parent;
	void *cf;
	void *aux;
{
	char type[40];
	struct confargs *ca = aux;

	bzero (type, sizeof(type));

	if (strcmp(ca->ca_name, "interrupt-controller") == 0 ) {
		OF_getprop(ca->ca_node, "device_type", type, sizeof(type));
		if (strcmp(type,  "open-pic") == 0) {
			return 1;
		}
	}
	return 0;
}

u_int8_t *interrupt_reg;
typedef void  (void_f) (void);
extern void_f *pending_int_f;

vaddr_t openpic_base;
void * openpic_intr_establish( void * lcv, int irq, int type, int level,
	int (*ih_fun) __P((void *)), void *ih_arg, char *name);
void openpic_intr_disestablish( void *lcp, void *arg);
void openpic_collect_preconf_intr __P((void));

void
openpic_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	extern intr_establish_t *intr_establish_func;
	extern intr_disestablish_t *intr_disestablish_func;
	extern intr_establish_t *mac_intr_establish_func;
	extern intr_disestablish_t *mac_intr_disestablish_func;

	openpic_base = (vaddr_t) mapiodev (ca->ca_baseaddr +
			ca->ca_reg[0], 0x22000);

	printf(": version 0x%x", openpic_read(OPENPIC_VENDOR_ID));

	openpic_init();

	pending_int_f = openpic_do_pending_int;
	intr_establish_func  = openpic_intr_establish;
	intr_disestablish_func  = openpic_intr_disestablish;
	mac_intr_establish_func  = openpic_intr_establish;
	mac_intr_disestablish_func  = openpic_intr_disestablish;
	install_extint(ext_intr_openpic);
	
#if 1
	openpic_collect_preconf_intr();
#endif

#if 1
	mac_intr_establish(parent, 0x37, IST_LEVEL,
		IPL_HIGH, prog_switch, (void*)0x37, "prog button");
#endif
	ppc_intr_enable(1);

	printf("\n");
}

void
openpic_collect_preconf_intr()
{
	int i;
	for (i = 0; i < ppc_configed_intr_cnt; i++) {
#ifdef DEBUG
		printf("\n\t%s irq %d level %d fun %x arg %x",
		    ppc_configed_intr[i].ih_what, ppc_configed_intr[i].ih_irq,
		    ppc_configed_intr[i].ih_level, ppc_configed_intr[i].ih_fun,
		    ppc_configed_intr[i].ih_arg);
#endif
		openpic_intr_establish(NULL, ppc_configed_intr[i].ih_irq,
		    IST_LEVEL, ppc_configed_intr[i].ih_level,
		    ppc_configed_intr[i].ih_fun, ppc_configed_intr[i].ih_arg,
		    ppc_configed_intr[i].ih_what);
	}
}

int
fakeintr(arg)
	void *arg;
{

	return 0;
}

void nameinterrupt( int replace, char *newstr);

/*
 * Register an interrupt handler.
 */
void *
openpic_intr_establish(lcv, irq, type, level, ih_fun, ih_arg, name)
	void * lcv;
	int irq;
	int type;
	int level;
	int (*ih_fun) __P((void *));
	void *ih_arg;
	char *name;
{
	struct intrhand **p, *q, *ih;
	static struct intrhand fakehand;

	fakehand.ih_next = NULL;
	fakehand.ih_fun  = fakeintr;

#if 0
printf("mac_intr_establish, hI %d L %d ", irq, type);
#endif

	nameinterrupt(irq, name);
	irq = mapirq(irq);
#if 0
printf("vI %d ", irq);
#endif

	/* no point in sleeping unless someone can free memory. */
	ih = malloc(sizeof *ih, M_DEVBUF, cold ? M_NOWAIT : M_WAITOK);
	if (ih == NULL)
		panic("intr_establish: can't malloc handler info");

	if (!LEGAL_IRQ(irq) || type == IST_NONE)
		panic("intr_establish: bogus irq or type");

	switch (intrtype[irq]) {
	case IST_NONE:
		intrtype[irq] = type;
		break;
	case IST_EDGE:
	case IST_LEVEL:
		if (type == intrtype[irq])
			break;
	case IST_PULSE:
		if (type != IST_NONE)
			panic("intr_establish: can't share %s with %s",
			    intr_typename(intrtype[irq]),
			    intr_typename(type));
		break;
	}

	/*
	 * Figure out where to put the handler.
	 * This is O(N^2), but we want to preserve the order, and N is
	 * generally small.
	 */
	for (p = &intrhand[irq]; (q = *p) != NULL; p = &q->ih_next)
		;

	/*
	 * Actually install a fake handler momentarily, since we might be doing
	 * this with interrupts enabled and DON'T WANt the real routine called
	 * until masking is set up.
	 */
	fakehand.ih_level = level;
	*p = &fakehand;

	intr_calculatemasks();

	/*
	 * Poke the real handler in now.
	 */
	ih->ih_fun = ih_fun;
	ih->ih_arg = ih_arg;
	ih->ih_count = 0;
	ih->ih_next = NULL;
	ih->ih_level = level;
	ih->ih_irq = irq;
	*p = ih;

	return (ih);
}

/*
 * Deregister an interrupt handler.
 */
void
openpic_intr_disestablish(lcp, arg)
	void *lcp;
	void *arg;
{
	struct intrhand *ih = arg;
	int irq = ih->ih_irq;
	struct intrhand **p, *q;

	if (!LEGAL_IRQ(irq))
		panic("intr_disestablish: bogus irq");

	/*
	 * Remove the handler from the chain.
	 * This is O(n^2), too.
	 */
	for (p = &intrhand[irq]; (q = *p) != NULL && q != ih; p = &q->ih_next)
		;
	if (q)
		*p = q->ih_next;
	else
		panic("intr_disestablish: handler not registered");
	free((void *)ih, M_DEVBUF);

	intr_calculatemasks();

	if (intrhand[irq] == NULL)
		intrtype[irq] = IST_NONE;
}


static char *
intr_typename(type)
	int type;
{

	switch (type) {
        case IST_NONE :
		return ("none");
        case IST_PULSE:
		return ("pulsed");
        case IST_EDGE:
		return ("edge-triggered");
        case IST_LEVEL:
		return ("level-triggered");
	default:
		panic("intr_typename: invalid type %d", type);
#if 1 /* XXX */
		return ("unknown");
#endif
	}
}

/*
 * Recalculate the interrupt masks from scratch.
 * We could code special registry and deregistry versions of this function that
 * would be faster, but the code would be nastier, and we don't expect this to
 * happen very much anyway.
 */
static void
intr_calculatemasks()
{
	int irq, level;
	struct intrhand *q;

	/* First, figure out which levels each IRQ uses. */
	for (irq = 0; irq < ICU_LEN; irq++) {
		register int levels = 0;
		for (q = intrhand[irq]; q; q = q->ih_next)
			levels |= 1 << q->ih_level;
		intrlevel[irq] = levels;
	}

	/* Then figure out which IRQs use each level. */
	for (level = 0; level < 5; level++) {
		register int irqs = 0;
		for (irq = 0; irq < ICU_LEN; irq++)
			if (intrlevel[irq] & (1 << level))
				irqs |= 1 << irq;
		imask[level] = irqs | SINT_MASK;
	}

	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so imp > (tty | net | bio).
	 */
	imask[IPL_IMP] |= imask[IPL_TTY] | imask[IPL_NET] | imask[IPL_BIO];

	/*
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
	imask[IPL_TTY] |= imask[IPL_NET] | imask[IPL_BIO];
	imask[IPL_NET] |= imask[IPL_BIO];

	/*
	 * These are pseudo-levels.
	 */
	imask[IPL_NONE] = 0x00000000;
	imask[IPL_HIGH] = 0xffffffff;

	/* And eventually calculate the complete masks. */
	for (irq = 0; irq < ICU_LEN; irq++) {
		register int irqs = 1 << irq;
		for (q = intrhand[irq]; q; q = q->ih_next)
			irqs |= imask[q->ih_level];
		intrmask[irq] = irqs | SINT_MASK;
	}

	/* Lastly, determine which IRQs are actually in use. */
	{
		register int irqs = 0;
		for (irq = 0; irq < ICU_LEN; irq++) {
			if (intrhand[irq]) {
				irqs |= 1 << irq;
				openpic_enable_irq(hwirq[irq], intrtype[irq]);
			} else {
				openpic_disable_irq(hwirq[irq]);
			}
		}
		imen = ~irqs;
	}
}
/*
 * Map 64 irqs into 32 (bits).
 */
static int
mapirq(irq)
	int irq;
{
	int v;

	if (irq < 0 || irq >= ICU_LEN)
		panic("invalid irq");
	virq_max++;
	v = virq_max;
	if (v > HWIRQ_MAX)
		panic("virq overflow");

	hwirq[v] = irq;
	virq[irq] = v;
#if 0
printf("\nmapirq %x to %x\n", irq, v);
#endif

	return v;
}

/*
 * Count leading zeros.
 */
static __inline int
cntlzw(x)
	int x;
{
	int a;

	__asm __volatile ("cntlzw %0,%1" : "=r"(a) : "r"(x));

	return a;
}


void
openpic_do_pending_int()
{
	struct intrhand *ih;
	int irq;
	int pcpl;
	int hwpend;
	int emsr, dmsr;
	static int processing;

	if (processing)
		return;

	processing = 1;
	pcpl = splhigh();		/* Turn off all */
	asm volatile("mfmsr %0" : "=r"(emsr));
	dmsr = emsr & ~PSL_EE;
	asm volatile("mtmsr %0" :: "r"(dmsr));

	hwpend = ipending & ~pcpl;	/* Do now unmasked pendings */
	imen &= ~hwpend;
	openpic_enable_irq_mask(~imen);
	hwpend &= HWIRQ_MASK;
	while (hwpend) {
		irq = 31 - cntlzw(hwpend);
		hwpend &= ~(1L << irq);
		ih = intrhand[irq];
		while(ih) {
			(*ih->ih_fun)(ih->ih_arg);
			ih = ih->ih_next;
		}

		evirq[hwirq[irq]].ev_count++;
	}

	/*out32rb(INT_ENABLE_REG, ~imen);*/

	do {
		if((ipending & SINT_CLOCK) & ~pcpl) {
			ipending &= ~SINT_CLOCK;
			softclock();
		}
		if((ipending & SINT_NET) & ~pcpl) {
			extern int netisr;
			int pisr = netisr;
			netisr = 0;
			ipending &= ~SINT_NET;
			softnet(pisr);
		}
	} while (ipending & (SINT_NET|SINT_CLOCK) & ~cpl);
	ipending &= pcpl;
	cpl = pcpl;	/* Don't use splx... we are here already! */
	asm volatile("mtmsr %0" :: "r"(emsr));
	processing = 0;
}

u_int
openpic_read(reg)
	int reg;
{
	char *addr = (void *)(openpic_base + reg);

	return in32rb(addr);
}

void
openpic_write(reg, val)
	int reg;
	u_int val;
{
	char *addr = (void *)(openpic_base + reg);

	out32rb(addr, val);
}

void
openpic_enable_irq_mask(irq_mask)
int irq_mask;
{
	int irq;
	for ( irq = 0; irq <= virq_max; irq++) {
		if (irq_mask & (1 << irq)) {
			openpic_enable_irq(hwirq[irq], intrtype[irq]);
		} else {
			openpic_disable_irq(hwirq[irq]);
		}
	}
}
void
openpic_enable_irq(irq, type)
	int irq;
	int type;
{
	u_int x;

	x = openpic_read(OPENPIC_SRC_VECTOR(irq));
	x &= ~(OPENPIC_IMASK|OPENPIC_SENSE_LEVEL|OPENPIC_SENSE_EDGE);
	if (type == IST_LEVEL) {
		x |= OPENPIC_SENSE_LEVEL;
	} else {
		x |= OPENPIC_SENSE_EDGE;
	}
	openpic_write(OPENPIC_SRC_VECTOR(irq), x);
}

void
openpic_disable_irq(irq)
	int irq;
{
	u_int x;

	x = openpic_read(OPENPIC_SRC_VECTOR(irq));
	x |= OPENPIC_IMASK;
	openpic_write(OPENPIC_SRC_VECTOR(irq), x);
}

void
openpic_set_priority(cpu, pri)
        int cpu, pri;
{
	u_int x;

	x = openpic_read(OPENPIC_CPU_PRIORITY(cpu));
	x &= ~OPENPIC_CPU_PRIORITY_MASK;
	x |= pri;
	openpic_write(OPENPIC_CPU_PRIORITY(cpu), x);
}

int
openpic_read_irq(cpu)
	int cpu;
{
	return openpic_read(OPENPIC_IACK(cpu)) & OPENPIC_VECTOR_MASK;
}

void
openpic_eoi(cpu)
        int cpu;
{
        openpic_write(OPENPIC_EOI(cpu), 0);
        openpic_read(OPENPIC_EOI(cpu));
}

void
ext_intr_openpic()
{
	int irq, realirq;
	int r_imen;
	int pcpl;
	struct intrhand *ih;

	pcpl = splhigh();       /* Turn off all */

	realirq = openpic_read_irq(0);

	while (realirq != 255) {
		irq = virq[realirq];
		intrcnt[realirq]++;

		/* XXX check range */

		r_imen = 1 << irq;

		if ((pcpl & r_imen) != 0) {
			ipending |= r_imen;     /* Masked! Mark this as pending */
			openpic_disable_irq(realirq);
		} else {
			ih = intrhand[irq];
			while (ih) {
				(*ih->ih_fun)(ih->ih_arg);
				ih = ih->ih_next;
			}

			uvmexp.intrs++;
			evirq[realirq].ev_count++;
		}

		openpic_eoi(0);

		realirq = openpic_read_irq(0);
	}

	splx(pcpl);     /* Process pendings. */
}
void
openpic_init()
{
        int irq;
        u_int x;

        /* disable all interrupts */
        for (irq = 0; irq < 255; irq++)
                openpic_write(OPENPIC_SRC_VECTOR(irq), OPENPIC_IMASK);
        openpic_set_priority(0, 15);

        /* we don't need 8259 pass through mode */
        x = openpic_read(OPENPIC_CONFIG);
        x |= OPENPIC_CONFIG_8259_PASSTHRU_DISABLE;
        openpic_write(OPENPIC_CONFIG, x);

        /* send all interrupts to cpu 0 */
        for (irq = 0; irq < ICU_LEN; irq++)
                openpic_write(OPENPIC_IDEST(irq), 1 << 0);
        for (irq = 0; irq < ICU_LEN; irq++) {
                x = irq;
                x |= OPENPIC_IMASK;
                x |= OPENPIC_POLARITY_POSITIVE;
                x |= OPENPIC_SENSE_LEVEL;
                x |= 8 << OPENPIC_PRIORITY_SHIFT;
                openpic_write(OPENPIC_SRC_VECTOR(irq), x);
        }

        /* XXX set spurious intr vector */

        openpic_set_priority(0, 0);

        /* clear all pending interrunts */
        for (irq = 0; irq < ICU_LEN; irq++) {
                openpic_read_irq(0);
                openpic_eoi(0);
        }

        for (irq = 0; irq < ICU_LEN; irq++)
                openpic_disable_irq(irq);

        install_extint(ext_intr_openpic);
}
@


1.17
log
@only on prog_switch, more includes and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.16 2001/07/09 03:30:20 mickey Exp $	*/
@


1.16
log
@a wagon and a small cart of protos, spaces, and includes
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.15 2001/06/29 06:55:36 drahn Exp $	*/
a201 11
prog_switch (void *arg)
{
#ifdef DDB
        Debugger();
#else
	printf("programmer button pressed, debugger not available\n");
#endif
	return 1;
}

static int
@


1.15
log
@Include/header cleanup. More.
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.14 2001/06/27 04:37:19 art Exp $	*/
d73 6
a78 5
static char *intr_typename(int type);
static void intr_calculatemasks();
static __inline int cntlzw(int x);
static int mapirq(int irq);
void openpic_enable_irq_mask(int irq_mask);
d90 1
a90 1
void openpic_init();
d101 3
a103 2
void	openpic_do_pending_int();
void ext_intr_openpic();
a137 1
static int prog_switch (void *arg);
d143 1
a143 1
void openpic_collect_preconf_intr();
d182 1
d201 1
a201 1
static int
@


1.14
log
@kill old vm
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.13 2001/06/26 18:19:43 drahn Exp $	*/
d57 1
d59 1
@


1.13
log
@Cleanup of interrupt configuration, move prototypes to header file,
not in each file.
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.12 2001/06/25 23:29:56 drahn Exp $	*/
a48 1
#ifdef UVM
a51 1
#endif
a641 1
#ifdef UVM
a642 2
#else
#endif
@


1.12
log
@closer to building with -Wno-uninitialized
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.11 2001/06/25 00:43:15 mickey Exp $	*/
a136 5
typedef int mac_intr_handle_t;

typedef void     *(intr_establish_t) __P((void *, mac_intr_handle_t,
            int, int, int (*func)(void *), void *, char *));
typedef void     (intr_disestablish_t) __P((void *, void *));
d175 1
a175 1
		IPL_HIGH, prog_switch, 0x37, "prog button");
@


1.11
log
@cold is in systm now
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.10 2001/04/08 05:00:26 drahn Exp $	*/
a76 1
static int read_irq();
a154 1
	struct openpic_softc *sc = (void *)self;
@


1.10
log
@Attempt at tracking interrupt source better than "irqN", with this
change, when the interrupt is established, the string will be changed
from irqN to irqN/dvrname. Some drivers establish nice names, "usb0"
some do not, "wdc_obio".
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a241 1
	extern int cold;
@


1.9
log
@Add edge/level sense detection capability to the interrupt controller,
changes from NetBSD, been in my tree for a while.
@
text
@d225 2
d251 1
@


1.8
log
@cleaner
@
text
@d88 1
a88 1
void openpic_enable_irq __P((int));
d428 1
a428 1
				openpic_enable_irq(hwirq[irq]);
d558 1
a558 1
			openpic_enable_irq(hwirq[irq]);
d565 1
a565 1
openpic_enable_irq(irq)
d567 1
d572 6
a577 1
	x &= ~OPENPIC_IMASK;
@


1.7
log
@boot message cleanup.
@
text
@d193 1
d195 8
a202 13
			ppc_configed_intr[i].ih_what,
			ppc_configed_intr[i].ih_irq,
			ppc_configed_intr[i].ih_level,
			ppc_configed_intr[i].ih_fun,
			ppc_configed_intr[i].ih_arg
			);
		openpic_intr_establish(NULL,
			ppc_configed_intr[i].ih_irq,
			IST_LEVEL,
			ppc_configed_intr[i].ih_level,
			ppc_configed_intr[i].ih_fun,
			ppc_configed_intr[i].ih_arg,
			ppc_configed_intr[i].ih_what);
@


1.6
log
@First cut at supporting older bandit based machines
Adds mesh scsi, changes to interrupt controller to allow
preconfiguration of interrupts.
Mesh work by Andy.
@
text
@d165 1
a165 1
	printf("version %x", openpic_read(OPENPIC_VENDOR_ID));
d184 1
@


1.5
log
@Fix CVS id fields.
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
a190 1
	printf("postconfiguring interrupts\n");
d192 1
a192 1
		printf("\t%s irq %d level %d fun %x arg %x\n",
@


1.4
log
@Since it is possible for the interrupt controller to be configured late
in the config cycle, and pci devices as well as mac onboard devices
do not use interrupts to probe. It is possible to record that the
interrupt is to be configured, but not configure it with the interrupt
controller until the interrupt controller configures itself.
This is lazy binding of interrupts. If there is a conflicting interrupt
or other problem it will be noticed when the interrupt controller configures
and collects the data rather than when the device configures.
Currently on the openpic interrupt controller supports these pre-configured
interrupts.
@
text
@@


1.3
log
@UVM compatibility changes, UVM still not working, but can build.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
a61 1
#define ICU_LEN 64
d66 1
a66 1
static int hwirq[ICU_LEN], virq[64];
d148 1
d175 4
d187 22
d449 1
a449 1
	if (irq < 0 || irq >= 64)
@


1.2
log
@Add interrupt counter, to verify interrupt problem is causing
over 200000 interrupts per second, and the G4 is still usable.
Gotta fix that bug.
@
text
@d49 5
@


1.1
log
@Interrupt code changed from called routines, to initialized driver.
Added openpic support with this new driver scheme.

added support for keylargo-ata, G4 ide configures properly.
interrupt configuration changed to be more full featured, like isa had been.
@
text
@d1 1
a1 1
/*	$OpenBSD: macintr.c,v 1.1 1999/11/08 23:46:01 rahnds Exp $	*/
d65 1
a65 1
struct evcnt evirq[ICU_LEN*2];
d599 1
d636 1
a636 1
        for (irq = 0; irq < ICU_LEN; irq++)
@


1.1.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@a48 5
#ifdef UVM
#include <vm/vm.h>
#include <vm/vm_kern.h>
#include <uvm/uvm.h>
#endif
d56 1
a56 1
#define ICU_LEN 128
d61 1
a61 1
static int hwirq[ICU_LEN], virq[ICU_LEN];
d65 1
a65 1
struct evcnt evirq[ICU_LEN];
d83 1
a83 1
void openpic_enable_irq __P((int, int));
a142 1
void openpic_collect_preconf_intr();
d159 1
a159 1
	printf(": version 0x%x", openpic_read(OPENPIC_VENDOR_ID));
a168 4
	
#if 1
	openpic_collect_preconf_intr();
#endif
a173 1
	ppc_intr_enable(1);
a176 17
void
openpic_collect_preconf_intr()
{
	int i;
	for (i = 0; i < ppc_configed_intr_cnt; i++) {
#ifdef DEBUG
		printf("\n\t%s irq %d level %d fun %x arg %x",
		    ppc_configed_intr[i].ih_what, ppc_configed_intr[i].ih_irq,
		    ppc_configed_intr[i].ih_level, ppc_configed_intr[i].ih_fun,
		    ppc_configed_intr[i].ih_arg);
#endif
		openpic_intr_establish(NULL, ppc_configed_intr[i].ih_irq,
		    IST_LEVEL, ppc_configed_intr[i].ih_level,
		    ppc_configed_intr[i].ih_fun, ppc_configed_intr[i].ih_arg,
		    ppc_configed_intr[i].ih_what);
	}
}
a196 2
void nameinterrupt( int replace, char *newstr);

a220 1
	nameinterrupt(irq, name);
d400 1
a400 1
				openpic_enable_irq(hwirq[irq], intrtype[irq]);
d417 1
a417 1
	if (irq < 0 || irq >= ICU_LEN)
d530 1
a530 1
			openpic_enable_irq(hwirq[irq], intrtype[irq]);
d537 1
a537 1
openpic_enable_irq(irq, type)
a538 1
	int type;
d543 1
a543 6
	x &= ~(OPENPIC_IMASK|OPENPIC_SENSE_LEVEL|OPENPIC_SENSE_EDGE);
	if (type == IST_LEVEL) {
		x |= OPENPIC_SENSE_LEVEL;
	} else {
		x |= OPENPIC_SENSE_EDGE;
	}
a598 1
		intrcnt[realirq]++;
d635 1
a635 1
        for (irq = 0; irq < 255; irq++)
@


1.1.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.1.2.2 2001/05/14 21:36:50 niklas Exp $	*/
d49 1
d53 1
a58 1
#include <machine/powerpc.h>
a59 1
#include <dev/ofw/openfirm.h>
d77 1
d138 5
d156 1
d182 1
a182 1
		IPL_HIGH, prog_switch, (void*)0x37, "prog button");
d242 1
d652 1
d654 2
@


1.1.2.4
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: openpic.c,v 1.1.2.3 2001/07/04 10:22:38 niklas Exp $	*/
@


