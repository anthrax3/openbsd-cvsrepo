head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.18
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.16
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.12
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.6
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.6
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.07.16.06.08.52;	author mlarkin;	state Exp;
branches;
next	1.15;
commitid	zdTfZR6UVPwGQBgq;

1.15
date	2015.01.24.15.13.55;	author kettenis;	state Exp;
branches;
next	1.14;
commitid	Ol0pICcR5PormuCL;

1.14
date	2010.09.06.19.05.48;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.10.15.03.17;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.03.15.46.06;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.10;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.19.11.06.33;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.15.01.44.06;	author weingart;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.13.21.49.15;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.09.20.13.10;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.04.08.01.08;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.32;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.04.08.57.45;	author niklas;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	99.01.11.05.11.23;	author millert;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	98.01.20.18.40.12;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.04.21.22.16.18;	author deraadt;	state Exp;
branches;
next	;

1.3.6.1
date	2001.07.14.10.02.22;	author ho;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2001.07.16.21.41.28;	author niklas;	state Exp;
branches;
next	1.3.6.3;

1.3.6.3
date	2001.10.31.03.01.11;	author nate;	state Exp;
branches;
next	1.3.6.4;

1.3.6.4
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.3.6.5;

1.3.6.5
date	2003.05.13.19.42.07;	author ho;	state Exp;
branches;
next	1.3.6.6;

1.3.6.6
date	2004.03.23.08.02.55;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2002.06.11.03.35.52;	author art;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.05.19.21.45.11;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.16
log
@
remove some 12 year old code that was never correct, and never compiled
anyway due to a missing #include.

the code was originally intended to handle i386 SMP EISA machines with an
IOAPIC. Since the code never was compiled, and nobody has noticed or
complained for 12 years, I think things are probably fine.
@
text
@/*	$OpenBSD: eisa_machdep.c,v 1.15 2015/01/24 15:13:55 kettenis Exp $	*/
/*	$NetBSD: eisa_machdep.c,v 1.10.22.2 2000/06/25 19:36:58 sommerfeld Exp $	*/

/*-
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-specific functions for EISA autoconfiguration.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/time.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/i8259.h>

#include <dev/isa/isavar.h>
#include <dev/eisa/eisavar.h>

/*
 * EISA doesn't have any special needs; just use the generic versions
 * of these funcions.
 */
struct bus_dma_tag eisa_bus_dma_tag = {
	NULL,			/* _cookie */
	_bus_dmamap_create,
	_bus_dmamap_destroy,
	_bus_dmamap_load,
	_bus_dmamap_load_mbuf,
	_bus_dmamap_load_uio,
	_bus_dmamap_load_raw,
	_bus_dmamap_unload,
	_bus_dmamap_sync,
	_bus_dmamem_alloc,
	_bus_dmamem_alloc_range,
	_bus_dmamem_free,
	_bus_dmamem_map,
	_bus_dmamem_unmap,
	_bus_dmamem_mmap,
};

void
eisa_attach_hook(struct device *parent, struct device *self,
    struct eisabus_attach_args *eba)
{
	/* Nothing to do */
}

int
eisa_maxslots(eisa_chipset_tag_t ec)
{
	/*
	 * Always try 16 slots.
	 */
	return (16);
}

int
eisa_intr_map(eisa_chipset_tag_t ec, u_int irq, eisa_intr_handle_t *ihp)
{
	if (irq >= ICU_LEN) {
		printf("eisa_intr_map: bad IRQ %d\n", irq);
		*ihp = -1;
		return (1);
	}
	if (irq == 2) {
		printf("eisa_intr_map: changed IRQ 2 to IRQ 9\n");
		irq = 9;
	}

	*ihp = irq;
	return (0);
}

const char *
eisa_intr_string(eisa_chipset_tag_t ec, eisa_intr_handle_t ih)
{
	static char irqstr[64];

	if (ih == 0 || (ih & 0xff) >= ICU_LEN || ih == 2)
		panic("eisa_intr_string: bogus handle 0x%x", ih);

	snprintf(irqstr, sizeof irqstr, "irq %d", ih);
	return (irqstr);
	
}

void *
eisa_intr_establish(eisa_chipset_tag_t ec, eisa_intr_handle_t ih, int type,
    int level, int (*func)(void *), void *arg, char *what)
{
	if (ih == 0 || ih >= ICU_LEN || ih == 2)
		panic("eisa_intr_establish: bogus handle 0x%x", ih);

	return (isa_intr_establish(NULL, ih, type, level, func, arg, what));
}

void
eisa_intr_disestablish(eisa_chipset_tag_t ec, void *cookie)
{
	return (isa_intr_disestablish(NULL, cookie));
}
@


1.15
log
@Add bus_dmamem_alloc_range(9) to allow drivers to allocate DMA'able memory
within a range that is more (or less) restrictive than the default range.

ok deraadt@@, stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.14 2010/09/06 19:05:48 kettenis Exp $	*/
a121 4
#if NIOAPIC > 0
	struct mp_intr_map *mip;
#endif

a131 20
#if NIOAPIC > 0
	if (mp_busses != NULL) {
		/*
		 * Assumes 1:1 mapping between PCI bus numbers and
		 * the numbers given by the MP bios.
		 * XXX Is this a valid assumption?
		 */
		
		for (mip = mp_busses[bus].mb_intrs; mip != NULL;
		    mip = mip->next) {
			if (mip->bus_pin == irq) {
				*ihp = mip->ioapic_ih | irq;
				return (0);
			}
		}
		if (mip == NULL)
			printf("eisa_intr_map: no MP mapping found\n");
	}
#endif

a143 8
#if NIOAPIC > 0
	if (ih & APIC_INT_VIA_APIC) {
		snprintf(irqstr, sizeof irqstr, "apic %d int %d (irq %d)",
		    APIC_IRQ_APIC(ih), APIC_IRQ_PIN(ih), ih & 0xff);
		return (irqstr);
	}
#endif

a152 8
#if NIOAPIC > 0
	if (ih != -1) {
		if (ih != -1 && (ih & APIC_INT_VIA_APIC)) {
			return (apic_intr_establish(ih, type, level, func, arg,
			    what));
		}
	}
#endif
@


1.14
log
@Make sure bus_dmamap_sync() always involves a function call, to prevent the
compiler from doing stupid things like reordering stores around it.  There is
some debate whether this will be enough for newer versions of GCC and LLVM.
If this is indeed deemed necessary, this will be addressed in a future diff.

ok miod@@, oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.13 2009/03/10 15:03:17 oga Exp $	*/
d96 1
@


1.13
log
@remove the _BUS_DMA_PRIVATE define from amd64 and i386.

a define needed to get to ``private'' functions that needs to be defined
5 or more times isn't much use and may cause namespace issues anyway.
Other archs will probably follow.

Discussed in portugal.  "Hell yes" weingart@@, ok kettenis@@, no
objections miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.12 2008/12/03 15:46:06 oga Exp $	*/
d94 1
a94 1
	NULL,			/* _dmamap_sync */
@


1.12
log
@Remove the x86 and i386 prefixes to the bus_dma types. It's really quite
pointless and just makes the code different for no reason. This moves i386 and
amd64 bus_dma to being a lot closer to identical.

suggestion to just remove the prefix instead of merge them from deraadt@@.

no objections art@@, kettenis@@, ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.11 2008/06/26 05:42:10 ray Exp $	*/
a74 1
#define _BUS_DMA_PRIVATE
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.10 2006/09/19 11:06:33 jsg Exp $	*/
d75 1
a75 1
#define _I386_BUS_DMA_PRIVATE
d86 1
a86 1
struct i386_bus_dma_tag eisa_bus_dma_tag = {
@


1.10
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.9 2006/04/15 01:44:06 weingart Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@Fix the NIOAPIC case as well
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.8 2004/06/13 21:49:15 niklas Exp $	*/
d111 2
a112 3
eisa_attach_hook(parent, self, eba)
	struct device *parent, *self;
	struct eisabus_attach_args *eba;
a113 1

d118 1
a118 2
eisa_maxslots(ec)
	eisa_chipset_tag_t ec;
a119 1

d127 1
a127 4
eisa_intr_map(ec, irq, ihp)
	eisa_chipset_tag_t ec;
	u_int irq;
	eisa_intr_handle_t *ihp;
d168 1
a168 3
eisa_intr_string(ec, ih)
	eisa_chipset_tag_t ec;
	eisa_intr_handle_t ih;
d189 2
a190 6
eisa_intr_establish(ec, ih, type, level, func, arg, what)
	eisa_chipset_tag_t ec;
	eisa_intr_handle_t ih;
	int type, level, (*func)(void *);
	void *arg;
	char *what;
d207 1
a207 3
eisa_intr_disestablish(ec, cookie)
	eisa_chipset_tag_t ec;
	void *cookie;
@


1.8
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d179 1
a179 1
	static char irqstr[8];		/* 4 + 2 + NUL + sanity */
d186 1
a186 1
		sprintf(irqstr, "apic %d int %d (irq %d)",
@


1.7
log
@pull in KNF from SMP
@
text
@d1 2
a2 2
/*	$OpenBSD: eisa_machdep.c,v 1.6 2003/05/04 08:01:08 deraadt Exp $	*/
/*	$NetBSD: eisa_machdep.c,v 1.6 1997/06/06 23:12:52 thorpej Exp $	*/
d84 1
a85 1
#include <i386/isa/icu.h>
d136 3
d150 20
d181 1
a181 1
	if (ih == 0 || ih >= ICU_LEN || ih == 2)
d184 8
d205 8
a212 1

a223 1

@


1.6
log
@snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.5 2002/03/14 01:26:32 millert Exp $	*/
d140 1
a140 1
		return 1;
d148 1
a148 1
	return 0;
d156 1
a156 1
	static char irqstr[8];		/* 4 + 2 + NULL + sanity */
d178 1
a178 1
	return isa_intr_establish(NULL, ih, type, level, func, arg, what);
d187 1
a187 1
	return isa_intr_disestablish(NULL, cookie);
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.4 2001/07/04 08:57:45 niklas Exp $	*/
d161 1
a161 1
	sprintf(irqstr, "irq %d", ih);
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.6 1997/06/06 23:12:52 thorpej Exp $	*/
d170 1
a170 1
	int type, level, (*func) __P((void *));
@


1.4.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.4 2001/07/04 08:57:45 niklas Exp $	*/
d170 1
a170 1
	int type, level, (*func)(void *);
@


1.4.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d161 1
a161 1
	snprintf(irqstr, sizeof irqstr, "irq %d", ih);
@


1.3
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
@


1.3.6.1
log
@Initial import of some SMP code from NetBSD.
Not really working here yet, but there is some work in progress.
@
text
@d1 1
a1 1
/*	$NetBSD: eisa_machdep.c,v 1.10.22.2 2000/06/25 19:36:58 sommerfeld Exp $	*/
a134 3
#if NIOAPIC > 0
	struct mp_intr_map *mip;
#endif
a145 20
#if NIOAPIC > 0
	if (mp_busses != NULL) {
		/*
		 * Assumes 1:1 mapping between PCI bus numbers and
		 * the numbers given by the MP bios.
		 * XXX Is this a valid assumption?
		 */
		
		for (mip = mp_busses[bus].mb_intrs; mip != NULL; mip=mip->next) {
			if (mip->bus_pin == irq) {
				*ihp = mip->ioapic_ih | irq;
				return 0;
			}
		}
		if (mip == NULL)
			printf("eisa_intr_map: no MP mapping found\n");
	}
#endif
	

d157 1
a157 1
	if (ih == 0 || (ih & 0xff) >= ICU_LEN || ih == 2)
a159 9
#if NIOAPIC > 0
	if (ih & APIC_INT_VIA_APIC)
		sprintf(irqstr, "apic %d int %d (irq %d)",
			APIC_IRQ_APIC(ih),
			APIC_IRQ_PIN(ih),
			ih&0xff);
	else
		sprintf(irqstr, "irq %d", ih&0xff);
#else
a160 1
#endif
d173 1
a173 8
#if NIOAPIC > 0
	if (ih != -1) {
		if (ih != -1 && (ih & APIC_INT_VIA_APIC)) {
			return apic_intr_establish(ih, type, level,
			    func, arg);
		}
	}
#endif
d185 1
@


1.3.6.2
log
@KNF
slight simplification
Add name to APIC interupt establishments a la OpenBSD
@
text
@d142 1
a142 1
		return (1);
d157 1
a157 2
		for (mip = mp_busses[bus].mb_intrs; mip != NULL;
		    mip = mip->next) {
d160 1
a160 1
				return (0);
d167 1
d170 1
a170 1
	return (0);
d178 1
a178 1
	static char irqstr[8];		/* 4 + 2 + NUL + sanity */
d184 1
a184 1
	if (ih & APIC_INT_VIA_APIC) {
d186 7
a192 3
		    APIC_IRQ_APIC(ih), APIC_IRQ_PIN(ih), ih & 0xff);
		return (irqstr);
	}
a193 2

	sprintf(irqstr, "irq %d", ih);
d209 2
a210 2
			return (apic_intr_establish(ih, type, level, func, arg,
			    what));
d217 1
a217 1
	return (isa_intr_establish(NULL, ih, type, level, func, arg, what));
d225 1
a225 1
	return (isa_intr_disestablish(NULL, cookie));
@


1.3.6.3
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.3.6.4
log
@Merge in -current from about a week ago
@
text
@d201 1
a201 1
	int type, level, (*func)(void *);
@


1.3.6.5
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.3.6.4 2002/03/28 10:31:04 niklas Exp $	*/
d192 1
a192 1
	snprintf(irqstr, sizeof irqstr, "irq %d", ih);
@


1.3.6.6
log
@a small step towards an integrated PIC/APIC system: move isa/icu.h to
include/i8259.h, and adapt the ACK/MASK/UNMASK macros so we can
reuse the API for APICs.  From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa_machdep.c,v 1.3.6.5 2003/05/13 19:42:07 ho Exp $	*/
a83 1
#include <machine/i8259.h>
d85 1
@


1.2
log
@Merge bus_dma support from NetBSD, mostly by Jason Thorpe.  Only i386 uses it
 so far, the other archs gets placeholders for now.  I wrote a compatibility
layer for OpenBSD's old isadma code so we can still use our old
driver sources.  They will however get changed to native bus_dma use,
on a case by case basis.   Oh yes, I almost forgot, I kept our notion
of isadma being a device so DMA-less ISA-busses still work
@
text
@d158 1
a158 1
		panic("eisa_intr_string: bogus handle 0x%x\n", ih);
d175 1
a175 1
		panic("eisa_intr_establish: bogus handle 0x%x\n", ih);
@


1.1
log
@partial sync with netbsd 960418, more to come
@
text
@d1 38
a38 1
/*	$NetBSD: eisa_machdep.c,v 1.2 1996/04/11 22:15:08 cgd Exp $	*/
d81 3
d87 21
@
