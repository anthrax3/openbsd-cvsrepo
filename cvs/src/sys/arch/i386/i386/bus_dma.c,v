head	1.35;
access;
symbols
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.35.0.8
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.6
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.2
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.26.0.4
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.2
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.25.0.6
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.4
	OPENBSD_5_0:1.25.0.2
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.35
date	2015.12.17.17.16.04;	author tedu;	state Exp;
branches;
next	1.34;
commitid	P4aSHLw81n2bU141;

1.34
date	2015.01.24.15.13.55;	author kettenis;	state Exp;
branches;
next	1.33;
commitid	Ol0pICcR5PormuCL;

1.33
date	2014.11.16.12.30.57;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	yv0ECmCdICvq576h;

1.32
date	2014.07.12.18.44.41;	author tedu;	state Exp;
branches;
next	1.31;
commitid	uKVPYMN2MLxdZxzH;

1.31
date	2014.07.11.14.41.00;	author mpi;	state Exp;
branches;
next	1.30;
commitid	wnssmi4nWgkMFOsf;

1.30
date	2014.07.11.09.36.26;	author mpi;	state Exp;
branches;
next	1.29;
commitid	vsYjSRfS3Y783BvW;

1.29
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2014.03.12.13.00.35;	author kettenis;	state Exp;
branches;
next	1.27;

1.27
date	2013.12.12.21.04.50;	author kettenis;	state Exp;
branches;
next	1.26;

1.26
date	2012.12.08.12.04.21;	author mpi;	state Exp;
branches;
next	1.25;

1.25
date	2011.06.23.20.44.39;	author ariane;	state Exp;
branches;
next	1.24;

1.24
date	2010.12.26.15.40.59;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2010.11.20.20.33.24;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2010.09.06.19.05.48;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2010.03.27.00.37.15;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2010.03.25.22.44.57;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2009.11.03.17.21.46;	author damien;	state Exp;
branches;
next	1.18;

1.18
date	2009.08.11.17.15.54;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.06.05.43.13;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.20.00.42.06;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.15.03.35.26;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.15.02.03.33;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.15.01.58.27;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.14.16.01.04;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.09.03.08.36;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.09.03.06.35;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.08.20.58.24;	author marco;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.04.14.07.22;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.30.18.12.24;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.30.17.43.15;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.10.15.03.17;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.07.15.34.34;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.02.05.01.13.21;	author oga;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2008.12.04.19.25.38;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.04.15.24.18;	author oga;	state Exp;
branches;
next	;

1.3.2.1
date	2009.04.27.20.47.59;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.35
log
@add a size to free. from Mathieu
@
text
@/*	$OpenBSD: bus_dma.c,v 1.34 2015/01/24 15:13:55 kettenis Exp $	*/
/*-
 * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1993, 1994, 1995, 1996 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1992 Terrence R. Lambert.
 * Copyright (c) 1982, 1987, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/proc.h>

#include <machine/bus.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>

#include <uvm/uvm_extern.h>

int	_bus_dmamap_load_buffer(bus_dma_tag_t, bus_dmamap_t, void *,
    bus_size_t, struct proc *, int, paddr_t *, int *, int);

/*
 * Common function for DMA map creation.  May be called by bus-specific
 * DMA map creation functions.
 */
int
_bus_dmamap_create(bus_dma_tag_t t, bus_size_t size, int nsegments,
    bus_size_t maxsegsz, bus_size_t boundary, int flags, bus_dmamap_t *dmamp)
{
	struct bus_dmamap *map;
	void *mapstore;
	size_t mapsize;

	/*
	 * Allocate and initialize the DMA map.  The end of the map
	 * is a variable-sized array of segments, so we allocate enough
	 * room for them in one shot.
	 *
	 * Note we don't preserve the WAITOK or NOWAIT flags.  Preservation
	 * of ALLOCNOW notifies others that we've reserved these resources,
	 * and they are not to be freed.
	 *
	 * The bus_dmamap_t includes one bus_dma_segment_t, hence
	 * the (nsegments - 1).
	 */
	mapsize = sizeof(struct bus_dmamap) +
	    (sizeof(bus_dma_segment_t) * (nsegments - 1));
	if ((mapstore = malloc(mapsize, M_DEVBUF,
	    ((flags & BUS_DMA_NOWAIT) ? M_NOWAIT : M_WAITOK) | M_ZERO)) == NULL)
		return (ENOMEM);

	map = (struct bus_dmamap *)mapstore;
	map->_dm_size = size;
	map->_dm_segcnt = nsegments;
	map->_dm_maxsegsz = maxsegsz;
	map->_dm_boundary = boundary;
	map->_dm_flags = flags & ~(BUS_DMA_WAITOK|BUS_DMA_NOWAIT);
	map->dm_mapsize = 0;		/* no valid mappings */
	map->dm_nsegs = 0;

	*dmamp = map;
	return (0);
}

/*
 * Common function for DMA map destruction.  May be called by bus-specific
 * DMA map destruction functions.
 */
void
_bus_dmamap_destroy(bus_dma_tag_t t, bus_dmamap_t map)
{
	size_t mapsize;
	
	mapsize = sizeof(struct bus_dmamap) +
		(sizeof(bus_dma_segment_t) * (map->_dm_segcnt - 1));
	free(map, M_DEVBUF, mapsize);
}

/*
 * Common function for loading a DMA map with a linear buffer.  May
 * be called by bus-specific DMA map load functions.
 */
int
_bus_dmamap_load(bus_dma_tag_t t, bus_dmamap_t map, void *buf,
    bus_size_t buflen, struct proc *p, int flags)
{
	bus_addr_t lastaddr = 0;
	int seg, error;

	/*
	 * Make sure that on error condition we return "no valid mappings".
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;

	if (buflen > map->_dm_size)
		return (EINVAL);

	seg = 0;
	error = _bus_dmamap_load_buffer(t, map, buf, buflen, p, flags,
	    &lastaddr, &seg, 1);
	if (error == 0) {
		map->dm_mapsize = buflen;
		map->dm_nsegs = seg + 1;
	}
	return (error);
}

/*
 * Like _bus_dmamap_load(), but for mbufs.
 */
int
_bus_dmamap_load_mbuf(bus_dma_tag_t t, bus_dmamap_t map, struct mbuf *m0,
    int flags)
{
	paddr_t lastaddr = 0;
	int seg, error, first;
	struct mbuf *m;

	/*
	 * Make sure that on error condition we return "no valid mappings".
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;

#ifdef DIAGNOSTIC
	if ((m0->m_flags & M_PKTHDR) == 0)
		panic("_bus_dmamap_load_mbuf: no packet header");
#endif

	if (m0->m_pkthdr.len > map->_dm_size)
		return (EINVAL);

	first = 1;
	seg = 0;
	error = 0;
	for (m = m0; m != NULL && error == 0; m = m->m_next) {
		if (m->m_len == 0)
			continue;
		error = _bus_dmamap_load_buffer(t, map, m->m_data, m->m_len,
		    NULL, flags, &lastaddr, &seg, first);
		first = 0;
	}
	if (error == 0) {
		map->dm_mapsize = m0->m_pkthdr.len;
		map->dm_nsegs = seg + 1;
	}
	return (error);
}

/*
 * Like _bus_dmamap_load(), but for uios.
 */
int
_bus_dmamap_load_uio(bus_dma_tag_t t, bus_dmamap_t map, struct uio *uio,
    int flags)
{
	paddr_t lastaddr = 0;
	int seg, i, error, first;
	bus_size_t minlen, resid;
	struct proc *p = NULL;
	struct iovec *iov;
	caddr_t addr;

	/*
	 * Make sure that on error condition we return "no valid mappings".
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;

	resid = uio->uio_resid;
	iov = uio->uio_iov;

	if (resid > map->_dm_size)
		return (EINVAL);

	if (uio->uio_segflg == UIO_USERSPACE) {
		p = uio->uio_procp;
#ifdef DIAGNOSTIC
		if (p == NULL)
			panic("_bus_dmamap_load_uio: USERSPACE but no proc");
#endif
	}

	first = 1;
	seg = 0;
	error = 0;
	for (i = 0; i < uio->uio_iovcnt && resid != 0 && error == 0; i++) {
		/*
		 * Now at the first iovec to load.  Load each iovec
		 * until we have exhausted the residual count.
		 */
		minlen = resid < iov[i].iov_len ? resid : iov[i].iov_len;
		addr = (caddr_t)iov[i].iov_base;

		error = _bus_dmamap_load_buffer(t, map, addr, minlen,
		    p, flags, &lastaddr, &seg, first);
		first = 0;

		resid -= minlen;
	}
	if (error == 0) {
		map->dm_mapsize = uio->uio_resid;
		map->dm_nsegs = seg + 1;
	}
	return (error);
}

/*
 * Like _bus_dmamap_load(), but for raw memory allocated with
 * bus_dmamem_alloc().
 */
int
_bus_dmamap_load_raw(bus_dma_tag_t t, bus_dmamap_t map, bus_dma_segment_t *segs,
    int nsegs, bus_size_t size, int flags)
{
	bus_addr_t paddr, baddr, bmask, lastaddr = 0;
	bus_size_t plen, sgsize, mapsize;
	int first = 1;
	int i, seg = 0;

	/*
	 * Make sure that on error condition we return "no valid mappings".
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;

	if (nsegs > map->_dm_segcnt || size > map->_dm_size)
		return (EINVAL);

	mapsize = size;
	bmask  = ~(map->_dm_boundary - 1);

	for (i = 0; i < nsegs && size > 0; i++) {
		paddr = segs[i].ds_addr;
		plen = MIN(segs[i].ds_len, size);

		while (plen > 0) {
			/*
			 * Compute the segment size, and adjust counts.
			 */
			sgsize = PAGE_SIZE - ((u_long)paddr & PGOFSET);
			if (plen < sgsize)
				sgsize = plen;

			/*
			 * Make sure we don't cross any boundaries.
			 */
			if (map->_dm_boundary > 0) {
				baddr = (paddr + map->_dm_boundary) & bmask;
				if (sgsize > (baddr - paddr))
					sgsize = (baddr - paddr);
			}

			/*
			 * Insert chunk into a segment, coalescing with
			 * previous segment if possible.
			 */
			if (first) {
				map->dm_segs[seg].ds_addr = paddr;
				map->dm_segs[seg].ds_len = sgsize;
				first = 0;
			} else {
				if (paddr == lastaddr &&
				    (map->dm_segs[seg].ds_len + sgsize) <=
				     map->_dm_maxsegsz &&
				    (map->_dm_boundary == 0 ||
				     (map->dm_segs[seg].ds_addr & bmask) ==
				     (paddr & bmask)))
					map->dm_segs[seg].ds_len += sgsize;
				else {
					if (++seg >= map->_dm_segcnt)
						return (EINVAL);
					map->dm_segs[seg].ds_addr = paddr;
					map->dm_segs[seg].ds_len = sgsize;
				}
			}

			paddr += sgsize;
			plen -= sgsize;
			size -= sgsize;

			lastaddr = paddr;
		}
	}

	map->dm_mapsize = mapsize;
	map->dm_nsegs = seg + 1;
	return (0);
}

/*
 * Common function for unloading a DMA map.  May be called by
 * bus-specific DMA map unload functions.
 */
void
_bus_dmamap_unload(bus_dma_tag_t t, bus_dmamap_t map)
{

	/*
	 * No resources to free; just mark the mappings as
	 * invalid.
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;
}

/*
 * Common function for DMA map synchronization.  May be called
 * by bus-specific DMA map synchronization functions.
 */
void
_bus_dmamap_sync(bus_dma_tag_t t, bus_dmamap_t map, bus_addr_t addr,
    bus_size_t size, int op)
{
	/* Nothing to do here. */
	__asm volatile("" : : : "memory");
}

/*
 * Common function for DMA-safe memory allocation.  May be called
 * by bus-specific DMA memory allocation functions.
 */
int
_bus_dmamem_alloc(bus_dma_tag_t t, bus_size_t size, bus_size_t alignment,
    bus_size_t boundary, bus_dma_segment_t *segs, int nsegs, int *rsegs,
    int flags)
{

	return (_bus_dmamem_alloc_range(t, size, alignment, boundary,
	    segs, nsegs, rsegs, flags, (bus_addr_t)0, (bus_addr_t)-1));
}

/*
 * Common function for freeing DMA-safe memory.  May be called by
 * bus-specific DMA memory free functions.
 */
void
_bus_dmamem_free(bus_dma_tag_t t, bus_dma_segment_t *segs, int nsegs)
{
	struct vm_page *m;
	bus_addr_t addr;
	struct pglist mlist;
	int curseg;

	/*
	 * Build a list of pages to free back to the VM system.
	 */
	TAILQ_INIT(&mlist);
	for (curseg = 0; curseg < nsegs; curseg++) {
		for (addr = segs[curseg].ds_addr;
		    addr < (segs[curseg].ds_addr + segs[curseg].ds_len);
		    addr += PAGE_SIZE) {
			m = PHYS_TO_VM_PAGE(addr);
			TAILQ_INSERT_TAIL(&mlist, m, pageq);
		}
	}

	uvm_pglistfree(&mlist);
}

/*
 * Common function for mapping DMA-safe memory.  May be called by
 * bus-specific DMA memory map functions.
 */
int
_bus_dmamem_map(bus_dma_tag_t t, bus_dma_segment_t *segs, int nsegs,
    size_t size, caddr_t *kvap, int flags)
{
	vaddr_t va, sva;
	size_t ssize;
	bus_addr_t addr;
	int curseg, pmapflags = 0, ret;
	const struct kmem_dyn_mode *kd;

	if (flags & BUS_DMA_NOCACHE)
		pmapflags |= PMAP_NOCACHE;

	size = round_page(size);
	kd = flags & BUS_DMA_NOWAIT ? &kd_trylock : &kd_waitok;
	va = (vaddr_t)km_alloc(size, &kv_any, &kp_none, kd);
	if (va == 0)
		return (ENOMEM);

	*kvap = (caddr_t)va;

	sva = va;
	ssize = size;
	for (curseg = 0; curseg < nsegs; curseg++) {
		for (addr = segs[curseg].ds_addr;
		    addr < (segs[curseg].ds_addr + segs[curseg].ds_len);
		    addr += PAGE_SIZE, va += PAGE_SIZE, size -= PAGE_SIZE) {
			if (size == 0)
				panic("_bus_dmamem_map: size botch");
			/*
			 * we don't want pmap to panic here if it can't
			 * alloc
			 */
			ret = pmap_enter(pmap_kernel(), va, addr | pmapflags,
			    PROT_READ | PROT_WRITE,
			    PROT_READ | PROT_WRITE | PMAP_WIRED | PMAP_CANFAIL);
			if (ret) {
				pmap_update(pmap_kernel());
				km_free((void *)sva, ssize, &kv_any, &kp_none);
				return (ret);
			}

		}
	}
	pmap_update(pmap_kernel());

	return (0);
}

/*
 * Common function for unmapping DMA-safe memory.  May be called by
 * bus-specific DMA memory unmapping functions.
 */
void
_bus_dmamem_unmap(bus_dma_tag_t t, caddr_t kva, size_t size)
{

#ifdef DIAGNOSTIC
	if ((u_long)kva & PGOFSET)
		panic("_bus_dmamem_unmap");
#endif

	km_free(kva, round_page(size), &kv_any, &kp_none);
}

/*
 * Common function for mmap(2)'ing DMA-safe memory.  May be called by
 * bus-specific DMA mmap(2)'ing functions.
 */
paddr_t
_bus_dmamem_mmap(bus_dma_tag_t t, bus_dma_segment_t *segs, int nsegs, off_t off,
    int prot, int flags)
{
	int i, pmapflags = 0;

	if (flags & BUS_DMA_NOCACHE)
		pmapflags |= PMAP_NOCACHE;

	for (i = 0; i < nsegs; i++) {
#ifdef DIAGNOSTIC
		if (off & PGOFSET)
			panic("_bus_dmamem_mmap: offset unaligned");
		if (segs[i].ds_addr & PGOFSET)
			panic("_bus_dmamem_mmap: segment unaligned");
		if (segs[i].ds_len & PGOFSET)
			panic("_bus_dmamem_mmap: segment size not multiple"
			    " of page size");
#endif
		if (off >= segs[i].ds_len) {
			off -= segs[i].ds_len;
			continue;
		}

		return ((segs[i].ds_addr + off) | pmapflags);
	}

	/* Page not found. */
	return (-1);
}

/**********************************************************************
 * DMA utility functions
 **********************************************************************/
/*
 * Utility function to load a linear buffer.  lastaddrp holds state
 * between invocations (for multiple-buffer loads).  segp contains
 * the starting segment on entrance, and the ending segment on exit.
 * first indicates if this is the first invocation of this function.
 */
int
_bus_dmamap_load_buffer(bus_dma_tag_t t, bus_dmamap_t map, void *buf,
    bus_size_t buflen, struct proc *p, int flags, paddr_t *lastaddrp, int *segp,
    int first)
{
	bus_size_t sgsize;
	bus_addr_t curaddr, lastaddr, baddr, bmask;
	vaddr_t vaddr = (vaddr_t)buf;
	int seg;
	pmap_t pmap;

	if (p != NULL)
		pmap = p->p_vmspace->vm_map.pmap;
	else
		pmap = pmap_kernel();

	lastaddr = *lastaddrp;
	bmask  = ~(map->_dm_boundary - 1);

	for (seg = *segp; buflen > 0 ; ) {
		/*
		 * Get the physical address for this segment.
		 */
		pmap_extract(pmap, vaddr, (paddr_t *)&curaddr);

		/*
		 * Compute the segment size, and adjust counts.
		 */
		sgsize = PAGE_SIZE - ((u_long)vaddr & PGOFSET);
		if (buflen < sgsize)
			sgsize = buflen;

		/*
		 * Make sure we don't cross any boundaries.
		 */
		if (map->_dm_boundary > 0) {
			baddr = (curaddr + map->_dm_boundary) & bmask;
			if (sgsize > (baddr - curaddr))
				sgsize = (baddr - curaddr);
		}

		/*
		 * Insert chunk into a segment, coalescing with
		 * previous segment if possible.
		 */
		if (first) {
			map->dm_segs[seg].ds_addr = curaddr;
			map->dm_segs[seg].ds_len = sgsize;
			first = 0;
		} else {
			if (curaddr == lastaddr &&
			    (map->dm_segs[seg].ds_len + sgsize) <=
			     map->_dm_maxsegsz &&
			    (map->_dm_boundary == 0 ||
			     (map->dm_segs[seg].ds_addr & bmask) ==
			     (curaddr & bmask)))
				map->dm_segs[seg].ds_len += sgsize;
			else {
				if (++seg >= map->_dm_segcnt)
					break;
				map->dm_segs[seg].ds_addr = curaddr;
				map->dm_segs[seg].ds_len = sgsize;
			}
		}

		lastaddr = curaddr + sgsize;
		vaddr += sgsize;
		buflen -= sgsize;
	}

	*segp = seg;
	*lastaddrp = lastaddr;

	/*
	 * Did we fit?
	 */
	if (buflen != 0)
		return (EFBIG);		/* XXX better return value here? */
	return (0);
}

/*
 * Allocate physical memory from the given physical address range.
 * Called by DMA-safe memory allocation methods.
 */
int
_bus_dmamem_alloc_range(bus_dma_tag_t t, bus_size_t size, bus_size_t alignment,
    bus_size_t boundary, bus_dma_segment_t *segs, int nsegs, int *rsegs,
    int flags, bus_addr_t low, bus_addr_t high)
{
	paddr_t curaddr, lastaddr;
	struct vm_page *m;
	struct pglist mlist;
	int curseg, error, plaflag;

	/* Always round the size. */
	size = round_page(size);

	segs[0]._ds_boundary = boundary;
	segs[0]._ds_align = alignment;

	/*
	 * Allocate pages from the VM system.
	 * For non-ISA mappings first try higher memory segments.
	 */
	plaflag = flags & BUS_DMA_NOWAIT ? UVM_PLA_NOWAIT : UVM_PLA_WAITOK;
	if (flags & BUS_DMA_ZERO)
		plaflag |= UVM_PLA_ZERO;

	TAILQ_INIT(&mlist);
	error = uvm_pglistalloc(size, low, high, alignment, boundary,
	    &mlist, nsegs, plaflag);
	if (error)
		return (error);

	/*
	 * Compute the location, size, and number of segments actually
	 * returned by the VM code.
	 */
	m = TAILQ_FIRST(&mlist);
	curseg = 0;
	lastaddr = segs[curseg].ds_addr = VM_PAGE_TO_PHYS(m);
	segs[curseg].ds_len = PAGE_SIZE;

	for (m = TAILQ_NEXT(m, pageq); m != NULL; m = TAILQ_NEXT(m, pageq)) {
		curaddr = VM_PAGE_TO_PHYS(m);
#ifdef DIAGNOSTIC
		if (curseg == nsegs) {
			printf("uvm_pglistalloc returned too many\n");
			panic("_bus_dmamem_alloc_range");
		}
		if (curaddr < low || curaddr >= high) {
			printf("uvm_pglistalloc returned non-sensical"
			    " address 0x%lx\n", curaddr);
			panic("_bus_dmamem_alloc_range");
		}
#endif
		if (curaddr == (lastaddr + PAGE_SIZE))
			segs[curseg].ds_len += PAGE_SIZE;
		else {
			curseg++;
			segs[curseg].ds_addr = curaddr;
			segs[curseg].ds_len = PAGE_SIZE;
		}
		lastaddr = curaddr;
	}
	*rsegs = curseg + 1;

	return (0);
}
@


1.34
log
@Add bus_dmamem_alloc_range(9) to allow drivers to allocate DMA'able memory
within a range that is more (or less) restrictive than the default range.

ok deraadt@@, stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.33 2014/11/16 12:30:57 deraadt Exp $	*/
d134 5
a138 2

	free(map, M_DEVBUF, 0);
@


1.33
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.32 2014/07/12 18:44:41 tedu Exp $	*/
d390 1
a390 1
	    segs, nsegs, rsegs, flags, (paddr_t)0, (paddr_t)-1));
d622 1
a622 1
    int flags, paddr_t low, paddr_t high)
@


1.32
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.31 2014/07/11 14:41:00 mpi Exp $	*/
d459 2
a460 2
			    VM_PROT_READ | VM_PROT_WRITE, VM_PROT_READ |
			    VM_PROT_WRITE | PMAP_WIRED | PMAP_CANFAIL);
@


1.31
log
@Use the correct type, found by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.30 2014/07/11 09:36:26 mpi Exp $	*/
d135 1
a135 1
	free(map, M_DEVBUF);
@


1.30
log
@Convert bus_dmamem_map(9) to km_alloc(9) in order to make it fail and
not sleep if the allocator cannot obtain a lock when BUS_DMA_NOWAIT is
specified.

idea and inputs from kettenis@@, ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.29 2014/03/29 18:09:29 guenther Exp $	*/
d433 1
a433 1
	struct kmem_pa_mode *kd;
@


1.29
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.28 2014/03/12 13:00:35 kettenis Exp $	*/
d433 1
d439 2
a440 1
	va = uvm_km_valloc(kernel_map, size);
d463 1
a463 1
				uvm_km_free(kernel_map, sva, ssize);
d487 1
a487 2
	size = round_page(size);
	uvm_km_free(kernel_map, (vaddr_t)kva, size);
@


1.28
log
@Add compiler barier to bus_dmamap_sync(9), just in case compiler/linker
optimizations really become as evil as some people claim, or some poor
soul tries to optimize things by inlining this function.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.27 2013/12/12 21:04:50 kettenis Exp $	*/
d376 1
a376 1
	__asm __volatile("" : : : "memory");
@


1.27
log
@Remove the scatter/gather dma implementation as it is no longer used.

ok krw@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.26 2012/12/08 12:04:21 mpi Exp $	*/
d376 1
@


1.26
log
@Make bus_dmamem_mmap(9) honor BUS_DMA_NOCACHE.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.25 2011/06/23 20:44:39 ariane Exp $	*/
a631 4
	if (flags & BUS_DMA_SG) {
		boundary = 0;
		alignment = 0;
	}
@


1.25
log
@Fix the error path in bus_dmamem_map.
As discussed on icb: remove the comment,
remove pmap_remove (uvm_km_free does that for us).

ok oga@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.24 2010/12/26 15:40:59 miod Exp $	*/
d496 4
a499 1
	int i;
d516 1
a516 1
		return (segs[i].ds_addr + off);
@


1.24
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.23 2010/11/20 20:33:24 miod Exp $	*/
a458 5
				/*
				 * Clean up after ourselves.
				 * XXX uvm_wait on WAITOK
				 */
				pmap_remove(pmap_kernel(), sva, va - PAGE_SIZE);
d460 1
a460 2

				uvm_km_free(kernel_map, va, ssize);
@


1.23
log
@This is a first step towards getting rid of avail_start and avail_end in the
kernel, currently limited to low-hanging fruit: these variables were used
by bus_dma to specify the range in which to allocate memory, back when
uvm_pglistalloc() was stupid and would not walk the vm_physseg[].

Nowadays, except on some platforms for early initialization, these variables
are not used, or do not need to be global variables. Therefore:
- remove `extern' declarations of avail_start and avail_end (or close cousins,
  such as arm physical_start and physical_end) from files which no longer need
  to use them.
- make them local variables whenever possible.
- remove them when they are assigned to but no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.22 2010/09/06 19:05:48 kettenis Exp $	*/
d519 1
a519 1
		return (atop(segs[i].ds_addr + off));
@


1.22
log
@Make sure bus_dmamap_sync() always involves a function call, to prevent the
compiler from doing stupid things like reordering stores around it.  There is
some debate whether this will be enough for newer versions of GCC and LLVM.
If this is indeed deemed necessary, this will be addressed in a future diff.

ok miod@@, oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.21 2010/03/27 00:37:15 oga Exp $	*/
a79 2

extern paddr_t avail_end;
@


1.21
log
@in _bus_dmamem_map use PMAP_CANFAIL for mapping in the pages.

bus_dmamem_map can fail for a myriad of reasons already, so panicing if
pmap fails is just impolite. other archs will be forthcoming.

ok krw@@, art@@ before lock
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.20 2010/03/25 22:44:57 oga Exp $	*/
d367 11
@


1.20
log
@Make the i386 and amd64 bus_dma functions for isa less stupid:

1) when you have a wrapper function in a dmatag that just calls the
_bus_dmamem original, you don't need it, just put the original function
in the tag

2) don't trunc_page the avail_end/ISA_BOUNCE_THRESHOLD stuff (see icb
for a discussion of why this is wrong about 00:00 gmt). make i386 and
amd64 both do this the same (the amd64 way is cleaner and makes the
third diff actually possible without a lot of pain). just do
dmamem_alloc_range(0, threshold) and if that fails do a alloc_range(0,
-1) and assume we'll bounce to pick up the pieces. Also using avail_end
for alloc_range is not nice (miod has been trying to avoid these abuses
iirc), so just use (paddr_t)-1, which is equivalent since you want "any"
memory.

3) now this is the funny one. consider point 2. then considering why
using the same bloody function to allocate your bouncebuffer is just
f'ing wrong. instead allocate with alloc_range(0, threshold) to make
sure that our bouncebuffer is actually uner 16megs.

ok deraadt@@, kettenis@@. Tested by several people.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.19 2009/11/03 17:21:46 damien Exp $	*/
d419 2
a420 1
	vaddr_t va;
d422 1
a422 1
	int curseg, pmapflags = 0;
d434 2
d442 5
a446 1
			pmap_enter(pmap_kernel(), va, addr | pmapflags,
d448 13
a460 1
			    VM_PROT_WRITE | PMAP_WIRED);
@


1.19
log
@fix previous commit.
do not ignore BUS_DMA_NOCACHE (used by some variants of auich and
ati drm only).

ok kettenis
"That looks right" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.18 2009/08/11 17:15:54 oga Exp $	*/
d621 2
a622 5
	if (high <= ISA_DMA_BOUNCE_THRESHOLD || (error = uvm_pglistalloc(size,
	    round_page(ISA_DMA_BOUNCE_THRESHOLD), high, alignment, boundary,
	    &mlist, nsegs, plaflag)))
		error = uvm_pglistalloc(size, low, high, alignment, boundary,
		    &mlist, nsegs, plaflag);
@


1.18
log
@fix some stupidity in x86 bus_space_map.

right now, we do a pmap_kenter_pa(), we then get the pte (behind pmap's
back) and check for the cache inhibit bit (if needed). If it isn't what
we want (this is the normal case) then we change it ourselves, and do a
manual tlb shootdown (i386 was a bit more stupid about it than amd64,
too).

Instead, make it so that like on some other archs (sparc64 comes to
mind) you can pass in flags in the low bits of the physical address,
pmap then does everything correctly for you.

Discovered this when I had some code doing a lot of bus_space_maps(), it
was incredibly slow, and profilling was dominated by
pmap_tlb_shootwait();

discussed with kettenis@@, miod@@, toby@@ and art@@.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.17 2009/06/06 05:43:13 oga Exp $	*/
d439 1
a439 1
			pmap_enter(pmap_kernel(), va, addr,
@


1.17
log
@It might be a good idea to commit all the diff. *sigh*.

now this builds
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.16 2009/04/20 00:42:06 oga Exp $	*/
d421 1
a421 1
	int curseg, pmapflags = VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED;
d440 2
a441 1
			    VM_PROT_READ | VM_PROT_WRITE, pmapflags);
@


1.16
log
@Add a BUS_DMA_ZERO flag for bus_dmamem_alloc() to return zeroed memory.

Saves every damned driver calling bzero(), and continues the M_ZERO,
PR_ZERO symmetry.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.15 2009/04/15 03:35:26 oga Exp $	*/
d604 7
a610 1
	TAILQ_INIT(&mlist);
d619 1
@


1.15
log
@fix properly; size gets decremented while we check the segments, so save it so
when we setmapsize it's not zero.

*sigh*
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.14 2009/04/15 02:03:33 oga Exp $	*/
d610 2
@


1.14
log
@make load_raw do the same as the others and set mapsize and nsegs to
zero so that we return an empty map on error.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.13 2009/04/15 01:58:27 oga Exp $	*/
d279 1
a279 1
	bus_size_t plen, sgsize;
d292 1
d348 1
a348 1
	map->dm_mapsize = size;
@


1.13
log
@bus_dmamap_load_raw didn't set map->dm_mapsize on successful load.

I just spent five hours looking in the wrong place because of this.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.12 2009/04/14 16:01:04 oga Exp $	*/
d282 6
@


1.12
log
@Convert the waitok field of uvm_pglistalloc to "flags", more will be added soon.

For the possibility of sleeping, the first two flags are UVM_PLA_WAITOK
and UVM_PLA_NOWAIT. It is an error not to show intention, so assert that
one of the two is provided. Switch over every caller in the tree to
using the appropriate flag.

ok art@@, ariane@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.11 2009/04/09 03:08:36 dlg Exp $	*/
d341 1
@


1.11
log
@in bus_dmamap_load_raw, only map the requested number of bytes into the
dmamap rather than all the bytes that are described by the sg list we're
mapping.

tested on iwn by me and beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.18 2009/04/04 13:48:55 dlg Exp $	*/
d591 1
a591 1
	int curseg, error;
d601 2
d605 1
a605 1
	    &mlist, nsegs, (flags & BUS_DMA_NOWAIT) == 0)))
d607 1
a607 1
		    &mlist, nsegs, (flags & BUS_DMA_NOWAIT) == 0);
@


1.10
log
@unrevert marco's revert of my bus_dmamap_load_raw change now that i found
the bug in it. bugfix will be committed next.

make bus_dmamap_load_raw respect the constraints of the dmamap we're
loading the raw memory into, particularly the segment size constraint.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.8 2009/04/04 14:07:22 dlg Exp $	*/
d288 1
a288 1
	for (i = 0; i < nsegs; i++) {
d290 1
a290 1
		plen = segs[i].ds_len;
a332 1
			lastaddr = paddr + sgsize;
d335 3
@


1.9
log
@Rever _raw change from dlg because it breaks iwn.

ok oga
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.7 2009/03/30 18:12:24 deraadt Exp $	*/
d278 5
d286 50
a335 13
	/*
	 * Make sure we don't cross any boundaries.
	 */
	if (map->_dm_boundary) {
		bus_addr_t bmask = ~(map->_dm_boundary - 1);
		int i;

		for (i = 0; i < nsegs; i++) {
			if (segs[i].ds_len > map->_dm_maxsegsz)
				return (EINVAL);
			if ((segs[i].ds_addr & bmask) !=
			    ((segs[i].ds_addr + segs[i].ds_len - 1) & bmask))
				return (EINVAL);
d339 1
a339 2
	bcopy(segs, map->dm_segs, nsegs * sizeof(*segs));
	map->dm_nsegs = nsegs;
@


1.8
log
@make bus_dmamap_load_raw respect the constraints of the dmamap we're
loading the raw memory into.

similair to the change made to src/sys/arch/amd64/amd6/bus_dma.c 1.18
@
text
@a277 5
	bus_addr_t paddr, baddr, bmask, lastaddr = 0;
	bus_size_t plen, sgsize;
	int first = 1;
	int i, seg = 0;

d281 13
a293 50
	bmask  = ~(map->_dm_boundary - 1);

	for (i = 0; i < nsegs; i++) {
		paddr = segs[i].ds_addr;
		plen = segs[i].ds_len;

		while (plen > 0) {
			/*
			 * Compute the segment size, and adjust counts.
			 */
			sgsize = PAGE_SIZE - ((u_long)paddr & PGOFSET);
			if (plen < sgsize)
				sgsize = plen;

			/*
			 * Make sure we don't cross any boundaries.
			 */
			if (map->_dm_boundary > 0) {
				baddr = (paddr + map->_dm_boundary) & bmask;
				if (sgsize > (baddr - paddr))
					sgsize = (baddr - paddr);
			}

			/*
			 * Insert chunk into a segment, coalescing with
			 * previous segment if possible.
			 */
			if (first) {
				map->dm_segs[seg].ds_addr = paddr;
				map->dm_segs[seg].ds_len = sgsize;
				first = 0;
			} else {
				if (paddr == lastaddr &&
				    (map->dm_segs[seg].ds_len + sgsize) <=
				     map->_dm_maxsegsz &&
				    (map->_dm_boundary == 0 ||
				     (map->dm_segs[seg].ds_addr & bmask) ==
				     (paddr & bmask)))
					map->dm_segs[seg].ds_len += sgsize;
				else {
					if (++seg >= map->_dm_segcnt)
						return (EINVAL);
					map->dm_segs[seg].ds_addr = paddr;
					map->dm_segs[seg].ds_len = sgsize;
				}
			}

			lastaddr = paddr + sgsize;
			paddr += sgsize;
			plen -= sgsize;
d297 2
a298 1
	map->dm_nsegs = seg + 1;
@


1.7
log
@make the code look the same; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.6 2009/03/30 17:43:15 ratchov Exp $	*/
d278 5
d286 50
a335 13
	/*
	 * Make sure we don't cross any boundaries.
	 */
	if (map->_dm_boundary) {
		bus_addr_t bmask = ~(map->_dm_boundary - 1);
		int i;

		for (i = 0; i < nsegs; i++) {
			if (segs[i].ds_len > map->_dm_maxsegsz)
				return (EINVAL);
			if ((segs[i].ds_addr & bmask) !=
			    ((segs[i].ds_addr + segs[i].ds_len - 1) & bmask))
				return (EINVAL);
d339 1
a339 2
	bcopy(segs, map->dm_segs, nsegs * sizeof(*segs));
	map->dm_nsegs = nsegs;
@


1.6
log
@don't use pmapflags unitialized. Fixes envy(4) consuming 80% CPU
when recording
ok oga, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.5 2009/03/10 15:03:17 oga Exp $	*/
d370 1
a370 1
	int curseg, pmapflags;
a371 1
	pmapflags = VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED;
@


1.5
log
@remove the _BUS_DMA_PRIVATE define from amd64 and i386.

a define needed to get to ``private'' functions that needs to be defined
5 or more times isn't much use and may cause namespace issues anyway.
Other archs will probably follow.

Discussed in portugal.  "Hell yes" weingart@@, ok kettenis@@, no
objections miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.4 2009/03/07 15:34:34 miod Exp $	*/
d372 1
d390 1
a390 3
			    VM_PROT_READ | VM_PROT_WRITE,
			    VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED |
			    pmapflags);
@


1.4
log
@When allocating memory in bus_dmamem_alloc() with uvm_pglistalloc(), do not
try to be smart for the address range, uvm_pglistalloc() is smart enough
nowadays.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.3 2009/02/05 01:13:21 oga Exp $	*/
a73 1
#define _BUS_DMA_PRIVATE
@


1.3
log
@add MD PMAP_NOCACHE flag to i386 and use it to implement the
BUS_DMA_NOCACHE flag with guarantees that the dma memory will be mapped
uncached. Some broken/odd hardware needs this.

discussion with miod, toby, art and kettenis. ok miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.2 2008/12/04 19:25:38 oga Exp $	*/
d330 1
a330 1
	    segs, nsegs, rsegs, flags, 0, trunc_page(avail_end)));
@


1.3.2.1
log
@When DMA'able memory is mapped by device drivers, the mapping flags and
protection are partially uninitialized.  Depending on the calling context,
this may cause devices to misbehave, like audio(4) to stutter, but other
anomalies might be observed for other device types.

from current, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.3 2009/02/05 01:13:21 oga Exp $	*/
a372 1
	pmapflags = VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED;
d390 3
a392 1
			    VM_PROT_READ | VM_PROT_WRITE, pmapflags);
@


1.2
log
@*sigh* unbreak the tree.

Some old diff snuck into this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_dma.c,v 1.1 2008/12/04 15:24:18 oga Exp $	*/
d371 4
a374 1
	int curseg;
d391 2
a392 1
			    VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED);
@


1.1
log
@Move the bus_dma generic functions out of the far-too-podgy machdep.c and
into bus_dma.c (a-la amd64).

Discussed with art and toby in coimbra. Ok mikeb.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 1
a95 1
	struct x86_bus_dmamap *map;
d111 1
a111 1
	mapsize = sizeof(struct x86_bus_dmamap) +
d117 1
a117 1
	map = (struct x86_bus_dmamap *)mapstore;
@

