head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.38
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.34
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.30
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.32
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.24
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.28
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.26
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2008.06.26.05.42.10;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.21.19.13.55;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.17.03.42.14;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.04.08.57.47;	author niklas;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.05.08.17.41.58;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.08.17.02.13;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.28.18.52.26;	author deraadt;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	96.06.22.21.52.53;	author tholo;	state Exp;
branches
	1.1.16.1;
next	;

1.1.16.1
date	2001.04.18.16.07.18;	author niklas;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2001.07.04.10.16.35;	author niklas;	state Exp;
branches;
next	1.1.16.3;

1.1.16.3
date	2001.10.31.03.01.12;	author nate;	state Exp;
branches;
next	1.1.16.4;

1.1.16.4
date	2003.05.13.19.42.07;	author ho;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.08.18.29.07;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.08.23.12.42;	author jason;	state Exp;
branches;
next	;

1.5.4.1
date	2003.05.19.21.45.11;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: in_cksum.s,v 1.7 2005/05/21 19:13:55 brad Exp $	*/
/*	$NetBSD: in_cksum.S,v 1.2 2003/08/07 16:27:54 agc Exp $	*/

/*-
 * Copyright (c) 1998, 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/asm.h>
#include "assym.h"

/* LINTSTUB: include <sys/types.h> */
/* LINTSTUB: include <machine/param.h> */
/* LINTSTUB: include <sys/mbuf.h> */
/* LINTSTUB: include <netinet/in.h> */

/*
 * Checksum routine for Internet Protocol family headers.
 *
 * in_cksum(m, len)
 *
 * Registers used:
 * %eax = sum
 * %ebx = m->m_data
 * %cl = rotation count to unswap
 * %edx = m->m_len
 * %ebp = m
 * %esi = len
 */

#define	SWAP \
	roll	$8, %eax	; \
	xorb	$8, %cl

#define	UNSWAP \
	roll	%cl, %eax

#define	MOP \
	adcl	$0, %eax

#define	ADVANCE(n) \
	leal	n(%ebx), %ebx	; \
	leal	-n(%edx), %edx	; \

#define	ADDBYTE \
	SWAP			; \
	addb	(%ebx), %ah

#define	ADDWORD \
	addw	(%ebx), %ax

#define	ADD(n) \
	addl	n(%ebx), %eax

#define	ADC(n) \
	adcl	n(%ebx), %eax

#define	REDUCE \
	movzwl	%ax, %edx	; \
	shrl	$16, %eax	; \
	addw	%dx, %ax	; \
	adcw	$0, %ax


/* LINTSTUB: Func: int in4_cksum(struct mbuf *m, u_int8_t nxt, int off, int len) */
ENTRY(in4_cksum)
	pushl	%ebp
	pushl	%ebx
	pushl	%esi

	movl	16(%esp), %ebp
	movzbl	20(%esp), %eax		/* sum = nxt */
	movl	24(%esp), %edx		/* %edx = off */
	movl	28(%esp), %esi		/* %esi = len */
	testl	%eax, %eax
	jz	.Lmbuf_loop_0		/* skip if nxt == 0 */
	movl	M_DATA(%ebp), %ebx
	addl	%esi, %eax		/* sum += len */
	shll	$8, %eax		/* sum = htons(sum) */

	ADD(IP_SRC)			/* sum += ip->ip_src */
	ADC(IP_DST)			/* sum += ip->ip_dst */
	MOP
.Lmbuf_loop_0:
	testl	%ebp, %ebp
	jz	.Lout_of_mbufs

	movl	M_DATA(%ebp), %ebx	/* %ebx = m_data */
	movl	M_LEN(%ebp), %ecx	/* %ecx = m_len */
	movl	M_NEXT(%ebp), %ebp

	subl	%ecx, %edx		/* %edx = off - m_len */
	jnb	.Lmbuf_loop_0

	addl	%edx, %ebx		/* %ebx = m_data + off - m_len */
	negl	%edx			/* %edx = m_len - off */
	addl	%ecx, %ebx		/* %ebx = m_data + off */
	xorb	%cl, %cl

	/*
	 * The len == 0 case is handled really inefficiently, by going through
	 * the whole short_mbuf path once to get back to mbuf_loop_1 -- but
	 * this case never happens in practice, so it's sufficient that it
	 * doesn't explode.
	 */
	jmp	.Lin4_entry


/* LINTSTUB: Func: int in_cksum(struct mbuf *m, int len) */
ENTRY(in_cksum)
	pushl	%ebp
	pushl	%ebx
	pushl	%esi

	movl	16(%esp), %ebp
	movl	20(%esp), %esi
	xorl	%eax, %eax
	xorb	%cl, %cl

.Lmbuf_loop_1:
	testl	%esi, %esi
	jz	.Ldone

.Lmbuf_loop_2:
	testl	%ebp, %ebp
	jz	.Lout_of_mbufs

	movl	M_DATA(%ebp), %ebx
	movl	M_LEN(%ebp), %edx
	movl	M_NEXT(%ebp), %ebp

.Lin4_entry:
	cmpl	%esi, %edx
	jbe	1f
	movl	%esi, %edx

1:
	subl	%edx, %esi

	cmpl	$32, %edx
	jb	.Lshort_mbuf

	testb	$3, %bl
	jz	.Ldword_aligned

	testb	$1, %bl
	jz	.Lbyte_aligned

	ADDBYTE
	ADVANCE(1)
	MOP

	testb	$2, %bl
	jz	.Lword_aligned

.Lbyte_aligned:
	ADDWORD
	ADVANCE(2)
	MOP

.Lword_aligned:
.Ldword_aligned:
	testb	$4, %bl
	jnz	.Lqword_aligned

	ADD(0)
	ADVANCE(4)
	MOP

.Lqword_aligned:
	testb	$8, %bl
	jz	.Loword_aligned

	ADD(0)
	ADC(4)
	ADVANCE(8)
	MOP

.Loword_aligned:
	subl	$128, %edx
	jb	.Lfinished_128

.Lloop_128:
	ADD(12)
	ADC(0)
	ADC(4)
	ADC(8)
	ADC(28)
	ADC(16)
	ADC(20)
	ADC(24)
	ADC(44)
	ADC(32)
	ADC(36)
	ADC(40)
	ADC(60)
	ADC(48)
	ADC(52)
	ADC(56)
	ADC(76)
	ADC(64)
	ADC(68)
	ADC(72)
	ADC(92)
	ADC(80)
	ADC(84)
	ADC(88)
	ADC(108)
	ADC(96)
	ADC(100)
	ADC(104)
	ADC(124)
	ADC(112)
	ADC(116)
	ADC(120)
	leal	128(%ebx), %ebx
	MOP

	subl	$128, %edx
	jnb	.Lloop_128

.Lfinished_128:
	subl	$32-128, %edx
	jb	.Lfinished_32

.Lloop_32:
	ADD(12)
	ADC(0)
	ADC(4)
	ADC(8)
	ADC(28)
	ADC(16)
	ADC(20)
	ADC(24)
	leal	32(%ebx), %ebx
	MOP

	subl	$32, %edx
	jnb	.Lloop_32

.Lfinished_32:
.Lshort_mbuf:
	testb	$16, %dl
	jz	.Lfinished_16

	ADD(12)
	ADC(0)
	ADC(4)
	ADC(8)
	leal	16(%ebx), %ebx
	MOP

.Lfinished_16:
	testb	$8, %dl
	jz	.Lfinished_8

	ADD(0)
	ADC(4)
	leal	8(%ebx), %ebx
	MOP

.Lfinished_8:
	testb	$4, %dl
	jz	.Lfinished_4

	ADD(0)
	leal	4(%ebx), %ebx
	MOP

.Lfinished_4:
	testb	$3, %dl
	jz	.Lmbuf_loop_1

	testb	$2, %dl
	jz	.Lfinished_2

	ADDWORD
	leal	2(%ebx), %ebx
	MOP

	testb	$1, %dl
	jz	.Lfinished_1

.Lfinished_2:
	ADDBYTE
	MOP

.Lfinished_1:
.Lmbuf_done:
	testl	%esi, %esi
	jnz	.Lmbuf_loop_2

.Ldone:
	UNSWAP
	REDUCE
	notw	%ax

.Lreturn:
	popl	%esi
	popl	%ebx
	popl	%ebp
	ret

.Lout_of_mbufs:
	pushl	$1f
	call	_C_LABEL(printf)
	leal	4(%esp), %esp
	jmp	.Lreturn
1:
	.asciz	"cksum: out of data\n"
@


1.7
log
@add i386 optimized in4_cksum

From NetBSD

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: in_cksum.s,v 1.6 2003/04/17 03:42:14 drahn Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@i386 changes to move to ELF. asm cleanup. Change MAXDSIZ to 512M for 1Gsep.
DARPA funded work.
@
text
@d1 2
a2 1
/*	$OpenBSD: in_cksum.s,v 1.5 2001/07/04 08:57:47 niklas Exp $	*/
d4 2
a5 2
/*
 * Copyright (c) 1996 Dave Richards <richards@@zso.dec.com>
d8 3
d21 46
a66 14
 *	This product includes software developed by Dave Richards.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d68 1
d72 98
a169 1
		.text
d171 200
a370 198
		pushl	%ebp			# save %ebp
		pushl	%ebx			# save %ebx
		pushl	%esi			# save %esi
		pushl	%edi			# save %edi

		movl	20(%esp), %ebp		# %ebp := mp
		movl	24(%esp), %edi		# %edi := len
		xorl	%edx, %edx		# %edx := 0
		xorl	%ecx, %ecx		# %ecx := 0

in_cksum1:	orl	%edi, %edi		# if (%edi == 0)
		je	in_cksum47		#   goto in_cksum47

		orl	%ebp, %ebp		# if (%ebp == NULL)
		je	in_cksum49		#   panic()

		movl	M_DATA(%ebp), %esi	# %esi := %ebp->m_data
		movl	M_LEN(%ebp), %ebx	# %ebx := %ebp->m_len
		movl	M_NEXT(%ebp), %ebp	# %ebp := %ebp->m_next

		cmpl	%edi, %ebx		# %ebx := min(%ebx, %edi)
		jb	in_cksum3		#
		movl	%edi, %ebx		#

in_cksum3:	subl	%ebx, %edi		# %edi := %edi - %ebx

		cmpl	$4, %ebx		# if (%ebx < 4)
		jb	in_cksum42a		#   goto in_cksum42a

		movl	$3, %eax		# %eax := %esi & 3
		andl	%esi, %eax		#
		jmp	*table1(,%eax,4)	# switch (%eax)

in_cksum4:					# case 1:
		roll	$8, %edx		# byte swap
		xorb	$8, %cl			# re-align checksum
		addb	0(%esi), %dh		# checksum byte
		leal	-3(%ebx), %ebx		# %ebx := %ebx - 3
		adcw	1(%esi), %dx		# checksum word
		leal	3(%esi), %esi		# %esi := %esi + 3
		jmp	in_cksum7		# break

in_cksum5:					# case 2:
		addw	0(%esi), %dx		# checksum word
		leal	2(%esi), %esi		# %esi := %esi + 2
		leal	-2(%ebx), %ebx		# %ebx := %ebx - 2
		jmp	in_cksum7		# break

in_cksum6:					# case 3:
		roll	$8, %edx		# byte swap
		xorb	$8, %cl			# re-align checksum
		addb	0(%esi), %dh		# checksum byte
		leal	1(%esi), %esi		# %esi := %esi + 1
		leal	-1(%ebx), %ebx		# %ebx := %ebx - 1

in_cksum7:	adcl	$0, %edx		# complete checksum

in_cksum8:	movb	$3, %ch			# %ch := %bl & 3
		andb	%bl, %ch		#
		shrl	$2, %ebx		# %ebx := %ebx / 4
		je	in_cksum42		# ig (%ebx == 0)
						#   goto in_cksum42

in_cksum9:	movl	$31, %eax		# %eax := %ebx & 31
		andl	%ebx, %eax		#
		leal	(%esi,%eax,4), %esi	# %esi := %esi + %eax * 4
		jmp	*table2(,%eax,4)	# switch (%eax)

in_cksum10:	leal	128(%esi), %esi		# Ugh!
		movl	$32, %eax		# Ugh!
		adcl	-128(%esi), %edx	# checksum 128 bytes
in_cksum11:	adcl	-124(%esi), %edx	# checksum 124 bytes
in_cksum12:	adcl	-120(%esi), %edx	# checksum 120 bytes
in_cksum13:	adcl	-116(%esi), %edx	# checksum 116 bytes
in_cksum14:	adcl	-112(%esi), %edx	# checksum 112 bytes
in_cksum15:	adcl	-108(%esi), %edx	# checksum 108 bytes
in_cksum16:	adcl	-104(%esi), %edx	# checksum 104 bytes
in_cksum17:	adcl	-100(%esi), %edx	# checksum 100 bytes
in_cksum18:	adcl	-96(%esi), %edx		# checksum 96 bytes
in_cksum19:	adcl	-92(%esi), %edx		# checksum 92 bytes
in_cksum20:	adcl	-88(%esi), %edx		# checksum 88 bytes
in_cksum21:	adcl	-84(%esi), %edx		# checksum 84 bytes
in_cksum22:	adcl	-80(%esi), %edx		# checksum 80 bytes
in_cksum23:	adcl	-76(%esi), %edx		# checksum 76 bytes
in_cksum24:	adcl	-72(%esi), %edx		# checksum 72 bytes
in_cksum25:	adcl	-68(%esi), %edx		# checksum 68 bytes
in_cksum26:	adcl	-64(%esi), %edx		# checksum 64 bytes
in_cksum27:	adcl	-60(%esi), %edx		# checksum 60 bytes
in_cksum28:	adcl	-56(%esi), %edx		# checksum 56 bytes
in_cksum29:	adcl	-52(%esi), %edx		# checksum 52 bytes
in_cksum30:	adcl	-48(%esi), %edx		# checksum 48 bytes
in_cksum31:	adcl	-44(%esi), %edx		# checksum 44 bytes
in_cksum32:	adcl	-40(%esi), %edx		# checksum 40 bytes
in_cksum33:	adcl	-36(%esi), %edx		# checksum 36 bytes
in_cksum34:	adcl	-32(%esi), %edx		# checksum 32 bytes
in_cksum35:	adcl	-28(%esi), %edx		# checksum 28 bytes
in_cksum36:	adcl	-24(%esi), %edx		# checksum 24 bytes
in_cksum37:	adcl	-20(%esi), %edx		# checksum 20 bytes
in_cksum38:	adcl	-16(%esi), %edx		# checksum 16 bytes
in_cksum39:	adcl	-12(%esi), %edx		# checksum 12 bytes
in_cksum40:	adcl	-8(%esi), %edx		# checksum 8 bytes
in_cksum41:	adcl	-4(%esi), %edx		# checksum 4 bytes
		adcl	$0, %edx		# complete checksum

		subl	%eax, %ebx		# %ebx := %ebx - %eax
		jne	in_cksum9		# if (%ebx != 0)
						#   goto in_cksum9

in_cksum42:	movb	%ch, %bl		# %ebx := byte count
in_cksum42a:	jmp	*table3(,%ebx,4)	# switch (%ebx)

in_cksum43:					# case 1:
		roll	$8, %edx		# byte swap
		xorb	$8, %cl			# re-align checksum
		addb	0(%esi), %dh		# checksum byte
		jmp	in_cksum46		# break

in_cksum44:					# case 2:
		addw	0(%esi), %dx		# checksum word
		jmp	in_cksum46		# break

in_cksum45:					# case 3:
		xorb	$8, %cl			# re-align checksum
		addw	0(%esi), %dx		# checksum word
		adcw	$0, %dx			# complete checksum
		roll	$8, %edx		# byte swap
		addb	2(%esi), %dh		# checksum byte

in_cksum46:	adcl	$0, %edx		# complete checksum
		jmp	in_cksum1		# next mbuf

in_cksum47:	rorl	%cl, %edx		# re-align checksum
		movzwl	%dx, %eax		# add uppwe and lowe words
		shrl	$16, %edx		#
		addw	%dx, %ax		#
		adcw	$0, %ax			# complete checksum
		notw	%ax			# compute ones complement

in_cksum48:	popl	%edi			# restore %edi
		popl	%esi			# restore %esi
		popl	%ebx			# restore %ebx
		popl	%ebp			# restore %ebp
		ret				# return %eax

in_cksum49:	pushl	%edi			# len - bytes checksummed
		pushl	$warning		# push warning string
		call	_C_LABEL(printf)	# printf()
		leal	8(%esp), %esp		#
		jmp	in_cksum48		#

		.data

		.align	4

table1:		.long	in_cksum8		# 4-byte aligned
		.long	in_cksum4		# checksum 3 bytes
		.long	in_cksum5		# checksum 2 bytes
		.long	in_cksum6		# checksum 1 byte

table2:		.long	in_cksum10		# checksum 128 bytes
		.long	in_cksum41		# checksum 4 bytes
		.long	in_cksum40		# checksum 8 bytes
		.long	in_cksum39		# checksum 12 bytes
		.long	in_cksum38		# checksum 16 bytes
		.long	in_cksum37		# checksum 20 bytes
		.long	in_cksum36		# checksum 24 bytes
		.long	in_cksum35		# checksum 28 bytes
		.long	in_cksum34		# checksum 32 bytes
		.long	in_cksum33		# checksum 36 bytes
		.long	in_cksum32		# checksum 40 bytes
		.long	in_cksum31		# checksum 44 bytes
		.long	in_cksum30		# checksum 48 bytes
		.long	in_cksum29		# checksum 52 bytes
		.long	in_cksum28		# checksum 56 bytes
		.long	in_cksum27		# checksum 60 bytes
		.long	in_cksum26		# checksum 64 bytes
		.long	in_cksum25		# checksum 68 bytes
		.long	in_cksum24		# checksum 72 bytes
		.long	in_cksum23		# checksum 76 bytes
		.long	in_cksum22		# checksum 80 bytes
		.long	in_cksum21		# checksum 84 bytes
		.long	in_cksum20		# checksum 88 bytes
		.long	in_cksum19		# checksum 92 bytes
		.long	in_cksum18		# checksum 96 bytes
		.long	in_cksum17		# checksum 100 bytes
		.long	in_cksum16		# checksum 104 bytes
		.long	in_cksum15		# checksum 108 bytes
		.long	in_cksum14		# checksum 112 bytes
		.long	in_cksum13		# checksum 116 bytes
		.long	in_cksum12		# checksum 120 bytes
		.long	in_cksum11		# checksum 124 bytes

table3:		.long	in_cksum1		# next mbuf
		.long	in_cksum43		# checksum 1 byte
		.long	in_cksum44		# checksum 2 bytes
		.long	in_cksum45		# checksum 3 bytes

warning:	.asciz	"in_cksum: out of data by %u\n"
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d183 1
a183 1
		call	_printf			# printf()
d189 1
a189 1
		.align	2
@


1.5.4.1
log
@sync
@
text
@d183 1
a183 1
		call	_C_LABEL(printf)	# printf()
d189 1
a189 1
		.align	4
@


1.4
log
@fix preposition in the printf msg
@
text
@d1 2
@


1.3
log
@on `out of data' condition print a warning and exit w/
whatever current checksum we have gotten accumulated.
this is somewhat conformant w/ what other archs are doing.
from Camiel Dobbelaar <cd@@sentia.nl>
@
text
@d232 1
a232 1
warning:	.asciz	"in_cksum: out of data at %u\n"
@


1.2
log
@repair panic message; bugfix@@163.net
@
text
@d179 4
a182 3
in_cksum49:	pushl	$panic			# push panic string
		call	_panic			# panic()
		leal	4(%esp), %esp		#
d232 1
a232 1
panic:		.asciz	"in_cksum: mp == NULL"
@


1.2.4.1
log
@Pull in patch from current:
Fix (mickey):
-- on `out of data' condition print a warning and exit w/
whatever current checksum we have gotten accumulated.
this is somewhat conformant w/ what other archs are doing.
from Camiel Dobbelaar <cd@@sentia.nl>
-- fix preposition in the printf msg
@
text
@d179 3
a181 4
in_cksum49:	pushl	%edi			# len - bytes checksummed
		pushl	$warning		# push warning string
		call	_printf			# printf()
		leal	8(%esp), %esp		#
d231 1
a231 1
warning:	.asciz	"in_cksum: out of data by %u\n"
@


1.2.2.1
log
@Pull in patches from current:
Fix (mickey):
-- on `out of data' condition print a warning and exit w/
whatever current checksum we have gotten accumulated.
this is somewhat conformant w/ what other archs are doing.
from Camiel Dobbelaar <cd@@sentia.nl>
-- fix preposition in the printf msg
@
text
@d179 3
a181 4
in_cksum49:	pushl	%edi			# len - bytes checksummed
		pushl	$warning		# push warning string
		call	_printf			# printf()
		leal	8(%esp), %esp		#
d231 1
a231 1
warning:	.asciz	"in_cksum: out of data by %u\n"
@


1.1
log
@Assembly version of in_cksum by Dave Richards.  >20% faster in the usual
cases, up to 62% faster in other cases.
@
text
@d179 1
a179 1
in_cksum49:	pushl	panic			# push panic string
@


1.1.16.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d179 1
a179 1
in_cksum49:	pushl	$panic			# push panic string
@


1.1.16.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d179 3
a181 4
in_cksum49:	pushl	%edi			# len - bytes checksummed
		pushl	$warning		# push warning string
		call	_printf			# printf()
		leal	8(%esp), %esp		#
d231 1
a231 1
warning:	.asciz	"in_cksum: out of data by %u\n"
@


1.1.16.3
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

@


1.1.16.4
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_cksum.s,v 1.1.16.3 2001/10/31 03:01:12 nate Exp $	*/
d183 1
a183 1
		call	_C_LABEL(printf)	# printf()
d189 1
a189 1
		.align	4
@


