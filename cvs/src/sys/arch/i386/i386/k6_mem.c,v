head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.26
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.18
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.10
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.3;
locks; strict;
comment	@ * @;


1.12
date	2015.09.08.04.28.34;	author semarie;	state Exp;
branches;
next	1.11;
commitid	Ajpcv6B3UUP5Q4Cd;

1.11
date	2010.02.23.21.54.53;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.29.17.11.30;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.15.00.34.44;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.07.15.00.19;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.10.18.00.48;	author gwk;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.11.13.21.11;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.32;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.22.00.02.12;	author deraadt;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	99.11.24.01.43.32;	author deraadt;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.11.23.22.42.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.11.20.11.11.28;	author matthieu;	state Exp;
branches;
next	;

1.3.2.1
date	2000.03.24.09.07.36;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	;

1.4.10.1
date	2002.06.11.03.35.53;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@convert several malloc(9) to mallocarray(9).

ok deraadt@@ guenther@@ "re-wrap the long lines" kettenis@@
@
text
@/* $OpenBSD: k6_mem.c,v 1.11 2010/02/23 21:54:53 kettenis Exp $ */
/*-
 * Copyright (c) 1999 Brian Fundakowski Feldman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/i386/i386/k6_mem.c,v 1.4 1999/09/05 15:45:57 green Exp $
 *
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/ioccom.h>
#include <sys/malloc.h>
#include <sys/memrange.h>

#include <machine/cpufunc.h>
#include <machine/specialreg.h>

/*
 * A K6-2 MTRR is defined as the highest 15 bits having the address, the next
 * 15 having the mask, the 1st bit being "write-combining" and the 0th bit
 * being "uncacheable".
 *
 *	Address		    Mask	WC  UC
 * | XXXXXXXXXXXXXXX | XXXXXXXXXXXXXXX | X | X |
 *
 * There are two of these in the 64-bit UWCCR.
 */
#define UWCCR 0xc0000085

#define k6_reg_get(reg, addr, mask, wc, uc)	do {			\
		addr = (reg) & 0xfffe0000;				\
		mask = ((reg) & 0x1fffc) >> 2;				\
		wc = ((reg) & 0x2) >> 1;				\
		uc = (reg) & 0x1;					\
	} while (0)

#define k6_reg_make(addr, mask, wc, uc) 				\
		((addr) | ((mask) << 2) | ((wc) << 1) | uc)

void k6_mrinit(struct mem_range_softc *sc);
int k6_mrset(struct mem_range_softc *, struct mem_range_desc *, int *);
void k6_mrinit_cpu(struct mem_range_softc *sc);
static __inline int k6_mrmake(struct mem_range_desc *, u_int32_t *);

struct mem_range_ops k6_mrops = {
	k6_mrinit,
	k6_mrset,
	k6_mrinit_cpu,
	NULL
};

static __inline int
k6_mrmake(struct mem_range_desc *desc, u_int32_t *mtrr)
{
	u_int32_t len = 0, wc, uc;
	int bit;

	if (desc->mr_base &~ 0xfffe0000)
		return EINVAL;
	if (desc->mr_len < 131072 || !powerof2(desc->mr_len))
		return EINVAL;
	if (desc->mr_flags &~ (MDF_WRITECOMBINE|MDF_UNCACHEABLE))
		return EOPNOTSUPP;

	for (bit = ffs(desc->mr_len >> 17) - 1; bit < 15; bit++)
		len |= 1 << bit;
	wc = (desc->mr_flags & MDF_WRITECOMBINE) ? 1 : 0;
	uc = (desc->mr_flags & MDF_UNCACHEABLE) ? 1 : 0;

	*mtrr = k6_reg_make(desc->mr_base, len, wc, uc);
	return 0;
}

void
k6_mrinit(struct mem_range_softc *sc)
{
	u_int64_t reg;
	u_int32_t addr, mask, wc, uc;
	int d;

	sc->mr_cap = 0;
	sc->mr_ndesc = 2; /* XXX (BFF) For now, we only have one msr for this */
	sc->mr_desc = mallocarray(sc->mr_ndesc, sizeof(struct mem_range_desc),
	    M_MEMDESC, M_NOWAIT|M_ZERO);
	if (sc->mr_desc == NULL)
		panic("k6_mrinit: malloc returns NULL");

	reg = rdmsr(UWCCR);
	for (d = 0; d < sc->mr_ndesc; d++) {
		u_int32_t one = (reg & (0xffffffff << (32 * d))) >> (32 * d);
		
		k6_reg_get(one, addr, mask, wc, uc);
		sc->mr_desc[d].mr_base = addr;
		sc->mr_desc[d].mr_len = ffs(mask) << 17;
		if (wc)
			sc->mr_desc[d].mr_flags |= MDF_WRITECOMBINE;
		if (uc)
			sc->mr_desc[d].mr_flags |= MDF_UNCACHEABLE;
	}
	
	printf("mtrr: K6-family MTRR support (%d registers)\n", sc->mr_ndesc);
}

int
k6_mrset(struct mem_range_softc *sc, struct mem_range_desc *desc, int *arg)
{
	u_int64_t reg;
	u_int32_t mtrr;
	int error, d;

	switch (*arg) {
	case MEMRANGE_SET_UPDATE:
		error = k6_mrmake(desc, &mtrr);
		if (error)
			return error;
		for (d = 0; d < sc->mr_ndesc; d++) {
			if (!sc->mr_desc[d].mr_len) {
				sc->mr_desc[d] = *desc;
				goto out;
			}
			if (sc->mr_desc[d].mr_base == desc->mr_base &&
			    sc->mr_desc[d].mr_len == desc->mr_len)
				return EEXIST;
		}

		return ENOSPC;
	case MEMRANGE_SET_REMOVE:
		mtrr = 0;
		for (d = 0; d < sc->mr_ndesc; d++)
			if (sc->mr_desc[d].mr_base == desc->mr_base &&
			    sc->mr_desc[d].mr_len == desc->mr_len) {
				bzero(&sc->mr_desc[d], sizeof(sc->mr_desc[d]));
				goto out;
			}

		return ENOENT;
	default:
		return EOPNOTSUPP;
	}

out:
	
	disable_intr();
	wbinvd();
	reg = rdmsr(UWCCR);
	reg &= ~(0xffffffff << (32 * d));
	reg |= mtrr << (32 * d);
	wrmsr(UWCCR, reg);
	wbinvd();
	enable_intr();

	return 0;
}

/*
 * Re-initialise the MTRRs on the BSP after suspend.
 */
void
k6_mrinit_cpu(struct mem_range_softc *sc)
{
	u_int64_t reg;
	u_int32_t mtrr;
	int d;

	for (d = 0; d < sc->mr_ndesc; d++) {
		k6_mrmake(&sc->mr_desc[d], &mtrr);

		disable_intr();
		wbinvd();
		reg = rdmsr(UWCCR);
		reg &= ~(0xffffffff << (32 * d));
		reg |= mtrr << (32 * d);
		wrmsr(UWCCR, reg);
		wbinvd();
		enable_intr();
	}
}
@


1.11
log
@Restore MTRRs on resume.

ok oga@@, pirofti@@
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.10 2009/11/29 17:11:30 kettenis Exp $ */
d106 1
a106 1
	sc->mr_desc = malloc(sc->mr_ndesc * sizeof(struct mem_range_desc),
@


1.10
log
@Reload mtrr state on all CPUs after updates.  Seems to speed up X on MP
systems, at least with Intel graphics.

ok marco@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.9 2009/08/15 00:34:44 jsg Exp $ */
d65 1
d71 1
a71 1
	NULL,
d176 24
@


1.9
log
@use static for inline so we get the desired behaviour with compilers
using c99 inline semantics.
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.8 2007/09/07 15:00:19 art Exp $ */
d70 1
@


1.8
log
@Use M_ZERO in a few more places to shave bytes from the kernel.

eyeballed and ok dlg@@
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.7 2006/06/10 18:00:48 gwk Exp $ */
d65 1
a65 1
__inline int k6_mrmake(struct mem_range_desc *, u_int32_t *);
d73 1
a73 1
__inline int
@


1.7
log
@ANSIfy, KNF and remove a silly comment.
ok toby@@, "absolutely" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.6 2006/05/11 13:21:11 mickey Exp $ */
d105 1
a105 1
			     M_MEMDESC, M_NOWAIT);
d108 1
a108 3
	
	bzero(sc->mr_desc, sc->mr_ndesc * sizeof(struct mem_range_desc));
	
@


1.6
log
@kill trainling spaces
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.5 2002/03/14 01:26:32 millert Exp $ */
a50 7

/*
 * NOTE: I do _not_ comment my code unless it's truly necessary. Don't
 * 	 expect anything frivolous here, and do NOT touch my bit-shifts
 *	 unless you want to break this.
 */

d74 1
a74 3
k6_mrmake(desc, mtrr)
	struct mem_range_desc 	*desc;
	u_int32_t 		*mtrr;
d77 1
a77 1
	register int bit;
d96 1
a96 2
k6_mrinit(sc)
	struct mem_range_softc *sc;
d128 1
a128 4
k6_mrset(sc, desc, arg)
	struct mem_range_softc 	*sc;
	struct mem_range_desc 	*desc;
	int 			*arg;
a176 1

@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.4 2000/03/22 00:02:12 deraadt Exp $ */
d81 1
a81 1
k6_mrmake(desc, mtrr) 
d96 1
a96 1
		len |= 1 << bit; 
d105 1
a105 1
k6_mrinit(sc) 
d138 1
a138 1
k6_mrset(sc, desc, arg) 
@


1.4
log
@fix k6 mtrr; cokane@@pohl.ececs.uc.edu
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.3 1999/11/24 01:43:32 deraadt Exp $ */
d70 3
a72 3
void k6_mrinit __P((struct mem_range_softc *sc));
int k6_mrset __P((struct mem_range_softc *, struct mem_range_desc *, int *));
__inline int k6_mrmake __P((struct mem_range_desc *, u_int32_t *));
@


1.4.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.4 2000/03/22 00:02:12 deraadt Exp $ */
d70 3
a72 3
void k6_mrinit(struct mem_range_softc *sc);
int k6_mrset(struct mem_range_softc *, struct mem_range_desc *, int *);
__inline int k6_mrmake(struct mem_range_desc *, u_int32_t *);
@


1.3
log
@spelling
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.2 1999/11/23 22:42:14 deraadt Exp $ */
d96 1
a96 1
		len |= 1 << (14 - bit); 
@


1.3.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d96 1
a96 1
		len |= 1 << bit; 
@


1.3.2.2
log
@Merge in -current from about a week ago
@
text
@d70 3
a72 3
void k6_mrinit(struct mem_range_softc *sc);
int k6_mrset(struct mem_range_softc *, struct mem_range_desc *, int *);
__inline int k6_mrmake(struct mem_range_desc *, u_int32_t *);
@


1.2
log
@pretty mmtr messages
@
text
@d1 1
a1 1
/* $OpenBSD: k6_mem.c,v 1.1 1999/11/20 11:11:28 matthieu Exp $ */
d134 1
a134 1
	printf("mmtr: K6-family MTRR support (%d registers)\n", sc->mr_ndesc);
@


1.1
log
@add MTRR support from FreeBSD
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d134 1
a134 1
	printf("K6-family MTRR support enabled (%d registers)\n", sc->mr_ndesc);
@

