head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.28
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.26
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.22
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.24
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.16
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.20
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.18
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.14
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.12
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8;
locks; strict;
comment	@ * @;


1.9
date	2010.04.20.22.05.41;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.01.12.03.48;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.01.11.58.50;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.29.15.18.28;	author ragge;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.19.09.58.40;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.18.20.15.54;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.15.15.31.55;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.15.01.18.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.14.21.31.46;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@/*      $OpenBSD: amdmsr.c,v 1.8 2008/07/01 12:03:48 mbalmer Exp $	*/

/*
 * Copyright (c) 2008 Marc Balmer <mbalmer@@openbsd.org>
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Enable MSR access for AMD Geode LX Processors with graphics processor
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/gpio.h>
#include <sys/ioctl.h>
#include <sys/conf.h>
#include <machine/amdmsr.h>

#include <machine/bus.h>
#include <machine/cpufunc.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#ifdef APERTURE
static int amdmsr_open_cnt;
extern int allowaperture;
#endif

#define GLX_CPU_GLD_MSR_CAP	0x00002000
#define GLX_CPU_DID		0x0864		/* CPU device ID */
#define GLX_GP_GLD_MSR_CAP	0xa0002000
#define GLX_GP_DID		0x03d4		/* GP device ID */

struct amdmsr_softc {
	struct device		sc_dev;
};

struct cfdriver amdmsr_cd = {
	NULL, "amdmsr", DV_DULL
};

int	amdmsr_match(struct device *, void *, void *);
void	amdmsr_attach(struct device *, struct device *, void *);

struct cfattach amdmsr_ca = {
	sizeof(struct amdmsr_softc), amdmsr_match, amdmsr_attach
};

int
amdmsr_probe(void)
{
#ifdef APERTURE
	u_int64_t gld_msr_cap;
	int family, model;

	family = (cpu_id >> 8) & 0xf;
	model  = (cpu_id >> 4) & 0xf;

	/* Check for AMD Geode LX CPU */
	if (strcmp(cpu_vendor, "AuthenticAMD") == 0 && family == 0x5 &&
	    model == 0x0a) {
		/* Check for graphics processor presence */
		gld_msr_cap = rdmsr(GLX_CPU_GLD_MSR_CAP);
		if (((gld_msr_cap >> 8) & 0x0fff) == GLX_CPU_DID) {
			gld_msr_cap = rdmsr(GLX_GP_GLD_MSR_CAP);
			if (((gld_msr_cap >> 8) & 0x0fff) == GLX_GP_DID)
				return 1;
		}
	}
#endif
	return 0;
}

int
amdmsr_match(struct device *parent, void *match, void *aux)
{
	const char **busname = (const char **)aux;

	return (strcmp(*busname, amdmsr_cd.cd_name) == 0);
}

void
amdmsr_attach(struct device *parent, struct device *self, void *aux)
{
	printf("\n");
}

int
amdmsropen(dev_t dev, int flags, int devtype, struct proc *p)
{
#ifdef APERTURE
	if (amdmsr_cd.cd_ndevs == 0 || minor(dev) != 0)
		return ENXIO;

	if (suser(p, 0) != 0 || !allowaperture)
		return EPERM;
	/* allow only one simultaneous open() */
	if (amdmsr_open_cnt > 0)
		return EPERM;
	amdmsr_open_cnt++;
	return 0;
#else
	return ENXIO;
#endif
}

int
amdmsrclose(dev_t dev, int flags, int devtype, struct proc *p)
{
#ifdef APERTURE
	amdmsr_open_cnt--;
#endif
	return 0;
}

int
amdmsrioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct amdmsr_req *req = (struct amdmsr_req *)data;

	switch (cmd) {
	case RDMSR:
		req->val = rdmsr(req->addr);
		break;
	case WRMSR:
		wrmsr(req->addr, req->val);
		break;
	default:
		return EINVAL;
	}
	return 0;
}
@


1.8
log
@Remove a now unused variable.
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.7 2008/07/01 11:58:50 mbalmer Exp $	*/
a27 1
#include <sys/sysctl.h>
@


1.7
log
@Stricter probing:  Not only check for an AMD cpu with MSRs, but make sure
it is an AMD Geode LX before reading the GLD_MSR_CAP register.

Problem reported by Paul Irofti, thanks.  Tested by me and sthen.  ok sthen.
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.6 2008/06/29 15:18:28 ragge Exp $	*/
d70 1
a70 1
	int family, model, step;
a73 1
	step   = (cpu_id >> 0) & 0xf;
@


1.6
log
@Don't fail compilation if APERTURE is not defined.
Also, fail probe if APERTURE is not defined.
Ok Marc Balmer.
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.5 2008/06/19 09:58:40 mbalmer Exp $	*/
d76 1
d78 2
a79 2
	    (model > 0x8 || (model == 0x8 && step > 0x7))) {
		/* Check for Geode LX CPU and graphics processor presence */
@


1.5
log
@Add OpenBSD CVS marker, proper type for probe function.
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.4 2008/06/18 20:15:54 mbalmer Exp $	*/
d68 1
d86 1
d126 1
d128 1
@


1.4
log
@Attach amdmsr(4) at mainbus in a way that it can be disabled in UKC or the
config file, only configure the driver when we have an AMD Geode LX
CPU and the graphics processor is available.

mainbus part by miod, ok miod, matthieu
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.3 2008/06/15 15:31:55 matthieu Exp $	*/
d66 1
a66 1
amdmsr_probe()
a84 1

@


1.3
log
@When APERTURE is not defined, always return ENXIO.
Suggested by mk@@, ok miod@@ deraadt@@.
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.2 2008/06/15 01:18:22 deraadt Exp $	*/
d21 1
a21 1
 * Enable MSR access AMD Processors
d45 5
d66 1
a66 1
amdmsr_match(struct device *parent, void *match, void *aux)
d68 1
d76 9
a84 2
	    (model > 0x8 || (model == 0x8 && step > 0x7)))
		return 1;
d89 8
d107 3
@


1.2
log
@this should be a MD include file; discussed with matthieu
@
text
@d1 1
a1 1
/*      $OpenBSD: amdmsr.c,v 1.1 2008/06/14 21:31:46 mbalmer Exp $	*/
a84 2
	if (suser(p, 0) != 0)
		return EPERM;
d86 1
a86 1
	if (!allowaperture)
a87 1
#endif
d93 3
@


1.1
log
@Add amdmsr(4), a driver to access model specific registers on AMD CPUs.
Needed for the upcoming AMD Geode LX graphics processor X11 driver.

discussed with, feedback, and ok matthieu and deraadt.
@
text
@d1 1
a1 1
/*      $OpenBSD$	*/
d31 1
a31 1
#include <sys/amdmsr.h>
@

