head	1.28;
access;
symbols
	OPENBSD_6_2:1.28.0.20
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.28.0.18
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.14
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.10
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.12
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.4
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.8
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.6
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.27.0.8
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.6
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.4
	OPENBSD_5_0:1.27.0.2
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.23.0.2
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.22.0.10
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.12
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.8
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.6
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.21.0.2
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.20.0.6
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.4
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.19.0.4
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.7.0.26
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.24
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.22
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.20
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.18
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.16
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.14
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.12
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.10
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.8
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.6
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.4
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2013.05.08.15.36.30;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.20.21.44.08;	author guenther;	state Exp;
branches;
next	1.26;

1.26
date	2010.12.27.12.48.35;	author kettenis;	state Exp;
branches;
next	1.25;

1.25
date	2010.09.29.15.11.31;	author joshe;	state Exp;
branches;
next	1.24;

1.24
date	2010.09.29.13.46.38;	author joshe;	state Exp;
branches;
next	1.23;

1.23
date	2010.07.23.14.56.31;	author kettenis;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.08.20.26.54;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.19.11.06.33;	author jsg;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.03.20.21.44;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2004.07.20.21.04.37;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2004.07.20.18.59.21;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.02.16.29.55;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.13.21.49.15;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.05.01.06.33;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.01.19.05.23;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.15.17.51.40;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.04.03.42.02;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.27.47;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.00.42.24;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.18.23.26.18;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.08.27.10.46.52;	author downsj;	state Exp;
branches
	1.7.16.1
	1.7.26.1;
next	1.6;

1.6
date	96.05.30.09.30.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.05.07.07.21.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.16.34;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.05.18.56;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.01.15.00.56.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.34;	author deraadt;	state Exp;
branches;
next	;

1.7.16.1
date	2001.07.14.10.02.31;	author ho;	state Exp;
branches;
next	1.7.16.2;

1.7.16.2
date	2002.03.06.01.01.00;	author niklas;	state Exp;
branches;
next	1.7.16.3;

1.7.16.3
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.7.16.4;

1.7.16.4
date	2003.05.15.04.08.02;	author niklas;	state Exp;
branches;
next	1.7.16.5;

1.7.16.5
date	2003.06.07.11.11.37;	author ho;	state Exp;
branches;
next	1.7.16.6;

1.7.16.6
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	1.7.16.7;

1.7.16.7
date	2004.02.20.22.19.55;	author niklas;	state Exp;
branches;
next	1.7.16.8;

1.7.16.8
date	2004.06.05.23.09.00;	author niklas;	state Exp;
branches;
next	;

1.7.26.1
date	2002.06.11.03.35.53;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@remove stale cyrix emc support, and switch to just using intial npxcw
ok kettenis
@
text
@/*	$OpenBSD: process_machdep.c,v 1.27 2011/03/20 21:44:08 guenther Exp $	*/
/*	$NetBSD: process_machdep.c,v 1.22 1996/05/03 19:42:25 christos Exp $	*/

/*
 * Copyright (c) 1995, 1996 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1993 The Regents of the University of California.
 * Copyright (c) 1993 Jan-Simon Pendry
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * From:
 *	Id: procfs_i386.c,v 4.1 1993/12/17 10:47:45 jsp Rel
 */

/*
 * This file may seem a bit stylized, but that so that it's easier to port.
 * Functions to be implemented here are:
 *
 * process_read_regs(proc, regs)
 *	Get the current user-visible register set from the process
 *	and copy it into the regs structure (<machine/reg.h>).
 *	The process is stopped at the time read_regs is called.
 *
 * process_write_regs(proc, regs)
 *	Update the current register set from the passed in regs
 *	structure.  Take care to avoid clobbering special CPU
 *	registers or privileged bits in the PSL.
 *	The process is stopped at the time write_regs is called.
 *
 * process_sstep(proc)
 *	Arrange for the process to trap after executing a single instruction.
 *
 * process_set_pc(proc)
 *	Set the process's program counter.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/vnode.h>
#include <sys/ptrace.h>

#include <machine/psl.h>
#include <machine/reg.h>
#include <machine/segments.h>

#ifdef VM86
#include <machine/vm86.h>
#endif

#include "npx.h"

static __inline struct trapframe *process_frame(struct proc *);
static __inline union savefpu *process_fpframe(struct proc *);
void process_fninit_xmm(struct savexmm *);

static __inline struct trapframe *
process_frame(struct proc *p)
{

	return (p->p_md.md_regs);
}

static __inline union savefpu *
process_fpframe(struct proc *p)
{

	return (&p->p_addr->u_pcb.pcb_savefpu);
}

void
process_xmm_to_s87(const struct savexmm *sxmm, struct save87 *s87)
{
	int i;

	/* FPU control/status */
	s87->sv_env.en_cw = sxmm->sv_env.en_cw;
	s87->sv_env.en_sw = sxmm->sv_env.en_sw;
	/* tag word handled below */
	s87->sv_env.en_fip = sxmm->sv_env.en_fip;
	s87->sv_env.en_fcs = sxmm->sv_env.en_fcs;
	s87->sv_env.en_opcode = sxmm->sv_env.en_opcode;
	s87->sv_env.en_foo = sxmm->sv_env.en_foo;
	s87->sv_env.en_fos = sxmm->sv_env.en_fos;

	/* Tag word and registers. */
	for (i = 0; i < 8; i++) {
		if (sxmm->sv_env.en_tw & (1U << i))
			s87->sv_env.en_tw &= ~(3U << (i * 2));
		else
			s87->sv_env.en_tw |= (3U << (i * 2));

		if (sxmm->sv_ex_tw & (1U << i))
			s87->sv_ex_tw &= ~(3U << (i * 2));
		else
			s87->sv_ex_tw |= (3U << (i * 2));

		memcpy(&s87->sv_ac[i].fp_bytes, &sxmm->sv_ac[i].fp_bytes,
		    sizeof(s87->sv_ac[i].fp_bytes));
	}

	s87->sv_ex_sw = sxmm->sv_ex_sw;
}

void
process_fninit_xmm(struct savexmm *sxmm)
{
	memset(sxmm, 0, sizeof(*sxmm));
	sxmm->sv_env.en_cw = __INITIAL_NPXCW__;
	sxmm->sv_env.en_mxcsr = __INITIAL_MXCSR__;
	sxmm->sv_env.en_mxcsr_mask = fpu_mxcsr_mask;
	sxmm->sv_env.en_sw = 0x0000;
	sxmm->sv_env.en_tw = 0x00;
}

int
process_read_regs(struct proc *p, struct reg *regs)
{
	struct trapframe *tf = process_frame(p);

#ifdef VM86
	if (tf->tf_eflags & PSL_VM) {
		regs->r_gs = tf->tf_vm86_gs & 0xffff;
		regs->r_fs = tf->tf_vm86_fs & 0xffff;
		regs->r_es = tf->tf_vm86_es & 0xffff;
		regs->r_ds = tf->tf_vm86_ds & 0xffff;
		regs->r_eflags = get_vflags(p);
	} else
#endif
	{
		regs->r_gs = tf->tf_gs & 0xffff;
		regs->r_fs = tf->tf_fs & 0xffff;
		regs->r_es = tf->tf_es & 0xffff;
		regs->r_ds = tf->tf_ds & 0xffff;
		regs->r_eflags = tf->tf_eflags;
	}
	regs->r_edi = tf->tf_edi;
	regs->r_esi = tf->tf_esi;
	regs->r_ebp = tf->tf_ebp;
	regs->r_ebx = tf->tf_ebx;
	regs->r_edx = tf->tf_edx;
	regs->r_ecx = tf->tf_ecx;
	regs->r_eax = tf->tf_eax;
	regs->r_eip = tf->tf_eip;
	regs->r_cs = tf->tf_cs & 0xffff;
	regs->r_esp = tf->tf_esp;
	regs->r_ss = tf->tf_ss & 0xffff;

	return (0);
}

int
process_read_fpregs(struct proc *p, struct fpreg *regs)
{
	union savefpu *frame = process_fpframe(p);

	if (p->p_md.md_flags & MDP_USEDFPU) {
#if NNPX > 0
		npxsave_proc(p, 1);
#endif
	} else {
		/* Fake a FNINIT. */
		if (i386_use_fxsave) {
			process_fninit_xmm(&frame->sv_xmm);
		} else {
			memset(&frame->sv_87, 0, sizeof(frame->sv_87));
			frame->sv_87.sv_env.en_cw = __INITIAL_NPXCW__;
			frame->sv_87.sv_env.en_sw = 0x0000;
			frame->sv_87.sv_env.en_tw = 0xffff;
		}
		p->p_md.md_flags |= MDP_USEDFPU;
	}

	if (i386_use_fxsave) {
		struct save87 s87;

		/* XXX Yuck */
		process_xmm_to_s87(&frame->sv_xmm, &s87);
		memcpy(regs, &s87, sizeof(*regs));
	} else
		memcpy(regs, &frame->sv_87, sizeof(*regs));

	return (0);
}

#ifdef PTRACE

void
process_s87_to_xmm(const struct save87 *s87, struct savexmm *sxmm)
{
	int i;

	/* FPU control/status */
	sxmm->sv_env.en_cw = s87->sv_env.en_cw;
	sxmm->sv_env.en_sw = s87->sv_env.en_sw;
	/* tag word handled below */
	sxmm->sv_env.en_fip = s87->sv_env.en_fip;
	sxmm->sv_env.en_fcs = s87->sv_env.en_fcs;
	sxmm->sv_env.en_opcode = s87->sv_env.en_opcode;
	sxmm->sv_env.en_foo = s87->sv_env.en_foo;
	sxmm->sv_env.en_fos = s87->sv_env.en_fos;

	/* Tag word and registers. */
	for (i = 0; i < 8; i++) {
		if (((s87->sv_env.en_tw >> (i * 2)) & 3) == 3)
			sxmm->sv_env.en_tw &= ~(1U << i);
		else
			sxmm->sv_env.en_tw |= (1U << i);

		if (((s87->sv_ex_tw >> (i * 2)) & 3) == 3)
			sxmm->sv_ex_tw &= ~(1U << i);
		else
			sxmm->sv_ex_tw |= (1U << i);

		memcpy(&sxmm->sv_ac[i].fp_bytes, &s87->sv_ac[i].fp_bytes,
		    sizeof(sxmm->sv_ac[i].fp_bytes));
	}

	sxmm->sv_ex_sw = s87->sv_ex_sw;
}

int
process_write_regs(struct proc *p, struct reg *regs)
{
	struct trapframe *tf = process_frame(p);

#ifdef VM86
	if (tf->tf_eflags & PSL_VM) {
		tf->tf_vm86_gs = regs->r_gs & 0xffff;
		tf->tf_vm86_fs = regs->r_fs & 0xffff;
		tf->tf_vm86_es = regs->r_es & 0xffff;
		tf->tf_vm86_ds = regs->r_ds & 0xffff;
		set_vflags(p, regs->r_eflags);
	} else
#endif
	{
		/*
		 * Check for security violations.
		 */
		if (((regs->r_eflags ^ tf->tf_eflags) & PSL_USERSTATIC) != 0 ||
		    !USERMODE(regs->r_cs, regs->r_eflags))
			return (EINVAL);

		tf->tf_gs = regs->r_gs & 0xffff;
		tf->tf_fs = regs->r_fs & 0xffff;
		tf->tf_es = regs->r_es & 0xffff;
		tf->tf_ds = regs->r_ds & 0xffff;
		tf->tf_eflags = regs->r_eflags;
	}
	tf->tf_edi = regs->r_edi;
	tf->tf_esi = regs->r_esi;
	tf->tf_ebp = regs->r_ebp;
	tf->tf_ebx = regs->r_ebx;
	tf->tf_edx = regs->r_edx;
	tf->tf_ecx = regs->r_ecx;
	tf->tf_eax = regs->r_eax;
	tf->tf_eip = regs->r_eip;
	tf->tf_cs = regs->r_cs & 0xffff;
	tf->tf_esp = regs->r_esp;
	tf->tf_ss = regs->r_ss & 0xffff;

	return (0);
}

int
process_write_fpregs(struct proc *p, struct fpreg *regs)
{
	union savefpu *frame = process_fpframe(p);

	if (p->p_md.md_flags & MDP_USEDFPU) {
#if NNPX > 0
		npxsave_proc(p, 0);
#endif
	} else {
		/*
		 * Make sure MXCSR and the XMM registers are
		 * initialized to sane defaults.
		 */
		if (i386_use_fxsave)
			process_fninit_xmm(&frame->sv_xmm);
		p->p_md.md_flags |= MDP_USEDFPU;
	}

	if (i386_use_fxsave) {
		struct save87 s87;

		/* XXX Yuck. */
		memcpy(&s87, regs, sizeof(*regs));
		process_s87_to_xmm(&s87, &frame->sv_xmm);
	} else
		memcpy(&frame->sv_87, regs, sizeof(*regs));

	return (0);
}

int
process_read_xmmregs(struct proc *p, struct xmmregs *regs)
{
	union savefpu *frame = process_fpframe(p);

	if (!i386_use_fxsave)
		return (EINVAL);

	if (p->p_md.md_flags & MDP_USEDFPU) {
#if NNPX > 0
		npxsave_proc(p, 1);
#endif
	} else {
		/* Fake a FNINIT. */
		process_fninit_xmm(&frame->sv_xmm);
		p->p_md.md_flags |= MDP_USEDFPU;
	}

	memcpy(regs, &frame->sv_xmm, sizeof(*regs));
	return (0);
}

int
process_write_xmmregs(struct proc *p, const struct xmmregs *regs)
{
	union savefpu *frame = process_fpframe(p);

	if (!i386_use_fxsave)
		return (EINVAL);

	if (p->p_md.md_flags & MDP_USEDFPU) {
#if NNPX > 0
		npxsave_proc(p, 0);
#endif
	} else
		p->p_md.md_flags |= MDP_USEDFPU;

	memcpy(&frame->sv_xmm, regs, sizeof(*regs));
	frame->sv_xmm.sv_env.en_mxcsr &= fpu_mxcsr_mask;
	return (0);
}

int
process_sstep(struct proc *p, int sstep)
{
	struct trapframe *tf = process_frame(p);

	if (sstep)
		tf->tf_eflags |= PSL_T;
	else
		tf->tf_eflags &= ~PSL_T;
	
	return (0);
}

int
process_set_pc(struct proc *p, caddr_t addr)
{
	struct trapframe *tf = process_frame(p);

	tf->tf_eip = (int)addr;

	return (0);
}

#endif	/* PTRACE */
@


1.27
log
@When reading MXCSR from userland sigcontext or a ptrace request,
mask out invalid bits to prevent a protect fault.

Original diff by joshe@@; further feedback and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.26 2010/12/27 12:48:35 kettenis Exp $	*/
d138 1
a138 1
	sxmm->sv_env.en_cw = __OpenBSD_NPXCW__;
d196 1
a196 1
			frame->sv_87.sv_env.en_cw = __OpenBSD_NPXCW__;
@


1.26
log
@Properly initialize MXCSR and XMM registers if we only write the x87 FPU state
and the process has not used the FPU yet.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.25 2010/09/29 15:11:31 joshe Exp $	*/
d140 1
d363 1
@


1.25
log
@Back out previous, it appears to be broken.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.23 2010/07/23 14:56:31 kettenis Exp $	*/
d302 7
a308 1
	} else
d310 1
@


1.24
log
@When reading MXCSR from userland sigcontext, mask out invalid bits.

This prevents a protection fault if a userland signal handler
scribbles all over it's struct sigcontext

Help from and ok guenther@@ kettenis@@
@
text
@a139 1
	sxmm->sv_env.en_mxcsr_mask = fpu_mxcsr_mask;
a310 1
		frame->sv_xmm.sv_env.en_mxcsr &= fpu_mxcsr_mask;
@


1.23
log
@Don't leak the contents of the FPU and SSE registers between processes.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.22 2007/05/08 20:26:54 deraadt Exp $	*/
d140 1
d312 1
@


1.22
log
@process_s87_to_xmm() is only needed if PTRACE
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.21 2006/09/19 11:06:33 jsg Exp $	*/
a136 8
	/*
	 * The initial control word was already set by setregs(), so
	 * save it temporarily.
	 */
	uint32_t mxcsr = sxmm->sv_env.en_mxcsr;
	uint16_t cw = sxmm->sv_env.en_cw;

	/* XXX Don't zero XMM regs? */
d138 2
a139 2
	sxmm->sv_env.en_cw = cw;
	sxmm->sv_env.en_mxcsr = mxcsr;
a193 6
			/*
			 * The initial control word was already set by
			 * setregs(), so save it temporarily.
			 */
			uint16_t cw = frame->sv_87.sv_env.en_cw;

d195 1
a195 1
			frame->sv_87.sv_env.en_cw = cw;
@


1.21
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.20 2005/04/03 20:21:44 kettenis Exp $	*/
a134 34
process_s87_to_xmm(const struct save87 *s87, struct savexmm *sxmm)
{
	int i;

	/* FPU control/status */
	sxmm->sv_env.en_cw = s87->sv_env.en_cw;
	sxmm->sv_env.en_sw = s87->sv_env.en_sw;
	/* tag word handled below */
	sxmm->sv_env.en_fip = s87->sv_env.en_fip;
	sxmm->sv_env.en_fcs = s87->sv_env.en_fcs;
	sxmm->sv_env.en_opcode = s87->sv_env.en_opcode;
	sxmm->sv_env.en_foo = s87->sv_env.en_foo;
	sxmm->sv_env.en_fos = s87->sv_env.en_fos;

	/* Tag word and registers. */
	for (i = 0; i < 8; i++) {
		if (((s87->sv_env.en_tw >> (i * 2)) & 3) == 3)
			sxmm->sv_env.en_tw &= ~(1U << i);
		else
			sxmm->sv_env.en_tw |= (1U << i);

		if (((s87->sv_ex_tw >> (i * 2)) & 3) == 3)
			sxmm->sv_ex_tw &= ~(1U << i);
		else
			sxmm->sv_ex_tw |= (1U << i);

		memcpy(&sxmm->sv_ac[i].fp_bytes, &s87->sv_ac[i].fp_bytes,
		    sizeof(sxmm->sv_ac[i].fp_bytes));
	}

	sxmm->sv_ex_sw = s87->sv_ex_sw;
}

void
d229 34
@


1.20
log
@Implemente PT_[GS]ETXMMREGS ptrace(2) requests on i386.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.19 2004/07/20 21:04:37 kettenis Exp $	*/
d187 1
a187 3
process_read_regs(p, regs)
	struct proc *p;
	struct reg *regs;
d223 1
a223 3
process_read_fpregs(p, regs)
	struct proc *p;
	struct fpreg *regs;
d265 1
a265 3
process_write_regs(p, regs)
	struct proc *p;
	struct reg *regs;
d308 1
a308 3
process_write_fpregs(p, regs)
	struct proc *p;
	struct fpreg *regs;
d373 1
a373 3
process_sstep(p, sstep)
	struct proc *p;
	int sstep;
d386 1
a386 3
process_set_pc(p, addr)
	struct proc *p;
	caddr_t addr;
@


1.19
log
@Properly initialize FPU state if it hasn't been used yet.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.18 2004/07/20 18:59:21 kettenis Exp $	*/
d84 1
d168 18
d236 1
a236 5
		/*
		 * Fake a FNINIT.
		 * The initial control word was already set by setregs(), so
		 * save it temporarily.
		 */
d238 1
a238 9
			uint32_t mxcsr = frame->sv_xmm.sv_env.en_mxcsr;
			uint16_t cw = frame->sv_xmm.sv_env.en_cw;

			/* XXX Don't zero XMM regs? */
			memset(&frame->sv_xmm, 0, sizeof(frame->sv_xmm));
			frame->sv_xmm.sv_env.en_cw = cw;
			frame->sv_xmm.sv_env.en_mxcsr = mxcsr;
			frame->sv_xmm.sv_env.en_sw = 0x0000;
			frame->sv_xmm.sv_env.en_tw = 0x00;
d240 4
d336 41
@


1.18
log
@#include "npx.h"
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.17 2004/07/02 16:29:55 niklas Exp $	*/
d210 1
a212 2
		union savefpu *frame = process_fpframe(p);

d216 9
d226 19
a244 2
		if (i386_use_fxsave) {
			struct save87 s87;
d246 3
a248 5
			/* XXX Yuck */
			process_xmm_to_s87(&frame->sv_xmm, &s87);
			memcpy(regs, &s87, sizeof(*regs));
 		} else
			bcopy(frame, regs, sizeof(*regs));
d250 1
a250 1
		bzero(regs, sizeof(*regs));
@


1.17
log
@Maintain %f and %gs over traps.  Mostly from NetBSD.  Preparation for SMP
speedups.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.16 2004/06/13 21:49:15 niklas Exp $	*/
d79 2
@


1.16
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a170 1
	struct pcb *pcb = &p->p_addr->u_pcb;
d182 2
a183 2
		regs->r_gs = pcb->pcb_gs & 0xffff;
		regs->r_fs = pcb->pcb_fs & 0xffff;
a237 1
	struct pcb *pcb = &p->p_addr->u_pcb;
a248 17
#if 0
		extern int gdt_size;

#define	verr_ldt(slot)	(slot < pcb->pcb_ldt_len && \
			 (pcb->pcb_ldt[slot].sd.sd_type & SDT_MEMRO) != 0 && \
			 pcb->pcb_ldt[slot].sd.sd_dpl == SEL_UPL && \
			 pcb->pcb_ldt[slot].sd.sd_p == 1)
#define	verr_gdt(slot)	(slot < gdt_size && \
			 (gdt[slot].sd.sd_type & SDT_MEMRO) != 0 && \
			 gdt[slot].sd.sd_dpl == SEL_UPL && \
			 gdt[slot].sd.sd_p == 1)
#define	verr(sel)	(ISLDT(sel) ? verr_ldt(IDXSEL(sel)) : \
				      verr_gdt(IDXSEL(sel)))
#define	valid_sel(sel)	(ISPL(sel) == SEL_UPL && verr(sel))
#define	null_sel(sel)	(!ISLDT(sel) && IDXSEL(sel) == 0)
#endif

d256 2
a257 11
		/* XXX Is this safe to remove. */
#if 0
		if ((regs->r_gs != pcb->pcb_gs && \
		     !valid_sel(regs->r_gs) && !null_sel(regs->r_gs)) ||
		    (regs->r_fs != pcb->pcb_fs && \
		     !valid_sel(regs->r_fs) && !null_sel(regs->r_fs)))
			return (EINVAL);
#endif

		pcb->pcb_gs = regs->r_gs & 0xffff;
		pcb->pcb_fs = regs->r_fs & 0xffff;
@


1.15
log
@correct size of registers written out
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.14 2004/02/01 19:05:23 deraadt Exp $	*/
d214 1
a214 2
		if (npxproc == p)
			npxsave();
d251 1
a252 1
		extern union descriptor *dynamic_gdt;
d259 3
a261 3
			 (dynamic_gdt[slot].sd.sd_type & SDT_MEMRO) != 0 && \
			 dynamic_gdt[slot].sd.sd_dpl == SEL_UPL && \
			 dynamic_gdt[slot].sd.sd_p == 1)
d266 1
d275 2
d282 1
d314 1
a314 2
		if (npxproc == p)
			npxdrop();
@


1.14
log
@Enable FXSR all the time, and cope with NPX/FXSR conversions; from netbsd.
Pass SSE/SSE2/XCRYPT flags out via syctl, and prepare for being able to do
xcrypt-* in userland; ok naddy, tested a lot by pvalchev and jolan, also
works on amd64 in 32bit mode
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.13 2004/01/15 17:51:40 miod Exp $	*/
d225 1
a225 1
			bcopy(frame, regs, sizeof(*frame));
@


1.13
log
@Provide explicit function argument declarations.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.12 2003/09/04 03:42:02 avsm Exp $	*/
d81 1
a81 1
static __inline struct save87 *process_fpframe(struct proc *);
d84 1
a84 2
process_frame(p)
	struct proc *p;
d90 43
a132 3
static __inline struct save87 *
process_fpframe(p)
	struct proc *p;
d134 23
d158 5
a162 1
	return (&p->p_addr->u_pcb.pcb_savefpu.npx);
d211 1
a211 1
		struct save87 *frame = process_fpframe(p);
d218 8
a225 1
		bcopy(frame, regs, sizeof(*frame));
d307 1
a307 1
	struct save87 *frame = process_fpframe(p);
d309 1
d311 2
a312 2
	if (npxproc == p)
		npxdrop();
d314 2
d317 8
a324 2
	p->p_md.md_flags |= MDP_USEDFPU;
	bcopy(regs, frame, sizeof(*frame));
@


1.12
log
@correct sizeof for bzero/bcopy
ok tedu krw fgsch deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.11 2003/06/02 23:27:47 millert Exp $	*/
d250 1
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.10 2002/03/14 01:26:33 millert Exp $	*/
d152 1
a152 1
		bcopy(frame, regs, sizeof(frame));
d154 1
a154 1
		bzero(regs, sizeof(regs));
d242 1
a242 1
	bcopy(regs, frame, sizeof(frame));
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2002/03/14 00:42:24 miod Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.8 2002/02/18 23:26:18 mickey Exp $	*/
d84 2
a85 2
static __inline struct trapframe *process_frame __P((struct proc *));
static __inline struct save87 *process_fpframe __P((struct proc *));
@


1.8
log
@copy the segment regs w/ zeroing upper 16 bits
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 1996/08/27 10:46:52 downsj Exp $	*/
d163 2
d276 2
@


1.7
log
@Add:
	* GPL_MATH_EMULATE: fpemul
	* ALWAYS_MATH_EMULATE: causes npx probe to always fail.
	* better fp context in struct pcb.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.6 1996/05/30 09:30:07 deraadt Exp $	*/
d113 4
a116 4
		regs->r_gs = tf->tf_vm86_gs;
		regs->r_fs = tf->tf_vm86_fs;
		regs->r_es = tf->tf_vm86_es;
		regs->r_ds = tf->tf_vm86_ds;
d121 4
a124 4
		regs->r_gs = pcb->pcb_gs;
		regs->r_fs = pcb->pcb_fs;
		regs->r_es = tf->tf_es;
		regs->r_ds = tf->tf_ds;
d135 1
a135 1
	regs->r_cs = tf->tf_cs;
d137 1
a137 1
	regs->r_ss = tf->tf_ss;
d173 4
a176 4
		tf->tf_vm86_gs = regs->r_gs;
		tf->tf_vm86_fs = regs->r_fs;
		tf->tf_vm86_es = regs->r_es;
		tf->tf_vm86_ds = regs->r_ds;
d210 4
a213 4
		pcb->pcb_gs = regs->r_gs;
		pcb->pcb_fs = regs->r_fs;
		tf->tf_es = regs->r_es;
		tf->tf_ds = regs->r_ds;
d224 1
a224 1
	tf->tf_cs = regs->r_cs;
d226 1
a226 1
	tf->tf_ss = regs->r_ss;
@


1.7.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 1996/08/27 10:46:52 downsj Exp $	*/
d84 2
a85 2
static __inline struct trapframe *process_frame(struct proc *);
static __inline struct save87 *process_fpframe(struct proc *);
d113 4
a116 4
		regs->r_gs = tf->tf_vm86_gs & 0xffff;
		regs->r_fs = tf->tf_vm86_fs & 0xffff;
		regs->r_es = tf->tf_vm86_es & 0xffff;
		regs->r_ds = tf->tf_vm86_ds & 0xffff;
d121 4
a124 4
		regs->r_gs = pcb->pcb_gs & 0xffff;
		regs->r_fs = pcb->pcb_fs & 0xffff;
		regs->r_es = tf->tf_es & 0xffff;
		regs->r_ds = tf->tf_ds & 0xffff;
d135 1
a135 1
	regs->r_cs = tf->tf_cs & 0xffff;
d137 1
a137 1
	regs->r_ss = tf->tf_ss & 0xffff;
a162 2
#ifdef PTRACE

d173 4
a176 4
		tf->tf_vm86_gs = regs->r_gs & 0xffff;
		tf->tf_vm86_fs = regs->r_fs & 0xffff;
		tf->tf_vm86_es = regs->r_es & 0xffff;
		tf->tf_vm86_ds = regs->r_ds & 0xffff;
d210 4
a213 4
		pcb->pcb_gs = regs->r_gs & 0xffff;
		pcb->pcb_fs = regs->r_fs & 0xffff;
		tf->tf_es = regs->r_es & 0xffff;
		tf->tf_ds = regs->r_ds & 0xffff;
d224 1
a224 1
	tf->tf_cs = regs->r_cs & 0xffff;
d226 1
a226 1
	tf->tf_ss = regs->r_ss & 0xffff;
a273 2

#endif	/* PTRACE */
@


1.7.16.1
log
@Initial import of some SMP code from NetBSD.
Not really working here yet, but there is some work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 1996/08/27 10:46:52 downsj Exp $	*/
d152 2
a153 1
		npxsave_proc(p);
d239 2
a240 1
	npxdrop(p);
@


1.7.16.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d113 4
a116 4
		regs->r_gs = tf->tf_vm86_gs & 0xffff;
		regs->r_fs = tf->tf_vm86_fs & 0xffff;
		regs->r_es = tf->tf_vm86_es & 0xffff;
		regs->r_ds = tf->tf_vm86_ds & 0xffff;
d121 4
a124 4
		regs->r_gs = pcb->pcb_gs & 0xffff;
		regs->r_fs = pcb->pcb_fs & 0xffff;
		regs->r_es = tf->tf_es & 0xffff;
		regs->r_ds = tf->tf_ds & 0xffff;
d135 1
a135 1
	regs->r_cs = tf->tf_cs & 0xffff;
d137 1
a137 1
	regs->r_ss = tf->tf_ss & 0xffff;
d172 4
a175 4
		tf->tf_vm86_gs = regs->r_gs & 0xffff;
		tf->tf_vm86_fs = regs->r_fs & 0xffff;
		tf->tf_vm86_es = regs->r_es & 0xffff;
		tf->tf_vm86_ds = regs->r_ds & 0xffff;
d209 4
a212 4
		pcb->pcb_gs = regs->r_gs & 0xffff;
		pcb->pcb_fs = regs->r_fs & 0xffff;
		tf->tf_es = regs->r_es & 0xffff;
		tf->tf_ds = regs->r_ds & 0xffff;
d223 1
a223 1
	tf->tf_cs = regs->r_cs & 0xffff;
d225 1
a225 1
	tf->tf_ss = regs->r_ss & 0xffff;
@


1.7.16.3
log
@Merge in -current from about a week ago
@
text
@d84 2
a85 2
static __inline struct trapframe *process_frame(struct proc *);
static __inline struct save87 *process_fpframe(struct proc *);
a161 2
#ifdef PTRACE

a271 2

#endif	/* PTRACE */
@


1.7.16.4
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7.16.3 2002/03/28 10:31:04 niklas Exp $	*/
a181 1
#if 0
d183 1
d190 3
a192 3
			 (gdt[slot].sd.sd_type & SDT_MEMRO) != 0 && \
			 gdt[slot].sd.sd_dpl == SEL_UPL && \
			 gdt[slot].sd.sd_p == 1)
a196 1
#endif
a204 2
		/* XXX Is this safe to remove. */
#if 0
a209 1
#endif
@


1.7.16.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7.16.4 2003/05/15 04:08:02 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7.16.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d81 1
a81 1
static __inline union savefpu *process_fpframe(struct proc *);
d84 2
a85 1
process_frame(struct proc *p)
d91 3
a93 2
static __inline union savefpu *
process_fpframe(struct proc *p)
d96 1
a96 69
	return (&p->p_addr->u_pcb.pcb_savefpu);
}

void
process_xmm_to_s87(const struct savexmm *sxmm, struct save87 *s87)
{
	int i;

	/* FPU control/status */
	s87->sv_env.en_cw = sxmm->sv_env.en_cw;
	s87->sv_env.en_sw = sxmm->sv_env.en_sw;
	/* tag word handled below */
	s87->sv_env.en_fip = sxmm->sv_env.en_fip;
	s87->sv_env.en_fcs = sxmm->sv_env.en_fcs;
	s87->sv_env.en_opcode = sxmm->sv_env.en_opcode;
	s87->sv_env.en_foo = sxmm->sv_env.en_foo;
	s87->sv_env.en_fos = sxmm->sv_env.en_fos;

	/* Tag word and registers. */
	for (i = 0; i < 8; i++) {
		if (sxmm->sv_env.en_tw & (1U << i))
			s87->sv_env.en_tw &= ~(3U << (i * 2));
		else
			s87->sv_env.en_tw |= (3U << (i * 2));

		if (sxmm->sv_ex_tw & (1U << i))
			s87->sv_ex_tw &= ~(3U << (i * 2));
		else
			s87->sv_ex_tw |= (3U << (i * 2));

		memcpy(&s87->sv_ac[i].fp_bytes, &sxmm->sv_ac[i].fp_bytes,
		    sizeof(s87->sv_ac[i].fp_bytes));
	}

	s87->sv_ex_sw = sxmm->sv_ex_sw;
}

void
process_s87_to_xmm(const struct save87 *s87, struct savexmm *sxmm)
{
	int i;

	/* FPU control/status */
	sxmm->sv_env.en_cw = s87->sv_env.en_cw;
	sxmm->sv_env.en_sw = s87->sv_env.en_sw;
	/* tag word handled below */
	sxmm->sv_env.en_fip = s87->sv_env.en_fip;
	sxmm->sv_env.en_fcs = s87->sv_env.en_fcs;
	sxmm->sv_env.en_opcode = s87->sv_env.en_opcode;
	sxmm->sv_env.en_foo = s87->sv_env.en_foo;
	sxmm->sv_env.en_fos = s87->sv_env.en_fos;

	/* Tag word and registers. */
	for (i = 0; i < 8; i++) {
		if (((s87->sv_env.en_tw >> (i * 2)) & 3) == 3)
			sxmm->sv_env.en_tw &= ~(1U << i);
		else
			sxmm->sv_env.en_tw |= (1U << i);

		if (((s87->sv_ex_tw >> (i * 2)) & 3) == 3)
			sxmm->sv_ex_tw &= ~(1U << i);
		else
			sxmm->sv_ex_tw |= (1U << i);

		memcpy(&sxmm->sv_ac[i].fp_bytes, &s87->sv_ac[i].fp_bytes,
		    sizeof(sxmm->sv_ac[i].fp_bytes));
	}

	sxmm->sv_ex_sw = s87->sv_ex_sw;
d145 1
a145 1
		union savefpu *frame = process_fpframe(p);
d151 1
a151 8
		if (i386_use_fxsave) {
			struct save87 s87;

			/* XXX Yuck */
			process_xmm_to_s87(&frame->sv_xmm, &s87);
			memcpy(regs, &s87, sizeof(*regs));
 		} else
			bcopy(frame, regs, sizeof(*frame));
d153 1
a153 1
		bzero(regs, sizeof(*regs));
d237 1
a237 1
	union savefpu *frame = process_fpframe(p);
a238 1
	if (p->p_md.md_flags & MDP_USEDFPU) {
d240 1
a240 1
		npxdrop();
a241 2
	} else
		p->p_md.md_flags |= MDP_USEDFPU;
d243 2
a244 8
	if (i386_use_fxsave) {
		struct save87 s87;

		/* XXX Yuck. */
		memcpy(&s87, regs, sizeof(*regs));
		process_s87_to_xmm(&s87, &frame->sv_xmm);
	} else
		memcpy(&frame->sv_87, regs, sizeof(*regs));
a251 1
	int sstep;
@


1.7.16.7
log
@Import NetBSD updates to NPX logic, and IPI API
@
text
@d214 1
a214 1
		npxsave_proc(p, 1);
d314 1
a314 1
		npxsave_proc(p, 0);
@


1.7.16.8
log
@Merge with the trunk
@
text
@d224 1
a224 1
			bcopy(frame, regs, sizeof(*regs));
@


1.6
log
@clean & sync
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 1996/05/07 07:21:53 deraadt Exp $	*/
d100 1
a100 1
	return (&p->p_addr->u_pcb.pcb_savefpu);
@


1.5
log
@sync with 0504; prototype changes
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.4 1996/04/21 22:16:34 deraadt Exp $	*/
d196 7
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD: process_machdep.c,v 1.3 1996/04/17 05:18:56 mickey Exp $	*/
/*	$NetBSD: process_machdep.c,v 1.21 1996/04/11 07:47:48 mycroft Exp $	*/
d84 4
a87 1
static inline struct trapframe *
d95 1
a95 1
static inline struct save87 *
@


1.3
log
@Cleanups & fixes from latest NetBSD primarily to run doscmd, etc.
GENERIC added to the compile/.cvsignore (it is used for 'make links'
for example), thus conf/GENERIC should appear magically ...
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a192 7

		/*
		 * Check for security violations.
		 */
		if (((regs->r_eflags ^ tf->tf_eflags) & PSL_USERSTATIC) != 0 ||
		    !USERMODE(regs->r_cs, regs->r_eflags))
			return (EINVAL);
@


1.2
log
@from netbsd; Make a small attempt to deal better with VM86 mode in GDB
@
text
@d1 2
a2 1
/*	$NetBSD: process_machdep.c,v 1.20 1996/01/13 06:14:44 mycroft Exp $	*/
d5 1
a5 1
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
d114 1
a114 3
		regs->r_eflags = tf->tf_eflags;
		SETFLAGS(regs->r_eflags, VM86_EFLAGS(p),
			 VM86_FLAGMASK(p)|PSL_VIF);
a167 7
	/*
	 * Check for security violations.
	 */
	if (((regs->r_eflags ^ tf->tf_eflags) & PSL_USERSTATIC) != 0 ||
	    !USERMODE(regs->r_cs, regs->r_eflags))
		return (EINVAL);

d174 1
a174 3
		tf->tf_eflags = regs->r_eflags;
		SETFLAGS(VM86_EFLAGS(p), regs->r_eflags,
			 VM86_FLAGMASK(p)|PSL_VIF);
d193 7
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: process_machdep.c,v 1.19 1995/10/11 04:19:47 mycroft Exp $	*/
d79 4
d113 3
d123 1
d125 11
a135 12
	regs->r_edi    = tf->tf_edi;
	regs->r_esi    = tf->tf_esi;
	regs->r_ebp    = tf->tf_ebp;
	regs->r_ebx    = tf->tf_ebx;
	regs->r_edx    = tf->tf_edx;
	regs->r_ecx    = tf->tf_ecx;
	regs->r_eax    = tf->tf_eax;
	regs->r_eip    = tf->tf_eip;
	regs->r_cs     = tf->tf_cs;
	regs->r_eflags = tf->tf_eflags;
	regs->r_esp    = tf->tf_esp;
	regs->r_ss     = tf->tf_ss;
d182 3
d212 3
a214 2
		tf->tf_es   = regs->r_es;
		tf->tf_ds   = regs->r_ds;
d216 11
a226 12
	tf->tf_edi    = regs->r_edi;
	tf->tf_esi    = regs->r_esi;
	tf->tf_ebp    = regs->r_ebp;
	tf->tf_ebx    = regs->r_ebx;
	tf->tf_edx    = regs->r_edx;
	tf->tf_ecx    = regs->r_ecx;
	tf->tf_eax    = regs->r_eax;
	tf->tf_eip    = regs->r_eip;
	tf->tf_cs     = regs->r_cs;
	tf->tf_eflags = regs->r_eflags;
	tf->tf_esp    = regs->r_esp;
	tf->tf_ss     = regs->r_ss;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
