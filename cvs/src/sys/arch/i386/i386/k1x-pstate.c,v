head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.2
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2017.09.08.05.36.51;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	uRv5pa9QDlZaYgwD;

1.8
date	2015.09.08.07.12.56;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	UsnEcDGT4QqqoPvB;

1.7
date	2014.09.14.14.17.23;	author jsg;	state Exp;
branches;
next	1.6;
commitid	uzzBR7hz9ncd4O6G;

1.6
date	2014.07.12.18.44.41;	author tedu;	state Exp;
branches;
next	1.5;
commitid	uKVPYMN2MLxdZxzH;

1.5
date	2013.10.05.18.47.05;	author brynet;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.31.01.59.20;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.07.05.55.08;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.29.12.29.28;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.23.09.54.20;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.9
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: k1x-pstate.c,v 1.8 2015/09/08 07:12:56 deraadt Exp $ */
/*
 * Copyright (c) 2011 Bryan Steele <brynet@@gmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* AMD K10/K11 pstate driver */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/sysctl.h>

#include <machine/cpu.h>
#include <machine/cpufunc.h>
#include <machine/bus.h>

#include "acpicpu.h"

#if NACPICPU > 0
#include <dev/acpi/acpidev.h>
#include <dev/acpi/acpivar.h>
#endif

extern int setperf_prio;

#define MSR_K1X_LIMIT		0xc0010061
#define MSR_K1X_CONTROL		0xc0010062
#define MSR_K1X_STATUS		0xc0010063
#define MSR_K1X_CONFIG		0xc0010064

/* MSR_K1X_LIMIT */
#define K1X_PSTATE_MAX_VAL(x)	(((x) >> 4) & 0x7)
#define K1X_PSTATE_LIMIT(x)	(((x)) & 0x7)

/* MSR_K1X_CONFIG */
#define K1X_FID(x)		((x) & 0x3f)
#define K1X_DID(x)		(((x) >> 6) & 0x07)

/* Maximum pstates */
#define K1X_MAX_STATES		16

struct k1x_state {
	int freq;
	u_int8_t fid;
};

struct k1x_cpu_state {
	struct k1x_state state_table[K1X_MAX_STATES];
	u_int n_states;
};

struct k1x_cpu_state *k1x_current_state;

void k1x_transition(struct k1x_cpu_state *, int);

#if NACPICPU > 0
void k1x_acpi_init(struct k1x_cpu_state *);
void k1x_acpi_states(struct k1x_cpu_state *, struct acpicpu_pss *, int);
#endif

void
k1x_setperf(int level)
{
	u_int i = 0;
	struct k1x_cpu_state *cstate;

	cstate = k1x_current_state;

	i = ((level * cstate->n_states) + 1) / 101;
	if (i >= cstate->n_states)
		i = cstate->n_states - 1;

	k1x_transition(cstate, i);
}

void
k1x_transition(struct k1x_cpu_state *cstate, int level)
{
	u_int64_t msr;
	int i, cfid, fid = cstate->state_table[level].fid;

	msr = rdmsr(MSR_K1X_STATUS);
	cfid = K1X_FID(msr);

	if (fid == cfid)
		return;

	if (cfid != fid) {
		wrmsr(MSR_K1X_CONTROL, fid);
		for (i = 0; i < 100; i++) {
			msr = rdmsr(MSR_K1X_STATUS);
			if (K1X_FID(msr) == fid)
				break;
			DELAY(100);
		}
		cfid = K1X_FID(msr);
	}
	if (cfid == fid) {
		cpuspeed = cstate->state_table[level].freq;
#if 0
		(void)printf("Target: %d Current: %d Pstate: %d\n",
		    cstate->state_table[level].freq,
		    cpuspeed, cfid);
#endif
	}
}

#if NACPICPU > 0

void
k1x_acpi_states(struct k1x_cpu_state *cstate, struct acpicpu_pss *pss,
    int nstates)
{
	struct k1x_state state;
	int j, n;
	u_int32_t ctrl;

	for (n = 0; n < cstate->n_states; n++) {
		ctrl = pss[n].pss_ctrl;
		state.fid = K1X_FID(ctrl);
		state.freq = pss[n].pss_core_freq;
		j = n;
		while (j > 0 && cstate->state_table[j - 1].freq > state.freq) {
			memcpy(&cstate->state_table[j],
			    &cstate->state_table[j - 1],
			    sizeof(struct k1x_state));
			--j;
		}
		memcpy(&cstate->state_table[j], &state,
		    sizeof(struct k1x_state));
	}
}

void
k1x_acpi_init(struct k1x_cpu_state *cstate)
{
	struct acpicpu_pss *pss;

	cstate->n_states = acpicpu_fetch_pss(&pss);
	if (cstate->n_states == 0)
		return;

	k1x_acpi_states(cstate, pss, cstate->n_states);

	return;
}

#endif /* NACPICPU */

void
k1x_init(struct cpu_info *ci)
{
	struct k1x_cpu_state *cstate;
	struct k1x_state *state;
	u_int i;

	if (setperf_prio > 1)
		return;

	cstate = malloc(sizeof(struct k1x_cpu_state), M_DEVBUF, M_NOWAIT);
	if (!cstate)
		return;

	cstate->n_states = 0;

#if NACPICPU > 0
	k1x_acpi_init(cstate);
#endif
	if (cstate->n_states) {
		printf("%s: %d MHz: speeds:",
		    ci->ci_dev.dv_xname, cpuspeed);
		for (i = cstate->n_states; i > 0; i--) {
			state = &cstate->state_table[i-1];
			printf(" %d", state->freq);
		}
		printf(" MHz\n");
		k1x_current_state = cstate;
		cpu_setperf = k1x_setperf;
		setperf_prio = 1;
		return;
	}
	free(cstate, M_DEVBUF, sizeof(*cstate));
}
@


1.8
log
@sizes for free(); ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.7 2014/09/14 14:17:23 jsg Exp $ */
a26 1
#include <sys/types.h>
@


1.7
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.6 2014/07/12 18:44:41 tedu Exp $ */
d202 1
a202 1
	free(cstate, M_DEVBUF, 0);
@


1.6
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.5 2013/10/05 18:47:05 brynet Exp $ */
a30 1
#include <sys/proc.h>
@


1.5
log
@Use K1X_FID macro on msr read.
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.4 2012/01/31 01:59:20 jsg Exp $ */
d203 1
a203 1
	free(cstate, M_DEVBUF);
@


1.4
log
@remove an unused msr read
from Bryan Steele
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.3 2012/01/07 05:55:08 jsg Exp $ */
d113 1
a113 1
			if (msr == fid)
@


1.3
log
@Check that we have pstates in _PSS before calling the pstate status MSR.
While the docs say we should check a bit in cpuid this should work as well.

Fixes problems related a fictitious AMD machine dreamed up by Linux KVM.
Reported/tested by Walter Haidinger, diff from Bryan Steele.
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.2 2011/05/29 12:29:28 claudio Exp $ */
d79 1
a79 2
void k1x_acpi_states(struct k1x_cpu_state *, struct acpicpu_pss *, int,
    u_int64_t);
d133 1
a133 1
    int nstates, u_int64_t msr)
a158 1
	u_int64_t msr;
d164 1
a164 3
	msr = rdmsr(MSR_K1X_STATUS);

	k1x_acpi_states(cstate, pss, cstate->n_states, msr);
@


1.2
log
@Let this compile on kernels without acpicpu.
Problem found by Nathanael Rensen (nathanael at polymorpheus dot com)
@
text
@d1 1
a1 1
/*	$OpenBSD: k1x-pstate.c,v 1.1 2011/05/23 09:54:20 claudio Exp $ */
d78 1
a78 1
void k1x_acpi_init(struct k1x_cpu_state *, u_int64_t);
d157 1
a157 1
k1x_acpi_init(struct k1x_cpu_state *cstate, u_int64_t msr)
d160 1
d166 2
a177 4
#if NACPICPU > 0
	u_int64_t msr;
#endif
	u_int i;
d180 1
d192 1
a192 2
	msr = rdmsr(MSR_K1X_STATUS);
	k1x_acpi_init(cstate, msr);
@


1.1
log
@AMD K10/K11 pstate driver allows setperf and apm to change CPU
frequencies on newer AMD systems.
Driver written by Bryan Steele / brynet gmail.com adjusted for i386
by myself. Put it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d175 1
d177 1
@

