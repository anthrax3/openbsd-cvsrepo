head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.12
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.6
date	2014.09.14.14.17.23;	author jsg;	state Exp;
branches;
next	1.5;
commitid	uzzBR7hz9ncd4O6G;

1.5
date	2014.07.08.13.06.58;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	eL0jnb8G3buKIRY6;

1.4
date	2010.04.20.22.05.41;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.12.23.14.27;	author dim;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.08.09.50.29;	author kevlo;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.04.02.22.28.41;	author tedu;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.09.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@/*	$OpenBSD: powernow.c,v 1.5 2014/07/08 13:06:58 deraadt Exp $	*/
/*
 * Copyright (c) 2004 Ted Unangst
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * AMD K6 PowerNow driver, see AMD tech doc #23525
 * Numerous hints from Linux cpufreq driver
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/sysctl.h>

#include <machine/cpu.h>
#include <machine/cpufunc.h>
#include <machine/specialreg.h>
#include <machine/pio.h>

/* table 27 in amd 23535.  entries after 45 taken from linux cpufreq */
struct {
	int mult;	/* not actually used, maybe for cpuspeed */
	int magic;
} k6_multipliers[] = {
	{ 20, 4 },
	{ 30, 5 },
	{ 35, 7 },
	{ 40, 2 },
	{ 45, 0 },
	{ 55, 3 },
	{ 50, 1 },
	{ 60, 6 },
};
#define NUM_K6_ENTRIES (sizeof k6_multipliers / sizeof k6_multipliers[0])

int	k6_maxindex;	/* no setting higher than this */

/* linux says: "it doesn't matter where, as long as it is unused */
#define K6PORT 0xfff0

void
k6_powernow_init(void)
{
	uint64_t msrval;
	uint32_t portval;
	int i;

	/* on */
	msrval = K6PORT | 0x1;
	wrmsr(MSR_K6_EPMR, msrval);
	/* read */
	portval = inl(K6PORT + 8);
	/* off */
	wrmsr(MSR_K6_EPMR, 0LL);

	portval = (portval >> 5) & 7;

	for (i = 0; i < NUM_K6_ENTRIES; i++)
		if (portval == k6_multipliers[i].magic) {
			k6_maxindex = i;
			break;
		}
	if (i == NUM_K6_ENTRIES) {
		printf("bad value for current multiplier\n");
		return;
	}

	cpu_setperf = k6_powernow_setperf;
}

void
k6_powernow_setperf(int level)
{
	uint64_t msrval;
	uint32_t portval;
	int index;

	index = level * k6_maxindex / 100;

	/* on */
	msrval = K6PORT | 0x1;
	wrmsr(MSR_K6_EPMR, msrval);
	/* read and update */
	portval = inl(K6PORT + 8);
	portval &= 0xf;
	portval |= 1 << 12 | 1 << 10 | 1 << 9 |
	    k6_multipliers[index].magic << 5;
	outl(K6PORT + 8, portval);
	/* off */
	wrmsr(MSR_K6_EPMR, 0LL);
}
@


1.5
log
@A few missing sys/systm.h includes.  Soon the universes dragged in via
uvm_extern.h, uvm_param.h, and sysctl.h will no longer gaurantee that
_KERNEL code gets it.
@
text
@d1 1
a1 1
/*	$OpenBSD: powernow.c,v 1.4 2010/04/20 22:05:41 tedu Exp $	*/
a25 1
#include <sys/proc.h>
@


1.4
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: powernow.c,v 1.3 2006/12/12 23:14:27 dim Exp $	*/
d25 1
@


1.3
log
@Complete gwk's previous patch to stop setperf methods from returning
errors to userland: make all cpu_setperf functions return void.

Tested by many, ok gwk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: powernow.c,v 1.2 2004/04/08 09:50:29 kevlo Exp $	*/
d25 1
@


1.2
log
@add RCS id
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 1
a83 1
int
a102 2

	return (0);
@


1.2.2.1
log
@Merge with the trunk
@
text
@@


1.1
log
@K6-2/3 powernow driver.  not without quirks, but mostly working.
testing by david@@ ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD */
@

