head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.44
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.40
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.42
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.34
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.38
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.36
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.32
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.30
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.28
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.26
	OPENBSD_5_0:1.10.0.24
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.22
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.20
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.16
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.18
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2005.12.13.02.31.45;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.30.11.46.57;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.28.22.13.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.28.22.11.07;	author jordan;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.28.20.27.43;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.24.08.57.05;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.23.01.07.40;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.22.21.51.19;	author jordan;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.21.22.05.36;	author marco;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.21.17.23.19;	author jordan;	state Exp;
branches;
next	;


desc
@@


1.10
log
@the status field for power supplies is different to the rest of the
sensors. as a result i wasnt being shown that i have a failed power supply.

power supplies now show up like this:
hw.sensors.14=esm0, Power Supply 1, OK, raw, 65359
hw.sensors.15=esm0, Power Supply 2, OK, raw, 65359
hw.sensors.16=esm0, Power Supply 3, CRITICAL, raw, 65347

anyone got a spare 2500 power supply they want to send to me?

ok deraadt@@ marco@@ jordan@@
VS: ----------------------------------------------------------------------
@
text
@/*	$OpenBSD: esmreg.h,v 1.9 2005/11/30 11:46:57 dlg Exp $ */

/*
 * Copyright (c) 2005 Jordan Hargrave <jordan@@openbsd.org>
 * Copyright (c) 2005 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define ESM2_BASE_PORT		0xe0

#define ESM2_CTRL_REG		4
#define ESM2_DATA_REG		5
#define ESM2_INTMASK_REG	6

#define ESM2_TC_CLR_WPTR	(1L << 0)
#define ESM2_TC_CLR_RPTR	(1L << 1)
#define ESM2_TC_H2ECDB		(1L << 2)
#define ESM2_TC_EC2HDB		(1L << 3)
#define ESM2_TC_EVENTDB		(1L << 4)
#define ESM2_TC_HBDB		(1L << 5)
#define ESM2_TC_HOSTBUSY	(1L << 6)
#define ESM2_TC_ECBUSY		(1L << 7)
#define ESM2_TC_READY		(ESM2_TC_EC2HDB | ESM2_TC_H2ECDB | \
    ESM2_TC_ECBUSY)
#define ESM2_TC_POWER_UP_BITS	(ESM2_TC_CLR_WPTR | ESM2_TC_CLR_RPTR | \
    ESM2_TC_EC2HDB | ESM2_TC_EVENTDB)

#define ESM2_TIM_HIRQ_PEND	(1L << 1)
#define ESM2_TIM_SCI_EN		(1L << 2)
#define ESM2_TIM_SMI_EN		(1L << 3)
#define ESM2_TIM_NMI2SMI	(1L << 4)
#define ESM2_TIM_POWER_UP_BITS	(ESM2_TIM_HIRQ_PEND)

#define ESM2_CMD_NOOP			0x00
#define ESM2_CMD_ECHO			0x01
#define ESM2_CMD_DEVICEMAP		0x03
#define  ESM2_DEVICEMAP_READ			0x00

#define ESM2_CMD_HWDC			0x05 /* Host Watch Dog Control */
#define  ESM2_HWDC_WRITE_STATE			0x01
#define  ESM2_HWDC_READ_PROPERTY		0x02
#define  ESM2_HWDC_WRITE_PROPERTY		0x03

#define ESM2_CMD_SMB_BUF		0x20
#define ESM2_CMD_SMB_BUF_XMIT_RECV	0x21
#define ESM2_CMD_SMB_XMIT_RECV		0x22
#define  ESM2_SMB_SENSOR_VALUE			0x04
#define  ESM2_SMB_SENSOR_THRESHOLDS		0x19

#define ESM2_MAX_CMD_LEN	0x20
#define ESM2_UUID_LEN		0x08

#define DELL_SYSSTR_ADDR	0xFE076L
#define DELL_SYSID_ADDR		0xFE840L

#define DELL_SYSID_2300		0x81
#define DELL_SYSID_4300		0x7C
#define DELL_SYSID_4350		0x84
#define DELL_SYSID_6300		0x7F
#define DELL_SYSID_6350		0x83
#define DELL_SYSID_2400		0x9B
#define DELL_SYSID_2450		0xA6
#define DELL_SYSID_4400		0x9A
#define DELL_SYSID_6400		0x9C
#define DELL_SYSID_6450		0xA2
#define DELL_SYSID_2500		0xD9
#define DELL_SYSID_2550		0xD1
#define DELL_SYSID_PV530F	0xCD
#define DELL_SYSID_PV735N	0xE2
#define DELL_SYSID_PV750N	0xEE
#define DELL_SYSID_PV755N	0xEF
#define DELL_SYSID_PA200	0xCB
#define DELL_SYSID_EXT		0xFE

struct dell_sysid {
	u_int16_t		ext_id;
	u_int8_t		bios_ver[3];
	u_int8_t		sys_id;
} __packed;

struct esm_wdog_prop {
	u_int8_t		cmd;
	u_int8_t		reserved;
	u_int8_t		subcmd;
	u_int8_t		action;
	u_int32_t		time;
} __packed;

#define ESM_WDOG_DISABLE	0x00
#define ESM_WDOG_PWROFF		(1L << 1)
#define ESM_WDOG_PWRCYCLE	(1L << 2)
#define ESM_WDOG_RESET		(1L << 3)
#define ESM_WDOG_NOTIFY		(1L << 4)

struct esm_wdog_state {
	u_int8_t		cmd;
	u_int8_t		reserved;
	u_int8_t		subcmd;
	u_int8_t		state;
} __packed;

struct esm_devmap {
	u_int8_t		index;
	u_int8_t		dev_major;
	u_int8_t		dev_minor;
	u_int8_t		rev_major;
	u_int8_t		rev_minor;
	u_int8_t		rev_rom;
	u_int8_t		smb_addr;
	u_int8_t		status;
	u_int8_t		monitor_type;
	u_int8_t		pollcycle;
	u_int8_t		uniqueid[ESM2_UUID_LEN];
} __packed;

struct esm_devmap_req {
	u_int8_t		cmd;
	u_int8_t		initiator;
	u_int8_t		action;
	u_int8_t		index;
	u_int8_t		ndev;
} __packed;

struct esm_devmap_resp {
	u_int8_t		status;
	u_int8_t		ndev;
	struct esm_devmap	devmap[1]; /* request one map at a time */
} __packed;

/* ESM SMB requests */

struct esm_smb_req_val {
	u_int8_t		v_cmd;
	u_int8_t		v_initiator;
	u_int8_t		v_sensor;
} __packed;

struct esm_smb_req_thr {
	u_int8_t		t_cmd;
	u_int8_t		t_sensor;
} __packed;

struct esm_smb_req {
	struct {
		u_int8_t		_cmd;
		u_int8_t		_dev;
		u_int8_t		_txlen;
		u_int8_t		_rxlen;
	} __packed hdr;
#define h_cmd		hdr._cmd
#define h_dev		hdr._dev
#define h_txlen		hdr._txlen
#define h_rxlen		hdr._rxlen

	union {
		struct esm_smb_req_val	_val;
		struct esm_smb_req_thr	_thr;
	} __packed _;
#define req_val		_._val
#define req_thr		_._thr

} __packed;

/* ESM SMB responses */

struct esm_smb_resp_val {
	u_int16_t		v_reading;
	u_int8_t		v_status;
	u_int8_t		v_checksum;
} __packed;

struct esm_smb_resp_thr {
	u_int8_t		t_sensor;
	u_int16_t		t_lo_fail;
	u_int16_t		t_hi_fail;
	u_int16_t		t_lo_warn;
	u_int16_t		t_hi_warn;
	u_int16_t		t_hysterisis;
	u_int8_t		t_checksum;
} __packed;

struct esm_smb_resp {
	struct {
		u_int8_t		_status;
		u_int8_t		_i2csts;
		u_int8_t		_procsts;
		u_int8_t		_tx;
		u_int8_t		_rx;
	} __packed hdr;
#define h_status	hdr._status
#define h_i2csts	hdr._i2csts
#define h_procsts	hdr._procsts
#define h_tx		hdr._tx
#define h_rx		hdr._rx

	union {
		struct esm_smb_resp_val	_val;
		struct esm_smb_resp_thr	_thr;
	} __packed _;
#define resp_val _._val
#define resp_thr _._thr
} __packed;

/* esm_smb_resp_val drive values */
#define ESM2_V_DRV_EMPTY	1
#define ESM2_V_DRV_READY	2
#define ESM2_V_DRV_POWERUP	3
#define ESM2_V_DRV_ONLINE	4
#define ESM2_V_DRV_IDLE		5
#define ESM2_V_DRV_ACTIVE	6
#define ESM2_V_DRV_REBUILD	7
#define ESM2_V_DRV_POWERDOWN	8
#define ESM2_V_DRV_FAIL		9
#define ESM2_V_DRV_PFAIL	10

/* esm_smb_resp_val powersupply values */
#define ESM2_V_PSU_ID(x)	((x)>>8 & 0xff)
#define ESM2_V_PSU_AC		(1<<0)
#define ESM2_V_PSU_SW		(1<<1)
#define ESM2_V_PSU_OK		(1<<2)
#define ESM2_V_PSU_ON		(1<<3)
#define ESM2_V_PSU_FFAN		(1<<4)
#define ESM2_V_PSU_OTMP		(1<<5)

/* esm_smb_resp_val status */
#define ESM2_VS_VALID		(1<<2)
/* the powersupplies have a special status field */
#define ESM2_VS_PSU_INST	(1<<0)
#define ESM2_VS_PSU_PSON	(1<<1)
#define ESM2_VS_PSU_FAIL	(1<<2)
#define ESM2_VS_PSU_PSDB	(1<<3)

enum esm_dev_type {
	ESM2_DEV_ESM2 = 1,
	ESM2_DEV_DRACII,
	ESM2_DEV_FRONT_PANEL,
	ESM2_DEV_BACKPLANE2,
	ESM2_DEV_POWERUNIT2,
	ESM2_DEV_ENCL2_BACKPLANE,
	ESM2_DEV_ENCL2_POWERUNIT,
	ESM2_DEV_ENCL1_BACKPLANE,
	ESM2_DEV_ENCL1_POWERUNIT,
	ESM2_DEV_HPPCI,
	ESM2_DEV_BACKPLANE3
};

enum esm_dev_esm2_type {
	ESM2_DEV_ESM2_2300 = 0,
	ESM2_DEV_ESM2_4300,
	ESM2_DEV_ESM2_6300,
	ESM2_DEV_ESM2_6400,
	ESM2_DEV_ESM2_2550,
	ESM2_DEV_ESM2_4350,
	ESM2_DEV_ESM2_6350,
	ESM2_DEV_ESM2_6450,
	ESM2_DEV_ESM2_2400,
	ESM2_DEV_ESM2_4400,
	ESM2_DEV_ESM2_R0, /* reserved */
	ESM2_DEV_ESM2_2500,
	ESM2_DEV_ESM2_2450,
	ESM2_DEV_ESM2_R1, /* reserved */
	ESM2_DEV_ESM2_R2, /* reserved */
	ESM2_DEV_ESM2_2400EX,
	ESM2_DEV_ESM2_2450EX
};

@


1.9
log
@determine the status of fan, volt, and temp sensors by reading the
thresholds off at attach and then comparing the value at update to these
cutoffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.8 2005/11/28 22:13:49 deraadt Exp $ */
d215 28
a242 5
#define ESM2_VS_VALID		0x07
#define ESM2_VS_SLOT		0x04

#define isValidSensor(state) (((state) & ESM_STATE_MASK) == ESM_VALID_SENSOR)
#define isValidSlot(state)   (((state) & ESM_VALID_SLOT) == ESM_VALID_SLOT)
@


1.8
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.7 2005/11/28 22:11:07 jordan Exp $ */
a140 1

a142 3
struct esm_smb_req_hdr {
} __packed;

d149 5
d168 1
d171 1
d183 10
d209 1
d212 1
@


1.7
log
@Added dlg@@ watchdog code for enabling ESM2 watchdog timer
Fixes for watchdog code by jordan@@
Spacing fixes in esmreg
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.6 2005/11/28 20:27:43 jordan Exp $ */
d55 3
a57 3
#define ESM2_CMD_SMB_BUF	   	0x20
#define ESM2_CMD_SMB_BUF_XMIT_RECV 	0x21
#define ESM2_CMD_SMB_XMIT_RECV	   	0x22
d64 2
a65 2
#define DELL_SYSSTR_ADDR        0xFE076L
#define DELL_SYSID_ADDR         0xFE840L
d67 18
a84 18
#define DELL_SYSID_2300         0x81
#define DELL_SYSID_4300         0x7C
#define DELL_SYSID_4350         0x84
#define DELL_SYSID_6300         0x7F
#define DELL_SYSID_6350         0x83
#define DELL_SYSID_2400         0x9B
#define DELL_SYSID_2450         0xA6
#define DELL_SYSID_4400         0x9A
#define DELL_SYSID_6400         0x9C
#define DELL_SYSID_6450         0xA2
#define DELL_SYSID_2500         0xD9
#define DELL_SYSID_2550         0xD1
#define DELL_SYSID_PV530F       0xCD
#define DELL_SYSID_PV735N       0xE2
#define DELL_SYSID_PV750N       0xEE
#define DELL_SYSID_PV755N       0xEF
#define DELL_SYSID_PA200        0xCB
#define DELL_SYSID_EXT          0xFE
d87 3
a89 3
	u_int16_t    		ext_id;
	u_int8_t     		bios_ver[3];
	u_int8_t     		sys_id;
@


1.6
log
@Added sysids for PowerVault/PowerApp ESM2 systems
Changed Register names to be more readable
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.5 2005/11/24 08:57:05 dlg Exp $ */
d45 15
a59 15
#define ESM2_CMD_NOOP		0x00
#define ESM2_CMD_ECHO		0x01
#define ESM2_CMD_DEVICEMAP	0x03
#define  ESM2_DEVICEMAP_READ		0

#define ESM2_CMD_SMB_BUF	0x20
#define ESM2_CMD_SMB_BUF_XMIT_RECV 0x21
#define ESM2_CMD_SMB_XMIT_RECV	0x22
#define  ESM2_SMB_SENSOR_VALUE		0x04
#define  ESM2_SMB_SENSOR_THRESHOLDS	0x19

#define ESM2_CMD_HWDC		0x05 /* Host Watch Dog Control */
#define  ESM2_HWDC_WRITE_STATE		0x01
#define  ESM2_HWDC_READ_PROPERTY	0x02
#define  ESM2_HWDC_WRITE_PROPERTY	0x03
d66 1
d92 1
a92 1
struct esm_watchdog_prop {
d100 7
a106 1
struct esm_watchdog_state {
@


1.5
log
@#if 0 doesnt belong here
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.4 2005/11/23 01:07:40 dlg Exp $ */
d22 3
a24 3
#define ESM2_TC_REG		4
#define ESM2_TBUF_REG		5
#define ESM2_TIM_REG		6
d78 5
@


1.4
log
@merge probe and match since one is only ever called from the other. knf too

yup deraadt@@ ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.3 2005/11/22 21:51:19 jordan Exp $ */
a21 5
#if 0
#define ESM2_TC_REG		(ESM2_BASE_PORT + 4)
#define ESM2_TBUF_REG		(ESM2_BASE_PORT + 5)
#define ESM2_TIM_REG		(ESM2_BASE_PORT + 6)
#else
a24 1
#endif
@


1.3
log
@Added probing for Dell ESM server
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.2 2005/11/21 22:05:36 marco Exp $ */
d86 4
a89 5
struct dell_sysid
{
	uint16_t    		ext_id;
	uint8_t     		bios_ver[3];
	uint8_t     		sys_id;
@


1.2
log
@Fix copyrights.

ok jordan@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: esmreg.h,v 1.1 2005/11/21 17:23:19 jordan Exp $ */
d69 23
@


1.1
log
@Add support for ESM (Embedded Server Management) for Dell PowerEdge servers.

Lot's of work by dlg@@ ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
@

