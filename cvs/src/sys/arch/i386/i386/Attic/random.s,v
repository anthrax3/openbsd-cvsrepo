head	1.5;
access;
symbols
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	2008.10.10.20.21.39;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.04.17.03.42.14;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.04.08.57.47;	author niklas;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	96.08.10.21.41.08;	author deraadt;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.50.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.34;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.10.31.03.01.12;	author nate;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.05.13.19.42.08;	author ho;	state Exp;
branches;
next	;

1.3.4.1
date	2003.05.19.21.45.11;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Use the MI random() for all cases; no need for a MD version since it
has never been performance sensitive.
Running on all platforms, discussed with millert and kettenis, ok toby
@
text
@/*	$OpenBSD: random.s,v 1.4 2003/04/17 03:42:14 drahn Exp $	*/
/*	$NetBSD: random.s,v 1.5 1995/01/15 23:20:33 mycroft Exp $	*/

/*
 * Copyright (c) 1995 Charles Hannum.
 * Copyright (c) 1990,1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Here is a very good random number generator.  This implementation is
 * based on ``Two Fast Implementations of the "Minimal Standard" Random
 * Number Generator'', David G. Carta, Communications of the ACM, Jan 1990,
 * Vol 33 No 1.  Do NOT modify this code unless you have a very thorough
 * understanding of the algorithm.  It's trickier than you think.  If
 * you do change it, make sure that its 10,000'th invocation returns
 * 1043618065.
 *
 * Here is easier-to-decipher pseudocode:
 *
 * p = (16807*seed)<30:0>	# e.g., the low 31 bits of the product
 * q = (16807*seed)<62:31>	# e.g., the high 31 bits starting at bit 32
 * if (p + q < 2^31)
 * 	seed = p + q
 * else
 *	seed = ((p + q) & (2^31 - 1)) + 1
 * return (seed);
 *
 * The result is in (0,2^31), e.g., it's always positive.
 */
#include <machine/asm.h>

	.data
	.globl	_C_LABEL(_randseed)
_C_LABEL(_randseed):
	.long	1
	.text
ENTRY(random)
	movl	$16807,%eax
	imull	_C_LABEL(_randseed)
	shld	$1,%eax,%edx
	andl	$0x7fffffff,%eax
	addl	%edx,%eax
	js	1f
	movl	%eax,_C_LABEL(_randseed)
	ret
1:
	subl	$0x7fffffff,%eax
	movl	%eax,_C_LABEL(_randseed)
	ret
@


1.4
log
@i386 changes to move to ELF. asm cleanup. Change MAXDSIZ to 512M for 1Gsep.
DARPA funded work.
@
text
@d1 1
a1 1
/*	$OpenBSD: random.s,v 1.3 2001/07/04 08:57:47 niklas Exp $	*/
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: random.s,v 1.5 1995/01/15 23:20:33 mycroft Exp $	*/
d48 2
a49 2
	.globl	__randseed
__randseed:
d54 1
a54 1
	imull	__randseed
d59 1
a59 1
	movl	%eax,__randseed
d63 1
a63 1
	movl	%eax,__randseed
@


1.3.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 2
a49 2
	.globl	_C_LABEL(_randseed)
_C_LABEL(_randseed):
d54 1
a54 1
	imull	_C_LABEL(_randseed)
d59 1
a59 1
	movl	%eax,_C_LABEL(_randseed)
d63 1
a63 1
	movl	%eax,_C_LABEL(_randseed)
@


1.2
log
@srandom() seeds random() at boottime
@
text
@d1 1
@


1.2.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.2.16.2
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: random.s,v 1.2.16.1 2001/10/31 03:01:12 nate Exp $	*/
d48 2
a49 2
	.globl	_C_LABEL(_randseed)
_C_LABEL(_randseed):
d54 1
a54 1
	imull	_C_LABEL(_randseed)
d59 1
a59 1
	movl	%eax,_C_LABEL(_randseed)
d63 1
a63 1
	movl	%eax,_C_LABEL(_randseed)
@


1.1
log
@Initial revision
@
text
@d47 2
a48 1
randseed:
d53 1
a53 1
	imull	randseed
d58 1
a58 1
	movl	%eax,randseed
d62 1
a62 1
	movl	%eax,randseed
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
