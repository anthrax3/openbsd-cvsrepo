head	1.3;
access;
symbols
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.1.0.32
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.30
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.28
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.26
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.03.22.19.43.09;	author weingart;	state dead;
branches;
next	1.2;

1.2
date	2003.04.17.03.42.14;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	96.05.04.14.33.00;	author mickey;	state Exp;
branches
	1.1.16.1
	1.1.26.1;
next	;

1.1.16.1
date	2003.05.13.19.42.07;	author ho;	state Exp;
branches;
next	;

1.1.26.1
date	2003.05.19.21.45.11;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Nuke some unused magic.

ok deraadt@@
@
text
@/*	$OpenBSD: db_magic.s,v 1.2 2003/04/17 03:42:14 drahn Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1995 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#include <machine/asm.h>
#define S_ARG0         4(%esp)
#define S_ARG1         8(%esp)
#define S_ARG2        12(%esp)
#define S_ARG3        16(%esp)
#define B_ARG0         8(%ebp)
#define B_ARG1        12(%ebp)
#define B_ARG2        16(%ebp)
#define B_ARG3        20(%ebp)
/*
 * void outb(unsigned char *io_port,
 *         unsigned char byte)
 *
 * Output a byte to an IO port.
 */
ENTRY(outb)
      movl    S_ARG0,%edx             /* IO port address */
      movl    S_ARG1,%eax             /* data to output */
      outb    %al,%dx                 /* send it out */
      ret
/*
 * unsigned char inb(unsigned char *io_port)
 *
 * Input a byte from an IO port.
 */
ENTRY(inb)
      movl    S_ARG0,%edx             /* IO port address */
      xor     %eax,%eax               /* clear high bits of register */
      inb     %dx,%al                 /* get the byte */
      ret
/*
 * void outw(unsigned short *io_port,
 *         unsigned short word)
 *
 * Output a word to an IO port.
 */
ENTRY(outw)
      movl    S_ARG0,%edx             /* IO port address */
      movl    S_ARG1,%eax             /* data to output */
      outw    %ax,%dx                 /* send it out */
      ret
/*
 * unsigned short inw(unsigned short *io_port)
 *
 * Input a word from an IO port.
 */
ENTRY(inw)
      movl    S_ARG0,%edx             /* IO port address */
      xor     %eax,%eax               /* clear high bits of register */
      inw     %dx,%ax                 /* get the word */
      ret
/*
 * void outl(unsigned int *io_port,
 *         unsigned int byte)
 *
 * Output an int to an IO port.
 */
ENTRY(outl)
      movl    S_ARG0,%edx             /* IO port address */
      movl    S_ARG1,%eax             /* data to output */
      outl    %eax,%dx                /* send it out */
      ret
/*
 * unsigned int inl(unsigned int *io_port)
 *
 * Input an int from an IO port.
 */
ENTRY(inl)
      movl    S_ARG0,%edx             /* IO port address */
      inl     %dx,%eax                /* get the int */
      ret
ENTRY(dr6)
      movl    %db6, %eax
      ret
/*    dr<i>(address, type, len, persistence)
 *    type:
 *       00   execution (use len 00)
 *       01   data write
 *       11   data read/write
 *    len:
 *       00   one byte
 *       01   two bytes
 *       11   four bytes
 */
ENTRY(dr0)
      movl    S_ARG0, %eax
      movl    %eax,_C_LABEL(dr_addr)
      movl    %eax, %db0
      movl    $0, %ecx
      jmp     0f
ENTRY(dr1)
      movl    S_ARG0, %eax
      movl    %eax,_C_LABEL(dr_addr)+1*4
      movl    %eax, %db1
      movl    $2, %ecx
      jmp     0f
ENTRY(dr2)
      movl    S_ARG0, %eax
      movl    %eax,_C_LABEL(dr_addr)+2*4
      movl    %eax, %db2
      movl    $4, %ecx
      jmp     0f
ENTRY(dr3)
      movl    S_ARG0, %eax
      movl    %eax,_C_LABEL(dr_addr)+3*4
      movl    %eax, %db3
      movl    $6, %ecx
0:
      pushl   %ebp
      movl    %esp, %ebp
      movl    %db7, %edx
      movl    %edx,_C_LABEL(dr_addr)+4*4
      andl    dr_msk(,%ecx,2),%edx    /* clear out new entry */
      movl    %edx,_C_LABEL(dr_addr)+5*4
      movzbl  B_ARG3, %eax
      andb    $3, %al
      shll    %cl, %eax
      orl     %eax, %edx
      movzbl  B_ARG1, %eax
      andb    $3, %al
      add     $0x10, %ecx
      shll    %cl, %eax
      orl     %eax, %edx
      movzbl  B_ARG2, %eax
      andb    $3, %al
      add     $0x2, %ecx
      shll    %cl, %eax
      orl     %eax, %edx
      movl    %edx, %db7
      movl    %edx,_C_LABEL(dr_addr)+7*4
      movl    %edx, %eax
      leave
      ret
      .data
dr_msk:
      .long   ~0x000f0003
      .long   ~0x00f0000c
      .long   ~0x0f000030
      .long   ~0xf00000c0
ENTRY(dr_addr)
      .long   0,0,0,0
      .long   0,0,0,0
      .text

@


1.2
log
@i386 changes to move to ELF. asm cleanup. Change MAXDSIZ to 512M for 1Gsep.
DARPA funded work.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_magic.s,v 1.1 1996/05/04 14:33:00 mickey Exp $	*/
@


1.1
log
@missed from last commit.
from MACH: add {in,out}[wb] functions and dr* operations.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 1
a115 1
      movl    %eax,_dr_addr
d121 1
a121 1
      movl    %eax,_dr_addr+1*4
d127 1
a127 1
      movl    %eax,_dr_addr+2*4
d133 1
a133 1
      movl    %eax,_dr_addr+3*4
d140 1
a140 1
      movl    %edx,_dr_addr+4*4
d142 1
a142 1
      movl    %edx,_dr_addr+5*4
d149 1
a149 1
      addb    $0x10, %ecx
d154 1
a154 1
      addb    $0x2, %ecx
d158 1
a158 1
      movl    %edx,_dr_addr+7*4
@


1.1.26.1
log
@sync
@
text
@d115 1
a115 1
      movl    %eax,_C_LABEL(dr_addr)
d121 1
a121 1
      movl    %eax,_C_LABEL(dr_addr)+1*4
d127 1
a127 1
      movl    %eax,_C_LABEL(dr_addr)+2*4
d133 1
a133 1
      movl    %eax,_C_LABEL(dr_addr)+3*4
d140 1
a140 1
      movl    %edx,_C_LABEL(dr_addr)+4*4
d142 1
a142 1
      movl    %edx,_C_LABEL(dr_addr)+5*4
d149 1
a149 1
      add     $0x10, %ecx
d154 1
a154 1
      add     $0x2, %ecx
d158 1
a158 1
      movl    %edx,_C_LABEL(dr_addr)+7*4
@


1.1.16.1
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_magic.s,v 1.1 1996/05/04 14:33:00 mickey Exp $	*/
d115 1
a115 1
      movl    %eax,_C_LABEL(dr_addr)
d121 1
a121 1
      movl    %eax,_C_LABEL(dr_addr)+1*4
d127 1
a127 1
      movl    %eax,_C_LABEL(dr_addr)+2*4
d133 1
a133 1
      movl    %eax,_C_LABEL(dr_addr)+3*4
d140 1
a140 1
      movl    %edx,_C_LABEL(dr_addr)+4*4
d142 1
a142 1
      movl    %edx,_C_LABEL(dr_addr)+5*4
d149 1
a149 1
      add     $0x10, %ecx
d154 1
a154 1
      add     $0x2, %ecx
d158 1
a158 1
      movl    %edx,_C_LABEL(dr_addr)+7*4
@


