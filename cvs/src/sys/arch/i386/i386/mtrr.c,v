head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.14
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.16
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.12
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.8
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.10
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.18
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.16
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.14
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.12
	OPENBSD_5_0:1.11.0.10
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.8
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.6
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.2.0.2
	SMP_BASE:1.2
	kame_19991208:1.2;
locks; strict;
comment	@ * @;


1.13
date	2013.12.19.21.30.02;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.24.04.26.16;	author mlarkin;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.01.20.46.50;	author phessler;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.02.18.52.17;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.29.20.03.20;	author dim;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.19.11.06.33;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.11.13.21.11;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.32;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.04.23.52.41;	author espie;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2000.03.22.00.02.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.13.06.56.56;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	99.11.20.13.50.15;	author matthieu;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.11.20.11.11.28;	author matthieu;	state Exp;
branches;
next	;

1.2.2.1
date	2001.10.31.03.01.12;	author nate;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.35.53;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Mtrr stops being a pseudo-device.  We need to probe the cpu type and
initialize the structures when we see the first cpu.  We also need to
initialize each cpu's properly (for PAT) before we setup mtrr on that
cpu.  On i386 (late hatch) we were getting this desperately wrong on
the primary cpu.

After suspend/resume, we also need to do the same work.  re-initialize
PAT before mtrr.  On some laptops apparently PAT was not turned on by the
BIOS, so we ended up with incorrect setup for the primary cpu.  Oops.

This makes mplayer on the x201 (and similar) machines work without weird
pauses after a suspend/resume.  Many other things are likely fixed.
ok kettenis
@
text
@/* $OpenBSD: mtrr.c,v 1.12 2013/08/24 04:26:16 mlarkin Exp $ */
/*-
 * Copyright (c) 1999 Michael Smith <msmith@@freebsd.org>
 * Copyright (c) 1999 Brian Fundakowski Feldman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/memrange.h>
#include <sys/systm.h>

#include <machine/specialreg.h>

extern struct mem_range_ops mrops;
extern struct mem_range_ops k6_mrops;

void
mem_range_attach(void)
{
	int family, model, step;

	family = (cpu_id >> 8) & 0xf;
	model  = (cpu_id >> 4) & 0xf;
	step   = (cpu_id >> 0) & 0xf;

	if (strcmp(cpu_vendor, "AuthenticAMD") == 0 &&
	    family == 0x5 &&
	    (model > 0x8 ||
	     (model == 0x8 &&
	      step > 0x7))) {
		mem_range_softc.mr_op = &k6_mrops;
		
		/* Try for i686 MTRRs */
	} else if (((strcmp(cpu_vendor, "GenuineIntel") == 0) ||
		    (strcmp(cpu_vendor, "CentaurHauls") == 0) ||
		    (strcmp(cpu_vendor, "AuthenticAMD") == 0)) &&
		    (family == 0x6 || family == 0xf) &&
		    (cpu_feature & CPUID_MTRR)) {
		mem_range_softc.mr_op = &mrops;

	}
	/* Initialise memory range handling */
	if (mem_range_softc.mr_op != NULL)
		mem_range_softc.mr_op->init(&mem_range_softc);
}

@


1.12
log
@

Cleanup amd64 and i386 MTRR code -

1. Makes amd64 and i386 MTRR code nearly identical
2. Removes support for per-process MTRRs (which were never implemented)
3. Treat "unknown" MTRR types as uncacheable instead of trying to preserve
bogus settings made by the BIOS
4. Various KNF cleanups

Should be no functional change.

ok jsg@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.11 2009/06/01 20:46:50 phessler Exp $ */
a38 2
void mtrrattach(int);

d40 1
a40 1
mtrrattach(int num)
a42 3

	if (num > 1)
		return;
@


1.11
log
@Fix the order of checking if a machine has MTRR.  We need to check
against the vendor string, then cpu family, then if the cpu claims to
have it.

requested by toby@@

Also match against Via's cpu string to enable MTRR on matthieu@@'s VIA Nano

compile tested on i386 by wcmaier@@
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.10 2007/05/02 18:52:17 matthieu Exp $ */
d36 1
a36 1
extern struct mem_range_ops i686_mrops;
d66 1
a66 1
		mem_range_softc.mr_op = &i686_mrops;
@


1.10
log
@Support for mtrr on AMD opteron CPUs. Patch by Mickey and bluhm@@, tweaks
by dim@@, ok deraadt@@ and myself. (miod@@ also found it sane).
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.9 2006/11/29 20:03:20 dim Exp $ */
d61 5
a65 4
	} else if ((cpu_feature & CPUID_MTRR) &&
		   (family == 0x6 || family == 0xf) &&
		   ((strcmp(cpu_vendor, "GenuineIntel") == 0) ||
		    (strcmp(cpu_vendor, "AuthenticAMD") == 0))) {
@


1.9
log
@Remove all the extern cpu_{id,model,whatever} declarations from most
stuff in arch/i386/i386.  This should prevent more screwups like the
one I did before in ichpcib.c...

ok dlg@@ kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.8 2006/09/19 11:06:33 jsg Exp $ */
d44 2
d49 4
d54 4
a57 4
	    (cpu_id & 0xf00) == 0x500 &&
	    ((cpu_id & 0xf0) > 0x80 ||
	     ((cpu_id & 0xf0) == 0x80 &&
	      (cpu_id & 0xf) > 0x7))) {
d62 1
a62 1
		   ((cpu_id & 0xf00) == 0x600) &&
@


1.8
log
@ansi/deregister
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.7 2006/05/11 13:21:11 mickey Exp $ */
a34 5

/* Pull in the cpuid values from locore.s */
extern int cpu_id;
extern int cpu_feature;
extern char cpu_vendor[];
@


1.7
log
@kill trainling spaces
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.6 2002/03/14 01:26:32 millert Exp $ */
d47 1
a47 2
mtrrattach (num)
	int num;
a70 1

@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.5 2001/07/04 23:52:41 espie Exp $ */
d66 2
a67 2
	    
	} 
@


1.5
log
@need sys/systm.h for strcmp prototype (gcc 3.0 fixes built-in status,
in that they're only activated when the corresponding include has been
seen)

Okay millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.4 2000/03/22 00:02:12 deraadt Exp $ */
d44 1
a44 1
void mtrrattach __P((int));
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.5 2001/07/04 23:52:41 espie Exp $ */
d44 1
a44 1
void mtrrattach(int);
@


1.4
log
@fix k6 mtrr; cokane@@pohl.ececs.uc.edu
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.2 1999/11/20 13:50:15 matthieu Exp $ */
d32 1
@


1.3
log
@at least 2 people report problems with the K6 MTRR support, disable it
until the problem is solved.
@
text
@a51 2
#if 0
	/* XXX at least 2 people report problems with K6 MTRR */
d59 5
a63 8
		
	} else 
#endif
	/* Try for i686 MTRRs */
	if ((cpu_feature & CPUID_MTRR) &&
		((cpu_id & 0xf00) == 0x600) &&
		((strcmp(cpu_vendor, "GenuineIntel") == 0) ||
		(strcmp(cpu_vendor, "AuthenticAMD") == 0))) {
d65 2
a66 3
	} else {
		mem_range_softc.mr_op = NULL;
	}
@


1.2
log
@add copyright notice
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.1 1999/11/20 11:11:28 matthieu Exp $ */
d52 2
d61 8
a68 5
		/* Try for i686 MTRRs */
	} else if ((cpu_feature & CPUID_MTRR) &&
		   ((cpu_id & 0xf00) == 0x600) &&
		   ((strcmp(cpu_vendor, "GenuineIntel") == 0) ||
		    (strcmp(cpu_vendor, "AuthenticAMD") == 0))) {
d70 3
a72 2
	    
	} 
@


1.2.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: mtrr.c,v 1.2 1999/11/20 13:50:15 matthieu Exp $ */
a31 1
#include <sys/systm.h>
@


1.2.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d44 1
a44 1
void mtrrattach(int);
@


1.1
log
@add MTRR support from FreeBSD
@
text
@d1 28
a28 1
/* $OpenBSD$ */
@

