head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.8
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.18
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.20
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.12
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.16
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	SMP:1.5.0.2;
locks; strict;
comment	@ * @;


1.19
date	2016.03.07.05.32.47;	author naddy;	state Exp;
branches;
next	1.18;
commitid	Ht3NH0pdlkYC6Nxx;

1.18
date	2011.06.28.20.19.18;	author matthieu;	state Exp;
branches;
next	1.17;

1.17
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.16;

1.16
date	2009.08.25.19.16.36;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.16.20.03.22;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.23.16.37.56;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.11.21.00.48;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.02.21.20.59;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.05.14.33.16;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.04.19.36.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.18.12.50.55;	author nate;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.29.23.13.28;	author csapuntz;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.07.26.07.09.12;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.14.18.24.10;	author todd;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.03.14.06.18.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.05.22.16.42;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.26.20.20.02;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.25.23.24.18;	author aaron;	state Exp;
branches;
next	;

1.5.2.1
date	2001.04.18.16.07.25;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.10.31.03.01.12;	author nate;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2003.03.27.23.26.55;	author niklas;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2003.06.07.11.11.37;	author ho;	state Exp;
branches;
next	;

1.7.4.1
date	2002.06.11.03.35.53;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.10.29.00.28.04;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Sync no-argument function declaration and definition by adding (void).
ok mlarkin@@ deraadt@@
@
text
@/*	$OpenBSD: wscons_machdep.c,v 1.18 2011/06/28 20:19:18 matthieu Exp $ */

/*
 * Copyright (c) 2001 Aaron Campbell
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/extent.h>

#include <machine/bus.h>

#include <dev/cons.h>

#include "vga.h"
#include "pcdisplay.h"
#if (NVGA > 0) || (NPCDISPLAY > 0)
#include <dev/ic/mc6845reg.h>
#include <dev/ic/pcdisplayvar.h>
#if (NVGA > 0)
#include <dev/ic/vgareg.h>
#include <dev/ic/vgavar.h>
#endif
#if (NPCDISPLAY > 0)
#include <dev/isa/pcdisplayvar.h>
#endif
#endif

#include "wsdisplay.h"
#if NWSDISPLAY > 0
#include <dev/wscons/wsdisplayvar.h>
#endif

#include "pckbc.h"
#if (NPCKBC > 0)
#include <dev/isa/isareg.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
#endif
#include "pckbd.h"
#include "ukbd.h"
#if (NUKBD > 0)
#include <dev/usb/ukbdvar.h>
#endif
#include "wskbd.h"
#if NWSKBD > 0
#include <dev/wscons/wskbdvar.h>
#endif

void	wscn_video_init(void);
void	wscn_input_init(int);

cons_decl(ws);

void
wscnprobe(struct consdev *cp)
{
	int maj;

	/* locate the major number */
	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;
	}

	if (maj == nchrdev) {
		/* we are not in cdevsw[], give up */
		panic("wsdisplay is not in cdevsw[]");
	}

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_MIDPRI;
}

void
wscninit(struct consdev *cp)
{
	static int initted = 0;

	if (initted)
		return;
	initted = 1;

	wscn_video_init();
	wscn_input_init(0);
}

void
wscnputc(dev_t dev, int i)
{
	wsdisplay_cnputc(dev, i);
}

int
wscngetc(dev_t dev)
{
	return (wskbd_cngetc(dev));
}

void
wscnpollc(dev_t dev, int on)
{
	wskbd_cnpollc(dev, on);
}

/*
 * Configure the display part of the console.
 */
void
wscn_video_init(void)
{
#if (NVGA > 0)
	if (vga_cnattach(I386_BUS_SPACE_IO, I386_BUS_SPACE_MEM, -1, 1) == 0)
		return;
#endif
#if (NPCDISPLAY > 0)
	if (pcdisplay_cnattach(I386_BUS_SPACE_IO, I386_BUS_SPACE_MEM) == 0)
		return;
#endif
}

/*
 * Configure the keyboard part of the console.
 * This is tricky, because of the games USB controllers play.
 *
 * On a truly legacy-free design, no PS/2 keyboard controller will be
 * found, so we'll settle for the first USB keyboard as the console
 * input device.
 *
 * Otherwise, the PS/2 controller will claim console, even if no PS/2
 * keyboard is plugged into it.  This is intentional, so that a PS/2
 * keyboard can be plugged late (even though this is theoretically not
 * allowed, most PS/2 controllers survive this).
 *
 * However, if there isn't any PS/2 keyboard connector, but an USB
 * controller in Legacy mode, the kernel will detect a PS/2 keyboard
 * connected (while there really isn't any), until the USB controller
 * driver attaches. At that point the ghost of the legacy keyboard
 * flees away.
 *
 * The pckbc(4) driver will, however, detect that the keyboard is gone
 * missing, and will invoke this function again, allowing a new console
 * input device choice.
 */
void
wscn_input_init(int pass)
{
	if (pass != 0) {
#if NWSKBD > 0
		wskbd_cndetach();
#endif
	}

#if (NPCKBC > 0)
	if (pass == 0 &&
	    pckbc_cnattach(I386_BUS_SPACE_IO, IO_KBD, KBCMDP, 0) == 0)
		return;
#endif
#if (NUKBD > 0)
	if (ukbd_cnattach() == 0)
		return;
#endif
}
@


1.18
log
@Remove the ega driver which is not referenced by any GENERIC kernel.

ok tedu@@, "I won't mourn it" miod@@, "no objection" oga@@,
"I won't cry" todd@@,  "fine, even happy" nick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.17 2010/11/23 04:07:55 shadchin Exp $ */
d135 1
a135 1
wscn_video_init()
@


1.17
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.16 2009/08/25 19:16:36 miod Exp $ */
a40 1
#include "ega.h"
d42 1
a42 1
#if (NVGA > 0) || (NEGA > 0) || (NPCDISPLAY > 0)
a48 3
#if (NEGA > 0)
#include <dev/isa/egavar.h>
#endif
a138 4
		return;
#endif
#if (NEGA > 0)
	if (ega_cnattach(I386_BUS_SPACE_IO, I386_BUS_SPACE_MEM) == 0)
@


1.16
log
@Legacy-free PC hardware do not have a real PS/2 keyboard controller, but
rather have the USB HCI emulate it during boot, while legacy mode is enabled.

This causes pckbd0 to attach as the console device, but is lost as soon as
the USB HCI driver attaches.

The disappearance of the emulated PS/2 controller can however be detected
in pckbc(4) - which is supposed to attach after [eou]hci(4), with the controller
refusing to ack commands and replying ``please resend'' instead.

In that case, the kernel will now no longer attach pckbd, and will perform a
new console input device selection, allowing the (real) usb keyboard to
become the console.

Thanks to krw@@ for countless tests on legacy-free hardware; also tested on
more conventional hardware by naddy@@ and I.

Only amd64 and i386 platforms are affected by this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.15 2008/07/16 20:03:22 miod Exp $ */
d188 2
a189 2
	if (pass == 0 && pckbc_cnattach(I386_BUS_SPACE_IO, IO_KBD, KBCMDP,
	    PCKBC_KBD_SLOT, 0) == 0)
@


1.15
log
@Add a new parameter to pckbc_cnattach(): flags to put in the pckbc bowels.
For now, only one such flag is defined, PCKBC_CANT_TRANSLATE. It hints
pckbc that the device does not behave correctly to the ``set translation''
commands.

Set this flag if we are running on a Tadpole Ultrabook machine, which needs it.
This makes the built-in keyboard work correctly on this laptop (with the
help of the software translation pckbd diff).

tested & ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.14 2008/01/23 16:37:56 jsing Exp $ */
a70 3
#if (NPCKBD > 0) || (NUKBD > 0)
#include <dev/wscons/wskbdvar.h>
#endif
d74 7
d107 1
a107 1
	static int initted;
a110 1

d113 2
a114 26
#if (NVGA > 0) || (NEGA > 0) || (NPCDISPLAY > 0)
#if (NVGA > 0)
	if (!vga_cnattach(I386_BUS_SPACE_IO, I386_BUS_SPACE_MEM, -1, 1))
		goto dokbd;
#endif
#if (NEGA > 0)
	if (!ega_cnattach(I386_BUS_SPACE_IO, I386_BUS_SPACE_MEM))
		goto dokbd;
#endif
#if (NPCDISPLAY > 0)
	if (!pcdisplay_cnattach(I386_BUS_SPACE_IO, I386_BUS_SPACE_MEM))
		goto dokbd;
#endif
	if (0) goto dokbd;	/* XXX stupid gcc */
dokbd:
#if (NPCKBC > 0)
	if (!pckbc_cnattach(I386_BUS_SPACE_IO, IO_KBD, KBCMDP, PCKBC_KBD_SLOT,
	    0))
		return;
#endif
#if (NUKBD > 0)
	if (!ukbd_cnattach())
		return;
#endif
#endif  /* VGA | EGA | PCDISPLAY */
	return;
d133 63
@


1.14
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.13 2006/06/11 21:00:48 matthieu Exp $ */
d126 2
a127 1
	if (!pckbc_cnattach(I386_BUS_SPACE_IO, IO_KBD, KBCMDP, PCKBC_KBD_SLOT))
@


1.13
log
@Ansify. No binary change on amd64 and i386, not yet built on sgi. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.12 2004/11/02 21:20:59 miod Exp $ */
d97 1
a97 1
	cp->cn_pri = CN_INTERNAL;
@


1.12
log
@Remove __HAVE_NWSCONS and related remnants of pre-wscons days; no functional
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.11 2004/10/05 14:33:16 miod Exp $ */
d81 1
a81 2
wscnprobe(cp)
	struct consdev *cp;
d101 1
a101 2
wscninit(cp)
	struct consdev *cp;
d138 1
a138 3
wscnputc(dev, i)
	dev_t dev;
	int i;
d144 1
a144 2
wscngetc(dev)
	dev_t dev;
d150 1
a150 3
wscnpollc(dev, on)
	dev_t dev;
	int on;
@


1.11
log
@Get prototypes through cons_decl(), so that they are always right.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.10 2003/06/04 19:36:33 deraadt Exp $ */
d69 1
a69 1
#include "pckbd.h"     /* for pckbc_machdep_cnattach */
@


1.10
log
@3/4 cleanup for aaron
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.9 2002/06/18 12:50:55 nate Exp $ */
d78 1
a78 5
void wscnprobe(struct consdev *);
void wscninit(struct consdev *);
void wscnputc(dev_t, char);
int wscngetc(dev_t);
void wscnpollc(dev_t, int);
d142 1
a142 1
	char i;
d144 1
a144 1
	wsdisplay_cnputc(dev, (int)i);
@


1.9
log
@Remove all traces of the PCCONS stuff.  (Remove pc.h and references to NPC
and NPCCONSKBD)
ok matthieu
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.8 2002/03/14 01:26:33 millert Exp $ */
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Aaron Campbell.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.7 2001/07/29 23:13:28 csapuntz Exp $ */
a80 5
#endif

#include "pc.h"
#if (NPC > 0)
#include <machine/pccons.h>
@


1.7
log
@

Temporarily fix wscninit so that it only runs once.

Somebody should fix the boot-up logic so it's only called once
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.6 2001/07/26 07:09:12 csapuntz Exp $ */
d88 5
a92 5
void wscnprobe __P((struct consdev *));
void wscninit __P((struct consdev *));
void wscnputc __P((dev_t, char));
int wscngetc __P((dev_t));
void wscnpollc __P((dev_t, int));
@


1.7.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.7 2001/07/29 23:13:28 csapuntz Exp $ */
d88 5
a92 5
void wscnprobe(struct consdev *);
void wscninit(struct consdev *);
void wscnputc(dev_t, char);
int wscngetc(dev_t);
void wscnpollc(dev_t, int);
@


1.7.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.7.4.1 2002/06/11 03:35:53 art Exp $ */
d81 5
@


1.6
log
@If pckbc_cnattach fails, try to usb attach. Helps on some legacy-free PCs
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2001/03/14 18:24:10 todd Exp $ */
d119 7
@


1.5
log
@ukbd is a valid wscons keyboard. include ukbd.h for wskbdvar.h
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.4 2001/03/14 06:18:47 millert Exp $ */
d79 3
d135 6
a140 1
	pckbc_cnattach(I386_BUS_SPACE_IO, IO_KBD, KBCMDP, PCKBC_KBD_SLOT);
@


1.5.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2001/03/14 18:24:10 todd Exp $ */
@


1.5.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5.2.1 2001/04/18 16:07:25 niklas Exp $ */
a78 3
#if (NUKBD > 0)
#include <dev/usb/ukbdvar.h>
#endif
a115 7
	static int initted;

	if (initted)
		return;

	initted = 1;

d132 1
a132 6
	if (!pckbc_cnattach(I386_BUS_SPACE_IO, IO_KBD, KBCMDP, PCKBC_KBD_SLOT))
		return;
#endif
#if (NUKBD > 0)
	if (!ukbd_cnattach())
		return;
@


1.5.2.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d88 5
a92 5
void wscnprobe(struct consdev *);
void wscninit(struct consdev *);
void wscnputc(dev_t, char);
int wscngetc(dev_t);
void wscnpollc(dev_t, int);
@


1.5.2.4
log
@Sync the SMP branch with 3.3
@
text
@d83 5
@


1.5.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5.2.4 2003/03/27 23:26:55 niklas Exp $ */
d15 5
@


1.4
log
@Back out order change in conf.c and priority change in wscons_machdep.c
Add kludge to prevent wscons on i386 from stealing the console from
another source. wscons should really be fixed to not touch cn_tab...
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.3 2001/03/05 22:16:42 millert Exp $ */
d75 2
a76 1
#if (NPCKBD > 0)
@


1.3
log
@Backs out changes to wsdisplay.c so alpha (and presumably others)
is happy again.  It also makes i386 serial console work by changing
the console priority in wscons_machdep.c from CN_INTERNAL to CN_NORMAL
and moves the com/pccom console attach routine for i386 to be the
first so it will be matched (consinit takes the first highest match).
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.2 2001/02/26 20:20:02 aaron Exp $ */
d108 1
a108 1
	cp->cn_pri = CN_NORMAL;
@


1.2
log
@Fix copyright; ericj@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.1 2001/02/25 23:24:18 aaron Exp $ */
d108 1
a108 1
	cp->cn_pri = CN_INTERNAL;
@


1.1
log
@Add wscons_machdep.c which is a constab-style wrapper driver for wscons on
i386. This fixes serial console. millert@@, mickey@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d17 1
a17 1
 *      This product includes software developed by Michael Shalayeff.
@

