head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.8
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.16
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.20
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.18
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.14
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.12
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2015.04.25.21.31.24;	author guenther;	state Exp;
branches;
next	1.6;
commitid	Jx2fq8kp0uEBpslo;

1.6
date	2010.04.05.22.42.43;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.01.19.48.50;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.11.23.45.13;	author gwk;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.30.00.05.40;	author gwk;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.27.15.46.48;	author gwk;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.13.03.01.04;	author gwk;	state Exp;
branches;
next	;


desc
@@


1.7
log
@We now following the ABI and always clear cld on function entry, so remove
the extra CLD instructions from when that wasn't true

testing miod@@ krw@@
@
text
@/* $OpenBSD: kvm86call.S,v 1.6 2010/04/05 22:42:43 kettenis Exp $ */
/* $NetBSD: kvm86call.S,v 1.7 2006/04/11 17:14:07 drochner Exp $ */

/*-
 * Copyright (c) 1998 Jonathan Lemon
 * All rights reserved.
 * Copyright (c) 2002
 *	Matthias Drochner. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/i386/i386/vm86bios.s,v 1.28 2001/12/11 23:33:40 jhb Exp $
 */

#include <machine/asm.h>
#include <machine/param.h>
#include "assym.h"

	.data
	.align 4

/* flag for trap() */
	.globl	kvm86_incall
kvm86_incall:		.long	0

/* XXX arguments for kvm86call() */
	.globl vm86pcb, vm86newptd, vm86frame, vm86pgtableva
	.globl	vm86tssd0, vm86tssd1

/* locals */
SCRARGFRAME:		.long	0
SCRSTACK:		.long	0
SCRTSS0:		.long	0
SCRTSS1:		.long	0

	.text

#if defined MULTIPROCESSOR
#include <machine/i82489reg.h>
#endif

/* int kvm86_call(struct trapframe *) */
ENTRY(kvm86_call)
	pushl	%ebp
	movl	%esp,%ebp		/* set up frame ptr */
	pushl	%esi
	pushl	%edi
	pushl	%ebx
	pushl	%fs
	pushl	%gs

	movl	8(%ebp),%eax
	movl	%eax,SCRARGFRAME	/* save argument pointer */

	movl	vm86frame,%edi		/* target frame location */
	movl    SCRARGFRAME,%esi	/* source (set on entry) */
	movl	$FRAMESIZE/4,%ecx	/* sizeof(struct trapframe)/4 */
	rep
	movsl				/* copy frame to new stack */

#ifdef MULTIPROCESSOR
	movl	_C_LABEL(local_apic)+LAPIC_ID,%eax
	shrl	$LAPIC_ID_SHIFT,%eax
	xorl	%ebx,%ebx
1:
	leal	0(,%ebx,4),%ecx
	incl	%ebx
	movl	_C_LABEL(cpu_info)(%ecx),%ecx
	movl	CPU_INFO_APICID(%ecx),%edx
	cmpl	%eax,%edx
	jne 1b
	movl	%ecx,%edx
#else
	leal	_C_LABEL(cpu_info_primary),%ecx
#endif

	movl	CPU_INFO_CURPCB(%ecx),%eax
	pushl	%eax			/* save curpcb */
	
	movl	vm86pcb,%eax		
	movl	%eax,CPU_INFO_CURPCB(%ecx) /* set curpcb to vm86pcb */
	movl	CPU_INFO_CURPROC(%ecx),%ecx
	movl	P_MD_TSS_SEL(%ecx),%edi

#ifdef	MULTIPROCESSOR
	movl	CPU_INFO_GDT(%edx),%eax
#else
	movl	_C_LABEL(gdt),%eax
#endif
	andl	$~0x0200,4(%eax,%edi,1)	/* reset "task busy" */

	movl	0(%eax,%edi,1),%edx
	movl	%edx,SCRTSS0		/* save first word */
	movl	4(%eax,%edi,1),%edx
	movl	%edx,SCRTSS1		/* save second word */

	movl	vm86tssd0,%edx		/* vm86 tssd entry */
	movl	%edx,0(%eax,%edi,1)
	movl	vm86tssd1,%edx		/* vm86 tssd entry */
	movl	%edx,4(%eax,%edi,1)
	ltr	%di

	movl	%cr3,%eax
	pushl	%eax			/* save address space */
	movl	PTDpaddr,%ecx
	movl	%ecx,%ebx
	addl	$KERNBASE,%ebx		/* va of Idle PDP */
	movl	0(%ebx),%eax
	pushl	%eax			/* old pde */
	pushl	%ebx			/* keep address for reuse */

	movl	%esp,SCRSTACK		/* save current stack location */

	movl	vm86newptd,%eax		/* mapping for vm86 page table */
	movl	%eax,0(%ebx)		/* ... install as PDP entry 0 */

	movl	%ecx,%cr3		/* new page tables */
	movl	vm86frame,%esp		/* switch to new stack */

	movl	$1,kvm86_incall		/* set flag for trap() */

	/* INTRFASTEXIT */
	popl	%gs
	popl	%fs
	popl	%es
	popl	%ds
	popl	%edi
	popl	%esi
	popl	%ebp
	popl	%ebx
	popl	%edx
	popl	%ecx
	popl	%eax
	addl	$8,%esp
	iret


/* void kvm86_ret(struct trapframe *, int) */
ENTRY(kvm86_ret)
	pushl	%ebp
	movl	%esp,%ebp		/* set up frame ptr */

	movl	8(%ebp),%esi		/* source */
	movl	SCRARGFRAME,%edi	/* destination */
	movl	$FRAMESIZE/4,%ecx	/* size */
	rep
	movsl				/* copy frame to original frame */

	movl	SCRSTACK,%esp		/* back to old stack */
	popl	%ebx			/* saved va of Idle PDP */
	popl	%eax
	movl	%eax,0(%ebx)		/* restore old pde */
	popl	%eax
	movl	%eax,%cr3		/* install old page table */

	movl	$0,kvm86_incall		/* reset trapflag */

	
#ifdef MULTIPROCESSOR
	movl	_C_LABEL(local_apic)+LAPIC_ID,%eax
	shrl	$LAPIC_ID_SHIFT,%eax
	xorl	%ebx,%ebx
1:
	leal	0(,%ebx,4),%ecx
	incl	%ebx
	movl	_C_LABEL(cpu_info)(%ecx),%ecx
	movl	CPU_INFO_APICID(%ecx),%edx
	cmpl	%eax,%edx
	jne 1b
	movl	CPU_INFO_GDT(%ecx),%eax
#else
	leal	_C_LABEL(cpu_info_primary),%ecx
	movl	_C_LABEL(gdt),%eax
#endif
	movl	CPU_INFO_CURPROC(%ecx),%ecx
	movl	P_MD_TSS_SEL(%ecx),%edi
	movl	SCRTSS0, %edx
	movl	%edx, 0(%eax,%edi,1)	/* restore first word */
	movl	SCRTSS1, %edx
	movl	%edx, 4(%eax,%edi,1)	/* restore second word */
	ltr	%di


#ifdef MULTIPROCESSOR	
	movl	_C_LABEL(local_apic)+LAPIC_ID,%eax
	shrl	$LAPIC_ID_SHIFT,%eax
	xorl	%ebx,%ebx
1:
	leal	0(,%ebx,4),%ecx
	incl	%ebx
	movl	_C_LABEL(cpu_info)(%ecx),%ecx
	movl	CPU_INFO_APICID(%ecx),%edx
	cmpl	%eax,%edx
	jne 1b
#else
	leal	_C_LABEL(cpu_info_primary),%ecx
#endif
	popl	%eax			/* restore curpcb */
	movl	%eax,CPU_INFO_CURPCB(%ecx)

	movl	12(%ebp), %eax		/* will be kvm86_call()'s retval */

	popl	%gs
	popl	%fs
	popl	%ebx
	popl	%edi
	popl	%esi
	popl	%ebp
	ret				/* back to kvm86_call()'s caller */
@


1.6
log
@Make this work properly after the cpu_info indexing change.

tested by ratchov@@
@
text
@d1 1
a1 1
/* $OpenBSD: kvm86call.S,v 1.5 2010/04/01 19:48:50 kettenis Exp $ */
a76 1
	cld
a164 1
	cld
@


1.5
log
@Don't index cpu_info by apic id, but by device unit number instead.  Recent
Intel CPUs come up with apic id's >= 32, even on systems with less than 32
logical CPUs.

ok krw@@, marco@@; tested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: kvm86call.S,v 1.4 2006/12/11 23:45:13 gwk Exp $ */
d92 1
@


1.4
log
@Ensure kvm86_call actually saves the curpcb instead of junk. Error
introduced by myself at h2k6, thanks mickey@@ and toby@@ for turning me in
the direction of a corrupt PCB.
@
text
@d1 1
a1 1
/* $OpenBSD: kvm86call.S,v 1.3 2006/11/30 00:05:40 gwk Exp $ */
d81 11
a91 6
#ifdef MULTIPROCESSOR	
	movl	_C_LABEL(local_apic)+LAPIC_ID,%ecx
	shrl	$LAPIC_ID_SHIFT,%ecx
	leal	0(,%ecx,4),%ecx
	movl	_C_LABEL(cpu_info)(%ecx),%edx
	movl	%edx,%ecx
d180 6
a185 3
	movl	_C_LABEL(local_apic)+LAPIC_ID,%ecx
	shrl	$LAPIC_ID_SHIFT,%ecx
	leal	0(,%ecx,4),%ecx
d187 3
d205 6
a210 3
	movl	_C_LABEL(local_apic)+LAPIC_ID,%ecx
	shrl	$LAPIC_ID_SHIFT,%ecx
	leal	0(,%ecx,4),%ecx
d212 3
@


1.3
log
@Remove the macros SET_CURPCB, GET_CURPCB and GET_CPUINFO, they are only used
in a few places, and the MP version of GET_CPUINFO is broken. No regression
in GENERIC, however GENERIC.MP still has issues.
@
text
@d1 1
a1 1
/* $OpenBSD: kvm86call.S,v 1.2 2006/11/27 15:46:48 gwk Exp $ */
d91 5
a95 3
	pushl	%eax	
	movl	vm86pcb,%eax
	movl	%eax,CPU_INFO_CURPCB(%ecx)
@


1.2
log
@Prevent panics when booting GENERIC.MP with a vesabios kernel.
@
text
@d1 1
a1 1
/* $OpenBSD: kvm86call.S,v 1.1 2006/06/13 03:01:04 gwk Exp $ */
a58 8

#define GET_CPUINFO(reg)						\
	movl	_C_LABEL(lapic_id),reg ;				\
	shrl	$LAPIC_ID_SHIFT,reg	;				\
	movl	_C_LABEL(cpu_info),reg  
#else
#define	GET_CPUINFO(reg) 						\
	leal	_C_LABEL(cpu_info_primary),reg
a60 8
#define GET_CURPCB(reg)							\
	GET_CPUINFO(reg) ;						\
	movl	CPU_INFO_CURPCB(reg),reg	

#define SET_CURPCB(reg, treg)						\
	GET_CPUINFO(treg) ;						\
	movl	reg,CPU_INFO_CURPCB(treg)

d80 11
a90 1
	GET_CURPCB(%eax)
d93 1
a93 1
	SET_CURPCB(%eax,%ecx)	/* set curpcb to vm86pcb */
d96 1
d98 1
a98 2
	GET_CPUINFO(%ecx)	
	movl	CPU_INFO_GDT(%ecx),%eax
d170 2
a171 1
	GET_CPUINFO(%ecx)
d173 4
d179 1
d190 9
d200 1
a200 1
	SET_CURPCB(%eax,%ecx)
@


1.1
log
@Kernel virtual mode 8086, currently disabled in GENERIC.
lots of help at c2k6 and after from toby@@,
ok toby@@, mickey@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d103 1
@

