head	1.64;
access;
symbols
	OPENBSD_6_1:1.64.0.8
	OPENBSD_6_1_BASE:1.64
	OPENBSD_6_0:1.64.0.4
	OPENBSD_6_0_BASE:1.64
	OPENBSD_5_9:1.64.0.2
	OPENBSD_5_9_BASE:1.64
	OPENBSD_5_8:1.63.0.4
	OPENBSD_5_8_BASE:1.63
	OPENBSD_5_7:1.61.0.2
	OPENBSD_5_7_BASE:1.61
	OPENBSD_5_6:1.61.0.6
	OPENBSD_5_6_BASE:1.61
	OPENBSD_5_5:1.61.0.4
	OPENBSD_5_5_BASE:1.61
	OPENBSD_5_4:1.60.0.2
	OPENBSD_5_4_BASE:1.60
	OPENBSD_5_3:1.59.0.2
	OPENBSD_5_3_BASE:1.59
	OPENBSD_5_2:1.58.0.2
	OPENBSD_5_2_BASE:1.58
	OPENBSD_5_1_BASE:1.57
	OPENBSD_5_1:1.57.0.2
	OPENBSD_5_0:1.56.0.2
	OPENBSD_5_0_BASE:1.56
	OPENBSD_4_9:1.53.0.2
	OPENBSD_4_9_BASE:1.53
	OPENBSD_4_8:1.52.0.6
	OPENBSD_4_8_BASE:1.52
	OPENBSD_4_7:1.52.0.2
	OPENBSD_4_7_BASE:1.52
	OPENBSD_4_6:1.52.0.4
	OPENBSD_4_6_BASE:1.52
	OPENBSD_4_5:1.51.0.2
	OPENBSD_4_5_BASE:1.51
	OPENBSD_4_4:1.49.0.4
	OPENBSD_4_4_BASE:1.49
	OPENBSD_4_3:1.49.0.2
	OPENBSD_4_3_BASE:1.49
	OPENBSD_4_2:1.48.0.6
	OPENBSD_4_2_BASE:1.48
	OPENBSD_4_1:1.48.0.4
	OPENBSD_4_1_BASE:1.48
	OPENBSD_4_0:1.48.0.2
	OPENBSD_4_0_BASE:1.48
	OPENBSD_3_9:1.45.0.2
	OPENBSD_3_9_BASE:1.45
	OPENBSD_3_8:1.44.0.6
	OPENBSD_3_8_BASE:1.44
	OPENBSD_3_7:1.44.0.4
	OPENBSD_3_7_BASE:1.44
	OPENBSD_3_6:1.44.0.2
	OPENBSD_3_6_BASE:1.44
	SMP_SYNC_A:1.42
	SMP_SYNC_B:1.42
	OPENBSD_3_5:1.42.0.2
	OPENBSD_3_5_BASE:1.42
	OPENBSD_3_4:1.41.0.2
	OPENBSD_3_4_BASE:1.41
	UBC_SYNC_A:1.40
	OPENBSD_3_3:1.40.0.6
	OPENBSD_3_3_BASE:1.40
	OPENBSD_3_2:1.40.0.4
	OPENBSD_3_2_BASE:1.40
	OPENBSD_3_1:1.40.0.2
	OPENBSD_3_1_BASE:1.40
	UBC_SYNC_B:1.40
	UBC:1.38.0.6
	UBC_BASE:1.38
	OPENBSD_3_0:1.38.0.4
	OPENBSD_3_0_BASE:1.38
	OPENBSD_2_9:1.38.0.2
	OPENBSD_2_9_BASE:1.38
	OPENBSD_2_8:1.37.0.2
	OPENBSD_2_8_BASE:1.37
	OPENBSD_2_7:1.35.0.2
	OPENBSD_2_7_BASE:1.35
	SMP:1.32.0.2
	SMP_BASE:1.32
	kame_19991208:1.31
	OPENBSD_2_6:1.30.0.2
	OPENBSD_2_6_BASE:1.30
	OPENBSD_2_5:1.28.0.4
	OPENBSD_2_5_BASE:1.28
	OPENBSD_2_4:1.28.0.2
	OPENBSD_2_4_BASE:1.28
	OPENBSD_2_3:1.27.0.2
	OPENBSD_2_3_BASE:1.27
	OPENBSD_2_2:1.25.0.2
	OPENBSD_2_2_BASE:1.25;
locks; strict;
comment	@ * @;


1.64
date	2015.09.03.15.52.16;	author deraadt;	state Exp;
branches;
next	1.63;
commitid	jpBE2jWBLrROy3fR;

1.63
date	2015.07.17.21.36.56;	author mlarkin;	state Exp;
branches;
next	1.62;
commitid	myTLft2DQvq03Jlf;

1.62
date	2015.04.12.18.37.54;	author mlarkin;	state Exp;
branches;
next	1.61;
commitid	5ST94uMTezmXYdhY;

1.61
date	2013.11.02.15.02.27;	author kettenis;	state Exp;
branches;
next	1.60;

1.60
date	2013.03.23.16.12.23;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2012.10.09.12.58.07;	author jsing;	state Exp;
branches;
next	1.58;

1.58
date	2012.06.03.13.17.47;	author kettenis;	state Exp;
branches;
next	1.57;

1.57
date	2012.01.11.15.58.27;	author jsing;	state Exp;
branches;
next	1.56;

1.56
date	2011.04.26.17.33.17;	author jsing;	state Exp;
branches;
next	1.55;

1.55
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.54;

1.54
date	2011.03.14.22.14.40;	author krw;	state Exp;
branches;
next	1.53;

1.53
date	2010.11.22.21.08.08;	author miod;	state Exp;
branches;
next	1.52;

1.52
date	2009.04.30.13.47.16;	author dlg;	state Exp;
branches;
next	1.51;

1.51
date	2009.01.20.20.21.03;	author mlarkin;	state Exp;
branches;
next	1.50;

1.50
date	2008.09.01.17.30.56;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2007.12.05.19.17.13;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.20.22.36.33;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.09.15.16.58;	author tom;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.08.22.51.18;	author gwk;	state Exp;
branches;
next	1.45;

1.45
date	2005.11.22.12.51.01;	author mickey;	state Exp;
branches;
next	1.44;

1.44
date	2004.06.23.00.21.49;	author tom;	state Exp;
branches;
next	1.43;

1.43
date	2004.06.13.21.49.16;	author niklas;	state Exp;
branches;
next	1.42;

1.42
date	2003.11.27.00.31.55;	author espie;	state Exp;
branches;
next	1.41;

1.41
date	2003.06.03.20.10.32;	author mickey;	state Exp;
branches;
next	1.40;

1.40
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.39;

1.39
date	2002.02.21.18.38.44;	author tdeval;	state Exp;
branches;
next	1.38;

1.38
date	2001.02.28.16.45.25;	author mickey;	state Exp;
branches
	1.38.6.1;
next	1.37;

1.37
date	2000.08.17.22.08.11;	author mickey;	state Exp;
branches;
next	1.36;

1.36
date	2000.08.17.20.15.39;	author mickey;	state Exp;
branches;
next	1.35;

1.35
date	2000.03.26.22.38.33;	author mickey;	state Exp;
branches;
next	1.34;

1.34
date	2000.03.05.19.07.43;	author mickey;	state Exp;
branches;
next	1.33;

1.33
date	2000.02.18.17.10.09;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	2000.02.03.13.42.40;	author mickey;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	99.10.26.18.16.47;	author mickey;	state Exp;
branches;
next	1.30;

1.30
date	99.08.25.00.54.18;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	99.05.09.15.09.05;	author mickey;	state Exp;
branches;
next	1.28;

1.28
date	98.06.08.17.01.37;	author mickey;	state Exp;
branches;
next	1.27;

1.27
date	98.02.24.22.02.07;	author weingart;	state Exp;
branches;
next	1.26;

1.26
date	98.01.09.12.14.40;	author niklas;	state Exp;
branches;
next	1.25;

1.25
date	97.10.27.07.44.20;	author niklas;	state Exp;
branches;
next	1.24;

1.24
date	97.10.25.07.02.36;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	97.10.24.22.15.07;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	97.10.24.06.49.19;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	97.10.22.23.37.13;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	97.10.20.14.47.41;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	97.10.18.00.33.14;	author weingart;	state Exp;
branches;
next	1.18;

1.18
date	97.10.17.18.47.00;	author weingart;	state Exp;
branches;
next	1.17;

1.17
date	97.10.17.15.03.15;	author weingart;	state Exp;
branches;
next	1.16;

1.16
date	97.10.14.01.04.25;	author weingart;	state Exp;
branches;
next	1.15;

1.15
date	97.10.12.23.55.12;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	97.10.03.20.56.29;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.09.29.03.42.28;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	97.09.21.23.00.43;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	97.09.17.17.56.09;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.09.04.19.58.12;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.09.03.04.33.57;	author weingart;	state Exp;
branches;
next	1.8;

1.8
date	97.08.22.20.10.21;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.08.12.19.24.47;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.08.07.01.08.17;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.08.05.17.45.55;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.08.02.22.25.30;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.07.28.23.04.58;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.07.27.00.38.46;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.17.23.13.44;	author mickey;	state Exp;
branches;
next	;

1.32.2.1
date	2000.02.20.10.30.44;	author niklas;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2000.02.20.11.56.48;	author niklas;	state Exp;
branches;
next	1.32.2.3;

1.32.2.3
date	2000.03.24.09.07.40;	author niklas;	state Exp;
branches;
next	1.32.2.4;

1.32.2.4
date	2001.04.18.16.07.27;	author niklas;	state Exp;
branches;
next	1.32.2.5;

1.32.2.5
date	2002.03.06.01.01.00;	author niklas;	state Exp;
branches;
next	1.32.2.6;

1.32.2.6
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.32.2.7;

1.32.2.7
date	2003.06.07.11.11.37;	author ho;	state Exp;
branches;
next	1.32.2.8;

1.32.2.8
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	;

1.38.6.1
date	2002.06.11.03.35.53;	author art;	state Exp;
branches;
next	;


desc
@@


1.64
log
@match amd64; bios_efi_info_t is required here as well, because acpidump
compiles on more than one platform.
@
text
@/*	$OpenBSD: biosvar.h,v 1.63 2015/07/17 21:36:56 mlarkin Exp $	*/

/*
 * Copyright (c) 1997-1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_BIOSVAR_H_
#define _MACHINE_BIOSVAR_H_

	/* some boxes put apm data seg in the 2nd page */
#define	BOOTARG_OFF	(PAGE_SIZE * 2)
#define	BOOTARG_LEN	(PAGE_SIZE * 1)
#define	BOOTBIOS_ADDR	(0x7c00)
#define	BOOTBIOS_MAXSEC	((1 << 28) - 1)

	/* BIOS configure flags */
#define	BIOSF_BIOS32	0x0001
#define	BIOSF_PCIBIOS	0x0002
#define	BIOSF_PROMSCAN	0x0004
#define	BIOSF_SMBIOS	0x0008

/* BIOS media ID */
#define BIOSM_F320K	0xff	/* floppy ds/sd  8 spt */
#define	BIOSM_F160K	0xfe	/* floppy ss/sd  8 spt */
#define	BIOSM_F360K	0xfd	/* floppy ds/sd  9 spt */
#define	BIOSM_F180K	0xfc	/* floppy ss/sd  9 spt */
#define	BIOSM_ROMD	0xfa	/* ROM disk */
#define	BIOSM_F120M	0xf9	/* floppy ds/hd 15 spt 5.25" */
#define	BIOSM_F720K	0xf9	/* floppy ds/dd  9 spt 3.50" */
#define	BIOSM_HD	0xf8	/* hard drive */
#define	BIOSM_F144K	0xf0	/* floppy ds/hd 18 spt 3.50" */
#define	BIOSM_OTHER	0xf0	/* any other */

/*
 * BIOS memory maps
 */
#define	BIOS_MAP_END	0x00	/* End of array XXX - special */
#define	BIOS_MAP_FREE	0x01	/* Usable memory */
#define	BIOS_MAP_RES	0x02	/* Reserved memory */
#define	BIOS_MAP_ACPI	0x03	/* ACPI Reclaim memory */
#define	BIOS_MAP_NVS	0x04	/* ACPI NVS memory */

/*
 * Optional ROM header
 */
typedef
struct bios_romheader {
	u_int16_t	signature;	/* 0xaa55 */
	u_int8_t	len;		/* length in pages (512 bytes) */
	u_int32_t	entry;		/* initialization entry point */
	u_int8_t	reserved[19];
	u_int16_t	pnpheader;	/* offset to PnP expansion header */
} __packed *bios_romheader_t;

/*
 * BIOS32
 */
typedef
struct bios32_header {
	u_int32_t	signature;	/* 00: signature "_32_" */
	u_int32_t	entry;		/* 04: entry point */
	u_int8_t	rev;		/* 08: revision */
	u_int8_t	length;		/* 09: header length */
	u_int8_t	cksum;		/* 0a: modulo 256 checksum */
	u_int8_t	reserved[5];
} __packed *bios32_header_t;

typedef
struct bios32_entry_info {
	u_int32_t	bei_base;
	u_int32_t	bei_size;
	u_int32_t	bei_entry;
} __packed *bios32_entry_info_t;

typedef
struct bios32_entry {
	u_int32_t	offset;
	u_int16_t	segment;
} __packed *bios32_entry_t;

#define	BIOS32_START	0xe0000
#define	BIOS32_SIZE	0x20000
#define	BIOS32_END	(BIOS32_START + BIOS32_SIZE - 0x10)

#define	BIOS32_MAKESIG(a, b, c, d) \
	((a) | ((b) << 8) | ((c) << 16) | ((d) << 24))
#define	BIOS32_SIGNATURE	BIOS32_MAKESIG('_', '3', '2', '_')
#define	PCIBIOS_SIGNATURE	BIOS32_MAKESIG('$', 'P', 'C', 'I')
#define	SMBIOS_SIGNATURE	BIOS32_MAKESIG('_', 'S', 'M', '_')

/*
 * CTL_BIOS definitions.
 */
#define	BIOS_DEV		1	/* int: BIOS boot device */
#define	BIOS_DISKINFO		2	/* struct: BIOS boot device info */
#define BIOS_CKSUMLEN		3	/* int: disk cksum block count */
#define	BIOS_MAXID		4	/* number of valid machdep ids */

#define	CTL_BIOS_NAMES { \
	{ 0, 0 }, \
	{ "biosdev", CTLTYPE_INT }, \
	{ "diskinfo", CTLTYPE_STRUCT }, \
	{ "cksumlen", CTLTYPE_INT }, \
}

#define	BOOTARG_MEMMAP 0
typedef struct _bios_memmap {
	u_int64_t addr;		/* Beginning of block */
	u_int64_t size;		/* Size of block */
	u_int32_t type;		/* Type of block */
} __packed bios_memmap_t;

/* Info about disk from the bios, plus the mapping from
 * BIOS numbers to BSD major (driver?) number.
 *
 * Also, do not bother with BIOSN*() macros, just parcel
 * the info out, and use it like this.  This makes for less
 * of a dependance on BIOSN*() macros having to be the same
 * across /boot, /bsd, and userland.
 */
#define	BOOTARG_DISKINFO 1
typedef struct _bios_diskinfo {
	/* BIOS section */
	int bios_number;	/* BIOS number of drive (or -1) */
	u_int bios_cylinders;	/* BIOS cylinders */
	u_int bios_heads;	/* BIOS heads */
	u_int bios_sectors;	/* BIOS sectors */
	int bios_edd;		/* EDD support */

	/* BSD section */
	dev_t bsd_dev;		/* BSD device */

	/* Checksum section */
	u_int32_t checksum;	/* Checksum for drive */

	/* Misc. flags */
	u_int32_t flags;
#define BDI_INVALID	0x00000001	/* I/O error during checksumming */
#define BDI_GOODLABEL	0x00000002	/* Had SCSI or ST506/ESDI disklabel */
#define BDI_BADLABEL	0x00000004	/* Had another disklabel */
#define BDI_EL_TORITO	0x00000008	/* 2,048-byte sectors */
#define BDI_PICKED	0x80000000	/* kernel-only: cksum matched */

} __packed bios_diskinfo_t;

#define	BOOTARG_APMINFO 2
typedef struct _bios_apminfo {
	/* APM_CONNECT returned values */
	u_int	apm_detail;
	u_int	apm_code32_base;
	u_int	apm_code16_base;
	u_int	apm_code_len;
	u_int	apm_data_base;
	u_int	apm_data_len;
	u_int	apm_entry;
	u_int	apm_code16_len;
} __packed bios_apminfo_t;

#define	BOOTARG_CKSUMLEN 3		/* u_int32_t */

#define	BOOTARG_PCIINFO 4
typedef struct _bios_pciinfo {
	/* PCI BIOS v2.0+ - Installation check values */
	u_int32_t	pci_chars;	/* Characteristics (%eax) */
	u_int32_t	pci_rev;	/* BCD Revision (%ebx) */
	u_int32_t	pci_entry32;	/* PM entry point for PCI BIOS */
	u_int32_t	pci_lastbus;	/* Number of last PCI bus */
} __packed bios_pciinfo_t;

#define	BOOTARG_CONSDEV	5
typedef struct _bios_consdev {
	dev_t	consdev;
	int	conspeed;
	int	consaddr;
	int	consfreq;
} __packed bios_consdev_t;

#define BOOTARG_SMPINFO 6		/* struct mp_float[] */

#define BOOTARG_BOOTMAC	7
typedef struct _bios_bootmac {
	char	mac[6];
} __packed bios_bootmac_t;

#define BOOTARG_DDB 8
typedef struct _bios_ddb {
	int	db_console;
} __packed bios_ddb_t;

#define BOOTARG_BOOTDUID 9
typedef struct _bios_bootduid {
	u_char	duid[8];
} __packed bios_bootduid_t;

#define BOOTARG_BOOTSR 10
#define BOOTSR_UUID_MAX 16
#define BOOTSR_CRYPTO_MAXKEYBYTES 32
typedef struct _bios_bootsr {
	u_int8_t	uuid[BOOTSR_UUID_MAX];
	u_int8_t	maskkey[BOOTSR_CRYPTO_MAXKEYBYTES];
} __packed bios_bootsr_t;

#define	BOOTARG_EFIINFO 11
typedef struct _bios_efiinfo {
	uint64_t	config_acpi;
	uint64_t	config_smbios;
	uint64_t	fb_addr;
	uint64_t	fb_size;
	uint32_t	fb_height;
	uint32_t	fb_width;
	uint32_t	fb_pixpsl;	/* pixels per scan line */
	uint32_t	fb_red_mask;
	uint32_t	fb_green_mask;
	uint32_t	fb_blue_mask;
	uint32_t	fb_reserved_mask;
} __packed bios_efiinfo_t;

#if defined(_KERNEL) || defined (_STANDALONE)

#ifdef _LOCORE
#define	DOINT(n)	int	$0x20+(n)
#else
#define	DOINT(n)	"int $0x20+(" #n ")"

extern volatile struct BIOS_regs {
	u_int32_t	biosr_ax;
	u_int32_t	biosr_cx;
	u_int32_t	biosr_dx;
	u_int32_t	biosr_bx;
	u_int32_t	biosr_bp;
	u_int32_t	biosr_si;
	u_int32_t	biosr_di;
	u_int32_t	biosr_ds;
	u_int32_t	biosr_es;
} __packed BIOS_regs;

#ifdef _KERNEL
#include <machine/bus.h>

struct bios_attach_args {
	char		*ba_name;
	u_int		ba_func;
	bus_space_tag_t	ba_iot;
	bus_space_tag_t	ba_memt;
	union {
		void		*_p;
		bios_apminfo_t	*_ba_apmp;
		paddr_t		_ba_acpipbase;
	} _;
};

#define	ba_apmp		_._ba_apmp
#define ba_acpipbase	_._ba_acpipbase

struct consdev;
struct proc;

int bios_sysctl(int *, u_int, void *, size_t *, void *, size_t, struct proc *);

void bios_getopt(void);

/* bios32.c */
int  bios32_service(u_int32_t, bios32_entry_t, bios32_entry_info_t);
void bios32_cleanup(void);

extern u_int bootapiver;
extern bios_memmap_t *bios_memmap;
extern bios_efiinfo_t *bios_efiinfo;
extern void *bios_smpinfo;
extern bios_pciinfo_t *bios_pciinfo;

#endif /* _KERNEL */
#endif /* _LOCORE */
#endif /* _KERNEL || _STANDALONE */

#endif /* _MACHINE_BIOSVAR_H_ */
@


1.63
log
@
Include executable mapping for BIOS32 pages. Fixes a problem where mappings
done in this region using PAE w/NX caused #PFs (as they lacked the exec
permission previously).

Also unmap the region when we're finished. No sense in leaving extra
executable regions lying around.

Fixes non-ACPI uniprocessor i386 machines that have NX/PAE (these would
previously panic in pcibiosattach).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.62 2015/04/12 18:37:54 mlarkin Exp $	*/
d225 15
d290 1
@


1.62
log
@
Bring PAE code back to life, in a different form. This diff (via bluhm then
to deraadt, then myself) brings the PAE pmap on i386 (not touched in any
significant way for years) closer to the current non-PAE pmap and allows
us to take a big next step toward better i386 W^X in the kernel (similar to
what we did a few months ago on amd64). Unlike the original PAE pmap, this
diff will not be supporting > 4GB physical memory on i386 - this effort is
specifically geared toward providing W^X (via NX) only.

There still seems to be a bug removing certain pmap entries when PAE is
enabled, so I'm leaving PAE mode disabled for the moment until we can
figure out what is going on, but with this diff in the tree hopefully
others can help.

The pmap functions now operate through function pointers, due to the need
to support both non-PAE and PAE forms. My unscientific testing showed
less than 0.3% (a third of a percent) slowdown with this approach during
a base build.

Discussed for months with guenther, kettenis, and deraadt.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.61 2013/11/02 15:02:27 kettenis Exp $	*/
d271 1
@


1.61
log
@Cleanup bios_oconsdev_t.  Make sure you have a halfway recent bootloader
(at least BOOT 3.20 on amd64 and BOOT 3.18 on i386) or you'll risk losing
your serial console.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.60 2013/03/23 16:12:23 deraadt Exp $	*/
a36 3

	/* physical page for ptp 0 need for various tramps */
#define PTP0_PA		(PAGE_SIZE * 3)	
@


1.60
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.59 2012/10/09 12:58:07 jsing Exp $	*/
a201 6

/* XXX Remove before OpenBSD 5.3 gets released. */
typedef struct _bios_oconsdev {
	dev_t	consdev;
	int	conspeed;
} __packed bios_oconsdev_t;
@


1.59
log
@Allow boot(8) to pass information to the kernel, regarding the softraid
volume that it booted off.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.57 2012/01/11 15:58:27 jsing Exp $	*/
d33 2
a34 2
#define	BOOTARG_OFF	(NBPG*2)
#define	BOOTARG_LEN	(NBPG*1)
d39 1
a39 1
#define PTP0_PA		(NBPG*3)	
@


1.58
log
@Add support for serial consoles at non-standard addresses.  This implements
a new "machine comaddr" command that makes it possible to configure the
io port used to access the serial port.  This can be used to use serial ports
on a puc(4) device as serial console.
@
text
@d226 8
@


1.57
log
@Pass the DUID of the boot disk via bootduid instead of rootduid, since it
is the DUID that we booted from, which is not always going to be the same
as the DUID that we mount root on.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.56 2011/04/26 17:33:17 jsing Exp $	*/
d199 2
d202 6
@


1.56
log
@Make amd64/i386 boot(8) pass the DUID of the selected boot device to the
kernel so that it can use it to identify the root disk. This will be
needed in order to correctly boot from a softraid volume.

ok deraadt@@ marco@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.54 2011/03/14 22:14:40 krw Exp $	*/
d213 2
a214 2
#define BOOTARG_ROOTDUID 9
typedef struct _bios_rootduid {
d216 1
a216 1
} __packed bios_rootduid_t;
@


1.55
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d213 5
@


1.54
log
@Clamp BIOS io attempts to < 2 ^28 - 1 sectors (a.k.a. 128GB for
512-byte sectors) as some BIOSen get confused when we ask for sectors
higher up.

Uss u_int throughout the boot code to calculate sector addresses,
since 32 bits is enough to do 28  ^ 1 - 1 arithmetic. Add checks
for wraparound.

I can now install and boot from the 7th extended partition below
128GB.

Much feedback & guidance from deraadt@@. Also from weingart@@ on
BIOS io.

ok deraadt@@ (less a couple of minor tweaks found in testing)
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.53 2010/11/22 21:08:08 miod Exp $	*/
d29 2
a30 2
#ifndef _I386_BIOSVAR_H_
#define _I386_BIOSVAR_H_
d269 1
a269 1
#endif /* _I386_BIOSVAR_H_ */
@


1.53
log
@Remove unused (and dummied) bios console routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.52 2009/04/30 13:47:16 dlg Exp $	*/
d36 1
@


1.52
log
@add support for passing db_console from the bootloader to the kernel.

based on the same change in amd64.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.50 2008/09/01 17:30:56 deraadt Exp $	*/
a253 5
void bioscnprobe(struct consdev *);
void bioscninit(struct consdev *);
void bioscnputc(dev_t, int);
int bioscngetc(dev_t);
void bioscnpollc(dev_t, int);
@


1.51
log
@
Install ACPI S3 resume trampoline code in a lowmem page. First part
of ACPI S3 suspend/resume support. This is for i386.

Help/comments from art, toby, marco, jordan, kurt
ok marco@@, kurt@@
@
text
@d207 5
@


1.50
log
@Avoid #pragma pack(1) and unify everything towards using __packed.
This requires that structures defined within __packed structures must
independently request that they themselves become __packed, too.
worked on with toby
 CVS: ----------------------------------------------------------------------
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.49 2007/12/05 19:17:13 deraadt Exp $	*/
d36 3
@


1.49
log
@Hang acpi(4) below bios(4) instead of mainbus(4).  This lets us move acpi(4)
before pcibios(4), and then.... if acpi(4) attaches, skip pcibios(4) since
it messes the machines up.  Fixes claudio's HP dl320 G5, and almost assuredly
others.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.48 2006/05/20 22:36:33 deraadt Exp $	*/
a30 1
#pragma pack(1)
d74 1
a74 1
} *bios_romheader_t;
d87 1
a87 1
} *bios32_header_t;
d94 1
a94 1
} *bios32_entry_info_t;
d100 1
a100 1
} *bios32_entry_t;
d132 1
a132 1
} bios_memmap_t;
d165 1
a165 1
} bios_diskinfo_t;
d178 1
a178 1
} bios_apminfo_t;
d189 1
a189 1
} bios_pciinfo_t;
d195 1
a195 1
} bios_consdev_t;
d202 1
a202 1
} bios_bootmac_t;
d221 1
a221 1
}	BIOS_regs;
a264 1
#pragma pack()
@


1.48
log
@add bios_bootmac_t and BOOTARG_BOOTMAC
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.47 2006/05/09 15:16:58 tom Exp $	*/
d228 4
a231 4
	char *bios_dev;
	u_int bios_func;
	bus_space_tag_t bios_iot;
	bus_space_tag_t bios_memt;
d233 3
a235 2
		void *_p;
		bios_apminfo_t *_bios_apmp;
d239 2
a240 1
#define	bios_apmp	_._bios_apmp
@


1.47
log
@0x0006 is not a good value for a bit flag, so change it to 0x0008.

Spotted by kettenis@@

ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.46 2006/05/08 22:51:18 gwk Exp $	*/
d199 5
@


1.46
log
@Add smbios support for i386 and amd64, fix ipmi to use this new functionallity,
hook up some sysctls to add system vendor/product/version and UUID reporting.

"get it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.45 2005/11/22 12:51:01 mickey Exp $	*/
d42 1
a42 1
#define BIOSF_SMBIOS	0x0006
@


1.45
log
@bios gives  32bit units not paddr/psize; no func change
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.44 2004/06/23 00:21:49 tom Exp $	*/
d42 1
d111 1
@


1.44
log
@Enter cdboot, a CD-specific second-stage bootrap.

Testing krw@@ and todd@@, thanks.

assistance, testing and ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.43 2004/06/13 21:49:16 niklas Exp $	*/
d91 3
a93 3
	paddr_t	bei_base;
	psize_t	bei_size;
	paddr_t	bei_entry;
d98 2
a99 2
	u_int32_t offset;
	u_int16_t segment;
@


1.43
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d161 1
@


1.42
log
@This var is volatile. gcc3 complains if the CV qualifiers don't match.
ok toby, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.41 2003/06/03 20:10:32 mickey Exp $	*/
d195 2
d249 2
@


1.41
log
@three four kill
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.40 2002/03/14 01:26:33 millert Exp $	*/
d202 1
a202 1
extern struct BIOS_regs {
@


1.40
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.39 2002/02/21 18:38:44 tdeval Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.39
log
@Typo. Ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.38 2001/02/28 16:45:25 mickey Exp $	*/
d238 1
a238 2
int bios_sysctl
	__P((int *, u_int, void *, size_t *, void *, size_t, struct proc *));
d240 6
a245 6
void bioscnprobe __P((struct consdev *));
void bioscninit __P((struct consdev *));
void bioscnputc __P((dev_t, int));
int bioscngetc __P((dev_t));
void bioscnpollc __P((dev_t, int));
void bios_getopt __P((void));
d248 1
a248 1
int  bios32_service __P((u_int32_t, bios32_entry_t, bios32_entry_info_t));
@


1.38
log
@scan the isa hole for `optional rom's.
found proms are excluded from the iomem_ex such
that devices cannot map on the same memory.
next step would be for pcic and similar devices
to choose memory windows from unused spots
in the iomem_ex.
currently prom checksum test is not enforced
due to broken stinkpad bioses, which do not
pass the checksum test.
testing from aaron@@, fgsch@@, fries@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.37 2000/08/17 22:08:11 mickey Exp $	*/
d78 1
a78 1
	u_int16_t	pnpheaader;	/* offset to PnP expansion header */
@


1.38.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.38 2001/02/28 16:45:25 mickey Exp $	*/
d78 1
a78 1
	u_int16_t	pnpheader;	/* offset to PnP expansion header */
d238 2
a239 1
int bios_sysctl(int *, u_int, void *, size_t *, void *, size_t, struct proc *);
d241 6
a246 6
void bioscnprobe(struct consdev *);
void bioscninit(struct consdev *);
void bioscnputc(dev_t, int);
int bioscngetc(dev_t);
void bioscnpollc(dev_t, int);
void bios_getopt(void);
d249 1
a249 1
int  bios32_service(u_int32_t, bios32_entry_t, bios32_entry_info_t);
@


1.37
log
@pcibios tells us everything, no bios_pciinfo
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.36 2000/08/17 20:15:39 mickey Exp $	*/
d36 1
d44 3
a46 2
#define	BIOSF_BIOS32			0x0001
#define	BIOSF_PCIBIOS			0x0002
d70 12
d105 1
a105 1
} __attribute__((__packed__)) *bios32_entry_t;
d258 1
@


1.36
log
@pcibios0 at bios0 flags 0x0000
this is now a real device, which looks in flags for disabling
address, interrupt or bus fixup.
bios0's flags are to disable bios32 and pcibios probing.
since boot_config support editing flags, it's posible
to adjust pcibios functionality in the generic kernel
upon boot time. man is coming.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.35 2000/03/26 22:38:33 mickey Exp $	*/
a238 1
extern bios_pciinfo_t *bios_pciinfo;
@


1.35
log
@from netbsd: pci interrupt routing code.
also, change a few pcidevs names to match netbsd (and more descriptive).
tested on a bunch of laptops, helps resolving 'pin X unmapped'
problems for (usually) usb and cardbus cntrollers.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.34 2000/03/05 19:07:43 mickey Exp $	*/
d42 4
d71 10
d89 1
a89 1
	caddr_t	offset;
d93 4
d99 2
a234 1
void bios32_init __P((void));
@


1.34
log
@export bios_pciinfo for the whole _KERNEL, there will be more files to use it
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.33 2000/02/18 17:10:09 mickey Exp $	*/
d64 19
d213 4
@


1.33
log
@full support for a serial console.
iface addition: pass serial speed from /boot.
tested on 4 /boot+kernel permutations.
also, niklas@@ said he likes it
bugs: any printfs before cninit() will go to the
default console, which is mon/kbd, but are usually
only sorts of debugging messages (like bios_memmap load).
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.32 2000/02/03 13:42:40 mickey Exp $	*/
d197 1
@


1.32
log
@remove extraneous spaces and tabs
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.31 1999/10/26 18:16:47 mickey Exp $	*/
d141 5
a145 1
#define	BOOTARG_CONSDEV	5		/* dev_t */
@


1.32.2.1
log
@Get MP info from /boot
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.32 2000/02/03 13:42:40 mickey Exp $	*/
a142 2
#define BOOTARG_SMPINFO 6		/* struct mp_float[] */

a192 1
extern void *bios_smpinfo;
@


1.32.2.2
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.33 2000/02/18 17:10:09 mickey Exp $	*/
d141 1
a141 5
#define	BOOTARG_CONSDEV	5
typedef struct _bios_consdev {
	dev_t	consdev;
	int	conspeed;
} bios_consdev_t;
@


1.32.2.3
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a199 1
extern bios_pciinfo_t *bios_pciinfo;
@


1.32.2.4
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.38 2001/02/28 16:45:25 mickey Exp $	*/
a35 1
#pragma pack(1)
a41 5
	/* BIOS configure flags */
#define	BIOSF_BIOS32	0x0001
#define	BIOSF_PCIBIOS	0x0002
#define	BIOSF_PROMSCAN	0x0004

a63 47
 * Optional ROM header
 */
typedef
struct bios_romheader {
	u_int16_t	signature;	/* 0xaa55 */
	u_int8_t	len;		/* length in pages (512 bytes) */
	u_int32_t	entry;		/* initialization entry point */
	u_int8_t	reserved[19];
	u_int16_t	pnpheaader;	/* offset to PnP expansion header */
} *bios_romheader_t;

/*
 * BIOS32
 */
typedef
struct bios32_header {
	u_int32_t	signature;	/* 00: signature "_32_" */
	u_int32_t	entry;		/* 04: entry point */
	u_int8_t	rev;		/* 08: revision */
	u_int8_t	length;		/* 09: header length */
	u_int8_t	cksum;		/* 0a: modulo 256 checksum */
	u_int8_t	reserved[5];
} *bios32_header_t;

typedef
struct bios32_entry_info {
	paddr_t	bei_base;
	psize_t	bei_size;
	paddr_t	bei_entry;
} *bios32_entry_info_t;

typedef
struct bios32_entry {
	u_int32_t offset;
	u_int16_t segment;
} *bios32_entry_t;

#define	BIOS32_START	0xe0000
#define	BIOS32_SIZE	0x20000
#define	BIOS32_END	(BIOS32_START + BIOS32_SIZE - 0x10)

#define	BIOS32_MAKESIG(a, b, c, d) \
	((a) | ((b) << 8) | ((c) << 16) | ((d) << 24))
#define	BIOS32_SIGNATURE	BIOS32_MAKESIG('_', '3', '2', '_')
#define	PCIBIOS_SIGNATURE	BIOS32_MAKESIG('$', 'P', 'C', 'I')

/*
a196 3
/* bios32.c */
int  bios32_service __P((u_int32_t, bios32_entry_t, bios32_entry_info_t));

a205 1
#pragma pack()
@


1.32.2.5
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
a78 1
	u_int16_t	pnpheader;	/* offset to PnP expansion header */
@


1.32.2.6
log
@Merge in -current from about a week ago
@
text
@d240 2
a241 1
int bios_sysctl(int *, u_int, void *, size_t *, void *, size_t, struct proc *);
d243 6
a248 6
void bioscnprobe(struct consdev *);
void bioscninit(struct consdev *);
void bioscnputc(dev_t, int);
int bioscngetc(dev_t);
void bioscnpollc(dev_t, int);
void bios_getopt(void);
d251 1
a251 1
int  bios32_service(u_int32_t, bios32_entry_t, bios32_entry_info_t);
@


1.32.2.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.32.2.6 2002/03/28 10:31:04 niklas Exp $	*/
d15 5
@


1.32.2.8
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d204 1
a204 1
extern volatile struct BIOS_regs {
@


1.31
log
@modify bootapiver chekups to use bitwise operations.
factor out /boot options parser from biosattach().
add logic to warn about ancient /boots.
cleanup vanishing cruft.
@@niklas ok
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.30 1999/08/25 00:54:18 mickey Exp $	*/
d63 1
a63 1
/* 
d68 2
a69 4
#define	BIOS_CNVMEM		3	/* int: amount of conventional memory */
#define	BIOS_EXTMEM		4	/* int: amount of extended memory */
#define BIOS_CKSUMLEN		5	/* int: disk cksum block count */
#define	BIOS_MAXID		6	/* number of valid machdep ids */
a74 2
	{ "cnvmem", CTLTYPE_INT }, \
	{ "extmem", CTLTYPE_INT }, \
d135 2
a136 2
	u_int32_t	pci_chars;		/* Characteristics (%eax) */
	u_int32_t	pci_rev;		/* BCD Revision (%ebx) */
@


1.30
log
@give better support to the bios memory maps.
provide memory maps editing through the machine memory command.
rearrange probing in machdep, so it provides less output,
also giving a shot for apm to fix the memory maps.
changes to kernel are minimal, only that is required due
to the api version bits addition and such cosmetic changes.
tested on all critical kernel,boot combinations; niklas@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.29 1999/05/09 15:09:05 mickey Exp $	*/
d193 1
d195 2
a196 1
extern	u_int bootapiver;
@


1.29
log
@provide suport for an apm data segemnt in the lower memory bios
data segment area, also calculate the apm segment lenghts.
niklas@@ - ok
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.28 1998/06/08 17:01:37 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997 Michael Shalayeff
d17 1
a17 1
 *	This product includes software developed by Michael Shalayeff.
d21 11
a31 12
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
d37 2
a38 1
#define	BOOT_APIVER	0x00000002
d40 1
a40 1
#define	BOOTARG_OFF	(NBPG*2)
d131 1
@


1.28
log
@consdev to come
@
text
@d40 1
a40 1
#define	BOOTARG_OFF	(NBPG)
@


1.27
log
@First commit of /boot changes/fixes.  More to come.
Add BIOS PCI probe stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.26 1998/01/09 12:14:40 niklas Exp $	*/
d143 2
@


1.26
log
@Make booting new kernels with old bootblocks moer robust
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.25 1997/10/27 07:44:20 niklas Exp $	*/
d133 10
a142 1
#define BOOTARG_CKSUMLEN 3		/* u_int32_t */
@


1.25
log
@A flag added to diskinfo used by the kernel to mark devices already mapped
to BSD dittos.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.24 1997/10/25 07:02:36 mickey Exp $	*/
d181 2
@


1.24
log
@define fixed bootarg vector offset, and max len
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.23 1997/10/24 22:15:07 mickey Exp $	*/
d117 1
@


1.23
log
@map a piece of memory after the msgbuf and copy bootargv there.
pass cksumlen argument, sysctl it
mostly by niklas
me just did slite editing.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.22 1997/10/24 06:49:19 mickey Exp $	*/
d39 2
@


1.22
log
@fix the case when data/code segment is not in the ISA memory
hole, so map 'em separatelly (or together if they intersect)
and use that mapped region for segment creations...
must help on some machines to avoid weird apm errors
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.21 1997/10/22 23:37:13 mickey Exp $	*/
d68 2
a69 1
#define	BIOS_MAXID		5	/* number of valid machdep ids */
d77 1
d109 6
a114 1
	u_int checklen;		/* Number of sectors done */
d129 2
@


1.21
log
@support new libsa
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.20 1997/10/20 14:47:41 mickey Exp $	*/
d148 2
d151 1
a151 4
		struct {
			bus_space_tag_t _bios_iot;
			bus_space_tag_t _bios_memt;
		} bios;
a155 2
#define	bios_iot	_.bios._bios_iot
#define	bios_memt	_.bios._bios_memt
@


1.20
log
@get ready for the fix in memprobe
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.19 1997/10/18 00:33:14 weingart Exp $	*/
d38 1
a38 6
#define	BOOT_APIVER	0x00000001

#define BIOSNHEADS(d)	(((d)>>24)+1)
#define BIOSNSECTS(d)	((d)&0x3f)	/* sectors are 1-based */
#define BIOSNDRIVES(d)	((((d)>>16)&0x0f)+1)
#define BIOSNTRACKS(d)	(( (((d)>>8)&0xff) | (((d)&0xc0)<<2) ) +1)
d57 1
a57 1
#define	BIOS_MAP_RES	0x02	/* Reseved memory */
d65 1
a65 1
#define	BIOS_GEOMETRY		2	/* int: BIOS boot device geometry */
d73 1
a73 1
	{ "biosgeo", CTLTYPE_INT }, \
d78 1
a78 44
#if defined(_KERNEL) || defined (_STANDALONE)

#ifdef _LOCORE
#define	DOINT(n)	int	$0x20+(n)
#else
#define	DOINT(n)	"int $0x20+(" #n ")"

extern struct BIOS_vars {
	/* XXX filled in assumption that last file opened is kernel */
	int	bios_dev;
	u_int	bios_geometry;

	/* APM_CONNECT returned values */
	u_int	bios_apm_detail;
	u_int	bios_apm_code32_base;
	u_int	bios_apm_code16_base;
	u_int	bios_apm_code_len;
	u_int	bios_apm_data_base;
	u_int	bios_apm_data_len;
	u_int	bios_apm_entry;

	void	*boot_data;
}	BIOS_vars;

extern struct BIOS_regs {
	u_int32_t	biosr_ax;
	u_int32_t	biosr_cx;
	u_int32_t	biosr_dx;
	u_int32_t	biosr_bx;
	u_int32_t	biosr_bp;
	u_int32_t	biosr_si;
	u_int32_t	biosr_di;
	u_int32_t	biosr_ds;
	u_int32_t	biosr_es;
}	BIOS_regs;

struct EDD_CB {
	u_int8_t  edd_len;   /* size of packet */
	u_int8_t  edd_res;   /* reserved */
	u_int16_t edd_nblk;  /* # of blocks to transfer */
	u_int32_t edd_buf;   /* address of buffer */
	u_int64_t edd_daddr; /* starting block */
};

d93 1
d96 5
a100 4
	signed int bios_number;			/* BIOS number of drive (or -1) */
	unsigned int bios_cylinders;	/* BIOS cylinders */
	unsigned int bios_heads;		/* BIOS heads */
	unsigned int bios_sectors;		/* BIOS sectors */
d103 1
a103 1
	dev_t bsd_dev;				/* BSD device */
d106 3
a108 2
	u_int32_t checksum;				/* Checksum for drive */
	unsigned int checklen;			/* Number of sectors done */
d111 30
d147 1
d153 1
a153 9
		struct {
			u_int	_apm_detail;
			u_int	_apm_code32_base;
			u_int	_apm_code16_base;
			u_int	_apm_code_len;
			u_int	_apm_data_base;
			u_int	_apm_data_len;
			u_int	_apm_entry;
		} apm;
d159 1
a159 7
#define	apm_detail	_.apm._apm_detail
#define	apm_code32_base	_.apm._apm_code32_base
#define	apm_code16_base	_.apm._apm_code16_base
#define	apm_code_len	_.apm._apm_code_len
#define	apm_data_base	_.apm._apm_data_base
#define	apm_data_len	_.apm._apm_data_len
#define	apm_entry	_.apm._apm_entry
@


1.19
log
@Copy in bios_diskinfo array from /boot space.
Add length field for checksum to same.
Start of making /boot deduce bsd dev_t for
all BIOS drives.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.18 1997/10/17 18:47:00 weingart Exp $	*/
d128 3
a130 3
	u_int32_t addr;		/* Beginning of block */
	u_int32_t size;		/* Size of block */
	int type;		/* Type of block */
@


1.18
log
@Cleanup, make it all compile.
Move APM stuff to apmprobe.c
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.17 1997/10/17 15:03:15 weingart Exp $	*/
d149 1
a149 1
	signed int bsd_major;			/* Major number of driver (or -1) */
d153 1
@


1.17
log
@Use BIOS to probe for memory map.
Probe for BIOS supported disks.
Use BIOS to get geometry for supported disks.

All in preparation to passing the whole thing
to the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.16 1997/10/14 01:04:25 weingart Exp $	*/
d127 1
a127 1
struct BIOS_MAP {
d131 1
a131 1
};
d150 3
@


1.16
log
@Support for bios memory maps.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.15 1997/10/12 23:55:12 mickey Exp $	*/
d132 20
@


1.15
log
@reserve void* at the of BIOS_vars for future use
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.14 1997/10/03 20:56:29 deraadt Exp $	*/
d57 9
d125 6
@


1.14
log
@make bios_geometry unsigned to avoid sign extension
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.13 1997/09/29 03:42:28 mickey Exp $	*/
d86 1
d95 1
@


1.13
log
@apm0 at bios0
configs will be updated
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.12 1997/09/21 23:00:43 mickey Exp $	*/
d84 1
a84 1
	int	bios_geometry;
@


1.12
log
@branch the bios tree inside the machdep
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.11 1997/09/17 17:56:09 mickey Exp $	*/
d35 2
a36 2
#ifndef __BIOS_VAR_H__
#define __BIOS_VAR_H__
a39 12
#define BOOTC_CHECK  0x00
#define BOOTC_BOOT   0x01
#define BOOTC_GETENV 0x02
#define BOOTC_SETENV 0x03
#define  BOOTV_BOOTDEV 1
#define  BOOTV_BDGMTRY 2
#define  BOOTV_CONSDEV 3
#define  BOOTV_APMCONN 4
#define BOOTC_GETC 0x10
#define BOOTC_PUTC 0x11
#define BOOTC_POLL 0x12

a73 16
/*
 * Advanced Power Management (APM) BIOS driver for laptop PCs.
 * 
 * Copyright (c) 1994 by HOSOKAWA Tatsumi <hosokawa@@mt.cs.keio.ac.jp>
 *
 * This software may be used, modified, copied, and distributed, in
 * both source and binary form provided that the above copyright and
 * these terms are retained. Under no circumstances is the author 
 * responsible for the proper functioning of this software, nor does 
 * the author assume any responsibility for damages incurred with its 
 * use.
 *
 * Aug, 1994	Implemented on FreeBSD 1.1.5.1R (Toshiba AVS001WD)
 * Oct, 1994	NetBSD port (1.0 BETA 10/2) by ukai
 */

a75 109
/* APM flags */
#define APM_16BIT_SUPPORT	0x01
#define APM_32BIT_SUPPORT	0x02
#define APM_CPUIDLE_SLOW	0x04
#define APM_DISABLED		0x08
#define APM_DISENGAGED		0x10

/* APM functions */
#define APM_INSTCHECK		0x5300
#define APM_REALCONNECT		0x5301
#define APM_PROT16CONNECT	0x5302
#define APM_PROT32CONNECT	0x5303
#define APM_DISCONNECTANY	0x5304
#define APM_CPUIDLE		0x5305
#define APM_CPUBUSY		0x5306
#define APM_SETPWSTATE		0x5307
#define APM_ENABLEDISABLEPM	0x5308
#define APM_RESTOREDEFAULT	0x5309
#define	APM_GETPWSTATUS		0x530a
#define APM_GETPMEVENT		0x530b
#define APM_GETPWSTATE		0x530c
#define APM_ENABLEDISABLEDPM	0x530d
#define APM_DRVVERSION		0x530e
#define APM_ENGAGEDISENGAGEPM	0x530f
#define APM_OEMFUNC		0x5380

/* error code */
#define APME_OK			0x00
#define APME_PMDISABLED		0x01
#define APME_REALESTABLISHED	0x02
#define APME_NOTCONNECTED	0x03
#define APME_PROT16ESTABLISHED	0x05
#define APME_PROT16NOTSUPPORTED	0x06
#define APME_PROT32ESTABLISHED	0x07
#define APME_PROT32NOTDUPPORTED	0x08
#define APME_UNKNOWNDEVICEID	0x09
#define APME_OUTOFRANGE		0x0a
#define APME_NOTENGAGED		0x0b
#define APME_CANTENTERSTATE	0x60
#define APME_NOPMEVENT		0x80
#define APME_NOAPMPRESENT	0x86

/* device code */
#define PMDV_APMBIOS		0x0000
#define PMDV_ALLDEV		0x0001
#define PMDV_DISP0		0x0100
#define PMDV_DISP1		0x0101
#define PMDV_2NDSTORAGE0	0x0200
#define PMDV_2NDSTORAGE1	0x0201
#define PMDV_2NDSTORAGE2	0x0202
#define PMDV_2NDSTORAGE3	0x0203
#define PMDV_PARALLEL0		0x0300
#define PMDV_PARALLEL1		0x0301
#define PMDV_SERIAL0		0x0400
#define PMDV_SERIAL1		0x0401
#define PMDV_SERIAL2		0x0402
#define PMDV_SERIAL3		0x0403
#define PMDV_SERIAL4		0x0404
#define PMDV_SERIAL5		0x0405
#define PMDV_SERIAL6		0x0406
#define PMDV_SERIAL7		0x0407
#define PMDV_NET0		0x0500
#define PMDV_NET1		0x0501
#define PMDV_NET2		0x0502
#define PMDV_NET3		0x0503
#define PMDV_PCMCIA0		0x0600
#define PMDV_PCMCIA1		0x0601
#define PMDV_PCMCIA2		0x0602
#define PMDV_PCMCIA3		0x0603
/* 0x0700 - 0xdfff	Reserved			*/
/* 0xe000 - 0xefff	OEM-defined power device IDs	*/
/* 0xf000 - 0xffff	Reserved			*/

/* Power state */
#define PMST_APMENABLED		0x0000
#define PMST_STANDBY		0x0001
#define PMST_SUSPEND		0x0002
#define PMST_OFF		0x0003
#define PMST_LASTREQNOTIFY	0x0004
#define PMST_LASTREQREJECT	0x0005
/* 0x0006 - 0x001f	Reserved system states		*/
/* 0x0020 - 0x003f	OEM-defined system states	*/
/* 0x0040 - 0x007f	OEM-defined device states	*/
/* 0x0080 - 0xffff	Reserved device states		*/

#define APM_MIN_ORDER		0x00
#define APM_MID_ORDER		0x80
#define APM_MAX_ORDER		0xff


/* power management event code */
#define PMEV_NOEVENT		0x0000
#define PMEV_STANDBYREQ		0x0001
#define PMEV_SUSPENDREQ		0x0002
#define PMEV_NORMRESUME		0x0003
#define PMEV_CRITRESUME		0x0004
#define PMEV_BATTERYLOW		0x0005
#define PMEV_POWERSTATECHANGE	0x0006
#define PMEV_UPDATETIME		0x0007
#define PMEV_CRITSUSPEND	0x0008
#define PMEV_USERSTANDBYREQ	0x0009
#define PMEV_USERSUSPENDREQ	0x000a
#define PMEV_STANDBYRESUME	0x000b
/* 0x000c - 0x00ff	Reserved system events	*/
/* 0x0100 - 0x01ff	Reserved device events	*/
/* 0x0200 - 0x02ff	OEM-defined APM events	*/
/* 0x0300 - 0xffff	Reserved		*/
#define PMEV_DEFAULT		0xffffffff	/* used for customization */

d86 7
a92 7
	u_int	apm_detail;
	u_int	apm_code32_base;
	u_int	apm_code16_base;
	u_int	apm_code_len;
	u_int	apm_data_base;
	u_int	apm_data_len;
	u_int	apm_entry;
d120 16
a135 3
	char *bios_busname;
	bus_space_tag_t bios_iot;
	bus_space_tag_t bios_memt;
d138 10
d164 1
a164 1
#endif /* __BIOS_VAR_H__ */
@


1.11
log
@pass cnvmem,extmem the old way they were....
don't put 'em in biosvars
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.10 1997/09/04 19:58:12 mickey Exp $	*/
d69 17
d263 4
@


1.10
log
@support boot API version number
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.9 1997/09/03 04:33:57 weingart Exp $	*/
a205 3
	u_int	bios_extmem;
	u_int	bios_cnvmem;

a212 2

	dev_t	boot_consdev;
@


1.9
log
@2nd part of pretty "machine diskinfo"
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.8 1997/08/22 20:10:21 mickey Exp $	*/
d37 2
@


1.8
log
@use words for apm functions
define struct of bios/boot vars to be passed to kernel
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.7 1997/08/12 19:24:47 mickey Exp $	*/
d50 4
a53 2
#define	BIOSNHEADS(d)	(((d)>>8)+1)
#define	BIOSNSECTS(d)	((d)&0xff)	/* sectors are 1-based */
@


1.7
log
@call BIOS inline (add struct EDD_cb into biosvar.h)
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.6 1997/08/07 01:08:17 mickey Exp $	*/
a82 4
/* BIOS id */
#define APM_BIOS		0x53
#define SYSTEM_BIOS		0x15

d91 17
a107 17
#define APM_INSTCHECK		0x00
#define APM_REALCONNECT		0x01
#define APM_PROT16CONNECT	0x02
#define APM_PROT32CONNECT	0x03
#define APM_DISCONNECT		0x04
#define APM_CPUIDLE		0x05
#define APM_CPUBUSY		0x06
#define APM_SETPWSTATE		0x07
#define APM_ENABLEDISABLEPM	0x08
#define APM_RESTOREDEFAULT	0x09
#define	APM_GETPWSTATUS		0x0a
#define APM_GETPMEVENT		0x0b
#define APM_GETPWSTATE		0x0c
#define APM_ENABLEDISABLEDPM	0x0d
#define APM_DRVVERSION		0x0e
#define APM_ENGAGEDISENGAGEPM	0x0f
#define APM_OEMFUNC		0x80
d196 20
@


1.6
log
@right DOINT for C
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.5 1997/08/05 17:45:55 mickey Exp $	*/
a195 1

d212 8
@


1.5
log
@kentry proto is in the libsa.h
change var name
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.4 1997/08/02 22:25:30 mickey Exp $	*/
d200 1
a200 1
#define	BIOSINT(n)	__asm ((int $0x20+(n)))
@


1.4
log
@change vars names, add attach_args
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.3 1997/07/28 23:04:58 mickey Exp $	*/
d43 1
a43 1
#define  BOOTV_BDGEOM  2
a212 2

int kentry __P((u_int, void *));
@


1.3
log
@adopt for assym.h
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.2 1997/07/27 00:38:46 mickey Exp $	*/
d38 11
a48 9
#define BIOS_INTR 0x50

#define BIOS_CHECK  0x00
#define BIOS_BOOT   0x01
#define BIOS_GETENV 0x02
#define BIOS_SETENV 0x03
#define BIOS_GETC 0x10
#define BIOS_PUTC 0x11
#define BIOS_POLL 0x12
d217 2
d221 2
@


1.2
log
@document bpb media types
@
text
@d1 1
a1 1
/*	$OpenBSD: biosvar.h,v 1.1 1997/07/17 23:13:44 mickey Exp $	*/
a196 9
#define BIOSR_AX 0x00
#define BIOSR_CX 0x04
#define BIOSR_DX 0x08
#define BIOSR_BX 0x0c
#define BIOSR_BP 0x10
#define BIOSR_SI 0x14
#define BIOSR_DI 0x18
#define BIOSR_ES 0x1c
#define BIOSR_CT 0x20
d198 1
d201 9
a209 8
	u_int32_t	br_ax;
	u_int32_t	br_cx;
	u_int32_t	br_dx;
	u_int32_t	br_bx;
	u_int32_t	br_bp;
	u_int32_t	br_si;
	u_int32_t	br_di;
	u_int32_t	br_es;
a211 2
#define	BIOSINT(n)	__asm ((int $0x20+(n)))

d218 2
@


1.1
log
@add BIOS definitios/etc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 12
@

