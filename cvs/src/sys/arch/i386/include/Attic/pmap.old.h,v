head	1.13;
access;
symbols
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	UBC_SYNC_A:1.13
	UBC_SYNC_B:1.13
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_9_BASE:1.12
	SMP:1.12.0.2;
locks; strict;
comment	@ * @;


1.13
date	2001.05.05.23.25.48;	author art;	state dead;
branches;
next	1.12;

1.12
date	99.09.20.02.47.43;	author deraadt;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	99.09.17.16.52.05;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.02.26.10.26.58;	author art;	state Exp;
branches;
next	1.9;

1.9
date	98.04.25.20.31.35;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.01.07.05.37.34;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	96.10.25.11.14.16;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.05.26.00.06.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.05.09.10.16.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.05.07.07.22.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.19.21.09.27;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.28.15.03.41;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches;
next	;

1.12.2.1
date	2001.04.18.16.07.40;	author niklas;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2001.07.04.10.16.51;	author niklas;	state dead;
branches;
next	;


desc
@@


1.13
log
@PMAP_NEW and UVM are no longer optional on i386.
@
text
@/*	$OpenBSD: pmap.old.h,v 1.12 1999/09/20 02:47:43 deraadt Exp $	*/
/*	$NetBSD: pmap.h,v 1.23 1996/05/03 19:26:30 christos Exp $	*/

/* 
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1991 Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and William Jolitz of UUNET Technologies Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)pmap.h	7.4 (Berkeley) 5/12/91
 */

/*
 * Derived from hp300 version by Mike Hibler, this version by William
 * Jolitz uses a recursive map [a pde points to the page directory] to
 * map the page tables using the pagetables themselves. This is done to
 * reduce the impact on kernel virtual memory for lots of sparse address
 * space, and to reduce the cost of memory to each process.
 *
 * from hp300:	@@(#)pmap.h	7.2 (Berkeley) 12/16/90
 */

#ifndef	_I386_PMAP_H_
#define	_I386_PMAP_H_

#include <machine/cpufunc.h>
#include <machine/pte.h>

/*
 * 386 page table entry and page table directory
 * W.Jolitz, 8/89
 */

/*
 * One page directory, shared between
 * kernel and user modes.
 */
#define	KPTDI		(KERNBASE>>22)	/* start of kernel virtual pde's */
#define	PTDPTDI		(KPTDI-1)	/* ptd entry that points to ptd! */
#define	APTDPTDI	0x3ff		/* start of alternate page directory */
#define	MAXKPDE		(APTDPTDI-KPTDI)
#ifndef NKPDE		/* permit config file override */
#define	NKPDE		127		/* # to static alloc */
#endif

/*
 * Address of current and alternate address space page table maps
 * and directories.
 */
#ifdef _KERNEL
extern pt_entry_t	PTmap[], APTmap[], Upte;
extern pd_entry_t	PTD[], APTD[], PTDpde, APTDpde, Upde;
extern pt_entry_t	*Sysmap;

extern int	PTDpaddr;	/* physical address of kernel PTD */

void pmap_bootstrap __P((vm_offset_t start));
boolean_t pmap_testbit __P((vm_offset_t, int));
void pmap_changebit __P((vm_offset_t, int, int));
void pmap_prefault __P((vm_map_t, vm_offset_t, vm_size_t));
#endif

/*
 * virtual address to page table entry and
 * to physical address. Likewise for alternate address space.
 * Note: these work recursively, thus vtopte of a pte will give
 * the corresponding pde that in turn maps it.
 */
#define	vtopte(va)	(PTmap + i386_btop(va))
#define	kvtopte(va)	vtopte(va)
#define	ptetov(pt)	(i386_ptob(pt - PTmap)) 
#define	vtophys(va) \
	((*vtopte(va) & PG_FRAME) | ((unsigned)(va) & ~PG_FRAME))

#define	avtopte(va)	(APTmap + i386_btop(va))
#define	ptetoav(pt)	(i386_ptob(pt - APTmap)) 
#define	avtophys(va) \
	((*avtopte(va) & PG_FRAME) | ((unsigned)(va) & ~PG_FRAME))

/*
 * macros to generate page directory/table indicies
 */
#define	pdei(va)	(((va) & PD_MASK) >> PDSHIFT)
#define	ptei(va)	(((va) & PT_MASK) >> PGSHIFT)

/*
 * Pmap stuff
 */
typedef struct pmap {
	pd_entry_t		*pm_pdir;	/* KVA of page directory */
	boolean_t		pm_pdchanged;	/* pdir changed */
	short			pm_dref;	/* page directory ref count */
	short			pm_count;	/* pmap reference count */
	simple_lock_data_t	pm_lock;	/* lock on pmap */
	struct pmap_statistics	pm_stats;	/* pmap statistics */
	long			pm_ptpages;	/* more stats: PT pages */
} *pmap_t;

/*
 * For each vm_page_t, there is a list of all currently valid virtual
 * mappings of that page.  An entry is a pv_entry, the list is pv_table.
 */
struct pv_entry {
	struct pv_entry	*pv_next;	/* next pv_entry */
	pmap_t		pv_pmap;	/* pmap where mapping lies */
	vm_offset_t	pv_va;		/* virtual address for mapping */
};

struct pv_page;

struct pv_page_info {
	TAILQ_ENTRY(pv_page) pgi_list;
	struct pv_entry *pgi_freelist;
	int pgi_nfree;
};

/*
 * This is basically:
 * ((NBPG - sizeof(struct pv_page_info)) / sizeof(struct pv_entry))
 */
#define	NPVPPG	340

struct pv_page {
	struct pv_page_info pvp_pgi;
	struct pv_entry pvp_pv[NPVPPG];
};

#ifdef	_KERNEL
extern struct pmap	kernel_pmap_store;

#define	pmap_kernel()			(&kernel_pmap_store)
#define	pmap_resident_count(pmap)	((pmap)->pm_stats.resident_count)
#define	pmap_update()			tlbflush()

vm_offset_t reserve_dumppages __P((vm_offset_t));

static __inline void
pmap_clear_modify(vm_offset_t pa)
{
	pmap_changebit(pa, 0, ~PG_M);
}

static __inline void
pmap_clear_reference(vm_offset_t pa)
{
	pmap_changebit(pa, 0, ~PG_U);
}

static __inline void
pmap_copy_on_write(vm_offset_t pa)
{
	pmap_changebit(pa, PG_RO, ~PG_RW);
}

static __inline boolean_t
pmap_is_modified(vm_offset_t pa)
{
	return pmap_testbit(pa, PG_M);
}

static __inline boolean_t
pmap_is_referenced(vm_offset_t pa)
{
	return pmap_testbit(pa, PG_U);
}

static __inline vm_offset_t
pmap_phys_address(int ppn)
{
	return i386_ptob(ppn);
}

void pmap_activate __P((struct proc *));
void pmap_deactivate __P((struct proc *));
vm_offset_t pmap_map __P((vm_offset_t, vm_offset_t, vm_offset_t, int));

#endif	/* _KERNEL */

#endif /* _I386_PMAP_H_ */
@


1.12
log
@permit config file overriding of NKPDE
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.11 1999/09/17 16:52:05 deraadt Exp $	*/
@


1.12.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.old.h,v 1.12 1999/09/20 02:47:43 deraadt Exp $	*/
@


1.12.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.old.h,v 1.12.2.1 2001/04/18 16:07:40 niklas Exp $	*/
@


1.11
log
@grown i386 kvm to 512MB
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.10 1999/02/26 10:26:58 art Exp $	*/
d73 1
d75 1
@


1.10
log
@change pmap_{de,}activate to take a struct proc *.
XXX - This should be done to other archs, but since nothing (except uvm)
      uses it right now, the interface will be changed there when
      support for uvm is added.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.9 1998/04/25 20:31:35 mickey Exp $	*/
d69 3
a71 3
#define	PTDPTDI		0x3bf		/* ptd entry that points to ptd! */
#define	KPTDI		0x3c0		/* start of kernel virtual pde's */
#define	NKPDE		63		/* # to static alloc */
d73 1
a73 1
#define	APTDPTDI	0x3ff		/* start of alternate page directory */
@


1.9
log
@convert i386 to MNN
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.8 1997/01/07 05:37:34 tholo Exp $	*/
d202 2
a203 1
void pmap_activate __P((pmap_t, struct pcb *));
@


1.8
log
@Fix for final ptdi panic on i386
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.7 1996/10/25 11:14:16 deraadt Exp $	*/
a158 1
struct pv_entry		*pv_table;	/* array of entries, one per page */
d203 1
@


1.7
log
@grow kvm space; fix an over-agressive pmap optimization
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.6 1996/05/26 00:06:07 deraadt Exp $	*/
d89 1
@


1.6
log
@force NKPDE to 31 on all machines until a better fix is available
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.5 1996/05/09 10:16:47 deraadt Exp $	*/
d69 4
a72 3
#define	PTDPTDI		0x3df		/* ptd entry that points to ptd! */
#define	KPTDI		0x3e0		/* start of kernel virtual pde's */
#define	NKPDE		31
@


1.5
log
@allow config file to override NKPDE (yuck)
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.4 1996/05/07 07:22:09 deraadt Exp $	*/
d71 1
a71 3
#ifndef NKPDE
#define	NKPDE		12
#endif
@


1.4
log
@sync with 0504; prototype changes
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.3 1996/03/19 21:09:27 mickey Exp $	*/
d71 1
a71 3
#ifdef BABY
#define	NKPDE		31
#else
@


1.3
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 2
a2 2
/*	$OpenBSD: pmap.h,v 1.2 1996/02/28 15:03:41 mickey Exp $	*/
/*	$NetBSD: pmap.h,v 1.22 1996/02/12 21:12:29 christos Exp $	*/
d71 3
d75 1
d167 2
d204 2
@


1.2
log
@From NetBSD:
pmap_page_index return type must be int, not u_int.
@
text
@d1 2
a2 1
/*	$OpenBSD: pmap.h,v 1.21 1995/10/11 04:20:20 mycroft Exp $	*/
a87 1
__pure int pmap_page_index __P((vm_offset_t));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: pmap.h,v 1.21 1995/10/11 04:20:20 mycroft Exp $	*/
d87 1
a87 1
__pure u_int pmap_page_index __P((vm_offset_t));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
