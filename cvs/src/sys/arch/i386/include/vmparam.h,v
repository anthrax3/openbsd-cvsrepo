head	1.55;
access;
symbols
	OPENBSD_6_2:1.55.0.6
	OPENBSD_6_2_BASE:1.55
	OPENBSD_6_1:1.55.0.8
	OPENBSD_6_1_BASE:1.55
	OPENBSD_6_0:1.55.0.4
	OPENBSD_6_0_BASE:1.55
	OPENBSD_5_9:1.55.0.2
	OPENBSD_5_9_BASE:1.55
	OPENBSD_5_8:1.54.0.4
	OPENBSD_5_8_BASE:1.54
	OPENBSD_5_7:1.53.0.2
	OPENBSD_5_7_BASE:1.53
	OPENBSD_5_6:1.53.0.6
	OPENBSD_5_6_BASE:1.53
	OPENBSD_5_5:1.53.0.4
	OPENBSD_5_5_BASE:1.53
	OPENBSD_5_4:1.51.0.2
	OPENBSD_5_4_BASE:1.51
	OPENBSD_5_3:1.49.0.2
	OPENBSD_5_3_BASE:1.49
	OPENBSD_5_2:1.48.0.6
	OPENBSD_5_2_BASE:1.48
	OPENBSD_5_1_BASE:1.48
	OPENBSD_5_1:1.48.0.4
	OPENBSD_5_0:1.48.0.2
	OPENBSD_5_0_BASE:1.48
	OPENBSD_4_9:1.46.0.2
	OPENBSD_4_9_BASE:1.46
	OPENBSD_4_8:1.43.0.6
	OPENBSD_4_8_BASE:1.43
	OPENBSD_4_7:1.43.0.2
	OPENBSD_4_7_BASE:1.43
	OPENBSD_4_6:1.43.0.4
	OPENBSD_4_6_BASE:1.43
	OPENBSD_4_5:1.41.0.4
	OPENBSD_4_5_BASE:1.41
	OPENBSD_4_4:1.41.0.2
	OPENBSD_4_4_BASE:1.41
	OPENBSD_4_3:1.39.0.4
	OPENBSD_4_3_BASE:1.39
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.36.0.2
	OPENBSD_4_1_BASE:1.36
	OPENBSD_4_0:1.35.0.2
	OPENBSD_4_0_BASE:1.35
	OPENBSD_3_9:1.33.0.2
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.32.0.2
	OPENBSD_3_8_BASE:1.32
	OPENBSD_3_7:1.30.0.2
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.29.0.4
	OPENBSD_3_6_BASE:1.29
	SMP_SYNC_A:1.29
	SMP_SYNC_B:1.29
	OPENBSD_3_5:1.29.0.2
	OPENBSD_3_5_BASE:1.29
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	UBC_SYNC_A:1.27
	OPENBSD_3_3:1.25.0.2
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.24.0.4
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	UBC_SYNC_B:1.24
	UBC:1.23.0.2
	UBC_BASE:1.23
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.15.0.4
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	SMP:1.14.0.4
	SMP_BASE:1.14
	kame_19991208:1.14
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.55
date	2015.11.01.20.09.59;	author miod;	state Exp;
branches;
next	1.54;
commitid	sHllVPiKPJBfwmTJ;

1.54
date	2015.04.26.09.22.33;	author sthen;	state Exp;
branches;
next	1.53;
commitid	cTyKkEneP4dNpm4f;

1.53
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.52;

1.52
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.51;

1.51
date	2013.03.25.19.33.11;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2013.03.23.16.12.23;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2013.01.27.16.12.16;	author fgsch;	state Exp;
branches;
next	1.48;

1.48
date	2011.05.30.22.25.21;	author oga;	state Exp;
branches;
next	1.47;

1.47
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.46;

1.46
date	2011.01.07.03.15.39;	author tedu;	state Exp;
branches;
next	1.45;

1.45
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.44;

1.44
date	2010.12.15.04.59.52;	author tedu;	state Exp;
branches;
next	1.43;

1.43
date	2009.06.16.16.42.41;	author ariane;	state Exp;
branches;
next	1.42;

1.42
date	2009.06.01.17.42.33;	author ariane;	state Exp;
branches;
next	1.41;

1.41
date	2008.07.18.16.40.17;	author kurt;	state Exp;
branches;
next	1.40;

1.40
date	2008.06.24.21.24.03;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.01.18.57.02;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2007.04.26.11.31.52;	author art;	state Exp;
branches;
next	1.37;

1.37
date	2007.03.28.03.49.50;	author weingart;	state Exp;
branches;
next	1.36;

1.36
date	2007.02.20.21.15.01;	author tom;	state Exp;
branches
	1.36.2.1;
next	1.35;

1.35
date	2006.04.27.15.37.53;	author mickey;	state Exp;
branches
	1.35.2.1;
next	1.34;

1.34
date	2006.03.15.17.56.06;	author mickey;	state Exp;
branches;
next	1.33;

1.33
date	2005.11.23.16.51.28;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	2005.08.01.19.44.53;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2004.11.28.01.36.38;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.01.20.18.32;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.02.23.27.47;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.05.17.54.59;	author drahn;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.17.03.42.14;	author drahn;	state Exp;
branches;
next	1.25;

1.25
date	2003.01.16.04.16.00;	author art;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.17.22.59.52;	author maja;	state Exp;
branches;
next	1.23;

1.23
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.22.18.00.09;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.27.06.19.45;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2001.05.06.00.45.51;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2001.05.05.23.25.49;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.05.20.56.39;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.22.23.36.52;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.25.23.10.31;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	99.10.03.21.08.16;	author niklas;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	99.09.20.17.05.47;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	99.09.17.16.52.06;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.02.26.04.17.20;	author art;	state Exp;
branches;
next	1.10;

1.10
date	98.04.25.20.31.37;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.08.26.21.19.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.26.21.18.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.08.26.21.12.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.07.16.21.43.11;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.07.16.21.00.18;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.06.04.22.51.02;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.25.11.14.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.16.11.11.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.36;	author deraadt;	state Exp;
branches;
next	;

1.14.4.1
date	2001.04.18.16.07.48;	author niklas;	state Exp;
branches;
next	1.14.4.2;

1.14.4.2
date	2001.07.04.10.16.53;	author niklas;	state Exp;
branches;
next	1.14.4.3;

1.14.4.3
date	2001.10.31.03.01.12;	author nate;	state Exp;
branches;
next	1.14.4.4;

1.14.4.4
date	2001.12.05.00.39.10;	author niklas;	state Exp;
branches;
next	1.14.4.5;

1.14.4.5
date	2002.03.06.01.01.00;	author niklas;	state Exp;
branches;
next	1.14.4.6;

1.14.4.6
date	2003.03.27.23.26.55;	author niklas;	state Exp;
branches;
next	1.14.4.7;

1.14.4.7
date	2003.05.13.19.42.08;	author ho;	state Exp;
branches;
next	1.14.4.8;

1.14.4.8
date	2003.06.07.11.11.37;	author ho;	state Exp;
branches;
next	1.14.4.9;

1.14.4.9
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	;

1.23.2.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	1.23.2.2;

1.23.2.2
date	2003.05.19.21.45.11;	author tedu;	state Exp;
branches;
next	;

1.35.2.1
date	2007.06.30.15.25.57;	author ckuethe;	state Exp;
branches;
next	;

1.36.2.1
date	2007.06.30.15.25.09;	author ckuethe;	state Exp;
branches;
next	;


desc
@@


1.55
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: vmparam.h,v 1.54 2015/04/26 09:22:33 sthen Exp $	*/
/*	$NetBSD: vmparam.h,v 1.15 1994/10/27 04:16:34 cgd Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vmparam.h	5.9 (Berkeley) 5/12/91
 */

#ifndef _MACHINE_VMPARAM_H_
#define _MACHINE_VMPARAM_H_
/*
 * Machine dependent constants for 386.
 */

#define	USRSTACK	VM_MAXUSER_ADDRESS

/*
 * Virtual memory related constants, all in bytes
 */
#define	MAXTSIZ		(128*1024*1024)		/* max text size */
#ifndef DFLDSIZ
#define	DFLDSIZ		(64*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(3UL*1024*1024*1024)	/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		(1024*1024*1024)	/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(4*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/* I386 has a line where all code is executable: 0 - I386_MAX_EXE_ADDR */
#define I386_MAX_EXE_ADDR 0x20000000		/* exec line */

/* map PIE into 320MB - 448MB address range */
#define VM_PIE_MIN_ADDR 0x14000000
#define VM_PIE_MAX_ADDR 0x1C000000

/*
 * Size of shared memory map
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	8192
#endif

/*
 * Size of User Raw I/O map
 */
#define	USRIOSIZE 	300

/*
 * Specific addresses being unmapped and used as fillers for free memory.
 */
#define	DEADBEEF0	0xefffeecc	/* malloc's filler */
#define	DEADBEEF1	0xefffaabb	/* pool's filler */

/* user/kernel map constants */
#define VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define VM_MAXUSER_ADDRESS	((vaddr_t)((PDSLOT_PTE<<PDSHIFT) - (2 * PAGE_SIZE)))
#define VM_MAX_ADDRESS		((vaddr_t)((PDSLOT_PTE<<PDSHIFT) + \
				    (PDSLOT_PTE<<PAGE_SHIFT)))
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(PDSLOT_APTE<<PDSHIFT))

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

#define	VM_PHYSSEG_MAX	16	/* actually we could have this many segments */
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
#define	VM_PHYSSEG_NOADD	/* can't add RAM after vm_mem_init */

#endif /* _MACHINE_VMPARAM_H_ */
@


1.54
log
@bump i386 MAXDSIZ to 3GB. - "If you're running this, and presumably actually
using that much memory, go for it" tedu@@ "I don't see any immediate downsides"
kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.53 2014/01/30 18:16:41 miod Exp $	*/
a43 12
/*
 * Virtual address space arrangement. On 386, both user and kernel
 * share the address space, not unlike the vax.
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack. Immediately above the user stack
 * resides the user structure, which is UPAGES long and contains the
 * kernel stack.
 *
 * Immediately after the user structure is the page table map, and then
 * kernel address space.
 */
#define	USRTEXT		PAGE_SIZE
@


1.53
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.52 2014/01/23 22:06:29 miod Exp $	*/
d66 1
a66 1
#define	MAXDSIZ		(2UL*1024*1024*1024)	/* max data size */
@


1.52
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.51 2013/03/25 19:33:11 deraadt Exp $	*/
a118 9

struct pv_entry;
struct vm_page_md {
	struct pv_entry *pv_list;
};

#define VM_MDPAGE_INIT(pg) do {			\
	(pg)->mdpage.pv_list = NULL;	\
} while (0)
@


1.51
log
@PGSHIFT -> PAGE_SHIFT
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.50 2013/03/23 16:12:23 deraadt Exp $	*/
a119 1
#define __HAVE_VM_PAGE_MD
@


1.50
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.49 2013/01/27 16:12:16 fgsch Exp $	*/
d109 1
a109 1
				    (PDSLOT_PTE<<PGSHIFT)))
@


1.49
log
@Bump MAXTSIZ to 128 MB, some binaries are quite large.
Agreed with millert@@ and guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.48 2011/05/30 22:25:21 oga Exp $	*/
d107 1
a107 1
#define VM_MAXUSER_ADDRESS	((vaddr_t)((PDSLOT_PTE<<PDSHIFT) - USPACE))
@


1.48
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.47 2011/03/23 16:54:35 pirofti Exp $	*/
d61 1
a61 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
@


1.47
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.46 2011/01/07 03:15:39 tedu Exp $	*/
a118 4

#define VM_NFREELIST		2
#define VM_FREELIST_DEFAULT	0
#define VM_FREELIST_FIRST16	1
@


1.46
log
@increase i386 maxdsiz to 2GB.  comments from ariane deraadt kettenis.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.45 2010/12/15 05:30:19 tedu Exp $	*/
d38 2
a39 2
#ifndef _MACHINE_VM_PARAM_H_
#define _MACHINE_VM_PARAM_H_
d134 1
a134 1
#endif /* _MACHINE_VM_PARAM_H_ */
@


1.45
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.44 2010/12/15 04:59:52 tedu Exp $	*/
d66 1
a66 1
#define	MAXDSIZ		(1024*1024*1024)	/* max data size */
@


1.44
log
@add a BRKSIZ define and use it for the heap gap constant, decoupling
heap gap from max data size.  nothing else changes yet.  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.43 2009/06/16 16:42:41 ariane Exp $	*/
d69 1
a69 1
#define BRKSIZ		(1024*1024*1024)
@


1.43
log
@Backout pmemrange (which to most people is more well known as physmem
allocator).

"i can't see any obvious problems" oga
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.41 2008/07/18 16:40:17 kurt Exp $	*/
d67 3
@


1.42
log
@physmem allocator: change the view of free memory from single free pages
to free ranges.
Classify memory based on region with associated use-counter (which is used
to construct a priority list of where to allocate memory).

Based on code from tedu@@, help from many.
Ok art@@
@
text
@a120 7
/* reserve ISA-DMA and 32-bit DMA memory */
#define UVM_IO_RANGES							\
	{								\
		{ 0, 0x00ffffffUL },					\
		{ 0, 0xffffffffUL },					\
	}

@


1.41
log
@Add new uvm function called uvm_map_pie() which takes align as a
parameter and returns an aligned random load address for position
independent executables to use. This also adds three new vmparam.h
defines to specify the maximum address, minimum address and minimum
allowed alignment for uvm_map_pie() to use. The PIE address range
for i386 was carefully selected to work well within the i386 W^X
framework.

With much help and feedback from weingart@@.
okay weingart@@, miod@@, kettenis@@, drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.40 2008/06/24 21:24:03 deraadt Exp $	*/
d120 7
@


1.40
log
@On user/kernel shared page table machines, do not let processes map their
own page 0, as discussed with miod (and many others previously, including
art and toby).  On sparc, make this __LDPGSZ because PAGE_SIZE is non-constant
ok miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.39 2007/06/01 18:57:02 miod Exp $	*/
d79 4
@


1.39
log
@Provide carefully crafted DEADBEEF* values, this was initially forgotten in
the commit which enabled DEADBEEF* overrides, then values have been
discussed a bit more and improved; reminded by and ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.38 2007/04/26 11:31:52 art Exp $	*/
d99 1
a99 1
#define VM_MIN_ADDRESS		((vaddr_t)0)
@


1.38
log
@Switch i386 pmap to VM_PAGE_MD. We store the MOD/REF flags in
pg_flags, so we actually shave quite a few bytes from the memory
we eat at boot. (a machine with 1GB memory saves 256k).

deraadt@@, pedro@@, krw@@ ok. Lots of testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.37 2007/03/28 03:49:50 weingart Exp $	*/
d91 6
@


1.37
log
@Bump max number of physical segments.  Machines in the wild
seem to have reached this limit.

ok marco@@, looks ok ckuethe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.36 2007/02/20 21:15:01 tom Exp $	*/
d111 4
a114 7
/*
 * pmap specific data stored in the vm_physmem[] array 
 */
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pv_head *pvhead;		/* pv_head array */
	char *attrs;			/* attrs array */
d116 4
@


1.36
log
@Revert PAE pmap for now, until the strange bug is found.  This stops
the freezes many of us are seeing (especially on amd64 machines running
OpenBSD/i386).

Much testing by nick@@ (as always - thanks!), hugh@@, ian@@, kettenis@@
and Sam Smith (s (at) msmith (dot) net).

Requested by, input from, and ok deraadt@@  ok art@@, kettenis@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.34 2006/03/15 17:56:06 mickey Exp $	*/
d103 1
a103 1
#define	VM_PHYSSEG_MAX	5	/* actually we could have this many segments */
@


1.36.2.1
log
@increase VM_PHYSSEG_MAX some more, some systems need it.
Diff from todd, ok weingart
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.36 2007/02/20 21:15:01 tom Exp $	*/
d103 1
a103 1
#define	VM_PHYSSEG_MAX	16	/* actually we could have this many segments */
@


1.35
log
@implement separate PAE pmap that allows access to 64g of physmem
if supported by the cpu(s). currently not enabled by default and
not compiled into ramdisks. this grows paddr_t to 64bit but yet
leaves bus_addr_t at 32bits. measures are taken to favour dmaable
memory allocation from below 4g line such that buffer cache is
already allocated form below, pool backend allocator prefers lower
memory and then finally bounce buffers are used as last resort.
PAE is engaged only if global variable cpu_pae is manually set
to non-zero and there is physical memory present above 4g.
simplify pcibios address math to use u_long as we always will
be in the 32bit space.
@
text
@d94 3
a96 3
#define VM_MAXUSER_ADDRESS	((vaddr_t)0xcf800000)
#define VM_MAX_ADDRESS		(vm_max_address)
extern vaddr_t vm_max_address;
d98 1
a98 1
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xff800000)
d103 1
a103 1
#define	VM_PHYSSEG_MAX	8	/* actually we could have this many segments */
d107 1
a107 1
#define VM_NFREELIST		3
a109 1
#define VM_FREELIST_ABOVE4G	2
@


1.35.2.1
log
@increase VM_PHYSSEG_MAX some more, some systems need it.
Diff from todd, ok weingart
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.35 2006/04/27 15:37:53 mickey Exp $	*/
d103 1
a103 1
#define	VM_PHYSSEG_MAX	16	/* actually we could have this many segments */
@


1.34
log
@allow for more physmem segments; as required by some dell from dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.33 2005/11/23 16:51:28 mickey Exp $	*/
d94 3
a96 3
#define VM_MAXUSER_ADDRESS	((vaddr_t)((PDSLOT_PTE<<PDSHIFT) - USPACE))
#define VM_MAX_ADDRESS		((vaddr_t)((PDSLOT_PTE<<PDSHIFT) + \
				    (PDSLOT_PTE<<PGSHIFT)))
d98 1
a98 1
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(PDSLOT_APTE<<PDSHIFT))
d103 1
a103 1
#define	VM_PHYSSEG_MAX	5	/* actually we could have this many segments */
d107 1
a107 1
#define VM_NFREELIST		2
d110 1
@


1.33
log
@finnish the PTDPTDI and APTDPTDI conversion to PDSLOT_PTE and PDSLOT_APTE thus reducing confusion; remove compatibility defines and comments
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.32 2005/08/01 19:44:53 jmc Exp $	*/
d103 1
a103 1
#define	VM_PHYSSEG_MAX	4	/* actually we could have this many segments */
@


1.32
log
@kernal->kernel;
from netbsd pr #30872 (anonymous post);
ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.31 2005/04/11 15:13:01 deraadt Exp $	*/
a91 4
/* XXX Compatibility */
#define APTDPTDI	PDSLOT_APTE
#define PTDPTDI		PDSLOT_PTE

d94 3
a96 2
#define VM_MAXUSER_ADDRESS	((vaddr_t)((PTDPTDI<<PDSHIFT) - USPACE))
#define VM_MAX_ADDRESS		((vaddr_t)((PTDPTDI<<PDSHIFT) + (PTDPTDI<<PGSHIFT)))
d98 1
a98 1
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(APTDPTDI<<PDSHIFT))
@


1.31
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.30 2004/11/28 01:36:38 mickey Exp $	*/
d53 1
a53 1
 * kernal address space.
@


1.30
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.29 2004/01/01 20:18:32 millert Exp $	*/
d74 2
@


1.29
log
@Crank SHMMAXPGS from 2048 to 8192.  Other platforms where people
are using lots of shm may also wish to also increase SHMMAXPGS.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.28 2003/06/02 23:27:47 millert Exp $	*/
a88 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.28
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.27 2003/05/05 17:54:59 drahn Exp $	*/
d82 1
a82 1
#define SHMMAXPGS	2048
@


1.27
log
@Move exec base to 0x1c000000, exe/data gap to 512MB. Allows better
interleave of exe/shared libs. Raise MAXDSIZ back to 1G.
This change REQUIRES a binary update on i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.26 2003/04/17 03:42:14 drahn Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.26
log
@i386 changes to move to ELF. asm cleanup. Change MAXDSIZ to 512M for 1Gsep.
DARPA funded work.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.25 2003/01/16 04:16:00 art Exp $	*/
d70 1
a70 1
#define	MAXDSIZ		(512*1024*1024)		/* max data size */
d78 3
@


1.25
log
@Getting rid of vm_offset_t
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.24 2002/02/17 22:59:52 maja Exp $	*/
d70 1
a70 1
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
@


1.24
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.23 2001/12/05 16:25:44 art Exp $	*/
d107 5
a111 5
#define VM_MIN_ADDRESS		((vm_offset_t)0)
#define VM_MAXUSER_ADDRESS	((vm_offset_t)((PTDPTDI<<PDSHIFT) - USPACE))
#define VM_MAX_ADDRESS		((vm_offset_t)((PTDPTDI<<PDSHIFT) + (PTDPTDI<<PGSHIFT)))
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)(APTDPTDI<<PDSHIFT))
@


1.23
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.22 2001/11/30 17:37:43 art Exp $	*/
a113 1
#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
@


1.23.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.23 2001/12/05 16:25:44 art Exp $	*/
d114 1
@


1.23.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 1
a70 1
#define	MAXDSIZ		(1024*1024*1024)	/* max data size */
a78 3
/* I386 has a line where all code is executable: 0 - I386_MAX_EXE_ADDR */
#define I386_MAX_EXE_ADDR 0x20000000		/* exec line */

d107 5
a111 5
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)((PTDPTDI<<PDSHIFT) - USPACE))
#define VM_MAX_ADDRESS		((vaddr_t)((PTDPTDI<<PDSHIFT) + (PTDPTDI<<PGSHIFT)))
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(APTDPTDI<<PDSHIFT))
@


1.22
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.21 2001/09/22 18:00:09 miod Exp $	*/
a114 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
@


1.21
log
@Remove more old, dusty, unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2001/06/27 06:19:45 art Exp $	*/
d129 1
@


1.20
log
@MNN is no longer an option.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.19 2001/05/06 00:45:51 art Exp $	*/
a79 9
 * Default sizes of swap allocation chunks (see dmap.h).
 * The actual values may be changed in vminit() based on MAXDSIZ.
 * With MAXDSIZ of 16Mb and NDMAP of 38, dmmax will be 1024.
 */
#define	DMMIN	32			/* smallest swap allocation */
#define	DMMAX	4096			/* largest potential swap allocation */
#define	DMTEXT	1024			/* swap allocation for text */

/*
a100 13

/*
 * A swapped in process is given a small amount of core without being bothered
 * by the page replacement algorithm.  Basically this says that if you are
 * swapped in you deserve some resources.  We protect the last SAFERSS
 * pages against paging and will just swap you out rather than paging you.
 */
#define	SAFERSS		8		/* nominal ``small'' resident set size
					   protected against replacement */

/*
 * Mach derived constants
 */
@


1.19
log
@Update some comments wrt. the CLSIZE changes.
And remove that memory price comment from 1981. It is amusing, but also
confusing because the math in there is only correct on vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2001/05/05 23:25:49 art Exp $	*/
a138 2

#define	MACHINE_NEW_NONCONTIG	/* VM <=> pmap interface modifier */
@


1.18
log
@PMAP_NEW and UVM are no longer optional on i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2001/05/05 20:56:39 art Exp $	*/
a115 9
 * Note that each process has at least UPAGES+CLSIZE pages which are not
 * paged anyways (this is currently 8+2=10 pages or 5k bytes), so this
 * number just means a swapped in process is given around 25k bytes.
 * Just for fun: current memory prices are 4600$ a megabyte on VAX (4/22/81),
 * so we loan each swapped in process memory worth 100$, or just admit
 * that we don't consider it worthwhile and swap it out to disk which costs
 * $30/mb or about $0.75.
 * { wfj 6/16/89: Retail AT memory expansion $800/megabyte, loan of $17
 *   on disk costing $7/mb or $0.18 (in memory still 100:1 in cost!) }
@


1.17
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2001/03/22 23:36:52 niklas Exp $	*/
a133 1
#ifdef PMAP_NEW
a135 1
#endif
a161 1
#if defined(PMAP_NEW)
a165 7
#else
struct pmap_physseg {
	struct pv_entry *pvent;		/* pv_entry array */
	char *attrs;			/* attrs array */
}; 
#endif               

@


1.16
log
@Merge in NetBSD's PMAP_NEW, still disabled
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2000/04/25 23:10:31 niklas Exp $	*/
d59 1
a59 1
#define	USRTEXT		CLBYTES
d148 2
a149 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*CLBYTES)
#define VM_PHYS_SIZE		(USRIOSIZE*CLBYTES)
@


1.15
log
@A fix to the dreaded isadmaattach panic which hunts people playing with
large memory machines.  This time I really hope we can continue quite a bit
away over the Gig.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 1999/10/03 21:08:16 niklas Exp $	*/
d132 6
@


1.14
log
@Double the amount of shared memory pages we can maximally allocate.  This
makes TV watching in fullscreen in 640x480 work.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 1999/09/20 17:05:47 deraadt Exp $	*/
d148 1
a148 1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BIGFIRST
@


1.14.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2001/03/22 23:36:52 niklas Exp $	*/
a132 6
/* XXX Compatibility */
#ifdef PMAP_NEW
#define APTDPTDI	PDSLOT_APTE
#define PTDPTDI		PDSLOT_PTE
#endif

d148 1
a148 1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
@


1.14.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14.4.1 2001/04/18 16:07:48 niklas Exp $	*/
d59 1
a59 1
#define	USRTEXT		PAGE_SIZE
d116 9
d134 1
d137 1
d148 4
a151 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)
d164 1
d169 7
@


1.14.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14.4.2 2001/07/04 10:16:53 niklas Exp $	*/
d80 9
d110 13
@


1.14.4.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14.4.3 2001/10/31 03:01:12 nate Exp $	*/
a128 1
#define __HAVE_PMAP_PHYSSEG
@


1.14.4.5
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d114 2
@


1.14.4.6
log
@Sync the SMP branch with 3.3
@
text
@d107 5
a111 5
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)((PTDPTDI<<PDSHIFT) - USPACE))
#define VM_MAX_ADDRESS		((vaddr_t)((PTDPTDI<<PDSHIFT) + (PTDPTDI<<PGSHIFT)))
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(APTDPTDI<<PDSHIFT))
@


1.14.4.7
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14.4.6 2003/03/27 23:26:55 niklas Exp $	*/
d70 1
a70 1
#define	MAXDSIZ		(1024*1024*1024)	/* max data size */
a77 3

/* I386 has a line where all code is executable: 0 - I386_MAX_EXE_ADDR */
#define I386_MAX_EXE_ADDR 0x20000000		/* exec line */
@


1.14.4.8
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14.4.7 2003/05/13 19:42:08 ho Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.14.4.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d82 1
a82 1
#define SHMMAXPGS	8192
@


1.13
log
@crank default limits
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 1999/09/17 16:52:06 deraadt Exp $	*/
d92 1
a92 1
#define SHMMAXPGS	1024
@


1.12
log
@grown i386 kvm to 512MB
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 1999/02/26 04:17:20 art Exp $	*/
d67 1
a67 1
#define	DFLDSIZ		(32*1024*1024)		/* initial data size limit */
d73 1
a73 1
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
@


1.11
log
@some defines needed by uvm
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 1998/04/25 20:31:37 mickey Exp $	*/
d135 4
a138 8
/* PTDPTDI<<PDSHIFT - USPACE */
#define VM_MAXUSER_ADDRESS	((vm_offset_t)0xefbfe000)
/* PTDPTDI<<PDSHIFT + PTDPTDI<<PGSHIFT */
#define VM_MAX_ADDRESS		((vm_offset_t)0xeffdf000)
/* KPTDI<<PDSHIFT */
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)0xf0000000)
/* APTDPTDI<<PDSHIFT */
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)0xffc00000)
@


1.10
log
@convert i386 to MNN
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 1997/08/26 21:19:34 deraadt Exp $	*/
d154 4
@


1.9
log
@and considering text segments are normally not even going to hit swap
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 1997/08/26 21:18:43 deraadt Exp $	*/
d42 2
a43 1

a143 2
#define	MACHINE_NONCONTIG	/* VM <=> pmap interface modifier */

d148 24
@


1.8
log
@come on, let people run useful sized software!
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 1997/08/26 21:12:52 deraadt Exp $	*/
d64 1
a64 1
#define	MAXTSIZ		(16*1024*1024)		/* max text size */
@


1.7
log
@reasonably useful data size
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 1997/07/16 21:43:11 kstailey Exp $	*/
d72 1
a72 1
#define	DFLSSIZ		(1*1024*1024)		/* initial stack size limit */
@


1.6
log
@add tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
@


1.5
log
@be more conservative
@
text
@d1 1
@


1.4
log
@Raise memory resource limits, drive by the need to run netscape 4.0b5
which has a text segment of > 8MB.

If you maintain a port you might want to do the same.
@
text
@d63 1
a63 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d65 1
a65 1
#define	DFLDSIZ		(128*1024*1024)		/* initial data size limit */
d71 1
a71 1
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
@


1.3
log
@grow kvm space; fix an over-agressive pmap optimization
@
text
@d63 1
a63 1
#define	MAXTSIZ		(8*1024*1024)		/* max text size */
d65 1
a65 1
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
d68 1
a68 1
#define	MAXDSIZ		(256*1024*1024)		/* max data size */
d71 1
a71 1
#define	DFLSSIZ		(512*1024)		/* initial stack size limit */
d74 1
a74 1
#define	MAXSSIZ		(8*1024*1024)		/* max stack size */
@


1.2
log
@MACHINE_NONCONTIG always on
@
text
@d133 2
a134 2
/* PTDPTDI<<PDSHIFT - UPAGES*NBPG */
#define VM_MAXUSER_ADDRESS	((vm_offset_t)0xf7bfe000)
d136 1
a136 1
#define VM_MAX_ADDRESS		((vm_offset_t)0xf7fdf000)
d138 1
a138 1
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)0xf8000000)
@


1.1
log
@Initial revision
@
text
@d142 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
