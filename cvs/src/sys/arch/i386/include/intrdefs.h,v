head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.14
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.10
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.12
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.8
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.15
date	2016.10.21.06.20.58;	author mlarkin;	state Exp;
branches;
next	1.14;
commitid	szRuKZ9HgqvwYLcM;

1.14
date	2013.05.16.19.26.04;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2011.07.05.17.11.07;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.22.21.29.55;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.04.26.14.33.27;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2008.04.18.20.20.35;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.07.08.37.38;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.21.21.06.15;	author gwk;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.12.20.22.58;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.12.02.04.16;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.31.09.31.15;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.29.03.20.39;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.25.23.17.47;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.13.21.49.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.18.02.07.52;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.03.18.02.07.52;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.15
log
@
vmm(4) for i386. Userland changes forthcoming. Note that for the time being,
i386 hosts are limited to running only i386 guests, even if the underlying
hardware supports amd64. This is a restriction I hope to lift moving forward,
but for now please don't report problems running amd64 guests on i386 hosts.

This was a straightforward port of the in-tree amd64 code plus the old rotted
tree I had from last year for i386 support. Changes included converting 64-bit
VMREAD/VMWRITE ops to 2x32-bit ops, and fixing treatment of the TSS, which
differs on i386.

ok deraadt@@
@
text
@/*	$OpenBSD: intrdefs.h,v 1.14 2013/05/16 19:26:04 kettenis Exp $	*/
/*	$NetBSD: intrdefs.h,v 1.2 2003/05/04 22:01:56 fvdl Exp $	*/

#ifndef _I386_INTRDEFS_H
#define _I386_INTRDEFS_H

/*
 * Intel APICs (advanced programmable interrupt controllers) have
 * bytesized priority registers where the upper nibble is the actual
 * interrupt priority level (a.k.a. IPL).  Interrupt vectors are
 * closely tied to these levels as interrupts whose vectors' upper
 * nibble is lower than or equal to the current level are blocked.
 * Not all 256 possible vectors are available for interrupts in
 * APIC systems, only
 *
 * For systems where instead the older ICU (interrupt controlling
 * unit, a.k.a. PIC or 82C59) is used, the IPL is not directly useful,
 * since the interrupt blocking is handled via interrupt masks instead
 * of levels.  However the IPL is easily used as an offset into arrays
 * of masks.
 */
#define IPLSHIFT 4	/* The upper nibble of vectors is the IPL.	*/
#define NIPL 16		/* Four bits of information gives as much.	*/
#define IPL(level) ((level) >> IPLSHIFT)	/* Extract the IPL.	*/
/* XXX Maybe this IDTVECOFF definition should be elsewhere? */
#define IDTVECOFF 0x20	/* The lower 32 IDT vectors are reserved.	*/

/*
 * This macro is only defined for 0 <= x < 14, i.e. there are fourteen
 * distinct priority levels available for interrupts.
 */
#define MAKEIPL(priority) (IDTVECOFF + ((priority) << IPLSHIFT))

/*
 * Interrupt priority levels.
 *
 * XXX We are somewhat sloppy about what we mean by IPLs, sometimes
 * XXX we refer to the eight-bit value suitable for storing into APICs'
 * XXX priority registers, other times about the four-bit entity found
 * XXX in the former values' upper nibble, which can be used as offsets
 * XXX in various arrays of our implementation.  We are hoping that
 * XXX the context will provide enough information to not make this
 * XXX sloppy naming a real problem.
 * 
 * There are tty, network and disk drivers that use free() at interrupt
 * time, so imp > (tty | net | bio).
 *
 * Since run queues may be manipulated by both the statclock and tty,
 * network, and disk drivers, clock > imp.
 *
 * IPL_HIGH must block everything that can manipulate a run queue.
 *
 * XXX Ultimately we may need serial drivers to run at the absolute highest
 * XXX priority to avoid overruns, then we must make serial > high.
 *
 * The level numbers are picked to fit into APIC vector priorities.
 */
#define	IPL_NONE	0		/* nothing */
#define	IPL_SOFTCLOCK	MAKEIPL(1)	/* timeouts */
#define	IPL_SOFTNET	MAKEIPL(2)	/* protocol stacks */
#define	IPL_BIO		MAKEIPL(3)	/* block I/O */
#define	IPL_NET		MAKEIPL(4)	/* network */
#define	IPL_SOFTTTY	MAKEIPL(5)	/* delayed terminal handling */
#define	IPL_TTY		MAKEIPL(6)	/* terminal */
#define	IPL_VM		MAKEIPL(7)	/* memory allocation */
#define	IPL_AUDIO	MAKEIPL(8)	/* audio */
#define	IPL_CLOCK	MAKEIPL(9)	/* clock */
#define	IPL_STATCLOCK	IPL_CLOCK	/* statclock */
#define	IPL_SCHED	IPL_CLOCK
#define	IPL_HIGH	MAKEIPL(10)	/* everything */
#define	IPL_IPI		MAKEIPL(11)	/* interprocessor interrupt */

#define	IPL_MPSAFE	0x100

/* Interrupt sharing types. */
#define	IST_NONE	0	/* none */
#define	IST_PULSE	1	/* pulsed */
#define	IST_EDGE	2	/* edge-triggered */
#define	IST_LEVEL	3	/* level-triggered */

/*
 * Local APIC masks. Must not conflict with SIR_* below, and must
 * be >= NUM_LEGACY_IRQs. Note that LIR_IPI must be first.
 */
#define LIR_IPI		31
#define LIR_TIMER	30

/* Soft interrupt masks. */
#define	SIR_CLOCK	29
#define	SIR_NET		28
#define	SIR_TTY		27


/*
 * Maximum # of interrupt sources per CPU. 32 to fit in one word.
 * ioapics can theoretically produce more, but it's not likely to
 * happen. For multiple ioapics, things can be routed to different
 * CPUs.
 */
#define MAX_INTR_SOURCES	32
#define NUM_LEGACY_IRQS		16

/*
 * Low and high boundaries between which interrupt gates will
 * be allocated in the IDT.
 */
#define IDT_INTR_LOW	(0x20 + NUM_LEGACY_IRQS)
#define IDT_INTR_HIGH	0xef

#define I386_IPI_HALT		0x00000001
#define I386_IPI_NOP		0x00000002
#define I386_IPI_FLUSH_FPU	0x00000004
#define I386_IPI_SYNCH_FPU	0x00000008
#define I386_IPI_MTRR		0x00000010
#define I386_IPI_GDT		0x00000020
#define I386_IPI_DDB		0x00000040	/* synchronize while in ddb */
#define I386_IPI_SETPERF	0x00000080
#define I386_IPI_START_VMM	0x00000100
#define I386_IPI_STOP_VMM	0x00000200

#define I386_NIPI	10

#define I386_IPI_NAMES { "halt IPI", "nop IPI", "FPU flush IPI", \
			 "FPU synch IPI", \
			 "MTRR update IPI", "GDT update IPI", \
			 "DDB IPI", "setperf IPI", "VMM start IPI", \
			 "VMM stop IPI" }

#define IREENT_MAGIC	0x18041969

#endif /* _I386_INTRDEFS_H */
@


1.14
log
@Implement a mechanism to establish interrupt handlers that don't grab the
kernel lock upon entry through a new IPL_MPSAFE flag/level.
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.13 2011/07/05 17:11:07 oga Exp $	*/
d118 2
d121 1
a121 1
#define I386_NIPI	8
d126 2
a127 1
			 "DDB IPI", "setperf IPI" }
@


1.13
log
@N: Thou shalt not call hardclock() with biglock held.

i386 disobeys the Nth commandment. Fix this. While here, make i386 and amd64
definitions of iplclock and statclock match.

ok art@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.12 2010/05/22 21:29:55 deraadt Exp $	*/
d72 2
@


1.12
log
@protection should use the upper case names
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.11 2008/04/26 14:33:27 kettenis Exp $	*/
d68 4
a71 4
#define	IPL_STATCLOCK	MAKEIPL(10)	/* statclock */
#define	IPL_SCHED	IPL_STATCLOCK
#define	IPL_HIGH	MAKEIPL(11)	/* everything */
#define	IPL_IPI		MAKEIPL(12)	/* interprocessor interrupt */
@


1.11
log
@Remove softast; it's no longer used.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.10 2008/04/18 20:20:35 kettenis Exp $	*/
d4 2
a5 2
#ifndef _i386_INTRDEFS_H
#define _i386_INTRDEFS_H
@


1.10
log
@Now that i386 has a per-process astpending, we can garbage collect ipi_ast
and do an ipi_nop cross-call from signotify() instead.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.9 2007/09/07 08:37:38 art Exp $	*/
a58 1
#define IPL_SOFTAST	MAKEIPL(0)	/* AST */
a89 1
#define SIR_AST		26
@


1.9
log
@Remove some left-overs from the TSC based microtime. We don't need
to synchronize the tsc between CPUs anymore. While here, also remove
the slow TLB IPI since it's been dead for a while.

noticed by mickey
toby@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.8 2007/04/21 21:06:15 gwk Exp $	*/
d111 7
a117 6
#define I386_IPI_FLUSH_FPU	0x00000002
#define I386_IPI_SYNCH_FPU	0x00000004
#define I386_IPI_MTRR		0x00000008
#define I386_IPI_GDT		0x00000010
#define I386_IPI_DDB		0x00000020	/* synchronize while in ddb */
#define I386_IPI_SETPERF	0x00000040
d119 1
a119 1
#define I386_NIPI	7
d121 1
a121 1
#define I386_IPI_NAMES { "halt IPI", "FPU flush IPI", \
@


1.8
log
@Introduce a smp aware hw.setperf mechanism, it will scale all CPUs or
cores by the same amount, i.e. if you do hw.setperf=50 both cores will
be scaled to the opearting state corresponing to 50%. Tested by many with
est (mainly on core2duo machines like X60 thinkpads). Only enable est
during GENERIC.MP build no one tested powernow.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.7 2007/04/12 20:22:58 art Exp $	*/
d111 6
a116 8
#define I386_IPI_MICROSET	0x00000002
#define I386_IPI_FLUSH_FPU	0x00000004
#define I386_IPI_SYNCH_FPU	0x00000008
#define I386_IPI_TLB		0x00000010
#define I386_IPI_MTRR		0x00000020
#define I386_IPI_GDT		0x00000040
#define I386_IPI_DDB		0x00000080	/* synchronize while in ddb */
#define I386_IPI_SETPERF	0x00000100
d118 1
a118 1
#define I386_NIPI	9
d120 2
a121 2
#define I386_IPI_NAMES { "halt IPI", "timeset IPI", "FPU flush IPI", \
			 "FPU synch IPI", "TLB shootdown IPI", \
@


1.7
log
@Faster signal delivery on i386/MP.

We need to poke the other CPU so that it processes the AST immediately
and doesn't wait for the next interrupt or syscall.

Since IPIs really shouldn't process ASTs, we need to trigger a soft
interrupt on the destination CPU to process the AST. But since we can't
send soft interrupts to other CPUs, we send an IPI, that triggers a soft
interrupt that in turn processes the AST.

Also, this marks the beginning of moving to slightly better IPI mechanism
of short and optimized IPIs instead of the large and complicated IPI
infrastructure we're using now.

tested by many, ok tholo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.6 2006/03/12 02:04:16 brad Exp $	*/
d118 1
d120 1
a120 1
#define I386_NIPI	8
d125 1
a125 1
			 "DDB IPI" }
@


1.6
log
@remove IPL_IMP and splimp().
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.5 2005/05/31 09:31:15 art Exp $	*/
d59 11
a69 10
#define	IPL_SOFTCLOCK	MAKEIPL(0)	/* timeouts */
#define	IPL_SOFTNET	MAKEIPL(1)	/* protocol stacks */
#define	IPL_BIO		MAKEIPL(2)	/* block I/O */
#define	IPL_NET		MAKEIPL(3)	/* network */
#define	IPL_SOFTTTY	MAKEIPL(4)	/* delayed terminal handling */
#define	IPL_TTY		MAKEIPL(5)	/* terminal */
#define	IPL_VM		MAKEIPL(6)	/* memory allocation */
#define	IPL_AUDIO	MAKEIPL(7)	/* audio */
#define	IPL_CLOCK	MAKEIPL(8)	/* clock */
#define	IPL_STATCLOCK	MAKEIPL(9)	/* statclock */
d71 2
a72 2
#define	IPL_HIGH	MAKEIPL(9)	/* everything */
#define	IPL_IPI		MAKEIPL(10)	/* interprocessor interrupt */
d91 1
@


1.5
log
@IPL_SCHED should block statclock on architectures where the scheduler
is clocked by the statclock.

miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.4 2005/05/29 03:20:39 deraadt Exp $	*/
a65 1
#define IPL_IMP		IPL_VM		/* XXX - should not be here. */
@


1.4
log
@sched work by niklas and art backed out; causes panics
@
text
@d1 1
a1 1
/*	$OpenBSD: intrdefs.h,v 1.2 2004/06/13 21:49:16 niklas Exp $	*/
a68 1
#define	IPL_SCHED	IPL_CLOCK
d70 1
@


1.3
log
@This patch is mortly art's work and was done *a year* ago.  Art wants to thank
everyone for the prompt review and ok of this work ;-)  Yeah, that includes me
too, or maybe especially me.  I am sorry.

Change the sched_lock to a mutex. This fixes, among other things, the infamous
"telnet localhost &" problem.  The real bug in that case was that the sched_lock
which is by design a non-recursive lock, was recursively acquired, and not
enough releases made us hold the lock in the idle loop, blocking scheduling
on the other processors.  Some of the other processors would hold the biglock though,
which made it impossible for cpu 0 to enter the kernel...  A nice deadlock.
Let me just say debugging this for days just to realize that it was all fixed
in an old diff noone ever ok'd was somewhat of an anti-climax.

This diff also changes splsched to be correct for all our architectures.
@
text
@d69 1
a70 1
#define	IPL_SCHED	IPL_STATCLOCK
@


1.2
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a68 1
#define	IPL_SCHED	IPL_CLOCK
d70 1
@


1.1
log
@file intrdefs.h was initially added on branch SMP.
@
text
@d1 127
@


1.1.2.1
log
@move out constant defs to its own header a la NetBSD
@
text
@a0 127
/*	$OpenBSD: intrdefs.h,v 1.2 2003/05/04 22:01:56 fvdl Exp $	*/
/*	$NetBSD: intrdefs.h,v 1.2 2003/05/04 22:01:56 fvdl Exp $	*/

#ifndef _i386_INTRDEFS_H
#define _i386_INTRDEFS_H

/*
 * Intel APICs (advanced programmable interrupt controllers) have
 * bytesized priority registers where the upper nibble is the actual
 * interrupt priority level (a.k.a. IPL).  Interrupt vectors are
 * closely tied to these levels as interrupts whose vectors' upper
 * nibble is lower than or equal to the current level are blocked.
 * Not all 256 possible vectors are available for interrupts in
 * APIC systems, only
 *
 * For systems where instead the older ICU (interrupt controlling
 * unit, a.k.a. PIC or 82C59) is used, the IPL is not directly useful,
 * since the interrupt blocking is handled via interrupt masks instead
 * of levels.  However the IPL is easily used as an offset into arrays
 * of masks.
 */
#define IPLSHIFT 4	/* The upper nibble of vectors is the IPL.	*/
#define NIPL 16		/* Four bits of information gives as much.	*/
#define IPL(level) ((level) >> IPLSHIFT)	/* Extract the IPL.	*/
/* XXX Maybe this IDTVECOFF definition should be elsewhere? */
#define IDTVECOFF 0x20	/* The lower 32 IDT vectors are reserved.	*/

/*
 * This macro is only defined for 0 <= x < 14, i.e. there are fourteen
 * distinct priority levels available for interrupts.
 */
#define MAKEIPL(priority) (IDTVECOFF + ((priority) << IPLSHIFT))

/*
 * Interrupt priority levels.
 *
 * XXX We are somewhat sloppy about what we mean by IPLs, sometimes
 * XXX we refer to the eight-bit value suitable for storing into APICs'
 * XXX priority registers, other times about the four-bit entity found
 * XXX in the former values' upper nibble, which can be used as offsets
 * XXX in various arrays of our implementation.  We are hoping that
 * XXX the context will provide enough information to not make this
 * XXX sloppy naming a real problem.
 * 
 * There are tty, network and disk drivers that use free() at interrupt
 * time, so imp > (tty | net | bio).
 *
 * Since run queues may be manipulated by both the statclock and tty,
 * network, and disk drivers, clock > imp.
 *
 * IPL_HIGH must block everything that can manipulate a run queue.
 *
 * XXX Ultimately we may need serial drivers to run at the absolute highest
 * XXX priority to avoid overruns, then we must make serial > high.
 *
 * The level numbers are picked to fit into APIC vector priorities.
 */
#define	IPL_NONE	0		/* nothing */
#define	IPL_SOFTCLOCK	MAKEIPL(0)	/* timeouts */
#define	IPL_SOFTNET	MAKEIPL(1)	/* protocol stacks */
#define	IPL_BIO		MAKEIPL(2)	/* block I/O */
#define	IPL_NET		MAKEIPL(3)	/* network */
#define	IPL_SOFTTTY	MAKEIPL(4)	/* delayed terminal handling */
#define	IPL_TTY		MAKEIPL(5)	/* terminal */
#define	IPL_VM		MAKEIPL(6)	/* memory allocation */
#define IPL_IMP		IPL_VM		/* XXX - should not be here. */
#define	IPL_AUDIO	MAKEIPL(7)	/* audio */
#define	IPL_CLOCK	MAKEIPL(8)	/* clock */
#define	IPL_SCHED	IPL_CLOCK
#define	IPL_STATCLOCK	MAKEIPL(9)	/* statclock */
#define	IPL_HIGH	MAKEIPL(9)	/* everything */
#define	IPL_IPI		MAKEIPL(10)	/* interprocessor interrupt */

/* Interrupt sharing types. */
#define	IST_NONE	0	/* none */
#define	IST_PULSE	1	/* pulsed */
#define	IST_EDGE	2	/* edge-triggered */
#define	IST_LEVEL	3	/* level-triggered */

/*
 * Local APIC masks. Must not conflict with SIR_* below, and must
 * be >= NUM_LEGACY_IRQs. Note that LIR_IPI must be first.
 */
#define LIR_IPI		31
#define LIR_TIMER	30

/* Soft interrupt masks. */
#define	SIR_CLOCK	29
#define	SIR_NET		28
#define	SIR_TTY		27


/*
 * Maximum # of interrupt sources per CPU. 32 to fit in one word.
 * ioapics can theoretically produce more, but it's not likely to
 * happen. For multiple ioapics, things can be routed to different
 * CPUs.
 */
#define MAX_INTR_SOURCES	32
#define NUM_LEGACY_IRQS		16

/*
 * Low and high boundaries between which interrupt gates will
 * be allocated in the IDT.
 */
#define IDT_INTR_LOW	(0x20 + NUM_LEGACY_IRQS)
#define IDT_INTR_HIGH	0xef

#define I386_IPI_HALT		0x00000001
#define I386_IPI_MICROSET	0x00000002
#define I386_IPI_FLUSH_FPU	0x00000004
#define I386_IPI_SYNCH_FPU	0x00000008
#define I386_IPI_TLB		0x00000010
#define I386_IPI_MTRR		0x00000020
#define I386_IPI_GDT		0x00000040
#define I386_IPI_DDB		0x00000080	/* synchronize while in ddb */

#define I386_NIPI	8

#define I386_IPI_NAMES { "halt IPI", "timeset IPI", "FPU flush IPI", \
			 "FPU synch IPI", "TLB shootdown IPI", \
			 "MTRR update IPI", "GDT update IPI", \
			 "DDB IPI" }

#define IREENT_MAGIC	0x18041969

#endif /* _I386_INTRDEFS_H */
@

