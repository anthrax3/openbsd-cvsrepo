head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.28
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.30
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.22
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.26
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.24
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.20
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.18
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.16
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.14
	OPENBSD_5_0:1.12.0.12
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.10
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.16
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.14
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.12
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.10
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.8
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.10
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.03.03.12.41.30;	author naddy;	state Exp;
branches;
next	1.12;
commitid	Ykztt9UU7jxBEqeD;

1.12
date	2009.02.03.11.24.19;	author mikeb;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.10;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.13.21.49.16;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.05.23.25.45;	author art;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.04.30.13.17.37;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.22.23.36.52;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.11.11.22.53.40;	author deraadt;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	96.05.30.09.30.10;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.29.14.13.48;	author hvozda;	state Exp;
branches;
next	1.2;

1.2
date	96.04.18.19.21.37;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches;
next	;

1.5.10.1
date	2001.04.18.16.07.32;	author niklas;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2001.07.04.10.16.47;	author niklas;	state Exp;
branches;
next	1.5.10.3;

1.5.10.3
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.5.10.4;

1.5.10.4
date	2003.04.11.16.12.57;	author niklas;	state Exp;
branches;
next	1.5.10.5;

1.5.10.5
date	2003.05.15.04.08.02;	author niklas;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove option USER_LDT and everything depending on it.
Remove machdep.userldt sysctl.
Remove i386_[gs]et_ldt syscall stub from libi386.
Remove i386_[gs]et_ldt regression test.

ok mlarkin@@ millert@@ guenther@@
@
text
@/*	$OpenBSD: gdt.h,v 1.12 2009/02/03 11:24:19 mikeb Exp $	*/
/*	$NetBSD: gdt.h,v 1.7.10.6 2002/08/19 01:22:36 sommerfeld Exp $	*/

/*-
 * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by John T. Kohl and Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _LOCORE

struct cpu_info;
struct pcb;
struct pmap;
union descriptor;

void gdt_alloc_cpu(struct cpu_info *);
int gdt_get_slot(void);
void gdt_init(void);
void gdt_init_cpu(struct cpu_info *);
void gdt_reload_cpu(/* XXX struct cpu_info * */ void);
int tss_alloc(struct pcb *);
void tss_free(int);
void setgdt(int, void *, size_t, int, int, int, int);
#endif

/*
 * Maximum GDT size.  It cannot exceed 65536 since the selector field of
 * a descriptor is just 16 bits, and used as free list link.
 */

#define MAXGDTSIZ 65536
@


1.12
log
@Free TSS on the stack of the dead process.

In order to do that we have to remove all sleeping parts: sleeping
memory allocation and a sleeping lock.  Thus we're moving this code
to the spinning lock (mutex) and getting rid of the GDT grow code.
Downside is that now we're pre-allocating 64kb of memory per CPU
from the start, but this might be optimized in future.

This also unifies GDT code and MAXGDTSIZ define across i386 and amd64.

With help from mickey.

ok toby, art
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.11 2008/06/26 05:42:10 ray Exp $	*/
a44 2
void ldt_alloc(struct pmap *, union descriptor *, size_t);
void ldt_free(struct pmap *);
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.10 2004/06/13 21:49:16 niklas Exp $	*/
d53 2
a54 8
 * The initial GDT size (as a descriptor count), and the maximum
 * GDT size possible.
 *
 * These are actually not arbitrary.  To start with, they have to be
 * multiples of 512 and at least 512, in order to work with the
 * allocation strategy set forth by gdt_init and gdt_grow.  Then, the
 * max cannot exceed 65536 since the selector field of a descriptor is
 * just 16 bits, and used as free list link.
d57 1
a57 2
#define MINGDTSIZ 512
#define MAXGDTSIZ 8192
@


1.10
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: gdt.h,v 1.8 2001/05/05 23:25:45 art Exp $	*/
/*	$NetBSD: gdt.h,v 1.3 1996/02/27 22:32:11 jtc Exp $	*/
d5 1
a5 1
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
d40 9
a48 1
#ifdef _KERNEL
d50 2
a51 2
void tss_alloc(struct pcb *);
void tss_free(struct pcb *);
d54 3
d58 14
@


1.8
log
@PMAP_NEW and UVM are no longer optional on i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.7 2001/04/30 13:17:37 art Exp $	*/
d41 5
a45 5
void gdt_init __P((void));
void tss_alloc __P((struct pcb *));
void tss_free __P((struct pcb *));
void ldt_alloc __P((struct pmap *, union descriptor *, size_t));
void ldt_free __P((struct pmap *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.8 2001/05/05 23:25:45 art Exp $	*/
d41 5
a45 5
void gdt_init(void);
void tss_alloc(struct pcb *);
void tss_free(struct pcb *);
void ldt_alloc(struct pmap *, union descriptor *, size_t);
void ldt_free(struct pmap *);
@


1.7
log
@Move gdt_init prototype to gdt.h
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.6 2001/03/22 23:36:52 niklas Exp $	*/
a43 1
#ifdef PMAP_NEW
a45 4
#else
void ldt_alloc __P((struct pcb *, union descriptor *, size_t));
void ldt_free __P((struct pcb *));
#endif
@


1.6
log
@Merge in NetBSD's PMAP_NEW, still disabled
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.5 1997/11/11 22:53:40 deraadt Exp $	*/
d41 1
@


1.5
log
@put protos inside #ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.4 1996/05/30 09:30:10 deraadt Exp $	*/
d43 4
d49 1
@


1.5.10.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.6 2001/03/22 23:36:52 niklas Exp $	*/
a42 4
#ifdef PMAP_NEW
void ldt_alloc __P((struct pmap *, union descriptor *, size_t));
void ldt_free __P((struct pmap *));
#else
a44 1
#endif
@


1.5.10.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.5.10.1 2001/04/18 16:07:32 niklas Exp $	*/
a40 1
void gdt_init __P((void));
d43 1
d46 4
@


1.5.10.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 5
a45 5
void gdt_init(void);
void tss_alloc(struct pcb *);
void tss_free(struct pcb *);
void ldt_alloc(struct pmap *, union descriptor *, size_t);
void ldt_free(struct pmap *);
@


1.5.10.4
log
@Move TSS selector from the PCB to MD part of proc and to cpu_info.
Maintain a list of CPUs and provide an iterator for it.
Ifdef out IPI debugging.  Call pmap_{de,}activate as part of context switching.
Mostly from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.5.10.3 2002/03/28 10:31:04 niklas Exp $	*/
d42 2
a43 2
int tss_alloc(struct pcb *);
void tss_free(int);
@


1.5.10.5
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 2
a2 2
/*	$OpenBSD: gdt.h,v 1.5.10.4 2003/04/11 16:12:57 niklas Exp $	*/
/*	$NetBSD: gdt.h,v 1.7.10.6 2002/08/19 01:22:36 sommerfeld Exp $	*/
d5 1
a5 1
 * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.
d40 1
a40 9
#ifndef _LOCORE

struct cpu_info;
struct pcb;
struct pmap;
union descriptor;

void gdt_alloc_cpu(struct cpu_info *);
int gdt_get_slot(void);
d42 2
a43 2
void gdt_init_cpu(struct cpu_info *);
void gdt_reload_cpu(/* XXX struct cpu_info * */ void);
a45 3
int tss_alloc(struct pcb *);
void tss_free(int);
void setgdt(int, void *, size_t, int, int, int, int);
a46 14

/*
 * The initial GDT size (as a descriptor count), and the maximum
 * GDT size possible.
 *
 * These are actually not arbitrary.  To start with, they have to be
 * multiples of 512 and at least 512, in order to work with the
 * allocation strategy set forth by gdt_init and gdt_grow.  Then, the
 * max cannot exceed 65536 since the selector field of a descriptor is
 * just 16 bits, and used as free list link.
 */

#define MINGDTSIZ 512
#define MAXGDTSIZ 8192
@


1.4
log
@clean & sync
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.3 1996/04/29 14:13:48 hvozda Exp $	*/
d40 1
d45 1
@


1.3
log
@Pull in John Kohl's [jtk@@netbsd.org] most recent (15Apr96) APM and PCMCIA work
(original PCMCIA framework  by Stefan Grefen [grefen@@convex.com]).
@
text
@d1 1
a1 1
/*	$OpenBSD: gdt.h,v 1.2 1996/04/18 19:21:37 niklas Exp $	*/
a38 3

#define	MAXGDTSIZ	8192		/* max # entries in an i386 GDT */
extern union descriptor *dynamic_gdt;
@


1.2
log
@Merge of NetBSD 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 3
@


1.1
log
@Initial revision
@
text
@d1 39
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
