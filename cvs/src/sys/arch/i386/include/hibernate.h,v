head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.14
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.9
date	2014.05.31.06.30.16;	author mlarkin;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.04.01.20.23;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.31.19.59.59;	author mlarkin;	state Exp;
branches;
next	1.6;

1.6
date	2013.05.30.19.00.59;	author mlarkin;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.21.02.51.23;	author mlarkin;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.09.00.55.00;	author mlarkin;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.09.00.27.31;	author mlarkin;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.09.00.08.04;	author mlarkin;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.30.15.33.18;	author mlarkin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
Remove some unused code that we added at the 2013 Toronto hackathon but
don't need anymore.
@
text
@/*	$OpenBSD: hibernate.h,v 1.8 2013/06/04 01:20:23 pirofti Exp $	*/

/*
 * Copyright (c) 2011 Mike Larkin <mlarkin@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/hibernate_var.h>

/* i386 hibernate support structures and functions */

int	get_hibernate_info_md(union hibernate_info *);
void	hibernate_flush(void);
void	hibernate_enter_resume_mapping(vaddr_t, paddr_t, int);
int	hibernate_inflate_skip(union hibernate_info *, paddr_t);
int	hibernate_suspend(void);
void	hibernate_switch_stack_machdep(void);
void	hibernate_resume_machdep(void);
void	hibernate_activate_resume_pt_machdep(void);
void	hibernate_enable_intr_machdep(void);
void	hibernate_disable_intr_machdep(void);
#ifdef MULTIPROCESSOR
void	hibernate_quiesce_cpus(void);
#endif /* MULTIPROCESSOR */
@


1.8
log
@Add RCS ids.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 1
void	hibernate_prepare_resume_machdep(union hibernate_info *);
@


1.7
log
@

We need to halt the APs on MP hibernate resume or else they will be
executing code possibly causing side effects during the image unpack
operation. But before we can halt the APs, we need to complete their init
(as they will be hatched but idling, possibly with interrupts off).

Introduces MD function hibernate_quiesce_cpus to do this, called from the
MI hibernate resume code.

ok deraadt
@
text
@d1 2
@


1.6
log
@

Make interrupt handling in hibernate resume MI by providing MD-specific
functions to enable and disable interrupts, if needed. If a platform doesnt
need interrupt handling in this way, the MD function can be a no-op.

discussed with pirofti and deraadt
@
text
@d32 3
@


1.5
log
@

Perform most of the remaining refactoring of hibernate code into
MI/MD parts. This also introduces a chunk placement routine that was
originally developed at c2k11 with help from drahn and ariane.

There are still a few more things to do for hibernate, but those can be
worked on in-tree. This code is disabled by default, and not yet called.

ok deraadt@@ (and deraadt@@ said kettenis@@ also ok'ed it :) )
@
text
@d30 2
@


1.4
log
@

Extract MI pmap function hibernate_enter_resume_mapping, refactor old i386
resume pmap code to match.

Add hibernate deflater and inflater and cache flush routines.

Code is not presently called or automatically built.
@
text
@d24 2
a25 2
int	hibernate_zlib_reset(int);
int	hibernate_inflate_skip(paddr_t);
d27 3
a29 1
void	hibernate_resume(void);
@


1.3
log
@

Add zlib reset, alloc, and free functions for hibernate image compression
@
text
@d22 2
d25 1
@


1.2
log
@

Separate some MD and MI bits and a bit of refactoring to make subsequent
commits easier.

Work in progress, hibernate will still not work for you.

ok deraadt@@
@
text
@d22 1
@


1.1
log
@Preliminary plumbing code for i386 hibernate (suspend-to-disk).
This code is not yet called as there are still some important parts
not completed.

ok deraadt@@, kettenis@@ "looks reasonable"
@
text
@d21 1
a21 16
struct hibernate_memory_range {
	paddr_t		base;
	paddr_t		end;
};

struct hibernate_info {
	u_int 		nranges;		
	u_int64_t	image_size;
	dev_t		device;
	daddr_t		sig_offset;
	daddr_t		image_offset;
	struct hibernate_memory_range ranges[VM_PHYSSEG_MAX];
	char		kernel_version[128];
	int 		(*io_func)(dev_t, daddr_t, vaddr_t, size_t, int, void *);
};

@

