head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.12
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	UBC_SYNC_A:1.1
	UBC_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2017.05.29.14.19.49;	author mpi;	state Exp;
branches;
next	1.12;
commitid	4u6PWvBw90PH7UDq;

1.12
date	2016.04.03.11.05.26;	author jsg;	state Exp;
branches;
next	1.11;
commitid	IigiJlpH0gYGeBho;

1.11
date	2015.05.30.08.41.30;	author kettenis;	state Exp;
branches;
next	1.10;
commitid	WTgCsX48WglrjG8M;

1.10
date	2015.02.11.00.14.11;	author dlg;	state Exp;
branches;
next	1.9;
commitid	OPUATglsyqcmeG4g;

1.9
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.21.20.05.30;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.10;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.29.18.18.20;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.04.12.58.41;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.13.18.42.16;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.13.21.49.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.14.10.02.38;	author ho;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.07.14.10.02.38;	author ho;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.07.15.15.13.29;	author ho;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.05.15.04.08.02;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2004.06.13.18.46.04;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Kill SPINLOCK_SPIN_HOOK, use CPU_BUSY_CYCLE() instead.

ok visa@@, kettenis@@
@
text
@/*	$OpenBSD: lock.h,v 1.12 2016/04/03 11:05:26 jsg Exp $	*/

/* public domain */

#ifndef _MACHINE_LOCK_H_
#define	_MACHINE_LOCK_H_

#endif /* _MACHINE_LOCK_H_ */
@


1.12
log
@Remove __lockbarrier() defines, unused since cpu_lock removal a few
years ago.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.11 2015/05/30 08:41:30 kettenis Exp $	*/
a6 2

#define SPINLOCK_SPIN_HOOK __asm volatile("pause": : :"memory")
@


1.11
log
@Native atomic operations for i386.

ok deraadt@@, guenther@@, dlg@@
@
text
@d1 1
a1 2
/*	$OpenBSD: lock.h,v 1.10 2015/02/11 00:14:11 dlg Exp $	*/
/*	$NetBSD: lock.h,v 1.1.2.2 2000/05/03 14:40:55 sommerfeld Exp $	*/
d3 1
a3 32
/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-dependent spin lock operations.
 */
a7 9
/*
 * compiler barrier: prevent reordering of instructions.
 * XXX something similar will move to <sys/cdefs.h>
 * or thereabouts.
 * This prevents the compiler from reordering code around
 * this "instruction", acting as a sequence point for code generation.
 */

#define __lockbarrier() __asm volatile("": : :"memory")
@


1.10
log
@make the rwlock implementation MI.

each arch used to have to provide an rw_cas operation, but now we
have the rwlock code build its own version. on smp machines it uses
atomic_cas_ulong. on uniproc machines it avoids interlocked
instructions by using straight loads and stores. this is safe because
rwlocks are only used from process context and processes are currently
not preemptible in our kernel. so alpha/ppc/etc might get a benefit.

ok miod@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.9 2014/03/29 18:09:29 guenther Exp $	*/
d49 1
a49 8

#define SPINLOCK_SPIN_HOOK	__asm volatile("pause": : :"memory")

#include <machine/atomic.h>

#ifdef _KERNEL
extern int rw_cas_486(volatile unsigned long *, unsigned long, unsigned long);
#endif
@


1.9
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.8 2013/05/21 20:05:30 tedu Exp $	*/
a55 1
#define rw_cas rw_cas_486
@


1.8
log
@remove unused cpu_lock code (where it is truly unused). it is not
part of the future we have planned. middling ok from a few
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.7 2011/03/23 16:54:35 pirofti Exp $	*/
d48 1
a48 1
#define __lockbarrier() __asm __volatile("": : :"memory")
d50 1
a50 1
#define SPINLOCK_SPIN_HOOK	__asm __volatile("pause": : :"memory")
@


1.7
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.6 2008/06/26 05:42:10 ray Exp $	*/
a39 5
typedef	__volatile int		__cpu_simple_lock_t;

#define	__SIMPLELOCK_LOCKED	1
#define	__SIMPLELOCK_UNLOCKED	0

a51 9
#ifdef LOCKDEBUG

extern void __cpu_simple_lock_init(__cpu_simple_lock_t *);
extern void __cpu_simple_lock(__cpu_simple_lock_t *);
extern int __cpu_simple_lock_try(__cpu_simple_lock_t *);
extern void __cpu_simple_unlock(__cpu_simple_lock_t *);

#else

a52 45

static __inline void __cpu_simple_lock_init(__cpu_simple_lock_t *)
	__attribute__((__unused__));
static __inline void __cpu_simple_lock(__cpu_simple_lock_t *)
	__attribute__((__unused__));
static __inline int __cpu_simple_lock_try(__cpu_simple_lock_t *)
	__attribute__((__unused__));
static __inline void __cpu_simple_unlock(__cpu_simple_lock_t *)
	__attribute__((__unused__));

static __inline void
__cpu_simple_lock_init(__cpu_simple_lock_t *lockp)
{
	*lockp = __SIMPLELOCK_UNLOCKED;
	__lockbarrier();
}

static __inline void
__cpu_simple_lock(__cpu_simple_lock_t *lockp)
{
	while (i386_atomic_testset_i(lockp, __SIMPLELOCK_LOCKED)
	    == __SIMPLELOCK_LOCKED)
		SPINLOCK_SPIN_HOOK;
	__lockbarrier();
}

static __inline int
__cpu_simple_lock_try(__cpu_simple_lock_t *lockp)
{
	int r = (i386_atomic_testset_i(lockp, __SIMPLELOCK_LOCKED)
	    == __SIMPLELOCK_UNLOCKED);

	__lockbarrier();

	return (r);
}

static __inline void
__cpu_simple_unlock(__cpu_simple_lock_t *lockp)
{
	__lockbarrier();
	*lockp = __SIMPLELOCK_UNLOCKED;
}

#endif /* !LOCKDEBUG */
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.5 2007/05/29 18:18:20 tom Exp $	*/
d37 2
a38 2
#ifndef _I386_LOCK_H_
#define	_I386_LOCK_H_
d118 1
a118 1
#endif /* _I386_LOCK_H_ */
@


1.5
log
@Remove support for 80386 processors.  Apologies if you have one of
the rare 80386-bases system with enough memory, a 387 FPU, a useable
disk subsystem, and the patience to wait for it to unpack the
distribution .tgz files.

approval from art@@ and many others (esp. nick@@); ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.4 2007/05/04 12:58:41 art Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@Implement rw_cas for i386.

It uses a function pointer to choose between the 386 and 486 versions.
The 386 version is not MP safe, but we're not expecting MP support
for 386 cpus.

miod@@ ok (and prodding)
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.3 2006/03/13 18:42:16 mickey Exp $	*/
d121 2
a122 2
extern int (*rw_cas_p)(volatile unsigned long *, unsigned long, unsigned long);
#define rw_cas (*rw_cas_p)
@


1.3
log
@time-bind and lower power in lock spinning and a couple of other ipi loops by using pause insn; brad@@ ok tedu@@ ok and feedback krw@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.2 2004/06/13 21:49:16 niklas Exp $	*/
d119 5
@


1.2
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 2
d95 2
a96 3
	    == __SIMPLELOCK_LOCKED) {
		continue;	/* spin */
	}
@


1.1
log
@file lock.h was initially added on branch SMP.
@
text
@d1 119
@


1.1.2.1
log
@Initial import of some SMP code from NetBSD.
Not really working here yet, but there is some work in progress.
@
text
@a0 109
/*	$NetBSD: lock.h,v 1.1.2.2 2000/05/03 14:40:55 sommerfeld Exp $	*/

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-dependent spin lock operations.
 */

#ifndef _I386_LOCK_H_
#define	_I386_LOCK_H_

typedef	__volatile int		__cpu_simple_lock_t;

#define	__SIMPLELOCK_LOCKED	1
#define	__SIMPLELOCK_UNLOCKED	0

#ifdef LOCKDEBUG

extern void __cpu_simple_lock_init __P((__cpu_simple_lock_t *));
extern void __cpu_simple_lock __P((__cpu_simple_lock_t *));
extern int __cpu_simple_lock_try __P((__cpu_simple_lock_t *));
extern void __cpu_simple_unlock __P((__cpu_simple_lock_t *));

#else

static __inline void __cpu_simple_lock_init __P((__cpu_simple_lock_t *))
	__attribute__((__unused__));
static __inline void __cpu_simple_lock __P((__cpu_simple_lock_t *))
	__attribute__((__unused__));
static __inline int __cpu_simple_lock_try __P((__cpu_simple_lock_t *))
	__attribute__((__unused__));
static __inline void __cpu_simple_unlock __P((__cpu_simple_lock_t *)) 
	__attribute__((__unused__));

static __inline void
__cpu_simple_lock_init(__cpu_simple_lock_t *alp)
{

	*alp = __SIMPLELOCK_UNLOCKED;
}

static __inline void
__cpu_simple_lock(__cpu_simple_lock_t *alp)
{
	int __val = __SIMPLELOCK_LOCKED;

	do {
		__asm __volatile("xchgl %0, %2"
			: "=r" (__val)
			: "0" (__val), "m" (*alp));
	} while (__val != __SIMPLELOCK_UNLOCKED);
}

static __inline int
__cpu_simple_lock_try(__cpu_simple_lock_t *alp)
{
	int __val = __SIMPLELOCK_LOCKED;

	__asm __volatile("xchgl %0, %2"
		: "=r" (__val)
		: "0" (__val), "m" (*alp));

	return ((__val == __SIMPLELOCK_UNLOCKED) ? 1 : 0);
}

void
__cpu_simple_unlock(__cpu_simple_lock_t *alp)
{

	*alp = __SIMPLELOCK_UNLOCKED;
}

#endif /* !LOCKDEBUG */

#endif /* _I386_LOCK_H_ */
@


1.1.2.2
log
@Add $OpenBSD$.
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.1.2.3
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.1.2.2 2001/07/15 15:13:29 ho Exp $	*/
a51 10
/*
 * compiler barrier: prevent reordering of instructions.
 * XXX something similar will move to <sys/cdefs.h>
 * or thereabouts.
 * This prevents the compiler from reordering code around
 * this "instruction", acting as a sequence point for code generation.
 */

#define __lockbarrier() __asm __volatile("": : :"memory")

a60 2
#include <machine/atomic.h>

d71 1
a71 1
__cpu_simple_lock_init(__cpu_simple_lock_t *lockp)
d73 2
a74 2
	*lockp = __SIMPLELOCK_UNLOCKED;
	__lockbarrier();
d78 1
a78 1
__cpu_simple_lock(__cpu_simple_lock_t *lockp)
d80 7
a86 5
	while (i386_atomic_testset_i(lockp, __SIMPLELOCK_LOCKED)
	    == __SIMPLELOCK_LOCKED) {
		continue;	/* spin */
	}
	__lockbarrier();
d90 1
a90 1
__cpu_simple_lock_try(__cpu_simple_lock_t *lockp)
d92 1
a92 2
	int r = (i386_atomic_testset_i(lockp, __SIMPLELOCK_LOCKED)
	    == __SIMPLELOCK_UNLOCKED);
d94 3
a96 1
	__lockbarrier();
d98 1
a98 1
	return (r);
d101 2
a102 2
static __inline void
__cpu_simple_unlock(__cpu_simple_lock_t *lockp)
d104 2
a105 2
	__lockbarrier();
	*lockp = __SIMPLELOCK_UNLOCKED;
@


1.1.2.4
log
@un__Pee
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.1.2.3 2003/05/15 04:08:02 niklas Exp $	*/
d64 4
a67 4
extern void __cpu_simple_lock_init(__cpu_simple_lock_t *);
extern void __cpu_simple_lock(__cpu_simple_lock_t *);
extern int __cpu_simple_lock_try(__cpu_simple_lock_t *);
extern void __cpu_simple_unlock(__cpu_simple_lock_t *);
d73 1
a73 1
static __inline void __cpu_simple_lock_init(__cpu_simple_lock_t *)
d75 1
a75 1
static __inline void __cpu_simple_lock(__cpu_simple_lock_t *)
d77 1
a77 1
static __inline int __cpu_simple_lock_try(__cpu_simple_lock_t *)
d79 1
a79 1
static __inline void __cpu_simple_unlock(__cpu_simple_lock_t *)
@


