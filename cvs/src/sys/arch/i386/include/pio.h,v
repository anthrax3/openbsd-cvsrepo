head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.10
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.6
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.42
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.40
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.36
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.38
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.34
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.32
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.30
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.28
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.26
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.24
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.22
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.20
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.18
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.16
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.14
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.12
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.10
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.8
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.6
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.04.25.21.31.24;	author guenther;	state Exp;
branches;
next	1.11;
commitid	Jx2fq8kp0uEBpslo;

1.11
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.27.04.34.23;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.26.17.46.04;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	99.03.09.15.39.08;	author mickey;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	99.01.31.14.56.01;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	97.11.10.23.40.45;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.04.18.19.21.40;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.05.19.03;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.21.15.03.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2001.04.18.16.07.37;	author niklas;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2001.07.04.10.16.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@We now following the ABI and always clear cld on function entry, so remove
the extra CLD instructions from when that wasn't true

testing miod@@ krw@@
@
text
@/*	$OpenBSD: pio.h,v 1.11 2014/03/29 18:09:29 guenther Exp $	*/
/*	$NetBSD: pio.h,v 1.13 1996/03/08 20:15:23 cgd Exp $	*/

/*
 * Copyright (c) 1993, 1995 Charles M. Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_PIO_H_
#define _MACHINE_PIO_H_

/*
 * Functions to provide access to i386 programmed I/O instructions.
 *
 * The in[bwl]() and out[bwl]() functions are split into two varieties: one to
 * use a small, constant, 8-bit port number, and another to use a large or
 * variable port number.  The former can be compiled as a smaller instruction.
 */


#ifdef __OPTIMIZE__

#define	__use_immediate_port(port) \
	(__builtin_constant_p((port)) && (port) < 0x100)

#else

#define	__use_immediate_port(port)	0

#endif


#define	inb(port) \
	(__use_immediate_port(port) ? __inbc(port) : __inb(port))

static __inline u_int8_t
__inbc(int port)
{
	u_int8_t data;
	__asm volatile("inb %w1,%0" : "=a" (data) : "id" (port));
	return data;
}

static __inline u_int8_t
__inb(int port)
{
	u_int8_t data;
	__asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static __inline void
insb(int port, void *addr, int cnt)
{
	__asm volatile("repne\n\tinsb"
	    : "+D" (addr), "+c" (cnt) : "d" (port) : "memory", "cc");
}

#define	inw(port) \
	(__use_immediate_port(port) ? __inwc(port) : __inw(port))

static __inline u_int16_t
__inwc(int port)
{
	u_int16_t data;
	__asm volatile("inw %w1,%0" : "=a" (data) : "id" (port));
	return data;
}

static __inline u_int16_t
__inw(int port)
{
	u_int16_t data;
	__asm volatile("inw %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static __inline void
insw(int port, void *addr, int cnt)
{
	__asm volatile("repne\n\tinsw"
	    : "+D" (addr), "+c" (cnt) : "d" (port) : "memory", "cc");
}

#define	inl(port) \
	(__use_immediate_port(port) ? __inlc(port) : __inl(port))

static __inline u_int32_t
__inlc(int port)
{
	u_int32_t data;
	__asm volatile("inl %w1,%0" : "=a" (data) : "id" (port));
	return data;
}

static __inline u_int32_t
__inl(int port)
{
	u_int32_t data;
	__asm volatile("inl %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm volatile("repne\n\tinsl"
	    : "+D" (addr), "+c" (cnt) : "d" (port) : "memory", "cc");
}

#define	outb(port, data) \
	(__use_immediate_port(port) ? __outbc(port, data) : __outb(port, data))

static __inline void
__outbc(int port, u_int8_t data)
{
	__asm volatile("outb %0,%w1" : : "a" (data), "id" (port));
}

static __inline void
__outb(int port, u_int8_t data)
{
	__asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
}

static __inline void
outsb(int port, const void *addr, int cnt)
{
	__asm volatile("repne\n\toutsb"
	    : "+S" (addr), "+c" (cnt) : "d" (port) : "cc");
}

#define	outw(port, data) \
	(__use_immediate_port(port) ? __outwc(port, data) : __outw(port, data))

static __inline void
__outwc(int port, u_int16_t data)
{
	__asm volatile("outw %0,%w1" : : "a" (data), "id" (port));
}

static __inline void
__outw(int port, u_int16_t data)
{
	__asm volatile("outw %0,%w1" : : "a" (data), "d" (port));
}

static __inline void
outsw(int port, const void *addr, int cnt)
{
	__asm volatile("repne\n\toutsw"
	    : "+S" (addr), "+c" (cnt) : "d" (port) : "cc");
}

#define	outl(port, data) \
	(__use_immediate_port(port) ? __outlc(port, data) : __outl(port, data))

static __inline void
__outlc(int port, u_int32_t data)
{
	__asm volatile("outl %0,%w1" : : "a" (data), "id" (port));
}

static __inline void
__outl(int port, u_int32_t data)
{
	__asm volatile("outl %0,%w1" : : "a" (data), "d" (port));
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm volatile("repne\n\toutsl"
	    : "+S" (addr), "+c" (cnt) : "d" (port) : "cc");
}

#endif /* _MACHINE_PIO_H_ */
@


1.11
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.10 2011/03/23 16:54:35 pirofti Exp $	*/
d79 1
a79 1
	__asm volatile("cld\n\trepne\n\tinsb"
d105 1
a105 1
	__asm volatile("cld\n\trepne\n\tinsw"
d131 1
a131 1
	__asm volatile("cld\n\trepne\n\tinsl"
d153 1
a153 1
	__asm volatile("cld\n\trepne\n\toutsb"
d175 1
a175 1
	__asm volatile("cld\n\trepne\n\toutsw"
d197 1
a197 1
	__asm volatile("cld\n\trepne\n\toutsl"
@


1.10
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.9 2001/06/27 04:34:23 mickey Exp $	*/
d64 1
a64 1
	__asm __volatile("inb %w1,%0" : "=a" (data) : "id" (port));
d72 1
a72 1
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
d79 1
a79 1
	__asm __volatile("cld\n\trepne\n\tinsb"
d90 1
a90 1
	__asm __volatile("inw %w1,%0" : "=a" (data) : "id" (port));
d98 1
a98 1
	__asm __volatile("inw %w1,%0" : "=a" (data) : "d" (port));
d105 1
a105 1
	__asm __volatile("cld\n\trepne\n\tinsw"
d116 1
a116 1
	__asm __volatile("inl %w1,%0" : "=a" (data) : "id" (port));
d124 1
a124 1
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
d131 1
a131 1
	__asm __volatile("cld\n\trepne\n\tinsl"
d141 1
a141 1
	__asm __volatile("outb %0,%w1" : : "a" (data), "id" (port));
d147 1
a147 1
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
d153 1
a153 1
	__asm __volatile("cld\n\trepne\n\toutsb"
d163 1
a163 1
	__asm __volatile("outw %0,%w1" : : "a" (data), "id" (port));
d169 1
a169 1
	__asm __volatile("outw %0,%w1" : : "a" (data), "d" (port));
d175 1
a175 1
	__asm __volatile("cld\n\trepne\n\toutsw"
d185 1
a185 1
	__asm __volatile("outl %0,%w1" : : "a" (data), "id" (port));
d191 1
a191 1
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
d197 1
a197 1
	__asm __volatile("cld\n\trepne\n\toutsl"
@


1.9
log
@use + not = and 0-9
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.8 2000/07/26 17:46:04 mickey Exp $	*/
d33 2
a34 2
#ifndef _I386_PIO_H_
#define _I386_PIO_H_
d201 1
a201 1
#endif /* _I386_PIO_H_ */
@


1.8
log
@correct constraints for __{in,out}c(); from Hiroki Nakano <cas@@trans-nt.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.7 1999/03/09 15:39:08 mickey Exp $	*/
d79 2
a80 4
	__asm __volatile("cld\n\trepne\n\tinsb"			:
			 "=D" (addr), "=c" (cnt)		:
			 "d" (port), "0" (addr), "1" (cnt)	:
			 "memory", "cc");
d105 2
a106 4
	__asm __volatile("cld\n\trepne\n\tinsw"			:
			 "=D" (addr), "=c" (cnt)		:
			 "d" (port), "0" (addr), "1" (cnt)	:
			 "memory", "cc");
d131 2
a132 4
	__asm __volatile("cld\n\trepne\n\tinsl"			:
			 "=D" (addr), "=c" (cnt)		:
			 "d" (port), "0" (addr), "1" (cnt)	:
			 "memory", "cc");
d153 2
a154 4
	__asm __volatile("cld\n\trepne\n\toutsb"		:
			 "=S" (addr), "=c" (cnt)		:
			 "d" (port), "0" (addr), "1" (cnt)	:
			 "cc");
d175 2
a176 4
	__asm __volatile("cld\n\trepne\n\toutsw"		:
			 "=S" (addr), "=c" (cnt)		:
			 "d" (port), "0" (addr), "1" (cnt)	:
			 "cc");
d197 2
a198 4
	__asm __volatile("cld\n\trepne\n\toutsl"		:
			 "=S" (addr), "=c" (cnt)		:
			 "d" (port), "0" (addr), "1" (cnt)	:
			 "cc");
@


1.7
log
@add more 'cc' usage, actually overestimating gcc's smartness; also fix currently unused bus macros. kids tested mother approved
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.6 1999/01/31 14:56:01 espie Exp $	*/
d64 1
a64 1
	__asm __volatile("inb %1,%0" : "=a" (data) : "id" (port));
d92 1
a92 1
	__asm __volatile("inw %1,%0" : "=a" (data) : "id" (port));
d120 1
a120 1
	__asm __volatile("inl %1,%0" : "=a" (data) : "id" (port));
d147 1
a147 1
	__asm __volatile("outb %0,%1" : : "a" (data), "id" (port));
d171 1
a171 1
	__asm __volatile("outw %0,%1" : : "a" (data), "id" (port));
d195 1
a195 1
	__asm __volatile("outl %0,%1" : : "a" (data), "id" (port));
@


1.7.6.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.8 2000/07/26 17:46:04 mickey Exp $	*/
d64 1
a64 1
	__asm __volatile("inb %w1,%0" : "=a" (data) : "id" (port));
d92 1
a92 1
	__asm __volatile("inw %w1,%0" : "=a" (data) : "id" (port));
d120 1
a120 1
	__asm __volatile("inl %w1,%0" : "=a" (data) : "id" (port));
d147 1
a147 1
	__asm __volatile("outb %0,%w1" : : "a" (data), "id" (port));
d171 1
a171 1
	__asm __volatile("outw %0,%w1" : : "a" (data), "id" (port));
d195 1
a195 1
	__asm __volatile("outl %0,%w1" : : "a" (data), "id" (port));
@


1.7.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.7.6.1 2001/04/18 16:07:37 niklas Exp $	*/
d79 4
a82 2
	__asm __volatile("cld\n\trepne\n\tinsb"
	    : "+D" (addr), "+c" (cnt) : "d" (port) : "memory", "cc");
d107 4
a110 2
	__asm __volatile("cld\n\trepne\n\tinsw"
	    : "+D" (addr), "+c" (cnt) : "d" (port) : "memory", "cc");
d135 4
a138 2
	__asm __volatile("cld\n\trepne\n\tinsl"
	    : "+D" (addr), "+c" (cnt) : "d" (port) : "memory", "cc");
d159 4
a162 2
	__asm __volatile("cld\n\trepne\n\toutsb"
	    : "+S" (addr), "+c" (cnt) : "d" (port) : "cc");
d183 4
a186 2
	__asm __volatile("cld\n\trepne\n\toutsw"
	    : "+S" (addr), "+c" (cnt) : "d" (port) : "cc");
d207 4
a210 2
	__asm __volatile("cld\n\trepne\n\toutsl"
	    : "+S" (addr), "+c" (cnt) : "d" (port) : "cc");
@


1.6
log
@Fix clobbers so that GENERIC may compile with egcs.

Historically, the documentation of extended asm was lacking, namely you
should NOT specify the same register as an input, and a clobber.
If the register is clobbered, it should be specified as an output as well,
e.g., by linking input and output through the "number" notation.

(Beware of lvalues, some local variables needed...)

In older versions, up-to egcs1.1.1, the compiler did not even warn about
it, but it was liable to output bad code. Newer egcs are pickier and
simply refuse to swallow such code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.5 1997/11/10 23:40:45 niklas Exp $	*/
d82 1
a82 1
			 "memory");
d110 1
a110 1
			 "memory");
d138 1
a138 1
			 "memory");
d161 2
a162 1
			 "d" (port), "0" (addr), "1" (cnt));
d185 2
a186 1
			 "d" (port), "0" (addr), "1" (cnt));
d209 2
a210 1
			 "d" (port), "0" (addr), "1" (cnt));
@


1.5
log
@Use vfs lite2 lockmanager.  Add advisory locking.  some KNF.
some extra pathconf ops supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.4 1996/04/18 19:21:40 niklas Exp $	*/
d80 3
a82 3
								:
			 "d" (port), "D" (addr), "c" (cnt)	:
			 "%edi", "%ecx", "memory");
d108 3
a110 3
								:
			 "d" (port), "D" (addr), "c" (cnt)	:
			 "%edi", "%ecx", "memory");
d136 3
a138 3
								:
			 "d" (port), "D" (addr), "c" (cnt)	:
			 "%edi", "%ecx", "memory");
d160 2
a161 3
								:
			 "d" (port), "S" (addr), "c" (cnt)	:
			 "%esi", "%ecx");
d183 2
a184 3
								:
			 "d" (port), "S" (addr), "c" (cnt)	:
			 "%esi", "%ecx");
d206 2
a207 3
								:
			 "d" (port), "S" (addr), "c" (cnt)	:
			 "%esi", "%ecx");
@


1.4
log
@Merge of NetBSD 960317
@
text
@d1 1
a1 1
/*	$OpenBSD: pio.h,v 1.3 1996/04/17 05:19:03 mickey Exp $	*/
d157 1
a157 1
outsb(int port, void *addr, int cnt)
d181 1
a181 1
outsw(int port, void *addr, int cnt)
d205 1
a205 1
outsl(int port, void *addr, int cnt)
@


1.3
log
@Cleanups & fixes from latest NetBSD primarily to run doscmd, etc.
GENERIC added to the compile/.cvsignore (it is used for 'make links'
for example), thus conf/GENERIC should appear magically ...
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@from netbsd:
Use explicit integer sizes.  Adjust constraints for GCC 2.7.2.
parts by niklas
@
text
@d1 2
a2 1
/*	$NetBSD: pio.h,v 1.12 1995/12/20 07:53:09 mycroft Exp $	*/
d33 3
d212 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: pio.h,v 1.11 1995/04/22 03:59:59 mycroft Exp $	*/
d56 1
a56 1
static __inline u_char
d59 2
a60 2
	u_char	data;
	__asm __volatile("inb %1,%0" : "=a" (data) : "i" (port));
d64 1
a64 1
static __inline u_char
d67 2
a68 2
	u_char	data;
	__asm __volatile("inb %%dx,%0" : "=a" (data) : "d" (port));
d84 1
a84 1
static __inline u_short
d87 2
a88 2
	u_short	data;
	__asm __volatile("inw %1,%0" : "=a" (data) : "i" (port));
d92 1
a92 1
static __inline u_short
d95 2
a96 2
	u_short	data;
	__asm __volatile("inw %%dx,%0" : "=a" (data) : "d" (port));
d112 1
a112 1
static __inline u_int
d115 2
a116 2
	u_int	data;
	__asm __volatile("inl %1,%0" : "=a" (data) : "i" (port));
d120 1
a120 1
static __inline u_int
d123 2
a124 2
	u_int	data;
	__asm __volatile("inl %%dx,%0" : "=a" (data) : "d" (port));
d141 1
a141 1
__outbc(int port, u_char data)
d143 1
a143 1
	__asm __volatile("outb %0,%1" : : "a" (data), "i" (port));
d147 1
a147 1
__outb(int port, u_char data)
d149 1
a149 1
	__asm __volatile("outb %0,%%dx" : : "a" (data), "d" (port));
d165 1
a165 1
__outwc(int port, u_short data)
d167 1
a167 1
	__asm __volatile("outw %0,%1" : : "a" (data), "i" (port));
d171 1
a171 1
__outw(int port, u_short data)
d173 1
a173 1
	__asm __volatile("outw %0,%%dx" : : "a" (data), "d" (port));
d189 1
a189 1
__outlc(int port, u_int data)
d191 1
a191 1
	__asm __volatile("outl %0,%1" : : "a" (data), "i" (port));
d195 1
a195 1
__outl(int port, u_int data)
d197 1
a197 1
	__asm __volatile("outl %0,%%dx" : : "a" (data), "d" (port));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
