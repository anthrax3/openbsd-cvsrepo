head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.12
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.14
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.10
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.14
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.10
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.6
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.10
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.8
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.6
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.12.0.4
	UBC_BASE:1.12
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.11.0.10
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.8
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.6
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.4
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.07.12.16.25.08;	author guenther;	state Exp;
branches;
next	1.17;
commitid	r9gXh8PA6rI3P7q2;

1.17
date	2011.03.12.04.03.04;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.11.15.17.08;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.29.18.18.20;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.20.31.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.27.04.12.45;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	99.05.10.16.02.08;	author espie;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	97.11.10.10.55.29;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.11.10.10.22.22;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.11.09.23.51.29;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.11.09.23.05.06;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.04.04.03.05.31;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.11.25.14.44.26;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.25.13.11.24;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.07.16.47.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.07.22.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.35;	author deraadt;	state Exp;
branches;
next	;

1.11.4.1
date	2001.07.04.10.16.47;	author niklas;	state Exp;
branches;
next	1.11.4.2;

1.11.4.2
date	2003.06.07.11.11.37;	author ho;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Tackle the endian.h mess.  Make it so that:
 * you can #include <sys/endian.h> instead of <machine/endian.h>,
   and ditto <endian.h>  (fixes code that pulls in <sys/endian.h> first)

 * those will always export the symbols that POSIX specified for
   <endian.h>, including the new {be,le}{16,32,64}toh() set.  c.f.
	http://austingroupbugs.net/view.php?id=162

   if __BSD_VISIBLE then you also get the symbols that our <machine/endian.h>
   currently exports (ntohs, NTOHS, dlg's bemtoh*, etc)

 * when doing POSIX compiles (not __BSD_VISIBLE), then <netinet/in.h> and
   <arpa/inet.h> will *stop* exporting the extra symbols like BYTE_ORDER
   and betoh*

ok deraadt@@
@
text
@/*	$OpenBSD: endian.h,v 1.17 2011/03/12 04:03:04 guenther Exp $	*/

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_ENDIAN_H_
#define _MACHINE_ENDIAN_H_

#ifdef __GNUC__

#define	__swap32md(x) __statement({					\
	__uint32_t __swap32md_x = (x);					\
									\
	__asm ("bswap %0" : "+r" (__swap32md_x));			\
	__swap32md_x;							\
})

#define	__swap64md(x) __statement({					\
	__uint64_t __swap64md_x = (x);					\
									\
	(__uint64_t)__swap32md(__swap64md_x >> 32) |			\
	    (__uint64_t)__swap32md(__swap64md_x & 0xffffffff) << 32;	\
})
#define	__swap16md(x) __statement({					\
	__uint16_t __swap16md_x = (x);					\
									\
	__asm ("rorw $8, %w0" : "+r" (__swap16md_x));			\
	__swap16md_x;							\
})

/* Tell sys/endian.h we have MD variants of the swap macros.  */
#define __HAVE_MD_SWAP

#endif	/* __GNUC__ */

#define _BYTE_ORDER _LITTLE_ENDIAN

#ifndef __FROM_SYS__ENDIAN
#include <sys/endian.h>
#endif

#endif /* _MACHINE_ENDIAN_H_ */
@


1.17
log
@Add missing __statement modifiers in various endian.h files and correct
%1 to %0 in the i386 asm.

asm correction ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.16 2011/03/11 15:17:08 pirofti Exp $	*/
d33 1
a33 1
	u_int32_t __swap32md_x = (x);					\
d40 1
a40 1
	u_int64_t __swap64md_x = (x);					\
d42 2
a43 2
	(u_int64_t)__swap32md(__swap64md_x >> 32) |			\
	    (u_int64_t)__swap32md(__swap64md_x & 0xffffffff) << 32;	\
d46 1
a46 1
	u_int16_t __swap16md_x = (x);					\
d53 1
a53 1
#define MD_SWAP
d58 2
d61 1
@


1.16
log
@Use _MACHINE_ENDIAN_H_ for this is The Right Thing To Do.

Okay guenther@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.15 2007/05/29 18:18:20 tom Exp $	*/
d32 1
a32 1
#define	__swap32md(x) ({						\
d35 1
a35 1
	__asm ("bswap %1" : "+r" (__swap32md_x));			\
d39 1
a39 1
#define	__swap64md(x) ({						\
d45 1
a45 1
#define	__swap16md(x) ({						\
d48 1
a48 1
	__asm ("rorw $8, %w1" : "+r" (__swap16md_x));			\
@


1.15
log
@Remove support for 80386 processors.  Apologies if you have one of
the rare 80386-bases system with enough memory, a 387 FPU, a useable
disk subsystem, and the patience to wait for it to unpack the
distribution .tgz files.

approval from art@@ and many others (esp. nick@@); ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.14 2005/12/13 00:35:23 millert Exp $	*/
d27 2
a28 2
#ifndef _I386_ENDIAN_H_
#define _I386_ENDIAN_H_
d60 1
a60 1
#endif /* _I386_ENDIAN_H_ */
@


1.14
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.13 2003/06/03 20:31:07 deraadt Exp $	*/
a31 1
#if defined(_KERNEL) && !defined(I386_CPU)
a37 9
#else
#define	__swap32md(x) ({						\
	u_int32_t __swap32md_x = (x);					\
									\
	__asm ("rorw $8, %w1; rorl $16, %1; rorw $8, %w1" :		\
	    "+r" (__swap32md_x));					\
	__swap32md_x;							\
})
#endif	/* _KERNEL && !I386_CPU */
@


1.13
log
@remove some term 3 & 4 for niklas
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.12 2001/06/27 04:12:45 mickey Exp $	*/
d67 1
a67 1
#define BYTE_ORDER LITTLE_ENDIAN
@


1.12
log
@implement 64 bit swap and fix constraints on others
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 1999/05/10 16:02:08 espie Exp $	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.11
log
@Use symbolic define for BYTE_ORDER.

(don't forget that cpp is `lazy':
#define A B
#define B value
#if A == value

works, since A isn't extended before it's needed, by which time B is known)
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 1997/11/10 10:55:29 niklas Exp $	*/
d41 1
a41 1
	__asm ("bswap %1" : "=r" (__swap32md_x) : "0" (__swap32md_x));	\
d49 1
a49 1
	    "=r" (__swap32md_x) : "0" (__swap32md_x));			\
d54 6
d63 1
a63 2
	__asm ("rorw $8, %w1" : "=r" (__swap16md_x) :			\
	    "0" (__swap16md_x));					\
@


1.11.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 1999/05/10 16:02:08 espie Exp $	*/
d41 1
a41 1
	__asm ("bswap %1" : "+r" (__swap32md_x));			\
d49 1
a49 1
	    "+r" (__swap32md_x));					\
a53 6
#define	__swap64md(x) ({						\
	u_int64_t __swap64md_x = (x);					\
									\
	(u_int64_t)__swap32md(__swap64md_x >> 32) |			\
	    (u_int64_t)__swap32md(__swap64md_x & 0xffffffff) << 32;	\
})
d57 2
a58 1
	__asm ("rorw $8, %w1" : "+r" (__swap16md_x));			\
@


1.11.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11.4.1 2001/07/04 10:16:47 niklas Exp $	*/
d14 5
@


1.10
log
@DOH! I stress out too much
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.8 1997/11/09 23:51:29 niklas Exp $	*/
d67 1
a67 1
#define BYTE_ORDER 1234
@


1.9
log
@Be careful with names of local vars in macros
@
text
@d59 1
a59 1
	__x;								\
@


1.8
log
@Whoops a conflict crept in
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.8 1997/06/25 12:52:09 grr Exp $	*/
d39 1
a39 1
	u_int32_t __x = (x);						\
d41 2
a42 2
	__asm ("bswap %1" : "=r" (__x) : "0" (__x));			\
	__x;								\
d46 1
a46 1
	u_int32_t __x = (x);						\
d49 2
a50 2
	    "=r" (__x) : "0" (__x));					\
	__x;								\
d55 1
a55 1
	u_int16_t __x = (x);						\
d57 2
a58 1
	__asm ("rorw $8, %w1" : "=r" (__x) : "0" (__x));		\
@


1.7
log
@New endian.h design.  All architectures now use a common file for the bulk
part.  Some ports can optimize the swap operations.  This also means the
general API is extended with swap16, swap32, htobe16, htobe32, betoh16,
betoh32, htole16, htole32, letoh16 and letoh32.
@
text
@@


1.6
log
@Define in_addr_t and in_port_t everywhere but use u_intXX_t for
htonl and friends.
@
text
@d1 1
a1 2
/*	$OpenBSD: endian.h,v 1.5 1996/11/25 14:44:26 niklas Exp $	*/
/*	$NetBSD: endian.h,v 1.16 1995/06/01 17:19:18 mycroft Exp $	*/
d3 2
a4 4
/*
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1987, 1991 Regents of the University of California.
 * All rights reserved.
d16 3
a18 5
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d20 10
a29 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)endian.h	7.8 (Berkeley) 4/3/91
d33 1
a33 32
#define	_I386_ENDIAN_H_

/*
 * Define the order of 32-bit words in 64-bit words.
 */
#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0


#ifndef _POSIX_SOURCE
/*
 * Definitions for byte order, according to byte significance from low
 * address to high.
 */
#define	LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
#define	BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in int32_t */

#define	BYTE_ORDER	LITTLE_ENDIAN

#include <sys/cdefs.h>

typedef u_int32_t in_addr_t;
typedef u_int16_t in_port_t;

__BEGIN_DECLS
u_int32_t	htonl __P((u_int32_t));
u_int16_t	htons __P((u_int16_t));
u_int32_t	ntohl __P((u_int32_t));
u_int16_t	ntohs __P((u_int16_t));
__END_DECLS

d38 6
a43 6
#define	__byte_swap_int32_variable(x) \
({ register u_int32_t __x = (x); \
   __asm ("bswap %1" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })
d45 18
a62 43
#define	__byte_swap_int32_variable(x) \
({ register u_int32_t __x = (x); \
   __asm ("rorw $8, %w1\n\trorl $16, %1\n\trorw $8, %w1" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })
#endif	/* _KERNEL && ... */

#define	__byte_swap_int16_variable(x) \
({ register u_int16_t __x = (x); \
   __asm ("rorw $8, %w1" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })

#ifdef __OPTIMIZE__

#define	__byte_swap_int32_constant(x) \
	((((x) & 0xff000000) >> 24) | \
	 (((x) & 0x00ff0000) >>  8) | \
	 (((x) & 0x0000ff00) <<  8) | \
	 (((x) & 0x000000ff) << 24))
#define	__byte_swap_int16_constant(x) \
	((((x) & 0xff00) >> 8) | \
	 (((x) & 0x00ff) << 8))
#define	__byte_swap_int32(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int32_constant(x) : __byte_swap_int32_variable(x))
#define	__byte_swap_int16(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int16_constant(x) : __byte_swap_int16_variable(x))

#else /* __OPTIMIZE__ */

#define	__byte_swap_int32(x)	__byte_swap_int32_variable(x)
#define	__byte_swap_int16(x)	__byte_swap_int16_variable(x)

#endif /* __OPTIMIZE__ */

#define	ntohl(x)	__byte_swap_int32(x)
#define	ntohs(x)	__byte_swap_int16(x)
#define	htonl(x)	__byte_swap_int32(x)
#define	htons(x)	__byte_swap_int16(x)
d66 2
d69 1
a69 11
/*
 * Macros for network/external number representation conversion.
 */
#define	NTOHL(x)	(x) = ntohl((u_int32_t)(x))
#define	NTOHS(x)	(x) = ntohs((u_int16_t)(x))
#define	HTONL(x)	(x) = htonl((u_int32_t)(x))
#define	HTONS(x)	(x) = htons((u_int16_t)(x))

#endif /* _POSIX_SOURCE */

#endif /* !_I386_ENDIAN_H_ */
@


1.5
log
@Oops
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.4 1996/11/25 13:11:24 niklas Exp $	*/
d62 3
@


1.4
log
@htons et al. works on explicit 16- and 32-bit quantities and not the
machine dependent "short" and "long" integer.  Correct and enhance manpage.
Change all short and longs to u_int16_t and u_int32_t, respectively.
OpenBSD RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.16 1995/06/01 17:19:18 mycroft Exp $	*/
d75 1
a75 1
({ register u_int32 __x = (x); \
@


1.3
log
@you cannot use u_intXX_t everywhere
@
text
@d1 1
d57 1
a57 1
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */
d64 4
a67 4
unsigned long   htonl __P((unsigned long));
unsigned short  htons __P((unsigned short));
unsigned long   ntohl __P((unsigned long));
unsigned short  ntohs __P((unsigned short));
d74 2
a75 2
#define	__byte_swap_long_variable(x) \
({ register unsigned long __x = (x); \
d81 2
a82 2
#define	__byte_swap_long_variable(x) \
({ register unsigned long __x = (x); \
d89 2
a90 2
#define	__byte_swap_word_variable(x) \
({ register unsigned short __x = (x); \
d98 1
a98 1
#define	__byte_swap_long_constant(x) \
d103 1
a103 1
#define	__byte_swap_word_constant(x) \
d106 1
a106 1
#define	__byte_swap_long(x) \
d108 2
a109 2
	 __byte_swap_long_constant(x) : __byte_swap_long_variable(x))
#define	__byte_swap_word(x) \
d111 1
a111 1
	 __byte_swap_word_constant(x) : __byte_swap_word_variable(x))
d115 2
a116 2
#define	__byte_swap_long(x)	__byte_swap_long_variable(x)
#define	__byte_swap_word(x)	__byte_swap_word_variable(x)
d120 4
a123 4
#define	ntohl(x)	__byte_swap_long(x)
#define	ntohs(x)	__byte_swap_word(x)
#define	htonl(x)	__byte_swap_long(x)
#define	htons(x)	__byte_swap_word(x)
d131 4
a134 4
#define	NTOHL(x)	(x) = ntohl((unsigned long)(x))
#define	NTOHS(x)	(x) = ntohs((unsigned short)(x))
#define	HTONL(x)	(x) = htonl((unsigned long)(x))
#define	HTONS(x)	(x) = htons((unsigned short)(x))
@


1.2
log
@sync with 0504; prototype changes
@
text
@d1 1
a1 1
/*	$NetBSD: endian.h,v 1.17 1996/05/03 19:25:23 christos Exp $	*/
d63 4
a66 4
u_int32_t   htonl __P((u_int32_t));
u_int16_t  htons __P((u_int16_t));
u_int32_t   ntohl __P((u_int32_t));
u_int16_t  ntohs __P((u_int16_t));
d74 1
a74 1
({ register u_int32_t __x = (x); \
d81 1
a81 1
({ register u_int32_t __x = (x); \
d89 1
a89 1
({ register u_int16_t __x = (x); \
d130 4
a133 4
#define	NTOHL(x)	(x) = ntohl((u_int32_t)(x))
#define	NTOHS(x)	(x) = ntohs((u_int16_t)(x))
#define	HTONL(x)	(x) = htonl((u_int32_t)(x))
#define	HTONS(x)	(x) = htons((u_int16_t)(x))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: endian.h,v 1.16 1995/06/01 17:19:18 mycroft Exp $	*/
d63 4
a66 4
unsigned long   htonl __P((unsigned long));
unsigned short  htons __P((unsigned short));
unsigned long   ntohl __P((unsigned long));
unsigned short  ntohs __P((unsigned short));
d74 1
a74 1
({ register unsigned long __x = (x); \
d81 1
a81 1
({ register unsigned long __x = (x); \
d89 1
a89 1
({ register unsigned short __x = (x); \
d130 4
a133 4
#define	NTOHL(x)	(x) = ntohl((unsigned long)(x))
#define	NTOHS(x)	(x) = ntohs((unsigned short)(x))
#define	HTONL(x)	(x) = htonl((unsigned long)(x))
#define	HTONS(x)	(x) = htons((unsigned short)(x))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
