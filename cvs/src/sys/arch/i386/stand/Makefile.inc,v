head	1.49;
access;
symbols
	OPENBSD_6_0:1.48.0.2
	OPENBSD_6_0_BASE:1.48
	OPENBSD_5_9:1.47.0.2
	OPENBSD_5_9_BASE:1.47
	OPENBSD_5_8:1.45.0.10
	OPENBSD_5_8_BASE:1.45
	OPENBSD_5_7:1.45.0.2
	OPENBSD_5_7_BASE:1.45
	OPENBSD_5_6:1.45.0.6
	OPENBSD_5_6_BASE:1.45
	OPENBSD_5_5:1.45.0.4
	OPENBSD_5_5_BASE:1.45
	OPENBSD_5_4:1.44.0.4
	OPENBSD_5_4_BASE:1.44
	OPENBSD_5_3:1.44.0.2
	OPENBSD_5_3_BASE:1.44
	OPENBSD_5_2:1.40.0.20
	OPENBSD_5_2_BASE:1.40
	OPENBSD_5_1_BASE:1.40
	OPENBSD_5_1:1.40.0.18
	OPENBSD_5_0:1.40.0.16
	OPENBSD_5_0_BASE:1.40
	OPENBSD_4_9:1.40.0.14
	OPENBSD_4_9_BASE:1.40
	OPENBSD_4_8:1.40.0.12
	OPENBSD_4_8_BASE:1.40
	OPENBSD_4_7:1.40.0.8
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.40.0.10
	OPENBSD_4_6_BASE:1.40
	OPENBSD_4_5:1.40.0.6
	OPENBSD_4_5_BASE:1.40
	OPENBSD_4_4:1.40.0.4
	OPENBSD_4_4_BASE:1.40
	OPENBSD_4_3:1.40.0.2
	OPENBSD_4_3_BASE:1.40
	OPENBSD_4_2:1.38.0.8
	OPENBSD_4_2_BASE:1.38
	OPENBSD_4_1:1.38.0.6
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.38.0.4
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.38.0.2
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.37.0.2
	OPENBSD_3_8_BASE:1.37
	OPENBSD_3_7:1.36.0.4
	OPENBSD_3_7_BASE:1.36
	OPENBSD_3_6:1.36.0.2
	OPENBSD_3_6_BASE:1.36
	SMP_SYNC_A:1.34
	SMP_SYNC_B:1.34
	OPENBSD_3_5:1.34.0.4
	OPENBSD_3_5_BASE:1.34
	OPENBSD_3_4:1.34.0.2
	OPENBSD_3_4_BASE:1.34
	UBC_SYNC_A:1.31
	OPENBSD_3_3:1.30.0.2
	OPENBSD_3_3_BASE:1.30
	OPENBSD_3_2:1.29.0.12
	OPENBSD_3_2_BASE:1.29
	OPENBSD_3_1:1.29.0.10
	OPENBSD_3_1_BASE:1.29
	UBC_SYNC_B:1.29
	UBC:1.29.0.8
	UBC_BASE:1.29
	OPENBSD_3_0:1.29.0.6
	OPENBSD_3_0_BASE:1.29
	OPENBSD_2_9:1.29.0.4
	OPENBSD_2_9_BASE:1.29
	OPENBSD_2_8:1.29.0.2
	OPENBSD_2_8_BASE:1.29
	OPENBSD_2_7:1.27.0.4
	OPENBSD_2_7_BASE:1.27
	SMP:1.27.0.2
	SMP_BASE:1.27
	kame_19991208:1.26
	OPENBSD_2_6:1.26.0.2
	OPENBSD_2_6_BASE:1.26
	OPENBSD_2_5:1.24.0.4
	OPENBSD_2_5_BASE:1.24
	OPENBSD_2_4:1.24.0.2
	OPENBSD_2_4_BASE:1.24
	OPENBSD_2_3:1.20.0.2
	OPENBSD_2_3_BASE:1.20
	OPENBSD_2_2:1.17.0.2
	OPENBSD_2_2_BASE:1.17
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	libsa:1.1.2.1;
locks; strict;
comment	@# @;


1.49
date	2016.11.06.16.04.20;	author tb;	state Exp;
branches;
next	1.48;
commitid	tupV2UpHQlnB6RWH;

1.48
date	2016.07.04.18.01.44;	author guenther;	state Exp;
branches;
next	1.47;
commitid	MDAws5Y7do6cFWlq;

1.47
date	2015.10.08.22.41.12;	author yasuoka;	state Exp;
branches;
next	1.46;
commitid	oKdWxNwZd3kC7x25;

1.46
date	2015.09.18.13.30.56;	author miod;	state Exp;
branches;
next	1.45;
commitid	1BEcCDYd9p5DIl0g;

1.45
date	2013.12.28.02.51.07;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2013.01.18.04.10.16;	author jsing;	state Exp;
branches;
next	1.43;

1.43
date	2012.10.30.11.08.27;	author jsing;	state Exp;
branches;
next	1.42;

1.42
date	2012.08.29.22.23.07;	author pascal;	state Exp;
branches;
next	1.41;

1.41
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.40;

1.40
date	2007.11.26.10.26.02;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2007.11.26.10.01.42;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2005.12.30.02.03.49;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	2005.07.30.14.32.46;	author millert;	state Exp;
branches;
next	1.36;

1.36
date	2004.07.24.17.39.27;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2004.07.13.21.03.38;	author marc;	state Exp;
branches;
next	1.34;

1.34
date	2003.08.08.07.37.15;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2003.07.19.00.03.52;	author david;	state Exp;
branches;
next	1.32;

1.32
date	2003.07.05.17.02.55;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2003.04.17.03.43.13;	author drahn;	state Exp;
branches;
next	1.30;

1.30
date	2002.12.02.09.00.23;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2000.10.09.20.25.10;	author mickey;	state Exp;
branches
	1.29.8.1;
next	1.28;

1.28
date	2000.06.08.23.32.50;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2000.02.08.17.48.53;	author mickey;	state Exp;
branches
	1.27.2.1;
next	1.26;

1.26
date	99.08.25.00.54.18;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	99.08.12.19.27.15;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	98.06.11.02.32.00;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	98.05.28.20.52.33;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	98.05.25.19.20.45;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	98.04.20.13.25.00;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	98.04.18.07.39.32;	author deraadt;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	98.03.18.03.09.51;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	98.03.11.13.33.27;	author graichen;	state Exp;
branches;
next	1.17;

1.17
date	97.10.25.19.46.55;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	97.10.12.21.14.22;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	97.09.21.04.28.00;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	97.08.13.04.03.27;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	97.07.28.22.03.26;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	97.07.25.18.27.25;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	97.07.17.23.04.45;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.06.30.21.11.18;	author kstailey;	state Exp;
branches;
next	1.9;

1.9
date	97.06.03.08.03.08;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	97.04.18.03.17.29;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.04.18.01.28.00;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.04.11.19.07.07;	author weingart;	state Exp;
branches;
next	1.5;

1.5
date	97.04.05.18.56.14;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.04.04.04.47.44;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.03.31.23.06.03;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.11.59;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.10.16.08.51.14;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.16.08.51.14;	author mickey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.10.29.13.40.28;	author mickey;	state dead;
branches;
next	;

1.20.2.1
date	98.04.20.13.25.32;	author deraadt;	state Exp;
branches;
next	;

1.27.2.1
date	2001.04.18.16.08.38;	author niklas;	state Exp;
branches;
next	1.27.2.2;

1.27.2.2
date	2001.07.14.10.02.45;	author ho;	state Exp;
branches;
next	1.27.2.3;

1.27.2.3
date	2003.03.27.23.26.56;	author niklas;	state Exp;
branches;
next	1.27.2.4;

1.27.2.4
date	2003.05.13.19.42.09;	author ho;	state Exp;
branches;
next	1.27.2.5;

1.27.2.5
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	1.27.2.6;

1.27.2.6
date	2004.06.08.21.14.50;	author drahn;	state Exp;
branches;
next	;

1.29.8.1
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.49
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile.inc,v 1.48 2016/07/04 18:01:44 guenther Exp $

CFLAGS=${DEBUG} ${COPTS} -Os -Wall -Werror
CFLAGS+=	-fno-stack-protector -DMDRANDOM
CPPFLAGS+=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR}
SACFLAGS=-D_STANDALONE
DEBUGFLAGS=
# DEBUGFLAGS+=-DDEBUG
# DEBUGFLAGS+=-DGIDT_DEBUG
# DEBUGFLAGS+=-DBIOS_DEBUG
# DEBUGFLAGS+=-DEXEC_DEBUG
# DEBUGFLAGS+=-DALLOC_TRACE
# DEBUGFLAGS+=-DUNIX_DEBUG
# DEBUGFLAGS+=-DBOOTP_DEBUG -DNETIF_DEBUG -DETHER_DEBUG
# DEBUGFLAGS+=-DNFS_DEBUG -DRPC_DEBUG -DRARP_DEBUG
LINKADDR=0x40120
LOADADDR=0x40000
HEAP_LIMIT=0xA0000
BOOTREL=0x60000
BOOTMAGIC=0xc001d00d
#ROM_SIZE=32768
CLEANFILES+=	assym.h machine

SACFLAGS+=-nostdinc -fno-builtin -fpack-struct

.if !make(clean) && !make(cleandir) && !make(includes) && !make(libdep) && \
    !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ X$(S) = X -o -h machine ] || ln -s $(S)/arch/i386/include machine)

assym.h: ${S}/kern/genassym.sh ${SADIR}/etc/genassym.cf
	sh ${S}/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${SADIR}/etc/genassym.cf > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
.endif

# NO_NET=no_net
BINDIR=	/usr/mdec

MANSUBDIR=i386
@


1.48
log
@DEBUGLIBS has been broken since the gcc4 switch, so delete it.  CFLAGS
contains -g by default anyway

problem noted by Edgar Pettijohn (edgar (at) pettijohn-web.com)
ok millert@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.47 2015/10/08 22:41:12 yasuoka Exp $
d26 2
a27 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
@


1.47
log
@After replacement alloca() with alloc(), out-of-heap happened when booting
on a large block size (32K) partition.  Increase the HEAP_LIMIT from
0x90000 to 0xA0000.

try this, deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.46 2015/09/18 13:30:56 miod Exp $
a6 1
DEBUGLIBS=no
@


1.46
log
@Remove support for building the boot blocks with DEBUGFLAGS=-D_TEST, which is
supposed to create a userland binary in order to test non-boot related
functionality. This feature has been bitrotting in a non-compiling state
for years, and causes a too-many-ifdefs disease now that there are intrusive
EFI changes.

No functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.45 2013/12/28 02:51:07 deraadt Exp $
d19 1
a19 1
HEAP_LIMIT=0x90000
@


1.45
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.44 2013/01/18 04:10:16 jsing Exp $
a13 1
# DEBUGFLAGS+=-g -D_TEST
a24 1
.if empty(DEBUGFLAGS:M-D_TEST)
a25 1
.endif
@


1.44
log
@Generate assym.h where we need it, instead of reaching around into other
object directories.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.43 2012/10/30 11:08:27 jsing Exp $
d4 1
a4 1
CFLAGS+=	-fno-stack-protector
@


1.43
log
@Remove the now unused i386 libsa/libz Makefiles.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.41 2012/08/21 14:46:18 pascal Exp $
d24 1
a24 1
CLEANFILES+=	machine
a32 1
.endif
d34 4
a37 4
.if exists(${SADIR}/etc/assym.h)
CPPFLAGS+=-I${SADIR}/etc
.else
CPPFLAGS+=-I${SADIR}/etc/${__objdir}
@


1.42
log
@Kill all NOPIE and NOPIE_FLAGS in i386/stand, replacing them with -fno-pie
and -nopie directly.  Binaries from a PIE system are identical to those from
a recent snapshot.

ok deraadt@@
@
text
@a34 1

a38 10
.endif
.if exists(${SADIR}/libsa/libsa.a)
LIBSA=${SADIR}/libsa/libsa.a
.else
LIBSA=${SADIR}/libsa/${__objdir}/libsa.a
.endif
.if exists(${SADIR}/libz/libz.a)
LIBZ=${SADIR}/libz/libz.a
.else
LIBZ=${SADIR}/libz/${__objdir}/libz.a
@


1.41
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.40 2007/11/26 10:26:02 deraadt Exp $
a4 1
CFLAGS+=	${NOPIE_FLAGS}
@


1.40
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.39 2007/11/26 10:01:42 deraadt Exp $
d5 1
@


1.39
log
@More LIBKERN bits that go away
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.38 2005/12/30 02:03:49 millert Exp $
d30 1
a30 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.38
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.37 2005/07/30 14:32:46 millert Exp $
a44 5
.endif
.if exists(${SADIR}/libkern/libkern.a)
LIBKERN=${SADIR}/libkern/libkern.a
.else
LIBKERN=${SADIR}/libkern/${__objdir}/libkern.a
@


1.37
log
@Add libkern and link it in after libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.36 2004/07/24 17:39:27 millert Exp $
d5 1
a5 1
CPPFLAGS+=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR} -Derrno=errno
@


1.36
log
@Use '=' not '==' with test.  While ksh accepts '==' as a synomym for '=',
it is not valid in sh.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.35 2004/07/13 21:03:38 marc Exp $
d45 5
@


1.35
log
@errno changes, lib major version bumps, and general flag day
To build you must:
cd /usr/src && make obj && make includes
cd lib/libc && make depend && make && NOMAN=1 sudo make install
cd /usr/src && make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.34 2003/08/08 07:37:15 deraadt Exp $
d32 1
a32 1
	@@([ X$(S) == X -o -h machine ] || ln -s $(S)/arch/i386/include machine)
@


1.34
log
@put COPTS in CFLAGS; idea from miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.33 2003/07/19 00:03:52 david Exp $
d5 1
a5 1
CPPFLAGS+=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR}
@


1.33
log
@don't specify the leading "/" in MANSUBDIR (otherwise "//" occurs)
ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.32 2003/07/05 17:02:55 deraadt Exp $
d3 1
a3 1
CFLAGS=${DEBUG} -Os -Wall -Werror
@


1.32
log
@do not make bad machine@@ links
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.31 2003/04/17 03:43:13 drahn Exp $
d55 1
a55 1
MANSUBDIR=/i386
@


1.31
log
@i386 ELF bootloader. developed with weingart@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.30 2002/12/02 09:00:23 miod Exp $
d32 1
a32 1
	@@([ -h machine ] || ln -s $(S)/arch/i386/include machine)
@


1.30
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.29 2000/10/09 20:25:10 mickey Exp $
d18 1
a18 1
LINKADDR=0x40000
@


1.29
log
@do not build debug libs (if enabled in mk.conf)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.28 2000/06/08 23:32:50 deraadt Exp $
d4 1
@


1.29.8.1
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
a3 1
CFLAGS+=	-fno-stack-protector
d17 1
a17 1
LINKADDR=0x40120
@


1.28
log
@bad mickey
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27 2000/02/08 17:48:53 mickey Exp $
d6 1
@


1.27
log
@evil typo; from Rusty Hunt <alaric@@exoinc.com>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.26 1999/08/25 00:54:18 mickey Exp $
d52 2
@


1.27.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.29 2000/10/09 20:25:10 mickey Exp $
a5 1
DEBUGLIBS=no
a51 2

MANSUBDIR=/i386
@


1.27.2.2
log
@Initial import of some SMP code from NetBSD.
Not really working here yet, but there is some work in progress.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27.2.1 2001/04/18 16:08:38 niklas Exp $
d8 3
a10 3
DEBUGFLAGS+=-DDEBUG
DEBUGFLAGS+=-DGIDT_DEBUG
DEBUGFLAGS+=-DBIOS_DEBUG
@


1.27.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
a3 1
CFLAGS+=	-fno-stack-protector
@


1.27.2.4
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27.2.3 2003/03/27 23:26:56 niklas Exp $
d18 1
a18 1
LINKADDR=0x40120
@


1.27.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
d3 1
a3 1
CFLAGS=${DEBUG} ${COPTS} -Os -Wall -Werror
d32 1
a32 1
	@@([ X$(S) == X -o -h machine ] || ln -s $(S)/arch/i386/include machine)
d55 1
a55 1
MANSUBDIR=i386
@


1.27.2.6
log
@fold out -smp branch changes from i386/stand. use the -current stat bits.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27.2.5 2004/02/19 10:48:42 niklas Exp $
d9 3
a11 3
# DEBUGFLAGS+=-DDEBUG
# DEBUGFLAGS+=-DGIDT_DEBUG
# DEBUGFLAGS+=-DBIOS_DEBUG
@


1.26
log
@give better support to the bios memory maps.
provide memory maps editing through the machine memory command.
rearrange probing in machdep, so it provides less output,
also giving a shot for apm to fix the memory maps.
changes to kernel are minimal, only that is required due
to the api version bits addition and such cosmetic changes.
tested on all critical kernel,boot combinations; niklas@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.25 1999/08/12 19:27:15 millert Exp $
d20 1
a20 1
BOOTMAGIC=0xc00ld00d
@


1.25
log
@Use -Os, not -O2
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.24 1998/06/11 02:32:00 mickey Exp $
d12 1
a12 1
# DEBUGFLAGS+=-D_TEST
d16 3
a18 3
LINKADDR=0x10000
LOADADDR=0x10000
HEAP_LIMIT=0x60000
d20 1
a20 1
BOOTMAGIC=0xdeadbeef
@


1.24
log
@nice DEBUGFLAGS handling
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.23 1998/05/28 20:52:33 mickey Exp $
d3 1
a3 1
CFLAGS=${DEBUG} -O2 -Wall -Werror
@


1.23
log
@cleanup the Makefiles a bit.
make machine link in a smart way, remove unused bits.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 1998/05/25 19:20:45 mickey Exp $
d6 3
a8 3
# CPPFLAGS+=-DSAVE_MEMORY
DEBUGFLAGS=-DDEBUG
DEBUGFLAGS+=-DGIDT_DEBUG
d24 1
a24 1
.if defined(DEBUGFLAGS) && empty(DEBUGFLAGS:M-D_TEST)
@


1.22
log
@put support for test /boot environment back; some CLEANFILES and spaces
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 1998/04/20 13:25:00 deraadt Exp $
d7 2
a8 2
# DEBUGFLAGS=-DDEBUG
# DEBUGFLAGS+=-DGIDT_DEBUG
d22 1
d27 6
@


1.21
log
@no need for debug options by default, now that the bug is dead
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.20 1998/04/18 07:39:32 deraadt Exp $
d5 1
a5 2
SACFLAGS=-nostdinc -fno-builtin -fpack-struct
SACFLAGS+=-D_STANDALONE
d22 4
@


1.20
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.19 1998/03/18 03:09:51 mickey Exp $
d8 3
a10 3
DEBUGFLAGS=-DDEBUG
DEBUGFLAGS+=-DGIDT_DEBUG
DEBUGFLAGS+=-DBIOS_DEBUG
@


1.20.2.1
log
@update release: no need for debug options by default, now that the bug is dead
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 1998/04/20 13:25:00 deraadt Exp $
d8 3
a10 3
# DEBUGFLAGS=-DDEBUG
# DEBUGFLAGS+=-DGIDT_DEBUG
# DEBUGFLAGS+=-DBIOS_DEBUG
@


1.19
log
@${DEBUG} var propagation
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.18 1998/03/11 13:33:27 graichen Exp $
d8 3
a10 3
# DEBUGFLAGS=-DDEBUG
# DEBUGFLAGS+=-DGIDT_DEBUG
# DEBUGFLAGS+=-DBIOS_DEBUG
@


1.18
log
@change CPPFLAGS= to CPPFLAGS+= - so that the definition of -DSERIAL
in mbr/Makefile will not be overridden (seems like nobody is using
a serial console)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 1997/10/25 19:46:55 mickey Exp $
d3 1
a3 1
CFLAGS=-O2 -Wall -Werror
@


1.17
log
@alloca needs frame pointer i guess
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 1997/10/12 21:14:22 mickey Exp $
d4 1
a4 1
CPPFLAGS=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR}
@


1.16
log
@BOOT_APM bye, bye
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 1997/09/21 04:28:00 mickey Exp $
d5 1
a5 1
SACFLAGS=-nostdinc -fpack-struct -fno-builtin -fomit-frame-pointer
@


1.15
log
@support new boots
add to your config:
bios0 at mainbus0
apm0 at mainbus0	# (if you are using APM)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 1997/08/13 04:03:27 mickey Exp $
a6 1
SACFLAGS+=-DBOOT_APM
@


1.14
log
@split off START into LINKADDR and LOADADDR (we will need reloctable boot)
BOOTREL as a linear address, not segment one
more heap (;
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 1997/07/28 22:03:26 mickey Exp $
d7 1
a7 1
# SACFLAGS+=-DBOOT_APM
@


1.13
log
@generate assym.h
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 1997/07/25 18:27:25 mickey Exp $
d3 1
a3 1
CFLAGS=-O -Wall -Werror
d7 1
d9 1
a9 1
# DEBUGFLAGS+=-DDEBUG
d18 4
a21 3
START=0x10000
HEAP_LIMIT=0x50000
BOOTREL=0x3000
d23 1
@


1.12
log
@no need for -Imachine now
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 1997/07/17 23:04:45 mickey Exp $
d22 5
@


1.11
log
@don't count on luser includes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 1997/06/30 21:11:18 kstailey Exp $
d4 1
a4 1
CPPFLAGS=-I${S} -I${SADIR}/libsa -Imachine -I. -I${.CURDIR}
@


1.10
log
@remove obj@@ dependency again
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 1997/06/03 08:03:08 maja Exp $
d3 4
a6 4
#CPPFLAGS+=-nostdinc -I/sys
CPPFLAGS+=-Wall -Werror -I. -Imachine
SACFLAGS+=-Wa,-R -fpack-struct -fno-builtin -fomit-frame-pointer
CPPFLAGS+=-D_STANDALONE
d8 9
a16 9
# CPPFLAGS+=-DDEBUG
# CPPFLAGS+=-DGIDT_DEBUG
# CPPFLAGS+=-DBIOS_DEBUG
# CPPFLAGS+=-DEXEC_DEBUG
# CPPFLAGS+=-DALLOC_TRACE
# CPPFLAFS+=-D_TEST
# CPPFLAFS+=-DUNIX_DEBUG
# CPPFLAFS+=-DBOOTP_DEBUG -DNETIF_DEBUG -DETHER_DEBUG
# CPPFLAGS+=-DNFS_DEBUG -DRPC_DEBUG -DRARP_DEBUG
a34 1

@


1.9
log
@Handle obj dirs the correct way. PR#172 -moj
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 1997/04/18 03:17:29 mickey Exp $
d22 3
a24 1
.if exists(${SADIR}/libsa/${__objdir})
d26 3
a29 3
LIBSA=${SADIR}/libsa/libsa.a
.endif
.if exists(${SADIR}/libz/${__objdir})
a30 2
.else
LIBZ=${SADIR}/libz/libz.a
@


1.8
log
@use libs from correct paths
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 1997/04/18 01:28:00 mickey Exp $
d22 2
a23 2
.if exists(${SADIR}/libsa/obj)
LIBSA=${SADIR}/libsa/obj/libsa.a
d27 2
a28 2
.if exists(${SADIR}/libz/obj)
LIBZ=${SADIR}/libz/obj/libz.a
@


1.7
log
@no more 60k limit!
no more explicit real<-->prot switching!
fix 2.88 floppy drives.....
kbd fixes coming soon!
test it!
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 1997/04/11 19:07:07 weingart Exp $
d22 11
d35 1
@


1.6
log
@Works with .gz kernels now
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 1997/04/05 18:56:14 mickey Exp $
d5 1
a5 1
SACFLAGS+=-Wa,-R -fno-common -fpack-struct -fno-builtin -fomit-frame-pointer
d7 1
a7 1
# CPPFLAGS+=-DSAVE_MEMORY	/* XXX - Does *NOT* work */
d9 1
d17 2
a18 3
START=0x1000
HEAP_START=0x10000
HEAP_LIMIT=0x40000
d22 1
a22 1
NO_NET=no_net
@


1.5
log
@put gdt & idt in the separate file.
print trapno in dump_regs.
no more NO_IDTR.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 1997/04/04 04:47:44 mickey Exp $
d7 2
a8 2
CPPFLAGS+=-DSAVE_MEMORY
CPPFLAGS+=-DDEBUG
@


1.4
log
@dump regs w/ NMI (int 2)
more debugging is on the way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1997/03/31 23:06:03 mickey Exp $
a6 1
# CPPFLAGS+=-DNO_IDTR
@


1.3
log
@commit all my mods to the last imported libsa stuff....
including:
- disklabel support;
- better boot cmd line
- smaller size (using some compilation switches ;)
- no more relocations in /boot, it's loaded in the place;
- better disk performance (maybe were already in there)
- installboot -n does not require write perms for device
- more debugs
- missing parts in libsa (such as cd9660 and so)
- i don't like 2 files for exec_i386 (sorry, toby, let's discuss maybe?)
tricks and tails:
- joined .text and .data (saves you a page)
- prot mode switching still in biosboot (it's freezed for awhile)
- biosdisk internals changed
- biosdev is not passed propery to the kernel (i'll fix it soon)
- sure i missed smth here to note (use the source, Luke!)
@
text
@d1 1
a1 1
#	$OpenBSD$
d7 1
a7 1
CPPFLAGS+=-DNO_IDTR
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@d1 1
d3 6
a8 1
CPPFLAGS+=-D_STANDALONE -DSAVE_MEMORY
d10 12
a21 6
# -DALLOC_TRACE
# -D_TEST
# -DUNIX_DEBUG
# -DBOOTP_DEBUG -DNETIF_DEBUG -DETHER_DEBUG
# -DNFS_DEBUG -DRPC_DEBUG -DRARP_DEBUG
REL=0x1000
a23 1
SA_ZLIB=sa_zlib
a24 1

@


1.1
log
@file Makefile.inc was initially added on branch new.
@
text
@d1 14
@


1.1.2.1
log
@make a ral stand
@
text
@a0 4
#	$OpenBSD$

SRCS+=	real_prot.S machdep.S

@


1.1.2.2
log
@moved to libsa
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1.2.1 1996/10/16 08:51:14 mickey Exp $
@

