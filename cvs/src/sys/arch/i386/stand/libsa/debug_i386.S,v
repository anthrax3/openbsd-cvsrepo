head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.54
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.52
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.48
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.50
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.42
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.46
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.44
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.40
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.38
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.36
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.34
	OPENBSD_5_0:1.12.0.32
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.30
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.28
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.24
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.26
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.22
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.20
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.18
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.16
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.14
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.12
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.10
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.9.0.26
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.24
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.22
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.9.0.20
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.18
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.10
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.8
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.6
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4;
locks; strict;
comment	@# @;


1.12
date	2004.03.09.19.12.12;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.20.22.11;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.17.03.43.18;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	98.04.18.07.39.46;	author deraadt;	state Exp;
branches
	1.9.10.1
	1.9.20.1;
next	1.8;

1.8
date	98.02.24.22.06.48;	author weingart;	state Exp;
branches;
next	1.7;

1.7
date	97.09.18.18.38.00;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.09.02.17.03.25;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.07.18.00.34.42;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.04.09.08.39.32;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.04.05.18.56.25;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.04.04.47.47;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.01.04.52.46;	author mickey;	state Exp;
branches;
next	;

1.9.10.1
date	2003.05.13.19.42.09;	author ho;	state Exp;
branches;
next	1.9.10.2;

1.9.10.2
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.9.10.3;

1.9.10.3
date	2004.06.05.23.09.01;	author niklas;	state Exp;
branches;
next	;

1.9.20.1
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Spacing and KNF.  Partly from Joris Vink <nimadeus at pandora dot be>.

ok henning@@, deraadt@@
@
text
@/*	$OpenBSD: debug_i386.S,v 1.11 2003/06/03 20:22:11 mickey Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <machine/asm.h>
#include <machine/psl.h>
#define _LOCORE
#include <machine/segments.h>
#include <machine/trap.h>
#include <debug_md.h>
#undef _LOCORE

	/* do this way because some cpus (like cyrix 6x86) store garbage
	 * into high word, instead of zeroes.
	 */
#define	pushsr(sr)	movl sr, %eax; pushl %eax

	.text
	.globl	alltraps

alltraps:
	pushal
	pushsr(%ds)
	pushsr(%es)
	pushsr(%fs)
	pushsr(%gs)
		/* muck %cs, see note about pushsr() above */
	movl	0xf*4(%esp), %eax
	movzwl	%ax, %eax
	movl	%eax, 0xf*4(%esp)
#ifdef DEBUG_DEBUG
	movl	$0xb8280, %edi
	movl	0x0c*4(%esp), %eax	/* trapno */
	addb	$'0', %al
	movb	$0x17, %ah
	shll	$16, %eax
	movb	0x0d*4(%esp), %al	/* error */
	addb	$'0', %al
	movb	$0x17, %ah
	movl	%eax, (%edi)
#endif
	call	_C_LABEL(check_regs)
#ifdef DEBUG_DEBUG
	movl	$0xb8290, %edi
	movl	$0x47394738, (%edi)
#endif
	popl	%gs
	popl	%fs
	popl	%es
	popl	%ds
	popal
	addl	$0x8, %esp
	hlt
	iret

ENTRY(check_regs)
#ifdef DEBUG_DEBUG
	movl	$0xb8284, %edi
	movl	$0x47334732, (%edi)
#endif
	movl	$0x10, %eax
	mov	%ax, %ds
	mov	%ax, %es
	movl	$reg, %edi
	cld
	movl	0x0c*4(%esp), %eax; stosl /* %eax	*/
	movl	0x0b*4(%esp), %eax; stosl /* %ecx	*/
	movl	0x0a*4(%esp), %eax; stosl /* %edx	*/
	movl	0x09*4(%esp), %eax; stosl /* %ebx	*/
	movl	0x08*4(%esp), %eax; stosl /* %esp	*/
	movl	0x07*4(%esp), %eax; stosl /* %ebp	*/
	movl	0x06*4(%esp), %eax; stosl /* %esi	*/
	movl	0x05*4(%esp), %eax; stosl /* %edi	*/
	movl	0x0f*4(%esp), %eax; stosl /* %eip	*/
	movl	0x11*4(%esp), %eax; stosl /* %eflags	*/
	movl	0x10*4(%esp), %eax; stosl /* %cs	*/
	mov		%ss,  %ax ; stosl /* %ss	*/
	movl	0x04*4(%esp), %eax; stosl /* %ds	*/
	movl	0x03*4(%esp), %eax; stosl /* %es	*/
	movl	0x02*4(%esp), %eax; stosl /* %fs	*/
	movl	0x01*4(%esp), %eax; stosl /* %gs	*/

#ifdef DEBUG_DEBUG
	movl	$0xb8288, %edi
	movl	$0x47354734, (%edi)
#endif
	movl	0x0e*4(%esp), %ecx	/* error */
	movl	0x0d*4(%esp), %eax	/* trapno */
	pushl	%ecx
	pushl	%eax
	call	_C_LABEL(dump_regs)
	popl	%eax
	popl	%eax

#ifdef DEBUG_DEBUG
	movl	$0xb828c, %edi
	movl	$0x47374736, (%edi)
#endif
	ret
@


1.11
log
@three four kills
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.10 2003/04/17 03:43:18 drahn Exp $	*/
a124 2


@


1.10
log
@i386 ELF bootloader. developed with weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.9 1998/04/18 07:39:46 deraadt Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.8 1998/02/24 22:06:48 weingart Exp $	*/
d92 3
a94 3
	movl	%ax, %ds
	movl	%ax, %es
	movl	$_reg, %edi
d107 1
a107 1
	movl		%ss,  %ax ; stosl /* %ss	*/
@


1.9.20.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 3
a94 3
	mov	%ax, %ds
	mov	%ax, %es
	movl	$reg, %edi
d107 1
a107 1
	mov		%ss,  %ax ; stosl /* %ss	*/
@


1.9.10.1
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.9 1998/04/18 07:39:46 deraadt Exp $	*/
d92 3
a94 3
	mov	%ax, %ds
	mov	%ax, %es
	movl	$reg, %edi
d107 1
a107 1
	mov		%ss,  %ax ; stosl /* %ss	*/
@


1.9.10.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.9.10.1 2003/05/13 19:42:09 ho Exp $	*/
d15 5
@


1.9.10.3
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d125 2
@


1.8
log
@Changes/updates to /boot stuff.  More to come.
Fixes many divide by zero and pointer bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.7 1997/09/18 18:38:00 mickey Exp $	*/
d43 5
d53 9
a61 5
	pushl	%ds
	pushl	%es
	pushl	%fs
	pushl	%gs
#ifdef DEBUG
d63 1
a63 1
	movl	0x0c*4(%esp), %eax	# trapno
d67 2
a68 2
	movb	0x0d*4(%esp), %al	# error
	addl	$'0', %al
d70 1
a70 2
	movl	%ax, (%edi)
	hlt
d72 2
a73 3
	call	_check_regs
1:
#ifdef DEBUG
d87 1
a87 1
#ifdef DEBUG
d93 1
d96 16
a111 16
	movl	0x0c*4(%esp), %eax; stosl # %eax
	movl	0x0b*4(%esp), %eax; stosl # %ecx
	movl	0x0a*4(%esp), %eax; stosl # %edx
	movl	0x09*4(%esp), %eax; stosl # %ebx
	movl	0x08*4(%esp), %eax; stosl # %esp
	movl	0x07*4(%esp), %eax; stosl # %ebp
	movl	0x06*4(%esp), %eax; stosl # %esi
	movl	0x05*4(%esp), %eax; stosl # %edi
	movl	0x0f*4(%esp), %eax; stosl # %eip
	movl	0x11*4(%esp), %eax; stosl # %eflags
	movl	0x10*4(%esp), %eax; stosl # %cs
	movl		%ss,  %eax; stosl # %ss
	movl	0x04*4(%esp), %eax; stosl # %ds
	movl	0x03*4(%esp), %eax; stosl # %es
	movl	0x02*4(%esp), %eax; stosl # %fs
	movl	0x01*4(%esp), %eax; stosl # %gs
d113 1
a113 1
#ifdef DEBUG
d117 3
a119 1
	movl	0x0d*4(%esp), %eax	# trapno
d123 1
d125 1
a125 1
#ifdef DEBUG
@


1.7
log
@halt in debug mode only
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.6 1997/09/02 17:03:25 mickey Exp $	*/
d55 1
a55 1
	addb	$'@@', %al
d59 1
a59 1
	addl	$' ', %al
d76 1
d102 2
a103 2
	movl	0x02*4(%esp), %eax; stosl # %ds
	movl	0x01*4(%esp), %eax; stosl # %es
@


1.6
log
@tabs vs spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.5 1997/07/18 00:34:42 mickey Exp $	*/
d62 1
a63 1
	hlt
@


1.5
log
@save %fs %gs
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.4 1997/04/09 08:39:32 mickey Exp $	*/
d52 1
a52 1
#ifdef	DEBUG
d66 1
a66 1
#ifdef	DEBUG
d79 1
a79 1
#ifdef	DEBUG
d104 1
a104 1
#ifdef	DEBUG
d113 1
a113 1
#ifdef	DEBUG
@


1.4
log
@emulate bios calls. more debugging stuff. some fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.3 1997/04/05 18:56:25 mickey Exp $	*/
d43 1
a43 1
	.data
d50 2
d54 8
a61 4
	movl	0x0a*4(%esp), %eax	# trapno
	addb	$'0', %al
	movb	$0x47, %ah
	movl	%eax, (%edi)
d63 1
d70 2
a77 2
	.text

d87 11
a97 11
	movl	0x0a*4(%esp), %eax; stosl # %eax
	movl	0x09*4(%esp), %eax; stosl # %ecx
	movl	0x08*4(%esp), %eax; stosl # %edx
	movl	0x07*4(%esp), %eax; stosl # %ebx
	movl	0x06*4(%esp), %eax; stosl # %esp
	movl	0x05*4(%esp), %eax; stosl # %ebp
	movl	0x04*4(%esp), %eax; stosl # %esi
	movl	0x03*4(%esp), %eax; stosl # %edi
	movl	0x0d*4(%esp), %eax; stosl # %eip
	movl	0x0f*4(%esp), %eax; stosl # %eflags
	movl	0x0e*4(%esp), %eax; stosl # %cs
d99 2
a102 2
	movl		%fs,  %eax; stosl # %fs
	movl		%gs,  %eax; stosl # %gs
d108 1
a108 1
	movl	0x0b*4(%esp), %eax	# trapno
@


1.3
log
@put gdt & idt in the separate file.
print trapno in dump_regs.
no more NO_IDTR.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.2 1997/04/04 04:47:47 mickey Exp $	*/
d52 4
a55 1
	movl	$0x47314730, (%edi)
d80 11
a90 11
	movl	0x0a(%esp,4), %eax; stosl # %eax
	movl	0x09(%esp,4), %eax; stosl # %ecx
	movl	0x08(%esp,4), %eax; stosl # %edx
	movl	0x07(%esp,4), %eax; stosl # %ebx
	movl	0x06(%esp,4), %eax; stosl # %esp
	movl	0x05(%esp,4), %eax; stosl # %ebp
	movl	0x04(%esp,4), %eax; stosl # %esi
	movl	0x03(%esp,4), %eax; stosl # %edi
	movl	0x0d(%esp,4), %eax; stosl # %eip
	movl	0x0f(%esp,4), %eax; stosl # %eflags
	movl	0x0e(%esp,4), %eax; stosl # %cs
d92 2
a93 2
	movl	0x02(%esp,4), %eax; stosl # %ds
	movl	0x01(%esp,4), %eax; stosl # %es
d101 1
a101 1
	movl	0x0b(%esp,4), %eax	# trapno
@


1.2
log
@dump regs w/ NMI (int 2)
more debugging is on the way
@
text
@d1 1
a1 1
/*	$OpenBSD: debug_i386.S,v 1.1 1997/04/01 04:52:46 mickey Exp $	*/
d44 1
a44 89
#ifndef NO_IDTR

	.globl	_Idtr_real
	.align 3
_Idtr_real:
	.word	1023
	.long	0

	.globl	_Idtr_prot

	.align 3
idt:	/*
	 * We beleive that all the boot code fits into
	 * 64k, so no need for high 16 bit of procedure address (;
	 *
	 */
#define IPROC(n)	X/**/n
#define IDTENTRY(proc) \
	.word	IPROC(proc)		/* lo offset handler */ ; \
	.word	0x8			/* handler %cs */ ; \
	.byte	0			/* reserved */ ; \
	.byte	0x80 | SDT_SYS386TGT /* present, dpl=0, 32bit trap gate */ ; \
	.word	0			/* hi offset handler */

	IDTENTRY(de)	/* #DE divide by zero */
	IDTENTRY(db)	/* #DB debug */
	IDTENTRY(nmi)	/* NMI */
	IDTENTRY(bp)	/* #BP breakpoint */
	IDTENTRY(of)	/* #OF overflow */
	IDTENTRY(br)	/* #BR BOUND range exceeded */
	IDTENTRY(ud)	/* #UD invalid opcode */
	IDTENTRY(nm)	/* #NM device not available */
	IDTENTRY(df)	/* #DF double fault */
	IDTENTRY(fo)	/* #FO coprocessor segment overrun */
	IDTENTRY(ts)	/* #TS innvalid TSS */
	IDTENTRY(np)	/* #NP segmant not present */
	IDTENTRY(ss)	/* #SS stack fault */
	IDTENTRY(gp)	/* #GP general protection */
	IDTENTRY(pf)	/* #PF page fault */
	IDTENTRY(xx)	/*	Intel reserved */
	IDTENTRY(mf)	/* #MF floating point error */
	IDTENTRY(ac)	/* #AC alignment check */
	IDTENTRY(mc)	/* #MC machine check */
			/*	Intel reserved (19-31) */
	IDTENTRY(xx); IDTENTRY(xx); IDTENTRY(xx); IDTENTRY(xx)
	IDTENTRY(xx); IDTENTRY(xx); IDTENTRY(xx); IDTENTRY(xx)
	IDTENTRY(xx); IDTENTRY(xx); IDTENTRY(xx); IDTENTRY(xx)
	IDTENTRY(xx)
			/*	Maskable interrupts(32-255) */

_Idtr_prot:
	.word	. - idt
	.long	idt

	.text

#define IENTRY(name,type) \
IPROC(name): \
	pushl	$type ; \
	jmp	alltraps
#define IENTRY_ERR(name,err,type) \
IPROC(name): \
	pushl	$err ; \
	pushl	$type ; \
	jmp	alltraps

IPROC(xx):
	pushl	$1
	pushl	$256
	jmp	alltraps

IENTRY_ERR(de,0,T_DIVIDE)
IENTRY_ERR(db,0,T_TRCTRAP)
IENTRY_ERR(nmi,0,T_NMI)
IENTRY_ERR(bp,0,T_BPTFLT)
IENTRY_ERR(of,0,T_OFLOW)
IENTRY_ERR(br,0,T_BOUND)
IENTRY_ERR(ud,0,T_PRIVINFLT)
IENTRY_ERR(nm,0,T_DNA)
IENTRY(df,T_DOUBLEFLT)
IENTRY_ERR(fo,0,T_FPOPFLT)
IENTRY(ts,T_TSSFLT)
IENTRY(np,T_SEGNPFLT)
IENTRY(ss,T_STKFLT)
IENTRY(gp,T_PROTFLT)
IENTRY(pf,T_PAGEFLT)
IENTRY_ERR(mf,0,T_ARITHTRAP)
IENTRY(ac,T_ALIGNFLT)
IENTRY(mc,T_MACHK)
d47 3
d52 1
a52 1
	movl	$0x47304731, (%edi)
d54 1
a54 4
	/* lcall is busted */
	pushl	$0x8
	pushl	$1f
	ljmp	$0x8, $_check_regs
a55 1
	addl	$0x8, %esp
d58 1
a58 1
	movl	$0x47384739, (%edi)
d60 4
a65 2
#endif

d71 1
a71 1
	movl	$0x47324733, (%edi)
a72 5
	pushal		# 8 ones
	pushl	%ds
	pushl	%es
	pushl	%fs
	pushl	%gs
d77 11
a87 11
	movl	0x0b*4(%esp), %eax; stosl # %eax
	movl	0x0a*4(%esp), %eax; stosl # %ecx
	movl	0x09*4(%esp), %eax; stosl # %edx
	movl	0x08*4(%esp), %eax; stosl # %ebx
	movl	0x07*4(%esp), %eax; stosl # %esp
	movl	0x06*4(%esp), %eax; stosl # %ebp
	movl	0x05*4(%esp), %eax; stosl # %esi
	movl	0x04*4(%esp), %eax; stosl # %edi
	movl	0x10*4(%esp), %eax; stosl # %eip
	movl	0x12*4(%esp), %eax; stosl # %eflags
	movl	0x11*4(%esp), %eax; stosl # %cs
d89 4
a92 4
	movl	0x03*4(%esp), %eax; stosl # %ds
	movl	0x02*4(%esp), %eax; stosl # %es
	movl	0x01*4(%esp), %eax; stosl # %fs
	movl	0x00*4(%esp), %eax; stosl # %gs
d96 1
a96 1
	movl	$0x47344735, (%edi)
d98 2
d101 1
d105 1
a105 1
	movl	$0x47364737, (%edi)
d107 1
a107 6
	popl	%gs
	popl	%fs
	popl	%es
	popl	%ds
	popal
	lret
@


1.1
log
@debugger started.
only one entry for now:
chek_regs (use DUMP_REGS macro instead)
	dumps registers. must be called by lcall or so (to push %cs)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
d45 2
a47 1
	.globl	_Idtr_real
d49 1
a49 1
	.word	1024
d52 2
d55 38
a92 3
	.globl	_Idtr_prot
idt:
	.long	0, 0
d97 54
d156 4
a164 1
	pushfl
d169 21
a189 17
	movl	0xc*4(%esp), %eax; stosl # %eax
	movl	0xb*4(%esp), %eax; stosl # %ecx
	movl	0xa*4(%esp), %eax; stosl # %edx
	movl	0x9*4(%esp), %eax; stosl # %ebx
	movl	0x8*4(%esp), %eax; stosl # %esp
	movl	0x7*4(%esp), %eax; stosl # %ebp
	movl	0x6*4(%esp), %eax; stosl # %esi
	movl	0x5*4(%esp), %eax; stosl # %edi
	movl	0xd*4(%esp), %eax; stosl # %eip
	movl	0x0*4(%esp), %eax; stosl # %eflags
	movl	0xe*4(%esp), %eax; stosl # %cs
	movl		%ss, %eax; stosl # %ss
	movl	0x4*4(%esp), %eax; stosl # %ds
	movl	0x3*4(%esp), %eax; stosl # %es
	movl	0x2*4(%esp), %eax; stosl # %fs
	movl	0x1*4(%esp), %eax; stosl # %gs

d192 4
a195 1
	popfl
a201 1

@

