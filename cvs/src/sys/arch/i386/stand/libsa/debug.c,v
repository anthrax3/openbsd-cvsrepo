head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.28
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.24
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.20
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.22
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.14
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.13.0.28
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.24
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.26
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.22
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.20
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.18
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.16
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.14
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.12
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.7.0.18
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.16
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.14
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.12
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.8
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2010.12.06.22.51.46;	author jasper;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.06.22.11.01;	author jasper;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.06.18.44.49;	author jasper;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.09.19.12.12;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.10.00.41.44;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.20.22.11;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.03.15.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.34;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.06.09.13.45.07;	author mickey;	state Exp;
branches
	1.7.8.1
	1.7.18.1;
next	1.6;

1.6
date	98.04.18.22.24.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.04.18.07.39.44;	author deraadt;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	97.07.17.22.50.01;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.04.09.08.39.29;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.05.18.56.24;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.01.04.52.45;	author mickey;	state Exp;
branches;
next	;

1.5.2.1
date	98.04.18.22.25.04;	author deraadt;	state Exp;
branches;
next	;

1.7.8.1
date	2002.03.28.10.31.05;	author niklas;	state Exp;
branches;
next	1.7.8.2;

1.7.8.2
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.7.8.3;

1.7.8.3
date	2004.02.19.10.48.43;	author niklas;	state Exp;
branches;
next	1.7.8.4;

1.7.8.4
date	2004.06.05.23.09.01;	author niklas;	state Exp;
branches;
next	;

1.7.18.1
date	2002.06.11.03.35.55;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@- properly remove NENTS now after fixing the fallout.

ok deraadt@@
@
text
@/*	$OpenBSD: debug.c,v 1.15 2010/12/06 22:11:01 jasper Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <lib/libsa/stand.h>
#include <debug.h>
#include <dev/cons.h>

#define	VBASE	(0xb8000)

char *const reg_names[] = { REG_NAMES };
const int nreg = nitems(reg_names);
struct reg reg;
u_int32_t *const reg_values[] = { REG_VALUES(reg) };
char *const trap_names[] = { TRAP_NAMES };

void d_putc(dev_t, int);

#ifdef DEBUG_DEBUG
#define	CKPT(c)	(*(u_short volatile *)(VBASE+160) = (0x1700 | (c)))
#else
#define	CKPT(c)	/* c */
#endif

void
debug_init(void)
{
}


void
dump_regs(u_int trapno, u_int arg)
{
	register int i;
	/* make it local, so it won't rely on .data/.bss corruption */
	struct consdev d_cons, *save_cons;

	/* init cons mod */
	save_cons = cn_tab;
	bzero(&d_cons, sizeof(d_cons));
	d_cons.cn_putc = &d_putc;
	cn_tab = &d_cons;

	/* Trap info */
	printf("\ftrap: %u(%x): %s\ncn_tab=%p\n",
	    trapno, arg, trap_names[trapno], save_cons);

	/* Register dump */
	for (i = 1; i <= nreg; i++)
		printf("%s\t%x%c", reg_names[i-1], *reg_values[i-1],
		    ((i%4)? ' ': '\n'));

	dump_mem("Code dump", (void *)*reg_values[8], 8);
	/* %ebx (void *)((*reg_values[3] + 15) & ~0x0F) */
	dump_mem("Memory dump", (void *)0x1a000, 48);
	dump_mem("Stack trace", (void *)(*reg_values[4]), 48);

	/* restore the console */
	cn_tab = save_cons;
}

void
dump_mem(char *l, void *p, size_t n)
{
	register int i;

	printf("%s [%p]:%s", l, p, (n > 6? "\n":" "));
	for (i = 1; i <= n; i++)
		printf("%x%c", *(u_int32_t *)p++, ((i%8)? ' ': '\n'));
	if (n % 8)
		printf("\n");
}


u_int d_pos;

void
d_putc(dev_t d, int c)
{
	switch (c) {
	case '\n':	d_pos += 80;					break;
	case '\r':	d_pos -= d_pos % 80;				break;
	case '\b':	d_pos--;					break;
	case '\f':	bzero((void *)VBASE, 80*25*2); d_pos = 0;	break;
		/* print it */
	default:
		((u_int16_t volatile *)VBASE)[d_pos++] = 0x0700 | (u_char)c;
		break;
	}
}
@


1.15
log
@- partially revert previous NENTS removal for arches which got busted.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.14 2010/12/06 18:44:49 jasper Exp $	*/
d30 1
d38 1
a38 1
const int nreg = NENTS(reg_names);
@


1.14
log
@- drop NENTS(), which was yet another copy of nitems().
no binary change


ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.13 2004/03/09 19:12:12 tom Exp $	*/
d37 1
a37 1
const int nreg = nitems(reg_names);
@


1.13
log
@Spacing and KNF.  Partly from Joris Vink <nimadeus at pandora dot be>.

ok henning@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.12 2004/02/10 00:41:44 tom Exp $	*/
d37 1
a37 1
const int nreg = NENTS(reg_names);
@


1.12
log
@Make debug_init void debug_init(void), like nearly all of the other
functions that machdep() calls.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.10 2003/06/03 20:22:11 mickey Exp $	*/
d16 2
a17 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d74 1
a74 1
	for(i = 1; i <= nreg; i++)
d91 1
d93 1
a93 1
	for(i = 1; i <= n; i++)
d96 1
a96 1
		printf ("\n");
@


1.11
log
@ansification and knf and protos
@
text
@d50 1
a50 1
int
a52 1
	return 0;
@


1.10
log
@three four kills
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.9 2002/03/14 03:15:54 millert Exp $	*/
d51 1
a51 1
debug_init()
d58 1
a58 2
dump_regs(trapno, arg)
	u_int trapno, arg;
d72 1
a72 1
		trapno, arg, trap_names[trapno], save_cons);
d77 1
a77 1
			((i%4)? ' ': '\n'));
d89 1
a89 4
dump_mem(l, p, n)
	char *l;
	void *p;
	size_t n;
d103 1
a103 3
d_putc(d, c)
	dev_t d;
	int c;
@


1.9
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.8 2002/03/14 01:26:34 millert Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.7 1998/06/09 13:45:07 mickey Exp $	*/
d86 1
a86 1
	/* %ebx (void*)((*reg_values[3] + 15) & ~0x0F) */
@


1.7
log
@there is no such thing as dprintf''
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.6 1998/04/18 22:24:25 deraadt Exp $	*/
d47 1
a47 1
void d_putc __P((dev_t, int));
@


1.7.18.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.7 1998/06/09 13:45:07 mickey Exp $	*/
d47 1
a47 1
void d_putc(dev_t, int);
d86 1
a86 1
	/* %ebx (void *)((*reg_values[3] + 15) & ~0x0F) */
@


1.7.8.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
void d_putc(dev_t, int);
d86 1
a86 1
	/* %ebx (void *)((*reg_values[3] + 15) & ~0x0F) */
@


1.7.8.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.7.8.1 2002/03/28 10:31:05 niklas Exp $	*/
d15 5
@


1.7.8.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
debug_init(void)
d58 2
a59 1
dump_regs(u_int trapno, u_int arg)
d73 1
a73 1
	    trapno, arg, trap_names[trapno], save_cons);
d78 1
a78 1
		    ((i%4)? ' ': '\n'));
d90 4
a93 1
dump_mem(char *l, void *p, size_t n)
d107 3
a109 1
d_putc(dev_t d, int c)
@


1.7.8.4
log
@Merge with the trunk
@
text
@d16 2
a17 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
d50 1
a50 1
void
d53 1
d75 1
a75 1
	for (i = 1; i <= nreg; i++)
a91 1

d93 1
a93 1
	for (i = 1; i <= n; i++)
d96 1
a96 1
		printf("\n");
@


1.6
log
@%0x support went away
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.5 1998/04/18 07:39:44 deraadt Exp $	*/
a37 6

#ifdef __STDC__
void dprintf __P((const char *fmt, ...));
#else
void dprintf ();
#endif
@


1.5
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.4 1997/07/17 22:50:01 mickey Exp $	*/
d83 1
a83 1
	printf("\ftrap: %u(%0x): %s\ncn_tab=%p\n",
d88 1
a88 1
		printf("%s\t%0x%c", reg_names[i-1], *reg_values[i-1],
d109 1
a109 1
		printf("%0x%c", *(u_int32_t *)p++, ((i%8)? ' ': '\n'));
@


1.5.2.1
log
@fix release branch: %0x support went away
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.6 1998/04/18 22:24:25 deraadt Exp $	*/
d83 1
a83 1
	printf("\ftrap: %u(%x): %s\ncn_tab=%p\n",
d88 1
a88 1
		printf("%s\t%x%c", reg_names[i-1], *reg_values[i-1],
d109 1
a109 1
		printf("%x%c", *(u_int32_t *)p++, ((i%8)? ' ': '\n'));
@


1.4
log
@proper const
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.3 1997/04/09 08:39:29 mickey Exp $	*/
d37 9
d53 8
d67 1
d69 2
a70 2
dump_regs(trapno)
	int trapno;
d72 23
a94 1
	int i;
d96 2
a97 5
	printf("trap: %s\n", trap_names[trapno]);
	for (i = 0; i < nreg; putchar((++i % 4)?' ':'\n'))
		printf ("%s=0x%x", reg_names[i], *reg_values[i]);
	if (i % 4)
		putchar('\n');
d101 4
a104 1
dump_mem()
d106 10
d117 15
@


1.3
log
@emulate bios calls. more debugging stuff. some fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.2 1997/04/05 18:56:24 mickey Exp $	*/
d35 1
a35 1
#include <stand.h>
d38 1
a38 1
const char *reg_names[] = { REG_NAMES };
d41 2
a42 2
const u_int32_t *reg_values[] = { REG_VALUES(reg) };
const char *trap_names[] = { TRAP_NAMES };
@


1.2
log
@put gdt & idt in the separate file.
print trapno in dump_regs.
no more NO_IDTR.
@
text
@d1 1
a1 1
/*	$OpenBSD: debug.c,v 1.1 1997/04/01 04:52:45 mickey Exp $	*/
d42 1
d56 1
a56 1
	printf("trap: %u\n", trapno);
@


1.1
log
@debugger started.
only one entry for now:
chek_regs (use DUMP_REGS macro instead)
	dumps registers. must be called by lcall or so (to push %cs)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 2
a51 1
dump_regs()
d55 1
@
