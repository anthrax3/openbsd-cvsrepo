head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.52
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.48
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.50
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.42
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.46
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.44
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.40
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.38
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.36
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.34
	OPENBSD_5_0:1.10.0.32
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.30
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.28
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.24
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.10
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.8
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.10
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2004.03.19.13.48.18;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.18.15.34.17;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.18.02.00.49;	author csapuntz;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.13.15.53.34;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.02.24.22.06.51;	author weingart;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	97.07.17.23.00.26;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.04.21.19.55.39;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.12.13;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.10.29.09.23.06;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.29.09.23.07;	author mickey;	state Exp;
branches;
next	;

1.5.10.1
date	2001.04.18.16.08.43;	author niklas;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2001.10.31.03.01.13;	author nate;	state Exp;
branches;
next	1.5.10.3;

1.5.10.3
date	2004.02.19.10.48.43;	author niklas;	state Exp;
branches;
next	1.5.10.4;

1.5.10.4
date	2004.06.05.23.09.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Enter pxeboot, derived from the NetBSD implementation.  Initially
intended to support network installs using bsd.rd over TFTP.

Thanks to the many who tested, including Diana Eichert.

ok deraadt@@
@
text
@/*	$OpenBSD: gateA20.c,v 1.9 2003/08/11 06:23:09 deraadt Exp $	*/

/*
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 *
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <machine/pio.h>
#include <dev/ic/i8042reg.h>
#include <dev/isa/isareg.h>

#include "libsa.h"

#define KB_A20		0xdf		/* enable A20,
					   enable output buffer full interrupt
					   enable data line
					   enable clock line */


/*
 * "Probe"-style routine (no parameters) to turn A20 on
 */
void
gateA20on(void)
{
	gateA20(1);
}


/*
 * Gate A20 for high memory
 */
void
gateA20(int on)
{
	if (ps2model == 0xf82 ||
	    (inb(IO_KBD + KBSTATP) == 0xff && inb(IO_KBD + KBDATAP) == 0xff)) {
		int data;

		/* Try to use 0x92 to turn on A20 */
		if (on) {
			data = inb(0x92);
			outb(0x92, data | 0x2);
		} else {
			data = inb(0x92);
			outb(0x92, data & ~0x2);
		}
	} else {

		while (inb(IO_KBD + KBSTATP) & KBS_IBF);

		while (inb(IO_KBD + KBSTATP) & KBS_DIB)
			(void)inb(IO_KBD + KBDATAP);

		outb(IO_KBD + KBCMDP, KBC_CMDWOUT);
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);

		if (on)
			outb(IO_KBD + KBDATAP, KB_A20);
		else
			outb(IO_KBD + KBDATAP, 0xcd);
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);

		while (inb(IO_KBD + KBSTATP) & KBS_DIB)
			(void)inb(IO_KBD + KBDATAP);
	}
}
@


1.9
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.8 2001/08/18 15:34:17 mickey Exp $	*/
d43 10
@


1.8
log
@probe for ps2 model and check if kbd controller is present
for deciding on a20 method to use.
based on csapuntz@@'s info provided.
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.6 2000/11/13 15:53:34 aaron Exp $	*/
d49 1
a49 2
gateA20(on)
	int on;
@


1.7
log
@

Timeout non-functional KBC (e.g. when missing) and gate A20 using port 0x92
@
text
@d9 1
a9 1
 * 
d15 1
a15 1
 * 
d19 1
a19 1
 * 
d21 1
a21 1
 * 
d26 1
a26 1
 * 
a38 1
#define KC_CMD_WOUT	0xd1		/* write output port */
a44 5
#define A20_KBD		0
#define A20_0x92	1

int gateA20kbd __P((int));

d46 1
a46 1
 * Check for an oddball IBM_L40 machine.
d48 2
a49 9
int
getA20type()
{
	return(A20_KBD);
}


int
gateA20kbd(on)
d52 13
a64 17
	u_int i = 1000000;

	while (i && (inb(IO_KBD + KBSTATP) & KBS_IBF)) i--;
	if (i == 0)
		return (1);

	while (inb(IO_KBD + KBSTATP) & KBS_DIB)
		(void)inb(IO_KBD + KBDATAP);
	
	outb(IO_KBD + KBCMDP, KC_CMD_WOUT);
	while (inb(IO_KBD + KBSTATP) & KBS_IBF);

	if (on)
		outb(IO_KBD + KBDATAP, KB_A20);
	else
		outb(IO_KBD + KBDATAP, 0xcd);
	while (inb(IO_KBD + KBSTATP) & KBS_IBF);
d66 1
a66 2
	while (inb(IO_KBD + KBSTATP) & KBS_DIB)
		(void)inb(IO_KBD + KBDATAP);
d68 2
a69 2
	return (0);
}
d71 2
a72 8
/*
 * Gate A20 for high memory
 */
void
gateA20(on)
	int on;
{
	int data;
d74 5
a78 4
	if (getA20type() == A20_KBD) {
		if (!gateA20kbd(on))
			return;
	}
d80 2
a81 7
	/* Try to use 0x92 to turn on A20 */
	if (on) {
		data = inb(0x92);
		outb(0x92, data | 0x2);
	} else {
		data = inb(0x92);
		outb(0x92, data & ~0x2);
a83 1

@


1.6
log
@Address the i8042 keyboard controller registers as offsets from IO_KBD; from
NetBSD. This will ease the pain when we bring in the pckbc MI keyboard
driver to be used for wscons/i386 and wscons/alpha.
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.5 1998/02/24 22:06:51 weingart Exp $	*/
d49 2
d61 28
d96 1
d98 9
a106 11
	if (getA20type() == A20_0x92) {
		int data;

		/* Try to use 0x92 to turn on A20 */
		if (on) {
			data = inb(0x92);
			outb(0x92, data | 0x2);
		} else {
			data = inb(0x92);
			outb(0x92, data & ~0x2);
		}
d108 2
a109 18

		/* XXX - These whiles might need to be changed to bounded for loops */
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);

		while (inb(IO_KBD + KBSTATP) & KBS_DIB)
			(void)inb(IO_KBD + KBDATAP);

		outb(IO_KBD + KBCMDP, KC_CMD_WOUT);
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);

		if (on)
			outb(IO_KBD + KBDATAP, KB_A20);
		else
			outb(IO_KBD + KBDATAP, 0xcd);
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);

		while (inb(IO_KBD + KBSTATP) & KBS_DIB)
			(void)inb(IO_KBD + KBDATAP);
@


1.5
log
@Changes/updates to /boot stuff.  More to come.
Fixes many divide by zero and pointer bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.4 1997/07/17 23:00:26 mickey Exp $	*/
d35 1
d81 1
a81 1
		while (inb(KBSTATP) & KBS_IBF);
d83 2
a84 2
		while (inb(KBSTATP) & KBS_DIB)
			(void)inb(KBDATAP);
d86 2
a87 2
		outb(KBCMDP, KC_CMD_WOUT);
		while (inb(KBSTATP) & KBS_IBF);
d90 1
a90 1
			outb(KBDATAP, KB_A20);
d92 2
a93 2
			outb(KBDATAP, 0xcd);
		while (inb(KBSTATP) & KBS_IBF);
d95 2
a96 2
		while (inb(KBSTATP) & KBS_DIB)
			(void)inb(KBDATAP);
@


1.5.10.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.6 2000/11/13 15:53:34 aaron Exp $	*/
a34 1
#include <dev/isa/isareg.h>
d80 1
a80 1
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);
d82 2
a83 2
		while (inb(IO_KBD + KBSTATP) & KBS_DIB)
			(void)inb(IO_KBD + KBDATAP);
d85 2
a86 2
		outb(IO_KBD + KBCMDP, KC_CMD_WOUT);
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);
d89 1
a89 1
			outb(IO_KBD + KBDATAP, KB_A20);
d91 2
a92 2
			outb(IO_KBD + KBDATAP, 0xcd);
		while (inb(IO_KBD + KBSTATP) & KBS_IBF);
d94 2
a95 2
		while (inb(IO_KBD + KBSTATP) & KBS_DIB)
			(void)inb(IO_KBD + KBDATAP);
@


1.5.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.5.10.1 2001/04/18 16:08:43 niklas Exp $	*/
d9 1
a9 1
 *
d15 1
a15 1
 *
d19 1
a19 1
 *
d21 1
a21 1
 *
d26 1
a26 1
 *
d39 1
d46 13
d66 2
a67 2
	if (ps2model == 0xf82 ||
	    (inb(IO_KBD + KBSTATP) == 0xff && inb(IO_KBD + KBDATAP) == 0xff)) {
d80 1
d86 1
a86 1
		outb(IO_KBD + KBCMDP, KBC_CMDWOUT);
d99 1
@


1.5.10.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 2
a50 1
gateA20(int on)
@


1.5.10.4
log
@Merge with the trunk
@
text
@a45 10
 * "Probe"-style routine (no parameters) to turn A20 on
 */
void
gateA20on(void)
{
	gateA20(1);
}


/*
@


1.4
log
@proper includes
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.3 1997/04/21 19:55:39 mickey Exp $	*/
d31 1
a33 1
#include <lib/libsa/stand.h>
d36 2
d44 14
d65 32
a96 20
#ifdef	IBM_L40
	outb(0x92, 0x2);
#else	IBM_L40
	while (inb(KBSTATP) & KBS_IBF);

	while (inb(KBSTATP) & KBS_DIB)
		(void)inb(KBDATAP);

	outb(KBCMDP, KC_CMD_WOUT);
	while (inb(KBSTATP) & KBS_IBF);

	if (on)
		outb(KBDATAP, KB_A20);
	else
		outb(KBDATAP, 0xcd);
	while (inb(KBSTATP) & KBS_IBF);

	while (inb(KBSTATP) & KBS_DIB)
		(void)inb(KBDATAP);
#endif	IBM_L40
d98 1
@


1.3
log
@use dev/ic/i8042reg.h, not domestic defines
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.2 1997/03/31 03:12:13 weingart Exp $	*/
d33 1
a33 1
#include <stand.h>
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@d1 1
a1 1
/*	$OpenBSD: gateA20.c,v 1.1.2.1 1996/10/29 09:23:07 mickey Exp $	*/
d34 1
a35 8
#define K_RDWR 		0x60		/* keyboard data & cmds (read/write) */
#define K_STATUS 	0x64		/* keyboard status */
#define K_CMD	 	0x64		/* keybd ctlr command (write-only) */

#define K_OBUF_FUL 	0x01		/* output buffer full */
#define K_IBUF_FUL 	0x02		/* input buffer full */

#define KC_CMD_WIN	0xd0		/* read  output port */
d52 1
a52 1
	while (inb(K_STATUS) & K_IBUF_FUL);
d54 2
a55 2
	while (inb(K_STATUS) & K_OBUF_FUL)
		(void)inb(K_RDWR);
d57 2
a58 2
	outb(K_CMD, KC_CMD_WOUT);
	while (inb(K_STATUS) & K_IBUF_FUL);
d61 1
a61 1
		outb(K_RDWR, KB_A20);
d63 2
a64 2
		outb(K_RDWR, 0xcd);
	while (inb(K_STATUS) & K_IBUF_FUL);
d66 2
a67 2
	while (inb(K_STATUS) & K_OBUF_FUL)
		(void)inb(K_RDWR);
@


1.1
log
@file gateA20.c was initially added on branch new.
@
text
@d1 76
@


1.1.2.1
log
@support libsa
@
text
@a0 76
/*	$OpenBSD$	*/

/*
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 *
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#include <sys/types.h>
#include <machine/pio.h>
#include <stand.h>

#define K_RDWR 		0x60		/* keyboard data & cmds (read/write) */
#define K_STATUS 	0x64		/* keyboard status */
#define K_CMD	 	0x64		/* keybd ctlr command (write-only) */

#define K_OBUF_FUL 	0x01		/* output buffer full */
#define K_IBUF_FUL 	0x02		/* input buffer full */

#define KC_CMD_WIN	0xd0		/* read  output port */
#define KC_CMD_WOUT	0xd1		/* write output port */
#define KB_A20		0xdf		/* enable A20,
					   enable output buffer full interrupt
					   enable data line
					   enable clock line */

/*
 * Gate A20 for high memory
 */
void
gateA20(on)
	int on;
{
#ifdef	IBM_L40
	outb(0x92, 0x2);
#else	IBM_L40
	while (inb(K_STATUS) & K_IBUF_FUL);

	while (inb(K_STATUS) & K_OBUF_FUL)
		(void)inb(K_RDWR);

	outb(K_CMD, KC_CMD_WOUT);
	while (inb(K_STATUS) & K_IBUF_FUL);

	if (on)
		outb(K_RDWR, 0xdf);
	else
		outb(K_RDWR, 0xcd);
	while (inb(K_STATUS) & K_IBUF_FUL);

	while (inb(K_STATUS) & K_OBUF_FUL)
		(void)inb(K_RDWR);
#endif	IBM_L40
}
@

