head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	UBC_SYNC_B:1.7
	SMP:1.7.0.2
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4;
locks; strict;
comment	@# @;


1.7
date	97.08.12.21.39.00;	author mickey;	state dead;
branches;
next	1.6;

1.6
date	97.08.07.22.11.17;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.07.17.22.48.42;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.04.09.08.39.12;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.03.31.23.06.26;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.12.09;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.10.29.09.22.46;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.29.09.22.47;	author mickey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.10.29.10.27.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@new cons
do inline BIOS calls
@
text
@/*	$OpenBSD: bioscom.S,v 1.6 1997/08/07 22:11:17 niklas Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

	.file	"bioscom.S"

#include <machine/asm.h>
#define	_LOCORE
#include <machine/biosvar.h>
#undef	_LOCORE

#define COM_ENT(i,op)		\
ENTRY(com/**/i/**/_/**/op)	; \
	xorl	%edx, %edx	; \
	movb	$i, %dl		; \
	jmp	1f
	
	.text
/*
 * int com<N>_probe();
 *	probe com<N> port
 */
COM_ENT(0,probe)
COM_ENT(1,probe)
COM_ENT(2,probe)
COM_ENT(3,probe)

1:	pushl	%ebx

	DOINT(0x11)		# get equipment (9-11 # of coms)
	shrl	$9, %eax
	andb	$7, %al
	cmpb	%al, %dl
	jl	1f
	xorl	%eax, %eax
	jmp	2f
1:
	xorl	%eax, %eax
	movb	$0xe3, %al	# 9600-N-8
	DOINT(0x14)
	xorl	%eax, %eax
	incl	%eax
2:
	popl	%ebx
	ret

/*
 * void com<N>_putc(char ch)
 *	send ch to serial port
 *
 */

COM_ENT(0,putc)
COM_ENT(1,putc)
COM_ENT(2,putc)
COM_ENT(3,putc)

1:	pushl	%ebx
	movl	8(%esp), %eax
	movb	$1, %ah
	DOINT(0x14)
	xorl	%al, %al
	testb	$0x80, %ah
	jz	1f
	movb	%ah, %al
	andb	$0x7f, %al
1:	movzbl	%al, %eax
	popl	%ebx
	ret

/*
 * int com<N>_getc(void)
 *	read a character from serial port
 */

COM_ENT(0,getc)
COM_ENT(1,getc)
COM_ENT(2,getc)
COM_ENT(3,getc)

1:	pushl	%ebx
	xorl	%eax, %eax
	movb	$2, %ah
	DOINT(0x14)
	testb	$0x80, %ah
	jz	1f
	movl	$-1, %eax
	jmp	2f
1:	movzbl	%al, %eax
2:	popl	%ebx
	ret

/*
 * int com<N>_ischar(void)
 *       check for char available
 */

COM_ENT(0,ischar)
COM_ENT(1,ischar)
COM_ENT(2,ischar)
COM_ENT(3,ischar)

1:	pushl	%ebx
	xorl	%eax, %eax
	movb	$3, %al
	DOINT(0x14)
	movb	$0, %al
	testb	$1, %ah
	jz	1f
	incl	%eax
1:	movzbl	%al, %eax
	popl	%ebx
	ret

@


1.6
log
@9600-N-8 is better than 9600-N-7 no?
@
text
@d1 1
a1 1
/*	$OpenBSD: bioscom.S,v 1.5 1997/07/17 22:48:42 mickey Exp $	*/
@


1.5
log
@add smart com probe approach
limit to 9600 for now (will be better soon)
@
text
@d1 1
a1 1
/*	$OpenBSD: bioscom.S,v 1.4 1997/04/09 08:39:12 mickey Exp $	*/
d69 1
a69 1
	movb	$0xe2, %al
@


1.4
log
@emulate bios calls. more debugging stuff. some fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bioscom.S,v 1.3 1997/03/31 23:06:26 mickey Exp $	*/
d4 2
a5 23
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
d7 13
a19 30
 *	from: Mach, Revision 2.2  92/04/04  11:34:26  rpd
 *	$Id: bioscom.S,v 1.3 1997/03/31 23:06:26 mickey Exp $
 */

/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
 * Serial bootblock interface routines
 * Copyright (c) 1994, J"org Wunsch
d21 11
a31 5
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
d33 1
a33 4
 * THE AUTHOR ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  THE AUTHOR DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 */ 
d35 1
a35 1
	.file	"serial.s"
d39 1
a39 1
#include "biosdev.h"
d42 6
a47 4
	.data
port:
	.long	0x2f8

a48 1

d50 2
a51 10
 * The serial port interface routines implement a simple polled i/o
 * interface to a standard serial port.  Due to the space restrictions
 * for the boot blocks, no BIOS support is used (since BIOS requires
 * expensive real/protected mode switches), instead the rudimentary
 * BIOS support is duplicated here.
 *
 * The base address for the i/o port is stored in 'port' variable upon
 * probing for device.  Console parameters are currently
 * hard-coded to 9600 Bd, 8 bit.  This can be changed in the
 * init_serial() function.
d53 14
a66 36

/*
 * int com_probe();
 *	probe com[0-3] ports and store first found in 'port' variable
 */
ENTRY(com_probe)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edx

	/*
	 * void init_serial(void)
	 * 	initialize the serial console port to 9600 Bd, 8 bpc
	 */
	movl	$port, %edx	# line control reg
	addb	5, %dl
	movl	$0x80, %eax
	outb	%al, %dx	# enable DLAB

	subb	$3, %dl		# divisor latch, low byte
	movb	$12, %al	# divisor 12: 9600 Bd
	outb	%al, %dx
	incl	%edx		# divisor latch, high byte
	movb	%ah, %al
	outb	%al, %dx

	addb	$2, %dl		# line control reg
	movb	$0x13, %al
	outb	%al, %dx	# 8 bit, no parity, 1 stop bit

	incl	%edx		# modem control reg
	movb	$3, %al
	outb	%al, %dx	# enable DTR/RTS

	/* now finally, flush the input buffer */
	incl	%edx		# line status reg
d68 5
a72 7
	inb	%dx, %al
	testb	$0x01, %al
	jz	2f		# no more characters buffered
	subb	$5, %dl		# rx buffer reg
	inb	%dx, %al	# throw away
	addb	$5, %dl
	jmp	1b
d74 1
a74 4
	popl	%edx
	popl	%ebp
	xorl	%eax, %eax	# is present (:
	incl	%eax
d78 1
a78 1
 * void com_putc(ch) char ch;
d83 16
a98 18
ENTRY(com_putc)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx

	movl	$port, %edx	# line status reg
	add	5, %edx
1:	inb	%dx, %al
	test	$0x20, %al
	jz	1b		# TX buffer not empty

	movb	8(%ebp), %al

	sub	$5, %edx	# TX output reg
	outb	%al, %dx	# send this one

	popl	%edx
	popl	%ebp
d102 1
a102 1
 * int com_getc(void)
d106 4
a109 9
ENTRY(com_getc)
	pushl	%edx

	movl	$port, %edx	# line status reg
	addl	5, %edx
1:
	inb	%dx, %al
	testb	$0x01, %al
	jz	1b		# no RX char available
d111 1
d113 8
a120 9
	subl	$5, %edx	# RX buffer reg
	inb	%dx, %al	# fetch (first) character

	andb	$0x7F, %eax	# remove any parity bits we get
	cmpb	$0x7F, %eax	# make DEL...
	jne	2f
	movb	$0x08, %eax	# look like BS
2:
	popl	%edx
d124 2
a125 2
 * int com_ischar(void)
 *       if there is a character pending, return true; otherwise return 0
a126 2
ENTRY(com_ischar)
	pushl	%edx
d128 6
d135 8
a142 6
	movl	$port, %edx	# line status reg
	addl	5, %edx
	inb	%dx, %al
	andb	$0x01, %al		# RX char available?

	pop	%edx
@


1.3
log
@commit all my mods to the last imported libsa stuff....
including:
- disklabel support;
- better boot cmd line
- smaller size (using some compilation switches ;)
- no more relocations in /boot, it's loaded in the place;
- better disk performance (maybe were already in there)
- installboot -n does not require write perms for device
- more debugs
- missing parts in libsa (such as cd9660 and so)
- i don't like 2 files for exec_i386 (sorry, toby, let's discuss maybe?)
tricks and tails:
- joined .text and .data (saves you a page)
- prot mode switching still in biosboot (it's freezed for awhile)
- biosdisk internals changed
- biosdev is not passed propery to the kernel (i'll fix it soon)
- sure i missed smth here to note (use the source, Luke!)
@
text
@d1 1
a1 1
/*	$OpenBSD: bioscom.S,v 1.1.2.2 1996/10/29 10:27:39 mickey Exp $	*/
d29 1
a29 1
 *	$Id: bioscom.S,v 1.1.2.2 1996/10/29 10:27:39 mickey Exp $
d73 3
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@d74 1
d76 1
a76 1
	.long	0x3f8
d98 3
a100 2
	push	%ebp
	mov	%esp, %ebp
d137 2
a140 1
	popl	%ebp
d152 1
d165 1
d175 1
a175 2
	push	%ebp
	movl	%esp, %ebp
d193 1
a193 1
	popl	%ebp
d201 1
a201 2
	push	%ebp
	mov	%esp, %ebp
d209 1
a209 1
	pop	%ebp
@


1.1
log
@file bioscom.S was initially added on branch new.
@
text
@d1 208
@


1.1.2.1
log
@support libsa
@
text
@a0 218
/*	$OpenBSD$	*/

/*
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 *
 *	from: Mach, Revision 2.2  92/04/04  11:34:26  rpd
 *	$Id: serial.S,v 1.3 1995/04/21 16:30:18 bde Exp $
 */

/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
 * Serial bootblock interface routines
 * Copyright (c) 1994, J"org Wunsch
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * THE AUTHOR ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  THE AUTHOR DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 */ 

	.file	"serial.s"

#include <machine/asm.h>

port:
	.word	0x3f8

	.text

/*
 * The serial port interface routines implement a simple polled i/o
 * interface to a standard serial port.  Due to the space restrictions
 * for the boot blocks, no BIOS support is used (since BIOS requires
 * expensive real/protected mode switches), instead the rudimentary
 * BIOS support is duplicated here.
 *
 * The base address for the i/o port is stored in 'port' variable upon
 * probing for device.  Console parameters are currently
 * hard-coded to 9600 Bd, 8 bit.  This can be changed in the
 * init_serial() function.
 */

/*
 * int com_probe();
 *	probe com[0-3] ports and store first found in 'port' variable
 */
ENTRY(com_probe)

	mov	1, %eax		/* present (: */
	ret

/*
 * void com_putc(ch) char ch;
 *	send ch to serial port
 *
 */

ENTRY(com_putc)
	push	%ebp
	mov	%esp, %ebp
	push	%edx

	mov	$port, %edx	# line status reg
	add	5, %edx
1:	inb	%dx, %al
	test	$0x20, %al
	jz	1b		# TX buffer not empty

	movb	0x8(%ebp), %al

	sub	$5, %edx	# TX output reg
	outb	%al, %dx	# send this one

	pop	%edx
	pop	%ebp
	ret

/*
 * int com_getc(void)
 *	read a character from serial port
 */

ENTRY(com_getc)
	push	%ebp
	mov	%esp, %ebp
	push	%edx

	mov	$port, %edx	# line status reg
	add	5, %edx
1:
	inb	%dx, %al
	testb	$0x01, %al
	jz	1b		# no RX char available

	xor	%eax, %eax
	sub	$5, %edx	# RX buffer reg
	inb	%dx, %al	# fetch (first) character

	and	$0x7F, %eax	# remove any parity bits we get
	cmp	$0x7F, %eax	# make DEL...
	jne	2f
	mov	$0x08, %eax	# look like BS
2:
	pop	%edx
	pop	%ebp
	ret

/*
 * int com_ischar(void)
 *       if there is a character pending, return true; otherwise return 0
 */
ENTRY(com_ischar)
	push	%ebp
	mov	%esp, %ebp
	push	%edx

	xorl	%eax, %eax
	mov	$port, %edx	# line status reg
	addl	5, %edx
	inb	%dx, %al
	andb	$0x01, %al		# RX char available?

	pop	%edx
	pop	%ebp
	ret

/*
 * void init_serial(void)
 * 	initialize the serial console port to 9600 Bd, 8 bpc
 */
ENTRY(init_serial)
	push	%ebp
	mov	%esp, %ebp
	push	%edx

	mov	$port, %edx	# line control reg
	add	5, %edx
	movb	$0x80, %al
	outb	%al, %dx	# enable DLAB

	sub	$3, %edx	# divisor latch, low byte
	mov	$12, %ax	# divisor 12: 9600 Bd
	outb	%al, %dx
	inc	%edx		# divisor latch, high byte
	movb	%ah, %al
	outb	%al, %dx

	add	$2, %edx	# line control reg
	movb	$0x13, %al
	outb	%al, %dx	# 8 bit, no parity, 1 stop bit

	inc	%edx		# modem control reg
	mov	$3, %al
	outb	%al, %dx	# enable DTR/RTS

	/* now finally, flush the input buffer */
	inc	%edx		# line status reg
1:
	inb	%dx, %al
	testb	$0x01, %al
	jz	2f		# no more characters buffered
	sub	$5, %edx	# rx buffer reg
	inb	%dx, %al	# throw away
	add	$5, %edx
	jmp	1b
2:
	pop	%edx
	pop	%ebp
	ret
@


1.1.2.2
log
@don't load idt if NO_IDTR defined.
syntax error in conf.c
shave some bytes in *.S files.
@
text
@d1 1
a1 1
/*	$OpenBSD: bioscom.S,v 1.1.2.1 1996/10/29 09:22:47 mickey Exp $	*/
d29 1
a29 1
 *	$Id: bioscom.S,v 1.1.2.1 1996/10/29 09:22:47 mickey Exp $
d75 1
a75 1
	.long	0x3f8
a96 22
	push	%ebp
	mov	%esp, %ebp

	/*
	 * void init_serial(void)
	 * 	initialize the serial console port to 9600 Bd, 8 bpc
	 */
	movl	$port, %edx	# line control reg
	addb	5, %dl
	movl	$0x80, %eax
	outb	%al, %dx	# enable DLAB

	subb	$3, %dl		# divisor latch, low byte
	movb	$12, %al	# divisor 12: 9600 Bd
	outb	%al, %dx
	incl	%edx		# divisor latch, high byte
	movb	%ah, %al
	outb	%al, %dx

	addb	$2, %dl		# line control reg
	movb	$0x13, %al
	outb	%al, %dx	# 8 bit, no parity, 1 stop bit
d98 1
a98 18
	incl	%edx		# modem control reg
	movb	$3, %al
	outb	%al, %dx	# enable DTR/RTS

	/* now finally, flush the input buffer */
	incl	%edx		# line status reg
1:
	inb	%dx, %al
	testb	$0x01, %al
	jz	2f		# no more characters buffered
	subb	$5, %dl		# rx buffer reg
	inb	%dx, %al	# throw away
	addb	$5, %dl
	jmp	1b
2:
	xorl	%eax, %eax	# is present (:
	incl	%eax
	popl	%ebp
d108 3
a110 2
	pushl	%ebp
	movl	%esp, %ebp
d112 1
a112 1
	movl	$port, %edx	# line status reg
d118 1
a118 1
	movb	8(%ebp), %al
d123 2
a124 1
	popl	%ebp
d134 2
a135 1
	movl	%esp, %ebp
d137 2
a138 2
	movl	$port, %edx	# line status reg
	addl	5, %edx
d144 2
a145 2
	xorl	%eax, %eax
	subl	$5, %edx	# RX buffer reg
d148 2
a149 2
	andb	$0x7F, %eax	# remove any parity bits we get
	cmpb	$0x7F, %eax	# make DEL...
d151 1
a151 1
	movb	$0x08, %eax	# look like BS
d153 2
a154 1
	popl	%ebp
d164 1
d167 1
a167 1
	movl	$port, %edx	# line status reg
d172 1
d176 43
@
