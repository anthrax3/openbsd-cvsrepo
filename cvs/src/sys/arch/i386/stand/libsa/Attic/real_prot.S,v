head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	SMP:1.6.0.2;
locks; strict;
comment	@# @;


1.6
date	97.04.18.01.28.02;	author mickey;	state dead;
branches;
next	1.5;

1.5
date	97.04.09.08.39.42;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.04.05.18.56.28;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.03.31.23.06.31;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.12.16;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.10.29.09.23.16;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.29.09.23.17;	author mickey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.10.29.10.27.41;	author mickey;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	96.12.03.13.13.49;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@no more 60k limit!
no more explicit real<-->prot switching!
fix 2.88 floppy drives.....
kbd fixes coming soon!
test it!
@
text
@/*	$OpenBSD: real_prot.S,v 1.5 1997/04/09 08:39:42 mickey Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 *
 *	from: Mach, Revision 2.2  92/04/04  11:34:13  rpd
 */


/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
	.file "real_prot.S"

#include <machine/asm.h>
#include <machine/specialreg.h>

#define addr32  .byte 0x67
#define data32  .byte 0x66

	.data

	.globl	_codeseg
	.globl	_Gdtr
	.globl	_Idtr_prot
	.globl	_Idtr_real

	.text

/*
 *
 * real_to_prot()
 * 	transfer from real mode to protected mode.
 */

ENTRY(real_to_prot)
	/* guarantee that interrupts are disabled when in prot mode */
	cli
	addr32
	data32
	movl	%eax, 2f

	/* load the gdtr */
	addr32
	data32
	lgdt	_C_LABEL(Gdtr)

	/* set the PE bit of CR0 */
	movl	%cr0, %eax
	data32
	orl	$CR0_PE, %eax
	movl	%eax, %cr0 

	/*
	 * make intrasegment jump to flush the processor pipeline and
	 * reload CS register
	 */
	data32
	ljmp	$0x08, $1f

1:	/*
	 * we are in USE32 mode now
	 * set up the protected mode segment registers : DS, SS, ES
	 */
	movl	$0x10, %eax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es

	/* load idtr for debugger and BIOS iface */
	lidt	_Idtr_prot
	# movl	Leax, %eax
	.byte	0xb8
2:	.long	0	/* eax */
	ret

/*
 *
 * prot_to_real()
 *	transfer from protected mode to real mode
 * 
 */

ENTRY(prot_to_real)

	movl	%eax, 4f
	movl 	_codeseg, %eax
	movw	%ax, 2f

	/* Change to use16 mode. */
	ljmp	$0x18, $1f
1:
	/* clear the PE bit of CR0 */
	movl	%cr0, %eax
	data32
	andl 	$~CR0_PE, %eax
	movl	%eax, %cr0

	data32
	# ljmp	_codeseg, $2f
	.byte	0xea
	.long	3f
2:	.word	0
3:	
	/* setup: %ds, %es, %ss */
	movl	%cs, %ax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es

	/* load idtr for BIOS operations */
	addr32
	data32
	lidt	_Idtr_real

	addr32
	data32
	# movl	Leax, %eax
	.byte	0xb8
4:	.long	0	/* %eax */

	sti
	data32
	ret

@


1.5
log
@emulate bios calls. more debugging stuff. some fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: real_prot.S,v 1.4 1997/04/05 18:56:28 mickey Exp $	*/
@


1.4
log
@put gdt & idt in the separate file.
print trapno in dump_regs.
no more NO_IDTR.
@
text
@d1 1
a1 1
/*	$OpenBSD: real_prot.S,v 1.3 1997/03/31 23:06:31 mickey Exp $	*/
d80 3
a109 2
	movl	%ax, %fs
	movl	%ax, %gs
d111 1
a111 1
	/* load idtr so we can debug */
d113 3
d127 1
d129 1
a129 1
	# movw	%ax, 2f
d151 2
a152 3
	movl	%ax, %fs
	movl	%ax, %gs
	/* load idtr so we can debug */
d156 6
@


1.3
log
@commit all my mods to the last imported libsa stuff....
including:
- disklabel support;
- better boot cmd line
- smaller size (using some compilation switches ;)
- no more relocations in /boot, it's loaded in the place;
- better disk performance (maybe were already in there)
- installboot -n does not require write perms for device
- more debugs
- missing parts in libsa (such as cd9660 and so)
- i don't like 2 files for exec_i386 (sorry, toby, let's discuss maybe?)
tricks and tails:
- joined .text and .data (saves you a page)
- prot mode switching still in biosboot (it's freezed for awhile)
- biosdisk internals changed
- biosdev is not passed propery to the kernel (i'll fix it soon)
- sure i missed smth here to note (use the source, Luke!)
@
text
@d1 1
a1 1
/*	$OpenBSD: real_prot.S,v 1.1.2.3 1996/12/03 13:13:49 mickey Exp $	*/
a65 1
#ifndef NO_IDTR
a67 1
#endif
a109 1
#ifndef NO_IDTR
a111 1
#endif
a147 1
#ifndef	NO_IDTR
d152 1
a152 1
#endif
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@a28 1
 *	$Id: real_prot.S,v 1.1.2.3 1996/12/03 13:13:49 mickey Exp $
a78 1
.align 4,0x90
d80 1
a80 1
	/* guarantee that interrupt is disabled when in prot mode */
d109 2
a124 1
.align 4,0x90
d127 2
a128 8
	/*
	 * This is self-modifying code, but we need a writable
	 * code segment, and an intersegment return does not give us that.
	 */
	movw 	_codeseg, %ax
	pushw	%ax
	movw	$2f, %ax
	pushw	%ax
d132 2
a133 2

1:	/* clear the PE bit of CR0 */
d139 7
a145 13
	/*
	 * make intersegment jmp to flush the processor pipeline
	 * using the fake stack frame set up earlier
	 * and reload CS register
	 */
#if 0
	hlt
#endif
	lret
2:	/*
	 * we are in real mode now
	 * set up the real mode segment registers : DS, SS, ES
	 */
d150 2
@


1.1
log
@file real_prot.S was initially added on branch new.
@
text
@d1 172
@


1.1.2.1
log
@support libsa
@
text
@a0 191
/*	$OpenBSD: real_prot.S,v 1.1.2.1 1996/10/16 08:51:19 mickey Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 *
 *	from: Mach, Revision 2.2  92/04/04  11:34:13  rpd
 *	$Id: real_prot.S,v 1.1.2.1 1996/10/16 08:51:19 mickey Exp $
 */


/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
 * LP (Laptop Package)
 *
 * Copyright (C) 1994 by HOSOKAWA, Tatsumi <hosokawa@@mt.cs.keio.ac.jp>
 *
 * This software may be used, modified, copied, and distributed, in
 * both source and binary form provided that the above copyright and
 * these terms are retained. Under no circumstances is the author 
 * responsible for the proper functioning of this software, nor does 
 * the author assume any responsibility for damages incurred with its 
 * use.
 *
 * Sep., 1994	Implemented on FreeBSD 1.1.5.1R (Toshiba AVS001WD)
 * Oct., 1994	NetBSD port (1.0 BETA 10/2) by ukai
 */

/*
 * Modified for APM BIOS initializer by HOSOKAWA Tatsumi
 *
 * See also locore.s. It supports these functions works correctly.
 */

	.file "real_prot.S"

#include <machine/asm.h>
#include <machine/specialreg.h>

#define addr32  .byte 0x67
#define data32  .byte 0x66

.globl	_ourseg
_ourseg:
	.long	_ourseg
.globl	_Gdtr
	.text

/*
 *
 * real_to_prot()
 * 	transfer from real mode to protected mode.
 */

ENTRY(real_to_prot)
	/* guarantee that interrupt is disabled when in prot mode */
	cli

	/* load the gdtr */
	addr32
	data32
	lgdt	_C_LABEL(Gdtr)

	/* set the PE bit of CR0 */
	movl	%cr0, %eax
	data32
	orl	$CR0_PE, %eax
	movl	%eax, %cr0 

	/*
	 * make intrasegment jump to flush the processor pipeline and
	 * reload CS register
	 */
	data32
	ljmp	$0x18, $1f

1:
	/*
	 * we are in USE32 mode now
	 * set up the protected mode segment registers : DS, SS, ES
	 */
	movl	$0x20, %eax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es
#if 0
	/* load idtr so we can debug */
	lidt	EXT(Idtr_prot)
#endif
	ret

/*
 *
 * prot_to_real()
 *	transfer from protected mode to real mode
 * 
 */

ENTRY(prot_to_real)

	sgdt	_Gdtr

	/*
	 * This is self-modifying code, but we need a writable
	 * code segment, and an intersegment return does not give us that.
	 */
	movl 	_ourseg, %eax
	movw	%ax, 2f-2

	/* Change to use16 mode. */
	ljmp	$0x28, $1f

1:
	/* clear the PE bit of CR0 */
	movl	%cr0, %eax
	data32
	andl 	$~CR0_PE, %eax
	movl	%eax, %cr0

	/*
	 * make intersegment jmp to flush the processor pipeline
	 * using the fake stack frame set up earlier
	 * and reload CS register
	 * Here we have an 16 bits intersegment jump.
	 */
	.byte 0xea
	.word 2f
	.word 0

2:
	/*
	 * we are in real mode now
	 * set up the real mode segment registers : DS, SS, ES
	 */
	movw	%cs, %ax
	movw	%ax, %ds
	movw	%ax, %ss
	movw	%ax, %es
#if 0
	/* load idtr so we can debug */
	addr32
	data32
	lidt	EXT(Idtr_real)
#endif
	sti
	data32
	ret

@


1.1.2.2
log
@don't load idt if NO_IDTR defined.
syntax error in conf.c
shave some bytes in *.S files.
@
text
@d1 1
a1 1
/*	$OpenBSD: real_prot.S,v 1.1.2.1 1996/10/29 09:23:17 mickey Exp $	*/
d29 1
a29 1
 *	$Id: real_prot.S,v 1.1.2.1 1996/10/29 09:23:17 mickey Exp $
d55 23
d129 1
a129 2

#ifndef NO_IDTR
d131 1
a131 1
	lidt	_Idtr_prot
d178 5
a182 5
	movl	%cs, %ax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es
#ifndef	NO_IDTR
d186 1
a186 1
	lidt	_Idtr_real
@


1.1.2.3
log
@standalone build, some changes and cleanups, debugs and so.
@
text
@d1 1
a1 1
/*	$OpenBSD: real_prot.S,v 1.1.2.2 1996/10/29 10:27:41 mickey Exp $	*/
d29 1
a29 1
 *	$Id: real_prot.S,v 1.1.2.2 1996/10/29 10:27:41 mickey Exp $
d63 1
a63 3
	.data

	.globl	_ourseg
d65 2
a66 7
	.long	0
	.globl	_Gdtr
#ifndef NO_IDTR
	.globl	_Idtr_prot
	.globl	_Idtr_real
#endif

d95 1
a95 1
	ljmp	$0x08, $1f
d102 1
a102 1
	movl	$0x10, %eax
d132 1
a132 1
	ljmp	$0x18, $1f
@
