head	1.14;
access;
symbols
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	UBC_SYNC_A:1.14
	UBC_SYNC_B:1.14
	SMP:1.14.0.2
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8;
locks; strict;
comment	@# @;


1.14
date	97.08.12.19.24.58;	author mickey;	state dead;
branches;
next	1.13;

1.13
date	97.07.30.19.40.56;	author flipk;	state Exp;
branches;
next	1.12;

1.12
date	97.07.29.16.48.40;	author flipk;	state Exp;
branches;
next	1.11;

1.11
date	97.07.28.23.03.30;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.07.18.00.29.08;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.05.30.02.21.51;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.04.23.14.49.24;	author weingart;	state Exp;
branches;
next	1.7;

1.7
date	97.04.18.17.48.23;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.04.18.06.54.43;	author weingart;	state Exp;
branches;
next	1.5;

1.5
date	97.04.09.08.39.20;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.04.05.23.49.07;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.03.31.23.06.27;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.12.11;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.10.29.09.22.54;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.29.09.22.55;	author mickey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.10.29.10.27.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.14
log
@call BIOS inline (add struct EDD_cb into biosvar.h)
@
text
@/*	$OpenBSD: biosdisk.S,v 1.13 1997/07/30 19:40:56 flipk Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <machine/asm.h>
#define	_LOCORE
#include <machine/biosvar.h>
#include "debug_md.h"
#undef	_LOCORE
#include <assym.h>


	.globl	_C_LABEL(errno)	/* XXX used for bios errors */
	.globl	_C_LABEL(BIOS_regs)
/*
 * int biosread(dev,cyl,head,sect,nsect,buf)
 *	read number of sectors from disk
 */
ENTRY(biosread)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ecx
	pushl	%ebx
	pushl	%edi
	pushl	%es

	movb	8(%ebp), %dl	# device
	movw	12(%ebp), %cx
	xchgb	%ch, %cl	# cylinder; the highest 2 bits of cyl is in %cl
	rorb	$2, %cl
	movb	16(%ebp), %dh	# head
	movb	20(%ebp), %al
	orb	%al, %cl
	incb	%cl		# sector; sec starts from 1, not 0
	movb	$0x2, %ah	# subfunction
	movb	24(%ebp), %al	# number of sectors
	movl	28(%ebp), %ebx	# offset
	movl	%ebx, %edi	# split off for seg:off pair
	andl	$0xf, %ebx	# atomic read for up to 64k
	shrl	$4, %edi
	movl	%edi, _C_LABEL(BIOS_regs)+biosr_es

	DOINT(0x13)
	movb	$0, %al
	jnc	1f
	movb	%ah, %al
1:
	movzbl	%al, %eax	# return value in %ax

	popl	%es
	popl	%edi
	popl	%ebx
	popl	%ecx
	popl	%ebp
	ret

ENTRY(bioswrite)
	movl	$1, %eax
	ret

/*
 *
 * u_int16_t biosdinfo():  return a word that represents the
 *	max number of sectors and  heads and drives for this device
 *
 */

ENTRY(biosdinfo)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%ecx

	movb	8(%ebp), %dl		# drive #
	movb	$0x08, %ah		# ask for disk info
	DOINT(0x13)
	movb	$1, %ah			# max head
	movb	$18, %al		# max sector
	jc	1f

	/* form a word w/ nhead/nsect packed */
	movb	%dh, %ah		# max head
	andb	$0x3f, %cl		# mask of cylinder gunk
	movb	%cl, %al		# max sector (and # sectors)
1:
	popl	%ecx
	popl	%ebx
	popl	%ebp
	ret


/*
 *
 * biosdreset(): reset disk system
 *
 */

ENTRY(biosdreset)
	pushl	%ebx
	pushl	%ecx

	movb	$0x00, %ah		# reset disk system
	movb	8(%ebp), %dl		# drive #
	DOINT(0x13)

	popl	%ecx
	popl	%ebx
	ret

/*
 * int EDDcheck(dev)
 *	check the features supported by the bios for the drive
 */
ENTRY(EDDcheck)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ecx
	pushl	%ebx

	movb	$0x44, %ah
	movw	$0x55aa, %bx
	movl	8(%ebp), %edx
	DOINT(0x13)
	movl	$-1, %eax
	jc	1f
	cmpw	$0xaa55, %bx
	jne	1f
	xorl	%eax, %eax
	movw	%cx, %ax	/* API support bitmap */
1:
	popl	%ebx
	popl	%ecx
	popl	%ebp
	ret

	.data

ddp:	.byte	0x10	# size of packet
	.byte	0	# reserved
	.word	0	# # of blocks to transfer
	.long	0	# address to read/write to
	.long	0,0	# start to read here

	.text
/*
 * int EDDread(dev,abs_sect,nsect,buf)
 *	read nsect starting on absolute sector #abs_sect into buf
 */
ENTRY(EDDread)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ecx
	pushl	%ebx
	pushl	%esi

	movl	8(%ebp), %edx	/* drive */
	movl	ddp, %esi
	movl	20(%ebp), %eax	/* nblks */
	movw	%ax, 2(%esi)
	movl	12(%ebp), %eax	/* abs starting sector */
	movl	%eax, 8(%esi)
	movl	16(%ebp), %eax
	movl	%eax, 12(%esi)
	movl	24(%ebp), %eax	/* buffer */
	movl	%eax, 4(%esi)
	movb	$0x42, %ah
	DOINT(0x13)
	jnc	1f
	xorl	%eax, %eax

1:	movzbl	%ah, %eax
	movl	%eax, _C_LABEL(errno)
	movw	2(%esi), %ax	/* return number of blocks read ok */

	popl	%esi
	popl	%ebx
	popl	%ecx
	popl	%ebp
	ret

/*
 * int EDDwrite(dev,abs_sect,nsect,buf)
 *	read nsect starting on absolute sector #abs_sect into buf
 */
ENTRY(EDDwrite)
	movl	$19, _C_LABEL(errno)
	movl	$0, %eax
	ret

@


1.13
log
@mickey has pieces he has not committed.
if he puts the tree in an unbuildable state again..
anyway, all these problems came from the fact that etc/genassym.cf
wasn't even being used, and assym.h is where key defines were supposed
to be coming from. now we actually include etc/genassym.cf in the
genassym.sh processing, and remove the #includes i had in place to
work around it. now if mickey had committed machine/biosvar.h, etc/Makefile,
and these asm files all at the same time, there wouldn't have been
a problem....
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.12 1997/07/29 16:48:40 flipk Exp $	*/
@


1.12
log
@Test before you Commit!!
1) missing include files in biosboot.S and gidt.S
2) macros in apm_init.S, biosdisk.S, gidt.S wrong case
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.11 1997/07/28 23:03:30 mickey Exp $	*/
d71 1
a71 1
	movl	%edi, _C_LABEL(BIOS_regs)+BIOSR_ES
@


1.11
log
@assym.h
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.10 1997/07/18 00:29:08 mickey Exp $	*/
d71 1
a71 1
	movl	%edi, _C_LABEL(BIOS_regs)+biosr_es
@


1.10
log
@proper includes
s/BIOSINT/DOINT/g
pass %es in bios regs save area
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.9 1997/05/30 02:21:51 mickey Exp $	*/
d40 1
d71 1
a71 1
	movl	%edi, _C_LABEL(BIOS_regs)+BIOSR_ES
@


1.9
log
@EDD support functions, EDD detection code.
com prototypes changes
some indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.8 1997/04/23 14:49:24 weingart Exp $	*/
d37 1
a38 1
#include "biosdev.h"
d43 1
a43 1

d70 1
d72 1
a72 1
	BIOSINT(0x13)
d105 1
a105 1
	BIOSINT(0x13)
d133 1
a133 1
	BIOSINT(0x13)
d152 1
a152 1
	BIOSINT(0x13)
d196 1
a196 1
	BIOSINT(0x13)
@


1.8
log
@Clean up disk reset code
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.7 1997/04/18 17:48:23 mickey Exp $	*/
d41 3
d90 5
a94 5
#
# u_int16_t biosdinfo():  return a word that represents the
#	max number of sectors and  heads and drives for this device
#
*/
d121 4
a124 4
#
# biosdreset(): reset disk system
#
*/
d136 80
@


1.7
log
@some cleanup, comments and copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.6 1997/04/18 06:54:43 weingart Exp $	*/
d128 1
@


1.6
log
@Clean up error handling a little.  There is a small
problem with marginal disks.  This code does not
like them at all.  I'm too frazzled right now to
figure this out.  This should give better error
messages...
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.5 1997/04/09 08:39:20 mickey Exp $	*/
d4 28
a31 1
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
a32 23
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
a34 23
/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

d42 3
a44 11
# BIOS call "INT 0x13 Function 0x2" to read sectors from disk into memory
#	Call with	%ah = 0x2
#			%al = number of sectors
#			%ch = cylinder
#			%cl = sector
#			%dh = head
#			%dl = drive (0x80 for hard disk, 0x0 for floppy disk)
#			%es:%bx = segment:offset of buffer
#	Return:		
#			%al = 0x0 on success; err code on failure
*/
d64 1
a64 1
	movl	%ebx, %edi	# spilt off for seg:off pair
a82 1

d88 1
a88 1
# biosdinfo():  return a word that represents the
d99 1
a99 1
	movb	8(%ebp), %dl		# diskinfo(drive #)
d102 2
a103 2
	movb	$1, %ah		# max head
	movb	$18, %al	# max sector
d106 1
a106 1
	/* form a longword representing all this gunk */
a123 2
	pushl	%ebp
	movl	%esp, %ebp
d127 1
a127 1
	movb	$0x00, %ah		# ask for disk info
a131 1
	popl	%ebp
@


1.5
log
@emulate bios calls. more debugging stuff. some fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.4 1997/04/05 23:49:07 mickey Exp $	*/
d139 21
@


1.4
log
@32bit corrections
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.3 1997/03/31 23:06:27 mickey Exp $	*/
d55 4
a58 2
#define	addr32	.byte 0x67
#define	data32	.byte 0x66
d75 4
a78 1
	pushal
a89 1
	movl	%eax, %esi	# save this against mode switch
d92 1
a93 3
	andl	$0xf, %ebx	# atomic read for up to 64k

	call	_C_LABEL(prot_to_real)	# enter real mode
d95 2
a96 4
	movl	%di, %es
	movl	%si, %ax
	int	$0x13
	movb	$0, %cl
d98 1
a98 1
	movb	%ah, %cl
d100 1
a100 5
	data32
	call	_C_LABEL(real_to_prot) # back to protected mode

	movzbl	%cl, %eax	# return value in %ax
	movl	%eax, 1f
d102 4
a105 2
	popal
	movl	1f, %eax
a107 1
1:	.long	0
a125 1
	pushl	%edx
a127 3

	call	_C_LABEL(prot_to_real)	# enter real mode

d129 4
a132 23
	int	$0x13
	jnc	ok

	/*
	 * Urk.  Call failed.  It is not supported for floppies by old BIOS's.
	 * Guess it's a 15-sector floppy.  Initialize all the registers for
	 * documentation, although we only need head and sector counts.
	 */
	xorl	%bx, %bx		# %bh = 0
	incl %bx; incl %bx		# %bl bits 0-3 = drive type, 2 = 1.2M
	movb	$79, %ch		# max track
	movb	$15, %cl		# max sector
	xorl	%dx, %dx
	incl	%dx			# floppy drives installed
	movb	%dl, %dh		# max head
	# es:di = parameter table
	# carry = 0

ok:
	data32
	call	_C_LABEL(real_to_prot)	# back to protected mode

	xorl	%eax, %eax
d138 1
a138 2

	popl	%edx
@


1.3
log
@commit all my mods to the last imported libsa stuff....
including:
- disklabel support;
- better boot cmd line
- smaller size (using some compilation switches ;)
- no more relocations in /boot, it's loaded in the place;
- better disk performance (maybe were already in there)
- installboot -n does not require write perms for device
- more debugs
- missing parts in libsa (such as cd9660 and so)
- i don't like 2 files for exec_i386 (sorry, toby, let's discuss maybe?)
tricks and tails:
- joined .text and .data (saves you a page)
- prot mode switching still in biosboot (it's freezed for awhile)
- biosdisk internals changed
- biosdev is not passed propery to the kernel (i'll fix it soon)
- sure i missed smth here to note (use the source, Luke!)
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.1.2.2 1996/10/29 10:27:39 mickey Exp $	*/
d145 1
a145 1
	incw %bx; incw %bx		# %bl bits 0-3 = drive type, 2 = 1.2M
d149 1
a149 1
	incw	%dx			# floppy drives installed
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@d73 1
a73 4
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	push	%es
d87 3
a89 15


	# prot_to_real will set %es to BOOTSEG
	# Which means %cs == %es.
	# XXX - This hoses things severly.  Better
	# recoup %es to point to the base of the given
	# buffer, and let %bx be the index into it,
	# that way we can read a max of 64K give or
	# take 15 bytes anyways.

	# Save %es in %edi
	movl	%ebx, %eax
	shrl	$4, %eax
	movl	%eax, %edi
	andl	$0xF, %ebx
a92 1
	# Restore %es
a93 2

	# Restore %ax
a94 1

d96 4
a99 2
	setc	%bl

d103 2
a104 1
	movzbl	%bl, %eax	# return value in %ax
d106 2
a107 4
	pop		%es
	popl	%edi
	popl	%esi
	popl	%ebx
d110 1
d128 2
a129 2
	pushl	%esi
	pushl	%edi
d165 2
a166 2
	popl	%edi
	popl	%esi
@


1.1
log
@file biosdisk.S was initially added on branch new.
@
text
@d1 187
@


1.1.2.1
log
@support libsa
@
text
@a0 166
/*	$OpenBSD$	*/

/*
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 *
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#include <machine/asm.h>
#define	addr32	.byte 0x67
#define	data32	.byte 0x66

/*
# BIOS call "INT 0x13 Function 0x2" to read sectors from disk into memory
#	Call with	%ah = 0x2
#			%al = number of sectors
#			%ch = cylinder
#			%cl = sector
#			%dh = head
#			%dl = drive (0x80 for hard disk, 0x0 for floppy disk)
#			%es:%bx = segment:offset of buffer
#	Return:		
#			%al = 0x0 on success; err code on failure
*/
ENTRY(biosread)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi

	movb	8(%ebp), %dl	# device
	movw	12(%ebp), %cx
	xchgb	%ch, %cl	# cylinder; the highest 2 bits of cyl is in %cl
	rorb	$2, %cl
	movb	16(%ebp), %dh	# head
	movb	20(%ebp), %al
	orb	%al, %cl
	incb	%cl		# sector; sec starts from 1, not 0
	movb	$0x2, %ah	# subfunction
	movb	24(%ebp), %al	# number of sectors
	movl	%eax, %esi	# save this against mode switch
	movl	28(%ebp), %ebx	# offset
				# prot_to_real will set %es to BOOTSEG

	call	_C_LABEL(prot_to_real)	# enter real mode

	movl	%si, %ax
	int	$0x13
	setc	%bl

	data32
	call	_C_LABEL(real_to_prot) # back to protected mode

	movzbl	%bl, %eax	# return value in %ax

	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
	ret

ENTRY(bioswrite)

	movl	$1, %eax
	ret

/*
#
# biosdinfo():  return a word that represents the
#	max number of sectors and  heads and drives for this device
#
*/

ENTRY(biosdinfo)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi

	movb	8(%ebp), %dl		# diskinfo(drive #)

	call	_C_LABEL(prot_to_real)	# enter real mode

	movb	$0x08, %ah		# ask for disk info
	int	$0x13
	jnc	ok

	/*
	 * Urk.  Call failed.  It is not supported for floppies by old BIOS's.
	 * Guess it's a 15-sector floppy.  Initialize all the registers for
	 * documentation, although we only need head and sector counts.
	 */
	subb	%ah, %ah		# %ax = 0
	movb	%ah, %bh		# %bh = 0
	movb	$2, %bl			# %bl bits 0-3 = drive type, 2 = 1.2M
	movb	$79, %ch		# max track
	movb	$15, %cl		# max sector
	movb	$1, %dh			# max head
	movb	$1, %dl			# # floppy drives installed
	# es:di = parameter table
	# carry = 0

ok:
	data32
	call	_C_LABEL(real_to_prot)	# back to protected mode

	xorl	%eax, %eax

	/*form a longword representing all this gunk*/
	movb	%dh, %ah		# max head
	andb	$0x3f, %cl		# mask of cylinder gunk
	movb	%cl, %al		# max sector (and # sectors)

	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
	ret

@


1.1.2.2
log
@don't load idt if NO_IDTR defined.
syntax error in conf.c
shave some bytes in *.S files.
@
text
@d1 1
a1 1
/*	$OpenBSD: biosdisk.S,v 1.1.2.1 1996/10/29 09:22:55 mickey Exp $	*/
d140 3
a142 2
	xorl	%bx, %bx		# %bh = 0
	incw %bx; incw %bx		# %bl bits 0-3 = drive type, 2 = 1.2M
d145 2
a146 3
	xorl	%dx, %dx
	incw	%dx			# floppy drives installed
	movb	%dl, %dh		# max head
d156 1
a156 1
	/* form a longword representing all this gunk */
@
