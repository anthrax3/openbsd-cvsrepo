head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	UBC_SYNC_A:1.11
	UBC_SYNC_B:1.11
	SMP:1.11.0.2
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5;
locks; strict;
comment	@# @;


1.11
date	97.08.12.21.39.00;	author mickey;	state dead;
branches;
next	1.10;

1.10
date	97.08.08.00.27.54;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.08.07.11.38.39;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.07.18.00.29.09;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.05.31.15.38.45;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.05.29.04.33.40;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.04.21.19.47.32;	author mickey;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	97.04.09.08.39.23;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.03.31.23.06.28;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.12.11;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.10.29.09.22.56;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.29.09.22.57;	author mickey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.10.29.10.27.40;	author mickey;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	96.12.03.13.13.44;	author mickey;	state Exp;
branches;
next	;

1.5.2.1
date	97.06.01.09.53.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@new cons
do inline BIOS calls
@
text
@/*	$OpenBSD: bioskbd.S,v 1.10 1997/08/08 00:27:54 niklas Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <machine/asm.h>
#define	_LOCORE
#include <machine/biosvar.h>
#include <dev/isa/isareg.h>
#include <dev/ic/mc146818reg.h>
#include <i386/isa/nvram.h>
#undef	_LOCORE

/* 
 * int	kbd_probe();
 *	probe if keyboard present
 *
 */
ENTRY(kbd_probe)
	xorl	%eax, %eax
	incl	%eax
	ret

/*
 * void kbd_putc(int c)
 *	output byte to console
 */
ENTRY(kbd_putc)
	pushl	%ebx

	xorl	%eax, %eax
	movb	8(%esp), %al
	movb	$0x0e, %ah
	xorl	%ebx, %ebx
	incl	%ebx
	DOINT(0x10)		# display a byte
	popl	%ebx
	ret

/*
 * int kbd_getc(void)
 *	read character from keyboard
 */
ENTRY(kbd_getc)
	pushl	%ebx
	pushl	%ecx
	xorl	%eax, %eax
	DOINT(0x16)
	movzbl	%al, %eax
	popl	%ecx
	popl	%ebx
	ret

/*
 * int kbd_ischar(void)
 *	check if there is character available from keyboard
 */
ENTRY(kbd_ischar)
	pushl	%ebx
	pushl	%ecx
	xorl	%eax, %eax
	incb	%ah
	DOINT(0x16)
	setnz	%al
	movzbl	%al, %eax
	popl	%ecx
	popl	%ebx
	ret

@


1.10
log
@hardcode keyboard probe to 1 for now
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.9 1997/08/07 11:38:39 niklas Exp $	*/
@


1.9
log
@probe should be returning non-zero when succesful
it was the other way around.
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.8 1997/07/18 00:29:09 mickey Exp $	*/
d49 2
a50 9
	movb	$NVRAM_EQUIPMENT, %al
	outb	%al, $IO_RTC
	inb	$(IO_RTC+1), %al
	xorl	%edx, %edx
	andb	$(NVRAM_EQUIPMENT_KBD|NVRAM_EQUIPMENT_DISPLAY), %al
	cmpb	$(NVRAM_EQUIPMENT_KBD|NVRAM_EQUIPMENT_DISPLAY), %al
	jne	1f
	incl	%edx
1:	movl	%edx, %eax
@


1.8
log
@proper includes
s/BIOSINT/DOINT/g
pass %es in bios regs save area
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.7 1997/05/31 15:38:45 mickey Exp $	*/
d55 1
a55 1
	je	1f
@


1.7
log
@clean/optimize
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.6 1997/05/29 04:33:40 mickey Exp $	*/
d37 1
a40 1
#include "biosdev.h"
d72 1
a72 1
	BIOSINT(0x10)		# display a byte
d84 1
a84 1
	BIOSINT(0x16)
d99 1
a99 1
	BIOSINT(0x16)
@


1.6
log
@safety
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.5 1997/04/21 19:47:32 mickey Exp $	*/
d67 1
d82 2
a83 1
	movb	$0, %ah
d86 1
d96 3
a98 1
	movb	$1, %ah
d102 1
@


1.5
log
@probe for keyboard/screen by looking into CMOS.
what people say?
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.4 1997/04/09 08:39:23 mickey Exp $	*/
d80 1
d84 1
d92 1
d97 1
@


1.5.2.1
log
@2.1 laptop kbd fixes from mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.7 1997/05/31 15:38:45 mickey Exp $	*/
a66 1
	xorl	%eax, %eax
d80 1
a80 3
	pushl	%ebx
	pushl	%ecx
	xorl	%eax, %eax
a82 2
	popl	%ecx
	popl	%ebx
d90 1
a90 4
	pushl	%ebx
	pushl	%ecx
	xorl	%eax, %eax
	incb	%ah
a93 2
	popl	%ecx
	popl	%ebx
@


1.4
log
@emulate bios calls. more debugging stuff. some fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.3 1997/03/31 23:06:28 mickey Exp $	*/
d4 28
a31 1
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
a32 23
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
a34 23
/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

d37 3
d49 9
a57 70
#if 0
#include <machine/console.h>
#include <machine/cpufunc.h>
#include "boot.h"

int
probe_keyboard(void)
{
	int i, retries = 5;
	unsigned char val;

	/* flush any noise in the buffer */
	while (inb(KB_STAT) & KB_BUF_FULL) {
		delay1ms();
		(void) inb(KB_DATA);
	}

	/* Try to reset keyboard hardware */
  again:
	while (--retries) {
#ifdef DEBUG
		printf("%d ", retries);
#endif
		while ((inb(KB_STAT) & KB_READY) == KB_READY) delay1ms();
		outb(KB_DATA, KB_RESET);
		for (i=0; i<1000; i++) {
			delay1ms();
			val = inb(KB_DATA);
			if (val == KB_ACK || val == KB_ECHO)
				goto gotack;
			if (val == KB_RESEND)
				break;
		}
	}
gotres:
#ifdef DEBUG
	printf("gotres\n");
#endif
	if (!retries) {
#ifdef DEBUG
		printf("gave up\n");
#endif
		return(1);
	}
gotack:
	delay1ms();
	while ((inb(KB_STAT) & KB_BUF_FULL) == 0) delay1ms();
	delay1ms();
#ifdef DEBUG
	printf("ACK ");
#endif
	val = inb(KB_DATA);
	if (val == KB_ACK)
		goto gotack;
	if (val == KB_RESEND)
		goto again;
	if (val != KB_RESET_DONE) {
#ifdef DEBUG
		printf("stray val %d\n", val);
#endif
		return(0);
	}
#ifdef DEBUG
	printf("ok\n");
#endif
	return(0);
}

#endif
	movl	1, %eax		/* present (: */
d61 3
a63 6
# BIOS call "INT 10H Function 0Eh" to write character to console
#	Call with	%ah = 0x0e
#			%al = character
#			%bh = page
#			%bl = foreground color
*/
a71 1

a74 1

d76 3
a78 5
# BIOS call "INT 16H Function 00H" to read character from the keyboard
#	Call with	%ah = 0x00
#	Return:		%ah = keyboard scan code
#			%al = ASCII character
*/
d80 1
a80 1
	xorl	%eax, %eax
a84 1

d86 3
a88 10
# BIOS call "INT 16H Function 01H" to check whether a character is pending
#	Call with	%ah = 0x01
#	Return:	
#		If key waiting to be input:
#			%ah = keyboard scan code
#			%al = ASCII character
#			ZF  = clear
#		else
#			ZF  = set
*/
d90 1
a90 1
	movb	$0x01, %ah
@


1.3
log
@commit all my mods to the last imported libsa stuff....
including:
- disklabel support;
- better boot cmd line
- smaller size (using some compilation switches ;)
- no more relocations in /boot, it's loaded in the place;
- better disk performance (maybe were already in there)
- installboot -n does not require write perms for device
- more debugs
- missing parts in libsa (such as cd9660 and so)
- i don't like 2 files for exec_i386 (sorry, toby, let's discuss maybe?)
tricks and tails:
- joined .text and .data (saves you a page)
- prot mode switching still in biosboot (it's freezed for awhile)
- biosdisk internals changed
- biosdev is not passed propery to the kernel (i'll fix it soon)
- sure i missed smth here to note (use the source, Luke!)
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.1.2.3 1996/12/03 13:13:44 mickey Exp $	*/
d55 3
a57 2
#define	addr32	.byte 0x67
#define	data32	.byte 0x66
d145 1
a145 9
	pushl	%ebp
	movl	%esp, %ebp
	pushal

	movb	8(%ebp), %cl

	call	_C_LABEL(prot_to_real)

	movb	%cl, %al
d147 1
d149 3
a151 3
	xorl	%bx, %bx
	incl	%bx
	int	$0x10		# display a byte
d153 1
a153 5
	data32
	call	_C_LABEL(real_to_prot)

	popal
	popl	%ebp
a163 8
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi

	call	_C_LABEL(prot_to_real)

d165 2
a166 13
	int	$0x16

	movb	%al, %bl	# real_to_prot uses %eax

	data32
	call	_C_LABEL(real_to_prot)

	movzbl	%bl, %eax

	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
a181 4
	pushal

	call	_C_LABEL(prot_to_real)

d183 3
a185 13
	int	$0x16
	setnz	%ah

	movb	%ah, %bl	# real_to_prot uses %eax

	data32
	call	_C_LABEL(real_to_prot)

	movzbl	%bl, %eax
	movl	%eax, 1f

	popal
	movl	1f, %eax
a186 1
1:	.long	0
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@d64 69
a132 1
	
d146 1
a146 3
	pushl	%ebx
	pushl	%esi
	pushl	%edi
d155 2
a156 2
	xorl	%ebx, %ebx
	incl	%ebx
d162 1
a162 3
	popl	%edi
	popl	%esi
	popl	%ebx
d211 1
a211 5
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi
d225 1
d227 2
a228 4
	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
d230 2
@


1.1
log
@file bioskbd.S was initially added on branch new.
@
text
@d1 170
@


1.1.2.1
log
@support libsa
@
text
@a0 174
/*	$OpenBSD$	*/

/*
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 *
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#include <machine/asm.h>
#define	addr32	.byte 0x67
#define	data32	.byte 0x66

/* 
 * int	kbd_probe();
 *	probe if keyboard present
 *
 */
ENTRY(kbd_probe)
	
	movl	1, %eax		/* present (: */
	ret

/*
# BIOS call "INT 10H Function 0Eh" to write character to console
#	Call with	%ah = 0x0e
#			%al = character
#			%bh = page
#			%bl = foreground color
*/
ENTRY(kbd_putc)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi

	movb	8(%ebp), %cl

	call	_C_LABEL(prot_to_real)

	movb	%cl, %al

	movb	$0x0e, %ah
	data32
	movl	$0x0001, %ebx
	int	$0x10		# display a byte

	data32
	call	_C_LABEL(real_to_prot)

	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
	ret


#ifndef	STRIPPED
/*
# BIOS call "INT 16H Function 00H" to read character from the keyboard
#	Call with	%ah = 0x00
#	Return:		%ah = keyboard scan code
#			%al = ASCII character
*/
ENTRY(kbd_getc)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi

	call	_C_LABEL(prot_to_real)

	movb	$0x00, %ah
	int	$0x16

	movb	%al, %bl	# real_to_prot uses %eax

	data32
	call	_C_LABEL(real_to_prot)

	xorl	%eax, %eax
	movb	%bl, %al

	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
	ret


/*
# BIOS call "INT 16H Function 01H" to check whether a character is pending
#	Call with	%ah = 0x01
#	Return:	
#		If key waiting to be input:
#			%ah = keyboard scan code
#			%al = ASCII character
#			ZF  = clear
#		else
#			ZF  = set
*/
ENTRY(kbd_ischar)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%esi
	pushl	%edi

	call	_C_LABEL(prot_to_real)

	movb	$0x01, %ah
	int	$0x16
	setnz	%ah

	movb	%ah, %bl	# real_to_prot uses %eax

	data32
	call	_C_LABEL(real_to_prot)

	xorl	%eax, %eax
	movb	%bl, %al

	popl	%edi
	popl	%esi
	popl	%ebx
	popl	%ebp
	ret
#endif
@


1.1.2.2
log
@don't load idt if NO_IDTR defined.
syntax error in conf.c
shave some bytes in *.S files.
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.1.2.1 1996/10/29 09:22:57 mickey Exp $	*/
d89 2
a90 2
	xorl	%ebx, %ebx
	incl	%ebx
d119 1
a119 1
	xorl	%eax, %eax
d127 2
a128 1
	movzbl	%bl, %eax
d166 2
a167 1
	movzbl	%bl, %eax
@


1.1.2.3
log
@standalone build, some changes and cleanups, debugs and so.
@
text
@d1 1
a1 1
/*	$OpenBSD: bioskbd.S,v 1.1.2.2 1996/10/29 10:27:40 mickey Exp $	*/
d103 1
d172 1
@
