head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.6
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.38.0.4
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.36.0.36
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.36.0.28
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.36.0.32
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.36.0.30
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.36.0.26
	OPENBSD_5_4_BASE:1.36
	OPENBSD_5_3:1.36.0.24
	OPENBSD_5_3_BASE:1.36
	OPENBSD_5_2:1.36.0.22
	OPENBSD_5_2_BASE:1.36
	OPENBSD_5_1_BASE:1.36
	OPENBSD_5_1:1.36.0.20
	OPENBSD_5_0:1.36.0.18
	OPENBSD_5_0_BASE:1.36
	OPENBSD_4_9:1.36.0.16
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.36.0.14
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.10
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.12
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.8
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.6
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.4
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.36.0.2
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.35.0.14
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.35.0.12
	OPENBSD_4_0_BASE:1.35
	OPENBSD_3_9:1.35.0.10
	OPENBSD_3_9_BASE:1.35
	OPENBSD_3_8:1.35.0.8
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.35.0.6
	OPENBSD_3_7_BASE:1.35
	OPENBSD_3_6:1.35.0.4
	OPENBSD_3_6_BASE:1.35
	SMP_SYNC_A:1.35
	SMP_SYNC_B:1.35
	OPENBSD_3_5:1.35.0.2
	OPENBSD_3_5_BASE:1.35
	OPENBSD_3_4:1.34.0.2
	OPENBSD_3_4_BASE:1.34
	UBC_SYNC_A:1.32
	OPENBSD_3_3:1.31.0.10
	OPENBSD_3_3_BASE:1.31
	OPENBSD_3_2:1.31.0.8
	OPENBSD_3_2_BASE:1.31
	OPENBSD_3_1:1.31.0.6
	OPENBSD_3_1_BASE:1.31
	UBC_SYNC_B:1.31
	UBC:1.31.0.4
	UBC_BASE:1.31
	OPENBSD_3_0:1.31.0.2
	OPENBSD_3_0_BASE:1.31
	OPENBSD_2_9:1.30.0.4
	OPENBSD_2_9_BASE:1.30
	OPENBSD_2_8:1.30.0.2
	OPENBSD_2_8_BASE:1.30
	OPENBSD_2_7:1.28.0.6
	OPENBSD_2_7_BASE:1.28
	SMP:1.28.0.4
	SMP_BASE:1.28
	kame_19991208:1.28
	OPENBSD_2_6:1.28.0.2
	OPENBSD_2_6_BASE:1.28
	OPENBSD_2_5:1.27.0.4
	OPENBSD_2_5_BASE:1.27
	OPENBSD_2_4:1.27.0.2
	OPENBSD_2_4_BASE:1.27
	OPENBSD_2_3:1.25.0.2
	OPENBSD_2_3_BASE:1.25
	OPENBSD_2_2:1.21.0.2
	OPENBSD_2_2_BASE:1.21;
locks; strict;
comment	@ * @;


1.38
date	2015.09.18.13.30.56;	author miod;	state Exp;
branches;
next	1.37;
commitid	1BEcCDYd9p5DIl0g;

1.37
date	2015.09.02.04.09.24;	author yasuoka;	state Exp;
branches;
next	1.36;
commitid	1T0xGkKNIiRZnTmz;

1.36
date	2007.04.27.10.08.34;	author tom;	state Exp;
branches;
next	1.35;

1.35
date	2004.03.19.13.48.18;	author tom;	state Exp;
branches;
next	1.34;

1.34
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.03.20.22.12;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.17.03.43.19;	author drahn;	state Exp;
branches;
next	1.31;

1.31
date	2001.08.18.15.34.17;	author mickey;	state Exp;
branches
	1.31.4.1;
next	1.30;

1.30
date	2000.10.25.17.12.07;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	2000.10.09.20.37.19;	author mickey;	state Exp;
branches;
next	1.28;

1.28
date	99.08.25.00.54.19;	author mickey;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	98.05.25.19.20.57;	author mickey;	state Exp;
branches;
next	1.26;

1.26
date	98.05.16.07.32.19;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	98.04.18.07.39.53;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	98.03.11.02.12.03;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	98.02.24.22.06.55;	author weingart;	state Exp;
branches;
next	1.22;

1.22
date	97.11.30.21.51.46;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	97.10.22.23.34.39;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	97.10.18.05.13.17;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	97.10.17.18.46.58;	author weingart;	state Exp;
branches;
next	1.18;

1.18
date	97.10.17.15.03.27;	author weingart;	state Exp;
branches;
next	1.17;

1.17
date	97.10.12.21.14.23;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	97.10.06.17.36.43;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	97.09.29.03.48.03;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	97.09.02.19.17.41;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	97.08.31.07.54.17;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	97.08.22.20.13.44;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	97.08.21.20.36.16;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.08.13.04.32.43;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.08.13.03.23.39;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.08.12.21.51.30;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.08.07.11.51.02;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.08.05.12.58.20;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.07.31.20.16.45;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.07.28.23.04.59;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.07.21.15.41.55;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.07.18.01.03.55;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.00.37.15;	author mickey;	state Exp;
branches;
next	;

1.28.4.1
date	2000.02.19.17.53.10;	author niklas;	state Exp;
branches;
next	1.28.4.2;

1.28.4.2
date	2001.04.18.16.08.44;	author niklas;	state Exp;
branches;
next	1.28.4.3;

1.28.4.3
date	2001.10.31.03.01.13;	author nate;	state Exp;
branches;
next	1.28.4.4;

1.28.4.4
date	2003.05.13.19.42.09;	author ho;	state Exp;
branches;
next	1.28.4.5;

1.28.4.5
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.28.4.6;

1.28.4.6
date	2004.02.19.10.48.43;	author niklas;	state Exp;
branches;
next	1.28.4.7;

1.28.4.7
date	2004.06.05.23.09.01;	author niklas;	state Exp;
branches;
next	;

1.31.4.1
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Remove support for building the boot blocks with DEBUGFLAGS=-D_TEST, which is
supposed to create a userland binary in order to test non-boot related
functionality. This feature has been bitrotting in a non-compiling state
for years, and causes a too-many-ifdefs disease now that there are intrusive
EFI changes.

No functional change.
@
text
@/*	$OpenBSD: machdep.c,v 1.37 2015/09/02 04:09:24 yasuoka Exp $	*/

/*
 * Copyright (c) 2004 Tom Cosgrove
 * Copyright (c) 1997-1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "libsa.h"
#include "biosdev.h"
#include <machine/apmvar.h>
#include <machine/biosvar.h>

#ifdef EFIBOOT
#include "efiboot.h"
#endif

volatile struct BIOS_regs	BIOS_regs;

#if defined(DEBUG)
#define CKPT(c)	(*(u_int16_t*)0xb8148 = 0x4700 + (c))
#else
#define CKPT(c) /* c */
#endif

void
machdep(void)
{
	int i, j;
	struct i386_boot_probes *pr;

	/*
	 * The list of probe routines is now in conf.c.
	 */
	for (i = 0; i < nibprobes; i++) {
		pr = &probe_list[i];
		if (pr != NULL) {
			printf("%s:", pr->name);

			for (j = 0; j < pr->count; j++) {
				(*(pr->probes)[j])();
			}

			printf("\n");
		}
	}
}

int check_skip_conf(void)
{
	/* Return non-zero (skip boot.conf) if Control "shift" key down */
#ifndef EFIBOOT
	return (pc_getshifts(0) & 0x04);
#else
	return (efi_cons_getshifts(0) & 0x04);
#endif
}
@


1.37
log
@Bring the boot changes on amd64 to i386.  alloca is deleted.
Also fix the boot from BIOS and bump the version.

input and ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.5 2015/09/02 01:52:26 yasuoka Exp $	*/
d41 1
a41 1
#if defined(DEBUG) && !defined(_TEST)
@


1.36
log
@Check for Control key held down when starting, and don't read boot.conf
if it is.  This gives a way to recover from "switching to com0" when
there's no serial cable handy.

Bump version numbers.

A similar change will be made to amd64 boot soon.

ok toby@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.35 2004/03/19 13:48:18 tom Exp $	*/
d35 4
d73 1
d75 3
@


1.35
log
@Enter pxeboot, derived from the NetBSD implementation.  Initially
intended to support network installs using bsd.rd over TFTP.

Thanks to the many who tested, including Diana Eichert.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.34 2003/08/11 06:23:09 deraadt Exp $	*/
d31 1
d64 6
@


1.34
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.33 2003/06/03 20:22:12 mickey Exp $	*/
d4 1
a32 2
#include "debug.h"
#include "ps2probe.h"
a41 3
extern int debug;
int ps2model;

d45 2
a46 16
	/* here */	CKPT('0');
	printf("probing:");
#ifndef _TEST
	/* probe for a model number, gateA20() neds ps2model */
	ps2probe();	CKPT('1');
	gateA20(1);	CKPT('2');
	debug_init();	CKPT('3');
#endif
	/* call console init before doing any io */
	cninit();	CKPT('4');
#ifndef _TEST
	apmprobe();	CKPT('5');
	pciprobe();	CKPT('6');
/*	smpprobe();	CKPT('7'); */
	memprobe();	CKPT('8');
	printf("\n");
d48 15
a62 3
	diskprobe();	CKPT('9');
#endif
			CKPT('Z');
@


1.33
log
@three four kills
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.32 2003/04/17 03:43:19 drahn Exp $	*/
d47 1
a47 1
machdep()
@


1.32
log
@i386 ELF bootloader. developed with weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.31 2001/08/18 15:34:17 mickey Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.31
log
@probe for ps2 model and check if kbd controller is present
for deciding on a20 method to use.
based on csapuntz@@'s info provided.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.30 2000/10/25 17:12:07 mickey Exp $	*/
d40 1
a40 1
struct BIOS_regs	BIOS_regs;
@


1.31.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
volatile struct BIOS_regs	BIOS_regs;
@


1.30
log
@add pciprobe back into /boot.
it appears there are machines only equipped w/ real-mode pci bios.
int time, we will benefit from this the other way around, --
we'll elliminate pci bios _calls_ in kernel instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.29 2000/10/09 20:37:19 mickey Exp $	*/
d38 1
d49 1
d54 2
a55 1
	/* here */    CKPT('0');
d57 4
a60 2
	gateA20(1);   CKPT('1');
	debug_init(); CKPT('2');
d63 1
a63 2
	printf("probing:");
	cninit();     CKPT('3');
d65 4
a68 4
	apmprobe();   CKPT('4');
	pciprobe();   CKPT('5');
/*	smpprobe();   CKPT('6'); */
	memprobe();   CKPT('7');
d71 1
a71 1
	diskprobe();  CKPT('8');
d73 1
a73 1
	CKPT('Z');
@


1.29
log
@pcibios kernel device is now doing this job
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.28 1999/08/25 00:54:19 mickey Exp $	*/
d62 1
a62 1
/*	pciprobe();   CKPT('5'); */
@


1.28
log
@give better support to the bios memory maps.
provide memory maps editing through the machine memory command.
rearrange probing in machdep, so it provides less output,
also giving a shot for apm to fix the memory maps.
changes to kernel are minimal, only that is required due
to the api version bits addition and such cosmetic changes.
tested on all critical kernel,boot combinations; niklas@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.27 1998/05/25 19:20:57 mickey Exp $	*/
d62 1
a62 1
	pciprobe();   CKPT('5');
@


1.28.4.1
log
@First SMP branch commit.  Probe SMP systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.28 1999/08/25 00:54:19 mickey Exp $	*/
d63 2
a64 2
	memprobe();   CKPT('6');
	smpprobe();   CKPT('7');
@


1.28.4.2
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.30 2000/10/25 17:12:07 mickey Exp $	*/
@


1.28.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.28.4.2 2001/04/18 16:08:44 niklas Exp $	*/
a37 1
#include "ps2probe.h"
a47 1
int ps2model;
d52 1
a52 2
	/* here */	CKPT('0');
	printf("probing:");
d54 2
a55 4
	/* probe for a model number, gateA20() neds ps2model */
	ps2probe();	CKPT('1');
	gateA20(1);	CKPT('2');
	debug_init();	CKPT('3');
d58 2
a59 1
	cninit();	CKPT('4');
d61 4
a64 4
	apmprobe();	CKPT('5');
	pciprobe();	CKPT('6');
	memprobe();	CKPT('7');
	smpprobe();	CKPT('8');
d67 1
a67 1
	diskprobe();	CKPT('9');
d69 1
a69 1
			CKPT('Z');
@


1.28.4.4
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.28.4.3 2001/10/31 03:01:13 nate Exp $	*/
d40 1
a40 1
volatile struct BIOS_regs	BIOS_regs;
@


1.28.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.28.4.4 2003/05/13 19:42:09 ho Exp $	*/
d15 5
@


1.28.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
machdep(void)
@


1.28.4.7
log
@Merge with the trunk
@
text
@a3 1
 * Copyright (c) 2004 Tom Cosgrove
d32 2
d43 3
d49 16
a64 2
	int i, j;
	struct i386_boot_probes *pr;
d66 3
a68 15
	/*
	 * The list of probe routines is now in conf.c.
	 */
	for (i = 0; i < nibprobes; i++) {
		pr = &probe_list[i];
		if (pr != NULL) {
			printf("%s:", pr->name);

			for (j = 0; j < pr->count; j++) {
				(*(pr->probes)[j])();
			}

			printf("\n");
		}
	}
@


1.27
log
@put support for test /boot environment back; some CLEANFILES and spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.26 1998/05/16 07:32:19 deraadt Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997 Michael Shalayeff
d17 1
a17 1
 *	This product includes software developed by Michael Shalayeff.
d21 11
a31 12
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
d58 1
a58 1
	printf("devices: ");
d61 5
a65 2
	memprobe();   CKPT('4');
	diskprobe();  CKPT('5');
d67 1
a67 5
	printf("bios:");
	apmprobe();   CKPT('6');
	pciprobe();   CKPT('7');
	smpprobe();   CKPT('8');
	printf("\n");
@


1.26
log
@shorten device probe messages to 2 lines
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.25 1998/04/18 07:39:53 deraadt Exp $	*/
d54 1
d57 1
@


1.25
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.24 1998/03/11 02:12:03 deraadt Exp $	*/
d57 1
@


1.24
log
@delete blank line
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.23 1998/02/24 22:06:55 weingart Exp $	*/
d47 2
@


1.23
log
@Changes/updates to /boot stuff.  More to come.
Fixes many divide by zero and pointer bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.22 1997/11/30 21:51:46 mickey Exp $	*/
d64 1
a64 1
	printf("\n\n");
@


1.22
log
@big diskinfo changes from toby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.21 1997/10/22 23:34:39 mickey Exp $	*/
d58 1
a58 1
	diskprobe();  CKPT('6');
d61 4
a64 2
	apmprobe();   CKPT('7');
	printf("\n");
d66 1
a66 1
	CKPT('9');
@


1.21
log
@newer, better stuff; some parts by toby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.20 1997/10/18 05:13:17 mickey Exp $	*/
a40 1
int bootdev;
d59 2
d62 1
@


1.20
log
@correct
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.19 1997/10/17 18:46:58 weingart Exp $	*/
a40 1
struct BIOS_vars	BIOS_vars;
@


1.19
log
@Cleanup, make it all compile.
Move APM stuff to apmprobe.c
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.18 1997/10/17 15:03:27 weingart Exp $	*/
d44 1
a44 1
#ifdef DEBUG
a49 1

d61 1
a62 3

	apmprobe();   CKPT('7');

@


1.18
log
@Use BIOS to probe for memory map.
Probe for BIOS supported disks.
Use BIOS to get geometry for supported disks.

All in preparation to passing the whole thing
to the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.17 1997/10/12 21:14:23 mickey Exp $	*/
a33 24
/*
 * APM derived from: apm_init.S, LP (Laptop Package)
 * wich contained this:
 * Copyright (C) 1994 by HOSOKAWA, Tatsumi <hosokawa@@mt.cs.keio.ac.jp>
 *
 */
/*
 * If you want to know the specification of APM BIOS, see the following
 * documentations,
 *
 * [1] Intel Corporation and Microsoft Corporation, "Advanced Power 
 *     Management, The Next Generation, Version 1.0", Feb.,1992.
 *
 * [2] Intel Corporation and Microsoft Corporation, "Advanced Power
 *     Management (APM) BIOS Interface Specification Revision 1.1",
 *     Sep.,1993, Intel Order Number: 241704-001, Microsoft Part
 *     Number: 781-110-X01
 *
 * or contact
 *
 * APM Support Desk (Intel Corporation, US)
 *   TEL: (800)628-8686 
 *   FAX: (916)356-6100.
 */
a49 61
static __inline u_int
apm_check()
{
	register u_int detail;
	register u_int8_t f;
	__asm __volatile(DOINT(0x15) "\n\t"
			 "setc %b1\n\t"
			 "movzwl %%ax, %0\n\t"
			 "shll $16, %%ecx\n\t"
			 "orl %%ecx, %0"
			 : "=a" (detail), "=b" (f)
			 : "0" (APM_INSTCHECK), "1" (APM_DEV_APM_BIOS)
			 : "%ecx", "cc");
	if (f || BIOS_regs.biosr_bx != 0x504d /* "PM" */ ) {
#ifdef DEBUG
		printf("apm_check: %x, %x, %x\n",
		       f, BIOS_regs.biosr_bx, detail);
#endif
		return 0;
	} else
		return detail;
}

static __inline int
apm_disconnect()
{
	register u_int16_t rv;
	__asm __volatile(DOINT(0x15) "\n\t"
			 "setc %b0"
			 : "=a" (rv)
			 : "0" (APM_DISCONNECT), "b" (APM_DEV_APM_BIOS)
			 : "%ecx", "%edx", "cc");
	return (rv & 0xff)? rv >> 8 : 0;
}

static __inline int
apm_connect()
{
	register u_int16_t f;
	__asm __volatile (DOINT(0x15) "\n\t"
			  "setc %b1\n\t"
			  "movb %%ah, %h1\n\t"
			  "movzwl %%ax, %%eax\n\tshll $4, %0\n\t"
			  "movzwl %%cx, %%ecx\n\tshll $4, %2\n\t"
			  "movzwl %%dx, %%edx\n\tshll $4, %3\n\t"
			  : "=a" (BIOS_vars.bios_apm_code32_base),
			    "=b" (f),
			    "=c" (BIOS_vars.bios_apm_code16_base),
			    "=d" (BIOS_vars.bios_apm_data_base)
			  : "0" (APM_PROT32_CONNECT), "1" (APM_DEV_APM_BIOS)
			  : "cc");
	BIOS_vars.bios_apm_entry    = BIOS_regs.biosr_bx;
#if 0
	BIOS_vars.bios_apm_code_len = BIOS_regs.biosr_si & 0xffff;
	BIOS_vars.bios_apm_data_len = BIOS_regs.biosr_di & 0xffff;
#else
	BIOS_vars.bios_apm_code_len = 0x10000;
	BIOS_vars.bios_apm_data_len = 0x10000;
#endif
	return (f & 0xff)? f >> 8 : 0;
}
d64 1
a64 20
	if ((BIOS_vars.bios_apm_detail = apm_check())) {

		printf("apm0");
		apm_disconnect();
		if (apm_connect() != 0)
			printf(": connect error\n");
#ifdef DEBUG
		printf(": %x text=%x/%x[%x] data=%x[%x] @@ %x",
		       BIOS_vars.bios_apm_detail,
		       BIOS_vars.bios_apm_code32_base,
		       BIOS_vars.bios_apm_code16_base,
		       BIOS_vars.bios_apm_code_len,
		       BIOS_vars.bios_apm_data_base,
		       BIOS_vars.bios_apm_data_len,
		       BIOS_vars.bios_apm_entry);
#else
		printf(" detected");
#endif
		putchar('\n');
	}
@


1.17
log
@BOOT_APM bye, bye
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.16 1997/10/06 17:36:43 mickey Exp $	*/
d146 1
@


1.16
log
@better amp message
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.15 1997/09/29 03:48:03 mickey Exp $	*/
a73 1
#ifdef BOOT_APM
d98 2
a99 1
apm_disconnect() {
a134 1
#endif
a147 1
#ifdef BOOT_APM
d168 1
a168 1
#endif
@


1.15
log
@ according to the recent apm changes
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.14 1997/09/02 19:17:41 mickey Exp $	*/
d152 1
a152 1
		printf("apm: ");
d155 1
a155 1
			printf("connect error\n");
d157 1
a157 1
		printf("%x text=%x/%x[%x] data=%x[%x] @@ %x",
d166 1
a166 1
		printf("present");
@


1.14
log
@s/apm_init/apm_check/ in apm_check() debug printf
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.13 1997/08/31 07:54:17 mickey Exp $	*/
d86 1
a86 1
			 : "0" (APM_INSTCHECK), "1" (PMDV_APMBIOS)
d104 1
a104 1
			 : "0" (APM_DISCONNECTANY), "b" (PMDV_APMBIOS)
d119 1
a119 1
			  : "=a" (BIOS_vars.apm_code32_base),
d121 3
a123 3
			    "=c" (BIOS_vars.apm_code16_base),
			    "=d" (BIOS_vars.apm_data_base)
			  : "0" (APM_PROT32CONNECT), "1" (PMDV_APMBIOS)
d125 1
a125 1
	BIOS_vars.apm_entry    = BIOS_regs.biosr_bx;
d127 2
a128 2
	BIOS_vars.apm_code_len = BIOS_regs.biosr_si & 0xffff;
	BIOS_vars.apm_data_len = BIOS_regs.biosr_di & 0xffff;
d130 2
a131 2
	BIOS_vars.apm_code_len = 0x10000;
	BIOS_vars.apm_data_len = 0x10000;
d150 1
a150 1
	if ((BIOS_vars.apm_detail = apm_check())) {
d158 7
a164 4
		       BIOS_vars.apm_detail, BIOS_vars.apm_code32_base,
		       BIOS_vars.apm_code16_base, BIOS_vars.apm_code_len,
		       BIOS_vars.apm_data_base, BIOS_vars.apm_data_len,
		       BIOS_vars.apm_entry);
@


1.13
log
@consistency
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.12 1997/08/22 20:13:44 mickey Exp $	*/
d90 2
a91 1
		printf("apm_init: %x, %x, %x\n", f, BIOS_regs.biosr_bx, detail);
@


1.12
log
@put values into BIOS_vars so kernel will get 'em soon
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.11 1997/08/21 20:36:16 mickey Exp $	*/
d78 2
a79 2
	u_int detail;
	u_int8_t f;
d81 2
a82 1
			 "setc %b0\n\t"
d84 3
a86 4
			 "movzwl %%ax, %1\n\t"
			 "orl %%ecx, %1"
			 : "=d" (f), "=a" (detail)
			 : "1" (APM_INSTCHECK), "b" (PMDV_APMBIOS)
d103 1
a103 1
			 : "a" (APM_DISCONNECTANY), "b" (PMDV_APMBIOS)
d113 3
a115 3
			  "setc %b0\n\t"
			  "movb %%ah, %h0\n\t"
			  "movzwl %%ax, %%eax\n\tshll $4, %1\n\t"
d118 2
a119 2
			  : "=b" (f),
			    "=a" (BIOS_vars.apm_code32_base),
d122 1
a122 1
			  : "a" (APM_PROT32CONNECT), "b" (PMDV_APMBIOS)
@


1.11
log
@BIOS_regs in machdep.c, so they won't get lost w/o biosdev.c
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.10 1997/08/13 04:32:43 mickey Exp $	*/
a60 1
#undef APM_DISCONNECT /* XXX temp hack */
a63 1
struct apm_connect_info apminfo;
d65 2
d75 2
a76 2
static u_int
apm_init()
d103 1
a103 1
			 : "a" (APM_DISCONNECT), "b" (PMDV_APMBIOS)
d109 1
a109 1
apm_connect(struct apm_connect_info *apminfo)
d119 3
a121 3
			    "=a" (apminfo->apm_code32_seg_base),
			    "=c" (apminfo->apm_code16_seg_base),
			    "=d" (apminfo->apm_data_seg_base)
d124 1
a124 1
	apminfo->apm_entrypt         = BIOS_regs.biosr_bx;
d126 2
a127 2
	apminfo->apm_code32_seg_len  = BIOS_regs.biosr_si & 0xffff;
	apminfo->apm_data_seg_len    = BIOS_regs.biosr_di & 0xffff;
d129 2
a130 2
	apminfo->apm_code32_seg_len  = 0x10000;
	apminfo->apm_data_seg_len    = 0x10000;
d149 1
a149 1
	if ((apminfo.apm_detail = apm_init())) {
d153 1
a153 1
		if (apm_connect(&apminfo) != 0)
d157 4
a160 7
		       apminfo.apm_detail,
		       apminfo.apm_code32_seg_base,
		       apminfo.apm_code16_seg_base,
		       apminfo.apm_code32_seg_len,
		       apminfo.apm_data_seg_base,
		       apminfo.apm_data_seg_len,
		       apminfo.apm_entrypt);
@


1.10
log
@be honest about roots
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.9 1997/08/13 03:23:39 mickey Exp $	*/
d66 1
@


1.9
log
@inline calls
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.8 1997/08/12 21:51:30 mickey Exp $	*/
d34 6
a39 1

@


1.8
log
@new cons
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.7 1997/08/07 11:51:02 niklas Exp $	*/
d35 19
d55 2
a57 1
#include <machine/apmvar.h>
a61 3
void
machdep()
{
d63 3
a65 1
	*(u_int16_t*)0xb8148 = 0x4730;
d67 58
a124 3
	gateA20(1);
#ifdef DEBUG
	*(u_int16_t*)0xb8148 = 0x4731;
d126 2
a127 7
	debug_init();
#ifdef DEBUG
	*(u_int16_t*)0xb8148 = 0x4732;
#endif
	cninit();	/* call console init before doing any io */
#ifdef DEBUG
	*(u_int16_t*)0xb8148 = 0x4733;
d129 9
d139 1
a139 4
	memprobe();
#endif
#ifdef DEBUG
	*(u_int16_t*)0xb8148 = 0x4f34;
d141 1
d143 6
a148 31
	printf("apm_init: ");
	switch(apminfo.apm_detail = apm_init()) {
	case APMINI_CANTFIND:
		printf("not supported");
		break;

	case APMINI_NOT32BIT:
		printf("no 32 bit interface");
		break;

	case APMINI_CONNECTERR:
		printf("connect error");
		break;

	case APMINI_BADVER:
		printf("bad version");
		break;

	default:
		/* valid: detail, dx, bx */
		apminfo.apm_code32_seg_base = (BIOS_regs.biosr_ax & 0xffff)<< 4;
		apminfo.apm_code16_seg_base = (BIOS_regs.biosr_cx & 0xffff)<< 4;
		apminfo.apm_data_seg_base   = (BIOS_regs.biosr_dx & 0xffff)<< 4;
#if 0
		apminfo.apm_code32_seg_len  = BIOS_regs.biosr_si & 0xffff;
		apminfo.apm_data_seg_len    = BIOS_regs.biosr_di & 0xffff;
#else
		apminfo.apm_code32_seg_len  = 0x10000;
		apminfo.apm_data_seg_len    = 0x10000;
#endif
		apminfo.apm_entrypt         = BIOS_regs.biosr_bx;
d159 1
a159 1
		printf("APM detected");
d161 1
a162 1
	putchar('\n');
d164 1
@


1.7
log
@grammar
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.6 1997/08/05 12:58:20 mickey Exp $	*/
a35 1
#include <machine/tss.h>
d56 1
a56 1
	cons_probe();	/* call console init before doing any io */
@


1.6
log
@more debugs
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.5 1997/07/31 20:16:45 mickey Exp $	*/
d57 1
a57 1
	cons_probe();	/* call console init before any io */
@


1.5
log
@say smth about apm w/o debug
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.4 1997/07/28 23:04:59 mickey Exp $	*/
d50 3
d54 3
d58 3
d65 1
a65 1
	*(u_int16_t*)0xb8148 = 0x4f31;
@


1.4
log
@adopt for assym.h
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.3 1997/07/21 15:41:55 mickey Exp $	*/
d36 1
d99 2
@


1.3
log
@proper include
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.2 1997/07/18 01:03:55 mickey Exp $	*/
d57 1
a57 1
#if 0
d78 3
a80 3
		apminfo.apm_code32_seg_base = (BIOS_regs.br_ax & 0xffff) << 4;
		apminfo.apm_code16_seg_base = (BIOS_regs.br_cx & 0xffff) << 4;
		apminfo.apm_data_seg_base   = (BIOS_regs.br_dx & 0xffff) << 4;
d82 2
a83 2
		apminfo.apm_code32_seg_len  = BIOS_regs.br_si & 0xffff;
		apminfo.apm_data_seg_len    = BIOS_regs.br_di & 0xffff;
d88 1
a88 1
		apminfo.apm_entrypt         = BIOS_regs.br_bx;
@


1.2
log
@disable apm for the moment
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.1 1997/07/18 00:37:15 mickey Exp $	*/
d35 1
a35 1
#include <i386/stand/libsa/libsa.h>
@


1.1
log
@yet another small step towards MI boot
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
d101 1
@

