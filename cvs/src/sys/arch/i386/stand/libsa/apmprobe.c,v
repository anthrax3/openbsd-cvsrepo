head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.8
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.22
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.20
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.18
	OPENBSD_5_0:1.15.0.16
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.14
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.12
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.8
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.10
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.6
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.14.0.8
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.6
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.14
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.8.0.12
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.10
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2016.06.10.18.36.06;	author jcs;	state Exp;
branches;
next	1.18;
commitid	x57WcyDUhZLxQO5Z;

1.18
date	2014.07.08.13.31.30;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	JOXj8BjeGjpPx9mZ;

1.17
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.21.21.51.00;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.13.06.58.47;	author weingart;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.14.23.50.26;	author martin;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.11.17.41.23;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.09.19.12.12;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.20.22.11;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.20.20.22.58;	author weingart;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.29.21.49.36;	author mickey;	state Exp;
branches
	1.8.2.1
	1.8.12.1;
next	1.7;

1.7
date	99.08.25.00.54.19;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	99.05.09.15.09.05;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	98.04.18.07.39.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.02.24.22.06.44;	author weingart;	state Exp;
branches;
next	1.3;

1.3
date	97.11.30.21.51.36;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.10.22.23.34.36;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.10.17.18.46.53;	author weingart;	state Exp;
branches;
next	;

1.8.2.1
date	2003.03.27.23.26.56;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2004.02.19.10.48.43;	author niklas;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2004.06.05.23.09.01;	author niklas;	state Exp;
branches;
next	;

1.8.12.1
date	2002.10.29.00.28.04;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@fix some typos in comments

from Tom Cosgrove
@
text
@/*	$OpenBSD: apmprobe.c,v 1.18 2014/07/08 13:31:30 deraadt Exp $	*/

/*
 * Copyright (c) 1997-2000 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * APM derived from: apm_init.S, LP (Laptop Package)
 * which contained this:
 * Copyright (C) 1994 by HOSOKAWA, Tatsumi <hosokawa@@mt.cs.keio.ac.jp>
 *
 */
/*
 * If you want to know the specification of APM BIOS, see the following
 * documentations,
 *
 * [1] Intel Corporation and Microsoft Corporation, "Advanced Power
 *     Management, The Next Generation, Version 1.0", Feb.,1992.
 *
 * [2] Intel Corporation and Microsoft Corporation, "Advanced Power
 *     Management (APM) BIOS Interface Specification Revision 1.1",
 *     Sep.,1993, Intel Order Number: 241704-001, Microsoft Part
 *     Number: 781-110-X01
 *
 * or contact
 *
 * APM Support Desk (Intel Corporation, US)
 *   TEL: (800)628-8686
 *   FAX: (916)356-6100.
 */

#include <sys/param.h>
#include "libsa.h"
#include <stand/boot/bootarg.h>

#include <dev/isa/isareg.h>

#include <machine/apmvar.h>
#include <machine/biosvar.h>

#include "debug.h"

extern int debug;

static __inline u_int
apm_check(void)
{
	register u_int detail;
	register u_int8_t f;

	__asm volatile(DOINT(0x15) "\n\t"
	    "setc %b1\n\t"
	    "movzwl %%ax, %0\n\t"
	    "shll $16, %%ecx\n\t"
	    "orl %%ecx, %0"
	    : "=a" (detail), "=b" (f)
	    : "0" (APM_INSTCHECK), "1" (APM_DEV_APM_BIOS)
	    : "%ecx", "cc");

	if (f || BIOS_regs.biosr_bx != 0x504d /* "PM" */ ) {
#ifdef DEBUG
		if (debug)
			printf("apm_check: %x, %x, %x\n",
			    f, BIOS_regs.biosr_bx, detail);
#endif
		return 0;
	} else
		return detail;
}

static __inline int
apm_disconnect(void)
{
	register u_int16_t rv;

	__asm volatile(DOINT(0x15) "\n\t"
	    "setc %b0"
	    : "=a" (rv)
	    : "0" (APM_DISCONNECT), "b" (APM_DEV_APM_BIOS)
	    : "%ecx", "%edx", "cc");

	return ((rv & 0xff)? rv >> 8 : 0);
}

static __inline int
apm_connect(bios_apminfo_t *ai)
{
	register u_int16_t f;

	__asm volatile (DOINT(0x15) "\n\t"
	    "setc %b1\n\t"
	    "movb %%ah, %h1\n\t"
	    "movzwl %%ax, %%eax\n\tshll $4, %0\n\t"
	    "movzwl %%cx, %%ecx\n\tshll $4, %2\n\t"
	    "movzwl %%dx, %%edx\n\tshll $4, %3\n\t"
	    : "=a" (ai->apm_code32_base),
	      "=b" (f),
	      "=c" (ai->apm_code16_base),
	      "=d" (ai->apm_data_base)
	    : "0" (APM_PROT32_CONNECT), "1" (APM_DEV_APM_BIOS)
	    : "cc");

	if (f & 0xff)
		return (f >> 8);

	ai->apm_entry      = BIOS_regs.biosr_bx;
#if 0
	ai->apm_code_len   = BIOS_regs.biosr_si & 0xffff;
	ai->apm_code16_len = BIOS_regs.biosr_si & 0xffff;
	ai->apm_data_len   = BIOS_regs.biosr_di & 0xffff;
#else
	ai->apm_code_len   = 0xffff - (ai->apm_code32_base & 0xffff);
	ai->apm_code16_len = 0xffff - (ai->apm_code16_base & 0xffff);
	ai->apm_data_len   = 0xffff - (ai->apm_data_base & 0xffff);
#endif
	if (ai->apm_data_base < BOOTARG_OFF)
		ai->apm_data_len = PAGE_SIZE - (ai->apm_data_base & PAGE_MASK) - 1;

#ifdef DEBUG
	if (debug)
		printf("cs=%x:%x/%x:%x, ds=%x:%x\n",
		    ai->apm_code32_base, ai->apm_code_len,
		    ai->apm_code16_base, ai->apm_code16_len,
		    ai->apm_data_base,   ai->apm_data_len);
#endif
	/* inform apm bios about our driver version */
	__asm volatile (DOINT(0x15) "\n\t"
	    "setc %b1\n\t"
	    "movb %%ah, %h1"
	    : "=b" (f)
	    : "a" (APM_DRIVER_VERSION),
	      "0" (APM_DEV_APM_BIOS),
	      "c" (APM_VERSION)
	    : "cc");

	return 0;
}

static bios_apminfo_t ai;

void
apmprobe(void)
{
	if ((ai.apm_detail = apm_check())) {

		apm_disconnect();

		if (apm_connect(&ai) != 0) {
#ifdef DEBUG
			printf("\napm: connect error\n");
#endif
			return;
		}
#ifdef DEBUG
		if (debug)
			printf("apm[%x cs=%x[%x]/%x[%x] ds=%x[%x] @@ %x]",
			    ai.apm_detail,
			    ai.apm_code32_base, ai.apm_code_len,
			    ai.apm_code16_base, ai.apm_code16_len,
			    ai.apm_data_base, ai.apm_data_len,
			    ai.apm_entry);
		else
			printf(" apm");
#else
		printf(" apm");
#endif
		addbootarg(BOOTARG_APMINFO, sizeof(ai), &ai);
	}
}

#define round_page(x)   (((x) + PAGE_MASK) & ~PAGE_MASK)
#define trunc_page(x)   ((x) & ~PAGE_MASK)

void
apmfixmem(void)
{
#ifdef DEBUG
	printf("apmremove (%d)", ai.apm_detail);
#endif
	if (ai.apm_detail)
		mem_delete(trunc_page(ai.apm_data_base),
		    round_page(ai.apm_data_base + ai.apm_data_len));
}
@


1.18
log
@This is bootblock code.  Don't pull in uvm header files to deal with
page rounding!  Disgusting.  Instead, define local copies of those
macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.17 2014/03/29 18:09:29 guenther Exp $	*/
d30 1
a30 1
 * wich contained this:
@


1.17
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.16 2013/03/21 21:51:00 deraadt Exp $	*/
a56 2
#include <uvm/uvm_extern.h>

a61 2
#define vm_page_size 4096

d191 3
@


1.16
log
@NBPG -> PAGE_SIZE, PGSHIFT -> PAGE_SHIFT, PGOFSET -> PAGE_MASK
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.15 2007/09/13 06:58:47 weingart Exp $	*/
d76 1
a76 1
	__asm __volatile(DOINT(0x15) "\n\t"
d101 1
a101 1
	__asm __volatile(DOINT(0x15) "\n\t"
d115 1
a115 1
	__asm __volatile (DOINT(0x15) "\n\t"
d152 1
a152 1
	__asm __volatile (DOINT(0x15) "\n\t"
@


1.15
log
@Don't bother bitching if APM does not exist.  Pleanty
enough systems today do not have apm.  Also, the existance
of apm is given on the probe line, absence means it ain't
there.
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.14 2005/11/14 23:50:26 martin Exp $	*/
d142 1
a142 1
		ai->apm_data_len = NBPG - (ai->apm_data_base & PGOFSET) - 1;
@


1.14
log
@convert and remove the last traces of i386_round_page(),
i386_trunc_page(), i386_btop() and i386_ptob()
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.13 2004/03/11 17:41:23 tom Exp $	*/
d174 1
d176 1
@


1.13
log
@If apm_connect() fails, don't try to pass the bios_apminfo_t structure
to the kernel, since it won't have been filled in, and since we can't
make APM calls if we don't connect (per spec).  Also tidy up the error
message, to make it clear that it's an APM error.

Problem found, and fix tested, by jmc@@

ok millert@@, weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.12 2004/03/09 19:12:12 tom Exp $	*/
d57 2
d64 2
d201 2
a202 2
		mem_delete(i386_trunc_page(ai.apm_data_base),
		    i386_round_page(ai.apm_data_base + ai.apm_data_len));
@


1.12
log
@Spacing and KNF.  Partly from Joris Vink <nimadeus at pandora dot be>.

ok henning@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.11 2003/08/11 06:23:09 deraadt Exp $	*/
d169 4
a172 2
		if (apm_connect(&ai) != 0)
			printf(": connect error\n");
@


1.11
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.10 2003/06/03 20:22:11 mickey Exp $	*/
d38 1
a38 1
 * [1] Intel Corporation and Microsoft Corporation, "Advanced Power 
d49 1
a49 1
 *   TEL: (800)628-8686 
d71 1
d73 8
a80 7
			 "setc %b1\n\t"
			 "movzwl %%ax, %0\n\t"
			 "shll $16, %%ecx\n\t"
			 "orl %%ecx, %0"
			 : "=a" (detail), "=b" (f)
			 : "0" (APM_INSTCHECK), "1" (APM_DEV_APM_BIOS)
			 : "%ecx", "cc");
d96 1
d98 6
a103 5
			 "setc %b0"
			 : "=a" (rv)
			 : "0" (APM_DISCONNECT), "b" (APM_DEV_APM_BIOS)
			 : "%ecx", "%edx", "cc");
	return (rv & 0xff)? rv >> 8 : 0;
d110 1
d112 12
a123 11
			  "setc %b1\n\t"
			  "movb %%ah, %h1\n\t"
			  "movzwl %%ax, %%eax\n\tshll $4, %0\n\t"
			  "movzwl %%cx, %%ecx\n\tshll $4, %2\n\t"
			  "movzwl %%dx, %%edx\n\tshll $4, %3\n\t"
			  : "=a" (ai->apm_code32_base),
			    "=b" (f),
			    "=c" (ai->apm_code16_base),
			    "=d" (ai->apm_data_base)
			  : "0" (APM_PROT32_CONNECT), "1" (APM_DEV_APM_BIOS)
			  : "cc");
d125 1
a125 1
		return f >> 8;
d138 1
a138 2
		ai->apm_data_len =
		    NBPG - (ai->apm_data_base & PGOFSET) - 1;
d142 4
a145 4
		printf ("cs=%x:%x/%x:%x, ds=%x:%x\n",
			ai->apm_code32_base, ai->apm_code_len,
			ai->apm_code16_base, ai->apm_code16_len,
			ai->apm_data_base,   ai->apm_data_len);
d149 7
a155 7
			  "setc %b1\n\t"
			  "movb %%ah, %h1"
			  : "=b" (f)
			  : "a" (APM_DRIVER_VERSION),
			    "0" (APM_DEV_APM_BIOS),
			    "c" (APM_VERSION)
			  : "cc");
d168 1
d174 5
a178 5
			       ai.apm_detail,
			       ai.apm_code32_base, ai.apm_code_len,
			       ai.apm_code16_base, ai.apm_code16_len,
			       ai.apm_data_base, ai.apm_data_len,
			       ai.apm_entry);
d196 1
a196 1
			i386_round_page(ai.apm_data_base + ai.apm_data_len));
a197 1

@


1.10
log
@three four kills
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.9 2002/06/20 20:22:58 weingart Exp $	*/
d67 1
a67 1
apm_check()
d91 1
a91 1
apm_disconnect()
d103 1
a103 2
apm_connect(ai)
	bios_apminfo_t *ai;
d158 1
a158 1
apmprobe()
@


1.9
log
@Fix 4GB memory probing and other memory probing issues.
Outstanding issue is with Compaq 16MB detection problem.
ok deraadt@@, and various people from the 'net.
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.8 2000/01/29 21:49:36 mickey Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@this makes some rough and tough calculations on apm
segment addresses, should be installed (some bioses do
report weird values some times)
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.7 1999/08/25 00:54:19 mickey Exp $	*/
d189 1
a189 1
apmcheck()
d192 1
a192 1
	printf("apm");
d194 3
a196 2
	mem_delete(i386_trunc_page(ai.apm_data_base),
		   i386_round_page(ai.apm_data_base + ai.apm_data_len));
@


1.8.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d189 1
a189 1
apmfixmem(void)
d192 1
a192 1
	printf("apmremove (%d)", ai.apm_detail);
d194 2
a195 3
	if (ai.apm_detail)
		mem_delete(i386_trunc_page(ai.apm_data_base),
			i386_round_page(ai.apm_data_base + ai.apm_data_len));
@


1.8.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.8.2.1 2003/03/27 23:26:56 niklas Exp $	*/
d15 5
@


1.8.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
a67 1
apm_check(void)
d91 1
a91 1
apm_disconnect(void)
d103 2
a104 1
apm_connect(bios_apminfo_t *ai)
d159 1
a159 1
apmprobe(void)
@


1.8.2.4
log
@Merge with the trunk
@
text
@d38 1
a38 1
 * [1] Intel Corporation and Microsoft Corporation, "Advanced Power
d49 1
a49 1
 *   TEL: (800)628-8686
a70 1

d72 7
a78 8
	    "setc %b1\n\t"
	    "movzwl %%ax, %0\n\t"
	    "shll $16, %%ecx\n\t"
	    "orl %%ecx, %0"
	    : "=a" (detail), "=b" (f)
	    : "0" (APM_INSTCHECK), "1" (APM_DEV_APM_BIOS)
	    : "%ecx", "cc");

a93 1

d95 5
a99 6
	    "setc %b0"
	    : "=a" (rv)
	    : "0" (APM_DISCONNECT), "b" (APM_DEV_APM_BIOS)
	    : "%ecx", "%edx", "cc");

	return ((rv & 0xff)? rv >> 8 : 0);
a105 1

d107 11
a117 12
	    "setc %b1\n\t"
	    "movb %%ah, %h1\n\t"
	    "movzwl %%ax, %%eax\n\tshll $4, %0\n\t"
	    "movzwl %%cx, %%ecx\n\tshll $4, %2\n\t"
	    "movzwl %%dx, %%edx\n\tshll $4, %3\n\t"
	    : "=a" (ai->apm_code32_base),
	      "=b" (f),
	      "=c" (ai->apm_code16_base),
	      "=d" (ai->apm_data_base)
	    : "0" (APM_PROT32_CONNECT), "1" (APM_DEV_APM_BIOS)
	    : "cc");

d119 1
a119 1
		return (f >> 8);
d132 2
a133 1
		ai->apm_data_len = NBPG - (ai->apm_data_base & PGOFSET) - 1;
d137 4
a140 4
		printf("cs=%x:%x/%x:%x, ds=%x:%x\n",
		    ai->apm_code32_base, ai->apm_code_len,
		    ai->apm_code16_base, ai->apm_code16_len,
		    ai->apm_data_base,   ai->apm_data_len);
d144 7
a150 7
	    "setc %b1\n\t"
	    "movb %%ah, %h1"
	    : "=b" (f)
	    : "a" (APM_DRIVER_VERSION),
	      "0" (APM_DEV_APM_BIOS),
	      "c" (APM_VERSION)
	    : "cc");
d163 2
a164 5

		if (apm_connect(&ai) != 0) {
			printf("\napm: connect error\n");
			return;
		}
d168 5
a172 5
			    ai.apm_detail,
			    ai.apm_code32_base, ai.apm_code_len,
			    ai.apm_code16_base, ai.apm_code16_len,
			    ai.apm_data_base, ai.apm_data_len,
			    ai.apm_entry);
d190 1
a190 1
		    i386_round_page(ai.apm_data_base + ai.apm_data_len));
d192 1
@


1.8.12.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.8 2000/01/29 21:49:36 mickey Exp $	*/
d189 1
a189 1
apmfixmem(void)
d192 1
a192 1
	printf("apmremove (%d)", ai.apm_detail);
d194 2
a195 3
	if (ai.apm_detail)
		mem_delete(i386_trunc_page(ai.apm_data_base),
			i386_round_page(ai.apm_data_base + ai.apm_data_len));
@


1.7
log
@give better support to the bios memory maps.
provide memory maps editing through the machine memory command.
rearrange probing in machdep, so it provides less output,
also giving a shot for apm to fix the memory maps.
changes to kernel are minimal, only that is required due
to the api version bits addition and such cosmetic changes.
tested on all critical kernel,boot combinations; niklas@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.6 1999/05/09 15:09:05 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997-1999 Michael Shalayeff
d128 13
a140 3
	ai->apm_code_len   = BIOS_regs.biosr_si;
	ai->apm_code16_len = BIOS_regs.biosr_si;
	ai->apm_data_len   = BIOS_regs.biosr_di;
d143 1
a143 1
		printf ("cs=%x:%x, ds=%x:%x\n",
d145 1
a147 4
	ai->apm_code_len   &= 0xffff;
	ai->apm_code16_len &= 0xffff;
	ai->apm_data_len   &= 0xffff;

a156 17

	ai->apm_code_len   = 0x10000 - (ai->apm_code32_base & 0xffff);
	ai->apm_code16_len = 0x10000 - (ai->apm_code16_base & 0xffff);

	/*
	 * this is a hack to make all those weird boxes keeping
	 * apm data in low mem work.
	 */
	if (!ai->apm_data_len ||
	    ai->apm_data_base + ai->apm_data_len > IOM_END ||
	    (ai->apm_data_base < IOM_BEGIN &&
	     ai->apm_data_base + ai->apm_data_len > IOM_BEGIN))
		ai->apm_data_len =
		    0x10000 - (ai->apm_data_base & 0xffff);
	if (ai->apm_data_base < BOOTARG_OFF)
		ai->apm_data_len =
		    NBPG - (ai->apm_data_base & PGOFSET);
@


1.6
log
@provide suport for an apm data segemnt in the lower memory bios
data segment area, also calculate the apm segment lenghts.
niklas@@ - ok
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.5 1998/04/18 07:39:40 deraadt Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997 Michael Shalayeff
d17 1
a17 1
 *	This product includes software developed by Michael Shalayeff.
d21 11
a31 12
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
d127 26
a152 3
	ai->apm_entry    = BIOS_regs.biosr_bx;
	ai->apm_data_len = 0x10000;
	ai->apm_code_len = 0x10000 - (ai->apm_code16_base & 0xffff);
d171 2
a175 2
	bios_apminfo_t ai;

d183 4
a186 3
			printf(": %x text=%x/%x[%x] data=%x[%x] @@ %x",
			       ai.apm_detail, ai.apm_code32_base,
			       ai.apm_code16_base, ai.apm_code_len,
d196 10
@


1.5
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d59 1
d62 3
d67 1
d125 3
a128 5
#if 0
	ai->apm_code_len = BIOS_regs.biosr_si & 0xffff;
	ai->apm_data_len = BIOS_regs.biosr_di & 0xffff;
#else
	ai->apm_code_len = 0x10000;
d130 17
a146 2
#endif
	return (f & 0xff)? f >> 8 : 0;
@


1.4
log
@Changes/updates to /boot stuff.  More to come.
Fixes many divide by zero and pointer bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.3 1997/11/30 21:51:36 mickey Exp $	*/
d65 2
d82 3
a84 2
		printf("apm_check: %x, %x, %x\n",
		       f, BIOS_regs.biosr_bx, detail);
d142 8
a149 5
		printf(": %x text=%x/%x[%x] data=%x[%x] @@ %x",
		       ai.apm_detail, ai.apm_code32_base,
		       ai.apm_code16_base, ai.apm_code_len,
		       ai.apm_data_base, ai.apm_data_len,
		       ai.apm_entry);
@


1.3
log
@big diskinfo changes from toby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.2 1997/10/22 23:34:36 mickey Exp $	*/
a146 1
		putchar('\n');
@


1.2
log
@newer, better stuff; some parts by toby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apmprobe.c,v 1.1 1997/10/17 18:46:53 weingart Exp $	*/
a134 1
		printf("apm0");
d145 1
a145 1
		printf(" detected");
@


1.1
log
@Cleanup, make it all compile.
Move APM stuff to apmprobe.c
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a64 2
extern struct BIOS_vars	BIOS_vars;

d101 2
a102 1
apm_connect()
d111 1
a111 1
			  : "=a" (BIOS_vars.bios_apm_code32_base),
d113 2
a114 2
			    "=c" (BIOS_vars.bios_apm_code16_base),
			    "=d" (BIOS_vars.bios_apm_data_base)
d117 1
a117 1
	BIOS_vars.bios_apm_entry    = BIOS_regs.biosr_bx;
d119 2
a120 2
	BIOS_vars.bios_apm_code_len = BIOS_regs.biosr_si & 0xffff;
	BIOS_vars.bios_apm_data_len = BIOS_regs.biosr_di & 0xffff;
d122 2
a123 2
	BIOS_vars.bios_apm_code_len = 0x10000;
	BIOS_vars.bios_apm_data_len = 0x10000;
d131 3
a133 1
	if ((BIOS_vars.bios_apm_detail = apm_check())) {
d137 1
a137 1
		if (apm_connect() != 0)
d141 4
a144 7
		       BIOS_vars.bios_apm_detail,
		       BIOS_vars.bios_apm_code32_base,
		       BIOS_vars.bios_apm_code16_base,
		       BIOS_vars.bios_apm_code_len,
		       BIOS_vars.bios_apm_data_base,
		       BIOS_vars.bios_apm_data_len,
		       BIOS_vars.bios_apm_entry);
d149 1
@

