head	1.1;
access;
symbols
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	UBC_SYNC_A:1.1
	UBC_SYNC_B:1.1
	SMP:1.1.0.4
	libsa:1.1.2.1;
locks; strict;
comment	@# @;


1.1
date	96.10.16.08.51.18;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.10.16.08.51.18;	author mickey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.10.29.13.40.27;	author mickey;	state dead;
branches;
next	;


desc
@@


1.1
log
@file machdep.S was initially added on branch new.
@
text
@@


1.1.2.1
log
@make a ral stand
@
text
@a0 42

#include <machine/asm.h>

/*
 * machdep_start(phyaddr)
 *	start the program on protected mode where phyaddr is the entry point
 */
ENTRY(machdep_start)
	pushl	%ebp
	movl	%esp, %ebp

	# get things we need into registers
	movl	8(%ebp), %ecx		# entry offset 
	movl	12(%ebp), %eax		# &argv

	# make a new stack at 0:0x90000 (big segs)
	movl	$0x10, %ebx
	movw	%bx, %ss
	movl	$0x90000, %ebx
	movl	%ebx, %esp
	
	# push some number of args onto the stack
	pushl	28(%eax)		# argv[7] = cnvmem
	pushl	32(%eax)		# argv[8] = extmem
	pushl	16(%eax)		# argv[4] = esym
	pushl	$0			# nominally a cyl offset in the boot.
	pushl	8(%eax)			# argv[2] = bootdev
	pushl	4(%eax)			# argv[1] = howto
	pushl	$0			# dummy 'return' address
	
	# push on our entry address
	pushl	$0x8			# segment
	pushl	%ecx

	# convert over the other data segs
	movl	$0x10, %ebx
	movl	%bx, %ds
	movl	%bx, %es

	# convert the PC (and code seg)
	lret

@


1.1.2.2
log
@moved to libsa
@
text
@@
