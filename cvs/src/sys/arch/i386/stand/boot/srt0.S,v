head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.16
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.12
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.14
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.6
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.10
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.8
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.14.0.36
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.34
	OPENBSD_5_0:1.14.0.32
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.30
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.28
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.24
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.26
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.22
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.20
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.18
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.16
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.10.0.24
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.22
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.20
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.10.0.18
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.16
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.14
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.12
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.10
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.8
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.6
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7;
locks; strict;
comment	@# @;


1.16
date	2012.10.12.15.00.33;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.09.11.39.57;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.22.09.18.25;	author grange;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.27.05.13.19;	author weingart;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.20.22.11;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.17.03.43.18;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	98.05.14.20.59.12;	author mickey;	state Exp;
branches
	1.10.8.1
	1.10.18.1;
next	1.9;

1.9
date	97.07.18.00.52.09;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.05.29.05.32.06;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.04.18.01.30.03;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.04.11.19.12.58;	author weingart;	state Exp;
branches;
next	1.5;

1.5
date	97.04.07.01.26.00;	author weingart;	state Exp;
branches;
next	1.4;

1.4
date	97.04.05.18.56.19;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.04.04.04.47.46;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.23.06.23;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.31.03.12.05;	author weingart;	state Exp;
branches;
next	;

1.10.8.1
date	2003.05.13.19.42.09;	author ho;	state Exp;
branches;
next	1.10.8.2;

1.10.8.2
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.10.8.3;

1.10.8.3
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	;

1.10.18.1
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Force 16 byte alignment in boot(8) srt0.S, since this is more likely to get
the required file offset (0x120) for the .text segment.
@
text
@/*	$OpenBSD: srt0.S,v 1.15 2012/10/09 11:39:57 jsing Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#include <machine/asm.h>
#include <assym.h>

#define BOOTSTACK 0xfffc

	.globl	_C_LABEL(end)
	.globl	_C_LABEL(edata)
	.globl	_C_LABEL(boot)
	.globl	_C_LABEL(_rtt)
	.globl	_C_LABEL(bios_bootdev)
	.globl	_ASM_LABEL(pmm_init)
	.globl	Gdtr

	.text
	.align	16
	.code16
	.globl	_start
_start:
	popl %eax
	cmpl $BOOTMAGIC, %eax
	je	1f
#ifdef DEBUG
	movl	$0xb80a0, %ebx
	addr32 movl $0x07420742, (%ebx)
#endif
1:
	popl %edx
	cli
	pushl	%cs
	popl	%ds
	addr32 data32 lgdt	(Gdtr - LINKADDR)
	movl	%cr0, %eax
	orl $CR0_PE, %eax
	data32 movl %eax, %cr0
	data32 ljmp $8, $1f
1:
	.code32
	movl	$0x10,%eax
	mov	%ax,%ds
	mov	%ax,%ss
	mov	%ax,%es
	mov	%ax,%fs
	mov	%ax,%gs
	movl	$BOOTSTACK,%esp
	pushl	%edx
	movl	%edx, _C_LABEL(bios_bootdev)

	/* Now do it all */
#ifdef DEBUG
	movl	$0xb80a4, %ebx
	movl	$0x07520752, (%ebx)
#endif
	/* zero .bss */
	xorl	%eax, %eax
	movl	$_C_LABEL(end), %ecx
	subl	$_C_LABEL(edata),%ecx
	movl	$_C_LABEL(edata), %edi
	cld
	rep;	stosb

	call	_ASM_LABEL(pmm_init)
	call	_C_LABEL(boot)

	jmp	_C_LABEL(_rtt)
@


1.15
log
@Dynamically build the Interrupt Descriptor Table (IDT), instead of using
a static table. This allows the IDT to be placed in .bss and avoids the
"relocation truncated" errors that result from the linker trying to put
a 32-bit address into a 16-bit hole.

With input from Marco Peereboom.

ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.14 2003/11/22 09:18:25 grange Exp $	*/
d43 1
@


1.14
log
@Unbreak compiling with DEBUG.
Diff from mickey@@, ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.13 2003/06/27 05:13:19 weingart Exp $	*/
a75 1
	call	_ASM_LABEL(pmm_init)
d88 1
a91 1

@


1.13
log
@Fix hang in EDD detection routine.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.13 2003/06/23 04:27:51 deraadt Exp $	*/
d51 1
a51 1
	movl	$0x07420742, (%ebx)
@


1.12
log
@three four kills
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.11 2003/04/17 03:43:18 drahn Exp $	*/
d38 1
d73 1
@


1.11
log
@i386 ELF bootloader. developed with weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.10 1998/05/14 20:59:12 mickey Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@change debug poke colors
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.9 1997/07/18 00:52:09 mickey Exp $	*/
d35 3
d44 1
d47 6
a52 2
	.globl	start
start:
d57 22
a83 8
	popl	%eax
	cmpl	$BOOTMAGIC, %eax
	je	1f
#ifdef DEBUG
	movl	$0xb80a8, %ebx
	movl	$0xcf41cf4d, (%ebx)
#endif
1:
@


1.10.18.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a34 3
#include <assym.h>

#define BOOTSTACK 0xfffc
a40 1
	.globl	Gdtr
d43 2
a44 6
	.code16
	.globl	_start
_start:
	popl %eax
	cmpl $BOOTMAGIC, %eax
	je	1f
a48 22
1:
	popl %edx
	cli
	pushl	%cs
	popl	%ds
	addr32 data32 lgdt	(Gdtr - LINKADDR)
	movl	%cr0, %eax
	orl $CR0_PE, %eax
	data32 movl %eax, %cr0
	data32 ljmp $8, $1f
1:
	.code32
	movl	$0x10,%eax
	mov	%ax,%ds
	mov	%ax,%ss
	mov	%ax,%es
	mov	%ax,%fs
	mov	%ax,%gs
	movl	$BOOTSTACK,%esp
	pushl	%edx

	/* Now do it all */
d54 8
@


1.10.8.1
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.10 1998/05/14 20:59:12 mickey Exp $	*/
a34 3
#include <assym.h>

#define BOOTSTACK 0xfffc
a40 1
	.globl	Gdtr
d43 2
a44 6
	.code16
	.globl	_start
_start:
	popl %eax
	cmpl $BOOTMAGIC, %eax
	je	1f
a48 22
1:
	popl %edx
	cli
	pushl	%cs
	popl	%ds
	addr32 data32 lgdt	(Gdtr - LINKADDR)
	movl	%cr0, %eax
	orl $CR0_PE, %eax
	data32 movl %eax, %cr0
	data32 ljmp $8, $1f
1:
	.code32
	movl	$0x10,%eax
	mov	%ax,%ds
	mov	%ax,%ss
	mov	%ax,%es
	mov	%ax,%fs
	mov	%ax,%gs
	movl	$BOOTSTACK,%esp
	pushl	%edx

	/* Now do it all */
d54 8
@


1.10.8.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.10.8.1 2003/05/13 19:42:09 ho Exp $	*/
d15 5
@


1.10.8.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a37 1
	.globl	_C_LABEL(bios_bootdev)
d50 1
a50 1
	addr32 movl $0x07420742, (%ebx)
a71 1
	movl	%edx, _C_LABEL(bios_bootdev)
@


1.9
log
@most of the stuff is no in libsa, very tiny srt0
boot calls machdep()
move to .bss again (;
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.8 1997/05/29 05:32:06 mickey Exp $	*/
d59 1
a59 1
	movl	$0x4741474d, (%ebx)
@


1.8
log
@better style, move pmm init code completely into gidt.S
@
text
@d1 1
a1 2
/*	$OpenBSD: srt0.S,v 1.7 1997/04/18 01:30:03 mickey Exp $	*/
/*	$NetBSD: srt0.c,v 1.3 1994/10/27 04:21:59 cgd Exp $	*/
d3 2
a4 2
/*-
 * Copyright (c) 1990 The Regents of the University of California.
a6 3
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
d17 3
a19 5
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d21 3
a23 3
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
a32 1
 *	@@(#)srt0.c	5.3 (Berkeley) 4/28/91
a33 1

a34 4
#include <machine/psl.h>
#define _LOCORE
#include <machine/segments.h>
#undef _LOCORE
d36 5
a40 4
	.globl	_end
	.globl	_edata
	.globl	_boot
	.globl	__rtt
d43 2
a44 2
	.globl	start_boot
start_boot:
d49 1
a49 2
	call	pmm_init	/* init protected moded memory management */

a53 1

d64 3
a66 3
	movl	$_end, %ecx
	subl	$_edata,%ecx
	movl	$_edata, %edi
d70 1
a70 46
	call	_boot

	.data
	.align 3
_Idtr_reset:
	.word	0
	.long	0

	.text
__rtt:
#ifdef DEBUG
	movl	$0xb8000, %ebx
	movl	$0x4f514f51, (%ebx)
#endif
	movw	$0x1234, %ax
	movw	%ax, 0x472	# warm boot

	/* Try to use the KBD to reboot system */
	movl	$0xfe, %eax
	movl	$0x64, %edx
	outb	%al, %dx
	movl	$1, %eax
	pushl	%eax
	call	_C_LABEL(usleep)
	popl	%eax

	movl	$0xfe, %eax
	movl	$0x64, %edx
	outb	%al, %dx
	movl	$1, %eax
	pushl	%eax
	call	_C_LABEL(usleep)
	popl	%eax

#ifdef DEBUG
	movl	$0xb8000, %ebx
	movl	$0x07310731, (%ebx)
#endif

	/* Try to cause a tripple fault... */
	lidt    _Idtr_reset
	xorl	%eax, %eax
	divl	%eax, %eax

	/* Again... */
	int $0x8
d72 1
a72 3
	/* Again... */
	movl	$0, %esp	# segment violation
	ret
@


1.7
log
@oops...
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.6 1997/04/11 19:12:58 weingart Exp $	*/
a51 4
	.globl	_Gdtr
	.globl	_Idtr_prot
	.globl  _Idtr_reset
	.globl	idt_init
d60 1
a60 14
	/* reload new gdt */
	lgdt	_Gdtr
	ljmp	$8, $1f
1:	
	movw	$0x10, %ax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es
	movl	%ax, %fs
	movl	%ax, %gs
	/* init idt */
	call	idt_init
	/* load idtr for interrupts */
	lidt	_Idtr_prot
d85 7
@


1.6
log
@Works with .gz kernels now
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.5 1997/04/07 01:26:00 weingart Exp $	*/
d55 1
a55 1
	.globl	_codeseg
d74 2
@


1.5
log
@Reboot stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.4 1997/04/05 18:56:19 mickey Exp $	*/
d108 1
d129 2
d132 4
d137 2
@


1.4
log
@put gdt & idt in the separate file.
print trapno in dump_regs.
no more NO_IDTR.
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.3 1997/04/04 04:47:46 mickey Exp $	*/
d42 1
d54 1
a103 1
	hlt
a104 1
	movl	$-7, %eax
d107 23
@


1.3
log
@dump regs w/ NMI (int 2)
more debugging is on the way
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.2 1997/03/31 23:06:23 mickey Exp $	*/
a51 1
#ifndef NO_IDTR
a52 1
#endif
d72 1
a72 2
#ifndef NO_IDTR
	/* load idtr for debugger */
a73 1
#endif
a109 32
	.data

	.align	3
gdt:
null:		/* 0x00 : null */
	.space	8
		/* 0x08 : flat code */
	.word	0xFFFF			# lolimit
	.word	0			# lobase
	.byte	0			# midbase
	.byte	SDT_MEMERAC | 0 | 0x80	# RWXAC, dpl = 0, present
	.byte	0xf | 0 | 0x40 | 0x80	# hilimit, xx, 32bit, 4k granularity
	.byte	0			# hibase
		/* 0x10 : flat data */
	.word	0xFFFF			# lolimit
	.word	0			# lobase
	.byte	0			# midbase
	.byte	SDT_MEMRWA | 0 | 0x80	# RWA, dpl = 0, present
	.byte	0xf | 0 | 0x40 | 0x80	# hilimit, xx, 32bit, 4k granularity
	.byte	0			# hibase
		/* 0x18 : 16 bit code */
	.word	0xFFFF			# lolimit
	.word	0			# lobase
	.byte	0			# midbase
	.byte	SDT_MEMERAC | 0 | 0x80	# RWXAC, dpl = 0, present
	.byte	0xf | 0 | 0 | 0		# hilimit, xx, 16bit, byte granularity
	.byte	0			# hibase
_Gdtr:	.word	. - gdt - 1
	.long	gdt
	.word	0

_codeseg:	.long	0
@


1.2
log
@commit all my mods to the last imported libsa stuff....
including:
- disklabel support;
- better boot cmd line
- smaller size (using some compilation switches ;)
- no more relocations in /boot, it's loaded in the place;
- better disk performance (maybe were already in there)
- installboot -n does not require write perms for device
- more debugs
- missing parts in libsa (such as cd9660 and so)
- i don't like 2 files for exec_i386 (sorry, toby, let's discuss maybe?)
tricks and tails:
- joined .text and .data (saves you a page)
- prot mode switching still in biosboot (it's freezed for awhile)
- biosdisk internals changed
- biosdev is not passed propery to the kernel (i'll fix it soon)
- sure i missed smth here to note (use the source, Luke!)
@
text
@d1 1
a1 1
/*	$OpenBSD: srt0.S,v 1.1.2.2 1996/12/03 13:13:51 mickey Exp $	*/
d64 1
a64 1

d74 4
d117 3
a119 2
gdt:		/* 0x00 : null */
	.long	0, 0
d141 1
a141 1
_Gdtr:	.word	. - gdt
@


1.1
log
@Initial /boot stuff (from Mickey)
@
text
@a41 7
/*
 * Startup code for standalone system
 * Non-relocating version -- for programs which are loaded by boot
 * Relocating version for boot
 * Small relocating version for "micro" boot
 */

d51 58
d111 1
a111 4
	.globl	_Gdtr
	.align	2
_Gdtr:	.word	4 * 8 - 1
	.long	2f
d113 1
a113 1
2:		/* 0x00 : null */
d133 2
a134 2
	.byte	SDT_MEMERC | 0 | 0x80	# RWXAC, dpl = 0, present
	.byte	0x0 | 0 | 0 | 0		# hilimit, xx, 16bit, byte granularity
d136 3
a139 4
	.globl	_codeseg
	.globl	_bootdev
	.globl	_boothowto
	.globl	_cyloffset
a140 165
_bootdev:	.long	0
_boothowto:	.long	0
_cyloffset:	.long	0
_esym:		.long	0

	.text
text_start:

#define	NOP	inb $0x84,%al ; inb $0x84,%al

	.globl	start_boot

start_boot:
	pushl	%ebp
	movl	%esp, %ebp

#ifdef	REL
	/* relocate code+data */
	call	1f
1:	popl	%esi
	subl	$1b, %esi
	addl	$text_start, %esi	/* %esi = %eip - (1b - text_start) */
	subl	$0x20, %esi			/* XXX - Fudge factor for header */
	movl	$REL, %edi
	movl	$_edata, %ecx
	subl	$text_start, %ecx
	shrl	$2, %ecx
	incl	%ecx
	cld
	rep
	movsl
#endif /* REL */

	lgdt	_Gdtr

	/* The following should *not* be moved before the lgdt.
	 * Trust me, bad things will happen!
	 * Start executing from relocated code
	 */
	movl	$0x10, %eax
	movl	%eax, %ds
	movl	%eax, %es
	movl	%eax, %fs
	movl	%eax, %gs
	movl	%eax, %ss
	ljmp	$0x8,$docs
docs:
	nop

	/* XXX - I don't know if the following is right */
	movl    8(%ebp), %eax
	movl	%eax, _boothowto
	movl    12(%ebp),%eax
	movl    %eax, _bootdev
	movl    16(%ebp),%eax
	movl    %eax, _cyloffset
	movl    20(%ebp),%eax
	movl    %eax, _esym

	/* save old stack state */
	movl	%esp,savearea
	movl	%ebp,savearea+4

	/* setup stack pointer */
#ifdef	REL
	movl	$0xfffc, %esp
#else	
	movl	$_end, %eax
	addl	$10000, %eax
	movl	%eax, %esp
#endif

	/* clear memory as needed */
	movl	%esp,%esi
	movl	$_end, %eax
	subl	$_edata,%eax
	pushl	%eax
	pushl	$0
	pushl	$_edata
	call	_memset
	#call	_kbdreset	/* resets keyboard and gatea20 brain damage */
	movl	%esi,%esp

	pushl	__rtt
	ljmp	$0x8, $_boot	/* Jmp to boot code */

	.data

savearea:	.long	0,0	# sp & bp to return to

	.text

__rtt:
	movl	$-7,%eax
#ifdef	REL
	movw	$0x1234,%ax
	movw	%ax,0x472	# warm boot
	movl	$0,%esp		# segment violation
	ret
#else
	movl	savearea,%esp
	movl	savearea+4,%ebp
	ret
#endif

	.globl	_inb
_inb:	movl	4(%esp),%edx
	subl	%eax,%eax	# clr eax
	NOP
	inb	%dx,%al
	ret

	.globl	_outb
_outb:	movl	4(%esp),%edx
	NOP
	movl	8(%esp),%eax
	outb	%al,%dx
	ret

	.globl ___udivsi3
___udivsi3:
	movl 4(%esp),%eax
	xorl %edx,%edx
	divl 8(%esp)
	ret

	.globl ___divsi3
___divsi3:
	movl 4(%esp),%eax
	xorl %edx,%edx
	cltd
	idivl 8(%esp)
	ret

	.globl	_insw
_insw:
	pushl	%edi
	movw	8(%esp),%dx
	movl	12(%esp),%edi
	movl	16(%esp),%ecx
	NOP
	cld
	nop
	.byte 0x66,0xf2,0x6d	# rep insw
	nop
	movl	%edi,%eax
	popl	%edi
	ret

	# outsw(port,addr,cnt)
	.globl	_outsw
_outsw:
	pushl	%esi
	movw	8(%esp),%dx
	movl	12(%esp),%esi
	movl	16(%esp),%ecx
	NOP
	cld
	nop
	.byte 0x66,0xf2,0x6f	# rep outsw
	nop
	movl	%esi,%eax
	popl	%esi
	ret

@
