head	1.63;
access;
symbols
	OPENBSD_6_2:1.63.0.6
	OPENBSD_6_2_BASE:1.63
	OPENBSD_6_1:1.63.0.8
	OPENBSD_6_1_BASE:1.63
	OPENBSD_6_0:1.63.0.4
	OPENBSD_6_0_BASE:1.63
	OPENBSD_5_9:1.63.0.2
	OPENBSD_5_9_BASE:1.63
	OPENBSD_5_8:1.61.0.4
	OPENBSD_5_8_BASE:1.61
	OPENBSD_5_7:1.60.0.2
	OPENBSD_5_7_BASE:1.60
	OPENBSD_5_6:1.59.0.6
	OPENBSD_5_6_BASE:1.59
	OPENBSD_5_5:1.59.0.4
	OPENBSD_5_5_BASE:1.59
	OPENBSD_5_4:1.55.0.4
	OPENBSD_5_4_BASE:1.55
	OPENBSD_5_3:1.55.0.2
	OPENBSD_5_3_BASE:1.55
	OPENBSD_5_2:1.53.0.2
	OPENBSD_5_2_BASE:1.53
	OPENBSD_5_1_BASE:1.51
	OPENBSD_5_1:1.51.0.6
	OPENBSD_5_0:1.51.0.4
	OPENBSD_5_0_BASE:1.51
	OPENBSD_4_9:1.51.0.2
	OPENBSD_4_9_BASE:1.51
	OPENBSD_4_8:1.50.0.2
	OPENBSD_4_8_BASE:1.50
	OPENBSD_4_7:1.48.0.4
	OPENBSD_4_7_BASE:1.48
	OPENBSD_4_6:1.48.0.6
	OPENBSD_4_6_BASE:1.48
	OPENBSD_4_5:1.48.0.2
	OPENBSD_4_5_BASE:1.48
	OPENBSD_4_4:1.47.0.6
	OPENBSD_4_4_BASE:1.47
	OPENBSD_4_3:1.47.0.4
	OPENBSD_4_3_BASE:1.47
	OPENBSD_4_2:1.47.0.2
	OPENBSD_4_2_BASE:1.47
	OPENBSD_4_1:1.44.0.4
	OPENBSD_4_1_BASE:1.44
	OPENBSD_4_0:1.44.0.2
	OPENBSD_4_0_BASE:1.44
	OPENBSD_3_9:1.42.0.4
	OPENBSD_3_9_BASE:1.42
	OPENBSD_3_8:1.42.0.2
	OPENBSD_3_8_BASE:1.42
	OPENBSD_3_7:1.41.0.2
	OPENBSD_3_7_BASE:1.41
	OPENBSD_3_6:1.39.0.2
	OPENBSD_3_6_BASE:1.39
	SMP_SYNC_A:1.39
	SMP_SYNC_B:1.39
	OPENBSD_3_5:1.38.0.2
	OPENBSD_3_5_BASE:1.38
	OPENBSD_3_4:1.33.0.2
	OPENBSD_3_4_BASE:1.33
	UBC_SYNC_A:1.31
	OPENBSD_3_3:1.31.0.2
	OPENBSD_3_3_BASE:1.31
	OPENBSD_3_2:1.30.0.2
	OPENBSD_3_2_BASE:1.30
	OPENBSD_3_1:1.29.0.2
	OPENBSD_3_1_BASE:1.29
	UBC_SYNC_B:1.30
	UBC:1.28.0.4
	UBC_BASE:1.28
	OPENBSD_3_0:1.28.0.2
	OPENBSD_3_0_BASE:1.28
	OPENBSD_2_9:1.25.0.2
	OPENBSD_2_9_BASE:1.25
	OPENBSD_2_8:1.19.0.2
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.16.0.6
	OPENBSD_2_7_BASE:1.16
	SMP:1.16.0.4
	SMP_BASE:1.16
	kame_19991208:1.16
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@# @;


1.63
date	2015.11.23.19.24.34;	author mmcc;	state Exp;
branches;
next	1.62;
commitid	Hj1zAyMbYgEklqdb;

1.62
date	2015.09.10.15.16.43;	author schwarze;	state Exp;
branches;
next	1.61;
commitid	yPhLfPulVSum2r0H;

1.61
date	2015.06.22.18.31.49;	author jmc;	state Exp;
branches;
next	1.60;
commitid	lYMtLLSloWsX2kyP;

1.60
date	2015.01.24.20.47.19;	author naddy;	state Exp;
branches;
next	1.59;
commitid	KSjr9JLiwftpQ0il;

1.59
date	2013.11.06.17.23.03;	author brynet;	state Exp;
branches;
next	1.58;

1.58
date	2013.10.28.15.15.08;	author stsp;	state Exp;
branches;
next	1.57;

1.57
date	2013.10.25.13.08.03;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2013.10.23.05.05.19;	author mlarkin;	state Exp;
branches;
next	1.55;

1.55
date	2012.09.27.12.26.28;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2012.08.15.19.02.01;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2012.06.11.07.15.53;	author otto;	state Exp;
branches;
next	1.52;

1.52
date	2012.06.10.21.19.25;	author kettenis;	state Exp;
branches;
next	1.51;

1.51
date	2010.08.10.20.34.16;	author sobrado;	state Exp;
branches;
next	1.50;

1.50
date	2010.07.02.08.10.54;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2010.07.02.00.36.52;	author weingart;	state Exp;
branches;
next	1.48;

1.48
date	2009.02.16.23.58.05;	author sthen;	state Exp;
branches;
next	1.47;

1.47
date	2007.05.31.19.20.03;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2007.05.29.00.03.10;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2007.04.27.10.08.34;	author tom;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.15.09.10.52;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.13.15.56.41;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2005.07.15.09.12.04;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2005.02.18.15.26.23;	author robert;	state Exp;
branches;
next	1.40;

1.40
date	2004.12.23.17.50.24;	author markus;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.03.10.15.37;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2004.01.02.09.17.22;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2003.12.20.08.59.03;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2003.11.26.22.42.02;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.10.04.16.47.40;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2003.10.04.10.33.04;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.06.21.45.33;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.03.20.22.11;	author mickey;	state Exp;
branches;
next	1.31;

1.31
date	2003.02.01.16.38.39;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2002.09.16.07.58.15;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2002.03.01.19.43.38;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2001.09.03.11.34.17;	author deraadt;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	2001.07.15.04.29.32;	author pvalchev;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.02.16.02.40;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	2001.01.16.16.43.14;	author mickey;	state Exp;
branches;
next	1.24;

1.24
date	2000.12.27.18.50.53;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2000.11.22.20.24.09;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2000.11.18.12.12.37;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2000.11.18.11.23.19;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.11.18.11.07.31;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.08.07.20.30.34;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	2000.07.12.20.19.23;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.12.16.00.51;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	99.09.23.04.12.08;	author alex;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	99.09.15.18.40.53;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	99.08.25.00.54.18;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	99.07.09.19.00.48;	author weingart;	state Exp;
branches;
next	1.12;

1.12
date	99.07.09.13.35.33;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.16.19.57.54;	author alex;	state Exp;
branches;
next	1.10;

1.10
date	98.07.11.21.13.58;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	98.07.11.20.58.34;	author angelos;	state dead;
branches;
next	1.8;

1.8
date	98.03.16.12.36.15;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.10.07.09.20.31;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.09.20.22.40.35;	author flipk;	state Exp;
branches;
next	1.5;

1.5
date	97.09.07.03.12.37;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.09.06.00.37.34;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.09.05.21.25.16;	author weingart;	state Exp;
branches;
next	1.2;

1.2
date	97.09.05.18.08.05;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.31.03.12.02;	author weingart;	state Exp;
branches;
next	;

1.16.4.1
date	2001.04.18.16.08.39;	author niklas;	state Exp;
branches;
next	1.16.4.2;

1.16.4.2
date	2001.07.04.10.18.10;	author niklas;	state Exp;
branches;
next	1.16.4.3;

1.16.4.3
date	2001.10.31.03.01.13;	author nate;	state Exp;
branches;
next	1.16.4.4;

1.16.4.4
date	2002.03.06.01.01.01;	author niklas;	state Exp;
branches;
next	1.16.4.5;

1.16.4.5
date	2003.03.27.23.26.56;	author niklas;	state Exp;
branches;
next	1.16.4.6;

1.16.4.6
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.16.4.7;

1.16.4.7
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	1.16.4.8;

1.16.4.8
date	2004.06.05.23.09.00;	author niklas;	state Exp;
branches;
next	;

1.28.4.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	1.28.4.2;

1.28.4.2
date	2002.10.29.00.28.04;	author art;	state Exp;
branches;
next	1.28.4.3;

1.28.4.3
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.63
log
@downfalls -> pitfalls
@
text
@.\"	$OpenBSD: boot.8,v 1.62 2015/09/10 15:16:43 schwarze Exp $
.\"
.\" Copyright (c) 1997-2001 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
.\" THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"
.Dd $Mdocdate: September 10 2015 $
.Dt BOOT 8 i386
.Os
.Sh NAME
.Nm boot ,
.Nm boot.conf
.Nd i386-specific second-stage bootstrap
.Sh DESCRIPTION
The main purpose of this program is to load the system kernel while dealing
with the pitfalls of the PC BIOS architecture.
.Pp
As described in
.Xr boot_i386 8 ,
this program is loaded by the
.Xr biosboot 8
primary bootstrap loader and provides a convenient way to load the kernel.
This program acts as an enhanced boot monitor for PC systems, providing
a common interface for the kernel to start from.
.Pp
Basic operations include:
.Pp
.Bl -bullet -compact
.It
Detecting and switching between multiple consoles.
.It
Loading kernels from any device supported by your system BIOS.
.It
Loading kernels compressed by
.Xr gzip 1 .
.It
Passing system parameters queried from the BIOS to the kernel.
.It
Providing an interactive command line.
.El
.Pp
The sequence of its operation is as follows: initialization,
parsing the configuration file, then an interactive command line.
While at the command line you have 5 seconds to type any commands, if needed.
If time expires, the kernel will be loaded according to
the current variable settings (see the
.Nm set
command).
Each time a kernel load fails, the timeout is increased by one second.
The sequence of
.Nm
operations is as follows:
.Bl -enum
.It
Set up a protected mode environment which catches and reports processor
exceptions and provides a simple protected-mode BIOS interface.
.It
Probe for console devices, which includes the (default) PC VGA+Keyboard
console
.Pq Li pc0
and up to four serial consoles
.Pf ( Li com0
through
.Li com3 )
connected to the serial ports.
Display messages to the default console about the devices found.
.It
Detect memory.
Conventional memory is detected by querying the BIOS.
Extended memory is detected by probing page-by-page through the address
space, rather than asking the BIOS; many BIOS's cannot report larger than
64M of memory.
All memory found is reported to the default console device.
.It
Probe for APM support in the BIOS.
Display a message if support is present.
.It
If the file
.Pa /etc/boot.conf
exists on the filesystem
.Nm
was loaded from, open and parse it.
Lines beginning with the
.Sq #
character,
as well as whitespace at the beginning of lines,
are ignored.
The file may contain any commands
.Nm
accepts at the interactive prompt.
Though default settings usually suffice, they can be changed here.
.Pp
.Pa boot.conf
processing can be skipped, and the automatic boot cancelled, by holding
down either Control key as
.Nm
starts.
.It
The header line
.Pp
.Dl >> OpenBSD/i386 BOOT [x.xx]
.Pp
is displayed to the active console, where
.Ar x.xx
is the version number of the
.Nm
program, followed by the
.Pp
.Dl boot>
.Pp
prompt, which means you are in interactive mode and may enter commands.
If you do not,
.Nm
will proceed to load the kernel with the current parameters after the
timeout period has expired.
.El
.Pp
By default,
.Nm
attempts to load the kernel executable
.Pa /bsd .
If it fails to find the kernel and no alternative kernel image has
been specified, the system will be unable to boot.
.Pp
.Nm
supports booting from
.Xr softraid 4
RAID 1 and CRYPTO volumes.
.Sh COMMANDS
The following commands are accepted at the
.Nm
prompt:
.Bl -tag -width shorten
.It boot Oo Oo Ar device : Oc Ns Ar image Oc Op Fl acds
Boots the specified kernel image
with any options given.
If
.Ar device
or
.Ar image
are omitted, values from
.Nm
variables will be used.
.Pp
When selecting the
.Ar device
to boot from,
.Nm
makes no distinction between SCSI and IDE type drives;
they are detected as
.Sq hd
devices.
Therefore, to boot kernel
.Pa /bsd
from slice
.Sq a
on the first hard drive
.Pq irrespective of device type ,
specify
.Dq boot hd0a:/bsd .
.Bl -tag -width _a_
.It Fl a
Causes the kernel to ask for the
.Nm root
device to use.
.It Fl c
Causes the kernel to go into
.Xr boot_config 8
before performing
.Xr autoconf 4
procedures.
.It Fl d
Causes the kernel to drop into
.Xr ddb 4
at the earliest convenient point.
.It Fl s
Causes the kernel to boot single-user.
.El
.It echo Op Ar args
Displays
.Ar args
on the console device.
.It help
Prints a list of available commands and machine dependent
commands, if any.
.It machine Op Ar command
Issues machine-dependent commands.
These are defined for i386 architecture:
.Bl -tag -width diskinfo
.It Nm boot
Boots the specified partition boot block in place of the original (MBR) boot
block:
.Bd -unfilled -offset indent
machine boot hd0a
.Ed
.Pp
Where
.Ar a
is the first MBR partition table entry, and
.Ar d
the last.
.It Nm comaddr
Set the I/O base address for the serial port to be used as serial console.
.It Nm diskinfo
Prints a list of hard disks installed on your system including:
BIOS device number, and the BIOS geometry.
.It Nm memory
If used without any arguments, this command will print out
the memory configuration as determined through BIOS routines.
Otherwise the arguments specify how to modify the
memory configuration.
They take the form of:
.Pp
.D1 =size[KMG]
.D1 [+-]size@@address
.Pp
Meaning to add(+), exempt(-) or limit(=) the amount of memory specified by
.Ar size
at the location specified by
.Ar address .
Both size and base address can be specified as octal,
decimal, or hexadecimal numbers, as accepted by the
.Xr strtoul 3
routine.
Memory size may be suffixed by K or k, for kilobytes;
M or m, for megabytes;
and G or g, for gigabytes.
.Pp
The limit(=) option simply ignores any memory above the given
memory limit.
This is useful for testing kernels in an artificially
constrained memory situation.
For example, the following limits the kernel to using only
memory below 64MB:
.Bd -unfilled -offset indent
machine mem =64M
.Ed
.Pp
Memory segments are not required to be adjacent to each other;
the only requirement is that there is real physical memory under
the range added.
The following example adds 32MB of memory right after the first 16MB:
.Bd -unfilled -offset indent
machine mem +0x2000000@@0x1000000
.Ed
.Pp
Another useful command is to withdraw a range
of memory from OS usage (it may have been wrongfully reported as
useful by the BIOS).
This example
effectively excludes the 15\(en16MB range from the map of useful memory:
.Bd -unfilled -offset indent
machine mem -0x100000@@0xf00000
.Ed
.It Nm regs
Prints contents of processor registers if compiled with
.Em DEBUG .
.El
.It ls Op Ar directory
Prints contents of the specified
.Ar directory
in long format including: attributes and file type, owner, group,
size, filename.
.It reboot
Reboots the machine by initiating a warm boot procedure.
.It set Op Ar varname Op Ar value
If invoked without arguments, prints a list of variables and their values.
If only
.Ar varname
is specified, displays contents of that variable.
If
.Ar varname
and
.Ar value
are both specified, sets that variable to the given value.
Variables include:
.Pp
.Bl -tag -compact -width boothow
.It Nm addr
Address at which to load the kernel.
.It Nm debug
Debug flag if
.Nm
was compiled with DEBUG defined.
.It Nm device
Boot device name (e.g.,
.Li fd0a ,
.Li hd0a ) .
.It Nm howto
Options to pass to the loaded kernel.
.It Nm image
File name containing the kernel image.
.It Nm timeout
Number of seconds boot will wait for human intervention before
booting the default kernel image.
.It Nm tty
Active console device name (e.g.,
.Li com0 ,
.Li com1 ,
.Li pc0 ) .
.El
.It stty Op Ar device Op Ar speed
Displays or sets the
.Ar speed
for a console
.Ar device .
If changing the baudrate for the currently active console,
.Nm
offers you five seconds of grace time before committing the change
to allow you to change your terminal's speed to match.
If changing speed
.Em not
for the active console, the baudrate is set for the
.Em next
time you switch to a serial console.
The baudrate value is not used for the
.Li pc0
console.
.Pp
The default baudrate is 9600bps.
.It time
Displays system time and date.
.El
.Sh FILES
.Bl -tag -width /usr/mdec/biosbootxx -compact
.It Pa /usr/mdec/biosboot
first stage bootstrap
.It Pa /usr/mdec/pxeboot
PXE bootstrap
.It Pa /boot
system bootstrap
.It Pa /etc/boot.conf
system bootstrap's startup file
.It Pa /bsd
kernel image
.It Pa /bsd.sp
kernel image for single processor machines
.It Pa /bsd.mp
kernel image for multiprocessor machines
.It Pa /bsd.rd
kernel image for installation/recovery
.El
.Sh EXAMPLES
Boot the default kernel:
.Pp
.Dl boot> boot
.Pp
Remove the 5 second pause at boot-time permanently, causing
.Nm
to load the kernel immediately without prompting:
.Pp
.Dl # echo \&"boot\&" > /etc/boot.conf
.Pp
Use serial console.
A null modem cable should connect the specified serial port to a terminal.
Useful for debugging.
.Pp
.Dl boot> set tty com0
.Pp
Invoke the serial console at every boot:
.Pp
.Dl # echo \&"set tty com0\&" > /etc/boot.conf
.Pp
Boot the kernel named
.Pa /bsd
from the second hard disk in
.Dq User Kernel Configuration
mode (see
.Xr boot_config 8 ) .
This mechanism allows for the explicit enabling and disabling of devices
during the current boot sequence, as well as the modification
of device parameters.
Once booted, such changes can be made permanent by using
.Xr config 8 Ns 's
.Fl e
option.
.Pp
.Dl boot> boot hd1a:/bsd -c
.Sh SEE ALSO
.Xr gzip 1 ,
.Xr autoconf 4 ,
.Xr ddb 4 ,
.Xr softraid 4 ,
.Xr biosboot 8 ,
.Xr boot_config 8 ,
.Xr boot_i386 8 ,
.Xr fdisk 8 ,
.Xr installboot 8 ,
.Xr pxeboot 8 ,
.Xr reboot 8
.Sh HISTORY
This program was written by Michael Shalayeff for
.Ox 2.1 .
@


1.62
log
@reduce .Nd to one line and kill .Tn while here
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.61 2015/06/22 18:31:49 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: June 22 2015 $
d37 1
a37 1
with the downfalls of the PC BIOS architecture.
@


1.61
log
@document that boot.conf can contain comments;
from tilo stritzky

thanks miod for help with the diff, and who also noted that
leading whitespace gets stripped too;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.60 2015/01/24 20:47:19 naddy Exp $
d28 1
a28 1
.Dd $Mdocdate: January 24 2015 $
d34 1
a34 2
.Nd
i386-specific second-stage bootstrap
@


1.60
log
@correct the syntax description of the boot command; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.59 2013/11/06 17:23:03 brynet Exp $
d28 1
a28 1
.Dd $Mdocdate: November 6 2013 $
d105 6
a110 1
This file may contain any commands
@


1.59
log
@Document 'machine boot' in boot(8) on i386 and amd64.

"fine" deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.58 2013/10/28 15:15:08 stsp Exp $
d28 1
a28 1
.Dd $Mdocdate: October 28 2013 $
d151 6
a156 2
.It boot Op Ar image Op Fl acds
Boots the kernel image specified by
d158 1
a158 5
with any options given.
Image specification consists of a pair
.Ar device : Ns Ar filename ;
either or both can be omitted (`:' is not needed if both are omitted),
in which case values from
@


1.58
log
@Document softraid boot process for i386/amd64.

Requested by Adam Thompson.
suggestions and ok deraadt, earlier version ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.57 2013/10/25 13:08:03 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: October 25 2013 $
d207 12
@


1.57
log
@some cleanup for "machine memory";
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.56 2013/10/23 05:05:19 mlarkin Exp $
d28 1
a28 1
.Dd $Mdocdate: October 23 2013 $
d141 5
d388 1
@


1.56
log
@

Allow uppercase "K/M/G" specification in "machine memory" boot command.

ok guenther, dlg, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.55 2012/09/27 12:26:28 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: September 27 2012 $
d214 2
a215 2
.Dl =<size>[KkMmGg]
.Dl [+-]<size>@@<address>
d218 1
a218 1
.Ar <size>
d220 1
a220 1
.Ar <address> .
d225 3
d234 1
a234 1
memory below 64M:
d242 1
a242 1
The following example adds 32M of memory right after the first 16M:
d251 1
a251 1
effectively excludes the 15\(en16M range from the map of useful memory:
@


1.55
log
@remove the zlib rfc text: these pages already point to gzip(1), which
has the references, and the rfc is not that relevant anyway;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.54 2012/08/15 19:02:01 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: August 15 2012 $
d214 1
a214 1
.Dl =<size>[KMG]
@


1.54
log
@use Lk for links;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.53 2012/06/11 07:15:53 otto Exp $
d28 1
a28 1
.Dd $Mdocdate: June 11 2012 $
a386 6
.Pp
RFC 1950 describes the zlib library interface.
.Pp
The official home page for the version of zlib used in this
operating system is at
.Lk http://www.gzip.org/zlib/ .
@


1.53
log
@serial -> serial port; ok phessler@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.52 2012/06/10 21:19:25 kettenis Exp $
d28 1
a28 1
.Dd $Mdocdate: June 10 2012 $
d391 2
a392 1
operating system is at http://www.gzip.org/zlib/.
@


1.52
log
@Document the "machine comaddr" command.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.51 2010/08/10 20:34:16 sobrado Exp $
d28 1
a28 1
.Dd $Mdocdate: August 10 2010 $
d203 1
a203 1
Set the I/O base address for the serial to be used as serial console.
@


1.51
log
@add a description for bsd.sp where appropriate; while here, write
"multiprocessor" in a consistent way.

written with lots of good advice from jmc@@, who noted that changing
hier(7) was not enough and carefully reviewed this diff.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.50 2010/07/02 08:10:54 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: July 2 2010 $
d202 2
@


1.50
log
@usefull -> useful;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.49 2010/07/02 00:36:52 weingart Exp $
d331 2
@


1.49
log
@Add ability to limit memory presented to kernel with
'machine memory =128M' style commands.  Thanks to
phessler for finding a small man page niggle.  Bumped
version strings to a nice round fraction, and make them
the same across the board.  Easier to identify boot
binary versions that way.

ok thib@@, tedu@@, phessler@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.48 2009/02/16 23:58:05 sthen Exp $
d28 1
a28 1
.Dd $Mdocdate: February 16 2009 $
d226 1
a226 1
This is usefull for testing kernels in an artificially
@


1.48
log
@Cancel the automatic boot when you hold ctrl to skip boot.conf.
"I like it" deraadt "sweet" tedu "love it" marco
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.47 2007/05/31 19:20:03 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d212 1
d215 1
a215 1
Meaning to add(+) or exempt(-) the amount of memory specified by
d224 10
d237 1
a237 2
The following example
adds 32M of memory right after the first 16M:
@


1.47
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.46 2007/05/29 00:03:10 deraadt Exp $
d28 1
a28 1
.Dd $Mdocdate$
d111 2
a112 1
processing can be skipped by holding down either Control key as
@


1.46
log
@remove support for many alternative kernel choices -- only try /bsd and
not the other stupid names.  that feature was retarded.  tested on a few
architectures by a few people
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.45 2007/04/27 10:08:34 tom Exp $
d28 1
a28 1
.Dd September 1, 1997
@


1.45
log
@Check for Control key held down when starting, and don't read boot.conf
if it is.  This gives a way to recover from "switching to com0" when
there's no serial cable handy.

Bump version numbers.

A similar change will be made to amd64 boot soon.

ok toby@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.44 2006/05/15 09:10:52 jmc Exp $
d138 2
a139 7
If that fails, it will attempt to load
.Pa /obsd
and then
.Pa /bsd.old .
If it fails to find any of these files,
and no alternative kernel image has been specified,
the system will be unable to boot.
@


1.44
log
@better wording for the "memory" section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.43 2006/05/13 15:56:41 deraadt Exp $
d109 5
@


1.43
log
@sensible english; ok jmc; from graham.gower@@gmail.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.42 2005/07/15 09:12:04 jmc Exp $
d205 1
a205 1
If used without any arguments this command will print out
d207 1
a207 1
Otherwise the arguments would specify the expressions to modify the
d209 1
a209 1
The expression would have a form of:
d217 1
a217 1
Both size and base address could be specified as octal,
d221 2
a222 1
Memory segments are not required to be adjacent to each other,
d225 2
a226 1
For example:
d231 2
a232 3
would add 32M of memory right after the first 16M.
The other useful command would be to withdraw a range
of memory from OS usage (might be wrongfully reported as
d234 2
a238 2
.Pp
which effectively excludes 15-16M range from the map of useful memory.
@


1.42
log
@- add /bsd.rd to FILES
- for amd64/i386 add /bsd.mp to FILES

ok tom@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.41 2005/02/18 15:26:23 robert Exp $
d213 1
a213 1
Meaning to add(+) or exempt(-) the specified by the
d215 2
a216 3
amount of memory at the location specified by the
.Ar <address>
argument.
@


1.41
log
@fix zlib's homepage; ok henning@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.40 2004/12/23 17:50:24 markus Exp $
d320 4
@


1.40
log
@make com[123] work for console on i386, but allow override with CONADDR/CONUNIT
ok mickey, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.39 2004/04/03 10:15:37 jmc Exp $
d372 1
a372 1
operating system is at http://quest.jpl.nasa.gov/zlib/.
@


1.39
log
@add pxeboot references to FILES and SEE ALSO;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.38 2004/01/02 09:17:22 jmc Exp $
a284 3
Currently, only the first serial port
.Pq Li com0
is supported for console on i386.
@


1.38
log
@after some advice from nick, note that only com0 is currently supported
as serial; closes PR 3621 from Johan Fredin;

ok nick@@ krw@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.37 2003/12/20 08:59:03 jmc Exp $
d315 2
d369 1
@


1.37
log
@- .Xr biosboot(8) in SEE ALSO
- wording improvement
- correct description of example

from Tom Cosgrove;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.36 2003/11/26 22:42:02 jmc Exp $
d281 1
a281 1
Active console device name (i.e.,
d285 3
@


1.36
log
@after some discussion with nick@@, note that `hd*' syntax makes more
sense when specifying a boot device than does `wd*' or `sd*', and replace
examples with it; in line with what nick has already done to the faq;

ok nick@@ mickey@@ weingart@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.35 2003/10/04 16:47:40 jmc Exp $
d342 1
a342 1
from the second IDE disk in
d359 1
d369 1
a369 1
operating system see http://quest.jpl.nasa.gov/zlib/.
@


1.35
log
@- document that boot will by default try to load /bsd, /obsd then /bsd.old.
- indent examples, and put descriptions before rather than after them.

ok mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.34 2003/10/04 10:33:04 jmc Exp $
d155 17
d270 1
a270 1
Boot device name (i.e.,
d272 1
a272 1
.Li sd0a ) .
d354 1
a354 1
.Dl boot> boot wd1a:/bsd -c
@


1.34
log
@(boot): device: filename  -> device:filename
nice CAVEAT, BTW.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.33 2003/06/06 21:45:33 jmc Exp $
d128 12
d303 1
a303 1
.Li boot> boot
d305 1
a305 3
Boot the default kernel.
.Pp
.Li # echo \&"boot\&" > /etc/boot.conf
d309 1
a309 1
to load the kernel immediately without prompting.
d311 1
a311 1
.Li boot> set tty com0
d317 1
a317 1
.Li # echo \&"set tty com0\&" > /etc/boot.conf
d319 1
a319 1
Invoke the serial console at every boot.
d321 1
a321 1
.Li boot> boot wd1a:/bsd -c
d336 2
@


1.33
log
@- section reorder
- new sentence, new line
- some macro fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.32 2003/06/03 20:22:11 mickey Exp $
d138 2
a139 2
.Em device : filename ,
either or both can be omitted (':' is not needed if both are omitted),
@


1.32
log
@three four kills
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.31 2003/02/01 16:38:39 jmc Exp $
d279 11
a325 11
.Sh FILES
.Bl -tag -width /usr/mdec/biosbootxx -compact
.It Pa /usr/mdec/biosboot
first stage bootstrap
.It Pa /boot
system bootstrap
.It Pa /etc/boot.conf
system bootstrap's startup file
.It Pa /bsd
kernel image
.El
@


1.31
log
@typos;
added .Fl to flags for boot_*

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.30 2002/09/16 07:58:15 miod Exp $
a13 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Michael Shalayeff.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
@


1.30
log
@It's more convinient to spell convinient as ``convenient'', actually.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.29 2002/03/01 19:43:38 miod Exp $
d51 1
a51 1
common interface for the kernel to start from.
d127 1
a127 1
prompt, which means you are in the interactive mode and may enter commands.
d130 1
a130 1
will proceed to loading the kernel with the current parameters after the
@


1.29
log
@Change a config(8) reference to a more appropriate boot_config(8) reference.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.28 2001/09/03 11:34:17 deraadt Exp $
d162 1
a162 1
at the earliest convinient point.
@


1.28
log
@pretty this up
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.27 2001/07/15 04:29:32 pvalchev Exp $
d312 1
a312 1
.Xr config 8 ) .
@


1.28.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.28 2001/09/03 11:34:17 deraadt Exp $
d312 1
a312 1
.Xr boot_config 8 ) .
@


1.28.4.2
log
@sync to -current
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.28.4.1 2002/06/11 03:35:54 art Exp $
d162 1
a162 1
at the earliest convenient point.
@


1.28.4.3
log
@sync
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d51 1
a51 1
a common interface for the kernel to start from.
d127 1
a127 1
prompt, which means you are in interactive mode and may enter commands.
d130 1
a130 1
will proceed to load the kernel with the current parameters after the
@


1.27
log
@spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.26 2001/05/02 16:02:40 mickey Exp $
d137 1
a137 1
.Bl -tag -width stty_device_speed_____
d176 1
a176 1
.Bl -tag -width diskinfo_
@


1.26
log
@document boot options, i dunno what -b does so i just do not mention it anymore
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.25 2001/01/16 16:43:14 mickey Exp $
d214 1
a214 1
which effectively excludes 15-16M range from the map of usefull memory.
@


1.25
log
@add timeout variable, alphabetize the var list; pointed out by Rob Francis <rfrancis@@slurb.com>
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.24 2000/12/27 18:50:53 brad Exp $
d138 1
a138 1
.It boot Op Ar image Op Fl abcds
d148 18
d333 3
d338 2
a339 1
.Xr installboot 8
@


1.24
log
@better english and fix some spelling mistakes, Ok'd by aaron@@
adjucent -> adjacent
usefull -> useful
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.23 2000/11/22 20:24:09 mickey Exp $
d3 1
a3 1
.\" Copyright (c) 1997-2000 Michael Shalayeff
a222 2
.It Nm howto
Options to pass to the loaded kernel.
d231 7
a242 2
.It Nm image
File name containing the kernel image.
@


1.23
log
@s/stroul/strtoul/; spotted by brad@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.22 2000/11/18 12:12:37 aaron Exp $
d130 1
a130 1
will proceed loading kernel with the current parameters after the
d139 1
a139 1
Boots kernel image specified by
d144 1
a144 1
either or both of each maybe omitted (':' is not needed if both are omitted),
d160 1
a160 1
Prints list of hard disks installed on your system including:
d180 1
a180 1
Memory segments are not required to be adjucent to each other,
d188 4
a191 4
would add 32M of memory right after first 16M.
The other usefull command would be to winthdraw some range
of memory form OS usage (as might be wrongfully reported as
usefull by BIOS):
d207 1
a207 1
Reboots machine by initiating a warm boot procedure.
@


1.22
log
@Add an example for boot -c.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.21 2000/11/18 11:23:19 aaron Exp $
d178 1
a178 1
.Xr stroul 3
@


1.21
log
@- Add an EXAMPLES section. I still haven't chosen a "standard" format.
- Some more .Li usage.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.20 2000/11/18 11:07:31 aaron Exp $
d283 16
@


1.20
log
@- "OpenBSD BOOT [x.xx]" -> ">> OpenBSD/i386 BOOT [x.xx]" to reflect reality.
- As far as I know, there is no such thing as 9600 "baud". Change to "bps".
- Split MLINKs in NAME section to separate lines as standard.
- Many grammar/spelling fixups.
- Remove hard sentence breaks.
- Some other miscellaneous fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.19 2000/08/07 20:30:34 mickey Exp $
d86 7
a92 2
console (pc0) and up to four serial consoles (com0 through com3) connected
to the serial ports.
d230 3
a232 1
Boot device name (ie: fd0a, sd0a).
d234 4
a237 1
Active console device name (ie: com0, com1, pc0)
d263 20
@


1.19
log
@add a couple of examples, and generally elaborate more on the subject
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.18 2000/07/12 20:19:23 deraadt Exp $
d37 2
a38 1
.Nm boot , boot.conf
d42 2
a43 2
The main purpose of this program is to load the system kernel, dealing with
the downfalls of the PC BIOS architecture.
d46 1
a46 1
.Xr boot_i386 8
d54 1
d71 3
a73 3
While at the command line you have 5 seconds to type any commands,
if needed. If time expires, the kernel will be loaded according to
the current variable settings (See the
d75 3
a77 2
command).  Each time a kernel load fails, the timeout
is increased by one second. The sequence of
d83 1
a83 1
exceptions, and provides a simple protected-mode BIOS interface.
d87 2
a88 2
to the serial ports. Display messages to the default console about the
devices found.
d90 2
a91 1
Detect memory. Conventional memory is detected by quering the BIOS.
d93 1
a93 1
space, rather than asking the BIOS; many BIOS cannot report larger than
d95 1
a95 1
All the memory found is reported to the default console device.
d97 2
a98 1
Probe for APM support in the BIOS. Message printed if support is present.
d104 2
a105 1
was loaded from, open and parse it. This file may contain any commands
d112 1
a112 1
.Dl OpenBSD BOOT [x.xx]
d116 1
a116 1
is a version number of the
d122 2
a123 2
prompt, which means you are in the interactive mode and may enter
commands. If you do not,
d136 2
a137 1
with any options given. Image specification consists of a pair
d151 2
a152 1
Issues machine-dependent commands. These are defined for i386 architecture:
d161 2
a162 1
memory configuration. The expression would have a form of:
d236 5
a240 4
If changing baudrate for the currently
active console, gives you five seconds of pause
before changing the baud rate to allow you to change your terminal's
speed to match.  If changing speed
d242 1
a242 1
for the active console, sets the baudrate value to be used the
d245 3
a247 1
The baudrate value is not used for the pc0 console.
d249 1
a249 2
The default baudrate if not specifically
set is 9600 baud.
d273 1
a273 3
operating system see http://quest.jpl.nasa.gov/zlib/ .
.Sh BUGS
Well, nobody is perfect.
@


1.18
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.17 2000/06/12 16:00:51 millert Exp $
d3 1
a3 1
.\" Copyright (c) 1997-1999 Michael Shalayeff
d162 21
@


1.17
log
@Fix typo and mention valid tty values.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.16 1999/09/23 04:12:08 alex Exp $
d150 1
a150 1
If used without any arguments this commad will print out
@


1.16
log
@Typo fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.15 1999/09/15 18:40:53 mickey Exp $
d187 1
a187 1
Address at wich to load the kernel.
d195 1
a195 1
Boot device name (ie fd0a, sd0a).
d197 1
a197 1
Active console device name.
@


1.16.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.25 2001/01/16 16:43:14 mickey Exp $
d3 1
a3 1
.\" Copyright (c) 1997-2001 Michael Shalayeff
d37 1
a37 2
.Nm boot ,
.Nm boot.conf
d41 2
a42 2
The main purpose of this program is to load the system kernel while dealing
with the downfalls of the PC BIOS architecture.
d45 1
a45 1
.Xr boot_i386 8 ,
a52 1
.Pp
d69 3
a71 3
While at the command line you have 5 seconds to type any commands, if needed.
If time expires, the kernel will be loaded according to
the current variable settings (see the
d73 2
a74 3
command).
Each time a kernel load fails, the timeout is increased by one second.
The sequence of
d80 1
a80 1
exceptions and provides a simple protected-mode BIOS interface.
d83 3
a85 8
console
.Pq Li pc0
and up to four serial consoles
.Pf ( Li com0
through
.Li com3 )
connected to the serial ports.
Display messages to the default console about the devices found.
d87 1
a87 2
Detect memory.
Conventional memory is detected by querying the BIOS.
d89 1
a89 1
space, rather than asking the BIOS; many BIOS's cannot report larger than
d91 1
a91 1
All memory found is reported to the default console device.
d93 1
a93 2
Probe for APM support in the BIOS.
Display a message if support is present.
d99 1
a99 2
was loaded from, open and parse it.
This file may contain any commands
d106 1
a106 1
.Dl >> OpenBSD/i386 BOOT [x.xx]
d110 1
a110 1
is the version number of the
d116 2
a117 2
prompt, which means you are in the interactive mode and may enter commands.
If you do not,
d119 1
a119 1
will proceed to loading the kernel with the current parameters after the
d128 1
a128 1
Boots the kernel image specified by
d130 1
a130 2
with any options given.
Image specification consists of a pair
d132 1
a132 1
either or both can be omitted (':' is not needed if both are omitted),
d144 1
a144 2
Issues machine-dependent commands.
These are defined for i386 architecture:
d147 1
a147 1
Prints a list of hard disks installed on your system including:
d150 1
a150 1
If used without any arguments this command will print out
d153 1
a153 2
memory configuration.
The expression would have a form of:
a161 21
Both size and base address could be specified as octal,
decimal, or hexadecimal numbers, as accepted by the
.Xr strtoul 3
routine.
Memory segments are not required to be adjacent to each other,
the only requirement is that there is real physical memory under
the range added.
For example:
.Bd -unfilled -offset indent
machine mem +0x2000000@@0x1000000
.Ed
.Pp
would add 32M of memory right after the first 16M.
The other useful command would be to withdraw a range
of memory from OS usage (might be wrongfully reported as
useful by the BIOS).
.Bd -unfilled -offset indent
machine mem -0x100000@@0xf00000
.Ed
.Pp
which effectively excludes 15-16M range from the map of usefull memory.
d172 1
a172 1
Reboots the machine by initiating a warm boot procedure.
d187 3
a189 1
Address at which to load the kernel.
d195 3
a197 5
Boot device name (i.e.,
.Li fd0a ,
.Li sd0a ) .
.It Nm howto
Options to pass to the loaded kernel.
a199 8
.It Nm timeout
Number of seconds boot will wait for human intervention before
booting the default kernel image.
.It Nm tty
Active console device name (i.e.,
.Li com0 ,
.Li com1 ,
.Li pc0 ) .
d206 4
a209 5
If changing the baudrate for the currently active console,
.Nm
offers you five seconds of grace time before committing the change
to allow you to change your terminal's speed to match.
If changing speed
d211 1
a211 1
for the active console, the baudrate is set for the
d214 1
a214 3
The baudrate value is not used for the
.Li pc0
console.
d216 2
a217 1
The default baudrate is 9600bps.
a220 36
.Sh EXAMPLES
.Li boot> boot
.Pp
Boot the default kernel.
.Pp
.Li # echo \&"boot\&" > /etc/boot.conf
.Pp
Remove the 5 second pause at boot-time permanently, causing
.Nm
to load the kernel immediately without prompting.
.Pp
.Li boot> set tty com0
.Pp
Use serial console.
A null modem cable should connect the specified serial port to a terminal.
Useful for debugging.
.Pp
.Li # echo \&"set tty com0\&" > /etc/boot.conf
.Pp
Invoke the serial console at every boot.
.Pp
.Li boot> boot wd1a:/bsd -c
.Pp
Boot the kernel named
.Pa /bsd
from the second IDE disk in
.Dq User Kernel Configuration
mode (see
.Xr config 8 ) .
This mechanism allows for the explicit enabling and disabling of devices
during the current boot sequence, as well as the modification
of device parameters.
Once booted, such changes can be made permanent by using
.Xr config 8 Ns 's
.Fl e
option.
d241 3
a243 1
operating system see http://quest.jpl.nasa.gov/zlib/.
@


1.16.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.16.4.1 2001/04/18 16:08:39 niklas Exp $
d138 1
a138 1
.It boot Op Ar image Op Fl acds
a147 18
.Bl -tag -width _a_
.It Fl a
Causes the kernel to ask for the
.Nm root
device to use.
.It Fl c
Causes the kernel to go into
.Xr boot_config 8
before performing
.Xr autoconf 4
procedures.
.It Fl d
Causes the kernel to drop into
.Xr ddb 4
at the earliest convinient point.
.It Fl s
Causes the kernel to boot single-user.
.El
a314 3
.Xr autoconf 4 ,
.Xr ddb 4 ,
.Xr boot_config 8 ,
d317 1
a317 2
.Xr installboot 8 ,
.Xr reboot 8
@


1.16.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.16.4.2 2001/07/04 10:18:10 niklas Exp $
d137 1
a137 1
.Bl -tag -width shorten
d176 1
a176 1
.Bl -tag -width diskinfo
d214 1
a214 1
which effectively excludes 15-16M range from the map of useful memory.
@


1.16.4.4
log
@Merge in trunk
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d312 1
a312 1
.Xr boot_config 8 ) .
@


1.16.4.5
log
@Sync the SMP branch with 3.3
@
text
@d51 1
a51 1
a common interface for the kernel to start from.
d127 1
a127 1
prompt, which means you are in interactive mode and may enter commands.
d130 1
a130 1
will proceed to load the kernel with the current parameters after the
d162 1
a162 1
at the earliest convenient point.
@


1.16.4.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.16.4.5 2003/03/27 23:26:56 niklas Exp $
d14 5
a283 11
.Sh FILES
.Bl -tag -width /usr/mdec/biosbootxx -compact
.It Pa /usr/mdec/biosboot
first stage bootstrap
.It Pa /boot
system bootstrap
.It Pa /etc/boot.conf
system bootstrap's startup file
.It Pa /bsd
kernel image
.El
d320 11
@


1.16.4.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a127 12
.Pp
By default,
.Nm
attempts to load the kernel executable
.Pa /bsd .
If that fails, it will attempt to load
.Pa /obsd
and then
.Pa /bsd.old .
If it fails to find any of these files,
and no alternative kernel image has been specified,
the system will be unable to boot.
d138 2
a139 2
.Ar device : Ns Ar filename ;
either or both can be omitted (`:' is not needed if both are omitted),
a142 17
.Pp
When selecting the
.Ar device
to boot from,
.Nm
makes no distinction between SCSI and IDE type drives;
they are detected as
.Sq hd
devices.
Therefore, to boot kernel
.Pa /bsd
from slice
.Sq a
on the first hard drive
.Pq irrespective of device type ,
specify
.Dq boot hd0a:/bsd .
d241 1
a241 1
Boot device name (e.g.,
d243 1
a243 1
.Li hd0a ) .
d252 1
a252 1
Active console device name (e.g.,
a255 3
Currently, only the first serial port
.Pq Li com0
is supported for console on i386.
d291 3
a293 1
Boot the default kernel:
d295 1
a295 1
.Dl boot> boot
d299 1
a299 1
to load the kernel immediately without prompting:
d301 1
a301 1
.Dl # echo \&"boot\&" > /etc/boot.conf
d307 1
a307 1
.Dl boot> set tty com0
d309 1
a309 1
Invoke the serial console at every boot:
d311 1
a311 1
.Dl # echo \&"set tty com0\&" > /etc/boot.conf
d315 1
a315 1
from the second hard disk in
a325 2
.Pp
.Dl boot> boot hd1a:/bsd -c
a329 1
.Xr biosboot 8 ,
d339 1
a339 1
operating system is at http://quest.jpl.nasa.gov/zlib/.
@


1.16.4.8
log
@Merge with the trunk
@
text
@a314 2
.It Pa /usr/mdec/pxeboot
PXE bootstrap
a366 1
.Xr pxeboot 8 ,
@


1.15
log
@apply grammer fixes from pr#831; from kwesterback@@home.com
although boot options (i.e. RB_* from the sys/reboot.h)
should be described elsewhere.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.14 1999/08/25 00:54:18 mickey Exp $
d141 1
a141 1
Prints a list of available commands and machine dependant
d144 1
a144 1
Issues machine-dependant commands. These are defined for i386 architecture:
@


1.14
log
@give better support to the bios memory maps.
provide memory maps editing through the machine memory command.
rearrange probing in machdep, so it provides less output,
also giving a shot for apm to fix the memory maps.
changes to kernel are minimal, only that is required due
to the api version bits addition and such cosmetic changes.
tested on all critical kernel,boot combinations; niklas@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.13 1999/07/09 19:00:48 weingart Exp $
d37 1
a37 1
.Nm boot, boot.conf
d39 1
a39 1
second-stage bootstrap
d128 1
a128 1
Boots kernel image specified by the
d130 1
a130 1
with options if any. Image specification consists of a pair
d132 1
a132 1
either of each maybe omitted (':' is not needed if both),
@


1.13
log
@Fixup for link
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.12 1999/07/09 13:35:33 aaron Exp $
d3 1
a3 1
.\" Copyright (c) 1997 Michael Shalayeff
d16 1
a16 1
.\"	This product includes software developed by Michael Shalayeff.
d21 11
a31 10
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
d126 1
a126 1
.Bl -tag -width stty_device_baudrate_____
d143 1
a143 1
.It machine Op Ar subcommand
a145 2
.It Nm cnvmem
Prints/sets the amount of conventional memory.
a148 2
.It Nm extmem
Prints/sets the amount of extended memory.
d150 12
a161 1
Prints physical memory map.
d201 1
a201 1
.It stty Op Ar device Op Ar baudrate
d203 1
a203 1
.Ar baudrate
d206 1
a206 1
If changing speed for the currently
@


1.12
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.11 1999/05/16 19:57:54 alex Exp $
d36 1
a36 1
.Nm boot
@


1.11
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.10 1998/07/11 21:13:58 angelos Exp $
d20 2
a21 2
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
@


1.10
log
@Roll-back previous commit; someone is working on getting all the boot*
pages make some sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot-second-stage.8,v 1.1 1998/07/11 20:58:34 angelos Exp $
d225 1
d228 1
a228 2
.Xr installboot 8 ,
.Xr gzip 1 .
@


1.9
log
@Rename boot.8 to boot-second-stage.8, so it's possible to get it
through man (it conflicted with the boot_$arch.8 page);
wsimpson@@greendragon.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.8 1998/03/16 12:36:15 mickey Exp $
@


1.8
log
@doc machine commands
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.7 1997/10/07 09:20:31 mickey Exp $
@


1.7
log
@cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.6 1997/09/20 22:40:35 flipk Exp $
d145 2
d150 4
@


1.6
log
@- add 'stty [baudrate]' command to /boot, for serial consoles
- switch baud rates using i/o instead of bios, since bios commands
have only a limited bitwidth for baudrate, and max out at 9600
- when switching console devices, print msg to both old device and new
- fix timeout bug in com_getc() (dev | 0x80 was reading gobbledygook)
- document 'stty' command in boot(8)
- wording and cleanup in man pages
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.5 1997/09/07 03:12:37 mickey Exp $
d79 1
a79 1
exceptions, and provides a simple real-mode BIOS interface.
d125 1
a125 1
.Bl -tag -width machine_diskinfo_boot_
d130 1
a130 1
.Nm device : Nm filename ,
d145 1
a145 1
.It diskinfo
d148 3
a156 2
.It regs
Prints contents of processor registers, if defind for this architecture.
d159 1
a159 1
.It set Op varname Op value
d172 1
a172 1
.It addr
d174 1
a174 1
.It howto
d176 1
a176 1
.It debug
d180 1
a180 1
.It device
d182 1
a182 1
.It tty
d184 1
a184 1
.It image
d187 7
a193 3
.It stty Op Ar baudrate
Displays or sets the baudrate for serial console.  If the currently
active console is a serial console, gives you five seconds of pause
d195 1
a195 1
speed to match.  If the active console is
d197 1
a197 1
a serial console, sets the baudrate value to be used the
d199 2
a200 2
time you switch to a serial console. (The baudrate value is not used
for the pc0 console.)
d226 1
a226 2
The official home page for the version of zlib used in
.Ox
@


1.5
log
@right zlib Xr, 10x todd
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.4 1997/09/06 00:37:34 deraadt Exp $
d38 1
a38 1
secondary system bootstrap program
d41 1
a41 1
all the bugs and bottlenecks of the PC BIOS ``architecture'' and philosophy.
d47 3
a49 3
primary bootstrap loader and will give you a convinient way to load the kernel.
This program acts as an enhanced boot monitor or ROM for PC systems, providing
a buffer or common interface for the kernel to start from.
d54 1
a54 1
Detecting and switching between multiple console types.
d59 1
a59 4
.Xr gzip 1
program or
.Xr zlib 3
routines.
d66 5
a70 7
The sequences of its operation consist of initialization
followed by an interactive command line. While at the command
line you have a timeout of 5 seconds (initially, then increasing
by one second on every subsequent kernel load failure)
to type any commands, if needed. Upon timeout expiration, the
kernel will be loaded according to the current variables
settings (See the
d72 2
a73 2
command for details).
The sequence of
d78 2
a79 2
Setup protected mode involving IDT setup for processor exceptions to
be caught and reported, and setup a simple real-mode BIOS interface.
d81 9
a89 8
Probe for console devices, which includes the PC VGA+Keyboard console
and up to four serial consoles connected to the serial ports.
Corresponding messages report about the found devices to the default
console device, which is pc0, if present.
.It
Probe for memory. Conventional memory is probed by quering the BIOS.
Extended memory is probed by running through the memory probing
for present pages, which eliminates the BIOS restriction of 64M of memory.
d94 1
a94 1
Open, and if successfull process
d96 1
a96 1
file on the same filesystem
d98 1
a98 1
was loaded from. This file may contain any commands
d101 1
a101 2
Usually they are commands that change boot parameters according to your
environment, although default values are usable in most cases.
d131 1
a131 1
either of each maybe omitted (':' is not needed if both)
d135 4
a138 2
.It echo
Prints it's arguments.
d159 4
a162 1
If invoked without arguments will print a list of variables with values.
d167 1
a167 1
present will set variable with that name to the given value.
d186 13
d205 1
a205 1
primary bootstrap
d211 1
a211 1
system code
a216 1
.Xr boot 8 ,
@


1.4
log
@more cleaning
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot.8,v 1.3 1997/09/05 21:25:16 weingart Exp $
d205 7
a211 2
.Xr gzip 1 ,
.%B http://quest.jpl.nasa.gov/zlib/ .
@


1.3
log
@Finishing? touches.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d41 1
a41 1
all the bugs and bottlenecks of the PC ``architecture'' and philosophy.
d47 1
a47 1
primary bootstrap loader and will give you convinient way to load the kernel.
d54 1
a54 1
Detecting and switching between multiple consoles.
d61 1
a61 1
.Xr zlib
d91 3
a93 3
Probe for memory. Conventional memory probed by quering the BIOS.
Extended memory probed by running through the memory probing
for present pages, which elliminates BIOS restriction for 64M of memory.
d108 1
a108 1
Header line
d137 1
a137 1
in wich case values from
@


1.2
log
@man this; read, if you can read
@
text
@d40 2
a41 2
The main purpose of this program is to load system kernel dealing with
all the bugs and bottlenecks of the PC hardware and it's way of design.
d43 1
a43 1
As described in the
d47 3
a49 1
primary bootstrap loader and will give you convinient way to load kernel.
d56 1
a56 1
Loading kernel from any device supported by your system BIOS.
d64 1
a64 1
Passing system parameters queried from BIOS to the kernel.
d66 1
a66 1
Providing interactive command line.
d69 2
a70 2
The sequence of it's operation consists of initialization
followed by interactive command line. While in the command
d72 2
a73 2
by one second on every consequent kernel loading failure)
to type any commands if needed. Upon timeout expiration
d75 1
a75 1
settings (See
d80 1
a80 1
operations is like follows:
d84 1
a84 1
be caught and reported and simple real-mode BIOS interface provided.
d86 4
a89 4
Probe for console devices, which involves PC internal VGA+keyboard
console and serial console over any of four serial ports. Correspondent
messages reports about found devices to the default console device,
which is pc0, if present.
d94 1
a94 1
found memory is reported as well to the default console device.
d96 1
a96 1
Probe for APM support in BIOS. Message printed if support is present.
d98 1
a98 1
Open, and if successfull, process
d105 1
a105 1
Ussually they are commands that changes boot parameters according to your
d121 1
a121 1
commands. If you won't,
d123 2
a124 1
will proceed loading kernel w/ default parameters.
d150 1
a150 1
BIOS device number, BIOS translated geometry.
d155 2
a156 2
in long format including: file type and attributes, owner, group,
size, and ilename.
d158 1
a158 1
Prints contents of processor registers, if defined for this architecture.
d162 1
a162 1
If invoked without arguments will print list of variables with values.
d169 1
d176 3
a178 1
Debug flag if compiled w/ DEBUG defined.
@


1.1
log
@Initial /boot stuff (from Mickey)
@
text
@d1 205
@

