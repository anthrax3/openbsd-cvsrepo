head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.10
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.8
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.4
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.25.0.10
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.6
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.24.0.8
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.6
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.4
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.2
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.14
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.10
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.12
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.8
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.6
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.21.0.8
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.6
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.4
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.20.0.4
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.2
	OPENBSD_3_6_BASE:1.20
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	UBC_SYNC_B:1.14
	UBC:1.13.0.4
	UBC_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.12.0.10
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.8
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.4
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.26
date	2015.09.10.15.16.43;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	yPhLfPulVSum2r0H;

1.25
date	2013.10.28.15.15.08;	author stsp;	state Exp;
branches;
next	1.24;

1.24
date	2011.12.03.23.01.21;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2010.08.10.20.34.16;	author sobrado;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.31.19.20.03;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2005.07.15.09.12.04;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.03.10.15.37;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.12.14.54.04;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.26.23.21.49;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.06.21.45.33;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.20.22.11;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.29.16.53.37;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.12.15.24.05;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.29.07.04.41;	author mickey;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	99.09.23.04.12.08;	author alex;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	99.09.15.18.54.55;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	99.07.09.13.35.33;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.23.14.11.28;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.16.19.57.53;	author alex;	state Exp;
branches;
next	1.7;

1.7
date	98.09.07.16.44.38;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	97.10.07.09.24.09;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.09.20.22.40.33;	author flipk;	state Exp;
branches;
next	1.4;

1.4
date	97.09.05.21.25.15;	author weingart;	state Exp;
branches;
next	1.3;

1.3
date	97.09.05.17.59.27;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.31.03.12.00;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	96.12.03.13.16.51;	author mickey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.12.03.13.16.52;	author mickey;	state Exp;
branches;
next	;

1.12.4.1
date	2001.07.04.10.18.08;	author niklas;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2002.03.28.10.31.05;	author niklas;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2003.03.27.23.26.56;	author niklas;	state Exp;
branches;
next	1.12.4.4;

1.12.4.4
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.12.4.5;

1.12.4.5
date	2004.02.19.10.48.42;	author niklas;	state Exp;
branches;
next	1.12.4.6;

1.12.4.6
date	2004.06.05.23.09.00;	author niklas;	state Exp;
branches;
next	;

1.13.4.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.26
log
@reduce .Nd to one line and kill .Tn while here
@
text
@.\"	$OpenBSD: biosboot.8,v 1.25 2013/10/28 15:15:08 stsp Exp $
.\"
.\" Copyright (c) 2003 Tom Cosgrove <tom.cosgrove@@arches-consulting.com>
.\" Copyright (c) 1997 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: October 28 2013 $
.Dt BIOSBOOT 8 i386
.Os
.Sh NAME
.Nm biosboot
.Nd i386-specific first-stage system bootstrap
.Sh DESCRIPTION
This small program (roughly 512 bytes of code) is responsible for
loading the second-stage
.Xr boot 8
program (typically /boot), which in turn will load the kernel.
.Pp
.Nm
must be installed by
.Xr installboot 8 .
As part of the installation,
.Xr installboot 8
patches
.Nm
with information about the location of
.Xr boot 8
on disk.
Specifically, it writes the filesystem block number of
.Xr boot 8 Ns 's
inode,
the offset within this block of the inode,
and various filesystem parameters (taken from the superblock)
required to convert filesystem blocks to disk sectors.
Usually,
.Xr boot 8
is loaded from the root filesystem of the boot disk.
If the boot disk is a
.Xr softraid 4
volume,
.Xr installboot 8
arranges for a copy of
.Xr boot 8
to be loaded from a dedicated single-inode filesystem located within
the volume's meta data area.
.Pp
You must re-run
.Xr installboot 8
whenever
.Xr boot 8
is changed, as its inode may change.
While it should not be necessary,
it may also be advisable to re-run
.Xr installboot 8
if you move your disk between machines and/or controllers.
.Pp
When
.Nm
receives control from either the BIOS or the
master boot record (MBR) it will print the message:
.Pp
.Dl Loading
.Pp
followed by a dot for every filesystem block it attempts to load.
If /boot is loaded successfully,
.Nm
will put the cursor on the next line just before
transferring control to the newly-loaded program.
.Pp
If possible,
.Nm
will read disk sectors using calls detailed in the Phoenix
Enhanced Disk Drive Specification (EDD, sometimes known as LBA, reads).
It will fall back to CHS reads only if EDD calls are not available.
However, to allow users to boot on hardware that claims LBA capability,
but which requires CHS reads in order to boot,
the user may hold down either Shift key during boot.
If
.Nm
detects this, it will force itself to use CHS calls, ignoring
any LBA capability.
This will of course prevent booting if /boot lies above the 8 GB
CHS limit.
There is an exported symbol
.Dq force_chs
of type u_int8_t
which may be set to 1 to force CHS reads always.
(However, no tool is currently provided to set this flag.)
.Sh DIAGNOSTICS
.Nm
prints a
.Sq !\&
before the
.Dq Loading
message if it is being forced to use CHS rather than LBA reads
(by the user holding down either Shift key during boot,
or having set the
.Dq force_chs
flag in the boot sector).
.Pp
.Nm
prints a
.Sq ;\&
after the
.Dq Loading
message if it is going to use CHS reads for any reason.
For example, when booting from floppy or CD-ROM.
.Pp
.Nm
may fail with any of the following error messages:
.Bl -tag -width ERR_X__
.It Er ERR I
Too many indirect blocks.
.Nm
is capable of reading the direct blocks in
.Xr boot 8 Ns 's
inode (the location of which is patched into
.Nm
by
.Xr installboot 8 )
and the first indirect block,
but it is not capable of reading further indirect blocks.
This error indicates that further such indirect blocks were found.
The system will not be able to boot.
.Pp
This is unlikely to ever happen in practice, as
.Xr boot 8
has to be quite large for this to be an issue.
The smallest possible filesystem block size is 512 bytes
(one sector per filesystem block).
On such a system, there are 140 filesystem blocks that
.Nm
can read, so
.Xr boot 8
can be up to 70 KB.
.Pp
However, even on floppy disks the filesystem block size is 1024 bytes.
This allows
.Xr boot 8
to occupy up to 268 disk blocks,
i.e. to be 268 KB.
On hard disks (default filesystem block size 16 KB)
4,108 disk blocks are available, to allow
.Xr boot 8
to be over 64 MB in size!
(Only direct blocks are required for
.Xr boot 8 Ns s
of up to 192 KB.)
.It Er ERR M
Bad magic.
The ELF
.Dq magic number
\e7fELF in
.Xr boot 8 Ns 's
header was not found.
This indicates that the first block of
.Xr boot 8
was not read correctly.
This could be due to disk corruption,
failing to run
.Xr installboot 8 ,
giving an invalid
.Xr boot 8
program as the
.Ar boot
argument to
.Xr installboot 8 ,
or
incorrect geometry translation.
.It Er ERR R
Read error.
The BIOS returned an error indication when
.Nm
attempted to read a disk sector.
This might be any media error, including bad sectors (common on floppy disks),
and invalid sectors (can occur with bad geometry translations).
.Pp
If this error occurs during an LBA boot (no
.Sq ;\&
after
.Dq Loading ) ,
then a CHS boot may succeed.
To do this, you should reboot, then hold down either Shift key
before
.Nm
starts.
You should see a
.Sq !\&
before
.Dq Loading
as confirmation that your
override was accepted.
.It Er ERR X
Can't boot.
Issued when trying to read sectors in CHS mode,
but the BIOS call
.Em get\ drive\ parameters
failed or gave a value of 0 for the number of sectors per track.
In either case, it is not possible for
.Nm
to calculate the (cylinder, head, sector) values required to
read any sectors.
.El
.Sh NOTES
Using
.Nm
as the MBR,
as has been done in the past,
is not recommended, and is not supported.
Instead, create a single
.Xr fdisk 8
partition that spans the entire disk.
.Pp
Despite the support for
.Xr boot 8
over the 8 GB boundary,
good
.Xr disklabel 8
partitioning practices should still be followed.
.Sh FILES
.Bl -tag -width /usr/mdec/biosbootxx -compact
.It Pa /usr/mdec/mbr
Master Boot Record block
.It Pa /usr/mdec/biosboot
primary bootstrap
.It Pa /boot
secondary bootstrap
.It Pa /usr/mdec/pxeboot
PXE bootstrap
.It Pa /bsd
.Ox
kernel
.It Pa /bsd.sp
.Ox
kernel for single processor machines
.It Pa /bsd.mp
.Ox
kernel for multiprocessor machines
.It Pa /bsd.rd
.Ox
kernel for installation/recovery
.El
.Sh SEE ALSO
.Xr softraid 4 ,
.Xr boot 8 ,
.Xr boot_i386 8 ,
.Xr disklabel 8 ,
.Xr fdisk 8 ,
.Xr installboot 8 ,
.Xr pxeboot 8
.Sh HISTORY
.Nm
was originally written by Michael Shalayeff for
.Ox 2.1 .
However it was based on bootstrap code from older versions of this
operating system, other operating systems, other programs, and
other people's work.
.Pp
It was significantly revised in December 2003 by Tom Cosgrove,
in order to support LBA disk access (via the Phoenix Enhanced Disk
Drive Specification API).
At that time the internal table of disk blocks was removed, and
.Nm
modified to read filesystem block numbers from the inode.
.Sh BUGS
.Nm
should perform and verify a checksum across the entire loaded
.Xr boot 8
image,
rather than just checking the magic number in the first block.
.Pp
There is no BIOS error number reported nor is the location of the error
reported.
.Pp
You can pick your motherboard, and you can pick your BIOS,
but you can't pick your motherboard's BIOS.
@


1.25
log
@Document softraid boot process for i386/amd64.

Requested by Adam Thompson.
suggestions and ok deraadt, earlier version ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.24 2011/12/03 23:01:21 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: December 3 2011 $
d33 1
a33 2
.Nd
i386-specific first-stage system bootstrap
@


1.24
log
@Remove an OpenBSD-specific tweak regarding .Xr spacing
and make it compatible with bsd.lv mandoc and with groff-1.21.
This tweak was originally added for compatibility with groff-1.15,
which is no longer needed.

ok jmc@@ kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.23 2010/08/10 20:34:16 sobrado Exp $
d28 1
a28 1
.Dd $Mdocdate: August 10 2010 $
d57 11
d266 1
@


1.23
log
@add a description for bsd.sp where appropriate; while here, write
"multiprocessor" in a consistent way.

written with lots of good advice from jmc@@, who noted that changing
hier(7) was not enough and carefully reviewed this diff.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.22 2007/05/31 19:20:03 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d52 1
a52 1
.Xr boot 8 's
d127 1
a127 1
.Xr boot 8 's
d158 1
a158 1
.Xr boot 8 s
d165 1
a165 1
.Xr boot 8 's
@


1.22
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.21 2005/07/15 09:12:04 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate$
d244 3
d249 1
a249 1
kernel for multi-processor machines
@


1.21
log
@- add /bsd.rd to FILES
- for amd64/i386 add /bsd.mp to FILES

ok tom@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.20 2004/04/03 10:15:37 jmc Exp $
d28 1
a28 1
.Dd December 23, 2003
@


1.20
log
@add pxeboot references to FILES and SEE ALSO;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.19 2004/03/12 14:54:04 jmc Exp $
d244 6
@


1.19
log
@missing .El;
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.18 2004/01/26 23:21:49 tom Exp $
d239 2
d250 2
a251 1
.Xr installboot 8
@


1.18
log
@Major overhaul of biosboot and installboot, using EDD (LBA) reads if
the BIOS supports it.  File location data now geometry-independent
(biosboot groks part of the inode), so installboot loses -h and -s.

Many thanks to all those brave enough to try the snapshots.  Thanks
for the test reports, everyone.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.17 2003/06/06 21:45:33 jmc Exp $
d214 1
@


1.17
log
@- section reorder
- new sentence, new line
- some macro fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.16 2003/06/03 20:22:11 mickey Exp $
d3 1
d28 1
a28 1
.Dd September 1, 1997
d37 1
a37 1
loading the second stage
d39 1
a39 2
program, which in turn will load the kernel.
It takes no input or options directly.
a40 1
In order for
d42 10
a51 2
to load the second-stage bootstrap, it has a table inside it which
describes
d53 6
a58 3
location.
.Nm
must be installed by, and have its block table filled in by, the
d60 5
a64 2
program.
As this data is BIOS dependent, you must re-run
d66 1
a66 3
each time you reinstall
.Xr boot 8
or move your disk or software between machines and/or controllers.
d70 4
a73 1
receives control from either the BIOS or the MBR it will print the message:
d75 5
a79 1
.Dl loading /boot
d81 19
a99 3
followed by a dot for every successfully loaded block,
and then put the cursor on the next line right before switching into
protected mode and transferring control to the just loaded /boot program.
d101 85
a185 4
Diagnostics consist of two error messages:
.Bl -tag -width read_error_
.It Er Read error
Some kind of error returned by the BIOS read call.
d187 1
a187 10
and invalid sectors (can occur with messed up geometry translations).
.It Er Bad magic
The just loaded /boot image contains a bad magic in its header.
This might indicate some kind of hardware problem, the
.Ar boot
argument to the
.Xr installboot 8
command was not a valid /boot program, or /boot has been moved or
changed.
.El
d189 7
a195 8
Other common reasons for these errors to appear is that a wrong BIOS geometry
has been used in
.Xr installboot 8
for the device you are booting from.
.Sh NOTES
The practice of making
.Ox
use the whole disk (ie: having
d197 14
a210 4
as the MBR) has been deprecated, and will not work on certain BIOS versions.
There is a lot of strange behaviour with different BIOSes; one well
known lobotomy case is that the BIOS does not pass the right boot drive
number to the
d212 4
a215 2
program.
This is one of the main reasons that having
d217 13
a229 1
as the MBR has been deprecated.
d239 2
a240 1
system code
d245 1
d249 2
a250 1
This program was written by Michael Shalayeff for
d252 1
a252 1
However it's based on bootstrap code from older versions of this
d255 7
d263 5
a267 4
It should do a checksum over the loaded /boot image, and check that against
a value that
.Xr installboot 8
has precomputed.
@


1.16
log
@three four kills
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.15 2003/01/29 16:53:37 jmc Exp $
d50 2
a51 1
program.  As this data is BIOS dependent, you must re-run
d70 2
a71 2
Some kind of error returned by the BIOS read call. This might be
any media error, including bad sectors (common on floppy disks),
d74 2
a75 2
The just loaded /boot image contains a bad magic in its header.  This
might indicate some kind of hardware problem, the
d88 3
a90 1
The practice of making OpenBSD use the whole disk (ie: having
d97 2
a98 1
program.  This is one of the main reasons that having
d117 6
a133 6
.Sh HISTORY
This program was written by Michael Shalayeff for
.Ox 2.1 .
However it's based on bootstrap code from older versions of this
operating system, other operating systems, other programs, and
other people's work.
@


1.15
log
@typos;

many tweaks by millert@@ (thanks)
thanks mpech@@ for help with adduser(8)

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.14 2002/03/12 15:24:05 mickey Exp $
a13 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Michael Shalayeff.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
@


1.14
log
@extraneous 'or'; from Sven Kirmess <sven.kirmess@@gmx.net>
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.13 2001/06/29 07:04:41 mickey Exp $
d43 1
a43 1
program, which in turn, will load the kernel.
d68 1
a68 1
and then put cursor on the next line right before switching into
d95 2
a96 2
There is a lot of strange behaviour with different BIOS's, one of well
known lobotomy cases is that the BIOS does not pass the right boot drive
@


1.13
log
@biosboot is more than 256 bytes for a while now
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.12 1999/09/23 04:12:08 alex Exp $
d83 1
a83 1
command was not a valid /boot program, or /boot or has been moved or
@


1.13.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.13 2001/06/29 07:04:41 mickey Exp $
d83 1
a83 1
command was not a valid /boot program, or /boot has been moved or
@


1.13.4.2
log
@sync
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d43 1
a43 1
program, which in turn will load the kernel.
d68 1
a68 1
and then put the cursor on the next line right before switching into
d95 2
a96 2
There is a lot of strange behaviour with different BIOSes; one well
known lobotomy case is that the BIOS does not pass the right boot drive
@


1.12
log
@Typo fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.11 1999/09/15 18:54:55 mickey Exp $
d40 1
a40 1
This small program (roughly 256 bytes of code) is responsible for
@


1.12.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.12 1999/09/23 04:12:08 alex Exp $
d40 1
a40 1
This small program (roughly 512 bytes of code) is responsible for
@


1.12.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d83 1
a83 1
command was not a valid /boot program, or /boot has been moved or
@


1.12.4.3
log
@Sync the SMP branch with 3.3
@
text
@d43 1
a43 1
program, which in turn will load the kernel.
d68 1
a68 1
and then put the cursor on the next line right before switching into
d95 2
a96 2
There is a lot of strange behaviour with different BIOSes; one well
known lobotomy case is that the BIOS does not pass the right boot drive
@


1.12.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.12.4.3 2003/03/27 23:26:56 niklas Exp $
d14 5
d55 1
a55 2
program.
As this data is BIOS dependent, you must re-run
d74 2
a75 2
Some kind of error returned by the BIOS read call.
This might be any media error, including bad sectors (common on floppy disks),
d78 2
a79 2
The just loaded /boot image contains a bad magic in its header.
This might indicate some kind of hardware problem, the
d92 1
a92 3
The practice of making
.Ox
use the whole disk (ie: having
d99 1
a99 2
program.
This is one of the main reasons that having
a117 6
.Sh HISTORY
This program was written by Michael Shalayeff for
.Ox 2.1 .
However it's based on bootstrap code from older versions of this
operating system, other operating systems, other programs, and
other people's work.
d129 6
@


1.12.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a2 1
.\" Copyright (c) 2003 Tom Cosgrove <tom.cosgrove@@arches-consulting.com>
d27 1
a27 1
.Dd December 23, 2003
d36 1
a36 1
loading the second-stage
d38 2
a39 1
program (typically /boot), which in turn will load the kernel.
d41 1
d43 6
a48 3
must be installed by
.Xr installboot 8 .
As part of the installation,
d50 2
a51 13
patches
.Nm
with information about the location of
.Xr boot 8
on disk.
Specifically, it writes the filesystem block number of
.Xr boot 8 's
inode,
the offset within this block of the inode,
and various filesystem parameters (taken from the superblock)
required to convert filesystem blocks to disk sectors.
.Pp
You must re-run
d53 1
a53 1
whenever
d55 1
a55 5
is changed, as its inode may change.
While it should not be necessary,
it may also be advisable to re-run
.Xr installboot 8
if you move your disk between machines and/or controllers.
d59 1
a59 4
receives control from either the BIOS or the
master boot record (MBR) it will print the message:
.Pp
.Dl Loading
d61 1
a61 5
followed by a dot for every filesystem block it attempts to load.
If /boot is loaded successfully,
.Nm
will put the cursor on the next line just before
transferring control to the newly-loaded program.
d63 3
a65 19
If possible,
.Nm
will read disk sectors using calls detailed in the Phoenix
Enhanced Disk Drive Specification (EDD, sometimes known as LBA, reads).
It will fall back to CHS reads only if EDD calls are not available.
However, to allow users to boot on hardware that claims LBA capability,
but which requires CHS reads in order to boot,
the user may hold down either Shift key during boot.
If
.Nm
detects this, it will force itself to use CHS calls, ignoring
any LBA capability.
This will of course prevent booting if /boot lies above the 8 GB
CHS limit.
There is an exported symbol
.Dq force_chs
of type u_int8_t
which may be set to 1 to force CHS reads always.
(However, no tool is currently provided to set this flag.)
d67 9
a75 75
.Nm
prints a
.Sq !\&
before the
.Dq Loading
message if it is being forced to use CHS rather than LBA reads
(by the user holding down either Shift key during boot,
or having set the
.Dq force_chs
flag in the boot sector).
.Pp
.Nm
prints a
.Sq ;\&
after the
.Dq Loading
message if it is going to use CHS reads for any reason.
For example, when booting from floppy or CD-ROM.
.Pp
.Nm
may fail with any of the following error messages:
.Bl -tag -width ERR_X__
.It Er ERR I
Too many indirect blocks.
.Nm
is capable of reading the direct blocks in
.Xr boot 8 's
inode (the location of which is patched into
.Nm
by
.Xr installboot 8 )
and the first indirect block,
but it is not capable of reading further indirect blocks.
This error indicates that further such indirect blocks were found.
The system will not be able to boot.
.Pp
This is unlikely to ever happen in practice, as
.Xr boot 8
has to be quite large for this to be an issue.
The smallest possible filesystem block size is 512 bytes
(one sector per filesystem block).
On such a system, there are 140 filesystem blocks that
.Nm
can read, so
.Xr boot 8
can be up to 70 KB.
.Pp
However, even on floppy disks the filesystem block size is 1024 bytes.
This allows
.Xr boot 8
to occupy up to 268 disk blocks,
i.e. to be 268 KB.
On hard disks (default filesystem block size 16 KB)
4,108 disk blocks are available, to allow
.Xr boot 8
to be over 64 MB in size!
(Only direct blocks are required for
.Xr boot 8 s
of up to 192 KB.)
.It Er ERR M
Bad magic.
The ELF
.Dq magic number
\e7fELF in
.Xr boot 8 's
header was not found.
This indicates that the first block of
.Xr boot 8
was not read correctly.
This could be due to disk corruption,
failing to run
.Xr installboot 8 ,
giving an invalid
.Xr boot 8
program as the
d77 5
a81 11
argument to
.Xr installboot 8 ,
or
incorrect geometry translation.
.It Er ERR R
Read error.
The BIOS returned an error indication when
.Nm
attempted to read a disk sector.
This might be any media error, including bad sectors (common on floppy disks),
and invalid sectors (can occur with bad geometry translations).
d83 8
a90 7
If this error occurs during an LBA boot (no
.Sq ;\&
after
.Dq Loading ) ,
then a CHS boot may succeed.
To do this, you should reboot, then hold down either Shift key
before
d92 4
a95 14
starts.
You should see a
.Sq !\&
before
.Dq Loading
as confirmation that your
override was accepted.
.It Er ERR X
Can't boot.
Issued when trying to read sectors in CHS mode,
but the BIOS call
.Em get\ drive\ parameters
failed or gave a value of 0 for the number of sectors per track.
In either case, it is not possible for
d97 2
a98 4
to calculate the (cylinder, head, sector) values required to
read any sectors.
.Sh NOTES
Using
d100 1
a100 13
as the MBR,
as has been done in the past,
is not recommended, and is not supported.
Instead, create a single
.Xr fdisk 8
partition that spans the entire disk.
.Pp
Despite the support for
.Xr boot 8
over the 8 GB boundary,
good
.Xr disklabel 8
partitioning practices should still be followed.
d110 1
a110 2
.Ox
kernel
a114 1
.Xr disklabel 8 ,
d118 1
a118 2
.Nm
was originally written by Michael Shalayeff for
d120 1
a120 1
However it was based on bootstrap code from older versions of this
a122 7
.Pp
It was significantly revised in December 2003 by Tom Cosgrove,
in order to support LBA disk access (via the Phoenix Enhanced Disk
Drive Specification API).
At that time the internal table of disk blocks was removed, and
.Nm
modified to read filesystem block numbers from the inode.
d124 4
a127 5
.Nm
should perform and verify a checksum across the entire loaded
.Xr boot 8
image,
rather than just checking the magic number in the first block.
@


1.12.4.6
log
@Merge with the trunk
@
text
@a213 1
.El
a237 2
.It Pa /usr/mdec/pxeboot
PXE bootstrap
d247 1
a247 2
.Xr installboot 8 ,
.Xr pxeboot 8
@


1.11
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.10 1999/07/09 13:35:33 aaron Exp $
d55 1
a55 1
program.  As this data is BIOS dependant, you must re-run
@


1.10
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.9 1999/05/23 14:11:28 aaron Exp $
d26 1
a26 1
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
d38 1
a38 1
first-stage system bootstrap
a118 2
It contains a fake partition table and associated things that it should not.
.Pp
@


1.9
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.8 1999/05/16 19:57:53 alex Exp $
d20 2
a21 2
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d51 1
a51 1
location. 
d55 1
a55 1
program.  As this data is BIOS dependant, you must re-run 
d61 1
a61 1
When 
d93 1
a93 1
.Nm                                                                            
@


1.8
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.7 1998/09/07 16:44:38 aaron Exp $
d34 1
a34 1
.Os OpenBSD 2.1
@


1.7
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.6 1997/10/07 09:24:09 mickey Exp $
d114 1
d117 1
a117 2
.Xr installboot 8 ,
.Xr boot 8 .
@


1.6
log
@cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.5 1997/09/20 22:40:33 flipk Exp $
d78 1
a78 1
The just loaded /boot image contains a bad magic in it's header.  This
d94 1
a94 1
as the MBR) has been depreciated, and will not work on certain BIOS versions.
d101 1
a101 1
as the MBR has been depreciated.
@


1.5
log
@- add 'stty [baudrate]' command to /boot, for serial consoles
- switch baud rates using i/o instead of bios, since bios commands
have only a limited bitwidth for baudrate, and max out at 9600
- when switching console devices, print msg to both old device and new
- fix timeout bug in com_getc() (dev | 0x80 was reading gobbledygook)
- document 'stty' command in boot(8)
- wording and cleanup in man pages
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.4 1997/09/05 21:25:15 weingart Exp $
d132 2
a133 1
This program was written by Michael Shalayeff for OpenBSD.
@


1.4
log
@Finishing? touches.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.2 1997/03/31 03:12:00 weingart Exp $
d38 1
a38 1
primary system bootstrap program
d44 1
a44 1
It is a small piece of code that takes no input or options.
d46 1
a46 3
The location of the
.Xr boot 8
program that
d48 4
a51 1
loads, is stored in a block table inside the
d53 1
a53 1
program.  The
d55 1
a55 3
program is used to fill this table with the location of the
.Nm
program.  This location is BIOS dependant, so you have to run the
d57 3
a59 2
program to update this table every time you move your disk between
machines and/or controllers.
d79 1
a79 1
might indicate some kind of hardware problem,  or it may mean that the
d83 2
a84 1
command was not a valid /boot program.
@


1.3
log
@some manual
@
text
@d34 1
a34 1
.Os
d40 2
a41 2
This small program (about of 256 bytes of code) is responsible for
loading second stage
d44 3
a46 2
It is small, robust and takes neither input nor options.
Location of the
d48 3
a50 1
program is stored in the block table inside of the
d52 1
a52 1
by the
d54 3
a56 1
program, and is very machine dependant. So, you have to run
d58 2
a59 2
program every time you are moving your disk between machines and/or
controllers.
d61 3
a63 1
When it receives control from either BIOS or MBR it will print message:
d68 1
a68 1
and then put cursor on the next line right before switching into the
d75 2
a76 1
any media error.
d78 2
a79 3
Just loaded /boot image contains bad magic in it's header.
This might indicate some kind of hardware problem.
This may also means that
d81 1
a81 1
argument for
d83 1
a83 1
program was actually not a valid /boot program.
d85 3
a87 2
Other common reason for those errors to appear is a wrong BIOS geometry
had been used in
d90 11
d108 1
a108 1
system bootstrap
d118 1
a118 1
It contains fake fdisk table and the stuff, that it should not.
d120 4
a123 3
It should check checksum over the loaded /boot image.
.Pp
There is neither BIOS error number reported nor the error location.
d125 2
a126 3
There is a lot of strange behaviour with different BIOSes, the one of well
known lobotomy cases is a wrong boot drive number passed to boot program
by BIOS.
d131 1
a131 2
This program was written by Michael Shalayeff for
.Ox 2.1 .
d134 1
a134 1
other people's works.
@


1.2
log
@Initial /boot stuff (from Mickey)
@
text
@d1 1
a1 2
.\"	$OpenBSD: biosboot.8,v 1.1.2.1 1996/12/03 13:16:52 mickey Exp $
.\"	$NetBSD: boot_i386.8,v 1.3 1995/04/23 10:33:35 cgd Exp $
d3 2
a4 5
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software written and contributed
.\" to Berkeley by William Jolitz.
d16 7
a22 9
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
d32 2
a33 4
.\"     @@(#)boot_i386.8	8.2 (Berkeley) 4/19/94
.\"
.Dd April 19, 1994
.Dt BOOT 8 i386
d36 1
a36 1
.Nm boot
d38 1
a38 1
system bootstrapping procedures
d40 42
a81 66
.Sy Power fail and crash recovery.
Normally, the system will reboot itself at power-up or after crashes.
An automatic consistency check of the file systems will be performed,
and unless this fails, the system will resume multi-user operations.
.Pp
.Sy Cold starts.
The 386
.Tn "PC AT"
clones attempt to boot the floppy disk drive A (otherwise known as drive
0) first, and failing that, attempt to boot the hard disk C (otherwise
known as hard disk controller 1, drive 0).
The automatic boot will attempt to load
.Pa bsd
from partition A of either the floppy or the hard disk.
This boot may be aborted by typing any character on the keyboard repeatedly
(four or five times at least) during the operating system load phase, after
which the bootstrap will prompt for the file that you wish to load instead.
.Pp
One exception to this is the
.Ql d
key, which will not abort the load but instead silently force the
.Dv DEBUG
boot flags.
The boot flags for an autoboot are 0, and 3 for the successive boot after
an aborted autoboot sequence.
No other provison is made for setting boot flags (yet).
A specific device or bootstrap file may be used; for example,
.Pp
The file specifications used for the boostrap
when loaded with the
.Dq askme
flag
(e.g. an aborted autoboot)
are of the form:
.Pp
.Dl device unit partition:
.Pp
where
.Ar device
is the type of the device, assumed to be on the ISA bus, to be searched,
.Ar unit
is the unit number of the disk or tape,
and
.Ar partition
is the disk partition or tape file number.
Normal line editing characters can be used when typing the file specification.
The following list of supported devices may vary from installation to
installation:
.Bd -unfilled -offset indent
wd	ST506, IDE, ESDI, RLL disks on a WD100[2367] or lookalike
	controller
fd	5 1/4" or 3 1/2" High density floppies
.Ed
.Pp
For example,
to boot from a file system which starts at cylinder 0
of unit 0 of an IDE disk, type
.Dq Li wd(0,a)/bsd
to the boot prompt;
.Dq Li fd(0,a)/bsd
would specify a 3 1/2" floppy drive 0 .
.Pp
In an emergency, the bootstrap methods described in the paper
.%T "Installing and Operating 4.3 BSD-Reno UNIX on the AT/386"
can be used
to boot from a distribution tape.
d83 5
a87 1
.Bl -tag -width /bsdxx -compact
d94 4
a97 4
.Xr boot 8 ,
.Xr halt 8 ,
.Xr reboot 8 ,
.Xr shutdown 8
d99 18
a116 4
The disklabel format used by this version of
.Bx
is quite
different from that of other architectures.
@


1.1
log
@file biosboot.8 was initially added on branch new.
@
text
@d1 130
@


1.1.2.1
log
@new hierarchy. raw /boot loading, just 1(one) boot stage.
@
text
@a0 129
.\"	$OpenBSD: boot_i386.8,v 1.3 1996/06/29 18:24:17 mickey Exp $
.\"	$NetBSD: boot_i386.8,v 1.3 1995/04/23 10:33:35 cgd Exp $
.\"
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software written and contributed
.\" to Berkeley by William Jolitz.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)boot_i386.8	8.2 (Berkeley) 4/19/94
.\"
.Dd April 19, 1994
.Dt BOOT 8 i386
.Os
.Sh NAME
.Nm boot
.Nd
system bootstrapping procedures
.Sh DESCRIPTION
.Sy Power fail and crash recovery.
Normally, the system will reboot itself at power-up or after crashes.
An automatic consistency check of the file systems will be performed,
and unless this fails, the system will resume multi-user operations.
.Pp
.Sy Cold starts.
The 386
.Tn "PC AT"
clones attempt to boot the floppy disk drive A (otherwise known as drive
0) first, and failing that, attempt to boot the hard disk C (otherwise
known as hard disk controller 1, drive 0).
The automatic boot will attempt to load
.Pa bsd
from partition A of either the floppy or the hard disk.
This boot may be aborted by typing any character on the keyboard repeatedly
(four or five times at least) during the operating system load phase, after
which the bootstrap will prompt for the file that you wish to load instead.
.Pp
One exception to this is the
.Ql d
key, which will not abort the load but instead silently force the
.Dv DEBUG
boot flags.
The boot flags for an autoboot are 0, and 3 for the successive boot after
an aborted autoboot sequence.
No other provison is made for setting boot flags (yet).
A specific device or bootstrap file may be used; for example,
.Pp
The file specifications used for the boostrap
when loaded with the
.Dq askme
flag
(e.g. an aborted autoboot)
are of the form:
.Pp
.Dl device unit partition:
.Pp
where
.Ar device
is the type of the device, assumed to be on the ISA bus, to be searched,
.Ar unit
is the unit number of the disk or tape,
and
.Ar partition
is the disk partition or tape file number.
Normal line editing characters can be used when typing the file specification.
The following list of supported devices may vary from installation to
installation:
.Bd -unfilled -offset indent
wd	ST506, IDE, ESDI, RLL disks on a WD100[2367] or lookalike
	controller
fd	5 1/4" or 3 1/2" High density floppies
.Ed
.Pp
For example,
to boot from a file system which starts at cylinder 0
of unit 0 of an IDE disk, type
.Dq Li wd0a:bsd
to the boot prompt;
.Dq Li fd0a:bsd
would specify a 3 1/2" floppy drive 0 .
.Pp
In an emergency, the bootstrap methods described in the paper
.%T "Installing and Operating 4.3 BSD-Reno UNIX on the AT/386"
can be used
to boot from a distribution tape.
.Sh FILES
.Bl -tag -width /bsdxx -compact
.It Pa /bsd
system code
.It Pa /boot
system bootstrap
.El
.Sh SEE ALSO
.Xr halt 8 ,
.Xr reboot 8 ,
.Xr shutdown 8
.Sh BUGS
The disklabel format used by this version of
.Bx
is quite
different from that of other architectures.
@
