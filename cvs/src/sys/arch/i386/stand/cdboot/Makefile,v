head	1.30;
access;
symbols
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.8
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@# @;


1.30
date	2017.06.01.11.18.53;	author naddy;	state Exp;
branches;
next	1.29;
commitid	2KWSDyINV9AVvCHv;

1.29
date	2016.09.18.16.34.59;	author jsing;	state Exp;
branches;
next	1.28;
commitid	xxSOamF7jPcxnio1;

1.28
date	2016.09.11.17.52.47;	author jsing;	state Exp;
branches;
next	1.27;
commitid	OIt9eg6fQy6pFToA;

1.27
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.26;
commitid	m28Q0aUDbVqwDb3p;

1.26
date	2016.09.10.16.38.16;	author jsing;	state Exp;
branches;
next	1.25;
commitid	Guvt83tYQgzHIRwk;

1.25
date	2016.07.30.03.25.48;	author guenther;	state Exp;
branches;
next	1.24;
commitid	HVbAtwruDlJazNH2;

1.24
date	2015.09.02.04.09.24;	author yasuoka;	state Exp;
branches;
next	1.23;
commitid	1T0xGkKNIiRZnTmz;

1.23
date	2014.07.15.22.14.37;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	NR8siXEkpaNp3MWn;

1.22
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.21;
commitid	Cnjup0HpCIRrcQ6o;

1.21
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.20;
commitid	3HeD4LaLGiS22I3y;

1.20
date	2013.12.28.02.51.07;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2013.06.02.21.01.48;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2013.04.23.16.41.13;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2013.01.18.21.09.04;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.18.04.10.16;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.18.03.45.23;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.31.14.32.16;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.29.14.39.08;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.09.11.43.22;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2012.09.25.09.01.03;	author pascal;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.29.22.23.08;	author pascal;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.10.17.09.15;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.10.16.11.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.25.18.25.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.29.00.03.10;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.30.14.32.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.24.15.28.41;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.06.21.33.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.23.00.21.49;	author tom;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Sync with amd64 and allow building the i386 bootstrap with clang:
* build with -ffreestanding
* skip the integrated assembler for assym.h
* use as(1) to build biosboot.S and the various versions of srt0.S
ok kettenis@@
@
text
@#	$OpenBSD: Makefile,v 1.29 2016/09/18 16:34:59 jsing Exp $

MAN=	cdboot.8

.if ${MACHINE} == "i386"
S=	${.CURDIR}/../../../..
SADIR=	${.CURDIR}/..

PROG=	cdboot
SRCS=	srt0.S boot.c conf.c
LD?=	ld
SIZE?=	size
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie -znorelro
INSTALL_STRIP=
BINMODE=644

CLEANFILES+=	crt0.o ${PROG}.whole

.PATH:	${SADIR}/libsa
SRCS+=	debug_i386.S gidt.S random_i386.S
SRCS+=	cmd_i386.c dev_i386.c exec_i386.c gateA20.c machdep.c
SRCS+=	apmprobe.c bioscons.c biosdev.c debug.c diskprobe.c memprobe.c \
	pciprobe.c ps2probe.c time.c
SRCS+=	softraid_i386.c

.PATH:	${S}/stand/boot
SRCS+=	bootarg.c cmd.c vars.c

.PATH:	${S}/lib/libsa
SRCS+=	alloc.c ctime.c exit.c getchar.c memcmp.c memcpy.c memset.c printf.c \
	putchar.c snprintf.c strcmp.c strerror.c strlen.c strncmp.c strncpy.c \
	strtol.c strtoll.c
SRCS+=	close.c closeall.c cons.c cread.c dev.c disklabel.c dkcksum.c fstat.c \
	lseek.c open.c read.c readdir.c stat.c
SRCS+=	elf32.c elf64.c loadfile.c
SRCS+=	cd9660.c ufs.c
SRCS+=	aes_xts.c bcrypt_pbkdf.c blowfish.c explicit_bzero.c hmac_sha1.c \
	pkcs5_pbkdf2.c rijndael.c sha1.c sha2.c softraid.c

.PATH:	${S}/lib/libkern/arch/i386
SRCS+=	moddi3.c divdi3.c qdivrem.c

.PATH:	${S}/lib/libkern
SRCS+=	strlcpy.c

.PATH:	${S}/lib/libz
SRCS+=	adler32.c crc32.c inflate.c inftrees.c

.depend srt0.o gidt.o: assym.h

${PROG}: $(OBJS)
	$(LD) $(LDFLAGS) -o ${PROG} $(OBJS)
	@@$(SIZE) ${PROG}
	cp ${PROG} ${PROG}.whole
	@@if [ -x ${.OBJDIR}/${PROG} ]; then \
		objcopy -O binary ${PROG} ${.OBJDIR}/.tmp;\
		mv -f ${.OBJDIR}/.tmp ${.OBJDIR}/${PROG}; \
		ls -l ${.OBJDIR}/${PROG}; \
	fi

.else
NOPROG=
.endif

.include <bsd.prog.mk>

CPPFLAGS+=-DSOFTRAID
CPPFLAGS+=-DBOOTMAGIC=$(BOOTMAGIC) ${DEBUGFLAGS}
CPPFLAGS+=-DLINKADDR=${LINKADDR}
CPPFLAGS+=-DSLOW -DSMALL -DNOBYFOUR -DNO_GZIP -DDYNAMIC_CRC_TABLE
CPPFLAGS+=-I${S}/stand/boot
CFLAGS+=${SACFLAGS} -D__INTERNAL_LIBSA_CREAD
CFLAGS+=-DOSREV=\"${OSREV}\" -DMACHINE=\"${MACHINE}\"
CFLAGS+=-DKERNEL=\"/${OSREV}/${MACHINE}/bsd.rd\"
CFLAGS+=-fno-pie
AFLAGS+=${NO_INTEGR_AS}
#AFLAGS+=-Wa,-R
# AFLAGS+=-Wa,-a
AFLAGS+=-fno-pie
@


1.29
log
@Add bcrypt pbkdf support to the softraid crypto boot loader code.

Based on a diff from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2016/09/11 17:52:47 jsing Exp $
d76 1
@


1.28
log
@Switch i386 boot code to libsa MI softraid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2016/09/11 15:54:11 jsing Exp $
d37 2
a38 2
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c \
	sha1.c softraid.c
@


1.27
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2016/09/10 16:38:16 jsing Exp $
d37 2
a38 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c sha1.c
@


1.26
log
@Rename libsa pbkdf2.c to pkcs5_pbkdf2.c so that we match libutil.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2016/07/30 03:25:48 guenther Exp $
d24 1
a24 1
SRCS+=	softraid.c
@


1.25
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2015/09/02 04:09:24 yasuoka Exp $
d37 1
a37 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pbkdf2.c rijndael.c sha1.c
@


1.24
log
@Bring the boot changes on amd64 to i386.  alloca is deleted.
Also fix the boot from BIOS and bump the version.

input and ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2014/07/15 22:14:37 deraadt Exp $
d13 1
a13 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie
@


1.23
log
@mode 644 for installing these files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2014/07/13 09:26:08 jasper Exp $
d20 1
a20 1
SRCS+=	alloca.S debug_i386.S gidt.S random_i386.S
@


1.22
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2014/07/12 21:54:58 jasper Exp $
d15 1
@


1.21
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2013/12/28 02:51:07 deraadt Exp $
d30 2
a31 2
	snprintf.c strcmp.c strerror.c strlen.c strncmp.c strncpy.c strtol.c \
	strtoll.c
@


1.20
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2013/06/02 21:01:48 guenther Exp $
d29 3
a31 2
SRCS+=	alloc.c ctime.c exit.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
	strcmp.c strerror.c strlen.c strncmp.c strncpy.c strtol.c strtoll.c
@


1.19
log
@Revert previous: libsa/ufs.c was fixed to not use big types when not
necessary.  If something crawls in again that needs these we want to know

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2013/01/18 21:09:04 espie Exp $
d19 1
a19 1
SRCS+=	alloca.S debug_i386.S gidt.S
@


1.18
log
@Include udivdi3/umoddi3 when compiling the amd64/i386 boot blocks - they
are needed for the upcoming type changes.

ok deraadt@@
@
text
@d38 1
a38 1
SRCS+=	divdi3.c moddi3.c qdivrem.c udivdi3.c umoddi3.c
@


1.17
log
@fix bogus dependencies, and allow mkdep to run
checked on amd64 by rpe@@
okay jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2013/01/18 04:10:16 jsing Exp $
d38 1
a38 1
SRCS+=	moddi3.c divdi3.c qdivrem.c
@


1.16
log
@Generate assym.h where we need it, instead of reaching around into other
object directories.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2013/01/18 03:45:23 jsing Exp $
d46 1
a46 2
${.CURDIR}/srt0.S: assym.h
${SADIR}/libsa/gidt.S: assym.h
@


1.15
log
@Clean up/standardise makefiles for i386/stand.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2012/10/31 14:32:16 jsing Exp $
d45 3
@


1.14
log
@Enable softraid boot support for cdboot(8) and pxeboot(8).
@
text
@d1 1
a1 3
#	$OpenBSD: Makefile,v 1.13 2012/10/29 14:39:08 jsing Exp $

.include "${.CURDIR}/../Makefile.inc"
d6 1
a6 1
S	=${.CURDIR}/../../../..
d46 2
a47 2
${PROG}: $(OBJS) $(DPADD)
	$(LD) $(LDFLAGS) -o ${PROG} $(OBJS) $(LDADD)
@


1.13
log
@Build i386 cdboot(8) and pxeboot(8) using the same method as the amd64
versions. Compile all required sources directly, rather than linking
against uninstalled libraries.

Discussed with deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/10/09 11:43:22 jsing Exp $
d25 1
d37 1
d64 1
@


1.12
log
@Remove -noinhibit-exec now that we no longer have to deal with
"relocation truncated" linker errors.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2012/09/25 09:01:03 pascal Exp $
d12 1
a12 1
SRCS=	srt0.S
d20 5
a24 3
SRCS+=	boot.c cmd.c vars.c bootarg.c conf.c
LDADD=	${LIBSA} ${LIBZ}
DPADD=	${LIBSA} ${LIBZ}
d26 13
a38 2
.PATH:	${S}/lib/libkern/arch/i386 ${S}/lib/libkern
SRCS+=	strlcpy.c moddi3.c divdi3.c qdivrem.c
d40 5
a44 1
.PATH:	${S}/stand/boot
d64 2
@


1.11
log
@Reduce the diff between amd64/stand and i386/stand, requested by deraadt@@.
These create essentially the same bootblocks, so the build system should not be
diverging too much, or at least easily diffable.
There is still a lot of work to be done here, but this is the low-hanging fruit.

ok jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2012/08/29 22:23:08 pascal Exp $
d15 1
a15 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec -nopie
@


1.10
log
@Kill all NOPIE and NOPIE_FLAGS in i386/stand, replacing them with -fno-pie
and -nopie directly.  Binaries from a PIE system are identical to those from
a recent snapshot.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2012/08/21 14:46:18 pascal Exp $
d8 3
d12 1
d15 1
a15 1
LDFLAGS+=-nostdlib -Bstatic
a17 1
LDFLAGS+=-Ttext $(LINKADDR) -N -x -noinhibit-exec -nopie
a18 1
SRCS=	srt0.S
a20 3
S	=${.CURDIR}/../../../..
SADIR=	${.CURDIR}/..

d33 1
a33 1
	if [ -x ${.OBJDIR}/${PROG} ]; then \
@


1.9
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2010/07/10 17:09:15 deraadt Exp $
d14 1
a14 1
LDFLAGS+=-Ttext $(LINKADDR) -N -x -noinhibit-exec
d51 1
a51 1
CFLAGS+=${NOPIE_FLAGS}
d54 1
a54 1
AFLAGS+=${NOPIE_FLAGS}
@


1.8
log
@and cdboot must be linked with -N still, too.  even more curious
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2010/07/10 16:11:44 deraadt Exp $
d51 1
d54 1
@


1.7
log
@link bootblocks with -Z instead of -N, to ensure that the file offset and
addresses line up correctly.  Newer i386 gcc4 - for some reason -- is
prompting the linker with -N to not do this alignment which it used to do
(perhaps because the alignment of all .o's have dropped to very small
amounts??).  Using -Z wastes around a page of bootblock space which matters
even more on the small install media, so this definately needs revisiting.
Workaround from toby
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2007/11/25 18:25:32 deraadt Exp $
d14 2
a15 2
LDFLAGS+=-Ttext $(LINKADDR) -Z -x -noinhibit-exec
CLEANFILES+=	crt0.o
@


1.6
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2007/05/29 00:03:10 deraadt Exp $
d14 1
a14 1
LDFLAGS+=-Ttext $(LINKADDR) -N -x -noinhibit-exec
d33 1
@


1.5
log
@remove support for many alternative kernel choices -- only try /bsd and
not the other stupid names.  that feature was retarded.  tested on a few
architectures by a few people
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/07/30 14:32:46 millert Exp $
d22 5
a26 2
LDADD=	${LIBSA} ${LIBZ} ${LIBKERN}
DPADD=	${LIBSA} ${LIBZ} ${LIBKERN}
@


1.4
log
@Add libkern and link it in after libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/08/24 15:28:41 tom Exp $
d18 1
a18 1
SRCS+=	cdboot.c cmd.c vars.c bootarg.c conf.c
d46 1
@


1.3
log
@Have cdboot look for /3.6/i386/bsd.rd first.

"go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/08/06 21:33:37 deraadt Exp $
d22 2
a23 2
LDADD=	${LIBSA} ${LIBZ}
DPADD=	${LIBSA} ${LIBZ}
@


1.2
log
@do not be quiet about this operation
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/06/23 00:21:49 tom Exp $
d18 1
a18 1
SRCS+=	boot.c cmd.c vars.c bootarg.c conf.c
d45 1
@


1.1
log
@Enter cdboot, a CD-specific second-stage bootrap.

Testing krw@@ and todd@@, thanks.

assistance, testing and ok weingart@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/03/19 13:48:19 tom Exp $
d30 1
a30 1
	@@if [ -x ${.OBJDIR}/${PROG} ]; then \
@

