head	1.52;
access;
symbols
	OPENBSD_6_2_BASE:1.52
	OPENBSD_6_1:1.51.0.4
	OPENBSD_6_1_BASE:1.51
	OPENBSD_6_0:1.50.0.10
	OPENBSD_6_0_BASE:1.50
	OPENBSD_5_9:1.50.0.6
	OPENBSD_5_9_BASE:1.50
	OPENBSD_5_8:1.50.0.8
	OPENBSD_5_8_BASE:1.50
	OPENBSD_5_7:1.50.0.2
	OPENBSD_5_7_BASE:1.50
	OPENBSD_5_6:1.50.0.4
	OPENBSD_5_6_BASE:1.50
	OPENBSD_5_5:1.49.0.6
	OPENBSD_5_5_BASE:1.49
	OPENBSD_5_4:1.49.0.2
	OPENBSD_5_4_BASE:1.49
	OPENBSD_5_3:1.47.0.2
	OPENBSD_5_3_BASE:1.47
	OPENBSD_5_2:1.46.0.6
	OPENBSD_5_2_BASE:1.46
	OPENBSD_5_1_BASE:1.46
	OPENBSD_5_1:1.46.0.4
	OPENBSD_5_0:1.46.0.2
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.45.0.2
	OPENBSD_4_9_BASE:1.45
	OPENBSD_4_8:1.43.0.2
	OPENBSD_4_8_BASE:1.43
	OPENBSD_4_7:1.42.0.4
	OPENBSD_4_7_BASE:1.42
	OPENBSD_4_6:1.42.0.6
	OPENBSD_4_6_BASE:1.42
	OPENBSD_4_5:1.42.0.2
	OPENBSD_4_5_BASE:1.42
	OPENBSD_4_4:1.41.0.4
	OPENBSD_4_4_BASE:1.41
	OPENBSD_4_3:1.41.0.2
	OPENBSD_4_3_BASE:1.41
	OPENBSD_4_2:1.40.0.2
	OPENBSD_4_2_BASE:1.40
	OPENBSD_4_1:1.38.0.2
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.36.0.2
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.34.0.2
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.32.0.6
	OPENBSD_3_8_BASE:1.32
	OPENBSD_3_7:1.32.0.4
	OPENBSD_3_7_BASE:1.32
	OPENBSD_3_6:1.32.0.2
	OPENBSD_3_6_BASE:1.32
	SMP_SYNC_A:1.31
	SMP_SYNC_B:1.31
	OPENBSD_3_5:1.31.0.2
	OPENBSD_3_5_BASE:1.31
	OPENBSD_3_4:1.30.0.2
	OPENBSD_3_4_BASE:1.30
	UBC_SYNC_A:1.28
	OPENBSD_3_3:1.28.0.4
	OPENBSD_3_3_BASE:1.28
	OPENBSD_3_2:1.28.0.2
	OPENBSD_3_2_BASE:1.28
	OPENBSD_3_1:1.25.0.2
	OPENBSD_3_1_BASE:1.25
	UBC_SYNC_B:1.28
	UBC:1.24.0.4
	UBC_BASE:1.24
	OPENBSD_3_0:1.24.0.2
	OPENBSD_3_0_BASE:1.24
	OPENBSD_2_9:1.23.0.2
	OPENBSD_2_9_BASE:1.23
	OPENBSD_2_8:1.21.0.6
	OPENBSD_2_8_BASE:1.21
	OPENBSD_2_7:1.21.0.4
	OPENBSD_2_7_BASE:1.21
	SMP:1.21.0.2
	SMP_BASE:1.21
	kame_19991208:1.20
	OPENBSD_2_6:1.20.0.2
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.19.0.2
	OPENBSD_2_5_BASE:1.19
	OPENBSD_2_4:1.16.0.4
	OPENBSD_2_4_BASE:1.16
	OPENBSD_2_3:1.16.0.2
	OPENBSD_2_3_BASE:1.16
	OPENBSD_2_2:1.15.0.2
	OPENBSD_2_2_BASE:1.15
	OPENBSD_2_1:1.14.0.2
	OPENBSD_2_1_BASE:1.14
	OPENBSD_2_0:1.12.0.2
	OPENBSD_2_0_BASE:1.12
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.52
date	2017.09.08.05.36.51;	author deraadt;	state Exp;
branches;
next	1.51;
commitid	uRv5pa9QDlZaYgwD;

1.51
date	2017.01.25.08.23.50;	author tom;	state Exp;
branches;
next	1.50;
commitid	BGgtqFHAgDJ7yyO2;

1.50
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.49;

1.49
date	2013.05.06.00.15.11;	author dlg;	state Exp;
branches;
next	1.48;

1.48
date	2013.04.17.18.35.47;	author gerhard;	state Exp;
branches;
next	1.47;

1.47
date	2012.11.10.09.45.05;	author mglocker;	state Exp;
branches;
next	1.46;

1.46
date	2011.07.05.17.11.07;	author oga;	state Exp;
branches;
next	1.45;

1.45
date	2010.08.11.21.22.44;	author kettenis;	state Exp;
branches;
next	1.44;

1.44
date	2010.08.10.02.23.31;	author marco;	state Exp;
branches;
next	1.43;

1.43
date	2010.07.25.21.43.37;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2009.01.29.13.36.17;	author kettenis;	state Exp;
branches;
next	1.41;

1.41
date	2007.11.28.17.05.09;	author tedu;	state Exp;
branches;
next	1.40;

1.40
date	2007.08.01.13.18.18;	author martin;	state Exp;
branches;
next	1.39;

1.39
date	2007.03.19.09.29.33;	author art;	state Exp;
branches;
next	1.38;

1.38
date	2006.12.20.17.50.40;	author gwk;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.19.11.06.33;	author jsg;	state Exp;
branches;
next	1.36;

1.36
date	2006.06.19.15.13.35;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.09.09.40.50;	author otto;	state Exp;
branches;
next	1.34;

1.34
date	2006.02.12.19.55.39;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2006.01.02.05.21.30;	author brad;	state Exp;
branches;
next	1.32;

1.32
date	2004.06.13.21.49.16;	author niklas;	state Exp;
branches;
next	1.31;

1.31
date	2004.02.27.21.07.49;	author grange;	state Exp;
branches;
next	1.30;

1.30
date	2003.06.02.23.27.47;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2003.05.27.23.52.01;	author fgsch;	state Exp;
branches;
next	1.28;

1.28
date	2002.07.06.19.14.20;	author nordin;	state Exp;
branches;
next	1.27;

1.27
date	2002.05.17.18.55.41;	author mickey;	state Exp;
branches;
next	1.26;

1.26
date	2002.05.16.15.33.10;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.21.20.38.42;	author mickey;	state Exp;
branches
	1.24.4.1;
next	1.23;

1.23
date	2001.02.19.04.57.02;	author ho;	state Exp;
branches;
next	1.22;

1.22
date	2001.02.13.17.19.12;	author ho;	state Exp;
branches;
next	1.21;

1.21
date	2000.01.29.04.27.48;	author mickey;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	99.10.06.07.36.55;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	99.01.31.14.56.01;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	99.01.13.07.26.00;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	99.01.02.00.02.55;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	97.12.17.09.11.08;	author downsj;	state Exp;
branches;
next	1.15;

1.15
date	97.06.25.06.24.24;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	97.04.11.21.18.03;	author maja;	state Exp;
branches;
next	1.13;

1.13
date	96.10.16.12.45.27;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.09.17.17.20.56;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	96.09.09.04.35.22;	author tholo;	state Exp;
branches;
next	1.10;

1.10
date	96.09.09.04.02.44;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	96.05.25.22.17.48;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.05.07.07.22.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.04.21.22.16.51;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.03.20.00.31.00;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.19.21.09.31;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.02.25.23.03.16;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.02.20.04.35.28;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.27.22.10.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.37;	author deraadt;	state Exp;
branches;
next	;

1.21.2.1
date	2001.04.18.16.07.51;	author niklas;	state Exp;
branches;
next	1.21.2.2;

1.21.2.2
date	2001.07.14.10.02.41;	author ho;	state Exp;
branches;
next	1.21.2.3;

1.21.2.3
date	2001.10.31.03.01.12;	author nate;	state Exp;
branches;
next	1.21.2.4;

1.21.2.4
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.21.2.5;

1.21.2.5
date	2003.03.27.23.26.55;	author niklas;	state Exp;
branches;
next	1.21.2.6;

1.21.2.6
date	2003.06.07.11.11.37;	author ho;	state Exp;
branches;
next	1.21.2.7;

1.21.2.7
date	2004.06.05.23.09.00;	author niklas;	state Exp;
branches;
next	;

1.24.4.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	1.24.4.2;

1.24.4.2
date	2002.10.29.00.28.04;	author art;	state Exp;
branches;
next	;


desc
@@


1.52
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: clock.c,v 1.51 2017/01/25 08:23:50 tom Exp $	*/
/*	$NetBSD: clock.c,v 1.39 1996/05/12 23:11:54 mycroft Exp $	*/

/*-
 * Copyright (c) 1993, 1994 Charles Hannum.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz and Don Ahn.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)clock.c	7.2 (Berkeley) 5/12/91
 */
/*
 * Mach Operating System
 * Copyright (c) 1991,1990,1989 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
  Copyright 1988, 1989 by Intel Corporation, Santa Clara, California.

		All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
 * Primitive clock interrupt routines.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/timeout.h>
#include <sys/timetc.h>
#include <sys/mutex.h>

#include <machine/cpu.h>
#include <machine/intr.h>
#include <machine/pio.h>
#include <machine/cpufunc.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/mc146818reg.h>
#include <dev/ic/i8253reg.h>
#include <i386/isa/nvram.h>

void	spinwait(int);
int	clockintr(void *);
int	gettick(void);
int	rtcget(mc_todregs *);
void	rtcput(mc_todregs *);
int	hexdectodec(int);
int	dectohexdec(int);
int	rtcintr(void *);
void	rtcdrain(void *);
int	calibrate_cyclecounter_ctr(void);

u_int mc146818_read(void *, u_int);
void mc146818_write(void *, u_int, u_int);

int cpuspeed;
int clock_broken_latch;

/* Timecounter on the i8254 */
uint32_t i8254_lastcount;
uint32_t i8254_offset;
int i8254_ticked;
u_int i8254_get_timecount(struct timecounter *tc);
u_int i8254_simple_get_timecount(struct timecounter *tc);

static struct timecounter i8254_timecounter = {
	i8254_get_timecount, NULL, ~0u, TIMER_FREQ, "i8254", 0, NULL
};
struct mutex timer_mutex = MUTEX_INITIALIZER(IPL_HIGH);
u_long rtclock_tval;

#define	SECMIN	((unsigned)60)			/* seconds per minute */
#define	SECHOUR	((unsigned)(60*SECMIN))		/* seconds per hour */

u_int
mc146818_read(void *sc, u_int reg)
{
	int s;
	u_char v;

	s = splhigh();
	outb(IO_RTC, reg);
	DELAY(1);
	v = inb(IO_RTC+1);
	DELAY(1);
	splx(s);
	return (v);
}

void
mc146818_write(void *sc, u_int reg, u_int datum)
{
	int s;

	s = splhigh();
	outb(IO_RTC, reg);
	DELAY(1);
	outb(IO_RTC+1, datum);
	DELAY(1);
	splx(s);
}

void
startclocks(void)
{
	int s;

	mtx_enter(&timer_mutex);
	rtclock_tval = TIMER_DIV(hz);
	i8254_startclock();
	mtx_leave(&timer_mutex);

	/* Check diagnostic status */
	if ((s = mc146818_read(NULL, NVRAM_DIAG)) != 0)	/* XXX softc */
		printf("RTC BIOS diagnostic error %b\n", (unsigned int) s, 
		    NVRAM_DIAG_BITS);
}

void
rtcdrain(void *v)
{
	struct timeout *to = (struct timeout *)v;

	if (to != NULL)
		timeout_del(to);

	/*
	 * Drain any un-acknowledged RTC interrupts.
	 * See comment in cpu_initclocks().
	 */
	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF)
		; /* Nothing. */
}

int
clockintr(void *arg)
{
	struct clockframe *frame = arg;		/* not strictly necessary */

	if (timecounter->tc_get_timecount == i8254_get_timecount) {
		if (i8254_ticked) {
			i8254_ticked = 0;
		} else {
			i8254_offset += rtclock_tval;
			i8254_lastcount = 0;
		}
	}

	hardclock(frame);
	return (1);
}

int
rtcintr(void *arg)
{
	struct clockframe *frame = arg;		/* not strictly necessary */
	u_int stat = 0;

	if (stathz == 0) {
		extern int psratio;

		stathz = 128;
		profhz = 1024;
		psratio = profhz / stathz;
	}

	/*
	 * If rtcintr is 'late', next intr may happen immediately.
	 * Get them all. (Also, see comment in cpu_initclocks().)
	 */
	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF) {
		statclock(frame);
		stat = 1;
	}
	return (stat);
}

int
gettick(void)
{

	if (clock_broken_latch) {
		int v1, v2, v3;
		int w1, w2, w3;

		/*
		 * Don't lock the mutex in this case, clock_broken_latch
		 * CPUs don't do MP anyway.
		 */

		disable_intr();

		v1 = inb(IO_TIMER1 + TIMER_CNTR0);
		v1 |= inb(IO_TIMER1 + TIMER_CNTR0) << 8;
		v2 = inb(IO_TIMER1 + TIMER_CNTR0);
		v2 |= inb(IO_TIMER1 + TIMER_CNTR0) << 8;
		v3 = inb(IO_TIMER1 + TIMER_CNTR0);
		v3 |= inb(IO_TIMER1 + TIMER_CNTR0) << 8;

		enable_intr();

		if (v1 >= v2 && v2 >= v3 && v1 - v3 < 0x200)
			return (v2);

#define _swap_val(a, b) do { \
	int c = a; \
	a = b; \
	b = c; \
} while (0)

		/* sort v1 v2 v3 */
		if (v1 < v2)
			_swap_val(v1, v2);
		if (v2 < v3)
			_swap_val(v2, v3);
		if (v1 < v2)
			_swap_val(v1, v2);

		/* compute the middle value */
		if (v1 - v3 < 0x200)
			return (v2);
		w1 = v2 - v3;
		w2 = v3 - v1 + TIMER_DIV(hz);
		w3 = v1 - v2;
		if (w1 >= w2) {
			if (w1 >= w3)
				return (v1);
		} else {
			if (w2 >= w3)
				return (v2);
		}
		return (v3);
	} else {
		u_char lo, hi;
		u_long ef;

		mtx_enter(&timer_mutex);
		ef = read_eflags();
		disable_intr();
		/* Select counter 0 and latch it. */
		outb(IO_TIMER1 + TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
		lo = inb(IO_TIMER1 + TIMER_CNTR0);
		hi = inb(IO_TIMER1 + TIMER_CNTR0);

		write_eflags(ef);
		mtx_leave(&timer_mutex);
		return ((hi << 8) | lo);
	}
}

/*
 * Wait "n" microseconds.
 * Relies on timer 1 counting down from (TIMER_FREQ / hz) at TIMER_FREQ Hz.
 * Note: timer had better have been programmed before this is first used!
 * (Note that we use `rate generator' mode, which counts at 1:1; `square
 * wave' mode counts at 2:1).
 */
void
i8254_delay(int n)
{
	int limit, tick, otick;

	/*
	 * Read the counter first, so that the rest of the setup overhead is
	 * counted.
	 */
	otick = gettick();

#ifdef __GNUC__
	/*
	 * Calculate ((n * TIMER_FREQ) / 1e6) using explicit assembler code so
	 * we can take advantage of the intermediate 64-bit quantity to prevent
	 * loss of significance.
	 */
	n -= 5;
	if (n < 0)
		return;
	__asm volatile("mul %2\n\tdiv %3"
			 : "=a" (n)
			 : "0" (n), "r" (TIMER_FREQ), "r" (1000000)
			 : "%edx", "cc");
#else
	/*
	 * Calculate ((n * TIMER_FREQ) / 1e6) without using floating point and
	 * without any avoidable overflows.
	 */
	n -= 20;
	{
		int sec = n / 1000000,
		    usec = n % 1000000;
		n = sec * TIMER_FREQ +
		    usec * (TIMER_FREQ / 1000000) +
		    usec * ((TIMER_FREQ % 1000000) / 1000) / 1000 +
		    usec * (TIMER_FREQ % 1000) / 1000000;
	}
#endif

	limit = TIMER_FREQ / hz;

	while (n > 0) {
		tick = gettick();
		if (tick > otick)
			n -= limit - (tick - otick);
		else
			n -= otick - tick;
		otick = tick;
	}
}

int
calibrate_cyclecounter_ctr(void)
{
	struct cpu_info *ci = curcpu();
	unsigned long long count, last_count, msr;

	if ((ci->ci_flags & CPUF_CONST_TSC) == 0 ||
	    (cpu_perf_eax & CPUIDEAX_VERID) <= 1 ||
	    CPUIDEDX_NUM_FC(cpu_perf_edx) <= 1)
		return (-1);

	msr = rdmsr(MSR_PERF_FIXED_CTR_CTRL);
	if (msr & MSR_PERF_FIXED_CTR_FC(1, MSR_PERF_FIXED_CTR_FC_MASK)) {
		/* some hypervisor is dicking us around */
		return (-1);
	}

	msr |= MSR_PERF_FIXED_CTR_FC(1, MSR_PERF_FIXED_CTR_FC_1);
	wrmsr(MSR_PERF_FIXED_CTR_CTRL, msr);

	msr = rdmsr(MSR_PERF_GLOBAL_CTRL) | MSR_PERF_GLOBAL_CTR1_EN;
	wrmsr(MSR_PERF_GLOBAL_CTRL, msr);

	last_count = rdmsr(MSR_PERF_FIXED_CTR1);
	delay(1000000);
	count = rdmsr(MSR_PERF_FIXED_CTR1);

	msr = rdmsr(MSR_PERF_FIXED_CTR_CTRL);
	msr &= MSR_PERF_FIXED_CTR_FC(1, MSR_PERF_FIXED_CTR_FC_MASK);
	wrmsr(MSR_PERF_FIXED_CTR_CTRL, msr);

	msr = rdmsr(MSR_PERF_GLOBAL_CTRL);
	msr &= ~MSR_PERF_GLOBAL_CTR1_EN;
	wrmsr(MSR_PERF_GLOBAL_CTRL, msr);

	cpuspeed = ((count - last_count) + 999999) / 1000000;

	return (cpuspeed == 0 ? -1 : 0);
}

void
calibrate_cyclecounter(void)
{
	unsigned long long count, last_count;

	if (calibrate_cyclecounter_ctr() == 0)
		return;

	__asm volatile("rdtsc" : "=A" (last_count));
	delay(1000000);
	__asm volatile("rdtsc" : "=A" (count));

	cpuspeed = ((count - last_count) + 999999) / 1000000;
}

void
i8254_initclocks(void)
{
	/* When using i8254 for clock, we also use the rtc for profclock */
	(void)isa_intr_establish(NULL, 0, IST_PULSE, IPL_CLOCK,
	    clockintr, 0, "clock");
	(void)isa_intr_establish(NULL, 8, IST_PULSE, IPL_STATCLOCK,
	    rtcintr, 0, "rtc");

	rtcstart();			/* start the mc146818 clock */

	i8254_inittimecounter();	/* hook the interrupt-based i8254 tc */
}

void
rtcstart(void)
{
	static struct timeout rtcdrain_timeout;

	mc146818_write(NULL, MC_REGA, MC_BASE_32_KHz | MC_RATE_128_Hz);
	mc146818_write(NULL, MC_REGB, MC_REGB_24HR | MC_REGB_PIE);

	/*
	 * On a number of i386 systems, the rtc will fail to start when booting
	 * the system. This is due to us missing to acknowledge an interrupt
	 * during early stages of the boot process. If we do not acknowledge
	 * the interrupt, the rtc clock will not generate further interrupts.
	 * To solve this, once interrupts are enabled, use a timeout (once)
	 * to drain any un-acknowledged rtc interrupt(s).
	 */

	timeout_set(&rtcdrain_timeout, rtcdrain, (void *)&rtcdrain_timeout);
	timeout_add(&rtcdrain_timeout, 1);
}

void
rtcstop(void)
{
	mc146818_write(NULL, MC_REGB, MC_REGB_24HR);
}

int
rtcget(mc_todregs *regs)
{
	if ((mc146818_read(NULL, MC_REGD) & MC_REGD_VRT) == 0) /* XXX softc */
		return (-1);
	MC146818_GETTOD(NULL, regs);			/* XXX softc */
	return (0);
}

void
rtcput(mc_todregs *regs)
{
	MC146818_PUTTOD(NULL, regs);			/* XXX softc */
}

int
hexdectodec(int n)
{

	return (((n >> 4) & 0x0f) * 10 + (n & 0x0f));
}

int
dectohexdec(int n)
{

	return ((u_char)(((n / 10) << 4) & 0xf0) | ((n % 10) & 0x0f));
}

static int timeset;

/*
 * check whether the CMOS layout is "standard"-like (ie, not PS/2-like),
 * to be called at splclock()
 */
int cmoscheck(void);
int
cmoscheck(void)
{
	int i;
	unsigned short cksum = 0;

	for (i = 0x10; i <= 0x2d; i++)
		cksum += mc146818_read(NULL, i); /* XXX softc */

	return (cksum == (mc146818_read(NULL, 0x2e) << 8)
			  + mc146818_read(NULL, 0x2f));
}

/*
 * patchable to control century byte handling:
 * 1: always update
 * -1: never touch
 * 0: try to figure out itself
 */
int rtc_update_century = 0;

/*
 * Expand a two-digit year as read from the clock chip
 * into full width.
 * Being here, deal with the CMOS century byte.
 */
int clock_expandyear(int);
int
clock_expandyear(int clockyear)
{
	int s, clockcentury, cmoscentury;

	clockcentury = (clockyear < 70) ? 20 : 19;
	clockyear += 100 * clockcentury;

	if (rtc_update_century < 0)
		return (clockyear);

	s = splclock();
	if (cmoscheck())
		cmoscentury = mc146818_read(NULL, NVRAM_CENTURY);
	else
		cmoscentury = 0;
	splx(s);
	if (!cmoscentury) {
#ifdef DIAGNOSTIC
		printf("clock: unknown CMOS layout\n");
#endif
		return (clockyear);
	}
	cmoscentury = hexdectodec(cmoscentury);

	if (cmoscentury != clockcentury) {
		/* XXX note: saying "century is 20" might confuse the naive. */
		printf("WARNING: NVRAM century is %d but RTC year is %d\n",
		       cmoscentury, clockyear);

		/* Kludge to roll over century. */
		if ((rtc_update_century > 0) ||
		    ((cmoscentury == 19) && (clockcentury == 20) &&
		     (clockyear == 2000))) {
			printf("WARNING: Setting NVRAM century to %d\n",
			       clockcentury);
			s = splclock();
			mc146818_write(NULL, NVRAM_CENTURY,
				       dectohexdec(clockcentury));
			splx(s);
		}
	} else if (cmoscentury == 19 && rtc_update_century == 0)
		rtc_update_century = 1; /* will update later in resettodr() */

	return (clockyear);
}

/*
 * Initialize the time of day register, based on the time base which is, e.g.
 * from a filesystem.
 */
void
inittodr(time_t base)
{
	struct timespec ts;
	mc_todregs rtclk;
	struct clock_ymdhms dt;
	int s;


	ts.tv_nsec = 0;

	/*
	 * We mostly ignore the suggested time and go for the RTC clock time
	 * stored in the CMOS RAM.  If the time can't be obtained from the
	 * CMOS, or if the time obtained from the CMOS is 5 or more years
	 * less than the suggested time, we used the suggested time.  (In
	 * the latter case, it's likely that the CMOS battery has died.)
	 */

	if (base < 15*SECYR) {	/* if before 1985, something's odd... */
		printf("WARNING: preposterous time in file system\n");
		/* read the system clock anyway */
		base = 17*SECYR + 186*SECDAY + SECDAY/2;
	}

	s = splclock();
	if (rtcget(&rtclk)) {
		splx(s);
		printf("WARNING: invalid time in clock chip\n");
		goto fstime;
	}
	splx(s);

	dt.dt_sec = hexdectodec(rtclk[MC_SEC]);
	dt.dt_min = hexdectodec(rtclk[MC_MIN]);
	dt.dt_hour = hexdectodec(rtclk[MC_HOUR]);
	dt.dt_day = hexdectodec(rtclk[MC_DOM]);
	dt.dt_mon = hexdectodec(rtclk[MC_MONTH]);
	dt.dt_year = clock_expandyear(hexdectodec(rtclk[MC_YEAR]));

	ts.tv_sec = clock_ymdhms_to_secs(&dt) + tz.tz_minuteswest * 60;
	if (tz.tz_dsttime)
		ts.tv_sec -= 3600;

	if (base < ts.tv_sec - 5*SECYR)
		printf("WARNING: file system time much less than clock time\n");
	else if (base > ts.tv_sec + 5*SECYR) {
		printf("WARNING: clock time much less than file system time\n");
		printf("WARNING: using file system time\n");
		goto fstime;
	}

	tc_setclock(&ts);
	timeset = 1;
	return;

fstime:
	ts.tv_sec = base;
	tc_setclock(&ts);
	timeset = 1;
	printf("WARNING: CHECK AND RESET THE DATE!\n");
}

/*
 * Reset the clock.
 */
void
resettodr(void)
{
	mc_todregs rtclk;
	struct clock_ymdhms dt;
	int diff;
	int century;
	int s;

	/*
	 * We might have been called by boot() due to a crash early
	 * on.  Don't reset the clock chip in this case.
	 */
	if (!timeset)
		return;

	s = splclock();
	if (rtcget(&rtclk))
		bzero(&rtclk, sizeof(rtclk));
	splx(s);

	diff = tz.tz_minuteswest * 60;
	if (tz.tz_dsttime)
		diff -= 3600;
	clock_secs_to_ymdhms(time_second - diff, &dt);

	rtclk[MC_SEC] = dectohexdec(dt.dt_sec);
	rtclk[MC_MIN] = dectohexdec(dt.dt_min);
	rtclk[MC_HOUR] = dectohexdec(dt.dt_hour);
	rtclk[MC_DOW] = dt.dt_wday;
	rtclk[MC_YEAR] = dectohexdec(dt.dt_year % 100);
	rtclk[MC_MONTH] = dectohexdec(dt.dt_mon);
	rtclk[MC_DOM] = dectohexdec(dt.dt_day);
	s = splclock();
	rtcput(&rtclk);
	if (rtc_update_century > 0) {
		century = dectohexdec(dt.dt_year / 100);
		mc146818_write(NULL, NVRAM_CENTURY, century); /* XXX softc */
	}
	splx(s);
}

void
setstatclockrate(int arg)
{
	if (initclock_func == i8254_initclocks) {
		if (arg == stathz)
			mc146818_write(NULL, MC_REGA,
			    MC_BASE_32_KHz | MC_RATE_128_Hz);
		else
			mc146818_write(NULL, MC_REGA,
			    MC_BASE_32_KHz | MC_RATE_1024_Hz);
	}
}

void
i8254_inittimecounter(void)
{
	tc_init(&i8254_timecounter);
}

/*
 * If we're using lapic to drive hardclock, we can use a simpler
 * algorithm for the i8254 timecounters.
 */
void
i8254_inittimecounter_simple(void)
{
	i8254_timecounter.tc_get_timecount = i8254_simple_get_timecount;
	i8254_timecounter.tc_counter_mask = 0x7fff;
	i8254_timecounter.tc_frequency = TIMER_FREQ;

	mtx_enter(&timer_mutex);
	rtclock_tval = 0x8000;
	i8254_startclock();
	mtx_leave(&timer_mutex);

	tc_init(&i8254_timecounter);
}

void
i8254_startclock(void)
{
	u_long tval = rtclock_tval;

	outb(IO_TIMER1 + TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	outb(IO_TIMER1 + TIMER_CNTR0, tval & 0xff);
	outb(IO_TIMER1 + TIMER_CNTR0, tval >> 8);
}

u_int
i8254_simple_get_timecount(struct timecounter *tc)
{
	return (rtclock_tval - gettick());
}

u_int
i8254_get_timecount(struct timecounter *tc)
{
	u_char hi, lo;
	u_int count;
	u_long ef;

	ef = read_eflags();
	disable_intr();

	outb(IO_TIMER1 + TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
	lo = inb(IO_TIMER1 + TIMER_CNTR0);
	hi = inb(IO_TIMER1 + TIMER_CNTR0);

	count = rtclock_tval - ((hi << 8) | lo);

	if (count < i8254_lastcount) {
		i8254_ticked = 1;
		i8254_offset += rtclock_tval;
	}
	i8254_lastcount = count;
	count += i8254_offset;
	write_eflags(ef);

	return (count);
}
@


1.51
log
@tedu some code that has not been executed since time_t became 64 bits

guenther@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.50 2014/03/29 18:09:29 guenther Exp $	*/
a87 1
#include <sys/types.h>
@


1.50
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.49 2013/05/06 00:15:11 dlg Exp $	*/
a625 20


	/*
	 * If time_t is 32 bits, then the "End of Time" is
	 * Mon Jan 18 22:14:07 2038 (US/Eastern)
	 * This code copes with RTC's past the end of time if time_t
	 * is an int32 or less. Needed because sometimes RTCs screw
	 * up or are badly set, and that would cause the time to go
	 * negative in the calculation below, which causes Very Bad
	 * Mojo. This at least lets the user boot and fix the problem.
	 * Note the code is self eliminating once time_t goes to 64 bits.
	 */
	if (sizeof(time_t) <= sizeof(int32_t)) {
		if (dt.dt_year >= 2038) {
			printf("WARNING: RTC time at or beyond 2038.\n");
			dt.dt_year = 2037;
			printf("WARNING: year set back to 2037.\n");
			printf("WARNING: CHECK AND RESET THE DATE!\n");
		}
	}
@


1.49
log
@the use of modern intel performance counter msrs to measure the number of
cycles per second isnt reliable, particularly inside "virtual" machines.
cpuspeed can be calculated as 0, which causes a divide by zero later on
which is bad.

this goes to more effort to detect if the performance counters are in use
by the hypervisor, or detecting if they gave us a cpuspeed of 0 so we can
fall through to using rdtsc.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.48 2013/04/17 18:35:47 gerhard Exp $	*/
d345 1
a345 1
	__asm __volatile("mul %2\n\tdiv %3"
d425 1
a425 1
	__asm __volatile("rdtsc" : "=A" (last_count));
d427 1
a427 1
	__asm __volatile("rdtsc" : "=A" (count));
@


1.48
log
@Don't set the frequency of the statclock if we don't have one.
Prevents strange hang-ups during reboot. Joint work with hshoexer@@.

ok mikeb@@, mlarkin@@, miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.47 2012/11/10 09:45:05 mglocker Exp $	*/
d118 1
d377 40
d420 4
a423 2
	struct cpu_info *ci;
	unsigned long long count, last_count, msr;
d425 3
a427 1
	ci = curcpu();
a428 23
	if ((ci->ci_flags & CPUF_CONST_TSC) &&
	    (cpu_perf_eax & CPUIDEAX_VERID) > 1 &&
	    CPUIDEDX_NUM_FC(cpu_perf_edx) > 1) {
		msr = rdmsr(MSR_PERF_FIXED_CTR_CTRL) | MSR_PERF_FIXED_CTR1_EN;
		wrmsr(MSR_PERF_FIXED_CTR_CTRL, msr);
		msr = rdmsr(MSR_PERF_GLOBAL_CTRL) | MSR_PERF_GLOBAL_CTR1_EN;
		wrmsr(MSR_PERF_GLOBAL_CTRL, msr);

		last_count = rdmsr(MSR_PERF_FIXED_CTR1);
		delay(1000000);
		count = rdmsr(MSR_PERF_FIXED_CTR1);

		msr = rdmsr(MSR_PERF_FIXED_CTR_CTRL);
		msr &= ~MSR_PERF_FIXED_CTR1_EN;
		wrmsr(MSR_PERF_FIXED_CTR_CTRL, msr);
		msr = rdmsr(MSR_PERF_GLOBAL_CTRL);
		msr &= ~MSR_PERF_GLOBAL_CTR1_EN;
		wrmsr(MSR_PERF_GLOBAL_CTRL, msr);
	} else {
		__asm __volatile("rdtsc" : "=A" (last_count));
		delay(1000000);
		__asm __volatile("rdtsc" : "=A" (count));
	}
@


1.47
log
@Recent x86 CPUs come with a constant time stamp counter.  If this is
the case we verify if the CPU supports a specific version of the
architectural performance monitoring feature and read out the current
frequency from the fixed-function performance counter of the unhalted
core.

My initial motivation to implement this was the Soekris net6501-70
which comes with an Intel Atom E6xx 1.60GHz CPU.  It has a constant
time stamp counter plus speed step support and boots on the lowest
frequency of 600MHz.  This caused hw.cpuspeed and hw.setperf to
reflect the wrong values.

The diff is a cooperation work with jsg@@.  The fixed-function
performance counter read code comes from a former diff of him.

OK jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.46 2011/07/05 17:11:07 oga Exp $	*/
d696 8
a703 4
	if (arg == stathz)
		mc146818_write(NULL, MC_REGA, MC_BASE_32_KHz | MC_RATE_128_Hz);
	else
		mc146818_write(NULL, MC_REGA, MC_BASE_32_KHz | MC_RATE_1024_Hz);
@


1.46
log
@N: Thou shalt not call hardclock() with biglock held.

i386 disobeys the Nth commandment. Fix this. While here, make i386 and amd64
definitions of iplclock and statclock match.

ok art@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.45 2010/08/11 21:22:44 kettenis Exp $	*/
d379 2
a380 1
	unsigned long long count, last_count;
d382 25
a406 3
	__asm __volatile("rdtsc" : "=A" (last_count));
	delay(1000000);
	__asm __volatile("rdtsc" : "=A" (count));
@


1.45
log
@Disable the RTC the periodic interrupt.  Leaving it enabled causes the
Dell Inspirion 4150 to wake up immediately even though RTC_EN isn't set
in the PM1 Enable register.

ok deraadt@@, mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.44 2010/08/10 02:23:31 marco Exp $	*/
d393 1
a393 1
	(void)isa_intr_establish(NULL, 8, IST_PULSE, IPL_CLOCK,
@


1.44
log
@spaces and tabs, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.43 2010/07/25 21:43:37 deraadt Exp $	*/
d420 6
@


1.43
log
@in the clock drivers, seperate the soft-state and hard-state which was
all jumbled up in the same functions. the rtc (mc chip) and clock (i8243)
startup was also mixed up.  they the soft state and hardware state can
be started in the right order, and it is easy to restart just the
neccessary parts upon resume.  tested in numerous cases:
(apic, pic) * (GENERIC.MP, GENERIC) * (mp, non-mp) * (i386, amd64)
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.42 2009/01/29 13:36:17 kettenis Exp $	*/
d38 1
a38 1
/* 
d42 1
a42 1
 * 
d48 1
a48 1
 * 
d52 1
a52 1
 * 
d54 1
a54 1
 * 
d59 1
a59 1
 * 
d114 1
a114 1
int 	hexdectodec(int);
d193 3
a195 3
	/* 
	 * Drain any un-acknowledged RTC interrupts. 
	 * See comment in cpu_initclocks(). 
d197 1
a197 1
  	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF)
d233 2
a234 2
	/* 
	 * If rtcintr is 'late', next intr may happen immediately. 
d345 1
a345 1
			 : "=a" (n) 
d429 1
a429 1
}	
d578 1
a578 1
	 * If time_t is 32 bits, then the "End of Time" is 
@


1.42
log
@Only start using the rtc for statclock after we've received the first
interrupt.  On some machines the rtc doesn't generate interrupts and we would
end up not running statclock() at all.

ok miod@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.41 2007/11/28 17:05:09 tedu Exp $	*/
d170 1
a170 1
startrtclock(void)
d174 4
a177 1
	initrtclock();
a200 16
void
initrtclock(void)
{
	mtx_enter(&timer_mutex);

	/* initialize 8253 clock */
	outb(IO_TIMER1 + TIMER_MODE, TIMER_SEL0|TIMER_RATEGEN|TIMER_16BIT);

	/* Correct rounding will buy us a better precision in timekeeping */
	outb(IO_TIMER1, TIMER_DIV(hz) % 256);
	outb(IO_TIMER1, TIMER_DIV(hz) / 256);

	rtclock_tval = TIMER_DIV(hz);
	mtx_leave(&timer_mutex);
}

d390 14
a405 9
	/*
	 * XXX If you're doing strange things with multiple clocks, you might
	 * want to keep track of clock handlers.
	 */
	(void)isa_intr_establish(NULL, 0, IST_PULSE, IPL_CLOCK, clockintr,
	    0, "clock");
	(void)isa_intr_establish(NULL, 8, IST_PULSE, IPL_CLOCK, rtcintr,
	    0, "rtc");

a685 2
	u_long tval = 0x8000;

a687 1

d691 2
a692 5
	outb(IO_TIMER1 + TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	outb(IO_TIMER1, tval & 0xff);
	outb(IO_TIMER1, tval >> 8);

	rtclock_tval = tval;
d696 10
@


1.41
log
@quite a bit of simplification by removing cpu classes.
also assume that 386 cpus are really unknown, and promote them to 486
instead of panic.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.40 2007/08/01 13:18:18 martin Exp $	*/
d238 8
a403 2
	stathz = 128;
	profhz = 1024;
@


1.40
log
@switch i386 to use the MI i8253 header file and remove the now obsolete MD
timerreg.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.39 2007/03/19 09:29:33 art Exp $	*/
a121 1
#if defined(I586_CPU) || defined(I686_CPU)
a122 2
#endif
#if defined(I486_CPU) || defined(I586_CPU) || defined(I686_CPU)
a123 1
#endif
a252 1
#if defined(I586_CPU) || defined(I686_CPU)
d304 1
a304 3
	} else
#endif
	{
a380 1
#if defined(I586_CPU) || defined(I686_CPU)
a390 1
#endif
@


1.39
log
@Move i386 to timecounters. This is more or less the same code as amd64.

The "lapic" timer is ripped out since it wasn't actually a lapic timer,
but a hacked up tsc timer with some synchronization for MP. There is no
tsc timer right now since they are very unreliable on MP systems, systems
with apm, and systems that change the cpu clock. Which basically means
every modern machine out there. We're running with the i8259 timer now.

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.38 2006/12/20 17:50:40 gwk Exp $	*/
d106 1
a107 1
#include <i386/isa/timerreg.h>
d208 1
a208 1
	outb(TIMER_MODE, TIMER_SEL0|TIMER_RATEGEN|TIMER_16BIT);
d269 6
a274 6
		v1 = inb(TIMER_CNTR0);
		v1 |= inb(TIMER_CNTR0) << 8;
		v2 = inb(TIMER_CNTR0);
		v2 |= inb(TIMER_CNTR0) << 8;
		v3 = inb(TIMER_CNTR0);
		v3 |= inb(TIMER_CNTR0) << 8;
d319 3
a321 3
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
		lo = inb(TIMER_CNTR0);
		hi = inb(TIMER_CNTR0);
d705 1
a705 1
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
d731 3
a733 3
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
	lo = inb(TIMER_CNTR0);
	hi = inb(TIMER_CNTR0);
@


1.38
log
@"#ifdef is a tool of the weak!"
Rename pentium_mhz to cpuspeed which is consistant with amd64 making
shared ACPI code less nasty.
ok marco, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.37 2006/09/19 11:06:33 jsg Exp $	*/
d95 2
a109 1
void	findcpuspeed(void);
d129 13
a177 2
	findcpuspeed();		/* use the clock (while it's free)
					to find the cpu speed */
d205 2
d213 3
d223 9
d262 5
d313 1
d315 2
d323 2
a324 1
		enable_intr();
a387 25
unsigned int delaycount;	/* calibrated loop variable (1 millisecond) */

#define FIRST_GUESS   0x2000

void
findcpuspeed(void)
{
	int i;
	int remainder;

	/* Put counter in count down mode */
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_16BIT | TIMER_RATEGEN);
	outb(TIMER_CNTR0, 0xff);
	outb(TIMER_CNTR0, 0xff);
	for (i = FIRST_GUESS; i; i--)
		;
	/* Read the value left in the counter */
	remainder = gettick();
	/*
	 * Formula for delaycount is:
	 *  (loopcount * timer clock speed) / (counter ticks * 1000)
	 */
	delaycount = (FIRST_GUESS * TIMER_DIV(1000)) / (0xffff-remainder);
}

d550 1
d555 3
a571 2
	time.tv_usec = 0;

d607 1
a607 1
	time.tv_sec = clock_ymdhms_to_secs(&dt) + tz.tz_minuteswest * 60;
d609 1
a609 1
		time.tv_sec -= 3600;
d611 1
a611 1
	if (base < time.tv_sec - 5*SECYR)
d613 1
a613 1
	else if (base > time.tv_sec + 5*SECYR) {
d619 1
d624 2
a626 1
	time.tv_sec = base;
d657 1
a657 1
	clock_secs_to_ymdhms(time.tv_sec - diff, &dt);
d682 64
@


1.37
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.36 2006/06/19 15:13:35 deraadt Exp $	*/
d122 1
a122 1
int pentium_mhz;
d387 1
a387 1
	pentium_mhz = ((count - last_count) + 999999) / 1000000;
@


1.36
log
@move clock_subr.c to a better place, and now it is always in the kernel
so that things can use it; tested on all architectures; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.35 2006/05/09 09:40:50 otto Exp $	*/
d132 1
a132 3
mc146818_read(sc, reg)
	void *sc;					/* XXX use it? */
	u_int reg;
d147 1
a147 3
mc146818_write(sc, reg, datum)
	void *sc;					/* XXX use it? */
	u_int reg, datum;
d160 1
a160 1
startrtclock()
d191 1
a191 1
initrtclock()
d202 1
a202 2
clockintr(arg)
	void *arg;
d211 1
a211 2
rtcintr(arg)
	void *arg;
d228 1
a228 1
gettick()
d302 1
a302 2
i8254_delay(n)
	int n;
d358 1
a358 1
findcpuspeed()
d380 1
a380 1
calibrate_cyclecounter()
d392 1
a392 1
i8254_initclocks()
d424 1
a424 2
rtcget(regs)
	mc_todregs *regs;
d433 1
a433 2
rtcput(regs)
	mc_todregs *regs;
d439 1
a439 2
hexdectodec(n)
	int n;
d446 1
a446 2
dectohexdec(n)
	int n;
d460 1
a460 1
cmoscheck()
d487 1
a487 2
clock_expandyear(clockyear)
	int clockyear;
d538 1
a538 2
inittodr(base)
	time_t base;
d620 1
a620 1
resettodr()
d662 1
a662 2
setstatclockrate(arg)
	int arg;
@


1.35
log
@Avoid estimating pentium_mhz too low, which has the effect of resulting
in non-monotonic time.  Now the gettimeofday regression no longer
fails on my 500MHz PIII. ok toby@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.34 2006/02/12 19:55:39 miod Exp $	*/
a100 1
#include <dev/clock_subr.h>
@


1.34
log
@Remove dead sysbeep driver and unused sysbeep() routine. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.33 2006/01/02 05:21:30 brad Exp $	*/
d395 1
a395 1
	pentium_mhz = ((count - last_count) + 500000) / 1000000;
@


1.33
log
@remove last traces of __BROKEN_INDIRECT_CONFIG.

Thanks to aanriot@@ and Michael Knudsen for checking that alpha/i386/macppc
kernels still compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.32 2004/06/13 21:49:16 niklas Exp $	*/
a107 19
#include "pcppi.h"
#if (NPCPPI > 0)
#include <dev/isa/pcppivar.h>

int sysbeepmatch(struct device *, void *, void *);
void sysbeepattach(struct device *, struct device *, void *);

struct cfattach sysbeep_ca = {
	sizeof(struct device), sysbeepmatch, sysbeepattach
};

struct cfdriver sysbeep_cd = {
	NULL, "sysbeep", DV_DULL
};

static int ppi_attached;
static pcppi_tag_t ppicookie;
#endif /* PCPPI */

a111 1
void	sysbeep(int, int);
a358 32
}

#if (NPCPPI > 0)
int
sysbeepmatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	return (!ppi_attached);
}

void
sysbeepattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	printf("\n");

	ppicookie = ((struct pcppi_attach_args *)aux)->pa_cookie;
	ppi_attached = 1;
}
#endif

void
sysbeep(pitch, period)
	int pitch, period;
{
#if (NPCPPI > 0)
	if (ppi_attached)
		pcppi_bell(ppicookie, pitch, period, 0);
#endif
@


1.32
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a111 2
#define __BROKEN_INDIRECT_CONFIG /* XXX */
#ifdef __BROKEN_INDIRECT_CONFIG
a112 3
#else
int sysbeepmatch(struct device *, struct cfdata *, void *);
#endif
a384 1
#ifdef __BROKEN_INDIRECT_CONFIG
a385 3
#else
	struct cfdata *match;
#endif
@


1.31
log
@Cleanup I[3456]86_CPU defines usage, unbreaks compilation
without some of them.
Problem reported by William Culler <william@@neo.rr.com>.

Help from tedu@@ chris@@, ok tedu@@ chris@@ deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.30 2003/06/02 23:27:47 millert Exp $	*/
d334 1
a334 1
delay(n)
d461 1
a461 1
cpu_initclocks()
@


1.30
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.29 2003/05/27 23:52:01 fgsch Exp $	*/
d147 3
d151 1
a151 1
int pentium_mhz, clock_broken_latch;
@


1.29
log
@change .byte for the correct opcodes now that gas can handle'em.
art@@ toby@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.28 2002/07/06 19:14:20 nordin Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.28
log
@Remove kernel support for NTP. ok deraadt@@ and tholo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.27 2002/05/17 18:55:41 mickey Exp $	*/
d454 1
a454 1
	__asm __volatile(".byte 0xf, 0x31" : "=A" (last_count));
d456 1
a456 1
	__asm __volatile(".byte 0xf, 0x31" : "=A" (count));
@


1.27
log
@properly detect the cpu model for the broken cyrix latch; better fix than pr#2661
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.26 2002/05/16 15:33:10 mickey Exp $	*/
a452 3
#ifdef NTP
	extern long time_precision;
#endif
a457 3
#ifdef NTP
	time_precision = 1;	/* XXX */
#endif
@


1.26
log
@fix for a timer latch bug on the cyrix mediagx and gxm cpus.
based on freebsd pr#6630, netbsd pr#8654, openbsd pr#1492 .
does not affect other cpu models (cyrix or not).
asked by markus@@ and testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.25 2002/03/14 01:26:33 millert Exp $	*/
d151 1
a151 1
#if defined(I586_CPU) || defined(I686_CPU)
a229 15

#if defined(CPU_I586) || defined(CPU_I686)
	{
		extern int cpu_id;
		switch (cpu_id) {
		case 0x440:	/* Cyrix MediaGX */
		case 0x540:	/* Cyrix GXm */
			clock_broken_latch = 1;
			break;
		default:
			clock_broken_latch = 0;
			break;
		}
	}
#endif
@


1.25
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.24 2001/09/21 20:38:42 mickey Exp $	*/
d152 1
a152 1
int pentium_mhz;
d230 15
a277 1
	u_char lo, hi;
d279 61
a339 8
	/* Don't want someone screwing with the counter while we're here. */
	disable_intr();
	/* Select counter 0 and latch it. */
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
	lo = inb(TIMER_CNTR0);
	hi = inb(TIMER_CNTR0);
	enable_intr();
	return ((hi << 8) | lo);
@


1.24
log
@totally useless inlines, cost 1380 bytes too
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.23 2001/02/19 04:57:02 ho Exp $	*/
d118 1
a118 1
int sysbeepmatch __P((struct device *, void *, void *));
d120 1
a120 1
int sysbeepmatch __P((struct device *, struct cfdata *, void *));
d122 1
a122 1
void sysbeepattach __P((struct device *, struct device *, void *));
d136 11
a146 11
void	spinwait __P((int));
void	findcpuspeed __P((void));
int	clockintr __P((void *));
int	gettick __P((void));
void	sysbeep __P((int, int));
int	rtcget __P((mc_todregs *));
void	rtcput __P((mc_todregs *));
int 	hexdectodec __P((int));
int	dectohexdec __P((int));
int	rtcintr __P((void *));
void	rtcdrain __P((void *));
d148 2
a149 2
u_int mc146818_read __P((void *, u_int));
void mc146818_write __P((void *, u_int, u_int));
d486 1
a486 1
int cmoscheck __P((void));
d513 1
a513 1
int clock_expandyear __P((int));
@


1.24.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.24 2001/09/21 20:38:42 mickey Exp $	*/
d118 1
a118 1
int sysbeepmatch(struct device *, void *, void *);
d120 1
a120 1
int sysbeepmatch(struct device *, struct cfdata *, void *);
d122 1
a122 1
void sysbeepattach(struct device *, struct device *, void *);
d136 11
a146 11
void	spinwait(int);
void	findcpuspeed(void);
int	clockintr(void *);
int	gettick(void);
void	sysbeep(int, int);
int	rtcget(mc_todregs *);
void	rtcput(mc_todregs *);
int 	hexdectodec(int);
int	dectohexdec(int);
int	rtcintr(void *);
void	rtcdrain(void *);
d148 2
a149 2
u_int mc146818_read(void *, u_int);
void mc146818_write(void *, u_int, u_int);
d151 2
a152 2
#if defined(I486_CPU) || defined(I586_CPU) || defined(I686_CPU)
int pentium_mhz, clock_broken_latch;
d263 1
d265 8
a272 61
#if defined(I586_CPU) || defined(I686_CPU)
	if (clock_broken_latch) {
		int v1, v2, v3;
		int w1, w2, w3;

		disable_intr();

		v1 = inb(TIMER_CNTR0);
		v1 |= inb(TIMER_CNTR0) << 8;
		v2 = inb(TIMER_CNTR0);
		v2 |= inb(TIMER_CNTR0) << 8;
		v3 = inb(TIMER_CNTR0);
		v3 |= inb(TIMER_CNTR0) << 8;

		enable_intr();

		if (v1 >= v2 && v2 >= v3 && v1 - v3 < 0x200)
			return (v2);

#define _swap_val(a, b) do { \
	int c = a; \
	a = b; \
	b = c; \
} while (0)

		/* sort v1 v2 v3 */
		if (v1 < v2)
			_swap_val(v1, v2);
		if (v2 < v3)
			_swap_val(v2, v3);
		if (v1 < v2)
			_swap_val(v1, v2);

		/* compute the middle value */
		if (v1 - v3 < 0x200)
			return (v2);
		w1 = v2 - v3;
		w2 = v3 - v1 + TIMER_DIV(hz);
		w3 = v1 - v2;
		if (w1 >= w2) {
			if (w1 >= w3)
				return (v1);
		} else {
			if (w2 >= w3)
				return (v2);
		}
		return (v3);
	} else
#endif
	{
		u_char lo, hi;

		disable_intr();
		/* Select counter 0 and latch it. */
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
		lo = inb(TIMER_CNTR0);
		hi = inb(TIMER_CNTR0);

		enable_intr();
		return ((hi << 8) | lo);
	}
d486 1
a486 1
int cmoscheck(void);
d513 1
a513 1
int clock_expandyear(int);
@


1.24.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.24.4.1 2002/06/11 03:35:54 art Exp $	*/
d453 3
d461 3
@


1.23
log
@Avoid losing rtc after suspend/resume on some laptops. Ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.22 2001/02/13 17:19:12 ho Exp $	*/
d148 2
a149 2
__inline u_int mc146818_read __P((void *, u_int));
__inline void mc146818_write __P((void *, u_int, u_int));
d158 1
a158 1
__inline u_int
d175 1
a175 1
__inline void
@


1.22
log
@rtc stops if we miss interrupts. Inspired by code from FreeBSD.
Some KNF. (niklas@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.21 2000/01/29 04:27:48 mickey Exp $	*/
d210 2
a211 1
	timeout_del(to);
d246 1
a246 1
	struct clockframe *frame = arg;		/* not strictly neccecary */
@


1.21
log
@separate clock init, to be called upon resume from apm sleeps
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.20 1999/10/06 07:36:55 deraadt Exp $	*/
d92 1
d98 1
d146 1
d163 2
d166 1
d168 5
a172 1
	return (inb(IO_RTC+1));
d180 1
d182 1
d184 1
d186 2
d206 15
d238 1
a238 1
	return 1;
d246 1
a246 1
	u_int stat;
d248 5
a252 2
	stat = mc146818_read(NULL, MC_REGC);
	if (stat & MC_REGC_PF) {
d254 1
a254 1
		return 1;
d256 1
a256 1
	return 0;
d417 1
d432 12
d485 2
a486 2
static int cmoscheck __P((void));
static int
d512 2
a513 2
static int clock_expandyear __P((int));
static int
@


1.21.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.23 2001/02/19 04:57:02 ho Exp $	*/
a91 1
#include <sys/types.h>
a96 1
#include <sys/timeout.h>
a143 1
void	rtcdrain __P((void *));
a159 2
	int s;
	u_char v;
a160 1
	s = splhigh();
d162 1
a162 5
	DELAY(1);
	v = inb(IO_RTC+1);
	DELAY(1);
	splx(s);
	return (v);
a169 1
	int s;
a170 1
	s = splhigh();
a171 1
	DELAY(1);
a172 2
	DELAY(1);
	splx(s);
a190 16
rtcdrain(void *v)
{
	struct timeout *to = (struct timeout *)v;

	if (to != NULL)
		timeout_del(to);

	/* 
	 * Drain any un-acknowledged RTC interrupts. 
	 * See comment in cpu_initclocks(). 
	 */
  	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF)
		; /* Nothing. */
}

void
d208 1
a208 1
	return (1);
d215 2
a216 2
	struct clockframe *frame = arg;		/* not strictly necessary */
	u_int stat = 0;
d218 2
a219 5
	/* 
	 * If rtcintr is 'late', next intr may happen immediately. 
	 * Get them all. (Also, see comment in cpu_initclocks().)
	 */
	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF) {
d221 1
a221 1
		stat = 1;
d223 1
a223 1
	return (stat);
a383 1
	static struct timeout rtcdrain_timeout;
a397 12

	/*
	 * On a number of i386 systems, the rtc will fail to start when booting
	 * the system. This is due to us missing to acknowledge an interrupt
	 * during early stages of the boot process. If we do not acknowledge
	 * the interrupt, the rtc clock will not generate further interrupts.
	 * To solve this, once interrupts are enabled, use a timeout (once)
	 * to drain any un-acknowledged rtc interrupt(s).
	 */

	timeout_set(&rtcdrain_timeout, rtcdrain, (void *)&rtcdrain_timeout);
	timeout_add(&rtcdrain_timeout, 1);
d439 2
a440 2
int cmoscheck __P((void));
int
d466 2
a467 2
int clock_expandyear __P((int));
int
@


1.21.2.2
log
@Initial import of some SMP code from NetBSD.
Not really working here yet, but there is some work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.21.2.1 2001/04/18 16:07:51 niklas Exp $	*/
d283 1
a283 1
i8254_delay(n)
d416 1
a416 1
i8254_initclocks()
@


1.21.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.21.2.2 2001/07/14 10:02:41 ho Exp $	*/
d148 2
a149 2
u_int mc146818_read __P((void *, u_int));
void mc146818_write __P((void *, u_int, u_int));
d158 1
a158 1
u_int
d175 1
a175 1
void
@


1.21.2.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d118 1
a118 1
int sysbeepmatch(struct device *, void *, void *);
d120 1
a120 1
int sysbeepmatch(struct device *, struct cfdata *, void *);
d122 1
a122 1
void sysbeepattach(struct device *, struct device *, void *);
d136 11
a146 11
void	spinwait(int);
void	findcpuspeed(void);
int	clockintr(void *);
int	gettick(void);
void	sysbeep(int, int);
int	rtcget(mc_todregs *);
void	rtcput(mc_todregs *);
int 	hexdectodec(int);
int	dectohexdec(int);
int	rtcintr(void *);
void	rtcdrain(void *);
d148 2
a149 2
u_int mc146818_read(void *, u_int);
void mc146818_write(void *, u_int, u_int);
d486 1
a486 1
int cmoscheck(void);
d513 1
a513 1
int clock_expandyear(int);
@


1.21.2.5
log
@Sync the SMP branch with 3.3
@
text
@d151 2
a152 2
#if defined(I486_CPU) || defined(I586_CPU) || defined(I686_CPU)
int pentium_mhz, clock_broken_latch;
d263 1
d265 8
a272 61
#if defined(I586_CPU) || defined(I686_CPU)
	if (clock_broken_latch) {
		int v1, v2, v3;
		int w1, w2, w3;

		disable_intr();

		v1 = inb(TIMER_CNTR0);
		v1 |= inb(TIMER_CNTR0) << 8;
		v2 = inb(TIMER_CNTR0);
		v2 |= inb(TIMER_CNTR0) << 8;
		v3 = inb(TIMER_CNTR0);
		v3 |= inb(TIMER_CNTR0) << 8;

		enable_intr();

		if (v1 >= v2 && v2 >= v3 && v1 - v3 < 0x200)
			return (v2);

#define _swap_val(a, b) do { \
	int c = a; \
	a = b; \
	b = c; \
} while (0)

		/* sort v1 v2 v3 */
		if (v1 < v2)
			_swap_val(v1, v2);
		if (v2 < v3)
			_swap_val(v2, v3);
		if (v1 < v2)
			_swap_val(v1, v2);

		/* compute the middle value */
		if (v1 - v3 < 0x200)
			return (v2);
		w1 = v2 - v3;
		w2 = v3 - v1 + TIMER_DIV(hz);
		w3 = v1 - v2;
		if (w1 >= w2) {
			if (w1 >= w3)
				return (v1);
		} else {
			if (w2 >= w3)
				return (v2);
		}
		return (v3);
	} else
#endif
	{
		u_char lo, hi;

		disable_intr();
		/* Select counter 0 and latch it. */
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
		lo = inb(TIMER_CNTR0);
		hi = inb(TIMER_CNTR0);

		enable_intr();
		return ((hi << 8) | lo);
	}
d401 3
d409 3
@


1.21.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.21.2.5 2003/03/27 23:26:55 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
d454 1
a454 1
	__asm __volatile("rdtsc" : "=A" (last_count));
d456 1
a456 1
	__asm __volatile("rdtsc" : "=A" (count));
@


1.21.2.7
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a146 3
#if defined(I586_CPU) || defined(I686_CPU)
int pentium_mhz;
#endif
d148 1
a148 1
int clock_broken_latch;
@


1.20
log
@y2k related fixes; from netbsd, work by fgsch/ivan
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.19 1999/01/31 14:56:01 espie Exp $	*/
d182 11
a198 5

	/* Check diagnostic status */
	if ((s = mc146818_read(NULL, NVRAM_DIAG)) != 0)	/* XXX softc */
		printf("RTC BIOS diagnostic error %b\n", (unsigned int) s, 
		    NVRAM_DIAG_BITS);
@


1.19
log
@Fix clobbers so that GENERIC may compile with egcs.

Historically, the documentation of extended asm was lacking, namely you
should NOT specify the same register as an input, and a clobber.
If the register is clobbered, it should be specified as an output as well,
e.g., by linking input and output through the "number" notation.

(Beware of lvalues, some local variables needed...)

In older versions, up-to egcs1.1.1, the compiler did not even warn about
it, but it was liable to output bad code. Newer egcs are pickier and
simply refuse to swallow such code.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.18 1999/01/13 07:26:00 niklas Exp $	*/
d103 1
a140 1
static int yeartoday __P((int));
a153 2
#define	SECDAY	((unsigned)(24*SECHOUR))	/* seconds per day */
#define	SECYR	((unsigned)(365*SECDAY))	/* seconds per common year */
a410 11
static int month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

static int
yeartoday(year)
	int year;
{

	return (((year % 4) == 0 &&
		 ((year % 100) != 0 || (year % 400) == 0))? 366 : 365);
}

d430 80
d518 1
a518 3
	time_t n;
	int sec, min, hr, dom, mon, yr;
	int i, days = 0;
d535 2
d545 7
a551 19
	sec = hexdectodec(rtclk[MC_SEC]);
	min = hexdectodec(rtclk[MC_MIN]);
	hr = hexdectodec(rtclk[MC_HOUR]);
	dom = hexdectodec(rtclk[MC_DOM]);
	mon = hexdectodec(rtclk[MC_MONTH]);
	yr = hexdectodec(rtclk[MC_YEAR]);
	yr = (yr < 70) ? yr+100 : yr;

	n = sec + 60 * min + 3600 * hr;
	n += (dom - 1) * 3600 * 24;

	if (yeartoday(yr) == 366)
		month[1] = 29;
	for (i = mon - 2; i >= 0; i--)
		days += month[i];
	month[1] = 28;
	for (i = 70; i < yr; i++)
		days += yeartoday(i);
	n += days * 3600 * 24;
d553 20
a572 1
	n += tz.tz_minuteswest * 60;
d574 1
a574 1
		n -= 3600;
d576 1
a576 1
	if (base < n - 5*SECYR)
d578 1
a578 1
	else if (base > n + 5*SECYR) {
a584 2
	time.tv_sec = n;
	time.tv_usec = 0;
a589 1
	time.tv_usec = 0;
d600 3
a602 2
	time_t n;
	int diff, i, j;
d620 1
a620 22
	n = (time.tv_sec - diff) % (3600 * 24);   /* hrs+mins+secs */
	rtclk[MC_SEC] = dectohexdec(n % 60);
	n /= 60;
	rtclk[MC_MIN] = dectohexdec(n % 60);
	rtclk[MC_HOUR] = dectohexdec(n / 60);

	n = (time.tv_sec - diff) / (3600 * 24);	/* days */
	rtclk[MC_DOW] = (n + 4) % 7;  /* 1/1/70 is Thursday */

	for (j = 1970, i = yeartoday(j); n >= i; j++, i = yeartoday(j))
		n -= i;

	rtclk[MC_YEAR] = dectohexdec(j - 1900);

	if (i == 366)
		month[1] = 29;
	for (i = 0; n >= month[i]; i++)
		n -= month[i];
	month[1] = 28;
	rtclk[MC_MONTH] = dectohexdec(++i);

	rtclk[MC_DOM] = dectohexdec(++n);
d622 7
d631 4
@


1.18
log
@RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD: clock.c,v 1.39 1996/05/12 23:11:54 mycroft Exp $	*/
d265 4
a268 8
	{register int m;
	__asm __volatile("mul %3"
			 : "=a" (n), "=d" (m)
			 : "0" (n), "r" (TIMER_FREQ));
	__asm __volatile("div %3"
			 : "=a" (n)
			 : "0" (n), "d" (m), "r" (1000000)
			 : "%edx");}
@


1.17
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
@


1.16
log
@I586_CPU -> I586_CPU || I686_CPU
@
text
@d107 24
a130 1
#include <i386/isa/spkrreg.h>
a135 1
void	sysbeepstop __P((void *));
d300 13
a312 1
static int beeping;
d315 3
a317 2
sysbeepstop(arg)
	void *arg;
d319 1
d321 2
a322 5
	/* disable counter 2 */
	disable_intr();
	outb(PITAUX_PORT, inb(PITAUX_PORT) & ~PIT_SPKR);
	enable_intr();
	beeping = 0;
d324 1
d330 4
a333 24
	static int last_pitch;
	extern int cold;

	if (cold)
		return;		/* Can't beep yet. */

	if (beeping)
		untimeout(sysbeepstop, 0);
	if (pitch == 0 || period == 0) {
		sysbeepstop(0);
		last_pitch = 0;
		return;
	}
	if (!beeping || last_pitch != pitch) {
		disable_intr();
		outb(TIMER_MODE, TIMER_SEL2 | TIMER_16BIT | TIMER_SQWAVE);
		outb(TIMER_CNTR2, TIMER_DIV(pitch) % 256);
		outb(TIMER_CNTR2, TIMER_DIV(pitch) / 256);
		outb(PITAUX_PORT, inb(PITAUX_PORT) | PIT_SPKR);	/* enable counter 2 */
		enable_intr();
	}
	last_pitch = pitch;
	beeping = 1;
	timeout(sysbeepstop, 0, period);
@


1.15
log
@remove _STANDALONE
be carefull about leap years (;
@
text
@d125 1
a125 1
#ifdef I586_CPU
d347 1
a347 1
#ifdef I586_CPU
@


1.14
log
@If someone pressed a nonprintable character in getsn (eg in boot -c) the
speaker would be turned on but not off. So don't allow sysbeep until
timers works. -moj
@
text
@a173 2
#ifndef	_STANDALONE

a197 1
#endif /* _STANDALONE */
a277 2
#ifndef	_STANDALONE

a320 1
#endif /* _STANDALONE */
a346 2
#ifndef	_STANDALONE

d409 2
a410 1
	return ((year % 4) ? 365 : 366);
a573 1
#endif /* _STANDALONE */
@


1.13
log
@proto rtcintr
@
text
@d302 4
@


1.12
log
@support standalone.
@
text
@d120 1
a120 1

@


1.11
log
@Don't be uncertain about wether clock interrupts were meant for us
@
text
@d174 2
d200 1
d281 2
d322 1
d349 2
d577 1
@


1.10
log
@Add seperate profiling/statistics clock running at 1024/128 Hz, using the
RTC in periodic interrupt mode
@
text
@d181 1
a181 1
	return -1;
d194 1
a194 1
		return -1;
@


1.9
log
@sync
@
text
@a114 1
void	rtcinit __P((void));
d185 15
d348 3
d356 3
d365 2
d374 2
a375 6
}

void
rtcinit()
{
	static int first_rtcopen_ever = 1;
d377 2
a378 7
	if (!first_rtcopen_ever)
		return;
	first_rtcopen_ever = 0;

	mc146818_write(NULL, MC_REGA,			/* XXX softc */
	    MC_BASE_32_KHz | MC_RATE_1024_Hz);
	mc146818_write(NULL, MC_REGB, MC_REGB_24HR);	/* XXX softc */
a384 2

	rtcinit();
a394 2

	rtcinit();
d564 4
@


1.8
log
@sync with 0504; prototype changes
@
text
@d1 1
a1 1
/*	$NetBSD: clock.c,v 1.38 1996/05/03 19:14:50 christos Exp $	*/
d98 1
@


1.7
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$NetBSD: clock.c,v 1.37 1996/04/11 22:15:13 cgd Exp $	*/
d108 16
a123 2
void spinwait __P((int));
void findcpuspeed __P((void));
d169 3
a171 2
	if (s = mc146818_read(NULL, NVRAM_DIAG))	/* XXX softc */
		printf("RTC BIOS diagnostic error %b\n", s, NVRAM_DIAG_BITS);
d305 1
a305 1
#define FIRST_GUESS	0x2000
d373 1
a373 1
	if (mc146818_read(NULL, MC_REGD) & MC_REGD_VRT == 0) /* XXX softc */
d400 1
a400 1
	char n;
d406 1
a406 1
char
d411 1
a411 1
	return ((char)(((n / 10) << 4) & 0xf0) | ((n % 10) & 0x0f));
@


1.6
log
@Fix back wrong patches.
@
text
@d1 1
a1 1
/*	$NetBSD: clock.c,v 1.35 1995/12/24 02:30:07 mycroft Exp $	*/
d109 1
d291 2
d334 2
a335 1
	(void)isa_intr_establish(0, IST_PULSE, IPL_CLOCK, clockintr, 0, "clock");
@


1.5
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d331 1
a331 1
	(void)isa_intr_establish(0, IST_PULSE, IPL_CLOCK, clockintr, 0);
@


1.4
log
@Allow use of Pentium cycle counter for high-precision time keeping;
from FreeBSD
@
text
@d1 1
a1 1
/*	$NetBSD: clock.c,v 1.34 1995/08/13 04:06:29 mycroft Exp $	*/
d331 1
a331 1
	(void)isa_intr_establish(0, IST_PULSE, IPL_CLOCK, clockintr, 0, "clock");
@


1.3
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d110 4
d309 13
@


1.2
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
@
text
@d314 1
a314 1
	(void)isa_intr_establish(0, IST_PULSE, IPL_CLOCK, clockintr, 0);
@


1.1
log
@Initial revision
@
text
@d314 1
a314 2
	(void)isa_intr_establish(0, ISA_IST_PULSE, ISA_IPL_CLOCK,
	    clockintr, 0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
