head	1.17;
access;
symbols
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.15.0.8
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.15
	UBC:1.15.0.2
	UBC_BASE:1.15
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.12
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.10
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.8
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.6
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.8.0.10
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.8
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.6
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.4
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.17
date	2004.06.13.21.49.16;	author niklas;	state dead;
branches;
next	1.16;

1.16
date	2003.04.17.03.42.14;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.06.21.09.13;	author niklas;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.12.04.00.00.36;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.18.20.46.49;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.12.20.28.20;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.05.23.25.52;	author art;	state Exp;
branches;
next	1.10;

1.10
date	99.02.26.04.22.03;	author art;	state Exp;
branches
	1.10.6.1;
next	1.9;

1.9
date	99.01.13.07.26.01;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.09.08.18.44.05;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	96.03.19.21.09.42;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.02.20.04.35.35;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.02.14.08.30.07;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.02.14.07.12.43;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.01.08.18.52.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.08.09.33.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.38;	author deraadt;	state Exp;
branches;
next	;

1.10.6.1
date	2001.07.04.10.16.56;	author niklas;	state Exp;
branches;
next	1.10.6.2;

1.10.6.2
date	2001.07.14.10.02.44;	author ho;	state Exp;
branches;
next	1.10.6.3;

1.10.6.3
date	2001.10.28.08.16.45;	author niklas;	state Exp;
branches;
next	1.10.6.4;

1.10.6.4
date	2001.11.13.21.00.52;	author niklas;	state Exp;
branches;
next	1.10.6.5;

1.10.6.5
date	2001.12.05.00.39.10;	author niklas;	state Exp;
branches;
next	1.10.6.6;

1.10.6.6
date	2002.03.06.01.01.00;	author niklas;	state Exp;
branches;
next	1.10.6.7;

1.10.6.7
date	2003.05.13.19.42.08;	author ho;	state Exp;
branches;
next	1.10.6.8;

1.10.6.8
date	2003.05.15.04.08.02;	author niklas;	state Exp;
branches;
next	1.10.6.9;

1.10.6.9
date	2003.05.15.17.47.16;	author niklas;	state Exp;
branches;
next	1.10.6.10;

1.10.6.10
date	2004.03.16.18.27.10;	author niklas;	state dead;
branches;
next	;

1.15.2.1
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@debranch SMP, have fun
@
text
@/*	$OpenBSD: vector.s,v 1.16 2003/04/17 03:42:14 drahn Exp $	*/
/*	$NetBSD: vector.s,v 1.32 1996/01/07 21:29:47 mycroft Exp $	*/

/*
 * Copyright (c) 1993, 1994, 1995 Charles M. Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *	must display the following acknowledgement:
 *	This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *	derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <i386/isa/icu.h>
#include <dev/isa/isareg.h>

#define ICU_HARDWARE_MASK

#define MY_COUNT _C_LABEL(uvmexp)

/*
 * These macros are fairly self explanatory.  If ICU_SPECIAL_MASK_MODE is
 * defined, we try to take advantage of the ICU's `special mask mode' by only
 * EOIing the interrupts on return.  This avoids the requirement of masking and
 * unmasking.  We can't do this without special mask mode, because the ICU
 * would also hold interrupts that it thinks are of lower priority.
 *
 * Many machines do not support special mask mode, so by default we don't try
 * to use it.
 */

#define	IRQ_BIT(irq_num)	(1 << ((irq_num) % 8))
#define	IRQ_BYTE(irq_num)	((irq_num) / 8)

#ifdef ICU_SPECIAL_MASK_MODE

#define	ACK1(irq_num)
#define	ACK2(irq_num) \
	movb	$(0x60|IRQ_SLAVE),%al	/* specific EOI for IRQ2 */	;\
	outb	%al,$IO_ICU1
#define	MASK(irq_num, icu)
#define	UNMASK(irq_num, icu) \
	movb	$(0x60|(irq_num%8)),%al	/* specific EOI */		;\
	outb	%al,$icu

#else /* ICU_SPECIAL_MASK_MODE */

#ifndef	AUTO_EOI_1
#define	ACK1(irq_num) \
	movb	$(0x60|(irq_num%8)),%al	/* specific EOI */		;\
	outb	%al,$IO_ICU1
#else
#define	ACK1(irq_num)
#endif

#ifndef AUTO_EOI_2
#define	ACK2(irq_num) \
	movb	$(0x60|(irq_num%8)),%al	/* specific EOI */		;\
	outb	%al,$IO_ICU2		/* do the second ICU first */	;\
	movb	$(0x60|IRQ_SLAVE),%al	/* specific EOI for IRQ2 */	;\
	outb	%al,$IO_ICU1
#else
#define	ACK2(irq_num)
#endif

#ifdef ICU_HARDWARE_MASK

#define	MASK(irq_num, icu) \
	movb	_C_LABEL(imen) + IRQ_BYTE(irq_num),%al				;\
	orb	$IRQ_BIT(irq_num),%al					;\
	movb	%al,_C_LABEL(imen) + IRQ_BYTE(irq_num)				;\
	FASTER_NOP							;\
	outb	%al,$(icu+1)
#define	UNMASK(irq_num, icu) \
	cli								;\
	movb	_C_LABEL(imen) + IRQ_BYTE(irq_num),%al				;\
	andb	$~IRQ_BIT(irq_num),%al					;\
	movb	%al,_C_LABEL(imen) + IRQ_BYTE(irq_num)				;\
	FASTER_NOP							;\
	outb	%al,$(icu+1)						;\
	sti

#else /* ICU_HARDWARE_MASK */

#define	MASK(irq_num, icu)
#define	UNMASK(irq_num, icu)

#endif /* ICU_HARDWARE_MASK */

#endif /* ICU_SPECIAL_MASK_MODE */

/*
 * Macros for interrupt entry, call to handler, and exit.
 *
 * XXX
 * The interrupt frame is set up to look like a trap frame.  This may be a
 * waste.  The only handler which needs a frame is the clock handler, and it
 * only needs a few bits.  Xdoreti() needs a trap frame for handling ASTs, but
 * it could easily convert the frame on demand.
 *
 * The direct costs of setting up a trap frame are two pushl's (error code and
 * trap number), an addl to get rid of these, and pushing and popping the
 * callee-saved registers %esi, %edi, %ebx, and %ebp twice.
 *
 * If the interrupt frame is made more flexible,  INTR can push %eax first and
 * decide the ipending case with less overhead, e.g., by avoiding loading the
 * segment registers.
 *
 * XXX
 * Should we do a cld on every system entry to avoid the requirement for
 * scattered cld's?
 */

	.globl	_C_LABEL(isa_strayintr)

/*
 * Normal vectors.
 *
 * We cdr down the intrhand chain, calling each handler with its appropriate
 * argument (0 meaning a pointer to the frame, for clock interrupts).
 *
 * The handler returns one of three values:
 *   0 - This interrupt wasn't for me.
 *   1 - This interrupt was for me.
 *  -1 - This interrupt might have been for me, but I don't know.
 * If there are no handlers, or they all return 0, we flags it as a `stray'
 * interrupt.  On a system with level-triggered interrupts, we could terminate
 * immediately when one of them returns 1; but this is a PC.
 *
 * On exit, we jump to Xdoreti(), to process soft interrupts and ASTs.
 */
#define	INTR(irq_num, icu, ack) \
IDTVEC(recurse/**/irq_num)						;\
	pushfl								;\
	pushl	%cs							;\
	pushl	%esi							;\
	cli								;\
_C_LABEL(Xintr)/**/irq_num/**/:						;\
	pushl	$0			/* dummy error code */		;\
	pushl	$T_ASTFLT		/* trap # for doing ASTs */	;\
	INTRENTRY							;\
	MAKE_FRAME							;\
	MASK(irq_num, icu)		/* mask it in hardware */	;\
	ack(irq_num)			/* and allow other intrs */	;\
	incl	MY_COUNT+V_INTR		/* statistical info */		;\
	movl	_C_LABEL(iminlevel) + (irq_num) * 4, %eax		;\
	movzbl	_C_LABEL(cpl),%ebx					;\
	cmpl	%eax,%ebx						;\
	jae	_C_LABEL(Xhold/**/irq_num)/* currently masked; hold it */;\
_C_LABEL(Xresume)/**/irq_num/**/:					;\
	movzbl	_C_LABEL(cpl),%eax	/* cpl to restore on exit */	;\
	pushl	%eax							;\
	movl	_C_LABEL(imaxlevel) + (irq_num) * 4,%eax		;\
	movl	%eax,_C_LABEL(cpl)	/* block enough for this irq */	;\
	sti				/* safe to take intrs now */	;\
	movl	_C_LABEL(intrhand) + (irq_num) * 4,%ebx	/* head of chain */	;\
	testl	%ebx,%ebx						;\
	jz	_C_LABEL(Xstray)/**/irq_num	/* no handlears; we're stray */	;\
	STRAY_INITIALIZE		/* nobody claimed it yet */	;\
7:	movl	IH_ARG(%ebx),%eax	/* get handler arg */		;\
	testl	%eax,%eax						;\
	jnz	4f							;\
	movl	%esp,%eax		/* 0 means frame pointer */	;\
4:	pushl	%eax							;\
	call	*IH_FUN(%ebx)		/* call it */			;\
	addl	$4,%esp			/* toss the arg */		;\
	STRAY_INTEGRATE			/* maybe he claimed it */	;\
	orl	%eax,%eax		/* should it be counted? */	;\
	jz	5f			/* no, skip it */		;\
	incl	IH_COUNT(%ebx)		/* count the intrs */		;\
5:	movl	IH_NEXT(%ebx),%ebx	/* next handler in chain */	;\
	testl	%ebx,%ebx						;\
	jnz	7b							;\
	STRAY_TEST			/* see if it's a stray */	;\
6:	UNMASK(irq_num, icu)		/* unmask it in hardware */	;\
	jmp	_C_LABEL(Xdoreti)	/* lower spl and do ASTs */	;\
IDTVEC(stray/**/irq_num)						;\
	pushl	$irq_num						;\
	call	_C_LABEL(isa_strayintr)					;\
	addl	$4,%esp							;\
	jmp	6b							;\
IDTVEC(hold/**/irq_num)							;\
	orb	$IRQ_BIT(irq_num),_C_LABEL(ipending) + IRQ_BYTE(irq_num)	;\
	INTRFASTEXIT

#if defined(DEBUG) && defined(notdef)
#define	STRAY_INITIALIZE \
	xorl	%esi,%esi
#define	STRAY_INTEGRATE \
	orl	%eax,%esi
#define	STRAY_TEST \
	testl	%esi,%esi						;\
	jz	_C_LABEL(Xstray)/**/irq_num
#else /* !DEBUG */
#define	STRAY_INITIALIZE
#define	STRAY_INTEGRATE
#define	STRAY_TEST
#endif /* DEBUG */

#ifdef DDB
#define	MAKE_FRAME \
	leal	-8(%esp),%ebp
#else /* !DDB */
#define	MAKE_FRAME
#endif /* DDB */

INTR(0, IO_ICU1, ACK1)
INTR(1, IO_ICU1, ACK1)
INTR(2, IO_ICU1, ACK1)
INTR(3, IO_ICU1, ACK1)
INTR(4, IO_ICU1, ACK1)
INTR(5, IO_ICU1, ACK1)
INTR(6, IO_ICU1, ACK1)
INTR(7, IO_ICU1, ACK1)
INTR(8, IO_ICU2, ACK2)
INTR(9, IO_ICU2, ACK2)
INTR(10, IO_ICU2, ACK2)
INTR(11, IO_ICU2, ACK2)
INTR(12, IO_ICU2, ACK2)
INTR(13, IO_ICU2, ACK2)
INTR(14, IO_ICU2, ACK2)
INTR(15, IO_ICU2, ACK2)

/*
 * These tables are used by the ISA configuration code.
 */
/* interrupt service routine entry points */
IDTVEC(intr)
	.long   _C_LABEL(Xintr0), _C_LABEL(Xintr1), _C_LABEL(Xintr2)
	.long	_C_LABEL(Xintr3), _C_LABEL(Xintr4), _C_LABEL(Xintr5)
	.long	_C_LABEL(Xintr6), _C_LABEL(Xintr7), _C_LABEL(Xintr8)
	.long	_C_LABEL(Xintr9), _C_LABEL(Xintr10), _C_LABEL(Xintr11)
	.long	_C_LABEL(Xintr12), _C_LABEL(Xintr13)
	.long	_C_LABEL(Xintr14), _C_LABEL(Xintr15)

/*
 * These tables are used by Xdoreti() and Xspllower().
 */
/* resume points for suspended interrupts */
IDTVEC(resume)
	.long	_C_LABEL(Xresume0), _C_LABEL(Xresume1)
	.long	_C_LABEL(Xresume2), _C_LABEL(Xresume3)
	.long	_C_LABEL(Xresume4), _C_LABEL(Xresume5)
	.long	_C_LABEL(Xresume6), _C_LABEL(Xresume7)
	.long	_C_LABEL(Xresume8), _C_LABEL(Xresume9)
	.long	_C_LABEL(Xresume10), _C_LABEL(Xresume11)
	.long	_C_LABEL(Xresume12), _C_LABEL(Xresume13)
	.long	_C_LABEL(Xresume14), _C_LABEL(Xresume15)
	/* for soft interrupts */
	.long	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.long	_C_LABEL(Xsofttty), _C_LABEL(Xsoftnet)
	.long	_C_LABEL(Xsoftclock)
/* fake interrupts to resume from splx() */
IDTVEC(recurse)
	.long	_C_LABEL(Xrecurse0), _C_LABEL(Xrecurse1)
	.long	_C_LABEL(Xrecurse2), _C_LABEL(Xrecurse3)
	.long	_C_LABEL(Xrecurse4), _C_LABEL(Xrecurse5)
	.long	_C_LABEL(Xrecurse6), _C_LABEL(Xrecurse7)
	.long	_C_LABEL(Xrecurse8), _C_LABEL(Xrecurse9)
	.long	_C_LABEL(Xrecurse10), _C_LABEL(Xrecurse11)
	.long	_C_LABEL(Xrecurse12), _C_LABEL(Xrecurse13)
	.long	_C_LABEL(Xrecurse14), _C_LABEL(Xrecurse15)
	/* for soft interrupts */
	.long	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.long	_C_LABEL(Xsofttty), _C_LABEL(Xsoftnet)
	.long	_C_LABEL(Xsoftclock)

/* Some bogus data, to keep vmstat happy, for now. */
	.globl	_C_LABEL(intrnames), _C_LABEL(eintrnames)
	.globl	_C_LABEL(intrcnt), _C_LABEL(eintrcnt)
_C_LABEL(intrnames):
	.long	0
_C_LABEL(eintrnames):
_C_LABEL(intrcnt):
	.long	0
_C_LABEL(eintrcnt):
@


1.16
log
@i386 changes to move to ELF. asm cleanup. Change MAXDSIZ to 512M for 1Gsep.
DARPA funded work.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.15 2001/12/06 21:09:13 niklas Exp $	*/
@


1.15
log
@Shave never used fastvec code
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.14 2001/12/04 00:00:36 niklas Exp $	*/
d88 1
a88 1
	movb	_imen + IRQ_BYTE(irq_num),%al				;\
d90 1
a90 1
	movb	%al,_imen + IRQ_BYTE(irq_num)				;\
d95 1
a95 1
	movb	_imen + IRQ_BYTE(irq_num),%al				;\
d97 1
a97 1
	movb	%al,_imen + IRQ_BYTE(irq_num)				;\
d133 1
a133 1
	.globl	_isa_strayintr
d157 1
a157 1
_Xintr/**/irq_num/**/:							;\
d165 1
a165 1
	movl	_C_LABEL(iminlevel) + (irq_num) * 4, %eax			;\
d169 1
a169 1
_Xresume/**/irq_num/**/:						;\
d172 1
a172 1
	movl	_C_LABEL(imaxlevel) + (irq_num) * 4,%eax			;\
d175 1
a175 1
	movl	_intrhand + (irq_num) * 4,%ebx	/* head of chain */	;\
d177 1
a177 1
	jz	_Xstray/**/irq_num	/* no handlears; we're stray */	;\
d184 1
a184 1
	call	IH_FUN(%ebx)		/* call it */			;\
d195 1
a195 1
	jmp	_Xdoreti		/* lower spl and do ASTs */	;\
d198 1
a198 1
	call	_isa_strayintr						;\
d202 1
a202 1
	orb	$IRQ_BIT(irq_num),_ipending + IRQ_BYTE(irq_num)		;\
d212 1
a212 1
	jz	_Xstray/**/irq_num
d248 6
a253 3
	.long   _Xintr0, _Xintr1, _Xintr2, _Xintr3, _Xintr4, _Xintr5, _Xintr6
	.long   _Xintr7, _Xintr8, _Xintr9, _Xintr10, _Xintr11, _Xintr12
	.long   _Xintr13, _Xintr14, _Xintr15
d260 8
a267 4
	.long   _Xresume0, _Xresume1, _Xresume2, _Xresume3, _Xresume4
	.long   _Xresume5, _Xresume6, _Xresume7, _Xresume8, _Xresume9
	.long   _Xresume10, _Xresume11, _Xresume12, _Xresume13, _Xresume14
	.long   _Xresume15
d270 2
a271 1
	.long	_Xsofttty, _Xsoftnet, _Xsoftclock
d274 8
a281 4
	.long   _Xrecurse0, _Xrecurse1, _Xrecurse2, _Xrecurse3, _Xrecurse4
	.long   _Xrecurse5, _Xrecurse6, _Xrecurse7, _Xrecurse8, _Xrecurse9
	.long   _Xrecurse10, _Xrecurse11, _Xrecurse12, _Xrecurse13, _Xrecurse14
	.long   _Xrecurse15
d284 2
a285 1
	.long	_Xsofttty, _Xsoftnet, _Xsoftclock
d288 3
a290 2
	.globl	_intrnames, _eintrnames, _intrcnt, _eintrcnt
_intrnames:
d292 2
a293 2
_eintrnames:
_intrcnt:
d295 1
a295 1
_eintrcnt:
@


1.15.2.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d88 1
a88 1
	movb	_C_LABEL(imen) + IRQ_BYTE(irq_num),%al				;\
d90 1
a90 1
	movb	%al,_C_LABEL(imen) + IRQ_BYTE(irq_num)				;\
d95 1
a95 1
	movb	_C_LABEL(imen) + IRQ_BYTE(irq_num),%al				;\
d97 1
a97 1
	movb	%al,_C_LABEL(imen) + IRQ_BYTE(irq_num)				;\
d133 1
a133 1
	.globl	_C_LABEL(isa_strayintr)
d157 1
a157 1
_C_LABEL(Xintr)/**/irq_num/**/:						;\
d165 1
a165 1
	movl	_C_LABEL(iminlevel) + (irq_num) * 4, %eax		;\
d169 1
a169 1
_C_LABEL(Xresume)/**/irq_num/**/:					;\
d172 1
a172 1
	movl	_C_LABEL(imaxlevel) + (irq_num) * 4,%eax		;\
d175 1
a175 1
	movl	_C_LABEL(intrhand) + (irq_num) * 4,%ebx	/* head of chain */	;\
d177 1
a177 1
	jz	_C_LABEL(Xstray)/**/irq_num	/* no handlears; we're stray */	;\
d184 1
a184 1
	call	*IH_FUN(%ebx)		/* call it */			;\
d195 1
a195 1
	jmp	_C_LABEL(Xdoreti)	/* lower spl and do ASTs */	;\
d198 1
a198 1
	call	_C_LABEL(isa_strayintr)					;\
d202 1
a202 1
	orb	$IRQ_BIT(irq_num),_C_LABEL(ipending) + IRQ_BYTE(irq_num)	;\
d212 1
a212 1
	jz	_C_LABEL(Xstray)/**/irq_num
d248 3
a250 6
	.long   _C_LABEL(Xintr0), _C_LABEL(Xintr1), _C_LABEL(Xintr2)
	.long	_C_LABEL(Xintr3), _C_LABEL(Xintr4), _C_LABEL(Xintr5)
	.long	_C_LABEL(Xintr6), _C_LABEL(Xintr7), _C_LABEL(Xintr8)
	.long	_C_LABEL(Xintr9), _C_LABEL(Xintr10), _C_LABEL(Xintr11)
	.long	_C_LABEL(Xintr12), _C_LABEL(Xintr13)
	.long	_C_LABEL(Xintr14), _C_LABEL(Xintr15)
d257 4
a260 8
	.long	_C_LABEL(Xresume0), _C_LABEL(Xresume1)
	.long	_C_LABEL(Xresume2), _C_LABEL(Xresume3)
	.long	_C_LABEL(Xresume4), _C_LABEL(Xresume5)
	.long	_C_LABEL(Xresume6), _C_LABEL(Xresume7)
	.long	_C_LABEL(Xresume8), _C_LABEL(Xresume9)
	.long	_C_LABEL(Xresume10), _C_LABEL(Xresume11)
	.long	_C_LABEL(Xresume12), _C_LABEL(Xresume13)
	.long	_C_LABEL(Xresume14), _C_LABEL(Xresume15)
d263 1
a263 2
	.long	_C_LABEL(Xsofttty), _C_LABEL(Xsoftnet)
	.long	_C_LABEL(Xsoftclock)
d266 4
a269 8
	.long	_C_LABEL(Xrecurse0), _C_LABEL(Xrecurse1)
	.long	_C_LABEL(Xrecurse2), _C_LABEL(Xrecurse3)
	.long	_C_LABEL(Xrecurse4), _C_LABEL(Xrecurse5)
	.long	_C_LABEL(Xrecurse6), _C_LABEL(Xrecurse7)
	.long	_C_LABEL(Xrecurse8), _C_LABEL(Xrecurse9)
	.long	_C_LABEL(Xrecurse10), _C_LABEL(Xrecurse11)
	.long	_C_LABEL(Xrecurse12), _C_LABEL(Xrecurse13)
	.long	_C_LABEL(Xrecurse14), _C_LABEL(Xrecurse15)
d272 1
a272 2
	.long	_C_LABEL(Xsofttty), _C_LABEL(Xsoftnet)
	.long	_C_LABEL(Xsoftclock)
d275 2
a276 3
	.globl	_C_LABEL(intrnames), _C_LABEL(eintrnames)
	.globl	_C_LABEL(intrcnt), _C_LABEL(eintrcnt)
_C_LABEL(intrnames):
d278 2
a279 2
_C_LABEL(eintrnames):
_C_LABEL(intrcnt):
d281 1
a281 1
_C_LABEL(eintrcnt):
@


1.14
log
@New try at a level based irq system.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.12 2001/11/12 20:28:20 niklas Exp $	*/
a135 56
 * Fast vectors.
 *
 * Like a normal vector, but run with all interrupts off.  The handler is
 * expected to be as fast as possible, and is expected to not change the
 * interrupt flag.  We pass an argument in like normal vectors, but we assume
 * that a pointer to the frame is never required.  There can be only one
 * handler on a fast vector.
 *
 * XXX
 * Note that we assume fast vectors don't do anything that would cause an AST
 * or softintr; if so, it will be deferred until the next clock tick (or
 * possibly sooner).
 */
#define	FAST(irq_num, icu, ack) \
IDTVEC(fast/**/irq_num)							;\
	pushl	%eax			/* save call-used registers */	;\
	pushl	%ecx							;\
	pushl	%edx							;\
	pushl	%ds							;\
	pushl	%es							;\
	movl	$GSEL(GDATA_SEL, SEL_KPL),%eax				;\
	movl	%ax,%ds							;\
	movl	%ax,%es							;\
	/* have to do this here because %eax is lost on call */		;\
	movl	_intrhand + (irq_num) * 4,%eax				;\
	incl	IH_COUNT(%eax)						;\
	pushl	IH_ARG(%eax)						;\
	call	IH_FUN(%eax)						;\
	ack(irq_num)							;\
	addl	$4,%esp							;\
	incl	MY_COUNT+V_INTR		/* statistical info */		;\
	popl	%es							;\
	popl	%ds							;\
	popl	%edx							;\
	popl	%ecx							;\
	popl	%eax							;\
	iret

FAST(0, IO_ICU1, ACK1)
FAST(1, IO_ICU1, ACK1)
FAST(2, IO_ICU1, ACK1)
FAST(3, IO_ICU1, ACK1)
FAST(4, IO_ICU1, ACK1)
FAST(5, IO_ICU1, ACK1)
FAST(6, IO_ICU1, ACK1)
FAST(7, IO_ICU1, ACK1)
FAST(8, IO_ICU2, ACK2)
FAST(9, IO_ICU2, ACK2)
FAST(10, IO_ICU2, ACK2)
FAST(11, IO_ICU2, ACK2)
FAST(12, IO_ICU2, ACK2)
FAST(13, IO_ICU2, ACK2)
FAST(14, IO_ICU2, ACK2)
FAST(15, IO_ICU2, ACK2)

/*
a250 5
/* fast interrupt routine entry points */
IDTVEC(fast)
	.long   _Xfast0, _Xfast1, _Xfast2, _Xfast3, _Xfast4, _Xfast5, _Xfast6
	.long   _Xfast7, _Xfast8, _Xfast9, _Xfast10, _Xfast11, _Xfast12
	.long   _Xfast13, _Xfast14, _Xfast15
@


1.13
log
@Revert niklas's broken ICU interrupt handling changes; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.11 2001/05/05 23:25:52 art Exp $	*/
d221 4
a224 2
	testb	$IRQ_BIT(irq_num),_cpl + IRQ_BYTE(irq_num)		;\
	jnz	_Xhold/**/irq_num	/* currently masked; hold it */	;\
d226 1
a226 1
	movl	_cpl,%eax		/* cpl to restore on exit */	;\
d228 2
a229 2
	orl	_intrmask + (irq_num) * 4,%eax				;\
	movl	%eax,_cpl		/* add in this intr's mask */	;\
@


1.12
log
@Redo the ICU interrupt handling system to better emulate an APIC system.
This is done by representing the current blockings of interrupts with
a priority level instead of an interrupt mask.  This makes it possible to
share implementations for spl* functions/macros between both ICU
and APIC (a must when going MP) systems.  In this process, assign
soft interrupts their own levels to match the way things will be on
APIC systems where they actually will be real interrupts and not just
bits in a pending mask as they are now.
Heavily inspired by Bill Studenmunds SMP work in NetBSD
@
text
@d221 2
a222 4
	movl	_C_LABEL(ilevel) + (irq_num) * 4, %eax			;\
	movzbl	_C_LABEL(cpl),%ebx					;\
	cmpl	%eax,%ebx						;\
	jae	_C_LABEL(Xhold/**/irq_num)/* currently masked; hold it */;\
d224 1
a224 1
	movzbl	_C_LABEL(cpl),%eax	/* cpl to restore on exit */	;\
d226 2
a227 2
	movl	_C_LABEL(ilevel) + (irq_num) * 4,%eax			;\
	movl	%eax,_C_LABEL(cpl)	/* block enough for this irq */	;\
@


1.11
log
@PMAP_NEW and UVM are no longer optional on i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10 1999/02/26 04:22:03 art Exp $	*/
d221 4
a224 2
	testb	$IRQ_BIT(irq_num),_cpl + IRQ_BYTE(irq_num)		;\
	jnz	_Xhold/**/irq_num	/* currently masked; hold it */	;\
d226 1
a226 1
	movl	_cpl,%eax		/* cpl to restore on exit */	;\
d228 2
a229 2
	orl	_intrmask + (irq_num) * 4,%eax				;\
	movl	%eax,_cpl		/* add in this intr's mask */	;\
@


1.10
log
@cnt.foo -> uvmexp.bar in uvm
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.9 1999/01/13 07:26:01 niklas Exp $	*/
a37 1
#if defined(UVM)
a38 3
#else
#define MY_COUNT _cnt
#endif
@


1.10.6.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10 1999/02/26 04:22:03 art Exp $	*/
d38 1
d40 3
@


1.10.6.2
log
@Initial import of some SMP code from NetBSD.
Not really working here yet, but there is some work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10.6.1 2001/07/04 10:16:56 niklas Exp $	*/
d221 1
a221 3
	movl	_intrmask + (irq_num) * 4, %eax			;\
	movzbl	CPL,%ebx						;\
	cmpl	%eax,%ebx						;\
d224 1
a224 1
	movzbl	CPL,%eax		/* cpl to restore on exit */	;\
d227 1
a227 1
	movl	%eax,CPL		/* add in this intr's mask */	;\
@


1.10.6.3
log
@Some vestiges from the old interrupt system was left; new code from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d221 1
a221 1
	movl	_C_LABEL(ilevel) + (irq_num) * 4, %eax			;\
d228 1
a228 1
	movl	_C_LABEL(ilevel) + (irq_num) * 4, %eax	/* XXXtuneme */	;\
d231 1
a231 1
	movl	_C_LABEL(intrhand) + (irq_num) * 4,%ebx	/* head of chain */ ;\
@


1.10.6.4
log
@Merge in -current
@
text
@d224 1
a224 2
	/* XXX not jae? */						;\
	jnz	_C_LABEL(Xhold/**/irq_num)/* currently masked; hold it */;\
d228 1
a228 1
	movl	_C_LABEL(ilevel) + (irq_num) * 4,%eax			;\
@


1.10.6.5
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10.6.4 2001/11/13 21:00:52 niklas Exp $	*/
d221 1
a221 1
	movl	_C_LABEL(iminlevel) + (irq_num) * 4, %eax		;\
d229 2
a230 2
	movl	_C_LABEL(imaxlevel) + (irq_num) * 4,%eax		;\
	movl	%eax,CPL		/* block enough for this irq */	;\
@


1.10.6.6
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d136 56
d308 5
@


1.10.6.7
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10.6.6 2002/03/06 01:01:00 niklas Exp $	*/
d88 1
a88 1
	movb	_C_LABEL(imen) + IRQ_BYTE(irq_num),%al				;\
d90 1
a90 1
	movb	%al,_C_LABEL(imen) + IRQ_BYTE(irq_num)				;\
d95 1
a95 1
	movb	_C_LABEL(imen) + IRQ_BYTE(irq_num),%al				;\
d97 1
a97 1
	movb	%al,_C_LABEL(imen) + IRQ_BYTE(irq_num)				;\
d133 1
a133 1
	.globl	_C_LABEL(isa_strayintr)
d157 1
a157 1
_C_LABEL(Xintr)/**/irq_num/**/:						;\
d168 3
a170 2
	jae	_C_LABEL(Xhold/**/irq_num)/* currently masked; hold it */;\
Xresume/**/irq_num/**/:						;\
d178 1
a178 1
	jz	_C_LABEL(Xstray)/**/irq_num	/* no handlears; we're stray */	;\
d185 1
a185 1
	call	*IH_FUN(%ebx)		/* call it */			;\
d196 1
a196 1
	jmp	_C_LABEL(Xdoreti)	/* lower spl and do ASTs */	;\
d199 1
a199 1
	call	_C_LABEL(isa_strayintr)					;\
d203 1
a203 1
	orb	$IRQ_BIT(irq_num),_C_LABEL(ipending) + IRQ_BYTE(irq_num)	;\
d213 1
a213 1
	jz	_C_LABEL(Xstray)/**/irq_num
d249 3
a251 6
	.long   _C_LABEL(Xintr0), _C_LABEL(Xintr1), _C_LABEL(Xintr2)
	.long	_C_LABEL(Xintr3), _C_LABEL(Xintr4), _C_LABEL(Xintr5)
	.long	_C_LABEL(Xintr6), _C_LABEL(Xintr7), _C_LABEL(Xintr8)
	.long	_C_LABEL(Xintr9), _C_LABEL(Xintr10), _C_LABEL(Xintr11)
	.long	_C_LABEL(Xintr12), _C_LABEL(Xintr13)
	.long	_C_LABEL(Xintr14), _C_LABEL(Xintr15)
d258 4
a261 8
	.long	_C_LABEL(Xresume0), _C_LABEL(Xresume1)
	.long	_C_LABEL(Xresume2), _C_LABEL(Xresume3)
	.long	_C_LABEL(Xresume4), _C_LABEL(Xresume5)
	.long	_C_LABEL(Xresume6), _C_LABEL(Xresume7)
	.long	_C_LABEL(Xresume8), _C_LABEL(Xresume9)
	.long	_C_LABEL(Xresume10), _C_LABEL(Xresume11)
	.long	_C_LABEL(Xresume12), _C_LABEL(Xresume13)
	.long	_C_LABEL(Xresume14), _C_LABEL(Xresume15)
d264 1
a264 2
	.long	_C_LABEL(Xsofttty), _C_LABEL(Xsoftnet)
	.long	_C_LABEL(Xsoftclock)
d267 4
a270 8
	.long	_C_LABEL(Xrecurse0), _C_LABEL(Xrecurse1)
	.long	_C_LABEL(Xrecurse2), _C_LABEL(Xrecurse3)
	.long	_C_LABEL(Xrecurse4), _C_LABEL(Xrecurse5)
	.long	_C_LABEL(Xrecurse6), _C_LABEL(Xrecurse7)
	.long	_C_LABEL(Xrecurse8), _C_LABEL(Xrecurse9)
	.long	_C_LABEL(Xrecurse10), _C_LABEL(Xrecurse11)
	.long	_C_LABEL(Xrecurse12), _C_LABEL(Xrecurse13)
	.long	_C_LABEL(Xrecurse14), _C_LABEL(Xrecurse15)
d273 1
a273 2
	.long	_C_LABEL(Xsofttty), _C_LABEL(Xsoftnet)
	.long	_C_LABEL(Xsoftclock)
d276 2
a277 3
	.globl	_C_LABEL(intrnames), _C_LABEL(eintrnames)
	.globl	_C_LABEL(intrcnt), _C_LABEL(eintrcnt)
_C_LABEL(intrnames):
d279 2
a280 2
_C_LABEL(eintrnames):
_C_LABEL(intrcnt):
d282 1
a282 1
_C_LABEL(eintrcnt):
@


1.10.6.8
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10.6.7 2003/05/13 19:42:08 ho Exp $	*/
a134 8
#ifdef MULTIPROCESSOR
#define LOCK_KERNEL	call _C_LABEL(i386_intlock)
#define UNLOCK_KERNEL	call _C_LABEL(i386_intunlock)
#else
#define LOCK_KERNEL
#define UNLOCK_KERNEL
#endif

a178 1
	LOCK_KERNEL							;\
a192 1
	UNLOCK_KERNEL							;\
@


1.10.6.9
log
@LAPIC access need to be 32 bits, also load %fs with CPU segment
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10.6.8 2003/05/15 04:08:02 niklas Exp $	*/
d174 1
a174 1
	movl	CPL,%ebx						;\
d178 1
a178 1
	movl	CPL,%eax		/* cpl to restore on exit */	;\
@


1.10.6.10
log
@Moving vector.s from isa to i386 in preparation for a merged (for all kind of sources) interrupt system
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.10.6.9 2003/05/15 17:47:16 niklas Exp $	*/
@


1.9
log
@RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD: vector.s,v 1.32 1996/01/07 21:29:47 mycroft Exp $	*/
d38 6
d170 1
a170 1
	incl	_cnt+V_INTR		/* statistical info */		;\
d224 1
a224 1
	incl	_cnt+V_INTR		/* statistical info */		;\
@


1.8
log
@Only count the interrupt if the interrupt handler claims that it did
anything with it.
@
text
@d1 1
@


1.7
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d238 2
d241 1
a241 1
	movl	IH_NEXT(%ebx),%ebx	/* next handler in chain */	;\
d245 1
a245 1
5:	UNMASK(irq_num, icu)		/* unmask it in hardware */	;\
d251 1
a251 1
	jmp	5b							;\
@


1.6
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@a294 2
	.data

d329 4
a332 1
	.globl	_intrcnt, _eintrcnt
d334 1
a334 1
	.long 0
a335 7

	.globl	_intrnames, _eintrnames
_intrnames:
	.long 0
_eintrnames:

	.text
@


1.5
log
@Tally interrupts in a way that "vmstat -i" can find; temporary measure
until "vmstat -i" learns how to read the device chains and show interrupts
per device.
@
text
@a163 1
	incl	_intrcnt + (irq_num) * 4				;\
a220 1
	incl	_intrcnt + (irq_num) * 4				;\
d333 1
a333 1
	.space ICU_LEN * 4
d338 1
a338 16
	.asciz	"irq  0"
	.asciz	"irq  1"
	.asciz	"irq  2"
	.asciz	"irq  3"
	.asciz	"irq  4"
	.asciz	"irq  5"
	.asciz	"irq  6"
	.asciz	"irq  7"
	.asciz	"irq  8"
	.asciz	"irq  9"
	.asciz	"irq 10"
	.asciz	"irq 11"
	.asciz	"irq 12"
	.asciz	"irq 13"
	.asciz	"irq 14"
	.asciz	"irq 15"
@


1.4
log
@Tally all interrupts, not only FASTINTR ones
@
text
@d164 1
d222 1
d297 2
d333 6
a338 1
	.globl	_intrnames, _eintrnames, _intrcnt, _eintrcnt
d340 16
a355 1
	.long	0
d357 2
a358 3
_intrcnt:
	.long	0
_eintrcnt:
@


1.3
log
@update from netbsd
@
text
@d217 1
@


1.2
log
@from netbsd:
Deal with GCC's dead code elimination being suboptimal.
Modify splraise() to allow better optimization.
Make cpl, ipending, and astpending volatile.
Make sure interrupts are disabled before jumping to a resume point,
to prevent races.
Make FPU faults use INTRFASTEXIT, and remove INTREXIT.
Build the frame for recursive interrupts manually, and make sure to
disable interrupts to avoid races.
VS: ----------------------------------------------------------------------
@
text
@d1 1
a1 1
/*	$NetBSD: vector.s,v 1.31 1996/01/07 03:59:35 mycroft Exp $	*/
d53 2
a54 2
#define	ENABLE_ICU1(irq_num)
#define	ENABLE_ICU1_AND_2(irqnum) \
d65 1
a65 1
#define	ENABLE_ICU1(irq_num) \
d69 1
a69 1
#define	ENABLE_ICU1(irq_num)
d73 1
a73 1
#define	ENABLE_ICU1_AND_2(irq_num) \
d79 1
a79 1
#define	ENABLE_ICU1_AND_2(irq_num)
d146 1
a146 1
#define	FAST(irq_num, icu, enable_icus) \
d161 1
a161 1
	enable_icus(irq_num)						;\
d171 16
a186 16
FAST(0, IO_ICU1, ENABLE_ICU1)
FAST(1, IO_ICU1, ENABLE_ICU1)
FAST(2, IO_ICU1, ENABLE_ICU1)
FAST(3, IO_ICU1, ENABLE_ICU1)
FAST(4, IO_ICU1, ENABLE_ICU1)
FAST(5, IO_ICU1, ENABLE_ICU1)
FAST(6, IO_ICU1, ENABLE_ICU1)
FAST(7, IO_ICU1, ENABLE_ICU1)
FAST(8, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(9, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(10, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(11, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(12, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(13, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(14, IO_ICU2, ENABLE_ICU1_AND_2)
FAST(15, IO_ICU2, ENABLE_ICU1_AND_2)
d204 1
a204 1
#define	INTR(irq_num, icu, enable_icus) \
d216 1
a216 1
	enable_icus(irq_num)		/* and allow other intrs */	;\
d274 16
a289 16
INTR(0, IO_ICU1, ENABLE_ICU1)
INTR(1, IO_ICU1, ENABLE_ICU1)
INTR(2, IO_ICU1, ENABLE_ICU1)
INTR(3, IO_ICU1, ENABLE_ICU1)
INTR(4, IO_ICU1, ENABLE_ICU1)
INTR(5, IO_ICU1, ENABLE_ICU1)
INTR(6, IO_ICU1, ENABLE_ICU1)
INTR(7, IO_ICU1, ENABLE_ICU1)
INTR(8, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(9, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(10, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(11, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(12, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(13, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(14, IO_ICU2, ENABLE_ICU1_AND_2)
INTR(15, IO_ICU2, ENABLE_ICU1_AND_2)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: vector.s,v 1.29 1995/05/08 18:00:20 mycroft Exp $	*/
d114 1
a114 1
 * only needs a few bits.  doreti() needs a trap frame for handling ASTs, but
d202 1
a202 1
 * On exit, we jump to doreti, to process soft interrupts and ASTs.
d205 6
a210 1
IDTVEC(intr/**/irq_num)							;\
d243 1
a243 1
	INTREXIT			/* lower spl and do ASTs */	;\
a291 36
 * Recursive interrupts.
 *
 * This is a somewhat nasty hack to deal with resuming interrupts from splx().
 * We can't just jump to the resume point, because some handlers require an
 * interrupt frame.  Instead, we just recursively interrupt.
 *
 * On entry, %esi contains a pointer to where we need to return.  This is a
 * bit faster than a call/ret/jmp to continue the loop.
 *
 * XXX
 * It might be a little faster to build the interrupt frame manually and jump
 * to the resume point.  The code would be larger, though.
 */
#define	RECURSE(irq_num) \
IDTVEC(recurse/**/irq_num)						;\
	int	$(ICU_OFFSET + irq_num)					;\
	jmp	%esi

RECURSE(0)
RECURSE(1)
RECURSE(2)
RECURSE(3)
RECURSE(4)
RECURSE(5)
RECURSE(6)
RECURSE(7)
RECURSE(8)
RECURSE(9)
RECURSE(10)
RECURSE(11)
RECURSE(12)
RECURSE(13)
RECURSE(14)
RECURSE(15)

/*
d306 1
a306 1
 * These tables are used by doreti() and spllower().
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
