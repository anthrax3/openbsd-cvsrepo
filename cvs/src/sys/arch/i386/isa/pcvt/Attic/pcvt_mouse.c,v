head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	UBC_SYNC_B:1.8
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	SMP:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7;
locks; strict;
comment	@ * @;


1.8
date	2001.05.29.22.09.15;	author mickey;	state dead;
branches;
next	1.7;

1.7
date	2000.10.26.22.53.32;	author aaron;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2000.10.25.16.55.53;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.07.03.12.47;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.28.15.44.50;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.22.17.39.05;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.04.17.59.50;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.01.05.46.02;	author aaron;	state Exp;
branches;
next	;

1.7.4.1
date	2001.04.18.16.08.00;	author niklas;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2001.07.04.10.17.04;	author niklas;	state dead;
branches;
next	;


desc
@@


1.8
log
@remove this used to be great console driver; x11 builds w/o it all fine; aaron@@, todd@@, matthieu@@ ok
@
text
@/*	$OpenBSD: pcvt_mouse.c,v 1.7 2000/10/26 22:53:32 aaron Exp $ */

/*
 * Copyright (c) 2000 Jean-Baptiste Marchand, Julien Montagne and Jerome Verdon
 * 
 * All rights reserved.
 *
 * This code is for mouse console support under the pcvt console driver.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by
 *	Hellmuth Michaelis, Brian Dunford-Shore, Joerg Wunsch, Scott Turner
 *	and Charles Hannum.
 * 4. The name authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 */

 
#include "pcvt_hdr.h"

void mouse_moverel(char dx, char dy);

void inverse_char(unsigned short c);
void inverse_region(unsigned short start, unsigned short end);

unsigned char skip_spc_right(char);
unsigned char skip_spc_left(void);
unsigned char skip_char_right(unsigned short);
unsigned char skip_char_left(unsigned short);
unsigned char class_cmp(unsigned short, unsigned short);

void mouse_copy_start(void);
void mouse_copy_end(void);
void mouse_copy_word(void);
void mouse_copy_line(void);
void mouse_copy_extend(void);
void mouse_copy_extend_char(void);
void mouse_copy_extend_word(void);
void mouse_copy_extend_line(void);
void mouse_copy_extend_after(void);
void remove_selection(void);
void mouse_copy_selection(void);
void mouse_paste(void);

void mouse_zaxis(int z);
void mouse_button(int button, int clicks);

#define NO_BORDER 0
#define BORDER 1

#define MAXCOL (vsp->maxcol - 1)
#define MAXROW (vsp->screen_rows - 1)

#define XY_TO_X(col,row) (((row) * (vsp->maxcol)) + (col))
#define XABS_TO_XREL(col) (((col) - vsp->Crtat) % vsp->maxcol)

#define IS_ALPHANUM(pos) ((*(vsp->Crtat + (pos)) & 0x00ff) != ' ')
#define IS_SPACE(c) ((c) == ' ')

int
mouse_ioctl(Dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	int device = minor(dev), s;
	mouse_info_t mouse_infos = *(mouse_info_t *) data; 	
	unsigned char c;
	video_state  *cs;

	if (Copybuffer == NULL)
		return (-1);
	
	s = spltty();

	if (device == PCVTCTL_MINOR && cmd == PCVT_MOUSECTL) {
		switch (mouse_infos.operation) {
		case MOUSE_INIT: 
			for (c = 0; c < PCVT_NSCREENS; c++) { 
				cs = &vs[c];
				cs->mouse = (cs->maxcol *
				    cs->screen_rows) / 2;
				cs->mouse_flags = 0;
			}
			Paste_avail = 0;
			break;

		case MOUSE_HIDE:
			remove_selection();
			mouse_hide();
			break;

		case MOUSE_MOTION_EVENT :
			mouse_moverel(mouse_infos.u.data.x,
			    mouse_infos.u.data.y);
			if (mouse_infos.u.data.z)
				mouse_zaxis(mouse_infos.u.data.z);
			break;

		case MOUSE_BUTTON_EVENT :
			mouse_button(mouse_infos.u.event.id,
			    mouse_infos.u.event.value);
			break;

		default:
			break;
		}
		splx(s);
		return 0;
	}
	if (device == PCVTCTL_MINOR && cmd == PCVT_MOUSED) {
		char moused_flag = *(char *) data;
		switch(moused_flag) {
			case MOUSED_ON: 
				moused_proc = p;
				break;
			case MOUSED_OFF:
				moused_proc = NULL;
				break;
			default:
				break;
		}
		splx(s);
		return 0;
	}

	splx(s);
	return (-1); /* continue treatment in pcioctl */
}

void
mouse_hide(void)
{
	if (IS_MOUSE_VISIBLE(vsp)) {
		inverse_char(vsp->mouse);
		vsp->mouse_flags &= ~MOUSE_VISIBLE;
	}
}

/*
 * function to move the cursor to a relative new position
 */

void
mouse_moverel(char dx, char dy)
{
	unsigned short old_mouse = vsp->mouse;
	unsigned char mouse_col = (vsp->mouse % vsp->maxcol);
	unsigned char mouse_row = (vsp->mouse / vsp->maxcol);
	
	if (scrnsv_active) /* if the screen saver is active */
		pcvt_scrnsv_reset();		/* unblank NOW !	*/
	
	/* update position */
	
	if (mouse_col + dx >= MAXCOL)
		mouse_col = MAXCOL;
	else
		if (mouse_col + dx <= 0)
			mouse_col = 0;
		else
			mouse_col += dx;
	if (mouse_row + dy >= MAXROW)
		mouse_row = MAXROW;
	else
		if (mouse_row + dy <= 0)
			mouse_row = 0;
		else
			mouse_row += dy;
	vsp->mouse = XY_TO_X(mouse_col, mouse_row);
	/* if we have moved */
	if (old_mouse != vsp->mouse) {
		/* hide the previous cursor, if not in a selection */
		if (IS_MOUSE_VISIBLE(vsp) && (!IS_SEL_IN_PROGRESS(vsp)))
			inverse_char(old_mouse);
		
		if (IS_SEL_IN_PROGRESS(vsp)) {
			/* selection in progress */
			mouse_copy_extend();
		}
		else {
			inverse_char(vsp->mouse);
			vsp->mouse_flags |= MOUSE_VISIBLE;
		}
	}
}
	
/* 
 * Function to video inverse a character of the display
 */

void
inverse_char(unsigned short pos)
{
	u_short *current_char = vsp->Crtat + pos;
	u_short inverse = *current_char;
	
	if ((inverse >> 8) == 0)
		inverse = (FG_LIGHTGREY << 8);
	
	inverse = (((inverse >> 8) & 0x88) | ((((inverse >> 8) >> 4) |
	    ((inverse >> 8) << 4)) & 0x77)) << 8;
	
	*current_char = inverse | ((*current_char) & 0x00ff);
}

/*
 * Function to video inverse a region of the display
 * start must be inferior to end
 */

void
inverse_region(unsigned short start, unsigned short end)
{
	unsigned short current_pos;
	unsigned short abs_end;
	
	/* sanity check, useful because 'end' can be (0 - 1) = 65535 */
	abs_end = vsp->maxcol * vsp->screen_rows;
	if (end > abs_end)
		return ;
	current_pos = start;
	while (current_pos <= end) 
		inverse_char(current_pos++);
}
	
/*
 * Function which returns the number of contiguous blank characters between 
 * the right margin if border == 1 or between the next non-blank character
 * and the current mouse cursor if border == 0
 */

unsigned char
skip_spc_right(char border)
{
	unsigned short *current;	
	unsigned short *limit;
	unsigned char mouse_col = (vsp->cpy_end % vsp->maxcol);
	unsigned char res = 0;
		
	current = vsp->Crtat + vsp->cpy_end;
	limit = current + (vsp->maxcol - mouse_col - 1); 
	while (((*current & 0x00ff) == ' ') && (current <= limit)) {
		current++;
		res++;
	}
	if (border == BORDER) {
		if (current > limit)
			return (res - 1);
		else
			return (0);
	}
	else
		return (res - 1);	
}

/* 
 * Function which returns the number of contiguous blank characters between
 * the first of the contiguous blank characters and the current mouse cursor
 */

unsigned char
skip_spc_left(void)
{
	unsigned short *current;	
	unsigned short *limit;
	unsigned char mouse_col = (vsp->mouse % vsp->maxcol);
	unsigned char res = 0;
	
	current = vsp->Crtat + vsp->cpy_start;
	limit = current - mouse_col;
	while (((*current & 0x00ff) == ' ') && (current >= limit)) {
		current--;
		res++;
	}
	if (res)
		res--;
	return (res);
}
	
/* 
 * Class of characters 
 * Stolen from xterm sources of the Xfree project (see cvs tag below)
 * $TOG: button.c /main/76 1997/07/30 16:56:19 kaleb $ 
 */

static int charClass[256] = {
/* NUL  SOH  STX  ETX  EOT  ENQ  ACK  BEL */
    32,   1,   1,   1,   1,   1,   1,   1,
/*  BS   HT   NL   VT   NP   CR   SO   SI */
     1,  32,   1,   1,   1,   1,   1,   1,
/* DLE  DC1  DC2  DC3  DC4  NAK  SYN  ETB */
     1,   1,   1,   1,   1,   1,   1,   1,
/* CAN   EM  SUB  ESC   FS   GS   RS   US */
     1,   1,   1,   1,   1,   1,   1,   1,
/*  SP    !    "    #    $    %    &    ' */
    32,  33,  34,  35,  36,  37,  38,  39,
/*   (    )    *    +    ,    -    .    / */
    40,  41,  42,  43,  44,  45,  46,  47,
/*   0    1    2    3    4    5    6    7 */
    48,  48,  48,  48,  48,  48,  48,  48,
/*   8    9    :    ;    <    =    >    ? */
    48,  48,  58,  59,  60,  61,  62,  63,
/*   @@    A    B    C    D    E    F    G */
    64,  48,  48,  48,  48,  48,  48,  48,
/*   H    I    J    K    L    M    N    O */
    48,  48,  48,  48,  48,  48,  48,  48,
/*   P    Q    R    S    T    U    V    W */
    48,  48,  48,  48,  48,  48,  48,  48,
/*   X    Y    Z    [    \    ]    ^    _ */
    48,  48,  48,  91,  92,  93,  94,  48,
/*   `    a    b    c    d    e    f    g */
    96,  48,  48,  48,  48,  48,  48,  48,
/*   h    i    j    k    l    m    n    o */
    48,  48,  48,  48,  48,  48,  48,  48,
/*   p    q    r    s    t    u    v    w */
    48,  48,  48,  48,  48,  48,  48,  48,
/*   x    y    z    {    |    }    ~  DEL */
    48,  48,  48, 123, 124, 125, 126,   1,
/* x80  x81  x82  x83  IND  NEL  SSA  ESA */
     1,   1,   1,   1,   1,   1,   1,   1,
/* HTS  HTJ  VTS  PLD  PLU   RI  SS2  SS3 */
     1,   1,   1,   1,   1,   1,   1,   1,
/* DCS  PU1  PU2  STS  CCH   MW  SPA  EPA */
     1,   1,   1,   1,   1,   1,   1,   1,
/* x98  x99  x9A  CSI   ST  OSC   PM  APC */
     1,   1,   1,   1,   1,   1,   1,   1,
/*   -    i   c/    L   ox   Y-    |   So */
   160, 161, 162, 163, 164, 165, 166, 167,
/*  ..   c0   ip   <<    _        R0    - */
   168, 169, 170, 171, 172, 173, 174, 175,
/*   o   +-    2    3    '    u   q|    . */
   176, 177, 178, 179, 180, 181, 182, 183,
/*   ,    1    2   >>  1/4  1/2  3/4    ? */
   184, 185, 186, 187, 188, 189, 190, 191,
/*  A`   A'   A^   A~   A:   Ao   AE   C, */
    48,  48,  48,  48,  48,  48,  48,  48,
/*  E`   E'   E^   E:   I`   I'   I^   I: */
    48,  48,  48,  48,  48,  48,  48,  48,
/*  D-   N~   O`   O'   O^   O~   O:    X */
    48,  48,  48,  48,  48,  48,  48, 216,
/*  O/   U`   U'   U^   U:   Y'    P    B */
    48,  48,  48,  48,  48,  48,  48,  48,
/*  a`   a'   a^   a~   a:   ao   ae   c, */
    48,  48,  48,  48,  48,  48,  48,  48,
/*  e`   e'   e^   e:    i`  i'   i^   i: */
    48,  48,  48,  48,  48,  48,  48,  48,
/*   d   n~   o`   o'   o^   o~   o:   -: */
    48,  48,  48,  48,  48,  48,  48,  248,
/*  o/   u`   u'   u^   u:   y'    P   y: */
    48,  48,  48,  48,  48,  48,  48,  48};

/* 
 * Function which find the first blank beginning after the current cursor
 * position
 */

unsigned char
skip_char_right(unsigned short offset)
{
	unsigned short *current;	
	unsigned short *limit;
	unsigned char res = 0;
	unsigned char class;	
	
	current = vsp->Crtat + offset;
	class = charClass[(*current & 0x00ff)];
	limit = current + (vsp->maxcol - (vsp->mouse % vsp->maxcol) - 1); 
	while ((charClass[(*current & 0x00ff)] == class) && (current <= limit)){
		current++;
		res++;
	}
	if (res)
		res--;
	return (res);
}

/*
 * Function which find the first non-blank character before the cursor position
 */

unsigned char
skip_char_left(unsigned short offset)
{
	unsigned short *current;	
	unsigned short *limit;
	unsigned char res = 0;
	unsigned char class;
	
	current = vsp->Crtat + offset;
	class = charClass[(*current & 0x00ff)];
	limit = current - (vsp->mouse % vsp->maxcol);
	while ((charClass[(*current & 0x00ff)] == class) && (current >= limit)){
		current--;
		res++;
	}
	if (res)
		res--;
	return (res);
}

/* 
 * Function to compare character classes
 */

unsigned char 
class_cmp(unsigned short first, unsigned short second)
{
	unsigned char first_class;
	unsigned char second_class;
		
	first_class = charClass[(*(vsp->Crtat + first) & 0x00ff)];
	second_class = charClass[(*(vsp->Crtat + second) & 0x00ff)];

	if (first_class != second_class) 
		return (1);
	else
		return (0);
}

/*
 * Function to handle beginning of a copy operation
 */

void
mouse_copy_start(void)
{
	unsigned char right;

	/* if no selection, then that's the first one */

	if (!Paste_avail)
		Paste_avail = 1;
	
	/* remove the previous selection */
	
	if (IS_SEL_EXISTS(vsp)) {
		remove_selection();
	}
	
	/* initial show of the cursor */
	if (!IS_MOUSE_VISIBLE(vsp))
		inverse_char(vsp->mouse);
    
    	vsp->cpy_start = vsp->mouse;
	vsp->cpy_end = vsp->mouse;
	vsp->orig_start = vsp->cpy_start; 
	vsp->orig_end = vsp->cpy_end; 
	vsp->cursor = vsp->cpy_end + 1; /* init value */
	
	right = skip_spc_right(BORDER); /* useful later, in mouse_copy_extend */
	if (right) 
		vsp->mouse_flags |= BLANK_TO_EOL;
	
	vsp->mouse_flags |= SEL_IN_PROGRESS;
	vsp->mouse_flags |= SEL_EXISTS;
	vsp->mouse_flags |= SEL_BY_CHAR; /* select by char */
	vsp->mouse_flags &= ~SEL_BY_WORD;
	vsp->mouse_flags &= ~SEL_BY_LINE;
	vsp->mouse_flags &= ~MOUSE_VISIBLE; /* cursor hidden in selection */
}

/*
 * Function to handle copy of the word under the cursor 
 */

void
mouse_copy_word()
{
	unsigned char right;
	unsigned char left;
	
	if (IS_SEL_EXISTS(vsp))
		remove_selection();
	if (IS_MOUSE_VISIBLE(vsp))
		inverse_char(vsp->mouse);
	
	vsp->cpy_start = vsp->mouse;
	vsp->cpy_end = vsp->mouse;
	
	if (IS_ALPHANUM(vsp->mouse)) {
		right = skip_char_right(vsp->cpy_end);
		left = skip_char_left(vsp->cpy_start);
	}
	else {
		right = skip_spc_right(NO_BORDER);
		left = skip_spc_left();
	}
	
	vsp->cpy_start -= left;
	vsp->cpy_end += right;
	vsp->orig_start = vsp->cpy_start;
	vsp->orig_end = vsp->cpy_end;
	vsp->cursor = vsp->cpy_end + 1; /* init value, never happen */
	inverse_region(vsp->cpy_start, vsp->cpy_end);
	
	vsp->mouse_flags |= SEL_IN_PROGRESS;
	vsp->mouse_flags |= SEL_EXISTS;
	vsp->mouse_flags &= ~SEL_BY_CHAR;
	vsp->mouse_flags |= SEL_BY_WORD;
	vsp->mouse_flags &= ~SEL_BY_LINE;
	
	/* mouse cursor hidden in the selection */
	vsp->mouse_flags &= ~BLANK_TO_EOL;
	vsp->mouse_flags &= ~MOUSE_VISIBLE;
}

/* 
 * Function to handle copy of the current line
 */

void 
mouse_copy_line(void)
{
	unsigned char row = vsp->mouse / vsp->maxcol;
	
	if (IS_SEL_EXISTS(vsp))
		remove_selection();
	if (IS_MOUSE_VISIBLE(vsp))
		inverse_char(vsp->mouse);
	
	vsp->cpy_start = row * vsp->maxcol;
	vsp->cpy_end = vsp->cpy_start + MAXCOL;
	vsp->orig_start = vsp->cpy_start;
	vsp->orig_end = vsp->cpy_end;
	vsp->cursor = vsp->cpy_end + 1;
	inverse_region(vsp->cpy_start, vsp->cpy_end);
	
	vsp->mouse_flags |= SEL_IN_PROGRESS;
	vsp->mouse_flags |= SEL_EXISTS;
	vsp->mouse_flags &= ~SEL_BY_CHAR;
	vsp->mouse_flags &= ~SEL_BY_WORD;
	vsp->mouse_flags |= SEL_BY_LINE;
	
	/* mouse cursor hidden in the selection */
	vsp->mouse_flags &= ~BLANK_TO_EOL;
	vsp->mouse_flags &= ~MOUSE_VISIBLE;
}

/*
 * Function to handle the end of a copy operation
 */

void 
mouse_copy_end(void)
{
	vsp->mouse_flags &= ~(SEL_IN_PROGRESS);
	if (IS_SEL_BY_WORD(vsp) || IS_SEL_BY_LINE(vsp))	{
		if (vsp->cursor != (vsp->cpy_end + 1))
			inverse_char(vsp->cursor);
		vsp->cursor = vsp->cpy_end + 1;
	}
}

/*
 * Generic selection extend function
 */

void
mouse_copy_extend(void)
{
	if (IS_SEL_BY_CHAR(vsp))
		mouse_copy_extend_char();
	if (IS_SEL_BY_WORD(vsp))
		mouse_copy_extend_word();
	if (IS_SEL_BY_LINE(vsp))		
		mouse_copy_extend_line();
}
				


/* 
 * Function to extend a selected region, character by character
 */

void
mouse_copy_extend_char()
{
	unsigned char right;

	if (!IS_SEL_EXT_AFTER(vsp)) {
	
		if (IS_BLANK_TO_EOL(vsp)) {
			/* 
			 * First extension of selection. We handle special 
			 * cases of blank characters to eol 
			 */ 
			
			right = skip_spc_right(BORDER);
			if (vsp->mouse > vsp->orig_start) {
				/* the selection goes to the lower part of
				   the screen */

				/* remove the previous cursor, start of
				   selection is now next line */
				inverse_char(vsp->cpy_start);
				vsp->cpy_start += (right + 1);
				vsp->cpy_end = vsp->cpy_start;
				vsp->orig_start = vsp->cpy_start;
				/* simulate the initial mark */
				inverse_char(vsp->cpy_start);
			}
			else {
				/* the selection goes to the upper part
				   of the screen */
				/* remove the previous cursor, start of
				   selection is now at the eol */
				inverse_char(vsp->cpy_start);
				vsp->orig_start += (right + 1);
				vsp->cpy_start = vsp->orig_start - 1;
				vsp->cpy_end = vsp->orig_start - 1;
				/* simulate the initial mark */
				inverse_char(vsp->cpy_start);
			}
			vsp->mouse_flags &= ~ BLANK_TO_EOL;
		}	

		if (vsp->mouse < vsp->orig_start 
				&& vsp->cpy_end >= vsp->orig_start) {
			/* we go to the upper part of the screen */

			/* reverse the old selection region */
			remove_selection();
			vsp->cpy_end = vsp->orig_start - 1; 
			vsp->cpy_start = vsp->orig_start;
		}
		if (vsp->cpy_start < vsp->orig_start
				&& vsp->mouse >= vsp->orig_start) {
			/* we go to the lower part of the screen */

			/* reverse the old selection region */
			remove_selection();
			vsp->cpy_start = vsp->orig_start;
			vsp->cpy_end = vsp->orig_start - 1;
		}
		/* restore flags cleared in remove_selection() */
		vsp->mouse_flags |= SEL_IN_PROGRESS;
		vsp->mouse_flags |= SEL_EXISTS;
	}
	/* beginning of common part */
	
	if (vsp->mouse >= vsp->orig_start) {
		
		/* lower part of the screen */
		if (vsp->mouse > vsp->cpy_end) 
			/* extending selection */
			inverse_region(vsp->cpy_end + 1, vsp->mouse);
		else 
			/* reducing selection */
			inverse_region(vsp->mouse + 1, vsp->cpy_end);
		vsp->cpy_end = vsp->mouse;
	}
	else {
		/* upper part of the screen */
		if (vsp->mouse < vsp->cpy_start) 
			/* extending selection */
			inverse_region(vsp->mouse,vsp->cpy_start - 1);
		else 
			/* reducing selection */
			inverse_region(vsp->cpy_start,vsp->mouse - 1);
		vsp->cpy_start = vsp->mouse;
	}
	/* end of common part */
}

/*
 * Function to extend a selected region, word by word
 */

void
mouse_copy_extend_word(void)
{
	unsigned short old_cpy_end;
	unsigned short old_cpy_start;
	
	if (!IS_SEL_EXT_AFTER(vsp)) {
	
		/* remove cursor in selection (black one) */

		if (vsp->cursor != (vsp->cpy_end + 1)) 
			inverse_char(vsp->cursor);

		/* now, switch between lower and upper part of the screen */

		if (vsp->mouse < vsp->orig_start 
			&& vsp->cpy_end >= vsp->orig_start) {
			/* going to the upper part of the screen */
			inverse_region(vsp->orig_end + 1, vsp->cpy_end);
			vsp->cpy_end = vsp->orig_end;
		}

		if (vsp->mouse > vsp->orig_end 
			&& vsp->cpy_start <= vsp->orig_start) {
			/* going to the lower part of the screen */
			inverse_region(vsp->cpy_start, vsp->orig_start - 1);
			vsp->cpy_start = vsp->orig_start;
		}
	}
	
	if (vsp->mouse >= vsp->orig_start) {
		/* lower part of the screen */

		if (vsp->mouse > vsp->cpy_end) {
			/* extending selection */

			old_cpy_end = vsp->cpy_end;
			vsp->cpy_end = vsp->mouse + skip_char_right(vsp->mouse);
			inverse_region(old_cpy_end + 1, vsp->cpy_end);
		}
		else {
			if (class_cmp(vsp->mouse, vsp->mouse + 1)) {
				/* reducing selection (remove last word) */
				old_cpy_end = vsp->cpy_end;
				vsp->cpy_end = vsp->mouse;
				inverse_region(vsp->cpy_end + 1, old_cpy_end);
			}
			else {
				old_cpy_end = vsp->cpy_end;
				vsp->cpy_end = vsp->mouse +
					skip_char_right(vsp->mouse);
			       	if (vsp->cpy_end != old_cpy_end) {
					/* reducing selection, from the end of
					 * next word */
					inverse_region(vsp->cpy_end + 1,
							old_cpy_end);
				}	
			}
		}
	}
	else {
		/* upper part of the screen */
		if (vsp->mouse < vsp->cpy_start) {
			/* extending selection */
			old_cpy_start = vsp->cpy_start;
			vsp->cpy_start = vsp->mouse -skip_char_left(vsp->mouse);
			inverse_region(vsp->cpy_start, old_cpy_start - 1);
		}
		else {
			if (class_cmp(vsp->mouse - 1, vsp->mouse)) {
				/* reducing selection (remove last word) */
				old_cpy_start = vsp->cpy_start;
				vsp->cpy_start = vsp->mouse;
				inverse_region(old_cpy_start, 
					vsp->cpy_start - 1);
			}
			else {
				old_cpy_start = vsp->cpy_start;
				vsp->cpy_start = vsp->mouse -
					skip_char_left(vsp->mouse);
				if (vsp->cpy_start != old_cpy_start)
					inverse_region(old_cpy_start,
							vsp->cpy_start - 1);
			}
		}
	}
	
	if (!IS_SEL_EXT_AFTER(vsp)) {
		/* display new cursor */	
		vsp->cursor = vsp->mouse;
		inverse_char(vsp->cursor);
	}
}

/*
 * Function to extend a selected region, line by line
 */

void
mouse_copy_extend_line(void)
{
	unsigned short old_row;
	unsigned short new_row;
	unsigned short old_cpy_start;
	unsigned short old_cpy_end;
	
	if (!IS_SEL_EXT_AFTER(vsp)) {
		/* remove cursor in selection (black one) */

		if (vsp->cursor != (vsp->cpy_end + 1)) 
			inverse_char(vsp->cursor);

		/* now, switch between lower and upper part of the screen */

		if (vsp->mouse < vsp->orig_start 
			&& vsp->cpy_end >= vsp->orig_start) {
			/* going to the upper part of the screen */
			inverse_region(vsp->orig_end + 1, vsp->cpy_end);
			vsp->cpy_end = vsp->orig_end;
		}

		if (vsp->mouse > vsp->orig_end 
			&& vsp->cpy_start <= vsp->orig_start) {
			/* going to the lower part of the screen */
			inverse_region(vsp->cpy_start, vsp->orig_start - 1);
			vsp->cpy_start = vsp->orig_start;
		}
	}
	
	if (vsp->mouse >= vsp->orig_start) {
		/* lower part of the screen */
		if (vsp->cursor == (vsp->cpy_end + 1))
			vsp->cursor = vsp->cpy_end;
		old_row = vsp->cursor / vsp->maxcol;
		new_row = vsp->mouse / vsp->maxcol;
		old_cpy_end = vsp->cpy_end;
		vsp->cpy_end = (new_row * vsp->maxcol) + MAXCOL;
		if (new_row > old_row) 
			inverse_region(old_cpy_end + 1, vsp->cpy_end); 
		else if (new_row < old_row) 
			inverse_region(vsp->cpy_end + 1, old_cpy_end);
	} 
	else {
		/* upper part of the screen */
		old_row = vsp->cursor / vsp->maxcol;
		new_row = vsp->mouse / vsp->maxcol;
		old_cpy_start = vsp->cpy_start;
		vsp->cpy_start = new_row * vsp->maxcol;
		if (new_row < old_row)
			inverse_region(vsp->cpy_start, old_cpy_start - 1);
		else if (new_row > old_row)
			inverse_region(old_cpy_start, vsp->cpy_start - 1);
	}

	if (!IS_SEL_EXT_AFTER(vsp)) {
		/* display new cursor */	
		vsp->cursor = vsp->mouse;
		inverse_char(vsp->cursor);
	}
}
	
/*
 * Function to add an extension to a selected region, word by word
 */

void
mouse_copy_extend_after(void)
{
	unsigned short start_dist;
	unsigned short end_dist;
	
	if (IS_SEL_EXISTS(vsp)) {
		vsp->mouse_flags |= SEL_EXT_AFTER;
		mouse_hide(); /* hide current cursor */
	
		if (vsp->cpy_start > vsp->mouse)
			start_dist = vsp->cpy_start - vsp->mouse;
		else 
			start_dist = vsp->mouse - vsp->cpy_start;
		if (vsp->mouse > vsp->cpy_end)
			end_dist = vsp->mouse - vsp->cpy_end;
		else
			end_dist = vsp->cpy_end - vsp->mouse;
		if (start_dist < end_dist) {
			/* upper part of the screen*/
			vsp->orig_start = vsp->mouse + 1; 
			/* only used in mouse_copy_extend_line() */
			vsp->cursor = vsp->cpy_start;
		}
		else {
			/* lower part of the screen */		
			vsp->orig_start = vsp->mouse; 
			/* only used in mouse_copy_extend_line() */
			vsp->cursor = vsp->cpy_end;
		}
		if (IS_SEL_BY_CHAR(vsp))
			mouse_copy_extend_char();
		if (IS_SEL_BY_WORD(vsp))
			mouse_copy_extend_word();
		if (IS_SEL_BY_LINE(vsp)) 
			mouse_copy_extend_line();
		mouse_copy_selection();
	}
	else  
		/* no selection yet! */
		sysbeep(PCVT_SYSBEEPF / 1500, hz / 4);
}


/*
 * Function to remove a previously selected region
 */

void
remove_selection()
{
	if (IS_SEL_EXT_AFTER(vsp)) 
		/* reset the flag indicating an extension of selection */
		vsp->mouse_flags &= ~SEL_EXT_AFTER;
	inverse_region(vsp->cpy_start, vsp->cpy_end);
	vsp->mouse_flags &= ~SEL_IN_PROGRESS;
	vsp->mouse_flags &= ~SEL_EXISTS;
}


/* 
 * Function to put the current visual selection in the selection buffer
 */

void
mouse_copy_selection(void)
{
	unsigned short current = 0;
	unsigned short blank = current;
	unsigned short buf_end = ((vsp->maxcol + 1) * vsp->screen_rows);
	unsigned short *sel_cur;
	unsigned short *sel_end;
		
	sel_cur = vsp->Crtat + vsp->cpy_start;
	sel_end = vsp->Crtat + vsp->cpy_end;
	
	while (sel_cur <= sel_end && current < buf_end - 1) {
		Copybuffer[current] = ((*sel_cur) & 0x00ff);
		if (!IS_SPACE(Copybuffer[current])) 
			blank = current + 1; /* first blank after non-blank */
		current++;
		if (XABS_TO_XREL(sel_cur) == MAXCOL) {
			/* we are on the last col of the screen */
			Copybuffer[blank] = '\r'; /* carriage return */
			current = blank + 1; /* restart just after the carriage
					       return in the buffer */
			blank = current;
		}
		sel_cur++;
	}
	
	Copybuffer[current] = '\0';
}

/*
 * Function to paste the current selection
 */

void
mouse_paste(void)
{
	unsigned short len;
	char *current = Copybuffer;

	if (Paste_avail) {
		len = strlen(Copybuffer);
		for (; len > 0; len--) {
			(*linesw[vsp->vs_tty->t_line].l_rint)
				(*current++, vsp->vs_tty);
		}
	}
	else 
		sysbeep(PCVT_SYSBEEPF / 1500, hz / 4);
}

/* 
 * Function to handle button clicks 
 */

void
mouse_button(int button, int clicks)
{
	if (scrnsv_active) /* if the screen saver is active */
		pcvt_scrnsv_reset();		/* unblank NOW !	*/
	
	switch (button) {
	case MOUSE_COPY_BUTTON:
		switch (clicks % 4) {
		case 0: /* button is up */
			mouse_copy_end();
			mouse_copy_selection();
			break;
		case 1: /* single click */
			mouse_copy_start();
			mouse_copy_selection();
			break;
		case 2: /* double click */
			mouse_copy_word();
			mouse_copy_selection();
			break;
		case 3: /* triple click */
			mouse_copy_line();
			mouse_copy_selection();
			break;
		default:
			break;
		}
		break;

	case MOUSE_PASTE_BUTTON:
		switch (clicks) {
		case 0: /* button is up */
			break;
		default: /* paste */
			mouse_paste();
			break;
		}
		break;

	case MOUSE_EXTEND_BUTTON:
		switch (clicks) {
		case 0: /* button is up */
			break;
		default: /* extend the selection */
			mouse_copy_extend_after();
			break;
		}
		break;

	default:
		break;
	}
}

/*
 * Function to handle the z axis 
 * The z axis (roller or wheel) is mapped by default to scrollback
 */

void
mouse_zaxis(int z)
{
	scrollback_mouse(z);
}	
@


1.7
log
@Remove the notion of "Copybuffer ownership" now that copybuffer contents are
always cleared on logout; from Jean-Baptiste.Marchand@@epita.fr.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.6 2000/10/25 16:55:53 aaron Exp $ */
@


1.7.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.7 2000/10/26 22:53:32 aaron Exp $ */
@


1.7.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.7.4.1 2001/04/18 16:08:00 niklas Exp $ */
@


1.6
log
@Wrap PCVT mouse operations in spltty(); deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.5 2000/10/07 03:12:47 aaron Exp $ */
a65 1
uid_t current_uid(void);
a912 32
/*
 * Function to get the uid of the user behind the *shell* on the current tty
 * We handle su and sudo cases...
 */

uid_t
current_uid(void)
{
	pid_t pg = 0; /* process group id */
	struct proc *owner_proc = 0;
	
	if (vsp->vs_tty && vsp->vs_tty->t_pgrp)
			pg = vsp->vs_tty->t_pgrp->pg_id;
	else
		return (0); /* the uid of root, just to be sure */
	
	if (pg) 
		owner_proc = pfind(pg);
	
	if (!owner_proc) {
		Paste_avail = 0; /* this selection will never be available
				    because the process doesn't exist... */
		return (0); /* the uid of root, just to be sure */
	}
	
	/* 
	 * We use the real user id and not the *effective* one, as a foreground
	 * setuid process could permit to paste selection of another user
	 */
	
	return (owner_proc->p_cred->p_ruid);
}
a945 1
	Copyowner = current_uid();
a956 1
	uid_t cur_uid;
d958 1
a958 3
	cur_uid = current_uid();	
	if (Paste_avail && ((cur_uid == Copyowner) || !cur_uid)) {
		/* either the owner of the selection or root */
@


1.5
log
@- Add console/X mouse transparency, so you don't have to kill moused to run X.
- Introduce `select units' (by char/word/line). Behaves more like an xterm now.
- Serial mice should now work after this commit.
- Many bug fixes.

Work by Jean-Baptiste.Marchand@@epita.fr, except for the X cohabitation code
which was written by Julien.Montagne@@epita.fr.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.4 2000/09/28 15:44:50 aaron Exp $ */
d86 1
a86 1
	int device = minor(dev);
d94 2
d126 1
a126 1
			return 0;
d128 1
d141 1
a141 1
				return 0;
d143 1
d147 1
@


1.4
log
@Make sure a Copybuffer has been allocated successfully before we start doing
things with it.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.3 2000/09/22 17:39:05 aaron Exp $ */
d50 3
a52 2
unsigned char skip_char_right(void);
unsigned char skip_char_left(void);
d59 4
d128 15
d204 1
a204 1
 * function to video inverse a character of the display
d231 1
a231 1
	unsigned char c = 0;
d233 4
d238 1
a238 1
	while (current_pos <= end) {
a239 2
		c++;
	}
d295 1
a295 1

d367 1
d374 1
a374 1
skip_char_right(void)
d381 1
a381 1
	current = vsp->Crtat + vsp->cpy_end;
d398 1
a398 1
skip_char_left(void)
d405 1
a405 1
	current = vsp->Crtat + vsp->cpy_start;
d417 19
d459 2
a460 2
		
	vsp->cpy_start = vsp->mouse;
d462 4
a465 2
	vsp->cpy_orig = vsp->cpy_start; /* for correct action in
					   remove_selection() */
d472 4
a475 3
	
	/* mouse cursor hidden in the selection */
	vsp->mouse_flags &= ~MOUSE_VISIBLE;
d497 2
a498 2
		right = skip_char_right();
		left = skip_char_left();
d507 3
a509 1
	vsp->cpy_orig = vsp->cpy_start;
d514 3
a516 4
	
	/* mouse cursor is in the selection. Moving the cursor inside the 
	   selection won't modify (extend or reduce) it */
	vsp->mouse_flags |= IN_SELECTION;
d539 3
a541 1
	vsp->cpy_orig = vsp->cpy_start;
d546 3
a548 4
	
	/* mouse cursor is in the selection. Moving the cursor inside the 
	   selection won't modify (extend or reduce) it */
	vsp->mouse_flags |= IN_SELECTION;
d563 5
d570 17
d588 1
a588 1
 * Function to extend a previously selected region
d592 1
a592 1
mouse_copy_extend()
d595 2
a597 1
	if (IS_SEL_EXISTS(vsp)) {
d605 1
a605 1
			if (vsp->mouse > vsp->cpy_orig) {
d608 1
a608 1
				
d614 1
a614 1
				vsp->cpy_orig = vsp->cpy_start;
d621 1
a621 1
				/* remove the previous cursorm, start of
d624 3
a626 3
				vsp->cpy_orig += (right + 1);
				vsp->cpy_start = vsp->cpy_orig - 1;
				vsp->cpy_end = vsp->cpy_orig - 1;
d632 3
a634 3
		
		if (vsp->mouse < vsp->cpy_orig 
		    && vsp->cpy_end >= vsp->cpy_orig) {
d636 1
a636 1
			
d639 2
a640 2
			vsp->cpy_end = vsp->cpy_orig - 1; 
			vsp->cpy_start = vsp->cpy_orig;
d642 3
a644 3
		if (vsp->cpy_start < vsp->cpy_orig 
		    && vsp->mouse >= vsp->cpy_orig) {
			/* we go back to the lower part of the screen */
d648 32
d681 31
a711 2
			vsp->cpy_start = vsp->cpy_orig;
			vsp->cpy_end = vsp->cpy_orig - 1;
d713 7
d721 10
a730 8
		
		if (vsp->mouse >= vsp->cpy_orig) {
			/* lower part of the screen */
			if (vsp->mouse > vsp->cpy_end) {
				/* extending selection */
				if (IS_IN_SELECTION(vsp))
					vsp->mouse_flags &= ~ IN_SELECTION;
				inverse_region(vsp->cpy_end + 1,vsp->mouse);
d733 9
a741 4
				/* reducing selection, if the cursor is not
				   inside a word or line selection */
				if (!IS_IN_SELECTION(vsp)) 
					inverse_region(vsp->mouse + 1,vsp->cpy_end);
d743 9
a751 2
			if (!IS_IN_SELECTION(vsp)) 
				vsp->cpy_end = vsp->mouse;
d754 6
a759 6
			/* upper part of the screen */
			if (vsp->mouse < vsp->cpy_start) {
				/* extending selection */
				if (IS_IN_SELECTION(vsp))
					vsp->mouse_flags &= ~ IN_SELECTION;
				inverse_region(vsp->mouse,vsp->cpy_start - 1);
d762 6
a767 2
				/* reducing selection */
				inverse_region(vsp->cpy_start,vsp->mouse - 1);
a768 1
			vsp->cpy_start = vsp->mouse;
d771 118
a888 1
	else { 
a890 1
	}
d893 1
d901 6
a906 6
	if (vsp->cpy_start < vsp->cpy_orig) 
		/* backward selection */
		inverse_region(vsp->cpy_start, vsp->cpy_orig - 1);
	else
		/* forward selection */
		inverse_region(vsp->cpy_start, vsp->cpy_end);
d955 3
a957 10
	if (vsp->cpy_start < vsp->cpy_orig) {
		/* backward selection */
		sel_cur = vsp->Crtat + vsp->cpy_end;
		sel_end = vsp->Crtat + vsp->cpy_orig - 1;
	}
	else {
		/* forward selection */
		sel_cur = vsp->Crtat + vsp->cpy_start;
		sel_end = vsp->Crtat + vsp->cpy_end;
	}
d976 1
d1050 1
a1050 2
			mouse_copy_extend();
			mouse_copy_selection();
@


1.3
log
@- Introduce character classes into the console mouse functionality. Lifted from
  xterm sources. Basically, base word boundaries by character classes rather
  than space characters only.
- On any console logout, clear the contents of the Copybuffer. (This will have
  to be documented with an explanation as to why.) Avoids the ability to paste
  the copybuffer at the ``login:'' prompt after someone has logged out.
- Permit copy selection extension under any circumstance as long as the button
  is held down. However, double-click (word selection) does not yet extend
  on word boundaries like xterms do.
- Sanity checks in current_uid().
- From Jean-Baptiste.Marchand@@epita.fr
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.2 2000/09/04 17:59:50 aaron Exp $ */
d85 3
@


1.2
log
@- Changes to mouse_copy_extend() to behave more like an xterm.
- Removed some unused code.
- From Jean-Baptiste.Marchand@@epita.fr
@
text
@d1 1
a1 1
/*	$OpenBSD: pcvt_mouse.c,v 1.1 2000/09/01 05:46:02 aaron Exp $ */
d272 71
a351 1
	unsigned char mouse_col = (vsp->mouse % vsp->maxcol);
d353 2
a354 1
		
d356 3
a358 2
	limit = current + (vsp->maxcol - mouse_col - 1); 
	while (((*current & 0x00ff) != ' ') && (current <= limit)) {
a375 1
	unsigned char mouse_col = (vsp->mouse % vsp->maxcol);
d377 1
d380 3
a382 2
	limit = current - mouse_col;
	while (((*current & 0x00ff) != ' ') && (current >= limit)) {
a441 4
	
	if (IS_SEL_IN_PROGRESS(vsp))
		vsp->mouse_flags &= ~SEL_IN_PROGRESS;
	
d461 2
d465 4
d470 1
a484 4
	
	if (IS_SEL_IN_PROGRESS(vsp))
		vsp->mouse_flags &= ~(SEL_IN_PROGRESS);
	
d493 1
d495 7
d583 1
a583 1
			if (vsp->mouse > vsp->cpy_end) 
d585 2
d588 9
a596 4
			else
				/* reducing selection */
				inverse_region(vsp->mouse + 1,vsp->cpy_end);
			vsp->cpy_end = vsp->mouse;
d600 1
a600 1
			if (vsp->mouse < vsp->cpy_start) 
d602 2
d605 2
a606 1
			else
d609 1
d642 10
a651 2
	pid_t pg; /* process group id */
	struct proc *owner_proc;
a652 2
	pg = vsp->vs_tty->t_pgrp->pg_id;
	owner_proc = pfind(pg);
@


1.1
log
@Kernel support for new PCVT console mouse features.

- Basic cut/paste functionality.
- Wheel mouse support (wheel rolls page-by-page through scrollback buffer).
- Copybuffer ownership. i.e., if User X logs in the console and selects text,
  when User Y logs in later the buffer cannot be pasted.

Big thanks to Jean-Baptiste Marchand, Julien Montagne, and Jerome Verdon for
implementing this.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d39 1
a46 1
void order_region(void);
d85 1
a85 1

d145 1
a145 1

d147 1
a162 1

d192 1
a192 1

d195 1
a195 1

a199 16
 * Function to order extremum of the selection region
 */

void
order_region(void)
{
	unsigned short max_pos; 
	
	if (vsp->cpy_start > vsp->cpy_end) {
		max_pos = vsp->cpy_start;
		vsp->cpy_start = vsp->cpy_end;
		vsp->cpy_end = max_pos;
	}
}

/*
d228 1
a228 1
	unsigned char mouse_col = (vsp->mouse % vsp->maxcol);
a265 1

a289 1

a312 1

a324 1
#if 0
a325 2
	unsigned char left;
#endif
d328 1
d333 1
d337 1
a337 1

d344 6
a349 22

#if 0
	/* if there is a blank region, we select all the region */
	if ((right = skip_spc_right(BORDER)) > 0) {
		left = skip_spc_left();
		vsp->cpy_start -= left;
		vsp->cpy_end += right;
		if (vsp->cpy_start % vsp->maxcol) {
			inverse_region(vsp->cpy_start, vsp->cpy_end);
			inverse_char(vsp->mouse); /* reverse back the cursor */
		}
		else {
			/* we select only one character on a full blank line */
			vsp->cpy_start = vsp->mouse;
			vsp->cpy_end = vsp->mouse;
		}
	}
#endif

	/* for correct action in remove_selection() */
	vsp->cpy_orig = vsp->cpy_start;

d352 1
a352 1

d369 1
a369 1

d372 1
a372 1

d375 1
a375 1

d378 1
a378 1

d387 1
a387 1

d393 1
a393 1

d409 1
a409 1

d412 1
a412 1

d415 1
a415 1

d420 1
a420 1

d442 2
d445 39
a483 3
		if (vsp->mouse < vsp->cpy_start) {
			/* we are over the initial selection position */	

d485 1
a485 5
			if (IS_SEL_EXISTS(vsp)) 
				remove_selection();

			/* new delimiters for the selection zone */
			vsp->cpy_start = vsp->mouse;
d487 1
a487 1
			inverse_char(vsp->cpy_end);
d489 3
a491 4
		if (vsp->cpy_start < vsp->cpy_orig && vsp->mouse >= vsp->cpy_orig)
		{
			/* we go back behind the initial selection
			   position */
d494 1
a494 2
			if (IS_SEL_EXISTS(vsp)) 
				remove_selection();
d497 1
a497 2
			vsp->cpy_end = vsp->cpy_orig;
			inverse_char(vsp->cpy_start);
d500 6
a505 4
		if (vsp->mouse < vsp->cpy_end) {
			/* reducing selection */
			if (vsp->mouse >= vsp->cpy_orig) 
				inverse_region(vsp->mouse + 1, vsp->cpy_end);
d507 3
a509 1
				inverse_region(vsp->mouse, vsp->cpy_end - 1);
d512 4
a515 3
			/* extending selection */
			if (vsp->mouse >= vsp->cpy_orig)  
				inverse_region(vsp->cpy_end + 1, vsp->mouse);
d517 3
a519 1
				inverse_region(vsp->cpy_end, vsp->mouse - 1);
a520 2
		vsp->cpy_end = vsp->mouse;
		order_region();	
d522 1
a522 1
	else {
d537 1
a537 1
		inverse_region(vsp->cpy_end, vsp->cpy_orig - 1);
a594 1

a597 1

a608 17

#if 0
	/* 
	   examine the last line of selection to see if it finishes with blank.
	   In that case, we put a carriage return after the last non-blank
	   character in the buffer 
	 */
	sel_cur = sel_end;
	while (IS_SPACE(*sel_cur & 0x00ff) && XABS_TO_XREL(sel_cur) < MAXCOL) {
		sel_cur--;
		current--;
	}
	if (sel_cur != sel_end) {
		Copybuffer[current++] = '\r';
		Copybuffer[current] = '\0';
	}	
#endif
@

