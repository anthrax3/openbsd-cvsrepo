head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	UBC_SYNC_B:1.7
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2001.05.29.22.09.40;	author mickey;	state dead;
branches;
next	1.6;

1.6
date	2000.12.07.18.19.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.05.24.15.37.44;	author aaron;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	99.01.13.07.26.06;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.41.59;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.23.50;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.47;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.47;	author deraadt;	state Exp;
branches;
next	;

1.5.4.1
date	2001.04.18.16.08.14;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2001.07.04.10.17.51;	author niklas;	state dead;
branches;
next	;


desc
@@


1.7
log
@remove this used to be great console driver; x11 builds w/o it all fine; aaron@@, todd@@, matthieu@@ ok
@
text
@/*	$OpenBSD: loadfont.c,v 1.6 2000/12/07 18:19:12 deraadt Exp $	*/

/*
 * Copyright (c) 1992, 1995 Hellmuth Michaelis
 *
 * Copyright (c) 1992, 1994 Brian Dunford-Shore 
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by
 *	Hellmuth Michaelis and Brian Dunford-Shore
 * 4. The name authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

static char *id =
	"@@(#)loadfont.c, 3.31, Last Edit-Date: [Thu Aug 24 10:40:50 1995]";

/*---------------------------------------------------------------------------*
 *
 *	load a font into vga character font memory
 *
 *	-hm	removing explicit HGC support (same as MDA ..)
 *	-hm	new pcvt_ioctl.h SIZ_xxROWS
 *	-hm	add -d option
 *	-hm	patch from Joerg, -s scanlines option
 *
 *---------------------------------------------------------------------------*/
 
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <machine/pcvt_ioctl.h>

struct screeninfo screeninfo;

#define DEFAULTFD 0
int fd;

static int roundrows(int scrrow);
static int codetosize(int code);
static void setfont(int charset, int fontloaded, int charscan,
		    int scrscan, int scrrow);
static void loadfont(int fontset, int charscanlines,
		     unsigned char *font_table);
static void printvgafontattr(int charset);
static void printheader(void);
static void usage(void);

int
main(int argc, char **argv)
{
	extern int optind;
	extern int opterr;
	extern char *optarg;

	FILE *in;
	struct stat sbuf, *sbp;
	unsigned char *fonttab;
	int ret;
	int chr_height;
	int scr_scan;
	int scr_rows;
	int scan_lines = -1;
	int c;
	int chr_set = -1;
	char *filename = NULL;
	int fflag = -1;
	int info = -1;
	int dflag = 0;
	char *device = NULL;
	
	while( (c = getopt(argc, argv, "c:d:f:is:")) != -1)
	{
		switch(c)
		{
			case 'c':
				chr_set = atoi(optarg);
				break;
				
			case 'd':
				device = optarg;
				dflag = 1;
				break;

			case 'f':
				filename = optarg;
				fflag = 1;
				break;
				
			case 'i':
				info = 1;
				break;
				
			case 's':
				scan_lines = atoi(optarg);
				if(scan_lines == 0)
					usage();
				break;
			
			case '?':
			default:
				usage();
				break;
		}
	}
	
	if(chr_set == -1 || fflag == -1)
		info = 1;

	if(dflag)
	{
		if((fd = open(device, O_RDWR)) == -1)
			err(1, "ERROR opening %s", device);
	}
	else
	{
		fd = DEFAULTFD;
	}

	if(ioctl(fd, VGAGETSCREEN, &screeninfo) == -1)
		err(1, "ioctl VGAGETSCREEN failed");

	if(info == 1)
	{
		int i;
	
		switch(screeninfo.adaptor_type)
		{
		  case UNKNOWN_ADAPTOR:
		  case MDA_ADAPTOR:
		  case CGA_ADAPTOR:
		    fprintf(stderr,
			    "Adaptor does not support Downloadable Fonts!\n");
		    break;
		  case EGA_ADAPTOR:
		    printheader();
		    for(i = 0;i < 4;i++)
		    {
			printvgafontattr(i);
		    }
		    break;
		  case VGA_ADAPTOR:
		    printheader();		  
		    for(i = 0;i < 8;i++)
		    {
			printvgafontattr(i);
		    }
		}
		printf("\n");
		exit(0);
	}

	switch(screeninfo.adaptor_type)
		{
		case UNKNOWN_ADAPTOR:
		case MDA_ADAPTOR:
		case CGA_ADAPTOR:
			fprintf(stderr,
				"Adaptor does not support "
				"Downloadable Fonts!\n");
			exit(1);

		case EGA_ADAPTOR:
			if(scan_lines == -1) scan_lines = 350;
			else if(scan_lines != 350) {
				fprintf(stderr,
					"EGA adaptors can only operate with "
					"350 scan lines.\n");
				exit(1);
			}
			break;

		case VGA_ADAPTOR:
			if(scan_lines == -1) scan_lines = 400;
			else if(scan_lines != 400 && scan_lines != 480) {
				fprintf(stderr,
					"VGA adaptors can only operate with "
					"400/480 scan lines.\n");
				exit(1);
			}
			break;
		}

	if(chr_set < 0 || chr_set > 7)
		usage();

	sbp = &sbuf;
	
	if((in = fopen(filename, "r")) == NULL)
		err(1, "cannot open file %s for reading", filename);

	if((fstat(fileno(in), sbp)) != 0)
		err(1, "cannot fstat file %s", filename);
		
	chr_height = sbp->st_size / 256; /* 256 chars per font */
			
	if(chr_height * 256 != sbp->st_size ||
	   chr_height < 8 || chr_height > 20) {
		fprintf(stderr,
			"File is no valid font file, size = %ld.\n",
			(long)sbp->st_size);
		exit(1);
	}			

	scr_rows = codetosize(roundrows(scan_lines / chr_height));
	scr_scan = scr_rows * chr_height - 256 - 1;

	if((fonttab = (unsigned char *)malloc((size_t)sbp->st_size)) == NULL)
	{
		fprintf(stderr,"error, malloc failed\n");
		exit(1);
	}

	if((ret = fread(fonttab, sizeof(*fonttab), sbp->st_size, in)) !=
	   sbp->st_size)
	{
		fprintf(stderr,
			"error reading file %s, size = %ld, read = %d, "
			"errno %d\n",
			argv[1], (long)sbp->st_size, ret, errno);
		exit(1);
	}		

	loadfont(chr_set, chr_height, fonttab);
	setfont(chr_set, 1, chr_height - 1, scr_scan, scr_rows);

	exit(0);
}

static int
roundrows(int scrrow)
{
	if(scrrow >= 50) return SIZ_50ROWS;
	else if(scrrow >= 43) return SIZ_43ROWS;
	else if(scrrow >= 40) return SIZ_40ROWS;
	else if(scrrow >= 35) return SIZ_35ROWS;
	else if(scrrow >= 28) return SIZ_28ROWS;
	else return SIZ_25ROWS;
}

static int
codetosize(int code)
{
	static int sizetab[] = { 25, 28, 35, 40, 43, 50 };
	if(code < 0 || code >= sizeof sizetab / sizeof(int))
		return -1;
	return sizetab[code];
}

static void
setfont(int charset, int fontloaded, int charscan, int scrscan, int scrrow)
{
	struct vgafontattr vfattr;

	vfattr.character_set = charset;
	vfattr.font_loaded = fontloaded;
	vfattr.character_scanlines = charscan;
	vfattr.screen_scanlines = scrscan;
	vfattr.screen_size = scrrow;

	if(ioctl(fd, VGASETFONTATTR, &vfattr) == -1)
		err(1, "loadfont - ioctl VGASETFONTATTR failed, error");
}

static void
loadfont(int fontset, int charscanlines, unsigned char *font_table)
{
	int i, j;
	struct vgaloadchar vlc;

	vlc.character_set = fontset;
	vlc.character_scanlines = charscanlines;

	for(i = 0; i < 256; i++)
	{
		vlc.character = i;
		for (j = 0; j < charscanlines; j++)
		{
			vlc.char_table[j] = font_table[j];
		}
		font_table += charscanlines;
		if(ioctl(fd, VGALOADCHAR, &vlc) == -1)
			err(1, "loadfont - ioctl VGALOADCHAR failed, error");
	}
}

static void
printvgafontattr(int charset)
{
	struct vgafontattr vfattr;
	
	vfattr.character_set = charset;

	if(ioctl(fd, VGAGETFONTATTR, &vfattr) == -1)
		err(1, "loadfont - ioctl VGAGETFONTATTR failed, error");

	printf(" %d  ",charset);
	if(vfattr.font_loaded)
	{

		printf("Loaded ");
		printf(" %2.2d       ", codetosize(vfattr.screen_size));
		printf(" %2.2d           ",
		       (((int)vfattr.character_scanlines) & 0x1f) + 1);
		printf(" %3.3d",
		       ((int)vfattr.screen_scanlines+0x101));
	}
	else
	{
		printf("Empty");
	}
	printf("\n");
}

static void
printheader(void)
{
	printf("\nEGA/VGA Charactersets Status Info:\n\n");
	printf("Set Status Lines CharScanLines ScreenScanLines\n");
	printf("--- ------ ----- ------------- ---------------\n");
}

static void
usage(void)
{
	fprintf(stderr,
         "\nloadfont - "
         "load a font into EGA/VGA font ram for the pcvt video driver\n");
	fprintf(stderr,
         "usage: loadfont -c <charset> -d <device> -f <filename>"
         " -i -s <scan_lines>\n");
	fprintf(stderr,
         "       -c <charset>    characterset to load (EGA 0..3, VGA 0..7)\n");
	fprintf(stderr,
         "       -d <device>     specify device\n");
	fprintf(stderr,
         "       -f <filename>   filename containing binary font data\n");
	fprintf(stderr,
         "       -i              print status and types of loaded fonts\n");
	fprintf(stderr,
         "       -s <scan_lines> number of scan lines on screen\n");
	exit(2);
}
@


1.6
log
@fix various perror() that were buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: loadfont.c,v 1.5 1999/05/24 15:37:44 aaron Exp $	*/
@


1.5
log
@more buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: loadfont.c,v 1.4 1999/01/13 07:26:06 niklas Exp $	*/
d141 1
a141 7
		{
			char buffer[80];
			strcpy(buffer,"ERROR opening ");
			strncat(buffer,device,sizeof(buffer) - strlen(buffer));
			perror(buffer);
			exit(1);
		}
d149 1
a149 4
	{
		perror("ioctl VGAGETSCREEN failed");
		exit(1);
	}
d218 1
a218 6
	{
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "cannot open file %s for reading", filename);
		perror(buffer);
		exit(1);
	}
d221 1
a221 6
	{
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "cannot fstat file %s", filename);
		perror(buffer);
		exit(1);
	}
d290 1
a290 4
	{
		perror("loadfont - ioctl VGASETFONTATTR failed, error");
		exit(1);
	}
d311 1
a311 4
		{
			perror("loadfont - ioctl VGALOADCHAR failed, error");
			exit(1);
		}
d323 2
a324 4
	{
		perror("loadfont - ioctl VGAGETFONTATTR failed, error");
		exit(1);
	}
@


1.5.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: loadfont.c,v 1.6 2000/12/07 18:19:12 deraadt Exp $	*/
d141 7
a147 1
			err(1, "ERROR opening %s", device);
d155 4
a158 1
		err(1, "ioctl VGAGETSCREEN failed");
d227 6
a232 1
		err(1, "cannot open file %s for reading", filename);
d235 6
a240 1
		err(1, "cannot fstat file %s", filename);
d309 4
a312 1
		err(1, "loadfont - ioctl VGASETFONTATTR failed, error");
d333 4
a336 1
			err(1, "loadfont - ioctl VGALOADCHAR failed, error");
d348 4
a351 2
		err(1, "loadfont - ioctl VGAGETFONTATTR failed, error");

@


1.5.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: loadfont.c,v 1.5.4.1 2001/04/18 16:08:14 niklas Exp $	*/
@


1.4
log
@RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d144 1
a144 1
			strcat(buffer,device);
d229 1
a229 1
		sprintf(buffer, "cannot open file %s for reading", filename);
d237 1
a237 1
		sprintf(buffer, "cannot fstat file %s", filename);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 2
@


1.2
log
@-Wall madness.
@
text
@d98 1
a98 1
	while( (c = getopt(argc, argv, "c:d:f:is:")) != EOF)
@


1.1
log
@Initial revision
@
text
@d50 2
d53 3
a55 2
#include <fcntl.h>
#include <errno.h>
d75 1
d92 1
a92 1
	char *filename;
d96 1
a96 1
	char *device;
d245 2
a246 2
			"File is no valid font file, size = %d.\n",
			sbp->st_size);
d263 1
a263 1
			"error reading file %s, size = %d, read = %d, "
d265 1
a265 1
			argv[1], sbp->st_size, ret, errno);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
