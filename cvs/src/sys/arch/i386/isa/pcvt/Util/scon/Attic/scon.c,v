head	1.20;
access;
symbols
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	UBC_SYNC_A:1.20
	UBC_SYNC_B:1.20
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_8:1.18.0.6
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.18.0.4
	OPENBSD_2_7_BASE:1.18
	SMP:1.18.0.2
	SMP_BASE:1.18
	kame_19991208:1.17
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2001.05.29.22.09.41;	author mickey;	state dead;
branches;
next	1.19;

1.19
date	2000.12.07.18.19.12;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.16.12.39.55;	author maja;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	99.11.25.20.24.20;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.10.16.18.56.37;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.10.07.18.26.21;	author wvdputte;	state Exp;
branches;
next	1.14;

1.14
date	99.09.29.23.23.58;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.09.29.22.29.10;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.24.15.37.44;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.01.13.07.26.06;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	98.09.28.03.00.29;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	98.08.13.04.38.47;	author downsj;	state Exp;
branches;
next	1.8;

1.8
date	98.08.10.16.48.41;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.01.04.12.01.08;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.01.04.11.45.01;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.05.29.02.21.00;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.05.04.20.59.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.42.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.23.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.48;	author deraadt;	state Exp;
branches;
next	;

1.18.2.1
date	2001.04.18.16.08.17;	author niklas;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2001.07.04.10.17.53;	author niklas;	state dead;
branches;
next	;


desc
@@


1.20
log
@remove this used to be great console driver; x11 builds w/o it all fine; aaron@@, todd@@, matthieu@@ ok
@
text
@/*	$OpenBSD: scon.c,v 1.19 2000/12/07 18:19:12 deraadt Exp $	*/

/*
 * Copyright (c) 1992, 1995 Hellmuth Michaelis and Joerg Wunsch
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by
 *	Hellmuth Michaelis and Joerg Wunsch
 * 4. The name authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

static char *id =
	"@@(#)scon.c, 3.30, Last Edit-Date: [Wed Aug 30 13:57:10 1995]";

/*---------------------------------------------------------------------------*
 *
 *	history:
 *
 *	-hm	moving fd for default device from 1 -> 0 for such things
 *		as "scon -p list | more" to be possible
 *		(reported by Gordon L. Burditt, gordon@@sneaky.lonestar.org)
 *	-hm	adding option "a" for just returning the type of video adaptor
 *	-hm	removing explicit HGC support, same as MDA ...
 *	-hm	vga type/family/132col support info on -l
 *	-hm	force 24 lines in DEC 25 lines mode and HP 28 lines mode
 *	-hm	fixed bug with 132 column mode display status display
 *	-jw	added 132/80 col mode switching
 *	-hm	removed -h flag, use -? now ... ;-)
 *	-hm	S3 chipsets ..
 *	-hm	Cirrus chipsets support from Onno van der Linden
 *	-hm	-m option, display monitor type
 *	-hm	bugfix, scon -c <screen-num> cleared dest screen, fixed
 *	-hm	patch to support Cirrus CL-GD62x5 from Martin
 *
 *---------------------------------------------------------------------------*/

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <machine/pcvt_ioctl.h>

#define DEFAULTFD 0

int aflag = -1;
int bflag = -1;
unsigned int scrollback_pages = 8;
int lflag = -1;
int mflag = -1;
int oflag = -1;
int current = -1;
int res = -1;
char *device;
int dflag = -1;
int vflag = 0;
int Pflag = 0;
int tflag = 0;
int fflag = -1;
int colms = 0;
char *onoff;

unsigned timeout;
struct screeninfo screeninfo;

#define NVGAPEL 256

struct rgb {
	unsigned r, g, b;
	int dothis;
};

static struct rgb palette[NVGAPEL] = {
	{ 0x00,  0x00,  0x00, 0},		/*   0 - black		*/
	{ 0x00,  0x00,  0x2a, 0},		/*   1 - blue		*/
	{ 0x00,  0x2a,  0x00, 0},		/*   2 - green		*/
	{ 0x00,  0x2a,  0x2a, 0},		/*   3 - cyan		*/
	{ 0x2a,  0x00,  0x00, 0},		/*   4 - red		*/
	{ 0x2a,  0x00,  0x2a, 0},		/*   5 - magenta	*/
	{ 0x2a,  0x2a,  0x00, 0},		/*   6 			*/
	{ 0x2a,  0x2a,  0x2a, 0},		/*   7 - lightgray	*/
	{ 0x00,  0x00,  0x15, 0},		/*   8 			*/
	{ 0x00,  0x00,  0x3f, 0},		/*   9 			*/
	{ 0x00,  0x2a,  0x15, 0},		/*  10 			*/
	{ 0x00,  0x2a,  0x3f, 0},		/*  11 			*/
	{ 0x2a,  0x00,  0x15, 0},		/*  12 			*/
	{ 0x2a,  0x00,  0x3f, 0},		/*  13 			*/
	{ 0x2a,  0x2a,  0x15, 0},		/*  14 			*/
	{ 0x2a,  0x2a,  0x3f, 0},		/*  15 			*/
	{ 0x00,  0x15,  0x00, 0},		/*  16 			*/
	{ 0x00,  0x15,  0x2a, 0},		/*  17 			*/
	{ 0x00,  0x3f,  0x00, 0},		/*  18 			*/
	{ 0x00,  0x3f,  0x2a, 0},		/*  19 			*/
	{ 0x2a,  0x15,  0x00, 0},		/*  20 - brown		*/
	{ 0x2a,  0x15,  0x2a, 0},		/*  21 			*/
	{ 0x2a,  0x3f,  0x00, 0},		/*  22 			*/
	{ 0x2a,  0x3f,  0x2a, 0},		/*  23 			*/
	{ 0x00,  0x15,  0x15, 0},		/*  24 			*/
	{ 0x00,  0x15,  0x3f, 0},		/*  25 			*/
	{ 0x00,  0x3f,  0x15, 0},		/*  26 			*/
	{ 0x00,  0x3f,  0x3f, 0},		/*  27 			*/
	{ 0x2a,  0x15,  0x15, 0},		/*  28 			*/
	{ 0x2a,  0x15,  0x3f, 0},		/*  29 			*/
	{ 0x2a,  0x3f,  0x15, 0},		/*  30 			*/
	{ 0x2a,  0x3f,  0x3f, 0},		/*  31 			*/
	{ 0x15,  0x00,  0x00, 0},		/*  32 			*/
	{ 0x15,  0x00,  0x2a, 0},		/*  33 			*/
	{ 0x15,  0x2a,  0x00, 0},		/*  34 			*/
	{ 0x15,  0x2a,  0x2a, 0},		/*  35 			*/
	{ 0x3f,  0x00,  0x00, 0},		/*  36 			*/
	{ 0x3f,  0x00,  0x2a, 0},		/*  37 			*/
	{ 0x3f,  0x2a,  0x00, 0},		/*  38 			*/
	{ 0x3f,  0x2a,  0x2a, 0},		/*  39 			*/
	{ 0x15,  0x00,  0x15, 0},		/*  40 			*/
	{ 0x15,  0x00,  0x3f, 0},		/*  41 			*/
	{ 0x15,  0x2a,  0x15, 0},		/*  42 			*/
	{ 0x15,  0x2a,  0x3f, 0},		/*  43 			*/
	{ 0x3f,  0x00,  0x15, 0},		/*  44 			*/
	{ 0x3f,  0x00,  0x3f, 0},		/*  45 			*/
	{ 0x3f,  0x2a,  0x15, 0},		/*  46 			*/
	{ 0x3f,  0x2a,  0x3f, 0},		/*  47 			*/
	{ 0x15,  0x15,  0x00, 0},		/*  48 			*/
	{ 0x15,  0x15,  0x2a, 0},		/*  49 			*/
	{ 0x15,  0x3f,  0x00, 0},		/*  50 			*/
	{ 0x15,  0x3f,  0x2a, 0},		/*  51 			*/
	{ 0x3f,  0x15,  0x00, 0},		/*  52 			*/
	{ 0x3f,  0x15,  0x2a, 0},		/*  53 			*/
	{ 0x3f,  0x3f,  0x00, 0},		/*  54 			*/
	{ 0x3f,  0x3f,  0x2a, 0},		/*  55 			*/
	{ 0x15,  0x15,  0x15, 0},		/*  56 - darkgray	*/
	{ 0x15,  0x15,  0x3f, 0},		/*  57 - lightblue	*/
	{ 0x15,  0x3f,  0x15, 0},		/*  58 - lightgreen	*/
	{ 0x15,  0x3f,  0x3f, 0},		/*  59 - lightcyan	*/
	{ 0x3f,  0x15,  0x15, 0},		/*  60 - lightred	*/
	{ 0x3f,  0x15,  0x3f, 0},		/*  61 - lightmagenta	*/
	{ 0x3f,  0x3f,  0x15, 0},		/*  62 - yellow		*/
	{ 0x3f,  0x3f,  0x3f, 0},		/*  63 - white		*/
	{ 0x00,  0x00,  0x00, 0}		/*  64 ... - empty	*/
};

static struct colname {
	const char *name;
	unsigned idx;
} colnames[] = {
	{"black", 0},
	{"blue", 1},
	{"green", 2},
	{"cyan", 3},
	{"red", 4},
	{"magenta", 5},
	{"brown", 20},
	{"lightgray", 7},
	{"lightgrey", 7},
	{"darkgray", 56},
	{"darkgrey", 56},
	{"lightblue", 57},
	{"lightgreen", 58},
	{"lightcyan", 59},
	{"lightred", 60},
	{"lightmagenta", 61},
	{"yellow", 62},
	{"white", 63},
	/* must be terminator: */ {(const char *)NULL, 0}
};


static void parsepopt(char *arg, unsigned *idx,
		      unsigned *r, unsigned *g, unsigned *b);
static void printpalette(int fd);
void printinfo(int fd);
void printadaptor(int fd);
void printmonitor(int fd);
void usage();

int main(argc,argv)
int argc;
char *argv[];
{
	extern int optind;
	extern int opterr;
	extern char *optarg;
	
	int c;
	int fd;
	
	while( (c = getopt(argc, argv, "ab:c:d:f:lmos:t:vp:18")) != -1)
	{
		switch(c)
		{
			case 'a':
				aflag = 1;
				break;

			case 'b':
				bflag = 1;
				scrollback_pages = atoi(optarg);
				break;
				
			case 'l':
				lflag = 1;
				break;

			case 'm':
				mflag = 1;
				break;

			case 'c':
				current = atoi(optarg);
				break;
				
			case 'd':
				device = optarg;
				dflag = 1;
				break;
				
			case 'f':
				onoff = optarg;
				fflag = 1;
				break;
				
			case 's':
				if     (!strncmp(optarg, "25", 2))
					res = SIZ_25ROWS;
				else if(!strncmp(optarg, "28", 2))
					res = SIZ_28ROWS;
				else if(!strncmp(optarg, "35", 2))
					res = SIZ_35ROWS;
				else if(!strncmp(optarg, "40", 2))
					res = SIZ_40ROWS;
				else if(!strncmp(optarg, "43", 2))
					res = SIZ_43ROWS;
				else if(!strncmp(optarg, "50", 2))
					res = SIZ_50ROWS;
				break;

			case 'v':
				vflag++;
				break;

			case 'o':
				oflag = 1;
				break;

			case 'p':
				if(!strcmp(optarg, "list"))
				{
					if(Pflag)
					{
						fprintf(stderr,
						"-p list is mutual exclusive "
						"with other -p options\n");
						return 2;
					}
					Pflag = 3;
				}
				else if(!strcmp(optarg, "default"))
				{
					if(Pflag)
					{
						fprintf(stderr,
						"multiple -p default not "
						"allowed\n");
						return 2;
					}
					Pflag = 2;
				} else {
					unsigned idx, r, g, b;

					if(Pflag > 1)
					{
						fprintf(stderr,
						"-p default and -p i,r,g,b "
						"ambiguous\n");
						return 2;
					}
					Pflag = 1;
					parsepopt(optarg, &idx, &r, &g, &b);
					if(idx >= NVGAPEL)
					{
						fprintf(stderr,
						"index %u in -p option "
						"out of range\n", idx);
						return 2;
					}
					palette[idx].r = r;
					palette[idx].g = g;
					palette[idx].b = b;
					palette[idx].dothis = 1;
				}
				break;

			case 't':
				tflag++;
				timeout = atoi(optarg);
				break;

			case '1':
				colms = 132;
				break;
			
			case '8':
				colms = 80;
				break;

			case '?':
			default:
				usage();
				break;
		}
	}

	if(dflag == -1 && lflag == -1 && current == -1 &&
	   res == -1 && Pflag == 0 && tflag == 0 && fflag == -1
	   && colms == 0 && mflag == -1 && bflag == -1 && oflag == -1)
	{
		lflag = 1;
	}

	if(dflag == -1)
	{
		if(vflag)
			printf("using current device\n");
		fd = DEFAULTFD;		/* -hm, Feb 12 1993 */
	}
	else
	{
		if((fd = open(device, O_RDWR)) == -1)
			err(1, "ERROR opening %s", device);
		if(vflag)
			printf("using device %s\n",device);		
	}

	if(aflag == 1)	/* return adaptor type */
	{
		printadaptor(fd);
		exit(0);
	}

	if (bflag == 1)
	{
		if(vflag) {
			printf("Setting number of scrollback buffer pages ");
			printf("to %d.\n", scrollback_pages);
		}

		if(ioctl(fd, SETSCROLLSIZE, &scrollback_pages) < 0)
			err(2, "ioctl(SETSCROLLSIZE)");
		exit(0);
	}

	if (oflag == 1)
	{
		if (ioctl(fd, TOGGLEPCDISP, &oflag) < 0)
			err(2, "ioctl(TOGGLEPCDISP)");
		exit(0);
	}

	if(mflag == 1)	/* return monitor type */
	{
		printmonitor(fd);
		exit(0);
	}

	if(lflag == 1)	/* list information */
	{
		if(vflag)
			printf("processing option -l, listing screen info\n");
		printinfo(fd);
		exit(0);
	}

	if(tflag)	/* set screen saver timeout */
	{
		if(vflag)
		{
			printf(
			"processing option -t, setting screen saver timeout: "
			);
			if(timeout)
				printf("new timeout = %d s\n", timeout);
			else
				printf("turned off\n");
		}

		if(ioctl(fd, VGASCREENSAVER, &timeout) < 0)
			err(2, "ioctl(VGASCREENSAVER)");
		goto success;
	}

	if(colms)
	{
		if(vflag)
			printf("Setting number of columns to %d\n", colms);
		if(ioctl(fd, VGASETCOLMS, &colms) < 0)
			err(2, "ioctl(VGASETCOLMS)");
		goto success;
	}
	
	if(Pflag == 3)
	{
		/* listing VGA palette */
		if(vflag)
			printf("processing option -p list, "
			       "listing VGA palette\n");

		printpalette(fd);
		goto success;
	}

	if(Pflag)
	{
		unsigned int idx;

		/* setting VGA palette */
		if(vflag)
			printf("processing option -p, setting VGA palette%s\n",
			       Pflag == 2? " to default": "");

		for(idx = 0; idx < NVGAPEL; idx++)
			if(Pflag == 2 || palette[idx].dothis)
			{
				struct vgapel p;
				p.idx = idx;
				p.r = palette[idx].r;
				p.g = palette[idx].g;
				p.b = palette[idx].b;
				if(ioctl(fd, VGAWRITEPEL, (caddr_t)&p) < 0)
					err(2, "ioctl(fd, VGAWRITEPEL)");
			}
		goto success;
	}

	screeninfo.screen_no = -1; /* We are using fd */
	screeninfo.current_screen = current;
	screeninfo.pure_vt_mode = -1;
	screeninfo.screen_size = res;	
	screeninfo.force_24lines = -1;
	
	if(current != -1)	/* set current screen */
	{
		if(vflag)
			printf("processing option -c, setting current screen to %d\n",current);
		
		if(ioctl(fd, VGASETSCREEN, &screeninfo) == -1)
			err(1, "ioctl VGASETSCREEN failed");
		exit(0);
	}

	if(vflag)
	{
		if(res == -1)
			printf("no change in screen resolution\n");
		else if(res == SIZ_25ROWS)
			printf("change screen resolution to 25 lines\n");
		else if(res == SIZ_28ROWS)
			printf("change screen resolution to 28 lines\n");
		else if(res == SIZ_35ROWS)
			printf("change screen resolution to 35 lines\n");
		else if(res == SIZ_40ROWS)
			printf("change screen resolution to 40 lines\n");
		else if(res == SIZ_43ROWS)
			printf("change screen resolution to 43 lines\n");
		else if(res == SIZ_50ROWS)
			printf("change screen resolution to 50 lines\n");
	}

	if(fflag == 1)	/* force 24 lines on/off */
	{
		if(!strcmp(onoff, "on"))
		{
			fflag = 1;
		}
		else if(!strcmp(onoff, "off"))
		{
			fflag = 0;
		}
		else
		{
			fprintf(stderr,"you must specify 'on' or 'off' with -f option!\n");
			exit(1);
		}
	}
	screeninfo.force_24lines = fflag;

	if(ioctl(fd, VGASETSCREEN, &screeninfo) == -1)
		err(1, "ioctl VGASETSCREEN failed");
success:
	if(vflag)
		printf("successful execution of ioctl VGASETSCREEN!\n");
	exit(0);	
}			

void usage()
{
	fprintf(stderr,"usage: scon [-almv18] [-b n] [-c n] [-d dev] [-f [on|off] [-s n]\n");
	fprintf(stderr,"            [-p [default | list | i,r,g,b]] | [-t sec]\n");
	fprintf(stderr,"       -a              list video adaptor type (MDA,CGA,EGA or VGA)\n");
	fprintf(stderr,"       -b <num>        set number of scrollback buffer pages to <num>\n");
	fprintf(stderr,"       -c <screen no>  switch current virtual screen to <screen no>\n");
	fprintf(stderr,"       -d <device>     set parameters(-V|-H|-s) for virtual device\n");
	fprintf(stderr,"       -f <on|off>     force 24 lines in VT 25 lines and HP 28 lines mode\n");
	fprintf(stderr,"       -l              list current parameters for a virtual screen\n");
	fprintf(stderr,"       -m              report monitor type (MONO/COLOR)\n");
	fprintf(stderr,"       -p default      set default VGA palette\n");
	fprintf(stderr,"       -p list         list current VGA palette\n");
	fprintf(stderr,"       -p <i,r,g,b>    set VGA palette entry i to r/g/b\n");
	fprintf(stderr,"       -p <name,r,g,b> set VGA palette entry for color name to r/g/b\n");
	fprintf(stderr,"       -s <lines>      set 25, 28, 35, 40, 43 or 50 lines for a virtual screen\n");
	fprintf(stderr,"       -t <timeout>    set screen saver timeout [seconds]\n");
	fprintf(stderr,"       -1              set 132 columns mode\n");
	fprintf(stderr,"       -8              set 80 columns mode\n");
	fprintf(stderr,"       -v              verbose mode\n");
	exit(1);
}

void printadaptor(fd)
int fd;
{
	if(ioctl(fd, VGAGETSCREEN, &screeninfo) == -1)
		err(1, "ioctl VGAGETSCREEN failed");
	switch(screeninfo.adaptor_type)
	{
		default:
		case UNKNOWN_ADAPTOR:
			printf("UNKNOWN\n");
			break;
			
		case MDA_ADAPTOR:
			printf("MDA\n");
			break;
			
		case CGA_ADAPTOR:
			printf("CGA\n");
			break;
			
		case EGA_ADAPTOR:
			printf("EGA\n");
			break;
			
		case VGA_ADAPTOR:
			printf("VGA\n");
			break;
	}
}

void printmonitor(fd)
int fd;
{
	if(ioctl(fd, VGAGETSCREEN, &screeninfo) == -1)
		err(1, "ioctl VGAGETSCREEN failed");
	switch(screeninfo.monitor_type)
	{
		default:
			printf("UNKNOWN\n");
			break;
			
		case MONITOR_MONO:
			printf("MONO\n");
			break;
			
		case MONITOR_COLOR:
			printf("COLOR\n");
			break;
	}
}

char *vga_type(int number)
{
	static char *vga_tab[] = {
		"Generic VGA",
		"ET4000",
		"ET3000",
		"PVGA1A",
		"WD90C00",
		"WD90C10",
		"WD90C11",
		"VIDEO 7 VEGA",
		"VIDEO 7 FAST",
		"VIDEO 7 VER5",
		"VIDEO 7 1024I",
		"Unknown VIDEO 7",
		"TVGA 8800BR",
		"TVGA 8800CS",
		"TVGA 8900B",
		"TVGA 8900C",
		"TVGA 8900CL",
		"TVGA 9000",
		"TVGA 9100",
		"TVGA 9200",
		"TVGA 9440",
		"TVGA 9660",
		"TVGA 9750 (3DImage)",
		"Unknown TRIDENT",
		"S3 80C911",
		"S3 80C924",
		"S3 80C801/80C805",
		"S3 80C928",
		"S3 864",
		"S3 964",
		"S3 732 (Trio32)",
		"S3 764 (Trio64)",
		"S3 866",
		"S3 868",
		"S3 968",
		"S3 765 (Trio64 V+)",
		"S3 ViRGE",
		"Unknown S3",
 		"CL-GD5402",
 		"CL-GD5402r1",
 		"CL-GD5420",
 		"CL-GD5420r1",
 		"CL-GD5422",
 		"CL-GD5424",
 		"CL-GD5426",
 		"CL-GD5428",
 		"CL-GD5430",
 		"CL-GD62x5",
 		"Unknown Cirrus",

	};
	return(vga_tab[number]);
}

char *vga_family(int number)
{
	static char *vga_tab[] = {
		"Generic VGA",
		"Tseng Labs",
		"Western Digital",
		"Video Seven",
		"Trident",
		"S3 Incorporated",
		"Cirrus Logic",
	};
	return(vga_tab[number]);
}

void printinfo(fd)
int fd;
{
	if(ioctl(fd, VGAGETSCREEN, &screeninfo) == -1)
		err(1, "ioctl VGAGETSCREEN failed");

	printf( "Video Adaptor Type           = ");
	
	switch(screeninfo.adaptor_type)
	{
		default:
		case UNKNOWN_ADAPTOR:
			printf("UNKNOWN Video Adaptor\n");
			break;
			
		case MDA_ADAPTOR:
			printf("MDA - Monochrome Display Adaptor\n");
			break;
			
		case CGA_ADAPTOR:
			printf("CGA - Color Graphics Adaptor\n");
			break;
			
		case EGA_ADAPTOR:
			printf("EGA - Enhanced Graphics Adaptor\n");
			break;
			
		case VGA_ADAPTOR:
			printf("VGA - Video Graphics Adaptor/Array\n");
			printf(" VGA Chipset Manufacturer    = %s\n",
					vga_family(screeninfo.vga_family));
			printf(" VGA Chipset Type            = %s\n",
					vga_type(screeninfo.vga_type));
			printf(" Support for 132 Column Mode = %s\n",
					screeninfo.vga_132 ? "Yes" : "No");
			break;
	}

	printf( "Display Monitor Type         = ");	

	switch(screeninfo.monitor_type)
	{
		default:
			printf("UNKNOWN Monitor Type\n");
			break;
			
		case MONITOR_MONO:
			printf("Monochrome Monitor\n");
			break;
			
		case MONITOR_COLOR:
			printf("Color Monitor\n");
			break;
	}
	
	printf( "Number of Downloadable Fonts = %d\n",screeninfo.totalfonts);
	printf( "Number of Virtual Screens    = %d\n",screeninfo.totalscreens);
	printf( "Info Request Screen Number   = %d\n",screeninfo.screen_no);
	printf( "Current Displayed Screen     = %d\n",screeninfo.current_screen);
	
	if(screeninfo.pure_vt_mode == M_PUREVT)				
		printf( "Terminal Emulation Mode      = VT220\n");
	else
		printf( "Terminal Emulation Mode      = VT220 with HP Features\n");

	printf( "Lines                        = ");	

	switch(screeninfo.screen_size)
	{
		case SIZ_25ROWS:
			printf( "25\n");
			break;
	
		case SIZ_28ROWS:
			printf( "28\n");
			break;
	
		case SIZ_35ROWS:
			printf( "35\n");
			break;
	
		case SIZ_40ROWS:
			printf( "40\n");
			break;
	
		case SIZ_43ROWS:
			printf( "43\n");
			break;
	
		case SIZ_50ROWS:
			printf( "50\n");
			break;
	
		default:
			printf( "UNKNOWN\n");
			break;
	}
	printf( "Force 24 Lines               = %s",
			screeninfo.force_24lines ? "Yes" : "No");

	printf("\n");
}

static const char *findname(unsigned idx)
{
	/* try to find a name for palette entry idx */
	/* if multiple names exist, returns first matching */
	register struct colname *cnp;

	for(cnp = colnames; cnp->name; cnp++)
		if(cnp->idx == idx)
			return cnp->name;

	/* not found */
	return (const char *)NULL;
}

static void printpalette(int fd)
{
	register unsigned idx, last;

	for(idx = 0; idx < NVGAPEL; idx++)
	{
		struct vgapel p;
		p.idx = idx;
		if(ioctl(fd, VGAREADPEL, &p) < 0)
			err(2, "ioctl(VGAREADPEL)");
		palette[idx].r = p.r;
		palette[idx].g = p.g;
		palette[idx].b = p.b;
	}

	/* find last non-empty entry */
	for(last = NVGAPEL - 1; last; last--)
		if(palette[last].r || palette[last].g || palette[last].b)
			break;

	if(last != NVGAPEL - 1)
		last++;

	/* now, everything's collected. print out table */
	printf("VGA palette status\n");
	printf("index    red  green   blue  name\n");
	for(idx = 0; idx < last; idx++)
	{
		const char *cp;
		printf("%5d  %5d  %5d  %5d",
		       idx, palette[idx].r, palette[idx].g, palette[idx].b);
		if((cp = findname(idx)))
			printf("  %s\n", cp);
		else
			putchar('\n');
	}
	putchar('\n');
}


static void parsepopt(char *arg, unsigned *idx,
		      unsigned *r, unsigned *g, unsigned *b)
{
	char firstarg[21];
	register unsigned i;

	if(sscanf(arg, "%20[a-zA-Z0-9]%*[,:]%u,%u,%u", firstarg, r, g, b) < 4
	   || strlen(firstarg) == 0) {
		fprintf(stderr, "too few args in -p i,r,g,b\n");
		exit(2);
	}

	if(firstarg[0] >= '0' && firstarg[0] <= '9') {
		*idx = strtoul(firstarg, NULL, 10);
		return;
	}

	for(i = 0; colnames[i].name; i++)
		if(strcasecmp(colnames[i].name, firstarg) == 0) {
			*idx = colnames[i].idx;
			return;
		}
	fprintf(stderr, "arg ``%s'' in -p option not recognized\n",
		firstarg);
	exit(2);
}
@


1.19
log
@fix various perror() that were buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.18 2000/01/16 12:39:55 maja Exp $	*/
@


1.18
log
@remove more references to -H and -V. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.17 1999/11/25 20:24:20 aaron Exp $	*/
d352 1
a352 7
		{
			char buffer[80];
			strcpy(buffer,"ERROR opening ");
			strncat(buffer,device,sizeof(buffer) - strlen(buffer));
			perror(buffer);
			exit(1);
		}
d371 1
a371 4
		{
			perror("ioctl(SETSCROLLSIZE)");
			exit(2);
		}
d378 1
a378 4
		{
			perror("ioctl(TOGGLEPCDISP)");
			exit(2);
		}
d410 1
a410 5
		{
			perror("ioctl(VGASCREENSAVER)");
			fprintf(stderr, "Check the driver, the screensaver is probably not compiled in!\n");
			exit(2);
		}
d419 1
a419 4
		{
			perror("ioctl(VGASETCOLMS)");
			exit(2);
		}
d452 1
a452 4
				{
					perror("ioctl(fd, VGAWRITEPEL)");
					return 2;
				}
d469 1
a469 4
		{
			perror("ioctl VGASETSCREEN failed");
			exit(1);
		}
d510 1
a510 4
	{
		perror("ioctl VGASETSCREEN failed");
		exit(1);
	}
d544 1
a544 4
	{
		perror("ioctl VGAGETSCREEN failed");
		exit(1);
	}
d574 1
a574 4
	{
		perror("ioctl VGAGETSCREEN failed");
		exit(1);
	}
d666 1
a666 4
	{
		perror("ioctl VGAGETSCREEN failed");
		exit(1);
	}
d788 1
a788 4
		{
			perror("ioctl(VGAREADPEL)");
			exit(2);
		}
@


1.18.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.19 2000/12/07 18:19:12 deraadt Exp $	*/
d352 7
a358 1
			err(1, "ERROR opening %s", device);
d377 4
a380 1
			err(2, "ioctl(SETSCROLLSIZE)");
d387 4
a390 1
			err(2, "ioctl(TOGGLEPCDISP)");
d422 5
a426 1
			err(2, "ioctl(VGASCREENSAVER)");
d435 4
a438 1
			err(2, "ioctl(VGASETCOLMS)");
d471 4
a474 1
					err(2, "ioctl(fd, VGAWRITEPEL)");
d491 4
a494 1
			err(1, "ioctl VGASETSCREEN failed");
d535 4
a538 1
		err(1, "ioctl VGASETSCREEN failed");
d572 4
a575 1
		err(1, "ioctl VGAGETSCREEN failed");
d605 4
a608 1
		err(1, "ioctl VGAGETSCREEN failed");
d700 4
a703 1
		err(1, "ioctl VGAGETSCREEN failed");
d825 4
a828 1
			err(2, "ioctl(VGAREADPEL)");
@


1.18.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.18.2.1 2001/04/18 16:08:17 niklas Exp $	*/
@


1.17
log
@Remove the keyboard mouse emulator, HP emulation mode, and PCVT_SHOWKEYS
debugging cruft. Also fix a bug where you were not able to hold down the
scrollback hotkeys.
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.16 1999/10/16 18:56:37 aaron Exp $	*/
d210 1
a210 1
	while( (c = getopt(argc, argv, "ab:c:d:f:HVlmos:t:vp:18")) != -1)
d547 1
a547 1
	fprintf(stderr,"usage: scon [-almvVH18] [-b n] [-c n] [-d dev] [-f [on|off] [-s n]\n");
a553 1
	fprintf(stderr,"       -H              set VT220/HP emulation mode for a virtual screen\n");
a564 1
	fprintf(stderr,"       -V              set pure VT220 emulation for a virtual screen\n");
@


1.16
log
@- Add support for a traditional PC display (16 colors and use the standard IBM
font) and make it the default mode. This is more or less a hack, since pcvt
was developed only to be a vt220 terminal emulator.
- Document new default mode in pcvt(4).
- Add -o option to scon(1) for toggling between the new and legacy modes.
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.15 1999/10/07 18:26:21 wvdputte Exp $	*/
a76 2
int pflag = -1;
int hflag = -1;
a244 8
			case 'V':
				pflag = 1;
				break;

			case 'H':
				hflag = 1;
				break;

d336 2
a337 5
	if((pflag == 1) && (hflag == 1))
		usage();

	if(dflag == -1 && lflag == -1 && current == -1 && pflag == -1 &&
	   hflag == -1 && res == -1 && Pflag == 0 && tflag == 0 && fflag == -1
a495 18
	}

	if(pflag == 1)
	{
		if(vflag)
			printf("processing option -V, setting emulation to pure VT220\n");
		screeninfo.pure_vt_mode = M_PUREVT;
	}
	else if(hflag == 1)
	{
		if(vflag)
			printf("processing option -H, setting emulation to VT220 + HP Labels\n");
		screeninfo.pure_vt_mode = M_HPVT;
	}
	else
	{
		if(vflag)
			printf("no change in terminal emulation\n");
@


1.15
log
@Add -b (scrollback) to usage() -- OK aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.14 1999/09/29 23:23:58 aaron Exp $	*/
d75 1
d212 1
a212 1
	while( (c = getopt(argc, argv, "ab:c:d:f:HVlms:t:vp:18")) != -1)
d274 4
d351 1
a351 1
	   && colms == 0 && mflag == -1 && bflag == -1)
d392 10
@


1.14
log
@Fix a typo in previous commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.13 1999/09/29 22:29:10 aaron Exp $	*/
d563 2
a564 2
	fprintf(stderr,"usage: scon [-almvVH18] [-c n] [-d dev] [-f [on|off] [-s n]\n");
	fprintf(stderr,"    [-p [default | list | i,r,g,b]] | [-t sec]\n");
d566 1
@


1.13
log
@- Add an ioctl to pcvt that adjusts the size of the scrollback buffer.
- In scon(1), provide a -b option as an interface to this ioctl.
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.12 1999/05/24 15:37:44 aaron Exp $	*/
d379 1
a379 1
		if(vflag)
d382 1
@


1.12
log
@more buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: scon.c,v 1.11 1999/01/13 07:26:06 niklas Exp $	*/
d71 2
d211 1
a211 1
	while( (c = getopt(argc, argv, "ac:d:f:HVlms:t:vp:18")) != -1)
d218 5
d346 1
a346 1
	   && colms == 0 && mflag == -1)
d374 14
@


1.11
log
@RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d356 1
a356 1
			strcat(buffer,device);
@


1.10
log
@Add Trident 9750
@
text
@d1 2
@


1.9
log
@Fix card list: Robert Earl <rearl@@teleport.com>.
@
text
@d643 1
@


1.8
log
@allow -d option to work with -c [change screen]
@
text
@d642 1
@


1.7
log
@add TVGA9440
@
text
@d464 1
a464 1
		if(ioctl(1, VGASETSCREEN, &screeninfo) == -1)
@


1.6
log
@pretty
@
text
@d641 1
@


1.5
log
@add S3 ViRGE detect
@
text
@d539 2
a540 3
	fprintf(stderr,"\nscon - screen control utility for the pcvt video driver\n");
	fprintf(stderr,"usage: scon -a -l -m -v -c [n] -d [dev] -f [on|off] -V -H -s [n]\n");
	fprintf(stderr,"usage: scon -p [default | list | i,r,g,b] | -t [sec] | -1 | -8\n");
a557 1
	fprintf(stderr,"       -?              display help (this message)\n\n");
d695 1
a695 1
	printf( "\nVideo Adaptor Type           = ");
d789 1
a789 1
	printf("\n\n");
@


1.4
log
@Add newer S3 chipsets that pcvt supports.  Fix from William Wisner
<wisner@@gryphon.com>.  Closes PR#180.
@
text
@d656 1
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d648 8
@


1.2
log
@-Wall madness.
@
text
@d207 1
a207 1
	while( (c = getopt(argc, argv, "ac:d:f:HVlms:t:vp:18")) != EOF)
@


1.1
log
@Initial revision
@
text
@d59 1
d61 3
a63 1
#include <fcntl.h>
d191 4
d196 1
a196 1
main(argc,argv)
d537 1
a537 1
usage()
d563 1
a563 1
printadaptor(fd)
d596 1
a596 1
printmonitor(fd)
d679 1
a679 1
printinfo(fd)
d833 1
a833 1
		if(cp = findname(idx))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
