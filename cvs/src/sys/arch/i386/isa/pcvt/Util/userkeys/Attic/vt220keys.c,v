head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	UBC_SYNC_B:1.7
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2001.05.29.22.09.44;	author mickey;	state dead;
branches;
next	1.6;

1.6
date	2000.12.21.16.54.54;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.24.15.37.44;	author aaron;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	99.01.13.07.26.07;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.42.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.23.52;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.48;	author deraadt;	state Exp;
branches;
next	;

1.5.4.1
date	2001.04.18.16.08.19;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2001.07.04.10.17.57;	author niklas;	state dead;
branches;
next	;


desc
@@


1.7
log
@remove this used to be great console driver; x11 builds w/o it all fine; aaron@@, todd@@, matthieu@@ ok
@
text
@/*	$OpenBSD: vt220keys.c,v 1.6 2000/12/21 16:54:54 aaron Exp $	*/

/*
 *      Trivial program to load VT220 Function keys with strings,
 *      note that the values only get sent when the key is shifted
 *      (shoulda been an option to flip the shift set like the Z19!)
 *
 *      Typing no args gives help, basically pairs of keyname/value
 *      strings.
 *
 *      Author, Author: Barry Shein, Boston University
 * 
 * HISTORY
  {1}   30-Oct-85  Kenneth J. Lester (ken) at ektools

        Added the necessary code to read an initialization file.  This
        should make it easier to used this program.  Also added code
        that will set-up the terminal in vt200 (this saves the user the
        trouble of checking if the set-up is in vt200). 
        
        Restructed  the  main  function  to  use   getopt,  for  argument
        processing.  
        
        Alterated usage function  to include  new "i"  option (init file)
 

 	-hm	minor modifications for pcvt 2.0 release
 	
*/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/*
 *      The default toupper() macro is stupid, will toupper anything
 */

#ifdef toupper
#undef toupper
#endif
#define toupper(c) (islower(c) ? ((c)-' ') : c)

#define VT200_7BIT 1
#define ESC 033
#define INITFILE ".vt220rc"

struct keynames {
  char *name ;
  char *string ;
} keys[] = {
  { "F6", "17" },
  { "F7", "18" },
  { "F8", "19" },
  { "F9", "20" },
  { "F10", "21" },
  { "F11", "23" },
  { "ESC", "23" },
  { "F12", "24" },
  { "BS", "24" },
  { "F13", "25" },
  { "LF", "25" },
  { "F14", "26" },
  { "HELP", "28" },
  { "DO", "29" },
  { "F17", "31" },
  { "F18", "32" },
  { "F19", "33" },
  { "F20", "34" },
  { NULL, NULL }
};

char prog[BUFSIZ];

void usage __P((void));
void clearkeys __P((void));
void getinit __P((void));
void dokey __P((char *, char *));
void lockkeys __P((void));

int main(argc,argv) 
        int argc; 
        char *argv[];
{
        /* these are defined in the getopt routine                       */
        extern char *optarg;    /* argument give to an option            */
        extern int  optind;     /* argv index after option processing    */

        int option;             /* option character returned by getopt   */
        int initf = 0;          /* read initialization file              */
        int lockf = 0;          /* lock keys after loading strings       */
        int clearf = 0;         /* clear all keys before loading strings */
	char *strcpy();

        (void) strncpy(prog, *argv, sizeof(prog)); /* store program name */

        if(argc == 1) usage();  /* program requires options              */

        /* get options */
        while ((option = getopt(argc, argv, "cli")) != -1)
        switch(option) 
        {
                case 'c' :
                        clearf++;
                        break;
                case 'l' :
                        lockf++;
                        break;
                case 'i' :
                        initf++;
                        break;
                case '?' :
                        usage();
          }

        if (VT200_7BIT)
                printf("\033[62;1\"p");    /* vt200 7 bits */
        else
                printf("\033[62;2\"p");    /* vt200 8 bits */

        if(clearf) clearkeys();
        
        if (initf) getinit();

        /* process {key, key string} pairs.  Note optind is index to argv
           for first pair.  By adding 1 to optind insures that a pair exists
           i.e. the last key has a key string.                             */

        while(optind + 1 < argc) 
        {
                dokey(argv[optind], argv[optind+1]);
                optind += 2;
        }

        if(lockf) lockkeys();

        exit(0);
}

/****************************************************************************/

/*
 *      Load the VT220 SHIFT-FNKEY value, the basic pattern is
 *              "\EP1;1|"+KEYNAME+"/"+VAL_AS_HEX+"\E\\"
 *      that is, literally what is in quotes (w/o quotes) then the
 *      name of the key from the keytable above (a numeric string)
 *      then a slash, then the string value as hex pairs then ESC-BACKSLASH
 *
 *      Note: you can gang together key defns with semicolons but that
 *      would complicate things, especially error handling, so do it all
 *      for each pair, who cares, really.
 */

void dokey(nm,val) char *nm, *val;
{
        register char *scr;
        register struct keynames *kp;

        for(scr = nm; (*scr = toupper(*scr)); scr++)
                        ;
        for(kp = keys; kp->name != NULL; kp++)
          if(strcmp(nm,kp->name) == 0) {
            printf("%cP1;1|%s/",ESC,kp->string);
            while(*val) printf("%02x",*val++);
            printf("%c\\",ESC);
            fflush(stdout);
            return;
        }
        fprintf(stderr,"Bad key name: %s\n",nm);
        usage();        /* bad key name, give up */
}

/****************************************************************************/

void clearkeys()
{
        printf("%cP0;1|%c\\",ESC,ESC);
        fflush(stdout);
}

/****************************************************************************/

void lockkeys()
{
        printf("%cP1;0|%c\\",ESC,ESC);
        fflush(stdout);
}

/****************************************************************************/

void usage()
{
        int i;

        fprintf(stderr,"Usage: %s [-cil] [keyname string keyname string...]\n\n",prog);
        fprintf(stderr,"The following options are available\n");
        fprintf(stderr,"\t-c\tclears keys first\n");
        fprintf(stderr,"\t-l\t[sets then] locks further setting\n");
        fprintf(stderr,"\t-i\tfirst read initialization file $HOME/%s\n",INITFILE);
        fprintf(stderr,"(note that the only way to unlock is via Set-Up)\n\n");
        fprintf(stderr,"Keyname is one of:\n\t");
        for(i=0; keys[i].name != NULL; i++)
                fprintf(stderr,"%s ",keys[i].name);
        fprintf(stderr,"\nKeyname is SHIFTED function key that sends the string\n\n");
        fprintf(stderr,"Strings may need quoting to protect from shell\n");
        fprintf(stderr,"You must specify an option or key,string pairs\n\n");
        exit(1);
}

/****************************************************************************/

/* This routine process the INITFILE.  This file expects lines in the format

                <ws> keyname ws string

   Where ws is white space (spaces or tabs) and <ws> is optional white space.
   The string may include spaces or tabs and need not be quoted.  If the 
   string has the sequence of "\n" then a newline character is included in 
   the string.

   examples:

        F6      ls -lg\n
        F7      uulog -s

*/

#include <sys/types.h>
#include <sys/stat.h>

void getinit()
{
        char *home;             /* user's home directory                */
        char path[BUFSIZ];      /* full path name of init file          */
        char buf[BUFSIZ];       /* buffer to hold 1 line from init file */
        char key[BUFSIZ];       /* buffer, to hold specified fcn key    */
        char keystr[BUFSIZ];    /* string associated with fcn key       */
        char *ptr;              /* pointer to transverse buf            */
        int i, j;               /* array indices                        */
        int statflag;           /* whether init file is regular & readable */
        struct stat statbuf;    /* stat of the init file                */
        FILE *fp;               /* file pointer to init file            */

        /* system calls and subroutines */
        FILE *fopen();
        char *strcpy();
        char *strcat();
        char *fgets();
        char *getenv();

        /* construct full path name for init file */
        home = getenv("HOME");
        (void) strncpy(path, home, sizeof(path));
        (void) strncat(path,"/",sizeof(path) - strlen(path));
        (void) strncat(path,INITFILE,sizeof(path) - strlen(path));

        /* check status if init file    */
        if (stat(path, &statbuf) != -1)
        {
            statflag = statbuf.st_mode & S_IFREG && statbuf.st_mode & S_IREAD;
            if (!statflag || (fp = fopen(path, "r")) == NULL)
            {
                fprintf(stderr, "couldn't open initialization file: %s\n",path);
                exit(1);
            }

            /* process lines from init file */
            while (fgets(buf, BUFSIZ, fp) != NULL)
            {
                /* variable initializations */
                i = 0; j = 0;
                key[0] = '\0'; keystr[0] = '\0';
                ptr = buf;

                while (*ptr == ' ' || *ptr == '\t') ptr++; /*skip whitespace*/

		if (*ptr == '\n') break;   /* we hit an emtpy line          */

                while (!isspace(*ptr) && *ptr != '\0')     /* get keyname   */
                    key[i++] = *ptr++;
                key[i] = '\0'; /* place EOS in buffer */

                while (*ptr == ' ' || *ptr == '\t') ptr++; /*skip whitespace*/

                while (*ptr != '\n' && *ptr != '\0')       /* get string    */
                {
                    /* check if string is to include newline i.e. \n        */
                    if (*ptr == '\\' && *(ptr+1) == 'n')
                    {
                          keystr[j] = '\012';
                          ptr++;
                    }
                    else
                          keystr[j] = *ptr;
                    j++; ptr++;
                }
                keystr[j] = '\0';     /* place EOS in buffer  */
                dokey(key, keystr);   /* load key with string */
            }
        }
        else 
        {
            fprintf(stderr, "init file %s not found\n\n", path);
            usage();
        }
}
@


1.6
log
@People have difficulty spelling 'initial' and derivatives thereof (too many
"i's" I guess).
@
text
@d1 1
a1 1
/*	$OpenBSD: vt220keys.c,v 1.5 1999/05/24 15:37:44 aaron Exp $	*/
@


1.5
log
@more buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: vt220keys.c,v 1.4 1999/01/13 07:26:07 niklas Exp $	*/
d264 1
a264 1
                fprintf(stderr, "couldn't open initalization file: %s\n", path);
@


1.5.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: vt220keys.c,v 1.6 2000/12/21 16:54:54 aaron Exp $	*/
d264 1
a264 1
                fprintf(stderr, "couldn't open initialization file: %s\n",path);
@


1.5.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vt220keys.c,v 1.5.4.1 2001/04/18 16:08:19 niklas Exp $	*/
@


1.4
log
@RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d96 1
a96 1
        (void) strcpy(prog, *argv);  /* store program name               */
d254 3
a256 3
        (void) strcpy(path, home);
        (void) strcat(path,"/");
        (void) strcat(path,INITFILE);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 2
@


1.2
log
@-Wall madness.
@
text
@d99 1
a99 1
        while ((option = getopt(argc, argv, "cli")) != EOF)
@


1.1
log
@Initial revision
@
text
@d29 1
d31 2
a32 1
#include <ctype.h>
d51 19
a69 19
  "F6", "17",
  "F7", "18",
  "F8", "19",
  "F9", "20",
  "F10", "21",
  "F11", "23",
  "ESC", "23",
  "F12", "24",
  "BS", "24",
  "F13", "25",
  "LF", "25",
  "F14", "26",
  "HELP", "28",
  "DO", "29",
  "F17", "31",
  "F18", "32",
  "F19", "33",
  "F20", "34",
    NULL, NULL
d74 7
a80 1
main(argc,argv) 
d153 1
a153 1
dokey(nm,val) char *nm, *val;
d158 1
a158 1
        for(scr = nm; *scr = toupper(*scr); scr++)
d174 1
a174 1
clearkeys()
d182 1
a182 1
lockkeys()
d190 1
a190 1
usage()
d230 1
a230 1
getinit()
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
