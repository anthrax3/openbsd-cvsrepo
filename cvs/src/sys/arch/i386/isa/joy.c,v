head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.32
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.30
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.26
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.24
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.22
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.20
	OPENBSD_5_0:1.13.0.18
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.16
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.14
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.10
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.12
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.8
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.6
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.16
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.14
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.12
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.10
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.8
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.6
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.10
	UBC:1.8.0.16
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.14
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.12
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.10
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.6
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.8
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.6
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.15
date	2015.02.10.21.58.16;	author miod;	state Exp;
branches;
next	1.14;
commitid	8W7jyIoa34bQUU1a;

1.14
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.13;
commitid	C5iGb36LQxjM60Q3;

1.13
date	2007.08.01.13.18.18;	author martin;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.19.11.06.34;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.15.20.03.04;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.02.22.49.59;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.01.13.07.26.01;	author niklas;	state Exp;
branches
	1.8.6.1
	1.8.16.1;
next	1.7;

1.7
date	98.06.02.18.46.36;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.05.10.12.46.19;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.04.23.11.56.41;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.16.56;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.03.03.41.52;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.02.26.00.03.07;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	96.01.16.08.25.11;	author deraadt;	state Exp;
branches;
next	;

1.8.6.1
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	1.8.6.2;

1.8.6.2
date	2003.03.27.23.26.55;	author niklas;	state Exp;
branches;
next	;

1.8.16.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Switch uiomovei(..., sizeof whatever, ...) to uiomove().
@
text
@/*	$OpenBSD: joy.c,v 1.14 2015/02/10 21:56:09 miod Exp $	*/
/*	$NetBSD: joy.c,v 1.3 1996/05/05 19:46:15 christos Exp $	*/

/*-
 * Copyright (c) 1995 Jean-Marc Zucconi
 * All rights reserved.
 *
 * Ported to NetBSD by Matthieu Herrb <matthieu@@laas.fr>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 *    in this position and unchanged.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/errno.h>

#include <machine/cpu.h>
#include <machine/pio.h>
#include <machine/cpufunc.h>
#include <machine/joystick.h>
#include <machine/conf.h>

#include <dev/isa/isavar.h>
#include <dev/isa/isareg.h>
#include <dev/ic/i8253reg.h>
#include <i386/isa/joyreg.h>

static int	joy_get_tick(void);

struct cfdriver joy_cd = {
	NULL, "joy", DV_DULL
};

int
joyopen(dev_t dev, int flag, int mode, struct proc *p)
{
	int unit = JOYUNIT(dev);
	int i = JOYPART(dev);
	struct joy_softc *sc;

	if (unit >= joy_cd.cd_ndevs)
		return (ENXIO);

	sc = joy_cd.cd_devs[unit];
	if (sc == NULL)
		return (ENXIO);

	if (sc->timeout[i])
		return EBUSY;

	sc->x_off[i] = sc->y_off[i] = 0;
	sc->timeout[i] = JOY_TIMEOUT;
	return 0;
}

int
joyclose(dev_t dev, int flag, int mode, struct proc *p)
{
	int unit = JOYUNIT(dev);
	int i = JOYPART(dev);
	struct joy_softc *sc = joy_cd.cd_devs[unit];

	sc->timeout[i] = 0;
	return 0;
}

int
joyread(dev_t dev, struct uio *uio, int flag)
{
	int unit = JOYUNIT(dev);
	struct joy_softc *sc = joy_cd.cd_devs[unit];
	struct joystick c;
	int port = sc->port;
	int i, t0, t1;
	int state = 0, x = 0, y = 0;

	disable_intr();
	outb(port, 0xff);
	t0 = joy_get_tick();
	t1 = t0;
	i = USEC2TICKS(sc->timeout[JOYPART(dev)]);
	while (t0 - t1 < i) {
		state = inb(port);
		if (JOYPART(dev) == 1)
			state >>= 2;
		t1 = joy_get_tick();
		if (t1 > t0)
			t1 -= TIMER_FREQ / hz;
		if (!x && !(state & 0x01))
			x = t1;
		if (!y && !(state & 0x02))
			y = t1;
		if (x && y)
			break;
	}
	enable_intr();
	c.x = x ? sc->x_off[JOYPART(dev)] + TICKS2USEC(t0 - x) : 0x80000000;
	c.y = y ? sc->y_off[JOYPART(dev)] + TICKS2USEC(t0 - y) : 0x80000000;
	state >>= 4;
	c.b1 = ~state & 1;
	c.b2 = ~(state >> 1) & 1;
	return uiomove((caddr_t) & c, sizeof(struct joystick), uio);
}

int
joyioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	int unit = JOYUNIT(dev);
	struct joy_softc *sc = joy_cd.cd_devs[unit];
	int i = JOYPART(dev);
	int x;

	switch (cmd) {
	case JOY_SETTIMEOUT:
		x = *(int *) data;
		if (x < 1 || x > 10000)	/* 10ms maximum! */
			return EINVAL;
		sc->timeout[i] = x;
		break;
	case JOY_GETTIMEOUT:
		*(int *) data = sc->timeout[i];
		break;
	case JOY_SET_X_OFFSET:
		sc->x_off[i] = *(int *) data;
		break;
	case JOY_SET_Y_OFFSET:
		sc->y_off[i] = *(int *) data;
		break;
	case JOY_GET_X_OFFSET:
		*(int *) data = sc->x_off[i];
		break;
	case JOY_GET_Y_OFFSET:
		*(int *) data = sc->y_off[i];
		break;
	default:
		return ENXIO;
	}
	return 0;
}

static int
joy_get_tick(void)
{
	int low, high;

	outb(IO_TIMER1 + TIMER_MODE, TIMER_SEL0);
	low = inb(IO_TIMER1 + TIMER_CNTR0);
	high = inb(IO_TIMER1 + TIMER_CNTR0);

	return (high << 8) | low;
}
@


1.14
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.13 2007/08/01 13:18:18 martin Exp $	*/
d126 1
a126 1
	return uiomovei((caddr_t) & c, sizeof(struct joystick), uio);
@


1.13
log
@switch i386 to use the MI i8253 header file and remove the now obsolete MD
timerreg.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.12 2006/09/19 11:06:34 jsg Exp $	*/
d126 1
a126 1
	return uiomove((caddr_t) & c, sizeof(struct joystick), uio);
@


1.12
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.11 2006/03/15 20:03:04 miod Exp $	*/
d49 1
a49 1
#include <i386/isa/timerreg.h>
d170 3
a172 3
	outb(TIMER_MODE, TIMER_SEL0);
	low = inb(TIMER_CNTR0);
	high = inb(TIMER_CNTR0);
@


1.11
log
@Entries in cd_devs[] may be NULL, so be sure to check for them in your
device open() function.
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.10 2002/06/02 22:49:59 deraadt Exp $	*/
d59 1
a59 4
joyopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d81 1
a81 4
joyclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d92 1
a92 4
joyread(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
d130 1
a130 6
joyioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d166 1
a166 1
joy_get_tick()
@


1.10
log
@withough -> without
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.9 2002/03/14 01:26:33 millert Exp $	*/
d72 2
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.8 1999/01/13 07:26:01 niklas Exp $	*/
d20 1
a20 1
 *    derived from this software withough specific prior written permission
@


1.8
log
@RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.3 1996/05/05 19:46:15 christos Exp $	*/
d52 1
a52 1
static int	joy_get_tick __P((void));
@


1.8.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: joy.c,v 1.8 1999/01/13 07:26:01 niklas Exp $	*/
d20 1
a20 1
 *    derived from this software without specific prior written permission
d52 1
a52 1
static int	joy_get_tick(void);
@


1.8.6.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
static int	joy_get_tick(void);
@


1.8.6.2
log
@Sync the SMP branch with 3.3
@
text
@d20 1
a20 1
 *    derived from this software without specific prior written permission
@


1.7
log
@untested isapnp joystick driver
@
text
@d1 1
@


1.6
log
@simple cleanup
@
text
@d49 1
d51 1
a51 44

/*
 * The game port can manage 4 buttons and 4 variable resistors (usually 2
 * joysticks, each with 2 buttons and 2 pots.) via the port at address 0x201.
 * Getting the state of the buttons is done by reading the game port;
 * buttons 1-4 correspond to bits 4-7 and resistors 1-4 (X1, Y1, X2, Y2)
 * to bits 0-3.  If button 1 (resp 2, 3, 4) is pressed, the bit 4 (resp 5,
 * 6, 7) is set to 0 to get the value of a resistor, write the value 0xff
 * at port and wait until the corresponding bit returns to 0.
 */

/*
 * The formulae below only work if u is ``not too large''.  See also
 * the discussion in microtime.s
 */
#define USEC2TICKS(u) 	(((u) * 19549) >> 14)
#define TICKS2USEC(u) 	(((u) * 3433) >> 12)


#define JOYPART(d) (minor(d) & 1)
#define JOYUNIT(d) minor(d) >> 1 & 3

#ifndef JOY_TIMEOUT
#define JOY_TIMEOUT   2000	/* 2 milliseconds */
#endif

#define JOY_NPORTS    1

struct joy_softc {
	struct	device sc_dev;
	int	port;
	int	x_off[2], y_off[2];
	int	timeout[2];
};

int		joyprobe __P((struct device *, void *, void *));
void		joyattach __P((struct device *, struct device *, void *));
int		joyopen __P((dev_t, int, int, struct proc *));
int		joyclose __P((dev_t, int, int, struct proc *));
static int	get_tick __P((void));

struct cfattach joy_ca = {
	sizeof(struct joy_softc), joyprobe, joyattach
};
a56 37

int
joyprobe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct isa_attach_args *ia = aux;
#ifdef WANT_JOYSTICK_CONNECTED
	int iobase = ia->ia_iobase;

	outb(iobase, 0xff);
	DELAY(10000);		/* 10 ms delay */
	return (inb(iobase) & 0x0f) != 0x0f;
#else
	ia->ia_iosize = JOY_NPORTS;
	ia->ia_msize = 0;
	return 1;
#endif
}

void
joyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct joy_softc *sc = (void *) self;
	struct isa_attach_args *ia = aux;
	int iobase = ia->ia_iobase;

	sc->port = iobase;
	sc->timeout[0] = sc->timeout[1] = 0;
	outb(iobase, 0xff);
	DELAY(10000);		/* 10 ms delay */
	printf(": joystick%sconnected\n",
	    (inb(iobase) & 0x0f) == 0x0f ? " not " : " ");
}

d109 1
a109 1
	t0 = get_tick();
d116 1
a116 1
		t1 = get_tick();
d177 1
a177 1
get_tick()
@


1.5
log
@fix last sync (that was because of rcs bug, at least theo said so ;)
@
text
@d1 1
a1 1
/*	$NetBSD: joy.c,v 1.2 1996/04/01 06:39:17 scottr Exp $	*/
d44 1
d69 1
a69 1
#define JOYPART(d) minor(d) & 1
d106 1
a108 1
#ifdef WANT_JOYSTICK_CONNECTED
a125 1
	int unit = sc->sc_dev.dv_unit;
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@a265 251
/*-
 * Copyright (c) 1995 Jean-Marc Zucconi
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 *    in this position and unchanged.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software withough specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <errno.h>

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>

#include <machine/cpu.h>
#include <machine/pio.h>
#include <machine/cpufunc.h>

#include <machine/joystick.h>

#include <dev/isa/isavar.h>
#include <dev/isa/isareg.h>
#include <i386/isa/timerreg.h>

/* The game port can manage 4 buttons and 4 variable resistors (usually 2
 * joysticks, each with 2 buttons and 2 pots.) via the port at address 0x201.
 * Getting the state of the buttons is done by reading the game port:
 * buttons 1-4 correspond to bits 4-7 and resistors 1-4 (X1, Y1, X2, Y2)
 * to bits 0-3.
 * if button 1 (resp 2, 3, 4) is pressed, the bit 4 (resp 5, 6, 7) is set to 0
 * to get the value of a resistor, write the value 0xff at port and
 * wait until the corresponding bit returns to 0.
 */


/* the formulae below only work if u is  ``not too large''. See also
 * the discussion in microtime.s */
#define usec2ticks(u) 	(((u) * 19549)>>14)
#define ticks2usec(u) 	(((u) * 3433)>>12)


#define joypart(d) minor(d)&1
#define JOYUNIT(d) minor(d)>>1&3

#ifndef JOY_TIMEOUT
#define JOY_TIMEOUT   2000	/* 2 milliseconds */
#endif

struct joy_softc {
	struct device sc_dev;
	int     port;
	int     x_off[2], y_off[2];
	int     timeout[2];
};


int joyprobe __P((struct device *, void *, void *));
void joyattach __P((struct device *, struct device *, void *));
int joyopen __P((dev_t, int, int, struct proc *));
int joyclose __P((dev_t, int, int, struct proc *));
static int get_tick __P((void));

struct cfdriver joycd = {
	NULL, "joy", joyprobe, joyattach, DV_DULL, sizeof(struct joy_softc)
};


int
joyprobe(parent, match, aux)
	struct device *parent;
	void   *match, *aux;

{
	struct isa_attach_args *ia = aux;

	ia->ia_iosize = 1;
#ifdef WANT_JOYSTICK_CONNECTED
	outb(ia->ia_iobase, 0xff);
	DELAY(10000);		/* 10 ms delay */
	return (inb(ia->ia_iobase) & 0x0f) != 0x0f;
#else
	return 1;
#endif
}

void
joyattach(parent, self, aux)
	struct device *parent, *self;
	void   *aux;
{
	struct joy_softc *sc = (void *) self;
	struct isa_attach_args *ia = aux;
	int     unit = sc->sc_dev.dv_unit;

	sc->port = ia->ia_iobase;
	sc->timeout[0] = sc->timeout[1] = 0;
	printf(": joystick\n", unit);
}

int
joyopen(dev, flag, mode, p)
	dev_t   dev;
	int     flag, mode;
	struct proc *p;
{
	int     unit = JOYUNIT(dev);
	int     i = joypart(dev);
	struct joy_softc *sc;

	if (unit >= joycd.cd_ndevs) {
		return (ENXIO);
	}
	sc = joycd.cd_devs[unit];

	if (sc->timeout[i]) {
		return EBUSY;
	}
	sc->x_off[i] = sc->y_off[i] = 0;
	sc->timeout[i] = JOY_TIMEOUT;
	return 0;
}

int
joyclose(dev, flag, mode, p)
	dev_t   dev;
	int     flag, mode;
	struct proc *p;
{
	int     unit = JOYUNIT(dev);
	int     i = joypart(dev);
	struct joy_softc *sc = joycd.cd_devs[unit];

	sc->timeout[i] = 0;
	return 0;
}

int
joyread(dev, uio, flag)
	dev_t   dev;
	struct uio *uio;
	int     flag;
{
	int     unit = JOYUNIT(dev);
	struct joy_softc *sc = joycd.cd_devs[unit];
	int     port = sc->port;
	int     i, t0, t1;
	int     state = 0, x = 0, y = 0;
	struct joystick c;

	disable_intr();
	outb(port, 0xff);
	t0 = get_tick();
	t1 = t0;
	i = usec2ticks(sc->timeout[joypart(dev)]);
	while (t0 - t1 < i) {
		state = inb(port);
		if (joypart(dev) == 1)
			state >>= 2;
		t1 = get_tick();
		if (t1 > t0)
			t1 -= TIMER_FREQ / hz;
		if (!x && !(state & 0x01))
			x = t1;
		if (!y && !(state & 0x02))
			y = t1;
		if (x && y)
			break;
	}
	enable_intr();
	c.x = x ? sc->x_off[joypart(dev)] + ticks2usec(t0 - x) : 0x80000000;
	c.y = y ? sc->y_off[joypart(dev)] + ticks2usec(t0 - y) : 0x80000000;
	state >>= 4;
	c.b1 = ~state & 1;
	c.b2 = ~(state >> 1) & 1;
	return uiomove((caddr_t) & c, sizeof(struct joystick), uio);
}

int
joyioctl(dev, cmd, data, flag, p)
	dev_t   dev;
	u_long  cmd;
	caddr_t data;
	int     flag;
	struct proc *p;
{
	int     unit = JOYUNIT(dev);
	int     i = joypart(dev);
	struct joy_softc *sc = joycd.cd_devs[unit];
	int     x;

	switch (cmd) {
	case JOY_SETTIMEOUT:
		x = *(int *) data;
		if (x < 1 || x > 10000)	/* 10ms maximum! */
			return EINVAL;
		sc->timeout[i] = x;
		break;
	case JOY_GETTIMEOUT:
		*(int *) data = sc->timeout[i];
		break;
	case JOY_SET_X_OFFSET:
		sc->x_off[i] = *(int *) data;
		break;
	case JOY_SET_Y_OFFSET:
		sc->y_off[i] = *(int *) data;
		break;
	case JOY_GET_X_OFFSET:
		*(int *) data = sc->x_off[i];
		break;
	case JOY_GET_Y_OFFSET:
		*(int *) data = sc->y_off[i];
		break;
	default:
		return ENXIO;
	}
	return 0;
}

static int
get_tick()
{
	int     low, high;

	outb(TIMER_MODE, TIMER_SEL0);
	low = inb(TIMER_CNTR0);
	high = inb(TIMER_CNTR0);

	return (high << 8) | low;
}
@


1.3
log
@Make last change actually compile
@
text
@d1 265
@


1.2
log
@Specify the size used in the I/O map (1 entry) during probe
@
text
@d96 3
a98 1
	dev->id_iosize = 1;
d100 1
a100 1
	outb(dev->id_iobase, 0xff);
d102 1
a102 1
	return (inb(dev->id_iobase) & 0x0f) != 0x0f;
@


1.1
log
@add the freebsd joystick driver; converted by matthieu@@abel.laas.fr;
netbsd pr#1916
@
text
@d96 1
@
