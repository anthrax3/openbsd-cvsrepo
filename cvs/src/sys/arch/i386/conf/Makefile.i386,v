head	1.110;
access;
symbols
	OPENBSD_6_1:1.102.0.4
	OPENBSD_6_1_BASE:1.102
	OPENBSD_6_0:1.94.0.2
	OPENBSD_6_0_BASE:1.94
	OPENBSD_5_9:1.93.0.2
	OPENBSD_5_9_BASE:1.93
	OPENBSD_5_8:1.92.0.6
	OPENBSD_5_8_BASE:1.92
	OPENBSD_5_7:1.92.0.2
	OPENBSD_5_7_BASE:1.92
	OPENBSD_5_6:1.89.0.4
	OPENBSD_5_6_BASE:1.89
	OPENBSD_5_5:1.88.0.4
	OPENBSD_5_5_BASE:1.88
	OPENBSD_5_4:1.87.0.2
	OPENBSD_5_4_BASE:1.87
	OPENBSD_5_3:1.85.0.2
	OPENBSD_5_3_BASE:1.85
	OPENBSD_5_2:1.83.0.4
	OPENBSD_5_2_BASE:1.83
	OPENBSD_5_1_BASE:1.83
	OPENBSD_5_1:1.83.0.2
	OPENBSD_5_0:1.82.0.2
	OPENBSD_5_0_BASE:1.82
	OPENBSD_4_9:1.79.0.2
	OPENBSD_4_9_BASE:1.79
	OPENBSD_4_8:1.76.0.2
	OPENBSD_4_8_BASE:1.76
	OPENBSD_4_7:1.54.0.2
	OPENBSD_4_7_BASE:1.54
	OPENBSD_4_6:1.51.0.6
	OPENBSD_4_6_BASE:1.51
	OPENBSD_4_5:1.51.0.2
	OPENBSD_4_5_BASE:1.51
	OPENBSD_4_4:1.50.0.4
	OPENBSD_4_4_BASE:1.50
	OPENBSD_4_3:1.50.0.2
	OPENBSD_4_3_BASE:1.50
	OPENBSD_4_2:1.47.0.2
	OPENBSD_4_2_BASE:1.47
	OPENBSD_4_1:1.45.0.2
	OPENBSD_4_1_BASE:1.45
	OPENBSD_4_0:1.44.0.2
	OPENBSD_4_0_BASE:1.44
	OPENBSD_3_9:1.41.0.6
	OPENBSD_3_9_BASE:1.41
	OPENBSD_3_8:1.41.0.4
	OPENBSD_3_8_BASE:1.41
	OPENBSD_3_7:1.41.0.2
	OPENBSD_3_7_BASE:1.41
	OPENBSD_3_6:1.40.0.2
	OPENBSD_3_6_BASE:1.40
	SMP_SYNC_A:1.40
	SMP_SYNC_B:1.40
	OPENBSD_3_5:1.39.0.2
	OPENBSD_3_5_BASE:1.39
	OPENBSD_3_4:1.38.0.2
	OPENBSD_3_4_BASE:1.38
	UBC_SYNC_A:1.36
	OPENBSD_3_3:1.33.0.2
	OPENBSD_3_3_BASE:1.33
	OPENBSD_3_2:1.31.0.2
	OPENBSD_3_2_BASE:1.31
	OPENBSD_3_1:1.28.0.2
	OPENBSD_3_1_BASE:1.28
	UBC_SYNC_B:1.31
	UBC:1.27.0.4
	UBC_BASE:1.27
	OPENBSD_3_0:1.27.0.2
	OPENBSD_3_0_BASE:1.27
	OPENBSD_2_9:1.26.0.2
	OPENBSD_2_9_BASE:1.26
	OPENBSD_2_8:1.25.0.2
	OPENBSD_2_8_BASE:1.25
	OPENBSD_2_7:1.24.0.6
	OPENBSD_2_7_BASE:1.24
	SMP:1.24.0.4
	SMP_BASE:1.24
	kame_19991208:1.24
	OPENBSD_2_6:1.24.0.2
	OPENBSD_2_6_BASE:1.24
	OPENBSD_2_5:1.23.0.4
	OPENBSD_2_5_BASE:1.23
	OPENBSD_2_4:1.23.0.2
	OPENBSD_2_4_BASE:1.23
	OPENBSD_2_3:1.22.0.2
	OPENBSD_2_3_BASE:1.22
	OPENBSD_2_2:1.21.0.2
	OPENBSD_2_2_BASE:1.21
	OPENBSD_2_1:1.18.0.2
	OPENBSD_2_1_BASE:1.18
	OPENBSD_2_0:1.14.0.2
	OPENBSD_2_0_BASE:1.14
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.110
date	2017.06.13.16.40.01;	author deraadt;	state Exp;
branches;
next	1.109;
commitid	IBnCjqwIAePNl11k;

1.109
date	2017.06.11.22.51.21;	author deraadt;	state Exp;
branches;
next	1.108;
commitid	aJQfgtCEBEOL2P4T;

1.108
date	2017.06.11.20.50.32;	author bluhm;	state Exp;
branches;
next	1.107;
commitid	UEZLHpDQ2LYKTb3D;

1.107
date	2017.06.05.12.43.59;	author deraadt;	state Exp;
branches;
next	1.106;
commitid	wfRVAv0JN8rqN4EA;

1.106
date	2017.06.04.17.03.39;	author tb;	state Exp;
branches;
next	1.105;
commitid	w2DLfnTBmLxpUmMv;

1.105
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.104;
commitid	SGp9KIY6OZAZGoKD;

1.104
date	2017.05.31.19.18.18;	author deraadt;	state Exp;
branches;
next	1.103;
commitid	HlDgymhwBU2bW7Tm;

1.103
date	2017.05.28.13.20.37;	author jsg;	state Exp;
branches;
next	1.102;
commitid	TlTB4PZWxTVv7J7o;

1.102
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.101;
commitid	yUJbDchhkVm6F1HA;

1.101
date	2016.11.15.09.08.37;	author natano;	state Exp;
branches;
next	1.100;
commitid	uQeojuKIzgIWOEnv;

1.100
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.99;
commitid	eR4vLZnymgQjVxbj;

1.99
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.98;
commitid	84F8eQ949AbxN83e;

1.98
date	2016.10.21.06.20.58;	author mlarkin;	state Exp;
branches;
next	1.97;
commitid	szRuKZ9HgqvwYLcM;

1.97
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.96;
commitid	TtDw6IYffbT8oPEE;

1.96
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.95;
commitid	dUZQxi6w3YqAb6KQ;

1.95
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.94;
commitid	N8Z5nlTJHj3pmauV;

1.94
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.93;
commitid	Vbd8R29nZBKG6KtM;

1.93
date	2015.08.12.06.19.25;	author mlarkin;	state Exp;
branches;
next	1.92;
commitid	laQtIfN3a82NKYjy;

1.92
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.91;
commitid	xEYSgcMiEU7N21VE;

1.91
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.90;
commitid	Jqptj5xcqx8IMSNU;

1.90
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.89;
commitid	iaz4yUwbbR9oynrV;

1.89
date	2014.05.08.17.59.28;	author sf;	state Exp;
branches;
next	1.88;

1.88
date	2013.10.15.19.23.27;	author guenther;	state Exp;
branches;
next	1.87;

1.87
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.86;

1.86
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.85;

1.85
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.84;

1.84
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.83;

1.83
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.82;

1.82
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.81;

1.81
date	2011.07.06.02.08.04;	author tedu;	state Exp;
branches;
next	1.80;

1.80
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.79;

1.79
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.78;

1.78
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.77;

1.77
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.76;

1.76
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches
	1.76.2.1;
next	1.75;

1.75
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.74;

1.74
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.73;

1.73
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.72;

1.72
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.71;

1.71
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.70;

1.70
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.69;

1.69
date	2010.05.24.17.43.33;	author deraadt;	state Exp;
branches;
next	1.68;

1.68
date	2010.05.24.14.59.15;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2010.05.23.15.32.50;	author deraadt;	state Exp;
branches;
next	1.66;

1.66
date	2010.04.28.21.54.55;	author kettenis;	state Exp;
branches;
next	1.65;

1.65
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.64;

1.64
date	2010.04.27.16.50.15;	author jsg;	state Exp;
branches;
next	1.63;

1.63
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.62;

1.62
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2010.04.27.04.31.46;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2010.04.26.22.21.14;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.53;

1.53
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.52;

1.52
date	2009.07.10.13.51.47;	author jsg;	state Exp;
branches;
next	1.51;

1.51
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.50;

1.50
date	2007.11.28.18.25.10;	author tedu;	state Exp;
branches;
next	1.49;

1.49
date	2007.11.25.18.25.28;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.46;

1.46
date	2007.05.29.18.18.19;	author tom;	state Exp;
branches;
next	1.45;

1.45
date	2006.11.29.22.40.11;	author miod;	state Exp;
branches;
next	1.44;

1.44
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2006.06.01.21.46.27;	author pascoe;	state Exp;
branches;
next	1.42;

1.42
date	2006.03.14.09.02.29;	author mickey;	state Exp;
branches;
next	1.41;

1.41
date	2004.11.19.06.41.13;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2004.05.11.04.01.00;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2003.11.20.08.38.52;	author espie;	state Exp;
branches;
next	1.38;

1.38
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.37;

1.37
date	2003.05.23.22.16.16;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2003.05.13.22.45.10;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2003.05.13.06.12.43;	author tedu;	state Exp;
branches;
next	1.34;

1.34
date	2003.04.17.03.42.09;	author drahn;	state Exp;
branches;
next	1.33;

1.33
date	2002.12.25.21.10.26;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2002.12.02.09.00.23;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2002.08.09.20.24.43;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2002.06.26.08.42.39;	author art;	state Exp;
branches;
next	1.29;

1.29
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2001.12.24.23.12.14;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2001.07.15.13.10.48;	author assar;	state Exp;
branches
	1.27.4.1;
next	1.26;

1.26
date	2001.04.22.19.20.35;	author gluk;	state Exp;
branches;
next	1.25;

1.25
date	2000.06.20.15.33.07;	author art;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	99.09.17.16.52.05;	author deraadt;	state Exp;
branches
	1.24.4.1;
next	1.23;

1.23
date	98.08.10.22.08.27;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	98.03.03.22.34.56;	author niklas;	state Exp;
branches;
next	1.21;

1.21
date	97.09.21.04.27.33;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	97.09.15.02.40.29;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	97.05.29.00.43.19;	author niklas;	state Exp;
branches;
next	1.18;

1.18
date	97.03.29.07.12.04;	author tholo;	state Exp;
branches;
next	1.17;

1.17
date	97.02.24.03.27.38;	author downsj;	state Exp;
branches;
next	1.16;

1.16
date	96.10.25.11.14.10;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	96.10.17.21.47.11;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	96.06.24.17.07.34;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	96.05.27.08.04.52;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.05.10.12.19.12;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	96.05.10.12.13.19;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	96.05.07.12.21.36;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	96.04.29.14.12.10;	author hvozda;	state Exp;
branches;
next	1.8;

1.8
date	96.04.24.12.05.17;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.04.24.10.50.54;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.04.18.18.55.36;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.03.26.15.09.43;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.03.19.21.09.09;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.02.18.11.21.19;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.10.22.07.14.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.31;	author deraadt;	state Exp;
branches;
next	;

1.24.4.1
date	2001.04.18.16.07.04;	author niklas;	state Exp;
branches;
next	1.24.4.2;

1.24.4.2
date	2001.07.04.10.16.23;	author niklas;	state Exp;
branches;
next	1.24.4.3;

1.24.4.3
date	2001.10.31.03.01.11;	author nate;	state Exp;
branches;
next	1.24.4.4;

1.24.4.4
date	2002.03.06.01.01.00;	author niklas;	state Exp;
branches;
next	1.24.4.5;

1.24.4.5
date	2003.03.27.23.26.55;	author niklas;	state Exp;
branches;
next	1.24.4.6;

1.24.4.6
date	2003.05.13.19.42.07;	author ho;	state Exp;
branches;
next	1.24.4.7;

1.24.4.7
date	2003.05.16.00.29.38;	author niklas;	state Exp;
branches;
next	1.24.4.8;

1.24.4.8
date	2003.06.07.11.11.36;	author ho;	state Exp;
branches;
next	1.24.4.9;

1.24.4.9
date	2004.02.19.10.48.41;	author niklas;	state Exp;
branches;
next	1.24.4.10;

1.24.4.10
date	2004.06.05.23.08.59;	author niklas;	state Exp;
branches;
next	;

1.25.2.1
date	2001.06.08.22.46.24;	author miod;	state Exp;
branches;
next	;

1.27.4.1
date	2002.01.31.22.55.10;	author niklas;	state Exp;
branches;
next	1.27.4.2;

1.27.4.2
date	2002.10.29.00.28.03;	author art;	state Exp;
branches;
next	1.27.4.3;

1.27.4.3
date	2003.05.19.21.45.11;	author tedu;	state Exp;
branches;
next	;

1.76.2.1
date	2011.03.29.17.22.27;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.110
log
@newbsd: target which re-links a kernel.  We cannot use the bsd: target
since it has source dependencies, and relinking doesn't have any.  Also
the bsd: target is created by config(8)...
worked on with rpe.
@
text
@#	$OpenBSD: Makefile.i386,v 1.109 2017/06/11 22:51:21 deraadt Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
 .if ${IDENT:M-DSMALL_KERNEL}
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ld.script -X --warn-common -nopie

.if ${MACHINE} == "amd64"
CFLAGS+=	-m32
AFLAGS+=	-m32
LINKFLAGS+= -melf_i386_obsd
.endif

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ld.script
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

newbsd:
	${SYSTEM_LD_HEAD}
	${SYSTEM_LD} swapgeneric.o
	${SYSTEM_LD_TAIL}
	mv -f newbsd bsd

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

ld.script: ${_machdir}/conf/ld.script
	cp ${_machdir}/conf/ld.script $@@

vers.o: ${SYSTEM_DEP:Ngap.o} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

gap.S:	${SYSTEM_SWAP_DEP} Makefile
	umask 007; sh $S/conf/makegap.sh 0xcc > gap.S

gap.o:	gap.S
	umask 007; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
	    gap.S lorder param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore0.o: ${_machdir}/${_mach}/locore0.S assym.h
locore.o mutex.o in_cksum.o mptramp.o: assym.h
kvm86call.o acpi_wakecode.o vmm_support.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	umask 077; cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.109
log
@make vers.o not depend on gap.o using a trick, because it is piece of
fiction participating only in the linkphase.
tricks from rpe and espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.108 2017/06/11 20:50:32 bluhm Exp $
d99 6
@


1.108
log
@Use umask 077 instead of cp -p when installing the kernel as root.
Otherwise owner of /bsd could be the build user with permissions
inherited from the compile directory.
OK deraadt@@ tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.107 2017/06/05 12:43:59 deraadt Exp $
d128 1
a128 1
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.107
log
@The arm* architectures edit the ld.script, creating a copy in the compile
directories.  Copy it in the same way on other architectures, for the same
effect.  Something upcoming will want that file there anyways.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.106 2017/06/04 17:03:39 tb Exp $
d163 1
a163 1
	cp -p bsd /nbsd
@


1.106
log
@Create gap.* with umask 007 instead of 077 to make kernel builds after
make release work without prior cleanup.

discussed with deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.105 2017/06/03 22:21:33 deraadt Exp $
d44 1
a44 2
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-T ${LDSCRIPT} -X --warn-common -nopie
d80 1
a80 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
d124 3
@


1.105
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.104 2017/05/31 19:18:18 deraadt Exp $
d131 1
a131 1
	umask 077; sh $S/conf/makegap.sh 0xcc > gap.S
d134 1
a134 1
	umask 077; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S
@


1.104
log
@Split early startup code out of locore.S into locore0.S.  Adjust link
run so that this locore0.o is always at the start of the executable.
But randomize the link order of all other .o files in the kernel, so
that their exec/rodata/data/bss segments land all over the place.
Late during kernel boot, unmap the early startup code.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.  The only known offsets are in the startup code,
which has been unmapped.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.

ok kettenis mlarkin visa, also thanks to tedu for getting me back to this
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.103 2017/05/28 13:20:37 jsg Exp $
d84 1
d87 1
a87 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d91 1
a91 1
SYSTEM_LD_TAIL+=; \
d131 1
a131 1
	sh $S/conf/makegap.sh 0xcc > gap.S
d134 1
a134 1
	${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S
d161 1
a161 1
	cp bsd /nbsd
@


1.103
log
@Build i386 kernels with -ffreestanding, matching amd64 and various
other platforms.

ok visa@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.102 2016/11/29 09:08:34 mpi Exp $
d32 1
d36 3
d79 2
a80 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d84 2
a85 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d129 6
d136 2
a137 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d149 3
a151 2
locore.o: ${_machdir}/${_mach}/locore.s assym.h
in_cksum.o mptramp.o kvm86call.o acpi_wakecode.o vmm_support.o: assym.h
@


1.102
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.101 2016/11/15 09:08:37 natano Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d31 1
a31 3
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.101
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.100 2016/10/27 20:44:20 natano Exp $
d38 1
a84 1
DEBUG?=
@


1.100
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.99 2016/10/24 18:26:17 deraadt Exp $
d126 2
a127 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d132 1
a132 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.99
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.98 2016/10/21 06:20:58 mlarkin Exp $
d127 1
a127 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.98
log
@
vmm(4) for i386. Userland changes forthcoming. Note that for the time being,
i386 hosts are limited to running only i386 guests, even if the underlying
hardware supports amd64. This is a restriction I hope to lift moving forward,
but for now please don't report problems running amd64 guests on i386 hosts.

This was a straightforward port of the in-tree amd64 code plus the old rotted
tree I had from last year for i386 support. Changes included converting 64-bit
VMREAD/VMWRITE ops to 2x32-bit ops, and fixing treatment of the TSS, which
differs on i386.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.97 2016/10/15 13:45:08 deraadt Exp $
d131 1
a131 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.97
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.96 2016/10/14 18:43:01 deraadt Exp $
d152 1
a152 1
in_cksum.o mptramp.o kvm86call.o acpi_wakecode.o: assym.h
@


1.96
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.95 2016/09/24 19:13:03 kettenis Exp $
d128 4
a131 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.95
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.94 2016/04/29 12:44:52 mpi Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d134 2
@


1.94
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.93 2015/08/12 06:19:25 mlarkin Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized \
@


1.93
log
@
Use a linker script when building i386 kernels to allow section padding on
PAGE_SIZE boundaries. This is required to enforce proper separation of
sections when adding page protections (coming shortly).

This was in snaps before release with no reported side effects.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.92 2015/01/13 01:12:49 deraadt Exp $
d86 1
a86 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d92 1
a92 1
LINKFLAGS+=	-S -x
@


1.92
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.91 2015/01/11 19:25:13 tedu Exp $
d41 2
a42 1
LINKFLAGS=	-Ttext 0xD0200120 -e start -N --warn-common -nopie
d78 1
a78 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.91
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.90 2014/10/04 18:10:14 brad Exp $
d155 1
a155 2
	rm -f /obsd
	ln /bsd /obsd
@


1.90
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.89 2014/05/08 17:59:28 sf Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.89
log
@Enable -Wno-format in the kernel on i386 & amd64

ok jsg@@
"go for it" kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.88 2013/10/15 19:23:27 guenther Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.88
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.87 2013/06/23 20:33:51 miod Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.87
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.86 2013/03/30 07:25:20 tedu Exp $
d141 1
a141 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d143 1
a143 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.86
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.85 2012/08/28 21:03:32 pascal Exp $
d40 1
a40 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CMACHFLAGS}
@


1.85
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.84 2012/08/22 16:58:26 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.84
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.83 2011/11/08 18:41:34 matthieu Exp $
d41 1
a41 1
LINKFLAGS=	-Ttext 0xD0200120 -e start -N --warn-common
@


1.83
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.82 2011/07/07 22:28:18 guenther Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.82
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.81 2011/07/06 02:08:04 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.81
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.80 2011/04/15 02:41:28 guenther Exp $
d167 5
a171 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.80
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.79 2010/12/30 18:49:31 deraadt Exp $
d128 1
a128 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.79
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.78 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL
d77 2
a78 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d98 5
d106 2
a107 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d136 3
a141 14
AFILES=	${_machdir}/${_mach}/locore.s
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d143 1
a143 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d160 12
@


1.78
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.77 2010/12/02 04:35:02 deraadt Exp $
d100 2
a101 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.77
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.76 2010/06/01 23:49:22 deraadt Exp $
d76 2
a77 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d79 2
a80 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.76
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.75 2010/05/28 14:27:08 guenther Exp $
d76 1
a76 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d79 2
a80 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.76.2.1
log
@MFC, fixing failures during savecore (in the boot process) on some systems.
Spotted by Mitja Muzenic and deraadt@@ on various Dells. ok deraadt@@

---
revision 1.78
date: 2010/12/02 20:57:08;  author: deraadt;  state: Exp;  lines: +5 -5
After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
---
revision 1.77
date: 2010/12/02 04:35:02;  author: deraadt;  state: Exp;  lines: +4 -4
move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
---
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.78 2010/12/02 20:57:08 deraadt Exp $
d76 2
a77 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d79 2
a80 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
@


1.75
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.74 2010/05/25 17:27:55 deraadt Exp $
a42 1
STRIPFLAGS=	-g -x
d86 1
@


1.74
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.73 2010/05/25 15:05:01 deraadt Exp $
d100 1
a100 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.73
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.72 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		i386
_arch?=		i386
@


1.72
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.71 2010/05/24 23:19:22 deraadt Exp $
d155 1
a155 1
	${NORMAL_S}
@


1.71
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.70 2010/05/24 17:49:37 deraadt Exp $
a135 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d137 1
a137 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.70
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.69 2010/05/24 17:43:33 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d45 1
a45 1
STRIPFLAGS=	-g -X -x
a122 1

d125 1
a125 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d135 2
a136 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.s \
	param.c ioconf.c ${CFILES} ${SFILES}
d139 1
a139 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.s
@


1.69
log
@stupid typo snuck in
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.68 2010/05/24 14:59:15 deraadt Exp $
d150 1
d152 1
@


1.68
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.67 2010/05/23 15:32:50 deraadt Exp $
d39 1
a39 1
.endifw
@


1.67
log
@no need for -D__i386__ since it is supplied by the compiler.
Also move towards passing $PARAM around in CPPFLAGS, instead
of compiling param.c in a special way, as discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.66 2010/04/28 21:54:55 kettenis Exp $
d29 8
a36 4
CDIAGFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main \
		-Wstack-larger-than-2047

d39 1
a39 3
.endif
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log -fno-builtin-log2 \
		-fno-builtin-malloc
d42 2
a43 2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -D_LOCORE
d48 3
a50 3
CFLAGS+=-m32
AFLAGS+=-m32
LINKFLAGS+=-melf_i386_obsd
d59 1
a59 1
HOSTCC= ${CC}
d62 1
a62 5

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a65 1

a66 3
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d81 1
a81 1
SYSTEM_LD_HEAD=	rm -f $@@
d125 1
a125 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d129 1
a129 1
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
@


1.66
log
@We no longer need -Di386.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.65 2010/04/28 15:31:33 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${_mach}__
a67 1
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d117 1
a117 1
	${NORMAL_C_C}
@


1.65
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.64 2010/04/27 16:50:15 jsg Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D${_mach}
@


1.64
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.63 2010/04/27 06:46:26 deraadt Exp $
d62 1
a62 1
# where TYPE is NORMAL, DRIVER, or PROFILE; SUFFIX is the file suffix,
a68 3

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
@


1.63
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.62 2010/04/27 05:07:29 deraadt Exp $
d36 2
a37 1
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log
@


1.62
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.61 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/i386/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/i386/conf/Makefile.i386
# after which config should be rerun for all machines of that type.
@


1.61
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.60 2010/04/27 04:31:46 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.60
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.59 2010/04/27 03:37:37 deraadt Exp $
d164 1
a164 1
SRCS=	${_machdir}/i386/locore.s \
d167 2
a168 2
.depend: ${SRCS} assym.h param.c ${APMINC} ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/i386/locore.s
d182 1
a182 2

locore.o: ${_machdir}/i386/locore.s assym.h
@


1.59
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.58 2010/04/26 22:21:14 deraadt Exp $
d172 1
a172 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.58
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.57 2010/04/26 22:11:37 deraadt Exp $
a181 17


# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if.o if_tun.o if_loop.o if_ethersubr.o: Makefile
if_arp.o if_ether.o: Makefile
ip_input.o ip_output.o in_pcb.o in_proto.o: Makefile
tcp_subr.o tcp_timer.o tcp_output.o: Makefile

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile
@


1.57
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.56 2010/04/26 20:50:16 deraadt Exp $
a33 1
_machdir?=	$S/arch/i386
d35 2
a36 1
_archdir?=	$S/arch/i386
@


1.56
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.55 2010/04/26 18:58:30 deraadt Exp $
d119 5
a123 3
assym.h: $S/kern/genassym.sh ${_machdir}/i386/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${_machdir}/i386/genassym.cf > assym.h.tmp && \
d171 3
a173 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/i386/genassym.cf
@


1.55
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.54 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 1
I386=	$S/arch/i386
d39 1
a39 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Di386
d119 1
a119 1
assym.h: $S/kern/genassym.sh ${I386}/i386/genassym.cf Makefile
d121 1
a121 1
	    ${PARAM} < ${I386}/i386/genassym.cf > assym.h.tmp && \
d162 1
a162 1
SRCS=	${I386}/i386/locore.s \
d166 1
a166 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${I386}/i386/locore.s
d170 1
a170 1
	    ${CPPFLAGS} < ${I386}/i386/genassym.cf
d198 1
a198 1
locore.o: ${I386}/i386/locore.s assym.h
@


1.54
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.53 2009/08/09 23:04:49 miod Exp $
a2 2
# Makefile for OpenBSD
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d179 3
a181 3
 
# depend on network or filesystem configuration 
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile 
d190 1
a190 1
# depend on CPU configuration 
@


1.53
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.52 2009/07/10 13:51:47 jsg Exp $
d135 1
a135 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.52
log
@Switch away from using -traditional-cpp to iso/ansi cpp for asm files.
More architectures hopefully to follow.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.51 2009/01/11 21:02:03 pirofti Exp $
d59 6
d142 1
a142 1
	    [Ee]rrs linterrs makelinks assym.h
d163 1
a163 1
.depend: ${SRCS} assym.h param.c ${APMINC}
d172 5
@


1.51
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.50 2007/11/28 18:25:10 tedu Exp $
d49 1
a49 1
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
@


1.50
log
@basic support for building an i386 kernel with the native toolchain
on amd64.  helpful for test compiling.  i have not attempted to boot
such a kernel.  you shouldn't either.
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.49 2007/11/25 18:25:28 deraadt Exp $
d163 2
a164 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.49
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.48 2007/11/25 11:23:33 deraadt Exp $
d52 6
@


1.48
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.47 2007/07/30 16:23:33 thib Exp $
a56 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d62 1
d85 1
a85 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d116 3
@


1.47
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.46 2007/05/29 18:18:19 tom Exp $
a64 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d92 1
a92 2
SYSTEM_OBJ=	locore.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.46
log
@Remove support for 80386 processors.  Apologies if you have one of
the rare 80386-bases system with enough memory, a 387 FPU, a useable
disk subsystem, and the patience to wait for it to unpack the
distribution .tgz files.

approval from art@@ and many others (esp. nick@@); ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.45 2006/11/29 22:40:11 miod Exp $
d36 1
a36 1
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
@


1.45
log
@Nuke all commons but one, and enable --warn-common in LINKFLAGS.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.44 2006/07/27 05:58:11 miod Exp $
a41 5
.if !${IDENT:M-DI386_CPU}
CMACHFLAGS=	-march=i486
.else
CMACHFLAGS=
.endif
@


1.44
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.43 2006/06/01 21:46:27 pascoe Exp $
d55 1
a55 1
LINKFLAGS=	-Ttext 0xD0200120 -e start -N
@


1.43
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.42 2006/03/14 09:02:29 mickey Exp $
d39 2
a40 1
		-Wno-uninitialized -Wno-format -Wno-main
@


1.42
log
@move the kernel 1m up to provide more space for isadma; deraadt@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.41 2004/11/19 06:41:13 miod Exp $
d116 3
a118 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.41
log
@More aggressive strip flags for non debug kernels; this is a noop on some
architectures, but saves a few dozen KB on alpha and ppc.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.40 2004/05/11 04:01:00 deraadt Exp $
d54 1
a54 1
LINKFLAGS=	-Ttext 0xD0100120 -e start -N
@


1.40
log
@zap false rcs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.39 2003/11/20 08:38:52 espie Exp $
d119 1
a119 1
LINKFLAGS+=	-x
@


1.39
log
@Add -fno-builtin-print -fno-builtin-log to i386/sparc/sparc64/hppa.
No confirmed report of `this work' for other arches yet...
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile.i386,v 1.38 2003/07/22 19:39:50 otto Exp $
#	$NetBSD: Makefile.i386,v 1.67 1996/05/11 16:12:11 mycroft Exp $
@


1.38
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.37 2003/05/23 22:16:16 tedu Exp $
d50 1
@


1.37
log
@move swapgeneric to truly generic code.  tested on many archs by miod and mickey.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.36 2003/05/13 22:45:10 miod Exp $
d171 4
@


1.36
log
@Add option NO_PROPOLICE, which explicitely disables the use of the propolice
stack protection when building kernels. Intended to be used on installation
media, with tight space constraints - currently, only added where
SMALL_KERNEL was already defined.

Not thoroughly tested, but requested by deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.35 2003/05/13 06:12:43 tedu Exp $
d150 1
a150 1
	    ${CFILES} ${I386}/i386/swapgeneric.c ioconf.c param.c | \
@


1.35
log
@remove -fno-stack-protector (enable propolice)
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.34 2003/04/17 03:42:09 drahn Exp $
d46 3
@


1.34
log
@i386 changes to move to ELF. asm cleanup. Change MAXDSIZ to 512M for 1Gsep.
DARPA funded work.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.33 2002/12/25 21:10:26 miod Exp $
a46 1
CMACHFLAGS+=	-fno-stack-protector
@


1.33
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.32 2002/12/02 09:00:23 miod Exp $
d52 2
a53 2
LINKFLAGS=	-z -Ttext D0100000 -e start
STRIPFLAGS=	-d
@


1.32
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.31 2002/08/09 20:24:43 miod Exp $
a26 4
AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
d49 1
a49 1
COPTS?=	-O2
@


1.31
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.30 2002/06/26 08:42:39 art Exp $
d51 1
@


1.30
log
@Bump i386 kvm size to 768M.
deraadt@@ ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.29 2002/06/22 14:05:51 millert Exp $
d125 1
a125 1
assym.h: $S/kern/genassym.sh ${I386}/i386/genassym.cf
@


1.29
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.28 2001/12/24 23:12:14 miod Exp $
d55 1
a55 1
LINKFLAGS=	-z -Ttext E0100000 -e start
@


1.28
log
@Harmonize and complete wrt cross-compilation.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.27 2001/07/15 13:10:48 assar Exp $
d53 1
a53 1
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
@


1.27
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.26 2001/04/22 19:20:35 gluk Exp $
a28 1
MKDEP?=	mkdep
d31 2
a33 1
TOUCH?=	touch
a42 1

d52 2
a53 1
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
a56 1
TOUCHFLAGS=	-f -c
d111 1
a111 1
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@
@


1.27.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.28 2001/12/24 23:12:14 miod Exp $
d29 1
a31 2
MKDEP?=	mkdep
SIZE?=	size
d33 1
d43 1
d53 1
a53 2
COPTS?=	-O2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
d57 1
d112 1
a112 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
@


1.27.4.2
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.27.4.1 2002/01/31 22:55:10 niklas Exp $
d53 1
a53 1
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d55 1
a55 1
LINKFLAGS=	-z -Ttext D0100000 -e start
d125 1
a125 1
assym.h: $S/kern/genassym.sh ${I386}/i386/genassym.cf Makefile
@


1.27.4.3
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d27 4
a50 3
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
d52 1
a52 1
COPTS?=		-O2
d55 2
a56 2
LINKFLAGS=	-Ttext 0xD0100120 -e start -N
STRIPFLAGS=	-g -X -x
@


1.26
log
@Remove -march=i{56}86 optimization because of compiler bug. This bug
results in system lockup, which many people report for 2.8 and -current
when they doing a big network transfer. This problem affect only custom
kernels in which only one cpu type enabled (option I586_CPU or I686_CPU).

When lockup occur I can't switch between virtual wscons terminals.
System continue respond to pings and forward ip packets. It is possible
to enter into ddb. DDB show that several processes in runnable state,
but it seems that task switching not occur. More and more processes becomes
runnable. Stack of curproc looks like:
> _end(e99d8fac, e0101dcc, 4, e0635a00, e99d8f80) at 0xe99d8f78
> _end(e99d8fa0, e028a62e, e99d8fac, 0, 0) at 0xe99d8f78
> ddb>

Sometimes 'boot sync' cleanly unmount all file systems.

I reproduce this bug by transfering two big files from ftp simultaneously.
It seems that at least one process must perform a network transfer and two
or more processes must fight for the processor.

The following PRs probably a result of this problem:
1504, 1716, 1751, 1771, 1780.

deraadt@@ ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.25 2000/06/20 15:33:07 art Exp $
d25 2
d194 12
@


1.25
log
@
If only one of IX86_CPU is defined, set CMACHFLAGS to the appropriate
 -march=ix86. (as it was done for 486).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.24 1999/09/17 16:52:05 deraadt Exp $
d45 1
a45 5
.if ${IDENT:M-D*_CPU} == ${IDENT:M-DI686_CPU}
CMACHFLAGS=	-march=i686
.elif ${IDENT:M-D*_CPU} == ${IDENT:M-DI586_CPU}
CMACHFLAGS=	-march=i586
.elif ${IDENT:M-D*_CPU} == ${IDENT:M-DI486_CPU}
@


1.25.2.1
log
@Pull in patch from 2.9:
Fix (gluk):
Remove -march=i{56}86 optimization because of compiler bug. This bug
results in system lockup, which many people report for 2.8 and -current
when they doing a big network transfer. This problem affect only custom
kernels in which only one cpu type enabled (option I586_CPU or I686_CPU).

When lockup occur I can't switch between virtual wscons terminals.
System continue respond to pings and forward ip packets. It is possible
to enter into ddb. DDB show that several processes in runnable state,
but it seems that task switching not occur. More and more processes becomes
runnable. Stack of curproc looks like:
> _end(e99d8fac, e0101dcc, 4, e0635a00, e99d8f80) at 0xe99d8f78
> _end(e99d8fa0, e028a62e, e99d8fac, 0, 0) at 0xe99d8f78
> ddb>

Sometimes 'boot sync' cleanly unmount all file systems.
I reproduce this bug by transfering two big files from ftp simultaneously.
It seems that at least one process must perform a network transfer and two
or more processes must fight for the processor.

The following PRs probably a result of this problem:
1504, 1716, 1751, 1771, 1780.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.25 2000/06/20 15:33:07 art Exp $
d45 5
a49 1
.if !${IDENT:M-DI386_CPU}
@


1.24
log
@grown i386 kvm to 512MB
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.23 1998/08/10 22:08:27 mickey Exp $
d45 6
a50 2
.if ${IDENT:M-D*_CPU} == ${IDENT:M-DI486_CPU}
CMACHFLAGS=	-m486
@


1.24.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.25 2000/06/20 15:33:07 art Exp $
d45 2
a46 6
.if ${IDENT:M-D*_CPU} == ${IDENT:M-DI686_CPU}
CMACHFLAGS=	-march=i686
.elif ${IDENT:M-D*_CPU} == ${IDENT:M-DI586_CPU}
CMACHFLAGS=	-march=i586
.elif ${IDENT:M-D*_CPU} == ${IDENT:M-DI486_CPU}
CMACHFLAGS=	-march=i486
@


1.24.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.24.4.1 2001/04/18 16:07:04 niklas Exp $
d45 5
a49 1
.if !${IDENT:M-DI386_CPU}
@


1.24.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.24.4.2 2001/07/04 10:16:23 niklas Exp $
a24 2
.include <bsd.own.mk>

a191 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.24.4.4
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
d29 1
a31 2
MKDEP?=	mkdep
SIZE?=	size
d33 1
d43 1
d53 1
a53 2
COPTS?=	-O2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
d57 1
d112 1
a112 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
@


1.24.4.5
log
@Sync the SMP branch with 3.3
@
text
@d27 4
a50 1
CMACHFLAGS+=	-fno-stack-protector
d52 2
a53 2
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d55 1
a55 1
LINKFLAGS=	-z -Ttext D0100000 -e start
d125 1
a125 1
assym.h: $S/kern/genassym.sh ${I386}/i386/genassym.cf Makefile
@


1.24.4.6
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.24.4.5 2003/03/27 23:26:55 niklas Exp $
d52 2
a53 2
LINKFLAGS=	-Ttext 0xD0100120 -e start -N
STRIPFLAGS=	-g -X -x
@


1.24.4.7
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d1 1
a1 1
#	$OpenBSD$
a46 1
.if ${IDENT:M-DNO_PROPOLICE}
a47 1
.endif
@


1.24.4.8
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.24.4.7 2003/05/16 00:29:38 niklas Exp $
d150 1
a150 1
	    ${CFILES} ioconf.c param.c | \
@


1.24.4.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
a49 1
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log
a170 4
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${I386}/i386/genassym.cf
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
	@@rm -f assym.dep
@


1.24.4.10
log
@Merge with the trunk
@
text
@d2 1
@


1.23
log
@no need for microcode deps. aic is fine anyway
@
text
@d53 1
a53 1
LINKFLAGS=	-z -Ttext F0100000 -e start
@


1.22
log
@Add -Wno-main for GCC 2.8
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.21 1997/09/21 04:27:33 mickey Exp $
a193 3

### add microcode dependencies
.include "$S/dev/microcode/Makefile.inc"
@


1.21
log
@support new boots
add to your config:
bios0 at mainbus0
apm0 at mainbus0	# (if you are using APM)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.20 1997/09/15 02:40:29 deraadt Exp $
d43 1
a43 1
		-Wno-uninitialized -Wno-format
@


1.20
log
@kill Locore.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.19 1997/05/29 00:43:19 niklas Exp $
a162 4

# depend on APM
.include "${I386}/apm_init/Makefile.inc"
locore.o: ${APMINC}
@


1.19
log
@Add -Wmissing-prototypes too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.18 1997/03/29 07:12:04 tholo Exp $
d150 1
a150 2
	    ${I386}/i386/Locore.c ${CFILES} ${I386}/i386/swapgeneric.c \
	    ioconf.c param.c | \
@


1.18
log
@Use genassym.sh
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.17 1997/02/24 03:27:38 downsj Exp $
d42 2
a43 2
CDIAGFLAGS=	-Werror -Wall -Wstrict-prototypes -Wno-uninitialized \
		-Wno-format
@


1.17
log
@sync with hp300: -nostdinc, HOSTCC, etc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.16 1996/10/25 11:14:10 deraadt Exp $
d34 4
a37 2
S=	../../../..
I386=	../..
d39 1
a39 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
d124 4
a127 8
assym.h: genassym
	./genassym >assym.h

genassym: genassym.o
	${HOSTCC} -o $@@ genassym.o

genassym.o: ${I386}/i386/genassym.c
	${HOSTED_C}
d146 1
a146 1
	    [Ee]rrs linterrs makelinks genassym genassym.o assym.h
a175 2
	${MKDEP} -a ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} \
		${I386}/i386/genassym.c
d189 1
a189 1
genassym.o machdep.o: Makefile
@


1.16
log
@grow kvm space; fix an over-agressive pmap optimization
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.15 1996/10/17 21:47:11 niklas Exp $
d27 1
d30 2
a31 2
STRIP?=	strip -d
TOUCH?=	touch -f -c
d37 1
a37 1
INCLUDES=	-I. -I$S/arch -I$S
d52 6
d89 2
d115 1
a115 1
		echo ${STRIP} $@@; ${STRIP} $@@
d126 1
a126 1
	${CC} -o $@@ genassym.o
d129 1
a129 1
	${NORMAL_C_C}
d175 5
a179 4
	mkdep ${AFLAGS} ${CPPFLAGS} ${I386}/i386/locore.s
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
	mkdep -a ${CFLAGS} ${CPPFLAGS} ${PARAM} ${I386}/i386/genassym.c
@


1.15
log
@Add pedantic warnings, as well as -m486 if we are only for the 486
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.14 1996/06/24 17:07:34 deraadt Exp $
d50 1
a50 1
LINKFLAGS=	-z -Ttext F8100000 -e start
@


1.14
log
@kernel is /bsd; GENERIC is not an option
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.13 1996/05/27 08:04:52 deraadt Exp $
d38 11
a48 1
CFLAGS=		${DEBUG} -O2 -Werror
@


1.13
log
@depend::
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.i386,v 1.12 1996/05/10 12:19:12 mickey Exp $
d132 1
a132 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
@


1.12
log
@remove makelinks, when done.
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.i386,v 1.7 1996/04/24 10:50:54 niklas Exp $
#	$NetBSD: Makefile.i386,v 1.66 1996/02/29 20:56:16 cgd Exp $
d154 1
a154 1
depend: .depend
@


1.11
log
@simplify sed rule in 'links', so swap*.c be treated ok.
@
text
@d146 1
a146 1
	sh makelinks && rm -f dontlink
@


1.10
log
@add network dependencies.
@
text
@d145 1
a145 1
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
@


1.9
log
@Pull in John Kohl's [jtk@@netbsd.org] most recent (15Apr96) APM and PCMCIA work
(original PCMCIA framework  by Stefan Grefen [grefen@@convex.com]).
@
text
@d167 4
a170 2
if_tun.o if_loop.o if_ethersubr.o: Makefile
in_proto.o: Makefile
@


1.8
log
@Add network config dependencies.
@
text
@d148 4
d155 1
a155 1
.depend: ${SRCS} assym.h param.c
@


1.7
log
@We are OpenBSD, not Net, and we name our kernels bsd
@
text
@d1 1
a1 1
#	$OpenBSD$
d162 3
a164 1
uipc_proto.o vfs_conf.o: Makefile 
@


1.6
log
@Merge of NetBSD 960317
@
text
@d4 1
a4 1
# Makefile for NetBSD
d128 1
a128 1
	rm -f eddep *netbsd netbsd.gdb tags *.[io] [a-z]*.s \
@


1.5
log
@From NetBSD: vnode_if.[ch] made machine independent.
very usefull (for <sys/vnode.h> inclusion).
from the other side this is really machine independent ...
tested w/ i386, but should not cause errors w/ other arch's.
pls, test it (don't forget to reconfig kernel ;)
@
text
@d1 2
a2 1
#	$NetBSD: Makefile.i386,v 1.64 1996/02/09 02:21:25 mycroft Exp $
d25 6
a30 7
AS=	as
AWK=	awk
CC=	cc
CPP=	cpp
LD=	ld
STRIP=	strip -d
TOUCH=	touch -f -c
@


1.4
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d84 1
a84 1
		vnode_if.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
a111 3
vnode_if.c vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src

d128 1
a128 1
	rm -f eddep *netbsd netbsd.gdb tags vnode_if.[ch] *.[io] [a-z]*.s \
d149 1
a149 1
	vnode_if.c param.c ioconf.c ${CFILES} ${SFILES}
d151 1
a151 1
.depend: ${SRCS} assym.h vnode_if.h param.c
d153 1
a153 1
	mkdep -a ${CFLAGS} ${CPPFLAGS} vnode_if.c param.c ioconf.c ${CFILES}
@


1.3
log
@Compile with -fno-strength-reduce for now
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.i386,v 1.59 1995/10/10 05:58:00 mycroft Exp $
d3 2
d10 2
a11 2
#	 config machineid
# Generic makefile changes should be made in
a19 1
#
d21 4
a24 3
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).
AS=	as ${DEBUG}
d26 1
a26 1
CC=	cc ${DEBUG}
d29 1
d36 5
a40 4
INCLUDES= -I. -I$S/arch -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL -Di386
CFLAGS=	-O6 -fno-strength-reduce -Werror ${COPTS}
LOAD_ADDRESS= F8100000
d63 2
a64 5
NORMAL_C=	${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<

DRIVER_C=	${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
d66 2
a67 4
PROFILE_C=	${CC} -S -c ${CFLAGS} $< ; \
		sed -e s/_mcount/mcount/ -e s/subrmcount/subr_mcount/ <$*.s | \
		${AS} -o $@@; \
		rm -f $*.s
d69 2
a70 2
NORMAL_S=	${CPP} -DLOCORE ${COPTS} $< | ${AS} -o $@@
NORMAL_S_C=	${CPP} -DLOCORE ${COPTS} ${PARAM} $< | ${AS} -o $@@
d76 2
d83 2
a84 2
SYSTEM_OBJ=	locore.o vnode_if.o ${OBJS} param.o ioconf.o ${LIBKERN} \
		${LIBCOMPAT}
d87 13
a99 12
SYSTEM_LD=	@@if [ X${DEBUG} = X-g ]; then \
			strip=-X; \
		else \
			strip=-x; \
		fi; \
		echo ${LD} $$strip -z -T ${LOAD_ADDRESS} -o $@@ -e start '$${SYSTEM_OBJ}' vers.o; \
		${LD} $$strip -z -T ${LOAD_ADDRESS} -o $@@ -e start ${SYSTEM_OBJ} vers.o
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@; \
		if [ X${DEBUG} = X-g ]; then \
			echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
			echo strip -d $@@; strip -d $@@; \
		fi
d103 2
a104 1
newvers: vers.o
d106 2
a107 3
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} -c vers.c
d109 2
a110 3
clean::
	rm -f eddep bsd bsd.gdb tags vnode_if.[ch] *.o locore.i \
		[a-z]*.s [Ee]rrs linterrs makelinks genassym
d112 2
a113 6
lint: /tmp param.c
	@@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} ${PARAM} -UKGDB \
	    ${I386}/i386/Locore.c ${CFILES} ${I386}/i386/swapgeneric.c \
	    ioconf.c param.c | \
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'
d115 3
a117 5
locore.o: assym.s ${I386}/i386/locore.s machine/trap.h machine/psl.h
locore.o: machine/pte.h ${I386}/isa/vector.s ${I386}/isa/icu.s
locore.o: $S/sys/errno.h machine/specialreg.h ${I386}/isa/debug.h
locore.o: ${I386}/isa/icu.h $S/dev/isa/isareg.h $S/net/netisr.h
	${CPP} -DLOCORE ${COPTS} ${I386}/i386/locore.s | ${AS} -o locore.o
d119 2
a120 2
# the following is necessary because autoconf.o depends on #if GENERIC
autoconf.o: Makefile
d122 2
a123 3
# the following are necessary because the files depend on the types of
# cpu's included in the system configuration
locore.o machdep.o: Makefile
d125 3
a127 2
# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o locore.o: Makefile
a128 2
# depend on maxusers
assym.s: Makefile
d130 3
a132 2
# depends on KDB (cons.o also depends on GENERIC)
trap.o cons.o: Makefile
d134 5
a138 2
assym.s: genassym
	./genassym >assym.s
d140 2
a141 7
genassym: ${I386}/i386/genassym.c
	${CC} ${INCLUDES} ${IDENT} ${PARAM} -Di386 -o genassym \
	    ${I386}/i386/genassym.c

depend: assym.s param.c vnode_if.h
	mkdep ${COPTS} ${CFILES} ioconf.c param.c
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM} ${I386}/i386/genassym.c
d148 1
a148 1
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
d151 15
a165 2
tags:
	@@echo "see $S/kern/Makefile for tags"
d167 2
a168 2
ioconf.o: ioconf.c
	${CC} -c ${CFLAGS} ioconf.c
d170 2
a171 3
param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .
a172 2
param.o: param.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} param.c
d174 2
a175 2
vnode_if.c vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
@


1.2
log
@kernel is /bsd
@
text
@d35 1
a35 1
CFLAGS=	-O6 -Werror ${COPTS}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 4
# 	@@(#)Makefile.hp300	8.2 (Berkeley) 1/23/94
#
# Makefile for NetBSD
#
d108 1
a108 1
	rm -f eddep *netbsd netbsd.gdb tags vnode_if.[ch] *.o locore.i \
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

