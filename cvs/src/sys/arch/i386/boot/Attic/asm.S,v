head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.4.0.2
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.6
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.4
	OPENBSD_2_0_BASE:1.2
	new:1.2.0.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.4
date	97.11.05.02.47.03;	author mickey;	state dead;
branches;
next	1.3;

1.3
date	97.07.17.22.42.12;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.13.09.13.03;	author mickey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.18.08.50.30;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.30;	author deraadt;	state Exp;
branches;
next	;

1.2.2.1
date	96.09.24.09.35.50;	author mickey;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	96.09.26.12.11.29;	author mickey;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	96.09.26.12.15.45;	author mickey;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	96.10.23.08.37.51;	author mickey;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	96.10.28.12.14.25;	author mickey;	state dead;
branches;
next	;


desc
@@


1.4
log
@who needs that junk (;
@
text
@/*	$NetBSD: asm.S,v 1.12 1995/03/12 00:10:53 mycroft Exp $	*/

/*
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 *
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#include <machine/asm.h>
#define _LOCORE
#include <machine/specialreg.h>
#undef _LOCORE
#define	addr32	.byte 0x67
#define	data32	.byte 0x66

	.data
	.globl	_ourseg
_ourseg:
	.long	0

/*
 * real_to_prot()
 * 	transfer from real mode to protected mode.
 */
ENTRY(real_to_prot)
	# guarantee that interrupt is disabled when in prot mode
	cli

	# load the gdtr
	addr32
	data32
	lgdt	_C_LABEL(Gdtr)

	# set the PE bit of CR0
	movl	%cr0, %eax

	data32
	orl	$CR0_PE, %eax
	movl	%eax, %cr0 

	# make intrasegment jump to flush the processor pipeline and
	# reload CS register
	data32
	ljmp	$0x18, $xprot

xprot:
	# we are in USE32 mode now
	# set up the protected mode segment registers : DS, SS, ES
	movl	$0x20, %eax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es

	ret

/*
 * prot_to_real()
 * 	transfer from protected mode to real mode
 */
ENTRY(prot_to_real)
	# set up a dummy stack frame for the second seg change.
	# Adjust the intersegment jump instruction following
	# the clearing of protected mode bit.
	# This is self-modifying code, but we need a writable
	# code segment, and an intersegment return does not give us that.
	movl    _ourseg, %eax
	movw    %ax, xreal-2


	# Change to use16 mode.
	ljmp	$0x28, $x16

x16:
	# clear the PE bit of CR0
	movl	%cr0, %eax
	data32
	andl 	$~CR0_PE, %eax
	movl	%eax, %cr0

	# make intersegment jmp to flush the processor pipeline
	# using the fake stack frame set up earlier
	# and reload CS register
	# Here we have an 16 bits intersegment jump.
	.byte 0xea
	.word xreal
	.word 0

xreal:
	# we are in real mode now
	# set up the real mode segment registers : DS, SS, ES
	movl	%cs, %ax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es

	sti
	data32
	ret

/*
 * startprog(phyaddr)
 *	start the program on protected mode where phyaddr is the entry point
 */
ENTRY(startprog)
	pushl	%ebp
	movl	%esp, %ebp

	# get things we need into registers
	movl	8(%ebp), %ecx		# entry offset 
	movl	12(%ebp), %eax		# &argv

	# make a new stack at 0:0x90000 (big segs)
	movl	$0x10, %ebx
	movw	%bx, %ss
	movl	$0x90000, %ebx
	movl	%ebx, %esp
	
	# push some number of args onto the stack
	pushl	28(%eax)		# argv[7] = cnvmem
	pushl	32(%eax)		# argv[8] = extmem
	pushl	16(%eax)		# argv[4] = esym
	pushl	$0			# nominally a cyl offset in the boot.
	pushl	8(%eax)			# argv[2] = bootdev
	pushl	4(%eax)			# argv[1] = howto
	pushl	$0			# dummy 'return' address
	
	# push on our entry address
	movl	$0x8, %ebx		# segment
	pushl	%ebx
	pushl	%ecx

	# convert over the other data segs
	movl	$0x10, %ebx
	movl	%bx, %ds
	movl	%bx, %es

	# convert the PC (and code seg)
	lret

/*
 * pbzero(dst, cnt)
 *	where dst is a virtual address and cnt is the length
 */
ENTRY(pbzero)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%es
	pushl	%edi

	cld

	# set %es to point at the flat segment
	movl	$0x10, %eax
	movl	%ax, %es

	movl	8(%ebp), %edi		# destination
	movl	12(%ebp), %ecx		# count
	xorl	%eax, %eax		# value

	rep
	stosb

	popl	%edi
	popl	%es
	popl	%ebp
	ret

/*
 * pcpy(src, dst, cnt)
 *	where src is a virtual address and dst is a physical address
 */
ENTRY(pcpy)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%es
	pushl	%esi
	pushl	%edi

	cld

	# set %es to point at the flat segment
	movl	$0x10, %eax
	movl	%ax, %es

	movl	8(%ebp), %esi		# source
	movl	12(%ebp), %edi		# destination
	movl	16(%ebp), %ecx		# count

	rep
	movsb

	popl	%edi
	popl	%esi
	popl	%es
	popl	%ebp
	ret

#ifdef CHECKSUM
/*
 * cksum(src, cnt)
 *	where src is a virtual address and cnt is the length
 */
ENTRY(cksum)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%es
	pushl	%edi

	cld

	# set %es to point at the flat segment
	movl	$0x10, %eax
	movl	%ax, %es

	movl	8(%ebp), %edi		# destination
	movl	12(%ebp), %ecx		# count
	shrl	$2, %ecx
	xorl	%edx, %edx		# value

1:	es
	lodsl
	xorl	%eax, %edx
	loop	1b

	movl	%edx, %eax

	popl	%edi
	popl	%es
	popl	%ebp
	ret
#endif

#if 0
ENTRY(getword)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%es

	# set %es to point at the flat segment
	movl	$0x10, %eax
	movl	%ax, %es

	movl	8(%ebp), %eax
	es
	movl	(%eax), %edx

	movl	%edx, %eax

	popl	%es
	popl	%ebp
	ret
#endif
@


1.3
log
@use includes, nort private defines
@
text
@@


1.2
log
@From NetBSD PR#1133:
add '?' to list available files at boot.
@
text
@d55 3
a59 2

CR0_PE		=	0x1
@


1.2.2.1
log
@mostly working now.
some probs w/ prot->real--<some bios things done>--real->prot
@
text
@d55 2
a68 1
	.code16
d74 2
d80 2
d87 1
a90 1
	.code32
d93 4
a96 4
	movw	$0x20, %ax
	movw	%ax, %ds
	movw	%ax, %ss
	movw	%ax, %es
d98 1
a98 1
	lret
a103 1
	.code32
d113 1
a117 2
	.code16

d120 1
d135 4
a138 4
	movw	%cs, %ax
	movw	%ax, %ds
	movw	%ax, %ss
	movw	%ax, %es
d140 2
a141 1
	#sti
a143 1
	.code32
@


1.2.2.2
log
@working now. only start.S requires as.new.
tested w/ floppy, expected to work w/ hd too....
/boot is coming soon.
DEBUG enabled!!!
@
text
@a0 1
/*	$OpenBSD$	*/
a3 1
 * Changes by Michael Shalayeff 1996
a54 2
#define	addr32	.byte 0x67
#define	data32	.byte 0x66
a61 66
	.text

/*
 *
 */

/* Conventional GDT indexes. */
BOOT_CS_INDEX	=	3
BOOT_CS16_INDEX	=	5
BOOT_DS_INDEX	=	4

	.globl	boot2
boot2:
	pushl	%cs
	pushl	%cs
	pushl	%cs
	popl	%ds
	popl	%es
	data32
	xorl	%eax, %eax
	popl	%ax
	data32
	addr32
	movl	%eax, _C_LABEL(ourseg)
	shll	$4, %eax

	/* fix up GDT entries for bootstrap */
#define FIXUP(gdt_index) \
	addr32; \
	movl	%ax, _C_LABEL(Gdt)+(8*gdt_index)+2; /* actually movw %ax */ \
	addr32; \
	movb	%bl, _C_LABEL(Gdt)+(8*gdt_index)+4

	data32
	shldl	$16, %eax, %ebx
	FIXUP(BOOT_CS_INDEX)
	FIXUP(BOOT_CS16_INDEX)
	FIXUP(BOOT_DS_INDEX)

	/* fix up GDT pointer */
	data32
	addl	$_C_LABEL(Gdt), %eax
	data32
	movl	%eax, _C_LABEL(Gdtr)+2

	/* change to protected mode */
	data32
	call	_C_LABEL(real_to_prot)

	/* clear the bss */
	movl	$_C_LABEL(edata), %edi
	movl	$_C_LABEL(end), %ecx
	subl	%edi, %ecx
	xorb	%al, %al
	rep
	stosb

	movzbl	%dl, %edx	/* discard head (%dh) and random high bits */
	pushl	%edx
	movl	$0xB7000, %eax
	movw	$0x55aa, %es:(%eax)

	ljmp	$0x18, $_C_LABEL(boot)

	hlt
	cli
d67 1
a72 2
	addr32
	data32
a76 1
	data32
d82 4
a85 3
	data32
	ljmp	$0x18, $1f
1:
d88 4
a91 4
	movl	$0x20, %eax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es
d93 1
a93 1
	ret
d99 1
d111 1
d113 2
a116 1
	data32
d131 4
a134 4
	movl	%cs, %ax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es
d136 1
a136 2
	sti
	data32
d139 1
d168 2
a169 1
	pushl	$0x8			# segment
@


1.2.2.3
log
@some cleanup.
forgot to mention: as.new is brain damaged on jmp/call (not ljmp/lcall)
to functions in other files.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.S,v 1.2.2.2 1996/09/26 12:11:29 mickey Exp $	*/
d125 2
@


1.2.2.4
log
@reflect recent changes to libsa
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.S,v 1.2.2.3 1996/09/26 12:15:45 mickey Exp $	*/
d178 2
a179 2
	ljmp	$0x28, $1f
1:
@


1.2.2.5
log
@new boots w/ libsa using.
new libsa required too, no commit yet.
this one is to mark the step. but it works for me (:
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.S,v 1.2.2.4 1996/10/23 08:37:51 mickey Exp $	*/
@


1.1
log
@Initial revision
@
text
@d106 7
a112 4
	movl 	_ourseg, %eax
	pushw	%ax
	movl	$xreal, %eax	# gas botches pushw $xreal - extra bytes 0, 0
	pushw	%ax		# decode to add %al, (%eax) (%al usually 0)
d127 4
a130 1
	lret
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
