head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	UBC_SYNC_B:1.9
	SMP:1.9.0.2
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.7.0.4
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	new:1.4.0.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.9
date	97.11.05.02.47.06;	author mickey;	state dead;
branches;
next	1.8;

1.8
date	97.07.17.22.43.53;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.10.04.05.21.45;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.09.25.12.27.01;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.06.02.23.47.09;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.02.11.18.14;	author mickey;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	96.05.18.10.33.14;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.13.09.13.06;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.30;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.30;	author deraadt;	state Exp;
branches;
next	;

1.4.2.1
date	96.09.17.09.34.13;	author mickey;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	96.09.24.09.35.51;	author mickey;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	96.09.26.12.11.40;	author mickey;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	96.10.23.08.37.52;	author mickey;	state Exp;
branches;
next	1.4.2.5;

1.4.2.5
date	96.10.28.12.14.29;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.9
log
@who needs that junk (;
@
text
@/*	$NetBSD: start.S,v 1.12 1995/01/18 17:34:18 mycroft Exp $	*/

/*
 * Ported to boot 386BSD by Julian Elischer (julian@@tfs.com) Sept 1992
 *
 * Mach Operating System
 * Copyright (c) 1992, 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

/*
  Copyright 1988, 1989, 1990, 1991, 1992 
   by Intel Corporation, Santa Clara, California.

                All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#include <machine/asm.h>
#define	addr32	.byte 0x67
#define	data32	.byte 0x66

#define BOOTSEG		0x0100	/* boot will be loaded here (below 640K) */
#define BOOTSTACK	0xfffc	/* boot stack */
#define SIGNATURE	0xaa55	/* MBR signature */
#define LOADSZ		15	/* size of unix boot */
#define PARTSTART	0x1be	/* starting address of partition table */
#define NUMPART		4	/* number of partitions in partition table */
#define PARTSZ		16	/* each partition table entry is 16 bytes */
#define BSDPART		0xA6	/* OpenBSD partition identification */
#define OLDBSDPART	0xA5	/* 386/Net/FreeBSD partition identification */
#define BOOTABLE	0x80	/* value of boot_ind, means bootable partition */

	.text	
	.globl	start

ENTRY(boot1)
start:
#ifndef DOSREAD
	# start (aka boot1) is loaded at 0x0:0x7c00 but we want 0x7c0:0
	# ljmp to the next instruction to adjust %cs
	data32
	ljmp $0x7c0, $start1

start1:
	# set up %ds
	movl	%cs, %ax
	movl	%ax, %ds

	# set up %ss and %esp
	data32
	movl	$BOOTSEG, %eax
	movl	%ax, %ss
	data32
	movl	$BOOTSTACK, %esp

	/*** set up %es, (where we will load boot2 to) ***/
	movl	%ax, %es

#ifdef SERIAL
	# Initialize the serial port to 9600 baud, 8N1.
	data32
	pushl	%edx
	data32
	movl	$0x00e3, %eax
	xorl	%edx, %edx
	int	$0x14
	data32
	popl	%edx
#endif

#ifdef	DEBUG
	data32
	movl	$one, %esi
	data32
	call	message
#endif

	# bootstrap passes us drive number in %dl
	cmpb	$0x80, %dl
	data32
	jae	hd

fd:
#	reset the disk system
#ifdef	DEBUG
	data32
	movl	$two, %esi
	data32
	call	message
#endif
	movb	$0x00, %ah
	int	$0x13
#ifdef	DEBUG
	data32
	movl	$three, %esi
	data32
	call	message
#endif
	data32
	movl	$0x0001, %ecx	# cyl 0, sector 1
	movb	$0x00, %dh	# head
	# XXX Override the drive number.
	movb	$0x00, %dl
	data32
	jmp	load

hd:	/**** load sector 0 into the BOOTSEG ****/
#ifdef	DEBUG
	data32
	movl	$four, %esi
	data32
	call	message
#endif
	data32
	movl	$0x0201, %eax
	xorl	%ebx, %ebx	# %bx = 0
	data32
	movl	$0x0001, %ecx
#ifdef	DEBUG
	data32
	movl	$five, %esi
	data32
	call	message
#endif
	data32
	andl	$0xff, %edx
	/*mov	$0x0080, %edx*/
	int	$0x13
	data32
	jb	read_error

	/***# find the first OpenBSD partition *****/
	data32
	movl	$PARTSTART, %ebx
	data32
	movl	$NUMPART, %ecx
again:
	addr32
	movb    %es:4(%ebx), %al
	cmpb	$BSDPART, %al
	data32
	je	found
	data32
	addl	$PARTSZ, %ebx
	data32
	loop	again

	/***# find the first 386/Net/FreeBSD partition *****/
	data32
	movl	$PARTSTART, %ebx
	data32
	movl	$NUMPART, %ecx
again2:
	addr32
	movb    %es:4(%ebx), %al
	cmpb	$OLDBSDPART, %al
	data32
	je	found
	data32
	addl	$PARTSZ, %ebx
	data32
	loop	again2
	data32
	movl	$enoboot, %esi
	data32
	jmp	err_stop
#else /* !DOSREAD */
      movb    $0xff, %dl
      jmp     _C_LABEL(boot2)
#endif /* DOSREAD */


#ifndef DOSREAD
/*
# BIOS call "INT 0x13 Function 0x2" to read sectors from disk into memory
#       Call with       %ah = 0x2
#                       %al = number of sectors
#                       %ch = cylinder
#                       %cl = sector
#                       %dh = head
#                       %dl = drive (0x80 for hard disk, 0x0 for floppy disk)
#                       %es:%bx = segment:offset of buffer
#       Return:
#                       %al = 0x0 on success; err code on failure
*/

found:
	addr32
	movb	%es:1(%ebx), %dh /* head */
	addr32
	movl	%es:2(%ebx), %ecx /*sect, cyl (+ 2 bytes junk in top word) */

load:
	movb	$0x2, %ah	/* function 2 */
	movb	$LOADSZ, %al	/* number of blocks */
	xorl	%ebx, %ebx	/* %bx = 0, put it at 0 in the BOOTSEG */
	int	$0x13
	data32
	jb	read_error

	# ljmp to the second stage boot loader (boot2).
	# After ljmp, %cs is BOOTSEG and boot1 (512 bytes) will be used
	# as an internal buffer "intbuf".

#ifdef	DEBUG
	data32
	movl	$six, %esi
	data32
	call	message
#endif

	data32
	ljmp	$BOOTSEG, $_C_LABEL(boot2)

#
#	read_error
#

read_error:
	data32
	movl	$eread, %esi
err_stop:
	data32
	call	message
	data32
	jmp	stop

#
#	message: write the error message in %ds:%esi to console
#

message:
/*
#ifndef SERIAL
# BIOS call "INT 10H Function 0Eh" to write character to console
#	Call with	%ah = 0x0e
#			%al = character
#			%bh = page
#			%bl = foreground color
#else
# BIOS call "INT 14H Function 01h" to write character to console
#	Call with	%ah = 0x01
#			%al = character
#			%dx = port number
#endif
*/
	data32
	pushl	%eax
	data32
	pushl	%ebx
	data32
	pushl	%edx

#endif
nextb:
	cld
	lodsb			# load a byte into %al
	testb	%al, %al
	data32
	jz	done

#ifndef SERIAL
	movb	$0x0e, %ah
	data32
	movl	$0x0001, %ebx
	int	$0x10
#else
	movb	$0x01, %ah
	xorl	%edx, %edx
	int	$0x14
#endif

	data32
	jmp	nextb

done:
	data32
	popl	%edx
	data32
	popl	%ebx
	data32
	popl	%eax
	data32
	ret


/* Conventional GDT indexes. */
#define BOOT_CS_INDEX	3
#define BOOT_CS16_INDEX	5
#define BOOT_DS_INDEX	4

ENTRY(boot2)
	data32
	xorl	%eax, %eax
	movl	%cs, %ax
	movl	%ax, %ds
	movl	%ax, %es
	addr32
	data32
	movl	%eax, _C_LABEL(ourseg)
	data32
	shll	$4, %eax

	/* fix up GDT entries for bootstrap */
#define FIXUP(gdt_index) \
	addr32; \
	movl	%eax, _C_LABEL(Gdt)+(8*gdt_index)+2;	/* actually movw %ax */ \
	addr32; \
	movb	%bl, _C_LABEL(Gdt)+(8*gdt_index)+4

	data32
	shldl	$16, %eax, %ebx
	FIXUP(BOOT_CS_INDEX)
	FIXUP(BOOT_CS16_INDEX)
	FIXUP(BOOT_DS_INDEX)

	/* fix up GDT pointer */
	data32
	addl	$_C_LABEL(Gdt), %eax
	addr32
	data32
	movl	%eax, _C_LABEL(Gdtr)+2

	/* change to protected mode */
	data32
	call	_C_LABEL(real_to_prot)

	/* clear the bss */
	movl	$_C_LABEL(edata), %edi
	movl	$_C_LABEL(end), %ecx
	subl	%edi, %ecx
	subb	%al, %al
	rep
	stosb

	movzbl	%dl, %edx	/* discard head (%dh) and random high bits */
	pushl	%edx
	call	_C_LABEL(boot)

stop:
	cli
	hlt


/* error messages */

#ifdef	DEBUG
one:	.asciz		"1\r\n"
two:	.asciz		"2\r\n"
three:	.asciz		"3\r\n"
four:	.asciz		"4\r\n"
five:	.asciz		"5\r\n"
six:	.asciz		"6\r\n"
seven:	.asciz		"7\r\n"
#endif	DEBUG
eread:	.asciz		"Read error\r\n"
enoboot: .asciz		"No bootable partition\r\n"
endofcode:
/* throw in a partition in case we are block0 as well */
/* flag, head, sec, cyl, typ, ehead, esect, ecyl, start, len */
	. = _C_LABEL(boot1) + PARTSTART
startoflabel:
	.byte	0x0,0,0,0,0,0,0,0
	.long	0,0
	.byte	0x0,0,0,0,0,0,0,0
	.long	0,0
	.byte	0x0,0,0,0,0,0,0,0
	.long	0,0
	.byte	BOOTABLE,0,1,0,BSDPART,255,255,255
	.long	0,50000
/* the last 2 bytes in the sector 0 contain the signature */
	. = _C_LABEL(boot1) + 0x1fe
	.short	SIGNATURE
	. = _C_LABEL(boot1) + 0x200
	.globl	_disklabel
_disklabel:
	. = _C_LABEL(boot1) + 0x400	
@


1.8
log
@use cpp, not equ
@
text
@@


1.7
log
@handle 165/165 correctly; from tholo
@
text
@d58 10
a67 10
BOOTSEG		=	0x0100	# boot will be loaded here (below 640K)
BOOTSTACK	=	0xfffc	# boot stack
SIGNATURE	=	0xaa55
LOADSZ		=	15	# size of unix boot
PARTSTART	=	0x1be	# starting address of partition table
NUMPART		=	4	# number of partitions in partition table
PARTSZ		=	16	# each partition table entry is 16 bytes
BSDPART		=	0xA6	# OpenBSD partition identification
OLDBSDPART	=	0xA5	# 386/Net/FreeBSD partition identification
BOOTABLE	=	0x80	# value of boot_ind, means bootable partition
d324 3
a326 3
BOOT_CS_INDEX	=	3
BOOT_CS16_INDEX	=	5
BOOT_DS_INDEX	=	4
@


1.6
log
@prefer DOSPTYP_386BSD MBR partition; from tholo
@
text
@d168 1
a168 1
	/***# find the first 386BSD partition *****/
d183 6
@


1.5
log
@undo last changes: boot from BSD partiotion in any case.
@
text
@d65 2
a66 1
BSDPART		=	0xA5	# value of boot_ind, means bootable partition
d183 10
d392 1
@


1.4
log
@Minor fixes and cleanup.
@
text
@a0 1
/*	$OpenBSD$	*/
d3 1
a3 3
/*-
 *
 * Changes by Michael Shalayeff May 1996
d58 1
a58 1
BOOTSEG		=	0x1000	# boot will be loaded here (below 640K)
d106 1
a106 1
#ifdef	FDDEBUG
d112 1
a112 1
#if	!defined(NOFD) && !defined(NOHD)
d114 1
a114 1
	testb	$0x80, %dl
d116 2
a117 3
	jnz	hd
#endif
#ifndef	NOFD
d120 1
a120 1
#ifdef	FDDEBUG
d128 1
a128 1
#ifdef	FDDEBUG
d138 1
a138 1
	# movb	$0x00, %dl
d141 1
a141 2
#endif
#ifndef	NOHD
d154 6
d162 1
d167 1
a167 1
	/***# find the first active partition *****/
d174 2
a175 1
	cmpb    $BOOTABLE, %es:(%ebx)
d186 5
a190 1
#endif
d192 1
d205 1
a205 1
#ifndef	NOHD
a210 11
	data32
	pushl	%ecx

	addr32
	movb	%es:4(%ebx), %al
	cmpb	$BSDPART, %al
	je	loadbsd

	# set up %ds
	movl	%cs, %ax
	movl	%ax, %ds
a211 24
	# relocate the code to leave the space for next stage
	movl	$0x5c0, %ax
	movl	%ax, %es
	data32
	xorl	%esi, %esi
	data32
	xorl	%edi, %edi
	data32
	movl	$0x100, %ecx
	cld
	rep
	movsl
	# jump to the new code
	data32
	ljmp $0x5c0, $start2

start2:
	movl	$0x7c0, %ax
	movl	%ax, %es

loadbsd:
	data32
	popl	%ecx
#endif
a212 2
	data32
	pushl	%ebx
a217 2
	popl	%ebx
	data32
d220 3
a222 9
#ifndef	NOHD
	testb	$0x80, %dl	/* no fdisk partion table on floppy */
	data32
	jz	dobsd

	addr32
	movb	%es:4(%ebx), %al
	cmpb	$BSDPART, %al
	je	dobsd
a223 4
	ljmp	$0, $0x7c00

dobsd:
#endif
a230 4
	# ljmp to the second stage boot loader (boot2).
	# After ljmp, %cs is BOOTSEG and boot1 (512 bytes) will be used
	# as an internal buffer "intbuf".

d273 1
d304 1
a304 4
#else	/* !DOSREAD */
	movb	$0xff, %dl
	jmp	_C_LABEL(boot2)
#endif /* DOSREAD */
d326 1
a326 1
	movl	%eax, _C_LABEL(Gdt)+(8*gdt_index)+2;  /* actually movw %ax */ \
d366 1
a366 2
#if	defined(DEBUG) && !defined(DOSREAD)
#ifdef	FDDEBUG
a369 1
#endif	/* FDDEBUG */
d374 1
a374 2
#endif	/* DEBUG */
#ifndef	DOSREAD
a392 1
#endif
@


1.4.2.1
log
@works w/ os-bs.
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.4 1996/06/02 11:18:14 mickey Exp $	*/
a3 13
/*
 * Copyright (c) 1996 Michael Shalayeff
 */

/* Copyright (c) 1996 VaX#n8 (vax@@linkdead.paranoia.com)
 * last edited 9 July 1996
 * many thanks to Erich Boleyn (erich@@uruk.org) for putting up with
 * all my questions, and for his work on GRUB
 * You may use this code or fragments thereof in a manner consistent
 * with the other copyrights as long as you retain my pseudonym and
 * this copyright notice in the file.
 */

d6 1
d61 1
a61 1
BOOTSEG		=	0x0100	# boot will be loaded here (below 640K)
d63 2
a64 3
BOOTBIOS	=	0x7c0	# segment where we loaded
BOOTRELOC	=	0x5c0	# segment where to relocate
SIGNATURE	=	0xaa55	# MBR signature
a69 17
CHAR_S		=	'S'	# started
CHAR_2		=	'2'	# loading 2nd stage boot
CHAR_G		=	'G'	# jumping to it
CHAR_F		=	'F'	# booting from floppy
CHAR_H		=	'H'	# booting from HD
CHAR_L		=	'L'	# looking up bootable partition
CHAR_R		=	'R'	# relocating
CHAR_D		=	'D'	# booting from non-BSD partition
CHAR_P		=	'P'	# partition table corrupted

#ifdef DEBUG
#define DBGMSG(msg) \
	movb    $msg, %al ; \
	call    chr
#else /* !DEBUG */
#define DBGMSG(msg)
#endif /* !DEBUG */
d71 1
a71 1
	.text
a76 4
	cli	# disable interrupts w/o stack
	/*
	 * os-bs and other mbrs pass us part entry in %ds:%si
	 */
d80 1
a80 1
	ljmp $BOOTBIOS, $start1
d83 7
a89 2
	# set up stack(%ss:%esp)
	movl	$BOOTSEG, %ax
a93 2
	sti	# we have stack, do ints

d99 5
a103 3
	pushl	%dx
	movl	$0x00e3, %ax
	movl	SERIAL, %dx
d105 2
a106 1
	popl	%dx
d109 6
a115 2
	DBGMSG(CHAR_S)

d118 1
d123 15
a137 4
	DBGMSG(CHAR_F)
	# set up %ds
	pushl	%cs
	popl	%ds
d141 4
a144 1
	jmp	doload
d147 19
a165 23
hd:
	DBGMSG(CHAR_H)
	# movl	%si, %bx
	# movb	1(%ebx), %dh	# head
	.byte   0x8a, 0x74, 0x01
	# movl	2(%ebx), %ecx	# sect, cyl (+ 2 bytes junk in top word)
	.byte   0x8b, 0x4c, 0x02
	# movb	4(%ebx), %al	# partition type
	.byte   0x8a, 0x44, 0x04
	cmpb	$BSDPART, %al
	# set up %ds
	pushl	%cs
	popl	%ds
	je	doload		# we are not a MBR

	movl	$signature, %esi
	cmpl	$SIGNATURE, (%esi)
	je	pt_ok
	DBGMSG(CHAR_P)

pt_ok:
	/* find the first active partition */
	DBGMSG(CHAR_L)
d167 1
a167 1
	movl	$PARTSTART, %esi
d172 2
a173 1
	cmpb	$BOOTABLE, (%esi)
d176 2
a177 1
	addl	$PARTSZ, %esi
d181 1
d185 12
a198 1
	DBGMSG(CHAR_2)
d200 1
a200 1
	movb	1(%esi), %dh /* head */
d202 3
a204 1
	movl	2(%esi), %ecx /*sect, cyl (+ 2 bytes junk in top word) */
d206 4
a209 5
	cmpb	$BSDPART, 4(%esi)
	jne	foreign	/* foreign partition */
#endif
doload:
	call	load
d211 3
a213 9
	DBGMSG(CHAR_G)

	# ljmp to the second stage boot loader (boot2).
	# After ljmp, %cs is BOOTSEG and boot1 (512 bytes) will be used
	# as an internal buffer "intbuf".

	data32
	ljmp	$BOOTSEG, $_C_LABEL(boot2)
	/* not reached */
a214 2
#ifndef	NOHD
foreign:
d216 1
a216 4
	DBGMSG(CHAR_R)
	data32
	pushl	%ecx
	movl	$BOOTRELOC, %ax
d222 2
a223 1
	movl	$0x100, %cx
a226 2
	data32
	popl	%ecx
d229 1
a229 1
	ljmp $BOOTRELOC, $start2
d232 18
a249 3
	/*** set up %es, (where we will load boot2 to) ***/
	pushl	$BOOTBIOS
	popl	%es
d251 2
d254 8
a261 1
	call	load
d263 1
a263 3
	DBGMSG(CHAR_D)
	ljmp	$0, $BOOTBIOS << 4
	/* not reached */
d265 10
d276 2
a277 18
/*
# BIOS call "INT 0x13 Function 0x2" to read sectors from disk into memory
#       Call with       %ah = 0x2
#                       %al = number of sectors
#                       %ch = cylinder
#                       %cl = sector
#                       %dh = head
#                       %dl = drive (0x80 for hard disk, 0x0 for floppy disk)
#                       %es:%bx = segment:offset of buffer
#       Return:
#                       %al = 0x0 on success; err code on failure
*/
load:
	movl	$0x200 | LOADSZ, %ax	/* number of blocks */
	xorl	%bx, %bx		/* put it at BOOTSEG:0 */
	int	$0x13
	jc	read_error
	ret
d287 1
d289 1
d296 1
a296 1
chr:
a312 2

#ifndef SERIAL
a314 7
	movb	$0x0e, %ah
	data32
	movl	$0x0001, %ebx
	int	$0x10
	data32
	popl	%ebx
#else
a316 16
	movb	$0x01, %ah
	movl	SERIAL, %edx
	int	$0x14
	data32
	popl	%edx
#endif
	data32
	popl	%eax
	ret

/*
 * Display string
 */
message:
	data32
	pushl	%eax
a319 1
	addr32
d324 11
a334 1
	call	chr
d341 4
d346 1
d398 1
a398 1
	xorb	%al, %al
d413 11
d426 1
a426 1
enoboot: .asciz		"No partition to boot\r\n"
a440 1
signature:
@


1.4.2.2
log
@mostly working now.
some probs w/ prot->real--<some bios things done>--real->prot
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.4.2.1 1996/09/17 09:34:13 mickey Exp $	*/
d70 2
d73 1
d76 1
a76 1
BOOTRELOC	=	0x7a0	# segment where to relocate
d78 1
d81 2
a82 2
BSDPART		=	0xA5	# value of boot_ind, means bsd partition
BOOTABLE	=	0x80	# value of boot_flag, means bootable partition
a91 1
CHAR_B		=	':'	# booting
d101 2
a102 2
	.file	"start.S"
	.code16
d105 1
d113 1
d118 3
a120 2
	movw	$BOOTBIOS, %ax
	movw	%ax, %ss
d123 2
d126 1
a126 3
	movw	%ax, %es

	sti	# we have stack, do ints
d130 3
a132 3
	pushw	%dx
	movw	$0x00e3, %ax
	movw	SERIAL, %dx
d134 1
a134 1
	popw	%dx
d148 4
a151 3
	pushw	%cs
	popw	%ds
	movw	$0x0002, %cx	# cyl 0, sector 1
d158 6
a163 1
	# movb	4(%si), %al	# partition type
d166 4
a169 1
	je	found		# we are not a MBR
d171 2
a172 8
	# set up %ds
	pushw	%cs
	popw	%ds
	xorw	%bx, %bx
	# cmpw	$SIGNATURE, (%bx)
	.byte	0x81, 0xbf
	.word	signature
	.word	SIGNATURE
d179 4
a182 2
	movw	$pt, %si
	movw	$NUMPART, %cx
d184 2
a185 3
	# movb	(%si), %al
	.byte	0x8a, 0x44, 0x00
	cmpb	$BOOTABLE, %al
d187 2
a188 1
	addw	$PARTSZ, %si
d190 2
a191 1
	movw	$enoboot, %si
d198 4
a201 6
	# movb	1(%si), %dh	# head
	.byte   0x8a, 0x74, 0x01
	# movw	2(%si), %cx	# sect, cyl
	.byte   0x8b, 0x4c, 0x02
	# movb	4(%si), %al	# partition type
	.byte   0x8a, 0x44, 0x04
d203 1
a203 4
	# set up %ds
	pushw	%cs
	popw	%ds
	cmpb	$BSDPART, %al
d211 2
a212 2
	# jmp to the second stage boot loader (boot2).
	# After ljmp, %cs is BOOTBIOS and boot1 (512 bytes) will be used
d215 2
a216 1
	jmp	boot2
d223 9
a231 8
	pushw	%es
	pushw	%cx
	pushw	%si
	pushw	$BOOTRELOC
	popw	%es
	xorw	%si, %si
	xorw	%di, %di
	movw	$0x100, %cx
d234 5
a238 5
	movsw
	popw	%cx
	popw	%si
	popw	%es
	# jump to the relocated code
d242 5
a249 1
	# jump to the new code (%ds:%si is at he right point)
d267 2
a268 2
	movw	$0x200 | LOADSZ, %ax	/* number of blocks */
	xorw	%bx, %bx		/* put it at BOOTBIOS:0 */
d278 2
a279 1
	movw	$eread, %si
d285 1
a285 1
#	message: write the error message in %ds:%si to console
d303 2
a304 1
	pushw	%ax
d307 2
a308 1
	pushw	%bx
d310 2
a311 1
	movw	$0x0001, %bx
d313 2
a314 1
	popw	%bx
d316 2
a317 1
	pushw	%dx
d319 1
a319 1
	movw	SERIAL, %dx
d321 2
a322 1
	popw	%dx
d324 2
a325 1
	popw	%ax
d332 2
a333 3
#ifndef	DEBUG
	pushw	%ax
#endif
d337 1
d340 1
d344 1
d348 2
a349 3
#ifndef	DEBUG
	popw	%ax
#endif
d353 1
a353 1
	jmp	boot2
d361 2
a362 6
boot2:
	pushw	%cs
	pushw	%cs
	pushw	%cs
	popw	%ds
	popw	%es
d364 5
a368 1
	popw	%ax
d370 1
d375 1
d377 1
d380 1
d387 1
d389 2
a392 1
	DBGMSG(CHAR_B)
d394 1
a396 2
	.code32

d407 1
a407 2
	jmp	_C_LABEL(boot)
	#call	_C_LABEL(boot)
d422 1
a422 2
	. = _C_LABEL(boot1) + 0x1be	# starting address of partition table
pt:
@


1.4.2.3
log
@working now. only start.S requires as.new.
tested w/ floppy, expected to work w/ hd too....
/boot is coming soon.
DEBUG enabled!!!
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.4.2.2 1996/09/24 09:35:51 mickey Exp $	*/
a70 1
BOOTSEG		=	0x0100	# boot placement
d77 2
a78 3
BSDPART		=	0xA5	# OpenBSD partition
OLDBSDPART	=	0xA5	# BSD partition
BOOTABLE	=	0x80	# bootable partition
a99 1
	.globl	boot2
d113 1
a113 1
	movw	$BOOTSEG, %ax
d136 1
a136 1
	jnz	1f
d139 1
d144 3
a146 3
	movw	$0x0001, %cx	# cyl 0, sector 1
	xorb	%dh, %dh	# head
	jmp	3f
d149 1
a149 1
1:
d154 1
a154 1
	je	2f		# we are not a MBR
d164 1
a164 1
	je	1f
d167 1
a167 1
1:
d172 1
a172 1
1:
d176 1
a176 1
	je	2f
d178 1
a178 1
	loop	1b
d184 1
a184 1
2:
d197 1
a197 1
	jne	1f	/* foreign partition */
d199 1
a199 1
3:
d208 1
a208 1
	ljmp	$BOOTSEG, $boot2
d212 1
a212 1
1:
d217 1
d227 1
d273 1
a273 1
	.globl	chr
a333 1
#if 0
d352 1
a352 1
	movw	%ax, _C_LABEL(Gdt)+(8*gdt_index)+2; \
d364 1
d380 3
a382 2
	call	_C_LABEL(boot)
#endif
a414 4


	.asciz	"boot2"

@


1.4.2.4
log
@reflect recent changes to libsa
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.4.2.3 1996/09/26 12:11:40 mickey Exp $	*/
a391 2
prompt:	.asciz		"OpenBSD?"

a392 2
	nop

@


1.4.2.5
log
@new boots w/ libsa using.
new libsa required too, no commit yet.
this one is to mark the step. but it works for me (:
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.4.2.4 1996/10/23 08:37:52 mickey Exp $	*/
a68 2
	.file	"start.S"

a69 4
#include <machine/specialreg.h>

#define addr32  .byte 0x67
#define data32  .byte 0x66
d78 2
a79 2
BSDPART		=	0xA6	# OpenBSD partition
OLDBSDPART	=	0xA5	# {386,Net,Free}BSD partition
d90 1
d93 2
a94 3
#define DBGMSG(msg)		\
	movb    $msg, %al;	\
	data32;			\
d100 3
a102 5
	.text

	.globl	_boot1
	.globl	_boot2
	.globl	_boot
d112 1
a112 2
	data32
	ljmp $BOOTBIOS, $1f
d114 1
a114 1
1:
d116 2
a117 3
	movl	$BOOTSEG, %ax
	movl	%ax, %ss
	data32
d121 1
a121 1
	movl	%ax, %es
d127 3
a129 3
	pushl	%edx
	movl	$0x00e3, %ax
	movl	SERIAL, %dx
d131 1
a131 1
	popl	%edx
d144 3
a146 3
	pushl	%cs
	popl	%ds
	movl	$0x0001, %cx	# cyl 0, sector 1
d156 1
a156 1
	je	2f		# we are MBR !
d159 3
a161 3
	pushl	%cs
	popl	%ds
	xorl	%bx, %bx
d172 2
a173 4
	data32
	movl	$pt, %esi
	data32
	movl	$NUMPART, %ecx
d179 1
a179 1
	addl	$PARTSZ, %esi
d181 1
a181 2
	data32
	movl	$enoboot, %esi
d196 2
a197 2
	pushl	%cs
	popl	%ds
a201 1
	data32
d210 1
a210 2
	data32
	ljmp	$BOOTSEG, $_boot2
d217 7
a223 10
	pushl	%es
	data32
	pushl	%ecx
	data32
	movl	$BOOTRELOC, %eax
	movl	%ax, %es
	xorl	%si, %si
	xorl	%di, %di
	data32
	movl	$0x100, %ecx
d226 3
a228 4
	movsl
	data32
	popl	%ecx
	popl	%es
d230 1
a230 2
	data32
	ljmp $BOOTRELOC, $1f
d232 1
a232 2
1:
	data32
a236 1
	data32
d254 2
a255 3
	data32
	movl	$0x200 | LOADSZ, %eax	/* number of blocks */
	xorl	%bx, %bx		/* put it at BOOTBIOS:0 */
a257 1
	data32
d265 1
a265 1
	movl	$eread, %si
a266 1
	data32
d289 1
a289 2
	data32
	pushl	%ax
d292 1
a292 2
	data32
	pushl	%bx
d294 1
a294 2
	data32
	movl	$0x001f, %bx
d296 1
a296 2
	data32
	popl	%bx
d298 1
a298 2
	data32
	pushl	%dx
d300 1
a300 2
	data32
	movl	SERIAL, %dx
d302 1
a302 2
	data32
	popl	%dx
d304 1
a304 3
	data32
	popl	%ax
	data32
d311 5
a315 2
	data32
	pushl	%ax
a316 1
1:
d319 1
a319 2
	jz	1f
	data32
d321 7
a327 5
	jmp	1b
1:
	data32
	popl	%ax
	data32
a328 1

d331 1
a331 1
	jmp	$_boot2
d334 48
d420 1
a420 79
	.ascii	"\nboot2:\n"

	.data
	.globl  _bootdev
_bootdev:	.long   0
	.globl  _boothowto
_boothowto:	.long   0
	.globl  _cyloffset
_cyloffset:	.long   0

/*
 *
 */

/* Conventional GDT indexes. */
BOOT_CS_INDEX	=	3
BOOT_CS16_INDEX	=	5
BOOT_DS_INDEX	=	4

	.globl	_ourseg
	.globl	_Gdt
	.globl	_Gdtr
	.globl	_edata
	.globl	_end

	.text
ENTRY(boot2)
	pushl	%cs
	pushl	%cs
	pushl	%cs
	popl	%ds
	popl	%es
	data32
	xorl	%eax, %eax
	popl	%ax
	data32
	addr32
	movl	%eax, _C_LABEL(ourseg)
	data32
	shll	$4, %eax

	/* fix up GDT entries for bootstrap */
#define FIXUP(gdt_index) \
	addr32; \
	movl	%eax, _C_LABEL(Gdt)+(8*gdt_index)+2; /* actualy movw %ax */ \
	addr32; \
	movb	%bl, _C_LABEL(Gdt)+(8*gdt_index)+4

	data32
	shldl	$16, %eax, %ebx
	FIXUP(BOOT_CS_INDEX)
	FIXUP(BOOT_CS16_INDEX)
	FIXUP(BOOT_DS_INDEX)

	/* fix up GDT pointer */
	data32
	addl	$_C_LABEL(Gdt), %eax
	data32
	addr32
	movl	%eax, _C_LABEL(Gdtr)+2

	/* change to protected mode */
	data32
	call	_C_LABEL(real_to_prot)

	/* clear the bss */
	movl	$_C_LABEL(edata), %edi
	movl	$_C_LABEL(end), %ecx
	subl	%edi, %ecx
	xorb	%al, %al
	rep
	stosb

	movzbl	%dl, %edx	/* discard head (%dh) and random high bits */
	pushl	%edx
	call	_boot

	hlt
	cli
@


1.3
log
@do boot from active partition.
this tested w/ DOS(win95), and BSD.
@
text
@d117 1
a117 1
	cmpb	$0x80, %dl
d119 1
a119 1
	jae	hd
d142 1
a142 1
	movb	$0x00, %dl
a183 5
#else /* !DOSREAD */
	movb	$0xff, %dl
	jmp	_C_LABEL(boot2)

#endif	/* DOSREAD */
d252 1
a252 1
	cmpb	$0x80, %dl	/* no concurent dos on floppy */
d254 1
a254 1
	jl	dobsd
d348 4
d413 1
a413 1
#ifdef	DEBUG
d424 1
d443 1
@


1.2
log
@From NetBSD PR#1133:
add '?' to list available files at boot.
@
text
@d1 1
d4 3
a6 1
/*
d61 1
a61 1
BOOTSEG		=	0x0100	# boot will be loaded here (below 640K)
d109 1
a109 1
#ifdef	DEBUG
d115 1
a115 1

d120 2
a121 1

d124 1
a124 1
#ifdef	DEBUG
d132 1
a132 1
#ifdef	DEBUG
d145 2
a146 1

a158 6
#ifdef	DEBUG
	data32
	movl	$five, %esi
	data32
	call	message
#endif
a160 1
	/*mov	$0x0080, %edx*/
d165 1
a165 1
	/***# find the first 386BSD partition *****/
d172 1
a172 2
	movb    %es:4(%ebx), %al
	cmpb	$BSDPART, %al
d183 1
d185 2
a186 3
      movb    $0xff, %dl
      jmp     _C_LABEL(boot2)
#endif /* DOSREAD */
d188 1
a189 1
#ifndef DOSREAD
d202 1
a202 1

d208 31
d240 4
d245 2
d252 2
d256 11
a266 3
	# ljmp to the second stage boot loader (boot2).
	# After ljmp, %cs is BOOTSEG and boot1 (512 bytes) will be used
	# as an internal buffer "intbuf".
d268 2
d277 4
a322 1
#endif
a353 1

d374 1
a374 1
	movl	%eax, _C_LABEL(Gdt)+(8*gdt_index)+2;	/* actually movw %ax */ \
d415 1
d419 1
d424 1
a424 1
#endif	DEBUG
@


1.1
log
@Initial revision
@
text
@d73 1
d186 4
d192 1
d273 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
