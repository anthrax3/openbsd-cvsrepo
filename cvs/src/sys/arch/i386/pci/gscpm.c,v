head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.22
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.20
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.16
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.12
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.14
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.6
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2012.08.16.18.42.04;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.02.04.37.42;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.02.03.51.39;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.12.23.14.27;	author dim;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.11.20.57.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.26.20.34.26;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.05.19.02.33;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.26.18.37.54;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.15.20.28.53;	author grange;	state Exp;
branches;
next	;


desc
@@


1.9
log
@we are past the point where timecounters may disappear
ok miod
@
text
@/*	$OpenBSD: gscpm.c,v 1.8 2010/08/02 04:37:42 deraadt Exp $	*/
/*
 * Copyright (c) 2004 Alexander Yurchenko <grange@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * National Semiconductor Geode SC1100 SMI/ACPI module.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/timetc.h>

#include <machine/bus.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <i386/pci/gscpmreg.h>

struct gscpm_softc {
	struct device sc_dev;

	pci_chipset_tag_t sc_pc;
	pcitag_t sc_tag;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_acpi_ioh;
};

int	gscpm_match(struct device *, void *, void *);
void	gscpm_attach(struct device *, struct device *, void *);

void	gscpm_setperf(int);

u_int	gscpm_get_timecount(struct timecounter *tc);

struct timecounter gscpm_timecounter = {
	gscpm_get_timecount,	/* get_timecount */
	0,			/* no poll_pps */
	0xffffff,		/* counter_mask */
	3579545,		/* frequency */
	"GSCPM",		/* name */
	1000			/* quality */
};

struct cfattach gscpm_ca = {
	sizeof (struct gscpm_softc),
	gscpm_match,
	gscpm_attach
};

struct cfdriver gscpm_cd = {
	NULL, "gscpm", DV_DULL
};

#if 0
static void *gscpm_cookie;	/* XXX */
#endif

int
gscpm_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa = aux;

	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_NS &&
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_NS_SC1100_SMI)
		return (1);

	return (0);
}

void
gscpm_attach(struct device *parent, struct device *self, void *aux)
{
	struct gscpm_softc *sc = (struct gscpm_softc *)self;
	struct pci_attach_args *pa = aux;
	pcireg_t csr, acpibase;

	sc->sc_pc = pa->pa_pc;
	sc->sc_tag = pa->pa_tag;
	sc->sc_iot = pa->pa_iot;

	/* Enable I/O space */
	csr = pci_conf_read(sc->sc_pc, sc->sc_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(sc->sc_pc, sc->sc_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_IO_ENABLE);

	/* Map ACPI registers */
	acpibase = pci_conf_read(sc->sc_pc, sc->sc_tag, GSCPM_ACPIBASE);
	if (PCI_MAPREG_IO_ADDR(acpibase) == 0 ||
	    bus_space_map(sc->sc_iot, PCI_MAPREG_IO_ADDR(acpibase),
	    GSCPM_ACPISIZE, 0, &sc->sc_acpi_ioh)) {
		printf(": failed to map ACPI registers\n");
		return;
	}

	printf("\n");

	/* Hook into the kern_tc */
	gscpm_timecounter.tc_priv = sc;
	tc_init(&gscpm_timecounter);

/* XXX: disabled due to unresolved yet hardware errata */
#if 0
	/* Hook into the hw.setperf sysctl */
	gscpm_cookie = sc;
	cpu_setperf = gscpm_setperf;
#endif

}

u_int
gscpm_get_timecount(struct timecounter *tc)
{
	struct gscpm_softc *sc = tc->tc_priv;

	return (bus_space_read_4(sc->sc_iot, sc->sc_acpi_ioh, GSCPM_PM_TMR));
}

#if 0
void
gscpm_setperf(int level)
{
	struct gscpm_softc *sc = gscpm_cookie;
	int i;
	u_int32_t pctl;

	pctl = bus_space_read_4(sc->sc_iot, sc->sc_acpi_ioh, GSCPM_P_CNT);

	if (level == 100) {
		/* 100 is a maximum perfomance, disable throttling */
		pctl &= ~GSCPM_P_CNT_THTEN;
	} else {
		for (i = 0; i < GSCPM_THT_LEVELS; i++)
			if (level >= gscpm_tht[i].level)
				break;
		pctl = (0xf0 | GSCPM_P_CNT_THTEN |
		    GSCPM_P_CNT_CLK(gscpm_tht[i].value));
	}

	/* Update processor control register */
	bus_space_write_4(sc->sc_iot, sc->sc_acpi_ioh, GSCPM_P_CNT, pctl);
}
#endif
@


1.8
log
@correct header file stuff; pointed out by tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.7 2010/08/02 03:51:39 deraadt Exp $	*/
a25 1
#ifdef __HAVE_TIMECOUNTER
a26 1
#endif
a49 1
#ifdef __HAVE_TIMECOUNTER
a59 1
#endif	/* __HAVE_TIMECOUNTER */
a113 1
#ifdef __HAVE_TIMECOUNTER
a116 1
#endif	/* __HAVE_TIMECOUNTER */
a126 1
#ifdef __HAVE_TIMECOUNTER
a133 1
#endif	/* __HAVE_TIMECOUNTER */
@


1.7
log
@needs explicit proc.h; Nathanael Rensen
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.6 2006/12/12 23:14:27 dim Exp $	*/
a25 2
#include <sys/proc.h>
#include <sys/sysctl.h>
@


1.6
log
@Complete gwk's previous patch to stop setperf methods from returning
errors to userland: make all cpu_setperf functions return void.

Tested by many, ok gwk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.5 2006/12/11 20:57:40 deraadt Exp $	*/
d26 1
@


1.5
log
@do not bus_space_map devices which are at address 0; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.4 2006/01/26 20:34:26 mickey Exp $	*/
d51 1
a51 1
int	gscpm_setperf(int);
d145 1
a145 1
int
a166 2

	return (0);
@


1.4
log
@make timecounter behave; grange@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.3 2004/10/05 19:02:33 grange Exp $	*/
d110 2
a111 1
	if (bus_space_map(sc->sc_iot, PCI_MAPREG_IO_ADDR(acpibase),
@


1.3
log
@Includes nit.
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.2 2004/09/26 18:37:54 grange Exp $	*/
a137 1
	u_int u1, u2, u3;
d139 1
a139 10
	u2 = bus_space_read_4(sc->sc_iot, sc->sc_acpi_ioh, GSCPM_PM_TMR);
	u3 = bus_space_read_4(sc->sc_iot, sc->sc_acpi_ioh, GSCPM_PM_TMR);
	do {
		u1 = u2;
		u2 = u3;
		u3 = bus_space_read_4(sc->sc_iot, sc->sc_acpi_ioh,
		    GSCPM_PM_TMR);
	} while (u1 > u2 || u2 > u3);

	return (u2);
@


1.2
log
@Minor tweaks to unify with other timecounters.
@
text
@d1 1
a1 1
/*	$OpenBSD: gscpm.c,v 1.1 2004/09/15 20:28:53 grange Exp $	*/
a32 1
#include <dev/pci/pcidevs.h>
d35 1
@


1.1
log
@gscpm(4) -- National Semiconductor Geode SC1100 SMI/ACPI module driver.
Provides a timecounter for kern_tc. There's also code for cpu throttling tho
it's not tested due to the hardware errata.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 2
a61 2
	14318180 / 4,		/* frequency */
	"Geode SC1100",		/* name */
@

