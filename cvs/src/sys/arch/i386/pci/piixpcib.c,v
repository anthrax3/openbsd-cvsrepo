head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.6
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2015.04.12.18.37.54;	author mlarkin;	state Exp;
branches;
next	1.11;
commitid	5ST94uMTezmXYdhY;

1.11
date	2014.09.14.14.17.23;	author jsg;	state Exp;
branches;
next	1.10;
commitid	uzzBR7hz9ncd4O6G;

1.10
date	2014.07.08.17.19.24;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	EF98ch02VpFassUi;

1.9
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.30.16.15.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.08.20.17.54;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.20.22.05.41;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.31.12.26.36;	author sobrado;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.28.17.05.09;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.29.02.40.24;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.26.01.43.13;	author gwk;	state Exp;
branches;
next	;


desc
@@


1.12
log
@
Bring PAE code back to life, in a different form. This diff (via bluhm then
to deraadt, then myself) brings the PAE pmap on i386 (not touched in any
significant way for years) closer to the current non-PAE pmap and allows
us to take a big next step toward better i386 W^X in the kernel (similar to
what we did a few months ago on amd64). Unlike the original PAE pmap, this
diff will not be supporting > 4GB physical memory on i386 - this effort is
specifically geared toward providing W^X (via NX) only.

There still seems to be a bug removing certain pmap entries when PAE is
enabled, so I'm leaving PAE mode disabled for the moment until we can
figure out what is going on, but with this diff in the tree hopefully
others can help.

The pmap functions now operate through function pointers, due to the need
to support both non-PAE and PAE forms. My unscientific testing showed
less than 0.3% (a third of a percent) slowdown with this approach during
a base build.

Discussed for months with guenther, kettenis, and deraadt.

ok kettenis@@, deraadt@@
@
text
@/*	$OpenBSD: piixpcib.c,v 1.11 2014/09/14 14:17:23 jsg Exp $ */

/*
 * Copyright (c) 2007 Stefan Sperling <stsp@@stsp.in-berlin.de>
 * Copyright (c) 2004 Alexander Yurchenko <grange@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *-
 * Copyright (c) 2004, 2006 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Minoura Makoto, Matthew R. Green, and Jared D. McNeill.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Special driver for the Intel PIIX4 bridges that attaches
 * instead of pcib(4). In addition to the core pcib(4) functionality this
 * driver provides support for Intel SpeedStep technology present in
 * some Pentium III CPUs.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sysctl.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <machine/cpu.h>
#include <machine/cpufunc.h>
#include <machine/kvm86.h>

/* 0x47534943 == "ISGE" ('Intel Speedstep Gate E') */
#define	PIIXPCIB_ISGE			0x47534943
#define	PIIXPCIB_IST_CALL		0x0000e980
#define	PIIXPCIB_GSIC_CMD		0x82
#define	PIIXPCIB_DEFAULT_COMMAND	\
	((PIIXPCIB_ISGE & 0xffffff00) | (PIIXPCIB_GSIC_CMD & 0xff))

#define	PIIXPCIB_DEFAULT_SMI_PORT	0xb2
#define	PIIXPCIB_DEFAULT_SMI_DATA	0xb3

#define	PIIXPCIB_GETSTATE		1
#define	PIIXPCIB_SETSTATE		2
#define	PIIXPCIB_SPEEDSTEP_HIGH		0
#define	PIIXPCIB_SPEEDSTEP_LOW		1

struct piixpcib_softc {
	struct device sc_dev;

	int		sc_sig;
	int		sc_smi_port;
	int		sc_smi_data;
	int		sc_command;
	int		sc_flags;

	int		state;
};

int	piixpcib_match(struct device *, void *, void *);
void	piixpcib_attach(struct device *, struct device *, void *);

void	piixpcib_setperf(int);
int	piixpcib_cpuspeed(int *);

int	piixpcib_set_ownership(struct piixpcib_softc *);
int	piixpcib_configure_speedstep(struct piixpcib_softc *);
int	piixpcib_getset_state(struct piixpcib_softc *, int *, int);
void	piixpcib_int15_gsic_call(struct piixpcib_softc *);

/* arch/i386/pci/pcib.c */
extern void	pcibattach(struct device *, struct device *, void *);

/* arch/i386/i386/machdep.c */
#if !defined(SMALL_KERNEL)
extern void	p3_update_cpuspeed(void);
#endif

extern int cpu_pae;

struct cfattach piixpcib_ca = {
	sizeof(struct piixpcib_softc),
	piixpcib_match,
	piixpcib_attach
};

struct cfdriver piixpcib_cd = {
	NULL, "piixpcib", DV_DULL
};

struct piixpcib_softc *piixpcib_sc;
extern int setperf_prio;

const struct pci_matchid piixpcib_devices[] = {
	{ PCI_VENDOR_INTEL, PCI_PRODUCT_INTEL_82371AB_ISA}, /* PIIX4 */
	{ PCI_VENDOR_INTEL, PCI_PRODUCT_INTEL_82440MX_PM},  /* PIIX4 in MX440 */
};

void
piixpcib_int15_gsic_call(struct piixpcib_softc *sc)
{
	struct kvm86regs regs;
	int cmd;

	memset(&regs, 0, sizeof(struct kvm86regs));
	regs.eax = PIIXPCIB_IST_CALL;
	regs.edx = PIIXPCIB_ISGE;
	kvm86_simplecall(0x15, &regs);

	if (regs.eax == PIIXPCIB_ISGE) {
		sc->sc_sig = regs.eax;
		sc->sc_smi_port = regs.ebx & 0xff;

		cmd = (regs.ebx >> 16) & 0xff;
		/* GSIC may return cmd 0x80, should be PIIXPCIB_GSIC_CMD */
		if (cmd == 0x80)
			cmd = PIIXPCIB_GSIC_CMD;
		sc->sc_command = (sc->sc_sig & 0xffffff00) | (cmd & 0xff);

		sc->sc_smi_data = regs.ecx;
		sc->sc_flags = regs.edx;
	}
}

int
piixpcib_set_ownership(struct piixpcib_softc *sc)
{
	int rv;
	paddr_t pmagic;
	char magic[] = "Copyright (c) 1999 Intel Corporation";

	pmap_extract(pmap_kernel(), (vaddr_t)magic, &pmagic);

	__asm volatile(
		"movl $0, %%edi\n\t"
		"out %%al, (%%dx)\n"
		: "=D" (rv)
		: "a" (sc->sc_command),
		  "b" (0),
		  "c" (0),
		  "d" (sc->sc_smi_port),
		  "S" (pmagic)
	);

	return (rv ? ENXIO : 0);
}

int
piixpcib_configure_speedstep(struct piixpcib_softc *sc)
{
	int rv;

	sc->sc_sig = -1;

	/* setup some defaults */
	sc->sc_smi_port = PIIXPCIB_DEFAULT_SMI_PORT;
	sc->sc_smi_data = PIIXPCIB_DEFAULT_SMI_DATA;
	sc->sc_command = PIIXPCIB_DEFAULT_COMMAND;
	sc->sc_flags = 0;

	if (cpu_pae)
		return ENODEV;

	piixpcib_int15_gsic_call(sc);

	/* If signature doesn't match, bail out */
	if (sc->sc_sig != PIIXPCIB_ISGE)
		return ENODEV;

	if (piixpcib_set_ownership(sc) != 0) {
		printf(": unable to claim ownership from BIOS, "
		    "SpeedStep disabled");
		return ENXIO;
	}

	rv = piixpcib_getset_state(sc, &sc->state, PIIXPCIB_GETSTATE);
	if (rv != 0) {
		printf(": cannot determine CPU power state, "
		    "SpeedStep disabled");
		return ENXIO;
	}

	/* save the sc for IO tag/handle */
	piixpcib_sc = sc;

	return 0;
}

int
piixpcib_match(struct device *parent, void *match, void *aux)
{
	if (pci_matchbyid((struct pci_attach_args *)aux, piixpcib_devices,
	    sizeof(piixpcib_devices) / sizeof(piixpcib_devices[0])))
		return (2);	/* supersede pcib(4) */
	return (0);
}

void
piixpcib_attach(struct device *parent, struct device *self, void *aux)
{
	struct piixpcib_softc *sc = (struct piixpcib_softc *)self;

	if (setperf_prio < 2) {
		/* Set up SpeedStep. */
		if (piixpcib_configure_speedstep(sc) == 0) {
			printf(": SpeedStep");

			/* Hook into hw.setperf sysctl */
			cpu_setperf = piixpcib_setperf;
			setperf_prio = 2;
		}
	}

	/* Provide core pcib(4) functionality */
	pcibattach(parent, self, aux);
}

int
piixpcib_getset_state(struct piixpcib_softc *sc, int *state, int function)
{
	int new_state;
	int rv;
	int eax;

#ifdef DIAGNOSTIC
	if (function != PIIXPCIB_GETSTATE &&
	    function != PIIXPCIB_SETSTATE) {
		printf("%s: %s called with invalid function %d\n",
		    sc->sc_dev.dv_xname, __func__, function);
		return EINVAL;
	}
#endif

	__asm volatile(
		"movl $0, %%edi\n\t"
		"out %%al, (%%dx)\n"
		: "=a" (eax),
		  "=b" (new_state),
		  "=D" (rv)
		: "a" (sc->sc_command),
		  "b" (function),
		  "c" (*state),
		  "d" (sc->sc_smi_port),
		  "S" (0)
	);

	*state = new_state & 1;

	switch (function) {
	case PIIXPCIB_GETSTATE:
		if (eax)
			return ENXIO;
		break;
	case PIIXPCIB_SETSTATE:
		if (rv)
			return ENXIO;
		break;
	}

	return 0;
}

void
piixpcib_setperf(int level)
{
	struct piixpcib_softc *sc;
	int new_state;
	int tries, rv, s;

 	sc = piixpcib_sc;

#ifdef DIAGNOSTIC
	if (sc == NULL) {
		printf("%s: no cookie", __func__);
		return;
	}
#endif

	/* Only two states are available */
	if (level <= 50)
		new_state = PIIXPCIB_SPEEDSTEP_LOW;
	else
		new_state = PIIXPCIB_SPEEDSTEP_HIGH;

	if (sc->state == new_state)
		return;

	tries = 5;
	s = splhigh();

	do {
		rv = piixpcib_getset_state(sc, &new_state,
		    PIIXPCIB_SETSTATE);
		if (rv)
			delay(200);
	} while (rv && --tries);

	splx(s);

#ifdef DIAGNOSTIC
	if (rv)
		printf("%s: setting CPU power state failed",
		    sc->sc_dev.dv_xname);
#endif

	sc->state = new_state;

	/* Force update of hw.cpuspeed.
	 *
	 * XXX: First generation SpeedStep is only present in some
	 * Pentium III CPUs and we are lacking a reliable method to
	 * determine CPU freqs corresponding to low and high power state.
	 *
	 * And yes, I've tried it the way the Linux speedstep-smi
	 * driver does it, thank you very much. It doesn't work
	 * half the time (my machine has more than 4MHz ;-) and
	 * even crashes some machines without specific workarounds.
	 *
	 * So call p3_update_cpuspeed() from arch/i386/i386/machdep.c
	 * instead. Works fine on my Thinkpad X21.
	 *
	 * BUT: Apparently, if the bus is busy, the transition may be
	 * delayed and retried under control of evil SMIs we cannot
	 * control. So busy-wait a short while before updating hw.cpuspeed
	 * to decrease chances of picking up the old CPU speed.
	 * There seems to be no reliable fix for this.
	 */
	delay(200);
#if !defined(SMALL_KERNEL)
	p3_update_cpuspeed();
#endif
}
@


1.11
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.10 2014/07/08 17:19:24 deraadt Exp $ */
d118 2
d199 3
@


1.10
log
@decouple struct uvmexp into a new file, so that uvm_extern.h and sysctl.h
don't need to be married.
ok guenther miod beck jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.9 2014/03/29 18:09:29 guenther Exp $ */
a57 1
#include <sys/proc.h>
@


1.9
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.8 2013/05/30 16:15:01 deraadt Exp $ */
d60 2
@


1.8
log
@Enforce ca_activate tree-walks over the entire heirarchy for all events,
cleaning up some shutdown-hook related code on the way.
(A few drivers related to sparc are still skipped at kettenis' request)
ok kettenis mlarkin, tested by many others too
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.7 2010/07/08 20:17:54 deraadt Exp $ */
d170 1
a170 1
	__asm __volatile(
d267 1
a267 1
	__asm __volatile(
@


1.7
log
@use config_activate_children to get down to the isa bus activation code
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.6 2010/04/20 22:05:41 tedu Exp $ */
d120 1
a120 3
	piixpcib_attach,
	NULL,
	config_activate_children
@


1.6
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.5 2009/10/31 12:26:36 sobrado Exp $ */
d120 3
a122 1
	piixpcib_attach
@


1.5
log
@s/Mhz/MHz/, MHz is a multiple of the SI unit hertz (whose symbol is Hz).
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.4 2008/06/26 05:42:11 ray Exp $ */
d58 1
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.3 2007/11/28 17:05:09 tedu Exp $ */
d348 1
a348 1
	 * half the time (my machine has more than 4Mhz ;-) and
@


1.3
log
@quite a bit of simplification by removing cpu classes.
also assume that 386 cpus are really unknown, and promote them to 486
instead of panic.
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.2 2007/05/29 02:40:24 tom Exp $ */
a33 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Fix compilation of kernels without I686_CPU: piixpcib is always
needed (not just for I686_CPU), but it and ichpcib only call the
update_cpuspeed functions for I686_CPU.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: piixpcib.c,v 1.1 2007/04/26 01:43:13 gwk Exp $ */
d119 1
a119 1
#if !defined(SMALL_KERNEL) && defined(I686_CPU)
d368 1
a368 1
#if !defined(SMALL_KERNEL) && defined(I686_CPU)
@


1.1
log
@Add a setperf mechanism for ich speedstep controlled by SMI on certain
parings of the Intel Pentium 3 and the ich southbridges. Written by
Stefan Sperling <stsp AT tsp DOT in-berlin DOT de> based on a driver in
NetBSD and sys/arch/i386/pci/ichpcib.c.
Tested my mpf@@ among others,
ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d119 1
d121 1
d368 1
d370 1
a371 1

@

