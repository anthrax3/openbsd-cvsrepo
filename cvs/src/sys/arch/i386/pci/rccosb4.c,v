head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.36
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.32
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.30
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.28
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.26
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.09.01.06.01.24;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	sjMHb60Eu7lEqMDW;

1.5
date	2014.07.12.18.44.42;	author tedu;	state Exp;
branches;
next	1.4;
commitid	uKVPYMN2MLxdZxzH;

1.4
date	2005.11.23.09.24.57;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.10.15.14.09;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.27.20.01.13;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.22.09.47.01;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fairly simple sizes for free()
@
text
@/*	$OpenBSD: rccosb4.c,v 1.5 2014/07/12 18:44:42 tedu Exp $	*/

/*
 * Copyright (c) 2004,2005 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Support for RCC South Bridge interrupt controller
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/intr.h>
#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>

#include <i386/pci/pcibiosvar.h>
#include <i386/pci/piixvar.h>
#include <i386/pci/rccosb4reg.h>

struct osb4_handle {
	struct piix_handle piix;

#define	osb4_iot	piix.ph_iot
	bus_space_handle_t osb4_ioh;
};

int	osb4_getclink(pciintr_icu_handle_t, int, int *);
int	osb4_get_intr(pciintr_icu_handle_t, int, int *);
int	osb4_set_intr(pciintr_icu_handle_t, int, int);

const struct pciintr_icu osb4_pci_icu = {
	osb4_getclink,
	osb4_get_intr,
	osb4_set_intr,
	piix_get_trigger,
	piix_set_trigger,
};

int
osb4_init(pci_chipset_tag_t pc, bus_space_tag_t iot, pcitag_t tag,
    pciintr_icu_tag_t *ptagp, pciintr_icu_handle_t *phandp)
{
	struct osb4_handle *ph;

	ph = malloc(sizeof(*ph), M_DEVBUF, M_NOWAIT);
	if (ph == NULL)
		return (1);

	ph->piix.ph_iot = iot;
	ph->piix.ph_pc = pc;
	ph->piix.ph_tag = tag;

	if (bus_space_map(iot, OSB4_PIAIR, 2, 0, &ph->osb4_ioh)) {
		free(ph, M_DEVBUF, sizeof *ph);
		return (1);
	}

	if (bus_space_map(iot, OSB4_REG_ELCR, 2, 0, &ph->piix.ph_elcr_ioh)) {
		free(ph, M_DEVBUF, sizeof *ph);
		return (1);
	}

	*ptagp = &osb4_pci_icu;
	*phandp = ph;
	return (0);
}

int
osb4_getclink(pciintr_icu_handle_t v, int link, int *clinkp)
{
	if (OSB4_LEGAL_LINK(link - 1)) {
		*clinkp = link;
 		if (link <= OSB4_PISP)
			*clinkp |= PCI_INT_VIA_ISA;
		return (0);
	}

	return (1);
}

int
osb4_get_intr(pciintr_icu_handle_t v, int clink, int *irqp)
{
	struct osb4_handle *ph = v;
	int link = clink & 0xff;

	if (!OSB4_LEGAL_LINK(link))
		return (1);

	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 0, link);
	*irqp = bus_space_read_1(ph->osb4_iot, ph->osb4_ioh, 1) & 0xf;
	if (*irqp == 0)
		*irqp = I386_PCI_INTERRUPT_LINE_NO_CONNECTION;

	return (0);
}

int
osb4_set_intr(pciintr_icu_handle_t v, int clink, int irq)
{
	struct osb4_handle *ph = v;
	int link = clink & 0xff;

	if (!OSB4_LEGAL_LINK(link) || !OSB4_LEGAL_IRQ(irq & 0xf))
		return (1);

	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 0, link);
	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 1, irq & 0xf);

	return (0);
}
@


1.5
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: rccosb4.c,v 1.4 2005/11/23 09:24:57 mickey Exp $	*/
d82 1
a82 1
		free(ph, M_DEVBUF, 0);
d87 1
a87 1
		free(ph, M_DEVBUF, 0);
@


1.4
log
@resolve a couple of problems in mpbios-mapped interrupts:
- synthesise isa mappings (as 1-1) should those be missing in mpbios;
- for rcc osb* firce "special" ints into isa mappings always.
niklas@@ ok and testing by many since
@
text
@d1 1
a1 1
/*	$OpenBSD: rccosb4.c,v 1.3 2005/11/10 15:14:09 mickey Exp $	*/
d82 1
a82 1
		free(ph, M_DEVBUF);
d87 1
a87 1
		free(ph, M_DEVBUF);
@


1.3
log
@only 4 bits of an irq number are valid to set (just in case)
@
text
@d1 1
a1 1
/*	$OpenBSD: rccosb4.c,v 1.2 2005/10/27 20:01:13 mickey Exp $	*/
d101 2
d113 1
d115 1
a115 1
	if (!OSB4_LEGAL_LINK(clink))
d118 1
a118 1
	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 0, clink);
d130 1
d132 1
a132 1
	if (!OSB4_LEGAL_LINK(clink) || !OSB4_LEGAL_IRQ(irq & 0xf))
d135 1
a135 1
	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 0, clink);
@


1.2
log
@repair ops. looking at the doc i suppose had no doc and no good clue when wrote it; tested on osb5
@
text
@d1 1
a1 1
/*	$OpenBSD: rccosb4.c,v 1.1 2004/06/22 09:47:01 mickey Exp $	*/
d128 1
a128 1
	if (!OSB4_LEGAL_LINK(clink) || !OSB4_LEGAL_IRQ(irq))
d132 1
a132 1
	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 1, irq);
@


1.1
log
@support for rcc osb4 and csb5; tested on quad-zion and another box i have
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2004 Michael Shalayeff
d100 1
a100 1
		*clinkp = link - 1;
d115 2
a116 3
	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 0,
	    clink | OSB4_PIAIR_PMASK);
	*irqp = bus_space_read_1(ph->osb4_iot, ph->osb4_ioh, 1);
d131 1
a131 2
	bus_space_write_1(ph->osb4_iot, ph->osb4_ioh, 0,
	    clink | OSB4_PIAIR_PMASK);
@

