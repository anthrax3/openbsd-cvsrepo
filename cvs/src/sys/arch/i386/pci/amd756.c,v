head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.34
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.30
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.32
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.24
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.28
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.20
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.5
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.19.11.06.34;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.25.00.07.40;	author mickey;	state Exp;
branches
	1.2.2.1
	1.2.8.1;
next	1.1;

1.1
date	2000.11.07.18.21.22;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2001.04.18.16.08.21;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.03.28.10.31.04;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: amd756.c,v 1.4 2006/09/19 11:06:34 jsg Exp $	*/
/*	$NetBSD$	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1999, by UCHIYAMA Yasushi
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the developer may NOT be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Support for the Advanced Micro Devices AMD756 Peripheral Bus Controller.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/intr.h>
#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

#include <i386/pci/pcibiosvar.h>
#include <i386/pci/amd756reg.h>

struct viper_handle {
	bus_space_tag_t ph_iot;
	bus_space_handle_t ph_regs_ioh;
	pci_chipset_tag_t ph_pc;
	pcitag_t ph_tag;
};

int amd756_getclink(pciintr_icu_handle_t, int, int *);
int amd756_get_intr(pciintr_icu_handle_t, int, int *);
int amd756_set_intr(pciintr_icu_handle_t, int, int);
int amd756_get_trigger(pciintr_icu_handle_t, int, int *);
int amd756_set_trigger(pciintr_icu_handle_t, int, int);
#ifdef VIPER_DEBUG
static void amd756_pir_dump(struct viper_handle *);
#endif

const struct pciintr_icu amd756_pci_icu = {
	amd756_getclink,
	amd756_get_intr,
	amd756_set_intr,
	amd756_get_trigger,
	amd756_set_trigger,
};


int
amd756_init(pci_chipset_tag_t pc, bus_space_tag_t iot, pcitag_t tag,
    pciintr_icu_tag_t *ptagp, pciintr_icu_handle_t *phandp)
{
	struct viper_handle *ph;

	ph = malloc(sizeof(*ph), M_DEVBUF, M_NOWAIT);
	if (ph == NULL)
		return (1);

	ph->ph_iot = iot;
	ph->ph_pc = pc;
	ph->ph_tag = tag;

	*ptagp = &amd756_pci_icu;
	*phandp = ph;

#ifdef VIPER_DEBUG
	amd756_pir_dump(ph);
#endif

	return 0;
}

int
amd756_getclink(pciintr_icu_handle_t v, int link, int *clinkp)
{
	if (AMD756_LEGAL_LINK(link - 1) == 0)
		return (1);

	*clinkp = link - 1;
	return (0);
}

int
amd756_get_intr(pciintr_icu_handle_t v, int clink, int *irqp)
{
	struct viper_handle *ph = v;
	pcireg_t reg;
	int val;

	if (AMD756_LEGAL_LINK(clink) == 0)
		return (1);

	reg = AMD756_GET_PIIRQSEL(ph);
	val = (reg >> (4*clink)) & 0x0f;
	*irqp = (val == 0) ?
	    I386_PCI_INTERRUPT_LINE_NO_CONNECTION : val;

	return (0);
}

int
amd756_set_intr(pciintr_icu_handle_t v, int clink, int irq)
{
	struct viper_handle *ph = v;
	int val;
	pcireg_t reg;

	if (AMD756_LEGAL_LINK(clink) == 0 || AMD756_LEGAL_IRQ(irq) == 0)
		return (1);

	reg = AMD756_GET_PIIRQSEL(ph);
	amd756_get_intr(v, clink, &val);
	reg &= ~(0x000f << (4*clink));
	reg |= irq << (4*clink);
	AMD756_SET_PIIRQSEL(ph, reg);

	return 0;
}

int
amd756_get_trigger(pciintr_icu_handle_t v, int irq, int *triggerp)
{
	struct viper_handle *ph = v;
	int i, pciirq;
	pcireg_t reg;

	if (AMD756_LEGAL_IRQ(irq) == 0)
		return (1);

	for (i = 0; i <= 3; i++) {
		amd756_get_intr(v, i, &pciirq);
		if (pciirq == irq) {
			reg = AMD756_GET_EDGESEL(ph);
			if (reg & (1 << i))
				*triggerp = IST_EDGE;
			else
				*triggerp = IST_LEVEL;
			break;
		}
	}

	return 0;
}

int
amd756_set_trigger(pciintr_icu_handle_t v, int irq, int trigger)
{
	struct viper_handle *ph = v;
	int i, pciirq;
	pcireg_t reg;

	if (AMD756_LEGAL_IRQ(irq) == 0)
		return (1);

	for (i = 0; i <= 3; i++) {
		amd756_get_intr(v, i, &pciirq);
		if (pciirq == irq) {
			reg = AMD756_GET_PIIRQSEL(ph);
			if (trigger == IST_LEVEL)
				reg &= ~(1 << (4*i));
			else
				reg |= 1 << (4*i);
			AMD756_SET_PIIRQSEL(ph, reg);
			break;
		}
	}

	return (0);
}

#ifdef VIPER_DEBUG
static void
amd756_pir_dump(struct viper_handle *ph)
{
	int a, b;

	printf ("VIPER PCI INTERRUPT ROUTING REGISTERS:\n");

	a = AMD756_GET_EDGESEL(ph);
	b = AMD756_GET_PIIRQSEL(ph);

	printf ("TRIGGER: %02x, ROUTING: %04x\n", a, b);
}
#endif
@


1.4
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: amd756.c,v 1.3 2002/03/14 01:26:33 millert Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed by the NetBSD
 *     Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: amd756.c,v 1.2 2001/01/25 00:07:40 mickey Exp $	*/
d111 2
a112 6
amd756_init(pc, iot, tag, ptagp, phandp)
	pci_chipset_tag_t pc;
	bus_space_tag_t iot;
	pcitag_t tag;
	pciintr_icu_tag_t *ptagp;
	pciintr_icu_handle_t *phandp;
d135 1
a135 3
amd756_getclink(v, link, clinkp)
	pciintr_icu_handle_t v;
	int link, *clinkp;
d145 1
a145 3
amd756_get_intr(v, clink, irqp)
	pciintr_icu_handle_t v;
	int clink, *irqp;
d163 1
a163 3
amd756_set_intr(v, clink, irq)
	pciintr_icu_handle_t v;
	int clink, irq;
d182 1
a182 3
amd756_get_trigger(v, irq, triggerp)
	pciintr_icu_handle_t v;
	int irq, *triggerp;
d207 1
a207 3
amd756_set_trigger(v, irq, trigger)
	pciintr_icu_handle_t v;
	int irq, trigger;
d234 1
a234 2
amd756_pir_dump(ph)
	struct viper_handle *ph;
@


1.2
log
@put pci_intr_fixup.h into pcibiosvar.h; billions of tiny headers for nothing
@
text
@d1 1
a1 1
/*	$OpenBSD: amd756.c,v 1.1 2000/11/07 18:21:22 mickey Exp $	*/
d92 5
a96 5
int amd756_getclink __P((pciintr_icu_handle_t, int, int *));
int amd756_get_intr __P((pciintr_icu_handle_t, int, int *));
int amd756_set_intr __P((pciintr_icu_handle_t, int, int));
int amd756_get_trigger __P((pciintr_icu_handle_t, int, int *));
int amd756_set_trigger __P((pciintr_icu_handle_t, int, int));
d98 1
a98 1
static void amd756_pir_dump __P((struct viper_handle *));
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: amd756.c,v 1.2 2001/01/25 00:07:40 mickey Exp $	*/
d92 5
a96 5
int amd756_getclink(pciintr_icu_handle_t, int, int *);
int amd756_get_intr(pciintr_icu_handle_t, int, int *);
int amd756_set_intr(pciintr_icu_handle_t, int, int);
int amd756_get_trigger(pciintr_icu_handle_t, int, int *);
int amd756_set_trigger(pciintr_icu_handle_t, int, int);
d98 1
a98 1
static void amd756_pir_dump(struct viper_handle *);
@


1.2.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: amd756.c,v 1.2 2001/01/25 00:07:40 mickey Exp $	*/
@


1.2.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 5
a96 5
int amd756_getclink(pciintr_icu_handle_t, int, int *);
int amd756_get_intr(pciintr_icu_handle_t, int, int *);
int amd756_set_intr(pciintr_icu_handle_t, int, int);
int amd756_get_trigger(pciintr_icu_handle_t, int, int *);
int amd756_set_trigger(pciintr_icu_handle_t, int, int);
d98 1
a98 1
static void amd756_pir_dump(struct viper_handle *);
@


1.1
log
@AMD750 Athlon chipset support for PCIBIOS_INTR_FIXUP; from minoura@@jp.netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d82 1
a82 1
#include <i386/pci/pci_intr_fixup.h>
@

