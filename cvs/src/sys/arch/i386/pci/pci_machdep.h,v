head	1.28;
access;
symbols
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.28.0.6
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.2
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.25.0.4
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.23.0.4
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.11.0.28
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.26
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.24
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.22
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.20
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.18
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.16
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.14
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.12
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.10
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.10
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2016.05.04.14.30.00;	author kettenis;	state Exp;
branches;
next	1.27;
commitid	n9OfCKyY3NAvSMg8;

1.27
date	2015.07.17.22.42.09;	author kettenis;	state Exp;
branches;
next	1.26;
commitid	sxsJOzAOv43HRI0o;

1.26
date	2013.11.06.10.40.36;	author mpi;	state Exp;
branches;
next	1.25;

1.25
date	2012.09.19.23.03.12;	author kettenis;	state Exp;
branches;
next	1.24;

1.24
date	2012.09.07.19.23.53;	author kettenis;	state Exp;
branches;
next	1.23;

1.23
date	2011.10.10.19.42.36;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2011.05.21.15.14.57;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2011.01.04.21.17.49;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2010.12.04.17.06.31;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.29.22.08.28;	author jordan;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.06.21.35.43;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2009.08.22.02.54.50;	author mk;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.20.23.40.43;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.11.17.13.33;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.06.19.59.38;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.06.05.05.46;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.03.15.46.07;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.03.15.54;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.25.10.13.29;	author art;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2001.08.17.22.26.58;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.27.04.59.40;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.08.19.12.48;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	98.01.20.18.40.23;	author niklas;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	97.06.18.19.07.02;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.17.34;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.18.19.22.23;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.52;	author deraadt;	state Exp;
branches;
next	;

1.5.10.1
date	2001.04.18.16.08.28;	author niklas;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2001.10.31.03.01.13;	author nate;	state Exp;
branches;
next	1.5.10.3;

1.5.10.3
date	2002.03.28.10.31.05;	author niklas;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Initial support for MSI-X.  Only supported on amd64 for now.  I have diffs to
actually use this in em(4) and xhci(4), but I'm not committing those yet
because we almost certainly need to save and restore the MSI-X registers
during suspend/resume.  However, this allows mpi@@ to play with multiple-vector
support in networking hardware.

Requested by mpi@@
ok mlarkin@@, mikeb@@
@
text
@/*	$OpenBSD: pci_machdep.h,v 1.27 2015/07/17 22:42:09 kettenis Exp $	*/
/*	$NetBSD: pci_machdep.h,v 1.7 1997/06/06 23:29:18 thorpej Exp $	*/

/*
 * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1994 Charles Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-specific definitions for PCI autoconfiguration.
 */

/*
 * i386-specific PCI structure and type definitions.
 * NOT TO BE USED DIRECTLY BY MACHINE INDEPENDENT CODE.
 *
 * Configuration tag; created from a {bus,device,function} triplet by
 * pci_make_tag(), and passed to pci_conf_read() and pci_conf_write().
 * We could instead always pass the {bus,device,function} triplet to
 * the read and write routines, but this would cause extra overhead.
 *
 * Mode 2 is historical and deprecated by the Revision 2.0 specification.
 */
union i386_pci_tag_u {
	u_int32_t mode1;
	struct {
		u_int16_t port;
		u_int8_t enable;
		u_int8_t forward;
	} mode2;
};

extern struct bus_dma_tag pci_bus_dma_tag;

/*
 * Types provided to machine-independent PCI code
 */
typedef void *pci_chipset_tag_t;
typedef union i386_pci_tag_u pcitag_t;

typedef
struct {
	pcitag_t tag;
	int line, pin;
	void *link;
} pci_intr_handle_t;

/*
 * i386-specific PCI variables and functions.
 * NOT TO BE USED DIRECTLY BY MACHINE INDEPENDENT CODE.
 */
extern int pci_mode;
extern bus_addr_t pci_mcfg_addr;
extern int pci_mcfg_min_bus, pci_mcfg_max_bus;

int		pci_mode_detect(void);

extern struct extent *pciio_ex;
extern struct extent *pcimem_ex;
extern struct extent *pcibus_ex;
void		pci_init_extents(void);

/*
 * Functions provided to machine-independent PCI code.
 */
void		pci_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		pci_bus_maxdevs(pci_chipset_tag_t, int);
pcitag_t	pci_make_tag(pci_chipset_tag_t, int, int, int);
int		pci_conf_size(pci_chipset_tag_t, pcitag_t);
pcireg_t	pci_conf_read(pci_chipset_tag_t, pcitag_t, int);
void		pci_conf_write(pci_chipset_tag_t, pcitag_t, int,
		    pcireg_t);
struct pci_attach_args;
int		pci_intr_map_msi(struct pci_attach_args *, pci_intr_handle_t *);
int		pci_intr_map(struct pci_attach_args *, pci_intr_handle_t *);
#define		pci_intr_map_msix(p, vec, ihp)	(-1)
#define		pci_intr_line(c, ih)	((ih).line)
const char	*pci_intr_string(pci_chipset_tag_t, pci_intr_handle_t);
void		*pci_intr_establish(pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, const char *);
void		pci_intr_disestablish(pci_chipset_tag_t, void *);
void		pci_decompose_tag(pci_chipset_tag_t, pcitag_t,
		    int *, int *, int *);
#define	pci_probe_device_hook(c, a)	(0)

void 		pci_dev_postattach(struct device *, struct pci_attach_args *);

pcireg_t	pci_min_powerstate(pci_chipset_tag_t, pcitag_t);
void		pci_set_powerstate_md(pci_chipset_tag_t, pcitag_t, int, int);

/*
 * Section 6.2.4, `Miscellaneous Functions' of the PIC Specification,
 * says that 255 means `unknown' or `no connection' to the interrupt
 * controller on a PC.
 */
#define	I386_PCI_INTERRUPT_LINE_NO_CONNECTION	0xff

/*
 * PCI address space is shared with ISA, so avoid legacy ISA I/O
 * registers.
 */
#define PCI_IO_START	0x400
#define PCI_IO_END	0xffff

/*
 * Avoid the DOS Compatibility Memory area.
 */
#define PCI_MEM_START	0x100000
@


1.27
log
@Avoid assigning low addresses to PCI BARs.  Some machines don't claim these
memory addresses in their BIOS memory map making us believe they are
available.  However these addresses will never actually be routed to the
PCI bus and therefore guaranteed not to work.

ok krw@@, mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.26 2013/11/06 10:40:36 mpi Exp $	*/
d102 1
@


1.26
log
@Add support for Power Resources for Dx states and the necessary hook
for PCI devices.  This hook should be called twice, before and after
changing the power state of a PCI device.

Before setting the device to the new state, the ACPI layer will notify
every power resources linked to the device for that state and make sure
they are turned "_ON".  After changing the state of the device, it will
decrement the reference of every power resources linked to that device
for the old state and turn them "_OFF" if they are no longer referenced.

This fixes the no-USB after resume problem seen on various ThinkPad,
problem initialy diagnosed with Alexander Polakov.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.25 2012/09/19 23:03:12 kettenis Exp $	*/
d129 5
@


1.25
log
@Set up PCI bus number resource accounting for the main PCI bus hierarchy.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.24 2012/09/07 19:23:53 kettenis Exp $	*/
d114 1
@


1.24
log
@Implement pci_min_powerstate().
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.23 2011/10/10 19:42:36 miod Exp $	*/
d85 1
@


1.23
log
@Introduce pci_probe_device_hook(pci_chipset_tag_t, struct pci_attach_args *).
This mandatory function will get invoked in pci_probe_device(), and allows
a pci host driver to alter the pci_attach_args passed to a device when
attaching.

This function will also, if returning non-zero, cause the device to be
skipped completely during all the phases of the PCI device discovery
(i.e. ressource enumeration, ressource assignment, and actual attachment).
This particular feature is experimental and might be reverted in the future
(or the scope narrowed to device attachment only).

A dummy #define pci_probe_device_hook() 0 is added to all platforms except
sgi, where real functions (currently only returning 0) are added; real meat
will be added shortly.

Discussed at s2k11, no objection from the usual suspects.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.22 2011/05/21 15:14:57 kettenis Exp $	*/
d111 2
@


1.22
log
@First stab at supporting Message Signaled Interrupts on i386.  Still work in
progress.  The code is effectively disabled as long as PCI_FLAGS_MSI_ENABLED
doesn't get set for the root PCI bus.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.21 2011/01/04 21:17:49 kettenis Exp $	*/
d108 1
@


1.21
log
@Add support for Memory Mapped Configuration space access.  This gives us
access to PCIe extended configuration space access on modern i386 and amd64
machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.20 2010/12/04 17:06:31 miod Exp $	*/
d99 2
a100 2
int		pci_intr_map(struct pci_attach_args *,
		    pci_intr_handle_t *);
@


1.20
log
@Introduce a new pci routine, pci_conf_size(), which returns the size of a
given pcitag_t configuration address space. Currently, all pci controllers
will return the usual 0x100 bytes of PCI configuration space, but this will
eventually change on PCIe-capable controlers.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.19 2010/06/29 22:08:28 jordan Exp $	*/
d78 3
@


1.19
log
@Add support for mapping ACPI to PCI devices
ok kettenis, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.18 2009/10/06 21:35:43 kettenis Exp $	*/
d91 1
@


1.18
log
@Allow MD limits for allocating PCI io and mem space and specify limits on
i386 and amd64 to make avoid legacy ISA I/O registers.  Fixes issues with
ThinkPad T-series Dock II units as reported by sobrado@@

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.17 2009/08/22 02:54:50 mk Exp $	*/
d104 2
@


1.17
log
@Constify the what/name parameter of pci_intr_establish().

Tested by myself, sthen, oga, kettenis, and jasper.
Input from sthen and jasper.

ok kettenis

(Manpage follows shortly.)
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.16 2009/07/20 23:40:43 miod Exp $	*/
d111 7
@


1.16
log
@Pass a pci_chipset_tag_t to pci_intr_line(), to eventually allow the
logic to be chipset dependent; no functional change yet.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.15 2009/04/11 17:13:33 kettenis Exp $	*/
d100 1
a100 1
		    int, int (*)(void *), void *, char *);
@


1.15
log
@Create extents for resource accounting on the root PCI bus and populate them
based on the BIOS memory map.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.14 2008/12/06 19:59:38 tedu Exp $	*/
d97 1
a97 1
#define		pci_intr_line(ih)	((ih).line)
@


1.14
log
@revert all changes related to the mpsafe intr handler.  i screwed up the commit
and even then it didn't work.  we have higher standards than this.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.13 2008/12/06 05:05:46 tedu Exp $	*/
d79 4
@


1.13
log
@some more trouble where i failed to account for oga's diff
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.12 2008/12/03 15:46:07 oga Exp $	*/
a96 2
#define		pci_intr_establish_mpsafe(t,h,l,f,a,w) \
	pci_intr_establish(t,h,l,f,a,w)
@


1.12
log
@Remove the x86 and i386 prefixes to the bus_dma types. It's really quite
pointless and just makes the code different for no reason. This moves i386 and
amd64 bus_dma to being a lot closer to identical.

suggestion to just remove the prefix instead of merge them from deraadt@@.

no objections art@@, kettenis@@, ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.11 2002/03/14 03:15:54 millert Exp $	*/
d97 2
@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.10 2002/03/14 01:26:33 millert Exp $	*/
d58 1
a58 1
extern struct i386_bus_dma_tag pci_bus_dma_tag;
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.9 2001/08/25 10:13:29 art Exp $	*/
d95 2
a96 2
void		*pci_intr_establish __P((pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, char *));
@


1.9
log
@Change pci_intr_map to take pci_attach_args as an argument.
All callers actually took all arguments to pci_intr_map from pci_attach_args
structs, so this simplifies code.
This also allows more complicated interrupt assignment schemes like the one
on sparc64.

This makes sparc64 pci interrupts work.

Inspired by the same change in NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.8 2001/08/17 22:26:58 mickey Exp $	*/
d78 1
a78 1
int		pci_mode_detect __P((void));
d83 7
a89 7
void		pci_attach_hook __P((struct device *, struct device *,
		    struct pcibus_attach_args *));
int		pci_bus_maxdevs __P((pci_chipset_tag_t, int));
pcitag_t	pci_make_tag __P((pci_chipset_tag_t, int, int, int));
pcireg_t	pci_conf_read __P((pci_chipset_tag_t, pcitag_t, int));
void		pci_conf_write __P((pci_chipset_tag_t, pcitag_t, int,
		    pcireg_t));
d91 2
a92 2
int		pci_intr_map __P((struct pci_attach_args *,
		    pci_intr_handle_t *));
d94 1
a94 1
const char	*pci_intr_string __P((pci_chipset_tag_t, pci_intr_handle_t));
d97 3
a99 3
void		pci_intr_disestablish __P((pci_chipset_tag_t, void *));
void		pci_decompose_tag __P((pci_chipset_tag_t, pcitag_t,
		    int *, int *, int *));
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.9 2001/08/25 10:13:29 art Exp $	*/
d78 1
a78 1
int		pci_mode_detect(void);
d83 7
a89 7
void		pci_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		pci_bus_maxdevs(pci_chipset_tag_t, int);
pcitag_t	pci_make_tag(pci_chipset_tag_t, int, int, int);
pcireg_t	pci_conf_read(pci_chipset_tag_t, pcitag_t, int);
void		pci_conf_write(pci_chipset_tag_t, pcitag_t, int,
		    pcireg_t);
d91 2
a92 2
int		pci_intr_map(struct pci_attach_args *,
		    pci_intr_handle_t *);
d94 6
a99 6
const char	*pci_intr_string(pci_chipset_tag_t, pci_intr_handle_t);
void		*pci_intr_establish(pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, char *);
void		pci_intr_disestablish(pci_chipset_tag_t, void *);
void		pci_decompose_tag(pci_chipset_tag_t, pcitag_t,
		    int *, int *, int *);
@


1.8
log
@provide a way to get the number used for irq line, not only a string
representation, this is needed for devices like cbb which pass
the interrupt line down to the cardbus attachment and not
getting the right line before pci_intr_map() has done it's
dirty deed.
tested on i386 by jason@@, compiles on alpha by art@@.
ppc and mveppc are to be test-compiled, but should work (;
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.7 2001/01/27 04:59:40 mickey Exp $	*/
d90 2
a91 1
int		pci_intr_map __P((pci_chipset_tag_t, pcitag_t, int, int,
a99 8

/*
 * Compatibility functions, to map the old i386 PCI functions to the new ones.
 * NOT TO BE USED BY NEW CODE.
 */
void		*pci_map_int __P((pcitag_t, int, int (*)(void *), void *));
int		pci_map_io __P((pcitag_t, int, int *));
int		pci_map_mem __P((pcitag_t, int, vm_offset_t *, vm_offset_t *));
@


1.7
log
@change interrupt routing strategy from simple
run through the devices and programming the icu
and pci headers before real pci bus autoconf starts
and include all devices present on all pci busses,
to a per attached device routing in pci_intr_map().
this solves several cases of premature interrupts hanging
system due to absent interrupt handlers during autoconf.
10x for testing: millert@@ krw@@ aaron@@ chris@@ tholo@@ brad@@ jason@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.6 2000/08/08 19:12:48 mickey Exp $	*/
d92 1
@


1.6
log
@sync w/ netbsd almost -current code (;
fixes quite a few problems.
adds new option PCIBIOS_ADDR_FIXUP.
numerous extra fixes by me, also pointed out by other ppl,
such as avoid panics, ifdef on pciverbose, not diagnostic,
some other smaller knits; some have been forwarded back
to netbsd developers, some will go soon too.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.5 1998/01/20 18:40:23 niklas Exp $	*/
d65 7
a71 1
typedef int pci_intr_handle_t;
@


1.5
log
@Merge bus_dma support from NetBSD, mostly by Jason Thorpe.  Only i386 uses it
 so far, the other archs gets placeholders for now.  I wrote a compatibility
layer for OpenBSD's old isadma code so we can still use our old
driver sources.  They will however get changed to native bus_dma use,
on a case by case basis.   Oh yes, I almost forgot, I kept our notion
of isadma being a device so DMA-less ISA-busses still work
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.4 1997/06/18 19:07:02 dm Exp $	*/
d100 7
@


1.5.10.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.7 2001/01/27 04:59:40 mickey Exp $	*/
d65 1
a65 7

typedef
struct {
	pcitag_t tag;
	int line, pin;
	void *link;
} pci_intr_handle_t;
a99 7

/*
 * Section 6.2.4, `Miscellaneous Functions' of the PIC Specification,
 * says that 255 means `unknown' or `no connection' to the interrupt
 * controller on a PC.
 */
#define	I386_PCI_INTERRUPT_LINE_NO_CONNECTION	0xff
@


1.5.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.5.10.1 2001/04/18 16:08:28 niklas Exp $	*/
d90 1
a90 2
struct pci_attach_args;
int		pci_intr_map __P((struct pci_attach_args *,
a91 1
#define		pci_intr_line(ih)	((ih).line)
d98 8
@


1.5.10.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
a78 1
int		pci_mode_detect(void);
d83 7
a89 7
void		pci_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		pci_bus_maxdevs(pci_chipset_tag_t, int);
pcitag_t	pci_make_tag(pci_chipset_tag_t, int, int, int);
pcireg_t	pci_conf_read(pci_chipset_tag_t, pcitag_t, int);
void		pci_conf_write(pci_chipset_tag_t, pcitag_t, int,
		    pcireg_t);
d91 2
a92 2
int		pci_intr_map(struct pci_attach_args *,
		    pci_intr_handle_t *);
d94 6
a99 6
const char	*pci_intr_string(pci_chipset_tag_t, pci_intr_handle_t);
void		*pci_intr_establish(pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, char *);
void		pci_intr_disestablish(pci_chipset_tag_t, void *);
void		pci_decompose_tag(pci_chipset_tag_t, pcitag_t,
		    int *, int *, int *);
@


1.4
log
@csapuntz@@lcs.mit.edu: Port of NetBSD tulip driver.  Works with new (21140-AC-based) SMC Etherpower cards.
@
text
@d1 2
a2 2
/*	$OpenBSD: pci_machdep.h,v 1.3 1996/04/21 22:17:34 deraadt Exp $	*/
/*	$NetBSD: pci_machdep.h,v 1.5 1996/03/27 04:01:16 cgd Exp $	*/
d57 2
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.2 1996/04/18 19:22:23 niklas Exp $	*/
d88 2
@


1.2
log
@Merge of NetBSD 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: pci_machdep.h,v 1.4 1996/03/14 02:37:59 cgd Exp $	*/
d5 1
a35 2
 *
 * See the comments in pci_machdep.c for more explanation.
d39 3
d47 1
a47 3
 * Machines other than PCs are likely to use the equivalent of mode 1
 * tags always.  Mode 2 is historical and deprecated by the Revision
 * 2.0 specification.
d49 2
a50 2
typedef union {
	u_long mode1;
d52 3
a54 3
		u_short port;
		u_char enable;
		u_char forward;
d56 1
a56 1
} pcitag_t;
d59 1
a59 2
 * Type of a value read from or written to a configuration register.
 * Always 32 bits.
d61 3
a63 1
typedef u_int32_t pcireg_t;
d66 2
a67 8
 * PCs which use Configuration Mechanism #2 are limited to 16
 * devices per bus.
 */
#define	PCI_MAX_DEVICE_NUMBER	(pci_mode == 2 ? 16 : 32)

/*
 * Hook for PCI bus attach function to do any necessary machine-specific
 * operations.
d69 2
a70 6

#define	pci_md_attach_hook(parent, sc, pba)				\
	do {								\
		if (pba->pba_bus == 0)					\
			printf(": configuration mode %d", pci_mode);	\
	} while (0);
d73 1
a73 1
 * Miscellaneous variables and functions.
d75 21
a95 2
extern int pci_mode;
extern int pci_mode_detect __P((void));
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: pci_machdep.h,v 1.3 1995/04/17 12:08:00 cgd Exp $	*/
d64 20
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
