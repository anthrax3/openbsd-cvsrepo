head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.9.0.24
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.22
	OPENBSD_5_0:1.9.0.20
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.18
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.16
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.12
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	SMP:1.3.0.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2014.12.10.12.27.56;	author mikeb;	state Exp;
branches;
next	1.12;
commitid	v6PAeA18rydwc5Vx;

1.12
date	2012.12.05.23.20.12;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.17.22.32.01;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.16.18.42.04;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.11.20.57.40;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.18.19.09.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.17.21.28.23;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.29.19.31.23;	author mpf;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.01.13.08.12;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.19.01.59.36;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.26.02.21.53;	author kevlo;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.07.16.59.37;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.07.08.32.56;	author markus;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Convert watchdog(4) devices to use autoconf(9) framework.

ok deraadt, tests on glxpcib and ok mpi
@
text
@/*	$OpenBSD: geodesc.c,v 1.12 2012/12/05 23:20:12 deraadt Exp $	*/

/*
 * Copyright (c) 2003 Markus Friedl <markus@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Geode SC1100 Information Appliance On a Chip
 * http://www.national.com/ds.cgi/SC/SC1100.pdf
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/timetc.h>

#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <arch/i386/pci/geodescreg.h>

struct geodesc_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
};

int	geodesc_match(struct device *, void *, void *);
void	geodesc_attach(struct device *, struct device *, void *);
int	geodesc_activate(struct device *, int);
void	sc1100_sysreset(void);

#ifndef SMALL_KERNEL
int	geodesc_wdogctl_cb(void *, int);
#endif /* SMALL_KERNEL */

struct cfattach geodesc_ca = {
	sizeof(struct geodesc_softc), geodesc_match, geodesc_attach,
	NULL, geodesc_activate
};

struct cfdriver geodesc_cd = {
	NULL, "geodesc", DV_DULL
};

u_int   geodesc_get_timecount(struct timecounter *tc);

struct timecounter geodesc_timecounter = {
	geodesc_get_timecount,	/* get_timecount */
	0,			/* no poll_pps */
	0xffffffff,		/* counter_mask */
	27000000,		/* frequency */
	"GEOTSC",		/* name */
	2000			/* quality */
};

int
geodesc_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa = aux;

	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_NS &&
	    (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_NS_SC1100_XBUS ||
	     PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_NS_SCx200_XBUS))
		return (1);
	return (0);
}

#define WDSTSBITS "\20\x04WDRST\x03WDSMI\x02WDINT\x01WDOVF"

void
geodesc_attach(struct device *parent, struct device *self, void *aux)
{
	struct geodesc_softc *sc = (void *) self;
	struct pci_attach_args *pa = aux;
	uint16_t cnfg, cba;
	uint8_t sts, rev, iid;
	pcireg_t reg;
	extern void (*cpuresetfn)(void);

	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, SC1100_F5_SCRATCHPAD);
	sc->sc_iot = pa->pa_iot;
	if (reg == 0 ||
	    bus_space_map(sc->sc_iot, reg, 64, 0, &sc->sc_ioh)) {
		printf(": unable to map registers at 0x%x\n", reg);
		return;
	}
	cba = bus_space_read_2(sc->sc_iot, sc->sc_ioh, GCB_CBA);
	if (cba != reg) {
		printf(": cba mismatch: cba 0x%x != reg 0x%x\n", cba, reg);
		bus_space_unmap(sc->sc_iot, sc->sc_ioh, 64);
		return;
	}
	sts = bus_space_read_1(sc->sc_iot, sc->sc_ioh, GCB_WDSTS);
	cnfg = bus_space_read_2(sc->sc_iot, sc->sc_ioh, GCB_WDCNFG);
	iid = bus_space_read_1(sc->sc_iot, sc->sc_ioh, GCB_IID);
	rev = bus_space_read_1(sc->sc_iot, sc->sc_ioh, GCB_REV);

	printf(": iid %d revision %d wdstatus %b\n", iid, rev, sts, WDSTSBITS);

#ifndef SMALL_KERNEL
	/* setup and register watchdog */
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, GCB_WDTO, 0);
	sts |= WDOVF_CLEAR;
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, GCB_WDSTS, sts);
	cnfg &= ~WDCNFG_MASK;
	cnfg |= WDTYPE1_RESET|WDPRES_DIV_512;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, GCB_WDCNFG, cnfg);

	wdog_register(geodesc_wdogctl_cb, sc);
#endif /* SMALL_KERNEL */

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GCB_TSCNFG, TSC_ENABLE);
	/* Hook into the kern_tc */
	geodesc_timecounter.tc_priv = sc;
	tc_init(&geodesc_timecounter);

	/* We have a special way to reset the CPU on the SC1100 */
	cpuresetfn = sc1100_sysreset;
}

int
geodesc_activate(struct device *self, int act)
{
	switch (act) {
	case DVACT_POWERDOWN:
#ifndef SMALL_KERNEL
		wdog_shutdown(self);
#endif
		break;
	}

	return (0);
}

#ifndef SMALL_KERNEL
int
geodesc_wdogctl_cb(void *self, int period)
{
	struct geodesc_softc *sc = self;

	if (period > 0x03ff)
		period = 0x03ff;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, GCB_WDTO, period * 64);
	return (period);
}
#endif /* SMALL_KERNEL */

u_int
geodesc_get_timecount(struct timecounter *tc)
{
	struct geodesc_softc *sc = tc->tc_priv;

	return (bus_space_read_4(sc->sc_iot, sc->sc_ioh, GCB_TSC));
}

void
sc1100_sysreset(void)
{
	/*
	 * Reset AMD Geode SC1100.
	 *
	 * 1) Write PCI Configuration Address Register (0xcf8) to
	 *    select Function 0, Register 0x44: Bridge Configuration,
	 *    GPIO and LPC Configuration Register Space, Reset
	 *    Control Register.
	 *
	 * 2) Write 0xf to PCI Configuration Data Register (0xcfc)
	 *    to reset IDE controller, IDE bus, and PCI bus, and
	 *    to trigger a system-wide reset.
	 *
	 * See AMD Geode SC1100 Processor Data Book, Revision 2.0,
	 * sections 6.3.1, 6.3.2, and 6.4.1.
	 */
	outl(0xCF8, 0x80009044UL);
	outb(0xCFC, 0x0F);
}
@


1.12
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.11 2012/10/17 22:32:01 deraadt Exp $	*/
d44 1
d52 2
a53 1
	sizeof(struct geodesc_softc), geodesc_match, geodesc_attach
d134 14
@


1.11
log
@Swap arguments to wdog_register() since it is nicer, and prepare
wdog_shutdown() for external usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.10 2012/08/16 18:42:04 tedu Exp $	*/
a23 1
#include <sys/cdefs.h>
@


1.10
log
@we are past the point where timecounters may disappear
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.9 2006/12/11 20:57:40 deraadt Exp $	*/
d123 1
a123 1
	wdog_register(sc, geodesc_wdogctl_cb);
@


1.9
log
@do not bus_space_map devices which are at address 0; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.8 2006/10/18 19:09:14 deraadt Exp $	*/
a27 1
#ifdef __HAVE_TIMECOUNTER
a28 1
#endif
a58 1
#ifdef __HAVE_TIMECOUNTER
a68 1
#endif	/* __HAVE_TIMECOUNTER */
a125 1
#ifdef __HAVE_TIMECOUNTER
a129 1
#endif /* __HAVE_TIMECOUNTER */
a147 1
#ifdef __HAVE_TIMECOUNTER
a154 1
#endif /* __HAVE_TIMECOUNTER */
@


1.8
log
@do not enable watchdog functionality if small kernel
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.7 2006/10/17 21:28:23 tom Exp $	*/
d100 2
a101 1
	if (bus_space_map(sc->sc_iot, reg, 64, 0, &sc->sc_ioh)) {
@


1.7
log
@Set the Geode SC1100-specific reset function in the geodesc driver,
rather than when CPUID says we're on any Geode.  Should avoid reset
failure on Nokia IP110s and other non-SC1100 Geode-based systems.

Reset should hopefully still work on Soekris Net4801s and PC Engines
WRAP systems, but no-one bothered to test and report back in two days.

"commit" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.6 2006/09/29 19:31:23 mpf Exp $	*/
d47 3
d51 1
a51 1
void	sc1100_sysreset(void);
d117 1
d127 2
d140 1
d151 1
@


1.6
log
@kill trailing some spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.5 2006/02/01 13:08:12 mickey Exp $	*/
d48 1
d93 1
d129 3
d154 22
@


1.5
log
@implement a much better 27mhz tc found on geode; inspired by freebsd; grange@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.4 2005/11/19 01:59:36 aaron Exp $	*/
d125 1
a125 1
	tc_init(&geodesc_timecounter);  
@


1.4
log
@Remove superfluous statement-ending semi-colons.  i.e., "return foo;;" should
just be "return foo;".  Cleaning out some M's in my tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.3 2003/11/26 02:21:53 kevlo Exp $	*/
d28 3
d57 13
d121 6
d139 10
@


1.3
log
@The geodesc works great for SC1201 as well. ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.2 2003/08/07 16:59:37 mickey Exp $	*/
d100 1
a100 1
	cnfg &= ~WDCNFG_MASK;;
@


1.2
log
@better dmesg output and do some spaces; markus@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: geodesc.c,v 1.1 2003/08/07 08:32:56 markus Exp $	*/
d60 2
a61 1
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_NS_SC1100_XBUS)
@


1.1
log
@watchdog driver for Geode SC1100 (e.g. in soekris net4801); ok mickey@@
@
text
@d1 1
a1 1
/*      $OpenBSD: $     */
d19 1
a19 1
/* 
d37 3
a39 3
        struct device           sc_dev;
        bus_space_tag_t         sc_iot;
        bus_space_handle_t      sc_ioh;
d42 3
a44 3
int     geodesc_match(struct device *, void *, void *);
void    geodesc_attach(struct device *, struct device *, void *);
int     geodesc_wdogctl_cb(void *, int);
d47 1
a47 1
        sizeof(struct geodesc_softc), geodesc_match, geodesc_attach
d51 1
a51 1
        NULL, "geodesc", DV_DULL
d57 1
a57 1
        struct pci_attach_args *pa = aux;
d59 4
a62 4
        if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_NS &&
            PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_NS_SC1100_XBUS)
                return (1);
        return (0);
d70 32
a101 37
        struct geodesc_softc *sc = (void *) self;
        struct pci_attach_args *pa = aux;
        uint16_t cnfg, cba;
        uint8_t sts, rev, iid;
        pcireg_t reg;

        printf("\n");
        
        reg = pci_conf_read(pa->pa_pc, pa->pa_tag, SC1100_F5_SCRATCHPAD);
        sc->sc_iot = pa->pa_iot;
        if (bus_space_map(sc->sc_iot, reg, 64, 0, &sc->sc_ioh)) {
                printf("%s: unable to map registers at %p\n",
                    sc->sc_dev.dv_xname, reg);
                return;
        }
        cba = bus_space_read_2(sc->sc_iot, sc->sc_ioh, GCB_CBA);
        if (cba != reg) {
                printf("%s: cba mismatch: cba %p != reg %p\n",
                    sc->sc_dev.dv_xname, cba, reg);
                bus_space_unmap(sc->sc_iot, sc->sc_ioh, 64);
                return;
        }
        sts = bus_space_read_1(sc->sc_iot, sc->sc_ioh, GCB_WDSTS);
        cnfg = bus_space_read_2(sc->sc_iot, sc->sc_ioh, GCB_WDCNFG);
        iid = bus_space_read_1(sc->sc_iot, sc->sc_ioh, GCB_IID);
        rev = bus_space_read_1(sc->sc_iot, sc->sc_ioh, GCB_REV);

        printf("%s: iid %d revision %d wdstatus %b\n",
            sc->sc_dev.dv_xname, iid, rev, sts, WDSTSBITS);

        /* setup and register watchdog */
        bus_space_write_2(sc->sc_iot, sc->sc_ioh, GCB_WDTO, 0);
        sts |= WDOVF_CLEAR;
        bus_space_write_1(sc->sc_iot, sc->sc_ioh, GCB_WDSTS, sts);
        cnfg &= ~WDCNFG_MASK;;
        cnfg |= WDTYPE1_RESET|WDPRES_DIV_512;
        bus_space_write_2(sc->sc_iot, sc->sc_ioh, GCB_WDCNFG, cnfg);
d103 1
a103 1
        wdog_register(sc, geodesc_wdogctl_cb);
d109 6
a114 6
        struct geodesc_softc *sc = self;
        
        if (period > 0x03ff)
                period = 0x03ff;
        bus_space_write_2(sc->sc_iot, sc->sc_ioh, GCB_WDTO, period * 64);
        return (period);
@

