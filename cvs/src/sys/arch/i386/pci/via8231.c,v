head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.36
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.34
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.30
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.32
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.24
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.28
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.26
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.1.0.12
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.10
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.19.11.06.34;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.27.16.41.06;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.27.15.49.30;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.26.22.01.33;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.26.21.47.48;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.20.15.09.31;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.30.05.26.33;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: via8231.c,v 1.7 2006/09/19 11:06:34 jsg Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 2005, by Michael Shalayeff
 * Copyright (c) 2003, by Matthew Gream
 * Copyright (c) 1999, by UCHIYAMA Yasushi
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the developer may NOT be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Support for the VIA Technologies Inc. VIA8231 PCI to ISA Bridge
 * Based upon documentation:
 * 1. VIA VT8231 South Bridge, Revision 1.85 (March 11, 2002), pg 73
 * 2. VIA VT8237R South Bridge, Revision 2.06 (December 15, 2004), pg 100
 * Derived from amd756.c
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/intr.h>
#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

#include <i386/pci/pcibiosvar.h>
#include <i386/pci/via8231reg.h>

struct via8231_handle {
	bus_space_tag_t ph_iot;
	bus_space_handle_t ph_regs_ioh;
	pci_chipset_tag_t ph_pc;
	pcitag_t ph_tag;
	int flags;
#define	VT8237	0x0001
};

int via8231_getclink(pciintr_icu_handle_t, int, int *);
int via8231_get_intr(pciintr_icu_handle_t, int, int *);
int via8231_set_intr(pciintr_icu_handle_t, int, int);
int via8231_get_trigger(pciintr_icu_handle_t, int, int *);
int via8231_set_trigger(pciintr_icu_handle_t, int, int);
#ifdef VIA8231_DEBUG
static void via8231_pir_dump(const char*, struct via8231_handle *);
#endif

const struct pciintr_icu via8231_pci_icu = {
	via8231_getclink,
	via8231_get_intr,
	via8231_set_intr,
	via8231_get_trigger,
	via8231_set_trigger,
};

struct mask_shft_pair {
	int mask;
	int shft;
};

static const struct mask_shft_pair via8231_routing_cnfg[VIA8231_LINK_MAX+1] = {
	{ 0x0f,  0+4 }, /*PINTA#*/
	{ 0x0f,  8+0 }, /*PINTB#*/
	{ 0x0f,  8+4 }, /*PINTC#*/
	{ 0x0f, 16+4 }  /*PINTD#*/
};

#define VIA8231_GET_TRIGGER_CNFG(reg, pirq) \
	((reg) & (1 << (3 - (clink & 3))))
#define VIA8231_SET_TRIGGER_CNFG(reg, clink, cfg) \
	(((reg) & ~(1 << (3 - (clink & 3)))) | ((cfg) << (3 - (clink & 3))))

#define VIA8231_GET_ROUTING_CNFG(reg, pirq) \
	(((reg) >> via8231_routing_cnfg[(pirq)].shft) & \
	    via8231_routing_cnfg[(pirq)].mask)

#define VIA8231_SET_ROUTING_CNFG(reg, pirq, cfg) \
	(((reg) & ~(via8231_routing_cnfg[(pirq)].mask << \
	    via8231_routing_cnfg[(pirq)].shft)) | \
	    (((cfg) & via8231_routing_cnfg[(pirq)].mask) << \
	    via8231_routing_cnfg[(pirq)].shft))

int
via8231_init(pci_chipset_tag_t pc, bus_space_tag_t iot, pcitag_t tag,
    pciintr_icu_tag_t *ptagp, pciintr_icu_handle_t *phandp)
{
	struct via8231_handle *ph;
	pcireg_t id;

	ph = malloc(sizeof(*ph), M_DEVBUF, M_NOWAIT);
	if (ph == NULL)
		return (1);

	ph->ph_iot = iot;
	ph->ph_pc = pc;
	ph->ph_tag = tag;
	id = pci_conf_read(pc, tag, PCI_ID_REG);
	ph->flags = PCI_VENDOR(id) == PCI_VENDOR_VIATECH &&
	     PCI_PRODUCT(id) == PCI_PRODUCT_VIATECH_VT8231_ISA? 0 : VT8237;

	*ptagp = &via8231_pci_icu;
	*phandp = ph;

#ifdef VIA8231_DEBUG
	via8231_pir_dump("via8231_init", ph);
#endif

	return 0;
}

int
via8231_getclink(pciintr_icu_handle_t v, int link, int *clinkp)
{
	struct via8231_handle *ph = v;

	if ((ph->flags & VT8237) && !VIA8237_LINK_LEGAL(link - 1))
		return (1);

	if (!(ph->flags & VT8237) && !VIA8231_LINK_LEGAL(link - 1))
		return (1);

	*clinkp = link - 1;
	return (0);
}

int
via8231_get_intr(pciintr_icu_handle_t v, int clink, int *irqp)
{
	struct via8231_handle *ph = v;
	int reg, val;

	if (VIA8237_LINK_LEGAL(clink) == 0)
		return (1);

	if (VIA8231_LINK_LEGAL(clink)) {
		reg = VIA8231_GET_ROUTING(ph);
		val = VIA8231_GET_ROUTING_CNFG(reg, clink);
	} else {
		reg = VIA8237_GET_ROUTING(ph);
		val = (reg >> ((clink & 3) * 4)) & 0xf;
	}

	*irqp = (val == VIA8231_ROUTING_CNFG_DISABLED) ?
	    I386_PCI_INTERRUPT_LINE_NO_CONNECTION : val;

	return (0);
}

int
via8231_set_intr(pciintr_icu_handle_t v, int clink, int irq)
{
	struct via8231_handle *ph = v;
	int reg;

	if (VIA8237_LINK_LEGAL(clink) == 0 || VIA8231_PIRQ_LEGAL(irq) == 0)
		return (1);

#ifdef VIA8231_DEBUG
	printf("via8231_set_intr: link(%02x) --> irq(%02x)\n", clink, irq);
	via8231_pir_dump("via8231_set_intr: ", ph);
#endif

	if (VIA8231_LINK_LEGAL(clink)) {
		reg = VIA8231_GET_ROUTING(ph);
		VIA8231_SET_ROUTING(ph,
		    VIA8231_SET_ROUTING_CNFG(reg, clink, irq));
	} else {
		reg = VIA8237_GET_ROUTING(ph);
		VIA8237_SET_ROUTING(ph, (reg & ~(0xf << (clink & 3))) |
		    ((irq & 0xf) << (clink & 3)));
	}

	return (0);
}

int
via8231_get_trigger(pciintr_icu_handle_t v, int irq, int *triggerp)
{
	struct via8231_handle *ph = v;
	int reg, clink, max, pciirq;

	if (VIA8231_PIRQ_LEGAL(irq) == 0)
		return (1);

	max = ph->flags & VT8237? VIA8237_LINK_MAX : VIA8231_LINK_MAX;
	for (clink = 0; clink <= max; clink++) {
		via8231_get_intr(v, clink, &pciirq);
		if (pciirq == irq) {
			reg = VIA8231_LINK_LEGAL(clink)?
			    VIA8231_GET_TRIGGER(ph):
			    VIA8237_GET_TRIGGER(ph);
			*triggerp = VIA8231_GET_TRIGGER_CNFG(reg, clink)?
			    IST_EDGE : IST_LEVEL;
			return (0);
		}
	}

	return (1);
}

int
via8231_set_trigger(pciintr_icu_handle_t v, int irq, int trigger)
{
	struct via8231_handle *ph = v;
	int reg, clink, max, pciirq;

	if (VIA8231_PIRQ_LEGAL(irq) == 0 || VIA8231_TRIG_LEGAL(trigger) == 0)
		return (1);

#ifdef VIA8231_DEBUG
	printf("via8231_set_trig: irq(%02x) --> trig(%02x)\n", irq, trigger);
	via8231_pir_dump("via8231_set_trig: ", ph);
#endif

	max = ph->flags & VT8237? VIA8237_LINK_MAX : VIA8231_LINK_MAX;
	for (clink = 0; clink <= VIA8231_LINK_MAX; clink++) {
		via8231_get_intr(v, clink, &pciirq);
		if (pciirq == irq) {
			reg = VIA8231_LINK_LEGAL(clink)?
			    VIA8231_GET_TRIGGER(ph):
			    VIA8237_GET_TRIGGER(ph);
			switch (trigger) {
			case IST_LEVEL:
				reg = VIA8231_SET_TRIGGER_CNFG(reg, clink,
					VIA8231_TRIGGER_CNFG_LEVEL);
				break;
			case IST_EDGE:
				reg = VIA8231_SET_TRIGGER_CNFG(reg, clink,
					VIA8231_TRIGGER_CNFG_EDGE);
				break;
			default:
				return (1);
			}
			if (VIA8231_LINK_LEGAL(clink))
				VIA8231_SET_TRIGGER(ph, reg);
			else
				VIA8237_SET_TRIGGER(ph, reg);
			return (0);
		}
	}

	return (1);
}

#ifdef VIA8231_DEBUG
static void
via8231_pir_dump(const char *m, struct via8231_handle *ph)
{
	int a, b;

	a = VIA8231_GET_TRIGGER(ph);
	b = VIA8231_GET_ROUTING(ph);

	printf("%s STATE: trigger(%02x), routing(%08x)\n", m, a, b);
}
#endif
@


1.7
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.6 2005/10/27 16:41:06 mickey Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed by the NetBSD
 *     Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@ironically everything past 8231 has 8 pci lines (we assume)
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.5 2005/10/27 15:49:30 mickey Exp $	*/
d143 2
a144 6
via8231_init(pc, iot, tag, ptagp, phandp)
	pci_chipset_tag_t pc;
	bus_space_tag_t iot;
	pcitag_t tag;
	pciintr_icu_tag_t *ptagp;
	pciintr_icu_handle_t *phandp;
d171 1
a171 3
via8231_getclink(v, link, clinkp)
	pciintr_icu_handle_t v;
	int link, *clinkp;
d186 1
a186 3
via8231_get_intr(v, clink, irqp)
	pciintr_icu_handle_t v;
	int clink, *irqp;
d209 1
a209 3
via8231_set_intr(v, clink, irq)
	pciintr_icu_handle_t v;
	int clink, irq;
d236 1
a236 3
via8231_get_trigger(v, irq, triggerp)
	pciintr_icu_handle_t v;
	int irq, *triggerp;
d261 1
a261 3
via8231_set_trigger(v, irq, trigger)
	pciintr_icu_handle_t v;
	int irq, trigger;
d306 1
a306 3
via8231_pir_dump(m, ph)
	const char* m;
	struct via8231_handle *ph;
@


1.5
log
@apparently 8235 has 8 pci lines too (ommited from the docs); tested by jolan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.4 2005/10/26 22:01:33 mickey Exp $	*/
d162 1
a162 2
	    (PCI_PRODUCT(id) == PCI_PRODUCT_VIATECH_VT8235_ISA ||
	     PCI_PRODUCT(id) == PCI_PRODUCT_VIATECH_VT8237_ISA)? VT8237 : 0;
@


1.4
log
@reverse 8237 check to only match 8237
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.3 2005/10/26 21:47:48 mickey Exp $	*/
d162 2
a163 1
	    PCI_PRODUCT(id) == PCI_PRODUCT_VIATECH_VT8237_ISA? VT8237 : 0;
@


1.3
log
@in set_trigger only touch triggers not whole routing crap
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.2 2005/10/20 15:09:31 mickey Exp $	*/
d162 1
a162 1
	    PCI_PRODUCT(id) == PCI_PRODUCT_VIATECH_VT8231_ISA? 0 : VT8237;
@


1.2
log
@add 8237 support and repair 8231 that was confused very bad; lots of testing help by henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.1 2003/07/30 05:26:33 mickey Exp $	*/
d308 1
a308 1
				VIA8231_SET_ROUTING(ph, reg);
d310 1
a310 1
				VIA8237_SET_ROUTING(ph, reg);
@


1.1
log
@support for vt8231 from netbsd via pr3362 and tested by matthew.gream@@pobox.com
@
text
@d1 1
a1 1
/*	$OpenBSD: via8231.c,v 1.3 2002/03/14 01:26:33 millert Exp $	*/
a38 1

d40 1
d68 3
a70 1
 * Based upon documentation: VIA VT8231 South Bridge, Revision 1.85 (March 11, 2002), pg 73
d94 2
d119 1
a119 6
static const struct mask_shft_pair via8231_trigger_cnfg[VIA8231_LINK_MAX+1] = {
	{ (1<<3), 3 }, /*PINTA#*/
	{ (1<<2), 2 }, /*PINTB#*/
	{ (1<<1), 1 }, /*PINTC#*/
	{ (1<<0), 0 }  /*PINTD#*/
};
d128 3
a130 7
	((reg & via8231_trigger_cnfg[pirq].mask) >> \
		via8231_trigger_cnfg[pirq].shft)

#define VIA8231_SET_TRIGGER_CNFG(reg, pirq, cfg) \
	reg = (reg & ~via8231_trigger_cnfg[pirq].mask) | \
		((cfg << via8231_trigger_cnfg[pirq].shft) & \
			via8231_trigger_cnfg[pirq].mask)
d133 2
a134 2
	(((reg) & via8231_routing_cnfg[pirq].mask) >> \
		via8231_routing_cnfg[pirq].shft)
d137 4
a140 4
	reg = (reg & ~via8231_routing_cnfg[pirq].mask) | \
		((cfg << via8231_routing_cnfg[pirq].shft) & \
			via8231_routing_cnfg[pirq].mask)

d151 1
d160 3
d179 6
a184 1
	if (VIA8231_LINK_LEGAL(link - 1) == 0)
d199 1
a199 1
	if (VIA8231_LINK_LEGAL(clink) == 0)
d202 8
a209 2
	reg = VIA8231_GET_ROUTING(ph);
	val = VIA8231_GET_ROUTING_CNFG(reg, clink);
d224 1
a224 1
	if (VIA8231_LINK_LEGAL(clink) == 0 || VIA8231_PIRQ_LEGAL(irq) == 0)
d232 9
a240 3
	reg = VIA8231_GET_ROUTING(ph);
	VIA8231_SET_ROUTING_CNFG(reg, clink, irq);
	VIA8231_SET_ROUTING(ph, reg);
d251 1
a251 1
	int reg, clink, pciirq;
d256 2
a257 1
	for (clink = 0; clink <= VIA8231_LINK_MAX; clink++) {
d260 5
a264 11
			reg = VIA8231_GET_TRIGGER(ph);
			switch (VIA8231_GET_TRIGGER_CNFG(reg, clink)) {
			case VIA8231_TRIGGER_CNFG_LEVEL:
				*triggerp = IST_LEVEL;
				break;
			case VIA8231_TRIGGER_CNFG_EDGE:
				*triggerp = IST_EDGE;
				break;
			default:
				return (1);
			}
d278 1
a278 1
	int reg, clink, pciirq;
d288 1
d292 3
a294 1
			reg = VIA8231_GET_ROUTING(ph);
d297 1
a297 1
				VIA8231_SET_TRIGGER_CNFG(reg, clink,
d301 1
a301 1
				VIA8231_SET_TRIGGER_CNFG(reg, clink,
d307 4
a310 1
			VIA8231_SET_ROUTING(ph, reg);
@

