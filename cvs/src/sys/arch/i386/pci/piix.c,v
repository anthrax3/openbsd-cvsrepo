head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.26
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.22
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.20
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.18
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.16
	OPENBSD_5_0:1.9.0.14
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	SMP:1.5.0.2
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2015.09.01.06.01.24;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	sjMHb60Eu7lEqMDW;

1.10
date	2014.07.12.18.44.42;	author tedu;	state Exp;
branches;
next	1.9;
commitid	uKVPYMN2MLxdZxzH;

1.9
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.19.11.06.34;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.28.23.12.33;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.33;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.25.00.07.40;	author mickey;	state Exp;
branches
	1.5.2.1
	1.5.8.1;
next	1.4;

1.4
date	2000.08.08.19.12.48;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.28.03.37.59;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.27.08.35.22;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.26.22.38.38;	author mickey;	state Exp;
branches;
next	;

1.5.2.1
date	2001.04.18.16.08.31;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.10.31.05;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.05.13.19.42.08;	author ho;	state Exp;
branches;
next	;

1.5.8.1
date	2002.06.11.03.35.54;	author art;	state Exp;
branches;
next	1.5.8.2;

1.5.8.2
date	2003.05.19.21.45.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@fairly simple sizes for free()
@
text
@/*	$OpenBSD: piix.c,v 1.10 2014/07/12 18:44:42 tedu Exp $	*/
/*	$NetBSD: piix.c,v 1.1 1999/11/17 01:21:20 thorpej Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1999, by UCHIYAMA Yasushi
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the developer may NOT be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

/*
 * Support for the Intel PIIX PCI-ISA bridge interrupt controller.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/intr.h>
#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

#include <i386/pci/pcibiosvar.h>
#include <i386/pci/piixreg.h>
#include <i386/pci/piixvar.h>

#ifdef PIIX_DEBUG
#define	DPRINTF(arg) printf arg
#else
#define	DPRINTF(arg)
#endif

int	piix_getclink(pciintr_icu_handle_t, int, int *);
int	piix_get_intr(pciintr_icu_handle_t, int, int *);
int	piix_set_intr(pciintr_icu_handle_t, int, int);
#ifdef PIIX_DEBUG
void	piix_pir_dump(struct piix_handle *);
#endif

const struct pciintr_icu piix_pci_icu = {
	piix_getclink,
	piix_get_intr,
	piix_set_intr,
	piix_get_trigger,
	piix_set_trigger,
};

int
piix_init(pci_chipset_tag_t pc, bus_space_tag_t iot, pcitag_t tag,
    pciintr_icu_tag_t *ptagp, pciintr_icu_handle_t *phandp)
{
	struct piix_handle *ph;

	ph = malloc(sizeof(*ph), M_DEVBUF, M_NOWAIT);
	if (ph == NULL)
		return (1);

	ph->ph_iot = iot;
	ph->ph_pc = pc;
	ph->ph_tag = tag;

	if (bus_space_map(iot, PIIX_REG_ELCR, PIIX_REG_ELCR_SIZE, 0,
	    &ph->ph_elcr_ioh) != 0) {
		free(ph, M_DEVBUF, sizeof *ph);
		return (1);
	}

#ifdef PIIX_DEBUG
	piix_pir_dump(ph);
#endif
	*ptagp = &piix_pci_icu;
	*phandp = ph;
	return (0);
}

int
piix_getclink(pciintr_icu_handle_t v, int link, int *clinkp)
{
	DPRINTF(("PIIX link value 0x%x: ", link));

	/* Pattern 1: simple. */
	if (PIIX_LEGAL_LINK(link - 1)) {
		*clinkp = link - 1;
		DPRINTF(("PIRQ %d (simple)\n", *clinkp));
		return (0);
	}

	/* Pattern 2: configuration register offset */
	if (link >= 0x60 && link <= 0x63) {
		*clinkp = link - 0x60;
		DPRINTF(("PIRQ %d (register offset)\n", *clinkp));
		return (0);
	}

	/* Pattern 3: configuration register offset, PIRQE# - PIRQH# */
	if (link >= 0x68 && link <= 0x6b) {
		*clinkp = link - 0x64;
		DPRINTF(("PIRQ %d (high register offset)\n", *clinkp));
		return (0);
	}

	DPRINTF(("bogus IRQ selection source\n"));
	return (1);
}

int
piix_get_intr(pciintr_icu_handle_t v, int clink, int *irqp)
{
	struct piix_handle *ph = v;
	int shift, off;
	pcireg_t reg;

	if (PIIX_LEGAL_LINK(clink) == 0)
		return (1);

	off = PIIX_CFG_PIRQ;
	if (clink > 3) {
		off += 8;
		clink -= 4;
	}

	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, off);
	shift = clink << 3;
	if ((reg >> shift) & PIIX_CFG_PIRQ_NONE)
		*irqp = I386_PCI_INTERRUPT_LINE_NO_CONNECTION;
	else
		*irqp = PIIX_PIRQ(reg, clink);

	return (0);
}

int
piix_set_intr(pciintr_icu_handle_t v, int clink, int irq)
{
	struct piix_handle *ph = v;
	int shift, off;
	pcireg_t reg;

	if (PIIX_LEGAL_LINK(clink) == 0 || PIIX_LEGAL_IRQ(irq) == 0)
		return (1);

	off = PIIX_CFG_PIRQ;
	if (clink > 3) {
		off += 8;
		clink -= 4;
	}

	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, off);
	shift = clink << 3;
	reg &= ~((PIIX_CFG_PIRQ_NONE | PIIX_CFG_PIRQ_MASK) << shift);
	reg |= irq << shift;
	pci_conf_write(ph->ph_pc, ph->ph_tag, off, reg);

	return (0);
}

int
piix_get_trigger(pciintr_icu_handle_t v, int irq, int *triggerp)
{
	struct piix_handle *ph = v;
	int off, bit;
	u_int8_t elcr;

	if (PIIX_LEGAL_IRQ(irq) == 0)
		return (1);

	off = (irq > 7) ? 1 : 0;
	bit = irq & 7;

	elcr = bus_space_read_1(ph->ph_iot, ph->ph_elcr_ioh, off);
	if (elcr & (1 << bit))
		*triggerp = IST_LEVEL;
	else
		*triggerp = IST_EDGE;

	return (0);
}

int
piix_set_trigger(pciintr_icu_handle_t v, int irq, int trigger)
{
	struct piix_handle *ph = v;
	int off, bit;
	u_int8_t elcr;

	if (PIIX_LEGAL_IRQ(irq) == 0)
		return (1);

	off = (irq > 7) ? 1 : 0;
	bit = irq & 7;

	elcr = bus_space_read_1(ph->ph_iot, ph->ph_elcr_ioh, off);
	if (trigger == IST_LEVEL)
		elcr |= (1 << bit);
	else
		elcr &= ~(1 << bit);
	bus_space_write_1(ph->ph_iot, ph->ph_elcr_ioh, off, elcr);

	return (0);
}

#ifdef PIIX_DEBUG
void
piix_pir_dump(struct piix_handle *ph)
{
	int i, irq;
	pcireg_t irqs = pci_conf_read(ph->ph_pc, ph->ph_tag, PIIX_CFG_PIRQ);
	u_int8_t elcr[2];

	elcr[0] = bus_space_read_1(ph->ph_iot, ph->ph_elcr_ioh, 0);
	elcr[1] = bus_space_read_1(ph->ph_iot, ph->ph_elcr_ioh, 1);

	for (i = 0; i < 8; i++) {
		if (i == 4)
			irqs = pci_conf_read(ph->ph_pc, ph->ph_tag,
			    PIIX_CFG_PIRQH);

		irq = PIIX_PIRQ(irqs, i);
		if (irq & PIIX_CFG_PIRQ_NONE)
			printf("PIIX PIRQ %d: irq none (0x%x)\n", i, irq);
		else
			printf("PIIX PIRQ %d: irq %d\n", i, irq);
	}

	printf("PIIX irq:");
	for (i = 0; i < 16; i++)
		printf(" %2d", i);
	printf("\n");
	printf(" trigger:");
	for (i = 0; i < 16; i++)
		printf("  %c", (elcr[(i & 8) ? 1 : 0] & (1 << (i & 7))) ?
		       'L' : 'E');
	printf("\n");
}
#endif /* PIIX_DEBUG */
@


1.10
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.9 2008/06/26 05:42:11 ray Exp $	*/
d116 1
a116 1
		free(ph, M_DEVBUF, 0);
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.8 2006/09/19 11:06:34 jsg Exp $	*/
d116 1
a116 1
		free(ph, M_DEVBUF);
@


1.8
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.7 2003/03/28 23:12:33 mickey Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@add support for the i830 that has 8 pci irq lines configure by the extra 0x68 pci config reg. does not change the behaviour for the other chipsets; ho@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.6 2002/03/14 01:26:33 millert Exp $	*/
d108 2
a109 6
piix_init(pc, iot, tag, ptagp, phandp)
	pci_chipset_tag_t pc;
	bus_space_tag_t iot;
	pcitag_t tag;
	pciintr_icu_tag_t *ptagp;
	pciintr_icu_handle_t *phandp;
d136 1
a136 3
piix_getclink(v, link, clinkp)
	pciintr_icu_handle_t v;
	int link, *clinkp;
d166 1
a166 3
piix_get_intr(v, clink, irqp)
	pciintr_icu_handle_t v;
	int clink, *irqp;
d192 1
a192 3
piix_set_intr(v, clink, irq)
	pciintr_icu_handle_t v;
	int clink, irq;
d217 1
a217 3
piix_get_trigger(v, irq, triggerp)
	pciintr_icu_handle_t v;
	int irq, *triggerp;
d239 1
a239 3
piix_set_trigger(v, irq, trigger)
	pciintr_icu_handle_t v;
	int irq, trigger;
d263 1
a263 2
piix_pir_dump(ph)
	struct piix_handle *ph;
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.5 2001/01/25 00:07:40 mickey Exp $	*/
d160 7
d177 1
a177 1
	int shift;
d183 7
a189 1
	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, PIIX_CFG_PIRQ);
d205 1
a205 1
	int shift;
d211 7
a217 1
	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, PIIX_CFG_PIRQ);
d221 1
a221 1
	pci_conf_write(ph->ph_pc, ph->ph_tag, PIIX_CFG_PIRQ, reg);
d287 5
a291 1
	for (i = 0; i < 4; i++) {
d298 1
@


1.5
log
@put pci_intr_fixup.h into pcibiosvar.h; billions of tiny headers for nothing
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.4 2000/08/08 19:12:48 mickey Exp $	*/
d92 3
a94 3
int	piix_getclink __P((pciintr_icu_handle_t, int, int *));
int	piix_get_intr __P((pciintr_icu_handle_t, int, int *));
int	piix_set_intr __P((pciintr_icu_handle_t, int, int));
d96 1
a96 1
void	piix_pir_dump __P((struct piix_handle *));
@


1.5.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.5 2001/01/25 00:07:40 mickey Exp $	*/
d92 3
a94 3
int	piix_getclink(pciintr_icu_handle_t, int, int *);
int	piix_get_intr(pciintr_icu_handle_t, int, int *);
int	piix_set_intr(pciintr_icu_handle_t, int, int);
d96 1
a96 1
void	piix_pir_dump(struct piix_handle *);
@


1.5.8.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a159 7
	/* Pattern 3: configuration register offset, PIRQE# - PIRQH# */
	if (link >= 0x68 && link <= 0x6b) {
		*clinkp = link - 0x64;
		DPRINTF(("PIRQ %d (high register offset)\n", *clinkp));
		return (0);
	}

d170 1
a170 1
	int shift, off;
d176 1
a176 7
	off = PIIX_CFG_PIRQ;
	if (clink > 3) {
		off += 8;
		clink -= 4;
	}

	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, off);
d192 1
a192 1
	int shift, off;
d198 1
a198 7
	off = PIIX_CFG_PIRQ;
	if (clink > 3) {
		off += 8;
		clink -= 4;
	}

	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, off);
d202 1
a202 1
	pci_conf_write(ph->ph_pc, ph->ph_tag, off, reg);
d268 1
a268 5
	for (i = 0; i < 8; i++) {
		if (i == 4)
			irqs = pci_conf_read(ph->ph_pc, ph->ph_tag,
			    PIIX_CFG_PIRQH);

a274 1

@


1.5.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.5 2001/01/25 00:07:40 mickey Exp $	*/
@


1.5.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 3
a94 3
int	piix_getclink(pciintr_icu_handle_t, int, int *);
int	piix_get_intr(pciintr_icu_handle_t, int, int *);
int	piix_set_intr(pciintr_icu_handle_t, int, int);
d96 1
a96 1
void	piix_pir_dump(struct piix_handle *);
@


1.5.2.3
log
@Sync the SMP branch to -current, plus some ELF-related fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.5.2.2 2002/03/28 10:31:05 niklas Exp $	*/
a159 7
	/* Pattern 3: configuration register offset, PIRQE# - PIRQH# */
	if (link >= 0x68 && link <= 0x6b) {
		*clinkp = link - 0x64;
		DPRINTF(("PIRQ %d (high register offset)\n", *clinkp));
		return (0);
	}

d170 1
a170 1
	int shift, off;
d176 1
a176 7
	off = PIIX_CFG_PIRQ;
	if (clink > 3) {
		off += 8;
		clink -= 4;
	}

	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, off);
d192 1
a192 1
	int shift, off;
d198 1
a198 7
	off = PIIX_CFG_PIRQ;
	if (clink > 3) {
		off += 8;
		clink -= 4;
	}

	reg = pci_conf_read(ph->ph_pc, ph->ph_tag, off);
d202 1
a202 1
	pci_conf_write(ph->ph_pc, ph->ph_tag, off, reg);
d268 1
a268 5
	for (i = 0; i < 8; i++) {
		if (i == 4)
			irqs = pci_conf_read(ph->ph_pc, ph->ph_tag,
			    PIIX_CFG_PIRQH);

a274 1

@


1.4
log
@sync w/ netbsd almost -current code (;
fixes quite a few problems.
adds new option PCIBIOS_ADDR_FIXUP.
numerous extra fixes by me, also pointed out by other ppl,
such as avoid panics, ifdef on pciverbose, not diagnostic,
some other smaller knits; some have been forwarded back
to netbsd developers, some will go soon too.
@
text
@d1 1
a1 1
/*	$OpenBSD: piix.c,v 1.3 2000/03/28 03:37:59 mickey Exp $	*/
d82 1
a82 1
#include <i386/pci/pci_intr_fixup.h>
@


1.3
log
@fix netbsd rcsids up.
also, from the 3rd try make proper openbsd rcsids, rediculous
3 commits just to add proper openbsd rcsids.
i think someone forgot to _look_ at the diffs before commit.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: piix.c,v 1.1 1999/11/17 01:21:20 thorpej Exp $  */
d86 6
d95 3
d131 3
d144 1
d149 1
d156 1
d160 1
d179 1
a179 1
		*irqp = 0xff;
d255 31
@


1.2
log
@add missing OpenBSD RCS IDs
@
text
@d1 2
a2 2
/*	$OpenBSD	*/
/*	$NetBSD$	*/
@


1.1
log
@from netbsd: pci interrupt routing code.
also, change a few pcidevs names to match netbsd (and more descriptive).
tested on a bunch of laptops, helps resolving 'pin X unmapped'
problems for (usually) usb and cardbus cntrollers.
@
text
@d1 1
@

