head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.4
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.23
date	2017.09.06.16.18.27;	author visa;	state Exp;
branches;
next	1.22;
commitid	AazzE4NPnDIF5ZQt;

1.22
date	2017.07.25.11.01.28;	author jmatthew;	state Exp;
branches;
next	1.21;
commitid	gtKvgVDWz9w9Xnte;

1.21
date	2017.07.15.06.35.42;	author visa;	state Exp;
branches;
next	1.20;
commitid	xayLyrtpJZmc40Yd;

1.20
date	2017.06.18.13.58.44;	author visa;	state Exp;
branches;
next	1.19;
commitid	dEB6EZ6sWrUWvyR2;

1.19
date	2017.04.24.14.10.19;	author visa;	state Exp;
branches;
next	1.18;
commitid	Kjib6HZlMCm8lnL1;

1.18
date	2017.04.15.04.18.40;	author visa;	state Exp;
branches;
next	1.17;
commitid	ob9OeWVNovIXls5q;

1.17
date	2016.12.08.16.24.51;	author visa;	state Exp;
branches;
next	1.16;
commitid	a5qzHlIr7njfoVqO;

1.16
date	2016.06.22.13.09.35;	author visa;	state Exp;
branches;
next	1.15;
commitid	KLZKLKw34aQIX6oW;

1.15
date	2016.03.18.05.38.10;	author jmatthew;	state Exp;
branches;
next	1.14;
commitid	jF5raQOhBtwKW5eh;

1.14
date	2015.07.20.19.44.32;	author pirofti;	state Exp;
branches;
next	1.13;
commitid	8BQ1mX3eNLtSDODb;

1.13
date	2015.07.19.23.46.50;	author jasper;	state Exp;
branches;
next	1.12;
commitid	srHxICmjHBgmnrAl;

1.12
date	2015.07.16.02.19.47;	author jasper;	state Exp;
branches;
next	1.11;
commitid	ZereqVKGV5N89DTs;

1.11
date	2015.07.13.19.05.23;	author miod;	state Exp;
branches;
next	1.10;
commitid	Zz1PviK9rGK25Fmx;

1.10
date	2015.04.26.12.24.03;	author jmatthew;	state Exp;
branches;
next	1.9;
commitid	0O8FBo5KrJC7I7mb;

1.9
date	2015.02.11.05.42.17;	author uebayasi;	state Exp;
branches;
next	1.8;
commitid	UfuSTEGhxAHZQfvK;

1.8
date	2014.09.30.06.51.58;	author jmatthew;	state Exp;
branches;
next	1.7;
commitid	pUEUpP9FlbomZUiI;

1.7
date	2014.07.09.23.03.22;	author pirofti;	state Exp;
branches;
next	1.6;
commitid	14P6M4E3tXc8O5vd;

1.6
date	2014.05.10.22.25.16;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.24.20.45.03;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.02.20.29.36;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.03.19.42.53;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.16.11.22.30;	author syuu;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.08.13.24.55;	author syuu;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Allow two GMX instances on CN70xx/CN71xx to enable all ports
on the E300 boards.
@
text
@/*	$OpenBSD: octeon_iobus.c,v 1.22 2017/07/25 11:01:28 jmatthew Exp $ */

/*
 * Copyright (c) 2000-2004 Opsycon AB  (www.opsycon.se)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * This is a iobus driver.
 * It handles configuration of all devices on the processor bus except UART.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/atomic.h>

#include <dev/ofw/fdt.h>
#include <dev/ofw/openfirm.h>

#include <machine/autoconf.h>
#include <machine/fdt.h>
#include <machine/intr.h>
#include <machine/octeonvar.h>
#include <machine/octeonreg.h>
#include <machine/octeon_model.h>

#include <octeon/dev/iobusvar.h>
#include <octeon/dev/cn30xxgmxreg.h>
#include <octeon/dev/octhcireg.h>	/* USBN_BASE */

int	iobusmatch(struct device *, void *, void *);
void	iobusattach(struct device *, struct device *, void *);
int	iobusprint(void *, const char *);
int	iobussubmatch(struct device *, void *, void *);
int	iobussearch(struct device *, void *, void *);

u_int8_t iobus_read_1(bus_space_tag_t, bus_space_handle_t, bus_size_t);
u_int16_t iobus_read_2(bus_space_tag_t, bus_space_handle_t, bus_size_t);
u_int32_t iobus_read_4(bus_space_tag_t, bus_space_handle_t, bus_size_t);
u_int64_t iobus_read_8(bus_space_tag_t, bus_space_handle_t, bus_size_t);

void	 iobus_write_1(bus_space_tag_t, bus_space_handle_t, bus_size_t,
	    u_int8_t);
void	 iobus_write_2(bus_space_tag_t, bus_space_handle_t, bus_size_t,
	    u_int16_t);
void	 iobus_write_4(bus_space_tag_t, bus_space_handle_t, bus_size_t,
	    u_int32_t);
void	 iobus_write_8(bus_space_tag_t, bus_space_handle_t, bus_size_t,
	    u_int64_t);

void	 iobus_read_raw_2(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    u_int8_t *, bus_size_t);
void	 iobus_write_raw_2(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    const u_int8_t *, bus_size_t);
void	 iobus_read_raw_4(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    u_int8_t *, bus_size_t);
void	 iobus_write_raw_4(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    const u_int8_t *, bus_size_t);
void	 iobus_read_raw_8(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    u_int8_t *, bus_size_t);
void	 iobus_write_raw_8(bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    const u_int8_t *, bus_size_t);

bus_addr_t iobus_pa_to_device(paddr_t);
paddr_t	 iobus_device_to_pa(bus_addr_t);

struct cfattach iobus_ca = {
	sizeof(struct device), iobusmatch, iobusattach
};

struct cfdriver iobus_cd = {
	NULL, "iobus", DV_DULL
};

bus_space_t iobus_tag = {
	.bus_base = PHYS_TO_XKPHYS(0, CCA_NC),
	.bus_private = NULL,
	._space_read_1 =	generic_space_read_1,
	._space_write_1 =	generic_space_write_1,
	._space_read_2 =	generic_space_read_2,
	._space_write_2 =	generic_space_write_2,
	._space_read_4 =	generic_space_read_4,
	._space_write_4 =	generic_space_write_4,
	._space_read_8 =	generic_space_read_8,
	._space_write_8 =	generic_space_write_8,
	._space_read_raw_2 =	generic_space_read_raw_2,
	._space_write_raw_2 =	generic_space_write_raw_2,
	._space_read_raw_4 =	generic_space_read_raw_4,
	._space_write_raw_4 =	generic_space_write_raw_4,
	._space_read_raw_8 =	generic_space_read_raw_8,
	._space_write_raw_8 =	generic_space_write_raw_8,
	._space_map =		iobus_space_map,
	._space_unmap =		iobus_space_unmap,
	._space_subregion =	generic_space_region,
	._space_vaddr =		generic_space_vaddr
};

struct machine_bus_dma_tag iobus_bus_dma_tag = {
	NULL,			/* _cookie */
	_dmamap_create,
	_dmamap_destroy,
	_dmamap_load,
	_dmamap_load_mbuf,
	_dmamap_load_uio,
	_dmamap_load_raw,
	_dmamap_load_buffer,
	_dmamap_unload,
	_dmamap_sync,
	_dmamem_alloc,
	_dmamem_free,
	_dmamem_map,
	_dmamem_unmap,
	_dmamem_mmap,
	iobus_pa_to_device,
	iobus_device_to_pa,
	0
};

/*
 * List of iobus child devices whose base addresses are too large to be
 * recorded in the kernel configuration file. So look them up from here instead.
 */

static const struct octeon_iobus_addrs iobus_addrs[] = {
	{ "octcf",	OCTEON_CF_BASE  },
	{ "octrng",	OCTEON_RNG_BASE },
	{ "dwctwo",	USBN_BASE       },
	{ "amdcf",	OCTEON_AMDCF_BASE},
};

/* There can only be one. */
int	iobus_found;

/*
 * Match bus only to targets which have this bus.
 */
int
iobusmatch(struct device *parent, void *match, void *aux)
{
	if (iobus_found)
		return (0);

	return (1);
}

int
iobusprint(void *aux, const char *iobus)
{
	struct iobus_attach_args *aa = aux;

	if (iobus != NULL)
		printf("%s at %s", aa->aa_name, iobus);

	if (aa->aa_addr != 0)
		printf(" base 0x%lx", aa->aa_addr);
	if (aa->aa_irq >= 0)
		printf(" irq %d", aa->aa_irq);

	return (UNCONF);
}

int
iobussubmatch(struct device *parent, void *vcf, void *args)
{
	struct cfdata *cf = vcf;
	struct iobus_attach_args *aa = args;

	if (strcmp(cf->cf_driver->cd_name, aa->aa_name) != 0)
		return 0;

	if (cf->cf_loc[0] != -1 && cf->cf_loc[0] != (int)aa->aa_addr)
		return 0;

	return (*cf->cf_attach->ca_match)(parent, cf, aa);
}

void
iobusattach(struct device *parent, struct device *self, void *aux)
{
	struct iobus_attach_args aa;
	struct fdt_attach_args fa;
	struct octeon_config oc;
	struct device *sc = self;
	int chipid, i, ngmx, soc;

	iobus_found = 1;

	printf("\n");

	/* XXX */
	oc.mc_iobus_bust = &iobus_tag;
	oc.mc_iobus_dmat = &iobus_bus_dma_tag;
	void	cn30xxfpa_bootstrap(struct octeon_config *);
	cn30xxfpa_bootstrap(&oc);
	void	cn30xxpow_bootstrap(struct octeon_config *);
	cn30xxpow_bootstrap(&oc);

	/*
	 * Attach all subdevices as described in the config file.
	 */

	if ((soc = OF_finddevice("/soc")) != -1) {
		memset(&fa, 0, sizeof(fa));
		fa.fa_name = "";
		fa.fa_node = soc;
		fa.fa_iot = &iobus_tag;
		fa.fa_dmat = &iobus_bus_dma_tag;
		config_found(self, &fa, NULL);
	}

	config_search(iobussearch, self, sc);

	chipid = octeon_get_chipid();
	switch (octeon_model_family(chipid)) {
	case OCTEON_MODEL_FAMILY_CN30XX:
	case OCTEON_MODEL_FAMILY_CN50XX:
	default:
		ngmx = 1;
		break;
	case OCTEON_MODEL_FAMILY_CN61XX:
	case OCTEON_MODEL_FAMILY_CN71XX:
		ngmx = 2;
		break;
	case OCTEON_MODEL_FAMILY_CN73XX:
		ngmx = 0;
		break;
	}
	for (i = 0; i < ngmx; i++) {
		aa.aa_name = "cn30xxgmx";
		aa.aa_bust = &iobus_tag;
		aa.aa_dmat = &iobus_bus_dma_tag;
		aa.aa_addr = GMX0_BASE_PORT0 + GMX_BLOCK_SIZE * i;
		aa.aa_irq = -1;
		aa.aa_unitno = i;
		config_found_sm(self, &aa, iobusprint, iobussubmatch);
	}
}

int
iobussearch(struct device *parent, void *v, void *aux)
{
	struct iobus_attach_args aa;
	struct cfdata *cf = v;
	int i;

	aa.aa_name = cf->cf_driver->cd_name;
	aa.aa_bust = &iobus_tag;
	aa.aa_dmat = &iobus_bus_dma_tag;
	aa.aa_addr = cf->cf_loc[0];
	aa.aa_irq  = cf->cf_loc[1];
	aa.aa_unitno = cf->cf_unit;

	/* No address specified, try to look it up. */
	if (aa.aa_addr == -1) {
		for (i = 0; i < nitems(iobus_addrs); i++) {
			if (strcmp(iobus_addrs[i].name, cf->cf_driver->cd_name) == 0)
				aa.aa_addr = iobus_addrs[i].address;
		}
		if (aa.aa_addr == -1)
			return 0;
	}

	if (cf->cf_attach->ca_match(parent, cf, &aa) == 0)
		return 0;

	config_attach(parent, cf, &aa, iobusprint);
	return 1;
}

int
iobus_space_map(bus_space_tag_t t, bus_addr_t offs, bus_size_t size,
    int flags, bus_space_handle_t *bshp)
{
	if (ISSET(flags, BUS_SPACE_MAP_KSEG0)) {
		*bshp = PHYS_TO_CKSEG0(offs);
		return 0;
	}
	if (ISSET(flags, BUS_SPACE_MAP_CACHEABLE))
		offs +=
		    PHYS_TO_XKPHYS(0, CCA_CACHED) - PHYS_TO_XKPHYS(0, CCA_NC);
	*bshp = t->bus_base + offs;
	return 0;
}

void
iobus_space_unmap(bus_space_tag_t t, bus_space_handle_t bsh, bus_size_t size)
{
}

/*
 * Iobus bus_dma helpers.
 */

bus_addr_t
iobus_pa_to_device(paddr_t pa)
{
	return (bus_addr_t)pa;
}

paddr_t
iobus_device_to_pa(bus_addr_t addr)
{
	return (paddr_t)addr;
}
@


1.22
log
@rework octuctl and its children to attach via fdt
ok visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.21 2017/07/15 06:35:42 visa Exp $ */
d247 1
@


1.21
log
@iobus_h is unused, remove it.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.20 2017/06/18 13:58:44 visa Exp $ */
a55 1
#include <octeon/dev/octuctlreg.h>
a154 1
	{ "octuctl",	UCTL_BASE	},
@


1.20
log
@Split octeon interrupt code into a glue layer and a CIU driver.
This makes possible to add drivers for other interrupt controllers
on the platform.

The glue layer has been derived from arm64/armv7.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.19 2017/04/24 14:10:19 visa Exp $ */
a124 2
bus_space_handle_t iobus_h;

a212 9

	/*
	 * Map and setup CIU control registers.
	 */
	if (bus_space_map(&iobus_tag, OCTEON_CIU_BASE, OCTEON_CIU_SIZE, 0,
		&iobus_h)) {
		printf(": can't map CIU control registers\n");
		return;
	}
@


1.19
log
@Process fdt before iobus devices. Needed later when interrupt and
MDIO controller drivers are attached using fdt.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.18 2017/04/15 04:18:40 visa Exp $ */
a227 2

	octeon_intr_init();
@


1.18
log
@No GMX on CN73xx.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.17 2016/12/08 16:24:51 visa Exp $ */
d242 10
a275 9
	}

	if ((soc = OF_finddevice("/soc")) != -1) {
		memset(&fa, 0, sizeof(fa));
		fa.fa_name = "";
		fa.fa_node = soc;
		fa.fa_iot = &iobus_tag;
		fa.fa_dmat = &iobus_bus_dma_tag;
		config_found(self, &fa, NULL);
@


1.17
log
@Add fdt_attach_args and simplebus for implementing fdt-capable
drivers on octeon. Adapted from armv7.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.16 2016/06/22 13:09:35 visa Exp $ */
d253 3
@


1.16
log
@Add support for the second GMX interface on Octeon II. This enables
ports eth[0-3] on 8-port EdgeRouters. Currently, port eth0 maps to
network interface cnmac4, eth1 to cnmac5 etc.

ok dlg@@, tested by martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.15 2016/03/18 05:38:10 jmatthew Exp $ */
d43 3
d47 1
d211 1
d214 1
a214 1
	int chipid, i, ngmx;
d263 9
@


1.15
log
@add octuctl, a driver for the Octeon II usb controller interface, and
attachments for ehci and ohci.

ok uebayasi@@ jasper@@ visa@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.14 2015/07/20 19:44:32 pirofti Exp $ */
d47 1
a150 1
	{ "cn30xxgmx",	GMX0_BASE_PORT0 },
d206 2
d209 1
a209 1
	struct octeon_config oc;
d238 21
d281 2
@


1.14
log
@Add a new flash driver for Octeon that allows access to the internal
memory on (at least) D-Link DSR500 machines.

This follows the CFI specification with code borrowed from zrouter
(FreeBSD). The idea, once the current driver is thoroughly tested, would
be to move it to MI land.

The prerequisites to MI are width, shift and row detection and handling.
In the long run I hope to be able to also add wdc support.

For now write support is disabled.

Okay miod@@, deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.13 2015/07/19 23:46:50 jasper Exp $ */
d51 1
d154 1
@


1.13
log
@rework how iobus(4) finds and attaches devices.

this allows us to get rid of the static list of children devices, using only
a lookup table for address hints where needed. as a bonus this removes the
'octcf0: [..] not configured' mesage on machines w/o octcf(4).

tested by pirofti@@ on DSR-500 and ERL by me
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.12 2015/07/16 02:19:47 jasper Exp $ */
d152 1
@


1.12
log
@make a comment more safe, there's no CRIME there.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.11 2015/07/13 19:05:23 miod Exp $ */
d52 5
a56 4
int	 iobusmatch(struct device *, void *, void *);
void	 iobusattach(struct device *, struct device *, void *);
int	 iobusprint(void *, const char *);
int	 iobussubmatch(struct device *, void *, void *);
d143 2
a144 1
 * List of iobus child devices.
d147 5
a151 8
#define	IOBUSDEV(name, unitno, unit)	\
	{ name, unitno, unit, &iobus_tag, &iobus_bus_dma_tag }
const struct iobus_unit iobus_units[] = {
	{ OCTEON_CF_BASE, 0 },			/* octcf */
	{ 0, 0 },				/* pcibus */
	{ GMX0_BASE_PORT0, CIU_INT_GMX_DRP0 },	/* cn30xxgmx */
	{ OCTEON_RNG_BASE, 0 },			/* octrng */
	{ USBN_BASE, CIU_INT_USB },		/* octdwctwo */
d153 3
a155 8
struct iobus_attach_args iobus_children[] = {
	IOBUSDEV("octcf", 0, &iobus_units[0]),
	IOBUSDEV("pcibus", 0, &iobus_units[1]),
	IOBUSDEV("cn30xxgmx", 0, &iobus_units[2]),
	IOBUSDEV("octrng", 0, &iobus_units[3]),
	IOBUSDEV("dwctwo", 0, &iobus_units[4]),
};
#undef	IOBUSDEV
d163 3
d177 4
a180 4
	if (aa->aa_unit->addr != 0)
		printf(" base 0x%lx", aa->aa_unit->addr);
	if (aa->aa_unit->irq >= 0)
		printf(" irq %d", aa->aa_unit->irq);
d194 1
a194 1
	if (cf->cf_loc[0] != -1 && cf->cf_loc[0] != (int)aa->aa_unit->addr)
d203 1
a204 1
	uint i;
d215 2
d230 1
a230 1
	 * Attach subdevices.
d232 30
a261 3
	for (i = 0; i < nitems(iobus_children); i++)
		config_found_sm(self, iobus_children + i,
		    iobusprint, iobussubmatch);
@


1.11
log
@Do not attempt to configure octhci, superseded by dwc2
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.10 2015/04/26 12:24:03 jmatthew Exp $ */
d210 1
a210 1
	 * Map and setup CRIME control registers.
@


1.10
log
@Get dwc2 working on octeon.
- transplant the clock setup code from octhci
- add a bus space tag to deal with dwc2 using little endian addressing
- bump up the rx fifo size, necessary for umass/sd to work

tested on an edgerouter lite, which can almost boot by itself now
ok uebayasi@@ (various parts), miod@@ (bus space bits)
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.9 2015/02/11 05:42:17 uebayasi Exp $ */
d50 1
a50 1
#include <octeon/dev/octhcireg.h>
a151 1
	{ 0, CIU_INT_USB },			/* octhci */
d159 1
a159 2
	IOBUSDEV("octhci", 0, &iobus_units[4]),
	IOBUSDEV("dwctwo", 0, &iobus_units[5]),
@


1.9
log
@Direct config glue for octdwctwo(4).
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a82 8

int	 iobus_space_map(bus_space_tag_t, bus_addr_t, bus_size_t, int,
	    bus_space_handle_t *);
void	 iobus_space_unmap(bus_space_tag_t, bus_space_handle_t, bus_size_t);
int	 iobus_space_region(bus_space_tag_t, bus_space_handle_t, bus_size_t,
	    bus_size_t, bus_space_handle_t *);

void	*iobus_space_vaddr(bus_space_tag_t, bus_space_handle_t);
@


1.8
log
@implement atomic operations using ll/sc, and convert rw_cas and callers of the
pre-existing atomics to match.

tested on sgi (octane) and octeon (erl)
ok miod@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.7 2014/07/09 23:03:22 pirofti Exp $ */
d50 1
d161 1
d169 1
@


1.7
log
@Add work-in-progress octeon USB host controller support.

Not enabled for now. It's easier for me to work on it in-tree.

Discussed with and okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.6 2014/05/10 22:25:16 jasper Exp $ */
d41 1
a43 1
#include <machine/atomic.h>
@


1.6
log
@various format string fixes and remove -Wno-format from octeon

feedback/ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.5 2013/10/24 20:45:03 pirofti Exp $ */
d159 1
d165 2
a166 1
	IOBUSDEV("octrng", 0, &iobus_units[3])
@


1.5
log
@Add support for the hardware random number generator on the octeons.

Works on my DSR-500 and on the edge router as reported on the mailing lists.

Finished sometime in August/September, needs more testing/polishing.

Similar diff from William Orr on tech@@.
Prodded by deraadt@@, okay jasper@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.4 2013/06/02 20:29:36 jasper Exp $ */
d186 1
a186 1
		printf(" base 0x%llx", aa->aa_unit->addr);
@


1.4
log
@move octeonreg.h to a more generic location and add multiple inclusion
guards while here.

ok uebayasi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.3 2012/10/03 19:42:53 miod Exp $ */
d157 2
a158 1
	{ GMX0_BASE_PORT0, CIU_INT_GMX_DRP0 }	/* cn30xxgmx */
d163 2
a164 1
	IOBUSDEV("cn30xxgmx", 0, &iobus_units[2])
@


1.3
log
@Don't include <mips64/archtype.h> when you don't need it.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.2 2011/06/16 11:22:30 syuu Exp $ */
d46 1
a47 1
#include <octeon/dev/octeonreg.h>
@


1.2
log
@Ethernet driver merged from IIJ's contribution code.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_iobus.c,v 1.1 2011/05/08 13:24:55 syuu Exp $ */
a40 2

#include <mips64/archtype.h>
@


1.1
log
@obio renamed iobus, moved interrupt handler code to dev/octeon_intr.c
@
text
@d1 1
a1 1
/*	$OpenBSD: iobus.c,v 1.6 2010/11/23 18:46:29 syuu Exp $ */
d47 1
d51 1
d157 3
a159 2
	{ OCTEON_CF_BASE, 0 }, /* octcf */
	{ 0, 0 }, /* pcibus */
d164 1
d211 1
d226 8
@

