head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.10
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.07.10.10.18.58;	author visa;	state Exp;
branches;
next	1.2;
commitid	ljeJMKR26CJ1ICNZ;

1.2
date	2013.06.01.22.20.35;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.16.11.22.30;	author syuu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Use the synciobdma instruction instead of the sync instruction for
flushing any pending local IOBDMA operations. The sync instruction is
overkill because it implies a full memory barrier.

ok jasper@@ (long time ago)
@
text
@/*	$OpenBSD: cn30xxfauvar.h,v 1.2 2013/06/01 22:20:35 jasper Exp $	*/

/*
 * Copyright (c) 2007 Internet Initiative Japan, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _CN30XXFAUVAR_H_
#define _CN30XXFAUVAR_H_

/* ---- API */

struct cn30xxfau_desc {
	/* offset in scratch buffer */
	size_t		fd_scroff;	/* XXX offset_t */
	/* FAU register number */
	size_t		fd_regno;	/* XXX offset_t */
};

void		cn30xxfau_op_init(struct cn30xxfau_desc *, size_t, size_t);
uint64_t	cn30xxfau_op_save(struct cn30xxfau_desc *);
void		cn30xxfau_op_restore(struct cn30xxfau_desc *, uint64_t);
int64_t		cn30xxfau_op_inc_8(struct cn30xxfau_desc *, int64_t);
int32_t		cn30xxfau_op_inc_4(struct cn30xxfau_desc *, int32_t);
int16_t		cn30xxfau_op_inc_2(struct cn30xxfau_desc *, int16_t);
int8_t		cn30xxfau_op_inc_1(struct cn30xxfau_desc *, int8_t);
int64_t		cn30xxfau_op_incwait_8(struct cn30xxfau_desc *, int);
int32_t		cn30xxfau_op_incwait_4(struct cn30xxfau_desc *, int);
int16_t		cn30xxfau_op_incwait_2(struct cn30xxfau_desc *, int);
int8_t		cn30xxfau_op_incwait_1(struct cn30xxfau_desc *, int);
int64_t		cn30xxfau_op_get_8(struct cn30xxfau_desc *);
int32_t		cn30xxfau_op_get_4(struct cn30xxfau_desc *);
int16_t		cn30xxfau_op_get_2(struct cn30xxfau_desc *);
int8_t		cn30xxfau_op_get_1(struct cn30xxfau_desc *);
int64_t		cn30xxfau_op_getwait_8(struct cn30xxfau_desc *);
int32_t		cn30xxfau_op_getwait_4(struct cn30xxfau_desc *);
int16_t		cn30xxfau_op_getwait_2(struct cn30xxfau_desc *);
int8_t		cn30xxfau_op_getwait_1(struct cn30xxfau_desc *);
void		cn30xxfau_op_add_8(struct cn30xxfau_desc *, int64_t);
void		cn30xxfau_op_add_4(struct cn30xxfau_desc *, int32_t);
void		cn30xxfau_op_add_2(struct cn30xxfau_desc *, int16_t);
void		cn30xxfau_op_add_1(struct cn30xxfau_desc *, int8_t);
void		cn30xxfau_op_set_8(struct cn30xxfau_desc *, int64_t);
void		cn30xxfau_op_set_4(struct cn30xxfau_desc *, int32_t);
void		cn30xxfau_op_set_2(struct cn30xxfau_desc *, int16_t);
void		cn30xxfau_op_set_1(struct cn30xxfau_desc *, int8_t);

/* ---- old API */

/* XXX */
#define OCT_FAU_REG_OQ_ADDR_INDEX (0)
#define OCT_FAU_REG_ADDR_END (256)
/* XXX */

/* XXX */
typedef enum {
	OCT_FAU_OP_SIZE_8  = 0,
	OCT_FAU_OP_SIZE_16 = 1,
	OCT_FAU_OP_SIZE_32 = 2,
	OCT_FAU_OP_SIZE_64 = 3
} fau_op_size_t;
/* XXX */

static inline void
cn30xxfau_op_iobdma(int index, uint64_t args)
{
	uint64_t value;

	value =
	    ((uint64_t)(index & 0xff) << 56) |
	    ((uint64_t)1 << 48) |
	    ((uint64_t)(CN30XXFAU_MAJORDID & 0x1f) << 43) |
	    ((uint64_t)(CN30XXFAU_SUBDID & 0x7) << 40) |
	    ((uint64_t)args & 0xfffffffffULL);
	octeon_iobdma_write_8(value);
}

/* 3.4.2 IOBDMA Operations */

/* IOBDMA Store Data for FAU Operations */

static inline void
cn30xxfau_op_iobdma_store_data(int scraddr, int incval, int tagwait,
    int size, int reg)
{
	uint64_t args;

	args =
	    ((uint64_t)(incval & 0x3fffff) << 14) |
	    ((uint64_t)(tagwait & 0x1) << 13) |  
	    ((uint64_t)(size & 0x3) << 11) |  
	    ((uint64_t)(reg & 0x7ff) << 0);
	/* use `srcaddr` as `index' */
	cn30xxfau_op_iobdma((int)((uint32_t)scraddr >> 3) /* XXX */, args);
}

static inline void
cn30xxfau_op_inc_fetch_8(struct cn30xxfau_desc *fd, int64_t v)
{
	cn30xxfau_op_iobdma_store_data(fd->fd_scroff, v, 0, OCT_FAU_OP_SIZE_64/* XXX */,
	    fd->fd_regno);
}

static inline int64_t
cn30xxfau_op_inc_read_8(struct cn30xxfau_desc *fd)
{
	octeon_synciobdma();
	return octeon_cvmseg_read_8(fd->fd_scroff);
}

#endif /* _CN30XXFAUVAR_H_ */
@


1.2
log
@as discussed with uebayasi@@ we should only use the "sync" instruction on octeon,
instead of syncs/syncw etc.
so remove the OCTEON_SYNC* macros and use mips_sync() directly.

ok uebayasi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cn30xxfauvar.h,v 1.1 2011/06/16 11:22:30 syuu Exp $	*/
d128 1
a128 1
	mips_sync();
@


1.1
log
@Ethernet driver merged from IIJ's contribution code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d128 1
a128 1
	OCTEON_SYNCIOBDMA;
@

