head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.12
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.10
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2015.07.19.21.11.47;	author jasper;	state Exp;
branches;
next	1.5;
commitid	jXW2P6Ju77aHUukg;

1.5
date	2014.05.07.14.44.54;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.05.16.37.06;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.05.16.34.45;	author pirofti;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.05.16.32.14;	author pirofti;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.24.20.45.03;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.6
log
@don't check for the name in attach_args being NULL; nothing should call
their match functions with (g)aa_name not set.

ok miod@@
@
text
@/*	$OpenBSD: octrng.c,v 1.5 2014/05/07 14:44:54 pirofti Exp $	*/
/*
 * Copyright (c) 2013 Paul Irofti <pirofti@@openbsd.org>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/timeout.h>

#include <dev/rndvar.h>

#include <machine/octeonvar.h>
#include <machine/octeonreg.h>
#include <octeon/dev/iobusvar.h>

int	octrng_match(struct device *, void *, void *);
void	octrng_attach(struct device *, struct device *, void *);
void	octrng_rnd(void *arg);

#ifdef OCTRNG_DEBUG
#define DPRINTF(x)	printf x
#else
#define DPRINTF(x)
#endif

#define OCTRNG_MAP_SIZE 8ULL

/* OCTRNG_ENTROPY_ADDR 0x8001400000000000ULL */
#define OCTRNG_MAJORDID 8ULL
#define OCTRNG_ENTROPY_ADDR (((uint64_t)1 << 48) | \
		((uint64_t)(OCTRNG_MAJORDID & 0x1f) << 43))
#define OCTRNG_ENTROPY_REG	0

#define OCTRNG_CONTROL_ADDR 0x0001180040000000ULL

#define OCTRNG_RESET (1ULL << 3)
#define OCTRNG_ENABLE_OUTPUT (1ULL << 1)
#define OCTRNG_ENABLE_ENTROPY (1ULL << 0)

struct octrng_softc {
	struct device sc_dev;
	struct timeout sc_to;
	struct iobus_attach_args *sc_io;

	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
};

struct cfattach octrng_ca = {
	sizeof(struct octrng_softc), octrng_match, octrng_attach
};

struct cfdriver octrng_cd = {
	NULL, "octrng", DV_DULL
};


int
octrng_match(struct device *parent, void *match, void *aux)
{
	struct iobus_attach_args *aa = aux;
	struct cfdata *cf = match;

	/* XXX: check for board type */

	if (strcmp(aa->aa_name, cf->cf_driver->cd_name) != 0)
		return (0);

	return (1);
}

void
octrng_attach(struct device *parent, struct device *self, void *aux)
{
	struct octrng_softc *sc = (void *)self;
	sc->sc_io = aux;

	uint64_t control_reg;

	sc->sc_iot = sc->sc_io->aa_bust;

	if (bus_space_map(sc->sc_iot, OCTEON_RNG_BASE, OCTRNG_MAP_SIZE, 0,
	    &sc->sc_ioh)) {
		printf(": can't map registers");
	}

	control_reg = octeon_xkphys_read_8(OCTRNG_CONTROL_ADDR);
	control_reg |= (OCTRNG_ENABLE_OUTPUT | OCTRNG_ENABLE_ENTROPY);
	octeon_xkphys_write_8(OCTRNG_CONTROL_ADDR, control_reg);

	timeout_set(&sc->sc_to, octrng_rnd, sc);

	timeout_add_sec(&sc->sc_to, 5);

	printf("\n");
}

void
octrng_rnd(void *arg)
{
	struct octrng_softc *sc = arg;
	uint64_t value;

	value = bus_space_read_8(sc->sc_iot, sc->sc_ioh, OCTRNG_ENTROPY_REG);

	DPRINTF(("%#llX ", value));	/* WARNING: very verbose */

	add_true_randomness(value);
	timeout_add_msec(&sc->sc_to, 10);
}
@


1.5
log
@Fix whitespace mistakes.
@
text
@d1 1
a1 1
/*	$OpenBSD: octrng.c,v 1.4 2013/11/05 16:37:06 pirofti Exp $	*/
d79 1
a79 2
	if (aa->aa_name == NULL ||
	    strcmp(aa->aa_name, cf->cf_driver->cd_name) != 0)
a80 1

@


1.4
log
@octrng: Add name checks during match.
@
text
@d1 1
a1 1
/*	$OpenBSD: octrng.c,v 1.3 2013/11/05 16:34:45 pirofti Exp $	*/
d76 1
a76 1
	
d102 1
a102 1
 	control_reg = octeon_xkphys_read_8(OCTRNG_CONTROL_ADDR);
d121 1
a121 1
 	DPRINTF(("%#llX ", value));	/* WARNING: very verbose */
d123 1
a123 1
 	add_true_randomness(value);
@


1.3
log
@octrng: Fix control flags.

They had the wrong endian representation.

Found the hardway by bcallah@@. Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: octrng.c,v 1.2 2013/11/05 16:32:14 pirofti Exp $	*/
d70 1
d74 3
d78 6
@


1.2
log
@octrng: Disable debug by default.
@
text
@d1 1
a1 1
/*	$OpenBSD: octrng.c,v 1.1 2013/10/24 20:45:03 pirofti Exp $	*/
d49 3
a51 3
#define OCTRNG_RESET (1ULL << 60)
#define OCTRNG_ENABLE_OUTPUT (1ULL << 62)
#define OCTRNG_ENABLE_ENTROPY (1ULL << 63)
@


1.1
log
@Add support for the hardware random number generator on the octeons.

Works on my DSR-500 and on the edge router as reported on the mailing lists.

Finished sometime in August/September, needs more testing/polishing.

Similar diff from William Orr on tech@@.
Prodded by deraadt@@, okay jasper@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a32 1
#define OCTRNG_DEBUG
@

