head	1.19;
access;
symbols
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.12.08.16.27.46;	author visa;	state Exp;
branches;
next	1.18;
commitid	BeLTHk6EmbfN28Ae;

1.18
date	2016.12.04.11.52.51;	author visa;	state Exp;
branches;
next	1.17;
commitid	sMOdTsIY34rvTttD;

1.17
date	2016.12.03.05.39.25;	author visa;	state Exp;
branches;
next	1.16;
commitid	SaGdy7NW5pkIJlQF;

1.16
date	2016.12.02.15.05.05;	author visa;	state Exp;
branches;
next	1.15;
commitid	5pVdkdKXacjl6q61;

1.15
date	2016.12.02.15.01.07;	author visa;	state Exp;
branches;
next	1.14;
commitid	M9HT4l9dUobdrF0B;

1.14
date	2016.11.20.15.02.25;	author visa;	state Exp;
branches;
next	1.13;
commitid	bOvvjuhPVbXo8MzJ;

1.13
date	2016.07.16.10.41.53;	author visa;	state Exp;
branches;
next	1.12;
commitid	ydzHMXRjfqiDLVm3;

1.12
date	2016.03.06.19.42.27;	author mpi;	state Exp;
branches;
next	1.11;
commitid	cyYKarj4qRTft4gD;

1.11
date	2015.09.26.04.37.18;	author visa;	state Exp;
branches;
next	1.10;
commitid	oJejGCo6YjRWNpQL;

1.10
date	2015.09.26.04.05.42;	author visa;	state Exp;
branches;
next	1.9;
commitid	BoxovA6Z5uASJfr5;

1.9
date	2015.05.01.11.17.22;	author miod;	state Exp;
branches;
next	1.8;
commitid	nmL9Wvs1cOBMQGl7;

1.8
date	2014.09.30.06.51.58;	author jmatthew;	state Exp;
branches;
next	1.7;
commitid	pUEUpP9FlbomZUiI;

1.7
date	2013.06.02.20.29.36;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.03.19.42.53;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.29.19.24.31;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.09.29.18.54.38;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.17.11.02.32;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.08.13.24.55;	author syuu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add a routine for setting up interrupt handlers using fdt.

ok kettenis@@
@
text
@/*	$OpenBSD: octeon_intr.c,v 1.18 2016/12/04 11:52:51 visa Exp $	*/

/*
 * Copyright (c) 2000-2004 Opsycon AB  (www.opsycon.se)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Interrupt support for Octeon Processor.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/atomic.h>

#include <dev/ofw/openfirm.h>

#include <mips64/mips_cpu.h>

#include <machine/autoconf.h>
#include <machine/intr.h>
#include <machine/octeonreg.h>

#include <octeon/dev/iobusvar.h>

extern bus_space_handle_t iobus_h;

#define OCTEON_NINTS 128

struct intrbank {
	uint64_t	en;		/* enable mask register */
	uint64_t	sum;		/* service request register */
	int		id;		/* bank number */
};

#define NBANKS		2
#define BANK_SIZE	64
#define IRQ_TO_BANK(x)	((x) >> 6)
#define IRQ_TO_BIT(x)	((x) & 0x3f)

void	 octeon_intr_makemasks(void);
void	 octeon_splx(int);
uint32_t octeon_iointr_bank(struct trapframe *, struct intrbank *);
uint32_t octeon_iointr(uint32_t, struct trapframe *);
void	 octeon_setintrmask(int);

struct intrhand *octeon_intrhand[OCTEON_NINTS];

#define	INTPRI_CIU_0	(INTPRI_CLOCK + 1)

uint64_t octeon_intem[MAXCPUS][NBANKS];
uint64_t octeon_imask[MAXCPUS][NIPLS][NBANKS];
struct intrbank octeon_ibank[MAXCPUS][NBANKS];

void
octeon_intr_init(void)
{
	int cpuid = cpu_number();
	bus_space_write_8(&iobus_tag, iobus_h, CIU_IP2_EN0(cpuid), 0);
	bus_space_write_8(&iobus_tag, iobus_h, CIU_IP3_EN0(cpuid), 0);
	bus_space_write_8(&iobus_tag, iobus_h, CIU_IP2_EN1(cpuid), 0);
	bus_space_write_8(&iobus_tag, iobus_h, CIU_IP3_EN1(cpuid), 0);

	octeon_ibank[cpuid][0].en = CIU_IP2_EN0(cpuid);
	octeon_ibank[cpuid][0].sum = CIU_IP2_SUM0(cpuid);
	octeon_ibank[cpuid][0].id = 0;
	octeon_ibank[cpuid][1].en = CIU_IP2_EN1(cpuid);
	octeon_ibank[cpuid][1].sum = CIU_INT32_SUM1;
	octeon_ibank[cpuid][1].id = 1;

	set_intr(INTPRI_CIU_0, CR_INT_0, octeon_iointr);
	register_splx_handler(octeon_splx);
}

/*
 * Establish an interrupt handler called from the dispatcher.
 * The interrupt function established should return zero if there was nothing
 * to serve (no int) and non-zero when an interrupt was serviced.
 */
void *
octeon_intr_establish(int irq, int level,
    int (*ih_fun)(void *), void *ih_arg, const char *ih_what)
{
	int cpuid = cpu_number();
	struct intrhand **p, *q, *ih;
	int flags;
	int s;

#ifdef DIAGNOSTIC
	if (irq >= OCTEON_NINTS || irq < 0)
		panic("intr_establish: illegal irq %d", irq);
#endif

	flags = (level & IPL_MPSAFE) ? IH_MPSAFE : 0;
	level &= ~IPL_MPSAFE;

	ih = malloc(sizeof *ih, M_DEVBUF, M_NOWAIT);
	if (ih == NULL)
		return NULL;

	ih->ih_next = NULL;
	ih->ih_fun = ih_fun;
	ih->ih_arg = ih_arg;
	ih->ih_level = level;
	ih->ih_flags = flags;
	ih->ih_irq = irq;
	evcount_attach(&ih->ih_count, ih_what, &ih->ih_irq);

	s = splhigh();

	/*
	 * Figure out where to put the handler.
	 * This is O(N^2), but we want to preserve the order, and N is
	 * generally small.
	 */
	for (p = &octeon_intrhand[irq]; (q = *p) != NULL; p = &q->ih_next)
		continue;
	*p = ih;

	octeon_intem[cpuid][IRQ_TO_BANK(irq)] |= 1UL << IRQ_TO_BIT(irq);
	octeon_intr_makemasks();

	splx(s);	/* causes hw mask update */

	return (ih);
}

void *
octeon_intr_establish_fdt_idx(int node, int idx, int level,
    int (*ih_fun)(void *), void *ih_arg, const char *ih_what)
{
	uint32_t *cells;
	int irq, len;

	/*
	 * Assume the interrupt controller is compatible with
	 * cavium,octeon-3860-ciu.
	 */

	len = OF_getproplen(node, "interrupts");
	if (len / (sizeof(uint32_t) * 2) <= idx ||
	    len % (sizeof(uint32_t) * 2) != 0)
		return NULL;

	cells = malloc(len, M_TEMP, M_NOWAIT);
	if (cells == NULL)
		return NULL;

	OF_getpropintarray(node, "interrupts", cells, len);
	irq = cells[idx * 2] * BANK_SIZE + cells[idx * 2 + 1];

	free(cells, M_TEMP, len);

	return octeon_intr_establish(irq, level, ih_fun, ih_arg, ih_what);
}

void
octeon_intr_disestablish(void *_ih)
{
	struct intrhand *ih = _ih;
	struct intrhand *p;
	unsigned int irq = ih->ih_irq;
	int cpuid = cpu_number();
	int s;

	KASSERT(irq < OCTEON_NINTS);

	s = splhigh();

	if (ih == octeon_intrhand[irq]) {
		octeon_intrhand[irq] = ih->ih_next;

		if (octeon_intrhand[irq] == NULL)
			octeon_intem[cpuid][IRQ_TO_BANK(irq)] &=
			    ~(1UL << IRQ_TO_BIT(irq));
	} else {
		for (p = octeon_intrhand[irq]; p != NULL; p = p->ih_next) {
			if (p->ih_next == ih) {
				p->ih_next = ih->ih_next;
				break;
			}
		}
		if (p == NULL)
			panic("%s: intrhand %p has not been registered",
			    __func__, ih);
	}
	free(ih, M_DEVBUF, sizeof(*ih));

	octeon_intr_makemasks();
	splx(s);	/* causes hw mask update */
}

void
octeon_splx(int newipl)
{
	struct cpu_info *ci = curcpu();

	/* Update masks to new ipl. Order highly important! */
	__asm__ (".set noreorder\n");
	ci->ci_ipl = newipl;
	mips_sync();
	__asm__ (".set reorder\n");
	octeon_setintrmask(newipl);

	/* If we still have softints pending trigger processing. */
	if (ci->ci_softpending != 0 && newipl < IPL_SOFTINT)
		setsoftintr0();
}

/*
 * Recompute interrupt masks.
 */
void
octeon_intr_makemasks()
{
	int cpuid = cpu_number();
	int irq, level;
	struct intrhand *q;
	uint intrlevel[OCTEON_NINTS];

	/* First, figure out which levels each IRQ uses. */
	for (irq = 0; irq < OCTEON_NINTS; irq++) {
		uint levels = 0;
		for (q = octeon_intrhand[irq]; q != NULL; q = q->ih_next)
			levels |= 1 << q->ih_level;
		intrlevel[irq] = levels;
	}

	/*
	 * Then figure out which IRQs use each level.
	 * Note that we make sure never to overwrite imask[IPL_HIGH], in
	 * case an interrupt occurs during intr_disestablish() and causes
	 * an unfortunate splx() while we are here recomputing the masks.
	 */
	for (level = IPL_NONE; level < NIPLS; level++) {
		uint64_t mask[NBANKS] = {};
		for (irq = 0; irq < OCTEON_NINTS; irq++)
			if (intrlevel[irq] & (1 << level))
				mask[IRQ_TO_BANK(irq)] |=
				    1UL << IRQ_TO_BIT(irq);
		octeon_imask[cpuid][level][0] = mask[0];
		octeon_imask[cpuid][level][1] = mask[1];
	}
	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so vm > (tty | net | bio).
	 *
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
#define ADD_MASK(dst, src) do {	\
	dst[0] |= src[0];	\
	dst[1] |= src[1];	\
} while (0)
	ADD_MASK(octeon_imask[cpuid][IPL_NET], octeon_imask[cpuid][IPL_BIO]);
	ADD_MASK(octeon_imask[cpuid][IPL_TTY], octeon_imask[cpuid][IPL_NET]);
	ADD_MASK(octeon_imask[cpuid][IPL_VM], octeon_imask[cpuid][IPL_TTY]);
	ADD_MASK(octeon_imask[cpuid][IPL_CLOCK], octeon_imask[cpuid][IPL_VM]);
	ADD_MASK(octeon_imask[cpuid][IPL_HIGH], octeon_imask[cpuid][IPL_CLOCK]);
	ADD_MASK(octeon_imask[cpuid][IPL_IPI], octeon_imask[cpuid][IPL_HIGH]);

	/*
	 * These are pseudo-levels.
	 */
	octeon_imask[cpuid][IPL_NONE][0] = 0;
	octeon_imask[cpuid][IPL_NONE][1] = 0;
}

static inline int
octeon_next_irq(uint64_t *isr)
{
	uint64_t irq, tmp = *isr;

	if (tmp == 0)
		return -1;

	asm volatile (
	"	.set push\n"
	"	.set mips64\n"
	"	dclz	%0, %0\n"
	"	.set pop\n"
	: "=r" (tmp) : "0" (tmp));

	irq = 63u - tmp;
	*isr &= ~(1u << irq);
	return irq;
}

/*
 * Dispatch interrupts in given bank.
 */
uint32_t
octeon_iointr_bank(struct trapframe *frame, struct intrbank *bank)
{
	struct cpu_info *ci = curcpu();
	struct intrhand *ih;
	uint64_t imr, isr, mask;
	int handled, ipl, irq;
#ifdef MULTIPROCESSOR
	register_t sr;
	int need_lock;
#endif

	isr = bus_space_read_8(&iobus_tag, iobus_h, bank->sum);
	imr = bus_space_read_8(&iobus_tag, iobus_h, bank->en);

	isr &= imr;
	if (isr == 0)
		return 0;	/* not for us */

	/*
	 * Mask all pending interrupts.
	 */
	bus_space_write_8(&iobus_tag, iobus_h, bank->en, imr & ~isr);

	/*
	 * If interrupts are spl-masked, mask them and wait for splx()
	 * to reenable them when necessary.
	 */
	if ((mask = isr & octeon_imask[ci->ci_cpuid][frame->ipl][bank->id])
	    != 0) {
		isr &= ~mask;
		imr &= ~mask;
	}
	if (isr == 0)
		return 1;

	/*
	 * Now process allowed interrupts.
	 */

	__asm__ (".set noreorder\n");
	ipl = ci->ci_ipl;
	mips_sync();
	__asm__ (".set reorder\n");

	while ((irq = octeon_next_irq(&isr)) >= 0) {
		irq += bank->id * BANK_SIZE;
		handled = 0;
		for (ih = octeon_intrhand[irq]; ih != NULL; ih = ih->ih_next) {
			splraise(ih->ih_level);
#ifdef MULTIPROCESSOR
			if (ih->ih_level < IPL_IPI) {
				sr = getsr();
				ENABLEIPI();
			}
			if (ih->ih_flags & IH_MPSAFE)
				need_lock = 0;
			else
				need_lock = ih->ih_level < IPL_CLOCK;
			if (need_lock)
				__mp_lock(&kernel_lock);
#endif
			if ((*ih->ih_fun)(ih->ih_arg) != 0) {
				handled = 1;
				atomic_inc_long(
				    (unsigned long *)&ih->ih_count.ec_count);
			}
#ifdef MULTIPROCESSOR
			if (need_lock)
				__mp_unlock(&kernel_lock);
			if (ih->ih_level < IPL_IPI)
				setsr(sr);
#endif
		}
		if (!handled)
			printf("spurious interrupt %d\n", irq);
	}

	__asm__ (".set noreorder\n");
	ci->ci_ipl = ipl;
	mips_sync();
	__asm__ (".set reorder\n");

	/*
	 * Reenable interrupts which have been serviced.
	 */
	bus_space_write_8(&iobus_tag, iobus_h, bank->en, imr);

	return 1;
}

/*
 * Interrupt dispatcher.
 */
uint32_t
octeon_iointr(uint32_t hwpend, struct trapframe *frame)
{
	int cpuid = cpu_number();
	int handled;

	handled = octeon_iointr_bank(frame, &octeon_ibank[cpuid][0]);
	handled |= octeon_iointr_bank(frame, &octeon_ibank[cpuid][1]);
	return handled ? hwpend : 0;
}

void
octeon_setintrmask(int level)
{
	int cpuid = cpu_number();

	bus_space_write_8(&iobus_tag, iobus_h, octeon_ibank[cpuid][0].en,
	    octeon_intem[cpuid][0] & ~octeon_imask[cpuid][level][0]);
	bus_space_write_8(&iobus_tag, iobus_h, octeon_ibank[cpuid][1].en,
	    octeon_intem[cpuid][1] & ~octeon_imask[cpuid][level][1]);
}
@


1.18
log
@Add handling for the second interrupt bank.
Needed by an upcoming driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_intr.c,v 1.17 2016/12/03 05:39:25 visa Exp $	*/
d42 2
d152 29
@


1.17
log
@Implement octeon_intr_disestablish().
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_intr.c,v 1.16 2016/12/02 15:05:05 visa Exp $	*/
d52 12
a63 1
#define OCTEON_NINTS 64
d67 1
d75 3
a77 2
uint64_t octeon_intem[MAXCPUS];
uint64_t octeon_imask[MAXCPUS][NIPLS];
d88 7
d144 1
a144 1
	octeon_intem[cpuid] |= 1UL << irq;
d169 2
a170 1
			octeon_intem[cpuid] &= ~(1ull << irq);
d231 1
a231 1
		uint64_t irqs = 0;
d234 4
a237 2
				irqs |= 1UL << irq;
		octeon_imask[cpuid][level] = irqs;
d246 10
a255 6
	octeon_imask[cpuid][IPL_NET] |= octeon_imask[cpuid][IPL_BIO];
	octeon_imask[cpuid][IPL_TTY] |= octeon_imask[cpuid][IPL_NET];
	octeon_imask[cpuid][IPL_VM] |= octeon_imask[cpuid][IPL_TTY];
	octeon_imask[cpuid][IPL_CLOCK] |= octeon_imask[cpuid][IPL_VM];
	octeon_imask[cpuid][IPL_HIGH] |= octeon_imask[cpuid][IPL_CLOCK];
	octeon_imask[cpuid][IPL_IPI] |= octeon_imask[cpuid][IPL_HIGH];
d260 2
a261 1
	octeon_imask[cpuid][IPL_NONE] = 0;
d285 1
a285 1
 * Interrupt dispatcher.
d288 1
a288 1
octeon_iointr(uint32_t hwpend, struct trapframe *frame)
a292 2
	uint64_t en0 = CIU_IP2_EN0(ci->ci_cpuid);
	uint64_t sum0 = CIU_IP2_SUM0(ci->ci_cpuid);
d299 2
a300 2
	isr = bus_space_read_8(&iobus_tag, iobus_h, sum0);
	imr = bus_space_read_8(&iobus_tag, iobus_h, en0);
d309 1
a309 1
	bus_space_write_8(&iobus_tag, iobus_h, en0, imr & ~isr);
d315 2
a316 1
	if ((mask = isr & octeon_imask[ci->ci_cpuid][frame->ipl]) != 0) {
d321 1
a321 1
		return hwpend;
d333 1
d373 13
a385 1
	bus_space_write_8(&iobus_tag, iobus_h, en0, imr);
d387 3
a389 1
	return hwpend;
d397 4
a400 2
	bus_space_write_8(&iobus_tag, iobus_h, CIU_IP2_EN0(cpuid),
		octeon_intem[cpuid] & ~octeon_imask[cpuid][level]);
@


1.16
log
@Drop stale prototypes and an outdated comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_intr.c,v 1.15 2016/12/02 15:01:07 visa Exp $	*/
d133 1
a133 1
octeon_intr_disestablish(void *ih)
d135 30
a164 2
	/* XXX */
	panic("%s not implemented", __func__);
@


1.15
log
@Simplify interrupt dispatching by processing requests without
prioritization by IPL.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_intr.c,v 1.14 2016/11/20 15:02:25 visa Exp $	*/
a56 2
uint32_t octeon_aux(uint32_t, struct trapframe *);
int	 octeon_iointr_skip(struct intrhand *, uint64_t, uint64_t);
a82 4
 *
 * Interrupts are numbered from 1 and up where 1 maps to HW int 0.
 * XXX There is no reason to keep this... except for hardcoded interrupts
 * XXX in kernel configuration files...
@


1.14
log
@Drop pointless type casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: octeon_intr.c,v 1.13 2016/07/16 10:41:53 visa Exp $	*/
d214 20
d241 1
a241 1
	int cpuid = cpu_number();
d243 7
a249 6
	int ipl;
	int bit;
	struct intrhand *ih;
	int rc;
	uint64_t sum0 = CIU_IP2_SUM0(cpuid);
	uint64_t en0 = CIU_IP2_EN0(cpuid);
a252 1
	bit = 63;
d267 1
a267 1
	if ((mask = isr & octeon_imask[cpuid][frame->ipl]) != 0) {
d271 2
d277 10
a286 22
	if (isr != 0) {
		int lvl, bitno;
		uint64_t tmpisr;

		__asm__ (".set noreorder\n");
		ipl = ci->ci_ipl;
		mips_sync();
		__asm__ (".set reorder\n");

		/* Service higher level interrupts first */
		for (lvl = NIPLS - 1; lvl != IPL_NONE; lvl--) {
			tmpisr = isr & (octeon_imask[cpuid][lvl] ^ octeon_imask[cpuid][lvl - 1]);
			if (tmpisr == 0)
				continue;
			for (bitno = bit, mask = 1UL << bitno; mask != 0;
			    bitno--, mask >>= 1) {
				if ((tmpisr & mask) == 0)
					continue;

				rc = 0;
				for (ih = octeon_intrhand[bitno]; ih != NULL;
				    ih = ih->ih_next) {
d288 10
a297 2
					register_t sr;
					int need_lock;
d299 5
a303 1
					splraise(ih->ih_level);
d305 4
a308 11
					if (ih->ih_level < IPL_IPI) {
						sr = getsr();
						ENABLEIPI();
					}
					if (ih->ih_flags & IH_MPSAFE)
						need_lock = 0;
					else
						need_lock =
						    ih->ih_level < IPL_CLOCK;
					if (need_lock)
						__mp_lock(&kernel_lock);
a309 23
					if ((*ih->ih_fun)(ih->ih_arg) != 0) {
						rc = 1;
						atomic_inc_long((unsigned long *)
						    &ih->ih_count.ec_count);
					}
#ifdef MULTIPROCESSOR
					if (need_lock)
						__mp_unlock(&kernel_lock);
					if (ih->ih_level < IPL_IPI)
						setsr(sr);
#endif
					__asm__ (".set noreorder\n");
					ci->ci_ipl = ipl;
					mips_sync();
					__asm__ (".set reorder\n");
				}
				if (rc == 0)
					printf("spurious interrupt %d\n", bitno);

				isr ^= mask;
				if ((tmpisr ^= mask) == 0)
					break;
			}
d311 3
d315 9
a323 5
		/*
		 * Reenable interrupts which have been serviced.
		 */
		bus_space_write_8(&iobus_tag, iobus_h, en0, imr);
	}
@


1.13
log
@Add $OpenBSD$ / replace $Id$ with $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d117 1
a117 1
	evcount_attach(&ih->ih_count, ih_what, (void *)&ih->ih_irq);
d126 2
a127 3
	for (p = &octeon_intrhand[irq]; (q = *p) != NULL;
	    p = (struct intrhand **)&q->ih_next)
		;
d176 1
a176 2
		for (q = (struct intrhand *)octeon_intrhand[irq]; q != NULL; 
			q = q->ih_next)
d275 1
a275 2
				for (ih = (struct intrhand *)octeon_intrhand[bitno];
					ih != NULL;
@


1.12
log
@Rename mips64's trap_frame into trapframe.

For coherency with other archs and in order to use it in MI code.

ok visa@@, tobiasu@@
@
text
@d1 2
@


1.11
log
@xheart_splx() has to restore the interrupt mask even on secondary CPUs
because each core has a separate mask. Otherwise the IPI can be left
disabled accidentally on a non-primary CPU when the core uses the
rendezvous mutex:

1. splraise(IPL_IPI) soft-masks the IPI.

2. An IPI hits and the CPU enters the interrupt handler.

3. The handler hard-masks the IPI.

4. The interrupt is not processed because of the CPU's current IPL.
   The IPI is left hard-masked on leaving the handler.

5. splx(s) lowers the IPL below IPL_IPI. However, the interrupt's
   hardware mask is left unchanged because of the CPU_IS_PRIMARY()
   check in xheart_splx().

After this, the system will eventually hang because the CPU does not
respond to IPI requests of other cores.

While here, fix a similar situation with CIU interrupts on octeon.
This might save a few moments of debugging once non-primary CPUs are
allowed to process CIU interrupts.

ok miod@@
@
text
@d54 2
a55 2
uint32_t octeon_iointr(uint32_t, struct trap_frame *);
uint32_t octeon_aux(uint32_t, struct trap_frame *);
d218 1
a218 1
octeon_iointr(uint32_t hwpend, struct trap_frame *frame)
@


1.10
log
@Let MP-safe interrupt handlers run without the kernel lock on octeon.

ok kettenis@@
@
text
@d154 2
a155 2
	if (CPU_IS_PRIMARY(ci))
		octeon_setintrmask(newipl);
@


1.9
log
@Do not grab the kernel lock for clock interrupts. Help and ok kettenis@@
@
text
@d94 1
d102 3
d113 1
d280 1
a286 2
						if (ih->ih_level < IPL_CLOCK)
							__mp_lock(&kernel_lock);
d288 7
d302 3
a304 3
					if (ih->ih_level < IPL_IPI) {
						if (ih->ih_level < IPL_CLOCK)
							__mp_unlock(&kernel_lock);
a305 1
					}
@


1.8
log
@implement atomic operations using ll/sc, and convert rw_cas and callers of the
pre-existing atomics to match.

tested on sgi (octane) and octeon (erl)
ok miod@@ dlg@@
@
text
@d281 1
a281 1
						if (ipl < IPL_SCHED)
d292 1
a292 1
						if (ipl < IPL_SCHED)
@


1.7
log
@move octeonreg.h to a more generic location and add multiple inclusion
guards while here.

ok uebayasi@@
@
text
@d38 1
a42 1
#include <machine/atomic.h>
d287 2
a288 1
						atomic_add_uint64(&ih->ih_count.ec_count, 1);
@


1.6
log
@Don't include <mips64/archtype.h> when you don't need it.
@
text
@d44 1
a45 1
#include <octeon/dev/octeonreg.h>
@


1.5
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@a38 1
#include <mips64/archtype.h>
@


1.4
log
@Handle the coprocessor 0 cause and status registers as a 64 bit value now,
as some odd mips designs need moro than 32 bits in there. This causes a lot
of mechanical changes everywhere getsr() is used.
@
text
@d40 1
@


1.3
log
@Proide a mips_sync() macro to wrap asm("sync"), and replace gazillions of
such statements with it.
@
text
@d274 1
a274 1
					u_int32_t sr;
@


1.2
log
@Remove leftover loongson or sgi references.
@
text
@d147 2
a148 1
	__asm__ ("sync\n\t.set reorder\n");
d256 2
a257 1
		__asm__ ("sync\n\t.set reorder\n");
d298 2
a299 1
					__asm__ ("sync\n\t.set reorder\n");
@


1.1
log
@obio renamed iobus, moved interrupt handler code to dev/octeon_intr.c
@
text
@d299 1
a299 1
					printf("spurious crime interrupt %d\n", bitno);
@

