head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.8
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.10
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.05.24.14.06.39;	author visa;	state Exp;
branches;
next	1.3;
commitid	NmQ36NfjDnWgV8QE;

1.3
date	2013.06.01.22.20.35;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.01.21.25.26;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.16.11.22.30;	author syuu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Drop a redundant set of FPA pool definitions.
@
text
@/*	$OpenBSD: cn30xxfpavar.h,v 1.3 2013/06/01 22:20:35 jasper Exp $	*/
/*
 * Copyright (c) 2007 Internet Initiative Japan, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _CN30XXFPAVAR_H_
#define _CN30XXFPAVAR_H_

struct cn30xxfpa_buf {
	int		fb_poolno;	/* pool # */

	size_t		fb_size;	/* element size */
	size_t		fb_nelems;	/* # of elements */

	paddr_t		fb_paddr;	/* physical address */
	vaddr_t		fb_addr;	/* virtual address */
	size_t		fb_len;		/* total length */

	bus_dma_tag_t	fb_dmat;
	bus_dmamap_t	fb_dmah;
	bus_dma_segment_t
			*fb_dma_segs;
	int		fb_dma_nsegs;
};

uint64_t	cn30xxfpa_int_summary(void);
int		cn30xxfpa_buf_init(int, size_t, size_t, struct cn30xxfpa_buf **);
void		*cn30xxfpa_buf_get(struct cn30xxfpa_buf *);
uint64_t	cn30xxfpa_query(int);

#ifdef OCTEON_ETH_DEBUG
void	cn30xxfpa_dump(void);
#endif

#define CACHE_LINE_SIZE (128)

/*
 * operations
 */

static inline uint64_t
cn30xxfpa_load(uint64_t fpapool)
{
	uint64_t addr;

	addr =
	    (0x1ULL << 48) |
	    (0x5ULL << 43) |
	    (fpapool & 0x07ULL) << 40;

	return octeon_xkphys_read_8(addr);
}

#ifdef notyet
static inline uint64_t
cn30xxfpa_iobdma(struct cn30xxfpa_softc *sc, int srcaddr, int len)
{
	/* XXX */
	return 0ULL;
}
#endif

static inline void
cn30xxfpa_store(uint64_t addr, uint64_t fpapool, uint64_t dwbcount)
{
	uint64_t ptr;

	ptr =
	    (0x1ULL << 48) |
	    (0x5ULL << 43) |
	    (fpapool & 0x07ULL) << 40 |
	    (addr & 0xffffffffffULL);

	mips_sync();
	octeon_xkphys_write_8(ptr, (dwbcount & 0x0ffULL));
}

static inline paddr_t
cn30xxfpa_buf_get_paddr(struct cn30xxfpa_buf *fb)
{
	return cn30xxfpa_load(fb->fb_poolno);
}

static inline void
cn30xxfpa_buf_put_paddr(struct cn30xxfpa_buf *fb, paddr_t paddr)
{
	KASSERT(paddr >= fb->fb_paddr);
	KASSERT(paddr < fb->fb_paddr + fb->fb_len);
	cn30xxfpa_store(paddr, fb->fb_poolno, fb->fb_size / 128);
}

static inline void
cn30xxfpa_buf_put(struct cn30xxfpa_buf *fb, void *addr)
{
	paddr_t paddr;

	KASSERT((vaddr_t)addr >= fb->fb_addr);
	KASSERT((vaddr_t)addr < fb->fb_addr + fb->fb_len);
	paddr = fb->fb_paddr + (paddr_t/* XXX */)((vaddr_t)addr - fb->fb_addr);
	cn30xxfpa_buf_put_paddr(fb, paddr);
}

#endif
@


1.3
log
@as discussed with uebayasi@@ we should only use the "sync" instruction on octeon,
instead of syncs/syncw etc.
so remove the OCTEON_SYNC* macros and use mips_sync() directly.

ok uebayasi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cn30xxfpavar.h,v 1.2 2013/06/01 21:25:26 jasper Exp $	*/
a57 30

/* Pool sizes in bytes, must be multiple of a cache line */
#define FPA_POOL_0_SIZE (16 * CACHE_LINE_SIZE)
#define FPA_POOL_1_SIZE (1 * CACHE_LINE_SIZE)
#define FPA_POOL_2_SIZE (8 * CACHE_LINE_SIZE)
#define FPA_POOL_3_SIZE (4 * CACHE_LINE_SIZE)

#define FPA_POOL_4_SIZE (16 * CACHE_LINE_SIZE)
#define FPA_POOL_5_SIZE (16 * CACHE_LINE_SIZE)
#define FPA_POOL_6_SIZE (16 * CACHE_LINE_SIZE)
#define FPA_POOL_7_SIZE (16 * CACHE_LINE_SIZE)

/* Pools in use */
#define FPA_RECV_PKT_POOL		(0)	/* Recieve Packet buffers */
#define FPA_RECV_PKT_POOL_SIZE		FPA_POOL_0_SIZE
#define FPA_RECV_PKT_POOL_LINE		16
#define FPA_WQE_POOL			(1)	/* Work queue entrys */
#define FPA_WQE_POOL_SIZE		FPA_POOL_1_SIZE
#define FPA_WQE_POOL_LINE		1
#define FPA_COMMAND_BUFFER_POOL		(2)	/* PKO queue command buffers */
#define FPA_COMMAND_BUFFER_POOL_SIZE	FPA_POOL_2_SIZE
#define FPA_COMMAND_BUFFER_POOL_LINE	8
#define FPA_GATHER_BUFFER_POOL		(3)	/* PKO gather list buffers */
#define FPA_GATHER_BUFFER_POOL_SIZE	FPA_POOL_3_SIZE
#define FPA_GATHER_BUFFER_POOL_LINE	4

#ifndef FPA_OUTPUT_BUFFER_POOL
#define FPA_OUTPUT_BUFFER_POOL		FPA_COMMAND_BUFFER_POOL
#define FPA_OUTPUT_BUFFER_POOL_SIZE	FPA_COMMAND_BUFFER_POOL_SIZE
#endif
@


1.2
log
@- remove more backward compat code and switch the callers over to the new function

ok uebayasi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cn30xxfpavar.h,v 1.1 2011/06/16 11:22:30 syuu Exp $	*/
d126 1
a126 1
	OCTEON_SYNCWS;
@


1.1
log
@Ethernet driver merged from IIJ's contribution code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d103 1
a103 1
	return octeon_read_csr(addr);
d127 1
a127 1
	octeon_write_csr(ptr, (dwbcount & 0x0ffULL));
@

