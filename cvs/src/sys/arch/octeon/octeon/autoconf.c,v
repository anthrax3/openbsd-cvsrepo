head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2016.11.26.16.31.32;	author martijn;	state Exp;
branches;
next	1.8;
commitid	ASZ1M1FvkvjZ8yBW;

1.8
date	2016.05.18.01.21.40;	author visa;	state Exp;
branches;
next	1.7;
commitid	EnRXIA1woWG7L2f6;

1.7
date	2015.07.20.19.44.32;	author pirofti;	state Exp;
branches;
next	1.6;
commitid	8BQ1mX3eNLtSDODb;

1.6
date	2015.06.30.06.10.21;	author yasuoka;	state Exp;
branches;
next	1.5;
commitid	66P76OcsSrjbmgUT;

1.5
date	2014.07.13.18.07.38;	author jasper;	state Exp;
branches;
next	1.4;
commitid	w33yHfOw0YiCHBmL;

1.4
date	2013.04.08.09.42.26;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.17.11.02.32;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.26.00.02.01;	author syuu;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.20.06.32.30;	author syuu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Allow rootdev to be specified without /dev/ prefix. The full path isn't
needed down the road anyway. Both forms are supported.
e.g. rootdev=/dev/sd0 and rootdev=sd0

OK visa@@
@
text
@/*	$OpenBSD: autoconf.c,v 1.8 2016/05/18 01:21:40 visa Exp $	*/
/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/reboot.h>

#include <machine/autoconf.h>

extern void dumpconf(void);
void parse_uboot_root(void);

int	cold = 1;
struct device *bootdv = NULL;
char    bootdev[16];
enum devclass bootdev_class = DV_DULL;
extern char uboot_rootdev[];

void
cpu_configure(void)
{
	(void)splhigh();

	softintr_init();
	(void)config_rootfound("mainbus", NULL);

	splinit();
	cold = 0;
}

struct devmap {
	char		*dev;
	enum devclass	 class;
};

struct devmap *
findtype(void)
{
	static struct devmap devmap[] = {
		{ "wd", DV_DISK },
		{ "sd", DV_DISK },
		{ "octcf", DV_DISK },
		{ "amdcf", DV_DISK },
		{ "cnmac", DV_IFNET },
		{ NULL, DV_DULL }
	};
	struct devmap *dp = &devmap[0];

	if (strlen(bootdev) < 2)
		return dp;

	while (dp->dev) {
		if (strncmp(bootdev, dp->dev, strlen(dp->dev)) == 0)
			break;
		dp++;
	}

	if (dp->dev == NULL)
		printf("%s is not a valid rootdev\n", bootdev);

	return dp;
}

void
parse_uboot_root(void)
{
	struct devmap *dp;
	char *p;
	size_t len;

        /*
         * Turn the U-Boot root device (rootdev=/dev/octcf0) into a boot device.
         */
        p = strrchr(uboot_rootdev, '/');
        if (p == NULL)
                p = strchr(uboot_rootdev, '=');
		if (p == NULL)
			return;
	p++;

	len = strlen(p);
	if (len <= 2 || len >= sizeof bootdev - 1)
		return;

	strlcpy(bootdev, p, sizeof(bootdev));

	dp = findtype();
	bootdev_class = dp->class;
}

void
diskconf(void)
{
	if (bootdv != NULL)
		printf("boot device: %s\n", bootdv->dv_xname);

	setroot(bootdv, 0, RB_USERREQ);
	dumpconf();
}

void
device_register(struct device *dev, void *aux)
{
	if (bootdv != NULL || dev->dv_class != bootdev_class)
		return;

	switch (bootdev_class) {
	case DV_DISK:
	case DV_IFNET:
		if (strcmp(dev->dv_xname, bootdev) == 0)
			bootdv = dev;
		break;
	default:
		break;
	}
}

struct nam2blk nam2blk[] = {
	{ "sd",		0 },
	{ "cd",		3 },
	{ "wd",		4 },
	{ "rd",		8 },
	{ "vnd",	2 },
	{ "octcf",	15 },
	{ "amdcf",	19 },
	{ NULL,		-1 }
};
@


1.8
log
@Accept cnmac as a valid rootdev from uboot on octeon.
Example: rootdev=/dev/cnmac0

Patch from Kim Lidstrom, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.7 2015/07/20 19:44:32 pirofti Exp $	*/
d92 3
a94 1
                return;
@


1.7
log
@Add a new flash driver for Octeon that allows access to the internal
memory on (at least) D-Link DSR500 machines.

This follows the CFI specification with code borrowed from zrouter
(FreeBSD). The idea, once the current driver is thoroughly tested, would
be to move it to MI land.

The prerequisites to MI are width, shift and row detection and handling.
In the long run I hope to be able to also add wdc support.

For now write support is disabled.

Okay miod@@, deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.6 2015/06/30 06:10:21 yasuoka Exp $	*/
d47 33
d83 1
d99 4
a102 3
	memcpy(bootdev, p, len);
	bootdev[len] = '\0';
	bootdev_class = DV_DISK;
d118 1
a118 7
	if (bootdv != NULL)
		return;

	const char *drvrname = dev->dv_cfdata->cf_driver->cd_name;
	const char *name = dev->dv_xname;

	if (dev->dv_class != bootdev_class)
d123 2
a124 5
		if ((strcmp(drvrname, "wd") == 0 ||
		    strcmp(drvrname, "sd") == 0 ||
		    strcmp(drvrname, "octcf") == 0 ||
		    strcmp(drvrname, "amdcf") == 0) &&
		    strcmp(name, bootdev) == 0)
a125 7
		break;
	case DV_IFNET:
		/*
		 * This relies on the onboard Ethernet interface being
		 * attached before any other (usb) interface.
		 */
		bootdv = dev;
@


1.6
log
@Add "sd" to be specifiedit as "rootdev=" boot parameter.

ok jmatthew
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 2014/07/13 18:07:38 jasper Exp $	*/
d96 2
a97 1
		    strcmp(drvrname, "octcf") == 0) &&
d120 1
@


1.5
log
@consistency with upcoming bootloader device parsing of the uboot arguments,
root= becomes rootdev=
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.4 2013/04/08 09:42:26 jasper Exp $	*/
d94 4
a97 3
		if (strcmp(drvrname, "wd") == 0 && strcmp(name, bootdev) == 0)
			bootdv = dev;
		if (strcmp(drvrname, "octcf") == 0 && strcmp(name, bootdev) == 0)
@


1.4
log
@allow octeon to find it's root device, based on the flags passed by U-Boot. The ${bootcmd}
needs to be something like 'bootoctlinux root=/dev/octcf0'.

This will be temporary untill we have proper bootblocks, but for now, this (in combination)
with an upcoming installer diff allows my CAM-0100 to autoboot straight of the disk, without
having to load the kernel via TFTP.

ok bcallah@@ yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.3 2012/06/17 11:02:32 miod Exp $	*/
d54 1
a54 1
         * Turn the U-Boot root device (root=/dev/octcf0) into a boot device.
@


1.3
log
@Remove leftover loongson or sgi references.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.2 2010/10/26 00:02:01 syuu Exp $	*/
d27 1
d33 1
d48 23
d90 1
a90 1
		return;	
@


1.2
log
@Replace broken CF driver with new one, fixed bus_space base address.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.1 2010/09/20 06:32:30 syuu Exp $	*/
a26 1
void	parsepmonbp(void);
a32 2
extern char pmon_bootp[];

a45 37
parsepmonbp(void)
{
	char *p, *q;
	size_t len;

	if (strncmp(pmon_bootp, "tftp://", 7) == 0) {
		bootdev_class = DV_IFNET;
		strlcpy(bootdev, "netboot", sizeof bootdev);
		return;
	}
	strlcpy(bootdev, "unknown", sizeof bootdev);

	if (strncmp(pmon_bootp, "/dev/disk/", 10) == 0) {
		/* kernel loaded by our boot blocks */
		p = pmon_bootp + 10;
		len = strlen(p);
	} else {
		/* kernel loaded by PMON */
		p = strchr(pmon_bootp, '@@');
		if (p == NULL)
			return;
		p++;

		q = strchr(p, '/');
		if (q == NULL)
			return;
		len = q - p;
	}

	if (len <= 2 || len >= sizeof bootdev - 1)
		return;
	memcpy(bootdev, p, len);
	bootdev[len] = '\0';
	bootdev_class = DV_DISK;
}

void
a47 3
	if (*pmon_bootp != '\0')
		printf("pmon bootpath: %s\n", pmon_bootp);

a66 6
	/* 
	 * The device numbering must match. There's no way
	 * pmon tells us more info. Depending on the usb slot
	 * and hubs used you may be lucky. Also, assume umass/sd for usb
	 * attached devices.
	 */
a72 8
		else {
			/* XXX this really only works safely for usb0... */
		    	if ((strcmp(drvrname, "sd") == 0 ||
			    strcmp(drvrname, "cd") == 0) &&
			    strncmp(bootdev, "usb", 3) == 0 &&
			    strcmp(name + 2, bootdev + 3) == 0)
				bootdv = dev;
		}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 2010/02/16 21:31:36 miod Exp $	*/
d120 2
d149 1
@

