head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.14
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2014.07.12.14.15.06;	author jasper;	state Exp;
branches;
next	1.7;
commitid	mnYZDpPgPp3xToIX;

1.7
date	2014.07.12.14.12.53;	author jasper;	state Exp;
branches;
next	1.6;
commitid	GSe1eGmZSi6cBzuB;

1.6
date	2014.07.12.12.16.36;	author jasper;	state Exp;
branches;
next	1.5;
commitid	RRKawb6sJ6HJg2e9;

1.5
date	2014.07.11.15.38.20;	author jasper;	state Exp;
branches;
next	1.4;
commitid	eJwax5jdpja22J8O;

1.4
date	2013.06.13.20.01.01;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.05.02.45.37;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.05.02.42.29;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.05.01.02.29;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.8
log
@fix annoying bug where the first character would be eaten, cnischar() was
wreaking havoc.

from miod@@
@
text
@/*	$OpenBSD: uart.c,v 1.4 2013/06/13 20:01:01 jasper Exp $	*/

/*
 * Copyright (c) 2001-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/tty.h>

#include <machine/bus.h>
#include <machine/cpu.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>
#include <dev/cons.h>
#include <machine/octeonvar.h>

#include "libsa.h"

#define  OCTEON_MIO_UART0_RBR           0x0001180000000800ull
#define  OCTEON_MIO_UART0_IER           0x0001180000000808ull
#define  OCTEON_MIO_UART0_IIR           0x0001180000000810ull
#define  OCTEON_MIO_UART0_LCR           0x0001180000000818ull
#define  OCTEON_MIO_UART0_MCR           0x0001180000000820ull
#define  OCTEON_MIO_UART0_LSR           0x0001180000000828ull
#define  OCTEON_MIO_UART0_MSR           0x0001180000000830ull
#define  OCTEON_MIO_UART0_THR           0x0001180000000840ull
#define  OCTEON_MIO_UART0_USR           0x0001180000000938ull
#define  OCTEON_MIO_UART0_FCR           0x0001180000000850ull
#define  OCTEON_MIO_UART0_DLL           0x0001180000000880ull
#define  OCTEON_MIO_UART0_DLH           0x0001180000000888ull

#define  USR_TXFIFO_NOTFULL		2

int cn30xxuart_delay(void);
void cn30xxuart_wait_txhr_empty(int);

/*
 * Early console routines.
 */
int
cn30xxuart_delay(void)
{
	int divisor;
	int lcr;
	lcr = octeon_xkphys_read_8(OCTEON_MIO_UART0_LCR);
	octeon_xkphys_write_8(OCTEON_MIO_UART0_LCR, lcr | LCR_DLAB);

	divisor = (octeon_xkphys_read_8(OCTEON_MIO_UART0_DLL) |
			    (octeon_xkphys_read_8(OCTEON_MIO_UART0_DLH) << 8));
	octeon_xkphys_write_8(OCTEON_MIO_UART0_LCR, lcr);

	return (10);
}

void
cn30xxuart_wait_txhr_empty(int d)
{
	while(((octeon_xkphys_read_8(OCTEON_MIO_UART0_LSR) & LSR_TXRDY) == 0) &&
	        ((octeon_xkphys_read_8(OCTEON_MIO_UART0_USR) & USR_TXFIFO_NOTFULL) == 0))
		delay(d);
}

void
cn30xxuartcninit(struct consdev *consdev)
{
	int ier;
	/* Disable interrupts */
	ier = octeon_xkphys_read_8(OCTEON_MIO_UART0_IER) & 0x0;
	octeon_xkphys_write_8(OCTEON_MIO_UART0_IER, ier);

	/* Enable RTS & DTR */
	octeon_xkphys_write_8(OCTEON_MIO_UART0_MCR, MCR_RTS | MCR_DTR);
}

void
cn30xxuartcnprobe(struct consdev *cn)
{
	cn->cn_pri = CN_HIGHPRI;
	cn->cn_dev = makedev(CONSMAJOR, 0);
}

void
cn30xxuartcnputc (dev_t dev, int c)
{
	int d;

	/* 1/10th the time to transmit 1 character (estimate). */
	d = cn30xxuart_delay();
        cn30xxuart_wait_txhr_empty(d);
	octeon_xkphys_write_8(OCTEON_MIO_UART0_THR, c);
        cn30xxuart_wait_txhr_empty(d);
}

int
cn30xxuartcngetc (dev_t dev)
{
	int c, d;

	/* 1/10th the time to transmit 1 character (estimate). */
	d = cn30xxuart_delay();

	if (dev & 0x80)
		return octeon_xkphys_read_8(OCTEON_MIO_UART0_LSR) & LSR_RXRDY;

	while ((octeon_xkphys_read_8(OCTEON_MIO_UART0_LSR) & LSR_RXRDY) == 0)
		delay(d);

	c = octeon_xkphys_read_8(OCTEON_MIO_UART0_RBR);
	if (c == '\r')
		c = '\n';

	return (c);
}
@


1.7
log
@- fill in cninit to enable rts
@
text
@d126 3
d131 1
d133 3
@


1.6
log
@- rewrite register reading/writing to use octeon_xkphys_{read,write}_8 which
  is the right approach
- write into _THR instead of _RBR for cnputc() as per miod's suggestion

this doesn't fix the first character that gets eaten, but it's the right way
to move forward.

with pirofti@@
@
text
@d68 1
a68 1
	uint8_t lcr;
d71 3
a73 1
	divisor = *(int *) (octeon_xkphys_read_8(OCTEON_MIO_UART0_DLL) | octeon_xkphys_read_8(OCTEON_MIO_UART0_DLH) << 8);
d90 7
@


1.5
log
@add some more register definitions
@
text
@d34 1
d39 1
d43 13
a55 12
#define  OCTEON_MIO_UART0               0x8001180000000800ull
#define  OCTEON_MIO_UART0_LSR           0x8001180000000828ull
#define  OCTEON_MIO_UART0_RBR           0x8001180000000800ull
#define  OCTEON_MIO_UART0_IER           0x8001180000000808ull
#define  OCTEON_MIO_UART0_IIR           0x8001180000000810ull
#define  OCTEON_MIO_UART0_MSR           0x8001180000000830ull
#define  OCTEON_MIO_UART0_USR           0x8001180000000938ull
#define  OCTEON_MIO_UART0_LCR           0x8001180000000818ull
#define  OCTEON_MIO_UART0_MCR           0x8001180000000820ull
#define  OCTEON_MIO_UART0_FCR           0x8001180000000850ull
#define  OCTEON_MIO_UART0_DLL           0x8001180000000880ull
#define  OCTEON_MIO_UART0_DLH           0x8001180000000888ull
d68 5
a72 7
	u_char lcr;

	lcr = (u_char)*(uint64_t*)OCTEON_MIO_UART0_LCR;
	*(uint64_t*)OCTEON_MIO_UART0_LCR = lcr | LCR_DLAB;
	divisor = (int)(*(uint64_t*)OCTEON_MIO_UART0_DLL |
		*(uint64_t*)OCTEON_MIO_UART0_DLH << 8);
	*(uint64_t*)OCTEON_MIO_UART0_LCR = lcr;
d74 1
a74 1
	return 10; /* return an approx delay value */
d80 2
a81 2
	while (((*(uint64_t*)OCTEON_MIO_UART0_LSR & LSR_TXRDY) == 0) &&
               ((*(uint64_t*)OCTEON_MIO_UART0_USR & USR_TXFIFO_NOTFULL) == 0))
d105 1
a105 1
	*(uint64_t*)OCTEON_MIO_UART0_RBR = (uint8_t)c;
d117 1
a117 1
	while ((*(uint64_t*)OCTEON_MIO_UART0_LSR & LSR_RXRDY) == 0)
d119 1
a119 3

	c = (uint8_t)*(uint64_t*)OCTEON_MIO_UART0_RBR;

@


1.4
log
@- fix devboot() to properly retrieve octcf0a and add a comment for later
- call boot() so we get to play with the prompt; turns out there's an issue
  where the first 2-3 readline reads from the uart result in no data...to be
  investigated.
@
text
@d1 1
a1 1
/*	$OpenBSD: uart.c,v 1.3 2013/06/05 02:45:37 jasper Exp $	*/
d44 3
d49 2
@


1.3
log
@remove unused function
@
text
@d1 1
a1 1
/*	$OpenBSD: uart.c,v 1.2 2013/06/05 02:42:29 jasper Exp $	*/
d75 1
a75 1
        	((*(uint64_t*)OCTEON_MIO_UART0_USR & USR_TXFIFO_NOTFULL) == 0))
@


1.2
log
@remove ugly hack we couldn't figure out what it was used for, only that it
broke printing characters to the early console.

discussed with pirofti@@ and uebayasi@@
ok uebayasi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uart.c,v 1.1 2013/06/05 01:02:29 jasper Exp $	*/
d87 2
a88 7
	cn->cn_pri = CN_LOWPRI;
	cn->cn_dev = makedev(0, 0);
}

void
cn30xxuartcnpollc(dev_t dev, int c)
{
@


1.1
log
@add WIP second stage bootloader for octeon; far from working and contains many stubs still.
committing it now so I can work on this in tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: cn30xxuart.c,v 1.2 2013/06/02 19:47:32 jasper Exp $	*/
a49 1
static int delay_changed = 1;
a60 1
        static int d = 0;
a61 2
        if (!delay_changed) return d;
        delay_changed = 0;
@

