head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2016.10.09.11.25.40;	author tom;	state Exp;
branches;
next	1.8;
commitid	DfYvEDcFmu1LY9q1;

1.8
date	2016.03.19.11.34.22;	author mpi;	state Exp;
branches;
next	1.7;
commitid	15xZY6veDWwRM6Iq;

1.7
date	2014.07.18.07.27.47;	author jasper;	state Exp;
branches;
next	1.6;
commitid	I9xXxeKqykj3i6gI;

1.6
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.5;
commitid	Cnjup0HpCIRrcQ6o;

1.5
date	2014.07.12.23.34.54;	author jasper;	state Exp;
branches;
next	1.4;
commitid	r9k2SIaE5isJATNY;

1.4
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.3;
commitid	3HeD4LaLGiS22I3y;

1.3
date	2014.07.12.20.36.52;	author jasper;	state Exp;
branches;
next	1.2;
commitid	iEnJ4W4V9xcE82Xl;

1.2
date	2013.06.13.20.01.01;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.05.01.02.29;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Apply consistency to forever loops with continue and NOTREACHED

Same thought from kettenis@@, ok krw@@ phessler@@ millert@@
@
text
@/*	$OpenBSD: machdep.c,v 1.8 2016/03/19 11:34:22 mpi Exp $	*/

/*
 * Copyright (c) 2009, 2010 Miodrag Vallat.
 * Copyright (c) 2013, 2014 Jasper Lievisse Adriaanse <jasper@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Copyright (c) 2003-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <lib/libkern/libkern.h>
#include "libsa.h"
#include <stand/boot/cmd.h>
#include <machine/cpu.h>
#include <machine/octeonreg.h>
#include <machine/octeonvar.h>

struct boot_desc *boot_desc;
struct boot_info *boot_info;

char uboot_rootdev[OCTEON_ARGV_MAX];
char bootdev[16];

int parse_rootdev(void);

/*
 * We need to save the arguments u-boot setup for us, so we can pass them
 * onwards to the kernel later on.
 */
int
mips_init(__register_t a0, __register_t a1, __register_t a2 __unused,
	__register_t a3)
{
	boot_desc = (struct boot_desc *)a3;
	boot_info =
		(struct boot_info *)PHYS_TO_CKSEG0(boot_desc->boot_info_addr);

	boot(0);
	return 0;
}

/*
 * Console and TTY related functions
 */

int
cnspeed(dev_t dev, int s)
{
	return CONSPEED;
}

char *
ttyname(int fd)
{
	return "uboot console";
}

dev_t
ttydev(char *name)
{
	return (NODEV);
}

/*
 * Boot -devices and -path related functions.
 */

void
devboot(dev_t dev, char *path)
{
	int i;

	/*
	 * Decode the uboot 'rootdev' argument into a device and partition
	 * we can use to load the kernel off. We skip the first two arguments
	 * since they're always the same (bootoctlinux, $image).
	 * We expect the 'rootdev' argument to be 'octcf0a' or the like.
	 */
	for (i = 1; i < boot_desc->argc; i++) {
		const char *arg =
		    (const char*)PHYS_TO_CKSEG0(boot_desc->argv[i]);

		if (arg == NULL)
			continue;

		if (strncmp(arg, "rootdev=", 8) == 0) {
			if (*uboot_rootdev == '\0') {
				strlcpy(uboot_rootdev, arg,
					sizeof(uboot_rootdev));
				if (parse_rootdev() == 0) {
					strlcpy(path, bootdev, BOOTDEVLEN);
					return;
				}
			} else {
				break; /* No point in going on. */
			}
		}
	}

	/* No arguments given, or it couldn't be parsed. */
	strlcpy(path, "octcf0a", BOOTDEVLEN);
}

int
parse_rootdev(void)
{
	char *p;
	size_t len;

	/*
	 * Take 'rootdev=sd0a' and return the device.
         */
        p = strchr(uboot_rootdev, '=');
	if (p == NULL)
		return 1;
	p++;
	len = strlen(p);
        if (len <= 2 || len >= sizeof bootdev - 1)
                return 1;

	memcpy(bootdev, p, len);

	return 0;
}

time_t
getsecs(void)
{
	u_int nticks = cp0_get_count();
	uint32_t freq = boot_desc->eclock;

	return (time_t)((0xffffffff - nticks) / freq);
}

void
machdep()
{
	cninit();
}

__dead void
_rtt()
{
	octeon_xkphys_write_8(OCTEON_CIU_BASE + CIU_SOFT_RST, 1);
	for (;;)
		continue;
	/* NOTREACHED */
}
@


1.8
log
@Reduces the noise around the global ``ticks'' variable by renaming
all the local ones to ``nticks''.

ok stefan@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.7 2014/07/18 07:27:47 jasper Exp $	*/
d180 3
a182 1
	for (;;) ;
@


1.7
log
@implement 'rootdev' parsing similar to what's already done in the kernel,
but this time for bootdev(). defaults to octcf0a if all else fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.6 2014/07/13 09:26:08 jasper Exp $	*/
d164 1
a164 1
	u_int ticks = cp0_get_count();
d167 1
a167 1
	return (time_t)((0xffffffff - ticks) / freq);
@


1.6
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.5 2014/07/12 23:34:54 jasper Exp $	*/
d56 5
d106 7
a112 3
	/* XXX:
	 * Assumes we booted from CF as this is currently the only supported
	 * disk. We may need to dig deeper to figure out the real root device.
d114 22
d137 22
@


1.5
log
@unify cnspeed()
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.4 2014/07/12 21:54:58 jasper Exp $	*/
a79 31
}

int pch_pos;

void
putchar(int c)
{
	switch (c) {
	case '\177':	/* DEL erases */
		cnputc('\b');
		cnputc(' ');
	case '\b':
		cnputc('\b');
		if (pch_pos)
			pch_pos--;
		break;
	case '\t':
		do
			cnputc(' ');
		while (++pch_pos % 8) ;
		break;
	case '\n':
	case '\r':
		cnputc(c);
		pch_pos = 0;
		break;
	default:
		cnputc(c);
		pch_pos++;
		break;
	}
@


1.4
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.3 2014/07/12 20:36:52 jasper Exp $	*/
d5 1
a5 1
 * Copyright (c) 2013,2014 Jasper Lievisse Adriaanse <jasper@@openbsd.org>
d79 1
a79 1
	return (CONSPEED);
@


1.3
log
@- replace main() with mips_init() so we can save the arguments from uboot to
  pass it to the kernel later on. also use it to get the clock frequency.
- implement getsecs() so the bootprompt timeout works

input/ok miod@@ pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.2 2013/06/13 20:01:01 jasper Exp $	*/
a79 16
}

int
getchar()
{
	int c = cngetc();

	if (c == '\r')
		c = '\n';

	if ((c < ' ' && c != '\n') || c == '\177')
		return c;

	putchar(c);

	return c;
@


1.2
log
@- fix devboot() to properly retrieve octcf0a and add a comment for later
- call boot() so we get to play with the prompt; turns out there's an issue
  where the first 2-3 readline reads from the uart result in no data...to be
  investigated.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.1 2013/06/05 01:02:29 jasper Exp $	*/
d5 1
a5 1
 * Copyright (c) 2013 Jasper Lievisse Adriaanse <jasper@@openbsd.org>
d48 1
a51 1
#include <stand/boot/cmd.h>
d53 7
d61 2
a62 1
main()
d64 4
d69 1
a69 1
	return (0);
d156 1
a156 1
getsecs()
d158 4
a161 1
	return (0);
a175 1

@


1.1
log
@add WIP second stage bootloader for octeon; far from working and contains many stubs still.
committing it now so I can work on this in tree.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 1
a56 1
	cninit();
d136 5
a140 1
	strlcpy(path, "octcf0a", 7);
d151 3
a153 1
{}
@

