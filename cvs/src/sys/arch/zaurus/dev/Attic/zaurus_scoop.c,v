head	1.22;
access;
symbols
	OPENBSD_6_0:1.21.0.24
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.20
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.22
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.14
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.18
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.16
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.12
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.10
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.8
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.6
	OPENBSD_5_0:1.21.0.4
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.18.0.8
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.4
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.22
date	2016.09.03.13.37.43;	author guenther;	state dead;
branches;
next	1.21;
commitid	6T3r4QcMFKe3Fo5T;

1.21
date	2010.09.07.16.21.41;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.08.30.21.35.57;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.08.27.05.04.11;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.11.25.14.55.44;	author drahn;	state Exp;
branches;
next	1.17;

1.17
date	2007.12.27.07.09.46;	author thib;	state Exp;
branches;
next	1.16;

1.16
date	2007.03.29.18.42.38;	author uwe;	state Exp;
branches;
next	1.15;

1.15
date	2007.03.27.23.23.22;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.26.20.18.09;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.18.20.50.23;	author uwe;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.17.05.26.31;	author uwe;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.01.23.51.55;	author uwe;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.23.22.44.57;	author pascoe;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.09.15.16.36;	author uwe;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.15.01.05.51;	author pascoe;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.08.23.29.06;	author uwe;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.22.21.53.03;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.31.02.22.17;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.26.06.34.54;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.20.23.34.37;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.19.15.56.44;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.19.02.02.34;	author uwe;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: zaurus_scoop.c,v 1.21 2010/09/07 16:21:41 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Uwe Stuehler <uwe@@bsdx.de>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/disk.h>
#include <sys/timeout.h>
#include <sys/gpio.h>

#include <machine/bus.h>

#include <arm/xscale/pxa2x0var.h>

#include <machine/machine_reg.h>
#include <machine/zaurus_var.h>

#include <zaurus/dev/zaurus_scoopreg.h>
#include <zaurus/dev/zaurus_scoopvar.h>

struct scoop_softc {
	struct device sc_dev;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	u_int16_t sc_gpwr;	/* GPIO state before suspend */
	int sc_suspended;
};

int	scoopmatch(struct device *, void *, void *);
void	scoopattach(struct device *, struct device *, void *);
int	scoop_activate(struct device *, int);

struct cfattach scoop_ca = {
	sizeof (struct scoop_softc), scoopmatch, scoopattach, NULL,
	scoop_activate
};

struct cfdriver scoop_cd = {
	NULL, "scoop", DV_DULL
};

enum card {
	SD_CARD,
	CF_CARD			/* socket 0 (external) */
};

int	scoop_gpio_pin_read(struct scoop_softc *sc, int);
void	scoop_gpio_pin_write(struct scoop_softc *sc, int, int);
void	scoop_gpio_pin_ctl(struct scoop_softc *sc, int, int);
void	scoop0_set_card_power(enum card, int);

struct timeout	scoop_checkdisk;
void	scoop_timeout(void *);

int
scoopmatch(struct device *parent, void *match, void *aux)
{
	struct cfdata *cf = match;

	/*
	 * Only C3000-like models are known to have two SCOOPs.
	 */
        if (ZAURUS_ISC3000)
	    	return (cf->cf_unit < 2);

	return (cf->cf_unit == 0);
}

void
scoopattach(struct device *parent, struct device *self, void *aux)
{
	struct pxaip_attach_args *pxa = aux;
	struct scoop_softc *sc = (struct scoop_softc *)self;
	bus_addr_t addr;
	bus_size_t size;

	sc->sc_iot = pxa->pxa_iot;

	if (pxa->pxa_addr != -1)
		addr = pxa->pxa_addr;
	else if (sc->sc_dev.dv_unit == 0)
		addr = C3000_SCOOP0_BASE;
	else
		addr = C3000_SCOOP1_BASE;

	size = pxa->pxa_size < SCOOP_SIZE ? SCOOP_SIZE : pxa->pxa_size;

	if (bus_space_map(sc->sc_iot, addr, size, 0, &sc->sc_ioh) != 0) {
		printf(": failed to map %s\n", sc->sc_dev.dv_xname);
		return;
	}

	if (ZAURUS_ISC3000 && sc->sc_dev.dv_unit == 1) {
		scoop_gpio_pin_ctl(sc, SCOOP1_AKIN_PULLUP, GPIO_PIN_OUTPUT);
		scoop_gpio_pin_write(sc, SCOOP1_AKIN_PULLUP, GPIO_PIN_LOW);
	} else if (!ZAURUS_ISC3000) {
		scoop_gpio_pin_ctl(sc, SCOOP0_AKIN_PULLUP, GPIO_PIN_OUTPUT);
		scoop_gpio_pin_write(sc, SCOOP0_AKIN_PULLUP, GPIO_PIN_LOW);
	}

	if (sc->sc_dev.dv_unit == 0)
		timeout_set(&scoop_checkdisk, scoop_timeout, sc);

	printf(": PCMCIA/GPIO controller\n");
}

int
scoop_gpio_pin_read(struct scoop_softc *sc, int pin)
{
	u_int16_t rv;
	u_int16_t bit = (1 << pin);

	rv = bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR);
	return (rv & bit) != 0 ? 1 : 0;
}

void
scoop_gpio_pin_write(struct scoop_softc *sc, int pin, int level)
{
	u_int16_t rv;
	u_int16_t bit = (1 << pin);
	int s;

	s = splhigh();
	rv = bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR);
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR,
	    level == GPIO_PIN_LOW ? (rv & ~bit) : (rv | bit));
	splx(s);
}

void
scoop_gpio_pin_ctl(struct scoop_softc *sc, int pin, int flags)
{
	u_int16_t rv;
	u_int16_t bit = (1 << pin);

	rv = bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPCR);
	switch (flags & (GPIO_PIN_INPUT|GPIO_PIN_OUTPUT)) {
	case GPIO_PIN_INPUT:
		rv &= ~bit;
		break;
	case GPIO_PIN_OUTPUT:
		rv |= bit;
		break;
	}
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPCR, rv);
}

/*
 * Turn the LCD background light and contrast signal on or off.
 */
void
scoop_set_backlight(int on, int cont)
{

	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL) {
		/* C3000 */
		scoop_gpio_pin_write(scoop_cd.cd_devs[1],
		    SCOOP1_BACKLIGHT_CONT, !cont);
		scoop_gpio_pin_write(scoop_cd.cd_devs[1],
		    SCOOP1_BACKLIGHT_ON, on);
	}
#if 0
	else if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL) {
		scoop_gpio_pin_write(scoop_cd.cd_devs[0],
		    SCOOP0_BACKLIGHT_CONT, cont);
	}
#endif
}

/*
 * Turn the infrared LED on or off (must be on while transmitting).
 */
void
scoop_set_irled(int on)
{
	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL)
		/* IR_ON is inverted */
		scoop_gpio_pin_write(scoop_cd.cd_devs[1],
		    SCOOP1_IR_ON, !on);
}

/*
 * Turn the green and orange LEDs on or off.  If the orange LED is on,
 * then it is wired to indicate if A/C is connected.  The green LED has
 * no such predefined function.
 */
void
scoop_led_set(int led, int on)
{

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL) {
		if ((led & SCOOP_LED_GREEN) != 0)
			scoop_gpio_pin_write(scoop_cd.cd_devs[0],
			    SCOOP0_LED_GREEN, on);
		if (scoop_cd.cd_ndevs > 1 && (led & SCOOP_LED_ORANGE) != 0)
			scoop_gpio_pin_write(scoop_cd.cd_devs[0],
			    SCOOP0_LED_ORANGE_C3000, on);
	}
}

/*
 * Enable or disable the headphone output connection.
 */
void
scoop_set_headphone(int on)
{
	if (scoop_cd.cd_ndevs < 1 || scoop_cd.cd_devs[0] == NULL)
		return;

	scoop_gpio_pin_ctl(scoop_cd.cd_devs[0], SCOOP0_MUTE_L,
	    GPIO_PIN_OUTPUT);
	scoop_gpio_pin_ctl(scoop_cd.cd_devs[0], SCOOP0_MUTE_R,
	    GPIO_PIN_OUTPUT);

	if (on) {
		scoop_gpio_pin_write(scoop_cd.cd_devs[0], SCOOP0_MUTE_L,
		    GPIO_PIN_HIGH);
		scoop_gpio_pin_write(scoop_cd.cd_devs[0], SCOOP0_MUTE_R,
		    GPIO_PIN_HIGH);
	} else {
		scoop_gpio_pin_write(scoop_cd.cd_devs[0], SCOOP0_MUTE_L,
		    GPIO_PIN_LOW);
		scoop_gpio_pin_write(scoop_cd.cd_devs[0], SCOOP0_MUTE_R,
		    GPIO_PIN_LOW);
	}
}

/*
 * Enable or disable 3.3V power to the SD/MMC card slot.
 */
void
scoop_set_sdmmc_power(int on)
{
	scoop0_set_card_power(SD_CARD, on ? SCP_CPR_SD_3V : SCP_CPR_OFF);
}

/*
 * The Card Power Register of the first SCOOP unit controls the power
 * for the first CompactFlash slot and the SD/MMC card slot as well.
 */
void
scoop0_set_card_power(enum card slot, int new_cpr)
{
	struct scoop_softc *sc = scoop_cd.cd_devs[0];
	u_int16_t cpr;

	cpr = bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_CPR);
	if (new_cpr & SCP_CPR_VOLTAGE_MSK) {
		if (slot == CF_CARD)
			cpr |= SCP_CPR_5V;
		else if (slot == SD_CARD)
			cpr |= SCP_CPR_SD_3V;

		scoop_gpio_pin_write(sc, SCOOP0_CF_POWER_C3000, 1);
		if (!ISSET(cpr, SCP_CPR_5V) && !ISSET(cpr, SCP_CPR_SD_3V))
			delay(5000);
		bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_CPR,
		    cpr | new_cpr);
	} else {
		if (slot == CF_CARD)
			cpr &= ~SCP_CPR_5V;
		else if (slot == SD_CARD)
			cpr &= ~SCP_CPR_SD_3V;

		if (!ISSET(cpr, SCP_CPR_5V) && !ISSET(cpr, SCP_CPR_SD_3V)) {
			bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_CPR,
			    SCP_CPR_OFF);
			delay(1000);
			scoop_gpio_pin_write(sc, SCOOP0_CF_POWER_C3000, 0);
		} else
			bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_CPR,
			    cpr | new_cpr);
	}
}

/*
 * Turn on pullup resistor while not reading the remote control.
 */
void
scoop_akin_pullup(int enable)
{
	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL)
		scoop_gpio_pin_write(scoop_cd.cd_devs[1],
		    SCOOP1_AKIN_PULLUP, enable);
	else
		scoop_gpio_pin_write(scoop_cd.cd_devs[0],
		    SCOOP0_AKIN_PULLUP, enable);
}

void
scoop_battery_temp_adc(int enable)
{

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL)
		scoop_gpio_pin_write(scoop_cd.cd_devs[0],
		    SCOOP0_ADC_TEMP_ON_C3000, enable);
}

void
scoop_charge_battery(int enable, int voltage_high)
{

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL) {
		scoop_gpio_pin_write(scoop_cd.cd_devs[0],
		    SCOOP0_JK_B_C3000, voltage_high);
		scoop_gpio_pin_write(scoop_cd.cd_devs[0],
		    SCOOP0_CHARGE_OFF_C3000, !enable);
	}
}

void
scoop_discharge_battery(int enable)
{

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL)
		scoop_gpio_pin_write(scoop_cd.cd_devs[0],
		    SCOOP0_JK_A_C3000, enable);
}

/* XXX */
void scoop_check_mcr(void);
void
scoop_check_mcr(void)
{
	struct	scoop_softc *sc;

	/* C3000 */
	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL) {
		
		sc = scoop_cd.cd_devs[0];
		if ((bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_MCR) &
		    0x100) == 0)
			bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_MCR,
			    0x0101);

		sc = scoop_cd.cd_devs[1];
		if ((bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_MCR) &
		    0x100) == 0)
			bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_MCR,
			    0x0101);
	}
}

void
scoop_suspend(void)
{
	struct scoop_softc *sc;
	u_int32_t rv;

	scoop_check_mcr();

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL) {
		sc = scoop_cd.cd_devs[0];
		sc->sc_gpwr = bus_space_read_2(sc->sc_iot, sc->sc_ioh,
		    SCOOP_GPWR);
		/* C3000 */
		bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR,
		    sc->sc_gpwr & ~((1<<SCOOP0_MUTE_L) | (1<<SCOOP0_MUTE_R) |
		    (1<<SCOOP0_JK_A_C3000) | (1<<SCOOP0_ADC_TEMP_ON_C3000) |
		    (1<<SCOOP0_LED_GREEN)));
	}

	/* C3000 */
	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL) {
		sc = scoop_cd.cd_devs[1];
		sc->sc_gpwr = bus_space_read_2(sc->sc_iot, sc->sc_ioh,
		    SCOOP_GPWR);
		bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR,
		    sc->sc_gpwr & ~((1<<SCOOP1_RESERVED_4) |
		    (1<<SCOOP1_RESERVED_5) | (1<<SCOOP1_RESERVED_6) |
		    (1<<SCOOP1_BACKLIGHT_CONT) | (1<<SCOOP1_BACKLIGHT_ON) |
		    (1<<SCOOP1_MIC_BIAS)));
		rv = bus_space_read_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR);
		bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR,
		    rv | ((1<<SCOOP1_IR_ON) | (1<<SCOOP1_RESERVED_3)));
	}
}

void
scoop_resume(void)
{
	struct scoop_softc *sc;

	scoop_check_mcr();

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL) {
		sc = scoop_cd.cd_devs[0];
		bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR,
		    sc->sc_gpwr);
	}

	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL) {
		sc = scoop_cd.cd_devs[1];
		bus_space_write_2(sc->sc_iot, sc->sc_ioh, SCOOP_GPWR,
		    sc->sc_gpwr);
	}
}

void
scoop_timeout(void *v)
{
	extern struct disklist_head disklist;
	struct scoop_softc *sc = v;
	static struct disk *dk;
	static int state = 0;

	if (dk == NULL) {
		TAILQ_FOREACH(dk, &disklist, dk_link) {
			if (dk->dk_name &&
			    strcmp(dk->dk_name, "wd0") == 0)
				break;
		}
	}

	if (sc->sc_suspended)
		state = -1;
	else if (dk) {
		int newstate = (dk->dk_busy ? 1 : 0);

		if (newstate != state) {
			state = newstate;
			scoop_led_set(SCOOP_LED_GREEN, newstate);
		}
	}
	timeout_add(&scoop_checkdisk, hz/25);
}

int
scoop_activate(struct device *self, int act)
{
	struct scoop_softc *sc = (struct scoop_softc *)self;

	switch (act) {
	case DVACT_SUSPEND:
		/*
		 * Nothing should use the scoop from this point on.
		 * No timeouts, no interrupts (even though interrupts
		 * are still enabled).  scoop_timeout() respects the
		 * sc_suspended flag.
		 */
		if (sc->sc_dev.dv_unit == 0) {
			sc->sc_suspended = 1;
			scoop_suspend();
		}
		break;
	case DVACT_RESUME:
		if (sc->sc_dev.dv_unit == 0) {
			scoop_resume();
			sc->sc_suspended = 0;
		}
		break;
	}
	return 0;
}
@


1.21
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.20 2010/08/30 21:35:57 deraadt Exp $	*/
@


1.20
log
@Convert all powerhooks to activate functions, and provide powerhook stubs.
Of note:  lcd stubs get pulled up to the parent; zts has to keep track of
whether it is in use or not
testing by myself and jakemsr; proof reading by oga
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.19 2010/08/27 05:04:11 deraadt Exp $	*/
a42 1
	void *sc_powerhook;
a70 1
void	scoop_powerhook(int, void *);
a121 5

	sc->sc_powerhook = powerhook_establish(scoop_powerhook, sc);
	if (sc->sc_powerhook == NULL)
		panic("Unable to establish %s powerhook",
		    sc->sc_dev.dv_xname);
a471 6
}

void
scoop_powerhook(int why, void *arg)
{
	scoop_activate(arg, why);
@


1.19
log
@More killing of PWR_STANDBY.  cvs skipped these files
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.18 2008/11/25 14:55:44 drahn Exp $	*/
d49 1
d52 2
a53 1
	sizeof (struct scoop_softc), scoopmatch, scoopattach
d72 1
a72 1
void	scoop_power(int, void *);
d125 1
a125 1
	sc->sc_powerhook = powerhook_establish(scoop_power, sc);
d453 2
a454 2
void
scoop_power(int why, void *arg)
d456 1
a456 1
	struct scoop_softc *sc = arg;
d458 2
a459 2
	switch (why) {
	case PWR_SUSPEND:
d471 1
a471 1
	case PWR_RESUME:
d478 7
@


1.18
log
@rename zaurus_reg.h to machine_reg and rename some of the internal fields
so that arm/xscale/... is not referring to zaurus specific defines.
ok miod kevlo, with some suggested changes from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.17 2007/12/27 07:09:46 thib Exp $	*/
a456 1
	case PWR_STANDBY:
@


1.17
log
@use TAILQ_FOREACH when possible instead of manually
rolling it.

ok todd@@, miod@@;
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.16 2007/03/29 18:42:38 uwe Exp $	*/
d32 1
a32 1
#include <machine/zaurus_reg.h>
@


1.16
log
@Add power hook to scoop(4), replacing the Zaurus-specific scoop_* calls in
pxa2x0_apm.c.

Set a flag to indicate that scoop is currently suspended.  Test this flag
in scoop_timeout() (and maybe later in other places) to avoid manipulating
scoop registers while the driver is suspended.  The scoop_checkdisk timeout
is intentionally not stopped, as it should be safe to have timeouts running
accross suspend/resume.

Put splhigh() in scoop_gpio_pin_write() to make changing the pin level an
atomic operation.

Result of prodding and diffs from Robert and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.15 2007/03/27 23:23:22 deraadt Exp $	*/
d431 1
a431 2
		for (dk = TAILQ_FIRST(&disklist); dk;
		    dk = TAILQ_NEXT(dk, dk_link))
d435 1
@


1.15
log
@only actually change the drive LED state if there was a real state change;
tested by robert and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.14 2007/03/26 20:18:09 deraadt Exp $	*/
d43 2
d70 1
d118 2
a119 1
	timeout_set(&scoop_checkdisk, scoop_timeout, sc);
d122 5
d144 1
d146 1
d150 1
d373 2
d407 2
d426 1
d438 3
a440 1
	if (dk) {
d449 28
@


1.14
log
@software-driven drive light code, using a timeout.  uwe wrote some code
initially that used a disk_busy() hook, but this uses a lot less cpu and
is MD; ok uwe
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.13 2007/03/18 20:50:23 uwe Exp $	*/
d411 1
d421 8
a428 2
	if (dk)
		scoop_led_set(SCOOP_LED_GREEN, dk->dk_busy ? 1 : 0);
@


1.13
log
@Add an interface to scoop(4) to control CF and SD card power
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.12 2005/11/17 05:26:31 uwe Exp $	*/
d20 2
d24 2
d66 3
d115 2
d404 19
@


1.12
log
@Sharp CE-RH2 remote control driver
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.11 2005/07/01 23:51:55 uwe Exp $	*/
d52 5
d60 1
a60 1

d227 48
@


1.11
log
@Move all zaurus specific code from pxa2x0_pcic.c into scoop_pcic.c
without affecting the way the driver works.
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.10 2005/05/23 22:44:57 pascoe Exp $	*/
d95 8
d223 14
@


1.10
log
@Headphone output and volume control support.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.9 2005/05/09 15:16:36 uwe Exp $	*/
d28 3
d44 1
a44 1
struct cfattach scoop_pxaip_ca = {
d63 1
a63 2
	 * Only the C3000 models (pxa270) are known to have two SCOOPs,
	 * on other models we only find the first one.
d65 1
a65 1
        if ((cputype & ~CPU_ID_XSCALE_COREREV_MASK) == CPU_ID_PXA27X)
d84 1
a84 1
		addr = SCOOP0_BASE;
d86 1
a86 1
		addr = SCOOP1_BASE;
d95 1
a95 1
	printf(": Onboard Peripheral Controller\n");
@


1.9
log
@Added comments, and a new function to control the infrared LED.
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.8 2005/04/15 01:05:51 pascoe Exp $	*/
d189 1
a189 2
 * Mute or unmute audio signals going to the internal speaker (and
 * the headphone jack as well?)
d192 1
a192 1
scoop_audio_set(int on)
d197 5
a202 4
		scoop_gpio_pin_ctl(scoop_cd.cd_devs[0], SCOOP0_MUTE_L,
		    GPIO_PIN_OUTPUT);
		scoop_gpio_pin_ctl(scoop_cd.cd_devs[0], SCOOP0_MUTE_R,
		    GPIO_PIN_OUTPUT);
d204 1
a204 1
		    GPIO_PIN_LOW);
d206 1
a206 1
		    GPIO_PIN_LOW);
d209 1
a209 1
		    GPIO_PIN_HIGH);
d211 1
a211 1
		    GPIO_PIN_HIGH);
@


1.8
log
@Add basic audio playback support for the Zaurus SL-C3000.

ok dlg@@ drahn@@ uwe@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.7 2005/03/08 23:29:06 uwe Exp $	*/
d135 3
d157 17
d188 4
@


1.7
log
@Oops.  Put scoop GPIO pins into correct state on suspend, and remove an
unnecessary function while there.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.6 2005/02/22 21:53:03 uwe Exp $	*/
d165 23
@


1.6
log
@Initial suspend/resume code with additional powerhooks.  Enter/exit
suspend mode with power button or zzz.  May not work for everyone yet.
ok drahn@@ and deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.5 2005/01/31 02:22:17 uwe Exp $	*/
d35 1
a35 1
	u_int16_t sc_gpwr;
a167 22
int	scoop_leds(void);
int
scoop_leds(void)
{
	int leds = 0;

	if (scoop_cd.cd_ndevs > 0 && scoop_cd.cd_devs[0] != NULL) {

		if (scoop_gpio_pin_read(scoop_cd.cd_devs[0],
		    SCOOP0_LED_GREEN))
			leds |= SCOOP_LED_GREEN;

		/* XXX */
		if (scoop_cd.cd_ndevs > 1 &&
		    scoop_gpio_pin_read(scoop_cd.cd_devs[0],
		    SCOOP0_LED_ORANGE_C3000))
			leds |= SCOOP_LED_ORANGE;
	}

	return leds;
}

a221 4
void	scoop_suspend(void);
void	scoop_resume(void);
int	led_state;

a227 3
	led_state = scoop_leds();
	scoop_led_set(SCOOP_LED_GREEN | SCOOP_LED_ORANGE, 0);

d234 3
a236 2
		    sc->sc_gpwr & ~(SCOOP0_MUTE_L | SCOOP0_MUTE_R |
		    SCOOP0_JK_A_C3000 | SCOOP0_ADC_TEMP_ON_C3000));
d245 4
a248 3
		    sc->sc_gpwr & ~(SCOOP1_RESERVED_4 | SCOOP1_RESERVED_5 |
		    SCOOP1_RESERVED_6 | SCOOP1_BACKLIGHT_CONT |
		    SCOOP1_BACKLIGHT_ON | SCOOP1_MIC_BIAS));
d251 1
a251 1
		    rv | (SCOOP1_IR_ON | SCOOP1_RESERVED_3));
a270 2

	scoop_led_set(led_state, 1);
@


1.5
log
@Make LCD brightness adjustable by wsconsctl(1), and fix the base address
of scoop1 to make it work.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.4 2005/01/26 06:34:54 uwe Exp $	*/
d35 1
d159 1
a159 2
		switch(led) {
		case SCOOP_LED_GREEN:
d162 1
a162 2
			break;
		case SCOOP_LED_ORANGE:
a164 2
			break;
		}
d168 22
d218 82
@


1.4
log
@New device for the dedicated SSP unit, automatic battery charging, and
reporting the remaining battery life to apmd(8).
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.3 2005/01/20 23:34:37 uwe Exp $	*/
d22 1
d50 1
d98 2
a99 2
	unsigned short rv;
	unsigned short bit = (1 << pin);
d106 1
a106 1
scoop_gpio_pin_write(struct scoop_softc *sc, int pin, int value)
d108 2
a109 2
	unsigned short rv;
	unsigned short bit = (1 << pin);
d113 1
a113 1
	    value != 0 ? (rv | bit) : (rv & ~bit));
d117 1
a117 1
scoop_backlight_set(int on)
d119 2
d122 20
a141 2
#if 0	/* XXX no effect. maybe the pin is incorrectly configured? */
	if (scoop_cd.cd_ndevs > 1 && scoop_cd.cd_devs[1] != NULL)
d144 6
d161 1
a161 1
			    SCOOP0_LED_GREEN_C3000, on);
@


1.3
log
@Enable apm/scoop drivers and report A/C power status correctly.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.2 2005/01/19 15:56:44 uwe Exp $	*/
d133 1
a133 1
			    C3000_SCOOP0_LED_GREEN, on);
d137 1
a137 1
			    C3000_SCOOP0_LED_ORANGE, on);
d141 30
@


1.2
log
@Cleanups, missing licenses and RCS tags.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_scoop.c,v 1.1 2005/01/19 02:02:34 uwe Exp $	*/
a46 3
/* GPIO pin/bit numbers for the Zaurus C3000. */
#define SCOOP1_BACKLIGHT_ON     8

a53 1
	struct pxaip_attach_args *pxa = aux;
a55 3
	if (pxa->pxa_addr == -1)
		return 0;

d71 1
d75 8
d85 1
a85 2
	if (bus_space_map(sc->sc_iot, pxa->pxa_addr, size, 0,
	    &sc->sc_ioh) != 0) {
d115 1
a115 1
scoop_backlight_on(int enable)
d121 1
a121 1
		    SCOOP1_BACKLIGHT_ON, enable);
d123 18
@


1.1
log
@APM emulation framework and zaurus scoop driver.  Not enabled yet.
ok drahn@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 6
d50 2
a51 3
struct scoop_softc *scoop0_sc;
struct scoop_softc *scoop1_sc;
int nscoopunits = 0;
d55 1
a55 1
scoopmatch(struct device *parent, void *cf, void *aux)
d58 1
d68 1
a68 1
	    	return (nscoopunits < 2);
d70 1
a70 1
	return (nscoopunits < 1);
a79 2
	nscoopunits++;

d85 1
a85 1
		printf(": failed to map SCOOP%d\n", nscoopunits - 1);
a89 5

	if (nscoopunits == 1)
		scoop0_sc = sc;
	else if (nscoopunits == 2)
		scoop1_sc = sc;
d118 3
a120 3
	if (scoop1_sc != (struct scoop_softc *)0)
		scoop_gpio_pin_write(scoop1_sc, SCOOP1_BACKLIGHT_ON,
		    enable);
@

