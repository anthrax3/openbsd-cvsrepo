head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.24
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.20
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.22
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.14
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.18
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.16
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2016.09.03.13.37.43;	author guenther;	state dead;
branches;
next	1.8;
commitid	6T3r4QcMFKe3Fo5T;

1.8
date	2010.09.07.16.21.41;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.30.21.35.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.08.21.58.49;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.22.21.53.03;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.31.03.02.16;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.31.02.22.17;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.28.17.14.31;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.26.06.34.54;	author uwe;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: zaurus_ssp.c,v 1.8 2010/09/07 16:21:41 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Uwe Stuehler <uwe@@bsdx.de>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <arm/xscale/pxa2x0reg.h>
#include <arm/xscale/pxa2x0var.h>
#include <arm/xscale/pxa2x0_gpio.h>

#include <zaurus/dev/zaurus_sspvar.h>

#define GPIO_ADS7846_CS_C3000	14	/* SSP SFRM */
#define GPIO_MAX1111_CS_C3000	20
#define GPIO_TG_CS_C3000	53

#define SSCR0_ADS7846_C3000	0x06ab
#define	SSCR0_LZ9JG18		0x01ab
#define SSCR0_MAX1111		0x0387

struct zssp_softc {
	struct device sc_dev;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
};

int	zssp_match(struct device *, void *, void *);
void	zssp_attach(struct device *, struct device *, void *);
void	zssp_init(void);
int	zssp_activate(struct device *, int);

int	zssp_read_max1111(u_int32_t);
u_int32_t zssp_read_ads7846(u_int32_t);
void	zssp_write_lz9jg18(u_int32_t);

struct cfattach zssp_ca = {
	sizeof (struct zssp_softc), zssp_match, zssp_attach, NULL,
	zssp_activate
};

struct cfdriver zssp_cd = {
	NULL, "zssp", DV_DULL
};

int
zssp_match(struct device *parent, void *match, void *aux)
{
	return 1;
}

void
zssp_attach(struct device *parent, struct device *self, void *aux)
{
	struct zssp_softc *sc = (struct zssp_softc *)self;

	sc->sc_iot = &pxa2x0_bs_tag;
	if (bus_space_map(sc->sc_iot, PXA2X0_SSP1_BASE, PXA2X0_SSP_SIZE,
	    0, &sc->sc_ioh)) {
		printf(": can't map bus space\n");
		return;
	}

	printf("\n");

	zssp_init();
}

/*
 * Initialize the dedicated SSP unit and disable all chip selects.
 * This function is called with interrupts disabled.
 */
void
zssp_init(void)
{
	struct zssp_softc *sc;

	KASSERT(zssp_cd.cd_ndevs > 0 && zssp_cd.cd_devs[0] != NULL);
	sc = (struct zssp_softc *)zssp_cd.cd_devs[0];

	pxa2x0_clkman_config(CKEN_SSP, 1);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, SSCR0_LZ9JG18);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR1, 0);

	pxa2x0_gpio_set_function(GPIO_ADS7846_CS_C3000, GPIO_OUT|GPIO_SET);
	pxa2x0_gpio_set_function(GPIO_MAX1111_CS_C3000, GPIO_OUT|GPIO_SET);
	pxa2x0_gpio_set_function(GPIO_TG_CS_C3000, GPIO_OUT|GPIO_SET);
}

int
zssp_activate(struct device *self, int act)
{
	switch (act) {
	case DVACT_SUSPEND:
		break;
	case DVACT_RESUME:
		zssp_init();
		break;
	}
	return 0;
}

/*
 * Transmit a single data word to one of the ICs, keep the chip selected
 * afterwards, and don't wait for data to be returned in SSDR.  Interrupts
 * must be held off until zssp_ic_stop() gets called.
 */
void
zssp_ic_start(int ic, u_int32_t data)
{
	struct zssp_softc *sc;

	KASSERT(zssp_cd.cd_ndevs > 0 && zssp_cd.cd_devs[0] != NULL);
	sc = (struct zssp_softc *)zssp_cd.cd_devs[0];

	/* disable other ICs */
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, 0);
	if (ic != ZSSP_IC_ADS7846)
		pxa2x0_gpio_set_bit(GPIO_ADS7846_CS_C3000);
	if (ic != ZSSP_IC_LZ9JG18)
		pxa2x0_gpio_set_bit(GPIO_TG_CS_C3000);
	if (ic != ZSSP_IC_MAX1111)
		pxa2x0_gpio_set_bit(GPIO_MAX1111_CS_C3000);

	/* activate the chosen one */
	switch (ic) {
	case ZSSP_IC_ADS7846:
		bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0,
		    SSCR0_ADS7846_C3000);
		pxa2x0_gpio_clear_bit(GPIO_ADS7846_CS_C3000);
		bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR, data);
		while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
		    & SSSR_TNF) != SSSR_TNF)
			/* poll */;
		break;
	case ZSSP_IC_LZ9JG18:
		pxa2x0_gpio_clear_bit(GPIO_TG_CS_C3000);
		break;
	case ZSSP_IC_MAX1111:
		pxa2x0_gpio_clear_bit(GPIO_MAX1111_CS_C3000);
		break;
	}
}

/*
 * Read the last value from SSDR and deactivate all chip-selects.
 */
u_int32_t
zssp_ic_stop(int ic)
{
	struct zssp_softc *sc;
	u_int32_t rv;

	KASSERT(zssp_cd.cd_ndevs > 0 && zssp_cd.cd_devs[0] != NULL);
	sc = (struct zssp_softc *)zssp_cd.cd_devs[0];

	switch (ic) {
	case ZSSP_IC_ADS7846:
		/* read result of last command */
		while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
		    & SSSR_RNE) != SSSR_RNE)
			/* poll */;
		rv = bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR);
		break;
	case ZSSP_IC_LZ9JG18:
	case ZSSP_IC_MAX1111:
		/* last value received is irrelevant or undefined */
	default:
		rv = 0;
		break;
	}

	pxa2x0_gpio_set_bit(GPIO_ADS7846_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_TG_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_MAX1111_CS_C3000);

	return (rv);
}

/*
 * Activate one of the chip-select lines, transmit one word value in
 * each direction, and deactivate the chip-select again.
 */
u_int32_t
zssp_ic_send(int ic, u_int32_t data)
{

	switch (ic) {
	case ZSSP_IC_MAX1111:
		return (zssp_read_max1111(data));
	case ZSSP_IC_ADS7846:
		return (zssp_read_ads7846(data));
	case ZSSP_IC_LZ9JG18:
		zssp_write_lz9jg18(data);
		return 0;
	default:
		printf("zssp_ic_send: invalid IC %d\n", ic);
		return 0;
	}
}

int
zssp_read_max1111(u_int32_t cmd)
{
	struct zssp_softc *sc;
	int	voltage[2];
	int	i;
	int	s;

	KASSERT(zssp_cd.cd_ndevs > 0 && zssp_cd.cd_devs[0] != NULL);
	sc = (struct zssp_softc *)zssp_cd.cd_devs[0];

	s = splhigh();

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, 0);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, SSCR0_MAX1111);

	pxa2x0_gpio_set_bit(GPIO_TG_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_ADS7846_CS_C3000);
	pxa2x0_gpio_clear_bit(GPIO_MAX1111_CS_C3000);

	delay(1);

	/* Send the command word and read a dummy word back. */
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR, cmd);
	while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
	    & SSSR_TNF) != SSSR_TNF)
		/* poll */;
	/* XXX is this delay necessary? */
	delay(1);
	while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
	    & SSSR_RNE) != SSSR_RNE)
		/* poll */;
	i = bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR);

	for (i = 0; i < 2; i++) {
		bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR, 0);
		while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
		    & SSSR_TNF) != SSSR_TNF)
			/* poll */;
		/* XXX again, is this delay necessary? */
		delay(1);
		while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
		    & SSSR_RNE) != SSSR_RNE)
			/* poll */;
		voltage[i] = bus_space_read_4(sc->sc_iot, sc->sc_ioh,
		    SSP_SSDR);         
	}

	pxa2x0_gpio_set_bit(GPIO_TG_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_ADS7846_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_MAX1111_CS_C3000);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, 0);

	/* XXX no idea what this means, but it's what Linux would do. */
	if ((voltage[0] & 0xc0) != 0 || (voltage[1] & 0x3f) != 0)
		voltage[0] = -1;
	else
		voltage[0] = ((voltage[0] << 2) & 0xfc) |
		    ((voltage[1] >> 6) & 0x03);

	splx(s);
	return voltage[0];
}

/* XXX - only does CS_ADS7846 */
u_int32_t
zssp_read_ads7846(u_int32_t cmd)
{
	struct zssp_softc *sc;

	sc = (struct zssp_softc *)zssp_cd.cd_devs[0];
	unsigned int cr0;
	int s;
	u_int32_t val;

	if (zssp_cd.cd_ndevs < 1 || zssp_cd.cd_devs[0] == NULL) {
		printf("zssp_read_ads7846: not configured\n");
		return 0;
	}
	sc = (struct zssp_softc *)zssp_cd.cd_devs[0];

	s = splhigh();
	if (1) {
		cr0 =  SSCR0_ADS7846_C3000;
	} else {
		cr0 =  0x00ab;
	}
        bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, 0);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSCR0, cr0);

	pxa2x0_gpio_set_bit(GPIO_TG_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_MAX1111_CS_C3000);
	pxa2x0_gpio_clear_bit(GPIO_ADS7846_CS_C3000);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR, cmd);

	while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
	    & SSSR_TNF) != SSSR_TNF)
		/* poll */;

	delay(1);

	while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSSR)
	    & SSSR_RNE) != SSSR_RNE)
		/* poll */;

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, SSP_SSDR);

	pxa2x0_gpio_set_bit(GPIO_ADS7846_CS_C3000); /* deselect */

	splx(s);

	return val;
}

void
zssp_write_lz9jg18(u_int32_t data)
{
	int s;
	int sclk_pin, sclk_fn;
	int sfrm_pin, sfrm_fn;
	int txd_pin, txd_fn;
	int rxd_pin, rxd_fn;
	int i;

	/* XXX this creates a DAC command from a backlight duty value. */
	data = 0x40 | (data & 0x1f);

	if ((cputype & ~CPU_ID_XSCALE_COREREV_MASK) == CPU_ID_PXA27X) {
		/* C3000 */
		sclk_pin = 19;
		sfrm_pin = 14;
		txd_pin = 87;
		rxd_pin = 86;
	} else {
		sclk_pin = 23;
		sfrm_pin = 24;
		txd_pin = 25;
		rxd_pin = 26;
	}

	s = splhigh();

	sclk_fn = pxa2x0_gpio_get_function(sclk_pin);
	sfrm_fn = pxa2x0_gpio_get_function(sfrm_pin);
	txd_fn = pxa2x0_gpio_get_function(txd_pin);
	rxd_fn = pxa2x0_gpio_get_function(rxd_pin);

	pxa2x0_gpio_set_function(sfrm_pin, GPIO_OUT | GPIO_SET);
	pxa2x0_gpio_set_function(sclk_pin, GPIO_OUT | GPIO_CLR);
	pxa2x0_gpio_set_function(txd_pin, GPIO_OUT | GPIO_CLR);
	pxa2x0_gpio_set_function(rxd_pin, GPIO_IN);

	pxa2x0_gpio_set_bit(GPIO_MAX1111_CS_C3000);
	pxa2x0_gpio_set_bit(GPIO_ADS7846_CS_C3000);
	pxa2x0_gpio_clear_bit(GPIO_TG_CS_C3000);

	delay(10);
	
	for (i = 0; i < 8; i++) {
		if (data & 0x80)
			pxa2x0_gpio_set_bit(txd_pin);
		else
			pxa2x0_gpio_clear_bit(txd_pin);
		delay(10);
		pxa2x0_gpio_set_bit(sclk_pin);
		delay(10);
		pxa2x0_gpio_clear_bit(sclk_pin);
		delay(10);
		data <<= 1;
	}

	pxa2x0_gpio_clear_bit(txd_pin);
	pxa2x0_gpio_set_bit(GPIO_TG_CS_C3000);

	pxa2x0_gpio_set_function(sclk_pin, sclk_fn);
	pxa2x0_gpio_set_function(sfrm_pin, sfrm_fn);
	pxa2x0_gpio_set_function(txd_pin, txd_fn);
	pxa2x0_gpio_set_function(rxd_pin, rxd_fn);

	splx(s);
}
@


1.8
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.7 2010/08/30 21:35:57 deraadt Exp $	*/
@


1.7
log
@Convert all powerhooks to activate functions, and provide powerhook stubs.
Of note:  lcd stubs get pulled up to the parent; zts has to keep track of
whether it is in use or not
testing by myself and jakemsr; proof reading by oga
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.6 2005/04/08 21:58:49 uwe Exp $	*/
a48 1
void	zssp_powerhook(int, void *);
a82 4
	if (powerhook_establish(zssp_powerhook, sc) == NULL)
		printf("%s: can't establish power hook\n",
		    sc->sc_dev.dv_xname);

a118 6
}

void
zssp_powerhook(int why, void *arg)
{
	zssp_activate(arg, why);
@


1.6
log
@new functions for a unified interface to all chips.
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.5 2005/02/22 21:53:03 uwe Exp $	*/
d48 1
d56 2
a57 1
	sizeof (struct zssp_softc), zssp_match, zssp_attach
d113 13
d129 1
a129 7
	int s;

	if (why == PWR_RESUME) {
		s = splhigh();
		zssp_init();
		splx(s);
	}
@


1.5
log
@Initial suspend/resume code with additional powerhooks.  Enter/exit
suspend mode with power button or zzz.  May not work for everyone yet.
ok drahn@@ and deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.4 2005/01/31 03:02:16 uwe Exp $	*/
d31 2
a33 2
#define GPIO_MAX1111_CS_C3000	20
#define GPIO_ADS7846_CS_C3000	14	/* SSP SFRM */
d35 1
d50 4
d76 1
a76 1
		printf("can't map bus space\n");
d82 4
a86 2

	(void)powerhook_establish(zssp_powerhook, sc);
d96 1
a96 1
	struct	zssp_softc *sc;
d98 1
a98 4
	if (zssp_cd.cd_ndevs < 1 || zssp_cd.cd_devs[0] == NULL) {
		printf("zssp_read_max1111: not configured\n");
		return;
	}
d106 2
d109 111
a219 2
	pxa2x0_gpio_set_function(GPIO_MAX1111_CS_C3000, GPIO_OUT|GPIO_SET);
	pxa2x0_gpio_set_function(GPIO_ADS7846_CS_C3000, GPIO_OUT|GPIO_SET);
d225 1
a225 1
	struct	zssp_softc *sc;
d230 1
a230 4
	if (zssp_cd.cd_ndevs < 1 || zssp_cd.cd_devs[0] == NULL) {
		printf("zssp_read_max1111: not configured\n");
		return 0;
	}
a287 1
u_int32_t pxa2x0_ssp_read_val(u_int32_t cmd);
d289 1
a289 1
pxa2x0_ssp_read_val(u_int32_t cmd)
d291 2
a292 1
	struct	zssp_softc *sc;
d299 1
a299 1
		printf("pxa2x0_ssp_read_val: not configured\n");
d305 2
a306 2
	if (1 /* C3000 */) {
		cr0 =  0x06ab;
a403 12
}

void
zssp_powerhook(int why, void *arg)
{
	int s;

	if (why == PWR_RESUME) {
		s = splhigh();
		zssp_init();
		splx(s);
	}
@


1.4
log
@Use pxa2x0_gpio_get_function() to restore alternate pin functions
correctly after writes to the backlight DAC.
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.3 2005/01/31 02:22:17 uwe Exp $	*/
d46 2
d70 26
a95 2
	    0, &sc->sc_ioh))
		panic("can't map %s", sc->sc_dev.dv_xname);
a104 2

	printf("\n");
d113 1
a113 1
	int s;
d292 12
@


1.3
log
@Make LCD brightness adjustable by wsconsctl(1), and fix the base address
of scoop1 to make it work.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.2 2005/01/28 17:14:31 drahn Exp $	*/
d206 4
a210 4
	int ssp_sclk;
	int ssp_sfrm;
	int ssp_txd;
	int ssp_rxd;
d217 4
a220 4
		ssp_sclk = 19;
		ssp_sfrm = 14;
		ssp_txd = 87;
		ssp_rxd = 86;
d222 4
a225 4
		ssp_sclk = 23;
		ssp_sfrm = 24;
		ssp_txd = 25;
		ssp_rxd = 26;
d230 9
a238 4
	pxa2x0_gpio_set_function(ssp_sfrm, GPIO_OUT | GPIO_SET);
	pxa2x0_gpio_set_function(ssp_sclk, GPIO_OUT | GPIO_CLR);
	pxa2x0_gpio_set_function(ssp_txd, GPIO_OUT | GPIO_CLR);
	pxa2x0_gpio_set_function(ssp_rxd, GPIO_IN);
d248 1
a248 1
			pxa2x0_gpio_set_bit(ssp_txd);
d250 1
a250 1
			pxa2x0_gpio_clear_bit(ssp_txd);
d252 1
a252 1
		pxa2x0_gpio_set_bit(ssp_sclk);
d254 1
a254 1
		pxa2x0_gpio_clear_bit(ssp_sclk);
d259 1
a259 1
	pxa2x0_gpio_clear_bit(ssp_txd);
d262 4
a265 8
	/* XXX SFRM and RXD alternate functions are not restored here. */
	if ((cputype & ~CPU_ID_XSCALE_COREREV_MASK) == CPU_ID_PXA27X) {
		pxa2x0_gpio_set_function(ssp_sclk, GPIO_ALT_FN_1_OUT);
		pxa2x0_gpio_set_function(ssp_txd, GPIO_ALT_FN_1_OUT);
	} else {
		pxa2x0_gpio_set_function(ssp_sclk, GPIO_ALT_FN_2_OUT);
		pxa2x0_gpio_set_function(ssp_txd, GPIO_ALT_FN_2_OUT);
	}
@


1.2
log
@Add zts, touch screen driver for zaurus.
Currently in it's early stage,  instead of an absolute pointing device,
it currently does relative, and only in polled mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: zaurus_ssp.c,v 1.1 2005/01/26 06:34:54 uwe Exp $	*/
d163 1
a163 1
		printf("zssp_read_max1111: not configured\n");
d200 67
@


1.1
log
@New device for the dedicated SSP unit, automatic battery charging, and
reporting the remaining battery life to apmd(8).
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d89 1
d97 2
d147 1
d149 51
@

