head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.16
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.18
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.10
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.14
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.12
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.09.03.13.37.44;	author guenther;	state dead;
branches;
next	1.16;
commitid	6T3r4QcMFKe3Fo5T;

1.16
date	2016.06.08.17.24.44;	author tedu;	state Exp;
branches;
next	1.15;
commitid	oK6mhkiIMNMJ6OsK;

1.15
date	2011.09.20.22.02.13;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.11.28.20.44.20;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.21.04.35.54;	author todd;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.01.19.25.10;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.19.15.49.06;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.15.01.56.47;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.04.19.30.55;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.04.03.44.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.26.20.18.10;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.22.40.18;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.27.18.31.11;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.02.42.25;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.12.00.00.14;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.21.00.15.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.31.00.04.35;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: autoconf.c,v 1.16 2016/06/08 17:24:44 tedu Exp $	*/
/*	$NetBSD: autoconf.c,v 1.2 2001/09/05 16:17:36 matt Exp $	*/

/*
 * Copyright (c) 1994-1998 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mark Brinicombe for
 *      the NetBSD project.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * autoconf.c
 *
 * Autoconfiguration functions
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/reboot.h>
#include <sys/disklabel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/kernel.h>
#include <sys/timeout.h>
#include <sys/malloc.h>

#include <uvm/uvm_extern.h>

#include <machine/bootconfig.h>
#include <machine/intr.h>
#include <dev/cons.h>

struct device *bootdv = NULL;

void dumpconf(void);

/*
 * Now that we are fully operational, we can checksum the
 * disks, and using some heuristics, hopefully are able to
 * always determine the correct root disk.
 */
void
diskconf()
{
	extern struct timeout	scoop_checkdisk;
	dev_t tmpdev;

#if 0
	/*
	 * Configure root, swap, and dump area.  This is
	 * currently done by running the same checksum
	 * algorithm over all known disks, as was done in
	 * /boot.  Then we basically fixup the *dev vars
	 * from the info we gleaned from this.
	 */
	dkcsumattach();
#endif

	/*
	 * XXX
	 * zaurus bootblocks currently pass in "bsd" instead of
	 * "device:bsd", or any such thing, making this a real pain.
	 */
	if (bootdv == NULL)
		bootdv = parsedisk("wd0a", strlen("wd0a"), 0, &tmpdev);
	if (bootdv == NULL)
		printf("boot device: lookup '%s' failed.\n", boot_file);
	else
		printf("boot device: %s\n", bootdv->dv_xname);

	setroot(bootdv, 0, RB_USERREQ);
	dumpconf();

	timeout_add(&scoop_checkdisk, hz/25);
}

void
device_register(struct device *dev, void *aux)
{
}

/*
 * void cpu_configure()
 *
 * Configure all the root devices
 * The root devices are expected to configure their own children
 */
void
cpu_configure(void)
{
	softintr_init();

	/*
	 * Since various PCI interrupts could be routed via the ICU
	 * (for PCI devices in the bridge) we need to set up the ICU
	 * now so that these interrupts can be established correctly
	 * i.e. This is a hack.
	 */

	config_rootfound("mainbus", NULL);

	/*
	 * We can not know which is our root disk, defer
	 * until we can checksum blocks to figure it out.
	 */
	cold = 0;

	/* Time to start taking interrupts so lets open the flood gates .... */
	(void)spl0();

}

struct nam2blk nam2blk[] = {
	{ "wd",		16 },
	{ "sd",		24 },
	{ "cd",		26 },
	{ "rd",		18 },
	{ "vnd",	19 },
	{ NULL,		-1 }
};
@


1.16
log
@remove obsolete raid from namtoblk tables. from Artturi Alm
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.15 2011/09/20 22:02:13 miod Exp $	*/
@


1.15
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.14 2010/11/28 20:44:20 miod Exp $	*/
a144 1
	{ "raid",	71 },
@


1.14
log
@Get rid of machdep.debug, machdep.booted_device and machdep.booted_kernel
sysctl. Only the first one is really implemented, and it only matters on
older processor flavours we don't run on (and don't want to), so this was
just dead weight.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.13 2008/07/21 04:35:54 todd Exp $	*/
a60 1
extern char *boot_file;
@


1.13
log
@nam2blk[] needs a "vnd" entry for some things (like softraid)
ok marco@@ no objection miod@@ need this for regress djm@@ no objection krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.12 2007/06/01 19:25:10 deraadt Exp $	*/
a59 1
int booted_partition;
@


1.12
log
@some architectures called setroot() from cpu_configure(), *way* before some
subsystems were enabled.  others used a *md_diskconf -> diskconf() method to
make sure init_main could "do late setroot".  Change all architectures to
have diskconf(), use it directly & late.  tested by todd and myself on most
architectures, ok miod too
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.12 2007/06/01 19:20:47 deraadt Exp $	*/
d148 1
@


1.11
log
@Kernel crash dump support for arm-based platform, with minimal support in
libkvm, but all the necessary information for a complete _kvm_kvatop() is
available in the crash dump.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.10 2007/05/15 01:56:47 deraadt Exp $	*/
a63 1
void diskconf(void);
a134 1
	md_diskconf = diskconf;
@


1.10
log
@kill __HAVE_DEVICE_REGISTER by requiring all architectures to have a
device_register() function -- even if it does nothing.  reduces the
cpp-based blather different between architectures
idea ok'd by miod; tested on all architectures (except a few miod will
need to cleanup because he has them)
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.9 2007/05/04 19:30:55 deraadt Exp $	*/
d65 1
a101 1
#if 0
a102 1
#endif
@


1.9
log
@make findblkmajor() and findblkname() MI; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.8 2007/05/04 03:44:44 deraadt Exp $	*/
d108 4
@


1.8
log
@setroot() was a ugly mix of MI and MD code, with different bugs on different
machines.  Instead -- build one solid clean MI version, and thenchange all
the architectures to use it.  ok various people, tested on almost all cases.
(it is a 10094 line diff..)
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.7 2007/03/26 20:18:10 deraadt Exp $	*/
d141 1
a141 4
static struct {
	char	*name;
	int	maj;
} nam2blk[] = {
d146 2
a147 1
	{ "raid",	71 }
a148 23

int
findblkmajor(struct device *dv)
{
	char *name = dv->dv_xname;
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); i++)
		if (!strncmp(name, nam2blk[i].name, strlen(nam2blk[i].name)))
			return (nam2blk[i].maj);
	return (-1);
}

char *
findblkname(int maj)
{
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); i++)
		if (nam2blk[i].maj == maj)
			return (nam2blk[i].name);
	return (NULL);
}
@


1.7
log
@software-driven drive light code, using a timeout.  uwe wrote some code
initially that used a disk_busy() hook, but this uses a lot less cpu and
is MD; ok uwe
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.6 2006/05/25 22:40:18 miod Exp $	*/
d53 3
a57 1

a59 2

struct device *booted_device;
a60 1

d62 1
a63 4
int findblkmajor(struct device *dv);
char * findblkname(int maj);

void rootconf(void);
a65 103
static struct device * getdisk(char *str, int len, int defpart, dev_t *devp);
struct  device *parsedisk(char *, int, int, dev_t *);
extern char *boot_file;

struct  genericconf {
	char *gc_name;
	dev_t gc_major;
} genericconf[] = {
	{ "wd",  16 },
	{ "sd",  24 },
	{ "cd",  26 },
	{ "rd",  18 },
	{ "raid",  71 },
	{ 0 }
};

int
findblkmajor(dv)
	struct device *dv;
{
	char *name = dv->dv_xname;
	int i;

	for (i = 0; i < sizeof(genericconf)/sizeof(genericconf[0]); ++i)
		if (strncmp(name, genericconf[i].gc_name,
		    strlen(genericconf[i].gc_name)) == 0)
			return (genericconf[i].gc_major);
	return (-1);
}

char *
findblkname(maj)
	int maj;
{
	int i;

	for (i = 0; i < sizeof(genericconf)/sizeof(genericconf[0]); ++i)
		if (maj == genericconf[i].gc_major)
			return (genericconf[i].gc_name);
	return (NULL);
}

static struct device *
getdisk(char *str, int len, int defpart, dev_t *devp)
{
	struct device *dv;

	if ((dv = parsedisk(str, len, defpart, devp)) == NULL) {
		printf("use one of:");
		for (dv = alldevs.tqh_first; dv != NULL;
		    dv = dv->dv_list.tqe_next) {
			if (dv->dv_class == DV_DISK)
				printf(" %s[a-p]", dv->dv_xname);
#ifdef NFSCLIENT
			if (dv->dv_class == DV_IFNET)
				printf(" %s", dv->dv_xname);
#endif
		}
		printf("\n");
	}
	return (dv);
}

struct device *
parsedisk(char *str, int len, int defpart, dev_t *devp)
{
	struct device *dv;
	char *cp, c;
	int majdev, part;

	if (len == 0)
		return (NULL);
	cp = str + len - 1;
	c = *cp;
	if (c >= 'a' && (c - 'a') < MAXPARTITIONS) {
		part = c - 'a';
		*cp = '\0';
	} else
		part = defpart;

	for (dv = alldevs.tqh_first; dv != NULL; dv = dv->dv_list.tqe_next) {
		if (dv->dv_class == DV_DISK &&
		    strcmp(str, dv->dv_xname) == 0) {
			majdev = findblkmajor(dv);
			if (majdev < 0)
				panic("parsedisk");
			*devp = MAKEDISKDEV(majdev, dv->dv_unit, part);
			break;
		}
#ifdef NFSCLIENT
		if (dv->dv_class == DV_IFNET &&
		    strcmp(str, dv->dv_xname) == 0) {
			*devp = NODEV;
			break;
		}
#endif
	}

	*cp = c;
	return (dv);
}


d75 1
d77 1
a84 1
#if 0
d86 1
d88 13
a100 2
#endif
	rootconf();
d141 13
a153 7
/*
 * Attempt to find the device from which we were booted.
 * If we can do so, and not instructed not to do so,
 * change rootdev to correspond to the load device.
 */
void
rootconf()
d155 2
a156 7
	int  majdev, mindev, unit, part, len;
	dev_t temp;
	struct swdevt *swp;
	struct device *dv;
	dev_t nrootdev, nswapdev = NODEV;
	char buf[128];
	int s;
d158 5
a162 3
#if defined(NFSCLIENT)
	extern char *nfsbootdevname;
#endif
d164 4
a167 2
	if (boothowto & RB_DFLTROOT)
		return;		/* Boot compiled in */
d169 4
a172 188
	/*
	 * (raid) device auto-configuration could have returned
	 * the root device's id in rootdev.  Check this case.
	 */
	if (rootdev != NODEV) {
		majdev = major(rootdev);
		unit = DISKUNIT(rootdev);
		part = DISKPART(rootdev);

		len = snprintf(buf, sizeof buf, "%s%d", findblkname(majdev),
			unit);
		if (len == -1 || len >= sizeof(buf))
			panic("rootconf: device name too long");

		bootdv = getdisk(buf, len, part, &rootdev);
	}

	/* Lookup boot device from boot if not set by configuration */
	if (bootdv == NULL) {
		bootdv = parsedisk(boot_file, strlen(boot_file), 0, &temp);
	}
	if (bootdv == NULL) {
		printf("boot device: lookup '%s' failed.\n", boot_file);
		boothowto |= RB_ASKNAME; /* Don't Panic :-) */
		/* boothowto |= RB_SINGLE; */
	} else
		printf("boot device: %s.\n", bootdv->dv_xname);

	if (boothowto & RB_ASKNAME) {
		for (;;) {
			printf("root device ");
			if (bootdv != NULL)
				 printf("(default %s%c)",
					bootdv->dv_xname,
					bootdv->dv_class == DV_DISK
						? 'a' : ' ');
			printf(": ");
			s = splhigh();
			cnpollc(1);
			len = getsn(buf, sizeof(buf));

			cnpollc(0);
			splx(s);
			if (len == 0 && bootdv != NULL) {
				strlcpy(buf, bootdv->dv_xname, sizeof buf);
				len = strlen(buf);
			}
			if (len > 0 && buf[len - 1] == '*') {
				buf[--len] = '\0';
				dv = getdisk(buf, len, 1, &nrootdev);
				if (dv != NULL) {
					bootdv = dv;
					nswapdev = nrootdev;
					goto gotswap;
				}
			}
			dv = getdisk(buf, len, 0, &nrootdev);
			if (dv != NULL) {
				bootdv = dv;
				break;
			}
		}
		/*
		 * because swap must be on same device as root, for
		 * network devices this is easy.
		 */
		if (bootdv->dv_class == DV_IFNET)
			goto gotswap;

		for (;;) {
			printf("swap device ");
			if (bootdv != NULL)
				printf("(default %s%c)",
					bootdv->dv_xname,
					bootdv->dv_class == DV_DISK?'b':' ');
			printf(": ");
			s = splhigh();
			cnpollc(1);
			len = getsn(buf, sizeof(buf));
			cnpollc(0);
			splx(s);
			if (len == 0 && bootdv != NULL) {
				switch (bootdv->dv_class) {
				case DV_IFNET:
					nswapdev = NODEV;
					break;
				case DV_DISK:
					nswapdev = MAKEDISKDEV(major(nrootdev),
					    DISKUNIT(nrootdev), 1);
					break;
				case DV_TAPE:
				case DV_TTY:
				case DV_DULL:
				case DV_CPU:
					break;
				}
				break;
			}
			dv = getdisk(buf, len, 1, &nswapdev);
			if (dv) {
				if (dv->dv_class == DV_IFNET)
					nswapdev = NODEV;
				break;
			}
		}

gotswap:
		rootdev = nrootdev;
		dumpdev = nswapdev;
		swdevt[0].sw_dev = nswapdev;
		swdevt[1].sw_dev = NODEV;
	} else if (mountroot == NULL) {
		/*
		 * `swap generic': Use the device the ROM told us to use.
		 */
		if (bootdv == NULL)
			panic("boot device not known");

		majdev = findblkmajor(bootdv);

		if (majdev >= 0) {
			/*
			 * Root and Swap are on disk.
			 * Boot is always from partition 0.
			 */
			rootdev = MAKEDISKDEV(majdev, bootdv->dv_unit, 0);
			nswapdev = MAKEDISKDEV(majdev, bootdv->dv_unit, 1);
			dumpdev = nswapdev;
		} else {
			/*
			 *  Root and Swap are on net.
			 */
			nswapdev = dumpdev = NODEV;
		}
		swdevt[0].sw_dev = nswapdev;
		swdevt[1].sw_dev = NODEV;

	} else {

		/*
		 * `root DEV swap DEV': honour rootdev/swdevt.
		 * rootdev/swdevt/mountroot already properly set.
		 */
		return;
	}

	switch (bootdv->dv_class) {
#if defined(NFSCLIENT)
	case DV_IFNET:
		mountroot = nfs_mountroot;
		nfsbootdevname = bootdv->dv_xname;
		return;
#endif
	case DV_DISK:
		mountroot = dk_mountroot;
		majdev = major(rootdev);
		mindev = minor(rootdev);
		unit = DISKUNIT(rootdev);
		part = DISKPART(rootdev);
		printf("root on %s%c\n", bootdv->dv_xname, part + 'a');
		break;
	default:
		printf("can't figure root, hope your kernel is right\n");
		return;
	}

	/*
	 * XXX: What is this doing?
	 */
	temp = NODEV;
	for (swp = swdevt; swp->sw_dev != NODEV; swp++) {
		if (majdev == major(swp->sw_dev) &&
		    unit == DISKUNIT(swp->sw_dev)) {
			temp = swdevt[0].sw_dev;
			swdevt[0].sw_dev = swp->sw_dev;
			swp->sw_dev = temp;
			break;
		}
	}
	if (swp->sw_dev == NODEV)
		return;

	/*
	 * If dumpdev was the same as the old primary swap device, move
	 * it to the new primary swap device.
	 */
	if (temp == dumpdev)
		dumpdev = swdevt[0].sw_dev;
a173 1
/* End of autoconf.c */
@


1.6
log
@Remove unused struct cfdriver field from genericconf struct, as on cats.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 2005/12/27 18:31:11 miod Exp $	*/
d51 1
d181 2
d198 2
@


1.5
log
@Remove unused sw_nblks field of struct swdevt. Then, remove swapconf()
which duplicates work done by uvm_swap_init().
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.4 2005/11/25 02:42:25 brad Exp $	*/
a72 20
#include "wd.h"
#if NWD > 0  
extern  struct cfdriver wd_cd;
#endif
#include "sd.h"
#if NSD > 0
extern  struct cfdriver sd_cd;
#endif
#include "cd.h"
#if NCD > 0
extern  struct cfdriver cd_cd;
#endif
#if NRD > 0
extern  struct cfdriver rd_cd;
#endif
#include "raid.h"
#if NRAID > 0
extern  struct cfdriver raid_cd;
#endif

a73 1
	struct cfdriver *gc_driver;
d77 5
a81 15
#if NWD > 0
	{ &wd_cd,  "wd",  16 },
#endif
#if NSD > 0
	{ &sd_cd,  "sd",  24 },
#endif
#if NCD > 0
	{ &cd_cd,  "cd",  26 },
#endif
#if NRD > 0
	{ &rd_cd,  "rd",  18 },
#endif
#if NRAID > 0
	{ &raid_cd,  "raid",  71 },
#endif
@


1.4
log
@splimp -> splhigh in setroot()/rootconf().

ok miod@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.3 2005/11/12 00:00:14 deraadt Exp $	*/
a65 1
void swapconf(void);
a223 1
	swapconf();
a226 27

/*
 * Configure swap space and related parameters.
 */
void
swapconf()
{
	register struct swdevt *swp;
	register int nblks;

	for (swp = swdevt; swp->sw_dev != NODEV; swp++) {
		int maj = major(swp->sw_dev);

		if (maj > nblkdev)
			break;
		if (bdevsw[maj].d_psize) {
			nblks = (*bdevsw[maj].d_psize)(swp->sw_dev);
			if (nblks != -1 &&
			    (swp->sw_nblks == 0 || swp->sw_nblks > nblks))
				swp->sw_nblks = nblks;
			swp->sw_nblks = ctod(dtoc(swp->sw_nblks));
		}
	}
}

void    rootconf(void);
void    diskconf(void);
@


1.3
log
@do not print boot_file, noone cares
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.2 2005/04/21 00:15:43 deraadt Exp $	*/
d350 1
a350 1
			s = splimp();
d389 1
a389 1
			s = splimp();
@


1.2
log
@correct idiom for snprintf failure handling; ok beck
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.1 2004/12/31 00:04:35 drahn Exp $	*/
d310 1
a310 3
	printf("boot_file: '%s'\n", boot_file);

	if(boothowto & RB_DFLTROOT)
d331 1
a331 1
	if(bootdv == NULL) {
d334 1
a334 1
	if(bootdv == NULL) {
d424 1
a424 2
	}
	else if(mountroot == NULL) {
@


1.1
log
@Port of OpenBSD to the Zaurus, currently running on C860, soon C3000.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.3 2004/02/12 02:32:34 drahn Exp $	*/
d326 1
a326 1
		if (len >= sizeof(buf))
@

