head	1.19;
access;
symbols
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.9.0.20
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.18
	OPENBSD_5_0:1.9.0.16
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.19
date	2016.09.03.13.37.44;	author guenther;	state dead;
branches;
next	1.18;
commitid	6T3r4QcMFKe3Fo5T;

1.18
date	2016.07.30.03.25.49;	author guenther;	state Exp;
branches;
next	1.17;
commitid	HVbAtwruDlJazNH2;

1.17
date	2016.03.30.06.38.45;	author jmc;	state Exp;
branches;
next	1.16;
commitid	LN9ijdk9SEnzWAbM;

1.16
date	2014.07.20.19.33.54;	author tobias;	state Exp;
branches;
next	1.15;
commitid	3nI5A0z6WuBa0dGs;

1.15
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.14;
commitid	Cnjup0HpCIRrcQ6o;

1.14
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.13;
commitid	3HeD4LaLGiS22I3y;

1.13
date	2013.09.10.21.00.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.19.13.06.38;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2012.09.11.17.12.05;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.21.14.46.20;	author pascal;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.26.10.26.03;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.25.18.25.33;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.30.18.28.57;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.24.20.38.20;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.12.05.10.30;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.26.19.20.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.19.23.09.40;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.16.17.22.44;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.10.00.25.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@#	$OpenBSD: Makefile,v 1.18 2016/07/30 03:25:49 guenther Exp $

MAN=	boot.8
MANSUBDIR=zaurus

.if ${MACHINE} == "zaurus"
PROG=	zboot
LDFLAGS+=-nostdlib -Bstatic -nopie -znorelro
INSTALL_STRIP=

SRCS=	crt0.c

S=	${.CURDIR}/../../../..

CLEANFILES+= arm machine
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ X$(S) = X -o -h arm ] || ln -s $(S)/arch/arm/include arm)
	@@([ X$(S) = X -o -h machine ] || ln -s $(S)/arch/zaurus/include machine)
.endif

# stand/boot
SRCS+=	boot.c cmd.c vars.c bootarg.c conf.c

# libsa
SRCS+=	close.c closeall.c cons.c ctime.c disklabel.c dkcksum.c fstat.c \
	lseek.c memcmp.c memcpy.c memset.c open.c printf.c read.c \
	readdir.c snprintf.c stat.c strerror.c strtol.c ufs.c

.PATH:	${S}/lib/libkern/arch/arm ${S}/lib/libkern
SRCS+=	getchar.c putchar.c strcmp.c strlcpy.c strlen.c strncmp.c strncpy.c \
	write.c ashrdi3.c divsi3.S divdi3.c moddi3.c qdivrem.c

# local overrides and additions
SRCS+=	alloc.c devopen.c diskprobe.c exec.c exit.c loadfile.c \
	machdep.c termios.c unixcons.c unixdev.c unixsys.S

.PATH:	${S}/stand/boot
.PATH:	${S}/lib/libsa

${PROG}: ${OBJS} ${LIBSA}
	${LD} ${LDFLAGS} -o ${PROG} ${OBJS} ${LIBSA}

.else
NOPROG=
.endif

.include <bsd.prog.mk>

AFLAGS+=-D_LOCORE
CPPFLAGS+=-D_STANDALONE
CPPFLAGS+=-I${S}/stand/boot -I${S}/lib/libsa -I. -I${.CURDIR} -I${S}
CFLAGS+=-fno-stack-protector -fno-builtin -fpack-struct -fno-pie
AFLAGS+= -fno-pie
@


1.18
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2016/03/30 06:38:45 jmc Exp $
@


1.17
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2014/07/20 19:33:54 tobias Exp $
d8 1
a8 1
LDFLAGS+=-nostdlib -Bstatic -nopie
@


1.16
log
@Merge cmd.c from zboot into boot, dropping "clear" command while at it.

With input from deraadt@@

okay jasper@@, uebayashi@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2014/07/13 09:26:08 jasper Exp $
a4 1
MLINKS=	boot.8 boot.conf.5
@


1.15
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2014/07/12 21:54:58 jasper Exp $
d24 1
a24 1
SRCS+=	boot.c vars.c bootarg.c conf.c
d36 1
a36 1
SRCS+=	alloc.c cmd.c devopen.c diskprobe.c exec.c exit.c loadfile.c \
@


1.14
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2013/09/10 21:00:26 deraadt Exp $
d32 2
a33 2
SRCS+=	getchar.c strcmp.c strlcpy.c strlen.c strncmp.c strncpy.c write.c \
	ashrdi3.c divsi3.S divdi3.c moddi3.c qdivrem.c
@


1.13
log
@fix typos for additional functions
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2013/08/19 13:06:38 matthieu Exp $
d32 1
a32 1
SRCS+=	strcmp.c strlcpy.c strlen.c strncmp.c strncpy.c write.c \
@


1.12
log
@divdi3 moddi3 qdivrem are needed by 64 bit time_t
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2012/09/11 17:12:05 deraadt Exp $
d33 1
a33 1
	ashrdi3.c divsi3.S divdi3 moddi3 qdivrem
@


1.11
log
@Cope with PIE, if it is enabled.   Note that this has not been completely
tested, but it is time to get it in at least.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2012/08/21 14:46:20 pascal Exp $
d33 1
a33 1
	ashrdi3.c divsi3.S
@


1.10
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2007/11/26 10:26:03 deraadt Exp $
d9 1
a9 2
LDFLAGS+=-nostdlib -Bstatic
NOPIE=
d42 3
d54 2
a55 1
CFLAGS+=-fno-stack-protector -fno-builtin -fpack-struct
@


1.9
log
@few more dribbles of LIBKERN cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/11/25 18:25:33 deraadt Exp $
d10 1
@


1.8
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2006/10/30 18:28:57 jmc Exp $
d17 1
a17 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.7
log
@install boot.conf as a section 5 page, not section 8;

from mikolaj kucharski;
ok mk deraadt krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2005/05/24 20:38:20 uwe Exp $
d31 1
a31 1
# libkern
a40 2
.PATH:	${S}/lib/libkern
.PATH:	${S}/lib/libkern/arch/arm
@


1.6
log
@bump to version 2.08, adding
- serial console support
- hard disk names hd0..hdN
earlier version tested by drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2005/05/12 05:10:30 uwe Exp $
d5 1
a5 1
MLINKS=	boot.8 boot.conf.8
@


1.5
log
@Minimal terminal line discipline support to stop the boot timeout
after the first keystroke, as on other platforms.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/04/26 19:20:21 deraadt Exp $
d36 2
a37 2
SRCS+=	alloc.c cmd.c devopen.c exec.c exit.c loadfile.c machdep.c \
	termios.c unixdev.c unixsys.S
@


1.4
log
@install in zaurus MANSUBDIR
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2005/04/19 23:09:40 uwe Exp $
d24 1
a24 1
SRCS+=	boot.c cmd.c vars.c bootarg.c conf.c
d35 3
a37 3
# local overrides for Linux/zaurus
SRCS+=	alloc.c devopen.c exec.c exit.c loadfile.c machdep.c \
	unixdev.c unixsys.S
@


1.3
log
@describe the zaurus boot(8) program; review/suggestions by jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d4 1
@


1.2
log
@let ld find it's _start() symbol.
@
text
@d1 4
a4 2
#MAN=	zboot.8
NOMAN=
@


1.1
log
@third generation boot blocks from the zaurus

  zaurus# stand/zboot/obj.i386.zaurus/zboot
  probing: ux0
  >> OpenBSD/zaurus BOOT 2.06
  boot> b
  b
  booting /dev/hda4:/bsd: [cross fingers here]

written by dragos at first, more work by drahn, and now increasingly
polished by uwe
@
text
@d9 1
a9 3
#LDFLAGS+=-Ttext $(LINKADDR) -N -x -noinhibit-exec
#CLEANFILES+=	crt0.o
#SRCS=	srt0.S
@

