head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.20
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.12
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.16
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.16
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.14
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2016.09.03.13.37.44;	author guenther;	state dead;
branches;
next	1.8;
commitid	6T3r4QcMFKe3Fo5T;

1.8
date	2015.09.18.13.40.45;	author miod;	state Exp;
branches;
next	1.7;
commitid	tjv2XqpU9w9cNg5o;

1.7
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.16.00.26.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.24.20.38.20;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.13.04.33.47;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.24.22.20.33;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.11.11.47.11;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.10.00.25.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: unixdev.c,v 1.8 2015/09/18 13:40:45 miod Exp $	*/

/*
 * Copyright (c) 1996-1998 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <sys/disklabel.h>
#include <sys/syscall.h>
#include <sys/time.h>
#define open uopen
#include <sys/fcntl.h>
#include <dev/cons.h>
#undef open
#include "disk.h"
#include "libsa.h"
#include "unixdev.h"

int
unixstrategy(void *devdata, int rw, daddr32_t blk, size_t size, void *buf,
    size_t *rsize)
{
	int	rc = 0;
	off_t	off;

#ifdef UNIX_DEBUG
	printf("unixstrategy: %s %d bytes @@ %d\n",
	    (rw==F_READ?"reading":"writing"), size, blk);
#endif

	off = (off_t)blk * DEV_BSIZE;
	if ((rc = ulseek((int)devdata, off, SEEK_SET)) >= 0)
		rc = (rw==F_READ) ? uread((int)devdata, buf, size) :
		    uwrite((int)devdata, buf, size);

	if (rc >= 0) {
		*rsize = (size_t)rc;
		rc = 0;
	} else
		rc = errno;

	return rc;
}

int
unixopen(struct open_file *f, ...)
{
	va_list	ap;
	char	path[PATH_MAX];
	char	*cp, **file;
	dev_t	maj, unit, part, bsd_dev;
	struct diskinfo *dip;

	va_start(ap, f);
	cp = *(file = va_arg(ap, char **));
	va_end(ap);

#ifdef UNIX_DEBUG
	if (debug)
		printf("unixopen: %s\n", cp);
#endif

	f->f_devdata = NULL;
	/* Search for device specification. */
	if (strlen(cp) < 4)
		return ENOENT;
	cp += 2;
	if (cp[2] != ':') {
		if (cp[3] != ':')
			return ENOENT;
		else
			cp++;
	}

	for (maj = 0;
	     maj < nbdevs && strncmp(*file, bdevs[maj], cp - *file) != 0;
	     maj++)
		;
	if (maj >= nbdevs) {
		printf("Unknown device: ");
		for (cp = *file; *cp != ':'; cp++)
			putchar(*cp);
		putchar('\n');
		return EADAPT;
	}

	/* Get unit. */
	if ('0' <= *cp && *cp <= '9')
		unit = *cp++ - '0';
	else {
		printf("Bad unit number\n");
		return EUNIT;
	}

	/* Get partition. */
	if ('a' <= *cp && *cp <= 'p')
		part = *cp++ - 'a';
	else {
		printf("Bad partition id\n");
		return EPART;
	}

	cp++;	/* skip ':' */
	if (*cp != 0)
		*file = cp;
	else
		f->f_flags |= F_RAW;

	/* Find device. */
	dip = dkdevice(maj, unit);
	if (dip == (struct diskinfo *)NULL)
		return ENOENT;

	/* Fix up bootdev. */
	bsd_dev = dip->bios_info.bsd_dev;
	dip->bsddev = MAKEBOOTDEV(B_TYPE(bsd_dev), B_ADAPTOR(bsd_dev),
	    B_CONTROLLER(bsd_dev), unit, part);
	dip->bootdev = MAKEBOOTDEV(B_TYPE(bsd_dev), B_ADAPTOR(bsd_dev),
	    B_CONTROLLER(bsd_dev), B_UNIT(bsd_dev), part);

	/* Try for disklabel again (might be removable media). */
	if (dip->bios_info.flags & BDI_BADLABEL) {
		const char *st = bios_getdisklabel(&dip->bios_info,
		    &dip->disklabel);
#ifdef UNIX_DEBUG
		if (debug && st)
			printf("%s\n", st);
#endif
		if (!st) {
			dip->bios_info.flags &= ~BDI_BADLABEL;
			dip->bios_info.flags |= BDI_GOODLABEL;
		} else
			return ERDLAB;
	}

	part = bios_getdospart(&dip->bios_info);
	bios_devpath(dip->bios_info.bios_number, part, path);
	f->f_devdata = (void *)uopen(path, O_RDONLY);
	if ((int)f->f_devdata == -1)
		return errno;

	return 0;
}

int
unixclose(struct open_file *f)
{
	return uclose((int)f->f_devdata);
}

int
unixioctl(struct open_file *f, u_long cmd, void *data)
{
	return uioctl((int)f->f_devdata, cmd, data);
}

off_t
ulseek(int fd, off_t off, int wh)
{
	extern	long ulseek32(int, long, int);
	off_t	r;

	/* XXX only SEEK_SET is used, so anything else can fail for now. */

	if (wh == SEEK_SET) {
		if (ulseek32(fd, 0, SEEK_SET) != 0)
			return -1;
		while (off > OFFT_OFFSET_MAX) {
			off -= OFFT_OFFSET_MAX;
			if (ulseek32(fd, OFFT_OFFSET_MAX, SEEK_CUR) < 0 &&
			    errno != LINUX_EOVERFLOW)
				return -1;
		}
		r = ulseek32(fd, (long)off, SEEK_CUR);
		if (r == -1 && errno == LINUX_EOVERFLOW)
			r = off;
	} else
		r = ulseek32(fd, (long)off, wh);

	return r;
}

time_t
getsecs(void)
{
	return (time_t)syscall(__NR_time, NULL);
}

unsigned int
sleep(unsigned int seconds)
{
	unsigned int start;

	start = getsecs();
	while (getsecs() - start < seconds)
		;

	return (0);
}
@


1.8
log
@Use the local unixdev.h file rather than the outdated libsa one.
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.7 2011/03/13 00:13:53 deraadt Exp $	*/
@


1.7
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.6 2007/06/16 00:26:33 deraadt Exp $	*/
d41 1
a41 1
#include <lib/libsa/unixdev.h>
@


1.6
log
@When EOVERFLOW was added, it broke the zaurus bootblocks
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.5 2005/05/24 20:38:20 uwe Exp $	*/
d44 1
a44 1
unixstrategy(void *devdata, int rw, daddr_t blk, size_t size, void *buf,
@


1.5
log
@bump to version 2.08, adding
- serial console support
- hard disk names hd0..hdN
earlier version tested by drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.4 2005/04/13 04:33:47 uwe Exp $	*/
d195 1
a195 1
			    errno != EOVERFLOW)
d199 1
a199 1
		if (r == -1 && errno == EOVERFLOW)
@


1.4
log
@boot when then timeout expires; prodded by drahn@@ dlg@@ and others
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.3 2005/01/24 22:20:33 uwe Exp $	*/
d31 3
a33 1
#include <sys/types.h>
a34 1
#include <sys/syscall.h>
d39 1
a42 3
/* unixsys.S */
int uselect(int, fd_set *, fd_set *, fd_set *, struct timeval *);

d50 1
a50 1
#ifdef	UNIX_DEBUG
d72 5
a76 4
	char **file, *p = NULL;
	va_list ap;
	int fd;
	int c;
d79 1
a79 1
	file = va_arg(ap, char **);
d82 3
a84 2
#ifdef	UNIX_DEBUG
	printf("unixopen: %s\n", *file);
d87 15
a101 2
	/* p = strchr(p, ':') */
	for (p = *file; *p != '\0' && *p != ':'; p++)
d103 23
d127 25
a151 6
	c = *p;
	*p = '\0';
#if 0
	f->f_devdata = (void *)(fd = uopen(*file, O_RDWR, 0));
#else
	f->f_devdata = (void *)(fd = uopen(*file, O_RDONLY, 0));
d153 6
a158 1
	*p = c;
d160 5
a164 6
	if (*p == '\0')
		*file = p;
	else if (*(p+1) == '\0')
		*file = (char *)"/";
	else
		*file = p+1;
d166 1
a166 1
	return fd < 0 ? -1 : 0;
a206 49

void
unix_probe(struct consdev *cn)
{
	cn->cn_pri = CN_INTERNAL;
	cn->cn_dev = makedev(0,0);
	printf("ux%d ", minor(cn->cn_dev));
}

void
unix_init(struct consdev *cn)
{
}

void
unix_putc(dev_t dev, int c)
{
	uwrite(1, &c, 1);
}

int
unix_getc(dev_t dev)
{
	if (dev & 0x80) {
		struct timeval tv;
		fd_set fdset;
		int rc;

		tv.tv_sec = 0;
		tv.tv_usec = 0;
		FD_ZERO(&fdset);
		FD_SET(0, &fdset);

#if 0
		rc = syscall(SYS_select, 1, &fdset, NULL, NULL, &tv);
#else
		rc = uselect(1, &fdset, NULL, NULL, &tv);
#endif
		if (rc <= 0)
			return 0;
		else
			return 1;
	} else {
		char c;

		return uread(0, &c, 1)<1? -1: c;
	}
}

d213 2
a214 2
void
time_print(void)
d216 1
a216 1
}
d218 3
a220 4
void
atexit(void)
{
}
d222 1
a222 9
int
cnspeed(dev_t dev, int sp)
{
	return 9600;
}

void
__main(void)
{
@


1.3
log
@Pass boot arguments from zboot/zbsdmod to the loaded kernel, and cope
with 32-bit lseek() in zboot (make 'boot' and 'ls' work above 2G).
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.2 2005/01/11 11:47:11 uwe Exp $	*/
d41 3
d176 1
a176 1
		tv.tv_usec = 100000;
d180 6
a185 1
		if ((rc = syscall(SYS_select, 1, &fdset, NULL, NULL, &tv)) <= 0)
d199 1
a199 1
	return 1;
@


1.2
log
@Let 'boot' and 'ls' take arguments of the form [device:][file].
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.1 2005/01/10 00:25:03 deraadt Exp $	*/
d46 1
d52 3
a54 1
	if ((rc = ulseek((int)devdata, blk * DEV_BSIZE, 0)) >= 0)
a117 1
#if 0
d121 21
a141 1
	return __syscall((quad_t)SYS_lseek, fd, 0, off, wh);
a142 1
#endif
@


1.1
log
@third generation boot blocks from the zaurus

  zaurus# stand/zboot/obj.i386.zaurus/zboot
  probing: ux0
  >> OpenBSD/zaurus BOOT 2.06
  boot> b
  b
  booting /dev/hda4:/bsd: [cross fingers here]

written by dragos at first, more work by drahn, and now increasingly
polished by uwe
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.7 2003/08/11 06:23:09 deraadt Exp $	*/
d70 1
d80 3
a82 9
	if (strncmp("/dev/", *file, 5) == 0) {
		/* p = strchr(p + 5, '/') */
		for (p = *file + 5; *p != '\0' && *p != '/'; p++)
			;
		if (*(p-1) == ':')
			*(p-1) = '\0';
		if (*p == '/')
			*p = '\0';
	}
d84 2
d91 1
d93 6
a98 3
	*file = p;
	if (p != NULL)
		*p = '/';
@

