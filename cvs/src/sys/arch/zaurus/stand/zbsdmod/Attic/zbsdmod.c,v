head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2016.09.03.13.37.44;	author guenther;	state dead;
branches;
next	1.12;
commitid	6T3r4QcMFKe3Fo5T;

1.12
date	2016.03.14.23.08.05;	author krw;	state Exp;
branches;
next	1.11;
commitid	kCz5QgxnxRMKOzNf;

1.11
date	2015.01.18.14.55.02;	author jsg;	state Exp;
branches;
next	1.10;
commitid	ksTlgLn5W99hbaKl;

1.10
date	2015.01.18.12.03.11;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mWYKDJUzlbetKywi;

1.9
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.24.14.16.58;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.02.02.45.29;	author uwe;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.29.19.44.12;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.24.22.20.33;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.14.08.10.17;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.10.21.50.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.10.21.10.58;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.10.00.24.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: zbsdmod.c,v 1.12 2016/03/14 23:08:05 krw Exp $	*/

/*
 * Copyright (c) 2005 Uwe Stuehler <uwe@@bsdx.de>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Zaurus OpenBSD bootstrap loader.
 */

#include "compat_linux.h"

#define BOOTARGS_BUFSIZ	256
#define BOOTARGS_MAGIC	0x4f425344

#define ZBOOTDEV_MAJOR	99
#define ZBOOTDEV_MODE	0222
#define ZBOOTDEV_NAME	"zboot"
#define ZBOOTMOD_NAME	"zbsdmod"

/* Prototypes */
void	elf32bsdboot(void);
int	init_module(void);
void	cleanup_module(void);

ssize_t	zbsdmod_write(struct file *, const char *, size_t, loff_t *);
int	zbsdmod_open(struct inode *, struct file *);
int	zbsdmod_close(struct inode *, struct file *);

static	struct file_operations fops = {
	0,			/* struct module *owner */
	0,			/* lseek */
	0,			/* read */
	zbsdmod_write,		/* write */
	0,			/* readdir */
	0,			/* poll */
	0,			/* ioctl */
	0,			/* mmap */
	zbsdmod_open,		/* open */
	0,			/* flush */
	zbsdmod_close,		/* release */
	0,			/* sync */
	0,			/* async */
	0,			/* check media change */
	0,			/* revalidate */
	0,			/* lock */
};

static	int isopen;
static	loff_t position;

/* Outcast local variables to avoid stack usage in elf32bsdboot(). */
static	int cpsr;
static	unsigned int sz;
static	int i;
static	vaddr_t minv, maxv, posv;
static	vaddr_t elfv, shpv;
static	int *addr;
static	vaddr_t *esymp;
static	Elf_Shdr *shp;
static	Elf_Off off;
static	int havesyms;

/* The maximum size of a kernel image is restricted to 5MB. */
static	int bsdimage[1310720];	/* XXX use kmalloc() */
static	char bootargs[BOOTARGS_BUFSIZ];

/*
 * Boot the loaded BSD kernel image, or return if an error is found.
 * Part of this routine is borrowed from sys/lib/libsa/loadfile.c.
 */
void
elf32bsdboot(void)
{

#define elf	((Elf32_Ehdr *)bsdimage)
#define phdr	((Elf32_Phdr *)((char *)elf + elf->e_phoff))

	if (memcmp(elf->e_ident, ELFMAG, SELFMAG) != 0 ||
	    elf->e_ident[EI_CLASS] != ELFCLASS32)
		return;

	minv = (vaddr_t)~0;
	maxv = (vaddr_t)0;
	posv = (vaddr_t)0;
	esymp = 0;

	/*
	 * Get min and max addresses used by the loaded kernel.
	 */
	for (i = 0; i < elf->e_phnum; i++) {

		if (phdr[i].p_type != PT_LOAD ||
		    (phdr[i].p_flags & (PF_W|PF_R|PF_X)) == 0)
			continue;

#define IS_TEXT(p)	(p.p_flags & PF_X)
#define IS_DATA(p)	((p.p_flags & PF_X) == 0)
#define IS_BSS(p)	(p.p_filesz < p.p_memsz)
		/*
		 * XXX: Assume first address is lowest
		 */
		if (IS_TEXT(phdr[i]) || IS_DATA(phdr[i])) {
			posv = phdr[i].p_vaddr;
			if (minv > posv)
				minv = posv;
			posv += phdr[i].p_filesz;
			if (maxv < posv)
				maxv = posv;
		}
		if (IS_DATA(phdr[i]) && IS_BSS(phdr[i])) {
			posv += phdr[i].p_memsz;
			if (maxv < posv)
				maxv = posv;
		}
		/*
		 * 'esym' is the first word in the .data section,
		 * and marks the end of the symbol table.
		 */
		if (IS_DATA(phdr[i]) && !IS_BSS(phdr[i]))
			esymp = (vaddr_t *)phdr[i].p_vaddr;
	}

	__asm__ volatile ("mrs %0, cpsr" : "=r" (cpsr));
	cpsr |= 0xc0;  /* set FI */
	__asm__ volatile ("msr cpsr_c, %0" :: "r" (cpsr));

	/*
	 * Copy the boot arguments.
	 */
	sz = BOOTARGS_BUFSIZ;
	while (sz > 0) {
		sz--;
		((char *)minv - BOOTARGS_BUFSIZ)[sz] = bootargs[sz];
	}

	/*
	 * Set up pointers to copied ELF and section headers.
	 */
#define roundup(x, y)	((((x)+((y)-1))/(y))*(y))
	elfv = maxv = roundup(maxv, sizeof(long));
	maxv += sizeof(Elf_Ehdr);

	sz = elf->e_shnum * sizeof(Elf_Shdr);
	shp = (Elf_Shdr *)((vaddr_t)elf + elf->e_shoff);
	shpv = maxv;
	maxv += roundup(sz, sizeof(long));

	/*
	 * Now load the symbol sections themselves.  Make sure the
	 * sections are aligned, and offsets are relative to the
	 * copied ELF header.  Don't bother with string tables if
	 * there are no symbol sections.
	 */
	off = roundup((sizeof(Elf_Ehdr) + sz), sizeof(long));
	for (havesyms = i = 0; i < elf->e_shnum; i++)
		if (shp[i].sh_type == SHT_SYMTAB)
			havesyms = 1;
	for (i = 0; i < elf->e_shnum; i++) {
		if (shp[i].sh_type == SHT_SYMTAB ||
		    shp[i].sh_type == SHT_STRTAB) {
			if (havesyms) {
				sz = shp[i].sh_size;
				while (sz > 0) {
					sz--;
					((char *)maxv)[sz] =
					    ((char *)elf +
						shp[i].sh_offset)[sz];
				}
			}
			maxv += roundup(shp[i].sh_size, sizeof(long));
			shp[i].sh_offset = off;
			off += roundup(shp[i].sh_size, sizeof(long));
		}
	}

	/*
	 * Copy the ELF and section headers.
	 */
	sz = sizeof(Elf_Ehdr);
	while (sz > 0) {
		sz--;
		((char *)elfv)[sz] = ((char *)elf)[sz];
	}
	sz = elf->e_shnum * sizeof(Elf_Shdr);
	while (sz > 0) {
		sz--;
		((char *)shpv)[sz] = ((char *)shp)[sz];
	}

	/*
	 * Frob the copied ELF header to give information relative
	 * to elfv.
	 */
	((Elf_Ehdr *)elfv)->e_phoff = 0;
	((Elf_Ehdr *)elfv)->e_shoff = sizeof(Elf_Ehdr);
	((Elf_Ehdr *)elfv)->e_phentsize = 0;
	((Elf_Ehdr *)elfv)->e_phnum = 0;

	/*
	 * Tell locore.S where the symbol table ends, and arrange
	 * to skip esym when loading the data section.
	 */
	if (esymp != 0)
		*esymp = (vaddr_t)maxv;
	for (i = 0; esymp != 0 && i < elf->e_phnum; i++) {
		if (phdr[i].p_type != PT_LOAD ||
		    (phdr[i].p_flags & (PF_W|PF_R|PF_X)) == 0)
			continue;
		if (phdr[i].p_vaddr == (vaddr_t)esymp) {
			phdr[i].p_vaddr = (vaddr_t)((char *)phdr[i].p_vaddr + sizeof(long));
			phdr[i].p_offset = (vaddr_t)((char *)phdr[i].p_offset + sizeof(long));
			phdr[i].p_filesz -= sizeof(long);
			break;
		}
	}

	/*
	 * Load text and data.
	 */
	for (i = 0; i < elf->e_phnum; i++) {

		if (phdr[i].p_type != PT_LOAD ||
		    (phdr[i].p_flags & (PF_W|PF_R|PF_X)) == 0)
			continue;

		if (IS_TEXT(phdr[i]) || IS_DATA(phdr[i])) {
			sz = phdr[i].p_filesz;
			while (sz > 0) {
				sz--;
				((char *)phdr[i].p_vaddr)[sz] =
				    (((char *)elf) + phdr[i].p_offset)[sz];
			}
		}
	}

	addr = (int *)(elf->e_entry);
	__asm__ volatile (
		"mov  r0, %0;"
		"mov  r2, #0;"
		"mov  r1, #(0x00000010 | 0x00000020);"
		"mcr  15, 0, r1, c1, c0, 0;"
		"mcr  15, 0, r2, c8, c7, 0    /* nail I+D TLB on ARMv4 and greater */;"
		"mov  pc, r0" :: "r"(addr) : "r0","r1","r2");
}

/*
 * Initialize the LKM.
 */
int
init_module()
{
	struct proc_dir_entry *entry;
	int rc;

	rc = register_chrdev(ZBOOTDEV_MAJOR, ZBOOTDEV_NAME, &fops);
	if (rc != 0) {
		printk("%s: register_chrdev(%d, ...): error %d\n",
		    ZBOOTMOD_NAME, ZBOOTDEV_MAJOR, -rc);
		return 1;
	}

	entry = proc_mknod(ZBOOTDEV_NAME, ZBOOTDEV_MODE | S_IFCHR,
	    &proc_root, MKDEV(ZBOOTDEV_MAJOR, 0));
	if (entry == NULL) {
		(void)unregister_chrdev(ZBOOTDEV_MAJOR, ZBOOTDEV_NAME);
		return 1;
	}

	printk("%s: OpenBSD/" MACHINE " bootstrap device is %d,0\n",
	    ZBOOTMOD_NAME, ZBOOTDEV_MAJOR);

	return 0;
}

/*
 * Cleanup - undo whatever init_module did.
 */
void
cleanup_module()
{

	(void)unregister_chrdev(ZBOOTDEV_MAJOR, ZBOOTDEV_NAME);
	remove_proc_entry(ZBOOTDEV_NAME, &proc_root);

	printk("%s: OpenBSD/" MACHINE " bootstrap device unloaded\n",
	    ZBOOTMOD_NAME);
}


ssize_t
zbsdmod_write(struct file *f, const char *buf, size_t len, loff_t *offp)
{

	if (len < 1)
		return 0;

	if (*offp + len >= sizeof(bsdimage))
		return EFBIG;

	memcpy(((char *)bsdimage) + *offp, buf, len);

	*offp += len;
	if (*offp > position)
		position = *offp;

	return len;
}

int
zbsdmod_open(struct inode *ino, struct file *f)
{

	/* XXX superuser check */

	if (isopen)
		return -EBUSY;

	isopen = 1;
	position = 0;

	return 0;
}

int
zbsdmod_close(struct inode *ino, struct file *f)
{

	if (isopen) {
		if (position > 0) {
			printk("%s: loaded %ld bytes\n", ZBOOTDEV_NAME,
			    position);

			if (position < BOOTARGS_BUFSIZ) {
				*(int *)bootargs = BOOTARGS_MAGIC;
				bootargs[position + sizeof(int)] = '\0';
				memcpy(bootargs + sizeof(int), bsdimage,
				    position);
			} else {
#ifndef _TEST
				elf32bsdboot();
				printk("%s: boot failed\n", ZBOOTDEV_NAME);       
#else
				printk("/* boot() */\n");
#endif
			}
		}
		isopen = 0;
		return 0;
	}

	return -EBUSY;
}
@


1.12
log
@Change a bunch of (<blah> *)0 to NULL.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.11 2015/01/18 14:55:02 jsg Exp $	*/
@


1.11
log
@Switch some uses of msr that only deal with interrupts/mode to use
just the control field ('c' bits 7:0) instead of 'all' which includes
the flags field ('f' bits 31:24) which isn't modified.
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.10 2015/01/18 12:03:11 jsg Exp $	*/
d275 1
a275 1
	if (entry == (struct proc_dir_entry *)0) {
@


1.10
log
@The 'mrs' instruction only deals with the whole register without
masking.  Remove the use of cpsr_all/spsr_all with 'mrs' and just use
the register names.  This matches the arm docs and avoids confusion as
cpsr_all/spsr_all don't include bits 23->8 when used with the 'msr'
instruction but do with 'mrs'.
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.9 2011/03/13 00:13:53 deraadt Exp $	*/
d136 1
a136 1
	__asm__ volatile ("msr cpsr_all, %0" :: "r" (cpsr));
@


1.9
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.8 2010/12/24 14:16:58 grange Exp $	*/
d134 1
a134 1
	__asm__ volatile ("mrs %0, cpsr_all" : "=r" (cpsr));
@


1.8
log
@Add missing argument to printk(). Spotted while porting on linux 2.6.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.7 2005/05/02 02:45:29 uwe Exp $	*/
d341 1
a341 1
			printk("%s: loaded %d bytes\n", ZBOOTDEV_NAME,
@


1.7
log
@Load the symbol table to the end of data/bss, and account for it when
setting up the kernel page table.  Makes ddb more usable (when used
together with an unrotated console :)
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.7 2005/05/02 02:34:06 uwe Exp $	*/
d269 1
a269 1
		    ZBOOTMOD_NAME, -rc);
@


1.6
log
@Shrink kernel image buffer from 8M to 5M (no kernel should be that big),
and fix a spello.  Leaves more unused memory for the "boot loader".
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.5 2005/01/24 22:20:33 uwe Exp $	*/
d63 1
d66 2
a67 1
static	vaddr_t minv;
d69 4
a84 1
	int cpsr;
a92 4
	__asm__ volatile ("mrs %0, cpsr_all" : "=r" (cpsr));
	cpsr |= 0xc0;  /* set FI */
	__asm__ volatile ("msr cpsr_all, %0" :: "r" (cpsr));

d94 7
a100 1

d114 124
a242 2
				if (minv > phdr[i].p_vaddr)
					minv = phdr[i].p_vaddr;
a244 6
	}

	sz = BOOTARGS_BUFSIZ;
	while (sz > 0) {
		sz--;
		((char *)minv - BOOTARGS_BUFSIZ)[sz] = bootargs[sz];
@


1.5
log
@Pass boot arguments from zboot/zbsdmod to the loaded kernel, and cope
with 32-bit lseek() in zboot (make 'boot' and 'ls' work above 2G).
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.4 2005/01/14 08:10:17 uwe Exp $	*/
d24 1
a24 1
#define BOOTARGS_MAJIC	0x4f425344
d68 2
a69 2
/* The maximum size of a kernel image is restricted to 8MB. */
static	int bsdimage[2097152];	/* XXX use kmalloc() */
d222 1
a222 1
				*(int *)bootargs = BOOTARGS_MAJIC;
@


1.4
log
@Change the device node from /dev/zboot to /proc/zboot to make the mknod
step unnecessary.  Suggested by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zbsdmod.c,v 1.3 2005/01/10 21:50:54 deraadt Exp $	*/
d23 3
a62 1
static	Elf32_Phdr phdr[32];
d65 1
d70 1
d81 2
a82 1
#define elf ((Elf32_Ehdr *)bsdimage)
a87 6
	sz = elf->e_phnum * sizeof(Elf32_Phdr);
	while (sz > 0) {
		sz--;
		((char *)phdr)[sz] = (((char *)elf) + elf->e_phoff)[sz];
	}

d92 2
d112 2
d118 7
a124 1
	addr = (int *)0xa0200000;
d220 7
d228 2
a229 2
			elf32bsdboot();
			printk("%s: boot failed\n", ZBOOTDEV_NAME);
d231 1
a231 1
			printk("/* boot() */\n");
d233 1
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
d131 1
d141 7
d162 1
@


1.2
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD	*/
d205 1
a205 1
			printk("/* boot() */\n"); 
@


1.1
log
@(for now) on the linux side, do:
  zaurus# insmod -f stand/zbsdldr/obj.i386.zaurus/zbsdldr.o
  zaurus# mknod /dev/zboot c 99 0
  zaurus# cp bsd.rd /dev/zboot
@
text
@d1 2
@

