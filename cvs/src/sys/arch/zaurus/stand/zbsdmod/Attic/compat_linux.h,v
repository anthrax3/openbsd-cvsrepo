head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.22
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.18
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.20
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.12
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2016.09.03.13.37.44;	author guenther;	state dead;
branches;
next	1.8;
commitid	6T3r4QcMFKe3Fo5T;

1.8
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.24.14.22.59;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.23.15.15.18;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.15.17.58.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.10.18.17.15;	author jolan;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.14.08.10.17;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.10.21.10.58;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.10.00.24.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: compat_linux.h,v 1.8 2011/03/13 00:13:53 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Uwe Stuehler <uwe@@bsdx.de>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#if 0

/* Define these unconditionally to get the .modinfo section. */
#undef __KERNEL__
#undef MODULE
#define __KERNEL__
#define MODULE

/* Standard headers for Linux LKMs */
#include <linux/kernel.h>
#include <linux/modsetver.h>
#include <linux/module.h>

/*
 * Include Linux 2.4.x headers.
 */
#include <linux/elf.h>
#include <linux/errno.h>
#include <linux/fs.h>
#include <linux/pagemap.h>
#include <linux/file.h>
#include <linux/slab.h>
#include <asm/mach/map.h>

#else

/*
 * Declare the things that we need from the Linux headers.
 */

#define	IS_ERR(ptr)	((unsigned long)(ptr) > (unsigned long)-1000L)

#define MKDEV(ma,mi)	((ma)<<8 | (mi))

#define S_IFBLK		0060000
#define S_IFCHR		0020000

struct file;
struct inode;

typedef long loff_t;

/* BSD headers */
#include <sys/types.h>
#include <sys/exec_elf.h>
#include <errno.h>

struct file_operations {
	struct module *owner;
	void (*llseek) (void);
	ssize_t (*read) (struct file *, char *, size_t, loff_t *);
	ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
	void (*readdir) (void);
	void (*poll) (void);
	void (*ioctl) (void);
	void (*mmap) (void);
	int (*open) (struct inode *, struct file *);
	void (*flush) (void);
	int (*release) (struct inode *, struct file *);
	void (*fsync) (void);
	void (*fasync) (void);
	void (*lock) (void);
	void (*readv) (void);
	void (*writev) (void);
	void (*sendpage) (void);
	void (*get_unmapped_area)(void);
#ifdef MAGIC_ROM_PTR
	void (*romptr) (void);
#endif /* MAGIC_ROM_PTR */
};

extern	struct file * open_exec(const char *);
extern	void fput(struct file *);
extern	int kernel_read(struct file *, unsigned long, char *, unsigned long);
extern	int memcmp(const void *, const void *, size_t);
extern	int register_chrdev(unsigned int, const char *, struct file_operations *);
extern	int unregister_chrdev(unsigned int, const char *);
extern	void printk(const char *, ...)
    __attribute__((__format__(printf, 1, 2)));
extern	void *memcpy(void *, const void *, size_t);

/* Linux LKM support */
static const char __module_kernel_version[] __attribute__((section(".modinfo"))) =
"kernel_version=" UTS_RELEASE;
#if 1 /* def MODVERSIONS */
static const char __module_using_checksums[] __attribute__((section(".modinfo"))) =
"using_checksums=1";
#endif

/* procfs support */
struct proc_dir_entry {
        unsigned short low_ino;
        unsigned short namelen;
        const char *name;
        unsigned short mode;
        unsigned short nlink;
        unsigned short uid;
        unsigned short gid;
        unsigned long size;
        void *proc_iops; /* inode operations */
        struct file_operations * proc_fops;
        void *get_info;
        struct module *owner;
        struct proc_dir_entry *next, *parent, *subdir;
        void *data;
        void *read_proc;
        void *write_proc;
        volatile int count;
        int deleted;
        unsigned short rdev;
};
extern	struct proc_dir_entry proc_root;
extern	struct proc_dir_entry *proc_mknod(const char*, unsigned short,
    struct proc_dir_entry*, unsigned short);
extern	void remove_proc_entry(const char *, struct proc_dir_entry *);

#endif
@


1.8
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: compat_linux.h,v 1.7 2010/12/24 14:22:59 grange Exp $	*/
@


1.7
log
@Advertise printk() as a printf-like function.
Diff from miod@@, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: compat_linux.h,v 1.6 2009/03/23 15:15:18 deraadt Exp $	*/
d60 5
a64 2
typedef long ssize_t;
typedef unsigned long size_t;
a98 5

/* BSD headers */
#include <sys/types.h>
#include <sys/exec_elf.h>
#include <errno.h>
@


1.6
log
@sys/types.h before other things
@
text
@d1 1
a1 1
/*	$OpenBSD: compat_linux.h,v 1.5 2006/01/15 17:58:27 deraadt Exp $	*/
d93 2
a94 1
extern	void printk(const char *, ...);
@


1.5
log
@cope with the int vs long changes to size_t
@
text
@d1 1
a1 1
/*	$OpenBSD: compat_linux.h,v 1.4 2006/01/10 18:17:15 jolan Exp $	*/
d97 1
a98 1
#include <sys/types.h>
@


1.4
log
@need sys/types.h for vaddr_t
@
text
@d1 1
a1 1
/*	$OpenBSD: compat_linux.h,v 1.3 2005/01/14 08:10:17 uwe Exp $	*/
d60 2
a61 2
typedef int ssize_t;
typedef unsigned int size_t;
d90 1
a90 1
extern	int memcmp(const void *, const void *, unsigned int);
@


1.3
log
@Change the device node from /dev/zboot to /proc/zboot to make the mknod
step unnecessary.  Suggested by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compat_linux.h,v 1.2 2005/01/10 21:10:58 uwe Exp $	*/
d98 1
@


1.2
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 6
a54 1
#define	IS_ERR(ptr) ((unsigned long)(ptr) > (unsigned long)-1000L)
d107 27
@


1.1
log
@(for now) on the linux side, do:
  zaurus# insmod -f stand/zbsdldr/obj.i386.zaurus/zbsdldr.o
  zaurus# mknod /dev/zboot c 99 0
  zaurus# cp bsd.rd /dev/zboot
@
text
@d1 2
@

