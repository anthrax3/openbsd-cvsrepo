head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.09.01.09.23.43;	author tedu;	state dead;
branches;
next	1.8;
commitid	Q2PxaFNhqAe0Wmla;

1.8
date	2015.09.19.21.07.04;	author semarie;	state Exp;
branches;
next	1.7;
commitid	9KMPSlP02LD1SpJP;

1.7
date	2014.07.12.21.03.38;	author tedu;	state Exp;
branches;
next	1.6;
commitid	BPzam5MbotE66TAj;

1.6
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.5;
commitid	uKVPYMN2MLxdZxzH;

1.5
date	2011.04.14.18.27.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.29.21.33.54;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.14.17.13.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.09.17.10.46.18;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.1.22.1
date	2002.06.11.03.38.17;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: dvma.c,v 1.8 2015/09/19 21:07:04 semarie Exp $	*/
/*	$NetBSD: dvma.c,v 1.2 1995/09/17 00:50:56 pk Exp $	*/
/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * The easiest way to deal with the need for DVMA mappings is to just
 * map the entire megabyte of RAM where we are loaded into DVMA space.
 * That way, dvma_mapin can just compute the DVMA alias address, and
 * dvma_mapout does nothing.  Note that this assumes all standalone
 * programs stay in the range `base_va' .. `base_va + DVMA_MAPLEN'
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <machine/pte.h>
#include <machine/ctlreg.h>

#include <sparc/sparc/asm.h>

#define	DVMA_BASE	0xFFF00000
#define DVMA_MAPLEN	0xE0000	/* 1 MB - 128K (save MONSHORTSEG) */

static int base_va;

/*
 * This module is only used on sun4, so:
 */
#define getsegmap(va)		(lduha(va, ASI_SEGMAP))
#define setsegmap(va, pmeg)	do stha(va, ASI_SEGMAP, pmeg); while(0)

void
dvma_init(void)
{
	u_int segva, dmava;
	int nseg;
	extern int start;

	/*
	 * Align our address base with the DVMA segment.
	 * Allocate one DVMA segment to cover the stack, which
	 * grows downward from `start'.
	 */
	dmava = DVMA_BASE;
	base_va = segva = (((int)&start) & -NBPSG) - NBPSG;

	/* Then double-map the DVMA addresses */
	nseg = (DVMA_MAPLEN + NBPSG - 1) >> SGSHIFT;
	while (nseg-- > 0) {
		setsegmap(dmava, getsegmap(segva));
		segva += NBPSG;
		dmava += NBPSG;
	}
}

/*
 * Convert a local address to a DVMA address.
 */
char *
dvma_mapin(char *addr, size_t len)
{
	int va = (int)addr;

	va -= base_va;

#ifndef BOOTXX
	/* Make sure the address is in the DVMA map. */
	if (va < 0 || va >= DVMA_MAPLEN)
		panic("dvma_mapin");
#endif

	va += DVMA_BASE;

	return ((char *)va);
}

/*
 * Convert a DVMA address to a local address.
 */
char *
dvma_mapout(char *addr, size_t len)
{
	int va = (int)addr;

	va -= DVMA_BASE;

#ifndef BOOTXX
	/* Make sure the address is in the DVMA map. */
	if (va < 0 || va >= DVMA_MAPLEN)
		panic("dvma_mapout");
#endif

	va += base_va;

	return ((char *)va);
}

extern char *alloc(int);

char *
dvma_alloc(int len)
{
	char *mem;

	mem = alloc(len);
	if (!mem)
		return (mem);
	return (dvma_mapin(mem, len));
}

extern void free(void *ptr, int len);
void
dvma_free(char *dvma, int len)
{
	char *mem;

	mem = dvma_mapout(dvma, len);
	free(mem, len);
}
@


1.8
log
@trivial "if(x) free(x)" replacement by "free(x)"

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.7 2014/07/12 21:03:38 tedu Exp $	*/
@


1.7
log
@revert a few stragglers hiding out
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.6 2014/07/12 18:44:43 tedu Exp $	*/
d145 1
a145 2
	if (mem)
		free(mem, len);
@


1.6
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.5 2011/04/14 18:27:49 miod Exp $	*/
d138 1
a138 1
extern void free(void *ptr, int len, 0);
d146 1
a146 1
		free(mem, len, 0);
@


1.5
log
@Sprinkle prototypes, kill unused locals, and stop contributing to global
warning.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.4 2010/06/29 21:33:54 miod Exp $	*/
d138 1
a138 1
extern void free(void *ptr, int len);
d146 1
a146 1
		free(mem, len);
@


1.4
log
@In the boot blocks, stop assuming we have a 1:1 mapping of low physical
memory, but instead gather memory layout information and work with the MMU
(or the PROM) to make sure we can actually load the kernel image in a proper
contiguous physical memory area.

In order to do this, we look at the kernel image twice; during the first pass,
the kernel footprint is computed, and then after making sure it can be
loaded, the second pass loads the actual image.

Since such a logic doesn't work on media which can not seek backwards, such
as tapes, we check for the boot device being a tape and, in that case, assume
a fixed (generous) image size and don't load the kernel symbol table (to
avoid seeking backwards); since tape boot is supposed to be only used to
boot bsd.rd, this is something we can live with.

While there, lower the address the boot blocks are loaded in memory, because
the last crank did not work with some early sun4c OpenPROM, which only
map about 3.5MB of memory.

Memory games logic from NetBSD, tape handling by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.3 2003/08/14 17:13:57 deraadt Exp $	*/
d42 1
@


1.3
log
@partial proto repairs
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.2 2002/03/14 01:26:44 millert Exp $	*/
d34 5
a38 5
 * The easiest way to deal with the need for DVMA mappings is
 * to just map the entire third megabyte of RAM into DVMA space.
 * That way, dvma_mapin can just compute the DVMA alias address,
 * and dvma_mapout does nothing.  Note that this assumes all
 * standalone programs stay in the range SA_MIN_VA .. SA_MAX_VA
d45 1
a45 1
#include <sparc/stand/common/promdev.h>
d50 7
a56 2
#define SA_MIN_VA	(RELOC - 0x40000)	/* XXX - magic constant */
#define SA_MAX_VA	(SA_MIN_VA + DVMA_MAPLEN)
d61 11
a71 1
	register int segva, dmava;
d73 3
a75 2
	dmava = DVMA_BASE;
	for (segva = SA_MIN_VA; segva < SA_MAX_VA; segva += NBPSG) {
d77 1
d88 1
a88 1
	register int va = (int)addr;
d90 3
d94 1
a94 1
	if ((va < SA_MIN_VA) || (va >= SA_MAX_VA))
d96 1
d98 1
a98 1
	va += DVMA_BASE - SA_MIN_VA;
d111 3
d115 1
a115 1
	if ((va < DVMA_BASE) || (va >= (DVMA_BASE + DVMA_MAPLEN)))
d117 1
d119 1
a119 1
	va -= DVMA_BASE - SA_MIN_VA;
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.1 1997/09/17 10:46:18 downsj Exp $	*/
d54 1
a54 1
dvma_init()
@


1.1
log
@Reorganizaed bootblocks.  Builds like hp300 now.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d99 1
a99 1
extern char *alloc __P((int));
@


1.1.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dvma.c,v 1.1 1997/09/17 10:46:18 downsj Exp $	*/
d99 1
a99 1
extern char *alloc(int);
@


1.1.12.1
log
@Merge in -current from about a week ago
@
text
@d99 1
a99 1
extern char *alloc(int);
@


1.1.12.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d54 1
a54 1
dvma_init(void)
@


