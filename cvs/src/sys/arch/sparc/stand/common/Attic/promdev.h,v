head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.18
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.01.09.23.43;	author tedu;	state dead;
branches;
next	1.5;
commitid	Q2PxaFNhqAe0Wmla;

1.5
date	2011.04.14.18.27.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.29.21.33.54;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.14.17.13.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.09.17.10.46.19;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.1.22.1
date	2002.06.11.03.38.17;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: promdev.h,v 1.5 2011/04/14 18:27:49 miod Exp $	*/
/*	$NetBSD: promdev.h,v 1.3 1995/09/18 21:31:50 pk Exp $ */

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <machine/bsd_openprom.h>

struct promdata {
	int	fd;			/* Openboot descriptor */
	struct	saioreq *si;		/* Oldmon IO request */
	int	devtype;		/* Kind of device we're booting from */
#define DT_BLOCK	1
#define DT_NET		2
#define DT_BYTE		3
	/* Hooks for netif.c */
	ssize_t	(*xmit)(struct promdata *, void *, size_t);
	ssize_t	(*recv)(struct promdata *, void *, size_t);
};

#define PROM_LOADADDR	0x4000
#define DDB_MAGIC0	( ('D'<<24) | ('D'<<16) | ('B'<<8) | ('0') )
#define DDB_MAGIC1	( ('D'<<24) | ('D'<<16) | ('B'<<8) | ('1') )
#define DDB_MAGIC	DDB_MAGIC0

extern struct promvec	*promvec;
extern char	*prom_bootdevice;
extern char	*prom_bootfile;
extern int	prom_boothow;
extern int	hz;
extern int	cputyp, nbpg, pgofset, pgshift;
extern int	debug;

void	prom_init(void);
void	prom_getether(int, u_char *);
struct idprom *prom_getidprom(void);
void	prom_interpret(char *);
int	prom_makememarr(struct memarr *, u_int, int);

/* Note: dvma_*() routines are for "oldmon" machines only */
void	dvma_init(void);	
char	*dvma_mapin(char *, size_t);
char	*dvma_mapout(char *, size_t);
char	*dvma_alloc(int);
void	dvma_free(char *, int);

int	getticks(void);

int	mmu_init(void);
extern int	(*pmap_map)(vaddr_t, paddr_t, psize_t);
extern int	(*pmap_extract)(vaddr_t, paddr_t *);

int	net_open(struct promdata *);
void	net_close(struct promdata *);
int	net_mountroot(void);

/*
 * duplicates from pmap.c for mapping device on "oldmon" machines.
 */
#include <sparc/sparc/asm.h>

#define getcontext()		lduba(AC_CONTEXT, ASI_CONTROL)
#define setcontext(c)		stba(AC_CONTEXT, ASI_CONTROL, c)
#define getsegmap(va)		(cputyp == CPU_SUN4C \
					? lduba(va, ASI_SEGMAP) \
					: lduha(va, ASI_SEGMAP))
#define setsegmap(va, pmeg)	(cputyp == CPU_SUN4C \
					? stba(va, ASI_SEGMAP, pmeg) \
					: stha(va, ASI_SEGMAP, pmeg))
#define getregmap(va)		((unsigned)lduha((va) + 2, ASI_REGMAP) >> 8)
#define setregmap(va, smeg)	stha((va) + 2, ASI_REGMAP, (smeg << 8))

#define getpte(va)		lda(va, ASI_PTE)
#define setpte(va, pte)		sta(va, ASI_PTE, pte)
@


1.5
log
@Sprinkle prototypes, kill unused locals, and stop contributing to global
warning.
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.h,v 1.4 2010/06/29 21:33:54 miod Exp $	*/
@


1.4
log
@In the boot blocks, stop assuming we have a 1:1 mapping of low physical
memory, but instead gather memory layout information and work with the MMU
(or the PROM) to make sure we can actually load the kernel image in a proper
contiguous physical memory area.

In order to do this, we look at the kernel image twice; during the first pass,
the kernel footprint is computed, and then after making sure it can be
loaded, the second pass loads the actual image.

Since such a logic doesn't work on media which can not seek backwards, such
as tapes, we check for the boot device being a tape and, in that case, assume
a fixed (generous) image size and don't load the kernel symbol table (to
avoid seeking backwards); since tape boot is supposed to be only used to
boot bsd.rd, this is something we can live with.

While there, lower the address the boot blocks are loaded in memory, because
the last crank did not work with some early sun4c OpenPROM, which only
map about 3.5MB of memory.

Memory games logic from NetBSD, tape handling by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.h,v 1.3 2003/08/14 17:13:57 deraadt Exp $	*/
d62 1
d65 1
d74 2
d79 4
@


1.3
log
@partial proto repairs
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.h,v 1.2 2002/03/14 01:26:44 millert Exp $	*/
d44 2
a45 2
	int	(*xmit)(struct promdata *, void *, size_t);
	int	(*recv)(struct promdata *, void *, size_t);
d48 1
a48 1
#define LOADADDR	((caddr_t)0x4000)
d61 3
a63 1
extern void	prom_init(void);
d66 9
a74 5
extern void	dvma_init(void);	
extern char	*dvma_mapin(char *, size_t);
extern char	*dvma_mapout(char *, size_t);
extern char	*dvma_alloc(int);
extern void	dvma_free(char *, int);
d89 2
a90 2
#define getregmap(va)		((unsigned)lduha(va+2, ASI_REGMAP) >> 8)
#define setregmap(va, smeg)	stha(va+2, ASI_REGMAP, (smeg << 8))
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.h,v 1.1 1997/09/17 10:46:19 downsj Exp $	*/
d64 1
d68 1
@


1.1
log
@Reorganizaed bootblocks.  Builds like hp300 now.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 2
a45 2
	int	(*xmit) __P((struct promdata *, void *, size_t));
	int	(*recv) __P((struct promdata *, void *, size_t));
d61 1
a61 1
extern void	prom_init __P((void));
d64 3
a66 3
extern char	*dvma_mapin __P((char *, size_t));
extern char	*dvma_mapout __P((char *, size_t));
extern char	*dvma_alloc __P((int));
@


1.1.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: promdev.h,v 1.1 1997/09/17 10:46:19 downsj Exp $	*/
d44 2
a45 2
	int	(*xmit)(struct promdata *, void *, size_t);
	int	(*recv)(struct promdata *, void *, size_t);
d61 1
a61 1
extern void	prom_init(void);
d64 3
a66 3
extern char	*dvma_mapin(char *, size_t);
extern char	*dvma_mapout(char *, size_t);
extern char	*dvma_alloc(int);
@


1.1.12.1
log
@Merge in -current from about a week ago
@
text
@d44 2
a45 2
	int	(*xmit)(struct promdata *, void *, size_t);
	int	(*recv)(struct promdata *, void *, size_t);
d61 1
a61 1
extern void	prom_init(void);
d64 3
a66 3
extern char	*dvma_mapin(char *, size_t);
extern char	*dvma_mapout(char *, size_t);
extern char	*dvma_alloc(int);
@


1.1.12.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a63 1
extern void	dvma_init(void);	
a66 1
extern void	dvma_free(char *, int);
@


