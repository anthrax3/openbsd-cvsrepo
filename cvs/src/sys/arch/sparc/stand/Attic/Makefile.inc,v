head	1.19;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.20
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.12
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.16
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.14
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.10
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.6
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.12
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.10
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.10.0.8
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.6
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	SMP:1.8.0.4
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.19
date	2016.09.01.09.23.43;	author tedu;	state dead;
branches;
next	1.18;
commitid	Q2PxaFNhqAe0Wmla;

1.18
date	2015.09.12.09.04.57;	author miod;	state Exp;
branches;
next	1.17;
commitid	hN9JSI2mZIVwNzq8;

1.17
date	2011.03.18.06.21.40;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.29.21.33.54;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.30.04.32.35;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.25.18.25.33;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.30.02.03.49;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.13.21.03.38;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.02.09.00.25;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.18.01.28.48;	author deraadt;	state Exp;
branches
	1.10.8.1;
next	1.9;

1.9
date	2000.02.19.15.38.23;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.06.22.15.30.02;	author jason;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	97.09.17.10.46.08;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.05.25.06.24.23;	author johns;	state Exp;
branches;
next	1.5;

1.5
date	97.05.24.09.22.20;	author johns;	state Exp;
branches;
next	1.4;

1.4
date	97.04.12.15.11.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.10.10.33.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.11.05.35.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.49;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.49;	author deraadt;	state Exp;
branches;
next	;

1.8.4.1
date	2000.02.20.11.56.56;	author niklas;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2001.05.14.21.37.20;	author niklas;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2003.03.27.23.49.26;	author niklas;	state Exp;
branches;
next	;

1.10.8.1
date	2003.05.19.21.46.33;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@#	$OpenBSD: Makefile.inc,v 1.18 2015/09/12 09:04:57 miod Exp $
#	$NetBSD: Makefile.inc,v 1.5 1996/02/01 22:33:01 mycroft Exp $

BINDIR=	/usr/mdec

# sun4:
#	The first 8MB of physical memory are mapped 1:1.
# sun4c:
#	Worst case sun4c systems have their memory in non-contiguous 4MB
#	areas, therefore we must ensure the boot code never crosses a 4MB
#	boundary.
#	A SPARCstation IPC with 12MB memory in 1MB SIMMs, running PROM 2.9,
#	only maps virtual memory up to 0x3aefff.
# sun4m:
#	The minimal contiguous memory area will be 8MB (SS4/SS5 8MB DIMMs),
#	but there is no guarantee anything will be mapped at address zero
#	if the DIMM are set in a pathological (dis)order, as in:
#		ok cd /memory
#		ok .attributes
#		reg                      00000000  08000000  00800000 
#		                         00000000  0a000000  00800000 
#		                         00000000  0c000000  00800000 
#		                         00000000  0e000000  00800000 
#		available                00000000  0e000000  007a6000 
#		                         00000000  0c000000  00800000 
#		                         00000000  0a000000  00800000 
#		                         00000000  08000000  00800000 
#		name                     memory
#	where the four 8MB DIMMs are mapped at 32MB intervals from 128MB
#	onwards.
# sun4d:
#	Similar to sun4m, but the minimal contiguous memory area will be 32MB,
#	and all physical memory will be packed contiguous from address zero
#	onwards.
#
# The following values of RELOC and RELOC2 have been choosen to work on as
# many systems as possible, yet allowing small enough kernels to be loaded
# at the beginning of the physical memory.
RELOC=		0x358000
RELOC2=		0x398000

CFLAGS+=	-fno-stack-protector \
		-fno-builtin-exit -fno-builtin-printf -fno-builtin-putchar \
		-fno-builtin-vprintf

# XXX <machine/param.h> incorrectly uses STANDALONE instead of _STANDALONE
DEFS=		-DSTANDALONE -D_STANDALONE -DRELOC=${RELOC} -DSUN_BOOTPARAMS \
		-DSUN4 -DSUN4C -DSUN4D -DSUN4M

### Figure out what to use for libsa
LIBSADIR=		${.CURDIR}/../libsa

.if exists(${LIBSADIR}/${__objdir})
LIBSAOBJDIR=		${LIBSADIR}/${__objdir}
.else
LIBSAOBJDIR=		${LIBSADIR}
.endif

LIBSA=			${LIBSAOBJDIR}/libsa.a

### Figure out what to use for libz
LIBZDIR=		${.CURDIR}/../libz

.if exists(${LIBZDIR}/${__objdir})
LIBZOBJDIR=		${LIBZDIR}/${__objdir}
.else
LIBZOBJDIR=		${LIBZDIR}
.endif

LIBZ=			${LIBZOBJDIR}/libz.a
@


1.18
log
@Add a few -fno-builtin-foo to silence the build.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2011/03/18 06:21:40 matthew Exp $
@


1.17
log
@Fix obj directory probing to support cross compiling.

"Go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2010/06/29 21:33:54 miod Exp $
d42 3
a44 1
CFLAGS+=	-fno-stack-protector
@


1.16
log
@In the boot blocks, stop assuming we have a 1:1 mapping of low physical
memory, but instead gather memory layout information and work with the MMU
(or the PROM) to make sure we can actually load the kernel image in a proper
contiguous physical memory area.

In order to do this, we look at the kernel image twice; during the first pass,
the kernel footprint is computed, and then after making sure it can be
loaded, the second pass loads the actual image.

Since such a logic doesn't work on media which can not seek backwards, such
as tapes, we check for the boot device being a tape and, in that case, assume
a fixed (generous) image size and don't load the kernel symbol table (to
avoid seeking backwards); since tape boot is supposed to be only used to
boot bsd.rd, this is something we can live with.

While there, lower the address the boot blocks are loaded in memory, because
the last crank did not work with some early sun4c OpenPROM, which only
map about 3.5MB of memory.

Memory games logic from NetBSD, tape handling by me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2009/06/30 04:32:35 miod Exp $
d51 2
a52 4
.if exists(${LIBSADIR}/obj.${MACHINE})
LIBSAOBJDIR=		${LIBSADIR}/obj.${MACHINE}
.elif exists(${LIBSADIR}/obj)
LIBSAOBJDIR=		${LIBSADIR}/obj
d62 2
a63 4
.if exists(${LIBZDIR}/obj.${MACHINE})
LIBZOBJDIR=		${LIBZDIR}/obj.${MACHINE}
.elif exists(${LIBZDIR}/obj)
LIBZOBJDIR=		${LIBZDIR}/obj
@


1.15
log
@Link the second stage bootblocks (and boot.net) 256KB higher to accomodate
the GENERIC kernel growth; verified to not conflict with old prom on sun4.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2007/11/25 18:25:33 deraadt Exp $
d6 35
a40 8
RELOC_TEST=	0x380000
RELOC_SUN4=	0x240000
RELOC_SUN4C=	0x380000
RELOC_SUN4M=	0x440000

# Note: a `RELOC' value of 0x380000 seems to work on most machines
RELOC?=		${RELOC_TEST}
RELOC2!=	perl -e 'printf "0x%x", ${RELOC_TEST} + 0x40000'
d44 3
a46 1
DEFS=		-DSTANDALONE -DRELOC=${RELOC} -DSUN4 -DSUN4C -DSUN_BOOTPARAMS
@


1.14
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2005/12/30 02:03:49 millert Exp $
d6 1
a6 1
RELOC_TEST=	0x340000
@


1.13
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2004/07/13 21:03:38 marc Exp $
a17 13

### Figure out what to use for libkern
LIBKERNDIR=		${.CURDIR}/../libkern

.if exists(${LIBKERNDIR}/obj.${MACHINE})
LIBKERNOBJDIR=		${LIBKERNDIR}/obj.${MACHINE}
.elif exists(${LIBKERNDIR}/obj)
LIBKERNOBJDIR=		${LIBKERNDIR}/obj
.else
LIBKERNOBJDIR=		${LIBKERNDIR}
.endif

LIBKERN=		${LIBKERNOBJDIR}/libkern.a
@


1.12
log
@errno changes, lib major version bumps, and general flag day
To build you must:
cd /usr/src && make obj && make includes
cd lib/libc && make depend && make && NOMAN=1 sudo make install
cd /usr/src && make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2002/12/02 09:00:25 miod Exp $
a17 1
DEFS+=		-Derrno=errno
@


1.11
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2000/07/18 01:28:48 deraadt Exp $
d18 1
@


1.10
log
@move bootblocks around a bit more
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/02/19 15:38:23 deraadt Exp $
d14 2
@


1.10.8.1
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
a13 2

CFLAGS+=	-fno-stack-protector
@


1.9
log
@link boot at a starting address 0x10000 higher than bootxx; avoids hypersparc cache aliasing
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 1999/06/22 15:30:02 jason Exp $
d6 1
d12 2
a13 2
RELOC?=		${RELOC_SUN4C}
RELOC2!=	perl -e 'printf "0x%x", ${RELOC_SUN4C} + 0x10000'
@


1.8
log
@need more room... bump RELOC
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 1997/09/17 10:46:08 downsj Exp $
d10 1
a10 1
# Note: a `RELOC' value of 0x340000 seems to work on most machines
d12 1
@


1.8.4.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/02/19 15:38:23 deraadt Exp $
d10 1
a10 1
# Note: a `RELOC' value of 0x380000 seems to work on most machines
a11 1
RELOC2!=	perl -e 'printf "0x%x", ${RELOC_SUN4C} + 0x10000'
@


1.8.4.2
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2000/07/18 01:28:48 deraadt Exp $
a5 1
RELOC_TEST=	0x340000
d11 2
a12 2
RELOC?=		${RELOC_TEST}
RELOC2!=	perl -e 'printf "0x%x", ${RELOC_TEST} + 0x40000'
@


1.8.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
a13 2

CFLAGS+=	-fno-stack-protector
@


1.7
log
@Reorganizaed bootblocks.  Builds like hp300 now.
@
text
@d1 1
a1 1
#	$OpenBSD$
d7 1
a7 1
RELOC_SUN4C=	0x340000
@


1.6
log
@Reverted boot block Makefiles to previous state due to instability.
We can't mess with this any more.  We will go with the previously working
boot blocks and install methods for release.
@
text
@d1 1
d4 1
a4 11
.if !defined(__stand_makefile_inc)
__stand_makefile_inc=1

S= ${.CURDIR}/../../../${R}

.ifndef TOPLEVEL
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir)
.BEGIN:
	-@@([ -h machine ] || ln -s ${S}/arch/${MACHINE}/include machine)
.endif
.endif
d13 17
a29 3
INCLUDES+=	-I. -I${.CURDIR}/.. -I${S}/arch -I${S} -I${S}/lib/libsa
DEFS+=		-DSTANDALONE -DRELOC=${RELOC} -DSUN4 -DSUN4C -DSUN_BOOTPARAMS
CFLAGS+=	-O2 ${INCLUDES} ${DEFS}
d31 9
a39 2
srt0.o: srt0.S
	${CC} ${CFLAGS} -D_LOCORE -c ${.IMPSRC}
d41 2
a42 2
cleandir:
	-@@rm -rf lib machine
d44 6
d51 2
@


1.5
log
@Committing George's compressed boot block changes...
@
text
@d20 1
a20 3
#RELOC?=		${RELOC_SUN4C}
# but a bigger 'RELOC' is needed for ramdisk kernels, requires 8M memory...
RELOC?=		0x740000
@


1.4
log
@A horrific gruesome hack to remove a splat during obj@@ builds
@
text
@d20 3
a22 1
RELOC?=		${RELOC_SUN4C}
@


1.3
log
@machine@@ is a horrible hack in obj@@ space. ignore the error. fix later
@
text
@d8 1
d13 1
d30 1
a30 1
	rm -rf lib machine
@


1.2
log
@netbsd port, now we merge our changes back in
@
text
@d10 1
a10 1
	@@([ -h machine ] || ln -s ${S}/arch/${MACHINE}/include machine)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.inc,v 1.4 1995/10/09 23:25:55 pk Exp $
d25 1
a25 1
	${CC} ${CFLAGS} -DLOCORE -c ${.IMPSRC}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
