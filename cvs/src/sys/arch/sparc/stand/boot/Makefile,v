head	1.22;
access;
symbols
	OPENBSD_6_0:1.21.0.6
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.4
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.17.0.10
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.8
	OPENBSD_5_0:1.17.0.6
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.4
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.16.0.8
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.12.0.18
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.12
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.10
	UBC:1.9.0.10
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.8
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	SMP:1.8.0.10
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.22
date	2016.07.30.03.25.49;	author guenther;	state Exp;
branches;
next	1.21;
commitid	HVbAtwruDlJazNH2;

1.21
date	2015.06.14.18.33.53;	author miod;	state Exp;
branches;
next	1.20;
commitid	9T3EeBY1Qssf3x0i;

1.20
date	2013.11.03.21.36.43;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2012.09.02.23.23.51;	author pascal;	state Exp;
branches;
next	1.18;

1.18
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.29.21.33.54;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.27.21.52.30;	author martin;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.26.08.40.09;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.25.18.25.33;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.30.06.03.16;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.11.06.35.45;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.14.20.17.45;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.11.23.11.22;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.19.15.38.24;	author deraadt;	state Exp;
branches
	1.9.10.1;
next	1.8;

1.8
date	98.03.02.07.33.01;	author johns;	state Exp;
branches
	1.8.10.1;
next	1.7;

1.7
date	97.09.17.10.46.15;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.05.25.06.24.26;	author johns;	state Exp;
branches;
next	1.5;

1.5
date	97.05.24.09.13.27;	author johns;	state Exp;
branches;
next	1.4;

1.4
date	97.04.27.20.56.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.29.10.30.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.09.29.10.09.50;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.49;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.49;	author deraadt;	state Exp;
branches;
next	;

1.8.10.1
date	2000.02.20.11.56.57;	author niklas;	state Exp;
branches;
next	1.8.10.2;

1.8.10.2
date	2003.03.27.23.49.26;	author niklas;	state Exp;
branches;
next	1.8.10.3;

1.8.10.3
date	2004.02.19.10.49.59;	author niklas;	state Exp;
branches;
next	;

1.9.10.1
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.9.10.2;

1.9.10.2
date	2003.05.19.21.46.33;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@#	$OpenBSD: Makefile,v 1.21 2015/06/14 18:33:53 miod Exp $
#	$NetBSD: Makefile,v 1.2 1995/09/30 21:43:38 pk Exp $

PROG=	boot

NOMAN=	noman
INSTALL_STRIP=
S=	${.CURDIR}/../../../..

.PATH:	${.CURDIR}/../common
SRCS=	srt0.S conf.c dvma.c mmu.c net.c netif_sun.c promdev.c version.c

SRCS+=	boot.c loadfile_sparc.c

.PATH:	${S}/lib/libkern/arch/sparc ${S}/lib/libkern
SRCS+=	bzero.S strlen.c mul.S umul.S strcmp.c sdiv.S urem.S udiv.S rem.S
SRCS+=	moddi3.c muldi3.c qdivrem.c

CFLAGS=	-fno-pie -O2 -I${.CURDIR}/../common -I${.CURDIR}/../../../../arch \
	-I${.CURDIR}/../../../.. -I${.CURDIR}/../../../../lib/libsa ${DEFS}
AFLAGS+=-fno-pie

CLEANFILES+=${PROG}.aout ${PROG}.elf elfclean
LIBS=${LIBSA} ${LIBZ}

elfclean: clean-elf.c
	${HOSTCC} -o elfclean ${.ALLSRC}

${PROG}: ${OBJS} ${LIBS} elfclean
	${LD} -nopie -znorelro -N -Ttext ${RELOC2} --format a.out-sparc-netbsd \
	    -e start ${OBJS} ${LIBSA} ${LIBZ} -o ${.TARGET}.elf
	./elfclean ${.TARGET}.elf
	objcopy -j .text -j .data -j .bss -O a.out-sparc-netbsd \
	    ${.TARGET}.elf ${.TARGET}.aout
	(echo -n 01 | tr 01 '\01\03'; tail +3c ${.TARGET}.aout) | \
	    dd obs=512 conv=osync > ${.TARGET}
	@@rm ${.TARGET}.aout ${.TARGET}.elf

srt0.o: srt0.S
	${CC} ${CFLAGS} -D_LOCORE -c ${.IMPSRC}

.include <bsd.prog.mk>
@


1.21
log
@Build __moddi3, __muldi3 and __qdivrem from libkern, and built no-pie, instead
of getting them from libgcc.a, built pie.
This repairs boot blocks operation on sparc, as found the hard way by sebastia@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2013/11/03 21:36:43 deraadt Exp $
d30 1
a30 1
	${LD} -nopie -N -Ttext ${RELOC2} --format a.out-sparc-netbsd \
@


1.20
log
@size no longer has a.out knowledge, so .. skip it
found by tobiasu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2012/09/02 23:23:51 pascal Exp $
d17 1
d31 1
a31 2
	    -e start ${OBJS} \
	    ${LIBSA} ${LIBZ} `cc -print-libgcc-file-name` -o ${.TARGET}.elf
@


1.19
log
@sparc -nopie conversion, tested by and ok deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2012/08/21 14:46:19 pascal Exp $
a34 1
	@@size ${.TARGET}.aout
@


1.18
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2010/06/29 21:33:54 miod Exp $
d18 1
a18 1
CFLAGS=	-O2 -I${.CURDIR}/../common -I${.CURDIR}/../../../../arch \
d20 1
a23 1
NOPIE=
d29 2
a30 1
	${LD} -N -Ttext ${RELOC2} --format a.out-sparc-netbsd -e start ${OBJS} \
@


1.17
log
@In the boot blocks, stop assuming we have a 1:1 mapping of low physical
memory, but instead gather memory layout information and work with the MMU
(or the PROM) to make sure we can actually load the kernel image in a proper
contiguous physical memory area.

In order to do this, we look at the kernel image twice; during the first pass,
the kernel footprint is computed, and then after making sure it can be
loaded, the second pass loads the actual image.

Since such a logic doesn't work on media which can not seek backwards, such
as tapes, we check for the boot device being a tape and, in that case, assume
a fixed (generous) image size and don't load the kernel symbol table (to
avoid seeking backwards); since tape boot is supposed to be only used to
boot bsd.rd, this is something we can live with.

While there, lower the address the boot blocks are loaded in memory, because
the last crank did not work with some early sun4c OpenPROM, which only
map about 3.5MB of memory.

Memory games logic from NetBSD, tape handling by me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2007/11/27 21:52:30 martin Exp $
d23 1
@


1.16
log
@need strcmp.c here
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2007/11/26 08:40:09 deraadt Exp $
d11 1
a11 1
SRCS=	srt0.S conf.c dvma.c net.c netif_sun.c promdev.c version.c
d13 1
a13 1
SRCS+=	boot.c loadfile.c
d19 1
a19 2
	-I${.CURDIR}/../../../.. -I${.CURDIR}/../../../../lib/libsa ${DEFS} \
	-DSPARC_BOOT_AOUT -DSPARC_BOOT_ELF
@


1.15
log
@a bit more LIBKERN fallout
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2007/11/25 18:25:33 deraadt Exp $
d16 1
a16 1
SRCS+=	bzero.S strlen.c mul.S umul.S strcmp.S sdiv.S urem.S udiv.S rem.S
@


1.14
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2007/10/30 06:03:16 deraadt Exp $
a3 2
.PATH:	${.CURDIR}/../common

d10 4
a13 2
SRCS=	srt0.S boot.c conf.c dvma.c net.c netif_sun.c promdev.c version.c
SRCS+=	loadfile.c
d29 2
a30 1
	${LD} -N -Ttext ${RELOC2} --format a.out-sparc-netbsd -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name` -o ${.TARGET}.elf
@


1.13
log
@avoid intermediate files with same name (ie. a.out) for parallel make
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2003/08/11 06:35:45 deraadt Exp $
d10 1
d15 3
d23 1
a23 1
LIBS=${LIBSA} ${LIBKERN} ${LIBZ}
@


1.12
log
@better cleaning
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2003/02/14 20:17:45 jason Exp $
d25 8
a32 6
	${LD} -N -Ttext ${RELOC2} --format a.out-sparc-netbsd -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name` -o elf
	./elfclean elf
	objcopy -j .text -j .data -j .bss -O a.out-sparc-netbsd elf a.out
	@@size a.out
	(echo -n 01 | tr 01 '\01\03'; tail +3c a.out) | dd obs=512 conv=osync > ${.TARGET}
	@@rm a.out elf
@


1.11
log
@Pad boot out to 512 byte boundary... some old prom's don't like binaries
which end on "odd" boundaries.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2002/08/11 23:11:22 art Exp $
d18 1
a18 1
CLEANFILES+=${PROG}.aout ${PROG}.elf
@


1.10
log
@ELF support in sparc bootblocks.
Loadfile is from alpha, but heaviliy hacked here.
The build is done by building elf versions of boot and bootxx, then
merging the .rodata and .text sections into .text with a horrible hack
and then using objcopy to convert that into a.out.

Maybe someone will want to fix installboot to deal with ELF instead, but
I won't be that someone in the nearest future.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2000/02/19 15:38:24 deraadt Exp $
d29 1
a29 1
	(echo -n 01 | tr 01 '\01\03'; tail +3c a.out) > ${.TARGET}
@


1.9
log
@link boot at a starting address 0x10000 higher than bootxx; avoids hypersparc cache aliasing
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 1998/03/02 07:33:01 johns Exp $
d12 1
d15 2
a16 1
	-I${.CURDIR}/../../../.. -I${.CURDIR}/../../../../lib/libsa ${DEFS}
d18 10
a27 3
${PROG}: ${OBJS} ${LIBS}
	${LD} -N -T ${RELOC2} -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name`
	# convert to Sun magic
d30 1
a30 1
	@@rm a.out
@


1.9.10.1
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2000/02/19 15:38:24 deraadt Exp $
a11 1
SRCS+=	loadfile.c
d14 1
a14 2
	-I${.CURDIR}/../../../.. -I${.CURDIR}/../../../../lib/libsa ${DEFS} \
	-DSPARC_BOOT_AOUT -DSPARC_BOOT_ELF
d16 3
a18 10
CLEANFILES+=${PROG}.aout ${PROG}.elf
LIBS=${LIBSA} ${LIBKERN} ${LIBZ}

elfclean: clean-elf.c
	${HOSTCC} -o elfclean ${.ALLSRC}

${PROG}: ${OBJS} ${LIBS} elfclean
	${LD} -N -Ttext ${RELOC2} --format a.out-sparc-netbsd -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name` -o elf
	./elfclean elf
	objcopy -j .text -j .data -j .bss -O a.out-sparc-netbsd elf a.out
d21 1
a21 1
	@@rm a.out elf
@


1.9.10.2
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d29 1
a29 1
	(echo -n 01 | tr 01 '\01\03'; tail +3c a.out) | dd obs=512 conv=osync > ${.TARGET}
@


1.8
log
@gcc may generate references to libgcc.a at any time, we lucked out in previous
verions of gcc, but for 2.8 the boot stuff needs to be linked against libgcc.a,
to get ___cmpdi2 for cd9660.o   Since ld doesn't automatically link against
libgcc.a we have to add `cc -print-libgcc-file-name` to the end of the ld
link line(s), whenever we see things like this.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 1997/09/17 10:46:15 downsj Exp $
d17 1
a17 1
	${LD} -N -T ${RELOC} -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name`
@


1.8.10.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2000/02/19 15:38:24 deraadt Exp $
d17 1
a17 1
	${LD} -N -T ${RELOC2} -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name`
@


1.8.10.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
a11 1
SRCS+=	loadfile.c
d14 1
a14 2
	-I${.CURDIR}/../../../.. -I${.CURDIR}/../../../../lib/libsa ${DEFS} \
	-DSPARC_BOOT_AOUT -DSPARC_BOOT_ELF
d16 3
a18 10
CLEANFILES+=${PROG}.aout ${PROG}.elf
LIBS=${LIBSA} ${LIBKERN} ${LIBZ}

elfclean: clean-elf.c
	${HOSTCC} -o elfclean ${.ALLSRC}

${PROG}: ${OBJS} ${LIBS} elfclean
	${LD} -N -Ttext ${RELOC2} --format a.out-sparc-netbsd -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ} `cc -print-libgcc-file-name` -o elf
	./elfclean elf
	objcopy -j .text -j .data -j .bss -O a.out-sparc-netbsd elf a.out
d20 2
a21 2
	(echo -n 01 | tr 01 '\01\03'; tail +3c a.out) | dd obs=512 conv=osync > ${.TARGET}
	@@rm a.out elf
@


1.8.10.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d18 1
a18 1
CLEANFILES+=${PROG}.aout ${PROG}.elf elfclean
@


1.7
log
@Reorganizaed bootblocks.  Builds like hp300 now.
@
text
@d1 1
a1 1
#	$OpenBSD$
d17 1
a17 1
	${LD} -N -T ${RELOC} -e start ${OBJS} ${LIBSA} ${LIBKERN} ${LIBZ}
@


1.6
log
@Reverted boot block Makefiles to previous state due to instability.
We can't mess with this any more.  We will go with the previously working
boot blocks and install methods for release.
@
text
@d1 1
d4 2
a5 2
R=	..
.PATH:	${.CURDIR}/${R}
d7 2
a8 1
SRCS=	srt0.S boot.c promdev.c dvma.c bootnet.c netif_sun.c conf.c version.c
a9 3
NOMAN=	1
BINDIR=	/usr/mdec
LIBS!=	cd ${.CURDIR}/${R}; ${MAKE} libdep
d11 7
a17 2
${PROG}:${OBJS} ${LIBS}
	${LD} -N -T ${RELOC} -e start ${OBJS} ${LIBS}
d22 3
@


1.5
log
@Committing George's compressed boot support changes..
@
text
@a2 1
S=	${.CURDIR}/../../../..
d10 1
d12 1
a12 23
# include "library" defines and make rules
KERN_AS=	library
KERNDST=	${.CURDIR}/${__objdir}
.include "${S}/lib/libkern/Makefile.inc"
LIBKERN=	${KERNLIB}

Z_AS=		library
ZDST=		${.CURDIR}/${__objdir}
.include "${S}/lib/libz/Makefile.inc"
LIBZ=		${ZLIB}

SA_AS=		library
SADST=		${.CURDIR}/${__objdir}
SAREL=
SA_ZLIB=	yes
.include "${S}/lib/libsa/Makefile.inc"
LIBSA=		${SALIB}

LIBS=	${LIBSA} ${LIBKERN} ${LIBSA} ${LIBZ}

# ${PROG} overloads the normal rule in bsd.prog.mk

${PROG}:	${OBJS} ${LIBS}
@


1.4
log
@COPY -> INSTALL_COPY and STRIP -> INSTALL_STRIP
This fixes namespace problems where STRIP is sometimes used as
the name of the strip(1) to use and other times used as
the flag to send install(1) when stripping (or not).
COPY doesn't have this problem (yet) but was poorly named.
@
text
@d3 1
d7 1
a7 1
SRCS=	srt0.S boot.c promdev.c dvma.c net.c netif_sun.c conf.c version.c
a10 1
LIBS!=	cd ${.CURDIR}/${R}; ${MAKE} libdep
d12 23
a34 1
${PROG}:${OBJS} ${LIBS}
@


1.3
log
@no strip
@
text
@d7 1
a7 1
STRIP=
@


1.2
log
@size correct exec
@
text
@d7 1
@


1.1
log
@Initial revision
@
text
@d14 1
a16 1
	@@size ${.TARGET}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

