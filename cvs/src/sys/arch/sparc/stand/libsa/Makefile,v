head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.28
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.26
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2015.11.16.19.33.52;	author miod;	state Exp;
branches;
next	1.9;
commitid	5gnqUR6VheSiU9SF;

1.9
date	2014.11.19.20.01.36;	author miod;	state Exp;
branches;
next	1.8;
commitid	9VZgPwegRuvi9VC1;

1.8
date	2013.01.01.18.49.33;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.09.02.23.23.51;	author pascal;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.29.21.33.54;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.02.03.49;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.13.21.03.39;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.01.17.00.39;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.09.17.10.46.23;	author downsj;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Replace unbounded gets() in libsa with getln() which takes a buffer size,
and convert all gets() users.
ok deraadt@@
@
text
@#	$OpenBSD: Makefile,v 1.9 2014/11/19 20:01:36 miod Exp $

LIB=	sa

.PATH:	${.CURDIR}/../../../../lib/libsa

CFLAGS= -fno-pie -O2 -D_STANDALONE -D__INTERNAL_LIBSA_CREAD \
	-I${.CURDIR} -I${.CURDIR}/../include -I${.CURDIR}/../.. \
	-I${.CURDIR}/../../.. -I${.CURDIR}/../../../.. \
	-I${.CURDIR}/../../../../lib/libsa

# stand routines
SRCS=	alloc.c exit.c getfile.c getln.c globals.c \
	memcmp.c memcpy.c memset.c printf.c snprintf.c strerror.c strncpy.c

# io routines
SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c ioctl.c lseek.c \
	open.c read.c stat.c write.c cread.c

# network routines
SRCS+=	arp.c ether.c in_cksum.c net.c netif.c netudp.c rpc.c

# network info services
SRCS+=	bootp.c bootparam.c rarp.c

# boot filesystems
SRCS+=	ufs.c nfs.c cd9660.c

${OBJS}:	${.CURDIR}/../Makefile.inc

NOPROFILE=
NOPIC=

install:

.include <bsd.lib.mk>
@


1.9
log
@Move {recv,send}udp() out of net.c into their own file; to be used shortly.
Add the new files to the few md libsa builds which require it.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2013/01/01 18:49:33 miod Exp $
d13 1
a13 1
SRCS=	alloc.c exit.c getfile.c gets.c globals.c \
@


1.8
log
@Remove libsa exec.c, not used by anything anymore; all boot blocks now use
loadfile or a derivative of.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2012/09/02 23:23:51 pascal Exp $
d21 1
a21 1
SRCS+=	arp.c ether.c in_cksum.c net.c netif.c rpc.c
@


1.7
log
@sparc -nopie conversion, tested by and ok deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2012/08/21 14:46:19 pascal Exp $
d13 1
a13 1
SRCS=	alloc.c exit.c exec.c getfile.c gets.c globals.c \
@


1.6
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2010/06/29 21:33:54 miod Exp $
d7 1
a7 1
CFLAGS= -O2 -D_STANDALONE -D__INTERNAL_LIBSA_CREAD \
a32 1
NOPIE=
@


1.5
log
@In the boot blocks, stop assuming we have a 1:1 mapping of low physical
memory, but instead gather memory layout information and work with the MMU
(or the PROM) to make sure we can actually load the kernel image in a proper
contiguous physical memory area.

In order to do this, we look at the kernel image twice; during the first pass,
the kernel footprint is computed, and then after making sure it can be
loaded, the second pass loads the actual image.

Since such a logic doesn't work on media which can not seek backwards, such
as tapes, we check for the boot device being a tape and, in that case, assume
a fixed (generous) image size and don't load the kernel symbol table (to
avoid seeking backwards); since tape boot is supposed to be only used to
boot bsd.rd, this is something we can live with.

While there, lower the address the boot blocks are loaded in memory, because
the last crank did not work with some early sun4c OpenPROM, which only
map about 3.5MB of memory.

Memory games logic from NetBSD, tape handling by me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/12/30 02:03:49 millert Exp $
d33 1
@


1.4
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/07/13 21:03:39 marc Exp $
d7 1
a7 1
CFLAGS= -O2 -D__INTERNAL_LIBSA_CREAD \
@


1.3
log
@errno changes, lib major version bumps, and general flag day
To build you must:
cd /usr/src && make obj && make includes
cd lib/libc && make depend && make && NOMAN=1 sudo make install
cd /usr/src && make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2003/06/01 17:00:39 deraadt Exp $
d7 1
a7 1
CFLAGS= -O2 -D__INTERNAL_LIBSA_CREAD -Derrno=errno \
@


1.2
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 1997/09/17 10:46:23 downsj Exp $
d7 1
a7 1
CFLAGS= -O2 -D__INTERNAL_LIBSA_CREAD \
@


1.1
log
@Reorganizaed bootblocks.  Builds like hp300 now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 1997/09/14 07:02:04 downsj Exp $
d14 1
a14 1
	memcmp.c memcpy.c memset.c printf.c strerror.c strncpy.c
@


1.1.12.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 1997/09/17 10:46:23 downsj Exp $
d14 1
a14 1
	memcmp.c memcpy.c memset.c printf.c snprintf.c strerror.c strncpy.c
@


