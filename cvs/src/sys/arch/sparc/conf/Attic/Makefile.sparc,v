head	1.86;
access;
symbols
	OPENBSD_6_0:1.85.0.2
	OPENBSD_6_0_BASE:1.85
	OPENBSD_5_9:1.84.0.4
	OPENBSD_5_9_BASE:1.84
	OPENBSD_5_8:1.84.0.6
	OPENBSD_5_8_BASE:1.84
	OPENBSD_5_7:1.84.0.2
	OPENBSD_5_7_BASE:1.84
	OPENBSD_5_6:1.80.0.4
	OPENBSD_5_6_BASE:1.80
	OPENBSD_5_5:1.79.0.4
	OPENBSD_5_5_BASE:1.79
	OPENBSD_5_4:1.77.0.2
	OPENBSD_5_4_BASE:1.77
	OPENBSD_5_3:1.75.0.2
	OPENBSD_5_3_BASE:1.75
	OPENBSD_5_2:1.73.0.4
	OPENBSD_5_2_BASE:1.73
	OPENBSD_5_1_BASE:1.73
	OPENBSD_5_1:1.73.0.2
	OPENBSD_5_0:1.72.0.2
	OPENBSD_5_0_BASE:1.72
	OPENBSD_4_9:1.69.0.2
	OPENBSD_4_9_BASE:1.69
	OPENBSD_4_8:1.66.0.2
	OPENBSD_4_8_BASE:1.66
	OPENBSD_4_7:1.48.0.2
	OPENBSD_4_7_BASE:1.48
	OPENBSD_4_6:1.45.0.6
	OPENBSD_4_6_BASE:1.45
	OPENBSD_4_5:1.45.0.2
	OPENBSD_4_5_BASE:1.45
	OPENBSD_4_4:1.44.0.2
	OPENBSD_4_4_BASE:1.44
	OPENBSD_4_3:1.42.0.4
	OPENBSD_4_3_BASE:1.42
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.36.0.4
	OPENBSD_4_1_BASE:1.36
	OPENBSD_4_0:1.36.0.2
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.34.0.6
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.34.0.4
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.34.0.2
	OPENBSD_3_7_BASE:1.34
	OPENBSD_3_6:1.33.0.4
	OPENBSD_3_6_BASE:1.33
	SMP_SYNC_A:1.33
	SMP_SYNC_B:1.33
	OPENBSD_3_5:1.33.0.2
	OPENBSD_3_5_BASE:1.33
	OPENBSD_3_4:1.32.0.2
	OPENBSD_3_4_BASE:1.32
	UBC_SYNC_A:1.30
	OPENBSD_3_3:1.28.0.2
	OPENBSD_3_3_BASE:1.28
	OPENBSD_3_2:1.26.0.2
	OPENBSD_3_2_BASE:1.26
	OPENBSD_3_1:1.21.0.2
	OPENBSD_3_1_BASE:1.21
	UBC_SYNC_B:1.26
	UBC:1.19.0.4
	UBC_BASE:1.19
	OPENBSD_3_0:1.19.0.2
	OPENBSD_3_0_BASE:1.19
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_9:1.18.0.10
	OPENBSD_2_8:1.18.0.8
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.18.0.6
	OPENBSD_2_7_BASE:1.18
	SMP:1.18.0.4
	SMP_BASE:1.18
	kame_19991208:1.18
	OPENBSD_2_6:1.18.0.2
	OPENBSD_2_6_BASE:1.18
	OPENBSD_2_5:1.17.0.4
	OPENBSD_2_5_BASE:1.17
	OPENBSD_2_4:1.17.0.2
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.15.0.2
	OPENBSD_2_3_BASE:1.15
	OPENBSD_2_2:1.14.0.2
	OPENBSD_2_2_BASE:1.14
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.86
date	2016.09.01.09.23.41;	author tedu;	state dead;
branches;
next	1.85;
commitid	Q2PxaFNhqAe0Wmla;

1.85
date	2016.04.29.12.44.53;	author mpi;	state Exp;
branches;
next	1.84;
commitid	Vbd8R29nZBKG6KtM;

1.84
date	2015.01.13.01.12.50;	author deraadt;	state Exp;
branches;
next	1.83;
commitid	xEYSgcMiEU7N21VE;

1.83
date	2015.01.11.19.25.14;	author tedu;	state Exp;
branches;
next	1.82;
commitid	Jqptj5xcqx8IMSNU;

1.82
date	2014.11.18.01.17.37;	author deraadt;	state Exp;
branches;
next	1.81;
commitid	Qj1gzxwenHvm4gTb;

1.81
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.80;
commitid	iaz4yUwbbR9oynrV;

1.80
date	2014.05.09.20.15.06;	author miod;	state Exp;
branches;
next	1.79;

1.79
date	2014.01.01.07.54.15;	author miod;	state Exp;
branches;
next	1.78;

1.78
date	2013.10.15.19.23.30;	author guenther;	state Exp;
branches;
next	1.77;

1.77
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.76;

1.76
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.75;

1.75
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.74;

1.74
date	2012.08.23.15.09.10;	author deraadt;	state Exp;
branches;
next	1.73;

1.73
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.72;

1.72
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.71;

1.71
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.70;

1.70
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.69;

1.69
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.68;

1.68
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2010.12.02.04.35.03;	author deraadt;	state Exp;
branches;
next	1.66;

1.66
date	2010.06.01.23.49.23;	author deraadt;	state Exp;
branches;
next	1.65;

1.65
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.64;

1.64
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.63;

1.63
date	2010.05.25.15.05.02;	author deraadt;	state Exp;
branches;
next	1.62;

1.62
date	2010.05.25.02.35.03;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2010.04.28.15.31.34;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2010.04.27.16.54.54;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2010.04.27.04.31.48;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2010.04.27.03.37.38;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2010.04.26.22.11.38;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.04.26.20.50.17;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.04.26.18.58.31;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.47;

1.47
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.46;

1.46
date	2009.08.09.21.33.39;	author miod;	state Exp;
branches;
next	1.45;

1.45
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.44;

1.44
date	2008.04.15.16.01.34;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2008.04.12.21.04.17;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2007.11.25.18.25.29;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.38;

1.38
date	2007.05.08.11.33.31;	author art;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.08.07.23.18;	author art;	state Exp;
branches;
next	1.36;

1.36
date	2006.07.27.05.58.12;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.01.21.46.28;	author pascoe;	state Exp;
branches;
next	1.34;

1.34
date	2004.11.19.06.41.14;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2003.11.20.08.38.52;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.31;

1.31
date	2003.05.23.22.16.16;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.13.22.45.11;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2003.05.13.06.12.44;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.25.21.10.26;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2002.12.02.09.00.25;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2002.09.23.01.43.14;	author art;	state Exp;
branches;
next	1.25;

1.25
date	2002.09.05.00.58.27;	author marc;	state Exp;
branches;
next	1.24;

1.24
date	2002.08.11.23.04.11;	author art;	state Exp;
branches;
next	1.23;

1.23
date	2002.08.09.20.24.43;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2001.12.25.21.43.47;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2001.12.24.23.12.14;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.15.13.10.50;	author assar;	state Exp;
branches
	1.19.4.1;
next	1.18;

1.18
date	99.05.30.08.34.27;	author deraadt;	state Exp;
branches
	1.18.4.1;
next	1.17;

1.17
date	98.09.17.21.08.13;	author jason;	state Exp;
branches;
next	1.16;

1.16
date	98.08.20.02.03.15;	author jason;	state Exp;
branches;
next	1.15;

1.15
date	98.03.03.22.35.07;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	97.09.15.02.40.35;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.08.24.22.57.36;	author downsj;	state Exp;
branches;
next	1.12;

1.12
date	97.07.08.20.19.17;	author johns;	state Exp;
branches;
next	1.11;

1.11
date	97.06.26.02.52.13;	author downsj;	state Exp;
branches;
next	1.10;

1.10
date	97.06.25.14.47.11;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	97.05.30.09.13.39;	author grr;	state Exp;
branches;
next	1.8;

1.8
date	97.03.26.22.11.20;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.08.19.00.07.22;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.11.05.34.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	95.11.13.06.49.51;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	95.10.23.13.17.19;	author davem;	state Exp;
branches;
next	1.3;

1.3
date	95.10.22.06.49.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.18.31.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.37;	author deraadt;	state Exp;
branches;
next	;

1.18.4.1
date	2001.10.31.03.07.56;	author nate;	state Exp;
branches;
next	1.18.4.2;

1.18.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.18.4.3;

1.18.4.3
date	2003.03.27.23.49.24;	author niklas;	state Exp;
branches;
next	1.18.4.4;

1.18.4.4
date	2003.05.16.00.29.40;	author niklas;	state Exp;
branches;
next	1.18.4.5;

1.18.4.5
date	2003.06.07.11.14.42;	author ho;	state Exp;
branches;
next	1.18.4.6;

1.18.4.6
date	2004.02.19.10.49.57;	author niklas;	state Exp;
branches;
next	;

1.19.4.1
date	2002.01.31.22.55.21;	author niklas;	state Exp;
branches;
next	1.19.4.2;

1.19.4.2
date	2002.10.29.00.28.09;	author art;	state Exp;
branches;
next	1.19.4.3;

1.19.4.3
date	2003.05.19.21.46.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.86
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@#	$OpenBSD: Makefile.sparc,v 1.85 2016/04/29 12:44:53 mpi Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I. -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-main -Wno-uninitialized \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mno-fpu
.if ${IDENT:M-DSUN*} == ${IDENT:M-DSUN4M}
CMACHFLAGS+=	-mcpu=supersparc
.endif
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-N -e start -T ${LDSCRIPT} --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

DEBUG?=
.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.s assym.h
bsd_fdintr.o amd7930intr.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.85
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.84 2015/01/13 01:12:50 deraadt Exp $
@


1.84
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.83 2015/01/11 19:25:14 tedu Exp $
d83 1
a83 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d89 1
a89 1
LINKFLAGS+=	-S -x
@


1.83
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.82 2014/11/18 01:17:37 deraadt Exp $
d153 1
a153 2
	rm -f /obsd
	ln /bsd /obsd
@


1.82
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.81 2014/10/04 18:10:14 brad Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.81
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.80 2014/05/09 20:15:06 miod Exp $
d44 2
a45 1
LINKFLAGS=	-N -e start -T ${_machdir}/conf/ld.script --warn-common -nopie
d75 1
a75 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.80
log
@format string fixes and removal of -Wno-format for sparc kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.79 2014/01/01 07:54:15 miod Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.79
log
@Add a linker script to force the .openbsd.randomdata section to be put after
.data, so that it will not get mapped read-only by pmap_bootstrap().
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.78 2013/10/15 19:23:30 guenther Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.78
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.77 2013/06/23 20:33:51 miod Exp $
d44 1
a44 1
LINKFLAGS=	-N -e start -Ttext F8004000 --warn-common -nopie
@


1.77
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.76 2013/03/30 07:25:20 tedu Exp $
d138 1
a138 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d140 1
a140 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.76
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.75 2012/08/28 21:03:32 pascal Exp $
d43 1
a43 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
@


1.75
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.74 2012/08/23 15:09:10 deraadt Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.74
log
@missing ${NOPIE_FLAGS}; ok pascal
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.73 2011/11/08 18:41:34 matthieu Exp $
d44 1
a44 1
LINKFLAGS=	-N -e start -Ttext F8004000 --warn-common
@


1.73
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.72 2011/07/07 22:28:18 guenther Exp $
d36 1
a36 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.72
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.71 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.71
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.70 2011/04/15 02:41:28 guenther Exp $
d164 5
a168 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.70
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.69 2010/12/30 18:49:31 deraadt Exp $
d125 1
a125 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.69
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.68 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL
d74 2
a75 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d95 5
d103 2
a104 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d133 3
a138 14
AFILES=	${_machdir}/${_mach}/locore.s
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d140 1
a140 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d157 12
@


1.68
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.67 2010/12/02 04:35:03 deraadt Exp $
d97 2
a98 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.67
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.66 2010/06/01 23:49:23 deraadt Exp $
d73 2
a74 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d76 2
a77 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.66
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.65 2010/05/28 14:27:08 guenther Exp $
d73 1
a73 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d76 2
a77 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.65
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.64 2010/05/25 17:27:55 deraadt Exp $
d45 1
a45 2
LINKFLAGS=	-N -e start -Ttext F8004000
STRIPFLAGS=	-g -x
d83 1
@


1.64
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.63 2010/05/25 15:05:02 deraadt Exp $
d97 1
a97 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.63
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.62 2010/05/25 02:35:03 deraadt Exp $
a21 2
_mach?=		sparc
_arch?=		sparc
@


1.62
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.61 2010/05/24 23:19:22 deraadt Exp $
d152 1
a152 1
	${NORMAL_S}
@


1.61
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.60 2010/05/24 14:59:16 deraadt Exp $
a132 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d134 1
a134 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.60
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.59 2010/04/28 15:31:34 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 # -Wvariable-decl
d48 1
a48 1
STRIPFLAGS=	-g -X -x
a119 1

d122 1
a122 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d132 2
a133 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.s \
	param.c ioconf.c ${CFILES} ${SFILES}
d136 1
a136 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.s
@


1.59
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.58 2010/04/27 16:54:54 deraadt Exp $
d28 4
a31 4
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D${_mach}
CDIAGFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main \
		-Wstack-larger-than-2047
d33 1
d35 1
a35 3
CMACHFLAGS=	-mcpu=supersparc
.else
CMACHFLAGS=
d37 3
a42 1
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log
d44 3
a46 4
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
# add `-mno-fpu' to work around gcc (last noticed in v2.7.2) bug
CFLAGS+=	-mno-fpu
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
d56 1
a56 1
HOSTCC=	${CC}
d59 1
a59 5

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a62 2
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

a63 3
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d108 1
a108 1
	${NORMAL_C_C}
d126 1
a126 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
@


1.58
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.57 2010/04/27 06:46:26 deraadt Exp $
d61 1
a61 1
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
a68 3
DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

d148 1
a148 1
	sh makelinks && rm -f dontlink
@


1.57
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.56 2010/04/27 05:07:29 deraadt Exp $
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Dsparc

@


1.56
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.55 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/sparc/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/sparc/conf/Makefile.sparc
# after which config should be rerun for all machines of that type.
@


1.55
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.54 2010/04/27 04:31:48 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.54
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.53 2010/04/27 03:37:38 deraadt Exp $
d165 1
a165 1
SRCS=	${_machdir}/sparc/locore.s \
d169 1
a169 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/sparc/locore.s
d185 1
a185 2

locore.o: ${_machdir}/sparc/locore.s assym.h
@


1.53
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.52 2010/04/26 22:21:15 deraadt Exp $
d175 1
a175 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.52
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.51 2010/04/26 22:11:38 deraadt Exp $
a185 14

# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration
bwtwo.o cgsix.o cgthree.o cgtwo.o cons.o dma.o esp.o fb.o if_ie.o: Makefile
ms.c obio.o zs.c autoconf.o clock.o cpu.o disksubr.o locore.o: Makefile
machdep.o mem.o openprom.o pmap.o vm_machdep.o: Makefile
@


1.51
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.50 2010/04/26 20:50:17 deraadt Exp $
a33 1
_machdir?=	$S/arch/sparc
d35 2
a36 1
_archdir?=	$S/arch/sparc
@


1.50
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.49 2010/04/26 18:58:31 deraadt Exp $
d120 5
a124 3
assym.h: $S/kern/genassym.sh ${_machdir}/sparc/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${_machdir}/sparc/genassym.cf > assym.h.tmp && \
d174 3
a176 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/sparc/genassym.cf
@


1.49
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.48 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 1
SPARC=	$S/arch/sparc
d120 1
a120 1
assym.h: $S/kern/genassym.sh ${SPARC}/sparc/genassym.cf Makefile
d122 1
a122 1
	    ${PARAM} < ${SPARC}/sparc/genassym.cf > assym.h.tmp && \
d163 1
a163 1
SRCS=	${SPARC}/sparc/locore.s \
d167 1
a167 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${SPARC}/sparc/locore.s
d173 1
a173 1
	    ${CPPFLAGS} < ${SPARC}/sparc/genassym.cf
d198 1
a198 1
locore.o: ${SPARC}/sparc/locore.s assym.h
@


1.48
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile.sparc,v 1.47 2009/08/09 23:04:49 miod Exp $
# 	$NetBSD: Makefile.sparc,v 1.32.4.1 1996/06/12 20:26:32 pk Exp $
a2 2
# Makefile for OpenBSD
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d182 3
a184 3
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 
d189 1
a189 1
# depend on CPU configuration 
@


1.47
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.46 2009/08/09 21:33:39 miod Exp $
d137 1
a137 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.46
log
@No need to clean genassym{.,o} during `make clean', genassym.sh does this
for us.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.45 2009/01/11 21:02:03 pirofti Exp $
d61 6
d144 1
a144 1
	    [Ee]rrs linterrs makelinks assym.h
d165 1
a165 1
.depend: ${SRCS} assym.h param.c
d176 5
@


1.45
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.44 2008/04/15 16:01:34 miod Exp $
d138 1
a138 1
	    [Ee]rrs linterrs makelinks genassym genassym.o assym.h
@


1.44
log
@Oops, it's a bit too early for -Wvariable-decl on sparc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.43 2008/04/12 21:04:17 miod Exp $
d167 2
a168 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.43
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.42 2007/11/30 07:52:06 miod Exp $
d42 1
a42 1
		-Wstack-larger-than-2047 -Wvariable-decl
@


1.42
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.41 2007/11/25 18:25:29 deraadt Exp $
d42 1
a42 1
		-Wstack-larger-than-2047
@


1.41
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.40 2007/11/25 11:23:33 deraadt Exp $
d70 1
@


1.40
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.39 2007/07/30 16:23:33 thib Exp $
a64 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d92 1
a92 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d124 3
a182 1

@


1.39
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.38 2007/05/08 11:33:31 art Exp $
a72 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d100 1
a100 2
SYSTEM_OBJ=	locore.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.38
log
@Remove cross-compiling stuff that is neither correct nor should have been committed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.36 2006/07/27 05:58:12 miod Exp $
d37 1
a37 1
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
@


1.37
log
@Switch sparc to __HAVE_CPUINFO.

miod@@ tested (since I hacked it up blindly) and ok.
@
text
@d61 1
a61 1
HOSTCC?=	${CC}
d130 1
a130 1
	sh $S/kern/genassym.sh ${HOSTCC} ${CPPFLAGS} \
@


1.36
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.35 2006/06/01 21:46:28 pascoe Exp $
d61 1
a61 1
HOSTCC=	${CC}
d130 1
a130 1
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
@


1.35
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.34 2004/11/19 06:41:14 miod Exp $
d41 2
a42 1
		-Wno-uninitialized -Wno-format -Wno-main
@


1.34
log
@More aggressive strip flags for non debug kernels; this is a noop on some
architectures, but saves a few dozen KB on alpha and ppc.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.33 2003/11/20 08:38:52 espie Exp $
d119 3
a121 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.33
log
@Add -fno-builtin-print -fno-builtin-log to i386/sparc/sparc64/hppa.
No confirmed report of `this work' for other arches yet...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.32 2003/07/22 19:39:50 otto Exp $
d122 1
a122 1
LINKFLAGS+=	-x
@


1.32
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.31 2003/05/23 22:16:16 tedu Exp $
d51 1
@


1.31
log
@move swapgeneric to truly generic code.  tested on many archs by miod and mickey.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.30 2003/05/13 22:45:11 miod Exp $
d175 4
@


1.30
log
@Add option NO_PROPOLICE, which explicitely disables the use of the propolice
stack protection when building kernels. Intended to be used on installation
media, with tight space constraints - currently, only added where
SMALL_KERNEL was already defined.

Not thoroughly tested, but requested by deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.29 2003/05/13 06:12:44 tedu Exp $
d152 1
a152 1
	    ${CFILES} ${SPARC}/sparc/swapgeneric.c ioconf.c param.c | \
@


1.29
log
@remove -fno-stack-protector (enable propolice)
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.28 2002/12/25 21:10:26 miod Exp $
d47 3
@


1.28
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.27 2002/12/02 09:00:25 miod Exp $
a47 1
CMACHFLAGS+=	-fno-stack-protector
@


1.27
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.26 2002/09/23 01:43:14 art Exp $
a26 4
AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
@


1.26
log
@Link the kernel so that it gets only one load section.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.25 2002/09/05 00:58:27 marc Exp $
d52 1
@


1.25
log
@Fix STRIPFLAGS for elf version of strip.   Use same flags
as sparc64 (suggested by fgs@@)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.24 2002/08/11 23:04:11 art Exp $
d57 1
a57 1
LINKFLAGS=	-n -e start -Ttext F8004000
@


1.24
log
@Change to ELF-style linking.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.23 2002/08/09 20:24:43 miod Exp $
d58 1
a58 1
STRIPFLAGS=	-d
@


1.23
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.22 2002/06/22 14:05:51 millert Exp $
d57 1
a57 1
LINKFLAGS=	-N -p -Ttext F8004000 -e start
@


1.22
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.21 2001/12/25 21:43:47 miod Exp $
d127 1
a127 1
assym.h: $S/kern/genassym.sh ${SPARC}/sparc/genassym.cf
@


1.21
log
@Oops, I barfed there, too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.20 2001/12/24 23:12:14 miod Exp $
d53 1
a53 1
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
@


1.20
log
@Harmonize and complete wrt cross-compilation.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.19 2001/07/15 13:10:50 assar Exp $
d32 1
@


1.19
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.18 1999/05/30 08:34:27 deraadt Exp $
a32 1
TOUCH?=	touch
a57 1
TOUCHFLAGS=	-f -c
d112 1
a112 1
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@
@


1.19.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.21 2001/12/25 21:43:47 miod Exp $
a31 1
SIZE?=	size
d33 1
d59 1
d114 1
a114 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
@


1.19.4.2
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.19.4.1 2002/01/31 22:55:21 niklas Exp $
d53 1
a53 1
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d57 2
a58 2
LINKFLAGS=	-N -e start -Ttext F8004000
STRIPFLAGS=	-g -X -x
d127 1
a127 1
assym.h: $S/kern/genassym.sh ${SPARC}/sparc/genassym.cf Makefile
@


1.19.4.3
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d27 4
a50 3
.endif
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
@


1.18
log
@Sigh, -Dsparc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.17 1998/09/17 21:08:13 jason Exp $
d25 2
d196 12
@


1.18.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.18 1999/05/30 08:34:27 deraadt Exp $
a24 2
.include <bsd.own.mk>

a193 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.18.4.2
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
a31 1
SIZE?=	size
d33 1
d59 1
d114 1
a114 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
@


1.18.4.3
log
@Sync the SMP branch with 3.3
@
text
@d27 4
a51 1
CMACHFLAGS+=	-fno-stack-protector
d53 1
a53 1
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d57 2
a58 2
LINKFLAGS=	-N -e start -Ttext F8004000
STRIPFLAGS=	-g -X -x
d127 1
a127 1
assym.h: $S/kern/genassym.sh ${SPARC}/sparc/genassym.cf Makefile
@


1.18.4.4
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@a47 1
.if ${IDENT:M-DNO_PROPOLICE}
a48 1
.endif
@


1.18.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.18.4.4 2003/05/16 00:29:40 niklas Exp $
d152 1
a152 1
	    ${CFILES} ioconf.c param.c | \
@


1.18.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
a50 1
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log
a174 4
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${SPARC}/sparc/genassym.cf
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
	@@rm -f assym.dep
@


1.17
log
@Use -mcpu=supersparc instead of deprecated -mv8; Hans-Guenter Weigand <hgweigand@@wiesbaden.netsurf.de>.
note: -mno-fpu is still in there as it isn't hurting anything and is safer
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.16 1998/08/20 02:03:15 jason Exp $
d40 1
a40 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL
@


1.16
log
@If there are no SFILES, don't try to .depend them; run over by: emory@@hellyeah.com
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.15 1998/03/03 22:35:07 niklas Exp $
d46 1
a46 1
CMACHFLAGS=	-mv8
@


1.15
log
@Add -Wno-main for GCC 2.8
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.14 1997/09/15 02:40:35 deraadt Exp $
d172 1
d174 1
@


1.14
log
@kill Locore.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.13 1997/08/24 22:57:36 downsj Exp $
d43 1
a43 1
		-Wno-uninitialized -Wno-format
@


1.13
log
@-msupersparc is bad news on the microSparc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.12 1997/07/08 20:19:17 johns Exp $
d152 1
a152 2
	    ${SPARC}/sparc/Locore.c ${CFILES} ${SPARC}/sparc/swapgeneric.c \
	    ioconf.c param.c | \
@


1.12
log
@Added -msupersparc for SUN4M-only configs, (right after -mv8) -msupersparc
supposedly adds additional instruction scheduling for better performance,
where -mv8 seems to only "allow" the multiply and div instructions.  This
is what I got from the gcc docs anyway..  Reading the RTL for sparc seems
to agree with this hypothesis, and the man pages..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.11 1997/06/26 02:52:13 downsj Exp $
d46 1
a46 1
CMACHFLAGS=	-mv8 -msupersparc
@


1.11
log
@Compile sun4m-only kernels with -mv8.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.sparc,v 1.10 1997/06/25 14:47:11 downsj Exp $
d46 1
a46 1
CMACHFLAGS=	-mv8
@


1.10
log
@Switch to genassym.cf and sync Makefile with other ports.
@
text
@d1 1
a1 1
#	$OpenBSD$
d44 6
@


1.9
log
@having make clean remove *netbsd is good policy, but probably not what was intended
@
text
@d1 1
d4 1
a4 1
# Makefile for NetBSD
d31 1
a31 1
TOUCH?=	touch -f -c
d34 4
a37 2
S=	../../../..
SPARC=	../..
d39 1
a39 1
INCLUDES=	-I. -I$S/arch -I$S
d41 5
a45 2
GCCWFLAGS=	#-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS=		${DEBUG} -O2 ${GCCWFLAGS}
d51 1
d53 1
a53 1
HOSTCC?=	${CC}
a80 2
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

d87 2
d120 4
a123 8
assym.h: genassym
	./genassym >assym.h

genassym: genassym.o
	${HOSTCC} -o $@@ genassym.o

genassym.o: ${SPARC}/sparc/genassym.c
	${HOSTED_C}
a167 2
	${MKDEP} -a ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} ${PARAM} \
		 ${SPARC}/sparc/genassym.c
d177 1
a177 1
genassym.o machdep.o: Makefile
@


1.8
log
@Use MKDEP instead of mkdep.  Split STRIP into STRIP & STRIPFLAGS.
Use HOSTCC for genassym.
@
text
@d138 1
a138 1
	rm -f eddep *netbsd netbsd.gdb tags *.[io] [a-z]*.s \
@


1.7
log
@silence warnings for now
@
text
@d28 2
a29 1
STRIP?=	strip -d
d44 5
d74 2
d106 1
a106 1
		echo ${STRIP} $@@; ${STRIP} $@@
d117 1
a117 1
	${CC} -o $@@ genassym.o
d120 1
a120 1
	${NORMAL_C_C:S/^-pg$//:S/^-p$//}
d162 5
a166 4
	mkdep ${AFLAGS} ${CPPFLAGS} ${SPARC}/sparc/locore.s
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
	mkdep -a ${CFLAGS} ${CPPFLAGS} ${PARAM} ${SPARC}/sparc/genassym.c
@


1.6
log
@netbsd port, now we merge our changes back in
@
text
@d37 1
a37 1
GCCWFLAGS=-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes
@


1.5
log
@do not use -fno-builtin for kernels; the reasons why are manifold
@
text
@d1 1
a1 1
# 	$NetBSD: Makefile.sparc,v 1.22 1995/09/19 23:26:58 thorpej Exp $
d3 1
a3 2
# @@(#)Makefile.sparc	8.1 (Berkeley) 7/19/93
# Makefile for 4.4 BSD
d8 1
a8 1
#	/sys/conf/``machineid''
d10 1
a10 1
#	 config machineid
d12 1
a12 1
#	/sys/conf/Makefile.``machinetype''
d25 5
a29 6

CC=	cc ${DEBUG}
CPP=	cpp
LD=	ld
TOUCH=	touch -f -c
AWK=	awk
d35 8
a42 3
INCLUDES= -I. -I$S/arch -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL
CFLAGS=	${COPTS} -O2 -Werror
d65 2
a66 1
# sparc kernel uses volatile, rather than heavy "device-driver"s.
d68 2
a69 2
NORMAL_C=	${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
d71 2
a72 9
# optimizer breaks sometimes; temporary workaround uses ${NOOPT_C}
NOOPT_C=	${CC} -c ${COPTS} ${PROF} ${PARAM} $<

NORMAL_S=	rm -f $*.c; ln -s $< $*.c; \
		${CC} ${COPTS} -I${SPARC}/sparc -E $*.c > $*.i; \
		${AS} -o $@@ $*.i; rm -f $*.c $*.i
NORMAL_S_C=	rm -f $*.c; ln -s $< $*.c; \
		${CC} ${COPTS} ${PARAM} -I${SPARC}/sparc -E $*.c > $*.i; \
		${AS} -o $@@ $*.i; rm -f $*.c $*.i
d78 2
d85 8
d95 4
a98 1
LDX=-X
d100 1
a100 1
LDX=-x
a101 11
SYSTEM_OBJ=	locore.o vnode_if.o ${OBJS} param.o ioconf.o \
		${LIBKERN} ${LIBCOMPAT}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@echo loading $@@; rm -f $@@
SYSTEM_LD=	@@${LD} ${LDX} -N -e start -Ttext f8004000 -o $@@ \
		    ${SYSTEM_OBJ} vers.o
SYSTEM_LD_TAIL=	@@echo rearranging symbols; size $@@; chmod 755 $@@
#.if ${DEBUG} == "-g"
#SYSTEM_LD_TAIL+=; echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
#		echo strip -d $@@; strip -d $@@
#.endif
d105 8
a112 1
newvers: vers.o
d114 3
a116 3
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} -c vers.c
d118 2
a119 3
clean::
	rm -f eddep bsd bsd.gdb tags vnode_if.[ch] tags1 *.[io] \
		[a-z]*.s Errs errs linterrs makelinks genassym
d121 2
a122 2
locore.o: ${SPARC}/sparc/locore.s assym.s
	${NORMAL_S}
d124 3
a126 2
# depend on maxusers
assym.s: Makefile
a127 3
./assym.s: assym.s
assym.s: genassym
	./genassym >assym.s
d129 3
a131 2
genassym: genassym.o
	${CC} -static -o $@@ genassym.o
d133 5
a137 2
genassym.o: ${SPARC}/sparc/genassym.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} $<
d139 2
a140 5
SRCS= ${CFILES} ioconf.c param.c vnode_if.c
depend: .depend
.depend: ${SRCS} assym.s
	mkdep ${COPTS} ${SRCS}
	mkdep -a -p ${COPTS} ${SPARC}/sparc/genassym.c 
d147 1
a147 1
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
d150 8
a157 4
tags: depend
	sh $S/conf/systags.sh
	rm -f tags1
	sed -e 's,	../,	,' tags > tags1
a158 2
ioconf.o: ioconf.c
	${CC} -c ${CFLAGS} ioconf.c
d160 5
a164 3
param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .
d166 2
a167 2
param.o: param.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} param.c
d169 4
a172 2
vnode_if.c vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
a173 1
%RULES
d175 2
a176 1
# DO NOT DELETE THIS LINE -- make depend uses it
d178 1
@


1.4
log
@Take out kernel linking flag '-p' it does nothing, change '-T' -> '-Ttext'.
@
text
@d39 1
a39 1
CFLAGS=	${COPTS} -O2 -Werror -fno-builtin
@


1.3
log
@kernel name is /bsd
@
text
@d96 1
a96 1
SYSTEM_LD=	@@${LD} ${LDX} -p -N -e start -T f8004000 -o $@@ \
@


1.2
log
@genassym/newvers cleanup
@
text
@d113 1
a113 1
	rm -f eddep *netbsd netbsd.gdb tags vnode_if.[ch] tags1 *.[io] \
@


1.1
log
@Initial revision
@
text
@d106 3
a108 1
newvers:
d129 1
a129 1
genassym.o: ${SPARC}/sparc/genassym.c
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

