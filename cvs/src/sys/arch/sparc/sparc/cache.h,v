head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.20
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.18
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.14
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.12
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.01.11.21.24.32;	author miod;	state Exp;
branches;
next	1.11;
commitid	wAR36xZ32mvknSbD;

1.11
date	2010.07.10.19.32.24;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.22.19.39.33;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.19.21.30.20;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.19.08.58.05;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.05.14.40.48;	author art;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.02.19.21.45.56;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.08.08.08.27.04;	author downsj;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	96.08.11.05.35.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.46;	author deraadt;	state Exp;
branches;
next	;

1.3.12.1
date	2000.02.20.11.56.51;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.10.29.01.11.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove orphaned defines.
@
text
@/*	$OpenBSD: cache.h,v 1.11 2010/07/10 19:32:24 miod Exp $	*/
/*	$NetBSD: cache.h,v 1.16 1997/07/06 21:15:14 pk Exp $ */

/*
 * Copyright (c) 1996
 * 	The President and Fellows of Harvard College. All rights reserved.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Aaron Brown and
 *	Harvard University.
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cache.h	8.1 (Berkeley) 6/11/93
 */

#ifndef SPARC_CACHE_H
#define SPARC_CACHE_H

/*
 * Sun-4 and Sun-4c virtual address cache.
 *
 * Sun-4 virtual caches come in two flavors, write-through (Sun-4c)
 * and write-back (Sun-4).  The write-back caches are much faster
 * but require a bit more care.
 *
 */
enum vactype { VAC_UNKNOWN, VAC_NONE, VAC_WRITETHROUGH, VAC_WRITEBACK };

/*
 * Cache tags can be written in control space, and must be set to 0
 * (or invalid anyway) before turning on the cache.  The tags are
 * addressed as an array of 32-bit structures of the form:
 *
 *	struct cache_tag {
 *		u_int	:7,		(unused; must be zero)
 *			ct_cid:3,	(context ID)
 *			ct_w:1,		(write flag from PTE)
 *			ct_s:1,		(supervisor flag from PTE)
 *			ct_v:1,		(set => cache entry is valid)
 *			:3,		(unused; must be zero)
 *			ct_tid:14,	(cache tag ID)
 *			:2;		(unused; must be zero)
 *	};
 *
 * The SPARCstation 1 cache sees virtual addresses as:
 *
 *	struct cache_va {
 *		u_int	:2,		(unused; probably copies of va_tid<13>)
 *			cva_tid:14,	(tag ID)
 *			cva_line:12,	(cache line number)
 *			cva_byte:4;	(byte in cache line)
 *	};
 *
 * (The SS2 cache is similar but has half as many lines, each twice as long.)
 *
 * Note that, because the 12-bit line ID is `wider' than the page offset,
 * it is possible to have one page map to two different cache lines.
 * This can happen whenever two different physical pages have the same bits
 * in the part of the virtual address that overlaps the cache line ID, i.e.,
 * bits <15:12>.  In order to prevent cache duplication, we have to
 * make sure that no one page has more than one virtual address where
 * (va1 & 0xf000) != (va2 & 0xf000).  (The cache hardware turns off ct_v
 * when a cache miss occurs on a write, i.e., if va1 is in the cache and
 * va2 is not, and you write to va2, va1 goes out of the cache.  If va1
 * is in the cache and va2 is not, reading va2 also causes va1 to become
 * uncached, and the [same] data is then read from main memory into the
 * cache.)
 *
 * The other alternative, of course, is to disable caching of aliased
 * pages.  (In a few cases this might be faster anyway, but we do it
 * only when forced.)
 *
 * The Sun4, since it has an 8K pagesize instead of 4K, needs to check
 * bits that are one position higher.
 */

/* Some more well-known values: */

#define	CACHE_ALIAS_DIST_SUN4	0x20000
#define	CACHE_ALIAS_DIST_SUN4C	0x10000

#define	CACHE_ALIAS_BITS_SUN4	0x1e000
#define	CACHE_ALIAS_BITS_SUN4C	0xf000

extern int cache_alias_dist;
extern int cache_alias_bits;

/* Optimize cache alias macros on single architecture kernels */
#if (defined(SUN4) || defined(SUN4E)) && !(defined(SUN4C) || defined(SUN4D) || defined(SUN4M))
#define	CACHE_ALIAS_DIST	CACHE_ALIAS_DIST_SUN4
#define	CACHE_ALIAS_BITS	CACHE_ALIAS_BITS_SUN4
#elif !(defined(SUN4) || defined(SUN4E)) && defined(SUN4C) && !(defined(SUN4D) || defined(SUN4M))
#define	CACHE_ALIAS_DIST	CACHE_ALIAS_DIST_SUN4C
#define	CACHE_ALIAS_BITS	CACHE_ALIAS_BITS_SUN4C
#else
#define	CACHE_ALIAS_DIST	cache_alias_dist
#define	CACHE_ALIAS_BITS	cache_alias_bits
#endif

/*
 * True iff a1 and a2 are `bad' aliases (will cause cache duplication).
 */
#define	BADALIAS(a1, a2) (((int)(a1) ^ (int)(a2)) & CACHE_ALIAS_BITS)

/*
 * Routines for dealing with the cache.
 */
void	sun4_cache_enable(void);		/* turn it on */
void	ms1_cache_enable(void);			/* turn it on */
void	viking_cache_enable(void);		/* turn it on */
void	hypersparc_cache_enable(void);		/* turn it on */
void	swift_cache_enable(void);		/* turn it on */
void	cypress_cache_enable(void);		/* turn it on */
void	turbosparc_cache_enable(void);		/* turn it on */
void	kap_cache_enable(void);			/* turn it on */

void	sun4_vcache_flush_context(void);	/* flush current context */
void	sun4_vcache_flush_region(int);		/* flush region in cur ctx */
void	sun4_vcache_flush_segment(int, int);	/* flush seg in cur ctx */
void	sun4_vcache_flush_page(int va);		/* flush page in cur ctx */
void	sun4_cache_flush(caddr_t, u_int);	/* flush region */

void	srmmu_vcache_flush_context(void);	/* flush current context */
void	srmmu_vcache_flush_region(int);		/* flush region in cur ctx */
void	srmmu_vcache_flush_segment(int, int);	/* flush seg in cur ctx */
void	srmmu_vcache_flush_page(int va);	/* flush page in cur ctx */
void	srmmu_cache_flush(caddr_t, u_int);	/* flush region */
void	hypersparc_pure_vcache_flush(void);

void	ms1_cache_flush_all(void);
void	srmmu_cache_flush_all(void);
void	cypress_cache_flush_all(void);
void	hypersparc_cache_flush_all(void);

void	ms1_cache_flush(caddr_t, u_int);
void	viking_cache_flush(caddr_t, u_int);
void	viking_pcache_flush_line(int, int);
void	srmmu_pcache_flush_line(int, int);

void	kap_vcache_flush_context(void);		/* flush current context */
void	kap_vcache_flush_page(int va);		/* flush page in cur ctx */
void	kap_cache_flush(caddr_t, u_int);	/* flush region */

extern void sparc_noop(void);

#define noop_vcache_flush_context \
	(void (*)(void)) sparc_noop
#define noop_vcache_flush_region \
	(void (*)(int)) sparc_noop
#define noop_vcache_flush_segment \
	(void (*)(int,int)) sparc_noop
#define noop_vcache_flush_page \
	(void (*)(int)) sparc_noop
#define noop_cache_flush \
	(void (*)(caddr_t, u_int)) sparc_noop
#define noop_pcache_flush_line \
	(void (*)(int, int)) sparc_noop
#define noop_pure_vcache_flush \
	(void (*)(void)) sparc_noop
#define noop_cache_flush_all \
	(void (*)(void)) sparc_noop

#define cache_flush_page(va)		cpuinfo.vcache_flush_page(va)
#define cache_flush_segment(vr,vs)	cpuinfo.vcache_flush_segment(vr,vs)
#define cache_flush_region(vr)		cpuinfo.vcache_flush_region(vr)
#define cache_flush_context()		cpuinfo.vcache_flush_context()

/*
 * Cache control information.
 */
struct cacheinfo {
	int	c_totalsize;		/* total size, in bytes */
					/* if split, MAX(icache,dcache) */
	int	c_enabled;		/* true => cache is enabled */
	int	c_hwflush;		/* true => have hardware flush */
	int	c_linesize;		/* line size, in bytes */
	int	c_l2linesize;		/* log2(linesize) */
	int	c_nlines;		/* number of cache lines */
	int	c_physical;		/* true => cache has physical
						   address tags */
	int 	c_associativity;	/* # of "buckets" in cache line */
	int 	c_split;		/* true => cache is split */

	int 	ic_totalsize;		/* instruction cache */
	int 	ic_enabled;
	int 	ic_linesize;
	int 	ic_l2linesize;
	int 	ic_nlines;
	int 	ic_associativity;

	int 	dc_totalsize;		/* data cache */
	int 	dc_enabled;
	int 	dc_linesize;
	int 	dc_l2linesize;
	int 	dc_nlines;
	int 	dc_associativity;

	int	ec_totalsize;		/* external cache info */
	int 	ec_enabled;
	int	ec_linesize;
	int	ec_l2linesize;
	int 	ec_nlines;
	int 	ec_associativity;

	enum vactype	c_vactype;
};

#define CACHEINFO cpuinfo.cacheinfo

/*
 * Cache control statistics.
 */
struct cachestats {
	int	cs_npgflush;		/* # page flushes */
	int	cs_nsgflush;		/* # seg flushes */
	int	cs_nrgflush;		/* # seg flushes */
	int	cs_ncxflush;		/* # context flushes */
	int	cs_nraflush;		/* # range flushes */
#ifdef notyet
	int	cs_ra[65];		/* pages/range */
#endif
};
#endif /* SPARC_CACHE_H */
@


1.11
log
@sun4e (i.e. SPARCengine 1e) support. This platform is a mix between sun4 and
sun4c, as it has a sun4c OpenPROM but a sun4 8KB pagesize. VME devices are
not supported yet.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.10 2007/01/22 19:39:33 miod Exp $	*/
a114 5

#define CACHE_ALIAS_DIST_HS128k		0x20000
#define CACHE_ALIAS_BITS_HS128k		0x1f000
#define CACHE_ALIAS_DIST_HS256k		0x40000
#define CACHE_ALIAS_BITS_HS256k		0x3f000
@


1.10
log
@Allow pmap_zeropage and pmap_copypage to work with cache enabled on
MicroSPARC-1, since cache is not write allocate; also provide a smarter routine
to flush a small section of the data cache, but do not enable it since we
almost never flush less than 2KB (which is the whole MS1 D cache size);
adapted from NetBSD, tested on SPARCclassic.
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.9 2005/04/19 21:30:20 miod Exp $	*/
d125 1
a125 1
#if defined(SUN4) && !defined(SUN4C) && !defined(SUN4M)
d128 1
a128 1
#elif !defined(SUN4) && defined(SUN4C) && !defined(SUN4M)
@


1.9
log
@As a late birthday present, a preliminary port to the Solbourne IDT systems
(S3000, S4000 and S4000DX).

Currently limited to diskless and serial console, and userland has issues.
Things will get better in the near future.
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.8 2002/03/15 01:20:04 millert Exp $	*/
d121 1
a121 10
/*
 * Assuming a tag format where the least significant bits are the byte offset
 * into the cache line, and the next-most significant bits are the line id,
 * we can calculate the appropriate aliasing constants. We also assume that
 * the linesize and total cache size are powers of 2.
 */
#define GUESS_CACHE_ALIAS_BITS		((cpuinfo.cacheinfo.c_totalsize - 1) & ~PGOFSET)
#define GUESS_CACHE_ALIAS_DIST		(cpuinfo.cacheinfo.c_totalsize)

extern int cache_alias_dist;		/* */
@


1.8
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.7 2002/03/14 01:26:44 millert Exp $	*/
d160 1
d184 4
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.6 2001/12/19 08:58:05 art Exp $	*/
d154 3
a156 3
void	ms1_cache_enable(void);		/* turn it on */
void	viking_cache_enable(void);	/* turn it on */
void	hypersparc_cache_enable(void);	/* turn it on */
d158 2
a159 2
void	cypress_cache_enable(void);	/* turn it on */
void	turbosparc_cache_enable(void);	/* turn it on */
d162 4
a165 4
void	sun4_vcache_flush_region(int);	/* flush region in cur ctx */
void	sun4_vcache_flush_segment(int, int);/* flush seg in cur ctx */
void	sun4_vcache_flush_page(int va);	/* flush page in cur ctx */
void	sun4_cache_flush(caddr_t, u_int);/* flush region */
d168 2
a169 2
void	srmmu_vcache_flush_region(int);	/* flush region in cur ctx */
void	srmmu_vcache_flush_segment(int, int);/* flush seg in cur ctx */
d171 1
a171 1
void	srmmu_cache_flush(caddr_t, u_int);/* flush region */
@


1.6
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.4 2000/02/19 21:45:56 art Exp $	*/
d153 30
a182 30
void	sun4_cache_enable __P((void));		/* turn it on */
void	ms1_cache_enable __P((void));		/* turn it on */
void	viking_cache_enable __P((void));	/* turn it on */
void	hypersparc_cache_enable __P((void));	/* turn it on */
void	swift_cache_enable __P((void));		/* turn it on */
void	cypress_cache_enable __P((void));	/* turn it on */
void	turbosparc_cache_enable __P((void));	/* turn it on */

void	sun4_vcache_flush_context __P((void));	/* flush current context */
void	sun4_vcache_flush_region __P((int));	/* flush region in cur ctx */
void	sun4_vcache_flush_segment __P((int, int));/* flush seg in cur ctx */
void	sun4_vcache_flush_page __P((int va));	/* flush page in cur ctx */
void	sun4_cache_flush __P((caddr_t, u_int));/* flush region */

void	srmmu_vcache_flush_context __P((void));	/* flush current context */
void	srmmu_vcache_flush_region __P((int));	/* flush region in cur ctx */
void	srmmu_vcache_flush_segment __P((int, int));/* flush seg in cur ctx */
void	srmmu_vcache_flush_page __P((int va));	/* flush page in cur ctx */
void	srmmu_cache_flush __P((caddr_t, u_int));/* flush region */
void	hypersparc_pure_vcache_flush __P((void));

void	ms1_cache_flush_all __P((void));
void	srmmu_cache_flush_all __P((void));
void	cypress_cache_flush_all __P((void));
void	hypersparc_cache_flush_all __P((void));

void	ms1_cache_flush __P((caddr_t, u_int));
void	viking_cache_flush __P((caddr_t, u_int));
void	viking_pcache_flush_line __P((int, int));
void	srmmu_pcache_flush_line __P((int, int));
d184 1
a184 1
extern void sparc_noop __P((void));
d187 1
a187 1
	(void (*)__P((void))) sparc_noop
d189 1
a189 1
	(void (*)__P((int))) sparc_noop
d191 1
a191 1
	(void (*)__P((int,int))) sparc_noop
d193 1
a193 1
	(void (*)__P((int))) sparc_noop
d195 1
a195 1
	(void (*)__P((caddr_t, u_int))) sparc_noop
d197 1
a197 1
	(void (*)__P((int, int))) sparc_noop
d199 1
a199 1
	(void (*)__P((void))) sparc_noop
d201 1
a201 1
	(void (*)__P((void))) sparc_noop
@


1.5
log
@Change pcache_flush_line to pcache_flush_page since this is the only way
we use the function.
At the same time fix the pte pool backend functions to allocate and map
the memory themselves.
@
text
@d181 2
a182 1
void	viking_pcache_flush_page __P((paddr_t, int));
d196 2
a197 2
#define noop_pcache_flush_page \
	(void (*)__P((paddr_t, int))) sparc_noop
a206 1
#define pcache_flush_page(pa,flag)	cpuinfo.pcache_flush_page(pa,flag)
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.5 2001/12/05 14:40:48 art Exp $	*/
d153 29
a181 30
<<<<<<< cache.h
void	sun4_cache_enable(void);		/* turn it on */
void	ms1_cache_enable(void);			/* turn it on */
void	viking_cache_enable(void);		/* turn it on */
void	hypersparc_cache_enable(void);		/* turn it on */
void	swift_cache_enable(void);		/* turn it on */
void	cypress_cache_enable(void);		/* turn it on */
void	turbosparc_cache_enable(void);		/* turn it on */

void	sun4_vcache_flush_context(void);	/* flush current context */
void	sun4_vcache_flush_region(int);		/* flush region in cur ctx */
void	sun4_vcache_flush_segment(int, int);	/* flush seg in cur ctx */
void	sun4_vcache_flush_page(int va);		/* flush page in cur ctx */
void	sun4_cache_flush(caddr_t, u_int);	/* flush region */

void	srmmu_vcache_flush_context(void);	/* flush current context */
void	srmmu_vcache_flush_region(int);		/* flush region in cur ctx */
void	srmmu_vcache_flush_segment(int, int);	/* flush seg in cur ctx */
void	srmmu_vcache_flush_page(int va);	/* flush page in cur ctx */
void	srmmu_cache_flush(caddr_t, u_int);	/* flush region */
void	hypersparc_pure_vcache_flush(void);

void	ms1_cache_flush_all(void);
void	srmmu_cache_flush_all(void);
void	cypress_cache_flush_all(void);
void	hypersparc_cache_flush_all(void);

void	ms1_cache_flush(caddr_t, u_int);
void	viking_cache_flush(caddr_t, u_int);
void	viking_pcache_flush_page(paddr_t, int);
d183 1
a183 1
extern void sparc_noop(void);
d186 1
a186 1
	(void (*)(void)) sparc_noop
d188 1
a188 1
	(void (*)(int)) sparc_noop
d190 1
a190 1
	(void (*)(int,int)) sparc_noop
d192 1
a192 1
	(void (*)(int)) sparc_noop
d194 1
a194 1
	(void (*)(caddr_t, u_int)) sparc_noop
d196 1
a196 1
	(void (*)(paddr_t, int)) sparc_noop
d198 1
a198 1
	(void (*)(void)) sparc_noop
d200 1
a200 1
	(void (*)(void)) sparc_noop
@


1.5.2.2
log
@misc minor cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.5.2.1 2002/06/11 03:38:16 art Exp $	*/
d153 1
@


1.4
log
@Add two new cache operations.
cache_flush_all - (pretty obvious).
pure_vcache_flush - flush all VIVT caches (needed on context switch).
(From NetBSD).
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.3 1997/08/08 08:27:04 downsj Exp $	*/
d181 1
a181 2
void	viking_pcache_flush_line __P((int, int));
void	srmmu_pcache_flush_line __P((int, int));
d195 2
a196 2
#define noop_pcache_flush_line \
	(void (*)__P((int, int))) sparc_noop
d206 1
@


1.3
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d172 6
d198 4
a201 1

@


1.3.12.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.h,v 1.4 2000/02/19 21:45:56 art Exp $	*/
a171 6
void	hypersparc_pure_vcache_flush __P((void));

void	ms1_cache_flush_all __P((void));
void	srmmu_cache_flush_all __P((void));
void	cypress_cache_flush_all __P((void));
void	hypersparc_cache_flush_all __P((void));
d192 1
a192 4
#define noop_pure_vcache_flush \
	(void (*)__P((void))) sparc_noop
#define noop_cache_flush_all \
	(void (*)__P((void))) sparc_noop
@


1.3.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d153 30
a182 30
void	sun4_cache_enable(void);		/* turn it on */
void	ms1_cache_enable(void);			/* turn it on */
void	viking_cache_enable(void);		/* turn it on */
void	hypersparc_cache_enable(void);		/* turn it on */
void	swift_cache_enable(void);		/* turn it on */
void	cypress_cache_enable(void);		/* turn it on */
void	turbosparc_cache_enable(void);		/* turn it on */

void	sun4_vcache_flush_context(void);	/* flush current context */
void	sun4_vcache_flush_region(int);		/* flush region in cur ctx */
void	sun4_vcache_flush_segment(int, int);	/* flush seg in cur ctx */
void	sun4_vcache_flush_page(int va);		/* flush page in cur ctx */
void	sun4_cache_flush(caddr_t, u_int);	/* flush region */

void	srmmu_vcache_flush_context(void);	/* flush current context */
void	srmmu_vcache_flush_region(int);		/* flush region in cur ctx */
void	srmmu_vcache_flush_segment(int, int);	/* flush seg in cur ctx */
void	srmmu_vcache_flush_page(int va);	/* flush page in cur ctx */
void	srmmu_cache_flush(caddr_t, u_int);	/* flush region */
void	hypersparc_pure_vcache_flush(void);

void	ms1_cache_flush_all(void);
void	srmmu_cache_flush_all(void);
void	cypress_cache_flush_all(void);
void	hypersparc_cache_flush_all(void);

void	ms1_cache_flush(caddr_t, u_int);
void	viking_cache_flush(caddr_t, u_int);
void	viking_pcache_flush_line(int, int);
void	srmmu_pcache_flush_line(int, int);
d184 1
a184 1
extern void sparc_noop(void);
d187 1
a187 1
	(void (*)(void)) sparc_noop
d189 1
a189 1
	(void (*)(int)) sparc_noop
d191 1
a191 1
	(void (*)(int,int)) sparc_noop
d193 1
a193 1
	(void (*)(int)) sparc_noop
d195 1
a195 1
	(void (*)(caddr_t, u_int)) sparc_noop
d197 1
a197 1
	(void (*)(int, int)) sparc_noop
d199 1
a199 1
	(void (*)(void)) sparc_noop
d201 1
a201 1
	(void (*)(void)) sparc_noop
@


1.2
log
@netbsd port, now we merge our changes back in
@
text
@d1 2
a2 1
/*	$NetBSD: cache.h,v 1.7.4.1 1996/06/12 20:41:22 pk Exp $ */
d47 3
a56 4
 * VAC_NONE is not actually used now, but if someone builds a physical
 * cache Sun-4 (or, more likely, a virtual index/physical tag cache)
 * everything will work (after pulling out the #ifdef notdef's: grep
 * for VAC_NONE to find them).
d58 1
a58 3
enum vactype { VAC_NONE, VAC_WRITETHROUGH, VAC_WRITEBACK };

extern enum vactype vactype;	/* XXX  move into cacheinfo struct */
a120 6
#define CACHE_ALIAS_DIST_SS		0x0
#define CACHE_ALIAS_BITS_SS		0x0

#define CACHE_ALIAS_DIST_MS		GUESS_CACHE_ALIAS_DIST /* fix! */
#define CACHE_ALIAS_BITS_MS		GUESS_CACHE_ALIAS_BITS /* %%%  */

d127 2
a128 2
#define GUESS_CACHE_ALIAS_BITS		((cacheinfo.c_totalsize - 1) & ~PGOFSET)
#define GUESS_CACHE_ALIAS_DIST		(cacheinfo.c_totalsize)
d130 1
a130 1
extern int cache_alias_dist;		/* If `guessed' */
d133 11
a143 11
#define	CACHE_ALIAS_DIST	(CPU_ISSUN4M				 \
					? cache_alias_dist		 \
					: (CPU_ISSUN4C			 \
						? CACHE_ALIAS_DIST_SUN4C \
						: CACHE_ALIAS_DIST_SUN4))

#define	CACHE_ALIAS_BITS	(CPU_ISSUN4M				 \
					? cache_alias_bits		 \
					: (CPU_ISSUN4C			 \
						? CACHE_ALIAS_BITS_SUN4C \
						: CACHE_ALIAS_BITS_SUN4))
d153 45
a197 6
void	cache_enable __P((void));		/* turn it on */
void	cache_flush_context __P((void));	/* flush current context */
void	cache_flush_region __P((int));		/* flush region in cur ctx */
void	cache_flush_segment __P((int, int));	/* flush seg in cur ctx */
void	cache_flush_page __P((int va));		/* flush page in cur ctx */
void	cache_flush __P((caddr_t, u_int));	/* flush region */
d209 4
a212 1
	int	c_physical;		/* true => cache is physical */
d214 1
d219 3
d226 3
d233 4
d238 2
a239 1
extern struct cacheinfo cacheinfo;
d254 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cache.h,v 1.5 1995/04/13 14:48:51 pk Exp $ */
d4 2
a12 5
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
d23 2
d110 2
d118 34
a151 15
#if defined(SUN4) && defined(SUN4C)
#define	CACHE_ALIAS_DIST	((cputyp == CPU_SUN4) ? CACHE_ALIAS_DIST_SUN4 : \
				    CACHE_ALIAS_DIST_SUN4C)
#define	CACHE_ALIAS_BITS	((cputyp == CPU_SUN4) ? CACHE_ALIAS_BITS_SUN4 : \
				    CACHE_ALIAS_BITS_SUN4C)
#else
#if defined(SUN4)
#define	CACHE_ALIAS_DIST	CACHE_ALIAS_DIST_SUN4
#define	CACHE_ALIAS_BITS	CACHE_ALIAS_BITS_SUN4
#endif
#if defined(SUN4C)
#define	CACHE_ALIAS_DIST	CACHE_ALIAS_DIST_SUN4C
#define	CACHE_ALIAS_BITS	CACHE_ALIAS_BITS_SUN4C
#endif
#endif
d163 2
a164 1
void	cache_flush_segment __P((int vreg, int vseg));	/* flush seg in cur ctx */
d166 1
a166 1
void	cache_flush __P((caddr_t base, u_int len));/* flush region */
d173 1
d178 14
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
