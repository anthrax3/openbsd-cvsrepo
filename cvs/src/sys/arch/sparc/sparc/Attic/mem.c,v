head	1.29;
access;
symbols
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.22.0.30
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.28
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.24
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.22
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.20
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.18
	OPENBSD_5_0:1.22.0.16
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.14
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.12
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.8
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.10
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.6
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.4
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.21.0.18
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.16
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.14
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.12
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.10
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.8
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.6
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.20
	OPENBSD_3_3:1.20.0.8
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.6
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.20.0.4
	OPENBSD_3_1_BASE:1.20
	UBC_SYNC_B:1.20
	UBC:1.20.0.2
	UBC_BASE:1.20
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	SMP:1.11.0.2
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2016.09.01.09.23.43;	author tedu;	state dead;
branches;
next	1.28;
commitid	Q2PxaFNhqAe0Wmla;

1.28
date	2016.08.16.18.17.36;	author tedu;	state Exp;
branches;
next	1.27;
commitid	dgebCYPvUOhYeX5I;

1.27
date	2016.08.15.22.01.59;	author tedu;	state Exp;
branches;
next	1.26;
commitid	hzJmUc5FH2irhNvz;

1.26
date	2016.07.27.15.12.36;	author tedu;	state Exp;
branches;
next	1.25;
commitid	VIg8qGyfeLhNwGiG;

1.25
date	2015.02.10.22.44.35;	author miod;	state Exp;
branches;
next	1.24;
commitid	lsrmQ0A4gY4UmdnD;

1.24
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.23;
commitid	C5iGb36LQxjM60Q3;

1.23
date	2014.11.16.12.30.58;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	yv0ECmCdICvq576h;

1.22
date	2007.09.22.16.21.32;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.02.23.27.55;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2001.12.08.02.24.07;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.19.20.50.57;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.25.13.25.33;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.10.10.34.48;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.05.20.56.53;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.31.16.11.34;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.04.16.42.15;	author art;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	99.11.22.19.22.02;	author matthieu;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	99.11.16.12.21.41;	author art;	state Exp;
branches;
next	1.9;

1.9
date	99.11.16.10.04.48;	author art;	state Exp;
branches;
next	1.8;

1.8
date	99.11.16.10.03.16;	author art;	state Exp;
branches;
next	1.7;

1.7
date	99.09.03.18.01.59;	author art;	state Exp;
branches;
next	1.6;

1.6
date	99.07.09.21.30.02;	author art;	state Exp;
branches;
next	1.5;

1.5
date	99.04.22.18.55.26;	author art;	state Exp;
branches;
next	1.4;

1.4
date	98.08.31.17.42.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.08.08.08.27.31;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.08.11.05.35.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.47;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.47;	author deraadt;	state Exp;
branches;
next	;

1.11.2.1
date	2000.03.24.09.08.50;	author niklas;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2001.05.14.21.37.17;	author niklas;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2001.07.04.10.23.45;	author niklas;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2001.10.31.03.07.57;	author nate;	state Exp;
branches;
next	1.11.2.5;

1.11.2.5
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.11.2.6;

1.11.2.6
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.11.2.7;

1.11.2.7
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	;

1.12.4.1
date	2001.01.31.22.48.17;	author jason;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: mem.c,v 1.28 2016/08/16 18:17:36 tedu Exp $	*/
/*	$NetBSD: mem.c,v 1.13 1996/03/30 21:12:16 christos Exp $ */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/rwlock.h>
#include <sys/conf.h>

#include <sparc/sparc/vaddrs.h>
#include <machine/eeprom.h>
#include <machine/conf.h>

#include <uvm/uvm_extern.h>

extern vaddr_t prom_vstart;
extern vaddr_t prom_vend;
caddr_t zeropage;
vaddr_t mem_page;

int
mmopen(dev_t dev, int flag, int mode, struct proc *p)
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 11:
		case 12:
			return (0);
		default:
			return (ENXIO);
	}
}

int
mmclose(dev_t dev, int flag, int mode, struct proc *p)
{

	return (0);
}

int
mmrw(dev_t dev, struct uio *uio, int flags)
{
	static struct rwlock physlock = RWLOCK_INITIALIZER("mmrw");
	off_t o;
	paddr_t pa;
	vaddr_t va;
	size_t c;
	struct iovec *iov;
	int error = 0;

	if (minor(dev) == 0) {
		/* lock against other uses of shared mem_page */
		error = rw_enter(&physlock, RW_WRITE | RW_INTR);
		if (error)
			return (error);
		if (mem_page == 0)
			mem_page = uvm_km_valloc_wait(kernel_map, NBPG);
		if (mem_page == 0)
			panic("mmrw: out of space in kernel_map");
	}
	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

		/* minor device 0 is physical memory */
		case 0:
			pa = (paddr_t)uio->uio_offset;
			if (!pmap_pa_exists(pa)) {
				error = EFAULT;
				goto unlock;
			}
			pmap_enter(pmap_kernel(), mem_page,
			    trunc_page(pa), uio->uio_rw == UIO_READ ?
			    PROT_READ : PROT_WRITE, PMAP_WIRED);
			pmap_update(pmap_kernel());
			o = uio->uio_offset & PGOFSET;
			c = ulmin(uio->uio_resid, NBPG - o);
			error = uiomove((caddr_t)mem_page + o, c, uio);
			pmap_remove(pmap_kernel(), mem_page, mem_page + NBPG);
			pmap_update(pmap_kernel());
			continue;

		/* minor device 1 is kernel memory */
		case 1:
			va = (vaddr_t)uio->uio_offset;
			if (va >= MSGBUF_VA && va < MSGBUF_VA+NBPG) {
				c = ulmin(iov->iov_len, 4096);
			} else if (va >= prom_vstart && va < prom_vend &&
				   uio->uio_rw == UIO_READ) {
				/* Allow read-only access to the PROM */
				c = ulmin(iov->iov_len,
				    prom_vend - prom_vstart);
			} else {
				c = ulmin(iov->iov_len, MAXPHYS);
				if (!uvm_kernacc((caddr_t)va, c,
				    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
					return (EFAULT);
			}
			error = uiomove((caddr_t)va, c, uio);
			continue;

		/* minor device 2 is /dev/null */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

#if defined(SUN4)
		/* minor device 11 is /dev/eeprom */
		case 11:
			if (cputyp == CPU_SUN4)
				error = eeprom_uio(uio);
			else
				error = ENXIO;

			continue;
#endif /* SUN4 */

		/* minor device 12 is /dev/zero */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				uio->uio_resid = 0;
				return 0;
			}
			if (zeropage == NULL)
				zeropage = malloc(PAGE_SIZE, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = ulmin(iov->iov_len, PAGE_SIZE);
			error = uiomove(zeropage, c, uio);
			continue;

		default:
			return (ENXIO);
		}
	}
	if (minor(dev) == 0) {
unlock:
		rw_exit(&physlock);
	}
	return (error);
}

paddr_t
mmmmap(dev_t dev, off_t off, int prot)
{

	return (-1);
}

int
mmioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	return (EOPNOTSUPP);
}
@


1.28
log
@replace hand rolled tsleep physlock with rwlock. ok mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.27 2016/08/15 22:01:59 tedu Exp $	*/
@


1.27
log
@normalize some comments
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.26 2016/07/27 15:12:36 tedu Exp $	*/
d50 1
d90 1
a96 1
	static int physlock;
d100 3
a102 8
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
d192 1
a192 3
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
@


1.26
log
@ansify mem.c to the latest fashion. with a fix from mike burns. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.25 2015/02/10 22:44:35 miod Exp $	*/
d160 1
a160 1
		/* minor device 2 is EOF/RATHOLE */
d167 1
a167 1
/* minor device 11 (/dev/eeprom) is the old-style (a'la Sun 3) EEPROM */
d177 1
a177 1
/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
@


1.25
log
@Convert to uiomove().
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.23 2014/11/16 12:30:58 deraadt Exp $	*/
a62 1
/*ARGSUSED*/
d64 1
a64 4
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
a78 1
/*ARGSUSED*/
d80 1
a80 4
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
a85 1
/*ARGSUSED*/
d87 1
a87 4
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
a165 2
/* XXX should add sbus, etc */

d204 1
a204 4
mmmmap(dev, off, prot)
        dev_t dev;
        off_t off;
	int prot;
a209 1
/*ARGSUSED*/
d211 1
a211 6
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
@


1.24
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d101 1
a101 1
	int o;
d104 1
a104 1
	int c;
d147 2
a148 2
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomovei((caddr_t)mem_page + o, c, uio);
d157 1
a157 1
				c = min(iov->iov_len, 4096);
d161 2
a162 1
				c = min(iov->iov_len, prom_vend - prom_vstart);
d164 1
a164 1
				c = min(iov->iov_len, MAXPHYS);
d169 1
a169 1
			error = uiomovei((caddr_t)va, c, uio);
d200 2
a201 2
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomovei(zeropage, c, uio);
@


1.23
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.22 2007/09/22 16:21:32 krw Exp $	*/
d148 1
a148 1
			error = uiomove((caddr_t)mem_page + o, c, uio);
d168 1
a168 1
			error = uiomove((caddr_t)va, c, uio);
d200 1
a200 1
			error = uiomove(zeropage, c, uio);
@


1.22
log
@M_ZERO -> bzero.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.21 2003/06/02 23:27:55 millert Exp $	*/
d144 1
a144 1
			    VM_PROT_READ : VM_PROT_WRITE, PMAP_WIRED);
@


1.21
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.20 2001/12/08 02:24:07 art Exp $	*/
d196 3
a198 5
			if (zeropage == NULL) {
				zeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
			}
@


1.20
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.19 2001/11/06 19:53:16 miod Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.19
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2001/11/01 12:13:46 art Exp $	*/
d149 1
d154 1
@


1.18
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2001/09/19 20:50:57 mickey Exp $	*/
a59 1
#include <vm/vm.h>
@


1.17
log
@merge vm/vm_kern.h into uvm/uvm_extern.h; art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2001/07/25 13:25:33 art Exp $	*/
d221 1
a221 1
int
d224 2
a225 1
        int off, prot;
@


1.16
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2001/05/10 10:34:48 art Exp $	*/
d61 1
a61 1
#include <vm/vm_kern.h>
@


1.15
log
@UVM is no longer optional on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/05/05 20:56:53 art Exp $	*/
d149 1
a149 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE, 0);
@


1.14
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/01/31 16:11:34 art Exp $	*/
a123 1
#if defined(UVM)
a125 4
#else
		if (mem_page == 0)
			mem_page = kmem_alloc_pageable(kernel_map, NBPG);
#endif
a166 1
#if defined(UVM)
a169 5
#else
				if (!kernacc((caddr_t)va, c,
				    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
					return (EFAULT);
#endif
@


1.13
log
@mmap should return -1 on failure, not EOPNOTSUPP.
As it was now, an mmap of /dev/mem always returned page 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2000/03/04 16:42:15 art Exp $	*/
d212 2
a213 2
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(zeropage, CLBYTES);
d215 1
a215 1
			c = min(iov->iov_len, CLBYTES);
@


1.12
log
@Remove unnecessary, unreached, confusing code.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 1999/11/22 19:22:02 matthieu Exp $	*/
d238 1
a238 1
	return (EOPNOTSUPP);
@


1.12.4.1
log
@Pull in patches from current:
Fix (art,jason):
mmap should return -1 on failure, not EOPNOTSUPP.
As it was now, an mmap of /dev/mem always returned page 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2000/03/04 16:42:15 art Exp $	*/
d238 1
a238 1
	return (-1);
@


1.11
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 1999/11/16 12:21:41 art Exp $	*/
a221 6
		if (error)
			break;
		iov->iov_base += c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
@


1.11.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d222 6
@


1.11.2.2
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/01/31 16:11:34 art Exp $	*/
d238 1
a238 1
	return (-1);
@


1.11.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11.2.2 2001/05/14 21:37:17 niklas Exp $	*/
d124 1
d127 4
d172 1
d176 5
d212 2
a213 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
d215 1
a215 1
			c = min(iov->iov_len, PAGE_SIZE);
@


1.11.2.4
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11.2.3 2001/07/04 10:23:45 niklas Exp $	*/
d61 1
a61 1
#include <uvm/uvm_extern.h>
d149 1
a149 1
			    VM_PROT_READ : VM_PROT_WRITE, PMAP_WIRED);
@


1.11.2.5
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
d221 1
a221 1
paddr_t
d224 1
a224 2
        off_t off;
	int prot;
@


1.11.2.6
log
@Merge in trunk
@
text
@a148 1
			pmap_update(pmap_kernel());
a152 1
			pmap_update(pmap_kernel());
@


1.11.2.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11.2.6 2002/03/06 02:04:46 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.10
log
@Don't allocate vmmap in pmap_bootstrap, allocate it in mmrw when needed.
At the same time, give it a 'better' name.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 1999/11/16 10:04:48 art Exp $	*/
d244 12
@


1.9
log
@Opps.. remove stuff that shouldn't be in the last commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 1999/11/16 10:03:16 art Exp $	*/
d61 1
d66 1
a112 1
	extern caddr_t vmmap;
d115 1
a115 1
		/* lock against other uses of shared vmmap */
d124 9
d147 1
a147 1
			pa = uio->uio_offset;
d152 1
a152 1
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
d157 2
a158 3
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
@


1.8
log
@Optimize the case of writing to /dev/zero like we do in for /dev/null
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 1999/09/03 18:01:59 art Exp $	*/
a137 1
#if 0
a141 1
#endif
a220 1
#if 0
a221 1
#endif
@


1.7
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 1999/07/09 21:30:02 art Exp $	*/
d138 1
d143 1
d200 2
a201 2
				c = iov->iov_len;
				break;
d223 1
d225 1
@


1.6
log
@vm_offset_t -> {v,p}addr_t and vm_size_t -> {v,p}size_t
remove "register" keywords
Various cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1999/04/22 18:55:26 art Exp $	*/
d144 1
a144 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
@


1.5
log
@UVM kernacc -> uvm_kernacc
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 1998/08/31 17:42:41 millert Exp $	*/
d62 2
a63 2
extern vm_offset_t prom_vstart;
extern vm_offset_t prom_vend;
d104 5
a108 3
	register vm_offset_t o, v;
	register int c;
	register struct iovec *iov;
d135 1
a135 1
/* minor device 0 is physical memory */
d137 2
a138 2
			v = uio->uio_offset;
			if (!pmap_pa_exists(v)) {
d142 2
a143 2
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), uio->uio_rw == UIO_READ ?
d148 2
a149 2
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + NBPG);
d152 1
a152 1
/* minor device 1 is kernel memory */
d154 2
a155 2
			v = uio->uio_offset;
			if (v >= MSGBUF_VA && v < MSGBUF_VA+NBPG) {
d157 1
a157 1
			} else if (v >= prom_vstart && v < prom_vend &&
d164 1
a164 1
				if (!uvm_kernacc((caddr_t)v, c,
d168 1
a168 1
				if (!kernacc((caddr_t)v, c,
d173 1
a173 1
			error = uiomove((caddr_t)v, c, uio);
d176 1
a176 1
/* minor device 2 is EOF/RATHOLE */
@


1.4
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 1997/08/08 08:27:31 downsj Exp $	*/
d161 5
d169 1
@


1.3
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d74 10
a83 1
	return (0);
@


1.2
log
@netbsd port, now we merge our changes back in
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mem.c,v 1.11 1995/05/29 23:57:16 pk Exp $ */
a47 1
#include <sys/conf.h>
d52 2
d57 1
d67 1
a67 1
mmopen(dev, flag, mode)
d70 1
d78 1
a78 1
mmclose(dev, flag, mode)
d81 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
