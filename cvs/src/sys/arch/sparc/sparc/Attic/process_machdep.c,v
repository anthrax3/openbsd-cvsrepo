head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.30
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.26
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.28
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.20
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.24
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.22
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.18
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.16
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.14
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.12
	OPENBSD_5_0:1.13.0.10
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.8
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.6
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.22
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.09.01.09.23.43;	author tedu;	state dead;
branches;
next	1.13;
commitid	Q2PxaFNhqAe0Wmla;

1.13
date	2009.03.05.19.52.23;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.30.00.18.30;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.17.03.54.30;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.16.21.37.04;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.16.18.48.27;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.02.23.45.27;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.08.00.04.21;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.27.55;	author millert;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2002.03.14.00.42.24;	author miod;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2002.02.20.22.28.23;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.08.08.08.27.39;	author downsj;	state Exp;
branches
	1.3.12.1
	1.3.22.1;
next	1.2;

1.2
date	96.08.11.05.35.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.48;	author deraadt;	state Exp;
branches;
next	;

1.3.12.1
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2003.06.07.11.14.44;	author ho;	state Exp;
branches;
next	1.3.12.4;

1.3.12.4
date	2004.06.05.23.10.59;	author niklas;	state Exp;
branches;
next	;

1.3.22.1
date	2002.06.11.03.38.17;	author art;	state Exp;
branches;
next	;

1.5.6.1
date	2004.03.03.00.19.42;	author brad;	state Exp;
branches;
next	;

1.6.2.1
date	2004.03.03.00.18.09;	author brad;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: process_machdep.c,v 1.13 2009/03/05 19:52:23 kettenis Exp $	*/
/*	$NetBSD: process_machdep.c,v 1.6 1996/03/14 21:09:26 christos Exp $ */

/*
 * Copyright (c) 1993 The Regents of the University of California.
 * Copyright (c) 1993 Jan-Simon Pendry
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Id: procfs_i386.c,v 4.1 1993/12/17 10:47:45 jsp Rel
 */

/*
 * This file may seem a bit stylized, but that so that it's easier to port.
 * Functions to be implemented here are:
 *
 * process_read_regs(proc, regs)
 *	Get the current user-visible register set from the process
 *	and copy it into the regs structure (<machine/reg.h>).
 *	The process is stopped at the time read_regs is called.
 *
 * process_write_regs(proc, regs)
 *	Update the current register set from the passed in regs
 *	structure.  Take care to avoid clobbering special CPU
 *	registers or privileged bits in the PSL.
 *	The process is stopped at the time write_regs is called.
 *
 * process_sstep(proc)
 *	Arrange for the process to trap after executing a single instruction.
 *
 * process_set_pc(proc)
 *	Set the process's program counter.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/vnode.h>
#include <machine/psl.h>
#include <machine/reg.h>
#include <machine/frame.h>
#include <sys/ptrace.h>

#include <sparc/sparc/cpuvar.h>

int
process_read_regs(p, regs)
	struct proc *p;
	struct reg *regs;
{
	/* NOTE: struct reg == struct trapframe */
	bcopy(p->p_md.md_tf, (caddr_t)regs, sizeof(struct reg));
	return (0);
}

int
process_read_fpregs(p, regs)
	struct proc	*p;
	struct fpreg	*regs;
{
	extern struct fpstate	initfpstate;
	struct fpstate		*statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate) {
		if (p == cpuinfo.fpproc)
			savefpstate(p->p_md.md_fpstate);
		statep = p->p_md.md_fpstate;
	}
	bcopy(statep, regs, sizeof(struct fpreg));
	return 0;
}

#ifdef PTRACE

int
process_write_regs(p, regs)
	struct proc *p;
	struct reg *regs;
{
	int	psr = p->p_md.md_tf->tf_psr & ~PSR_ICC;

	if (((regs->r_pc | regs->r_npc) & 0x03) != 0)
		return (EINVAL);

	bcopy((caddr_t)regs, p->p_md.md_tf, sizeof(struct reg));
	p->p_md.md_tf->tf_psr = psr | (regs->r_psr & PSR_ICC);
	return (0);
}

int
process_sstep(p, sstep)
	struct proc *p;
	int sstep;
{
	if (sstep)
		return EINVAL;
	return (0);
}

int
process_set_pc(p, addr)
	struct proc *p;
	caddr_t addr;
{
	if (((u_int)addr & 0x03) != 0)
		return (EINVAL);

	p->p_md.md_tf->tf_pc = (u_int)addr;
	p->p_md.md_tf->tf_npc = (u_int)addr + 4;
	return (0);
}

int
process_write_fpregs(p, regs)
	struct proc	*p;
	struct fpreg	*regs;
{
	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate == NULL) {
		p->p_md.md_fpstate = malloc(sizeof(struct fpstate),
		    M_SUBPROC, M_WAITOK);
	}

	if (p == cpuinfo.fpproc) {
		/* Release the fpu. */
		savefpstate(p->p_md.md_fpstate);
		cpuinfo.fpproc = NULL;
	}

	bcopy(regs, p->p_md.md_fpstate, sizeof(struct fpreg));
	return 0;
}

#endif	/* PTRACE */

register_t
process_get_wcookie(p)
	struct proc *p;
{
	return p->p_addr->u_pcb.pcb_wcookie;
}
@


1.13
log
@Make ELF platforms generate ELF core dumps.  Somewhat based on code from
NetBSD.

ok kurt@@, drahn@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.12 2005/12/30 00:18:30 kettenis Exp $	*/
@


1.12
log
@Make PT_SETFPREGS work even if the process didn't use the fpu yet.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.11 2005/12/17 03:54:30 deraadt Exp $	*/
d165 2
a172 2

#endif	/* PTRACE */
@


1.11
log
@unfortunately with PROCFS, that is not true yet
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2005/12/16 18:48:27 kettenis Exp $	*/
d65 1
d149 5
a153 2
	if (p->p_md.md_fpstate == NULL)
		return EINVAL;
@


1.10
log
@Compile out process_sstep() as we don't define PT_STEP, thus nothing uses
these functions. ok kettenis@@
@
text
@a119 1
#ifdef PT_STEP
a128 1
#endif
@


1.9
log
@Flush fpu state before reading/modifying the state in the pcb.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.8 2004/03/02 23:45:27 miod Exp $	*/
d120 1
d130 1
@


1.8
log
@In process_set_pc() and process_set_regs(), disallow unaligned pc and npc
values. Workaround against PR #3663.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 2004/02/08 00:04:21 deraadt Exp $	*/
d73 2
d94 3
a96 1
	if (p->p_md.md_fpstate)
d98 1
d150 6
@


1.7
log
@restored & repaired wcookie support; kettenis@@chello.nl
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.6 2003/06/02 23:27:55 millert Exp $	*/
d106 4
d130 3
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 2002/03/14 00:42:24 miod Exp $	*/
d141 7
@


1.6.2.1
log
@MFC:
Fix by miod@@

In process_set_pc() and process_set_regs(), disallow unaligned pc and npc
values. Workaround against PR #3663.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.6 2003/06/02 23:27:55 millert Exp $	*/
a105 4

	if (((regs->r_pc | regs->r_npc) & 0x03) != 0)
		return (EINVAL);

a125 3
	if (((u_int)addr & 0x03) != 0)
		return (EINVAL);

@


1.5
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.4 2002/02/20 22:28:23 deraadt Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5.6.1
log
@MFC:
Fix by miod@@

In process_set_pc() and process_set_regs(), disallow unaligned pc and npc
values. Workaround against PR #3663.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 2002/03/14 00:42:24 miod Exp $	*/
a109 4

	if (((regs->r_pc | regs->r_npc) & 0x03) != 0)
		return (EINVAL);

a129 3
	if (((u_int)addr & 0x03) != 0)
		return (EINVAL);

@


1.4
log
@frantzen's stackghost code.  wcookie is set at 0 right now, until debugger
support added (i mean, written)
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.3 1997/08/08 08:27:39 downsj Exp $	*/
a76 2
u_int32_t process_get_wcookie(struct proc *p);

d88 17
a135 15
process_read_fpregs(p, regs)
struct proc	*p;
struct fpreg	*regs;
{
	extern struct fpstate	initfpstate;
	struct fpstate		*statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
	return 0;
}

int
d137 2
a138 2
struct proc	*p;
struct fpreg	*regs;
d147 1
a147 6
u_int32_t
process_get_wcookie(p)
	struct proc *p;
{
	return p->p_addr->u_pcb.pcb_wcookie;
}
@


1.3
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d77 2
d145 7
@


1.3.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.3 1997/08/08 08:27:39 downsj Exp $	*/
a87 17
process_read_fpregs(p, regs)
	struct proc	*p;
	struct fpreg	*regs;
{
	extern struct fpstate	initfpstate;
	struct fpstate		*statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
	return 0;
}

#ifdef PTRACE

int
d119 15
d135 2
a136 2
	struct proc	*p;
	struct fpreg	*regs;
a143 2

#endif	/* PTRACE */
@


1.3.12.1
log
@Merge in trunk
@
text
@a76 2
u_int32_t process_get_wcookie(struct proc *p);

a142 7
}

u_int32_t
process_get_wcookie(p)
	struct proc *p;
{
	return p->p_addr->u_pcb.pcb_wcookie;
@


1.3.12.2
log
@Merge in -current from about a week ago
@
text
@d77 2
a89 17
process_read_fpregs(p, regs)
	struct proc	*p;
	struct fpreg	*regs;
{
	extern struct fpstate	initfpstate;
	struct fpstate		*statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
	return 0;
}

#ifdef PTRACE

int
d121 15
d137 2
a138 2
	struct proc	*p;
	struct fpreg	*regs;
d147 6
a152 1
#endif	/* PTRACE */
@


1.3.12.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.3.12.2 2002/03/28 10:57:11 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.12.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a105 4

	if (((regs->r_pc | regs->r_npc) & 0x03) != 0)
		return (EINVAL);

a125 3
	if (((u_int)addr & 0x03) != 0)
		return (EINVAL);

a140 7
}

register_t
process_get_wcookie(p)
	struct proc *p;
{
	return p->p_addr->u_pcb.pcb_wcookie;
@


1.2
log
@netbsd port, now we merge our changes back in
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: process_machdep.c,v 1.5 1994/11/20 20:54:37 deraadt Exp $ */
d100 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
