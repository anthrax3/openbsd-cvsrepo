head	1.18;
access;
symbols
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.18
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.20
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.10
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.8
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.6
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.11
	UBC:1.9.0.22
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.20
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.18
	OPENBSD_2_8:1.9.0.16
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.14
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.12
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2011.07.04.23.01.33;	author tedu;	state dead;
branches;
next	1.17;

1.17
date	2011.04.18.21.44.55;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.16.19.09.41;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.15.04.52.40;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2005.03.21.22.34.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.09.22.27.10;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.20.19.24.57;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.44;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.08.08.08.27.42;	author downsj;	state Exp;
branches
	1.9.12.1
	1.9.22.1;
next	1.8;

1.8
date	97.04.01.20.14.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.02.01.23.05.08;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.27.22.48.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.01.27.01.21.22;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.11.05.35.24;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.09.09.24.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.05.16.18.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.48;	author deraadt;	state Exp;
branches;
next	;

1.9.12.1
date	2002.03.28.10.57.11;	author niklas;	state Exp;
branches;
next	1.9.12.2;

1.9.12.2
date	2003.03.27.23.49.26;	author niklas;	state Exp;
branches;
next	;

1.9.22.1
date	2002.06.11.03.38.17;	author art;	state Exp;
branches;
next	1.9.22.2;

1.9.22.2
date	2002.10.29.00.28.11;	author art;	state Exp;
branches;
next	1.9.22.3;

1.9.22.3
date	2003.05.19.21.46.33;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove all the compat svr4 files
@
text
@/*	$OpenBSD: svr4_machdep.c,v 1.17 2011/04/18 21:44:55 guenther Exp $	*/
/*	$NetBSD: svr4_machdep.c,v 1.24 1997/07/29 10:04:45 fair Exp $	 */

/*
 * Copyright (c) 1994 Christos Zoulas
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/namei.h>
#include <sys/proc.h>
#include <sys/filedesc.h>
#include <sys/ioctl.h>
#include <sys/mount.h>
#include <sys/kernel.h>
#include <sys/signal.h>
#include <sys/signalvar.h>
#include <sys/malloc.h>
#include <sys/buf.h>
#include <sys/exec.h>

#include <sys/syscallargs.h>
#include <compat/svr4/svr4_types.h>
#include <compat/svr4/svr4_ucontext.h>
#include <compat/svr4/svr4_syscallargs.h>
#include <compat/svr4/svr4_util.h>

#include <machine/cpu.h>
#include <machine/psl.h>
#include <machine/reg.h>
#include <machine/trap.h>
#include <machine/svr4_machdep.h>

static void svr4_getsiginfo(union svr4_siginfo *, int, u_long, int, caddr_t);

#ifdef DEBUG
extern int sigdebug;
extern int sigpid;
#define SDB_FOLLOW	0x01	/* XXX: dup from machdep.c */
#define SDB_KSTACK	0x02
#define SDB_FPSTATE	0x04
#endif

#ifdef DEBUG_SVR4
static void svr4_printcontext(const char *, struct svr4_ucontext *);

static void
svr4_printcontext(fun, uc)
	const char *fun;
	struct svr4_ucontext *uc;
{
	svr4_greg_t *r = uc->uc_mcontext.greg;
	struct svr4_sigaltstack *s = &uc->uc_stack;

	printf("%s at %p\n", fun, uc);

	printf("Regs: ");
	printf("PSR = 0x%x ", r[SVR4_SPARC_PSR]);
	printf("PC = 0x%x ",  r[SVR4_SPARC_PC]);
	printf("nPC = 0x%x ", r[SVR4_SPARC_nPC]);
	printf("Y = 0x%x ",   r[SVR4_SPARC_Y]);
	printf("G1 = 0x%x ",  r[SVR4_SPARC_G1]);
	printf("G2 = 0x%x ",  r[SVR4_SPARC_G2]);
	printf("G3 = 0x%x ",  r[SVR4_SPARC_G3]);
	printf("G4 = 0x%x ",  r[SVR4_SPARC_G4]);
	printf("G5 = 0x%x ",  r[SVR4_SPARC_G5]);
	printf("G6 = 0x%x ",  r[SVR4_SPARC_G6]);
	printf("G7 = 0x%x ",  r[SVR4_SPARC_G7]);
	printf("O0 = 0x%x ",  r[SVR4_SPARC_O0]);
	printf("O1 = 0x%x ",  r[SVR4_SPARC_O1]);
	printf("O2 = 0x%x ",  r[SVR4_SPARC_O2]);
	printf("O3 = 0x%x ",  r[SVR4_SPARC_O3]);
	printf("O4 = 0x%x ",  r[SVR4_SPARC_O4]);
	printf("O5 = 0x%x ",  r[SVR4_SPARC_O5]);
	printf("O6 = 0x%x ",  r[SVR4_SPARC_O6]);
	printf("O7 = 0x%x ",  r[SVR4_SPARC_O7]);
	printf("\n");

	printf("Signal Stack: sp %p, size %d, flags 0x%x\n",
	    s->ss_sp, s->ss_size, s->ss_flags);

	printf("Flags: 0x%lx\n", uc->uc_flags);
}
#endif

void
svr4_getcontext(p, uc, mask, oonstack)
	struct proc *p;
	struct svr4_ucontext *uc;
	int mask, oonstack;
{
	struct trapframe *tf = (struct trapframe *)p->p_md.md_tf;
	svr4_greg_t *r = uc->uc_mcontext.greg;
	struct svr4_sigaltstack *s = &uc->uc_stack;
#ifdef FPU_CONTEXT
	svr4_fregset_t *f = &uc->uc_mcontext.freg;
	struct fpstate *fps = p->p_md.md_fpstate;
#endif

	write_user_windows();
	if (rwindow_save(p))
		sigexit(p, SIGILL);

	bzero(uc, sizeof(struct svr4_ucontext));

	/*
	 * Get the general purpose registers
	 */
	r[SVR4_SPARC_PSR] = tf->tf_psr;
	r[SVR4_SPARC_PC] = tf->tf_pc;
	r[SVR4_SPARC_nPC] = tf->tf_npc;
	r[SVR4_SPARC_Y] = tf->tf_y;
	r[SVR4_SPARC_G1] = tf->tf_global[1];
	r[SVR4_SPARC_G2] = tf->tf_global[2];
	r[SVR4_SPARC_G3] = tf->tf_global[3];
	r[SVR4_SPARC_G4] = tf->tf_global[4];
	r[SVR4_SPARC_G5] = tf->tf_global[5];
	r[SVR4_SPARC_G6] = tf->tf_global[6];
	r[SVR4_SPARC_G7] = tf->tf_global[7];
	r[SVR4_SPARC_O0] = tf->tf_out[0];
	r[SVR4_SPARC_O1] = tf->tf_out[1];
	r[SVR4_SPARC_O2] = tf->tf_out[2];
	r[SVR4_SPARC_O3] = tf->tf_out[3];
	r[SVR4_SPARC_O4] = tf->tf_out[4];
	r[SVR4_SPARC_O5] = tf->tf_out[5];
	r[SVR4_SPARC_O6] = tf->tf_out[6];
	r[SVR4_SPARC_O7] = tf->tf_out[7];

#ifdef FPU_CONTEXT
	/*
	 * Get the floating point registers
	 */
	bcopy(fps->fs_regs, f->fpu_regs, sizeof(fps->fs_regs));
	f->fp_nqsize = sizeof(struct fp_qentry);
	f->fp_nqel = fps->fs_qsize;
	f->fp_fsr = fps->fs_fsr;
	if (f->fp_q != NULL) {
		size_t sz = f->fp_nqel * f->fp_nqsize;
		if (sz > sizeof(fps->fs_queue)) {
#ifdef DIAGNOSTIC
			printf("svr4_getcontext: fp_queue too large\n");
#endif
			return;
		}
		if (copyout(fps->fs_queue, f->fp_q, sz) != 0) {
#ifdef DIAGNOSTIC
			printf("svr4_getcontext: copy of fp_queue failed %d\n",
			    error);
#endif
			return;
		}
	}
	f->fp_busy = 0;	/* XXX: How do we determine that? */
#endif

	/*
	 * Set the signal stack to something reasonable
	 */
	/* XXX: Don't really know what to do with this */
	s->ss_sp = (char *) ((r[SVR4_SPARC_SP] & ~0xfff) - 8192);
	s->ss_size = 8192;
	s->ss_flags = 0;

	/*
	 * Get the signal mask
	 */
	bsd_to_svr4_sigset(&mask, &uc->uc_sigmask);

	/*
	 * Get the flags
	 */
	uc->uc_flags = SVR4_UC_CPU|SVR4_UC_SIGMASK|SVR4_UC_STACK;

#ifdef DEBUG_SVR4
	svr4_printcontext("getcontext", uc);
#endif
}


/*
 * Set to ucontext specified.
 * has been taken.  Reset signal mask and
 * stack state from context.
 * Return to previous pc and psl as specified by
 * context left by sendsig. Check carefully to
 * make sure that the user has not modified the
 * psl to gain improper privileges or to cause
 * a machine fault.
 * This is almost like sigreturn() and it shows.
 */
int
svr4_setcontext(p, uc)
	struct proc *p;
	struct svr4_ucontext *uc;
{
	struct sigacts *psp = p->p_sigacts;
	register struct trapframe *tf;
	svr4_greg_t *r = uc->uc_mcontext.greg;
	struct svr4_sigaltstack *s = &uc->uc_stack;
	struct sigaltstack *sf = &psp->ps_sigstk;
	int mask;
#ifdef FPU_CONTEXT
	svr4_fregset_t *f = &uc->uc_mcontext.freg;
	struct fpstate *fps = p->p_md.md_fpstate;
#endif

#ifdef DEBUG_SVR4
	svr4_printcontext("setcontext", uc);
#endif

	write_user_windows();
	if (rwindow_save(p))
		sigexit(p, SIGILL);

#ifdef DEBUG
	if (sigdebug & SDB_FOLLOW)
		printf("svr4_setcontext: %s[%d], svr4_ucontext %p\n",
		    p->p_comm, p->p_pid, uc);
#endif

	tf = (struct trapframe *)p->p_md.md_tf;

	/*
	 * Restore register context.
	 */
	if (uc->uc_flags & SVR4_UC_CPU) {
		/*
		 * Only the icc bits in the psr are used, so it need not be
		 * verified.  pc and npc must be multiples of 4.  This is all
		 * that is required; if it holds, just do it.
		 */
		if (((r[SVR4_SPARC_PC] | r[SVR4_SPARC_nPC]) & 3) != 0) {
#ifdef DEBUG_SVR4
			printf("svr4_setcontext: pc or npc are not multiples of 4!\n");
#endif
			return EINVAL;
		}

		/* take only psr ICC field */
		tf->tf_psr = (tf->tf_psr & ~PSR_ICC) |
		    (r[SVR4_SPARC_PSR] & PSR_ICC);
		tf->tf_pc = r[SVR4_SPARC_PC];
		tf->tf_npc = r[SVR4_SPARC_nPC];
		tf->tf_y = r[SVR4_SPARC_Y];

		/* Restore everything */
		tf->tf_global[1] = r[SVR4_SPARC_G1];
		tf->tf_global[2] = r[SVR4_SPARC_G2];
		tf->tf_global[3] = r[SVR4_SPARC_G3];
		tf->tf_global[4] = r[SVR4_SPARC_G4];
		tf->tf_global[5] = r[SVR4_SPARC_G5];
		tf->tf_global[6] = r[SVR4_SPARC_G6];
		tf->tf_global[7] = r[SVR4_SPARC_G7];

		tf->tf_out[0] = r[SVR4_SPARC_O0];
		tf->tf_out[1] = r[SVR4_SPARC_O1];
		tf->tf_out[2] = r[SVR4_SPARC_O2];
		tf->tf_out[3] = r[SVR4_SPARC_O3];
		tf->tf_out[4] = r[SVR4_SPARC_O4];
		tf->tf_out[5] = r[SVR4_SPARC_O5];
		tf->tf_out[6] = r[SVR4_SPARC_O6];
		tf->tf_out[7] = r[SVR4_SPARC_O7];
	}


#ifdef FPU_CONTEXT
	if (uc->uc_flags & SVR4_UC_FPU) {
		/*
		 * Set the floating point registers
		 */
		int error;
		size_t sz = f->fp_nqel * f->fp_nqsize;
		if (sz > sizeof(fps->fs_queue)) {
#ifdef DIAGNOSTIC
			printf("svr4_setcontext: fp_queue too large\n");
#endif
			return EINVAL;
		}
		bcopy(f->fpu_regs, fps->fs_regs, sizeof(fps->fs_regs));
		fps->fs_qsize = f->fp_nqel;
		fps->fs_fsr = f->fp_fsr;
		if (f->fp_q != NULL) {
			size_t sz = f->fp_nqel * f->fp_nqsize;
			if (sz > sizeof(fps->fs_queue)) {
#ifdef DIAGNOSTIC
				printf("svr4_setcontext: fp_queue too large\n");
#endif
				return (EINVAL);
			}
			if ((error = copyin(f->fp_q, fps->fs_queue, sz)) != 0) {
#ifdef DIAGNOSTIC
				printf("svr4_setcontext: copy of fp_queue failed\n");
#endif
				return error;
			}
		}
	}
#endif

	if (uc->uc_flags & SVR4_UC_STACK) {
		/*
		 * restore signal stack
		 */
		svr4_to_bsd_sigaltstack(s, sf);
	}

	if (uc->uc_flags & SVR4_UC_SIGMASK) {
		/*
		 * restore signal mask
		 */
		svr4_to_bsd_sigset(&uc->uc_sigmask, &mask);
		p->p_sigmask = mask & ~sigcantmask;
	}

	return EJUSTRETURN;
}

/*
 * map the native sig/type code into the svr4 siginfo as best we can
 */
static void
svr4_getsiginfo(si, sig, code, type, addr)
	union svr4_siginfo	*si;
	int			 sig;
	u_long			 code;
	int			 type;
	caddr_t			 addr;
{
	si->svr4_si_signo = bsd_to_svr4_sig[sig];
	si->svr4_si_errno = 0;
	si->svr4_si_addr  = addr;
	/*
	 * we can do this direct map as they are the same as all sparc
	 * architectures.
	 */
	si->svr4_si_trap = code;

	si->svr4_si_code = 0;
	si->svr4_si_trap = 0;

	switch (sig) {
	case SIGSEGV:
		switch (type) {
		case SEGV_ACCERR:
			si->svr4_si_code = SVR4_SEGV_ACCERR;
			si->svr4_si_trap = SVR4_T_PROTFLT;
			break;
		case SEGV_MAPERR:
			si->svr4_si_code = SVR4_SEGV_MAPERR;
			si->svr4_si_trap = SVR4_T_SEGNPFLT;
			break;
		}
		break;
	case SIGBUS:
		switch (type) {
		case BUS_ADRALN:
			si->svr4_si_code = SVR4_BUS_ADRALN;
			si->svr4_si_trap = SVR4_T_ALIGNFLT;
			break;
		}
		break;
	case SIGTRAP:
		switch (type) {
		case TRAP_BRKPT:
			si->svr4_si_code = SVR4_TRAP_BRKPT;
			si->svr4_si_trap = SVR4_T_BPTFLT;
			break;
		case TRAP_TRACE:
			si->svr4_si_code = SVR4_TRAP_TRACE;
			si->svr4_si_trap = SVR4_T_TRCTRAP;
			break;
		}
		break;
	case SIGEMT:
		switch (type) {
		}
		break;
	case SIGILL:
		switch (type) {
		case ILL_PRVOPC:
			si->svr4_si_code = SVR4_ILL_PRVOPC;
			si->svr4_si_trap = SVR4_T_PRIVINFLT;
			break;
		case ILL_BADSTK:
			si->svr4_si_code = SVR4_ILL_BADSTK;
			si->svr4_si_trap = SVR4_T_STKFLT;
			break;
		}
		break;
	case SIGFPE:
		switch (type) {
		case FPE_INTOVF:
			si->svr4_si_code = SVR4_FPE_INTOVF;
			si->svr4_si_trap = SVR4_T_DIVIDE;
			break;
		case FPE_FLTDIV:
			si->svr4_si_code = SVR4_FPE_FLTDIV;
			si->svr4_si_trap = SVR4_T_DIVIDE;
			break;
		case FPE_FLTOVF:
			si->svr4_si_code = SVR4_FPE_FLTOVF;
			si->svr4_si_trap = SVR4_T_DIVIDE;
			break;
		case FPE_FLTSUB:
			si->svr4_si_code = SVR4_FPE_FLTSUB;
			si->svr4_si_trap = SVR4_T_BOUND;
			break;
		case FPE_FLTINV:
			si->svr4_si_code = SVR4_FPE_FLTINV;
			si->svr4_si_trap = SVR4_T_FPOPFLT;
			break;
		}
		break;
	}
}

/*
 * Send an interrupt to process.
 *
 * Stack is set up to allow sigcode stored
 * in u. to call routine. After the handler is
 * done svr4 will call setcontext for us
 * with the user context we just set up, and we
 * will return to the user pc, psl.
 */
void
svr4_sendsig(catcher, sig, mask, code, type, val)
	sig_t catcher;
	int sig, mask;
	u_long code;
	int type;
	union sigval val;
{
	register struct proc *p = curproc;
	register struct trapframe *tf;
	struct svr4_sigframe *fp, frame;
	struct sigacts *psp = p->p_sigacts;
	int oonstack, oldsp, newsp, caddr;

	tf = (struct trapframe *)p->p_md.md_tf;
	oldsp = tf->tf_out[6];
	oonstack = psp->ps_sigstk.ss_flags & SS_ONSTACK;

	/*
	 * Allocate space for the signal handler context.
	 */
	if ((psp->ps_flags & SAS_ALTSTACK) && !oonstack &&
	    (psp->ps_sigonstack & sigmask(sig))) {
		fp = (struct svr4_sigframe *)(psp->ps_sigstk.ss_sp +
					      psp->ps_sigstk.ss_size);
		psp->ps_sigstk.ss_flags |= SS_ONSTACK;
	} else {
		fp = (struct svr4_sigframe *)oldsp;
	}

	/*
	 * Subtract off one signal frame and align.
	 */
	fp = (struct svr4_sigframe *) ((int) (fp - 1) & ~7);

	/*
	 * Build the argument list for the signal handler.
	 */
	svr4_getsiginfo(&frame.sf_si, sig, code, type, val.sival_ptr);
	svr4_getcontext(p, &frame.sf_uc, mask, oonstack);
	frame.sf_signum = frame.sf_si.svr4_si_signo;
	frame.sf_sip = &fp->sf_si;
	frame.sf_ucp = &fp->sf_uc;
	frame.sf_handler = catcher;

	DPRINTF(("svr4_sendsig signum=%d si = %x uc = %x handler = %x\n",
	         frame.sf_signum, frame.sf_sip,
		 frame.sf_ucp, frame.sf_handler));
	/*
	 * Modify the signal context to be used by sigreturn.
	 */
	frame.sf_uc.uc_mcontext.greg[SVR4_SPARC_SP] = oldsp;

	newsp = (int)fp - sizeof(struct rwindow);
	write_user_windows();

	if (rwindow_save(p) || copyout(&frame, fp, sizeof(frame)) != 0 ||
	    copyout(&oldsp, &((struct rwindow *)newsp)->rw_in[6],
	      sizeof(register_t)) != 0) {
		/*
		 * Process has trashed its stack; give it an illegal
		 * instruction to halt it in its tracks.
		 */
#ifdef DEBUG
		if ((sigdebug & SDB_KSTACK) && p->p_pid == sigpid)
			printf("svr4_sendsig: window save or copyout error\n");
#endif
		sigexit(p, SIGILL);
		/* NOTREACHED */
	}

	/*
	 * Build context to run handler in.
	 */
	caddr = p->p_sigcode;
	tf->tf_global[1] = (int)catcher;

	tf->tf_pc = caddr;
	tf->tf_npc = caddr + 4;
	tf->tf_out[6] = newsp;
}


#define	ADVANCE (n = tf->tf_npc, tf->tf_pc = n, tf->tf_npc = n + 4)
int
svr4_trap(type, p)
	int	type;
	struct proc *p;
{
	int n;
	struct trapframe *tf = p->p_md.md_tf;
	extern struct emul emul_svr4;

	if (p->p_emul != &emul_svr4)
		return 0;

	switch (type) {
	case T_SVR4_GETCC:
		uprintf("T_SVR4_GETCC\n");
		break;

	case T_SVR4_SETCC:
		uprintf("T_SVR4_SETCC\n");
		break;

	case T_SVR4_GETPSR:
		tf->tf_out[0] = tf->tf_psr;
		break;

	case T_SVR4_SETPSR:
		uprintf("T_SVR4_SETPSR\n");
		break;

	case T_SVR4_GETHRTIME:
		/*
		 * this list like gethrtime(3). To implement this
		 * correctly we need a timer that does not get affected
		 * adjtime(), or settimeofday(). For now we use
		 * microtime, and convert to nanoseconds...
		 */
		/*FALLTHROUGH*/
	case T_SVR4_GETHRVTIME:
		/*
		 * This is like gethrvtime(3). Since we don't have lwp
		 * we massage microtime() output
		 */
		{
			struct timeval  tv;

			microtime(&tv);
			tf->tf_out[0] = tv.tv_sec;
			tf->tf_out[1] = tv.tv_usec * 1000;
		}
		break;

	case T_SVR4_GETHRESTIME:
		{
			/* I assume this is like gettimeofday(3) */
			struct timeval  tv;

			microtime(&tv);
			tf->tf_out[0] = tv.tv_sec;
			tf->tf_out[1] = tv.tv_usec;
		}
		break;

	default:
		return 0;
	}

	ADVANCE;
	return 1;
}

/*
 */
int
svr4_sys_sysarch(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct svr4_sys_sysarch_args *uap = v;

	switch (SCARG(uap, op)) {
	default:
		printf("(sparc) svr4_sysarch(%d)\n", SCARG(uap, op));
		return EINVAL;
	}
}
@


1.17
log
@Revert the sigacts diff: NFS can apparently retain pointers to processes
until they're zombies and then send them signals (for intr mounts).  Until
that is untangled, the sigacts change is unsafe.  sthen@@ was the victim
for this one
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.14 2010/06/26 23:24:44 guenther Exp $	*/
@


1.16
log
@Fix kernel build after guenther@@'s signal changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.15 2011/04/15 04:52:40 guenther Exp $	*/
d219 1
d223 1
a223 1
	struct sigaltstack *sf = &p->p_sigstk;
d465 1
a465 1
	oonstack = p->p_sigstk.ss_flags & SS_ONSTACK;
d470 1
a470 1
	if ((p->p_sigstk.ss_flags & SS_DISABLE) == 0 && !oonstack &&
d472 3
a474 3
		fp = (struct svr4_sigframe *)(p->p_sigstk.ss_sp +
					      p->p_sigstk.ss_size);
		p->p_sigstk.ss_flags |= SS_ONSTACK;
@


1.15
log
@Correct the sharing of the signal handling state: stuff that should
be shared (p_sigignore, p_sigcatch, P_NOCLDSTOP, P_NOCLDWAIT) moves
to struct sigacts, wihle stuff that should be per rthread (ps_oldmask,
SAS_OLDMASK, ps_sigstk) moves to struct proc.  Treat the coredumping
state bits (ps_sig, ps_code, ps_type, ps_sigval) as per-rthread
until our locking around coredumping is better.

Oh, and remove the old SunOS-compat ps_usertramp member.

"I like the sound of this" tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.14 2010/06/26 23:24:44 guenther Exp $	*/
a218 1
	struct sigacts *psp = p->p_sigacts;
@


1.14
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.13 2005/03/21 22:34:33 miod Exp $	*/
d223 1
a223 1
	struct sigaltstack *sf = &psp->ps_sigstk;
d465 1
a465 1
	oonstack = psp->ps_sigstk.ss_flags & SS_ONSTACK;
d470 1
a470 1
	if ((psp->ps_flags & SAS_ALTSTACK) && !oonstack &&
d472 3
a474 3
		fp = (struct svr4_sigframe *)(psp->ps_sigstk.ss_sp +
					      psp->ps_sigstk.ss_size);
		psp->ps_sigstk.ss_flags |= SS_ONSTACK;
@


1.13
log
@Do not print anything on console for can't happen situations unless option
DEBUG_SVR4.
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.12 2003/01/09 22:27:10 miod Exp $	*/
a34 1
#include <sys/user.h>
@


1.12
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.11 2002/07/20 19:24:57 art Exp $	*/
d165 1
a165 1
			printf("getcontext: fp_queue too large\n");
d171 1
a171 1
			printf("getcontext: copy of fp_queue failed %d\n",
d257 3
a259 1
			printf("pc or npc are not multiples of 4!\n");
d299 1
a299 1
			printf("setcontext: fp_queue too large\n");
d307 8
a314 2
			if ((error = copyin(f->fp_q, fps->fs_queue,
					    f->fp_nqel * f->fp_nqsize)) != 0) {
d316 1
a316 1
				printf("setcontext: copy of fp_queue failed\n");
@


1.11
log
@Instead of copying out the signal trampoline on top of the stack, create
an uvm aobj, copy out the signal trampoline into it and share that page
among all processes for the same emulation.

This also requires us to actually be able to tell signal code where the
trampoline is located, so introduce a new field in struct proc - p_sigcode
that is a pointer to sigcode. This allows us to remove all the ugly
calculations of the signal trampoline address done in every sendsig
function in the tree (that's why so many files are changed).

Tested by various people. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.10 2002/03/14 01:26:44 millert Exp $	*/
d499 2
a500 1
	    suword(&((struct rwindow *)newsp)->rw_in[6], oldsp)) {
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.9 1997/08/08 08:27:42 downsj Exp $	*/
a454 2
	extern char svr4_sigcode[], svr4_esigcode[];

d515 1
a515 1
	caddr = (int)PS_STRINGS - (svr4_esigcode - svr4_sigcode);
@


1.9
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
a58 1
static void svr4_getsiginfo __P((union svr4_siginfo *, int, u_long, int, caddr_t));
d69 1
a69 1
static void svr4_printcontext __P((const char *, struct svr4_ucontext *));
@


1.9.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.9 1997/08/08 08:27:42 downsj Exp $	*/
d58 1
a58 1
static void svr4_getsiginfo(union svr4_siginfo *, int, u_long, int, caddr_t);
d69 1
a69 1
static void svr4_printcontext(const char *, struct svr4_ucontext *);
@


1.9.22.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_machdep.c,v 1.9.22.1 2002/06/11 03:38:17 art Exp $	*/
d455 2
d517 1
a517 1
	caddr = p->p_sigcode;
@


1.9.22.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d499 1
a499 2
	    copyout(&oldsp, &((struct rwindow *)newsp)->rw_in[6],
	      sizeof(register_t)) != 0) {
@


1.9.12.1
log
@Merge in -current from about a week ago
@
text
@d58 1
a58 1
static void svr4_getsiginfo(union svr4_siginfo *, int, u_long, int, caddr_t);
d69 1
a69 1
static void svr4_printcontext(const char *, struct svr4_ucontext *);
@


1.9.12.2
log
@Sync the SMP branch with 3.3
@
text
@d455 2
d501 1
a501 2
	    copyout(&oldsp, &((struct rwindow *)newsp)->rw_in[6],
	      sizeof(register_t)) != 0) {
d517 1
a517 1
	caddr = p->p_sigcode;
@


1.8
log
@svr4 siginfo; I cannot test this
@
text
@d1 2
a2 1
/*	$NetBSD: svr4_machdep.c,v 1.17.4.1 1996/06/11 01:46:42 jtc Exp $	 */
d44 1
d82 19
a100 19
	printf("PSR = %x ", r[SVR4_SPARC_PSR]);
	printf("PC = %x ",  r[SVR4_SPARC_PC]);
	printf("nPC = %x ", r[SVR4_SPARC_nPC]);
	printf("Y = %x ",   r[SVR4_SPARC_Y]);
	printf("G1 = %x ",  r[SVR4_SPARC_G1]);
	printf("G2 = %x ",  r[SVR4_SPARC_G2]);
	printf("G3 = %x ",  r[SVR4_SPARC_G3]);
	printf("G4 = %x ",  r[SVR4_SPARC_G4]);
	printf("G5 = %x ",  r[SVR4_SPARC_G5]);
	printf("G6 = %x ",  r[SVR4_SPARC_G6]);
	printf("G7 = %x ",  r[SVR4_SPARC_G7]);
	printf("O0 = %x ",  r[SVR4_SPARC_O0]);
	printf("O1 = %x ",  r[SVR4_SPARC_O1]);
	printf("O2 = %x ",  r[SVR4_SPARC_O2]);
	printf("O3 = %x ",  r[SVR4_SPARC_O3]);
	printf("O4 = %x ",  r[SVR4_SPARC_O4]);
	printf("O5 = %x ",  r[SVR4_SPARC_O5]);
	printf("O6 = %x ",  r[SVR4_SPARC_O6]);
	printf("O7 = %x ",  r[SVR4_SPARC_O7]);
d103 2
a104 2
	printf("Signal Stack: sp %p, size %d, flags %x\n",
	       s->ss_sp, s->ss_size, s->ss_flags);
d106 1
a106 1
	printf("Flags: %lx\n", uc->uc_flags);
d172 1
a172 1
			       error);
@


1.7
log
@trapsignal/sendsig type/sigval changes
@
text
@d56 1
a56 1
static void svr4_getsiginfo __P((union svr4_siginfo *, int, u_long, caddr_t));
d333 1
a333 1
 * map the trap code into the svr4 siginfo as best we can
d336 1
a336 1
svr4_getsiginfo(si, sig, code, addr)
d340 1
d352 2
a353 4
	switch (code) {
	case T_RESET:
		si->svr4_si_code = 0;
		break;
d355 12
a366 2
	case T_TEXTFAULT:
		si->svr4_si_code = SVR4_BUS_ADRALN;
d368 7
a374 3

	case T_ILLINST:
		si->svr4_si_code = SVR4_ILL_ILLOPC;
d376 11
a386 3

	case T_PRIVINST:
		si->svr4_si_code = SVR4_ILL_PRVOPC;
d388 3
a390 3

	case T_FPDISABLED:
		si->svr4_si_code = SVR4_FPE_FLTINV;
d392 11
a402 3

	case T_ALIGN:
		si->svr4_si_code = SVR4_BUS_ADRALN;
d404 23
a426 76

	case T_FPE:
		si->svr4_si_code = SVR4_FPE_FLTINV;
		break;

	case T_DATAFAULT:
		si->svr4_si_code = SVR4_BUS_ADRALN;
		break;

	case T_TAGOF:
		si->svr4_si_code = SVR4_EMT_TAGOVF;
		break;

	case T_CPDISABLED:
		si->svr4_si_code = SVR4_FPE_FLTINV;
		break;

	case T_CPEXCEPTION:
		si->svr4_si_code = SVR4_FPE_FLTINV;
		break;

	case T_DIV0:
		si->svr4_si_code = SVR4_FPE_INTDIV;
		break;

	case T_INTOF:
		si->svr4_si_code = SVR4_FPE_INTOVF;
		break;

	case T_BREAKPOINT:
		si->svr4_si_code = SVR4_TRAP_BRKPT;
		break;

	/*
	 * XXX - hardware traps with unknown code
	 */
	case T_WINOF:
	case T_WINUF:
	case T_L1INT:
	case T_L2INT:
	case T_L3INT:
	case T_L4INT:
	case T_L5INT:
	case T_L6INT:
	case T_L7INT:
	case T_L8INT:
	case T_L9INT:
	case T_L10INT:
	case T_L11INT:
	case T_L12INT:
	case T_L13INT:
	case T_L14INT:
	case T_L15INT:
		si->svr4_si_code = 0;
		break;

	/*
	 * XXX - software traps with unknown code
	 */
	case T_SUN_SYSCALL:
	case T_FLUSHWIN:
	case T_CLEANWIN:
	case T_RANGECHECK:
	case T_FIXALIGN:
	case T_SVR4_SYSCALL:
	case T_BSD_SYSCALL:
	case T_KGDB_EXEC:
		si->svr4_si_code = 0;
		break;

	default:
		si->svr4_si_code = 0;
#ifdef DIAGNOSTIC
		printf("sig %d code %ld\n", sig, code);
		panic("svr4_getsiginfo");
#endif
d480 1
a480 1
	svr4_getsiginfo(&frame.sf_si, sig, code, val.sival_ptr);
@


1.6
log
@add another parameter to trapsignal() and sendsig() -- fault addr to be
delivered with in the siginfo information
@
text
@d465 1
a465 1
svr4_sendsig(catcher, sig, mask, code, addr)
d469 2
a470 1
	caddr_t addr;
d504 1
a504 1
	svr4_getsiginfo(&frame.sf_si, sig, code, addr);
@


1.5
log
@match svr4 siginfo changes
@
text
@d465 1
a465 1
svr4_sendsig(catcher, sig, mask, code)
d469 1
d475 1
a475 1
	int oonstack, oldsp, newsp, addr;
d503 1
a503 1
	svr4_getsiginfo(&frame.sf_si, sig, code, (caddr_t) tf->tf_pc);
d538 1
a538 1
	addr = (int)PS_STRINGS - (svr4_esigcode - svr4_sigcode);
d541 2
a542 2
	tf->tf_pc = addr;
	tf->tf_npc = addr + 4;
@


1.4
log
@netbsd port, now we merge our changes back in
@
text
@d342 3
a344 3
	si->si_signo = bsd_to_svr4_sig[sig];
	si->si_errno = 0;
	si->si_addr  = addr;
d349 1
a349 1
	si->si_trap = code;
d353 1
a353 1
		si->si_code = 0;
d357 1
a357 1
		si->si_code = SVR4_BUS_ADRALN;
d361 1
a361 1
		si->si_code = SVR4_ILL_ILLOPC;
d365 1
a365 1
		si->si_code = SVR4_ILL_PRVOPC;
d369 1
a369 1
		si->si_code = SVR4_FPE_FLTINV;
d373 1
a373 1
		si->si_code = SVR4_BUS_ADRALN;
d377 1
a377 1
		si->si_code = SVR4_FPE_FLTINV;
d381 1
a381 1
		si->si_code = SVR4_BUS_ADRALN;
d385 1
a385 1
		si->si_code = SVR4_EMT_TAGOVF;
d389 1
a389 1
		si->si_code = SVR4_FPE_FLTINV;
d393 1
a393 1
		si->si_code = SVR4_FPE_FLTINV;
d397 1
a397 1
		si->si_code = SVR4_FPE_INTDIV;
d401 1
a401 1
		si->si_code = SVR4_FPE_INTOVF;
d405 1
a405 1
		si->si_code = SVR4_TRAP_BRKPT;
d428 1
a428 1
		si->si_code = 0;
d442 1
a442 1
		si->si_code = 0;
d446 1
a446 1
		si->si_code = 0;
d504 1
a504 1
	frame.sf_signum = frame.sf_si.si_signo;
@


1.3
log
@from netbsd; Fix setcontext call and sendsig
@
text
@d1 1
a1 1
/*	$NetBSD: svr4_machdep.c,v 1.13 1996/01/07 19:47:27 christos Exp $	 */
d77 1
a77 1
	printf("%s at %x\n", fun, uc);
d101 1
a101 1
	printf("Signal Stack: sp %x, size %d, flags %x\n",
d104 1
a104 3
	printf("Signal mask: %x\n", uc->uc_sigmask);

	printf("Flags: %x\n", uc->uc_flags);
a114 1
	struct sigacts *psp = p->p_sigacts;
d117 8
a124 1
	struct sigaltstack *sf = &psp->ps_sigstk;
d129 1
a129 1
	 * Set the general purpose registers
d151 1
d153 1
a153 1
	 * Set the signal stack
d155 22
a176 1
	bsd_to_svr4_sigaltstack(sf, s);
d179 9
a187 1
	 * Set the signal mask
d192 1
a192 1
	 * Set the flags
d194 1
a194 1
	uc->uc_flags = SVR4_UC_ALL;
a217 1
	struct sigcontext *scp, context;
d224 4
a231 4
	/*
	 * XXX:
	 * Should we check the value of flags to determine what to restore?
	 */
d239 1
a239 1
		printf("svr4_setcontext: %s[%d], svr4_ucontext %x\n",
d248 63
a310 8
	/*
	 * Only the icc bits in the psr are used, so it need not be
	 * verified.  pc and npc must be multiples of 4.  This is all
	 * that is required; if it holds, just do it.
	 */
	if (((r[SVR4_SPARC_PC] | r[SVR4_SPARC_nPC]) & 3) != 0) {
		printf("pc or npc are not multiples of 4!\n");
		return EINVAL;
d312 1
d314 6
a319 28
	/* take only psr ICC field */
	tf->tf_psr = (tf->tf_psr & ~PSR_ICC) | (r[SVR4_SPARC_PSR] & PSR_ICC);
	tf->tf_pc = r[SVR4_SPARC_PC];
	tf->tf_npc = r[SVR4_SPARC_nPC];
	tf->tf_y = r[SVR4_SPARC_Y];

	/* Restore everything */
	tf->tf_global[1] = r[SVR4_SPARC_G1];
	tf->tf_global[2] = r[SVR4_SPARC_G2];
	tf->tf_global[3] = r[SVR4_SPARC_G3];
	tf->tf_global[4] = r[SVR4_SPARC_G4];
	tf->tf_global[5] = r[SVR4_SPARC_G5];
	tf->tf_global[6] = r[SVR4_SPARC_G6];
	tf->tf_global[7] = r[SVR4_SPARC_G7];

	tf->tf_out[0] = r[SVR4_SPARC_O0];
	tf->tf_out[1] = r[SVR4_SPARC_O1];
	tf->tf_out[2] = r[SVR4_SPARC_O2];
	tf->tf_out[3] = r[SVR4_SPARC_O3];
	tf->tf_out[4] = r[SVR4_SPARC_O4];
	tf->tf_out[5] = r[SVR4_SPARC_O5];
	tf->tf_out[6] = r[SVR4_SPARC_O6];
	tf->tf_out[7] = r[SVR4_SPARC_O7];

	/*
	 * restore signal stack
	 */
	svr4_to_bsd_sigaltstack(s, sf);
d321 7
a327 5
	/*
	 * restore signal mask
	 */
	svr4_to_bsd_sigset(&uc->uc_sigmask, &mask);
	p->p_sigmask = mask & ~sigcantmask;
d352 4
d448 1
a448 1
		printf("sig %d code %d\n", sig, code);
a474 1
	svr4_greg_t* r = frame.sf_uc.uc_mcontext.greg;
d499 1
a499 1
	/* 
d577 14
a590 2
		uprintf("T_SVR4_GETHRTIME\n");
		break;
d592 4
a595 2
	case T_SVR4_GETHRVTIME:
		uprintf("T_SVR4_GETHRVTIME\n");
d600 1
@


1.2
log
@ss_sp is correct, ss_base is not. noticed by agc@@sde.uts.amdahl.com; netbsd pr#1784
@
text
@d1 1
a1 1
/*	$NetBSD: svr4_machdep.c,v 1.12 1996/01/04 22:22:49 jtc Exp $	 */
d66 44
d161 4
d192 3
a209 3
	if ((int)uc & 3 || useracc((caddr_t)uc, sizeof *uc, B_WRITE) == 0)
		return EINVAL;

a212 11
	 * restore signal stack
	 */
	svr4_to_bsd_sigaltstack(s, sf);

	/*
	 * restore signal mask
	 */
	svr4_to_bsd_sigset(&uc->uc_sigmask, &mask);
	p->p_sigmask = mask & ~sigcantmask;

	/*
d220 2
a221 1
	if (((r[SVR4_SPARC_PC] | r[SVR4_SPARC_nPC]) & 3) != 0)
d223 1
d230 2
a231 4
	tf->tf_out[0] = r[SVR4_SPARC_O0];
	tf->tf_out[6] = r[SVR4_SPARC_O6];
#if 0
	/* I don't think that we need to restore those */
d240 1
d246 1
d248 11
a258 1
#endif
d416 1
a416 1
		    psp->ps_sigstk.ss_size - sizeof(struct svr4_sigframe));
d422 5
d436 4
d467 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: svr4_machdep.c,v 1.11 1995/10/07 06:26:09 mycroft Exp $	 */
d366 1
a366 1
		fp = (struct svr4_sigframe *)(psp->ps_sigstk.ss_base +
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
