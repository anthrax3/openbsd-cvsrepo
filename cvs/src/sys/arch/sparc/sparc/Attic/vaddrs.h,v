head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.26
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.22
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.24
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.16
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.12
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.09.01.09.23.43;	author tedu;	state dead;
branches;
next	1.8;
commitid	Q2PxaFNhqAe0Wmla;

1.8
date	2010.06.29.21.26.12;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.17.18.47.51;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.23.19.34.07;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.15.23.23.58;	author jason;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	97.08.08.08.27.47;	author downsj;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	97.06.24.23.07.10;	author grr;	state Exp;
branches;
next	1.2;

1.2
date	96.08.11.05.35.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.48;	author deraadt;	state Exp;
branches;
next	;

1.4.12.1
date	2001.05.14.21.37.19;	author niklas;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2003.05.13.19.41.09;	author ho;	state Exp;
branches;
next	;

1.5.6.1
date	2003.05.19.21.46.33;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: vaddrs.h,v 1.8 2010/06/29 21:26:12 miod Exp $	*/
/*	$NetBSD: vaddrs.h,v 1.8 1997/03/10 23:54:41 pk Exp $ */

/*
 * Copyright (c) 1996
 *	The President and Fellows of Harvard College. All rights reserved.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 *	This product includes software developed by Harvard University.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vaddrs.h	8.1 (Berkeley) 6/11/93
 */

/*
 * Special (fixed) virtual addresses on the SPARC.
 *
 * IO virtual space begins at 0xfe000000 (a segment boundary) and
 * continues up to the DVMA edge at 0xff000000 (on non-SRMMU systems only).
 * (The upper all-1s byte is special anyway since some of the hardware
 * supplies this to pad a 24-bit address space out to 32 bits.  This is a
 * legacy of the IBM PC AT bus, actually, just so you know who to blame.)
 *
 * We reserve several pages at the base of our IO virtual space
 * for `oft-used' devices which must be present anyway in order to
 * configure.  In particular, we want the counter-timer register and
 * the Zilog ZSCC serial port chips to be mapped at fixed VAs to make
 * microtime() and the zs hardware interrupt handlers faster.
 *
 * [sun4/sun4c:]
 * Ideally, we should map the interrupt enable register here as well,
 * but that would require allocating pmegs in locore.s, so instead we
 * use one of the two `wasted' pages at KERNBASE+_MAXNBPG (see locore.s).
 */

#ifndef IODEV_0
#define	IODEV_0		IOSPACE_BASE

#define _MAXNBPG	8192	/* fixed VAs, independent of actual NBPG */
#define _MAXNCPU	4	/* fixed VA allocation allows 4 CPUs */

/* [4m:] interrupt and counter registers take (1 + NCPU) pages. */

#define	TIMERREG_VA	(IODEV_0)
#define	COUNTERREG_VA	(  TIMERREG_VA + _MAXNBPG*_MAXNCPU)	/* [4m] */
#define	ZS0_VA		(COUNTERREG_VA + _MAXNBPG)
#define	ZS1_VA		(       ZS0_VA + _MAXNBPG)
#define	AUXREG_VA	(       ZS1_VA + _MAXNBPG)
#define	TMPMAP_VA	(    AUXREG_VA + _MAXNBPG)
#define	MSGBUF_VA	(    TMPMAP_VA + _MAXNBPG)
#define INTRREG_VA	(    MSGBUF_VA + _MAXNBPG)		/* [4/4c] */
#define PI_INTR_VA	(    MSGBUF_VA + _MAXNBPG)		/* [4m] */
#define SI_INTR_VA	(   PI_INTR_VA + _MAXNBPG*_MAXNCPU)	/* [4m] */
#define	IODEV_BASE	(   SI_INTR_VA + _MAXNBPG)
#define	IODEV_END	(IOSPACE_BASE + IOSPACE_LEN)

#define	DVMA_BASE	0xfff00000
#define	DVMA_END	0xfffc0000

/*
 * The next constant defines the amount of reserved DVMA space on the
 * Sun4m. The amount of space *must* be a multiple of 16MB, and thus
 * (((u_int)0) - DVMA4M_BASE) must be divisible by 16*1024*1024!
 * Note that pagetables must be allocated at a cost of 1k per MB of DVMA
 * space, plus severe alignment restrictions. So don't make DVMA4M_BASE too
 * low (max space = 2G).
 */
#define DVMA4M_BASE	0xfc000000	/* can change subject to above rule */
#define DVMA4M_END	0xfffff000
#define DVMA_D24_BASE	0xff000000
#define DVMA_D24_END	0xfffff000

#define M_SPACE_D24	0x0001

/*
 * Virtual address of the per cpu `cpu_softc' structure.
 */
#define CPUINFO_VA	(KERNBASE+8192)

#endif /* IODEV_0 */
@


1.8
log
@There is absolutely no need to double map DVMA addresses into the kernel address
space on SRMMU systems (i.e. sun4m), so don't do it anymore and update
misleading comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: vaddrs.h,v 1.7 2005/04/17 18:47:51 miod Exp $	*/
@


1.7
log
@Do not use KERNBASE when VM_MIN_KERNEL_ADDRESS or VM_MAXUSER_ADDRESS are
implied; this currently does not change anything (yet).

Also, define the I/O space range in <machine/vmparam.h> rather than in
<sparc/sparc/vaddrs.h>.

ok deraadt@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vaddrs.h,v 1.6 2003/04/23 19:34:07 miod Exp $	*/
d55 4
a58 4
 * continues up to the DVMA edge at 0xff000000.  (The upper all-1s
 * byte is special since some of the hardware supplies this to pad
 * a 24-bit address space out to 32 bits.  This is a legacy of the
 * IBM PC AT bus, actually, just so you know who to blame.)
a102 11
 *
 * Since DVMA space overlaps with normal kernel address space (notably
 * the device mappings and the PROM), we don't want to put any DVMA
 * mappings where any of this useful stuff is (i.e. if we dvma_malloc
 * a buffer, we want to still have a SRMMU mapping to it, and we can't
 * have that if its on top of kernel code). Thus the last two
 * constants define the actual DVMA addresses used. These can be anything
 * as long as they are within the bounds setup by the first 2 constants.
 * This is especially important on MP systems with cache coherency: to
 * avoid consistency problems, DVMA addresses must map to the same place
 * in both processor and IOMMU space.
d105 1
a105 1
#define DVMA4M_END	0xfffff000	/* XXX is this enough? */
@


1.6
log
@DVMA, not DMVA.
@
text
@d1 1
a1 1
/*	$OpenBSD: vaddrs.h,v 1.5 2001/01/15 23:23:58 jason Exp $	*/
d73 1
a73 1
#define	IODEV_0	0xfe000000	/* must match VM_MAX_KERNEL_ADDRESS */
d91 1
a91 1
#define	IODEV_END	0xff000000		/* 16 MB of iospace */
@


1.5
log
@- increase the amount of space mapped for dvma on sun4m
- use a flag to specify allocations for 24 bit devices
- compatibility macros to deal with the 32 bit devices

This fixes the 'le at sbus' on sun4m problem (with the extent fixes
earlier), and allows the Artecon ethernet cards to work in sun4m machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vaddrs.h,v 1.4 1997/08/08 08:27:47 downsj Exp $	*/
d55 1
a55 1
 * continues up to the DMVA edge at 0xff000000.  (The upper all-1s
@


1.5.6.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 1
a55 1
 * continues up to the DVMA edge at 0xff000000.  (The upper all-1s
@


1.4
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d116 5
a120 3
#define DVMA4M_TOP	0xffffffff 	/* do not modify */
#define DVMA4M_START	0xfd000000	/* 16M of DVMA */
#define DVMA4M_END	0xfe000000	/* XXX is this enough? */
@


1.4.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: vaddrs.h,v 1.5 2001/01/15 23:23:58 jason Exp $	*/
d116 3
a118 5
#define DVMA4M_END	0xfffff000	/* XXX is this enough? */
#define DVMA_D24_BASE	0xff000000
#define DVMA_D24_END	0xfffff000

#define M_SPACE_D24	0x0001
@


1.4.12.2
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: vaddrs.h,v 1.4.12.1 2001/05/14 21:37:19 niklas Exp $	*/
d55 1
a55 1
 * continues up to the DVMA edge at 0xff000000.  (The upper all-1s
@


1.3
log
@move master definition for the interrupt register to vaddrs.h with all
of the other special virtual addresses and also provide visibility
needed for bsd_fd.s to reference it...
@
text
@d1 2
a2 1
/*	$NetBSD: vaddrs.h,v 1.7 1996/05/16 15:57:28 abrown Exp $ */
a71 1

a77 3
/* [4c:] interrupt register as described above */
#define	INTRREG_VA	(    KERNBASE + _MAXNBPG)		/* [4c] */

d87 1
d119 5
@


1.2
log
@netbsd port, now we merge our changes back in
@
text
@d71 1
d77 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: vaddrs.h,v 1.5 1994/12/06 08:34:14 deraadt Exp $ */
d4 2
d30 1
d65 1
d68 1
a68 1
 * use one of the two `wasted' pages at KERNBASE+2*NBPG (see locore.s).
d74 5
d80 9
a88 6
#define	ZS0_VA		(IODEV_0 + 1*NBPG)
#define	ZS1_VA		(IODEV_0 + 2*NBPG)
#define	AUXREG_VA	(IODEV_0 + 3*NBPG)
#define	TMPMAP_VA	(IODEV_0 + 4*NBPG)
#define	MSGBUF_VA	(IODEV_0 + 5*NBPG)
#define	IODEV_BASE	(IODEV_0 + 6*NBPG)
d93 24
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
