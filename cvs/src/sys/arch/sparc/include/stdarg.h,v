head	1.16;
access;
symbols
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.14
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.10
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.10
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.8
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.26
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.24
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.22
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.20
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2014.03.11.19.45.27;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.23.21.25.08;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.09.03.07.53;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.06.18.53.05;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.15.13.44.52;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.15.07.07.53;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.14.23.51.33;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.14.21.46.31;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.14.18.28.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.27.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.23.15.38.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.08.26.50;	author downsj;	state Exp;
branches
	1.4.12.1
	1.4.22.1;
next	1.3;

1.3
date	95.12.31.23.30.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.48.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.44;	author deraadt;	state Exp;
branches;
next	;

1.4.12.1
date	2003.03.27.23.49.25;	author niklas;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2003.06.07.11.14.43;	author ho;	state Exp;
branches;
next	;

1.4.22.1
date	2002.10.29.00.28.10;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@lint is gone, and the 'lint' conditional was never in the implementation
namespace, so stop changing behavior when it's #defined

ok beck@@ krw@@
@
text
@/*	$OpenBSD: stdarg.h,v 1.15 2011/03/23 16:54:37 pirofti Exp $	*/
/*	$NetBSD: stdarg.h,v 1.10 1996/12/27 20:55:28 pk Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)stdarg.h	8.2 (Berkeley) 9/27/93
 */

#ifndef _MACHINE_STDARG_H_
#define	_MACHINE_STDARG_H_

#include <sys/cdefs.h>
#include <machine/_types.h>

typedef __va_list	va_list;

#define	__va_size(type) \
	(((sizeof(type) + sizeof(long) - 1) / sizeof(long)) * sizeof(long))

#define	va_start(ap, last) \
	(__builtin_next_arg(last), (ap) = (va_list)__builtin_saveregs())

/*
 * va_arg picks up the next argument of type `type'.  Appending an
 * asterisk to `type' must produce a pointer to `type' (i.e., `type'
 * may not be, e.g., `int (*)()').
 *
 * Gcc-2.x tries to use ldd/std for double and quad_t values, but Sun's
 * brain-damaged calling convention does not quad-align these.  Thus, for
 * 8-byte arguments, we have to pick up the actual value four bytes at a
 * time, and use type punning (i.e., a union) to produce the result.
 * (We could also do this with a libc function, actually, by returning
 * 8 byte integers in %o0+%o1 and the same 8 bytes as a double in %f0+%f1.)
 *
 * Note: We don't declare __d with type `type', since in C++ the type might
 * have a constructor.
 */
#define	__va_8byte(ap, type) \
	__statement({							\
		union { char __d[sizeof(type)]; int __i[2]; } __va_u;	\
		__va_u.__i[0] = ((int *)(void *)(ap))[0];		\
		__va_u.__i[1] = ((int *)(void *)(ap))[1];		\
		(ap) += 8; *(type *)(va_list)__va_u.__d;		\
	})

#define	__va_arg(ap, type) \
	(*(type *)((ap) += __va_size(type),			\
		   (ap) - (sizeof(type) < sizeof(long) &&	\
			   sizeof(type) != __va_size(type) ?	\
			   sizeof(type) : __va_size(type))))

#define	__RECORD_TYPE_CLASS	12
#define va_arg(ap, type) \
	(__builtin_classify_type(*(type *)0) >= __RECORD_TYPE_CLASS ?	\
	 *__va_arg(ap, type *) : __va_size(type) == 8 ?			\
	 __va_8byte(ap, type) : __va_arg(ap, type))

#if __ISO_C_VISIBLE >= 1999
#define __va_copy(dest, src) \
	((dest) = (src))
#endif

#define va_end(ap)	

#endif /* !_MACHINE_STDARG_H_ */
@


1.15
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.14 2008/10/23 21:25:08 kettenis Exp $	*/
a49 4
#ifdef __lint__
#define	__builtin_classify_type(t)	(0)
#endif

a54 3
#ifdef lint
#define	va_start(ap,lastarg)	((ap) = (ap))
#else
a56 1
#endif /* lint */
@


1.14
log
@Move the va_copy define to <sys/stdrag.h> making sure it is uniformaly
protected by __ISO_C_VISIBLE > 1999.  With a little help from miod@@.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.13 2006/04/09 03:07:53 deraadt Exp $	*/
d44 2
a45 2
#ifndef _SPARC_STDARG_H_
#define	_SPARC_STDARG_H_
d108 1
a108 1
#endif /* !_SPARC_STDARG_H_ */
@


1.13
log
@#ifdef lint wraps for va_start
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.12 2006/01/06 18:53:05 millert Exp $	*/
d102 1
a102 1
#define va_copy(dest, src) \
@


1.12
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.11 2005/12/15 13:44:52 millert Exp $	*/
d59 3
a61 1
#if __GNUC__ > 2 || __GNUC_MINOR__ >= 6
d64 1
a64 4
#else
#define	va_start(ap, last) \
	(__builtin_next_arg(), (ap) = (va_list)__builtin_saveregs())
#endif
@


1.11
log
@Protect va_copy with __ISO_C_VISIBLE as intended.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.10 2005/12/15 07:07:53 deraadt Exp $	*/
d48 1
a48 1
#include <machine/ansi.h>
d54 1
a54 1
typedef _BSD_VA_LIST_	va_list;
@


1.10
log
@__BSD_VISIBLE is not compared against a date
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.9 2005/12/14 23:51:33 deraadt Exp $	*/
d102 1
a102 1
#if __BSD_VISIBLE
@


1.9
log
@make va_arg() map to nothing; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.8 2005/12/14 21:46:31 millert Exp $	*/
d102 1
a102 1
#if __BSD_VISIBLE >= 1999
@


1.8
log
@convert _FOO_SOURCE -> __FOO_VISIBLE in machine.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.7 2005/12/14 18:28:40 millert Exp $	*/
d107 1
a107 1
#define va_end(ap)	((void)0)
@


1.7
log
@Add a __statement macro to use with gcc statement expressions instead
of using __extension__ directly.  This lets us define away the whole
thing when lint is in use.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.6 2003/06/02 23:27:54 millert Exp $	*/
d102 1
a102 3
#if !defined(_ANSI_SOURCE) && \
    (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
     defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) >= 199901L)
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.5 2002/10/23 15:38:16 millert Exp $	*/
d47 1
a50 1
#define	__extension__(x)		(0)
a81 4
#if __GNUC__ == 1
#define	__extension__
#endif

d83 1
a83 1
	__extension__ ({						\
@


1.5
log
@Add a trivial va_copy() macro to all architectures but powerpc
(which I will leave for Dale since it needs special handling).
From NetBSD (and same as sparc64).  espie@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.4 1997/08/08 08:26:50 downsj Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d109 7
@


1.4.12.1
log
@Sync the SMP branch with 3.3
@
text
@a109 7
#if !defined(_ANSI_SOURCE) && \
    (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
     defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) >= 199901L)
#define va_copy(dest, src) \
	((dest) = (src))
#endif

@


1.4.12.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.4.12.1 2003/03/27 23:49:25 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4.22.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.4 1997/08/08 08:26:50 downsj Exp $	*/
a108 7

#if !defined(_ANSI_SOURCE) && \
    (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
     defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) >= 199901L)
#define va_copy(dest, src) \
	((dest) = (src))
#endif
@


1.3
log
@from netbsd; handle more netbsd versions
@
text
@d1 2
a2 1
/*	$NetBSD: stdarg.h,v 1.9 1995/12/29 18:53:01 mycroft Exp $ */
d52 5
@


1.2
log
@from netbsd: support more gcc versions
@
text
@d1 1
a1 1
/*	$NetBSD: stdarg.h,v 1.8 1995/12/25 23:15:38 mycroft Exp $ */
d57 1
a57 1
#ifdef __GCC_NEW_VARARGS__
d62 1
a62 1
	(__builtin_saveregs(), (ap) = (va_list)__builtin_next_arg(last))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: stdarg.h,v 1.6 1995/01/28 01:52:21 jtc Exp $ */
a46 4
/*
 * SPARC stdarg.h
 */

d54 2
a55 14
/*
 * va_start sets ap to point to the first variable argument.
 * The `last fixed argument' parameter l is ignored (and should
 * never have been included in the ANSI standard!).
 *
 * va_end cleans up after va_start.  There is nothing to do there.
 */
#ifdef __GCC_NEW_VARARGS__	/* gcc 2.4.5 */
#define va_start(ap, l)	((ap) = (va_list)__builtin_saveregs())
#else				/* gcc 2.3.3 */
#define va_start(ap, l)	(__builtin_saveregs(), \
			 (ap) = (va_list)__builtin_next_arg())
#endif
#define va_end(ap)	((void) 0)
d57 6
a62 2
#if __GNUC__ == 1
#define __extension__	/* hack for bootstrapping via gcc 1.x */
d66 3
a68 5
 * va_arg picks up the next argument of type `ty'.  Appending an
 * asterisk to ty must produce a pointer to ty (i.e., ty may not be,
 * e.g., `int (*)()').  In addition, ty must not be any type which
 * undergoes promotion to some other type (e.g., char): it must
 * be the promoted type instead.
d71 3
a73 3
 * brain-damaged calling convention does not quad-align these.  Thus,
 * for 8-byte arguments, we have to pick up the actual value four bytes
 * at a time, and use type punning (i.e., a union) to produce the result.
d77 2
a78 5
 * Note: we cannot use the union trick (which generates better code) for
 * C++, since `ty' might be a type with a constructor (these may not appear
 * in a union).
 *
 * The extraneous casts through `void *' avoid gcc alignment warnings.
d80 25
a104 20
#ifdef __cplusplus
#define	__va_8byte(ap, ty) ({ \
	int __va_i[2]; \
	__va_i[0] = ((int *)(void *)(ap))[0]; \
	__va_i[1] = ((int *)(void *)(ap))[1]; \
	(ap) += 8; *(ty *)(void *)__va_i; })
#else
#define	__va_8byte(ap, ty) ({ \
	union { ty __d; int __i[2]; } __va_u; \
	__va_u.__i[0] = ((int *)(void *)(ap))[0]; \
	__va_u.__i[1] = ((int *)(void *)(ap))[1]; \
	(ap) += 8; __va_u.__d; })
#endif /* __cplusplus */

#define va_arg(ap, ty) __extension__ ({ \
    ty __va_temp; /* to check for invisible-ptr struct-valued args */ \
    __builtin_classify_type(__va_temp) >= 12 ? \
	((ty **)(void *)((ap) += sizeof(ty *)))[-1][0] : \
    sizeof(ty) == 8 ? __va_8byte(ap, ty) : \
	((ty *)(void *)(ap += sizeof(ty)))[-1]; })
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
