head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.01.09.23.42;	author tedu;	state dead;
branches;
next	1.5;
commitid	Q2PxaFNhqAe0Wmla;

1.5
date	2015.11.02.16.55.31;	author mpi;	state Exp;
branches;
next	1.4;
commitid	Vu0jkheHA7bOsg6R;

1.4
date	2012.11.05.13.20.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.21.14.56.24;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.10.20.53.54;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: intr.h,v 1.5 2015/11/02 16:55:31 mpi Exp $	*/
/*	$NetBSD: cpu.h,v 1.24 1997/03/15 22:25:15 pk Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cpu.h	8.4 (Berkeley) 1/5/94
 */

#ifndef _MACHINE_INTR_H_
#define _MACHINE_INTR_H_

#ifdef _KERNEL
#include <sys/evcount.h>

/*
 * Interrupt handler chains.  Interrupt handlers should return 0 for
 * ``not me'' or 1 (``I took care of it'').  intr_establish() inserts a
 * handler into the list.  The handler is called with its (single)
 * argument, or with a pointer to a clockframe if ih_arg is NULL.
 * ih_ipl specifies the interrupt level that should be blocked when
 * executing this handler.
 */
struct intrhand {
	int			(*ih_fun)(void *);
	void			*ih_arg;
	int			ih_ipl;
	int			ih_vec;		/* ipl for vmstat */
	struct	evcount		ih_count;
	struct	intrhand	*ih_next;	/* global list */
};
extern struct intrhand *intrhand[15];		/* XXX obio.c */

void	intr_establish(int, struct intrhand *, int, const char *);
void	vmeintr_establish(int, int, struct intrhand *, int, const char *);

void	intr_barrier(void *);

/*
 * intr_fasttrap() is a lot like intr_establish, but is used for ``fast''
 * interrupt vectors (vectors that are not shared and are handled in the
 * trap window).  Such functions must be written in assembly.
 */
int	intr_fasttrap(int, void (*)(void), int (*)(void *), void *);
void	intr_fastuntrap(int);

/*
 * Soft interrupt handler chains. In addition to a struct intrhand for
 * proper dispatching, we also remember a pending state as well as the
 * bits to frob in the software interrupt register.
 */
struct sintrhand {
	struct intrhand	sih_ih;
	int		sih_pending;	/* nonzero if triggered */
	int		sih_hw;		/* hw dependent */
	int		sih_ipl;	/* ipl it's registered at */
};

void	 softintr_disestablish(void *);
void	*softintr_establish(int, void (*)(void *), void *);
void	 softintr_schedule(void *);

#endif /* _KERNEL */
#endif /* _MACHINE_INTR_H_ */
@


1.5
log
@intr_barrier() stub.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2012/11/05 13:20:16 miod Exp $	*/
@


1.4
log
@Switch sparc to timecounters. Heavily based on NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 2011/03/23 16:54:37 pirofti Exp $	*/
d70 2
@


1.3
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 2010/12/21 14:56:24 claudio Exp $	*/
a77 2

void	intr_init(void);
@


1.2
log
@Convert netisr to a normal soft interrupt instead of hanving MD code
for it. This makes the netisr a real C function which will help further
development. No noticable performance change on i386 and amd64.
With input from kettenis@@ and miod@@ additional OKs mikeb@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 2009/04/10 20:53:54 miod Exp $	*/
d44 2
a45 2
#ifndef _SPARC_INTR_H_
#define _SPARC_INTR_H_
d98 1
a98 1
#endif /* _SPARC_INTR_H_ */
@


1.1
log
@generic soft interrupts support for sparc. Soft interrupt handlers are now
kept in a separate intrhand array, with their own enable bits so that
soft interrupts sharing the same level only get invoked if really triggered.
Inspired by NetBSD with significant changes.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a95 4

/* XXX legacy software interrupts */
extern void *softnet_ih;
#define	 setsoftnet()	softintr_schedule(softnet_ih)
@

