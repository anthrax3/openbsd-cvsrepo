head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.26
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.22
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.24
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.16
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.20
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.18
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.24
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.26
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.22
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.20
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.18
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.16
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.14
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.12
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.10
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.8
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.01.09.23.42;	author tedu;	state dead;
branches;
next	1.12;
commitid	Q2PxaFNhqAe0Wmla;

1.12
date	2010.06.29.21.28.08;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.14.19.05.36;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.27.54;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.08.13.48.21;	author art;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.08.08.02.26.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.06.17.18.59;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.08.26.06;	author downsj;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	96.08.11.05.34.44;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.10.25.10.06.46;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.25.09.34.00;	author davem;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.42;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2001.05.14.21.37.11;	author niklas;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2001.10.31.03.07.57;	author nate;	state Exp;
branches;
next	1.5.12.3;

1.5.12.3
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.5.12.4;

1.5.12.4
date	2003.06.07.11.14.43;	author ho;	state Exp;
branches;
next	1.5.12.5;

1.5.12.5
date	2004.02.19.10.49.58;	author niklas;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: bsd_openprom.h,v 1.12 2010/06/29 21:28:08 miod Exp $	*/
/*	$NetBSD: bsd_openprom.h,v 1.11 1996/05/18 12:27:43 mrg Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)bsd_openprom.h	8.1 (Berkeley) 6/11/93
 */

/*
 * Sun4m support by Aaron Brown, Harvard University.
 * Changes Copyright (c) 1995 The President and Fellows of Harvard College.
 * All rights reserved.
 */

/*
 * This file defines the interface between the kernel and the Openboot PROM.
 * N.B.: this has been tested only on interface versions 0 and 2 (we have
 * never seen interface version 1).
 */

/*
 * The v0 interface tells us what virtual memory to scan to avoid PMEG
 * conflicts, but the v2 interface fails to do so, and we must `magically'
 * know where the OPENPROM lives in virtual space.
 */
#define	OPENPROM_STARTVADDR	0xffd00000
#define	OPENPROM_ENDVADDR	0xfff00000

#define	OPENPROM_MAGIC 0x10010407

/*
 * Version 0 PROM vector device operations (collected here to emphasise that
 * they are deprecated).  Open and close are obvious.  Read and write are
 * segregated according to the device type (block, network, or character);
 * this is unnecessary and was eliminated from the v2 device operations, but
 * we are stuck with it.
 *
 * Seek is probably only useful on tape devices, since the only character
 * devices are the serial ports.
 *
 * Note that a v0 device name is always exactly two characters ("sd", "le",
 * and so forth).
 */
struct v0devops {
	int	(*v0_open)(char *dev);
	int	(*v0_close)(int d);
	int	(*v0_rbdev)(int d, int nblks, int blkno, void *addr);
	int	(*v0_wbdev)(int d, int nblks, int blkno, void *addr);
	int	(*v0_wnet)(int d, int nbytes, void *addr);
	int	(*v0_rnet)(int d, int nbytes, void *addr);
	int	(*v0_rcdev)(int d, int nbytes, int, void *addr);
	int	(*v0_wcdev)(int d, int nbytes, int, void *addr);
	int	(*v0_seek)(int d, long offset, int whence);
};

/*
 * Version 2 device operations.  Open takes a device `path' such as
 * /sbus/le@@0,c00000,0 or /sbus/esp@@.../sd@@0,0, which means it can open
 * anything anywhere, without any magic translation.
 *
 * The memory allocator and map functions are included here even though
 * they relate only indirectly to devices (e.g., mmap is good for mapping
 * device memory, and drivers need to allocate space in which to record
 * the device state).
 */
struct v2devops {
	/*
	 * Convert an `instance handle' (acquired through v2_open()) to
	 * a `package handle', a.k.a. a `node'.
	 */
	int	(*v2_fd_phandle)(int d);

	/* Memory allocation and release. */
	void	*(*v2_malloc)(caddr_t va, u_int sz);
	void	(*v2_free)(caddr_t va, u_int sz);

	/* Device memory mapper. */
	caddr_t	(*v2_mmap)(caddr_t va, int asi, u_int pa, u_int sz);
	void	(*v2_munmap)(caddr_t va, u_int sz);

	/* Device open, close, etc. */
	int	(*v2_open)(char *devpath);
	void	(*v2_close)(int d);
	int	(*v2_read)(int d, void *buf, int nbytes);
	int	(*v2_write)(int d, void *buf, int nbytes);
	void	(*v2_seek)(int d, int hi, int lo);

	void	(*v2_chain)(void);	/* ??? */
	void	(*v2_release)(void);	/* ??? */
};

/*
 * The v0 interface describes memory regions with these linked lists.
 * (The !$&@@#+ v2 interface reformats these as properties, so that we
 * have to extract them into local temporary memory and reinterpret them.)
 */
struct v0mlist {
	struct	v0mlist *next;
	caddr_t	addr;
	u_int	nbytes;
};

/*
 * V0 gives us three memory lists:  Total physical memory, VM reserved to
 * the PROM, and available physical memory (which, presumably, is just the
 * total minus any pages mapped in the PROM's VM region).  We can find the
 * reserved PMEGs by scanning the taken VM.  Unfortunately, the V2 prom
 * forgot to provide taken VM, and we are stuck with scanning ``magic''
 * addresses.
 */
struct v0mem {
	struct	v0mlist **v0_phystot;	/* physical memory */
	struct	v0mlist **v0_vmprom;	/* VM used by PROM */
	struct	v0mlist **v0_physavail;	/* available physical memory */
};

/*
 * The version 0 PROM breaks up the string given to the boot command and
 * leaves the decoded version behind.
 */
struct v0bootargs {
	char	*ba_argv[8];		/* argv format for boot string */
	char	ba_args[100];		/* string space */
	char	ba_bootdev[2];		/* e.g., "sd" for `b sd(...' */
	int	ba_ctlr;		/* controller # */
	int	ba_unit;		/* unit # */
	int	ba_part;		/* partition # */
	char	*ba_kernel;		/* kernel to boot, e.g., "vmunix" */
	void	*ba_spare0;		/* not decoded here	XXX */
};

/*
 * The version 2 PROM interface uses the more general, if less convenient,
 * approach of passing the boot strings unchanged.  We also get open file
 * numbers for stdin and stdout (keyboard and screen, or whatever), for use
 * with the v2 device ops.
 */
struct v2bootargs {
	char	**v2_bootpath;		/* V2: Path to boot device */
	char	**v2_bootargs;		/* V2: Boot args */
	int	*v2_fd0;		/* V2: Stdin descriptor */
	int	*v2_fd1;		/* V2: Stdout descriptor */
};

/*
 * The following structure defines the primary PROM vector interface.
 * The Boot PROM hands the kernel a pointer to this structure in %o0.
 * There are numerous substructures defined below.
 */
struct promvec {
	/* Version numbers. */
	u_int	pv_magic;		/* Magic number */
	u_int	pv_romvec_vers;		/* interface version (0, 2) */
	u_int	pv_plugin_vers;		/* ??? */
	u_int	pv_printrev;		/* PROM rev # (* 10, e.g 1.9 = 19) */

	/* Version 0 memory descriptors (see below). */
	struct	v0mem pv_v0mem;		/* V0: Memory description lists. */

	/* Node operations (see below). */
	struct	nodeops *pv_nodeops;	/* node functions */

	char	**pv_bootstr;		/* Boot command, eg sd(0,0,0)vmunix */

	struct	v0devops pv_v0devops;	/* V0: device ops */

	/*
	 * PROMDEV_* cookies.  I fear these may vanish in lieu of fd0/fd1
	 * (see below) in future PROMs, but for now they work fine.
	 */
	char	*pv_stdin;		/* stdin cookie */
	char	*pv_stdout;		/* stdout cookie */
#define	PROMDEV_KBD	0		/* input from keyboard */
#define	PROMDEV_SCREEN	0		/* output to screen */
#define	PROMDEV_TTYA	1		/* in/out to ttya */
#define	PROMDEV_TTYB	2		/* in/out to ttyb */

	/* Blocking getchar/putchar.  NOT REENTRANT! (grr) */
	int	(*pv_getchar)(void);
	void	(*pv_putchar)(int ch);

	/* Non-blocking variants that return -1 on error. */
	int	(*pv_nbgetchar)(void);
	int	(*pv_nbputchar)(int ch);

	/* Put counted string (can be very slow). */
	void	(*pv_putstr)(char *str, int len);

	/* Miscellany. */
	void	(*pv_reboot)(char *bootstr);
	void	(*pv_printf)(const char *fmt, ...);
	void	(*pv_abort)(void);	/* L1-A abort */
	int	*pv_ticks;		/* Ticks since last reset */
	void	(*pv_halt)(void) __attribute__((__noreturn__));/* Halt! */
	void	(**pv_synchook)(void);	/* "sync" command hook */

	/*
	 * This eval's a FORTH string.  Unfortunately, its interface
	 * changed between V0 and V2, which gave us much pain.
	 */
	union {
		void	(*v0_eval)(int len, char *str);
		void	(*v2_eval)(char *str);
	} pv_fortheval;

	struct	v0bootargs **pv_v0bootargs;	/* V0: Boot args */

	/* Extract Ethernet address from network device. */
	u_int	(*pv_enaddr)(int d, char *enaddr);

	struct	v2bootargs pv_v2bootargs;	/* V2: Boot args + std in/out */
	struct	v2devops pv_v2devops;	/* V2: device operations */

	int	pv_spare[15];

	/*
	 * The following is machine-dependent.
	 *
	 * The sun4c needs a PROM function to set a PMEG for another
	 * context, so that the kernel can map itself in all contexts.
	 * It is not possible simply to set the context register, because
	 * contexts 1 through N may have invalid translations for the
	 * current program counter.  The hardware has a mode in which
	 * all memory references go to the PROM, so the PROM can do it
	 * easily.
	 */
	void	(*pv_setctxt)(int ctxt, caddr_t va, int pmeg);
#if (defined(SUN4D) || defined(SUN4M)) && defined(notyet)
	/*
	 * The following are V3 ROM functions to handle MP machines in the
	 * Sun4m series. They have undefined results when run on a uniprocessor!
	 */
	int	(*pv_v3cpustart)(u_int module, u_int ctxtbl,
				      int context, caddr_t pc);
	int 	(*pv_v3cpustop)(u_int module);
	int	(*pv_v3cpuidle)(u_int module);
	int 	(*pv_v3cpuresume)(u_int module);
#endif
};

/*
 * In addition to the global stuff defined in the PROM vectors above,
 * the PROM has quite a collection of `nodes'.  A node is described by
 * an integer---these seem to be internal pointers, actually---and the
 * nodes are arranged into an N-ary tree.  Each node implements a fixed
 * set of functions, as described below.  The first two deal with the tree
 * structure, allowing traversals in either breadth- or depth-first fashion.
 * The rest deal with `properties'.
 *
 * A node property is simply a name/value pair.  The names are C strings
 * (NUL-terminated); the values are arbitrary byte strings (counted strings).
 * Many values are really just C strings.  Sometimes these are NUL-terminated,
 * sometimes not, depending on the interface version; v0 seems to
 * terminate and v2 not.  Many others are simply integers stored as four
 * bytes in machine order: you just get them and go.  The third popular
 * format is an `address', which is made up of one or more sets of three
 * integers as defined below.
 *
 * N.B.: for the `next' functions, next(0) = first, and next(last) = 0.
 * Whoever designed this part had good taste.  On the other hand, these
 * operation vectors are global, rather than per-node, yet the pointers
 * are not in the openprom vectors but rather found by indirection from
 * there.  So the taste balances out.
 */
struct openprom_addr {
	int	oa_space;		/* address space (may be relative) */
	u_int	oa_base;		/* address within space */
	u_int	oa_size;		/* extent (number of bytes) */
};

struct nodeops {
	/*
	 * Tree traversal.
	 */
	int	(*no_nextnode)(int node);	/* next(node) */
	int	(*no_child)(int node);	/* first child */

	/*
	 * Property functions.  Proper use of getprop requires calling
	 * proplen first to make sure it fits.  Kind of a pain, but no
	 * doubt more convenient for the PROM coder.
	 */
	int	(*no_proplen)(int node, caddr_t name);
	int	(*no_getprop)(int node, caddr_t name, caddr_t val);
	int	(*no_setprop)(int node, caddr_t name, caddr_t val,
				   int len);
	caddr_t	(*no_nextprop)(int node, caddr_t name);
};

__dead void	romhalt(void);
__dead void	romboot(char *);

extern struct promvec *promvec;

/*
 * Memory description arrays, matching version 2 memory information layout.
 * Shared between boot blocks, pmap.c and autoconf.c; no one else should use
 * this.
 */
struct memarr {
	uint32_t	addr_hi;
	uint32_t	addr_lo;
	uint32_t	len;
};
int	makememarr(struct memarr *, u_int max, int which);
#define	MEMARR_AVAILPHYS	0
#define	MEMARR_TOTALPHYS	1
@


1.12
log
@During kernel bootstrap, stop assuming the kernel image has been loaded in
low physical memory, but instead figure out where it has been loaded from
the current MMU setup.

From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.11 2003/11/14 19:05:36 miod Exp $	*/
@


1.11
log
@the the; rohee@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.10 2003/06/02 23:27:54 millert Exp $	*/
d257 1
a257 1
#if defined(SUN4M) && defined(notyet)
d323 14
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.9 2002/03/14 01:26:43 millert Exp $	*/
d282 1
a282 1
 * sometimes not, depending on the the interface version; v0 seems to
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.8 2001/08/08 13:48:21 art Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@__dead doesn't work on function pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.7 2001/08/08 02:26:35 millert Exp $	*/
d78 9
a86 9
	int	(*v0_open) __P((char *dev));
	int	(*v0_close) __P((int d));
	int	(*v0_rbdev) __P((int d, int nblks, int blkno, void *addr));
	int	(*v0_wbdev) __P((int d, int nblks, int blkno, void *addr));
	int	(*v0_wnet) __P((int d, int nbytes, void *addr));
	int	(*v0_rnet) __P((int d, int nbytes, void *addr));
	int	(*v0_rcdev) __P((int d, int nbytes, int, void *addr));
	int	(*v0_wcdev) __P((int d, int nbytes, int, void *addr));
	int	(*v0_seek) __P((int d, long offset, int whence));
d104 1
a104 1
	int	(*v2_fd_phandle) __P((int d));
d107 2
a108 2
	void	*(*v2_malloc) __P((caddr_t va, u_int sz));
	void	(*v2_free) __P((caddr_t va, u_int sz));
d111 2
a112 2
	caddr_t	(*v2_mmap) __P((caddr_t va, int asi, u_int pa, u_int sz));
	void	(*v2_munmap) __P((caddr_t va, u_int sz));
d115 5
a119 5
	int	(*v2_open) __P((char *devpath));
	void	(*v2_close) __P((int d));
	int	(*v2_read) __P((int d, void *buf, int nbytes));
	int	(*v2_write) __P((int d, void *buf, int nbytes));
	void	(*v2_seek) __P((int d, int hi, int lo));
d121 2
a122 2
	void	(*v2_chain) __P((void));	/* ??? */
	void	(*v2_release) __P((void));	/* ??? */
d212 2
a213 2
	int	(*pv_getchar) __P((void));
	void	(*pv_putchar) __P((int ch));
d216 2
a217 2
	int	(*pv_nbgetchar) __P((void));
	int	(*pv_nbputchar) __P((int ch));
d220 1
a220 1
	void	(*pv_putstr) __P((char *str, int len));
d223 3
a225 3
	void	(*pv_reboot) __P((char *bootstr));
	void	(*pv_printf) __P((const char *fmt, ...));
	void	(*pv_abort) __P((void));	/* L1-A abort */
d227 2
a228 2
	void	(*pv_halt) __P((void)) __attribute__((__noreturn__));/* Halt! */
	void	(**pv_synchook) __P((void));	/* "sync" command hook */
d235 2
a236 2
		void	(*v0_eval) __P((int len, char *str));
		void	(*v2_eval) __P((char *str));
d242 1
a242 1
	u_int	(*pv_enaddr) __P((int d, char *enaddr));
d260 1
a260 1
	void	(*pv_setctxt) __P((int ctxt, caddr_t va, int pmeg));
d266 5
a270 5
	int	(*pv_v3cpustart) __P((u_int module, u_int ctxtbl,
				      int context, caddr_t pc));
	int 	(*pv_v3cpustop) __P((u_int module));
	int	(*pv_v3cpuidle) __P((u_int module));
	int 	(*pv_v3cpuresume) __P((u_int module));
d308 2
a309 2
	int	(*no_nextnode) __P((int node));	/* next(node) */
	int	(*no_child) __P((int node));	/* first child */
d316 5
a320 5
	int	(*no_proplen) __P((int node, caddr_t name));
	int	(*no_getprop) __P((int node, caddr_t name, caddr_t val));
	int	(*no_setprop) __P((int node, caddr_t name, caddr_t val,
				   int len));
	caddr_t	(*no_nextprop) __P((int node, caddr_t name));
d323 2
a324 2
__dead void	romhalt __P((void));
__dead void	romboot __P((char *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.8 2001/08/08 13:48:21 art Exp $	*/
d78 9
a86 9
	int	(*v0_open)(char *dev);
	int	(*v0_close)(int d);
	int	(*v0_rbdev)(int d, int nblks, int blkno, void *addr);
	int	(*v0_wbdev)(int d, int nblks, int blkno, void *addr);
	int	(*v0_wnet)(int d, int nbytes, void *addr);
	int	(*v0_rnet)(int d, int nbytes, void *addr);
	int	(*v0_rcdev)(int d, int nbytes, int, void *addr);
	int	(*v0_wcdev)(int d, int nbytes, int, void *addr);
	int	(*v0_seek)(int d, long offset, int whence);
d104 1
a104 1
	int	(*v2_fd_phandle)(int d);
d107 2
a108 2
	void	*(*v2_malloc)(caddr_t va, u_int sz);
	void	(*v2_free)(caddr_t va, u_int sz);
d111 2
a112 2
	caddr_t	(*v2_mmap)(caddr_t va, int asi, u_int pa, u_int sz);
	void	(*v2_munmap)(caddr_t va, u_int sz);
d115 5
a119 5
	int	(*v2_open)(char *devpath);
	void	(*v2_close)(int d);
	int	(*v2_read)(int d, void *buf, int nbytes);
	int	(*v2_write)(int d, void *buf, int nbytes);
	void	(*v2_seek)(int d, int hi, int lo);
d121 2
a122 2
	void	(*v2_chain)(void);	/* ??? */
	void	(*v2_release)(void);	/* ??? */
d212 2
a213 2
	int	(*pv_getchar)(void);
	void	(*pv_putchar)(int ch);
d216 2
a217 2
	int	(*pv_nbgetchar)(void);
	int	(*pv_nbputchar)(int ch);
d220 1
a220 1
	void	(*pv_putstr)(char *str, int len);
d223 3
a225 3
	void	(*pv_reboot)(char *bootstr);
	void	(*pv_printf)(const char *fmt, ...);
	void	(*pv_abort)(void);	/* L1-A abort */
d227 2
a228 2
	void	(*pv_halt)(void) __attribute__((__noreturn__));/* Halt! */
	void	(**pv_synchook)(void);	/* "sync" command hook */
d235 2
a236 2
		void	(*v0_eval)(int len, char *str);
		void	(*v2_eval)(char *str);
d242 1
a242 1
	u_int	(*pv_enaddr)(int d, char *enaddr);
d260 1
a260 1
	void	(*pv_setctxt)(int ctxt, caddr_t va, int pmeg);
d266 5
a270 5
	int	(*pv_v3cpustart)(u_int module, u_int ctxtbl,
				      int context, caddr_t pc);
	int 	(*pv_v3cpustop)(u_int module);
	int	(*pv_v3cpuidle)(u_int module);
	int 	(*pv_v3cpuresume)(u_int module);
d308 2
a309 2
	int	(*no_nextnode)(int node);	/* next(node) */
	int	(*no_child)(int node);	/* first child */
d316 5
a320 5
	int	(*no_proplen)(int node, caddr_t name);
	int	(*no_getprop)(int node, caddr_t name, caddr_t val);
	int	(*no_setprop)(int node, caddr_t name, caddr_t val,
				   int len);
	caddr_t	(*no_nextprop)(int node, caddr_t name);
d323 2
a324 2
__dead void	romhalt(void);
__dead void	romboot(char *);
@


1.7
log
@nuke __attribute__((__noreturn__)) when used in conjunction with __dead
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.6 2000/12/06 17:18:59 deraadt Exp $	*/
d227 1
a227 1
	__dead void (*pv_halt) __P((void));	/* Halt! */
@


1.6
log
@use __x__ formats for __attribute__ arguments; guenther@@gac.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.5 1997/08/08 08:26:06 downsj Exp $	*/
d227 1
a227 1
	__dead void (*pv_halt) __P((void)) __attribute__((__noreturn__));/* Halt! */
d323 2
a324 4
void	romhalt __P((void))
    __attribute__((__noreturn__));
void	romboot __P((char *))
    __attribute__((__noreturn__));
@


1.5
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d227 1
a227 1
	__dead void (*pv_halt) __P((void)) __attribute__((noreturn));/* Halt! */
@


1.5.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.6 2000/12/06 17:18:59 deraadt Exp $	*/
d227 1
a227 1
	__dead void (*pv_halt) __P((void)) __attribute__((__noreturn__));/* Halt! */
@


1.5.12.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.5.12.1 2001/05/14 21:37:11 niklas Exp $	*/
d227 1
a227 1
	void	(*pv_halt) __P((void)) __attribute__((__noreturn__));/* Halt! */
d323 4
a326 2
__dead void	romhalt __P((void));
__dead void	romboot __P((char *));
@


1.5.12.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 9
a86 9
	int	(*v0_open)(char *dev);
	int	(*v0_close)(int d);
	int	(*v0_rbdev)(int d, int nblks, int blkno, void *addr);
	int	(*v0_wbdev)(int d, int nblks, int blkno, void *addr);
	int	(*v0_wnet)(int d, int nbytes, void *addr);
	int	(*v0_rnet)(int d, int nbytes, void *addr);
	int	(*v0_rcdev)(int d, int nbytes, int, void *addr);
	int	(*v0_wcdev)(int d, int nbytes, int, void *addr);
	int	(*v0_seek)(int d, long offset, int whence);
d104 1
a104 1
	int	(*v2_fd_phandle)(int d);
d107 2
a108 2
	void	*(*v2_malloc)(caddr_t va, u_int sz);
	void	(*v2_free)(caddr_t va, u_int sz);
d111 2
a112 2
	caddr_t	(*v2_mmap)(caddr_t va, int asi, u_int pa, u_int sz);
	void	(*v2_munmap)(caddr_t va, u_int sz);
d115 5
a119 5
	int	(*v2_open)(char *devpath);
	void	(*v2_close)(int d);
	int	(*v2_read)(int d, void *buf, int nbytes);
	int	(*v2_write)(int d, void *buf, int nbytes);
	void	(*v2_seek)(int d, int hi, int lo);
d121 2
a122 2
	void	(*v2_chain)(void);	/* ??? */
	void	(*v2_release)(void);	/* ??? */
d212 2
a213 2
	int	(*pv_getchar)(void);
	void	(*pv_putchar)(int ch);
d216 2
a217 2
	int	(*pv_nbgetchar)(void);
	int	(*pv_nbputchar)(int ch);
d220 1
a220 1
	void	(*pv_putstr)(char *str, int len);
d223 3
a225 3
	void	(*pv_reboot)(char *bootstr);
	void	(*pv_printf)(const char *fmt, ...);
	void	(*pv_abort)(void);	/* L1-A abort */
d227 2
a228 2
	void	(*pv_halt)(void) __attribute__((__noreturn__));/* Halt! */
	void	(**pv_synchook)(void);	/* "sync" command hook */
d235 2
a236 2
		void	(*v0_eval)(int len, char *str);
		void	(*v2_eval)(char *str);
d242 1
a242 1
	u_int	(*pv_enaddr)(int d, char *enaddr);
d260 1
a260 1
	void	(*pv_setctxt)(int ctxt, caddr_t va, int pmeg);
d266 5
a270 5
	int	(*pv_v3cpustart)(u_int module, u_int ctxtbl,
				      int context, caddr_t pc);
	int 	(*pv_v3cpustop)(u_int module);
	int	(*pv_v3cpuidle)(u_int module);
	int 	(*pv_v3cpuresume)(u_int module);
d308 2
a309 2
	int	(*no_nextnode)(int node);	/* next(node) */
	int	(*no_child)(int node);	/* first child */
d316 5
a320 5
	int	(*no_proplen)(int node, caddr_t name);
	int	(*no_getprop)(int node, caddr_t name, caddr_t val);
	int	(*no_setprop)(int node, caddr_t name, caddr_t val,
				   int len);
	caddr_t	(*no_nextprop)(int node, caddr_t name);
d323 2
a324 2
__dead void	romhalt(void);
__dead void	romboot(char *);
@


1.5.12.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_openprom.h,v 1.5.12.3 2002/03/28 10:57:10 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5.12.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d282 1
a282 1
 * sometimes not, depending on the interface version; v0 seems to
@


1.4
log
@netbsd port, now we merge our changes back in
@
text
@d1 1
@


1.3
log
@wrap function protos in __P()
@
text
@d1 1
a1 1
/*	$NetBSD: bsd_openprom.h,v 1.3 1995/09/04 09:53:53 pk Exp $ */
d42 6
d79 6
a84 6
	int	(*v0_rbdev) __P((int d, int nblks, int blkno, caddr_t addr));
	int	(*v0_wbdev) __P((int d, int nblks, int blkno, caddr_t addr));
	int	(*v0_wnet) __P((int d, int nbytes, caddr_t addr));
	int	(*v0_rnet) __P((int d, int nbytes, caddr_t addr));
	int	(*v0_rcdev) __P((int d, int nbytes, int, caddr_t addr));
	int	(*v0_wcdev) __P((int d, int nbytes, int, caddr_t addr));
d106 1
a106 1
	caddr_t	(*v2_malloc) __P((caddr_t va, u_int sz));
d116 2
a117 2
	int	(*v2_read) __P((int d, caddr_t buf, int nbytes));
	int	(*v2_write) __P((int d, caddr_t buf, int nbytes));
d120 2
a121 2
	void	(*v2_xxx2) __P(());		/* ??? */
	void	(*v2_xxx3) __P(());		/* ??? */
d226 1
a226 1
	__dead void (*pv_halt) __P((void));	/* Halt! */
d260 11
a270 7

	/* OpenPROM V3 SMP cpu-control directives. */
	int     (*pv_cpustart) __P((int cpu_node, caddr_t ctxttbl_paddr,
			       int ctxt, caddr_t pc));
	int     (*pv_cpustop) __P((int cpu_node));
	int     (*pv_cpuidle) __P((int cpu_node));
	int     (*pv_cpuresume) __P((int cpu_node));
d317 2
a318 1
	int	(*no_setprop) __P((int node, caddr_t name, caddr_t val, int len));
d321 7
@


1.2
log
@Added V3 SMP function pointers to romvec.
@
text
@d71 9
a79 9
	int	(*v0_open)(char *dev);
	int	(*v0_close)(int d);
	int	(*v0_rbdev)(int d, int nblks, int blkno, caddr_t addr);	
	int	(*v0_wbdev)(int d, int nblks, int blkno, caddr_t addr);	
	int	(*v0_wnet)(int d, int nbytes, caddr_t addr);
	int	(*v0_rnet)(int d, int nbytes, caddr_t addr);
	int	(*v0_rcdev)(int d, int nbytes, int, caddr_t addr);
	int	(*v0_wcdev)(int d, int nbytes, int, caddr_t addr);
	int	(*v0_seek)(int d, long offset, int whence);
d97 1
a97 1
	int	(*v2_fd_phandle)(int d);
d100 2
a101 2
	caddr_t	(*v2_malloc)(caddr_t va, u_int sz);
	void	(*v2_free)(caddr_t va, u_int sz);
d104 2
a105 2
	caddr_t	(*v2_mmap)(caddr_t va, int asi, u_int pa, u_int sz);
	void	(*v2_munmap)(caddr_t va, u_int sz);
d108 5
a112 5
	int	(*v2_open)(char *devpath);
	void	(*v2_close)(int d);
	int	(*v2_read)(int d, caddr_t buf, int nbytes);
	int	(*v2_write)(int d, caddr_t buf, int nbytes);
	void	(*v2_seek)(int d, int hi, int lo);
d114 2
a115 2
	void	(*v2_xxx2)();		/* ??? */
	void	(*v2_xxx3)();		/* ??? */
d205 2
a206 2
	int	(*pv_getchar)(void);
	void	(*pv_putchar)(int ch);
d209 2
a210 2
	int	(*pv_nbgetchar)(void);
	int	(*pv_nbputchar)(int ch);
d213 1
a213 1
	void	(*pv_putstr)(char *str, int len);
d216 3
a218 3
	void	(*pv_reboot)(char *bootstr);
	void	(*pv_printf)(const char *fmt, ...);
	void	(*pv_abort)(void);	/* L1-A abort */
d220 2
a221 2
	__dead void (*pv_halt)(void);	/* Halt! */
	void	(**pv_synchook)(void);	/* "sync" command hook */
d228 2
a229 2
		void	(*v0_eval)(int len, char *str);
		void	(*v2_eval)(char *str);
d235 1
a235 1
	u_int	(*pv_enaddr)(int d, char *enaddr);
d253 1
a253 1
	void	(*pv_setctxt)(int ctxt, caddr_t va, int pmeg);
d256 5
a260 5
	int     (*pv_cpustart)(int cpu_node, caddr_t ctxttbl_paddr,
			       int ctxt, caddr_t pc);
	int     (*pv_cpustop)(int cpu_node);
	int     (*pv_cpuidle)(int cpu_node);
	int     (*pv_cpuresume)(int cpu_node);
d297 2
a298 2
	int	(*no_nextnode)(int node);	/* next(node) */
	int	(*no_child)(int node);	/* first child */
d305 4
a308 4
	int	(*no_proplen)(int node, caddr_t name);
	int	(*no_getprop)(int node, caddr_t name, caddr_t val);
	int	(*no_setprop)(int node, caddr_t name, caddr_t val, int len);
	caddr_t	(*no_nextprop)(int node, caddr_t name);
@


1.1
log
@Initial revision
@
text
@d254 7
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
