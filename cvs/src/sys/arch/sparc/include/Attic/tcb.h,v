head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2;
locks; strict;
comment	@ * @;


1.5
date	2016.09.01.09.23.42;	author tedu;	state dead;
branches;
next	1.4;
commitid	Q2PxaFNhqAe0Wmla;

1.4
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.08.22.46.07;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.19.06.48.56;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.15.23.35.29;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: tcb.h,v 1.4 2014/03/29 18:09:30 guenther Exp $	*/

/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MACHINE_TCB_H_
#define _MACHINE_TCB_H_

#ifdef _KERNEL

#include <machine/reg.h>

/*
 * In userspace, register %g7 contains the address of the thread's TCB
 */
#define TCB_GET(p)		\
	((void *)(p)->p_md.md_tf->tf_global[7])
#define TCB_SET(p, addr)	\
	((p)->p_md.md_tf->tf_global[7] = (int)(addr))

#else /* _KERNEL */

/* ELF TLS ABI calls for big TCB, with static TLS data at negative offsets */
#define TLS_VARIANT	2

#if 0	/* XXX perhaps use the gcc global register extension? */
struct thread_control_block;
__register__ struct thread_control_block *__tcb __asm__ ("%g7");
#define TCB_GET()		(__tcb)
#define TCB_GET_MEMBER(member)	((void *)(__tcb->member))
#define TCB_SET(tcb)		((__tcb) = (tcb))

#else

#include <stddef.h>		/* for offsetof */

/* Get a pointer to the TCB itself */
static inline void *
__sparc_get_tcb(void)
{
	void *val;
	__asm__ ("mov %%g7, %0" : "=r" (val));
	return val;
}
#define TCB_GET()		__sparc_get_tcb()

/* Get the value of a specific member in the TCB */
static inline void *
__sparc_read_tcb(int offset)
{
	void	*val;
	__asm__ ("ld [%%g7 + %1], %0" : "=r" (val) : "r" (offset));
	return val;
}
#define TCB_GET_MEMBER(member)	\
	__sparc_read_tcb(offsetof(struct thread_control_block, member))

#define TCB_SET(tcb)	__asm volatile("mov %0, %%g7" : : "r" (tcb))

#endif /* 0 */

#endif /* _KERNEL */

#endif /* _MACHINE_TCB_H_ */
@


1.4
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.3 2011/11/08 22:46:07 kettenis Exp $	*/
@


1.3
log
@Make the userland bits actually compile.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.2 2011/10/19 06:48:56 guenther Exp $	*/
d71 1
a71 1
#define TCB_SET(tcb)	__asm __volatile("mov %0, %%g7" : : "r" (tcb))
@


1.2
log
@Oh yeah, a cvs id is good
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
a62 1
__sparc_get_tcb(int offset)
d69 1
a69 1
	__sparc_get_tcb(offsetof(struct thread_control_block, member))
d71 1
a71 1
#define TCB_SET(tcb)	(__asm __volatile("mov %0, %%g7" : : "r" (tcb)))
@


1.1
log
@"TLS-lite": add kernel support for a per-thread userspace pointer,
for pointing to the thread-control-block.  Support for mapping this
to the correct hardware register can be added as it's finished;
start with support for amd64, sparc, and sparc64.  Includes syscalls
for getting and setting it (for a portable __errno implementation) as
well as creating a new thread with an initial value for it.

discussed with miod@@, kettenis@@, deraadt@@; committing to get the syscalls
in with the impending libc bump and do further refinements in tree
@
text
@d1 2
@

