head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2014.12.04.01.50.39;	author dlg;	state Exp;
branches;
next	1.7;
commitid	4iLQFUrUZow6K8D1;

1.7
date	2014.09.30.05.07.51;	author dlg;	state Exp;
branches;
next	1.6;
commitid	0oHSoPEe8nCkAecq;

1.6
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.21.03.03.24;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.27.19.22.47;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.19.17.18.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.06.17.13.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@split the word ops into int and longs so things that care a lot
about types are happy.

ok jsg@@
@
text
@/*	$OpenBSD: atomic.h,v 1.7 2014/09/30 05:07:51 dlg Exp $	*/

/* Public Domain */

#ifndef _MACHINE_ATOMIC_H_
#define _MACHINE_ATOMIC_H_

#if defined(_KERNEL)

#include <machine/psl.h>

static inline unsigned int
_atomic_cas_uint(volatile unsigned int *uip, unsigned int o, unsigned int n)
{
	int psr;
	unsigned int rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip;
	if (rv == o)
		*uip = n;
	setpsr(psr);

	return (rv);
}
#define atomic_cas_uint(_p, _o, _n) _atomic_cas_uint((_p), (_o), (_n))

static inline unsigned long
_atomic_cas_ulong(volatile unsigned long *uip, unsigned long o, unsigned long n)
{
	int psr;
	unsigned long rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip;
	if (rv == o)
		*uip = n;
	setpsr(psr);

	return (rv);
}
#define atomic_cas_ulong(_p, _o, _n) _atomic_cas_ulong((_p), (_o), (_n))

static inline void *
_atomic_cas_ptr(volatile void *uip, void *o, void *n)
{
	int psr;
	void * volatile *uipp = (void * volatile *)uip;
	void *rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uipp;
	if (rv == o)
		*uipp = n;
	setpsr(psr);

	return (rv);
}
#define atomic_cas_ptr(_p, _o, _n) _atomic_cas_ptr((_p), (_o), (_n))

static inline unsigned int
_atomic_swap_uint(volatile unsigned int *uip, unsigned int n)
{
	int psr;
	unsigned int rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip;
	*uip = n;
	setpsr(psr);

	return (rv);
}
#define atomic_swap_uint(_p, _n) _atomic_swap_uint((_p), (_n))

static inline unsigned long
_atomic_swap_ulong(volatile unsigned long *uip, unsigned long n)
{
	int psr;
	unsigned long rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip;
	*uip = n;
	setpsr(psr);

	return (rv);
}
#define atomic_swap_ulong(_p, _n) _atomic_swap_ulong((_p), (_n))

static inline void *
_atomic_swap_ptr(volatile void *uip, void *n)
{
	int psr;
	void * volatile *uipp = (void * volatile *)uip;
	void *rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uipp;
	*uipp = n;
	setpsr(psr);

	return (rv);
}
#define atomic_swap_ptr(_p, _o, _n) _atomic_swap_ptr((_p), (_o), (_n))

static inline unsigned int
_atomic_add_int_nv(volatile unsigned int *uip, unsigned int v)
{
	int psr;
	unsigned int rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip + v;
	*uip = rv;
	setpsr(psr);

	return (rv);
}
#define atomic_add_int_nv(_p, _v) _atomic_add_int_nv((_p), (_v))

static inline unsigned long
_atomic_add_long_nv(volatile unsigned long *uip, unsigned long v)
{
	int psr;
	unsigned long rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip + v;
	*uip = rv;
	setpsr(psr);

	return (rv);
}
#define atomic_add_long_nv(_p, _v) _atomic_add_long_nv((_p), (_v))

static inline unsigned int
_atomic_sub_int_nv(volatile unsigned int *uip, unsigned int v)
{
	int psr;
	unsigned int rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip - v;
	*uip = rv;
	setpsr(psr);

	return (rv);
}
#define atomic_sub_int_nv(_p, _v) _atomic_sub_int_nv((_p), (_v))

static inline unsigned long
_atomic_sub_long_nv(volatile unsigned long *uip, unsigned long v)
{
	int psr;
	unsigned long rv;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	rv = *uip - v;
	*uip = rv;
	setpsr(psr);

	return (rv);
}
#define atomic_sub_long_nv(_p, _v) _atomic_sub_long_nv((_p), (_v))

static inline void
atomic_setbits_int(volatile unsigned int *uip, unsigned int v)
{
	int psr;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	*uip |= v;
	setpsr(psr);
}

static inline void
atomic_clearbits_int(volatile unsigned int *uip, unsigned int v)
{
	int psr;

	psr = getpsr();
	setpsr(psr | PSR_PIL);
	*uip &= ~v;
	setpsr(psr);
}

#endif /* defined(_KERNEL) */
#endif /* _MACHINE_ATOMIC_H_ */
@


1.7
log
@implement the atomic_shizz(9) bits.

sparc lacks cool opcodes, but is only uniprocessor, so these are done with
simple critical sections.

tested by miod@@ bcook@@
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.6 2014/03/29 18:09:30 guenther Exp $	*/
d13 1
a13 1
_atomic_cas_word(volatile unsigned int *uip, unsigned int o, unsigned int n)
d27 18
a44 2
#define atomic_cas_uint(_p, _o, _n) _atomic_cas_word((_p), (_o), (_n))
#define atomic_cas_ulong(_p, _o, _n) _atomic_cas_word((_p), (_o), (_n))
d65 1
a65 1
_atomic_swap_word(volatile unsigned int *uip, unsigned int n)
d78 17
a94 2
#define atomic_swap_uint(_p, _n) _atomic_swap_word((_p), (_n))
#define atomic_swap_ulong(_p, _n) _atomic_swap_word((_p), (_n))
d114 1
a114 1
_atomic_add_word_nv(volatile unsigned int *uip, unsigned int v)
d127 17
a143 2
#define atomic_add_int_nv(_p, _v) _atomic_add_word_nv((_p), (_v))
#define atomic_add_long_nv(_p, _v) _atomic_add_word_nv((_p), (_v))
d146 1
a146 1
_atomic_sub_word_nv(volatile unsigned int *uip, unsigned int v)
d159 17
a175 2
#define atomic_sub_int_nv(_p, _v) _atomic_sub_word_nv((_p), (_v))
#define atomic_sub_long_nv(_p, _v) _atomic_sub_word_nv((_p), (_v))
@


1.6
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.5 2011/03/23 16:54:37 pirofti Exp $	*/
d12 105
a116 1
static __inline void
d127 1
a127 1
static __inline void
@


1.5
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.4 2010/04/21 03:03:24 deraadt Exp $	*/
d13 1
a13 1
atomic_setbits_int(__volatile unsigned int *uip, unsigned int v)
d24 1
a24 1
atomic_clearbits_int(__volatile unsigned int *uip, unsigned int v)
@


1.4
log
@more cleanup to cope with the change that tries to make proc.h not act
like it is everything.h
ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.3 2007/04/27 19:22:47 miod Exp $	*/
d5 2
a6 2
#ifndef __SPARC_ATOMIC_H__
#define __SPARC_ATOMIC_H__
d35 1
a35 1
#endif /* __SPARC_ATOMIC_H__ */
@


1.3
log
@Disable interrupts around bit operations; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.2 2007/02/19 17:18:43 deraadt Exp $	*/
d9 2
@


1.2
log
@only make this interface available to the kernel for now, discussed witha
rt and such; tested and ok miod drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.1 2007/02/06 17:13:33 art Exp $	*/
d13 4
d18 1
d24 4
d29 1
@


1.1
log
@Add machine/atomic.h to all architectures and define two operations
right now that are supposed to be atomic with respect to interrupts and
SMP: atomic_setbits_int and atomic_clearbits_int.

All architectures other than i386 and amd64 get dummy implementations
since at first we'll be replacing operations that are done with
"a |= bit" and "a &= ~bit" today. More proper implementations will follow

kettenis@@, miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 2
d22 2
a23 1
#endif
@

