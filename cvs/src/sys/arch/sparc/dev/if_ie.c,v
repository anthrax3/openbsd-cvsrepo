head	1.63;
access;
symbols
	OPENBSD_6_0:1.63.0.2
	OPENBSD_6_0_BASE:1.63
	OPENBSD_5_9:1.61.0.2
	OPENBSD_5_9_BASE:1.61
	OPENBSD_5_8:1.53.0.4
	OPENBSD_5_8_BASE:1.53
	OPENBSD_5_7:1.50.0.2
	OPENBSD_5_7_BASE:1.50
	OPENBSD_5_6:1.47.0.4
	OPENBSD_5_6_BASE:1.47
	OPENBSD_5_5:1.45.0.4
	OPENBSD_5_5_BASE:1.45
	OPENBSD_5_4:1.42.0.4
	OPENBSD_5_4_BASE:1.42
	OPENBSD_5_3:1.42.0.2
	OPENBSD_5_3_BASE:1.42
	OPENBSD_5_2:1.41.0.10
	OPENBSD_5_2_BASE:1.41
	OPENBSD_5_1_BASE:1.41
	OPENBSD_5_1:1.41.0.8
	OPENBSD_5_0:1.41.0.6
	OPENBSD_5_0_BASE:1.41
	OPENBSD_4_9:1.41.0.4
	OPENBSD_4_9_BASE:1.41
	OPENBSD_4_8:1.41.0.2
	OPENBSD_4_8_BASE:1.41
	OPENBSD_4_7:1.40.0.2
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.39.0.6
	OPENBSD_4_6_BASE:1.39
	OPENBSD_4_5:1.39.0.2
	OPENBSD_4_5_BASE:1.39
	OPENBSD_4_4:1.37.0.8
	OPENBSD_4_4_BASE:1.37
	OPENBSD_4_3:1.37.0.6
	OPENBSD_4_3_BASE:1.37
	OPENBSD_4_2:1.37.0.4
	OPENBSD_4_2_BASE:1.37
	OPENBSD_4_1:1.37.0.2
	OPENBSD_4_1_BASE:1.37
	OPENBSD_4_0:1.36.0.2
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.33.0.2
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.32.0.2
	OPENBSD_3_8_BASE:1.32
	OPENBSD_3_7:1.29.0.2
	OPENBSD_3_7_BASE:1.29
	OPENBSD_3_6:1.27.0.4
	OPENBSD_3_6_BASE:1.27
	SMP_SYNC_A:1.27
	SMP_SYNC_B:1.27
	OPENBSD_3_5:1.27.0.2
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.26.0.4
	OPENBSD_3_4_BASE:1.26
	UBC_SYNC_A:1.26
	OPENBSD_3_3:1.26.0.2
	OPENBSD_3_3_BASE:1.26
	OPENBSD_3_2:1.24.0.2
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.23.0.2
	OPENBSD_3_1_BASE:1.23
	UBC_SYNC_B:1.24
	UBC:1.22.0.2
	UBC_BASE:1.22
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.12.0.8
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.4
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.63
date	2016.03.29.13.39.53;	author dlg;	state Exp;
branches;
next	1.62;
commitid	sMik10vD5jwiYFPh;

1.62
date	2016.03.16.15.41.10;	author krw;	state Exp;
branches;
next	1.61;
commitid	JEVxsRygqcjPtWTf;

1.61
date	2015.12.08.13.34.22;	author tedu;	state Exp;
branches;
next	1.60;
commitid	J9apD0jq2AjFmqZc;

1.60
date	2015.11.25.11.20.38;	author mpi;	state Exp;
branches;
next	1.59;
commitid	f4dx5ry1aOiKJw33;

1.59
date	2015.11.25.03.09.58;	author dlg;	state Exp;
branches;
next	1.58;
commitid	B0kwmVGiD5DVx4kv;

1.58
date	2015.11.24.17.11.38;	author mpi;	state Exp;
branches;
next	1.57;
commitid	5gdEnqVoJuTuwdTu;

1.57
date	2015.11.24.13.33.18;	author mpi;	state Exp;
branches;
next	1.56;
commitid	5DvsamK0GblTp8ww;

1.56
date	2015.11.14.17.26.40;	author mpi;	state Exp;
branches;
next	1.55;
commitid	BU9j1tIQLqhcXEX9;

1.55
date	2015.11.06.12.14.13;	author dlg;	state Exp;
branches;
next	1.54;
commitid	cmpxL6xFQxsHvONI;

1.54
date	2015.10.25.13.22.09;	author mpi;	state Exp;
branches;
next	1.53;
commitid	n8mxDftG1cK0Rpp7;

1.53
date	2015.06.24.09.40.53;	author mpi;	state Exp;
branches;
next	1.52;
commitid	MVWrtktB46JRxFWT;

1.52
date	2015.05.25.12.40.04;	author miod;	state Exp;
branches;
next	1.51;
commitid	K3UdRtPiWHopKkvs;

1.51
date	2015.04.07.10.46.20;	author mpi;	state Exp;
branches;
next	1.50;
commitid	m3c6YErI0cVMQeYc;

1.50
date	2015.01.11.15.35.38;	author miod;	state Exp;
branches;
next	1.49;
commitid	JX0BWmUU0FsoIxAQ;

1.49
date	2014.12.22.02.26.54;	author tedu;	state Exp;
branches;
next	1.48;
commitid	2Ez9mHW0jDzojG4V;

1.48
date	2014.11.16.12.30.58;	author deraadt;	state Exp;
branches;
next	1.47;
commitid	yv0ECmCdICvq576h;

1.47
date	2014.07.22.10.35.35;	author mpi;	state Exp;
branches;
next	1.46;
commitid	EXpEDqO4x724IPl8;

1.46
date	2014.07.09.09.30.49;	author henning;	state Exp;
branches;
next	1.45;
commitid	Nnxg8ONtI4Ep9pUb;

1.45
date	2013.11.28.22.18.52;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2013.11.27.08.56.31;	author mpi;	state Exp;
branches;
next	1.43;

1.43
date	2013.09.05.20.55.58;	author bluhm;	state Exp;
branches;
next	1.42;

1.42
date	2012.10.10.04.52.16;	author camield;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.21.03.03.26;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2009.10.31.14.31.11;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2008.11.28.02.44.17;	author brad;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.02.20.21.13;	author brad;	state Exp;
branches;
next	1.37;

1.37
date	2006.12.03.16.35.25;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.27.23.59.07;	author jason;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.16.00.46.32;	author pascoe;	state Exp;
branches;
next	1.34;

1.34
date	2006.03.25.22.41.41;	author djm;	state Exp;
branches;
next	1.33;

1.33
date	2006.01.15.19.49.25;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2005.07.31.03.52.19;	author pascoe;	state Exp;
branches;
next	1.31;

1.31
date	2005.06.08.17.03.02;	author henning;	state Exp;
branches;
next	1.30;

1.30
date	2005.03.23.17.14.43;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2005.01.15.05.24.10;	author brad;	state Exp;
branches;
next	1.28;

1.28
date	2004.09.29.07.35.11;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2003.11.14.19.05.36;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.03.19.45.53;	author jason;	state Exp;
branches;
next	1.25;

1.25
date	2002.11.10.21.23.06;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.30.01.12.29;	author art;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2001.12.08.02.24.07;	author art;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2001.11.29.11.29.58;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2001.11.28.16.13.29;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.25.13.25.33;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.23.22.03.03;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.08.08.09.24;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.10.10.34.44;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.24.10.07.18;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.20.19.39.33;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	99.09.06.07.13.06;	author art;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	99.07.09.21.34.45;	author art;	state Exp;
branches;
next	1.10;

1.10
date	99.04.22.16.57.54;	author art;	state Exp;
branches;
next	1.9;

1.9
date	99.03.01.20.45.10;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	99.01.11.05.11.55;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.08.08.08.25.09;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	96.08.11.05.34.20;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.05.05.13.37.47;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	95.12.27.22.46.49;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.12.15.13.56.24;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.17.14.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.39;	author deraadt;	state Exp;
branches;
next	;

1.12.4.1
date	2001.05.14.21.37.06;	author niklas;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2001.07.04.10.23.24;	author niklas;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2001.10.31.03.07.56;	author nate;	state Exp;
branches;
next	1.12.4.4;

1.12.4.4
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.12.4.5;

1.12.4.5
date	2001.12.05.00.39.13;	author niklas;	state Exp;
branches;
next	1.12.4.6;

1.12.4.6
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.12.4.7;

1.12.4.7
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.12.4.8;

1.12.4.8
date	2003.03.27.23.49.25;	author niklas;	state Exp;
branches;
next	1.12.4.9;

1.12.4.9
date	2004.02.19.10.49.57;	author niklas;	state Exp;
branches;
next	;

1.22.2.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2003.05.19.21.46.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.63
log
@make the ie(4)s bpf_mtap_ether outgoing packets like all the other drivers

ok mpi@@ claudio@@
@
text
@/*	$OpenBSD: if_ie.c,v 1.62 2016/03/16 15:41:10 krw Exp $	*/
/*	$NetBSD: if_ie.c,v 1.33 1997/07/29 17:55:38 fair Exp $	*/

/*-
 * Copyright (c) 1993, 1994, 1995 Charles Hannum.
 * Copyright (c) 1992, 1993, University of Vermont and State
 *  Agricultural College.
 * Copyright (c) 1992, 1993, Garrett A. Wollman.
 *
 * Portions:
 * Copyright (c) 1994, 1995, Rafal K. Boni
 * Copyright (c) 1990, 1991, William F. Jolitz
 * Copyright (c) 1990, The Regents of the University of California
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles Hannum, by the
 *	University of Vermont and State Agricultural College and Garrett A.
 *	Wollman, by William F. Jolitz, and by the University of California,
 *	Berkeley, Lawrence Berkeley Laboratory, and its contributors.
 * 4. Neither the names of the Universities nor the names of the authors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR AUTHORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Intel 82586 Ethernet chip
 * Register, bit, and structure definitions.
 *
 * Original StarLAN driver written by Garrett Wollman with reference to the
 * Clarkson Packet Driver code for this chip written by Russ Nelson and others.
 *
 * BPF support code taken from hpdev/if_le.c, supplied with tcpdump.
 *
 * 3C507 support is loosely based on code donated to NetBSD by Rafal Boni.
 *
 * Majorly cleaned up and 3C507 code merged by Charles Hannum.
 *
 * Converted to SUN ie driver by Charles D. Cranor,
 *		October 1994, January 1995.
 * This sun version based on i386 version 1.30.
 */

/*
 * The i82586 is a very painful chip, found in sun3's, sun-4/100's
 * sun-4/200's, and VME based suns.  The byte order is all wrong for a
 * SUN, making life difficult.  Programming this chip is mostly the same,
 * but certain details differ from system to system.  This driver is
 * written so that different "ie" interfaces can be controled by the same
 * driver.
 */

/*
Mode of operation:

   We run the 82586 in a standard Ethernet mode.  We keep NFRAMES
   received frame descriptors around for the receiver to use, and
   NRXBUF associated receive buffer descriptors, both in a circular
   list.  Whenever a frame is received, we rotate both lists as
   necessary.  (The 586 treats both lists as a simple queue.)  We also
   keep a transmit command around so that packets can be sent off
   quickly.

   We configure the adapter in AL-LOC = 1 mode, which means that the
   Ethernet/802.3 MAC header is placed at the beginning of the receive
   buffer rather than being split off into various fields in the RFD.
   This also means that we must include this header in the transmit
   buffer as well.

   By convention, all transmit commands, and only transmit commands,
   shall have the I (IE_CMD_INTR) bit set in the command.  This way,
   when an interrupt arrives at ieintr(), it is immediately possible
   to tell what precisely caused it.  ANY OTHER command-sending
   routines should run at splnet(), and should post an acknowledgement
   to every interrupt they generate.

*/

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/buf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <sys/timeout.h>

#include <net/if.h>

#if NBPFILTER > 0
#include <net/bpf.h>
#endif

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <uvm/uvm_extern.h>

/*
 * ugly byte-order hack for SUNs
 */

#define SWAP(x)         ((u_short)(XSWAP((u_short)(x))))
#define XSWAP(y)        ( ((y) >> 8) | ((y) << 8) )

#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <machine/pmap.h>

#include <sparc/dev/if_ie.h>
#include <sparc/dev/i82586.h>

struct vm_map *ie_map; /* for obio */

#define	IED_RINT	0x01
#define	IED_TINT	0x02
#define	IED_RNR		0x04
#define	IED_CNA		0x08
#define	IED_READFRAME	0x10
#define	IED_ALL		0x1f

#define B_PER_F         3               /* recv buffers per frame */
#define MXFRAMES        300             /* max number of recv frames */
#define	MXRXBUF		(MXFRAMES*B_PER_F) /* number of buffers to allocate */
#define	IE_RBUF_SIZE	256		/* size of each receive buffer;
						MUST BE POWER OF TWO */
#define	NTXBUF		2		/* number of transmit commands */
#define	IE_TBUF_SIZE	ETHER_MAX_LEN	/* length of transmit buffer */


enum ie_hardware {
  IE_VME,             /* multibus to VME card */
  IE_OBIO,            /* on board */
  IE_VME3E,           /* sun 3e VME card */
  IE_UNKNOWN
};

const char *ie_hardware_names[] = {
	"multibus/vme",
	"onboard",
	"3e/vme",
	"Unknown"
};

/*
 * Ethernet status, per interface.
 *
 * hardware addresses/sizes to know (all KVA):
 *   sc_iobase = base of chip's 24 bit address space
 *   sc_maddr  = base address of chip RAM as stored in ie_base of iscp
 *   sc_msize  = size of chip's RAM
 *   sc_reg    = address of card dependent registers
 *
 * the chip uses two types of pointers: 16 bit and 24 bit
 *   16 bit pointers are offsets from sc_maddr/ie_base
 *      KVA(16 bit offset) = offset + sc_maddr
 *   24 bit pointers are offset from sc_iobase in KVA
 *      KVA(24 bit address) = address + sc_iobase
 *
 * on the vme/multibus we have the page map to control where ram appears
 * in the address space.   we choose to have RAM start at 0 in the
 * 24 bit address space.   this means that sc_iobase == sc_maddr!
 * to get the phyiscal address of the board's RAM you must take the
 * top 12 bits of the physical address of the register address
 * and or in the 4 bits from the status word as bits 17-20 (remember that
 * the board ignores the chip's top 4 address lines).
 * For example:
 *   if the register is @@ 0xffe88000, then the top 12 bits are 0xffe00000.
 *   to get the 4 bits from the status word just do status & IEVME_HADDR.
 *   suppose the value is "4".   Then just shift it left 16 bits to get
 *   it into bits 17-20 (e.g. 0x40000).    Then or it to get the
 *   address of RAM (in our example: 0xffe40000).   see the attach routine!
 *
 * on the onboard ie interface the 24 bit address space is hardwired
 * to be 0xff000000 -> 0xffffffff of KVA.   this means that sc_iobase
 * will be 0xff000000.   sc_maddr will be where ever we allocate RAM
 * in KVA.    note that since the SCP is at a fixed address it means
 * that we have to allocate a fixed KVA for the SCP.
 */

struct ie_softc {
	struct device sc_dev;   /* device structure */
	struct intrhand sc_ih;  /* interrupt info */

	caddr_t sc_iobase;      /* KVA of base of 24 bit addr space */
	caddr_t sc_maddr;       /* KVA of base of chip's RAM (16bit addr sp.)*/
	u_int sc_msize;         /* how much RAM we have/use */
	caddr_t sc_reg;         /* KVA of car's register */

	struct arpcom sc_arpcom;/* system arpcom structure */

	void (*reset_586)(struct ie_softc *);
				/* card dependent reset function */
	void (*chan_attn)(struct ie_softc *);
				/* card dependent attn function */
	void (*run_586)(struct ie_softc *);
				/* card depenent "go on-line" function */
	void (*memcopy)(const void *, void *, size_t);
	                        /* card dependent memory copy function */
        void (*memzero)(void *, size_t);
	                        /* card dependent memory zero function */


	enum ie_hardware hard_type;     /* card type */

	int want_mcsetup;       /* mcsetup flag */
	int promisc;            /* are we in promisc mode? */

	/*
	 * pointers to the 3 major control structures
	 */

	volatile struct ie_sys_conf_ptr *scp;
	volatile struct ie_int_sys_conf_ptr *iscp;
	volatile struct ie_sys_ctl_block *scb;

	/*
	 * pointer and size of a block of KVA where the buffers
	 * are to be allocated from
	 */

	caddr_t buf_area;
	int buf_area_sz;

	/*
	 * the actual buffers (recv and xmit)
	 */

	volatile struct ie_recv_frame_desc *rframes[MXFRAMES];
	volatile struct ie_recv_buf_desc *rbuffs[MXRXBUF];
	volatile char *cbuffs[MXRXBUF];
        int rfhead, rftail, rbhead, rbtail;

	volatile struct ie_xmit_cmd *xmit_cmds[NTXBUF];
	volatile struct ie_xmit_buf *xmit_buffs[NTXBUF];
	u_char *xmit_cbuffs[NTXBUF];
	int xmit_busy;
	int xmit_free;
	int xchead, xctail;

	struct ie_en_addr mcast_addrs[MAXMCAST + 1];
	int mcast_count;

	int nframes;      /* number of frames in use */
	int nrxbuf;       /* number of recv buffs in use */

#ifdef IEDEBUG
	int sc_debug;
#endif
};

void ie_obreset(struct ie_softc *);
void ie_obattend(struct ie_softc *);
void ie_obrun(struct ie_softc *);
void ie_vmereset(struct ie_softc *);
void ie_vmeattend(struct ie_softc *);
void ie_vmerun(struct ie_softc *);

void iewatchdog(struct ifnet *);
int ieintr(void *);
int ieinit(struct ie_softc *);
int ieioctl(struct ifnet *, u_long, caddr_t);
void iestart(struct ifnet *);
void iereset(struct ie_softc *);
void ie_readframe(struct ie_softc *, int);
void ie_drop_packet_buffer(struct ie_softc *);
int ie_setupram(struct ie_softc *);
int command_and_wait(struct ie_softc *, int,
    void volatile *, int);
void ierint(struct ie_softc *);
void ietint(struct ie_softc *);
int ieget(struct ie_softc *, struct mbuf **);
void setup_bufs(struct ie_softc *);
int mc_setup(struct ie_softc *, void *);
void mc_reset(struct ie_softc *);
static __inline int ether_equal(u_char *, u_char *);
static __inline void ie_ack(struct ie_softc *, u_int);
static __inline void ie_setup_config(volatile struct ie_config_cmd *,
					  int, int);
static __inline int check_eh(struct ie_softc *, struct ether_header *);
static __inline int ie_buflen(struct ie_softc *, int);
static __inline int ie_packet_len(struct ie_softc *);
static __inline void iexmit(struct ie_softc *);
static __inline caddr_t Align(caddr_t);

void chan_attn_timeout(void *);
void run_tdr(struct ie_softc *, struct ie_tdr_cmd *);
void iestop(struct ie_softc *);

void wzero(void *, size_t);
void wcopy(const void *, void *, size_t);

#ifdef IEDEBUG
void print_rbd(volatile struct ie_recv_buf_desc *);

int in_ierint = 0;
int in_ietint = 0;
#endif

int iematch(struct device *, void *, void *);
void ieattach(struct device *, struct device *, void *);

struct cfattach ie_ca = {
	sizeof(struct ie_softc), iematch, ieattach
};

struct cfdriver ie_cd = {
	NULL, "ie", DV_IFNET
};

/*
 * address generation macros
 *   MK_24 = KVA -> 24 bit address in SUN byte order
 *   MK_16 = KVA -> 16 bit address in INTEL byte order
 *   ST_24 = store a 24 bit address in SUN byte order to INTEL byte order
 */
#define MK_24(base, ptr) ((caddr_t)((u_long)ptr - (u_long)base))
#define MK_16(base, ptr) SWAP((u_short)( ((u_long)(ptr)) - ((u_long)(base)) ))
#define ST_24(to, from) { \
                            u_long fval = (u_long)(from); \
                            u_char *t = (u_char *)&(to), *f = (u_char *)&fval; \
                            t[0] = f[3]; t[1] = f[2]; t[2] = f[1]; /*t[3] = f[0]
;*/ \
                        }
/*
 * Here are a few useful functions.  We could have done these as macros, but
 * since we have the inline facility, it makes sense to use that instead.
 */
static __inline void
ie_setup_config(cmd, promiscuous, manchester)
	volatile struct ie_config_cmd *cmd;
	int promiscuous, manchester;
{

	cmd->ie_config_count = 0x0c;
	cmd->ie_fifo = 8;
	cmd->ie_save_bad = 0x40;
	cmd->ie_addr_len = 0x2e;
	cmd->ie_priority = 0;
	cmd->ie_ifs = 0x60;
	cmd->ie_slot_low = 0;
	cmd->ie_slot_high = 0xf2;
	cmd->ie_promisc = !!promiscuous | manchester << 2;
	cmd->ie_crs_cdt = 0;
	cmd->ie_min_len = 64;
	cmd->ie_junk = 0xff;
}

static __inline void
ie_ack(sc, mask)
	struct ie_softc *sc;
	u_int mask;
{
	volatile struct ie_sys_ctl_block *scb = sc->scb;

	command_and_wait(sc, scb->ie_status & mask, 0, 0);
}


int
iematch(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void   *aux;
{
	struct cfdata *cf = vcf;
	struct confargs *ca = aux;
	struct romaux *ra = &ca->ca_ra;

	if (strcmp(cf->cf_driver->cd_name, ra->ra_name))	/* correct name? */
		return (0);

	switch (ca->ca_bustype) {
	case BUS_SBUS:
	default:
		return (0);
	case BUS_OBIO:
		if (probeget(ra->ra_vaddr, 1) != -1)
			return (1);
		break;
	case BUS_VME16:
	case BUS_VME32:
		if (probeget(ra->ra_vaddr, 2) != -1)
			return (1);
		break;
	}
	return (0);
}

/*
 * MULTIBUS/VME support
 */
void
ie_vmereset(sc)
	struct ie_softc *sc;
{
	volatile struct ievme *iev = (struct ievme *) sc->sc_reg;
	iev->status = IEVME_RESET;
	delay(100);		/* XXX could be shorter? */
	iev->status = 0;
}

void
ie_vmeattend(sc)
	struct ie_softc *sc;
{
	volatile struct ievme *iev = (struct ievme *) sc->sc_reg;

	iev->status |= IEVME_ATTEN;	/* flag! */
	iev->status &= ~IEVME_ATTEN;	/* down. */
}

void
ie_vmerun(sc)
	struct ie_softc *sc;
{
	volatile struct ievme *iev = (struct ievme *) sc->sc_reg;

	iev->status |= (IEVME_ONAIR | IEVME_IENAB | IEVME_PEINT);
}

/*
 * onboard ie support
 */
void
ie_obreset(sc)
	struct ie_softc *sc;
{
	volatile struct ieob *ieo = (struct ieob *) sc->sc_reg;
	ieo->obctrl = 0;
	delay(100);			/* XXX could be shorter? */
	ieo->obctrl = IEOB_NORSET;
}
void
ie_obattend(sc)
	struct ie_softc *sc;
{
	volatile struct ieob *ieo = (struct ieob *) sc->sc_reg;

	ieo->obctrl |= IEOB_ATTEN;	/* flag! */
	ieo->obctrl &= ~IEOB_ATTEN;	/* down. */
}

void
ie_obrun(sc)
	struct ie_softc *sc;
{
	volatile struct ieob *ieo = (struct ieob *) sc->sc_reg;

	ieo->obctrl |= (IEOB_ONAIR|IEOB_IENAB|IEOB_NORSET);
}

/*
 * Taken almost exactly from Bill's if_is.c, then modified beyond recognition.
 */
void
ieattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void   *aux;
{
	struct ie_softc *sc = (void *) self;
	struct confargs *ca = aux;
	struct ifnet *ifp = &sc->sc_arpcom.ac_if;
	extern void myetheraddr(u_char *);	/* should be elsewhere */
	struct bootpath *bp;
	int     pri = ca->ca_ra.ra_intr[0].int_pri;

	/*
	 * *note*: we don't detect the difference between a VME3E and
	 * a multibus/vme card.   if you want to use a 3E you'll have
	 * to fix this.
	 */

	switch (ca->ca_bustype) {
	case BUS_OBIO:
	    {
		volatile struct ieob *ieo;
		paddr_t pa;

		sc->hard_type = IE_OBIO;
		sc->reset_586 = ie_obreset;
		sc->chan_attn = ie_obattend;
		sc->run_586 = ie_obrun;
		sc->memcopy = bcopy;
		sc->memzero = bzero;
		sc->sc_msize = 65536; /* XXX */
		sc->sc_reg = mapiodev(ca->ca_ra.ra_reg, 0, sizeof(struct ieob));
		ieo = (volatile struct ieob *) sc->sc_reg;

		/*
		 * the rest of the IE_OBIO case needs to be cleaned up
		 * XXX
		 */

		ie_map = uvm_map_create(pmap_kernel(), (vaddr_t)IEOB_ADBASE,
		    (vaddr_t)IEOB_ADBASE + sc->sc_msize, VM_MAP_INTRSAFE);
		if (ie_map == NULL) panic("ie_map");
		sc->sc_maddr = (caddr_t) uvm_km_alloc(ie_map, sc->sc_msize);
		if (sc->sc_maddr == NULL) panic("ie kmem_alloc");
		kvm_uncache(sc->sc_maddr, sc->sc_msize >> PGSHIFT);
		if (((u_long)sc->sc_maddr & ~(NBPG-1)) != (u_long)sc->sc_maddr)
			panic("unaligned dvmamalloc breaks");
		sc->sc_iobase = (caddr_t)IEOB_ADBASE; /* 24 bit base addr */
		(sc->memzero)(sc->sc_maddr, sc->sc_msize);
		sc->iscp = (volatile struct ie_int_sys_conf_ptr *)
			sc->sc_maddr; /* @@ location zero */
		sc->scb = (volatile struct ie_sys_ctl_block *)
		    sc->sc_maddr + sizeof(struct ie_int_sys_conf_ptr);
		/* scb follows iscp */

		/*
		 * SCP: the scp must appear at KVA IEOB_ADBASE.  The
		 * ROM seems to have page up there, but I'm not sure all
		 * ROMs will have it there.  Also, I'm not sure if that
		 * page is on some free list somewhere or not.   Let's
		 * map the first page of the buffer we just allocated
		 * to IEOB_ADBASE to be safe.
		 */

		if (pmap_extract(pmap_kernel(), (vaddr_t)sc->sc_maddr, &pa) == FALSE)
			panic("ie pmap_extract");
		pmap_enter(pmap_kernel(), trunc_page(IEOB_ADBASE+IE_SCP_ADDR),
                    (paddr_t)pa | PMAP_NC /*| PMAP_IOC*/,
                    PROT_READ | PROT_WRITE, PMAP_WIRED);
		pmap_update(pmap_kernel());

		sc->scp = (volatile struct ie_sys_conf_ptr *)
			(IEOB_ADBASE + IE_SCP_ADDR);

		/*
		 * rest of first page is unused (wasted!), rest of ram
		 * for buffers
		 */
		sc->buf_area = sc->sc_maddr + NBPG;
		sc->buf_area_sz = sc->sc_msize - NBPG;
		break;
	    }
	case BUS_VME16:
	    {
		volatile struct ievme *iev;
		u_long  rampaddr;
		int     lcv;

		sc->hard_type = IE_VME;
		sc->reset_586 = ie_vmereset;
		sc->chan_attn = ie_vmeattend;
		sc->run_586 = ie_vmerun;
		sc->memcopy = wcopy;
		sc->memzero = wzero;
		sc->sc_msize = 65536;	/* XXX */
		sc->sc_reg = mapiodev(ca->ca_ra.ra_reg, 0,
				      sizeof(struct ievme));
		iev = (volatile struct ievme *) sc->sc_reg;
		/* top 12 bits */
		rampaddr = (u_long)ca->ca_ra.ra_paddr & 0xfff00000;
		/* 4 more */
		rampaddr = rampaddr | ((iev->status & IEVME_HADDR) << 16);
		rampaddr -= (u_long)ca->ca_ra.ra_paddr;
		sc->sc_maddr = mapiodev(ca->ca_ra.ra_reg, rampaddr,
					sc->sc_msize);
		sc->sc_iobase = sc->sc_maddr;
		iev->pectrl = iev->pectrl | IEVME_PARACK; /* clear to start */

		/*
		 * set up mappings, direct map except for last page
		 * which is mapped at zero and at high address (for
		 * scp), zero ram
		 */

		for (lcv = 0; lcv < IEVME_MAPSZ - 1; lcv++)
			iev->pgmap[lcv] = IEVME_SBORDR | IEVME_OBMEM | lcv;
		iev->pgmap[IEVME_MAPSZ - 1] = IEVME_SBORDR | IEVME_OBMEM | 0;
		(sc->memzero)(sc->sc_maddr, sc->sc_msize);

		/*
		 * set up pointers to data structures and buffer area.
		 * scp is in double mapped page... get offset into page
		 * and add to sc_maddr.
		 */
		sc->scp = (volatile struct ie_sys_conf_ptr *)
		    (sc->sc_maddr + (IE_SCP_ADDR & (IEVME_PAGESIZE - 1)));
		sc->iscp = (volatile struct ie_int_sys_conf_ptr *)
		    sc->sc_maddr;	/* iscp @@ location zero */
		sc->scb = (volatile struct ie_sys_ctl_block *)
		    sc->sc_maddr + sizeof(struct ie_int_sys_conf_ptr);
		/* scb follows iscp */

		/*
		 * rest of first page is unused, rest of ram
		 * for buffers
		 */
		sc->buf_area = sc->sc_maddr + IEVME_PAGESIZE;
		sc->buf_area_sz = sc->sc_msize - IEVME_PAGESIZE;
		break;
	    }
	default:
		printf("unknown\n");
		return;
	}

	myetheraddr(sc->sc_arpcom.ac_enaddr);

	if (ie_setupram(sc) == 0) {
		printf(": RAM CONFIG FAILED!\n");
		/* XXX should reclaim resources? */
		return;
	}
	bcopy(sc->sc_dev.dv_xname, ifp->if_xname, IFNAMSIZ);
	ifp->if_softc = sc;
	ifp->if_start = iestart;
	ifp->if_ioctl = ieioctl;
	ifp->if_watchdog = iewatchdog;
	ifp->if_flags =
	    IFF_BROADCAST | IFF_SIMPLEX | IFF_MULTICAST;

	/* Attach the interface. */
	if_attach(ifp);
	ether_ifattach(ifp);

	printf(" pri %d address %s, type %s\n", pri,
	    ether_sprintf(sc->sc_arpcom.ac_enaddr),
	    ie_hardware_names[sc->hard_type]);

	switch (ca->ca_bustype) {
#if defined(SUN4)
	case BUS_OBIO:
		sc->sc_ih.ih_fun = ieintr;
		sc->sc_ih.ih_arg = sc;
		intr_establish(pri, &sc->sc_ih, IPL_NET, self->dv_xname);
		break;
	case BUS_VME16:
	case BUS_VME32:
		sc->sc_ih.ih_fun = ieintr;
		sc->sc_ih.ih_arg = sc;
		vmeintr_establish(ca->ca_ra.ra_intr[0].int_vec, pri,
		    &sc->sc_ih, IPL_NET, self->dv_xname);
		break;
#endif /* SUN4 */
	}

	bp = ca->ca_ra.ra_bp;
	if (bp != NULL && strcmp(bp->name, "ie") == 0 &&
	    sc->sc_dev.dv_unit == bp->val[1])
		bp->dev = &sc->sc_dev;
}



/*
 * Device timeout/watchdog routine.  Entered if the device neglects to generate
 * an interrupt after a transmit has been started on it.
 */
void
iewatchdog(ifp)
	struct ifnet *ifp;
{
	struct ie_softc *sc = ifp->if_softc;

	log(LOG_ERR, "%s: device timeout\n", sc->sc_dev.dv_xname);
	++sc->sc_arpcom.ac_if.if_oerrors;

	iereset(sc);
}

/*
 * What to do upon receipt of an interrupt.
 */
int
ieintr(v)
void *v;
{
	struct ie_softc *sc = v;
	u_short status;

	status = sc->scb->ie_status;

        /*
         * check for parity error
         */
        if (sc->hard_type == IE_VME) {
                volatile struct ievme *iev = (volatile struct ievme *)sc->sc_reg
;
                if (iev->status & IEVME_PERR) {
                        printf("%s: parity error (ctrl 0x%x @@ 0x%02x%04x)\n",
                               sc->sc_dev.dv_xname, iev->pectrl,
			       iev->pectrl & IEVME_HADDR, iev->peaddr);
                        iev->pectrl = iev->pectrl | IEVME_PARACK;
                }
        }


loop:
	/* Ack interrupts FIRST in case we receive more during the ISR. */
	ie_ack(sc, IE_ST_WHENCE & status);

	if (status & (IE_ST_RECV | IE_ST_RNR)) {
#ifdef IEDEBUG
		in_ierint++;
		if (sc->sc_debug & IED_RINT)
			printf("%s: rint\n", sc->sc_dev.dv_xname);
#endif
		ierint(sc);
#ifdef IEDEBUG
		in_ierint--;
#endif
	}

	if (status & IE_ST_DONE) {
#ifdef IEDEBUG
		in_ietint++;
		if (sc->sc_debug & IED_TINT)
			printf("%s: tint\n", sc->sc_dev.dv_xname);
#endif
		ietint(sc);
#ifdef IEDEBUG
		in_ietint--;
#endif
	}

	if (status & IE_ST_RNR) {
		printf("%s: receiver not ready\n", sc->sc_dev.dv_xname);
		sc->sc_arpcom.ac_if.if_ierrors++;
		iereset(sc);
	}

#ifdef IEDEBUG
	if ((status & IE_ST_ALLDONE) && (sc->sc_debug & IED_CNA))
		printf("%s: cna\n", sc->sc_dev.dv_xname);
#endif

	if ((status = sc->scb->ie_status) & IE_ST_WHENCE)
		goto loop;

	return 1;
}

/*
 * Process a received-frame interrupt.
 */
void
ierint(sc)
	struct ie_softc *sc;
{
	volatile struct ie_sys_ctl_block *scb = sc->scb;
	int i, status;
	static int timesthru = 1024;

	i = sc->rfhead;
	for (;;) {
		status = sc->rframes[i]->ie_fd_status;

		if ((status & IE_FD_COMPLETE) && (status & IE_FD_OK)) {
			if (!--timesthru) {
				sc->sc_arpcom.ac_if.if_ierrors +=
				    SWAP(scb->ie_err_crc) +
				    SWAP(scb->ie_err_align) +
				    SWAP(scb->ie_err_resource) +
				    SWAP(scb->ie_err_overrun);
				scb->ie_err_crc = scb->ie_err_align =
				    scb->ie_err_resource = scb->ie_err_overrun =
				    0;
				timesthru = 1024;
			}
			ie_readframe(sc, i);
		} else {
			if ((status & IE_FD_RNR) != 0 &&
			    (scb->ie_status & IE_RU_READY) == 0) {
				sc->rframes[0]->ie_fd_buf_desc =
					MK_16(sc->sc_maddr, sc->rbuffs[0]);
				scb->ie_recv_list =
				  MK_16(sc->sc_maddr, sc->rframes[0]);
				command_and_wait(sc, IE_RU_START, 0, 0);
			}
			break;
		}
		i = (i + 1) % sc->nframes;
	}
}

/*
 * Process a command-complete interrupt.  These are only generated by the
 * transmission of frames.  This routine is deceptively simple, since most of
 * the real work is done by iestart().
 */
void
ietint(sc)
	struct ie_softc *sc;
{
	int status;

	sc->sc_arpcom.ac_if.if_timer = 0;
	ifq_clr_oactive(&sc->sc_arpcom.ac_if.if_snd);

	status = sc->xmit_cmds[sc->xctail]->ie_xmit_status;

	if (!(status & IE_STAT_COMPL) || (status & IE_STAT_BUSY))
		printf("ietint: command still busy!\n");

	if (status & IE_STAT_OK) {
		sc->sc_arpcom.ac_if.if_opackets++;
		sc->sc_arpcom.ac_if.if_collisions +=
		  SWAP(status & IE_XS_MAXCOLL);
	} else if (status & IE_STAT_ABORT) {
		sc->sc_arpcom.ac_if.if_oerrors++;
	} else if (status & IE_XS_NOCARRIER) {
		sc->sc_arpcom.ac_if.if_oerrors++;
	} else if (status & IE_XS_LOSTCTS) {
		sc->sc_arpcom.ac_if.if_oerrors++;
	} else if (status & IE_XS_UNDERRUN) {
		sc->sc_arpcom.ac_if.if_oerrors++;
	} else if (status & IE_XS_EXCMAX) {
		sc->sc_arpcom.ac_if.if_collisions += 16;
		sc->sc_arpcom.ac_if.if_oerrors++;
	}

	/*
	 * If multicast addresses were added or deleted while transmitting,
	 * mc_reset() set the want_mcsetup flag indicating that we should do
	 * it.
	 */
	if (sc->want_mcsetup) {
		mc_setup(sc, (caddr_t)sc->xmit_cbuffs[sc->xctail]);
		sc->want_mcsetup = 0;
	}

	/* Done with the buffer. */
	sc->xmit_free++;
	sc->xmit_busy = 0;
	sc->xctail = (sc->xctail + 1) % NTXBUF;

	iestart(&sc->sc_arpcom.ac_if);
}

/*
 * Compare two Ether/802 addresses for equality, inlined and unrolled for
 * speed.  I'd love to have an inline assembler version of this...
 */
static __inline int
ether_equal(one, two)
	u_char *one, *two;
{

	if (one[0] != two[0] || one[1] != two[1] || one[2] != two[2] ||
	    one[3] != two[3] || one[4] != two[4] || one[5] != two[5])
		return 0;
	return 1;
}

/*
 * Check for a valid address.
 * Return value is true if the packet is for us, and false otherwise.
 */
static __inline int
check_eh(sc, eh)
	struct ie_softc *sc;
	struct ether_header *eh;
{
	int i;

	switch(sc->promisc) {
	case IFF_ALLMULTI:
		/*
		 * Receiving all multicasts, but no unicasts except those
		 * destined for us.
		 */
		if (eh->ether_dhost[0] & 1)
			return 1;
		if (ether_equal(eh->ether_dhost, sc->sc_arpcom.ac_enaddr)) return 1;
		return 0;

	case IFF_PROMISC:
		/*
		 * Receiving all packets.  These need to be passed on to BPF.
		 */
		/* If for us, accept and hand up to BPF */
		if (ether_equal(eh->ether_dhost, sc->sc_arpcom.ac_enaddr)) return 1;

		/*
		 * Not a multicast, so BPF wants to see it but we don't.
		 */
		if (!(eh->ether_dhost[0] & 1))
			return 1;

		/*
		 * If it's one of our multicast groups, accept it and pass it
		 * up.
		 */
		for (i = 0; i < sc->mcast_count; i++) {
			if (ether_equal(eh->ether_dhost, (u_char *)&sc->mcast_addrs[i])) {
				return 1;
			}
		}
		return 1;

	case IFF_ALLMULTI | IFF_PROMISC:
		/* We want to see multicasts. */
		if (eh->ether_dhost[0] & 1)
			return 1;

		/* We want to see our own packets */
		if (ether_equal(eh->ether_dhost, sc->sc_arpcom.ac_enaddr))
			return 1;

		/* Anything else goes to BPF but nothing else. */
		return 1;

	default:
		/*
		 * Only accept unicast packets destined for us, or multicasts
		 * for groups that we belong to.  For now, we assume that the
		 * '586 will only return packets that we asked it for.  This
		 * isn't strictly true (it uses hashing for the multicast
		 * filter), but it will do in this case, and we want to get out
		 * of here as quickly as possible.
		 */
		return 1;
	}
	return 0;
}

/*
 * We want to isolate the bits that have meaning...  This assumes that
 * IE_RBUF_SIZE is an even power of two.  If somehow the act_len exceeds
 * the size of the buffer, then we are screwed anyway.
 */
static __inline int
ie_buflen(sc, head)
	struct ie_softc *sc;
	int head;
{

	return (SWAP(sc->rbuffs[head]->ie_rbd_actual)
	    & (IE_RBUF_SIZE | (IE_RBUF_SIZE - 1)));
}

static __inline int
ie_packet_len(sc)
	struct ie_softc *sc;
{
	int i;
	int head = sc->rbhead;
	int acc = 0;

	do {
		if (!(sc->rbuffs[sc->rbhead]->ie_rbd_actual & IE_RBD_USED)) {
#ifdef IEDEBUG
			print_rbd(sc->rbuffs[sc->rbhead]);
#endif
			log(LOG_ERR, "%s: receive descriptors out of sync at %d\n",
			    sc->sc_dev.dv_xname, sc->rbhead);
			iereset(sc);
			return -1;
		}

		i = sc->rbuffs[head]->ie_rbd_actual & IE_RBD_LAST;

		acc += ie_buflen(sc, head);
		head = (head + 1) % sc->nrxbuf;
	} while (!i);

	return acc;
}

/*
 * Setup all necessary artifacts for an XMIT command, and then pass the XMIT
 * command to the chip to be executed.  On the way, if we have a BPF listener
 * also give him a copy.
 */
static __inline void
iexmit(sc)
	struct ie_softc *sc;
{
	sc->xmit_buffs[sc->xctail]->ie_xmit_flags |= IE_XMIT_LAST;
	sc->xmit_buffs[sc->xctail]->ie_xmit_next = SWAP(0xffff);
	ST_24(sc->xmit_buffs[sc->xctail]->ie_xmit_buf,
	    MK_24(sc->sc_iobase, sc->xmit_cbuffs[sc->xctail]));

	sc->xmit_cmds[sc->xctail]->com.ie_cmd_link = SWAP(0xffff);
	sc->xmit_cmds[sc->xctail]->com.ie_cmd_cmd =
	  IE_CMD_XMIT | IE_CMD_INTR | IE_CMD_LAST;

	sc->xmit_cmds[sc->xctail]->ie_xmit_status = SWAP(0);
	sc->xmit_cmds[sc->xctail]->ie_xmit_desc =
	    MK_16(sc->sc_maddr, sc->xmit_buffs[sc->xctail]);

	sc->scb->ie_command_list =
	  MK_16(sc->sc_maddr, sc->xmit_cmds[sc->xctail]);
	command_and_wait(sc, IE_CU_START, 0, 0);

	sc->xmit_busy = 1;
	sc->sc_arpcom.ac_if.if_timer = 5;
}

/*
 * Read data off the interface, and turn it into an mbuf chain.
 *
 * This code is DRAMATICALLY different from the previous version; this
 * version tries to allocate the entire mbuf chain up front, given the
 * length of the data available.  This enables us to allocate mbuf
 * clusters in many situations where before we would have had a long
 * chain of partially-full mbufs.  This should help to speed up the
 * operation considerably.  (Provided that it works, of course.)
 */
int
ieget(sc, mp)
	struct ie_softc *sc;
	struct mbuf **mp;
{
	struct mbuf *m, *top, **mymp;
	int offset;
	int totlen, resid;
	int thismboff;
	int head;
	struct ether_header eh;

	totlen = ie_packet_len(sc);
	if (totlen <= 0)
		return -1;

	head = sc->rbhead;

	/*
	 * Snarf the Ethernet header.
	 */
	(sc->memcopy)((caddr_t)sc->cbuffs[head], (caddr_t)&eh, sizeof eh);

	/*
	 * As quickly as possible, check if this packet is for us.
	 * If not, don't waste a single cycle copying the rest of the
	 * packet in.
	 * This is only a consideration when FILTER is defined; i.e., when
	 * we are either running BPF or doing multicasting.
	 */
	if (!check_eh(sc, &eh)) {
		ie_drop_packet_buffer(sc);
		sc->sc_arpcom.ac_if.if_ierrors--; /* just this case, it's not an error */
		return -1;
	}

	MGETHDR(*mp, M_DONTWAIT, MT_DATA);
	if (!*mp) {
		ie_drop_packet_buffer(sc);
		return -1;
	}

	m = *mp;
	m->m_len = MHLEN;
	resid = m->m_pkthdr.len = totlen + ETHER_ALIGN;
	top = NULL;
	mymp = &top;

	/*
	 * This loop goes through and allocates mbufs for all the data we will
	 * be copying in.  It does not actually do the copying yet.
	 */
	do {				/* while (resid > 0) */
		/*
		 * Try to allocate an mbuf to hold the data that we have.  If
		 * we already allocated one, just get another one and stick it
		 * on the end (eventually).  If we don't already have one, try
		 * to allocate an mbuf cluster big enough to hold the whole
		 * packet, if we think it's reasonable, or a single mbuf which
		 * may or may not be big enough.
		 * Got that?
		 */
		if (top) {
			MGET(m, M_DONTWAIT, MT_DATA);
			if (!m) {
				m_freem(top);
				ie_drop_packet_buffer(sc);
				return -1;
			}
			m->m_len = MLEN;
		}

		if (resid >= MINCLSIZE) {
			MCLGET(m, M_DONTWAIT);
			if (m->m_flags & M_EXT)
				m->m_len = min(resid, MCLBYTES);
		} else {
			if (resid < m->m_len) {
				if (!top && resid + max_linkhdr <= m->m_len)
					m->m_data += max_linkhdr;
				m->m_len = resid;
			}
		}
		resid -= m->m_len;
		*mymp = m;
		mymp = &m->m_next;
	} while (resid > 0);

	resid = totlen;
	m = top;
	m_adj(m, ETHER_ALIGN);
	thismboff = 0;
	offset = 0;

	/*
	 * Now we take the mbuf chain (hopefully only one mbuf most of the
	 * time) and stuff the data into it.  There are no possible failures at
	 * or after this point.
	 */
	while (resid > 0) {		/* while there's stuff left */
		int thislen = ie_buflen(sc, head) - offset;

		/*
		 * If too much data for the current mbuf, then fill the current
		 * one up, go to the next one, and try again.
		 */
		if (thislen > m->m_len - thismboff) {
			int newlen = m->m_len - thismboff;
			(sc->memcopy)((caddr_t)(sc->cbuffs[head] + offset),
			    mtod(m, caddr_t) + thismboff, (u_int)newlen);
			m = m->m_next;
			thismboff = 0;		/* new mbuf, so no offset */
			offset += newlen;	/* we are now this far
							into the packet */
			resid -= newlen;	/* so there is this much
							left to get */
			continue;
		}

		/*
		 * If there is more than enough space in the mbuf to hold the
		 * contents of this buffer, copy everything in, advance
		 * pointers and so on.
		 */
		if (thislen < m->m_len - thismboff) {
			(sc->memcopy)((caddr_t)(sc->cbuffs[head] + offset),
			    mtod(m, caddr_t) + thismboff, (u_int)thislen);
			thismboff += thislen;	/* we are this far into the mbuf */
			resid -= thislen;	/* and this much is left */
			goto nextbuf;
		}

		/*
		 * Otherwise, there is exactly enough space to put this
		 * buffer's contents into the current mbuf.  Do the combination
		 * of the above actions.
		 */
		(sc->memcopy)((caddr_t)(sc->cbuffs[head] + offset),
		    mtod(m, caddr_t) + thismboff, (u_int)thislen);
		m = m->m_next;
		thismboff = 0;		/* new mbuf, start at the beginning */
		resid -= thislen;	/* and we are this far through */

		/*
		 * Advance all the pointers.  We can get here from either of
		 * the last two cases, but never the first.
		 */
	nextbuf:
		offset = 0;
		sc->rbuffs[head]->ie_rbd_actual = SWAP(0);
		sc->rbuffs[head]->ie_rbd_length |= IE_RBD_LAST;
		sc->rbhead = head = (head + 1) % sc->nrxbuf;
		sc->rbuffs[sc->rbtail]->ie_rbd_length &= ~IE_RBD_LAST;
		sc->rbtail = (sc->rbtail + 1) % sc->nrxbuf;
	}

	/*
	 * Unless something changed strangely while we were doing the copy, we
	 * have now copied everything in from the shared memory.
	 * This means that we are done.
	 */
	return 0;
}

/*
 * Read frame NUM from unit UNIT (pre-cached as IE).
 *
 * This routine reads the RFD at NUM, and copies in the buffers from the list
 * of RBD, then rotates the RBD and RFD lists so that the receiver doesn't
 * start complaining.  Trailers are DROPPED---there's no point in wasting time
 * on confusing code to deal with them.  Hopefully, this machine will never ARP
 * for trailers anyway.
 */
void
ie_readframe(sc, num)
	struct ie_softc *sc;
	int num;			/* frame number to read */
{
	int status;
	struct mbuf *m = NULL;
	struct mbuf_list ml = MBUF_LIST_INITIALIZER();

	status = sc->rframes[num]->ie_fd_status;

	/* Immediately advance the RFD list, since we have copied ours now. */
	sc->rframes[num]->ie_fd_status = SWAP(0);
	sc->rframes[num]->ie_fd_last |= IE_FD_LAST;
	sc->rframes[sc->rftail]->ie_fd_last &= ~IE_FD_LAST;
	sc->rftail = (sc->rftail + 1) % sc->nframes;
	sc->rfhead = (sc->rfhead + 1) % sc->nframes;

	if (status & IE_FD_OK) {
		if (ieget(sc, &m)) {
			sc->sc_arpcom.ac_if.if_ierrors++;
			return;
		}
	}

	if (m == NULL)
		return;

#ifdef IEDEBUG
	if (sc->sc_debug & IED_READFRAME) {
		struct ether_header *eh = mtod(m, struct ether_header *);
		printf("%s: frame from ether %s type 0x%x\n",
		    sc->sc_dev.dv_xname,
		    ether_sprintf(eh->ether_shost), (u_int)eh->ether_type);
	}
#endif

	ml_enqueue(&ml, m);
	if_input(&sc->sc_arpcom.ac_if, &ml);
}

void
ie_drop_packet_buffer(sc)
	struct ie_softc *sc;
{
	int i;

	do {
		/*
		 * This means we are somehow out of sync.  So, we reset the
		 * adapter.
		 */
		if (!(sc->rbuffs[sc->rbhead]->ie_rbd_actual & IE_RBD_USED)) {
#ifdef IEDEBUG
			print_rbd(sc->rbuffs[sc->rbhead]);
#endif
			log(LOG_ERR, "%s: receive descriptors out of sync at %d\n",
			    sc->sc_dev.dv_xname, sc->rbhead);
			iereset(sc);
			return;
		}

		i = sc->rbuffs[sc->rbhead]->ie_rbd_actual & IE_RBD_LAST;

		sc->rbuffs[sc->rbhead]->ie_rbd_length |= IE_RBD_LAST;
		sc->rbuffs[sc->rbhead]->ie_rbd_actual = SWAP(0);
		sc->rbhead = (sc->rbhead + 1) % sc->nrxbuf;
		sc->rbuffs[sc->rbtail]->ie_rbd_length &= ~IE_RBD_LAST;
		sc->rbtail = (sc->rbtail + 1) % sc->nrxbuf;
	} while (!i);
}


/*
 * Start transmission on an interface.
 */
void
iestart(ifp)
	struct ifnet *ifp;
{
	struct ie_softc *sc = ifp->if_softc;
	struct mbuf *m0, *m;
	u_char *buffer;
	u_short len;

	if ((ifp->if_flags & IFF_RUNNING) == 0)
		return;

	if (sc->xmit_free == 0) {
		ifq_set_oactive(&ifp->if_snd);
		if (!sc->xmit_busy)
			iexmit(sc);
		return;
	}

	do {
		IFQ_DEQUEUE(&sc->sc_arpcom.ac_if.if_snd, m);
		if (!m)
			break;

#if NBPFILTER > 0
		if (ifp->if_bpf)
			bpf_mtap(ifp->if_bpf, m, BPF_DIRECTION_OUT);
#endif

		len = 0;
		buffer = sc->xmit_cbuffs[sc->xchead];

		for (m0 = m; m && (len +m->m_len) < IE_TBUF_SIZE;
		                                           m = m->m_next) {
			(sc->memcopy)(mtod(m, caddr_t), buffer, m->m_len);
			buffer += m->m_len;
			len += m->m_len;
		}
		if (m)
		  printf("%s: tbuf overflow\n", sc->sc_dev.dv_xname);

		m_freem(m0);

		if (len < ETHER_MIN_LEN - ETHER_CRC_LEN) {
			(sc->memzero)(buffer, ETHER_MIN_LEN - ETHER_CRC_LEN - len);
			len = ETHER_MIN_LEN - ETHER_CRC_LEN;
			buffer += ETHER_MIN_LEN - ETHER_CRC_LEN;
		}
		sc->xmit_buffs[sc->xchead]->ie_xmit_flags = SWAP(len);

		sc->xmit_free--;
		sc->xchead = (sc->xchead + 1) % NTXBUF;
	} while (sc->xmit_free > 0);

	/* If we stuffed any packets into the card's memory, send now. */
	if ((sc->xmit_free < NTXBUF) && (!sc->xmit_busy))
		iexmit(sc);

	return;
}

/*
 * set up IE's ram space
 */
int
ie_setupram(sc)
	struct ie_softc *sc;
{
	volatile struct ie_sys_conf_ptr *scp;
	volatile struct ie_int_sys_conf_ptr *iscp;
	volatile struct ie_sys_ctl_block *scb;
	int     s;

	s = splnet();

	scp = sc->scp;
	(sc->memzero)((char *) scp, sizeof *scp);

	iscp = sc->iscp;
	(sc->memzero)((char *) iscp, sizeof *iscp);

	scb = sc->scb;
	(sc->memzero)((char *) scb, sizeof *scb);

	scp->ie_bus_use = 0;	/* 16-bit */
	ST_24(scp->ie_iscp_ptr, MK_24(sc->sc_iobase, iscp));

	iscp->ie_busy = 1;	/* ie_busy == char */
	iscp->ie_scb_offset = MK_16(sc->sc_maddr, scb);
	ST_24(iscp->ie_base, MK_24(sc->sc_iobase, sc->sc_maddr));

	(sc->reset_586) (sc);
	(sc->chan_attn) (sc);

	delay(100);		/* wait a while... */

	if (iscp->ie_busy) {
		splx(s);
		return 0;
	}
	/*
	 * Acknowledge any interrupts we may have caused...
	 */
	ie_ack(sc, IE_ST_WHENCE);
	splx(s);

	return 1;
}

void
iereset(sc)
	struct ie_softc *sc;
{
	int s = splnet();

	printf("%s: reset\n", sc->sc_dev.dv_xname);

	/* Clear OACTIVE in case we're called from watchdog (frozen xmit). */
	sc->sc_arpcom.ac_if.if_flags &= ~IFF_UP;
	ifq_clr_oactive(&sc->sc_arpcom.ac_if.if_snd);
	ieioctl(&sc->sc_arpcom.ac_if, SIOCSIFFLAGS, 0);

	/*
	 * Stop i82586 dead in its tracks.
	 */
	if (command_and_wait(sc, IE_RU_ABORT | IE_CU_ABORT, 0, 0))
		printf("%s: abort commands timed out\n", sc->sc_dev.dv_xname);

	if (command_and_wait(sc, IE_RU_DISABLE | IE_CU_STOP, 0, 0))
		printf("%s: disable commands timed out\n", sc->sc_dev.dv_xname);

#ifdef notdef
	if (!check_ie_present(sc, sc->sc_maddr, sc->sc_msize))
		panic("ie disappeared!");
#endif

	sc->sc_arpcom.ac_if.if_flags |= IFF_UP;
	ieioctl(&sc->sc_arpcom.ac_if, SIOCSIFFLAGS, 0);

	splx(s);
}

/*
 * This is called if we time out.
 */
void
chan_attn_timeout(rock)
	void *rock;
{

	*(int *)rock = 1;
}

/*
 * Send a command to the controller and wait for it to either complete
 * or be accepted, depending on the command.  If the command pointer
 * is null, then pretend that the command is not an action command.
 * If the command pointer is not null, and the command is an action
 * command, wait for
 * ((volatile struct ie_cmd_common *)pcmd)->ie_cmd_status & MASK
 * to become true.
 */
int
command_and_wait(sc, cmd, pcmd, mask)
	struct ie_softc *sc;
	int cmd;
	volatile void *pcmd;
	int mask;
{
	volatile struct ie_cmd_common *cc = pcmd;
	volatile struct ie_sys_ctl_block *scb = sc->scb;
	volatile int timedout = 0;
	struct timeout chan_tmo;
	extern int hz;

	scb->ie_command = (u_short)cmd;

	if (IE_ACTION_COMMAND(cmd) && pcmd) {
		(sc->chan_attn)(sc);

                /*
                 * XXX
                 * I don't think this timeout works on suns.
                 * we are at splnet() in the loop, and the timeout
                 * stuff runs at software spl (so it is masked off?).
                 */

		/*
		 * According to the packet driver, the minimum timeout should
		 * be .369 seconds, which we round up to .4.
		 */
		timeout_set(&chan_tmo, chan_attn_timeout, (caddr_t)&timedout);
		timeout_add(&chan_tmo, 2 * hz / 5);

		/*
		 * Now spin-lock waiting for status.  This is not a very nice
		 * thing to do, but I haven't figured out how, or indeed if, we
		 * can put the process waiting for action to sleep.  (We may
		 * be getting called through some other timeout running in the
		 * kernel.)
		 */
		for (;;)
			if ((cc->ie_cmd_status & mask) || timedout)
				break;

		timeout_del(&chan_tmo);

		return timedout;
	} else {
		/*
		 * Otherwise, just wait for the command to be accepted.
		 */
		(sc->chan_attn)(sc);

		while (scb->ie_command)
			;				/* XXX spin lock */

		return 0;
	}
}

/*
 * Run the time-domain reflectometer.
 */
void
run_tdr(sc, cmd)
	struct ie_softc *sc;
	struct ie_tdr_cmd *cmd;
{
	int result;

	cmd->com.ie_cmd_status = SWAP(0);
	cmd->com.ie_cmd_cmd = IE_CMD_TDR | IE_CMD_LAST;
	cmd->com.ie_cmd_link = SWAP(0xffff);

	sc->scb->ie_command_list = MK_16(sc->sc_maddr, cmd);
	cmd->ie_tdr_time = SWAP(0);

	if (command_and_wait(sc, IE_CU_START, cmd, IE_STAT_COMPL) ||
	    !(cmd->com.ie_cmd_status & IE_STAT_OK))
		result = 0x10000; /* XXX */
	else
		result = cmd->ie_tdr_time;

	ie_ack(sc, IE_ST_WHENCE);

	if (result & IE_TDR_SUCCESS)
		return;

	if (result & 0x10000)
		printf("%s: TDR command failed\n", sc->sc_dev.dv_xname);
	else if (result & IE_TDR_XCVR) {
#ifdef IEDEBUG
		printf("%s: transceiver problem\n", sc->sc_dev.dv_xname);
#endif
	} else if (result & IE_TDR_OPEN)
		printf("%s: TDR detected an open %d clocks away\n",
		    sc->sc_dev.dv_xname, result & IE_TDR_TIME);
	else if (result & IE_TDR_SHORT)
		printf("%s: TDR detected a short %d clocks away\n",
		    sc->sc_dev.dv_xname, result & IE_TDR_TIME);
	else
		printf("%s: TDR returned unknown status 0x%x\n",
		    sc->sc_dev.dv_xname, result);
}

#ifdef notdef
/* ALIGN works on 8 byte boundaries.... but 4 byte boundaries are ok for sun */
#define	_ALLOC(p, n)	(bzero(p, n), p += n, p - n)
#define	ALLOC(p, n)	_ALLOC(p, ALIGN(n)) /* XXX convert to this? */
#endif

static __inline caddr_t
Align(ptr)
        caddr_t ptr;
{
        u_long  l = (u_long)ptr;

        l = (l + 3) & ~3L;
        return (caddr_t)l;
}

/*
 * setup_bufs: set up the buffers
 *
 * we have a block of KVA at sc->buf_area which is of size sc->buf_area_sz.
 * this is to be used for the buffers.  the chip indexs its control data
 * structures with 16 bit offsets, and it indexes actual buffers with
 * 24 bit addresses.   so we should allocate control buffers first so that
 * we don't overflow the 16 bit offset field.   The number of transmit
 * buffers is fixed at compile time.
 *
 * note: this function was written to be easy to understand, rather than
 *       highly efficient (it isn't in the critical path).
 */
void
setup_bufs(sc)
	struct ie_softc *sc;
{
	caddr_t ptr = sc->buf_area;	/* memory pool */
	int     n, r;

	/*
	 * step 0: zero memory and figure out how many recv buffers and
	 * frames we can have.   XXX CURRENTLY HARDWIRED AT MAX
	 */
	(sc->memzero)(ptr, sc->buf_area_sz);
	ptr = Align(ptr);	/* set alignment and stick with it */

	n = (int)Align((caddr_t) sizeof(struct ie_xmit_cmd)) +
	    (int)Align((caddr_t) sizeof(struct ie_xmit_buf)) + IE_TBUF_SIZE;
	n *= NTXBUF;		/* n = total size of xmit area */

	n = sc->buf_area_sz - n;/* n = free space for recv stuff */

	r = (int)Align((caddr_t) sizeof(struct ie_recv_frame_desc)) +
	    (((int)Align((caddr_t) sizeof(struct ie_recv_buf_desc)) +
		IE_RBUF_SIZE) * B_PER_F);

	/* r = size of one R frame */

	sc->nframes = n / r;
	if (sc->nframes <= 0)
		panic("ie: bogus buffer calc");
	if (sc->nframes > MXFRAMES)
		sc->nframes = MXFRAMES;

	sc->nrxbuf = sc->nframes * B_PER_F;

#ifdef IEDEBUG
	printf("IEDEBUG: %d frames %d bufs\n", sc->nframes, sc->nrxbuf);
#endif

	/*
	 *  step 1a: lay out and zero frame data structures for transmit and recv
	 */
	for (n = 0; n < NTXBUF; n++) {
		sc->xmit_cmds[n] = (volatile struct ie_xmit_cmd *) ptr;
		ptr = Align(ptr + sizeof(struct ie_xmit_cmd));
	}

	for (n = 0; n < sc->nframes; n++) {
		sc->rframes[n] = (volatile struct ie_recv_frame_desc *) ptr;
		ptr = Align(ptr + sizeof(struct ie_recv_frame_desc));
	}

	/*
	 * step 1b: link together the recv frames and set EOL on last one
	 */
	for (n = 0; n < sc->nframes; n++) {
		sc->rframes[n]->ie_fd_next =
		    MK_16(sc->sc_maddr, sc->rframes[(n + 1) % sc->nframes]);
	}
	sc->rframes[sc->nframes - 1]->ie_fd_last |= IE_FD_LAST;

	/*
	 * step 2a: lay out and zero frame buffer structures for xmit and recv
	 */
	for (n = 0; n < NTXBUF; n++) {
		sc->xmit_buffs[n] = (volatile struct ie_xmit_buf *) ptr;
		ptr = Align(ptr + sizeof(struct ie_xmit_buf));
	}

	for (n = 0; n < sc->nrxbuf; n++) {
		sc->rbuffs[n] = (volatile struct ie_recv_buf_desc *) ptr;
		ptr = Align(ptr + sizeof(struct ie_recv_buf_desc));
	}

	/*
	 * step 2b: link together recv bufs and set EOL on last one
	 */
	for (n = 0; n < sc->nrxbuf; n++) {
		sc->rbuffs[n]->ie_rbd_next =
		    MK_16(sc->sc_maddr, sc->rbuffs[(n + 1) % sc->nrxbuf]);
	}
	sc->rbuffs[sc->nrxbuf - 1]->ie_rbd_length |= IE_RBD_LAST;

	/*
	 * step 3: allocate the actual data buffers for xmit and recv
	 * recv buffer gets linked into recv_buf_desc list here
	 */
	for (n = 0; n < NTXBUF; n++) {
		sc->xmit_cbuffs[n] = (u_char *) ptr;
		ptr = Align(ptr + IE_TBUF_SIZE);
	}

	/* Pointers to last packet sent and next available transmit buffer. */
	sc->xchead = sc->xctail = 0;

	/* Clear transmit-busy flag and set number of free transmit buffers. */
	sc->xmit_busy = 0;
	sc->xmit_free = NTXBUF;

	for (n = 0; n < sc->nrxbuf; n++) {
		sc->cbuffs[n] = (char *) ptr;	/* XXX why char vs uchar? */
		sc->rbuffs[n]->ie_rbd_length = SWAP(IE_RBUF_SIZE);
		ST_24(sc->rbuffs[n]->ie_rbd_buffer, MK_24(sc->sc_iobase, ptr));
		ptr = Align(ptr + IE_RBUF_SIZE);
	}

	/*
	 * step 4: set the head and tail pointers on receive to keep track of
	 * the order in which RFDs and RBDs are used.   link in recv frames
	 * and buffer into the scb.
	 */

	sc->rfhead = 0;
	sc->rftail = sc->nframes - 1;
	sc->rbhead = 0;
	sc->rbtail = sc->nrxbuf - 1;

	sc->scb->ie_recv_list = MK_16(sc->sc_maddr, sc->rframes[0]);
	sc->rframes[0]->ie_fd_buf_desc = MK_16(sc->sc_maddr, sc->rbuffs[0]);

#ifdef IEDEBUG
	printf("IE_DEBUG: reserved %d bytes\n", ptr - sc->buf_area);
#endif
}

/*
 * Run the multicast setup command.
 * Called at splnet().
 */
int
mc_setup(sc, ptr)
	struct ie_softc *sc;
	void *ptr;
{
	volatile struct ie_mcast_cmd *cmd = ptr;

	cmd->com.ie_cmd_status = SWAP(0);
	cmd->com.ie_cmd_cmd = IE_CMD_MCAST | IE_CMD_LAST;
	cmd->com.ie_cmd_link = SWAP(0xffff);

	(sc->memcopy)((caddr_t)sc->mcast_addrs, (caddr_t)cmd->ie_mcast_addrs,
	    sc->mcast_count * sizeof *sc->mcast_addrs);

	cmd->ie_mcast_bytes =
	  SWAP(sc->mcast_count * ETHER_ADDR_LEN); /* grrr... */

	sc->scb->ie_command_list = MK_16(sc->sc_maddr, cmd);
	if (command_and_wait(sc, IE_CU_START, cmd, IE_STAT_COMPL) ||
	    !(cmd->com.ie_cmd_status & IE_STAT_OK)) {
		printf("%s: multicast address setup command failed\n",
		    sc->sc_dev.dv_xname);
		return 0;
	}
	return 1;
}

/*
 * This routine takes the environment generated by check_ie_present() and adds
 * to it all the other structures we need to operate the adapter.  This
 * includes executing the CONFIGURE, IA-SETUP, and MC-SETUP commands, starting
 * the receiver unit, and clearing interrupts.
 *
 * THIS ROUTINE MUST BE CALLED AT splnet() OR HIGHER.
 */
int
ieinit(sc)
	struct ie_softc *sc;
{
	volatile struct ie_sys_ctl_block *scb = sc->scb;
	void *ptr;

	ptr = sc->buf_area;

	/*
	 * Send the configure command first.
	 */
	{
		volatile struct ie_config_cmd *cmd = ptr;

		scb->ie_command_list = MK_16(sc->sc_maddr, cmd);
		cmd->com.ie_cmd_status = SWAP(0);
		cmd->com.ie_cmd_cmd = IE_CMD_CONFIG | IE_CMD_LAST;
		cmd->com.ie_cmd_link = SWAP(0xffff);

		ie_setup_config(cmd, sc->promisc, 0);

		if (command_and_wait(sc, IE_CU_START, cmd, IE_STAT_COMPL) ||
		    !(cmd->com.ie_cmd_status & IE_STAT_OK)) {
			printf("%s: configure command failed\n",
			    sc->sc_dev.dv_xname);
			return 0;
		}
	}

	/*
	 * Now send the Individual Address Setup command.
	 */
	{
		volatile struct ie_iasetup_cmd *cmd = ptr;

		scb->ie_command_list = MK_16(sc->sc_maddr, cmd);
		cmd->com.ie_cmd_status = SWAP(0);
		cmd->com.ie_cmd_cmd = IE_CMD_IASETUP | IE_CMD_LAST;
		cmd->com.ie_cmd_link = SWAP(0xffff);

		(sc->memcopy)(sc->sc_arpcom.ac_enaddr,
		      (caddr_t)&cmd->ie_address, sizeof cmd->ie_address);

		if (command_and_wait(sc, IE_CU_START, cmd, IE_STAT_COMPL) ||
		    !(cmd->com.ie_cmd_status & IE_STAT_OK)) {
			printf("%s: individual address setup command failed\n",
			    sc->sc_dev.dv_xname);
			return 0;
		}
	}

	/*
	 * Now run the time-domain reflectometer.
	 */
	run_tdr(sc, ptr);

	/*
	 * Acknowledge any interrupts we have generated thus far.
	 */
	ie_ack(sc, IE_ST_WHENCE);

	/*
	 * Set up the transmit and recv buffers.
	 */
	setup_bufs(sc);

	sc->sc_arpcom.ac_if.if_flags |= IFF_RUNNING; /* tell higher levels that we are here */

	sc->scb->ie_recv_list = MK_16(sc->sc_maddr, sc->rframes[0]);
	command_and_wait(sc, IE_RU_START, 0, 0);

	ie_ack(sc, IE_ST_WHENCE);

	if (sc->run_586)
	  (sc->run_586)(sc);

	return 0;
}

void
iestop(sc)
	struct ie_softc *sc;
{

	command_and_wait(sc, IE_RU_DISABLE, 0, 0);
}

int
ieioctl(ifp, cmd, data)
	struct ifnet *ifp;
	u_long cmd;
	caddr_t data;
{
	struct ie_softc *sc = ifp->if_softc;
	int s, error = 0;

	s = splnet();

	switch(cmd) {
	case SIOCSIFADDR:
		ifp->if_flags |= IFF_UP;
		ieinit(sc);
		break;

	case SIOCSIFFLAGS:
		sc->promisc = ifp->if_flags & (IFF_PROMISC | IFF_ALLMULTI);
		if ((ifp->if_flags & IFF_UP) == 0 &&
		    (ifp->if_flags & IFF_RUNNING) != 0) {
			/*
			 * If interface is marked down and it is running, then
			 * stop it.
			 */
			iestop(sc);
			ifp->if_flags &= ~IFF_RUNNING;
		} else if ((ifp->if_flags & IFF_UP) != 0 &&
			   (ifp->if_flags & IFF_RUNNING) == 0) {
			/*
			 * If interface is marked up and it is stopped, then
			 * start it.
			 */
			ieinit(sc);
		} else {
			/*
			 * Reset the interface to pick up changes in any other
			 * flags that affect hardware registers.
			 */
			iestop(sc);
			ieinit(sc);
		}
#ifdef IEDEBUG
		if (ifp->if_flags & IFF_DEBUG)
			sc->sc_debug = IED_ALL;
		else
			sc->sc_debug = 0;
#endif
		break;

	default:
		error = ether_ioctl(ifp, &sc->sc_arpcom, cmd, data);
	}

	if (error == ENETRESET) {
		if (ifp->if_flags & IFF_RUNNING)
			mc_reset(sc);   
		error = 0;
	}

	splx(s);
	return error;
}

void
mc_reset(sc)
	struct ie_softc *sc;
{
	struct arpcom *ac = &sc->sc_arpcom;
	struct ether_multi *enm;
	struct ether_multistep step;

	if (ac->ac_multirangecnt > 0) {
		ac->ac_if.if_flags |= IFF_ALLMULTI;
		ieioctl(&ac->ac_if, SIOCSIFFLAGS, NULL);
		goto setflag;
	}

	/*
	 * Step through the list of addresses.
	 */
	sc->mcast_count = 0;
	ETHER_FIRST_MULTI(step, ac, enm);
	while (enm) {
		if (sc->mcast_count >= MAXMCAST) {
			ac->ac_if.if_flags |= IFF_ALLMULTI;
			ieioctl(&ac->ac_if, SIOCSIFFLAGS, NULL);
			goto setflag;
		}

		bcopy(enm->enm_addrlo, &sc->mcast_addrs[sc->mcast_count], 6);
		sc->mcast_count++;
		ETHER_NEXT_MULTI(step, enm);
	}
setflag:
	sc->want_mcsetup = 1;
}

#ifdef IEDEBUG
void
print_rbd(rbd)
	volatile struct ie_recv_buf_desc *rbd;
{

	printf("RBD at %08lx:\nactual %04x, next %04x, buffer %08x\n"
	    "length %04x, mbz %04x\n", (u_long)rbd, rbd->ie_rbd_actual,
	    rbd->ie_rbd_next, rbd->ie_rbd_buffer, rbd->ie_rbd_length,
	    rbd->mbz);
}
#endif

void
wzero(vb, l)
	void *vb;
	size_t l;
{
	u_char *b = vb;
	u_char *be = b + l;
	u_short *sp;

	if (l == 0)
		return;

	/* front, */
	if ((u_long)b & 1)
		*b++ = 0;

	/* back, */
	if (b != be && ((u_long)be & 1) != 0) {
		be--;
		*be = 0;
	}

	/* and middle. */
	sp = (u_short *)b;
	while (sp != (u_short *)be)
		*sp++ = 0;
}

void
wcopy(vb1, vb2, l)
	const void *vb1;
	void *vb2;
	size_t l;
{
	const u_char *b1e, *b1 = vb1;
	u_char *b2 = vb2;
	u_short *sp;
	int bstore = 0;

	if (l == 0)
		return;

	/* front, */
	if ((u_long)b1 & 1) {
		*b2++ = *b1++;
		l--;
	}

	/* middle, */
	sp = (u_short *)b1;
	b1e = b1 + l;
	if (l & 1)
		b1e--;
	bstore = (u_long)b2 & 1;

	while (sp < (u_short *)b1e) {
		if (bstore) {
			b2[1] = *sp & 0xff;
			b2[0] = *sp >> 8;
		} else
			*((short *)b2) = *sp;
		sp++;
		b2 += 2;
	}

	/* and back. */
	if (l & 1)
		*b2 = *b1e;
}
@


1.62
log
@More "(<blah> *)0" -> NULL, avoiding any stdarg functions.

Feedback millert@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.61 2015/12/08 13:34:22 tedu Exp $	*/
a1000 13

#if NBPFILTER > 0
	/*
	 * If BPF is listening on this interface, let it see the packet before
	 * we push it on the wire.
	 */
	if (sc->sc_arpcom.ac_if.if_bpf)
		bpf_tap(sc->sc_arpcom.ac_if.if_bpf,
		    sc->xmit_cbuffs[sc->xctail],
		    SWAP(sc->xmit_buffs[sc->xctail]->ie_xmit_flags),
		    BPF_DIRECTION_OUT);
#endif

d1304 5
@


1.61
log
@No trailers has been the default and only option for 20 years, yet some
drivers still set IFF_NOTRAILERS while others do not. Remove all usage of
the flag from the drivers which in ancient times used it (and the modern
drivers which blindly copied it from those drivers of yore).
suggested by guenther. ok mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.60 2015/11/25 11:20:38 mpi Exp $	*/
d1909 1
a1909 1
		ieioctl(&ac->ac_if, SIOCSIFFLAGS, (void *)0);
d1921 1
a1921 1
			ieioctl(&ac->ac_if, SIOCSIFFLAGS, (void *)0);
@


1.60
log
@Network drivers should not include <net/route.h> or <net/netisr.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.59 2015/11/25 03:09:58 dlg Exp $	*/
d642 1
a642 1
	    IFF_BROADCAST | IFF_SIMPLEX | IFF_NOTRAILERS | IFF_MULTICAST;
@


1.59
log
@replace IFF_OACTIVE manipulation with mpsafe operations.

there are two things shared between the network stack and drivers
in the send path: the send queue and the IFF_OACTIVE flag. the send
queue is now protected by a mutex. this diff makes the oactive
functionality mpsafe too.

IFF_OACTIVE is part of if_flags. there are two problems with that.
firstly, if_flags is a short and we dont have any MI atomic operations
to manipulate a short. secondly, while we could make the IFF_OACTIVE
operates mpsafe, all changes to other flags would have to be made
safe at the same time, otherwise a read-modify-write cycle on their
updates could clobber the oactive change.

instead, this moves the oactive mark into struct ifqueue and provides
an API for changing it. there's ifq_set_oactive, ifq_clr_oactive,
and ifq_is_oactive. these are modelled on ifsq_set_oactive,
ifsq_clr_oactive, and ifsq_is_oactive in dragonflybsd.

this diff includes changes to all the drivers manipulating IFF_OACTIVE
to now use the ifsq_{set,clr_is}_oactive API too.

ok kettenis@@ mpi@@ jmatthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.58 2015/11/24 17:11:38 mpi Exp $	*/
a115 2
#include <net/netisr.h>
#include <net/route.h>
@


1.58
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.57 2015/11/24 13:33:18 mpi Exp $	*/
d822 1
a822 1
	sc->sc_arpcom.ac_if.if_flags &= ~IFF_OACTIVE;
d1309 1
a1309 1
		ifp->if_flags |= IFF_OACTIVE;
d1409 2
a1410 1
	sc->sc_arpcom.ac_if.if_flags &= ~(IFF_UP | IFF_OACTIVE);
@


1.57
log
@The only network driver needing <net/if_types.h> is upl(4) for IFT_OTHER.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.56 2015/11/14 17:26:40 mpi Exp $	*/
a115 1
#include <net/if_dl.h>
@


1.56
log
@No need to include <net/bpfdesc.h>

Now that "struct bpf_d" depends on <sys/srp.h> this is one of the offender
for removing the header from <sys/param.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.55 2015/11/06 12:14:13 dlg Exp $	*/
a115 1
#include <net/if_types.h>
@


1.55
log
@make hfsc work on ie(4/sparc) by using IFQ_DEQUEUE instead of IF_DEQUEUE.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.54 2015/10/25 13:22:09 mpi Exp $	*/
a122 1
#include <net/bpfdesc.h>
@


1.54
log
@arp_ifinit() is no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.53 2015/06/24 09:40:53 mpi Exp $	*/
d1319 1
a1319 1
		IF_DEQUEUE(&sc->sc_arpcom.ac_if.if_snd, m);
@


1.53
log
@Increment if_ipackets in if_input().

Note that pseudo-drivers not using if_input() are not affected by this
conversion.

ok mikeb@@, kettenis@@, claudio@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.52 2015/05/25 12:40:04 miod Exp $	*/
a1845 1
	struct ifaddr *ifa = (struct ifaddr *)data;
d1853 1
a1853 10

		switch(ifa->ifa_addr->sa_family) {
		case AF_INET:
			ieinit(sc);
			arp_ifinit(&sc->sc_arpcom, ifa);
			break;
		default:
			ieinit(sc);
			break;
		}
@


1.52
log
@Convert from ether_input() with separate mbuf data and Ethernet header, to
if_input(). Based upon an initial diff from mpi@@, and then painfully made
STRICT_ALIGNMENT-compliant. Tested on 4/260.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.51 2015/04/07 10:46:20 mpi Exp $	*/
a785 1
			sc->sc_arpcom.ac_if.if_ipackets++;
a1261 1
	sc->sc_arpcom.ac_if.if_ipackets++;
@


1.51
log
@Do not pass an `ifp' argument to interface input handlers since it
might be overwritten by pseudo-drivers.

ok dlg@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.50 2015/01/11 15:35:38 miod Exp $	*/
a144 1
static struct mbuf *last_not_for_us;
d284 6
a289 6
static void ie_obreset(struct ie_softc *);
static void ie_obattend(struct ie_softc *);
static void ie_obrun(struct ie_softc *);
static void ie_vmereset(struct ie_softc *);
static void ie_vmeattend(struct ie_softc *);
static void ie_vmerun(struct ie_softc *);
d297 2
a298 2
static void ie_readframe(struct ie_softc *, int);
static void ie_drop_packet_buffer(struct ie_softc *);
d300 1
a300 1
static int command_and_wait(struct ie_softc *, int,
d302 6
a307 7
/*static*/ void ierint(struct ie_softc *);
/*static*/ void ietint(struct ie_softc *);
static int ieget(struct ie_softc *, struct mbuf **,
		      struct ether_header *, int *);
static void setup_bufs(struct ie_softc *);
static int mc_setup(struct ie_softc *, void *);
static void mc_reset(struct ie_softc *);
d312 1
a312 2
static __inline int check_eh(struct ie_softc *, struct ether_header *,
				  int *);
d318 3
a320 3
static void chan_attn_timeout(void *);
static void run_tdr(struct ie_softc *, struct ie_tdr_cmd *);
static void iestop(struct ie_softc *);
d884 1
a884 4
 * Check for a valid address.  to_bpf is filled in with one of the following:
 *   0 -> BPF doesn't get this packet
 *   1 -> BPF does get this packet
 *   2 -> BPF does get this packet, but we don't
a885 5
 *
 * This routine is a mess, but it's also critical that it be as fast
 * as possible.  It could be made cleaner if we can assume that the
 * only client which will fiddle with IFF_PROMISC is BPF.  This is
 * probably a good assumption, but we do not make it here.  (Yet.)
d888 1
a888 1
check_eh(sc, eh, to_bpf)
a890 1
	int *to_bpf;
a899 3
#if NBPFILTER > 0
		*to_bpf = (sc->sc_arpcom.ac_if.if_bpf != 0); /* BPF gets this packet if anybody cares */
#endif
a908 6
#if NBPFILTER > 0
		*to_bpf = (sc->sc_arpcom.ac_if.if_bpf != 0) ||
		    (sc->sc_arpcom.ac_if.if_bridgeport != NULL);
#else
		*to_bpf = (sc->sc_arpcom.ac_if.if_bridgeport != NULL);
#endif
a911 5
#if NBPFILTER > 0
		if (*to_bpf && sc->sc_arpcom.ac_if.if_bridgeport == NULL)
			*to_bpf = 2; /* we don't need to see it */
#endif

a923 4
#if NBPFILTER > 0
				if (*to_bpf)
					*to_bpf = 1;
#endif
a929 10
		/*
		 * Acting as a multicast router, and BPF running at the same
		 * time.  Whew!  (Hope this is a fast machine...)
		 */
#if NBPFILTER > 0
		*to_bpf = (sc->sc_arpcom.ac_if.if_bpf != 0) ||
		    (sc->sc_arpcom.ac_if.if_bridgeport != NULL);
#else
		*to_bpf = (sc->sc_arpcom.ac_if.if_bridgeport != 0);
#endif
a938 4
#if NBPFILTER > 0
		if (*to_bpf && sc->sc_arpcom.ac_if.if_bridgeport == NULL)
			*to_bpf = 2;
#endif
a949 3
#if NBPFILTER > 0
		*to_bpf = (sc->sc_arpcom.ac_if.if_bpf != 0);
#endif
d1051 2
a1052 2
static inline int
ieget(sc, mp, ehp, to_bpf)
a1054 2
	struct ether_header *ehp;
	int *to_bpf;
a1056 1
	int i;
d1061 1
d1067 1
a1067 1
	i = sc->rbhead;
d1072 1
a1072 1
	(sc->memcopy)((caddr_t)sc->cbuffs[i], (caddr_t)ehp, sizeof *ehp);
d1081 1
a1081 1
	if (!check_eh(sc, ehp, to_bpf)) {
a1085 1
	totlen -= (offset = sizeof *ehp);
a1093 1
	m->m_pkthdr.rcvif = &sc->sc_arpcom.ac_if;
d1095 2
a1096 2
	resid = m->m_pkthdr.len = totlen;
	top = 0;
d1141 1
d1143 1
a1143 1
	head = sc->rbhead;
d1224 1
a1224 1
static void
d1230 2
a1231 5
	struct mbuf *m = 0;
	struct ether_header eh;
#if NBPFILTER > 0
	int bpf_gets_it = 0;
#endif
d1243 1
a1243 5
#if NBPFILTER > 0
		if (ieget(sc, &m, &eh, &bpf_gets_it)) {
#else
		if (ieget(sc, &m, &eh, 0)) {
#endif
d1249 3
d1253 2
a1254 1
	if (sc->sc_debug & IED_READFRAME)
d1257 2
a1258 1
		    ether_sprintf(eh.ether_shost), (u_int)eh.ether_type);
d1261 3
a1263 45
	if (!m)
		return;

	if (last_not_for_us) {
		m_freem(last_not_for_us);
		last_not_for_us = 0;
	}

#if NBPFILTER > 0
	/*
	 * Check for a BPF filter; if so, hand it up.
	 * Note that we have to stick an extra mbuf up front, because bpf_mtap
	 * expects to have the ether header at the front.
	 * It doesn't matter that this results in an ill-formatted mbuf chain,
	 * since BPF just looks at the data.  (It doesn't try to free the mbuf,
	 * tho' it will make a copy for tcpdump.)
	 */
	if (bpf_gets_it) {
		/* Pass it up. */
		bpf_mtap_hdr(sc->sc_arpcom.ac_if.if_bpf, (caddr_t)&eh,
		    sizeof(eh), m, BPF_DIRECTION_IN, NULL);
	}
	/*
	 * A signal passed up from the filtering code indicating that the
	 * packet is intended for BPF but not for the protocol machinery.
	 * We can save a few cycles by not handing it off to them.
	 */
	if (bpf_gets_it == 2) {
		last_not_for_us = m;
		return;
	}
#endif /* NBPFILTER > 0 */

	/*
	 * In here there used to be code to check destination addresses upon
	 * receipt of a packet.  We have deleted that code, and replaced it
	 * with code to check the address much earlier in the cycle, before
	 * copying the data in; this saves us valuable cycles when operating
	 * as a multicast router or when using BPF.
	 */

	/*
	 * Finally pass this packet up to higher layers.
	 */
	ether_input(m, &eh);
d1266 1
a1266 1
static void
d1440 1
a1440 1
static void
d1457 1
a1457 1
static int
d1519 1
a1519 1
static void
d1590 1
a1590 1
static void
d1718 1
a1718 1
static int
d1833 1
a1833 1
static void
d1915 1
a1915 1
static void
@


1.50
log
@Use the softc-specific function pointers for bcopy() and bzero() in iestart(),
instead of, well, bcopy and bzero. This lets ie@@vme transmit packets instead of
panicing due to memset() trying to use 32-bit stores on a device address.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.49 2014/12/22 02:26:54 tedu Exp $	*/
d1357 1
a1357 1
	ether_input(&sc->sc_arpcom.ac_if, &eh, m);
@


1.49
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.48 2014/11/16 12:30:58 deraadt Exp $	*/
d1424 1
a1424 1
			bcopy(mtod(m, caddr_t), buffer, m->m_len);
d1434 1
a1434 1
			bzero(buffer, ETHER_MIN_LEN - ETHER_CRC_LEN - len);
@


1.48
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.47 2014/07/22 10:35:35 mpi Exp $	*/
a1951 1
#ifdef INET
a1955 1
#endif
@


1.47
log
@<netinet/in_systm.h> is no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.46 2014/07/09 09:30:49 henning Exp $	*/
d560 1
a560 1
                    VM_PROT_READ | VM_PROT_WRITE, PMAP_WIRED);
@


1.46
log
@bpf code surgery / shuffling / simplification.
the various bpf_mtap_* are very similiar, they differ in what (and to some
extent how) they prepend something, and what copy function they pass to
bpf_catchpacket.
use an internal _bpf_mtap as "backend" for bpf_mtap and friends.
extend bpf_mtap_hdr so that it covers all common cases:
if dlen is 0, nothing gets prepended.
copy function can be given, if NULL the default bpf_mcopy is used.
adjust the existing bpf_mtap_hdr users to pass a NULL ptr for the copy fn.
re-implement bpf_mtap_af as simple wrapper for bpf_mtap_hdr.
re-implement bpf_mtap_ether using bpf_map_hdr
re-implement bpf_mtap_pflog as trivial bpf_mtap_hdr wrapper
ok bluhm benno
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.44 2013/11/27 08:56:31 mpi Exp $	*/
a125 1
#ifdef INET
a126 2
#include <netinet/in_systm.h>
#include <netinet/ip.h>
a127 1
#endif
a129 1
#include <uvm/uvm_map.h>
@


1.45
log
@fix typo
@
text
@d1338 1
a1338 1
		    sizeof(eh), m, BPF_DIRECTION_IN);
@


1.44
log
@Instead of comparing the lower and higher addresses of all the multicast
entries to decide if the IFF_ALLMULTI flag should be set, check if there
is at least one real range between them.

This should not change the behavior of any driver but if you encounter
any problem, feel free to revert the offending chunk and ping me about
it.

ok naddy@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.43 2013/09/05 20:55:58 bluhm Exp $	*/
d2020 1
a2020 1
	struct arpcom *ac = sc->sc_arpcom;
@


1.43
log
@Most network drivers include netinet/in_var.h, but apparently they
don't have to.  Remove these include lines from mvme68k, mvme88k,
sparc drivers.
test and OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.42 2012/10/10 04:52:16 camield Exp $	*/
d2020 1
d2024 6
d2034 1
a2034 1
	ETHER_FIRST_MULTI(step, &sc->sc_arpcom, enm);
d2036 3
a2038 4
		if (sc->mcast_count >= MAXMCAST ||
		    bcmp(enm->enm_addrlo, enm->enm_addrhi, 6) != 0) {
			sc->sc_arpcom.ac_if.if_flags |= IFF_ALLMULTI;
			ieioctl(&sc->sc_arpcom.ac_if, SIOCSIFFLAGS, (void *)0);
@


1.42
log
@Missed the MD bits with the bridgeport change.  Found the hard way by deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.41 2010/04/21 03:03:26 deraadt Exp $	*/
a128 1
#include <netinet/in_var.h>
@


1.41
log
@more cleanup to cope with the change that tries to make proc.h not act
like it is everything.h
ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.40 2009/10/31 14:31:11 deraadt Exp $	*/
d932 1
a932 1
		    (sc->sc_arpcom.ac_if.if_bridge != NULL);
d934 1
a934 1
		*to_bpf = (sc->sc_arpcom.ac_if.if_bridge != NULL);
d940 1
a940 1
		if (*to_bpf && sc->sc_arpcom.ac_if.if_bridge == NULL)
d972 1
a972 1
		    (sc->sc_arpcom.ac_if.if_bridge != NULL);
d974 1
a974 1
		*to_bpf = (sc->sc_arpcom.ac_if.if_bridge != 0);
d986 1
a986 1
		if (*to_bpf && sc->sc_arpcom.ac_if.if_bridge == NULL)
@


1.40
log
@in the absense of link state handling, drivers should still be silent; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.39 2008/11/28 02:44:17 brad Exp $	*/
d113 1
@


1.39
log
@Eliminate the redundant bits of code for MTU and multicast handling
from the individual drivers now that ether_ioctl() handles this.

Shrinks the i386 kernels by..
RAMDISK - 2176 bytes
RAMDISKB - 1504 bytes
RAMDISKC - 736 bytes

Tested by naddy@@/okan@@/sthen@@/brad@@/todd@@/jmc@@ and lots of users.
Build tested on almost all archs by todd@@/brad@@

ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.38 2008/10/02 20:21:13 brad Exp $	*/
a845 1
		printf("%s: send aborted\n", sc->sc_dev.dv_xname);
a847 1
		printf("%s: no carrier\n", sc->sc_dev.dv_xname);
a849 1
		printf("%s: lost CTS\n", sc->sc_dev.dv_xname);
a851 1
		printf("%s: DMA underrun\n", sc->sc_dev.dv_xname);
a853 1
		printf("%s: too many collisions\n", sc->sc_dev.dv_xname);
d1645 2
a1646 1
	else if (result & IE_TDR_XCVR)
d1648 2
a1649 1
	else if (result & IE_TDR_OPEN)
@


1.38
log
@First step towards cleaning up the Ethernet driver ioctl handling.
Move calling ether_ioctl() from the top of the ioctl function, which
at the moment does absolutely nothing, to the default switch case.
Thus allowing drivers to define their own ioctl handlers and then
falling back on ether_ioctl(). The only functional change this results
in at the moment is having all Ethernet drivers returning the proper
errno of ENOTTY instead of EINVAL/ENXIO when encountering unknown
ioctl's.

Shrinks the i386 kernels by..
RAMDISK - 1024 bytes
RAMDISKB -  1120 bytes
RAMDISKC - 832 bytes

Tested by martin@@/jsing@@/todd@@/brad@@
Build tested on almost all archs by todd@@/brad@@

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.37 2006/12/03 16:35:25 miod Exp $	*/
a1950 1
	struct ifreq *ifr = (struct ifreq *)data;
a2004 17
	case SIOCADDMULTI:
	case SIOCDELMULTI:
		error = (cmd == SIOCADDMULTI) ?
		    ether_addmulti(ifr, &sc->sc_arpcom):
		    ether_delmulti(ifr, &sc->sc_arpcom);

		if (error == ENETRESET) {
			/*
			 * Multicast list has changed; set the hardware filter
			 * accordingly.
			 */
			if (ifp->if_flags & IFF_RUNNING)
				mc_reset(sc);
			error = 0;
		}
		break;

d2007 6
@


1.37
log
@Revert r1.35 (ether_input to ether_input_mbuf conversion), this causes
unaligned accesses on some packets.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.36 2006/05/27 23:59:07 jason Exp $	*/
a1956 1

d2024 1
a2024 1
		error = ENOTTY;
d2026 1
@


1.36
log
@unknown ioctl is ENOTTY not EINVAL
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.35 2006/04/16 00:46:32 pascoe Exp $	*/
d1117 1
a1117 1
	int offset = 0;
d1145 1
d1332 13
a1344 4
	/* Check for a BPF filter; if so, hand it up. */
	if (bpf_gets_it)
		bpf_mtap(sc->sc_arpcom.ac_if.if_bpf, m, BPF_DIRECTION_IN);

d1367 1
a1367 1
	ether_input_mbuf(&sc->sc_arpcom.ac_if, m);
@


1.35
log
@Convert the last remaining net-driver users of ether_input to ether_input_mbuf.

sgec ok martin@@
if_ie ok miod@@
if_de, if_hp not in GENERIC
ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.34 2006/03/25 22:41:41 djm Exp $	*/
d2015 1
a2015 1
		error = EINVAL;
@


1.34
log
@allow bpf(4) to ignore packets based on their direction (inbound or
outbound), using a new BIOCSDIRFILT ioctl;
guidance, feedback and ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.33 2006/01/15 19:49:25 miod Exp $	*/
d1117 1
a1117 1
	int offset;
a1144 1
	totlen -= (offset = sizeof *ehp);
d1331 4
a1334 13
	/*
	 * Check for a BPF filter; if so, hand it up.
	 * Note that we have to stick an extra mbuf up front, because bpf_mtap
	 * expects to have the ether header at the front.
	 * It doesn't matter that this results in an ill-formatted mbuf chain,
	 * since BPF just looks at the data.  (It doesn't try to free the mbuf,
	 * tho' it will make a copy for tcpdump.)
	 */
	if (bpf_gets_it) {
		/* Pass it up. */
		bpf_mtap_hdr(sc->sc_arpcom.ac_if.if_bpf, (caddr_t)&eh,
		    sizeof(eh), m, BPF_DIRECTION_IN);
	}
d1357 1
a1357 1
	ether_input(&sc->sc_arpcom.ac_if, &eh, m);
@


1.33
log
@Sync sc_memcopy and sc_memzero signatures with bcopy and bzero.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.32 2005/07/31 03:52:19 pascoe Exp $	*/
d1073 2
a1074 1
		    SWAP(sc->xmit_buffs[sc->xctail]->ie_xmit_flags));
d1343 1
a1343 1
		    sizeof(eh), m);
@


1.32
log
@Introduce bpf_mtap_af and bpf_mtap_hdr to be used when passing a mbuf chain
to bpf with either an address family or other header added.

These helpers only allocate a much smaller struct m_hdr on the stack when
needed, rather than leaving 256 byte struct mbufs on the stack in deep
call paths.  Also removes a fair bit of duplicated code.

commit now, tune after deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.31 2005/06/08 17:03:02 henning Exp $	*/
d236 1
a236 1
	void (*memcopy)(const void *, void *, u_int);
d238 1
a238 1
        void (*memzero)(void *, u_int);
d330 2
a331 2
void wzero(void *, u_int);
void wcopy(const void *, void *, u_int);
d2074 1
a2074 1
	u_int l;
d2103 1
a2103 1
	u_int l;
@


1.31
log
@remove netns crud.
some drivers actually had hooks for SIOCSIFADDR, most just useless includes
"looks good" deraadt miod brad
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.30 2005/03/23 17:14:43 miod Exp $	*/
a1339 5
		struct mbuf m0;
		m0.m_len = sizeof eh;
		m0.m_data = (caddr_t)&eh;
		m0.m_next = m;

d1341 2
a1342 1
		bpf_mtap(sc->sc_arpcom.ac_if.if_bpf, &m0);
@


1.30
log
@Move wzero() and wcopy() from machdep.c to where they are really used.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.29 2005/01/15 05:24:10 brad Exp $	*/
a132 5
#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif

a1970 18
#ifdef NS
		/* XXX - This code is probably wrong. */
		case AF_NS:
		    {
			struct ns_addr *ina = &IA_SNS(ifa)->sns_addr;

			if (ns_nullhost(*ina))
				ina->x_host =
				    *(union ns_host *)(sc->sc_arpcom.ac_enaddr);
			else
				bcopy(ina->x_host.c_host,
				    sc->sc_arpcom.ac_enaddr,
				    sizeof(sc->sc_arpcom.ac_enaddr));
			/* Set new address. */
			ieinit(sc);
			break;
		    }
#endif /* NS */
@


1.29
log
@make sure interface is in RUNNING state before touching the multicast filters

From NetBSD

NetBSD PR 27678 for details

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.28 2004/09/29 07:35:11 miod Exp $	*/
d335 3
d2097 70
@


1.28
log
@Switch sparc to evcount; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.27 2003/11/14 19:05:36 miod Exp $	*/
d2041 2
a2042 1
			mc_reset(sc);
@


1.27
log
@the the; rohee@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.26 2003/02/03 19:45:53 jason Exp $	*/
d672 1
a672 1
		intr_establish(pri, &sc->sc_ih, IPL_NET);
d679 1
a679 1
		    &sc->sc_ih, IPL_NET);
@


1.26
log
@pad tx buffer out to minimum framelength; based on NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.25 2002/11/10 21:23:06 miod Exp $	*/
d212 1
a212 1
 *   to get the 4 bits from the the status word just do status & IEVME_HADDR.
@


1.25
log
@Use appropriate VM_MAP constants rather than hardcoded values in
uvm_map_create() and uvm_km_suballoc().
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.24 2002/04/30 01:12:29 art Exp $	*/
d1447 6
a1452 1
		len = max(len, ETHER_MIN_LEN);
@


1.24
log
@Fix an ancient problem in how sparc interrupts are handled.

There are many interrupt handlers that assume that they don't need to do
any spl protection in their code because the interrupt of some level can't
be interrupted by an interrupt of the same level. The problem is that some
interrupt handlers have hardware levels that are lower then their "software"
levels.

Fix this by adding an additional field to struct intrhand that specifies which
"software" level an interrupt handler has and blocks that level while handling
the interrupt. This new field is initialized in intr_establish which gets
an additional argument (which can be -1 meaning that the interrupt handler
doesn't need to block any additional level).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.23 2002/03/14 01:26:43 millert Exp $	*/
d539 1
a539 1
			(vaddr_t)IEOB_ADBASE + sc->sc_msize, 1);
@


1.23
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.22 2001/12/08 02:24:07 art Exp $	*/
d672 1
a672 1
		intr_establish(pri, &sc->sc_ih);
d679 1
a679 1
		    &sc->sc_ih);
@


1.22
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.21 2001/11/29 11:29:58 art Exp $	*/
d235 1
a235 1
	void (*reset_586) __P((struct ie_softc *));
d237 1
a237 1
	void (*chan_attn) __P((struct ie_softc *));
d239 1
a239 1
	void (*run_586) __P((struct ie_softc *));
d241 1
a241 1
	void (*memcopy) __P((const void *, void *, u_int));
d243 1
a243 1
        void (*memzero) __P((void *, u_int));
d295 39
a333 39
static void ie_obreset __P((struct ie_softc *));
static void ie_obattend __P((struct ie_softc *));
static void ie_obrun __P((struct ie_softc *));
static void ie_vmereset __P((struct ie_softc *));
static void ie_vmeattend __P((struct ie_softc *));
static void ie_vmerun __P((struct ie_softc *));

void iewatchdog __P((struct ifnet *));
int ieintr __P((void *));
int ieinit __P((struct ie_softc *));
int ieioctl __P((struct ifnet *, u_long, caddr_t));
void iestart __P((struct ifnet *));
void iereset __P((struct ie_softc *));
static void ie_readframe __P((struct ie_softc *, int));
static void ie_drop_packet_buffer __P((struct ie_softc *));
int ie_setupram __P((struct ie_softc *));
static int command_and_wait __P((struct ie_softc *, int,
    void volatile *, int));
/*static*/ void ierint __P((struct ie_softc *));
/*static*/ void ietint __P((struct ie_softc *));
static int ieget __P((struct ie_softc *, struct mbuf **,
		      struct ether_header *, int *));
static void setup_bufs __P((struct ie_softc *));
static int mc_setup __P((struct ie_softc *, void *));
static void mc_reset __P((struct ie_softc *));
static __inline int ether_equal __P((u_char *, u_char *));
static __inline void ie_ack __P((struct ie_softc *, u_int));
static __inline void ie_setup_config __P((volatile struct ie_config_cmd *,
					  int, int));
static __inline int check_eh __P((struct ie_softc *, struct ether_header *,
				  int *));
static __inline int ie_buflen __P((struct ie_softc *, int));
static __inline int ie_packet_len __P((struct ie_softc *));
static __inline void iexmit __P((struct ie_softc *));
static __inline caddr_t Align __P((caddr_t));

static void chan_attn_timeout __P((void *));
static void run_tdr __P((struct ie_softc *, struct ie_tdr_cmd *));
static void iestop __P((struct ie_softc *));
d336 1
a336 1
void print_rbd __P((volatile struct ie_recv_buf_desc *));
d342 2
a343 2
int iematch __P((struct device *, void *, void *));
void ieattach __P((struct device *, struct device *, void *));
@


1.22.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.22 2001/12/08 02:24:07 art Exp $	*/
d235 1
a235 1
	void (*reset_586)(struct ie_softc *);
d237 1
a237 1
	void (*chan_attn)(struct ie_softc *);
d239 1
a239 1
	void (*run_586)(struct ie_softc *);
d241 1
a241 1
	void (*memcopy)(const void *, void *, u_int);
d243 1
a243 1
        void (*memzero)(void *, u_int);
d295 39
a333 39
static void ie_obreset(struct ie_softc *);
static void ie_obattend(struct ie_softc *);
static void ie_obrun(struct ie_softc *);
static void ie_vmereset(struct ie_softc *);
static void ie_vmeattend(struct ie_softc *);
static void ie_vmerun(struct ie_softc *);

void iewatchdog(struct ifnet *);
int ieintr(void *);
int ieinit(struct ie_softc *);
int ieioctl(struct ifnet *, u_long, caddr_t);
void iestart(struct ifnet *);
void iereset(struct ie_softc *);
static void ie_readframe(struct ie_softc *, int);
static void ie_drop_packet_buffer(struct ie_softc *);
int ie_setupram(struct ie_softc *);
static int command_and_wait(struct ie_softc *, int,
    void volatile *, int);
/*static*/ void ierint(struct ie_softc *);
/*static*/ void ietint(struct ie_softc *);
static int ieget(struct ie_softc *, struct mbuf **,
		      struct ether_header *, int *);
static void setup_bufs(struct ie_softc *);
static int mc_setup(struct ie_softc *, void *);
static void mc_reset(struct ie_softc *);
static __inline int ether_equal(u_char *, u_char *);
static __inline void ie_ack(struct ie_softc *, u_int);
static __inline void ie_setup_config(volatile struct ie_config_cmd *,
					  int, int);
static __inline int check_eh(struct ie_softc *, struct ether_header *,
				  int *);
static __inline int ie_buflen(struct ie_softc *, int);
static __inline int ie_packet_len(struct ie_softc *);
static __inline void iexmit(struct ie_softc *);
static __inline caddr_t Align(caddr_t);

static void chan_attn_timeout(void *);
static void run_tdr(struct ie_softc *, struct ie_tdr_cmd *);
static void iestop(struct ie_softc *);
d336 1
a336 1
void print_rbd(volatile struct ie_recv_buf_desc *);
d342 2
a343 2
int iematch(struct device *, void *, void *);
void ieattach(struct device *, struct device *, void *);
d672 1
a672 1
		intr_establish(pri, &sc->sc_ih, IPL_NET);
d679 1
a679 1
		    &sc->sc_ih, IPL_NET);
@


1.22.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d539 1
a539 1
		    (vaddr_t)IEOB_ADBASE + sc->sc_msize, VM_MAP_INTRSAFE);
d1447 1
a1447 6

		if (len < ETHER_MIN_LEN - ETHER_CRC_LEN) {
			bzero(buffer, ETHER_MIN_LEN - ETHER_CRC_LEN - len);
			len = ETHER_MIN_LEN - ETHER_CRC_LEN;
			buffer += ETHER_MIN_LEN - ETHER_CRC_LEN;
		}
@


1.21
log
@oops
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.20 2001/11/28 16:13:29 art Exp $	*/
d568 1
@


1.20
log
@zap some typedefs.
vm_map_t -> struct vm_map *
vm_map_entry_t -> struct vm_map_entry *
simple_lock_data_t -> struct simplelock

(uvm not done yet, coming in the next commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.19 2001/11/06 19:53:16 miod Exp $	*/
d156 1
a156 1
struct struct vm_map *ie_map; /* for obio */
@


1.19
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.18 2001/07/25 13:25:33 art Exp $	*/
d156 1
a156 1
vm_map_t ie_map; /* for obio */
@


1.18
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.17 2001/06/23 22:03:03 fgsch Exp $	*/
d138 1
a138 2
#include <vm/vm.h>

@


1.17
log
@More constants cleaning.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.16 2001/06/08 08:09:24 art Exp $	*/
d568 1
a568 1
                    VM_PROT_READ | VM_PROT_WRITE, 1, 0);
@


1.16
log
@Change the paddr_t pmap_extract(struct pmap *, vaddr_t) interface to
boolean_t pmap_extract(struct pmap *, vaddr_t, paddr_t *).
Matches NetBSD. Tested by various people on various platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.15 2001/05/10 10:34:44 art Exp $	*/
a164 4

#define	ETHER_MIN_LEN	64
#define	ETHER_MAX_LEN	1518
#define	ETHER_ADDR_LEN	6
@


1.15
log
@UVM is no longer optional on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.14 2001/03/24 10:07:18 ho Exp $	*/
d568 1
a568 2
		pa = pmap_extract(pmap_kernel(), (vaddr_t)sc->sc_maddr);
		if (pa == 0)
@


1.14
log
@Convert to new timeout API. art@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.13 2001/02/20 19:39:33 mickey Exp $	*/
a139 1
#if defined(UVM)
a140 1
#endif
a542 1
#if defined(UVM)
a544 4
#else
		ie_map = vm_map_create(pmap_kernel(), (vaddr_t)IEOB_ADBASE,
			(vaddr_t)IEOB_ADBASE + sc->sc_msize, 1);
#endif
a545 1
#if defined(UVM)
a546 3
#else
		sc->sc_maddr = (caddr_t) kmem_alloc(ie_map, sc->sc_msize);
#endif
@


1.13
log
@for ethernet ifaces attach bpf from ether_ifattach; jason@@, aaron@@, itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.12 1999/09/06 07:13:06 art Exp $	*/
d1587 1
d1606 2
a1607 1
		timeout(chan_attn_timeout, (caddr_t)&timedout, 2 * hz / 5);
d1620 1
a1620 1
		untimeout(chan_attn_timeout, (caddr_t)&timedout);
@


1.12
log
@unbreak things after the pmap_enter change
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.11 1999/07/09 21:34:45 art Exp $	*/
a681 4

#if NBPFILTER > 0
	bpfattach(&ifp->if_bpf, ifp, DLT_EN10MB, sizeof(struct ether_header));
#endif
@


1.12.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.14 2001/03/24 10:07:18 ho Exp $	*/
d683 4
a1590 1
	struct timeout chan_tmo;
d1609 1
a1609 2
		timeout_set(&chan_tmo, chan_attn_timeout, (caddr_t)&timedout);
		timeout_add(&chan_tmo, 2 * hz / 5);
d1622 1
a1622 1
		timeout_del(&chan_tmo);
@


1.12.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.12.4.1 2001/05/14 21:37:06 niklas Exp $	*/
d140 1
d142 1
d168 4
d545 1
d548 4
d553 1
d555 3
d579 2
a580 1
		if (pmap_extract(pmap_kernel(), (vaddr_t)sc->sc_maddr, &pa) == FALSE)
@


1.12.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.12.4.2 2001/07/04 10:23:24 niklas Exp $	*/
d568 1
a568 1
                    VM_PROT_READ | VM_PROT_WRITE, PMAP_WIRED);
@


1.12.4.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d138 2
a139 1
#include <uvm/uvm_extern.h>
@


1.12.4.5
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.12.4.4 2001/11/13 21:04:17 niklas Exp $	*/
d156 1
a156 1
struct vm_map *ie_map; /* for obio */
@


1.12.4.6
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a567 1
		pmap_update(pmap_kernel());
@


1.12.4.7
log
@Merge in -current from about a week ago
@
text
@d235 1
a235 1
	void (*reset_586)(struct ie_softc *);
d237 1
a237 1
	void (*chan_attn)(struct ie_softc *);
d239 1
a239 1
	void (*run_586)(struct ie_softc *);
d241 1
a241 1
	void (*memcopy)(const void *, void *, u_int);
d243 1
a243 1
        void (*memzero)(void *, u_int);
d295 39
a333 39
static void ie_obreset(struct ie_softc *);
static void ie_obattend(struct ie_softc *);
static void ie_obrun(struct ie_softc *);
static void ie_vmereset(struct ie_softc *);
static void ie_vmeattend(struct ie_softc *);
static void ie_vmerun(struct ie_softc *);

void iewatchdog(struct ifnet *);
int ieintr(void *);
int ieinit(struct ie_softc *);
int ieioctl(struct ifnet *, u_long, caddr_t);
void iestart(struct ifnet *);
void iereset(struct ie_softc *);
static void ie_readframe(struct ie_softc *, int);
static void ie_drop_packet_buffer(struct ie_softc *);
int ie_setupram(struct ie_softc *);
static int command_and_wait(struct ie_softc *, int,
    void volatile *, int);
/*static*/ void ierint(struct ie_softc *);
/*static*/ void ietint(struct ie_softc *);
static int ieget(struct ie_softc *, struct mbuf **,
		      struct ether_header *, int *);
static void setup_bufs(struct ie_softc *);
static int mc_setup(struct ie_softc *, void *);
static void mc_reset(struct ie_softc *);
static __inline int ether_equal(u_char *, u_char *);
static __inline void ie_ack(struct ie_softc *, u_int);
static __inline void ie_setup_config(volatile struct ie_config_cmd *,
					  int, int);
static __inline int check_eh(struct ie_softc *, struct ether_header *,
				  int *);
static __inline int ie_buflen(struct ie_softc *, int);
static __inline int ie_packet_len(struct ie_softc *);
static __inline void iexmit(struct ie_softc *);
static __inline caddr_t Align(caddr_t);

static void chan_attn_timeout(void *);
static void run_tdr(struct ie_softc *, struct ie_tdr_cmd *);
static void iestop(struct ie_softc *);
d336 1
a336 1
void print_rbd(volatile struct ie_recv_buf_desc *);
d342 2
a343 2
int iematch(struct device *, void *, void *);
void ieattach(struct device *, struct device *, void *);
@


1.12.4.8
log
@Sync the SMP branch with 3.3
@
text
@d539 1
a539 1
		    (vaddr_t)IEOB_ADBASE + sc->sc_msize, VM_MAP_INTRSAFE);
d672 1
a672 1
		intr_establish(pri, &sc->sc_ih, IPL_NET);
d679 1
a679 1
		    &sc->sc_ih, IPL_NET);
d1447 1
a1447 6

		if (len < ETHER_MIN_LEN - ETHER_CRC_LEN) {
			bzero(buffer, ETHER_MIN_LEN - ETHER_CRC_LEN - len);
			len = ETHER_MIN_LEN - ETHER_CRC_LEN;
			buffer += ETHER_MIN_LEN - ETHER_CRC_LEN;
		}
@


1.12.4.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d212 1
a212 1
 *   to get the 4 bits from the status word just do status & IEVME_HADDR.
@


1.11
log
@vm_offset_t -> {v,p}addr_t and vm_size_t -> {v,p}size_t
remove "register" keywords
Various cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.10 1999/04/22 16:57:54 art Exp $	*/
d584 1
a584 1
                    VM_PROT_READ | VM_PROT_WRITE, 1);
@


1.10
log
@UVM fixes. vm_map_create -> uvm_map_create and kmem_alloc -> uvm_km_alloc
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.9 1999/03/01 20:45:10 jason Exp $	*/
d515 1
a515 1
	register struct bootpath *bp;
d528 1
a528 1
		vm_offset_t pa;
d546 2
a547 2
		ie_map = uvm_map_create(pmap_kernel(), (vm_offset_t)IEOB_ADBASE,
			(vm_offset_t)IEOB_ADBASE + sc->sc_msize, 1);
d549 2
a550 2
		ie_map = vm_map_create(pmap_kernel(), (vm_offset_t)IEOB_ADBASE,
			(vm_offset_t)IEOB_ADBASE + sc->sc_msize, 1);
d579 3
a581 2
		pa = pmap_extract(pmap_kernel(), (vm_offset_t)sc->sc_maddr);
		if (pa == 0) panic("ie pmap_extract");
d583 1
a583 1
                    (vm_offset_t)pa | PMAP_NC /*| PMAP_IOC*/,
d736 1
a736 1
	register u_short status;
d1963 1
a1963 1
	register struct ifnet *ifp;
@


1.9
log
@add checks for if_bridge (in addition to if_bpf)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.8 1999/01/11 05:11:55 millert Exp $	*/
d140 4
d545 4
d551 1
d553 3
d557 1
@


1.8
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ie.c,v 1.7 1997/08/08 08:25:09 downsj Exp $	*/
d943 4
a946 1
		*to_bpf = (sc->sc_arpcom.ac_if.if_bpf != 0);
d952 1
a952 1
		if (*to_bpf)
d983 4
a986 1
		*to_bpf = (sc->sc_arpcom.ac_if.if_bpf != 0);
d998 1
a998 1
		if (*to_bpf)
@


1.7
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d1532 1
a1532 1
		panic("ie disappeared!\n");
d1718 1
a1718 1
		panic("ie: bogus buffer calc\n");
@


1.6
log
@netbsd port, now we merge our changes back in
@
text
@d1 2
a2 1
/*	$NetBSD: if_ie.c,v 1.24 1996/05/07 01:28:28 thorpej Exp $	*/
d417 4
a420 1
	if (ca->ca_bustype == BUS_SBUS)
d422 9
a430 13

	if (CPU_ISSUN4) {
		/*
		 * XXX need better probe here so we can figure out what we've got
		 */
		if (ca->ca_bustype == BUS_OBIO) {
			if (probeget(ra->ra_vaddr, 1) == -1)
				return (0);
			return(1);
		}
		if (probeget(ra->ra_vaddr, 2) == -1)
			return (0);

d432 1
a432 1
	return (1);
d533 1
a533 2
		sc->sc_reg = mapiodev(ca->ca_ra.ra_reg, 0, sizeof(struct ieob),
		    ca->ca_bustype);
d596 2
a597 2
		sc->sc_reg = mapiodev(ca->ca_ra.ra_reg, 0, sizeof(struct ievme),
		    ca->ca_bustype);
d605 1
a605 1
					sc->sc_msize, ca->ca_bustype);
d733 1
a733 1
                        printf("%s: parity error (ctrl %x @@ %02x%04x)\n",
d1319 2
a1320 1
		printf("%s: frame from ether %s type %x\n", sc->sc_dev.dv_xname,
d1657 1
a1657 1
		printf("%s: TDR returned unknown status %x\n",
@


1.5
log
@add general ether_ioctl call in net/if_ethersubr.c,
NS,IPX,X.25 special processing is now handled in there.
reflect this amazing addition in all the ether ifaces.
ppl, pls check the stuff.
@
text
@d1 1
a1 1
/*	$NetBSD: if_ie.c,v 1.15 1995/04/11 09:18:09 pk Exp $	*/
d60 1
a60 1
 * Converted to SUN ie driver by Charles D. Cranor, 
d132 5
a228 1
	struct evcnt sc_intrcnt; /* # of interrupts, per ie */
d237 6
a242 3
	void (*reset_586)();    /* card dependent reset function */
	void (*chan_attn)();    /* card dependent attn function */
	void (*run_586)();      /* card depenent "go on-line" function */
d248 1
a248 1
	
d263 1
a263 1
	 * pointer and size of a block of KVA where the buffers 
d266 1
a266 1
        
d304 1
a304 1
void iewatchdog __P((/* short */));
d312 1
d322 14
d344 2
a345 2
int iematch();
void ieattach();
d347 6
a352 2
struct cfdriver iecd = {
	NULL, "ie", iematch, ieattach, DV_IFNET, sizeof(struct ie_softc)
d373 1
a373 1
static inline void
d393 1
a393 1
static inline void
d404 2
a405 2
int 
iematch(parent, cf, aux)
d407 1
a407 1
	struct cfdata *cf;
d410 1
d419 1
a419 1
	if (cputyp == CPU_SUN4) {
d438 1
a438 1
void 
d448 1
a448 1
void 
d458 1
a458 1
void 
d503 2
a504 1
	struct device *parent, *self;
d542 1
a542 1
		ie_map = vm_map_create(pmap_kernel(), (vm_offset_t)IEOB_ADBASE, 
d548 1
a548 1
		if (((u_long)sc->sc_maddr & ~(NBPG-1)) != (u_long)sc->sc_maddr) 
d570 1
a570 1
                    (vm_offset_t)pa | PMAP_NC,
d605 2
a606 2
		sc->sc_maddr = mapiodev(ca->ca_ra.ra_reg, rampaddr, sc->sc_msize,
		    ca->ca_bustype);
d654 2
a655 2
	ifp->if_unit = sc->sc_dev.dv_unit;
	ifp->if_name = iecd.cd_name;
d682 1
a690 2
	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt);

d694 1
a694 1
		bootdv = &sc->sc_dev;
d704 2
a705 2
iewatchdog(unit)
	short unit;
d707 1
a707 1
	struct ie_softc *sc = iecd.cd_devs[unit];
d731 2
a732 2
                volatile struct ievme *iev = (volatile struct ievme *)sc->sc_reg;

d735 2
a736 2
                            iev->pectrl, iev->pectrl & IEVME_HADDR,
                            iev->peaddr);
a783 1
	sc->sc_intrcnt.ev_count++;
d806 1
a806 1
				    SWAP(scb->ie_err_crc) + 
d808 1
a808 1
				    SWAP(scb->ie_err_resource) + 
d821 1
a821 1
				scb->ie_recv_list = 
d852 1
a852 1
		sc->sc_arpcom.ac_if.if_collisions += 
d894 1
a894 1
static inline int
d917 1
a917 1
static inline int
d1020 1
a1020 1
static inline int
d1030 1
a1030 1
static inline int
d1063 1
a1063 1
inline static void
d1092 1
a1092 1
	sc->scb->ie_command_list = 
d1108 1
a1108 1
 * operation considerably.  (Provided that it works, of course.)  
d1414 1
a1414 1
	struct ie_softc *sc = iecd.cd_devs[ifp->if_unit];
d1437 1
a1437 1
		for (m0 = m; m && (len +m->m_len) < IE_TBUF_SIZE; 
d1464 1
a1464 1
int 
d1546 1
a1546 1
	caddr_t rock;
d1557 3
a1559 3
 * command, wait for 
 * ((volatile struct ie_cmd_common *)pcmd)->ie_cmd_status & MASK 
 * to become true.  
d1667 1
a1667 1
static inline caddr_t
d1690 1
a1690 1
static void 
a1694 2
	volatile struct ie_recv_frame_desc *rfd = (void *) ptr;
	volatile struct ie_recv_buf_desc *rbd;
d1704 2
a1705 2
	n = (int)Align(sizeof(struct ie_xmit_cmd)) +
	    (int)Align(sizeof(struct ie_xmit_buf)) + IE_TBUF_SIZE;
d1710 3
a1712 2
	r = (int)Align(sizeof(struct ie_recv_frame_desc)) +
	    (((int)Align(sizeof(struct ie_recv_buf_desc)) + IE_RBUF_SIZE) * B_PER_F);
d1832 1
a1832 1
	cmd->ie_mcast_bytes = 
a1858 1
	int n;
d1894 1
a1894 1
		(sc->memcopy)(sc->sc_arpcom.ac_enaddr, 
d1947 1
a1947 1
	struct ie_softc *sc = iecd.cd_devs[ifp->if_unit];
a1953 5
	if ((error = ether_ioctl(ifp, &sc->sc_arpcom, cmd, data)) > 0) {
		splx(s);
		return error;
	}

d1966 18
@


1.4
log
@from netbsd:
Change splimp -> splnet in Ethernet, ARCnet, and FDDI drivers.
@
text
@a131 5
#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif

d1930 5
a1946 18
#ifdef NS
		/* XXX - This code is probably wrong. */
		case AF_NS:
		    {
			struct ns_addr *ina = &IA_SNS(ifa)->sns_addr;

			if (ns_nullhost(*ina))
				ina->x_host =
				    *(union ns_host *)(sc->sc_arpcom.ac_enaddr);
			else
				bcopy(ina->x_host.c_host,
				    sc->sc_arpcom.ac_enaddr,
				    sizeof(sc->sc_arpcom.ac_enaddr));
			/* Set new address. */
			ieinit(sc);
			break;
		    }
#endif /* NS */
@


1.3
log
@new mapdev/()/mapiodev() calling convention uses "struct rom_reg *" to supply
base plus an offset
new dvma routines
@
text
@d95 1
a95 1
   routines should run at splimp(), and should post an acknowledgement
d1452 1
a1452 1
	s = splimp();
d1492 1
a1492 1
	int s = splimp();
d1560 1
a1560 1
                 * we are at splimp() in the loop, and the timeout
d1796 1
a1796 1
 * Called at splimp().
d1831 1
a1831 1
 * THIS ROUTINE MUST BE CALLED AT splimp() OR HIGHER.
d1933 1
a1933 1
	s = splimp();
@


1.2
log
@add interrupt counter; not available on VME32
@
text
@d510 1
a510 1
		sc->sc_reg = mapiodev(ca->ca_ra.ra_paddr, sizeof(struct ieob),
d574 1
a574 1
		sc->sc_reg = mapiodev(ca->ca_ra.ra_paddr, sizeof(struct ievme),
d581 2
a582 1
		sc->sc_maddr = mapiodev((caddr_t)rampaddr, sc->sc_msize,
@


1.1
log
@Initial revision
@
text
@d229 1
a400 1
		ra->ra_len = NBPG;
a657 1
	case BUS_VME32:
d666 2
d708 2
a709 2
                volatile struct ievme *iev = (volatile struct ievme *)sc->sc_reg
;
d761 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
