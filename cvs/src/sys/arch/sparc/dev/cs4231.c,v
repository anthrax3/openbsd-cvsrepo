head	1.35;
access;
symbols
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.4
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.6
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.29.0.12
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.10
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.8
	OPENBSD_5_0:1.29.0.6
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.4
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.2
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.27.0.6
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.8
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.4
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.2
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.26.0.8
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.6
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.4
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.2
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.25.0.4
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	UBC_SYNC_A:1.18
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.17
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.35
date	2015.09.08.10.21.16;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	DGOx6p2gOlciIkZ2;

1.34
date	2015.05.11.06.52.36;	author ratchov;	state Exp;
branches;
next	1.33;
commitid	d72M2ifvvYynw0IH;

1.33
date	2015.05.11.06.46.21;	author ratchov;	state Exp;
branches;
next	1.32;
commitid	RaOGL5SyOGOZylwx;

1.32
date	2014.07.12.18.44.42;	author tedu;	state Exp;
branches;
next	1.31;
commitid	uKVPYMN2MLxdZxzH;

1.31
date	2013.05.15.21.19.45;	author ratchov;	state Exp;
branches;
next	1.30;

1.30
date	2013.05.15.08.29.23;	author ratchov;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.15.03.43.11;	author jakemsr;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.18.23.47.24;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2008.04.21.00.32.42;	author jakemsr;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.02.20.00.54;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2005.07.17.10.40.50;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2005.07.09.22.23.13;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2005.04.16.21.57.22;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.15.13.05.14;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	2004.09.29.07.35.11;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.20.00.49.45;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.18.40.59;	author jason;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.11.19.41.12;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.11.03.11.22;	author jason;	state Exp;
branches;
next	1.16;

1.16
date	2002.08.16.18.55.42;	author jason;	state Exp;
branches;
next	1.15;

1.15
date	2002.04.30.01.12.29;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.28.03.51.19;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.03.15.59;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.42;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.20.23.21.54;	author ericj;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.18.14.29.35;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.11.22.12.18;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.11.16.51.14;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.11.16.28.43;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.11.00.11.41;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.18.16.57.34;	author brad;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	2000.07.04.13.01.08;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.08.06.01.29.13;	author jason;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.06.07.20.58.22;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	99.06.06.04.48.24;	author jason;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.21.37.04;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.03.06.02.04.46;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2003.03.27.23.49.25;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.05.13.19.41.08;	author ho;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2003.06.07.11.14.42;	author ho;	state Exp;
branches;
next	1.3.4.7;

1.3.4.7
date	2004.02.19.10.49.57;	author niklas;	state Exp;
branches;
next	;

1.5.8.1
date	2002.01.31.22.55.21;	author niklas;	state Exp;
branches;
next	1.5.8.2;

1.5.8.2
date	2002.06.11.03.38.15;	author art;	state Exp;
branches;
next	1.5.8.3;

1.5.8.3
date	2002.10.29.00.28.09;	author art;	state Exp;
branches;
next	1.5.8.4;

1.5.8.4
date	2003.05.19.21.46.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.35
log
@sizes for free(); ok semarie
@
text
@/*	$OpenBSD: cs4231.c,v 1.34 2015/05/11 06:52:36 ratchov Exp $	*/

/*
 * Copyright (c) 1999 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for CS4231 based audio found in some sun4m systems (cs4231)
 * based on ideas from the S/Linux project and the NetBSD project.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/malloc.h>

#include <machine/autoconf.h>
#include <sparc/cpu.h>
#include <sparc/sparc/cpuvar.h>
#include <sparc/dev/sbusvar.h>
#include <sparc/dev/dmareg.h>

#include <sys/audioio.h>
#include <dev/audio_if.h>
#include <dev/ic/apcdmareg.h>
#include <dev/ic/ad1848reg.h>
#include <dev/ic/cs4231reg.h>
#include <sparc/dev/cs4231reg.h>
#include <sparc/dev/cs4231var.h>

#define	CSAUDIO_DAC_LVL		0
#define	CSAUDIO_LINE_IN_LVL	1
#define	CSAUDIO_MIC_LVL		2
#define	CSAUDIO_CD_LVL		3
#define	CSAUDIO_MONITOR_LVL	4
#define	CSAUDIO_OUTPUT_LVL	5
#define	CSAUDIO_LINE_IN_MUTE	6
#define	CSAUDIO_DAC_MUTE	7
#define	CSAUDIO_CD_MUTE		8
#define	CSAUDIO_MIC_MUTE	9
#define	CSAUDIO_MONITOR_MUTE	10
#define	CSAUDIO_OUTPUT_MUTE	11
#define	CSAUDIO_REC_LVL		12
#define	CSAUDIO_RECORD_SOURCE	13
#define	CSAUDIO_OUTPUT		14
#define	CSAUDIO_INPUT_CLASS	15
#define	CSAUDIO_OUTPUT_CLASS	16
#define	CSAUDIO_RECORD_CLASS	17
#define	CSAUDIO_MONITOR_CLASS	18

#define	CSPORT_AUX2		0
#define	CSPORT_AUX1		1
#define	CSPORT_DAC		2
#define	CSPORT_LINEIN		3
#define	CSPORT_MONO		4
#define	CSPORT_MONITOR		5
#define	CSPORT_SPEAKER		6
#define	CSPORT_LINEOUT		7
#define	CSPORT_HEADPHONE	8
#define	CSPORT_MICROPHONE	9

#define MIC_IN_PORT	0
#define LINE_IN_PORT	1
#define AUX1_IN_PORT	2
#define DAC_IN_PORT	3

#ifdef AUDIO_DEBUG
#define	DPRINTF(x)	printf x
#else
#define	DPRINTF(x)
#endif

/* Sun uses these pins in pin control register as GPIO */
#define	CS_PC_LINEMUTE		XCTL0_ENABLE	/* mute line */
#define	CS_PC_HDPHMUTE		XCTL1_ENABLE	/* mute headphone */

/* cs4231 playback interrupt */
#define	CS_AFS_TI		0x40		/* timer interrupt */
#define	CS_AFS_CI		0x20		/* capture interrupt */
#define	CS_AFS_PI		0x10		/* playback interrupt */
#define	CS_AFS_CU		0x08		/* capture underrun */
#define	CS_AFS_CO		0x04		/* capture overrun */
#define	CS_AFS_PO		0x02		/* playback overrun */
#define	CS_AFS_PU		0x01		/* playback underrun */

#define CS_TIMEOUT		90000		/* recalibration timeout */

int	cs4231_match(struct device *, void *, void *);
void	cs4231_attach(struct device *, struct device *, void *);
int	cs4231_intr(void *);

int	cs4231_set_speed(struct cs4231_softc *, u_long *);
void	cs4231_setup_output(struct cs4231_softc *sc);

/* Audio interface */
int	cs4231_open(void *, int);
void	cs4231_close(void *);
int	cs4231_query_encoding(void *, struct audio_encoding *);
int	cs4231_set_params(void *, int, int, struct audio_params *,
    struct audio_params *);
int	cs4231_round_blocksize(void *, int);
int	cs4231_commit_settings(void *);
int	cs4231_halt_output(void *);
int	cs4231_halt_input(void *);
int	cs4231_getdev(void *, struct audio_device *);
int	cs4231_set_port(void *, mixer_ctrl_t *);
int	cs4231_get_port(void *, mixer_ctrl_t *);
int	cs4231_query_devinfo(void *addr, mixer_devinfo_t *);
void *	cs4231_alloc(void *, int, size_t, int, int);
void	cs4231_free(void *, void *, int);
int	cs4231_get_props(void *);
int	cs4231_trigger_output(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
int	cs4231_trigger_input(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
void cs4231_write(struct cs4231_softc *, u_int8_t, u_int8_t);
u_int8_t cs4231_read(struct cs4231_softc *, u_int8_t);

struct audio_hw_if cs4231_sa_hw_if = {
	cs4231_open,
	cs4231_close,
	0,
	cs4231_query_encoding,
	cs4231_set_params,
	cs4231_round_blocksize,
	cs4231_commit_settings,
	0,
	0,
	0,
	0,
	cs4231_halt_output,
	cs4231_halt_input,
	0,
	cs4231_getdev,
	0,
	cs4231_set_port,
	cs4231_get_port,
	cs4231_query_devinfo,
	cs4231_alloc,
	cs4231_free,
	0,
	0,
	cs4231_get_props,
	cs4231_trigger_output,
	cs4231_trigger_input,
	0
};

struct cfattach audiocs_ca = {
	sizeof (struct cs4231_softc), cs4231_match, cs4231_attach
};

struct cfdriver audiocs_cd = {
	NULL, "audiocs", DV_DULL
};

struct audio_device cs4231_device = {
	"SUNW,CS4231",
	"a",			/* XXX b for ultra */
	"onboard1",		/* XXX unknown for ultra */
};

int
cs4231_match(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct cfdata *cf = vcf;
	struct confargs *ca = aux;
	register struct romaux *ra = &ca->ca_ra;

	if (strcmp(cf->cf_driver->cd_name, ra->ra_name) &&
	    strcmp("SUNW,CS4231", ra->ra_name)) {
		return (0);
	}
	return (1);
}

void    
cs4231_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	struct cs4231_softc *sc = (struct cs4231_softc *)self;
	int pri;

	if (ca->ca_ra.ra_nintr != 1) {
		printf(": expected 1 interrupt, got %d\n", ca->ca_ra.ra_nintr);
		return;
	}
	pri = ca->ca_ra.ra_intr[0].int_pri;

	if (ca->ca_ra.ra_nreg != 1) {
		printf(": expected 1 register set, got %d\n",
		    ca->ca_ra.ra_nreg);
		return;
	}
	sc->sc_regs = mapiodev(&(ca->ca_ra.ra_reg[0]), 0,
	    ca->ca_ra.ra_reg[0].rr_len);

	sc->sc_node = ca->ca_ra.ra_node;

	sc->sc_burst = getpropint(ca->ca_ra.ra_node, "burst-sizes", -1);
	if (sc->sc_burst == -1)
		sc->sc_burst = ((struct sbus_softc *)parent)->sc_burst;

	/* Clamp at parent's burst sizes */
	sc->sc_burst &= ((struct sbus_softc *)parent)->sc_burst;

	sc->sc_ih.ih_fun = cs4231_intr;
	sc->sc_ih.ih_arg = sc;
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih, IPL_AUHARD,
	    self->dv_xname);

	printf(" pri %d\n", pri);

	audio_attach_mi(&cs4231_sa_hw_if, sc, &sc->sc_dev);

	/* Default to speaker, unmuted, reasonable volume */
	sc->sc_out_port = CSPORT_SPEAKER;
	sc->sc_in_port = CSPORT_MICROPHONE;
	sc->sc_mute[CSPORT_SPEAKER] = 1;
	sc->sc_mute[CSPORT_MONITOR] = 1;
	sc->sc_volume[CSPORT_SPEAKER].left = 192;
	sc->sc_volume[CSPORT_SPEAKER].right = 192;
}

void
cs4231_write(sc, r, v)
	struct cs4231_softc *sc;
	u_int8_t r, v;
{
	sc->sc_regs->iar = r;
	sc->sc_regs->idr = v;
}

u_int8_t
cs4231_read(sc, r)
	struct cs4231_softc *sc;
	u_int8_t r;
{
	sc->sc_regs->iar = r;
	return (sc->sc_regs->idr);
}

/*
 * Hardware interrupt handler
 */
int
cs4231_intr(v)
	void *v;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)v;
	struct cs4231_regs *regs = sc->sc_regs;
	struct cs_channel *chan;
	struct cs_dma *p;
	u_int32_t csr;
	u_int8_t reg, status;
	int r = 0;

	mtx_enter(&audio_lock);
	csr = regs->dma_csr;
	regs->dma_csr = csr;

	if ((csr & APC_CSR_EIE) && (csr & APC_CSR_EI)) {
		printf("%s: error interrupt\n", sc->sc_dev.dv_xname);
		r = 1;
	}

	if ((csr & APC_CSR_PIE) && (csr & APC_CSR_PI)) {
		/* playback interrupt */
		r = 1;
	}

	if ((csr & APC_CSR_GIE) && (csr & APC_CSR_GI)) {
		/* general interrupt */
		status = regs->status;
		if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
			regs->iar = CS_IRQ_STATUS;
			reg = regs->idr;
			if (reg & CS_AFS_PI) {
				cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
				cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
			}
			if (reg & CS_AFS_CI) {
				cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
				cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
			}
			regs->status = 0;
		}
		r = 1;
	}

	if ((csr & APC_CSR_PMIE) && (csr & APC_CSR_PMI)) {
		u_int32_t nextaddr, togo;

		chan = &sc->sc_playback;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->addr_dva;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = regs->dma_pnva + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		regs->dma_pnva = nextaddr;
		regs->dma_pnc = togo;

		if (chan->cs_intr != NULL)
			(*chan->cs_intr)(chan->cs_arg);
		r = 1;
	}

	if ((csr & APC_CSR_CIE) && (csr & APC_CSR_CI)) {
		if (csr & APC_CSR_CD) {
			u_int32_t nextaddr, togo;

			chan = &sc->sc_capture;
			p = chan->cs_curdma;
			togo = chan->cs_segsz - chan->cs_cnt;
			if (togo == 0) {
				nextaddr = (u_int32_t)p->addr_dva;
				chan->cs_cnt = togo = chan->cs_blksz;
			} else {
				nextaddr = regs->dma_cnva + chan->cs_blksz;
				if (togo > chan->cs_blksz)
					togo = chan->cs_blksz;
				chan->cs_cnt += togo;
			}

			regs->dma_cnva = nextaddr;
			regs->dma_cnc = togo;

			if (chan->cs_intr != NULL)
				(*chan->cs_intr)(chan->cs_arg);
		}
		r = 1;
	}

	if ((csr & APC_CSR_CMIE) && (csr & APC_CSR_CMI)) {
		/* capture empty */
		r = 1;
	}
	mtx_leave(&audio_lock);
	return (r);
}

int
cs4231_set_speed(sc, argp)
	struct cs4231_softc *sc;
	u_long *argp;

{
	/*
	 * The available speeds are in the following table. Keep the speeds in
	 * the increasing order.
	 */
	typedef struct {
		int speed;
		u_char bits;
	} speed_struct;
	u_long arg = *argp;

	static speed_struct speed_table[] = {
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{6620,	(7 << 1) | CLOCK_XTAL2},
		{8000,	(0 << 1) | CLOCK_XTAL1},
		{9600,	(7 << 1) | CLOCK_XTAL1},
		{11025,	(1 << 1) | CLOCK_XTAL2},
		{16000,	(1 << 1) | CLOCK_XTAL1},
		{18900,	(2 << 1) | CLOCK_XTAL2},
		{22050,	(3 << 1) | CLOCK_XTAL2},
		{27420,	(2 << 1) | CLOCK_XTAL1},
		{32000,	(3 << 1) | CLOCK_XTAL1},
		{33075,	(6 << 1) | CLOCK_XTAL2},
		{33075,	(4 << 1) | CLOCK_XTAL2},
		{44100,	(5 << 1) | CLOCK_XTAL2},
		{48000,	(6 << 1) | CLOCK_XTAL1},
	};

	int i, n, selected = -1;

	n = sizeof(speed_table) / sizeof(speed_struct);

	if (arg < speed_table[0].speed)
		selected = 0;
	if (arg > speed_table[n - 1].speed)
		selected = n - 1;

	for (i = 1; selected == -1 && i < n; i++) {
		if (speed_table[i].speed == arg)
			selected = i;
		else if (speed_table[i].speed > arg) {
			int diff1, diff2;

			diff1 = arg - speed_table[i - 1].speed;
			diff2 = speed_table[i].speed - arg;
			if (diff1 < diff2)
				selected = i - 1;
			else
				selected = i;
		}
	}

	if (selected == -1)
		selected = 3;

	sc->sc_speed_bits = speed_table[selected].bits;
	sc->sc_need_commit = 1;
	*argp = speed_table[selected].speed;

	return (0);
}

/*
 * Audio interface functions
 */
int
cs4231_open(addr, flags)
	void *addr;
	int flags;
{
	struct cs4231_softc *sc = addr;
	struct cs4231_regs *regs = sc->sc_regs;
	int tries;

	if (sc->sc_open)
		return (EBUSY);
	sc->sc_open = 1;

	sc->sc_capture.cs_intr = NULL;
	sc->sc_capture.cs_arg = NULL;
	sc->sc_capture.cs_locked = 0;

	sc->sc_playback.cs_intr = NULL;
	sc->sc_playback.cs_arg = NULL;
	sc->sc_playback.cs_locked = 0;

	regs->dma_csr = APC_CSR_RESET;
	DELAY(10);
	regs->dma_csr = 0;
	DELAY(10);
	regs->dma_csr |= APC_CSR_CODEC_RESET;

	DELAY(20);

	regs->dma_csr &= ~(APC_CSR_CODEC_RESET);

	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for reset\n", sc->sc_dev.dv_xname);

	/* Turn on cs4231 mode */
	cs4231_write(sc, SP_MISC_INFO,
	    cs4231_read(sc, SP_MISC_INFO) | MODE2);

	cs4231_setup_output(sc);

	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) | INTERRUPT_ENABLE);

	return (0);
}

void
cs4231_setup_output(sc)
	struct cs4231_softc *sc;
{
	u_int8_t pc, mi, rm, lm;

	pc = cs4231_read(sc, SP_PIN_CONTROL) | CS_PC_HDPHMUTE | CS_PC_LINEMUTE;

	mi = cs4231_read(sc, CS_MONO_IO_CONTROL) | MONO_OUTPUT_MUTE;

	lm = cs4231_read(sc, SP_LEFT_OUTPUT_CONTROL);
	lm &= ~OUTPUT_ATTEN_BITS;
	lm |= ((~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	rm = cs4231_read(sc, SP_RIGHT_OUTPUT_CONTROL);
	rm &= ~OUTPUT_ATTEN_BITS;
	rm |= ((~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	if (sc->sc_mute[CSPORT_MONITOR]) {
		lm &= ~OUTPUT_MUTE;
		rm &= ~OUTPUT_MUTE;
	}

	switch (sc->sc_out_port) {
	case CSPORT_HEADPHONE:
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_HDPHMUTE;
		break;
	case CSPORT_SPEAKER:
		if (sc->sc_mute[CSPORT_SPEAKER])
			mi &= ~MONO_OUTPUT_MUTE;
		break;
	case CSPORT_LINEOUT:
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_LINEMUTE;
		break;
	}

	cs4231_write(sc, SP_LEFT_OUTPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_OUTPUT_CONTROL, rm);
	cs4231_write(sc, SP_PIN_CONTROL, pc);
	cs4231_write(sc, CS_MONO_IO_CONTROL, mi);

	/* XXX doesn't really belong here... */
	switch (sc->sc_in_port) {
	case CSPORT_LINEIN:
		pc = LINE_INPUT;
		break;
	case CSPORT_AUX1:
		pc = AUX_INPUT;
		break;
	case CSPORT_DAC:
		pc = MIXED_DAC_INPUT;
		break;
	case CSPORT_MICROPHONE:
	default:
		pc = MIC_INPUT;
		break;
	}
	lm = cs4231_read(sc, SP_LEFT_INPUT_CONTROL);
	rm = cs4231_read(sc, SP_RIGHT_INPUT_CONTROL);
	lm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	rm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	lm |= pc | (sc->sc_adc.left >> 4);
	rm |= pc | (sc->sc_adc.right >> 4);
	cs4231_write(sc, SP_LEFT_INPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_INPUT_CONTROL, rm);
}

void
cs4231_close(addr)
	void *addr;
{
	struct cs4231_softc *sc = addr;
	struct cs4231_regs *regs = sc->sc_regs;

	/* XXX: already called by upper layer */
	cs4231_halt_input(sc);
	cs4231_halt_output(sc);
	regs->iar = SP_PIN_CONTROL;
	regs->idr &= ~INTERRUPT_ENABLE;
	sc->sc_open = 0;
}

int
cs4231_query_encoding(addr, fp)
	void *addr;
	struct audio_encoding *fp;
{
	int err = 0;

	switch (fp->index) {
	case 0:
		strlcpy(fp->name, AudioEmulaw, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULAW;
		fp->precision = 8;
		fp->flags = 0;
		break;
	case 1:
		strlcpy(fp->name, AudioEalaw, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ALAW;
		fp->precision = 8;
		fp->flags = 0;
		break;
	case 2:
		strlcpy(fp->name, AudioEslinear_le, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_SLINEAR_LE;
		fp->precision = 16;
		fp->flags = 0;
		break;
	case 3:
		strlcpy(fp->name, AudioEulinear, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULINEAR;
		fp->precision = 8;
		fp->flags = 0;
		break;
	case 4:
		strlcpy(fp->name, AudioEslinear_be, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_SLINEAR_BE;
		fp->precision = 16;
		fp->flags = 0;
		break;
	default:
		err = EINVAL;
	}
	fp->bps = AUDIO_BPS(fp->precision);
	fp->msb = 1;
	return (err);
}

int
cs4231_set_params(addr, setmode, usemode, p, r)
	void *addr;
	int setmode, usemode;
	struct audio_params *p, *r;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	int err, bits, enc = p->encoding;

	switch (enc) {
	case AUDIO_ENCODING_ULAW:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_ULAW >> 5;
		break;
	case AUDIO_ENCODING_ALAW:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_ALAW >> 5;
		break;
	case AUDIO_ENCODING_SLINEAR_LE:
		if (p->precision != 16)
			return (EINVAL);
		bits = FMT_TWOS_COMP >> 5;
		break;
	case AUDIO_ENCODING_SLINEAR_BE:
		if (p->precision != 16)
			return (EINVAL);
		bits = FMT_TWOS_COMP_BE >> 5;
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		break;
	default:
		return (EINVAL);
	}

	if (p->channels != 1 && p->channels != 2)
		return (EINVAL);

	err = cs4231_set_speed(sc, &p->sample_rate);
	if (err)
		return (err);

	p->bps = AUDIO_BPS(p->precision);
	r->bps = AUDIO_BPS(r->precision);
	p->msb = r->msb = 1;

	sc->sc_format_bits = bits;
	sc->sc_channels = p->channels;
	sc->sc_precision = p->precision;
	sc->sc_need_commit = 1;
	return (0);
}

int
cs4231_round_blocksize(addr, blk)
	void *addr;
	int blk;
{
	return ((blk + 3) & (-4));
}

int
cs4231_commit_settings(addr)
	void *addr;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	struct cs4231_regs *regs = sc->sc_regs;
	int tries;
	u_int8_t r, fs;

	if (sc->sc_need_commit == 0)
		return (0);

	fs = sc->sc_speed_bits | (sc->sc_format_bits << 5);
	if (sc->sc_channels == 2)
		fs |= FMT_STEREO;

	r = cs4231_read(sc, SP_INTERFACE_CONFIG) | AUTO_CAL_ENABLE;
	regs->iar = MODE_CHANGE_ENABLE;
	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	regs->idr = r;

	regs->iar = MODE_CHANGE_ENABLE | SP_CLOCK_DATA_FORMAT;
	regs->idr = fs;
	r = regs->idr;
	r = regs->idr;
	tries = CS_TIMEOUT;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout committing fspb\n", sc->sc_dev.dv_xname);

	regs->iar = MODE_CHANGE_ENABLE | CS_REC_FORMAT;
	regs->idr = fs;
	r = regs->idr;
	r = regs->idr;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout committing cdf\n", sc->sc_dev.dv_xname);

	regs->iar = 0;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for !mce\n", sc->sc_dev.dv_xname);

	regs->iar = SP_TEST_AND_INIT;
	for (tries = CS_TIMEOUT; tries && regs->idr & AUTO_CAL_IN_PROG; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for autocalibration\n",
		    sc->sc_dev.dv_xname);

	sc->sc_need_commit = 0;
	return (0);
}

int
cs4231_halt_output(addr)
	void *addr;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	struct cs4231_regs *regs = sc->sc_regs;
	u_int8_t r;

	mtx_enter(&audio_lock);
	regs->dma_csr &= ~(APC_CSR_EI | APC_CSR_GIE | APC_CSR_PIE |
	    APC_CSR_EIE | APC_CSR_PDMA_GO | APC_CSR_PMIE);
	regs->iar = SP_INTERFACE_CONFIG;
	r = regs->idr & (~PLAYBACK_ENABLE);
	regs->iar = SP_INTERFACE_CONFIG;
	regs->idr = r;
	sc->sc_playback.cs_locked = 0;
	mtx_leave(&audio_lock);
	return (0);
}

int
cs4231_halt_input(addr)
	void *addr;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	struct cs4231_regs *regs = sc->sc_regs;

	mtx_enter(&audio_lock);
	regs->dma_csr = APC_CSR_CAPTURE_PAUSE;
	regs->iar = SP_INTERFACE_CONFIG;
	regs->idr &= ~CAPTURE_ENABLE;
	sc->sc_capture.cs_locked = 0;
	mtx_leave(&audio_lock);
	return (0);
}

int
cs4231_getdev(addr, retp)
	void *addr;
	struct audio_device *retp;
{
	*retp = cs4231_device;
	return (0);
}

int
cs4231_set_port(addr, cp)
	void *addr;
	mixer_ctrl_t *cp;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	int error = EINVAL;

	DPRINTF(("cs4231_set_port: port=%d type=%d\n", cp->dev, cp->type));

	switch (cp->dev) {
	case CSAUDIO_DAC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    AUX_INPUT_ATTEN_BITS;
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] &
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX1_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] &
			    AUX_INPUT_ATTEN_BITS;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_LINE_IN_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    AUX_INPUT_ATTEN_BITS;
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] &
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = CS_RIGHT_LINE_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] &
			    AUX_INPUT_ATTEN_BITS;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_MIC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
#if 0
			sc->sc_regs->iar = CS_MONO_IO_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    MONO_INPUT_ATTEN_BITS;
#endif
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_CD_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    AUX_INPUT_ATTEN_BITS;
			error = 0;
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] &
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX2_CONTROL;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] &
			    AUX_INPUT_ATTEN_BITS;
			error = 0;
		}
		else
			break;
		break;
	case CSAUDIO_MONITOR_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = SP_DIGITAL_MIX;
			sc->sc_regs->idr =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] << 2;
		}
		else
			break;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_volume[CSPORT_SPEAKER].left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_volume[CSPORT_SPEAKER].right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_volume[CSPORT_SPEAKER].left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_volume[CSPORT_SPEAKER].right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		}
		else
			break;

		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_OUTPUT:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		if (cp->un.ord != CSPORT_LINEOUT &&
		    cp->un.ord != CSPORT_SPEAKER &&
		    cp->un.ord != CSPORT_HEADPHONE)
			return (EINVAL);
		sc->sc_out_port = cp->un.ord;
		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_LINE_IN_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_LINEIN] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_DAC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_AUX1] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_CD_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_AUX2] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MIC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_MONO] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MONITOR_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_MONITOR] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_SPEAKER] = cp->un.ord ? 1 : 0;
		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_REC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		} else if (cp->un.value.num_channels == 2) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		} else
			break;
		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_RECORD_SOURCE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		if (cp->un.ord == CSPORT_MICROPHONE ||
		    cp->un.ord == CSPORT_LINEIN ||
		    cp->un.ord == CSPORT_AUX1 ||
		    cp->un.ord == CSPORT_DAC) {
			sc->sc_in_port = cp->un.ord;
			error = 0;
			cs4231_setup_output(sc);
		}
		break;
	}

	return (error);
}

int
cs4231_get_port(addr, cp)
	void *addr;
	mixer_ctrl_t *cp;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	int error = EINVAL;

	DPRINTF(("cs4231_get_port: port=%d type=%d\n", cp->dev, cp->type));

	switch (cp->dev) {
	case CSAUDIO_DAC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX1_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_LINE_IN_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = CS_RIGHT_LINE_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_MIC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
#if 0
			sc->sc_regs->iar = CS_MONO_IO_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_regs->idr & MONO_INPUT_ATTEN_BITS;
#endif
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_CD_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			error = 0;
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX2_CONTROL;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			error = 0;
		}
		else
			break;
		break;
	case CSAUDIO_MONITOR_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_regs->iar = SP_DIGITAL_MIX;
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_regs->idr >> 2;
		}
		else
			break;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_volume[CSPORT_SPEAKER].left;
		else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_volume[CSPORT_SPEAKER].left;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_volume[CSPORT_SPEAKER].right;
		}
		else
			break;
		error = 0;
		break;
	case CSAUDIO_LINE_IN_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_LINEIN] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_DAC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_AUX1] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_CD_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_AUX2] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MIC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_MONO] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MONITOR_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_MONITOR] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_SPEAKER] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_REC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_adc.left;
		} else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_adc.left;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_adc.right;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_RECORD_SOURCE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_in_port;
		error = 0;
		break;
	case CSAUDIO_OUTPUT:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_out_port;
		error = 0;
		break;
	}
	return (error);
}

int
cs4231_query_devinfo(addr, dip)
	void *addr;
	mixer_devinfo_t *dip;
{
	int err = 0;

	switch (dip->index) {
	case CSAUDIO_MIC_LVL:		/* mono/microphone mixer */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_MIC_MUTE;
		strlcpy(dip->label.name, AudioNmicrophone,
		    sizeof dip->label.name);
		dip->un.v.num_channels = 1;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_DAC_LVL:		/* dacout */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_DAC_MUTE;
		strlcpy(dip->label.name, AudioNdac, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_LINE_IN_LVL:	/* line */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_LINE_IN_MUTE;
		strlcpy(dip->label.name, AudioNline, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_CD_LVL:		/* cd */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_CD_MUTE;
		strlcpy(dip->label.name, AudioNcd, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_MONITOR_LVL:	/* monitor level */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_MONITOR_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_MONITOR_MUTE;
		strlcpy(dip->label.name, AudioNmonitor, sizeof dip->label.name);
		dip->un.v.num_channels = 1;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_OUTPUT_LVL:
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_OUTPUT_MUTE;
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_LINE_IN_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_LINE_IN_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_DAC_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_DAC_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_CD_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_CD_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_MIC_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_MIC_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_MONITOR_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = CSAUDIO_MONITOR_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_OUTPUT_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = CSAUDIO_OUTPUT_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;

	mute:
		strlcpy(dip->label.name, AudioNmute, sizeof dip->label.name);
		dip->un.e.num_mem = 2;
		strlcpy(dip->un.e.member[0].label.name, AudioNon,
		    sizeof dip->un.e.member[0].label.name);
		dip->un.e.member[0].ord = 0;
		strlcpy(dip->un.e.member[1].label.name, AudioNoff,
		    sizeof dip->un.e.member[1].label.name);
		dip->un.e.member[1].ord = 1;
		break;
	case CSAUDIO_REC_LVL:		/* record level */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_RECORD_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_RECORD_SOURCE;
		strlcpy(dip->label.name, AudioNrecord, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_RECORD_SOURCE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_RECORD_CLASS;
		dip->prev = CSAUDIO_REC_LVL;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioNsource, sizeof dip->label.name);
		dip->un.e.num_mem = 4;
		strlcpy(dip->un.e.member[0].label.name, AudioNmicrophone,
		    sizeof dip->un.e.member[0].label.name);
		dip->un.e.member[0].ord = CSPORT_MICROPHONE;
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
		dip->un.e.member[1].ord = CSPORT_LINEIN;
		strlcpy(dip->un.e.member[2].label.name, AudioNcd,
		    sizeof dip->un.e.member[2].label.name);
		dip->un.e.member[2].ord = CSPORT_AUX1;
		strlcpy(dip->un.e.member[3].label.name, AudioNdac,
		    sizeof dip->un.e.member[3].label.name);
		dip->un.e.member[3].ord = CSPORT_DAC;
		break;
	case CSAUDIO_OUTPUT:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_MONITOR_CLASS;
		dip->prev = dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
		dip->un.e.num_mem = 3;
		strlcpy(dip->un.e.member[0].label.name, AudioNspeaker,
		    sizeof dip->un.e.member[0].label.name);
		dip->un.e.member[0].ord = CSPORT_SPEAKER;
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
		dip->un.e.member[1].ord = CSPORT_LINEOUT;
		strlcpy(dip->un.e.member[2].label.name, AudioNheadphone,
		    sizeof dip->un.e.member[2].label.name);
		dip->un.e.member[2].ord = CSPORT_HEADPHONE;
		break;
	case CSAUDIO_INPUT_CLASS:	/* input class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCinputs, sizeof dip->label.name);
		break;
	case CSAUDIO_OUTPUT_CLASS:	/* output class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCoutputs, sizeof dip->label.name);
		break;
	case CSAUDIO_MONITOR_CLASS:	/* monitor class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_MONITOR_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCmonitor, sizeof dip->label.name);
		break;
	case CSAUDIO_RECORD_CLASS:	/* record class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_RECORD_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCrecord, sizeof dip->label.name);
		break;
	default:
		err = ENXIO;
	}

	return (err);
}

void *
cs4231_alloc(addr, direction, size, pool, flags)
	void *addr;
	int direction;
	size_t size;
	int pool;
	int flags;
{
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
	struct cs_dma *p;

	p = (struct cs_dma *)malloc(sizeof(struct cs_dma), pool, flags);
	if (p == NULL)
		return (NULL);

	p->addr_dva = dvma_malloc(size, &p->addr, flags);
	if (p->addr_dva == NULL) {
		free(p, pool, sizeof *p);
		return (NULL);
	}

	p->size = size;
	p->next = sc->sc_dmas;
	sc->sc_dmas = p;
	return (p->addr);
}

void
cs4231_free(addr, ptr, pool)
	void *addr;
	void *ptr;
	int pool;
{
	struct cs4231_softc *sc = addr;
	struct cs_dma *p, **pp;

	for (pp = &sc->sc_dmas; (p = *pp) != NULL; pp = &(*pp)->next) {
		if (p->addr != ptr)
			continue;
		dvma_free(p->addr_dva, p->size, &p->addr);
		*pp = p->next;
		free(p, pool, sizeof *p);
		return;
	}
	printf("%s: attempt to free rogue pointer\n", sc->sc_dev.dv_xname);
}

int
cs4231_get_props(addr)
	void *addr;
{
	return (AUDIO_PROP_FULLDUPLEX);
}

int
cs4231_trigger_output(addr, start, end, blksize, intr, arg, param)
	void *addr, *start, *end;
	int blksize;
	void (*intr)(void *);
	void *arg;
	struct audio_params *param;
{
	struct cs4231_softc *sc = addr;
	struct cs4231_regs *regs = sc->sc_regs;
	struct cs_channel *chan = &sc->sc_playback;
	struct cs_dma *p;
	u_int8_t reg;
	u_int32_t n, csr;

	mtx_enter(&audio_lock);
	if (chan->cs_locked != 0) {
		printf("cs4231_trigger_output: already running\n");
		mtx_leave(&audio_lock);
		return (EINVAL);
	}

	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	p = sc->sc_dmas;
	while (p != NULL && p->addr != start)
		p = p->next;
	if (p == NULL) {
		printf("cs4231_trigger_output: bad addr: %p\n", start);
		mtx_leave(&audio_lock);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_pint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;

	chan->cs_cnt = n;

	csr = regs->dma_csr;
	regs->dma_pnva = (u_int32_t)p->addr_dva;
	regs->dma_pnc = n;

	if ((csr & APC_CSR_PDMA_GO) == 0 || (csr & APC_CSR_PPAUSE) != 0) {
		regs->dma_csr &= ~(APC_CSR_PIE | APC_CSR_PPAUSE);
		regs->dma_csr |= APC_CSR_EI | APC_CSR_GIE |
				 APC_CSR_PIE | APC_CSR_EIE |
				 APC_CSR_PMIE | APC_CSR_PDMA_GO;
		regs->iar = SP_LOWER_BASE_COUNT;
		regs->idr = 0xff;
		regs->iar = SP_UPPER_BASE_COUNT;
		regs->idr = 0xff;
		regs->iar = SP_INTERFACE_CONFIG;
		reg = regs->idr | PLAYBACK_ENABLE;
		regs->iar = SP_INTERFACE_CONFIG;
		regs->idr = reg;
	}
	mtx_leave(&audio_lock);
	return (0);
}

int
cs4231_trigger_input(addr, start, end, blksize, intr, arg, param)
	void *addr, *start, *end;
	int blksize;
	void (*intr)(void *);
	void *arg;
	struct audio_params *param;
{
	struct cs4231_softc *sc = addr;
	struct cs_channel *chan = &sc->sc_capture;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	mtx_enter(&audio_lock);
	if (chan->cs_locked != 0) {
		printf("%s: trigger_input: already running\n",
		    sc->sc_dev.dv_xname);
		mtx_leave(&audio_lock);
		return (EINVAL);
	}
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_input: bad addr: %p\n",
		    sc->sc_dev.dv_xname, start);
		mtx_leave(&audio_lock);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_cint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
	chan->cs_cnt = n;

	sc->sc_regs->dma_cnva = (u_int32_t)p->addr_dva;
	sc->sc_regs->dma_cnc = n;

	csr = sc->sc_regs->dma_csr;
	if ((csr & APC_CSR_CDMA_GO) == 0 || (csr & APC_CSR_CPAUSE) != 0) {
		csr &= APC_CSR_CPAUSE;
		csr |= APC_CSR_GIE | APC_CSR_CMIE | APC_CSR_CIE | APC_CSR_EI |
		    APC_CSR_CDMA_GO;
		sc->sc_regs->dma_csr = csr;
		cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
		cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CAPTURE_ENABLE);
	}

	if (sc->sc_regs->dma_csr & APC_CSR_CD) {
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->addr_dva;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = sc->sc_regs->dma_cnva + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		sc->sc_regs->dma_cnva = nextaddr;
		sc->sc_regs->dma_cnc = togo;
	}
	mtx_leave(&audio_lock);
	return (0);
}
@


1.34
log
@Remove support for ADPCM encoding which isn't used nowadays and
not available to programs anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.33 2015/05/11 06:46:21 ratchov Exp $	*/
d1399 1
a1399 1
		free(p, pool, 0);
d1423 1
a1423 1
		free(p, pool, 0);
@


1.33
log
@Remove all audio format conversion code from the kernel (btw holding
the kernel_lock), as we already do better conversions in
user-mode. Yet, no need for every single driver to fiddle with the
conversion code as they are done transparently by common MI code. With
help from armani and miod, support from mpi

ok armani@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.32 2014/07/12 18:44:42 tedu Exp $	*/
a621 6
	case 5:
		strlcpy(fp->name, AudioEadpcm, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ADPCM;
		fp->precision = 8;
		fp->flags = 0;
		break;
a664 5
		break;
	case AUDIO_ENCODING_ADPCM:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_ADPCM >> 5;
@


1.32
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.31 2013/05/15 21:19:45 ratchov Exp $	*/
a49 1
#include <dev/auconv.h>
a622 18
		strlcpy(fp->name, AudioEslinear, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_SLINEAR;
		fp->precision = 8;
		fp->flags = AUDIO_ENCODINGFLAG_EMULATED;
		break;
	case 6:
		strlcpy(fp->name, AudioEulinear_le, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULINEAR_LE;
		fp->precision = 16;
		fp->flags = AUDIO_ENCODINGFLAG_EMULATED;
		break;
	case 7:
		strlcpy(fp->name, AudioEulinear_be, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULINEAR_BE;
		fp->precision = 16;
		fp->flags = AUDIO_ENCODINGFLAG_EMULATED;
		break;
	case 8:
a643 2
	void (*pswcode)(void *, u_char *, int cnt) = NULL;
	void (*rswcode)(void *, u_char *, int cnt) = NULL;
d657 1
a657 10
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
			bits = FMT_TWOS_COMP >> 5;
		else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR:
		if (p->precision != 8)
d659 1
a659 1
		bits = FMT_PCM8 >> 5;
d662 1
a662 6
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
			bits = FMT_TWOS_COMP_BE >> 5;
		else
d664 1
d666 2
a667 1
	case AUDIO_ENCODING_SLINEAR:
a670 19
		pswcode = rswcode = change_sign8;
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP >> 5;
			pswcode = rswcode = change_sign16_le;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP_BE >> 5;
			pswcode = rswcode = change_sign16_be;
		} else
			return (EINVAL);
a687 2
	p->sw_code = pswcode;
	r->sw_code = rswcode;
@


1.31
log
@remove unused splaudio/splx pair
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.30 2013/05/15 08:29:23 ratchov Exp $	*/
d1464 1
a1464 1
		free(p, pool);
d1488 1
a1488 1
		free(p, pool);
@


1.30
log
@Introduce a global interrupt-aware mutex protecting data
structures (including sound-card registers) from concurent
access by syscall and interrupt code-paths. Since critical
sections remain the same, calls to splraise/spllower can be
safely replaced by calls to mtx_enter/mtx_leave with two
exceptions: (1) mutexes are not reentrant (the inner splraise
is thus removed), and (2) we're not allowed to sleep with a
mutex (either msleep is used or the mutex is released before
sleeping).

ok and help from kettenis, a lot of work from armani
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.29 2010/07/15 03:43:11 jakemsr Exp $	*/
d767 1
a767 1
	int s, tries;
a776 2
	s = splaudio();

a812 2

	splx(s);
@


1.29
log
@add two new members to structs audio_encoding and audio_prinfo.
for both structs, the new members are 'bps' and 'msb', which
describe the number of bytes per sample and data alignment in the
sample, respectively.  drivers must properly set these fields in
the 'query_encoding', 'set_parameters' and 'get_default_params'
hardware interface methods.

discussed with ratchov, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.28 2010/06/18 23:47:24 miod Exp $	*/
d288 1
d376 1
a376 1

d577 1
d830 1
a830 1
	/* XXX Kills some capture bits */
d838 1
d849 1
a849 1
	/* XXX Kills some playback bits */
d854 1
d1520 1
d1523 1
d1536 1
d1573 1
d1591 1
d1595 1
d1607 1
d1658 1
a1658 1

@


1.28
log
@dvma_free() the exact size passed to dvma_malloc().
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.27 2008/04/21 00:32:42 jakemsr Exp $	*/
d648 2
d740 3
@


1.27
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.26 2006/06/02 20:00:54 miod Exp $	*/
d1481 1
a1481 1
		dvma_free(p->addr_dva, 16*1024, &p->addr);
@


1.26
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.25 2005/07/17 10:40:50 miod Exp $	*/
d171 2
a172 1
	cs4231_trigger_input
@


1.25
log
@Do not claim this driver uses a soft interrupt in dmesg since it is not true.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.24 2005/07/09 22:23:13 miod Exp $	*/
a234 2

	sbus_establish(&sc->sc_sd, &sc->sc_dev);
@


1.24
log
@Do not #include "foo.h" and keep the whole file between #if NFOO >0 ... #endif,
config(8) will not bring us into play unless NFOO > 0 anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.23 2005/04/16 21:57:22 mickey Exp $	*/
d243 1
a243 1
	printf(" pri %d, softpri %d\n", pri, IPL_AUSOFT);
@


1.23
log
@do not provide round_buffer if not needed unless explained why in comments
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.22 2005/04/15 13:05:14 mickey Exp $	*/
a33 3
#include "audio.h"
#if NAUDIO > 0

a1645 2

#endif /* NAUDIO > 0 */
@


1.22
log
@make sure aligment does not return zero block size
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.21 2004/09/29 07:35:11 miod Exp $	*/
a139 1
size_t	cs4231_round_buffersize(void *, int, size_t);
d170 1
a170 1
	cs4231_round_buffersize,
a1490 9
}

size_t
cs4231_round_buffersize(addr, direction, size)
	void *addr;
	int direction;
	size_t size;
{
	return (size);
@


1.21
log
@Switch sparc to evcount; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.20 2003/12/20 00:49:45 miod Exp $	*/
d756 1
a756 1
	return (blk & (-4));
@


1.20
log
@Pass -Wformat.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.19 2003/06/02 18:40:59 jason Exp $	*/
d244 2
a245 1
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih, IPL_AUHARD);
a247 2

	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt);
@


1.19
log
@nuke my clause 3 & 4 (and a couple jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.18 2003/05/11 19:41:12 deraadt Exp $	*/
d1539 1
a1539 1
		printf("cs4231_trigger_output: bad addr: %x\n", start);
d1605 1
a1605 1
		printf("%s: trigger_input: bad addr: %x\n",
@


1.18
log
@string cleaning; krw ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.17 2002/09/11 03:11:22 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.17
log
@update from sparc64 version:
-fix several stupid bugs
-get encoding setup correct
-add support for capture
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.16 2002/08/16 18:55:42 jason Exp $	*/
d603 1
a603 1
		strcpy(fp->name, AudioEmulaw);
d609 1
a609 1
		strcpy(fp->name, AudioEalaw);
d615 1
a615 1
		strcpy(fp->name, AudioEslinear_le);
d621 1
a621 1
		strcpy(fp->name, AudioEulinear);
d627 1
a627 1
		strcpy(fp->name, AudioEslinear_be);
d633 1
a633 1
		strcpy(fp->name, AudioEslinear);
d639 1
a639 1
		strcpy(fp->name, AudioEulinear_le);
d645 1
a645 1
		strcpy(fp->name, AudioEulinear_be);
d651 1
a651 1
		strcpy(fp->name, AudioEadpcm);
d1269 2
a1270 1
		strcpy(dip->label.name, AudioNmicrophone);
d1272 2
a1273 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1280 1
a1280 1
		strcpy(dip->label.name, AudioNdac);
d1282 2
a1283 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1290 1
a1290 1
		strcpy(dip->label.name, AudioNline);
d1292 2
a1293 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1300 1
a1300 1
		strcpy(dip->label.name, AudioNcd);
d1302 2
a1303 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1310 1
a1310 1
		strcpy(dip->label.name, AudioNmonitor);
d1312 2
a1313 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1320 1
a1320 1
		strcpy(dip->label.name, AudioNoutput);
d1322 2
a1323 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1363 1
a1363 1
		strcpy(dip->label.name, AudioNmute);
d1365 2
a1366 1
		strcpy(dip->un.e.member[0].label.name, AudioNon);
d1368 2
a1369 1
		strcpy(dip->un.e.member[1].label.name, AudioNoff);
d1377 1
a1377 1
		strcpy(dip->label.name, AudioNrecord);
d1379 2
a1380 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1387 1
a1387 1
		strcpy(dip->label.name, AudioNsource);
d1389 2
a1390 1
		strcpy(dip->un.e.member[0].label.name, AudioNmicrophone);
d1392 2
a1393 1
		strcpy(dip->un.e.member[1].label.name, AudioNline);
d1395 2
a1396 1
		strcpy(dip->un.e.member[2].label.name, AudioNcd);
d1398 2
a1399 1
		strcpy(dip->un.e.member[3].label.name, AudioNdac);
d1406 1
a1406 1
		strcpy(dip->label.name, AudioNoutput);
d1408 2
a1409 1
		strcpy(dip->un.e.member[0].label.name, AudioNspeaker);
d1411 2
a1412 1
		strcpy(dip->un.e.member[1].label.name, AudioNline);
d1414 2
a1415 1
		strcpy(dip->un.e.member[2].label.name, AudioNheadphone);
d1423 1
a1423 1
		strcpy(dip->label.name, AudioCinputs);
d1430 1
a1430 1
		strcpy(dip->label.name, AudioCoutputs);
d1437 1
a1437 1
		strcpy(dip->label.name, AudioCmonitor);
d1444 1
a1444 1
		strcpy(dip->label.name, AudioCrecord);
@


1.16
log
@remove debugging code
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.15 2002/04/30 01:12:29 art Exp $	*/
d94 1
d112 7
a118 1
#define CS_AFS_PI		0x10		/* playback interrupt */
a125 1
void	cs4231_wait(struct cs4231_softc *);
a126 1
void	cs4231_mute_monitor(struct cs4231_softc *, int);
d151 2
d259 1
d261 1
d266 18
d293 2
a296 1
	struct cs_dma *p;
d319 6
a324 4
				regs->iar = SP_LOWER_BASE_COUNT;
				regs->idr = 0xff;
				regs->iar = SP_UPPER_BASE_COUNT;
				regs->idr = 0xff;
d334 4
a337 2
		p = sc->sc_nowplaying;
		togo = sc->sc_playsegsz - sc->sc_playcnt;
d340 1
a340 1
			sc->sc_playcnt = togo = sc->sc_blksz;
d342 4
a345 4
			nextaddr = regs->dma_pnva + sc->sc_blksz;
			if (togo > sc->sc_blksz)
				togo = sc->sc_blksz;
			sc->sc_playcnt += togo;
d350 3
a352 2
		if (sc->sc_pintr != NULL)
			(*sc->sc_pintr)(sc->sc_parg);
d356 22
a377 5
#if 0
	if (csr & APC_CSR_CI) {
		if (sc->sc_rintr != NULL) {
			r = 1;
			(*sc->sc_rintr)(sc->sc_rarg);
d379 6
a385 1
#endif
a389 29
void
cs4231_mute_monitor(sc, mute)
	struct cs4231_softc *sc;
	int mute;
{
	struct cs4231_regs *regs = sc->sc_regs;

	if (mute) {
		regs->iar = SP_LEFT_OUTPUT_CONTROL;	/* left dac */
		regs->idr |= OUTPUT_MUTE;
		regs->iar = SP_RIGHT_OUTPUT_CONTROL;	/* right dac */
		regs->idr |= OUTPUT_MUTE;
#if 0
		regs->iar = CS_MONO_IO_CONTROL;		/* mono */
		regs->idr |= MONO_OUTPUT_MUTE;
#endif
	}
	else {
		regs->iar = SP_LEFT_OUTPUT_CONTROL;	/* left dac */
		regs->idr &= ~OUTPUT_MUTE;
		regs->iar = SP_RIGHT_OUTPUT_CONTROL;	/* right dac */
		regs->idr &= ~OUTPUT_MUTE;
#if 0
		regs->iar = CS_MONO_IO_CONTROL;		/* mono */
		regs->idr &= ~MONO_OUTPUT_MUTE;
#endif
	}
}

d448 1
a448 2
	if (selected == -1) {
		printf("%s: can't find speed\n", sc->sc_dev.dv_xname);
a449 1
	}
a457 28
void
cs4231_wait(sc)
	struct cs4231_softc *sc;
{
	struct cs4231_regs *regs = sc->sc_regs;
	int tries;

	DELAY(100);

	regs->iar = ~(MODE_CHANGE_ENABLE);
	tries = CS_TIMEOUT;
	while (regs->iar == SP_IN_INIT && tries--) {
		DELAY(100);
	}
	if (!tries)
		printf("%s: waited too long to reset iar\n",
		    sc->sc_dev.dv_xname);

	regs->iar = SP_TEST_AND_INIT;
	tries = CS_TIMEOUT;
	while (regs->idr == AUTO_CAL_IN_PROG && tries--) {
		DELAY(100);
	}
	if (!tries)
		printf("%s: waited too long to reset errinit\n",
		    sc->sc_dev.dv_xname);
}

d468 1
a468 1
	u_int8_t reg;
d473 8
a480 5
	sc->sc_locked = 0;
	sc->sc_rintr = 0;
	sc->sc_rarg = 0;
	sc->sc_pintr = 0;
	sc->sc_parg = 0;
a490 1
	regs->iar |= MODE_CHANGE_ENABLE;
d492 8
a499 1
	cs4231_wait(sc);
d501 1
a501 4
	regs->iar = MODE_CHANGE_ENABLE | SP_MISC_INFO;
	regs->idr = MODE2;

	/* XXX TODO: setup some defaults */
d503 2
a504 2
	regs->iar = ~(MODE_CHANGE_ENABLE);
	cs4231_wait(sc);
a505 12
	regs->iar = SP_PIN_CONTROL;
	regs->idr |= INTERRUPT_ENABLE;

	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	reg = regs->idr;
	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	regs->idr = reg & ~(AUTO_CAL_ENABLE);

	regs->iar = ~(MODE_CHANGE_ENABLE);
	cs4231_wait(sc);

	cs4231_setup_output(sc);
d513 15
a527 1
	struct cs4231_regs *regs = sc->sc_regs;
d529 4
a532 4
	regs->iar = SP_PIN_CONTROL;
	regs->idr |= CS_PC_HDPHMUTE | CS_PC_LINEMUTE;
	regs->iar = CS_MONO_IO_CONTROL;
	regs->idr |= MONO_OUTPUT_MUTE;
d536 2
a537 4
		if (sc->sc_mute[CSPORT_SPEAKER]) {
			regs->iar = SP_PIN_CONTROL;
			regs->idr &= ~CS_PC_HDPHMUTE;
		}
d540 2
a541 4
		if (sc->sc_mute[CSPORT_SPEAKER]) {
			regs->iar = CS_MONO_IO_CONTROL;
			regs->idr &= ~MONO_OUTPUT_MUTE;
		}
d544 2
a545 4
		if (sc->sc_mute[CSPORT_SPEAKER]) {
			regs->iar = SP_PIN_CONTROL;
			regs->idr &= ~CS_PC_LINEMUTE;
		}
d549 29
a577 8
	regs->iar = SP_LEFT_OUTPUT_CONTROL;
	regs->idr &= ~OUTPUT_ATTEN_BITS;
	regs->idr |= (~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
	    OUTPUT_ATTEN_BITS;
	regs->iar = SP_RIGHT_OUTPUT_CONTROL;
	regs->idr &= ~OUTPUT_ATTEN_BITS;
	regs->idr |= (~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
	    OUTPUT_ATTEN_BITS;
d669 3
a671 26
	int err, bits, enc;
	void (*pswcode)(void *, u_char *, int cnt);
	void (*rswcode)(void *, u_char *, int cnt);

	enc = p->encoding;
	pswcode = rswcode = 0;
	switch (enc) {
	case AUDIO_ENCODING_SLINEAR_LE:
		if (p->precision == 8) {
			enc = AUDIO_ENCODING_ULINEAR_LE;
			pswcode = rswcode = change_sign8;
		}
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
		if (p->precision == 16) {
			enc = AUDIO_ENCODING_SLINEAR_LE;
			pswcode = rswcode = change_sign16;
		}
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 16) {
			enc = AUDIO_ENCODING_SLINEAR_BE;
			pswcode = rswcode = change_sign16;
		}
		break;
	}
d675 2
d680 2
a683 3
	case AUDIO_ENCODING_ADPCM:
		bits = FMT_ADPCM >> 5;
		break;
d685 4
a688 1
		if (p->precision == 16)
d693 5
d699 4
a702 1
		if (p->precision == 16)
d707 6
d716 17
a732 1
		else
d734 1
d772 1
a772 2
	u_char fs;
	volatile u_int8_t x;
a776 4
	s = splaudio();

	cs4231_mute_monitor(sc, 1);

d781 7
d790 6
a795 5
	x = regs->idr;
	x = regs->idr;
	tries = 100000;
	while (tries-- && regs->idr == SP_IN_INIT);
	if (tries == 0) {
a796 3
		splx(s);
		return (0);
	}
d800 5
a804 5
	x = regs->idr;
	x = regs->idr;
	tries = 100000;
	while (tries-- && regs->idr == SP_IN_INIT);
	if (tries == 0) {
a805 3
		splx(s);
		return (0);
	}
d807 5
a811 1
	cs4231_wait(sc);
d813 6
a818 1
	cs4231_mute_monitor(sc, 0);
d834 1
d841 1
a841 1
	sc->sc_locked = 0;
d852 1
d856 1
a856 1
	sc->sc_locked = 0;
d996 2
d1046 14
d1064 8
d1230 1
a1230 1
			    AUDIO_MIN_GAIN;
d1233 1
a1233 1
			    AUDIO_MIN_GAIN;
d1235 1
a1235 1
			    AUDIO_MIN_GAIN;
d1241 3
a1243 2
		if (cp->type != AUDIO_MIXER_ENUM) break;
		cp->un.ord = MIC_IN_PORT;
d1247 2
a1248 1
		if (cp->type != AUDIO_MIXER_ENUM) break;
d1378 9
a1386 9
		dip->un.e.num_mem = 3;
		strcpy(dip->un.e.member[0].label.name, AudioNcd);
		dip->un.e.member[0].ord = DAC_IN_PORT;
		strcpy(dip->un.e.member[1].label.name, AudioNmicrophone);
		dip->un.e.member[1].ord = MIC_IN_PORT;
		strcpy(dip->un.e.member[2].label.name, AudioNdac);
		dip->un.e.member[2].ord = AUX1_IN_PORT;
		strcpy(dip->un.e.member[3].label.name, AudioNline);
		dip->un.e.member[3].ord = LINE_IN_PORT;
d1509 1
d1514 1
a1514 1
	if (sc->sc_locked != 0) {
d1519 3
a1521 3
	sc->sc_locked = 1;
	sc->sc_pintr = intr;
	sc->sc_parg = arg;
d1537 3
a1539 3
	sc->sc_blksz = blksize;
	sc->sc_nowplaying = p;
	sc->sc_playsegsz = n;
d1541 2
a1542 2
	if (n > sc->sc_blksz)
		n = sc->sc_blksz;
d1544 1
a1544 1
	sc->sc_playcnt = n;
d1575 72
a1646 1
	return (ENXIO);
@


1.15
log
@Fix an ancient problem in how sparc interrupts are handled.

There are many interrupt handlers that assume that they don't need to do
any spl protection in their code because the interrupt of some level can't
be interrupted by an interrupt of the same level. The problem is that some
interrupt handlers have hardware levels that are lower then their "software"
levels.

Fix this by adding an additional field to struct intrhand that specifies which
"software" level an interrupt handler has and blocks that level while handling
the interrupt. This new field is initialized in intr_establish which gets
an additional argument (which can be -1 meaning that the interrupt handler
doesn't need to block any additional level).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.14 2002/04/28 03:51:19 art Exp $	*/
a1186 2
	default:
		printf("Invalid kind!\n");
@


1.14
log
@Rename all PIL_* constants to IPL_* to match other archs and make them
usable in MD code in the future.
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.13 2002/03/14 03:15:59 millert Exp $	*/
d242 1
a242 1
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih);
@


1.13
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.12 2002/03/14 01:26:42 millert Exp $	*/
d244 1
a244 1
	printf(" pri %d, softpri %d\n", pri, PIL_AUSOFT);
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.11 2002/01/20 23:21:54 ericj Exp $	*/
d142 4
a145 4
int	cs4231_trigger_output __P((void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *));
int	cs4231_trigger_input __P((void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *));
@


1.11
log
@
move a few more arch specific drivers to use new allocm and round_buffersize.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.10 2002/01/18 14:29:35 jason Exp $	*/
d115 8
a122 8
int	cs4231_match	__P((struct device *, void *, void *));
void	cs4231_attach	__P((struct device *, struct device *, void *));
int	cs4231_intr	__P((void *));

void	cs4231_wait		__P((struct cs4231_softc *));
int	cs4231_set_speed	__P((struct cs4231_softc *, u_long *));
void	cs4231_mute_monitor	__P((struct cs4231_softc *, int));
void	cs4231_setup_output	__P((struct cs4231_softc *sc));
d125 17
a141 17
int	cs4231_open		__P((void *, int));
void	cs4231_close		__P((void *));
int	cs4231_query_encoding	__P((void *, struct audio_encoding *));
int	cs4231_set_params	__P((void *, int, int, struct audio_params *,
    struct audio_params *));
int	cs4231_round_blocksize	__P((void *, int));
int	cs4231_commit_settings	__P((void *));
int	cs4231_halt_output	__P((void *));
int	cs4231_halt_input	__P((void *));
int	cs4231_getdev		__P((void *, struct audio_device *));
int	cs4231_set_port		__P((void *, mixer_ctrl_t *));
int	cs4231_get_port		__P((void *, mixer_ctrl_t *));
int	cs4231_query_devinfo	__P((void *addr, mixer_devinfo_t *));
void *	cs4231_alloc		__P((void *, int, size_t, int, int));
void	cs4231_free		__P((void *, void *, int));
size_t	cs4231_round_buffersize	__P((void *, int, size_t));
int	cs4231_get_props	__P((void *));
d143 1
a143 1
    void (*intr)__P((void *)), void *arg, struct audio_params *));
d145 1
a145 1
    void (*intr)__P((void *)), void *arg, struct audio_params *));
d651 2
a652 2
	void (*pswcode) __P((void *, u_char *, int cnt));
	void (*rswcode) __P((void *, u_char *, int cnt));
d1440 1
a1440 1
	void (*intr) __P((void *));
d1507 1
a1507 1
	void (*intr) __P((void *));
@


1.10
log
@Move CS_TIMEOUT decl
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.9 2002/01/11 22:12:18 jason Exp $	*/
d138 1
a138 1
void *	cs4231_alloc		__P((void *, u_long, int, int));
d140 1
a140 1
u_long	cs4231_round_buffersize	__P((void *, u_long));
d1374 1
a1374 1
cs4231_alloc(addr, size, pool, flags)
d1376 2
a1377 1
	u_long size;
d1420 2
a1421 2
u_long
cs4231_round_buffersize(addr, size)
d1423 2
a1424 1
	u_long size;
@


1.9
log
@Get all of the bit definitions from ad1848reg, apcdmareg, and cs4231reg
headers.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.8 2002/01/11 16:51:14 jason Exp $	*/
d112 2
@


1.8
log
@Oops, that's -disable- interrupt enable in cs4231_close()...
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.7 2002/01/11 16:28:43 jason Exp $	*/
d59 3
d106 7
d272 1
a272 1
	if ((csr & CS_DMACSR_EIE) && (csr & CS_DMACSR_EI)) {
d277 1
a277 1
	if ((csr & CS_DMACSR_PIE) && (csr & CS_DMACSR_PI)) {
d282 1
a282 1
	if ((csr & CS_DMACSR_GIE) && (csr & CS_DMACSR_GI)) {
d285 2
a286 2
		if (status & (CS_STATUS_INT | CS_STATUS_SER)) {
			regs->iar = CS_IAR_AFS;
d289 1
a289 1
				regs->iar = CS_IAR_PBLB;
d291 1
a291 1
				regs->iar = CS_IAR_PBUB;
d299 1
a299 1
	if ((csr & CS_DMACSR_PMIE) && (csr & CS_DMACSR_PMI)) {
d322 1
a322 1
	if (csr & CS_DMACSR_CI) {
d341 4
a344 4
		regs->iar = CS_IAR_LDACOUT;		/* left dac */
		regs->idr |= CS_LDACOUT_LDM;
		regs->iar = CS_IAR_RDACOUT;		/* right dac */
		regs->idr |= CS_RDACOUT_RDM;
d346 2
a347 2
		regs->iar = CS_IAR_MONO;		/* mono */
		regs->idr |= CS_MONO_MOM;
d351 4
a354 4
		regs->iar = CS_IAR_LDACOUT;		/* left dac */
		regs->idr &= ~CS_LDACOUT_LDM;
		regs->iar = CS_IAR_RDACOUT;		/* right dac */
		regs->idr &= ~CS_RDACOUT_RDM;
d356 2
a357 2
		regs->iar = CS_IAR_MONO;		/* mono */
		regs->idr &= ~CS_MONO_MOM;
d379 15
a393 15
		{5510,	(0 << 1) | CS_FSPB_C2SL_XTAL2},
		{5510,	(0 << 1) | CS_FSPB_C2SL_XTAL2},
		{6620,	(7 << 1) | CS_FSPB_C2SL_XTAL2},
		{8000,	(0 << 1) | CS_FSPB_C2SL_XTAL1},
		{9600,	(7 << 1) | CS_FSPB_C2SL_XTAL1},
		{11025,	(1 << 1) | CS_FSPB_C2SL_XTAL2},
		{16000,	(1 << 1) | CS_FSPB_C2SL_XTAL1},
		{18900,	(2 << 1) | CS_FSPB_C2SL_XTAL2},
		{22050,	(3 << 1) | CS_FSPB_C2SL_XTAL2},
		{27420,	(2 << 1) | CS_FSPB_C2SL_XTAL1},
		{32000,	(3 << 1) | CS_FSPB_C2SL_XTAL1},
		{33075,	(6 << 1) | CS_FSPB_C2SL_XTAL2},
		{33075,	(4 << 1) | CS_FSPB_C2SL_XTAL2},
		{44100,	(5 << 1) | CS_FSPB_C2SL_XTAL2},
		{48000,	(6 << 1) | CS_FSPB_C2SL_XTAL1},
d441 1
a441 1
	regs->iar = ~(CS_IAR_MCE);
d443 1
a443 1
	while (regs->iar == CS_IAR_INIT && tries--) {
d450 1
a450 1
	regs->iar = CS_IAR_ERRINIT;
d452 1
a452 1
	while (regs->idr == CS_ERRINIT_ACI && tries--) {
d481 1
a481 1
	regs->dma_csr = CS_DMACSR_RESET;
d485 1
a485 1
	regs->dma_csr |= CS_DMACSR_CODEC_RESET;
d489 2
a490 2
	regs->dma_csr &= ~(CS_DMACSR_CODEC_RESET);
	regs->iar |= CS_IAR_MCE;
d494 2
a495 20
	regs->iar = CS_IAR_MCE | CS_IAR_MODEID;
	regs->idr = CS_MODEID_MODE2;

	regs->iar = CS_IAR_VID;
	if ((regs->idr & CS_VID_CHIP_MASK) == CS_VID_CHIP_CS4231) {
		switch (regs->idr & CS_VID_VER_MASK) {
		case CS_VID_VER_CS4231A:
		case CS_VID_VER_CS4231:
		case CS_VID_VER_CS4232:
			break;
		default:
			printf("%s: unknown CS version: %d\n",
			    sc->sc_dev.dv_xname, regs->idr & CS_VID_VER_MASK);
		}
	}
	else {
		printf("%s: unknown CS chip/version: %d/%d\n",
		    sc->sc_dev.dv_xname, regs->idr & CS_VID_CHIP_MASK,
		    regs->idr & CS_VID_VER_MASK);
	}
d499 1
a499 1
	regs->iar = ~(CS_IAR_MCE);
d502 2
a503 2
	regs->iar = CS_IAR_PC;
	regs->idr |= CS_PC_IEN;
d505 1
a505 1
	regs->iar = CS_IAR_MCE | CS_IAR_IC;
d507 2
a508 2
	regs->iar = CS_IAR_MCE | CS_IAR_IC;
	regs->idr = reg & ~(CS_IC_CAL_CONV);
d510 1
a510 1
	regs->iar = ~(CS_IAR_MCE);
d523 1
a523 1
	regs->iar = CS_IAR_PC;
d525 2
a526 2
	regs->iar = CS_IAR_MONO;
	regs->idr |= CS_MONO_MOM;
d531 1
a531 1
			regs->iar = CS_IAR_PC;
d537 2
a538 2
			regs->iar = CS_IAR_MONO;
			regs->idr &= ~CS_MONO_MOM;
d543 1
a543 1
			regs->iar = CS_IAR_PC;
d549 2
a550 2
	regs->iar = CS_IAR_LDACOUT;
	regs->idr &= ~CS_LDACOUT_LDA_MASK;
d552 3
a554 3
	    CS_LDACOUT_LDA_MASK;
	regs->iar = CS_IAR_RDACOUT;
	regs->idr &= ~CS_RDACOUT_RDA_MASK;
d556 1
a556 1
	    CS_RDACOUT_RDA_MASK;
d568 2
a569 2
	regs->iar = CS_IAR_PC;
	regs->idr &= ~CS_PC_IEN;
d677 1
a677 1
		bits = CS_CDF_FMT_ULAW >> 5;
d680 1
a680 1
		bits = CS_CDF_FMT_ALAW >> 5;
d683 1
a683 1
		bits = CS_CDF_FMT_ADPCM >> 5;
d687 1
a687 1
			bits = CS_CDF_FMT_LINEAR_LE >> 5;
d693 1
a693 1
			bits = CS_CDF_FMT_LINEAR_BE >> 5;
d699 1
a699 1
			bits = CS_CDF_FMT_ULINEAR >> 5;
d751 1
a751 1
		fs |= CS_FSPB_SM_STEREO;
d753 1
a753 1
	regs->iar = CS_IAR_MCE | CS_IAR_FSPB;
d758 1
a758 1
	while (tries-- && regs->idr == CS_IAR_INIT);
d765 1
a765 1
	regs->iar = CS_IAR_MCE | CS_IAR_CDF;
d770 1
a770 1
	while (tries-- && regs->idr == CS_IAR_INIT);
d795 5
a799 5
	regs->dma_csr &= ~(CS_DMACSR_EI | CS_DMACSR_GIE | CS_DMACSR_PIE |
	    CS_DMACSR_EIE | CS_DMACSR_PDMA_GO | CS_DMACSR_PMIE);
	regs->iar = CS_IAR_IC;
	r = regs->idr & (~CS_IC_PEN);
	regs->iar = CS_IAR_IC;
d812 3
a814 3
	regs->dma_csr = CS_DMACSR_CAPTURE_PAUSE;
	regs->iar = CS_IAR_IC;
	regs->idr &= ~CS_IC_CEN;
d843 1
a843 1
			sc->sc_regs->iar = CS_IAR_LACIN1;
d846 1
a846 1
			    CS_LACIN1_GAIN_MASK;
d849 1
a849 1
			sc->sc_regs->iar = CS_IAR_LACIN1;
d852 2
a853 2
			    CS_LACIN1_GAIN_MASK;
			sc->sc_regs->iar = CS_IAR_RACIN1;
d856 1
a856 1
			    CS_RACIN1_GAIN_MASK;
d865 1
a865 1
			sc->sc_regs->iar = CS_IAR_LLI;
d868 1
a868 1
			    CS_LLI_GAIN_MASK;
d871 1
a871 1
			sc->sc_regs->iar = CS_IAR_LLI;
d874 2
a875 2
			    CS_LLI_GAIN_MASK;
			sc->sc_regs->iar = CS_IAR_RLI;
d878 1
a878 1
			    CS_RLI_GAIN_MASK;
d888 1
a888 1
			sc->sc_regs->iar = CS_IAR_MONO;
d891 1
a891 1
			    CS_MONO_MIA_MASK;
d901 1
a901 1
			sc->sc_regs->iar = CS_IAR_LACIN2;
d904 1
a904 1
			    CS_LACIN2_GAIN_MASK;
d908 1
a908 1
			sc->sc_regs->iar = CS_IAR_LACIN2;
d911 2
a912 2
			    CS_LACIN2_GAIN_MASK;
			sc->sc_regs->iar = CS_IAR_RACIN2;
d915 1
a915 1
			    CS_RACIN2_GAIN_MASK;
d925 1
a925 1
			sc->sc_regs->iar = CS_IAR_LOOP;
d1028 1
a1028 1
			sc->sc_regs->iar = CS_IAR_LACIN1;
d1030 1
a1030 1
			    sc->sc_regs->idr & CS_LACIN1_GAIN_MASK;
d1033 1
a1033 1
			sc->sc_regs->iar = CS_IAR_LACIN1;
d1035 2
a1036 2
			    sc->sc_regs->idr & CS_LACIN1_GAIN_MASK;
			sc->sc_regs->iar = CS_IAR_RACIN1;
d1038 1
a1038 1
			    sc->sc_regs->idr & CS_RACIN1_GAIN_MASK;
d1047 1
a1047 1
			sc->sc_regs->iar = CS_IAR_LLI;
d1049 1
a1049 1
			    sc->sc_regs->idr & CS_LLI_GAIN_MASK;
d1052 1
a1052 1
			sc->sc_regs->iar = CS_IAR_LLI;
d1054 2
a1055 2
			    sc->sc_regs->idr & CS_LLI_GAIN_MASK;
			sc->sc_regs->iar = CS_IAR_RLI;
d1057 1
a1057 1
			    sc->sc_regs->idr & CS_RLI_GAIN_MASK;
d1067 1
a1067 1
			sc->sc_regs->iar = CS_IAR_MONO;
d1069 1
a1069 1
			    sc->sc_regs->idr & CS_MONO_MIA_MASK;
d1079 1
a1079 1
			sc->sc_regs->iar = CS_IAR_LACIN2;
d1081 1
a1081 1
			    sc->sc_regs->idr & CS_LACIN2_GAIN_MASK;
d1085 1
a1085 1
			sc->sc_regs->iar = CS_IAR_LACIN2;
d1087 2
a1088 2
			    sc->sc_regs->idr & CS_LACIN2_GAIN_MASK;
			sc->sc_regs->iar = CS_IAR_RACIN2;
d1090 1
a1090 1
			    sc->sc_regs->idr & CS_RACIN2_GAIN_MASK;
d1100 1
a1100 1
			sc->sc_regs->iar = CS_IAR_LOOP;
d1482 6
a1487 6
	if ((csr & CS_DMACSR_PDMA_GO) == 0 || (csr & CS_DMACSR_PPAUSE) != 0) {
		regs->dma_csr &= ~(CS_DMACSR_PIE | CS_DMACSR_PPAUSE);
		regs->dma_csr |= CS_DMACSR_EI | CS_DMACSR_GIE |
				 CS_DMACSR_PIE | CS_DMACSR_EIE |
				 CS_DMACSR_PMIE | CS_DMACSR_PDMA_GO;
		regs->iar = CS_IAR_PBLB;
d1489 1
a1489 1
		regs->iar = CS_IAR_PBUB;
d1491 3
a1493 3
		regs->iar = CS_IAR_IC;
		reg = regs->idr | CS_IC_PEN;
		regs->iar = CS_IAR_IC;
@


1.7
log
@Remove last nights interrupt handling hack and do it right:
* check the qualify the intr pending bits with the enable bits
* enable/disable the cs4231 IEN bit in the pin control register
* move the cs4231 (not dma) interrupt handling to the general interrupt processing
[This properly allows for sharing with, eg. magma]
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.6 2002/01/11 00:11:41 jason Exp $	*/
d577 1
a577 1
	regs->idr |= CS_PC_IEN;
@


1.6
log
@Only check for playback interrupts if we're actually expecting them.
(This fixes the crash in pr2212, but the magma still doesn't want to
talk to the world... looks like oscillator problems).
[Many thanks to John Baker <jdbaker@@blkbox.com> for donating a MAGMA board
for testing]
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.5 2000/09/18 16:57:34 brad Exp $	*/
d105 1
a105 1
int	cs4231_hwintr	__P((void *));
d228 3
a230 3
	sc->sc_hwih.ih_fun = cs4231_hwintr;
	sc->sc_hwih.ih_arg = sc;
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_hwih);
d249 1
a249 1
cs4231_hwintr(v)
d260 25
a284 9
	status = regs->status;
	if (status & (CS_STATUS_INT | CS_STATUS_SER)) {
		regs->iar = CS_IAR_AFS;
		reg = regs->idr;
		if (reg & CS_AFS_PI) {
			regs->iar = CS_IAR_PBLB;
			regs->idr = 0xff;
			regs->iar = CS_IAR_PBUB;
			regs->idr = 0xff;
d286 1
a286 1
		regs->status = 0;
d289 2
a290 8
	regs->dma_csr = csr;

	if (sc->sc_playing) {
		if (csr & (CS_DMACSR_PI|CS_DMACSR_PMI|CS_DMACSR_PIE|CS_DMACSR_PD))
			r = 1;

		if (csr & CS_DMACSR_PM) {
			u_int32_t nextaddr, togo;
d292 17
a308 18
			p = sc->sc_nowplaying;
			togo = sc->sc_playsegsz - sc->sc_playcnt;
			if (togo == 0) {
				nextaddr = (u_int32_t)p->addr_dva;
				sc->sc_playcnt = togo = sc->sc_blksz;
			} else {
				nextaddr = regs->dma_pnva + sc->sc_blksz;
				if (togo > sc->sc_blksz)
					togo = sc->sc_blksz;
				sc->sc_playcnt += togo;
			}

			regs->dma_pnva = nextaddr;
			regs->dma_pnc = togo;
			if (sc->sc_pintr != NULL)
				(*sc->sc_pintr)(sc->sc_parg);
			r = 1;
		}
d510 3
d572 1
d576 2
a809 1
	sc->sc_playing = 0;
a1461 1
	sc->sc_playing = 1;
@


1.5
log
@fix reversed muting; patch from: jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.4 2000/07/04 13:01:08 art Exp $	*/
a273 2
	if (csr & (CS_DMACSR_PI|CS_DMACSR_PMI|CS_DMACSR_PIE|CS_DMACSR_PD))
		r = 1;
d275 6
a280 2
	if (csr & CS_DMACSR_PM) {
		u_int32_t nextaddr, togo;
d282 18
a299 17
		p = sc->sc_nowplaying;
		togo = sc->sc_playsegsz - sc->sc_playcnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->addr_dva;
			sc->sc_playcnt = togo = sc->sc_blksz;
		} else {
			nextaddr = regs->dma_pnva + sc->sc_blksz;
			if (togo > sc->sc_blksz)
				togo = sc->sc_blksz;
			sc->sc_playcnt += togo;
		}

		regs->dma_pnva = nextaddr;
		regs->dma_pnc = togo;
		if (sc->sc_pintr != NULL)
			(*sc->sc_pintr)(sc->sc_parg);
		r = 1;
d302 1
d309 1
d795 1
d1448 1
@


1.5.8.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.11 2002/01/20 23:21:54 ericj Exp $	*/
a58 3
#include <dev/ic/apcdmareg.h>
#include <dev/ic/ad1848reg.h>
#include <dev/ic/cs4231reg.h>
a102 9
/* Sun uses these pins in pin control register as GPIO */
#define	CS_PC_LINEMUTE		XCTL0_ENABLE	/* mute line */
#define	CS_PC_HDPHMUTE		XCTL1_ENABLE	/* mute headphone */

/* cs4231 playback interrupt */
#define CS_AFS_PI		0x10		/* playback interrupt */

#define CS_TIMEOUT		90000		/* recalibration timeout */

d105 1
a105 1
int	cs4231_intr	__P((void *));
d126 1
a126 1
void *	cs4231_alloc		__P((void *, int, size_t, int, int));
d128 1
a128 1
size_t	cs4231_round_buffersize	__P((void *, int, size_t));
d228 3
a230 3
	sc->sc_ih.ih_fun = cs4231_intr;
	sc->sc_ih.ih_arg = sc;
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih);
d249 1
a249 1
cs4231_intr(v)
d260 11
a270 5
	regs->dma_csr = csr;

	if ((csr & APC_CSR_EIE) && (csr & APC_CSR_EI)) {
		printf("%s: error interrupt\n", sc->sc_dev.dv_xname);
		r = 1;
d273 2
a274 19
	if ((csr & APC_CSR_PIE) && (csr & APC_CSR_PI)) {
		/* playback interrupt */
		r = 1;
	}

	if ((csr & APC_CSR_GIE) && (csr & APC_CSR_GI)) {
		/* general interrupt */
		status = regs->status;
		if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
			regs->iar = CS_IRQ_STATUS;
			reg = regs->idr;
			if (reg & CS_AFS_PI) {
				regs->iar = SP_LOWER_BASE_COUNT;
				regs->idr = 0xff;
				regs->iar = SP_UPPER_BASE_COUNT;
				regs->idr = 0xff;
			}
			regs->status = 0;
		}
a275 1
	}
d277 1
a277 1
	if ((csr & APC_CSR_PMIE) && (csr & APC_CSR_PMI)) {
d299 1
a299 2
#if 0
	if (csr & APC_CSR_CI) {
a304 1
#endif
d317 4
a320 4
		regs->iar = SP_LEFT_OUTPUT_CONTROL;	/* left dac */
		regs->idr |= OUTPUT_MUTE;
		regs->iar = SP_RIGHT_OUTPUT_CONTROL;	/* right dac */
		regs->idr |= OUTPUT_MUTE;
d322 2
a323 2
		regs->iar = CS_MONO_IO_CONTROL;		/* mono */
		regs->idr |= MONO_OUTPUT_MUTE;
d327 4
a330 4
		regs->iar = SP_LEFT_OUTPUT_CONTROL;	/* left dac */
		regs->idr &= ~OUTPUT_MUTE;
		regs->iar = SP_RIGHT_OUTPUT_CONTROL;	/* right dac */
		regs->idr &= ~OUTPUT_MUTE;
d332 2
a333 2
		regs->iar = CS_MONO_IO_CONTROL;		/* mono */
		regs->idr &= ~MONO_OUTPUT_MUTE;
d355 15
a369 15
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{6620,	(7 << 1) | CLOCK_XTAL2},
		{8000,	(0 << 1) | CLOCK_XTAL1},
		{9600,	(7 << 1) | CLOCK_XTAL1},
		{11025,	(1 << 1) | CLOCK_XTAL2},
		{16000,	(1 << 1) | CLOCK_XTAL1},
		{18900,	(2 << 1) | CLOCK_XTAL2},
		{22050,	(3 << 1) | CLOCK_XTAL2},
		{27420,	(2 << 1) | CLOCK_XTAL1},
		{32000,	(3 << 1) | CLOCK_XTAL1},
		{33075,	(6 << 1) | CLOCK_XTAL2},
		{33075,	(4 << 1) | CLOCK_XTAL2},
		{44100,	(5 << 1) | CLOCK_XTAL2},
		{48000,	(6 << 1) | CLOCK_XTAL1},
d417 1
a417 1
	regs->iar = ~(MODE_CHANGE_ENABLE);
d419 1
a419 1
	while (regs->iar == SP_IN_INIT && tries--) {
d426 1
a426 1
	regs->iar = SP_TEST_AND_INIT;
d428 1
a428 1
	while (regs->idr == AUTO_CAL_IN_PROG && tries--) {
d457 1
a457 1
	regs->dma_csr = APC_CSR_RESET;
d461 1
a461 1
	regs->dma_csr |= APC_CSR_CODEC_RESET;
d465 2
a466 2
	regs->dma_csr &= ~(APC_CSR_CODEC_RESET);
	regs->iar |= MODE_CHANGE_ENABLE;
d470 20
a489 2
	regs->iar = MODE_CHANGE_ENABLE | SP_MISC_INFO;
	regs->idr = MODE2;
d493 1
a493 1
	regs->iar = ~(MODE_CHANGE_ENABLE);
d496 1
a496 4
	regs->iar = SP_PIN_CONTROL;
	regs->idr |= INTERRUPT_ENABLE;

	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
d498 2
a499 2
	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	regs->idr = reg & ~(AUTO_CAL_ENABLE);
d501 1
a501 1
	regs->iar = ~(MODE_CHANGE_ENABLE);
d514 1
a514 1
	regs->iar = SP_PIN_CONTROL;
d516 2
a517 2
	regs->iar = CS_MONO_IO_CONTROL;
	regs->idr |= MONO_OUTPUT_MUTE;
d522 1
a522 1
			regs->iar = SP_PIN_CONTROL;
d528 2
a529 2
			regs->iar = CS_MONO_IO_CONTROL;
			regs->idr &= ~MONO_OUTPUT_MUTE;
d534 1
a534 1
			regs->iar = SP_PIN_CONTROL;
d540 2
a541 2
	regs->iar = SP_LEFT_OUTPUT_CONTROL;
	regs->idr &= ~OUTPUT_ATTEN_BITS;
d543 3
a545 3
	    OUTPUT_ATTEN_BITS;
	regs->iar = SP_RIGHT_OUTPUT_CONTROL;
	regs->idr &= ~OUTPUT_ATTEN_BITS;
d547 1
a547 1
	    OUTPUT_ATTEN_BITS;
a554 1
	struct cs4231_regs *regs = sc->sc_regs;
a557 2
	regs->iar = SP_PIN_CONTROL;
	regs->idr &= ~INTERRUPT_ENABLE;
d665 1
a665 1
		bits = FMT_ULAW >> 5;
d668 1
a668 1
		bits = FMT_ALAW >> 5;
d671 1
a671 1
		bits = FMT_ADPCM >> 5;
d675 1
a675 1
			bits = FMT_TWOS_COMP >> 5;
d681 1
a681 1
			bits = FMT_TWOS_COMP_BE >> 5;
d687 1
a687 1
			bits = FMT_PCM8 >> 5;
d739 1
a739 1
		fs |= FMT_STEREO;
d741 1
a741 1
	regs->iar = MODE_CHANGE_ENABLE | SP_CLOCK_DATA_FORMAT;
d746 1
a746 1
	while (tries-- && regs->idr == SP_IN_INIT);
d753 1
a753 1
	regs->iar = MODE_CHANGE_ENABLE | CS_REC_FORMAT;
d758 1
a758 1
	while (tries-- && regs->idr == SP_IN_INIT);
d783 5
a787 5
	regs->dma_csr &= ~(APC_CSR_EI | APC_CSR_GIE | APC_CSR_PIE |
	    APC_CSR_EIE | APC_CSR_PDMA_GO | APC_CSR_PMIE);
	regs->iar = SP_INTERFACE_CONFIG;
	r = regs->idr & (~PLAYBACK_ENABLE);
	regs->iar = SP_INTERFACE_CONFIG;
d800 3
a802 3
	regs->dma_csr = APC_CSR_CAPTURE_PAUSE;
	regs->iar = SP_INTERFACE_CONFIG;
	regs->idr &= ~CAPTURE_ENABLE;
d831 1
a831 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d834 1
a834 1
			    AUX_INPUT_ATTEN_BITS;
d837 1
a837 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d840 2
a841 2
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX1_CONTROL;
d844 1
a844 1
			    AUX_INPUT_ATTEN_BITS;
d853 1
a853 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d856 1
a856 1
			    AUX_INPUT_ATTEN_BITS;
d859 1
a859 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d862 2
a863 2
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = CS_RIGHT_LINE_CONTROL;
d866 1
a866 1
			    AUX_INPUT_ATTEN_BITS;
d876 1
a876 1
			sc->sc_regs->iar = CS_MONO_IO_CONTROL;
d879 1
a879 1
			    MONO_INPUT_ATTEN_BITS;
d889 1
a889 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d892 1
a892 1
			    AUX_INPUT_ATTEN_BITS;
d896 1
a896 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d899 2
a900 2
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX2_CONTROL;
d903 1
a903 1
			    AUX_INPUT_ATTEN_BITS;
d913 1
a913 1
			sc->sc_regs->iar = SP_DIGITAL_MIX;
d1016 1
a1016 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d1018 1
a1018 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1021 1
a1021 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d1023 2
a1024 2
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX1_CONTROL;
d1026 1
a1026 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1035 1
a1035 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d1037 1
a1037 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1040 1
a1040 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d1042 2
a1043 2
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = CS_RIGHT_LINE_CONTROL;
d1045 1
a1045 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1055 1
a1055 1
			sc->sc_regs->iar = CS_MONO_IO_CONTROL;
d1057 1
a1057 1
			    sc->sc_regs->idr & MONO_INPUT_ATTEN_BITS;
d1067 1
a1067 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d1069 1
a1069 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1073 1
a1073 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d1075 2
a1076 2
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX2_CONTROL;
d1078 1
a1078 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1088 1
a1088 1
			sc->sc_regs->iar = SP_DIGITAL_MIX;
d1360 1
a1360 1
cs4231_alloc(addr, direction, size, pool, flags)
d1362 1
a1362 2
	int direction;
	size_t size;
d1405 2
a1406 2
size_t
cs4231_round_buffersize(addr, direction, size)
d1408 1
a1408 2
	int direction;
	size_t size;
d1470 6
a1475 6
	if ((csr & APC_CSR_PDMA_GO) == 0 || (csr & APC_CSR_PPAUSE) != 0) {
		regs->dma_csr &= ~(APC_CSR_PIE | APC_CSR_PPAUSE);
		regs->dma_csr |= APC_CSR_EI | APC_CSR_GIE |
				 APC_CSR_PIE | APC_CSR_EIE |
				 APC_CSR_PMIE | APC_CSR_PDMA_GO;
		regs->iar = SP_LOWER_BASE_COUNT;
d1477 1
a1477 1
		regs->iar = SP_UPPER_BASE_COUNT;
d1479 3
a1481 3
		regs->iar = SP_INTERFACE_CONFIG;
		reg = regs->idr | PLAYBACK_ENABLE;
		regs->iar = SP_INTERFACE_CONFIG;
@


1.5.8.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.5.8.1 2002/01/31 22:55:21 niklas Exp $	*/
d115 8
a122 8
int	cs4231_match(struct device *, void *, void *);
void	cs4231_attach(struct device *, struct device *, void *);
int	cs4231_intr(void *);

void	cs4231_wait(struct cs4231_softc *);
int	cs4231_set_speed(struct cs4231_softc *, u_long *);
void	cs4231_mute_monitor(struct cs4231_softc *, int);
void	cs4231_setup_output(struct cs4231_softc *sc);
d125 21
a145 21
int	cs4231_open(void *, int);
void	cs4231_close(void *);
int	cs4231_query_encoding(void *, struct audio_encoding *);
int	cs4231_set_params(void *, int, int, struct audio_params *,
    struct audio_params *);
int	cs4231_round_blocksize(void *, int);
int	cs4231_commit_settings(void *);
int	cs4231_halt_output(void *);
int	cs4231_halt_input(void *);
int	cs4231_getdev(void *, struct audio_device *);
int	cs4231_set_port(void *, mixer_ctrl_t *);
int	cs4231_get_port(void *, mixer_ctrl_t *);
int	cs4231_query_devinfo(void *addr, mixer_devinfo_t *);
void *	cs4231_alloc(void *, int, size_t, int, int);
void	cs4231_free(void *, void *, int);
size_t	cs4231_round_buffersize(void *, int, size_t);
int	cs4231_get_props(void *);
int	cs4231_trigger_output(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
int	cs4231_trigger_input(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
d242 1
a242 1
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih, IPL_AUHARD);
d244 1
a244 1
	printf(" pri %d, softpri %d\n", pri, IPL_AUSOFT);
d651 2
a652 2
	void (*pswcode)(void *, u_char *, int cnt);
	void (*rswcode)(void *, u_char *, int cnt);
d1440 1
a1440 1
	void (*intr)(void *);
d1507 1
a1507 1
	void (*intr)(void *);
@


1.5.8.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.5.8.2 2002/06/11 03:38:15 art Exp $	*/
a93 1
#define	CSPORT_MICROPHONE	9
d111 1
a111 7
#define	CS_AFS_TI		0x40		/* timer interrupt */
#define	CS_AFS_CI		0x20		/* capture interrupt */
#define	CS_AFS_PI		0x10		/* playback interrupt */
#define	CS_AFS_CU		0x08		/* capture underrun */
#define	CS_AFS_CO		0x04		/* capture overrun */
#define	CS_AFS_PO		0x02		/* playback overrun */
#define	CS_AFS_PU		0x01		/* playback underrun */
d119 1
d121 1
a145 2
void cs4231_write(struct cs4231_softc *, u_int8_t, u_int8_t);
u_int8_t cs4231_read(struct cs4231_softc *, u_int8_t);
a251 1
	sc->sc_in_port = CSPORT_MICROPHONE;
a252 1
	sc->sc_mute[CSPORT_MONITOR] = 1;
a256 18
void
cs4231_write(sc, r, v)
	struct cs4231_softc *sc;
	u_int8_t r, v;
{
	sc->sc_regs->iar = r;
	sc->sc_regs->idr = v;
}

u_int8_t
cs4231_read(sc, r)
	struct cs4231_softc *sc;
	u_int8_t r;
{
	sc->sc_regs->iar = r;
	return (sc->sc_regs->idr);
}

a265 2
	struct cs_channel *chan;
	struct cs_dma *p;
d268 1
d291 4
a294 6
				cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
				cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
			}
			if (reg & CS_AFS_CI) {
				cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
				cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
d304 2
a305 4
		chan = &sc->sc_playback;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
d308 1
a308 1
			chan->cs_cnt = togo = chan->cs_blksz;
d310 4
a313 4
			nextaddr = regs->dma_pnva + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
d318 4
d323 6
a328 3
		if (chan->cs_intr != NULL)
			(*chan->cs_intr)(chan->cs_arg);
		r = 1;
d330 1
d332 2
a333 16
	if ((csr & APC_CSR_CIE) && (csr & APC_CSR_CI)) {
		if (csr & APC_CSR_CD) {
			u_int32_t nextaddr, togo;

			chan = &sc->sc_capture;
			p = chan->cs_curdma;
			togo = chan->cs_segsz - chan->cs_cnt;
			if (togo == 0) {
				nextaddr = (u_int32_t)p->addr_dva;
				chan->cs_cnt = togo = chan->cs_blksz;
			} else {
				nextaddr = regs->dma_cnva + chan->cs_blksz;
				if (togo > chan->cs_blksz)
					togo = chan->cs_blksz;
				chan->cs_cnt += togo;
			}
d335 6
a340 2
			regs->dma_cnva = nextaddr;
			regs->dma_cnc = togo;
d342 9
a350 4
			if (chan->cs_intr != NULL)
				(*chan->cs_intr)(chan->cs_arg);
		}
		r = 1;
d352 9
a360 4

	if ((csr & APC_CSR_CMIE) && (csr & APC_CSR_CMI)) {
		/* capture empty */
		r = 1;
a361 2

	return (r);
d422 2
a423 1
	if (selected == -1)
d425 1
d434 28
d472 1
a472 1
	int tries;
d477 5
a481 8

	sc->sc_capture.cs_intr = NULL;
	sc->sc_capture.cs_arg = NULL;
	sc->sc_capture.cs_locked = 0;

	sc->sc_playback.cs_intr = NULL;
	sc->sc_playback.cs_arg = NULL;
	sc->sc_playback.cs_locked = 0;
d492 6
d499 1
a499 8
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for reset\n", sc->sc_dev.dv_xname);

	/* Turn on cs4231 mode */
	cs4231_write(sc, SP_MISC_INFO,
	    cs4231_read(sc, SP_MISC_INFO) | MODE2);
d501 10
a510 1
	cs4231_setup_output(sc);
d512 2
a513 2
	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) | INTERRUPT_ENABLE);
d515 1
d523 1
a523 1
	u_int8_t pc, mi, rm, lm;
d525 4
a528 18
	pc = cs4231_read(sc, SP_PIN_CONTROL) | CS_PC_HDPHMUTE | CS_PC_LINEMUTE;

	mi = cs4231_read(sc, CS_MONO_IO_CONTROL) | MONO_OUTPUT_MUTE;

	lm = cs4231_read(sc, SP_LEFT_OUTPUT_CONTROL);
	lm &= ~OUTPUT_ATTEN_BITS;
	lm |= ((~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	rm = cs4231_read(sc, SP_RIGHT_OUTPUT_CONTROL);
	rm &= ~OUTPUT_ATTEN_BITS;
	rm |= ((~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	if (sc->sc_mute[CSPORT_MONITOR]) {
		lm &= ~OUTPUT_MUTE;
		rm &= ~OUTPUT_MUTE;
	}
d532 4
a535 2
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_HDPHMUTE;
d538 4
a541 2
		if (sc->sc_mute[CSPORT_SPEAKER])
			mi &= ~MONO_OUTPUT_MUTE;
d544 4
a547 2
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_LINEMUTE;
d551 8
a558 29
	cs4231_write(sc, SP_LEFT_OUTPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_OUTPUT_CONTROL, rm);
	cs4231_write(sc, SP_PIN_CONTROL, pc);
	cs4231_write(sc, CS_MONO_IO_CONTROL, mi);

	/* XXX doesn't really belong here... */
	switch (sc->sc_in_port) {
	case CSPORT_LINEIN:
		pc = LINE_INPUT;
		break;
	case CSPORT_AUX1:
		pc = AUX_INPUT;
		break;
	case CSPORT_DAC:
		pc = MIXED_DAC_INPUT;
		break;
	case CSPORT_MICROPHONE:
	default:
		pc = MIC_INPUT;
		break;
	}
	lm = cs4231_read(sc, SP_LEFT_INPUT_CONTROL);
	rm = cs4231_read(sc, SP_RIGHT_INPUT_CONTROL);
	lm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	rm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	lm |= pc | (sc->sc_adc.left >> 4);
	rm |= pc | (sc->sc_adc.right >> 4);
	cs4231_write(sc, SP_LEFT_INPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_INPUT_CONTROL, rm);
d650 26
a675 3
	int err, bits, enc = p->encoding;
	void (*pswcode)(void *, u_char *, int cnt) = NULL;
	void (*rswcode)(void *, u_char *, int cnt) = NULL;
a678 2
		if (p->precision != 8)
			return (EINVAL);
a681 2
		if (p->precision != 8)
			return (EINVAL);
d684 3
d688 1
a688 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a692 5
	case AUDIO_ENCODING_ULINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		break;
d694 1
a694 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a698 6
	case AUDIO_ENCODING_SLINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		pswcode = rswcode = change_sign8;
		break;
d702 1
a702 17
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP >> 5;
			pswcode = rswcode = change_sign16_le;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP_BE >> 5;
			pswcode = rswcode = change_sign16_be;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ADPCM:
		if (p->precision != 8)
a703 1
		bits = FMT_ADPCM >> 5;
d741 2
a742 1
	u_int8_t r, fs;
d747 4
a754 7
	s = splaudio();

	r = cs4231_read(sc, SP_INTERFACE_CONFIG) | AUTO_CAL_ENABLE;
	regs->iar = MODE_CHANGE_ENABLE;
	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	regs->idr = r;

d757 5
a761 6
	r = regs->idr;
	r = regs->idr;
	tries = CS_TIMEOUT;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
d763 3
d769 5
a773 5
	r = regs->idr;
	r = regs->idr;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
d775 3
d779 1
a779 5
	regs->iar = 0;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for !mce\n", sc->sc_dev.dv_xname);
d781 1
a781 6
	regs->iar = SP_TEST_AND_INIT;
	for (tries = CS_TIMEOUT; tries && regs->idr & AUTO_CAL_IN_PROG; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for autocalibration\n",
		    sc->sc_dev.dv_xname);
a796 1
	/* XXX Kills some capture bits */
d803 1
a803 1
	sc->sc_playback.cs_locked = 0;
a813 1
	/* XXX Kills some playback bits */
d817 1
a817 1
	sc->sc_capture.cs_locked = 0;
a956 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
a1004 14
		if (cp->un.value.num_channels == 1) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		} else if (cp->un.value.num_channels == 2) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		} else
			break;
		cs4231_setup_output(sc);
		error = 0;
a1008 8
		if (cp->un.ord == CSPORT_MICROPHONE ||
		    cp->un.ord == CSPORT_LINEIN ||
		    cp->un.ord == CSPORT_AUX1 ||
		    cp->un.ord == CSPORT_DAC) {
			sc->sc_in_port = cp->un.ord;
			error = 0;
			cs4231_setup_output(sc);
		}
d1167 1
a1167 1
			    sc->sc_adc.left;
d1170 1
a1170 1
			    sc->sc_adc.left;
d1172 1
a1172 1
			    sc->sc_adc.right;
d1178 2
a1179 3
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_in_port;
d1183 1
a1183 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
d1187 2
d1315 9
a1323 9
		dip->un.e.num_mem = 4;
		strcpy(dip->un.e.member[0].label.name, AudioNmicrophone);
		dip->un.e.member[0].ord = CSPORT_MICROPHONE;
		strcpy(dip->un.e.member[1].label.name, AudioNline);
		dip->un.e.member[1].ord = CSPORT_LINEIN;
		strcpy(dip->un.e.member[2].label.name, AudioNcd);
		dip->un.e.member[2].ord = CSPORT_AUX1;
		strcpy(dip->un.e.member[3].label.name, AudioNdac);
		dip->un.e.member[3].ord = CSPORT_DAC;
a1445 1
	struct cs_channel *chan = &sc->sc_playback;
d1450 1
a1450 1
	if (chan->cs_locked != 0) {
d1455 3
a1457 3
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;
d1473 3
a1475 3
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;
d1477 2
a1478 2
	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
d1480 1
a1480 1
	chan->cs_cnt = n;
d1511 1
a1511 72
	struct cs4231_softc *sc = addr;
	struct cs_channel *chan = &sc->sc_capture;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	if (chan->cs_locked != 0) {
		printf("%s: trigger_input: already running\n",
		    sc->sc_dev.dv_xname);
		return (EINVAL);
	}
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_input: bad addr: %x\n",
		    sc->sc_dev.dv_xname, start);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_cint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
	chan->cs_cnt = n;

	sc->sc_regs->dma_cnva = (u_int32_t)p->addr_dva;
	sc->sc_regs->dma_cnc = n;

	csr = sc->sc_regs->dma_csr;
	if ((csr & APC_CSR_CDMA_GO) == 0 || (csr & APC_CSR_CPAUSE) != 0) {
		csr &= APC_CSR_CPAUSE;
		csr |= APC_CSR_GIE | APC_CSR_CMIE | APC_CSR_CIE | APC_CSR_EI |
		    APC_CSR_CDMA_GO;
		sc->sc_regs->dma_csr = csr;
		cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
		cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CAPTURE_ENABLE);
	}

	if (sc->sc_regs->dma_csr & APC_CSR_CD) {
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->addr_dva;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = sc->sc_regs->dma_cnva + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		sc->sc_regs->dma_cnva = nextaddr;
		sc->sc_regs->dma_cnc = togo;
	}

	return (0);
@


1.5.8.4
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d603 1
a603 1
		strlcpy(fp->name, AudioEmulaw, sizeof fp->name);
d609 1
a609 1
		strlcpy(fp->name, AudioEalaw, sizeof fp->name);
d615 1
a615 1
		strlcpy(fp->name, AudioEslinear_le, sizeof fp->name);
d621 1
a621 1
		strlcpy(fp->name, AudioEulinear, sizeof fp->name);
d627 1
a627 1
		strlcpy(fp->name, AudioEslinear_be, sizeof fp->name);
d633 1
a633 1
		strlcpy(fp->name, AudioEslinear, sizeof fp->name);
d639 1
a639 1
		strlcpy(fp->name, AudioEulinear_le, sizeof fp->name);
d645 1
a645 1
		strlcpy(fp->name, AudioEulinear_be, sizeof fp->name);
d651 1
a651 1
		strlcpy(fp->name, AudioEadpcm, sizeof fp->name);
d1269 1
a1269 2
		strlcpy(dip->label.name, AudioNmicrophone,
		    sizeof dip->label.name);
d1271 1
a1271 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1278 1
a1278 1
		strlcpy(dip->label.name, AudioNdac, sizeof dip->label.name);
d1280 1
a1280 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1287 1
a1287 1
		strlcpy(dip->label.name, AudioNline, sizeof dip->label.name);
d1289 1
a1289 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1296 1
a1296 1
		strlcpy(dip->label.name, AudioNcd, sizeof dip->label.name);
d1298 1
a1298 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1305 1
a1305 1
		strlcpy(dip->label.name, AudioNmonitor, sizeof dip->label.name);
d1307 1
a1307 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1314 1
a1314 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1316 1
a1316 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1356 1
a1356 1
		strlcpy(dip->label.name, AudioNmute, sizeof dip->label.name);
d1358 1
a1358 2
		strlcpy(dip->un.e.member[0].label.name, AudioNon,
		    sizeof dip->un.e.member[0].label.name);
d1360 1
a1360 2
		strlcpy(dip->un.e.member[1].label.name, AudioNoff,
		    sizeof dip->un.e.member[1].label.name);
d1368 1
a1368 1
		strlcpy(dip->label.name, AudioNrecord, sizeof dip->label.name);
d1370 1
a1370 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1377 1
a1377 1
		strlcpy(dip->label.name, AudioNsource, sizeof dip->label.name);
d1379 1
a1379 2
		strlcpy(dip->un.e.member[0].label.name, AudioNmicrophone,
		    sizeof dip->un.e.member[0].label.name);
d1381 1
a1381 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1383 1
a1383 2
		strlcpy(dip->un.e.member[2].label.name, AudioNcd,
		    sizeof dip->un.e.member[2].label.name);
d1385 1
a1385 2
		strlcpy(dip->un.e.member[3].label.name, AudioNdac,
		    sizeof dip->un.e.member[3].label.name);
d1392 1
a1392 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1394 1
a1394 2
		strlcpy(dip->un.e.member[0].label.name, AudioNspeaker,
		    sizeof dip->un.e.member[0].label.name);
d1396 1
a1396 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1398 1
a1398 2
		strlcpy(dip->un.e.member[2].label.name, AudioNheadphone,
		    sizeof dip->un.e.member[2].label.name);
d1406 1
a1406 1
		strlcpy(dip->label.name, AudioCinputs, sizeof dip->label.name);
d1413 1
a1413 1
		strlcpy(dip->label.name, AudioCoutputs, sizeof dip->label.name);
d1420 1
a1420 1
		strlcpy(dip->label.name, AudioCmonitor, sizeof dip->label.name);
d1427 1
a1427 1
		strlcpy(dip->label.name, AudioCrecord, sizeof dip->label.name);
@


1.4
log
@Missing splx.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.3 1999/08/06 01:29:13 jason Exp $	*/
d1281 1
a1281 1
		strcpy(dip->un.e.member[0].label.name, AudioNoff);
d1283 1
a1283 1
		strcpy(dip->un.e.member[1].label.name, AudioNon);
@


1.3
log
@reformat and simplify a little
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.2 1999/06/07 20:58:22 jason Exp $	*/
d749 1
d761 1
@


1.3.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.5 2000/09/18 16:57:34 brad Exp $	*/
a748 1
		splx(s);
a759 1
		splx(s);
d1279 1
a1279 1
		strcpy(dip->un.e.member[0].label.name, AudioNon);
d1281 1
a1281 1
		strcpy(dip->un.e.member[1].label.name, AudioNoff);
@


1.3.4.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a58 3
#include <dev/ic/apcdmareg.h>
#include <dev/ic/ad1848reg.h>
#include <dev/ic/cs4231reg.h>
a102 9
/* Sun uses these pins in pin control register as GPIO */
#define	CS_PC_LINEMUTE		XCTL0_ENABLE	/* mute line */
#define	CS_PC_HDPHMUTE		XCTL1_ENABLE	/* mute headphone */

/* cs4231 playback interrupt */
#define CS_AFS_PI		0x10		/* playback interrupt */

#define CS_TIMEOUT		90000		/* recalibration timeout */

d105 1
a105 1
int	cs4231_intr	__P((void *));
d126 1
a126 1
void *	cs4231_alloc		__P((void *, int, size_t, int, int));
d128 1
a128 1
size_t	cs4231_round_buffersize	__P((void *, int, size_t));
d228 3
a230 3
	sc->sc_ih.ih_fun = cs4231_intr;
	sc->sc_ih.ih_arg = sc;
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih);
d249 1
a249 1
cs4231_intr(v)
d260 11
a270 5
	regs->dma_csr = csr;

	if ((csr & APC_CSR_EIE) && (csr & APC_CSR_EI)) {
		printf("%s: error interrupt\n", sc->sc_dev.dv_xname);
		r = 1;
d273 2
a274 19
	if ((csr & APC_CSR_PIE) && (csr & APC_CSR_PI)) {
		/* playback interrupt */
		r = 1;
	}

	if ((csr & APC_CSR_GIE) && (csr & APC_CSR_GI)) {
		/* general interrupt */
		status = regs->status;
		if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
			regs->iar = CS_IRQ_STATUS;
			reg = regs->idr;
			if (reg & CS_AFS_PI) {
				regs->iar = SP_LOWER_BASE_COUNT;
				regs->idr = 0xff;
				regs->iar = SP_UPPER_BASE_COUNT;
				regs->idr = 0xff;
			}
			regs->status = 0;
		}
a275 1
	}
d277 1
a277 1
	if ((csr & APC_CSR_PMIE) && (csr & APC_CSR_PMI)) {
d299 1
a299 2
#if 0
	if (csr & APC_CSR_CI) {
a304 1
#endif
d317 4
a320 4
		regs->iar = SP_LEFT_OUTPUT_CONTROL;	/* left dac */
		regs->idr |= OUTPUT_MUTE;
		regs->iar = SP_RIGHT_OUTPUT_CONTROL;	/* right dac */
		regs->idr |= OUTPUT_MUTE;
d322 2
a323 2
		regs->iar = CS_MONO_IO_CONTROL;		/* mono */
		regs->idr |= MONO_OUTPUT_MUTE;
d327 4
a330 4
		regs->iar = SP_LEFT_OUTPUT_CONTROL;	/* left dac */
		regs->idr &= ~OUTPUT_MUTE;
		regs->iar = SP_RIGHT_OUTPUT_CONTROL;	/* right dac */
		regs->idr &= ~OUTPUT_MUTE;
d332 2
a333 2
		regs->iar = CS_MONO_IO_CONTROL;		/* mono */
		regs->idr &= ~MONO_OUTPUT_MUTE;
d355 15
a369 15
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{6620,	(7 << 1) | CLOCK_XTAL2},
		{8000,	(0 << 1) | CLOCK_XTAL1},
		{9600,	(7 << 1) | CLOCK_XTAL1},
		{11025,	(1 << 1) | CLOCK_XTAL2},
		{16000,	(1 << 1) | CLOCK_XTAL1},
		{18900,	(2 << 1) | CLOCK_XTAL2},
		{22050,	(3 << 1) | CLOCK_XTAL2},
		{27420,	(2 << 1) | CLOCK_XTAL1},
		{32000,	(3 << 1) | CLOCK_XTAL1},
		{33075,	(6 << 1) | CLOCK_XTAL2},
		{33075,	(4 << 1) | CLOCK_XTAL2},
		{44100,	(5 << 1) | CLOCK_XTAL2},
		{48000,	(6 << 1) | CLOCK_XTAL1},
d417 1
a417 1
	regs->iar = ~(MODE_CHANGE_ENABLE);
d419 1
a419 1
	while (regs->iar == SP_IN_INIT && tries--) {
d426 1
a426 1
	regs->iar = SP_TEST_AND_INIT;
d428 1
a428 1
	while (regs->idr == AUTO_CAL_IN_PROG && tries--) {
d457 1
a457 1
	regs->dma_csr = APC_CSR_RESET;
d461 1
a461 1
	regs->dma_csr |= APC_CSR_CODEC_RESET;
d465 2
a466 2
	regs->dma_csr &= ~(APC_CSR_CODEC_RESET);
	regs->iar |= MODE_CHANGE_ENABLE;
d470 20
a489 2
	regs->iar = MODE_CHANGE_ENABLE | SP_MISC_INFO;
	regs->idr = MODE2;
d493 1
a493 1
	regs->iar = ~(MODE_CHANGE_ENABLE);
d496 1
a496 4
	regs->iar = SP_PIN_CONTROL;
	regs->idr |= INTERRUPT_ENABLE;

	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
d498 2
a499 2
	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	regs->idr = reg & ~(AUTO_CAL_ENABLE);
d501 1
a501 1
	regs->iar = ~(MODE_CHANGE_ENABLE);
d514 1
a514 1
	regs->iar = SP_PIN_CONTROL;
d516 2
a517 2
	regs->iar = CS_MONO_IO_CONTROL;
	regs->idr |= MONO_OUTPUT_MUTE;
d522 1
a522 1
			regs->iar = SP_PIN_CONTROL;
d528 2
a529 2
			regs->iar = CS_MONO_IO_CONTROL;
			regs->idr &= ~MONO_OUTPUT_MUTE;
d534 1
a534 1
			regs->iar = SP_PIN_CONTROL;
d540 2
a541 2
	regs->iar = SP_LEFT_OUTPUT_CONTROL;
	regs->idr &= ~OUTPUT_ATTEN_BITS;
d543 3
a545 3
	    OUTPUT_ATTEN_BITS;
	regs->iar = SP_RIGHT_OUTPUT_CONTROL;
	regs->idr &= ~OUTPUT_ATTEN_BITS;
d547 1
a547 1
	    OUTPUT_ATTEN_BITS;
a554 1
	struct cs4231_regs *regs = sc->sc_regs;
a557 2
	regs->iar = SP_PIN_CONTROL;
	regs->idr &= ~INTERRUPT_ENABLE;
d665 1
a665 1
		bits = FMT_ULAW >> 5;
d668 1
a668 1
		bits = FMT_ALAW >> 5;
d671 1
a671 1
		bits = FMT_ADPCM >> 5;
d675 1
a675 1
			bits = FMT_TWOS_COMP >> 5;
d681 1
a681 1
			bits = FMT_TWOS_COMP_BE >> 5;
d687 1
a687 1
			bits = FMT_PCM8 >> 5;
d739 1
a739 1
		fs |= FMT_STEREO;
d741 1
a741 1
	regs->iar = MODE_CHANGE_ENABLE | SP_CLOCK_DATA_FORMAT;
d746 1
a746 1
	while (tries-- && regs->idr == SP_IN_INIT);
d753 1
a753 1
	regs->iar = MODE_CHANGE_ENABLE | CS_REC_FORMAT;
d758 1
a758 1
	while (tries-- && regs->idr == SP_IN_INIT);
d783 5
a787 5
	regs->dma_csr &= ~(APC_CSR_EI | APC_CSR_GIE | APC_CSR_PIE |
	    APC_CSR_EIE | APC_CSR_PDMA_GO | APC_CSR_PMIE);
	regs->iar = SP_INTERFACE_CONFIG;
	r = regs->idr & (~PLAYBACK_ENABLE);
	regs->iar = SP_INTERFACE_CONFIG;
d800 3
a802 3
	regs->dma_csr = APC_CSR_CAPTURE_PAUSE;
	regs->iar = SP_INTERFACE_CONFIG;
	regs->idr &= ~CAPTURE_ENABLE;
d831 1
a831 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d834 1
a834 1
			    AUX_INPUT_ATTEN_BITS;
d837 1
a837 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d840 2
a841 2
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX1_CONTROL;
d844 1
a844 1
			    AUX_INPUT_ATTEN_BITS;
d853 1
a853 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d856 1
a856 1
			    AUX_INPUT_ATTEN_BITS;
d859 1
a859 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d862 2
a863 2
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = CS_RIGHT_LINE_CONTROL;
d866 1
a866 1
			    AUX_INPUT_ATTEN_BITS;
d876 1
a876 1
			sc->sc_regs->iar = CS_MONO_IO_CONTROL;
d879 1
a879 1
			    MONO_INPUT_ATTEN_BITS;
d889 1
a889 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d892 1
a892 1
			    AUX_INPUT_ATTEN_BITS;
d896 1
a896 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d899 2
a900 2
			    AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX2_CONTROL;
d903 1
a903 1
			    AUX_INPUT_ATTEN_BITS;
d913 1
a913 1
			sc->sc_regs->iar = SP_DIGITAL_MIX;
d1016 1
a1016 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d1018 1
a1018 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1021 1
a1021 1
			sc->sc_regs->iar = SP_LEFT_AUX1_CONTROL;
d1023 2
a1024 2
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX1_CONTROL;
d1026 1
a1026 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1035 1
a1035 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d1037 1
a1037 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1040 1
a1040 1
			sc->sc_regs->iar = CS_LEFT_LINE_CONTROL;
d1042 2
a1043 2
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = CS_RIGHT_LINE_CONTROL;
d1045 1
a1045 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1055 1
a1055 1
			sc->sc_regs->iar = CS_MONO_IO_CONTROL;
d1057 1
a1057 1
			    sc->sc_regs->idr & MONO_INPUT_ATTEN_BITS;
d1067 1
a1067 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d1069 1
a1069 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1073 1
a1073 1
			sc->sc_regs->iar = SP_LEFT_AUX2_CONTROL;
d1075 2
a1076 2
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
			sc->sc_regs->iar = SP_RIGHT_AUX2_CONTROL;
d1078 1
a1078 1
			    sc->sc_regs->idr & AUX_INPUT_ATTEN_BITS;
d1088 1
a1088 1
			sc->sc_regs->iar = SP_DIGITAL_MIX;
d1360 1
a1360 1
cs4231_alloc(addr, direction, size, pool, flags)
d1362 1
a1362 2
	int direction;
	size_t size;
d1405 2
a1406 2
size_t
cs4231_round_buffersize(addr, direction, size)
d1408 1
a1408 2
	int direction;
	size_t size;
d1470 6
a1475 6
	if ((csr & APC_CSR_PDMA_GO) == 0 || (csr & APC_CSR_PPAUSE) != 0) {
		regs->dma_csr &= ~(APC_CSR_PIE | APC_CSR_PPAUSE);
		regs->dma_csr |= APC_CSR_EI | APC_CSR_GIE |
				 APC_CSR_PIE | APC_CSR_EIE |
				 APC_CSR_PMIE | APC_CSR_PDMA_GO;
		regs->iar = SP_LOWER_BASE_COUNT;
d1477 1
a1477 1
		regs->iar = SP_UPPER_BASE_COUNT;
d1479 3
a1481 3
		regs->iar = SP_INTERFACE_CONFIG;
		reg = regs->idr | PLAYBACK_ENABLE;
		regs->iar = SP_INTERFACE_CONFIG;
@


1.3.4.3
log
@Merge in -current from about a week ago
@
text
@d115 8
a122 8
int	cs4231_match(struct device *, void *, void *);
void	cs4231_attach(struct device *, struct device *, void *);
int	cs4231_intr(void *);

void	cs4231_wait(struct cs4231_softc *);
int	cs4231_set_speed(struct cs4231_softc *, u_long *);
void	cs4231_mute_monitor(struct cs4231_softc *, int);
void	cs4231_setup_output(struct cs4231_softc *sc);
d125 21
a145 21
int	cs4231_open(void *, int);
void	cs4231_close(void *);
int	cs4231_query_encoding(void *, struct audio_encoding *);
int	cs4231_set_params(void *, int, int, struct audio_params *,
    struct audio_params *);
int	cs4231_round_blocksize(void *, int);
int	cs4231_commit_settings(void *);
int	cs4231_halt_output(void *);
int	cs4231_halt_input(void *);
int	cs4231_getdev(void *, struct audio_device *);
int	cs4231_set_port(void *, mixer_ctrl_t *);
int	cs4231_get_port(void *, mixer_ctrl_t *);
int	cs4231_query_devinfo(void *addr, mixer_devinfo_t *);
void *	cs4231_alloc(void *, int, size_t, int, int);
void	cs4231_free(void *, void *, int);
size_t	cs4231_round_buffersize(void *, int, size_t);
int	cs4231_get_props(void *);
int	cs4231_trigger_output(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
int	cs4231_trigger_input(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
d651 2
a652 2
	void (*pswcode)(void *, u_char *, int cnt);
	void (*rswcode)(void *, u_char *, int cnt);
d1440 1
a1440 1
	void (*intr)(void *);
d1507 1
a1507 1
	void (*intr)(void *);
@


1.3.4.4
log
@Sync the SMP branch with 3.3
@
text
@a93 1
#define	CSPORT_MICROPHONE	9
d111 1
a111 7
#define	CS_AFS_TI		0x40		/* timer interrupt */
#define	CS_AFS_CI		0x20		/* capture interrupt */
#define	CS_AFS_PI		0x10		/* playback interrupt */
#define	CS_AFS_CU		0x08		/* capture underrun */
#define	CS_AFS_CO		0x04		/* capture overrun */
#define	CS_AFS_PO		0x02		/* playback overrun */
#define	CS_AFS_PU		0x01		/* playback underrun */
d119 1
d121 1
a145 2
void cs4231_write(struct cs4231_softc *, u_int8_t, u_int8_t);
u_int8_t cs4231_read(struct cs4231_softc *, u_int8_t);
d242 1
a242 1
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih, IPL_AUHARD);
d244 1
a244 1
	printf(" pri %d, softpri %d\n", pri, IPL_AUSOFT);
a251 1
	sc->sc_in_port = CSPORT_MICROPHONE;
a252 1
	sc->sc_mute[CSPORT_MONITOR] = 1;
a256 18
void
cs4231_write(sc, r, v)
	struct cs4231_softc *sc;
	u_int8_t r, v;
{
	sc->sc_regs->iar = r;
	sc->sc_regs->idr = v;
}

u_int8_t
cs4231_read(sc, r)
	struct cs4231_softc *sc;
	u_int8_t r;
{
	sc->sc_regs->iar = r;
	return (sc->sc_regs->idr);
}

a265 2
	struct cs_channel *chan;
	struct cs_dma *p;
d268 1
d291 4
a294 6
				cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
				cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
			}
			if (reg & CS_AFS_CI) {
				cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
				cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
d304 2
a305 4
		chan = &sc->sc_playback;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
d308 1
a308 1
			chan->cs_cnt = togo = chan->cs_blksz;
d310 4
a313 4
			nextaddr = regs->dma_pnva + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
d318 4
d323 6
a328 3
		if (chan->cs_intr != NULL)
			(*chan->cs_intr)(chan->cs_arg);
		r = 1;
d330 1
d332 2
a333 16
	if ((csr & APC_CSR_CIE) && (csr & APC_CSR_CI)) {
		if (csr & APC_CSR_CD) {
			u_int32_t nextaddr, togo;

			chan = &sc->sc_capture;
			p = chan->cs_curdma;
			togo = chan->cs_segsz - chan->cs_cnt;
			if (togo == 0) {
				nextaddr = (u_int32_t)p->addr_dva;
				chan->cs_cnt = togo = chan->cs_blksz;
			} else {
				nextaddr = regs->dma_cnva + chan->cs_blksz;
				if (togo > chan->cs_blksz)
					togo = chan->cs_blksz;
				chan->cs_cnt += togo;
			}
d335 6
a340 2
			regs->dma_cnva = nextaddr;
			regs->dma_cnc = togo;
d342 9
a350 4
			if (chan->cs_intr != NULL)
				(*chan->cs_intr)(chan->cs_arg);
		}
		r = 1;
d352 9
a360 4

	if ((csr & APC_CSR_CMIE) && (csr & APC_CSR_CMI)) {
		/* capture empty */
		r = 1;
a361 2

	return (r);
d422 2
a423 1
	if (selected == -1)
d425 1
d434 28
d472 1
a472 1
	int tries;
d477 5
a481 8

	sc->sc_capture.cs_intr = NULL;
	sc->sc_capture.cs_arg = NULL;
	sc->sc_capture.cs_locked = 0;

	sc->sc_playback.cs_intr = NULL;
	sc->sc_playback.cs_arg = NULL;
	sc->sc_playback.cs_locked = 0;
d492 6
d499 1
a499 8
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for reset\n", sc->sc_dev.dv_xname);

	/* Turn on cs4231 mode */
	cs4231_write(sc, SP_MISC_INFO,
	    cs4231_read(sc, SP_MISC_INFO) | MODE2);
d501 10
a510 1
	cs4231_setup_output(sc);
d512 2
a513 2
	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) | INTERRUPT_ENABLE);
d515 1
d523 1
a523 1
	u_int8_t pc, mi, rm, lm;
d525 4
a528 18
	pc = cs4231_read(sc, SP_PIN_CONTROL) | CS_PC_HDPHMUTE | CS_PC_LINEMUTE;

	mi = cs4231_read(sc, CS_MONO_IO_CONTROL) | MONO_OUTPUT_MUTE;

	lm = cs4231_read(sc, SP_LEFT_OUTPUT_CONTROL);
	lm &= ~OUTPUT_ATTEN_BITS;
	lm |= ((~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	rm = cs4231_read(sc, SP_RIGHT_OUTPUT_CONTROL);
	rm &= ~OUTPUT_ATTEN_BITS;
	rm |= ((~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	if (sc->sc_mute[CSPORT_MONITOR]) {
		lm &= ~OUTPUT_MUTE;
		rm &= ~OUTPUT_MUTE;
	}
d532 4
a535 2
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_HDPHMUTE;
d538 4
a541 2
		if (sc->sc_mute[CSPORT_SPEAKER])
			mi &= ~MONO_OUTPUT_MUTE;
d544 4
a547 2
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_LINEMUTE;
d551 8
a558 29
	cs4231_write(sc, SP_LEFT_OUTPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_OUTPUT_CONTROL, rm);
	cs4231_write(sc, SP_PIN_CONTROL, pc);
	cs4231_write(sc, CS_MONO_IO_CONTROL, mi);

	/* XXX doesn't really belong here... */
	switch (sc->sc_in_port) {
	case CSPORT_LINEIN:
		pc = LINE_INPUT;
		break;
	case CSPORT_AUX1:
		pc = AUX_INPUT;
		break;
	case CSPORT_DAC:
		pc = MIXED_DAC_INPUT;
		break;
	case CSPORT_MICROPHONE:
	default:
		pc = MIC_INPUT;
		break;
	}
	lm = cs4231_read(sc, SP_LEFT_INPUT_CONTROL);
	rm = cs4231_read(sc, SP_RIGHT_INPUT_CONTROL);
	lm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	rm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	lm |= pc | (sc->sc_adc.left >> 4);
	rm |= pc | (sc->sc_adc.right >> 4);
	cs4231_write(sc, SP_LEFT_INPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_INPUT_CONTROL, rm);
d650 26
a675 3
	int err, bits, enc = p->encoding;
	void (*pswcode)(void *, u_char *, int cnt) = NULL;
	void (*rswcode)(void *, u_char *, int cnt) = NULL;
a678 2
		if (p->precision != 8)
			return (EINVAL);
a681 2
		if (p->precision != 8)
			return (EINVAL);
d684 3
d688 1
a688 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a692 5
	case AUDIO_ENCODING_ULINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		break;
d694 1
a694 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a698 6
	case AUDIO_ENCODING_SLINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		pswcode = rswcode = change_sign8;
		break;
d702 1
a702 17
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP >> 5;
			pswcode = rswcode = change_sign16_le;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP_BE >> 5;
			pswcode = rswcode = change_sign16_be;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ADPCM:
		if (p->precision != 8)
a703 1
		bits = FMT_ADPCM >> 5;
d741 2
a742 1
	u_int8_t r, fs;
d747 4
a754 7
	s = splaudio();

	r = cs4231_read(sc, SP_INTERFACE_CONFIG) | AUTO_CAL_ENABLE;
	regs->iar = MODE_CHANGE_ENABLE;
	regs->iar = MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG;
	regs->idr = r;

d757 5
a761 6
	r = regs->idr;
	r = regs->idr;
	tries = CS_TIMEOUT;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
d763 3
d769 5
a773 5
	r = regs->idr;
	r = regs->idr;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
d775 3
d779 1
a779 5
	regs->iar = 0;
	for (tries = CS_TIMEOUT; tries && regs->iar == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for !mce\n", sc->sc_dev.dv_xname);
d781 1
a781 6
	regs->iar = SP_TEST_AND_INIT;
	for (tries = CS_TIMEOUT; tries && regs->idr & AUTO_CAL_IN_PROG; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for autocalibration\n",
		    sc->sc_dev.dv_xname);
a796 1
	/* XXX Kills some capture bits */
d803 1
a803 1
	sc->sc_playback.cs_locked = 0;
a813 1
	/* XXX Kills some playback bits */
d817 1
a817 1
	sc->sc_capture.cs_locked = 0;
a956 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
a1004 14
		if (cp->un.value.num_channels == 1) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		} else if (cp->un.value.num_channels == 2) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		} else
			break;
		cs4231_setup_output(sc);
		error = 0;
a1008 8
		if (cp->un.ord == CSPORT_MICROPHONE ||
		    cp->un.ord == CSPORT_LINEIN ||
		    cp->un.ord == CSPORT_AUX1 ||
		    cp->un.ord == CSPORT_DAC) {
			sc->sc_in_port = cp->un.ord;
			error = 0;
			cs4231_setup_output(sc);
		}
d1167 1
a1167 1
			    sc->sc_adc.left;
d1170 1
a1170 1
			    sc->sc_adc.left;
d1172 1
a1172 1
			    sc->sc_adc.right;
d1178 2
a1179 3
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_in_port;
d1183 1
a1183 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
d1187 2
d1315 9
a1323 9
		dip->un.e.num_mem = 4;
		strcpy(dip->un.e.member[0].label.name, AudioNmicrophone);
		dip->un.e.member[0].ord = CSPORT_MICROPHONE;
		strcpy(dip->un.e.member[1].label.name, AudioNline);
		dip->un.e.member[1].ord = CSPORT_LINEIN;
		strcpy(dip->un.e.member[2].label.name, AudioNcd);
		dip->un.e.member[2].ord = CSPORT_AUX1;
		strcpy(dip->un.e.member[3].label.name, AudioNdac);
		dip->un.e.member[3].ord = CSPORT_DAC;
a1445 1
	struct cs_channel *chan = &sc->sc_playback;
d1450 1
a1450 1
	if (chan->cs_locked != 0) {
d1455 3
a1457 3
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;
d1473 3
a1475 3
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;
d1477 2
a1478 2
	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
d1480 1
a1480 1
	chan->cs_cnt = n;
d1511 1
a1511 72
	struct cs4231_softc *sc = addr;
	struct cs_channel *chan = &sc->sc_capture;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	if (chan->cs_locked != 0) {
		printf("%s: trigger_input: already running\n",
		    sc->sc_dev.dv_xname);
		return (EINVAL);
	}
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_input: bad addr: %x\n",
		    sc->sc_dev.dv_xname, start);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_cint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
	chan->cs_cnt = n;

	sc->sc_regs->dma_cnva = (u_int32_t)p->addr_dva;
	sc->sc_regs->dma_cnc = n;

	csr = sc->sc_regs->dma_csr;
	if ((csr & APC_CSR_CDMA_GO) == 0 || (csr & APC_CSR_CPAUSE) != 0) {
		csr &= APC_CSR_CPAUSE;
		csr |= APC_CSR_GIE | APC_CSR_CMIE | APC_CSR_CIE | APC_CSR_EI |
		    APC_CSR_CDMA_GO;
		sc->sc_regs->dma_csr = csr;
		cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
		cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CAPTURE_ENABLE);
	}

	if (sc->sc_regs->dma_csr & APC_CSR_CD) {
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->addr_dva;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = sc->sc_regs->dma_cnva + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		sc->sc_regs->dma_cnva = nextaddr;
		sc->sc_regs->dma_cnc = togo;
	}

	return (0);
@


1.3.4.5
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.3.4.4 2003/03/27 23:49:25 niklas Exp $	*/
d603 1
a603 1
		strlcpy(fp->name, AudioEmulaw, sizeof fp->name);
d609 1
a609 1
		strlcpy(fp->name, AudioEalaw, sizeof fp->name);
d615 1
a615 1
		strlcpy(fp->name, AudioEslinear_le, sizeof fp->name);
d621 1
a621 1
		strlcpy(fp->name, AudioEulinear, sizeof fp->name);
d627 1
a627 1
		strlcpy(fp->name, AudioEslinear_be, sizeof fp->name);
d633 1
a633 1
		strlcpy(fp->name, AudioEslinear, sizeof fp->name);
d639 1
a639 1
		strlcpy(fp->name, AudioEulinear_le, sizeof fp->name);
d645 1
a645 1
		strlcpy(fp->name, AudioEulinear_be, sizeof fp->name);
d651 1
a651 1
		strlcpy(fp->name, AudioEadpcm, sizeof fp->name);
d1269 1
a1269 2
		strlcpy(dip->label.name, AudioNmicrophone,
		    sizeof dip->label.name);
d1271 1
a1271 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1278 1
a1278 1
		strlcpy(dip->label.name, AudioNdac, sizeof dip->label.name);
d1280 1
a1280 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1287 1
a1287 1
		strlcpy(dip->label.name, AudioNline, sizeof dip->label.name);
d1289 1
a1289 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1296 1
a1296 1
		strlcpy(dip->label.name, AudioNcd, sizeof dip->label.name);
d1298 1
a1298 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1305 1
a1305 1
		strlcpy(dip->label.name, AudioNmonitor, sizeof dip->label.name);
d1307 1
a1307 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1314 1
a1314 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1316 1
a1316 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1356 1
a1356 1
		strlcpy(dip->label.name, AudioNmute, sizeof dip->label.name);
d1358 1
a1358 2
		strlcpy(dip->un.e.member[0].label.name, AudioNon,
		    sizeof dip->un.e.member[0].label.name);
d1360 1
a1360 2
		strlcpy(dip->un.e.member[1].label.name, AudioNoff,
		    sizeof dip->un.e.member[1].label.name);
d1368 1
a1368 1
		strlcpy(dip->label.name, AudioNrecord, sizeof dip->label.name);
d1370 1
a1370 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1377 1
a1377 1
		strlcpy(dip->label.name, AudioNsource, sizeof dip->label.name);
d1379 1
a1379 2
		strlcpy(dip->un.e.member[0].label.name, AudioNmicrophone,
		    sizeof dip->un.e.member[0].label.name);
d1381 1
a1381 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1383 1
a1383 2
		strlcpy(dip->un.e.member[2].label.name, AudioNcd,
		    sizeof dip->un.e.member[2].label.name);
d1385 1
a1385 2
		strlcpy(dip->un.e.member[3].label.name, AudioNdac,
		    sizeof dip->un.e.member[3].label.name);
d1392 1
a1392 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1394 1
a1394 2
		strlcpy(dip->un.e.member[0].label.name, AudioNspeaker,
		    sizeof dip->un.e.member[0].label.name);
d1396 1
a1396 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1398 1
a1398 2
		strlcpy(dip->un.e.member[2].label.name, AudioNheadphone,
		    sizeof dip->un.e.member[2].label.name);
d1406 1
a1406 1
		strlcpy(dip->label.name, AudioCinputs, sizeof dip->label.name);
d1413 1
a1413 1
		strlcpy(dip->label.name, AudioCoutputs, sizeof dip->label.name);
d1420 1
a1420 1
		strlcpy(dip->label.name, AudioCmonitor, sizeof dip->label.name);
d1427 1
a1427 1
		strlcpy(dip->label.name, AudioCrecord, sizeof dip->label.name);
@


1.3.4.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.3.4.5 2003/05/13 19:41:08 ho Exp $	*/
d15 5
@


1.3.4.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d1539 1
a1539 1
		printf("cs4231_trigger_output: bad addr: %p\n", start);
d1605 1
a1605 1
		printf("%s: trigger_input: bad addr: %p\n",
@


1.2
log
@Better support for changing volume levels, muting, and switching output
ports on the fly.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.1 1999/06/06 04:48:24 jason Exp $	*/
d64 1
a64 1
#define	CSAUDIO_MONO_LVL	2
d71 1
a71 1
#define	CSAUDIO_MONO_MUTE	9
d869 1
a869 1
	case CSAUDIO_MONO_LVL:
d967 1
a967 1
	case CSAUDIO_MONO_MUTE:
d1048 1
a1048 1
	case CSAUDIO_MONO_LVL:
d1128 1
a1128 1
	case CSAUDIO_MONO_MUTE:
d1185 1
a1185 2
#if 0
	case CSAUDIO_MIC_IN_LVL:	/* microphone */
d1189 1
a1189 12
		dip->next = CSAUDIO_MIC_IN_MUTE;
		strcpy(dip->label.name, AudioNmicrophone);
		dip->un.v.num_channels = 2;
		strcpy(dip->un.v.units.name, AudioNvolume);
		break;
#endif

	case CSAUDIO_MONO_LVL:		/* mono/microphone mixer */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_MONO_MUTE;
a1193 1

a1202 1

a1211 1

a1220 1

a1229 1

a1238 1

a1244 1

a1250 1

d1257 1
a1257 2

	case CSAUDIO_MONO_MUTE:
d1260 1
a1260 1
		dip->prev = CSAUDIO_MONO_LVL;
a1262 1

a1268 1

a1283 1

a1292 1

a1308 1

a1321 1

a1328 1

a1335 1

a1342 1

a1349 1

@


1.1
log
@First cut at SUNW,CS4231 audio driver (ss4/ss5).  This driver is output-only
at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d110 1
d238 1
d240 1
d504 10
d521 1
a521 1
		if (sc->mute[CSPORT_SPEAKER] == 0) {
d527 1
a527 1
		if (sc->mute[CSPORT_SPEAKER] == 0) {
d533 1
a533 1
		if (sc->mute[CSPORT_SPEAKER] == 0) {
a547 2

	return (0);
a918 1

d937 1
a937 10
		sc->sc_regs->iar = CS_IAR_LDACOUT;
		sc->sc_regs->idr &= ~CS_LDACOUT_LDA_MASK;
		sc->sc_regs->idr |=
		    (~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
		    CS_LDACOUT_LDA_MASK;
		sc->sc_regs->iar = CS_IAR_RDACOUT;
		sc->sc_regs->idr &= ~CS_RDACOUT_RDA_MASK;
		sc->sc_regs->idr |=
		    (~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
		    CS_RDACOUT_RDA_MASK;
a939 1

d946 1
d952 1
a952 1
		sc->mute[CSPORT_LINEIN] = cp->un.ord ? 1 : 0;
d958 1
a958 1
		sc->mute[CSPORT_AUX1] = cp->un.ord ? 1 : 0;
d964 1
a964 1
		sc->mute[CSPORT_AUX2] = cp->un.ord ? 1 : 0;
d970 1
a970 1
		sc->mute[CSPORT_MONO] = cp->un.ord ? 1 : 0;
d976 1
a976 1
		sc->mute[CSPORT_MONITOR] = cp->un.ord ? 1 : 0;
d982 2
a983 1
		sc->mute[CSPORT_SPEAKER] = cp->un.ord ? 1 : 0;
a989 1

d1113 1
a1113 1
		cp->un.ord = sc->mute[CSPORT_LINEIN] ? 1 : 0;
d1119 1
a1119 1
		cp->un.ord = sc->mute[CSPORT_AUX1] ? 1 : 0;
d1125 1
a1125 1
		cp->un.ord = sc->mute[CSPORT_AUX2] ? 1 : 0;
d1131 1
a1131 1
		cp->un.ord = sc->mute[CSPORT_MONO] ? 1 : 0;
d1137 1
a1137 1
		cp->un.ord = sc->mute[CSPORT_MONITOR] ? 1 : 0;
d1143 1
a1143 1
		cp->un.ord = sc->mute[CSPORT_SPEAKER] ? 1 : 0;
d1305 1
a1305 1
		dip->un.e.member[0].ord = 1;
@

