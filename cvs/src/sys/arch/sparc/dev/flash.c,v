head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.36
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.14
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.02.10.23.50.29;	author miod;	state Exp;
branches;
next	1.6;
commitid	U2NO1fTp8R3m0A1u;

1.6
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.5;
commitid	C5iGb36LQxjM60Q3;

1.5
date	2006.03.15.20.03.06;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.04.12.38.58;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.18.40.59;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.07.23.19.11.26;	author jason;	state Exp;
branches
	1.1.4.1
	1.1.14.1;
next	;

1.1.4.1
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.06.07.11.14.43;	author ho;	state Exp;
branches;
next	;

1.1.14.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Convert to uiomove()
@
text
@/*	$OpenBSD: flash.c,v 1.5 2006/03/15 20:03:06 miod Exp $	*/

/*
 * Copyright (c) 1999 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for the flash memory found on FORCE CPU-5V boards.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/autoconf.h>
#include <sparc/cpu.h>
#include <sparc/sparc/cpuvar.h>

int	flashmatch(struct device *, void *, void *);
void	flashattach(struct device *, struct device *, void *);

int	flashopen(dev_t, int, int, struct proc *p);
int	flashclose(dev_t, int, int, struct proc *p);
int	flashread(dev_t, struct uio *, int);
int	flashwrite(dev_t, struct uio *, int);
int	flashrw(dev_t, struct uio *, int);
int	flashioctl(dev_t, u_long, caddr_t, int, struct proc *);

/*
 * We see the flash-memory in 512k windows.  The current window is
 * changed in the sysconfig registers (FMPCR1), see scf.c.
 */
#define	FLASH_REGS_SIZE		0x80000

struct flash_regs {
	u_int8_t		regs[0x80000];
};

struct flash_softc {
	struct device		sc_dv;
	struct flash_regs	*sc_regs;
	int			sc_node;
	int			sc_open;
};

struct cfattach flash_ca = {
	sizeof (struct flash_softc), flashmatch, flashattach
};

struct cfdriver flash_cd = {
	NULL, "flash", DV_DULL
};

int
flashmatch(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct confargs *ca = aux;
	register struct romaux *ra = &ca->ca_ra;

	if (strcmp("flash-memory", ra->ra_name))
		return (0);
	return (1);
}

void    
flashattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	struct flash_softc *sc = (struct flash_softc *)self;

	/* map registers */
	if (ca->ca_ra.ra_nreg != 1) {
		printf(": expected 1 register, got %d\n", ca->ca_ra.ra_nreg);
		return;
	}
	sc->sc_regs = mapiodev(&(ca->ca_ra.ra_reg[0]), 0,
			ca->ca_ra.ra_reg[0].rr_len);

	sc->sc_node = ca->ca_ra.ra_node;

	printf(": window 0x%x\n", ca->ca_ra.ra_reg[0].rr_len);
}

int
flashopen(dev, flags, mode, p)
	dev_t dev;
	int flags;
	int mode;
	struct proc *p;
{
	struct flash_softc *sc;
	int card = 0;

	if (card >= flash_cd.cd_ndevs)
		return (ENXIO);
	sc = flash_cd.cd_devs[card];
	if (sc == NULL)
		return (ENXIO);
	if (sc->sc_open)
		return (EBUSY);
	sc->sc_open = 1;
	return (0);
}

int
flashclose(dev, flags, mode, p)
	dev_t dev;
	int flags;
	int mode;
	struct proc *p;
{
	struct flash_softc *sc = flash_cd.cd_devs[0];
	sc->sc_open = 0;
	return (0);
}

int
flashwrite(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	return (flashrw(dev, uio, flags));
}

int
flashread(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	return (flashrw(dev, uio, flags));
}

int
flashrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	struct flash_softc *sc = flash_cd.cd_devs[0];
	size_t cnt;
	off_t off;

	off = uio->uio_offset;
	if (off < 0 || off >= FLASH_REGS_SIZE)
		return (EFAULT);

	cnt = uio->uio_resid;
	if (cnt > (FLASH_REGS_SIZE - off))
		cnt = FLASH_REGS_SIZE - off;

	return (uiomove(&sc->sc_regs->regs[0] + off, cnt, uio));
}

int
flashioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EINVAL);
}
@


1.6
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d173 2
a174 2
	u_int cnt;
	int off;
d177 1
a177 1
	if (off >= FLASH_REGS_SIZE)
d184 1
a184 1
	return (uiomovei(&sc->sc_regs->regs[0] + off, cnt, uio));
@


1.5
log
@Entries in cd_devs[] may be NULL, so be sure to check for them in your
device open() function.
@
text
@d1 1
a1 1
/*	$OpenBSD: flash.c,v 1.4 2006/03/04 12:38:58 miod Exp $	*/
d184 1
a184 1
	return (uiomove(&sc->sc_regs->regs[0] + off, cnt, uio));
@


1.4
log
@These devices are DV_DULL, not DV_IFNET... not that it really matters.
@
text
@d1 1
a1 1
/*	$OpenBSD: flash.c,v 1.3 2003/06/02 18:40:59 jason Exp $	*/
d128 2
@


1.3
log
@nuke my clause 3 & 4 (and a couple jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: flash.c,v 1.2 2002/03/14 01:26:43 millert Exp $	*/
d78 1
a78 1
	NULL, "flash", DV_IFNET
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: flash.c,v 1.1 1999/07/23 19:11:26 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1
log
@Drivers for the FORCE CPU-5V:
o fga5000 vme-sbus bridge
o system config registers
o flash memory
and daadio VME board driver
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 2
a52 2
int	flashmatch	__P((struct device *, void *, void *));
void	flashattach	__P((struct device *, struct device *, void *));
d54 6
a59 6
int	flashopen	__P((dev_t, int, int, struct proc *p));
int	flashclose	__P((dev_t, int, int, struct proc *p));
int	flashread	__P((dev_t, struct uio *, int));
int	flashwrite	__P((dev_t, struct uio *, int));
int	flashrw		__P((dev_t, struct uio *, int));
int	flashioctl	__P((dev_t, u_long, caddr_t, int, struct proc *));
@


1.1.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: flash.c,v 1.1 1999/07/23 19:11:26 jason Exp $	*/
d51 2
a52 2
int	flashmatch(struct device *, void *, void *);
void	flashattach(struct device *, struct device *, void *);
d54 6
a59 6
int	flashopen(dev_t, int, int, struct proc *p);
int	flashclose(dev_t, int, int, struct proc *p);
int	flashread(dev_t, struct uio *, int);
int	flashwrite(dev_t, struct uio *, int);
int	flashrw(dev_t, struct uio *, int);
int	flashioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.1.4.1
log
@Merge in -current from about a week ago
@
text
@d51 2
a52 2
int	flashmatch(struct device *, void *, void *);
void	flashattach(struct device *, struct device *, void *);
d54 6
a59 6
int	flashopen(dev_t, int, int, struct proc *p);
int	flashclose(dev_t, int, int, struct proc *p);
int	flashread(dev_t, struct uio *, int);
int	flashwrite(dev_t, struct uio *, int);
int	flashrw(dev_t, struct uio *, int);
int	flashioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.1.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: flash.c,v 1.1.4.1 2002/03/28 10:57:10 niklas Exp $	*/
d15 5
@


