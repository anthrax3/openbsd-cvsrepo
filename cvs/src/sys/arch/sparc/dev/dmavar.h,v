head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.34
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.30
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.28
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.26
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.28
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.26
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.24
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.22
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.20
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.14.11.18.49;	author stsp;	state Exp;
branches;
next	1.8;
commitid	AyPOP6b7LKyRd0yH;

1.8
date	2014.07.28.18.31.39;	author miod;	state Exp;
branches;
next	1.7;
commitid	KwJ20CkzgJkW6nEl;

1.7
date	2006.06.02.20.00.54;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.02.16.42.37;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.05.12.27.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.08.24.59;	author downsj;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	96.08.11.05.34.14;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.17.20.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.39;	author deraadt;	state Exp;
branches;
next	;

1.4.12.1
date	2003.06.07.11.14.42;	author ho;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix more ifmedia64 fallout in the kernel. It's hiding everywhere...
@
text
@/*	$OpenBSD: dmavar.h,v 1.8 2014/07/28 18:31:39 miod Exp $	*/
/*	$NetBSD: dmavar.h,v 1.11 1996/11/27 21:49:53 pk Exp $ */

/*
 * Copyright (c) 1994 Peter Galbavy.  All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

struct dma_softc {
	struct device sc_dev;			/* us as a device */
	struct esp_softc *sc_esp;		/* my scsi */
	struct le_softc *sc_le;			/* my Ethernet */
	struct dma_regs *sc_regs;		/* the registers */
	int	sc_active;			/* DMA active ? */
	u_int	sc_rev;				/* revision */
	int	sc_burst;			/* DVMA burst size in effect */
	caddr_t	sc_dvmakaddr;			/* DVMA cookies */
	caddr_t	sc_dvmaaddr;			/*		*/
	size_t	sc_dmasize;
	caddr_t	*sc_dmaaddr;
	size_t  *sc_dmalen;
	void (*reset)(struct dma_softc *);	/* reset routine */
	void (*enintr)(struct dma_softc *);	/* enable interrupts */
	int (*isintr)(struct dma_softc *);	/* interrupt ? */
	int (*intr)(struct dma_softc *);	/* interrupt ! */
	int (*setup)(struct dma_softc *, caddr_t *, size_t *, int, size_t *);
	void (*go)(struct dma_softc *);
	u_int	sc_dmactl;
	uint64_t	sc_defaultmedia;	/* default Ethernet media */
};

#define DMACSR(sc)	(sc->sc_regs->csr)
#define DMADDR(sc)	(sc->sc_regs->addr)
#define DMACNT(sc)	(sc->sc_regs->bcnt)

/* DMA engine functions */
#define DMA_ENINTR(r)		(((r)->enintr)(r))
#define DMA_ISINTR(r)		(((r)->isintr)(r))
#define DMA_RESET(r)		(((r)->reset)(r))
#define DMA_INTR(r)		(((r)->intr)(r))
#define DMA_ISACTIVE(r)		((r)->sc_active)
#define DMA_SETUP(a, b, c, d, e)	(((a)->setup)(a, b, c, d, e))
#define DMA_GO(r)		(((r)->go)(r))

void	dma_setuphandlers(struct dma_softc *);
@


1.8
log
@On SPARCbook systems, the ledma device node has a `cable-selection' property
specifying which media the on-board interface uses. We already query it to
set up proper register values; extend this to be able to pass a default
media to the le(4) child.

This makes SPARCbook system default to AUI without needing for a manual media
change.

tested by sebastia@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dmavar.h,v 1.7 2006/06/02 20:00:54 miod Exp $	*/
d47 1
a47 1
	int	sc_defaultmedia;		/* default Ethernet media */
@


1.7
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: dmavar.h,v 1.6 2005/03/02 16:42:37 miod Exp $	*/
d30 1
a30 1
	struct le_softc *sc_le;			/* my ethernet */
d47 1
@


1.6
log
@Support for SUNW,fas SCSI, currently restricted to the lower 8 targets due
to MI esp code limitations.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dmavar.h,v 1.5 2003/06/05 12:27:02 deraadt Exp $	*/
a28 1
	struct sbusdev sc_sd;			/* sbus device */
@


1.5
log
@3/4 knockout for peter galbavy
@
text
@d1 1
a1 1
/*	$OpenBSD: dmavar.h,v 1.4 1997/08/08 08:24:59 downsj Exp $	*/
a34 1
	int	sc_node;			/* PROM node ID */
d47 1
d62 2
@


1.4
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Peter Galbavy.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4.12.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dmavar.h,v 1.4 1997/08/08 08:24:59 downsj Exp $	*/
d14 5
@


1.3
log
@netbsd port, now we merge our changes back in
@
text
@d1 2
a2 1
/*	$NetBSD: dmavar.h,v 1.8 1996/04/22 02:35:00 abrown Exp $ */
d39 1
a39 1
	int	sc_rev;				/* revision */
d57 1
a57 26

/*
 * We are not allowed to touch the DMA "flush" and "drain" bits
 * while it is still thinking about a request (DMA_RP).
 */

/*
 * TIME WAIT (to debug hanging machine problem)
 */

#define TIME_WAIT(COND, MSG, SC) { int count = 500000; \
				while (--count > 0 && (COND)) DELAY(1); \
				if (count == 0) { \
					printf("CSR = %lx\n",\
					    SC->sc_regs->csr);\
					panic(MSG); } \
			     }

#define DMAWAIT(sc)  TIME_WAIT((sc->sc_regs->csr & D_R_PEND), "DMAWAIT", sc)
#define DMAWAIT1(sc) TIME_WAIT((sc->sc_regs->csr & D_DRAINING), "DMAWAIT1", sc)
#define DMAREADY(sc) TIME_WAIT((!(sc->sc_regs->csr & D_DMA_ON)), "DMAREADY", sc)

#define DMA_DRAIN(sc)	if (sc->sc_rev < DMAREV_2) { \
				DMACSR(sc) |= D_DRAIN; \
				DMAWAIT1(sc); \
			}
@


1.2
log
@new driver by me
@
text
@d1 1
a1 1
/*	$NetBSD: dmavar.h,v 1.4 1994/11/27 00:08:34 deraadt Exp $ */
d4 1
a4 4
 * Copyright (c) 1994 Peter Galbavy
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
d15 1
a15 2
 *	This product includes software developed by Peter Galbavy and
 *	Theo de Raadt.
d32 5
a36 4
	struct	device sc_dev;			/* us as a device */
	struct	sbusdev sc_sd;			/* sbus device */
	struct	esp_softc *sc_esp;		/* my scsi */
	struct	dma_regs *sc_regs;		/* the registers */
d40 5
a44 3

	size_t	sc_segsize;			/* current operation */
	void	**sc_dmaaddr;
d46 6
a51 2
	char	sc_dmapolling;			/* ... is polled */
	char	sc_dmadev2mem;			/* transfer direction */
a53 9
void	dmareset	__P((struct dma_softc *sc));
void	dmastart	__P((struct dma_softc *sc, void *addr,
			    size_t *len, int datain, int poll));
int	dmaintr		__P((struct dma_softc *sc, int restart));
int	dmapending	__P((struct dma_softc *sc));
void	dmadrain	__P((struct dma_softc *sc));
void	dmaenintr	__P((struct dma_softc *sc));
int	dmadisintr	__P((struct dma_softc *sc));

a55 1
#define DMABCNT(sc)	(sc->sc_regs->bcnt)
d57 34
a90 18
#define TIME_WAIT(cond, msg, sc) { \
	int count = 500000; \
	while (--count > 0 && (cond)) \
		DELAY(1); \
	if (count == 0) { \
		printf("CSR = %x\n", (sc)->sc_regs->csr); \
		panic(msg); \
	} \
}

#define DMAWAIT_PEND(sc) \
	TIME_WAIT((DMACSR(sc) & D_R_PEND), \
	    "DMAWAIT_PEND", sc)

/* keep punching the chip until it's flushed */
#define DMAWAIT_DRAIN(sc) \
	TIME_WAIT((DMACSR(sc) |= D_DRAIN, DMACSR(sc) & D_DRAINING), \
	    "DMAWAIT_DRAIN", sc)
@


1.1
log
@Initial revision
@
text
@d4 4
a7 1
 * Copyright (c) 1994 Peter Galbavy.  All rights reserved.
d18 2
a19 1
 *	This product includes software developed by Peter Galbavy.
d36 4
a39 4
	struct device sc_dev;			/* us as a device */
	struct sbusdev sc_sd;			/* sbus device */
	struct esp_softc *sc_esp;		/* my scsi */
	struct dma_regs *sc_regs;		/* the registers */
d43 3
a45 2
	size_t	sc_dmasize;
	caddr_t	*sc_dmaaddr;
d47 2
a48 5
	void (*reset)(struct dma_softc *);	/* reset routine */
	void (*enintr)(struct dma_softc *);	/* enable interrupts */
	void (*start)(struct dma_softc *, caddr_t *, size_t *, int);
	int (*isintr)(struct dma_softc *);	/* intrerrupt ? */
	int (*intr)(struct dma_softc *);	/* intrerrupt ! */
d51 8
a58 19
/*
 * We are not allowed to touch the DMA "flush" and "drain" bits
 * while it is still thinking about a request (DMA_RP).
 */

/*
 * TIME WAIT (to debug hanging machine problem)
 */

#define TIME_WAIT(COND, MSG, SC) { int count = 500000; \
				while (--count > 0 && (COND)) DELAY(1); \
				if (count == 0) { \
					printf("CSR = %x\n", SC->sc_regs->csr);\
					panic(MSG); } \
			     }

#define DMAWAIT(sc)  TIME_WAIT((sc->sc_regs->csr & D_R_PEND), "DMAWAIT", sc)
#define DMAWAIT1(sc) TIME_WAIT((sc->sc_regs->csr & D_DRAINING), "DMAWAIT1", sc)
#define DMAREADY(sc) TIME_WAIT((!(sc->sc_regs->csr & D_DMA_ON)), "DMAREADY", sc)
d62 20
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
