head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.42
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.38
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.40
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.32
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.36
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.34
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.30
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.28
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.26
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.24
	OPENBSD_5_0:1.10.0.22
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.20
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.3.0.6
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.4
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2006.03.15.20.03.06;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.04.12.38.58;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.22.22.31.49;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.01.22.31.22;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.18.40.59;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.08.21.20.55;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.24.10.07.20;	author ho;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	99.07.25.23.49.37;	author jason;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.07.23.19.11.26;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.21.37.09;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.49.25;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.06.07.11.14.43;	author ho;	state Exp;
branches;
next	;

1.3.6.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2002.10.29.00.28.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Entries in cd_devs[] may be NULL, so be sure to check for them in your
device open() function.
@
text
@/*	$OpenBSD: scf.c,v 1.9 2006/03/04 12:38:58 miod Exp $	*/

/*
 * Copyright (c) 1999 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * This software was developed by Jason L. Wright under contract with
 * RTMX Incorporated (http://www.rtmx.com).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for the flash memory and sysconfig registers found on Force CPU-5V
 * boards.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/timeout.h>

#include <machine/autoconf.h>
#include <sparc/cpu.h>
#include <sparc/sparc/cpuvar.h>
#include <machine/scfio.h>
#include <sparc/dev/scfreg.h>

int	scfmatch(struct device *, void *, void *);
void	scfattach(struct device *, struct device *, void *);

int	scfopen(dev_t, int, int, struct proc *);
int	scfclose(dev_t, int, int, struct proc *);
int	scfioctl(dev_t, u_long, caddr_t, int, struct proc *);

struct scf_softc {
	struct	device sc_dv;			/* base device */
	struct	scf_regs *sc_regs;	/* our registers */
	int	sc_open;
	int	sc_tick;
	struct	timeout sc_blink_tmo;	/* for scfblink() */
};

struct cfattach scf_ca = {
	sizeof (struct scf_softc), scfmatch, scfattach
};

struct cfdriver scf_cd = {
	NULL, "scf", DV_DULL
};

extern int sparc_led_blink;

static const u_int8_t scf_pattern[] = {
	SSLDCR_A|SSLDCR_B|SSLDCR_C|SSLDCR_D|SSLDCR_E|SSLDCR_F,
	SSLDCR_B|SSLDCR_C,
	SSLDCR_A|SSLDCR_B|SSLDCR_D|SSLDCR_E|SSLDCR_G,
	SSLDCR_A|SSLDCR_B|SSLDCR_C|SSLDCR_D|SSLDCR_G,
	SSLDCR_B|SSLDCR_C|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_C|SSLDCR_D|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_C|SSLDCR_D|SSLDCR_E|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_B|SSLDCR_C,
	SSLDCR_A|SSLDCR_B|SSLDCR_C|SSLDCR_D|SSLDCR_E|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_B|SSLDCR_C|SSLDCR_D|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_B|SSLDCR_C|SSLDCR_E|SSLDCR_F|SSLDCR_G,
	SSLDCR_C|SSLDCR_D|SSLDCR_E|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_D|SSLDCR_E|SSLDCR_F,
	SSLDCR_B|SSLDCR_C|SSLDCR_D|SSLDCR_E|SSLDCR_G,
	SSLDCR_A|SSLDCR_D|SSLDCR_E|SSLDCR_F|SSLDCR_G,
	SSLDCR_A|SSLDCR_E|SSLDCR_F|SSLDCR_G,
};

int
scfmatch(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct confargs *ca = aux;
	register struct romaux *ra = &ca->ca_ra;

	if (strcmp("sysconfig", ra->ra_name))
		return (0);

	return (1);
}

void    
scfattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	struct scf_softc *sc = (struct scf_softc *)self;
	char *s;

	/* map registers */
	if (ca->ca_ra.ra_nreg != 1) {
		printf(": expected 1 register, got %d\n", ca->ca_ra.ra_nreg);
		return;
	}

	sc->sc_regs = mapiodev(&(ca->ca_ra.ra_reg[0]), 0,
			ca->ca_ra.ra_reg[0].rr_len);

	s = getpropstring(ca->ca_ra.ra_node, "model");
	printf(": model %s\n", s);

	sc->sc_regs->led1 &= ~LED_MASK;
	sc->sc_regs->led2 &= ~LED_MASK;
	sc->sc_regs->ssldcr = 0;

	timeout_set(&sc->sc_blink_tmo, scfblink, 0);

	if (sparc_led_blink)
		scfblink(0);
}

int
scfopen(dev, flags, mode, p)
	dev_t dev;
	int flags;
	int mode;
	struct proc *p;
{
	struct scf_softc *sc;
	int card = 0;

	if (card >= scf_cd.cd_ndevs)
		return (ENXIO);
	sc = scf_cd.cd_devs[card];
	if (sc == NULL)
		return (ENXIO);
	if (sc->sc_open)
		return (EBUSY);

	sc->sc_open = 1;
	return (0);
}

int
scfclose(dev, flags, mode, p)
	dev_t dev;
	int flags;
	int mode;
	struct proc *p;
{
	struct scf_softc *sc;
	int card = 0;

	sc = scf_cd.cd_devs[card];
	sc->sc_open = 0;
	return (0);
}

int
scfioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct scf_softc *sc = scf_cd.cd_devs[0];
	u_int8_t *ptr = (u_int8_t *)data, c;
	int error = 0;

	switch (cmd) {
	case SCFIOCSLED1:
		sc->sc_regs->led1 = LED_MASK | (*ptr);
		break;
	case SCFIOCGLED1:
		*ptr = sc->sc_regs->led1 & (LED_COLOR_MASK | LED_BLINK_MASK);
		break;
	case SCFIOCSLED2:
		sc->sc_regs->led2 = LED_MASK | (*ptr);
		break;
	case SCFIOCGLED2:
		*ptr = sc->sc_regs->led2 & (LED_COLOR_MASK | LED_BLINK_MASK);
		break;
	case SCFIOCSLED7:
		sc->sc_regs->ssldcr = *ptr;
		break;
	case SCFIOCGLED7:
		*ptr = sc->sc_regs->ssldcr;
		break;
	case SCFIOCGROT:
		*ptr = sc->sc_regs->rssr;
		break;
	case SCFIOCSFMCTRL:
		if ((*ptr) & SCF_FMCTRL_SELROM)
			sc->sc_regs->fmpcr1 |= FMPCR1_SELROM;
		else
			sc->sc_regs->fmpcr1 &= ~FMPCR1_SELROM;

		if ((*ptr) & SCF_FMCTRL_SELBOOT)
			sc->sc_regs->fmpcr2 |= FMPCR2_SELBOOT;
		else
			sc->sc_regs->fmpcr2 &= ~FMPCR2_SELBOOT;

		if ((*ptr) & SCF_FMCTRL_WRITEV)
			sc->sc_regs->fmpvcr |= FMPVCR_VPP;
		else
			sc->sc_regs->fmpvcr &= ~FMPVCR_VPP;

		c = ((*ptr) & SCF_FMCTRL_SELADDR) >> 3;
		sc->sc_regs->fmpcr1 =
		    (sc->sc_regs->fmpcr1 & ~FMPCR1_SELADDR) | (c << 1);

		break;
	case SCFIOCGFMCTRL:
		c = (sc->sc_regs->fmpcr1 & FMPCR1_SELADDR) << 2;
		if (sc->sc_regs->fmpcr1 & FMPCR1_SELROM)
			c |= SCF_FMCTRL_SELROM;
		if (sc->sc_regs->fmpcr2 & FMPCR2_SELBOOT)
			c |= SCF_FMCTRL_SELBOOT;
		if (sc->sc_regs->fmpvcr & FMPVCR_VPP)
			c |= SCF_FMCTRL_WRITEV;
		*ptr = c;
		break;
	default:
		error = ENOTTY;
	}

	return (error);
}

void
scfblink(v)
        void *v;
{
	struct scf_softc *sc;
	int s, avg, hi = 0;

	if (scf_cd.cd_ndevs == 0)
		return;

	sc = scf_cd.cd_devs[0];
	if (sc == NULL)
		return;

	if (sparc_led_blink == 0) {
		sc->sc_regs->led1 &= ~LED_MASK;
		sc->sc_regs->led2 &= ~LED_MASK;
		sc->sc_regs->ssldcr = 0;
		return;
	}

	avg = averunnable.ldavg[0] >> FSHIFT;
	while (avg > 15) {
		hi = 1;
		avg >>= 4;
	}

	s = splhigh();
	if (sc->sc_tick & 1) {
		sc->sc_regs->led1 &= ~LED_MASK;
		sc->sc_regs->led2 |= LED_COLOR_GREEN;
	}
	else {
		sc->sc_regs->led1 |= LED_COLOR_YELLOW;
		sc->sc_regs->led2 &= ~LED_MASK;
	}
	sc->sc_regs->ssldcr = scf_pattern[avg] | (hi ? SSLDCR_P : 0);
	splx(s);

	sc->sc_tick++;

	s = ((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 1);
	timeout_add(&sc->sc_blink_tmo, s);
}
@


1.9
log
@These devices are DV_DULL, not DV_IFNET... not that it really matters.
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.8 2006/02/22 22:31:49 miod Exp $	*/
a155 1

d157 2
@


1.8
log
@Attach as scf0 as per the config(8) stanza, instead of sysconfig0.
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.7 2005/06/01 22:31:22 miod Exp $	*/
d75 1
a75 1
	NULL, "scf", DV_IFNET
@


1.7
log
@Typo in cut'n'paste abuse.
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.6 2003/06/02 18:40:59 jason Exp $	*/
d75 1
a75 1
	NULL, "sysconfig", DV_IFNET
d80 1
a80 1
static u_int8_t scf_pattern[] = {
@


1.6
log
@nuke my clause 3 & 4 (and a couple jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.5 2002/07/08 21:20:55 jason Exp $	*/
d135 1
a135 1
	sc->sc_regs->led1 &= ~LED_MASK;
@


1.5
log
@Correctly convert to new timeouts (this hasn't compiled for awhile)
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.4 2002/03/14 01:26:43 millert Exp $	*/
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright for
 *	RTMX Incorporated.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.3 2001/03/24 10:07:20 ho Exp $	*/
d53 1
d144 3
a146 2
	if (sparc_led_blink) {
		timeout_set(&sc->sc_blink_tmo, scfblink, 0);
a147 1
	}
@


1.3
log
@Convert to new timeout API. art@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.2 1999/07/25 23:49:37 jason Exp $	*/
d60 2
a61 2
int	scfmatch	__P((struct device *, void *, void *));
void	scfattach	__P((struct device *, struct device *, void *));
d63 3
a65 3
int	scfopen	__P((dev_t, int, int, struct proc *));
int	scfclose	__P((dev_t, int, int, struct proc *));
int	scfioctl	__P((dev_t, u_long, caddr_t, int, struct proc *));
@


1.3.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.3 2001/03/24 10:07:20 ho Exp $	*/
d60 2
a61 2
int	scfmatch(struct device *, void *, void *);
void	scfattach(struct device *, struct device *, void *);
d63 3
a65 3
int	scfopen(dev_t, int, int, struct proc *);
int	scfclose(dev_t, int, int, struct proc *);
int	scfioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.3.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.3.6.1 2002/06/11 03:38:16 art Exp $	*/
a52 1
#include <sys/timeout.h>
d143 2
a144 3
	timeout_set(&sc->sc_blink_tmo, scfblink, 0);

	if (sparc_led_blink)
d146 1
@


1.2
log
@move around ioctl definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.1 1999/07/23 19:11:26 jason Exp $	*/
d72 1
d143 2
a144 1
	if (sparc_led_blink)
d146 1
d299 1
a299 1
	timeout(scfblink, 0, s);
@


1.2.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.3 2001/03/24 10:07:20 ho Exp $	*/
a71 1
	struct	timeout sc_blink_tmo;	/* for scfblink() */
d142 1
a142 2
	if (sparc_led_blink) {
		timeout_set(&sc->sc_blink_tmo, scfblink, 0);
a143 1
	}
d296 1
a296 1
	timeout_add(&sc->sc_blink_tmo, s);
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 2
a61 2
int	scfmatch(struct device *, void *, void *);
void	scfattach(struct device *, struct device *, void *);
d63 3
a65 3
int	scfopen(dev_t, int, int, struct proc *);
int	scfclose(dev_t, int, int, struct proc *);
int	scfioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@a52 1
#include <sys/timeout.h>
d143 2
a144 3
	timeout_set(&sc->sc_blink_tmo, scfblink, 0);

	if (sparc_led_blink)
d146 1
@


1.2.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scf.c,v 1.2.4.3 2003/03/27 23:49:25 niklas Exp $	*/
d18 6
@


1.1
log
@Drivers for the FORCE CPU-5V:
o fga5000 vme-sbus bridge
o system config registers
o flash memory
and daadio VME board driver
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#include <sparc/dev/scfio.h>
@

