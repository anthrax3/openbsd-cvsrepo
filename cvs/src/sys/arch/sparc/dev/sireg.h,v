head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.82
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.78
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.80
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.72
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.76
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.74
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.70
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.68
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.66
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.64
	OPENBSD_5_0:1.3.0.62
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.60
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.58
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.54
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.56
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.52
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.50
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.48
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.46
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.44
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.42
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.40
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.38
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.36
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.34
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.32
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.30
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.28
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.26
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.24
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.22
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.3
date	97.08.08.08.25.30;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.01.04.01.31.45;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: sireg.h,v 1.3 1996/01/01 22:40:58 thorpej Exp $	*/

/*
 * Register map for the Sun3 SCSI Interface (si)
 * The first part of this register map is an NCR5380
 * SCSI Bus Interface Controller (SBIC).  The rest is a
 * DMA controller and custom logic in one of two flavors,
 * one for the OBIO interface (3/50,3/60) and one for the
 * VME interface (3/160,3/260,etc.), where some registers
 * are implemented only on one or the other, some on both.
 *
 * Modified for Sun 4 systems by Jason R. Thorpe <thorpej@@NetBSD.ORG>.
 */

/*
 * Note that the obio version on the 4/1xx (the so-called "SCSI Weird", or
 * "sw" controller) is laid out a bit differently, and hence the evilness
 * with unions.  Also, the "sw" doesn't appear to have a FIFO.
 */

/*
 * Am5380 Register map (no padding)
 */
struct ncr5380regs {
	volatile u_char sci_r0;
	volatile u_char sci_r1;
	volatile u_char sci_r2;
	volatile u_char sci_r3;
	volatile u_char sci_r4;
	volatile u_char sci_r5;
	volatile u_char sci_r6;
	volatile u_char sci_r7;
};

struct si_regs {
	struct ncr5380regs sci;

	/* DMA controller registers */
	union {
		struct {
			u_short	_Dma_addrh;	/* dma address (VME only) */
			u_short	_Dma_addrl;	/* (high word, low word)  */
		} _si_u1_s;
		u_int		_Dma_addr;	/* dma address (OBIO) */
	} _si_u1;
#define dma_addrh	_si_u1._si_u1_s._Dma_addrh
#define dma_addrl	_si_u1._si_u1_s._Dma_addrl
#define dma_addr	_si_u1._Dma_addr

	union {
		struct {
			u_short	_Dma_counth;	/* dma count   (VME only) */
			u_short	_Dma_countl;	/* (high word, low word)  */
		} _si_u2_s;
		u_int		_Dma_count;	/* dma count (OBIO) */
	} _si_u2;
#define dma_counth	_si_u2._si_u2_s._Dma_counth
#define dma_countl	_si_u2._si_u2_s._Dma_countl
#define dma_count	_si_u2._Dma_count

	u_int		si_pad0;		/* no-existent register */

	union {
		struct {
			u_short	_Fifo_data;	/* fifo data register */
			u_short	_Fifo_count;	/* fifo count register */
		} _si_u4_s;
		u_int		_Sw_csr;	/* sw control/status */
	} _si_u4;
#define fifo_data	_si_u4._si_u4_s._Fifo_data
#define fifo_count	_si_u4._si_u4_s._Fifo_count
#define sw_csr		_si_u4._Sw_csr

	union {
		struct {
			u_short	_Si_csr;	/* si control/status */
			u_short	_Bprh;		/* VME byte pack high */
		} _si_u5_s;
		u_int	_Bpr;			/* sw byte pack */
	} _si_u5;
#define si_csr		_si_u5._si_u5_s._Si_csr
#define si_bprh		_si_u5._si_u5_s._Bprh
#define sw_bpr		_si_u5._Bpr

	/* The rest of these are on the VME interface only: */
	u_short			si_bprl;	/* VME byte pack low */
	u_short			si_iv_am;	/* bits 0-7: intr vector */
				/* bits 8-13: addr modifier (VME only) */
						/* bits 14-15: unused */
	u_short			fifo_cnt_hi;	/* high part of fifo_count (VME only) */

	/* Whole thing repeats after 32 bytes. */
	u_short			_space[3];
};

/* possible values for the address modifier, vme version only */
#define VME_SUPV_DATA_24	0x3d00

/*
 * Status Register.
 * Note:
 *	(r)	indicates bit is read only.
 *	(rw)	indicates bit is read or write.
 *	(v)	vme host adaptor interface only.
 *	(o)	sun3/50 onboard host adaptor interface only.
 *	(b)	both vme and sun3/50 host adaptor interfaces.
 */
#define SI_CSR_DMA_ACTIVE	0x8000	/* (r,o) dma transfer active */
#define SI_CSR_DMA_CONFLICT	0x4000	/* (r,b) reg accessed while dmaing */
#define SI_CSR_DMA_BUS_ERR	0x2000	/* (r,b) bus error during dma */
#define SI_CSR_ID		0x1000	/* (r,b) 0 for 3/50, 1 for SCSI-3, */
					/* 0 if SCSI-3 unmodified */
#define SI_CSR_FIFO_FULL	0x0800	/* (r,b) fifo full */
#define SI_CSR_FIFO_EMPTY	0x0400	/* (r,b) fifo empty */
#define SI_CSR_SBC_IP		0x0200	/* (r,b) sbc interrupt pending */
#define SI_CSR_DMA_IP		0x0100	/* (r,b) dma interrupt pending */
#define SI_CSR_LOB		0x00c0	/* (r,v) number of leftover bytes */
#define SI_CSR_LOB_THREE	0x00c0	/* (r,v) three leftover bytes */
#define SI_CSR_LOB_TWO		0x0080	/* (r,v) two leftover bytes */
#define SI_CSR_LOB_ONE		0x0040	/* (r,v) one leftover byte */
#define SI_CSR_BPCON		0x0020	/* (rw,v) byte packing control */
					/* dma is in 0=longwords, 1=words */
#define SI_CSR_DMA_EN		0x0010	/* (rw,v) dma/interrupt enable */
#define SI_CSR_SEND		0x0008	/* (rw,b) dma dir, 1=to device */
#define SI_CSR_INTR_EN		0x0004	/* (rw,b) interrupts enable */
#define SI_CSR_FIFO_RES		0x0002	/* (rw,b) inits fifo, 0=reset */
#define SI_CSR_SCSI_RES		0x0001	/* (rw,b) reset sbc and udc, 0=reset */
@


1.2
log
@mi 5380 driver
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: sireg.h,v 1.2 1995/09/03 22:21:29 pk Exp $	*/
d11 2
d16 3
a18 9
 * Some of these registers apply to only one interface and some
 * apply to both. The registers which apply to the Sun3/50 onboard 
 * version only are udc_rdata and udc_raddr. The registers which
 * apply to the Sun3 vme version only are dma_addr, dma_count, bpr,
 * iv_am, and bcrh. Thus, the sbc registers, fifo_data, bcr, and csr 
 * apply to both interfaces.
 * One other feature of the vme interface: a write to the dma count 
 * register also causes a write to the fifo byte count register and
 * vis versa.
d21 14
d36 2
a37 1
	sci_regmap_t sci;	/* See ncr5380.h */
d40 4
a43 2
		u_short		_Dma_addrh;	/* dma address (VME only) */
		u_short		_Dma_addrl;	/* (high word, low word)  */
d46 2
a47 2
#define dma_addrh	_si_u1._Dma_addrh
#define dma_addrl	_si_u1._Dma_addrl
d51 4
a54 2
		u_short		_Dma_counth;	/* dma count   (VME only) */
		u_short		_Dma_countl;	/* (high word, low word)  */
d57 2
a58 2
#define dma_counth	_si_u2._Dma_counth
#define dma_countl	_si_u2._Dma_countl
d61 1
a61 8
	union {
		u_short		_Udc_data;	/* Am9516 data reg (OBIO si) */
		u_short		_Udc_addr;	/* Am9516 addr reg (OBIO si) */
		u_int		_Sw_bcr;	/* non-existent sw bcr */
	} _si_u3;
#define udc_data	_si_u3._Udc_data
#define udc_addr	_si_u3._Udc_addr
#define sw_bcr		_si_u3._Sw_bcr
d64 4
a67 2
		u_short		_Fifo_data;	/* fifo data register */
		u_short		_Fifo_count;	/* fifo count register */
d70 2
a71 2
#define fifo_data	_si_u4._Fifo_data
#define fifo_count	_si_u4._Fifo_count
d75 5
a79 3
		u_short		_Si_csr;	/* si control/status */
		u_short		_Bprh;		/* VME byte pack high */
		u_int		_Bpr;		/* sw byte pack */
d81 3
a83 3
#define si_csr		_si_u5._Si_csr
#define bprh		_si_u5._Bprh
#define bpr		_si_u5._Bpr
d86 3
a88 3
	u_short			bprl;		/* VME byte pack low */
	u_short			iv_am;		/* bits 0-7: intr vector */
						/* bits 8-13: addr modifier */
d90 4
a93 1
	u_short			bcrh;		/* high portion of bcr */
d96 1
a96 1
/* possible values for the address modifier, sun3 vme version only */
a98 3
/* XXX - must massage dvma addresses for Sun3/50 hardware (?) */
#define DVMA_OFFSET		(int)(DVMA - (char *)KERNELBASE)

d123 1
a123 1
#define SI_CSR_DMA_EN		0x0010	/* (rw,v) dma enable */
a127 19

#define SCSI_PHASE_DATA_OUT	0x0
#define SCSI_PHASE_DATA_IN	0x1
#define SCSI_PHASE_CMD		0x2
#define SCSI_PHASE_STATUS	0x3
#define SCSI_PHASE_UNSPEC1	0x4
#define SCSI_PHASE_UNSPEC2	0x5
#define SCSI_PHASE_MESSAGE_OUT	0x6
#define SCSI_PHASE_MESSAGE_IN	0x7

/*#define SCSI_PHASE(x)	((x)&0x7)*/

/* These should be fixed up. */

#define SCSI_RET_SUCCESS	0
#define SCSI_RET_RETRY		1
#define SCSI_RET_DEVICE_DOWN	2
#define SCSI_RET_COMMAND_FAIL	3
#define SCSI_RET_NEED_RESET 	4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
