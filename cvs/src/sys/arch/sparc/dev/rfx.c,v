head	1.17;
access;
symbols
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.20
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.18
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.16
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.14
	OPENBSD_5_0:1.14.0.12
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.10
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.8
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.4
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	SMP:1.4.0.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.17
date	2015.03.28.19.07.07;	author miod;	state Exp;
branches;
next	1.16;
commitid	nwbHy4sQv9NnJnmZ;

1.16
date	2013.11.26.20.33.14;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2013.10.20.20.07.26;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.26.22.30.21;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.26.09.28.33;	author martynas;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.18.18.40.35;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.02.20.00.54;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.23.17.16.34;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.13.23.05.22;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.07.16.44.50;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.03.02.14.01;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.29.22.07.37;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.29.07.35.11;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.01.22.27.09;	author miod;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2004.03.01.11.57.51;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.07.53.01;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.21.44.14;	author miod;	state Exp;
branches;
next	;

1.4.4.1
date	2004.06.05.23.10.58;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Don't include sbusvar.h if you need neither sbus_translate() nor sbus_testdma().
@
text
@/*	$OpenBSD: rfx.c,v 1.16 2013/11/26 20:33:14 deraadt Exp $	*/

/*
 * Copyright (c) 2004, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * Driver for the Vitec RasterFlex family of frame buffers.
 * It should support RasterFlex-24, RasterFlex-32 and RasterFlex-HR.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>
#include <sys/mman.h>
#include <sys/tty.h>
#include <sys/conf.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/pmap.h>
#include <machine/cpu.h>
#include <machine/conf.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/rasops/rasops.h>
#include <machine/fbvar.h>

#include <dev/ic/bt463reg.h>

/*
 * Configuration structure
 */
struct rfx_config {
	u_int16_t	unknown;
	u_int16_t	version;
	u_int32_t	scanline;
	u_int32_t	maxwidth;	/* unsure */
	u_int32_t	maxheight;	/* unsure */
	u_int32_t	width;
	u_int32_t	height;
};

/*
 * In-memory offsets
 */

#define	RFX_RAMDAC_ADDR		0x00020000
#define	RFX_RAMDAC_SIZE		0x00000004

#define	RFX_CONTROL_ADDR	0x00040000
#define	RFX_CONTROL_SIZE	0x000000e0

#define	RFX_INIT_ADDR		0x00018000
#define	RFX_INIT_OFFSET		0x0000001c
#define	RFX_INIT_SIZE		0x00008000

#define	RFX_VRAM_ADDR		0x00100000

/*
 * Control registers
 */

#define	RFX_VIDCTRL_REG		0x10
#define	RFX_VSYNC_ENABLE	0x00000001
#define	RFX_VIDEO_DISABLE	0x00000002

/*
 * Shadow colormap
 */
struct rfx_cmap {
	u_int8_t	red[256];
	u_int8_t	green[256];
	u_int8_t	blue[256];
};

struct rfx_softc {
	struct	sunfb		 sc_sunfb;
	struct	rom_reg		 sc_phys;
	struct	intrhand	 sc_ih;

	struct rfx_cmap		 sc_cmap;
	volatile u_int8_t	*sc_ramdac;
	volatile u_int32_t	*sc_ctrl;
};

void	rfx_burner(void *, u_int, u_int);
int	rfx_ioctl(void *, u_long, caddr_t, int, struct proc *);
paddr_t	rfx_mmap(void *, off_t, int);

int	rfx_getcmap(struct rfx_cmap *, struct wsdisplay_cmap *);
void	rfx_initialize(struct rfx_softc *, struct rfx_config *);
int	rfx_intr(void *);
void	rfx_loadcmap(struct rfx_softc *, int, int);
int	rfx_putcmap(struct rfx_cmap *, struct wsdisplay_cmap *);
void	rfx_setcolor(void *, u_int, u_int8_t, u_int8_t, u_int8_t);

struct wsdisplay_accessops rfx_accessops = {
	.ioctl = rfx_ioctl,
	.mmap = rfx_mmap,
	.burn_screen = rfx_burner
};

int	rfxmatch(struct device *, void *, void *);
void	rfxattach(struct device *, struct device *, void *);

#if defined(OpenBSD)

struct cfattach rfx_ca = {
	sizeof (struct rfx_softc), rfxmatch, rfxattach
};

struct cfdriver rfx_cd = {
	NULL, "rfx", DV_DULL
};

#else

CFATTACH_DECL(rfx, sizeof (struct rfx_softc), rfxmatch, rfxattach, NULL, NULL);

#endif

/*
 * Match a supported RasterFlex card.
 */
int
rfxmatch(struct device *parent, void *vcf, void *aux)
{
	struct confargs *ca = aux;
	struct romaux *ra = &ca->ca_ra;
	const char *device = ra->ra_name;

	/* skip vendor name (could be CWARE, VITec, ...) */
	while (*device != ',' && *device != '\0')
		device++;
	if (*device == '\0')
		device = ra->ra_name;
	else
		device++;

	if (strncmp(device, "RasterFLEX", strlen("RasterFLEX")) != 0)
		return (0);

	/* RasterVideo and RasterFlex-TV are frame grabbers */
	if (strcmp(device, "RasterFLEX-TV") == 0)
		return (0);

	return (1);
}

/*
 * Attach and initialize a rfx display, as well as a child wsdisplay.
 */
void
rfxattach(struct device *parent, struct device *self, void *args)
{
	struct rfx_softc *sc = (struct rfx_softc *)self;
	struct confargs *ca = args;
	const char *device = ca->ca_ra.ra_name;
	struct rfx_config cf;
	int node, cflen, isconsole;
#if 0
	int pri;
#endif

#if 0
	pri = ca->ca_ra.ra_intr[0].int_pri;
	printf(" pri %d", pri);
#endif

	/* skip vendor name (could be CWARE, VITec, ...) */
	while (*device != ',' && *device != '\0')
		device++;
	if (*device == '\0')
		device = ca->ca_ra.ra_name;
	else
		device++;
	printf(": %s", device);

	if (ca->ca_ra.ra_nreg == 0) {
		printf("\n%s: no SBus registers!\n",
		    self->dv_xname);
		return;
	}

	node = ca->ca_ra.ra_node;
	isconsole = node == fbnode;

	/*
	 * Parse configuration structure
	 */
	cflen = getproplen(node, "configuration");
	if (cflen != sizeof cf) {
		printf(", unknown %d bytes conf. structure", cflen);
		/* fill in default values */
		cf.version = 0;
		cf.scanline = 2048;
		cf.width = 1152;
		cf.height = 900;
	} else {
		getprop(node, "configuration", &cf, cflen);
		printf(", revision %d", cf.version);
	}

	/*
	 * Map registers
	 */
	sc->sc_ramdac = (u_int8_t *)
	    mapiodev(ca->ca_ra.ra_reg, RFX_RAMDAC_ADDR, RFX_RAMDAC_SIZE);
	sc->sc_ctrl = (u_int32_t *)
	    mapiodev(ca->ca_ra.ra_reg, RFX_CONTROL_ADDR, RFX_CONTROL_SIZE);
	sc->sc_phys = ca->ca_ra.ra_reg[0];

#if 0	/* not yet */
	sc->sc_ih.ih_fun = rfx_intr;
	sc->sc_ih.ih_arg = sc;
	intr_establish(pri, &sc->sc_ih, IPL_FB, self->dv_xname);
#endif

	/*
	 * The following is an equivalent for
	 *   fb_setsize(&sc->sc_sunfb, 8, cf.width, cf.height,
	 *     node, ca->ca_bustype);
	 * forcing the correct scan line value. Since the usual frame buffer
	 * properties are missing on this card, no need to go through
	 * fb_setsize()...
	 */
	sc->sc_sunfb.sf_depth = 8;
	sc->sc_sunfb.sf_width = cf.width;
	sc->sc_sunfb.sf_height = cf.height;
	sc->sc_sunfb.sf_linebytes = cf.scanline;
	sc->sc_sunfb.sf_fbsize = cf.height * cf.scanline;

	printf(", %dx%d\n", sc->sc_sunfb.sf_width, sc->sc_sunfb.sf_height);

	sc->sc_sunfb.sf_ro.ri_bits = mapiodev(ca->ca_ra.ra_reg,
	    RFX_VRAM_ADDR, round_page(sc->sc_sunfb.sf_fbsize));
	sc->sc_sunfb.sf_ro.ri_hw = sc;

	/*
	 * If we are not the console, the frame buffer has not been
	 * initialized by the PROM - do this ourselves.
	 */
	if (!isconsole)
		rfx_initialize(sc, &cf);

	fbwscons_init(&sc->sc_sunfb, isconsole);

	bzero(&sc->sc_cmap, sizeof(sc->sc_cmap));
	fbwscons_setcolormap(&sc->sc_sunfb, rfx_setcolor);

	if (isconsole)
		fbwscons_console_init(&sc->sc_sunfb, -1);

	/* enable video */
	rfx_burner(sc, 1, 0);

	fbwscons_attach(&sc->sc_sunfb, &rfx_accessops, isconsole);
}

/*
 * Common wsdisplay operations
 */

int
rfx_ioctl(void *v, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct rfx_softc *sc = v;
	struct wsdisplay_cmap *cm;
	struct wsdisplay_fbinfo *wdf;
	int error;

	switch (cmd) {
	case WSDISPLAYIO_GTYPE:
		*(u_int *)data = WSDISPLAY_TYPE_RFLEX;
		break;
	case WSDISPLAYIO_GINFO:
		wdf = (struct wsdisplay_fbinfo *)data;
		wdf->height = sc->sc_sunfb.sf_height;
		wdf->width  = sc->sc_sunfb.sf_width;
		wdf->depth  = sc->sc_sunfb.sf_depth;
		wdf->cmsize = 256;
		break;
	case WSDISPLAYIO_LINEBYTES:
		*(u_int *)data = sc->sc_sunfb.sf_linebytes;
		break;

	case WSDISPLAYIO_GETCMAP:
		cm = (struct wsdisplay_cmap *)data;
		error = rfx_getcmap(&sc->sc_cmap, cm);
		if (error != 0)
			return (error);
		break;
	case WSDISPLAYIO_PUTCMAP:
		cm = (struct wsdisplay_cmap *)data;
		error = rfx_putcmap(&sc->sc_cmap, cm);
		if (error != 0)
			return (error);
		rfx_loadcmap(sc, cm->index, cm->count);
		break;

	case WSDISPLAYIO_SVIDEO:
	case WSDISPLAYIO_GVIDEO:
		break;

	default:
		return (-1);
        }

	return (0);
}

paddr_t
rfx_mmap(void *v, off_t offset, int prot)
{
	struct rfx_softc *sc = v;

	if (offset & PGOFSET)
		return (-1);

	if (offset >= 0 && offset < sc->sc_sunfb.sf_fbsize) {
		return (REG2PHYS(&sc->sc_phys, RFX_VRAM_ADDR + offset) |
		    PMAP_NC);
	}

	return (-1);
}

void
rfx_burner(void *v, u_int on, u_int flags)
{
	struct rfx_softc *sc = v;

	if (on) {
		sc->sc_ctrl[RFX_VIDCTRL_REG] &= ~RFX_VIDEO_DISABLE;
		sc->sc_ctrl[RFX_VIDCTRL_REG] |= RFX_VSYNC_ENABLE;
	} else {
		sc->sc_ctrl[RFX_VIDCTRL_REG] |= RFX_VIDEO_DISABLE;
		if (flags & WSDISPLAY_BURN_VBLANK)
			sc->sc_ctrl[RFX_VIDCTRL_REG] &= ~RFX_VSYNC_ENABLE;
	}
}

/*
 * Colormap helper functions
 */

void
rfx_setcolor(void *v, u_int index, u_int8_t r, u_int8_t g, u_int8_t b)
{
	struct rfx_softc *sc = v;

	sc->sc_cmap.red[index] = r;
	sc->sc_cmap.green[index] = g;
	sc->sc_cmap.blue[index] = b;

	rfx_loadcmap(sc, index, 1);
}

int
rfx_getcmap(struct rfx_cmap *cm, struct wsdisplay_cmap *rcm)
{
	u_int index = rcm->index, count = rcm->count;
	int error;

	if (index >= 256 || count > 256 - index)
		return (EINVAL);

	if ((error = copyout(cm->red + index, rcm->red, count)) != 0)
		return (error);
	if ((error = copyout(cm->green + index, rcm->green, count)) != 0)
		return (error);
	if ((error = copyout(cm->blue + index, rcm->blue, count)) != 0)
		return (error);

	return (0);
}

int
rfx_putcmap(struct rfx_cmap *cm, struct wsdisplay_cmap *rcm)
{
	u_int index = rcm->index, count = rcm->count;
	u_int8_t red[256], green[256], blue[256];
	int error;

	if (index >= 256 || count > 256 - index)
		return (EINVAL);

	if ((error = copyin(rcm->red, red, count)) != 0)
		return (error);
	if ((error = copyin(rcm->green, green, count)) != 0)
		return (error);
	if ((error = copyin(rcm->blue, blue, count)) != 0)
		return (error);

	bcopy(red, cm->red + index, count);
	bcopy(green, cm->green + index, count);
	bcopy(blue, cm->blue + index, count);

	return (0);
}

void
rfx_loadcmap(struct rfx_softc *sc, int start, int ncolors)
{
	u_int8_t *r, *g, *b;

	r = sc->sc_cmap.red + start;
	g = sc->sc_cmap.green + start;
	b = sc->sc_cmap.blue + start;

	start += BT463_IREG_CPALETTE_RAM;
	sc->sc_ramdac[BT463_REG_ADDR_LOW] = start & 0xff;
	sc->sc_ramdac[BT463_REG_ADDR_HIGH] = (start >> 8) & 0xff;

	while (ncolors-- != 0) {
		sc->sc_ramdac[BT463_REG_CMAP_DATA] = *r++;
		sc->sc_ramdac[BT463_REG_CMAP_DATA] = *g++;
		sc->sc_ramdac[BT463_REG_CMAP_DATA] = *b++;
	}
}

/*
 * Initialization code parser
 */

void
rfx_initialize(struct rfx_softc *sc, struct rfx_config *cf)
{
	u_int32_t *data, offset, value;
	size_t cnt;

	/*
	 * Map the initialization data - this is a waste as we won't be
	 * able to reclaim this mapping...
	 */
	data = (u_int32_t *)
	    mapiodev(&sc->sc_phys, RFX_INIT_ADDR, RFX_INIT_SIZE);

	/*
	 * Skip copyright notice
	 */
	data += RFX_INIT_OFFSET / sizeof(u_int32_t);
	cnt = (RFX_INIT_SIZE - RFX_INIT_OFFSET) / sizeof(u_int32_t);
	cnt >>= 1;

	/*
	 * Parse and apply settings
	 */
	while (cnt != 0) {
		offset = *data++;
		value = *data++;

		if (offset == (u_int32_t)-1 && value == (u_int32_t)-1)
			break;

		/* Old PROM are little-endian */
		if (cf->version <= 1) {
			offset = letoh32(offset);
			value = letoh32(offset);
		}

		if (offset & (1U << 31)) {
			offset = (offset & ~(1U << 31)) - RFX_RAMDAC_ADDR;
			if (offset < RFX_RAMDAC_SIZE)
				sc->sc_ramdac[offset] = value >> 24;
		} else {
			offset -= RFX_CONTROL_ADDR;
			if (offset < RFX_CONTROL_SIZE)
				sc->sc_ctrl[offset >> 2] = value;
		}

		cnt--;
	}
}
@


1.16
log
@1 << 31 cleanup.  Eitan Adler pointed out that there has been a
resurrection of the bad idiom in the tree.
sufficient review by miod, kettenis, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.15 2013/10/20 20:07:26 miod Exp $	*/
a55 2

#include <sparc/dev/sbusvar.h>
@


1.15
log
@Use C99 named initializers for struct wsdisplay_accessops fields.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.14 2008/12/26 22:30:21 miod Exp $	*/
d493 2
a494 2
		if (offset & (1 << 31)) {
			offset = (offset & ~(1 << 31)) - RFX_RAMDAC_ADDR;
@


1.14
log
@Move the logic responsible from deciding whether a frame buffer needs to be
cleared on attach, from the individual drivers to the common frame buffer code;
the latter will decide based on the prom font metrics and the prom console
window position, whenever possible.

This removes the need for the console window position to be hardcoded in
the p9100 driver, and will no longer require a screen clear on a vigra
VS-12 in high resolution mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.13 2007/11/26 09:28:33 martynas Exp $	*/
d129 3
a131 10
	rfx_ioctl,
	rfx_mmap,
	NULL,	/* alloc_screen */
	NULL,	/* free_screen */
	NULL,	/* show_screen */
	NULL,	/* load_font */
	NULL,	/* scrollback */
	NULL,	/* getchar */
	rfx_burner,
	NULL	/* pollc */
@


1.13
log
@typos;  ok jmc@@
sys/netinet/in_pcb.c and sys/net/bridgestp.c ok henning@@
sys/dev/pci/bktr/* ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.12 2007/02/18 18:40:35 miod Exp $	*/
d284 1
a284 1
	fbwscons_init(&sc->sc_sunfb, isconsole ? 0 : RI_CLEAR);
d289 1
a289 1
	if (isconsole) {
a290 1
	}
@


1.12
log
@Display the interrupt priority in dmesg, for frame buffers which register
interrupt handlers.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.11 2006/06/02 20:00:54 miod Exp $	*/
d279 1
a279 1
	 * initalized by the PROM - do this ourselves.
@


1.11
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.10 2005/03/23 17:16:34 miod Exp $	*/
d198 9
a206 1
	int node, cflen, isconsole = 0;
a214 1

d254 1
a254 2
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih, IPL_FB,
	    self->dv_xname);
@


1.10
log
@Move the alloc_screen, free_screen and show_screen wsdisplay accessops to
the common frame buffer code, rather than duplicating it in every driver.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.9 2005/03/13 23:05:22 miod Exp $	*/
a108 1
	struct	sbusdev		 sc_sd;
a288 2

	sbus_establish(&sc->sc_sd, &sc->sc_sunfb.sf_dev);
@


1.9
log
@Add missed WSDISPLAYIO_[GS]VIDEO ioctl handling.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.8 2005/03/07 16:44:50 miod Exp $	*/
a53 1
#include <dev/wscons/wscons_raster.h>
a115 2

	int			 sc_nscreens;
a117 2
int	rfx_alloc_screen(void *, const struct wsscreen_descr *, void **,
	    int *, int *, long *);
a118 1
void	rfx_free_screen(void *, void *);
a119 2
int	rfx_show_screen(void *, void *, int, void (*cb)(void *, int, int),
	    void *);
d132 3
a134 3
	rfx_alloc_screen,
	rfx_free_screen,
	rfx_show_screen,
d139 1
a363 33
int
rfx_alloc_screen(void *v, const struct wsscreen_descr *type, void **cookiep,
    int *curxp, int *curyp, long *attrp)
{
	struct rfx_softc *sc = v;

	if (sc->sc_nscreens > 0)
		return (ENOMEM);

	*cookiep = &sc->sc_sunfb.sf_ro;
	*curyp = 0;
	*curxp = 0;
	sc->sc_sunfb.sf_ro.ri_ops.alloc_attr(&sc->sc_sunfb.sf_ro,
	    WSCOL_BLACK, WSCOL_WHITE, WSATTR_WSCOLORS, attrp);
	sc->sc_nscreens++;
	return (0);
}

void
rfx_free_screen(void *v, void *cookie)
{
	struct rfx_softc *sc = v;

	sc->sc_nscreens--;
}

int
rfx_show_screen(void *v, void *cookie, int waitok,
    void (*cb)(void *, int, int), void *cbarg)
{
	return (0);
}

a509 5

#ifdef DEBUG
	if (cnt != 0)
		printf("%s: incoherent initialization data!\n");
#endif
@


1.8
log
@Do not bother passing the blanking routine to fbwscons_console_init(),
as fbwscons_attach() can find it on its own.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.7 2005/03/03 02:14:01 miod Exp $	*/
d342 4
@


1.7
log
@Do not attempt to read past firmware data in rfx_initialize().
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.6 2004/11/29 22:07:37 miod Exp $	*/
d292 1
a292 1
		fbwscons_console_init(&sc->sc_sunfb, -1, rfx_burner);
@


1.6
log
@Move the struct wsscreen_descr from a per-driver global to a per-instance
field of the sunfb structure. This allows multiple instances of the same driver,
but with different resolutions (such as a couple of vigra or a TGX cgsix and
a TGX+ cgsix) to use distinct wsscreen_descr structures featuring different
resolution information.

Doing this allows more wsscreen_descr fiddling inside the sparc* fb api,
and results in some code shrinkage (about 4KB on sparc GENERIC).
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.5 2004/09/29 07:35:11 miod Exp $	*/
d515 1
a515 1
	cnt = RFX_INIT_SIZE - RFX_INIT_OFFSET / sizeof(u_int32_t);
d548 1
a548 1
	if (cnt == 0)
@


1.5
log
@Switch sparc to evcount; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.4 2004/03/01 22:27:09 miod Exp $	*/
a120 13
struct wsscreen_descr rfx_stdscreen = {
	"std",
};

const struct wsscreen_descr *rfx_scrlist[] = {
	&rfx_stdscreen,
};

struct wsscreen_list rfx_screenlist = {
	sizeof(rfx_scrlist) / sizeof(struct wsscreen_descr *),
	    rfx_scrlist
};

a205 1
	struct wsemuldisplaydev_attach_args waa;
a290 5
	rfx_stdscreen.capabilities = sc->sc_sunfb.sf_ro.ri_caps;
	rfx_stdscreen.nrows = sc->sc_sunfb.sf_ro.ri_rows;
	rfx_stdscreen.ncols = sc->sc_sunfb.sf_ro.ri_cols;
	rfx_stdscreen.textops = &sc->sc_sunfb.sf_ro.ri_ops;

d292 1
a292 2
		fbwscons_console_init(&sc->sc_sunfb, &rfx_stdscreen, -1,
		    rfx_burner);
d300 1
a300 5
	waa.console = isconsole;
	waa.scrdata = &rfx_screenlist;
	waa.accessops = &rfx_accessops;
	waa.accesscookie = sc;
	config_found(self, &waa, wsemuldisplaydevprint);
@


1.4
log
@Initialize the frame buffer when the PROM did not do this on our behalf.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.3 2004/03/01 11:57:51 miod Exp $	*/
d269 2
a270 1
	intr_establish(ca->ca_ra.ra_intr[0].int_pri, &sc->sc_ih, IPL_FB);
@


1.4.4.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@More readable DAC programming.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.2 2004/03/01 07:53:01 miod Exp $	*/
d86 1
d95 2
a96 3
struct rfx_control {
	u_int32_t	unknown0[(0x40 - 0x00) / sizeof(u_int32_t)];
	u_int32_t	cr40;
a97 2
	u_int32_t	unknown1[(RFX_CONTROL_SIZE - 0x44) / sizeof(u_int32_t)];
};
d116 1
a116 1
	volatile struct rfx_control *sc_ctrl;
d144 1
d248 1
d262 1
a262 1
	sc->sc_ctrl = (struct rfx_control *)
d292 7
d429 2
a430 1
		sc->sc_ctrl->cr40 &= ~RFX_VIDEO_DISABLE;
d432 3
a434 1
		sc->sc_ctrl->cr40 |= RFX_VIDEO_DISABLE;
d515 59
@


1.2
log
@Define a wsdisplay type for rfx; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfx.c,v 1.1 2004/02/29 21:44:14 miod Exp $	*/
d60 2
d490 1
d492 7
a498 2
	sc->sc_ramdac[0] = (start & 0xff);
	sc->sc_ramdac[1] = 0;
d501 3
a503 4
		sc->sc_ramdac[3] = sc->sc_cmap.red[start];
		sc->sc_ramdac[3] = sc->sc_cmap.green[start];
		sc->sc_ramdac[3] = sc->sc_cmap.blue[start];
		start++;
@


1.1
log
@Enter rfx, driver for the SBus RasterFlex frame buffer family.
Currently 8-bit only for now.

This apparently completes the SBus frame buffer support list - yet if
you stumble upon an unsupported SBus frame buffer, I'd love to hear about it...
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d331 1
a331 1
		*(u_int *)data = WSDISPLAY_TYPE_UNKNOWN;
@

