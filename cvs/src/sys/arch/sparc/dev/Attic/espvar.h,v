head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.42
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.38
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.40
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.32
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.36
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.34
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.30
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.28
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.40
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.38
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.36
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.34
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.32
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.30
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.28
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.26
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.24
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.22
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.20
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.01.09.23.41;	author tedu;	state dead;
branches;
next	1.6;
commitid	Q2PxaFNhqAe0Wmla;

1.6
date	2006.06.02.20.00.54;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.08.25.02;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.08.11.05.34.17;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.11.21.13.02.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.17.20.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: espvar.h,v 1.6 2006/06/02 20:00:54 miod Exp $	*/
/*	$NetBSD: espvar.h,v 1.19 1997/02/27 01:16:21 thorpej Exp $	*/

/*
 * Copyright (c) 1997 Jason R. Thorpe.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project
 *	by Jason R. Thorpe.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

struct esp_softc {
	struct ncr53c9x_softc sc_ncr53c9x;	/* glue to MI code */

	struct intrhand sc_ih;			/* intr handler */

	volatile u_char *sc_reg;		/* the registers */
	struct dma_softc *sc_dma;		/* pointer to my dma */

	/* openprom stuff */
	int sc_node;				/* PROM node ID */
	int sc_pri;				/* SBUS priority */
};

#define SAME_ESP(sc, bp, ca) \
	((bp->val[0] == ca->ca_slot && bp->val[1] == ca->ca_offset) || \
	 (bp->val[0] == -1 && bp->val[1] == sc->sc_dev.dv_unit))
@


1.6
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: espvar.h,v 1.5 1997/08/08 08:25:02 downsj Exp $	*/
@


1.5
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a37 1
	struct sbusdev sc_sd;			/* sbus device */
@


1.4
log
@netbsd port, now we merge our changes back in
@
text
@d1 2
a2 1
/*	$NetBSD: espvar.h,v 1.13 1996/05/16 20:31:30 pk Exp $ */
d5 3
a7 1
 * Copyright (c) 1994 Peter Galbavy.  All rights reserved.
d18 2
a19 1
 *	This product includes software developed by Peter Galbavy.
d35 2
a36 57
#define ESP_DEBUG 0

#define FREQTOCCF(freq)	(((freq + 4) / 5))

/* esp revisions */
#define	ESP100		0x01
#define	ESP100A		0x02
#define	ESP200		0x03

#if 0
typedef caddr_t physaddr;

struct esp_dma_seg {
	physaddr	addr;
	long		len;
};
#endif

/*
 * ECB. Holds additional information for each SCSI command Comments: We
 * need a separate scsi command block because we may need to overwrite it
 * with a request sense command.  Basicly, we refrain from fiddling with
 * the scsi_xfer struct (except do the expected updating of return values).
 * We'll generally update: xs->{flags,resid,error,sense,status} and
 * occasionally xs->retries.
 */
struct ecb {
	TAILQ_ENTRY(ecb) chain;
	struct scsi_xfer *xs;	/* SCSI xfer ctrl block from above */
	int		flags;	/* Status */
#define ECB_QNONE	0
#define ECB_QFREE	1
#define ECB_QREADY	2
#define ECB_QNEXUS	3
#define ECB_QBITS	0x07
#define ECB_CHKSENSE	0x08
#define ECB_ABORTED	0x10
#define ECB_SETQ(e, q)	do (e)->flags = ((e)->flags&~ECB_QBITS)|(q); while(0)
	struct scsi_generic cmd;  /* SCSI command block */
	int	 clen;
	char	*daddr;		/* Saved data pointer */
	int	 dleft;		/* Residue */
	u_char 	 stat;		/* SCSI status byte */
#if ESP_DEBUG > 0
	char trace[1000];
#endif
};
#if ESP_DEBUG > 0
#define ECB_TRACE(ecb, msg, a, b) do { \
	const char *f = "[" msg "]"; \
	int n = strlen((ecb)->trace); \
	if (n < (sizeof((ecb)->trace)-100)) \
		sprintf((ecb)->trace + n, f,  a, b); \
} while(0)
#else
#define ECB_TRACE(ecb, msg, a, b)
#endif
a37 63
/*
 * Some info about each (possible) target on the SCSI bus.  This should
 * probably have been a "per target+lunit" structure, but we'll leave it at
 * this for now.  Is there a way to reliably hook it up to sc->fordriver??
 */
struct esp_tinfo {
	int	cmds;		/* #commands processed */
	int	dconns;		/* #disconnects */
	int	touts;		/* #timeouts */
	int	perrs;		/* #parity errors */
	int	senses;		/* #request sense commands sent */
	ushort	lubusy;		/* What local units/subr. are busy? */
	u_char  flags;
#define T_NEED_TO_RESET	0x01	/* Should send a BUS_DEV_RESET */
#define T_NEGOTIATE	0x02	/* (Re)Negotiate synchronous options */
#define T_BUSY		0x04	/* Target is busy, i.e. cmd in progress */
#define T_SYNCMODE	0x08	/* sync mode has been negotiated */
#define T_SYNCHOFF	0x10	/* .. */
#define T_RSELECTOFF	0x20	/* .. */
	u_char  period;		/* Period suggestion */
	u_char  offset;		/* Offset suggestion */
} tinfo_t;

/* Register a linenumber (for debugging) */
#define LOGLINE(p)

#define ESP_SHOWECBS	0x01
#define ESP_SHOWINTS	0x02
#define ESP_SHOWCMDS	0x04
#define ESP_SHOWMISC	0x08
#define ESP_SHOWTRAC	0x10
#define ESP_SHOWSTART	0x20
#define ESP_SHOWPHASE	0x40
#define ESP_SHOWDMA	0x80
#define ESP_SHOWCCMDS	0x100
#define ESP_SHOWMSGS	0x200

#ifdef ESP_DEBUG
extern int esp_debug;
#define ESP_ECBS(str)  do {if (esp_debug & ESP_SHOWECBS) printf str;} while (0)
#define ESP_MISC(str)  do {if (esp_debug & ESP_SHOWMISC) printf str;} while (0)
#define ESP_INTS(str)  do {if (esp_debug & ESP_SHOWINTS) printf str;} while (0)
#define ESP_TRACE(str) do {if (esp_debug & ESP_SHOWTRAC) printf str;} while (0)
#define ESP_CMDS(str)  do {if (esp_debug & ESP_SHOWCMDS) printf str;} while (0)
#define ESP_START(str) do {if (esp_debug & ESP_SHOWSTART) printf str;}while (0)
#define ESP_PHASE(str) do {if (esp_debug & ESP_SHOWPHASE) printf str;}while (0)
#define ESP_DMA(str)   do {if (esp_debug & ESP_SHOWDMA) printf str;}while (0)
#define ESP_MSGS(str)  do {if (esp_debug & ESP_SHOWMSGS) printf str;}while (0)
#else
#define ESP_ECBS(str)
#define ESP_MISC(str)
#define ESP_INTS(str)
#define ESP_TRACE(str)
#define ESP_CMDS(str)
#define ESP_START(str)
#define ESP_PHASE(str)
#define ESP_DMA(str)
#endif

#define ESP_MAX_MSG_LEN 8

struct esp_softc {
	struct device sc_dev;			/* us as a device */
d40 1
a40 2
	struct evcnt sc_intrcnt;		/* intr count */
	struct scsi_link sc_link;		/* scsi lint struct */
d44 1
a44 45
	/* register defaults */
	u_char	sc_cfg1;			/* Config 1 */
	u_char	sc_cfg2;			/* Config 2, not ESP100 */
	u_char	sc_cfg3;			/* Config 3, only ESP200 */
	u_char	sc_ccf;				/* Clock Conversion */
	u_char	sc_timeout;

	/* register copies, see espreadregs() */
	u_char	sc_espintr;
	u_char	sc_espstat;
	u_char	sc_espstep;
	u_char	sc_espfflags;

	/* Lists of command blocks */
	TAILQ_HEAD(ecb_list, ecb) free_list,
				  ready_list,
				  nexus_list;

	struct ecb *sc_nexus;			/* current command */
	struct ecb sc_ecb[8];			/* one per target */
	struct esp_tinfo sc_tinfo[8];

	/* Data about the current nexus (updated for every cmd switch) */
	caddr_t	sc_dp;				/* Current data pointer */
	ssize_t	sc_dleft;			/* Data left to transfer */

	/* Adapter state */
	int	sc_phase;		/* Copy of what bus phase we are in */
	int	sc_prevphase;		/* Copy of what bus phase we were in */
	u_char	sc_state;		/* State applicable to the adapter */
	u_char	sc_flags;
	u_char	sc_selid;
	u_char	sc_lastcmd;

	/* Message stuff */
	u_char	sc_msgpriq;	/* One or more messages to send (encoded) */
	u_char	sc_msgout;	/* What message is on its way out? */
	u_char	sc_omess[ESP_MAX_MSG_LEN];
	caddr_t	sc_omp;	/* Message pointer (for multibyte messages) */
	size_t	sc_omlen;
	u_char	sc_imess[ESP_MAX_MSG_LEN + 1];
	caddr_t	sc_imp;	/* Message pointer (for multibyte messages) */
	size_t	sc_imlen;

	/* hardware/openprom stuff */
a45 1
	int sc_freq;				/* Freq in HZ */
a46 4
	int sc_id;				/* our scsi id */
	int sc_rev;				/* esp revision */
	int sc_minsync;				/* minimum sync period / 4 */
	int sc_maxxfer;				/* maximum transfer size */
a48 84
/*
 * Macros to read and write the chip's registers.
 */
#define	ESP_READ_REG(sc, reg)			\
	((sc)->sc_reg[(reg) * 4])
#define	ESP_WRITE_REG(sc, reg, val)		\
	do {					\
		u_char v = (val);		\
		(sc)->sc_reg[(reg) * 4] = v;	\
	} while (0)

/* values for sc_state */
#define ESP_IDLE	0x01	/* waiting for something to do */
#define ESP_TMP_UNAVAIL	0x02	/* Don't accept SCSI commands */
#define ESP_SELECTING	0x03	/* SCSI command is arbiting  */
#define ESP_RESELECTED	0x04	/* Has been reselected */
#define ESP_HASNEXUS	0x05	/* Actively using the SCSI bus */
#define ESP_CLEANING	0x06
#define ESP_SBR		0x07	/* Expect a SCSI RST because we commanded it */

/* values for sc_flags */
#define ESP_DROP_MSGI	0x01	/* Discard all msgs (parity err detected) */
#define ESP_DOINGDMA	0x02	/* The FIFO data path is active! */
#define ESP_BUSFREE_OK	0x04	/* Bus free phase is OK. */
#define ESP_SYNCHNEGO	0x08	/* Synch negotiation in progress. */
/*#define ESP_BLOCKED	0x10	* Don't schedule new scsi bus operations */
#define ESP_DISCON	0x10	/* Target sent DISCONNECT msg */
#define ESP_ABORTING	0x20	/* Bailing out */
#define ESP_ICCS	0x40	/* Expect status phase results */
#define ESP_WAITI	0x80	/* Waiting for non-DMA data to arrive */

/* values for sc_msgout */
#define SEND_DEV_RESET		0x01
#define SEND_PARITY_ERROR	0x02
#define SEND_ABORT		0x04
#define SEND_REJECT		0x08
#define SEND_INIT_DET_ERR	0x10
#define SEND_IDENTIFY  		0x20
#define SEND_SDTR		0x40

/* SCSI Status codes */
#define ST_GOOD			0x00
#define ST_CHKCOND		0x02
#define ST_CONDMET		0x04
#define ST_BUSY			0x08
#define ST_INTERMED		0x10
#define ST_INTERMED_CONDMET	0x14
#define ST_RESERVATION_CONFLICT	0x18
#define ST_CMD_TERM		0x22
#define ST_QUEUE_FULL		0x28

#define ST_MASK			0x3e /* bit 0,6,7 is reserved */

/* phase bits */
#define IOI			0x01
#define CDI			0x02
#define MSGI			0x04

/* Information transfer phases */
#define DATA_OUT_PHASE		(0)
#define DATA_IN_PHASE		(IOI)
#define COMMAND_PHASE		(CDI)
#define STATUS_PHASE		(CDI|IOI)
#define MESSAGE_OUT_PHASE	(MSGI|CDI)
#define MESSAGE_IN_PHASE	(MSGI|CDI|IOI)

#define PHASE_MASK		(MSGI|CDI|IOI)

/* Some pseudo phases for getphase()*/
#define BUSFREE_PHASE		0x100	/* Re/Selection no longer valid */
#define INVALID_PHASE		0x101	/* Re/Selection valid, but no REQ yet */
#define PSEUDO_PHASE		0x100	/* "pseudo" bit */

#ifdef ESP_DEBUG
#define	ESPCMD(sc, cmd) do {				\
	if (esp_debug & ESP_SHOWCCMDS)			\
		printf("<cmd:0x%x>", (unsigned)cmd);	\
	sc->sc_lastcmd = cmd;				\
	ESP_WRITE_REG(sc, ESP_CMD, cmd);		\
} while (0)
#else
#define	ESPCMD(sc, cmd)		ESP_WRITE_REG(sc, ESP_CMD, cmd)
#endif

a51 1

@


1.3
log
@fix copyrights
@
text
@d1 1
a1 1
/*	$NetBSD: espvar.h,v 1.3 1994/11/20 20:52:12 deraadt Exp $ */
a3 29
 * Copyright (c) 1995 Theo de Raadt
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Theo de Raadt.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
a4 1
 *
d31 1
a31 18
/* esp chip revisions */
#define	ESP100		0
#define	ESP100A		1
#define	ESP200		2

/* Grabbed from Julians SCSI aha-drivers */
#ifdef	DDB
int	Debugger();
#else	DDB
#define	Debugger() panic("should call debugger here (esp.c)")
#endif	DDB

#define ESP_MSGLEN_MAX	8		/* maximum msglen we handle */
#define ESP_SYNC_REQOFF	0		/* offset we request */
#define ESP_SYNC_MAXOFF	15		/* maximum supportable sync offset */
#if ESP_SYNC_REQOFF > ESP_SYNC_MAXOFF
#warning requested sync offset is higher than maximum possible sync offset.
#endif
d35 21
a55 7
/* 
 * ECB. Holds additional information for each SCSI command
 * Comments: We need a separate scsi command block because we may need
 * to overwrite it with a request sense command.  Basically, we refrain
 * from fiddling with the scsi_xfer struct (except do the expected
 * updating of return values). We'll generally update: 
 * xs->{flags,resid,error,sense,status} and occasionally xs->retries.
d59 7
a65 5
	struct	scsi_xfer *xs;		/* SCSI xfer ctrl block from above */
	int	flags;			/* Status */
#define ECB_FREE	0x00
#define ECB_ACTIVE	0x01
#define ECB_DONE	0x04
d67 10
a76 5
	struct	scsi_generic cmd;	/* SCSI command block */
	int	clen;
	caddr_t	daddr;			/* Saved data pointer */
	int	dleft;			/* Residue */
	int	stat;			/* SCSI status byte */
d78 10
d89 3
a91 3
/* 
 * Some info about each (possible) target on the SCSI bus.  This should 
 * probably have been a "per target+lunit" structure, but we'll leave it at 
d95 16
a110 13
	int	cmds;			/* #commands processed */
	int	dconns;			/* #disconnects */
	int	touts;			/* #timeouts */
	int	perrs;			/* #parity errors */
	int	senses;			/* #request sense commands sent */
	u_char	lubusy;			/* What luns are busy? */
	u_char	flags;
#define DO_NEGOTIATE	0x01		/* (re)negotiate synchronous options */
#define TARGET_BUSY	0x02		/* target is busy, i.e. cmd in progress */
	u_char	period;			/* sync period */
	u_char	synctp;			/* sync period translated for SYNCTP */
	u_char	offset;			/* sync offset */
};
d115 10
a124 7
#define ESP_SHOWECBS 0x01
#define ESP_SHOWINTS 0x02
#define ESP_SHOWCMDS 0x04
#define ESP_SHOWMISC 0x08
#define ESP_SHOWTRAC 0x10
#define ESP_SHOWSTART 0x20
#define ESP_SHOWPHASE 0x40
d126 2
a127 1
#if ESP_DEBUG
d135 2
d145 1
d148 2
d151 7
a157 7
	struct	device sc_dev;
	struct	sbusdev sc_sd;			/* sbus device */
	struct	intrhand sc_ih;			/* intr handler */
	struct	evcnt sc_intrcnt;		/* intr count */
	struct	scsi_link sc_link;		/* scsi lint struct */
	struct	espregs *sc_regs;		/* the registers */
	struct	dma_softc *sc_dma;		/* corresponding DMA ctrlr */
d160 4
a163 4
	u_char	sc_cfg1;			/* config 1 */
	u_char	sc_cfg2;			/* config 2, only ESP100A/200 */
	u_char	sc_cfg3;			/* config 3, only ESP200 */
	u_char	sc_ccf;				/* clock conversion */
d166 2
a167 1
	u_char	sc_espintr;			/* copies of registers */
a171 2
	struct	bootpath *sc_bp;		/* current boot path component */

d173 16
a188 13
	TAILQ_HEAD(ecb_list, ecb) free_list, ready_list, nexus_list;

	struct	ecb *sc_nexus;			/* current command */
	struct	ecb sc_ecb[8];			/* one per target */
	struct	esp_tinfo sc_tinfo[8];

	/* data about the current nexus (updated for every cmd switch) */
	caddr_t	sc_dp;				/* current data pointer */
	size_t	sc_dleft;			/* data left to transfer */

	/* adapter state */
	int	sc_phase;		/* bus phase (based on sc_espstat) */
	u_char	sc_state;		/* state applicable to the adapter */
d191 1
d193 5
a197 5
	/* message stuff */
	u_char	sc_msgpriq;	/* messages to send (see SEND_* below) */
	u_char	sc_msgout;	/* message that is on it's way out */
	u_char	sc_omess[ESP_MSGLEN_MAX];
	u_char *sc_omp;		/* message pointer (for multibyte messages) */
d199 2
a200 2
	u_char	sc_imess[ESP_MSGLEN_MAX + 1];
	u_char *sc_imp;		/* message pointer (for multibyte messages) */
d204 7
a210 6
	int	sc_node;			/* PROM node ID */
	int	sc_freq;			/* Freq in HZ */
	int	sc_pri;				/* SBUS priority */
	int	sc_id;				/* our scsi id */
	int	sc_rev;				/* esp revision */
	int	sc_minsync;			/* minimum sync period / 4 */
d213 11
d225 7
a231 11
#define ESPS_IDLE		0x01	/* waiting for something to do */
#define ESPS_EXPECTDISC		0x02	/* a disconnect is going to happen */
#define ESPS_SELECTING		0x03	/* SCSI command is arbiting  */
#define ESPS_RESELECTED		0x04	/* has been reselected */
#define ESPS_NEXUS		0x05	/* actively using the SCSI bus */
#define ESPS_DOINGDMA		0x06	/* doing a DMA transaction */
#define ESPS_DOINGMSGOUT	0x07	/* message-out in progress */
#define ESPS_DOINGMSGIN		0x08	/* message-in in progress */
#define ESPS_DOINGSTATUS	0x09	/* status-in in progress */
#define ESPS_SELECTSTOP		0x0a	/* sent first byte of message.. */
#define ESPS_MULTMSGEND		0x0b	/* done sending multibyte msg */
d234 9
a242 4
#define ESPF_DROP_MSGI	0x01	/* Discard all msgs (parity err detected) */
#define ESPF_MAYDISCON	0x02	/* disconnection allowed */
#define ESPF_DONE	0x04	/* finished transaction */
#define ESPF_SYNCHNEGO	0x08	/* Synch negotiation in progress. */
d253 12
a264 1
#define ST_MASK			0x3e	/* bits 0, 6, and 7 are reserved */
d266 1
a266 1
/* physical phase bits */
d271 1
a271 1
/* values for sc_phase (where information transfer happens) */
d281 20
a300 2
#define TARGETNAME(ecb) \
	((struct device *)(ecb)->xs->sc_link->adapter_softc)->dv_xname
@


1.2
log
@new driver by me
@
text
@d4 29
a33 1
 * Copyright (c) 1995 Theo de Raadt.  All rights reserved.
d45 1
a45 2
 *	This product includes software developed by Peter Galbavy and
 *	Theo de Raadt.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: espvar.h,v 1.5 1995/08/18 10:09:57 pk Exp $ */
d5 2
d17 2
a18 1
 *	This product includes software developed by Peter Galbavy.
d34 4
a37 11
#define ESP_SYNC_REQ_ACK_OFS 	0

#define ESP_DEBUG 0

#define FREQTOCCF(freq)	(((freq + 4) / 5))
#define	ESP_DEF_TIMEOUT 153

/* esp revisions */
#define	ESP100		0x01
#define	ESP100A		0x02
#define	ESP200		0x03
d46 6
a51 1
typedef caddr_t physaddr;
d53 1
a53 9
struct esp_dma_seg {
	physaddr	addr;
	long		len;
};

extern int delaycount;
#define FUDGE(X)	((X)>>1) 	/* get 1 ms spincount */
#define MINIFUDGE(X)	((X)>>4) 	/* get (approx) 125us spincount */
#define NUM_CONCURRENT	7	/* Only one per target for now */
d56 6
a61 6
 * ECB. Holds additional information for each SCSI command Comments: We
 * need a separate scsi command block because we may need to overwrite it
 * with a request sense command.  Basicly, we refrain from fiddling with
 * the scsi_xfer struct (except do the expected updating of return values).
 * We'll generally update: xs->{flags,resid,error,sense,status} and
 * occasionally xs->retries.
d65 2
a66 2
	struct scsi_xfer *xs;	/* SCSI xfer ctrl block from above */
	int		flags;	/* Status */
d71 5
a75 5
	struct scsi_generic cmd;  /* SCSI command block */
	int	 clen;
	char	*daddr;		/* Saved data pointer */
	int	 dleft;		/* Residue */
	u_char 	 stat;		/* SCSI status byte */
d84 13
a96 14
	int	cmds;		/* #commands processed */
	int	dconns;		/* #disconnects */
	int	touts;		/* #timeouts */
	int	perrs;		/* #parity errors */
	int	senses;		/* #request sense commands sent */
	ushort	lubusy;		/* What local units/subr. are busy? */
	u_char  flags;
#define NEED_TO_RESET	0x01	/* Should send a BUS_DEV_RESET */
#define DO_NEGOTIATE	0x02	/* (Re)Negotiate synchronous options */
#define TARGET_BUSY	0x04	/* Target is busy, i.e. cmd in progress */
#define T_XXX		0x08	/* Target is XXX */
	u_char  period;		/* Period suggestion */
	u_char  offset;		/* Offset suggestion */
} tinfo_t;
d101 7
a107 8
#define ESP_SHOWECBS	0x01
#define ESP_SHOWINTS	0x02
#define ESP_SHOWCMDS	0x04
#define ESP_SHOWMISC	0x08
#define ESP_SHOWTRAC	0x10
#define ESP_SHOWSTART	0x20
#define ESP_SHOWPHASE	0x40
#define ESP_SHOWDMA	0x80
d109 1
a109 2
#ifdef ESP_DEBUG
extern int esp_debug;
a116 1
#define ESP_DMA(str)   do {if (esp_debug & ESP_SHOWDMA) printf str;}while (0)
a124 1
#define ESP_DMA(str)
a126 2
#define ESP_MAX_MSG_LEN 8

d128 7
a134 7
	struct device sc_dev;			/* us as a device */
	struct sbusdev sc_sd;			/* sbus device */
	struct intrhand sc_ih;			/* intr handler */
	struct evcnt sc_intrcnt;		/* intr count */
	struct scsi_link sc_link;		/* scsi lint struct */
	volatile caddr_t sc_reg;		/* the registers */
	struct dma_softc *sc_dma;		/* pointer to my dma */
d137 4
a140 4
	u_char	sc_cfg1;			/* Config 1 */
	u_char	sc_cfg2;			/* Config 2, not ESP100 */
	u_char	sc_cfg3;			/* Config 3, only ESP200 */
	u_char	sc_ccf;				/* Clock Conversion */
d143 1
a143 2
	/* register copies, see espreadregs() */
	u_char	sc_espintr;
d148 2
d151 13
a163 16
	TAILQ_HEAD(ecb_list, ecb) free_list,
				  ready_list,
				  nexus_list;

	struct ecb *sc_nexus;			/* current command */
	struct ecb sc_ecb[8];			/* one per target */
	struct esp_tinfo sc_tinfo[8];

	/* Data about the current nexus (updated for every cmd switch) */
	caddr_t	sc_dp;				/* Current data pointer */
	ssize_t	sc_dleft;			/* Data left to transfer */

	/* Adapter state */
	int	sc_phase;		/* Copy of what bus phase we are in */
	int	sc_prevphase;		/* Copy of what bus phase we were in */
	u_char	sc_state;		/* State applicable to the adapter */
d167 5
a171 5
	/* Message stuff */
	char	sc_msgpriq;	/* One or more messages to send (encoded) */
	char	sc_msgout;	/* What message is on its way out? */
	char	sc_omess[ESP_MAX_MSG_LEN];
	caddr_t	sc_omp;	/* Message pointer (for multibyte messages) */
d173 2
a174 2
	char	sc_imess[ESP_MAX_MSG_LEN + 1];
	caddr_t	sc_imp;	/* Message pointer (for multibyte messages) */
d178 6
a183 6
	int sc_node;				/* PROM node ID */
	int sc_freq;				/* Freq in HZ */
	int sc_pri;				/* SBUS priority */
	int sc_id;				/* our scsi id */
	int sc_rev;				/* esp revision */
	int sc_minsync;				/* minimum sync period / 4 */
d187 11
a197 6
#define ESP_IDLE	0x01	/* waiting for something to do */
#define ESP_TMP_UNAVAIL	0x02	/* Don't accept SCSI commands */
#define ESP_SELECTING	0x03	/* SCSI command is arbiting  */
#define ESP_RESELECTED	0x04	/* Has been reselected */
#define ESP_HASNEXUS	0x05	/* Actively using the SCSI bus */
#define ESP_CLEANING	0x06
d200 4
a203 5
#define ESP_DROP_MSGI	0x01	/* Discard all msgs (parity err detected) */
#define ESP_DOINGDMA	0x02	/* The FIFO data path is active! */
#define ESP_BUSFREE_OK	0x04	/* Bus free phase is OK. */
#define ESP_SYNCHNEGO	0x08	/* Synch negotiation in progress. */
#define ESP_BLOCKED	0x10	/* Don't schedule new scsi bus operations */
d214 1
a214 48
/*
 * Generic SCSI messages. For now we reject most of them.
 */
/* Messages (1 byte) */		     /* I/T M(andatory) or (O)ptional */
#define MSG_CMDCOMPLETE		0x00 /* M/M */
#define MSG_EXTENDED		0x01 /* O/O */
#define MSG_SAVEDATAPOINTER	0x02 /* O/O */
#define MSG_RESTOREPOINTERS	0x03 /* O/O */
#define MSG_DISCONNECT		0x04 /* O/O */
#define MSG_INITIATOR_DET_ERR	0x05 /* M/M */
#define MSG_ABORT		0x06 /* O/M */
#define MSG_MESSAGE_REJECT	0x07 /* M/M */
#define MSG_NOOP		0x08 /* M/M */
#define MSG_PARITY_ERR		0x09 /* M/M */
#define MSG_LINK_CMD_COMPLETE	0x0a /* O/O */
#define MSG_LINK_CMD_COMPLETEF	0x0b /* O/O */
#define MSG_BUS_DEV_RESET	0x0c /* O/M */
#define MSG_ABORT_TAG		0x0d /* O/O */
#define MSG_CLEAR_QUEUE		0x0e /* O/O */
#define MSG_INIT_RECOVERY	0x0f /* O/O */
#define MSG_REL_RECOVERY	0x10 /* O/O */
#define MSG_TERM_IO_PROC	0x11 /* O/O */

/* Messages (2 byte) */
#define MSG_SIMPLE_Q_TAG	0x20 /* O/O */
#define MSG_HEAD_OF_Q_TAG	0x21 /* O/O */
#define MSG_ORDERED_Q_TAG	0x22 /* O/O */
#define MSG_IGN_WIDE_RESIDUE	0x23 /* O/O */

/* Identify message */
#define ESP_MSG_IDENTIFY(lun)	(0x80|(lun & 0x7))	/* XXX 0xc0=selection on */
#define ESP_MSG_ISIDENT(m)	((m) & 0x80)

/* Extended messages (opcode) */
#define MSG_EXT_SDTR		0x01

/* SCSI Status codes */
#define ST_GOOD			0x00
#define ST_CHKCOND		0x02
#define ST_CONDMET		0x04
#define ST_BUSY			0x08
#define ST_INTERMED		0x10
#define ST_INTERMED_CONDMET	0x14
#define ST_RESERVATION_CONFLICT	0x18
#define ST_CMD_TERM		0x22
#define ST_QUEUE_FULL		0x28

#define ST_MASK			0x3e /* bit 0,6,7 is reserved */
d216 1
a216 1
/* phase bits */
d221 1
a221 1
/* Information transfer phases */
a230 15
/* Some pseudo phases for getphase()*/
#define BUSFREE_PHASE		0x100	/* Re/Selection no longer valid */
#define INVALID_PHASE		0x101	/* Re/Selection valid, but no REQ yet */
#define PSEUDO_PHASE		0x100	/* "pseudo" bit */

#if ESP_DEBUG > 1
#define	ESPCMD(sc, cmd)		printf("cmd:0x%02x ", sc->sc_reg[ESP_CMD] = cmd)
#else
#define	ESPCMD(sc, cmd)		sc->sc_reg[ESP_CMD] = cmd
#endif

#define SAME_ESP(sc, bp, ca) \
	((bp->val[0] == ca->ca_slot && bp->val[1] == ca->ca_offset) || \
	 (bp->val[0] == -1 && bp->val[1] == sc->sc_dev.dv_unit))

d232 1
a232 13
	((struct device *)ecb->xs->sc_link->adapter_softc)->dv_xname

/* DMA macros for ESP */
#define	DMA_ENINTR(r)		((r->enintr)(r))
#define	DMA_ISINTR(r)		((r->isintr)(r))
#define	DMA_RESET(r)		((r->reset)(r))
#define	DMA_START(a, b, c, d)	((a->start)(a, b, c, d))
#define	DMA_INTR(r)		((r->intr)(r))

#define DMA_DRAIN(sc)	if (sc->sc_rev < DMAREV_2) { \
				DMACSR(sc) |= D_DRAIN; \
				DMAWAIT1(sc); \
			}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
