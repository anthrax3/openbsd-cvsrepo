head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.48
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.44
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.46
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.38
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.36
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.34
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.32
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.30
	OPENBSD_5_0:1.4.0.28
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.26
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.24
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.20
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.3
	UBC:1.1.0.22
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.01.09.23.41;	author tedu;	state dead;
branches;
next	1.4;
commitid	Q2PxaFNhqAe0Wmla;

1.4
date	2005.03.15.18.50.43;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.21.20.27.35;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.12.10.44.03;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	97.08.08.08.24.49;	author downsj;	state Exp;
branches
	1.1.12.1
	1.1.22.1;
next	;

1.1.12.1
date	2003.03.27.23.49.25;	author niklas;	state Exp;
branches;
next	;

1.1.22.1
date	2002.10.29.00.28.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: cgfourteenreg.h,v 1.4 2005/03/15 18:50:43 miod Exp $	*/
/*	$NetBSD: cgfourteenreg.h,v 1.1 1996/09/30 22:41:02 abrown Exp $ */

/*
 * Copyright (c) 1996
 *	The President and Fellows of Harvard College. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Harvard University and
 *	its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Register/dac/clut/cursor definitions for cgfourteen frame buffer
 */

/* Control registers */
#define	CG14_REG_CONTROL	0
#define	CG14_REG_VRAM		1

#define	CG14_NREG		2

/* Locations of control registers in cg14 register set */
#define	CG14_OFFSET_CURS	0x1000
#define CG14_OFFSET_DAC		0x2000
#define CG14_OFFSET_XLUT	0x3000
#define CG14_OFFSET_CLUT1	0x4000
#define CG14_OFFSET_CLUT2	0x5000
#define CG14_OFFSET_CLUT3	0x6000
#define CG14_OFFSET_AUTOINCR	0xf000

/* Main control register set */
struct cg14ctl {
	volatile u_int8_t	ctl_mctl;	/* main control register */
#define CG14_MCTL_ENABLEINTR	0x80		/* interrupts */
#define CG14_MCTL_R0_ENABLEHW	0x40		/* hardware enable */
#define	CG14_MCTL_R1_ENABLEHW	0x01
#define	CG14_MCTL_R1_ENABLEVID	0x40		/* display enable */
#define CG14_MCTL_PIXMODE_MASK	0x30
#define		CG14_MCTL_PIXMODE_8	0x00	/* data is 16 8-bit pixels */
#define		CG14_MCTL_PIXMODE_16	0x20	/* data is 8 16-bit pixels */
#define		CG14_MCTL_PIXMODE_32	0x30	/* data is 4 32-bit pixels */
#define CG14_MCTL_PIXMODE_SHIFT	4
#define	CG14_MCTL_TMR		0x0c
#define CG14_MCTL_ENABLETMR	0x02
#define CG14_MCTL_R0_RESET	0x01
	volatile u_int8_t	ctl_ppr;	/* packed pixel register */
	volatile u_int8_t	ctl_tmsr0; 	/* test status reg. 0 */
	volatile u_int8_t	ctl_tmsr1;	/* test status reg. 1 */
	volatile u_int8_t	ctl_msr;	/* master status register */
#define	CG14_MSR_PENDING	0x20		/* interrupt pending */
#define	CG14_MSR_VRETRACE	0x10		/* vertical retrace interrupt */
#define	CG14_MSR_FAULT		0x01		/* fault interrupt */
	volatile u_int8_t	ctl_fsr;	/* fault status register */
	volatile u_int8_t	ctl_rsr;	/* revision status register */
#define CG14_RSR_REVMASK	0xf0 		/*  mask to get revision */
#define CG14_RSR_REVSHIFT	4
#define CG14_RSR_IMPLMASK	0x0f		/*  mask to get impl. code */
	volatile u_int8_t	ctl_ccr;	/* clock control register */
	/* XXX etc. */
};

/* Hardware cursor map */
#define CG14_CURS_SIZE		32
#define	CG14_CURS_MASK		0x1f
struct cg14curs {
	volatile u_int32_t	curs_plane0[CG14_CURS_SIZE];	/* plane 0 */
	volatile u_int32_t	curs_plane1[CG14_CURS_SIZE];
	volatile u_int8_t	curs_ctl;	/* control register */
#define CG14_CURS_ENABLE	0x4
#define CG14_CURS_DOUBLEBUFFER	0x2 		/* use X-channel for curs */
	volatile u_int8_t	pad0[3];
	volatile u_int16_t	curs_x;		/* x position */
	volatile u_int16_t	curs_y;		/* y position */
	volatile u_int32_t	curs_color1;	/* color register 1 */
	volatile u_int32_t	curs_color2;	/* color register 2 */
	volatile u_int32_t	pad[444];	/* pad to 2KB boundary */
	volatile u_int32_t	curs_plane0incr[CG14_CURS_SIZE]; /* autoincr */
	volatile u_int32_t	curs_plane1incr[CG14_CURS_SIZE]; /* autoincr */
};

/* DAC */
struct cg14dac {
	volatile u_int8_t	dac_addr;	/* address register */
	volatile u_int8_t	pad0[255];
	volatile u_int8_t	dac_gammalut;	/* gamma LUT */
	volatile u_int8_t	pad1[255];
	volatile u_int8_t	dac_regsel;	/* register select */
	volatile u_int8_t	pad2[255];
	volatile u_int8_t	dac_mode;	/* mode register */
};

#define CG14_CLUT_SIZE	256

/* XLUT registers */
struct cg14xlut {
	volatile u_int8_t	xlut_lut[CG14_CLUT_SIZE];	/* the LUT */
	volatile u_int8_t	xlut_lutd[CG14_CLUT_SIZE];	/* ??? */
	volatile u_int8_t	pad0[0x600];
	volatile u_int8_t	xlut_lutinc[CG14_CLUT_SIZE];	/* autoincrLUT*/
	volatile u_int8_t	xlut_lutincd[CG14_CLUT_SIZE];
};

/* Color Look-Up Table (CLUT) */
struct cg14clut {
	volatile u_int32_t	clut_lut[CG14_CLUT_SIZE];	/* the LUT */
	volatile u_int32_t	clut_lutd[CG14_CLUT_SIZE];	/* ??? */
	volatile u_int32_t	clut_lutinc[CG14_CLUT_SIZE];	/* autoincr */
	volatile u_int32_t	clut_lutincd[CG14_CLUT_SIZE];
};
@


1.4
log
@A potpourri of cgfourteen fixes and improvements:
- use the autoincremented luts for faster colormap programming.
- colormap changes are now deferred to the vertical retrace interrupt, causes
  less display flickering under X11 (still some visible at boot time because
  interrupts are disabled at this point).
- if the resolution choosen does not allow the VSIMM to run in 32bit mode,
  do not allow mmap()ing past the frame buffer area.
- print the VSIMM revision at boot time, and be more friendly to revision 0,
  which needs to be handled in a slightly different way.
@
text
@d1 1
a1 1
/*	$OpenBSD: cgfourteenreg.h,v 1.3 2002/08/21 20:27:35 miod Exp $	*/
@


1.3
log
@Correctly map the video memory, for proper operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: cgfourteenreg.h,v 1.2 2002/08/12 10:44:03 miod Exp $	*/
d54 1
a54 1
#define CG14_OFFSET_CLUTINCR	0xf000
d60 3
a62 1
#define CG14_MCTL_ENABLEVID	0x40		/* enable video */
d70 1
a70 3
#define CG14_MCTL_rev0RESET	0x01
#define CG14_MCTL_POWERCTL	0x01

d75 3
d81 1
d89 1
a133 29
};

/*
 * Layout of cg14 hardware colormap
 */
union cg14cmap {
	u_char  	cm_map[256][4];	/* 256 R/G/B/A entries (B is high)*/
	u_int32_t   	cm_chip[256];	/* the way the chip gets loaded */
};

/*
 * cg14 hardware cursor colormap
 */
union cg14cursor_cmap {		/* colormap, like bt_cmap, but tiny */
	u_char		cm_map[2][4];	/* 2 R/G/B/A entries */
	u_int32_t	cm_chip[2];	/* 2 chip equivalents */
};

/*
 * cg14 hardware cursor status
 */
struct cg14_cursor {		/* cg14 hardware cursor status */
	short	cc_enable;		/* cursor is enabled */
	struct	wsdisplay_curpos cc_pos;	/* position */
	struct	wsdisplay_curpos cc_hot;	/* hot-spot */
	struct	wsdisplay_curpos cc_size;	/* size of mask & image fields */
	u_int	cc_eplane[32];		/* enable plane */
	u_int	cc_cplane[32];		/* color plane */
	union	cg14cursor_cmap cc_color; /* cursor colormap */
@


1.2
log
@Convert sparc console code from rcons and pseudo-devices to rasops and wscons.
For most framebuffers it is faster.

Other changes include:
o 24 bit support in tcx(4) for the S24 framebuffer
o accelerated cgsix(4) text console
o new cgtwelve(4) driver for the GS framebuffer
o improved serial driver code
o better keyboard support

The following framebuffers have not been tested but should work: cgfour,
cgeight and cgfourteen

These changes will require XF4 changes, to use Xwsfb instead of Xsun*, to be
commited later today.

Most of the work by me during the LSM and the week after, with code borrowed
from jason@@, NetBSD (new serial code), and feedback from mickey@@. Work on
pnozz(4) done by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cgfourteenreg.h,v 1.1 1997/08/08 08:24:49 downsj Exp $	*/
d40 6
@


1.1
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 1
a5 1
 * Copyright (c) 1996 
d55 1
a55 1
#define CG14_MCTL_PIXMODE_MASK	0x30		      
d123 29
@


1.1.12.1
log
@Sync the SMP branch with 3.3
@
text
@d5 1
a5 1
 * Copyright (c) 1996
a40 6
/* Control registers */
#define	CG14_REG_CONTROL	0
#define	CG14_REG_VRAM		1

#define	CG14_NREG		2

d55 1
a55 1
#define CG14_MCTL_PIXMODE_MASK	0x30
a122 29
};

/*
 * Layout of cg14 hardware colormap
 */
union cg14cmap {
	u_char  	cm_map[256][4];	/* 256 R/G/B/A entries (B is high)*/
	u_int32_t   	cm_chip[256];	/* the way the chip gets loaded */
};

/*
 * cg14 hardware cursor colormap
 */
union cg14cursor_cmap {		/* colormap, like bt_cmap, but tiny */
	u_char		cm_map[2][4];	/* 2 R/G/B/A entries */
	u_int32_t	cm_chip[2];	/* 2 chip equivalents */
};

/*
 * cg14 hardware cursor status
 */
struct cg14_cursor {		/* cg14 hardware cursor status */
	short	cc_enable;		/* cursor is enabled */
	struct	wsdisplay_curpos cc_pos;	/* position */
	struct	wsdisplay_curpos cc_hot;	/* hot-spot */
	struct	wsdisplay_curpos cc_size;	/* size of mask & image fields */
	u_int	cc_eplane[32];		/* enable plane */
	u_int	cc_cplane[32];		/* color plane */
	union	cg14cursor_cmap cc_color; /* cursor colormap */
@


1.1.22.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cgfourteenreg.h,v 1.1 1997/08/08 08:24:49 downsj Exp $	*/
d5 1
a5 1
 * Copyright (c) 1996
a40 6
/* Control registers */
#define	CG14_REG_CONTROL	0
#define	CG14_REG_VRAM		1

#define	CG14_NREG		2

d55 1
a55 1
#define CG14_MCTL_PIXMODE_MASK	0x30
a122 29
};

/*
 * Layout of cg14 hardware colormap
 */
union cg14cmap {
	u_char  	cm_map[256][4];	/* 256 R/G/B/A entries (B is high)*/
	u_int32_t   	cm_chip[256];	/* the way the chip gets loaded */
};

/*
 * cg14 hardware cursor colormap
 */
union cg14cursor_cmap {		/* colormap, like bt_cmap, but tiny */
	u_char		cm_map[2][4];	/* 2 R/G/B/A entries */
	u_int32_t	cm_chip[2];	/* 2 chip equivalents */
};

/*
 * cg14 hardware cursor status
 */
struct cg14_cursor {		/* cg14 hardware cursor status */
	short	cc_enable;		/* cursor is enabled */
	struct	wsdisplay_curpos cc_pos;	/* position */
	struct	wsdisplay_curpos cc_hot;	/* hot-spot */
	struct	wsdisplay_curpos cc_size;	/* size of mask & image fields */
	u_int	cc_eplane[32];		/* enable plane */
	u_int	cc_cplane[32];		/* color plane */
	union	cg14cursor_cmap cc_color; /* cursor colormap */
@


