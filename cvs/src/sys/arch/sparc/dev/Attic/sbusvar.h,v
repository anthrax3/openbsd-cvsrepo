head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.6
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.9.0.28
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.32
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.30
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.26
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.24
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.22
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.16
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.14
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.6
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.09.01.09.23.42;	author tedu;	state dead;
branches;
next	1.11;
commitid	Q2PxaFNhqAe0Wmla;

1.11
date	2015.03.30.20.30.22;	author miod;	state Exp;
branches;
next	1.10;
commitid	f66FukLLgPJs9j5H;

1.10
date	2015.03.21.19.55.31;	author miod;	state Exp;
branches;
next	1.9;
commitid	OfcnEu8uBAPP2zIO;

1.9
date	2007.05.29.09.54.17;	author sobrado;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.02.20.00.54;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.27.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.11.11.00.26.01;	author jason;	state Exp;
branches
	1.5.6.1
	1.5.16.1;
next	1.4;

1.4
date	97.08.08.08.25.28;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.08.11.05.34.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.17.08.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.40;	author deraadt;	state Exp;
branches;
next	;

1.5.6.1
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.06.07.11.14.43;	author ho;	state Exp;
branches;
next	;

1.5.16.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: sbusvar.h,v 1.11 2015/03/30 20:30:22 miod Exp $	*/
/*	$NetBSD: sbusvar.h,v 1.4 1996/04/22 02:35:05 abrown Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sbusvar.h	8.1 (Berkeley) 6/11/93
 */

/*
 * SBus variables.
 */

/* variables per SBus */
struct sbus_softc {
	struct	device	sc_dev;		/* base device */
	int		sc_clockfreq;	/* clock frequency (in Hz) */
	struct	rom_range *sc_range;
	int		sc_nrange;
	int		sc_burst;	/* burst transfer sizes supported */
	int		sc_slave_only;
};

int	sbus_translate(struct device *, struct confargs *);
int	sbus_testdma(struct sbus_softc *, struct confargs *);
@


1.11
log
@Add a bus_dma_tag_t for DVMA usage, suitable for use for devices not sitting
behind a sun4m iommu.

Move the existing dvma routines from vm_machdep.c to this new dvma.c; this
allows for a few declarations to be removed from public headers.

Extend the device attachment arguments (struct confargs) to pass a
bus_dma_tag_t. mainbus receives the dvma bus_dma_tag_t, and devices pass the
tag unchanged to their children, except for iommu(4) which replaces it with
its own.

Change the few sun4m-only drivers to pick the bus_dma_tag_t from confargs
rather than assume iommu; this allows qlw(4) to attach and work on sun4c.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.10 2015/03/21 19:55:31 miod Exp $	*/
@


1.10
log
@When an IOMMU is not available, and an sbus board has register ranges not
reachable with the default slot aperture (such as hme(4) devices, which have
their registers at offset 0x08c00000 from the slot base), force the attachment
of the device to fail.

While hme would fail early due to being unable to talk on the mdio bus, hme+esp
boards would have the esp part of the board get nuts and would spin during
autoconf. Of course, you are not supposed to use such boards on sun4c, because
(as mentioned above) they can't run without an iommu.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.9 2007/05/29 09:54:17 sobrado Exp $	*/
d45 1
a45 1
 * S-bus variables.
a47 9
/*
 * SBus driver attach arguments.
 */
struct sbus_attach_args {
	struct	romaux sa_ra;		/* name, node, addr, etc */
	int	sa_slot;		/* SBus slot number */
	int	sa_offset;		/* offset within slot */
};

d50 2
a51 2
	struct	device sc_dev;		/* base device */
	int	sc_clockfreq;		/* clock frequency (in Hz) */
d53 3
a55 2
	int	sc_nrange;
	int	sc_burst;		/* burst transfer sizes supported */
@


1.9
log
@use the right capitalization for `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.8 2006/06/02 20:00:54 miod Exp $	*/
d66 1
a66 1
void	sbus_translate(struct device *, struct confargs *);
@


1.8
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.7 2003/06/02 23:27:54 millert Exp $	*/
d49 1
a49 1
 * Sbus driver attach arguments.
d53 1
a53 1
	int	sa_slot;		/* Sbus slot number */
d57 1
a57 1
/* variables per Sbus */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.6 2002/03/14 01:26:43 millert Exp $	*/
a46 5
struct sbusdev {
	struct	device *sd_dev;		/* backpointer to generic */
	struct	sbusdev *sd_bchain;	/* forward link in bus chain */
	void	(*sd_reset)(struct device *);
};
a60 1
	struct	sbusdev *sc_sbdev;	/* list of all children */
a65 2
int	sbusdev_match(struct cfdata *, void *);
void	sbus_establish(struct sbusdev *, struct device *);
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.5 1998/11/11 00:26:01 jason Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@Detect cards that require dma that are in non-dma slots and don't allow
them to be attach'd.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.4 1997/08/08 08:25:28 downsj Exp $	*/
d54 1
a54 1
	void	(*sd_reset) __P((struct device *));
d76 4
a79 4
int	sbusdev_match __P((struct cfdata *, void *));
void	sbus_establish __P((struct sbusdev *, struct device *));
void	sbus_translate __P((struct device *, struct confargs *));
int	sbus_testdma __P((struct sbus_softc *, struct confargs *));
@


1.5.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.5 1998/11/11 00:26:01 jason Exp $	*/
d54 1
a54 1
	void	(*sd_reset)(struct device *);
d76 4
a79 4
int	sbusdev_match(struct cfdata *, void *);
void	sbus_establish(struct sbusdev *, struct device *);
void	sbus_translate(struct device *, struct confargs *);
int	sbus_testdma(struct sbus_softc *, struct confargs *);
@


1.5.6.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
	void	(*sd_reset)(struct device *);
d76 4
a79 4
int	sbusdev_match(struct cfdata *, void *);
void	sbus_establish(struct sbusdev *, struct device *);
void	sbus_translate(struct device *, struct confargs *);
int	sbus_testdma(struct sbus_softc *, struct confargs *);
@


1.5.6.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.5.6.1 2002/03/28 10:57:10 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d79 1
@


1.3
log
@netbsd port, now we merge our changes back in
@
text
@d1 1
@


1.2
log
@+ sbus_slavecheck()
@
text
@d1 1
a1 1
/*	$NetBSD: sbusvar.h,v 1.2 1994/11/20 20:52:27 deraadt Exp $ */
d70 3
d77 1
a77 1
int	sbus_slavecheck __P((struct device *self, struct confargs *ca));
@


1.1
log
@Initial revision
@
text
@d74 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
