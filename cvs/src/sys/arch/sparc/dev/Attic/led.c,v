head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.26
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.22
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.24
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.16
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.20
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.18
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.14
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.12
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.10
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.8
	OPENBSD_5_0:1.13.0.6
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.4
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.12.0.14
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.6
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2016.09.01.09.23.42;	author tedu;	state dead;
branches;
next	1.13;
commitid	Q2PxaFNhqAe0Wmla;

1.13
date	2010.07.10.19.32.24;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.01.18.09.40;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.04.12.38.58;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.18.40.59;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.11.21.33.42;	author miod;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.06.10.16.54.42;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.30.03.55.10;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	99.03.01.04.56.05;	author jason;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	98.09.15.04.27.08;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	98.05.22.03.10.31;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	98.03.26.07.04.30;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.54.56;	author jason;	state Exp;
branches;
next	;

1.5.6.1
date	2001.05.14.21.37.07;	author niklas;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2001.07.04.10.23.26;	author niklas;	state Exp;
branches;
next	1.5.6.3;

1.5.6.3
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.5.6.4;

1.5.6.4
date	2003.06.07.11.14.43;	author ho;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Celebrate OpenBSD 6.0 release by retiring the sparc port.
You've served us well, good friend, but now it's time to rest.
ok deraadt
@
text
@/*	$OpenBSD: led.c,v 1.13 2010/07/10 19:32:24 miod Exp $	*/

/*
 * Copyright (c) 1998 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for leds on the sun4, sun4e, and 4/600 (sun4m) systems.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/timeout.h>

#include <machine/autoconf.h>
#include <machine/ctlreg.h>
#include <machine/vmparam.h>
#include <sparc/sparc/asm.h>
#include <sparc/cpu.h>
#include <sparc/sparc/auxioreg.h>
#include <sparc/sparc/cpuvar.h>
#include <sparc/dev/led.h>

int	ledmatch(struct device *, void *, void *);
void	ledattach(struct device *, struct device *, void *);
void	led_cycle(void *);

struct cfattach led_ca = {
	sizeof (struct led_softc), ledmatch, ledattach
};

struct cfdriver led_cd = {
	NULL, "led", DV_DULL
};

static u_int8_t led_pattern[] = {
	0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f,
	0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd,
};

struct led_softc *led_sc = NULL;
extern int sparc_led_blink;	/* from machdep */

int
ledmatch(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
#if defined(SUN4) || defined(SUN4E)
	struct cfdata *cf = vcf;
#endif
#if defined(SUN4) || defined(SUN4E) || defined(SUN4M)
	struct confargs *ca = aux;
	register struct romaux *ra = &ca->ca_ra;

#if defined(SUN4M)
	if (ca->ca_bustype == BUS_OBIO) {
		if (strcmp("leds", ra->ra_name))
			return (0);
		return (1);
	}
#endif /* SUN4M */

#if defined(SUN4) || defined(SUN4E)
	if (ca->ca_bustype == BUS_MAIN) {
		if (strcmp(cf->cf_driver->cd_name, ra->ra_name))
			return (0);
		if (CPU_ISSUN4OR4E)
			return (1);
		return (0);
	}
#endif /* SUN4 || SUN4E*/
#endif /* SUN4 || SUN4E || SUN4M */

	return (0);
}

void    
ledattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct confargs *ca = aux;
	struct led_softc *sc = (struct led_softc *)self;

	sc->sc_node = ca->ca_ra.ra_node;

	timeout_set(&sc->sc_to, led_cycle, sc);

	if (CPU_ISSUN4M)
		sc->sc_reg = mapiodev(&(ca->ca_ra.ra_reg[0]), 0,
		    ca->ca_ra.ra_reg[0].rr_len);

	led_sc = sc;
	if (sparc_led_blink)
		led_cycle(sc);
	printf("\n");
}

void
led_cycle(v)
	void *v;
{
	struct led_softc *sc = v;
	int s;

	if (sc == NULL)
		return;

	sc->sc_index = (sc->sc_index + 1) %
			(sizeof(led_pattern)/sizeof(led_pattern[0]));

	if (sparc_led_blink == 0)
		sc->sc_index = 0;

	s = splhigh();
	switch (cputyp) {
	default:
#if defined(SUN4M)
	case CPU_SUN4M:
		(*sc->sc_reg) = led_pattern[sc->sc_index] | 0xff00;
		break;
#endif
#if defined(SUN4E)
	case CPU_SUN4E:
		*(volatile u_char *)(AUXREG_VA) = led_pattern[sc->sc_index];
		break;
#endif
#if defined(SUN4)
	case CPU_SUN4:
		stba(AC_DIAG_REG, ASI_CONTROL, led_pattern[sc->sc_index]);
		break;
#endif
	}
	splx(s);

	if (sparc_led_blink != 0) {
		s = (((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 3));
		timeout_add(&sc->sc_to, s);
	}
}
@


1.13
log
@sun4e (i.e. SPARCengine 1e) support. This platform is a mix between sun4 and
sun4c, as it has a sun4c OpenPROM but a sun4 8KB pagesize. VME devices are
not supported yet.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.12 2006/08/01 18:09:40 deraadt Exp $	*/
@


1.12
log
@make this more like a real cylon mode (no pauses at the end!)
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.11 2006/03/04 12:38:58 miod Exp $	*/
d30 1
a30 1
 * Driver for leds on the 4/100, 4/200, 4/300, and 4/600. (sun4 & sun4m)
d45 1
d48 1
d77 1
a77 1
#if defined(SUN4)
d80 1
a80 1
#if defined(SUN4) || defined(SUN4M)
d92 1
a92 1
#if defined(SUN4)
d96 1
a96 1
		if (CPU_ISSUN4)
d100 2
a101 2
#endif /* SUN4 */
#endif /* SUN4 || SUN4M */
d144 3
d148 1
a148 2
	if (CPU_ISSUN4M) {
		s = splhigh();
d150 6
a155 2
		splx(s);
	}
a156 1

d158 1
a158 2
	if (CPU_ISSUN4) {
		s = splhigh();
d160 2
a161 1
		splx(s);
d163 1
a163 1
#endif
@


1.11
log
@These devices are DV_DULL, not DV_IFNET... not that it really matters.
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.10 2003/06/02 18:40:59 jason Exp $	*/
d63 2
a64 2
	0xff, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f,
	0xff, 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe,
@


1.10
log
@nuke my clause 3 & 4 (and a couple jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.9 2002/03/14 01:26:43 millert Exp $	*/
d59 1
a59 1
	NULL, "led", DV_IFNET
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.8 2001/06/11 21:33:42 miod Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@Repair SUN4M-only case compilation...
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.7 2001/06/10 16:54:42 jason Exp $	*/
d55 3
a57 3
int	ledmatch	__P((struct device *, void *, void *));
void	ledattach	__P((struct device *, struct device *, void *));
void	led_cycle	__P((void *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.8 2001/06/11 21:33:42 miod Exp $	*/
d55 3
a57 3
int	ledmatch(struct device *, void *, void *);
void	ledattach(struct device *, struct device *, void *);
void	led_cycle(void *);
@


1.7
log
@permit compilation when only SUN4C is defined; based on patch from Thomas Coffy <coffy@@altern.org>.
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.6 2001/01/30 03:55:10 jason Exp $	*/
d80 3
a83 1
	struct cfdata *cf = vcf;
@


1.6
log
@new timeouts
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.5 1999/03/01 04:56:05 jason Exp $	*/
d80 1
a80 1
#if defined(SUN4)
a81 1
#endif
d91 1
a91 1
#endif
d101 2
a102 1
#endif
@


1.5
log
@led driver support for 4/[1236]00 machines
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.4 1998/09/15 04:27:08 jason Exp $	*/
d46 1
d117 2
d163 1
a163 1
		timeout(led_cycle, sc, s);
@


1.5.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.6 2001/01/30 03:55:10 jason Exp $	*/
a45 1
#include <sys/timeout.h>
a115 2
	timeout_set(&sc->sc_to, led_cycle, sc);

d160 1
a160 1
		timeout_add(&sc->sc_to, s);
@


1.5.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.5.6.1 2001/05/14 21:37:07 niklas Exp $	*/
a82 1
#if defined(SUN4) || defined(SUN4M)
d92 1
a92 1
#endif /* SUN4M */
d102 1
a102 2
#endif /* SUN4 */
#endif /* SUN4 || SUN4M */
@


1.5.6.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 3
a57 3
int	ledmatch(struct device *, void *, void *);
void	ledattach(struct device *, struct device *, void *);
void	led_cycle(void *);
@


1.5.6.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.5.6.3 2002/03/28 10:57:10 niklas Exp $	*/
d15 5
@


1.4
log
@Call sun4 led blinker, not 4c led blinker if setup pre-initialized.
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.3 1998/05/22 03:10:31 jason Exp $	*/
d34 4
d39 5
d45 1
a45 2
#include <sys/kernel.h>
#include <sys/systm.h>
d50 2
d54 3
a56 7
/*
 * This is the driver for the "led" register available on some Sun4
 * machines.
 */

static int ledmatch __P((struct device *, void *, void *));
static void ledattach __P((struct device *, struct device *, void *));
d59 1
a59 1
	sizeof(struct device), ledmatch, ledattach
d63 1
a63 1
	NULL, "led", DV_DULL
d66 4
a69 1
extern int sparc_led_blink;     /* from machdep */
d71 2
a72 10
static char led_attached = 0;
static int led_index = 0;
/*
 * These led patterns produce a line that scrolls across the display, then
 * back again.  Note that a value of 0 for a particular bit lights the
 * corresponding LED, and 1 leaves it dark.
 */
static char led_patterns[] =
	{ 0xff, 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe,
	  0xff, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, };
d74 1
a74 1
static int
d77 1
a77 1
	void *aux, *vcf;
d79 23
a101 1
	register struct confargs *ca = aux;
a102 2
	if (CPU_ISSUN4)
		return (strcmp("led", ca->ca_ra.ra_name) == 0);
d106 1
a106 2
/* ARGSUSED */
static void
d111 8
a118 2
	led_attached = 1;
	printf("\n");
d120 1
a120 1
	/* In case it's initialized to true... */
d122 2
a123 1
		led_sun4_cycle((caddr_t)0);
a125 5
/*
 * Check to see whether we were configured and whether machdep.led_blink != 0.
 * If so, put a new pattern into the register and schedule ourselves to
 * be called again later.  The timeout is set to: [(1/8) * loadavg] seconds.
 */
d127 2
a128 2
led_sun4_cycle(zero)
	void *zero;
d130 1
d133 1
a133 1
	if (!sparc_led_blink || !led_attached)
d135 27
a161 6
	led_index = (led_index + 1) % sizeof(led_patterns);
	s = splhigh();
	stba(AC_DIAG_REG, ASI_CONTROL, led_patterns[led_index]);
	splx(s);
	s = (((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 3));
	timeout(led_sun4_cycle, (caddr_t)0, s);
@


1.3
log
@Start the timeout's if sparc_led_blink is initialized to true
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.2 1998/03/26 07:04:30 jason Exp $	*/
d96 1
a96 1
		led_blink((caddr_t)0);
@


1.2
log
@fix Id; add comments
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 4
@


1.1
log
@Driver for the 8 leds on the back of sun4 machines.
@
text
@d1 1
a1 1
/*	$Id$	*/
d17 1
a17 1
 *	This product includes software developed by Jason Wright
d64 5
d96 3
a98 4
 * led_sun4_cycle:
 *	check to see whether we were configured and whether
 *	machdep.led_blink != 0, if so, put a new pattern into
 *	the register.
@

