head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.20
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.18
	OPENBSD_2_8:1.6.0.16
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.14
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.12
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2002.08.12.10.44.04;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.16;	author miod;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	97.08.08.08.25.20;	author downsj;	state Exp;
branches
	1.6.12.1;
next	1.5;

1.5
date	95.12.15.13.56.26;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	95.11.09.21.26.13;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.11.06.21.34.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.24.10.16.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.14.27.36;	author deraadt;	state Exp;
branches;
next	;

1.6.12.1
date	2001.11.13.21.04.17;	author niklas;	state Exp;
branches;
next	1.6.12.2;

1.6.12.2
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	1.6.12.3;

1.6.12.3
date	2003.03.27.23.49.25;	author niklas;	state dead;
branches;
next	;

1.7.2.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.10.29.00.28.09;	author art;	state dead;
branches;
next	;


desc
@@


1.9
log
@Convert sparc console code from rcons and pseudo-devices to rasops and wscons.
For most framebuffers it is faster.

Other changes include:
o 24 bit support in tcx(4) for the S24 framebuffer
o accelerated cgsix(4) text console
o new cgtwelve(4) driver for the GS framebuffer
o improved serial driver code
o better keyboard support

The following framebuffers have not been tested but should work: cgfour,
cgeight and cgfourteen

These changes will require XF4 changes, to use Xwsfb instead of Xsun*, to be
commited later today.

Most of the work by me during the LSM and the week after, with code borrowed
from jason@@, NetBSD (new serial code), and feedback from mickey@@. Work on
pnozz(4) done by millert@@
@
text
@/*	$OpenBSD: pfour.c,v 1.8 2002/03/14 01:26:43 millert Exp $ */

/*
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Theo de Raadt.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/malloc.h>

#ifdef DEBUG
#include <sys/proc.h>
#include <sys/syslog.h>
#endif

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/pmap.h>
#include <machine/oldmon.h>
#include <machine/cpu.h>
#include <machine/ctlreg.h>
#include <sparc/sparc/asm.h>
#include <sparc/sparc/vaddrs.h>
#include <sparc/dev/pfourreg.h>

struct pfour_softc {
	struct	device sc_dev;		/* base device */
	volatile u_long *sc_vaddr;	/* pfour register */
	int	nothing;
};

static int	pfourmatch(struct device *, void *, void *);
static void	pfourattach(struct device *, struct device *, void *);
struct cfdriver pfourcd = { NULL, "pfour", pfourmatch, pfourattach,
	DV_DULL, sizeof(struct pfour_softc)
};

int
pfourmatch(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct cfdata *cf = vcf;
	register struct confargs *ca = aux;
	register struct romaux *ra = &ca->ca_ra;

	return (strcmp(cf->cf_driver->cd_name, ra->ra_name) == 0);
}

void
pfourattach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	register struct pfour_softc *sc = (struct pfour_softc *)self;
	extern struct cfdata cfdata[];
	register struct confargs *ca = args;
	struct confargs oca;
	register short *p;
	struct cfdata *cf;
	u_long val;

	if (sc->sc_dev.dv_unit > 0) {
		printf(" unsupported\n");
		return;
	}

	sc->sc_vaddr = (u_long *)mapiodev(ca->ca_ra.ra_reg, PFOUR_REG,
	    NBPG, ca->ca_bustype);
	if (sc->sc_vaddr == NULL) {
		printf("\n");
		return;
	}
	val = probeget(sc->sc_vaddr, 4);

	if (val == -1) {
		printf(": empty\n");
		return;
	}

	printf(": cardtype 0x%02x\n", PFOUR_FBTYPE(val));

	*sc->sc_vaddr = PFOUR_REG_VIDEO | PFOUR_REG_RESET;
	*sc->sc_vaddr = PFOUR_REG_VIDEO;

	for (cf = cfdata; cf->cf_driver; cf++) {
		if (cf->cf_fstate == FSTATE_FOUND)
			continue;
		for (p = cf->cf_parents; *p >= 0; p++)
			if (self->dv_cfdata == &cfdata[*p]) {
				oca.ca_ra.ra_iospace = -1;
				oca.ca_ra.ra_len = 0;
				oca.ca_ra.ra_nreg = 1;
				oca.ca_ra.ra_pfour = val;
				oca.ca_ra.ra_intr[0].int_vec = -1;
				oca.ca_ra.ra_nintr = 0;
				oca.ca_ra.ra_name = cf->cf_driver->cd_name;
				oca.ca_ra.ra_paddr = ca->ca_ra.ra_paddr;
				oca.ca_bustype = BUS_PFOUR;

				if ((*cf->cf_driver->cd_match)(self, cf, &oca) == 0)
					continue;
				config_attach(self, cf, &oca, NULL);
			}
	}
}

void
pfour_reset()
{
	struct pfour_softc *sc = pfourcd.cd_devs[0];

	*sc->sc_vaddr = PFOUR_REG_VIDEO | PFOUR_REG_RESET;
	delay(1);
	*sc->sc_vaddr = PFOUR_REG_VIDEO;
}

int
pfour_videosize(reg, xp, yp)
	int reg;
	int *xp, *yp;
{
	if (PFOUR_ID(reg) == PFOUR_ID_COLOR24) {
		*xp = 1152;
		*yp = 900;
		return 0;
	}

	switch (PFOUR_SIZE(reg)) {
	case PFOUR_SIZE_1152X900:
		*xp = 1152;
		*yp = 900;
		break;
	case PFOUR_SIZE_1024X1024:
		*xp = 1024;
		*yp = 1024;
		break;
	case PFOUR_SIZE_1280X1024:
		*xp = 1280;
		*yp = 1024;
		break;
	case PFOUR_SIZE_1600X1280:
		*xp = 1600;
		*yp = 1280;
		break;
	case PFOUR_SIZE_1440X1440:
		*xp = 1440;
		*yp = 1440;
		break;
	case PFOUR_SIZE_640X480:
		*xp = 640;
		*yp = 480;
		break;
	default:
		*xp = 1152;		/* assume, but indicate error */
		*yp = 900;
		return (-1);
	}
	return (0);
}

void
pfourenable(on)
	int on;
{
	struct pfour_softc *sc = pfourcd.cd_devs[0];

	if (on)
		*sc->sc_vaddr |= PFOUR_REG_VIDEO;
	else
		*sc->sc_vaddr &= ~PFOUR_REG_VIDEO;
}

int
pfourstatus()
{
	struct pfour_softc *sc = pfourcd.cd_devs[0];

	return (*sc->sc_vaddr & PFOUR_REG_VIDEO);
}
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pfour.c,v 1.7 2001/11/06 19:53:16 miod Exp $ */
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: pfour.c,v 1.6 1997/08/08 08:25:20 downsj Exp $ */
d59 2
a60 2
static int	pfourmatch __P((struct device *, void *, void *));
static void	pfourattach __P((struct device *, struct device *, void *));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pfour.c,v 1.7 2001/11/06 19:53:16 miod Exp $ */
d59 2
a60 2
static int	pfourmatch(struct device *, void *, void *);
static void	pfourattach(struct device *, struct device *, void *);
@


1.7.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pfour.c,v 1.7.2.1 2002/06/11 03:38:16 art Exp $ */
@


1.6
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfour.c,v 1.5 1995/12/15 13:56:26 deraadt Exp $ */
d42 1
a42 1
#include <vm/vm.h>
@


1.6.12.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d42 1
a42 1
#include <uvm/uvm_extern.h>
@


1.6.12.2
log
@Merge in -current from about a week ago
@
text
@d59 2
a60 2
static int	pfourmatch(struct device *, void *, void *);
static void	pfourattach(struct device *, struct device *, void *);
@


1.6.12.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: pfour.c,v 1.6.12.2 2002/03/28 10:57:10 niklas Exp $ */
@


1.5
log
@new mapdev/()/mapiodev() calling convention uses "struct rom_reg *" to supply
base plus an offset
new dvma routines
@
text
@d1 1
a1 1
/*	$Id: pfour.c,v 1.4 1995/11/09 21:26:13 deraadt Exp $ */
@


1.4
log
@$NetBSD$ -> $Id$
@
text
@d1 1
a1 1
/*	$Id$ */
d95 1
a95 1
	sc->sc_vaddr = (u_long *)mapiodev((caddr_t)(ca->ca_ra.ra_paddr + PFOUR_REG),
@


1.3
log
@avoid bus_tmp() because mapiodev() may reuse that mapping, which would be a catastrophe
@
text
@d1 1
a1 1
/*	$NetBSD: cgfourreg.h,v 1.4 1994/11/20 20:52:03 deraadt Exp $ */
@


1.2
log
@pfour bwtwo blanking control
@
text
@d88 1
a88 2
	caddr_t tmp;
	u_int val;
d95 3
a97 2
	tmp = bus_tmp(ca->ca_ra.ra_paddr + PFOUR_REG, BUS_PFOUR);
	if (tmp == NULL) {
d101 1
a101 1
	val = probeget(tmp, 4);
a107 3
	sc->sc_vaddr = mapiodev((caddr_t)(ca->ca_ra.ra_paddr + PFOUR_REG),
	    NBPG, ca->ca_bustype);

d110 2
a111 2
	*(int *)tmp = PFOUR_REG_VIDEO | PFOUR_REG_RESET;
	*(int *)tmp = PFOUR_REG_VIDEO;
a132 1
	bus_untmp();
@


1.1
log
@new stuff
@
text
@a52 2
volatile int *pfour_vaddr;		/* pfour register */

d55 1
d108 1
a108 1
	pfour_vaddr = mapiodev((caddr_t)(ca->ca_ra.ra_paddr + PFOUR_REG),
d142 5
a146 2
	*pfour_vaddr = PFOUR_REG_VIDEO | PFOUR_REG_RESET;
	*pfour_vaddr = PFOUR_REG_VIDEO;
d191 20
@
