head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.60
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.56
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.58
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.50
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.54
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.52
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.48
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.46
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.44
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.42
	OPENBSD_5_0:1.3.0.40
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.38
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.36
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.32
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.34
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.30
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.28
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.26
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.24
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.22
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.20
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.22
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2002.03.14.01.26.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.08.08.08.25.53;	author downsj;	state Exp;
branches
	1.2.12.1
	1.2.22.1;
next	1.1;

1.1
date	96.08.11.05.34.40;	author deraadt;	state Exp;
branches;
next	;

1.2.12.1
date	2002.03.28.10.57.10;	author niklas;	state Exp;
branches;
next	;

1.2.22.1
date	2002.06.11.03.38.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.3
log
@First round of __P removal in sys
@
text
@/*	$OpenBSD: fpu_extern.h,v 1.2 1997/08/08 08:25:53 downsj Exp $	*/
/*	$NetBSD: fpu_extern.h,v 1.1 1996/03/14 19:41:56 christos Exp $	*/

/*
 * Copyright (c) 1995 Christos Zoulas.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Christos Zoulas.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

struct proc;
struct fpstate;
struct trapframe;
union instr;
struct fpemu;
struct fpn;

/* fpu.c */
void fpu_cleanup(struct proc *, struct fpstate *);
int fpu_emulate(struct proc *, struct trapframe *, struct fpstate *);
int fpu_execute(struct fpemu *, union instr);

/* fpu_add.c */
struct fpn *fpu_add(struct fpemu *);

/* fpu_compare.c */
void fpu_compare(struct fpemu *, int);

/* fpu_div.c */
struct fpn *fpu_div(struct fpemu *);

/* fpu_explode.c */
int fpu_itof(struct fpn *, u_int);
int fpu_stof(struct fpn *, u_int);
int fpu_dtof(struct fpn *, u_int, u_int );
int fpu_xtof(struct fpn *, u_int, u_int , u_int , u_int );
void fpu_explode(struct fpemu *, struct fpn *, int, int );

/* fpu_implode.c */
u_int fpu_ftoi(struct fpemu *, struct fpn *);
u_int fpu_ftos(struct fpemu *, struct fpn *);
u_int fpu_ftod(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftox(struct fpemu *, struct fpn *, u_int *);
void fpu_implode(struct fpemu *, struct fpn *, int, u_int *);

/* fpu_mul.c */
struct fpn *fpu_mul(struct fpemu *);

/* fpu_sqrt.c */
struct fpn *fpu_sqrt(struct fpemu *);

/* fpu_subr.c */
int fpu_shr(register struct fpn *, register int);
void fpu_norm(register struct fpn *);
struct fpn *fpu_newnan(register struct fpemu *);
@


1.2
log
@Mostly sync to NetBSD-current 970804.

GENERIC currently compiles and runs; some devices (isp) are not complete and
not yet enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 3
a43 3
void fpu_cleanup __P((struct proc *, struct fpstate *));
int fpu_emulate __P((struct proc *, struct trapframe *, struct fpstate *));
int fpu_execute __P((struct fpemu *, union instr));
d46 1
a46 1
struct fpn *fpu_add __P((struct fpemu *));
d49 1
a49 1
void fpu_compare __P((struct fpemu *, int));
d52 1
a52 1
struct fpn *fpu_div __P((struct fpemu *));
d55 5
a59 5
int fpu_itof __P((struct fpn *, u_int));
int fpu_stof __P((struct fpn *, u_int));
int fpu_dtof __P((struct fpn *, u_int, u_int ));
int fpu_xtof __P((struct fpn *, u_int, u_int , u_int , u_int ));
void fpu_explode __P((struct fpemu *, struct fpn *, int, int ));
d62 5
a66 5
u_int fpu_ftoi __P((struct fpemu *, struct fpn *));
u_int fpu_ftos __P((struct fpemu *, struct fpn *));
u_int fpu_ftod __P((struct fpemu *, struct fpn *, u_int *));
u_int fpu_ftox __P((struct fpemu *, struct fpn *, u_int *));
void fpu_implode __P((struct fpemu *, struct fpn *, int, u_int *));
d69 1
a69 1
struct fpn *fpu_mul __P((struct fpemu *));
d72 1
a72 1
struct fpn *fpu_sqrt __P((struct fpemu *));
d75 3
a77 3
int fpu_shr __P((register struct fpn *, register int));
void fpu_norm __P((register struct fpn *));
struct fpn *fpu_newnan __P((register struct fpemu *));
@


1.2.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_extern.h,v 1.2 1997/08/08 08:25:53 downsj Exp $	*/
d41 3
a43 3
void fpu_cleanup(struct proc *, struct fpstate *);
int fpu_emulate(struct proc *, struct trapframe *, struct fpstate *);
int fpu_execute(struct fpemu *, union instr);
d46 1
a46 1
struct fpn *fpu_add(struct fpemu *);
d49 1
a49 1
void fpu_compare(struct fpemu *, int);
d52 1
a52 1
struct fpn *fpu_div(struct fpemu *);
d55 5
a59 5
int fpu_itof(struct fpn *, u_int);
int fpu_stof(struct fpn *, u_int);
int fpu_dtof(struct fpn *, u_int, u_int );
int fpu_xtof(struct fpn *, u_int, u_int , u_int , u_int );
void fpu_explode(struct fpemu *, struct fpn *, int, int );
d62 5
a66 5
u_int fpu_ftoi(struct fpemu *, struct fpn *);
u_int fpu_ftos(struct fpemu *, struct fpn *);
u_int fpu_ftod(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftox(struct fpemu *, struct fpn *, u_int *);
void fpu_implode(struct fpemu *, struct fpn *, int, u_int *);
d69 1
a69 1
struct fpn *fpu_mul(struct fpemu *);
d72 1
a72 1
struct fpn *fpu_sqrt(struct fpemu *);
d75 3
a77 3
int fpu_shr(register struct fpn *, register int);
void fpu_norm(register struct fpn *);
struct fpn *fpu_newnan(register struct fpemu *);
@


1.2.12.1
log
@Merge in -current from about a week ago
@
text
@d41 3
a43 3
void fpu_cleanup(struct proc *, struct fpstate *);
int fpu_emulate(struct proc *, struct trapframe *, struct fpstate *);
int fpu_execute(struct fpemu *, union instr);
d46 1
a46 1
struct fpn *fpu_add(struct fpemu *);
d49 1
a49 1
void fpu_compare(struct fpemu *, int);
d52 1
a52 1
struct fpn *fpu_div(struct fpemu *);
d55 5
a59 5
int fpu_itof(struct fpn *, u_int);
int fpu_stof(struct fpn *, u_int);
int fpu_dtof(struct fpn *, u_int, u_int );
int fpu_xtof(struct fpn *, u_int, u_int , u_int , u_int );
void fpu_explode(struct fpemu *, struct fpn *, int, int );
d62 5
a66 5
u_int fpu_ftoi(struct fpemu *, struct fpn *);
u_int fpu_ftos(struct fpemu *, struct fpn *);
u_int fpu_ftod(struct fpemu *, struct fpn *, u_int *);
u_int fpu_ftox(struct fpemu *, struct fpn *, u_int *);
void fpu_implode(struct fpemu *, struct fpn *, int, u_int *);
d69 1
a69 1
struct fpn *fpu_mul(struct fpemu *);
d72 1
a72 1
struct fpn *fpu_sqrt(struct fpemu *);
d75 3
a77 3
int fpu_shr(register struct fpn *, register int);
void fpu_norm(register struct fpn *);
struct fpn *fpu_newnan(register struct fpemu *);
@


1.1
log
@netbsd port, now we merge our changes back in
@
text
@d1 1
@
