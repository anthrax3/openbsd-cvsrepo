head	1.5;
access;
symbols
	OPENBSD_3_8:1.2.0.44
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.42
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.40
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.38
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.36
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.34
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.32
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.30
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.28
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.26
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.24
	OPENBSD_2_9_BASE:1.2
	NIKLAS_UNDEAD:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	2006.01.13.19.36.43;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2006.01.08.17.45.29;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.04.20.39.04;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.35.16;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@/*	$OpenBSD: adbsysasm.s,v 1.4 2006/01/08 17:45:29 miod Exp $	*/
/*	$NetBSD: adbsysasm.s,v 1.11 2001/11/20 03:19:42 chs Exp $	*/

/*-
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "akbd.h"
#include "ams.h"
#include <machine/asm.h>

/* 
 * ADB subsystem routines in assembly
 */

#if NAKBD > 0
/* This routine is called when a keyboard has sent us some data. */
/* (provided it has been set up with SetADBInfo) */
GLOBAL(adb_kbd_asmcomplete)
	moveml	#0x80e0,sp@@-	| save scratch regs
	movl	d0,sp@@-		/* ADB command byte */
	movl	a2,sp@@-		/* data area pointer */
	/*	a1 is the pointer to this routine itself. */
	movl	a0,sp@@-		/* device data buffer */
	jbsr	_C_LABEL(kbd_adbcomplete)
	addl	#12,sp		/* pop params */
	moveml	sp@@+,#0x0701	| restore scratch regs
	rts
#endif

#if NAMS > 0
/* This routine is called when a mouse has sent us some data. */
/* (provided it has been set up with SetADBInfo) */
GLOBAL(adb_ms_asmcomplete)
	moveml	#0x80e0,sp@@-	| save scratch regs
	movl	d0,sp@@-		/* ADB command byte */
	movl	a2,sp@@-		/* data area pointer */
	/*	a1 is the pointer to this routine itself. */
	movl	a0,sp@@-		/* device data buffer */
	jbsr	_C_LABEL(ms_adbcomplete)
	addl	#12,sp		/* pop params */
	moveml	sp@@+,#0x0701	| restore scratch regs
	rts
#endif

#if defined(ADB_DEBUG) && 0
GLOBAL(adb_jadbprochello)
	.asciz	"adb: hello from adbproc\n"
	.even
#endif


GLOBAL(adb_jadbproc)
#if defined(ADB_DEBUG) && 0
	moveml	#0xc0c0,sp@@-	| save scratch regs
	movl	_C_LABEL(adb_jadbprochello),sp@@-
	jbsr	_C_LABEL(printf)
	addl	#4,sp		/* pop params */
	moveml	sp@@+,#0x0303	| restore scratch regs
#endif
		/* Don't do anything; adbattach fixes dev info for us. */
	rts
@


1.4
log
@Drop native MacOS support from the adb direct code, and skip callback
wrappers used to convert between MacOS pascal calling convention and the
C calling convention, unless option MRG_ADB. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsysasm.s,v 1.3 2006/01/04 20:39:04 miod Exp $	*/
@


1.3
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a71 2
#ifdef MRG_ADB

a88 2

#endif	/* MRG_ADB */
@


1.2
log
@Add OpenBSD Id string.
@
text
@d2 1
a2 1
/*	$NetBSD: adbsysasm.s,v 1.2 1995/09/03 20:59:56 briggs Exp $	*/
d34 4
d42 17
a58 1
/* This routine is called when a device has sent us some data. */
d60 4
a63 6
	.global	_adb_asmcomplete
	.global	_adb_complete
_adb_asmcomplete:
	moveml	#0xc0c0, sp@@-	| save scratch regs
	movl	d0, sp@@-	/* ADB command byte */
	movl	a2, sp@@-	/* data area pointer */
d65 4
a68 4
	movl	a0, sp@@-	/* device data buffer */
	jbsr	_adb_complete
	addl	#12, sp		/* pop params */
	moveml	sp@@+, #0x0303	| restore scratch regs
d70 3
d74 2
a75 1
_adb_jadbprochello:
d78 1
d81 7
a87 8
	.global	_adb_jadbproc
_adb_jadbproc:
#if defined(MRG_DEBUG) && 0
	moveml	#0xc0c0, sp@@-	| save scratch regs
	movl	_adb_jadbprochello, sp@@-
	jbsr	_printf
	addl	#4, sp		/* pop params */
	moveml	sp@@+, #0x0303	| restore scratch regs
d89 1
a89 1
		/* Don't do anything; adb_init fixes dev info for us. */
d92 1
a92 5
	/* ADBOp's completion routine used by extdms_init() in adbsys.c. */
	.global	_extdms_complete
_extdms_complete:
	movl	#-1,a2@@		| set done flag
	rts
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
