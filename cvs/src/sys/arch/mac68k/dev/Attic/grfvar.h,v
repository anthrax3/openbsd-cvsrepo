head	1.20;
access;
symbols
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.8.0.24
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.22
	OPENBSD_2_9_BASE:1.8
	NIKLAS_UNDEAD:1.8.0.20
	OPENBSD_2_8:1.8.0.18
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.16
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.14
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.12
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.10
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2006.01.09.20.51.48;	author miod;	state dead;
branches;
next	1.19;

1.19
date	2006.01.08.20.35.21;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.05.20.30.18;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.04.20.39.05;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.06.19.51.43;	author martin;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.23.23.28.58;	author martin;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.26.21.09.35;	author martin;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.23.16.51.11;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.03.15.55;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.01.12.13.46;	author art;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	97.05.01.03.36.51;	author briggs;	state Exp;
branches
	1.8.14.1;
next	1.7;

1.7
date	97.03.29.23.47.13;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	97.03.18.05.35.24;	author briggs;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.21.45.52;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.08.10.21.37.44;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.18.35.22;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.13.39;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.03;	author deraadt;	state Exp;
branches;
next	;

1.8.14.1
date	2001.11.13.21.00.52;	author niklas;	state Exp;
branches;
next	1.8.14.2;

1.8.14.2
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	1.8.14.3;

1.8.14.3
date	2003.06.07.11.13.13;	author ho;	state Exp;
branches;
next	1.8.14.4;

1.8.14.4
date	2004.02.19.10.49.02;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.36.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Ditch the grf frame buffer abstraction, and directly attach macfb to
either obio or nubus. No functional change, shaves a few more KB...
@
text
@/*	$OpenBSD: grfvar.h,v 1.19 2006/01/08 20:35:21 miod Exp $	*/
/*	$NetBSD: grfvar.h,v 1.11 1996/08/04 06:03:58 scottr Exp $	*/
/*	$NetBSD: grfioctl.h,v 1.5 1995/07/02 05:26:45 briggs Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grfvar.h 1.9 91/01/21$
 *
 *	@@(#)grfvar.h	7.3 (Berkeley) 5/7/91
 */

struct grfmode {
	caddr_t		fbbase;		/* Base of page of frame buffer     */
	u_int32_t	fbsize;		/* Size of frame buffer             */
	u_int16_t	fboff;		/* Offset of frame buffer from base */
	u_int16_t	rowbytes;	/* Screen rowbytes                  */
	u_int16_t	width;		/* Screen width                     */
	u_int16_t	height;		/* Screen height                    */
	u_int16_t	psize;		/* Screen depth                     */
};

#define CARD_NAME_LEN	64

/*
 * State info, per hardware instance.
 */
struct grfbus_softc {
	struct	device	sc_dev;
	nubus_slot	sc_slot;

	bus_addr_t		sc_basepa;	/* base of video space */
	bus_addr_t		sc_fbofs;	/* offset to framebuffer */

	bus_space_tag_t		sc_tag;
	bus_space_handle_t	sc_handle;
	bus_space_handle_t	sc_regh;

	u_int32_t	card_id;	/* DrHW value for nubus cards	*/
	bus_size_t	cli_offset;	/* Offset of byte to clear intr */
					/* for cards where that's suff.  */
	u_int32_t	cli_value;	/* Value to write at cli_offset */
};

/*
 * Attach grf and ite semantics to Mac video hardware.
 */
struct grfbus_attach_args {
	char		*ga_name;	/* name of semantics to attach */
	struct grfmode	ga_grfmode;
	bus_addr_t	ga_phys;
};

/*
 * Nubus image data structure.  This is the equivalent of a PixMap in
 * MacOS programming parlance.  One of these structures exists for each
 * video mode that a quickdraw compatible card can fit in.
 */
struct image_data {
	u_int32_t	size;
	u_int32_t	offset;
	u_int16_t	rowbytes;
	u_int16_t	top;
	u_int16_t	left;
	u_int16_t	bottom;
	u_int16_t	right;
	u_int16_t	version;
	u_int16_t	packType;
	u_int32_t	packSize;
	u_int32_t	hRes;
	u_int32_t	vRes;
	u_int16_t	pixelType;
	u_int16_t	pixelSize;	
	u_int16_t	cmpCount;
	u_int16_t	cmpSize;
	u_int32_t	planeBytes;
};

#define VID_PARAMS		1
#define VID_TABLE_OFFSET	2
#define VID_PAGE_CNT		3
#define VID_DEV_TYPE		4

void	grf_establish(struct grfbus_softc *, struct grfmode *);
int	grfbusprint(void *, const char *);
@


1.19
log
@Remove unused grf_softc members; do not keep temporary data in grf_softc
either, instead keep it on the stack or directly in attachment structures.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.18 2006/01/05 20:30:18 miod Exp $	*/
@


1.18
log
@More dead constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.17 2006/01/04 20:39:05 miod Exp $	*/
a43 1
	u_int8_t	mode_id;	/* Identifier for mode              */
a49 3
	u_int16_t	hres;		/* Horizontal resolution (dpi)      */
	u_int16_t	vres;		/* Vertical resolution (dpi)        */
	u_int16_t	ptype;		/* 0 = indexed, 0x10 = direct       */
a68 1
	struct	grfmode curr_mode;	/* hardware desc(for ioctl)	*/
a72 1
	nubus_dir	board_dir;	/* Nubus dir for curr board	*/
d80 1
a80 1
	struct grfmode	*ga_grfmode;
d114 1
a114 1
void	grf_establish(struct grfbus_softc *);
@


1.17
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.16 2005/08/06 19:51:43 martin Exp $	*/
a54 1
	char		pad[32];	/* Space for expansion              */
a88 18

/* flags */
#define	GF_ALIVE	0x01
#define GF_OPEN		0x02
#define GF_EXCLUDE	0x04
#define GF_WANTED	0x08
#define GF_BSDOPEN	0x10
#define GF_HPUXOPEN	0x20

/* requests to mode routine */
#define GM_GRFON	1
#define GM_GRFOFF	2
#define GM_CURRMODE	3
#define GM_LISTMODES	4
#define GM_NEWMODE	5

/* minor device interpretation */
#define GRFUNIT(d)	(minor(d))
@


1.16
log
@overhaul the grf driver:

- Simplify grfmv_phys() to work like grfiv_phys(), and eliminate the
  second argument to both, as we don't use it anyway.
- Handle fbbase and fboff consistently throughout.
- Eliminate grfaddr() by pulling it into grfmmap(), which is the
  only place it was used, previously.
- grfmap() now gets the physical address of the framebuffer from
  the appropriate driver, rather than try to compute it by itself.
  Be careful with aligning the base to a page address and increase
  the length of the mapped region appropriately.
- Store the PA of the framebuffer in the softc.  This eliminates the need
  for the sc_phys callback; we can just store the PA in the grfbus attach
  args, rather than a function pointer, which simplifies the code nicely.
- Disable Valkyrie interrupts on the Quadra 630
- New and improved console framebuffer initialization and autoconfig.  This
  resolves a great many issues, including Performa 58x interrupt handling
  and offset displays on some models.
- Remove unused grf ioctls
- Some KNF and other minor things

help and ok miod@@

from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.15 2005/07/23 23:28:58 martin Exp $	*/
d3 1
d43 15
a82 18
 * State info, per grf instance.
 */
struct grf_softc {
	struct	device sc_dev;		/* device glue */

	bus_space_tag_t		sc_tag;
	bus_space_handle_t	sc_regh;

	int	sc_flags;		/* driver flags */
	u_long	sc_phys;		/* PA of framebuffer */

	struct	grfmode *sc_grfmode;	/* forwarded ... */
	nubus_slot	*sc_slot;
					/* mode-change on/off/mode function */
	int	(*sc_mode)(struct grf_softc *, int, void *);
};

/*
a86 2
	bus_space_tag_t	ga_tag;
	bus_space_handle_t ga_handle;
a87 1
	nubus_slot	*ga_slot;
a88 1
	int		(*ga_mode)(struct grf_softc *, int, void *);
a90 2
typedef	caddr_t (*grf_phys_t)(struct grf_softc *gp, vaddr_t addr);

d107 1
a107 1
#define GRFUNIT(d)	((d) & 0x7)
d139 1
a139 13
int	grfopen(dev_t dev, int flag, int mode, struct proc *p);
int	grfclose(dev_t dev, int flag, int mode, struct proc *p);
int	grfioctl(dev_t, int, caddr_t, int, struct proc *p);
int	grfpoll(dev_t dev, int rw, struct proc *p);
paddr_t	grfmmap(dev_t dev, off_t off, int prot);
int	grfon(dev_t dev);
int	grfoff(dev_t dev);
int	grfaddr(struct grf_softc *gp, register int off);
int	grfmap(dev_t dev, caddr_t *addrp, struct proc *p);
int	grfunmap(dev_t dev, caddr_t addr, struct proc *p);

void	grf_establish(struct grfbus_softc *, nubus_slot *,
	    int (*)(struct grf_softc *, int, void *));
@


1.15
log
@vm_offset_t -> {vaddr_t, bus_addr_t}
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.14 2005/04/26 21:09:35 martin Exp $	*/
d51 3
d55 1
a56 1
	bus_space_handle_t	sc_fbh;
d60 1
a60 1
	u_int32_t	cli_offset;	/* Offset of byte to clear intr */
d62 1
a62 1
	unsigned char	cli_value;	/* Value to write at cli_offset */
d75 3
a77 1
	int	sc_flags;		/* software flags */
a81 2
					/* map virtual addr to physical addr */
	caddr_t	(*sc_phys)(struct grf_softc *, vaddr_t);
d88 4
a91 2
	char	*ga_name;		/* name of semantics to attach */
	struct	grfmode *ga_grfmode;	/* forwarded ... */
d93 2
a94 2
	int	(*ga_mode)(struct grf_softc *, int, void *);
	caddr_t	(*ga_phys)(struct grf_softc *, vaddr_t);
d159 1
a159 2
	    int (*)(struct grf_softc *, int, void *),
	    caddr_t (*)(struct grf_softc *, vaddr_t));
@


1.14
log
@new NuBus slot space mapping/probing code utilizing bus_space(9)

ok miod@@

from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.13 2003/09/23 16:51:11 millert Exp $	*/
d78 1
a78 1
	caddr_t	(*sc_phys)(struct grf_softc *, vm_offset_t);
d89 1
a89 1
	caddr_t	(*ga_phys)(struct grf_softc *, vm_offset_t);
d92 1
a92 1
typedef	caddr_t (*grf_phys_t)(struct grf_softc *gp, vm_offset_t addr);
d155 1
a155 1
	    caddr_t (*)(struct grf_softc *, vm_offset_t));
@


1.13
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.12 2003/06/02 23:27:48 millert Exp $	*/
d68 3
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.11 2002/03/14 03:15:55 millert Exp $	*/
d142 1
a142 1
int	grfselect(dev_t dev, int rw, struct proc *p);
@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.10 2002/03/14 01:26:35 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.9 2001/11/01 12:13:46 art Exp $	*/
d154 1
a154 1
void	grf_establish __P((struct grfbus_softc *, nubus_slot *,
d156 1
a156 1
	    caddr_t (*)(struct grf_softc *, vm_offset_t)));
@


1.9
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.8 1997/05/01 03:36:51 briggs Exp $	*/
d77 1
a77 1
	int	(*sc_mode) __P((struct grf_softc *, int, void *));
d79 1
a79 1
	caddr_t	(*sc_phys) __P((struct grf_softc *, vm_offset_t));
d89 2
a90 2
	int	(*ga_mode) __P((struct grf_softc *, int, void *));
	caddr_t	(*ga_phys) __P((struct grf_softc *, vm_offset_t));
d93 1
a93 1
typedef	caddr_t (*grf_phys_t) __P((struct grf_softc *gp, vm_offset_t addr));
d143 10
a152 10
int	grfopen __P((dev_t dev, int flag, int mode, struct proc *p));
int	grfclose __P((dev_t dev, int flag, int mode, struct proc *p));
int	grfioctl __P((dev_t, int, caddr_t, int, struct proc *p));
int	grfselect __P((dev_t dev, int rw, struct proc *p));
paddr_t	grfmmap __P((dev_t dev, off_t off, int prot));
int	grfon __P((dev_t dev));
int	grfoff __P((dev_t dev));
int	grfaddr __P((struct grf_softc *gp, register int off));
int	grfmap __P((dev_t dev, caddr_t *addrp, struct proc *p));
int	grfunmap __P((dev_t dev, caddr_t addr, struct proc *p));
d157 1
a157 1
int	grfbusprint __P((void *, const char *));
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.9 2001/11/01 12:13:46 art Exp $	*/
d77 1
a77 1
	int	(*sc_mode)(struct grf_softc *, int, void *);
d79 1
a79 1
	caddr_t	(*sc_phys)(struct grf_softc *, vm_offset_t);
d89 2
a90 2
	int	(*ga_mode)(struct grf_softc *, int, void *);
	caddr_t	(*ga_phys)(struct grf_softc *, vm_offset_t);
d93 1
a93 1
typedef	caddr_t (*grf_phys_t)(struct grf_softc *gp, vm_offset_t addr);
d143 10
a152 10
int	grfopen(dev_t dev, int flag, int mode, struct proc *p);
int	grfclose(dev_t dev, int flag, int mode, struct proc *p);
int	grfioctl(dev_t, int, caddr_t, int, struct proc *p);
int	grfselect(dev_t dev, int rw, struct proc *p);
paddr_t	grfmmap(dev_t dev, off_t off, int prot);
int	grfon(dev_t dev);
int	grfoff(dev_t dev);
int	grfaddr(struct grf_softc *gp, register int off);
int	grfmap(dev_t dev, caddr_t *addrp, struct proc *p);
int	grfunmap(dev_t dev, caddr_t addr, struct proc *p);
d154 1
a154 1
void	grf_establish(struct grfbus_softc *, nubus_slot *,
d156 2
a157 2
	    caddr_t (*)(struct grf_softc *, vm_offset_t));
int	grfbusprint(void *, const char *);
@


1.8
log
@Clear the interrupts properly on an E-Machines Futura II LX and make a wild
guess at clearing them on a Futura II SX/DSP and RasterOps ColorBoard 364.
Thanks to Michel Chalufour <michelc@@tiac.net> for loaning me the II LX.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.7 1997/03/29 23:47:13 briggs Exp $	*/
d147 1
a147 1
int	grfmmap __P((dev_t dev, int off, int prot));
@


1.8.14.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d147 1
a147 1
paddr_t	grfmmap __P((dev_t dev, off_t off, int prot));
@


1.8.14.2
log
@Merge in -current from about a week ago
@
text
@d77 1
a77 1
	int	(*sc_mode)(struct grf_softc *, int, void *);
d79 1
a79 1
	caddr_t	(*sc_phys)(struct grf_softc *, vm_offset_t);
d89 2
a90 2
	int	(*ga_mode)(struct grf_softc *, int, void *);
	caddr_t	(*ga_phys)(struct grf_softc *, vm_offset_t);
d93 1
a93 1
typedef	caddr_t (*grf_phys_t)(struct grf_softc *gp, vm_offset_t addr);
d143 10
a152 10
int	grfopen(dev_t dev, int flag, int mode, struct proc *p);
int	grfclose(dev_t dev, int flag, int mode, struct proc *p);
int	grfioctl(dev_t, int, caddr_t, int, struct proc *p);
int	grfselect(dev_t dev, int rw, struct proc *p);
paddr_t	grfmmap(dev_t dev, off_t off, int prot);
int	grfon(dev_t dev);
int	grfoff(dev_t dev);
int	grfaddr(struct grf_softc *gp, register int off);
int	grfmap(dev_t dev, caddr_t *addrp, struct proc *p);
int	grfunmap(dev_t dev, caddr_t addr, struct proc *p);
d154 1
a154 1
void	grf_establish(struct grfbus_softc *, nubus_slot *,
d156 2
a157 2
	    caddr_t (*)(struct grf_softc *, vm_offset_t));
int	grfbusprint(void *, const char *);
@


1.8.14.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.8.14.2 2002/03/28 10:34:04 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8.14.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d142 1
a142 1
int	grfpoll(dev_t dev, int rw, struct proc *p);
@


1.7
log
@Do not register an interrupt handler unless we know that we can clear
interrupts properly.
Take a stab at clearing interrupts correctly for stupid Samsung video
card that masquerades as a Toby Frame Buffer card.
Break out interrupt routines by card type, including the cards that just
need a byte cleared to clear the interrupt.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.6 1997/03/18 05:35:24 briggs Exp $	*/
d63 1
@


1.6
log
@Add bus handle and bus tag to grfbus_softc.
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.5 1996/11/23 21:45:52 kstailey Exp $	*/
d60 3
a62 1
	u_int16_t	card_id;	/* DrHW value for nubus cards	*/
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$OpenBSD: grfvar.h,v 1.3 1996/05/26 18:35:22 briggs Exp $	*/
d54 4
@


1.4
log
@Sync with NetBSD.
@
text
@d150 1
a150 1
int	grfbusprint __P((void *, char *));
@


1.3
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: grfvar.h,v 1.10 1996/05/19 22:27:10 scottr Exp $	*/
d147 1
a147 1
void	grf_establish __P((struct grfbus_softc *,
@


1.2
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: grfvar.h,v 1.8 1995/07/06 17:13:51 briggs Exp $	*/
d46 5
a50 2
/* per display info */
struct grf_softc {
a53 1
	char		card_name[CARD_NAME_LEN];
a54 2
	u_int32_t	g_flags;	/* software flags		*/
	u_int32_t	g_type;		/* index into grfdev		*/
a56 1
	caddr_t		g_data;		/* device dependent data	*/
d59 28
a94 13
/* display types - indices into grfdev */
#define	GT_MACVIDEO		0
#define	GT_INTERNALVIDEO	1

struct grfdev {
	int	gd_softid;	/* DrSW */
	int	(*gd_probe)();	/* probe routine */
	int	(*gd_init) ();	/* boot time initialization */
	int	(*gd_mode) ();	/* mode-change on/off/mode function */
	char	*gd_desc;	/* text description */
	caddr_t	(*gd_phys) ();	/* map virtual addr to physical addr */
};

d134 16
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
