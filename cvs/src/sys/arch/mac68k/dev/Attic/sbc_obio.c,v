head	1.18;
access;
symbols
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.8
	OPENBSD_5_0:1.17.0.6
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.4
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.15.0.12
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.14
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.10
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.8
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	NIKLAS_UNDEAD:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.8
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.18
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.17;

1.17
date	2010.06.28.18.31.01;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.26.23.24.43;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2006.12.13.21.12.56;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.11.28.23.59.45;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.14.09.36.49;	author martin;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.23.23.28.58;	author martin;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.08.06.59.43;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.02.06.43.25;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.01.22.43.33;	author miod;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.07.04.08.52.46;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.21.17.45.11;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	98.05.03.07.13.02;	author gene;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	97.05.15.04.05.44;	author gene;	state Exp;
branches;
next	1.3;

1.3
date	97.03.10.05.06.42;	author gene;	state Exp;
branches;
next	1.2;

1.2
date	97.03.10.01.15.30;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	97.03.08.16.16.58;	author briggs;	state Exp;
branches;
next	;

1.5.8.1
date	2001.04.18.16.10.06;	author niklas;	state Exp;
branches;
next	1.5.8.2;

1.5.8.2
date	2001.10.31.03.01.14;	author nate;	state Exp;
branches;
next	1.5.8.3;

1.5.8.3
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.36.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: sbc_obio.c,v 1.17 2010/06/28 18:31:01 krw Exp $	*/
/*	$NetBSD: sbc_obio.c,v 1.1 1997/03/01 20:18:59 scottr Exp $	*/

/*
 * Copyright (C) 1996,1997 Scott Reynolds.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Scott Reynolds for
 *      the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/buf.h>
#include <sys/proc.h>

#include <scsi/scsi_all.h>
#include <scsi/scsi_debug.h>
#include <scsi/scsiconf.h>

#include <dev/ic/ncr5380reg.h>
#include <dev/ic/ncr5380var.h>

#include <machine/cpu.h>
#include <machine/viareg.h>

#include "sbcreg.h"
#include "sbcvar.h"

/*
 * From Guide to the Macintosh Family Hardware, pp. 137-143
 * These are offsets from SCSIBase (see pmap_bootstrap.c)
 */
#define	SBC_REG_OFS		0x10000
#define	SBC_DMA_OFS		0x12000
#define	SBC_HSK_OFS		0x06000

#define	SBC_DMA_OFS_PB500	0x06000

#define	SBC_REG_OFS_IIFX	0x08000		/* Just guessing... */
#define	SBC_DMA_OFS_IIFX	0x0c000
#define	SBC_HSK_OFS_IIFX	0x0e000

#define	SBC_REG_OFS_DUO2	0x00000
#define	SBC_DMA_OFS_DUO2	0x02000
#define	SBC_HSK_OFS_DUO2	0x04000

static int	sbc_obio_match(struct device *, void *, void *);
static void	sbc_obio_attach(struct device *, struct device *, void *);

void	sbc_intr_enable(struct ncr5380_softc *);
void	sbc_intr_disable(struct ncr5380_softc *);
void	sbc_obio_clrintr(struct ncr5380_softc *);

struct cfattach sbc_obio_ca = {
	sizeof(struct sbc_softc), sbc_obio_match, sbc_obio_attach
};

static int
sbc_obio_match(parent, vcf, args)
	struct device *parent;
	void *vcf;
	void *args;
{
	struct cfdata *cf = (struct cfdata *) vcf;

	switch (current_mac_model->machineid) {
	case MACH_MACIIFX:	/* Note: the IIfx isn't (yet) supported. */
		break;
	case MACH_MACPB210:
	case MACH_MACPB230:
	case MACH_MACPB250:
	case MACH_MACPB270:
	case MACH_MACPB280:
	case MACH_MACPB280C:
		if (cf->cf_unit == 1)
			return 1;
		/*FALLTHROUGH*/
	default:
		if (cf->cf_unit == 0 && mac68k_machine.scsi80)
			return 1;
	}
	return 0;
}

static void
sbc_obio_attach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct sbc_softc *sc = (struct sbc_softc *) self;
	struct ncr5380_softc *ncr_sc = (struct ncr5380_softc *) sc;
	struct scsibus_attach_args saa;
	extern vaddr_t SCSIBase;

	/* Pull in the options flags. */
	sc->sc_options = ((ncr_sc->sc_dev.dv_cfdata->cf_flags | sbc_options)
	    & SBC_OPTIONS_MASK);

	/*
	 * Set up offsets to 5380 registers and GLUE I/O space, and turn
	 * off options we know we can't support on certain models.
	 */
	switch (current_mac_model->machineid) {
	case MACH_MACIIFX:	/* Note: the IIfx isn't (yet) supported. */
		sc->sc_regs = (struct sbc_regs *)(SCSIBase + SBC_REG_OFS_IIFX);
		sc->sc_drq_addr = (vaddr_t)(SCSIBase + SBC_HSK_OFS_IIFX);
		sc->sc_nodrq_addr = (vaddr_t)(SCSIBase + SBC_DMA_OFS_IIFX);
		sc->sc_options &= ~(SBC_INTR | SBC_RESELECT);
		break;
	case MACH_MACPB500:
		sc->sc_regs = (struct sbc_regs *)(SCSIBase + SBC_REG_OFS);
		sc->sc_drq_addr = (vaddr_t)(SCSIBase + SBC_HSK_OFS); /*??*/
		sc->sc_nodrq_addr = (vaddr_t)(SCSIBase + SBC_DMA_OFS_PB500);
		sc->sc_options &= ~(SBC_INTR | SBC_RESELECT);
		break;
	case MACH_MACPB210:
	case MACH_MACPB230:
	case MACH_MACPB250:
	case MACH_MACPB270:
	case MACH_MACPB280:
	case MACH_MACPB280C:
		if (ncr_sc->sc_dev.dv_unit == 1) {
			sc->sc_regs = (struct sbc_regs *)(0xfee00000 + SBC_REG_OFS_DUO2);
			sc->sc_drq_addr = (vaddr_t)(0xfee00000 + SBC_HSK_OFS_DUO2);
			sc->sc_nodrq_addr = (vaddr_t)(0xfee00000 + SBC_DMA_OFS_DUO2);
			break;
		}
		/*FALLTHROUGH*/
	default:
		sc->sc_regs = (struct sbc_regs *)(SCSIBase + SBC_REG_OFS);
		sc->sc_drq_addr = (vaddr_t)(SCSIBase + SBC_HSK_OFS);
		sc->sc_nodrq_addr = (vaddr_t)(SCSIBase + SBC_DMA_OFS);
		break;
	}

	/*
	 * Fill in the prototype scsi_link.
	 */
	ncr_sc->sc_link.adapter_softc = sc;
	ncr_sc->sc_link.adapter_target = 7;
	ncr_sc->sc_link.adapter = &sbc_ops;
	ncr_sc->sc_link.openings = 4;

	/*
	 * Initialize fields used by the MI code
	 */
	ncr_sc->sci_r0 = &sc->sc_regs->sci_pr0.sci_reg;
	ncr_sc->sci_r1 = &sc->sc_regs->sci_pr1.sci_reg;
	ncr_sc->sci_r2 = &sc->sc_regs->sci_pr2.sci_reg;
	ncr_sc->sci_r3 = &sc->sc_regs->sci_pr3.sci_reg;
	ncr_sc->sci_r4 = &sc->sc_regs->sci_pr4.sci_reg;
	ncr_sc->sci_r5 = &sc->sc_regs->sci_pr5.sci_reg;
	ncr_sc->sci_r6 = &sc->sc_regs->sci_pr6.sci_reg;
	ncr_sc->sci_r7 = &sc->sc_regs->sci_pr7.sci_reg;

	/*
	 * MD function pointers used by the MI code.
	 */
	if (sc->sc_options & SBC_PDMA) {
		ncr_sc->sc_pio_out   = sbc_pdma_out;
		ncr_sc->sc_pio_in    = sbc_pdma_in;
	} else {
		ncr_sc->sc_pio_out   = ncr5380_pio_out;
		ncr_sc->sc_pio_in    = ncr5380_pio_in;
	}
	ncr_sc->sc_dma_alloc = NULL;
	ncr_sc->sc_dma_free  = NULL;
	ncr_sc->sc_dma_poll  = NULL;
	ncr_sc->sc_intr_on   = NULL;
	ncr_sc->sc_intr_off  = NULL;
	ncr_sc->sc_dma_setup = NULL;
	ncr_sc->sc_dma_start = NULL;
	ncr_sc->sc_dma_stop  = NULL;
	ncr_sc->sc_flags = 0;
	ncr_sc->sc_min_dma_len = MIN_DMA_LEN;

	if (sc->sc_options & SBC_INTR) {
		ncr_sc->sc_dma_alloc = sbc_dma_alloc;
		ncr_sc->sc_dma_free  = sbc_dma_free;
		ncr_sc->sc_dma_poll  = sbc_dma_poll;
		ncr_sc->sc_dma_setup = sbc_dma_setup;
		ncr_sc->sc_dma_start = sbc_dma_start;
		ncr_sc->sc_dma_stop  = sbc_dma_stop;

		sc->sc_ih_drq.vh_fn = sbc_drq_intr;
		sc->sc_ih_drq.vh_arg = ncr_sc;
		sc->sc_ih_drq.vh_ipl = VIA2_SCSIDRQ;
		via2_register_irq(&sc->sc_ih_drq, ncr_sc->sc_dev.dv_xname);
	}

	sc->sc_ih_irq.vh_fn = sbc_irq_intr;
	sc->sc_ih_irq.vh_arg = ncr_sc;
	sc->sc_ih_irq.vh_ipl = VIA2_SCSIIRQ;
	via2_register_irq(&sc->sc_ih_irq, ncr_sc->sc_dev.dv_xname);
	sc->sc_clrintr = sbc_obio_clrintr;

	if (sc->sc_options)
		printf(": options=0x%x", sc->sc_options);
	printf("\n");

	/* Enable SCSI interrupts through VIA2 */
	sbc_intr_enable(ncr_sc);

#ifdef SBC_DEBUG
	if (sbc_debug)
		printf("%s: softc=%p regs=%p\n", ncr_sc->sc_dev.dv_xname,
		    sc, sc->sc_regs);
	ncr_sc->sc_link.flags |= sbc_link_flags;
#endif

	bzero(&saa, sizeof(saa));
	saa.saa_sc_link = &(ncr_sc->sc_link);

	/*
	 *  Initialize the SCSI controller itself.
	 */
	ncr5380_init(ncr_sc);
	ncr5380_reset_scsibus(ncr_sc);
	config_found(self, &saa, scsiprint);
}

/*
 * Interrupt support routines.
 */
void
sbc_intr_enable(ncr_sc)
	struct ncr5380_softc *ncr_sc;
{
	struct sbc_softc *sc = (struct sbc_softc *)ncr_sc;
	int s, flags;

	flags = V2IF_SCSIIRQ;
	if (sc->sc_options & SBC_INTR)
		flags |= V2IF_SCSIDRQ;

	s = splhigh();
	if (VIA2 == VIA2OFF)
		via2_reg(vIER) = 0x80 | flags;
	else
		via2_reg(rIER) = 0x80 | flags;
	splx(s);
}

void
sbc_intr_disable(ncr_sc)
	struct ncr5380_softc *ncr_sc;
{
	struct sbc_softc *sc = (struct sbc_softc *)ncr_sc;
	int s, flags;

	flags = V2IF_SCSIIRQ;
	if (sc->sc_options & SBC_INTR)
		flags |= V2IF_SCSIDRQ;

	s = splhigh();
	if (VIA2 == VIA2OFF)
		via2_reg(vIER) = flags;
	else
		via2_reg(rIER) = flags;
	splx(s);
}

void
sbc_obio_clrintr(ncr_sc)
	struct ncr5380_softc *ncr_sc;
{
	struct sbc_softc *sc = (struct sbc_softc *)ncr_sc;
	int flags;

	flags = V2IF_SCSIIRQ;
	if (sc->sc_options & SBC_INTR)
		flags |= V2IF_SCSIDRQ;

	if (VIA2 == VIA2OFF)
		via2_reg(vIFR) = 0x80 | flags;
	else
		via2_reg(rIFR) = 0x80 | flags;
}
@


1.17
log
@Remove all adapter-specific 'struct scsi_device's. They are never used. First
step in elminating 'struct scsi_device' entirely.

Spotted and initial diff from matthew@@.

ok matthew@@ dlg@@ deraadt@@ marco@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.16 2010/06/26 23:24:43 guenther Exp $	*/
@


1.16
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.15 2006/12/13 21:12:56 miod Exp $	*/
a168 1
	ncr_sc->sc_link.device = &sbc_dev;
@


1.15
log
@Remove the dma_eop callback in the ncr5380 driver md attachment, it was always
doing nothing and the mi code does not use it anymore anyway. No functional
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.14 2006/11/28 23:59:45 dlg Exp $	*/
a41 1
#include <sys/user.h>
@


1.14
log
@give scsi controllers a real attach args to fill in when attaching scsibus.

ok miod@@ marco@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.13 2006/04/14 09:36:49 martin Exp $	*/
a201 1
	ncr_sc->sc_dma_eop   = NULL;
a211 1
		ncr_sc->sc_dma_eop   = sbc_dma_eop;
@


1.13
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.12 2005/07/23 23:28:58 martin Exp $	*/
d120 1
d242 3
d250 1
a250 1
	config_found(self, &(ncr_sc->sc_link), scsiprint);
@


1.12
log
@vm_offset_t -> {vaddr_t, bus_addr_t}
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.11 2004/12/08 06:59:43 miod Exp $	*/
d122 1
a122 1
	/* Pull in the options flags. */ 
@


1.11
log
@Tweak interrupt handling code to allow shared interrupts for VIA2 sources.
This will be necessary shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.10 2004/12/02 06:43:25 miod Exp $	*/
d120 1
a120 1
	extern vm_offset_t SCSIBase;
d133 2
a134 2
		sc->sc_drq_addr = (vm_offset_t)(SCSIBase + SBC_HSK_OFS_IIFX);
		sc->sc_nodrq_addr = (vm_offset_t)(SCSIBase + SBC_DMA_OFS_IIFX);
d139 2
a140 2
		sc->sc_drq_addr = (vm_offset_t)(SCSIBase + SBC_HSK_OFS); /*??*/
		sc->sc_nodrq_addr = (vm_offset_t)(SCSIBase + SBC_DMA_OFS_PB500);
d151 2
a152 2
			sc->sc_drq_addr = (vm_offset_t)(0xfee00000 + SBC_HSK_OFS_DUO2);
			sc->sc_nodrq_addr = (vm_offset_t)(0xfee00000 + SBC_DMA_OFS_DUO2);
d158 2
a159 2
		sc->sc_drq_addr = (vm_offset_t)(SCSIBase + SBC_HSK_OFS);
		sc->sc_nodrq_addr = (vm_offset_t)(SCSIBase + SBC_DMA_OFS);
@


1.10
log
@Oops, repair *SBC kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.9 2002/03/14 01:26:35 millert Exp $	*/
d214 5
a218 2
		via2_register_irq(VIA2_SCSIDRQ, sbc_drq_intr, ncr_sc,
		    ncr_sc->sc_dev.dv_xname);
d221 4
a224 2
	via2_register_irq(VIA2_SCSIIRQ, sbc_irq_intr, ncr_sc,
	    ncr_sc->sc_dev.dv_xname);
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.8 2001/10/01 22:43:33 miod Exp $	*/
d214 2
a215 1
		via2_register_irq(VIA2_SCSIDRQ, sbc_drq_intr, ncr_sc);
d218 2
a219 1
	via2_register_irq(VIA2_SCSIIRQ, sbc_irq_intr, ncr_sc);
@


1.8
log
@Always use the IRQ interrupt, and let the SBC_INTR flag only control
the DRQ interrupt.
From NetBSD, improves GENERICSBC reliability. Tested by Takeshi Morimoto.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.7 2001/07/04 08:52:46 niklas Exp $	*/
d75 2
a76 2
static int	sbc_obio_match __P((struct device *, void *, void *));
static void	sbc_obio_attach __P((struct device *, struct device *, void *));
d78 3
a80 3
void	sbc_intr_enable __P((struct ncr5380_softc *));
void	sbc_intr_disable __P((struct ncr5380_softc *));
void	sbc_obio_clrintr __P((struct ncr5380_softc *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.8 2001/10/01 22:43:33 miod Exp $	*/
d75 2
a76 2
static int	sbc_obio_match(struct device *, void *, void *);
static void	sbc_obio_attach(struct device *, struct device *, void *);
d78 3
a80 3
void	sbc_intr_enable(struct ncr5380_softc *);
void	sbc_intr_disable(struct ncr5380_softc *);
void	sbc_obio_clrintr(struct ncr5380_softc *);
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: sbc_obio.c,v 1.1 1997/03/01 20:18:59 scottr Exp $	*/
d215 1
a215 3
		via2_register_irq(VIA2_SCSIIRQ, sbc_irq_intr, ncr_sc);
	} else
		ncr_sc->sc_flags |= NCR5380_FORCE_POLLING;
d217 2
a218 4
	if (sc->sc_options & SBC_INTR)
		sc->sc_clrintr = sbc_obio_clrintr;
	else
		sc->sc_clrintr = NULL;
d224 2
a225 3
	/* Now enable SCSI interrupts through VIA2, if appropriate */
	if (sc->sc_options & SBC_INTR)
		sbc_intr_enable(ncr_sc);
d249 6
a254 1
	int s;
d258 1
a258 1
		via2_reg(vIER) = 0x80 | (V2IF_SCSIIRQ | V2IF_SCSIDRQ);
d260 1
a260 1
		via2_reg(rIER) = 0x80 | (V2IF_SCSIIRQ | V2IF_SCSIDRQ);
d268 6
a273 1
	int s;
d277 1
a277 1
		via2_reg(vIER) = (V2IF_SCSIIRQ | V2IF_SCSIDRQ);
d279 1
a279 1
		via2_reg(rIER) = (V2IF_SCSIIRQ | V2IF_SCSIDRQ);
d287 7
d295 1
a295 1
		via2_reg(vIFR) = 0x80 | (V2IF_SCSIIRQ | V2IF_SCSIDRQ);
d297 1
a297 1
		via2_reg(rIFR) = 0x80 | (V2IF_SCSIIRQ | V2IF_SCSIDRQ);
@


1.6
log
@initialize sc_link.openings to it's (currently) default value of 4
@
text
@d1 1
@


1.5
log
@Associated fallout from removing macinfo.h and merging to cpu.h.
@
text
@d169 1
@


1.5.8.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@a168 1
	ncr_sc->sc_link.openings = 4;
@


1.5.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
d214 3
a216 1
	}
d218 4
a221 2
	via2_register_irq(VIA2_SCSIIRQ, sbc_irq_intr, ncr_sc);
	sc->sc_clrintr = sbc_obio_clrintr;
d227 3
a229 2
	/* Enable SCSI interrupts through VIA2 */
	sbc_intr_enable(ncr_sc);
d253 1
a253 6
	struct sbc_softc *sc = (struct sbc_softc *)ncr_sc;
	int s, flags;

	flags = V2IF_SCSIIRQ;
	if (sc->sc_options & SBC_INTR)
		flags |= V2IF_SCSIDRQ;
d257 1
a257 1
		via2_reg(vIER) = 0x80 | flags;
d259 1
a259 1
		via2_reg(rIER) = 0x80 | flags;
d267 1
a267 6
	struct sbc_softc *sc = (struct sbc_softc *)ncr_sc;
	int s, flags;

	flags = V2IF_SCSIIRQ;
	if (sc->sc_options & SBC_INTR)
		flags |= V2IF_SCSIDRQ;
d271 1
a271 1
		via2_reg(vIER) = flags;
d273 1
a273 1
		via2_reg(rIER) = flags;
a280 7
	struct sbc_softc *sc = (struct sbc_softc *)ncr_sc;
	int flags;

	flags = V2IF_SCSIIRQ;
	if (sc->sc_options & SBC_INTR)
		flags |= V2IF_SCSIDRQ;

d282 1
a282 1
		via2_reg(vIFR) = 0x80 | flags;
d284 1
a284 1
		via2_reg(rIFR) = 0x80 | flags;
@


1.5.8.3
log
@Merge in -current from about a week ago
@
text
@d75 2
a76 2
static int	sbc_obio_match(struct device *, void *, void *);
static void	sbc_obio_attach(struct device *, struct device *, void *);
d78 3
a80 3
void	sbc_intr_enable(struct ncr5380_softc *);
void	sbc_intr_disable(struct ncr5380_softc *);
void	sbc_obio_clrintr(struct ncr5380_softc *);
@


1.4
log
@Just plain ditch sn_printf of options.  We don't do things this way anyway.
@
text
@a51 1
#include <machine/macinfo.h>
@


1.3
log
@Include macinfo.h and more synch'ing with our mi sbc code.  This makes it
actually compile.
@
text
@a119 1
	char bits[64];
a224 2
/*		printf(": options=%s", bitmask_snprintf(sc->sc_options,
		    SBC_OPTIONS_BITS, bits, sizeof(bits))); */
@


1.2
log
@Comment out use of bitmask_snprintf and make this work with OpenBSD mi SCSI.
@
text
@d52 1
a217 3

	if ((sc->sc_options & SBC_RESELECT) == 0)
		ncr_sc->sc_no_disconnect = 0xff;
@


1.1
log
@Sync with NetBSD of about 4 March.
@
text
@a165 1
	ncr_sc->sc_link.channel = SCSI_CHANNEL_ONLY_ONE;
a169 1
	ncr_sc->sc_link.max_target = 7;
d227 3
a229 2
		printf(": options=%s", bitmask_snprintf(sc->sc_options,
		    SBC_OPTIONS_BITS, bits, sizeof(bits)));
@
