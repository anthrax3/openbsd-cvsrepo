head	1.14;
access;
symbols
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.26
	OPENBSD_5_0:1.13.0.24
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.22
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.20
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.16
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.18
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.14
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.12
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.10
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.26
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.24
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.22
	OPENBSD_2_9_BASE:1.6
	NIKLAS_UNDEAD:1.6.0.20
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.13;

1.13
date	2006.01.22.15.25.30;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.18.23.21.16;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.13.19.36.43;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.08.17.45.29;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.04.20.39.04;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.23.16.51.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.04.14.18.47.56;	author gene;	state Exp;
branches
	1.6.14.1
	1.6.26.1;
next	1.5;

1.5
date	97.02.23.06.04.55;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	97.01.24.01.35.28;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.18.35.17;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.13.34;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2004.02.19.10.49.02;	author niklas;	state Exp;
branches;
next	;

1.6.26.1
date	2002.06.11.03.36.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: adbvar.h,v 1.13 2006/01/22 15:25:30 miod Exp $	*/
/*	$NetBSD: adbvar.h,v 1.22 2005/01/15 16:00:59 chs Exp $	*/

/*
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

extern int adbHardware;

/* types of adb hardware that we (will eventually) support */
#define ADB_HW_UNKNOWN		0	/* don't know */
#define ADB_HW_II		1	/* Mac II series */
#define ADB_HW_IISI		2	/* Mac IIsi series */
#define ADB_HW_PB		3	/* PowerBook series */
#define ADB_HW_CUDA		4	/* Machines with a Cuda chip */
#define	ADB_HW_IOP		5	/* Machines with an IOP */

int	adb_poweroff(void);
int	adb_read_date_time(unsigned long *);
int	adb_set_date_time(unsigned long);
@


1.13
log
@Print adb subsystem name early in attachment, and pass the proper device
name to interrupt counter registration, rather than "adb".
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.12 2006/01/18 23:21:16 miod Exp $	*/
@


1.12
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.11 2006/01/13 19:36:43 miod Exp $	*/
d36 7
a42 7
/* types of adb hardware that we support */
#define ADB_HW_UNKNOWN		0x0	/* don't know */
#define ADB_HW_II		0x1	/* Mac II series */
#define ADB_HW_IISI		0x2	/* Mac IIsi series */
#define ADB_HW_PB		0x3	/* PowerBook series */
#define ADB_HW_CUDA		0x4	/* Machines with a Cuda chip */
#define	MAX_ADB_HW		4	/* Number of ADB hardware types */
@


1.11
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.10 2006/01/08 17:45:29 miod Exp $	*/
d34 1
a34 28
#include <machine/adbsys.h>

/*
 * Arguments used to attach a device to the Apple Desktop Bus
 */
struct adb_attach_args {
	int	origaddr;
	int	adbaddr;
	int	handler_id;
};

extern int	adb_polling;

#ifdef DEBUG
#ifndef ADB_DEBUG
#define ADB_DEBUG
#endif
#endif

#ifdef ADB_DEBUG
extern int	adb_debug;
#endif

typedef caddr_t Ptr;

/* adb.c */
int	adb_op_sync(Ptr, Ptr, Ptr, short);
void	adb_op_comprout(caddr_t, caddr_t, int);
a43 19
#define	ADB_CMDADDR(cmd)	((u_int8_t)(cmd & 0xf0) >> 4)
#define	ADBFLUSH(dev)		((((u_int8_t)dev & 0x0f) << 4) | 0x01)
#define	ADBLISTEN(dev, reg)	((((u_int8_t)dev & 0x0f) << 4) | 0x08 | reg)
#define	ADBTALK(dev, reg)	((((u_int8_t)dev & 0x0f) << 4) | 0x0c | reg)

/* ADB Manager */
typedef struct {
	Ptr siServiceRtPtr;
	Ptr siDataAreaAddr;
} ADBSetInfoBlock;

typedef struct {
	unsigned char	devType;
	unsigned char	origADBAddr;
	Ptr		dbServiceRtPtr;
	Ptr		dbDataAreaAddr;
} ADBDataBlock;

/* adb_direct.c */
a44 6
int	CountADBs(void);
void	ADBReInit(void);
int	GetIndADB(ADBDataBlock *, int);
int	GetADBInfo(ADBDataBlock *, int);
int	SetADBInfo(ADBSetInfoBlock *, int);
int	ADBOp(Ptr, Ptr, Ptr, short);
@


1.10
log
@Drop native MacOS support from the adb direct code, and skip callback
wrappers used to convert between MacOS pascal calling convention and the
C calling convention, unless option MRG_ADB. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.9 2006/01/04 20:39:04 miod Exp $	*/
a33 1
#include <mac68k/mac68k/macrom.h>
d57 2
a60 3
#ifdef MRG_ADB
void	adb_op_comprout(void);
#else
a61 1
#endif
d63 1
a63 5
/* adbsysasm.s */
void	adb_kbd_asmcomplete(void);
void	adb_ms_asmcomplete(void);

/* types of adb hardware that we (will eventually) support */
d76 13
a88 1
#ifndef MRG_ADB
a98 1
#endif /* !MRG_ADB */
@


1.9
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
d62 3
@


1.8
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 2
a2 2
/*	$OpenBSD: adbvar.h,v 1.7 2002/03/14 01:26:35 millert Exp $	*/
/*	$NetBSD: adbvar.h,v 1.5 1997/01/13 07:01:24 scottr Exp $	*/
d4 1
a4 1
/*-
d34 1
d37 16
a52 9
#define ADB_MAXTRACE	(NBPG / sizeof(int) - 1)
extern int adb_traceq[ADB_MAXTRACE];
extern int adb_traceq_tail;
extern int adb_traceq_len;

typedef struct adb_trace_xlate_s {
	int     params;
	char   *string;
}       adb_trace_xlate_t;
d54 3
a56 1
extern adb_trace_xlate_t adb_trace_xlations[];
d59 2
a60 20
void    adb_asmcomplete(void);
void	adb_enqevent(adb_event_t *event);
void	adb_handoff(adb_event_t *event);
void	adb_autorepeat(void *keyp);
void	adb_dokeyupdown(adb_event_t *event);
void	adb_keymaybemouse(adb_event_t *event);
void	adb_processevent(adb_event_t *event);
int	adbopen(dev_t dev, int flag, int mode, struct proc *p);
int	adbclose(dev_t dev, int flag, int mode, struct proc *p);
int	adbread(dev_t dev, struct uio *uio, int flag);
int	adbwrite(dev_t dev, struct uio *uio, int flag);
int	adbioctl(dev_t , int , caddr_t , int , struct proc *);
int	adbpoll(dev_t dev, int rw, struct proc *p);

/* adbsysadm.s */
void	extdms_complete(void);

/* adbsys.c */
void	adb_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	extdms_init(int);
d62 3
a64 1
#ifndef MRG_ADB
d67 11
a77 5
#define ADB_HW_UNKNOWN		0x01	/* don't know */
#define ADB_HW_II		0x02	/* Mac II series */
#define ADB_HW_IISI		0x03	/* Mac IIsi series */
#define ADB_HW_PB		0x04	/* PowerBook series */
#define ADB_HW_CUDA		0x05	/* Machines with a Cuda chip */
d79 1
d84 7
a90 8
int	GetIndADB(ADBDataBlock * info, int index);
int	GetADBInfo(ADBDataBlock * info, int adbAddr);
int	SetADBInfo(ADBSetInfoBlock * info, int adbAddr);
int	ADBOp(Ptr buffer, Ptr compRout, Ptr data, short commandNum);
int	adb_read_date_time(unsigned long *t);
int	adb_set_date_time(unsigned long t);

#endif
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.6 1997/04/14 18:47:56 gene Exp $	*/
d61 1
a61 1
int	adbselect(dev_t dev, int rw, struct proc *p);
@


1.6
log
@Bring our incarnation of John Wittowski's direct adb driver into compatible
state with NetBSD's.  The direct-to-ADB code is now enabled by default.
Using 'options MRG_ADB' will cause the kernel to revert to the 'old standby'
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.5 1997/02/23 06:04:55 briggs Exp $	*/
d49 13
a61 13
void    adb_asmcomplete __P((void));
void	adb_enqevent __P((adb_event_t *event));
void	adb_handoff __P((adb_event_t *event));
void	adb_autorepeat __P((void *keyp));
void	adb_dokeyupdown __P((adb_event_t *event));
void	adb_keymaybemouse __P((adb_event_t *event));
void	adb_processevent __P((adb_event_t *event));
int	adbopen __P((dev_t dev, int flag, int mode, struct proc *p));
int	adbclose __P((dev_t dev, int flag, int mode, struct proc *p));
int	adbread __P((dev_t dev, struct uio *uio, int flag));
int	adbwrite __P((dev_t dev, struct uio *uio, int flag));
int	adbioctl __P((dev_t , int , caddr_t , int , struct proc *));
int	adbselect __P((dev_t dev, int rw, struct proc *p));
d64 1
a64 1
void	extdms_complete __P((void));
d67 2
a68 2
void	adb_complete __P((caddr_t buffer, caddr_t data_area, int adb_command));
void	extdms_init __P((int));
d80 9
a88 9
int	adb_poweroff __P((void));
int	CountADBs __P((void));
void	ADBReInit __P((void));
int	GetIndADB __P((ADBDataBlock * info, int index));
int	GetADBInfo __P((ADBDataBlock * info, int adbAddr));
int	SetADBInfo __P((ADBSetInfoBlock * info, int adbAddr));
int	ADBOp __P((Ptr buffer, Ptr compRout, Ptr data, short commandNum));
int	adb_read_date_time __P((unsigned long *t));
int	adb_set_date_time __P((unsigned long t));
@


1.6.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.6 1997/04/14 18:47:56 gene Exp $	*/
d49 13
a61 13
void    adb_asmcomplete(void);
void	adb_enqevent(adb_event_t *event);
void	adb_handoff(adb_event_t *event);
void	adb_autorepeat(void *keyp);
void	adb_dokeyupdown(adb_event_t *event);
void	adb_keymaybemouse(adb_event_t *event);
void	adb_processevent(adb_event_t *event);
int	adbopen(dev_t dev, int flag, int mode, struct proc *p);
int	adbclose(dev_t dev, int flag, int mode, struct proc *p);
int	adbread(dev_t dev, struct uio *uio, int flag);
int	adbwrite(dev_t dev, struct uio *uio, int flag);
int	adbioctl(dev_t , int , caddr_t , int , struct proc *);
int	adbselect(dev_t dev, int rw, struct proc *p);
d64 1
a64 1
void	extdms_complete(void);
d67 2
a68 2
void	adb_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	extdms_init(int);
d80 9
a88 9
int	adb_poweroff(void);
int	CountADBs(void);
void	ADBReInit(void);
int	GetIndADB(ADBDataBlock * info, int index);
int	GetADBInfo(ADBDataBlock * info, int adbAddr);
int	SetADBInfo(ADBSetInfoBlock * info, int adbAddr);
int	ADBOp(Ptr buffer, Ptr compRout, Ptr data, short commandNum);
int	adb_read_date_time(unsigned long *t);
int	adb_set_date_time(unsigned long t);
@


1.6.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 13
a61 13
void    adb_asmcomplete(void);
void	adb_enqevent(adb_event_t *event);
void	adb_handoff(adb_event_t *event);
void	adb_autorepeat(void *keyp);
void	adb_dokeyupdown(adb_event_t *event);
void	adb_keymaybemouse(adb_event_t *event);
void	adb_processevent(adb_event_t *event);
int	adbopen(dev_t dev, int flag, int mode, struct proc *p);
int	adbclose(dev_t dev, int flag, int mode, struct proc *p);
int	adbread(dev_t dev, struct uio *uio, int flag);
int	adbwrite(dev_t dev, struct uio *uio, int flag);
int	adbioctl(dev_t , int , caddr_t , int , struct proc *);
int	adbselect(dev_t dev, int rw, struct proc *p);
d64 1
a64 1
void	extdms_complete(void);
d67 2
a68 2
void	adb_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	extdms_init(int);
d80 9
a88 9
int	adb_poweroff(void);
int	CountADBs(void);
void	ADBReInit(void);
int	GetIndADB(ADBDataBlock * info, int index);
int	GetADBInfo(ADBDataBlock * info, int adbAddr);
int	SetADBInfo(ADBSetInfoBlock * info, int adbAddr);
int	ADBOp(Ptr buffer, Ptr compRout, Ptr data, short commandNum);
int	adb_read_date_time(unsigned long *t);
int	adb_set_date_time(unsigned long t);
@


1.6.14.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d61 1
a61 1
int	adbpoll(dev_t dev, int rw, struct proc *p);
@


1.5
log
@Integrate code from John P. Wittkoski <jpw@@netwizards.net> and
Takashi Hamada <hamada@@next.etron.kanazawa-it.ac.jp>.  This code
interfaces directly to the hardware to support the ADB on many
macs.  It is enabled by "options HWDIRECT" in the configuration
file.  At some point, this should probably become the default method
as interfacing to the ADB through the ROMs has been painful and sometimes
problematic.

This code should have functioning ADB support for:
	II series (II, SE/30, IIx, IIcx)
	IIsi series (IIsi, IIci, IIvx, IIvi)
	LC II, LC III
	Performa 400, 405, 430, 460, 465, 467, 600
	Classic II, Color Classic, Color Classic II
	PB 5XX series
	Duo series
	PB 140,145,145b,160,(160c?),165,165c,170,180,180c
	Quadra 700,900,950
There is an off-chance that it will work on:
	PB 150, PB 190
	Quadra/Centris 605,610,630,650,660AV,800,840AV
	LC 475,550,575,630
	Performa 475,476,575,577,578,630
Note that functioning ADB support does not mean that everything else
will work.  I obviously do not own all of the above machines (does
anyone?  ;-)...  Any reports are welcome.

Many thanks to John Wittkoski and Takashi Hamada!
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.4 1997/01/24 01:35:28 briggs Exp $	*/
d70 1
a70 1
#ifdef HWDIRECT
@


1.4
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.3 1996/05/26 18:35:17 briggs Exp $	*/
d34 2
d69 22
@


1.3
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: adbvar.h,v 1.3 1996/05/05 06:16:24 briggs Exp $	*/
d66 1
a66 1
void	extdms_init __P((void));
@


1.2
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: adbvar.h,v 1.2 1995/04/21 02:47:44 briggs Exp $	*/
d44 22
a65 1
void    adb_asmcomplete();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
