head	1.28;
access;
symbols
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.12
	OPENBSD_5_0:1.27.0.10
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.8
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.6
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.4
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.26.0.6
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.4
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.2
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.23.0.4
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.22.0.4
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.2
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.20.0.4
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.8
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.6
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	UBC_SYNC_B:1.14
	UBC:1.13.0.14
	UBC_BASE:1.13
	OPENBSD_3_0:1.13.0.12
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.10
	OPENBSD_2_9_BASE:1.13
	NIKLAS_UNDEAD:1.13.0.8
	OPENBSD_2_8:1.13.0.6
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.4
	OPENBSD_2_7_BASE:1.13
	SMP:1.13.0.2
	SMP_BASE:1.13
	kame_19991208:1.13
	OPENBSD_2_6:1.12.0.4
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.28
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.27;

1.27
date	2009.03.15.20.40.25;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2008.01.23.16.37.56;	author jsing;	state Exp;
branches;
next	1.25;

1.25
date	2007.11.24.12.59.28;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2007.10.22.14.46.46;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.14.18.50.23;	author martin;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.09.20.56.59;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.07.20.46.57;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.26.22.34.53;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.09.00.50.11;	author martin;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.08.20.24.23;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.26.21.21.24;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.25.18.32.10;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.09.21.46.47;	author xsa;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	99.11.15.06.12.49;	author d;	state Exp;
branches
	1.13.2.1
	1.13.14.1;
next	1.12;

1.12
date	99.01.11.05.11.35;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.05.03.07.13.03;	author gene;	state Exp;
branches;
next	1.10;

1.10
date	97.06.20.22.32.10;	author gene;	state Exp;
branches;
next	1.9;

1.9
date	97.03.12.13.36.59;	author briggs;	state Exp;
branches;
next	1.8;

1.8
date	97.03.11.21.03.03;	author gene;	state Exp;
branches;
next	1.7;

1.7
date	97.01.24.01.35.39;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	96.10.28.14.46.26;	author briggs;	state Exp;
branches;
next	1.5;

1.5
date	96.10.13.15.29.09;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	96.06.09.03.17.48;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.06.08.16.21.13;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.06.08.16.01.42;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	96.05.26.19.02.14;	author briggs;	state Exp;
branches;
next	;

1.13.2.1
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2004.06.05.23.10.51;	author niklas;	state Exp;
branches;
next	;

1.13.14.1
date	2002.06.11.03.36.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: zs.c,v 1.27 2009/03/15 20:40:25 miod Exp $	*/
/*	$NetBSD: zs.c,v 1.19 1998/01/12 19:22:18 thorpej Exp $	*/

/*
 * Copyright (c) 1996-1998 Bill Studenmund
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Zilog Z8530 Dual UART driver (machine-dependent part)
 *
 * Runs two serial lines per chip using slave drivers.
 * Plain tty/async lines use the zs_async slave.
 * Sun keyboard/mouse uses the zs_kbd/zs_ms slaves.
 * Other ports use their own mice & keyboard slaves.
 *
 * Credits & history:
 *
 * With NetBSD 1.1, port-mac68k started using a port of the port-sparc
 * (port-sun3?) zs.c driver (which was in turn based on code in the
 * Berkeley 4.4 Lite release). Bill Studenmund did the port, with
 * help from Allen Briggs and Gordon Ross <gwr@@netbsd.org>. Noud de
 * Brouwer field-tested the driver at a local ISP.
 *
 * Bill Studenmund and Gordon Ross then ported the machine-independant
 * z8530 driver to work with port-mac68k. NetBSD 1.2 contained an
 * intermediate version (mac68k using a local, patched version of
 * the m.i. drivers), with NetBSD 1.3 containing a full version.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/syslog.h>

#include <dev/cons.h>

#include <mac68k/dev/z8530reg.h>
#include <machine/z8530var.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <machine/psc.h>
#include <machine/viareg.h>

#ifdef DDB
#include <ddb/db_var.h>
#endif

/* Are these in a header file anywhere? */
/* Booter flags interface */
#define ZSMAC_RAW	0x01
#define ZSMAC_LOCALTALK	0x02
#define	ZS_STD_BRG	(57600*4)

#include "zsc.h"	/* get the # of zs chips defined */

/*
 * Some warts needed by z8530tty.c -
 */
int zs_def_cflag = (CREAD | CS8 | HUPCL);
int zs_major = 12;

/*
 * abort detection on console will now timeout after iterating on a loop
 * the following # of times. Cheep hack. Also, abort detection is turned
 * off after a timeout (i.e. maybe there's not a terminal hooked up).
 */
#define ZSABORT_DELAY 3000000

/*
 * Define interrupt levels.
 */
#define ZSHARD_PRI	4	/* Wired on the CPU board... */
/*
 * Serial port cards with zs chips on them are actually at the
 * NuBus interrupt level, which is lower than 4. But blocking
 * level 4 interrupts will block those interrupts too, so level
 * 4 is fine.
 */

/* The layout of this is hardware-dependent (padding, order). */
struct zschan {
	volatile u_char	zc_csr;		/* ctrl,status, and indirect access */
	u_char		zc_xxx0;
	u_char		zc_xxx1;	/* part of the other channel lives here!*/
	u_char		zc_xxx2;	/* Yea Apple! */
	volatile u_char	zc_data;	/* data */
	u_char		zc_xxx3;
	u_char		zc_xxx4;
	u_char		zc_xxx5;
};

/* Saved PROM mappings */
static char *zsaddr[NZSC];	/* See zs_init() */
/* Flags from cninit() */
static int zs_hwflags[NZSC][2];
/* Default speed for each channel */
static int zs_defspeed[NZSC][2] = {
	{ 9600, 	/* tty00 */
	  9600 },	/* tty01 */
};
void	*zs_conschan = 0;
int	zs_consunit;
/* Mac stuff */
volatile unsigned char *sccA = 0;
int	nzsc_attached = 0;	/* needed as long as we have spurious
				 * interrupt problems.
				 */

static struct zschan	*zs_get_chan_addr(int zsc_unit, int channel);
void			zs_init(void);
int			zs_cn_check_speed(int bps);

static struct zschan *
zs_get_chan_addr(zsc_unit, channel)
	int zsc_unit, channel;
{
	char *addr;
	struct zschan *zc;

	if (zsc_unit >= NZSC)
		return NULL;
	addr = zsaddr[zsc_unit];
	if (addr == NULL)
		return NULL;
	if (channel == 0) {
		zc = (struct zschan *)(addr +2);
		/* handle the fact the ports are intertwined. */
	} else {
		zc = (struct zschan *)(addr);
	}
	return (zc);
}


/* Find PROM mappings (for console support). */
int zsinited = 0; /* 0 = not, 1 = inited, not attached, 2= attached */

void
zs_init()
{
	if ((zsinited == 2)&&(zsaddr[0] != (char *) sccA))
		panic("Moved zs0 address after attached!");
	zsaddr[0] = (char *) sccA;
	zsinited = 1;
	if (zs_conschan != 0){ /* we might have moved io under the console */
		zs_conschan = zs_get_chan_addr(0, zs_consunit);
		/* so recalc the console port */
	}
}	


/*
 * Even though zsparam will set up the clock multiples, etc., we
 * still set them here as: 1) mice & keyboards don't use zsparam,
 * and 2) the console stuff uses these defaults before device
 * attach.
 */

static u_char zs_init_reg[16] = {
	0,	/* 0: CMD (reset, etc.) */
	ZSWR1_RIE | ZSWR1_TIE | ZSWR1_SIE,
	0x18 + ZSHARD_PRI,	/* IVECT */
	ZSWR3_RX_8 | ZSWR3_RX_ENABLE,
	ZSWR4_CLK_X16 | ZSWR4_ONESB | ZSWR4_EVENP,
	ZSWR5_TX_8 | ZSWR5_TX_ENABLE,
	0,	/* 6: TXSYNC/SYNCLO */
	0,	/* 7: RXSYNC/SYNCHI */
	0,	/* 8: alias for data port */
	ZSWR9_MASTER_IE,
	0,	/*10: Misc. TX/RX control bits */
	ZSWR11_TXCLK_BAUD | ZSWR11_RXCLK_BAUD,
	14,	/*12: BAUDLO (default=9600) */
	0,	/*13: BAUDHI (default=9600) */
	ZSWR14_BAUD_ENA,
	ZSWR15_BREAK_IE | ZSWR15_DCD_IE | ZSWR15_CTS_IE,
};


/****************************************************************
 * Autoconfig
 ****************************************************************/

/* Definition of the driver for autoconfig. */
static int	zsc_match(struct device *, void *, void *);
static void	zsc_attach(struct device *, struct device *, void *);
static int	zsc_print(void *, const char *name);

struct cfattach zsc_ca = {
	sizeof(struct zsc_softc), zsc_match, zsc_attach
};

struct cfdriver zsc_cd = {
	NULL, "zsc", DV_DULL
};

int zshard(void *);
void zssoft(void *);


/*
 * Is the zs chip present?
 */
static int
zsc_match(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void *aux;
{
	return 1;
}

/*
 * Attach a found zs.
 *
 * Match slave number to zs unit number, so that misconfiguration will
 * not set up the keyboard as ttya, etc.
 */
static void
zsc_attach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct zsc_softc *zsc = (void *)self;
	struct zsc_attach_args zsc_args;
	volatile struct zschan *zc;
	struct xzs_chanstate *xcs;
	struct zs_chanstate *cs;
	int zsc_unit, channel;
	int s, chip, theflags;

	if (!zsinited)
		zs_init();	
	zsinited = 2;

	zsc_unit = zsc->zsc_dev.dv_unit;

	/* Make sure everything's inited ok. */
	if (zsaddr[zsc_unit] == NULL)
		panic("zs_attach: zs%d not mapped", zsc_unit);

	chip = 0;
#ifdef DEBUG
	printf(" chip type %d",chip);
#endif
	printf("\n");

	/*
	 * Initialize software state for each channel.
	 */
	for (channel = 0; channel < 2; channel++) {
		zsc_args.channel = channel;
		zsc_args.hwflags = zs_hwflags[zsc_unit][channel];
		xcs = &zsc->xzsc_xcs_store[channel];
		cs  = &xcs->xzs_cs;
		zsc->zsc_cs[channel] = cs;

		cs->cs_channel = channel;
		cs->cs_private = NULL;
		cs->cs_ops = &zsops_null;

		zc = zs_get_chan_addr(zsc_unit, channel);
		cs->cs_reg_csr  = &zc->zc_csr;
		cs->cs_reg_data = &zc->zc_data;

		if (channel == 0) /* Double check interrupts are off */
			zs_write_reg(cs, 9, 0);

		bcopy(zs_init_reg, cs->cs_creg, 16);
		bcopy(zs_init_reg, cs->cs_preg, 16);

		/* Current BAUD rate generator clock. */
		cs->cs_brg_clk = ZS_STD_BRG;	/* RTxC is 230400*16, so use 230400 */
		cs->cs_defspeed = zs_defspeed[zsc_unit][channel];
		cs->cs_defcflag = zs_def_cflag;

		/* Make these correspond to cs_defcflag (-crtscts) */
		cs->cs_rr0_dcd = ZSRR0_DCD;
		cs->cs_rr0_cts = 0;
		cs->cs_wr5_dtr = ZSWR5_DTR;
		cs->cs_wr5_rts = 0;

#ifdef __notyet__
		cs->cs_slave_type = ZS_SLAVE_NONE;
#endif

		/* Define BAUD rate stuff. */
		xcs->cs_clocks[0].clk = ZS_STD_BRG * 16;
		xcs->cs_clocks[0].flags = ZSC_RTXBRG;
		xcs->cs_clocks[1].flags =
			ZSC_RTXBRG | ZSC_RTXDIV | ZSC_VARIABLE | ZSC_EXTERN;
		xcs->cs_clocks[2].flags = ZSC_TRXDIV | ZSC_VARIABLE;
		xcs->cs_clock_count = 3;

		if (channel == 0) {
			theflags = mac68k_machine.modem_flags;
			xcs->cs_clocks[1].clk = mac68k_machine.modem_dcd_clk;
			xcs->cs_clocks[2].clk = mac68k_machine.modem_cts_clk;
		} else {
			theflags = mac68k_machine.print_flags;
			xcs->cs_clocks[1].flags = ZSC_VARIABLE;
			/*
			 * Yes, we aren't defining ANY clock source enables for
			 * the printer's DCD clock in. The hardware won't let
			 * us use it. But a clock will freak out the chip, so
			 * we let you set it, telling us to bar interrupts on
			 * the line.
			 */
			xcs->cs_clocks[1].clk = mac68k_machine.print_dcd_clk;
			xcs->cs_clocks[2].clk = mac68k_machine.print_cts_clk;
		}
		if (xcs->cs_clocks[1].clk)
			zsc_args.hwflags |= ZS_HWFLAG_NO_DCD;
		if (xcs->cs_clocks[2].clk)
			zsc_args.hwflags |= ZS_HWFLAG_NO_CTS;

#ifdef DEBUG
		printf("zsc%d channel %d: d_speed %6d DCD clk %ld CTS clk %ld",
			zsc_unit, channel, cs->cs_defspeed,
			xcs->cs_clocks[1].clk, xcs->cs_clocks[2].clk);
#endif

		/* Set defaults in our "extended" chanstate. */
		xcs->cs_csource = 0;
		xcs->cs_psource = 0;
		xcs->cs_cclk_flag = 0;	/* Nothing fancy by default */
		xcs->cs_pclk_flag = 0;

		if (theflags & ZSMAC_RAW) {
			zsc_args.hwflags |= ZS_HWFLAG_RAW;
#ifdef DEBUG
			printf(" (raw defaults)");
#endif
		}

		/*
		 * XXX - This might be better done with a "stub" driver
		 * (to replace zstty) that ignores LocalTalk for now.
		 */
		if (theflags & ZSMAC_LOCALTALK) {
			printf(" shielding from LocalTalk");
			cs->cs_defspeed = 1;
			cs->cs_creg[ZSRR_BAUDLO] = cs->cs_preg[ZSRR_BAUDLO] = 0xff;
			cs->cs_creg[ZSRR_BAUDHI] = cs->cs_preg[ZSRR_BAUDHI] = 0xff;
			zs_write_reg(cs, ZSRR_BAUDLO, 0xff);
			zs_write_reg(cs, ZSRR_BAUDHI, 0xff);
			/*
			 * If we might have LocalTalk, then make sure we have
			 * the Baud rate low-enough to not do any damage.
			 */
		}

		/*
		 * We used to disable chip interrupts here, but we now
		 * do that in zscnprobe, just in case MacOS left the chip on.
		 */

		xcs->cs_chip = chip;

		/* Stash away a copy of the final H/W flags. */
		xcs->cs_hwflags = zsc_args.hwflags;

#ifdef DEBUG
		printf("\n");
#endif

		/*
		 * Look for a child driver for this channel.
		 * The child attach will setup the hardware.
		 */
		if (!config_found(self, (void *)&zsc_args, zsc_print)) {
			/* No sub-driver.  Just reset it. */
			u_char reset = (channel == 0) ?
				ZSWR9_A_RESET : ZSWR9_B_RESET;
			s = splzs();
			zs_write_reg(cs,  9, reset);
			splx(s);
		}
	}

	/* XXX - Now safe to install interrupt handlers. */

	if (current_mac_model->class == MACH_CLASSAV) {
		add_psc_lev4_intr(PSCINTR_SCCA, zshard, zsc);
		add_psc_lev4_intr(PSCINTR_SCCB, zshard, zsc);
	} else {
		intr_establish(zshard, zsc, ZSHARD_PRI, self->dv_xname);
	}

	zsc->zsc_softih = softintr_establish(IPL_SOFTTTY, zssoft, zsc);

	/*
	 * Set the master interrupt enable and interrupt vector.
	 * (common to both channels, do it on A)
	 */
	cs = zsc->zsc_cs[0];
	s = splzs();
	/* interrupt vector */
	zs_write_reg(cs, 2, zs_init_reg[2]);
	/* master interrupt control (enable) */
	zs_write_reg(cs, 9, zs_init_reg[9]);
	nzsc_attached++;
	splx(s);
}

static int
zsc_print(aux, name)
	void *aux;
	const char *name;
{
	struct zsc_attach_args *args = aux;

	if (name != NULL)
		printf("%s: ", name);

	if (args->channel != -1)
		printf(" channel %d", args->channel);
	return UNCONF;
}

int
zsmdioctl(cs, cmd, data)
	struct zs_chanstate *cs;
	u_long cmd;
	caddr_t data;
{
	switch (cmd) {
	default:
		return (-1);
	}
	return (0);
}

void
zsmd_setclock(cs)
	struct zs_chanstate *cs;
{
	struct xzs_chanstate *xcs = (void *)cs;

	if (cs->cs_channel != 0)
		return;

	/*
	 * If the new clock has the external bit set, then select the
	 * external source.
	 */
	via_set_modem((xcs->cs_pclk_flag & ZSC_EXTERN) ? 1 : 0);
}

/*
 * Do the minimum work to pull data off of the chip and queue it up
 * for later processing.
 */
int
zshard(arg)
	void *arg;
{
	struct zsc_softc *zsc = (struct zsc_softc *)arg;
	int rr3, rval;

	/*
	 * The horror: the adb subsystem will invoke us directly.
	 * However if we were already servicing an interrupt,
	 * we'll lose bigtime. Don't allow such reentrancy.
	 */
	static int zshard_busy = 0;

	if (zshard_busy != 0)
		return 0;

	if (zsc == NULL)
		return 0;

	zshard_busy++;

	rval = 0;
	while ((rr3 = zsc_intr_hard(zsc)))
		rval |= rr3;

	if ((zsc->zsc_cs[0]->cs_softreq) || (zsc->zsc_cs[1]->cs_softreq)) {
		/* zsc_req_softint(zsc); */
		softintr_schedule(zsc->zsc_softih);
	}

	zshard_busy--;

	return (rval);
}

void
zssoft(arg)
	void *arg;
{
	struct zsc_softc *zsc = (struct zsc_softc *)arg;
	int s;

	s = spltty();
	zsc_intr_soft(zsc);
	splx(s);
}

#ifndef ZS_TOLERANCE
#define ZS_TOLERANCE 51
/* 5% in tenths of a %, plus 1 so that exactly 5% will be ok. */
#endif

/*
 * check out a rate for acceptability from the internal clock
 * source. Used in console config to validate a requested
 * default speed. Placed here so that all the speed checking code is
 * in one place.
 *
 * != 0 means ok.
 */
int
zs_cn_check_speed(bps)
	int bps;	/* target rate */
{
	int tc, rate;

	tc = BPS_TO_TCONST(ZS_STD_BRG, bps);
	if (tc < 0)
		return 0;
	rate = TCONST_TO_BPS(ZS_STD_BRG, tc);
	if (ZS_TOLERANCE > abs(((rate - bps)*1000)/bps))
		return 1;
	else
		return 0;
}

/*
 * Search through the signal sources in the channel, and
 * pick the best one for the baud rate requested. Return
 * a -1 if not achievable in tolerance. Otherwise return 0
 * and fill in the values.
 *
 * This routine draws inspiration from the Atari port's zs.c
 * driver in NetBSD 1.1 which did the same type of source switching.
 * Tolerance code inspired by comspeed routine in isa/com.c.
 *
 * By Bill Studenmund, 1996-05-12
 */
int
zs_set_speed(cs, bps)
	struct zs_chanstate *cs;
	int bps;	/* bits per second */
{
	struct xzs_chanstate *xcs = (void *) cs;
	int i, tc, tc0 = 0, tc1, s, sf = 0;
	int src, rate0, rate1, err, tol;

	if (bps == 0)
		return (0);

	src = -1;		/* no valid source yet */
	tol = ZS_TOLERANCE;

	/*
	 * Step through all the sources and see which one matches
	 * the best. A source has to match BETTER than tol to be chosen.
	 * Thus if two sources give the same error, the first one will be
	 * chosen. Also, allow for the possability that one source might run
	 * both the BRG and the direct divider (i.e. RTxC).
	 */
	for (i=0; i < xcs->cs_clock_count; i++) {
		if (xcs->cs_clocks[i].clk <= 0)
			continue;	/* skip non-existent or bad clocks */
		if (xcs->cs_clocks[i].flags & ZSC_BRG) {
			/* check out BRG at /16 */
			tc1 = BPS_TO_TCONST(xcs->cs_clocks[i].clk >> 4, bps);
			if (tc1 >= 0) {
				rate1 = TCONST_TO_BPS(xcs->cs_clocks[i].clk >> 4, tc1);
				err = abs(((rate1 - bps)*1000)/bps);
				if (err < tol) {
					tol = err;
					src = i;
					sf = xcs->cs_clocks[i].flags & ~ZSC_DIV;					tc0 = tc1;
					rate0 = rate1;
				}
			}
		}
		if (xcs->cs_clocks[i].flags & ZSC_DIV) {
			/*
			 * Check out either /1, /16, /32, or /64
			 * Note: for /1, you'd better be using a synchronized
			 * clock!
			 */
			int b0 = xcs->cs_clocks[i].clk, e0 = abs(b0-bps);
			int b1 = b0 >> 4, e1 = abs(b1-bps);
			int b2 = b1 >> 1, e2 = abs(b2-bps);
			int b3 = b2 >> 1, e3 = abs(b3-bps);

			if (e0 < e1 && e0 < e2 && e0 < e3) {
				err = e0;
				rate1 = b0;
				tc1 = ZSWR4_CLK_X1;
			} else if (e0 > e1 && e1 < e2  && e1 < e3) {
				err = e1;
				rate1 = b1;
				tc1 = ZSWR4_CLK_X16;
			} else if (e0 > e2 && e1 > e2 && e2 < e3) {
				err = e2;
				rate1 = b2;
				tc1 = ZSWR4_CLK_X32;
			} else {
				err = e3;
				rate1 = b3;
				tc1 = ZSWR4_CLK_X64;
			}

			err = (err * 1000)/bps;
			if (err < tol) {
				tol = err;
				src = i;
				sf = xcs->cs_clocks[i].flags & ~ZSC_BRG;
				tc0 = tc1;
				rate0 = rate1;
			}
		}
	}
#ifdef ZSMACDEBUG
	printf("Checking for rate %d. Found source #%d.\n",bps, src);
#endif
	if (src == -1)
		return (EINVAL); /* no can do */

	/*
	 * The M.I. layer likes to keep cs_brg_clk current, even though
	 * we are the only ones who should be touching the BRG's rate.
	 *
	 * Note: we are assuming that any ZSC_EXTERN signal source comes in
	 * on the RTxC pin. Correct for the mac68k obio zsc.
	 */
	if (sf & ZSC_EXTERN)
		cs->cs_brg_clk = xcs->cs_clocks[i].clk >> 4;
	else
		cs->cs_brg_clk = ZS_STD_BRG;

	/*
	 * Now we have a source, so set it up.
	 */
	s = splzs();
	xcs->cs_psource = src;
	xcs->cs_pclk_flag = sf;
	bps = rate0;
	if (sf & ZSC_BRG) {
		cs->cs_preg[4] = ZSWR4_CLK_X16;
		cs->cs_preg[11]= ZSWR11_RXCLK_BAUD | ZSWR11_TXCLK_BAUD;
		if (sf & ZSC_PCLK) {
			cs->cs_preg[14] = ZSWR14_BAUD_ENA | ZSWR14_BAUD_FROM_PCLK;
		} else {
			cs->cs_preg[14] = ZSWR14_BAUD_ENA;
		}
		tc = tc0;
	} else {
		cs->cs_preg[4] = tc0;
		if (sf & ZSC_RTXDIV) {
			cs->cs_preg[11] = ZSWR11_RXCLK_RTXC | ZSWR11_TXCLK_RTXC;		} else {
			cs->cs_preg[11] = ZSWR11_RXCLK_TRXC | ZSWR11_TXCLK_TRXC;		}
		cs->cs_preg[14]= 0;
		tc = 0xffff;
	}
	/* Set the BAUD rate divisor. */
	cs->cs_preg[12] = tc;
	cs->cs_preg[13] = tc >> 8;
	splx(s);

#ifdef ZSMACDEBUG
	printf("Rate is %7d, tc is %7d, source no. %2d, flags %4x\n", \
		bps, tc, src, sf);
	printf("Registers are: 4 %x, 11 %x, 14 %x\n\n",
		cs->cs_preg[4], cs->cs_preg[11], cs->cs_preg[14]);
#endif

	cs->cs_preg[5] |= ZSWR5_RTS;    /* Make sure the drivers are on! */	

	/* Caller will stuff the pending registers. */
	return (0);
}

int
zs_set_modes(cs, cflag)
	struct zs_chanstate *cs;
	int cflag;	/* bits per second */
{
	struct xzs_chanstate *xcs = (void*)cs;
	int s;

	/*
	 * Make sure we don't enable hfc on a signal line we're ignoring.
	 * As we enable CTS interrupts only if we have CRTSCTS or CDTRCTS,
	 * this code also effectivly turns off ZSWR15_CTS_IE.
	 *
	 * Also, disable DCD interrupts if we've been told to ignore
	 * the DCD pin. Happens on mac68k because the input line for
	 * DCD can also be used as a clock input.  (Just set CLOCAL.)
	 *
	 * If someone tries to turn an invalid flow mode on, Just Say No
	 * (Suggested by gwr)
	 */
#if 0
	if ((cflag & CDTRCTS) && (cflag & (CRTSCTS | MDMBUF)))
		return (EINVAL);
#endif
	if (xcs->cs_hwflags & ZS_HWFLAG_NO_DCD) {
		if (cflag & MDMBUF)
			return (EINVAL);
		cflag |= CLOCAL;
	}
#if 0
	if ((xcs->cs_hwflags & ZS_HWFLAG_NO_CTS) && (cflag & (CRTSCTS | CDTRCTS)))
		return (EINVAL);
#endif

	/*
	 * Output hardware flow control on the chip is horrendous:
	 * if carrier detect drops, the receiver is disabled, and if
	 * CTS drops, the transmitter is stopped IN MID CHARACTER!
	 * Therefore, NEVER set the HFC bit, and instead use the
	 * status interrupt to detect CTS changes.
	 */
	s = splzs();
	if ((cflag & (CLOCAL | MDMBUF)) != 0)
		cs->cs_rr0_dcd = 0;
	else
		cs->cs_rr0_dcd = ZSRR0_DCD;
	/*
	 * The mac hardware only has one output, DTR (HSKo in Mac
	 * parlance). In HFC mode, we use it for the functions
	 * typically served by RTS and DTR on other ports, so we
	 * have to fake the upper layer out some.
	 *
	 * CRTSCTS we use CTS as an input which tells us when to shut up.
	 * We make no effort to shut up the other side of the connection.
	 * DTR is used to hang up the modem.
	 *
	 * In CDTRCTS, we use CTS to tell us to stop, but we use DTR to
	 * shut up the other side.
	 */
	if ((cflag & CRTSCTS) != 0){
		cs->cs_wr5_dtr = ZSWR5_DTR;
		cs->cs_wr5_rts = 0;
		cs->cs_rr0_cts = ZSRR0_CTS;
#if 0
	} else if ((cflag & CDTRCTS) != 0) {
		cs->cs_wr5_dtr = 0;
		cs->cs_wr5_rts = ZSWR5_DTR;
		cs->cs_rr0_cts = ZSRR0_CTS;
#endif
	} else if ((cflag & MDMBUF) != 0) {
		cs->cs_wr5_dtr = 0;
		cs->cs_wr5_rts = ZSWR5_DTR;
		cs->cs_rr0_cts = ZSRR0_DCD;
	} else {
		cs->cs_wr5_dtr = ZSWR5_DTR;
		cs->cs_wr5_rts = 0;
		cs->cs_rr0_cts = 0;
	}
	splx(s);

	/* Caller will stuff the pending registers. */
	return(0);
}

/*
 * Read or write the chip with suitable delays.
 * MacII hardware has the delay built in.
 * No need for extra delay. :-) However, some clock-chiped
 * macs, or zsc's on serial add-on boards might need it.
 */
#define	ZS_DELAY()

u_char
zs_read_reg(cs, reg)
	struct zs_chanstate *cs;
	u_char reg;
{
	u_char val;

	*cs->cs_reg_csr = reg;
	ZS_DELAY();
	val = *cs->cs_reg_csr;
	ZS_DELAY();
	return val;
}

void
zs_write_reg(cs, reg, val)
	struct zs_chanstate *cs;
	u_char reg, val;
{
	*cs->cs_reg_csr = reg;
	ZS_DELAY();
	*cs->cs_reg_csr = val;
	ZS_DELAY();
}

u_char
zs_read_csr(cs)
	struct zs_chanstate *cs;
{
	u_char val;

	val = *cs->cs_reg_csr;
	ZS_DELAY();
	/* make up for the fact CTS is wired backwards */
	val ^= ZSRR0_CTS;
	return val;
}

void
zs_write_csr(cs, val)
	struct zs_chanstate *cs;
	register u_char val;
{
	/* Note, the csr does not write CTS... */
	*cs->cs_reg_csr = val;
	ZS_DELAY();
}

u_char
zs_read_data(cs)
	struct zs_chanstate *cs;
{
	register u_char val;

	val = *cs->cs_reg_data;
	ZS_DELAY();
	return val;
}

void
zs_write_data(cs, val)
	struct zs_chanstate *cs;
	u_char val;
{
	*cs->cs_reg_data = val;
	ZS_DELAY();
}

/****************************************************************
 * Console support functions (mac68k specific!)
 * Note: this code is allowed to know about the layout of
 * the chip registers, and uses that to keep things simple.
 * XXX - I think I like the mvme167 code better. -gwr
 * XXX - Well :-P  :-)  -wrs
 ****************************************************************/

#define zscnpollc	nullcnpollc
cons_decl(zs);

static void	zs_putc(register volatile struct zschan *, int);
static int	zs_getc(register volatile struct zschan *);
static void	zscnsetup(void);
extern int	zsopen( dev_t dev, int flags, int mode, struct proc *p);

/*
 * Console functions.
 */

/*
 * This code modled after the zs_setparam routine in zskgdb
 * It sets the console unit to a known state so we can output
 * correctly.
 */
static void
zscnsetup()
{
	struct xzs_chanstate xcs;
	struct zs_chanstate *cs;
	struct zschan *zc;
	int    tconst, s;
	
	/* Setup temporary chanstate. */
	bzero((caddr_t)&xcs, sizeof(xcs));
	cs = &xcs.xzs_cs;
	zc = zs_conschan;
	cs->cs_reg_csr  = &zc->zc_csr;
	cs->cs_reg_data = &zc->zc_data;
	cs->cs_channel = zs_consunit;
	cs->cs_brg_clk = ZS_STD_BRG;

	bcopy(zs_init_reg, cs->cs_preg, 16);
	cs->cs_preg[5] |= ZSWR5_DTR | ZSWR5_RTS;
	cs->cs_preg[15] = ZSWR15_BREAK_IE;
	tconst = BPS_TO_TCONST(cs->cs_brg_clk,
		zs_defspeed[0][zs_consunit]);
	cs->cs_preg[12] = tconst;
	cs->cs_preg[13] = tconst >> 8;
	/* can't use zs_set_speed as we haven't set up the
	 * signal sources, and it's not worth it for now
	 */

	/*
	 * As zs_loadchannelregs doesn't touch reg 9 (interrupt control),
	 * we won't accidentally turn on interrupts below
	 */
	s = splhigh();
	zs_loadchannelregs(cs);
	splx(s);
}

/*
 * zscnprobe is the routine which gets called as the kernel is trying to
 * figure out where the console should be. Each io driver which might
 * be the console (as defined in mac68k/conf.c) gets probed. The probe
 * fills in the consdev structure. Important parts are the device #,
 * and the console priority. Values are CN_DEAD (don't touch me),
 * CN_LOWPRI (I'm here, but elsewhere might be better), CN_MIDPRI
 * (the video, better than CN_LOWPRI), and CN_HIGHPRI (pick me!)
 *
 * As the mac's a bit different, we do extra work here. We mainly check
 * to see if we have serial echo going on. Also chould check for default
 * speeds.
 */
void
zscnprobe(struct consdev * cp)
{
	extern u_long   IOBase;
	int     maj, unit, i;

	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == zsopen) {
			break;
		}
	}
	if (maj != nchrdev) {
		cp->cn_pri = CN_LOWPRI;
		if (mac68k_machine.serial_console != 0) {
			cp->cn_pri = CN_HIGHPRI;
			mac68k_machine.serial_boot_echo =0;
		}

		unit = (mac68k_machine.serial_console == 1) ? 0 : 1;
		zs_consunit = unit;
		zs_conschan = (struct zschan *) -1; /* dummy flag for zs_init() */
		
		cp->cn_dev = makedev(maj, unit);
	}
	if (mac68k_machine.serial_boot_echo) {
		/*
		 * at this point, we know that we don't have a serial
		 * console, but are doing echo
		 */
		zs_conschan = (struct zschan *) -1; /* dummy flag for zs_init() */
		zs_consunit = 1;		/* printer port */
	}

	if ((i = mac68k_machine.modem_d_speed) > 0) {
		if (zs_cn_check_speed(i))
			zs_defspeed[0][0] = i;
	}
	if ((i = mac68k_machine.print_d_speed) > 0) {
		if (zs_cn_check_speed(i))
			zs_defspeed[0][1] = i;
	}
	mac68k_set_io_offsets(IOBase);
	zs_init();
	/*
	 * zsinit will set up the addresses of the scc. It will also, if
	 * zs_conschan != 0, calculate the new address of the conschan for
	 * unit zs_consunit. So if we are (or think we are) going to use the
	 * chip for console I/O, we just set up the internal addresses for it.
	 *
	 * Now turn off interrupts for the chip. Note: this code piece is the
	 * only vestage of the NetBSD 1.0 ser driver. :-)
	 */
	unit = sccA[2];		 	/* reset reg. access */
	unit = sccA[0];
	sccA[2] = 9; sccA[2] = 0;	/* write 0 to reg. 9, clearing MIE */
	sccA[2] = ZSWR0_CLR_INTR; unit = sccA[2]; /* reset any pending ints. */
	sccA[0] = ZSWR0_CLR_INTR; unit = sccA[0];

	if (mac68k_machine.serial_boot_echo)
		zscnsetup();
}

void
zscninit(struct consdev * cp)
{
	zs_hwflags[0][zs_consunit] = ZS_HWFLAG_CONSOLE;
	/*
	 * zsinit will set up the addresses of the scc. It will also, if
	 * zs_conschan != 0, calculate the new address of the conschan for
	 * unit zs_consunit. So zs_init implicitly sets zs_conschan to the right
	 * number. :-)
	 */
	zscnsetup();
}


/*
 * Polled input char.
 */
static int
zs_getc(zc)
	register volatile struct zschan *zc;
{
	register int s, c, rr0;

	s = splhigh();
	/* Wait for a character to arrive. */
	do {
		rr0 = zc->zc_csr;
		ZS_DELAY();
	} while ((rr0 & ZSRR0_RX_READY) == 0);

	c = zc->zc_data;
	ZS_DELAY();
	splx(s);

	return (c);
}

/*
 * Polled output char.
 */
static void
zs_putc(zc, c)
	register volatile struct zschan *zc;
	int c;
{
	register int s, rr0;
	register long wait = 0;

	s = splhigh();
	/* Wait for transmitter to become ready. */
	do {
		rr0 = zc->zc_csr;
		ZS_DELAY();
	} while (((rr0 & ZSRR0_TX_READY) == 0) && (wait++ < 1000000));

	if ((rr0 & ZSRR0_TX_READY) != 0) {
		zc->zc_data = c;
		ZS_DELAY();
	}
	splx(s);
}


/*
 * Polled console input putchar.
 */
int
zscngetc(dev)
	dev_t dev;
{
	register volatile struct zschan *zc = zs_conschan;
	register int c;

	c = zs_getc(zc);
	return (c);
}

/*
 * Polled console output putchar.
 */
void
zscnputc(dev, c)
	dev_t dev;
	int c;
{
	register volatile struct zschan *zc = zs_conschan;

	zs_putc(zc, c);
}



/*
 * Handle user request to enter kernel debugger.
 */
void
zs_abort(cs)
	struct zs_chanstate *cs;
{
	volatile struct zschan *zc = zs_conschan;
	int rr0;
	register long wait = 0;

	/* Wait for end of break to avoid PROM abort. */
	do {
		rr0 = zc->zc_csr;
		ZS_DELAY();
	} while ((rr0 & ZSRR0_BREAK) && (wait++ < ZSABORT_DELAY));

	if (wait > ZSABORT_DELAY)
		return;	/* XXX */
#ifdef DDB
	if (db_console)
		Debugger();
#endif
}
@


1.27
log
@Generic softinterrupt code for m68k platforms, now copied from m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.26 2008/01/23 16:37:56 jsing Exp $	*/
@


1.26
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.25 2007/11/24 12:59:28 jmc Exp $	*/
a137 2
/* device to which the console is attached--if serial. */
dev_t	mac68k_zsdev;
d232 1
a232 1
int zssoft(void *);
d416 2
d425 1
a425 1
	/* XXX - Now safe to install interrupt handlers. */
a484 2
static int zssoftpending;

d494 11
a504 1
	int rval;
d509 2
d512 3
a514 1
	rval |= zsc_intr_hard(zsc);
d517 1
a517 5
		/* We are at splzs here, so no need to lock. */
		if (zssoftpending == 0) {
			zssoftpending = 1;
			setsoftserial();
		}
d519 3
d525 1
a525 4
/*
 * Similar scheme as for zshard (look at all of them)
 */
int
d529 2
a530 2
	register struct zsc_softc *zsc;
	register int unit;
d532 3
a534 17
	/* This is not the only ISR on this IPL. */
	if (zssoftpending == 0)
		return (0);

	/*
	 * The soft intr. bit will be set by zshard only if
	 * the variable zssoftpending is zero.
	 */
	zssoftpending = 0;

	for (unit = 0; unit < zsc_cd.cd_ndevs; ++unit) {
		zsc = zsc_cd.cd_devs[unit];
		if (zsc == NULL)
			continue;
		(void) zsc_intr_soft(zsc);
	}
	return (1);
a536 1

d833 2
a834 1
u_char zs_read_csr(cs)
d846 2
a847 1
void  zs_write_csr(cs, val)
d856 2
a857 1
u_char zs_read_data(cs)
d867 2
a868 1
void  zs_write_data(cs, val)
d973 1
a973 1
		mac68k_zsdev = cp->cn_dev = makedev(maj, unit);
@


1.25
log
@some spelling fixes from Martynas Venckus
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.24 2007/10/22 14:46:46 jsing Exp $	*/
d947 2
a948 2
 * CN_NORMAL (I'm here, but elsewhere might be better), CN_INTERNAL
 * (the video, better than CN_NORMAL), and CN_REMOTE (pick me!)
d966 1
a966 1
		cp->cn_pri = CN_NORMAL;		/* Lower than CN_INTERNAL */
d968 1
a968 1
			cp->cn_pri = CN_REMOTE;	/* Higher than CN_INTERNAL */
@


1.24
log
@stoped -> stopped

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.23 2007/01/14 18:50:23 martin Exp $	*/
d609 1
a609 1
			continue;	/* skip non-existant or bad clocks */
@


1.23
log
@zsprintf() is gone, fixes ZSMACDEBUG case
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.22 2006/01/09 20:56:59 miod Exp $	*/
d760 1
a760 1
	 * CTS drops, the transmitter is stoped IN MID CHARACTER!
@


1.22
log
@Remove completely obsolete comment from the pre-wscons sparc days in
zs_getc().
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.21 2006/01/07 20:46:57 miod Exp $	*/
d664 1
a664 1
	zsprintf("Checking for rate %d. Found source #%d.\n",bps, src);
d711 1
a711 1
	zsprintf("Rate is %7d, tc is %7d, source no. %2d, flags %4x\n", \
d713 1
a713 1
	zsprintf("Registers are: 4 %x, 11 %x, 14 %x\n\n",
@


1.21
log
@Do not set ZS_HWFLAG_CONSOLE if we are only using the serial line for
``serial boot echo''.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.20 2004/12/26 22:34:53 miod Exp $	*/
a1049 4
	/*
	 * This is used by the kd driver to read scan codes,
	 * so don't translate '\r' ==> '\n' here...
	 */
@


1.20
log
@Typos
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.19 2004/12/09 00:50:11 martin Exp $	*/
d984 1
a984 2
		zs_consunit = 1;
		zs_hwflags[0][zs_consunit] = ZS_HWFLAG_CONSOLE;
a1013 1
	return;
a1026 1
	printf("\nOpenBSD/mac68k console\n");
@


1.19
log
@add missing line in history section that didn't make it through the first
syncing round

pointed out by Dries Schellekens <gwyllion at ulyssis dot org>
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.18 2004/12/08 20:24:23 miod Exp $	*/
d143 1
a143 1
				 * interupt problems.
d303 1
a303 1
		if (channel == 0) /* Double check interupts are off */
d933 2
a934 2
	 * As zs_loadchannelregs doesn't touch reg 9 (interupt control),
	 * we won't accidentally turn on interupts below
@


1.18
log
@Register serial interrupts on the right sources on AV machines, was broken
after the interrupt code change; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.17 2004/11/26 21:21:24 miod Exp $	*/
d54 1
@


1.17
log
@More interrupt system cleaning and homogenization:
- switch all interrupt functions to an int (*)(void *) prototype.
- do not register dummy functions for all unhandled interrupts, instead
  let the dispatchers cope with NULL.
- add evcount interrupt counters.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.16 2004/11/25 18:32:10 miod Exp $	*/
d418 2
a419 2
		add_psc_lev4_intr(2, zshard, zsc);
		add_psc_lev4_intr(3, zshard, zsc);
@


1.16
log
@Move towards a more flexible and generic interrupt system, as well as better
zs behaviour.

From NetBSD; integration work by Martin Reindl
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.15 2004/03/09 21:46:47 xsa Exp $	*/
d260 1
a260 1
	struct zsc_softc *zsc = (void *) self;
d421 1
a421 1
		intr_establish(zshard, zsc, ZSHARD_PRI);
@


1.15
log
@
typo; from Martin Reindl <mreindl at catai.org>
ok jmc@@.
@
text
@d1 2
a2 2
/*	$OpenBSD: zs.c,v 1.14 2002/03/14 01:26:35 millert Exp $	*/
/*	$NetBSD: zs.c,v 1.12 1996/12/18 05:04:22 scottr Exp $	*/
d5 1
d41 13
d69 2
a70 1
#include "z8530reg.h"
d75 1
d78 1
d80 9
d91 1
a91 1
 * XXX: Hard code this to make console init easier...
d93 9
a101 1
#define	NZSC	1		/* XXX */
d106 7
a112 2
#define ZSHARD_PRI	6	/* Wired on the CPU board... */
#define ZSSOFT_PRI	3	/* Want tty pri (4) but this is OK. */
d118 2
a119 2
	u_char		zc_xxx1;
	u_char		zc_xxx2;
a124 10
/*
 * The zsdevice structure is not used on the mac68k port as the
 * chip is wired up weird. Channel B & A are interspersed with
 * the data & control bytes
struct zsdevice {
	/! Yes, they are backwards. !/
	struct	zschan zs_chan_b;
	struct	zschan zs_chan_a;
};
*/
d135 3
a137 4
/* console stuff */
void *zs_conschan = 0;
int   zs_consunit;
/* device that the console is attached to--if serial. */
d139 1
a139 1
/* Mac stuff, some vestages of old mac serial driver here */
d141 3
d147 1
d172 1
a172 1
static int zsinited = 0; /* 0 = not, 1 = inited, not attached, 2= attached */
d222 1
a222 1
static int	zsc_print(void *aux, const char *name);
d232 2
a233 2
int	zshard(void *);
int	zssoft(void *);
a247 16
static int
zsc_print(aux, name)
	void *aux;
	const char *name;
{
	struct zsc_attach_args *args = aux;

	if (name != NULL)
		printf("%s: ", name);

	if (args->channel != -1)
		printf(" channel %d", args->channel);

	return UNCONF;
}

d263 1
d266 1
a266 2
	int reset, s;
	int chip = 0;	/* XXX quiet bogus gcc warning */
d268 2
a269 1
	if (!zsinited) zs_init();
d278 6
d288 9
a296 1
		cs = &zsc->zsc_cs[channel];
d302 2
a303 3
		cs->cs_channel = channel;
		cs->cs_private = NULL;
		cs->cs_ops = &zsops_null;
d305 2
a306 4
		/* Define BAUD rate clock for the MI code. */
		cs->cs_pclk_div16 = mac68k_machine.sccClkConst*2;
		cs->cs_csource = 0;
		cs->cs_psource = 0;
d308 2
d311 7
d319 69
a387 2
		bcopy(zs_init_reg, cs->cs_creg, 16);
		bcopy(zs_init_reg, cs->cs_preg, 16);
d390 2
a391 3
		 * Clear the master interrupt enable.
		 * The INTENA is common to both channels,
		 * so just do it on the A channel.
a392 2
		if (channel == 0) {
			zs_write_reg(cs, 9, 0);
d394 8
a401 4
			chip = 0; /* We'll turn chip checking on post 1.2 */
			printf(" chip type %d \n",chip);
		}
		cs->cs_chip = chip;
d407 1
a407 3
		zsc_args.channel = channel;
		zsc_args.hwflags = zs_hwflags[zsc_unit][channel];
		if (!config_found(self, (void *) &zsc_args, zsc_print)) {
d409 1
a409 1
			reset = (channel == 0) ?
d417 9
d430 1
a430 1
	cs = &zsc->zsc_cs[0];
d436 1
d440 9
a448 63
void
zstty_mdattach(zsc, zst, cs, tp)
	struct zsc_softc *zsc;
	struct zstty_softc *zst;
	struct zs_chanstate *cs;
	struct tty *tp;
{
	int theflags;

	zst->zst_resetdef = 0;
	cs->cs_clock_count = 3; /* internal + externals */
	cs->cs_cclk_flag = 0;  /* Not doing anything fancy by default */
	cs->cs_pclk_flag = 0;
	cs->cs_clocks[0].clk = mac68k_machine.sccClkConst*32;
	cs->cs_clocks[0].flags = ZSC_RTXBRG; /* allowing divide by 16 will
					melt the driver! */

	cs->cs_clocks[1].flags = ZSC_RTXBRG | ZSC_RTXDIV | ZSC_VARIABLE | ZSC_EXTERN;
	cs->cs_clocks[2].flags = ZSC_TRXDIV | ZSC_VARIABLE;
	if (zst->zst_dev.dv_unit == 0) {
		theflags = mac68k_machine.modem_flags;
		cs->cs_clocks[1].clk = mac68k_machine.modem_dcd_clk;
		cs->cs_clocks[2].clk = mac68k_machine.modem_cts_clk;
	} else if (zst->zst_dev.dv_unit == 1) {
		theflags = mac68k_machine.print_flags;
		cs->cs_clocks[1].flags = ZSC_VARIABLE;
		/*
		 * Yes, we aren't defining ANY clock source enables for the
		 * printer's DCD clock in. The hardware won't let us
		 * use it. But a clock will freak out the chip, so we
		 * let you set it, telling us to bar interrupts on the line.
		 */
		cs->cs_clocks[1].clk = mac68k_machine.print_dcd_clk;
		cs->cs_clocks[2].clk = mac68k_machine.print_cts_clk;
	} else
		theflags = 0;

	if (cs->cs_clocks[1].clk)
		zst->zst_hwflags |= ZS_HWFLAG_IGDCD;
	if (cs->cs_clocks[2].clk)
		zst->zst_hwflags |= ZS_HWFLAG_IGCTS;

	if (theflags & ZSMAC_RAW) {
		zst->zst_cflag = ZSTTY_RAW_CFLAG;
		zst->zst_iflag = ZSTTY_RAW_IFLAG;
		zst->zst_lflag = ZSTTY_RAW_LFLAG;
		zst->zst_oflag = ZSTTY_RAW_OFLAG;
		printf(" (raw defaults)");
	}
	if (theflags & ZSMAC_LOCALTALK) {
		printf(" shielding from LocalTalk");
		zst->zst_ospeed = tp->t_ospeed = 1;
		zst->zst_ispeed = tp->t_ispeed = 1;
		cs->cs_defspeed = 1;
		cs->cs_creg[ZSRR_BAUDLO] = cs->cs_preg[ZSRR_BAUDLO] = 0xff;
		cs->cs_creg[ZSRR_BAUDHI] = cs->cs_preg[ZSRR_BAUDHI] = 0xff;
		zs_write_reg(cs, ZSRR_BAUDLO, 0xff);
		zs_write_reg(cs, ZSRR_BAUDHI, 0xff);
		/*
		 * If we might have LocalTalk, then make sure we have the
		 * Baud rate low-enough to not do any damage.
		 */
	}
d450 3
a452 8
	/* For the mac, we have rtscts = check CTS for output control, no
	 * input control. mdmbuf means check DCD for output, and use DTR
	 * for input control. mdmbuf & rtscts means use CTS for output
	 * control, and DTR for input control. */

	zst->zst_hwimasks[1] = 0;
	zst->zst_hwimasks[2] = ZSWR5_DTR;
	zst->zst_hwimasks[3] = ZSWR5_DTR;
d456 3
a458 3
zsmdioctl(tp, com, data, flag, p)
	struct tty *tp;
	u_long com;
a459 2
	int flag;
	struct proc *p;
d461 5
a465 1
	return (-1);
d472 2
d476 1
d481 1
a481 1
	via_set_modem((cs->cs_pclk_flag & ZSC_EXTERN) ? 1 : 0);
d484 6
d494 6
a499 6
	struct zsc_softc *zsc;
	int unit, rval;
#ifdef ZSMACDEBUG
	itecnputc(mac68k_zsdev, 'Z');
#endif
	
d501 7
a507 5
	unit = zsc_cd.cd_ndevs;
	while (--unit >= 0) {
		zsc = zsc_cd.cd_devs[unit];
		if (zsc != NULL) {
			rval |= zsc_intr_hard(zsc);
a509 3
#ifdef ZSMACDEBUG
	itecnputc(mac68k_zsdev, '\n');
#endif
d513 3
a515 14
int zssoftpending;

void
zsc_req_softint(zsc)
	struct zsc_softc *zsc;
{	
	if (zssoftpending == 0) {
		/* We are at splzs here, so no need to lock. */
		zssoftpending = ZSSOFT_PRI;
	/*	isr_soft_request(ZSSOFT_PRI); */
		setsoftserial();
	}
}

d520 2
a521 2
	struct zsc_softc *zsc;
	int unit;
d529 1
a529 3
	 * the variable zssoftpending is zero.  The order of
	 * these next two statements prevents our clearing
	 * the soft intr bit just after zshard has set it.
a530 1
/*	isr_soft_clear(ZSSOFT_PRI); */
d533 1
a533 3
	/* Do ttya/ttyb first, because they go faster. */
	unit = zsc_cd.cd_ndevs;
	while (--unit >= 0) {
d535 159
a693 2
		if (zsc != NULL) {
			(void) zsc_intr_soft(zsc);
d695 8
d704 16
a719 1
	return (1);
d722 83
d808 3
a812 3
/*
 * MacII hardware has the delay built in. No need for extra delay. :-)
 */
d842 1
a842 1
	register u_char v;
d844 2
a845 1
	v = (*cs->cs_reg_csr) ^ ZSRR0_CTS;
d847 2
a848 2
	ZS_DELAY();
	return v;
d851 1
a851 1
u_char zs_read_data(cs)
d853 1
d855 2
a856 3
	register u_char v;

	v = *cs->cs_reg_data;
a857 1
	return v;
d860 1
a860 1
void  zs_write_csr(cs, val)
a861 1
	u_char val;
d863 3
a865 1
	*cs->cs_reg_csr = val;
d867 1
d879 5
a883 2
 * Console support functions (Originally Sun3 specific!)
 * Now works w/ just mac68k port!
d906 2
a907 1
	struct zs_chanstate cs;
d912 2
a913 1
	bzero((caddr_t)&cs, sizeof(cs));
d915 23
a937 14
	cs.cs_reg_csr  = &zc->zc_csr;
	cs.cs_reg_data = &zc->zc_data;
	cs.cs_channel = zs_consunit;

	bcopy(zs_init_reg, cs.cs_preg, 16);
	tconst = BPS_TO_TCONST(mac68k_machine.sccClkConst*2, zs_defspeed[0][zs_consunit]);
        cs.cs_preg[5] |= ZSWR5_DTR | ZSWR5_RTS;
	cs.cs_preg[1] = 0; /* don't enable interrupts */
        cs.cs_preg[12] = tconst;
        cs.cs_preg[13] = tconst >> 8;

        s = splhigh();
        zs_loadchannelregs(&cs);
        splx(s);
d950 2
a951 2
 * to see if we have serial echo going on, and if the tty's are supposed
 * to default to raw or not.
d956 14
a969 2
        extern u_long   IOBase;
        int     maj, unit;
d971 12
a982 36
        for (maj = 0; maj < nchrdev; maj++) {
                if (cdevsw[maj].d_open == zsopen) {
                        break;
                }
        }
        if (maj == nchrdev) {
                /* no console entry for us */
                if (mac68k_machine.serial_boot_echo) {
                        mac68k_set_io_offsets(IOBase);
                	zs_conschan = (struct zschan *) -1; /* dummy flag for zs_init() */
			zs_consunit = 1;
			zs_hwflags[0][zs_consunit] = ZS_HWFLAG_CONSOLE;
			zs_init();
                        zscnsetup();
                }
                return;
        }

        cp->cn_pri = CN_NORMAL;                 /* Lower than CN_INTERNAL */
        if (mac68k_machine.serial_console != 0) {
                cp->cn_pri = CN_REMOTE;         /* Higher than CN_INTERNAL */
                mac68k_machine.serial_boot_echo =0;
        }

        unit = (mac68k_machine.serial_console == 1) ? 0 : 1;
	zs_consunit = unit;

        mac68k_zsdev = cp->cn_dev = makedev(maj, unit);

        if (mac68k_machine.serial_boot_echo) {
                /*
                 * at this point, we know that we don't have a serial
                 * console, but are doing echo
                 */
                mac68k_set_io_offsets(IOBase);
                zs_conschan = (struct zschan *) -1; /* dummy flag for zs_init() */
d985 30
a1014 4
		zs_init();
                zscnsetup();
        }
        return;
a1019 6
        extern u_long   IOBase;
	int chan = minor(cp->cn_dev & 1);

        mac68k_set_io_offsets(IOBase);
	zs_conschan = (struct zschan *) -1;
	zs_consunit = chan;
d1021 1
a1021 5
#ifdef ZS_CONSOLE_ABORT
	zs_hwflags[0][zs_consunit] |= ZS_HWFLAG_CONABRT;
#endif
	zs_init();
        /*
d1026 3
a1028 3
         */
        zscnsetup();
        printf("\nOpenBSD/mac68k console\n");
d1118 2
a1119 2
zs_abort(zst)
	register struct zstty_softc *zst;
d1121 1
a1121 1
	register volatile struct zschan *zc = zs_conschan;
a1124 3
	if ((zst->zst_hwflags & ZS_HWFLAG_CONABRT) == 0)
		return;

a1125 1
	/* XXX - Limit the wait? */
d1131 2
a1132 4
	if (wait > ZSABORT_DELAY) {
		if (zst != NULL) zst->zst_hwflags &= ~ZS_HWFLAG_CONABRT;
	/* If we time out, turn off the abort ability! */
	}
@


1.14
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.13 1999/11/15 06:12:49 d Exp $	*/
d88 1
a88 1
 * chip is wired up weird. Channel B & A are interspursed with
@


1.13
log
@honour ddb.console; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.12 1999/01/11 05:11:35 millert Exp $	*/
d114 2
a115 2
static struct zschan	*zs_get_chan_addr __P((int zsc_unit, int channel));
void			zs_init __P((void));
d188 3
a190 3
static int	zsc_match __P((struct device *, void *, void *));
static void	zsc_attach __P((struct device *, struct device *, void *));
static int	zsc_print __P((void *aux, const char *name));
d200 2
a201 2
int	zshard __P((void *));
int	zssoft __P((void *));
d573 4
a576 4
static void	zs_putc __P((register volatile struct zschan *, int));
static int	zs_getc __P((register volatile struct zschan *));
static void	zscnsetup __P((void));
extern int	zsopen __P(( dev_t dev, int flags, int mode, struct proc *p));
@


1.13.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.13 1999/11/15 06:12:49 d Exp $	*/
d114 2
a115 2
static struct zschan	*zs_get_chan_addr(int zsc_unit, int channel);
void			zs_init(void);
d188 3
a190 3
static int	zsc_match(struct device *, void *, void *);
static void	zsc_attach(struct device *, struct device *, void *);
static int	zsc_print(void *aux, const char *name);
d200 2
a201 2
int	zshard(void *);
int	zssoft(void *);
d573 4
a576 4
static void	zs_putc(register volatile struct zschan *, int);
static int	zs_getc(register volatile struct zschan *);
static void	zscnsetup(void);
extern int	zsopen( dev_t dev, int flags, int mode, struct proc *p);
@


1.13.2.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d114 2
a115 2
static struct zschan	*zs_get_chan_addr(int zsc_unit, int channel);
void			zs_init(void);
d188 3
a190 3
static int	zsc_match(struct device *, void *, void *);
static void	zsc_attach(struct device *, struct device *, void *);
static int	zsc_print(void *aux, const char *name);
d200 2
a201 2
int	zshard(void *);
int	zssoft(void *);
d573 4
a576 4
static void	zs_putc(register volatile struct zschan *, int);
static int	zs_getc(register volatile struct zschan *);
static void	zscnsetup(void);
extern int	zsopen( dev_t dev, int flags, int mode, struct proc *p);
@


1.13.2.2
log
@Merge with the trunk
@
text
@d88 1
a88 1
 * chip is wired up weird. Channel B & A are interspersed with
@


1.12
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.11 1998/05/03 07:13:03 gene Exp $	*/
d62 2
d809 2
a810 1
	Debugger();
@


1.11
log
@Associated fallout from removing macinfo.h and merging to cpu.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.10 1997/06/20 22:32:10 gene Exp $	*/
d257 1
a257 1
		panic("zs_attach: zs%d not mapped\n", zsc_unit);
@


1.10
log
@In zs_abort, wrap a #ifdef DDB around a Debugger() invocation.  Point out by
Chris Jones In NetBSD PR#port-mac68k/3739 (I believe).  Also, remove a comment
that this change obsoletes.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.9 1997/03/12 13:36:59 briggs Exp $	*/
a59 1
#include <machine/macinfo.h>
@


1.9
log
@Remove some more warnings left over from NetBSD's new config.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.8 1997/03/11 21:03:03 gene Exp $	*/
d807 1
a807 2

	/* XXX - Always available, but may be the PROM monitor. */
d809 1
@


1.8
log
@Second parameter of *match functions should be void (thank you ISA bus) and
*stop functions return int's under OpenBSD.  This cleans up a
bunch of compile-time warnings for the mac68k.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.7 1997/01/24 01:35:39 briggs Exp $	*/
d207 1
a207 1
zsc_match(parent, cf, aux)
d209 1
a209 1
	void *cf;
@


1.7
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.6 1996/10/28 14:46:26 briggs Exp $	*/
d187 1
a187 1
static int	zsc_match __P((struct device *, struct cfdata *, void *));
d209 1
a209 1
	struct cfdata *cf;
@


1.6
log
@Include macinfo.h.
@
text
@d1 2
a2 2
/*	$OpenBSD: zs.c,v 1.5 1996/10/13 15:29:09 briggs Exp $	*/
/*	$NetBSD: zs.c,v 1.10 1996/10/13 03:21:31 christos Exp $	*/
d187 1
a187 1
static int	zsc_match __P((struct device *, void *, void *));
d207 1
a207 1
zsc_match(parent, vcf, aux)
d209 1
a209 1
	void *vcf;
d248 2
a249 1
	int reset, s, chip;
d360 2
a361 1
	}
@


1.5
log
@* Fix from Bill Studenmund <wrstuden@@loki.stanford.edu> for transmission
  lockups.
Changes from NetBSD:
- Add a ZS_CONSOLE_ABORT option to enable a serial console break to
  force a drop to the system debugger.  WARNING:  this used to be the
  default behavior!  Modify custom kernel configs accordingly.
- Check for ZS_HWFLAG_CONABRT in zs_abort(), and don't abort if it's
  not set.
- ttystop function returns void.
@
text
@d1 1
a1 1
/*	$OpenBSD: zs.c,v 1.4 1996/06/09 03:17:48 briggs Exp $	*/
d60 1
@


1.4
log
@Add machine/viareg for prototype of via_set_modem().
@
text
@d1 2
a2 2
/*	$OpenBSD: zs.c,v 1.3 1996/06/08 16:21:13 briggs Exp $	*/
/*	$NetBSD: zs.c,v 1.5 1996/06/09 04:27:59 briggs Exp $	*/
d188 1
a188 1
static int	zsc_print __P((void *aux, char *name));
d217 1
a217 1
	char *name;
d681 4
a684 1
	zs_hwflags[0][zs_consunit] = ZS_HWFLAG_CONSOLE | ZS_HWFLAG_CONABRT;
d789 3
@


1.3
log
@Sync up with latest NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: zs.c,v 1.2 1996/06/08 16:01:42 briggs Exp $	*/
/*	$NetBSD: zs.c,v 1.4 1996/06/07 10:41:35 briggs Exp $	*/
d60 1
@


1.2
log
@NetBSD -> OpenBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: zs.c,v 1.1 1996/05/26 19:02:14 briggs Exp $	*/
/*	$NetBSD: zs.c,v 1.2 1996/05/23 05:18:48 briggs Exp $	*/
d289 1
a289 1
			chip = zs_checkchip(cs);
d330 2
d339 1
a339 1
	cs->cs_clocks[1].clk = 0;
a340 1
	cs->cs_clocks[2].clk = 0;
d342 43
d411 7
a417 3
	if (cs->cs_pclk_flag & ZSC_EXTERN) {
	/* XXX need to set the via! */
	}
@


1.1
log
@Missed a few files in the previous updates.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d641 1
a641 1
        printf("\nNetBSD/mac68k console\n");
@
