head	1.12;
access;
symbols
	OPENBSD_3_8:1.11.0.16
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.14
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.12
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.10
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.20
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.18
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.16
	OPENBSD_2_9_BASE:1.10
	NIKLAS_UNDEAD:1.10.0.14
	OPENBSD_2_8:1.10.0.12
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.10
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.8
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.6
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.6
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.4
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2006.01.04.20.39.04;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.05.03.07.12.53;	author gene;	state Exp;
branches
	1.10.8.1
	1.10.20.1;
next	1.9;

1.9
date	97.04.14.18.47.55;	author gene;	state Exp;
branches;
next	1.8;

1.8
date	97.04.03.03.53.27;	author briggs;	state Exp;
branches;
next	1.7;

1.7
date	97.02.23.06.04.54;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	97.01.24.01.35.28;	author briggs;	state Exp;
branches;
next	1.5;

1.5
date	96.10.28.14.46.24;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	96.06.23.15.38.12;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.18.35.15;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.13.33;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches;
next	;

1.10.8.1
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	;

1.10.20.1
date	2002.06.11.03.36.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@/*	$OpenBSD: adbsys.c,v 1.11 2002/03/14 01:26:35 millert Exp $	*/
/*	$NetBSD: adbsys.c,v 1.24 1997/01/13 07:01:23 scottr Exp $	*/

/*-
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/cpu.h>
#include <machine/viareg.h>

#include <arch/mac68k/mac68k/macrom.h>
#include <arch/mac68k/dev/adbvar.h>

extern	struct mac68k_machine_S mac68k_machine;

/* from adb.c */
void    adb_processevent(adb_event_t * event);

extern void adb_jadbproc(void);

void 
adb_complete(buffer, data_area, adb_command)
	caddr_t buffer;
	caddr_t data_area;
	int adb_command;
{
	adb_event_t event;
	ADBDataBlock adbdata;
	int adbaddr;
	int error;
#ifdef MRG_DEBUG
	register int i;

	printf("adb: transaction completion\n");
#endif

	adbaddr = (adb_command & 0xf0) >> 4;
	error = GetADBInfo(&adbdata, adbaddr);
#ifdef MRG_DEBUG
	printf("adb: GetADBInfo returned %d\n", error);
#endif

	event.addr = adbaddr;
	event.hand_id = adbdata.devType;
	event.def_addr = adbdata.origADBAddr;
	event.byte_count = buffer[0];
	memcpy(event.bytes, buffer + 1, event.byte_count);

#ifdef MRG_DEBUG
	printf("adb: from %d at %d (org %d) %d:", event.addr,
		event.hand_id, event.def_addr, buffer[0]);
	for (i = 1; i <= buffer[0]; i++)
		printf(" %x", buffer[i]);
	printf("\n");
#endif

	microtime(&event.timestamp);

	adb_processevent(&event);
}

static volatile int extdms_done;

/*
 * initialize extended mouse - probes devices as
 * described in _Inside Macintosh, Devices_.
 */
void
extdms_init(totaladbs)
	int totaladbs;
{
	ADBDataBlock adbdata;
	int adbindex, adbaddr;
	short cmd;
	char buffer[9];

	for (adbindex = 1; adbindex <= totaladbs; adbindex++) {
		/* Get the ADB information */
		adbaddr = GetIndADB(&adbdata, adbindex);
		if (adbdata.origADBAddr == ADBADDR_MS &&
		    (adbdata.devType == ADBMS_USPEED)) {
			/* Found MicroSpeed Mouse Deluxe Mac */
			cmd = ((adbaddr<<4)&0xF0)|0x9;	/* listen 1 */

			/*
			 * To setup the MicroSpeed, it appears that we can
			 * send the following command to the mouse and then
			 * expect data back in the form:
			 *  buffer[0] = 4 (bytes)
			 *  buffer[1], buffer[2] as std. mouse
			 *  buffer[3] = buffer[4] = 0xff when no buttons
			 *   are down.  When button N down, bit N is clear.
			 * buffer[4]'s locking mask enables a
			 * click to toggle the button down state--sort of
			 * like the "Easy Access" shift/control/etc. keys.
			 * buffer[3]'s alternative speed mask enables using 
			 * different speed when the corr. button is down
			 */
			buffer[0] = 4;
			buffer[1] = 0x00;	/* Alternative speed */
			buffer[2] = 0x00;	/* speed = maximum */
			buffer[3] = 0x10;	/* enable extended protocol,
						 * lower bits = alt. speed mask
						 *            = 0000b
						 */
			buffer[4] = 0x07;	/* Locking mask = 0000b,
						 * enable buttons = 0111b
						 */
			extdms_done = 0;
			ADBOp((Ptr)buffer, (Ptr)extdms_complete,
				(Ptr)&extdms_done, cmd);
			while (!extdms_done)
				/* busy wait until done */;
		}
		if (adbdata.origADBAddr == ADBADDR_MS &&
		    (   adbdata.devType == ADBMS_100DPI
		     || adbdata.devType == ADBMS_200DPI)) {
			/* found a mouse */
			cmd = ((adbaddr << 4) & 0xf0) | 0x3;

			extdms_done = 0;
			cmd = (cmd & 0xf3) | 0x0c; /* talk command */
			ADBOp((Ptr)buffer, (Ptr)extdms_complete,
			      (Ptr)&extdms_done, cmd);
			while (!extdms_done)
				/* busy wait until done */;

			buffer[2] = '\004'; /* make handler ID 4 */
			extdms_done = 0;
			cmd = (cmd & 0xf3) | 0x08; /* listen command */
			ADBOp((Ptr)buffer, (Ptr)extdms_complete,
			      (Ptr)&extdms_done, cmd);
			while (!extdms_done)
				/* busy wait until done */;
		}
	}
}

void 
adb_init()
{
	ADBDataBlock adbdata;
	ADBSetInfoBlock adbinfo;
	int totaladbs;
	int adbindex, adbaddr;
	int error;
	char buffer[9];

#ifdef DISABLE_ADB_WHEN_SERIAL_CONSOLE
	if ((mac68k_machine.serial_console & 0x03)) {
		printf("adb: using serial console\n");
		return;
	}
#endif

#ifdef MRG_ADB			/* We don't care about ADB ROM driver if we
				 * aren't using the MRG_ADB method for
				 * ADB/PRAM/RTC. */
	if (!mrg_romready()) {
		printf("adb: no ROM ADB driver in this kernel for this machine\n");
		return;
	}
#endif
	printf("adb: bus subsystem\n");
#ifdef MRG_DEBUG
	printf("adb: call mrg_initadbintr\n");
#endif

	mrg_initadbintr();	/* Mac ROM Glue okay to do ROM intr */
#ifdef MRG_DEBUG
	printf("adb: returned from mrg_initadbintr\n");
#endif

	/* ADBReInit pre/post-processing */
	JADBProc = adb_jadbproc;

	/*
	 * Initialize ADB
	 *
	 * If not using MRG_ADB method to access ADB, then call
	 * ADBReInit directly.  Otherwise use ADB AlternateInit()
	 */
#ifndef MRG_ADB
	printf("adb: calling ADBReInit\n");
	ADBReInit();
#else
#ifdef MRG_DEBUG
	printf("adb: calling ADBAlternateInit.\n");
#endif
	ADBAlternateInit();
#endif

#ifdef MRG_DEBUG
	printf("adb: done with ADBReInit\n");
#endif

	totaladbs = CountADBs();
	extdms_init(totaladbs);

	/* for each ADB device */
	for (adbindex = 1; adbindex <= totaladbs; adbindex++) {
		/* Get the ADB information */
		adbaddr = GetIndADB(&adbdata, adbindex);

		/* Print out the glory */
		printf("adb: ");
		switch (adbdata.origADBAddr) {
		case ADBADDR_MAP:
			switch (adbdata.devType) {
			case ADB_STDKBD:
				printf("keyboard");
				break;
			case ADB_EXTKBD:
				printf("extended keyboard");
				break;
			case ADB_PBKBD:
				printf("PowerBook keyboard");
				break;
			default:
				printf("mapped device (%d)",
				    adbdata.devType);
				break;
			}
			break;
		case ADBADDR_REL:
			extdms_done = 0;
			/* talk register 3 */
			ADBOp((Ptr)buffer, (Ptr)extdms_complete,
			      (Ptr)&extdms_done, (adbaddr << 4) | 0xf);
			while (!extdms_done)
				/* busy-wait until done */;
			switch (buffer[2]) {
			case ADBMS_100DPI:
				printf("100 dpi mouse");
				break;
			case ADBMS_200DPI:
				printf("200 dpi mouse");
				break;
			case ADBMS_USPEED:
				printf("MicroSpeed mouse, default parameters");
				break;
			case ADBMS_EXTENDED:
				extdms_done = 0;
				/* talk register 1 */
				ADBOp((Ptr)buffer, (Ptr)extdms_complete,
				      (Ptr)&extdms_done,
				      (adbaddr << 4) | 0xd);
				while (!extdms_done)
					/* busy-wait until done */;
				printf("extended mouse "
				       "<%c%c%c%c> %d-button %d dpi ",
				       buffer[1], buffer[2],
				       buffer[3], buffer[4],
				       (int)buffer[8],
				       (int)*(short *)&buffer[5]);
				if (buffer[7] == 1)
					printf("mouse");
				else if (buffer[7] == 2)
					printf("trackball");
				else
					printf("unknown device");
				break;
			default:
				printf("relative positioning device (mouse?) (%d)", adbdata.devType);
				break;
			}
			break;
		case ADBADDR_ABS:
			printf("absolute positioning device (tablet?) (%d)", adbdata.devType);
			break;
		default:
			printf("unknown type device, (def %d, handler %d)", adbdata.origADBAddr,
			    adbdata.devType);
			break;
		}
		printf(" at %d\n", adbaddr);

		/* Set completion routine to be MacBSD's */
		adbinfo.siServiceRtPtr = (Ptr) adb_asmcomplete;
		adbinfo.siDataAreaAddr = NULL;
		error = SetADBInfo(&adbinfo, adbaddr);
#ifdef MRG_DEBUG
		printf("returned %d from SetADBInfo\n", error);
#endif
	}
}
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.10 1998/05/03 07:12:53 gene Exp $	*/
@


1.10
log
@Associated fallout from removing macinfo.h and merging to cpu.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.9 1997/04/14 18:47:55 gene Exp $	*/
d46 1
a46 1
void    adb_processevent __P((adb_event_t * event));
d48 1
a48 1
extern void adb_jadbproc __P((void));
@


1.10.20.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.10 1998/05/03 07:12:53 gene Exp $	*/
d46 1
a46 1
void    adb_processevent(adb_event_t * event);
d48 1
a48 1
extern void adb_jadbproc(void);
@


1.10.8.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
void    adb_processevent(adb_event_t * event);
d48 1
a48 1
extern void adb_jadbproc(void);
@


1.9
log
@Bring our incarnation of John Wittowski's direct adb driver into compatible
state with NetBSD's.  The direct-to-ADB code is now enabled by default.
Using 'options MRG_ADB' will cause the kernel to revert to the 'old standby'
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.8 1997/04/03 03:53:27 briggs Exp $	*/
a37 1
#include <machine/macinfo.h>
@


1.8
log
@PR#141 from David Leonard <d@@occult.fnarg.net.au> with some small mods by
me.
- Provide option (enabled in GENERIC and GENERICSBC) to disable ADB
  configuration when serial console is enabled.  Old behavior allows
  booting even if ADB probe hangs (Apple had several ways to access
  ADB).
- Configure ite0 differently--don't assume that it's only extant if it
  is the console.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.7 1997/02/23 06:04:54 briggs Exp $	*/
d186 3
a188 2
#ifndef HWDIRECT		/* We don't care about ADB ROM driver if we are
				 * using the HWDIRECT method for ADB/PRAM/RTC. */
d210 1
a210 1
	 * If using HWDIRECT method to access ADB, then call
d213 1
a213 1
#ifdef HWDIRECT
@


1.7
log
@Integrate code from John P. Wittkoski <jpw@@netwizards.net> and
Takashi Hamada <hamada@@next.etron.kanazawa-it.ac.jp>.  This code
interfaces directly to the hardware to support the ADB on many
macs.  It is enabled by "options HWDIRECT" in the configuration
file.  At some point, this should probably become the default method
as interfacing to the ADB through the ROMs has been painful and sometimes
problematic.

This code should have functioning ADB support for:
	II series (II, SE/30, IIx, IIcx)
	IIsi series (IIsi, IIci, IIvx, IIvi)
	LC II, LC III
	Performa 400, 405, 430, 460, 465, 467, 600
	Classic II, Color Classic, Color Classic II
	PB 5XX series
	Duo series
	PB 140,145,145b,160,(160c?),165,165c,170,180,180c
	Quadra 700,900,950
There is an off-chance that it will work on:
	PB 150, PB 190
	Quadra/Centris 605,610,630,650,660AV,800,840AV
	LC 475,550,575,630
	Performa 475,476,575,577,578,630
Note that functioning ADB support does not mean that everything else
will work.  I obviously do not own all of the above machines (does
anyone?  ;-)...  Any reports are welcome.

Many thanks to John Wittkoski and Takashi Hamada!
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.6 1997/01/24 01:35:28 briggs Exp $	*/
d179 1
d184 1
@


1.6
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.5 1996/10/28 14:46:24 briggs Exp $	*/
a36 1
#include <machine/adbsys.h>
d41 2
a42 2
#include "adbvar.h"
#include "../mac68k/macrom.h"
d184 2
d190 1
d204 10
a213 1
	/* Initialize ADB */
a216 1

d218 1
@


1.5
log
@Include macinfo.h.
@
text
@d1 2
a2 2
/*	$OpenBSD: adbsys.c,v 1.4 1996/06/23 15:38:12 briggs Exp $	*/
/*	$NetBSD: adbsys.c,v 1.21 1996/06/21 06:10:56 scottr Exp $	*/
d48 1
a48 1
void    adb_processevent(adb_event_t * event);
d50 1
a50 1
extern void adb_jadbproc(void);
a57 2
	register int i;
	register char *sbuf, *dbuf;
d62 2
a64 1
#if defined(MRG_DEBUG)
d70 1
a70 1
#if defined(MRG_DEBUG)
d77 4
a80 1
#if defined(MRG_DEBUG)
a87 6
	i = event.byte_count = buffer[0];
	sbuf = &buffer[1];
	dbuf = &event.bytes[0];
	while (i--)
		*dbuf++ = *sbuf++;

d93 1
a93 1
static int extdms_done;
d100 2
a101 1
extdms_init()
a103 1
	int totaladbs;
a107 1
	totaladbs = CountADBs();
d190 1
a190 1
#if defined(MRG_DEBUG)
d195 1
a195 1
#if defined(MRG_DEBUG)
d203 1
a203 1
#if defined(MRG_DEBUG)
d209 1
a209 1
#if defined(MRG_DEBUG)
a212 2
	extdms_init();

d214 1
d298 1
a298 1
#if defined(MRG_DEBUG)
@


1.4
log
@From scottr/NetBSD:
Test for serial console in adb_init() early, and abort if we're using it.
Initiialize ROM vectors regardless of this so that the PRAM RTC read and
write work regardless of whether a serial console is in use.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbsys.c,v 1.3 1996/05/26 18:35:15 briggs Exp $	*/
d39 1
@


1.3
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: adbsys.c,v 1.20 1996/05/08 13:36:41 briggs Exp $	*/
d36 1
d38 1
d44 2
d183 5
@


1.2
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: adbsys.c,v 1.15 1995/09/04 02:50:57 briggs Exp $	*/
d34 1
d36 1
a38 1
#include "../mac68k/via.h"
a104 1
	void extdms_complete();
d111 37
a147 1
		    (adbdata.devType == 1 || adbdata.devType == 2)) {
a173 1
	int i, s;
a177 1
	void extdms_complete();
d198 1
a198 1
	printf("adb: calling ADBAlternateInit\n");
d219 1
a219 1
		case 2:
d221 1
a221 1
			case 1:
d224 1
a224 1
			case 2:
d227 1
a227 1
			case 12:
d236 1
a236 1
		case 3:
d244 1
a244 1
			case 1:
d247 1
a247 1
			case 2:
d250 4
a253 1
			case 4:
d279 1
a279 1
		case 4:
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
