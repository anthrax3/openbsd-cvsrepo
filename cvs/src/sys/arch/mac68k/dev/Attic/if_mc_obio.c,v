head	1.10;
access;
symbols
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.2
	UBC_BASE:1.2
	OPENBSD_3_0:1.1.0.18
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.16
	OPENBSD_2_9_BASE:1.1
	NIKLAS_UNDEAD:1.1.0.14
	OPENBSD_2_8:1.1.0.12
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.10
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.8
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.9;

1.9
date	2010.03.31.19.46.27;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.14.16.01.04;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.24.13.23.27;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.15.06.48.24;	author martin;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.20.00.17.05;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.06.19.53.14;	author miod;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.05.08.22.15.32;	author gene;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.11.13.21.00.52;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.11.03.36.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: if_mc_obio.c,v 1.9 2010/03/31 19:46:27 miod Exp $	*/
/*	$NetBSD: if_mc_obio.c,v 1.13 2004/03/26 12:15:46 wiz Exp $	*/

/*-
 * Copyright (c) 1997 David Huang <khym@@azeotrope.org>
 * All rights reserved.
 *
 * Portions of this code are based on code by Denton Gentry <denny1@@home.com>
 * and Yanagisawa Takeshi <yanagisw@@aa.ap.titech.ac.jp>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * Bus attachment and DMA routines for the mc driver (Centris/Quadra
 * 660av and Quadra 840av onboard ethernet, based on the AMD Am79C940
 * MACE ethernet chip). Also uses the PSC (Peripheral Subsystem
 * Controller) for DMA to and from the MACE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/systm.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <machine/cpu.h>
#include <machine/psc.h>

#include <mac68k/dev/obiovar.h>
#include <mac68k/dev/if_mcreg.h>
#include <mac68k/dev/if_mcvar.h>

#define MACE_REG_BASE	0x50F1C000
#define MACE_PROM_BASE	0x50F08000

int	mc_obio_match(struct device *, void *, void *);
void	mc_obio_attach(struct device *, struct device *, void *);
void	mc_obio_init(struct mc_softc *sc);
void	mc_obio_put(struct mc_softc *sc, u_int len);
int	mc_dmaintr(void *arg);
void	mc_reset_rxdma(struct mc_softc *sc);
void	mc_reset_rxdma_set(struct mc_softc *, int set);
void	mc_reset_txdma(struct mc_softc *sc);
int	mc_obio_getaddr(struct mc_softc *, u_int8_t *);

struct cfattach mc_obio_ca = {
	sizeof(struct mc_softc), mc_obio_match, mc_obio_attach
};

int
mc_obio_match(parent, cf, aux)
	struct device *parent;
	void *cf;
	void *aux;
{
	struct obio_attach_args *oa = aux;
	bus_space_handle_t bsh;
	int found = 0;

        if (current_mac_model->class != MACH_CLASSAV)
		return 0;

	if (bus_space_map(oa->oa_tag, MACE_REG_BASE, MC_REGSIZE, 0, &bsh))
		return 0;

	/*
	 * Make sure the MACE's I/O space is readable, and if it is,
	 * try to read the CHIPID register. A MACE will always have
	 * 0x?940, where the ? depends on the chip version.
	 */
	if (mac68k_bus_space_probe(oa->oa_tag, bsh, 0, 1)) {
		if ((bus_space_read_1(
			oa->oa_tag, bsh, MACE_REG(MACE_CHIPIDL)) == 0x40) &&
		    ((bus_space_read_1(
			oa->oa_tag, bsh, MACE_REG(MACE_CHIPIDH)) & 0xf) == 9))
			found = 1;
	}

	bus_space_unmap(oa->oa_tag, bsh, MC_REGSIZE);

	return found;
}

void
mc_obio_attach(parent, self, aux)
	struct device *parent, *self;
	void	*aux;
{
	struct obio_attach_args *oa = (struct obio_attach_args *)aux;
	struct mc_softc *sc = (void *)self;
	struct pglist rxlist, txlist;
	vm_page_t pg;
	vaddr_t va;
	u_int8_t myaddr[ETHER_ADDR_LEN];

	sc->sc_regt = oa->oa_tag;
	sc->sc_biucc = XMTSP_64;
	sc->sc_fifocc = XMTFW_16 | RCVFW_64 | XMTFWU | RCVFWU |
	    XMTBRST | RCVBRST;
	sc->sc_plscc = PORTSEL_AUI;

	if (bus_space_map(sc->sc_regt, MACE_REG_BASE, MC_REGSIZE, 0,
	    &sc->sc_regh)) {
		printf(": failed to map space for MACE regs.\n");
		return;
	}

	if (mc_obio_getaddr(sc, myaddr)) {
		printf(": failed to get MAC address.\n");
		goto out1;
	}

	/* allocate memory for transmit buffer and mark it non-cacheable */
	TAILQ_INIT(&txlist);
	if (uvm_pglistalloc(PAGE_SIZE, 0, -1, PAGE_SIZE, 0,
	    &txlist, 1, UVM_PLA_NOWAIT) != 0) {
		printf(": could not allocate transmit buffer memory\n");
		goto out1;
	}
	sc->sc_txbuf = (u_char *)uvm_km_valloc(kernel_map, PAGE_SIZE);
	if (sc->sc_txbuf == NULL) {
		printf(": can't map transmit buffer memory\n");
		goto out2;
	}
	pg = TAILQ_FIRST(&txlist);
	sc->sc_txbuf_phys = VM_PAGE_TO_PHYS(pg);
	pmap_enter_cache(pmap_kernel(), (vaddr_t)sc->sc_txbuf,
	    sc->sc_txbuf_phys, UVM_PROT_RW, UVM_PROT_RW | PMAP_WIRED, PG_CI);
	pmap_update(pmap_kernel());

	/*
	 * allocate memory for receive buffer and mark it non-cacheable
	 */
	TAILQ_INIT(&rxlist);
	if (uvm_pglistalloc(MC_NPAGES * PAGE_SIZE, 0, -1, PAGE_SIZE, 0,
	    &rxlist, 1, UVM_PLA_NOWAIT) != 0) {
		printf(": could not allocate receive buffer memory\n");
		goto out3;
	}
	sc->sc_rxbuf = (u_char *)(va = uvm_km_valloc(kernel_map,
	    MC_NPAGES * PAGE_SIZE));
	if (sc->sc_rxbuf == NULL) {
		printf(": can't map receive buffer memory\n");
		goto out4;
	}
	pg = TAILQ_FIRST(&rxlist);
	sc->sc_rxbuf_phys = VM_PAGE_TO_PHYS(pg);
	TAILQ_FOREACH(pg, &rxlist, pageq) {
		pmap_enter_cache(pmap_kernel(), va, VM_PAGE_TO_PHYS(pg),
		    UVM_PROT_RW, UVM_PROT_RW | PMAP_WIRED, PG_CI);
		va += PAGE_SIZE;
	}
	pmap_update(pmap_kernel());

	sc->sc_bus_init = mc_obio_init;
	sc->sc_putpacket = mc_obio_put;

	/* disable receive DMA */
	psc_reg2(PSC_ENETRD_CTL) = 0x8800;
	psc_reg2(PSC_ENETRD_CTL) = 0x1000;
	psc_reg2(PSC_ENETRD_CMD + PSC_SET0) = 0x1100;
	psc_reg2(PSC_ENETRD_CMD + PSC_SET1) = 0x1100;

	/* disable transmit DMA */
	psc_reg2(PSC_ENETWR_CTL) = 0x8800;
	psc_reg2(PSC_ENETWR_CTL) = 0x1000;
	psc_reg2(PSC_ENETWR_CMD + PSC_SET0) = 0x1100;
	psc_reg2(PSC_ENETWR_CMD + PSC_SET1) = 0x1100;

	/* install interrupt handlers */
	add_psc_lev4_intr(PSCINTR_ENET_DMA, mc_dmaintr, sc);
	add_psc_lev3_intr(mcintr, sc);

	/* enable MACE DMA interrupts */
	psc_reg1(PSC_LEV4_IER) = 0x80 | (1 << PSCINTR_ENET_DMA);

	/* don't know what this does */
	psc_reg2(PSC_ENETWR_CTL) = 0x9000;
	psc_reg2(PSC_ENETRD_CTL) = 0x9000;
	psc_reg2(PSC_ENETWR_CTL) = 0x0400;
	psc_reg2(PSC_ENETRD_CTL) = 0x0400;

	/* enable MACE interrupts */
	psc_reg1(PSC_LEV3_IER) = 0x80 | (1 << PSCINTR_ENET);

	/* mcsetup returns 1 if something fails */
	if (mcsetup(sc, myaddr) != 0)
		goto out5;

	return;

out5:
	/* disable interrupts */
	psc_reg1(PSC_LEV4_IER) = (1 << PSCINTR_ENET_DMA);
	psc_reg1(PSC_LEV3_IER) = (1 << PSCINTR_ENET);
	/* remove interrupt handlers */
	remove_psc_lev4_intr(PSCINTR_ENET_DMA);
	remove_psc_lev3_intr();
	pmap_remove(pmap_kernel(), (vaddr_t)sc->sc_rxbuf,
	    (vaddr_t)sc->sc_rxbuf + MC_NPAGES * PAGE_SIZE);
	pmap_update(pmap_kernel());
out4:
	uvm_pglistfree(&rxlist);
out3:
	pmap_remove(pmap_kernel(), (vaddr_t)sc->sc_txbuf,
	    (vaddr_t)sc->sc_txbuf + PAGE_SIZE);
	pmap_update(pmap_kernel());
out2:
	uvm_pglistfree(&txlist);
out1:
	bus_space_unmap(sc->sc_regt, sc->sc_regh, MC_REGSIZE);
}

/* Bus-specific initialization */
void
mc_obio_init(sc)
	struct mc_softc *sc;
{
	mc_reset_rxdma(sc);
	mc_reset_txdma(sc);
}

void
mc_obio_put(sc, len)
	struct mc_softc *sc;
	u_int len;
{
	psc_reg4(PSC_ENETWR_ADDR + sc->sc_txset) = sc->sc_txbuf_phys;
	psc_reg4(PSC_ENETWR_LEN + sc->sc_txset) = len;
	psc_reg2(PSC_ENETWR_CMD + sc->sc_txset) = 0x9800;

	sc->sc_txset ^= 0x10;
}

/*
 * Interrupt handler for the MACE DMA completion interrupts
 */
int
mc_dmaintr(arg)
	void *arg;
{
	struct mc_softc *sc = arg;
	u_int16_t status;
	u_int32_t bufsleft, which;
	int head;

	/*
	 * Not sure what this does... figure out if this interrupt is
	 * really ours?
	 */
	while ((which = psc_reg4(0x804)) != psc_reg4(0x804))
		;
	if ((which & 0x60000000) == 0)
		return 0;

	/* Get the read channel status */
	status = psc_reg2(PSC_ENETRD_CTL);
	if (status & 0x2000) {
		/* I think this is an exceptional condition. Reset the DMA */
		mc_reset_rxdma(sc);
#ifdef MCDEBUG
		printf("%s: resetting receive DMA channel (status 0x%04x)\n",
		    sc->sc_dev.dv_xname, status);
#endif
	} else if (status & 0x100) {
		/* We've received some packets from the MACE */
		int offset;

		/* Clear the interrupt */
		psc_reg2(PSC_ENETRD_CMD + sc->sc_rxset) = 0x1100;

		/* See how may receive buffers are left */
		bufsleft = psc_reg4(PSC_ENETRD_LEN + sc->sc_rxset);
		head = MC_RXDMABUFS - bufsleft;

#if 0 /* I don't think this should ever happen */
		if (head == sc->sc_tail) {
#ifdef MCDEBUG
			printf("%s: head == tail: suspending DMA?\n",
			    sc->sc_dev.dv_xname);
#endif
			psc_reg2(PSC_ENETRD_CMD + sc->sc_rxset) = 0x9000;
		}
#endif

		/* Loop through, processing each of the packets */
		for (; sc->sc_tail < head; sc->sc_tail++) {
			offset = sc->sc_tail * 0x800;
			sc->sc_rxframe.rx_rcvcnt = sc->sc_rxbuf[offset];
			sc->sc_rxframe.rx_rcvsts = sc->sc_rxbuf[offset+2];
			sc->sc_rxframe.rx_rntpc = sc->sc_rxbuf[offset+4];
			sc->sc_rxframe.rx_rcvcc = sc->sc_rxbuf[offset+6];
			sc->sc_rxframe.rx_frame = sc->sc_rxbuf + offset + 16;

			mc_rint(sc);
		}

		/*
		 * If we're out of buffers, reset this register set
		 * and switch to the other one. Otherwise, reactivate
		 * this set.
		 */
		if (bufsleft == 0) {
			mc_reset_rxdma_set(sc, sc->sc_rxset);
			sc->sc_rxset ^= 0x10;
		} else
			psc_reg2(PSC_ENETRD_CMD + sc->sc_rxset) = 0x9800;
	}

	/* Get the write channel status */
	status = psc_reg2(PSC_ENETWR_CTL);
	if (status & 0x2000) {
		/* I think this is an exceptional condition. Reset the DMA */
		mc_reset_txdma(sc);
#ifdef MCDEBUG
		printf("%s: resetting transmit DMA channel (status 0x%04x)\n",
			sc->sc_dev.dv_xname, status);
#endif
	} else if (status & 0x100) {
		/* Clear the interrupt and switch register sets */
		psc_reg2(PSC_ENETWR_CMD + sc->sc_txseti) = 0x100;
		sc->sc_txseti ^= 0x10;
	}

	return 1;
}


void
mc_reset_rxdma(sc)
	struct mc_softc *sc;
{
	u_int8_t maccc;

	/* Disable receiver, reset the DMA channels */
	maccc = NIC_GET(sc, MACE_MACCC);
	NIC_PUT(sc, MACE_MACCC, maccc & ~ENRCV);
	psc_reg2(PSC_ENETRD_CTL) = 0x8800;
	mc_reset_rxdma_set(sc, 0);
	psc_reg2(PSC_ENETRD_CTL) = 0x400;

	psc_reg2(PSC_ENETRD_CTL) = 0x8800;
	mc_reset_rxdma_set(sc, 0x10);
	psc_reg2(PSC_ENETRD_CTL) = 0x400;

	/* Reenable receiver, reenable DMA */
	NIC_PUT(sc, MACE_MACCC, maccc);
	sc->sc_rxset = 0;

	psc_reg2(PSC_ENETRD_CMD + PSC_SET0) = 0x9800;
	psc_reg2(PSC_ENETRD_CMD + PSC_SET1) = 0x9800;
}

void
mc_reset_rxdma_set(sc, set)
	struct mc_softc *sc;
	int set;
{
	/* disable DMA while modifying the registers, then reenable DMA */
	psc_reg2(PSC_ENETRD_CMD + set) = 0x0100;
	psc_reg4(PSC_ENETRD_ADDR + set) = sc->sc_rxbuf_phys;
	psc_reg4(PSC_ENETRD_LEN + set) = MC_RXDMABUFS;
	psc_reg2(PSC_ENETRD_CMD + set) = 0x9800;
	sc->sc_tail = 0;
}

void
mc_reset_txdma(sc)
	struct mc_softc *sc;
{
	u_int8_t maccc;

	psc_reg2(PSC_ENETWR_CTL) = 0x8800;
	maccc = NIC_GET(sc, MACE_MACCC);
	NIC_PUT(sc, MACE_MACCC, maccc & ~ENXMT);
	sc->sc_txset = sc->sc_txseti = 0;
	psc_reg2(PSC_ENETWR_CTL) = 0x400;
	NIC_PUT(sc, MACE_MACCC, maccc);
}

int
mc_obio_getaddr(sc, lladdr)
	struct mc_softc *sc;
	u_int8_t *lladdr;
{
	bus_space_handle_t bsh;
	u_char csum;

	if (bus_space_map(sc->sc_regt, MACE_PROM_BASE, 8*16, 0, &bsh)) {
		printf(": failed to map space to read MACE address.\n%s",
		    sc->sc_dev.dv_xname);
		return (-1);
	}

	if (!mac68k_bus_space_probe(sc->sc_regt, bsh, 0, 1)) {
		bus_space_unmap(sc->sc_regt, bsh, 8*16);
		return (-1);
	}

	csum = mc_get_enaddr(sc->sc_regt, bsh, 1, lladdr);
	if (csum != 0xff)
		printf(": ethernet PROM checksum failed (0x%x != 0xff)\n%s",
		    (int)csum, sc->sc_dev.dv_xname);

	bus_space_unmap(sc->sc_regt, bsh, 8*16);

	return (csum == 0xff ? 0 : -1);
}
@


1.9
log
@Make sure the boundaries of uvm_pglistalloc() calls are set up with low
being page-aligned, and high being end of page (i.e.
high & PAGE_MASK == PAGE_MASK) everywhere, for consistency. Future code
will depend on this.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.8 2009/04/14 16:01:04 oga Exp $	*/
@


1.8
log
@Convert the waitok field of uvm_pglistalloc to "flags", more will be added soon.

For the possibility of sleeping, the first two flags are UVM_PLA_WAITOK
and UVM_PLA_NOWAIT. It is an error not to show intention, so assert that
one of the two is provided. Switch over every caller in the tree to
using the appropriate flag.

ok art@@, ariane@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.7 2009/03/29 21:53:52 sthen Exp $	*/
d141 1
a141 1
	if (uvm_pglistalloc(PAGE_SIZE, 0, -PAGE_SIZE, PAGE_SIZE, 0,
d161 1
a161 1
	if (uvm_pglistalloc(MC_NPAGES * PAGE_SIZE, 0, -PAGE_SIZE, PAGE_SIZE, 0,
@


1.7
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.6 2006/06/24 13:23:27 miod Exp $	*/
d142 1
a142 1
	    &txlist, 1, 0) != 0) {
d162 1
a162 1
	    &rxlist, 1, 0) != 0) {
@


1.6
log
@Allocate ethernet buffers as uvm pages, and map them with pmap_enter_cache(),
instead of crossing fingers and expecting malloc() to return aligned and
contiguous memory.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.5 2004/12/15 06:48:24 martin Exp $	*/
d148 1
a148 1
		printf(": could not map transmit buffer memory\n");
d169 1
a169 1
		printf(": could not map receive buffer memory\n");
@


1.5
log
@sync with NetBSD but replace hand crafted crc logic with ether_crc32_le()

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.4 2002/04/20 00:17:05 miod Exp $	*/
a40 1
#include <sys/malloc.h>
a71 2
extern int	kvtop(register caddr_t addr);

d117 3
a120 1
	int i, noncontig = 0;
d136 1
a136 1
		return;
d140 16
a155 4
	sc->sc_txbuf = malloc(PAGE_SIZE, M_DEVBUF, M_WAITOK);
	sc->sc_txbuf_phys = kvtop(sc->sc_txbuf);
	physaccess (sc->sc_txbuf, (caddr_t)sc->sc_txbuf_phys, PAGE_SIZE,
	    PG_V | PG_RW | PG_CI);
a158 5
	 * XXX This should use the bus_dma interface, since the buffer
	 * needs to be physically contiguous. However, it seems that
	 * at least on my system, malloc() does allocate contiguous
	 * memory. If it's not, suggest reducing the number of buffers
	 * to 2, which will fit in one 4K page.
d160 18
a177 17
	sc->sc_rxbuf = malloc(MC_NPAGES * PAGE_SIZE, M_DEVBUF, M_WAITOK);
	sc->sc_rxbuf_phys = kvtop(sc->sc_rxbuf);
	for (i = 0; i < MC_NPAGES; i++) {
		int pa;

		pa = kvtop(sc->sc_rxbuf + PAGE_SIZE*i);
		physaccess (sc->sc_rxbuf + PAGE_SIZE*i, (caddr_t)pa, PAGE_SIZE,
		    PG_V | PG_RW | PG_CI);
		if (pa != sc->sc_rxbuf_phys + PAGE_SIZE*i)
			noncontig = 1;
	}

	if (noncontig) {
		printf("%s: receive DMA buffer not contiguous! "
		    "Try compiling with \"options MC_RXDMABUFS=2\"\n",
		    sc->sc_dev.dv_xname);
		return;
d179 1
d213 2
a214 7
	if (mcsetup(sc, myaddr)) {
		/* disable interrupts */
		psc_reg1(PSC_LEV4_IER) = (1 << PSCINTR_ENET_DMA);
		psc_reg1(PSC_LEV3_IER) = (1 << PSCINTR_ENET);
		/* remove interrupt handlers */
		remove_psc_lev4_intr(PSCINTR_ENET_DMA);
		remove_psc_lev3_intr();
d216 22
a237 3
		bus_space_unmap(sc->sc_regt, sc->sc_regh, MC_REGSIZE);
		return;
	}
@


1.4
log
@Get rid of "integrate" and "hide" bad taste modifiers, thus get non-DDB
kernels to compile.
@
text
@d1 2
a2 2
/*	$OpenBSD: if_mc_obio.c,v 1.3 2002/03/14 01:26:35 millert Exp $	*/
/*	$NetBSD: if_mc_obio.c,v 1.4 1998/01/13 19:24:54 scottr Exp $	*/
d5 1
a5 1
 * Copyright (c) 1997 David Huang <khym@@bga.com>
d141 1
a141 1
	sc->sc_txbuf = malloc(NBPG, M_DEVBUF, M_WAITOK);
d143 1
a143 1
	physaccess (sc->sc_txbuf, (caddr_t)sc->sc_txbuf_phys, NBPG,
d154 1
a154 1
	sc->sc_rxbuf = malloc(MC_NPAGES * NBPG, M_DEVBUF, M_WAITOK);
d159 2
a160 2
		pa = kvtop(sc->sc_rxbuf + NBPG*i);
		physaccess (sc->sc_rxbuf + NBPG*i, (caddr_t)pa, NBPG,
d162 1
a162 1
		if (pa != sc->sc_rxbuf_phys + NBPG*i)
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.2 2001/11/06 19:53:14 miod Exp $	*/
d63 9
a71 9
hide int	mc_obio_match(struct device *, void *, void *);
hide void	mc_obio_attach(struct device *, struct device *, void *);
hide void	mc_obio_init(struct mc_softc *sc);
hide void	mc_obio_put(struct mc_softc *sc, u_int len);
hide int	mc_dmaintr(void *arg);
hide void	mc_reset_rxdma(struct mc_softc *sc);
hide void	mc_reset_rxdma_set(struct mc_softc *, int set);
hide void	mc_reset_txdma(struct mc_softc *sc);
hide int	mc_obio_getaddr(struct mc_softc *, u_int8_t *);
d79 1
a79 1
hide int
d113 1
a113 1
hide void
d219 1
a219 1
hide void
d227 1
a227 1
hide void
d333 1
a333 1
hide void
d358 1
a358 1
hide void
d371 1
a371 1
hide void
d385 1
a385 1
hide int
@


1.2
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.1 1998/05/08 22:15:32 gene Exp $	*/
d63 9
a71 9
hide int	mc_obio_match __P((struct device *, void *, void *));
hide void	mc_obio_attach __P((struct device *, struct device *, void *));
hide void	mc_obio_init __P((struct mc_softc *sc));
hide void	mc_obio_put __P((struct mc_softc *sc, u_int len));
hide int	mc_dmaintr __P((void *arg));
hide void	mc_reset_rxdma __P((struct mc_softc *sc));
hide void	mc_reset_rxdma_set __P((struct mc_softc *, int set));
hide void	mc_reset_txdma __P((struct mc_softc *sc));
hide int	mc_obio_getaddr __P((struct mc_softc *, u_int8_t *));
d73 1
a73 1
extern int	kvtop __P((register caddr_t addr));
@


1.2.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mc_obio.c,v 1.2 2001/11/06 19:53:14 miod Exp $	*/
d63 9
a71 9
int	mc_obio_match(struct device *, void *, void *);
void	mc_obio_attach(struct device *, struct device *, void *);
void	mc_obio_init(struct mc_softc *sc);
void	mc_obio_put(struct mc_softc *sc, u_int len);
int	mc_dmaintr(void *arg);
void	mc_reset_rxdma(struct mc_softc *sc);
void	mc_reset_rxdma_set(struct mc_softc *, int set);
void	mc_reset_txdma(struct mc_softc *sc);
int	mc_obio_getaddr(struct mc_softc *, u_int8_t *);
d73 1
a73 1
extern int	kvtop(register caddr_t addr);
d79 1
a79 1
int
d113 1
a113 1
void
d219 1
a219 1
void
d227 1
a227 1
void
d333 1
a333 1
void
d358 1
a358 1
void
d371 1
a371 1
void
d385 1
a385 1
int
@


1.1
log
@With the new psc framework, incorporate the driver for the AMD MACE ethernet
found on Quadra/Centris AV models.
Much of this done by Allen Briggs with porting to OpenBSD by me.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 1
#include <vm/vm.h>
@


1.1.8.1
log
@Merge in -current
@
text
@d50 1
a50 1
#include <uvm/uvm_extern.h>
@


1.1.8.2
log
@Merge in -current from about a week ago
@
text
@d63 9
a71 9
hide int	mc_obio_match(struct device *, void *, void *);
hide void	mc_obio_attach(struct device *, struct device *, void *);
hide void	mc_obio_init(struct mc_softc *sc);
hide void	mc_obio_put(struct mc_softc *sc, u_int len);
hide int	mc_dmaintr(void *arg);
hide void	mc_reset_rxdma(struct mc_softc *sc);
hide void	mc_reset_rxdma_set(struct mc_softc *, int set);
hide void	mc_reset_txdma(struct mc_softc *sc);
hide int	mc_obio_getaddr(struct mc_softc *, u_int8_t *);
d73 1
a73 1
extern int	kvtop(register caddr_t addr);
@


1.1.8.3
log
@Sync the SMP branch with 3.3
@
text
@d63 9
a71 9
int	mc_obio_match(struct device *, void *, void *);
void	mc_obio_attach(struct device *, struct device *, void *);
void	mc_obio_init(struct mc_softc *sc);
void	mc_obio_put(struct mc_softc *sc, u_int len);
int	mc_dmaintr(void *arg);
void	mc_reset_rxdma(struct mc_softc *sc);
void	mc_reset_rxdma_set(struct mc_softc *, int set);
void	mc_reset_txdma(struct mc_softc *sc);
int	mc_obio_getaddr(struct mc_softc *, u_int8_t *);
d79 1
a79 1
int
d113 1
a113 1
void
d219 1
a219 1
void
d227 1
a227 1
void
d333 1
a333 1
void
d358 1
a358 1
void
d371 1
a371 1
void
d385 1
a385 1
int
@


