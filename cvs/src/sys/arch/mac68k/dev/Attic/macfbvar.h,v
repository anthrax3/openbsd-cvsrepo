head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.7;

1.7
date	2006.03.13.22.35.17;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.13.22.07.56;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.22.19.40.54;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.10.21.19.14;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.09.20.51.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.08.16.36.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.04.20.39.05;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: macfbvar.h,v 1.7 2006/03/13 22:35:17 miod Exp $	*/
/* $NetBSD: macfbvar.h,v 1.3 2005/01/15 16:00:59 chs Exp $ */
/*	$NetBSD: grfvar.h,v 1.11 1996/08/04 06:03:58 scottr Exp $	*/
/*	$NetBSD: grfioctl.h,v 1.5 1995/07/02 05:26:45 briggs Exp $	*/
/*
 * Copyright (c) 1998 Matt DeBergalis
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Matt DeBergalis
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: grfvar.h 1.9 91/01/21$
 *
 *	@@(#)grfvar.h	7.3 (Berkeley) 5/7/91
 */

/*
 * Nubus image data structure.  This is the equivalent of a PixMap in
 * MacOS programming parlance.  One of these structures exists for each
 * video mode that a quickdraw compatible card can fit in.
 */
struct image_data {
	u_int32_t	size;
	u_int32_t	offset;
	u_int16_t	rowbytes;
	u_int16_t	top;
	u_int16_t	left;
	u_int16_t	bottom;
	u_int16_t	right;
	u_int16_t	version;
	u_int16_t	packType;
	u_int32_t	packSize;
	u_int32_t	hRes;
	u_int32_t	vRes;
	u_int16_t	pixelType;
	u_int16_t	pixelSize;	
	u_int16_t	cmpCount;
	u_int16_t	cmpSize;
	u_int32_t	planeBytes;
};

#define VID_PARAMS		1
#define VID_TABLE_OFFSET	2
#define VID_PAGE_CNT		3
#define VID_DEV_TYPE		4

struct macfb_devconfig {
	vaddr_t		dc_vaddr;	/* memory space virtual base address */
	paddr_t		dc_paddr;	/* memory space physical base address */
	psize_t		dc_size;	/* size of slot memory */
	vaddr_t		dc_cmapregs;	/* va of cmap registers if known */

	int		dc_offset;	/* offset to base of flat fb */

	int		dc_wid;		/* width of frame buffer */
	int		dc_ht;		/* height of frame buffer */
	int		dc_depth;	/* depth of frame buffer */
	int		dc_rowbytes;	/* bytes in fb scan line */

	int		dc_flags;	/* various flags */
#define	FB_MACOS_PALETTE	0x01	/* text mode uses MacOS palette */

	/* rasops information */
	struct rasops_info dc_ri;

	/* shadow colormap */
	u_int8_t	dc_cmap[256 * 3];
	void		(*dc_setcolor)(void *, u_int, u_int);

	/* wsdisplay information */
	struct wsscreen_descr dc_wsd;
	struct wsscreen_descr *dc_scrlist[1];
	struct wsscreen_list dc_screenlist;
	int		dc_nscreens;
};

struct macfb_softc {
	struct device		sc_dev;
				
	nubus_slot		sc_slot;

	bus_addr_t		sc_basepa;	/* base of video space */
	bus_addr_t		sc_fbofs;	/* offset to framebuffer */

	bus_space_tag_t		sc_tag;
	bus_space_handle_t	sc_handle;
	bus_space_handle_t	sc_regh;

	u_int32_t	card_id;	/* DrHW value for nubus cards	*/
	bus_size_t	cli_offset;	/* Offset of byte to clear intr */
					/* for cards where that's suff.  */
	u_int32_t	cli_value;	/* Value to write at cli_offset */

	struct macfb_devconfig	*sc_dc;
};

void	macfb_attach_common(struct macfb_softc *, struct macfb_devconfig *);
int	macfb_cnattach(void);
@


1.7
log
@Put wsscreen_list array inside the softc instead of on the stack; similar fix
as happened on hp300 and sparc* yesterday.
@
text
@d1 1
a1 1
/*	$OpenBSD: macfbvar.h,v 1.5 2006/01/22 19:40:54 miod Exp $	*/
@


1.6
log
@Although we can not currently run the glass console with colors if in an
indexed mode, remember the colormap information (if any) when the real driver
attaches, and use it to allow for X11 to control the colormap.

This allows glass console and 8bpp X11 on DAFB (previously, this would only
be possible if the console was on cereal).
@
text
@d126 4
a129 2
	struct wsscreen_descr wsd;
	int		nscreens;
@


1.5
log
@Colormap support for DAFB frame buffers (using information from Linux).
However, color can not be enabled in emulation mode if the display is the
console at this point, but 8bpp X11 works.
@
text
@d1 1
a1 1
/*	$OpenBSD: macfbvar.h,v 1.4 2006/01/10 21:19:14 miod Exp $	*/
d114 3
@


1.4
log
@Simplify external macfb interfaces, kill an intermediate attachment structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: macfbvar.h,v 1.3 2006/01/09 20:51:48 miod Exp $	*/
d106 1
d117 4
@


1.3
log
@Ditch the grf frame buffer abstraction, and directly attach macfb to
either obio or nubus. No functional change, shaves a few more KB...
@
text
@d1 1
a1 1
/*	$OpenBSD: macfbvar.h,v 1.2 2006/01/08 16:36:54 miod Exp $	*/
a101 10
struct grfmode {
	caddr_t		fbbase;		/* Base of page of frame buffer     */
	u_int32_t	fbsize;		/* Size of frame buffer             */
	u_int16_t	fboff;		/* Offset of frame buffer from base */
	u_int16_t	rowbytes;	/* Screen rowbytes                  */
	u_int16_t	width;		/* Screen width                     */
	u_int16_t	height;		/* Screen height                    */
	u_int16_t	psize;		/* Screen depth                     */
};

d142 2
a143 2
void	macfb_attach_common(struct macfb_softc *, struct grfmode *);
int	macfb_cnattach(paddr_t);
@


1.2
log
@Switch macfb from an rcons backend to a rasops backend; supposedly restores
all pixel depth operation, but there are still font display problems at
4bpp and 16bpp at the moment; also make sure the display is white on black,
whichever colour depth we are in.
@
text
@d1 1
a1 1
/*	$OpenBSD: macfbvar.h,v 1.1 2006/01/04 20:39:05 miod Exp $	*/
d3 2
d34 37
d72 24
a95 2
#include <dev/rcons/raster.h>
#include <dev/wscons/wscons_raster.h>
d97 14
a110 1
#include <machine/bus.h>
d113 10
a122 10
	vaddr_t	dc_vaddr;	/* memory space virtual base address */
	paddr_t	dc_paddr;	/* memory space physical base address */
	psize_t	dc_size;	/* size of slot memory */

	int	dc_offset;	/* offset from dc_vaddr to base of flat fb */

	int	dc_wid;		/* width of frame buffer */
	int	dc_ht;		/* height of frame buffer */
	int	dc_depth;	/* depth of frame buffer */
	int	dc_rowbytes;	/* bytes in fb scan line */
d129 1
a129 1
	int	nscreens;
d133 1
a133 1
	struct device sc_dev;
d135 15
a149 1
	struct macfb_devconfig *sc_dc;
d152 1
@


1.1
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 6
a55 2
	struct raster dc_raster; /* raster description */
	struct rcons dc_rcons;	/* raster blitter control info */
a60 1
	int nscreens;
a64 1
void	macfb_clear(struct macfb_devconfig *);
@

