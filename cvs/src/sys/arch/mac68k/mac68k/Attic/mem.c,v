head	1.23;
access;
symbols
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.6
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.12
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.8
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.10
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.6
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.4
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.8
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.6
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.4
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.2
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.18.0.10
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.8
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.8
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.6
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.4
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.17.0.2
	UBC_BASE:1.17
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.9.0.10
	OPENBSD_2_9_BASE:1.9
	NIKLAS_UNDEAD:1.9.0.8
	OPENBSD_2_8:1.9.0.6
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.2
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2012.06.20.18.23.52;	author matthew;	state dead;
branches;
next	1.22;

1.22
date	2010.12.26.15.40.59;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2007.09.22.16.21.32;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.23.19.00.26;	author martin;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.12.10.07.29;	author martin;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.27.49;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.08.02.24.06;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.25.13.25.32;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.27.04.22.37;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.08.03.27.36;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.08.17.30.41;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.05.20.56.42;	author art;	state Exp;
branches;
next	1.9;

1.9
date	99.11.22.19.21.59;	author matthieu;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	99.09.03.18.01.14;	author art;	state Exp;
branches;
next	1.7;

1.7
date	99.04.24.06.39.41;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	99.04.23.05.18.07;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	98.08.31.17.42.32;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.02.10.12.01.47;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.06.08.16.21.16;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.36.27;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches;
next	;

1.9.2.1
date	2001.07.04.10.18.39;	author niklas;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2001.11.13.21.00.53;	author niklas;	state Exp;
branches;
next	1.9.2.4;

1.9.2.4
date	2002.03.06.01.05.36;	author niklas;	state Exp;
branches;
next	1.9.2.5;

1.9.2.5
date	2003.06.07.11.13.14;	author ho;	state Exp;
branches;
next	;


desc
@@


1.23
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: mem.c,v 1.22 2010/12/26 15:40:59 miod Exp $	*/
/*	$NetBSD: mem.c,v 1.22 1999/03/27 00:30:07 mycroft Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/conf.h>
#include <sys/buf.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>

#include <machine/cpu.h>

#include <uvm/uvm_extern.h>

extern u_long maxaddr;

static caddr_t devzeropage;

#define mmread	mmrw
#define mmwrite	mmrw
cdev_decl(mm);

/*ARGSUSED*/
int
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 12:
			return (0);
		default:
			return (ENXIO);
	}
}

/*ARGSUSED*/
int
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	return (0);
}

/*ARGSUSED*/
int
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	vaddr_t o, v;
	int c;
	struct iovec *iov;
	int error = 0;
	static int physlock;
	vm_prot_t prot;

	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
	}
	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;

			/*
			 * Only allow reads in physical RAM.
			 */
			if (v >= maxaddr || v < 0) {
				error = EFAULT;
				goto unlock;
			}

			prot = uio->uio_rw == UIO_READ ? VM_PROT_READ :
			    VM_PROT_WRITE;
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
			    trunc_page(v), prot, prot|PMAP_WIRED);
			pmap_update(pmap_kernel());
			o = m68k_page_offset(uio->uio_offset);
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
			pmap_update(pmap_kernel());
			continue;

/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = min(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			error = uiomove((caddr_t)v, c, uio);
			continue;

/* minor device 2 is EOF/RATHOLE */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}

			/*
			 * On the first call, allocate and zero a page
			 * of memory for use with /dev/zero.
			 */
			if (devzeropage == NULL)
				devzeropage = malloc(PAGE_SIZE, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomove(devzeropage, c, uio);
			continue;

		default:
			return (ENXIO);
		}
		if (error)
			break;
		iov->iov_base = (caddr_t)iov->iov_base + c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	if (minor(dev) == 0) {
unlock:
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
	}
	return (error);
}

paddr_t
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	/*
	 * /dev/mem is the only one that makes sense through this
	 * interface.  For /dev/kmem any physaddr we return here
	 * could be transient and hence incorrect or invalid at
	 * a later time.  /dev/null just doesn't make any sense
	 * and /dev/zero is a hack that is handled via the default
	 * pager in mmap().
	 */
	if (minor(dev) != 0)
		return (-1);

	/*
	 * Only allow access to physical RAM.
	 */
	if ((u_int)off >= maxaddr)
		return (-1);

	return ((paddr_t)off);
}

int
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EOPNOTSUPP);
}
@


1.22
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.21 2007/09/22 16:21:32 krw Exp $	*/
@


1.21
log
@M_ZERO -> bzero.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.20 2005/10/23 19:00:26 martin Exp $	*/
d231 1
a231 1
	return (atop((u_int)off));
@


1.20
log
@m68k_btop() and m68k_ptob() were mostly used by mac68k only and can
be replaced by the MI versions atop() and ptoa()
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.19 2005/09/12 10:07:29 martin Exp $	*/
d182 3
a184 5
			if (devzeropage == NULL) {
				devzeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(devzeropage, PAGE_SIZE);
			}
@


1.19
log
@- Add byte-swap and stride options to bus_space.
- Add bus_space_*_stream_N functions
- Replace PGOFSET with m68k_trunc_page() or m68k_page_offset()

from NetBSD, testing help by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2003/06/02 23:27:49 millert Exp $	*/
d233 1
a233 1
	return (m68k_btop((u_int)off));
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2001/12/08 02:24:06 art Exp $	*/
d147 1
a147 1
			o = uio->uio_offset & PGOFSET;
@


1.17
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2001/11/06 19:53:15 miod Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2001/11/01 12:13:46 art Exp $	*/
d150 1
d156 1
@


1.15
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/07/25 13:25:32 art Exp $	*/
a56 2

#include <vm/vm.h>
@


1.14
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/06/27 04:22:37 art Exp $	*/
d214 1
a214 1
int
d217 2
a218 1
	int off, prot;
@


1.13
log
@old vm no more
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2001/06/08 03:27:36 aaron Exp $	*/
d151 1
a151 1
			    trunc_page(v), prot, TRUE, prot);
@


1.12
log
@More changes from NetBSD that should have been part of the UVM update; tested
by beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2001/05/08 17:30:41 aaron Exp $	*/
a59 1
#if defined(UVM)
a60 1
#endif
a162 1
#if defined(UVM)
a165 5
#else
			if (!kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#endif
@


1.11
log
@Substantial update from NetBSD, most notably gives us UVM support; deraadt@@ ok
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.10 2001/05/05 20:56:42 art Exp $	*/
/*	$NetBSD: mem.c,v 1.16 1998/11/10 07:29:59 scottr Exp $	*/
d109 3
a111 3
	register vm_offset_t o, v;
	register int c;
	register struct iovec *iov;
d114 1
d150 4
a153 3
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), uio->uio_rw == UIO_READ ?
			    VM_PROT_READ : VM_PROT_WRITE, TRUE, 0);
d157 2
a158 2
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + NBPG);
d208 1
a208 1
		(caddr_t)iov->iov_base += c;
d241 1
a241 1
	if ((unsigned)off >= maxaddr)
d244 1
a244 1
	return (m68k_btop(off));
@


1.10
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.9 1999/11/22 19:21:59 matthieu Exp $	*/
/*	$NetBSD: mem.c,v 1.11 1996/05/05 06:18:41 briggs Exp $	*/
d60 6
d140 9
d163 5
d171 1
d187 5
d206 1
a206 1
		iov->iov_base += c;
d212 1
a224 5
	extern int numranges;
	extern u_long low[8];
	extern u_long high[8];
	int seg;
	
d235 1
d237 1
a237 4
	 * Allow access only in RAM.
	 *
	 * XXX could be extended to allow access to IO space but must
	 * be very careful.
d239 4
a242 5
	for (seg = 0; seg < numranges; seg++) {
		if (((u_long)off >= low[seg]) && ((u_long)off <= high[seg]))
			return (m68k_btop(off));
	}
	return (-1);
@


1.9
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 1999/09/03 18:01:14 art Exp $	*/
d168 2
a169 2
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(devzeropage, CLBYTES);
d171 1
a171 1
			c = min(iov->iov_len, CLBYTES);
@


1.9.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mem.c,v 1.22 1999/03/27 00:30:07 mycroft Exp $	*/
a59 4
#include <uvm/uvm_extern.h>

extern u_long maxaddr;

d103 3
a105 3
	vaddr_t o, v;
	int c;
	struct iovec *iov;
a107 1
	vm_prot_t prot;
d134 3
a136 13

			/*
			 * Only allow reads in physical RAM.
			 */
			if (v >= maxaddr || v < 0) {
				error = EFAULT;
				goto unlock;
			}

			prot = uio->uio_rw == UIO_READ ? VM_PROT_READ :
			    VM_PROT_WRITE;
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
			    trunc_page(v), prot, TRUE, prot);
d140 2
a141 2
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
d148 1
a148 1
			if (!uvm_kernacc((caddr_t)v, c,
a165 5

			/*
			 * On the first call, allocate and zero a page
			 * of memory for use with /dev/zero.
			 */
d168 2
a169 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(devzeropage, PAGE_SIZE);
d171 1
a171 1
			c = min(iov->iov_len, PAGE_SIZE);
d180 1
a180 1
		iov->iov_base = (caddr_t)iov->iov_base + c;
a185 1
unlock:
d198 5
a212 1

d214 4
a217 1
	 * Only allow access to physical RAM.
d219 5
a223 4
	if ((u_int)off >= maxaddr)
		return (-1);

	return (m68k_btop((u_int)off));
@


1.9.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.1 2001/07/04 10:18:39 niklas Exp $	*/
d151 1
a151 1
			    trunc_page(v), prot, prot|PMAP_WIRED);
@


1.9.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 2
d214 1
a214 1
paddr_t
d217 1
a217 2
	off_t off;
	int prot;
@


1.9.2.4
log
@Merge in trunk
@
text
@a149 1
			pmap_update(pmap_kernel());
a154 1
			pmap_update(pmap_kernel());
@


1.9.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.4 2002/03/06 01:05:36 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 1999/04/24 06:39:41 downsj Exp $	*/
d224 11
@


1.7
log
@Use the generic m68k param.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 1999/04/23 05:18:07 downsj Exp $	*/
d136 1
a136 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
@


1.6
log
@mmmmap() bounds check.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1998/08/31 17:42:32 millert Exp $	*/
d221 1
a221 1
			return (mac68k_btop(off));
@


1.5
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 1997/02/10 12:01:47 downsj Exp $	*/
d198 5
a217 2
	if ((unsigned)off < lowram || (unsigned)off >= 0xFFFFFFFC)
		return (-1);
d219 5
a223 1
	return (mac68k_btop(off));
@


1.4
log
@mac68k copypage/zeropage changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 1996/06/08 16:21:16 briggs Exp $	*/
d74 9
a82 1
	return (0);
@


1.3
log
@Sync up with latest NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.2 1996/05/26 18:36:27 briggs Exp $	*/
d60 1
a60 1
caddr_t zeropage;
d158 2
a159 2
			if (zeropage == NULL) {
				zeropage = (caddr_t)
d161 1
a161 1
				bzero(zeropage, CLBYTES);
d164 1
a164 1
			error = uiomove(zeropage, c, uio);
@


1.2
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mem.c,v 1.10 1995/04/10 13:15:26 mycroft Exp $	*/
d51 1
d62 4
d68 1
a68 1
mmopen(dev, flag, mode)
d71 1
d79 1
a79 1
mmclose(dev, flag, mode)
d82 1
a125 7
#if !defined(DEBUG) && 0 /* BG -- serial test needs this. */
			/* allow reads only in RAM (except for DEBUG) */
			if (v >= 0x008FFFFC || v < 0) {
				error = EFAULT;
				goto unlock;
			}
#endif
a177 1
unlock:
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
