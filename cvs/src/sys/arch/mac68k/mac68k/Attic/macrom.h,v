head	1.14;
access;
symbols
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.10.0.12
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.10
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.8
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.8.0.26
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.24
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.22
	OPENBSD_2_9_BASE:1.8
	NIKLAS_UNDEAD:1.8.0.20
	OPENBSD_2_8:1.8.0.18
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.16
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.14
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.12
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.10
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2006.01.13.19.36.46;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2006.01.04.20.39.05;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.20.18.08.08;	author martin;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.26.21.21.28;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.04.14.18.48.03;	author gene;	state Exp;
branches
	1.8.14.1
	1.8.26.1;
next	1.7;

1.7
date	97.04.05.15.29.12;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	97.03.30.21.53.26;	author briggs;	state Exp;
branches;
next	1.5;

1.5
date	97.02.23.06.05.02;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	97.01.19.03.58.08;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.18.36.25;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.14.31;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches;
next	;

1.8.14.1
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	;

1.8.26.1
date	2002.06.11.03.36.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@/*	$OpenBSD: macrom.h,v 1.13 2006/01/04 20:39:05 miod Exp $	*/
/*	$NetBSD: macrom.h,v 1.12 2000/11/15 07:15:36 scottr Exp $	*/

/*-
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#include <sys/types.h>
#include <machine/frame.h>


/* Low-memory Globals */
extern caddr_t		ROMBase;	/* Base address of ROM space */
extern caddr_t		ADBBase;	/* Base address of ADB scratch */
extern caddr_t		ADBYMM; 	/* Base address of yet more ADB mem */
extern caddr_t		ADBState;	/* Base address of ADB scratch ? */
extern void	(*JADBProc)(void);	/* ADBReInit pre/post processing */
extern void	(*Lvl1DT[8])(void);	/* VIA1 interrupt table by bit */
extern void	(*Lvl2DT[8])(void);	/* VIA2 interrupt table by bit */
extern void	(*jADBOp)(void);	/* low memory pointer to ADBOp */
extern void	(*jUnimplTrap)(void);	/* Unimplemented trap */
	/* loglob(KbdLast, 0x218)	* addr of last kbd to send */
	/* loglob(KbdType, 0x21E)	* type of last kbd to send */
extern void	(*JKybdTask)(void);	/* Keyboard task ptr? */
extern u_char		CPUFlag;	/* Type of CPU in this machine */
extern void	(*MacJmp)(void);	/* ??? */
extern u_long		Lo3Bytes;	/* 0x00ffffff */
extern u_long		MinusOne;	/* 0xffffffff */
extern u_short		MMU32Bit;	/* MMU mode; short? */
extern u_char		Scratch8[8];	/* 8-byte scratch */
extern u_char		Scratch20[20];	/* 20-byte scratch */
extern u_long		Ticks;		/* ticks since startup */
extern u_long		Time;		/* ticks since startup */
extern u_short		TimeDBRA;	/* DBRA's per milli */
extern u_short		ADBDelay;	/* DBRAs per ADB loop, / 8 */
extern u_char		ToolScratch[8]; /* Yet another 8-byte scratch area */
extern caddr_t		VIA;		/* VIA1 base address */
extern caddr_t		mrg_VIA2;	/* VIA2 base address */
extern caddr_t		SCCRd;		/* SCC read base address */
extern u_char		FinderName[20]; /* FinderName - Pascal string */
extern void	(*jSwapMMU)(void);	/* Pointer to MMU Swap routine */
extern void	(*jEgret)(void);	/* Pointer to MMU Swap routine */
extern u_int16_t	HwCfgFlags;	/* Hardware config flags */
extern u_int32_t	HwCfgFlags2;	/* more hardware config flags */
extern u_int32_t	HwCfgFlags3;	/* more hardware config flags */
extern u_int32_t	ADBReInit_JTBL;	/* pointer to patch table */
extern void	(*jClkNoMem)(void);	/* pointer to ClkNoMem */
extern u_char		SysParam[20];	/* Place where PRam data gets stored */
extern caddr_t		ExpandMem;	/* pointer to Expanded Memory used by */
					/*  newer ADB routines (since LCIII) */
extern u_int16_t	VBLQueue;	/* Vertical blanking Queue, unused ? */
extern caddr_t		VBLQueue_head;	/* Vertical blanking Queue, head */
extern caddr_t		VBLQueue_tail;	/* Vertical blanking Queue, tail */
extern caddr_t		jDTInstall;	/* Deferred task mgr trap handler */

extern u_int32_t	**InitEgretJTVec; /* pointer to a jump table for */
					  /* InitEgret on AV machines */

	/* Types */

typedef caddr_t Ptr;
typedef caddr_t *Handle;

/* ADB Manager */
typedef struct {
	Ptr siServiceRtPtr;
	Ptr siDataAreaAddr;
} ADBSetInfoBlock;
typedef struct {
	unsigned char	devType;
	unsigned char	origADBAddr;
	Ptr		dbServiceRtPtr;
	Ptr		dbDataAreaAddr;
} ADBDataBlock;


	/* Trap Flesh; these functions are C, not Pascal */

/* trap tests */
int	MyOwnTrap(void);
void	KnownRTS(void);

#ifdef MRG_ADB
/*
 * These functions are defined in adb_direct.c if we are not using
 * the MRG method of accessing the ADB/PRAM/RTC.
 */
/* ADB Manager */
int	SetADBInfo(ADBSetInfoBlock *info, int adbAddr);
int	CountADBs(void);
int	GetIndADB(ADBDataBlock *info, int index);
int	GetADBInfo(ADBDataBlock *info, int adbAddr);
void	ADBReInit(void);
	/* note different order of parameters */
int	ADBOp(Ptr buffer, Ptr compRout, Ptr data, short commandNum);
void	ADBAlternateInit(void);
#endif

/* Memory Manager */
Ptr	NewPtr(int size);
int	DisposPtr(Ptr ptr);
int	GetPtrSize(Ptr ptr);
int	SetPtrSize(Ptr ptr, int newbytes);

/* Resource Manager */
Handle	GetResource(u_int theType, short theID);
short	ResError(void);
short	mrg_CountResources(u_int32_t type);
short	Count_Resources(u_int32_t rsrc_type);
caddr_t	*mrg_GetIndResource(u_int16_t index, u_int32_t type);


	/* Mac ROM Glue globals for BSD kernel */
extern caddr_t mrg_romadbintr;
extern caddr_t mrg_ADBIntrPtr;
extern u_char mrg_GetResource[];	/* type is almost a lie; 
					call it an array of bytes of code */
extern u_char mrg_ResError[];


	/* MacOS Error Codes */
#define noErr		0
#define memFullErr	-108
#define memWZErr	-111
#define resNotFound	-192


	/* Dump instruction trace */
void	dumptrace(void);


	/* Stuff for configuring ROM Glue */
typedef struct rsrc_s {
	u_int16_t unknown[4];	/* ???? */
	u_int32_t next;		/* pointer to next resoure in list */
	u_int32_t body;		/* pointer to resource body? */
	u_int32_t name;		/* resource name */
	u_int16_t index;	/* ???? */
} rsrc_t;

typedef struct romvec_s {
	const char *romident; 	/* just to print it out */
	caddr_t adbintr;	/* where is ADB interrupt */
	caddr_t pmintr; 	/* where is ADB/PM interrupt, on machines */
				/*  that have it */
	caddr_t adb130intr;	/* ADBBase[0x130] interrupt; don't know */
				/*  what it is, but it's important.  Don't */
				/*  you love reverse engineering? */
	caddr_t CountADBs;
	caddr_t GetIndADB;
	caddr_t GetADBInfo;
	caddr_t SetADBInfo;
	caddr_t ADBReInit;
	caddr_t ADBOp;
	caddr_t PMgrOp; 	/* On machines that have it */
	caddr_t WriteParam;
	caddr_t SetDateTime;
	caddr_t InitUtil;
	caddr_t ReadXPRam;
	caddr_t WriteXPRam;
	caddr_t jClkNoMem;
	caddr_t ADBAlternateInit;	/* more fundamental than ABDReInit */
	caddr_t Egret;
	caddr_t InitEgret;	/* Set up Buffer for Egret routines */
	caddr_t ADBReInit_JTBL;
	caddr_t ROMResourceMap; /* Address of first Resource in linked list */
	caddr_t FixDiv;
	caddr_t FixMul;
} romvec_t;

/*
 * Function prototypes.
 */

/* macrom.c */
void	mrg_setvectors(romvec_t *rom_vectors);
int	mrg_romready(void);
caddr_t	*Get_Ind_Resource(u_int32_t, u_int16_t);
void	mrg_initadbintr(void);
int	mrg_adbintr(void);
int	mrg_pmintr(void);
void	mrg_fixupROMBase(caddr_t, caddr_t);
int	mrg_Delay(void);
void	mrg_DTInstall(void);
void	mrg_execute_deferred(void);
void	mrg_VBLQueue(void);
void	mrg_init_stub_1(void);
void	mrg_init_stub_2(void);
void	mrg_1sec_timer_tick(void);
void	mrg_lvl1dtpanic(void);
void	mrg_lvl2dtpanic(void);
void	mrg_jadbprocpanic(void);
void	mrg_jswapmmupanic(void);
void	mrg_jkybdtaskpanic(void);
void	mrg_notrap(void);
int	myowntrap(void);
int	mrg_NewPtr(void);
int	mrg_DisposPtr(void);
int	mrg_GetPtrSize(void);
int	mrg_SetPtrSize(void);
int	mrg_PostEvent(void);
int	mrg_SetTrapAddress(void);
void	mrg_StripAddress(void);
void	mrg_aline_super(struct frame *);
void	mrg_init(void);
void	mrg_FixDiv(void);
void	mrg_FixMul(void);

/* machdep.c */
int	mach_cputype(void);

/* Tracing aids */

/* trace all instructions, not just flow changes. */
#define tron() \
	asm("movw sr, d0 ; orw #0x8000, d0 ; movw d0, sr" : : : "d0")
#define troff() \
	asm("movw sr, d0 ; andw #0x3fff, d0 ; movw d0, sr" : : : "d0")
@


1.13
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.12 2005/02/20 18:08:08 martin Exp $	*/
@


1.12
log
@overhaul macrom code from NetBSD:

- simplify the asm constraints in mrg_aline_super()
- generate a SIGILL for user-mode A-line traps
- cleanup, KNF, whitespace nitpicking and minor other updates

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.11 2005/01/13 21:06:46 martin Exp $	*/
d169 1
a169 1
	char *romident; 	/* just to print it out */
@


1.11
log
@More interrupt system cleaning and homogenization:
- switch all interrupt functions to an int (*)(void *) prototype.
- do not register dummy functions for all unhandled interrupts, instead
  let the dispatchers cope with NULL.
- add evcount interrupt counters.
@
text
@d1 2
a2 2
/*	$OpenBSD: macrom.h,v 1.10 2002/03/15 01:20:04 millert Exp $	*/
/*	$NetBSD: macrom.h,v 1.9 1996/05/25 14:45:35 briggs Exp $	*/
d81 1
a81 2
extern caddr_t		jDTInstall;	/* short-cut to deferred task mgr */
					/* trap handler */
a84 1
extern caddr_t	jCacheFlush;		/* pointer to CacheFlush */
d107 8
a114 9
int MyOwnTrap(
	void);
void KnownRTS(
	void);

#ifdef MRG_ADB		/* These routines are defined here
			 * if using the MRG_ADB method for accessing
			 * the ADB/PRAM/RTC. They are 
			 * defined in adb_direct.h */
d116 8
a123 20
int SetADBInfo(
	ADBSetInfoBlock *info,
	int		adbAddr);
int CountADBs(  
	void);
int GetIndADB(
	ADBDataBlock	*info,
	int		index);
int GetADBInfo(
	ADBDataBlock	*info,
	int		adbAddr);
void ADBReInit(
	void);
int ADBOp(
	Ptr	buffer, 	/* note different order of parameters */
	Ptr	compRout,
	Ptr	data,
	short	commandNum);
void ADBAlternateInit(
	void);
d127 4
a130 9
Ptr NewPtr(
	int size);
int DisposPtr(
	Ptr ptr);
int GetPtrSize(
	Ptr ptr);
int SetPtrSize(
	Ptr ptr,
	int newbytes);
d133 5
a137 12
Handle GetResource(
	u_int theType,
	short	theID);
short ResError(
	void);
short mrg_CountResources(
	u_int32_t type);
short Count_Resources(
	u_int32_t rsrc_type);
caddr_t *mrg_GetIndResource(
	u_int16_t index,
	u_int32_t type);
d156 1
a156 1
void dumptrace(void);
d211 2
a228 1
int	mrg_GetTrapAddress(void);
a231 1
void	mrg_aline_user(void);
d243 1
a243 1
	__asm("movw sr, d0 ; orw #0x8000, d0 ; movw d0, sr" : : : "d0")
d245 1
a245 1
	__asm("movw sr, d0 ; andw #0x3fff, d0 ; movw d0, sr" : : : "d0")
@


1.10
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.9 2002/03/14 01:26:36 millert Exp $	*/
d234 2
a235 2
long	mrg_adbintr(void);
long	mrg_pmintr(void);
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.8 1997/04/14 18:48:03 gene Exp $	*/
d44 3
a46 3
extern void	(*JADBProc)(void); /* ADBReInit pre/post processing */
extern void	(*Lvl1DT[8])(void); /* VIA1 interrupt table by bit */
extern void	(*Lvl2DT[8])(void); /* VIA2 interrupt table by bit */
d51 1
a51 1
extern void	(*JKybdTask)(void); /* Keyboard task ptr? */
d68 1
a68 1
extern void	(*jSwapMMU)(void); /* Pointer to MMU Swap routine */
d74 1
a74 1
extern void	(*jClkNoMem)(void); /* pointer to ClkNoMem */
@


1.8
log
@Bring our incarnation of John Wittowski's direct adb driver into compatible
state with NetBSD's.  The direct-to-ADB code is now enabled by default.
Using 'options MRG_ADB' will cause the kernel to revert to the 'old standby'
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.7 1997/04/05 15:29:12 briggs Exp $	*/
d44 5
a48 5
extern void	(*JADBProc) __P((void)); /* ADBReInit pre/post processing */
extern void	(*Lvl1DT[8]) __P((void)); /* VIA1 interrupt table by bit */
extern void	(*Lvl2DT[8]) __P((void)); /* VIA2 interrupt table by bit */
extern void	(*jADBOp) __P((void));	/* low memory pointer to ADBOp */
extern void	(*jUnimplTrap) __P((void));	/* Unimplemented trap */
d51 1
a51 1
extern void	(*JKybdTask) __P((void)); /* Keyboard task ptr? */
d53 1
a53 1
extern void	(*MacJmp) __P((void));	/* ??? */
d68 2
a69 2
extern void	(*jSwapMMU) __P((void)); /* Pointer to MMU Swap routine */
extern void	(*jEgret) __P((void));	/* Pointer to MMU Swap routine */
d74 1
a74 1
extern void	(*jClkNoMem) __P((void)); /* pointer to ClkNoMem */
d230 32
a261 32
void	mrg_setvectors __P((romvec_t *rom_vectors));
int	mrg_romready __P((void));
caddr_t	*Get_Ind_Resource __P((u_int32_t, u_int16_t));
void	mrg_initadbintr __P((void));
long	mrg_adbintr __P((void));
long	mrg_pmintr __P((void));
void	mrg_fixupROMBase __P((caddr_t, caddr_t));
int	mrg_Delay __P((void));
void	mrg_VBLQueue __P((void));
void	mrg_init_stub_1 __P((void));
void	mrg_init_stub_2 __P((void));
void	mrg_1sec_timer_tick __P((void));
void	mrg_lvl1dtpanic __P((void));
void	mrg_lvl2dtpanic __P((void));
void	mrg_jadbprocpanic __P((void));
void	mrg_jswapmmupanic __P((void));
void	mrg_jkybdtaskpanic __P((void));
void	mrg_notrap __P((void));
int	myowntrap __P((void));
int	mrg_NewPtr __P((void));
int	mrg_DisposPtr __P((void));
int	mrg_GetPtrSize __P((void));
int	mrg_SetPtrSize __P((void));
int	mrg_PostEvent __P((void));
int	mrg_GetTrapAddress __P((void));
int	mrg_SetTrapAddress __P((void));
void	mrg_StripAddress __P((void));
void	mrg_aline_super __P((struct frame *));
void	mrg_aline_user __P((void));
void	mrg_init __P((void));
void	mrg_FixDiv __P((void));
void	mrg_FixMul __P((void));
d264 1
a264 1
int	mach_cputype __P((void));
@


1.8.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.8 1997/04/14 18:48:03 gene Exp $	*/
d44 5
a48 5
extern void	(*JADBProc)(void);	/* ADBReInit pre/post processing */
extern void	(*Lvl1DT[8])(void);	/* VIA1 interrupt table by bit */
extern void	(*Lvl2DT[8])(void);	/* VIA2 interrupt table by bit */
extern void	(*jADBOp)(void);	/* low memory pointer to ADBOp */
extern void	(*jUnimplTrap)(void);	/* Unimplemented trap */
d51 1
a51 1
extern void	(*JKybdTask)(void);	/* Keyboard task ptr? */
d53 1
a53 1
extern void	(*MacJmp)(void);	/* ??? */
d68 2
a69 2
extern void	(*jSwapMMU)(void);	/* Pointer to MMU Swap routine */
extern void	(*jEgret)(void);	/* Pointer to MMU Swap routine */
d74 1
a74 1
extern void	(*jClkNoMem)(void);	/* pointer to ClkNoMem */
d230 32
a261 32
void	mrg_setvectors(romvec_t *rom_vectors);
int	mrg_romready(void);
caddr_t	*Get_Ind_Resource(u_int32_t, u_int16_t);
void	mrg_initadbintr(void);
long	mrg_adbintr(void);
long	mrg_pmintr(void);
void	mrg_fixupROMBase(caddr_t, caddr_t);
int	mrg_Delay(void);
void	mrg_VBLQueue(void);
void	mrg_init_stub_1(void);
void	mrg_init_stub_2(void);
void	mrg_1sec_timer_tick(void);
void	mrg_lvl1dtpanic(void);
void	mrg_lvl2dtpanic(void);
void	mrg_jadbprocpanic(void);
void	mrg_jswapmmupanic(void);
void	mrg_jkybdtaskpanic(void);
void	mrg_notrap(void);
int	myowntrap(void);
int	mrg_NewPtr(void);
int	mrg_DisposPtr(void);
int	mrg_GetPtrSize(void);
int	mrg_SetPtrSize(void);
int	mrg_PostEvent(void);
int	mrg_GetTrapAddress(void);
int	mrg_SetTrapAddress(void);
void	mrg_StripAddress(void);
void	mrg_aline_super(struct frame *);
void	mrg_aline_user(void);
void	mrg_init(void);
void	mrg_FixDiv(void);
void	mrg_FixMul(void);
d264 1
a264 1
int	mach_cputype(void);
@


1.8.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 5
a48 5
extern void	(*JADBProc)(void);	/* ADBReInit pre/post processing */
extern void	(*Lvl1DT[8])(void);	/* VIA1 interrupt table by bit */
extern void	(*Lvl2DT[8])(void);	/* VIA2 interrupt table by bit */
extern void	(*jADBOp)(void);	/* low memory pointer to ADBOp */
extern void	(*jUnimplTrap)(void);	/* Unimplemented trap */
d51 1
a51 1
extern void	(*JKybdTask)(void);	/* Keyboard task ptr? */
d53 1
a53 1
extern void	(*MacJmp)(void);	/* ??? */
d68 2
a69 2
extern void	(*jSwapMMU)(void);	/* Pointer to MMU Swap routine */
extern void	(*jEgret)(void);	/* Pointer to MMU Swap routine */
d74 1
a74 1
extern void	(*jClkNoMem)(void);	/* pointer to ClkNoMem */
d230 32
a261 32
void	mrg_setvectors(romvec_t *rom_vectors);
int	mrg_romready(void);
caddr_t	*Get_Ind_Resource(u_int32_t, u_int16_t);
void	mrg_initadbintr(void);
long	mrg_adbintr(void);
long	mrg_pmintr(void);
void	mrg_fixupROMBase(caddr_t, caddr_t);
int	mrg_Delay(void);
void	mrg_VBLQueue(void);
void	mrg_init_stub_1(void);
void	mrg_init_stub_2(void);
void	mrg_1sec_timer_tick(void);
void	mrg_lvl1dtpanic(void);
void	mrg_lvl2dtpanic(void);
void	mrg_jadbprocpanic(void);
void	mrg_jswapmmupanic(void);
void	mrg_jkybdtaskpanic(void);
void	mrg_notrap(void);
int	myowntrap(void);
int	mrg_NewPtr(void);
int	mrg_DisposPtr(void);
int	mrg_GetPtrSize(void);
int	mrg_SetPtrSize(void);
int	mrg_PostEvent(void);
int	mrg_GetTrapAddress(void);
int	mrg_SetTrapAddress(void);
void	mrg_StripAddress(void);
void	mrg_aline_super(struct frame *);
void	mrg_aline_user(void);
void	mrg_init(void);
void	mrg_FixDiv(void);
void	mrg_FixMul(void);
d264 1
a264 1
int	mach_cputype(void);
@


1.7
log
@MRG-based ADB support for the PowerBook series.  Contributed by
hamada@@next.etron.kanazawa-it.ac.jp (Takashi Hamada)
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.6 1997/03/30 21:53:26 briggs Exp $	*/
d114 2
a115 2
#ifndef HWDIRECT	/* These routines are NOT defined here
			 * if using the HWDIRECT method for accessing
@


1.6
log
@An implementation of pieces of the Deferred Task Manager--required by
some video cards.  Provided by Paul Goyette <paul@@pgoyette.bdt.com>.
This introduces another simulated software interrupt.
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.5 1997/02/23 06:05:02 briggs Exp $	*/
d86 1
d254 1
@


1.5
log
@Integrate code from John P. Wittkoski <jpw@@netwizards.net> and
Takashi Hamada <hamada@@next.etron.kanazawa-it.ac.jp>.  This code
interfaces directly to the hardware to support the ADB on many
macs.  It is enabled by "options HWDIRECT" in the configuration
file.  At some point, this should probably become the default method
as interfacing to the ADB through the ROMs has been painful and sometimes
problematic.

This code should have functioning ADB support for:
	II series (II, SE/30, IIx, IIcx)
	IIsi series (IIsi, IIci, IIvx, IIvi)
	LC II, LC III
	Performa 400, 405, 430, 460, 465, 467, 600
	Classic II, Color Classic, Color Classic II
	PB 5XX series
	Duo series
	PB 140,145,145b,160,(160c?),165,165c,170,180,180c
	Quadra 700,900,950
There is an off-chance that it will work on:
	PB 150, PB 190
	Quadra/Centris 605,610,630,650,660AV,800,840AV
	LC 475,550,575,630
	Performa 475,476,575,577,578,630
Note that functioning ADB support does not mean that everything else
will work.  I obviously do not own all of the above machines (does
anyone?  ;-)...  Any reports are welcome.

Many thanks to John Wittkoski and Takashi Hamada!
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.4 1997/01/19 03:58:08 briggs Exp $	*/
d81 2
@


1.4
log
@asm -> __asm, inline -> __inline
@
text
@d1 1
a1 1
/*	$OpenBSD: macrom.h,v 1.3 1996/05/26 18:36:25 briggs Exp $	*/
d99 1
a99 1
	Ptr		dbDataAreaAdd;
d111 4
d136 1
@


1.3
log
@Add OpenBSD Id string.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d261 1
a261 1
	asm("movw sr, d0 ; orw #0x8000, d0 ; movw d0, sr" : : : "d0")
d263 1
a263 1
	asm("movw sr, d0 ; andw #0x3fff, d0 ; movw d0, sr" : : : "d0")
@


1.2
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: macrom.h,v 1.5 1995/09/17 21:28:37 briggs Exp $	*/
d35 1
d43 8
a50 8
extern void		(*JADBProc)();	/* ADBReInit pre/post processing */
extern void		(*Lvl1DT[8])(); /* VIA1 interrupt table by bit */
extern void		(*Lvl2DT[8])(); /* VIA2 interrupt table by bit */
extern void		(*jADBOp)();	/* low memory pointer to ADBOp */
extern void		(*jUnimplTrap)();	/* Unimplemented trap */
	/* loglob(KbdLast, 0x218)	/* addr of last kbd to send */
	/* loglob(KbdType, 0x21E)	/* type of last kbd to send */
extern void		(*JKybdTask)(); /* Keyboard task ptr? */
d52 1
a52 1
extern void		(*MacJmp)();	/* ??? */
d67 2
a68 2
extern void		(*jSwapMMU)();	/* Pointer to MMU Swap routine */
extern void		(*jEgret)();	/* Pointer to MMU Swap routine */
d73 1
a73 1
extern void		(*jClkNoMem)(); /* pointer to ClkNoMem */
d75 9
d149 7
d178 8
d208 1
d210 4
a214 2
void mrg_setvectors(romvec_t *rom_vectors);
int mrg_romready(void);
d216 41
a257 1
	/* Tracing aids */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
