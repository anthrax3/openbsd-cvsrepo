head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.28
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.26
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.24
	OPENBSD_2_9_BASE:1.4
	NIKLAS_UNDEAD:1.4.0.22
	OPENBSD_2_8:1.4.0.20
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.18
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.16
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2003.05.23.22.27.43;	author tedu;	state dead;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.06.23.15.59.43;	author briggs;	state Exp;
branches
	1.4.16.1
	1.4.28.1;
next	1.3;

1.3
date	96.05.26.18.36.33;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.14.38;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches;
next	;

1.4.16.1
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.4.16.2;

1.4.16.2
date	2003.06.07.11.13.14;	author ho;	state dead;
branches;
next	;

1.4.28.1
date	2002.06.11.03.36.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove old swapgeneric.c's
@
text
@/*	$OpenBSD: swapgeneric.c,v 1.5 2002/03/14 01:26:36 millert Exp $	*/
/*	$NetBSD: swapgeneric.c,v 1.10 1996/06/19 03:21:06 scottr Exp $	*/

/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)swapgeneric.c	7.5 (Berkeley) 5/7/91
 */

/*
 * fake swapgeneric.c -- should do this differently.
 */

#include <sys/param.h>
#include <sys/conf.h>

int (*mountroot)(void *) = NULL;  /* tells autoconf.c that we are "generic" */

dev_t	rootdev = NODEV;
dev_t	dumpdev = NODEV;

struct	swdevt	swdevt[] = {
	{ NODEV,	0,	0 },
	{ NODEV,	0,	0 },
};
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.4 1996/06/23 15:59:43 briggs Exp $	*/
@


1.4
log
@From scottr/NetBSD:
Completely revamp setroot() and friends.  Since Chris' version of this code
is close to how I reworked it, I pulled in the (essentially MI) NetBSD/alpha
and added the appropriate support around it.

- No need for the GENERIC kernel config option.
- NFS-mounted root and swap are supported.
- If we can't figure out where the root filesystem is from what the Booter
  tells us, ask the user.
- Split the mainbus autoconfig code to a separate file.

Also, update/add copyrights as appropriate.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.3 1996/05/26 18:36:33 briggs Exp $	*/
d46 1
a46 1
int (*mountroot) __P((void *)) = NULL;  /* tells autoconf.c that we are "generic" */
@


1.4.28.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.4 1996/06/23 15:59:43 briggs Exp $	*/
d46 1
a46 1
int (*mountroot)(void *) = NULL;  /* tells autoconf.c that we are "generic" */
@


1.4.16.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
int (*mountroot)(void *) = NULL;  /* tells autoconf.c that we are "generic" */
@


1.4.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.4.16.1 2002/03/28 10:34:05 niklas Exp $	*/
@


1.3
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: swapgeneric.c,v 1.9 1996/05/05 06:18:56 briggs Exp $	*/
d39 4
a44 9
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/reboot.h>
#include <sys/device.h>
#include <sys/disklabel.h>

#include <dev/cons.h>

#include <ufs/ffs/ffs_extern.h>
d46 1
a46 4
#include <machine/pte.h>

#include "sd.h"
#include "cd.h"
d52 1
a52 1
	{ NODEV,	1,	0 },
a54 146

#if NSD > 0
extern struct cfdriver sd_cd;
#endif
#if NCD > 0
extern struct cfdriver cd_cd;
#endif

struct	genericconf {
	struct cfdriver	*gc_driver;
	char		*gc_name;
	dev_t		gc_root;
} genericconf[] = {
#if NSD > 0
	{ &sd_cd,  "sd",  makedev(4,0) },
#endif
#if NCD > 0
	{ &cd_cd,  "cd",  makedev(6,0) },
#endif
	{ 0 }
};

void	setconf __P((void));
void	doboot __P((void));
void	gets __P((char *));
int (*mountroot) __P((void)) = ffs_mountroot;

void
setconf()
{
	register struct genericconf *gc = NULL;
	int	unit, swaponroot = 0;
	char	*root_swap;

	if (genericconf[0].gc_driver == 0)
		goto verybad;

	if (boothowto & RB_MINIROOT)
		root_swap = "swap";
	else {
		if (rootdev != NODEV)
			goto doswap;
		root_swap = "root";
	}

	if (boothowto & RB_ASKNAME) {
		char name[128];
retry:
		printf("%s device? ", root_swap);
		gets(name);
		for (gc = genericconf; gc->gc_driver; gc++)
			if (gc->gc_name[0] == name[0] &&
			    gc->gc_name[1] == name[1])
				goto gotit;
		printf("use one of:");
		for (gc = genericconf; gc->gc_driver; gc++)
			printf(" %s%%d", gc->gc_name);
		printf("\n");
		goto retry;
gotit:
		if (name[3] == '*') {
			name[3] = name[4];
			swaponroot++;
		}
		if (name[2] >= '0' && name[2] <= '7' && name[3] == 0) {
			unit = name[2] - '0';
			goto found;
		}
		printf("bad/missing unit number\n");
	}
	unit = 0;
	for (gc = genericconf; gc->gc_driver; gc++) {
		if (gc->gc_driver->cd_ndevs > unit &&
		    gc->gc_driver->cd_devs[unit]) {
			printf("Trying %s on %s0\n", root_swap, gc->gc_name);
			goto found;
		}
	}
verybad:
	printf("no suitable %s", root_swap);
	if (root_swap[0] == 's') {
		printf("\n");
		goto doswap;
	}
	printf(" -- hit any key to reboot\n");
	cngetc();
	doboot();
	printf("      Automatic reboot failed.\n");
	printf("You may reboot or turn the machine off, now.\n");
	for(;;);

found:
	gc->gc_root = makedev(major(gc->gc_root), unit * MAXPARTITIONS);
	if ((boothowto & RB_MINIROOT) == 0) {
		rootdev = gc->gc_root;
	}
doswap:
	if (gc)
		swdevt[0].sw_dev = dumpdev =
			makedev(major(gc->gc_root), minor(gc->gc_root) + 1);
	else
		swdevt[0].sw_dev = dumpdev =
			makedev(major(rootdev), minor(rootdev) + 1);
	/* swap size and dumplo set during autoconfigure */
	if (swaponroot)
	 	rootdev = dumpdev;
}

void
gets(cp)
	char *cp;
{
	register char	*lp;
	register int	c;

	lp = cp;
	for (;;) {
		cnputc(c=cngetc());
		switch (c) {
		case '\n':
		case '\r':
			*lp++ = '\0';
			return;
		case '\b':
		case '\177':
			if (lp > cp) {
				lp--;
				cnputc(' ');
				cnputc('\b');
			}
			continue;
		case '#':
			lp--;
			if (lp < cp)
				lp = cp;
			continue;
		case '@@':
		case 'u'&037:
			lp = cp;
			cnputc('\n');
			continue;
		default:
			*lp++ = c;
		}
	}
}
@


1.2
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.7 1995/08/09 03:22:50 briggs Exp $	*/
d46 4
d64 1
a64 1
extern struct cfdriver sdcd;
d67 1
a67 1
extern struct cfdriver cdcd;
d76 1
a76 1
	{ &sdcd,  "sd",  makedev(4,0) },
d79 1
a79 1
	{ &cdcd,  "cd",  makedev(6,0) },
d84 4
a87 2
extern int ffs_mountroot();
int (*mountroot)() = ffs_mountroot;
d89 1
d146 1
a146 1
	printf(" -- hit any key to reboot\n", root_swap);
d170 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
