head	1.12;
access;
symbols
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.26
	OPENBSD_5_0:1.11.0.24
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.22
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.20
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.16
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.18
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.14
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.12
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.10
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.8
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.6.0.32
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.30
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.28
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.26
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.24
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.22
	OPENBSD_2_9_BASE:1.6
	NIKLAS_UNDEAD:1.6.0.20
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2012.06.20.18.23.52;	author matthew;	state dead;
branches;
next	1.11;

1.11
date	2006.01.18.23.21.17;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.13.21.02.38;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.13.19.36.47;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.04.20.39.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.11.19.41.10;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.04.14.18.48.06;	author gene;	state Exp;
branches
	1.6.14.1
	1.6.26.1;
next	1.5;

1.5
date	97.02.23.06.05.04;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	97.01.24.01.35.52;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.18.36.30;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.14.36;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.08;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2003.05.13.19.41.05;	author ho;	state Exp;
branches;
next	;

1.6.26.1
date	2003.05.19.21.49.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: pram.c,v 1.11 2006/01/18 23:21:17 miod Exp $	*/
/*	$NetBSD: pram.c,v 1.11 1996/10/21 05:42:29 scottr Exp $	*/

/*-
 * Copyright (C) 1993	Allen K. Briggs, Chris P. Caputo,
 *			Michael L. Finch, Bradley A. Grantham, and
 *			Lawrence A. Kesteloot
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Alice Group.
 * 4. The names of the Alice Group or any of its members may not be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE ALICE GROUP ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE ALICE GROUP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/param.h>

#include <mac68k/mac68k/pram.h>
#include <mac68k/dev/adbvar.h>

/*
 * getPramTime
 * This function can be called regrardless of the machine
 * type. It calls the correct hardware-specific code.
 */
unsigned long
pram_readtime()
{
        unsigned long time;

        switch (adbHardware) {
        case ADB_HW_II:         /* access PRAM via VIA interface */
                return (getPramTimeII());

        case ADB_HW_IISI:       /* access PRAM via pseudo-adb functions */
	case ADB_HW_CUDA:
                if (adb_read_date_time(&time) != 0)
                        return (0);
                else
                        return (time);

        case ADB_HW_PB:         /* don't know how to access this yet */
                return (0);

        case ADB_HW_UNKNOWN:
        default:
                return (0);
        }
}

/*
 * setPramTime
 * This function can be called regrardless of the machine
 * type. It calls the correct hardware-specific code.
 */
void
pram_settime(unsigned long time)
{
        switch (adbHardware) {
        case ADB_HW_II:         /* access PRAM via ADB interface */
                setPramTimeII(time);
                break;

        case ADB_HW_IISI:       /* access PRAM via pseudo-adb functions */
	case ADB_HW_CUDA:
                adb_set_date_time(time);
                break;

        case ADB_HW_PB:         /* don't know how to access this yet */
                break;

        case ADB_HW_UNKNOWN:
	default:
                break;
        }
}
@


1.11
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.10 2006/01/13 21:02:38 miod Exp $	*/
@


1.10
log
@KNF and remove dead parts.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.9 2006/01/13 19:36:47 miod Exp $	*/
a41 2

extern int adbHardware;         /* from adb.c */
@


1.9
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.8 2006/01/04 20:39:05 miod Exp $	*/
a36 2

/* #include "stand.h"  */
a39 2
#include <machine/viareg.h>

a42 12
unsigned long
pram_readtime(void)
{
	return (getPramTime());
}

void
pram_settime(unsigned long time)
{
	return setPramTime(time);
}

a48 2
 * (It's sort of redundant with the above, but it was
 * added later.)
d51 1
a51 1
getPramTime(void)
d57 1
a57 2
                time=(long)getPramTimeII();
                return time;
d61 2
a62 2
                if (0 != adb_read_date_time(&time))
                        return 0;
d64 1
a64 1
                        return time;
d67 1
a67 1
                return 0;
d71 1
a71 1
                return 0;
a78 2
 * (It's sort of redundant with the above, but it was
 * added later.)
d81 1
a81 1
setPramTime(unsigned long time)
d86 1
a86 1
                return;
d91 1
a91 1
                return;
d94 1
a94 1
                return;
d97 2
a98 1
                return;
@


1.8
log
@Import NetBSD's direct adb code on mac68k, switching to real keyboard and mouse
drivers, and to wscons as the console; a few parts borrowed from OpenBSD/macppc
as well.

Currently only working with displays configured in 1bpp or 8bpp modes; this
limitation will be worked on ASAP.

Tested by claudio@@ kettenis@@ martin@@ nick@@ and I on various models. X11 changes
coming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.7 2003/05/11 19:41:10 deraadt Exp $	*/
a39 3
#ifdef DEBUG
#include <sys/systm.h>
#endif
a44 3
#ifdef MRG_ADB
#include <mac68k/mac68k/macrom.h>
#else
a45 78
#endif

#if DEBUG
static char *convtime(unsigned long t)
{
  static long daypmon[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
  static char *monstr[] = {"January","February","March","April","May","June",
    "July","August","September","October","November","December" };
  static char s[200];
  long year,month,day,hour,minute,seconds,i,dayperyear;

  year=1904;
  month=0;  /* Jan */
  day=1;
  hour=0;
  minute=0;
  seconds=0;

  if(t == 0xffffffff)
     return("<time value is -1>");

  while (t > 0)
  {
    if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))
    {
      dayperyear=366;
      daypmon[1]=29;
    }
    else
    {
      dayperyear=365;
      daypmon[1]=28;
    }
    i=dayperyear*60*60*24;
    if (t >= i)
    {
      t-=i;
      year++;
      continue;
    }
    i=daypmon[month]*60*60*24;
    if (t >= i)
    {
      t-=i;
      month++;
      continue;
    }
    i=60*60*24;
    if (t >= i)
    {
      t-=i;
      day++;
      continue;
    }
    i=60*60;
    if (t >= i)
    {
      t-=i;
      hour++;
      continue;
    }
    i=60;
    if (t >= i)
    {
      t-=i;
      minute++;
      continue;
    }
    seconds=t;
    t=0;
  }

  snprintf(s, sizeof s, "%s %ld, %ld   %ld:%ld:%ld",
    monstr[month],day,year,hour,minute,seconds);

  return s;
}
#endif
d50 1
a50 13
   unsigned long	timedata;

   if (0 == jClkNoMem)
	timedata = 0;	/* cause comparision of MacOS boottime */
			/* and PRAM time to fail */
   else
	timedata = getPramTime();
#if DEBUG
   printf("time read from PRAM: 0x%lx\n", timedata);
   printf("Date and time: %s\n",convtime(timedata));
#endif

   return(timedata);
a55 3
   if (0 == jClkNoMem)
	return;
   else
d59 1
a59 5
#ifndef MRG_ADB         /* These routines are defined here only
                         * when the MRG_ADB method for accessing
                         * the ADB/PRAM/RTC isn't enabled. */

extern int adbHardware;         /* from newadb.c */
a119 1

a120 2

#endif  /* ifndef MRG_ADB */
@


1.7
log
@string cleaning; krw ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.6 1997/04/14 18:48:06 gene Exp $	*/
d47 5
a51 4
#include <arch/mac68k/mac68k/pram.h>
#include <arch/mac68k/mac68k/macrom.h>
#ifndef MRG_ADB
#include <arch/mac68k/dev/adbvar.h>
d182 1
d213 1
@


1.6
log
@Bring our incarnation of John Wittowski's direct adb driver into compatible
state with NetBSD's.  The direct-to-ADB code is now enabled by default.
Using 'options MRG_ADB' will cause the kernel to revert to the 'old standby'
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.5 1997/02/23 06:05:04 briggs Exp $	*/
d123 2
a124 1
  sprintf(s,"%s %ld, %ld   %ld:%ld:%ld",monstr[month],day,year,hour,minute,seconds);
@


1.6.26.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d123 1
a123 2
  snprintf(s, sizeof s, "%s %ld, %ld   %ld:%ld:%ld",
    monstr[month],day,year,hour,minute,seconds);
@


1.6.14.1
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.6 1997/04/14 18:48:06 gene Exp $	*/
d123 1
a123 2
  snprintf(s, sizeof s, "%s %ld, %ld   %ld:%ld:%ld",
    monstr[month],day,year,hour,minute,seconds);
@


1.5
log
@Integrate code from John P. Wittkoski <jpw@@netwizards.net> and
Takashi Hamada <hamada@@next.etron.kanazawa-it.ac.jp>.  This code
interfaces directly to the hardware to support the ADB on many
macs.  It is enabled by "options HWDIRECT" in the configuration
file.  At some point, this should probably become the default method
as interfacing to the ADB through the ROMs has been painful and sometimes
problematic.

This code should have functioning ADB support for:
	II series (II, SE/30, IIx, IIcx)
	IIsi series (IIsi, IIci, IIvx, IIvi)
	LC II, LC III
	Performa 400, 405, 430, 460, 465, 467, 600
	Classic II, Color Classic, Color Classic II
	PB 5XX series
	Duo series
	PB 140,145,145b,160,(160c?),165,165c,170,180,180c
	Quadra 700,900,950
There is an off-chance that it will work on:
	PB 150, PB 190
	Quadra/Centris 605,610,630,650,660AV,800,840AV
	LC 475,550,575,630
	Performa 475,476,575,577,578,630
Note that functioning ADB support does not mean that everything else
will work.  I obviously do not own all of the above machines (does
anyone?  ;-)...  Any reports are welcome.

Many thanks to John Wittkoski and Takashi Hamada!
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.4 1997/01/24 01:35:52 briggs Exp $	*/
d49 1
a49 1
#ifdef HWDIRECT
d156 3
a158 3
#ifdef HWDIRECT         /* These routines are defined here only
                         * when the HWDIRECT method for accessing
                         * the ADB/PRAM/RTC is enabled. */
d222 1
a222 1
#endif  /* ifdef HWDIRECT */
@


1.4
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 1
a1 1
/*	$OpenBSD: pram.c,v 1.3 1996/05/26 18:36:30 briggs Exp $	*/
d43 2
d46 6
a51 2
#include "pram.h"
#include "macrom.h"
d155 68
@


1.3
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: pram.c,v 1.8 1996/03/31 14:21:03 scottr Exp $	*/
d40 3
d48 1
a48 1
char *convtime(unsigned long t)
d117 1
a117 1
  sprintf(s,"%s %d, %d   %d:%d:%d",monstr[month],day,year,hour,minute,seconds);
d134 1
a134 1
   printf("time read from PRAM: 0x%x\n", timedata);
@


1.2
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: pram.c,v 1.6 1995/09/17 18:50:17 briggs Exp $	*/
d38 2
a39 1
#include "via.h"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
