head	1.10;
access;
symbols
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.26
	OPENBSD_5_0:1.9.0.24
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.22
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.20
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.24
	OPENBSD_2_9_BASE:1.2
	NIKLAS_UNDEAD:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.10
date	2012.06.20.18.23.52;	author matthew;	state dead;
branches;
next	1.9;

1.9
date	2006.01.13.19.36.47;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.01.13.16.01;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.25.18.32.11;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.27.16.16.27;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.04.22.08.15;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.16.23.42.21;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.08.17.30.41;	author aaron;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	96.05.26.18.36.36;	author briggs;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.51.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.09;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.07.04.10.18.43;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.03.27.23.28.44;	author niklas;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2003.06.07.11.13.14;	author ho;	state Exp;
branches;
next	1.2.16.4;

1.2.16.4
date	2004.02.19.10.49.03;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.36.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: vectors.s,v 1.9 2006/01/13 19:36:47 miod Exp $	*/
|	$NetBSD: vectors.s,v 1.10 1998/08/12 06:58:42 scottr Exp $

| Copyright (c) 1988 University of Utah
| Copyright (c) 1990 Regents of the University of California.
| All rights reserved.
|
| Redistribution and use in source and binary forms, with or without
| modification, are permitted provided that the following conditions
| are met:
| 1. Redistributions of source code must retain the above copyright
|    notice, this list of conditions and the following disclaimer.
| 2. Redistributions in binary form must reproduce the above copyright
|    notice, this list of conditions and the following disclaimer in the
|    documentation and/or other materials provided with the distribution.
| 3. Neither the name of the University nor the names of its contributors
|    may be used to endorse or promote products derived from this software
|    without specific prior written permission.
|
| THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
| ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
| IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
| ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
| FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
| DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
| OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
| HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
| LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
| OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
| SUCH DAMAGE.
|
|	@@(#)vectors.s	7.2 (Berkeley) 5/7/91
|

#define		BADTRAP16		\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap)

	.data
GLOBAL(vectab)
	VECTOR_UNUSED		/* 0: NOT USED (reset SSP) */
	VECTOR_UNUSED		/* 1: NOT USED (reset PC) */
	VECTOR_UNUSED		/* 2: bus error */
	VECTOR_UNUSED		/* 3: address error */
	VECTOR(illinst)		/* 4: illegal instruction */
	VECTOR(zerodiv)		/* 5: zero divide */
	VECTOR(chkinst)		/* 6: CHK instruction */
	VECTOR(trapvinst)	/* 7: TRAPV instruction */
	VECTOR(privinst)	/* 8: privilege violation */
	VECTOR(trace)		/* 9: trace */
	VECTOR(illinst)		/* 10: line 1010 emulator */
	VECTOR(fpfline)		/* 11: line 1111 emulator */
	VECTOR(badtrap)		/* 12: unassigned, reserved */
	VECTOR(coperr)		/* 13: coprocessor protocol violation */
	VECTOR(fmterr)		/* 14: format error */
	VECTOR(badtrap)		/* 15: uninitialized interrupt vector */
	VECTOR(badtrap)		/* 16: unassigned, reserved */
	VECTOR(badtrap)		/* 17: unassigned, reserved */
	VECTOR(badtrap)		/* 17: unassigned, reserved */
	VECTOR(badtrap)		/* 19: unassigned, reserved */
	VECTOR(badtrap)		/* 20: unassigned, reserved */
	VECTOR(badtrap)		/* 21: unassigned, reserved */
	VECTOR(badtrap)		/* 22: unassigned, reserved */
	VECTOR(badtrap)		/* 23: unassigned, reserved */
	VECTOR(spurintr)	/* 24: spurious interrupt */
	VECTOR(intrhand)	/* 25: level 1 interrupt autovector */
	VECTOR(intrhand)	/* 26: level 2 interrupt autovector */
	VECTOR(intrhand)	/* 27: level 3 interrupt autovector */
	VECTOR(intrhand)	/* 28: level 4 interrupt autovector */
	VECTOR(intrhand)	/* 29: level 5 interrupt autovector */
	VECTOR(intrhand)	/* 30: level 6 interrupt autovector */
	VECTOR(lev7intr)	/* 31: level 7 interrupt autovector */
	VECTOR(trap0)		/* 32: syscalls */
	VECTOR(trap1)		/* 33: sigreturn syscall or breakpoint */
	VECTOR(trap2)		/* 34: breakpoint or sigreturn syscall */
	VECTOR(illinst)		/* 35: TRAP instruction vector */
	VECTOR(illinst)		/* 36: TRAP instruction vector */
	VECTOR(illinst)		/* 37: TRAP instruction vector */
	VECTOR(illinst)		/* 38: TRAP instruction vector */
	VECTOR(illinst)		/* 39: TRAP instruction vector */
	VECTOR(illinst)		/* 40: TRAP instruction vector */
	VECTOR(illinst)		/* 41: TRAP instruction vector */
	VECTOR(illinst)		/* 42: TRAP instruction vector */
	VECTOR(illinst)		/* 43: TRAP instruction vector */
	VECTOR(trap12)		/* 44: TRAP instruction vector */
	VECTOR(illinst)		/* 45: TRAP instruction vector */
	VECTOR(illinst)		/* 46: TRAP instruction vector */
	VECTOR(trap15)		/* 47: TRAP instruction vector */

GLOBAL(fpvect_tab)
	VECTOR(fpfault)		/* 48: FPCP branch/set on unordered cond */
	VECTOR(fpfault)		/* 49: FPCP inexact result */
	VECTOR(fpfault)		/* 50: FPCP divide by zero */
	VECTOR(fpfault)		/* 51: FPCP underflow */
	VECTOR(fpfault)		/* 52: FPCP operand error */
	VECTOR(fpfault)		/* 53: FPCP overflow */
	VECTOR(fpfault)		/* 54: FPCP signalling NAN */
GLOBAL(fpvect_end)

	VECTOR(fpunsupp)	/* 55: FPCP unimplemented data type */
	VECTOR(badtrap)		/* 56: unassigned, reserved */
	VECTOR(badtrap)		/* 57: unassigned, reserved */
	VECTOR(badtrap)		/* 58: unassigned, reserved */
	VECTOR(badtrap)		/* 59: unassigned, reserved */
	VECTOR(badtrap)		/* 60: unassigned, reserved */
	VECTOR(badtrap)		/* 61: unassigned, reserved */
	VECTOR(badtrap)		/* 62: unassigned, reserved */
	VECTOR(badtrap)		/* 63: unassigned, reserved */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */
	BADTRAP16		/* 64-255: user interrupt vectors */

#ifdef FPSP
	/*
	 * 68040: this chunk of vectors is copied into the fpfault zone
	 */
GLOBAL(fpsp_tab)
	ASVECTOR(fpsp_bsun)	/* 48: FPCP branch/set on unordered cond */
	ASVECTOR(inex)		/* 49: FPCP inexact result */
	ASVECTOR(dz)		/* 50: FPCP divide by zero */
	ASVECTOR(fpsp_unfl)	/* 51: FPCP underflow */
	ASVECTOR(fpsp_operr)	/* 52: FPCP operand error */
	ASVECTOR(fpsp_ovfl)	/* 53: FPCP overflow */
	ASVECTOR(fpsp_snan)	/* 54: FPCP signalling NAN */
#endif /* FPSP */
@


1.9
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.8 2006/01/01 13:16:01 miod Exp $	*/
@


1.8
log
@Enable A/UX style interrupt routing on non-AV Centrises and Quadras, gives us
smarter spl levels and the clock drift is reduced; adapted from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.7 2004/11/25 18:32:11 miod Exp $	*/
a55 3
#if defined(MRG_TRACE)
	VECTOR(mrg_tracetrap)	/* 9: trace */
#else /* MRG_TRACE */
d57 1
a57 2
#endif /* MRG_TRACE */
	VECTOR(alinetrap)	/* 10: line 1010 emulator ; see macromasm.s */
@


1.7
log
@Move towards a more flexible and generic interrupt system, as well as better
zs behaviour.

From NetBSD; integration work by Martin Reindl
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.6 2004/01/27 16:16:27 miod Exp $	*/
d76 2
a77 2
	VECTOR(lev1intr)	/* 25: level 1 interrupt autovector */
	VECTOR(lev2intr)	/* 26: level 2 interrupt autovector */
@


1.6
log
@Only install the fpsp exception vectors if the cpu is a 68040.
Thus, it becomes unnecessary to check for the cpu type in the exception
handlers, saving a few cycles and a few bytes.

Tested by various people on hp300, mac68k, mvme68k, 68040 and non-68040.
@
text
@d1 2
a2 2
/*	$OpenBSD: vectors.s,v 1.5 2003/06/04 22:08:15 deraadt Exp $	*/
|	$NetBSD: vectors.s,v 1.9 1997/09/03 06:16:24 scottr Exp $
d78 4
a81 4
	VECTOR(lev3intr)	/* 27: level 3 interrupt autovector */
	VECTOR(lev4intr)	/* 28: level 4 interrupt autovector */
	VECTOR(lev5intr)	/* 29: level 5 interrupt autovector */
	VECTOR(lev6intr)	/* 30: level 6 interrupt autovector */
@


1.5
log
@Delete UCB term 3.  When there are other copyright owners, we affirm
that we can see no legal situation under which they could require that
term to remain (ie. This is equivelant to us taking the old UCB file,
removing term 3 as specified by UCB, then re-applying each diff
afterwards from the various authors)
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.4 2002/04/16 23:42:21 miod Exp $	*/
d99 2
a100 9
#ifdef FPSP
	ASVECTOR(bsun)		/* 48: FPCP branch/set on unordered cond */
	ASVECTOR(inex)		/* 49: FPCP inexact result */
	ASVECTOR(dz)		/* 50: FPCP divide by zero */
	ASVECTOR(unfl)		/* 51: FPCP underflow */
	ASVECTOR(operr)		/* 52: FPCP operand error */
	ASVECTOR(ovfl)		/* 53: FPCP overflow */
	ASVECTOR(snan)		/* 54: FPCP signalling NAN */
#else
d108 2
a109 1
#endif
d131 14
@


1.4
log
@Same .text vs .data issue as for mvme68k.
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.3 2001/05/08 17:30:41 aaron Exp $	*/
d16 1
a16 5
| 3. All advertising materials mentioning features or use of this software
|    must display the following acknowledgement:
|	This product includes software developed by the University of
|	California, Berkeley and its contributors.
| 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@Substantial update from NetBSD, most notably gives us UVM support; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.2 1996/05/26 18:36:36 briggs Exp $	*/
d49 1
a49 1
	.text
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.3 2001/05/08 17:30:41 aaron Exp $	*/
d49 1
a49 1
	.data
@


1.2
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
|	$NetBSD: vectors.s,v 1.6 1995/01/21 05:21:26 briggs Exp $
d38 11
d50 10
a59 22
	.globl	_buserr,_addrerr
	.globl	_illinst,_zerodiv,_chkinst,_trapvinst,_privinst,_trace
	.globl	_badtrap
	.globl	_spurintr,_lev1intr,_lev2intr,_lev3intr
	.globl	_lev4intr,_lev5intr,_lev6intr,_lev7intr
	.globl	_trap0,_trap1,_trap2,_trap15
	.globl	_alinetrap
	.globl	_fpfline, _fpunsupp, _fpfault
	.globl	_trap12
	.globl	_mrg_tracetrap
	.globl	_jmp0panic

Lvectab:
	.long	0x60000000+_jmp0panic-2	/* 0: bra 0x400:w (unused reset SSP) */
	.long	0		/* 1: NOT USED (reset PC) */
	.long	_buserr		/* 2: bus error */
	.long	_addrerr	/* 3: address error */
	.long	_illinst	/* 4: illegal instruction */
	.long	_zerodiv	/* 5: zero divide */
	.long	_chkinst	/* 6: CHK instruction */
	.long	_trapvinst	/* 7: TRAPV instruction */
	.long	_privinst	/* 8: privilege violation */
d61 1
a61 1
	.long	_mrg_tracetrap	/* 9: trace */
d63 1
a63 1
	.long	_trace		/* 9: trace */
d65 38
a102 38
	.long	_alinetrap	/* 10: line 1010 emulator ; see macromasm.s */
	.long	_fpfline	/* 11: line 1111 emulator */
	.long	_badtrap	/* 12: unassigned, reserved */
	.long	_coperr		/* 13: coprocessor protocol violation */
	.long	_fmterr		/* 14: format error */
	.long	_badtrap	/* 15: uninitialized interrupt vector */
	.long	_badtrap	/* 16: unassigned, reserved */
	.long	_badtrap	/* 17: unassigned, reserved */
	.long	_badtrap	/* 18: unassigned, reserved */
	.long	_badtrap	/* 19: unassigned, reserved */
	.long	_badtrap	/* 20: unassigned, reserved */
	.long	_badtrap	/* 21: unassigned, reserved */
	.long	_badtrap	/* 22: unassigned, reserved */
	.long	_badtrap	/* 23: unassigned, reserved */
	.long	_spurintr	/* 24: spurious interrupt */
	.long	_lev1intr	/* 25: level 1 interrupt autovector */
	.long	_lev2intr	/* 26: level 2 interrupt autovector */
	.long	_lev3intr	/* 27: level 3 interrupt autovector */
	.long	_lev4intr	/* 28: level 4 interrupt autovector */
	.long	_lev5intr	/* 29: level 5 interrupt autovector */
	.long	_lev6intr	/* 30: level 6 interrupt autovector */
	.long	_lev7intr	/* 31: level 7 interrupt autovector */
	.long	_trap0		/* 32: syscalls */
	.long	_trap1		/* 33: sigreturn syscall or breakpoint */
	.long	_trap2		/* 34: breakpoint or sigreturn syscall */
	.long	_illinst	/* 35: TRAP instruction vector */
	.long	_illinst	/* 36: TRAP instruction vector */
	.long	_illinst	/* 37: TRAP instruction vector */
	.long	_illinst	/* 38: TRAP instruction vector */
	.long	_illinst	/* 39: TRAP instruction vector */
	.long	_illinst	/* 40: TRAP instruction vector */
	.long	_illinst	/* 41: TRAP instruction vector */
	.long	_illinst	/* 42: TRAP instruction vector */
	.long	_illinst	/* 43: TRAP instruction vector */
	.long	_trap12		/* 44: TRAP instruction vector */
	.long	_illinst	/* 45: TRAP instruction vector */
	.long	_illinst	/* 46: TRAP instruction vector */
	.long	_trap15		/* 47: TRAP instruction vector */
d104 7
a110 8
	.globl	bsun, inex, dz, unfl, operr, ovfl, snan
 	.long	bsun		/* 48: FPCP branch/set on unordered cond */
 	.long	inex		/* 49: FPCP inexact result */
 	.long	dz		/* 50: FPCP divide by zero */
 	.long	unfl		/* 51: FPCP underflow */
 	.long	operr		/* 52: FPCP operand error */
 	.long	ovfl		/* 53: FPCP overflow */
 	.long	snan		/* 54: FPCP signalling NAN */
d112 7
a118 8
	.globl	_fpfault
 	.long	_fpfault	/* 48: FPCP branch/set on unordered cond */
 	.long	_fpfault	/* 49: FPCP inexact result */
 	.long	_fpfault	/* 50: FPCP divide by zero */
 	.long	_fpfault	/* 51: FPCP underflow */
 	.long	_fpfault	/* 52: FPCP operand error */
 	.long	_fpfault	/* 53: FPCP overflow */
 	.long	_fpfault	/* 54: FPCP signalling NAN */
d120 9
a128 13
	.long	_fpunsupp	/* 55: FPCP unimplemented data type */
	.long	_badtrap	/* 56: unassigned, reserved */
	.long	_badtrap	/* 57: unassigned, reserved */
	.long	_badtrap	/* 58: unassigned, reserved */
	.long	_badtrap	/* 59: unassigned, reserved */
	.long	_badtrap	/* 60: unassigned, reserved */
	.long	_badtrap	/* 61: unassigned, reserved */
	.long	_badtrap	/* 62: unassigned, reserved */
	.long	_badtrap	/* 63: unassigned, reserved */
#define BADTRAP16	.long	_badtrap,_badtrap,_badtrap,_badtrap,\
				_badtrap,_badtrap,_badtrap,_badtrap,\
				_badtrap,_badtrap,_badtrap,_badtrap,\
				_badtrap,_badtrap,_badtrap,_badtrap
@


1.2.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d2 1
a2 1
|	$NetBSD: vectors.s,v 1.9 1997/09/03 06:16:24 scottr Exp $
d38 12
d51 10
a60 21
#define		BADTRAP16		\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap) ;	\
	VECTOR(badtrap) ; VECTOR(badtrap)

	.text
GLOBAL(vectab)
	VECTOR_UNUSED		/* 0: NOT USED (reset SSP) */
	VECTOR_UNUSED		/* 1: NOT USED (reset PC) */
	VECTOR_UNUSED		/* 2: bus error */
	VECTOR_UNUSED		/* 3: address error */
	VECTOR(illinst)		/* 4: illegal instruction */
	VECTOR(zerodiv)		/* 5: zero divide */
	VECTOR(chkinst)		/* 6: CHK instruction */
	VECTOR(trapvinst)	/* 7: TRAPV instruction */
	VECTOR(privinst)	/* 8: privilege violation */
d62 1
a62 1
	VECTOR(mrg_tracetrap)	/* 9: trace */
d64 1
a64 1
	VECTOR(trace)		/* 9: trace */
d66 38
a103 38
	VECTOR(alinetrap)	/* 10: line 1010 emulator ; see macromasm.s */
	VECTOR(fpfline)		/* 11: line 1111 emulator */
	VECTOR(badtrap)		/* 12: unassigned, reserved */
	VECTOR(coperr)		/* 13: coprocessor protocol violation */
	VECTOR(fmterr)		/* 14: format error */
	VECTOR(badtrap)		/* 15: uninitialized interrupt vector */
	VECTOR(badtrap)		/* 16: unassigned, reserved */
	VECTOR(badtrap)		/* 17: unassigned, reserved */
	VECTOR(badtrap)		/* 17: unassigned, reserved */
	VECTOR(badtrap)		/* 19: unassigned, reserved */
	VECTOR(badtrap)		/* 20: unassigned, reserved */
	VECTOR(badtrap)		/* 21: unassigned, reserved */
	VECTOR(badtrap)		/* 22: unassigned, reserved */
	VECTOR(badtrap)		/* 23: unassigned, reserved */
	VECTOR(spurintr)	/* 24: spurious interrupt */
	VECTOR(lev1intr)	/* 25: level 1 interrupt autovector */
	VECTOR(lev2intr)	/* 26: level 2 interrupt autovector */
	VECTOR(lev3intr)	/* 27: level 3 interrupt autovector */
	VECTOR(lev4intr)	/* 28: level 4 interrupt autovector */
	VECTOR(lev5intr)	/* 29: level 5 interrupt autovector */
	VECTOR(lev6intr)	/* 30: level 6 interrupt autovector */
	VECTOR(lev7intr)	/* 31: level 7 interrupt autovector */
	VECTOR(trap0)		/* 32: syscalls */
	VECTOR(trap1)		/* 33: sigreturn syscall or breakpoint */
	VECTOR(trap2)		/* 34: breakpoint or sigreturn syscall */
	VECTOR(illinst)		/* 35: TRAP instruction vector */
	VECTOR(illinst)		/* 36: TRAP instruction vector */
	VECTOR(illinst)		/* 37: TRAP instruction vector */
	VECTOR(illinst)		/* 38: TRAP instruction vector */
	VECTOR(illinst)		/* 39: TRAP instruction vector */
	VECTOR(illinst)		/* 40: TRAP instruction vector */
	VECTOR(illinst)		/* 41: TRAP instruction vector */
	VECTOR(illinst)		/* 42: TRAP instruction vector */
	VECTOR(illinst)		/* 43: TRAP instruction vector */
	VECTOR(trap12)		/* 44: TRAP instruction vector */
	VECTOR(illinst)		/* 45: TRAP instruction vector */
	VECTOR(illinst)		/* 46: TRAP instruction vector */
	VECTOR(trap15)		/* 47: TRAP instruction vector */
d105 8
a112 7
	ASVECTOR(bsun)		/* 48: FPCP branch/set on unordered cond */
	ASVECTOR(inex)		/* 49: FPCP inexact result */
	ASVECTOR(dz)		/* 50: FPCP divide by zero */
	ASVECTOR(unfl)		/* 51: FPCP underflow */
	ASVECTOR(operr)		/* 52: FPCP operand error */
	ASVECTOR(ovfl)		/* 53: FPCP overflow */
	ASVECTOR(snan)		/* 54: FPCP signalling NAN */
d114 8
a121 7
	VECTOR(fpfault)		/* 48: FPCP branch/set on unordered cond */
	VECTOR(fpfault)		/* 49: FPCP inexact result */
	VECTOR(fpfault)		/* 50: FPCP divide by zero */
	VECTOR(fpfault)		/* 51: FPCP underflow */
	VECTOR(fpfault)		/* 52: FPCP operand error */
	VECTOR(fpfault)		/* 53: FPCP overflow */
	VECTOR(fpfault)		/* 54: FPCP signalling NAN */
d123 13
a135 9
	VECTOR(fpunsupp)	/* 55: FPCP unimplemented data type */
	VECTOR(badtrap)		/* 56: unassigned, reserved */
	VECTOR(badtrap)		/* 57: unassigned, reserved */
	VECTOR(badtrap)		/* 58: unassigned, reserved */
	VECTOR(badtrap)		/* 59: unassigned, reserved */
	VECTOR(badtrap)		/* 60: unassigned, reserved */
	VECTOR(badtrap)		/* 61: unassigned, reserved */
	VECTOR(badtrap)		/* 62: unassigned, reserved */
	VECTOR(badtrap)		/* 63: unassigned, reserved */
@


1.2.16.2
log
@Sync the SMP branch with 3.3
@
text
@d49 1
a49 1
	.data
@


1.2.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vectors.s,v 1.2.16.2 2003/03/27 23:28:44 niklas Exp $	*/
d16 5
a20 1
| 3. Neither the name of the University nor the names of its contributors
@


1.2.16.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d99 9
a107 2

GLOBAL(fpvect_tab)
d115 1
a115 2
GLOBAL(fpvect_end)

a136 14

#ifdef FPSP
	/*
	 * 68040: this chunk of vectors is copied into the fpfault zone
	 */
GLOBAL(fpsp_tab)
	ASVECTOR(fpsp_bsun)	/* 48: FPCP branch/set on unordered cond */
	ASVECTOR(inex)		/* 49: FPCP inexact result */
	ASVECTOR(dz)		/* 50: FPCP divide by zero */
	ASVECTOR(fpsp_unfl)	/* 51: FPCP underflow */
	ASVECTOR(fpsp_operr)	/* 52: FPCP operand error */
	ASVECTOR(fpsp_ovfl)	/* 53: FPCP overflow */
	ASVECTOR(fpsp_snan)	/* 54: FPCP signalling NAN */
#endif /* FPSP */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
