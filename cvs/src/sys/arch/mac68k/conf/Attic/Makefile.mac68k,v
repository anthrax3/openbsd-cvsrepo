head	1.75;
access;
symbols
	OPENBSD_5_1_BASE:1.74
	OPENBSD_5_1:1.74.0.2
	OPENBSD_5_0:1.73.0.2
	OPENBSD_5_0_BASE:1.73
	OPENBSD_4_9:1.70.0.2
	OPENBSD_4_9_BASE:1.70
	OPENBSD_4_8:1.67.0.2
	OPENBSD_4_8_BASE:1.67
	OPENBSD_4_7:1.44.0.2
	OPENBSD_4_7_BASE:1.44
	OPENBSD_4_6:1.41.0.6
	OPENBSD_4_6_BASE:1.41
	OPENBSD_4_5:1.41.0.2
	OPENBSD_4_5_BASE:1.41
	OPENBSD_4_4:1.40.0.2
	OPENBSD_4_4_BASE:1.40
	OPENBSD_4_3:1.39.0.2
	OPENBSD_4_3_BASE:1.39
	OPENBSD_4_2:1.36.0.2
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.35.0.4
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.35.0.2
	OPENBSD_4_0_BASE:1.35
	OPENBSD_3_9:1.34.0.10
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.34.0.8
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.34.0.6
	OPENBSD_3_7_BASE:1.34
	OPENBSD_3_6:1.34.0.4
	OPENBSD_3_6_BASE:1.34
	SMP_SYNC_A:1.34
	SMP_SYNC_B:1.34
	OPENBSD_3_5:1.34.0.2
	OPENBSD_3_5_BASE:1.34
	OPENBSD_3_4:1.33.0.2
	OPENBSD_3_4_BASE:1.33
	UBC_SYNC_A:1.31
	OPENBSD_3_3:1.29.0.2
	OPENBSD_3_3_BASE:1.29
	OPENBSD_3_2:1.27.0.2
	OPENBSD_3_2_BASE:1.27
	OPENBSD_3_1:1.25.0.2
	OPENBSD_3_1_BASE:1.25
	UBC_SYNC_B:1.27
	UBC:1.23.0.2
	UBC_BASE:1.23
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.20.0.16
	OPENBSD_2_9_BASE:1.20
	NIKLAS_UNDEAD:1.20.0.14
	OPENBSD_2_8:1.20.0.12
	OPENBSD_2_8_BASE:1.20
	OPENBSD_2_7:1.20.0.10
	OPENBSD_2_7_BASE:1.20
	SMP:1.20.0.8
	SMP_BASE:1.20
	kame_19991208:1.20
	OPENBSD_2_6:1.20.0.6
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.20.0.4
	OPENBSD_2_5_BASE:1.20
	OPENBSD_2_4:1.20.0.2
	OPENBSD_2_4_BASE:1.20
	OPENBSD_2_3:1.19.0.2
	OPENBSD_2_3_BASE:1.19
	OPENBSD_2_2:1.16.0.2
	OPENBSD_2_2_BASE:1.16
	OPENBSD_2_1:1.14.0.2
	OPENBSD_2_1_BASE:1.14
	OPENBSD_2_0:1.11.0.2
	OPENBSD_2_0_BASE:1.11
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.75
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.74;

1.74
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.73;

1.73
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.72;

1.72
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.71;

1.71
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.70;

1.70
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.69;

1.69
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.68;

1.68
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.66;

1.66
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.65;

1.65
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.64;

1.64
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.63;

1.63
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.62;

1.62
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2010.05.24.19.58.51;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2010.05.24.17.36.52;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2010.05.23.15.09.38;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.54;

1.54
date	2010.04.27.16.54.54;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.04.27.04.31.47;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.43;

1.43
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2009.08.09.21.33.38;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.40;

1.40
date	2008.04.12.21.04.17;	author miod;	state Exp;
branches;
next	1.39;

1.39
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2007.11.25.18.25.28;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.35;

1.35
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2003.11.21.17.53.19;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.32;

1.32
date	2003.05.23.22.16.16;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2003.05.13.22.45.10;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.13.06.12.43;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2002.12.25.21.10.26;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.02.09.00.24;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2002.08.09.20.24.43;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2001.12.25.21.43.45;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.24.23.12.14;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2001.12.14.08.51.21;	author miod;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	2001.08.30.22.10.18;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.15.13.10.48;	author assar;	state Exp;
branches;
next	1.20;

1.20
date	98.08.18.15.05.52;	author ryker;	state Exp;
branches
	1.20.8.1;
next	1.19;

1.19
date	98.03.06.19.14.44;	author gene;	state Exp;
branches;
next	1.18;

1.18
date	98.03.06.10.42.15;	author gene;	state Exp;
branches;
next	1.17;

1.17
date	98.03.04.22.26.45;	author ryker;	state Exp;
branches;
next	1.16;

1.16
date	97.09.15.02.40.30;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.05.29.00.16.05;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	97.04.23.00.57.15;	author gene;	state Exp;
branches;
next	1.13;

1.13
date	97.04.18.17.29.50;	author gene;	state Exp;
branches;
next	1.12;

1.12
date	97.01.24.01.35.25;	author briggs;	state Exp;
branches;
next	1.11;

1.11
date	96.08.30.22.41.40;	author briggs;	state Exp;
branches;
next	1.10;

1.10
date	96.08.10.21.37.40;	author briggs;	state Exp;
branches;
next	1.9;

1.9
date	96.05.26.18.35.07;	author briggs;	state Exp;
branches;
next	1.8;

1.8
date	96.05.26.18.13.26;	author briggs;	state Exp;
branches;
next	1.7;

1.7
date	96.04.24.12.05.19;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.03.26.15.09.46;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.02.20.05.19.11;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	96.01.15.20.04.57;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.11.35.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.13.06.49.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.02;	author deraadt;	state Exp;
branches;
next	;

1.20.8.1
date	2001.10.31.03.01.14;	author nate;	state Exp;
branches;
next	1.20.8.2;

1.20.8.2
date	2002.03.06.01.05.35;	author niklas;	state Exp;
branches;
next	1.20.8.3;

1.20.8.3
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	1.20.8.4;

1.20.8.4
date	2003.05.16.00.29.39;	author niklas;	state Exp;
branches;
next	1.20.8.5;

1.20.8.5
date	2003.06.07.11.13.13;	author ho;	state Exp;
branches;
next	1.20.8.6;

1.20.8.6
date	2004.02.19.10.49.02;	author niklas;	state Exp;
branches;
next	;

1.23.2.1
date	2002.01.31.22.55.13;	author niklas;	state Exp;
branches;
next	1.23.2.2;

1.23.2.2
date	2002.10.29.00.28.05;	author art;	state Exp;
branches;
next	1.23.2.3;

1.23.2.3
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.75
log
@RIP mac68k.  No one loves you anymore.
@
text
@#	$OpenBSD: Makefile.mac68k,v 1.74 2011/11/08 18:41:34 matthieu Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I. -I$S -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-main -Wno-uninitialized -Wno-format \
		-Wstack-larger-than-2047

CMACHFLAGS=	-msoft-float
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc 
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
LINKFLAGS=	-n -Ttext 0 -e start

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

.include "${_archdir}/fpsp/Makefile.inc"

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o ${FPSP}
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
STRIPFLAGS=	-g
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.s assym.h
copy.o copypage.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.74
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.73 2011/07/07 22:28:18 guenther Exp $
@


1.73
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.72 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.72
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.71 2011/04/15 02:41:28 guenther Exp $
d163 5
a167 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.71
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.70 2010/12/30 18:49:31 deraadt Exp $
d124 1
a124 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.70
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.69 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d73 2
a74 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d94 5
d102 2
a103 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d132 3
a137 14
AFILES=	${_machdir}/${_mach}/locore.s
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d139 1
a139 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d156 12
@


1.69
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.68 2010/12/02 04:35:02 deraadt Exp $
d96 2
a97 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.68
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.67 2010/06/01 23:49:22 deraadt Exp $
d72 2
a73 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS} ${FPSP}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d75 2
a76 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.67
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.66 2010/05/28 14:27:08 guenther Exp $
d72 1
a72 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${FPSP}
d75 2
a76 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.66
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.65 2010/05/25 17:27:55 deraadt Exp $
a42 1
STRIPFLAGS=	-d
d82 1
@


1.65
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.64 2010/05/25 15:05:01 deraadt Exp $
d96 1
a96 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.64
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.63 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		mac68k
_arch?=		m68k
@


1.63
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.62 2010/05/24 23:19:22 deraadt Exp $
d75 1
a75 1
SYSTEM_OBJ=	locore.o ${FPSP} param.o ioconf.o ${OBJS}
d151 1
a151 1
	${NORMAL_S}
@


1.62
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.61 2010/05/24 19:58:51 deraadt Exp $
a131 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d133 1
a133 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.61
log
@use the same idiom for stripping gdb kernels.  This relies on strip -o
support for the non-binutils architectures (and that diff is coming..)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.60 2010/05/24 17:49:37 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
a118 1

d121 1
a121 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d131 2
a132 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.s \
	param.c ioconf.c ${CFILES} ${SFILES}
d135 1
a135 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.s
@


1.60
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.59 2010/05/24 17:36:52 deraadt Exp $
d86 3
a88 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} $@@; ${STRIP} $@@
@


1.59
log
@typo regarding __mach__
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.58 2010/05/24 14:59:16 deraadt Exp $
d145 1
d147 1
a147 3
	-if test -n "${SFILES}"; then \
		${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}; \
	fi
@


1.58
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.57 2010/05/23 15:09:38 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D_-${_mach}__
@


1.57
log
@mac68k can move to defining __mac68k__ instead
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.56 2010/04/28 15:31:33 deraadt Exp $
d30 1
a30 1
		-Wno-uninitialized -Wno-format -Wno-main \
d32 5
a36 1
CMACHFLAGS=	-msoft-float -fno-builtin-printf -fno-builtin-log
d40 1
d42 2
a43 2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
d53 2
d58 1
a58 8

### for the Motorola 68040 Floating Point Software Product
.include "${_archdir}/fpsp/Makefile.inc"

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a61 3

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

a62 1
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<
d120 1
a120 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d124 1
a124 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
@


1.56
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.55 2010/04/27 17:25:19 drahn Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D${_mach} -Dmc68020
a61 1
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d110 1
a110 1
	${NORMAL_C_C}
@


1.55
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.54 2010/04/27 16:54:54 deraadt Exp $
d56 1
a56 1
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
a65 3
DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

d142 1
a142 1
	sh makelinks && rm -f dontlink
@


1.54
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.53 2010/04/27 06:46:26 deraadt Exp $
d27 1
a27 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.53
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.52 2010/04/27 05:07:29 deraadt Exp $
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL \
		-Dmc68020 -Dmac68k
@


1.52
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.51 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/mac68k/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/mac68k/conf/Makefile.mac68k
# after which config should be rerun for all machines of that type.
@


1.51
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.50 2010/04/27 04:31:47 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.50
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.49 2010/04/27 03:37:37 deraadt Exp $
d159 1
a159 1
SRCS=	${_machdir}/mac68k/locore.s \
d163 1
a163 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/mac68k/locore.s
d180 1
a180 1
locore.o: ${_machdir}/mac68k/locore.s assym.h
@


1.49
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.48 2010/04/26 22:21:15 deraadt Exp $
d170 1
a170 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.48
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.47 2010/04/26 22:11:37 deraadt Exp $
a179 14


# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
assym.h machdep.o: Makefile

# depend on CPU configuration
locore.o pmap.o trap.o: Makefile

@


1.47
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.46 2010/04/26 20:50:16 deraadt Exp $
a33 1
_machdir?=	$S/arch/mac68k
d35 2
a36 1
_archdir?=	$S/arch/m68k
@


1.46
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.45 2010/04/26 18:58:30 deraadt Exp $
d114 6
a119 6
assym.h: $S/kern/genassym.sh \
	 ${_archdir}/m68k/genassym.cf ${_machdir}/mac68k/genassym.cf Makefile
	cat ${_archdir}/m68k/genassym.cf ${_machdir}/mac68k/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    > assym.h.tmp && \
	mv -f assym.h.tmp assym.h
d169 3
a171 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/mac68k/genassym.cf
@


1.45
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.44 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 2
MAC68K=	$S/arch/mac68k
M68K=	$S/arch/m68k
d65 1
a65 1
.include "${M68K}/fpsp/Makefile.inc"
d115 2
a116 2
	 ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf Makefile
	cat ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf | \
d159 1
a159 1
SRCS=	${MAC68K}/mac68k/locore.s \
d163 1
a163 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${MAC68K}/mac68k/locore.s
d170 1
a170 1
	    ${CPPFLAGS} < ${MAC68K}/mac68k/genassym.cf
d194 1
a194 1
locore.o: ${MAC68K}/mac68k/locore.s assym.h
@


1.44
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile.mac68k,v 1.43 2009/08/09 23:04:49 miod Exp $
#	$NetBSD: Makefile.mac68k,v 1.53 1997/04/15 06:11:38 scottr Exp $
a2 2
# Makefile for OpenBSD
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d45 1
a45 1
COPTS?= 	-O2
d180 3
a182 3
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 
d187 1
a187 1
# depend on CPU configuration 
@


1.43
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.42 2009/08/09 21:33:38 miod Exp $
d134 1
a134 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.42
log
@No need to clean genassym{.,o} during `make clean', genassym.sh does this
for us.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.41 2009/01/11 21:02:03 pirofti Exp $
d54 6
d141 1
a141 1
	    [Ee]rrs linterrs makelinks assym.h
d162 1
a162 1
.depend: ${SRCS} assym.h param.c
d175 4
@


1.41
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.40 2008/04/12 21:04:17 miod Exp $
d135 1
a135 2
	    [Ee]rrs linterrs makelinks assym.h.tmp assym.h genassym.o \
	    genassym
@


1.40
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.39 2007/11/30 07:52:06 miod Exp $
d166 2
a167 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.39
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.38 2007/11/25 18:25:28 deraadt Exp $
d43 1
a43 1
		-Wstack-larger-than-2047
@


1.38
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.37 2007/11/25 11:23:33 deraadt Exp $
d66 1
@


1.37
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.36 2007/07/30 16:23:33 thib Exp $
a57 8
### Find out what to use for libkern.
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=${KERNLIB}
.else
LIBKERN=${KERNLIB_PROF}
.endif

d88 1
a88 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${FPSP} ${LIBKERN}
d120 3
@


1.36
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.35 2006/07/27 05:58:11 miod Exp $
a65 8
### Find out what to use for libcompat.
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=${COMPATLIB}
.else
LIBCOMPAT=${COMPATLIB_PROF}
.endif

d96 1
a96 2
SYSTEM_OBJ=	locore.o ${FPSP} \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.35
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.34 2003/11/21 17:53:19 espie Exp $
d38 1
a38 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
@


1.34
log
@+ -fno-builtin-* on architectures confirmed to work.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.33 2003/07/22 19:39:50 otto Exp $
d42 2
a43 1
		-Wno-uninitialized -Wno-format -Wno-main
@


1.33
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.32 2003/05/23 22:16:16 tedu Exp $
d43 1
a43 1
CMACHFLAGS=	-msoft-float
@


1.32
log
@move swapgeneric to truly generic code.  tested on many archs by miod and mickey.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.31 2003/05/13 22:45:10 miod Exp $
d176 4
@


1.31
log
@Add option NO_PROPOLICE, which explicitely disables the use of the propolice
stack protection when building kernels. Intended to be used on installation
media, with tight space constraints - currently, only added where
SMALL_KERNEL was already defined.

Not thoroughly tested, but requested by deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.30 2003/05/13 06:12:43 tedu Exp $
d152 1
a152 1
	    ${CFILES} ${MAC68K}/mac68k/swapgeneric.c ioconf.c param.c | \
@


1.30
log
@remove -fno-stack-protector (enable propolice)
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.29 2002/12/25 21:10:26 miod Exp $
d44 3
@


1.29
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.28 2002/12/02 09:00:24 miod Exp $
d43 1
a43 1
CMACHFLAGS=	-msoft-float -fno-stack-protector
@


1.28
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.27 2002/08/09 20:24:43 miod Exp $
a26 4
AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
d44 1
a44 1
COPTS?= -O2
@


1.27
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.26 2002/06/22 14:05:51 millert Exp $
d47 1
a47 1
CMACHFLAGS=	-msoft-float
@


1.26
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.25 2001/12/25 21:43:45 miod Exp $
d125 1
a125 1
	 ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf
@


1.25
log
@Oops, I barfed there, too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.24 2001/12/24 23:12:14 miod Exp $
d49 1
a49 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS}
@


1.24
log
@Harmonize and complete wrt cross-compilation.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.23 2001/12/14 08:51:21 miod Exp $
d32 1
@


1.23
log
@Sync compilation flags definition accross m68k-based arches.
mvme68k still lacks some -Wfoo flags, until it is warnings clean.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.22 2001/08/30 22:10:18 miod Exp $
d27 1
d29 1
d32 1
a32 3
STRIP?=	strip -d
TOUCH?=	touch -f -c
COPTS?= -O2
d47 1
a47 1

d109 1
a109 1
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@
@


1.23.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.25 2001/12/25 21:43:45 miod Exp $
a26 1
AS?=	as
a27 1
CPP?=	cpp
d30 3
a32 2
SIZE?=	size
STRIP?=	strip
d47 1
a47 1
COPTS?= -O2
d109 1
a109 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
@


1.23.2.2
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.23.2.1 2002/01/31 22:55:13 niklas Exp $
d49 1
a49 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
d125 1
a125 1
	 ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf Makefile
@


1.23.2.3
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d27 4
d48 1
a48 4
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
COPTS?= 	-O2
@


1.22
log
@Invoke genassym.sh with both m68k/m68k/genassym.cf and
machine/machine/genassym.cf files (poor man's inclusion).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.21 2001/07/15 13:10:48 assar Exp $
d31 1
a32 1
TOUCH?=	touch -f -c
d42 2
a43 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Dmc68020 -Dmac68k
d46 3
a48 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} -msoft-float
d51 1
@


1.21
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.20 1998/08/18 15:05:52 ryker Exp $
d39 1
d70 1
a70 1
.include "$S/arch/m68k/fpsp/Makefile.inc"
d119 5
a123 3
assym.h: $S/kern/genassym.sh ${MAC68K}/mac68k/genassym.cf
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${MAC68K}/mac68k/genassym.cf > assym.h.tmp && \
@


1.20
log
@Let mac68k kernels compile outside of arch/mac68k/compile; d@@fnarg.net.au.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.19 1998/03/06 19:14:44 gene Exp $
d25 2
d187 12
@


1.20.8.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.20 1998/08/18 15:05:52 ryker Exp $
a24 2
.include <bsd.own.mk>

a36 1
M68K=	$S/arch/m68k
d67 1
a67 1
.include "${M68K}/fpsp/Makefile.inc"
d116 3
a118 5
assym.h: $S/kern/genassym.sh \
	 ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf
	cat ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    > assym.h.tmp && \
a184 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.20.8.2
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
a26 1
AS?=	as
a27 1
CPP?=	cpp
d30 3
a32 2
SIZE?=	size
STRIP?=	strip
d42 1
a42 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL \
		-Dmc68020 -Dmac68k
d45 1
a45 3
CMACHFLAGS=	-msoft-float
COPTS?= -O2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS}
a47 1
STRIPFLAGS=	-d
d105 1
a105 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
@


1.20.8.3
log
@Sync the SMP branch with 3.3
@
text
@d27 4
d47 3
a49 3
CMACHFLAGS=	-msoft-float -fno-stack-protector
COPTS?= 	-O2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
d125 1
a125 1
	 ${M68K}/m68k/genassym.cf ${MAC68K}/mac68k/genassym.cf Makefile
@


1.20.8.4
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d43 1
a43 4
CMACHFLAGS=	-msoft-float
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
@


1.20.8.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.20.8.4 2003/05/16 00:29:39 niklas Exp $
d152 1
a152 1
	    ${CFILES} ioconf.c param.c | \
@


1.20.8.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
d43 1
a43 1
CMACHFLAGS=	-msoft-float -fno-builtin-printf -fno-builtin-log
a175 4
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${MAC68K}/mac68k/genassym.cf
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
	@@rm -f assym.dep
@


1.19
log
@After talk w/ developers, revert gcc 2.8 changes again.
We're striving for progressiveness.  If you want to build a kernel now, though, you /need/ gcc 2.8.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.17 1998/03/04 22:26:45 ryker Exp $
d33 3
a35 1
S=	../../../..
@


1.18
log
@Back out gcc 2.8 warning stubs.
Obviously, they break earlier versions of which there are still a great number
floating around.
@
text
@d38 2
a39 1
CWARNFLAGS=	-Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized
@


1.17
log
@Update CWARNFLAGS.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.16 1997/09/15 02:40:30 deraadt Exp $
d38 1
a38 2
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main
@


1.16
log
@kill Locore.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.15 1997/05/29 00:16:05 niklas Exp $
d38 2
a39 1
CWARNFLAGS=	-Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized
@


1.15
log
@Improve cross-compilation support somewhat
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.14 1997/04/23 00:57:15 gene Exp $
d140 1
a140 2
	    ${MAC68K}/mac68k/Locore.c ${CFILES} ${MAC68K}/mac68k/swapgeneric.c \
	    ioconf.c param.c | \
@


1.14
log
@Three things:
(1) We run OpenBSD
(2) make clean deltes genassym and genassym.o, so people with these sitting
in their compile directories will get them cleaned out.  Release won't ship
this way.
(3) Maxusers Makefile depends depend on assym.h not genassym.o now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.13 1997/04/18 17:29:50 gene Exp $
d43 4
d74 2
a80 2

HOSTED_C_C=	${NORMAL_C_C:S/^-pg$//:S/^-p$//:S/^-nostdinc$//}
@


1.13
log
@Use genassym.cf and a shell script to build assym.h.  This helps
cross-compiling a lot.  Queue taken from Scott Reynolds.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.12 1997/01/24 01:35:25 briggs Exp $
d4 1
a4 1
# Makefile for NetBSD
d131 2
a132 1
	    [Ee]rrs linterrs makelinks assym.h.tmp assym.h
d171 1
a171 1
genassym.o machdep.o: Makefile
@


1.12
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.mac68k,v 1.11 1996/08/30 22:41:40 briggs Exp $
#	$NetBSD: Makefile.mac68k,v 1.47 1997/01/13 07:06:51 scottr Exp $
d109 4
a112 8
assym.h: genassym
	./genassym >assym.h

genassym: genassym.o
	${CC} -o $@@ genassym.o

genassym.o: ${MAC68K}/mac68k/genassym.c
	${HOSTED_C_C}
d131 1
a131 1
	    [Ee]rrs linterrs makelinks genassym genassym.o assym.h
d157 4
a160 1
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} ${PARAM} ${MAC68K}/mac68k/genassym.c
@


1.11
log
@We're not ready for this, yet.
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.mac68k,v 1.10 1996/08/10 21:37:40 briggs Exp $
#	$NetBSD: Makefile.mac68k,v 1.40 1996/08/10 06:09:07 mycroft Exp $
d29 1
d39 1
a39 1
CFLAGS=		${DEBUG} ${CWARNFLAGS} -O -msoft-float
@


1.10
log
@Sync with NetBSD.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mac68k,v 1.9 1996/05/26 18:35:07 briggs Exp $
d32 1
a32 1
S!=	cd ../../../..; pwd
@


1.9
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
#	$OpenBSD$
#	$NetBSD: Makefile.mac68k,v 1.38 1996/05/11 16:12:20 mycroft Exp $
a24 1
AS?=	as
a25 1
CPP?=	cpp
d27 1
d32 2
a33 2
S=	../../../..
MAC68K=	../..
d35 1
a35 1
INCLUDES=	-I. -I$S/arch -I$S
d37 2
a38 2
GCCWFLAGS=	-Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized
CFLAGS=		${DEBUG} -O ${GCCWFLAGS} -msoft-float
d75 2
d103 1
a103 1
LINKFLAGS+=	-x
d115 1
a115 1
	${NORMAL_C_C}
d157 4
a160 4
	mkdep ${AFLAGS} ${CPPFLAGS} ${MAC68K}/mac68k/locore.s
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
	mkdep -a ${CFLAGS} ${CPPFLAGS} ${PARAM} ${MAC68K}/mac68k/genassym.c
@


1.8
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.7
log
@Add network config dependencies.
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.mac68k,v 1.34 1996/02/09 02:21:26 mycroft Exp $
d24 6
a29 7
AS=	as
AWK=	awk
CC=	cc
CPP=	cpp
LD=	ld
STRIP=	strip -d
TOUCH=	touch -f -c
d37 3
a39 2
CFLAGS=		${DEBUG} -O -Werror -msoft-float
AFLAGS=		-x assembler-with-cpp -traditional-cpp -DLOCORE
d153 1
a153 1
depend: .depend
d165 1
a165 3
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile 
if_tun.o if_loop.o if_ethersubr.o: Makefile
in_proto.o: Makefile
@


1.6
log
@From NetBSD: vnode_if.[ch] made machine independent.
very usefull (for <sys/vnode.h> inclusion).
from the other side this is really machine independent ...
tested w/ i386, but should not cause errors w/ other arch's.
pls, test it (don't forget to reconfig kernel ;)
@
text
@d165 3
a167 1
uipc_proto.o vfs_conf.o: Makefile 
@


1.5
log
@netbsd -> bsd in the config files

Bring in a number of changes from NetBSD in Makefile.mac68k
(standardized amongst most ports).
@
text
@d87 1
a87 1
		vnode_if.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
a114 3
vnode_if.c vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src

d131 1
a131 1
	rm -f eddep *bsd bsd.gdb tags vnode_if.[ch] *.[io] [a-z]*.s \
d152 1
a152 1
	vnode_if.c param.c ioconf.c ${CFILES} ${SFILES}
d154 1
a154 1
.depend: ${SRCS} assym.h vnode_if.h param.c
d156 1
a156 1
	mkdep -a ${CFLAGS} ${CPPFLAGS} vnode_if.c param.c ioconf.c ${CFILES}
@


1.4
log
@Remove vnode_if.[ch] during a "make clean", per PR#536 from
Dan Carosone <danielce@@ee.mu.oz.au>.
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.mac68k,v 1.27 1996/01/14 21:06:51 thorpej Exp $
d3 1
a3 2
# Makefile for NetBSD for the mac
#	Derived from makefile for hp300 from NetBSD
d8 1
a8 1
#	/sys/conf/``machineid''
d10 1
a10 1
#	 config machineid
d12 1
a12 1
#	/sys/conf/Makefile.``machinetype''
d21 9
a29 7
# DEBUG is set to -g by "makeoptions DEBUG=-g"
# PROF is set to -pg by config if profiling is requested (config -p).
AS=	/usr/bin/as ${DEBUG}
CC=	/usr/bin/cc ${DEBUG}
LOCAL_CC=${CC}
CPP=	/usr/bin/cpp
LD=	/usr/bin/ld
a30 1
GPROF.EX=/usr/src/lib/libc/csu.mac68k/gmon.ex
d36 5
a40 3
INCLUDES= -I. -I$S/arch -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL -DREFBIT -Dmac68k
CFLAGS=	-O -Werror ${COPTS}
d66 2
a67 2
NORMAL_C=	${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
d69 2
a70 2
DRIVER_C=	${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
d72 2
a73 9
PROFILE_C=	${CC} -S -c ${COPTS} $<; \
		ex - $*.s < ${GPROF.EX}; \
		${AS} -o $@@ $*.s; \
		rm -f $*.s

# This really bites for now, but we need to run assembly through sed
# until the real problem (cpp, I think) is fixed.
NORMAL_S=	${CPP} ${COPTS} $< | ${AS} -o $@@
NORMAL_S_C=	${CPP} ${COPTS} ${PARAM} $< | ${AS} -o $@@
d79 2
d86 2
a87 2
SYSTEM_OBJ=	locore.o vnode_if.o ${OBJS} param.o ioconf.o conf.o \
		${FPSP} ${LIBKERN} ${LIBCOMPAT}
d89 9
a97 6
SYSTEM_LD_HEAD=	@@echo loading $@@; rm -f $@@
SYSTEM_LD=	@@strip=-x; [ X${DEBUG} = X-g ] && strip=-X || true; \
		${LD} $$strip -n -T 0 -e start -o $@@ \
		${SYSTEM_OBJ} vers.o
SYSTEM_LD_TAIL=	@@chmod 755 $@@; size $@@; \
		[ X${DEBUG} = X-g ] && { \
d99 4
a102 1
		echo strip -d $@@; strip -d $@@; } || true
d106 11
a116 3
newvers:
	sh $S/conf/newvers.sh "${KERN_IDENT}" ${IDENT}
	${CC} ${CFLAGS} -c vers.c
d118 9
a126 3
clean::
	rm -f eddep netbsd tags *.o locore.i [a-z]*.s \
		vnode_if.[ch] Errs errs linterrs makelinks
d128 3
a130 23
lint: /tmp param.c
	@@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} ${PARAM} -UKGDB \
	    ${MAC68K}/mac68k/Locore.c ${CFILES} \
	    ioconf.c param.c| \
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'

symbols.sort: ${MAC68K}/mac68k/symbols.raw
	grep -v '^#' ${MAC68K}/mac68k/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

locore.o: assym.s ${MAC68K}/mac68k/vectors.s ${MAC68K}/mac68k/macglobals.s
locore.o: ${MAC68K}/mac68k/locore.s 
locore.o: ${MAC68K}/include/trap.h ${MAC68K}/include/psl.h
locore.o: ${MAC68K}/include/pte.h ${MAC68K}/include/cpu.h
	${CPP} -DLOCORE ${COPTS} ${MAC68K}/mac68k/locore.s | ${AS} -o locore.o

# the following is necessary because autoconf.o depends on #if GENERIC
autoconf.o: Makefile

# the following are necessary because the files depend on the types of
# hp cpu's included in the system configuration
clock.o machdep.o autoconf.o conf.o: Makefile
a131 2
# depend on network configuration
af.o uipc_proto.o locore.o: Makefile
d133 3
a135 2
# depend on maxusers
assym.s: Makefile
d137 5
a141 2
assym.s: genassym
	./genassym >assym.s
d143 2
a144 7
genassym: ${MAC68K}/mac68k/genassym.c
	${LOCAL_CC} ${INCLUDES} ${IDENT} -D_KERNEL ${PARAM} -o genassym \
	    ${MAC68K}/mac68k/genassym.c

depend: assym.s param.c vnode_if.h
	mkdep ${COPTS} ${CFILES} ioconf.c param.c
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM} ${MAC68K}/mac68k/genassym.c
d151 1
a151 1
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
d154 9
a162 2
tags:
	@@echo "see $S/kern/Makefile for tags"
d164 5
a168 2
ioconf.o: ioconf.c
	${CC} -c ${CFLAGS} ioconf.c
d170 2
a171 2
conf.o: ${MAC68K}/mac68k/conf.c
	${NORMAL_C}
d173 2
a174 3
param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .
a175 2
param.o: param.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} -DHZ=60 param.c
d177 2
a178 2
vnode_if.c vnode_if.h:  $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
@


1.3
log
@update from netbsd (without losing local changes)
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.mac68k,v 1.26 1995/11/01 04:53:34 briggs Exp $
d109 1
a109 1
		Errs errs linterrs makelinks
@


1.2
log
@do not use -fno-builtin for kernels; the reasons why are manifold
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.mac68k,v 1.25 1995/10/10 03:47:59 briggs Exp $
@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
CFLAGS=	-O -Werror -fno-builtin ${COPTS}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

