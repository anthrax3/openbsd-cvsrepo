head	1.51;
access;
symbols
	OPENBSD_5_1_BASE:1.50
	OPENBSD_5_1:1.50.0.2
	OPENBSD_5_0:1.49.0.6
	OPENBSD_5_0_BASE:1.49
	OPENBSD_4_9:1.49.0.4
	OPENBSD_4_9_BASE:1.49
	OPENBSD_4_8:1.49.0.2
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.48.0.2
	OPENBSD_4_7_BASE:1.48
	OPENBSD_4_6:1.48.0.4
	OPENBSD_4_6_BASE:1.48
	OPENBSD_4_5:1.47.0.4
	OPENBSD_4_5_BASE:1.47
	OPENBSD_4_4:1.47.0.2
	OPENBSD_4_4_BASE:1.47
	OPENBSD_4_3:1.46.0.2
	OPENBSD_4_3_BASE:1.46
	OPENBSD_4_2:1.45.0.2
	OPENBSD_4_2_BASE:1.45
	OPENBSD_4_1:1.42.0.2
	OPENBSD_4_1_BASE:1.42
	OPENBSD_4_0:1.40.0.2
	OPENBSD_4_0_BASE:1.40
	OPENBSD_3_9:1.37.0.2
	OPENBSD_3_9_BASE:1.37
	OPENBSD_3_8:1.34.0.2
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.30.0.4
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.30.0.2
	OPENBSD_3_6_BASE:1.30
	SMP_SYNC_A:1.29
	SMP_SYNC_B:1.29
	OPENBSD_3_5:1.28.0.4
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	UBC_SYNC_A:1.27
	OPENBSD_3_3:1.27.0.4
	OPENBSD_3_3_BASE:1.27
	OPENBSD_3_2:1.27.0.2
	OPENBSD_3_2_BASE:1.27
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	UBC_SYNC_B:1.27
	UBC:1.22.0.2
	UBC_BASE:1.22
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9:1.19.0.16
	OPENBSD_2_9_BASE:1.19
	NIKLAS_UNDEAD:1.19.0.14
	OPENBSD_2_8:1.19.0.12
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.19.0.10
	OPENBSD_2_7_BASE:1.19
	SMP:1.19.0.8
	SMP_BASE:1.19
	kame_19991208:1.19
	OPENBSD_2_6:1.19.0.6
	OPENBSD_2_6_BASE:1.19
	OPENBSD_2_5:1.19.0.4
	OPENBSD_2_5_BASE:1.19
	OPENBSD_2_4:1.19.0.2
	OPENBSD_2_4_BASE:1.19
	OPENBSD_2_3:1.18.0.2
	OPENBSD_2_3_BASE:1.18
	OPENBSD_2_2:1.16.0.4
	OPENBSD_2_2_BASE:1.16
	OPENBSD_2_1:1.16.0.2
	OPENBSD_2_1_BASE:1.16
	OPENBSD_2_0:1.9.0.2
	OPENBSD_2_0_BASE:1.9
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.51
date	2012.06.20.18.23.51;	author matthew;	state dead;
branches;
next	1.50;

1.50
date	2011.11.01.21.20.55;	author miod;	state Exp;
branches;
next	1.49;

1.49
date	2010.07.24.12.18.58;	author miod;	state Exp;
branches;
next	1.48;

1.48
date	2009.03.26.17.24.33;	author oga;	state Exp;
branches;
next	1.47;

1.47
date	2008.07.18.23.43.31;	author art;	state Exp;
branches;
next	1.46;

1.46
date	2007.11.02.19.18.54;	author martin;	state Exp;
branches;
next	1.45;

1.45
date	2007.07.29.21.24.05;	author miod;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.30.17.10.44;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2007.03.15.10.22.29;	author art;	state Exp;
branches;
next	1.42;

1.42
date	2006.11.29.12.26.13;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2006.09.22.22.15.17;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2006.06.30.15.13.18;	author miod;	state Exp;
branches;
next	1.39;

1.39
date	2006.06.24.13.24.20;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2006.06.11.20.48.13;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.24.06.50.11;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2006.01.13.19.36.44;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2006.01.01.13.16.01;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2005.08.01.11.54.24;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2005.07.31.15.39.56;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2005.07.23.23.30.55;	author martin;	state Exp;
branches;
next	1.31;

1.31
date	2005.07.18.16.58.48;	author martin;	state Exp;
branches;
next	1.30;

1.30
date	2004.06.13.21.49.17;	author niklas;	state Exp;
branches;
next	1.29;

1.29
date	2004.05.20.09.20.42;	author kettenis;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.02.23.27.49;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.07.21.33.43;	author nordin;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.27.01.52.10;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.16.20.54.16;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2002.03.14.03.15.55;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.06.18.41.09;	author art;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2001.08.20.19.49.03;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2001.05.08.17.30.40;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	98.05.03.07.10.44;	author gene;	state Exp;
branches
	1.19.8.1;
next	1.18;

1.18
date	98.03.01.00.37.36;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	97.11.30.06.12.24;	author gene;	state Exp;
branches;
next	1.16;

1.16
date	97.03.30.21.53.23;	author briggs;	state Exp;
branches;
next	1.15;

1.15
date	97.03.12.13.29.39;	author briggs;	state Exp;
branches;
next	1.14;

1.14
date	97.03.08.16.17.00;	author briggs;	state Exp;
branches;
next	1.13;

1.13
date	97.01.24.01.35.40;	author briggs;	state Exp;
branches;
next	1.12;

1.12
date	96.10.28.14.34.06;	author briggs;	state Exp;
branches;
next	1.11;

1.11
date	96.10.20.23.40.54;	author briggs;	state Exp;
branches;
next	1.10;

1.10
date	96.10.14.01.06.58;	author briggs;	state Exp;
branches;
next	1.9;

1.9
date	96.08.10.21.37.46;	author briggs;	state Exp;
branches;
next	1.8;

1.8
date	96.06.23.15.35.59;	author briggs;	state Exp;
branches;
next	1.7;

1.7
date	96.06.08.16.21.14;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	96.05.26.18.35.46;	author briggs;	state Exp;
branches;
next	1.5;

1.5
date	96.05.26.18.14.02;	author briggs;	state Exp;
branches;
next	1.4;

1.4
date	96.01.09.16.01.03;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	95.12.28.04.49.40;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	95.12.21.14.40.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.05;	author deraadt;	state Exp;
branches;
next	;

1.19.8.1
date	2001.07.04.10.18.30;	author niklas;	state Exp;
branches;
next	1.19.8.2;

1.19.8.2
date	2001.10.31.03.01.14;	author nate;	state Exp;
branches;
next	1.19.8.3;

1.19.8.3
date	2001.11.13.21.00.53;	author niklas;	state Exp;
branches;
next	1.19.8.4;

1.19.8.4
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.19.8.5;

1.19.8.5
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	1.19.8.6;

1.19.8.6
date	2003.06.07.11.13.14;	author ho;	state Exp;
branches;
next	1.19.8.7;

1.19.8.7
date	2004.06.05.23.10.51;	author niklas;	state Exp;
branches;
next	1.19.8.8;

1.19.8.8
date	2004.06.06.05.23.39;	author tedu;	state Exp;
branches;
next	;

1.22.2.1
date	2002.06.11.03.36.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.51
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: cpu.h,v 1.50 2011/11/01 21:20:55 miod Exp $	*/
/*	$NetBSD: cpu.h,v 1.45 1997/02/10 22:13:40 scottr Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 *	Copyright (c) 1992, 1993 BCDL Labs.  All rights reserved.
 *	Allen Briggs, Chris Caputo, Michael Finch, Brad Grantham, Lawrence Kesteloot

 *	Redistribution of this source code or any part thereof is permitted,
 *	 provided that the following conditions are met:
 *	1) Utilized source contains the copyright message above, this list
 *	 of conditions, and the following disclaimer.
 *	2) Binary objects containing compiled source reproduce the
 *	 copyright notice above on startup.
 *
 *	CAVEAT: This source code is provided "as-is" by BCDL Labs, and any
 *	 warranties of ANY kind are disclaimed.  We don't even claim that it
 *	 won't crash your hard disk.  Basically, we want a little credit if
 *	 it works, but we don't want to get mail-bombed if it doesn't. 
 */

/*
 * from: Utah $Hdr: cpu.h 1.16 91/03/25$
 *
 *	@@(#)cpu.h	7.7 (Berkeley) 6/27/91
 */

#ifndef _CPU_MACHINE_
#define _CPU_MACHINE_

/*
 * Exported definitions unique to mac68k/68k cpu support.
 */

/*
 * Get common m68k definitions.
 */
#include <m68k/cpu.h>

#ifdef _KERNEL

/*
 * Get interrupt glue.
 */
#include <machine/intr.h>

/*
 * Arguments to hardclock and gatherstats encapsulate the previous
 * machine state in an opaque clockframe.  On the m68k, we use
 * what the hardware pushes on an interrupt (frame format 0).
 */
struct clockframe {
	u_short	sr;		/* sr at time of interrupt */
	u_long	pc;		/* pc at time of interrupt */
	u_short	vo;		/* vector offset (4-word frame) */
};

#define	CLKF_USERMODE(framep)	(((framep)->sr & PSL_S) == 0)
#define	CLKF_PC(framep)		((framep)->pc)
#define	CLKF_INTR(framep)	(0) /* XXX should use PSL_M (see hp300) */

/*
 * Preempt the current process if in interrupt from user mode,
 * or after the current trap/syscall if in system mode.
 */
extern int want_resched;	/* resched() was called */
#define	need_resched(ci)	{ want_resched = 1; aston(); }
#define clear_resched(ci) 	want_resched = 0

/*
 * Give a profiling tick to the current process from the softclock
 * interrupt.  Request an ast to send us through trap(),
 * marking the proc as needing a profiling tick.
 */
#define	need_proftick(p)	aston()

/*
 * Notify the current process (p) that it has a signal pending,
 * process as soon as possible.
 */
#define	signotify(p)	aston()

extern int astpending;		/* need to trap before returning to user mode */
#define aston() (astpending = 1)

#endif	/* _KERNEL */

#define CPU_CONSDEV	1
#define CPU_MAXID	2

#define CTL_MACHDEP_NAMES { \
	{ 0, 0 }, \
	{ "console_device", CTLTYPE_STRUCT }, \
}

#ifdef _KERNEL

/* values for machineid --
 * 	These are equivalent to the MacOS Gestalt values. */
#define MACH_MACII		6
#define MACH_MACIIX		7
#define MACH_MACIICX		8
#define MACH_MACSE30		9
#define MACH_MACIICI		11
#define MACH_MACIIFX		13
#define MACH_MACIISI		18
#define MACH_MACQ900		20
#define MACH_MACPB170		21
#define MACH_MACQ700		22
#define MACH_MACCLASSICII	23
#define MACH_MACPB100		24
#define MACH_MACPB140		25
#define MACH_MACQ950		26
#define MACH_MACLCIII		27
#define MACH_MACPB210		29
#define MACH_MACC650		30
#define MACH_MACPB230		32
#define MACH_MACPB180		33
#define MACH_MACPB160		34
#define MACH_MACQ800		35
#define MACH_MACQ650		36
#define MACH_MACLCII		37
#define MACH_MACPB250		38
#define MACH_MACIIVI		44
#define MACH_MACP600		45
#define MACH_MACIIVX		48
#define MACH_MACCCLASSIC	49
#define MACH_MACPB165C		50
#define MACH_MACC610		52
#define MACH_MACQ610		53
#define MACH_MACPB145		54
#define MACH_MACLC520		56
#define MACH_MACC660AV		60
#define MACH_MACP460		62
#define MACH_MACPB180C		71
#define	MACH_MACPB500		72
#define MACH_MACPB270		77
#define MACH_MACQ840AV		78
#define MACH_MACP550		80
#define MACH_MACCCLASSICII	83
#define MACH_MACPB165		84
#define MACH_MACPB190CS		85
#define MACH_MACTV		88
#define MACH_MACLC475		89
#define MACH_MACLC475_33	90
#define MACH_MACLC575		92
#define MACH_MACQ605		94
#define MACH_MACQ605_33		95
#define MACH_MACQ630		98
#define	MACH_MACP580		99
#define MACH_MACPB280		102
#define MACH_MACPB280C		103
#define MACH_MACPB150		115
#define MACH_MACPB190		122

/*
 * Machine classes.  These define subsets of the above machines.
 */
#define MACH_CLASSH	0	/* Hopeless cases... */
#define MACH_CLASSII	1	/* MacII class */
#define MACH_CLASSIIci	2	/* Have RBV, but no Egret */
#define MACH_CLASSIIsi	3	/* Similar to IIci -- Have Egret. */
#define MACH_CLASSIIvx	4	/* Similar to IIsi -- different via2 emul? */
#define MACH_CLASSLC	5	/* Low-Cost/Performa/Wal-Mart Macs. */
#define MACH_CLASSPB	6	/* Powerbooks.  Power management. */
#define MACH_CLASSDUO	7	/* Powerbooks Duos.  More integration/Docks. */
#define MACH_CLASSIIfx	8	/* The IIfx is in a class by itself. */
#define MACH_CLASSQ	9	/* non-A/V Centris/Quadras. */
#define MACH_CLASSAV	10	/* A/V Centris/Quadras. */
#define MACH_CLASSQ2	11	/* More Centris/Quadras, different sccA. */

struct mac68k_machine_S {
	int			cpu_model_index;
	/*
	 * Misc. info from booter.
	 */
	int			machineid;
	int			mach_memsize;
	int			booter_version;
	/*
	 * Debugging flags.
	 */
	int			do_graybars;
	int			serial_boot_echo;
	int			serial_console;

	int			modem_flags;
	int			modem_cts_clk;
	int			modem_dcd_clk;
	int			modem_d_speed;
	int			print_flags;
	int			print_cts_clk;
	int			print_dcd_clk;
	int			print_d_speed;
	/*
	 * Misc. hardware info.
	 */
	int			scsi80;		/* Has NCR 5380 */
	int			scsi96;		/* Has NCR 53C96 */
	int			scsi96_2;	/* Has 2nd 53C96 */
	int			sonic;		/* Has SONIC e-net */

	int			via1_ipl;
	int			aux_interrupts;
};

	/* What kind of model is this */
struct cpu_model_info {
	int		machineid;	/* MacOS Gestalt value. */
	const char	*model;		/* Model description */
	int		class;		/* Rough class of machine. */
};
extern const struct cpu_model_info *current_mac_model;

extern unsigned long		IOBase;		/* Base address of I/O */
extern unsigned long		NuBusBase;	/* Base address of NuBus */

extern  struct mac68k_machine_S	mac68k_machine;
extern	unsigned long		load_addr;

#define IIOMAPSIZE		(0x040000 / PAGE_SIZE)

/* XXX -- Need to do something about superspace.
 * Technically, NuBus superspace starts at 0x60000000, but no
 * known Macintosh has used any slot lower numbered than 9, and
 * the super space is defined as 0xS000 0000 through 0xSFFF FFFF
 * where S is the slot number--ranging from 0x9 - 0xE.
 */
#define	NBSBASE		0x90000000
#define	NBSTOP		0xF0000000
#define NBBASE		0xF9000000	/* NUBUS space */
#define NBTOP		0xFF000000	/* NUBUS space */
#define NBMAPSIZE	atop(NBTOP-NBBASE)	/* ~ 96 megs */
#define NBMEMSIZE	0x01000000	/* 16 megs per card */
#define NBROMOFFSET	0x00FF0000	/* Last 64K == ROM */

/* locore.s */
void	PCIA(void);

/* machdep.c */
void	mac68k_set_bell_callback(int (*)(void *, int, int, int), void *);
int	mac68k_ring_bell(int, int, int);
u_int	get_mapping(void);

#endif

#endif	/* _CPU_MACHINE_ */
@


1.50
log
@Drop support for the HP MMU. It was only found on two hp300 systems (models
320 and 350), which have been unsupported since a bunch of release already,
because this annoying MMU does not have TT registers (or if it does, it is
not documented) and thus went in the way of PMAP_DIRECT for hp300.
In other words: remove a bunch of code which was either #ifdef'ed out or
had no chance to run in real life.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.49 2010/07/24 12:18:58 miod Exp $	*/
@


1.49
log
@One the -> On the
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.48 2009/03/26 17:24:33 oga Exp $	*/
a71 1
#define	M68K_MMU_MOTOROLA
@


1.48
log
@Remove cpu_wait(). It's original use was to be called from the reaper so
MD code would free resources that couldn't be freed until we were no
longer running in that processor. However, it's is unused on all
architectures since mikeb@@'s tss changes on x86 earlier in the year.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.47 2008/07/18 23:43:31 art Exp $	*/
d83 1
a83 1
 * machine state in an opaque clockframe.  One the hp300, we use
@


1.47
log
@Add a macro that clears the want_resched flag that need_resched sets.
Right now when mi_switch picks up the same proc, we didn't clear the
flag which would mean that every time we service an AST we would attempt
a context switch. For some architectures, amd64 being probably the
most extreme, that meant attempting to context switch for every
trap and interrupt.

Now we clear_resched explicitly after every context switch, even if it
didn't do anything. Which also allows us to remove some more code
in cpu_switchto (not done yet).

miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.46 2007/11/02 19:18:54 martin Exp $	*/
a79 6

/*
 * definitions of cpu-dependent requirements
 * referenced in generic code
 */
#define	cpu_wait(p)			/* nothing */
@


1.46
log
@replace ctob/btoc with ptoa/atop (plus the usual round_page() where needed)
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.45 2007/07/29 21:24:05 miod Exp $	*/
d108 1
@


1.45
log
@It turns out that VIA2 always interrupts at level 2, and IPL_BIO is always 2
too, so we can make these constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.44 2007/05/30 17:10:44 miod Exp $	*/
d272 1
a272 1
#define NBMAPSIZE	btoc(NBTOP-NBBASE)	/* ~ 96 megs */
@


1.44
log
@More cpuinfo vs _KERNEL fallback.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.43 2007/03/15 10:22:29 art Exp $	*/
a242 1
	int			via2_ipl;
@


1.43
log
@Since p_flag is often manipulated in interrupts and without biglock
it's a good idea to use atomic.h operations on it. This mechanic
change updates all bit operations on p_flag to atomic_{set,clear}bits_int.

Only exception is that P_OWEUPC is set by MI code before calling
need_proftick and it's automatically cleared by ADDUPC. There's
no reason for MD handling of that flag since everyone handles it the
same way.

kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.42 2006/11/29 12:26:13 miod Exp $	*/
d74 2
d125 2
d135 2
a210 1
#ifdef _KERNEL
a259 1
#endif /* _KERNEL */
a275 2

#ifdef _KERNEL
@


1.42
log
@Remove cpu_swapin() and cpu_swapout(), they are no longer necessary (except
for cpu_swapin() on hppa* which is kept).
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.41 2006/09/22 22:15:17 miod Exp $	*/
d112 1
a112 1
#define	need_proftick(p)	( (p)->p_flag |= P_OWEUPC, aston() )
@


1.41
log
@Get rid of (unused) MACH_CLASSP580 and flatten MACH_CLASSxxx values.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.40 2006/06/30 15:13:18 miod Exp $	*/
a82 1
#define	cpu_swapin(p)			/* nothing */
a83 1
#define	cpu_swapout(p)			/* nothing */
@


1.40
log
@Shrink internal iomap to 256KB, it's enough for all the mappings we'll need
in it.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.39 2006/06/24 13:24:20 miod Exp $	*/
d194 12
a205 18
#define MACH_CLASSH	0x0000	/* Hopeless cases... */
#define MACH_CLASSII	0x0001	/* MacII class */
#define MACH_CLASSIIci	0x0004	/* Have RBV, but no Egret */
#define MACH_CLASSIIsi	0x0005	/* Similar to IIci -- Have Egret. */
#define MACH_CLASSIIvx	0x0006	/* Similar to IIsi -- different via2 emul? */
#define MACH_CLASSLC	0x0007	/* Low-Cost/Performa/Wal-Mart Macs. */
#define MACH_CLASSPB	0x0008	/* Powerbooks.  Power management. */
#define MACH_CLASSDUO	0x0009	/* Powerbooks Duos.  More integration/Docks. */
#define MACH_CLASSIIfx	0x0080	/* The IIfx is in a class by itself. */
#define MACH_CLASSQ	0x0100	/* non-A/V Centris/Quadras. */
#define MACH_CLASSAV	0x0101	/* A/V Centris/Quadras. */
#define MACH_CLASSQ2	0x0102	/* More Centris/Quadras, different sccA. */
#define MACH_CLASSP580	0x0103	/* Similar to Quadras, but not quite.. */

#define MACH_68020	0
#define MACH_68030	1
#define MACH_68040	2
#define MACH_PENTIUM	3	/* 66 and 99 MHz versions *only* */
@


1.39
log
@Use pmap_enter_cache() instead of physacc() in bus_mem_add_mapping(), and let
physacc() die. As a bonus, kvtop() dies too.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.38 2006/06/11 20:48:13 miod Exp $	*/
d265 1
a265 1
#define IIOMAPSIZE	btoc(0x00100000)	/* 1MB should be enough */
@


1.38
log
@Move common prototypes to <m68k/{cpu,param}.h> instead of incomplete
declarations in <machine/{cpu,param}.h> and elsewhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.37 2006/01/24 06:50:11 miod Exp $	*/
a289 4

/* vm_machdep.c */
void	physaccess(caddr_t, caddr_t, register int, register int);
void	physunaccess(caddr_t, register int);
@


1.37
log
@Remove unused fields from struct mac68k_machine.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.36 2006/01/13 19:36:44 miod Exp $	*/
d107 1
a107 1
#define	need_resched(ci)	{ want_resched++; aston(); }
d123 1
a123 1
#define aston() (astpending++)
d256 1
a256 1
extern struct cpu_model_info *current_mac_model;
d283 2
a284 3
struct frame;
struct fpframe;
struct pcb;
a289 27

/* locore.s */
void	m68881_restore(struct fpframe *);
void	m68881_save(struct fpframe *);
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
void	ICIA(void);
void	ICPA(void);
void	PCIA(void);
void	TBIA(void);
void	TBIAS(void);
void	TBIAU(void);
void	TBIS(vaddr_t);
#if defined(M68040)
void	DCFA(void);
void	DCFP(paddr_t);
void	DCFL(paddr_t);
void	DCPL(paddr_t);
void	DCPP(paddr_t);
void	ICPL(paddr_t);
void	ICPP(paddr_t);
#endif
int	suline(caddr_t, caddr_t);
void	savectx(struct pcb *);
void	proc_trampoline(void);
void	loadustp(int);
@


1.36
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.35 2006/01/01 13:16:01 miod Exp $	*/
a219 1
	int			mach_processor;
a228 2
	int			zs_chip;	/* what type of chip we've got */
	int			sccClkConst;	/* Compatibility information */
@


1.35
log
@Enable A/UX style interrupt routing on non-AV Centrises and Quadras, gives us
smarter spl levels and the clock drift is reduced; adapted from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.34 2005/08/01 11:54:24 miod Exp $	*/
d255 3
a257 6
	int	machineid;	/* MacOS Gestalt value. */
	char	*model_major;	/* Make this distinction to save a few */
	char	*model_minor;	/*      bytes--might be useful, too. */
	int	class;		/* Rough class of machine. */
	  /* forwarded romvec_s is defined in mac68k/macrom.h */
	struct romvec_s *rom_vectors; /* Pointer to our known rom vectors */
a266 5

/* physical memory sections */
#define	ROMBASE		(0x40800000)
#define	ROMLEN		(0x00200000)		/* 2MB will work for all 68k */
#define	ROMMAPSIZE	btoc(ROMLEN)		/* 32k of page tables.  */
@


1.34
log
@Factorize cachectl() accross m68k platforms, and make the CC_ constants
public.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.33 2005/07/31 15:39:56 miod Exp $	*/
d247 4
@


1.33
log
@No need to #include <machine/pcb.h>; tested martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.32 2005/07/23 23:30:55 martin Exp $	*/
a324 3

/* sys_machdep.c */
int	cachectl(struct proc *, int, vaddr_t, int);
@


1.32
log
@vm_offset_t -> vaddr_t
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.31 2005/07/18 16:58:48 martin Exp $	*/
a66 2

#include <machine/pcb.h>
@


1.31
log
@PB190 Gestalt IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.30 2004/06/13 21:49:17 niklas Exp $	*/
d313 1
a313 1
void	TBIS(vm_offset_t);
@


1.30
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d179 1
d191 1
@


1.29
log
@Properly flush instruction cache for ptrace(PT_WRTIE_{DI}, ...) on powerpc
and m68k.
ok drahn@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.28 2003/06/02 23:27:49 millert Exp $	*/
d109 1
a109 1
#define	need_resched()	{ want_resched++; aston(); }
@


1.28
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.27 2002/06/07 21:33:43 nordin Exp $	*/
d325 3
@


1.27
log
@Remove obsolete CLKF_BASEPRI(). ok niklas@@, miod@@ and art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.26 2002/04/27 01:52:10 miod Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.26
log
@Lots of cleanup to catch up with other m68k-based ports and modern code,
including:
- use netisr_dispatch
- extract an allocsys() function from cpu_startup()
- updated cachectl()
- a few fixes in trap()
and more...
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.25 2002/04/16 20:54:16 miod Exp $	*/
a104 1
#define	CLKF_BASEPRI(framep)	(((framep)->sr & PSL_IPL) == 0)
@


1.25
log
@Missing prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.24 2002/03/14 03:15:55 millert Exp $	*/
d307 6
d317 9
a325 6
void	DCFP(vm_offset_t);
void	ICPP(vm_offset_t);
void	DCIU(void);
void	DCIS(void);
void	ICIA(void);
void	DCFL(vm_offset_t);
@


1.24
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.23 2002/03/14 01:26:35 millert Exp $	*/
d309 1
@


1.23
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.22 2001/11/06 18:41:09 art Exp $	*/
d300 1
a300 1
void	mac68k_set_bell_callback __P((int (*)(void *, int, int, int), void *));
@


1.22
log
@Let fork1, uvm_fork, and cpu_fork take a function/argument pair as argument,
instead of doing fork1, cpu_set_kpc. This lets us retire cpu_set_kpc and
avoid a multiprocessor race.

This commit breaks vax because it doesn't look like any other arch, someone
working on vax might want to look at this and try to adapt the code to be
more like the rest of the world.

Idea and uvm parts from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.21 2001/08/20 19:49:03 miod Exp $	*/
d301 2
a302 2
int	mac68k_ring_bell __P((int, int, int));
u_int	get_mapping __P((void));
d305 15
a319 15
void	m68881_restore __P((struct fpframe *));
void	m68881_save __P((struct fpframe *));
void	TBIA __P((void));
void	TBIAS __P((void));
void	TBIS __P((vm_offset_t));
void	DCFP __P((vm_offset_t));
void	ICPP __P((vm_offset_t));
void	DCIU __P((void));
void	DCIS __P((void));
void	ICIA __P((void));
void	DCFL __P((vm_offset_t));
int	suline __P((caddr_t, caddr_t));
void	savectx __P((struct pcb *));
void	proc_trampoline __P((void));
void	loadustp __P((int));
d322 2
a323 2
void	physaccess __P((caddr_t, caddr_t, register int, register int));
void	physunaccess __P((caddr_t, register int));
@


1.22.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.22 2001/11/06 18:41:09 art Exp $	*/
d105 1
d300 3
a302 3
void	mac68k_set_bell_callback(int (*)(void *, int, int, int), void *);
int	mac68k_ring_bell(int, int, int);
u_int	get_mapping(void);
d305 15
a319 25
void	m68881_restore(struct fpframe *);
void	m68881_save(struct fpframe *);
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
void	ICIA(void);
void	ICPA(void);
void	PCIA(void);
void	TBIA(void);
void	TBIAS(void);
void	TBIAU(void);
void	TBIS(vm_offset_t);
#if defined(M68040)
void	DCFA(void);
void	DCFP(paddr_t);
void	DCFL(paddr_t);
void	DCPL(paddr_t);
void	DCPP(paddr_t);
void	ICPL(paddr_t);
void	ICPP(paddr_t);
#endif
int	suline(caddr_t, caddr_t);
void	savectx(struct pcb *);
void	proc_trampoline(void);
void	loadustp(int);
d322 2
a323 2
void	physaccess(caddr_t, caddr_t, register int, register int);
void	physunaccess(caddr_t, register int);
@


1.21
log
@Bring get[sd]fc() prototypes to <m68k/cpu.h>, this will be needed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.20 2001/05/08 17:30:40 aaron Exp $	*/
a319 3

/* trap.c */
void    child_return __P((struct proc *, struct frame));
@


1.20
log
@Substantial update from NetBSD, most notably gives us UVM support; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.19 1998/05/03 07:10:44 gene Exp $	*/
a306 2
u_int   getsfc __P((void));
u_int   getdfc __P((void));
@


1.19
log
@* Deprecate macinfo.h pulling all relevant defines into cpu.h.
* Move interrupt glue and associated stuff out to intr.h
* Do some MIification.
This brings us a lot closer to looking like the other ports.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.18 1998/03/01 00:37:36 niklas Exp $	*/
d321 1
@


1.19.8.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.19 1998/05/03 07:10:44 gene Exp $	*/
a320 1
void	loadustp __P((int));
@


1.19.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.19.8.1 2001/07/04 10:18:30 niklas Exp $	*/
d307 2
@


1.19.8.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d320 3
@


1.19.8.4
log
@Merge in -current from about a week ago
@
text
@d300 3
a302 3
void	mac68k_set_bell_callback(int (*)(void *, int, int, int), void *);
int	mac68k_ring_bell(int, int, int);
u_int	get_mapping(void);
d305 15
a319 15
void	m68881_restore(struct fpframe *);
void	m68881_save(struct fpframe *);
void	TBIA(void);
void	TBIAS(void);
void	TBIS(vm_offset_t);
void	DCFP(vm_offset_t);
void	ICPP(vm_offset_t);
void	DCIU(void);
void	DCIS(void);
void	ICIA(void);
void	DCFL(vm_offset_t);
int	suline(caddr_t, caddr_t);
void	savectx(struct pcb *);
void	proc_trampoline(void);
void	loadustp(int);
d322 2
a323 2
void	physaccess(caddr_t, caddr_t, register int, register int);
void	physunaccess(caddr_t, register int);
@


1.19.8.5
log
@Sync the SMP branch with 3.3
@
text
@d105 1
a306 6
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
void	ICIA(void);
void	ICPA(void);
void	PCIA(void);
a308 1
void	TBIAU(void);
d310 6
a315 9
#if defined(M68040)
void	DCFA(void);
void	DCFP(paddr_t);
void	DCFL(paddr_t);
void	DCPL(paddr_t);
void	DCPP(paddr_t);
void	ICPL(paddr_t);
void	ICPP(paddr_t);
#endif
@


1.19.8.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.19.8.5 2003/03/27 23:28:43 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.19.8.7
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a324 3

/* sys_machdep.c */
int	cachectl(struct proc *, int, vaddr_t, int);
@


1.19.8.8
log
@need_resched macro needs to take ci arg to be compat with MP function
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.19.8.7 2004/06/05 23:10:51 niklas Exp $	*/
d109 1
a109 1
#define	need_resched(ci)	{ want_resched++; aston(); }
@


1.18
log
@Merge of MACHINE_NEW_CONTIG (aka MNN) code from Chuck Cranor,
<chuck@@openbsd.org>. This code is as of yet disabled on all platforms,
actually not yet supported on more than mvme68k, although other
platforms are expected soon, as code is already available.
This code makes handling of multiple physical memory regions
consistent over all platforms, as well as keeping the performance of
maintaining a single continuous memory chunk.  It is also a
requirement for the upcoming UVM replacement VM system.

What I did in this merge: just declared the pmap_map function in a
MD include file per port that needs it.  It's not an exported pmap
interface, says Chuck.  It ended up in differnt include files on
differnet ports, as I tried to follow the current policy on a per-arch
basis.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.17 1997/11/30 06:12:24 gene Exp $	*/
d44 2
a45 3
 *	Allen Briggs, Chris Caputo, Michael Finch, Brad Grantham,
 *	Lawrence Kesteloot
 *
d65 6
a70 2
#ifndef _MAC68K_CPU_H_
#define _MAC68K_CPU_H_
d81 5
a91 1
void cpu_set_kpc __P((struct proc *, void (*)(struct proc *)));
d94 3
a96 4
 * Arguments to hardclock, softclock and gatherstats
 * encapsulate the previous machine state in an opaque
 * clockframe; for hp300, use just what the hardware
 * leaves on the stack.
a97 1

d99 3
a101 3
	u_short	sr;
	u_long	pc;
	u_short	vo;
d113 1
d129 1
a131 26
int	astpending;	/* need to trap before returning to user mode */
int	want_resched;	/* resched() was called */

/*
 * simulated software interrupt register
 */
extern volatile u_int8_t ssir;

#define	SIR_NET		0x01
#define	SIR_CLOCK	0x02
#define	SIR_SERIAL	0x04

/* Mac-specific SSIR(s) */
#define	SIR_DTMGR	0x80

#define	siroff(mask)	\
	__asm __volatile ( "andb %0,_ssir" : : "ir" (~(mask) & 0xff));
#define	setsoftnet()	\
	__asm __volatile ( "orb %0,_ssir" : : "i" (SIR_NET))
#define	setsoftclock()	\
	__asm __volatile ( "orb %0,_ssir" : : "i" (SIR_CLOCK))
#define	setsoftserial()	\
	__asm __volatile ( "orb %0,_ssir" : : "i" (SIR_SERIAL))
#define	setsoftdtmgr()	\
	__asm __volatile ( "orb %0,_ssir" : : "i" (SIR_DTMGR))

d140 132
d274 1
a274 1
#define	ROMLEN		(0x00200000)		/* 2MB should be enough! */
d277 1
a277 1
#define IIOMAPSIZE	btoc(0x00100000)
d291 7
a298 1
__BEGIN_DECLS
d307 2
a308 2
u_int	getsfc __P((void));
u_int	getdfc __P((void));
d315 1
a321 3
/* pmap.c */
vm_offset_t pmap_map __P((vm_offset_t, vm_offset_t, vm_offset_t, int));

d323 1
a323 1
void	child_return __P((struct proc *, struct frame));
d327 1
d329 1
a329 1
__END_DECLS
d331 1
a331 1
#endif	/* _MAC68K_CPU_H_ */
@


1.17
log
@Canonify the _*_H_ namespace appropriately.
Also, clean up comments and wrap with _KERNEL correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.16 1997/03/30 21:53:23 briggs Exp $	*/
d201 3
@


1.16
log
@An implementation of pieces of the Deferred Task Manager--required by
some video cards.  Provided by Paul Goyette <paul@@pgoyette.bdt.com>.
This introduces another simulated software interrupt.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.15 1997/03/12 13:29:39 briggs Exp $	*/
d44 3
a46 2
 *	Allen Briggs, Chris Caputo, Michael Finch, Brad Grantham, Lawrence Kesteloot

d66 2
a67 10
/*
   ALICE
	BG -- Sat May 23 23:58:23 EDT 1992
	Exported defines and stuff unique to mac68k.
   A lot of this stuff is really specific to the m68k, not just the macs,
   but there isn't time to do anything about that right now...
 */

#ifndef _CPU_MACHINE_
#define _CPU_MACHINE_
d210 1
a210 1
#endif	/* _CPU_MACHINE_ */
@


1.15
log
@Move prototype for physaccess.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.14 1997/03/08 16:17:00 briggs Exp $	*/
d144 3
d148 1
a148 1
	__asm __volatile ( "andb %0,_ssir" : : "ir" (~(mask)));
d155 2
@


1.14
log
@Sync with NetBSD of about 4 March.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.13 1997/01/24 01:35:40 briggs Exp $	*/
d206 3
@


1.13
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.12 1996/10/28 14:34:06 briggs Exp $	*/
/*	$NetBSD: cpu.h,v 1.44 1997/01/20 05:08:00 scottr Exp $	*/
d183 3
a185 1
u_int get_mapping __P((void));
@


1.12
log
@Mac model info out of cpu.h and into new macinfo.h.
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.11 1996/10/20 23:40:54 briggs Exp $	*/
/*	$NetBSD: cpu.h,v 1.43 1996/10/15 14:42:49 scottr Exp $	*/
d138 1
a138 1
extern unsigned char ssir;
d140 12
a151 8
#define SIR_NET		0x1
#define SIR_CLOCK	0x2
#define SIR_SERIAL	0x4

#define siroff(x)	ssir &= ~(x)
#define setsoftnet()	ssir |= SIR_NET
#define setsoftclock()	ssir |= SIR_CLOCK
#define setsoftserial()	ssir |= SIR_SERIAL
@


1.11
log
@Out of NetBSD (scottr):
Define MACH_CLASSQ2, used by Performa 575.
Remove susword() because of prototype conflict with <sys/systm.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.10 1996/10/14 01:06:58 briggs Exp $	*/
a155 125

/* values for machineid --
 * 	These are equivalent to the MacOS Gestalt values. */
#define MACH_MACII		6
#define MACH_MACIIX		7
#define MACH_MACIICX		8
#define MACH_MACSE30		9
#define MACH_MACIICI		11
#define MACH_MACIIFX		13
#define MACH_MACIISI		18
#define MACH_MACQ900		20
#define MACH_MACPB170		21
#define MACH_MACQ700		22
#define MACH_MACCLASSICII	23
#define MACH_MACPB100		24
#define MACH_MACPB140		25
#define MACH_MACQ950		26
#define MACH_MACLCIII		27
#define MACH_MACPB210		29
#define MACH_MACC650		30
#define MACH_MACPB230		32
#define MACH_MACPB180		33
#define MACH_MACPB160		34
#define MACH_MACQ800		35
#define MACH_MACQ650		36
#define MACH_MACLCII		37
#define MACH_MACPB250		38
#define MACH_MACIIVI		44
#define MACH_MACP600		45
#define MACH_MACIIVX		48
#define MACH_MACCCLASSIC	49
#define MACH_MACPB165C		50
#define MACH_MACC610		52
#define MACH_MACQ610		53
#define MACH_MACPB145		54
#define MACH_MACLC520		56
#define MACH_MACC660AV		60
#define MACH_MACP460		62
#define MACH_MACPB180C		71
#define	MACH_MACPB500		72
#define MACH_MACPB270		77
#define MACH_MACQ840AV		78
#define MACH_MACP550		80
#define MACH_MACCCLASSICII	83
#define MACH_MACPB165		84
#define MACH_MACTV		88
#define MACH_MACLC475		89
#define MACH_MACLC575		92
#define MACH_MACQ605		94
#define MACH_MACQ630		98
#define MACH_MACPB280		102
#define MACH_MACPB280C		103
#define MACH_MACPB150		115

/*
 * Machine classes.  These define subsets of the above machines.
 */
#define MACH_CLASSH	0x0000	/* Hopeless cases... */
#define MACH_CLASSII	0x0001	/* MacII class */
#define MACH_CLASSIIci	0x0004	/* Have RBV, but no Egret */
#define MACH_CLASSIIsi	0x0005	/* Similar to IIci -- Have Egret. */
#define MACH_CLASSIIvx	0x0006	/* Similar to IIsi -- different via2 emul? */
#define MACH_CLASSLC	0x0007	/* Low-Cost/Performa/Wal-Mart Macs. */
#define MACH_CLASSPB	0x0008	/* Powerbooks.  Power management. */
#define MACH_CLASSDUO	0x0009	/* Powerbooks Duos.  More integration/Docks. */
#define MACH_CLASSIIfx	0x0080	/* The IIfx is in a class by itself. */
#define MACH_CLASSQ	0x0100	/* non-A/V Centris/Quadras. */
#define MACH_CLASSAV	0x0101	/* A/V Centris/Quadras. */
#define MACH_CLASSQ2	0x0102	/* More Centris/Quadras, different sccA. */

#define MACH_68020	0
#define MACH_68030	1
#define MACH_68040	2
#define MACH_PENTIUM	3	/* 66 and 99 MHz versions *only* */

#ifdef _KERNEL
struct mac68k_machine_S {
	int			cpu_model_index;
	/*
	 * Misc. info from booter.
	 */
	int			machineid;
	int			mach_processor;
	int			mach_memsize;
	int			booter_version;
	/*
	 * Debugging flags.
	 */
	int			do_graybars;
	int			serial_boot_echo;
	int			serial_console;
	int			modem_flags;
	int			modem_cts_clk;
	int			modem_dcd_clk;
	int			print_flags;
	int			print_cts_clk;
	int			print_dcd_clk;
	/*
	 * Misc. hardware info.
	 */
	int			scsi80;		/* Has NCR 5380 */
	int			scsi96;		/* Has NCR 53C96 */
	int			scsi96_2;	/* Has 2nd 53C96 */
	int			sonic;		/* Has SONIC e-net */

	int			sccClkConst;	/* "Constant" for SCC bps */
};

	/* What kind of model is this */
struct cpu_model_info {
	int	machineid;	/* MacOS Gestalt value. */
	char	*model_major;	/* Make this distinction to save a few */
	char	*model_minor;	/*      bytes--might be useful, too. */
	int	class;		/* Rough class of machine. */
	  /* forwarded romvec_s is defined in mac68k/macrom.h */
	struct romvec_s *rom_vectors; /* Pointer to our known rom vectors */
};
extern struct cpu_model_info *current_mac_model;

extern unsigned long		IOBase;		/* Base address of I/O */
extern unsigned long		NuBusBase;	/* Base address of NuBus */

extern  struct mac68k_machine_S	mac68k_machine;
extern	unsigned long		load_addr;
#endif /* _KERNEL */
@


1.10
log
@Merge in from NetBSD.  Use <m68k/cpu.h> and
Add second Quadra class and machineid (gestalt value) for Color Classic II
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.9 1996/08/10 21:37:46 briggs Exp $	*/
/*	$NetBSD: cpu.h,v 1.42 1996/10/12 07:35:29 scottr Exp $	*/
d224 1
a319 1
int	susword __P((caddr_t, u_int));
@


1.9
log
@Sync with NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.8 1996/06/23 15:35:59 briggs Exp $	*/
/*	$NetBSD: cpu.h,v 1.40 1996/07/12 17:09:26 scottr Exp $	*/
d79 6
d199 1
a229 6
/* Defines for mmutype */
#define MMU_68040	-2
#define MMU_68030	-1
/* #define MMU_HP	0    Just a reminder as to where this came from. */
#define MMU_68851	1

a277 1
extern	int			mmutype  ;
a299 61

/*
 * 68851 and 68030 MMU
 */
#define	PMMU_LVLMASK	0x0007
#define	PMMU_INV	0x0400
#define	PMMU_WP		0x0800
#define	PMMU_ALV	0x1000
#define	PMMU_SO		0x2000
#define	PMMU_LV		0x4000
#define	PMMU_BE		0x8000
#define	PMMU_FAULT	(PMMU_WP|PMMU_INV)

/*
 * 68040 MMU
 */
#define MMU4_RES	0x001
#define MMU4_TTR	0x002
#define MMU4_WP		0x004
#define MMU4_MOD	0x010
#define MMU4_CMMASK	0x060
#define MMU4_SUP	0x080
#define MMU4_U0		0x100
#define MMU4_U1		0x200
#define MMU4_GLB	0x400
#define MMU4_BE		0x800

/* 680X0 function codes */
#define	FC_USERD	1	/* user data space */
#define	FC_USERP	2	/* user program space */
#define	FC_SUPERD	5	/* supervisor data space */
#define	FC_SUPERP	6	/* supervisor program space */
#define	FC_CPU		7	/* CPU space */

/* fields in the 68020 cache control register */
#define	IC_ENABLE	0x0001	/* enable instruction cache */
#define	IC_FREEZE	0x0002	/* freeze instruction cache */
#define	IC_CE		0x0004	/* clear instruction cache entry */
#define	IC_CLR		0x0008	/* clear entire instruction cache */

/* additional fields in the 68030 cache control register */
#define	IC_BE		0x0010	/* instruction burst enable */
#define	DC_ENABLE	0x0100	/* data cache enable */
#define	DC_FREEZE	0x0200	/* data cache freeze */
#define	DC_CE		0x0400	/* clear data cache entry */
#define	DC_CLR		0x0800	/* clear entire data cache */
#define	DC_BE		0x1000	/* data burst enable */
#define	DC_WA		0x2000	/* write allocate */

#define	CACHE_ON	(DC_WA|DC_BE|DC_CLR|DC_ENABLE|IC_BE|IC_CLR|IC_ENABLE)
#define	CACHE_OFF	(DC_CLR|IC_CLR)
#define	CACHE_CLR	(CACHE_ON)
#define	IC_CLEAR	(DC_WA|DC_BE|DC_ENABLE|IC_BE|IC_CLR|IC_ENABLE)
#define	DC_CLEAR	(DC_WA|DC_BE|DC_CLR|DC_ENABLE|IC_BE|IC_ENABLE)

/* 68040 cache control register */
#define IC4_ENABLE	0x00008000	/* enable instruction cache */
#define DC4_ENABLE	0x80000000	/* enable data cache */

#define CACHE4_ON	(IC4_ENABLE|DC4_ENABLE)
#define CACHE4_OFF	0x00000000
@


1.8
log
@NetBSD: Add constant for PB500.
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.7 1996/06/08 16:21:14 briggs Exp $	*/
/*	$NetBSD: cpu.h,v 1.38 1996/06/11 02:52:54 scottr Exp $	*/
@


1.7
log
@Sync up with latest NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: cpu.h,v 1.6 1996/05/26 18:35:46 briggs Exp $	*/
/*	$NetBSD: cpu.h,v 1.37 1996/06/07 00:15:33 briggs Exp $	*/
d189 1
@


1.6
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: cpu.h,v 1.36 1996/05/25 14:48:38 briggs Exp $	*/
d244 6
@


1.5
log
@Sync with NetBSD-current.
@
text
@d1 1
@


1.4
log
@Add some more machine defines.
@
text
@d1 1
a1 1
/*	$NetBSD: cpu.h,v 1.26 1995/12/21 05:02:01 mycroft Exp $	*/
d72 4
a75 2
#ifndef _MACHINE_CPU_H_
#define _MACHINE_CPU_H_	1
d84 1
d211 1
d213 2
a214 1
#define MACH_CLASSQ	0x0100	/* Centris/Quadras. */
d275 2
a276 5
#define	ROMLEN		(0x00100000)		/* 1MB should be enough! */
#define	ROMMAPSIZE	btoc(ROMLEN)		/* 1k of page tables.  */

/* This should not be used.  Use IOBase, instead. */
#define INTIOBASE	(0x50F00000)
a277 1
#define INTIOTOP	(IOBase+0x00100000)
d354 28
a381 1
#endif	/* !_MACHINE_CPU_H_ */
@


1.3
log
@Bring a few limits back into reason.  Old values excessive.
@
text
@d193 4
@


1.2
log
@from netbsd; cpu_setstack() is depricated
@
text
@d266 2
a267 2
#define	ROMLEN		(0x01000000)		/* 16MB should be plenty! */
#define	ROMMAPSIZE	btoc(ROMLEN)		/* 16k of page tables.  */
d270 1
a270 1
#define INTIOBASE	(0x50000000)
d272 2
a273 2
#define INTIOTOP	(IOBase+0x01000000)
#define IIOMAPSIZE	btoc(0x01000000)
a286 1
#define NBROMOFFSET	0x00FF0000	/* Last 64K == ROM */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cpu.h,v 1.25 1995/09/14 02:48:09 briggs Exp $	*/
d81 1
a81 2
#define cpu_setstack(p, ap)		(p)->p_md.md_regs[SP] = ap
#define	cpu_swapout(p)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

