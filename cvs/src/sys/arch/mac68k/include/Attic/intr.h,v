head	1.23;
access;
symbols
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.4
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.21.0.4
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	NIKLAS_UNDEAD:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.4
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.23
date	2012.06.20.18.23.52;	author matthew;	state dead;
branches;
next	1.22;

1.22
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.23.03.50.22;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.18.19.32.41;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.15.20.40.25;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.30.08.19.43;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2007.07.29.21.24.05;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.15.13.46.22;	author martin;	state Exp;
branches;
next	1.15;

1.15
date	2006.06.11.20.46.50;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.13.19.39.52;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.13.19.36.44;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.01.09.55.49;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.02.22.00.31;	author martin;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.26.21.21.27;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.25.18.32.10;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.05.01.51.27;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.29.07.35.19;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.23.00.47.43;	author miod;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.06.24.17.05.37;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.06.15.25.03;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	99.06.11.04.48.11;	author downsj;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	98.05.03.07.10.45;	author gene;	state Exp;
branches;
next	;

1.2.4.1
date	2001.04.18.16.10.08;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.07.04.10.18.32;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2001.12.05.00.39.11;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.36.19;	author art;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.23
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: intr.h,v 1.22 2011/03/23 16:54:36 pirofti Exp $	*/
/*	$NetBSD: intr.h,v 1.9 1998/08/12 06:58:42 scottr Exp $	*/

/*
 * Copyright (C) 1997 Scott Reynolds
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_INTR_H_
#define _MACHINE_INTR_H_

#include <machine/psl.h>

#ifdef _KERNEL

/*
 * splnet must block hardware network interrupts
 * splvm must be > spltty
 */
extern u_short	mac68k_ttyipl;
extern u_short	mac68k_netipl;
extern u_short	mac68k_vmipl;
extern u_short	mac68k_audioipl;
extern u_short	mac68k_clockipl;
extern u_short	mac68k_statclockipl;

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0
#define	IPL_SOFTINT	1
#define	IPL_BIO		2
#define	IPL_AUDIO	PSLTOIPL(mac68k_audioipl)
#define	IPL_NET		PSLTOIPL(mac68k_netipl)
#define	IPL_TTY		PSLTOIPL(mac68k_ttyipl)
#define	IPL_VM		PSLTOIPL(mac68k_vmipl)
#define	IPL_CLOCK	PSLTOIPL(mac68k_clockipl)
#define	IPL_STATCLOCK	PSLTOIPL(mac68k_statclockipl)
#define	IPL_SCHED	7
#define	IPL_HIGH	7

#define	MD_IPLTOPSL(ipl)	IPLTOPSL(ipl)

/*
 * These should be used for:
 * 1) ensuring mutual exclusion (why use processor level?)
 * 2) allowing faster devices to take priority
 *
 * Note that on the Mac, most things are masked at spl1, almost
 * everything at spl2, and everything but the panic switch and
 * power at spl4.
 */
#define	splsoft()		_splraise(PSL_S | PSL_IPL1)
#define	splsoftclock()		splsoft()
#define	splsoftnet()		splsoft()
#define	spltty()		_splraise(mac68k_ttyipl)
#define	splbio()		_splraise(PSL_S | PSL_IPL2)
#define	splnet()		_splraise(mac68k_netipl)
#define	splvm()			_splraise(mac68k_vmipl)
#define	splaudio()		_splraise(mac68k_audioipl)
#define	splclock()		_splraise(mac68k_clockipl)
#define	splstatclock()		_splraise(mac68k_statclockipl)
#define	splserial()		_splraise(PSL_S | PSL_IPL4)
#define	splhigh()		_spl(PSL_S | PSL_IPL7)
#define	splsched()		splhigh()

/* These spl calls are _not_ to be used by machine-independent code. */
#define	splzs()			splserial()

/* watch out for side effects */
#define splx(s)         	((s) & PSL_IPL ? _spl(s) : spl0())

#include <m68k/intr.h>		/* soft interrupt support */

/* intr.c */
void	intr_init(void);
void	intr_establish(int (*)(void *), void *, int, const char *);
void	intr_disestablish(int);
void	intr_dispatch(int);

/* locore.s */
int	spl0(void);

/*
 * Interrupt handler.
 * There is no support for shared interrupts at the moment.
 */
#include <sys/evcount.h>
struct intrhand {
	int		(*ih_fn)(void *);
	void		*ih_arg;
	int		ih_ipl;
	struct evcount	ih_count;
};
#endif /* _KERNEL */

#endif /* _MACHINE_INTR_H_ */
@


1.22
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.21 2010/04/23 03:50:22 miod Exp $	*/
@


1.21
log
@Make sure IPL_SCHED is always defined by MD headers, instead of having a MI
fallback definition in <sys/sched.h>, so that there is no hidden include
ordering requirement between <machine/intr.h> and <sys/sched.h>.
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.20 2009/09/18 19:32:41 miod Exp $	*/
d31 2
a32 2
#ifndef _MAC68K_INTR_H_
#define _MAC68K_INTR_H_
d124 1
a124 1
#endif /* _MAC68K_INTR_H_ */
@


1.20
log
@Fix conversion of symbolic IPL level to hardware PSL value in the mutex code.
This is a noop on all arches but hp300, where this fixes (at least) IPL_BIO
mutexes.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.19 2009/03/15 20:40:25 miod Exp $	*/
d66 1
@


1.19
log
@Generic softinterrupt code for m68k platforms, now copied from m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.18 2007/11/30 08:19:43 miod Exp $	*/
d68 2
a93 1
#define	spladb()		splhigh()
@


1.18
log
@Define IPL_VM on platforms which lack it.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.17 2007/07/29 21:24:05 miod Exp $	*/
d58 1
a58 2
#define	IPL_SOFTNET	1
#define	IPL_SOFTCLOCK	1
d98 1
a98 19
/*
 * simulated software interrupt register
 */
extern volatile u_int8_t ssir;

#define	SIR_NET		0x01
#define	SIR_CLOCK	0x02
#define	SIR_SERIAL	0x04
#define SIR_ADB		0x08

#define	siron(mask)	\
	__asm __volatile ( "orb %1,%0" : "=m" (ssir) : "i" (mask))
#define	siroff(mask)	\
	__asm __volatile ( "andb %1,%0" : "=m" (ssir) : "ir" (~(mask)))

#define	setsoftnet()	siron(SIR_NET)
#define	setsoftclock()	siron(SIR_CLOCK)
#define	setsoftserial()	siron(SIR_SERIAL)
#define	setsoftadb()	siron(SIR_ADB)
@


1.17
log
@It turns out that VIA2 always interrupts at level 2, and IPL_BIO is always 2
too, so we can make these constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.16 2007/05/15 13:46:22 martin Exp $	*/
d61 1
d64 1
@


1.16
log
@switch m68k to __HAVE_CPUINFO

help miod@@, art@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.15 2006/06/11 20:46:50 miod Exp $	*/
a42 1
extern u_short	mac68k_bioipl;
d60 1
a60 1
#define	IPL_BIO		PSLTOIPL(mac68k_bioipl)
d80 1
a80 1
#define	splbio()		_splraise(mac68k_bioipl)
@


1.15
log
@Factorize spl handling functions and software interrupt routines between
m68k-based platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.14 2006/03/13 19:39:52 brad Exp $	*/
d89 1
@


1.14
log
@remove splimp.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.13 2006/01/13 19:36:44 miod Exp $	*/
d34 2
a36 33
/*
 * spl functions; all but spl0 are done in-line
 */

#define _spl(s)								\
({									\
        register int _spl_r;						\
									\
        __asm __volatile ("clrl %0; movew sr,%0; movew %1,sr" :		\
                "=&d" (_spl_r) : "di" (s));				\
        _spl_r;								\
})

#define _splraise(s)							\
({									\
	int _spl_r;							\
									\
	__asm __volatile ("						\
		clrl	d0					;	\
		movw	sr,d0					;	\
		movl	d0,%0					;	\
		andw	#0x700,d0				;	\
		movw	%1,d1					;	\
		andw	#0x700,d1				;	\
		cmpw	d0,d1					;	\
		jle	1f					;	\
		movw	%1,sr					;	\
	    1:"							:	\
		    "=&d" (_spl_r)				:	\
		    "di" (s)					:	\
		    "d0", "d1");					\
	_spl_r;								\
})
d108 1
a108 1
	__asm __volatile ( "orb %0,_ssir" : : "i" (mask))
d110 1
a110 1
	__asm __volatile ( "andb %0,_ssir" : : "ir" (~(mask)));
@


1.13
log
@Remove the Mac Rom Glue code completely. With the ADB ``direct'' code being
used by default, and since all PRAM accesses are either directly fiddling
with VIA registers or through ADB commands, the MRG code has no reason to
stay. This means the kernel is now not running unknown PROM code anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.12 2005/05/01 09:55:49 miod Exp $	*/
d71 1
a71 1
 * splimp must be > spltty
d76 1
a76 1
extern u_short	mac68k_impipl;
d114 1
a114 2
#define	splimp()		_splraise(mac68k_impipl)
#define	splvm()			_splraise(mac68k_impipl)
@


1.12
log
@Bring raise-only semantics to splsoft* on m68k and m88k, as done elsewhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.11 2004/12/02 22:00:31 martin Exp $	*/
d137 1
a137 2
#define SIR_DTMGR	0x08
#define SIR_ADB		0x10
a146 1
#define	setsoftdtmgr()	siron(SIR_DTMGR)
@


1.11
log
@move IPL setup to intr.c

ok miod@@

>From: NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.10 2004/11/26 21:21:27 miod Exp $	*/
a68 14
/* spl0 requires checking for software interrupts */
#define spl1()  _spl(PSL_S|PSL_IPL1)
#define spl2()  _spl(PSL_S|PSL_IPL2)
#define spl3()  _spl(PSL_S|PSL_IPL3)
#define spl4()  _spl(PSL_S|PSL_IPL4)
#define spl5()  _spl(PSL_S|PSL_IPL5)
#define spl6()  _spl(PSL_S|PSL_IPL6)
#define spl7()  _spl(PSL_S|PSL_IPL7)

/* These spl calls are _not_ to be used by machine-independent code. */
#define	spladb()	splhigh()
#define	splzs()		splserial()
#define	splsoft()	spl1()

d108 1
d119 6
a124 2
#define	splserial()		spl4()
#define	splhigh()		spl7()
d127 1
a127 1
#define splx(s)         ((s) & PSL_IPL ? _spl(s) : spl0())
@


1.10
log
@More interrupt system cleaning and homogenization:
- switch all interrupt functions to an int (*)(void *) prototype.
- do not register dummy functions for all unhandled interrupts, instead
  let the dispatchers cope with NULL.
- add evcount interrupt counters.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.9 2004/11/25 18:32:10 miod Exp $	*/
d87 7
a93 6
extern unsigned short	mac68k_ttyipl;
extern unsigned short	mac68k_bioipl;
extern unsigned short	mac68k_netipl;
extern unsigned short	mac68k_impipl;
extern unsigned short	mac68k_clockipl;
extern unsigned short	mac68k_statclockipl;
a121 1
#define	spllowersoftclock()	splsoft()
d129 1
d161 1
@


1.9
log
@Move towards a more flexible and generic interrupt system, as well as better
zs behaviour.

From NetBSD; integration work by Martin Reindl
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.8 2003/01/05 01:51:27 miod Exp $	*/
d160 3
a162 3
void	intr_establish (int (*)(void *), void *, int);
void	intr_disestablish (int);
void	intr_dispatch (int);
d166 12
@


1.8
log
@splassert on m68k-based arches. Not totally accurate on hp300 at the moment,
still.
@
text
@d1 2
a2 2
/*	$OpenBSD: intr.h,v 1.7 2002/04/29 07:35:19 miod Exp $	*/
/*	$NetBSD: intr.h,v 1.8 1997/11/07 07:33:18 scottr Exp $	*/
d158 5
@


1.7
log
@Define placeholders for art's splassert() debugging stuff on all arches.
Currently as no-ops everywhere.

ok art@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.6 2002/03/14 01:26:35 millert Exp $	*/
a38 3
/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

d93 18
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.5 2001/11/23 00:47:43 miod Exp $	*/
d38 3
@


1.5
log
@Remove splsched() declaration and related stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2001/06/24 17:05:37 miod Exp $	*/
d142 1
a142 1
int	spl0 __P((void));
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.5 2001/11/23 00:47:43 miod Exp $	*/
a38 3
/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

d142 1
a142 1
int	spl0(void);
@


1.5.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 3
a95 18

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0
#define	IPL_SOFTNET	1
#define	IPL_SOFTCLOCK	1
#define	IPL_BIO		PSLTOIPL(mac68k_bioipl)
#define	IPL_NET		PSLTOIPL(mac68k_netipl)
#define	IPL_TTY		PSLTOIPL(mac68k_ttyipl)
#define	IPL_CLOCK	PSLTOIPL(mac68k_clockipl)
#define	IPL_STATCLOCK	PSLTOIPL(mac68k_statclockipl)
#define	IPL_HIGH	7
@


1.4
log
@Define splvm() for arches who don't already provide it, with the same
definition as splimp().
art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 2000/07/06 15:25:03 ho Exp $	*/
a92 1
extern unsigned short	mac68k_schedipl;
a112 1
#define	splsched()		_splsched(mac68k_schedipl)
@


1.3
log
@Add spllowersoftclock(), same as splsoftclock(). (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 1999/06/11 04:48:11 downsj Exp $	*/
d111 1
@


1.2
log
@egcs crap
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 1998/05/03 07:10:45 gene Exp $	*/
d104 12
a115 11
#define	splsoftclock()	splsoft()
#define	splsoftnet()	splsoft()
#define	spltty()	_splraise(mac68k_ttyipl)
#define	splbio()	_splraise(mac68k_bioipl)
#define	splnet()	_splraise(mac68k_netipl)
#define	splimp()	_splraise(mac68k_impipl)
#define	splclock()	_splraise(mac68k_clockipl)
#define	splstatclock()	_splraise(mac68k_statclockipl)
#define	splsched()	_splsched(mac68k_schedipl)
#define	splserial()	spl4()
#define	splhigh()	spl7()
@


1.2.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 2000/07/06 15:25:03 ho Exp $	*/
d104 11
a114 12
#define	spllowersoftclock()	splsoft()
#define	splsoftclock()		splsoft()
#define	splsoftnet()		splsoft()
#define	spltty()		_splraise(mac68k_ttyipl)
#define	splbio()		_splraise(mac68k_bioipl)
#define	splnet()		_splraise(mac68k_netipl)
#define	splimp()		_splraise(mac68k_impipl)
#define	splclock()		_splraise(mac68k_clockipl)
#define	splstatclock()		_splraise(mac68k_statclockipl)
#define	splsched()		_splsched(mac68k_schedipl)
#define	splserial()		spl4()
#define	splhigh()		spl7()
@


1.2.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2.4.1 2001/04/18 16:10:08 niklas Exp $	*/
a110 1
#define	splvm()			_splraise(mac68k_impipl)
@


1.2.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2.4.2 2001/07/04 10:18:32 niklas Exp $	*/
d93 1
d114 1
@


1.2.4.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d142 1
a142 1
int	spl0(void);
@


1.2.4.5
log
@Sync the SMP branch with 3.3
@
text
@a94 18
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *	- properly order ISRs in the list for that CPU ipl
 *	- compute CPU PSL values for the spl*() calls.
 */
#define	IPL_NONE	0
#define	IPL_SOFTNET	1
#define	IPL_SOFTCLOCK	1
#define	IPL_BIO		PSLTOIPL(mac68k_bioipl)
#define	IPL_NET		PSLTOIPL(mac68k_netipl)
#define	IPL_TTY		PSLTOIPL(mac68k_ttyipl)
#define	IPL_CLOCK	PSLTOIPL(mac68k_clockipl)
#define	IPL_STATCLOCK	PSLTOIPL(mac68k_statclockipl)
#define	IPL_HIGH	7

/*
@


1.1
log
@* Deprecate macinfo.h pulling all relevant defines into cpu.h.
* Move interrupt glue and associated stuff out to intr.h
* Do some MIification.
This brings us a lot closer to looking like the other ports.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
                "&=d" (_spl_r) : "di" (s));				\
d63 1
a63 1
		    "&=d" (_spl_r)				:	\
@

