head	1.18;
access;
symbols
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.18
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.16
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.12
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.14
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.10
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.8
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.6
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.4
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.15.0.14
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_9_BASE:1.4
	NIKLAS_UNDEAD:1.4.0.16
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.10
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2012.06.20.18.23.52;	author matthew;	state dead;
branches;
next	1.17;

1.17
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.16;

1.16
date	2006.09.17.22.23.40;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.27.49;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.27.19.37.30;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.17.22.59.52;	author maja;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.22.18.00.09;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.13.00.13.05;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.12.20.06.11;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.27.06.19.46;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.08.17.30.40;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.05.20.56.41;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.11.30.06.10.37;	author gene;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	97.01.24.01.35.42;	author briggs;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.18.36.11;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.06;	author deraadt;	state Exp;
branches;
next	;

1.4.10.1
date	2001.07.04.10.18.34;	author niklas;	state Exp;
branches;
next	1.4.10.2;

1.4.10.2
date	2001.10.31.03.01.14;	author nate;	state Exp;
branches;
next	1.4.10.3;

1.4.10.3
date	2001.12.05.00.39.11;	author niklas;	state Exp;
branches;
next	1.4.10.4;

1.4.10.4
date	2002.03.06.01.05.35;	author niklas;	state Exp;
branches;
next	1.4.10.5;

1.4.10.5
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	1.4.10.6;

1.4.10.6
date	2003.06.07.11.13.14;	author ho;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.36.19;	author art;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@RIP mac68k.  No one loves you anymore.
@
text
@/*	$OpenBSD: vmparam.h,v 1.17 2011/03/23 16:54:36 pirofti Exp $	*/
/*	$NetBSD: vmparam.h,v 1.8 1996/11/15 14:21:00 briggs Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/*-
 * Copyright (C) 1993	Allen K. Briggs, Chris P. Caputo,
 *			Michael L. Finch, Bradley A. Grantham, and
 *			Lawrence A. Kesteloot
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Alice Group.
 * 4. The names of the Alice Group or any of its members may not be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE ALICE GROUP ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE ALICE GROUP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 * from: Utah $Hdr: vmparam.h 1.16 91/01/18$
 *
 *	@@(#)vmparam.h	7.3 (Berkeley) 5/7/91
 */

#ifndef _MACHINE_VMPARAM_H_
#define _MACHINE_VMPARAM_H_

/*
 * Machine dependent constants for mac68k -- mostly derived from hp300.
 */

#include <m68k/vmparam.h>

/*
 * Constants which control the way the VM system deals with memory segments.
 * Most mac68k systems have only 1 physical memory segment, but some have 2.
 *
 * On the systems that have multiple segments, specifically the IIsi and   
 * IIci, the optimal configuration is to put the higher-density SIMMs in
 * bank B.  This is because the on-board video uses main memory in bank A
 * for the framebuffer, and a memory controller prevents access during   
 * video refresh cycles.  Even if both banks contain the same amount of
 * RAM, a minimum of ~320KB will be subtracted from the amount in bank A
 * for the framebuffer (if on-board video is in use).
 */
#define	VM_PHYSSEG_MAX		8
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BIGFIRST

#endif	/* _MACHINE_VMPARAM_H_ */
@


1.17
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2006/09/17 22:23:40 miod Exp $	*/
@


1.16
log
@Crank VM_PHYSSEG_MAX to 8; while we do not expect more than 2 ranges in the
worst case, the Booter will happily feed us up to 8 ranges, so we have to
get prepared.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2003/06/02 23:27:49 millert Exp $	*/
d76 2
a77 2
#ifndef _MAC68K_VMPARAM_H_
#define _MAC68K_VMPARAM_H_
d100 1
a100 1
#endif	/* _MAC68K_VMPARAM_H_ */
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2003/01/27 19:37:30 miod Exp $	*/
d97 1
a97 1
#define	VM_PHYSSEG_MAX		2
@


1.14
log
@Convert m68k pmap from physseg to VM_PAGE_MD.

This allows us to remove some ambiguities on how some functions are called,
remove some diagnostic checks for conditions that can never happen and
remove the ugly hack with "pmap_initialized".

Then, rework internal function interfaces and some logic so as to stop
fetching vm_page from a pa and the reverse every now and then - this makes
some pmap operations run much faster.

per art@@'s idea.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2002/02/17 22:59:52 maja Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2001/12/05 16:25:44 art Exp $	*/
a79 3
/*
 * Machine dependent constants for mac68k -- mostly derived from hp300.
 */
d84 1
a84 41
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack.  LOWPAGES and HIGHPAGES are
 * the number of pages from the beginning of the P0 region to the
 * beginning of the text and from the beginning of the P1 region to the
 * beginning of the stack respectively.
 *
 * NOTE: HP300 uses HIGHPAGES == (0x100000/NBPG) for HP/UX compatibility.
 * Do we care?  Obviously not at the moment.
 */
#define	USRTEXT		8192
#define	USRSTACK	(-HIGHPAGES*NBPG)	/* Start of user stack */
#define	LOWPAGES	0
#define HIGHPAGES	3			/* UPAGES */

/*
 * Virtual memory related constants, all in bytes
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(8*1024*1024)		/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(32*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(64*1024*1024)		/* max data size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		MAXDSIZ			/* max stack size */
#endif

/*
 * Sizes of the system and user portions of the system page table.
 */
#define	USRPTSIZE 	(1 * NPTEPG)	/* 4mb */

/*
 * PTEs for mapping user space into the kernel for phyio operations.
 * One page is enough to handle 4Mb of simultaneous raw IO operations.
a85 3
#ifndef USRIOSIZE
#define USRIOSIZE	(1 * NPTEPG)	/* 4mb */
#endif
d87 1
a87 31
/*
 * PTEs for system V style shared memory.
 * This is basically slop for kmempt which we actually allocate (malloc) from.
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	1024		/* 4mb */
#endif

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20

/* user/kernel map constants */
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)(USRSTACK))
#define VM_MAX_ADDRESS		((vaddr_t)(0-(UPAGES*NBPG)))
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(0-NBPG))

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

/* # of kernel PT pages (initial only, can grow dynamically) */
#define VM_KERNEL_PT_PAGES	((vsize_t)2)
a102 16
#define	VM_PHYSSEG_NOADD
   
#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0

/*
 * pmap-specific data stored in the vm_physmem[] array.
 */
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pv_entry *pvent;         /* pv table for this seg */
	char *attrs;                    /* page attributes for this seg */
};

/* pcb base */
#define	pcbb(p)		((u_int)(p)->p_addr)
@


1.12
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2001/11/30 17:37:43 art Exp $	*/
a159 1
#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2001/12/05 16:25:44 art Exp $	*/
d160 1
@


1.12.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 3
d87 41
a127 1
 * Machine dependent constants for mac68k -- mostly derived from hp300.
d129 3
d133 31
a163 1
#include <m68k/vmparam.h>
d179 16
@


1.11
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2001/09/22 18:00:09 miod Exp $	*/
a160 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
@


1.10
log
@Remove more old, dusty, unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2001/08/13 00:13:05 miod Exp $	*/
d189 1
@


1.9
log
@SYSPTSIZE is orhpaned, so g/c the poor define.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2001/08/12 20:06:11 miod Exp $	*/
a120 10
 * Default sizes of swap allocation chunks (see dmap.h).
 * The actual values may be changed in vminit() based on MAXDSIZ.
 * With MAXDSIZ of 16Mb and NDMAP of 38, dmmax will be 1024.
 * DMMIN should be at least ctod(1) so that vtod() works.
 * vminit() insures this.
 */
#define	DMMIN	32			/* smallest swap allocation */
#define	DMMAX	4096			/* largest potential swap allocation */

/*
a150 12

/*
 * A swapped in process is given a small amount of core without being bothered
 * by the page replacement algorithm.  Basically this says that if you are
 * swapped in you deserve some resources.  We protect the last SAFERSS
 * pages against paging and will just swap you out rather than paging you.
 */
#define	SAFERSS		4		/* nominal ``small'' resident set size
					   protected against replacement */
/*
 * Mach derived constants
 */
@


1.8
log
@KUSER_AREA, BTOPUSRSTACK, P1PAGES are never used, so get rid of them.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2001/06/27 06:19:46 art Exp $	*/
a132 2
/* SYSPTSIZE IS SILLY; IT SHOULD BE COMPUTED AT BOOT TIME */
#define	SYSPTSIZE	(2 * NPTEPG)	/* 8mb */
d187 1
a187 1
#define VM_KERNEL_PT_PAGES	((vsize_t)2)		/* XXX: SYSPTSIZE */
@


1.7
log
@MNN is no longer an option.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2001/05/08 17:30:40 aaron Exp $	*/
a97 2
#define	BTOPUSRSTACK	(0x100000-HIGHPAGES)	/* btop(USRSTACK) */
#define P1PAGES		0x100000
@


1.6
log
@Substantial update from NetBSD, most notably gives us UVM support; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2001/05/05 20:56:41 art Exp $	*/
a191 3

/* Use new VM page bootstrap interface. */
#define MACHINE_NEW_NONCONTIG
@


1.5
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 1997/11/30 06:10:37 gene Exp $	*/
d110 1
a110 1
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
d116 1
a116 1
#define	DFLSSIZ		(512*1024)		/* initial stack size limit */
d179 5
a183 5
#define VM_MIN_ADDRESS		((vm_offset_t)0)
#define VM_MAXUSER_ADDRESS	((vm_offset_t)(USRSTACK))
#define VM_MAX_ADDRESS		((vm_offset_t)(0-(UPAGES*NBPG)))
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)(0-NBPG))
d190 5
a194 1
#define MACHINE_NONCONTIG	/* VM <=> pmap interface modifier */
d196 26
a221 2
/* # of kernel PT pages (initial only, can grow dynamically) */
#define VM_KERNEL_PT_PAGES	((vm_size_t)2)		/* XXX: SYSPTSIZE */
@


1.4
log
@Add multiple inclusion protection, clean up comments, and wrap with _KERNEL
where appropriate.  Note that this buys us notable speed boosts on a machine
as slow as the mac68k.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 1997/01/24 01:35:42 briggs Exp $	*/
a155 12
 * Boundary at which to place first MAPMEM segment if not explicitly
 * specified.  Should be a power of two.  This allows some slop for
 * the data segment to grow underneath the first mapped segment.
 */
#define MMSEG		0x200000

/*
 * The size of the clock loop.
 */
#define	LOOPPAGES	(maxfree - firstfree)

/*
a170 7
 * Note that each process has at least UPAGES+CLSIZE pages which are not
 * paged anyways (this is currently 8+2=10 pages or 5k bytes), so this
 * number just means a swapped in process is given around 25k bytes.
 * Just for fun: current memory prices are 4600$ a megabyte on VAX (4/22/81),
 * so we loan each swapped in process memory worth 100$, or just admit
 * that we don't consider it worthwhile and swap it out to disk which costs
 * $30/mb or about $0.75.
a173 63

/*
 * DISKRPM is used to estimate the number of paging i/o operations
 * which one can expect from a single disk controller.
 */
#define	DISKRPM		3600

/*
 * Klustering constants.  Klustering is the gathering
 * of pages together for pagein/pageout, while clustering
 * is the treatment of hardware page size as though it were
 * larger than it really is.
 *
 * KLMAX gives maximum cluster size in CLSIZE page (cluster-page)
 * units.  Note that ctod(KLMAX*CLSIZE) must be <= DMMIN in dmap.h.
 * ctob(KLMAX) should also be less than MAXPHYS (in vm_swp.c)
 * unless you like "big push" panics.
 */

#define	KLMAX	(4/CLSIZE)
#define	KLSEQL	(2/CLSIZE)		/* in klust if vadvise(VA_SEQL) */
#define	KLIN	(4/CLSIZE)		/* default data/stack in klust */
#define	KLTXT	(4/CLSIZE)		/* default text in klust */
#define	KLOUT	(4/CLSIZE)

/*
 * KLSDIST is the advance or retard of the fifo reclaim for sequential
 * processes data space.
 */
#define	KLSDIST	3		/* klusters advance/retard for seq. fifo */

/*
 * Paging thresholds (see vm_sched.c).
 * Strategy of 1/19/85:
 *	lotsfree is 512k bytes, but at most 1/4 of memory
 *	desfree is 200k bytes, but at most 1/8 of memory
 * Are these still valid in 1995?
 */
#define	LOTSFREE	(512 * 1024)
#define	LOTSFREEFRACT	4
#define	DESFREE		(200 * 1024)
#define	DESFREEFRACT	8

/*
 * There are two clock hands, initially separated by HANDSPREAD bytes
 * (but at most all of user memory).  The amount of time to reclaim
 * a page once the pageout process examines it increases with this
 * distance and decreases as the scan rate rises.
 */
#define	HANDSPREAD	(2 * 1024 * 1024)

/*
 * The number of times per second to recompute the desired paging rate
 * and poke the pagedaemon.
 */
#define	RATETOSCHEDPAGING	4

/*
 * Believed threshold (in megabytes) for which interleaved
 * swapping area is desirable.
 */
#define	LOTSOFMEM	2

d187 2
a188 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*CLBYTES)
#define VM_PHYS_SIZE		(USRIOSIZE*CLBYTES)
@


1.4.10.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 1997/11/30 06:10:37 gene Exp $	*/
d110 1
a110 1
#define	DFLDSIZ		(32*1024*1024)		/* initial data size limit */
d116 1
a116 1
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
d156 12
d183 7
d193 63
d261 5
a265 5
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)(USRSTACK))
#define VM_MAX_ADDRESS		((vaddr_t)(0-(UPAGES*NBPG)))
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(0-NBPG))
d269 4
a272 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)
d275 1
a275 28
#define VM_KERNEL_PT_PAGES	((vsize_t)2)		/* XXX: SYSPTSIZE */

/*
 * Constants which control the way the VM system deals with memory segments.
 * Most mac68k systems have only 1 physical memory segment, but some have 2.
 *
 * On the systems that have multiple segments, specifically the IIsi and   
 * IIci, the optimal configuration is to put the higher-density SIMMs in
 * bank B.  This is because the on-board video uses main memory in bank A
 * for the framebuffer, and a memory controller prevents access during   
 * video refresh cycles.  Even if both banks contain the same amount of
 * RAM, a minimum of ~320KB will be subtracted from the amount in bank A
 * for the framebuffer (if on-board video is in use).
 */
#define	VM_PHYSSEG_MAX		2
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BIGFIRST
#define	VM_PHYSSEG_NOADD
   
#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0

/*
 * pmap-specific data stored in the vm_physmem[] array.
 */
struct pmap_physseg {
	struct pv_entry *pvent;         /* pv table for this seg */
	char *attrs;                    /* page attributes for this seg */
};
@


1.4.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4.10.1 2001/07/04 10:18:34 niklas Exp $	*/
d98 2
d123 10
d135 2
d166 12
d191 1
a191 1
#define VM_KERNEL_PT_PAGES	((vsize_t)2)
@


1.4.10.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4.10.2 2001/10/31 03:01:14 nate Exp $	*/
a188 1
#define __HAVE_PMAP_PHYSSEG
@


1.4.10.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d160 2
@


1.4.10.5
log
@Sync the SMP branch with 3.3
@
text
@d80 3
d87 41
a127 1
 * Machine dependent constants for mac68k -- mostly derived from hp300.
d129 3
d133 31
a163 1
#include <m68k/vmparam.h>
d179 16
@


1.4.10.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4.10.5 2003/03/27 23:28:43 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3
log
@Sync w/ NETBSD_CURRENT_971122.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 1996/05/26 18:36:11 briggs Exp $	*/
d83 2
d279 2
@


1.2
log
@Add OpenBSD Id string.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: vmparam.h,v 1.7 1995/06/21 03:17:06 briggs Exp $	*/
d269 2
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
