head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	UBC_SYNC_B:1.8
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.4
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2001.02.07.07.46.33;	author art;	state dead;
branches;
next	1.7;

1.7
date	99.05.10.16.02.14;	author espie;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	97.11.10.10.39.57;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.11.10.00.10.17;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.11.09.23.05.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.04.04.03.05.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.11.25.13.11.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.19;	author deraadt;	state Exp;
branches;
next	;

1.7.4.1
date	2001.04.18.16.12.06;	author niklas;	state dead;
branches;
next	;


desc
@@


1.8
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: endian.h,v 1.7 1999/05/10 16:02:14 espie Exp $	*/

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PC532_ENDIAN_H_
#define _PC532_ENDIAN_H_

#ifdef __GNUC__

#define __swap32md(x) ({						\
	u_int32_t __swap32md_x = (x);					\
									\
	__asm ("rotw 8,%1; rotd 16,%1; rotw 8,%1" :			\
	    "=r" (__swap32md_x) : "0" (__swap32md_x));			\
	__swap32md_x;							\
})

#define __swap16md(x) ({						\
	u_int16_t __swap16md_x = (x);					\
									\
	__asm ("rotw 8,%1" : "=r" (__swap16md_x) : "0" (__swap16md_x));	\
	__swap16md_x;							\
})

/* Tell sys/endian.h we have MD variants of the swap macros.  */
#define MD_SWAP

#endif	/* __GNUC__ */

#define BYTE_ORDER LITTLE_ENDIAN
#include <sys/endian.h>

#endif /* _PC532_ENDIAN_H_ */
@


1.7
log
@Use symbolic define for BYTE_ORDER.

(don't forget that cpp is `lazy':
#define A B
#define B value
#if A == value

works, since A isn't extended before it's needed, by which time B is known)
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.6 1997/11/10 10:39:57 niklas Exp $	*/
@


1.7.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1999/05/10 16:02:14 espie Exp $	*/
@


1.6
log
@Be careful about local varnames in macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.5 1997/11/10 00:10:17 niklas Exp $	*/
d57 1
a57 1
#define BYTE_ORDER 1234
@


1.5
log
@DOH! conflicts from me
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1997/08/08 18:27:17 niklas Exp $	*/
d37 6
a42 5
#define __swap32md(x) ({ \
    register u_int32_t __x = (x); \
\
    __asm ("rotw 8,%1; rotd 16,%1; rotw 8,%1" : "=r" (__x) : "0" (__x)); \
    __x; \
d45 5
a49 5
#define __swap16md(x) ({ \
    register u_int16_t __x = (x); \
\
    __asm ("rotw 8,%1" : "=r" (__x) : "0" (__x)); \
    __x; \
@


1.4
log
@New endian.h design.  All architectures now use a common file for the bulk
part.  Some ports can optimize the swap operations.  This also means the
general API is extended with swap16, swap32, htobe16, htobe32, betoh16,
betoh32, htole16, htole32, letoh16 and letoh32.
@
text
@@


1.3
log
@Define in_addr_t and in_port_t everywhere but use u_intXX_t for
htonl and friends.
@
text
@d1 1
a1 2
/*	$OpenBSD: endian.h,v 1.2 1996/11/25 13:11:31 niklas Exp $	*/
/*	$NetBSD: endian.h,v 1.8 1995/06/18 07:13:46 phil Exp $	*/
d3 2
a4 3
/*
 * Copyright (c) 1987, 1991 Regents of the University of California.
 * All rights reserved.
d16 3
a18 5
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d20 10
a29 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)endian.h	7.8 (Berkeley) 4/3/91
d35 1
a35 28
/*
 * Define the order of 32-bit words in 64-bit words.
 */
#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0

#ifndef _POSIX_SOURCE
/*
 * Definitions for byte order, according to byte significance from low
 * address to high.
 */
#define	LITTLE_ENDIAN	1234	/* LSB first: i386, vax, ns32000 */
#define	BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in int32_t */

#define	BYTE_ORDER	LITTLE_ENDIAN

#include <sys/cdefs.h>

typedef u_int32_t in_addr_t;
typedef u_int16_t in_port_t;

__BEGIN_DECLS
u_int32_t	htonl __P((u_int32_t));
u_int16_t	htons __P((u_int16_t));
u_int32_t	ntohl __P((u_int32_t));
u_int16_t	ntohs __P((u_int16_t));
__END_DECLS
d37 13
d51 2
a52 45
#ifdef __GNUC__

#define __byte_swap_int32_variable(x) \
({ register u_int32_t __x = (x); \
   __asm ("rotw 8,%1; rotd 16,%1; rotw 8,%1" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })

#define __byte_swap_int16_variable(x) \
({ register u_int16_t __x = (x); \
   __asm ("rotw 8,%1" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })


#ifdef __OPTIMIZE__

#define	__byte_swap_int32_constant(x) \
	((((x) & 0xff000000) >> 24) | \
	 (((x) & 0x00ff0000) >>  8) | \
	 (((x) & 0x0000ff00) <<  8) | \
	 (((x) & 0x000000ff) << 24))
#define	__byte_swap_int16__constant(x) \
	((((x) & 0xff00) >> 8) | \
	 (((x) & 0x00ff) << 8))
#define	__byte_swap_int32(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int32_constant(x) : __byte_swap_int32_variable(x))
#define	__byte_swap_int16(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int16_constant(x) : __byte_swap_int16_variable(x))

#else /* __OPTIMIZE__ */

#define	__byte_swap_int32(x)	__byte_swap_int32_variable(x)
#define	__byte_swap_int16(x)	__byte_swap_int16_variable(x)

#endif /* __OPTIMIZE__ */

#define	ntohl(x)	__byte_swap_int32(x)
#define	ntohs(x)	__byte_swap_int16(x)
#define	htonl(x)	__byte_swap_int32(x)
#define	htons(x)	__byte_swap_int16(x)
d56 2
a57 10

/*
 * Macros for network/external number representation conversion.
 */
#define	NTOHL(x)	(x) = ntohl((u_int32_t)x)
#define	NTOHS(x)	(x) = ntohs((u_int16_t)x)
#define	HTONL(x)	(x) = htonl((u_int32_t)x)
#define	HTONS(x)	(x) = htons((u_int16_t)x)

#endif /* _POSIX_SOURCE */
@


1.2
log
@htons et al. works on explicit 16- and 32-bit quantities and not the
machine dependent "short" and "long" integer.  Correct and enhance manpage.
Change all short and longs to u_int16_t and u_int32_t, respectively.
OpenBSD RCSIds
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.8 1995/06/18 07:13:46 phil Exp $	*/
d60 3
@


1.1
log
@Initial revision
@
text
@d1 1
d55 1
a55 1
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */
d62 4
a65 4
unsigned long	htonl __P((unsigned long));
unsigned short	htons __P((unsigned short));
unsigned long	ntohl __P((unsigned long));
unsigned short	ntohs __P((unsigned short));
d71 2
a72 2
#define __byte_swap_long_variable(x) \
({ register unsigned long __x = (x); \
d78 2
a79 2
#define __byte_swap_word_variable(x) \
({ register unsigned short __x = (x); \
d88 1
a88 1
#define	__byte_swap_long_constant(x) \
d93 1
a93 1
#define	__byte_swap_word_constant(x) \
d96 1
a96 1
#define	__byte_swap_long(x) \
d98 2
a99 2
	 __byte_swap_long_constant(x) : __byte_swap_long_variable(x))
#define	__byte_swap_word(x) \
d101 1
a101 1
	 __byte_swap_word_constant(x) : __byte_swap_word_variable(x))
d105 2
a106 2
#define	__byte_swap_long(x)	__byte_swap_long_variable(x)
#define	__byte_swap_word(x)	__byte_swap_word_variable(x)
d110 4
a113 4
#define	ntohl(x)	__byte_swap_long(x)
#define	ntohs(x)	__byte_swap_word(x)
#define	htonl(x)	__byte_swap_long(x)
#define	htons(x)	__byte_swap_word(x)
d121 4
a124 4
#define	NTOHL(x)	(x) = ntohl((u_long)x)
#define	NTOHS(x)	(x) = ntohs((u_short)x)
#define	HTONL(x)	(x) = htonl((u_long)x)
#define	HTONS(x)	(x) = htons((u_short)x)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
