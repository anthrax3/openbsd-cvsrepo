head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.02.07.07.46.32;	author art;	state dead;
branches;
next	1.3;

1.3
date	2000.03.03.00.54.54;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	96.01.12.20.20.38;	author deraadt;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.51.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.18;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2000.03.24.09.08.26;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2001.04.18.16.12.01;	author niklas;	state dead;
branches;
next	;


desc
@@


1.4
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: rd.c,v 1.3 2000/03/03 00:54:54 todd Exp $	*/
/*
 * Copyright (c) 1995 Philip A. Nelson.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Philip A. Nelson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/disk.h>

static int rdmatch(struct device *parent, void *cf, void *aux);
static void rdattach(struct device *parent, struct device *self, void *aux);

struct rdsoftc {
	struct	device sc_dev;		/* generic device glue */
	struct	disk sc_dkdev;		/* generic disk glue */
};

struct cfdriver rdcd = {
	NULL,
	"rd",
	rdmatch,
	rdattach,
	DV_DISK,
	sizeof(struct rdsoftc),
	NULL,
	0
};

void rdstrategy __P((struct buf *));

struct dkdriver rddkdriver = { rdstrategy };

#if !defined(RD_SIZE)
#  define RD_SIZE	0x200000
#endif

u_char ram_disk[RD_SIZE] = "Ramdiskorigin";

static int
rdmatch(parent, cf, aux)
	struct device	*parent;
	void		*cf, *aux;
{
	return(((struct cfdata *)cf)->cf_unit == 0);
}

static void
rdattach(parent, self, aux)
	struct device	*parent, *self;
	void		*aux;
{
	struct rdsoftc *sc = (struct rdsoftc *)self;

	printf(" addr 0x%x, size 0x%x\n", ram_disk, RD_SIZE);

	/*
	 * Initialize and attach the disk structure.
	 */
	bzero(&sc->sc_dkdev, sizeof(sc->sc_dkdev));
	sc->sc_dkdev.dk_driver = &rddkdriver;
	sc->sc_dkdev.dk_name = sc->sc_dev.dv_xname;
	disk_attach(&sc->sc_dkdev);
}


/* operational routines */

int
rdopen(dev, flags, devtype, p)
	dev_t		dev;
	int		flags, devtype;
	struct proc	*p;
{
	if (minor(dev) == 0)
		  return(0);
	else
		  return(ENXIO);
}

int
rdclose(dev, flags, devtype, p)
	dev_t		dev;
	int		flags, devtype;
	struct proc	*p;
{
	return(0);
}

int
rdioctl(dev, cmd, addr, flag, p)
	dev_t		dev;
	u_long		cmd;
	int		flag;
	caddr_t 	addr;
	struct proc	*p;
{
	return(ENOTTY);
}

int
rdsize(dev)
	dev_t dev;
{
	if (minor(dev) == 0)
		return(RD_SIZE / DEV_BSIZE);
	else
		return(0);
}

int
rddump(dev, blkno, va, size)
	dev_t dev;
	daddr_t blkno;
	caddr_t va;
	size_t size;
{
	return(ENXIO);
}

void
rdstrategy(bp)
	struct buf *bp;
{
	int loc, size;
	char *adr;

	if (minor(bp->b_dev) == 0)
		loc = bp->b_blkno * DEV_BSIZE;
	else {
		bp->b_error = EINVAL;
		bp->b_flags |= B_ERROR;
		return;
	}
	size = bp->b_bcount;
	adr = (char *) bp->b_un.b_addr;
	if (loc + size > sizeof(ram_disk)) {
		bp->b_error = EINVAL;
		bp->b_flags |= B_ERROR;
		return;
	}
	if (bp->b_flags & B_READ)
	      bcopy(&ram_disk[loc], adr, size);
	else
	      bcopy(adr, &ram_disk[loc], size);
	biodone(bp);
}

int
rdread(dev, uio)
	dev_t		dev;
	struct uio	*uio;
{
	return(physio(rdstrategy, NULL, dev, B_READ, minphys, uio));
}

int
rdwrite(dev, uio)
	dev_t		dev;
	struct uio	*uio;
{
	return(physio(rdstrategy, NULL, dev, B_WRITE, minphys, uio));
}
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: rd.c,v 1.2 1996/01/12 20:20:38 deraadt Exp $	*/
@


1.2
log
@from netbsd;
New generic disk framework.  Highlights:
New metrics handling.  Metrics are now kept in the new `struct disk'.
Busy time is now stored as a timeval, and transfer count in bytes.
Storage for disklabels is now dynamically allocated, so that the size
of the disk structure is not machine-dependent.
Several new functions for attaching and detaching disks, and handling
metrics calculation.
Old-style instrumentation is still supported in drivers that did it
before.  However, old-style instrumentation is being deprecated, and
will go away once the userland utilities are updated for the new
framework.
For usage and architectural details, see the forthcoming disk(9)
manual page.
@
text
@d1 1
a30 1
 *	$Id: rd.c,v 1.2 1996/01/07 22:02:46 thorpej Exp $
@


1.2.16.1
log
@Sync with -current
@
text
@a0 1
/*	$OpenBSD$	*/
d30 1
@


1.2.16.2
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: rd.c,v 1.2.16.1 2000/03/24 09:08:26 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: rd.c,v 1.1 1995/09/26 20:16:14 phil Exp $
d39 1
d44 5
d55 1
a55 1
	sizeof(struct device),
d60 4
d83 2
d86 8
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
