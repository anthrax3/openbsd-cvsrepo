head	1.89;
access;
symbols
	OPENBSD_6_1:1.89.0.2
	OPENBSD_6_1_BASE:1.89
	OPENBSD_6_0:1.81.0.2
	OPENBSD_6_0_BASE:1.81
	OPENBSD_5_9:1.80.0.4
	OPENBSD_5_9_BASE:1.80
	OPENBSD_5_8:1.80.0.6
	OPENBSD_5_8_BASE:1.80
	OPENBSD_5_7:1.80.0.2
	OPENBSD_5_7_BASE:1.80
	OPENBSD_5_6:1.76.0.4
	OPENBSD_5_6_BASE:1.76
	OPENBSD_5_5:1.74.0.4
	OPENBSD_5_5_BASE:1.74
	OPENBSD_5_4:1.73.0.2
	OPENBSD_5_4_BASE:1.73
	OPENBSD_5_3:1.71.0.2
	OPENBSD_5_3_BASE:1.71
	OPENBSD_5_2:1.69.0.4
	OPENBSD_5_2_BASE:1.69
	OPENBSD_5_1_BASE:1.69
	OPENBSD_5_1:1.69.0.2
	OPENBSD_5_0:1.68.0.2
	OPENBSD_5_0_BASE:1.68
	OPENBSD_4_9:1.63.0.2
	OPENBSD_4_9_BASE:1.63
	OPENBSD_4_8:1.60.0.2
	OPENBSD_4_8_BASE:1.60
	OPENBSD_4_7:1.37.0.2
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.34.0.6
	OPENBSD_4_6_BASE:1.34
	OPENBSD_4_5:1.34.0.2
	OPENBSD_4_5_BASE:1.34
	OPENBSD_4_4:1.33.0.2
	OPENBSD_4_4_BASE:1.33
	OPENBSD_4_3:1.32.0.2
	OPENBSD_4_3_BASE:1.32
	OPENBSD_4_2:1.28.0.2
	OPENBSD_4_2_BASE:1.28
	OPENBSD_4_1:1.27.0.4
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.25.0.4
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.24.0.2
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.23.0.4
	OPENBSD_3_6_BASE:1.23
	SMP_SYNC_A:1.23
	SMP_SYNC_B:1.23
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.16
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@# @;


1.89
date	2017.02.27.16.21.30;	author kettenis;	state Exp;
branches;
next	1.88;
commitid	C01hkH3gR2VaqMoI;

1.88
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.87;
commitid	yUJbDchhkVm6F1HA;

1.87
date	2016.11.15.09.08.37;	author natano;	state Exp;
branches;
next	1.86;
commitid	uQeojuKIzgIWOEnv;

1.86
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.85;
commitid	eR4vLZnymgQjVxbj;

1.85
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.84;
commitid	84F8eQ949AbxN83e;

1.84
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.83;
commitid	TtDw6IYffbT8oPEE;

1.83
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.82;
commitid	dUZQxi6w3YqAb6KQ;

1.82
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.81;
commitid	N8Z5nlTJHj3pmauV;

1.81
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.80;
commitid	Vbd8R29nZBKG6KtM;

1.80
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.79;
commitid	xEYSgcMiEU7N21VE;

1.79
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.78;
commitid	Jqptj5xcqx8IMSNU;

1.78
date	2014.11.18.01.17.36;	author deraadt;	state Exp;
branches;
next	1.77;
commitid	Qj1gzxwenHvm4gTb;

1.77
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.76;
commitid	iaz4yUwbbR9oynrV;

1.76
date	2014.07.12.21.49.27;	author miod;	state Exp;
branches;
next	1.75;
commitid	55F1D8QiXSSHGgfO;

1.75
date	2014.05.08.21.32.45;	author miod;	state Exp;
branches;
next	1.74;

1.74
date	2013.10.15.19.23.26;	author guenther;	state Exp;
branches;
next	1.73;

1.73
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.72;

1.72
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.71;

1.71
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.70;

1.70
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.69;

1.69
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.68;

1.68
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.67;

1.67
date	2011.07.06.02.08.04;	author tedu;	state Exp;
branches;
next	1.66;

1.66
date	2011.04.15.02.46.52;	author deraadt;	state Exp;
branches;
next	1.65;

1.65
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.64;

1.64
date	2011.04.10.02.54.45;	author deraadt;	state Exp;
branches;
next	1.63;

1.63
date	2010.12.30.18.49.30;	author deraadt;	state Exp;
branches;
next	1.62;

1.62
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.58;

1.58
date	2010.05.27.11.56.45;	author jsing;	state Exp;
branches;
next	1.57;

1.57
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2010.05.24.23.19.21;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2010.05.24.14.59.15;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2010.05.23.16.43.54;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.48;

1.48
date	2010.04.27.16.54.53;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2010.04.27.16.50.15;	author jsg;	state Exp;
branches;
next	1.46;

1.46
date	2010.04.27.06.46.25;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2010.04.27.05.07.28;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2010.04.27.04.31.46;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.26.22.21.14;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.36;

1.36
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2009.08.09.21.33.36;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.33;

1.33
date	2008.04.12.21.04.16;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2007.11.26.09.58.38;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2007.11.25.18.25.28;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.27;

1.27
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.01.21.46.27;	author pascoe;	state Exp;
branches;
next	1.25;

1.25
date	2005.08.01.15.57.44;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2004.11.19.06.41.13;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.20.08.38.52;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.31.01.58.57;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.23.22.16.16;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.07.18.28.14;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	2002.12.25.21.10.26;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.02.09.00.23;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2002.08.09.20.24.43;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.25.21.17.18;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.18.04.33.03;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.15.21.22.50;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.19.01.53.30;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.04.08.51.55;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.15.13.10.48;	author assar;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2000.01.11.21.26.23;	author mickey;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.12.20.14.19.25;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	99.06.22.17.32.56;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	99.02.25.16.42.43;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	98.12.23.17.48.46;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	98.10.30.19.45.35;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.07.07.20.51.01;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.02.20.48.43;	author mickey;	state Exp;
branches;
next	;

1.8.2.1
date	2001.10.31.02.52.46;	author nate;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2002.03.06.00.57.22;	author niklas;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2002.03.28.10.07.19;	author niklas;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2003.03.27.23.26.53;	author niklas;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2003.05.13.19.41.03;	author ho;	state Exp;
branches;
next	1.8.2.6;

1.8.2.6
date	2003.06.07.11.11.35;	author ho;	state Exp;
branches;
next	1.8.2.7;

1.8.2.7
date	2004.02.19.10.48.39;	author niklas;	state Exp;
branches;
next	;

1.9.4.1
date	2002.01.31.22.55.08;	author niklas;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2002.06.11.03.35.36;	author art;	state Exp;
branches;
next	1.9.4.3;

1.9.4.3
date	2002.10.29.00.28.02;	author art;	state Exp;
branches;
next	1.9.4.4;

1.9.4.4
date	2003.05.19.21.49.41;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.89
log
@Build hppa kernels with -ffreestanding.
@
text
@#	$OpenBSD: Makefile.hppa,v 1.88 2016/11/29 09:08:34 mpi Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
CMACHFLAGS+=	-fno-stack-protector

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-X -T ${LDSCRIPT} -Ttext 80000 --warn-common -nopie

.if ${IDENT:M-DDDB} != ""
CFLAGS+=	-fno-omit-frame-pointer
.endif

.if ${IDENT:M-DHP7000_CPU} != ""
CFLAGS+=	-mpa-risc-1-0
.elif ${IDENT:M-DHP8*_CPU} != ""
CFLAGS+=	-mpa-risc-2-0
.else
CFLAGS+=	-mpa-risc-1-1
.endif

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.S assym.h
fpemu.o spcopy.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.88
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.87 2016/11/15 09:08:37 natano Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d31 1
a31 3
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.87
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.86 2016/10/27 20:44:20 natano Exp $
d36 1
a88 1
DEBUG?=
@


1.86
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.85 2016/10/24 18:26:17 deraadt Exp $
d130 2
a131 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d136 1
a136 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.85
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.84 2016/10/15 13:45:08 deraadt Exp $
d131 1
a131 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.84
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.83 2016/10/14 18:43:01 deraadt Exp $
d135 1
a135 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.83
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.82 2016/09/24 19:13:03 kettenis Exp $
d132 4
a135 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.82
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.81 2016/04/29 12:44:52 mpi Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d138 2
@


1.81
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.80 2015/01/13 01:12:49 deraadt Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized \
@


1.80
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.79 2015/01/11 19:25:13 tedu Exp $
d90 1
a90 1
STRIPFLAGS=	-g -x
d96 1
a96 1
LINKFLAGS+=	-S -x
@


1.79
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.78 2014/11/18 01:17:36 deraadt Exp $
d159 1
a159 2
	rm -f /obsd
	ln /bsd /obsd
@


1.78
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.77 2014/10/04 18:10:14 brad Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.77
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.76 2014/07/12 21:49:27 miod Exp $
d39 2
a40 2
LINKFLAGS=	-X -T ${_machdir}/conf/ld.script -Ttext 80000 --warn-common \
		-nopie
d82 1
a82 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.76
log
@Build kernels at -O2 instead of -Os, as done for userland and on all other
architectures.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.75 2014/05/08 21:32:45 miod Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.75
log
@Format string fixes and removal of -Wno-format for hppa kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.74 2013/10/15 19:23:26 guenther Exp $
d36 1
a36 1
COPTS?=		-Os
@


1.74
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.73 2013/06/23 20:33:51 miod Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.73
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.72 2013/03/30 07:25:20 tedu Exp $
d145 1
a145 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d147 1
a147 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.72
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.71 2012/08/28 21:03:32 pascal Exp $
d38 1
a38 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CMACHFLAGS}
@


1.71
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.70 2012/08/22 16:58:26 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.70
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.69 2011/11/08 18:41:34 matthieu Exp $
d39 2
a40 1
LINKFLAGS=	-X -T ${_machdir}/conf/ld.script -Ttext 80000 --warn-common
@


1.69
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.68 2011/07/07 22:28:18 guenther Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.68
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.67 2011/07/06 02:08:04 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.67
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.66 2011/04/15 02:46:52 deraadt Exp $
d170 5
a174 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.66
log
@die blank line die die die
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.65 2011/04/15 02:41:28 guenther Exp $
d131 1
a131 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.65
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.64 2011/04/10 02:54:45 deraadt Exp $
a128 1

@


1.64
log
@'kernel libraries' always get in the way of the build process.  Teach
autoconf how to find the spmath files.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.63 2010/12/30 18:49:30 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL
d81 2
a82 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d101 5
d109 2
a110 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d140 3
a145 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d147 1
a147 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d164 12
@


1.63
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.62 2010/12/02 20:57:08 deraadt Exp $
a53 11
.if ${IDENT:M-DFPEMUL} != ""
CFLAGS+=	-msoft-float -mdisable-fpregs
HPPA=		${_machdir}
.include "${_machdir}/spmath/Makefile.inc"
.ifndef PROF
LIBSPMATH=	${SPMATH}
.else
LIBSPMATH=	${SPMATH_PROF}
.endif
.endif

d80 1
a80 1
SYSTEM_HEAD=	locore.o param.o ioconf.o ${LIBSPMATH}
@


1.62
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.61 2010/12/02 04:35:02 deraadt Exp $
d114 2
a115 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.61
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.60 2010/06/01 23:49:22 deraadt Exp $
d91 2
a92 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS} ${LIBSPMATH}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d94 2
a95 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.60
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.59 2010/05/28 14:27:08 guenther Exp $
d91 1
a91 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBSPMATH}
d94 2
a95 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.59
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.58 2010/05/27 11:56:45 jsing Exp $
a40 1
STRIPFLAGS=	-g -x
d100 1
@


1.58
log
@We no longer need -traditional-cpp for hppa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.56 2010/05/25 15:05:01 deraadt Exp $
d114 1
a114 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.57
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d39 1
a39 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
@


1.56
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.55 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		hppa
_arch?=		hppa
@


1.55
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.54 2010/05/24 23:19:21 deraadt Exp $
d170 1
a170 1
	${NORMAL_S}
@


1.54
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.53 2010/05/24 17:49:37 deraadt Exp $
a150 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d152 1
a152 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.53
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.52 2010/05/24 14:59:15 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d140 1
a140 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d150 2
a151 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
d154 1
a154 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.S
a171 2

fpemu.o: assym.h
@


1.52
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.51 2010/05/23 16:43:54 deraadt Exp $
d164 3
a166 3
	-if test -n "${SFILES}"; then \
		${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}; \
	fi
@


1.51
log
@no need for -Dhppa or -Dhppa64 on these architectures
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.50 2010/04/28 15:31:33 deraadt Exp $
d29 2
a30 2
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wno-uninitialized \
		-Wno-format -Wno-main \
d32 7
a38 3
CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs \
		-fno-stack-protector -fno-builtin-printf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc
d40 2
a41 2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
d77 1
a77 3

# compile rules: rules are named ${TYPE}_${SUFFIX} where TYPE is NORMAL or
# HOSTED}, and SUFFIX is the file suffix, capitalized (e.g. C for a .c file).
a82 2
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

d139 1
a139 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d143 1
a143 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB \
@


1.50
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.49 2010/04/27 17:25:19 drahn Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D${_mach}
@


1.49
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.48 2010/04/27 16:54:53 deraadt Exp $
d156 1
a156 1
	sh makelinks && rm -f dontlink
@


1.48
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.47 2010/04/27 16:50:15 jsg Exp $
d27 1
a27 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.47
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.46 2010/04/27 06:46:25 deraadt Exp $
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL \
		-Dhppa
@


1.46
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.45 2010/04/27 05:07:28 deraadt Exp $
d34 2
a35 1
		-fno-stack-protector -fno-builtin-printf -fno-builtin-log
@


1.45
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.44 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/hppa/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/hppa/conf/Makefile.hppa
# after which config should be rerun for all machines of that type.
@


1.44
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.43 2010/04/27 04:31:46 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.43
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.42 2010/04/27 03:37:37 deraadt Exp $
a84 3
# this line must be there because libkern needs assym.h generated early
depend:: .NOTMAIN .depend

d169 1
a169 1
SRCS=	${_machdir}/hppa/locore.S \
d171 1
d173 1
a173 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/hppa/locore.S
d189 1
a189 1
locore.o: ${_machdir}/hppa/locore.S assym.h
@


1.42
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.41 2010/04/26 22:21:14 deraadt Exp $
d181 1
a181 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.41
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.40 2010/04/26 22:11:37 deraadt Exp $
a190 12

# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
assym.h machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o trap.o: Makefile
@


1.40
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.39 2010/04/26 20:50:16 deraadt Exp $
a33 1
_machdir=	$S/arch/hppa
d35 2
a36 1
_archdir?=	$S/arch/hppa
@


1.39
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.38 2010/04/26 18:58:30 deraadt Exp $
d127 5
a131 3
assym.h: $S/kern/genassym.sh ${_machdir}/hppa/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${_machdir}/hppa/genassym.cf > assym.h.tmp && \
d180 3
a182 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/hppa/genassym.cf
@


1.38
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.37 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 1
HPPA=	$S/arch/hppa
d49 1
a49 1
LINKFLAGS=	-X -T ${HPPA}/conf/ld.script -Ttext 80000 --warn-common
d66 2
a67 1
.include "${HPPA}/spmath/Makefile.inc"
d127 1
a127 1
assym.h: $S/kern/genassym.sh ${HPPA}/hppa/genassym.cf Makefile
d129 1
a129 1
	    < ${HPPA}/hppa/genassym.cf > assym.h.tmp && \
d170 1
a170 1
SRCS=	${HPPA}/hppa/locore.S \
d173 1
a173 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${HPPA}/hppa/locore.S
d179 1
a179 1
	    ${CPPFLAGS} < ${HPPA}/hppa/genassym.cf
d201 1
a201 1
locore.o: ${HPPA}/hppa/locore.S assym.h
@


1.37
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.36 2009/08/09 23:04:49 miod Exp $
a2 2
# Makefile for OpenBSD
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d186 3
a188 3
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 
d193 1
a193 1
# depend on CPU configuration 
@


1.36
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.35 2009/08/09 21:33:36 miod Exp $
d142 1
a142 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.35
log
@No need to clean genassym{.,o} during `make clean', genassym.sh does this
for us.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.34 2009/01/11 21:02:03 pirofti Exp $
d72 6
d149 1
a149 1
	    [Ee]rrs linterrs makelinks assym.h
d169 1
a169 1
.depend: ${SRCS} assym.h param.c
d180 5
@


1.34
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.33 2008/04/12 21:04:16 miod Exp $
d142 1
a142 1
	rm -f eddep *bsd bsd.map bsd.gdb tags *.[io] [a-z]*.s \
@


1.33
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.32 2007/11/30 07:52:06 miod Exp $
d171 2
a172 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.32
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.31 2007/11/26 09:58:38 deraadt Exp $
d41 1
a41 1
		-Wstack-larger-than-2047
@


1.31
log
@another LIBKERN that stayed behind
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.30 2007/11/25 18:25:28 deraadt Exp $
d82 1
@


1.30
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.29 2007/11/25 11:23:33 deraadt Exp $
d98 1
a98 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBSPMATH} ${LIBKERN}
@


1.29
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.28 2007/07/30 16:23:33 thib Exp $
a78 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d129 3
a184 1

d187 1
@


1.28
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.27 2006/07/27 05:58:11 miod Exp $
a86 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d101 6
a106 2
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} \
		${LIBKERN} ${LIBCOMPAT} ${LIBSPMATH}
@


1.27
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.26 2006/06/01 21:46:27 pascoe Exp $
d36 1
a36 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
@


1.26
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.25 2005/08/01 15:57:44 miod Exp $
d40 2
a41 1
		-Wno-format -Wno-main
@


1.25
log
@Change the compilers default scheduling settings from PA-8000 (4 instructions
in parallel) to PA-700 (no parallel instructions) on 32-bit hppa.

This causes gcc to produce slightly faster code on most supported hppa,
no change in code size.

Tested by marcop@@, mickey@@, I and a few others; ok mickey@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.24 2004/11/19 06:41:13 miod Exp $
d119 3
a121 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.24
log
@More aggressive strip flags for non debug kernels; this is a noop on some
architectures, but saves a few dozen KB on alpha and ppc.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.23 2003/11/20 08:38:52 espie Exp $
a58 7
.endif

.if ${IDENT:M-DHP*_CPU} == ${IDENT:M-HHP7100LC_CPU}
# XXX they said gcc has bugs in 7100lc scheduling
#CFLAGS+=	-mschedule=7100LC
.else
CFLAGS+=	-mschedule=700
@


1.23
log
@Add -fno-builtin-print -fno-builtin-log to i386/sparc/sparc64/hppa.
No confirmed report of `this work' for other arches yet...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.22 2003/10/31 01:58:57 mickey Exp $
d129 1
a129 1
LINKFLAGS+=	-S
@


1.22
log
@warn commons instead of generating a map file (was there for debugging)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.21 2003/07/22 19:39:50 otto Exp $
d42 1
a42 1
		-fno-stack-protector
@


1.21
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.20 2003/05/23 22:16:16 tedu Exp $
d46 1
a46 1
LINKFLAGS=	-X -T ${HPPA}/conf/ld.script -Ttext 80000 -Map bsd.map
@


1.20
log
@move swapgeneric to truly generic code.  tested on many archs by miod and mickey.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.19 2003/05/07 18:28:14 mickey Exp $
d184 1
a184 1
	@@sed -e 's/.*\.o:.*\.c/assym.h:/' < assym.dep >> .depend
@


1.19
log
@selecet pa-level and scheduling separately
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.18 2002/12/25 21:10:26 miod Exp $
d160 1
a160 1
	    ${CFILES} ${HPPA}/hppa/swapgeneric.c ioconf.c param.c | \
@


1.18
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.17 2002/12/02 09:00:23 miod Exp $
d54 1
a54 1
CFLAGS+=	-mpa-risc-1-0 -mschedule=700
d64 2
@


1.17
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.16 2002/08/09 20:24:43 miod Exp $
a25 4
AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
@


1.16
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.15 2002/07/25 21:17:18 mickey Exp $
d45 2
a46 1
CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs
@


1.15
log
@strip off annoying local gcc symbols (jason was complaining hangman being too easy ;)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.14 2002/07/18 04:33:03 mickey Exp $
d135 1
a135 1
assym.h: $S/kern/genassym.sh ${HPPA}/hppa/genassym.cf
@


1.14
log
@move kernel higher.
request 7000 scheduling if only pa7000 is configured.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.13 2002/06/22 14:05:51 millert Exp $
d49 2
a50 2
LINKFLAGS=	-T ${HPPA}/conf/ld.script -Ttext 80000 -Map bsd.map
STRIPFLAGS=	-g -X -x
a125 1
LINKFLAGS+=	-X
@


1.13
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.12 2002/03/15 21:22:50 mickey Exp $
d49 1
a49 1
LINKFLAGS=	-T ${HPPA}/conf/ld.script -Ttext 12000 -Map bsd.map
d56 1
a56 1
.if ${IDENT:M-DHP7[01]00_CPU} != ""
@


1.12
log
@build really really small
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.11 2002/02/19 01:53:30 deraadt Exp $
d47 1
a47 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS}
@


1.11
log
@proper dependencies on assym.h
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.10 2002/01/04 08:51:55 miod Exp $
d46 1
a46 1
COPTS?=		-O2
@


1.10
log
@Bring in a closer shape to other arches Makefile, also reorder the depend
order so that assym.h is created in time for the libkern depend phase,
since hppa libkern depends on it.
mickey@@ ok (and the previous commit as well).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.9 2001/07/15 13:10:48 assar Exp $
d204 1
@


1.9
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.8 2000/01/11 21:26:23 mickey Exp $
d26 1
a26 13
.if ${MACHINE_ARCH} != "hppa"
CROSSDIR?=     /usr/cross/hppa

.BEGIN:
	CBIN=${CROSSDIR}/usr/bin; export CBIN; \
	MACHINE="hppa" MACHINE_ARCH="hppa" AR=$$CBIN/ar AS=$$CBIN/as \
	CC=$$CBIN/cc HOSTCC=cc LD=$$CBIN/ld NM=$$CBIN/nm LORDER=$$CBIN/lorder \
	RANLIB=$$CBIN/ranlib STRIP=$$CBIN/strip SIZE=$$CBIN/size ${MAKE} ${.TARGET}

all:

.else

d28 1
a28 1
HOSTCC?=${CC}
d31 1
a32 1
COPTS?=	-O2
d35 4
a38 2
S?=	../../../..
HPPA?=	${S}/arch/hppa
d41 2
a42 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -Dhppa
d45 3
a47 2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} -mno-space-regs \
		-mfast-indirect-calls -mportable-runtime -mno-space-regs
d50 1
a50 2
STRIPFLAGS=	-g

d79 1
a79 1
HOSTED_CC=	${HOSTCC}
d83 3
d108 1
a108 1
HOSTED_C=	${HOSTED_CC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d116 2
a117 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT} ${LIBSPMATH}
d137 2
a138 2
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${HPPA}/hppa/genassym.cf > assym.h.tmp && \
a177 1
depend:: .depend
a217 2

.endif
@


1.9.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.10 2002/01/04 08:51:55 miod Exp $
d26 13
a38 1
AS?=	as
d40 1
a40 1
CPP?=	cpp
a42 1
SIZE?=	size
d44 1
d47 2
a48 4
.ifndef S
S!=	cd ../../../..; pwd
.endif
HPPA=	$S/arch/hppa
d51 1
a51 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL \
		-Dhppa
d54 2
a55 3
CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs
COPTS?=		-O2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS}
d58 2
a59 1
STRIPFLAGS=	-g -X -x
d88 1
a88 1
HOSTCC?=	${CC}
a91 3
# this line must be there because libkern needs assym.h generated early
depend:: .NOTMAIN .depend

d114 1
a114 1
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d122 1
a122 2
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} \
		${LIBKERN} ${LIBCOMPAT} ${LIBSPMATH}
d142 2
a143 2
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${HPPA}/hppa/genassym.cf > assym.h.tmp && \
d183 1
d224 2
@


1.9.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.9.4.1 2002/01/31 22:55:08 niklas Exp $
d46 1
a46 1
COPTS?=		-Os
a203 1
fpemu.o: assym.h
@


1.9.4.3
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.9.4.2 2002/06/11 03:35:36 art Exp $
d47 1
a47 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
d49 2
a50 2
LINKFLAGS=	-X -T ${HPPA}/conf/ld.script -Ttext 80000 -Map bsd.map
STRIPFLAGS=	-g -x
d56 1
a56 1
.if ${IDENT:M-DHP7000_CPU} != ""
d126 1
d136 1
a136 1
assym.h: $S/kern/genassym.sh ${HPPA}/hppa/genassym.cf Makefile
@


1.9.4.4
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d26 4
d45 1
a45 2
CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs \
		-fno-stack-protector
d57 1
a57 1
CFLAGS+=	-mpa-risc-1-0
a66 2
.else
CFLAGS+=	-mschedule=700
@


1.8
log
@separate spmath build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.7 1999/12/20 14:19:25 mickey Exp $
d24 2
d210 12
@


1.8.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.8 2000/01/11 21:26:23 mickey Exp $
a23 2
.include <bsd.own.mk>

a207 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.8.2.2
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
d26 13
a38 1
AS?=	as
d40 1
a40 1
CPP?=	cpp
a42 1
SIZE?=	size
d44 1
d47 2
a48 4
.ifndef S
S!=	cd ../../../..; pwd
.endif
HPPA=	$S/arch/hppa
d51 1
a51 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL \
		-Dhppa
d54 2
a55 3
CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs
COPTS?=		-O2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS}
d58 2
a59 1
STRIPFLAGS=	-g -X -x
d88 1
a88 1
HOSTCC?=	${CC}
a91 3
# this line must be there because libkern needs assym.h generated early
depend:: .NOTMAIN .depend

d114 1
a114 1
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d122 1
a122 2
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} \
		${LIBKERN} ${LIBCOMPAT} ${LIBSPMATH}
d142 2
a143 2
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${HPPA}/hppa/genassym.cf > assym.h.tmp && \
d183 1
a209 1
fpemu.o: assym.h
d224 2
@


1.8.2.3
log
@Merge in -current from about a week ago
@
text
@d46 1
a46 1
COPTS?=		-Os
@


1.8.2.4
log
@Sync the SMP branch with 3.3
@
text
@d26 4
d45 1
a45 2
CMACHFLAGS=	-mfast-indirect-calls -mportable-runtime -mno-space-regs \
		-fno-stack-protector
d47 1
a47 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
d49 2
a50 2
LINKFLAGS=	-X -T ${HPPA}/conf/ld.script -Ttext 80000 -Map bsd.map
STRIPFLAGS=	-g -x
d56 1
a56 1
.if ${IDENT:M-DHP7000_CPU} != ""
d126 1
d136 1
a136 1
assym.h: $S/kern/genassym.sh ${HPPA}/hppa/genassym.cf Makefile
@


1.8.2.5
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.8.2.4 2003/03/27 23:26:53 niklas Exp $
d54 1
a54 1
CFLAGS+=	-mpa-risc-1-0
a63 2
.else
CFLAGS+=	-mschedule=700
@


1.8.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.8.2.5 2003/05/13 19:41:03 ho Exp $
d160 1
a160 1
	    ${CFILES} ioconf.c param.c | \
@


1.8.2.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
d42 1
a42 1
		-fno-stack-protector -fno-builtin-printf -fno-builtin-log
d46 1
a46 1
LINKFLAGS=	-X -T ${HPPA}/conf/ld.script -Ttext 80000 --warn-common
d184 1
a184 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.7
log
@machine is hppa; in cross case, define LORDER too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.6 1999/06/22 17:32:56 mickey Exp $
d78 6
d120 1
a120 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.6
log
@all kinds of tricks w/ gcc flags
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.5 1999/02/25 16:42:43 mickey Exp $
d29 2
a30 2
	MACHINE="hp700" MACHINE_ARCH="hppa" AR=$$CBIN/ar AS=$$CBIN/as \
	CC=$$CBIN/cc HOSTCC=cc LD=$$CBIN/ld NM=$$CBIN/nm \
@


1.5
log
@specify text start through the -Ttext, fix ld.script accordingly
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.4 1998/12/23 17:48:46 mickey Exp $
d42 1
a42 1
COPTS?=		-O2
d52 2
a53 2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} -msoft-float -mdisable-fpregs \
		-mpa-risc-1-0 -mfast-indirect-calls -mportable-runtime
d55 24
a78 2
LINKFLAGS=	-T ${HPPA}/conf/ld.script -Ttext 12000
STRIPFLAGS=	-g -X -x
d112 1
a112 1
#%SFILES
d154 1
a154 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
@


1.4
log
@less files and options (;
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.3 1998/10/30 19:45:35 mickey Exp $
d53 1
a53 1
		-mfast-indirect-calls -mpa-risc-1-0 -mportable-runtime
d55 1
a55 1
LINKFLAGS=	-T ${HPPA}/conf/ld.script
@


1.3
log
@use ld.script, cleanup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.2 1998/07/07 20:51:01 mickey Exp $
d49 1
a49 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -Dhppa \
		-DBFD_SUBSPA_BUG
@


1.2
log
@add some options; s/size/\${SIZE}/
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.hppa,v 1.1 1998/07/02 20:48:43 mickey Exp $
d24 1
a24 1
.if ${MACHINE} != "hppa"
d29 1
a29 1
	MACHINE="hppa" MACHINE_ARCH="hp700" AR=$$CBIN/ar AS=$$CBIN/as \
d56 2
a57 2
LINKFLAGS=	-x -N -Ttext 12000 -e start
STRIPFLAGS=	-d
d93 1
a93 7
# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_OBJ=	locore.o ${FPSP} \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.1
log
@some config(8) stuff
@
text
@d1 1
a1 1
#	$OpenBSD$
d53 2
a54 2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} -msoft-float \
		-mfast-indirect-calls -mpa-risc-1-0
d56 1
a56 1
LINKFLAGS=	-n -Ttext 0 -e start
d104 1
a104 1
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@
@

