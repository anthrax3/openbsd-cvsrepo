head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.54
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.52
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.48
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.46
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.38
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.42
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.40
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	UBC_SYNC_B:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	UBC:1.2.0.6
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.7
date	2004.10.05.19.27.55;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.07.18.24.19;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.15.23.42.46;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.31.22.50.19;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.08.22.27.17;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.18.00.19.45;	author mickey;	state Exp;
branches
	1.2.2.1
	1.2.6.1;
next	1.1;

1.1
date	2002.03.15.22.50.05;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2003.03.27.23.26.54;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.06.05.23.10.48;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.35.37;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.05.19.21.49.41;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@kill unneeded includes
@
text
@/*	$OpenBSD: wscons_machdep.c,v 1.6 2004/04/07 18:24:19 mickey Exp $	*/

/*
 * Copyright (c) 2002-2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>

#include <dev/cons.h>

#include "wsdisplay.h"
#if NWSDISPLAY > 0
#include <dev/wscons/wsdisplayvar.h>
#endif

#include "wskbd.h"
#if NWSKBD > 0
#include <dev/wscons/wskbdvar.h>
#endif

cons_decl(ws);

void
wscnprobe(struct consdev *cp)
{
	/*
	 * Due to various device probe restrictions, the wscons console
	 * can never be enabled early during boot.
	 * It will be enabled as soon as enough wscons components get
	 * attached.
	 * So do nothing there, the switch will occur in
	 * wsdisplay_emul_attach() later.
	 */
}

void
wscninit(struct consdev *cp)
{
}

void
wscnputc(dev_t dev, int i)
{
#if NWSDISPLAY > 0
	wsdisplay_cnputc(dev, i);
#endif
}

int
wscngetc(dev_t dev)
{
#if NWSKBD > 0
	return (wskbd_cngetc(dev));
#else
	return (0);
#endif
}

void
wscnpollc(dev_t dev, int on)
{
#if NWSKBD > 0
	wskbd_cnpollc(dev, on);
#endif
}
@


1.6
log
@update copyright; miod@@ is fine w/ files where he holds it too
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2003/02/15 23:42:46 miod Exp $	*/
a32 7
#include <sys/device.h>
#include <sys/extent.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/pdc.h>
#include <machine/iomod.h>
@


1.5
log
@Rework the console management on hppa:
- only attach a keyboard as a console if it matches the PDC keyboard path
- on hil, as there can be multiple keyboards on the loop, attach only the
  first hilkbd device configured as console keyboard. Right now this means
  the one with the lowest hil code, which was the existing behaviour so far.
- do not try to switch to the wscons consdev structure early at all in
  wscons_machdep, but rather wait for the console to be completely
  configured (i.e. both wskbd and wsdisplay are attached) to switch.

With feedback and help from mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.4 2003/01/31 22:50:19 miod Exp $	*/
d4 1
a4 1
 * Copyright (c) 2002 Michael Shalayeff
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@Enter gsckbc, a driver for the ps/2-like input device ports found on many
hppa machines, and gsckbd, a driver for the ps/2-like keyboard.

Both are derived from pckbc and pckbd, but the differences in port wiring and
keyboard behaviour prevented the creation of a thin pckbc wrapper.

Currently, only us and uk keyboard layouts are provided.

The adventurous person can enable gsckb[cd], wsdisplay at sti and wskbd,
but this will only work correctly on machines featuring a modern-prom sti
graphics device, and a ps/2 keyboard port.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.3 2002/11/08 22:27:17 mickey Exp $	*/
d41 1
a47 9
#include "sti.h"
#if NSTI > 0
#include <dev/ic/stireg.h>
#include <dev/ic/stivar.h>
#endif

#if NGSCKBD > 0
#endif

d61 1
a61 2
wscnprobe(cp)
	struct consdev *cp;
d63 8
a70 29
	int maj;

	/* locate the major number */
	for (maj = 0; maj < nchrdev; maj++)
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;

	if (maj == nchrdev)
		panic("wsdisplay is not in cdevsw[]");

#if NSTI > 0
	if (PAGE0->mem_cons.pz_class == PCL_DISPL) {

	} else
		return;
#else
	return;
#endif
#if NGSCKBD > 0
	if (PAGE0->mem_kbd.pz_class == PCL_KEYBD) {

	} else
		return;
#else
	return;
#endif

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_INTERNAL;
d74 1
a74 2
wscninit(cp)
	struct consdev *cp;
d79 1
a79 3
wscnputc(dev, i)
	dev_t dev;
	char i;
d81 3
a83 1
	wsdisplay_cnputc(dev, (int)i);
d87 1
a87 2
wscngetc(dev)
	dev_t dev;
d97 1
a97 3
wscnpollc(dev, on)
	dev_t dev;
	int on;
@


1.3
log
@hmm, todos seem to be unapplicable no more
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.2 2002/03/18 00:19:45 mickey Exp $	*/
d53 1
a53 3
#include "ps2p.h"
#if NPS2P > 0
#include <hppa/gsc/ps2pvar.h>
d90 1
a90 1
#if NPS2P > 0
@


1.2
log
@no keyboard -- no cry
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.1 2002/03/15 22:50:05 mickey Exp $	*/
a83 1
	/* TODO check the page0 console path */
d95 1
a95 2
	}
	else
a108 1
	/* TODO map the page0's console/keyboard devices */
@


1.2.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a40 1
#include <machine/autoconf.h>
d47 11
d71 2
a72 1
wscnprobe(struct consdev *cp)
d74 31
a104 8
	/*
	 * Due to various device probe restrictions, the wscons console
	 * can never be enabled early during boot.
	 * It will be enabled as soon as enough wscons components get
	 * attached.
	 * So do nothing there, the switch will occur in
	 * wsdisplay_emul_attach() later.
	 */
d108 2
a109 1
wscninit(struct consdev *cp)
d111 1
d115 3
a117 1
wscnputc(dev_t dev, int i)
d119 1
a119 3
#if NWSDISPLAY > 0
	wsdisplay_cnputc(dev, i);
#endif
d123 2
a124 1
wscngetc(dev_t dev)
d134 3
a136 1
wscnpollc(dev_t dev, int on)
@


1.2.2.2
log
@Merge with the trunk
@
text
@d4 1
a4 1
 * Copyright (c) 2002-2004 Michael Shalayeff
d15 5
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.6.2
log
@sync
@
text
@a40 1
#include <machine/autoconf.h>
d47 11
d71 2
a72 1
wscnprobe(struct consdev *cp)
d74 31
a104 8
	/*
	 * Due to various device probe restrictions, the wscons console
	 * can never be enabled early during boot.
	 * It will be enabled as soon as enough wscons components get
	 * attached.
	 * So do nothing there, the switch will occur in
	 * wsdisplay_emul_attach() later.
	 */
d108 2
a109 1
wscninit(struct consdev *cp)
d111 1
d115 3
a117 1
wscnputc(dev_t dev, int i)
d119 1
a119 3
#if NWSDISPLAY > 0
	wsdisplay_cnputc(dev, i);
#endif
d123 2
a124 1
wscngetc(dev_t dev)
d134 3
a136 1
wscnpollc(dev_t dev, int on)
@


1.1
log
@here will be a wscons-garden
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d126 1
d128 3
d138 1
d140 1
@

