head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2017.07.16.22.48.38;	author guenther;	state Exp;
branches;
next	1.11;
commitid	gJ05SjEAqicDSfuJ;

1.11
date	2017.05.29.14.19.49;	author mpi;	state Exp;
branches;
next	1.10;
commitid	4u6PWvBw90PH7UDq;

1.10
date	2017.04.30.16.45.45;	author mpi;	state Exp;
branches;
next	1.9;
commitid	2Gtqjzrin9LL2yHk;

1.9
date	2016.03.19.11.34.22;	author mpi;	state Exp;
branches;
next	1.8;
commitid	15xZY6veDWwRM6Iq;

1.8
date	2015.02.11.01.58.57;	author dlg;	state Exp;
branches;
next	1.7;
commitid	jWKj5kJJfjWkYGfv;

1.7
date	2014.09.22.12.12.23;	author dlg;	state Exp;
branches;
next	1.6;
commitid	110ZOYfYFru8WqOb;

1.6
date	2014.06.17.00.00.48;	author tobiasu;	state Exp;
branches;
next	1.5;
commitid	vSVJxaxGkk1ItEjd;

1.5
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2013.12.05.01.28.45;	author uebayasi;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.12.21.11.12;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.17.11.25.08;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.14.26.21;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add WITNESS support
ok visa@@ kettenis@@
@
text
@/*	$OpenBSD: lock_machdep.c,v 1.11 2017/05/29 14:19:49 mpi Exp $	*/

/*
 * Copyright (c) 2007 Artur Grabowski <art@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/witness.h>
#include <sys/_lock.h>

#include <machine/atomic.h>
#include <machine/intr.h>
#include <machine/psl.h>
#include <machine/cpu.h>

#include <ddb/db_output.h>

static __inline int
__cpu_cas(struct __mp_lock *mpl, volatile unsigned long *addr,
    unsigned long old, unsigned long new)
{
	volatile int *lock = (int *)(((vaddr_t)mpl->mpl_lock + 0xf) & ~0xf);
	volatile register_t old_lock = 0;
	int ret = 1;

	/* Note: lock must be 16-byte aligned. */
	asm volatile (
		"ldcws      0(%2), %0"
		: "=&r" (old_lock), "+m" (lock)
		: "r" (lock)
	);

	if (old_lock == MPL_UNLOCKED) {
		if (*addr == old) {
			*addr = new;
			asm("sync" ::: "memory");
			ret = 0;
		}
		*lock = MPL_UNLOCKED;
	}

	return ret;
}

void
___mp_lock_init(struct __mp_lock *lock)
{
	lock->mpl_lock[0] = MPL_UNLOCKED;
	lock->mpl_lock[1] = MPL_UNLOCKED;
	lock->mpl_lock[2] = MPL_UNLOCKED;
	lock->mpl_lock[3] = MPL_UNLOCKED;
	lock->mpl_cpu = NULL;
	lock->mpl_count = 0;
}

#if defined(MP_LOCKDEBUG)
#ifndef DDB
#error "MP_LOCKDEBUG requires DDB"
#endif

/* CPU-dependent timing, this needs to be settable from ddb. */
extern int __mp_lock_spinout;
#endif

static __inline void
__mp_lock_spin(struct __mp_lock *mpl)
{
#ifndef MP_LOCKDEBUG
	while (mpl->mpl_count != 0)
		CPU_BUSY_CYCLE();
#else
	int nticks = __mp_lock_spinout;

	while (mpl->mpl_count != 0 && --nticks > 0)
		CPU_BUSY_CYCLE();

	if (nticks == 0) {
		db_printf("__mp_lock(%p): lock spun out", mpl);
		db_enter();
	}
#endif
}

void
___mp_lock(struct __mp_lock *mpl LOCK_FL_VARS)
{
	int s;

#ifdef WITNESS
	if (!__mp_lock_held(mpl))
		WITNESS_CHECKORDER(&mpl->mpl_lock_obj,
		    LOP_EXCLUSIVE | LOP_NEWORDER, file, line, NULL);
#endif

	/*
	 * Please notice that mpl_count gets incremented twice for the
	 * first lock. This is on purpose. The way we release the lock
	 * in mp_unlock is to decrement the mpl_count and then check if
	 * the lock should be released. Since mpl_count is what we're
	 * spinning on, decrementing it in mpl_unlock to 0 means that
	 * we can't clear mpl_cpu, because we're no longer holding the
	 * lock. In theory mpl_cpu doesn't need to be cleared, but it's
	 * safer to clear it and besides, setting mpl_count to 2 on the
	 * first lock makes most of this code much simpler.
	 */

	while (1) {
		s = hppa_intr_disable();
		if (__cpu_cas(mpl, &mpl->mpl_count, 0, 1) == 0) {
			__asm volatile("sync" ::: "memory");
			mpl->mpl_cpu = curcpu();
		}
		if (mpl->mpl_cpu == curcpu()) {
			mpl->mpl_count++;
			hppa_intr_enable(s);
			break;
		}
		hppa_intr_enable(s);

		__mp_lock_spin(mpl);
	}

	WITNESS_LOCK(&mpl->mpl_lock_obj, LOP_EXCLUSIVE, file, line);
}

void
___mp_unlock(struct __mp_lock *mpl LOCK_FL_VARS)
{
	int s;

#ifdef MP_LOCKDEBUG
	if (mpl->mpl_cpu != curcpu()) {
		db_printf("__mp_unlock(%p): lock not held - %p != %p\n",
		    mpl, mpl->mpl_cpu, curcpu());
		db_enter();
	}
#endif

	WITNESS_UNLOCK(&mpl->mpl_lock_obj, LOP_EXCLUSIVE, file, line);

	s = hppa_intr_disable();
	if (--mpl->mpl_count == 1) {
		mpl->mpl_cpu = NULL;
		__asm volatile("sync" ::: "memory");
		mpl->mpl_count = 0;
	}
	hppa_intr_enable(s);
}

int
___mp_release_all(struct __mp_lock *mpl LOCK_FL_VARS)
{
	int rv = mpl->mpl_count - 1;
	int s;
#ifdef WITNESS
	int i;
#endif

#ifdef MP_LOCKDEBUG
	if (mpl->mpl_cpu != curcpu()) {
		db_printf("__mp_release_all(%p): lock not held - %p != %p\n",
		    mpl, mpl->mpl_cpu, curcpu());
		db_enter();
	}
#endif

#ifdef WITNESS
	for (i = 0; i < rv; i++)
		WITNESS_UNLOCK(&mpl->mpl_lock_obj, LOP_EXCLUSIVE, file, line);
#endif

	s = hppa_intr_disable();
	mpl->mpl_cpu = NULL;
	__asm volatile("sync" ::: "memory");
	mpl->mpl_count = 0;
	hppa_intr_enable(s);

	return (rv);
}

int
___mp_release_all_but_one(struct __mp_lock *mpl LOCK_FL_VARS)
{
	int rv = mpl->mpl_count - 2;
#ifdef WITNESS
	int i;
#endif

#ifdef MP_LOCKDEBUG
	if (mpl->mpl_cpu != curcpu()) {
		db_printf("__mp_release_all_but_one(%p): lock not held - "
		    "%p != %p\n", mpl, mpl->mpl_cpu, curcpu());
		db_enter();
	}
#endif

#ifdef WITNESS
	for (i = 0; i < rv; i++)
		WITNESS_UNLOCK(&mpl->mpl_lock_obj, LOP_EXCLUSIVE, file, line);
#endif

	mpl->mpl_count = 2;

	return (rv);
}

void
___mp_acquire_count(struct __mp_lock *mpl, int count LOCK_FL_VARS)
{
	while (count--)
		___mp_lock(mpl LOCK_FL_ARGS);
}

int
__mp_lock_held(struct __mp_lock *mpl)
{
	return mpl->mpl_cpu == curcpu();
}
@


1.11
log
@Kill SPINLOCK_SPIN_HOOK, use CPU_BUSY_CYCLE() instead.

ok visa@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.10 2017/04/30 16:45:45 mpi Exp $	*/
d21 2
d59 1
a59 1
__mp_lock_init(struct __mp_lock *lock)
d98 1
a98 1
__mp_lock(struct __mp_lock *mpl)
d102 6
d135 2
d140 1
a140 1
__mp_unlock(struct __mp_lock *mpl)
d152 2
d164 1
a164 1
__mp_release_all(struct __mp_lock *mpl)
d168 3
d180 5
d195 1
a195 1
__mp_release_all_but_one(struct __mp_lock *mpl)
d198 3
d210 5
d221 1
a221 1
__mp_acquire_count(struct __mp_lock *mpl, int count)
d224 1
a224 1
		__mp_lock(mpl);
@


1.10
log
@Rename Debugger() into db_enter().

Using a name with the 'db_' prefix makes it invisible from the dynamic
profiler.

ok deraadt@@, kettenis@@, visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.9 2016/03/19 11:34:22 mpi Exp $	*/
d25 1
a75 2
#define SPINLOCK_SPIN_HOOK	/**/

d81 1
a81 1
		SPINLOCK_SPIN_HOOK;
d86 1
a86 1
		SPINLOCK_SPIN_HOOK;
@


1.9
log
@Reduces the noise around the global ``ticks'' variable by renaming
all the local ones to ``nticks''.

ok stefan@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.8 2015/02/11 01:58:57 dlg Exp $	*/
d91 1
a91 1
		Debugger();
d139 1
a139 1
		Debugger();
d162 1
a162 1
		Debugger();
d184 1
a184 1
		Debugger();
@


1.8
log
@sys/lock.h and machine/lock.h dont provide anything this code uses.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.7 2014/09/22 12:12:23 dlg Exp $	*/
d84 1
a84 1
	int ticks = __mp_lock_spinout;
d86 1
a86 1
	while (mpl->mpl_count != 0 && --ticks > 0)
d89 1
a89 1
	if (ticks == 0) {
@


1.7
log
@implement atomic_{cas,swap}_{uint,ulong,ptr} and
atomic_{add,sub}_{int,long}_nv. sys/atomic.h turns these into the
rest of the atomic api.

on uniprocessor hppa systems "atomic" operations are implemented
as a non-interruptable sequence by disabling all interrupts on the
cpu, doing the operation, and then restoring the interrupt mask.

this isnt enough on MP systems, so we added a global atomic memory
mutex that is taken inside the interrupt disabling above to coordinate
operations between cpus.

this is a lot of overhead though cos mutexes dance around with ipls,
which is unecessary in our case because of the interrupt disabling
that is already done. also, hppa spinlocks are implemented with
ldcw which requires the word it operates on to be 16 byte aligned.
mutexes arent guaranteed to have this alignment so they compensate
by having lots of words inside themselves so they can hit the
appropriate one to use for the ldcw op.

with this in mind, this change pulls __cpu_simple_locks, which are
simply ldcw spinlocks with a 16 byte aligned word, out of
src/sys/arch/hppa/include/lock.h into src/sys/arch/hppa/include/atomic.h
so atomic.h can use them. lock.h includes atomic.h, so it still
gets and provides the same functionality as before.

finally, this also pulls the rwlock cas implementation apart. cas
ops now share the same serialising lock on MP systems as the other
memory operations, and rw_cas is defined as a wrapper around
atomic_cas_uint.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.6 2014/06/17 00:00:48 tobiasu Exp $	*/
a19 1
#include <sys/lock.h>
a23 1
#include <machine/lock.h>
@


1.6
log
@Fix format string under MP_LOCKDEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.5 2014/03/29 18:09:29 guenther Exp $	*/
a205 28
}

/*
 * Emulate a compare-and-swap instruction for rwlocks, by using a
 * __cpu_simple_lock as a critical section.
 *
 * Since we are only competing against other processors for rwlocks,
 * it is not necessary in this case to disable interrupts to prevent
 * reentrancy on the same processor.
 */

__cpu_simple_lock_t rw_cas_spinlock = __SIMPLELOCK_UNLOCKED;

int
rw_cas_hppa(volatile unsigned long *p, unsigned long o, unsigned long n)
{
	int rc = 0;

	__cpu_simple_lock(&rw_cas_spinlock);

	if (*p != o)
		rc = 1;
	else
		*p = n;

	__cpu_simple_unlock(&rw_cas_spinlock);

	return (rc);
@


1.5
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.4 2013/12/05 01:28:45 uebayasi Exp $	*/
d92 1
a92 1
		db_printf("__mp_lock(0x%x): lock spun out", mpl);
@


1.4
log
@Correct spin timeout detection in __mp_lock debug code.

OK pirofti@@ krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d118 1
a118 1
			__asm __volatile("sync" ::: "memory");
d148 1
a148 1
		__asm __volatile("sync" ::: "memory");
d170 1
a170 1
	__asm __volatile("sync" ::: "memory");
@


1.3
log
@Provide a specific rw_cas() function for MP kernels; stolen from m88k.

ok jsing@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.2 2010/05/17 11:25:08 jsing Exp $	*/
d88 1
a88 1
	while (mpl->mpl_count != 0 && ticks-- > 0)
@


1.2
log
@Fix locking logic, remembering that hppa locks are inverted. Whilst here
also add mpl_cpu and curcpu() to the debugging messages.

Issue spotted by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.1 2010/03/25 14:26:21 jsing Exp $	*/
d206 28
@


1.1
log
@Add MP lock support for OpenBSD/hppa.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.1 2007/11/27 23:29:57 kettenis Exp $	*/
d35 1
a35 1
	volatile register_t locked = 0;
d41 1
a41 1
		: "=&r" (locked), "+m" (lock)
d45 1
a45 1
	if (locked == MPL_LOCKED) {
d139 2
a140 1
		db_printf("__mp_unlock(%p): not held lock\n", mpl);
d162 2
a163 1
		db_printf("__mp_release_all(%p): not held lock\n", mpl);
d184 2
a185 1
		db_printf("__mp_release_all_but_one(%p): not held lock\n", mpl);
@

