head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.32
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.30
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.26
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.22
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.24
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.16
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.20
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.18
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.14
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.12
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.10
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.8
	OPENBSD_5_0:1.13.0.6
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.4
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.12.0.22
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.24
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.20
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.18
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.16
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.7
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.2
	SMP_BASE:1.2;
locks; strict;
comment	@# @;


1.13
date	2010.05.25.15.57.48;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.02.18.31.14;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.21.07.36.03;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.07.18.24.19;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.02.20.56.31;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.10.17.27.58;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.07.14.38.34;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.15.09.34.09;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.20.03.46.53;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.29.02.18.45;	author mickey;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2001.03.29.00.05.19;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.11.10.14.22;	author mickey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.01.11.09.47.25;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2001.04.18.16.06.09;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.03.27.23.26.53;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.05.13.19.41.03;	author ho;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2004.06.05.23.10.48;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.35.37;	author art;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.10.29.00.28.02;	author art;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2003.05.19.21.49.41;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Use token paste operator to avoid nested __CONCAT() macros. This allows
the code to compile without -traditional-cpp.

ok kettenis@@
@
text
@/*	$OpenBSD: fpemu.S,v 1.11 2004/04/21 07:36:03 mickey Exp $	*/

/*
 * Copyright (c) 2000-2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <machine/asm.h>
#include <machine/cpu.h>
#include "assym.h"

#define	FPEMU_VERSION	(1 << 11)

#define	FP_TABLE2(name,ep0,ep1,ep2,ep3) \
	ldil	L%$fpemu_tbl$name, t1			! \
	ldo	R%$fpemu_tbl$name(t1), t1		! \
	ldwx,s	r1(t1), t2				! \
	bv	r0(t2)					! \
	copy	r0, ret0				! \
	.label $fpemu_tbl$name				! \
	.import	ep0##_##name, code			! \
	.import	ep1##_##name, code			! \
	.import	ep2##_##name, code			! \
	.import	ep3##_##name, code			! \
	.word	ep0##_##name, ep1##_##name, ep2##_##name, ep3##_##name

#define	FP_TABLE3(name,ep0,ep1,ep2,ep3,ep4,ep5,ep6,ep7,ep8,ep9,epa,epb,epc,epd,epe,epf) \
	ldil	L%$fpemu_tbl$name, t1			! \
	ldo	R%$fpemu_tbl$name(t1), t1		! \
	ldwx,s	r1(t1), t2				! \
	bv	r0(t2)					! \
	nop						! \
	.label	$fpemu_tbl$name				! \
	.import	ep0##_##name, code			! \
	.import	ep1##_##name, code			! \
	.import	ep2##_##name, code			! \
	.import	ep3##_##name, code			! \
	.import	ep4##_##name, code			! \
	.import	ep5##_##name, code			! \
	.import	ep6##_##name, code			! \
	.import	ep7##_##name, code			! \
	.import	ep8##_##name, code			! \
	.import	ep9##_##name, code			! \
	.import	epa##_##name, code			! \
	.import	epb##_##name, code			! \
	.import	epc##_##name, code			! \
	.import	epd##_##name, code			! \
	.import	epe##_##name, code			! \
	.import	epf##_##name, code			! \
	.word	ep0##_##name, ep1##_##name, ep2##_##name, ep3##_##name, \
		ep4##_##name, ep5##_##name, ep6##_##name, ep7##_##name, \
		ep8##_##name, ep9##_##name, epa##_##name, epb##_##name, \
		epc##_##name, epe##_##name, epf##_##name 

	.text
/*
 * fpu_emulate(iir,0,fpregs)
 */
LEAF_ENTRY(fpu_emulate)

	copy	arg0, t4
	extru	arg0, 18, 3, r31
	extru	arg0, 20, 2, r1
	extru	arg0, 22, 2, t3
	subi,<>	1, t3, r0
	extru	arg0, 16, 2, r31

	/*
	 * theoreticaly we would need to determine the fpu instruction
	 * exception type (there could be 4 of those, but stick w/
	 * non-timex fpus for now.
	 */
	extru,<> arg0, 10, 5, t1
	ldi	32, t1	/* fpemu zero reg */
	extru,<> arg0, 31, 5, t2
	b,n	$fpemu_nzt
	nop
	/*comib,=,n 2, t3, $fpemu_exit*/
	nop
$fpemu_nzt
	/*
	 * arg0 -- source register (address)
	 * arg1 -- fpregs context
	 * arg2 -- target register (address)
	 * arg3 -- fpregs context
	 * t3 -- class
	 * r31 -- subop
	 * r1 -- format specifier
	 * (t4 -- copy of arg0, ie iir)
	 */
	copy	arg2, arg3
	copy	arg2, arg1
	sh3add	t1, arg2, arg0
	sh3add	t2, arg2, arg2
	stw	r0, 32*8+0(arg1)	/* make sure zero reg is zero */
	stw	r0, 32*8+4(arg1)

	extru,=	t4, 24, 1, r0		/* adjust for the L in source */
	addi	4, arg0, arg0

	comib,=,n 2, t3, $fpemu0c_2
	nop

	extru,=	t4, 24, 1, r0		/* adjust for the L in target */
	addi	4, arg2, arg2

	comib,=,n 0, t3, $fpemu0c_0
	comib,=,n 1, t3, $fpemu0c_1
	comib,=,n 3, t3, $fpemu0c_3

$fpemu0c_0
	comib,=,n 2, r1, $fpemu_exit

	comib,=,n 0, r31, $fpemu0c_0_0
	comib,=,n 1, r31, $fpemu_exit
	comib,=,n 2, r31, $fpemu0c_0_2
	comib,=,n 3, r31, $fpemu0c_0_3
	comib,=,n 4, r31, $fpemu0c_0_4
	comib,=,n 5, r31, $fpemu0c_0_5
	comib,=,n 6, r31, $fpemu_exit
	comib,=,n 7, r31, $fpemu_exit

$fpemu0c_0_0
	ldi	FPEMU_VERSION, t4
	stw	t4, 0(arg3)
	bv	0(rp)
	copy	r0, ret0

$fpemu0c_0_2	/* fcpy */
	subi	3, r1, r1
	ldw	0*4(arg0), t1
	ldw	1*4(arg0), t2
	ldw	2*4(arg0), t3
	blr,n	r1, r0
	ldw	3*4(arg0), t4
	stw	t3, 2*4(arg2)
	stw	t4, 3*4(arg2)
	nop
	nop
	nop
	stw	t2, 1*4(arg2)
	stw	t1, 0*4(arg2)
	bv	0(rp)
	copy	r0, ret0

$fpemu0c_0_3	/* fabs */
	subi	3, r1, r1
	ldw	0*4(arg0), t1
	ldw	1*4(arg0), t2
	ldw	2*4(arg0), t3
	ldw	3*4(arg0), t4
	blr,n	r1, r0
	depi	0, 0, 1, t1
	stw	t3, 2*4(arg2)
	stw	t4, 3*4(arg2)
	nop
	nop
	nop
	stw	t2, 1*4(arg2)
	stw	t1, 0*4(arg2)
	bv	0(rp)
	copy	r0, ret0

$fpemu0c_0_4	/* fsqrt */
	/* quad not implemented */
	FP_TABLE2(fsqrt,sgl,dbl,invalid,invalid)

$fpemu0c_0_5	/* frnd */
	/* quad not implemented */
	FP_TABLE2(frnd,sgl,dbl,invalid,quad)

$fpemu0c_1
	extru	t4, 20, 4, r1
	comib,=,n 0, r31, $fpemu0c_1_0
	comib,=,n 1, r31, $fpemu0c_1_1
	comib,=,n 2, r31, $fpemu0c_1_2
	comib,=,n 3, r31, $fpemu0c_1_3

$fpemu0c_1_0	/* fcnvff */
	FP_TABLE3(fcnvff, invalid, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, invalid, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, invalid)

$fpemu0c_1_1	/* fcnvxf */
	FP_TABLE3(fcnvxf, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)

$fpemu0c_1_2	/* fcnvfx */
	FP_TABLE3(fcnvfx, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)

$fpemu0c_1_3	/* fcnvfxt */
	FP_TABLE3(fcnvfxt, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)

$fpemu0c_2
	comib,=,n 1, r31, $fpemu0c_2_1
	comib,<>,n 0, r31, $fpemu_exit

$fpemu0c_2_0
	extru,<> t4, 15, 5, t1
	ldi	32, t1
	sh3add	t1, arg3, arg1
	extru,=	t4, 19, 1, r0	/* see if it's the L reg */
	addi	4, arg1, arg1
	extru	t4, 31, 5, arg2
	FP_TABLE2(fcmp,sgl,dbl,invalid,invalid)

$fpemu0c_2_1
	comib,<>,n 0, r1, $fpemu_exit

	/* XXX timex is much more compilicated */
	ldw	0(arg3), t1
	ldi	0, ret0
	extru,<> t1, 5, 1, r0
	bv,n	r0(rp)

	/* advance the pcqueue */
	mtctl	r0, pcsq
	mfctl	pcsq, t2
	mtctl	t2, pcsq
	mtctl	t2, pcsq
	mtctl	r0, pcoq
	mfctl	pcoq, t2
	mtctl	t2, pcoq
	ldo	4(t2), t2
	bv	r0(rp)
	mtctl	t2, pcoq

$fpemu0c_3
	extru,<> t4, 15, 5, t1
	ldi	32, t1
	extru,=	t4, 19, 1, r0	/* see if it's the L reg */
	addi	4, arg1, arg1
	blr	r31, r0
	nop

	b	$fpemu0c_3_0
	sh3add	t1, arg1, arg1
	b	$fpemu0c_3_1
	sh3add	t1, arg1, arg1
	b	$fpemu0c_3_2
	sh3add	t1, arg1, arg1
	b	$fpemu0c_3_3
	sh3add	t1, arg1, arg1
	b	$fpemu0c_3_4
	sh3add	t1, arg1, arg1
	b	$fpemu_exit
	sh3add	t1, arg1, arg1
	b	$fpemu_exit
	sh3add	t1, arg1, arg1
	b	$fpemu_exit
	sh3add	t1, arg1, arg1

$fpemu0c_3_0	/* fadd */
	FP_TABLE2(fadd,sgl,dbl,invalid,invalid)

$fpemu0c_3_1	/* fsub */
	FP_TABLE2(fsub,sgl,dbl,invalid,invalid)

$fpemu0c_3_2	/* fmpy/xmpy */
	bb,>=	t4, 23, $fpemu0c_3_2_f
	nop

	FP_TABLE2(xmpy,s,u,s,u)
$fpemu0c_3_2_f
	FP_TABLE2(fmpy,sgl,dbl,invalid,invalid)

$fpemu0c_3_3	/* fdiv */
	FP_TABLE2(fdiv,sgl,dbl,invalid,invalid)

$fpemu0c_3_4	/* frem */
	FP_TABLE2(frem,sgl,dbl,invalid,invalid)

	.export	$fpemu_exit, code
$fpemu_exit
	/* these look very ugly, but we don't want to mess up w/ m4 just
	 * for the sake of overall world prettieness value growth XXX */
invalid_fsqrt
invalid_frnd
invalid_fcnvff
sgl_to_quad_fcnvff
dbl_to_quad_fcnvff
quad_to_sgl_fcnvff
quad_to_dbl_fcnvff
invalid_fcnvxf
sgl_to_quad_fcnvxf
dbl_to_quad_fcnvxf
quad_to_sgl_fcnvxf
quad_to_dbl_fcnvxf
quad_to_quad_fcnvxf
invalid_fcnvfx
sgl_to_quad_fcnvfx
dbl_to_quad_fcnvfx
quad_to_sgl_fcnvfx
quad_to_dbl_fcnvfx
quad_to_quad_fcnvfx
invalid_fcnvfxt
sgl_to_quad_fcnvfxt
dbl_to_quad_fcnvfxt
quad_to_sgl_fcnvfxt
quad_to_dbl_fcnvfxt
quad_to_quad_fcnvfxt
invalid_fcmp
invalid_fadd
invalid_fsub
invalid_fmpy
invalid_fdiv
invalid_frem
	bv	0(rp)
	ldi	HPPA_FPU_ILL, ret0
EXIT(fpu_emulate)

	.end
@


1.12
log
@fix for broken cpp in gcc3
@
text
@d42 5
a46 5
	.import	__CONCAT(__CONCAT(ep0,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep1,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep2,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep3,_),name), code	! \
	.word	__CONCAT(__CONCAT(ep0,_),name),	__CONCAT(__CONCAT(ep1,_),name),	__CONCAT(__CONCAT(ep2,_),name),	__CONCAT(__CONCAT(ep3,_),name)
d55 20
a74 17
	.import	__CONCAT(__CONCAT(ep0,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep1,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep2,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep3,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep4,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep5,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep6,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep7,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep8,_),name), code	! \
	.import	__CONCAT(__CONCAT(ep9,_),name), code	! \
	.import	__CONCAT(__CONCAT(epa,_),name), code	! \
	.import	__CONCAT(__CONCAT(epb,_),name), code	! \
	.import	__CONCAT(__CONCAT(epc,_),name), code	! \
	.import	__CONCAT(__CONCAT(epd,_),name), code	! \
	.import	__CONCAT(__CONCAT(epe,_),name), code	! \
	.import	__CONCAT(__CONCAT(epf,_),name), code	! \
	.word	__CONCAT(__CONCAT(ep0,_),name),	__CONCAT(__CONCAT(ep1,_),name),	__CONCAT(__CONCAT(ep2,_),name), __CONCAT(__CONCAT(ep3,_),name), __CONCAT(__CONCAT(ep4,_),name), __CONCAT(__CONCAT(ep5,_),name), __CONCAT(__CONCAT(ep6,_),name), __CONCAT(__CONCAT(ep7,_),name), __CONCAT(__CONCAT(ep8,_),name), __CONCAT(__CONCAT(ep9,_),name), __CONCAT(__CONCAT(epa,_),name), __CONCAT(__CONCAT(epb,_),name), __CONCAT(__CONCAT(epc,_),name), __CONCAT(__CONCAT(epd,_),name), __CONCAT(__CONCAT(epe,_),name), __CONCAT(__CONCAT(epf,_),name)
@


1.11
log
@fix fcmp parsing
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.10 2004/04/07 18:24:19 mickey Exp $	*/
a197 4
#define	sgl_to_quad_fcnvff	invalid_fcnvff
#define	dbl_to_quad_fcnvff	invalid_fcnvff
#define	quad_to_sgl_fcnvff	invalid_fcnvff
#define	quad_to_dbl_fcnvff	invalid_fcnvff
a200 5
#define	sgl_to_quad_fcnvxf	invalid_fcnvxf
#define	dbl_to_quad_fcnvxf	invalid_fcnvxf
#define	quad_to_sgl_fcnvxf	invalid_fcnvxf
#define	quad_to_dbl_fcnvxf	invalid_fcnvxf
#define	quad_to_quad_fcnvxf	invalid_fcnvxf
a203 5
#define	sgl_to_quad_fcnvfx	invalid_fcnvfx
#define	dbl_to_quad_fcnvfx	invalid_fcnvfx
#define	quad_to_sgl_fcnvfx	invalid_fcnvfx
#define	quad_to_dbl_fcnvfx	invalid_fcnvfx
#define	quad_to_quad_fcnvfx	invalid_fcnvfx
a206 5
#define	sgl_to_quad_fcnvfxt	invalid_fcnvfxt
#define	dbl_to_quad_fcnvfxt	invalid_fcnvfxt
#define	quad_to_sgl_fcnvfxt	invalid_fcnvfxt
#define	quad_to_dbl_fcnvfxt	invalid_fcnvfxt
#define	quad_to_quad_fcnvfxt	invalid_fcnvfxt
d295 4
d300 5
d306 5
d312 5
@


1.10
log
@update copyright; miod@@ is fine w/ files where he holds it too
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.9 2004/04/02 20:56:31 mickey Exp $	*/
d238 1
@


1.9
log
@repair fcnv* emulation.
generate proper signals/siginfo.
partially repairs the "otto" case.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.8 2003/04/10 17:27:58 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000,2002 Michael Shalayeff
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d19 8
a26 7
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.8
log
@make all entry points of the same number of arguments and that greatly simplifies the call setup in the scheduler
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.7 2002/10/07 14:38:34 mickey Exp $	*/
d34 1
d100 1
a100 1
	comib,=,n 2, t3, $fpemu_exit
d195 1
a195 1
	extru	t4, 16, 4, r1
d327 1
a327 1
	ldi	1, ret0
@


1.7
log
@on implementations w/ fpu included unimplemented instructions
are signaled through the exception trap w/ invalid opcode marked
instruction in the exception registers, not through the emulation
trap (as long as the fpu is enabled, of  course).
parse emulation from the exception trap as well as the emulation
trap and fix the dispatcher into usable condition.
parse invalid op exception on trap and signal the user appropriately.
reset the exception on exec and for child on fork.
the later is appropriate since exceptions are delayed until next
fpu instruction, which was in the parent indeed, let him get it.
save parent's fpu context on fork before cipying it, if the
parent owned the fpu.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.6 2002/09/15 09:34:09 mickey Exp $	*/
d104 3
a106 2
	 * arg1 -- target register (address)
	 * arg2 -- fpregs context
d112 2
d115 12
a126 3
	sh3add	t2, arg2, arg1
	stw	r0, 32*8+0(arg2)	/* make sure zero reg is zero */
	stw	r0, 32*8+4(arg2)
a129 1
	comib,=,n 2, t3, $fpemu0c_2
d146 1
a146 1
	stw	t4, 0(arg2)
d157 2
a158 2
	stw	t3, 2*4(arg1)
	stw	t4, 3*4(arg1)
d162 2
a163 2
	stw	t2, 1*4(arg1)
	stw	t1, 0*4(arg1)
d175 2
a176 2
	stw	t3, 2*4(arg1)
	stw	t4, 3*4(arg1)
d180 2
a181 2
	stw	t2, 1*4(arg1)
	stw	t1, 0*4(arg1)
a235 1
	copy	arg2, arg3
d238 3
a240 1
	sh3add	t1, arg3, arg2
d247 1
a247 1
	ldw	0(arg2), t1
d267 2
d270 1
a270 1
	copy	arg2, arg3
d273 1
a273 1
	sh3add	t1, arg3, arg2
d275 1
a275 1
	sh3add	t1, arg3, arg2
d277 1
a277 1
	sh3add	t1, arg3, arg2
d279 1
a279 1
	sh3add	t1, arg3, arg2
d281 1
a281 1
	sh3add	t1, arg3, arg2
d283 1
a283 1
	sh3add	t1, arg3, arg2
d285 1
a285 1
	sh3add	t1, arg3, arg2
d287 1
a287 1
	sh3add	t1, arg3, arg2
d295 6
a300 1
$fpemu0c_3_2	/* fmpy */
@


1.6
log
@kill dangling spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.5 2002/05/20 03:46:53 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000 Michael Shalayeff
d38 1
a38 1
#define	FP_TABLE2(name, ep0, ep1, ep2, ep3) \
d43 1
a43 1
	nop						! \
d78 1
a78 1
 * fpu_emulate(iir)
d82 1
a82 1
	extru	arg0, 22, 2, arg3
d84 3
a86 2
	comib,=	1, arg3, $fpu_cln1
	nop
a88 1
$fpu_cln1
d94 3
a96 4
	ldi	1, ret0
	extru,<> arg0, 10, 5, r1
	ldi	32, r1	/* fpemu zero reg */
	extru,<> arg0, 31, 5, t1
d98 3
a100 1
	comib,=,n 2, arg3, $fpemu_exit
a101 5
	copy	arg0, t4
	sh3add	r1, arg2, arg0
	extru	arg1, 20, 2, r1
	sh3add	t1, arg2, arg1

d106 1
a106 1
	 * arg3 -- class
d109 1
a109 1
	 * (t4 -- copy or arg0, ie iir)
d111 9
a119 4
	comib,=,n 0, arg3, $fpemu0c_0
	comib,=,n 1, arg3, $fpemu0c_1
	comib,=,n 2, arg3, $fpemu0c_2
	comib,=,n 3, arg3, $fpemu0c_3
d122 2
a139 1
	comib,=,n 2, r1, $fpemu_exit
d144 1
a145 2
	blr,n	r1, r0
	nop
a147 1
	stw	t2, 1*4(arg1)
d151 1
a156 1
	comib,=,n 2, r1, $fpemu_exit
d162 1
a163 2
	blr,n	r1, r0
	nop
a165 1
	stw	t2, 1*4(arg1)
d169 1
d183 1
a183 2
	extru	t4, 18, 2, t2
	sh2add	r1, t2, r1
d194 1
a194 1
	FP_TABLE3(fcnvff, invalid, sgl_to_dbl, invalid, sgl_to_quad, dbl_to_sgl, invalid, invalid, dbl_to_quad, invalid, invalid, invalid, invalid, quad_to_sgl, quad_to_dbl, invalid, invalid)
d202 1
a202 1
	FP_TABLE3(fcnvxf, sgl_to_sgl, sgl_to_dbl, invalid, sgl_to_quad, dbl_to_sgl, dbl_to_dbl, invalid, dbl_to_quad, invalid, invalid, invalid, invalid, quad_to_sgl, quad_to_dbl, invalid, quad_to_quad)
d210 1
a210 1
	FP_TABLE3(fcnvfx, sgl_to_sgl, sgl_to_dbl, invalid, sgl_to_quad, dbl_to_sgl, dbl_to_dbl, invalid, dbl_to_quad, invalid, invalid, invalid, invalid, quad_to_sgl, quad_to_dbl, invalid, quad_to_quad)
d218 1
a218 2
	FP_TABLE3(fcnvfxt, sgl_to_sgl, sgl_to_dbl, invalid, sgl_to_quad, dbl_to_sgl, dbl_to_dbl, invalid, dbl_to_quad, invalid, invalid, invalid, invalid, quad_to_sgl, quad_to_dbl, invalid, quad_to_quad)

a220 1
	comib,=,n 0, r31, $fpemu0c_2_0
d222 1
a222 6
	comib,=,n 2, r31, $fpemu_exit
	comib,=,n 3, r31, $fpemu_exit
	comib,=,n 4, r31, $fpemu_exit
	comib,=,n 5, r31, $fpemu_exit
	comib,=,n 6, r31, $fpemu_exit
	comib,=,n 7, r31, $fpemu_exit
d228 1
a228 2
	sh3add	t1, arg3, arg1
	extru	t4, 31, 5, arg2
a233 1
	/* extru	t4, 31, 5, arg1 */
d253 3
d257 16
a272 2
	extru,<> t4, 31, 5, t1
	ldi	32, t1
a274 9
	comib,=,n 0, r31, $fpemu0c_3_0
	comib,=,n 1, r31, $fpemu0c_3_1
	comib,=,n 2, r31, $fpemu0c_3_2
	comib,=,n 3, r31, $fpemu0c_3_3
	comib,=,n 4, r31, $fpemu0c_3_4
	comib,=,n 5, r31, $fpemu_exit
	comib,=,n 6, r31, $fpemu_exit
	comib,=,n 7, r31, $fpemu_exit

d306 2
a307 1
	bv,n	0(rp)
@


1.5
log
@make sure all the funky stack we allocate are properly alligned, the trap_phys is still uncertain, but it's at the beginning of the section (;
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.4 2001/03/29 02:18:45 mickey Exp $	*/
d87 1
a87 1
	
d178 1
a178 1
	
a311 1

a312 1

@


1.4
log
@leaf_entry, better entry
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.3 2001/03/29 00:05:19 mickey Exp $	*/
a74 6

	.section .bss

	.export	$fpemu_stack, data
$fpemu_stack
	.comm	NBPG
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.4 2001/03/29 02:18:45 mickey Exp $	*/
d75 6
@


1.4.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.4.6.1 2002/06/11 03:35:37 art Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000,2002 Michael Shalayeff
d38 1
a38 1
#define	FP_TABLE2(name,ep0,ep1,ep2,ep3) \
d43 1
a43 1
	copy	r0, ret0				! \
d78 1
a78 1
 * fpu_emulate(iir,0,fpregs)
d82 1
a82 1
	copy	arg0, t4
d84 2
a85 3
	extru	arg0, 20, 2, r1
	extru	arg0, 22, 2, t3
	subi,<>	1, t3, r0
d87 2
a88 1

d94 4
a97 3
	extru,<> arg0, 10, 5, t1
	ldi	32, t1	/* fpemu zero reg */
	extru,<> arg0, 31, 5, t2
d99 1
a99 3
	nop
	comib,=,n 2, t3, $fpemu_exit
	nop
d101 5
d110 1
a110 1
	 * t3 -- class
d113 1
a113 1
	 * (t4 -- copy of arg0, ie iir)
d115 4
a118 9
	sh3add	t1, arg2, arg0
	sh3add	t2, arg2, arg1
	stw	r0, 32*8+0(arg2)	/* make sure zero reg is zero */
	stw	r0, 32*8+4(arg2)

	comib,=,n 0, t3, $fpemu0c_0
	comib,=,n 1, t3, $fpemu0c_1
	comib,=,n 2, t3, $fpemu0c_2
	comib,=,n 3, t3, $fpemu0c_3
a120 2
	comib,=,n 2, r1, $fpemu_exit

d137 1
d142 1
d144 1
a144 1
	ldw	3*4(arg0), t4
d147 1
a150 1
	stw	t2, 1*4(arg1)
d156 1
d162 1
d164 1
a164 1
	depi	0, 0, 1, t1
d167 1
a170 1
	stw	t2, 1*4(arg1)
d178 1
a178 1

d184 2
a185 1
	extru	t4, 16, 4, r1
d196 1
a196 1
	FP_TABLE3(fcnvff, invalid, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, invalid, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, invalid)
d204 1
a204 1
	FP_TABLE3(fcnvxf, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)
d212 1
a212 1
	FP_TABLE3(fcnvfx, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)
d220 2
a221 1
	FP_TABLE3(fcnvfxt, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)
d224 1
d226 6
a231 1
	comib,<>,n 0, r31, $fpemu_exit
d237 2
a238 1
	sh3add	t1, arg3, arg2
d244 1
d264 2
a265 1
	extru,<> t4, 15, 5, t1
d267 1
a267 2
	blr	r31, r0
	copy	arg2, arg3
d269 8
a276 16
	b	$fpemu0c_3_0
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_1
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_2
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_3
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_4
	sh3add	t1, arg3, arg2
	b	$fpemu_exit
	sh3add	t1, arg3, arg2
	b	$fpemu_exit
	sh3add	t1, arg3, arg2
	b	$fpemu_exit
	sh3add	t1, arg3, arg2
d309 1
a309 2
	bv	0(rp)
	ldi	1, ret0
d312 1
d314 1
@


1.4.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d104 2
a105 3
	 * arg1 -- fpregs context
	 * arg2 -- target register (address)
	 * arg3 -- fpregs context
a110 2
	copy	arg2, arg3
	copy	arg2, arg1
d112 3
a114 12
	sh3add	t2, arg2, arg2
	stw	r0, 32*8+0(arg1)	/* make sure zero reg is zero */
	stw	r0, 32*8+4(arg1)

	extru,=	t4, 24, 1, r0		/* adjust for the L in source */
	addi	4, arg0, arg0

	comib,=,n 2, t3, $fpemu0c_2
	nop

	extru,=	t4, 24, 1, r0		/* adjust for the L in target */
	addi	4, arg2, arg2
d118 1
d135 1
a135 1
	stw	t4, 0(arg3)
d146 2
a147 2
	stw	t3, 2*4(arg2)
	stw	t4, 3*4(arg2)
d151 2
a152 2
	stw	t2, 1*4(arg2)
	stw	t1, 0*4(arg2)
d164 2
a165 2
	stw	t3, 2*4(arg2)
	stw	t4, 3*4(arg2)
d169 2
a170 2
	stw	t2, 1*4(arg2)
	stw	t1, 0*4(arg2)
d225 1
d228 1
a228 3
	sh3add	t1, arg3, arg1
	extru,=	t4, 19, 1, r0	/* see if it's the L reg */
	addi	4, arg1, arg1
d235 1
a235 1
	ldw	0(arg3), t1
a254 2
	extru,=	t4, 19, 1, r0	/* see if it's the L reg */
	addi	4, arg1, arg1
d256 1
a256 1
	nop
d259 1
a259 1
	sh3add	t1, arg1, arg1
d261 1
a261 1
	sh3add	t1, arg1, arg1
d263 1
a263 1
	sh3add	t1, arg1, arg1
d265 1
a265 1
	sh3add	t1, arg1, arg1
d267 1
a267 1
	sh3add	t1, arg1, arg1
d269 1
a269 1
	sh3add	t1, arg1, arg1
d271 1
a271 1
	sh3add	t1, arg1, arg1
d273 1
a273 1
	sh3add	t1, arg1, arg1
d281 1
a281 6
$fpemu0c_3_2	/* fmpy/xmpy */
	bb,>=	t4, 23, $fpemu0c_3_2_f
	nop

	FP_TABLE2(xmpy,s,u,s,u)
$fpemu0c_3_2_f
@


1.3
log
@.comm in .bss
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.2 2000/01/11 10:14:22 mickey Exp $	*/
d86 1
a86 1
ENTRY(fpu_emulate)
@


1.2
log
@there indeed is a quad_frnd() exist
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.1 2000/01/11 09:47:25 mickey Exp $	*/
d76 1
a76 2
	.space	$PRIVATE$
	.subspa	$BSS$
d80 1
a80 1
	.block	NBPG
d82 1
@


1.2.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.4 2001/03/29 02:18:45 mickey Exp $	*/
d76 2
a77 1
	.section .bss
d81 1
a81 1
	.comm	NBPG
a82 1
	.text
d86 1
a86 1
LEAF_ENTRY(fpu_emulate)
@


1.2.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2000,2002 Michael Shalayeff
d38 1
a38 1
#define	FP_TABLE2(name,ep0,ep1,ep2,ep3) \
d43 1
a43 1
	copy	r0, ret0				! \
d76 6
d84 1
a84 1
 * fpu_emulate(iir,0,fpregs)
d88 1
a88 1
	copy	arg0, t4
d90 2
a91 3
	extru	arg0, 20, 2, r1
	extru	arg0, 22, 2, t3
	subi,<>	1, t3, r0
d93 2
a94 1

d100 4
a103 3
	extru,<> arg0, 10, 5, t1
	ldi	32, t1	/* fpemu zero reg */
	extru,<> arg0, 31, 5, t2
d105 1
a105 3
	nop
	comib,=,n 2, t3, $fpemu_exit
	nop
d107 5
d116 1
a116 1
	 * t3 -- class
d119 1
a119 1
	 * (t4 -- copy of arg0, ie iir)
d121 4
a124 9
	sh3add	t1, arg2, arg0
	sh3add	t2, arg2, arg1
	stw	r0, 32*8+0(arg2)	/* make sure zero reg is zero */
	stw	r0, 32*8+4(arg2)

	comib,=,n 0, t3, $fpemu0c_0
	comib,=,n 1, t3, $fpemu0c_1
	comib,=,n 2, t3, $fpemu0c_2
	comib,=,n 3, t3, $fpemu0c_3
a126 2
	comib,=,n 2, r1, $fpemu_exit

d143 1
d148 1
d150 1
a150 1
	ldw	3*4(arg0), t4
d153 1
a156 1
	stw	t2, 1*4(arg1)
d162 1
d168 1
d170 1
a170 1
	depi	0, 0, 1, t1
d173 1
a176 1
	stw	t2, 1*4(arg1)
d184 1
a184 1

d190 2
a191 1
	extru	t4, 16, 4, r1
d202 1
a202 1
	FP_TABLE3(fcnvff, invalid, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, invalid, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, invalid)
d210 1
a210 1
	FP_TABLE3(fcnvxf, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)
d218 1
a218 1
	FP_TABLE3(fcnvfx, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)
d226 2
a227 1
	FP_TABLE3(fcnvfxt, sgl_to_sgl, dbl_to_sgl, invalid, quad_to_sgl, sgl_to_dbl, dbl_to_dbl, invalid, quad_to_dbl, invalid, invalid, invalid, invalid, sgl_to_quad, dbl_to_quad, invalid, quad_to_quad)
d230 1
d232 6
a237 1
	comib,<>,n 0, r31, $fpemu_exit
d243 2
a244 1
	sh3add	t1, arg3, arg2
d250 1
d270 2
a271 1
	extru,<> t4, 15, 5, t1
d273 1
a273 2
	blr	r31, r0
	copy	arg2, arg3
d275 8
a282 16
	b	$fpemu0c_3_0
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_1
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_2
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_3
	sh3add	t1, arg3, arg2
	b	$fpemu0c_3_4
	sh3add	t1, arg3, arg2
	b	$fpemu_exit
	sh3add	t1, arg3, arg2
	b	$fpemu_exit
	sh3add	t1, arg3, arg2
	b	$fpemu_exit
	sh3add	t1, arg3, arg2
d315 1
a315 2
	bv	0(rp)
	ldi	1, ret0
d318 1
d320 1
@


1.2.2.3
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpemu.S,v 1.2.2.2 2003/03/27 23:26:53 niklas Exp $	*/
d104 2
a105 3
	 * arg1 -- fpregs context
	 * arg2 -- target register (address)
	 * arg3 -- fpregs context
a110 2
	copy	arg2, arg3
	copy	arg2, arg1
d112 3
a114 12
	sh3add	t2, arg2, arg2
	stw	r0, 32*8+0(arg1)	/* make sure zero reg is zero */
	stw	r0, 32*8+4(arg1)

	extru,=	t4, 24, 1, r0		/* adjust for the L in source */
	addi	4, arg0, arg0

	comib,=,n 2, t3, $fpemu0c_2
	nop

	extru,=	t4, 24, 1, r0		/* adjust for the L in target */
	addi	4, arg2, arg2
d118 1
d135 1
a135 1
	stw	t4, 0(arg3)
d146 2
a147 2
	stw	t3, 2*4(arg2)
	stw	t4, 3*4(arg2)
d151 2
a152 2
	stw	t2, 1*4(arg2)
	stw	t1, 0*4(arg2)
d164 2
a165 2
	stw	t3, 2*4(arg2)
	stw	t4, 3*4(arg2)
d169 2
a170 2
	stw	t2, 1*4(arg2)
	stw	t1, 0*4(arg2)
d225 1
d228 1
a228 3
	sh3add	t1, arg3, arg1
	extru,=	t4, 19, 1, r0	/* see if it's the L reg */
	addi	4, arg1, arg1
d235 1
a235 1
	ldw	0(arg3), t1
a254 2
	extru,=	t4, 19, 1, r0	/* see if it's the L reg */
	addi	4, arg1, arg1
d256 1
a256 1
	nop
d259 1
a259 1
	sh3add	t1, arg1, arg1
d261 1
a261 1
	sh3add	t1, arg1, arg1
d263 1
a263 1
	sh3add	t1, arg1, arg1
d265 1
a265 1
	sh3add	t1, arg1, arg1
d267 1
a267 1
	sh3add	t1, arg1, arg1
d269 1
a269 1
	sh3add	t1, arg1, arg1
d271 1
a271 1
	sh3add	t1, arg1, arg1
d273 1
a273 1
	sh3add	t1, arg1, arg1
d281 1
a281 6
$fpemu0c_3_2	/* fmpy/xmpy */
	bb,>=	t4, 23, $fpemu0c_3_2_f
	nop

	FP_TABLE2(xmpy,s,u,s,u)
$fpemu0c_3_2_f
@


1.2.2.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2000-2004 Michael Shalayeff
d15 5
d24 7
a30 8
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
a33 1
#include <machine/cpu.h>
d99 1
a99 1
	/*comib,=,n 2, t3, $fpemu_exit*/
d194 1
a194 1
	extru	t4, 20, 4, r1
d201 4
d208 5
d216 5
d224 5
a240 1
	extru	t4, 31, 5, arg2
a315 4
sgl_to_quad_fcnvff
dbl_to_quad_fcnvff
quad_to_sgl_fcnvff
quad_to_dbl_fcnvff
a316 5
sgl_to_quad_fcnvxf
dbl_to_quad_fcnvxf
quad_to_sgl_fcnvxf
quad_to_dbl_fcnvxf
quad_to_quad_fcnvxf
a317 5
sgl_to_quad_fcnvfx
dbl_to_quad_fcnvfx
quad_to_sgl_fcnvfx
quad_to_dbl_fcnvfx
quad_to_quad_fcnvfx
a318 5
sgl_to_quad_fcnvfxt
dbl_to_quad_fcnvfxt
quad_to_sgl_fcnvfxt
quad_to_dbl_fcnvfxt
quad_to_quad_fcnvfxt
d326 1
a326 1
	ldi	HPPA_FPU_ILL, ret0
@


1.1
log
@perpetum fetus fpu emulation dispatcher
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d187 1
a187 1
	FP_TABLE2(frnd,sgl,dbl,invalid,invalid)
@

