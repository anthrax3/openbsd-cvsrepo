head	1.7;
access;
symbols
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2010.06.29.20.30.31;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2010.06.29.04.03.21;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.29.00.50.40;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.24.15.04.54;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.29.18.31.11;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.26.20.37.24;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.26.20.04.37;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove COMPAT_HPUX.  No one wanted to support it and its fewmets were
blocking other cleanups
ok miod@@
@
text
@/*	$OpenBSD: hpux_machdep.c,v 1.6 2010/06/29 04:03:21 jsing Exp $	*/

/*
 * Copyright (c) 2005 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/exec.h>
#include <sys/signalvar.h>

#include <compat/hpux/hpux.h>
#include <compat/hpux/hpux_sig.h>
#include <compat/hpux/hpux_util.h>
#include <compat/hpux/hpux_syscallargs.h>

#include <machine/cpufunc.h>
#include <machine/fpu.h>
#include <machine/frame.h>
#include <machine/hpux_machdep.h>

int
hpux_cpu_sysconf_arch(void)
{
	extern int cpu_model_hpux;	/* machdep.c */

	return cpu_model_hpux;
}

int
hpux_sys_getcontext(struct proc *p, void *v, register_t *retval)
{
	struct hpux_sys_getcontext_args *uap = v;
	int len = SCARG(uap, len);

	if (len <= 0)
		return (EINVAL);

	if (len > 4)
		len = 4;

	if (!copyout("FPU", SCARG(uap, buf), len))
		*retval = len;

	return (0);
}

void
hpux_setregs(struct proc *p, struct exec_package *pack, u_long stack,
    register_t *retval)
{
	extern int cpu_model_hpux;	/* machdep.c */
	extern u_int fpu_version;	/* from machdep.c */
	struct ps_strings arginfo;	/* XXX copy back in from the stack */
	struct hpux_keybits {
		int	kb_cpuver;
		int	kb_fpustat;
		int	kb_nbits;
		int	kb_bits[2];
	} hpux_keybits;
	struct trapframe *tf = p->p_md.md_regs;
	struct pcb *pcb = &p->p_addr->u_pcb;
	register_t zero;

	if (copyin((char *)PS_STRINGS, &arginfo, sizeof(arginfo)))
		sigexit(p, SIGILL);

	stack = (stack + 0x1f) & ~0x1f;
	hpux_keybits.kb_cpuver = cpu_model_hpux;
	hpux_keybits.kb_fpustat = fpu_version;
	hpux_keybits.kb_nbits = 1;
	hpux_keybits.kb_bits[0] = 0;	/* TODO report half-word insns */
	hpux_keybits.kb_bits[1] = -1;
	if (copyout(&hpux_keybits, (void *)stack, sizeof(hpux_keybits)))
		sigexit(p, SIGILL);

	tf->tf_flags = TFF_SYS|TFF_LAST;
	tf->tf_iioq_tail = 4 +
	    (tf->tf_iioq_head = pack->ep_entry | HPPA_PC_PRIV_USER);
	tf->tf_rp = 0;
	tf->tf_arg0 = (register_t)arginfo.ps_nargvstr;
	tf->tf_arg1 = (register_t)arginfo.ps_argvstr;
	tf->tf_arg2 = (register_t)arginfo.ps_envstr;
	tf->tf_arg3 = stack;	/* keybits */
	stack += sizeof(hpux_keybits);

	/* setup terminal stack frame */
	stack = (stack + 0x1f) & ~0x1f;
	tf->tf_r3 = stack;
	tf->tf_sp = stack += HPPA_FRAME_SIZE;
	zero = 0;
	copyout(&zero, (caddr_t)(stack - HPPA_FRAME_SIZE), sizeof(register_t));
	copyout(&zero, (caddr_t)(stack + HPPA_FRAME_CRP), sizeof(register_t));

	/* reset any of the pending FPU exceptions */
	pcb->pcb_fpregs->fpr_regs[0] = ((u_int64_t)HPPA_FPU_INIT) << 32;
	pcb->pcb_fpregs->fpr_regs[1] = 0;
	pcb->pcb_fpregs->fpr_regs[2] = 0;
	pcb->pcb_fpregs->fpr_regs[3] = 0;

	fpu_proc_flush(p);

	retval[1] = 0;
}

int
hpux_sigsetreturn(struct proc *p, void *v, register_t *retval)
{
	struct hpux_sigsetreturn_args /* {
		syscallarg(caddr_t) addr;
		syscallarg(int) cookie;
		syscallarg(int) len;
	} */ *uap = v;
	struct pcb *pcb = &p->p_addr->u_pcb;

	/* XXX should fail on second call? */

	pcb->pcb_sigreturn = SCARG(uap, addr);
	pcb->pcb_srcookie = SCARG(uap, cookie);
	pcb->pcb_sclen = SCARG(uap, len);

printf("hpux_sigsetreturn(%p, %x, %d)\n", SCARG(uap, addr), SCARG(uap, cookie), SCARG(uap, len));

	retval[0] = 0;
	return (0);
}
@


1.6
log
@Factor out code used to save and flushe process FPU context.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_machdep.c,v 1.5 2010/06/29 00:50:40 jsing Exp $	*/
@


1.5
log
@Store pointer to process FPU state in struct cpu_info.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_machdep.c,v 1.4 2010/05/24 15:04:54 deraadt Exp $	*/
a39 1
#include <machine/hpux_machdep.h>
d41 1
d43 1
d123 3
a125 5
	if (tf->tf_cr30 == curcpu()->ci_fpu_state) {
		curcpu()->ci_fpu_state = 0;
		/* force an fpu ctxsw, we won't be hugged by the cpu_switch */
		mtctl(0, CR_CCR);
	}
@


1.4
log
@Add missing prototypes
ok jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_machdep.c,v 1.3 2009/07/29 18:31:11 kettenis Exp $	*/
a74 1
	extern paddr_t fpu_curpcb;	/* from locore.S */
d122 2
a123 2
	if (tf->tf_cr30 == fpu_curpcb) {
		fpu_curpcb = 0;
@


1.3
log
@Get rid of non-equivalent aliases of the pcb by moving the fpu state out
of the pcb and using the p_addr member of 'struct proc' to calculate the
address of the kernel stack when switching to virtual mode after taking a trap.
Remove the now unecessary cache flushes; they're actually harmful since they
create non-equivalent aliases.  This seems to fix the memory corruption we
have been observing from time to time.

This diff does not rename fpu_curpcb, which is now somewhat incorrectly named.
I hope to change things back again as soon as we are able to map the pcb 1:1.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_machdep.c,v 1.2 2005/03/26 20:37:24 mickey Exp $	*/
d40 1
@


1.2
log
@oops. it's 2005 now!
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_machdep.c,v 1.1 2005/03/26 20:04:37 mickey Exp $	*/
d118 4
a121 5
	pcb->pcb_fpregs[0] = ((u_int64_t)HPPA_FPU_INIT) << 32;
	pcb->pcb_fpregs[1] = 0;
	pcb->pcb_fpregs[2] = 0;
	pcb->pcb_fpregs[3] = 0;
	fdcache(HPPA_SID_KERNEL, (vaddr_t)pcb->pcb_fpregs, 8 * 4);
@


1.1
log
@md parts for hpux_compa code; some problems w/ signals delivery still exist
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2004 Michael Shalayeff
@

