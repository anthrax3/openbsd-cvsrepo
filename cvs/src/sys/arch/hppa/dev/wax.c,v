head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.52
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.48
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.44
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.46
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.38
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.42
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.40
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.36
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.34
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.32
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.30
	OPENBSD_5_0:1.10.0.28
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.26
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.24
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.20
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.22
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.18
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.16
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.16
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.14
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.12
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.10
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.6
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2004.11.08.20.53.25;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.28.18.47.13;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.15.20.11.28;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.18.24.19;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.08.20.48.39;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.08.20.37.39;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.07.16.49.02;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.03.21.45.14;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.11.23.03.04.10;	author mickey;	state Exp;
branches
	1.1.6.1
	1.1.16.1;
next	;

1.1.6.1
date	2002.03.28.10.07.19;	author niklas;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2003.05.13.19.41.03;	author ho;	state Exp;
branches;
next	1.1.6.3;

1.1.6.3
date	2004.06.05.23.10.47;	author niklas;	state Exp;
branches;
next	;

1.1.16.1
date	2002.06.11.03.35.36;	author art;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2003.05.19.21.49.41;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Typo
@
text
@/*	$OpenBSD: wax.c,v 1.9 2004/10/28 18:47:13 mickey Exp $	*/

/*
 * Copyright (c) 1998-2003 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/reboot.h>

#include <machine/iomod.h>
#include <machine/autoconf.h>

#include <hppa/dev/cpudevs.h>

#include <hppa/gsc/gscbusvar.h>

#define	WAX_IOMASK	0xfff00000

struct wax_regs {
	u_int32_t wax_irr;	/* int request register */
	u_int32_t wax_imr;	/* int mask register */
	u_int32_t wax_ipr;	/* int pending register */
	u_int32_t wax_icr;	/* int command? register */
	u_int32_t wax_iar;	/* int acquire? register */
};

struct wax_softc {
	struct device sc_dv;
	struct gscbus_ic sc_ic;

	struct wax_regs volatile *sc_regs;
};

int	waxmatch(struct device *, void *, void *);
void	waxattach(struct device *, struct device *, void *);
void	wax_gsc_attach(struct device *);

struct cfattach wax_ca = {
	sizeof(struct wax_softc), waxmatch, waxattach
};

struct cfdriver wax_cd = {
	NULL, "wax", DV_DULL
};

int
waxmatch(parent, cfdata, aux)   
	struct device *parent;
	void *cfdata;
	void *aux;
{
	struct confargs *ca = aux;
	struct cfdata *cf = cfdata;

	/* there will be only one */
	if (cf->cf_unit > 0 ||
	    ca->ca_type.iodc_type != HPPA_TYPE_BHA ||
	    ca->ca_type.iodc_sv_model != HPPA_BHA_WAX)
		return 0;

	return 1;
}

void
waxattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct wax_softc *sc = (struct wax_softc *)self;
	struct confargs *ca = aux;
	struct gsc_attach_args ga;
	bus_space_handle_t ioh;
	int s, in;

	if (bus_space_map(ca->ca_iot, ca->ca_hpa, IOMOD_HPASIZE, 0, &ioh)) {
		printf(": can't map IO space\n");
		return;
	}

	sc->sc_regs = (struct wax_regs *)ca->ca_hpa;

	printf("\n");

	/* interrupts guts */
	s = splhigh();
	sc->sc_regs->wax_iar = cpu_gethpa(0) | (31 - ca->ca_irq);
	sc->sc_regs->wax_icr = 0;
	sc->sc_regs->wax_imr = ~0U;
	in = sc->sc_regs->wax_irr;
	sc->sc_regs->wax_imr = 0;
	splx(s);

	sc->sc_ic.gsc_type = gsc_wax;
	sc->sc_ic.gsc_dv = sc;
	sc->sc_ic.gsc_base = sc->sc_regs;

	ga.ga_ca = *ca;	/* clone from us */
	if (!strcmp(parent->dv_xname, "mainbus0")) {
		ga.ga_dp.dp_bc[0] = ga.ga_dp.dp_bc[1];
		ga.ga_dp.dp_bc[1] = ga.ga_dp.dp_bc[2];
		ga.ga_dp.dp_bc[2] = ga.ga_dp.dp_bc[3];
		ga.ga_dp.dp_bc[3] = ga.ga_dp.dp_bc[4];
		ga.ga_dp.dp_bc[4] = ga.ga_dp.dp_bc[5];
		ga.ga_dp.dp_bc[5] = ga.ga_dp.dp_mod;
		ga.ga_dp.dp_mod = 0;
	}

	ga.ga_name = "gsc";
	ga.ga_hpamask = WAX_IOMASK;
	ga.ga_ic = &sc->sc_ic;
	config_found(self, &ga, gscprint);
}
@


1.9
log
@wrong paste from lasi
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.8 2004/09/15 20:11:28 mickey Exp $	*/
d44 1
a44 1
	u_int32_t wax_irr;	/* int requset register */
@


1.8
log
@scan cpu bus manually for some machines do not support that in prom
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.7 2004/04/07 18:24:19 mickey Exp $	*/
d100 1
a100 2
	if (bus_space_map(ca->ca_iot, ca->ca_hpa + 0xc000,
	    IOMOD_HPASIZE, 0, &ioh)) {
@


1.7
log
@update copyright; miod@@ is fine w/ files where he holds it too
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.6 2003/04/08 20:48:39 mickey Exp $	*/
d124 9
a132 7
	ga.ga_dp.dp_bc[0] = ga.ga_dp.dp_bc[1];
	ga.ga_dp.dp_bc[1] = ga.ga_dp.dp_bc[2];
	ga.ga_dp.dp_bc[2] = ga.ga_dp.dp_bc[3];
	ga.ga_dp.dp_bc[3] = ga.ga_dp.dp_bc[4];
	ga.ga_dp.dp_bc[4] = ga.ga_dp.dp_bc[5];
	ga.ga_dp.dp_bc[5] = ga.ga_dp.dp_mod;
	ga.ga_dp.dp_mod = 0;
@


1.6
log
@just wate that debug altogether
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.5 2003/04/08 20:37:39 miod Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2003 Michael Shalayeff
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d19 8
a26 7
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.5
log
@Make dmesg prettier if attachment fails and no option DEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.4 2003/04/07 16:49:02 mickey Exp $	*/
d105 1
a105 2
			  IOMOD_HPASIZE, 0, &ioh)) {
#ifdef DEBUG
a106 3
#else
		printf("\n");
#endif
@


1.4
log
@this makes wax interrupt
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.3 2003/04/03 21:45:14 mickey Exp $	*/
d108 2
@


1.3
log
@make it at least scan the bus
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.2 2002/03/14 01:26:31 millert Exp $	*/
d102 1
a115 1
#if 0
a123 1
#endif
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.1 1998/11/23 03:04:10 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Michael Shalayeff
d43 12
d56 4
a59 1
	struct  device sc_dv;
d64 1
d98 45
@


1.1
log
@ok, go in. we'll sync you later w/ asp and lasi
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 2
a48 2
int	waxmatch __P((struct device *, void *, void *));
void	waxattach __P((struct device *, struct device *, void *));
@


1.1.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.1 1998/11/23 03:04:10 mickey Exp $	*/
d47 2
a48 2
int	waxmatch(struct device *, void *, void *);
void	waxattach(struct device *, struct device *, void *);
@


1.1.16.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 1998,2003 Michael Shalayeff
a42 12
#include <hppa/gsc/gscbusvar.h>

#define	WAX_IOMASK	0xfff00000

struct wax_regs {
	u_int32_t wax_irr;	/* int requset register */
	u_int32_t wax_imr;	/* int mask register */
	u_int32_t wax_ipr;	/* int pending register */
	u_int32_t wax_icr;	/* int command? register */
	u_int32_t wax_iar;	/* int acquire? register */
};

d44 1
a44 4
	struct device sc_dv;
	struct gscbus_ic sc_ic;

	struct wax_regs volatile *sc_regs;
a48 1
void	wax_gsc_attach(struct device *);
a81 42
	struct wax_softc *sc = (struct wax_softc *)self;
	struct confargs *ca = aux;
	struct gsc_attach_args ga;
	bus_space_handle_t ioh;
	int s, in;

	if (bus_space_map(ca->ca_iot, ca->ca_hpa + 0xc000,
	    IOMOD_HPASIZE, 0, &ioh)) {
		printf(": can't map IO space\n");
		return;
	}

	sc->sc_regs = (struct wax_regs *)ca->ca_hpa;

	printf("\n");

	/* interrupts guts */
	s = splhigh();
	sc->sc_regs->wax_iar = cpu_gethpa(0) | (31 - ca->ca_irq);
	sc->sc_regs->wax_icr = 0;
	sc->sc_regs->wax_imr = ~0U;
	in = sc->sc_regs->wax_irr;
	sc->sc_regs->wax_imr = 0;
	splx(s);

	sc->sc_ic.gsc_type = gsc_wax;
	sc->sc_ic.gsc_dv = sc;
	sc->sc_ic.gsc_base = sc->sc_regs;

	ga.ga_ca = *ca;	/* clone from us */
	ga.ga_dp.dp_bc[0] = ga.ga_dp.dp_bc[1];
	ga.ga_dp.dp_bc[1] = ga.ga_dp.dp_bc[2];
	ga.ga_dp.dp_bc[2] = ga.ga_dp.dp_bc[3];
	ga.ga_dp.dp_bc[3] = ga.ga_dp.dp_bc[4];
	ga.ga_dp.dp_bc[4] = ga.ga_dp.dp_bc[5];
	ga.ga_dp.dp_bc[5] = ga.ga_dp.dp_mod;
	ga.ga_dp.dp_mod = 0;

	ga.ga_name = "gsc";
	ga.ga_hpamask = WAX_IOMASK;
	ga.ga_ic = &sc->sc_ic;
	config_found(self, &ga, gscprint);
@


1.1.6.1
log
@Merge in -current from about a week ago
@
text
@d47 2
a48 2
int	waxmatch(struct device *, void *, void *);
void	waxattach(struct device *, struct device *, void *);
@


1.1.6.2
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: wax.c,v 1.1.6.1 2002/03/28 10:07:19 niklas Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2003 Michael Shalayeff
a42 12
#include <hppa/gsc/gscbusvar.h>

#define	WAX_IOMASK	0xfff00000

struct wax_regs {
	u_int32_t wax_irr;	/* int requset register */
	u_int32_t wax_imr;	/* int mask register */
	u_int32_t wax_ipr;	/* int pending register */
	u_int32_t wax_icr;	/* int command? register */
	u_int32_t wax_iar;	/* int acquire? register */
};

d44 1
a44 4
	struct device sc_dv;
	struct gscbus_ic sc_ic;

	struct wax_regs volatile *sc_regs;
a48 1
void	wax_gsc_attach(struct device *);
a81 42
	struct wax_softc *sc = (struct wax_softc *)self;
	struct confargs *ca = aux;
	struct gsc_attach_args ga;
	bus_space_handle_t ioh;
	int s, in;

	if (bus_space_map(ca->ca_iot, ca->ca_hpa + 0xc000,
	    IOMOD_HPASIZE, 0, &ioh)) {
		printf(": can't map IO space\n");
		return;
	}

	sc->sc_regs = (struct wax_regs *)ca->ca_hpa;

	printf("\n");

	/* interrupts guts */
	s = splhigh();
	sc->sc_regs->wax_iar = cpu_gethpa(0) | (31 - ca->ca_irq);
	sc->sc_regs->wax_icr = 0;
	sc->sc_regs->wax_imr = ~0U;
	in = sc->sc_regs->wax_irr;
	sc->sc_regs->wax_imr = 0;
	splx(s);

	sc->sc_ic.gsc_type = gsc_wax;
	sc->sc_ic.gsc_dv = sc;
	sc->sc_ic.gsc_base = sc->sc_regs;

	ga.ga_ca = *ca;	/* clone from us */
	ga.ga_dp.dp_bc[0] = ga.ga_dp.dp_bc[1];
	ga.ga_dp.dp_bc[1] = ga.ga_dp.dp_bc[2];
	ga.ga_dp.dp_bc[2] = ga.ga_dp.dp_bc[3];
	ga.ga_dp.dp_bc[3] = ga.ga_dp.dp_bc[4];
	ga.ga_dp.dp_bc[4] = ga.ga_dp.dp_bc[5];
	ga.ga_dp.dp_bc[5] = ga.ga_dp.dp_mod;
	ga.ga_dp.dp_mod = 0;

	ga.ga_name = "gsc";
	ga.ga_hpamask = WAX_IOMASK;
	ga.ga_ic = &sc->sc_ic;
	config_found(self, &ga, gscprint);
@


1.1.6.3
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 1998-2003 Michael Shalayeff
d15 5
d24 7
a30 8
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
@


