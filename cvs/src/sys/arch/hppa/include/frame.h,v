head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.18
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.14
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.16
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.8
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.12
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.10
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.6
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.16.0.30
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.28
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.26
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.22
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.24
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.20
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.18
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.16
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.14
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.12
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.6
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.11.0.12
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.10
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.8
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.6
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.2
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2012.06.21.00.56.59;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.14.14.29.53;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.08.15.39.50;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.07.18.24.19;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.15.18.15.41;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.17.04.39.39;	author jfb;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.19.01.30.46;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.08.18.10.18;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	99.11.25.18.28.06;	author mickey;	state Exp;
branches
	1.11.2.1
	1.11.12.1;
next	1.10;

1.10
date	99.11.16.16.46.15;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	99.09.11.23.49.37;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	99.08.14.03.34.07;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	99.07.20.14.13.32;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	99.06.18.05.19.59;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	99.04.20.19.49.35;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	98.12.29.21.52.37;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	98.10.30.19.22.43;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.07.07.21.32.40;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.19.45.22;	author mickey;	state Exp;
branches;
next	;

1.11.2.1
date	2002.03.06.00.57.22;	author niklas;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2002.03.28.10.27.10;	author niklas;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2004.02.19.10.48.40;	author niklas;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2004.06.05.23.10.49;	author niklas;	state Exp;
branches;
next	;

1.11.12.1
date	2002.06.11.03.35.37;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@__tfork() needs to set the stack address of the new thread in the kernel,
so that it can't get a signal while still running on the parent thread's
stack.  Also, pass in sizeof(struct __tfork) to provide forward compat
when more members are added.  This is an ABI change, so switch syscall
numbers and bump lib majors this time.

ok deraadt@@ matthew@@
@
text
@/*	$OpenBSD: frame.h,v 1.18 2011/11/14 14:29:53 deraadt Exp $	*/

/*
 * Copyright (c) 1999-2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef _MACHINE_FRAME_H_
#define _MACHINE_FRAME_H_

/*
 * Call frame definitions
 */
#define	HPPA_FRAME_NARGS	(12)
#define	HPPA_FRAME_MAXARGS	(HPPA_FRAME_NARGS * 4)
#define	HPPA_FRAME_ARG(n)	(-(32 + 4*((n) + 1)))
#define	HPPA_FRAME_CARG(n,sp)	((register_t *)((sp) + HPPA_FRAME_ARG(n)))
#define	HPPA_FRAME_SIZE		(64)
#define	HPPA_FRAME_PSP		(-4)
#define	HPPA_FRAME_EP		(-8)
#define	HPPA_FRAME_CLUP		(-12)
#define	HPPA_FRAME_SL		(-16)
#define	HPPA_FRAME_CRP		(-20)
#define	HPPA_FRAME_ERP		(-24)
#define	HPPA_FRAME_ESR4		(-28)
#define	HPPA_FRAME_EDP		(-32)

/*
 * Macros to decode processor status word.
 */
#define	HPPA_PC_PRIV_MASK    3
#define	HPPA_PC_PRIV_KERN    0
#define	HPPA_PC_PRIV_USER    3
#define	USERMODE(pc)    ((((register_t)pc) & HPPA_PC_PRIV_MASK) != HPPA_PC_PRIV_KERN)
#define	KERNMODE(pc)	(((register_t)pc) & ~HPPA_PC_PRIV_MASK)

#ifndef _LOCORE
/*
 * the trapframe is divided into two parts:
 *	one is saved while we are in the physical mode (beginning of the trap),
 *	and should be kept as small as possible, since all the interrupts will
 *	be lost during this phase, also it must be 64-bytes aligned, per
 *	pa-risc stack conventions, and its dependencies in the code (;
 *	the other part is filled out when we are already in the virtual mode,
 *	are able to catch interrupts (they are kept pending) and perform
 *	other trap activities (like tlb misses).
 */
struct trapframe {
	/* the `physical' part of the trapframe */
	unsigned long	tf_t1;		/* r22 */
	unsigned long	tf_t2;		/* r21 */
	unsigned long	tf_sp;		/* r30 */
	unsigned long	tf_t3;		/* r20 */
	unsigned long	tf_iisq_head;	/* cr17 */
	unsigned long	tf_iisq_tail;
	unsigned long	tf_iioq_head;	/* cr18 */
	unsigned long	tf_iioq_tail;
	unsigned long	tf_eiem;	/* cr15 */
	unsigned long	tf_ipsw;	/* cr22 */
	unsigned long	tf_sr3;
	unsigned long	tf_pidr1;	/* cr8 */
	unsigned long	tf_isr;		/* cr20 */
	unsigned long	tf_ior;		/* cr21 */
	unsigned long	tf_iir;		/* cr19 */
	unsigned long	tf_flags;

	/* here starts the `virtual' part */
	unsigned long	tf_sar;		/* cr11 */
	unsigned long	tf_r1;
	unsigned long	tf_rp;          /* r2 */
	unsigned long	tf_r3;          /* frame pointer when -g */
	unsigned long	tf_r4;
	unsigned long	tf_r5;
	unsigned long	tf_r6;
	unsigned long	tf_r7;
	unsigned long	tf_r8;
	unsigned long	tf_r9;
	unsigned long	tf_r10;
	unsigned long	tf_r11;
	unsigned long	tf_r12;
	unsigned long	tf_r13;
	unsigned long	tf_r14;
	unsigned long	tf_r15;
	unsigned long	tf_r16;
	unsigned long	tf_r17;
	unsigned long	tf_r18;
	unsigned long	tf_t4;		/* r19 */
	unsigned long	tf_arg3;	/* r23 */
	unsigned long	tf_arg2;	/* r24 */
	unsigned long	tf_arg1;	/* r25 */
	unsigned long	tf_arg0;	/* r26 */
	unsigned long	tf_dp;		/* r27 */
	unsigned long	tf_ret0;	/* r28 */
	unsigned long	tf_ret1;	/* r29 */
	unsigned long	tf_r31;
	unsigned long	tf_sr0;
	unsigned long	tf_sr1;
	unsigned long	tf_sr2;
	unsigned long	tf_sr4;
	unsigned long	tf_sr5;
	unsigned long	tf_sr6;
	unsigned long	tf_sr7;
	unsigned long	tf_pidr2;	/* cr9 */
	unsigned long	tf_pidr3;	/* cr12 */
	unsigned long	tf_pidr4;	/* cr13 */
	unsigned long	tf_rctr;	/* cr0 */
	unsigned long	tf_ccr;		/* cr10 */
	unsigned long	tf_eirr;	/* cr23 - DDB */
	unsigned long	tf_vtop;	/* cr25 - DDB */
	unsigned long	tf_cr27;
	unsigned long	tf_cr28;	/*      - DDB */
	unsigned long	tf_cr30;	/* uaddr */

	unsigned long	tf_pad[3];	/* pad to 256 bytes */
};

#ifdef _KERNEL
int	setstack(struct trapframe *, u_long, register_t);
#endif /* _KERNEL */

#endif /* !_LOCORE */

#endif /* !_MACHINE_FRAME_H_ */
@


1.18
log
@merge various differences between hppa and hppa64
ok jsing
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.17 2011/11/08 15:39:50 kettenis Exp $	*/
d138 5
@


1.17
log
@Save and restore cr27 and add the necessary glue to use it as the userland
thread register.

ok guenther@@, jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.16 2004/04/07 18:24:19 mickey Exp $	*/
d72 16
a87 16
	unsigned	tf_t1;		/* r22 */
	unsigned	tf_t2;		/* r21 */
	unsigned	tf_sp;		/* r30 */
	unsigned	tf_t3;		/* r20 */
	unsigned	tf_iisq_head;	/* cr17 */
	unsigned	tf_iisq_tail;
	unsigned	tf_iioq_head;	/* cr18 */
	unsigned	tf_iioq_tail;
	unsigned	tf_eiem;	/* cr15 */
	unsigned	tf_ipsw;	/* cr22 */
	unsigned	tf_sr3;
	unsigned	tf_pidr1;	/* cr8 */
	unsigned	tf_isr;		/* cr20 */
	unsigned	tf_ior;		/* cr21 */
	unsigned	tf_iir;		/* cr19 */
	unsigned	tf_flags;
d90 45
a134 45
	unsigned	tf_sar;		/* cr11 */
	unsigned	tf_r1;
	unsigned	tf_rp;          /* r2 */
	unsigned	tf_r3;          /* frame pointer when -g */
	unsigned	tf_r4;
	unsigned	tf_r5;
	unsigned	tf_r6;
	unsigned	tf_r7;
	unsigned	tf_r8;
	unsigned	tf_r9;
	unsigned	tf_r10;
	unsigned	tf_r11;
	unsigned	tf_r12;
	unsigned	tf_r13;
	unsigned	tf_r14;
	unsigned	tf_r15;
	unsigned	tf_r16;
	unsigned	tf_r17;
	unsigned	tf_r18;
	unsigned	tf_t4;		/* r19 */
	unsigned	tf_arg3;	/* r23 */
	unsigned	tf_arg2;	/* r24 */
	unsigned	tf_arg1;	/* r25 */
	unsigned	tf_arg0;	/* r26 */
	unsigned	tf_dp;		/* r27 */
	unsigned	tf_ret0;	/* r28 */
	unsigned	tf_ret1;	/* r29 */
	unsigned	tf_r31;
	unsigned	tf_sr0;
	unsigned	tf_sr1;
	unsigned	tf_sr2;
	unsigned	tf_sr4;
	unsigned	tf_sr5;
	unsigned	tf_sr6;
	unsigned	tf_sr7;
	unsigned	tf_pidr2;	/* cr9 */
	unsigned	tf_pidr3;	/* cr12 */
	unsigned	tf_pidr4;	/* cr13 */
	unsigned	tf_rctr;	/* cr0 */
	unsigned	tf_ccr;		/* cr10 */
	unsigned	tf_eirr;	/* cr23 - DDB */
	unsigned	tf_vtop;	/* cr25 - DDB */
	unsigned	tf_cr27;
	unsigned	tf_cr28;	/*      - DDB */
	unsigned	tf_cr30;	/* uaddr */
d136 1
a136 1
	unsigned	tf_pad[3];	/* pad to 256 bytes */
@


1.16
log
@update copyright; miod@@ is fine w/ files where he holds it too
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.15 2003/07/15 18:15:41 mickey Exp $	*/
d132 1
d136 1
a136 1
	unsigned	tf_pad[4];	/* pad to 256 bytes */
@


1.15
log
@hptmask goes away as a register and frees one tmp cr
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.14 2003/06/17 04:39:39 jfb Exp $	*/
d4 1
a4 1
 * Copyright (c) 1999 Michael Shalayeff
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.14
log
@typos

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.13 2002/03/19 01:30:46 mickey Exp $	*/
a135 1
	unsigned	tf_hptm;	/* cr24 - DDB */
d140 1
a140 1
	unsigned	tf_pad[3];	/* pad to 256 bytes */
@


1.13
log
@no need for reg.h in the frame.h
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.12 2002/02/08 18:10:18 mickey Exp $	*/
d70 1
a70 1
 *	pa-risc stack conventions, and it's dependancies in the code (;
@


1.12
log
@do not rely on u_int being availabel
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.11 1999/11/25 18:28:06 mickey Exp $	*/
a36 2

#include <machine/reg.h>
@


1.11
log
@new pcb and frame layouts
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.10 1999/11/16 16:46:15 mickey Exp $	*/
d79 16
a94 16
	u_int	tf_t1;		/* r22 */
	u_int	tf_t2;		/* r21 */
	u_int	tf_sp;		/* r30 */
	u_int	tf_t3;		/* r20 */
	u_int	tf_iisq_head;	/* cr17 */
	u_int	tf_iisq_tail;
	u_int	tf_iioq_head;	/* cr18 */
	u_int	tf_iioq_tail;
	u_int	tf_eiem;	/* cr15 */
	u_int	tf_ipsw;	/* cr22 */
	u_int	tf_sr3;
	u_int	tf_pidr1;	/* cr8 */
	u_int	tf_isr;		/* cr20 */
	u_int	tf_ior;		/* cr21 */
	u_int	tf_iir;		/* cr19 */
	u_int	tf_flags;
d97 45
a141 45
	u_int	tf_sar;		/* cr11 */
	u_int	tf_r1;
	u_int	tf_rp;          /* r2 */
	u_int	tf_r3;          /* frame pointer when -g */
	u_int	tf_r4;
	u_int	tf_r5;
	u_int	tf_r6;
	u_int	tf_r7;
	u_int	tf_r8;
	u_int	tf_r9;
	u_int	tf_r10;
	u_int	tf_r11;
	u_int	tf_r12;
	u_int	tf_r13;
	u_int	tf_r14;
	u_int	tf_r15;
	u_int	tf_r16;
	u_int	tf_r17;
	u_int	tf_r18;
	u_int	tf_t4;		/* r19 */
	u_int	tf_arg3;	/* r23 */
	u_int	tf_arg2;	/* r24 */
	u_int	tf_arg1;	/* r25 */
	u_int	tf_arg0;	/* r26 */
	u_int	tf_dp;		/* r27 */
	u_int	tf_ret0;	/* r28 */
	u_int	tf_ret1;	/* r29 */
	u_int	tf_r31;
	u_int	tf_sr0;
	u_int	tf_sr1;
	u_int	tf_sr2;
	u_int	tf_sr4;
	u_int	tf_sr5;
	u_int	tf_sr6;
	u_int	tf_sr7;
	u_int	tf_pidr2;	/* cr9 */
	u_int	tf_pidr3;	/* cr12 */
	u_int	tf_pidr4;	/* cr13 */
	u_int	tf_rctr;	/* cr0 */
	u_int	tf_ccr;		/* cr10 */
	u_int	tf_eirr;	/* cr23 - DDB */
	u_int	tf_hptm;	/* cr24 - DDB */
	u_int	tf_vtop;	/* cr25 - DDB */
	u_int	tf_cr28;	/*      - DDB */
	u_int	tf_cr30;	/* uaddr */
d143 1
a143 1
	u_int	tf_pad[3];	/* pad to 256 bytes */
@


1.11.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.11 1999/11/25 18:28:06 mickey Exp $	*/
d38 2
d79 16
a94 16
	unsigned	tf_t1;		/* r22 */
	unsigned	tf_t2;		/* r21 */
	unsigned	tf_sp;		/* r30 */
	unsigned	tf_t3;		/* r20 */
	unsigned	tf_iisq_head;	/* cr17 */
	unsigned	tf_iisq_tail;
	unsigned	tf_iioq_head;	/* cr18 */
	unsigned	tf_iioq_tail;
	unsigned	tf_eiem;	/* cr15 */
	unsigned	tf_ipsw;	/* cr22 */
	unsigned	tf_sr3;
	unsigned	tf_pidr1;	/* cr8 */
	unsigned	tf_isr;		/* cr20 */
	unsigned	tf_ior;		/* cr21 */
	unsigned	tf_iir;		/* cr19 */
	unsigned	tf_flags;
d97 45
a141 45
	unsigned	tf_sar;		/* cr11 */
	unsigned	tf_r1;
	unsigned	tf_rp;          /* r2 */
	unsigned	tf_r3;          /* frame pointer when -g */
	unsigned	tf_r4;
	unsigned	tf_r5;
	unsigned	tf_r6;
	unsigned	tf_r7;
	unsigned	tf_r8;
	unsigned	tf_r9;
	unsigned	tf_r10;
	unsigned	tf_r11;
	unsigned	tf_r12;
	unsigned	tf_r13;
	unsigned	tf_r14;
	unsigned	tf_r15;
	unsigned	tf_r16;
	unsigned	tf_r17;
	unsigned	tf_r18;
	unsigned	tf_t4;		/* r19 */
	unsigned	tf_arg3;	/* r23 */
	unsigned	tf_arg2;	/* r24 */
	unsigned	tf_arg1;	/* r25 */
	unsigned	tf_arg0;	/* r26 */
	unsigned	tf_dp;		/* r27 */
	unsigned	tf_ret0;	/* r28 */
	unsigned	tf_ret1;	/* r29 */
	unsigned	tf_r31;
	unsigned	tf_sr0;
	unsigned	tf_sr1;
	unsigned	tf_sr2;
	unsigned	tf_sr4;
	unsigned	tf_sr5;
	unsigned	tf_sr6;
	unsigned	tf_sr7;
	unsigned	tf_pidr2;	/* cr9 */
	unsigned	tf_pidr3;	/* cr12 */
	unsigned	tf_pidr4;	/* cr13 */
	unsigned	tf_rctr;	/* cr0 */
	unsigned	tf_ccr;		/* cr10 */
	unsigned	tf_eirr;	/* cr23 - DDB */
	unsigned	tf_hptm;	/* cr24 - DDB */
	unsigned	tf_vtop;	/* cr25 - DDB */
	unsigned	tf_cr28;	/*      - DDB */
	unsigned	tf_cr30;	/* uaddr */
d143 1
a143 1
	unsigned	tf_pad[3];	/* pad to 256 bytes */
@


1.11.2.1
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d79 16
a94 16
	unsigned	tf_t1;		/* r22 */
	unsigned	tf_t2;		/* r21 */
	unsigned	tf_sp;		/* r30 */
	unsigned	tf_t3;		/* r20 */
	unsigned	tf_iisq_head;	/* cr17 */
	unsigned	tf_iisq_tail;
	unsigned	tf_iioq_head;	/* cr18 */
	unsigned	tf_iioq_tail;
	unsigned	tf_eiem;	/* cr15 */
	unsigned	tf_ipsw;	/* cr22 */
	unsigned	tf_sr3;
	unsigned	tf_pidr1;	/* cr8 */
	unsigned	tf_isr;		/* cr20 */
	unsigned	tf_ior;		/* cr21 */
	unsigned	tf_iir;		/* cr19 */
	unsigned	tf_flags;
d97 45
a141 45
	unsigned	tf_sar;		/* cr11 */
	unsigned	tf_r1;
	unsigned	tf_rp;          /* r2 */
	unsigned	tf_r3;          /* frame pointer when -g */
	unsigned	tf_r4;
	unsigned	tf_r5;
	unsigned	tf_r6;
	unsigned	tf_r7;
	unsigned	tf_r8;
	unsigned	tf_r9;
	unsigned	tf_r10;
	unsigned	tf_r11;
	unsigned	tf_r12;
	unsigned	tf_r13;
	unsigned	tf_r14;
	unsigned	tf_r15;
	unsigned	tf_r16;
	unsigned	tf_r17;
	unsigned	tf_r18;
	unsigned	tf_t4;		/* r19 */
	unsigned	tf_arg3;	/* r23 */
	unsigned	tf_arg2;	/* r24 */
	unsigned	tf_arg1;	/* r25 */
	unsigned	tf_arg0;	/* r26 */
	unsigned	tf_dp;		/* r27 */
	unsigned	tf_ret0;	/* r28 */
	unsigned	tf_ret1;	/* r29 */
	unsigned	tf_r31;
	unsigned	tf_sr0;
	unsigned	tf_sr1;
	unsigned	tf_sr2;
	unsigned	tf_sr4;
	unsigned	tf_sr5;
	unsigned	tf_sr6;
	unsigned	tf_sr7;
	unsigned	tf_pidr2;	/* cr9 */
	unsigned	tf_pidr3;	/* cr12 */
	unsigned	tf_pidr4;	/* cr13 */
	unsigned	tf_rctr;	/* cr0 */
	unsigned	tf_ccr;		/* cr10 */
	unsigned	tf_eirr;	/* cr23 - DDB */
	unsigned	tf_hptm;	/* cr24 - DDB */
	unsigned	tf_vtop;	/* cr25 - DDB */
	unsigned	tf_cr28;	/*      - DDB */
	unsigned	tf_cr30;	/* uaddr */
d143 1
a143 1
	unsigned	tf_pad[3];	/* pad to 256 bytes */
@


1.11.2.2
log
@Merge in -current from about a week ago
@
text
@d38 2
@


1.11.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d70 1
a70 1
 *	pa-risc stack conventions, and its dependencies in the code (;
d136 1
d141 1
a141 1
	unsigned	tf_pad[4];	/* pad to 256 bytes */
@


1.11.2.4
log
@Merge with the trunk
@
text
@d4 1
a4 1
 * Copyright (c) 1999-2004 Michael Shalayeff
d15 5
@


1.10
log
@fix argument access macro (+1 fuzz), align frame per hp requirements
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.9 1999/09/11 23:49:37 mickey Exp $	*/
d67 10
d78 16
d95 3
a116 3
	u_int	tf_t3;		/* r20 */
	u_int	tf_t2;		/* r21 */
	u_int	tf_t1;		/* r22 */
a123 1
	u_int	tf_sp;		/* r30 */
a127 1
	u_int	tf_sr3;
a131 1
	u_int	tf_pidr1;	/* cr8 */
a135 1
	u_int	tf_eiem;	/* cr15 */
a136 9
	u_int	tf_sar;		/* cr11 */
	u_int	tf_iisq_head;	/* cr17 */
	u_int	tf_iisq_tail;
	u_int	tf_iioq_head;	/* cr18 */
	u_int	tf_iioq_tail;
	u_int	tf_iir;		/* cr19 */
	u_int	tf_isr;		/* cr20 */
	u_int	tf_ior;		/* cr21 */
	u_int	tf_ipsw;	/* cr22 */
d141 1
a141 1
	u_int	tf_cr30;	/* KSP */
@


1.9
log
@define call frame offsets and argument access macros, add space for cr28 in trapframe
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.8 1999/08/14 03:34:07 mickey Exp $	*/
d45 1
a45 1
#define	HPPA_FRAME_ARG(n)	(-(32 + 4*(n)))
d47 1
a47 1
#define	HPPA_FRAME_SIZE		(48)
@


1.8
log
@littel perfomance rearngement, also cr23 and cr28 for ddb
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.7 1999/07/20 14:13:32 mickey Exp $	*/
d24 8
a31 7
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d45 11
a55 14
#define	HPPA_FRAME_ARGSOFF	(18 * sizeof(register_t))

#ifndef _LOCORE
	/* size of frame is 32*sizeof(register_t) */
struct hppa_frame {
	register_t f_rp;
	register_t f_r3 , f_r4 , f_r5 , f_r6 , f_r7 , f_r8 , f_r9 , f_r10,
		   f_r11, f_r12, f_r13, f_r14, f_r15, f_r16, f_r17, f_r18;
	register_t f_args[HPPA_FRAME_NARGS];
	register_t f_sp;
	register_t f_pad[2];
	/* locals goes here */
};
#endif /* _LOCORE */
d60 4
a63 4
#define HPPA_PC_PRIV_MASK    3
#define HPPA_PC_PRIV_KERN    0
#define HPPA_PC_PRIV_USER    3
#define USERMODE(pc)    ((((register_t)pc) & HPPA_PC_PRIV_MASK) != HPPA_PC_PRIV_KERN)
d128 1
d130 1
a130 1
	u_int	tf_pad[4];	/* pad to 256 bytes */
@


1.7
log
@export cr28 for DEBUGging purposes
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.6 1999/06/18 05:19:59 mickey Exp $	*/
a101 11
	u_int	tf_sar;		/* cr11 */
	u_int	tf_iioq_head;
	u_int	tf_iisq_head;
	u_int	tf_iioq_tail;
	u_int	tf_iisq_tail;
	u_int	tf_eiem;	/* cr15 */
	u_int	tf_iir;		/* cr19 */
	u_int	tf_isr;		/* cr20 */
	u_int	tf_ior;		/* cr21 */
	u_int	tf_ipsw;	/* cr22 */
	u_int	tf_sr4;
d106 1
a109 1
	u_int	tf_rctr;	/* cr0 */
a111 1
	u_int	tf_ccr;		/* cr10 */
d114 16
a129 4
	u_int	tf_hptm;	/* cr24 */
	u_int	tf_vtop;	/* cr25 */
	u_int	tf_tr2;		/* cr26 */
	u_int	tf_cr28;
@


1.6
log
@do not include fpu regs into trapframe, according to the
lazy fpu context switching it could be well saved into pcb.
this brings trapframe to 256 bytes (including 5 spare words).
adjust all the code to deal w/ moved fpu regs save area.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.5 1999/04/20 19:49:35 mickey Exp $	*/
d52 1
a53 1
	register_t f_args[HPPA_FRAME_NARGS];
d129 1
d131 1
a131 1
	u_int	tf_pad[5];	/* pad to 256 bytes */
@


1.5
log
@name changes, add stack frame, better USERMODE()
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.4 1998/12/29 21:52:37 mickey Exp $	*/
d130 1
a130 1
	u_int64_t tf_fpregs[HPPA_NFPREGS];
@


1.4
log
@fix special tr* registers names, spaces vs tabs
@
text
@d1 31
a31 1
/*	$OpenBSD: frame.h,v 1.3 1998/10/30 19:22:43 mickey Exp $	*/
d37 21
a57 1
#define	FRAME_PC	(33*4)
d65 2
a66 1
#define USERMODE(pc)    (((pc) & HPPA_PC_PRIV_MASK) != HPPA_PC_PRIV_KERN)
d70 59
a128 60
	u_int	flags;
	u_int	r1;
	u_int	rp;          /* r2 */
	u_int	r3;          /* frame pointer when -g */
	u_int	r4;
	u_int	r5;
	u_int	r6;
	u_int	r7;
	u_int	r8;
	u_int	r9;
	u_int	r10;
	u_int	r11;
	u_int	r12;
	u_int	r13;
	u_int	r14;
	u_int	r15;
	u_int	r16;
	u_int	r17;
	u_int	r18;
	u_int	t4;	/* r19 */
	u_int	t3;	/* r20 */
	u_int	t2;	/* r21 */
	u_int	t1;	/* r22 */
	u_int	arg3;	/* r23 */
	u_int	arg2;	/* r24 */
	u_int	arg1;	/* r25 */
	u_int	arg0;	/* r26 */
	u_int	dp;	/* r27 */
	u_int	ret0;	/* r28 */
	u_int	ret1;	/* r29 */
	u_int	sp;	/* r30 */
	u_int	r31;
	u_int	sar;	/* cr11 */
	u_int	iioq_head;
	u_int	iisq_head;
	u_int	iioq_tail;
	u_int	iisq_tail;
	u_int	eiem;	/* cr15 */
	u_int	iir;	/* cr19 */
	u_int	isr;	/* cr20 */
	u_int	ior;	/* cr21 */
	u_int	ipsw;	/* cr22 */
	u_int	sr4;
	u_int	sr0;
	u_int	sr1;
	u_int	sr2;
	u_int	sr3;
	u_int	sr5;
	u_int	sr6;
	u_int	sr7;
	u_int	rctr;	/* cr0 */
	u_int	pidr1;	/* cr8 */
	u_int	pidr2;	/* cr9 */
	u_int	ccr;	/* cr10 */
	u_int	pidr3;	/* cr12 */
	u_int	pidr4;	/* cr13 */
	u_int	hptm;	/* cr24 */
	u_int	vtop;	/* cr25 */
	u_int	tr2;	/* cr26 */
	u_int	fpu; 
d130 1
a130 1
	int tf_regs[10];
@


1.3
log
@USERMODE() and FRAME_PC definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.2 1998/07/07 21:32:40 mickey Exp $	*/
d38 12
a49 12
	u_int	t4;          /* r19 */
	u_int	t3;          /* r20 */
	u_int	t2;          /* r21 */
	u_int	t1;          /* r22 */
	u_int	arg3;        /* r23 */
	u_int	arg2;        /* r24 */
	u_int	arg1;	      /* r25 */
	u_int	arg0;	      /* r26 */
	u_int	dp;	      /* r27 */
	u_int	ret0;	      /* r28 */
	u_int	ret1;	      /* r29 */
	u_int	sp;	      /* r30 */
d51 1
a51 1
	u_int	sar;	      /* cr11 */
d56 5
a60 5
	u_int	eiem;        /* cr15 */
	u_int	iir;         /* cr19 */
	u_int	isr;         /* cr20 */
	u_int	ior;         /* cr21 */
	u_int	ipsw;	      /* cr22 */
d69 9
a77 9
	u_int	rctr;         /* cr0 */
	u_int	pidr1;        /* cr8 */
	u_int	pidr2;        /* cr9 */
	u_int	ccr;	       /* cr10 */
	u_int	pidr3;        /* cr12 */
	u_int	pidr4;        /* cr13 */
	u_int	ptov;         /* cr24 */
	u_int	tr1;          /* cr25 */
	u_int	tr2;          /* cr26 */
@


1.2
log
@more includes
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.1 1998/06/23 19:45:22 mickey Exp $	*/
d4 2
a5 2
#ifndef _HPPA_FRAME_H_
#define _HPPA_FRAME_H_
d7 9
a15 1
#define	FRAME_PC	0
d84 1
a84 1
#endif /* !_HPPA_FRAME_H_ */
@


1.1
log
@some includes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d9 1
d11 61
a71 1
	int i;
d74 1
d76 1
a76 1
#endif
@

