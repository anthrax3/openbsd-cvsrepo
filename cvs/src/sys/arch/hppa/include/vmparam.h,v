head	1.47;
access;
symbols
	OPENBSD_6_0:1.47.0.4
	OPENBSD_6_0_BASE:1.47
	OPENBSD_5_9:1.47.0.2
	OPENBSD_5_9_BASE:1.47
	OPENBSD_5_8:1.46.0.6
	OPENBSD_5_8_BASE:1.46
	OPENBSD_5_7:1.46.0.2
	OPENBSD_5_7_BASE:1.46
	OPENBSD_5_6:1.43.0.4
	OPENBSD_5_6_BASE:1.43
	OPENBSD_5_5:1.42.0.4
	OPENBSD_5_5_BASE:1.42
	OPENBSD_5_4:1.39.0.8
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.39.0.6
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.39.0.4
	OPENBSD_5_2_BASE:1.39
	OPENBSD_5_1_BASE:1.39
	OPENBSD_5_1:1.39.0.2
	OPENBSD_5_0:1.38.0.2
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.37.0.2
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.36.0.2
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.35.0.4
	OPENBSD_4_7_BASE:1.35
	OPENBSD_4_6:1.35.0.6
	OPENBSD_4_6_BASE:1.35
	OPENBSD_4_5:1.35.0.2
	OPENBSD_4_5_BASE:1.35
	OPENBSD_4_4:1.33.0.10
	OPENBSD_4_4_BASE:1.33
	OPENBSD_4_3:1.33.0.8
	OPENBSD_4_3_BASE:1.33
	OPENBSD_4_2:1.33.0.6
	OPENBSD_4_2_BASE:1.33
	OPENBSD_4_1:1.33.0.4
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.33.0.2
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.32.0.4
	OPENBSD_3_9_BASE:1.32
	OPENBSD_3_8:1.32.0.2
	OPENBSD_3_8_BASE:1.32
	OPENBSD_3_7:1.31.0.2
	OPENBSD_3_7_BASE:1.31
	OPENBSD_3_6:1.28.0.4
	OPENBSD_3_6_BASE:1.28
	SMP_SYNC_A:1.28
	SMP_SYNC_B:1.28
	OPENBSD_3_5:1.28.0.2
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.27.0.2
	OPENBSD_3_4_BASE:1.27
	UBC_SYNC_A:1.27
	OPENBSD_3_3:1.24.0.2
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.22.0.2
	OPENBSD_3_1_BASE:1.22
	UBC_SYNC_B:1.24
	UBC:1.20.0.2
	UBC_BASE:1.20
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.9.0.8
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.6
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.4
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.47
date	2015.11.01.20.09.59;	author miod;	state Exp;
branches;
next	1.46;
commitid	sHllVPiKPJBfwmTJ;

1.46
date	2015.02.10.10.02.55;	author tedu;	state Exp;
branches;
next	1.45;
commitid	X8GpdpDRNqUOBsMT;

1.45
date	2014.10.09.04.01.27;	author tedu;	state Exp;
branches;
next	1.44;
commitid	wAdRwhtUH36R0JxT;

1.44
date	2014.10.09.03.59.59;	author tedu;	state Exp;
branches;
next	1.43;
commitid	I0KLtD9aVxAdm6aW;

1.43
date	2014.05.31.20.11.11;	author miod;	state Exp;
branches;
next	1.42;
commitid	0tTWseP2VVvnz1EB;

1.42
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2014.01.24.05.21.19;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.39;

1.39
date	2011.11.10.22.48.13;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2011.05.30.22.25.21;	author oga;	state Exp;
branches;
next	1.37;

1.37
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2010.04.23.21.34.40;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2008.09.06.19.49.05;	author kettenis;	state Exp;
branches;
next	1.34;

1.34
date	2008.08.22.10.41.37;	author kurt;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.04.17.21.24;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2004.11.28.01.36.38;	author mickey;	state Exp;
branches;
next	1.30;

1.30
date	2004.10.26.20.19.12;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	2004.10.12.15.16.25;	author mickey;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.25.01.53.12;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2003.04.16.07.31.38;	author mickey;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.04.00.41.34;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.30.00.19.14;	author mickey;	state Exp;
branches;
next	1.24;

1.24
date	2002.10.17.02.21.08;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	2002.09.05.18.41.19;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.15.21.44.18;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.17.22.59.52;	author maja;	state Exp;
branches;
next	1.20;

1.20
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.24.04.08.51;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.22.18.00.09;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.12.20.06.11;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.18.10.47.04;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.27.06.19.45;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.06.00.45.49;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.05.20.56.37;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.22.23.50.53;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.12.23.37.01;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	99.09.18.20.05.55;	author mickey;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	99.08.25.14.59.16;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	99.05.12.15.52.28;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	99.04.20.19.29.13;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	98.11.23.03.32.54;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	98.10.30.19.35.29;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	98.08.29.01.20.38;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.07.29.00.40.03;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.07.21.32.45;	author mickey;	state Exp;
branches;
next	;

1.9.4.1
date	2001.04.18.16.06.29;	author niklas;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2001.07.04.10.16.12;	author niklas;	state Exp;
branches;
next	1.9.4.3;

1.9.4.3
date	2001.10.31.02.52.47;	author nate;	state Exp;
branches;
next	1.9.4.4;

1.9.4.4
date	2001.12.05.00.39.10;	author niklas;	state Exp;
branches;
next	1.9.4.5;

1.9.4.5
date	2002.03.06.00.57.22;	author niklas;	state Exp;
branches;
next	1.9.4.6;

1.9.4.6
date	2002.03.28.10.31.03;	author niklas;	state Exp;
branches;
next	1.9.4.7;

1.9.4.7
date	2003.03.27.23.26.54;	author niklas;	state Exp;
branches;
next	1.9.4.8;

1.9.4.8
date	2003.05.13.19.41.04;	author ho;	state Exp;
branches;
next	1.9.4.9;

1.9.4.9
date	2004.02.19.10.48.40;	author niklas;	state Exp;
branches;
next	;

1.20.2.1
date	2002.06.11.03.35.37;	author art;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2002.10.29.00.28.03;	author art;	state Exp;
branches;
next	1.20.2.3;

1.20.2.3
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.47
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: vmparam.h,v 1.46 2015/02/10 10:02:55 tedu Exp $	*/

/* 
 * Copyright (c) 1988-1994, The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 *
 * 	Utah $Hdr: vmparam.h 1.16 94/12/16$
 */

#ifndef _MACHINE_VMPARAM_H_
#define _MACHINE_VMPARAM_H_

/*
 * Machine dependent constants for HP PA
 */
#define	USRSTACK	0x78000000UL	/* start (bottom) of user stack */
#define	SYSCALLGATE	0xC0000000	/* syscall gateway page */

/*
 * Virtual memory related constants, all in bytes
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(512*1024*1024UL)	/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(1*1024*1024*1024UL)	/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		(32*1024*1024UL)	/* max stack size */
#endif

#define	STACKGAP_RANDOM	256*1024

#ifndef USRIOSIZE
#define	USRIOSIZE	((2*HPPA_PGALIAS)/PAGE_SIZE)	/* 8mb */
#endif

/*
 * PTEs for system V style shared memory.
 * This is basically slop for kmempt which we actually allocate (malloc) from.
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	8192	/* 32mb */
#endif

/* user/kernel map constants */
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define	VM_MAXUSER_ADDRESS	((vaddr_t)0xc0000000)
#define	VM_MAX_ADDRESS		VM_MAXUSER_ADDRESS
#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t)0xc0001000)
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xef000000)

/* use a small range for PIE to minimize mmap pressure */
#define	VM_PIE_MIN_ADDR		PAGE_SIZE
#define	VM_PIE_MAX_ADDR		0x40000UL

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

#define	VM_PHYSSEG_MAX		1	/* this many physmem segments */
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_RANDOM

#define	VM_PHYSSEG_NOADD	/* XXX until uvm code is fixed */

#endif	/* _MACHINE_VMPARAM_H_ */
@


1.46
log
@increase min address to page size for all remaining min == 0 systems.
not necessary, but consistent with other platforms. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.45 2014/10/09 04:01:27 tedu Exp $	*/
d32 2
a33 7
/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the bottm (start) of the user stack.
 */
#define	USRTEXT		PAGE_SIZE		/* Start of user .text */
#define	USRSTACK	0x78000000UL		/* Start of user stack */
#define	SYSCALLGATE	0xC0000000		/* syscall gateway page */
@


1.45
log
@revert unintentional commit unrelated to LKM
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.44 2014/10/09 03:59:59 tedu Exp $	*/
d77 1
a77 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.44
log
@remove LKM devices
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.43 2014/05/31 20:11:11 miod Exp $	*/
d77 1
a77 1
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
@


1.43
log
@Reduce MAXSSIZ to 32MB to match all other platforms; noticed by tobiasu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.42 2014/01/30 18:16:41 miod Exp $	*/
d77 1
a77 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.42
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.41 2014/01/24 05:21:19 miod Exp $	*/
d59 1
a59 1
#define	MAXSSIZ		(128*1024*1024UL)	/* max stack size */
@


1.41
log
@Do not protect struct vm_page_md with defined(_KERNEL), for userland uvm
grovellers need to know it to be able to get the right size for struct
vm_page.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.40 2014/01/23 22:06:29 miod Exp $	*/
a93 18

#if !defined(_LOCORE)

#include <sys/lock.h>

struct pv_entry;
struct vm_page_md {
	struct simplelock pvh_lock;	/* locks every pv on this list */
	struct pv_entry	*pvh_list;	/* head of list (locked by pvh_lock) */
	u_int		pvh_attrs;	/* to preserve ref/mod */
};

#define	VM_MDPAGE_INIT(pg) do {				\
	simple_lock_init(&(pg)->mdpage.pvh_lock);	\
	(pg)->mdpage.pvh_list = NULL;			\
	(pg)->mdpage.pvh_attrs = 0;			\
} while (0)
#endif
@


1.40
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.39 2011/11/10 22:48:13 deraadt Exp $	*/
d95 1
a95 1
#if defined(_KERNEL) && !defined(_LOCORE)
@


1.39
log
@mindless unification with hppa64; remove meaningless differences before
attacking the complicated stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.38 2011/05/30 22:25:21 oga Exp $	*/
a98 1
#define __HAVE_VM_PAGE_MD
@


1.38
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.37 2010/12/15 05:30:19 tedu Exp $	*/
d62 1
a62 1
#define STACKGAP_RANDOM	256*1024
a114 1

@


1.37
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.36 2010/04/23 21:34:40 deraadt Exp $	*/
a93 4

#define	VM_NFREELIST		2
#define	VM_FREELIST_DEFAULT	0
#define	VM_FREELIST_ARCH	1
@


1.36
log
@Merge the only relevant (for now) parts of simplelock.h into lock.h
since it is time to start transitioning away from the no-op behaviour.
ok oga kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.35 2008/09/06 19:49:05 kettenis Exp $	*/
d51 3
@


1.35
log
@Fix comment to catch up with HPPA_PGALIAS change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.34 2008/08/22 10:41:37 kurt Exp $	*/
d97 3
@


1.34
log
@Set PIE address range to avoid or minimize mmap pressure due to limited
address space. The space between PAGE_SIZE and the non-pie fixed link
address creates no mmap pressure so use that space for PIE. However on
hppa the non-pie fixed link address is PAGE_SIZE so just use a small range
for PIE to minimize mmap pressure.

okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.33 2006/06/04 17:21:24 miod Exp $	*/
d62 1
a62 1
#define	USRIOSIZE	((2*HPPA_PGALIAS)/PAGE_SIZE)	/* 2mb */
@


1.33
log
@Shrink VM_PHYSSEG_MAX to 1 on platforms where physical memory is contiguous
and there is only one call to uvm_page_physload().
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.32 2005/04/11 15:13:01 deraadt Exp $	*/
d79 4
@


1.32
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.31 2004/11/28 01:36:38 mickey Exp $	*/
d83 2
a84 2
#define	VM_PHYSSEG_MAX	8	/* this many physmem segments */
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BIGFIRST
@


1.31
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.30 2004/10/26 20:19:12 mickey Exp $	*/
d58 2
@


1.30
log
@better higher limits
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.29 2004/10/12 15:16:25 mickey Exp $	*/
a69 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.29
log
@increase DFLSSIZ to smth more common in between other archs
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.28 2004/01/25 01:53:12 millert Exp $	*/
d37 1
a37 1
#define	USRSTACK	0x68FF3000		/* Start of user stack */
d44 1
a44 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d50 1
a50 1
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
d56 1
a56 1
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
@


1.28
log
@Crank SHMMAXPGS to 32mb; OK mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.27 2003/04/16 07:31:38 mickey Exp $	*/
d53 1
a53 1
#define	DFLSSIZ		(512*1024)		/* initial stack size limit */
@


1.27
log
@better limits and clean out old consts and comments
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.26 2003/04/04 00:41:34 mickey Exp $	*/
d68 1
a68 1
#define SHMMAXPGS	((1024*1024*10)/NBPG)	/* 10mb */
@


1.26
log
@lower the max kernel vm address since there might be proms right below the io
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.25 2003/03/30 00:19:14 mickey Exp $	*/
d34 1
a34 4
 * is the top (end) of the user stack.  LOWPAGES and HIGHPAGES are
 * the number of pages from the beginning of the P0 region to the
 * beginning of the text and from the beginning of the P1 region to the
 * beginning of the stack respectively.
d36 1
a36 1
#define	USRTEXT		0x00002000		/* Start of user .text */
a37 2
#define	LOWPAGES	0
#define	HIGHPAGES	UPAGES
d44 1
a44 1
#define	MAXTSIZ		(0x40000000)		/* max text size */
d50 1
a50 1
#define	MAXDSIZ		(USRSTACK-MAXTSIZ)	/* max data size */
@


1.25
log
@better MAXSSIZ
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.24 2002/10/17 02:21:08 mickey Exp $	*/
d92 1
a92 1
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xf0000000)
@


1.24
log
@convert to use vm_page_md instead of pmap_physseg, make code smaller and simpler, indeed; after art's suggestion and by looking into his diffs oneyed
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.23 2002/09/05 18:41:19 mickey Exp $	*/
d61 1
a61 1
#define	MAXSSIZ		(UADDR-USRSTACK)	/* max stack size */
@


1.23
log
@move the kernel virtual away from the physical addresses
and equivalently map the whole physical.
this allows a lot of simplification in how kernel
deals w/ page tables and physical pages.
avoid series of bugs related to that.
check for aliased mappings (none found so far),
and properly flush/purge pages on zero/copy.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.22 2002/03/15 21:44:18 mickey Exp $	*/
d106 7
a112 4
#ifndef _LOCORE
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pv_head *pvhead;
d114 6
@


1.22
log
@rewrite a pmap to use multilevel page tables.
lower 12 bits contain the perms, no unused bits left,
but a couple for off-tlb use (as the ref implemented now).
do not use the hvt, which might get some use later
if proven to speed thigs up, tlb handlers would po
another dozen of insns though, but if that's worth its...
move on the data seg and map kernel text rdonly (idea form fredette),
since all of the page0 mods done before that we are all fine
except for some viper fluff, but later w/ that.
this also picks up a bit more of ddb magic for bpt and ss.
tlb handlers can use a little bit more of attention,
but things, visually, seem to be much faster already, --
sorry, no benchmarks for now.

* effort sponsored in part by the `henry st. old ale house'
* and mr.pete and mr.lee in particular in thier generous entrirety.
* the proj took a little more that 72man*h as it was expected,
* but within murhy's law estimations.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.21 2002/02/17 22:59:52 maja Exp $	*/
d91 1
a91 1
#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
d104 1
a104 1
#define	VM_FREELIST_FIRST16	1
@


1.21
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2001/12/05 16:25:44 art Exp $	*/
d109 1
a109 1
	struct pv_entry *pvent;
@


1.20
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.19 2001/11/30 17:37:43 art Exp $	*/
a94 1
#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
@


1.20.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2001/12/05 16:25:44 art Exp $	*/
d95 1
d110 1
a110 1
	struct pv_head *pvhead;
@


1.20.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20.2.1 2002/06/11 03:35:37 art Exp $	*/
d91 1
a91 1
#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t)0xc0001000)
d104 1
a104 1
#define	VM_FREELIST_ARCH	1
d106 4
a109 7
#if defined(_KERNEL) && !defined(_LOCORE)
#define __HAVE_VM_PAGE_MD
struct pv_entry;
struct vm_page_md {
	struct simplelock pvh_lock;	/* locks every pv on this list */
	struct pv_entry	*pvh_list;	/* head of list (locked by pvh_lock) */
	u_int		pvh_attrs;	/* to preserve ref/mod */
a110 6

#define	VM_MDPAGE_INIT(pg) do {				\
	simple_lock_init(&(pg)->mdpage.pvh_lock);	\
	(pg)->mdpage.pvh_list = NULL;			\
	(pg)->mdpage.pvh_attrs = 0;			\
} while (0)
@


1.20.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 4
a37 1
 * is the bottm (start) of the user stack.
d39 1
a39 1
#define	USRTEXT		PAGE_SIZE		/* Start of user .text */
d41 2
d49 1
a49 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d55 1
a55 1
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
d61 1
a61 1
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
d92 1
a92 1
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xef000000)
@


1.19
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2001/10/24 04:08:51 mickey Exp $	*/
a95 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
@


1.18
log
@make libc compile
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2001/09/22 18:00:09 miod Exp $	*/
d109 1
@


1.17
log
@Remove more old, dusty, unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2001/08/12 20:06:11 miod Exp $	*/
d108 1
a108 1
#ifdef _KERNEL
@


1.16
log
@KUSER_AREA, BTOPUSRSTACK, P1PAGES are never used, so get rid of them.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2001/07/18 10:47:04 art Exp $	*/
a63 10
/*
 * Default sizes of swap allocation chunks (see dmap.h).
 * The actual values may be changed in vminit() based on MAXDSIZ.
 * With MAXDSIZ of 64Mb and NDMAP of 62, dmmax will be 4096.
 * DMMIN should be at least ctod(1) so that vtod() works.
 * vminit() ensures this.
 */
#define	DMMIN	32			/* smallest swap allocation */
#define	DMMAX	4096			/* largest potential swap allocation */

a85 9

/*
 * A swapped in process is given a small amount of core without being bothered
 * by the page replacement algorithm.  Basically this says that if you are
 * swapped in you deserve some resources.  We protect the last SAFERSS
 * pages against paging and will just swap you out rather than paging you.
 */
#define	SAFERSS		(0x4000/NBPG)	/* nominal ``small'' resident set size
					   protected against replacement */
@


1.15
log
@Get rid of the PMAP_NEW option by making it mandatory for all archs.
The archs that didn't have a proper PMAP_NEW now have a dummy implementation
with wrappers around the old functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2001/06/27 06:19:45 art Exp $	*/
a40 2
#define	BTOPUSRSTACK	btop(USRSTACK)		/* btop(USRSTACK) */
#define	P1PAGES		2
@


1.14
log
@MNN is no longer an option.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2001/05/06 00:45:49 art Exp $	*/
a127 2

#define	PMAP_NEW
@


1.13
log
@Update some comments wrt. the CLSIZE changes.
And remove that memory price comment from 1981. It is amusing, but also
confusing because the math in there is only correct on vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2001/05/05 20:56:37 art Exp $	*/
a128 1
#define	MACHINE_NEW_NONCONTIG	1	/* defined this until we rely on vm */
@


1.12
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2001/03/22 23:50:53 mickey Exp $	*/
a103 7
 * Note that each process has at least UPAGES+CLSIZE pages which are not
 * paged anyways (this is currently 8+2=10 pages or 5k bytes), so this
 * number just means a swapped in process is given around 25k bytes.
 * Just for fun: current memory prices are 4600$ a megabyte on VAX (4/22/81),
 * so we loan each swapped in process memory worth 100$, or just admit
 * that we don't consider it worthwhile and swap it out to disk which costs
 * $30/mb or about $0.75.
@


1.11
log
@pmap_physseg is kernel-only business
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2001/01/12 23:37:01 mickey Exp $	*/
d77 1
a77 1
#define	USRIOSIZE	((2*HPPA_PGALIAS)/CLBYTES)	/* 2mb */
a88 5
 * The size of the clock loop.
 */
#define	LOOPPAGES	(maxfree - firstfree)

/*
d124 2
a125 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*CLBYTES)
#define VM_PHYS_SIZE		(USRIOSIZE*CLBYTES)
@


1.10
log
@move pmap_physseg back to vmparam.h where it belongs.
define PMAP_PREFER in pmap.h, as afar as i understand it works.
no more pmap_changebit()
grow USRIOSIZE in vmparam.h
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 1999/09/18 20:05:55 mickey Exp $	*/
d144 1
d148 1
@


1.9
log
@PMAP_NEW, also kill last vm_{size,offset}_t's
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 1999/08/25 14:59:16 mickey Exp $	*/
d77 1
a77 1
#define	USRIOSIZE	128
d144 4
d149 1
@


1.9.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2001/03/22 23:50:53 mickey Exp $	*/
d77 1
a77 1
#define	USRIOSIZE	((2*HPPA_PGALIAS)/CLBYTES)	/* 2mb */
a143 6
#ifdef _KERNEL
struct pmap_physseg {
	struct pv_entry *pvent;
};
#endif

a144 1

@


1.9.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9.4.1 2001/04/18 16:06:29 niklas Exp $	*/
d77 1
a77 1
#define	USRIOSIZE	((2*HPPA_PGALIAS)/PAGE_SIZE)	/* 2mb */
d89 5
d109 7
d129 2
a130 2
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)
d141 1
@


1.9.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9.4.2 2001/07/04 10:16:12 niklas Exp $	*/
d41 2
d66 10
d99 9
d129 3
a131 1
#ifndef _LOCORE
@


1.9.4.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9.4.3 2001/10/31 02:52:47 nate Exp $	*/
a108 1
#define __HAVE_PMAP_PHYSSEG
@


1.9.4.5
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 2
@


1.9.4.6
log
@Merge in -current from about a week ago
@
text
@d109 1
a109 1
	struct pv_head *pvhead;
@


1.9.4.7
log
@Sync the SMP branch with 3.3
@
text
@d91 1
a91 1
#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t)0xc0001000)
d104 1
a104 1
#define	VM_FREELIST_ARCH	1
d106 4
a109 7
#if defined(_KERNEL) && !defined(_LOCORE)
#define __HAVE_VM_PAGE_MD
struct pv_entry;
struct vm_page_md {
	struct simplelock pvh_lock;	/* locks every pv on this list */
	struct pv_entry	*pvh_list;	/* head of list (locked by pvh_lock) */
	u_int		pvh_attrs;	/* to preserve ref/mod */
a110 6

#define	VM_MDPAGE_INIT(pg) do {				\
	simple_lock_init(&(pg)->mdpage.pvh_lock);	\
	(pg)->mdpage.pvh_list = NULL;			\
	(pg)->mdpage.pvh_attrs = 0;			\
} while (0)
@


1.9.4.8
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9.4.7 2003/03/27 23:26:54 niklas Exp $	*/
d34 4
a37 1
 * is the bottm (start) of the user stack.
d39 1
a39 1
#define	USRTEXT		PAGE_SIZE		/* Start of user .text */
d41 2
d49 1
a49 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d55 1
a55 1
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
d61 1
a61 1
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
d92 1
a92 1
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xef000000)
@


1.9.4.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 1
a68 1
#define SHMMAXPGS	8192	/* 32mb */
@


1.8
log
@n+1 approximation step for the user space constants
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 1999/05/12 15:52:28 mickey Exp $	*/
d142 1
@


1.7
log
@mask wrong code in uvm out, also bump VM_MAX_KERNEL_ADDRESS up to the io space
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 1999/04/20 19:29:13 mickey Exp $	*/
d51 1
a51 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d57 1
a57 1
#define	MAXDSIZ		(64*1024*1024)		/* max data size */
d63 1
a63 1
#define	MAXSSIZ		MAXDSIZ			/* max stack size */
@


1.6
log
@uvm names and definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 1998/11/23 03:32:54 mickey Exp $	*/
a46 2
#define	INTSTACK_SIZE	(5 * NBPG)		/* interrupt stack size */

d125 1
a125 1
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t)0xc0000000)
d134 2
@


1.5
log
@more reasonable VM_MAX_KERNEL_ADDRESS
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 1998/10/30 19:35:29 mickey Exp $	*/
d42 1
a42 1
#define	P1PAGES		0
d119 1
a119 1
#define	SAFERSS		(16384/NBPG)	/* nominal ``small'' resident set size
d123 2
a124 2
#define	VM_MIN_ADDRESS		((vm_offset_t)0)
#define	VM_MAXUSER_ADDRESS	((vm_offset_t)0xc0000000)
d126 2
a127 2
#define	VM_MIN_KERNEL_ADDRESS	((vm_offset_t)0)
#define	VM_MAX_KERNEL_ADDRESS	((vm_offset_t)0xF0000000)
a133 2
#define MACHINE_NEW_NONCONTIG	/* VM <=> pmap interface modifier */

d136 6
@


1.4
log
@cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 1998/08/29 01:20:38 mickey Exp $	*/
d127 1
a127 1
#define	VM_MAX_KERNEL_ADDRESS	((vm_offset_t)0xFFFF0000)
@


1.3
log
@reduce code limit
add new_noncontig definitions
syscall gateway define
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 1998/07/29 00:40:03 mickey Exp $	*/
d26 2
a27 2
#ifndef _HPPA_VMPARAM_H_
#define _HPPA_VMPARAM_H_
d75 1
a75 1
#define	DMMIN	64			/* smallest swap allocation */
a76 1
#define	DMTEXT	4096			/* swap allocation for text */
d78 3
a80 6
/*
 * Sizes of the system and user portions of the system page table.
 */
/* SYSPTSIZE IS SILLY; IT SHOULD BE COMPUTED AT BOOT TIME */
#define	SYSPTSIZE	((1024*1024*64)/NBPG)	/* 64mb */
#define	USRPTSIZE	(8 * NPTEPG)		/* 32mb */
d139 1
a139 1
#endif	/* _HPPA_VMPARAM_H_ */
@


1.2
log
@real user .text base
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 1998/07/07 21:32:45 mickey Exp $	*/
d45 1
d53 1
a53 1
#define	MAXTSIZ		(16*1024*1024)		/* max text size */
d137 5
@


1.1
log
@more includes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
#define	USRTEXT		UTEXTSEG
@

