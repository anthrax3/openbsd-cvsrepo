head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.10
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.12
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2015.05.02.10.59.47;	author dlg;	state Exp;
branches;
next	1.5;
commitid	cdsn2FXYvekLGlpq;

1.5
date	2014.01.30.15.18.51;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.10.04.07.18;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.29.15.01.59;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.05.12.06.17;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.05.12.00.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@rework hppa mutexes.

this is largely based on src/sys/arch/alpha/alpha/mutex.c r1.14 and
src/sys/arch/sgi/sgi/mutex.c r1.15

always and explicitely record which cpu owns the lock (or NULL if
noone owns it). improve the mutex diagnostics/asserts so they operate
on the mtx_owner field rather than mtx_lock. previously the asserts
would assume the lock cpu owns the lock if any of them own the lock,
which blows up badly.

hppa hasnt got good atomic cpu opcodes, so this still relies on
ldcws to serialise access to the lock.

while im here i also shuffled the code. on MULTIPROCESSOR systems
instead of duplicating code between mtx_enter and mtx_enter_try,
mtx_enter simply loops on mtx_enter_try until it succeeds.

this also provides an alternative implementation of mutexes on
!MULTIPROCESSOR systems that avoids interlocking opcodes. mutexes
wont contend on UP boxes, theyre basically wrappers around spls.
we can just do the splraise, stash the owner as a guard value for
DIAGNOSTIC and return. similarly, mtx_enter_try on UP will never
fail, so we can just call mtx_enter and return 1.

tested by and ok kettenis@@ jsing@@
@
text
@/*	$OpenBSD: mutex.h,v 1.5 2014/01/30 15:18:51 kettenis Exp $	*/

/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#ifndef _MACHINE_MUTEX_H_
#define _MACHINE_MUTEX_H_

#define	MUTEX_UNLOCKED	{ 1, 1, 1, 1 }

/* Note: mtx_lock must be 16-byte aligned. */
struct mutex {
#ifdef MULTIPROCESSOR
	volatile int mtx_lock[4];
#endif
	int mtx_wantipl;
	int mtx_oldipl;
	void *mtx_owner;
};

/*
 * To prevent lock ordering problems with the kernel lock, we need to
 * make sure we block all interrupts that can grab the kernel lock.
 * The simplest way to achieve this is to make sure mutexes always
 * raise the interrupt priority level to the highest level that has
 * interrupts that grab the kernel lock.
 */
#ifdef MULTIPROCESSOR
#define __MUTEX_IPL(ipl) \
    (((ipl) > IPL_NONE && (ipl) < IPL_AUDIO) ? IPL_AUDIO : (ipl))
#define MUTEX_INITIALIZER(ipl) { MUTEX_UNLOCKED, __MUTEX_IPL((ipl)), 0, NULL }
#else
#define __MUTEX_IPL(ipl) (ipl)
#define MUTEX_INITIALIZER(ipl) { __MUTEX_IPL((ipl)), 0, NULL }
#endif

void __mtx_init(struct mutex *, int);
#define mtx_init(mtx, ipl) __mtx_init((mtx), __MUTEX_IPL((ipl)))

#ifdef DIAGNOSTIC
#define MUTEX_ASSERT_LOCKED(mtx) do {					\
	if ((mtx)->mtx_owner != curcpu())				\
		panic("mutex %p not held in %s", (mtx), __func__);	\
} while (0)

#define MUTEX_ASSERT_UNLOCKED(mtx) do {					\
	if ((mtx)->mtx_owner == curcpu())				\
		panic("mutex %p held in %s", (mtx), __func__);		\
} while (0)
#else
#define MUTEX_ASSERT_LOCKED(mtx) do { } while (0)
#define MUTEX_ASSERT_UNLOCKED(mtx) do { } while (0)
#endif

#define MUTEX_OLDIPL(mtx)	(mtx)->mtx_oldipl

#endif
@


1.5
log
@To prevent lock ordering problems with the kernel lock, we need to make sure
we block all interrupts that can grab the kernel lock.  The simplest way to
achieve this is to make sure mutexes always raise the ipl to the highest
level that has interrupts that grab the kernel lock.  This will allow us
to have "mpsafe" interrupt handlers at lower priority levels.

No change for non-MULTIPROCESSOR kernels.

Tested by juanfra@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.4 2010/01/10 04:07:18 kettenis Exp $	*/
a30 1
#define	MUTEX_LOCKED	{ 0, 0, 0, 0 }
d35 1
d37 1
d53 1
d56 1
a58 2
#define MUTEX_INITIALIZER(ipl) { MUTEX_UNLOCKED, __MUTEX_IPL((ipl)), 0, NULL }

d64 1
a64 2
	if ((mtx)->mtx_lock[0] == 1 && (mtx)->mtx_lock[1] == 1 &&	\
	    (mtx)->mtx_lock[2] == 1 && (mtx)->mtx_lock[3] == 1)		\
d69 1
a69 2
	if ((mtx)->mtx_lock[0] != 1 && (mtx)->mtx_lock[1] != 1 &&	\
	    (mtx)->mtx_lock[2] != 1 && (mtx)->mtx_lock[3] != 1)		\
@


1.4
log
@GCC doesn't respect the aligned attribute for automatic variables.  So
having mutexes on the stack, like dlg@@ added recently to the scsi code,
doesn't work on hppa.  So instead of relying on mutexes being properly
alligned just reserve 4 words and use the one that has the proper alignment.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.3 2009/12/29 15:01:59 jsing Exp $	*/
d42 15
a56 1
void mtx_init(struct mutex *, int);
d58 2
a59 1
#define MUTEX_INITIALIZER(ipl) { MUTEX_UNLOCKED, (ipl), 0, NULL }
@


1.3
log
@Implement MP safe mutexes for hppa.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.h,v 1.1 2007/05/05 12:00:55 miod Exp $	*/
d31 2
a32 2
#define	MUTEX_LOCKED	0
#define	MUTEX_UNLOCKED	1
d36 1
a36 1
	volatile int mtx_lock;
d40 1
a40 1
} __attribute__ ((__aligned__(16)));
d48 2
a49 1
	if ((mtx)->mtx_lock != MUTEX_LOCKED)				\
d54 2
a55 1
	if ((mtx)->mtx_lock != MUTEX_UNLOCKED)				\
@


1.2
log
@Define MUTEX_OLDIPL where they were missing, will be used (reasonably) shortly.
@
text
@d31 4
a34 3
/*
 * Simple non-mp implementation.
 */
d36 1
a36 1
	int mtx_lock;
d39 2
a40 1
};
d44 1
a44 1
#define MUTEX_INITIALIZER(ipl) { 0, (ipl), 0 }
d48 1
a48 1
	if ((mtx)->mtx_lock == 0)					\
d53 1
a53 1
	if ((mtx)->mtx_lock != 0)					\
@


1.1
log
@Simple single-processor only mutex implementation.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 2
@

