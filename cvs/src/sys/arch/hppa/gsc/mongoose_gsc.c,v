head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.54
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.52
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.48
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.44
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.46
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.38
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.42
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.40
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.36
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.34
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.32
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.30
	OPENBSD_5_0:1.1.0.28
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.26
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.24
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.20
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.22
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.18
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.16
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.14
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.12
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.10.30.10.26.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Oops, forgot to cvs add this file in previous commit (mongoos@@gsc attachment).
@
text
@/*	$OpenBSD$	*/

/*
 * Copyright (c) 2004, Miodrag Vallat.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/autoconf.h>

#include <hppa/dev/cpudevs.h>

#include <dev/eisa/eisavar.h>
#include <dev/isa/isavar.h>

#include <hppa/dev/mongoosereg.h>
#include <hppa/dev/mongoosevar.h>

#include <hppa/gsc/gscbusvar.h>

void	mgattach_gsc(struct device *, struct device *, void *);
int	mgmatch_gsc(struct device *, void *, void *);

struct cfattach mg_gsc_ca = {
	sizeof(struct mongoose_softc), mgmatch_gsc, mgattach_gsc
};

int
mgmatch_gsc(struct device *parent, void *cfdata, void *aux)
{
	struct gsc_attach_args *ga = aux;

	if (ga->ga_type.iodc_type != HPPA_TYPE_BHA ||
	    ga->ga_type.iodc_sv_model != HPPA_BHA_WEISA)
		return (0);

	return (1);
}

void
mgattach_gsc(struct device *parent, struct device *self, void *aux)
{
	struct mongoose_softc *sc = (struct mongoose_softc *)self;
	struct gsc_attach_args *ga = aux;
	bus_space_handle_t ioh;

	sc->sc_bt = ga->ga_iot;
	sc->sc_iomap = ga->ga_hpa;

	if (bus_space_map(ga->ga_iot, ga->ga_hpa + MONGOOSE_MONGOOSE,
	    sizeof(struct mongoose_regs), 0, &ioh) != 0) {
		printf(": can't map IO space\n");
		return;
	}
	sc->sc_regs = (struct mongoose_regs *)ioh;

	if (bus_space_map(ga->ga_iot, ga->ga_hpa + MONGOOSE_CTRL,
	    sizeof(struct mongoose_ctrl), 0, &ioh) != 0) {
		printf(": can't map control registers\n");
		bus_space_unmap(ga->ga_iot, (bus_space_handle_t)sc->sc_regs,
		    sizeof(struct mongoose_regs));
		return;
	}
	sc->sc_ctrl = (struct mongoose_ctrl *)ioh;

	if (mgattach_common(sc) != 0)
		return;

	sc->sc_ih = gsc_intr_establish((struct gsc_softc *)parent,
	    ga->ga_irq, IPL_HIGH, mg_intr, sc, sc->sc_dev.dv_xname);
}
@
