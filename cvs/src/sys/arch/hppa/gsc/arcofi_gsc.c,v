head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.26
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.24
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.16
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.10
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2011.12.21.23.12.03;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Work-in-progress driver for the HP ``Audio1'' device found on the HP 9000/425e
(hp300) and the HP9000/705 and 9000/710 (hppa). 8-bit mono, 8KHz, no surprise
since it is based upon a digital phone chip.
Tested on 425e only so far, and playback only; configured in, but disabled,
on hppa kernels until there are positive test reports (I am not sure the
interrupt assignment on hppa is correct).
And now people no longer can joke about audio on hp300.
@
text
@/*	$OpenBSD$	*/

/*
 * Copyright (c) 2011 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/cpu.h>
#include <machine/intr.h>
#include <machine/iomod.h>

#include <sys/audioio.h>
#include <dev/audio_if.h>
#include <dev/ic/arcofivar.h>

#include <hppa/dev/cpudevs.h>
#include <hppa/gsc/gscbusvar.h>

int	arcofi_gsc_match(struct device *, void *, void *);
void	arcofi_gsc_attach(struct device *, struct device *, void *);

const struct cfattach arcofi_gsc_ca = {
	sizeof(struct arcofi_softc),
	arcofi_gsc_match,
	arcofi_gsc_attach
};

int
arcofi_gsc_match(struct device *parent, void *match, void *vaa)
{
	struct gsc_attach_args *ga = vaa;

	if (ga->ga_type.iodc_type == HPPA_TYPE_FIO &&
	    (ga->ga_type.iodc_sv_model == HPPA_FIO_A1 ||
	     ga->ga_type.iodc_sv_model == HPPA_FIO_A1NB))
		return 1;

	return 0;
}

void
arcofi_gsc_attach(struct device *parent, struct device *self, void *vaa)
{
	struct arcofi_softc *sc = (struct arcofi_softc *)self;
	struct gsc_attach_args *ga = vaa;
	unsigned int u;

	for (u = 0; u < ARCOFI_NREGS; u++)
		sc->sc_reg[u] = (u << 2) | 0x01;

	sc->sc_iot = ga->ga_iot;
	if (bus_space_map(sc->sc_iot, ga->ga_hpa, ARCOFI_NREGS << 2, 0,
	    &sc->sc_ioh) != 0) {
		printf(": can't map registers\n");
		return;
	}

	/* XXX no generic IPL_SOFT level available */
	sc->sc_sih = softintr_establish(IPL_SOFTTTY, &arcofi_swintr, sc);
	if (sc->sc_sih == NULL) {
		printf(": can't register soft interrupt\n");
		return;
	}
	gsc_intr_establish((struct gsc_softc *)parent, ga->ga_irq,
	    IPL_AUDIO, arcofi_hwintr, sc, sc->sc_dev.dv_xname);

	printf("\n");

	arcofi_attach(sc, "gsc");
}
@
