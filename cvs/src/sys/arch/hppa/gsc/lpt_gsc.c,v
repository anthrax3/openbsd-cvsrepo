head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.24
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.20
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.16
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.18
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.10
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.14
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.12
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.28
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.26
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.24
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.20
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.22
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.18
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.16
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.14
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.12
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.10
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.8
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.8
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2011.09.16.17.20.07;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.14.22.32.01;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.13.21.28.19;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.07.19.47.33;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.25.07.22.01;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.21.17.41.06;	author mickey;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	99.08.16.02.48.39;	author mickey;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	99.08.14.04.39.12;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	99.04.20.21.17.07;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.11.30.21.16.32;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.09.30.04.45.46;	author mickey;	state Exp;
branches;
next	;

1.5.4.1
date	2001.04.18.16.06.04;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.28.10.07.19;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.27.23.26.53;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2004.02.19.10.48.40;	author niklas;	state Exp;
branches;
next	1.5.4.5;

1.5.4.5
date	2004.06.05.23.10.48;	author niklas;	state Exp;
branches;
next	;

1.6.8.1
date	2002.06.11.03.35.36;	author art;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	2003.05.19.21.49.41;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fix a bunch of typos: manaul, monnitor, machiune, autload.
@
text
@/*	$OpenBSD: lpt_gsc.c,v 1.11 2004/09/14 22:32:01 mickey Exp $	*/

/*
 * Copyright (c) 1998 Michael Shalayeff
 * Copyright (c) 1993, 1994 Charles Hannum.
 * Copyright (c) 1990 William F. Jolitz, TeleMuse
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This software is a component of "386BSD" developed by 
 *	William F. Jolitz, TeleMuse.
 * 4. Neither the name of the developer nor the name "386BSD"
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS A COMPONENT OF 386BSD DEVELOPED BY WILLIAM F. JOLITZ 
 * AND IS INTENDED FOR RESEARCH AND EDUCATIONAL PURPOSES ONLY. THIS 
 * SOFTWARE SHOULD NOT BE CONSIDERED TO BE A COMMERCIAL PRODUCT. 
 * THE DEVELOPER URGES THAT USERS WHO REQUIRE A COMMERCIAL PRODUCT 
 * NOT MAKE USE OF THIS WORK.
 *
 * FOR USERS WHO WISH TO UNDERSTAND THE 386BSD SYSTEM DEVELOPED
 * BY WILLIAM F. JOLITZ, WE RECOMMEND THE USER STUDY WRITTEN 
 * REFERENCES SUCH AS THE  "PORTING UNIX TO THE 386" SERIES 
 * (BEGINNING JANUARY 1991 "DR. DOBBS JOURNAL", USA AND BEGINNING 
 * JUNE 1991 "UNIX MAGAZIN", GERMANY) BY WILLIAM F. JOLITZ AND 
 * LYNNE GREER JOLITZ, AS WELL AS OTHER BOOKS ON UNIX AND THE 
 * ON-LINE 386BSD USER MANUAL BEFORE USE. A BOOK DISCUSSING THE INTERNALS 
 * OF 386BSD ENTITLED "386BSD FROM THE INSIDE OUT" WILL BE AVAILABLE LATE 1992.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPER ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE DEVELOPER BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/iomod.h>
#include <machine/autoconf.h>

#include <dev/ic/lptreg.h>
#include <dev/ic/lptvar.h>

#include <hppa/dev/cpudevs.h>

#include <hppa/gsc/gscbusvar.h>

#define	LPTGSC_OFFSET	0x800

int	lpt_gsc_probe(struct device *, void *, void *);
void	lpt_gsc_attach(struct device *, struct device *, void *);

struct cfattach lpt_gsc_ca = {
	sizeof(struct lpt_softc), lpt_gsc_probe, lpt_gsc_attach
};

/*
 * Logic:
 *	1) You should be able to write to and read back the same value
 *	   to the data port.  Do an alternating zeros, alternating ones,
 *	   walking zero, and walking one test to check for stuck bits.
 *
 *	2) You should be able to write to and read back the same value
 *	   to the control port lower 5 bits, the upper 3 bits are reserved
 *	   per the IBM PC technical reference manuals and different boards
 *	   do different things with them.  Do an alternating zeros, alternating
 *	   ones, walking zero, and walking one test to check for stuck bits.
 *
 *	   Some printers drag the strobe line down when the are powered off
 * 	   so this bit has been masked out of the control port test.
 *
 *	   XXX Some printers may not like a fast pulse on init or strobe, I
 *	   don't know at this point, if that becomes a problem these bits
 *	   should be turned off in the mask byte for the control port test.
 *
 *	3) Set the data and control ports to a value of 0
 */
int
lpt_gsc_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct gsc_attach_args *ga = aux;
	bus_space_handle_t ioh;
	bus_addr_t base;
	u_int8_t mask, data;
	int i, rv;

	if (ga->ga_type.iodc_type != HPPA_TYPE_FIO ||
	    ga->ga_type.iodc_sv_model != HPPA_FIO_CENT)
		return 0;

#ifdef DEBUG
#define	ABORT								\
	do {								\
		printf("lpt_gsc_probe: mask %x data %x failed\n", mask,	\
		    data);						\
		return 0;						\
	} while (0)
#else
#define	ABORT	do {							\
			bus_space_unmap(ga->ga_iot, ioh, LPT_NPORTS);	\
			return 0;					\
		} while (0)
#endif

	base = ga->ga_hpa + LPTGSC_OFFSET;
	if (bus_space_map(ga->ga_iot, base, LPT_NPORTS, 0, &ioh)) {
		printf("lpt_gsc_probe: cannot map io space\n");
		return 0;
	}

	rv = 0;
	mask = 0xff;

	data = 0x55;				/* Alternating zeros */
	if (!lpt_port_test(ga->ga_iot, ioh, base, lpt_data, data, mask))
		ABORT;

	data = 0xaa;				/* Alternating ones */
	if (!lpt_port_test(ga->ga_iot, ioh, base, lpt_data, data, mask))
		ABORT;

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking zero */
		data = ~(1 << i);
		if (!lpt_port_test(ga->ga_iot, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking one */
		data = (1 << i);
		if (!lpt_port_test(ga->ga_iot, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	bus_space_write_1(ga->ga_iot, ioh, lpt_data, 0);
	bus_space_write_1(ga->ga_iot, ioh, lpt_control, 0);
	bus_space_unmap(ga->ga_iot, ioh, LPT_NPORTS);

	return 1;
}

void
lpt_gsc_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lpt_softc *sc = (void *)self;
	struct gsc_attach_args *ga = aux;
	bus_addr_t base;

	/* sc->sc_flags |= LPT_POLLED; */

	sc->sc_state = 0;
	sc->sc_iot = ga->ga_iot;
	base = ga->ga_hpa + LPTGSC_OFFSET;
	if (bus_space_map(ga->ga_iot, base, LPT_NPORTS, 0, &sc->sc_ioh)) {
		printf(": cannot map io space\n");
		return;
	}

	lpt_attach_common(sc);

	sc->sc_ih = gsc_intr_establish((struct gsc_softc *)parent,
	    ga->ga_irq, IPL_TTY, lptintr, sc, sc->sc_dev.dv_xname);
}
@


1.11
log
@always map the io space
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.10 2004/02/13 21:28:19 mickey Exp $	*/
d86 1
a86 1
 *	   per the IBM PC technical reference manauls and different boards
@


1.10
log
@order irq,pri args to gsc_intr_establish() the way less confusing compared to other trolley busses around ...
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.9 2003/08/07 19:47:33 mickey Exp $	*/
d104 1
a104 1
	struct confargs *ca = aux;
d110 2
a111 2
	if (ca->ca_type.iodc_type != HPPA_TYPE_FIO ||
	    ca->ca_type.iodc_sv_model != HPPA_FIO_CENT)
d115 5
a119 5
#define	ABORT								     \
	do {								     \
		printf("lpt_gsc_probe: mask %x data %x failed\n", mask,	     \
		    data);						     \
		return 0;						     \
d122 4
a125 1
#define	ABORT	return 0
d128 5
a132 2
	base = ca->ca_hpa + LPTGSC_OFFSET;
	ioh = ca->ca_hpa + LPTGSC_OFFSET;
d138 1
a138 1
	if (!lpt_port_test(ca->ca_iot, ioh, base, lpt_data, data, mask))
d142 1
a142 1
	if (!lpt_port_test(ca->ca_iot, ioh, base, lpt_data, data, mask))
d147 1
a147 1
		if (!lpt_port_test(ca->ca_iot, ioh, base, lpt_data, data, mask))
d153 1
a153 1
		if (!lpt_port_test(ca->ca_iot, ioh, base, lpt_data, data, mask))
d157 3
a159 2
	bus_space_write_1(ca->ca_iot, ioh, lpt_data, 0);
	bus_space_write_1(ca->ca_iot, ioh, lpt_control, 0);
d171 1
d177 5
a181 1
	sc->sc_ioh = ga->ga_hpa + LPTGSC_OFFSET;
@


1.9
log
@make all intr_establish take the same last arg for name
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.8 2003/01/25 07:22:01 jason Exp $	*/
d173 2
a174 2
	sc->sc_ih = gsc_intr_establish((struct gsc_softc *)parent, IPL_TTY,
	    ga->ga_irq, lptintr, sc, sc->sc_dev.dv_xname);
@


1.8
log
@De-"register"
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.7 2002/03/14 01:26:31 millert Exp $	*/
d174 1
a174 1
				       ga->ga_irq, lptintr, sc, &sc->sc_dev);
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.6 2000/07/21 17:41:06 mickey Exp $	*/
d104 1
a104 1
	register struct confargs *ca = aux;
d162 2
a163 2
	register struct lpt_softc *sc = (void *)self;
	register struct gsc_attach_args *ga = aux;
@


1.6
log
@convert to new timeouts
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.5 1999/08/16 02:48:39 mickey Exp $	*/
d71 2
a72 2
int	lpt_gsc_probe __P((struct device *, void *, void *));
void	lpt_gsc_attach __P((struct device *, struct device *, void *));
@


1.6.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.6 2000/07/21 17:41:06 mickey Exp $	*/
d71 2
a72 2
int	lpt_gsc_probe(struct device *, void *, void *);
void	lpt_gsc_attach(struct device *, struct device *, void *);
@


1.6.8.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d104 1
a104 1
	struct confargs *ca = aux;
d162 2
a163 2
	struct lpt_softc *sc = (void *)self;
	struct gsc_attach_args *ga = aux;
@


1.5
log
@evcnt count the interrupts, also optimize diagnostic printing
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.4 1999/08/14 04:39:12 mickey Exp $	*/
a167 1

d171 1
a171 3
	printf("\n");

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, lpt_control, LPC_NINIT);
@


1.5.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.6 2000/07/21 17:41:06 mickey Exp $	*/
d168 1
d172 3
a174 1
	lpt_attach_common(sc);
@


1.5.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d71 2
a72 2
int	lpt_gsc_probe(struct device *, void *, void *);
void	lpt_gsc_attach(struct device *, struct device *, void *);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@d104 1
a104 1
	struct confargs *ca = aux;
d162 2
a163 2
	struct lpt_softc *sc = (void *)self;
	struct gsc_attach_args *ga = aux;
@


1.5.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d174 1
a174 1
	    ga->ga_irq, lptintr, sc, sc->sc_dev.dv_xname);
@


1.5.4.5
log
@Merge with the trunk
@
text
@d173 2
a174 2
	sc->sc_ih = gsc_intr_establish((struct gsc_softc *)parent,
	    ga->ga_irq, IPL_TTY, lptintr, sc, sc->sc_dev.dv_xname);
@


1.4
log
@update
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.3 1999/04/20 21:17:07 mickey Exp $	*/
d177 1
a177 2
				       ga->ga_irq, lptintr, sc,
				       sc->sc_dev.dv_xname);
@


1.3
log
@establish irq handler
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.2 1998/11/30 21:16:32 mickey Exp $	*/
d119 1
a119 1
		goto out;						     \
d122 1
a122 1
#define	ABORT	goto out
d125 2
a126 5
	base = ca->ca_hpa;
	if (bus_space_map(ca->ca_iot, base, IOMOD_HPASIZE, 0, &ioh))
		return 0;
	ioh += LPTGSC_OFFSET;
	base += LPTGSC_OFFSET;
d154 1
a154 6
	rv = 1;

out:
	ioh -= LPTGSC_OFFSET;
	bus_space_unmap(ca->ca_iot, ioh, IOMOD_HPASIZE);
	return rv;
d170 1
a170 4
	if (bus_space_map(sc->sc_iot, ga->ga_hpa, IOMOD_HPASIZE,
			  0, &sc->sc_ioh))
		panic("lpt_gsc_attach: couldn't map I/O ports");
	sc->sc_ioh += LPTGSC_OFFSET;
@


1.2
log
@s/iot/ca->ca_iot/
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.1 1998/09/30 04:45:46 mickey Exp $	*/
d67 4
d128 2
a129 1
	ioh |= IOMOD_DEVOFFSET;
d160 1
a160 1
	ioh &= ~IOMOD_DEVOFFSET;
d171 1
a171 1
	register struct confargs *ca = aux;
d173 1
a173 2
	sc->sc_flags |= LPT_POLLED;
	printf(": polled\n");
d177 2
a178 2
	sc->sc_iot = ca->ca_iot;
	if (bus_space_map(sc->sc_iot, ca->ca_hpa, IOMOD_HPASIZE,
d181 3
a183 1
	sc->sc_ioh |= IOMOD_DEVOFFSET;
d186 4
@


1.1
log
@they must be here
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt_gsc.c,v 1.1 1998/09/29 06:56:46 mickey Exp $	*/
a100 1
	bus_space_tag_t iot;
a120 1
	iot = ca->ca_iot;
d122 1
a122 1
	if (bus_space_map(iot, base, IOMOD_HPASIZE, 0, &ioh))
d130 1
a130 1
	if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
d134 1
a134 1
	if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
d139 1
a139 1
		if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
d145 1
a145 1
		if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
d149 2
a150 2
	bus_space_write_1(iot, ioh, lpt_data, 0);
	bus_space_write_1(iot, ioh, lpt_control, 0);
d156 1
a156 1
	bus_space_unmap(iot, ioh, IOMOD_HPASIZE);
@

