head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.54
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.50
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.52
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.44
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.48
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.46
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.42
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.40
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.38
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.36
	OPENBSD_5_0:1.8.0.34
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.32
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.30
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.26
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC:1.6.0.6
	UBC_SYNC_A:1.6
	SMP:1.6.0.4
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.9
date	2016.09.19.06.46.43;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	qGgYgJTgEFuAoGj4;

1.8
date	2003.08.15.13.25.53;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.19.54.29;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.12.09.06.11;	author mickey;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2003.02.05.19.24.13;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.05.08.47.05;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.30.03.23.19;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.30.01.23.24;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.04.20.49;	author jason;	state Exp;
branches;
next	;

1.6.4.1
date	2003.06.07.11.11.36;	author ho;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2004.02.19.10.48.40;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove unused getdev() audio driver functions.
@
text
@/*	$OpenBSD: harmonyvar.h,v 1.8 2003/08/15 13:25:53 mickey Exp $	*/

/*
 * Copyright (c) 2003 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define	HARMONY_PORT_INPUT_LVL		0
#define	HARMONY_PORT_INPUT_OV		1
#define	HARMONY_PORT_OUTPUT_LVL		2
#define	HARMONY_PORT_OUTPUT_GAIN	3
#define	HARMONY_PORT_MONITOR_LVL	4
#define	HARMONY_PORT_RECORD_SOURCE	5
#define	HARMONY_PORT_OUTPUT_SOURCE	6
#define	HARMONY_PORT_INPUT_CLASS	7
#define	HARMONY_PORT_OUTPUT_CLASS	8
#define	HARMONY_PORT_MONITOR_CLASS	9
#define	HARMONY_PORT_RECORD_CLASS	10

#define	HARMONY_IN_MIC			0
#define	HARMONY_IN_LINE			1

#define	HARMONY_OUT_LINE		0
#define	HARMONY_OUT_SPEAKER		1
#define	HARMONY_OUT_HEADPHONE		2

#define	PLAYBACK_EMPTYS			3	/* playback empty buffers */
#define	CAPTURE_EMPTYS			3	/* capture empty buffers */

struct harmony_volume {
	u_char left, right;
};

struct harmony_empty {
	u_int8_t	playback[PLAYBACK_EMPTYS][HARMONY_BUFSIZE];
	u_int8_t	capture[CAPTURE_EMPTYS][HARMONY_BUFSIZE];
};

struct harmony_dma {
	struct harmony_dma *d_next;
	bus_dmamap_t d_map;
	bus_dma_segment_t d_seg;
	caddr_t d_kva;
	size_t d_size;
};

struct harmony_channel {
	struct harmony_dma *c_current;
	bus_size_t c_segsz;
	bus_size_t c_cnt;
	bus_size_t c_blksz;
	bus_addr_t c_lastaddr;
	void (*c_intr)(void *);
	void *c_intrarg;
	bus_addr_t c_theaddr;
};

struct harmony_softc {
	struct device sc_dv;

	bus_dma_tag_t sc_dmat;
	bus_space_tag_t sc_bt;
	bus_space_handle_t sc_bh;
	int sc_open;
	u_int32_t sc_cntlbits;
	int sc_need_commit;
	int sc_playback_empty;
	bus_addr_t sc_playback_paddrs[PLAYBACK_EMPTYS];
	int sc_capture_empty;
	bus_addr_t sc_capture_paddrs[CAPTURE_EMPTYS];
	bus_dmamap_t sc_empty_map;
	bus_dma_segment_t sc_empty_seg;
	int sc_empty_rseg;
	struct harmony_empty *sc_empty_kva;
	struct harmony_dma *sc_dmas;
	int sc_playing, sc_capturing;
	struct harmony_channel sc_playback, sc_capture;
	struct harmony_volume sc_monitor_lvl, sc_input_lvl, sc_output_lvl;
	int sc_in_port, sc_out_port, sc_hasulinear8;
	int sc_micpreamp, sc_ov, sc_outputgain;
	int sc_teleshare;

	struct timeout sc_acc_tmo;
	u_int32_t sc_acc, sc_acc_num, sc_acc_cnt;
};

#define	READ_REG(sc, reg)		\
    bus_space_read_4((sc)->sc_bt, (sc)->sc_bh, (reg))
#define	WRITE_REG(sc, reg, val)		\
    bus_space_write_4((sc)->sc_bt, (sc)->sc_bh, (reg), (val))
#define	SYNC_REG(sc, reg, flags)	\
    bus_space_barrier((sc)->sc_bt, (sc)->sc_bh, (reg), sizeof(u_int32_t), \
	(flags))
@


1.8
log
@bitneaks anonymous randomisation
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.7 2003/06/02 19:54:29 jason Exp $	*/
a80 1
	struct audio_device sc_audev;
@


1.7
log
@nuke clause 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.6 2003/03/12 09:06:11 mickey Exp $	*/
d104 3
@


1.6
log
@reclaim more resources on failures.
test the harmony id to filter out unsupported yet
audio types and detect the teleshare.
detect input overload and report to userland.
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.5 2003/02/05 19:24:13 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6.4.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.6 2003/03/12 09:06:11 mickey Exp $	*/
d15 5
@


1.6.4.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a103 3

	struct timeout sc_acc_tmo;
	u_int32_t sc_acc, sc_acc_num, sc_acc_cnt;
@


1.5
log
@Add knob for getting at the "output level bit", supposedly changes the
full scale outputs between 2.8Vpp and 2.0Vpp for line.
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.4 2003/02/05 08:47:05 jason Exp $	*/
d34 11
a44 10
#define HARMONY_PORT_INPUT_LVL		0
#define	HARMONY_PORT_OUTPUT_LVL		1
#define	HARMONY_PORT_OUTPUT_GAIN	2
#define	HARMONY_PORT_MONITOR_LVL	3
#define	HARMONY_PORT_RECORD_SOURCE	4
#define	HARMONY_PORT_OUTPUT_SOURCE	5
#define	HARMONY_PORT_INPUT_CLASS	6
#define	HARMONY_PORT_OUTPUT_CLASS	7
#define	HARMONY_PORT_MONITOR_CLASS	8
#define	HARMONY_PORT_RECORD_CLASS	9
d107 2
a108 1
	int sc_micpreamp, sc_outputgain;
@


1.4
log
@Get rid of the pops:
- interrupt is called when the block has been DMA'd... since LASI seems to
include a FIFO this is -not- the same as block completion which we have
to poll for.  Luckily the FIFO is deep enough that polling in the
interrupt handler seems to work.
- This probably breaks capture, but I'll fix that when I get up tomorrow.
(committed to the tune of Fugazi's "Waiting Room")
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.3 2003/01/30 03:23:19 mickey Exp $	*/
d36 8
a43 7
#define	HARMONY_PORT_MONITOR_LVL	2
#define	HARMONY_PORT_RECORD_SOURCE	3
#define	HARMONY_PORT_OUTPUT_SOURCE	4
#define	HARMONY_PORT_INPUT_CLASS	5
#define	HARMONY_PORT_OUTPUT_CLASS	6
#define	HARMONY_PORT_MONITOR_CLASS	7
#define	HARMONY_PORT_RECORD_CLASS	8
d106 1
@


1.3
log
@real meat in audio_device; discussed w/ jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.2 2003/01/30 01:23:24 jason Exp $	*/
a52 1
#define	HARMONY_BUFSIZE			4096
d79 1
@


1.2
log
@Check the codec revision... if it's >=CS4215E or >=AD1849K (same value
strangely =) the make ulinear (native) and slinear (emulated) available.
Also, while here, make ulinear_le:16 available via emulation.
(Btw, the LASI docs say that the format code for ulinear is a
reserved value... Probably just wasn't available in the early CS4215/AD1849's)
@
text
@d1 1
a1 1
/*	$OpenBSD: harmonyvar.h,v 1.1 2003/01/28 04:20:49 jason Exp $	*/
d84 2
@


1.1
log
@Move device driver specific stuff to *var.h and add most of the code for
dealing with output source selection (doesn't work right yet, so its disabled).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d102 1
a102 1
	int sc_in_port, sc_out_port;
@

