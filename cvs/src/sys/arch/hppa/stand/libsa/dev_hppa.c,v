head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.12
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.14
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.10
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.15.0.10
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.6
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.18
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.16
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.14
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	mickey-boot:1.1.1.1
	mickey:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.16;
commitid	Cnjup0HpCIRrcQ6o;

1.16
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.15;
commitid	3HeD4LaLGiS22I3y;

1.15
date	2012.02.25.20.12.00;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.06.22.51.45;	author jasper;	state Exp;
branches;
next	1.13;

1.13
date	2010.12.06.22.11.01;	author jasper;	state Exp;
branches;
next	1.12;

1.12
date	2010.12.06.18.44.49;	author jasper;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.25.21.08.18;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.07.18.24.20;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.01.17.00.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.16.07.20.50;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.15.18.07.32;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.14.11.38.56;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	99.04.20.20.01.01;	author mickey;	state Exp;
branches
	1.5.4.1
	1.5.14.1;
next	1.4;

1.4
date	99.02.13.04.43.18;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	98.10.30.19.41.14;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.09.29.07.30.59;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.18.46.42;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.23.18.46.42;	author mickey;	state Exp;
branches;
next	;

1.5.4.1
date	2003.03.27.23.26.54;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.05.13.19.41.04;	author ho;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.06.07.11.11.36;	author ho;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2004.06.05.23.10.49;	author niklas;	state Exp;
branches;
next	;

1.5.14.1
date	2003.05.19.21.43.13;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@move putchar() into libsa

"sure" miod@@
@
text
@/*	$OpenBSD: dev_hppa.c,v 1.16 2014/07/12 21:54:58 jasper Exp $	*/

/*
 * Copyright (c) 1998-2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "libsa.h"
#include <sys/param.h>
#include <sys/disklabel.h>
#include <sys/reboot.h>
#include <dev/cons.h>

#include <machine/iomod.h>

#include "dev_hppa.h"

extern int debug;

const char cdevs[][4] = {
	"ite", "", "", "", "", "", "", "",
	"", "", "", "", ""
};
const int ncdevs = nitems(cdevs);

const struct pdc_devs {
	char	name[3];
	int	dev_type;
} pdc_devs[] = {
	{ "dk",  0 },
	{ "ct",  1 },
	{ "lf",  2 },
	{ "",   -1 },
	{ "rd", -1 },
	{ "sw", -1 },
	{ "fl", -1 },
};

/* pass dev_t to the open routines */
int
devopen(f, fname, file)
	struct open_file *f;
	const char *fname;
	char **file;
{
	struct hppa_dev *hpd;
	const struct pdc_devs *dp = pdc_devs;
	int rc = 1;

	if (!(*file = strchr(fname, ':')))
		return ENODEV;
	else
		(*file)++;

#ifdef DEBUG
	if (debug)
		printf("devopen: ");
#endif

	for (dp = pdc_devs; dp < &pdc_devs[nitems(pdc_devs)]; dp++)
		if (!strncmp(fname, dp->name, sizeof(dp->name)-1))
			break;

	if (dp >= &pdc_devs[nitems(pdc_devs)] || dp->dev_type < 0)
		return ENODEV;
#ifdef DEBUG
	if (debug)
		printf("%s\n", dp->name);
#endif

	if (!(hpd = alloc(sizeof *hpd))) {
#ifdef DEBUG
		printf ("devopen: no mem\n");
#endif
	} else {
		bzero(hpd, sizeof *hpd);
		hpd->bootdev = bootdev;
		hpd->buf = (char *)(((u_int)hpd->ua_buf + IODC_MINIOSIZ-1) &
			~(IODC_MINIOSIZ-1));
		f->f_devdata = hpd;
		if ((rc = (*devsw[dp->dev_type].dv_open)(f, file)) == 0) {
			f->f_dev = &devsw[dp->dev_type];
			return 0;
		}
		free (hpd, 0);
		f->f_devdata = NULL;
	}

	if (!(f->f_flags & F_NODEV))
		f->f_dev = &devsw[dp->dev_type];

	if (!f->f_devdata)
		*file = NULL;

	return rc;
}

void
devboot(dev, p)
	dev_t dev;
	char *p;
{
	const char *q;
	int unit;

	if (!dev) {
		int type;

		switch (PAGE0->mem_boot.pz_class) {
		case PCL_RANDOM:
			type = 0;
			unit = PAGE0->mem_boot.pz_layers[0];
			break;
		case PCL_SEQU:
			type = 1;
			unit = PAGE0->mem_boot.pz_layers[0];
			break;
		case PCL_NET_MASK|PCL_SEQU:
			type = 2;
			unit = 0;
			break;
		default:
			type = 0;
			unit = 0;
			break;
		}
		dev = bootdev = MAKEBOOTDEV(type, 0, 0, unit, B_PARTITION(dev));
	}
#ifdef _TEST
	*p++ = '/';
	*p++ = 'd';
	*p++ = 'e';
	*p++ = 'v';
	*p++ = '/';
	*p++ = 'r';
#endif
	/* quick copy device name */
	for (q = pdc_devs[B_TYPE(dev)].name; (*p++ = *q++););
	unit = B_UNIT(dev);
	if (unit >= 10) {
		p[-1] = '0' + unit / 10;
		*p++ = '0' + (unit % 10);
	} else
		p[-1] = '0' + unit;
	*p++ = 'a' + B_PARTITION(dev);
	*p = '\0';
}

char ttyname_buf[8];

char *
ttyname(fd)
	int fd;
{
	snprintf(ttyname_buf, sizeof ttyname_buf, "%s%d",
	    cdevs[major(cn_tab->cn_dev)],
	    minor(cn_tab->cn_dev));
	return (ttyname_buf);
}

dev_t
ttydev(name)
	char *name;
{
	int i, unit = -1;
	char *no = name + strlen(name) - 1;

	while (no >= name && *no >= '0' && *no <= '9')
		unit = (unit < 0 ? 0 : (unit * 10)) + *no-- - '0';
	if (no < name || unit < 0)
		return (NODEV);
	for (i = 0; i < ncdevs; i++)
		if (strncmp(name, cdevs[i], no - name + 1) == 0)
			return (makedev(i, unit));
	return (NODEV);
}
@


1.16
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.15 2012/02/25 20:12:00 miod Exp $	*/
d170 1
a170 1
int pch_pos;
a171 31
void
putchar(c)
	int c;
{
	switch(c) {
	case '\177':	/* DEL erases */
		cnputc('\b');
		cnputc(' ');
	case '\b':
		cnputc('\b');
		if (pch_pos)
			pch_pos--;
		break;
	case '\t':
		do
			cnputc(' ');
		while(++pch_pos % 8);
		break;
	case '\n':
	case '\r':
		cnputc(c);
		pch_pos=0;
		break;
	default:
		cnputc(c);
		pch_pos++;
		break;
	}
}

char ttyname_buf[8];
@


1.15
log
@:%s,DEBUGBUG,DEBUG,
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.14 2010/12/06 22:51:45 jasper Exp $	*/
a199 16
}

int
getchar()
{
	int c = cngetc();

	if (c == '\r')
		c = '\n';

	if ((c < ' ' && c != '\n') || c == '\177')
		return(c);

	putchar(c);

	return(c);
@


1.14
log
@- properly remove NENTS now after fixing the fallout.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.13 2010/12/06 22:11:01 jasper Exp $	*/
d76 1
a76 1
#ifdef DEBUGBUG
d87 1
a87 1
#ifdef DEBUGBUG
@


1.13
log
@- partially revert previous NENTS removal for arches which got busted.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.12 2010/12/06 18:44:49 jasper Exp $	*/
d45 1
a45 1
const int ncdevs = NENTS(cdevs);
d81 1
a81 1
	for (dp = pdc_devs; dp < &pdc_devs[NENTS(pdc_devs)]; dp++)
d85 1
a85 1
	if (dp >= &pdc_devs[NENTS(pdc_devs)] || dp->dev_type < 0)
@


1.12
log
@- drop NENTS(), which was yet another copy of nitems().
no binary change


ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.11 2005/04/25 21:08:18 miod Exp $	*/
d45 1
a45 1
const int ncdevs = nitems(cdevs);
d81 1
a81 1
	for (dp = pdc_devs; dp < &pdc_devs[nitems(pdc_devs)]; dp++)
d85 1
a85 1
	if (dp >= &pdc_devs[nitems(pdc_devs)] || dp->dev_type < 0)
@


1.11
log
@Correctly handle boot drives with SCSI id >= 10; ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.10 2004/04/07 18:24:20 mickey Exp $	*/
d45 1
a45 1
const int ncdevs = NENTS(cdevs);
d81 1
a81 1
	for (dp = pdc_devs; dp < &pdc_devs[NENTS(pdc_devs)]; dp++)
d85 1
a85 1
	if (dp >= &pdc_devs[NENTS(pdc_devs)] || dp->dev_type < 0)
@


1.10
log
@update copyright; miod@@ is fine w/ files where he holds it too
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.9 2003/06/01 17:00:34 deraadt Exp $	*/
d125 2
d128 1
a128 1
		int type, unit;
d160 6
a165 1
	p[-1] = '0' + B_UNIT(dev);
@


1.9
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.8 2003/04/16 07:20:50 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Michael Shalayeff
a14 17
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d16 11
@


1.8
log
@clean some spaces and registers and other fluff
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.7 2003/04/15 18:07:32 mickey Exp $	*/
d222 2
a223 1
	sprintf(ttyname_buf, "%s%d", cdevs[major(cn_tab->cn_dev)],
@


1.7
log
@rearrange devsw to place dk in the beginning. necessary glue hookups in cdboot
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.6 2003/01/14 11:38:56 mickey Exp $	*/
d73 3
a75 3
	register struct hppa_dev *hpd;
	register const struct pdc_devs *dp = pdc_devs;
	register int rc = 1;
d130 1
a130 1
	register const char *q;
d204 1
a204 1
	register int c = cngetc();
@


1.6
log
@preserve the partition when decoding the boot device
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.5 1999/04/20 20:01:01 mickey Exp $	*/
d57 2
a58 2
	{ "ct",  0 },
	{ "dk",  1 },
d136 1
a136 1
			type = 1;
d140 1
a140 1
			type = 0;
@


1.5
log
@fix different alignment problems
correct PDC/IODC call formats
factor some more code out to the dev_hppa.c routines
basically boot on many more machine by now
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.4 1999/02/13 04:43:18 mickey Exp $	*/
d152 1
a152 1
		dev = bootdev = MAKEBOOTDEV(type, 0, 0, unit, 0);
@


1.5.14.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 2
a58 2
	{ "dk",  0 },
	{ "ct",  1 },
d73 3
a75 3
	struct hppa_dev *hpd;
	const struct pdc_devs *dp = pdc_devs;
	int rc = 1;
d130 1
a130 1
	const char *q;
d136 1
a136 1
			type = 0;
d140 1
a140 1
			type = 1;
d152 1
a152 1
		dev = bootdev = MAKEBOOTDEV(type, 0, 0, unit, B_PARTITION(dev));
d204 1
a204 1
	int c = cngetc();
@


1.5.4.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d152 1
a152 1
		dev = bootdev = MAKEBOOTDEV(type, 0, 0, unit, B_PARTITION(dev));
@


1.5.4.2
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.5.4.1 2003/03/27 23:26:54 niklas Exp $	*/
d57 2
a58 2
	{ "dk",  0 },
	{ "ct",  1 },
d73 3
a75 3
	struct hppa_dev *hpd;
	const struct pdc_devs *dp = pdc_devs;
	int rc = 1;
d130 1
a130 1
	const char *q;
d136 1
a136 1
			type = 0;
d140 1
a140 1
			type = 1;
d204 1
a204 1
	int c = cngetc();
@


1.5.4.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.5.4.2 2003/05/13 19:41:04 ho Exp $	*/
d222 1
a222 2
	snprintf(ttyname_buf, sizeof ttyname_buf, "%s%d",
	    cdevs[major(cn_tab->cn_dev)],
@


1.5.4.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 1998-2004 Michael Shalayeff
d15 17
a32 11
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
@


1.4
log
@remove local cvs Id
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.3 1998/10/30 19:41:14 mickey Exp $	*/
d58 1
a58 1
	{ "sd",  1 },
d73 1
d82 1
a82 1
#ifdef DEBUG
d93 1
a93 1
#ifdef DEBUG
d98 16
a113 3
	if ((rc = (*devsw[dp->dev_type].dv_open)(f, file)) == 0) {
		f->f_dev = &devsw[dp->dev_type];
		return 0;
@


1.3
log
@thinko
@
text
@d1 1
a1 2
/*	$OpenBSD: dev_hppa.c,v 1.2 1998/09/29 07:30:59 mickey Exp $	*/
/*	$NOWHERE: dev_hppa.c,v 2.1 1998/06/17 20:51:54 mickey Exp $	*/
@


1.2
log
@sync; fixes; cleanup
get rid of those obscuring commands
use device finger/mapper, thus rewrite devopen
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_hppa.c,v 1.1.1.1 1998/06/23 18:46:42 mickey Exp $	*/
d123 1
a123 1
			type = 0;
d127 1
a127 1
			type = 1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a45 2
struct  pz_device ctdev;	/* cartridge tape (boot) device path */

d59 2
d64 1
a64 2
	{ "fl",  1 },
	{ "sd",  1 },
d77 4
a80 1
	*file = (char *)fname;
d84 1
a84 1
		printf("devopen:");
d88 1
a88 1
		if (strncmp(fname, dp->name, sizeof(dp->name)-1))
d93 4
d103 1
a103 1
	if ((f->f_flags & F_NODEV) == 0)
d106 3
d113 2
a114 2
devboot(bootdev, p)
	dev_t bootdev;
d118 23
d150 3
a152 3
	for (q = pdc_devs[B_TYPE(bootdev)].name; (*p++ = *q++););
	*p++ = '0' + B_UNIT(bootdev);
	*p++ = 'a' + B_PARTITION(bootdev);
@


1.1.1.1
log
@ok, it boots, include and libkern to come
@
text
@@
