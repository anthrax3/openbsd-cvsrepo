head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.30
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.26
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.22
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.24
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.16
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	HPUX_REL9_05_800:1.1.1.1
	HP:1.1.1
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2010.07.30.18.05.23;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.10.17.27.58;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.07.22.19.30;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.03.58.18;	author mickey;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2000.01.11.08.18.43;	author mickey;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	98.07.02.19.05.19;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.06.23.21.19.30;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.20.33.58;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.05.07.21.37.19;	author mickey;	state Exp;
branches;
next	;

1.4.2.1
date	2001.04.18.16.06.39;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.03.27.23.26.54;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2003.05.13.19.41.04;	author ho;	state Exp;
branches;
next	;

1.5.6.1
date	2002.06.11.03.35.38;	author art;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@When converting a floating value to an integer, properly raise the "invalid"
exception when the floating value is infinite or NaN or if the integral part
of the floating value exceeds the range of the integer type, as required by
the C99/IEEE754 standard.

Fixes Python 2.6 build on hppa.

ok miod@@
@
text
@/*	$OpenBSD: fcnvfx.c,v 1.7 2003/04/10 17:27:58 mickey Exp $	*/
/*
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)fcnvfx.c: Revision: 2.8.88.2 Date: 93/12/08 13:27:29 */

#include "float.h"
#include "sgl_float.h"
#include "dbl_float.h"
#include "cnv_float.h"

/*
 *  Single Floating-point to Single Fixed-point
 */
/*ARGSUSED*/
int
sgl_to_sgl_fcnvfx(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
	int *dstptr;
	unsigned int *status;
{
	register unsigned int src, temp;
	register int src_exponent, result;
	register int inexact = FALSE;

	src = *srcptr;
	src_exponent = Sgl_exponent(src) - SGL_BIAS;

	/*
	 * Test for overflow
	 */
	if (src_exponent > SGL_FX_MAX_EXP) {
		/* check for MININT */
		if ((src_exponent > SGL_FX_MAX_EXP + 1) ||
		Sgl_isnotzero_mantissa(src) || Sgl_iszero_sign(src)) {
			if (Sgl_iszero_sign(src)) result = 0x7fffffff;
			else result = 0x80000000;

			if (Is_invalidtrap_enabled()) {
				return(INVALIDEXCEPTION);
			}
			Set_invalidflag();
			*dstptr = result;
			return(NOEXCEPTION);
		}
	}
	/*
	 * Generate result
	 */
	if (src_exponent >= 0) {
		temp = src;
		Sgl_clear_signexponent_set_hidden(temp);
		Int_from_sgl_mantissa(temp,src_exponent);
		if (Sgl_isone_sign(src))  result = -Sgl_all(temp);
		else result = Sgl_all(temp);

		/* check for inexact */
		if (Sgl_isinexact_to_fix(src,src_exponent)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Sgl_iszero_sign(src)) result++;
			     break;
			case ROUNDMINUS:
			     if (Sgl_isone_sign(src)) result--;
			     break;
			case ROUNDNEAREST:
			     if (Sgl_isone_roundbit(src,src_exponent)) {
				if (Sgl_isone_stickybit(src,src_exponent)
				|| (Sgl_isone_lowmantissa(temp))) {
				   if (Sgl_iszero_sign(src)) result++;
				   else result--;
				}
			     }
			}
		}
	}
	else {
		result = 0;

		/* check for inexact */
		if (Sgl_isnotzero_exponentmantissa(src)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Sgl_iszero_sign(src)) result++;
			     break;
			case ROUNDMINUS:
			     if (Sgl_isone_sign(src)) result--;
			     break;
			case ROUNDNEAREST:
			     if (src_exponent == -1)
				if (Sgl_isnotzero_mantissa(src)) {
				   if (Sgl_iszero_sign(src)) result++;
				   else result--;
				}
			}
		}
	}
	*dstptr = result;
	if (inexact) {
		if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
		else Set_inexactflag();
	}
	return(NOEXCEPTION);
}

/*
 *  Single Floating-point to Double Fixed-point
 */
/*ARGSUSED*/
int
sgl_to_dbl_fcnvfx(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
	dbl_integer *dstptr;
	unsigned int *status;
{
	register int src_exponent, resultp1;
	register unsigned int src, temp, resultp2;
	register int inexact = FALSE;

	src = *srcptr;
	src_exponent = Sgl_exponent(src) - SGL_BIAS;

	/*
	 * Test for overflow
	 */
	if (src_exponent > DBL_FX_MAX_EXP) {
		/* check for MININT */
		if ((src_exponent > DBL_FX_MAX_EXP + 1) ||
		Sgl_isnotzero_mantissa(src) || Sgl_iszero_sign(src)) {
			if (Sgl_iszero_sign(src)) {
				resultp1 = 0x7fffffff;
				resultp2 = 0xffffffff;
			}
			else {
				resultp1 = 0x80000000;
				resultp2 = 0;
			}

			if (Is_invalidtrap_enabled()) {
				return(INVALIDEXCEPTION);
			}
			Set_invalidflag();
			Dint_copytoptr(resultp1,resultp2,dstptr);
			return(NOEXCEPTION);
		}
		Dint_set_minint(resultp1,resultp2);
		Dint_copytoptr(resultp1,resultp2,dstptr);
		return(NOEXCEPTION);
	}
	/*
	 * Generate result
	 */
	if (src_exponent >= 0) {
		temp = src;
		Sgl_clear_signexponent_set_hidden(temp);
		Dint_from_sgl_mantissa(temp,src_exponent,resultp1,resultp2);
		if (Sgl_isone_sign(src)) {
			Dint_setone_sign(resultp1,resultp2);
		}

		/* check for inexact */
		if (Sgl_isinexact_to_fix(src,src_exponent)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Sgl_iszero_sign(src)) {
				Dint_increment(resultp1,resultp2);
			     }
			     break;
			case ROUNDMINUS:
			     if (Sgl_isone_sign(src)) {
				Dint_decrement(resultp1,resultp2);
			     }
			     break;
			case ROUNDNEAREST:
			     if (Sgl_isone_roundbit(src,src_exponent))
				if (Sgl_isone_stickybit(src,src_exponent) ||
				(Dint_isone_lowp2(resultp2))) {
				   if (Sgl_iszero_sign(src)) {
				      Dint_increment(resultp1,resultp2);
				   }
				   else {
				      Dint_decrement(resultp1,resultp2);
				   }
				}
			}
		}
	}
	else {
		Dint_setzero(resultp1,resultp2);

		/* check for inexact */
		if (Sgl_isnotzero_exponentmantissa(src)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Sgl_iszero_sign(src)) {
				Dint_increment(resultp1,resultp2);
			     }
			     break;
			case ROUNDMINUS:
			     if (Sgl_isone_sign(src)) {
				Dint_decrement(resultp1,resultp2);
			     }
			     break;
			case ROUNDNEAREST:
			     if (src_exponent == -1)
				if (Sgl_isnotzero_mantissa(src)) {
				   if (Sgl_iszero_sign(src)) {
				      Dint_increment(resultp1,resultp2);
				   }
				   else {
				      Dint_decrement(resultp1,resultp2);
				   }
				}
			}
		}
	}
	Dint_copytoptr(resultp1,resultp2,dstptr);
	if (inexact) {
		if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
		else Set_inexactflag();
	}
	return(NOEXCEPTION);
}

/*
 *  Double Floating-point to Single Fixed-point
 */
/*ARGSUSED*/
int
dbl_to_sgl_fcnvfx(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
	int *dstptr;
	unsigned int *status;
{
	register unsigned int srcp1,srcp2, tempp1,tempp2;
	register int src_exponent, result;
	register int inexact = FALSE;

	Dbl_copyfromptr(srcptr,srcp1,srcp2);
	src_exponent = Dbl_exponent(srcp1) - DBL_BIAS;

	/*
	 * Test for overflow
	 */
	if (src_exponent > SGL_FX_MAX_EXP) {
		/* check for MININT */
		if (Dbl_isoverflow_to_int(src_exponent,srcp1,srcp2)) {
			if (Dbl_iszero_sign(srcp1)) result = 0x7fffffff;
			else result = 0x80000000;

			if (Is_invalidtrap_enabled()) {
				return(INVALIDEXCEPTION);
			}
			Set_invalidflag();
			*dstptr = result;
			return(NOEXCEPTION);
		}
	}
	/*
	 * Generate result
	 */
	if (src_exponent >= 0) {
		tempp1 = srcp1;
		tempp2 = srcp2;
		Dbl_clear_signexponent_set_hidden(tempp1);
		Int_from_dbl_mantissa(tempp1,tempp2,src_exponent);
		if (Dbl_isone_sign(srcp1) && (src_exponent <= SGL_FX_MAX_EXP))
			result = -Dbl_allp1(tempp1);
		else result = Dbl_allp1(tempp1);

		/* check for inexact */
		if (Dbl_isinexact_to_fix(srcp1,srcp2,src_exponent)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
				if (Dbl_iszero_sign(srcp1))
					result++;
				break;
			case ROUNDMINUS:
				if (Dbl_isone_sign(srcp1)) result--;
				break;
			case ROUNDNEAREST:
				if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
				if (Dbl_isone_stickybit(srcp1,srcp2,src_exponent) ||
				(Dbl_isone_lowmantissap1(tempp1))) {
					if (Dbl_iszero_sign(srcp1)) result++;
					else result--;
				}
			}
			/* check for overflow */
			if ((Dbl_iszero_sign(srcp1) && result < 0) ||
			    (Dbl_isone_sign(srcp1) && result > 0)) {

				if (Dbl_iszero_sign(srcp1))
					result = 0x7fffffff;
				else
					result = 0x80000000;

			    if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			    }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
		}
	}
	else {
		result = 0;

		/* check for inexact */
		if (Dbl_isnotzero_exponentmantissa(srcp1,srcp2)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
				if (Dbl_iszero_sign(srcp1)) result++;
					break;
			case ROUNDMINUS:
				if (Dbl_isone_sign(srcp1)) result--;
				break;
			case ROUNDNEAREST:
				if (src_exponent == -1)
				if (Dbl_isnotzero_mantissa(srcp1,srcp2)) {
					if (Dbl_iszero_sign(srcp1)) result++;
					else result--;
				}
			}
		}
	}
	*dstptr = result;
	if (inexact) {
		if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
		else Set_inexactflag();
	}
	return(NOEXCEPTION);
}

/*
 *  Double Floating-point to Double Fixed-point
 */
/*ARGSUSED*/
int
dbl_to_dbl_fcnvfx(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
	dbl_integer *dstptr;
	unsigned int *status;
{
	register int src_exponent, resultp1;
	register unsigned int srcp1, srcp2, tempp1, tempp2, resultp2;
	register int inexact = FALSE;

	Dbl_copyfromptr(srcptr,srcp1,srcp2);
	src_exponent = Dbl_exponent(srcp1) - DBL_BIAS;

	/*
	 * Test for overflow
	 */
	if (src_exponent > DBL_FX_MAX_EXP) {
		/* check for MININT */
		if ((src_exponent > DBL_FX_MAX_EXP + 1) ||
		Dbl_isnotzero_mantissa(srcp1,srcp2) || Dbl_iszero_sign(srcp1)) {
			if (Dbl_iszero_sign(srcp1)) {
				resultp1 = 0x7fffffff;
				resultp2 = 0xffffffff;
			}
			else {
				resultp1 = 0x80000000;
				resultp2 = 0;
			}

			if (Is_invalidtrap_enabled()) {
				return(INVALIDEXCEPTION);
			}
			Set_invalidflag();
			Dint_copytoptr(resultp1,resultp2,dstptr);
			return(NOEXCEPTION);
		}
	}

	/*
	 * Generate result
	 */
	if (src_exponent >= 0) {
		tempp1 = srcp1;
		tempp2 = srcp2;
		Dbl_clear_signexponent_set_hidden(tempp1);
		Dint_from_dbl_mantissa(tempp1,tempp2,src_exponent,
				       resultp1, resultp2);
		if (Dbl_isone_sign(srcp1)) {
			Dint_setone_sign(resultp1,resultp2);
		}

		/* check for inexact */
		if (Dbl_isinexact_to_fix(srcp1,srcp2,src_exponent)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Dbl_iszero_sign(srcp1)) {
				Dint_increment(resultp1,resultp2);
			     }
			     break;
			case ROUNDMINUS:
			     if (Dbl_isone_sign(srcp1)) {
				Dint_decrement(resultp1,resultp2);
			     }
			     break;
			case ROUNDNEAREST:
			     if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
				if (Dbl_isone_stickybit(srcp1,srcp2,src_exponent) ||
				(Dint_isone_lowp2(resultp2))) {
				   if (Dbl_iszero_sign(srcp1)) {
				      Dint_increment(resultp1,resultp2);
				   }
				   else {
				      Dint_decrement(resultp1,resultp2);
				   }
				}
			}
		}
	}
	else {
		Dint_setzero(resultp1,resultp2);

		/* check for inexact */
		if (Dbl_isnotzero_exponentmantissa(srcp1,srcp2)) {
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Dbl_iszero_sign(srcp1)) {
				Dint_increment(resultp1,resultp2);
			     }
			     break;
			case ROUNDMINUS:
			     if (Dbl_isone_sign(srcp1)) {
				Dint_decrement(resultp1,resultp2);
			     }
			     break;
			case ROUNDNEAREST:
			     if (src_exponent == -1)
				if (Dbl_isnotzero_mantissa(srcp1,srcp2)) {
				   if (Dbl_iszero_sign(srcp1)) {
				      Dint_increment(resultp1,resultp2);
				   }
				   else {
				      Dint_decrement(resultp1,resultp2);
				   }
				}
			}
		}
	}
	Dint_copytoptr(resultp1,resultp2,dstptr);
	if (inexact) {
		if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
		else Set_inexactflag();
	}
	return(NOEXCEPTION);
}
@


1.7
log
@make all entry points of the same number of arguments and that greatly simplifies the call setup in the scheduler
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvfx.c,v 1.6 2002/05/07 22:19:30 mickey Exp $	*/
d46 2
a47 8
			if( Sgl_isnan(src) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Sgl_iszero_sign(src)) result = 0x7fffffff;
			  else result = 0x80000000;
d49 2
a50 12
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d52 3
d144 4
a147 5
			if( Sgl_isnan(src) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
d149 6
a154 20
			  if (Sgl_iszero_sign(src)) {
				resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
			  else {
			    resultp1 = 0x80000000;
			    resultp2 = 0;
			  }
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d156 3
d266 2
a267 8
			if( Dbl_isnan(srcp1,srcp2) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Dbl_iszero_sign(srcp1)) result = 0x7fffffff;
			  else result = 0x80000000;
d269 2
a270 12
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			    }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d272 3
d388 4
a391 5
			if( Dbl_isnan(srcp1,srcp2) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
d393 6
a398 20
			  if (Dbl_iszero_sign(srcp1)) {
			     resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
			  else {
			    resultp1 = 0x80000000;
			    resultp2 = 0;
			  }
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d400 3
@


1.6
log
@bring over our mods; the cnv*c have a problem now, described in the osf version of the cnv_float.h, at the end
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 2
a28 2
sgl_to_sgl_fcnvfx(srcptr,dstptr,status)
	sgl_floating_point *srcptr;
d138 2
a139 2
sgl_to_dbl_fcnvfx(srcptr,dstptr,status)
	sgl_floating_point *srcptr;
d273 2
a274 2
dbl_to_sgl_fcnvfx(srcptr,dstptr,status)
	dbl_floating_point *srcptr;
d407 2
a408 2
dbl_to_dbl_fcnvfx(srcptr,dstptr,status)
	dbl_floating_point *srcptr;
@


1.5
log
@big bang
@
text
@d1 1
a1 23
/*	$OpenBSD: fcnvfx.c,v 1.4 2000/01/11 08:18:43 mickey Exp $	*/

/*
 * Copyright 1996 1995 by Open Software Foundation, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */
d3 18
a20 21
 * pmk1.1
 */
/*
 * (c) Copyright 1986 HEWLETT-PACKARD COMPANY
 *
 * To anyone who acknowledges that this file is provided "AS IS"
 * without any express or implied warranty:
 *     permission to use, copy, modify, and distribute this file
 * for any purpose is hereby granted without fee, provided that
 * the above copyright notice and this notice appears in all
 * copies, and that the name of Hewlett-Packard Company not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose.
 */

#include "../spmath/float.h"
#include "../spmath/sgl_float.h"
#include "../spmath/dbl_float.h"
#include "../spmath/cnv_float.h"
d28 3
a30 4

sgl_floating_point *srcptr;
int *dstptr;
unsigned int *status;
d46 22
a67 6
			/*
			 * Since source is a number which cannot be
			 * represented in fixed-point format, return
			 * largest (or smallest) fixed-point number.
			 */
			Sgl_return_overflow(src,dstptr);
d139 3
a141 4

sgl_floating_point *srcptr;
dbl_integer *dstptr;
unsigned int *status;
d157 27
a183 6
			/*
			 * Since source is a number which cannot be
			 * represented in fixed-point format, return
			 * largest (or smallest) fixed-point number.
			 */
			Sgl_return_overflow_dbl(src,dstptr);
d274 3
a276 4

dbl_floating_point *srcptr;
int *dstptr;
unsigned int *status;
d291 22
a312 6
			/*
			 * Since source is a number which cannot be
			 * represented in fixed-point format, return
			 * largest (or smallest) fixed-point number.
			 */
			Dbl_return_overflow(srcp1,srcp2,dstptr);
d333 3
a335 2
			     if (Dbl_iszero_sign(srcp1)) result++;
			     break;
d337 2
a338 2
			     if (Dbl_isone_sign(srcp1)) result--;
			     break;
d340 1
a340 1
			     if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
d343 2
a344 2
				   if (Dbl_iszero_sign(srcp1)) result++;
				   else result--;
d350 18
a367 1
				Dbl_return_overflow(srcp1,srcp2,dstptr);
d380 2
a381 2
			     if (Dbl_iszero_sign(srcp1)) result++;
			     break;
d383 2
a384 2
			     if (Dbl_isone_sign(srcp1)) result--;
			     break;
d386 1
a386 1
			     if (src_exponent == -1)
d388 2
a389 2
				   if (Dbl_iszero_sign(srcp1)) result++;
				   else result--;
d408 3
a410 4

dbl_floating_point *srcptr;
dbl_integer *dstptr;
unsigned int *status;
d426 27
a452 6
			/*
			 * Since source is a number which cannot be
			 * represented in fixed-point format, return
			 * largest (or smallest) fixed-point number.
			 */
			Dbl_return_overflow_dbl(srcp1,srcp2,dstptr);
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 23
a23 1
/*	$OpenBSD$	*/
d25 21
a45 18
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)fcnvfx.c: Revision: 2.8.88.2 Date: 93/12/08 13:27:29 */

#include "float.h"
#include "sgl_float.h"
#include "dbl_float.h"
#include "cnv_float.h"
d53 4
a56 3
	sgl_floating_point *srcptr;
	int *dstptr;
	unsigned int *status;
d72 6
a77 22
			if( Sgl_isnan(src) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Sgl_iszero_sign(src)) result = 0x7fffffff;
			  else result = 0x80000000;

			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d149 4
a152 3
	sgl_floating_point *srcptr;
	dbl_integer *dstptr;
	unsigned int *status;
d168 6
a173 27
			if( Sgl_isnan(src) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Sgl_iszero_sign(src)) {
				resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
			  else {
			    resultp1 = 0x80000000;
			    resultp2 = 0;
			  }
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d264 4
a267 3
	dbl_floating_point *srcptr;
	int *dstptr;
	unsigned int *status;
d282 6
a287 22
			if( Dbl_isnan(srcp1,srcp2) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Dbl_iszero_sign(srcp1)) result = 0x7fffffff;
			  else result = 0x80000000;

			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			    }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d308 2
a309 3
				if (Dbl_iszero_sign(srcp1))
					result++;
				break;
d311 2
a312 2
				if (Dbl_isone_sign(srcp1)) result--;
				break;
d314 1
a314 1
				if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
d317 2
a318 2
					if (Dbl_iszero_sign(srcp1)) result++;
					else result--;
d324 1
a324 18

				if (Dbl_iszero_sign(srcp1))
					result = 0x7fffffff;
				else
					result = 0x80000000;

			    if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			    }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d337 2
a338 2
				if (Dbl_iszero_sign(srcp1)) result++;
					break;
d340 2
a341 2
				if (Dbl_isone_sign(srcp1)) result--;
				break;
d343 1
a343 1
				if (src_exponent == -1)
d345 2
a346 2
					if (Dbl_iszero_sign(srcp1)) result++;
					else result--;
d365 4
a368 3
	dbl_floating_point *srcptr;
	dbl_integer *dstptr;
	unsigned int *status;
d384 6
a389 27
			if( Dbl_isnan(srcp1,srcp2) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Dbl_iszero_sign(srcp1)) {
			     resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
			  else {
			    resultp1 = 0x80000000;
			    resultp2 = 0;
			  }
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
@


1.5.6.2
log
@sync
@
text
@d27 2
a28 2
sgl_to_sgl_fcnvfx(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
d138 2
a139 2
sgl_to_dbl_fcnvfx(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
d273 2
a274 2
dbl_to_sgl_fcnvfx(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
d407 2
a408 2
dbl_to_dbl_fcnvfx(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
@


1.4
log
@remove unused nullptr arg, effectively unifying calling conventions for emulator routines
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvfx.c,v 1.3 1998/07/02 19:05:19 mickey Exp $	*/
d4 19
a22 19
 * Copyright 1996 1995 by Open Software Foundation, Inc.   
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
 * 
d30 1
a30 1
 * To anyone who acknowledges that this file is provided "AS IS" 
d32 7
a38 7
 *     permission to use, copy, modify, and distribute this file 
 * for any purpose is hereby granted without fee, provided that 
 * the above copyright notice and this notice appears in all 
 * copies, and that the name of Hewlett-Packard Company not be 
 * used in advertising or publicity pertaining to distribution 
 * of the software without specific, written prior permission.  
 * Hewlett-Packard Company makes no representations about the 
d48 1
a48 1
 *  Single Floating-point to Single Fixed-point 
d60 1
a60 1
	register boolean inexact = FALSE;
d65 1
a65 1
	/* 
d70 1
a70 1
		if ((src_exponent > SGL_FX_MAX_EXP + 1) || 
d72 2
a73 2
			/* 
		 	 * Since source is a number which cannot be 
d76 1
a76 1
		 	 */
d103 1
a103 1
			        if (Sgl_isone_stickybit(src,src_exponent) 
d105 2
a106 2
			           if (Sgl_iszero_sign(src)) result++;
			           else result--;
d109 1
a109 1
			} 
d128 3
a130 3
			        if (Sgl_isnotzero_mantissa(src)) {
			           if (Sgl_iszero_sign(src)) result++;
			           else result--;
d132 1
a132 1
			} 
d144 1
a144 1
 *  Single Floating-point to Double Fixed-point 
d156 1
a156 1
	register boolean inexact = FALSE;
d161 1
a161 1
	/* 
d166 1
a166 1
		if ((src_exponent > DBL_FX_MAX_EXP + 1) || 
d168 2
a169 2
			/* 
		 	 * Since source is a number which cannot be 
d172 1
a172 1
		 	 */
d193 4
a196 4
                        /*  round result  */
                        switch (Rounding_mode()) {
                        case ROUNDPLUS:
                             if (Sgl_iszero_sign(src)) {
d199 3
a201 3
                             break;
                        case ROUNDMINUS:
                             if (Sgl_isone_sign(src)) {
d204 4
a207 4
                             break;
                        case ROUNDNEAREST:
                             if (Sgl_isone_roundbit(src,src_exponent))
                                if (Sgl_isone_stickybit(src,src_exponent) || 
d212 1
a212 1
                                   else {
d216 3
a218 3
                        }
                }
        }
d225 4
a228 4
                        /*  round result  */
                        switch (Rounding_mode()) {
                        case ROUNDPLUS:
                             if (Sgl_iszero_sign(src)) {
d231 3
a233 3
                             break;
                        case ROUNDMINUS:
                             if (Sgl_isone_sign(src)) {
d236 5
a240 5
                             break;
                        case ROUNDNEAREST:
                             if (src_exponent == -1)
                                if (Sgl_isnotzero_mantissa(src)) {
                                   if (Sgl_iszero_sign(src)) {
d243 1
a243 1
                                   else {
d259 1
a259 1
 *  Double Floating-point to Single Fixed-point 
d271 1
a271 1
	register boolean inexact = FALSE;
d276 1
a276 1
	/* 
d282 2
a283 2
			/* 
			 * Since source is a number which cannot be 
d304 12
a315 12
                        inexact = TRUE;
                        /*  round result  */
                        switch (Rounding_mode()) {
                        case ROUNDPLUS:
                             if (Dbl_iszero_sign(srcp1)) result++;
                             break;
                        case ROUNDMINUS:
                             if (Dbl_isone_sign(srcp1)) result--;
                             break;
                        case ROUNDNEAREST:
                             if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
                                if (Dbl_isone_stickybit(srcp1,srcp2,src_exponent) || 
d317 2
a318 2
                                   if (Dbl_iszero_sign(srcp1)) result++;
                                   else result--;
d320 1
a320 1
                        } 
d326 1
a326 1
                }
d333 14
a346 14
                        inexact = TRUE;
                        /*  round result  */
                        switch (Rounding_mode()) {
                        case ROUNDPLUS:
                             if (Dbl_iszero_sign(srcp1)) result++;
                             break;
                        case ROUNDMINUS:
                             if (Dbl_isone_sign(srcp1)) result--;
                             break;
                        case ROUNDNEAREST:
                             if (src_exponent == -1)
                                if (Dbl_isnotzero_mantissa(srcp1,srcp2)) {
                                   if (Dbl_iszero_sign(srcp1)) result++;
                                   else result--;
d349 1
a349 1
                }
d352 2
a353 2
        if (inexact) {
                if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
d355 1
a355 1
        }
d360 1
a360 1
 *  Double Floating-point to Double Fixed-point 
d372 1
a372 1
	register boolean inexact = FALSE;
d377 1
a377 1
	/* 
d382 1
a382 1
		if ((src_exponent > DBL_FX_MAX_EXP + 1) || 
d384 2
a385 2
			/* 
		 	 * Since source is a number which cannot be 
d388 1
a388 1
		 	 */
d392 1
a392 1
 
d408 5
a412 5
                        inexact = TRUE;
                        /*  round result  */
                        switch (Rounding_mode()) {
                        case ROUNDPLUS:
                             if (Dbl_iszero_sign(srcp1)) {
d415 3
a417 3
                             break;
                        case ROUNDMINUS:
                             if (Dbl_isone_sign(srcp1)) {
d420 4
a423 4
                             break;
                        case ROUNDNEAREST:
                             if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
                                if (Dbl_isone_stickybit(srcp1,srcp2,src_exponent) || 
d425 1
a425 1
                                   if (Dbl_iszero_sign(srcp1)) {
d428 1
a428 1
                                   else {
d432 2
a433 2
                        } 
                }
d440 5
a444 5
                        inexact = TRUE;
                        /*  round result  */
                        switch (Rounding_mode()) {
                        case ROUNDPLUS:
                             if (Dbl_iszero_sign(srcp1)) {
d447 3
a449 3
                             break;
                        case ROUNDMINUS:
                             if (Dbl_isone_sign(srcp1)) {
d452 5
a456 5
                             break;
                        case ROUNDNEAREST:
                             if (src_exponent == -1)
                                if (Dbl_isnotzero_mantissa(srcp1,srcp2)) {
                                   if (Dbl_iszero_sign(srcp1)) {
d459 1
a459 1
                                   else {
d461 1
a461 1
				   } 
d464 1
a464 1
                }
d467 4
a470 4
        if (inexact) {
                if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
        	else Set_inexactflag();
        }
@


1.4.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvfx.c,v 1.5 2001/03/29 03:58:18 mickey Exp $	*/
d4 19
a22 19
 * Copyright 1996 1995 by Open Software Foundation, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
d30 1
a30 1
 * To anyone who acknowledges that this file is provided "AS IS"
d32 7
a38 7
 *     permission to use, copy, modify, and distribute this file
 * for any purpose is hereby granted without fee, provided that
 * the above copyright notice and this notice appears in all
 * copies, and that the name of Hewlett-Packard Company not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * Hewlett-Packard Company makes no representations about the
d48 1
a48 1
 *  Single Floating-point to Single Fixed-point
d60 1
a60 1
	register int inexact = FALSE;
d65 1
a65 1
	/*
d70 1
a70 1
		if ((src_exponent > SGL_FX_MAX_EXP + 1) ||
d72 2
a73 2
			/*
			 * Since source is a number which cannot be
d76 1
a76 1
			 */
d103 1
a103 1
				if (Sgl_isone_stickybit(src,src_exponent)
d105 2
a106 2
				   if (Sgl_iszero_sign(src)) result++;
				   else result--;
d109 1
a109 1
			}
d128 3
a130 3
				if (Sgl_isnotzero_mantissa(src)) {
				   if (Sgl_iszero_sign(src)) result++;
				   else result--;
d132 1
a132 1
			}
d144 1
a144 1
 *  Single Floating-point to Double Fixed-point
d156 1
a156 1
	register int inexact = FALSE;
d161 1
a161 1
	/*
d166 1
a166 1
		if ((src_exponent > DBL_FX_MAX_EXP + 1) ||
d168 2
a169 2
			/*
			 * Since source is a number which cannot be
d172 1
a172 1
			 */
d193 4
a196 4
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Sgl_iszero_sign(src)) {
d199 3
a201 3
			     break;
			case ROUNDMINUS:
			     if (Sgl_isone_sign(src)) {
d204 4
a207 4
			     break;
			case ROUNDNEAREST:
			     if (Sgl_isone_roundbit(src,src_exponent))
				if (Sgl_isone_stickybit(src,src_exponent) ||
d212 1
a212 1
				   else {
d216 3
a218 3
			}
		}
	}
d225 4
a228 4
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Sgl_iszero_sign(src)) {
d231 3
a233 3
			     break;
			case ROUNDMINUS:
			     if (Sgl_isone_sign(src)) {
d236 5
a240 5
			     break;
			case ROUNDNEAREST:
			     if (src_exponent == -1)
				if (Sgl_isnotzero_mantissa(src)) {
				   if (Sgl_iszero_sign(src)) {
d243 1
a243 1
				   else {
d259 1
a259 1
 *  Double Floating-point to Single Fixed-point
d271 1
a271 1
	register int inexact = FALSE;
d276 1
a276 1
	/*
d282 2
a283 2
			/*
			 * Since source is a number which cannot be
d304 12
a315 12
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Dbl_iszero_sign(srcp1)) result++;
			     break;
			case ROUNDMINUS:
			     if (Dbl_isone_sign(srcp1)) result--;
			     break;
			case ROUNDNEAREST:
			     if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
				if (Dbl_isone_stickybit(srcp1,srcp2,src_exponent) ||
d317 2
a318 2
				   if (Dbl_iszero_sign(srcp1)) result++;
				   else result--;
d320 1
a320 1
			}
d326 1
a326 1
		}
d333 14
a346 14
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Dbl_iszero_sign(srcp1)) result++;
			     break;
			case ROUNDMINUS:
			     if (Dbl_isone_sign(srcp1)) result--;
			     break;
			case ROUNDNEAREST:
			     if (src_exponent == -1)
				if (Dbl_isnotzero_mantissa(srcp1,srcp2)) {
				   if (Dbl_iszero_sign(srcp1)) result++;
				   else result--;
d349 1
a349 1
		}
d352 2
a353 2
	if (inexact) {
		if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
d355 1
a355 1
	}
d360 1
a360 1
 *  Double Floating-point to Double Fixed-point
d372 1
a372 1
	register int inexact = FALSE;
d377 1
a377 1
	/*
d382 1
a382 1
		if ((src_exponent > DBL_FX_MAX_EXP + 1) ||
d384 2
a385 2
			/*
			 * Since source is a number which cannot be
d388 1
a388 1
			 */
d392 1
a392 1

d408 5
a412 5
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Dbl_iszero_sign(srcp1)) {
d415 3
a417 3
			     break;
			case ROUNDMINUS:
			     if (Dbl_isone_sign(srcp1)) {
d420 4
a423 4
			     break;
			case ROUNDNEAREST:
			     if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
				if (Dbl_isone_stickybit(srcp1,srcp2,src_exponent) ||
d425 1
a425 1
				   if (Dbl_iszero_sign(srcp1)) {
d428 1
a428 1
				   else {
d432 2
a433 2
			}
		}
d440 5
a444 5
			inexact = TRUE;
			/*  round result  */
			switch (Rounding_mode()) {
			case ROUNDPLUS:
			     if (Dbl_iszero_sign(srcp1)) {
d447 3
a449 3
			     break;
			case ROUNDMINUS:
			     if (Dbl_isone_sign(srcp1)) {
d452 5
a456 5
			     break;
			case ROUNDNEAREST:
			     if (src_exponent == -1)
				if (Dbl_isnotzero_mantissa(srcp1,srcp2)) {
				   if (Dbl_iszero_sign(srcp1)) {
d459 1
a459 1
				   else {
d461 1
a461 1
				   }
d464 1
a464 1
		}
d467 4
a470 4
	if (inexact) {
		if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
		else Set_inexactflag();
	}
@


1.4.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 23
a23 1
/*	$OpenBSD$	*/
d25 21
a45 18
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)fcnvfx.c: Revision: 2.8.88.2 Date: 93/12/08 13:27:29 */

#include "float.h"
#include "sgl_float.h"
#include "dbl_float.h"
#include "cnv_float.h"
d53 4
a56 3
	sgl_floating_point *srcptr;
	int *dstptr;
	unsigned int *status;
d72 6
a77 22
			if( Sgl_isnan(src) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Sgl_iszero_sign(src)) result = 0x7fffffff;
			  else result = 0x80000000;

			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d149 4
a152 3
	sgl_floating_point *srcptr;
	dbl_integer *dstptr;
	unsigned int *status;
d168 6
a173 27
			if( Sgl_isnan(src) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Sgl_iszero_sign(src)) {
				resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
			  else {
			    resultp1 = 0x80000000;
			    resultp2 = 0;
			  }
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d264 4
a267 3
	dbl_floating_point *srcptr;
	int *dstptr;
	unsigned int *status;
d282 6
a287 22
			if( Dbl_isnan(srcp1,srcp2) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Dbl_iszero_sign(srcp1)) result = 0x7fffffff;
			  else result = 0x80000000;

			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			    }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d308 2
a309 3
				if (Dbl_iszero_sign(srcp1))
					result++;
				break;
d311 2
a312 2
				if (Dbl_isone_sign(srcp1)) result--;
				break;
d314 1
a314 1
				if (Dbl_isone_roundbit(srcp1,srcp2,src_exponent))
d317 2
a318 2
					if (Dbl_iszero_sign(srcp1)) result++;
					else result--;
d324 1
a324 18

				if (Dbl_iszero_sign(srcp1))
					result = 0x7fffffff;
				else
					result = 0x80000000;

			    if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			    }
			  Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d337 2
a338 2
				if (Dbl_iszero_sign(srcp1)) result++;
					break;
d340 2
a341 2
				if (Dbl_isone_sign(srcp1)) result--;
				break;
d343 1
a343 1
				if (src_exponent == -1)
d345 2
a346 2
					if (Dbl_iszero_sign(srcp1)) result++;
					else result--;
d365 4
a368 3
	dbl_floating_point *srcptr;
	dbl_integer *dstptr;
	unsigned int *status;
d384 6
a389 27
			if( Dbl_isnan(srcp1,srcp2) )
			  /*
			   * On NaN go unimplemented.
			   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
			  if (Dbl_iszero_sign(srcp1)) {
			     resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
			  else {
			    resultp1 = 0x80000000;
			    resultp2 = 0;
			  }
			  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
			    return(OVERFLOWEXCEPTION);
			  }
			  Set_overflowflag();
			  Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() )
				return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
@


1.4.2.3
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvfx.c,v 1.4.2.2 2003/03/27 23:26:54 niklas Exp $	*/
d27 2
a28 2
sgl_to_sgl_fcnvfx(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
d138 2
a139 2
sgl_to_dbl_fcnvfx(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
d273 2
a274 2
dbl_to_sgl_fcnvfx(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
d407 2
a408 2
dbl_to_dbl_fcnvfx(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
@


1.3
log
@ansi and fancy gcc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
sgl_to_sgl_fcnvfx(srcptr,nullptr,dstptr,status)
d54 1
a54 1
sgl_floating_point *srcptr, *nullptr, *status;
d56 1
d148 1
a148 1
sgl_to_dbl_fcnvfx(srcptr,nullptr,dstptr,status)
a151 1
void *nullptr;
d263 1
a263 1
dbl_to_sgl_fcnvfx(srcptr,nullptr,dstptr,status)
a266 1
void *nullptr;
d364 1
a364 1
dbl_to_dbl_fcnvfx(srcptr,nullptr,dstptr,status)
a367 1
void *nullptr;
@


1.2
log
@remove brain damaged rcs tags
@
text
@d1 2
d51 1
d103 1
a103 1
				|| (Sgl_isone_lowmantissa(temp)))
d106 1
d127 1
a127 1
			        if (Sgl_isnotzero_mantissa(src))
d130 1
d146 1
d151 2
a152 1
unsigned int *nullptr, *status;
d208 1
a208 1
				(Dint_isone_lowp2(resultp2)))
d215 1
d239 1
a239 1
                                if (Sgl_isnotzero_mantissa(src))
d246 1
d262 1
d267 2
a268 1
unsigned int *nullptr, *status;
d317 1
a317 1
				(Dbl_isone_lowmantissap1(tempp1)))
d320 1
d345 1
a345 1
                                if (Dbl_isnotzero_mantissa(srcp1,srcp2))
d348 1
d364 1
d369 2
a370 1
unsigned int *nullptr, *status;
d402 2
a403 2
		Dint_from_dbl_mantissa(tempp1,tempp2,src_exponent,resultp1,
		resultp2);
d426 1
a426 1
				(Dint_isone_lowp2(resultp2)))
d433 1
d457 1
a457 1
                                if (Dbl_isnotzero_mantissa(srcp1,srcp2))
d463 2
a464 1
				   }
@


1.1
log
@initial import of osf-hacked HP one
@
text
@a38 5
/* $Source: /cvs/mickey/src/arch/hppa/spmath/fcnvfx.c,v $
 * $Revision: 2.0 $	$Author: mickey $
 * $State: Exp $   	$Locker:  $
 * $Date: 1998/06/17 20:47:25 $
 */
@


1.1.1.1
log
@import the original hp sources for the spmath library w/
the a bsd-like hp licensing on 'em.
w/ many thanks to:
Mike Hibler <mike@@fast.cs.utah.edu>
James Loveluck <loveluck@@ri.silicomp.fr>
Patrick Roudaud <patrick@@enserg.fr>
@
text
@d2 39
a40 14
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* $Source: /usr/local/kcs/sys.REL9_05_800/spmath/RCS/fcnvfx.c,v $
 * $Revision: 2.8.88.2 $	$Author: runyan $
d42 1
a42 1
 * $Date: 93/12/08 13:27:29 $
d73 7
a79 23
		        if( Sgl_isnan(src) )
			  /* 
                           * On NaN go unimplemented.
		 	   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
                          if (Sgl_iszero_sign(src)) result = 0x7fffffff;
                          else result = 0x80000000; 

	                  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
                            return(OVERFLOWEXCEPTION);
                            }
                          Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() ) 
                             return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
       		}
d166 6
a171 27
		        if( Sgl_isnan(src) )
			  /* 
                           * On NaN go unimplemented.
		 	   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
                          if (Sgl_iszero_sign(src)) {
                              resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
                          else {
			    resultp1 = 0x80000000; 
			    resultp2 = 0;
			  }
	                  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
                            return(OVERFLOWEXCEPTION);
                            }
                          Set_overflowflag();
    		          Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() ) 
                             return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d277 6
a282 22
		        if( Dbl_isnan(srcp1,srcp2) )
			  /* 
                           * On NaN go unimplemented.
		 	   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
                          if (Dbl_iszero_sign(srcp1)) result = 0x7fffffff;
                          else result = 0x80000000; 

	                  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
                            return(OVERFLOWEXCEPTION);
                            }
                          Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() ) 
                             return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
d318 1
a318 16
			        
                          if (Dbl_iszero_sign(srcp1)) result = 0x7fffffff;
                          else result = 0x80000000; 

	                  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
                            return(OVERFLOWEXCEPTION);
                            }
                          Set_overflowflag();
			  *dstptr = result;
			  if (Is_inexacttrap_enabled() ) 
                             return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
d376 6
a381 27
		        if( Dbl_isnan(srcp1,srcp2) )
			  /* 
                           * On NaN go unimplemented.
		 	   */
			  return(UNIMPLEMENTEDEXCEPTION);
			else {
                          if (Dbl_iszero_sign(srcp1)) {
                              resultp1 = 0x7fffffff;
			      resultp2 = 0xffffffff;
			  }
                          else {
			    resultp1 = 0x80000000; 
			    resultp2 = 0;
			  }
	                  if (Is_overflowtrap_enabled()) {
			    if (Is_inexacttrap_enabled())
			      return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else Set_inexactflag();
                            return(OVERFLOWEXCEPTION);
                            }
                          Set_overflowflag();
    		          Dint_copytoptr(resultp1,resultp2,dstptr);
			  if (Is_inexacttrap_enabled() ) 
                             return(INEXACTEXCEPTION);
			  else Set_inexactflag();
			  return(NOEXCEPTION);
			}
@


