head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.28
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.26
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.22
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.18
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.20
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.12
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.16
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.14
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.10
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.8
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.26
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.24
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.20
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.22
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.18
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.16
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.8
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	HPUX_REL9_05_800:1.1.1.1
	HP:1.1.1
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.8
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.8
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@# @;


1.11
date	2011.04.16.20.52.12;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.23.18.01.30;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.23.20.25.21;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.20.19.26.59;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.07.22.19.30;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.04.08.50.30;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.03.58.18;	author mickey;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2001.03.28.23.55.59;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	98.07.02.19.05.14;	author mickey;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	98.06.23.21.19.24;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.20.33.56;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.05.07.21.37.19;	author mickey;	state Exp;
branches;
next	;

1.3.8.1
date	2001.04.18.16.06.37;	author niklas;	state Exp;
branches;
next	1.3.8.2;

1.3.8.2
date	2002.03.06.00.57.23;	author niklas;	state Exp;
branches;
next	1.3.8.3;

1.3.8.3
date	2003.03.27.23.26.54;	author niklas;	state Exp;
branches;
next	;

1.5.6.1
date	2002.01.31.22.55.10;	author niklas;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2002.06.11.03.35.38;	author art;	state Exp;
branches;
next	1.5.6.3;

1.5.6.3
date	2002.10.29.00.28.03;	author art;	state Exp;
branches;
next	1.5.6.4;

1.5.6.4
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@_LOCORE is already defined
@
text
@/*	$OpenBSD: divu.S,v 1.10 2005/01/23 18:01:30 mickey Exp $	*/
/*
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)divu.s: Revision: 1.11.88.1 Date: 93/12/07 15:06:01 */

#include <machine/asm.h>
#include <machine/frame.h>

;************************************************************************
; Implement an integer divide routine for 32-bit operands and 32-bit quotient
; and remainder with operand values of zero (divisor only) treated specially.
;
;****************************************************************************
; Definitions
;****************************************************************************
;
;	General registers
;
gr0	.reg		%r0		; General register zero
rem	.reg		%r3		; remainder and upper part of dividend
quo	.reg		%r4		; quotient and lower part of dividend
dvr	.reg		%r5		; divisor
tp	.reg		%r6		; temp. reg.

;******************************************************************************
	.text
LEAF_ENTRY(divu)
	stws,ma		rem,4(sp)		; save registers on stack
	stws,ma		quo,4(sp)		; save registers on stack
	stws,ma		dvr,4(sp)		; save registers on stack
	stws,ma		tp,4(sp)		; save registers on stack

	addi		0,arg2,dvr		; get divisor
	addi		0,arg1,quo		; get lower dividend
	addi		0,arg0,rem		; get upper dividend

	comib,>,n	0,dvr,hibit		; check for dvr >= 2**31
	addi		-1,gr0,tp		; set V-bit to 1
	ds		0,tp,0
	add		quo,quo,quo		; shift msb bit into carry
	ds		rem,dvr,rem		; 1st divide step, if carry
						;   out, msb of quotient = 0
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 2nd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 3rd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 4th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 5th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 6th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 7th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 8th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 9th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 10th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 11th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 12th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 13th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 14th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 15th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 16th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 17th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 18th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 19th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 20th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 21st divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 22nd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 23rd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 24th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 25th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 26th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 27th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 28th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 29th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 30th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 31st divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 32nd divide step,
	addc		quo,quo,quo		; shift last quo bit into quo
	addb,>=,n	rem,0,finish		; branch if pos. rem
	add,<		dvr,0,0			; if dvr > 0, add dvr
	add,tr		rem,dvr,rem		;   for correcting rem.
	sub		rem,dvr,rem		; else subtract dvr
;
;	end of divide routine
;
finish	stws		rem,0(arg3)		; save remainder in high part
						;   of result
	stws		quo,4(arg3)		; save quotient in low part
						;   of result
	ldws,mb		-4(sp),tp		; restore registers
	ldws,mb		-4(sp),dvr		; restore registers
	ldws,mb		-4(sp),quo		; restore registers
	bv		0(rp)			; return
	ldws,mb		-4(sp),rem		; restore registers
;
hibit	ldo		32(0),tp		; initialize loop counter
	add		quo,quo,quo		; shift high bit into carry
loop	addc		rem,rem,rem		; shift in high bit of dvdl
	addc,<>		0,0,0			; if bit shifted out of dvdu,
						;   want to do subtract
	comb,<<,n	rem,dvr,nosub		; if upper dividend > dvr,
	sub		rem,dvr,rem		;   subtract and
	add,tr		dvr,dvr,0		;   set carry
nosub	addi		0,0,0			; otherwise clear carry
	addib,>		-1,tp,loop		; inc. counter; finished?
	addc		quo,quo,quo		; shift bit of result into dvdl
	b		finish+4		; finish up
	stws		rem,0(arg3)		; save remainder in high part
						;   of result
EXIT(divu)

	.end
@


1.10
log
@use register names instead of numbers
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.9 2003/01/23 20:25:21 mickey Exp $	*/
a17 1
#define _LOCORE
@


1.9
log
@will need machine/frame.h for profiling
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.8 2002/09/20 19:26:59 mickey Exp $	*/
d31 5
a35 5
gr0	.equ		0		; General register zero
rem	.equ		3		; remainder and upper part of dividend
quo	.equ		4		; quotient and lower part of dividend
dvr	.equ		5		; divisor
tp	.equ		6		; temp. reg.
@


1.8
log
@kill dangling space, line and a space in the tab
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.7 2002/05/07 22:19:30 mickey Exp $	*/
d18 2
@


1.7
log
@bring over our mods; the cnv*c have a problem now, described in the osf version of the cnv_float.h, at the end
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 1
a20 1
; Implement an integer divide routine for 32-bit operands and 32-bit quotient 
d123 1
a123 1
finish	stws		rem,0(arg3)		; save remainder in high part 
d125 1
a125 1
	stws		quo,4(arg3)		; save quotient in low part 
d145 1
a145 1
	stws		rem,0(arg3)		; save remainder in high part 
@


1.6
log
@Use LEAF_ENTRY not ENTRY.
@
text
@d1 1
a1 26
/*	$OpenBSD: divu.S,v 1.5 2001/03/29 03:58:18 mickey Exp $	*/

/*
 * Copyright 1996 1995 by Open Software Foundation, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */
/*
 * pmk1.1
 */
d3 13
a15 13
 * (c) Copyright 1986 HEWLETT-PACKARD COMPANY
 *
 * To anyone who acknowledges that this file is provided "AS IS"
 * without any express or implied warranty:
 *     permission to use, copy, modify, and distribute this file
 * for any purpose is hereby granted without fee, provided that
 * the above copyright notice and this notice appears in all
 * copies, and that the name of Hewlett-Packard Company not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose.
 */
d19 15
a33 13
/**************************************************************************
 * Implement an integer divide routine for 32-bit operands and 32-bit quotient
 * and remainder with operand values of zero (divisor only) treated specially.
 *
 ***************************************************************************/
/*
 *	General registers
 */
gr0	.reg		%r0	/* General register zero */
rem	.reg		%r3	/* remainder and upper part of dividend */
quo	.reg		%r4	/* quotient and lower part of dividend */
dvr	.reg		%r5	/* divisor */
tp	.reg		%r6	/* temp. reg. */
d35 1
a36 2

/*****************************************************************************/
d123 1
a123 1
finish	stws		rem,0(arg3)		; save remainder in high part
d125 1
a125 1
	stws		quo,4(arg3)		; save quotient in low part
d145 1
a145 1
	stws		rem,0(arg3)		; save remainder in high part
d147 1
a148 1
EXIT(divu)
@


1.5
log
@big bang
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.4 2001/03/28 23:55:59 mickey Exp $	*/
d61 1
a61 1
ENTRY(divu)
@


1.5.6.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.6 2002/01/04 08:50:30 miod Exp $	*/
d61 1
a61 1
LEAF_ENTRY(divu)
@


1.5.6.2
log
@Sync UBC branch to -current
@
text
@d1 26
a26 1
/*	$OpenBSD$	*/
d28 13
a40 13
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)divu.s: Revision: 1.11.88.1 Date: 93/12/07 15:06:01 */
d44 13
a56 15
;************************************************************************
; Implement an integer divide routine for 32-bit operands and 32-bit quotient 
; and remainder with operand values of zero (divisor only) treated specially.
;
;****************************************************************************
; Definitions
;****************************************************************************
;
;	General registers
;
gr0	.equ		0		; General register zero
rem	.equ		3		; remainder and upper part of dividend
quo	.equ		4		; quotient and lower part of dividend
dvr	.equ		5		; divisor
tp	.equ		6		; temp. reg.
a57 1
;******************************************************************************
d59 2
d147 1
a147 1
finish	stws		rem,0(arg3)		; save remainder in high part 
d149 1
a149 1
	stws		quo,4(arg3)		; save quotient in low part 
d169 1
a169 1
	stws		rem,0(arg3)		; save remainder in high part 
d171 1
a172 1

@


1.5.6.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.5.6.2 2002/06/11 03:35:38 art Exp $	*/
d20 1
a20 1
; Implement an integer divide routine for 32-bit operands and 32-bit quotient
d123 1
a123 1
finish	stws		rem,0(arg3)		; save remainder in high part
d125 1
a125 1
	stws		quo,4(arg3)		; save quotient in low part
d145 1
a145 1
	stws		rem,0(arg3)		; save remainder in high part
@


1.5.6.4
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a17 2
#define _LOCORE
#include <machine/frame.h>
@


1.4
log
@start of text
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.3 1998/07/02 19:05:14 mickey Exp $	*/
d4 19
a22 19
 * Copyright 1996 1995 by Open Software Foundation, Inc.   
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
 * 
d30 1
a30 1
 * To anyone who acknowledges that this file is provided "AS IS" 
d32 7
a38 7
 *     permission to use, copy, modify, and distribute this file 
 * for any purpose is hereby granted without fee, provided that 
 * the above copyright notice and this notice appears in all 
 * copies, and that the name of Hewlett-Packard Company not be 
 * used in advertising or publicity pertaining to distribution 
 * of the software without specific, written prior permission.  
 * Hewlett-Packard Company makes no representations about the 
d45 1
a45 1
 * Implement an integer divide routine for 32-bit operands and 32-bit quotient 
d147 1
a147 1
finish	stws		rem,0(arg3)		; save remainder in high part 
d149 1
a149 1
	stws		quo,4(arg3)		; save quotient in low part 
d169 1
a169 1
	stws		rem,0(arg3)		; save remainder in high part 
@


1.3
log
@ansi and fancy gcc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 2
@


1.3.8.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: divu.S,v 1.5 2001/03/29 03:58:18 mickey Exp $	*/
d4 19
a22 19
 * Copyright 1996 1995 by Open Software Foundation, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
d30 1
a30 1
 * To anyone who acknowledges that this file is provided "AS IS"
d32 7
a38 7
 *     permission to use, copy, modify, and distribute this file
 * for any purpose is hereby granted without fee, provided that
 * the above copyright notice and this notice appears in all
 * copies, and that the name of Hewlett-Packard Company not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * Hewlett-Packard Company makes no representations about the
d45 1
a45 1
 * Implement an integer divide routine for 32-bit operands and 32-bit quotient
a57 2
	.text

d145 1
a145 1
finish	stws		rem,0(arg3)		; save remainder in high part
d147 1
a147 1
	stws		quo,4(arg3)		; save quotient in low part
d167 1
a167 1
	stws		rem,0(arg3)		; save remainder in high part
@


1.3.8.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
a61 1
LEAF_ENTRY(divu)
@


1.3.8.3
log
@Sync the SMP branch with 3.3
@
text
@d2 25
d28 13
a40 13
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)divu.s: Revision: 1.11.88.1 Date: 93/12/07 15:06:01 */
a42 2
#define _LOCORE
#include <machine/frame.h>
d44 13
a56 15
;************************************************************************
; Implement an integer divide routine for 32-bit operands and 32-bit quotient
; and remainder with operand values of zero (divisor only) treated specially.
;
;****************************************************************************
; Definitions
;****************************************************************************
;
;	General registers
;
gr0	.equ		0		; General register zero
rem	.equ		3		; remainder and upper part of dividend
quo	.equ		4		; quotient and lower part of dividend
dvr	.equ		5		; divisor
tp	.equ		6		; temp. reg.
a57 1
;******************************************************************************
d59 2
d171 1
a172 1

@


1.2
log
@remove brain damaged rcs tags
@
text
@d1 2
d52 5
a56 13
gr0	.equ		0	/* General register zero */
rem	.equ		3	/* remainder and upper part of dividend */
quo	.equ		4	/* quotient and lower part of dividend */
dvr	.equ		5	/* divisor */
tp	.equ		6	/* temp. reg. */

/*****************************************************************************/
	.export divu,entry
	.space $TEXT$
	.subspa $CODE$
	.align 4
	.proc
	.callinfo
d59 9
a67 8
divu	stws,ma		rem,4(sp)		# save registers on stack
	stws,ma		quo,4(sp)		# save registers on stack
	stws,ma		dvr,4(sp)		# save registers on stack
	stws,ma		tp,4(sp)		# save registers on stack

	addi		0,arg2,dvr		# get divisor
	addi		0,arg1,quo		# get lower dividend
	addi		0,arg0,rem		# get upper dividend
d69 2
a70 2
	comib,>,n	0,dvr,hibit		# check for dvr >= 2**31
	addi		-1,gr0,tp		# set V-bit to 1
d72 97
a168 97
	add		quo,quo,quo		# shift msb bit into carry
	ds		rem,dvr,rem		# 1st divide step, if carry
						#   out, msb of quotient = 0
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 2nd divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 3rd divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 4th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 5th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 6th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 7th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 8th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 9th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 10th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 11th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 12th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 13th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 14th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 15th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 16th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 17th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 18th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 19th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 20th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 21st divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 22nd divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 23rd divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 24th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 25th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 26th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 27th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 28th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 29th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 30th divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 31st divide step
	addc		quo,quo,quo		# shift quo with/into carry
	ds		rem,dvr,rem		# 32nd divide step,
	addc		quo,quo,quo		# shift last quo bit into quo
	addb,>=,n	rem,0,finish		# branch if pos. rem
	add,<		dvr,0,0			# if dvr > 0, add dvr
	add,tr		rem,dvr,rem		#   for correcting rem.
	sub		rem,dvr,rem		# else subtract dvr
#
#	end of divide routine
#
finish	stws		rem,0(arg3)		# save remainder in high part 
						#   of result
	stws		quo,4(arg3)		# save quotient in low part 
						#   of result
	ldws,mb		-4(sp),tp		# restore registers
	ldws,mb		-4(sp),dvr		# restore registers
	ldws,mb		-4(sp),quo		# restore registers
	bv		0(rp)			# return
	ldws,mb		-4(sp),rem		# restore registers
#
hibit	ldo		32(0),tp		# initialize loop counter
	add		quo,quo,quo		# shift high bit into carry
loop	addc		rem,rem,rem		# shift in high bit of dvdl
	addc,<>		0,0,0			# if bit shifted out of dvdu,
						#   want to do subtract
	comb,<<,n	rem,dvr,nosub		# if upper dividend > dvr,
	sub		rem,dvr,rem		#   subtract and
	add,tr		dvr,dvr,0		#   set carry
nosub	addi		0,0,0			# otherwise clear carry
	addib,>		-1,tp,loop		# inc. counter# finished?
	addc		quo,quo,quo		# shift bit of result into dvdl
	b		finish+4		# finish up
	stws		rem,0(arg3)		# save remainder in high part 
						#   of result
d170 1
a170 1
	.procend
@


1.1
log
@initial import of osf-hacked HP one
@
text
@a38 5
/* $Source: /cvs/mickey/src/arch/hppa/spmath/divu.S,v $
 * $Revision: 2.0 $	$Author: mickey $
 * $State: Exp $   	$Locker:  $
 * $Date: 1998/06/17 20:47:21 $
 */
@


1.1.1.1
log
@import the original hp sources for the spmath library w/
the a bsd-like hp licensing on 'em.
w/ many thanks to:
Mike Hibler <mike@@fast.cs.utah.edu>
James Loveluck <loveluck@@ri.silicomp.fr>
Patrick Roudaud <patrick@@enserg.fr>
@
text
@d2 39
a40 14
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* $Source: /usr/local/kcs/sys.REL9_05_800/spmath/RCS/divu.s,v $
 * $Revision: 1.11.88.1 $	$Author: root $
d42 1
a42 1
 * $Date: 93/12/07 15:06:01 $
d45 1
d47 13
a59 15
;************************************************************************
; Implement an integer divide routine for 32-bit operands and 32-bit quotient 
; and remainder with operand values of zero (divisor only) treated specially.
;
;****************************************************************************
; Definitions
;****************************************************************************
;
;	General registers
;
gr0	.equ		0		; General register zero
rem	.equ		3		; remainder and upper part of dividend
quo	.equ		4		; quotient and lower part of dividend
dvr	.equ		5		; divisor
tp	.equ		6		; temp. reg.
d61 1
a61 1
;******************************************************************************
a67 10
;
;******************************************************************************
divu	stws,ma		rem,4(sp)		; save registers on stack
	stws,ma		quo,4(sp)		; save registers on stack
	stws,ma		dvr,4(sp)		; save registers on stack
	stws,ma		tp,4(sp)		; save registers on stack

	addi		0,arg2,dvr		; get divisor
	addi		0,arg1,quo		; get lower dividend
	addi		0,arg0,rem		; get upper dividend
d69 12
a80 2
	comib,>,n	0,dvr,hibit		; check for dvr >= 2**31
	addi		-1,gr0,tp		; set V-bit to 1
d82 97
a178 97
	add		quo,quo,quo		; shift msb bit into carry
	ds		rem,dvr,rem		; 1st divide step, if carry
						;   out, msb of quotient = 0
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 2nd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 3rd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 4th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 5th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 6th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 7th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 8th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 9th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 10th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 11th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 12th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 13th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 14th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 15th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 16th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 17th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 18th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 19th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 20th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 21st divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 22nd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 23rd divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 24th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 25th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 26th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 27th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 28th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 29th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 30th divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 31st divide step
	addc		quo,quo,quo		; shift quo with/into carry
	ds		rem,dvr,rem		; 32nd divide step,
	addc		quo,quo,quo		; shift last quo bit into quo
	addb,>=,n	rem,0,finish		; branch if pos. rem
	add,<		dvr,0,0			; if dvr > 0, add dvr
	add,tr		rem,dvr,rem		;   for correcting rem.
	sub		rem,dvr,rem		; else subtract dvr
;
;	end of divide routine
;
finish	stws		rem,(arg3)		; save remainder in high part 
						;   of result
	stws		quo,4(arg3)		; save quotient in low part 
						;   of result
	ldws,mb		-4(sp),tp		; restore registers
	ldws,mb		-4(sp),dvr		; restore registers
	ldws,mb		-4(sp),quo		; restore registers
	bv		0(rp)			; return
	ldws,mb		-4(sp),rem		; restore registers
;
hibit	ldo		32(0),tp		; initialize loop counter
	add		quo,quo,quo		; shift high bit into carry
loop	addc		rem,rem,rem		; shift in high bit of dvdl
	addc,<>		0,0,0			; if bit shifted out of dvdu,
						;   want to do subtract
	comb,<<,n	rem,dvr,nosub		; if upper dividend > dvr,
	sub		rem,dvr,rem		;   subtract and
	add,tr		dvr,dvr,0		;   set carry
nosub	addi		0,0,0			; otherwise clear carry
	addib,>		-1,tp,loop		; inc. counter; finished?
	addc		quo,quo,quo		; shift bit of result into dvdl
	b		finish+4		; finish up
	stws		rem,(arg3)		; save remainder in high part 
						;   of result
@


