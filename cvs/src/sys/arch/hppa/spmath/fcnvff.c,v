head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.60
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.58
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.54
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.50
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.52
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.44
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.48
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	HPUX_REL9_05_800:1.1.1.1
	HP:1.1.1
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2003.04.10.17.27.58;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.07.22.19.30;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.03.58.18;	author mickey;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2000.01.11.08.18.43;	author mickey;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	98.07.02.19.05.18;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	98.06.23.21.19.28;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.20.33.57;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.05.07.21.37.19;	author mickey;	state Exp;
branches;
next	;

1.4.2.1
date	2001.04.18.16.06.38;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.03.27.23.26.54;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2003.05.13.19.41.04;	author ho;	state Exp;
branches;
next	;

1.5.6.1
date	2002.06.11.03.35.38;	author art;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@make all entry points of the same number of arguments and that greatly simplifies the call setup in the scheduler
@
text
@/*	$OpenBSD: fcnvff.c,v 1.6 2002/05/07 22:19:30 mickey Exp $	*/
/*
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)fcnvff.c: Revision: 2.8.88.1 Date: 93/12/07 15:06:09 */

#include "float.h"
#include "sgl_float.h"
#include "dbl_float.h"
#include "cnv_float.h"

/*
 *  Single Floating-point to Double Floating-point
 */
/*ARGSUSED*/
int
sgl_to_dbl_fcnvff(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
	dbl_floating_point *dstptr;
	unsigned int *status;
{
	register unsigned int src, resultp1, resultp2;
	register int src_exponent;

	src = *srcptr;
	src_exponent = Sgl_exponent(src);
	Dbl_allp1(resultp1) = Sgl_all(src);  /* set sign of result */
	/*
	 * Test for NaN or infinity
	 */
	if (src_exponent == SGL_INFINITY_EXPONENT) {
		/*
		 * determine if NaN or infinity
		 */
		if (Sgl_iszero_mantissa(src)) {
			/*
			 * is infinity; want to return double infinity
			 */
			Dbl_setinfinity_exponentmantissa(resultp1,resultp2);
			Dbl_copytoptr(resultp1,resultp2,dstptr);
			return(NOEXCEPTION);
		}
		else {
			/*
			 * is NaN; signaling or quiet?
			 */
			if (Sgl_isone_signaling(src)) {
				/* trap if INVALIDTRAP enabled */
				if (Is_invalidtrap_enabled())
					return(INVALIDEXCEPTION);
				/* make NaN quiet */
				else {
					Set_invalidflag();
					Sgl_set_quiet(src);
				}
			}
			/*
			 * NaN is quiet, return as double NaN
			 */
			Dbl_setinfinity_exponent(resultp1);
			Sgl_to_dbl_mantissa(src,resultp1,resultp2);
			Dbl_copytoptr(resultp1,resultp2,dstptr);
			return(NOEXCEPTION);
		}
	}
	/*
	 * Test for zero or denormalized
	 */
	if (src_exponent == 0) {
		/*
		 * determine if zero or denormalized
		 */
		if (Sgl_isnotzero_mantissa(src)) {
			/*
			 * is denormalized; want to normalize
			 */
			Sgl_clear_signexponent(src);
			Sgl_leftshiftby1(src);
			Sgl_normalize(src,src_exponent);
			Sgl_to_dbl_exponent(src_exponent,resultp1);
			Sgl_to_dbl_mantissa(src,resultp1,resultp2);
		}
		else {
			Dbl_setzero_exponentmantissa(resultp1,resultp2);
		}
		Dbl_copytoptr(resultp1,resultp2,dstptr);
		return(NOEXCEPTION);
	}
	/*
	 * No special cases, just complete the conversion
	 */
	Sgl_to_dbl_exponent(src_exponent, resultp1);
	Sgl_to_dbl_mantissa(Sgl_mantissa(src), resultp1,resultp2);
	Dbl_copytoptr(resultp1,resultp2,dstptr);
	return(NOEXCEPTION);
}

/*
 *  Double Floating-point to Single Floating-point
 */
/*ARGSUSED*/
int
dbl_to_sgl_fcnvff(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
	sgl_floating_point *dstptr;
	unsigned int *status;
{
	register unsigned int srcp1, srcp2, result;
	register int src_exponent, dest_exponent, dest_mantissa;
	register int inexact = FALSE, guardbit = FALSE, stickybit = FALSE;
	register int lsb_odd = FALSE;
	int is_tiny;

	Dbl_copyfromptr(srcptr,srcp1,srcp2);
	src_exponent = Dbl_exponent(srcp1);
	Sgl_all(result) = Dbl_allp1(srcp1);  /* set sign of result */
	/*
	 * Test for NaN or infinity
	 */
	if (src_exponent == DBL_INFINITY_EXPONENT) {
		/*
		 * determine if NaN or infinity
		 */
		if (Dbl_iszero_mantissa(srcp1,srcp2)) {
			/*
			 * is infinity; want to return single infinity
			 */
			Sgl_setinfinity_exponentmantissa(result);
			*dstptr = result;
			return(NOEXCEPTION);
		}
		/*
		 * is NaN; signaling or quiet?
		 */
		if (Dbl_isone_signaling(srcp1)) {
			/* trap if INVALIDTRAP enabled */
			if (Is_invalidtrap_enabled()) return(INVALIDEXCEPTION);
			else {
				Set_invalidflag();
				/* make NaN quiet */
				Dbl_set_quiet(srcp1);
			}
		}
		/*
		 * NaN is quiet, return as single NaN
		 */
		Sgl_setinfinity_exponent(result);
		Sgl_set_mantissa(result,Dallp1(srcp1)<<3 | Dallp2(srcp2)>>29);
		if (Sgl_iszero_mantissa(result)) Sgl_set_quiet(result);
		*dstptr = result;
		return(NOEXCEPTION);
	}
	/*
	 * Generate result
	 */
	Dbl_to_sgl_exponent(src_exponent,dest_exponent);
	if (dest_exponent > 0) {
		Dbl_to_sgl_mantissa(srcp1,srcp2,dest_mantissa,inexact,guardbit,
		stickybit,lsb_odd);
	}
	else {
		if (Dbl_iszero_exponentmantissa(srcp1,srcp2)){
			Sgl_setzero_exponentmantissa(result);
			*dstptr = result;
			return(NOEXCEPTION);
		}
		if (Is_underflowtrap_enabled()) {
			Dbl_to_sgl_mantissa(srcp1,srcp2,dest_mantissa,inexact,
			guardbit,stickybit,lsb_odd);
		}
		else {
			/* compute result, determine inexact info,
			 * and set Underflowflag if appropriate
			 */
			Dbl_to_sgl_denormalized(srcp1,srcp2,dest_exponent,
			dest_mantissa,inexact,guardbit,stickybit,lsb_odd,
			is_tiny);
		}
	}
	/*
	 * Now round result if not exact
	 */
	if (inexact) {
		switch (Rounding_mode()) {
			case ROUNDPLUS:
				if (Sgl_iszero_sign(result)) dest_mantissa++;
				break;
			case ROUNDMINUS:
				if (Sgl_isone_sign(result)) dest_mantissa++;
				break;
			case ROUNDNEAREST:
				if (guardbit) {
				   if (stickybit || lsb_odd) dest_mantissa++;
				   }
		}
	}
	Sgl_set_exponentmantissa(result,dest_mantissa);

	/*
	 * check for mantissa overflow after rounding
	 */
	if ((dest_exponent>0 || Is_underflowtrap_enabled()) &&
	    Sgl_isone_hidden(result)) dest_exponent++;

	/*
	 * Test for overflow
	 */
	if (dest_exponent >= SGL_INFINITY_EXPONENT) {
		/* trap if OVERFLOWTRAP enabled */
		if (Is_overflowtrap_enabled()) {
			/*
			 * Check for gross overflow
			 */
			if (dest_exponent >= SGL_INFINITY_EXPONENT+SGL_WRAP)
				return(UNIMPLEMENTEDEXCEPTION);

			/*
			 * Adjust bias of result
			 */
			Sgl_setwrapped_exponent(result,dest_exponent,ovfl);
			*dstptr = result;
			if (inexact) {
			    if (Is_inexacttrap_enabled())
				return(OVERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else
				Set_inexactflag();
			}
			return(OVERFLOWEXCEPTION);
		}
		Set_overflowflag();
		inexact = TRUE;
		/* set result to infinity or largest number */
		Sgl_setoverflow(result);
	}
	/*
	 * Test for underflow
	 */
	else if (dest_exponent <= 0) {
		/* trap if UNDERFLOWTRAP enabled */
		if (Is_underflowtrap_enabled()) {
			/*
			 * Check for gross underflow
			 */
			if (dest_exponent <= -(SGL_WRAP))
				return(UNIMPLEMENTEDEXCEPTION);
			/*
			 * Adjust bias of result
			 */
			Sgl_setwrapped_exponent(result,dest_exponent,unfl);
			*dstptr = result;
			if (inexact) {
			    if (Is_inexacttrap_enabled())
				return(UNDERFLOWEXCEPTION|INEXACTEXCEPTION);
			    else
				Set_inexactflag();
			}
			return(UNDERFLOWEXCEPTION);
		}
		 /*
		  * result is denormalized or signed zero
		  */
	       if (inexact && is_tiny) Set_underflowflag();

	}
	else Sgl_set_exponent(result,dest_exponent);
	*dstptr = result;
	/*
	 * Trap if inexact trap is enabled
	 */
	if (inexact) {
		if (Is_inexacttrap_enabled())
			return(INEXACTEXCEPTION);
		else
			Set_inexactflag();
	}
	return(NOEXCEPTION);
}
@


1.6
log
@bring over our mods; the cnv*c have a problem now, described in the osf version of the cnv_float.h, at the end
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 2
a28 2
sgl_to_dbl_fcnvff(srcptr,dstptr,status)
	sgl_floating_point *srcptr;
d113 2
a114 2
dbl_to_sgl_fcnvff(srcptr,dstptr,status)
	dbl_floating_point *srcptr;
@


1.5
log
@big bang
@
text
@d1 1
a1 26
/*	$OpenBSD: fcnvff.c,v 1.4 2000/01/11 08:18:43 mickey Exp $	*/

/*
 * Copyright 1996 1995 by Open Software Foundation, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */
/*
 * pmk1.1
 */
d3 18
a20 18
 * (c) Copyright 1986 HEWLETT-PACKARD COMPANY
 *
 * To anyone who acknowledges that this file is provided "AS IS"
 * without any express or implied warranty:
 *     permission to use, copy, modify, and distribute this file
 * for any purpose is hereby granted without fee, provided that
 * the above copyright notice and this notice appears in all
 * copies, and that the name of Hewlett-Packard Company not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose.
 */

#include "../spmath/float.h"
#include "../spmath/sgl_float.h"
#include "../spmath/dbl_float.h"
#include "../spmath/cnv_float.h"
d28 3
a30 4

sgl_floating_point *srcptr;
dbl_floating_point *dstptr;
unsigned int *status;
d114 3
a116 4

dbl_floating_point *srcptr;
sgl_floating_point *dstptr;
unsigned int *status;
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 26
a26 1
/*	$OpenBSD$	*/
d28 18
a45 18
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)fcnvff.c: Revision: 2.8.88.1 Date: 93/12/07 15:06:09 */

#include "float.h"
#include "sgl_float.h"
#include "dbl_float.h"
#include "cnv_float.h"
d53 4
a56 3
	sgl_floating_point *srcptr;
	dbl_floating_point *dstptr;
	unsigned int *status;
d140 4
a143 3
	dbl_floating_point *srcptr;
	sgl_floating_point *dstptr;
	unsigned int *status;
@


1.5.6.2
log
@sync
@
text
@d27 2
a28 2
sgl_to_dbl_fcnvff(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
d113 2
a114 2
dbl_to_sgl_fcnvff(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
@


1.4
log
@remove unused nullptr arg, effectively unifying calling conventions for emulator routines
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvff.c,v 1.3 1998/07/02 19:05:18 mickey Exp $	*/
d4 19
a22 19
 * Copyright 1996 1995 by Open Software Foundation, Inc.   
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
 * 
d30 1
a30 1
 * To anyone who acknowledges that this file is provided "AS IS" 
d32 7
a38 7
 *     permission to use, copy, modify, and distribute this file 
 * for any purpose is hereby granted without fee, provided that 
 * the above copyright notice and this notice appears in all 
 * copies, and that the name of Hewlett-Packard Company not be 
 * used in advertising or publicity pertaining to distribution 
 * of the software without specific, written prior permission.  
 * Hewlett-Packard Company makes no representations about the 
d48 1
a48 1
 *  Single Floating-point to Double Floating-point 
d64 3
a66 3
	/* 
 	 * Test for NaN or infinity
 	 */
d80 1
a80 1
			/* 
d93 2
a94 2
			/* 
			 * NaN is quiet, return as double NaN 
d102 3
a104 3
	/* 
 	 * Test for zero or denormalized
 	 */
d135 1
a135 1
 *  Double Floating-point to Single Floating-point 
d145 5
a149 5
        register unsigned int srcp1, srcp2, result;
        register int src_exponent, dest_exponent, dest_mantissa;
        register boolean inexact = FALSE, guardbit = FALSE, stickybit = FALSE;
	register boolean lsb_odd = FALSE;
	boolean is_tiny;
d152 1
a152 1
        src_exponent = Dbl_exponent(srcp1);
d154 22
a175 22
        /* 
         * Test for NaN or infinity
         */
        if (src_exponent == DBL_INFINITY_EXPONENT) {
                /*
                 * determine if NaN or infinity
                 */
                if (Dbl_iszero_mantissa(srcp1,srcp2)) {
                        /*
                         * is infinity; want to return single infinity
                         */
                        Sgl_setinfinity_exponentmantissa(result);
                        *dstptr = result;
                        return(NOEXCEPTION);
                }
                /* 
                 * is NaN; signaling or quiet?
                 */
                if (Dbl_isone_signaling(srcp1)) {
                        /* trap if INVALIDTRAP enabled */
                        if (Is_invalidtrap_enabled()) return(INVALIDEXCEPTION);
                        else {
d177 2
a178 2
                        	/* make NaN quiet */
                        	Dbl_set_quiet(srcp1);
d180 5
a184 5
                }
                /* 
                 * NaN is quiet, return as single NaN 
                 */
                Sgl_setinfinity_exponent(result);
d187 7
a193 7
                *dstptr = result;
                return(NOEXCEPTION);
        }
        /*
         * Generate result
         */
        Dbl_to_sgl_exponent(src_exponent,dest_exponent);
d195 1
a195 1
        	Dbl_to_sgl_mantissa(srcp1,srcp2,dest_mantissa,inexact,guardbit, 
d204 1
a204 1
                if (Is_underflowtrap_enabled()) {
d207 1
a207 1
                }
d217 23
a239 23
        /* 
         * Now round result if not exact
         */
        if (inexact) {
                switch (Rounding_mode()) {
                        case ROUNDPLUS: 
                                if (Sgl_iszero_sign(result)) dest_mantissa++;
                                break;
                        case ROUNDMINUS: 
                                if (Sgl_isone_sign(result)) dest_mantissa++;
                                break;
                        case ROUNDNEAREST:
                                if (guardbit) {
                                   if (stickybit || lsb_odd) dest_mantissa++;
                                   }
                }
        }
        Sgl_set_exponentmantissa(result,dest_mantissa);

        /*
         * check for mantissa overflow after rounding
         */
        if ((dest_exponent>0 || Is_underflowtrap_enabled()) && 
d242 15
a256 15
        /* 
         * Test for overflow
         */
        if (dest_exponent >= SGL_INFINITY_EXPONENT) {
                /* trap if OVERFLOWTRAP enabled */
                if (Is_overflowtrap_enabled()) {
                        /* 
                         * Check for gross overflow
                         */
                        if (dest_exponent >= SGL_INFINITY_EXPONENT+SGL_WRAP) 
                        	return(UNIMPLEMENTEDEXCEPTION);
                        
                        /*
                         * Adjust bias of result
                         */
d265 3
a267 3
                        return(OVERFLOWEXCEPTION);
                }
                Set_overflowflag();
d271 15
a285 15
        }
        /* 
         * Test for underflow
         */
        else if (dest_exponent <= 0) {
                /* trap if UNDERFLOWTRAP enabled */
                if (Is_underflowtrap_enabled()) {
                        /* 
                         * Check for gross underflow
                         */
                        if (dest_exponent <= -(SGL_WRAP))
                        	return(UNIMPLEMENTEDEXCEPTION);
                        /*
                         * Adjust bias of result
                         */
d294 6
a299 6
                        return(UNDERFLOWEXCEPTION);
                }
                 /* 
                  * result is denormalized or signed zero
                  */
               if (inexact && is_tiny) Set_underflowflag();
d301 1
a301 1
        }
d304 8
a311 6
        /* 
         * Trap if inexact trap is enabled
         */
        if (inexact) {
        	if (Is_inexacttrap_enabled()) return(INEXACTEXCEPTION);
        	else Set_inexactflag();
d313 1
a313 1
        return(NOEXCEPTION);
@


1.4.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvff.c,v 1.5 2001/03/29 03:58:18 mickey Exp $	*/
d4 19
a22 19
 * Copyright 1996 1995 by Open Software Foundation, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
d30 1
a30 1
 * To anyone who acknowledges that this file is provided "AS IS"
d32 7
a38 7
 *     permission to use, copy, modify, and distribute this file
 * for any purpose is hereby granted without fee, provided that
 * the above copyright notice and this notice appears in all
 * copies, and that the name of Hewlett-Packard Company not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * Hewlett-Packard Company makes no representations about the
d48 1
a48 1
 *  Single Floating-point to Double Floating-point
d64 3
a66 3
	/*
	 * Test for NaN or infinity
	 */
d80 1
a80 1
			/*
d93 2
a94 2
			/*
			 * NaN is quiet, return as double NaN
d102 3
a104 3
	/*
	 * Test for zero or denormalized
	 */
d135 1
a135 1
 *  Double Floating-point to Single Floating-point
d145 5
a149 5
	register unsigned int srcp1, srcp2, result;
	register int src_exponent, dest_exponent, dest_mantissa;
	register int inexact = FALSE, guardbit = FALSE, stickybit = FALSE;
	register int lsb_odd = FALSE;
	int is_tiny;
d152 1
a152 1
	src_exponent = Dbl_exponent(srcp1);
d154 22
a175 22
	/*
	 * Test for NaN or infinity
	 */
	if (src_exponent == DBL_INFINITY_EXPONENT) {
		/*
		 * determine if NaN or infinity
		 */
		if (Dbl_iszero_mantissa(srcp1,srcp2)) {
			/*
			 * is infinity; want to return single infinity
			 */
			Sgl_setinfinity_exponentmantissa(result);
			*dstptr = result;
			return(NOEXCEPTION);
		}
		/*
		 * is NaN; signaling or quiet?
		 */
		if (Dbl_isone_signaling(srcp1)) {
			/* trap if INVALIDTRAP enabled */
			if (Is_invalidtrap_enabled()) return(INVALIDEXCEPTION);
			else {
d177 2
a178 2
				/* make NaN quiet */
				Dbl_set_quiet(srcp1);
d180 5
a184 5
		}
		/*
		 * NaN is quiet, return as single NaN
		 */
		Sgl_setinfinity_exponent(result);
d187 7
a193 7
		*dstptr = result;
		return(NOEXCEPTION);
	}
	/*
	 * Generate result
	 */
	Dbl_to_sgl_exponent(src_exponent,dest_exponent);
d195 1
a195 1
		Dbl_to_sgl_mantissa(srcp1,srcp2,dest_mantissa,inexact,guardbit,
d204 1
a204 1
		if (Is_underflowtrap_enabled()) {
d207 1
a207 1
		}
d217 23
a239 23
	/*
	 * Now round result if not exact
	 */
	if (inexact) {
		switch (Rounding_mode()) {
			case ROUNDPLUS:
				if (Sgl_iszero_sign(result)) dest_mantissa++;
				break;
			case ROUNDMINUS:
				if (Sgl_isone_sign(result)) dest_mantissa++;
				break;
			case ROUNDNEAREST:
				if (guardbit) {
				   if (stickybit || lsb_odd) dest_mantissa++;
				   }
		}
	}
	Sgl_set_exponentmantissa(result,dest_mantissa);

	/*
	 * check for mantissa overflow after rounding
	 */
	if ((dest_exponent>0 || Is_underflowtrap_enabled()) &&
d242 15
a256 15
	/*
	 * Test for overflow
	 */
	if (dest_exponent >= SGL_INFINITY_EXPONENT) {
		/* trap if OVERFLOWTRAP enabled */
		if (Is_overflowtrap_enabled()) {
			/*
			 * Check for gross overflow
			 */
			if (dest_exponent >= SGL_INFINITY_EXPONENT+SGL_WRAP)
				return(UNIMPLEMENTEDEXCEPTION);

			/*
			 * Adjust bias of result
			 */
d265 3
a267 3
			return(OVERFLOWEXCEPTION);
		}
		Set_overflowflag();
d271 15
a285 15
	}
	/*
	 * Test for underflow
	 */
	else if (dest_exponent <= 0) {
		/* trap if UNDERFLOWTRAP enabled */
		if (Is_underflowtrap_enabled()) {
			/*
			 * Check for gross underflow
			 */
			if (dest_exponent <= -(SGL_WRAP))
				return(UNIMPLEMENTEDEXCEPTION);
			/*
			 * Adjust bias of result
			 */
d294 6
a299 6
			return(UNDERFLOWEXCEPTION);
		}
		 /*
		  * result is denormalized or signed zero
		  */
	       if (inexact && is_tiny) Set_underflowflag();
d301 1
a301 1
	}
d304 6
a309 8
	/*
	 * Trap if inexact trap is enabled
	 */
	if (inexact) {
		if (Is_inexacttrap_enabled())
			return(INEXACTEXCEPTION);
		else
			Set_inexactflag();
d311 1
a311 1
	return(NOEXCEPTION);
@


1.4.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 26
a26 1
/*	$OpenBSD$	*/
d28 18
a45 18
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* @@(#)fcnvff.c: Revision: 2.8.88.1 Date: 93/12/07 15:06:09 */

#include "float.h"
#include "sgl_float.h"
#include "dbl_float.h"
#include "cnv_float.h"
d53 4
a56 3
	sgl_floating_point *srcptr;
	dbl_floating_point *dstptr;
	unsigned int *status;
d140 4
a143 3
	dbl_floating_point *srcptr;
	sgl_floating_point *dstptr;
	unsigned int *status;
@


1.4.2.3
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcnvff.c,v 1.4.2.2 2003/03/27 23:26:54 niklas Exp $	*/
d27 2
a28 2
sgl_to_dbl_fcnvff(srcptr, null, dstptr, status)
	sgl_floating_point *srcptr, *null;
d113 2
a114 2
dbl_to_sgl_fcnvff(srcptr, null, dstptr, status)
	dbl_floating_point *srcptr, *null;
@


1.3
log
@ansi and fancy gcc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
sgl_to_dbl_fcnvff(srcptr,nullptr,dstptr,status)
a55 1
void *nullptr;
d139 1
a139 1
dbl_to_sgl_fcnvff(srcptr,nullptr,dstptr,status)
a142 1
void *nullptr;
@


1.2
log
@remove brain damaged rcs tags
@
text
@d1 2
d51 1
d56 2
a57 1
unsigned int *nullptr, *status;
d139 1
d144 2
a145 1
unsigned int *nullptr, *status;
d261 1
a261 1
			if (inexact) 
d264 3
a266 1
			    else Set_inexactflag();
d290 1
a290 1
			if (inexact) 
d293 3
a295 1
			    else Set_inexactflag();
d309 1
a309 1
        if (inexact)
d312 1
@


1.1
log
@initial import of osf-hacked HP one
@
text
@a38 5
/* $Source: /cvs/mickey/src/arch/hppa/spmath/fcnvff.c,v $
 * $Revision: 2.0 $	$Author: mickey $
 * $State: Exp $   	$Locker:  $
 * $Date: 1998/06/17 20:47:24 $
 */
@


1.1.1.1
log
@import the original hp sources for the spmath library w/
the a bsd-like hp licensing on 'em.
w/ many thanks to:
Mike Hibler <mike@@fast.cs.utah.edu>
James Loveluck <loveluck@@ri.silicomp.fr>
Patrick Roudaud <patrick@@enserg.fr>
@
text
@d2 39
a40 14
  (c) Copyright 1986 HEWLETT-PACKARD COMPANY
  To anyone who acknowledges that this file is provided "AS IS"
  without any express or implied warranty:
      permission to use, copy, modify, and distribute this file
  for any purpose is hereby granted without fee, provided that
  the above copyright notice and this notice appears in all
  copies, and that the name of Hewlett-Packard Company not be
  used in advertising or publicity pertaining to distribution
  of the software without specific, written prior permission.
  Hewlett-Packard Company makes no representations about the
  suitability of this software for any purpose.
*/
/* $Source: /usr/local/kcs/sys.REL9_05_800/spmath/RCS/fcnvff.c,v $
 * $Revision: 2.8.88.1 $	$Author: root $
d42 1
a42 1
 * $Date: 93/12/07 15:06:09 $
@


