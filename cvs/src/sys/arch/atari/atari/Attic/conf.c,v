head	1.16;
access;
symbols
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	UBC_SYNC_A:1.16
	UBC_SYNC_B:1.16
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	SMP:1.13.0.8
	SMP_BASE:1.13
	kame_19991208:1.13
	OPENBSD_2_6:1.13.0.6
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.4
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.13.0.2
	OPENBSD_2_4_BASE:1.13
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.9.0.4
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2001.02.07.07.45.41;	author art;	state dead;
branches;
next	1.15;

1.15
date	2000.09.26.14.03.52;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.22.08.34.17;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	98.09.25.09.20.52;	author todd;	state Exp;
branches
	1.13.8.1;
next	1.12;

1.12
date	98.07.07.06.56.00;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.07.07.03.02.35;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.11.23.05.21.54;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	96.11.11.19.20.43;	author kstailey;	state Exp;
branches;
next	1.8;

1.8
date	96.10.19.13.26.06;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.08.29.09.25.59;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.07.15.14.57.02;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.05.04.18.50.37;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.02.21.12.53.42;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.01.07.07.41.01;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.27.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.06;	author deraadt;	state Exp;
branches;
next	;

1.13.8.1
date	2000.03.24.09.07.18;	author niklas;	state Exp;
branches;
next	1.13.8.2;

1.13.8.2
date	2001.04.18.16.04.35;	author niklas;	state dead;
branches;
next	;


desc
@@


1.16
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: conf.c,v 1.15 2000/09/26 14:03:52 art Exp $	*/

/*
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @@(#)conf.c	7.9 (Berkeley) 5/28/91
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/conf.h>
#include <sys/vnode.h>
#include <dev/cons.h>

#ifdef BANKEDDEVPAGER
#include <sys/bankeddev.h>
#endif

int	ttselect	__P((dev_t, int, struct proc *));

#define	bdev_rd_init(c,n) { \
	dev_init(c,n,open), dev_init(c,n,close), dev_init(c,n,strategy), \
	dev_init(c,n,ioctl), (dev_type_dump((*))) enxio, dev_size_init(c,n), 0 }

#include "vnd.h"
#include "ramd.h"
bdev_decl(rd);
#include "fd.h"
#define	fdopen	Fdopen	/* conflicts with fdopen() in kern_descrip.c */
bdev_decl(fd);
#undef	fdopen
bdev_decl(sw);
#include "sd.h"
#include "st.h"
#include "cd.h"
#include "ccd.h"

struct bdevsw	bdevsw[] =
{
	bdev_disk_init(NVND,vnd),	/* 0: vnode disk driver */
	bdev_rd_init(NRAMD,rd),		/* 1: ram disk - for install disk */
#define	fdopen	Fdopen	/* conflicts with fdopen() in kern_descrip.c */
	bdev_disk_init(NFD,fd),		/* 2: floppy disk */
#undef	fdopen
	bdev_swap_init(1,sw),		/* 3: swap pseudo-device */
	bdev_disk_init(NSD,sd),		/* 4: SCSI disk */
	bdev_tape_init(NST,st),		/* 5: SCSI tape */
	bdev_disk_init(NCD,cd),		/* 6: SCSI CD-ROM */
	bdev_lkm_dummy(),		/* 7 */
	bdev_lkm_dummy(),		/* 8 */
	bdev_lkm_dummy(),		/* 9 */
	bdev_lkm_dummy(),		/* 10 */
	bdev_lkm_dummy(),		/* 11 */
	bdev_lkm_dummy(),		/* 12 */
	bdev_disk_init(NCCD,ccd),	/* 13: concatenated disk driver */
};
int	nblkdev = sizeof(bdevsw) / sizeof(bdevsw[0]);

/* open, close, ioctl, select, mmap -- XXX should be a map device */
#define	cdev_grf_init(c,n) { \
	dev_init(c,n,open), dev_init(c,n,close), (dev_type_read((*))) nullop, \
	(dev_type_write((*))) nullop, dev_init(c,n,ioctl), \
	(dev_type_stop((*))) enodev, (dev_type_tty((*))) nullop, \
	dev_init(c,n,select), dev_init(c,n,mmap) }

/* open, close, ioctl, select, mmap -- XXX should be a map device */
#define	cdev_view_init(c,n) { \
	dev_init(c,n,open), dev_init(c,n,close), (dev_type_read((*))) nullop, \
	(dev_type_write((*))) nullop, dev_init(c,n,ioctl), \
	(dev_type_stop((*))) enodev, (dev_type_tty((*))) nullop, \
	dev_init(c,n,select), dev_init(c,n,mmap) }

#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
cdev_decl(sw);
#include "pty.h"
#include "zs.h"
cdev_decl(zs);
#include "ss.h"
#include "uk.h"
#include "ch.h"
#include "grf.h"
cdev_decl(grf);
#include "ite.h"
cdev_decl(ite);
#include "view.h"
cdev_decl(view);
#include "kbd.h"
cdev_decl(kbd);
#include "mouse.h"
cdev_decl(ms);
#define	fdopen	Fdopen	/* conflicts with fdopen() in kern_descrip.c */
cdev_decl(fd);
#undef	fdopen
dev_decl(fd,open);
#include "bpfilter.h"
#include "tun.h"
#ifdef XFS
#include <xfs/nxfs.h>
cdev_dec(xfs_dev);
#endif

#ifdef IPFILTER
#define NIPF 1
#else
#define NIPF 0
#endif

struct cdevsw	cdevsw[] =
{
	cdev_cn_init(1,cn),		/* 0: virtual console */
	cdev_ctty_init(1,ctty),		/* 1: controlling terminal */
	cdev_mm_init(1,mm),		/* 2: /dev/{null,mem,kmem,...} */
	cdev_swap_init(1,sw),		/* 3: /dev/drum (swap pseudo-device) */
	cdev_tty_init(NPTY,pts),	/* 4: pseudo-tty slave	*/
	cdev_ptc_init(NPTY,ptc),	/* 5: pseudo-tty master */
	cdev_log_init(1,log),		/* 6: /dev/klog */
	cdev_tty_init(NZS,zs),		/* 7: 8530 SCC */
	cdev_disk_init(NSD,sd),		/* 8: SCSI disk */
	cdev_disk_init(NCD,cd),		/* 9: SCSI CD-ROM */
	cdev_tape_init(NST,st),		/* 10: SCSI tape */
	cdev_grf_init(NGRF,grf),	/* 11: frame buffer */
	cdev_tty_init(NITE,ite),	/* 12: console terminal emulator */
	cdev_view_init(NVIEW,view),	/* 13: /dev/view00 /dev/view01, ... */
	cdev_mouse_init(NKBD,kbd),	/* 14: /dev/kbd	*/
	cdev_mouse_init(NMOUSE,ms),	/* 15: /dev/mouse0 /dev/mouse1 */
#define	fdopen	Fdopen	/* conflicts with fdopen() in kern_descrip.c */
	cdev_disk_init(NFD,fd),		/* 16: floppy disk */
#undef	fdopen
	cdev_disk_init(NVND,vnd),	/* 17: vnode disk driver */
	cdev_fd_init(1,fd),		/* 18: file descriptor pseudo-device */
	cdev_bpftun_init(NBPFILTER,bpf),/* 19: Berkeley packet filter */
	cdev_lkm_init(NLKM,lkm),	/* 20: loadable module driver */
	cdev_lkm_dummy(),		/* 21 */
	cdev_lkm_dummy(),		/* 22 */
	cdev_lkm_dummy(),		/* 23 */
	cdev_lkm_dummy(),		/* 24 */
	cdev_lkm_dummy(),		/* 25 */
	cdev_lkm_dummy(),		/* 26 */
	cdev_disk_init(NCCD,ccd),	/* 27: concatenated disk driver */
	cdev_bpftun_init(NTUN,tun),	/* 28: network tunnel */
	cdev_gen_ipf(NIPF,ipl),         /* 29: IP filter log */
	cdev_random_init(1,random),	/* 30: random data source */
	cdev_uk_init(NUK,uk),		/* 31: unknown SCSI */
	cdev_ss_init(NSS,ss),           /* 32: SCSI scanner */
	cdev_ch_init(NCH,ch),		/* 33: SCSI media changer */
	cdev_notdef(),			/* 34 */
	cdev_notdef(),			/* 35 */
	cdev_notdef(),			/* 36 */
	cdev_notdef(),			/* 37 */
	cdev_notdef(),			/* 38 */
	cdev_notdef(),			/* 39 */
	cdev_notdef(),			/* 40 */
	cdev_notdef(),			/* 41 */
	cdev_notdef(),			/* 42 */
	cdev_notdef(),			/* 43 */
	cdev_notdef(),			/* 44 */
	cdev_notdef(),			/* 45 */
	cdev_notdef(),			/* 46 */
	cdev_notdef(),			/* 47 */
	cdev_notdef(),			/* 48 */
	cdev_notdef(),			/* 49 */
	cdev_notdef(),			/* 50 */
#ifdef XFS
	cdev_xfs_init(NXFS,xfs_dev),	/* 51: xfs communication device */
#else
	cdev_notdef(),			/* 51 */
#endif
};
int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);

#ifdef BANKEDDEVPAGER
extern int grfbanked_get __P((int, int, int));
extern int grfbanked_set __P((int, int));
extern int grfbanked_cur __P((int));

struct bankeddevsw bankeddevsw[sizeof (cdevsw) / sizeof (cdevsw[0])] = {
  { 0, 0, 0 },						/* 0 */
  { 0, 0, 0 },						/* 1 */
  { 0, 0, 0 },						/* 2 */
  { 0, 0, 0 },						/* 3 */
  { 0, 0, 0 },						/* 4 */
  { 0, 0, 0 },						/* 5 */
  { 0, 0, 0 },						/* 6 */
  { 0, 0, 0 },						/* 7 */
  { 0, 0, 0 },						/* 8 */
  { 0, 0, 0 },						/* 9 */
  { grfbanked_get, grfbanked_cur, grfbanked_set },	/* 10 */
  /* rest { 0, 0, 0 } */
};
#endif

int	mem_no = 2; 	/* major device number of memory special file */

/*
 * Swapdev is a fake device implemented
 * in sw.c used only internally to get to swstrategy.
 * It cannot be provided to the users, because the
 * swstrategy routine munches the b_dev and b_blkno entries
 * before calling the appropriate driver.  This would horribly
 * confuse, e.g. the hashing routines. Instead, /dev/drum is
 * provided as a character (raw) device.
 */
dev_t	swapdev = makedev(3, 0);

/*
 * Returns true if dev is /dev/mem or /dev/kmem.
 */
iskmemdev(dev)
	dev_t dev;
{

	return (major(dev) == mem_no && minor(dev) < 2);
}

/*
 * Returns true if dev is /dev/zero.
 */
iszerodev(dev)
	dev_t dev;
{

	return (major(dev) == mem_no && minor(dev) == 12);
}

dev_t
getnulldev()
{
	return makedev(mem_no, 2);
}

static int chrtoblktab[] = {
	/* XXXX This needs to be dynamic for LKMs. */
	/*VCHR*/	/*VBLK*/
	/*  0 */	NODEV,
	/*  1 */	NODEV,
	/*  2 */	NODEV,
	/*  3 */	NODEV,
	/*  4 */	NODEV,
	/*  5 */	NODEV,
	/*  6 */	NODEV,
	/*  7 */	NODEV,
	/*  8 */	4,
	/*  9 */	6,
	/* 10 */	5,
	/* 11 */	NODEV,
	/* 12 */	NODEV,
	/* 13 */	NODEV,
	/* 14 */	NODEV,
	/* 15 */	NODEV,
	/* 16 */	2,
	/* 17 */	0,
	/* 18 */	NODEV,
	/* 19 */	NODEV,
	/* 20 */	NODEV,
	/* 21 */	NODEV,
	/* 22 */	NODEV,
	/* 23 */	NODEV,
	/* 24 */	NODEV,
	/* 25 */	NODEV,
	/* 26 */	NODEV,
	/* 27 */	13,
};

/*
 * Convert a character device number to a block device number.
 */
dev_t
chrtoblk(dev)
	dev_t dev;
{
	int blkmaj;

	if (major(dev) >= nchrdev ||
	    major(dev) > sizeof(chrtoblktbl)/sizeof(chrtoblktbl[0]))
		return (NODEV);
	blkmaj = chrtoblktbl[major(dev)];
	if (blkmaj == NODEV)
		return (NODEV);
	return (makedev(blkmaj, minor(dev)));
}

/*
 * This entire table could be autoconfig()ed but that would mean that
 * the kernel's idea of the console would be out of sync with that of
 * the standalone boot.  I think it best that they both use the same
 * known algorithm unless we see a pressing need otherwise.
 */
cons_decl(ser);
#define	itecnpollc	nullcnpollc
cons_decl(ite);

struct	consdev constab[] = {
#if NSER > 0
	cons_init(ser),
#endif
#if NITE > 0
	cons_init(ite),
#endif
	{ 0 },
};
@


1.15
log
@Implement getnulldev that returns the dev_t for "/dev/null".
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.14 2000/03/22 08:34:17 niklas Exp $	*/
@


1.14
log
@Add ch to some dead ports for consistency, of course not tested.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.13 1998/09/25 09:20:52 todd Exp $	*/
d257 6
@


1.13
log
@o xfs is in the house (thanks art, for getting me started)
o all but vax are major 51
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.12 1998/07/07 06:56:00 deraadt Exp $	*/
d114 1
d179 1
a179 1
	cdev_notdef(),			/* 33 */
@


1.13.8.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a113 1
#include "ch.h"
d178 1
a178 1
	cdev_ch_init(NCH,ch),		/* 33: SCSI media changer */
@


1.13.8.2
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.13.8.1 2000/03/24 09:07:18 niklas Exp $	*/
@


1.12
log
@oops, i did not handle nchrdev correctly
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.11 1998/07/07 03:02:35 deraadt Exp $	*/
d130 4
d178 23
@


1.11
log
@fix chrtoblk() so that it returne ENODEV for entries beyond the end of the table
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.10 1997/11/23 05:21:54 mickey Exp $	*/
d273 1
a273 1
	if (major(dev) >= MAXDEV ||
@


1.10
log
@use MI cdev_decl(ipl)
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.9 1996/11/11 19:20:43 kstailey Exp $	*/
a261 1
	/* 28 */	NODEV,
d273 4
a276 3
	if (major(dev) >= nchrdev)
		return(NODEV);
	blkmaj = chrtoblktab[major(dev)];
d278 1
a278 1
		return(NODEV);
@


1.9
log
@Updates for SCSI scanner and SCSI unknown devices.
Removed MI *dev_decl() stuff that is now in sys/conf.h
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.8 1996/10/19 13:26:06 mickey Exp $	*/
a130 2
/* open, close, read, ioctl */
cdev_decl(ipl);
@


1.8
log
@random device is permanent now.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.7 1996/08/29 09:25:59 deraadt Exp $	*/
a57 1
bdev_decl(vnd);
a65 1
bdev_decl(sd);
a66 1
bdev_decl(st);
a67 1
bdev_decl(cd);
a68 1
bdev_decl(ccd);
a104 2
cdev_decl(cn);
cdev_decl(ctty);
a109 7
#define	ptstty		ptytty
#define	ptsioctl	ptyioctl
cdev_decl(pts);
#define	ptctty		ptytty
#define	ptcioctl	ptyioctl
cdev_decl(ptc);
cdev_decl(log);
d112 2
a113 3
cdev_decl(sd);
cdev_decl(cd);
cdev_decl(st);
a126 2
cdev_decl(vnd);
cdev_decl(ccd);
a128 1
cdev_decl(bpf);
a129 8
cdev_decl(tun);
#ifdef LKM
#define NLKM 1
#else
#define NLKM 0
#endif
cdev_decl(lkm);
cdev_decl(random);
d174 2
@


1.7
log
@rnd -> random
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.6 1996/07/15 14:57:02 mickey Exp $	*/
a154 1
#include "random.h"
d199 1
a199 1
	cdev_random_init(NRANDOM,random), /* 30: random data source */
@


1.6
log
@add rnd driver
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.4 1996/02/21 12:53:42 mickey Exp $	*/
d155 2
a156 2
#include "rnd.h"
cdev_decl(rnd);
d200 1
a200 1
	cdev_rnd_init(NRND,rnd),	/* 30: random data source */
@


1.5
log
@remove #ifndef LKM, since that stuff already in sys/conf.h,
add lkmenodev prototype.
@
text
@d155 2
d200 1
@


1.4
log
@move cdev_gen_ipf() macro to the <sys/conf.h>, so the lkm
for ipl is possible and also, why it is in <machine/conf.c> while
it (ipl) is in <net/*> ???
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.11 1995/11/30 00:57:33 jtc Exp $	*/
a51 6

#ifndef LKM
#define	lkmenodev	enodev
#else
int	lkmenodev();
#endif
@


1.3
log
@created devices for the IP filter log on all architectures
@
text
@d1 1
a1 1
/*	$NetBSD: conf.c,v 1.11 1995/11/30 00:57:33 jtc Exp $	*/
a163 5
#define	cdev_gen_ipf(c,n) { \
	dev_init(c,n,open), dev_init(c,n,close), dev_init(c,n,read), \
	(dev_type_write((*))) enodev, dev_init(c,n,ioctl), \
	(dev_type_stop((*))) nullop, 0, (dev_type_select((*))) enodev, \
	(dev_type_mmap((*))) enodev, 0 }
@


1.2
log
@update from netbsd (verbatim)
@
text
@d162 13
d208 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: conf.c,v 1.10.2.1 1995/10/12 08:18:59 leo Exp $	*/
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
