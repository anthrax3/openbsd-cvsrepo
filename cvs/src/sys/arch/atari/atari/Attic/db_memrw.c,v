head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2001.02.07.07.45.41;	author art;	state dead;
branches;
next	1.2;

1.2
date	96.01.29.21.45.43;	author deraadt;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.50.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.07;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.04.18.16.04.35;	author niklas;	state dead;
branches;
next	;


desc
@@


1.3
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$NetBSD: db_memrw.c,v 1.2 1996/01/19 13:51:11 leo Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Interface to the debugger for virtual memory read/write.
 * To write in the text segment, we have to first make
 * the page writable, do the write, then restore the PTE.
 * For reads, validate address first to avoid MMU trap.
 *
 * Note the special handling for 2/4 byte sizes. This is done to make
 * it work sensibly for device registers.
 */

#include <sys/param.h>
#include <sys/proc.h>

#include <vm/vm.h>

#include <machine/db_machdep.h>
#include <machine/pte.h>

/*
 * Check if access is allowed to 'addr'. Mask should contain
 * PG_V for read access, PV_V|PG_RO for write access.
 */
static int
db_check(addr, mask)
	char	*addr;
	u_int	mask;
{
	u_int	*pte;

	pte  = kvtopte((vm_offset_t)addr);

	if ((*pte & mask) != PG_V) {
		db_printf(" address 0x%x not a valid page\n", addr);
		return 0;
	}
	return 1;
}
	
/*
 * Read bytes from kernel address space for debugger.
 * It does not matter if this is slow. -gwr
 */
void
db_read_bytes(addr, size, data)
	vm_offset_t	addr;
	register int	size;
	register char	*data;
{
	u_int8_t	*src, *dst, *limit;

	src   = (u_int8_t *)addr;
	dst   = (u_int8_t *)data;
	limit = src + size;

	if (size == 2 || size == 4) {
		if(db_check(src, PG_V) && db_check(limit, PG_V)) {
			if (size == 2)
				*(u_int16_t*)data = *(u_int16_t*)addr;
			else *(u_int32_t*)data = *(u_int32_t*)addr;
			return;
		}
	}

	while (src < limit) {
		*dst = db_check(src, PG_V) ? *src : 0;
		dst++;
		src++;
	}
}

/*
 * Write one byte somewhere in kernel text.
 * It does not matter if this is slow. -gwr
 */
static void
db_write_text(dst, ch)
	u_int8_t *dst;
	u_int8_t ch;
{
	u_int *pte, oldpte;

	pte = kvtopte((vm_offset_t)dst);
	oldpte = *pte;
	if ((oldpte & PG_V) == 0) {
		db_printf(" address 0x%x not a valid page\n", dst);
		return;
	}

/*printf("db_write_text: %x: %x = %x (%x:%x)\n", dst, *dst, ch, pte, *pte);*/
	*pte &= ~PG_RO;
	TBIS(dst);

	*dst = ch;

	*pte = oldpte;
	TBIS(dst);
	cachectl (4, dst, 1);
}

/*
 * Write bytes to kernel address space for debugger.
 */
void
db_write_bytes(addr, size, data)
	vm_offset_t	addr;
	int		size;
	char		*data;
{
	extern char	etext[] ;
	u_int8_t	*dst, *src, *limit;

	dst   = (u_int8_t *)addr;
	src   = (u_int8_t *)data;
	limit = dst + size;

	if ((char*)dst >= etext && (size == 2 || size == 4)) {
		if(db_check(dst, PG_V|PG_RO) && db_check(limit, PG_V|PG_RO)) {
			if (size == 2)
				*(u_int16_t*)addr = *(u_int16_t*)data;
			else *(u_int32_t*)addr = *(u_int32_t*)data;
			return;
		}
	}
	while (dst < limit) {
		if ((char*)dst < etext)	/* kernel text starts at 0 */
			db_write_text(dst, *src);
		else if (db_check(dst, PG_V|PG_RO))
				*dst = *src;
		dst++;
		src++;
	}
}
@


1.2
log
@from leo
Special handling for 2 and 4 byte sized transfers. The makes accessing
device registers work in a sane way. (gwr)
@
text
@@


1.2.16.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: db_memrw.c,v 1.1 1995/06/09 19:53:45 leo Exp $	*/
d35 3
d49 2
a50 2
 * Read one byte somewhere in the kernel.
 * It does not matter if this is slow. -gwr
d52 4
a55 3
static char
db_read_data(src)
	char *src;
d57 1
a57 3
	u_int *pte;
	vm_offset_t pgva;
	int ch;
d59 1
a59 2
	pgva = atari_trunc_page((long)src);
	pte = kvtopte(pgva);
d61 2
a62 2
	if ((*pte & PG_V) == 0) {
		db_printf(" address 0x%x not a valid page\n", src);
d65 1
a65 1
	return (*src);
d67 1
a67 1

d78 1
a78 1
	char	*src, *limit;
d80 2
a81 1
	src = (char *)addr;
d84 9
d94 2
a95 2
		*data = db_read_data(src);
		data++;
d106 2
a107 2
	char *dst;
	int ch;
d122 1
a122 1
	*dst = (char) ch;
a129 20
 * Write one byte somewhere outside kernel text.
 * It does not matter if this is slow. -gwr
 */
static void
db_write_data(dst, ch)
	char *dst;
	int ch;
{
	u_int *pte;

	pte = kvtopte((vm_offset_t)dst);

	if ((*pte & (PG_V | PG_RO)) != PG_V) {
		db_printf(" address 0x%x not a valid page\n", dst);
		return;
	}
	*dst = (char) ch;
}

/*
d135 2
a136 2
	int	size;
	char	*data;
d139 1
a139 1
	char	*dst, *limit;
d141 2
a142 1
	dst = (char *)addr;
d145 8
d154 4
a157 4
		if (dst < etext)	/* kernel text starts at 0 */
			db_write_text(dst, *data);
		else
			db_write_data(dst, *data);
d159 1
a159 1
		data++;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
