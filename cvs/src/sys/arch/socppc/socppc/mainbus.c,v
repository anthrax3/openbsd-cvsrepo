head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.12
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.20
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.18
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2015.01.24.20.59.42;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	WxleZDIgtRIxbbnF;

1.5
date	2010.03.25.19.42.55;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.02.20.29.39;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.17.15.49.05;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.14.20.54.36;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.10.12.02.21;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Implement bus_dmamem_alloc_range(9) for macppc/socppc.
@
text
@/*	$OpenBSD: mainbus.c,v 1.5 2010/03/25 19:42:55 deraadt Exp $	*/

/*
 * Copyright (c) 2008 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>

#include <dev/ofw/openfirm.h>

int	mainbus_match(struct device *, void *, void *);
void	mainbus_attach(struct device *, struct device *, void *);

struct cfattach mainbus_ca = {
	sizeof(struct device), mainbus_match, mainbus_attach
};

struct cfdriver mainbus_cd = {
	NULL, "mainbus", DV_DULL
};

struct ppc_bus_space mainbus_bus_space = { 0xff400000, 0x00100000, 0 };

struct powerpc_bus_dma_tag mainbus_bus_dma_tag = {
	NULL,
	_dmamap_create,
	_dmamap_destroy,
	_dmamap_load,
	_dmamap_load_mbuf,
	_dmamap_load_uio,
	_dmamap_load_raw,
	_dmamap_unload,
	_dmamap_sync,
	_dmamem_alloc,
	_dmamem_alloc_range,
	_dmamem_free,
	_dmamem_map,
	_dmamem_unmap,
	_dmamem_mmap
};

int	mainbus_print(void *, const char *);

int
mainbus_match(struct device *parent, void *cfdata, void *aux)
{
	return (1);
}

void
mainbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct mainbus_attach_args ma;
	char name[32];
	int node;

	printf("\n");

	ncpusfound = 0;
	node = OF_finddevice("/cpus");
	if (node != -1) {
		for (node = OF_child(node); node != 0; node = OF_peer(node)) {
			if (OF_getprop(node, "name", name, sizeof(name)) <= 0)
				continue;

			bzero(&ma, sizeof(ma));
			ma.ma_name = name;
			ma.ma_node = node;
			config_found(self, &ma, mainbus_print);
			ncpusfound++;
		}
	}

	for (node = OF_child(OF_peer(0)); node != 0; node = OF_peer(node)) {
		if (OF_getprop(node, "name", name, sizeof(name)) <= 0)
			continue;

		if (strcmp(name, "aliases") == 0 ||
		    strcmp(name, "chosen") == 0 ||
		    strcmp(name, "cpus") == 0 ||
		    strcmp(name, "memory") == 0)
			continue;

		bzero(&ma, sizeof(ma));
		ma.ma_iot = &mainbus_bus_space;
		ma.ma_dmat = &mainbus_bus_dma_tag;
		ma.ma_name = name;
		ma.ma_node = node;
		config_found(self, &ma, mainbus_print);
	}
}

int
mainbus_print(void *aux, const char *name)
{
	struct mainbus_attach_args *ma = aux;

	if (name)
		printf("\"%s\" at %s", ma->ma_name, name);
		
	return (UNCONF);
}
@


1.5
log
@architectures which expect to hand-count the number of cpus must clear
ncpufound before counting, because it defaults to 1 (for those
architectures which do not count)
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: mainbus.c,v 1.4 2009/09/02 20:29:39 kettenis Exp $	*/
d51 1
@


1.4
log
@Attach devices to mainbus(4) based on information from the flattened device
tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: mainbus.c,v 1.3 2008/05/17 15:49:05 kettenis Exp $	*/
d74 1
@


1.3
log
@Give mainbus(4) a bus_dma tag and pass it down.  Let socpcic(4) use this
tag instead of having it create its own.
@
text
@d1 1
a1 1
/*	$OpenBSD: mainbus.c,v 1.2 2008/05/14 20:54:36 kettenis Exp $	*/
d25 2
a37 17
int	mainbus_search(struct device *, void *, void *);
int	mainbus_print(void *, const char *);

int
mainbus_match(struct device *parent, void *cfdata, void *aux)
{
	return (1);
}

void
mainbus_attach(struct device *parent, struct device *self, void *aux)
{
	printf("\n");

	config_search(mainbus_search, self, self);
}

d57 2
d60 7
a66 1
mainbus_search(struct device *parent, void *cfdata, void *aux)
d69 2
a70 1
	struct cfdata *cf = cfdata;
d72 1
a72 4
	ma.ma_iot = &mainbus_bus_space;
	ma.ma_dmat = &mainbus_bus_dma_tag;
	ma.ma_name = cf->cf_driver->cd_name;
	config_found(parent, &ma, mainbus_print);
d74 31
a104 1
	return (1);
d113 1
a113 1
		printf("%s at %s", ma->ma_name, name);
@


1.2
log
@Get memory size and base address of internal memory mapped registers from
firmware instead of hardcoding them.
@
text
@d1 1
a1 1
/*	$OpenBSD: mainbus.c,v 1.1 2008/05/10 12:02:21 kettenis Exp $	*/
d55 17
d79 1
@


1.1
log
@OpenBSD/socppc, a port to the Thecus N1200, and potentially other Freescale
PowerPC SoC platforms that use u-boot as a bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
struct ppc_bus_space mainbus_bus_space = { 0xe0000000, 0x1000000, 1 };
@

