head	1.4;
access;
symbols
	OPENBSD_5_9:1.1.0.30
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.24
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.28
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.26
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.03.05.17.41.55;	author mpi;	state dead;
branches;
next	1.3;
commitid	5025CzLISD0jU2OS;

1.3
date	2016.03.05.17.24.27;	author mpi;	state Exp;
branches;
next	1.2;
commitid	oo3LXu9V3TFs8Av3;

1.2
date	2016.02.28.11.56.40;	author mpi;	state Exp;
branches;
next	1.1;
commitid	dxE8ORgWtxpg3ns1;

1.1
date	2008.05.10.12.02.21;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@One ddb interface is enough for ppc.
@
text
@/*	$OpenBSD: db_interface.c,v 1.3 2016/03/05 17:24:27 mpi Exp $	*/
/*      $NetBSD: db_interface.c,v 1.12 2001/07/22 11:29:46 wiz Exp $ */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>

#include <dev/cons.h>

#include <machine/db_machdep.h>
#include <ddb/db_extern.h>

int db_trap_glue(struct trapframe *frame); /* called from locore */

void
Debugger()
{
	ddb_trap();
}

int
db_trap_glue(struct trapframe *frame)
{
	if (!(frame->srr1 & PSL_PR)
	    && (frame->exc == EXC_TRC
		|| (frame->exc == EXC_PGM && (frame->srr1 & 0x20000))
		|| frame->exc == EXC_BPT)) {

		bcopy(frame->fixreg, DDB_REGS->fixreg,
			32 * sizeof(u_int32_t));
		DDB_REGS->srr0 = frame->srr0;
		DDB_REGS->srr1 = frame->srr1;

		cnpollc(TRUE);
		db_trap(T_BREAKPOINT, 0);
		cnpollc(FALSE);

		bcopy(DDB_REGS->fixreg, frame->fixreg,
			32 * sizeof(u_int32_t));

		return 1;
	}
	return 0;
}
@


1.3
log
@Define db_reg_t like the other archs by typedef'ing "struct trapframe".

This will allow us to use some of the DDB macros on trapframe which are
not DDB_REGS.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_interface.c,v 1.2 2016/02/28 11:56:40 mpi Exp $	*/
@


1.2
log
@Rename ddb_trap_glue() to db_trap_glue().

Let's keep the 'db_' prefix for all ddb(4) functions that should not be
instrumented.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_interface.c,v 1.1 2008/05/10 12:02:21 kettenis Exp $	*/
d29 1
a29 1
		bcopy(frame->fixreg, DDB_REGS->tf.fixreg,
d31 2
a32 2
		DDB_REGS->tf.srr0 = frame->srr0;
		DDB_REGS->tf.srr1 = frame->srr1;
d38 1
a38 1
		bcopy(DDB_REGS->tf.fixreg, frame->fixreg,
@


1.1
log
@OpenBSD/socppc, a port to the Thecus N1200, and potentially other Freescale
PowerPC SoC platforms that use u-boot as a bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d13 1
a13 1
int ddb_trap_glue(struct trapframe *frame); /* called from locore */
d22 1
a22 1
ddb_trap_glue(struct trapframe *frame)
@

