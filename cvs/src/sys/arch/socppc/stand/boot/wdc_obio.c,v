head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.32
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.28
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.24
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.26
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.22
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.20
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.09.07.21.16.57;	author dms;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Bring support for booting RB600.
Imported FDT parsing code, implemented wdc_obio driver to support booting
of CF cards. If FDT is available initialize console and wdc_obio
accordingly and pass it later to the kernel. Unified the code with Thecus
boot code, so that we can use one boot image. The whole boot code is now
compiled with -msoft-float. Bump version while there.

tested on Thecus by maja@@ and kettenis@@
tested on RB600 by dlg@@ and me

ok by kettenis@@
@
text
@/*	$OpenBSD$	*/

/*
 * Copyright (c) 2009 Dariusz Swiderski <sfires@@sfires.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include "libsa.h"
#include "wdvar.h"

#define WDC_OBIO_REG_OFFSET	(8 << 17)
#define WDC_OBIO_AUXREG_OFFSET	(6 << 16)

u_int8_t wdc_read_cmdreg(struct wdc_channel *, u_int8_t);
void wdc_write_cmdreg(struct wdc_channel *, u_int8_t, u_int8_t);
u_int8_t wdc_read_ctlreg(struct wdc_channel *, u_int8_t);
void wdc_write_ctlreg(struct wdc_channel *, u_int8_t, u_int8_t);

u_int32_t wdc_base_addr[2];

int
wdc_obio_init(struct wdc_channel *chp, u_int chan)
{
	u_int32_t cmdreg, ctlreg;
	int i;

	/*
	 * two channels per chip, one drive per channel
	 */
	if (chan >= 2 || !wdc_base_addr[chan])
		return (ENXIO);
	chp->ndrives = 1;

	cmdreg = wdc_base_addr[chan] + WDC_OBIO_REG_OFFSET;
	ctlreg = wdc_base_addr[chan] + WDC_OBIO_AUXREG_OFFSET;

	/* set up cmd regsiters */
	chp->c_cmdbase = (u_int8_t *)cmdreg;
	chp->c_data = (u_int16_t *)(cmdreg + wd_data);
	for (i = 0; i < WDC_NPORTS; i++)
		chp->c_cmdreg[i] = chp->c_cmdbase + (i<<16);
	/* set up shadow registers */
	chp->c_cmdreg[wd_status]   = chp->c_cmdreg[wd_command];
	chp->c_cmdreg[wd_features] = chp->c_cmdreg[wd_precomp];
	/* set up ctl registers */
	chp->c_ctlbase = (u_int8_t *)ctlreg;

	chp->read_cmdreg = wdc_read_cmdreg;
	chp->write_cmdreg = wdc_write_cmdreg;
	chp->read_ctlreg = wdc_read_ctlreg;
	chp->write_ctlreg = wdc_write_ctlreg;
                                
	return (0);
}

u_int8_t
wdc_read_cmdreg(struct wdc_channel *chp, u_int8_t reg)
{
	u_int8_t val;
	val = *chp->c_cmdreg[reg];
	if (val == 0xf9 && reg == wd_status)
		val = 0x7f;
	return val;
}

void
wdc_write_cmdreg(struct wdc_channel *chp, u_int8_t reg, u_int8_t val)
{
	*chp->c_cmdreg[reg] = val;
}	

u_int8_t
wdc_read_ctlreg(struct wdc_channel *chp, u_int8_t reg)
{
	u_int8_t val;
	val = chp->c_ctlbase[reg];
	if (val == 0xf9 && reg == wd_aux_altsts)
		val = 0x7f;
	return val;
}

void
wdc_write_ctlreg(struct wdc_channel *chp, u_int8_t reg, u_int8_t val)
{
	chp->c_ctlbase[reg] = val;
}
@
