head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5;
locks; strict;
comment	@# @;


1.18
date	2016.11.06.16.42.00;	author tb;	state Exp;
branches;
next	1.17;
commitid	peo8JdlgBE9dXbST;

1.17
date	2016.07.30.03.25.49;	author guenther;	state Exp;
branches;
next	1.16;
commitid	HVbAtwruDlJazNH2;

1.16
date	2016.03.30.06.38.45;	author jmc;	state Exp;
branches;
next	1.15;
commitid	LN9ijdk9SEnzWAbM;

1.15
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.14;
commitid	Cnjup0HpCIRrcQ6o;

1.14
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.13;
commitid	3HeD4LaLGiS22I3y;

1.13
date	2012.09.02.17.22.53;	author pascal;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.10.16.23.50;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.15.13.57.15;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.14.15.16.21;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.13.17.42.06;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.11.17.45.01;	author dms;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.07.21.16.57;	author dms;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.09.15.01.56;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.28.21.40.55;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.18.57.01;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.11.19.58.24;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.10.20.06.26;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile,v 1.17 2016/07/30 03:25:49 guenther Exp $

.include "${.CURDIR}/../Makefile.inc"

MAN=	boot.8

.if ${MACHINE} == "socppc"
PROG=		boot
S=		${.CURDIR}/../../../..

.PATH:		${S}/stand/boot
.PATH:		${S}/lib/libsa

CPPFLAGS+=	-D_STANDALONE
CPPFLAGS+= 	-nostdinc -I../.. -I. -I${.CURDIR} -I${S}
CPPFLAGS+=	-DCONADDR=0xe0004500UL -DCONSPEED=115200
CPPFLAGS+=	-DNS16550_FREQ=266000000 -DMACHINE_CMD=cmd_machine

COPTS+=		-ffreestanding -fno-stack-protector -ffixed-r29 -msoft-float
COPTS+=		-fno-pie

SRCS=		start.S 
SRCS+=		boot.c cmd.c vars.c
SRCS+=		conf.c devopen.c exec.c machdep.c dev_socppc.c time.c
SRCS+=		clock.c ns16550.c wd.c wdc.c pciide.c wdc_obio.c fdt.c
SRCS+=		ctime.c strtol.c cmd_socppc.c

.PATH:	${S}/lib/libkern/arch/powerpc ${S}/lib/libkern
SRCS+=	getchar.c putchar.c strlcpy.c strlen.c ashrdi3.c moddi3.c

### find out what to use for libz
Z_AS=		library
.include "${S}/lib/libz/Makefile.inc"
LIBZ=		${ZLIB}

### find out what to use for libsa
SA_AS=          library
SAREL=
SA_ZLIB=	yes
USE_LOADFILE=	yes
.include "${S}/lib/libsa/Makefile.inc"
LIBSA=          ${SALIB}

STANDIR=	${.CURDIR}/..

RELOC=		0x100000
LDFLAGS=	-Ttext ${RELOC} -nopie -znorelro
OBJCOPY?=	objcopy

${PROG}: ${OBJS} ${LIBSA} ${LIBZ}
	${LD} ${LDFLAGS} -o ${PROG}.elf ${OBJS} ${LIBSA} ${LIBZ}
	${OBJCOPY} -O binary ${PROG}.elf ${PROG}.bin
	${MKBOOT} -e ${RELOC} -l ${RELOC} ${PROG}.bin ${PROG}

realinstall:
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/${PROG}
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} ${PROG}.elf ${DESTDIR}${BINDIR}/${PROG}.elf

.if !make(clean) && !make(cleandir) && !make(includes) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../../${MACHINE}/include machine)
	@@([ -h powerpc ] || ln -s ${.CURDIR}/../../../powerpc/include powerpc)
.NOPATH: machine powerpc
CLEANFILES+=	machine powerpc
.endif

.else
NOPROG=
.endif

.include <bsd.prog.mk>
@


1.17
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2016/03/30 06:38:45 jmc Exp $
d61 1
a61 1
.if !make(obj)
@


1.16
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2014/07/13 09:26:08 jasper Exp $
d47 1
a47 1
LDFLAGS=	-Ttext ${RELOC} -nopie
@


1.15
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2014/07/12 21:54:58 jasper Exp $
a5 1
MLINKS=	boot.8 boot.conf.5
@


1.14
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2012/09/02 17:22:53 pascal Exp $
d30 1
a30 1
SRCS+=	getchar.c strlcpy.c strlen.c ashrdi3.c moddi3.c
@


1.13
log
@convert to plain -fno-pie/-nopie.  Looks good to deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/08/21 14:46:19 pascal Exp $
d30 1
a30 1
SRCS+=	strlcpy.c strlen.c ashrdi3.c moddi3.c
@


1.12
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2011/07/10 16:23:50 deraadt Exp $
d21 1
d48 1
a48 2
LDFLAGS=	-Ttext ${RELOC}
NOPIE=
@


1.11
log
@bring in more libgcc type thingies for new libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2010/02/15 13:57:15 kettenis Exp $
d48 1
@


1.10
log
@Since strip doesn't know how to strip a U-boot image, don't attempt to
do so during install.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2010/02/14 15:16:21 kettenis Exp $
d29 1
a29 1
SRCS+=	strlcpy.c strlen.c ashrdi3.c
@


1.9
log
@Enable loading kernels compressed by gzip(1).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2010/02/13 17:42:06 kettenis Exp $
d56 1
a56 1
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} \
@


1.8
log
@Install boot.elf in /usr/mdec, since we need it as a bootloader on the rb600.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2009/09/11 17:45:01 dms Exp $
d31 5
d39 1
d50 2
a51 2
${PROG}: ${OBJS} ${LIBSA}
	${LD} ${LDFLAGS} -o ${PROG}.elf ${OBJS} ${LIBSA} ${LIBSA}
@


1.7
log
@add 'machine fdt' command that dumps device tree if present

ok by kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2009/09/07 21:16:57 dms Exp $
d48 6
@


1.6
log
@Bring support for booting RB600.
Imported FDT parsing code, implemented wdc_obio driver to support booting
of CF cards. If FDT is available initialize console and wdc_obio
accordingly and pass it later to the kernel. Unified the code with Thecus
boot code, so that we can use one boot image. The whole boot code is now
compiled with -msoft-float. Bump version while there.

tested on Thecus by maja@@ and kettenis@@
tested on RB600 by dlg@@ and me

ok by kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2008/06/09 15:01:56 deraadt Exp $
d18 1
a18 1
CPPFLAGS+=	-DNS16550_FREQ=266000000
d26 1
a26 1
SRCS+=		ctime.c strtol.c
@


1.5
log
@Place manuals in the MD directories; from pierre.riteau@@gmail
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2008/05/28 21:40:55 miod Exp $
d20 1
a20 1
COPTS+=		-ffreestanding -fno-stack-protector -ffixed-r29
d25 1
a25 1
SRCS+=		clock.c ns16550.c wd.c wdc.c pciide.c
@


1.4
log
@Add a boot.8 manual page (copied straight from armish). This will in turn
act as a reminder to write boot_socppc.8 (eventually).
@
text
@d1 3
a3 1
#	$OpenBSD: Makefile,v 1.3 2008/05/16 18:57:01 kettenis Exp $
@


1.3
log
@There's no point in having an ELF bootloader; turn it into a U-Boot image.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2008/05/11 19:58:24 kettenis Exp $
d3 2
a4 1
NOMAN=
@


1.2
log
@Pass arguments and symbol table more or less the same way as OpenBSD/macppc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2008/05/10 20:06:26 kettenis Exp $
d35 5
a39 1
LDFLAGS=	-Ttext 0x100000
d42 3
a44 1
	${LD} ${LDFLAGS} -o boot ${OBJS} ${LIBSA} ${LIBSA}
@


1.1
log
@First stab at a bootloader for the Thecus N1200.
@
text
@d1 1
a1 1
#	$OpenBSD$
a25 1
#SRCS+=	divsi3.S divdi3.c moddi3.c qdivrem.c strlcpy.c strlen.c ashrdi3.c
@

