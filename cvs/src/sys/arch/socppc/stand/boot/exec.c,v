head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.34
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.32
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.28
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.24
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.26
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.18
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.22
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.20
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.16
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2009.09.07.21.16.57;	author dms;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.11.19.58.24;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.10.20.06.26;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bring support for booting RB600.
Imported FDT parsing code, implemented wdc_obio driver to support booting
of CF cards. If FDT is available initialize console and wdc_obio
accordingly and pass it later to the kernel. Unified the code with Thecus
boot code, so that we can use one boot image. The whole boot code is now
compiled with -msoft-float. Bump version while there.

tested on Thecus by maja@@ and kettenis@@
tested on RB600 by dlg@@ and me

ok by kettenis@@
@
text
@/*	$OpenBSD: exec.c,v 1.2 2008/05/11 19:58:24 kettenis Exp $	*/

/*
 * Copyright (c) 2006 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>

#include <lib/libsa/stand.h>
#include <lib/libsa/loadfile.h>

#include <sys/reboot.h>
#include <stand/boot/cmd.h>

typedef void (*startfuncp)(int, int, u_int32_t, char *, int) __dead;

void
run_loadfile(u_long *marks, int howto)
{
	char args[512];			/* Should check size? */
	u_int32_t entry;
	char *cp;
	void *ssym, *esym;
	int l;

	snprintf(args, sizeof(args), "%s:%s -", cmd.bootdev, cmd.image);
	cp = args + strlen(args);

	*cp++ = ' ';
        *cp = '-';
        if (howto & RB_ASKNAME)
                *++cp = 'a';
        if (howto & RB_CONFIG)
                *++cp = 'c';
        if (howto & RB_SINGLE)
                *++cp = 's';
        if (howto & RB_KDB)
                *++cp = 'd';
        if (*cp == '-')
		*--cp = 0;
	else
		*++cp = 0;

	entry = marks[MARK_ENTRY];
	ssym = (void *)marks[MARK_SYM];
	esym = (void *)marks[MARK_END];

	/*
	 * Stash pointer to end of symbol table after the argument
	 * strings.
	 */
	l = strlen(args) + 1;
	bcopy(&ssym, args + l, sizeof(ssym));
	l += sizeof(ssym);
	bcopy(&esym, args + l, sizeof(esym));
	l += sizeof(esym);
	extern int fdtaddrsave;

	(*(startfuncp)(marks[MARK_ENTRY]))(fdtaddrsave, 0, entry, args, l);

	/* NOTREACHED */
}
@


1.2
log
@Pass arguments and symbol table more or less the same way as OpenBSD/macppc.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.1 2008/05/10 20:06:26 kettenis Exp $	*/
d69 1
d71 1
a71 1
	(*(startfuncp)(marks[MARK_ENTRY]))(0, 0, entry, args, l);
@


1.1
log
@First stab at a bootloader for the Thecus N1200.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.3 2006/07/30 21:38:12 drahn Exp $	*/
d21 1
a23 4
#ifdef BOOT_ELF
#include <sys/exec_elf.h>
#endif

a25 1
#include <machine/bootconfig.h>
d27 1
a27 1
typedef void (*startfuncp)(void) __attribute__ ((noreturn));
d32 2
d35 2
d38 2
a39 19
	cp = (char *)0x00200000 - MAX_BOOT_STRING - 1;

#define      BOOT_STRING_MAGIC 0x4f425344

	*(int *)cp = BOOT_STRING_MAGIC;

	cp += sizeof(int);
	snprintf(cp, MAX_BOOT_STRING, "%s:%s -", cmd.bootdev, cmd.image);

	while (*cp != '\0')
		cp++;
	if (howto & RB_ASKNAME)
		*cp++ = 'a';
	if (howto & RB_CONFIG)
		*cp++ = 'c';
	if (howto & RB_KDB)
		*cp++ = 'd';
	if (howto & RB_SINGLE)
		*cp++ = 's';
d41 28
a68 1
	*cp = '\0';
d70 1
a70 1
	(*(startfuncp)(marks[MARK_ENTRY]))();
@

