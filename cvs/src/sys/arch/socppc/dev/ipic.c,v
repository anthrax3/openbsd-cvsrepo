head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.12
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.10
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.6
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4;
locks; strict;
comment	@ * @;


1.18
date	2015.06.24.11.58.06;	author mpi;	state Exp;
branches;
next	1.17;
commitid	ydQ89S8LGKdOdYT1;

1.17
date	2015.01.04.13.01.42;	author mpi;	state Exp;
branches;
next	1.16;
commitid	NhpbICTczAMSUxav;

1.16
date	2014.02.08.10.58.17;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.29.20.21.44;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.08.18.10.22;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.20.06.33.48;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.03.21.52.13;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.01.20.19.19;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.12.21.38.01;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.06.20.09.34;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.09.01.12.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.02.21.38.10;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.04.16.02.20;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.12.11.50.18;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.25.14.29.20;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.19.19.11.42;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.21.53.32;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.10.12.02.20;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.18
log
@IPL_MPSAFE bits for macppc with openpic(4).
@
text
@/*	$OpenBSD: ipic.c,v 1.17 2015/01/04 13:01:42 mpi Exp $	*/

/*
 * Copyright (c) 2008 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/autoconf.h>
#include <machine/intr.h>

#include <dev/ofw/openfirm.h>

#define IPIC_SICFR	0x00
#define IPIC_SIVCR	0x04
#define IPIC_SIPNR_H	0x08
#define IPIC_SIPNR_L	0x0c
#define IPIC_SIPRR_A	0x10
#define IPIC_SIPRR_D	0x1c
#define IPIC_SIMSR_H	0x20
#define IPIC_SIMSR_L	0x24
#define IPIC_SICNR	0x28
#define IPIC_SEPNR	0x2c
#define IPIC_SMPRR_A	0x30
#define IPIC_SMPRR_B	0x34
#define IPIC_SEMSR	0x38
#define IPIC_SECNR	0x3c
#define IPIC_SERSR	0x40
#define IPIC_SERMR	0x44
#define IPIC_SERCR	0x48
#define IPIC_SIFCR_H	0x50
#define IPIC_SIFCR_L	0x54
#define IPIC_SEFCR	0x58
#define IPIC_SERFR	0x5c
#define IPIC_SCVCR	0x60
#define IPIC_SMVCR	0x64

#define IPIC_NVEC	128

#define IPIC_EXTERNAL(ivec) ((ivec) >= 17 && (ivec) <= 23)

struct ipic_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;

	uint32_t		sc_simsr_h[IPL_NUM];
	uint32_t		sc_simsr_l[IPL_NUM];
	uint32_t		sc_semsr[IPL_NUM];
};

uint32_t ipic_imask;
struct intrq ipic_handler[IPIC_NVEC];
struct ipic_softc *ipic_sc;
int	ipic_preinit_done; /* defaults to 0 - not initialized */

int	ipic_match(struct device *, void *, void *);
void	ipic_attach(struct device *, struct device *, void *);

struct cfattach ipic_ca = {
	sizeof(struct ipic_softc), ipic_match, ipic_attach
};

struct cfdriver ipic_cd = {
	NULL, "ipic", DV_DULL
};

void ipic_preinit(void);
uint32_t ipic_read(struct ipic_softc *, bus_addr_t);
void	ipic_write(struct ipic_softc *, bus_addr_t, uint32_t);
uint32_t ipic_simsr_h(int);
uint32_t ipic_simsr_l(int);
uint32_t ipic_semsr(int);
void	ipic_calc_masks(void);

void	ext_intr(void);

ppc_splraise_t ipic_splraise;
ppc_spllower_t ipic_spllower;
ppc_splx_t ipic_splx;

void	ipic_setipl(int);

void
ipic_preinit(void)
{
	int i;
	struct intrq *iq;

	for (i = 0; i < IPIC_NVEC; i++) {
		iq = &ipic_handler[i];
		TAILQ_INIT(&iq->iq_list);
	}
	ipic_preinit_done = 1;
}

int
ipic_match(struct device *parent, void *cfdata, void *aux)
{
	struct obio_attach_args *oa = aux;
	char buf[32];

	if (OF_getprop(oa->oa_node, "device_type", buf, sizeof(buf)) <= 0 ||
	    strcmp(buf, "ipic") != 0)
		return (0);

	return (1);
}

void
ipic_attach(struct device *parent, struct device *self, void *aux)
{
	struct ipic_softc *sc = (void *)self;
	struct obio_attach_args *oa = aux;
	int ivec;
	struct intrq *iq;

	sc->sc_iot = oa->oa_iot;
	if (bus_space_map(sc->sc_iot, oa->oa_offset, 128, 0, &sc->sc_ioh)) {
		printf(": can't map registers\n");
		return;
	}

	ipic_sc = sc;

	/* if ipic_preinit has not happened, do it here */
	if (ipic_preinit_done == 0)
		ipic_preinit();

	/*
	 * Deal with pre-established interrupts.
	 */
	for (ivec = 0; ivec < IPIC_NVEC; ivec++) {
		iq = &ipic_handler[ivec];
		if (!TAILQ_EMPTY(&iq->iq_list)) {
			int level = TAILQ_FIRST(&iq->iq_list)->ih_level;

			sc->sc_simsr_h[level] |= ipic_simsr_h(ivec);
			sc->sc_simsr_l[level] |= ipic_simsr_l(ivec);
			sc->sc_semsr[level] |= ipic_semsr(ivec);
			ipic_calc_masks();
		}
	}

	ppc_smask_init();
	ppc_intr_func.raise = ipic_splraise;
	ppc_intr_func.lower = ipic_spllower;
	ppc_intr_func.x = ipic_splx;

	printf("\n");
}

uint32_t
ipic_read(struct ipic_softc *sc, bus_addr_t addr)
{
	return (letoh32(bus_space_read_4(sc->sc_iot, sc->sc_ioh, addr)));
}

void
ipic_write(struct ipic_softc *sc, bus_addr_t addr, uint32_t data)
{
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, addr, htole32(data));
}

uint32_t
ipic_simsr_h(int ivec)
{
	switch (ivec) {
	case 9:
		return 0x00000080;
	case 10:
		return 0x00000040;
	case 32:
		return 0x80000000;
	case 33:
		return 0x40000000;
	case 34:
		return 0x20000000;
	case 35:
		return 0x10000000;
	case 36:
		return 0x08000000;
	case 37:
		return 0x04000000;
	case 39:
		return 0x01000000;
	}

	return 0;
}

uint32_t
ipic_simsr_l(int ivec)
{
	return 0;
}

uint32_t
ipic_semsr(int ivec)
{
	switch (ivec) {
	case 17:
		return 0x40000000;
	case 18:
		return 0x20000000;
	case 19:
		return 0x10000000;
	case 20:
		return 0x08000000;
	case 21:
		return 0x04000000;
	case 22:
		return 0x02000000;
	case 23:
		return 0x01000000;
	case 48:
		return 0x80000000;
	}

	return 0;
}

void
ipic_calc_masks(void)
{
	struct ipic_softc *sc = ipic_sc;

	sc->sc_simsr_h[IPL_NET] |= sc->sc_simsr_h[IPL_BIO];
	sc->sc_simsr_h[IPL_TTY] |= sc->sc_simsr_h[IPL_NET];
	sc->sc_simsr_h[IPL_VM] |= sc->sc_simsr_h[IPL_TTY];
	sc->sc_simsr_h[IPL_CLOCK] |= sc->sc_simsr_h[IPL_VM];
	sc->sc_simsr_h[IPL_HIGH] |= sc->sc_simsr_h[IPL_CLOCK];

	sc->sc_simsr_l[IPL_NET] |= sc->sc_simsr_l[IPL_BIO];
	sc->sc_simsr_l[IPL_TTY] |= sc->sc_simsr_l[IPL_NET];
	sc->sc_simsr_l[IPL_VM] |= sc->sc_simsr_l[IPL_TTY];
	sc->sc_simsr_l[IPL_CLOCK] |= sc->sc_simsr_l[IPL_VM];
	sc->sc_simsr_l[IPL_HIGH] |= sc->sc_simsr_l[IPL_CLOCK];

	sc->sc_semsr[IPL_NET] |= sc->sc_semsr[IPL_BIO];
	sc->sc_semsr[IPL_TTY] |= sc->sc_semsr[IPL_NET];
	sc->sc_semsr[IPL_VM] |= sc->sc_semsr[IPL_TTY];
	sc->sc_semsr[IPL_CLOCK] |= sc->sc_semsr[IPL_VM];
	sc->sc_semsr[IPL_HIGH] |= sc->sc_semsr[IPL_CLOCK];
}

void *
intr_establish(int ivec, int type, int level,
    int (*ih_fun)(void *), void *ih_arg, const char *name)
{
	struct ipic_softc *sc = ipic_sc;
	struct intrhand *ih;
	struct intrq *iq;
	int s, flags;

	if (ipic_preinit_done == 0)
		ipic_preinit();

	ih = malloc(sizeof *ih, M_DEVBUF, cold ? M_NOWAIT : M_WAITOK);
	if (ih == NULL)
		panic("%s: malloc failed", __func__);
	iq = &ipic_handler[ivec];

	if (ivec < 0 || ivec >= IPIC_NVEC)
		panic("%s: invalid vector %d", __func__, ivec);

	if (sc) {
		sc->sc_simsr_h[level] |= ipic_simsr_h(ivec);
		sc->sc_simsr_l[level] |= ipic_simsr_l(ivec);
		sc->sc_semsr[level] |= ipic_semsr(ivec);
		ipic_calc_masks();
	}

	flags = level & IPL_MPSAFE;
	level &= ~IPL_MPSAFE;

	KASSERT(level <= IPL_TTY || level >= IPL_CLOCK || flags & IPL_MPSAFE);

	ih->ih_fun = ih_fun;
	ih->ih_arg = ih_arg;
	ih->ih_level = level;
	ih->ih_flags = flags;
	ih->ih_irq = ivec;

	evcount_attach(&ih->ih_count, name, &ih->ih_irq);

	/*
	 * Append handler to end of list
	 */
	s = ppc_intr_disable();
	TAILQ_INSERT_TAIL(&iq->iq_list, ih, ih_list);

	/* Unmask the interrupt. */
	if (sc)
		ipic_setipl(curcpu()->ci_cpl);
	ppc_intr_enable(s);

	return (ih);
}

void
ext_intr(void)
{
	struct cpu_info *ci = curcpu();
	struct ipic_softc *sc = ipic_sc;
	struct intrhand *ih;
	struct intrq *iq;
	int pcpl;
	int ivec;

	pcpl = ci->ci_cpl;
	ivec = ipic_read(sc, IPIC_SIVCR) & 0x7f;

	iq = &ipic_handler[ivec];
	TAILQ_FOREACH(ih, &iq->iq_list, ih_list) {
		if (ih->ih_level <= pcpl) {
			panic("irq handler called at wrong level %d %d",
			    ih->ih_level, pcpl);
			continue;
		}

		ipic_splraise(ih->ih_level);
		ppc_intr_enable(1);

		KERNEL_LOCK();
		if ((*ih->ih_fun)(ih->ih_arg))
			ih->ih_count.ec_count++;
		KERNEL_UNLOCK();

		ppc_intr_disable();
	}

	splx(pcpl);
}

int
ipic_splraise(int newcpl)
{
	struct cpu_info *ci = curcpu();
	int ocpl = ci->ci_cpl;
	int s;

	if (ocpl > newcpl)
		newcpl = ocpl;

	s = ppc_intr_disable();
	ipic_setipl(newcpl);
	ppc_intr_enable(s);

	return (ocpl);
}

int
ipic_spllower(int newcpl)
{
	struct cpu_info *ci = curcpu();
	int ocpl = ci->ci_cpl;

	ipic_splx(newcpl);

	return (ocpl);
}

void
ipic_splx(int newcpl)
{
	struct cpu_info *ci = curcpu();
	int intr, s;

	intr = ppc_intr_disable();
	ipic_setipl(newcpl);
	if (newcpl < IPL_SOFTTTY && (ci->ci_ipending & ppc_smask[newcpl])) {
		s = splsofttty();
		dosoftint(newcpl);
		ipic_setipl(s); /* no-overhead splx */
	}
	ppc_intr_enable(intr);
}

/* Must be called with interrupt disable. */
void
ipic_setipl(int ipl)
{
	struct cpu_info *ci = curcpu();
	struct ipic_softc *sc = ipic_sc;
	uint32_t mask;

	ci->ci_cpl = ipl;
	mask = sc->sc_simsr_h[IPL_HIGH] & ~sc->sc_simsr_h[ipl];
	ipic_write(sc, IPIC_SIMSR_H, mask);
	mask = sc->sc_simsr_l[IPL_HIGH] & ~sc->sc_simsr_l[ipl];
	ipic_write(sc, IPIC_SIMSR_L, mask);
	mask = sc->sc_semsr[IPL_HIGH] & ~sc->sc_semsr[ipl];
	ipic_write(sc, IPIC_SEMSR, mask);
}
@


1.17
log
@Implement splassert(9) for powerpc.

This changes the logic to prevent a recursion when processing soft
interrupts.  Previously a per-CPU flag was set before re-enabling
interrupts.  Now the IPL level is raised to SOFTTTY which makes
splsoftassert() happy, greatly inspired by mips64.

As a side effect, the ppc_intr_{disable,enable}() dance is now done
only once instead of twice per splx(9).

While here, make use of dosoftint() instead of having 3 different
functions for dispatching soft interrupts.

Tested by deraadt@@ on G4 smp and by myself G5 smp, G3, G4 and socppc.

No objection from the usual (and over busy) suspects.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.16 2014/02/08 10:58:17 kettenis Exp $	*/
d269 1
a269 1
	int s;
d289 5
d297 1
@


1.16
log
@Don't unmask interrupts that should be left blocked because we're at a
higher spl.  Fixes booting my n1200 with a usb disk plugged in.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.15 2011/08/29 20:21:44 drahn Exp $	*/
a300 1
	ppc_intr_enable(s);
d305 1
d350 1
d355 1
d357 1
d377 1
d379 1
d381 6
a386 2
	if (ci->ci_ipending & ppc_smask[newcpl])
		do_pending_int();
d389 1
a395 1
	int s;
a396 1
	s = ppc_intr_disable();
a403 1
	ppc_intr_enable(s);
@


1.15
log
@Return of the long missing powerpc interrupt rewrite.  Was working for
several weeks before release on macppc, socppc bugs just fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.14 2011/01/08 18:10:22 deraadt Exp $	*/
a151 1
			uint32_t mask;
a156 11

			/* Unmask the interrupt. */
			mask = ipic_read(sc, IPIC_SIMSR_H);
			mask |= ipic_simsr_h(ivec);
			ipic_write(sc, IPIC_SIMSR_H, mask);
			mask = ipic_read(sc, IPIC_SIMSR_L);
			mask |= ipic_simsr_l(ivec);
			ipic_write(sc, IPIC_SIMSR_L, mask);
			mask = ipic_read(sc, IPIC_SEMSR);
			mask |= ipic_semsr(ivec);
			ipic_write(sc, IPIC_SEMSR, mask);
a268 1
	uint32_t mask;
d286 1
a299 1

a300 2
	ipic_calc_masks();

d304 2
a305 11
	if (sc) {
		mask = ipic_read(sc, IPIC_SIMSR_H);
		mask |= ipic_simsr_h(ivec);
		ipic_write(sc, IPIC_SIMSR_H, mask);
		mask = ipic_read(sc, IPIC_SIMSR_L);
		mask |= ipic_simsr_l(ivec);
		ipic_write(sc, IPIC_SIMSR_L, mask);
		mask = ipic_read(sc, IPIC_SEMSR);
		mask |= ipic_semsr(ivec);
		ipic_write(sc, IPIC_SEMSR, mask);
	}
@


1.14
log
@rename imask[] to cpu_imask[] to because imask is too loud as far as
kernel namespace
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.13 2010/09/20 06:33:48 matthew Exp $	*/
d68 1
a68 1
struct intrhand *ipic_intrhand[IPIC_NVEC];
d70 1
d83 1
d89 1
a90 1
void	intr_calculatemasks(void);
d92 19
a110 1
void	ipic_do_pending_int(void);
d131 1
d141 4
d149 3
a151 2
		if (ipic_intrhand[ivec]) {
			int level = ipic_intrhand[ivec]->ih_level;
d157 1
a157 1
			intr_calculatemasks();
d172 5
d251 1
a251 1
intr_calculatemasks(void)
a253 22
	int level;

	for (level = IPL_NONE; level < IPL_NUM; level++)
		cpu_imask[level] = SINT_ALLMASK | (1 << level);

	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so vm > (tty | net | bio).
	 *
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
	cpu_imask[IPL_NET] |= cpu_imask[IPL_BIO];
	cpu_imask[IPL_TTY] |= cpu_imask[IPL_NET];
	cpu_imask[IPL_VM] |= cpu_imask[IPL_TTY];
	cpu_imask[IPL_CLOCK] |= cpu_imask[IPL_VM] | SPL_CLOCKMASK;

	/*
	 * These are pseudo-levels.
	 */
	cpu_imask[IPL_NONE] = 0x00000000;
	cpu_imask[IPL_HIGH] = 0xffffffff;
d279 2
a280 1
	struct intrhand **p, *q, *ih;
d282 4
d290 1
a294 3
	for (p = &ipic_intrhand[ivec]; (q = *p) != NULL; p = &q->ih_next)
		;

a298 1
		intr_calculatemasks();
a302 1
	ih->ih_next = NULL;
a304 2
	evcount_attach(&ih->ih_count, name, NULL);
	*p = ih;
d306 13
a319 1
		/* Unmask the interrupt. */
d340 2
a341 2
	uint32_t simsr_h, simsr_l, semsr;
	int pcpl, ocpl;
d347 6
a352 12
	simsr_h = ipic_read(sc, IPIC_SIMSR_H);
	simsr_l = ipic_read(sc, IPIC_SIMSR_L);
	semsr = ipic_read(sc, IPIC_SEMSR);
	ipic_write(sc, IPIC_SIMSR_H, simsr_h & ~ipic_simsr_h(ivec));
	ipic_write(sc, IPIC_SIMSR_L, simsr_l & ~ipic_simsr_l(ivec));
	ipic_write(sc, IPIC_SEMSR, semsr & ~ipic_semsr(ivec));

	ih = ipic_intrhand[ivec];
	while (ih) {
		if (ci->ci_cpl & (1 << ih->ih_level)) {
			ci->ci_ipending |= (1 << ih->ih_level);
			return;
d355 1
a355 4
		ipic_write(sc, IPIC_SIMSR_H, sc->sc_simsr_h[ih->ih_level]);
		ipic_write(sc, IPIC_SIMSR_L, sc->sc_simsr_l[ih->ih_level]);
		ipic_write(sc, IPIC_SEMSR, sc->sc_semsr[ih->ih_level]);
		ocpl = splraise(cpu_imask[ih->ih_level]);
a363 2
		ci->ci_cpl = ocpl;
		ih = ih->ih_next;
a365 3
	ipic_write(sc, IPIC_SIMSR_H, simsr_h);
	ipic_write(sc, IPIC_SIMSR_L, simsr_l);
	ipic_write(sc, IPIC_SEMSR, semsr);
d369 2
a370 2
static __inline int
cntlzw(int x)
d372 10
a381 1
	int a;
d383 15
a397 1
	__asm __volatile("cntlzw %0,%1" : "=r"(a) : "r"(x));
d399 3
a401 1
	return a;
d405 1
a405 1
ipic_do_pending_int(void)
d410 1
a410 1
	int level;
d412 3
a414 3
	ci->ci_ipending &= SINT_ALLMASK;
	level = cntlzw(31 - (ci->ci_cpl & ~(SPL_CLOCKMASK|SINT_ALLMASK)));
	mask = sc->sc_simsr_h[IPL_HIGH] & ~sc->sc_simsr_h[level];
d416 1
a416 1
	mask = sc->sc_simsr_l[IPL_HIGH] & ~sc->sc_simsr_l[level];
d418 1
a418 1
	mask = sc->sc_semsr[IPL_HIGH] & ~sc->sc_semsr[level];
d420 1
@


1.13
log
@Get rid of evcount's support for arranging counters in a tree
hierarchy.  Everything attached to a single root node anyway, so at
best we had a bush.

"i think it is good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.12 2010/03/03 21:52:13 kettenis Exp $	*/
d226 1
a226 1
		imask[level] = SINT_ALLMASK | (1 << level);
d235 4
a238 4
	imask[IPL_NET] |= imask[IPL_BIO];
	imask[IPL_TTY] |= imask[IPL_NET];
	imask[IPL_VM] |= imask[IPL_TTY];
	imask[IPL_CLOCK] |= imask[IPL_VM] | SPL_CLOCKMASK;
d243 2
a244 2
	imask[IPL_NONE] = 0x00000000;
	imask[IPL_HIGH] = 0xffffffff;
d344 1
a344 1
		ocpl = splraise(imask[ih->ih_level]);
@


1.12
log
@Add support for the ipp_ind_ext_int[0] interrupt.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.11 2009/10/01 20:19:19 kettenis Exp $	*/
d295 1
a295 1
	evcount_attach(&ih->ih_count, name, NULL, &evcount_intr);
@


1.11
log
@Generic soft interrupts for macppc.  Tested by mk@@, deraadt@@
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.10 2009/09/12 21:38:01 kettenis Exp $	*/
d212 2
@


1.10
log
@Initialize global pointer to interrupt controller softc earlier such that we
don't crash if we unmask a preconfigured interrupt.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.9 2009/09/06 20:09:34 kettenis Exp $	*/
d224 1
a224 1
		imask[level] = SINT_MASK | (1 << level);
d236 1
a236 1
	imask[IPL_CLOCK] |= imask[IPL_VM] | SPL_CLOCK;
d379 2
a380 2
	ci->ci_ipending &= SINT_MASK;
	level = cntlzw(31 - (ci->ci_cpl & ~(SPL_CLOCK|SINT_MASK)));
@


1.9
log
@Attach devices to obio(4) based on information from the flattened device
tree.  Since that information is also used for the PCI interrupts, devices
in mini-PCI slots should work now as well, at least in the rb600.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.8 2009/06/09 01:12:38 deraadt Exp $	*/
d118 2
a145 1
	ipic_sc = sc;
@


1.8
log
@backout interrupt diff until it the next round of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.6 2008/12/04 16:02:20 maja Exp $	*/
d27 2
d88 1
d95 7
d110 1
d118 26
d216 1
a216 1
static void
d280 6
a285 4
	sc->sc_simsr_h[level] |= ipic_simsr_h(ivec);
	sc->sc_simsr_l[level] |= ipic_simsr_l(ivec);
	sc->sc_semsr[level] |= ipic_semsr(ivec);
	intr_calculatemasks();
d295 12
a306 10
	/* Unmask the interrupt. */
	mask = ipic_read(sc, IPIC_SIMSR_H);
	mask |= ipic_simsr_h(ivec);
	ipic_write(sc, IPIC_SIMSR_H, mask);
	mask = ipic_read(sc, IPIC_SIMSR_L);
	mask |= ipic_simsr_l(ivec);
	ipic_write(sc, IPIC_SIMSR_L, mask);
	mask = ipic_read(sc, IPIC_SEMSR);
	mask |= ipic_semsr(ivec);
	ipic_write(sc, IPIC_SEMSR, mask);
@


1.7
log
@Reintroduce the macppc interrupt subsystem rewrite. Several bugs have
been found and corrected.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.5 2008/10/12 11:50:18 kettenis Exp $	*/
d66 1
a66 1
struct intrq ipic_handler[IPIC_NVEC];
a84 1
void	ipic_calc_masks(void);
d87 1
a87 8

ppc_splraise_t ipic_splraise;
ppc_spllower_t ipic_spllower;
ppc_splx_t ipic_splx;

void	ipic_setipl(int);
void	ipic_do_pending(int);

a99 2
	struct intrq *iq;
	int i;
a107 11

	for (i = 0; i < IPIC_NVEC; i++) {
		iq = &ipic_handler[i];
		TAILQ_INIT(&iq->iq_list);
	}

	ppc_smask_init();
	ppc_intr_func.raise = ipic_splraise;
	ppc_intr_func.lower = ipic_spllower;
	ppc_intr_func.x = ipic_splx;

d179 2
a180 2
void
ipic_calc_masks(void)
d183 22
d230 1
a230 2
	struct intrhand *ih;
	struct intrq *iq;
a231 1
	int s;
a235 1
	iq = &ipic_handler[ivec];
d240 3
d246 1
d250 1
d253 2
a254 13

	evcount_attach(&ih->ih_count, name, (void *)&ih->ih_irq,
	    &evcount_intr);

	/*
	 * Append handler to end of list
	 */
	s = ppc_intr_disable();

	TAILQ_INSERT_TAIL(&iq->iq_list, ih, ih_list);
	ipic_calc_masks();

	ppc_intr_enable(s);
d276 2
a277 2
	struct intrq *iq;
	int pcpl;
d283 13
a295 4
	iq = &ipic_handler[ivec];
	TAILQ_FOREACH(ih, &iq->iq_list, ih_list) {
		if (ih->ih_level < pcpl)
			continue;
d297 4
a300 1
		ipic_splraise(ih->ih_level);
d309 2
d313 3
d319 2
a320 2
int
ipic_splraise(int newcpl)
d322 1
a322 5
	struct cpu_info *ci = curcpu();
	int ocpl = ci->ci_cpl;

	if (ocpl > newcpl)
		newcpl = ocpl;
d324 1
a324 1
	ipic_setipl(newcpl);
d326 1
a326 22
	return (ocpl);
}

int
ipic_spllower(int newcpl)
{
	struct cpu_info *ci = curcpu();
	int ocpl = ci->ci_cpl;

	ipic_splx(newcpl);

	return (ocpl);
}

void
ipic_splx(int newcpl)
{
	struct cpu_info *ci = curcpu();

	ipic_setipl(newcpl);
	if (ci->ci_ipending & ppc_smask[newcpl])
		ipic_do_pending(newcpl);
d330 1
a330 1
ipic_setipl(int ipl)
d335 1
a335 1
	int s;
d337 3
a339 3
	s = ppc_intr_disable();
	ci->ci_cpl = ipl;
	mask = sc->sc_simsr_h[IPL_HIGH] & ~sc->sc_simsr_h[ipl];
d341 1
a341 1
	mask = sc->sc_simsr_l[IPL_HIGH] & ~sc->sc_simsr_l[ipl];
d343 1
a343 1
	mask = sc->sc_semsr[IPL_HIGH] & ~sc->sc_semsr[ipl];
a344 51
	ppc_intr_enable(s);
}

void
ipic_do_pending(int pcpl)
{
	struct cpu_info *ci = curcpu();
	int s;

	s = ppc_intr_disable();
	if (ci->ci_iactive & CI_IACTIVE_PROCESSING_SOFT) {
		ppc_intr_enable(s);
		return;
	}

	atomic_setbits_int(&ci->ci_iactive, CI_IACTIVE_PROCESSING_SOFT);

	do {
		if ((ci->ci_ipending & SI_TO_IRQBIT(SI_SOFTNET)) &&
		    (pcpl < IPL_SOFTNET)) {
			extern int netisr;
			int pisr;
		       
			ci->ci_ipending &= ~SI_TO_IRQBIT(SI_SOFTNET);
			ci->ci_cpl = IPL_SOFTNET;
			ppc_intr_enable(s);
			KERNEL_LOCK();
			while ((pisr = netisr) != 0) {
				atomic_clearbits_int(&netisr, pisr);
				softnet(pisr);
			}
			KERNEL_UNLOCK();
			ppc_intr_disable();
			continue;
		}
		if ((ci->ci_ipending & SI_TO_IRQBIT(SI_SOFTCLOCK)) &&
		    (pcpl < IPL_SOFTCLOCK)) {
			ci->ci_ipending &= ~SI_TO_IRQBIT(SI_SOFTCLOCK);
			ci->ci_cpl = IPL_SOFTCLOCK;
			ppc_intr_enable(s);
			KERNEL_LOCK();
			softclock();
			KERNEL_UNLOCK();
			ppc_intr_disable();
			continue;
		}
	} while (ci->ci_ipending & ppc_smask[pcpl]);
	ipic_setipl(pcpl);	/* Don't use splx... we are here already! */

	atomic_clearbits_int(&ci->ci_iactive, CI_IACTIVE_PROCESSING_SOFT);
	ppc_intr_enable(s);
@


1.6
log
@Revert ppc intr stuff. Make socppc compile again. -moj
@
text
@d66 1
a66 1
struct intrhand *ipic_intrhand[IPIC_NVEC];
d85 1
d88 8
a95 1
void	ipic_do_pending_int(void);
d108 2
d118 11
d200 2
a201 2
static void
intr_calculatemasks(void)
a203 22
	int level;

	for (level = IPL_NONE; level < IPL_NUM; level++)
		imask[level] = SINT_MASK | (1 << level);

	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so vm > (tty | net | bio).
	 *
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
	imask[IPL_NET] |= imask[IPL_BIO];
	imask[IPL_TTY] |= imask[IPL_NET];
	imask[IPL_VM] |= imask[IPL_TTY];
	imask[IPL_CLOCK] |= imask[IPL_VM] | SPL_CLOCK;

	/*
	 * These are pseudo-levels.
	 */
	imask[IPL_NONE] = 0x00000000;
	imask[IPL_HIGH] = 0xffffffff;
d229 2
a230 1
	struct intrhand **p, *q, *ih;
d232 1
d237 1
a241 3
	for (p = &ipic_intrhand[ivec]; (q = *p) != NULL; p = &q->ih_next)
		;

a244 1
	intr_calculatemasks();
a247 1
	ih->ih_next = NULL;
d250 13
a262 2
	evcount_attach(&ih->ih_count, name, NULL, &evcount_intr);
	*p = ih;
d284 2
a285 2
	uint32_t simsr_h, simsr_l, semsr;
	int pcpl, ocpl;
d291 4
a294 13
	simsr_h = ipic_read(sc, IPIC_SIMSR_H);
	simsr_l = ipic_read(sc, IPIC_SIMSR_L);
	semsr = ipic_read(sc, IPIC_SEMSR);
	ipic_write(sc, IPIC_SIMSR_H, simsr_h & ~ipic_simsr_h(ivec));
	ipic_write(sc, IPIC_SIMSR_L, simsr_l & ~ipic_simsr_l(ivec));
	ipic_write(sc, IPIC_SEMSR, semsr & ~ipic_semsr(ivec));

	ih = ipic_intrhand[ivec];
	while (ih) {
		if (ci->ci_cpl & (1 << ih->ih_level)) {
			ci->ci_ipending |= (1 << ih->ih_level);
			return;
		}
d296 1
a296 4
		ipic_write(sc, IPIC_SIMSR_H, sc->sc_simsr_h[ih->ih_level]);
		ipic_write(sc, IPIC_SIMSR_L, sc->sc_simsr_l[ih->ih_level]);
		ipic_write(sc, IPIC_SEMSR, sc->sc_semsr[ih->ih_level]);
		ocpl = splraise(imask[ih->ih_level]);
a304 2
		ci->ci_cpl = ocpl;
		ih = ih->ih_next;
a306 3
	ipic_write(sc, IPIC_SIMSR_H, simsr_h);
	ipic_write(sc, IPIC_SIMSR_L, simsr_l);
	ipic_write(sc, IPIC_SEMSR, semsr);
d310 2
a311 2
static __inline int
cntlzw(int x)
d313 5
a317 1
	int a;
d319 1
a319 1
	__asm __volatile("cntlzw %0,%1" : "=r"(a) : "r"(x));
d321 22
a342 1
	return a;
d346 1
a346 1
ipic_do_pending_int(void)
d351 1
a351 1
	int level;
d353 3
a355 3
	ci->ci_ipending &= SINT_MASK;
	level = cntlzw(31 - (ci->ci_cpl & ~(SPL_CLOCK|SINT_MASK)));
	mask = sc->sc_simsr_h[IPL_HIGH] & ~sc->sc_simsr_h[level];
d357 1
a357 1
	mask = sc->sc_simsr_l[IPL_HIGH] & ~sc->sc_simsr_l[level];
d359 1
a359 1
	mask = sc->sc_semsr[IPL_HIGH] & ~sc->sc_semsr[level];
d361 51
@


1.5
log
@Adjust for redesigned powerpc interrupt architecture.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.4 2008/05/25 14:29:20 kettenis Exp $	*/
d66 1
a66 1
struct intrq ipic_handler[IPIC_NVEC];
a84 1
void	ipic_calc_masks(void);
d87 1
a87 8

ppc_splraise_t ipic_splraise;
ppc_spllower_t ipic_spllower;
ppc_splx_t ipic_splx;

void	ipic_setipl(int);
void	ipic_do_pending(int);

a99 2
	struct intrq *iq;
	int i;
a107 11

	for (i = 0; i < IPIC_NVEC; i++) {
		iq = &ipic_handler[i];
		TAILQ_INIT(&iq->iq_list);
	}

	ppc_smask_init();
	ppc_intr_func.raise = ipic_splraise;
	ppc_intr_func.lower = ipic_spllower;
	ppc_intr_func.x = ipic_splx;

d179 2
a180 2
void
ipic_calc_masks(void)
d183 22
d230 1
a230 2
	struct intrhand *ih;
	struct intrq *iq;
a231 1
	int s;
a235 1
	iq = &ipic_handler[ivec];
d240 3
d246 1
d250 1
d253 2
a254 13

	evcount_attach(&ih->ih_count, name, (void *)&ih->ih_irq,
	    &evcount_intr);

	/*
	 * Append handler to end of list
	 */
	s = ppc_intr_disable();

	TAILQ_INSERT_TAIL(&iq->iq_list, ih, ih_list);
	ipic_calc_masks();

	ppc_intr_enable(s);
d276 2
a277 2
	struct intrq *iq;
	int pcpl;
d283 13
a295 4
	iq = &ipic_handler[ivec];
	TAILQ_FOREACH(ih, &iq->iq_list, ih_list) {
		if (ih->ih_level < pcpl)
			continue;
d297 4
a300 1
		ipic_splraise(ih->ih_level);
d309 2
d313 3
d319 2
a320 2
int
ipic_splraise(int newcpl)
d322 1
a322 5
	struct cpu_info *ci = curcpu();
	int ocpl = ci->ci_cpl;

	if (ocpl > newcpl)
		newcpl = ocpl;
d324 1
a324 1
	ipic_setipl(newcpl);
d326 1
a326 22
	return (ocpl);
}

int
ipic_spllower(int newcpl)
{
	struct cpu_info *ci = curcpu();
	int ocpl = ci->ci_cpl;

	ipic_splx(newcpl);

	return (ocpl);
}

void
ipic_splx(int newcpl)
{
	struct cpu_info *ci = curcpu();

	ipic_setipl(newcpl);
	if (ci->ci_ipending & ppc_smask[newcpl])
		ipic_do_pending(newcpl);
d330 1
a330 1
ipic_setipl(int ipl)
d335 1
a335 1
	int s;
d337 3
a339 3
	s = ppc_intr_disable();
	ci->ci_cpl = ipl;
	mask = sc->sc_simsr_h[IPL_HIGH] & ~sc->sc_simsr_h[ipl];
d341 1
a341 1
	mask = sc->sc_simsr_l[IPL_HIGH] & ~sc->sc_simsr_l[ipl];
d343 1
a343 1
	mask = sc->sc_semsr[IPL_HIGH] & ~sc->sc_semsr[ipl];
a344 51
	ppc_intr_enable(s);
}

void
ipic_do_pending(int pcpl)
{
	struct cpu_info *ci = curcpu();
	int s;

	s = ppc_intr_disable();
	if (ci->ci_iactive & CI_IACTIVE_PROCESSING_SOFT) {
		ppc_intr_enable(s);
		return;
	}

	atomic_setbits_int(&ci->ci_iactive, CI_IACTIVE_PROCESSING_SOFT);

	do {
		if ((ci->ci_ipending & SI_TO_IRQBIT(SI_SOFTNET)) &&
		    (pcpl < IPL_SOFTNET)) {
			extern int netisr;
			int pisr;
		       
			ci->ci_ipending &= ~SI_TO_IRQBIT(SI_SOFTNET);
			ci->ci_cpl = IPL_SOFTNET;
			ppc_intr_enable(s);
			KERNEL_LOCK();
			while ((pisr = netisr) != 0) {
				atomic_clearbits_int(&netisr, pisr);
				softnet(pisr);
			}
			KERNEL_UNLOCK();
			ppc_intr_disable();
			continue;
		}
		if ((ci->ci_ipending & SI_TO_IRQBIT(SI_SOFTCLOCK)) &&
		    (pcpl < IPL_SOFTCLOCK)) {
			ci->ci_ipending &= ~SI_TO_IRQBIT(SI_SOFTCLOCK);
			ci->ci_cpl = IPL_SOFTCLOCK;
			ppc_intr_enable(s);
			KERNEL_LOCK();
			softclock();
			KERNEL_UNLOCK();
			ppc_intr_disable();
			continue;
		}
	} while (ci->ci_ipending & ppc_smask[pcpl]);
	ipic_setipl(pcpl);	/* Don't use splx... we are here already! */

	atomic_clearbits_int(&ci->ci_iactive, CI_IACTIVE_PROCESSING_SOFT);
	ppc_intr_enable(s);
@


1.4
log
@Fix typo; makes TSEC2 actually get Rx interrupts.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.3 2008/05/19 19:11:42 kettenis Exp $	*/
d66 1
a66 1
struct intrhand *ipic_intrhand[IPIC_NVEC];
d85 1
d88 8
a95 1
void	ipic_do_pending_int(void);
d108 2
d118 11
d200 2
a201 2
static void
intr_calculatemasks(void)
a203 22
	int level;

	for (level = IPL_NONE; level < IPL_NUM; level++)
		imask[level] = SINT_MASK | (1 << level);

	/*
	 * There are tty, network and disk drivers that use free() at interrupt
	 * time, so vm > (tty | net | bio).
	 *
	 * Enforce a hierarchy that gives slow devices a better chance at not
	 * dropping data.
	 */
	imask[IPL_NET] |= imask[IPL_BIO];
	imask[IPL_TTY] |= imask[IPL_NET];
	imask[IPL_VM] |= imask[IPL_TTY];
	imask[IPL_CLOCK] |= imask[IPL_VM] | SPL_CLOCK;

	/*
	 * These are pseudo-levels.
	 */
	imask[IPL_NONE] = 0x00000000;
	imask[IPL_HIGH] = 0xffffffff;
d229 2
a230 1
	struct intrhand **p, *q, *ih;
d232 1
d237 1
a241 3
	for (p = &ipic_intrhand[ivec]; (q = *p) != NULL; p = &q->ih_next)
		;

a244 1
	intr_calculatemasks();
a247 1
	ih->ih_next = NULL;
d250 13
a262 2
	evcount_attach(&ih->ih_count, name, NULL, &evcount_intr);
	*p = ih;
d284 2
a285 2
	uint32_t simsr_h, simsr_l, semsr;
	int pcpl, ocpl;
d291 4
a294 13
	simsr_h = ipic_read(sc, IPIC_SIMSR_H);
	simsr_l = ipic_read(sc, IPIC_SIMSR_L);
	semsr = ipic_read(sc, IPIC_SEMSR);
	ipic_write(sc, IPIC_SIMSR_H, simsr_h & ~ipic_simsr_h(ivec));
	ipic_write(sc, IPIC_SIMSR_L, simsr_l & ~ipic_simsr_l(ivec));
	ipic_write(sc, IPIC_SEMSR, semsr & ~ipic_semsr(ivec));

	ih = ipic_intrhand[ivec];
	while (ih) {
		if (ci->ci_cpl & (1 << ih->ih_level)) {
			ci->ci_ipending |= (1 << ih->ih_level);
			return;
		}
d296 1
a296 4
		ipic_write(sc, IPIC_SIMSR_H, sc->sc_simsr_h[ih->ih_level]);
		ipic_write(sc, IPIC_SIMSR_L, sc->sc_simsr_l[ih->ih_level]);
		ipic_write(sc, IPIC_SEMSR, sc->sc_semsr[ih->ih_level]);
		ocpl = splraise(imask[ih->ih_level]);
a304 2
		ci->ci_cpl = ocpl;
		ih = ih->ih_next;
a306 3
	ipic_write(sc, IPIC_SIMSR_H, simsr_h);
	ipic_write(sc, IPIC_SIMSR_L, simsr_l);
	ipic_write(sc, IPIC_SEMSR, semsr);
d310 2
a311 2
static __inline int
cntlzw(int x)
d313 5
a317 1
	int a;
d319 1
a319 1
	__asm __volatile("cntlzw %0,%1" : "=r"(a) : "r"(x));
d321 22
a342 1
	return a;
d346 1
a346 1
ipic_do_pending_int(void)
d351 1
a351 1
	int level;
d353 3
a355 3
	ci->ci_ipending &= SINT_MASK;
	level = cntlzw(31 - (ci->ci_cpl & ~(SPL_CLOCK|SINT_MASK)));
	mask = sc->sc_simsr_h[IPL_HIGH] & ~sc->sc_simsr_h[level];
d357 1
a357 1
	mask = sc->sc_simsr_l[IPL_HIGH] & ~sc->sc_simsr_l[level];
d359 1
a359 1
	mask = sc->sc_semsr[IPL_HIGH] & ~sc->sc_semsr[level];
d361 51
@


1.3
log
@Add support for TSEC interrupts.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.2 2008/05/13 21:53:32 miod Exp $	*/
d140 1
a140 1
		return 0x0800000;
@


1.2
log
@Meaningful panic messages; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ipic.c,v 1.1 2008/05/10 12:02:20 kettenis Exp $	*/
d131 12
d209 2
a210 2
	sc->sc_simsr_h[IPL_NET] |= sc->sc_simsr_h[IPL_VM];
	sc->sc_simsr_h[IPL_HIGH] |= sc->sc_simsr_h[IPL_NET];
d215 2
a216 2
	sc->sc_simsr_l[IPL_NET] |= sc->sc_simsr_l[IPL_VM];
	sc->sc_simsr_l[IPL_HIGH] |= sc->sc_simsr_l[IPL_NET];
d221 2
a222 2
	sc->sc_semsr[IPL_NET] |= sc->sc_semsr[IPL_VM];
	sc->sc_semsr[IPL_HIGH] |= sc->sc_semsr[IPL_NET];
@


1.1
log
@OpenBSD/socppc, a port to the Thecus N1200, and potentially other Freescale
PowerPC SoC platforms that use u-boot as a bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d223 1
a223 1
		panic("xxx");
d226 1
a226 1
		panic("xxx");
@

