head	1.50;
access;
symbols
	OPENBSD_6_1:1.50.0.4
	OPENBSD_6_1_BASE:1.50
	OPENBSD_6_0:1.43.0.2
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.42.0.4
	OPENBSD_5_9_BASE:1.42
	OPENBSD_5_8:1.42.0.6
	OPENBSD_5_8_BASE:1.42
	OPENBSD_5_7:1.42.0.2
	OPENBSD_5_7_BASE:1.42
	OPENBSD_5_6:1.39.0.4
	OPENBSD_5_6_BASE:1.39
	OPENBSD_5_5:1.38.0.4
	OPENBSD_5_5_BASE:1.38
	OPENBSD_5_4:1.37.0.2
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.36.0.2
	OPENBSD_5_3_BASE:1.36
	OPENBSD_5_2:1.34.0.4
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.34
	OPENBSD_5_1:1.34.0.2
	OPENBSD_5_0:1.33.0.2
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.30.0.2
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.27.0.2
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.50
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.49;
commitid	yUJbDchhkVm6F1HA;

1.49
date	2016.11.15.09.08.38;	author natano;	state Exp;
branches;
next	1.48;
commitid	uQeojuKIzgIWOEnv;

1.48
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.47;
commitid	eR4vLZnymgQjVxbj;

1.47
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.46;
commitid	84F8eQ949AbxN83e;

1.46
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.45;
commitid	TtDw6IYffbT8oPEE;

1.45
date	2016.10.14.18.43.02;	author deraadt;	state Exp;
branches;
next	1.44;
commitid	dUZQxi6w3YqAb6KQ;

1.44
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.43;
commitid	N8Z5nlTJHj3pmauV;

1.43
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.42;
commitid	Vbd8R29nZBKG6KtM;

1.42
date	2015.01.13.01.12.50;	author deraadt;	state Exp;
branches;
next	1.41;
commitid	xEYSgcMiEU7N21VE;

1.41
date	2015.01.11.19.25.14;	author tedu;	state Exp;
branches;
next	1.40;
commitid	Jqptj5xcqx8IMSNU;

1.40
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.39;
commitid	iaz4yUwbbR9oynrV;

1.39
date	2014.05.09.18.16.15;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2013.10.15.19.23.30;	author guenther;	state Exp;
branches;
next	1.37;

1.37
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.35;

1.35
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.34;

1.34
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.33;

1.33
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.02.04.35.03;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.01.23.49.23;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.05.25.02.35.03;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.27.16.54.54;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.27.16.50.15;	author jsg;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.27.05.08.30;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.27.04.31.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.27.03.37.38;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.26.22.11.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.26.20.50.17;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.26.18.58.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.09.21.33.39;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.10.12.02.20;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@#	$OpenBSD: Makefile.socppc,v 1.49 2016/11/15 09:08:38 natano Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-msoft-float -Wa,-many
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE ${CMACHFLAGS}
LINKFLAGS=	-N -Ttext 200000 -e start --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.S assym.h
mutex.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.49
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.48 2016/10/27 20:44:20 natano Exp $
d38 1
a77 1
DEBUG?=
@


1.48
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.47 2016/10/24 18:26:17 deraadt Exp $
d119 2
a120 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d125 1
a125 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.47
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.46 2016/10/15 13:45:08 deraadt Exp $
d120 1
a120 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.46
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.45 2016/10/14 18:43:02 deraadt Exp $
d124 1
a124 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.45
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.44 2016/09/24 19:13:03 kettenis Exp $
d121 4
a124 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.44
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.43 2016/04/29 12:44:52 mpi Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d127 2
@


1.43
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.42 2015/01/13 01:12:50 deraadt Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized \
@


1.42
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.41 2015/01/11 19:25:14 tedu Exp $
d79 1
a79 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d85 1
a85 1
LINKFLAGS+=	-S -x
@


1.41
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.40 2014/10/04 18:10:14 brad Exp $
d149 1
a149 2
	rm -f /obsd
	ln /bsd /obsd
@


1.40
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.39 2014/05/09 18:16:15 miod Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.39
log
@Format string fixes and removal of -Wno-format for *ppc kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.38 2013/10/15 19:23:30 guenther Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.38
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.37 2013/03/30 07:25:20 tedu Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.37
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.36 2012/08/28 21:03:32 pascal Exp $
d135 1
a135 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d137 1
a137 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.36
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.35 2012/08/22 16:58:26 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.35
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.34 2011/11/08 18:41:34 matthieu Exp $
d41 1
a41 1
LINKFLAGS=	-N -Ttext 200000 -e start --warn-common
@


1.34
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.33 2011/07/07 22:28:18 guenther Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.33
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.32 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.32
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.31 2011/04/15 02:41:28 guenther Exp $
d161 5
a165 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.31
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.30 2010/12/30 18:49:31 deraadt Exp $
d122 1
a122 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.30
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.29 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d71 2
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d92 5
d100 2
a101 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d130 3
a135 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d137 1
a137 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d154 12
@


1.29
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.28 2010/12/02 04:35:03 deraadt Exp $
d94 2
a95 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.28
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.27 2010/06/01 23:49:23 deraadt Exp $
d70 2
a71 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.27
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.26 2010/05/28 14:27:08 guenther Exp $
d70 1
a70 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.26
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.25 2010/05/25 17:27:55 deraadt Exp $
a42 1
STRIPFLAGS=	-g -x
d80 1
@


1.25
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.24 2010/05/25 15:05:01 deraadt Exp $
d94 1
a94 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.24
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.23 2010/05/25 02:35:03 deraadt Exp $
a21 2
_mach?=		socppc
_arch?=		powerpc
@


1.23
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.22 2010/05/24 23:19:22 deraadt Exp $
d149 1
a149 1
	${NORMAL_S}
@


1.22
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.21 2010/05/24 17:49:37 deraadt Exp $
a129 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d131 1
a131 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.21
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.20 2010/05/24 14:59:16 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d45 1
a45 1
STRIPFLAGS=	-g -X -x
d119 1
a119 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d129 2
a130 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
d133 1
a133 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.S
@


1.20
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.19 2010/04/28 15:31:33 deraadt Exp $
d143 1
a143 1
.if ${SFILES} != ""
@


1.19
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.18 2010/04/27 17:25:19 drahn Exp $
d14 1
a15 1
SIZE?=	size
d18 1
a18 1
.ifndef	S
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${_mach}__
d30 1
a30 1
		-Wno-uninitialized -Wno-format -Wno-main \
d32 5
a36 2
CMACHFLAGS=	-msoft-float -Wa,-many -fno-builtin-printf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc
d40 1
d43 1
a43 1
AFLAGS=		-D_LOCORE -Wa,-many
d56 1
a56 5

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a59 2
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

a60 2
NORMAL_S_C=	${AS}  ${COPTS} ${PARAM} $< -o $@@

d75 1
a75 1
SYSTEM_LD_HEAD=	rm -f $@@
d105 1
a105 1
	${NORMAL_C_C}
d118 1
a118 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d122 3
a124 3
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB ${CFILES} \
		ioconf.c param.c | \
		grep -v 'static function .* unused'
@


1.18
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.17 2010/04/27 16:54:54 deraadt Exp $
d54 1
a54 1
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
a61 3
DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

d139 1
a139 1
	sh makelinks && rm -f dontlink
@


1.17
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.16 2010/04/27 16:50:15 jsg Exp $
d27 1
a27 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.16
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.15 2010/04/27 06:46:26 deraadt Exp $
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL \
		-D__socppc__
@


1.15
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.14 2010/04/27 05:08:30 deraadt Exp $
d33 2
a34 1
CMACHFLAGS=	-msoft-float -Wa,-many -fno-builtin-printf -fno-builtin-log
@


1.14
log
@No need for a specific .SUFFIXES list; ok drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.13 2010/04/27 05:07:29 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/socppc/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/socppc/conf/Makefile.socppc
# after which config should be rerun for all machines of that type.
@


1.13
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.12 2010/04/27 05:05:21 deraadt Exp $
a18 2

.SUFFIXES:	.S .c .o
@


1.12
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.11 2010/04/27 04:31:47 deraadt Exp $
a14 5
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas
#

@


1.11
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.10 2010/04/27 03:37:38 deraadt Exp $
d158 1
a158 1
SRCS=	${_machdir}/socppc/locore.S \
d162 1
a162 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/socppc/locore.S
d178 1
a178 1
locore.o: ${_machdir}/socppc/locore.S assym.h
@


1.10
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.9 2010/04/26 22:21:15 deraadt Exp $
d168 1
a168 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.9
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.8 2010/04/26 22:11:38 deraadt Exp $
a177 12

# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
genassym.o machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile
@


1.8
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.7 2010/04/26 20:50:17 deraadt Exp $
a36 1
_machdir?=	$S/arch/socppc
d38 2
a39 1
_archdir?=	$S/arch/powerpc
@


1.7
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.6 2010/04/26 18:58:31 deraadt Exp $
d114 5
a118 3
assym.h: $S/kern/genassym.sh ${_machdir}/socppc/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    < ${_machdir}/socppc/genassym.cf > assym.h.tmp && \
d167 3
a169 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/socppc/genassym.cf
@


1.6
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.5 2009/10/19 19:46:56 guenther Exp $
d35 5
a39 1
SOCPPC=	$S/arch/socppc
d114 1
a114 1
assym.h: $S/kern/genassym.sh ${SOCPPC}/socppc/genassym.cf Makefile
d116 1
a116 1
	    < ${SOCPPC}/socppc/genassym.cf > assym.h.tmp && \
d156 1
a156 1
SRCS=	${SOCPPC}/socppc/locore.S \
d160 1
a160 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${SOCPPC}/socppc/locore.S
d166 1
a166 1
	    ${CPPFLAGS} < ${SOCPPC}/socppc/genassym.cf
d188 1
a188 2

locore.o: ${SOCPPC}/socppc/locore.S assym.h
@


1.5
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 2
a2 4
#	$OpenBSD: Makefile.socppc,v 1.4 2009/08/09 23:04:49 miod Exp $
#
# Makefile for OpenBSD PowerPC
#
a18 1
.SUFFIXES:	.S .c .o
d20 2
a21 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d24 2
@


1.4
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.3 2009/08/09 21:33:39 miod Exp $
d129 1
a129 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.3
log
@No need to clean genassym{.,o} during `make clean', genassym.sh does this
for us.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.2 2009/01/11 21:02:03 pirofti Exp $
d54 6
d135 1
a135 1
		[Ee]rrs linterrs makelinks assym.h
d156 1
a156 1
.depend: ${SRCS} assym.h param.c
d167 5
@


1.2
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.socppc,v 1.1 2008/05/10 12:02:20 kettenis Exp $
d129 1
a129 1
		[Ee]rrs linterrs makelinks genassym genassym.o assym.h
@


1.1
log
@OpenBSD/socppc, a port to the Thecus N1200, and potentially other Freescale
PowerPC SoC platforms that use u-boot as a bootloader.
@
text
@d1 1
a1 1
#	$OpenBSD$
d158 2
a159 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@

