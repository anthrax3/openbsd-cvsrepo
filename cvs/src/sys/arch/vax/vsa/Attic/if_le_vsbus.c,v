head	1.16;
access;
symbols
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.8
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SMP:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.03.09.16.28.50;	author deraadt;	state dead;
branches;
next	1.15;
commitid	OSDG2O3Cgeifnf1W;

1.15
date	2014.12.22.02.26.54;	author tedu;	state Exp;
branches;
next	1.14;
commitid	2Ez9mHW0jDzojG4V;

1.14
date	2013.09.24.20.10.53;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.26.21.52.22;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.20.06.33.48;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.01.12.45.42;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.07.23.10.46;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.27.59;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.11.06.34.38;	author hugh;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2000.10.11.06.19.19;	author bjc;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.02.34.50;	author bjc;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.21.39.19;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.10.31.03.08.02;	author nate;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2002.03.28.11.26.47;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.06.07.11.14.48;	author ho;	state Exp;
branches;
next	;

1.6.2.1
date	2002.06.11.03.39.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: if_le_vsbus.c,v 1.15 2014/12/22 02:26:54 tedu Exp $	*/
/*	$NetBSD: if_le_vsbus.c,v 1.10 2000/06/29 07:14:18 mrg Exp $	*/

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_le.c	8.2 (Berkeley) 11/16/93
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>
#include <sys/reboot.h>

#include <uvm/uvm_extern.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/cpu.h>
#include <machine/sid.h>
#include <machine/scb.h>
#include <machine/bus.h>
#include <machine/vsbus.h>

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

struct le_softc {
	struct	am7990_softc sc_am7990; /* Must be first */
	struct	evcount sc_intrcnt;
	bus_dmamap_t sc_dm;
	volatile u_short *sc_rap;
	volatile u_short *sc_rdp;
};

static	int	le_vsbus_match(struct device *, struct cfdata *, void *);
static	void	le_vsbus_attach(struct device *, struct device *, void *);
static	void	lewrcsr(struct lance_softc *, uint16_t, uint16_t);
static	uint16_t lerdcsr(struct lance_softc *, uint16_t);

struct cfattach le_vsbus_ca = {
	sizeof(struct le_softc), (cfmatch_t)le_vsbus_match, le_vsbus_attach
};

static void
lewrcsr(struct lance_softc *ls, uint16_t port, uint16_t val)
{
	struct le_softc *sc = (void *)ls;

	*sc->sc_rap = port;
	*sc->sc_rdp = val;
}

static uint16_t
lerdcsr(struct lance_softc *ls, uint16_t port)
{
	struct le_softc *sc = (void *)ls;

	*sc->sc_rap = port;
	return *sc->sc_rdp;
}

static int
le_vsbus_match(struct device *parent, struct cfdata *cf, void *aux)
{
	struct vsbus_attach_args *va = aux;
	volatile short *rdp, *rap;
	struct leinit initblock;
	bus_dmamap_t map;
	int i;
	int rv = 0;
	int error;

	if (vax_boardtype == VAX_BTYP_49 || vax_boardtype == VAX_BTYP_1303)
		return 0;

	error = bus_dmamap_create(va->va_dmat, sizeof(initblock), 1,
	    sizeof(initblock), 0, BUS_DMA_NOWAIT, &map);
	if (error) {
		return 0;
	}

	error = bus_dmamap_load(va->va_dmat, map, &initblock, 
	    sizeof(initblock), NULL, BUS_DMA_NOWAIT|BUS_DMA_COHERENT);
	if (error) {
		bus_dmamap_destroy(va->va_dmat, map);
		return 0;
	}

	memset(&initblock, 0, sizeof(initblock));

	rdp = (short *)va->va_addr;
	rap = rdp + 2;

	/* Make sure the chip is stopped. */
	*rap = LE_CSR0;
	*rdp = LE_C0_STOP;
	DELAY(100);
	*rap = LE_CSR1;
	*rdp = map->dm_segs->ds_addr & 0xffff;
	*rap = LE_CSR2;
	*rdp = (map->dm_segs->ds_addr >> 16) & 0xffff;
	*rap = LE_CSR0;
	*rdp = LE_C0_INIT|LE_C0_INEA;

	/* Wait for initialization to finish. */
	for (i = 100; i >= 0; i--) {
		DELAY(1000);
		/* Should have interrupted by now */
		*rap = LE_CSR0;
		if (*rdp & LE_C0_IDON)
			rv = 1;
	} 
	*rap = LE_CSR0;
	*rdp = LE_C0_STOP;

	bus_dmamap_unload(va->va_dmat, map);
	bus_dmamap_destroy(va->va_dmat, map);
	return rv;
}

static void
le_vsbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct vsbus_attach_args *va = aux;
	struct le_softc *lesc = (void *)self;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	bus_dma_segment_t seg;
	int *lance_addr;
	int i, err, rseg;
	static int cvec;

	lesc->sc_rdp = (short *)vax_map_physmem(NI_BASE, 1);
	lesc->sc_rap = lesc->sc_rdp + 2;

	/*
	 * MD functions.
	 */
	sc->sc_rdcsr = lerdcsr;
	sc->sc_wrcsr = lewrcsr;
	sc->sc_nocarrier = NULL;

	scb_vecalloc(va->va_cvec, (void (*)(void *))am7990_intr, sc,
	    SCB_ISTACK, &lesc->sc_intrcnt);
	cvec = va->va_cvec;
	evcount_attach(&lesc->sc_intrcnt, self->dv_xname, &cvec);

        /*
         * Allocate a (DMA-safe) block for all descriptors and buffers.
         */

#define ALLOCSIZ (64 * 1024)
        err = bus_dmamem_alloc(va->va_dmat, ALLOCSIZ, NBPG, 0, 
            &seg, 1, &rseg, BUS_DMA_NOWAIT);
        if (err) {
                printf(": unable to alloc buffer block: err %d\n", err);
                return;
        }
        err = bus_dmamem_map(va->va_dmat, &seg, rseg, ALLOCSIZ, 
            (caddr_t *)&sc->sc_mem, BUS_DMA_NOWAIT | BUS_DMA_COHERENT);
        if (err) {
                printf(": unable to map buffer block: err %d\n", err);
                bus_dmamem_free(va->va_dmat, &seg, rseg);
                return;
        }
	err = bus_dmamap_create(va->va_dmat, ALLOCSIZ, rseg, ALLOCSIZ, 
	    0, BUS_DMA_NOWAIT, &lesc->sc_dm);
        if (err) {
                printf(": unable to create dma map: err %d\n", err);
                bus_dmamem_free(va->va_dmat, &seg, rseg);
                return;
        }
	err = bus_dmamap_load(va->va_dmat, lesc->sc_dm, sc->sc_mem,
	    ALLOCSIZ, NULL, BUS_DMA_NOWAIT);
        if (err) {
                printf(": unable to load dma map: err %d\n", err);
                bus_dmamap_destroy(va->va_dmat, lesc->sc_dm);
                bus_dmamem_free(va->va_dmat, &seg, rseg);
                return;
        }
	printf(" buf 0x%lx-0x%lx", lesc->sc_dm->dm_segs->ds_addr,
	    lesc->sc_dm->dm_segs->ds_addr + lesc->sc_dm->dm_segs->ds_len - 1);
	sc->sc_addr = lesc->sc_dm->dm_segs->ds_addr & 0xffffff;
	sc->sc_memsize = lesc->sc_dm->dm_segs->ds_len;

	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

#ifdef LEDEBUG
	sc->sc_debug = 1;
#endif
	/*
	 * Get the ethernet address out of rom
	 */
	lance_addr = (int *)vax_map_physmem(NI_ADDR, 1);
	for (i = 0; i < 6; i++)
		sc->sc_arpcom.ac_enaddr[i] = (u_char)lance_addr[i];
	vax_unmap_physmem((vaddr_t)lance_addr, 1);

	/* Prettier printout */
	printf("\n%s", self->dv_xname);

	am7990_config(&lesc->sc_am7990);
}
@


1.15
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.14 2013/09/24 20:10:53 miod Exp $	*/
@


1.14
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.13 2011/08/26 21:52:22 miod Exp $	*/
a79 1
#ifdef INET
a80 1
#endif
@


1.13
log
@Be sure to write to the 7990 address register between two consecutive reads
of the data register, while waiting for the chip initialization to complete.
This seems to prevent spurious disappearance of le0 on some systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.12 2010/09/20 06:33:48 matthew Exp $	*/
d91 2
d106 2
a107 2
static	void	lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static	u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
d114 1
a114 3
lewrcsr(ls, port, val)
	struct am7990_softc *ls;
	u_int16_t port, val;
d122 2
a123 4
static u_int16_t
lerdcsr(ls, port)
	struct am7990_softc *ls;
	u_int16_t port;
d132 1
a132 4
le_vsbus_match(parent, cf, aux)
	struct device *parent;
	struct cfdata *cf;
	void *aux;
d191 1
a191 3
le_vsbus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d194 2
a195 1
	struct le_softc *sc = (void *)self;
d201 2
a202 2
	sc->sc_rdp = (short *)vax_map_physmem(NI_BASE, 1);
	sc->sc_rap = sc->sc_rdp + 2;
d207 3
a209 3
	sc->sc_am7990.sc_rdcsr = lerdcsr;
	sc->sc_am7990.sc_wrcsr = lewrcsr;
	sc->sc_am7990.sc_nocarrier = NULL;
d211 2
a212 2
	scb_vecalloc(va->va_cvec, (void (*)(void *)) am7990_intr, sc,
	    SCB_ISTACK, &sc->sc_intrcnt);
d214 1
a214 1
	evcount_attach(&sc->sc_intrcnt, self->dv_xname, &cvec);
d228 1
a228 2
            (caddr_t *)&sc->sc_am7990.sc_mem,
	    BUS_DMA_NOWAIT|BUS_DMA_COHERENT);
d235 1
a235 1
	    0, BUS_DMA_NOWAIT, &sc->sc_dm);
d241 1
a241 1
	err = bus_dmamap_load(va->va_dmat, sc->sc_dm, sc->sc_am7990.sc_mem,
d245 1
a245 1
                bus_dmamap_destroy(va->va_dmat, sc->sc_dm);
d249 10
a258 10
	printf(" buf 0x%lx-0x%lx", sc->sc_dm->dm_segs->ds_addr,
	    sc->sc_dm->dm_segs->ds_addr + sc->sc_dm->dm_segs->ds_len - 1);
	sc->sc_am7990.sc_addr = sc->sc_dm->dm_segs->ds_addr & 0xffffff;
	sc->sc_am7990.sc_memsize = sc->sc_dm->dm_segs->ds_len;

	sc->sc_am7990.sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_am7990.sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_am7990.sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_am7990.sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_am7990.sc_zerobuf = am7990_zerobuf_contig;
d261 1
a261 1
	sc->sc_am7990.sc_debug = 1;
d268 1
a268 1
		sc->sc_am7990.sc_arpcom.ac_enaddr[i] = (u_char)lance_addr[i];
a270 2
	bcopy(self->dv_xname, sc->sc_am7990.sc_arpcom.ac_if.if_xname,
	    IFNAMSIZ);
d274 1
a274 1
	am7990_config(&sc->sc_am7990);
@


1.12
log
@Get rid of evcount's support for arranging counters in a tree
hierarchy.  Everything attached to a single root node anyway, so at
best we had a bush.

"i think it is good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.11 2008/06/26 05:42:14 ray Exp $	*/
d183 1
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.10 2007/09/01 12:45:42 miod Exp $	*/
d219 1
a219 2
	evcount_attach(&sc->sc_intrcnt, self->dv_xname,
	    (void *)&cvec, &evcount_intr);
@


1.10
log
@Do not include <machine/rpb.h> unless necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.9 2004/07/07 23:10:46 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	  This product includes software developed by the NetBSD
 *	  Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@new-style interrupt counters.  based on initial work by hugh.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.8 2003/06/02 23:27:59 millert Exp $	*/
a94 1
#include <machine/rpb.h>
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.7 2002/03/14 01:26:49 millert Exp $	*/
d104 1
a104 1
	struct	evcnt sc_intrcnt;
d212 1
d226 3
a228 1
	evcnt_attach(self, "intr", &sc->sc_intrcnt);
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
d55 1
a55 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.5 2001/09/11 20:05:25 miod Exp $	*/
d114 4
a117 4
static	int	le_vsbus_match __P((struct device *, struct cfdata *, void *));
static	void	le_vsbus_attach __P((struct device *, struct device *, void *));
static	void	lewrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
static	u_int16_t lerdcsr __P((struct am7990_softc *, u_int16_t));
@


1.6.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
d114 4
a117 4
static	int	le_vsbus_match(struct device *, struct cfdata *, void *);
static	void	le_vsbus_attach(struct device *, struct device *, void *);
static	void	lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static	u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
@


1.5
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.4 2001/08/25 13:33:37 hugh Exp $	*/
d86 1
a86 1
#include <vm/vm.h>
@


1.4
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.3 2001/02/11 06:34:38 hugh Exp $	*/
a86 1
#include <vm/vm_kern.h>
@


1.3
log
@Pick up a NetBSD hack to attach Cheetah to vsbus as well as ibus.
High kludge factor, but the payoff is vsbus scsi for free.
Most of the work is by Michael Kukat and ragge, with a few other
synchronisations thrown in.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.2 2000/10/11 06:19:19 bjc Exp $	*/
d228 3
a230 1
	scb_vecalloc(va->va_cvec, (void (*)(void *)) am7990_intr, sc, SCB_ISTACK);
@


1.3.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.3 2001/02/11 06:34:38 hugh Exp $	*/
@


1.3.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.3.4.1 2001/05/14 21:39:19 niklas Exp $	*/
d87 1
d228 1
a228 3
	scb_vecalloc(va->va_cvec, (void (*)(void *)) am7990_intr, sc,
	    SCB_ISTACK, &sc->sc_intrcnt);
	evcnt_attach(self, "intr", &sc->sc_intrcnt);
@


1.3.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d86 1
a86 1
#include <uvm/uvm_extern.h>
@


1.3.4.4
log
@Merge in -current from about a week ago
@
text
@d114 4
a117 4
static	int	le_vsbus_match(struct device *, struct cfdata *, void *);
static	void	le_vsbus_attach(struct device *, struct device *, void *);
static	void	lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static	u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
@


1.3.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.3.4.4 2002/03/28 11:26:47 niklas Exp $	*/
d55 5
a59 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@update these to work with cleaner vsbus dma; from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_vsbus.c,v 1.1 2000/04/27 02:34:50 bjc Exp $	*/
a98 1
#include <machine/bus.h>
d101 1
d160 1
a160 1
	if (vax_boardtype == VAX_BTYP_49)
a212 1
	struct vsbus_softc *vsc = (struct vsbus_softc *)parent;
a290 1
	vsc->sc_mask |= 1 << (va->va_maskno-1);
@


1.1
log
@forgot these, oops
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: if_le_vsbus.c,v 1.2 1999/08/27 20:05:08 ragge Exp $	*/
a105 1
#include <dev/tc/if_levar.h>
d107 10
a116 2
int	le_vsbus_match __P((struct device *, struct cfdata *, void *));
void	le_vsbus_attach __P((struct device *, struct device *, void *));
d124 3
a126 3
void
lewrcsr(sc, port, val)
	struct am7990_softc *sc;
d129 1
a129 1
	struct lereg1 *ler1 = ((struct le_softc *)sc)->sc_r1;
d131 2
a132 2
	ler1->ler1_rap = port;
	ler1->ler1_rdp = val;
d135 3
a137 3
u_int16_t
lerdcsr(sc, port)
	struct am7990_softc *sc;
d140 1
a140 1
	struct lereg1 *ler1 = ((struct le_softc *)sc)->sc_r1;
d142 2
a143 2
	ler1->ler1_rap = port;
	return ler1->ler1_rdp;
d146 1
a146 1
int
d152 1
a152 1
	struct  vsbus_attach_args *va = aux;
d154 5
d162 16
d185 5
d193 8
a200 2
	DELAY(100000);
	va->va_ivec = vsbus_intr;		/* we do our own scb stuff */
d202 3
a204 4
	/* Should have interrupted by now */
	if (*rdp & LE_C0_IDON)
		return 1;
	return 0;
d207 1
a207 1
void
d213 1
a214 1
	struct vsbus_softc *vsc = (struct vsbus_softc *)parent;
a217 3
	struct lereg1 *ler1; 

	ler1 = sc->sc_r1 = (void *)vax_map_physmem(NI_BASE, 1);
d219 2
a220 2
	/* Prettier printout */
	printf("\n%s", self->dv_xname);
d230 1
d250 19
a268 3
	sc->sc_am7990.sc_addr =
	    (paddr_t)sc->sc_am7990.sc_mem & 0xffffff;
	sc->sc_am7990.sc_memsize = ALLOCSIZ;
a269 2
	sc->sc_am7990.sc_conf3 = 0;
	sc->sc_am7990.sc_hwinit = NULL;
d276 3
d289 2
a290 1
	am7990_config(&sc->sc_am7990);
a291 8
	/*
	 * Register this device as boot device if we booted from it.
	 * This will fail if there are more than one le in a machine,
	 * fortunately there may be only one.
	 */
	if (B_TYPE(bootdev) == BDEV_LE)
		booted_from = self;
	
d293 1
@

