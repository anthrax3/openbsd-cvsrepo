head	1.30;
access;
symbols
	OPENBSD_5_9:1.29.0.16
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.18
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.10
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.29.0.14
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.12
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.8
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.6
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.4
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.2
	OPENBSD_5_0:1.28.0.4
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.2
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.27.0.8
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.4
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.6
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.2
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.24.0.4
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.22.0.6
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.4
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.2
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.10
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.30
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.29;
commitid	OSDG2O3Cgeifnf1W;

1.29
date	2011.09.11.19.29.01;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.20.06.33.48;	author matthew;	state Exp;
branches;
next	1.27;

1.27
date	2008.08.24.14.52.08;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2008.08.18.23.04.28;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2008.08.15.22.44.12;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2008.01.23.16.37.57;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2007.12.28.20.42.31;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2006.08.03.18.45.40;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2006.08.01.23.36.51;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2006.07.30.18.30.51;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2006.07.30.09.15.03;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.29.17.07.46;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.29.15.12.44;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2006.07.29.14.17.32;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2006.07.19.20.22.12;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.17.20.26.16;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.01.11.59.40;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.07.23.10.46;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.01.13.05.07;	author hugh;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2001.08.26.18.25.06;	author hugh;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.15.22.45.34;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.16.22.15.19;	author hugh;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.11.06.34.38;	author hugh;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.01.30.17.05.02;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.28.01.20.00;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.02.34.50;	author bjc;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.21.39.17;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.07.04.10.24.50;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2001.10.31.03.08.02;	author nate;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2002.03.28.11.26.47;	author niklas;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.11.03.39.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.30
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: dz_ibus.c,v 1.29 2011/09/11 19:29:01 miod Exp $	*/
/*	$NetBSD: dz_ibus.c,v 1.15 1999/08/27 17:50:42 ragge Exp $ */
/*
 * Copyright (c) 1998 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of 
 *     Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/sid.h>
#include <machine/vsbus.h>
#include <machine/cpu.h>
#include <machine/scb.h>

#include <vax/qbus/dzreg.h>
#include <vax/qbus/dzvar.h>

#include <vax/dec/dzkbdvar.h>

#include <dev/cons.h>

#include "dzkbd.h"
#include "dzms.h"

int     dz_vsbus_match(struct device *, struct cfdata *, void *);
void    dz_vsbus_attach(struct device *, struct device *, void *);

struct  cfattach dz_vsbus_ca = {
	sizeof(struct dz_softc), (cfmatch_t)dz_vsbus_match, dz_vsbus_attach
};

#define	DZ_VSBUS_CSR	0
#define	DZ_VSBUS_RBUF	4
#define	DZ_VSBUS_DTR	9
#define	DZ_VSBUS_BREAK	13
#define	DZ_VSBUS_TBUF	12
#define	DZ_VSBUS_TCR	8
#define	DZ_VSBUS_DCD	13
#define	DZ_VSBUS_RING	13

int
dz_vsbus_match(parent, cf, aux)
	struct device *parent;
	struct cfdata *cf;
	void *aux;
{
	struct vsbus_attach_args *va = aux;
	volatile uint16_t *dzP;
	short i;

#if VAX53 || VAX49
	if (vax_boardtype == VAX_BTYP_49 ||
	    vax_boardtype == VAX_BTYP_1303)
		if (cf->cf_loc[0] != DZ_CSR_KA49)
			return 0; /* don't probe unnecessarily */
#endif

	dzP = (volatile uint16_t *)va->va_addr;
	i = dzP[DZ_VSBUS_TCR / 2];
	dzP[DZ_VSBUS_CSR / 2] = DZ_CSR_MSE|DZ_CSR_TXIE;
	dzP[DZ_VSBUS_TCR / 2] = 0;
	DELAY(1000);
	dzP[DZ_VSBUS_TCR / 2] = 1;
	DELAY(100000);
	dzP[DZ_VSBUS_TCR / 2] = i;

	/* If the device doesn't exist, no interrupt has been generated */
	
	return 1;
}

void
dz_vsbus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct dz_softc *sc = (void *)self;
	struct vsbus_attach_args *va = aux;
#if NDZKBD > 0 || NDZMS > 0
	struct dzkm_attach_args daa;
#endif
	extern vaddr_t dz_console_regs;
	vaddr_t dz_regs;

	printf(": ");

	/*
	 * This assumes that systems where dz@@vsbus exist and can be
	 * the console device, can only have one instance of dz@@vsbus.
	 * So far, so good.
	 */
	if (dz_console_regs != 0) {
		dz_regs = dz_console_regs;
		printf("console, ");
	} else
		dz_regs = vax_map_physmem(va->va_paddr, 1);

	/* 
	 * XXX - This is evil and ugly, but...
	 * due to the nature of how bus_space_* works on VAX, this will
	 * be perfectly good until everything is converted.
	 */
	sc->sc_ioh = dz_regs;
	sc->sc_dr.dr_csr = DZ_VSBUS_CSR;
	sc->sc_dr.dr_rbuf = DZ_VSBUS_RBUF;
	sc->sc_dr.dr_dtr = DZ_VSBUS_DTR;
	sc->sc_dr.dr_break = DZ_VSBUS_BREAK;
	sc->sc_dr.dr_tbuf = DZ_VSBUS_TBUF;
	sc->sc_dr.dr_tcr = DZ_VSBUS_TCR;
	sc->sc_dr.dr_dcd = DZ_VSBUS_DCD;
	sc->sc_dr.dr_ring = DZ_VSBUS_RING;

	sc->sc_type = DZ_DZV;

	/* no modem control bits except on line 2 */
	sc->sc_dsr = (1 << 0) | (1 << 1) | (1 << 3);

	sc->sc_rcvec = va->va_cvec;
	scb_vecalloc(sc->sc_rcvec, dzxint, sc, SCB_ISTACK, &sc->sc_tintrcnt);
	sc->sc_tcvec = va->va_cvec - 4;
	scb_vecalloc(sc->sc_tcvec, dzrint, sc, SCB_ISTACK, &sc->sc_rintrcnt);
	evcount_attach(&sc->sc_rintrcnt, sc->sc_dev.dv_xname, &sc->sc_rcvec);
	evcount_attach(&sc->sc_tintrcnt, sc->sc_dev.dv_xname, &sc->sc_tcvec);

	printf("4 lines");

	dzattach(sc);

	if (dz_can_have_kbd()) {
#if NDZKBD > 0
		extern struct consdev wsdisplay_cons;

		daa.daa_line = 0;
		DZ_WRITE_WORD(sc, dr_rbuf, DZ_LPR_RX_ENABLE |
		    (DZ_LPR_B4800 << 8) | DZ_LPR_8_BIT_CHAR | daa.daa_line);
		daa.daa_flags =
		    (cn_tab == &wsdisplay_cons ? DZKBD_CONSOLE : 0);
		config_found(self, &daa, dz_print);
#endif
#if NDZMS > 0
		daa.daa_line = 1;
		DZ_WRITE_WORD(sc, dr_rbuf, DZ_LPR_RX_ENABLE |
		    (DZ_LPR_B4800 << 8) | DZ_LPR_8_BIT_CHAR | DZ_LPR_PARENB |
		    DZ_LPR_OPAR | daa.daa_line);
		daa.daa_flags = 0;
		config_found(self, &daa, dz_print);
#endif
	}

#if 0
	s = spltty();
	dzrint(sc);
	dzxint(sc);
	splx(s);
#endif
}
@


1.29
log
@Define symbolic constants for the addresses of the vsbus devices on
512KB PROM systems (e.g. KA49), or 256KB PROM systems built after KA49
(e.g. KA5[234]), and use them instead of pouring magic numbers all over the (md)
tree.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.28 2010/09/20 06:33:48 matthew Exp $	*/
@


1.28
log
@Get rid of evcount's support for arranging counters in a tree
hierarchy.  Everything attached to a single root node anyway, so at
best we had a bush.

"i think it is good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.27 2008/08/24 14:52:08 miod Exp $	*/
d82 1
a82 1
		if (cf->cf_loc[0] != 0x25000000)
@


1.27
log
@vsbus machines also have modem control bits on line #2, no need to fake them.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.26 2008/08/18 23:04:28 miod Exp $	*/
d150 2
a151 4
	evcount_attach(&sc->sc_rintrcnt, sc->sc_dev.dv_xname,
	    (void *)&sc->sc_rcvec, &evcount_intr);
	evcount_attach(&sc->sc_tintrcnt, sc->sc_dev.dv_xname,
	    (void *)&sc->sc_tcvec, &evcount_intr);
@


1.26
log
@Shuffle the dz console code (both serial and keyboard) to be more independent
of the console device attachment, and to be able to work on system where there
are more than one dz device of the same type, one of it being the console one.

This also allows a different register layout than the dz@@ibus one to be used
for the dz console device.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.25 2008/08/15 22:44:12 miod Exp $	*/
d143 2
a144 1
	sc->sc_dsr = 0x0f; /* XXX check if VS has modem ctrl bits */
@


1.25
log
@In dzcninit(), do not forget to enable the receiver in addition to the
transmitter. On machines with glass console for which we do not have
a driver yet, and fall back to serial console, the PROM might not have
enabled it.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.24 2008/01/23 16:37:57 jsing Exp $	*/
a33 2


a34 1
#include <sys/proc.h>
a35 4
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/file.h>
#include <sys/conf.h>
a36 3
#include <sys/reboot.h>

#include <dev/cons.h>
a37 1
#include <machine/mtpr.h>
a38 1
#include <machine/uvax.h>
a41 4
#include <machine/nexus.h>
#include <machine/ka420.h>

#include <vax/vax/gencons.h>
d48 2
d53 2
a54 4
static  int     dz_vsbus_match(struct device *, struct cfdata *, void *);
static  void    dz_vsbus_attach(struct device *, struct device *, void *);

static	vaddr_t dz_regs; /* Used for console */
d60 8
a67 12
#define REG(name)     short name; short X##name##X;
static volatile struct ss_dz {/* base address of DZ-controller: 0x200a0000 */
	REG(csr);	/* 00 Csr: control/status register */
	REG(rbuf);	/* 04 Rbuf/Lpr: receive buffer/line param reg. */
	REG(tcr);	/* 08 Tcr: transmit console register */
	REG(tdr);	/* 0C Msr/Tdr: modem status reg/transmit data reg */
	REG(lpr0);	/* 10 Lpr0: */
	REG(lpr1);	/* 14 Lpr0: */
	REG(lpr2);	/* 18 Lpr0: */
	REG(lpr3);	/* 1C Lpr0: */
} *dz;
#undef REG
d69 1
a69 24
cons_decl(dz);
cdev_decl(dz);

int	dz_can_have_kbd(void);

extern int getmajor(void *);	/* conf.c */

#if NDZKBD > 0 || NDZMS > 0
static int
dz_print(void *aux, const char *name)
{
	struct dzkm_attach_args *dz_args = aux;

	if (name != NULL)
		printf(dz_args->daa_line == 0 ? "lkkbd at %s" : "lkms at %s",
		    name);
	else
		printf(" line %d", dz_args->daa_line);

	return (UNCONF);
}
#endif

static int
d76 1
a76 1
	struct ss_dz *dzP;
d86 4
a89 4
	dzP = (struct ss_dz *)va->va_addr;
	i = dzP->tcr;
	dzP->csr = DZ_CSR_MSE|DZ_CSR_TXIE;
	dzP->tcr = 0;
d91 1
a91 1
	dzP->tcr = 1;
d93 1
a93 1
	dzP->tcr = i;
d100 1
a100 1
static void
d110 2
d115 11
a130 6

	if (dz_regs == 0) /* This isn't console */
		dz_regs = vax_map_physmem(va->va_paddr, 1);
	else
		printf("console, ");

d132 8
a139 8
	sc->sc_dr.dr_csr = 0;
	sc->sc_dr.dr_rbuf = 4;
	sc->sc_dr.dr_dtr = 9;
	sc->sc_dr.dr_break = 13;
	sc->sc_dr.dr_tbuf = 12;
	sc->sc_dr.dr_tcr = 8;
	sc->sc_dr.dr_dcd = 13;
	sc->sc_dr.dr_ring = 13;
d146 1
a146 2
	scb_vecalloc(sc->sc_rcvec, dzxint, sc, SCB_ISTACK,
	    &sc->sc_tintrcnt);
d148 1
a148 2
	scb_vecalloc(sc->sc_tcvec, dzrint, sc, SCB_ISTACK,
	    &sc->sc_rintrcnt);
a161 2
		dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) 
		    | DZ_LPR_8_BIT_CHAR;
d163 2
a169 3
		dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) |
		    DZ_LPR_8_BIT_CHAR | DZ_LPR_PARENB | DZ_LPR_OPAR |
		    1 /* line */;
d171 3
a185 208

int
dzcngetc(dev) 
	dev_t dev;
{
	int c = 0, s;
	int mino = minor(dev);
	u_short rbuf;

	s = spltty();
	do {
		while ((dz->csr & DZ_CSR_RX_DONE) == 0)
			; /* Wait for char */
		rbuf = dz->rbuf;
		if (((rbuf >> 8) & 3) != mino)
			continue;
		c = rbuf & 0x7f;
	} while (c == 17 || c == 19);		/* ignore XON/XOFF */
	splx(s);

	if (c == 13)
		c = 10;

	return (c);
}

int
dz_can_have_kbd()
{
	switch (vax_boardtype) {
	case VAX_BTYP_410:
	case VAX_BTYP_420:
	case VAX_BTYP_43:
		if ((vax_confdata & KA420_CFG_MULTU) == 0)
			return (1);
		break;

	case VAX_BTYP_46:
		if ((vax_siedata & 0xff) == VAX_VTYP_46)
			return (1);
		break;
	case VAX_BTYP_48:
		if (((vax_siedata >> 8) & 0xff) == VAX_STYP_48)
			return (1);
		break;

	case VAX_BTYP_49:
		return (1);

	default:
		break;
	}

	return (0);
}

void
dzcnprobe(cndev)
	struct	consdev *cndev;
{
	extern	vaddr_t iospace;
	int diagcons, major;
	paddr_t ioaddr = 0x200a0000;

	if ((major = getmajor(dzopen)) < 0)
		return;

	switch (vax_boardtype) {
	case VAX_BTYP_410:
	case VAX_BTYP_420:
	case VAX_BTYP_43:
		diagcons = (vax_confdata & KA420_CFG_L3CON ? 3 : 0);
		break;

	case VAX_BTYP_46:
	case VAX_BTYP_48:
		diagcons = (vax_confdata & 0x100 ? 3 : 0);
		break;

	case VAX_BTYP_49:
		ioaddr = 0x25000000;
		diagcons = (vax_confdata & 8 ? 3 : 0);
		break;

	case VAX_BTYP_1303:
		ioaddr = 0x25000000;
		diagcons = 3;
		break;

	default:
		return;
	}
	cndev->cn_pri = diagcons != 0 ? CN_HIGHPRI : CN_LOWPRI;
	cndev->cn_dev = makedev(major, dz_can_have_kbd() ? 3 : diagcons);
	dz_regs = iospace;
	dz = (void *)dz_regs;
	ioaccess(iospace, ioaddr, 1);
}

void
dzcninit(cndev)
	struct	consdev *cndev;
{
	dz = (void *)dz_regs;

	dz->csr = 0;    /* Disable scanning until initting is done */
	dz->tcr = (1 << minor(cndev->cn_dev));    /* Turn on xmitter */
	dz->csr = DZ_CSR_MSE; /* Turn scanning back on */
	dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B9600 << 8) |
	    DZ_LPR_8_BIT_CHAR | minor(cndev->cn_dev) /* line */;
}

void
dzcnputc(dev,ch)
	dev_t	dev;
	int	ch;
{
	int timeout = 1<<15;       /* don't hang the machine! */
	int s;
	int mino = minor(dev);
	u_short tcr;

	if (mfpr(PR_MAPEN) == 0)
		return;

	/*
	 * If we are past boot stage, dz* will interrupt,
	 * therefore we block.
	 */
	s = spltty(); 
	tcr = dz->tcr;	/* remember which lines to scan */
	dz->tcr = (1 << mino);

	while ((dz->csr & DZ_CSR_TX_READY) == 0) /* Wait until ready */
		if (--timeout < 0)
			break;
	dz->tdr = ch;                    /* Put the character */
	timeout = 1<<15;
	while ((dz->csr & DZ_CSR_TX_READY) == 0) /* Wait until ready */
		if (--timeout < 0)
			break;

	dz->tcr = tcr;
	splx(s);
}

void 
dzcnpollc(dev, pollflag)
	dev_t dev;
	int pollflag;
{
	static	u_char mask;

	if (pollflag)
		mask = vsbus_setmask(0);
	else
		vsbus_setmask(mask);
}

#if NDZKBD > 0 || NDZMS > 0
int
dzgetc(struct dz_linestate *ls)
{
	int line;
	int s;
	u_short rbuf;

	if (ls != NULL)
		line = ls->dz_line;
	else
		line = 0;	/* keyboard */

	s = spltty();
	for (;;) {
		for(; (dz->csr & DZ_CSR_RX_DONE) == 0;)
			;
		rbuf = dz->rbuf;
		if (((rbuf >> 8) & 3) == line) {
			splx(s);
			return (rbuf & 0xff);
		}
	}
}

void
dzputc(struct dz_linestate *ls, int ch)
{
	int line;
	u_short tcr;
	int s;

	/* if the dz has already been attached, the MI
	   driver will do the transmitting: */
	if (ls && ls->dz_sc) {
		s = spltty();
		line = ls->dz_line;
		putc(ch, &ls->dz_tty->t_outq);
		tcr = dz->tcr;
		if (!(tcr & (1 << line)))
			dz->tcr = tcr | (1 << line);
		dzxint(ls->dz_sc);
		splx(s);
		return;
	}
	/* use dzcnputc to do the transmitting: */
	dzcnputc(makedev(getmajor(dzopen), 0), ch);
}
#endif /* NDZKBD > 0 || NDZMS > 0 */
@


1.24
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.22 2006/08/03 18:45:40 miod Exp $	*/
d332 2
@


1.23
log
@Explicitely mention we are the console device, when applicable.
@
text
@d316 1
a316 1
	cndev->cn_pri = diagcons != 0 ? CN_REMOTE : CN_NORMAL;
@


1.22
log
@Since we will only attempt to configure a keyboard on line 0 on machines
where line 0 is a keyboard connector, which is never used for serial console,
remove an always-true test.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.21 2006/08/01 23:36:51 miod Exp $	*/
d154 2
d164 2
d192 1
a192 1
	printf(": 4 lines");
@


1.21
log
@Avoid a few NULL dereferences, and boot -c works on vax with glass console.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.20 2006/07/30 18:30:51 miod Exp $	*/
d196 6
a201 9
		/* Don't change speed if this is the console */
		if (cn_tab->cn_dev != makedev(getmajor(dzopen), 0)) {
			dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) 
			    | DZ_LPR_8_BIT_CHAR;
			daa.daa_line = 0;
			daa.daa_flags =
			    (cn_tab == &wsdisplay_cons ? DZKBD_CONSOLE : 0);
			config_found(self, &daa, dz_print);
		}
@


1.20
log
@Use DZ_CSR_xxx symbolic constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.19 2006/07/30 09:15:03 miod Exp $	*/
d384 1
a384 1
	int line = ls->dz_line;
d387 5
@


1.19
log
@Allow keyboard attachment on VS 4k/90 as well, spotted by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.18 2006/07/29 17:07:46 miod Exp $	*/
d77 1
a77 1
static volatile struct ss_dz {/* base address of DZ-controller: 0x200A0000 */
d234 1
a234 1
		while ((dz->csr & 0x80) == 0)
d330 1
a330 1
	dz->csr = 0x20; /* Turn scanning back on */
d354 1
a354 1
	while ((dz->csr & 0x8000) == 0) /* Wait until ready */
d359 1
a359 1
	while ((dz->csr & 0x8000) == 0) /* Wait until ready */
d382 1
a382 2
dzgetc(ls)
	struct  dz_linestate *ls;
d401 1
a401 3
dzputc(ls,ch)
	struct	dz_linestate *ls;
	int	ch;
@


1.18
log
@Attach keyboard and mouse on VAXstations. Non-keyboard capable machines are
not affected.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.17 2006/07/29 15:12:44 miod Exp $	*/
d268 3
@


1.17
log
@Better ``no dz console to a keyboard connector'' fix which does not interfere
with the dz console priority.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.16 2006/07/29 14:17:32 miod Exp $	*/
d92 2
a95 1
#if 0
d100 8
a107 15
#if 0
#if NDZKBD > 0 || NDZMS > 0
	struct dz_attach_args *dz_args = aux;
	if (name == NULL) {
		printf(" line %d", dz_args->line);
		if (dz_args->hwflags & DZ_HWFLAG_CONSOLE)
			printf(" (console)");
	}
	return (QUIET);
#else
	if (name)
		printf("lkc at %s", name);
	return (UNCONF);
#endif
#endif
a110 1
#endif /* 0 */
a149 1
#if 0
a152 1
#endif /* 0 */
d176 3
a178 1
	scb_vecalloc(va->va_cvec, dzxint, sc, SCB_ISTACK,
d180 2
a181 1
	scb_vecalloc(va->va_cvec - 4, dzrint, sc, SCB_ISTACK,
a182 1
	sc->sc_rcvec = va->va_cvec;
a184 1
	sc->sc_tcvec = va->va_cvec - 4;
d192 1
a192 1
#if 0
d194 11
a204 7
	/* Don't change speed if this is the console */
	if (cn_tab->cn_dev != makedev(getmajor(dzopen), 0))
		dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) 
		    | DZ_LPR_8_BIT_CHAR;
	daa.daa_line = 0;
	daa.daa_flags = (cn_tab->cn_pri == CN_INTERNAL ? DZKBD_CONSOLE : 0);
	config_found(self, &daa, dz_print);
d207 6
a212 5
	dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) | DZ_LPR_7_BIT_CHAR \
	    | DZ_LPR_PARENB | DZ_LPR_OPAR | 1 /* line */;
	daa.daa_line = 1;
	daa.daa_flags = 0;
	config_found(self, &daa, dz_print);
d214 2
a215 1
#endif /* 0 */
d228 1
a228 1
	int c = 0;
d232 1
d241 1
d249 27
d281 1
a281 1
	int diagcons, major, nokbd = 0;
a291 2
		if ((vax_confdata & KA420_CFG_MULTU) == 0)
			nokbd = 1;
a294 4
		diagcons = (vax_confdata & 0x100 ? 3 : 0);
		if ((vax_siedata & 0xff) == VAX_VTYP_46)
			nokbd = 1;
		break;
a296 2
		if (((vax_siedata >> 8) & 0xff) == VAX_STYP_48)
			nokbd = 1;
d313 1
a313 1
	cndev->cn_dev = makedev(major, nokbd ? 3 : diagcons);
d335 2
a336 2
	register int timeout = 1<<15;       /* don't hang the machine! */
	register int s;
d347 1
a347 1
	s = splhigh(); 
d383 1
d386 1
d391 2
a392 1
		if (((rbuf >> 8) & 3) == line)
d394 1
d403 1
a403 1
	int line = 0; /* = ls->dz_line; */
d411 2
a412 1
		putc(ch, &ls->dz_sc->sc_dz[line].dz_tty->t_outq);
d421 1
a421 1
	dzcnputc(makedev(getmajor(dzopen), line), ch);
@


1.16
log
@Make sure we never attach a dz console to a keyboard port on VAXstations,
regardless of the L3 switch (so that machines with unsupported frame buffers
can work with serial console).
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.15 2006/07/19 20:22:12 miod Exp $	*/
d254 2
a255 2
	int diagcons, major;
	paddr_t ioaddr = 0x200A0000;
d264 3
a266 4
		if (vax_confdata & KA420_CFG_MULTU)
			diagcons = (vax_confdata & KA420_CFG_L3CON ? 3 : 0);
		else
			diagcons = 3;	/* never on the keyboard port */
d270 3
a272 4
		if ((vax_siedata & 0xff) != VAX_VTYP_46)
			diagcons = (vax_confdata & 0x100 ? 3 : 0);
		else
			diagcons = 3;	/* never on the keyboard port */
d275 3
a277 4
		if (((vax_siedata >> 8) & 0xff) != VAX_STYP_48)
			diagcons = (vax_confdata & 0x100 ? 3 : 0);
		else
			diagcons = 3;	/* never on the keyboard port */
d293 2
a294 5
	if (diagcons)
		cndev->cn_pri = CN_REMOTE;
	else
		cndev->cn_pri = CN_NORMAL;
	cndev->cn_dev = makedev(major, diagcons);
@


1.15
log
@Honour L3 switch on VS4k/90, even if we don't support glass console yet;
from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.14 2006/01/17 20:26:16 miod Exp $	*/
d254 1
a254 1
	int diagcons;
d257 3
d264 4
a267 1
		diagcons = (vax_confdata & KA420_CFG_L3CON ? 3 : 0);
d271 5
d277 4
a280 1
		diagcons = (vax_confdata & 0x100 ? 3 : 0);
d300 1
a300 1
	cndev->cn_dev = makedev(getmajor(dzopen), diagcons);
@


1.14
log
@Use angle bracket and no relative paths for all include files which are not
created by config(8); no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.13 2006/01/01 11:59:40 miod Exp $	*/
d55 1
d261 1
a261 1
		diagcons = (vax_confdata & 0x20 ? 3 : 0);
d270 4
d286 1
a286 2
#if 0
	cndev->cn_dev = makedev(DZMAJOR, diagcons);
d288 1
a288 3
#endif
	cndev->cn_dev = makedev(getmajor(dzopen), diagcons);
	(vaddr_t)dz = dz_regs = iospace;
@


1.13
log
@Let cons_init() and cons_init_bell() initialize the whole consdev structure,
thus removing the need for drivers to initialize cn_pri to CN_DEAD when
hardware probe fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.12 2004/07/07 23:10:46 deraadt Exp $	*/
d56 1
a56 1
#include <machine/../vax/gencons.h>
d58 2
a59 2
#include "../qbus/dzreg.h"
#include "../qbus/dzvar.h"
d61 1
a61 1
#include "../dec/dzkbdvar.h"
@


1.12
log
@new-style interrupt counters.  based on initial work by hugh.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.11 2002/03/14 03:16:02 millert Exp $	*/
a274 1
		cndev->cn_pri = CN_DEAD;
@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.10 2002/03/14 01:26:49 millert Exp $	*/
d102 1
a102 1
		printf (" line %d", dz_args->line);
d104 1
a104 1
			printf (" (console)");
d109 1
a109 1
		printf ("lkc at %s", name);
d188 6
d195 1
a195 1
	printf("\n%s: 4 lines", self->dv_xname);
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.9 2001/10/01 13:05:07 hugh Exp $	*/
d289 1
a289 1
	dz = (void*)dz_regs;
@


1.9
log
@There are anecdotal reports of firmware being writable on some Cougar
machines, so don't poke blindly into the middle of its address space
if we can tell dz is not going to be there by other means.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.8 2001/08/26 18:25:06 hugh Exp $	*/
d91 1
a91 1
extern int getmajor __P((void *));	/* conf.c */
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.9 2001/10/01 13:05:07 hugh Exp $	*/
d91 1
a91 1
extern int getmajor(void *);	/* conf.c */
d289 1
a289 1
	dz = (void *)dz_regs;
@


1.8
log
@The lkkbd and lkms drivers are causing problems on several machines,
so inhibit their attachment for the time being.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.7 2001/08/25 13:33:37 hugh Exp $	*/
d128 3
a130 2
#if VAX53
	if (vax_boardtype == VAX_BTYP_1303)
d132 1
a132 1
			return 0; /* Ugly */
@


1.7
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.6 2001/06/15 22:45:34 miod Exp $	*/
d93 1
d116 1
d155 1
d159 1
d192 1
d209 1
@


1.6
log
@Compile kernel with -Wall, and fix a few issues for this to work.
ok hugh@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.5 2001/05/16 22:15:19 hugh Exp $	*/
d17 2
a18 2
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
d54 1
d66 2
a67 2
static  int     dz_vsbus_match __P((struct device *, struct cfdata *, void *));
static  void    dz_vsbus_attach __P((struct device *, struct device *, void *));
d179 5
a183 2
	scb_vecalloc(va->va_cvec, dzxint, sc, SCB_ISTACK);
	scb_vecalloc(va->va_cvec - 4, dzrint, sc, SCB_ISTACK);
@


1.5
log
@Blind merge of wscons support from NetBSD/vax. Perhaps someone with a
supported framebuffer (simple monochrome) can finish this off.
If anyone has run across docs for LCG or SPGFX, please get in touch.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.4 2001/02/11 06:34:38 hugh Exp $	*/
d89 2
@


1.4
log
@Pick up a NetBSD hack to attach Cheetah to vsbus as well as ibus.
High kludge factor, but the payoff is vsbus scsi for free.
Most of the work is by Michael Kukat and ragge, with a few other
synchronisations thrown in.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.3 2001/01/30 17:05:02 hugh Exp $	*/
d60 4
a63 1
#include "lkc.h"
a66 1
static	int	dz_print __P((void *, const char *));
d88 1
d90 3
a92 4
int
dz_print(aux, name)
	void *aux;
	const char *name;
d94 10
d107 3
d111 1
d148 1
a148 1
	struct  dz_softc *sc = (void *)self;
d150 3
d182 22
a203 4
	if (((vax_confdata & 0x80) == 0) ||/* workstation, have lkc */
	    (vax_boardtype == VAX_BTYP_48))
		if (cn_tab->cn_pri > CN_NORMAL) /* Passed cnsl detect */
			config_found(self, 0, dz_print);
a228 2
#define	DZMAJOR	1

d263 1
d266 3
d330 4
a333 6
#if NLKC
cons_decl(lkc);

void
lkccninit(cndev)
	struct	consdev *cndev;
d335 2
a336 1
	dz = (void*)dz_regs;
d338 7
a344 4
	dz->csr = 0;    /* Disable scanning until initting is done */
	dz->tcr = 1;    /* Turn off all but line 0's xmitter */
	dz->rbuf = 0x1c18; /* XXX */
	dz->csr = 0x20; /* Turn scanning back on */
d347 4
a350 3
int
lkccngetc(dev) 
	dev_t dev;
d352 3
a354 4
	int lkc_decode(int);
	int c;
#if 0
	u_char mask;
d356 14
a369 18
	
	mask = vsbus_setmask(0);	/* save old state */
#endif

loop:
	while ((dz->csr & 0x80) == 0)
		; /* Wait for char */

	c = lkc_decode(dz->rbuf & 255);
	if (c < 1)
		goto loop;

#if 0
	vsbus_clrintr(0x80); /* XXX */
	vsbus_setmask(mask);
#endif

	return (c);
d371 1
a371 1
#endif
@


1.4.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.4 2001/02/11 06:34:38 hugh Exp $	*/
@


1.4.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.4.4.1 2001/05/14 21:39:17 niklas Exp $	*/
d60 1
a60 4
#include "../dec/dzkbdvar.h"

#include "dzkbd.h"
#include "dzms.h"
d64 1
a85 1
cdev_decl(dz);
d87 4
a90 5
extern int getmajor __P((void *));	/* conf.c */

#if NDZKBD > 0 || NDZMS > 0
static int
dz_print(void *aux, const char *name)
a91 10
#if 0
#if NDZKBD > 0 || NDZMS > 0
	struct dz_attach_args *dz_args = aux;
	if (name == NULL) {
		printf (" line %d", dz_args->line);
		if (dz_args->hwflags & DZ_HWFLAG_CONSOLE)
			printf (" (console)");
	}
	return (QUIET);
#else
a94 3
#endif
#endif
	return (UNCONF);
a95 1
#endif
d132 1
a132 1
	struct dz_softc *sc = (void *)self;
a133 3
#if NDZKBD > 0 || NDZMS > 0
	struct dzkm_attach_args daa;
#endif
d163 4
a166 22
#if NDZKBD > 0
	/* Don't change speed if this is the console */
	if (cn_tab->cn_dev != makedev(getmajor(dzopen), 0))
		dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) 
		    | DZ_LPR_8_BIT_CHAR;
	daa.daa_line = 0;
	daa.daa_flags = (cn_tab->cn_pri == CN_INTERNAL ? DZKBD_CONSOLE : 0);
	config_found(self, &daa, dz_print);
#endif
#if NDZMS > 0
	dz->rbuf = DZ_LPR_RX_ENABLE | (DZ_LPR_B4800 << 8) | DZ_LPR_7_BIT_CHAR \
	    | DZ_LPR_PARENB | DZ_LPR_OPAR | 1 /* line */;
	daa.daa_line = 1;
	daa.daa_flags = 0;
	config_found(self, &daa, dz_print);
#endif
#if 0
	s = spltty();
	dzrint(sc);
	dzxint(sc);
	splx(s);
#endif
d192 2
a227 1
#if 0
a229 3
#endif
	cndev->cn_dev = makedev(getmajor(dzopen), diagcons);
	(vaddr_t)dz = dz_regs = iospace;
d291 6
a296 4
#if NDZKBD > 0 || NDZMS > 0
int
dzgetc(ls)
	struct  dz_linestate *ls;
d298 1
a298 2
	int line = ls->dz_line;
	u_short rbuf;
d300 4
a303 7
	for (;;) {
		for(; (dz->csr & DZ_CSR_RX_DONE) == 0;)
			;
		rbuf = dz->rbuf;
		if (((rbuf >> 8) & 3) == line)
			return (rbuf & 0xff);
	}
d306 3
a308 4
void
dzputc(ls,ch)
	struct	dz_linestate *ls;
	int	ch;
d310 21
a330 3
	int line = 0; /* = ls->dz_line; */
	u_short tcr;
	int s;
d332 1
a332 14
	/* if the dz has already been attached, the MI
	   driver will do the transmitting: */
	if (ls && ls->dz_sc) {
		s = spltty();
		putc(ch, &ls->dz_sc->sc_dz[line].dz_tty->t_outq);
		tcr = dz->tcr;
		if (!(tcr & (1 << line)))
			dz->tcr = tcr | (1 << line);
		dzxint(ls->dz_sc);
		splx(s);
		return;
	}
	/* use dzcnputc to do the transmitting: */
	dzcnputc(makedev(getmajor(dzopen), line), ch);
d334 1
a334 1
#endif /* NDZKBD > 0 || NDZMS > 0 */
@


1.4.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.4.4.2 2001/07/04 10:24:50 niklas Exp $	*/
d17 2
a18 2
 *     This product includes software developed at Ludd, University of 
 *     Lule}, Sweden and its contributors.
a53 1
#include <machine/nexus.h>
d65 2
a66 2
static  int     dz_vsbus_match(struct device *, struct cfdata *, void *);
static  void    dz_vsbus_attach(struct device *, struct device *, void *);
a91 1
#if 0
a113 1
#endif /* 0 */
d125 2
a126 3
#if VAX53 || VAX49
	if (vax_boardtype == VAX_BTYP_49 ||
	    vax_boardtype == VAX_BTYP_1303)
d128 1
a128 1
			return 0; /* don't probe unnecessarily */
a151 1
#if 0
a154 1
#endif /* 0 */
d178 2
a179 5
	scb_vecalloc(va->va_cvec, dzxint, sc, SCB_ISTACK,
	    &sc->sc_tintrcnt);
	scb_vecalloc(va->va_cvec - 4, dzrint, sc, SCB_ISTACK,
	    &sc->sc_rintrcnt);

a183 1
#if 0
a199 1
#endif /* 0 */
@


1.4.4.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d91 1
a91 1
extern int getmajor(void *);	/* conf.c */
d289 1
a289 1
	dz = (void *)dz_regs;
@


1.3
log
@Get DZ on the Cheetah working properly. (argh)
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.2 2001/01/28 01:20:00 hugh Exp $	*/
a51 1
#include <machine/ibus.h>
a63 2
static	int	dz_ibus_match __P((struct device *, struct cfdata *, void *));
static	void	dz_ibus_attach __P((struct device *, struct device *, void *));
a71 4
struct cfattach dz_ibus_ca = {
	sizeof(struct dz_softc), (cfmatch_t)dz_ibus_match, dz_ibus_attach
};

d106 6
a111 1
	unsigned int n;
d120 1
a120 5
	dzP->csr = DZ_CSR_MSE;
	DELAY(1000);
	dzP->tcr = 0;

	va->va_ivec = dzxint;
a132 1
	struct vsbus_softc *vsc = (struct vsbus_softc *)parent;
d140 4
a155 3
	vsc->sc_mask |= 1 << (va->va_maskno);
	vsc->sc_mask |= (1 << (va->va_maskno-1));

a168 46
static void
dz_ibus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct dz_softc *sc = (struct dz_softc *)self;

	sc->sc_ioh = (vaddr_t)dz_regs;
	sc->sc_dr.dr_csr = 0;		/* correct  */
	sc->sc_dr.dr_rbuf = 4;		/* correct  */
	sc->sc_dr.dr_dtr = 9;		/* unknown  */
	sc->sc_dr.dr_break = 13;	/* untested */
	sc->sc_dr.dr_tbuf = 12;		/* correct  */
	sc->sc_dr.dr_tcr = 8;		/* correct  */
	sc->sc_dr.dr_dcd = 13;		/* works    */
	sc->sc_dr.dr_ring = 13;		/* untested */

	sc->sc_type = DZ_DC;

	sc->sc_dsr = 0x0f; /* XXX check if VS has modem ctrl bits */

	scb_vecalloc(0x154, dzxint, sc, SCB_ISTACK);
	scb_vecalloc(0x150, dzrint, sc, SCB_ISTACK);

	dzattach(sc);

	ibus_ormask(0x8);
	DELAY(1000);

	config_found(self, 0, dz_print);
}

static int
dz_ibus_match(parent, cf, aux)
	struct device *parent;
	struct cfdata *cf;
	void *aux;
{
	/* This function assumes all btype 1303 machines have a dz. */  

	if (vax_boardtype == VAX_BTYP_1303)
		return (1);

	return (0);
}

d285 4
a288 13
	switch(vax_boardtype) {
	case VAX_BTYP_1303:
		if(pollflag)
			mask = ibus_setmask(0);
		else
			ibus_setmask(mask);
		break;
	default:
		if (pollflag)
			mask = vsbus_setmask(0);
		else
			vsbus_setmask(mask);
	}
@


1.2
log
@Basic support for boardtype 1303 (Cheetah) machines.
Layout of the DZ's registers (among other things) determined
by a massive amount of trial and error.
Work by Brandon and me.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_ibus.c,v 1.1 2000/04/27 02:34:50 bjc Exp $	*/
d189 1
a189 1
	sc->sc_dr.dr_dcd = 11;		/* works    */
d193 3
@


1.1
log
@forgot these, oops
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
d65 2
d75 4
d175 43
d264 1
d334 13
a346 4
	if (pollflag)
		mask = vsbus_setmask(0);
	else
		vsbus_setmask(mask);
@

