head	1.9;
access;
symbols
	OPENBSD_5_9:1.8.0.28
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.30
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.22
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.26
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.24
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.20
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.8;
commitid	OSDG2O3Cgeifnf1W;

1.8
date	2008.08.22.21.05.07;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.27.16.52.15;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.31.18.50.13;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.29.17.06.25;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.17.20.26.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.16.22.15.17;	author hugh;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;

1.1.2.1
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: dzms.c,v 1.8 2008/08/22 21:05:07 miod Exp $	*/
/*	$NetBSD: dzms.c,v 1.1 2000/12/02 17:03:55 ragge Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ms.c	8.1 (Berkeley) 6/11/93
 */

/*
 * VSXXX mouse or tablet, attached to line 1 of the DZ*
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/syslog.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/tty.h>

#include <machine/bus.h>

#include <vax/qbus/dzreg.h>
#include <vax/qbus/dzvar.h>

#include <vax/dec/dzkbdvar.h>
#include <vax/dec/vsmsvar.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsmousevar.h>

struct dzms_softc {		/* driver status information */
	struct lkms_softc	sc_base;
	struct dz_linestate *dzms_ls;
};

int	dzms_match(struct device *, struct cfdata *, void *);
void	dzms_attach(struct device *, struct device *, void *);

struct cfattach dzms_ca = {
	sizeof(struct dzms_softc), (cfmatch_t)dzms_match, dzms_attach,
};

int	dzms_enable(void *);
void	dzms_disable(void *);

const struct wsmouse_accessops dzms_accessops = {
	dzms_enable,
	lkms_ioctl,
	dzms_disable,
};

int
dzms_match(struct device *parent, struct cfdata *cf, void *aux)
{
	struct dzkm_attach_args *daa = aux;

#define DZCF_LINE 0
#define DZCF_LINE_DEFAULT 1

	/* Exact match is better than wildcard. */
	if (cf->cf_loc[DZCF_LINE] == daa->daa_line)
		return 2;

	/* This driver accepts wildcard. */
	if (cf->cf_loc[DZCF_LINE] == DZCF_LINE_DEFAULT)
		return 1;

	return 0;
}

void
dzms_attach(struct device *parent, struct device *self, void *aux)
{
	struct dz_softc *dz = (void *)parent;
	struct dzms_softc *dzms = (void *)self;
	struct lkms_softc *sc = (void *)self;
	struct dzkm_attach_args *daa = aux;
	struct dz_linestate *ls;
	struct wsmousedev_attach_args a;

	dz->sc_dz[daa->daa_line].dz_catch = lkms_input;
	dz->sc_dz[daa->daa_line].dz_private = dzms;
	ls = &dz->sc_dz[daa->daa_line];
	dzms->dzms_ls = ls;

	printf("\n");

	a.accessops = &dzms_accessops;
	a.accesscookie = dzms;

	sc->sc_flags = 0;
	sc->sc_wsmousedev = config_found(self, &a, wsmousedevprint);
}

int
dzms_enable(void *v)
{
	struct dzms_softc *dzms = v;
	struct lkms_softc *sc = v;

	if (ISSET(sc->sc_flags, MS_ENABLED))
		return EBUSY;

	SET(sc->sc_flags, MS_SELFTEST);
	dzputc(dzms->dzms_ls, VS_SELF_TEST);
	/* selftest is supposed to complete within 500ms */
	(void)tsleep(&sc->sc_flags, TTIPRI, "dzmsopen", hz / 2);
	if (ISSET(sc->sc_flags, MS_SELFTEST)) {
		CLR(sc->sc_flags, MS_SELFTEST);
		return ENXIO;
	}
	DELAY(150);
	dzputc(dzms->dzms_ls, VS_INCREMENTAL);
	SET(sc->sc_flags, MS_ENABLED);
	return 0;
}

void
dzms_disable(void *v)
{
	struct lkms_softc *sc = v;

	CLR(sc->sc_flags, MS_ENABLED);
}
@


1.8
log
@Let lkms(4) support VSXXX-AB tablets in addition to the mice it already
supports, based on appendix C and D of the VCB02 (qdss) technical manual.

Also parse the selftest results and report device errors.

Not tested on actual tablet due to the lack of any; mouse operation is not
disturbed.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.7 2006/08/27 16:52:15 miod Exp $	*/
@


1.7
log
@Extract the device-independent parts of dzms, to let lkms@@non-dz exist.
Don't forget to rerun config(8)!
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.6 2006/07/31 18:50:13 miod Exp $	*/
d45 1
a45 1
 * VSXXX mice attached to line 1 of the DZ*
d128 1
a128 2
	sc->sc_enabled = 0;
	sc->sc_selftest = 0;
d138 1
a138 1
	if (sc->sc_enabled)
d141 6
a146 5
	sc->sc_selftest = 4;	/* wait for 4 byte reply upto 1/2 sec */
	dzputc(dzms->dzms_ls, MOUSE_SELF_TEST);
	(void)tsleep(&sc->sc_enabled, TTIPRI, "dzmsopen", hz / 2);
	if (sc->sc_selftest != 0) {
		sc->sc_selftest = 0;
d150 2
a151 3
	dzputc(dzms->dzms_ls, MOUSE_INCREMENTAL);
	sc->sc_enabled = 1;
	sc->inputstate = 0;
d160 1
a160 1
	sc->sc_enabled = 0;
@


1.6
log
@Move the relevant mouse defines from lk201.h to dzms.c and get rid of it;
it is too confusing to keep lk201.h and lk201reg.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.5 2006/07/29 17:06:25 miod Exp $	*/
d63 1
a67 26
/*
 * Command characters for the mouse.
 */
#define MOUSE_SELF_TEST		'T'
#define MOUSE_INCREMENTAL	'R'

/*
 * Mouse output bits.
 *
 *     	MOUSE_START_FRAME	Start of report frame bit.
 *	MOUSE_X_SIGN		Sign bit for X.
 *	MOUSE_Y_SIGN		Sign bit for Y.
 *	MOUSE_X_OFFSET		X offset to start cursor at.
 *	MOUSE_Y_OFFSET		Y offset to start cursor at.
 */
#define MOUSE_START_FRAME	0x80
#define MOUSE_X_SIGN		0x10
#define MOUSE_Y_SIGN		0x08

/*
 * Definitions for mouse buttons
 */
#define RIGHT_BUTTON		0x01
#define MIDDLE_BUTTON		0x02
#define LEFT_BUTTON		0x04

d69 2
a70 11
	struct	device dzms_dev;	/* required first: base device */
	struct	dz_linestate *dzms_ls;

	int sc_enabled;		/* input enabled? */
	int sc_selftest;

	int inputstate;
	u_int buttons;
	int dx, dy;

	struct device *sc_wsmousedev;
a79 4
struct	cfdriver lkms_cd = {
	NULL, "lkms", DV_DULL
};

a80 1
int	dzms_ioctl(void *, u_long, caddr_t, int, struct proc *);
d85 1
a85 1
	dzms_ioctl,
a88 2
int	dzms_input(void *, int);

d113 1
d118 1
a118 1
	dz->sc_dz[daa->daa_line].dz_catch = dzms_input;
d128 3
a130 3
	dzms->sc_enabled = 0;
	dzms->sc_selftest = 0;
	dzms->sc_wsmousedev = config_found(self, &a, wsmousedevprint);
d136 2
a137 1
	struct dzms_softc *sc = v;
d143 2
a144 2
	dzputc(sc->dzms_ls, MOUSE_SELF_TEST);
	(void)tsleep(dzms_enable, TTIPRI, "dzmsopen", hz / 2);
d150 1
a150 1
	dzputc(sc->dzms_ls, MOUSE_INCREMENTAL);
d159 1
a159 1
	struct dzms_softc *sc = v;
a161 68
}

int
dzms_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
#if 0
	struct dzms_softc *sc = v;
#endif

	switch (cmd) {
	case WSMOUSEIO_GTYPE:
		*(int *)data = WSMOUSE_TYPE_VSXXX;
		return 0;
	}

	return -1;
}

int
dzms_input(void *vsc, int data)
{
	struct dzms_softc *sc = vsc;

	if (!sc->sc_enabled) {
		if (sc->sc_selftest > 0) {
			sc->sc_selftest--;
			if (sc->sc_selftest == 0)
				wakeup(dzms_enable);
		}
		return (1);
	}

#define WSMS_BUTTON1    0x01
#define WSMS_BUTTON2    0x02
#define WSMS_BUTTON3    0x04

	if ((data & MOUSE_START_FRAME) != 0)
		sc->inputstate = 1;
	else
		sc->inputstate++;

	if (sc->inputstate == 1) {
		sc->buttons = 0;
		if ((data & LEFT_BUTTON) != 0)
			sc->buttons |= WSMS_BUTTON1;
		if ((data & MIDDLE_BUTTON) != 0)
			sc->buttons |= WSMS_BUTTON2;
		if ((data & RIGHT_BUTTON) != 0)
			sc->buttons |= WSMS_BUTTON3;
	    
		sc->dx = data & MOUSE_X_SIGN;
		sc->dy = data & MOUSE_Y_SIGN;
	} else if (sc->inputstate == 2) {
		if (sc->dx == 0)
			sc->dx = -data;
		else
			sc->dx = data;
	} else if (sc->inputstate == 3) {
		sc->inputstate = 0;
		if (sc->dy == 0)
			sc->dy = -data;
		else
			sc->dy = data;
		wsmouse_input(sc->sc_wsmousedev, sc->buttons,
		    sc->dx, sc->dy, 0, WSMOUSE_INPUT_DELTA);
	}

	return (1);
@


1.5
log
@Sync dz and lk{kbd,ms} code with NetBSD, this allows keyboards to work when
initialized by the PROM.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.4 2006/01/17 20:26:16 miod Exp $	*/
a62 1
#include <vax/dec/lk201.h>
d67 26
d107 2
a108 3
static int  dzms_match(struct device *, struct cfdata *, void *);
static void dzms_attach(struct device *, struct device *, void *);
static int dzms_input(void *, int);
d118 3
a120 3
static int  dzms_enable(void *);
static int  dzms_ioctl(void *, u_long, caddr_t, int, struct proc *);
static void dzms_disable(void *);
d128 4
a131 5
static int
dzms_match(parent, cf, aux)
	struct device *parent;
	struct cfdata *cf;
	void *aux;
d136 1
a136 1
#define DZCF_LINE_DEFAULT 0
d149 2
a150 4
static void
dzms_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d173 2
a174 3
static int
dzms_enable(v)
	void *v;
d195 2
a196 3
static void
dzms_disable(v)
	void *v;
d203 2
a204 7
static int
dzms_ioctl(v, cmd, data, flag, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d206 7
a212 2
	if (cmd == WSMOUSEIO_GTYPE) {
		*(u_int *)data = WSMOUSE_TYPE_VSXXX;
d215 1
d219 2
a220 4
static int
dzms_input(vsc, data)
	void *vsc;
	int data;
d230 1
a230 1
		return(1);
d268 1
a268 1
	return(1);
a269 1

@


1.4
log
@Use angle bracket and no relative paths for all include files which are not
created by config(8); no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.3 2003/06/02 23:27:57 millert Exp $	*/
d53 3
d73 1
a73 1
	int self_test;
d77 1
a77 2
	signed char dx;
	signed char dy;
d148 1
a148 1
	dzms->self_test = 0;
d161 1
a161 2
	/* XXX mice presence test should be done in match/attach context XXX */
	sc->self_test = 1;
d163 4
a166 7
	DELAY(100000);
	if (sc->self_test < 0) {
		sc->self_test = 0;
		return EBUSY;
	} else if (sc->self_test == 5) {  
		sc->self_test = 0;
		sc->sc_enabled = 1;
d168 3
a171 3

	dzputc(sc->dzms_ls, MOUSE_INCREMENTAL);

a205 1
	/* XXX mice presence test should be done in match/attach context XXX */
d207 4
a210 13
		if (sc->self_test > 0) {
			if (data < 0) {
				printf("Timeout on 1st byte of mouse self-test report\n");
				sc->self_test = -1;
			} else {
				sc->self_test++;
			}
		}
		if (sc->self_test == 3) {
			if ((data & 0x0f) != 0x2) {
				printf("We don't have a mouse!!!\n");
				sc->self_test = -1;
			}
a211 1
		/* Interrupts are not expected.  Discard the byte. */
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.2 2002/03/14 01:26:47 millert Exp $	*/
d56 2
a57 2
#include "../qbus/dzreg.h"
#include "../qbus/dzvar.h"
d59 2
a60 2
#include "../dec/dzkbdvar.h"
#include "../dec/lk201.h"
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.1 2001/05/16 22:15:17 hugh Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@Blind merge of wscons support from NetBSD/vax. Perhaps someone with a
supported framebuffer (simple monochrome) can finish this off.
If anyone has run across docs for LCG or SPGFX, please get in touch.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d84 3
a86 3
static int  dzms_match __P((struct device *, struct cfdata *, void *));
static void dzms_attach __P((struct device *, struct device *, void *));
static int dzms_input __P((void *, int));
d96 3
a98 3
static int  dzms_enable __P((void *));
static int  dzms_ioctl __P((void *, u_long, caddr_t, int, struct proc *));
static void dzms_disable __P((void *));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.1 2001/05/16 22:15:17 hugh Exp $	*/
d84 3
a86 3
static int  dzms_match(struct device *, struct cfdata *, void *);
static void dzms_attach(struct device *, struct device *, void *);
static int dzms_input(void *, int);
d96 3
a98 3
static int  dzms_enable(void *);
static int  dzms_ioctl(void *, u_long, caddr_t, int, struct proc *);
static void dzms_disable(void *);
@


1.1.2.1
log
@Merge in -current from about a week ago
@
text
@d84 3
a86 3
static int  dzms_match(struct device *, struct cfdata *, void *);
static void dzms_attach(struct device *, struct device *, void *);
static int dzms_input(void *, int);
d96 3
a98 3
static int  dzms_enable(void *);
static int  dzms_ioctl(void *, u_long, caddr_t, int, struct proc *);
static void dzms_disable(void *);
@


1.1.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dzms.c,v 1.1.2.1 2002/03/28 11:26:46 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


