head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.38
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.40
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.32
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.36
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.34
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.30
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.28
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.26
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.24
	OPENBSD_5_0:1.10.0.22
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.20
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.22
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.20
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.18
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.16
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.14
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.12
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.10
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.10;
commitid	OSDG2O3Cgeifnf1W;

1.10
date	2006.08.27.16.50.43;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.05.22.05.55;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.31.21.57.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.31.18.50.48;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.31.06.47.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.30.18.35.10;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.30.18.32.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.29.17.06.25;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.17.20.26.16;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.16.22.15.17;	author hugh;	state Exp;
branches;
next	;


desc
@@


1.11
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: lk201_ws.c,v 1.10 2006/08/27 16:50:43 miod Exp $	*/
/* $NetBSD: lk201_ws.c,v 1.2 1998/10/22 17:55:20 drochner Exp $ */

/*
 * Copyright (c) 1998
 *	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project
 *	by Matthias Drochner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/tty.h>
#include <sys/timeout.h>

#include <dev/wscons/wsconsio.h>

#include <vax/dec/lk201reg.h>
#include <vax/dec/lk201var.h>
#include <vax/dec/wskbdmap_lk201.h> /* for {MIN,MAX}_LK201_KEY */

struct	cfdriver lkkbd_cd = {
	NULL, "lkkbd", DV_DULL
};

void	lk201_identify(void *);

static const char *lkkbd_descr[] = {
	"no keyboard",
	"LK-201 keyboard",
	"LK-401 keyboard"
};

#define	send(lks, c) ((*((lks)->attmt.sendchar))((lks)->attmt.cookie, c))

void
lk201_init(struct lk201_state *lks)
{
	int i;

	lks->waitack = 0;

	send(lks, LK_LED_ENABLE);
	send(lks, LK_LED_ALL);

	/*
	 * set all keys to updown mode; autorepeat is
	 * done by wskbd software
	 */
	for (i = 1; i <= 14; i++)
		send(lks, LK_CMD_MODE(LK_UPDOWN, i));

	send(lks, LK_CL_DISABLE);
	lks->kcvol = 0;

	lks->bellvol = -1; /* not yet set */

	for (i = 0; i < LK_KLL; i++)
		lks->down_keys_list[i] = -1;
	send(lks, LK_KBD_ENABLE);

	send(lks, LK_LED_DISABLE);
	send(lks, LK_LED_ALL);
	lks->leds_state = 0;

	/*
	 * Note that, when attaching lkkbd initially, this timeout will
	 * be scheduled but will not run until interrupts are enabled.
	 * This is not a problem, since lk201_identify() relies upon
	 * interrupts being enabled.
	 */
	timeout_set(&lks->probetmo, lk201_identify, lks);
	timeout_add(&lks->probetmo, 0);
}

void
lk201_identify(void *v)
{
	struct lk201_state *lks = v;
	int i;

	/*
	 * Swallow all the keyboard acknowledges from lk201_init().
	 * There should be 14 of them - one per LK_CMD_MODE command.
	 */
	for(;;) {
		lks->waitack = 1;
		for (i = 100; i != 0; i--) {
			DELAY(1000);
			if (lks->waitack == 0)
				break;
		}
		if (i == 0)
			break;
	}

	/*
	 * Try to set the keyboard in LK-401 mode.
	 * If we receive an error, this is an LK-201 keyboard.
	 */
	lks->waitack = 1;
	send(lks, LK_ENABLE_401);
	for (i = 100; i != 0; i--) {
		DELAY(1000);
		if (lks->waitack == 0)
			break;
	}
	if (lks->waitack != 0)
		lks->kbdtype = KBD_NONE;
	else {
		if (lks->ackdata == LK_INPUT_ERROR)
			lks->kbdtype = KBD_LK201;
		else
			lks->kbdtype = KBD_LK401;
	}
	lks->waitack = 0;

	printf("%s: %s\n", lks->device->dv_xname, lkkbd_descr[lks->kbdtype]);
}

int
lk201_decode(struct lk201_state *lks, int active, int wantmulti, int datain,
    u_int *type, int *dataout)
{
	int i, freeslot;

	if (lks->waitack != 0) {
		lks->ackdata = datain;
		lks->waitack = 0;
		return (LKD_NODATA);
	}

	switch (datain) {
	case LK_POWER_UP:
#ifdef DEBUG
		printf("lk201_decode: powerup detected\n");
#endif
		lk201_init(lks);
		return (LKD_NODATA);
	case LK_KDOWN_ERROR:
	case LK_POWER_ERROR:
	case LK_OUTPUT_ERROR:
	case LK_INPUT_ERROR:
		printf("lk201_decode: error %x\n", datain);
		/* FALLTHROUGH */
	case LK_KEY_REPEAT: /* autorepeat handled by wskbd */
	case LK_MODE_CHANGE: /* ignore silently */
		return (LKD_NODATA);
	}

	if (active == 0)
		return (LKD_NODATA);	/* no need to decode */

	if (datain == LK_KEY_UP) {
		if (wantmulti) {
			for (i = 0; i < LK_KLL; i++)
				if (lks->down_keys_list[i] != -1) {
					*type = WSCONS_EVENT_KEY_UP;
					*dataout = lks->down_keys_list[i] -
					    MIN_LK201_KEY;
					lks->down_keys_list[i] = -1;
					return (LKD_MORE);
				}
			return (LKD_NODATA);
		} else {
			for (i = 0; i < LK_KLL; i++)
				lks->down_keys_list[i] = -1;
			*type = WSCONS_EVENT_ALL_KEYS_UP;
			return (LKD_COMPLETE);
		}
	} else if (datain < MIN_LK201_KEY || datain > MAX_LK201_KEY) {
#ifdef DEBUG
		/* this can happen while hotplugging the keyboard */
		printf("lk201_decode: %x\n", datain);
#endif
		return (LKD_NODATA);
	}

	/*
	 * The LK-201 keyboard has a compose key (to the left of the spacebar),
	 * but no alt/meta key at all. The LK-401 keyboard fixes this and has
	 * two compose keys and two alt keys.
	 *
	 * If the keyboard is an LK-201, translate the left compose key
	 * scancode to a specific key code, which will map as a left alt key,
	 * and compose key when shifted), so that the user can have both
	 * an alt and a compose key available.
	 */
	if (lks->kbdtype == KBD_LK201 && datain == 177)
		datain = 252;

	*dataout = datain - MIN_LK201_KEY;

	freeslot = -1;
	for (i = 0; i < LK_KLL; i++) {
		if (lks->down_keys_list[i] == datain) {
			*type = WSCONS_EVENT_KEY_UP;
			lks->down_keys_list[i] = -1;
			return (LKD_COMPLETE);
		}
		if (lks->down_keys_list[i] == -1 && freeslot == -1)
			freeslot = i;
	}

	if (freeslot == -1) {
		printf("lk201_decode: down(%d) no free slot\n", datain);
		return (LKD_NODATA);
	}

	*type = WSCONS_EVENT_KEY_DOWN;
	lks->down_keys_list[freeslot] = datain;
	return (LKD_COMPLETE);
}

void
lk201_bell(struct lk201_state *lks, struct wskbd_bell_data *bell)
{
	unsigned int vol;

	if (bell->which & WSKBD_BELL_DOVOLUME) {
		vol = 8 - bell->volume * 8 / 100;
		if (vol > 7)
			vol = 7;
	} else
		vol = 3;

	if (vol != lks->bellvol) {
		send(lks, LK_BELL_ENABLE);
		send(lks, LK_PARAM_VOLUME(vol));
		lks->bellvol = vol;
	}
	send(lks, LK_RING_BELL);
}

int
lk201_get_leds(struct lk201_state *lks)
{
	return (lks->leds_state);
}

int
lk201_get_type(struct lk201_state *lks)
{
	/*
	 * Note that we report LK201 even if no keyboard is
	 * plugged to avoid confusing wsconsctl.
	 */
	if (lks->kbdtype == KBD_LK401)
		return (WSKBD_TYPE_LK401);
	else
		return (WSKBD_TYPE_LK201);
}

void
lk201_set_keyclick(struct lk201_state *lks, int vol)
{
	unsigned int newvol;

	if (vol == 0)
		send(lks, LK_CL_DISABLE);
	else {
		newvol = 8 - vol * 8 / 100;
		if (newvol > 7)
			newvol = 7;

		send(lks, LK_CL_ENABLE);
		send(lks, LK_PARAM_VOLUME(newvol));
	}

	lks->kcvol = vol;
}

void
lk201_set_leds(struct lk201_state *lks, int leds)
{
	int newleds;

	newleds = 0;
	if (leds & WSKBD_LED_SCROLL)
		newleds |= LK_LED_WAIT;
	if (leds & WSKBD_LED_CAPS)
		newleds |= LK_LED_LOCK;

	send(lks, LK_LED_DISABLE);
	send(lks, (0x80 | (~newleds & 0x0f)));

	send(lks, LK_LED_ENABLE);
	send(lks, (0x80 | (newleds & 0x0f)));

	lks->leds_state = leds;
}
@


1.10
log
@Move cfdriver structs to better places, in preparation for new attachments.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.9 2006/08/05 22:05:55 miod Exp $	*/
@


1.9
log
@Ugly hack to avoid sending the ``all keys up'' event to userland, replacing
it with as many key release events as necessary. Necessary for X until it
knows how to handle this event properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.8 2006/07/31 21:57:05 miod Exp $	*/
d48 4
@


1.8
log
@Since we now know which keyboard type we are connected to:
- report the proper type to WSKBDIO_GTYPE.
- merge the LK201 and LK401 keymaps.
- if the keyboard is LK201, handle the compose key as the left alt key,
  unless shifted, so that you can have both an alt and a compose key.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.7 2006/07/31 18:50:48 miod Exp $	*/
d145 2
a146 2
lk201_decode(struct lk201_state *lks, int active, int datain, u_int *type,
    int *dataout)
d153 1
a153 1
		return (0);
a156 5
	case LK_KEY_UP:
		for (i = 0; i < LK_KLL; i++)
			lks->down_keys_list[i] = -1;
		*type = WSCONS_EVENT_ALL_KEYS_UP;
		return (1);
d162 1
a162 1
		return (0);
d171 1
a171 1
		return (0);
d175 1
a175 1
		return (0);	/* no need to decode */
d177 18
a194 1
	if (datain < MIN_LK201_KEY || datain > MAX_LK201_KEY) {
d199 1
a199 1
		return (0);
d222 1
a222 1
			return (1);
d230 1
a230 1
		return (0);
d235 1
a235 1
	return (1);
@


1.7
log
@Allow more time for the keyboard to initialize itself, helps on slower VS3100.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.6 2006/07/31 06:47:25 miod Exp $	*/
d190 13
d227 1
a227 3
lk201_bell(lks, bell)
	struct lk201_state *lks;
	struct wskbd_bell_data *bell;
d246 2
a247 4
void
lk201_set_leds(lks, leds)
	struct lk201_state *lks;
	int leds;
d249 2
a250 1
	int newleds;
d252 11
a262 13
	newleds = 0;
	if (leds & WSKBD_LED_SCROLL)
		newleds |= LK_LED_WAIT;
	if (leds & WSKBD_LED_CAPS)
		newleds |= LK_LED_LOCK;

	send(lks, LK_LED_DISABLE);
	send(lks, (0x80 | (~newleds & 0x0f)));

	send(lks, LK_LED_ENABLE);
	send(lks, (0x80 | (newleds & 0x0f)));

	lks->leds_state = leds;
d266 1
a266 3
lk201_set_keyclick(lks, vol)
	struct lk201_state *lks;
	int vol;
d282 20
@


1.6
log
@On startup, and when a keyboard change is detected, probe for the keyboard
type. For now it is only reported to the user, but we'll use this very soon
to alter keycodes depending upon the keyboard type (so that we do not have
the compose and alt keys swapped on LK401 keyboards).
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.5 2006/07/30 18:35:10 miod Exp $	*/
d111 1
a111 1
		for (i = 10; i != 0; i--) {
d126 1
a126 1
	for (i = 10; i != 0; i--) {
@


1.5
log
@Always invoke the lk201 input handler, even when the wskbd device is disabled,
so that the keyboard gets configured correctly if plugged late.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.3 2006/07/29 17:06:25 miod Exp $	*/
d38 4
d49 1
a49 1
#define send(lks, c) ((*((lks)->attmt.sendchar))((lks)->attmt.cookie, c))
d51 10
a60 3
int
lk201_init(lks)
	struct lk201_state *lks;
d64 2
d89 53
a141 1
	return (0);
d149 6
@


1.4
log
@Disable keyclick by default.
@
text
@d80 2
a81 5
lk201_decode(lks, datain, type, dataout)
	struct lk201_state *lks;
	int datain;
	u_int *type;
	int *dataout;
d92 1
d94 1
d108 3
d112 2
d115 1
@


1.3
log
@Sync dz and lk{kbd,ms} code with NetBSD, this allows keyboards to work when
initialized by the PROM.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.2 2006/01/17 20:26:16 miod Exp $	*/
d63 2
a64 3
	send(lks, LK_CL_ENABLE);
	send(lks, LK_PARAM_VOLUME(3));
	lks->kcvol = (8 - 3) * 100 / 8;
@


1.2
log
@Use angle bracket and no relative paths for all include files which are not
created by config(8); no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: lk201_ws.c,v 1.1 2001/05/16 22:15:17 hugh Exp $	*/
d65 1
d90 1
a90 1
	    case LK_KEY_UP:
d95 1
a95 1
	    case LK_POWER_UP:
d99 4
a102 4
	    case LK_KDOWN_ERROR:
	    case LK_POWER_ERROR:
	    case LK_OUTPUT_ERROR:
	    case LK_INPUT_ERROR:
d104 3
a106 3
		/* FALLTHRU */
	    case LK_KEY_REPEAT: /* autorepeat handled by wskbd */
	    case LK_MODE_CHANGE: /* ignore silently */
d180 21
@


1.1
log
@Blind merge of wscons support from NetBSD/vax. Perhaps someone with a
supported framebuffer (simple monochrome) can finish this off.
If anyone has run across docs for LCG or SPGFX, please get in touch.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 3
a43 3
#include "../dec/lk201reg.h"
#include "../dec/lk201var.h"
#include "../dec/wskbdmap_lk201.h" /* for {MIN,MAX}_LK201_KEY */
@

