head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	SMP:1.5.0.8
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2000.04.27.02.26.21;	author bjc;	state dead;
branches;
next	1.5;

1.5
date	98.05.13.07.30.24;	author niklas;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	97.05.29.00.04.24;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.24.21;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.09.09.03;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.04;	author deraadt;	state Exp;
branches;
next	;

1.5.8.1
date	2001.05.14.21.37.41;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@/*	$OpenBSD: ra.c,v 1.5 1998/05/13 07:30:24 niklas Exp $ */
/*	$NetBSD: ra.c,v 1.5 1996/08/02 11:22:18 ragge Exp $ */
/*
 * Copyright (c) 1995 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

 /* All bugs are subject to removal without further notice */
		
#define NRSP 1 /* Kludge */
#define NCMD 1 /* Kludge */

#include "sys/param.h"
#include "sys/disklabel.h"

#include "lib/libsa/stand.h"

#include "../include/pte.h"
#include "../include/macros.h"
#include "../include/sid.h"

#include "../uba/ubareg.h"
#include "../uba/udareg.h"

#include "../mscp/mscp.h"
#include "../mscp/mscpreg.h"

#include "../bi/bireg.h"
#include "../bi/kdbreg.h"

#include "vaxstand.h"

static command(int);

/*
 * These routines for RA disk standalone boot is wery simple,
 * assuming a lots of thing like that we only working at one ra disk
 * a time, no separate routines for uba driver etc..
 * This code is foolish and should need a cleanup.
 * But it works :)
 */

struct ra_softc {
	int udaddr;
	int ubaddr;
	int part;
	int unit;
	unsigned short *ra_ip;
	unsigned short *ra_sa;
	unsigned short *ra_sw;
};

volatile struct uda {
        struct  mscp_1ca uda_ca;           /* communications area */
        struct  mscp uda_rsp;     /* response packets */
        struct  mscp uda_cmd;     /* command packets */
} uda;

volatile struct uda *ubauda;
volatile struct udadevice *udacsr;
struct	disklabel ralabel;
struct ra_softc ra_softc;
char io_buf[DEV_BSIZE];

raopen(f, adapt, ctlr, unit, part)
	struct open_file *f;
        int ctlr, unit, part;
{
	char *msg;
	struct disklabel *lp = &ralabel;
	volatile struct ra_softc *ra = &ra_softc;
	volatile struct uba_regs *mr = (void *)ubaaddr[adapt];
	volatile u_int *nisse;
	unsigned short johan, johan2;
	int i,err;

	bzero(lp, sizeof(struct disklabel));
	ra->unit = unit;
	ra->part = part;
	if (vax_cputype != VAX_8200) {
		if (adapt > nuba)
			return(EADAPT);
		if (ctlr > nuda)
			return(ECTLR);
		nisse = (u_int *)&mr->uba_map[0];
		nisse[494] = PG_V | (((u_int)&uda) >> 9);
		nisse[495] = nisse[494] + 1;
		udacsr = (void*)uioaddr[adapt] + udaaddr[ctlr];
		ubauda = (void*)0x3dc00 + (((u_int)(&uda))&0x1ff);
		johan = (((u_int)ubauda) & 0xffff) + 8;
		johan2 = 3;
		ra->ra_ip = (short *)&udacsr->udaip;
		ra->ra_sa = ra->ra_sw = (short *)&udacsr->udasa;
		ra->udaddr = uioaddr[adapt] + udaaddr[ctlr];
		ra->ubaddr = (int)mr;
		*ra->ra_ip = 0; /* Start init */
	} else {
		struct bi_node *bi = (void *)biaddr[adapt];
		struct kdb_regs *kb = (void *)&bi[ctlr];
		volatile int i = 10000;

		ra->ra_ip = &kb->kdb_ip;
		ra->ra_sa = &kb->kdb_sa;
		ra->ra_sw = &kb->kdb_sw;
		johan = ((u_int)&uda.uda_ca.ca_rspdsc) & 0xffff;
		johan2 = (((u_int)&uda.uda_ca.ca_rspdsc) & 0xffff0000) >> 16;
		kb->kdb_bi.bi_csr |= BICSR_NRST;
		while (i--) /* Need delay??? */
			;
		kb->kdb_bi.bi_ber = ~(BIBER_MBZ|BIBER_NMR|BIBER_UPEN);/* ??? */
		ubauda = &uda;
	}

	/* Init of this uda */
	while ((*ra->ra_sa & MP_STEP1) == 0)
		;

	*ra->ra_sw = 0x8000;
	while ((*ra->ra_sa & MP_STEP2) == 0)
		;

	*ra->ra_sw = johan;
	while ((*ra->ra_sa & MP_STEP3) == 0)
		;

	*ra->ra_sw = johan2;
	while ((*ra->ra_sa & MP_STEP4) == 0)
		;

	*ra->ra_sw = 0x0001;
	uda.uda_ca.ca_rspdsc = (int)&ubauda->uda_rsp.mscp_cmdref;
	uda.uda_ca.ca_cmddsc = (int)&ubauda->uda_cmd.mscp_cmdref;

	command(M_OP_SETCTLRC);
	uda.uda_cmd.mscp_unit = ra->unit;
	command(M_OP_ONLINE);

	err = rastrategy(ra,F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
	if(err){
		printf("reading disklabel: %s\n",strerror(err));
		return 0;
	}

	msg = getdisklabel(io_buf+LABELOFFSET, lp);
	if (msg)
		printf("getdisklabel: %s\n", msg);
	f->f_devdata = (void *)ra;
	return(0);
}

static
command(cmd)
{
	volatile int hej;

	uda.uda_cmd.mscp_opcode = cmd;
	uda.uda_cmd.mscp_msglen = MSCP_MSGLEN;
	uda.uda_rsp.mscp_msglen = MSCP_MSGLEN;
	uda.uda_ca.ca_rspdsc |= MSCP_OWN|MSCP_INT;
	uda.uda_ca.ca_cmddsc |= MSCP_OWN|MSCP_INT;
	hej = *ra_softc.ra_ip;
	while(uda.uda_ca.ca_rspdsc<0)
		;

}

rastrategy(ra, func, dblk, size, buf, rsize)
	struct	ra_softc *ra;
	int	func;
	daddr_t	dblk;
	char	*buf;
	u_int	size, *rsize;
{
	volatile struct uba_regs *ur;
	volatile struct udadevice *udadev;
	volatile u_int *ptmapp;
	struct	disklabel *lp;
	u_int	i, j, pfnum, mapnr, nsize;
	volatile int hej;


	if (vax_cputype != VAX_8200) {
		ur = (void *)ra->ubaddr;
		udadev = (void*)ra->udaddr;
		ptmapp = (u_int *)&ur->uba_map[0];

		pfnum = (u_int)buf >> PGSHIFT;

		for(mapnr = 0, nsize = size; (nsize + NBPG) > 0; nsize -= NBPG)
			ptmapp[mapnr++] = PG_V | pfnum++;
		uda.uda_cmd.mscp_seq.seq_buffer = ((u_int)buf) & 0x1ff;
	} else
		uda.uda_cmd.mscp_seq.seq_buffer = ((u_int)buf);

	lp = &ralabel;
	uda.uda_cmd.mscp_seq.seq_lbn =
	    dblk + lp->d_partitions[ra->part].p_offset;
	uda.uda_cmd.mscp_seq.seq_bytecount = size;
	uda.uda_cmd.mscp_unit = ra->unit;
	if (func == F_WRITE)
		command(M_OP_WRITE);
	else
		command(M_OP_READ);

	*rsize = size;
	return 0;
}
@


1.5
log
@Use DEV_BSIZE instead of the wasteful MAXBSIZE for buffer size.
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.4 1997/05/29 00:04:24 niklas Exp $ */
@


1.5.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.5 1998/05/13 07:30:24 niklas Exp $ */
@


1.4
log
@RCS tagging
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.5 1996/08/02 11:22:18 ragge Exp $ */
d88 1
a88 1
char io_buf[MAXBSIZE];
@


1.3
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.2
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: ra.c,v 1.4 1996/02/17 18:23:23 ragge Exp $ */
d34 2
a35 2
#define NRSP 0 /* Kludge */
#define NCMD 0 /* Kludge */
d44 2
d48 6
a53 1
#include "../vax/mscp.h"
d72 3
d78 1
a78 1
        struct  uda1ca uda_ca;           /* communications area */
d94 3
a96 3
	struct disklabel *lp=&ralabel;
	volatile struct ra_softc *ra=&ra_softc;
	volatile struct uba_regs *mr=(void *)ubaaddr[adapt];
d98 1
a98 1
	unsigned short johan;
a100 2
	if(adapt>nuba) return(EADAPT);
	if(ctlr>nuda) return(ECTLR);
d102 1
a102 3
	ra->udaddr=uioaddr[adapt]+udaaddr[ctlr];
	ra->ubaddr=(int)mr;
	ra->unit=unit;
d104 34
a137 5
	udacsr=(void*)ra->udaddr;
	nisse=(u_int *)&mr->uba_map[0];
	nisse[494]=PG_V|(((u_int)&uda)>>9);
	nisse[495]=nisse[494]+1;
	ubauda=(void*)0x3dc00+(((u_int)(&uda))&0x1ff);
d139 19
a157 12
	udacsr->udaip=0; /* Start init */
	while((udacsr->udasa&UDA_STEP1) == 0);
	udacsr->udasa=0x8000;
	while((udacsr->udasa&UDA_STEP2) == 0);
	johan=(((u_int)ubauda)&0xffff)+8;
	udacsr->udasa=johan;
	while((udacsr->udasa&UDA_STEP3) == 0);
	udacsr->udasa=3;
	while((udacsr->udasa&UDA_STEP4) == 0);
	udacsr->udasa=0x0001;
	uda.uda_ca.ca_rspdsc=(int)&ubauda->uda_rsp.mscp_cmdref;
	uda.uda_ca.ca_cmddsc=(int)&ubauda->uda_cmd.mscp_cmdref;
d159 1
a159 1
	uda.uda_cmd.mscp_unit=ra->unit;
d162 1
a162 1
	err=rastrategy(ra,F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d168 4
a171 5
	msg=getdisklabel(io_buf+LABELOFFSET, lp);
	if(msg) {
		printf("getdisklabel: %s\n",msg);
	}
	f->f_devdata=(void *)ra;
d180 3
a182 3
	uda.uda_cmd.mscp_opcode=cmd;
	uda.uda_cmd.mscp_msglen=MSCP_MSGLEN;
	uda.uda_rsp.mscp_msglen=MSCP_MSGLEN;
d185 3
a187 2
	hej=udacsr->udaip;
	while(uda.uda_ca.ca_rspdsc<0);
d206 13
a218 3
	ur = (void *)ra->ubaddr;
	udadev = (void*)ra->udaddr;
	ptmapp = (u_int *)&ur->uba_map[0];
a219 6

	pfnum = (u_int)buf >> PGSHIFT;

	for(mapnr = 0, nsize = size; (nsize + NBPG) > 0; nsize -= NBPG)
		ptmapp[mapnr++] = PG_V | pfnum++;

a222 1
	uda.uda_cmd.mscp_seq.seq_buffer = ((u_int)buf) & 0x1ff;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: ra.c,v 1.3 1995/09/16 13:34:22 ragge Exp $ */
d99 1
a99 1
	nisse=&mr->uba_map[0];
d166 1
a166 1
	ptmapp = &ur->uba_map[0];
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
