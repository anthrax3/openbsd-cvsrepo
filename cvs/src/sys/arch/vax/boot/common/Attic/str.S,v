head	1.4;
access;
symbols
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.28
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.26
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.24
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.22
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.20
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.18
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.16
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.14
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2011.07.10.17.31.40;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2011.06.06.07.54.33;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.19.42.07;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.11.09.36.24;	author hugh;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Move the vax/boot code to vax/stand.  A cvs 'mv' with de-tagging has been
done behind the scenes to retain history.  Having all the bootblocks in the
same architecture sub-directory satisfies several principles.
ok miod
@
text
@/*	$OpenBSD: str.S,v 1.3 2011/06/06 07:54:33 jasper Exp $ */
/*	$NetBSD: str.S,v 1.1 2002/02/24 01:04:25 matt Exp $ */
/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Small versions of the most common functions not using any
 * emulated instructions.
 */

#include "asm.h"

/*
 * atoi() used in devopen.
 */
ENTRY(atoi, 0)
	movl	4(ap),r1
	clrl	r0

2:	movzbl	(r1)+,r2
	cmpb	r2,$48
	blss	1f
	cmpb	r2,$57
	bgtr	1f
	subl2	$48,r2
	mull2	$10,r0
	addl2	r2,r0
	brb	2b
1:	ret

/*
 * index() small and easy.
 * doesnt work if we search for null.
 */
ENTRY(index, 0)
	movq	4(ap),r0
1:	cmpb	(r0), r1
	beql	2f
	tstb	(r0)+
	bneq	1b
	clrl	r0
2:	ret

/*
 * cmpc3 is emulated on MVII.
 */
ENTRY(bcmp, 0)
	movl	4(ap), r2
	movl	8(ap), r1
	movl	12(ap), r0
2:	cmpb	(r2)+, (r1)+
	bneq	1f
	decl	r0
	bneq	2b
1:	ret

/*
 * Is movc3/movc5 emulated on any CPU? I dont think so; use them here.
 */
ENTRY(bzero,0)
	movc5	$0,*4(ap),$0,8(ap),*4(ap)
	ret

ENTRY(bcopy,0)
	movc3	12(ap), *4(ap), *8(ap)
	ret

ENTRY(strlen, 0)
	movl	4(ap), r0
1:	tstb	(r0)+
	bneq	1b
	decl	r0
	subl2	4(ap), r0
	ret

ENTRY(strcmp, 0)
	movl	$250, r3	# max string len to compare
5:	movl	4(ap), r2
	movl	8(ap), r1
	movl	$1, r0

2:	cmpb	(r2),(r1)+
	bneq	1f		# something differ
	tstb	(r2)+
	beql	4f		# continue, strings unequal
	decl	r3		# max string len encountered?
	bneq	2b

4:	clrl	r0		# We are done, strings equal.
	ret

1:	bgtr	3f
	mnegl	r0, r0
3:	ret

ENTRY(strncpy, 0)
	movl	4(ap), r1
	movl	8(ap), r2
	movl	12(ap), r3
	bleq	2f

1:	movb	(r2)+, (r1)+
	beql	2f
	decl	r3
	bneq	1b
2:	ret

ENTRY(setjmp, 0)
	movl	4(ap), r0
	movl	8(fp), (r0)
	movl	12(fp), 4(r0)
	movl	16(fp), 8(r0)
	addl3	fp,$28,12(r0)
	clrl	r0
	ret

ENTRY(longjmp, 0)
	movl	4(ap), r1
	movl	$1, r0
	movl	(r1), ap
	movl	4(r1), fp
	movl	12(r1), sp
	jmp	*8(r1)
@


1.3
log
@Remove strcat and strncmp which are both unused, thereby slightly shrinking the bootblocks.

pointed out by mk@@
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: str.S,v 1.2 2008/05/21 19:42:07 miod Exp $ */
@


1.2
log
@ddb expects the kernel longjmp() to only take a single parameter and always
return 1 since 12+ years, it's about time to fix the offending ports.

Reported by Pierre Riteau (firstname.lastname at gmail)
@
text
@d1 1
a1 1
/*	$OpenBSD: str.S,v 1.1 2002/06/11 09:36:24 hugh Exp $ */
a103 4
ENTRY(strncmp, 0)
	movl	12(ap), r3
	brb	5f

a134 9

ENTRY(strcat, 0)
	pushl	4(ap)
	calls	$1,_C_LABEL(strlen)
	addl2	4(ap),r0
	movl	8(ap),r1
1:	movb	(r1)+,(r0)+
	bneq	1b
	ret
@


1.1
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d160 1
a160 1
	movl	8(ap), r0
a164 1

@


1.1.4.1
log
@sync to -current
@
text
@@

