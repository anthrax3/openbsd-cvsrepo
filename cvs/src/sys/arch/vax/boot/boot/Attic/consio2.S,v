head	1.3;
access;
symbols
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.30
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.28
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.26
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.24
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.22
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.20
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.18
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.16
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.14
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.07.10.17.31.40;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2008.08.12.17.23.21;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Move the vax/boot code to vax/stand.  A cvs 'mv' with de-tagging has been
done behind the scenes to retain history.  Having all the bootblocks in the
same architecture sub-directory satisfies several principles.
ok miod
@
text
@/*	$OpenBSD: consio2.S,v 1.2 2008/08/12 17:23:21 miod Exp $ */
/*	$NetBSD: consio2.S,v 1.1 2002/02/24 01:04:24 matt Exp $ */
/*
 * Copyright (c) 1994, 1998 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <machine/asm.h>

/*
 * int rom_putchar (int c)	==> putchar() using ROM-routines
 */
ENTRY(rom_putchar, R2)
	movl	4(ap), r2		# move argument to R2
	jsb	*_C_LABEL(rom_putc)	# write it
	ret				# that is all


/*
 * int rom_getchar (void)	==> getchar() using ROM-routines
 */
ENTRY(rom_getchar, R1)
loop:					# do {
	jsb	*_C_LABEL(rom_getc)	#   call the getc-routine
	tstl	r0			#   check if char ready
	beql	loop			# } while (R0 == 0)
	movl	r1, r0			# R1 holds char
	ret				# we are done

ENTRY(rom_testchar, 0)
	mnegl	$1,r0
	jsb	*_C_LABEL(rom_getc)
	tstl	r0
	beql	1f
	movl	r1,r0
1:	ret

ENTRY(_rtt, 0)
	halt


/*
 * int ka630_rom_getchar (void) ==> getchar() using ROM-routines on KA630
 */
ENTRY(ka630_rom_getchar, R11|R1)
	movl	_C_LABEL(ka630_conspage),r11  # load location of console page
1:					# do {
	jsb	*0x1C(r11)		#   call the getc-routine (KA630_GETC)
	blbc	r0,1b			# } while (R0 == 0)
	movl	r1,r0			# R1 holds char
	ret				# we are done

ENTRY(ka630_rom_testchar, R3|R1)
	movl	_C_LABEL(ka630_conspage),r3
	jsb	*0x1C(r3)
	blbc	r0,1f
	movl	r1,r0
1:	ret

/*
 * int ka630_rom_putchar (int c) ==> putchar() using ROM-routines on KA630
 */
ENTRY(ka630_rom_putchar, R11|R1)
	movl	_C_LABEL(ka630_conspage),r11
				# load location of console page
1:				# do {
	jsb	*0x20(r11)	#   is rom ready? (KA630_PUTC_POLL)
	blbc	r0,1b		# } while (R0 == 0)
	movl	4(ap),r1	# R1 holds char
	jsb	*0x24(r11)	# output character (KA630_PUTC)
	ret			# we are done

/*
 * int ka53_rom_getchar (void)	==> getchar() using ROM-routines on KA53
 */
ENTRY(ka53_rom_getchar, R11|R1)
	movl	_C_LABEL(ka53_conspage),r11
				# load location of console page
1:				# do {
	jsb	*0x64(r11)	#   test for char
	blbc	r0,1b		# } while (R0 == 0)
	jsb	*0x6c(r11)	# get the char
	ret			# we are done

ENTRY(ka53_rom_testchar, R3|R1)
	movl	_C_LABEL(ka53_conspage),r3
	jsb	*0x64(r3)
	blbc	r0,1f
	jsb	*0x6c(r3)	# get the char
1:	ret

/*
 * int ka53_rom_putchar (int c) ==> putchar() using ROM-routines on KA53
 */
ENTRY(ka53_rom_putchar, R11|R1)
	movl	_C_LABEL(ka53_conspage),r11
				# load location of console page
1:				# do {
	jsb	*0x20(r11)	#   is rom ready?
	blbc	r0,1b		# } whi	le (R0 == 0)
	movl	4(ap),r1	# R1 holds char
	jsb	*0x24(r11)	# output character
	ret			# we are done

/*
 * int ka60_rom_getchar (void)	==> getchar() using ROM-routines on KA60
 */
ENTRY(ka60_rom_getchar, R11|R10|R9|R8|R7|R6|R5|R4|R3|R2|R1)
1:
	movl	_C_LABEL(ka60_conspage),r0
				# load location of console page
				# do {
	jsb	*0xfc(r0)	#   get the char, if any
	blbc	r0,1b		# } while (R0 == 0)
	movl	r1,r0
	ret			# we are done

ENTRY(ka60_rom_testchar, R11|R10|R9|R8|R7|R6|R5|R4|R3|R2|R1)
	movl	_C_LABEL(ka60_conspage),r0
	jsb	*0xfc(r0)
	blbc	r0,1f
	movl	r1,r0
1:	ret

/*
 * int ka60_rom_putchar (int c) ==> putchar() using ROM-routines on KA60
 */
ENTRY(ka60_rom_putchar, R11|R10|R9|R8|R7|R6|R5|R4|R3|R2|R1)
1:
	movl	_C_LABEL(ka60_conspage),r0
				# load location of console page
	movl	4(ap),r1	# R1 holds char
	jsb	*0x114(r0)	# output character
	blbc	r0, 1b		# failed? retry
	ret			# we are done
@


1.2
log
@Figured out where the prom console routines are on KA60 and how to invoke
them, thanks to old ultrix bootblocks lying around.
Also, enable M-Bus clock on the I/O slot IOCSR, this unstucks the cpu
clocks (which really are implemented on the SSC on the I/O module, but
need to be controlled via the cpu's ``internal'' processor registers...)
@
text
@d1 1
a1 1
/*	$OpenBSD: consio2.S,v 1.1 2002/06/11 09:36:23 hugh Exp $ */
@


1.1
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d38 1
a38 1
ENTRY(rom_putchar, 0x0004)		# save-mask: R2
d47 1
a47 1
ENTRY(rom_getchar, 0x0002)		# save-mask: R1
d70 1
a70 1
ENTRY(ka630_rom_getchar, 0x0802)	# save-mask: R1, R11
d78 1
a78 1
ENTRY(ka630_rom_testchar, 0)
d88 1
a88 1
ENTRY(ka630_rom_putchar, 0x802)	# save-mask: R1, R11
d101 1
a101 1
ENTRY(ka53_rom_getchar, 0x0802)	# save-mask: R1, R11
d110 1
a110 1
ENTRY(ka53_rom_testchar, 0)
d120 1
a120 1
ENTRY(ka53_rom_putchar, 0x0802)	# save-mask: R1, R11
d128 32
@


1.1.4.1
log
@sync to -current
@
text
@@

