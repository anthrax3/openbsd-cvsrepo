head	1.6;
access;
symbols
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.07.10.17.31.40;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2006.08.24.22.10.36;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.31.01.10.36;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.01.17.19.48;	author hugh;	state Exp;
branches
	1.2.4.1
	1.2.8.1;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.21.37.46;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Move the vax/boot code to vax/stand.  A cvs 'mv' with de-tagging has been
done behind the scenes to retain history.  Having all the bootblocks in the
same architecture sub-directory satisfies several principles.
ok miod
@
text
@/*	$OpenBSD: if_ze.c,v 1.5 2006/08/24 22:10:36 miod Exp $ */
/*	$NetBSD: if_ze.c,v 1.12 2002/05/27 16:54:18 ragge Exp $	*/
/*
 * Copyright (c) 1998 James R. Maynard III.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by James R. Maynard III.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *	Standalone routine for the SGEC Ethernet controller.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/if_ether.h>

#include <lib/libsa/netif.h>
#include <lib/libsa/stand.h>
#include <lib/libsa/net.h>

#include <arch/vax/if/sgecreg.h>

#include "arch/vax/include/sid.h"
#include "arch/vax/include/rpb.h"

#include "vaxstand.h"

static int ze_get(struct iodesc *, void *, size_t, time_t);
static int ze_put(struct iodesc *, void *, size_t);

#define ETHER_MIN_LEN 64
#define ETHER_MAX_LEN 1518

struct netif_driver ze_driver = {
	0, 0, 0, 0, ze_get, ze_put,
};

#define NRCV 8				/* allocate 8 receive descriptors */
#define NXMT 4				/* and 4 transmit - must be >1 */
#define SETUP_FRAME_LEN 128		/* length of the setup frame */

/* allocate a buffer on an octaword boundary */
#define OW_ALLOC(x) ((void *)((int)((int)alloc((x) + 15) + 15) & ~15))

static	volatile struct zedevice *addr;

struct ze_tdes *ze_tdes_list;	/* transmit desc list */
struct ze_rdes *ze_rdes_list;	/* and receive desc list */
u_char ze_myaddr[ETHER_ADDR_LEN];	/* my Ethernet address */

int
zeopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
{
	u_long nicsr0_work, *nisa_rom;
	struct ze_tdes *ze_setup_tdes_list;
	int i;

	/* point to the device in memory */
	if (askname == 0) /* Override if autoboot */
		addr = (struct zedevice *)bootrpb.csrphy;
	else
		addr = (struct zedevice *)0x20008000;

	/* reset the device and wait for completion */
	addr->ze_nicsr6 = ZE_NICSR6_MBO | ZE_NICSR6_RE;
	while ((addr->ze_nicsr5 & ZE_NICSR5_ID) == 0)
		;
	if (addr->ze_nicsr5 & ZE_NICSR5_SF) {
		printf("SGEC self-test failed...\n");
		return 1;
	}

	/* Get our Ethernet address */
	if (vax_boardtype == VAX_BTYP_49) {
		nisa_rom = (u_long *)0x27800000;
		for (i=0; i<ETHER_ADDR_LEN; i++)
			ze_myaddr[i] = nisa_rom[i] & 0377;
	} else if (vax_boardtype == VAX_BTYP_VXT) {
		nisa_rom = (u_long *)0x200c4000;
		for (i=0; i<ETHER_ADDR_LEN; i++)
			ze_myaddr[i] = nisa_rom[i] & 0xff;
	} else {
		nisa_rom = (u_long *)0x20084000;
		for (i=0; i<ETHER_ADDR_LEN; i++)
			if (vax_boardtype == VAX_BTYP_660)
				ze_myaddr[i] = (nisa_rom[i] & 0xff000000) >> 24;
			else
				ze_myaddr[i] = (nisa_rom[i] & 0x0000ff00) >> 8;
	}
	printf("SGEC: Ethernet address %s", ether_sprintf(ze_myaddr));

	/* initialize SGEC operating mode */
	/* disable interrupts here */
	nicsr0_work = ZE_NICSR0_IPL14 | ZE_NICSR0_SA | ZE_NICSR0_MBO |
		(ZE_NICSR0_IV_MASK & 0x0108);
	do {
		addr->ze_nicsr0 = nicsr0_work;
	} while (addr->ze_nicsr0 != nicsr0_work);
	if (addr->ze_nicsr5 & ZE_NICSR5_ME)
		addr->ze_nicsr5 |= ZE_NICSR5_ME;
	/* reenable interrupts here */

	/* Allocate space for descriptor lists and buffers, 
		then initialize them. Set up both lists as a ring. */
	ze_rdes_list = OW_ALLOC((NRCV+1) * sizeof(struct ze_rdes));
	ze_tdes_list = OW_ALLOC((NXMT+1) * sizeof(struct ze_tdes));
	for (i=0; i < NRCV; i++) {
		bzero(ze_rdes_list+i,sizeof(struct ze_rdes));
		ze_rdes_list[i].ze_framelen = ZE_FRAMELEN_OW;
		ze_rdes_list[i].ze_bufsize = ETHER_MAX_LEN;
		ze_rdes_list[i].ze_bufaddr = alloc(ETHER_MAX_LEN);
	}
	bzero(ze_rdes_list+NRCV,sizeof(struct ze_rdes));
	ze_rdes_list[NRCV].ze_framelen = ZE_FRAMELEN_OW;
	ze_rdes_list[NRCV].ze_rdes1 = ZE_RDES1_CA;
	ze_rdes_list[NRCV].ze_bufaddr = (u_char *)ze_rdes_list;
	for (i=0; i < NXMT; i++) {
		bzero(ze_tdes_list+i,sizeof(struct ze_tdes));
		ze_tdes_list[i].ze_tdes1 = ZE_TDES1_FS | ZE_TDES1_LS;
		ze_tdes_list[i].ze_bufsize = ETHER_MAX_LEN;
		ze_tdes_list[i].ze_bufaddr = alloc(ETHER_MAX_LEN);
	}
	bzero(ze_tdes_list+NXMT,sizeof(struct ze_tdes));
	ze_tdes_list[NXMT].ze_tdes1 = ZE_TDES1_CA;
	ze_tdes_list[NXMT].ze_tdr = ZE_TDR_OW;
	ze_tdes_list[NXMT].ze_bufaddr = (u_char *)ze_tdes_list;

	printf(".");	/* XXX VXT */

	/* Build setup frame. We set the SGEC to do a
		perfect filter on our own address. */
	ze_setup_tdes_list = OW_ALLOC(2*sizeof(struct ze_tdes));
	bzero(ze_setup_tdes_list+0,2*sizeof(struct ze_tdes));
	ze_setup_tdes_list[0].ze_tdr = ZE_TDR_OW;
	ze_setup_tdes_list[0].ze_tdes1 = ZE_TDES1_DT_SETUP;
	ze_setup_tdes_list[0].ze_bufsize = SETUP_FRAME_LEN;
	ze_setup_tdes_list[0].ze_bufaddr = alloc(SETUP_FRAME_LEN);
	bzero(ze_setup_tdes_list[0].ze_bufaddr,SETUP_FRAME_LEN);
	for (i=0; i < 16; i++)
		bcopy(ze_myaddr,ze_setup_tdes_list[0].ze_bufaddr+(8*i),
			ETHER_ADDR_LEN);
	ze_setup_tdes_list[1].ze_tdes1 = ZE_TDES1_CA;
	ze_setup_tdes_list[1].ze_bufaddr = (u_char *)ze_setup_tdes_list;

	printf(".");	/* XXX VXT */

	/* Start the transmitter and initialize almost everything else. */
	addr->ze_nicsr4 = ze_setup_tdes_list;
	addr->ze_nicsr6 = ZE_NICSR6_MBO | ZE_NICSR6_SE | ZE_NICSR6_ST |
		ZE_NICSR6_DC | ZE_NICSR6_BL_4;
	while ((addr->ze_nicsr5 & ZE_NICSR5_TS) != ZE_NICSR5_TS_SUSP)
		;	/* wait for the frame to be processed */

	printf(".");	/* XXX VXT */

	/* Setup frame is done processing, initialize the receiver and
		point the transmitter to the real tdes list. */
	addr->ze_nicsr4 = ze_tdes_list;
	addr->ze_nicsr3 = ze_rdes_list;
	addr->ze_nicsr6 |= ZE_NICSR6_SR;

	/* And away-y-y we go! */

	printf("\n");
	net_devinit(f, &ze_driver, ze_myaddr);
	return 0;
}

int
ze_get(desc, pkt, maxlen, timeout)
	struct iodesc *desc;
	void *pkt;
	size_t maxlen;
	time_t timeout;
{
	int timeout_ctr=100000*timeout, len, rdes;

	while (timeout_ctr-- > 0) {

	/* If there's not a packet waiting for us, just decrement the
		timeout counter. */
		if (!(addr->ze_nicsr5 & ZE_NICSR5_RI))
			continue;

	/* Look through the receive descriptor list for the packet. */
		for (rdes=0; rdes<NRCV; rdes++) {
			if (ze_rdes_list[rdes].ze_framelen & ZE_FRAMELEN_OW)
				continue;

	/* If the packet has an error, ignore it. */
			if (ze_rdes_list[rdes].ze_rdes0 & ZE_RDES0_ES)
				len = 0;

	/* Copy the packet, up to the length supplied by the caller, to
		the caller's buffer. */
			else {
				if ((len = (ze_rdes_list[rdes].ze_framelen &
					(~ ZE_FRAMELEN_OW))) > maxlen)
					len = maxlen;
				bcopy((void *)ze_rdes_list[rdes].ze_bufaddr,
					pkt,len);
			}

	/* Give ownership of this descriptor back to the SGEC. */
			ze_rdes_list[rdes].ze_framelen = ZE_FRAMELEN_OW;

	/* If we actually got a good packet, reset the error flags and
		tell the SGEC to look for more before returning. */
			if (len > 0) {
				addr->ze_nicsr5=ZE_NICSR5_RU | ZE_NICSR5_RI |
					ZE_NICSR5_IS;
				addr->ze_nicsr2=ZE_NICSR2_RXPD;
				return len;
			}
		}
	}

	/* If we're going to return an error indication, at least reset the
		error flags and tell the SGEC to keep receiving first. */
	addr->ze_nicsr5=ZE_NICSR5_RU | ZE_NICSR5_RI | ZE_NICSR5_IS;
	addr->ze_nicsr2=ZE_NICSR2_RXPD;
	return 0;
}

int
ze_put(desc, pkt, len)
	struct iodesc *desc;
	void *pkt;
	size_t len;
{
	int timeout=100000;

	/* The SGEC maintains its position in the transmit descriptor list
	for the next frame to transmit. Unfortunately, there's no way to tell
	from software just where that is. We're forced to reset the position
	whenever we send a frame, which requires waiting for the previous
	frame to be sent. Argh. */
	while ((addr->ze_nicsr5 & ZE_NICSR5_TS) == ZE_NICSR5_TS_RUN)
		;

	/* Copy the packet to the buffer we allocated. */
	bcopy(pkt, (void *)ze_tdes_list[0].ze_bufaddr, len);

	/* Set the packet length in the descriptor, increasing it to the
		minimum size if needed. */
	ze_tdes_list[0].ze_bufsize = len;
	if (len < ETHER_MIN_LEN)
		ze_tdes_list[0].ze_bufsize = ETHER_MIN_LEN;

	/* Give ownership of the descriptor to the SGEC and tell it to start
		transmitting. */
	ze_tdes_list[0].ze_tdr = ZE_TDR_OW;
	addr->ze_nicsr4 = ze_tdes_list;
	addr->ze_nicsr1 = ZE_NICSR1_TXPD;

	/* Wait for the frame to be sent, but not too long. */
	timeout = 100000;
	while (((addr->ze_nicsr5 & ZE_NICSR5_TI) == 0) && (--timeout>0))
		;

	/* Reset the transmitter interrupt pending flag. */
	addr->ze_nicsr5 |= ZE_NICSR5_TI;

	/* Return good if we didn't timeout, or error if we did. */
	if (timeout>0) return len;
	return -1;
}

int
zeclose(struct open_file *f)
{
	addr->ze_nicsr6 = ZE_NICSR6_RE;

	return 0;
}
@


1.5
log
@Add a few printfs to slow down SGEC initialization - somehow this appears
to be necessary on VXT2000. While large SDELAY are not enough.

Someone will probably find my lack of faith in the SGEC code disturbing.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ze.c,v 1.4 2002/06/11 09:36:23 hugh Exp $ */
@


1.4
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d118 1
a118 1
	printf("SGEC: Ethernet address %s\n", ether_sprintf(ze_myaddr));
d124 1
a124 1
	while (addr->ze_nicsr0 != nicsr0_work)
d126 1
d156 2
d173 2
d182 2
d192 1
@


1.3
log
@Copy mac address from proper place on 4000 200. Spotted thanks to a
failed boot log from Jim Uhl.
@
text
@d1 2
a2 2
/*	$OpenBSD: if_ze.c,v 1.2 2001/04/01 17:19:48 hugh Exp $	*/
/*	$NetBSD: if_ze.c,v 1.5 1999/08/23 19:09:27 ragge Exp $	*/
a44 1
#include <lib/libkern/libkern.h>
d47 1
d52 1
d54 1
a54 2
int ze_probe(), ze_match(), ze_get(), ze_put();
void ze_init(), ze_end();
d56 2
a57 8
struct netif_stats ze_stats;

struct netif_dif ze_ifs[] = {
/*	dif_unit	dif_nsel	dif_stats	dif_private	*/
{	0,		1,		&ze_stats,	},
};

struct netif_stats ze_stats;
d63 1
a63 1
	"ze", ze_match, ze_probe, ze_init, ze_get, ze_put, ze_end, ze_ifs, 1,
d67 1
a67 1
#define NXMT 5				/* and 5 transmit - must be >1 */
d71 1
a71 1
#define OW_ALLOC(x) ((void *)((int)(alloc((x) + 15) + 15) & ~15))
d80 1
a80 19
ze_match(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
{
	return strcmp(machdep_hint, "ze") == 0;
}

int
ze_probe(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
{
	return 0;
}

void
ze_init(desc, machdep_hint)
	struct iodesc *desc;
	void *machdep_hint;
d83 1
a84 2
	u_char *saved_buf;
	struct ze_tdes *ze_setup_tdes_list;
d87 4
a90 1
	addr = (struct zedevice *)0x20008000;
d98 1
d106 4
d118 1
a118 1
	bcopy(ze_myaddr,desc->myea,ETHER_ADDR_LEN);
d184 3
d193 1
a193 1
	int maxlen;
d249 1
a249 1
	int len;
d278 1
a278 1
	while ((addr->ze_nicsr5 & ZE_NICSR5_TI == 0) && (--timeout>0))
d289 2
a290 2
void
ze_end()
d293 2
@


1.2
log
@Pick up a change from NetBSD:
: date: 2000/04/28 00:08:51;  author: matt;  state: Exp;  lines: +2 -2
: Dump NRCV to 8 from 5.  Note that a 8K NFS reply takes 6 full size
: Ethernet packets so the chances are that if the server was fast enough
: this driver would continuously lose one of the fragments.  Eventually
: causing the kernel load to fail.  Add 2 extra for random ARP or other
: packets that might be picked up.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ze.c,v 1.1 2000/04/27 02:26:25 bjc Exp $	*/
d130 4
a133 1
			ze_myaddr[i] = (nisa_rom[i] & 0x0000ff00) >> 8;
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ze.c,v 1.2 2001/04/01 17:19:48 hugh Exp $	*/
d130 1
a130 4
			if (vax_boardtype == VAX_BTYP_660)
				ze_myaddr[i] = (nisa_rom[i] & 0xff000000) >> 24;
			else
				ze_myaddr[i] = (nisa_rom[i] & 0x0000ff00) >> 8;
@


1.2.8.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: if_ze.c,v 1.12 2002/05/27 16:54:18 ragge Exp $	*/
d45 1
a47 1
#include <lib/libsa/net.h>
a51 1
#include "arch/vax/include/rpb.h"
d53 2
a54 1
#include "vaxstand.h"
d56 8
a63 2
static int ze_get(struct iodesc *, void *, size_t, time_t);
static int ze_put(struct iodesc *, void *, size_t);
d69 1
a69 1
	0, 0, 0, 0, ze_get, ze_put,
d73 1
a73 1
#define NXMT 4				/* and 4 transmit - must be >1 */
d77 1
a77 1
#define OW_ALLOC(x) ((void *)((int)((int)alloc((x) + 15) + 15) & ~15))
d86 19
a104 1
zeopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d107 2
a109 1
	int i;
d112 1
a112 4
	if (askname == 0) /* Override if autoboot */
		addr = (struct zedevice *)bootrpb.csrphy;
	else
		addr = (struct zedevice *)0x20008000;
a119 1
		return 1;
a126 4
	} else if (vax_boardtype == VAX_BTYP_VXT) {
		nisa_rom = (u_long *)0x200c4000;
		for (i=0; i<ETHER_ADDR_LEN; i++)
			ze_myaddr[i] = nisa_rom[i] & 0xff;
d135 1
a135 1
	printf("SGEC: Ethernet address %s\n", ether_sprintf(ze_myaddr));
a200 3

	net_devinit(f, &ze_driver, ze_myaddr);
	return 0;
d207 1
a207 1
	size_t maxlen;
d263 1
a263 1
	size_t len;
d292 1
a292 1
	while (((addr->ze_nicsr5 & ZE_NICSR5_TI) == 0) && (--timeout>0))
d303 2
a304 2
int
zeclose(struct open_file *f)
a306 2

	return 0;
@


1.2.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ze.c,v 1.2 2001/04/01 17:19:48 hugh Exp $	*/
@


1.2.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: if_ze.c,v 1.12 2002/05/27 16:54:18 ragge Exp $	*/
d45 1
a47 1
#include <lib/libsa/net.h>
a51 1
#include "arch/vax/include/rpb.h"
d53 2
a54 1
#include "vaxstand.h"
d56 8
a63 2
static int ze_get(struct iodesc *, void *, size_t, time_t);
static int ze_put(struct iodesc *, void *, size_t);
d69 1
a69 1
	0, 0, 0, 0, ze_get, ze_put,
d73 1
a73 1
#define NXMT 4				/* and 4 transmit - must be >1 */
d77 1
a77 1
#define OW_ALLOC(x) ((void *)((int)((int)alloc((x) + 15) + 15) & ~15))
d86 19
a104 1
zeopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d107 2
a109 1
	int i;
d112 1
a112 4
	if (askname == 0) /* Override if autoboot */
		addr = (struct zedevice *)bootrpb.csrphy;
	else
		addr = (struct zedevice *)0x20008000;
a119 1
		return 1;
a126 4
	} else if (vax_boardtype == VAX_BTYP_VXT) {
		nisa_rom = (u_long *)0x200c4000;
		for (i=0; i<ETHER_ADDR_LEN; i++)
			ze_myaddr[i] = nisa_rom[i] & 0xff;
d130 1
a130 4
			if (vax_boardtype == VAX_BTYP_660)
				ze_myaddr[i] = (nisa_rom[i] & 0xff000000) >> 24;
			else
				ze_myaddr[i] = (nisa_rom[i] & 0x0000ff00) >> 8;
d132 1
a132 1
	printf("SGEC: Ethernet address %s\n", ether_sprintf(ze_myaddr));
a197 3

	net_devinit(f, &ze_driver, ze_myaddr);
	return 0;
d204 1
a204 1
	size_t maxlen;
d260 1
a260 1
	size_t len;
d289 1
a289 1
	while (((addr->ze_nicsr5 & ZE_NICSR5_TI) == 0) && (--timeout>0))
d300 2
a301 2
int
zeclose(struct open_file *f)
a303 2

	return 0;
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 1
a72 1
#define NRCV 5				/* allocate 5 receive descriptors */
@

