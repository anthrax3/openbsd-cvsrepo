head	1.6;
access;
symbols
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.15.23.16.30;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.21.37.44;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	1.1.8.4;

1.1.8.4
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: ctu.c,v 1.5 2011/03/13 00:13:53 deraadt Exp $ */
/*	$NetBSD: ctu.c,v 1.3 2000/05/20 13:30:03 ragge Exp $ */
/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Standalone device driver for 11/750 Console TU58.
 * It can only handle reads, and doesn't calculate checksum.
 */

#include <sys/param.h>

#include <lib/libsa/stand.h>

#include <machine/mtpr.h>
#include <machine/rsp.h>

#include "vaxstand.h"

static short ctu_cksum(unsigned short *, int);

enum tu_state {
	SC_INIT,
	SC_READY,
	SC_SEND_CMD,
	SC_GET_RESP,
};

volatile struct tu_softc {
	enum	tu_state sc_state;
	char	sc_rsp[15];	/* Should be struct rsb; but don't work */
	u_char	*sc_xfptr;	/* Current char to xfer */
	int	sc_nbytes;	/* Number of bytes to xfer */
	int	sc_xbytes;	/* Number of xfer'd bytes */
	int	sc_bbytes;	/* Number of xfer'd bytes this block */
} tu_sc;

void	ctutintr(void);
void	cturintr(void);

int
ctuopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
{

	tu_sc.sc_state = SC_INIT;

	mtpr(RSP_TYP_INIT, PR_CSTD);
	cturintr();
	tu_sc.sc_state = SC_READY;
	return 0;

}

int
ctustrategy(void *f, int func, daddr32_t dblk, size_t size, void *buf, size_t *rsize)
{
	struct rsp *rsp = (struct rsp *)tu_sc.sc_rsp;

	tu_sc.sc_xfptr = buf;
	tu_sc.sc_nbytes = size;
	tu_sc.sc_xbytes = tu_sc.sc_bbytes = 0;

	rsp->rsp_typ = RSP_TYP_COMMAND;
	rsp->rsp_sz = 012;
	rsp->rsp_op = RSP_OP_READ;
	rsp->rsp_mod = 0;
	rsp->rsp_drv = 0;
	rsp->rsp_sw = rsp->rsp_xx1 = rsp->rsp_xx2 = 0;
	rsp->rsp_cnt = tu_sc.sc_nbytes;
	rsp->rsp_blk = dblk;
	rsp->rsp_sum = ctu_cksum((u_short *)rsp, 6);
	tu_sc.sc_state = SC_SEND_CMD;
	while (tu_sc.sc_state != SC_GET_RESP)
		ctutintr();
	while (tu_sc.sc_state != SC_READY)
		cturintr();
	*rsize = size;
	return 0;
}

void
cturintr(void)
{
	int	status;

	while ((mfpr(PR_CSRS) & 0x80) == 0)
		;

	status = mfpr(PR_CSRD);

	switch (tu_sc.sc_state) {

	case SC_INIT:
		break;

	case SC_GET_RESP:
		if (tu_sc.sc_xbytes == tu_sc.sc_nbytes) {
			tu_sc.sc_bbytes++;
			if (tu_sc.sc_bbytes == 146)
				tu_sc.sc_state = SC_READY;
			break;
		}
		tu_sc.sc_bbytes++;
		if (tu_sc.sc_bbytes <  3) /* Data header */
			break;
		if (tu_sc.sc_bbytes == 132) { /* Finished */
			tu_sc.sc_bbytes = 0;
			break;
		}
		if (tu_sc.sc_bbytes == 131) /* First checksum */
			break;
		tu_sc.sc_xfptr[tu_sc.sc_xbytes++] = status;
		break;
	case SC_READY:
	case SC_SEND_CMD:
		break;
	}

}

void
ctutintr(void)
{
	int	c;

	while ((mfpr(PR_CSTS) & 0x80) == 0)
		;

	c = tu_sc.sc_rsp[tu_sc.sc_xbytes++] & 0xff;
	mtpr(c, PR_CSTD);
	if (tu_sc.sc_xbytes > 13) {
		tu_sc.sc_state = SC_GET_RESP;
		tu_sc.sc_xbytes = 0;
	}
}

short
ctu_cksum(unsigned short *buf, int words)
{
	int i, cksum;

	for (i = cksum = 0; i < words; i++)
		cksum += buf[i];

hej:	if (cksum > 65535) {
		cksum = (cksum & 65535) + (cksum >> 16);
		goto hej;
	}
	return cksum;
}
@


1.5
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.4 2003/08/15 23:16:30 deraadt Exp $ */
@


1.4
log
@ansi and proto cleanup.  one unused function goes away
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.3 2002/06/11 09:36:23 hugh Exp $ */
d83 1
a83 1
ctustrategy(void *f, int func, daddr_t dblk, size_t size, void *buf, size_t *rsize)
@


1.3
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.2 2002/03/14 01:26:47 millert Exp $ */
d70 1
a70 3
ctuopen(f, adapt, ctlr, unit, part)
	struct open_file *f;
	int ctlr, unit, part;
d83 1
a83 6
ctustrategy(f, func, dblk, size, buf, rsize)
	void *f;
        int func;
        daddr_t dblk;
	void *buf;
	size_t size, *rsize;
d110 1
a110 1
cturintr()
d150 1
a150 1
ctutintr()
d166 1
a166 3
ctu_cksum(buf, words)
	unsigned short *buf;
	int words;
@


1.2
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: ctu.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
/*	$NetBSD: ctu.c,v 1.1 1996/02/17 18:23:20 ragge Exp $ */
d46 4
d85 2
a86 2
ctustrategy(ra, func, dblk, size, buf, rsize)
        struct ra_softc *ra;
d89 2
a90 2
        char *buf;
        u_int size, *rsize;
a91 2
	int	s;

d106 1
a106 1
	rsp->rsp_sum = ctu_cksum(rsp, 6);
d149 3
a151 1

d172 1
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.2 1997/05/29 00:04:20 niklas Exp $ */
d62 2
a63 2
void	ctutintr __P((void));
void	cturintr __P((void));
@


1.1.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
d62 2
a63 2
void	ctutintr(void);
void	cturintr(void);
@


1.1.12.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ctu.c,v 1.3 2000/05/20 13:30:03 ragge Exp $ */
a45 4
#include "vaxstand.h"

static short ctu_cksum(unsigned short *, int);

d81 2
a82 2
ctustrategy(f, func, dblk, size, buf, rsize)
	void *f;
d85 2
a86 2
	void *buf;
	size_t size, *rsize;
d88 2
d104 1
a104 1
	rsp->rsp_sum = ctu_cksum((u_short *)rsp, 6);
d147 1
a147 3
	case SC_READY:
	case SC_SEND_CMD:
		break;
a167 1
short
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
@


1.1.8.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d62 2
a63 2
void	ctutintr(void);
void	cturintr(void);
@


1.1.8.3
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: ctu.c,v 1.3 2000/05/20 13:30:03 ragge Exp $ */
a45 4
#include "vaxstand.h"

static short ctu_cksum(unsigned short *, int);

d81 2
a82 2
ctustrategy(f, func, dblk, size, buf, rsize)
	void *f;
d85 2
a86 2
	void *buf;
	size_t size, *rsize;
d88 2
d104 1
a104 1
	rsp->rsp_sum = ctu_cksum((u_short *)rsp, 6);
d147 1
a147 3
	case SC_READY:
	case SC_SEND_CMD:
		break;
a167 1
short
@


1.1.8.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d70 3
a72 1
ctuopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d85 6
a90 1
ctustrategy(void *f, int func, daddr_t dblk, size_t size, void *buf, size_t *rsize)
d117 1
a117 1
cturintr(void)
d157 1
a157 1
ctutintr(void)
d173 3
a175 1
ctu_cksum(unsigned short *buf, int words)
@


