head	1.6;
access;
symbols
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.07.10.17.31.40;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2008.06.26.05.42.13;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.10.12.27.54;	author bjc;	state Exp;
branches
	1.2.4.1
	1.2.8.1;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.21.37.47;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Move the vax/boot code to vax/stand.  A cvs 'mv' with de-tagging has been
done behind the scenes to retain history.  Having all the bootblocks in the
same architecture sub-directory satisfies several principles.
ok miod
@
text
@/*	$OpenBSD: netio.c,v 1.5 2008/06/26 05:42:13 ray Exp $	*/
/*	$NetBSD: netio.c,v 1.6 2000/05/26 20:16:46 ragge Exp $	*/

/*-
 * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This module implements a "raw device" interface suitable for
 * use by the stand-alone I/O library NFS code.	 This interface
 * does not support any "block" access, and exists only for the
 * purpose of initializing the network interface, getting boot
 * parameters, and performing the NFS mount.
 *
 * At open time, this does:
 *
 * find interface      - netif_open()
 * RARP for IP address - rarp_getipaddress()
 * RPC/bootparams      - callrpc(d, RPC_BOOTPARAMS, ...)
 * RPC/mountd	       - nfs_mount(sock, ip, path)
 *
 * the root file handle from mountd is saved in a global
 * for use by the NFS open code (NFS/lookup).
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/in_systm.h>

#include "lib/libsa/stand.h"
#include "lib/libsa/net.h"
#include "lib/libsa/netif.h"
#include "lib/libsa/bootparam.h"
#include "lib/libsa/nfs.h"
#include "lib/libsa/bootp.h"

#include "vaxstand.h"

static struct iodesc desc;
static int inited = 0;

struct iodesc *
socktodesc(sock)
{
	return &desc;
}

int
net_devinit(struct open_file *f, struct netif_driver *drv, u_char *eaddr) {
	static struct netif best_if;
	struct iodesc *s;
	int r;

	if (inited)
		return 0;
	/* find a free socket */
	s = &desc;

	bzero(s, sizeof(*s));
	best_if.nif_driver = drv;
	s->io_netif = &best_if;
	bcopy(eaddr, s->myea, 6);

	/*
	 * Get info for NFS boot: our IP address, our hostname,
	 * server IP address, and our root path on the server.
	 * There are two ways to do this:  The old, Sun way,
	 * and the more modern, BOOTP way. (RFC951, RFC1048)
	 */

#ifdef SUPPORT_BOOTP

	/* Get boot info using BOOTP way. (RFC951, RFC1048) */
	printf("Trying BOOTP\n");
	bootp(0);

	if (myip.s_addr) {
		printf("Using IP address: %s\n", inet_ntoa(myip));

		printf("myip: %s (%s)\n", hostname, inet_ntoa(myip));
	} else

#endif /* SUPPORT_BOOTP */
	{
#ifdef	SUPPORT_BOOTPARAMS
		/* Get boot info using RARP and Sun bootparams. */

		printf("Trying BOOTPARAMS\n");
		/* Get our IP address.	(rarp.c) */
		if (rarp_getipaddress(0) == -1)
			return (errno);

		printf("boot: client IP address: %s\n", inet_ntoa(myip));

		/* Get our hostname, server IP address. */
		if (bp_whoami(0))
			return (errno);

		printf("boot: client name: %s\n", hostname);

		/* Get the root pathname. */
		if (bp_getfile(0, "root", &rootip, rootpath))
			return (errno);
#endif
	}
	printf("root addr=%s path=%s\n", inet_ntoa(rootip), rootpath);
	f->f_devdata = s;

	/* Get the NFS file handle (mount). */
	r = nfs_mount(0, rootip, rootpath);
	if (r)
		return r;

	inited = 1;
	return 0;
}

ssize_t
netif_put(struct iodesc *desc, void *pkt, size_t len)
{
	return (*desc->io_netif->nif_driver->netif_put)(desc, pkt, len);
}

ssize_t
netif_get(struct iodesc *desc, void *pkt, size_t len, time_t timo)
{
	return (*desc->io_netif->nif_driver->netif_get)(desc, pkt, len, timo);
}
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netio.c,v 1.4 2002/06/11 09:36:23 hugh Exp $	*/
@


1.4
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: netio.c,v 1.2 2001/04/10 12:27:54 bjc Exp $ */
/*	$NetBSD: netio.c,v 1.4 1999/06/30 18:38:03 ragge Exp $	*/
d56 1
a56 1
 *      This product includes software developed by Gordon W. Ross
d72 1
a72 1
 * use by the stand-alone I/O library NFS code.  This interface
d82 1
a82 1
 * RPC/mountd          - nfs_mount(sock, ip, path)
d100 1
d102 1
a102 1
extern int nfs_root_node[];	/* XXX - get from nfs_mount() */
d104 2
a105 3
struct	in_addr myip, rootip, gateip;
n_long	netmask;
char rootpath[FNAME_SIZE];
d107 2
a108 51
int netdev_sock = -1;
static int open_count;

int netio_ask = 0;		/* default to bootparam, can override */

static	char input_line[100];

int netmountroot(struct open_file *, char *);

/*
 * Called by devopen after it sets f->f_dev to our devsw entry.
 * This opens the low-level device and sets f->f_devdata.
 */
int
netopen(f, devname)
	struct open_file *f;
	char *devname;		/* Device part of file name (or NULL). */
{
	int error = 0;

	/* On first open, do netif open, mount, etc. */
	if (open_count == 0) {
		/* Find network interface. */
		if ((netdev_sock = netif_open(devname)) < 0)
			return (error=ENXIO);
		if ((error = netmountroot(f, devname)) != 0)
			return (error);
	}
	open_count++;
	f->f_devdata = nfs_root_node;
	return (error);
}

int
netclose(f)
	struct open_file *f;
{
	if(--open_count == 0)
		netif_close(netdev_sock);
	f->f_devdata = NULL;
	return 0;
}

int
netstrategy(devdata, func, dblk, size, v_buf, rsize)
	void *devdata;
	int func;
	daddr_t dblk;
	size_t size;
	void *v_buf;
	size_t *rsize;
d110 1
a110 3

	*rsize = size;
	return EIO;
d114 14
a127 62
netmountroot(f, devname)
	struct open_file *f;
	char *devname;		/* Device part of file name (or NULL). */
{
	int error;
	struct iodesc *d;

	if (netio_ask) {
 get_my_ip:
		printf("My IP address? ");
		bzero(input_line, sizeof(input_line));
		gets(input_line);
		if ((myip.s_addr = inet_addr(input_line)) ==
		    htonl(INADDR_NONE)) {
			printf("invalid IP address: %s\n", input_line);
			goto get_my_ip;
		}

 get_my_netmask:
		printf("My netmask? ");
		bzero(input_line, sizeof(input_line)); 
		gets(input_line);
		if ((netmask = inet_addr(input_line)) ==
		    htonl(INADDR_NONE)) {
			printf("invalid netmask: %s\n", input_line);
			goto get_my_netmask;
		}

 get_my_gateway:
		printf("My gateway? ");
		bzero(input_line, sizeof(input_line)); 
		gets(input_line);
		if ((gateip.s_addr = inet_addr(input_line)) ==
		    htonl(INADDR_NONE)) {
			printf("invalid IP address: %s\n", input_line);
			goto get_my_gateway;
		}

 get_server_ip:
		printf("Server IP address? ");
		bzero(input_line, sizeof(input_line)); 
		gets(input_line);
		if ((rootip.s_addr = inet_addr(input_line)) ==
		    htonl(INADDR_NONE)) {
			printf("invalid IP address: %s\n", input_line);
			goto get_server_ip;
		}

 get_server_path:
		printf("Server path? ");
		bzero(rootpath, sizeof(rootpath)); 
		gets(rootpath);
		if (rootpath[0] == '\0' || rootpath[0] == '\n')
			goto get_server_path;

		if ((d = socktodesc(netdev_sock)) == NULL)
			return (EMFILE);

		d->myip = myip;

		goto do_nfs_mount;
	}
d140 1
a140 1
	bootp(netdev_sock);
d145 1
a145 6
		printf("myip: %s (%s)", hostname, inet_ntoa(myip));
		if (gateip.s_addr)
			printf(", gateip: %s", inet_ntoa(gateip));
		if (netmask)
			printf(", mask: %s", intoa(netmask));
		printf("\n");
d154 2
a155 2
		/* Get our IP address.  (rarp.c) */
		if (rarp_getipaddress(netdev_sock) == -1)
d161 1
a161 1
		if (bp_whoami(netdev_sock))
d167 1
a167 1
		if (bp_getfile(netdev_sock, "root", &rootip, rootpath))
d172 1
a173 1
 do_nfs_mount:
d175 7
a181 1
	error = nfs_mount(netdev_sock, rootip, rootpath);
d183 10
a192 1
	return (error);
@


1.2
log
@Decrement open_count in netclose(); this fixes the bug which caused
boot to halt on boot attempts after a failed network boot attempt.
Also, prototype netmountroot() and return 0 in netclose().
@
text
@d1 1
a1 1
/*	$OpenBSD: netio.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
d114 1
a114 1
int netmountroot __P((struct open_file *, char *));
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netio.c,v 1.2 2001/04/10 12:27:54 bjc Exp $ */
d114 1
a114 1
int netmountroot(struct open_file *, char *);
@


1.2.8.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: netio.c,v 1.6 2000/05/26 20:16:46 ragge Exp $	*/
d56 1
a56 1
 *	This product includes software developed by Gordon W. Ross
d72 1
a72 1
 * use by the stand-alone I/O library NFS code.	 This interface
d82 1
a82 1
 * RPC/mountd	       - nfs_mount(sock, ip, path)
a99 1
#include "lib/libsa/bootp.h"
d101 1
a101 1
#include "vaxstand.h"
d103 3
a105 2
static struct iodesc desc;
static int inited = 0;
d107 51
a157 2
struct iodesc *
socktodesc(sock)
d159 3
a161 1
	return &desc;
d165 62
a226 14
net_devinit(struct open_file *f, struct netif_driver *drv, u_char *eaddr) {
	static struct netif best_if;
	struct iodesc *s;
	int r;

	if (inited)
		return 0;
	/* find a free socket */
	s = &desc;

	bzero(s, sizeof(*s));
	best_if.nif_driver = drv;
	s->io_netif = &best_if;
	bcopy(eaddr, s->myea, 6);
d239 1
a239 1
	bootp(0);
d244 6
a249 1
		printf("myip: %s (%s)\n", hostname, inet_ntoa(myip));
d258 2
a259 2
		/* Get our IP address.	(rarp.c) */
		if (rarp_getipaddress(0) == -1)
d265 1
a265 1
		if (bp_whoami(0))
d271 1
a271 1
		if (bp_getfile(0, "root", &rootip, rootpath))
a275 1
	f->f_devdata = s;
d277 1
d279 1
a279 7
	r = nfs_mount(0, rootip, rootpath);
	if (r)
		return r;

	inited = 1;
	return 0;
}
d281 1
a281 10
ssize_t
netif_put(struct iodesc *desc, void *pkt, size_t len)
{
	return (*desc->io_netif->nif_driver->netif_put)(desc, pkt, len);
}

ssize_t
netif_get(struct iodesc *desc, void *pkt, size_t len, time_t timo)
{
	return (*desc->io_netif->nif_driver->netif_get)(desc, pkt, len, timo);
@


1.2.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: netio.c,v 1.2 2001/04/10 12:27:54 bjc Exp $ */
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d114 1
a114 1
int netmountroot(struct open_file *, char *);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: netio.c,v 1.6 2000/05/26 20:16:46 ragge Exp $	*/
d56 1
a56 1
 *	This product includes software developed by Gordon W. Ross
d72 1
a72 1
 * use by the stand-alone I/O library NFS code.	 This interface
d82 1
a82 1
 * RPC/mountd	       - nfs_mount(sock, ip, path)
a99 1
#include "lib/libsa/bootp.h"
d101 1
a101 1
#include "vaxstand.h"
d103 3
a105 2
static struct iodesc desc;
static int inited = 0;
d107 51
a157 2
struct iodesc *
socktodesc(sock)
d159 3
a161 1
	return &desc;
d165 62
a226 14
net_devinit(struct open_file *f, struct netif_driver *drv, u_char *eaddr) {
	static struct netif best_if;
	struct iodesc *s;
	int r;

	if (inited)
		return 0;
	/* find a free socket */
	s = &desc;

	bzero(s, sizeof(*s));
	best_if.nif_driver = drv;
	s->io_netif = &best_if;
	bcopy(eaddr, s->myea, 6);
d239 1
a239 1
	bootp(0);
d244 6
a249 1
		printf("myip: %s (%s)\n", hostname, inet_ntoa(myip));
d258 2
a259 2
		/* Get our IP address.	(rarp.c) */
		if (rarp_getipaddress(0) == -1)
d265 1
a265 1
		if (bp_whoami(0))
d271 1
a271 1
		if (bp_getfile(0, "root", &rootip, rootpath))
a275 1
	f->f_devdata = s;
d277 1
d279 1
a279 7
	r = nfs_mount(0, rootip, rootpath);
	if (r)
		return r;

	inited = 1;
	return 0;
}
d281 1
a281 10
ssize_t
netif_put(struct iodesc *desc, void *pkt, size_t len)
{
	return (*desc->io_netif->nif_driver->netif_put)(desc, pkt, len);
}

ssize_t
netif_get(struct iodesc *desc, void *pkt, size_t len, time_t timo)
{
	return (*desc->io_netif->nif_driver->netif_get)(desc, pkt, len, timo);
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD: netio.c,v 1.1 1998/02/03 11:48:28 maja Exp $ */
d114 2
d144 2
a145 1
	netif_close(netdev_sock);
d147 1
@

