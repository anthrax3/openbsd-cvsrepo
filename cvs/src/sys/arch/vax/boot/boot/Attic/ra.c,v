head	1.6;
access;
symbols
	OPENBSD_4_9:1.3.0.36
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.34
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.30
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.32
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.28
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.26
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.24
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.22
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.07.10.17.31.40;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2011.07.06.18.32.59;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.21.37.47;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Move the vax/boot code to vax/stand.  A cvs 'mv' with de-tagging has been
done behind the scenes to retain history.  Having all the bootblocks in the
same architecture sub-directory satisfies several principles.
ok miod
@
text
@/*	$OpenBSD: ra.c,v 1.5 2011/07/06 18:32:59 miod Exp $ */
/*	$NetBSD: ra.c,v 1.11 2002/06/04 15:13:55 ragge Exp $ */
/*
 * Copyright (c) 1995 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

 /* All bugs are subject to removal without further notice */
		
#define NRSP 1 /* Kludge */
#define NCMD 1 /* Kludge */

#include "sys/param.h"
#include "sys/disklabel.h"

#include "lib/libsa/stand.h"

#include "../include/pte.h"
#include "../include/rpb.h"

#include "arch/vax/mscp/mscp.h"
#include "arch/vax/mscp/mscpreg.h"

#include "vaxstand.h"

static void command(int, int);

/*
 * These routines for RA disk standalone boot is wery simple,
 * assuming a lots of thing like that we only working at one ra disk
 * a time, no separate routines for uba driver etc..
 * This code is foolish and should need a cleanup.
 * But it works :)
 */

static volatile struct uda {
	struct	mscp_1ca uda_ca;  /* communications area */
	struct	mscp uda_rsp;	  /* response packets */
	struct	mscp uda_cmd;	  /* command packets */
} uda;

static struct disklabel ralabel;
static char io_buf[DEV_BSIZE];
static int dpart, dunit, is_tmscp, curblock;
static volatile u_short *ra_ip, *ra_sa, *ra_sw;
static volatile u_int *mapregs;

int
raopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
{
	static volatile struct uda *ubauda;
	unsigned short johan, johan2;
	size_t i;
	int err;
	char *msg;

#ifdef DEV_DEBUG
	printf("raopen: adapter %d ctlr %d unit %d part %d\n", 
	    adapt, ctlr, unit, part);
	printf("raopen: csrbase %x nexaddr %x\n", csrbase, nexaddr);
#endif
	bzero(&ralabel, sizeof(struct disklabel));
	bzero((void *)&uda, sizeof(struct uda));
	if (bootrpb.devtyp == BDEV_TK)
		is_tmscp = 1;
	dunit = unit;
	dpart = part;
	if (ctlr < 0)
		ctlr = 0;
	curblock = 0;
	/* Assume uda-alike adapter */
	if (askname == 0) {
		csrbase = bootrpb.csrphy;
		dunit = bootrpb.unit;
		nexaddr = bootrpb.adpphy;
	} else
		csrbase += (ctlr ? 000334 : 012150);
	ra_ip = (short *)csrbase;
	ra_sa = ra_sw = (short *)csrbase + 1;
	if (nexaddr) { /* have map registers */
		mapregs = (int *)nexaddr + 512;
		mapregs[494] = PG_V | (((u_int)&uda) >> 9);
		mapregs[495] = mapregs[494] + 1;
		(char *)ubauda = (char *)0x3dc00 +
		    (((u_int)(&uda))&0x1ff);
	} else
		ubauda = &uda;
	johan = (((u_int)ubauda) & 0xffff) + 8;
	johan2 = (((u_int)ubauda) >> 16) & 077;
	*ra_ip = 0; /* Start init */
	bootrpb.csrphy = csrbase;

#ifdef DEV_DEBUG
	printf("start init\n");
#endif
	/* Init of this uda */
	while ((*ra_sa & MP_STEP1) == 0)
		;
#ifdef DEV_DEBUG
	printf("MP_STEP1...");
#endif
	*ra_sw = 0x8000;
	while ((*ra_sa & MP_STEP2) == 0)
		;
#ifdef DEV_DEBUG
	printf("MP_STEP2...");
#endif

	*ra_sw = johan;
	while ((*ra_sa & MP_STEP3) == 0)
		;
#ifdef DEV_DEBUG
	printf("MP_STEP3...");
#endif

	*ra_sw = johan2;
	while ((*ra_sa & MP_STEP4) == 0)
		;
#ifdef DEV_DEBUG
	printf("MP_STEP4\n");
#endif

	*ra_sw = 0x0001;
	uda.uda_ca.ca_rspdsc = (int)&ubauda->uda_rsp.mscp_cmdref;
	uda.uda_ca.ca_cmddsc = (int)&ubauda->uda_cmd.mscp_cmdref;
	if (is_tmscp) {
		uda.uda_cmd.mscp_un.un_seq.seq_addr =
		    (long *)&uda.uda_ca.ca_cmddsc;
		uda.uda_rsp.mscp_un.un_seq.seq_addr =
		    (long *)&uda.uda_ca.ca_rspdsc;
		uda.uda_cmd.mscp_vcid = 1;
		uda.uda_cmd.mscp_un.un_sccc.sccc_ctlrflags = 0;
	}

	command(M_OP_SETCTLRC, 0);
	uda.uda_cmd.mscp_unit = dunit;
	command(M_OP_ONLINE, 0);

	if (is_tmscp) {
		if (part) {
#ifdef DEV_DEBUG
			printf("Repos of tape...");
#endif
			uda.uda_cmd.mscp_un.un_seq.seq_buffer = part;
			command(M_OP_POS, 0);
			uda.uda_cmd.mscp_un.un_seq.seq_buffer = 0;
#ifdef DEV_DEBUG
			printf("Done!\n");
#endif
		}
		return 0;
	}
#ifdef DEV_DEBUG
	printf("reading disklabel\n");
#endif
	err = rastrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
	if(err){
		printf("reading disklabel: %s\n",strerror(err));
		return 0;
	}

#ifdef DEV_DEBUG
	printf("getting disklabel\n");
#endif
	msg = getdisklabel(io_buf+LABELOFFSET, &ralabel);
	if (msg)
		printf("getdisklabel: %s\n", msg);
	return(0);
}

static void
command(int cmd, int arg)
{
	volatile short hej;
	int to;

igen:	uda.uda_cmd.mscp_opcode = cmd;
	uda.uda_cmd.mscp_modifier = arg;

	uda.uda_cmd.mscp_msglen = MSCP_MSGLEN;
	uda.uda_rsp.mscp_msglen = MSCP_MSGLEN;
	uda.uda_ca.ca_rspdsc |= MSCP_OWN|MSCP_INT;
	uda.uda_ca.ca_cmddsc |= MSCP_OWN|MSCP_INT;
#ifdef DEV_DEBUG
	printf("sending cmd %x...", cmd);
#endif
	hej = *ra_ip;
	to = 10000000;
	while (uda.uda_ca.ca_rspdsc < 0) {
//		if (uda.uda_ca.ca_cmdint)
//			uda.uda_ca.ca_cmdint = 0;
		if (--to < 0) {
#ifdef DEV_DEBUG
			printf("timing out, retry\n");
#endif
			goto igen;
		}
	}
#ifdef DEV_DEBUG
	printf("sent.\n");
#endif
}

int
rastrategy(void *f, int func, daddr32_t dblk,
    size_t size, void *buf, size_t *rsize)
{
	u_int	pfnum, mapnr, nsize;

#ifdef DEV_DEBUG
	printf("rastrategy: buf %p is_tmscp %d\n",
	    buf, is_tmscp);
#endif
	pfnum = (u_int)buf >> VAX_PGSHIFT;

	for(mapnr = 0, nsize = size; (nsize + VAX_NBPG) > 0; nsize -= VAX_NBPG)
		mapregs[mapnr++] = PG_V | pfnum++;
	uda.uda_cmd.mscp_seq.seq_buffer = ((u_int)buf) & 0x1ff;

	if (is_tmscp) {
		int i;

		/*
		 * First position tape. Remember where we are.
		 */
		if (dblk < curblock) {
			uda.uda_cmd.mscp_seq.seq_bytecount = curblock - dblk;
			command(M_OP_POS, 12); /* 12 == step block backward */
		} else {
			uda.uda_cmd.mscp_seq.seq_bytecount = dblk - curblock;
			command(M_OP_POS, 4); /* 4 == step block forward */
		}
		curblock = size/512 + dblk;

		/*
		 * Read in the number of blocks we need.
		 * Why doesn't read of multiple blocks work?????
		 */
		for (i = 0 ; i < size/512 ; i++) {
			uda.uda_cmd.mscp_seq.seq_lbn = 1;
			uda.uda_cmd.mscp_seq.seq_bytecount = 512;
			uda.uda_cmd.mscp_seq.seq_buffer =
			    (((u_int)buf) & 0x1ff) + i * 512;
			uda.uda_cmd.mscp_unit = dunit;
			command(M_OP_READ, 0);
		}
	} else {

		uda.uda_cmd.mscp_seq.seq_lbn =
		    dblk + ralabel.d_partitions[dpart].p_offset;
		uda.uda_cmd.mscp_seq.seq_bytecount = size;
		uda.uda_cmd.mscp_unit = dunit;
#ifdef DEV_DEBUG
		printf("rastrategy: blk 0x%lx count %lx unit %x\n", 
		    uda.uda_cmd.mscp_seq.seq_lbn, size, dunit);
#endif
#ifdef notdef
		if (func == F_WRITE)
			command(M_OP_WRITE, 0);
		else
#endif
			command(M_OP_READ, 0);
	}

	*rsize = size;
	return 0;
}
@


1.5
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.4 2011/03/13 00:13:53 deraadt Exp $ */
@


1.4
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.3 2002/06/11 09:36:23 hugh Exp $ */
a48 3
#include "arch/vax/bi/bireg.h"
#include "arch/vax/bi/kdbreg.h"

d69 1
a69 1
static int dpart, dunit, remap, is_tmscp, curblock;
a94 1
	remap = csrbase && nexaddr;
d96 16
a111 46
	if (csrbase) { /* On a uda-alike adapter */
		if (askname == 0) {
			csrbase = bootrpb.csrphy;
			dunit = bootrpb.unit;
			nexaddr = bootrpb.adpphy;
		} else
			csrbase += (ctlr ? 000334 : 012150);
		ra_ip = (short *)csrbase;
		ra_sa = ra_sw = (short *)csrbase + 1;
		if (nexaddr) { /* have map registers */
			mapregs = (int *)nexaddr + 512;
			mapregs[494] = PG_V | (((u_int)&uda) >> 9);
			mapregs[495] = mapregs[494] + 1;
			(char *)ubauda = (char *)0x3dc00 +
			    (((u_int)(&uda))&0x1ff);
		} else
			ubauda = &uda;
		johan = (((u_int)ubauda) & 0xffff) + 8;
		johan2 = (((u_int)ubauda) >> 16) & 077;
		*ra_ip = 0; /* Start init */
		bootrpb.csrphy = csrbase;
	} else {
		paddr_t kdaddr;
		volatile int *w;
		volatile int i = 10000;

		if (askname == 0) {
			nexaddr = bootrpb.csrphy;
			dunit = bootrpb.unit;
		} else {
			nexaddr = (bootrpb.csrphy & ~(BI_NODESIZE - 1)) + KDB_IP;
			bootrpb.csrphy = nexaddr;
		}

		kdaddr = nexaddr & ~(BI_NODESIZE - 1);
		ra_ip = (short *)(kdaddr + KDB_IP);
		ra_sa = (short *)(kdaddr + KDB_SA);
		ra_sw = (short *)(kdaddr + KDB_SW);
		johan = ((u_int)&uda.uda_ca.ca_rspdsc) & 0xffff;
		johan2 = (((u_int)&uda.uda_ca.ca_rspdsc) & 0xffff0000) >> 16;
		w = (int *)(kdaddr + BIREG_VAXBICSR);
		*w = *w | BICSR_NRST;
		while (i--) /* Need delay??? */
			;
		w = (int *)(kdaddr + BIREG_BER);
		*w = ~(BIBER_MBZ|BIBER_NMR|BIBER_UPEN);/* ??? */
d113 4
a116 1
	}
d236 2
a237 2
	printf("rastrategy: buf %p remap %d is_tmscp %d\n",
	    buf, remap, is_tmscp);
d239 1
a239 2
	if (remap) {
		pfnum = (u_int)buf >> VAX_PGSHIFT;
d241 3
a243 6
		for(mapnr = 0, nsize = size; (nsize + VAX_NBPG) > 0;
		    nsize -= VAX_NBPG)
			mapregs[mapnr++] = PG_V | pfnum++;
		uda.uda_cmd.mscp_seq.seq_buffer = ((u_int)buf) & 0x1ff;
	} else
		uda.uda_cmd.mscp_seq.seq_buffer = ((u_int)buf);
@


1.3
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d261 1
a261 1
rastrategy(void *f, int func, daddr_t dblk,
@


1.2
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 2
a2 2
/*	$OpenBSD: ra.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
/*	$NetBSD: ra.c,v 1.4 1999/08/07 11:19:04 ragge Exp $ */
d44 1
a44 1
#include "../include/sid.h"
d54 1
a54 3
static command(int);


d64 4
a67 14
struct ra_softc {
	int udaddr;
	int ubaddr;
	int part;
	int unit;
	unsigned short *ra_ip;
	unsigned short *ra_sa;
	unsigned short *ra_sw;
};

volatile struct uda {
        struct  mscp_1ca uda_ca;           /* communications area */
        struct  mscp uda_rsp;     /* response packets */
        struct  mscp uda_cmd;     /* command packets */
d70 8
a77 8
volatile struct uda *ubauda;
struct	disklabel ralabel;
struct ra_softc ra_softc;
char io_buf[DEV_BSIZE];

raopen(f, adapt, ctlr, unit, part)
	struct open_file *f;
        int ctlr, unit, part;
d79 4
a83 5
	struct disklabel *lp = &ralabel;
	volatile struct ra_softc *ra = &ra_softc;
	volatile u_int *nisse;
	unsigned short johan, johan2;
	int i,err, udacsr;
d88 1
d90 27
a116 13
	bzero(lp, sizeof(struct disklabel));
	ra->unit = unit;
	ra->part = part;
	if (vax_cputype != VAX_8200) {
		if (adapt > nuba)
			return(EADAPT);
		if (ctlr > nuda)
			return(ECTLR);
		nisse = ((u_int *)ubaaddr[adapt]) + 512;
		nisse[494] = PG_V | (((u_int)&uda) >> 9);
		nisse[495] = nisse[494] + 1;
		udacsr = (int)uioaddr[adapt] + udaaddr[ctlr];
		ubauda = (void *)0x3dc00 + (((u_int)(&uda))&0x1ff);
d118 3
a120 6
		johan2 = 3;
		ra->ra_ip = (short *)udacsr;
		ra->ra_sa = ra->ra_sw = (short *)udacsr + 1;
		ra->udaddr = uioaddr[adapt] + udaaddr[ctlr];
		ra->ubaddr = (int)ubaaddr[adapt];
		*ra->ra_ip = 0; /* Start init */
d122 1
a122 1
		paddr_t kdaddr = (paddr_t)biaddr[adapt] + BI_NODE(ctlr);
d126 12
a137 3
		ra->ra_ip = (short *)(kdaddr + KDB_IP);
		ra->ra_sa = (short *)(kdaddr + KDB_SA);
		ra->ra_sw = (short *)(kdaddr + KDB_SW);
d149 3
d153 1
a153 1
	while ((*ra->ra_sa & MP_STEP1) == 0)
d158 2
a159 2
	*ra->ra_sw = 0x8000;
	while ((*ra->ra_sa & MP_STEP2) == 0)
d165 2
a166 2
	*ra->ra_sw = johan;
	while ((*ra->ra_sa & MP_STEP3) == 0)
d172 2
a173 2
	*ra->ra_sw = johan2;
	while ((*ra->ra_sa & MP_STEP4) == 0)
d179 1
a179 1
	*ra->ra_sw = 0x0001;
d182 8
d191 3
a193 3
	command(M_OP_SETCTLRC);
	uda.uda_cmd.mscp_unit = ra->unit;
	command(M_OP_ONLINE);
d195 14
d212 1
a212 1
	err = rastrategy(ra,F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d221 1
a221 1
	msg = getdisklabel(io_buf+LABELOFFSET, lp);
a223 1
	f->f_devdata = (void *)ra;
d227 2
a228 2
static
command(cmd)
d230 5
a234 1
	volatile int hej;
a235 1
	uda.uda_cmd.mscp_opcode = cmd;
d243 12
a254 3
	hej = *ra_softc.ra_ip;
	while(uda.uda_ca.ca_rspdsc<0)
		;
d260 3
a262 6
rastrategy(ra, func, dblk, size, buf, rsize)
	struct	ra_softc *ra;
	int	func;
	daddr_t	dblk;
	char	*buf;
	u_int	size, *rsize;
d264 1
a264 7
	volatile u_int *ptmapp;
	struct	disklabel *lp;
	u_int	i, j, pfnum, mapnr, nsize;
	volatile int hej;

	if (vax_cputype != VAX_8200) {
		ptmapp = ((u_int *)ra->ubaddr) + 512;
d266 5
d275 1
a275 1
			ptmapp[mapnr++] = PG_V | pfnum++;
d280 44
a323 13
	lp = &ralabel;
	uda.uda_cmd.mscp_seq.seq_lbn =
	    dblk + lp->d_partitions[ra->part].p_offset;
	uda.uda_cmd.mscp_seq.seq_bytecount = size;
	uda.uda_cmd.mscp_unit = ra->unit;
#ifdef DEV_DEBUG
	printf("rastrategy: blk 0x%lx count %lx unit %lx\n", 
	    uda.uda_cmd.mscp_seq.seq_lbn, size, ra->unit);
#endif
	if (func == F_WRITE)
		command(M_OP_WRITE);
	else
		command(M_OP_READ);
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.5 1998/05/13 07:30:24 niklas Exp $ */
d114 1
a114 1
		ubauda = (void*)0x3dc00 + (((u_int)(&uda))&0x1ff);
@


1.1.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
d114 1
a114 1
		ubauda = (void *)0x3dc00 + (((u_int)(&uda))&0x1ff);
@


1.1.12.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ra.c,v 1.11 2002/06/04 15:13:55 ragge Exp $ */
d44 1
a44 1
#include "../include/rpb.h"
d54 3
a56 1
static void command(int, int);
d66 14
a79 4
static volatile struct uda {
	struct	mscp_1ca uda_ca;  /* communications area */
	struct	mscp uda_rsp;	  /* response packets */
	struct	mscp uda_cmd;	  /* command packets */
d82 8
a89 8
static struct disklabel ralabel;
static char io_buf[DEV_BSIZE];
static int dpart, dunit, remap, is_tmscp, curblock;
static volatile u_short *ra_ip, *ra_sa, *ra_sw;
static volatile u_int *mapregs;

int
raopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d91 4
a94 1
	static volatile struct uda *ubauda;
d96 1
a96 3
	size_t i;
	int err;
	char *msg;
a100 1
	printf("raopen: csrbase %x nexaddr %x\n", csrbase, nexaddr);
d102 13
a114 27
	bzero(&ralabel, sizeof(struct disklabel));
	bzero((void *)&uda, sizeof(struct uda));
	if (bootrpb.devtyp == BDEV_TK)
		is_tmscp = 1;
	dunit = unit;
	dpart = part;
	if (ctlr < 0)
		ctlr = 0;
	remap = csrbase && nexaddr;
	curblock = 0;
	if (csrbase) { /* On a uda-alike adapter */
		if (askname == 0) {
			csrbase = bootrpb.csrphy;
			dunit = bootrpb.unit;
			nexaddr = bootrpb.adpphy;
		} else
			csrbase += (ctlr ? 000334 : 012150);
		ra_ip = (short *)csrbase;
		ra_sa = ra_sw = (short *)csrbase + 1;
		if (nexaddr) { /* have map registers */
			mapregs = (int *)nexaddr + 512;
			mapregs[494] = PG_V | (((u_int)&uda) >> 9);
			mapregs[495] = mapregs[494] + 1;
			(char *)ubauda = (char *)0x3dc00 +
			    (((u_int)(&uda))&0x1ff);
		} else
			ubauda = &uda;
d116 6
a121 3
		johan2 = (((u_int)ubauda) >> 16) & 077;
		*ra_ip = 0; /* Start init */
		bootrpb.csrphy = csrbase;
d123 1
a123 1
		paddr_t kdaddr;
d127 3
a129 12
		if (askname == 0) {
			nexaddr = bootrpb.csrphy;
			dunit = bootrpb.unit;
		} else {
			nexaddr = (bootrpb.csrphy & ~(BI_NODESIZE - 1)) + KDB_IP;
			bootrpb.csrphy = nexaddr;
		}

		kdaddr = nexaddr & ~(BI_NODESIZE - 1);
		ra_ip = (short *)(kdaddr + KDB_IP);
		ra_sa = (short *)(kdaddr + KDB_SA);
		ra_sw = (short *)(kdaddr + KDB_SW);
a140 3
#ifdef DEV_DEBUG
	printf("start init\n");
#endif
d142 1
a142 1
	while ((*ra_sa & MP_STEP1) == 0)
d147 2
a148 2
	*ra_sw = 0x8000;
	while ((*ra_sa & MP_STEP2) == 0)
d154 2
a155 2
	*ra_sw = johan;
	while ((*ra_sa & MP_STEP3) == 0)
d161 2
a162 2
	*ra_sw = johan2;
	while ((*ra_sa & MP_STEP4) == 0)
d168 1
a168 1
	*ra_sw = 0x0001;
a170 8
	if (is_tmscp) {
		uda.uda_cmd.mscp_un.un_seq.seq_addr =
		    (long *)&uda.uda_ca.ca_cmddsc;
		uda.uda_rsp.mscp_un.un_seq.seq_addr =
		    (long *)&uda.uda_ca.ca_rspdsc;
		uda.uda_cmd.mscp_vcid = 1;
		uda.uda_cmd.mscp_un.un_sccc.sccc_ctlrflags = 0;
	}
d172 3
a174 3
	command(M_OP_SETCTLRC, 0);
	uda.uda_cmd.mscp_unit = dunit;
	command(M_OP_ONLINE, 0);
a175 14
	if (is_tmscp) {
		if (part) {
#ifdef DEV_DEBUG
			printf("Repos of tape...");
#endif
			uda.uda_cmd.mscp_un.un_seq.seq_buffer = part;
			command(M_OP_POS, 0);
			uda.uda_cmd.mscp_un.un_seq.seq_buffer = 0;
#ifdef DEV_DEBUG
			printf("Done!\n");
#endif
		}
		return 0;
	}
d179 1
a179 1
	err = rastrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d188 1
a188 1
	msg = getdisklabel(io_buf+LABELOFFSET, &ralabel);
d191 1
d195 2
a196 2
static void
command(int cmd, int arg)
d198 1
a198 5
	volatile short hej;
	int to;

igen:	uda.uda_cmd.mscp_opcode = cmd;
	uda.uda_cmd.mscp_modifier = arg;
d200 1
d208 3
a210 12
	hej = *ra_ip;
	to = 10000000;
	while (uda.uda_ca.ca_rspdsc < 0) {
//		if (uda.uda_ca.ca_cmdint)
//			uda.uda_ca.ca_cmdint = 0;
		if (--to < 0) {
#ifdef DEV_DEBUG
			printf("timing out, retry\n");
#endif
			goto igen;
		}
	}
d216 6
a221 3
int
rastrategy(void *f, int func, daddr_t dblk,
    size_t size, void *buf, size_t *rsize)
d223 7
a229 1
	u_int	pfnum, mapnr, nsize;
a230 5
#ifdef DEV_DEBUG
	printf("rastrategy: buf %p remap %d is_tmscp %d\n",
	    buf, remap, is_tmscp);
#endif
	if (remap) {
d235 1
a235 1
			mapregs[mapnr++] = PG_V | pfnum++;
d240 13
a252 44
	if (is_tmscp) {
		int i;

		/*
		 * First position tape. Remember where we are.
		 */
		if (dblk < curblock) {
			uda.uda_cmd.mscp_seq.seq_bytecount = curblock - dblk;
			command(M_OP_POS, 12); /* 12 == step block backward */
		} else {
			uda.uda_cmd.mscp_seq.seq_bytecount = dblk - curblock;
			command(M_OP_POS, 4); /* 4 == step block forward */
		}
		curblock = size/512 + dblk;

		/*
		 * Read in the number of blocks we need.
		 * Why doesn't read of multiple blocks work?????
		 */
		for (i = 0 ; i < size/512 ; i++) {
			uda.uda_cmd.mscp_seq.seq_lbn = 1;
			uda.uda_cmd.mscp_seq.seq_bytecount = 512;
			uda.uda_cmd.mscp_seq.seq_buffer =
			    (((u_int)buf) & 0x1ff) + i * 512;
			uda.uda_cmd.mscp_unit = dunit;
			command(M_OP_READ, 0);
		}
	} else {

		uda.uda_cmd.mscp_seq.seq_lbn =
		    dblk + ralabel.d_partitions[dpart].p_offset;
		uda.uda_cmd.mscp_seq.seq_bytecount = size;
		uda.uda_cmd.mscp_unit = dunit;
#ifdef DEV_DEBUG
		printf("rastrategy: blk 0x%lx count %lx unit %x\n", 
		    uda.uda_cmd.mscp_seq.seq_lbn, size, dunit);
#endif
#ifdef notdef
		if (func == F_WRITE)
			command(M_OP_WRITE, 0);
		else
#endif
			command(M_OP_READ, 0);
	}
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ra.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
@


1.1.8.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d114 1
a114 1
		ubauda = (void *)0x3dc00 + (((u_int)(&uda))&0x1ff);
@


1.1.8.3
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: ra.c,v 1.11 2002/06/04 15:13:55 ragge Exp $ */
d44 1
a44 1
#include "../include/rpb.h"
d54 3
a56 1
static void command(int, int);
d66 14
a79 4
static volatile struct uda {
	struct	mscp_1ca uda_ca;  /* communications area */
	struct	mscp uda_rsp;	  /* response packets */
	struct	mscp uda_cmd;	  /* command packets */
d82 8
a89 8
static struct disklabel ralabel;
static char io_buf[DEV_BSIZE];
static int dpart, dunit, remap, is_tmscp, curblock;
static volatile u_short *ra_ip, *ra_sa, *ra_sw;
static volatile u_int *mapregs;

int
raopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d91 4
a94 1
	static volatile struct uda *ubauda;
d96 1
a96 3
	size_t i;
	int err;
	char *msg;
a100 1
	printf("raopen: csrbase %x nexaddr %x\n", csrbase, nexaddr);
d102 13
a114 27
	bzero(&ralabel, sizeof(struct disklabel));
	bzero((void *)&uda, sizeof(struct uda));
	if (bootrpb.devtyp == BDEV_TK)
		is_tmscp = 1;
	dunit = unit;
	dpart = part;
	if (ctlr < 0)
		ctlr = 0;
	remap = csrbase && nexaddr;
	curblock = 0;
	if (csrbase) { /* On a uda-alike adapter */
		if (askname == 0) {
			csrbase = bootrpb.csrphy;
			dunit = bootrpb.unit;
			nexaddr = bootrpb.adpphy;
		} else
			csrbase += (ctlr ? 000334 : 012150);
		ra_ip = (short *)csrbase;
		ra_sa = ra_sw = (short *)csrbase + 1;
		if (nexaddr) { /* have map registers */
			mapregs = (int *)nexaddr + 512;
			mapregs[494] = PG_V | (((u_int)&uda) >> 9);
			mapregs[495] = mapregs[494] + 1;
			(char *)ubauda = (char *)0x3dc00 +
			    (((u_int)(&uda))&0x1ff);
		} else
			ubauda = &uda;
d116 6
a121 3
		johan2 = (((u_int)ubauda) >> 16) & 077;
		*ra_ip = 0; /* Start init */
		bootrpb.csrphy = csrbase;
d123 1
a123 1
		paddr_t kdaddr;
d127 3
a129 12
		if (askname == 0) {
			nexaddr = bootrpb.csrphy;
			dunit = bootrpb.unit;
		} else {
			nexaddr = (bootrpb.csrphy & ~(BI_NODESIZE - 1)) + KDB_IP;
			bootrpb.csrphy = nexaddr;
		}

		kdaddr = nexaddr & ~(BI_NODESIZE - 1);
		ra_ip = (short *)(kdaddr + KDB_IP);
		ra_sa = (short *)(kdaddr + KDB_SA);
		ra_sw = (short *)(kdaddr + KDB_SW);
a140 3
#ifdef DEV_DEBUG
	printf("start init\n");
#endif
d142 1
a142 1
	while ((*ra_sa & MP_STEP1) == 0)
d147 2
a148 2
	*ra_sw = 0x8000;
	while ((*ra_sa & MP_STEP2) == 0)
d154 2
a155 2
	*ra_sw = johan;
	while ((*ra_sa & MP_STEP3) == 0)
d161 2
a162 2
	*ra_sw = johan2;
	while ((*ra_sa & MP_STEP4) == 0)
d168 1
a168 1
	*ra_sw = 0x0001;
a170 8
	if (is_tmscp) {
		uda.uda_cmd.mscp_un.un_seq.seq_addr =
		    (long *)&uda.uda_ca.ca_cmddsc;
		uda.uda_rsp.mscp_un.un_seq.seq_addr =
		    (long *)&uda.uda_ca.ca_rspdsc;
		uda.uda_cmd.mscp_vcid = 1;
		uda.uda_cmd.mscp_un.un_sccc.sccc_ctlrflags = 0;
	}
d172 3
a174 3
	command(M_OP_SETCTLRC, 0);
	uda.uda_cmd.mscp_unit = dunit;
	command(M_OP_ONLINE, 0);
a175 14
	if (is_tmscp) {
		if (part) {
#ifdef DEV_DEBUG
			printf("Repos of tape...");
#endif
			uda.uda_cmd.mscp_un.un_seq.seq_buffer = part;
			command(M_OP_POS, 0);
			uda.uda_cmd.mscp_un.un_seq.seq_buffer = 0;
#ifdef DEV_DEBUG
			printf("Done!\n");
#endif
		}
		return 0;
	}
d179 1
a179 1
	err = rastrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d188 1
a188 1
	msg = getdisklabel(io_buf+LABELOFFSET, &ralabel);
d191 1
d195 2
a196 2
static void
command(int cmd, int arg)
d198 1
a198 5
	volatile short hej;
	int to;

igen:	uda.uda_cmd.mscp_opcode = cmd;
	uda.uda_cmd.mscp_modifier = arg;
d200 1
d208 3
a210 12
	hej = *ra_ip;
	to = 10000000;
	while (uda.uda_ca.ca_rspdsc < 0) {
//		if (uda.uda_ca.ca_cmdint)
//			uda.uda_ca.ca_cmdint = 0;
		if (--to < 0) {
#ifdef DEV_DEBUG
			printf("timing out, retry\n");
#endif
			goto igen;
		}
	}
d216 6
a221 3
int
rastrategy(void *f, int func, daddr_t dblk,
    size_t size, void *buf, size_t *rsize)
d223 7
a229 1
	u_int	pfnum, mapnr, nsize;
a230 5
#ifdef DEV_DEBUG
	printf("rastrategy: buf %p remap %d is_tmscp %d\n",
	    buf, remap, is_tmscp);
#endif
	if (remap) {
d235 1
a235 1
			mapregs[mapnr++] = PG_V | pfnum++;
d240 13
a252 44
	if (is_tmscp) {
		int i;

		/*
		 * First position tape. Remember where we are.
		 */
		if (dblk < curblock) {
			uda.uda_cmd.mscp_seq.seq_bytecount = curblock - dblk;
			command(M_OP_POS, 12); /* 12 == step block backward */
		} else {
			uda.uda_cmd.mscp_seq.seq_bytecount = dblk - curblock;
			command(M_OP_POS, 4); /* 4 == step block forward */
		}
		curblock = size/512 + dblk;

		/*
		 * Read in the number of blocks we need.
		 * Why doesn't read of multiple blocks work?????
		 */
		for (i = 0 ; i < size/512 ; i++) {
			uda.uda_cmd.mscp_seq.seq_lbn = 1;
			uda.uda_cmd.mscp_seq.seq_bytecount = 512;
			uda.uda_cmd.mscp_seq.seq_buffer =
			    (((u_int)buf) & 0x1ff) + i * 512;
			uda.uda_cmd.mscp_unit = dunit;
			command(M_OP_READ, 0);
		}
	} else {

		uda.uda_cmd.mscp_seq.seq_lbn =
		    dblk + ralabel.d_partitions[dpart].p_offset;
		uda.uda_cmd.mscp_seq.seq_bytecount = size;
		uda.uda_cmd.mscp_unit = dunit;
#ifdef DEV_DEBUG
		printf("rastrategy: blk 0x%lx count %lx unit %x\n", 
		    uda.uda_cmd.mscp_seq.seq_lbn, size, dunit);
#endif
#ifdef notdef
		if (func == F_WRITE)
			command(M_OP_WRITE, 0);
		else
#endif
			command(M_OP_READ, 0);
	}
@


