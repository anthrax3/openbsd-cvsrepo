head	1.7;
access;
symbols
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.07.10.17.31.40;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2008.08.18.23.20.44;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.12.17.23.21;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.10.18.20.07;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.07.10.16.45;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.21.37.46;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Move the vax/boot code to vax/stand.  A cvs 'mv' with de-tagging has been
done behind the scenes to retain history.  Having all the bootblocks in the
same architecture sub-directory satisfies several principles.
ok miod
@
text
@/*	$OpenBSD: if_le.c,v 1.6 2008/08/18 23:20:44 miod Exp $ */
/*	$NetBSD: if_le.c,v 1.6 2000/05/20 13:30:03 ragge Exp $ */
/*
 * Copyright (c) 1997, 1999 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Standalone routine for MicroVAX LANCE chip. 
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/if_ether.h>

#include <machine/sid.h>
#include <machine/rpb.h>

#include <lib/libsa/netif.h>
#include <lib/libsa/stand.h>

#include <arch/vax/mbus/mbusreg.h>
#include <arch/vax/mbus/fwioreg.h>

#include <dev/ic/am7990reg.h>

#include "vaxstand.h"

/*
 * Buffer sizes.
 */
#define TLEN    1
#define NTBUF   (1 << TLEN)
#define RLEN    3
#define NRBUF   (1 << RLEN)
#define BUFSIZE 1518

#define ETHER_MIN_LEN   64      /* minimum frame length, including CRC */

#define	QW_ALLOC(x)	(((int)alloc((x) + 7) + 7) & ~7)

static int le_get(struct iodesc *, void *, size_t, time_t);
static int le_put(struct iodesc *, void *, size_t);
static void copyout(void *from, int dest, int len);
static void copyin(int src, void *to, int len);

struct netif_driver le_driver = {
	0, 0, 0, 0, le_get, le_put,
};

/*
 * Init block & buffer descriptors according to DEC system
 * specification documentation.
 */
struct initblock {
	short	ib_mode;
	char	ib_padr[6]; /* Ethernet address */
	int	ib_ladrf1;
	int	ib_ladrf2;
	int	ib_rdr; /* Receive address */
	int	ib_tdr; /* Transmit address */
} *initblock = NULL;

struct nireg {
	volatile u_short ni_rdp;       /* data port */
	volatile short ni_pad0;
	volatile short ni_rap;       /* register select port */
} *nireg;


volatile struct	buffdesc {
	int	bd_adrflg;
	short	bd_bcnt;
	short	bd_mcnt;
} *rdesc, *tdesc;

static	int addoff;
static	int lebufaddr;

/* Flags in the address field */
#define	BR_OWN	0x80000000
#define	BR_ERR	0x40000000
#define	BR_FRAM	0x20000000
#define	BR_OFLO	0x10000000
#define	BR_CRC	0x08000000
#define	BR_BUFF	0x04000000
#define	BR_STP	0x02000000
#define	BR_ENP	0x01000000

#define	BT_OWN	0x80000000
#define	BT_ERR	0x40000000
#define	BT_MORE	0x10000000
#define	BT_ONE	0x08000000
#define	BT_DEF	0x04000000
#define	BT_STP	0x02000000
#define	BT_ENP	0x01000000

int	next_rdesc, next_tdesc;

#define	LEWRCSR(port, val) { \
	nireg->ni_rap = (port); \
	nireg->ni_rdp = (val); \
}

#define	LERDCSR(port) \
	(nireg->ni_rap = port, nireg->ni_rdp)
 
int
leopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
{
	int i, *ea;
	volatile int to = 100000;
	u_char eaddr[6];

	next_rdesc = next_tdesc = 0;

	if (vax_boardtype == VAX_BTYP_650 &&
	    ((vax_siedata >> 8) & 0xff) == VAX_SIE_KA640) {
		lebufaddr = 0x20120000;
		ea = (void *)0x20084200;
		nireg = (void *)0x20084400;
	} else if (vax_boardtype == VAX_BTYP_60) {
		extern int ka60_ioslot;
		lebufaddr = MBUS_SLOT_BASE(ka60_ioslot) + FWIO_LANCE_BUF_OFFSET;
		ea = (int *)(MBUS_SLOT_BASE(ka60_ioslot) + FWIO_ESAR_OFFSET);
		for (i = 0; i < 6; i++) {
			eaddr[i] = *(u_char *)((int)ea + 2);
			ea++;
		}
		ea = NULL;
		nireg = (void *)(MBUS_SLOT_BASE(ka60_ioslot) +
		    FWIO_LANCE_REG_OFFSET);
	} else {
		*(int *)0x20080014 = 0; /* Be sure we do DMA in low 16MB */
		ea = (void *)0x20090000; /* XXX Ethernet address */
		nireg = (void *)0x200e0000;
	}
	if (askname == 0) /* Override if autoboot */
		nireg = (void *)bootrpb.csrphy;
	else /* Tell kernel from where we booted */
		bootrpb.csrphy = (int)nireg;

	if (vax_boardtype == VAX_BTYP_43)
		addoff = 0x28000000;
	else
		addoff = 0;
igen:
	LEWRCSR(LE_CSR0, LE_C0_STOP);
	while (to--)
		;

	if (ea != NULL) {
		for (i = 0; i < 6; i++)
			eaddr[i] = ea[i] & 0377;
	}

	if (initblock == NULL) {
		(void *)initblock =
		    (char *)QW_ALLOC(sizeof(struct initblock)) + addoff;
		initblock->ib_mode = LE_MODE_NORMAL;
		bcopy(eaddr, initblock->ib_padr, 6);
		initblock->ib_ladrf1 = 0;
		initblock->ib_ladrf2 = 0;

		(int)rdesc = QW_ALLOC(sizeof(struct buffdesc) * NRBUF) + addoff;
		initblock->ib_rdr = (RLEN << 29) | (int)rdesc;
		if (lebufaddr)
			initblock->ib_rdr -= (int)initblock;
		(int)tdesc = QW_ALLOC(sizeof(struct buffdesc) * NTBUF) + addoff;
		initblock->ib_tdr = (TLEN << 29) | (int)tdesc;
		if (lebufaddr)
			initblock->ib_tdr -= (int)initblock;
		if (lebufaddr)
			copyout(initblock, 0, sizeof(struct initblock));

		for (i = 0; i < NRBUF; i++) {
			rdesc[i].bd_adrflg = QW_ALLOC(BUFSIZE) | BR_OWN;
			if (lebufaddr)
				rdesc[i].bd_adrflg -= (int)initblock;
			rdesc[i].bd_bcnt = -BUFSIZE;
			rdesc[i].bd_mcnt = 0;
		}
		if (lebufaddr)
			copyout((void *)rdesc, (int)rdesc - (int)initblock,
			    sizeof(struct buffdesc) * NRBUF);

		for (i = 0; i < NTBUF; i++) {
			tdesc[i].bd_adrflg = QW_ALLOC(BUFSIZE);
			if (lebufaddr)
				tdesc[i].bd_adrflg -= (int)initblock;
			tdesc[i].bd_bcnt = 0xf000;
			tdesc[i].bd_mcnt = 0;
		}
		if (lebufaddr)
			copyout((void *)tdesc, (int)tdesc - (int)initblock,
			    sizeof(struct buffdesc) * NTBUF);
	}

	if (lebufaddr) {
		LEWRCSR(LE_CSR1, 0);
		LEWRCSR(LE_CSR2, 0);
	} else {
		LEWRCSR(LE_CSR1, (int)initblock & 0xffff);
		LEWRCSR(LE_CSR2, ((int)initblock >> 16) & 0xff);
	}

	LEWRCSR(LE_CSR0, LE_C0_INIT);

	to = 100000;
	while (to--) {
		if (LERDCSR(LE_CSR0) & LE_C0_IDON)
			break;
		if (LERDCSR(LE_CSR0) & LE_C0_ERR) {
			printf("lance init error: csr0 %x\n", LERDCSR(LE_CSR0));
			goto igen;
		}
	}

	LEWRCSR(LE_CSR0, LE_C0_INEA | LE_C0_STRT | LE_C0_IDON);

	net_devinit(f, &le_driver, eaddr);
	return 0;
}

int
le_get(struct iodesc *desc, void *pkt, size_t maxlen, time_t timeout)
{
	int csr, len;
	volatile int to = 100000 * timeout;

retry:
	if (to-- == 0)
		return 0;

	csr = LERDCSR(LE_CSR0);
	LEWRCSR(LE_CSR0, csr & (LE_C0_BABL|LE_C0_MISS|LE_C0_MERR|LE_C0_RINT));

	if (lebufaddr)
		copyin((int)&rdesc[next_rdesc] - (int)initblock,
		    (void *)&rdesc[next_rdesc], sizeof(struct buffdesc));
	if (rdesc[next_rdesc].bd_adrflg & BR_OWN)
		goto retry;

        if (rdesc[next_rdesc].bd_adrflg & BR_ERR)
                len = 0;
        else {
		if ((len = rdesc[next_rdesc].bd_mcnt - 4) > maxlen)
			len = maxlen;

		if (lebufaddr)
			copyin((rdesc[next_rdesc].bd_adrflg&0xffffff),
			    pkt, len);
		else
			bcopy((char *)(rdesc[next_rdesc].bd_adrflg&0xffffff) +
			    addoff, pkt, len);
	}

	rdesc[next_rdesc].bd_mcnt = 0;
	rdesc[next_rdesc].bd_adrflg |= BR_OWN;
	if (lebufaddr)
		copyout((void *)&rdesc[next_rdesc], (int)&rdesc[next_rdesc] -
		    (int)initblock, sizeof(struct buffdesc));
	if (++next_rdesc >= NRBUF)
		next_rdesc = 0;


	if (len == 0)
		goto retry;
	return len;
}

int
le_put(struct iodesc *desc, void *pkt, size_t len)
{
	volatile int to = 100000;
	int csr;

retry:
	if (--to == 0)
		return -1;

	csr = LERDCSR(LE_CSR0);
	LEWRCSR(LE_CSR0, csr & (LE_C0_MISS|LE_C0_CERR|LE_C0_TINT));

	if (lebufaddr)
		copyin((int)&tdesc[next_tdesc] - (int)initblock,
		    (void *)&tdesc[next_tdesc], sizeof(struct buffdesc));
	if (tdesc[next_tdesc].bd_adrflg & BT_OWN)
		goto retry;

	if (lebufaddr)
		copyout(pkt, (tdesc[next_tdesc].bd_adrflg & 0xffffff), len);
	else
		bcopy(pkt, (char *)(tdesc[next_tdesc].bd_adrflg & 0xffffff) +
		    addoff, len);
	tdesc[next_tdesc].bd_bcnt =
	    (len < ETHER_MIN_LEN ? -ETHER_MIN_LEN : -len);
	tdesc[next_tdesc].bd_mcnt = 0;
	tdesc[next_tdesc].bd_adrflg |= BT_OWN | BT_STP | BT_ENP;
	if (lebufaddr)
		copyout((void *)&tdesc[next_tdesc], (int)&tdesc[next_tdesc] -
		    (int)initblock, sizeof(struct buffdesc));

	LEWRCSR(LE_CSR0, LE_C0_TDMD);

	to = 100000;
	while (((LERDCSR(LE_CSR0) & LE_C0_TINT) == 0) && --to)
		;

	LEWRCSR(LE_CSR0, LE_C0_TINT);
	if (++next_tdesc >= NTBUF)
		next_tdesc = 0;

	if (to)
		return len;

	return -1;
}

int
leclose(struct open_file *f)
{
	LEWRCSR(LE_CSR0, LE_C0_STOP);

	return 0;
}

void
copyout(void *f, int dest, int len)
{
	if (vax_boardtype == VAX_BTYP_60) {
		u_char *from = f;
		u_char *toaddr = (u_char *)lebufaddr + dest;

		while (len-- > 0)
			*toaddr++ = *from++;
	} else {
		short *from = f;
		short *toaddr;

		toaddr = (short *)lebufaddr + dest;

		while (len > 0) {
			*toaddr = *from++;
			toaddr += 2;
			len -= 2;
		}
	}
}

void
copyin(int src, void *f, int len)
{
	if (vax_boardtype == VAX_BTYP_60) {
		u_char *to = f;
		u_char *fromaddr;

		fromaddr = (u_char *)lebufaddr + src;

		while (len-- > 0)
			*to++ = *fromaddr++;
	} else {
		short *to = f;
		short *fromaddr;

		fromaddr = (short *)lebufaddr + src;

		while (len > 0) {
			*to++ = *fromaddr;
			fromaddr += 2;
			len -= 2;
		}
	}
}
@


1.6
log
@Now that KA60 support is in, include the proper header files instead of
harcoding defines, and add rpb device type #39 (sii) boot information.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.5 2008/08/12 17:23:21 miod Exp $ */
@


1.5
log
@Figured out where the prom console routines are on KA60 and how to invoke
them, thanks to old ultrix bootblocks lying around.
Also, enable M-Bus clock on the I/O slot IOCSR, this unstucks the cpu
clocks (which really are implemented on the SSC on the I/O module, but
need to be controlled via the cpu's ``internal'' processor registers...)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.4 2008/08/10 18:20:07 miod Exp $ */
d49 2
a50 2
#include <../include/sid.h>
#include <../include/rpb.h>
d55 3
d157 2
a158 2
		lebufaddr = 0x30a00000 + (ka60_ioslot << 25);
		ea = (int *)(0x30800000 + (ka60_ioslot << 25));
d164 2
a165 1
		nireg = (void *)(0x30200000 + (ka60_ioslot << 25));
@


1.4
log
@Add support for the VAXstation 3[58][24]0 to the bootblocks, currently
limited to serial console. This is enough for a 3520 to mopboot and download
a kernel over NFS.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.3 2003/11/07 10:16:45 jmc Exp $ */
d153 3
a155 3
		extern int ff_ioslot;
		lebufaddr = 0x30a00000 + (ff_ioslot << 25);
		ea = (int *)(0x30800000 + (ff_ioslot << 25));
d161 1
a161 1
		nireg = (void *)(0x30200000 + (ff_ioslot << 25));
@


1.3
log
@adress -> address, and a few more; all from Jonathon Gray;

(mvme68k/mvme88k) vs.c and (vax) if_le.c ok miod@@
isakmpd ones ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.2 2002/06/11 09:36:23 hugh Exp $ */
d107 2
a108 1
static	int addoff, kopiera = 0;
d149 1
a149 1
		kopiera = 1;
d152 10
d181 4
a184 2
	for (i = 0; i < 6; i++)
		eaddr[i] = ea[i] & 0377;
d196 1
a196 1
		if (kopiera)
d200 1
a200 1
		if (kopiera)
d202 1
a202 1
		if (kopiera)
d207 1
a207 1
			if (kopiera)
d212 1
a212 1
		if (kopiera)
d218 1
a218 1
			if (kopiera)
d223 1
a223 1
		if (kopiera)
d228 1
a228 1
	if (kopiera) {
d267 1
a267 1
	if (kopiera)
d279 1
a279 1
		if (kopiera)
d289 1
a289 1
	if (kopiera)
d314 1
a314 1
	if (kopiera)
d320 1
a320 1
	if (kopiera)
d329 1
a329 1
	if (kopiera)
d360 3
a362 2
	short *from = f;
	short *toaddr;
d364 5
a368 1
	toaddr = (short *)0x20120000 + dest;
d370 7
a376 4
	while (len > 0) {
		*toaddr = *from++;
		toaddr += 2;
		len -= 2;
d383 3
a385 2
	short *to = f;
	short *fromaddr;
d387 1
a387 1
	fromaddr = (short *)0x20120000 + src;
d389 13
a401 4
	while (len > 0) {
		*to++ = *fromaddr;
		fromaddr += 2;
		len -= 2;
@


1.2
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
d153 1
a153 1
		ea = (void *)0x20090000; /* XXX ethernetadressen */
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 2
a2 2
/*	$OpenBSD: if_le.c,v 1.1 1998/02/03 11:48:27 maja Exp $ */
/*	$NetBSD: if_le.c,v 1.4 1999/08/14 19:41:14 ragge Exp $ */
d50 1
d53 1
d57 2
d60 1
a60 1
 * The following are incorrect. Why doesn't DEC follow its own specs???
a68 5
#define	QW_ALLOC(x)	((alloc((x) + 7) + 7) & ~7)

int le_probe(), le_match(), le_get(), le_put();
void le_init(), le_end();
static void copyin(), copyout();
d70 1
a70 1
struct netif_stats le_stats;
d72 4
a75 6
struct netif_dif le_ifs[] = {
/*	dif_unit	dif_nsel	dif_stats	dif_private	*/
{	0,		1,		&le_stats,	},
};

struct netif_stats le_stats;
d78 1
a78 1
	"le", le_match, le_probe, le_init, le_get, le_put, le_end, le_ifs, 1,
d98 1
a98 1
} *nireg = (struct nireg *)0x200e0000;
d138 1
a138 18
le_match(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
{
	return strcmp(machdep_hint, "le") == 0;
}

le_probe(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
{
	return 0;
}

void
le_init(desc, machdep_hint)
	struct iodesc *desc;
	void *machdep_hint;
d140 1
a140 1
	int stat, i, *ea;
d142 1
d154 1
d156 4
d171 1
a171 1
		desc->myea[i] = ea[i] & 0377;
d174 2
a175 1
		initblock = (void *)QW_ALLOC(sizeof(struct initblock)) + addoff;
d177 1
a177 1
		bcopy(desc->myea, initblock->ib_padr, 6);
d200 1
a200 1
			copyout(rdesc, (int)rdesc - (int)initblock,
d211 1
a211 1
			copyout(tdesc, (int)tdesc - (int)initblock,
d236 3
d242 1
a242 5
le_get(desc, pkt, maxlen, timeout)
	struct iodesc *desc;
	void *pkt;
	int maxlen;
	time_t timeout;
d256 1
a256 1
		    &rdesc[next_rdesc], sizeof(struct buffdesc));
d270 1
a270 1
			bcopy((void *)(rdesc[next_rdesc].bd_adrflg&0xffffff) +
d277 1
a277 1
		copyout(&rdesc[next_rdesc], (int)&rdesc[next_rdesc] - 
d289 1
a289 4
le_put(desc, pkt, len)
	struct iodesc *desc;
	void *pkt;
	int len;
d303 1
a303 1
		    &tdesc[next_tdesc], sizeof(struct buffdesc));
d310 1
a310 1
		bcopy(pkt, (void *)(tdesc[next_tdesc].bd_adrflg & 0xffffff) +
d317 1
a317 1
		copyout(&tdesc[next_tdesc], (int)&tdesc[next_tdesc] - 
d336 2
a337 2
void
le_end()
d340 2
d345 1
a345 3
copyout(from, dest, len)
	short *from;
	int dest, len;
d347 1
d360 1
a360 3
copyin(src, to, len)
	short *to;
	int src, len;
d362 1
@


1.1.12.1
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: if_le.c,v 1.6 2000/05/20 13:30:03 ragge Exp $ */
a49 1
#include <../include/rpb.h>
a51 1
#include <lib/libsa/stand.h>
a54 2
#include "vaxstand.h"

d56 1
a56 1
 * Buffer sizes.
d65 5
d71 1
a71 1
#define	QW_ALLOC(x)	(((int)alloc((x) + 7) + 7) & ~7)
d73 6
a78 4
static int le_get(struct iodesc *, void *, size_t, time_t);
static int le_put(struct iodesc *, void *, size_t);
static void copyout(void *from, int dest, int len);
static void copyin(int src, void *to, int len);
d81 1
a81 1
	0, 0, 0, 0, le_get, le_put,
d101 1
a101 1
} *nireg;
d141 18
a158 1
leopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d160 1
a160 1
	int i, *ea;
a161 1
	u_char eaddr[6];
a172 1
		nireg = (void *)0x200e0000;
a173 4
	if (askname == 0) /* Override if autoboot */
		nireg = (void *)bootrpb.csrphy;
	else /* Tell kernel from where we booted */
		bootrpb.csrphy = (int)nireg;
d185 1
a185 1
		eaddr[i] = ea[i] & 0377;
d188 1
a188 2
		(void *)initblock =
		    (char *)QW_ALLOC(sizeof(struct initblock)) + addoff;
d190 1
a190 1
		bcopy(eaddr, initblock->ib_padr, 6);
d213 1
a213 1
			copyout((void *)rdesc, (int)rdesc - (int)initblock,
d224 1
a224 1
			copyout((void *)tdesc, (int)tdesc - (int)initblock,
a248 3

	net_devinit(f, &le_driver, eaddr);
	return 0;
d252 5
a256 1
le_get(struct iodesc *desc, void *pkt, size_t maxlen, time_t timeout)
d270 1
a270 1
		    (void *)&rdesc[next_rdesc], sizeof(struct buffdesc));
d284 1
a284 1
			bcopy((char *)(rdesc[next_rdesc].bd_adrflg&0xffffff) +
d291 1
a291 1
		copyout((void *)&rdesc[next_rdesc], (int)&rdesc[next_rdesc] -
d303 4
a306 1
le_put(struct iodesc *desc, void *pkt, size_t len)
d320 1
a320 1
		    (void *)&tdesc[next_tdesc], sizeof(struct buffdesc));
d327 1
a327 1
		bcopy(pkt, (char *)(tdesc[next_tdesc].bd_adrflg & 0xffffff) +
d334 1
a334 1
		copyout((void *)&tdesc[next_tdesc], (int)&tdesc[next_tdesc] -
d353 2
a354 2
int
leclose(struct open_file *f)
a356 2

	return 0;
d360 3
a362 1
copyout(void *f, int dest, int len)
a363 1
	short *from = f;
d376 3
a378 1
copyin(int src, void *f, int len)
a379 1
	short *to = f;
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
@


1.1.8.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: if_le.c,v 1.6 2000/05/20 13:30:03 ragge Exp $ */
a49 1
#include <../include/rpb.h>
a51 1
#include <lib/libsa/stand.h>
a54 2
#include "vaxstand.h"

d56 1
a56 1
 * Buffer sizes.
d65 5
d71 1
a71 1
#define	QW_ALLOC(x)	(((int)alloc((x) + 7) + 7) & ~7)
d73 6
a78 4
static int le_get(struct iodesc *, void *, size_t, time_t);
static int le_put(struct iodesc *, void *, size_t);
static void copyout(void *from, int dest, int len);
static void copyin(int src, void *to, int len);
d81 1
a81 1
	0, 0, 0, 0, le_get, le_put,
d101 1
a101 1
} *nireg;
d141 18
a158 1
leopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d160 1
a160 1
	int i, *ea;
a161 1
	u_char eaddr[6];
a172 1
		nireg = (void *)0x200e0000;
a173 4
	if (askname == 0) /* Override if autoboot */
		nireg = (void *)bootrpb.csrphy;
	else /* Tell kernel from where we booted */
		bootrpb.csrphy = (int)nireg;
d185 1
a185 1
		eaddr[i] = ea[i] & 0377;
d188 1
a188 2
		(void *)initblock =
		    (char *)QW_ALLOC(sizeof(struct initblock)) + addoff;
d190 1
a190 1
		bcopy(eaddr, initblock->ib_padr, 6);
d213 1
a213 1
			copyout((void *)rdesc, (int)rdesc - (int)initblock,
d224 1
a224 1
			copyout((void *)tdesc, (int)tdesc - (int)initblock,
a248 3

	net_devinit(f, &le_driver, eaddr);
	return 0;
d252 5
a256 1
le_get(struct iodesc *desc, void *pkt, size_t maxlen, time_t timeout)
d270 1
a270 1
		    (void *)&rdesc[next_rdesc], sizeof(struct buffdesc));
d284 1
a284 1
			bcopy((char *)(rdesc[next_rdesc].bd_adrflg&0xffffff) +
d291 1
a291 1
		copyout((void *)&rdesc[next_rdesc], (int)&rdesc[next_rdesc] -
d303 4
a306 1
le_put(struct iodesc *desc, void *pkt, size_t len)
d320 1
a320 1
		    (void *)&tdesc[next_tdesc], sizeof(struct buffdesc));
d327 1
a327 1
		bcopy(pkt, (char *)(tdesc[next_tdesc].bd_adrflg & 0xffffff) +
d334 1
a334 1
		copyout((void *)&tdesc[next_tdesc], (int)&tdesc[next_tdesc] -
d353 2
a354 2
int
leclose(struct open_file *f)
a356 2

	return 0;
d360 3
a362 1
copyout(void *f, int dest, int len)
a363 1
	short *from = f;
d376 3
a378 1
copyin(int src, void *f, int len)
a379 1
	short *to = f;
@


1.1.8.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d153 1
a153 1
		ea = (void *)0x20090000; /* XXX Ethernet address */
@


