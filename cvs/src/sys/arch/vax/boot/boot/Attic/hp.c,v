head	1.4;
access;
symbols
	OPENBSD_4_9:1.2.0.36
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.34
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.30
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.32
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.28
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.21.37.45;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: hp.c,v 1.3 2011/03/13 00:13:53 deraadt Exp $ */
/*	$NetBSD: hp.c,v 1.5 2000/07/19 00:58:25 matt Exp $ */
/*
 * Copyright (c) 1994 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

 /* All bugs are subject to removal without further notice */
		


#include "sys/param.h"
#include "sys/disklabel.h"

#include "lib/libsa/stand.h"

#include "../include/pte.h"
#include "../include/rpb.h"
#include "../include/sid.h"
#define VAX780 1
struct proc;
#include "../include/ka750.h"

#include "../mba/mbareg.h"
#include "../mba/hpreg.h"

#include "vaxstand.h"

/*
 * These routines for HP disk standalone boot is wery simple,
 * assuming a lots of thing like that we only working at one hp disk
 * a time, no separate routines for mba driver etc..
 * But it works :)
 */

static struct disklabel hplabel;
static char io_buf[DEV_BSIZE];
static int dpart;
static int adpadr, unitadr;

#define	MBA_WCSR(reg, val) \
	((void)(*(volatile u_int32_t *)((adpadr) + (reg)) = (val)));
#define MBA_RCSR(reg) \
	(*(volatile u_int32_t *)((adpadr) + (reg)))
#define	HP_WCSR(reg, val) \
	((void)(*(volatile u_int32_t *)((unitadr) + (reg)) = (val)));
#define HP_RCSR(reg) \
	(*(volatile u_int32_t *)((unitadr) + (reg)))

int
hpopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
{
	char *msg;
	int err;
	size_t i;

	if (askname == 0) { /* Take info from RPB */
		adpadr = bootrpb.adpphy;
		unitadr = adpadr + MUREG(bootrpb.unit, 0);
	} else {
		adpadr = nexaddr;
		unitadr = adpadr + MUREG(unit, 0);
		bootrpb.adpphy = adpadr;
		bootrpb.unit = unit;
	}
	bzero(&hplabel, sizeof(struct disklabel));

	hplabel.d_secpercyl = 32;
	hplabel.d_nsectors = 32;

	/* Set volume valid and 16 bit format; only done once */
	MBA_WCSR(MBA_CR, MBACR_INIT);
	HP_WCSR(HP_CS1, HPCS_PA);
	HP_WCSR(HP_OF, HPOF_FMT);

	err = hpstrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
	if (err) {
		printf("reading disklabel: %s\n", strerror(err));
		return 0;
	}

	msg = getdisklabel(io_buf + LABELOFFSET, &hplabel);
	if (msg)
		printf("getdisklabel: %s\n", msg);
	return 0;
}

int
hpstrategy(void *f, int func, daddr32_t dblk,
    size_t size, void *buf, size_t *rsize)
{
	unsigned int pfnum, mapnr, nsize, bn, cn, sn, tn;

	pfnum = (u_int)buf >> VAX_PGSHIFT;

	for(mapnr = 0, nsize = size; (nsize + VAX_NBPG) > 0;
	    nsize -= VAX_NBPG, mapnr++, pfnum++)
		MBA_WCSR(MAPREG(mapnr), PG_V | pfnum);

	MBA_WCSR(MBA_VAR, ((u_int)buf & VAX_PGOFSET));
	MBA_WCSR(MBA_BC, (~size) + 1);
	bn = dblk + hplabel.d_partitions[dpart].p_offset;

	if (bn) {
		cn = bn / hplabel.d_secpercyl;
		sn = bn % hplabel.d_secpercyl;
		tn = sn / hplabel.d_nsectors;
		sn = sn % hplabel.d_nsectors;
	} else
		cn = sn = tn = 0;

	HP_WCSR(HP_DC, cn);
	HP_WCSR(HP_DA, (tn << 8) | sn);
#ifdef notdef
	if (func == F_WRITE)
		HP_WCSR(HP_CS1, HPCS_WRITE);
	else
#endif
		HP_WCSR(HP_CS1, HPCS_READ);

	while (MBA_RCSR(MBA_SR) & MBASR_DTBUSY)
		;

	if (MBA_RCSR(MBA_SR) & MBACR_ABORT)
		return 1;

	*rsize = size;
	return 0;
}
@


1.3
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: hp.c,v 1.2 2002/06/11 09:36:23 hugh Exp $ */
@


1.2
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD: hp.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
d114 1
a114 1
hpstrategy(void *f, int func, daddr_t dblk,
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 2
a2 2
/*	$OpenBSD: hp.c,v 1.4 1998/05/13 07:30:22 niklas Exp $ */
/*	$NetBSD: hp.c,v 1.2 1999/04/01 20:40:07 ragge Exp $ */
d43 5
a47 1
/*#include "../include/macros.h"*/
d61 16
a76 15
struct	hp_softc {
	int adapt;
	int ctlr;
	int unit;
	int part;
};

struct	disklabel hplabel;
struct	hp_softc hp_softc;
char io_buf[DEV_BSIZE];
daddr_t part_offset;

hpopen(f, adapt, ctlr, unit, part)
	struct open_file *f;
        int ctlr, unit, part;
a77 4
	struct disklabel *lp;
	struct hp_softc *hs;
	volatile struct mba_regs *mr;
	volatile struct hp_drv *hd;
d79 13
a91 1
	int i,err;
d93 2
a94 17
	lp = &hplabel;
	hs = &hp_softc;
	mr = (void *)mbaaddr[ctlr];
	hd = (void *)&mr->mba_md[unit];

	if (adapt > nsbi) return(EADAPT);
	if (ctlr > nmba) return(ECTLR);
	if (unit > MAXMBAU) return(EUNIT);

	bzero(lp, sizeof(struct disklabel));

	lp->d_secpercyl = 32;
	lp->d_nsectors = 32;
	hs->adapt = adapt;
	hs->ctlr = ctlr;
	hs->unit = unit;
	hs->part = part;
d97 3
a99 3
	mr->mba_cr = MBACR_INIT;
	hd->hp_cs1 = HPCS_PA;
	hd->hp_of = HPOF_FMT;
d101 1
a101 1
	err = hpstrategy(hs, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d107 1
a107 1
	msg = getdisklabel(io_buf + LABELOFFSET, lp);
a109 2
	
	f->f_devdata = (void *)hs;
d113 3
a115 6
hpstrategy(hs, func, dblk, size, buf, rsize)
	struct hp_softc *hs;
	daddr_t	dblk;
	u_int size, *rsize;
	char *buf;
	int func;
d117 1
a117 8
	volatile struct mba_regs *mr;
	volatile struct hp_drv *hd;
	struct disklabel *lp;
	unsigned int i, pfnum, mapnr, nsize, bn, cn, sn, tn;

	mr = (void *)mbaaddr[hs->ctlr];
	hd = (void *)&mr->mba_md[hs->unit];
	lp = &hplabel;
d121 7
a127 6
	for(mapnr = 0, nsize = size; (nsize + VAX_NBPG) > 0; nsize -= VAX_NBPG)
		*(int *)&mr->mba_map[mapnr++] = PG_V | pfnum++;

	mr->mba_var = ((u_int)buf & VAX_PGOFSET);
	mr->mba_bc = (~size) + 1;
	bn = dblk + lp->d_partitions[hs->part].p_offset;
d130 4
a133 4
		cn = bn / lp->d_secpercyl;
		sn = bn % lp->d_secpercyl;
		tn = sn / lp->d_nsectors;
		sn = sn % lp->d_nsectors;
d137 3
a139 2
	hd->hp_dc = cn;
	hd->hp_da = (tn << 8) | sn;
d141 1
a141 1
		hd->hp_cs1 = HPCS_WRITE;
d143 2
a144 1
		hd->hp_cs1 = HPCS_READ;
d146 1
a146 1
	while (mr->mba_sr & MBASR_DTBUSY)
d149 1
a149 1
	if (mr->mba_sr & MBACR_ABORT)
d151 1
a151 1
	
a152 1

@


1.1.12.1
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: hp.c,v 1.5 2000/07/19 00:58:25 matt Exp $ */
d43 1
a43 5
#include "../include/rpb.h"
#include "../include/sid.h"
#define VAX780 1
struct proc;
#include "../include/ka750.h"
d57 15
a71 16
static struct disklabel hplabel;
static char io_buf[DEV_BSIZE];
static int dpart;
static int adpadr, unitadr;

#define	MBA_WCSR(reg, val) \
	((void)(*(volatile u_int32_t *)((adpadr) + (reg)) = (val)));
#define MBA_RCSR(reg) \
	(*(volatile u_int32_t *)((adpadr) + (reg)))
#define	HP_WCSR(reg, val) \
	((void)(*(volatile u_int32_t *)((unitadr) + (reg)) = (val)));
#define HP_RCSR(reg) \
	(*(volatile u_int32_t *)((unitadr) + (reg)))

int
hpopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d73 4
d78 1
a78 13
	int err;
	size_t i;

	if (askname == 0) { /* Take info from RPB */
		adpadr = bootrpb.adpphy;
		unitadr = adpadr + MUREG(bootrpb.unit, 0);
	} else {
		adpadr = nexaddr;
		unitadr = adpadr + MUREG(unit, 0);
		bootrpb.adpphy = adpadr;
		bootrpb.unit = unit;
	}
	bzero(&hplabel, sizeof(struct disklabel));
d80 17
a96 2
	hplabel.d_secpercyl = 32;
	hplabel.d_nsectors = 32;
d99 3
a101 3
	MBA_WCSR(MBA_CR, MBACR_INIT);
	HP_WCSR(HP_CS1, HPCS_PA);
	HP_WCSR(HP_OF, HPOF_FMT);
d103 1
a103 1
	err = hpstrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d109 1
a109 1
	msg = getdisklabel(io_buf + LABELOFFSET, &hplabel);
d112 2
d117 6
a122 3
int
hpstrategy(void *f, int func, daddr_t dblk,
    size_t size, void *buf, size_t *rsize)
d124 8
a131 1
	unsigned int pfnum, mapnr, nsize, bn, cn, sn, tn;
d135 6
a140 7
	for(mapnr = 0, nsize = size; (nsize + VAX_NBPG) > 0;
	    nsize -= VAX_NBPG, mapnr++, pfnum++)
		MBA_WCSR(MAPREG(mapnr), PG_V | pfnum);

	MBA_WCSR(MBA_VAR, ((u_int)buf & VAX_PGOFSET));
	MBA_WCSR(MBA_BC, (~size) + 1);
	bn = dblk + hplabel.d_partitions[dpart].p_offset;
d143 4
a146 4
		cn = bn / hplabel.d_secpercyl;
		sn = bn % hplabel.d_secpercyl;
		tn = sn / hplabel.d_nsectors;
		sn = sn % hplabel.d_nsectors;
d150 2
a151 3
	HP_WCSR(HP_DC, cn);
	HP_WCSR(HP_DA, (tn << 8) | sn);
#ifdef notdef
d153 1
a153 1
		HP_WCSR(HP_CS1, HPCS_WRITE);
d155 1
a155 2
#endif
		HP_WCSR(HP_CS1, HPCS_READ);
d157 1
a157 1
	while (MBA_RCSR(MBA_SR) & MBASR_DTBUSY)
d160 1
a160 1
	if (MBA_RCSR(MBA_SR) & MBACR_ABORT)
d162 2
a164 1
	*rsize = size;
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: hp.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
@


1.1.8.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: hp.c,v 1.5 2000/07/19 00:58:25 matt Exp $ */
d43 1
a43 5
#include "../include/rpb.h"
#include "../include/sid.h"
#define VAX780 1
struct proc;
#include "../include/ka750.h"
d57 15
a71 16
static struct disklabel hplabel;
static char io_buf[DEV_BSIZE];
static int dpart;
static int adpadr, unitadr;

#define	MBA_WCSR(reg, val) \
	((void)(*(volatile u_int32_t *)((adpadr) + (reg)) = (val)));
#define MBA_RCSR(reg) \
	(*(volatile u_int32_t *)((adpadr) + (reg)))
#define	HP_WCSR(reg, val) \
	((void)(*(volatile u_int32_t *)((unitadr) + (reg)) = (val)));
#define HP_RCSR(reg) \
	(*(volatile u_int32_t *)((unitadr) + (reg)))

int
hpopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d73 4
d78 1
a78 13
	int err;
	size_t i;

	if (askname == 0) { /* Take info from RPB */
		adpadr = bootrpb.adpphy;
		unitadr = adpadr + MUREG(bootrpb.unit, 0);
	} else {
		adpadr = nexaddr;
		unitadr = adpadr + MUREG(unit, 0);
		bootrpb.adpphy = adpadr;
		bootrpb.unit = unit;
	}
	bzero(&hplabel, sizeof(struct disklabel));
d80 17
a96 2
	hplabel.d_secpercyl = 32;
	hplabel.d_nsectors = 32;
d99 3
a101 3
	MBA_WCSR(MBA_CR, MBACR_INIT);
	HP_WCSR(HP_CS1, HPCS_PA);
	HP_WCSR(HP_OF, HPOF_FMT);
d103 1
a103 1
	err = hpstrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d109 1
a109 1
	msg = getdisklabel(io_buf + LABELOFFSET, &hplabel);
d112 2
d117 6
a122 3
int
hpstrategy(void *f, int func, daddr_t dblk,
    size_t size, void *buf, size_t *rsize)
d124 8
a131 1
	unsigned int pfnum, mapnr, nsize, bn, cn, sn, tn;
d135 6
a140 7
	for(mapnr = 0, nsize = size; (nsize + VAX_NBPG) > 0;
	    nsize -= VAX_NBPG, mapnr++, pfnum++)
		MBA_WCSR(MAPREG(mapnr), PG_V | pfnum);

	MBA_WCSR(MBA_VAR, ((u_int)buf & VAX_PGOFSET));
	MBA_WCSR(MBA_BC, (~size) + 1);
	bn = dblk + hplabel.d_partitions[dpart].p_offset;
d143 4
a146 4
		cn = bn / hplabel.d_secpercyl;
		sn = bn % hplabel.d_secpercyl;
		tn = sn / hplabel.d_nsectors;
		sn = sn % hplabel.d_nsectors;
d150 2
a151 3
	HP_WCSR(HP_DC, cn);
	HP_WCSR(HP_DA, (tn << 8) | sn);
#ifdef notdef
d153 1
a153 1
		HP_WCSR(HP_CS1, HPCS_WRITE);
d155 1
a155 2
#endif
		HP_WCSR(HP_CS1, HPCS_READ);
d157 1
a157 1
	while (MBA_RCSR(MBA_SR) & MBASR_DTBUSY)
d160 1
a160 1
	if (MBA_RCSR(MBA_SR) & MBACR_ABORT)
d162 2
a164 1
	*rsize = size;
@


