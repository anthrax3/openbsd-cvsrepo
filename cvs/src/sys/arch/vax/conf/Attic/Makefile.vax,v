head	1.75;
access;
symbols
	OPENBSD_5_9:1.74.0.4
	OPENBSD_5_9_BASE:1.74
	OPENBSD_5_8:1.74.0.6
	OPENBSD_5_8_BASE:1.74
	OPENBSD_5_7:1.74.0.2
	OPENBSD_5_7_BASE:1.74
	OPENBSD_5_6:1.71.0.4
	OPENBSD_5_6_BASE:1.71
	OPENBSD_5_5:1.70.0.4
	OPENBSD_5_5_BASE:1.70
	OPENBSD_5_4:1.69.0.2
	OPENBSD_5_4_BASE:1.69
	OPENBSD_5_3:1.66.0.2
	OPENBSD_5_3_BASE:1.66
	OPENBSD_5_2:1.65.0.4
	OPENBSD_5_2_BASE:1.65
	OPENBSD_5_1_BASE:1.65
	OPENBSD_5_1:1.65.0.2
	OPENBSD_5_0:1.64.0.2
	OPENBSD_5_0_BASE:1.64
	OPENBSD_4_9:1.61.0.2
	OPENBSD_4_9_BASE:1.61
	OPENBSD_4_8:1.58.0.2
	OPENBSD_4_8_BASE:1.58
	OPENBSD_4_7:1.35.0.2
	OPENBSD_4_7_BASE:1.35
	OPENBSD_4_6:1.33.0.6
	OPENBSD_4_6_BASE:1.33
	OPENBSD_4_5:1.33.0.2
	OPENBSD_4_5_BASE:1.33
	OPENBSD_4_4:1.32.0.2
	OPENBSD_4_4_BASE:1.32
	OPENBSD_4_3:1.31.0.2
	OPENBSD_4_3_BASE:1.31
	OPENBSD_4_2:1.28.0.2
	OPENBSD_4_2_BASE:1.28
	OPENBSD_4_1:1.27.0.4
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.26.0.10
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.26.0.8
	OPENBSD_3_8_BASE:1.26
	OPENBSD_3_7:1.26.0.6
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.4
	OPENBSD_3_6_BASE:1.26
	SMP_SYNC_A:1.26
	SMP_SYNC_B:1.26
	OPENBSD_3_5:1.26.0.2
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	UBC_SYNC_A:1.23
	OPENBSD_3_3:1.21.0.2
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.19
	UBC:1.16.0.4
	UBC_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.6
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	SMP:1.12.0.8
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.6
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.4
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.75
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.74;
commitid	OSDG2O3Cgeifnf1W;

1.74
date	2015.01.13.01.12.50;	author deraadt;	state Exp;
branches;
next	1.73;
commitid	xEYSgcMiEU7N21VE;

1.73
date	2015.01.11.19.25.14;	author tedu;	state Exp;
branches;
next	1.72;
commitid	Jqptj5xcqx8IMSNU;

1.72
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.71;
commitid	iaz4yUwbbR9oynrV;

1.71
date	2014.05.08.19.06.35;	author miod;	state Exp;
branches;
next	1.70;

1.70
date	2013.10.15.19.23.31;	author guenther;	state Exp;
branches;
next	1.69;

1.69
date	2013.07.05.21.11.57;	author miod;	state Exp;
branches;
next	1.68;

1.68
date	2013.06.23.20.33.52;	author miod;	state Exp;
branches;
next	1.67;

1.67
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.66;

1.66
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.65;

1.65
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.64;

1.64
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.63;

1.63
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.62;

1.62
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.61;

1.61
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2010.12.02.04.35.03;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2010.06.01.23.49.23;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2010.05.29.14.08.20;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.55;

1.55
date	2010.05.26.16.35.27;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2010.05.25.17.27.56;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2010.05.25.15.05.02;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2010.05.25.02.35.03;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.05.24.19.58.51;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2010.04.28.15.31.34;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.45;

1.45
date	2010.04.27.16.40.55;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2010.04.27.05.05.22;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.27.04.31.48;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2010.04.27.03.37.38;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2010.04.26.22.11.38;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2010.04.26.20.50.17;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2010.04.26.18.58.31;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2009.10.19.19.46.57;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.32;

1.32
date	2008.04.12.21.04.17;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2007.11.25.18.25.29;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.27;

1.27
date	2006.07.27.05.58.12;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.24.16.11.25;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.26.13.06.22;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2003.05.13.22.45.11;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.13.06.12.44;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.25.21.10.26;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2002.12.02.09.00.26;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2002.08.09.20.24.43;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.23.18.34.50;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.15.13.10.51;	author assar;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	2001.06.17.21.39.30;	author hugh;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.15.22.45.27;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.27.05.47.15;	author bjc;	state Exp;
branches;
next	1.12;

1.12
date	98.05.17.10.31.03;	author niklas;	state Exp;
branches
	1.12.8.1;
next	1.11;

1.11
date	98.05.17.10.22.46;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	98.05.11.16.35.07;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	98.05.11.15.37.23;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.10.02.19.56.06;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.09.15.02.40.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.09.10.07.34.19;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	97.01.15.23.24.30;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	96.06.12.08.20.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.09.09.08;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.11.13.06.49.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.04;	author deraadt;	state Exp;
branches;
next	;

1.12.8.1
date	2001.05.14.21.37.52;	author niklas;	state Exp;
branches;
next	1.12.8.2;

1.12.8.2
date	2001.07.04.10.24.20;	author niklas;	state Exp;
branches;
next	1.12.8.3;

1.12.8.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.12.8.4;

1.12.8.4
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.12.8.5;

1.12.8.5
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	1.12.8.6;

1.12.8.6
date	2003.05.16.00.29.41;	author niklas;	state Exp;
branches;
next	1.12.8.7;

1.12.8.7
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;

1.16.4.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.16.4.2;

1.16.4.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	1.16.4.3;

1.16.4.3
date	2003.05.19.21.46.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.75
log
@We are done providing support for the vax.
lots of agreement.
@
text
@#	$OpenBSD: Makefile.vax,v 1.74 2015/01/13 01:12:50 deraadt Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I. -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-main -Wno-uninitialized \
		-Wframe-larger-than=2047

CMACHFLAGS=
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp \
		${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-N -Ttext 80000000 -e __start --warn-common

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S -x
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.S assym.h
unimpl_emul.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.74
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.73 2015/01/11 19:25:14 tedu Exp $
@


1.73
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.72 2014/10/04 18:10:14 brad Exp $
d150 1
a150 2
	rm -f /obsd
	ln /bsd /obsd
@


1.72
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.71 2014/05/08 19:06:35 miod Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.71
log
@No longer build vax kernels with -Wno-format.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.70 2013/10/15 19:23:31 guenther Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.70
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.69 2013/07/05 21:11:57 miod Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.69
log
@VAX ELF kernel bits.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.68 2013/06/23 20:33:52 miod Exp $
d136 1
a136 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d138 1
a138 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.68
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.67 2013/03/30 07:25:20 tedu Exp $
d42 1
a42 1
LINKFLAGS=	-N -Ttext 80000000 -e start
d81 1
a81 1
STRIPFLAGS=	-g
d87 1
a87 1
LINKFLAGS+=	-S
@


1.67
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.66 2012/08/22 16:58:26 pascal Exp $
d40 2
a41 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
@


1.66
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.65 2011/11/08 18:41:34 matthieu Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.65
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.64 2011/07/07 22:28:18 guenther Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.64
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.63 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.63
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.62 2011/04/15 02:41:28 guenther Exp $
d161 5
a165 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.62
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.61 2010/12/30 18:49:31 deraadt Exp $
d122 1
a122 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.61
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.60 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL
d71 2
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d92 5
d100 2
a101 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d130 3
a135 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d137 1
a137 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d154 12
@


1.60
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.59 2010/12/02 04:35:03 deraadt Exp $
d94 2
a95 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.59
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.58 2010/06/01 23:49:23 deraadt Exp $
d70 2
a71 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.58
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.57 2010/05/29 14:08:20 deraadt Exp $
d70 1
a70 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.57
log
@merge subr.s into locore.S, which requires a fairly complicated dance
mixing and matching the various styles of *ENTRY* macros
prescribed by miod, ok ragge, tested by jasper
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.56 2010/05/28 14:27:08 guenther Exp $
a42 1
STRIPFLAGS=	-d
d80 1
@


1.56
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.55 2010/05/26 16:35:27 deraadt Exp $
d71 1
a71 1
SYSTEM_OBJ=	locore.o subr.o param.o ioconf.o ${OBJS}
d127 1
a127 1
AFILES=	${_machdir}/${_mach}/locore.S ${_machdir}/${_mach}/subr.s
d147 1
a147 1
subr.o unimpl_emul.o: assym.h
@


1.55
log
@rename intvec.s to locore.S, and add the guts of locore.C to machdep.c
ok miod ragge
We cannot yet get at vax/subr.s via files.vax because rdsetroot doesn't
like it when the "start" symbol isn't in the first page of the executable.
subr.s will have to be merged into locore.S later on, when other problems
with ENTRY() are solved (says Miod)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.54 2010/05/25 17:27:56 deraadt Exp $
d94 1
a94 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.54
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.53 2010/05/25 15:05:02 deraadt Exp $
d71 1
a71 1
SYSTEM_OBJ=	intvec.o subr.o param.o ioconf.o ${OBJS}
d127 1
a127 1
AFILES=	${_machdir}/${_mach}/intvec.s ${_machdir}/${_mach}/subr.s
d146 2
a147 3
intvec.o: ${_machdir}/${_mach}/intvec.s assym.h
subr.o: ${_machdir}/${_mach}/subr.s assym.h
unimpl_emul.o: assym.h
@


1.53
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.52 2010/05/25 02:35:03 deraadt Exp $
a21 2
_mach?=		vax
_arch?=		vax
@


1.52
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.51 2010/05/24 23:19:22 deraadt Exp $
a148 2
	${NORMAL_S}

d150 1
a150 1
	${NORMAL_S}
@


1.51
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.50 2010/05/24 19:58:51 deraadt Exp $
a129 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d131 1
a131 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.50
log
@use the same idiom for stripping gdb kernels.  This relies on strip -o
support for the non-binutils architectures (and that diff is coming..)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.49 2010/05/24 17:49:37 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d119 1
a119 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d123 1
a123 1
	    ${CFILES} ioconf.c param.c ${_machdir}/${_mach}/Locore.c | \
d129 2
a130 11
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/intvec.s ${_machdir}/${_mach}/subr.s \
	param.c ioconf.c ${CFILES} ${SFILES}

d133 1
a133 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/intvec.s ${_machdir}/${_mach}/subr.s
a147 1

@


1.49
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.48 2010/05/24 14:59:16 deraadt Exp $
d84 1
a84 1
		echo mv -f $@@ $@@.gdb; mv -f $@@ $@@.gdb; \
@


1.48
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.47 2010/04/28 15:31:34 deraadt Exp $
d144 1
d146 1
@


1.47
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.46 2010/04/27 17:25:19 drahn Exp $
d28 3
a30 3
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D_VAX_INLINE_
CWARNFLAGS?=	-Werror -Wall -Wmissing-prototypes -Wstrict-prototypes \
		-Wno-main -Wno-format -Wno-uninitialized \
d33 4
a39 1
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log
d42 2
a43 2
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
d53 1
a53 1
HOSTED_CC= ${CC}
d56 1
a56 3

# compile rules: rules are named ${TYPE}_${SUFFIX} where TYPE is NORMAL or
# HOSTED}, and SUFFIX is the file suffix, capitalized (e.g. C for a .c file).
a59 1
NOPROF_C=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
a61 2
HOSTED_C=	${HOSTED_CC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

d118 1
a118 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d123 1
a123 2
	    ${_machdir}/${_mach}/Locore.c ${CFILES} \
	    ioconf.c param.c | \
@


1.46
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.45 2010/04/27 16:40:55 deraadt Exp $
d138 1
a138 1
	sh makelinks && rm -f dontlink
@


1.45
log
@A lot of the sections in this were out of whack with the order they
normally occur in other architectures.  This compiles a kernel fine.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.44 2010/04/27 06:46:26 deraadt Exp $
d27 1
a27 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.44
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.43 2010/04/27 05:07:29 deraadt Exp $
a12 6
%OBJS

%CFILES

%SFILES

d14 1
a14 18

# check for cross-compilation
.if ${MACHINE} != "vax"
CROSSDIR?=  /usr/cross/vax

CBIN=${CROSSDIR}/usr/bin
MACHINE=vax
MACHINE_ARCH=vax
AS=${CBIN}/as
CC=${CBIN}/cc
CPP=${CBIN}/cpp
HOSTCC=cc
LD=${CBIN}/ld
STRIP=${CBIN}/strip
SIZE=${CBIN}/size

.else

a15 5
SIZE?=	size

.endif

COPTS?= -O2
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL \
		-D_VAX_INLINE_
d32 1
d37 2
d50 1
a50 1
HOSTED_CC=	${CC}
d63 6
@


1.43
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.42 2010/04/27 05:05:22 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/vax/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/vax/conf/Makefile.vax
# after which config should be rerun for all machines of that type.
@


1.42
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.41 2010/04/27 04:31:48 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.41
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.40 2010/04/27 03:37:38 deraadt Exp $
d156 1
a156 1
	    ${_machdir}/vax/Locore.c ${CFILES} \
d171 1
a171 1
SRCS=	${_machdir}/vax/intvec.s ${_machdir}/vax/subr.s \
d176 1
a176 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/vax/intvec.s ${_machdir}/vax/subr.s
d191 1
a191 1
intvec.o: ${_machdir}/vax/intvec.s assym.h
d194 1
a194 1
subr.o: ${_machdir}/vax/subr.s assym.h
@


1.40
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.39 2010/04/26 22:21:15 deraadt Exp $
d180 1
a180 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.39
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.38 2010/04/26 22:11:38 deraadt Exp $
a189 14


# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration
tmscp.o ts.o uba.o uda.o autoconf.o clock.o conf.o emulate.o intvec.o: Makefile
machdep.o sbi.o subr.o: Makefile
@


1.38
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.37 2010/04/26 20:50:17 deraadt Exp $
a61 1
_machdir?=	$S/arch/vax
d63 2
a64 1
_archdir?=	$S/arch/vax
@


1.37
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.36 2010/04/26 18:58:31 deraadt Exp $
d126 5
a130 3
assym.h: $S/kern/genassym.sh ${_machdir}/vax/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${_machdir}/vax/genassym.cf > assym.h.tmp && \
d150 1
a150 2
clean::	cleankernel
cleankernel:
d179 3
a181 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/vax/genassym.cf
@


1.36
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.35 2009/10/19 19:46:57 guenther Exp $
d60 5
a64 1
VAX=	$S/arch/vax
d126 1
a126 1
assym.h: $S/kern/genassym.sh ${VAX}/vax/genassym.cf Makefile
d128 1
a128 1
	    < ${VAX}/vax/genassym.cf > assym.h.tmp && \
d155 1
a155 1
	    ${VAX}/vax/Locore.c ${CFILES} \
d170 1
a170 1
SRCS=	${VAX}/vax/intvec.s ${VAX}/vax/subr.s \
d175 1
a175 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${VAX}/vax/intvec.s ${VAX}/vax/subr.s
d179 1
a179 1
	    ${CPPFLAGS} < ${VAX}/vax/genassym.cf
d204 1
a204 1
intvec.o: ${VAX}/vax/intvec.s assym.h
d207 1
a207 1
subr.o: ${VAX}/vax/subr.s assym.h
@


1.35
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile.vax,v 1.34 2009/08/09 23:04:49 miod Exp $
#	$NetBSD: Makefile.vax,v 1.49 1999/07/26 05:20:49 cgd Exp $
a2 2
# Makefile for OpenBSD/vax
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d37 4
a40 4
MACHINE=vax 
MACHINE_ARCH=vax 
AS=${CBIN}/as 
CC=${CBIN}/cc 
d42 4
a45 4
HOSTCC=cc 
LD=${CBIN}/ld 
STRIP=${CBIN}/strip 
SIZE=${CBIN}/size 
d188 3
a190 3
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 
d195 1
a195 1
# depend on CPU configuration 
@


1.34
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.33 2009/01/11 21:02:03 pirofti Exp $
d143 1
a143 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.33
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.32 2008/04/12 21:04:17 miod Exp $
d80 6
d150 1
a150 1
		[Ee]rrs linterrs makelinks assym.h
d173 1
a173 1
.depend: ${SRCS} assym.h param.c
d182 5
@


1.32
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.31 2007/11/30 07:52:06 miod Exp $
d173 2
a174 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.31
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.30 2007/11/25 18:25:29 deraadt Exp $
d70 1
a70 1
		-Wstack-larger-than-2047
@


1.30
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.29 2007/11/25 11:23:33 deraadt Exp $
d87 1
@


1.29
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.28 2007/07/30 16:23:33 thib Exp $
a83 9
### find out what to use for libkern
KERN_AS=	obj
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=        ${KERNLIB_PROF}
.endif

d98 1
a98 1
SYSTEM_OBJ=	intvec.o subr.o param.o ioconf.o ${OBJS} ${LIBKERN}
d129 3
@


1.28
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.27 2006/07/27 05:58:12 miod Exp $
a92 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=      ${COMPATLIB}
.else
LIBCOMPAT=      ${COMPATLIB_PROF}
.endif

d107 1
a107 2
SYSTEM_OBJ=	intvec.o subr.o \
		param.o ioconf.o ${OBJS} ${LIBCOMPAT} ${LIBKERN}
@


1.27
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.26 2003/11/24 16:11:25 espie Exp $
d65 1
a65 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
@


1.26
log
@-fno-builtin, checked by millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.25 2003/07/22 19:39:50 otto Exp $
d69 2
a70 1
		-Wno-main -Wno-format -Wno-uninitialized
@


1.25
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.24 2003/06/26 13:06:22 miod Exp $
d73 1
@


1.24
log
@Compile the vax kernel with -Wmissing-prototypes -Wstrict-prototypes now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.23 2003/05/13 22:45:11 miod Exp $
d183 4
@


1.23
log
@Add option NO_PROPOLICE, which explicitely disables the use of the propolice
stack protection when building kernels. Intended to be used on installation
media, with tight space constraints - currently, only added where
SMALL_KERNEL was already defined.

Not thoroughly tested, but requested by deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.22 2003/05/13 06:12:44 tedu Exp $
d68 2
a69 1
CWARNFLAGS?=	-Werror -Wall -Wno-main -Wno-format -Wno-uninitialized
@


1.22
log
@remove -fno-stack-protector (enable propolice)
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.21 2002/12/25 21:10:26 miod Exp $
d69 3
@


1.21
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.20 2002/12/02 09:00:26 miod Exp $
a68 1
CMACHFLAGS=	-fno-stack-protector
@


1.20
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.19 2002/08/09 20:24:43 miod Exp $
a41 1
AR=${CBIN}/ar 
a46 2
NM=${CBIN}/nm 
RANLIB=${CBIN}/ranlib 
a51 8
AR?=	ar
AS?=	as
CC?=	cc
CPP?=	cpp
LORDER?=lorder
LD?=	ld
NM?=	nm
RANLIB?=ranlib
a56 1
TSORT?=	tsort -q
@


1.19
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.18 2002/06/22 14:05:51 millert Exp $
d81 2
a82 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${PIPE}
@


1.18
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.17 2002/02/23 18:34:50 deraadt Exp $
d142 1
a142 1
assym.h: $S/kern/genassym.sh ${VAX}/vax/genassym.cf
@


1.17
log
@switch vax to -O2, from hugh
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.16 2001/07/15 13:10:51 assar Exp $
d81 1
a81 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS}
@


1.16
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.15 2001/06/17 21:39:30 hugh Exp $
d69 1
a69 1
COPTS?= -O0
@


1.16.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.16 2001/07/15 13:10:51 assar Exp $
d69 1
a69 1
COPTS?= -O2
@


1.16.4.2
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.16.4.1 2002/06/11 03:39:18 art Exp $
d81 1
a81 1
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${PIPE}
d142 1
a142 1
assym.h: $S/kern/genassym.sh ${VAX}/vax/genassym.cf Makefile
@


1.16.4.3
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d42 1
d48 2
d55 8
d68 1
d81 1
a81 4
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
@


1.15
log
@Add -Wno-uninitialized.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.14 2001/06/15 22:45:27 miod Exp $
d25 2
d212 12
@


1.14
log
@Compile kernel with -Wall, and fix a few issues for this to work.
ok hugh@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.13 2000/04/27 05:47:15 bjc Exp $
d78 1
a78 1
CWARNFLAGS?=	-Werror -Wall -Wno-main -Wno-format
@


1.13
log
@sync -- enabled devices in GENERIC should be working
@
text
@d1 1
a1 1
#	$OpenBSD$
a24 2


a74 1
HAVE_GCC28!=	${CC} --version | egrep "^(2\.8|egcs)" ; echo 
d78 1
a78 5
CWARNFLAGS?=	-Werror 

.if (${HAVE_GCC28} != "")
CWARNFLAGS+=	-Wno-main
.endif
a79 3
.if (${HAVE_GCC28} != "")
CFLAGS+=	-mno-pic
.endif
@


1.12
log
@Intercept all targets in cross-mode
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.vax,v 1.10 1998/05/11 16:35:07 niklas Exp $
#	$NetBSD: Makefile.vax,v 1.32 1997/03/14 23:27:35 mycroft Exp $
d4 1
a4 1
# Makefile for OpenBSD
d25 11
d37 15
a51 1
CROSSDIR?=	/usr/cross/vax
a52 5
.BEGIN:
	CBIN=${CROSSDIR}/usr/bin; export CBIN; \
	MACHINE=vax MACHINE_ARCH=vax AR=$$CBIN/ar AS=$$CBIN/as \
	CC=$$CBIN/cc HOSTCC=cc LD=$$CBIN/ld NM=$$CBIN/nm \
	RANLIB=$$CBIN/ranlib STRIP=$$CBIN/strip SIZE=$$CBIN/size ${MAKE} $@@
d55 2
d58 2
a59 1
HOSTCC?=${CC}
d61 2
a62 1
MKDEP?=	mkdep
d65 5
a69 1
COPTS?= 	-O2
d77 1
d81 5
a85 1
CWARNFLAGS=	-Werror
d87 3
d91 1
a91 1
LINKFLAGS=	-Z -Ttext 80000000 -e _start
d94 1
a94 1
HOSTED_CC=	${HOSTCC}
d99 1
d119 1
a123 6
%OBJS

%CFILES

%SFILES

d130 1
a130 1
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
d141 3
a143 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
d150 5
d169 1
a169 2

clean:: cleankernel
d172 1
a172 1
	    [Ee]rrs linterrs makelinks
d175 3
a177 2
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ${VAX}/vax/swapgeneric.c ioconf.c param.c | \
d193 1
d195 1
a195 1
.depend: ${SRCS} param.c
d210 6
a215 1
intvec.o: ${VAX}/vax/intvec.s
d218 1
a218 1
subr.o: ${VAX}/vax/subr.s
a221 2

.endif
@


1.12.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.vax,v 1.13 2000/04/27 05:47:15 bjc Exp $
#	$NetBSD: Makefile.vax,v 1.49 1999/07/26 05:20:49 cgd Exp $
d4 1
a4 1
# Makefile for OpenBSD/vax
a24 11


%OBJS

%CFILES

%SFILES

MKDEP?=	mkdep

# check for cross-compilation
d26 1
a26 15
CROSSDIR?=  /usr/cross/vax

CBIN=${CROSSDIR}/usr/bin
MACHINE=vax 
MACHINE_ARCH=vax 
AR=${CBIN}/ar 
AS=${CBIN}/as 
CC=${CBIN}/cc 
CPP=${CBIN}/cpp
HOSTCC=cc 
LD=${CBIN}/ld 
NM=${CBIN}/nm 
RANLIB=${CBIN}/ranlib 
STRIP=${CBIN}/strip 
SIZE=${CBIN}/size 
d28 5
a34 2
AR?=	ar
AS?=	as
d36 1
a36 2
CPP?=	cpp
LORDER?=lorder
d38 1
a38 2
NM?=	nm
RANLIB?=ranlib
d41 1
a41 5

.endif

TSORT?=	tsort -q
COPTS?= -O0
a48 1
HAVE_GCC28!=	${CC} --version | egrep "^(2\.8|egcs)" ; echo 
d52 1
a52 5
CWARNFLAGS?=	-Werror 

.if (${HAVE_GCC28} != "")
CWARNFLAGS+=	-Wno-main
.endif
a53 3
.if (${HAVE_GCC28} != "")
CFLAGS+=	-mno-pic
.endif
d55 1
a55 1
LINKFLAGS=	-N -Ttext 80000000 -e start
d58 1
a58 1
HOSTED_CC=	${CC}
a62 1
KERN_AS=	obj
a81 1
NOPROF_C=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
d86 6
d98 1
a98 1
		param.o ioconf.o ${OBJS} ${LIBCOMPAT} ${LIBKERN}
d109 2
a110 3
		echo mv -f $@@ $@@.gdb; mv -f $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
a116 5
assym.h: $S/kern/genassym.sh ${VAX}/vax/genassym.cf
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${VAX}/vax/genassym.cf > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h

d131 2
a132 1
clean::	cleankernel
d135 1
a135 1
		[Ee]rrs linterrs makelinks assym.h
d138 2
a139 3
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${VAX}/vax/Locore.c ${CFILES} \
	    ioconf.c param.c | \
a154 1

d156 1
a156 1
.depend: ${SRCS} assym.h param.c
d171 1
a171 6
# depend on CPU configuration 
tmscp.o ts.o uba.o uda.o autoconf.o clock.o conf.o emulate.o intvec.o: Makefile
machdep.o sbi.o subr.o: Makefile


intvec.o: ${VAX}/vax/intvec.s assym.h
d174 1
a174 1
subr.o: ${VAX}/vax/subr.s assym.h
d178 2
@


1.12.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.12.8.1 2001/05/14 21:37:52 niklas Exp $
d25 2
d77 1
d81 5
a85 1
CWARNFLAGS?=	-Werror -Wall -Wno-main -Wno-format -Wno-uninitialized
d87 3
@


1.12.8.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.12.8.2 2001/07/04 10:24:20 niklas Exp $
a24 2
.include <bsd.own.mk>

a209 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.12.8.4
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
d69 1
a69 1
COPTS?= -O2
@


1.12.8.5
log
@Sync the SMP branch with 3.3
@
text
@d42 1
d48 2
d55 8
d68 1
d81 1
a81 2
CMACHFLAGS=	-fno-stack-protector
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} ${CMACHFLAGS} ${PIPE}
d142 1
a142 1
assym.h: $S/kern/genassym.sh ${VAX}/vax/genassym.cf Makefile
@


1.12.8.6
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d69 1
a69 3
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
@


1.12.8.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d68 1
a68 2
CWARNFLAGS?=	-Werror -Wall -Wmissing-prototypes -Wstrict-prototypes \
		-Wno-main -Wno-format -Wno-uninitialized
a71 1
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-log
a181 4
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${VAX}/vax/genassym.cf
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
	@@rm -f assym.dep
@


1.11
log
@Automatically detect cross-compilation case.  If you have an i386
(well that is the only tested host environment for the time being)
and would like to test the support, do this:
cd /usr/src
make TARGET=vax
cd sys/arch/vax/conf
config MYKERNEL
cd ../compile/MYKERNEL
make
and you should get a nicely compiled vax kernel.  This is WIP, so do not
expect robustness quite yet.
@
text
@d28 1
a28 1
all:
d32 1
a32 1
	RANLIB=$$CBIN/ranlib STRIP=$$CBIN/strip SIZE=$$CBIN/size ${MAKE}
@


1.10
log
@use ${SIZE} instead of size, for cross
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.8 1997/10/02 19:56:06 niklas Exp $
d25 10
d36 1
d58 1
a58 1
HOSTED_CC=	${CC}
d178 2
@


1.9
log
@We are OpenBSD
@
text
@d29 1
d92 1
a92 1
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@
@


1.8
log
@Remove dependencies on config options, you should make clean when changing
those, or touch the specific files if you know what you are doing.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.7 1997/09/15 02:40:37 deraadt Exp $
d4 1
a4 1
# Makefile for NetBSD
@


1.7
log
@kill Locore.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.6 1997/09/10 07:34:19 maja Exp $
a157 5

# depend on CPU configuration 
tmscp.o ts.o uba.o uda.o autoconf.o clock.o conf.o emulate.o intvec.o: Makefile
machdep.o sbi.o subr.o uvaxII.o: Makefile

@


1.6
log
@Sync with NetBSD 970516. -moj
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.vax,v 1.5 1997/01/15 23:24:30 maja Exp $
d127 1
a127 2
	    ${VAX}/vax/Locore.c ${CFILES} ${VAX}/vax/swapgeneric.c \
	    ioconf.c param.c | \
@


1.5
log
@sync with NetBSD 970112 -moj
@
text
@d1 2
a2 2
#	$OpenBSD$
#	$NetBSD: Makefile.vax,v 1.28 1996/12/01 06:12:39 jonathan Exp $
d120 2
a121 1
clean::
@


1.4
log
@sync to 0611
@
text
@d1 2
a2 1
#	$Bsd: Makefile.vax,v 1.21 1996/05/11 16:13:17 mycroft Exp $
d4 1
a4 1
# Makefile for Bsd
a20 1
# -DUUDMA	compile in unibus tu58 pseudo-dma code
a24 1
AS?=	as
a25 1
CPP?=	cpp
d27 3
a29 2
STRIP?=	strip -d
TOUCH?=	touch -f -c
d32 4
a35 2
S=	../../../..
VAX=	../..
d37 5
a41 3
INCLUDES=	-I. -I$S/arch -I$S
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D_VAX_INLINE_
CFLAGS=		${DEBUG} -O2 -Werror
d44 5
d66 2
a67 4
# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
d70 1
a70 4
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d72 1
a72 2
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<
d85 1
a85 1
SYSTEM_OBJ=	intvec.o subr.o lim.o \
d98 1
a98 1
		echo ${STRIP} $@@; ${STRIP} $@@
d100 1
a100 1
LINKFLAGS+=	-x
d110 1
a110 1
	${NORMAL_C_C}
d125 1
a125 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
d141 1
a141 1
SRCS=	${VAX}/vax/intvec.s ${VAX}/vax/subr.s lim.c \
d145 3
a147 4
	mkdep ${AFLAGS} ${CPPFLAGS} ${VAX}/vax/intvec.s ${VAX}/vax/subr.s
	mkdep -a ${CFLAGS} ${CPPFLAGS} lim.c
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
a168 6

lim.c: ioconf.c
	../../conf/mkoldconf.awk < ioconf.c > lim.c

lim.o: lim.c
	${NORMAL_C_C}
@


1.3
log
@sync w/ 0430
@
text
@d1 1
a1 2
#	$OpenBSD$
#	$NetBSD: Makefile.vax,v 1.20 1996/02/29 20:57:46 cgd Exp $
d3 1
a3 1
# Makefile for OpenBSD
d141 1
a141 1
depend: .depend
@


1.2
log
@do not use -fno-builtin for kernels; the reasons why are manifold
@
text
@d1 2
a2 1
#	$NetBSD: Makefile.vax,v 1.12 1995/09/19 23:57:55 thorpej Exp $
d4 1
a4 1
#	@@(#)Makefile.vax	7.18 (Berkeley) 12/16/90
d9 1
a9 1
#	/sys/vax/conf/``machineid''
d11 1
a11 1
#	 config machineid
d13 1
a13 1
#	/sys/conf/Makefile.``machinetype''
a21 5
#
CC=	cc
CPP=	cpp
LD=	/usr/bin/ld
AWK=	awk
d23 11
d37 5
a41 5
INCLUDES= -I. -I$S/arch -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL -D_VAX_INLINE_
AOPTS=  ${COPTS} -DASSEMBLER
CFLAGS=	-Werror ${COPTS}
LOAD_ADDRESS=80000000
d59 4
a62 15
NORMAL_C= ${CC} -O -c ${CFLAGS} ${PROF} $<
NORMAL_C_C= ${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
NORMAL_S= ${CC} -x assembler-with-cpp -E -I. -DLOCORE ${COPTS} $< | \
	${AS} ${ASFLAGS} -o $*.o
DRIVER_C= ${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C= ${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
SYSTEM_ASMS=intvec.o subr.o
SYSTEM_OBJS=${SYSTEM_ASMS} lim.o vnode_if.o ${OBJS} param.o ioconf.o \
	    ${LIBKERN} ${LIBCOMPAT}
#SYSTEM_DEP=${SYSTEM_ASMS} lovm.o pmap.o
SYSTEM_DEP=${SYSTEM_ASMS} ${SYSTEM_OBJS}
SYSTEM_LD_HEAD=         @@echo loading $@@; rm -f $@@
SYSTEM_LD= ${LD} -Z -e _start -T ${LOAD_ADDRESS} -o $@@ ${SYSTEM_OBJS} vers.o
#SYSTEM_LD_TAIL= @@echo rearranging symbols; symorder symbols.sort $@@; ${DBSYM} -f
SYSTEM_LD_TAIL=@@echo Nu {r k{rnan klar!!!!
d64 8
d77 1
a77 1
%LOAD
d79 22
a100 3
clean::
	rm -f eddep *vmunix tags *.o subr.i [a-tv-z]*.s \
	Errs errs linterrs makelinks vnode_if.* genassym
d102 1
a102 9
lint: /tmp param.c
	@@lint -hbxn -DGENERIC ${COPTS} ${PARAM} \
	  ${VAX}/vax/Locore.c ${CFILES} ioconf.c param.c | \
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'

symbols.sort: ${VAX}/vax/symbols.raw
	grep -v '^#' ${VAX}/vax/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort
d104 3
a106 2
intvec.o: ${VAX}/vax/intvec.s
	${CC} -x assembler-with-cpp -E ${AOPTS} ${VAX}/vax/intvec.s| as -o intvec.o
d108 2
a109 2
subr.o: ${VAX}/vax/subr.s
	${CC} -x assembler-with-cpp -E ${AOPTS} ${VAX}/vax/subr.s| as -o subr.o
d111 2
d114 3
a116 3
depend: ${CFILES}
	mkdep ${COPTS} ${.ALLSRC:M*.c} ioconf.c
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM}
a117 2
ioconf.o:
	${CC} -c ${CFLAGS} ${PARAM} ioconf.c
d119 3
a121 3
lim.o:	Makefile
	../../conf/mkoldconf.awk < ioconf.c > lim.c
	${CC} -O -c ${CFLAGS} ${PARAM} lim.c
d123 39
a161 3
param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .
a162 2
param.o: param.c Makefile
	${CC} -O -c ${CFLAGS} ${PARAM} param.c
d164 2
a165 2
conf.o: ${VAX}/vax/conf.c
	${CC} -O -c ${CFLAGS} ${PARAM} ${VAX}/vax/conf.c
d167 2
a168 3
newvers:
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} -c vers.c
d170 2
a171 2
vnode_if.c vnode_if.h : $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
d173 2
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
CFLAGS=	-Werror -fno-builtin ${COPTS}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
