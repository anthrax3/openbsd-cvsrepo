head	1.9;
access;
symbols
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.6
	UBC:1.2.0.22
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.07.06.18.32.58;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2008.05.15.22.17.08;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.07.23.10.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.09.20.26.44;	author jsyn;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.05.29.00.04.16;	author niklas;	state Exp;
branches
	1.2.12.1
	1.2.22.1;
next	1.1;

1.1
date	97.01.15.23.24.12;	author maja;	state Exp;
branches;
next	;

1.2.12.1
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.2.12.2;

1.2.12.2
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.2.22.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.2.22.2;

1.2.22.2
date	2002.10.29.00.28.12;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: bi.c,v 1.8 2008/05/15 22:17:08 brad Exp $ */
/*	$NetBSD: bi.c,v 1.17 2001/11/13 12:51:34 lukem Exp $ */
/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



/*
 * VAXBI specific routines.
 */
/*
 * TODO
 *   handle BIbus errors more gracefully.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/bus.h>
#include <machine/cpu.h>

#include <dev/bi/bireg.h>
#include <dev/bi/bivar.h>

static int bi_print(void *, const char *);

struct bi_list bi_list[] = {
	{BIDT_MS820, DT_HAVDRV, "ms820"},
	{BIDT_DRB32, DT_UNSUPP, "drb32"},
	{BIDT_DWBUA, DT_HAVDRV|DT_ADAPT, "dwbua"},
	{BIDT_KLESI, DT_HAVDRV|DT_ADAPT, "klesi"},
	{BIDT_KA820, DT_HAVDRV, "ka820"},
	{BIDT_DB88,  DT_HAVDRV|DT_QUIET, "db88"},
	{BIDT_CIBCA, DT_UNSUPP, "cibca"},
	{BIDT_DMB32, DT_UNSUPP, "dmb32"},
	{BIDT_CIBCI, DT_UNSUPP, "cibci"},
	{BIDT_KA800, DT_UNSUPP, "ka800"},
	{BIDT_KDB50, DT_HAVDRV|DT_VEC, "kdb50"},
	{BIDT_DWMBA, DT_HAVDRV|DT_QUIET, "dwmba"},
	{BIDT_KFBTA, DT_UNSUPP, "kfbta"},
	{BIDT_DEBNK, DT_HAVDRV|DT_VEC, "debnk"},
	{BIDT_DEBNA, DT_HAVDRV|DT_VEC, "debna"},
	{0,0,0}
};

int
bi_print(aux, name)
	void *aux;
	const char *name;
{
	struct bi_attach_args *ba = aux;
	struct bi_list *bl;
	u_int16_t nr;

	nr = bus_space_read_2(ba->ba_iot, ba->ba_ioh, 0);
	for (bl = &bi_list[0]; bl->bl_nr; bl++)
		if (bl->bl_nr == nr)
			break;

	if (name) {
		if (bl->bl_nr == 0)
			printf("unknown device 0x%x", nr);
		else
			printf(bl->bl_name);
		printf(" at %s", name);
	}
	printf(" node %d", ba->ba_nodenr);
	if (bl->bl_havedriver & DT_VEC)
		printf(" vec %d", ba->ba_ivec & 511);
#ifdef DEBUG
	if (bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_SADR) &&
	    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_EADR))
		printf(" [sadr %x eadr %x]",
		    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_SADR),
		    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_EADR));
#endif
	if (bl->bl_havedriver & DT_QUIET)
		printf("\n");
	return bl->bl_havedriver & DT_QUIET ? QUIET :
	    bl->bl_havedriver & DT_HAVDRV ? UNCONF : UNSUPP;
}

void
bi_attach(sc)
	struct bi_softc *sc;
{
	struct bi_attach_args ba;
	int nodenr;

	printf("\n");

	ba.ba_iot = sc->sc_iot;
	ba.ba_busnr = sc->sc_busnr;
	ba.ba_dmat = sc->sc_dmat;
	ba.ba_intcpu = sc->sc_intcpu;
	ba.ba_icookie = sc;
	/*
	 * Interrupt numbers. Assign them as described in 
	 * VAX 8800 system maintenance manual; this means like nexus
	 * adapters have them assigned.
	 * XXX - must address Unibus adapters.
	 */
	for (nodenr = 0; nodenr < NNODEBI; nodenr++) {
		if (bus_space_map(sc->sc_iot, sc->sc_addr + BI_NODE(nodenr),
		    BI_NODESIZE, 0, &ba.ba_ioh)) {
			printf("bi_attach: bus_space_map failed, node %d\n", 
			    nodenr);
			return;
		}
		if (badaddr((caddr_t)ba.ba_ioh, 4) ||
		    (bus_space_read_2(ba.ba_iot, ba.ba_ioh, 0) == 0)) {
			bus_space_unmap(ba.ba_iot, ba.ba_ioh, BI_NODESIZE);
			continue;
		}
		ba.ba_nodenr = nodenr;
		ba.ba_ivec = sc->sc_lastiv + 64 + 4 * nodenr; /* all on spl5 */
		config_found(&sc->sc_dev, &ba, bi_print);
	}
}
@


1.8
log
@Remove commented out NetBSD __KERNEL_RCSID macro usage.

ok dlg@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bi.c,v 1.7 2004/07/07 23:10:43 deraadt Exp $ */
@


1.7
log
@new-style interrupt counters.  based on initial work by hugh.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: bi.c,v 1.6 2002/08/09 20:26:44 jsyn Exp $ */
a42 3

#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: bi.c,v 1.17 2001/11/13 12:51:34 lukem Exp $");
@


1.6
log
@Get rid of remaining __P usage (except for imported code);
ok millert@@, rogue ok pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bi.c,v 1.5 2002/06/11 09:36:23 hugh Exp $ */
d100 1
a100 1
		printf(" vec %o", ba->ba_ivec & 511);
@


1.5
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d56 1
a56 1
static int bi_print __P((void *, const char *));
@


1.4
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 2
a2 2
/*	$OpenBSD: bi.c,v 1.3 2002/03/14 01:26:47 millert Exp $ */
/*	$NetBSD: bi.c,v 1.4 1996/10/13 03:34:44 christos Exp $ */
d44 3
d48 1
a48 1
#include <sys/device.h>
d50 1
a50 2
#include <machine/mtpr.h>
#include <machine/nexus.h>
d53 2
a54 6
#include <arch/vax/bi/bireg.h>
#include <arch/vax/bi/bivar.h>

static int bi_match(struct device *, void *, void *);
static void bi_attach(struct device *, struct device *, void *);
static int bi_print(void *, const char *);
d56 1
a56 7
struct cfdriver bi_cd = {
	NULL, "bi", DV_DULL
};

struct cfattach bi_ca = {
	sizeof(struct bi_softc), bi_match, bi_attach
};
d59 15
a73 15
	{BIDT_MS820, 1, "ms820"},
	{BIDT_DRB32, 0, "drb32"},
	{BIDT_DWBUA, 0, "dwbua"},
	{BIDT_KLESI, 0, "klesi"},
	{BIDT_KA820, 1, "ka820"},
	{BIDT_DB88,  0, "db88"},
	{BIDT_CIBCA, 0, "cibca"},
	{BIDT_DMB32, 0, "dmb32"},
	{BIDT_CIBCI, 0, "cibci"},
	{BIDT_KA800, 0, "ka800"},
	{BIDT_KDB50, 0, "kdb50"},
	{BIDT_DWMBA, 0, "dwmba"},
	{BIDT_KFBTA, 0, "kfbta"},
	{BIDT_DEBNK, 0, "debnk"},
	{BIDT_DEBNA, 0, "debna"},
d84 6
a91 5
		for (bl = &bi_list[0]; bl->bl_nr; bl++)
			if (bl->bl_nr == ba->ba_node->biic.bi_dtype) {
				printf(bl->bl_name);
				break;
			}
d93 3
a95 2
			printf("unknown device 0x%x",
			    ba->ba_node->biic.bi_dtype);
d99 13
a111 13
	return bl->bl_havedriver ? UNCONF : UNSUPP;
}

int
bi_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct bp_conf *bp = aux;

	if (strcmp(bp->type, "bi"))
		return 0;
	return 1;
d115 2
a116 3
bi_attach(parent, self, aux)
	struct device  *parent, *self;
	void *aux;
a117 3
	struct bp_conf *bp = aux;
	struct bi_softc *bi = (void *)self;
	struct bi_node *binode;
a121 1
	binode = bi->bi_base = (struct bi_node *)bp->bp_addr;
d123 11
a133 1
	ba.ba_intcpu = 1 << mastercpu;
d135 9
a143 1
		if (badaddr((caddr_t)&binode[nodenr], 4))
d145 1
a145 2

		ba.ba_node = &binode[nodenr];
d147 2
a148 1
		config_found(self, &ba, bi_print);
a149 6
}

void
bi_buserr()
{
	panic("bi_buserr");
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bi.c,v 1.2 1997/05/29 00:04:16 niklas Exp $ */
d55 1
a55 1
static void bi_attach(struct device *, struct device *, void*);
@


1.2
log
@RCS tagging
@
text
@d1 1
a1 1
/*	$OpenBSD: bi.c,v 1.4 1996/10/13 03:34:44 christos Exp $ */
d54 3
a56 3
static int bi_match __P((struct device *, void *, void *));
static void bi_attach __P((struct device *, struct device *, void*));
static int bi_print __P((void *, const char *));
@


1.2.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bi.c,v 1.2 1997/05/29 00:04:16 niklas Exp $ */
d54 3
a56 3
static int bi_match(struct device *, void *, void *);
static void bi_attach(struct device *, struct device *, void *);
static int bi_print(void *, const char *);
@


1.2.22.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: bi.c,v 1.17 2001/11/13 12:51:34 lukem Exp $ */
a43 3
#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: bi.c,v 1.17 2001/11/13 12:51:34 lukem Exp $");

d45 1
a45 1
#include <sys/systm.h>
d47 2
a48 1
#include <machine/bus.h>
d51 2
a52 2
#include <dev/bi/bireg.h>
#include <dev/bi/bivar.h>
d54 2
d58 8
d67 15
a81 15
	{BIDT_MS820, DT_HAVDRV, "ms820"},
	{BIDT_DRB32, DT_UNSUPP, "drb32"},
	{BIDT_DWBUA, DT_HAVDRV|DT_ADAPT, "dwbua"},
	{BIDT_KLESI, DT_HAVDRV|DT_ADAPT, "klesi"},
	{BIDT_KA820, DT_HAVDRV, "ka820"},
	{BIDT_DB88,  DT_HAVDRV|DT_QUIET, "db88"},
	{BIDT_CIBCA, DT_UNSUPP, "cibca"},
	{BIDT_DMB32, DT_UNSUPP, "dmb32"},
	{BIDT_CIBCI, DT_UNSUPP, "cibci"},
	{BIDT_KA800, DT_UNSUPP, "ka800"},
	{BIDT_KDB50, DT_HAVDRV|DT_VEC, "kdb50"},
	{BIDT_DWMBA, DT_HAVDRV|DT_QUIET, "dwmba"},
	{BIDT_KFBTA, DT_UNSUPP, "kfbta"},
	{BIDT_DEBNK, DT_HAVDRV|DT_VEC, "debnk"},
	{BIDT_DEBNA, DT_HAVDRV|DT_VEC, "debna"},
a91 6
	u_int16_t nr;

	nr = bus_space_read_2(ba->ba_iot, ba->ba_ioh, 0);
	for (bl = &bi_list[0]; bl->bl_nr; bl++)
		if (bl->bl_nr == nr)
			break;
d94 5
d100 2
a101 3
			printf("unknown device 0x%x", nr);
		else
			printf(bl->bl_name);
d105 13
a117 13
	if (bl->bl_havedriver & DT_VEC)
		printf(" vec %o", ba->ba_ivec & 511);
#ifdef DEBUG
	if (bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_SADR) &&
	    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_EADR))
		printf(" [sadr %x eadr %x]",
		    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_SADR),
		    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_EADR));
#endif
	if (bl->bl_havedriver & DT_QUIET)
		printf("\n");
	return bl->bl_havedriver & DT_QUIET ? QUIET :
	    bl->bl_havedriver & DT_HAVDRV ? UNCONF : UNSUPP;
d121 3
a123 2
bi_attach(sc)
	struct bi_softc *sc;
d125 3
d132 1
d134 1
a134 11
	ba.ba_iot = sc->sc_iot;
	ba.ba_busnr = sc->sc_busnr;
	ba.ba_dmat = sc->sc_dmat;
	ba.ba_intcpu = sc->sc_intcpu;
	ba.ba_icookie = sc;
	/*
	 * Interrupt numbers. Assign them as described in 
	 * VAX 8800 system maintenance manual; this means like nexus
	 * adapters have them assigned.
	 * XXX - must address Unibus adapters.
	 */
d136 1
a136 9
		if (bus_space_map(sc->sc_iot, sc->sc_addr + BI_NODE(nodenr),
		    BI_NODESIZE, 0, &ba.ba_ioh)) {
			printf("bi_attach: bus_space_map failed, node %d\n", 
			    nodenr);
			return;
		}
		if (badaddr((caddr_t)ba.ba_ioh, 4) ||
		    (bus_space_read_2(ba.ba_iot, ba.ba_ioh, 0) == 0)) {
			bus_space_unmap(ba.ba_iot, ba.ba_ioh, BI_NODESIZE);
d138 2
a139 1
		}
d141 1
a141 2
		ba.ba_ivec = sc->sc_lastiv + 64 + 4 * nodenr; /* all on spl5 */
		config_found(&sc->sc_dev, &ba, bi_print);
d143 6
@


1.2.12.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d54 3
a56 3
static int bi_match(struct device *, void *, void *);
static void bi_attach(struct device *, struct device *, void *);
static int bi_print(void *, const char *);
@


1.2.12.2
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: bi.c,v 1.17 2001/11/13 12:51:34 lukem Exp $ */
a43 3
#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: bi.c,v 1.17 2001/11/13 12:51:34 lukem Exp $");

d45 1
a45 1
#include <sys/systm.h>
d47 2
a48 1
#include <machine/bus.h>
d51 2
a52 2
#include <dev/bi/bireg.h>
#include <dev/bi/bivar.h>
d54 2
d58 8
d67 15
a81 15
	{BIDT_MS820, DT_HAVDRV, "ms820"},
	{BIDT_DRB32, DT_UNSUPP, "drb32"},
	{BIDT_DWBUA, DT_HAVDRV|DT_ADAPT, "dwbua"},
	{BIDT_KLESI, DT_HAVDRV|DT_ADAPT, "klesi"},
	{BIDT_KA820, DT_HAVDRV, "ka820"},
	{BIDT_DB88,  DT_HAVDRV|DT_QUIET, "db88"},
	{BIDT_CIBCA, DT_UNSUPP, "cibca"},
	{BIDT_DMB32, DT_UNSUPP, "dmb32"},
	{BIDT_CIBCI, DT_UNSUPP, "cibci"},
	{BIDT_KA800, DT_UNSUPP, "ka800"},
	{BIDT_KDB50, DT_HAVDRV|DT_VEC, "kdb50"},
	{BIDT_DWMBA, DT_HAVDRV|DT_QUIET, "dwmba"},
	{BIDT_KFBTA, DT_UNSUPP, "kfbta"},
	{BIDT_DEBNK, DT_HAVDRV|DT_VEC, "debnk"},
	{BIDT_DEBNA, DT_HAVDRV|DT_VEC, "debna"},
a91 6
	u_int16_t nr;

	nr = bus_space_read_2(ba->ba_iot, ba->ba_ioh, 0);
	for (bl = &bi_list[0]; bl->bl_nr; bl++)
		if (bl->bl_nr == nr)
			break;
d94 5
d100 2
a101 3
			printf("unknown device 0x%x", nr);
		else
			printf(bl->bl_name);
d105 13
a117 13
	if (bl->bl_havedriver & DT_VEC)
		printf(" vec %o", ba->ba_ivec & 511);
#ifdef DEBUG
	if (bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_SADR) &&
	    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_EADR))
		printf(" [sadr %x eadr %x]",
		    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_SADR),
		    bus_space_read_4(ba->ba_iot, ba->ba_ioh, BIREG_EADR));
#endif
	if (bl->bl_havedriver & DT_QUIET)
		printf("\n");
	return bl->bl_havedriver & DT_QUIET ? QUIET :
	    bl->bl_havedriver & DT_HAVDRV ? UNCONF : UNSUPP;
d121 3
a123 2
bi_attach(sc)
	struct bi_softc *sc;
d125 3
d132 1
d134 1
a134 11
	ba.ba_iot = sc->sc_iot;
	ba.ba_busnr = sc->sc_busnr;
	ba.ba_dmat = sc->sc_dmat;
	ba.ba_intcpu = sc->sc_intcpu;
	ba.ba_icookie = sc;
	/*
	 * Interrupt numbers. Assign them as described in 
	 * VAX 8800 system maintenance manual; this means like nexus
	 * adapters have them assigned.
	 * XXX - must address Unibus adapters.
	 */
d136 1
a136 9
		if (bus_space_map(sc->sc_iot, sc->sc_addr + BI_NODE(nodenr),
		    BI_NODESIZE, 0, &ba.ba_ioh)) {
			printf("bi_attach: bus_space_map failed, node %d\n", 
			    nodenr);
			return;
		}
		if (badaddr((caddr_t)ba.ba_ioh, 4) ||
		    (bus_space_read_2(ba.ba_iot, ba.ba_ioh, 0) == 0)) {
			bus_space_unmap(ba.ba_iot, ba.ba_ioh, BI_NODESIZE);
d138 2
a139 1
		}
d141 1
a141 2
		ba.ba_ivec = sc->sc_lastiv + 64 + 4 * nodenr; /* all on spl5 */
		config_found(&sc->sc_dev, &ba, bi_print);
d143 6
@


1.1
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@
