head	1.13;
access;
symbols
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.44
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.40
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.38
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.36
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.34
	OPENBSD_5_0:1.11.0.32
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.30
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.28
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.24
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.26
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.22
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.20
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.18
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.16
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.14
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.12
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.10
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.8
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.10.12.14.11.09;	author jsg;	state dead;
branches;
next	1.12;
commitid	ki4keNKAzYOPtyEg;

1.12
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.11;
commitid	uKVPYMN2MLxdZxzH;

1.11
date	2003.11.10.21.05.04;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.27.57;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.16.20.50.17;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.05.20.56.55;	author art;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2000.04.27.03.14.43;	author bjc;	state Exp;
branches;
next	1.5;

1.5
date	97.05.29.00.04.33;	author niklas;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	97.01.15.23.24.34;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.09.09.33;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.27.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.05;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2001.05.14.21.37.55;	author niklas;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2001.07.04.10.24.24;	author niklas;	state Exp;
branches;
next	1.5.12.3;

1.5.12.3
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.5.12.4;

1.5.12.4
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.5.12.5;

1.5.12.5
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	1.5.12.6;

1.5.12.6
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;

1.7.4.1
date	2002.01.31.22.55.26;	author niklas;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove some unused files
ok miod@@
@
text
@/*	$OpenBSD: if_uba.c,v 1.12 2014/07/12 18:44:43 tedu Exp $	*/
/*	$NetBSD: if_uba.c,v 1.15 1999/01/01 21:43:18 ragge Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_uba.c	7.16 (Berkeley) 12/16/90
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/buf.h>
#include <sys/socket.h>
#include <sys/syslog.h>

#include <net/if.h>

#include <machine/pte.h>
#include <machine/mtpr.h>
#include <machine/vmparam.h>
#include <machine/cpu.h>

#include <vax/if/if_uba.h>
#include <vax/uba/ubareg.h>
#include <vax/uba/ubavar.h>

static	int if_ubaalloc(struct ifubinfo *, struct ifrw *, int);
static	void rcv_xmtbuf(struct ifxmt *);
static	void restor_xmtbuf(struct ifxmt *);

/*
 * Routines supporting UNIBUS network interfaces.
 *
 * TODO:
 *	Support interfaces using only one BDP statically.
 */

/*
 * Init UNIBUS for interface whose headers of size hlen are to
 * end on a page boundary.  We allocate a UNIBUS map register for the page
 * with the header, and nmr more UNIBUS map registers for i/o on the adapter,
 * doing this once for each read and once for each write buffer.  We also
 * allocate page frames in the mbuffer pool for these pages.
 */
int
if_ubaminit(ifu, uh, hlen, nmr, ifr, nr, ifw, nw)
	register struct ifubinfo *ifu;
	struct uba_softc *uh;
	int hlen, nmr, nr, nw;
	register struct ifrw *ifr;
	register struct ifxmt *ifw;
{
	register caddr_t p;
	caddr_t cp;
	int i, nclbytes, off;

	if (hlen)
		off = MCLBYTES - hlen;
	else
		off = 0;
	nclbytes = roundup(nmr * VAX_NBPG, MCLBYTES);
	if (hlen)
		nclbytes += MCLBYTES;
	if (ifr[0].ifrw_addr)
		cp = ifr[0].ifrw_addr - off;
	else {
		cp = (caddr_t)malloc((u_long)((nr + nw) * nclbytes), M_DEVBUF,
		    M_NOWAIT);
		if (cp == 0)
			return (0);
		p = cp;
		for (i = 0; i < nr; i++) {
			ifr[i].ifrw_addr = p + off;
			p += nclbytes;
		}
		for (i = 0; i < nw; i++) {
			ifw[i].ifw_base = p;
			ifw[i].ifw_addr = p + off;
			p += nclbytes;
		}
		ifu->iff_hlen = hlen;
		ifu->iff_softc = uh;
		ifu->iff_uba = uh->uh_uba;
		ifu->iff_ubamr = uh->uh_mr;
	}
	for (i = 0; i < nr; i++)
		if (if_ubaalloc(ifu, &ifr[i], nmr) == 0) {
			nr = i;
			nw = 0;
			goto bad;
		}
	for (i = 0; i < nw; i++)
		if (if_ubaalloc(ifu, &ifw[i].ifrw, nmr) == 0) {
			nw = i;
			goto bad;
		}
	while (--nw >= 0) {
		for (i = 0; i < nmr; i++)
			ifw[nw].ifw_wmap[i] = ifw[nw].ifw_mr[i];
		ifw[nw].ifw_xswapd = 0;
		ifw[nw].ifw_flags = IFRW_W;
		ifw[nw].ifw_nmr = nmr;
	}
	return (1);
bad:
	while (--nw >= 0)
		ubarelse(ifu->iff_softc, &ifw[nw].ifw_info);
	while (--nr >= 0)
		ubarelse(ifu->iff_softc, &ifr[nr].ifrw_info);
	free(cp, M_DEVBUF, 0);
	ifr[0].ifrw_addr = 0;
	return (0);
}

/*
 * Setup an ifrw structure by allocating UNIBUS map registers,
 * possibly a buffered data path, and initializing the fields of
 * the ifrw structure to minimize run-time overhead.
 */
static int
if_ubaalloc(ifu, ifrw, nmr)
	struct ifubinfo *ifu;
	register struct ifrw *ifrw;
	int nmr;
{
	register int info;

	info =
	    uballoc(ifu->iff_softc, ifrw->ifrw_addr, nmr*VAX_NBPG + ifu->iff_hlen,
	        ifu->iff_flags);
	if (info == 0)
		return (0);
	ifrw->ifrw_info = info;
	ifrw->ifrw_bdp = UBAI_BDP(info);
	ifrw->ifrw_proto = UBAMR_MRV | (UBAI_BDP(info) << UBAMR_DPSHIFT);
	ifrw->ifrw_mr = &ifu->iff_ubamr[UBAI_MR(info) + (ifu->iff_hlen? 1 : 0)];
	return (1);
}

/*
 * Pull read data off a interface.
 * Totlen is length of data, with local net header stripped.
 * When full cluster sized units are present
 * on the interface on cluster boundaries we can get them more
 * easily by remapping, and take advantage of this here.
 * Save a pointer to the interface structure and the total length,
 * so that protocols can determine where incoming packets arrived.
 * Note: we may be called to receive from a transmit buffer by some
 * devices.  In that case, we must force normal mapping of the buffer,
 * so that the correct data will appear (only unibus maps are 
 * changed when remapping the transmit buffers).
 */
struct mbuf *
if_ubaget(ifu, ifr, totlen, ifp)
	struct ifubinfo *ifu;
	register struct ifrw *ifr;
	register int totlen;
	struct ifnet *ifp;
{
	struct mbuf *top, **mp;
	register struct mbuf *m;
	register caddr_t cp = ifr->ifrw_addr + ifu->iff_hlen, pp;
	register int len;
	top = 0;
	mp = &top;
	MGETHDR(m, M_DONTWAIT, MT_DATA);
	if (m == 0){
		return ((struct mbuf *)NULL);
	}
	m->m_pkthdr.rcvif = ifp;
	m->m_pkthdr.len = totlen;
	m->m_len = MHLEN;

	if (ifr->ifrw_flags & IFRW_W){
		rcv_xmtbuf((struct ifxmt *)ifr);
	}
	while (totlen > 0) {
		if (top) {
			MGET(m, M_DONTWAIT, MT_DATA);
			if (m == 0) {
				m_freem(top);
				top = 0;
				goto out;
			}
			m->m_len = MLEN;
		}
		len = totlen;
		if (len >= MINCLSIZE) {
			pt_entry_t *cpte, *ppte;
			int x, *ip, i;

			MCLGET(m, M_DONTWAIT);
			if ((m->m_flags & M_EXT) == 0){
				goto nopage;
			}
			len = min(len, MCLBYTES);
			m->m_len = len;
			if (((vaddr_t)cp & PAGE_MASK) != 0) {
				goto copy;
			}
			/*
			 * Switch pages mapped to UNIBUS with new page pp,
			 * as quick form of copy.  Remap UNIBUS and invalidate.
			 */
			pp = mtod(m, char *);
			cpte = kvtopte(cp);
			ppte = kvtopte(pp);
			x = vax_btop(cp - ifr->ifrw_addr);
			ip = (int *)&ifr->ifrw_mr[x];
			for (i = 0; i < MCLBYTES/VAX_NBPG; i++) {
				pt_entry_t t;
				t = *ppte; *ppte++ = *cpte; *cpte = t;
				*ip++ = (*cpte++ & PG_FRAME) | ifr->ifrw_proto;
				mtpr(cp,PR_TBIS);
				cp += VAX_NBPG;
				mtpr((caddr_t)pp,PR_TBIS);
				pp += VAX_NBPG;
			}
			goto nocopy;
		}
nopage:
		if (len < m->m_len) {
			/*
			 * Place initial small packet/header at end of mbuf.
			 */
			if (top == 0 && len + max_linkhdr <= m->m_len)
				m->m_data += max_linkhdr;
			m->m_len = len;
		} else
			len = m->m_len;
copy:
		bcopy(cp, mtod(m, caddr_t), (unsigned)len);
		cp += len;
nocopy:
		*mp = m;
		mp = &m->m_next;
		totlen -= len;
	}
out:
	if (ifr->ifrw_flags & IFRW_W){
		restor_xmtbuf((struct ifxmt *)ifr);
	}
	return (top);
}

/*
 * Change the mapping on a transmit buffer so that if_ubaget may
 * receive from that buffer.  Copy data from any pages mapped to Unibus
 * into the pages mapped to normal kernel virtual memory, so that
 * they can be accessed and swapped as usual.  We take advantage
 * of the fact that clusters are placed on the xtofree list
 * in inverse order, finding the last one.
 */
static void
rcv_xmtbuf(ifw)
	register struct ifxmt *ifw;
{
	register struct mbuf *m;
	struct mbuf **mprev;
	register int i;
	char *cp;

	while ((i = ffs((long)ifw->ifw_xswapd)) != 0) {
		cp = ifw->ifw_base + i * MCLBYTES;
		i--;
		ifw->ifw_xswapd &= ~(1<<i);
		mprev = &ifw->ifw_xtofree;
		for (m = ifw->ifw_xtofree; m && m->m_next; m = m->m_next)
			mprev = &m->m_next;
		if (m == NULL)
			break;
		bcopy(mtod(m, caddr_t), cp, MCLBYTES);
		(void) m_free(m);
		*mprev = NULL;
	}
	ifw->ifw_xswapd = 0;
	for (i = 0; i < ifw->ifw_nmr; i++)
		ifw->ifw_mr[i] = ifw->ifw_wmap[i];
}

/*
 * Put a transmit buffer back together after doing an if_ubaget on it,
 * which may have swapped pages.
 */
static void
restor_xmtbuf(ifw)
	register struct ifxmt *ifw;
{
	register int i;

	for (i = 0; i < ifw->ifw_nmr; i++)
		ifw->ifw_wmap[i] = ifw->ifw_mr[i];
}

/*
 * Map a chain of mbufs onto a network interface
 * in preparation for an i/o operation.
 * The argument chain of mbufs includes the local network
 * header which is copied to be in the mapped, aligned
 * i/o space.
 */
int
if_ubaput(ifu, ifw, m)
	struct ifubinfo *ifu;
	register struct ifxmt *ifw;
	register struct mbuf *m;
{
	register struct mbuf *mp;
	register caddr_t cp, dp;
	register int i;
	int xswapd = 0;
	int x, cc, t;

	cp = ifw->ifw_addr;
	while (m) {
		dp = mtod(m, char *);
		if (((vaddr_t)cp & PAGE_MASK) == 0 &&
		    ((vaddr_t)dp & PAGE_MASK) == 0 &&
		    (m->m_len == MCLBYTES || m->m_next == (struct mbuf *)0)) {
			pt_entry_t *pte;
			int *ip;

			pte = kvtopte(dp);
			x = vax_btop(cp - ifw->ifw_addr);
			ip = (int *)&ifw->ifw_mr[x];
			for (i = 0; i < MCLBYTES/VAX_NBPG; i++)
				*ip++ = ifw->ifw_proto | (*pte++ & PG_FRAME);
			xswapd |= 1 << (x>>(MCLSHIFT-VAX_PGSHIFT));
			mp = m->m_next;
			m->m_next = ifw->ifw_xtofree;
			ifw->ifw_xtofree = m;
			cp += m->m_len;
		} else {
			bcopy(mtod(m, caddr_t), cp, (unsigned)m->m_len);
			cp += m->m_len;
			MFREE(m, mp);
		}
		m = mp;
	}

	/*
	 * Xswapd is the set of clusters we just mapped out.  Ifu->iff_xswapd
	 * is the set of clusters mapped out from before.  We compute
	 * the number of clusters involved in this operation in x.
	 * Clusters mapped out before and involved in this operation
	 * should be unmapped so original pages will be accessed by the device.
	 */
	cc = cp - ifw->ifw_addr;
	x = ((cc - ifu->iff_hlen) + MCLBYTES - 1) >> MCLSHIFT;
	ifw->ifw_xswapd &= ~xswapd;
	while ((i = ffs((long)ifw->ifw_xswapd)) != 0) {
		i--;
		if (i >= x)
			break;
		ifw->ifw_xswapd &= ~(1<<i);
		i *= MCLBYTES/VAX_NBPG;
		for (t = 0; t < MCLBYTES/VAX_NBPG; t++) {
			ifw->ifw_mr[i] = ifw->ifw_wmap[i];
			i++;
		}
	}
	ifw->ifw_xswapd |= xswapd;
	return (cc);
}
@


1.12
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.11 2003/11/10 21:05:04 miod Exp $	*/
@


1.11
log
@Get rid of the "struct pte" bitfield, and use straight integers.

Makes the code slightly more readble, removes casts, and makes some
specific constants defined for the bitfields disappear in pmap.c...

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.10 2003/06/02 23:27:57 millert Exp $	*/
d138 1
a138 1
	free(cp, M_DEVBUF);
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.9 2002/03/14 01:26:48 millert Exp $	*/
d217 1
a217 1
			struct pte *cpte, *ppte;
d234 2
a235 2
			cpte = (struct pte *)kvtopte(cp);
			ppte = (struct pte *)kvtopte(pp);
d239 1
a239 1
				struct pte t;
d241 1
a241 1
				*ip++ = cpte++->pg_pfn|ifr->ifrw_proto;
d348 1
a348 1
			struct pte *pte;
d351 1
a351 1
			pte = (struct pte *)kvtopte(dp);
d355 1
a355 1
				*ip++ = ifw->ifw_proto | pte++->pg_pfn;
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.8 2002/01/16 20:50:17 miod Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@Don't include <sys/map.h> when you don't need what's in it.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.7 2001/05/05 20:56:55 art Exp $	*/
d59 3
a61 3
static	int if_ubaalloc __P((struct ifubinfo *, struct ifrw *, int));
static	void rcv_xmtbuf __P((struct ifxmt *));
static	void restor_xmtbuf __P((struct ifxmt *));
@


1.7
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.6 2000/04/27 03:14:43 bjc Exp $	*/
a43 1
#include <sys/map.h>
@


1.7.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.8 2002/01/16 20:50:17 miod Exp $	*/
d44 1
@


1.7.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.7.4.1 2002/01/31 22:55:26 niklas Exp $	*/
d59 3
a61 3
static	int if_ubaalloc(struct ifubinfo *, struct ifrw *, int);
static	void rcv_xmtbuf(struct ifxmt *);
static	void restor_xmtbuf(struct ifxmt *);
@


1.6
log
@sync w/netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.5 1997/05/29 00:04:33 niklas Exp $	*/
d231 1
a231 1
			if (!claligned(cp)){
d350 2
a351 1
		if (claligned(cp) && claligned(dp) &&
@


1.5
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: if_uba.c,v 1.12 1996/08/20 14:07:46 ragge Exp $	*/
/*	$NetBSD: if_uba.c,v 1.12 1996/08/20 14:07:46 ragge Exp $	*/
d94 1
a94 1
	nclbytes = roundup(nmr * NBPG, MCLBYTES);
d162 1
a162 1
	    uballoc(ifu->iff_softc, ifrw->ifrw_addr, nmr*NBPG + ifu->iff_hlen,
d241 1
a241 1
			x = btop(cp - ifr->ifrw_addr);
d243 1
a243 1
			for (i = 0; i < MCLBYTES/NBPG; i++) {
d248 1
a248 1
				cp += NBPG;
d250 1
a250 1
				pp += NBPG;
d293 1
a293 1
	register i;
d322 1
a322 1
	register i;
d356 1
a356 1
			x = btop(cp - ifw->ifw_addr);
d358 1
a358 1
			for (i = 0; i < MCLBYTES/NBPG; i++)
d360 1
a360 1
			xswapd |= 1 << (x>>(MCLSHIFT-PGSHIFT));
d388 2
a389 2
		i *= MCLBYTES/NBPG;
		for (t = 0; t < MCLBYTES/NBPG; t++) {
@


1.5.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: if_uba.c,v 1.6 2000/04/27 03:14:43 bjc Exp $	*/
/*	$NetBSD: if_uba.c,v 1.15 1999/01/01 21:43:18 ragge Exp $	*/
d94 1
a94 1
	nclbytes = roundup(nmr * VAX_NBPG, MCLBYTES);
d162 1
a162 1
	    uballoc(ifu->iff_softc, ifrw->ifrw_addr, nmr*VAX_NBPG + ifu->iff_hlen,
d241 1
a241 1
			x = vax_btop(cp - ifr->ifrw_addr);
d243 1
a243 1
			for (i = 0; i < MCLBYTES/VAX_NBPG; i++) {
d248 1
a248 1
				cp += VAX_NBPG;
d250 1
a250 1
				pp += VAX_NBPG;
d293 1
a293 1
	register int i;
d322 1
a322 1
	register int i;
d356 1
a356 1
			x = vax_btop(cp - ifw->ifw_addr);
d358 1
a358 1
			for (i = 0; i < MCLBYTES/VAX_NBPG; i++)
d360 1
a360 1
			xswapd |= 1 << (x>>(MCLSHIFT-VAX_PGSHIFT));
d388 2
a389 2
		i *= MCLBYTES/VAX_NBPG;
		for (t = 0; t < MCLBYTES/VAX_NBPG; t++) {
@


1.5.12.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.5.12.1 2001/05/14 21:37:55 niklas Exp $	*/
d231 1
a231 1
			if (((vaddr_t)cp & PAGE_MASK) != 0) {
d350 1
a350 2
		if (((vaddr_t)cp & PAGE_MASK) == 0 &&
		    ((vaddr_t)dp & PAGE_MASK) == 0 &&
@


1.5.12.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
@


1.5.12.4
log
@Merge in -current from about a week ago
@
text
@d59 3
a61 3
static	int if_ubaalloc(struct ifubinfo *, struct ifrw *, int);
static	void rcv_xmtbuf(struct ifxmt *);
static	void restor_xmtbuf(struct ifxmt *);
@


1.5.12.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uba.c,v 1.5.12.4 2002/03/28 11:26:46 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5.12.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d217 1
a217 1
			pt_entry_t *cpte, *ppte;
d234 2
a235 2
			cpte = kvtopte(cp);
			ppte = kvtopte(pp);
d239 1
a239 1
				pt_entry_t t;
d241 1
a241 1
				*ip++ = (*cpte++ & PG_FRAME) | ifr->ifrw_proto;
d348 1
a348 1
			pt_entry_t *pte;
d351 1
a351 1
			pte = kvtopte(dp);
d355 1
a355 1
				*ip++ = ifw->ifw_proto | (*pte++ & PG_FRAME);
@


1.4
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.3
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: if_uba.c,v 1.11 1996/03/17 22:56:36 ragge Exp $	*/
d53 1
a53 1
#include <machine/macros.h>
d71 1
a71 1
 * Init UNIBUS for interface on uban whose headers of size hlen are to
d78 1
a78 1
if_ubaminit(ifu, uban, hlen, nmr, ifr, nr, ifw, nw)
d80 2
a81 1
	int uban, hlen, nmr, nr, nw;
a84 1
	struct	uba_softc *ubasc;
d114 3
a116 4
		ifu->iff_uban = uban;
		ubasc = uba_cd.cd_devs[uban];
		ifu->iff_uba = ubasc->uh_uba;
		ifu->iff_ubamr = ubasc->uh_mr;
d139 1
a139 1
		ubarelse(ifu->iff_uban, &ifw[nw].ifw_info);
d141 1
a141 1
		ubarelse(ifu->iff_uban, &ifr[nr].ifrw_info);
d161 1
a161 1
	    uballoc(ifu->iff_uban, ifrw->ifrw_addr, nmr*NBPG + ifu->iff_hlen,
@


1.2
log
@update from netbsd (verbatim)
@
text
@d1 1
a1 1
/*	$NetBSD: if_uba.c,v 1.7 1995/11/10 19:25:56 ragge Exp $	*/
d38 24
a61 22
#include "sys/param.h"
#include "sys/systm.h"
#include "sys/malloc.h"
#include "sys/mbuf.h"
#include "sys/map.h"
#include "sys/buf.h"
#include "sys/socket.h"
#include "sys/syslog.h"

#include "net/if.h"

#include "machine/pte.h"
#include "machine/mtpr.h"
#include "machine/vmparam.h"
#include "machine/macros.h"
#include "if_uba.h"
#include "vax/uba/ubareg.h"
#include "vax/uba/ubavar.h"

static if_ubaalloc(struct ifubinfo *, struct ifrw *, int);
static rcv_xmtbuf(struct ifxmt *);
static restor_xmtbuf(struct ifxmt *);
d77 1
d115 1
a115 1
		ubasc = ubacd.cd_devs[uban];
d153 1
a153 1
static
d287 1
a287 1
static
d296 1
a296 1
	while (i = ffs((long)ifw->ifw_xswapd)) {
d318 1
a318 1
static
d335 1
d383 1
a383 1
	while (i = ffs((long)ifw->ifw_xswapd)) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: if_uba.c,v 1.6 1995/04/11 06:19:09 mycroft Exp $	*/
d49 4
a52 2
#include "vax/include/pte.h"
#include "vax/include/mtpr.h"
a53 1
#include "vax/include/vmparam.h"
a55 1
#include "machine/macros.h"
d81 1
d112 3
a114 2
		ifu->iff_uba = uba_hd[uban].uh_uba;
		ifu->iff_ubamr = uba_hd[uban].uh_mr;
d238 1
a238 1
			x = vax_btop(cp - ifr->ifrw_addr);
d352 1
a352 1
			x = vax_btop(cp - ifw->ifw_addr);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
