head	1.8;
access;
symbols
	OPENBSD_5_9:1.7.0.28
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.30
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.22
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.26
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.24
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.20
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.18
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.16
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.14
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.7;
commitid	OSDG2O3Cgeifnf1W;

1.7
date	2008.08.15.22.50.25;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.07.23.10.46;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.27.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.02.23.45.29;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.05.16.22.15.18;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.03.14.47;	author bjc;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.21.38.23;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2001.07.04.10.24.31;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.1.8.4;

1.1.8.4
date	2003.05.13.19.41.10;	author ho;	state Exp;
branches;
next	1.1.8.5;

1.1.8.5
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	;

1.3.4.1
date	2003.05.19.21.46.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: dzvar.h,v 1.7 2008/08/15 22:50:25 miod Exp $	*/
/*	$NetBSD: dzvar.h,v 1.8 2000/06/04 02:14:12 matt Exp $	*/
/*
 * Copyright (c) 1996  Ken C. Wellsch.  All rights reserved.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* A DZ-11 has 8 ports while a DZV/DZQ-11 has only 4. We use 8 by default */

#define	NDZLINE 	8

#define	DZ_DZ		8
#define	DZ_DZV		4
#define	DZ_DC		4

#define DZ_C2I(c)	((c)<<3)	/* convert controller # to index */
#define DZ_I2C(c)	((c)>>3)	/* convert minor to controller # */
#define DZ_PORT(u)	((u)&07)	/* extract the port # */

struct	dz_softc {
	struct	device	sc_dev;		/* Autoconf blaha */
	struct	evcount	sc_rintrcnt;	/* receive interrupt counts */
	struct	evcount	sc_tintrcnt;	/* transmit interrupt counts */
	int	sc_rcvec, sc_tcvec;	/* XXX used by attachment glue only */
	struct	dz_regs	sc_dr;		/* reg pointers */
	bus_space_tag_t	sc_iot;
	bus_space_handle_t sc_ioh;
	int		sc_type;	/* DZ11 or DZV11? */
	int		sc_rxint;	/* Receive interrupt count XXX */
	int		sc_openings;	/* # of times we've been opened */
	u_char		sc_brk;		/* Break asserted on some lines */
	u_char		sc_dsr;		/* DSR set bits if no mdm ctrl */
	struct dz_linestate {
		struct dz_softc	*dz_sc;		/* backpointer to softc */
		int		dz_line;	/* sub-driver unit number */
		void		*dz_private;	/* sub-driver data pointer */
		int		(*dz_catch)(void *, int); /* Fast catch recv */
		struct	tty *	dz_tty;		/* what we work on */
#ifdef notyet
		caddr_t		dz_mem;		/* pointers to clist output */
		caddr_t		dz_end;		/*   allowing pdma action */
#endif
	} sc_dz[NDZLINE];
};

void   dzattach(struct dz_softc *);
void   dzrint(void *);
void   dzxint(void *);
void   dzreset(struct device *);

#define	DZ_READ_BYTE(sc, adr) \
	bus_space_read_1((sc)->sc_iot, (sc)->sc_ioh, (sc)->sc_dr.adr)
#define	DZ_READ_WORD(sc, adr) \
	bus_space_read_2((sc)->sc_iot, (sc)->sc_ioh, (sc)->sc_dr.adr)
#define	DZ_WRITE_BYTE(sc, adr, val) \
	bus_space_write_1((sc)->sc_iot, (sc)->sc_ioh, (sc)->sc_dr.adr, val)
#define	DZ_WRITE_WORD(sc, adr, val) \
	bus_space_write_2((sc)->sc_iot, (sc)->sc_ioh, (sc)->sc_dr.adr, val)
@


1.7
log
@Make the DZ_{READ,WRITE}_{BYTE,WORD} macros visible outside of dz.c, for
other dz attachments to be able to use them (soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.6 2004/07/07 23:10:46 deraadt Exp $	*/
@


1.6
log
@new-style interrupt counters.  based on initial work by hugh.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.5 2003/06/02 23:27:58 millert Exp $	*/
d50 1
a50 1
	struct	evcount	sc_rintrcnt;	/* recevive interrupt counts */
d52 1
a52 1
	int	sc_rcvec, sc_tcvec;
d78 9
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.4 2003/04/02 23:45:29 jason Exp $	*/
d50 3
a52 2
	struct	evcnt	sc_rintrcnt;	/* recevive interrupt counts */
	struct	evcnt	sc_tintrcnt;	/* transmit interrupt counts */
@


1.4
log
@DZ-11 (or the DZ-11 alike in the VS4000/VLC anyway) only interrupts when
the RX fifo goes from 0 -> 1 characters.  If the FIFO is filled (eg. during
autoconf where interrupts are cleared), the dz will never interrupt for
rx again.  Solution: drain the fifo on first open.  ok hugh
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.3 2001/08/25 13:33:37 hugh Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.2 2001/05/16 22:15:18 hugh Exp $	*/
d61 1
@


1.3.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a60 1
	int		sc_openings;	/* # of times we've been opened */
@


1.2
log
@Blind merge of wscons support from NetBSD/vax. Perhaps someone with a
supported framebuffer (simple monochrome) can finish this off.
If anyone has run across docs for LCG or SPGFX, please get in touch.
@
text
@d1 2
a2 2
/*	$OpenBSD: dzvar.h,v 1.1 2000/04/27 03:14:47 bjc Exp $	*/
/*	$NetBSD: dzvar.h,v 1.6 2000/01/24 02:40:29 matt Exp $	*/
d54 2
d67 1
a67 1
		int		(*dz_catch) __P((void *, int)); /* Fast catch recv */
d76 4
a79 3
void	dzattach __P((struct dz_softc *));
void	dzrint __P((void *));
void	dzxint __P((void *));
@


1.1
log
@sync w/netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 5
a65 2
	int		(*sc_catch) __P((int, int)); /* Fast catch recv */
	struct {
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.1 2000/04/27 03:14:47 bjc Exp $	*/
@


1.1.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.1.8.1 2001/05/14 21:38:23 niklas Exp $	*/
d61 2
a62 5
	struct dz_linestate {
		struct dz_softc	*dz_sc;		/* backpointer to softc */
		int		dz_line;	/* sub-driver unit number */
		void		*dz_private;	/* sub-driver data pointer */
		int		(*dz_catch) __P((void *, int)); /* Fast catch recv */
@


1.1.8.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD: dzvar.h,v 1.1.8.2 2001/07/04 10:24:31 niklas Exp $	*/
/*	$NetBSD: dzvar.h,v 1.8 2000/06/04 02:14:12 matt Exp $	*/
a53 2
	struct	evcnt	sc_rintrcnt;	/* recevive interrupt counts */
	struct	evcnt	sc_tintrcnt;	/* transmit interrupt counts */
d65 1
a65 1
		int		(*dz_catch)(void *, int); /* Fast catch recv */
d74 3
a76 4
void   dzattach(struct dz_softc *);
void   dzrint(void *);
void   dzxint(void *);
void   dzreset(struct device *);
@


1.1.8.4
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.1.8.3 2001/10/31 03:08:01 nate Exp $	*/
a60 1
	int		sc_openings;	/* # of times we've been opened */
@


1.1.8.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dzvar.h,v 1.1.8.4 2003/05/13 19:41:10 ho Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


