head	1.8;
access;
symbols
	OPENBSD_5_9:1.7.0.20
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.22
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.14
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.18
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.7;
commitid	OSDG2O3Cgeifnf1W;

1.7
date	2010.09.20.06.33.48;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.29.17.06.27;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.09.15.57.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.16.20.50.17;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2000.04.27.03.14.47;	author bjc;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.21.38.21;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2002.03.06.02.04.48;	author niklas;	state Exp;
branches;
next	1.1.8.4;

1.1.8.4
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	;

1.2.4.1
date	2002.01.31.22.55.26;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: dz_uba.c,v 1.7 2010/09/20 06:33:48 matthew Exp $	*/
/*	$NetBSD: dz_uba.c,v 1.11 2000/06/04 06:17:02 matt Exp $ */
/*
 * Copyright (c) 1998 Ludd, University of Lule}, Sweden. All rights reserved.
 * Copyright (c) 1996  Ken C. Wellsch.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/proc.h>
#include <sys/buf.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/pte.h>
#include <machine/trap.h>
#include <machine/scb.h>

#include <arch/vax/qbus/ubavar.h>

#include <arch/vax/qbus/dzreg.h>
#include <arch/vax/qbus/dzvar.h>

static	int	dz_uba_match(struct device *, struct cfdata *, void *);
static	void	dz_uba_attach(struct device *, struct device *, void *);

struct	cfattach dz_uba_ca = {
	sizeof(struct dz_softc), (cfmatch_t)dz_uba_match, dz_uba_attach
};

/* Autoconfig handles: setup the controller to interrupt, */
/* then complete the housecleaning for full operation */

static int
dz_uba_match(parent, cf, aux)
        struct device *parent;
	struct cfdata *cf;
        void *aux;
{
	struct uba_attach_args *ua = aux;
#ifdef notdef
	bus_space_tag_t	iot = ua->ua_iot;
#endif
	bus_space_handle_t ioh = ua->ua_ioh;
	int n;

	/* Reset controller to initialize, enable TX interrupts */
	/* to catch floating vector info elsewhere when completed */

	bus_space_write_2(iot, ioh, DZ_UBA_CSR, DZ_CSR_MSE | DZ_CSR_TXIE);
	bus_space_write_1(iot, ioh, DZ_UBA_TCR, 1);

	DELAY(100000);	/* delay 1/10 second */

	bus_space_write_2(iot, ioh, DZ_UBA_CSR, DZ_CSR_RESET);

	/* Now wait up to 3 seconds for reset/clear to complete. */

	for (n = 0; n < 300; n++) {
		DELAY(10000);
		if ((bus_space_read_2(iot, ioh, DZ_UBA_CSR)&DZ_CSR_RESET) == 0)
			break;
	}

	/* If the RESET did not clear after 3 seconds, */
	/* the controller must be broken. */

	if (n >= 300)
		return (0);

	/* Register the TX interrupt handler */


       	return (1);
}

static void
dz_uba_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
{
	struct	dz_softc *sc = (void *)self;
	struct uba_attach_args *ua = aux;

	sc->sc_iot = ua->ua_iot;
	sc->sc_ioh = ua->ua_ioh;

	sc->sc_dr.dr_csr = DZ_UBA_CSR;
	sc->sc_dr.dr_rbuf = DZ_UBA_RBUF;
	sc->sc_dr.dr_dtr = DZ_UBA_DTR;
	sc->sc_dr.dr_break = DZ_UBA_BREAK;
	sc->sc_dr.dr_tbuf = DZ_UBA_TBUF;
	sc->sc_dr.dr_tcr = DZ_UBA_TCR;
	sc->sc_dr.dr_dcd = DZ_UBA_DCD;
	sc->sc_dr.dr_ring = DZ_UBA_RING;

	sc->sc_type = DZ_DZ;

	/* Now register the TX & RX interrupt handlers */
	sc->sc_tcvec = ua->ua_cvec;
	uba_intr_establish(ua->ua_icookie, sc->sc_tcvec,
	    dzxint, sc, &sc->sc_tintrcnt);
	sc->sc_rcvec = ua->ua_cvec - 4;
	uba_intr_establish(ua->ua_icookie, sc->sc_rcvec,
	    dzrint, sc, &sc->sc_rintrcnt);
	uba_reset_establish(dzreset, self);

	evcount_attach(&sc->sc_rintrcnt, sc->sc_dev.dv_xname, &sc->sc_rcvec);
	evcount_attach(&sc->sc_tintrcnt, sc->sc_dev.dv_xname, &sc->sc_tcvec);

	dzattach(sc);
}
@


1.7
log
@Get rid of evcount's support for arranging counters in a tree
hierarchy.  Everything attached to a single root node anyway, so at
best we had a bush.

"i think it is good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.6 2006/07/29 17:06:27 miod Exp $	*/
@


1.6
log
@Sync dz and lk{kbd,ms} code with NetBSD, this allows keyboards to work when
initialized by the PROM.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.5 2004/07/09 15:57:16 deraadt Exp $	*/
d141 2
a142 4
	evcount_attach(&sc->sc_rintrcnt, sc->sc_dev.dv_xname,
	    (void *)&sc->sc_rcvec, &evcount_intr);
	evcount_attach(&sc->sc_tintrcnt, sc->sc_dev.dv_xname,
	    (void *)&sc->sc_tcvec, &evcount_intr);
@


1.5
log
@qbus vector counting, too; from hugh
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.4 2002/03/14 01:26:48 millert Exp $	*/
d74 1
d76 1
a79 1
	iot = iot; /* Silly GCC */
d133 2
a134 1
	uba_intr_establish(ua->ua_icookie, ua->ua_cvec,
d136 2
a137 1
	uba_intr_establish(ua->ua_icookie, ua->ua_cvec - 4,
a140 1
	sc->sc_rcvec = ua->ua_cvec - 4;
a142 1
	sc->sc_tcvec = ua->ua_cvec;
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.3 2002/01/16 20:50:17 miod Exp $	*/
d137 7
@


1.3
log
@Don't include <sys/map.h> when you don't need what's in it.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.2 2001/08/25 13:33:37 hugh Exp $	*/
d57 2
a58 2
static	int	dz_uba_match __P((struct device *, struct cfdata *, void *));
static	void	dz_uba_attach __P((struct device *, struct device *, void *));
@


1.2
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.1 2000/04/27 03:14:47 bjc Exp $	*/
a38 1
#include <sys/map.h>
@


1.2.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.3 2002/01/16 20:50:17 miod Exp $	*/
d39 1
@


1.2.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.2.4.1 2002/01/31 22:55:26 niklas Exp $	*/
d57 2
a58 2
static	int	dz_uba_match(struct device *, struct cfdata *, void *);
static	void	dz_uba_attach(struct device *, struct device *, void *);
@


1.1
log
@sync w/netbsd
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: dz_uba.c,v 1.8 2000/01/24 02:40:29 matt Exp $ */
d77 1
a77 1
	register int n;
d116 1
a116 1
	register struct uba_attach_args *ua = aux;
d133 5
a137 2
	uba_intr_establish(ua->ua_icookie, ua->ua_cvec, dzxint, sc);
	uba_intr_establish(ua->ua_icookie, ua->ua_cvec - 4, dzrint, sc);
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: dz_uba.c,v 1.1 2000/04/27 03:14:47 bjc Exp $	*/
@


1.1.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD: dz_uba.c,v 1.1.8.1 2001/05/14 21:38:21 niklas Exp $	*/
/*	$NetBSD: dz_uba.c,v 1.11 2000/06/04 06:17:02 matt Exp $ */
d77 1
a77 1
	int n;
d116 1
a116 1
	struct uba_attach_args *ua = aux;
d133 2
a134 5
	uba_intr_establish(ua->ua_icookie, ua->ua_cvec,
	    dzxint, sc, &sc->sc_tintrcnt);
	uba_intr_establish(ua->ua_icookie, ua->ua_cvec - 4,
	    dzrint, sc, &sc->sc_rintrcnt);
	uba_reset_establish(dzreset, self);
@


1.1.8.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
@


1.1.8.4
log
@Merge in -current from about a week ago
@
text
@d57 2
a58 2
static	int	dz_uba_match(struct device *, struct cfdata *, void *);
static	void	dz_uba_attach(struct device *, struct device *, void *);
@


