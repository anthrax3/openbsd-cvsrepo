head	1.11;
access;
symbols
	OPENBSD_4_9:1.10.0.22
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.20
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.16
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.18
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.16
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.2
	UBC_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2006.01.20.23.27.25;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.27.03.14.45;	author bjc;	state Exp;
branches;
next	1.5;

1.5
date	97.05.29.00.04.59;	author niklas;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	97.01.15.23.24.48;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.21.46.25;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.09.09.50;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.08;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2001.05.14.21.38.11;	author niklas;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.5.12.3;

1.5.12.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.5.12.4;

1.5.12.4
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	;

1.8.2.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: mba.c,v 1.10 2006/01/20 23:27:25 miod Exp $ */
/*	$NetBSD: mba.c,v 1.18 2000/01/24 02:40:36 matt Exp $ */
/*
 * Copyright (c) 1994, 1996 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Simple massbus drive routine.
 * TODO:
 *  Autoconfig new devices 'on the fly'.
 *  More intelligent way to handle different interrupts.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/queue.h>
#include <sys/buf.h>
#include <sys/proc.h>

#include <uvm/uvm_extern.h>

#include <machine/trap.h>
#include <machine/scb.h>
#include <machine/nexus.h>
#include <machine/pte.h>
#include <machine/pcb.h>
#include <machine/sid.h>
#include <machine/cpu.h>

#include <vax/mba/mbareg.h>
#include <vax/mba/mbavar.h>

struct	mbaunit mbaunit[] = {
	{MBADT_RP04,	"rp04", MB_RP},
	{MBADT_RP05,	"rp05", MB_RP},
	{MBADT_RP06,	"rp06", MB_RP},
	{MBADT_RP07,	"rp07", MB_RP},
	{MBADT_RM02,	"rm02", MB_RP},
	{MBADT_RM03,	"rm03", MB_RP},
	{MBADT_RM05,	"rm05", MB_RP},
	{MBADT_RM80,	"rm80", MB_RP},
	{0,		0,	0}
};

int	mbamatch(struct device *, struct cfdata *, void *);
void	mbaattach(struct device *, struct device *, void *);
void	mbaintr(void *);
int	mbaprint(void *, const char *);
void	mbaqueue(struct mba_device *);
void	mbastart(struct mba_softc *);
void	mbamapregs(struct mba_softc *);

struct	cfattach mba_cmi_ca = {
	sizeof(struct mba_softc), mbamatch, mbaattach
};

struct	cfattach mba_sbi_ca = {
	sizeof(struct mba_softc), mbamatch, mbaattach
};

extern	struct cfdriver mba_cd;

/*
 * Look if this is a massbuss adapter.
 */
int
mbamatch(parent, cf, aux)
	struct	device *parent;
	struct  cfdata *cf;
	void	*aux;
{
	struct	sbi_attach_args *sa = (struct sbi_attach_args *)aux;

	if ((cf->cf_loc[0] != sa->nexnum) && (cf->cf_loc[0] > -1 ))
		return 0;

	if (sa->type == NEX_MBA)
		return 1;

	return 0;
}

/*
 * Attach the found massbuss adapter. Setup its interrupt vectors,
 * reset it and go searching for drives on it.
 */
void
mbaattach(parent, self, aux)
	struct	device *parent, *self;
	void	*aux;
{
	struct	mba_softc *sc = (void *)self;
	struct	sbi_attach_args *sa = (struct sbi_attach_args *)aux;
	volatile struct	mba_regs *mbar = (struct mba_regs *)sa->nexaddr;
	struct	mba_attach_args ma;
	int	i, j;

	printf("\n");
	/*
	 * Set up interrupt vectors for this MBA.
	 */
	sc->sc_dsp = idsptch;
	sc->sc_dsp.pushlarg = sc;
	sc->sc_dsp.hoppaddr = mbaintr;
	scb->scb_nexvec[0][sa->nexnum] = scb->scb_nexvec[1][sa->nexnum] =
	    scb->scb_nexvec[2][sa->nexnum] = scb->scb_nexvec[3][sa->nexnum] =
	    &sc->sc_dsp;

	sc->sc_physnr = sa->nexnum - 8; /* MBA's have TR between 8 - 11... */
#if VAX750
	if (vax_cputype == VAX_750)
		sc->sc_physnr += 4;	/* ...but not on 11/750 */
#endif
	sc->sc_first = 0;
	sc->sc_last = (void *)&sc->sc_first;
	sc->sc_mbareg = (struct mba_regs *)mbar;
	mbar->mba_cr = MBACR_INIT;	/* Reset adapter */
	mbar->mba_cr = MBACR_IE;	/* Enable interrupts */

	for (i = 0; i < MAXMBADEV; i++) {
		sc->sc_state = SC_AUTOCONF;
		if ((mbar->mba_md[i].md_ds & MBADS_DPR) == 0) 
			continue;
		/* We have a drive, ok. */
		ma.unit = i;
		ma.type = mbar->mba_md[i].md_dt & 0777;
		j = 0;
		while (mbaunit[j++].nr)
			if (mbaunit[j].nr == ma.type)
				break;
		ma.devtyp = mbaunit[j].devtyp;
		ma.name = mbaunit[j].name;
		config_found(&sc->sc_dev, (void *)&ma, mbaprint);
	}
}

/*
 * We got an interrupt. Check type of interrupt and call the specific
 * device interrupt handling routine.
 */
void
mbaintr(mba)
	void	*mba;
{
	struct	mba_softc *sc = mba;
	volatile struct	mba_regs *mr = sc->sc_mbareg;
	struct	mba_device *md;
	struct	buf *bp;
	int	itype, attn, anr;

	itype = mr->mba_sr;
	mr->mba_sr = itype;	/* Write back to clear bits */

	attn = mr->mba_md[0].md_as & 0xff;
	mr->mba_md[0].md_as = attn;

	if (sc->sc_state == SC_AUTOCONF)
		return;	/* During autoconfig */

	md = sc->sc_first;
	bp = BUFQ_FIRST(&md->md_q);
	/*
	 * A data-transfer interrupt. Current operation is finished,
	 * call that device's finish routine to see what to do next.
	 */
	if (sc->sc_state == SC_ACTIVE) {

		sc->sc_state = SC_IDLE;
		switch ((*md->md_finish)(md, itype, &attn)) {

		case XFER_FINISH:
			/*
			 * Transfer is finished. Take buffer of drive
			 * queue, and take drive of adapter queue.
			 * If more to transfer, start the adapter again
			 * by calling mbastart().
			 */
			BUFQ_REMOVE(&md->md_q, bp);
			sc->sc_first = md->md_back;
			md->md_back = 0;
			if (sc->sc_first == 0)
				sc->sc_last = (void *)&sc->sc_first;

			if (BUFQ_FIRST(&md->md_q) != NULL) {
				sc->sc_last->md_back = md;
				sc->sc_last = md;
			}
	
			bp->b_resid = 0;
			biodone(bp);
			if (sc->sc_first)
				mbastart(sc);
			break;

		case XFER_RESTART:
			/*
			 * Something went wrong with the transfer. Try again.
			 */
			mbastart(sc);
			break;
		}
	}

	while (attn) {
		anr = ffs(attn) - 1;
		attn &= ~(1 << anr);
		if (sc->sc_md[anr]->md_attn == 0)
			panic("Should check for new MBA device %d", anr);
		(*sc->sc_md[anr]->md_attn)(sc->sc_md[anr]);
	}
}

int
mbaprint(aux, mbaname)
	void	*aux;
	const char	*mbaname;
{
	struct  mba_attach_args *ma = aux;

	if (mbaname) {
		if (ma->name)
			printf("%s", ma->name);
		else
			printf("device type %o", ma->type);
		printf(" at %s", mbaname);
	}
	printf(" drive %d", ma->unit);
	return (ma->name ? UNCONF : UNSUPP);
}

/*
 * A device calls mbaqueue() when it wants to get on the adapter queue.
 * Called at splbio(). If the adapter is inactive, start it. 
 */
void
mbaqueue(md)
	struct	mba_device *md;
{
	struct	mba_softc *sc = md->md_mba;
	int	i = (int)sc->sc_first;

	sc->sc_last->md_back = md;
	sc->sc_last = md;

	if (i == 0)
		mbastart(sc);
}

/*
 * Start activity on (idling) adapter. Calls mbamapregs() to setup
 * for dma transfer, then the unit-specific start routine.
 */
void
mbastart(sc)
	struct	mba_softc *sc;
{
	struct	mba_device *md = sc->sc_first;
	volatile struct	mba_regs *mr = sc->sc_mbareg;
	struct	buf *bp = BUFQ_FIRST(&md->md_q);

	disk_reallymapin(BUFQ_FIRST(&md->md_q), sc->sc_mbareg->mba_map,
	    0, PG_V);

	sc->sc_state = SC_ACTIVE;
	mr->mba_var = ((u_int)bp->b_data & VAX_PGOFSET);
	mr->mba_bc = (~bp->b_bcount) + 1;
	(*md->md_start)(md);		/* machine-dependent start */
}
@


1.10
log
@b_un.b_addr -> b_data; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.9 2002/03/14 01:26:48 millert Exp $ */
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.8 2001/11/06 19:53:17 miod Exp $ */
d293 1
a293 1
	mr->mba_var = ((u_int)bp->b_un.b_addr & VAX_PGOFSET);
@


1.8
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.7 2001/09/11 20:05:25 miod Exp $ */
d73 7
a79 7
int	mbamatch __P((struct device *, struct cfdata *, void *));
void	mbaattach __P((struct device *, struct device *, void *));
void	mbaintr __P((void *));
int	mbaprint __P((void *, const char *));
void	mbaqueue __P((struct mba_device *));
void	mbastart __P((struct mba_softc *));
void	mbamapregs __P((struct mba_softc *));
@


1.8.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.8 2001/11/06 19:53:17 miod Exp $ */
d73 7
a79 7
int	mbamatch(struct device *, struct cfdata *, void *);
void	mbaattach(struct device *, struct device *, void *);
void	mbaintr(void *);
int	mbaprint(void *, const char *);
void	mbaqueue(struct mba_device *);
void	mbastart(struct mba_softc *);
void	mbamapregs(struct mba_softc *);
@


1.7
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.6 2000/04/27 03:14:45 bjc Exp $ */
d48 1
a48 1
#include <vm/vm.h>
@


1.6
log
@sync w/netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.5 1997/05/29 00:04:59 niklas Exp $ */
a48 1
#include <vm/vm_kern.h>
@


1.5
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: mba.c,v 1.10 1996/10/13 03:35:00 christos Exp $ */
/*	$NetBSD: mba.c,v 1.10 1996/10/13 03:35:00 christos Exp $ */
d57 1
d74 1
a74 1
int	mbamatch __P((struct device *, void *, void *));
d76 1
a76 1
void	mbaintr __P((int));
a81 4
struct	cfdriver mba_cd = {
	NULL, "mba", DV_DULL
};

d90 2
d96 1
a96 1
mbamatch(parent, match, aux)
d98 2
a99 1
	void	*match, *aux;
a101 1
	struct	cfdata *cf = match;
a124 1
	extern  struct  ivec_dsp idsptch;
d131 3
a133 1
	bcopy(&idsptch, &sc->sc_dsp, sizeof(struct ivec_dsp));
a136 2
	sc->sc_dsp.pushlarg = sc->sc_dev.dv_unit;
	sc->sc_dsp.hoppaddr = mbaintr;
d139 1
a139 1
#ifdef VAX750
d172 1
a172 1
	int	mba;
d174 1
a174 1
	struct	mba_softc *sc = mba_cd.cd_devs[mba];
d190 1
a190 1
	bp = md->md_q.b_actf;
d207 1
a207 1
			md->md_q.b_actf = bp->b_actf;
d213 1
a213 1
			if (md->md_q.b_actf) {
d288 1
a288 1
	struct	buf *bp = md->md_q.b_actf;
d290 2
a291 1
	disk_reallymapin(md->md_q.b_actf, sc->sc_mbareg->mba_map, 0, PG_V);
d294 1
a294 1
	mr->mba_var = ((u_int)bp->b_un.b_addr & PGOFSET);
@


1.5.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: mba.c,v 1.6 2000/04/27 03:14:45 bjc Exp $ */
/*	$NetBSD: mba.c,v 1.18 2000/01/24 02:40:36 matt Exp $ */
a56 1
#include <machine/cpu.h>
d73 1
a73 1
int	mbamatch __P((struct device *, struct cfdata *, void *));
d75 1
a75 1
void	mbaintr __P((void *));
d81 4
a92 2
extern	struct cfdriver mba_cd;

d97 1
a97 1
mbamatch(parent, cf, aux)
d99 1
a99 2
	struct  cfdata *cf;
	void	*aux;
d102 1
d126 1
d133 1
a133 3
	sc->sc_dsp = idsptch;
	sc->sc_dsp.pushlarg = sc;
	sc->sc_dsp.hoppaddr = mbaintr;
d137 2
d141 1
a141 1
#if VAX750
d174 1
a174 1
	void	*mba;
d176 1
a176 1
	struct	mba_softc *sc = mba;
d192 1
a192 1
	bp = BUFQ_FIRST(&md->md_q);
d209 1
a209 1
			BUFQ_REMOVE(&md->md_q, bp);
d215 1
a215 1
			if (BUFQ_FIRST(&md->md_q) != NULL) {
d290 1
a290 1
	struct	buf *bp = BUFQ_FIRST(&md->md_q);
d292 1
a292 2
	disk_reallymapin(BUFQ_FIRST(&md->md_q), sc->sc_mbareg->mba_map,
	    0, PG_V);
d295 1
a295 1
	mr->mba_var = ((u_int)bp->b_un.b_addr & VAX_PGOFSET);
@


1.5.12.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mba.c,v 1.5.12.1 2001/05/14 21:38:11 niklas Exp $ */
d49 1
@


1.5.12.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d48 1
a48 1
#include <uvm/uvm_extern.h>
@


1.5.12.4
log
@Merge in -current from about a week ago
@
text
@d73 7
a79 7
int	mbamatch(struct device *, struct cfdata *, void *);
void	mbaattach(struct device *, struct device *, void *);
void	mbaintr(void *);
int	mbaprint(void *, const char *);
void	mbaqueue(struct mba_device *);
void	mbastart(struct mba_softc *);
void	mbamapregs(struct mba_softc *);
@


1.4
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.3
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$NetBSD: mba.c,v 1.6 1996/04/08 18:38:59 ragge Exp $ */
d84 5
a88 1
struct	cfattach mba_ca = {
d141 1
a141 1
	if (cpunumber == VAX_750)
d245 1
a245 1
	void		*aux;
d291 1
a291 1
	mbamapregs(sc);
a297 61

/*
 * Setup map registers for a dma transfer.
 * This routine could be synced with the other adapter map routines!
 */
void
mbamapregs(sc)
	struct  mba_softc *sc;
{
	struct	mba_device *md = sc->sc_first;
	volatile struct	mba_regs *mr = sc->sc_mbareg;
	struct	buf *bp = md->md_q.b_actf;
	struct	pcb *pcb;
	pt_entry_t *pte;
	volatile pt_entry_t *io;
	int	pfnum, npf, o, i;
	caddr_t	addr;

	o = (int)bp->b_un.b_addr & PGOFSET;
	npf = btoc(bp->b_bcount + o) + 1;
	addr = bp->b_un.b_addr;

	/*
	 * Get a pointer to the pte pointing out the first virtual address.
	 * Use different ways in kernel and user space.
	 */
	if ((bp->b_flags & B_PHYS) == 0) {
		pte = kvtopte(addr);
	} else {
		pcb = bp->b_proc->p_vmspace->vm_pmap.pm_pcb;
		pte = uvtopte(addr, pcb);
	}

	/*
	 * When we are doing DMA to user space, be sure that all pages
	 * we want to transfer to is mapped. WHY DO WE NEED THIS???
	 * SHOULDN'T THEY ALWAYS BE MAPPED WHEN DOING THIS???
	 */
	for (i = 0; i < (npf - 1); i++) {
		if ((pte + i)->pg_pfn == 0) {
			int rv;
			rv = vm_fault(&bp->b_proc->p_vmspace->vm_map,
			    (unsigned)addr + i * NBPG,
			    VM_PROT_READ|VM_PROT_WRITE, FALSE);
			if (rv)
				panic("MBA DMA to nonexistent page, %d", rv);
		}
	}

	io = &mr->mba_map[0];
	while (--npf > 0) {
		pfnum = pte->pg_pfn;
		if (pfnum == 0)
			panic("mba zero entry");
		pte++;
		*(int *)io++ = pfnum | PG_V;
	}
	*(int *)io = 0;
}


@


1.2
log
@sync w/ 0430
@
text
@d75 1
a75 1
int	mbaprint __P((void *, char *));
d241 2
a242 2
	void	*aux;
	char	*mbaname;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2

/*	$NetBSD: mba.c,v 1.1 1995/02/13 00:44:02 ragge Exp $ */
d3 1
a3 1
 * Copyright (c) 1994 Ludd, University of Lule}, Sweden.
d16 2
a17 1
 *     This product includes software developed at Ludd, University of Lule}.
d33 6
a38 2
 /* All bugs are subject to removal without further notice */
		
d40 47
d88 13
a100 1
/* mba.c - main mba routines, 930312/ragge */
d102 2
a103 4
#include "mba.h"
#include "nexus.h"
#include "vax/mba/mbavar.h"
#include "vax/mba/mbareg.h"
d105 2
a106 1
struct mba_ctrl mba_ctrl[NMBA];
d108 31
a138 4
extern mba_0(), mba_1(), mba_2(), mba_3();
int   (*mbaintv[4])() = { mba_0, mba_1, mba_2, mba_3 };
#if NMBA > 4
        Need to expand the table for more than 4 massbus adaptors
d140 22
d163 75
a237 1
mbainterrupt(mba){
d239 13
a251 4
	if(mba_hd[mba].mh_mba->mba_sr&MBA_NED){
		printf("Adresserat icke existerande massbussenhet.\n");
		mba_hd[mba].mh_mba->mba_sr=MBA_NED+MBA_MCPE;
		return;
d253 2
a254 2
	printf("Interrupt fr}n massbussadapter %d\n",mba);
	printf("mba_hd[mba]->mba_sr: %x\n",mba_hd[mba].mh_mba->mba_sr);
d258 2
a259 2
 * mbafind() set up interrupt vectors for each found mba and calls 
 * config routines for hp disks, tu and mt tapes (currently only hp).
d261 6
d268 6
a273 3
mbafind(nexnum,nexaddr){
	struct mba_regs *mbr;
	struct mba_device *mi;
a274 2
	mba_ctrl[nmba].mba_regs= (struct mba_regs *)nexaddr;
	mbr=&(mba_ctrl[nmba].mba_regs);
d276 2
a277 1
 * Set up interruptvectors and enable interrupt
d279 16
a294 5
	nex_vec_num(14,nexnum)=nex_vec_num(15,nexnum)=
                nex_vec_num(16,nexnum)=nex_vec_num(17,nexnum)=
		(caddr_t)mbaintv[nmba];
	mbr->mba_cr=MBCR_INIT;
	mbr->mba_cr=MBCR_IE;
d296 2
a297 1
 * Loop thru all massbuss devices and check for existance
d299 27
d327 13
a339 7
	for(i=0;i<8;i++){
		if(!mbr->mba_drv[i].rmds&MBDS_DPR) continue;
/*
 * Device found; check if generated
 */
		for(mi = mbdinit; mi->driver; mi++) {
			if(mi->alive) continue; /* Already config'd */
d343 9
a351 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
