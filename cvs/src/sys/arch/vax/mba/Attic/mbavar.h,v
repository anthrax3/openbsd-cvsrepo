head	1.8;
access;
symbols
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.20
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.18
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.16
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.14
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.10
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2007.05.10.17.59.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.11.09.36.24;	author hugh;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.27.03.14.45;	author bjc;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	97.05.29.00.05.00;	author niklas;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	96.05.03.09.09.51;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.08;	author deraadt;	state Exp;
branches;
next	;

1.3.12.1
date	2001.05.14.21.38.12;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.4.10.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.4.10.2;

1.4.10.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: mbavar.h,v 1.7 2007/05/10 17:59:26 deraadt Exp $	*/
/*	$NetBSD: mbavar.h,v 1.7 2000/06/04 18:04:39 ragge Exp $ */
/*
 * Copyright (c) 1994 Ludd, University of Lule}, Sweden
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/device.h>
#include <machine/scb.h>

#define MBCR_INIT	1
#define	MBCR_IE		(1<<2)
#define	MBDS_DPR	(1<<8)
#define	MBSR_NED	(1<<18)
#define	MBDT_MOH	(1<<13)
#define	MBDT_TYPE	511
#define MBDT_TAP	(1<<14)

#define	CLOSED		0
#define	WANTOPEN	1
#define	RDLABEL		2
#define	OPEN		3
#define	OPENRAW		4

#define	MAXMBADEV	8	/* Max units per MBA */

/*
 * Devices that have different device drivers.
 */
enum	mb_devices {
	MB_RP,	/* RM/RP disk */
	MB_TU,	/* TM03 based tape, ex. TU45 or TU77 */
	MB_MT	/* TU78 tape */
};

/*
 * Current state of the adapter.
 */
enum    sc_state {
	SC_AUTOCONF,
	SC_ACTIVE,
	SC_IDLE
};

/*
 * Return value after a finished data transfer, from device driver.
 */
enum	xfer_action {
	XFER_RESTART,
	XFER_FINISH
};

/*
 * Info passed do unit device driver during autoconfig.
 */
struct	mba_attach_args {
	int	ma_unit;
        int	ma_type;
	char	*ma_name;
	enum	mb_devices ma_devtyp;
	bus_space_tag_t ma_iot;
	bus_space_handle_t ma_ioh;
};

/*
 * Common struct used to communicate between the mba device driver
 * and the unit device driver.
 */
struct	mba_device {
	struct	mba_device *md_back;	/* linked list of runnable devices */
	    /* Start routine to be called by mbastart. */
	void	(*md_start)(struct mba_device *);
	    /* Routine to be called after attn intr */
	int	(*md_attn)(struct mba_device *);
	    /* Call after xfer finish */
	enum	xfer_action (*md_finish)(struct mba_device *, int, int *);
	void	*md_softc;	/* Backpointer to this units softc. */
	struct	mba_softc *md_mba;
	struct	buf_queue md_q;	/* queue of I/O requests */
};

struct	mba_softc {
	struct  device sc_dev;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	struct	mba_device *sc_first, *sc_last;
	enum    sc_state sc_state;
	struct	mba_device *sc_md[MAXMBADEV];
};

struct  mbaunit {
	int     nr;
	char    *name;
	enum	mb_devices devtyp;
};

/* Common prototypes */
void	mbaqueue(struct mba_device *);

@


1.7
log
@evcnt & friends were replaced by a proper interrupt counting mechanism 3 years ago; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: mbavar.h,v 1.6 2002/06/11 09:36:24 hugh Exp $	*/
@


1.6
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a110 1
	struct	evcnt sc_intrcnt;
@


1.5
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: mbavar.h,v 1.4 2000/04/27 03:14:45 bjc Exp $ */
/*	$NetBSD: mbavar.h,v 1.5 2000/01/21 23:39:56 thorpej Exp $ */
d34 1
d82 6
a87 4
	int	unit;
        int	type;
	char	*name;
	enum	mb_devices devtyp;
d109 3
a111 2
	struct  ivec_dsp sc_dsp;	/* Interrupt catch routine */
	struct  mba_regs *sc_mbareg;
a113 1
	int	sc_physnr;		/* Physical number of this mba */
@


1.4
log
@sync w/netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: mbavar.h,v 1.3 1997/05/29 00:05:00 niklas Exp $ */
d94 1
a94 1
	void	(*md_start) __P((struct mba_device *));
d96 1
a96 1
	int	(*md_attn)__P((struct mba_device *));
d98 1
a98 1
	enum	xfer_action (*md_finish) __P((struct mba_device *, int, int *));
d121 1
a121 1
void	mbaqueue __P((struct mba_device *));
@


1.4.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mbavar.h,v 1.4 2000/04/27 03:14:45 bjc Exp $ */
d94 1
a94 1
	void	(*md_start)(struct mba_device *);
d96 1
a96 1
	int	(*md_attn)(struct mba_device *);
d98 1
a98 1
	enum	xfer_action (*md_finish)(struct mba_device *, int, int *);
d121 1
a121 1
void	mbaqueue(struct mba_device *);
@


1.4.10.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mbavar.h,v 1.7 2000/06/04 18:04:39 ragge Exp $ */
a33 1
#include <machine/scb.h>
d81 4
a84 6
	int	ma_unit;
        int	ma_type;
	char	*ma_name;
	enum	mb_devices ma_devtyp;
	bus_space_tag_t ma_iot;
	bus_space_handle_t ma_ioh;
d106 2
a107 3
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	struct	evcnt sc_intrcnt;
d110 1
@


1.3
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: mbavar.h,v 1.4 1996/04/08 18:39:01 ragge Exp $ */
/*	$NetBSD: mbavar.h,v 1.4 1996/04/08 18:39:01 ragge Exp $ */
d101 1
a101 1
	struct	buf md_q;	/* Buffer head for transfers */
@


1.3.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: mbavar.h,v 1.4 2000/04/27 03:14:45 bjc Exp $ */
/*	$NetBSD: mbavar.h,v 1.5 2000/01/21 23:39:56 thorpej Exp $ */
d101 1
a101 1
	struct	buf_queue md_q;	/* queue of I/O requests */
@


1.3.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d94 1
a94 1
	void	(*md_start)(struct mba_device *);
d96 1
a96 1
	int	(*md_attn)(struct mba_device *);
d98 1
a98 1
	enum	xfer_action (*md_finish)(struct mba_device *, int, int *);
d121 1
a121 1
void	mbaqueue(struct mba_device *);
@


1.3.12.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mbavar.h,v 1.7 2000/06/04 18:04:39 ragge Exp $ */
a33 1
#include <machine/scb.h>
d81 4
a84 6
	int	ma_unit;
        int	ma_type;
	char	*ma_name;
	enum	mb_devices ma_devtyp;
	bus_space_tag_t ma_iot;
	bus_space_handle_t ma_ioh;
d106 2
a107 3
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	struct	evcnt sc_intrcnt;
d110 1
@


1.2
log
@sync w/ 0430
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mbavar.h,v 1.1 1995/02/13 00:44:04 ragge Exp $ */
d32 1
a32 3
 /* All bugs are subject to removal without further notice */

/* Mba n}nting... ragge 940311 */
d48 53
a100 44
struct mba_ctrl {
	struct mba_regs *mba_regs;
	struct mba_device *mba_device[8];
};

struct mba_device {
	struct mba_driver *driver;
	int unit;
	int mbanum;
	int drive;
	int dk;
	int alive;
	int type;
	struct mba_regs *mi_mba;
	struct mba_hd *hd;
	int drv;
	int device;
};

struct mba_slave {
	struct mba_driver *driver;
	int ctlr;
	int unit;
	int slave;
	int alive;
};

struct mba_driver {
	int (*slave)();
	char *sname;
	char *dname;
	short *type;
	int (*attach)();
	struct mba_device **info;
};

struct mba_hd {
	struct mba_device *device[8]; /* XXX - Var tidigare mh_mbip */
	int ndrive;
	int mh_active;
	struct mba_regs *mh_mba;
	struct mba_regs *mh_physmba;
	struct mba_device *mh_actf;
	struct mba_device *mh_actl;
d102 20
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
