head	1.17;
access;
symbols
	OPENBSD_5_9:1.16.0.18
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.20
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.12
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.16
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.14
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.16;
commitid	OSDG2O3Cgeifnf1W;

1.16
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.04.12.49.30;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.12.26.14.45.35;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.25.20.52.57;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.20.00.42.06;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.15.22.39.59;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.12.12.00.03;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.10.18.02.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.25.18.29.58;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.11.09.36.24;	author hugh;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.07.18.08.08;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.30.14.16.00;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2000.10.09.23.11.56;	author bjc;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.04.26.06.08.27;	author bjc;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.21.37.58;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.2.6.4;

1.2.6.4
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: bus.h,v 1.16 2011/03/23 16:54:37 pirofti Exp $	*/
/*	$NetBSD: bus.h,v 1.14 2000/06/26 04:56:13 simonb Exp $	*/

/*-
 * Copyright (c) 1996, 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1996 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_BUS_H_
#define _MACHINE_BUS_H_

/*
 * Bus address and size types
 */
typedef u_long bus_addr_t;
typedef u_long bus_size_t;

/*
 * Access methods for bus resources and address space.
 */
typedef	struct vax_bus_space *bus_space_tag_t;
typedef	u_long bus_space_handle_t;

struct vax_bus_space {
	/* cookie */
	void		*vbs_cookie;

	/* mapping/unmapping */
	int		(*vbs_map)(void *, bus_addr_t, bus_size_t,
			    int, bus_space_handle_t *);
	void		(*vbs_unmap)(void *, bus_space_handle_t,
			    bus_size_t);
	int		(*vbs_subregion)(void *, bus_space_handle_t,
			    bus_size_t, bus_size_t, bus_space_handle_t *);

	/* allocation/deallocation */
	int		(*vbs_alloc)(void *, bus_addr_t, bus_addr_t,
			    bus_size_t, bus_size_t, bus_size_t, int,
			    bus_addr_t *, bus_space_handle_t *);
	void		(*vbs_free)(void *, bus_space_handle_t,
			    bus_size_t);

	/* get kernel virtual address */
	void *		(*vbs_vaddr)(void *, bus_space_handle_t);
};

/*
 *	int bus_space_map(bus_space_tag_t t, bus_addr_t addr,
 *	    bus_size_t size, int flags, bus_space_handle_t *bshp);
 *
 * Map a region of bus space.
 */

#define	BUS_SPACE_MAP_CACHEABLE		0x01
#define	BUS_SPACE_MAP_LINEAR		0x02
#define	BUS_SPACE_MAP_PREFETCHABLE	0x04

#define	bus_space_map(t, a, s, f, hp)					\
	(*(t)->vbs_map)((t)->vbs_cookie, (a), (s), (f), (hp))

/*
 *	int bus_space_unmap(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
 *
 * Unmap a region of bus space.
 */

#define bus_space_unmap(t, h, s)					\
	(*(t)->vbs_unmap)((t)->vbs_cookie, (h), (s))

/*
 *	int bus_space_subregion(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t offset, bus_size_t size,
 *	    bus_space_handle_t *nbshp);
 *
 * Get a new handle for a subregion of an already-mapped area of bus space.
 */

#define bus_space_subregion(t, h, o, s, nhp)				\
	(*(t)->vbs_subregion)((t)->vbs_cookie, (h), (o), (s), (nhp))

/*
 *	int bus_space_alloc(bus_space_tag_t t, bus_addr_t rstart,
 *	    bus_addr_t rend, bus_size_t size, bus_size_t align,
 *	    bus_size_t boundary, int flags, bus_addr_t *addrp,
 *	    bus_space_handle_t *bshp);
 *
 * Allocate a region of bus space.
 */

#define bus_space_alloc(t, rs, re, s, a, b, f, ap, hp)			\
	(*(t)->vbs_alloc)((t)->vbs_cookie, (rs), (re), (s), (a), (b),   \
	    (f), (ap), (hp))

/*
 *	int bus_space_free(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
 *
 * Free a region of bus space.
 */

#define bus_space_free(t, h, s)						\
	(*(t)->vbs_free)((t)->vbs_cookie, (h), (s))

/*
 *	void *bus_space_vaddr(bus_space_tag_t t, bus_space_handle_t h);
 *
 * Get kernel virtual address.
 */

#define	bus_space_vaddr(t, h)						\
	(*(t)->vbs_vaddr)((t)->vbs_cookie, (h))

/*
 *	u_intN_t bus_space_read_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset);
 *
 * Read a 1, 2, 4, or 8 byte quantity from bus space
 * described by tag/handle/offset.
 */

#define	bus_space_read_1(t, h, o)					\
	    (*(volatile u_int8_t *)((h) + (o)))

#define	bus_space_read_2(t, h, o)					\
	    (*(volatile u_int16_t *)((h) + (o)))

#define	bus_space_read_4(t, h, o)					\
	    (*(volatile u_int32_t *)((h) + (o)))

#if 0	/* Cause a link error for bus_space_read_8 */
#define	bus_space_read_8(t, h, o)	!!! bus_space_read_8 unimplemented !!!
#endif

/*
 *	void bus_space_read_multi_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    u_intN_t *addr, size_t count);
 *
 * Read `count' 1, 2, 4, or 8 byte quantities from bus space
 * described by tag/handle/offset and copy into buffer provided.
 */
static __inline void vax_mem_read_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t);
static __inline void vax_mem_read_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t);
static __inline void vax_mem_read_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t);

#define	bus_space_read_multi_1(t, h, o, a, c)				\
	vax_mem_read_multi_1((t), (h), (o), (a), (c))

#define bus_space_read_multi_2(t, h, o, a, c)				\
	vax_mem_read_multi_2((t), (h), (o), (a), (c))

#define bus_space_read_multi_4(t, h, o, a, c)				\
	vax_mem_read_multi_4((t), (h), (o), (a), (c))

#if 0	/* Cause a link error for bus_space_read_multi_8 */
#define	bus_space_read_multi_8	!!! bus_space_read_multi_8 unimplemented !!!
#endif

static __inline void
vax_mem_read_multi_1(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int8_t *a;
	size_t c;
{
	const bus_addr_t addr = h + o;

	for (; c != 0; c--, a++)
		*a = *(volatile u_int8_t *)(addr);
}

static __inline void
vax_mem_read_multi_2(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int16_t *a;
	size_t c;
{
	const bus_addr_t addr = h + o;

	for (; c != 0; c--, a++)
		*a = *(volatile u_int16_t *)(addr);
}

static __inline void
vax_mem_read_multi_4(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int32_t *a;
	size_t c;
{
	const bus_addr_t addr = h + o;

	for (; c != 0; c--, a++)
		*a = *(volatile u_int32_t *)(addr);
}

/*
 *	void bus_space_read_region_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    u_intN_t *addr, size_t count);
 *
 * Read `count' 1, 2, 4, or 8 byte quantities from bus space
 * described by tag/handle and starting at `offset' and copy into
 * buffer provided.
 */

static __inline void vax_mem_read_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t);
static __inline void vax_mem_read_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t);
static __inline void vax_mem_read_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t);

#define	bus_space_read_region_1(t, h, o, a, c)				\
	vax_mem_read_region_1((t), (h), (o), (a), (c))

#define bus_space_read_region_2(t, h, o, a, c)				\
	vax_mem_read_region_2((t), (h), (o), (a), (c))

#define bus_space_read_region_4(t, h, o, a, c)				\
	vax_mem_read_region_4((t), (h), (o), (a), (c))

#if 0	/* Cause a link error for bus_space_read_region_8 */
#define	bus_space_read_region_8					\
			!!! bus_space_read_region_8 unimplemented !!!
#endif

static __inline void
vax_mem_read_region_1(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int8_t *a;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++, a++)
		*a = *(volatile u_int8_t *)(addr);
}

static __inline void
vax_mem_read_region_2(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int16_t *a;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++, a++)
		*a = *(volatile u_int16_t *)(addr);
}

static __inline void
vax_mem_read_region_4(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int32_t *a;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++, a++)
		*a = *(volatile u_int32_t *)(addr);
}

/*
 *	void bus_space_write_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    u_intN_t value);
 *
 * Write the 1, 2, 4, or 8 byte value `value' to bus space
 * described by tag/handle/offset.
 */

#define	bus_space_write_1(t, h, o, v)					\
	((void)(*(volatile u_int8_t *)((h) + (o)) = (v)))

#define	bus_space_write_2(t, h, o, v)					\
	((void)(*(volatile u_int16_t *)((h) + (o)) = (v)))

#define	bus_space_write_4(t, h, o, v)					\
	((void)(*(volatile u_int32_t *)((h) + (o)) = (v)))

#if 0	/* Cause a link error for bus_space_write_8 */
#define	bus_space_write_8	!!! bus_space_write_8 not implemented !!!
#endif

/*
 *	void bus_space_write_multi_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    const u_intN_t *addr, size_t count);
 *
 * Write `count' 1, 2, 4, or 8 byte quantities from the buffer
 * provided to bus space described by tag/handle/offset.
 */
static __inline void vax_mem_write_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t);
static __inline void vax_mem_write_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t);
static __inline void vax_mem_write_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t);

#define	bus_space_write_multi_1(t, h, o, a, c)				\
	vax_mem_write_multi_1((t), (h), (o), (a), (c))

#define bus_space_write_multi_2(t, h, o, a, c)				\
	vax_mem_write_multi_2((t), (h), (o), (a), (c))

#define bus_space_write_multi_4(t, h, o, a, c)				\
	vax_mem_write_multi_4((t), (h), (o), (a), (c))

#if 0	/* Cause a link error for bus_space_write_multi_8 */
#define	bus_space_write_multi_8(t, h, o, a, c)				\
			!!! bus_space_write_multi_8 unimplemented !!!
#endif

static __inline void
vax_mem_write_multi_1(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	const u_int8_t *a;
	size_t c;
{
	const bus_addr_t addr = h + o;

	for (; c != 0; c--, a++)
		*(volatile u_int8_t *)(addr) = *a;
}

static __inline void
vax_mem_write_multi_2(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	const u_int16_t *a;
	size_t c;
{
	const bus_addr_t addr = h + o;

	for (; c != 0; c--, a++)
		*(volatile u_int16_t *)(addr) = *a;
}

static __inline void
vax_mem_write_multi_4(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	const u_int32_t *a;
	size_t c;
{
	const bus_addr_t addr = h + o;

	for (; c != 0; c--, a++)
		*(volatile u_int32_t *)(addr) = *a;
}

/*
 *	void bus_space_write_region_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    const u_intN_t *addr, size_t count);
 *
 * Write `count' 1, 2, 4, or 8 byte quantities from the buffer provided
 * to bus space described by tag/handle starting at `offset'.
 */
static __inline void vax_mem_write_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t);
static __inline void vax_mem_write_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t);
static __inline void vax_mem_write_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t);

#define	bus_space_write_region_1(t, h, o, a, c)				\
	vax_mem_write_region_1((t), (h), (o), (a), (c))

#define bus_space_write_region_2(t, h, o, a, c)				\
	vax_mem_write_region_2((t), (h), (o), (a), (c))

#define bus_space_write_region_4(t, h, o, a, c)				\
	vax_mem_write_region_4((t), (h), (o), (a), (c))

#if 0	/* Cause a link error for bus_space_write_region_8 */
#define	bus_space_write_region_8					\
			!!! bus_space_write_region_8 unimplemented !!!
#endif

static __inline void
vax_mem_write_region_1(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	const u_int8_t *a;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++, a++)
		*(volatile u_int8_t *)(addr) = *a;
}

static __inline void
vax_mem_write_region_2(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	const u_int16_t *a;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++, a++)
		*(volatile u_int16_t *)(addr) = *a;
}

static __inline void
vax_mem_write_region_4(t, h, o, a, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	const u_int32_t *a;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++, a++)
		*(volatile u_int32_t *)(addr) = *a;
}

/*
 *	void bus_space_set_multi_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset, u_intN_t val,
 *	    size_t count);
 *
 * Write the 1, 2, 4, or 8 byte value `val' to bus space described
 * by tag/handle/offset `count' times.
 */

static __inline void vax_mem_set_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t);
static __inline void vax_mem_set_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t);
static __inline void vax_mem_set_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t);

#define	bus_space_set_multi_1(t, h, o, v, c)				\
	vax_mem_set_multi_1((t), (h), (o), (v), (c))

#define	bus_space_set_multi_2(t, h, o, v, c)				\
	vax_mem_set_multi_2((t), (h), (o), (v), (c))

#define	bus_space_set_multi_4(t, h, o, v, c)				\
	vax_mem_set_multi_4((t), (h), (o), (v), (c))

static __inline void
vax_mem_set_multi_1(t, h, o, v, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int8_t v;
	size_t c;
{
	bus_addr_t addr = h + o;

	while (c--)
		*(volatile u_int8_t *)(addr) = v;
}

static __inline void
vax_mem_set_multi_2(t, h, o, v, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int16_t v;
	size_t c;
{
	bus_addr_t addr = h + o;

	while (c--)
		*(volatile u_int16_t *)(addr) = v;
}

static __inline void
vax_mem_set_multi_4(t, h, o, v, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int32_t v;
	size_t c;
{
	bus_addr_t addr = h + o;

	while (c--)
		*(volatile u_int32_t *)(addr) = v;
}

#if 0	/* Cause a link error for bus_space_set_multi_8 */
#define	bus_space_set_multi_8 !!! bus_space_set_multi_8 unimplemented !!!
#endif

/*
 *	void bus_space_set_region_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset, u_intN_t val,
 *	    size_t count);
 *
 * Write `count' 1, 2, 4, or 8 byte value `val' to bus space described
 * by tag/handle starting at `offset'.
 */

static __inline void vax_mem_set_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t);
static __inline void vax_mem_set_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t);
static __inline void vax_mem_set_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t);

#define	bus_space_set_region_1(t, h, o, v, c)				\
	vax_mem_set_region_1((t), (h), (o), (v), (c))

#define	bus_space_set_region_2(t, h, o, v, c)				\
	vax_mem_set_region_2((t), (h), (o), (v), (c))

#define	bus_space_set_region_4(t, h, o, v, c)				\
	vax_mem_set_region_4((t), (h), (o), (v), (c))

static __inline void
vax_mem_set_region_1(t, h, o, v, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int8_t v;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr++)
		*(volatile u_int8_t *)(addr) = v;
}

static __inline void
vax_mem_set_region_2(t, h, o, v, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int16_t v;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr += 2)
		*(volatile u_int16_t *)(addr) = v;
}

static __inline void
vax_mem_set_region_4(t, h, o, v, c)
	bus_space_tag_t t;
	bus_space_handle_t h;
	bus_size_t o;
	u_int32_t v;
	size_t c;
{
	bus_addr_t addr = h + o;

	for (; c != 0; c--, addr += 4)
		*(volatile u_int32_t *)(addr) = v;
}

#if 0	/* Cause a link error for bus_space_set_region_8 */
#define	bus_space_set_region_8	!!! bus_space_set_region_8 unimplemented !!!
#endif

/*
 *	void bus_space_copy_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh1, bus_size_t off1,
 *	    bus_space_handle_t bsh2, bus_size_t off2,
 *	    size_t count);
 *
 * Copy `count' 1, 2, 4, or 8 byte values from bus space starting
 * at tag/bsh1/off1 to bus space starting at tag/bsh2/off2.
 */

static __inline void vax_mem_copy_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, bus_space_handle_t,
	bus_size_t, size_t);
static __inline void vax_mem_copy_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, bus_space_handle_t,
	bus_size_t, size_t);
static __inline void vax_mem_copy_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, bus_space_handle_t,
	bus_size_t, size_t);

#define	bus_space_copy_1(t, h1, o1, h2, o2, c)				\
	vax_mem_copy_1((t), (h1), (o1), (h2), (o2), (c))

#define	bus_space_copy_2(t, h1, o1, h2, o2, c)				\
	vax_mem_copy_2((t), (h1), (o1), (h2), (o2), (c))

#define	bus_space_copy_4(t, h1, o1, h2, o2, c)				\
	vax_mem_copy_4((t), (h1), (o1), (h2), (o2), (c))

static __inline void
vax_mem_copy_1(t, h1, o1, h2, o2, c)
	bus_space_tag_t t;
	bus_space_handle_t h1;
	bus_size_t o1;
	bus_space_handle_t h2;
	bus_size_t o2;
	size_t c;
{
	bus_addr_t addr1 = h1 + o1;
	bus_addr_t addr2 = h2 + o2;

	if (addr1 >= addr2) {
		/* src after dest: copy forward */
		for (; c != 0; c--, addr1++, addr2++)
			*(volatile u_int8_t *)(addr2) =
			    *(volatile u_int8_t *)(addr1);
	} else {
		/* dest after src: copy backwards */
		for (addr1 += (c - 1), addr2 += (c - 1);
		    c != 0; c--, addr1--, addr2--)
			*(volatile u_int8_t *)(addr2) =
			    *(volatile u_int8_t *)(addr1);
	}
}

static __inline void
vax_mem_copy_2(t, h1, o1, h2, o2, c)
	bus_space_tag_t t;
	bus_space_handle_t h1;
	bus_size_t o1;
	bus_space_handle_t h2;
	bus_size_t o2;
	size_t c;
{
	bus_addr_t addr1 = h1 + o1;
	bus_addr_t addr2 = h2 + o2;

	if (addr1 >= addr2) {
		/* src after dest: copy forward */
		for (; c != 0; c--, addr1 += 2, addr2 += 2)
			*(volatile u_int16_t *)(addr2) =
			    *(volatile u_int16_t *)(addr1);
	} else {
		/* dest after src: copy backwards */
		for (addr1 += 2 * (c - 1), addr2 += 2 * (c - 1);
		    c != 0; c--, addr1 -= 2, addr2 -= 2)
			*(volatile u_int16_t *)(addr2) =
			    *(volatile u_int16_t *)(addr1);
	}
}

static __inline void
vax_mem_copy_4(t, h1, o1, h2, o2, c)
	bus_space_tag_t t;
	bus_space_handle_t h1;
	bus_size_t o1;
	bus_space_handle_t h2;
	bus_size_t o2;
	size_t c;
{
	bus_addr_t addr1 = h1 + o1;
	bus_addr_t addr2 = h2 + o2;

	if (addr1 >= addr2) {
		/* src after dest: copy forward */
		for (; c != 0; c--, addr1 += 4, addr2 += 4)
			*(volatile u_int32_t *)(addr2) =
			    *(volatile u_int32_t *)(addr1);
	} else {
		/* dest after src: copy backwards */
		for (addr1 += 4 * (c - 1), addr2 += 4 * (c - 1);
		    c != 0; c--, addr1 -= 4, addr2 -= 4)
			*(volatile u_int32_t *)(addr2) =
			    *(volatile u_int32_t *)(addr1);
	}
}

#if 0	/* Cause a link error for bus_space_copy_8 */
#define	bus_space_copy_8	!!! bus_space_copy_8 unimplemented !!!
#endif


/*
 * Bus read/write barrier methods.
 *
 *	void bus_space_barrier(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    bus_size_t len, int flags);
 *
 * Note: the vax does not currently require barriers, but we must
 * provide the flags to MI code.
 */
#define	bus_space_barrier(t, h, o, l, f)	\
	((void)((void)(t), (void)(h), (void)(o), (void)(l), (void)(f)))
#define	BUS_SPACE_BARRIER_READ	0x01		/* force read barrier */
#define	BUS_SPACE_BARRIER_WRITE	0x02		/* force write barrier */


/*
 * Flags used in various bus DMA methods.
 */
#define	BUS_DMA_WAITOK		0x000	/* safe to sleep (pseudo-flag) */
#define	BUS_DMA_NOWAIT		0x001	/* not safe to sleep */
#define	BUS_DMA_ALLOCNOW	0x002	/* perform resource allocation now */
#define	BUS_DMA_COHERENT	0x004	/* hint: map memory DMA coherent */
#define	BUS_DMA_BUS1		0x010	/* placeholders for bus functions... */
#define	BUS_DMA_BUS2		0x020
#define	BUS_DMA_BUS3		0x040
#define	BUS_DMA_BUS4		0x080
#define	BUS_DMA_STREAMING	0x100	/* hint: sequential, unidirectional */
#define	BUS_DMA_READ		0x200	/* mapping is device -> memory only */
#define	BUS_DMA_WRITE		0x400	/* mapping is memory -> device only */
#define	BUS_DMA_ZERO		0x800	/* zero memory in dmamem_alloc */

#define	VAX_BUS_DMA_SPILLPAGE	BUS_DMA_BUS1	/* VS4000 kludge */
/*
 * Private flags stored in the DMA map.
 */
#define DMAMAP_HAS_SGMAP	0x80000000	/* sgva/len are valid */

/* Forwards needed by prototypes below. */
struct mbuf;
struct uio;
struct vax_sgmap;

/*
 * Operations performed by bus_dmamap_sync().
 */
#define	BUS_DMASYNC_PREREAD	0x01	/* pre-read synchronization */
#define	BUS_DMASYNC_POSTREAD	0x02	/* post-read synchronization */
#define	BUS_DMASYNC_PREWRITE	0x04	/* pre-write synchronization */
#define	BUS_DMASYNC_POSTWRITE	0x08	/* post-write synchronization */

typedef struct vax_bus_dma_tag	*bus_dma_tag_t;
typedef struct vax_bus_dmamap	*bus_dmamap_t;

/*
 *	bus_dma_segment_t
 *
 *	Describes a single contiguous DMA transaction.  Values
 *	are suitable for programming into DMA registers.
 */
struct vax_bus_dma_segment {
	bus_addr_t	ds_addr;	/* DMA address */
	bus_size_t	ds_len;		/* length of transfer */
};
typedef struct vax_bus_dma_segment	bus_dma_segment_t;

struct proc;

/*
 *	bus_dma_tag_t
 *
 *	A machine-dependent opaque type describing the implementation of
 *	DMA for a given bus.
 */
struct vax_bus_dma_tag {
	void	*_cookie;		/* cookie used in the guts */
	bus_addr_t _wbase;		/* DMA window base */
	bus_size_t _wsize;		/* DMA window size */

	/*
	 * Some chipsets have a built-in boundary constraint, independent
	 * of what the device requests.  This allows that boundary to
	 * be specified.  If the device has a more restrictive contraint,
	 * the map will use that, otherwise this boundary will be used.
	 * This value is ignored if 0.
	 */
	bus_size_t _boundary;

	/*
	 * A bus may have more than one SGMAP window, so SGMAP
	 * windows also get a pointer to their SGMAP state.
	 */
	struct vax_sgmap *_sgmap;

	/*
	 * DMA mapping methods.
	 */
	int	(*_dmamap_create)(bus_dma_tag_t, bus_size_t, int,
		    bus_size_t, bus_size_t, int, bus_dmamap_t *);
	void	(*_dmamap_destroy)(bus_dma_tag_t, bus_dmamap_t);
	int	(*_dmamap_load)(bus_dma_tag_t, bus_dmamap_t, void *,
		    bus_size_t, struct proc *, int);
	int	(*_dmamap_load_mbuf)(bus_dma_tag_t, bus_dmamap_t,
		    struct mbuf *, int);
	int	(*_dmamap_load_uio)(bus_dma_tag_t, bus_dmamap_t,
		    struct uio *, int);
	int	(*_dmamap_load_raw)(bus_dma_tag_t, bus_dmamap_t,
		    bus_dma_segment_t *, int, bus_size_t, int);
	void	(*_dmamap_unload)(bus_dma_tag_t, bus_dmamap_t);
	void	(*_dmamap_sync)(bus_dma_tag_t, bus_dmamap_t,
		    bus_addr_t, bus_size_t, int);

	/*
	 * DMA memory utility functions.
	 */
	int	(*_dmamem_alloc)(bus_dma_tag_t, bus_size_t, bus_size_t,
		    bus_size_t, bus_dma_segment_t *, int, int *, int);
	void	(*_dmamem_free)(bus_dma_tag_t,
		    bus_dma_segment_t *, int);
	int	(*_dmamem_map)(bus_dma_tag_t, bus_dma_segment_t *,
		    int, size_t, caddr_t *, int);
	void	(*_dmamem_unmap)(bus_dma_tag_t, caddr_t, size_t);
	paddr_t	(*_dmamem_mmap)(bus_dma_tag_t, bus_dma_segment_t *,
		    int, off_t, int, int);
};

#define	bus_dmamap_create(t, s, n, m, b, f, p)			\
	(*(t)->_dmamap_create)((t), (s), (n), (m), (b), (f), (p))
#define	bus_dmamap_destroy(t, p)				\
	(*(t)->_dmamap_destroy)((t), (p))
#define	bus_dmamap_load(t, m, b, s, p, f)			\
	(*(t)->_dmamap_load)((t), (m), (b), (s), (p), (f))
#define	bus_dmamap_load_mbuf(t, m, b, f)			\
	(*(t)->_dmamap_load_mbuf)((t), (m), (b), (f))
#define	bus_dmamap_load_uio(t, m, u, f)				\
	(*(t)->_dmamap_load_uio)((t), (m), (u), (f))
#define	bus_dmamap_load_raw(t, m, sg, n, s, f)			\
	(*(t)->_dmamap_load_raw)((t), (m), (sg), (n), (s), (f))
#define	bus_dmamap_unload(t, p)					\
	(*(t)->_dmamap_unload)((t), (p))
#define	bus_dmamap_sync(t, p, o, l, ops)			\
	(*(t)->_dmamap_sync)((t), (p), (o), (l), (ops))
#define	bus_dmamem_alloc(t, s, a, b, sg, n, r, f)		\
	(*(t)->_dmamem_alloc)((t), (s), (a), (b), (sg), (n), (r), (f))
#define	bus_dmamem_free(t, sg, n)				\
	(*(t)->_dmamem_free)((t), (sg), (n))
#define	bus_dmamem_map(t, sg, n, s, k, f)			\
	(*(t)->_dmamem_map)((t), (sg), (n), (s), (k), (f))
#define	bus_dmamem_unmap(t, k, s)				\
	(*(t)->_dmamem_unmap)((t), (k), (s))
#define	bus_dmamem_mmap(t, sg, n, o, p, f)			\
	(*(t)->_dmamem_mmap)((t), (sg), (n), (o), (p), (f))

/*
 *	bus_dmamap_t
 *
 *	Describes a DMA mapping.
 */
struct vax_bus_dmamap {
	/*
	 * PRIVATE MEMBERS: not for use by machine-independent code.
	 */
	bus_size_t	_dm_size;	/* largest DMA transfer mappable */
	int		_dm_segcnt;	/* number of segs this map can map */
	bus_size_t	_dm_maxsegsz;	/* largest possible segment */
	bus_size_t	_dm_boundary;	/* don't cross this */
	int		_dm_flags;	/* misc. flags */

	/*
	 * This is used only for SGMAP-mapped DMA, but we keep it
	 * here to avoid pointless indirection.
	 */
	int		_dm_pteidx;	/* PTE index */
	int		_dm_ptecnt;	/* PTE count */
	u_long		_dm_sgva;	/* allocated sgva */
	bus_size_t	_dm_sgvalen;	/* svga length */

	/*
	 * PUBLIC MEMBERS: these are used by machine-independent code.
	 */
	bus_size_t	dm_mapsize;	/* size of the mapping */
	int		dm_nsegs;	/* # valid segments in mapping */
	bus_dma_segment_t dm_segs[1];	/* segments; variable length */
};

#ifdef _VAX_BUS_DMA_PRIVATE
int	_bus_dmamap_create(bus_dma_tag_t, bus_size_t, int, bus_size_t,
	    bus_size_t, int, bus_dmamap_t *);
void	_bus_dmamap_destroy(bus_dma_tag_t, bus_dmamap_t);

int	_bus_dmamap_load(bus_dma_tag_t, bus_dmamap_t,
	    void *, bus_size_t, struct proc *, int);
int	_bus_dmamap_load_mbuf(bus_dma_tag_t,
	    bus_dmamap_t, struct mbuf *, int);
int	_bus_dmamap_load_uio(bus_dma_tag_t,
	    bus_dmamap_t, struct uio *, int);
int	_bus_dmamap_load_raw(bus_dma_tag_t,
	    bus_dmamap_t, bus_dma_segment_t *, int, bus_size_t, int);

void	_bus_dmamap_unload(bus_dma_tag_t, bus_dmamap_t);
void	_bus_dmamap_sync(bus_dma_tag_t, bus_dmamap_t, bus_addr_t,
	    bus_size_t, int);

int	_bus_dmamem_alloc(bus_dma_tag_t tag, bus_size_t size,
	    bus_size_t alignment, bus_size_t boundary,
	    bus_dma_segment_t *segs, int nsegs, int *rsegs, int flags);
void	_bus_dmamem_free(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs);
int	_bus_dmamem_map(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, size_t size, caddr_t *kvap, int flags);
void	_bus_dmamem_unmap(bus_dma_tag_t tag, caddr_t kva,
	    size_t size);
paddr_t	_bus_dmamem_mmap(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, off_t off, int prot, int flags);
#endif /* _VAX_BUS_DMA_PRIVATE */

#endif /* _MACHINE_BUS_H_ */
@


1.16
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.15 2010/04/04 12:49:30 miod Exp $	*/
@


1.15
log
@OpenBSD uses bus_space_copy_#, not bus_space_copy_region_#. Make sure only the
first name is used, and remove any #define foo_region foo compatibility
defines.
Also, on sparc64, do not provide a `raw' version of bus_space_copy.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.14 2009/12/26 14:45:35 miod Exp $	*/
d65 2
a66 2
#ifndef _VAX_BUS_H_
#define _VAX_BUS_H_
d968 1
a968 1
#endif /* _VAX_BUS_H_ */
@


1.14
log
@Get rid of the (unused) ``no accounting'' bus_space_{map,unmap} routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.13 2009/12/25 20:52:57 miod Exp $	*/
d641 1
a641 1
 *	void bus_space_copy_region_N(bus_space_tag_t tag,
d650 1
a650 1
static __inline void vax_mem_copy_region_1(bus_space_tag_t,
d653 1
a653 1
static __inline void vax_mem_copy_region_2(bus_space_tag_t,
d656 1
a656 1
static __inline void vax_mem_copy_region_4(bus_space_tag_t,
d660 2
a661 2
#define	bus_space_copy_region_1(t, h1, o1, h2, o2, c)			\
	vax_mem_copy_region_1((t), (h1), (o1), (h2), (o2), (c))
d663 2
a664 2
#define	bus_space_copy_region_2(t, h1, o1, h2, o2, c)			\
	vax_mem_copy_region_2((t), (h1), (o1), (h2), (o2), (c))
d666 2
a667 2
#define	bus_space_copy_region_4(t, h1, o1, h2, o2, c)			\
	vax_mem_copy_region_4((t), (h1), (o1), (h2), (o2), (c))
d670 1
a670 1
vax_mem_copy_region_1(t, h1, o1, h2, o2, c)
d696 1
a696 1
vax_mem_copy_region_2(t, h1, o1, h2, o2, c)
d722 1
a722 1
vax_mem_copy_region_4(t, h1, o1, h2, o2, c)
d748 1
a748 1
#define	bus_space_copy_region_8	!!! bus_space_copy_region_8 unimplemented !!!
@


1.13
log
@Implement bus_space_vaddr().
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.12 2009/04/20 00:42:06 oga Exp $	*/
d86 1
a86 1
			    int, bus_space_handle_t *, int);
d88 1
a88 1
			    bus_size_t, int);
d115 1
a115 3
	(*(t)->vbs_map)((t)->vbs_cookie, (a), (s), (f), (hp), 1)
#define	vax_bus_space_map_noacct(t, a, s, f, hp)			\
	(*(t)->vbs_map)((t)->vbs_cookie, (a), (s), (f), (hp), 0)
d125 1
a125 3
	(*(t)->vbs_unmap)((t)->vbs_cookie, (h), (s), 1)
#define vax_bus_space_unmap_noacct(t, h, s)				\
	(*(t)->vbs_unmap)((t)->vbs_cookie, (h), (s), 0)
@


1.12
log
@Add a BUS_DMA_ZERO flag for bus_dmamem_alloc() to return zeroed memory.

Saves every damned driver calling bzero(), and continues the M_ZERO,
PR_ZERO symmetry.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.11 2008/08/15 22:39:59 miod Exp $	*/
d98 3
d164 9
@


1.11
log
@Remove unused and incomplete vax_bus_t enum, and unused vaxbus_dma_get_tag()
macro and related function pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.10 2008/06/26 05:42:14 ray Exp $	*/
d774 1
@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.9 2007/04/12 12:00:03 miod Exp $	*/
a793 17
/*
 *	vax_bus_t
 *
 *	Busses supported by NetBSD/vax, used by internal
 *	utility functions.  NOT TO BE USED BY MACHINE-INDEPENDENT
 *	CODE!
 */
typedef enum {
	VAX_BUS_MAINBUS,
	VAX_BUS_SBI,
	VAX_BUS_MASSBUS,
	VAX_BUS_UNIBUS,		/* Also handles QBUS */
	VAX_BUS_BI,
	VAX_BUS_XMI,
	VAX_BUS_TURBOCHANNEL
} vax_bus_t;

a837 6
	 * Internal-use only utility methods.  NOT TO BE USED BY
	 * MACHINE-INDEPENDENT CODE!
	 */
	bus_dma_tag_t (*_get_tag)(bus_dma_tag_t, vax_bus_t);

	/*
a867 3

#define	vaxbus_dma_get_tag(t, b)				\
	(*(t)->_get_tag)(t, b)
@


1.9
log
@Remove __BUS_SPACE_ADDRESS_SANITY correctly, no cookie for me. Spotted by
djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.8 2007/04/10 18:02:48 miod Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@Remove unused BUS_SPACE_ALIGNED_POINTER, __BUS_SPACE_ADDRESS_SANITY and
__BUS_SPACE_ALIGNED_ADDRESS.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.7 2005/05/25 18:29:58 jason Exp $	*/
d181 1
a181 2
	 (__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr"),	\
	    (*(volatile u_int16_t *)((h) + (o))))
d184 1
a184 2
	 (__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr"),	\
	    (*(volatile u_int32_t *)((h) + (o))))
d209 1
a209 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int16_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	vax_mem_read_multi_2((t), (h), (o), (a), (c));		\
} while (0)
d212 1
a212 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int32_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	vax_mem_read_multi_4((t), (h), (o), (a), (c));		\
} while (0)
d278 1
a278 3
do {									\
	vax_mem_read_region_1((t), (h), (o), (a), (c));		\
} while (0)
d281 1
a281 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int16_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	vax_mem_read_region_2((t), (h), (o), (a), (c));		\
} while (0)
d284 1
a284 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int32_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	vax_mem_read_region_4((t), (h), (o), (a), (c));		\
} while (0)
d343 1
a343 3
do {									\
	((void)(*(volatile u_int8_t *)((h) + (o)) = (v)));		\
} while (0)
d346 1
a346 4
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	((void)(*(volatile u_int16_t *)((h) + (o)) = (v)));		\
} while (0)
d349 1
a349 4
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	((void)(*(volatile u_int32_t *)((h) + (o)) = (v)));		\
} while (0)
d371 1
a371 3
do {									\
	vax_mem_write_multi_1((t), (h), (o), (a), (c));		\
} while (0)
d374 1
a374 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int16_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	vax_mem_write_multi_2((t), (h), (o), (a), (c));		\
} while (0)
d377 1
a377 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int32_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	vax_mem_write_multi_4((t), (h), (o), (a), (c));		\
} while (0)
d445 1
a445 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int16_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	vax_mem_write_region_2((t), (h), (o), (a), (c));		\
} while (0)
d448 1
a448 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((a), u_int32_t, "buffer");		\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	vax_mem_write_region_4((t), (h), (o), (a), (c));		\
} while (0)
d517 1
a517 4
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	vax_mem_set_multi_2((t), (h), (o), (v), (c));		\
} while (0)
d520 1
a520 4
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	vax_mem_set_multi_4((t), (h), (o), (v), (c));		\
} while (0)
d588 1
a588 4
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int16_t, "bus addr");	\
	vax_mem_set_region_2((t), (h), (o), (v), (c));		\
} while (0)
d591 1
a591 4
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h) + (o), u_int32_t, "bus addr");	\
	vax_mem_set_region_4((t), (h), (o), (v), (c));		\
} while (0)
d663 1
a663 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h1) + (o1), u_int16_t, "bus addr 1"); \
	__BUS_SPACE_ADDRESS_SANITY((h2) + (o2), u_int16_t, "bus addr 2"); \
	vax_mem_copy_region_2((t), (h1), (o1), (h2), (o2), (c));	\
} while (0)
d666 1
a666 5
do {									\
	__BUS_SPACE_ADDRESS_SANITY((h1) + (o1), u_int32_t, "bus addr 1"); \
	__BUS_SPACE_ADDRESS_SANITY((h2) + (o2), u_int32_t, "bus addr 2"); \
	vax_mem_copy_region_4((t), (h1), (o1), (h2), (o2), (c));	\
} while (0)
@


1.7
log
@comment typo
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.6 2002/06/11 09:36:24 hugh Exp $	*/
a73 26

#ifdef BUS_SPACE_DEBUG
#include <sys/systm.h> /* for printf() prototype */
/*
 * Macros for sanity-checking the aligned-ness of pointers passed to
 * bus space ops.  These are not strictly necessary on the VAX, but
 * could lead to performance improvements, and help catch problems
 * with drivers that would creep up on other architectures.
 */
#define	__BUS_SPACE_ALIGNED_ADDRESS(p, t)				\
	((((u_long)(p)) & (sizeof(t)-1)) == 0)

#define	__BUS_SPACE_ADDRESS_SANITY(p, t, d)				\
({									\
	if (__BUS_SPACE_ALIGNED_ADDRESS((p), t) == 0) {			\
		printf("%s 0x%lx not aligned to %d bytes %s:%d\n",	\
		    d, (u_long)(p), sizeof(t), __FILE__, __LINE__);	\
	}								\
	(void) 0;							\
})

#define BUS_SPACE_ALIGNED_POINTER(p, t) __BUS_SPACE_ALIGNED_ADDRESS(p, t)
#else
#define	__BUS_SPACE_ADDRESS_SANITY(p,t,d)	(void) 0
#define BUS_SPACE_ALIGNED_POINTER(p, t) ALIGNED_POINTER(p, t)
#endif /* BUS_SPACE_DEBUG */
@


1.6
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.5 2002/03/14 01:26:48 millert Exp $	*/
d1028 1
a1028 1
	 * PRIVATE MEMBERS: not for use my machine-independent code.
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.4 2002/03/07 18:08:08 jason Exp $	*/
d924 2
@


1.4
log
@Clean up BUS_DMA_* flags, and make sure all arch's define:
BUS_DMA_READ, BUS_DMA_WRITE, and BUS_DMA_STREAMING
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.3 2001/07/30 14:16:00 art Exp $	*/
d118 6
a123 6
	int		(*vbs_map) __P((void *, bus_addr_t, bus_size_t,
			    int, bus_space_handle_t *, int));
	void		(*vbs_unmap) __P((void *, bus_space_handle_t,
			    bus_size_t, int));
	int		(*vbs_subregion) __P((void *, bus_space_handle_t,
			    bus_size_t, bus_size_t, bus_space_handle_t *));
d126 1
a126 1
	int		(*vbs_alloc) __P((void *, bus_addr_t, bus_addr_t,
d128 3
a130 3
			    bus_addr_t *, bus_space_handle_t *));
	void		(*vbs_free) __P((void *, bus_space_handle_t,
			    bus_size_t));
d134 2
a135 2
 *	int bus_space_map  __P((bus_space_tag_t t, bus_addr_t addr,
 *	    bus_size_t size, int flags, bus_space_handle_t *bshp));
d150 2
a151 2
 *	int bus_space_unmap __P((bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size));
d162 1
a162 1
 *	int bus_space_subregion __P((bus_space_tag_t t,
d164 1
a164 1
 *	    bus_space_handle_t *nbshp));
d173 1
a173 1
 *	int bus_space_alloc __P((bus_space_tag_t t, bus_addr_t rstart,
d176 1
a176 1
 *	    bus_space_handle_t *bshp));
d186 2
a187 2
 *	int bus_space_free __P((bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size));
d196 2
a197 2
 *	u_intN_t bus_space_read_N __P((bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset));
d219 1
a219 1
 *	void bus_space_read_multi_N __P((bus_space_tag_t tag,
d221 1
a221 1
 *	    u_intN_t *addr, size_t count));
d226 6
a231 6
static __inline void vax_mem_read_multi_1 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t));
static __inline void vax_mem_read_multi_2 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t));
static __inline void vax_mem_read_multi_4 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t));
d297 1
a297 1
 *	void bus_space_read_region_N __P((bus_space_tag_t tag,
d299 1
a299 1
 *	    u_intN_t *addr, size_t count));
d306 6
a311 6
static __inline void vax_mem_read_region_1 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t));
static __inline void vax_mem_read_region_2 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t));
static __inline void vax_mem_read_region_4 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t));
d380 1
a380 1
 *	void bus_space_write_N __P((bus_space_tag_t tag,
d382 1
a382 1
 *	    u_intN_t value));
d410 1
a410 1
 *	void bus_space_write_multi_N __P((bus_space_tag_t tag,
d412 1
a412 1
 *	    const u_intN_t *addr, size_t count));
d417 6
a422 6
static __inline void vax_mem_write_multi_1 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t));
static __inline void vax_mem_write_multi_2 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t));
static __inline void vax_mem_write_multi_4 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t));
d491 1
a491 1
 *	void bus_space_write_region_N __P((bus_space_tag_t tag,
d493 1
a493 1
 *	    const u_intN_t *addr, size_t count));
d498 6
a503 6
static __inline void vax_mem_write_region_1 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t));
static __inline void vax_mem_write_region_2 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t));
static __inline void vax_mem_write_region_4 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t));
d570 1
a570 1
 *	void bus_space_set_multi_N __P((bus_space_tag_t tag,
d572 1
a572 1
 *	    size_t count));
d578 6
a583 6
static __inline void vax_mem_set_multi_1 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t));
static __inline void vax_mem_set_multi_2 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t));
static __inline void vax_mem_set_multi_4 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t));
d647 1
a647 1
 *	void bus_space_set_region_N __P((bus_space_tag_t tag,
d649 1
a649 1
 *	    size_t count));
d655 6
a660 6
static __inline void vax_mem_set_region_1 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t));
static __inline void vax_mem_set_region_2 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t));
static __inline void vax_mem_set_region_4 __P((bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t));
d724 1
a724 1
 *	void bus_space_copy_region_N __P((bus_space_tag_t tag,
d727 1
a727 1
 *	    size_t count));
d733 1
a733 1
static __inline void vax_mem_copy_region_1 __P((bus_space_tag_t,
d735 2
a736 2
	bus_size_t, size_t));
static __inline void vax_mem_copy_region_2 __P((bus_space_tag_t,
d738 2
a739 2
	bus_size_t, size_t));
static __inline void vax_mem_copy_region_4 __P((bus_space_tag_t,
d741 1
a741 1
	bus_size_t, size_t));
d846 1
a846 1
 *	void bus_space_barrier __P((bus_space_tag_t tag,
d848 1
a848 1
 *	    bus_size_t len, int flags));
d955 1
a955 1
	bus_dma_tag_t (*_get_tag) __P((bus_dma_tag_t, vax_bus_t));
d960 14
a973 14
	int	(*_dmamap_create) __P((bus_dma_tag_t, bus_size_t, int,
		    bus_size_t, bus_size_t, int, bus_dmamap_t *));
	void	(*_dmamap_destroy) __P((bus_dma_tag_t, bus_dmamap_t));
	int	(*_dmamap_load) __P((bus_dma_tag_t, bus_dmamap_t, void *,
		    bus_size_t, struct proc *, int));
	int	(*_dmamap_load_mbuf) __P((bus_dma_tag_t, bus_dmamap_t,
		    struct mbuf *, int));
	int	(*_dmamap_load_uio) __P((bus_dma_tag_t, bus_dmamap_t,
		    struct uio *, int));
	int	(*_dmamap_load_raw) __P((bus_dma_tag_t, bus_dmamap_t,
		    bus_dma_segment_t *, int, bus_size_t, int));
	void	(*_dmamap_unload) __P((bus_dma_tag_t, bus_dmamap_t));
	void	(*_dmamap_sync) __P((bus_dma_tag_t, bus_dmamap_t,
		    bus_addr_t, bus_size_t, int));
d978 9
a986 9
	int	(*_dmamem_alloc) __P((bus_dma_tag_t, bus_size_t, bus_size_t,
		    bus_size_t, bus_dma_segment_t *, int, int *, int));
	void	(*_dmamem_free) __P((bus_dma_tag_t,
		    bus_dma_segment_t *, int));
	int	(*_dmamem_map) __P((bus_dma_tag_t, bus_dma_segment_t *,
		    int, size_t, caddr_t *, int));
	void	(*_dmamem_unmap) __P((bus_dma_tag_t, caddr_t, size_t));
	paddr_t	(*_dmamem_mmap) __P((bus_dma_tag_t, bus_dma_segment_t *,
		    int, off_t, int, int));
d1052 16
a1067 16
int	_bus_dmamap_create __P((bus_dma_tag_t, bus_size_t, int, bus_size_t,
	    bus_size_t, int, bus_dmamap_t *));
void	_bus_dmamap_destroy __P((bus_dma_tag_t, bus_dmamap_t));

int	_bus_dmamap_load __P((bus_dma_tag_t, bus_dmamap_t,
	    void *, bus_size_t, struct proc *, int));
int	_bus_dmamap_load_mbuf __P((bus_dma_tag_t,
	    bus_dmamap_t, struct mbuf *, int));
int	_bus_dmamap_load_uio __P((bus_dma_tag_t,
	    bus_dmamap_t, struct uio *, int));
int	_bus_dmamap_load_raw __P((bus_dma_tag_t,
	    bus_dmamap_t, bus_dma_segment_t *, int, bus_size_t, int));

void	_bus_dmamap_unload __P((bus_dma_tag_t, bus_dmamap_t));
void	_bus_dmamap_sync __P((bus_dma_tag_t, bus_dmamap_t, bus_addr_t,
	    bus_size_t, int));
d1069 1
a1069 1
int	_bus_dmamem_alloc __P((bus_dma_tag_t tag, bus_size_t size,
d1071 9
a1079 9
	    bus_dma_segment_t *segs, int nsegs, int *rsegs, int flags));
void	_bus_dmamem_free __P((bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs));
int	_bus_dmamem_map __P((bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, size_t size, caddr_t *kvap, int flags));
void	_bus_dmamem_unmap __P((bus_dma_tag_t tag, caddr_t kva,
	    size_t size));
paddr_t	_bus_dmamem_mmap __P((bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, off_t off, int prot, int flags));
@


1.3
log
@Change:
int bus_dmamem_mmap(bus_dma_tag_t, bus_dma_segment_t, int, int, int, int);
to:
paddr_t bus_dmamem_mmap(bus_dma_tag_t, bus_dma_segment_t, int, int, off_t, int);

To allow mmaping offsets larger than INT_MAX. And to simply make more sense.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.2 2000/10/09 23:11:56 bjc Exp $	*/
d862 11
a872 8
#define	BUS_DMA_WAITOK		0x00	/* safe to sleep (pseudo-flag) */
#define	BUS_DMA_NOWAIT		0x01	/* not safe to sleep */
#define	BUS_DMA_ALLOCNOW	0x02	/* perform resource allocation now */
#define	BUS_DMA_COHERENT	0x04	/* hint: map memory DMA coherent */
#define	BUS_DMA_BUS1		0x10	/* placeholders for bus functions... */
#define	BUS_DMA_BUS2		0x20
#define	BUS_DMA_BUS3		0x40
#define	BUS_DMA_BUS4		0x80
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.3 2001/07/30 14:16:00 art Exp $	*/
d118 6
a123 6
	int		(*vbs_map)(void *, bus_addr_t, bus_size_t,
			    int, bus_space_handle_t *, int);
	void		(*vbs_unmap)(void *, bus_space_handle_t,
			    bus_size_t, int);
	int		(*vbs_subregion)(void *, bus_space_handle_t,
			    bus_size_t, bus_size_t, bus_space_handle_t *);
d126 1
a126 1
	int		(*vbs_alloc)(void *, bus_addr_t, bus_addr_t,
d128 3
a130 3
			    bus_addr_t *, bus_space_handle_t *);
	void		(*vbs_free)(void *, bus_space_handle_t,
			    bus_size_t);
d134 2
a135 2
 *	int bus_space_map(bus_space_tag_t t, bus_addr_t addr,
 *	    bus_size_t size, int flags, bus_space_handle_t *bshp);
d150 2
a151 2
 *	int bus_space_unmap(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
d162 1
a162 1
 *	int bus_space_subregion(bus_space_tag_t t,
d164 1
a164 1
 *	    bus_space_handle_t *nbshp);
d173 1
a173 1
 *	int bus_space_alloc(bus_space_tag_t t, bus_addr_t rstart,
d176 1
a176 1
 *	    bus_space_handle_t *bshp);
d186 2
a187 2
 *	int bus_space_free(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
d196 2
a197 2
 *	u_intN_t bus_space_read_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset);
d219 1
a219 1
 *	void bus_space_read_multi_N(bus_space_tag_t tag,
d221 1
a221 1
 *	    u_intN_t *addr, size_t count);
d226 6
a231 6
static __inline void vax_mem_read_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t);
static __inline void vax_mem_read_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t);
static __inline void vax_mem_read_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t);
d297 1
a297 1
 *	void bus_space_read_region_N(bus_space_tag_t tag,
d299 1
a299 1
 *	    u_intN_t *addr, size_t count);
d306 6
a311 6
static __inline void vax_mem_read_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t);
static __inline void vax_mem_read_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t);
static __inline void vax_mem_read_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t);
d380 1
a380 1
 *	void bus_space_write_N(bus_space_tag_t tag,
d382 1
a382 1
 *	    u_intN_t value);
d410 1
a410 1
 *	void bus_space_write_multi_N(bus_space_tag_t tag,
d412 1
a412 1
 *	    const u_intN_t *addr, size_t count);
d417 6
a422 6
static __inline void vax_mem_write_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t);
static __inline void vax_mem_write_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t);
static __inline void vax_mem_write_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t);
d491 1
a491 1
 *	void bus_space_write_region_N(bus_space_tag_t tag,
d493 1
a493 1
 *	    const u_intN_t *addr, size_t count);
d498 6
a503 6
static __inline void vax_mem_write_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t);
static __inline void vax_mem_write_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t);
static __inline void vax_mem_write_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t);
d570 1
a570 1
 *	void bus_space_set_multi_N(bus_space_tag_t tag,
d572 1
a572 1
 *	    size_t count);
d578 6
a583 6
static __inline void vax_mem_set_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t);
static __inline void vax_mem_set_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t);
static __inline void vax_mem_set_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t);
d647 1
a647 1
 *	void bus_space_set_region_N(bus_space_tag_t tag,
d649 1
a649 1
 *	    size_t count);
d655 6
a660 6
static __inline void vax_mem_set_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t);
static __inline void vax_mem_set_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t);
static __inline void vax_mem_set_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t);
d724 1
a724 1
 *	void bus_space_copy_region_N(bus_space_tag_t tag,
d727 1
a727 1
 *	    size_t count);
d733 1
a733 1
static __inline void vax_mem_copy_region_1(bus_space_tag_t,
d735 2
a736 2
	bus_size_t, size_t);
static __inline void vax_mem_copy_region_2(bus_space_tag_t,
d738 2
a739 2
	bus_size_t, size_t);
static __inline void vax_mem_copy_region_4(bus_space_tag_t,
d741 1
a741 1
	bus_size_t, size_t);
d846 1
a846 1
 *	void bus_space_barrier(bus_space_tag_t tag,
d848 1
a848 1
 *	    bus_size_t len, int flags);
d862 8
a869 11
#define	BUS_DMA_WAITOK		0x000	/* safe to sleep (pseudo-flag) */
#define	BUS_DMA_NOWAIT		0x001	/* not safe to sleep */
#define	BUS_DMA_ALLOCNOW	0x002	/* perform resource allocation now */
#define	BUS_DMA_COHERENT	0x004	/* hint: map memory DMA coherent */
#define	BUS_DMA_BUS1		0x010	/* placeholders for bus functions... */
#define	BUS_DMA_BUS2		0x020
#define	BUS_DMA_BUS3		0x040
#define	BUS_DMA_BUS4		0x080
#define	BUS_DMA_STREAMING	0x100	/* hint: sequential, unidirectional */
#define	BUS_DMA_READ		0x200	/* mapping is device -> memory only */
#define	BUS_DMA_WRITE		0x400	/* mapping is memory -> device only */
d952 1
a952 1
	bus_dma_tag_t (*_get_tag)(bus_dma_tag_t, vax_bus_t);
d957 14
a970 14
	int	(*_dmamap_create)(bus_dma_tag_t, bus_size_t, int,
		    bus_size_t, bus_size_t, int, bus_dmamap_t *);
	void	(*_dmamap_destroy)(bus_dma_tag_t, bus_dmamap_t);
	int	(*_dmamap_load)(bus_dma_tag_t, bus_dmamap_t, void *,
		    bus_size_t, struct proc *, int);
	int	(*_dmamap_load_mbuf)(bus_dma_tag_t, bus_dmamap_t,
		    struct mbuf *, int);
	int	(*_dmamap_load_uio)(bus_dma_tag_t, bus_dmamap_t,
		    struct uio *, int);
	int	(*_dmamap_load_raw)(bus_dma_tag_t, bus_dmamap_t,
		    bus_dma_segment_t *, int, bus_size_t, int);
	void	(*_dmamap_unload)(bus_dma_tag_t, bus_dmamap_t);
	void	(*_dmamap_sync)(bus_dma_tag_t, bus_dmamap_t,
		    bus_addr_t, bus_size_t, int);
d975 9
a983 9
	int	(*_dmamem_alloc)(bus_dma_tag_t, bus_size_t, bus_size_t,
		    bus_size_t, bus_dma_segment_t *, int, int *, int);
	void	(*_dmamem_free)(bus_dma_tag_t,
		    bus_dma_segment_t *, int);
	int	(*_dmamem_map)(bus_dma_tag_t, bus_dma_segment_t *,
		    int, size_t, caddr_t *, int);
	void	(*_dmamem_unmap)(bus_dma_tag_t, caddr_t, size_t);
	paddr_t	(*_dmamem_mmap)(bus_dma_tag_t, bus_dma_segment_t *,
		    int, off_t, int, int);
d1049 16
a1064 16
int	_bus_dmamap_create(bus_dma_tag_t, bus_size_t, int, bus_size_t,
	    bus_size_t, int, bus_dmamap_t *);
void	_bus_dmamap_destroy(bus_dma_tag_t, bus_dmamap_t);

int	_bus_dmamap_load(bus_dma_tag_t, bus_dmamap_t,
	    void *, bus_size_t, struct proc *, int);
int	_bus_dmamap_load_mbuf(bus_dma_tag_t,
	    bus_dmamap_t, struct mbuf *, int);
int	_bus_dmamap_load_uio(bus_dma_tag_t,
	    bus_dmamap_t, struct uio *, int);
int	_bus_dmamap_load_raw(bus_dma_tag_t,
	    bus_dmamap_t, bus_dma_segment_t *, int, bus_size_t, int);

void	_bus_dmamap_unload(bus_dma_tag_t, bus_dmamap_t);
void	_bus_dmamap_sync(bus_dma_tag_t, bus_dmamap_t, bus_addr_t,
	    bus_size_t, int);
d1066 1
a1066 1
int	_bus_dmamem_alloc(bus_dma_tag_t tag, bus_size_t size,
d1068 9
a1076 9
	    bus_dma_segment_t *segs, int nsegs, int *rsegs, int flags);
void	_bus_dmamem_free(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs);
int	_bus_dmamem_map(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, size_t size, caddr_t *kvap, int flags);
void	_bus_dmamem_unmap(bus_dma_tag_t tag, caddr_t kva,
	    size_t size);
paddr_t	_bus_dmamem_mmap(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, off_t off, int prot, int flags);
@


1.3.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.3.4.1 2002/06/11 03:39:19 art Exp $	*/
a923 2

struct proc;
@


1.2
log
@code to get asc* (ncr 53c9x) working; most of this from netbsd
also, write the correct stuff in cpu_coredump (vm_machdep.c)
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.1 2000/04/26 06:08:27 bjc Exp $	*/
d982 2
a983 2
	int	(*_dmamem_mmap) __P((bus_dma_tag_t, bus_dma_segment_t *,
		    int, int, int, int));
d1075 2
a1076 2
int	_bus_dmamem_mmap __P((bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, int off, int prot, int flags));
@


1.2.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.2 2000/10/09 23:11:56 bjc Exp $	*/
@


1.2.6.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.2.6.1 2001/05/14 21:37:58 niklas Exp $	*/
d982 2
a983 2
	paddr_t	(*_dmamem_mmap) __P((bus_dma_tag_t, bus_dma_segment_t *,
		    int, off_t, int, int));
d1075 2
a1076 2
paddr_t	_bus_dmamem_mmap __P((bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, off_t off, int prot, int flags));
@


1.2.6.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d118 6
a123 6
	int		(*vbs_map)(void *, bus_addr_t, bus_size_t,
			    int, bus_space_handle_t *, int);
	void		(*vbs_unmap)(void *, bus_space_handle_t,
			    bus_size_t, int);
	int		(*vbs_subregion)(void *, bus_space_handle_t,
			    bus_size_t, bus_size_t, bus_space_handle_t *);
d126 1
a126 1
	int		(*vbs_alloc)(void *, bus_addr_t, bus_addr_t,
d128 3
a130 3
			    bus_addr_t *, bus_space_handle_t *);
	void		(*vbs_free)(void *, bus_space_handle_t,
			    bus_size_t);
d134 2
a135 2
 *	int bus_space_map(bus_space_tag_t t, bus_addr_t addr,
 *	    bus_size_t size, int flags, bus_space_handle_t *bshp);
d150 2
a151 2
 *	int bus_space_unmap(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
d162 1
a162 1
 *	int bus_space_subregion(bus_space_tag_t t,
d164 1
a164 1
 *	    bus_space_handle_t *nbshp);
d173 1
a173 1
 *	int bus_space_alloc(bus_space_tag_t t, bus_addr_t rstart,
d176 1
a176 1
 *	    bus_space_handle_t *bshp);
d186 2
a187 2
 *	int bus_space_free(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
d196 2
a197 2
 *	u_intN_t bus_space_read_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset);
d219 1
a219 1
 *	void bus_space_read_multi_N(bus_space_tag_t tag,
d221 1
a221 1
 *	    u_intN_t *addr, size_t count);
d226 6
a231 6
static __inline void vax_mem_read_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t);
static __inline void vax_mem_read_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t);
static __inline void vax_mem_read_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t);
d297 1
a297 1
 *	void bus_space_read_region_N(bus_space_tag_t tag,
d299 1
a299 1
 *	    u_intN_t *addr, size_t count);
d306 6
a311 6
static __inline void vax_mem_read_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t *, size_t);
static __inline void vax_mem_read_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t *, size_t);
static __inline void vax_mem_read_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t *, size_t);
d380 1
a380 1
 *	void bus_space_write_N(bus_space_tag_t tag,
d382 1
a382 1
 *	    u_intN_t value);
d410 1
a410 1
 *	void bus_space_write_multi_N(bus_space_tag_t tag,
d412 1
a412 1
 *	    const u_intN_t *addr, size_t count);
d417 6
a422 6
static __inline void vax_mem_write_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t);
static __inline void vax_mem_write_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t);
static __inline void vax_mem_write_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t);
d491 1
a491 1
 *	void bus_space_write_region_N(bus_space_tag_t tag,
d493 1
a493 1
 *	    const u_intN_t *addr, size_t count);
d498 6
a503 6
static __inline void vax_mem_write_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int8_t *, size_t);
static __inline void vax_mem_write_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int16_t *, size_t);
static __inline void vax_mem_write_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, const u_int32_t *, size_t);
d570 1
a570 1
 *	void bus_space_set_multi_N(bus_space_tag_t tag,
d572 1
a572 1
 *	    size_t count);
d578 6
a583 6
static __inline void vax_mem_set_multi_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t);
static __inline void vax_mem_set_multi_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t);
static __inline void vax_mem_set_multi_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t);
d647 1
a647 1
 *	void bus_space_set_region_N(bus_space_tag_t tag,
d649 1
a649 1
 *	    size_t count);
d655 6
a660 6
static __inline void vax_mem_set_region_1(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int8_t, size_t);
static __inline void vax_mem_set_region_2(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int16_t, size_t);
static __inline void vax_mem_set_region_4(bus_space_tag_t,
	bus_space_handle_t, bus_size_t, u_int32_t, size_t);
d724 1
a724 1
 *	void bus_space_copy_region_N(bus_space_tag_t tag,
d727 1
a727 1
 *	    size_t count);
d733 1
a733 1
static __inline void vax_mem_copy_region_1(bus_space_tag_t,
d735 2
a736 2
	bus_size_t, size_t);
static __inline void vax_mem_copy_region_2(bus_space_tag_t,
d738 2
a739 2
	bus_size_t, size_t);
static __inline void vax_mem_copy_region_4(bus_space_tag_t,
d741 1
a741 1
	bus_size_t, size_t);
d846 1
a846 1
 *	void bus_space_barrier(bus_space_tag_t tag,
d848 1
a848 1
 *	    bus_size_t len, int flags);
d862 8
a869 11
#define	BUS_DMA_WAITOK		0x000	/* safe to sleep (pseudo-flag) */
#define	BUS_DMA_NOWAIT		0x001	/* not safe to sleep */
#define	BUS_DMA_ALLOCNOW	0x002	/* perform resource allocation now */
#define	BUS_DMA_COHERENT	0x004	/* hint: map memory DMA coherent */
#define	BUS_DMA_BUS1		0x010	/* placeholders for bus functions... */
#define	BUS_DMA_BUS2		0x020
#define	BUS_DMA_BUS3		0x040
#define	BUS_DMA_BUS4		0x080
#define	BUS_DMA_STREAMING	0x100	/* hint: sequential, unidirectional */
#define	BUS_DMA_READ		0x200	/* mapping is device -> memory only */
#define	BUS_DMA_WRITE		0x400	/* mapping is memory -> device only */
d952 1
a952 1
	bus_dma_tag_t (*_get_tag)(bus_dma_tag_t, vax_bus_t);
d957 14
a970 14
	int	(*_dmamap_create)(bus_dma_tag_t, bus_size_t, int,
		    bus_size_t, bus_size_t, int, bus_dmamap_t *);
	void	(*_dmamap_destroy)(bus_dma_tag_t, bus_dmamap_t);
	int	(*_dmamap_load)(bus_dma_tag_t, bus_dmamap_t, void *,
		    bus_size_t, struct proc *, int);
	int	(*_dmamap_load_mbuf)(bus_dma_tag_t, bus_dmamap_t,
		    struct mbuf *, int);
	int	(*_dmamap_load_uio)(bus_dma_tag_t, bus_dmamap_t,
		    struct uio *, int);
	int	(*_dmamap_load_raw)(bus_dma_tag_t, bus_dmamap_t,
		    bus_dma_segment_t *, int, bus_size_t, int);
	void	(*_dmamap_unload)(bus_dma_tag_t, bus_dmamap_t);
	void	(*_dmamap_sync)(bus_dma_tag_t, bus_dmamap_t,
		    bus_addr_t, bus_size_t, int);
d975 9
a983 9
	int	(*_dmamem_alloc)(bus_dma_tag_t, bus_size_t, bus_size_t,
		    bus_size_t, bus_dma_segment_t *, int, int *, int);
	void	(*_dmamem_free)(bus_dma_tag_t,
		    bus_dma_segment_t *, int);
	int	(*_dmamem_map)(bus_dma_tag_t, bus_dma_segment_t *,
		    int, size_t, caddr_t *, int);
	void	(*_dmamem_unmap)(bus_dma_tag_t, caddr_t, size_t);
	paddr_t	(*_dmamem_mmap)(bus_dma_tag_t, bus_dma_segment_t *,
		    int, off_t, int, int);
d1049 16
a1064 16
int	_bus_dmamap_create(bus_dma_tag_t, bus_size_t, int, bus_size_t,
	    bus_size_t, int, bus_dmamap_t *);
void	_bus_dmamap_destroy(bus_dma_tag_t, bus_dmamap_t);

int	_bus_dmamap_load(bus_dma_tag_t, bus_dmamap_t,
	    void *, bus_size_t, struct proc *, int);
int	_bus_dmamap_load_mbuf(bus_dma_tag_t,
	    bus_dmamap_t, struct mbuf *, int);
int	_bus_dmamap_load_uio(bus_dma_tag_t,
	    bus_dmamap_t, struct uio *, int);
int	_bus_dmamap_load_raw(bus_dma_tag_t,
	    bus_dmamap_t, bus_dma_segment_t *, int, bus_size_t, int);

void	_bus_dmamap_unload(bus_dma_tag_t, bus_dmamap_t);
void	_bus_dmamap_sync(bus_dma_tag_t, bus_dmamap_t, bus_addr_t,
	    bus_size_t, int);
d1066 1
a1066 1
int	_bus_dmamem_alloc(bus_dma_tag_t tag, bus_size_t size,
d1068 9
a1076 9
	    bus_dma_segment_t *segs, int nsegs, int *rsegs, int flags);
void	_bus_dmamem_free(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs);
int	_bus_dmamem_map(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, size_t size, caddr_t *kvap, int flags);
void	_bus_dmamem_unmap(bus_dma_tag_t tag, caddr_t kva,
	    size_t size);
paddr_t	_bus_dmamem_mmap(bus_dma_tag_t tag, bus_dma_segment_t *segs,
	    int nsegs, off_t off, int prot, int flags);
@


1.2.6.4
log
@Sync the SMP branch with 3.3
@
text
@a924 2
struct proc;

@


1.1
log
@new header files from netbsd -- also a spinlock.h
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: bus.h,v 1.11 2000/03/15 16:44:50 drochner Exp $	*/
d871 1
@

