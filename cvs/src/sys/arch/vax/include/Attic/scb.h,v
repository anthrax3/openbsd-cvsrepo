head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.28
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.30
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.22
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.26
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.24
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.20
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.14
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.12
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.10
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.8
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.6
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.10;
commitid	OSDG2O3Cgeifnf1W;

1.10
date	2008.08.18.23.19.24;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.10.18.31.44;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.19.20.22.36;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.07.23.10.45;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.25.13.33.36;	author hugh;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.26.03.08.42;	author bjc;	state Exp;
branches;
next	1.4;

1.4
date	97.05.29.00.04.50;	author niklas;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	95.12.14.13.59.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.27.24;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.07;	author deraadt;	state Exp;
branches;
next	;

1.4.12.1
date	2001.05.14.21.38.05;	author niklas;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	;


desc
@@


1.11
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: scb.h,v 1.10 2008/08/18 23:19:24 miod Exp $	*/
/*	$NetBSD: scb.h,v 1.11 2000/07/10 09:14:34 ragge Exp $	*/

/*
 * Copyright (c) 1994 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _VAX_SCB_H
#define	_VAX_SCB_H

/*
 * Definition of the System Control Block. More about it can be
 * found in the Vax Architecture Reference Manual, section 6.6.
 */
struct scb {
	void	*scb_unused;	/* First unused vector */
	void	*scb_mcheck;
	void	*scb_kspinv;
	void	*scb_powfail;
	void	*scb_privinst;	/* 10 Privileged Instruction fault */
	void	*scb_xfcinst;
	void	*scb_resop;
	void	*scb_resad;
	void	*scb_accessv;	/* 20 Access Control violation fault */
	void	*scb_transinv;
	void	*scb_trace;
	void	*scb_breakp;
	void	*scb_compat;	/* 30 Compatibility instruction fault */
	void	*scb_arith;
	void	*scb_unused1;
	void	*scb_unused2;
	void	*scb_chmk;	/* 40 CHMK */
	void	*scb_chme;
	void	*scb_chms;
	void	*scb_chmu;
	void	*scb_sbisilo;	/* 50 SBI Silo compare */
	void	*scb_cmrd;
	void	*scb_sbialert;
	void	*scb_sbifault;
	void	*scb_memwtimo;	/* 60 Memory write timeout */
	void	*scb_unused3;
	void	*scb_unused4;
	void	*scb_unused5;
	void	*scb_unused6;	/* 70 unused */
	void	*scb_unused7;
	void	*scb_unused8;
	void	*scb_unused9;
	void	*scb_unused10;	/* 80 unused */
	void	*scb_softint1;
	void	*scb_softint2;
	void	*scb_softint3;
	void	*scb_softint4;	/* 90 Software interrupt level 4 */
	void	*scb_softint5;
	void	*scb_softint6;
	void	*scb_softint7;
	void	*scb_softint8;	/* A0 Software interrupt level 8 */
	void	*scb_softint9;
	void	*scb_softinta;
	void	*scb_softintb;
	void	*scb_softintc;	/* B0 Software interrupt level C */
	void	*scb_softintd;
	void	*scb_softinte;
	void	*scb_softintf;
	void	*scb_timer;	/* C0 Interval timer */
	void	*scb_unused11;
	void	*scb_unused12;
	void	*scb_unused13;
	void	*scb_unused14;	/* D0 Unused */
	void	*scb_unused15;
	void	*scb_unused16;
	void	*scb_unused17;
	void	*scb_unused18;	/* E0 Unused */
	void	*scb_unused19;
	void	*scb_unused20;
	void	*scb_unused21;
	void	*scb_csrint;
	void	*scb_cstint;	/* F0 Console storage transmit interrupt */
	void	*scb_ctrint;
	void	*scb_cttint;
	struct	ivec_dsp *scb_nexvec[4][16];	/* Nexus interrupt vectors */
};

#define	SCB_KSTACK	0
#define	SCB_ISTACK	1

#define vecnum(bus, ipl, tr) (256+(ipl-0x14)*64+tr*4+bus*256)

/*
 * This struct is used when setting up interrupt vectors dynamically.
 * It puts a opaque 32 bit quantity on the stack and also has a placeholder
 * for evcount structure.
 */
struct ivec_dsp {
	char	pushr;		/* pushr */
	char	pushrarg;	/* $0x3f */
	char	jsb;
	char	mode;
	long	displacement;
	void	(*hoppaddr)(void *);
	void	*pushlarg;
	struct	evcount *ev;
};

#ifdef _KERNEL
extern	const struct ivec_dsp idsptch;
extern	struct scb *scb;
extern	struct ivec_dsp *scb_vec;

extern	paddr_t scb_init(paddr_t);
extern	int scb_vecref(int *, int *);
extern	void scb_fake(int, int);
extern	void scb_stray(void *);
extern	void scb_vecalloc(int, void(*)(void *), void *, int, struct evcount *);
#endif /* _KERNEL */

#endif /* _VAX_SCB_H */
@


1.10
log
@Add support for the ``Firefox'' VAXstation 3520/3540/3820/3840 workstations,
currently limited to serial console and a single processor working.

All ``on-board'' devices, including the Q-bus adapter, but except for
the frame buffer, are supported. The machine will boot over the network
or from SCSI devices.

Lots of thanks to Al Kossow for www.bitsavers.org, on which I found the
technical documentation allowing me to complete this port (which was
lacking at the time I got that machine...).
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.h,v 1.9 2007/04/10 18:31:44 miod Exp $	*/
@


1.9
log
@More typos from my list.
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.h,v 1.8 2006/07/19 20:22:36 miod Exp $	*/
d134 5
a138 4
extern	paddr_t scb_init (paddr_t);
extern	int scb_vecref (int *, int *);
extern	void scb_fake (int, int);
extern	void scb_vecalloc (int, void(*)(void *), void *, int, struct evcount *);
@


1.8
log
@Remove long dead meat and irrelevant defines. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.h,v 1.7 2004/07/07 23:10:45 deraadt Exp $	*/
d115 1
a115 1
 * It put a opaque 32 bit quanity on the stack and also has a placeholder
@


1.7
log
@new-style interrupt counters.  based on initial work by hugh.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.h,v 1.6 2001/08/25 13:33:36 hugh Exp $	*/
a132 1
extern	struct evcount devipl_intrcnts[4];	/* IPL 2[0123] */
@


1.6
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.h,v 1.5 2000/04/26 03:08:42 bjc Exp $	*/
d116 1
a116 1
 * for evcnt structure.
d126 1
a126 1
	struct	evcnt *ev;
d133 1
a133 1
extern	struct evcnt devipl_intrcnts[4];	/* IPL 2[0123] */
d138 1
a138 1
extern	void scb_vecalloc (int, void(*)(void *), void *, int, struct evcnt *);
@


1.5
log
@vax resurrection, part 1: sync with early-april netbsd

many changes here, notable:  uvm, ansi.h, more (and cleaner) vsbus support
@
text
@d1 2
a2 2
/*	$OpenBSD: scb.h,v 1.4 1997/05/29 00:04:50 niklas Exp $	*/
/*	$NetBSD: scb.h,v 1.6 2000/01/24 02:40:32 matt Exp $	*/
d111 18
d130 1
d132 2
d135 4
a138 4
extern	paddr_t scb_init __P((paddr_t));
extern	int scb_vecref __P((int *, int *));
extern	void scb_fake __P((int, int));
extern	void scb_vecalloc __P((int, void(*)(void *), void *, int));
@


1.4
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: scb.h,v 1.4 1995/12/13 18:54:56 ragge Exp $	*/
/*	$NetBSD: scb.h,v 1.4 1995/12/13 18:54:56 ragge Exp $	*/
d33 2
a34 1

d108 3
d113 8
a120 1
#endif
@


1.4.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: scb.h,v 1.5 2000/04/26 03:08:42 bjc Exp $	*/
/*	$NetBSD: scb.h,v 1.6 2000/01/24 02:40:32 matt Exp $	*/
d33 1
a33 2
#ifndef _VAX_SCB_H
#define	_VAX_SCB_H
a106 3
#define	SCB_KSTACK	0
#define	SCB_ISTACK	1

d109 1
a109 8

extern	paddr_t scb_init __P((paddr_t));
extern	int scb_vecref __P((int *, int *));
extern	void scb_fake __P((int, int));
extern	void scb_vecalloc __P((int, void(*)(void *), void *, int));
#endif /* _KERNEL */

#endif /* _VAX_SCB_H */
@


1.4.12.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD: scb.h,v 1.4.12.1 2001/05/14 21:38:05 niklas Exp $	*/
/*	$NetBSD: scb.h,v 1.11 2000/07/10 09:14:34 ragge Exp $	*/
a110 18
#define vecnum(bus, ipl, tr) (256+(ipl-0x14)*64+tr*4+bus*256)

/*
 * This struct is used when setting up interrupt vectors dynamically.
 * It put a opaque 32 bit quanity on the stack and also has a placeholder
 * for evcnt structure.
 */
struct ivec_dsp {
	char	pushr;		/* pushr */
	char	pushrarg;	/* $0x3f */
	char	jsb;
	char	mode;
	long	displacement;
	void	(*hoppaddr)(void *);
	void	*pushlarg;
	struct	evcnt *ev;
};

a111 1
extern	const struct ivec_dsp idsptch;
a112 2
extern	struct ivec_dsp *scb_vec;
extern	struct evcnt devipl_intrcnts[4];	/* IPL 2[0123] */
d114 4
a117 4
extern	paddr_t scb_init (paddr_t);
extern	int scb_vecref (int *, int *);
extern	void scb_fake (int, int);
extern	void scb_vecalloc (int, void(*)(void *), void *, int, struct evcnt *);
@


1.3
log
@update from netbsd
@
text
@d1 1
@


1.2
log
@update from netbsd (verbatim)
@
text
@d1 1
a1 1
/*	$NetBSD: scb.h,v 1.3 1995/11/12 14:38:31 ragge Exp $	*/
d34 4
d39 65
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: scb.h,v 1.2 1994/10/26 08:02:26 cgd Exp $	*/
a32 3
 /* All bugs are subject to removal without further notice */
		

d37 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
