head	1.38;
access;
symbols
	OPENBSD_5_9:1.37.0.2
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.36.0.10
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.36.0.2
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.36.0.6
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.36.0.4
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.31.0.8
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.6
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.29.0.12
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.10
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.6
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.8
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.4
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.2
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.28.0.4
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.28.0.2
	OPENBSD_4_2_BASE:1.28
	OPENBSD_4_1:1.27.0.4
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.26.0.2
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.24.0.2
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	UBC_SYNC_A:1.18
	OPENBSD_3_3:1.18.0.6
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.4
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	UBC_SYNC_B:1.18
	UBC:1.17.0.2
	UBC_BASE:1.17
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	SMP:1.8.0.12
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.10
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.8
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.38
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.37;
commitid	OSDG2O3Cgeifnf1W;

1.37
date	2015.11.01.20.10.00;	author miod;	state Exp;
branches;
next	1.36;
commitid	sHllVPiKPJBfwmTJ;

1.36
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2014.01.23.22.06.30;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2013.11.24.22.09.58;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2013.03.23.16.12.28;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2011.05.30.22.25.23;	author oga;	state Exp;
branches;
next	1.30;

1.30
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.29;

1.29
date	2008.06.24.21.24.03;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2007.04.22.10.05.51;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.04.17.20.39;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2005.12.20.21.41.51;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.06.22.21.30;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2005.06.30.21.53.13;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2005.06.29.06.07.04;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.31.21.30.25;	author tdeval;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.28.01.36.39;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.23.27.57;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.17.22.59.53;	author maja;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.22.18.00.10;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.18.10.47.05;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.27.06.19.57;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.06.00.45.56;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.05.20.56.56;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.09.23.04.15;	author bjc;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.26.03.08.43;	author bjc;	state Exp;
branches;
next	1.8;

1.8
date	97.09.12.09.21.25;	author maja;	state Exp;
branches
	1.8.12.1;
next	1.7;

1.7
date	97.09.10.11.47.12;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	97.08.30.09.50.26;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	97.05.29.00.04.56;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.24.46;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.09.09.47;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.13.59.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.08;	author deraadt;	state Exp;
branches;
next	;

1.8.12.1
date	2001.05.14.21.38.09;	author niklas;	state Exp;
branches;
next	1.8.12.2;

1.8.12.2
date	2001.07.04.10.24.28;	author niklas;	state Exp;
branches;
next	1.8.12.3;

1.8.12.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.8.12.4;

1.8.12.4
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.8.12.5;

1.8.12.5
date	2002.03.30.08.27.12;	author niklas;	state Exp;
branches;
next	1.8.12.6;

1.8.12.6
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	;

1.17.2.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.38
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: vmparam.h,v 1.37 2015/11/01 20:10:00 miod Exp $	*/
/*	$NetBSD: vmparam.h,v 1.32 2000/03/07 00:05:59 matt Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Slightly modified for the VAX port /IC
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vmparam.h	5.9 (Berkeley) 5/12/91
 */
#ifndef _MACHINE_VMPARAM_H_
#define _MACHINE_VMPARAM_H_

/*
 * Machine dependent constants for VAX.
 */

#define USRSTACK	KERNBASE

/*
 * Virtual memory related constants, all in bytes
 */

#ifndef MAXTSIZ
#define MAXTSIZ		(8*1024*1024)		/* max text size */
#endif
#ifndef MAXDSIZ
#define MAXDSIZ		(128*1024*1024)		/* max data size */
#endif
#ifndef MAXSSIZ
#define MAXSSIZ		(8*1024*1024)		/* max stack size */
#endif
#ifndef DFLDSIZ
#define DFLDSIZ		(8*1024*1024)		/* initial data size limit */
#endif
#ifndef DFLSSIZ
#define DFLSSIZ		(512*1024)		/* initial stack size limit */
#endif

#define STACKGAP_RANDOM	32*1024

#define BRKSIZ		(16*1024*1024)

/* 
 * Size of shared memory map
 */

#ifndef SHMMAXPGS
#define SHMMAXPGS	64		/* XXXX should be 1024 */
#endif

#define VM_PHYSSEG_MAX		1
#define VM_PHYSSEG_NOADD
#define VM_PHYSSEG_STRAT	VM_PSTRAT_RANDOM

/* MD round macros */
#define	vax_round_page(x) (((vaddr_t)(x) + VAX_PGOFSET) & ~VAX_PGOFSET)
#define	vax_trunc_page(x) ((vaddr_t)(x) & ~VAX_PGOFSET)

/* user/kernel map constants */
#define VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define VM_MAXUSER_ADDRESS	((vaddr_t)KERNBASE)
#define VM_MAX_ADDRESS		((vaddr_t)KERNBASE)
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(0xC0000000))

#define	USRIOSIZE		(8 * VAX_NPTEPG)	/* 512MB */
#define	VM_PHYS_SIZE		(USRIOSIZE*VAX_NBPG)

#endif /* _MACHINE_VMPARAM_H_ */
@


1.37
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.36 2014/01/30 18:16:41 miod Exp $	*/
@


1.36
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.35 2014/01/23 22:06:30 miod Exp $	*/
a45 7
/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack. Immediately above the user stack
 * resides kernel.
 */

#define USRTEXT		PAGE_SIZE
@


1.35
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.34 2013/11/24 22:09:58 miod Exp $	*/
a103 16

/*
 * This should be in <machine/pmap.h>, but needs to be in this file
 * due to include ordering issues.
 */

struct vm_page_md {
	struct pv_entry *pv_head;
	int		 pv_attr;	/* write/modified bits */
};

#define	VM_MDPAGE_INIT(pg) \
	do { \
		(pg)->mdpage.pv_head = NULL; \
		(pg)->mdpage.pv_attr = 0; \
	} while (0)
@


1.34
log
@Increase MAXDSIZ to 128MB, and BRKSIZ to 16MB, now that we can afford this.
Also double DFLDSIZ.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.33 2013/07/05 21:10:50 miod Exp $	*/
a108 1
#define	__HAVE_VM_PAGE_MD
@


1.33
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.32 2013/03/23 16:12:28 deraadt Exp $	*/
d50 1
a50 1
 * */
d63 1
a63 1
#define MAXDSIZ		(40*1024*1024)		/* max data size */
d69 1
a69 1
#define DFLDSIZ		(4*1024*1024)		/* initial data size limit */
d77 1
a77 1
#define BRKSIZ		(8*1024*1024)
@


1.32
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.31 2011/05/30 22:25:23 oga Exp $	*/
d63 1
a63 1
#define MAXDSIZ		(32*1024*1024)		/* max data size */
@


1.31
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.30 2011/03/23 16:54:37 pirofti Exp $	*/
d52 1
a52 1
#define USRTEXT		NBPG
@


1.30
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.29 2008/06/24 21:24:03 deraadt Exp $	*/
a89 3

#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0
@


1.29
log
@On user/kernel shared page table machines, do not let processes map their
own page 0, as discussed with miod (and many others previously, including
art and toby).  On sparc, make this __LDPGSZ because PAGE_SIZE is non-constant
ok miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.28 2007/04/22 10:05:51 miod Exp $	*/
d39 2
a40 2
#ifndef _VMPARAM_H_
#define _VMPARAM_H_
d50 1
a50 2
 *
 */
d125 1
a125 1
#endif
@


1.28
log
@Switch the vax pmap to __HAVE_VM_PAGE_MD.

pv_entry head of lists are no longer preallocated at boot, and will only be
allocated for managed pages (instead of all physical memory pages, including
those containing the kernel).

pmap and pv_entry will now be allocated from a pool, instead of malloc for the
former and a homegrown allocator which never relinquishes unused elements to
the VM system for the latter.

The net result is a slight decrease in memory usage, and better behaviour in
low-memory conditions.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.27 2006/06/04 17:20:39 miod Exp $	*/
d100 1
a100 1
#define VM_MIN_ADDRESS		((vaddr_t)0)
@


1.27
log
@When VM_PHYSSEG_MAX is 1, use VM_PSTRAT_RANDOM for VM_PHYSSEG_STRAT, this
makes uvm_page.o smaller.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.26 2005/12/20 21:41:51 miod Exp $	*/
d108 17
@


1.26
log
@Vax does not need to __HAVE_PMAP_PHYSSEG.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.25 2005/11/06 22:21:30 miod Exp $	*/
d90 1
a90 1
#define VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH /* XXX */
@


1.25
log
@Kill deprecated vm_offset_t and vm_size_t types on vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.24 2005/06/30 21:53:13 deraadt Exp $	*/
a93 5

#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	int	dummy;
};
@


1.24
log
@oops, used USRPTSIZE incorrectly
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.23 2005/06/29 06:07:04 deraadt Exp $	*/
d105 5
a109 5
#define VM_MIN_ADDRESS		((vm_offset_t)0)
#define VM_MAXUSER_ADDRESS	((vm_offset_t)KERNBASE)
#define VM_MAX_ADDRESS		((vm_offset_t)KERNBASE)
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)(0xC0000000))
@


1.23
log
@40MB virtual address space in p0; start mmap's 8MB into the data segment
ok tdeval
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.22 2005/04/11 15:13:01 deraadt Exp $	*/
d64 1
a64 1
#define MAXDSIZ		(40*1024*1024)		/* max data size */
@


1.22
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.21 2005/03/31 21:30:25 tdeval Exp $	*/
d64 1
a64 1
#define MAXDSIZ		(8*1024*1024)		/* max data size */
d78 1
a78 7
/*
 * All mmap()'ed data will be mapped above MAXDSIZ. This means that
 * pte space must be allocated for (possible) mmap()'ed data.
 * Note: This is just a hint, if we mmap() more than this the page
 * table will be expanded. (at the cost of speed).
 */
#define MMAPSPACE	(24*1024*1024)
@


1.21
log
@Reduce MAX and Default DATA Segment sizes to leave more MMAP space for
use by mmap_malloc.

This change and MMAP(2) malloc need some care to rebuild the system.
I definitely suggest using a snapshot when it appears in the coming days.

For the daring people :
- update src
- build and install new kernel, no reboot yet
- build and install new libc
- build and install new gcc
- build and install new make
- build and install new binutils
- reboot
- make build
(thanks martin@@)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2004/11/28 01:36:39 mickey Exp $	*/
d75 2
@


1.20
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.19 2003/06/02 23:27:57 millert Exp $	*/
d64 1
a64 1
#define MAXDSIZ		(24*1024*1024)		/* max data size */
d70 1
a70 1
#define DFLDSIZ		(16*1024*1024)		/* initial data size limit */
d82 1
a82 1
#define MMAPSPACE	(8*1024*1024)
@


1.19
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2002/02/17 22:59:53 maja Exp $	*/
a90 12

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.	 You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */

#define MAXSLP		20
@


1.18
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2001/12/05 16:25:44 art Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.17
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2001/11/30 17:37:43 art Exp $	*/
a132 2

#define VM_MBUF_SIZE          (NMBCLUSTERS*MCLBYTES)
@


1.17.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2001/12/05 16:25:44 art Exp $	*/
d133 2
@


1.16
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2001/09/22 18:00:10 miod Exp $	*/
a132 3

/* virtual sizes (bytes) for various kernel submaps */
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
@


1.15
log
@Remove more old, dusty, unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2001/07/18 10:47:05 art Exp $	*/
d115 1
@


1.14
log
@Get rid of the PMAP_NEW option by making it mandatory for all archs.
The archs that didn't have a proper PMAP_NEW now have a dummy implementation
with wrappers around the old functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2001/06/27 06:19:57 art Exp $	*/
a107 9
/*
 * A swapped in process is given a small amount of core without being bothered
 * by the page replacement algorithm.  Basically this says that if you are
 * swapped in you deserve some resources.  We protect the last SAFERSS
 * pages against paging and will just swap you out rather than paging you.
 */

#define SAFERSS		8		/* nominal ``small'' resident set size
					   protected against replacement */
a121 4

/*
 * Mach derived constants
 */
@


1.13
log
@MNN is no longer an option.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2001/05/06 00:45:56 art Exp $	*/
a150 1
#define PMAP_NEW
@


1.12
log
@Update some comments wrt. the CLSIZE changes.
And remove that memory price comment from 1981. It is amusing, but also
confusing because the math in there is only correct on vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2001/05/05 20:56:56 art Exp $	*/
a151 1
#define MACHINE_NEW_NONCONTIG 1
@


1.11
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2000/10/09 23:04:15 bjc Exp $	*/
a112 11
 * Note that each process has at least UPAGES+CLSIZE pages which are not
 * paged anyways (this is currently 8+2=10 pages or 5k bytes), so this
 * number just means a swapped in process is given around 25k bytes.
 * Just for fun: current memory prices are 4600$ a megabyte on VAX (4/22/81),
 * so we loan each swapped in process memory worth 100$, or just admit
 * that we don't consider it worthwhile and swap it out to disk which costs
 * $30/mb or about $0.75.
 * Update: memory prices have changed recently (9/96). At the current	 
 * value of $6 per megabyte, we lend each swapped in process memory worth
 * $0.15, or just admit that we don't consider it worthwhile and swap it out
 * to disk which costs $0.20/MB, or just under half a cent. 
@


1.10
log
@some definitions; from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2000/04/26 03:08:43 bjc Exp $	*/
d158 1
a158 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*CLBYTES)
@


1.9
log
@vax resurrection, part 1: sync with early-april netbsd

many changes here, notable:  uvm, ansi.h, more (and cleaner) vsbus support
@
text
@d1 2
a2 2
/*	$OpenBSD: vmparam.h,v 1.8 1997/09/12 09:21:25 maja Exp $	*/
/*	$NetBSD: vmparam.h,v 1.27 1999/10/22 21:14:35 ragge Exp $	*/
d153 3
@


1.8
log
@Sync with NetBSD 970827. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: vmparam.h,v 1.7 1997/09/10 11:47:12 maja Exp $	*/
/*	$NetBSD: vmparam.h,v 1.15 1997/07/12 16:20:38 perry Exp $	*/
d43 2
a44 3
#ifndef _LOCORE
#include <vm/vm_param.h>
#endif
a50 2
 * Virtual address space arrangement. On 386, both user and kernel
 * share the address space, not unlike the vax.
d53 1
a53 2
 * resides the user structure, which is UPAGES long and contains the
 * kernel stack.
d57 2
a58 2
#define	USRTEXT		0x400
#define	USRSTACK	0x7fffe000 /* XXX */
d65 1
a65 1
#define	MAXTSIZ		(8*1024*1024)		/* max text size */
d68 1
a68 1
#define	MAXDSIZ		(24*1024*1024)		/* max data size */
d70 2
a71 2
#ifndef	MAXSSIZ
#define	MAXSSIZ		(8*1024*1024)		/* max stack size */
d74 1
a74 1
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
d76 2
a77 2
#ifndef	DFLSSIZ
#define	DFLSSIZ		(512*1024)		/* initial stack size limit */
d86 1
a86 11
#define	MMAPSPACE	(24*1024*1024)

/*
 * Default sizes of swap allocation chunks (see dmap.h).
 * The actual values may be changed in vminit() based on MAXDSIZ.
 * With MAXDSIZ of 16Mb and NDMAP of 38, dmmax will be 1024.
 */

#define	DMMIN	32			/* smallest swap allocation */
#define	DMMAX	4096			/* largest potential swap allocation */
#define	DMTEXT	1024			/* swap allocation for text */
a96 5
 * Size of User Raw I/O map
 */
#define	USRIOSIZE	300

/*
d99 1
a99 1
 * amount of real time.  You probably shouldn't change this;
d106 1
a106 1
#define	MAXSLP 		20
d120 1
a120 1
 * Update: memory prices have changed recently (9/96). At the current    
d126 1
a126 1
#define	SAFERSS		8		/* nominal ``small'' resident set size
d128 14
a141 3

#define	mapin(pte, v, pfnum, prot) \
	{(*(int *)(pte) = ((pfnum)<<PGSHIFT) | (prot)) ; }
d149 4
a152 4
#define VM_MAXUSER_ADDRESS	((vm_offset_t)0x7FFFE000)
#define VM_MAX_ADDRESS		((vm_offset_t)0xC0000000)
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)0x80000000)
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)0xC0000000)
a154 1
#define VM_MBUF_SIZE		(NMBCLUSTERS*MCLBYTES)
a155 1
#define VM_PHYS_SIZE		(USRIOSIZE*CLBYTES)
d157 1
a157 2
/* pcb base */
#define	pcbb(p)		((u_int)(p)->p_addr)
d159 3
@


1.8.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: vmparam.h,v 1.10 2000/10/09 23:04:15 bjc Exp $	*/
/*	$NetBSD: vmparam.h,v 1.32 2000/03/07 00:05:59 matt Exp $	*/
d43 3
a45 2
#ifndef _VMPARAM_H_
#define _VMPARAM_H_
d52 2
d56 2
a57 1
 * resides kernel.
d61 2
a62 2
#define USRTEXT		NBPG
#define USRSTACK	KERNBASE
d69 1
a69 1
#define MAXTSIZ		(8*1024*1024)		/* max text size */
d72 1
a72 1
#define MAXDSIZ		(24*1024*1024)		/* max data size */
d74 2
a75 2
#ifndef MAXSSIZ
#define MAXSSIZ		(8*1024*1024)		/* max stack size */
d78 1
a78 1
#define DFLDSIZ		(16*1024*1024)		/* initial data size limit */
d80 2
a81 2
#ifndef DFLSSIZ
#define DFLSSIZ		(512*1024)		/* initial stack size limit */
d90 11
a100 1
#define MMAPSPACE	(8*1024*1024)
d111 5
d118 1
a118 1
 * amount of real time.	 You probably shouldn't change this;
d125 1
a125 1
#define MAXSLP		20
d139 1
a139 1
 * Update: memory prices have changed recently (9/96). At the current	 
d145 1
a145 1
#define SAFERSS		8		/* nominal ``small'' resident set size
d147 3
a149 14
#define VM_PHYSSEG_MAX		1
#define VM_PHYSSEG_NOADD
#define VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH /* XXX */

#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0

struct pmap_physseg {
	int	dummy;
};

/* MD round macros */
#define	vax_round_page(x) (((vaddr_t)(x) + VAX_PGOFSET) & ~VAX_PGOFSET)
#define	vax_trunc_page(x) ((vaddr_t)(x) & ~VAX_PGOFSET)
d157 4
a160 7
#define VM_MAXUSER_ADDRESS	((vm_offset_t)KERNBASE)
#define VM_MAX_ADDRESS		((vm_offset_t)KERNBASE)
#define VM_MIN_KERNEL_ADDRESS	((vm_offset_t)KERNBASE)
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)(0xC0000000))

#define	USRIOSIZE		(8 * VAX_NPTEPG)	/* 512MB */
#define	VM_PHYS_SIZE		(USRIOSIZE*VAX_NBPG)
d163 1
d165 1
d167 2
a168 1
#define VM_MBUF_SIZE          (NMBCLUSTERS*MCLBYTES)
a169 3
#define PMAP_NEW
#define MACHINE_NEW_NONCONTIG 1
#endif
@


1.8.12.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8.12.1 2001/05/14 21:38:09 niklas Exp $	*/
d113 11
d158 1
a158 1
#define VM_KMEM_SIZE		(NKMEMCLUSTERS*PAGE_SIZE)
d163 1
@


1.8.12.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8.12.2 2001/07/04 10:24:28 niklas Exp $	*/
d108 9
d132 4
d151 1
@


1.8.12.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d132 5
@


1.8.12.5
log
@manually merge stuff cvs missed long ago
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2002/02/17 22:59:53 maja Exp $	*/
a114 1
#define __HAVE_PMAP_PHYSSEG
@


1.8.12.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8.12.5 2002/03/30 08:27:12 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7
log
@Sync with NetBSD 970516. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: vmparam.h,v 1.6 1997/08/30 09:50:26 maja Exp $	*/
/*	$NetBSD: vmparam.h,v 1.13 1997/02/12 17:52:59 ragge Exp $	*/
d139 4
@


1.6
log
@Since the previous one died...
Some code to get my MV3600 to work. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: vmparam.h,v 1.5 1997/05/29 00:04:56 niklas Exp $	*/
/*	$NetBSD: vmparam.h,v 1.12 1996/07/20 17:58:26 ragge Exp $	*/
d69 1
a69 1
#define	MAXTSIZ		(6*1024*1024)		/* max text size */
d72 1
a72 1
#define	MAXDSIZ		(16*1024*1024)		/* max data size */
d75 1
a75 1
#define	MAXSSIZ		(16*1024*1024)		/* max stack size */
d78 1
a78 1
#define	DFLDSIZ		(6*1024*1024)		/* initial data size limit */
d85 8
a115 13
 * Sizes of the system and user portions of the system page table.
 * USRPTSIZE is maximum possible user virtual memory to be used.
 * KALLOCMEM is kernel malloc area size. How much needed for each process?
 * SYSPTSIZE is total size of statically allocated pte. (in physmem)
 * Ptsizes are in PTEs.
 */

#define	USRPTSIZE 	((MAXDSIZ >> PGSHIFT) * maxproc)
#define	KALLOCMEM	(((1*1024*1024*maxproc)>>PGSHIFT)/4)
#define SYSPTSIZE	(((USRPTSIZE * 4) >> PGSHIFT) + UPAGES * maxproc + \
			    KALLOCMEM)

/*
a143 23
/*
 * There are two clock hands, initially separated by HANDSPREAD bytes
 * (but at most all of user memory).  The amount of time to reclaim
 * a page once the pageout process examines it increases with this
 * distance and decreases as the scan rate rises.
 */

#define	HANDSPREAD	(2 * 1024 * 1024)

/*
 * The number of times per second to recompute the desired paging rate
 * and poke the pagedaemon.
 */

#define	RATETOSCHEDPAGING	4

/*
 * Believed threshold (in megabytes) for which interleaved
 * swapping area is desirable.
 */

#define	LOTSOFMEM	2

d156 1
a156 1
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)0x90000000)
@


1.5
log
@RCS tagging
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 1996/07/20 17:58:26 ragge Exp $	*/
d184 1
a184 2
#define VM_MAX_KERNEL_ADDRESS	((vm_offset_t)(VM_MIN_KERNEL_ADDRESS+\
				 (VM_KERNEL_PT_PAGES*0x10000)))
@


1.4
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.3
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: vmparam.h,v 1.11 1996/02/02 19:08:43 mycroft Exp $	*/
d100 5
@


1.2
log
@update from netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: vmparam.h,v 1.10 1995/12/13 18:53:15 ragge Exp $	*/
d42 1
a42 1
#ifndef ASSEMBLER
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: vmparam.h,v 1.9 1995/08/22 04:28:20 ragge Exp $	*/
d109 3
a111 3
#define	USRPTSIZE 	((MAXDSIZ >> PG_SHIFT) * maxproc)
#define	KALLOCMEM	(((1*1024*1024*maxproc)>>PG_SHIFT)/4)
#define SYSPTSIZE	(((USRPTSIZE * 4) >> PG_SHIFT) + UPAGES * maxproc + \
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
