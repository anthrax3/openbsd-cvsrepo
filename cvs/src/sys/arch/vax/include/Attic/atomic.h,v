head	1.10;
access;
symbols
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.9;
commitid	OSDG2O3Cgeifnf1W;

1.9
date	2014.07.19.05.27.17;	author dlg;	state Exp;
branches;
next	1.8;
commitid	NEQ8LcwWKftcc00C;

1.8
date	2014.07.18.10.40.14;	author dlg;	state Exp;
branches;
next	1.7;
commitid	GoJdpESN6XUgaZcc;

1.7
date	2014.07.12.09.47.05;	author miod;	state Exp;
branches;
next	1.6;
commitid	1MWlwuHcK0HpNNm6;

1.6
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.21.03.03.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.05.17.33.50;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.19.17.18.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.06.17.13.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: atomic.h,v 1.9 2014/07/19 05:27:17 dlg Exp $	*/

/* Public Domain */

#ifndef _VAX_ATOMIC_H_
#define _VAX_ATOMIC_H_

#if defined(_KERNEL)

#include <machine/mtpr.h>
#include <machine/intr.h>

static __inline void
atomic_setbits_int(volatile unsigned int *uip, unsigned int v)
{
	int s;

	s = splhigh();
	*uip |= v;
	splx(s);
}

static __inline void
atomic_clearbits_int(volatile unsigned int *uip, unsigned int v)
{
	int s;

	s = splhigh();
	*uip &= ~v;
	splx(s);
}

static __inline unsigned int
atomic_add_int_nv_sp(volatile unsigned int *uip, unsigned int v)
{
	int s;
	unsigned int nv;

	s = splhigh();
	*uip += v;
	nv = *uip;
	splx(s);

	return nv;
}

static __inline unsigned int
atomic_sub_int_nv_sp(volatile unsigned int *uip, unsigned int v)
{
	int s;
	unsigned int nv;

	s = splhigh();
	*uip -= v;
	nv = *uip;
	splx(s);

	return nv;
}

static inline unsigned int
atomic_cas_uint_sp(unsigned int *p, unsigned int o, unsigned int n)
{
	int s;
	unsigned int ov;

	s = splhigh();
	ov = *p;
	if (ov == o)
		*p = n;
	splx(s);

	return ov;
}

static inline unsigned int
atomic_swap_uint_sp(unsigned int *p, unsigned int v)
{
	int s;
	unsigned int ov;

	s = splhigh();
	ov = *p;
	*p = v;
	splx(s);

	return ov;
}

#define	atomic_add_int_nv	atomic_add_int_nv_sp
#define	atomic_sub_int_nv	atomic_sub_int_nv_sp
#define	atomic_cas_uint		atomic_cas_uint_sp
#define	atomic_swap_uint	atomic_swap_uint_sp

#define	atomic_add_long_nv(p,v) \
	((unsigned long)atomic_add_int_nv((unsigned int *)p, (unsigned int)v))
#define	atomic_sub_long_nv(p,v) \
	((unsigned long)atomic_sub_int_nv((unsigned int *)p, (unsigned int)v))

#define	atomic_cas_ulong(p,o,n) \
	((unsigned long)atomic_cas_uint((unsigned int *)p, (unsigned int)o, \
	 (unsigned int)n))
#define	atomic_cas_ptr(p,o,n) \
	((void *)atomic_cas_uint((unsigned int *)p, (unsigned int)o, \
	 (unsigned int)n))

#define	atomic_swap_ulong(p,o) \
	((unsigned long)atomic_swap_uint((unsigned int *)p, (unsigned int)o)
#define	atomic_swap_ptr(p,o) \
	((void *)atomic_swap_uint((unsigned int *)p, (unsigned int)o))

static inline void
__sync_synchronize(void)
{
	__asm__ volatile ("" ::: "memory");
}

#endif /* defined(_KERNEL) */
#endif /* _VAX_ATOMIC_H_ */
@


1.9
log
@miod pointed out i forgot which way round casts go.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.8 2014/07/18 10:40:14 dlg Exp $	*/
@


1.8
log
@pass atomic_{cas,swap}_uint a volatile void * instead of a volatile
void **. the latter is really hard to cast for, and not what what
solaris does.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.7 2014/07/12 09:47:05 miod Exp $	*/
d96 1
a96 1
	((unsigned long)atomic_add_int_nv((unsigned long *)p, (unsigned long)v))
d98 1
a98 1
	((unsigned long)atomic_sub_int_nv((unsigned long *)p, (unsigned long)v))
d101 2
a102 2
	((unsigned long)atomic_cas_uint((unsigned long *)p, (unsigned long)o, \
	 (unsigned long)n))
d104 2
a105 1
	((void *)atomic_cas_uint((void *)p, (void *)o, (void *)n))
d108 1
a108 1
	((unsigned long)atomic_swap_uint((unsigned long *)p, (unsigned long)o)
d110 1
a110 1
	((void *)atomic_swap_uint((void *)p, (void *)o))
@


1.7
log
@Pull in more atomic functions to avoid <sys/atomic.h> trying to use gcc4
built-ins which aren't available on vax. (A similar diff for m88k is in the
pipeline as well)
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.6 2014/03/29 18:09:30 guenther Exp $	*/
d96 1
a96 1
	((unsigned long)atomic_add_int_nv((unsigned int *)p, (unsigned int)v))
d98 1
a98 1
	((unsigned long)atomic_sub_int_nv((unsigned int *)p, (unsigned int)v))
d101 2
a102 2
	((unsigned long)atomic_cas_uint((unsigned int *)p, (unsigned int)o, \
	 (unsigned int)n))
d104 1
a104 1
	((void *)atomic_cas_uint((void **)p, (void *)o, (void *)n))
d107 1
a107 1
	((unsigned long)atomic_swap_uint((unsigned int *)p, (unsigned int)o)
d109 1
a109 1
	((void *)atomic_swap_uint((void **)p, (void *)o))
@


1.6
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.5 2011/03/23 16:54:37 pirofti Exp $	*/
d5 2
a6 2
#ifndef _MACHINE_ATOMIC_H_
#define _MACHINE_ATOMIC_H_
d33 84
d118 1
a118 1
#endif /* _MACHINE_ATOMIC_H_ */
@


1.5
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.4 2010/04/21 03:03:26 deraadt Exp $	*/
d14 1
a14 1
atomic_setbits_int(__volatile unsigned int *uip, unsigned int v)
d24 1
a24 1
atomic_clearbits_int(__volatile unsigned int *uip, unsigned int v)
@


1.4
log
@more cleanup to cope with the change that tries to make proc.h not act
like it is everything.h
ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.3 2007/04/05 17:33:50 miod Exp $	*/
d5 2
a6 2
#ifndef __VAX_ATOMIC_H__
#define __VAX_ATOMIC_H__
d34 1
a34 1
#endif /* __VAX_ATOMIC_H__ */
@


1.3
log
@Wrap bit operations between splhigh()/splx() for atomicity wrt interrupts.
Not enough for multiprocessor, but we're not there yet anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.2 2007/02/19 17:18:43 deraadt Exp $	*/
d11 1
@


1.2
log
@only make this interface available to the kernel for now, discussed witha
rt and such; tested and ok miod drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.1 2007/02/06 17:13:33 art Exp $	*/
d10 2
d15 3
d19 1
d25 3
d29 1
@


1.1
log
@Add machine/atomic.h to all architectures and define two operations
right now that are supposed to be atomic with respect to interrupts and
SMP: atomic_setbits_int and atomic_clearbits_int.

All architectures other than i386 and amd64 get dummy implementations
since at first we'll be replacing operations that are done with
"a |= bit" and "a &= ~bit" today. More proper implementations will follow

kettenis@@, miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 2
d22 2
a23 1
#endif
@

