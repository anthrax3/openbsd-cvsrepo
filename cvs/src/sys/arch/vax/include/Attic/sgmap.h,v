head	1.8;
access;
symbols
	OPENBSD_5_9:1.7.0.30
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.32
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.24
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.28
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.26
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.22
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.20
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.18
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.7;
commitid	OSDG2O3Cgeifnf1W;

1.7
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.10.21.05.06;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.06.04.27.44;	author hugh;	state Exp;
branches
	1.4.4.1
	1.4.8.1;
next	1.3;

1.3
date	2000.10.09.23.11.57;	author bjc;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.27.00.54.02;	author bjc;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.06.08.27;	author bjc;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.21.38.06;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: sgmap.h,v 1.7 2008/06/26 05:42:14 ray Exp $	*/
/* $NetBSD: sgmap.h,v 1.3 2000/05/17 21:22:18 matt Exp $ */

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_VAX_COMMON_SGMAPVAR_H
#define	_VAX_COMMON_SGMAPVAR_H

#include <sys/extent.h>
#include <machine/bus.h>
#include <machine/pte.h>

/*
 * A VAX SGMAP's state information.  Nothing in the sgmap requires
 * locking[*], with the exception of the extent map.  Locking of the
 * extent map is handled within the extent manager itself.
 *
 * [*] While the page table is a `global' resource, access to it is
 * controlled by the extent map; once a region has been allocated from
 * the map, that region is effectively `locked'.
 */
struct vax_sgmap {
	struct extent *aps_ex;		/* extent map to manage sgva space */
	pt_entry_t *aps_pt;		/* page table */
	bus_addr_t aps_sgvabase;	/* base of the sgva space */
	bus_size_t aps_sgvasize;	/* size of the sgva space */
	bus_addr_t aps_pa;		/* Address in region */
	unsigned int aps_flags;		/* flags */
};

void	vax_sgmap_init(bus_dma_tag_t, struct vax_sgmap *,
	    const char *, bus_addr_t, bus_size_t, pt_entry_t *, bus_size_t);

int	vax_sgmap_alloc(bus_dmamap_t, bus_size_t,
	    struct vax_sgmap *, int);
void	vax_sgmap_free(bus_dmamap_t, struct vax_sgmap *);

int     vax_sgmap_load(bus_dma_tag_t, bus_dmamap_t, void *, 
	    bus_size_t, struct proc *, int, struct vax_sgmap *);

int	vax_sgmap_load_mbuf(bus_dma_tag_t, bus_dmamap_t,
	    struct mbuf *, int, struct vax_sgmap *);
   
int     vax_sgmap_load_uio(bus_dma_tag_t, bus_dmamap_t,
	    struct uio *, int, struct vax_sgmap *);
         
int	vax_sgmap_load_raw(bus_dma_tag_t, bus_dmamap_t,
	    bus_dma_segment_t *, int, bus_size_t, int, struct vax_sgmap *);

void	vax_sgmap_unload( bus_dma_tag_t, bus_dmamap_t, 
	    struct vax_sgmap *);

#endif	/* _VAX_COMMON_SGMAPVAR_H */
@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.6 2003/11/10 21:05:06 miod Exp $	*/
@


1.6
log
@Get rid of the "struct pte" bitfield, and use straight integers.

Makes the code slightly more readble, removes casts, and makes some
specific constants defined for the bitfields disappear in pmap.c...

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.5 2002/03/14 01:26:48 millert Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.4 2001/02/06 04:27:44 hugh Exp $	*/
d59 1
a59 1
	struct pte *aps_pt;		/* page table */
d67 1
a67 1
	    const char *, bus_addr_t, bus_size_t, struct pte *, bus_size_t);
@


1.4
log
@Pick up work by matt@@netbsd.org to get scsi working on vaxstation 4000/90.
Is it working? I don't know.. Anyone have a machine to spare?
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.3 2000/10/09 23:11:57 bjc Exp $	*/
d66 2
a67 2
void	vax_sgmap_init __P((bus_dma_tag_t, struct vax_sgmap *,
	    const char *, bus_addr_t, bus_size_t, struct pte *, bus_size_t));
d69 3
a71 3
int	vax_sgmap_alloc __P((bus_dmamap_t, bus_size_t,
	    struct vax_sgmap *, int));
void	vax_sgmap_free __P((bus_dmamap_t, struct vax_sgmap *));
d73 2
a74 2
int     vax_sgmap_load __P((bus_dma_tag_t, bus_dmamap_t, void *, 
	    bus_size_t, struct proc *, int, struct vax_sgmap *));
d76 2
a77 2
int	vax_sgmap_load_mbuf __P((bus_dma_tag_t, bus_dmamap_t,
	    struct mbuf *, int, struct vax_sgmap *));
d79 2
a80 2
int     vax_sgmap_load_uio __P((bus_dma_tag_t, bus_dmamap_t,
	    struct uio *, int, struct vax_sgmap *));
d82 2
a83 2
int	vax_sgmap_load_raw __P((bus_dma_tag_t, bus_dmamap_t,
	    bus_dma_segment_t *, int, bus_size_t, int, struct vax_sgmap *));
d85 2
a86 2
void	vax_sgmap_unload __P(( bus_dma_tag_t, bus_dmamap_t, 
	    struct vax_sgmap *));
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.4 2001/02/06 04:27:44 hugh Exp $	*/
d66 2
a67 2
void	vax_sgmap_init(bus_dma_tag_t, struct vax_sgmap *,
	    const char *, bus_addr_t, bus_size_t, struct pte *, bus_size_t);
d69 3
a71 3
int	vax_sgmap_alloc(bus_dmamap_t, bus_size_t,
	    struct vax_sgmap *, int);
void	vax_sgmap_free(bus_dmamap_t, struct vax_sgmap *);
d73 2
a74 2
int     vax_sgmap_load(bus_dma_tag_t, bus_dmamap_t, void *, 
	    bus_size_t, struct proc *, int, struct vax_sgmap *);
d76 2
a77 2
int	vax_sgmap_load_mbuf(bus_dma_tag_t, bus_dmamap_t,
	    struct mbuf *, int, struct vax_sgmap *);
d79 2
a80 2
int     vax_sgmap_load_uio(bus_dma_tag_t, bus_dmamap_t,
	    struct uio *, int, struct vax_sgmap *);
d82 2
a83 2
int	vax_sgmap_load_raw(bus_dma_tag_t, bus_dmamap_t,
	    bus_dma_segment_t *, int, bus_size_t, int, struct vax_sgmap *);
d85 2
a86 2
void	vax_sgmap_unload( bus_dma_tag_t, bus_dmamap_t, 
	    struct vax_sgmap *);
@


1.4.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.4 2001/02/06 04:27:44 hugh Exp $	*/
@


1.4.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 2
a67 2
void	vax_sgmap_init(bus_dma_tag_t, struct vax_sgmap *,
	    const char *, bus_addr_t, bus_size_t, struct pte *, bus_size_t);
d69 3
a71 3
int	vax_sgmap_alloc(bus_dmamap_t, bus_size_t,
	    struct vax_sgmap *, int);
void	vax_sgmap_free(bus_dmamap_t, struct vax_sgmap *);
d73 2
a74 2
int     vax_sgmap_load(bus_dma_tag_t, bus_dmamap_t, void *, 
	    bus_size_t, struct proc *, int, struct vax_sgmap *);
d76 2
a77 2
int	vax_sgmap_load_mbuf(bus_dma_tag_t, bus_dmamap_t,
	    struct mbuf *, int, struct vax_sgmap *);
d79 2
a80 2
int     vax_sgmap_load_uio(bus_dma_tag_t, bus_dmamap_t,
	    struct uio *, int, struct vax_sgmap *);
d82 2
a83 2
int	vax_sgmap_load_raw(bus_dma_tag_t, bus_dmamap_t,
	    bus_dma_segment_t *, int, bus_size_t, int, struct vax_sgmap *);
d85 2
a86 2
void	vax_sgmap_unload( bus_dma_tag_t, bus_dmamap_t, 
	    struct vax_sgmap *);
@


1.4.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d59 1
a59 1
	pt_entry_t *aps_pt;		/* page table */
d67 1
a67 1
	    const char *, bus_addr_t, bus_size_t, pt_entry_t *, bus_size_t);
@


1.3
log
@code to get asc* (ncr 53c9x) working; most of this from netbsd
also, write the correct stuff in cpu_coredump (vm_machdep.c)
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.h,v 1.2 2000/04/27 00:54:02 bjc Exp $	*/
a63 1
#define	SGMAP_KA49		0x01	/* KA49 SGMAP is weird */
@


1.2
log
@oops -- forgot to give this an $OpenBSD$ tag
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $NetBSD: sgmap.h,v 1.1 1999/06/06 18:58:50 ragge Exp $ */
d63 2
@


1.1
log
@new header files from netbsd -- also a spinlock.h
@
text
@d1 1
a1 1
/*	CVSKEYWORD	*/
@

