head	1.19;
access;
symbols
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.1.0.30
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.28
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.26
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.24
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.22
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.20
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.18
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.16
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.18;
commitid	OSDG2O3Cgeifnf1W;

1.18
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2014.03.11.19.45.27;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2013.05.17.19.38.52;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.03.20.41.31;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.23.16.54.37;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2010.12.21.14.56.24;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.23.03.50.22;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.20.18.39.30;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.15.19.40.40;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.18.23.08.55;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.16.19.37.06;	author thib;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.16.05.19.13;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.05.17.31.47;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.02.17.39.58;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.01.06.01.28;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.21.25.28;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.12.03.18.38;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.06.08.27;	author bjc;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.21.37.59;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.19
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: intr.h,v 1.18 2014/03/29 18:09:30 guenther Exp $	*/
/* 	$NetBSD: intr.h,v 1.1 1998/08/18 23:55:00 matt Exp $	*/

/*
 * Copyright (c) 1998 Matt Thomas.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _MACHINE_INTR_H_
#define _MACHINE_INTR_H_

/* Define the various Interrupt Priority Levels */

/* Interrupt Priority Levels are not mutually exclusive. */

#define IPL_NONE	0x00
#define	IPL_SOFT	0x08
#define	IPL_SOFTCLOCK	0x09
#define	IPL_SOFTNET	0x0a
#define	IPL_SOFTTTY	0x0b
#define IPL_BIO		0x15	/* block I/O */
#define IPL_NET		0x15	/* network */
#define IPL_TTY		0x16	/* terminal */
#define IPL_VM		0x17	/* memory allocation */
#define	IPL_AUDIO	0x15	/* audio */
#define IPL_CLOCK	0x18	/* clock */
#define IPL_STATCLOCK	0x18	/* statclock */
#define	IPL_SCHED	0x1f
#define	IPL_HIGH	0x1f

#define	IPL_MPSAFE	0	/* no "mpsafe" interrupts */

#define	IST_UNUSABLE	-1	/* interrupt cannot be used */
#define	IST_NONE	0	/* none (dummy) */
#define	IST_PULSE	1	/* pulsed */
#define	IST_EDGE	2	/* edge-triggered */
#define	IST_LEVEL	3	/* level-triggered */

#define _splset(reg)						\
({								\
	register int val;					\
	__asm volatile ("mfpr $0x12,%0;mtpr %1,$0x12"		\
				: "=&g" (val)			\
				: "g" (reg));			\
	val;							\
})

#define	_splraise(reg)						\
({								\
	register int val;					\
	__asm volatile ("mfpr $0x12,%0"				\
				: "=&g" (val)			\
				: );				\
	if ((reg) > val) {					\
		__asm volatile ("mtpr %0,$0x12"			\
				:				\
				: "g" (reg));			\
	}							\
	val;							\
})

#define	splx(reg)						\
	__asm volatile ("mtpr %0,$0x12" : : "g" (reg))

#define	spl0()		_splset(IPL_NONE)
#define splsoftclock()	_splraise(IPL_SOFTCLOCK)
#define splsoftnet()	_splraise(IPL_SOFTNET)
#define splbio()	_splraise(IPL_BIO)
#define splnet()	_splraise(IPL_NET)
#define spltty()	_splraise(IPL_TTY)
#define splvm()		_splraise(IPL_VM)
#define splaudio()	_splraise(IPL_AUDIO)
#define splclock()	_splraise(IPL_CLOCK)
#define splstatclock()	_splraise(IPL_STATCLOCK)
#define splhigh()	_splset(IPL_HIGH)
#define	splsched()	splhigh()

/* These are better to use when playing with VAX buses */
#define	spl4()		_splraise(0x14)
#define	spl5()		_splraise(0x15)
#define	spl6()		_splraise(0x16)
#define	spl7()		_splraise(0x17)

/* SPL asserts */
#ifdef DIAGNOSTIC
/*
 * Although this function is implemented in MI code, it must be in this MD
 * header because we don't want this header to include MI includes.
 */
void splassert_fail(int, int, const char *);
extern int splassert_ctl;
void splassert_check(int, const char *);
#define splassert(__wantipl) do {			\
	if (splassert_ctl > 0) {			\
		splassert_check(__wantipl, __func__);	\
	}						\
} while (0)
#define splsoftassert(wantipl) splassert(wantipl)
#else
#define	splassert(wantipl)	do { /* nothing */ } while (0)
#define	splsoftassert(wantipl)	do { /* nothing */ } while (0)
#endif

#define	SI_SOFT			0	/* for IPL_SOFT */
#define	SI_SOFTCLOCK		1	/* for IPL_SOFTCLOCK */
#define	SI_SOFTNET		2	/* for IPL_SOFTNET */
#define	SI_SOFTTTY		3	/* for IPL_SOFTTTY */

#define	SI_NQUEUES		4

#ifndef _LOCORE

#include <machine/mutex.h>
#include <sys/queue.h>

struct soft_intrhand {
	TAILQ_ENTRY(soft_intrhand) sih_list;
	void (*sih_func)(void *);
	void *sih_arg;
	struct soft_intrq *sih_siq;
	int sih_pending;
};

struct soft_intrq {
	TAILQ_HEAD(, soft_intrhand) siq_list;
	int siq_si;
	struct mutex siq_mtx;
};

void	 softintr_disestablish(void *);
void	*softintr_establish(int, void (*)(void *), void *);
void	 softintr_init(void);
void	 softintr_schedule(void *);

#endif	/* _LOCORE */

#endif	/* _VAX_INTR_H */
@


1.18
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.17 2014/03/11 19:45:27 guenther Exp $	*/
@


1.17
log
@lint is gone, and the 'lint' conditional was never in the implementation
namespace, so stop changing behavior when it's #defined

ok beck@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.16 2013/05/17 19:38:52 kettenis Exp $	*/
d66 1
a66 1
	__asm __volatile ("mfpr $0x12,%0;mtpr %1,$0x12"		\
d75 1
a75 1
	__asm __volatile ("mfpr $0x12,%0"			\
d79 1
a79 1
		__asm __volatile ("mtpr %0,$0x12"		\
d87 1
a87 1
	__asm __volatile ("mtpr %0,$0x12" : : "g" (reg))
@


1.16
log
@Add a dummy IPL_MPSAFE definition.

ok miod@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.15 2011/09/03 20:41:31 miod Exp $	*/
a62 1
#ifndef lint
a87 1
#endif
@


1.15
log
@Driver for the audio chip found on VAXstation 4000. Tested on VLC, /60 and
/90.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.14 2011/03/23 16:54:37 pirofti Exp $	*/
d54 2
@


1.14
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.13 2010/12/21 14:56:24 claudio Exp $	*/
d96 1
@


1.13
log
@Convert netisr to a normal soft interrupt instead of hanving MD code
for it. This makes the netisr a real C function which will help further
development. No noticable performance change on i386 and amd64.
With input from kettenis@@ and miod@@ additional OKs mikeb@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.12 2010/04/23 03:50:22 miod Exp $	*/
d33 2
a34 2
#ifndef _VAX_INTR_H_
#define _VAX_INTR_H_
@


1.12
log
@Make sure IPL_SCHED is always defined by MD headers, instead of having a MI
fallback definition in <sys/sched.h>, so that there is no hidden include
ordering requirement between <machine/intr.h> and <sys/sched.h>.
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.11 2009/03/20 18:39:30 miod Exp $	*/
a156 5

/* XXX For legacy software interrupts. */
extern struct soft_intrhand *softnet_intrhand;

#define	setsoftnet()	softintr_schedule(softnet_intrhand)
@


1.11
log
@Switch vax to __HAVE_GENERIC_SOFT_INTERRUPTS.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.10 2009/03/15 19:40:40 miod Exp $	*/
d52 1
@


1.10
log
@Introduce splsoftassert(), similar to splassert() but for soft interrupt
levels. This will allow for platforms where soft interrupt levels do not
map to real hardware interrupt levels to have soft ipl values overlapping
hard ipl values without breaking spl asserts.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.9 2008/08/18 23:08:55 miod Exp $	*/
d41 4
a44 2
#define	IPL_SOFTCLOCK	0x08
#define	IPL_SOFTNET	0x0c
d125 38
@


1.9
log
@Preparing for KA60 support, crank IPL_TTY to level 0x16 (since it is
hardwired this way on KA60...), and compensate in splassert_check() when
serial device interrupts will remain at 0x14 or 0x15.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.8 2007/05/16 19:37:06 thib Exp $	*/
d118 1
d121 1
@


1.8
log
@splassert_ctl defaults to 1 now, so dont wrap the checks for
splassert_ctl > 0 in __predict_false().

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.7 2007/05/16 05:19:13 miod Exp $	*/
d45 1
a45 1
#define IPL_TTY		0x15	/* terminal */
@


1.7
log
@Switch vax to __HAVE_CPUINFO, based on an incomplete diff from art.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.6 2007/04/05 17:31:47 miod Exp $	*/
d114 1
a114 1
	if (__predict_false(splassert_ctl > 0)) {	\
@


1.6
log
@splx() does not need to return a value.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.5 2006/06/02 17:39:58 miod Exp $	*/
d96 1
@


1.5
log
@Implement splassert() on vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2006/06/01 06:01:28 miod Exp $	*/
d59 1
a59 1
#define splx(reg)						\
d81 3
d86 1
a86 1
#define	spl0()		splx(IPL_NONE)
d95 1
a95 1
#define splhigh()	splx(IPL_HIGH)
@


1.4
log
@Change spl4() to spl7() to raise-only semantics.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 2006/05/30 21:25:28 miod Exp $	*/
a57 3
/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

d99 18
@


1.3
log
@Define meaningful values for IPL_ levels, which directly map to the spl
operation. Will allow a vax implementation of splassert().
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 2006/03/12 03:18:38 brad Exp $	*/
d98 4
a101 4
#define	spl4()		splx(0x14)
#define	spl5()		splx(0x15)
#define	spl6()		splx(0x16)
#define	spl7()		splx(0x17)
@


1.2
log
@IPL_IMP -> IPL_VM
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 2000/04/26 06:08:27 bjc Exp $	*/
d40 11
a50 9
#define IPL_BIO		0	/* block I/O */
#define IPL_NET		1	/* network */
#define IPL_TTY		2	/* terminal */
#define IPL_VM		3	/* memory allocation */
#define	IPL_AUDIO	4	/* audio */
#define IPL_CLOCK	5	/* clock */
#define IPL_NONE	6

#define IPL_LEVELS	7
d58 44
a101 1
#include <machine/param.h>
@


1.1
log
@new header files from netbsd -- also a spinlock.h
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
#define IPL_IMP		3	/* memory allocation */
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 2000/04/26 06:08:27 bjc Exp $	*/
@

