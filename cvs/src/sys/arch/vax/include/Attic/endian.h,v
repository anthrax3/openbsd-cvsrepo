head	1.18;
access;
symbols
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.13.0.22
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.20
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.16
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.18
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.14
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.12
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.10
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.16
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.14
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.12
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.10.0.10
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.8
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.6
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	SMP:1.9.0.4
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.17;
commitid	OSDG2O3Cgeifnf1W;

1.17
date	2014.07.12.16.25.09;	author guenther;	state Exp;
branches;
next	1.16;
commitid	r9gXh8PA6rI3P7q2;

1.16
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.12.04.03.04;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.11.15.17.08;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.16.14.26.03;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.21.09.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.26.03.08.41;	author bjc;	state Exp;
branches;
next	1.9;

1.9
date	99.05.10.16.02.15;	author espie;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	97.11.10.10.42.48;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.11.09.23.05.18;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.04.04.03.17.06;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.04.03.05.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.24.37;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.11.25.13.11.40;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.09.09.37;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.06;	author deraadt;	state Exp;
branches;
next	;

1.9.4.1
date	2001.05.14.21.37.59;	author niklas;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	;


desc
@@


1.18
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: endian.h,v 1.17 2014/07/12 16:25:09 guenther Exp $	*/

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_ENDIAN_H_
#define _MACHINE_ENDIAN_H_

#ifdef	__GNUC__

#define	__swap64md	__swap64gen

#define	__swap32md(x) __statement({					\
	__uint32_t __swap32md_y, __swap32md_x = (x);			\
									\
	__asm ("rotl $-8, %1, %0; insv %0, $16, $8, %0; "		\
	    "rotl $8, %1, %%r1; movb %%r1, %0" :			\
	    "&=r" (__swap32md_y) : "r" (__swap32md_x) : "r1", "cc");	\
	__swap32md_y;							\
})

#define __swap16md(x) __statement({					\
	__uint16_t __swap16md_y, __swap16md_x = (x);			\
									\
	__asm ("rotl $8, %1, %0; rotl $-8, %1, %%r1; movb %%r1, %0; "	\
	    "movzwl %0, %0" :						\
	    "&=r" (__swap16md_y) : "r" (__swap16md_x) : "r1", "cc");	\
	__swap16md_y;							\
})

/* Tell sys/endian.h we have MD variants of the swap macros.  */
#ifdef notyet
#define __HAVE_MD_SWAP
#endif

#endif /* __GNUC__ */

#define _BYTE_ORDER _LITTLE_ENDIAN

#ifndef __FROM_SYS__ENDIAN
#include <sys/endian.h>
#endif

#endif /* _MACHINE_ENDIAN_H_ */
@


1.17
log
@Tackle the endian.h mess.  Make it so that:
 * you can #include <sys/endian.h> instead of <machine/endian.h>,
   and ditto <endian.h>  (fixes code that pulls in <sys/endian.h> first)

 * those will always export the symbols that POSIX specified for
   <endian.h>, including the new {be,le}{16,32,64}toh() set.  c.f.
	http://austingroupbugs.net/view.php?id=162

   if __BSD_VISIBLE then you also get the symbols that our <machine/endian.h>
   currently exports (ntohs, NTOHS, dlg's bemtoh*, etc)

 * when doing POSIX compiles (not __BSD_VISIBLE), then <netinet/in.h> and
   <arpa/inet.h> will *stop* exporting the extra symbols like BYTE_ORDER
   and betoh*

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.16 2013/07/05 21:10:50 miod Exp $	*/
@


1.16
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.15 2011/03/12 04:03:04 guenther Exp $	*/
d35 1
a35 1
	u_int32_t __swap32md_y, __swap32md_x = (x);			\
d44 1
a44 1
	u_int16_t __swap16md_y, __swap16md_x = (x);			\
d54 1
a54 1
#define MD_SWAP
d60 2
d63 1
@


1.15
log
@Add missing __statement modifiers in various endian.h files and correct
%1 to %0 in the i386 asm.

asm correction ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.14 2011/03/11 15:17:08 pirofti Exp $	*/
d38 1
a38 1
	    "rotl $8, %1, r1; movb r1, %0" :				\
d46 1
a46 1
	__asm ("rotl $8, %1, %0; rotl $-8, %1, r1; movb r1, %0; "	\
@


1.14
log
@Use _MACHINE_ENDIAN_H_ for this is The Right Thing To Do.

Okay guenther@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.13 2005/12/13 00:35:23 millert Exp $	*/
d34 1
a34 1
#define	__swap32md(x) ({						\
d43 1
a43 1
#define __swap16md(x) ({						\
@


1.13
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.12 2004/10/16 14:26:03 miod Exp $	*/
d27 2
a28 2
#ifndef _VAX_ENDIAN_H_
#define _VAX_ENDIAN_H_
d62 1
a62 1
#endif /* _VAX_ENDIAN_H_ */
@


1.12
log
@Provide a dummp __swap64md() on MD_SWAP architectures; needed by nm(1) now.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 2003/06/03 21:09:02 deraadt Exp $	*/
d59 1
a59 1
#define BYTE_ORDER LITTLE_ENDIAN
@


1.11
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 2000/04/26 03:08:41 bjc Exp $	*/
d31 2
@


1.10
log
@vax resurrection, part 1: sync with early-april netbsd

many changes here, notable:  uvm, ansi.h, more (and cleaner) vsbus support
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.9 1999/05/10 16:02:15 espie Exp $	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@Use symbolic define for BYTE_ORDER.

(don't forget that cpp is `lazy':
#define A B
#define B value
#if A == value

works, since A isn't extended before it's needed, by which time B is known)
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.8 1997/11/10 10:42:48 niklas Exp $	*/
d56 1
d58 1
@


1.9.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 2000/04/26 03:08:41 bjc Exp $	*/
a55 1
#ifdef notyet
a56 1
#endif
@


1.9.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.9.4.1 2001/05/14 21:37:59 niklas Exp $	*/
d14 5
@


1.8
log
@Be careful about local varnames in macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1997/11/09 23:05:18 niklas Exp $	*/
d60 1
a60 1
#define BYTE_ORDER 1234
@


1.7
log
@New endian.h design.  All architectures now use a common file for the bulk
part.  Some ports can optimize the swap operations.  This also means the
general API is extended with swap16, swap32, htobe16, htobe32, betoh16,
betoh32, htole16, htole32, letoh16 and letoh32.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1997/08/08 18:27:17 niklas Exp $	*/
d38 1
a38 1
	u_int32_t __y, __x = (x);					\
d42 2
a43 2
	    "&=r" (__y) : "r" (__x) : "r1", "cc");			\
	__y;								\
d47 1
a47 1
	u_int16_t __y, __x = (x);					\
d50 3
a52 2
	    "movzwl %0, %0" : "&=r" (__y) : "r" (__x) : "r1", "cc");	\
	__y;								\
@


1.6
log
@Fix NTOHS and HTONS macros.
@
text
@d1 1
a1 2
/*	$OpenBSD: endian.h,v 1.5 1997/04/04 03:05:36 millert Exp $	*/
/*	$NetBSD: endian.h,v 1.8 1996/10/13 03:28:00 christos Exp $	*/
d3 2
a4 3
/*
 * Copyright (c) 1987, 1991 Regents of the University of California.
 * All rights reserved.
d16 3
a18 5
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d20 10
a29 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @@(#)endian.h    7.8 (Berkeley) 4/3/91
d35 1
a35 26
#define _QUAD_HIGHWORD  1
#define _QUAD_LOWWORD   0

#ifndef _POSIX_SOURCE

/*
 * Definitions for byte order, according to byte significance from low
 * address to high.
 */
#define LITTLE_ENDIAN   1234    /* LSB first: i386, vax */
#define BIG_ENDIAN      4321    /* MSB first: 68000, ibm, net */
#define PDP_ENDIAN      3412    /* LSB first in word, MSW first in int32_t */

#define BYTE_ORDER      LITTLE_ENDIAN

#include <sys/cdefs.h>

typedef u_int32_t in_addr_t;                      
typedef u_int16_t in_port_t;

__BEGIN_DECLS
u_int32_t	htonl __P((u_int32_t));
u_int16_t	htons __P((u_int16_t));
u_int32_t	ntohl __P((u_int32_t));
u_int16_t	ntohs __P((u_int16_t));
__END_DECLS
d37 16
a52 1
#ifdef	__GNUC__
d54 2
a55 32
#define	__byte_swap_int32_variable(x)		\
({ register u_int32_t __y, __x = (x);	\
						\
	__asm ("rotl	$-8, %1, %0;   		\
		insv	%0, $16, $8, %0;	\
		rotl	$8, %1, r1; 		\
		movb	r1, %0"			\
		: "&=r" (__y)			\
		: "r" (__x)			\
		: "r1", "cc" );			\
	__y; })

#define __byte_swap_int16_variable(x)		\
({ register u_int16_t __y, __x = (x);	\
						\
	__asm ("rotl	$8, %1, %0;		\
		rotl	$-8, %1, r1;		\
		movb	r1, %0;			\
		movzwl	%0, %0"			\
		: "&=r" (__y)			\
		: "r" (__x)			\
		: "r1", "cc" );			\
	__y; })


#define __byte_swap_int32(x)	__byte_swap_int32_variable(x)
#define __byte_swap_int16(x)	__byte_swap_int16_variable(x)

#define	ntohl(x)        __byte_swap_int32(x)
#define ntohs(x)        __byte_swap_int16(x)
#define htonl(x)        __byte_swap_int32(x)
#define htons(x)        __byte_swap_int16(x)
d59 2
a60 9
/*
 * Macros for network/external number representation conversion.
 */
#define NTOHL(x)	(x) = ntohl((u_int32_t)(x))
#define NTOHS(x)	(x) = ntohs((u_int16_t)(x))
#define HTONL(x)	(x) = htonl((u_int32_t)(x))
#define HTONS(x)	(x) = htons((u_int16_t)(x))

#endif	/* _POSIX_SOURCE */
@


1.5
log
@Define in_addr_t and in_port_t everywhere but use u_intXX_t for
htonl and friends.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.4 1997/01/15 23:24:37 maja Exp $	*/
d110 1
a110 1
#define NTOHS(x)	(x) = ntohs((u_int32_t)(x))
d112 1
a112 1
#define HTONS(x)	(x) = htons((u_int32_t)(x))
@


1.4
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.3 1996/11/25 13:11:40 niklas Exp $	*/
d58 3
@


1.3
log
@htons et al. works on explicit 16- and 32-bit quantities and not the
machine dependent "short" and "long" integer.  Correct and enhance manpage.
Change all short and longs to u_int16_t and u_int32_t, respectively.
OpenBSD RCSIds
@
text
@d1 2
a2 2
/*	$OpenBSD: endian.h,v 1.7 1996/04/08 18:35:48 ragge Exp $	*/
/*	$NetBSD: endian.h,v 1.7 1996/04/08 18:35:48 ragge Exp $	*/
@


1.2
log
@sync w/ 0430
@
text
@d1 1
d53 1
a53 1
#define PDP_ENDIAN      3412    /* LSB first in word, MSW first in long */
d60 4
a63 4
unsigned long   htonl __P((unsigned long));
unsigned short  htons __P((unsigned short));
unsigned long   ntohl __P((unsigned long));
unsigned short  ntohs __P((unsigned short));
d68 2
a69 2
#define	__byte_swap_long_variable(x)		\
({ register unsigned long __y, __x = (x);	\
d80 2
a81 2
#define __byte_swap_word_variable(x)		\
({ register unsigned short __y, __x = (x);	\
d93 2
a94 2
#define __byte_swap_long(x)     __byte_swap_long_variable(x)
#define __byte_swap_word(x)     __byte_swap_word_variable(x)
d96 4
a99 4
#define	ntohl(x)        __byte_swap_long(x)
#define ntohs(x)        __byte_swap_word(x)
#define htonl(x)        __byte_swap_long(x)
#define htons(x)        __byte_swap_word(x)
d106 4
a109 4
#define NTOHL(x)	(x) = ntohl((unsigned long)(x))
#define NTOHS(x)	(x) = ntohs((unsigned long)(x))
#define HTONL(x)	(x) = htonl((unsigned long)(x))
#define HTONS(x)	(x) = htons((unsigned long)(x))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: endian.h,v 1.6 1995/08/21 16:36:32 ragge Exp $	*/
d105 4
a108 4
#define NTOHL(x)        (x) = ntohl((unsigned long)(x))
#define NTOHS(x)        (x) = ntohs((unsigned long)(x))
#define HTONL(x)        (x) = htonl((unsigned long)(x))
#define HTONS(x)        (x) = htons((unsigned long)(x))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
