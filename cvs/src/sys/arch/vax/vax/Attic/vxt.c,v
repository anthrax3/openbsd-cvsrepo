head	1.9;
access;
symbols
	OPENBSD_5_9:1.8.0.16
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.18
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.10
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.14
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.12
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.8;
commitid	OSDG2O3Cgeifnf1W;

1.8
date	2011.09.15.00.48.24;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.31.21.33.26;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.06.20.42.05;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.20.20.58.07;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.18.23.05.39;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.15.22.41.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.15.22.38.23;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.27.16.55.41;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: vxt.c,v 1.8 2011/09/15 00:48:24 miod Exp $	*/
/*
 * Copyright (c) 1998 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * This code is derived from software contributed to Ludd by Bertram Barth.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed at Ludd, University of 
 *	Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/mtpr.h>
#include <machine/ka48.h>
#include <machine/clock.h>

static	void	vxt_conf(void);
static	void	vxt_init(void);
static	void	vxt_memerr(void);
static	int	vxt_mchk(caddr_t);
static	void	vxt_halt(void);
static	void	vxt_reboot(int);
static	void	vxt_cache_enable(void);
static	int	missing_clkread(struct timespec *, time_t);
static	void	missing_clkwrite(void);

/* 
 * Declaration of vxt-specific calls.
 */

struct	cpu_dep vxt_calls = {
	vxt_init,
	vxt_mchk,
	vxt_memerr, 
	vxt_conf,
	missing_clkread,
	missing_clkwrite,
	6,      /* ~VUPS */
	2,	/* SCB pages */
	vxt_halt,
	vxt_reboot,
	NULL,
	hardclock
};

void
vxt_conf()
{
	printf("cpu: VXT\n");
}

void
vxt_cache_enable()
{
	int i, *tmp;
	long *par_ctl = (long *)KA48_PARCTL;

	/* Disable cache */
	mtpr(0, PR_CADR);		/* disable */
	*par_ctl &= ~KA48_PARCTL_INVENA;	/* clear ? invalid enable */
	mtpr(2, PR_CADR);		/* flush */

	/* Clear caches */
	tmp = (void *)KA48_INVFLT;	/* inv filter */
	for (i = 0; i < KA48_INVFLTSZ / sizeof(int); i++)
		tmp[i] = 0;
	*par_ctl |= KA48_PARCTL_INVENA;	/* Enable ???? */
	mtpr(4, PR_CADR);		/* enable cache */
	*par_ctl |= (KA48_PARCTL_AGS |	/* AGS? */
	    KA48_PARCTL_NPEN |		/* N? Parity Enable */
	    KA48_PARCTL_CPEN);		/* Cpu parity enable */
}

void
vxt_memerr()
{
	printf("Memory err!\n");
}

int
vxt_mchk(addr)
	caddr_t addr;
{
	panic("Machine check");
	return 0;
}

void
vxt_init()
{
	/* Turn on caches (to speed up execution a bit) */
	vxt_cache_enable();
}

static void
vxt_halt()
{
	asm("halt");
}

static void
vxt_reboot(arg)
	int arg;
{
	asm("halt");
}

int
missing_clkread(struct timespec *ts, time_t base)
{
	printf("WARNING: no TOY clock");
	return EINVAL;
}

void
missing_clkwrite()
{
}
@


1.8
log
@Switch vax to timecounters. There are three different clock sources:
- ICR/NICR on most systems (1MHz counter resolution).
- diagnostic timer on KA46/KA48 (1kHz counter resolution, counter is actually
  running at around 1024 kHz but is not guaranteed to be monotonic at this
  rate).
- 100Hz clock on VXT (nothing but the 100Hz clock interrupt).

Tested on KA49 (ICR style), KA46, KA48 (diagtmr style), VXT2000+ (VXT
{empty,hopeless}ness'r'us style).
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.7 2011/08/31 21:33:26 miod Exp $	*/
@


1.7
log
@Report VXT cpu as `VXT', not `KA48', to match what the PROM says.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.6 2011/07/06 20:42:05 miod Exp $	*/
d55 1
a55 1
static	int	missing_clkread(time_t);
d140 1
a140 2
missing_clkread(base)
	time_t base;
d143 1
a143 1
	return CLKREAD_BAD;
@


1.6
log
@Drop cpu_dep.cpu_subconf routine, which is no longer used after KA820 support
removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.5 2009/06/20 20:58:07 miod Exp $	*/
d80 1
a80 1
	printf("cpu: KA48\n");
@


1.5
log
@Remove unused global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.4 2008/08/18 23:05:39 miod Exp $	*/
a72 1
	NULL,
@


1.4
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.3 2008/08/15 22:41:48 miod Exp $	*/
a56 2

struct	vs_cpu *vxt_cpu;
@


1.3
log
@Move the vxt-specific clock functions frow clock.c to the cpu-specific support
file, fewer #ifdef this way.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.2 2008/08/15 22:38:23 miod Exp $	*/
d75 3
@


1.2
log
@Rename the cpu_dep hook ``steal_pages'' to ``init'', as it serves as an
early initialization routine (to enable caches, etc) while still running
physical, and does not allocate memory anymore.

(The irony in this is that forthcoming KA60 support actually steals pages
 in its init function...)
@
text
@d1 1
a1 1
/*	$OpenBSD: vxt.c,v 1.1 2006/08/27 16:55:41 miod Exp $	*/
a34 2
/*** needs to be completed MK-990306 ***/

d55 2
d137 13
@


1.1
log
@Work-in-progress VXT2000 support (commented out in GENERIC so far). Glass
console works on color model, serial console works, ethernet attaches but
does not work correctly yet.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
static	void	vxt_steal_pages(void);
d65 1
a65 1
	vxt_steal_pages,
d120 1
a120 1
vxt_steal_pages()
@

