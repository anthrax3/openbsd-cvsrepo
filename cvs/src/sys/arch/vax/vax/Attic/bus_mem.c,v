head	1.8;
access;
symbols
	OPENBSD_5_9:1.7.0.24
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.4.0.36
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.32
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.30
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.28
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.26
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.24
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.22
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.20
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.18
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.2
	UBC_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.7;
commitid	OSDG2O3Cgeifnf1W;

1.7
date	2009.12.26.14.45.36;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.25.20.52.57;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.18.48.55;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.19.20.50.57;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.18.21.37.35;	author bjc;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.04.27.01.10.10;	author bjc;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.21.38.42;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: bus_mem.c,v 1.7 2009/12/26 14:45:36 miod Exp $	*/
/*	$NetBSD: bus_mem.c,v 1.8 2000/06/29 07:14:23 mrg Exp $ */
/*
 * Copyright (c) 1998 Matt Thomas
 * All rights reserved.
 *
 * This code is derived from software contributed to Ludd by Bertram Barth.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed at Ludd, University of 
 *	Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/pmap.h>
#include <machine/bus.h>
#include <machine/intr.h>

int	 vax_mem_bus_space_map(void *, bus_addr_t, bus_size_t, int,
	    bus_space_handle_t *);
void	 vax_mem_bus_space_unmap(void *, bus_space_handle_t, bus_size_t);
int	 vax_mem_bus_space_subregion(void *, bus_space_handle_t, bus_size_t,
	    bus_size_t, bus_space_handle_t *);
int	 vax_mem_bus_space_alloc(void *, bus_addr_t, bus_addr_t, bus_size_t,
	    bus_size_t, bus_size_t, int, bus_addr_t *, bus_space_handle_t *);
void	 vax_mem_bus_space_free(void *, bus_space_handle_t, bus_size_t);
void	*vax_mem_bus_space_vaddr(void *, bus_space_handle_t);

int
vax_mem_bus_space_map(void *t, bus_addr_t pa, bus_size_t size, int flags,
    bus_space_handle_t *bshp)
{
	vaddr_t va;

	size += (pa & VAX_PGOFSET);	/* have to include the byte offset */
	va = uvm_km_valloc(kernel_map, size);
	if (va == 0)
		return (ENOMEM);

	*bshp = (bus_space_handle_t)(va + (pa & VAX_PGOFSET));

	ioaccess(va, pa, (size + VAX_NBPG - 1) >> VAX_PGSHIFT);

	return 0;   
} 

int
vax_mem_bus_space_subregion(void *t, bus_space_handle_t h, bus_size_t o,
    bus_size_t s, bus_space_handle_t *hp)
{
	*hp = h + o;
	return (0);             
}

void
vax_mem_bus_space_unmap(void *t, bus_space_handle_t h, bus_size_t size)
{
	u_long va = trunc_page(h);
	u_long endva = round_page(h + size);

        /* 
         * Free the kernel virtual mapping.
         */
	iounaccess(va, size >> VAX_PGSHIFT);
	uvm_km_free(kernel_map, va, endva - va);
}

int
vax_mem_bus_space_alloc(void *t, bus_addr_t rs, bus_addr_t re, bus_size_t s,
    bus_size_t a, bus_size_t b, int f, bus_addr_t *ap, bus_space_handle_t *hp)
{
	panic("vax_mem_bus_alloc not implemented");
}

void
vax_mem_bus_space_free(void *t, bus_space_handle_t h, bus_size_t s)
{    
	panic("vax_mem_bus_free not implemented");
}

void *
vax_mem_bus_space_vaddr(void *t, bus_space_handle_t h)
{
	return ((void *)h);
}
	
struct vax_bus_space vax_mem_bus_space = {
	NULL,
	vax_mem_bus_space_map,
	vax_mem_bus_space_unmap,
	vax_mem_bus_space_subregion,
	vax_mem_bus_space_alloc,
	vax_mem_bus_space_free,
	vax_mem_bus_space_vaddr
};
@


1.7
log
@Get rid of the (unused) ``no accounting'' bus_space_{map,unmap} routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.6 2009/12/25 20:52:57 miod Exp $	*/
@


1.6
log
@Implement bus_space_vaddr().
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.5 2009/07/26 18:48:55 miod Exp $	*/
d50 2
a51 2
	    bus_space_handle_t *, int);
void	 vax_mem_bus_space_unmap(void *, bus_space_handle_t, bus_size_t, int);
d61 1
a61 1
    bus_space_handle_t *bshp, int f2)
d86 1
a86 1
vax_mem_bus_space_unmap(void *t, bus_space_handle_t h, bus_size_t size, int f)
@


1.5
log
@Make sure all platforms understand the flags argument of bus_space_map() and
bus_space_alloc() as a bitmask of flags, and not a boolean controlling
cacheability; and make sure the three MI BUS_SPACE_MAP_xxx values documented
in the manual page are defined on all platforms as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.4 2001/11/06 19:53:17 miod Exp $	*/
d49 13
a61 8
static int
vax_mem_bus_space_map(
	void *t,
	bus_addr_t pa,
	bus_size_t size,
	int flags,
	bus_space_handle_t *bshp,
	int f2)
d77 3
a79 7
static int
vax_mem_bus_space_subregion(
	void *t,
	bus_space_handle_t h,
	bus_size_t o,
	bus_size_t s,
	bus_space_handle_t *hp)
d85 2
a86 6
static void
vax_mem_bus_space_unmap(
	void *t,
	bus_space_handle_t h,
	bus_size_t size,
	int f)
d98 3
a100 11
static int
vax_mem_bus_space_alloc(
	void *t,
	bus_addr_t rs,
	bus_addr_t re,
	bus_size_t s,
	bus_size_t a,
	bus_size_t b,
	int f,
	bus_addr_t *ap,
	bus_space_handle_t *hp)
d105 2
a106 5
static void
vax_mem_bus_space_free(
	void *t,
	bus_space_handle_t h,
	bus_size_t s)
d110 6
d123 2
a124 1
	vax_mem_bus_space_free
@


1.4
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.3 2001/09/19 20:50:57 mickey Exp $	*/
d54 1
a54 1
	int cacheable,
@


1.3
log
@merge vm/vm_kern.h into uvm/uvm_extern.h; art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.2 2000/10/18 21:37:35 bjc Exp $	*/
a41 1
#include <vm/vm.h>
@


1.2
log
@round off size passed to vax_mem_bus_space_map --
anything which mapped >1 page (like asc*) wouldn't work

from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
d43 1
a43 1
#include <vm/vm_kern.h>
@


1.2.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.2 2000/10/18 21:37:35 bjc Exp $	*/
@


1.2.6.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_mem.c,v 1.2.6.1 2001/05/14 21:38:42 niklas Exp $	*/
d43 1
a43 1
#include <uvm/uvm_extern.h>
@


1.2.6.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
@


1.1
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: bus_mem.c,v 1.5 1999/05/24 20:10:30 ragge Exp $ */
d61 1
d68 1
a68 1
	ioaccess(va, pa, size >> VAX_PGSHIFT);
@

