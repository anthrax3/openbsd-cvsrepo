head	1.13;
access;
symbols
	OPENBSD_5_9:1.12.0.16
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.18
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.10
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.14
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.12
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.22
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.12;
commitid	OSDG2O3Cgeifnf1W;

1.12
date	2011.09.15.00.48.24;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.06.20.42.05;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.18.23.05.38;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.27.58;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.27.01.10.12;	author bjc;	state Exp;
branches;
next	1.4;

1.4
date	97.09.12.09.30.55;	author maja;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	97.09.10.12.04.47;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	97.05.29.00.05.20;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.01.15.23.25.13;	author maja;	state Exp;
branches;
next	;

1.4.12.1
date	2001.05.14.21.38.59;	author niklas;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.4.12.3;

1.4.12.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.4.12.4;

1.4.12.4
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.4.12.5;

1.4.12.5
date	2003.06.07.11.14.48;	author ho;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: ka630.c,v 1.12 2011/09/15 00:48:24 miod Exp $	*/
/*	$NetBSD: ka630.c,v 1.17 1999/09/06 19:52:52 ragge Exp $	*/
/*-
 * Copyright (c) 1982, 1988, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ka630.c	7.8 (Berkeley) 5/9/91
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/time.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/pmap.h>
#include <machine/ka630.h>
#include <machine/clock.h>
#include <machine/vsbus.h>

static struct uvaxIIcpu *uvaxIIcpu_ptr;

static void ka630_conf(void);
static void ka630_memerr(void);
static int ka630_mchk(caddr_t);
static void ka630_halt(void);
static void ka630_reboot(int);
static void ka630_clrf(void);

struct	cpu_dep ka630_calls = {
	0,
	ka630_mchk,
	ka630_memerr,
	ka630_conf,
	chip_clkread,
	chip_clkwrite,
	1,      /* ~VUPS */
	2,	/* SCB pages */
	ka630_halt,
	ka630_reboot,
	ka630_clrf,
	icr_hardclock
};

/*
 * uvaxII_conf() is called by cpu_attach to do the cpu_specific setup.
 */
void
ka630_conf()
{
	clk_adrshift = 0;	/* Addressed at short's... */
	clk_tweak = 0;		/* ...and no shifting */
	clk_page = (short *)vax_map_physmem((paddr_t)KA630CLK, 1);

	uvaxIIcpu_ptr = (void *)vax_map_physmem(VS_REGS, 1);

	/*
	 * Enable memory parity error detection and clear error bits.
	 */
	uvaxIIcpu_ptr->uvaxII_mser = (UVAXIIMSER_PEN | UVAXIIMSER_MERR |
	    UVAXIIMSER_LEB);
}

/* log crd errors */
void
ka630_memerr()
{
	printf("memory err!\n");
}

#define NMC78032 10
char *mc78032[] = {
	0,		"immcr (fsd)",	"immcr (ssd)",	"fpu err 0",
	"fpu err 7",	"mmu st(tb)",	"mmu st(m=0)",	"pte in p0",
	"pte in p1",	"un intr id",
};

struct mc78032frame {
	int	mc63_bcnt;		/* byte count == 0xc */
	int	mc63_summary;		/* summary parameter */
	int	mc63_mrvaddr;		/* most recent vad */
	int	mc63_istate;		/* internal state */
	int	mc63_pc;		/* trapped pc */
	int	mc63_psl;		/* trapped psl */
};

int
ka630_mchk(cmcf)
	caddr_t cmcf;
{
	register struct mc78032frame *mcf = (struct mc78032frame *)cmcf;
	register u_int type = mcf->mc63_summary;

	printf("machine check %x", type);
	if (type < NMC78032 && mc78032[type])
		printf(": %s", mc78032[type]);
	printf("\n\tvap %x istate %x pc %x psl %x\n",
	    mcf->mc63_mrvaddr, mcf->mc63_istate,
	    mcf->mc63_pc, mcf->mc63_psl);
	if (uvaxIIcpu_ptr && uvaxIIcpu_ptr->uvaxII_mser & UVAXIIMSER_MERR) {
		printf("\tmser=0x%lx ", uvaxIIcpu_ptr->uvaxII_mser);
		if (uvaxIIcpu_ptr->uvaxII_mser & UVAXIIMSER_CPUE)
			printf("page=%ld", uvaxIIcpu_ptr->uvaxII_cear);
		if (uvaxIIcpu_ptr->uvaxII_mser & UVAXIIMSER_DQPE)
			printf("page=%ld", uvaxIIcpu_ptr->uvaxII_dear);
		printf("\n");
	}
	return (-1);
}

static void
ka630_halt()
{
	((struct ka630clock *)clk_page)->cpmbx = KA630CLK_DOTHIS|KA630CLK_HALT;
	asm("halt");
}

static void
ka630_reboot(arg)
	int arg;
{
	((struct ka630clock *)clk_page)->cpmbx =
	    KA630CLK_DOTHIS | KA630CLK_REBOOT;
}

/*
 * Clear restart and boot in progress flags in the CPMBX.
 */
static void
ka630_clrf()
{
	short i = ((struct ka630clock *)clk_page)->cpmbx;

	((struct ka630clock *)clk_page)->cpmbx = i & KA630CLK_LANG;
}
@


1.12
log
@Switch vax to timecounters. There are three different clock sources:
- ICR/NICR on most systems (1MHz counter resolution).
- diagnostic timer on KA46/KA48 (1kHz counter resolution, counter is actually
  running at around 1024 kHz but is not guaranteed to be monotonic at this
  rate).
- 100Hz clock on VXT (nothing but the 100Hz clock interrupt).

Tested on KA49 (ICR style), KA46, KA48 (diagtmr style), VXT2000+ (VXT
{empty,hopeless}ness'r'us style).
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.11 2011/07/06 20:42:05 miod Exp $	*/
@


1.11
log
@Drop cpu_dep.cpu_subconf routine, which is no longer used after KA820 support
removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.10 2008/08/18 23:05:38 miod Exp $	*/
d70 1
a70 1
	hardclock
@


1.10
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.9 2003/06/02 23:27:58 millert Exp $	*/
a69 1
	NULL,
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.8 2002/03/14 01:26:48 millert Exp $	*/
d70 2
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.7 2001/11/06 19:53:17 miod Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.6 2001/09/11 20:05:25 miod Exp $	*/
d55 6
a60 6
static void ka630_conf __P((void));
static void ka630_memerr __P((void));
static int ka630_mchk __P((caddr_t));
static void ka630_halt __P((void));
static void ka630_reboot __P((int));
static void ka630_clrf __P((void));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.7 2001/11/06 19:53:17 miod Exp $	*/
d55 6
a60 6
static void ka630_conf(void);
static void ka630_memerr(void);
static int ka630_mchk(caddr_t);
static void ka630_halt(void);
static void ka630_reboot(int);
static void ka630_clrf(void);
@


1.6
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.5 2000/04/27 01:10:12 bjc Exp $	*/
d45 1
a45 1
#include <vm/vm.h>
@


1.5
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.4 1997/09/12 09:30:55 maja Exp $	*/
a45 1
#include <vm/vm_kern.h>
@


1.4
log
@Sync with NetBSD 970827. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: ka630.c,v 1.3 1997/09/10 12:04:47 maja Exp $	*/
/*	$NetBSD: ka630.c,v 1.7 1997/07/26 10:12:46 ragge Exp $	*/
d43 1
a47 1
#include <machine/pte.h>
a48 2
#include <machine/mtpr.h>
#include <machine/sid.h>
a49 2
#include <machine/nexus.h>
#include <machine/uvax.h>
d52 1
a52 1
#include <vax/vax/gencons.h>
d56 1
a56 1
static void ka630_conf __P((struct device *, struct device *, void *));
a58 1
static void ka630_steal_pages __P((void));
d61 1
a61 2

extern	short *clk_page;
d64 1
a64 2
	ka630_steal_pages,
	no_nicr_clock,
d71 1
a71 4
	0,      /* Used by vaxstation */
	0,      /* Used by vaxstation */
	0,      /* Used by vaxstation */
	0,
d74 1
d81 1
a81 3
ka630_conf(parent, self, aux)
	struct	device *parent, *self;
	void	*aux;
d83 3
a85 1
	extern char cpu_model[];
d87 7
a93 2
	strcpy(cpu_model,"MicroVAX II");
	printf(": %s\n", cpu_model);
d119 1
d133 1
a133 1
		printf("\tmser=0x%x ", uvaxIIcpu_ptr->uvaxII_mser);
d135 1
a135 1
			printf("page=%d", uvaxIIcpu_ptr->uvaxII_cear);
d137 1
a137 1
			printf("page=%d", uvaxIIcpu_ptr->uvaxII_dear);
a142 41
void
ka630_steal_pages()
{
	extern	vm_offset_t avail_start, virtual_avail, avail_end;
	extern	int clk_adrshift, clk_tweak;
	int	junk;

	/*
	 * MicroVAX II: get 10 pages from top of memory,
	 * map in Qbus map registers, cpu and clock registers.
	 */
	avail_end -= 10;

	MAPPHYS(junk, 2, VM_PROT_READ|VM_PROT_WRITE);
	MAPVIRT(nexus, btoc(0x400000));
	pmap_map((vm_offset_t)nexus, 0x20088000, 0x20090000,
	    VM_PROT_READ|VM_PROT_WRITE);

	MAPVIRT(uvaxIIcpu_ptr, 1);
	pmap_map((vm_offset_t)uvaxIIcpu_ptr, (vm_offset_t)UVAXIICPU,
	    (vm_offset_t)UVAXIICPU + NBPG, VM_PROT_READ|VM_PROT_WRITE);

	clk_adrshift = 0;	/* Addressed at short's... */
	clk_tweak = 0;		/* ...and no shifting */
	MAPVIRT(clk_page, 1);
	pmap_map((vm_offset_t)clk_page, (vm_offset_t)KA630CLK,
	    (vm_offset_t)KA630CLK + NBPG, VM_PROT_READ|VM_PROT_WRITE);

	/*
	 * Clear restart and boot in progress flags in the CPMBX.
	 * Note: We are not running virtual yet.
	 */
	KA630CLK->cpmbx = (KA630CLK->cpmbx & KA630CLK_LANG);

	/*
	 * Enable memory parity error detection and clear error bits.
	 */
	UVAXIICPU->uvaxII_mser = (UVAXIIMSER_PEN | UVAXIIMSER_MERR |
	    UVAXIIMSER_LEB);
}

d156 11
a166 2
	mtpr(GC_BOOT, PR_TXDB);
	asm("movl %0,r5;halt"::"g"(arg));
@


1.4.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: ka630.c,v 1.5 2000/04/27 01:10:12 bjc Exp $	*/
/*	$NetBSD: ka630.c,v 1.17 1999/09/06 19:52:52 ragge Exp $	*/
a42 1
#include <sys/systm.h>
d47 1
d49 2
d52 2
d56 1
a56 1
#include <machine/vsbus.h>
d60 1
a60 1
static void ka630_conf __P((void));
d63 1
d66 2
a67 1
static void ka630_clrf __P((void));
d70 2
a71 1
	0,
d78 4
a81 1
	2,	/* SCB pages */
a83 1
	ka630_clrf,
d90 3
a92 1
ka630_conf()
d94 1
a94 3
	clk_adrshift = 0;	/* Addressed at short's... */
	clk_tweak = 0;		/* ...and no shifting */
	clk_page = (short *)vax_map_physmem((paddr_t)KA630CLK, 1);
d96 2
a97 7
	uvaxIIcpu_ptr = (void *)vax_map_physmem(VS_REGS, 1);

	/*
	 * Enable memory parity error detection and clear error bits.
	 */
	uvaxIIcpu_ptr->uvaxII_mser = (UVAXIIMSER_PEN | UVAXIIMSER_MERR |
	    UVAXIIMSER_LEB);
a122 1
int
d136 1
a136 1
		printf("\tmser=0x%lx ", uvaxIIcpu_ptr->uvaxII_mser);
d138 1
a138 1
			printf("page=%ld", uvaxIIcpu_ptr->uvaxII_cear);
d140 1
a140 1
			printf("page=%ld", uvaxIIcpu_ptr->uvaxII_dear);
d146 41
d200 2
a201 11
}

/*
 * Clear restart and boot in progress flags in the CPMBX.
 */
static void
ka630_clrf()
{
	short i = ((struct ka630clock *)clk_page)->cpmbx;

	((struct ka630clock *)clk_page)->cpmbx = i & KA630CLK_LANG;
@


1.4.12.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.4.12.1 2001/05/14 21:38:59 niklas Exp $	*/
d46 1
@


1.4.12.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include <uvm/uvm_extern.h>
@


1.4.12.4
log
@Merge in -current from about a week ago
@
text
@d55 6
a60 6
static void ka630_conf(void);
static void ka630_memerr(void);
static int ka630_mchk(caddr_t);
static void ka630_halt(void);
static void ka630_reboot(int);
static void ka630_clrf(void);
@


1.4.12.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka630.c,v 1.4.12.4 2002/03/28 11:26:46 niklas Exp $	*/
d15 5
a19 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3
log
@Sync with NetBSD 970516. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: ka630.c,v 1.2 1997/05/29 00:05:20 niklas Exp $	*/
/*	$NetBSD: ka630.c,v 1.6 1997/04/18 18:49:36 ragge Exp $	*/
d56 1
d64 4
d81 3
a83 1

a149 1
	extern	short *clk_page;
d185 17
@


1.2
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: ka630.c,v 1.4 1996/10/13 03:35:44 christos Exp $	*/
/*	$NetBSD: ka630.c,v 1.4 1996/10/13 03:35:44 christos Exp $	*/
d5 1
a5 1
 * 	The Regents of the University of California.  All rights reserved.
d35 1
a35 1
 *      @@(#)ka630.c     7.8 (Berkeley) 5/9/91
d48 1
d57 1
a57 3
struct uvaxIIcpu *uvaxIIcpu_ptr;

struct	ka630clock *ka630_clkptr = KA630CLK;
d64 12
d77 1
a77 22
int
ka630_setup(uc,flags)
        struct uvax_calls *uc;
        int flags;
{
        uc->uc_name = "ka630";

        uc->uc_phys2virt = NULL;
        uc->uc_physmap = NULL;     /* ptv_map ? p2v_map */

        uc->uc_steal_pages = ka630_steal_pages;
        uc->uc_conf = ka630_conf;
        uc->uc_clkread = ka630_clkread;
        uc->uc_clkwrite = ka630_clkwrite;
        
#ifdef notyet
        uc->uc_memerr = ka630_memerr;
        uc->uc_mchk = ka630_mchk;
#endif  
        
        uc->uc_busTypes = VAX_UNIBUS;
} 
d94 2
a95 1
uvaxII_memerr()
d116 1
a116 1
uvaxII_mchk(cmcf)
d142 3
a144 1
	extern  vm_offset_t avail_start, virtual_avail, avail_end;
d162 4
a165 2
	MAPVIRT(ka630_clkptr, 1);
	pmap_map((vm_offset_t)ka630_clkptr, (vm_offset_t)KA630CLK,
d169 4
a172 4
	 * Clear restart and boot in progress flags
	 * in the CPMBX.
	 /
	ka630clk_ptr->cpmbx = (ka630clk_ptr->cpmbx & KA630CLK_LANG);
d177 1
a177 1
	uvaxIIcpu_ptr->uvaxII_mser = (UVAXIIMSER_PEN | UVAXIIMSER_MERR |
a178 1

a179 9
#define uVAX_gettodr    ka630_gettodr
#define uVAX_settodr    ka630_settodr
#define	uVAX_clkptr	ka630_clkptr
#define	uVAX_genclock	ka630_genclock
#define	uVAX_clock	ka630clock
#define	uVAX_clkread	ka630_clkread
#define	uVAX_clkwrite	ka630_clkwrite

#include <arch/vax/vax/uvax_proto.c>
@


1.1
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@
