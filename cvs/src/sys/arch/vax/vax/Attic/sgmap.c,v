head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.28
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.30
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.22
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.26
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.24
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.20
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SMP:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.10;
commitid	OSDG2O3Cgeifnf1W;

1.10
date	2008.09.30.20.00.29;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.10.21.05.06;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.12.01.09.44;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.07.05.10.00.41;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.08.08.09.33;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.06.04.27.45;	author hugh;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2000.10.09.23.11.57;	author bjc;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.01.10.11;	author bjc;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.21.39.10;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.07.04.10.24.45;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2004.02.19.10.50.03;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: sgmap.c,v 1.10 2008/09/30 20:00:29 miod Exp $	*/
/* $NetBSD: sgmap.c,v 1.8 2000/06/29 07:14:34 mrg Exp $ */

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/malloc.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <machine/sgmap.h>

void
vax_sgmap_init(t, sgmap, name, sgvabase, sgvasize, ptva, minptalign)
	bus_dma_tag_t t;
	struct vax_sgmap *sgmap;
	const char *name;
	bus_addr_t sgvabase;
	bus_size_t sgvasize;
	pt_entry_t *ptva;
	bus_size_t minptalign;
{
	bus_dma_segment_t seg;
	size_t ptsize;
	int rseg;

	if (sgvasize & PGOFSET) {
		printf("size botch for sgmap `%s'\n", name);
		goto die;
	}

	sgmap->aps_sgvabase = sgvabase;
	sgmap->aps_sgvasize = sgvasize;

	if (ptva != NULL) {
		/*
		 * We already have a page table; this may be a system
		 * where the page table resides in bridge-resident SRAM.
		 */
		sgmap->aps_pt = ptva;
	} else {
		/*
		 * Compute the page table size and allocate it.  At minimum,
		 * this must be aligned to the page table size.  However,
		 * some platforms have more strict alignment reqirements.
		 */
		ptsize = (sgvasize / VAX_NBPG) * sizeof(pt_entry_t);
		if (minptalign != 0) {
			if (minptalign < ptsize)
				minptalign = ptsize;
		} else
			minptalign = ptsize;
		if (bus_dmamem_alloc(t, ptsize, minptalign, 0, &seg, 1, &rseg,
		    BUS_DMA_NOWAIT)) {
			panic("unable to allocate page table for sgmap `%s'",
			    name);
			goto die;
		}
		sgmap->aps_pt = (pt_entry_t *)(seg.ds_addr | KERNBASE);
	}

	/*
	 * Create the extent map used to manage the virtual address
	 * space.
	 */
	sgmap->aps_ex = extent_create((char *)name, sgvabase, sgvasize - 1,
	    M_DEVBUF, NULL, 0, EX_NOWAIT|EX_NOCOALESCE);
	if (sgmap->aps_ex == NULL) {
		printf("unable to create extent map for sgmap `%s'\n", name);
		goto die;
	}

	return;
 die:
	panic("vax_sgmap_init");
}

int
vax_sgmap_alloc(map, origlen, sgmap, flags)
	bus_dmamap_t map;
	bus_size_t origlen;
	struct vax_sgmap *sgmap;
	int flags;
{
	int error;
	bus_size_t len = origlen;

#ifdef DIAGNOSTIC
	if (map->_dm_flags & DMAMAP_HAS_SGMAP)
		panic("vax_sgmap_alloc: already have sgva space");
#endif

	/* If we need a spill page (for the VS4000 SCSI), make sure we 
	 * allocate enough space for an extra page.
	 */
	if (flags & VAX_BUS_DMA_SPILLPAGE) {
		len += VAX_NBPG;
	}

	map->_dm_sgvalen = vax_round_page(len);
#if 0
	printf("len %x -> %x, _dm_sgvalen %x _dm_boundary %x boundary %x -> ",
	    origlen, len, map->_dm_sgvalen, map->_dm_boundary, boundary);
#endif

	error = extent_alloc(sgmap->aps_ex, map->_dm_sgvalen, VAX_NBPG, 0,
	    0, (flags & BUS_DMA_NOWAIT) ? EX_NOWAIT : EX_WAITOK,
	    &map->_dm_sgva);
#if 0
	printf("error %d _dm_sgva %x\n", error, map->_dm_sgva);
#endif

	if (error == 0)
		map->_dm_flags |= DMAMAP_HAS_SGMAP;
	else
		map->_dm_flags &= ~DMAMAP_HAS_SGMAP;
	
	return (error);
}

void
vax_sgmap_free(map, sgmap)
	bus_dmamap_t map;
	struct vax_sgmap *sgmap;
{

#ifdef DIAGNOSTIC
	if ((map->_dm_flags & DMAMAP_HAS_SGMAP) == 0)
		panic("vax_sgmap_free: no sgva space to free");
#endif

	if (extent_free(sgmap->aps_ex, map->_dm_sgva, map->_dm_sgvalen,
	    EX_NOWAIT))
		panic("vax_sgmap_free");

	map->_dm_flags &= ~DMAMAP_HAS_SGMAP;
}

int
vax_sgmap_load(t, map, buf, buflen, p, flags, sgmap)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	void *buf;
	bus_size_t buflen;
	struct proc *p;
	int flags;
	struct vax_sgmap *sgmap;
{
	vaddr_t endva, va = (vaddr_t)buf;
	paddr_t pa;
	bus_addr_t dmaoffset;
	bus_size_t dmalen;
	long *pte, *page_table = (long *)sgmap->aps_pt;
	int pteidx, error;
	struct pmap *pmap;

	if (p != NULL)
		pmap = p->p_vmspace->vm_map.pmap;
	else
		pmap = pmap_kernel();

	/*
	 * Make sure that on error condition we return "no valid mappings".
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;

	if (buflen > map->_dm_size)
		return (EINVAL);

	/*
	 * Remember the offset into the first page and the total
	 * transfer length.
	 */
	dmaoffset = ((u_long)buf) & VAX_PGOFSET;
	dmalen = buflen;


	/*
	 * Allocate the necessary virtual address space for the
	 * mapping.  Round the size, since we deal with whole pages.
	 */
	endva = vax_round_page(va + buflen);
	va = vax_trunc_page(va);
	if ((map->_dm_flags & DMAMAP_HAS_SGMAP) == 0) {
		error = vax_sgmap_alloc(map, (endva - va), sgmap, flags);
		if (error)
			return (error);
	}

	pteidx = map->_dm_sgva >> VAX_PGSHIFT;
	pte = &page_table[pteidx];

	/*
	 * Generate the DMA address.
	 */
	map->dm_segs[0].ds_addr = map->_dm_sgva + dmaoffset;
	map->dm_segs[0].ds_len = dmalen;

	map->_dm_pteidx = pteidx;
	map->_dm_ptecnt = 0;

	/*
	 * Create the bus-specific page tables.
	 * Can be done much more efficient than this.
	 */
	for (; va < endva; va += VAX_NBPG, pte++, map->_dm_ptecnt++) {
		/*
		 * Get the physical address for this segment.
		 */
		(void)pmap_extract(pmap, va, &pa);

		/*
		 * Load the current PTE with this page.
		 */
		*pte = (pa >> VAX_PGSHIFT) | PG_V;
	}
	/* The VS4000 SCSI prefetcher doesn't like to end on a page boundary
	 * so add an extra page to quiet it down.
	 */
	if (flags & VAX_BUS_DMA_SPILLPAGE) {
		*pte = pte[-1];
		map->_dm_ptecnt++;
	}

	map->dm_mapsize = buflen;
	map->dm_nsegs = 1;
	return (0);
}

int
vax_sgmap_load_mbuf(t, map, m, flags, sgmap)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct mbuf *m;
	int flags;
	struct vax_sgmap *sgmap;
{

	panic("vax_sgmap_load_mbuf : not implemented");
}

int
vax_sgmap_load_uio(t, map, uio, flags, sgmap)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct uio *uio;
	int flags;
	struct vax_sgmap *sgmap;
{

	panic("vax_sgmap_load_uio : not implemented");
}

int
vax_sgmap_load_raw(t, map, segs, nsegs, size, flags, sgmap)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	bus_dma_segment_t *segs;
	int nsegs;
	bus_size_t size;
	int flags;
	struct vax_sgmap *sgmap;
{

	panic("vax_sgmap_load_raw : not implemented");
}

void
vax_sgmap_unload(t, map, sgmap)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct vax_sgmap *sgmap;
{
	long *pte, *page_table = (long *)sgmap->aps_pt;
	int ptecnt;

	/*
	 * Invalidate the PTEs for the mapping.
	 */
	for (ptecnt = map->_dm_ptecnt, pte = &page_table[map->_dm_pteidx];
		ptecnt-- != 0; ) {
		*pte++ = 0;
	}

	/*
	 * Free the virtual address space used by the mapping
	 * if necessary.
	 */
	if ((map->_dm_flags & BUS_DMA_ALLOCNOW) == 0)
		vax_sgmap_free(map, sgmap);
	/*
	 * Mark the mapping invalid.
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;
}
@


1.10
log
@Fix various pmap_extract() buglets:
- for kernel space addresses, check the page number fits in Sysmap before
  accessing the array.
- for user space addresses, return the right (in-page) address bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.9 2008/06/26 05:42:14 ray Exp $	*/
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.8 2003/11/10 21:05:06 miod Exp $	*/
d187 6
a231 1

d243 1
a243 4
		if (p != NULL)
			pmap_extract(p->p_vmspace->vm_map.pmap, va, &pa);
		else
			pa = kvtophys(va);
@


1.8
log
@Get rid of the "struct pte" bitfield, and use straight integers.

Makes the code slightly more readble, removes casts, and makes some
specific constants defined for the bitfields disappear in pmap.c...

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.7 2002/10/12 01:09:44 krw Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@Remove more '\n's from panic() statements. Both trailing and leading.

Diff generated by Chris Kuethe.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
d59 1
a59 1
	struct pte *ptva;
d86 1
a86 1
		ptsize = (sgvasize / VAX_NBPG) * sizeof(struct pte);
d98 1
a98 1
		sgmap->aps_pt = (struct pte *)(seg.ds_addr | KERNBASE);
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.5 2001/07/05 10:00:41 art Exp $	*/
d94 1
a94 1
			panic("unable to allocate page table for sgmap `%s'\n",
@


1.6.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
d94 1
a94 1
			panic("unable to allocate page table for sgmap `%s'",
@


1.5
log
@Get rid of the wrapper macros around extent_alloc*1
Pass the right amount of arguments and rename them back to their right names.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.4 2001/06/08 08:09:33 art Exp $	*/
d47 1
a47 1
#include <vm/vm.h>
@


1.4
log
@Change the paddr_t pmap_extract(struct pmap *, vaddr_t) interface to
boolean_t pmap_extract(struct pmap *, vaddr_t, paddr_t *).
Matches NetBSD. Tested by various people on various platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.3 2001/02/06 04:27:45 hugh Exp $	*/
d145 1
a145 1
	error = extent_alloc(sgmap->aps_ex, map->_dm_sgvalen, VAX_NBPG,
@


1.3
log
@Pick up work by matt@@netbsd.org to get scsi working on vaxstation 4000/90.
Is it working? I don't know.. Anyone have a machine to spare?
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.2 2000/10/09 23:11:57 bjc Exp $	*/
d246 1
a246 1
			pa = pmap_extract(p->p_vmspace->vm_map.pmap, va);
@


1.3.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.3 2001/02/06 04:27:45 hugh Exp $	*/
@


1.3.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.3.4.1 2001/05/14 21:39:10 niklas Exp $	*/
d246 1
a246 1
			pmap_extract(p->p_vmspace->vm_map.pmap, va, &pa);
@


1.3.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.3.4.2 2001/07/04 10:24:45 niklas Exp $	*/
d145 1
a145 1
	error = extent_alloc(sgmap->aps_ex, map->_dm_sgvalen, VAX_NBPG, 0,
@


1.3.4.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
#include <uvm/uvm_extern.h>
@


1.3.4.5
log
@Sync the SMP branch with 3.3
@
text
@d94 1
a94 1
			panic("unable to allocate page table for sgmap `%s'",
@


1.3.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d59 1
a59 1
	pt_entry_t *ptva;
d86 1
a86 1
		ptsize = (sgvasize / VAX_NBPG) * sizeof(pt_entry_t);
d98 1
a98 1
		sgmap->aps_pt = (pt_entry_t *)(seg.ds_addr | KERNBASE);
@


1.2
log
@code to get asc* (ncr 53c9x) working; most of this from netbsd
also, write the correct stuff in cpu_coredump (vm_machdep.c)
@
text
@d1 1
a1 1
/*	$OpenBSD: sgmap.c,v 1.1 2000/04/27 01:10:11 bjc Exp $	*/
d253 1
a253 15
		if (sgmap->aps_flags & SGMAP_KA49) {
			unsigned long tmp = pa >> VAX_PGSHIFT;
			int cnt;

			for (cnt = 0; tmp != 0; tmp >>= 1) {
				cnt += (tmp & 1);
			}
			*pte = pa | PG_V | ((cnt & 1) ? 0 : 0x10000000);
#if 0
			printf("[%d]: va=0x%08lx map=0x%08lx\n", 
			    pteidx + map->_dm_ptecnt, va + dmaoffset, *pte);
#endif
		} else {
			*pte = (pa >> VAX_PGSHIFT) | PG_V;
		}
@


1.1
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $NetBSD: sgmap.c,v 1.3 1999/07/08 18:11:02 thorpej Exp $ */
d132 7
a139 1

a214 4
	 *
	 * alpha_sgmap_alloc will deal with the appropriate spill page
	 * allocations.
	 *
d241 1
a241 2
	for (; va < endva; va += VAX_NBPG, pteidx++,
		pte = &page_table[pteidx], map->_dm_ptecnt++) {
d253 22
a274 1
		*pte = (pa >> VAX_PGSHIFT) | PG_V;
d327 1
a327 1
	int ptecnt, pteidx;
d332 3
a334 6
	for (ptecnt = map->_dm_ptecnt, pteidx = map->_dm_pteidx,
		pte = &page_table[pteidx];
		ptecnt != 0;
		ptecnt--, pteidx++,
		pte = &page_table[pteidx]) {
		*pte = 0;
@

