head	1.10;
access;
symbols
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.16
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.18
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.14
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.12
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.10
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.20.23.27.26;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.27.58;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.10.21.56.11;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.27.01.10.11;	author bjc;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	97.05.29.00.05.13;	author niklas;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	97.01.15.23.25.06;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.09.10.06;	author mickey;	state Exp;
branches;
next	;

1.3.12.1
date	2001.05.14.21.38.45;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	1.3.12.4;

1.3.12.4
date	2003.06.07.11.14.48;	author ho;	state Exp;
branches;
next	;

1.4.10.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.4.10.2;

1.4.10.2
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: crl.c,v 1.9 2010/06/26 23:24:44 guenther Exp $	*/
/*	$NetBSD: crl.c,v 1.6 2000/01/24 02:40:33 matt Exp $	*/
/*-
 * Copyright (c) 1982, 1986 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)crl.c	7.5 (Berkeley) 5/9/91
 */

/*
 * TO DO (tef  7/18/85):
 *	1) change printf's to log() instead???
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/proc.h>
#include <sys/buf.h>

#include <machine/cpu.h>
#include <machine/mtpr.h>
#include <machine/sid.h>
#include <machine/scb.h>

#include <vax/vax/crl.h>

struct {
	short	crl_state;		/* open and busy flags */
	short	crl_active;		/* driver state flag */
	struct	buf *crl_buf;		/* buffer we're using */
	ushort *crl_xaddr;		/* transfer address */
	short	crl_errcnt;
} crltab;

struct {
	int	crl_cs;		/* saved controller status */
	int	crl_ds;		/* saved drive status */
} crlstat;

void	crlintr(void *);
void	crlattach(void);
static	void crlstart(void);

int	crlopen(dev_t, int, struct proc *);
int	crlclose(dev_t, int, struct proc *);
int	crlrw(dev_t, struct uio *, int);


struct	ivec_dsp crl_intr;

void
crlattach()
{
	crl_intr = idsptch;
	crl_intr.hoppaddr = crlintr;
	scb->scb_csrint = &crl_intr;
}	

/*ARGSUSED*/
int
crlopen(dev, flag, p)
	dev_t dev;
	int flag;
	struct proc *p;
{
	if (vax_cputype != VAX_8600)
		return (ENXIO);
	if (crltab.crl_state != CRL_IDLE)
		return (EALREADY);
	crltab.crl_state = CRL_OPEN;
	crltab.crl_buf = geteblk(512);
	return (0);
}

/*ARGSUSED*/
int
crlclose(dev, flag, p)
	dev_t dev;
	int flag;
	struct proc *p;
{

	brelse(crltab.crl_buf);
	crltab.crl_state = CRL_IDLE;
	return 0;
}

/*ARGSUSED*/
int
crlrw(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	register struct buf *bp;
	register int i;
	register int s;
	int error;

	if (uio->uio_resid == 0) 
		return (0);
	s = spl4();
	while (crltab.crl_state & CRL_BUSY)
		tsleep((caddr_t)&crltab, PRIBIO, "crlrw", 0);
	crltab.crl_state |= CRL_BUSY;
	splx(s);

	bp = crltab.crl_buf;
	error = 0;
	while ((i = imin(CRLBYSEC, uio->uio_resid)) > 0) {
		bp->b_blkno = uio->uio_offset>>9;
		if (bp->b_blkno >= MAXSEC || (uio->uio_offset & 0x1FF) != 0) {
			error = EIO;
			break;
		}
		if (uio->uio_rw == UIO_WRITE) {
			error = uiomove(bp->b_data, i, uio);
			if (error)
				break;
		}
		bp->b_flags = uio->uio_rw == UIO_WRITE ? B_WRITE : B_READ;
		s = spl4(); 
		crlstart();
		while ((bp->b_flags & B_DONE) == 0)
			tsleep((caddr_t)bp, PRIBIO, "crlrw", 0);	
		splx(s);
		if (bp->b_flags & B_ERROR) {
			error = EIO;
			break;
		}
		if (uio->uio_rw == UIO_READ) {
			error = uiomove(bp->b_data, i, uio);
			if (error)
				break;
		}
	}
	crltab.crl_state &= ~CRL_BUSY;
	wakeup((caddr_t)&crltab);
	return (error);
}

void
crlstart()
{
	register struct buf *bp;

	bp = crltab.crl_buf;
	crltab.crl_errcnt = 0;
	crltab.crl_xaddr = (ushort *) bp->b_data;
	bp->b_resid = 0;

	if ((mfpr(PR_STXCS) & STXCS_RDY) == 0)
		/* not ready to receive order */
		return;
	if ((bp->b_flags&(B_READ|B_WRITE)) == B_READ) {
		crltab.crl_active = CRL_F_READ;
		mtpr(bp->b_blkno<<8 | STXCS_IE | CRL_F_READ, PR_STXCS);
	} else {
		crltab.crl_active = CRL_F_WRITE;
		mtpr(bp->b_blkno<<8 | STXCS_IE | CRL_F_WRITE, PR_STXCS);
	}
#ifdef lint
	crlintr(NULL);
#endif
}

void
crlintr(arg)
	void *arg;
{
	register struct buf *bp;
	int i;

	bp = crltab.crl_buf;
	i = mfpr(PR_STXCS);
	switch ((i>>24) & 0xFF) {

	case CRL_S_XCMPLT:
		switch (crltab.crl_active) {

		case CRL_F_RETSTS:
			crlstat.crl_ds = mfpr(PR_STXDB);
			printf("crlcs=0x%b, crlds=0x%b\n", crlstat.crl_cs,
				CRLCS_BITS, crlstat.crl_ds, CRLDS_BITS); 
			break;

		case CRL_F_READ:
		case CRL_F_WRITE:
			bp->b_flags |= B_DONE;
		}
		crltab.crl_active = 0;
		wakeup((caddr_t)bp);
		break;

	case CRL_S_XCONT:
		switch (crltab.crl_active) {

		case CRL_F_WRITE:
			mtpr(*crltab.crl_xaddr++, PR_STXDB);
			mtpr(bp->b_blkno<<8 | STXCS_IE | CRL_F_WRITE, PR_STXCS);
			break;

		case CRL_F_READ:
			*crltab.crl_xaddr++ = mfpr(PR_STXDB);
			mtpr(bp->b_blkno<<8 | STXCS_IE | CRL_F_READ, PR_STXCS);
		}
		break;

	case CRL_S_ABORT:
		crltab.crl_active = CRL_F_RETSTS;
		mtpr(STXCS_IE | CRL_F_RETSTS, PR_STXCS);
		bp->b_flags |= B_DONE|B_ERROR;
		break;

	case CRL_S_RETSTS:
		crlstat.crl_cs = mfpr(PR_STXDB);
		mtpr(STXCS_IE | CRL_S_RETSTS, PR_STXCS);
		break;

	case CRL_S_HNDSHK:
		printf("crl: hndshk error\n");	/* dump out some status too? */
		crltab.crl_active = 0;
		bp->b_flags |= B_DONE|B_ERROR;
		wakeup((caddr_t)bp);
		break;

	case CRL_S_HWERR:
		printf("crl: hard error sn%d\n", bp->b_blkno);
		crltab.crl_active = CRL_F_ABORT;
		mtpr(STXCS_IE | CRL_F_ABORT, PR_STXCS);
		break;
	}
}
@


1.9
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.8 2006/01/20 23:27:26 miod Exp $	*/
@


1.8
log
@b_un.b_addr -> b_data; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.7 2003/06/02 23:27:58 millert Exp $	*/
a42 1
#include <sys/user.h>
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.6 2002/06/10 21:56:11 miod Exp $	*/
d143 1
a143 1
			error = uiomove(bp->b_un.b_addr, i, uio);
d158 1
a158 1
			error = uiomove(bp->b_un.b_addr, i, uio);
d175 1
a175 1
	crltab.crl_xaddr = (ushort *) bp->b_un.b_addr;
@


1.6
log
@sleep() -> tsleep()
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.5 2002/03/14 01:26:48 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.4 2000/04/27 01:10:11 bjc Exp $	*/
d134 1
a134 1
		sleep((caddr_t)&crltab, PRIBIO);
d155 1
a155 1
			sleep((caddr_t)bp, PRIBIO);	
@


1.4
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.3 1997/05/29 00:05:13 niklas Exp $	*/
d70 7
a76 7
void	crlintr __P((void *));
void	crlattach __P((void));
static	void crlstart __P((void));

int	crlopen __P((dev_t, int, struct proc *));
int	crlclose __P((dev_t, int, struct proc *));
int	crlrw __P((dev_t, struct uio *, int));
@


1.4.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.4 2000/04/27 01:10:11 bjc Exp $	*/
d70 7
a76 7
void	crlintr(void *);
void	crlattach(void);
static	void crlstart(void);

int	crlopen(dev_t, int, struct proc *);
int	crlclose(dev_t, int, struct proc *);
int	crlrw(dev_t, struct uio *, int);
@


1.4.10.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.4.10.1 2002/06/11 03:39:19 art Exp $	*/
d134 1
a134 1
		tsleep((caddr_t)&crltab, PRIBIO, "crlrw", 0);
d155 1
a155 1
			tsleep((caddr_t)bp, PRIBIO, "crlrw", 0);	
@


1.3
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: crl.c,v 1.5 1996/10/13 03:35:35 christos Exp $	*/
/*	$NetBSD: crl.c,v 1.5 1996/10/13 03:35:35 christos Exp $	*/
d70 1
a70 1
void	crlintr __P((int));
d84 2
a85 3
	extern	struct ivec_dsp idsptch;

	bcopy(&idsptch, &crl_intr, sizeof(struct ivec_dsp));
a86 1
	crl_intr.hoppaddr = crlintr;
d193 1
a193 1
	crlintr();
d199 1
a199 1
	int arg;
@


1.3.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: crl.c,v 1.4 2000/04/27 01:10:11 bjc Exp $	*/
/*	$NetBSD: crl.c,v 1.6 2000/01/24 02:40:33 matt Exp $	*/
d70 1
a70 1
void	crlintr __P((void *));
d84 4
a87 1
	crl_intr = idsptch;
a88 1
	scb->scb_csrint = &crl_intr;
d195 1
a195 1
	crlintr(NULL);
d201 1
a201 1
	void *arg;
@


1.3.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 7
a76 7
void	crlintr(void *);
void	crlattach(void);
static	void crlstart(void);

int	crlopen(dev_t, int, struct proc *);
int	crlclose(dev_t, int, struct proc *);
int	crlrw(dev_t, struct uio *, int);
@


1.3.12.3
log
@Sync the SMP branch with 3.3
@
text
@d134 1
a134 1
		tsleep((caddr_t)&crltab, PRIBIO, "crlrw", 0);
d155 1
a155 1
			tsleep((caddr_t)bp, PRIBIO, "crlrw", 0);	
@


1.3.12.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: crl.c,v 1.3.12.3 2003/03/27 23:52:20 niklas Exp $	*/
d15 5
a19 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.1
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: crl.c,v 1.2 1996/04/08 18:32:30 ragge Exp $	*/
d78 1
a78 1
struct  ivec_dsp crl_intr;
d83 1
a83 1
	extern  struct ivec_dsp idsptch;
d88 1
a88 1
}       
d97 1
a97 1
	if (cpunumber != VAX_8600)
@
