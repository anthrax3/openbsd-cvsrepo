head	1.13;
access;
symbols
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.14
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.12
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.10
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.7
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.12;
commitid	OSDG2O3Cgeifnf1W;

1.12
date	2014.05.08.19.06.07;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.15.00.48.24;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.06.20.42.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.18.23.05.38;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.30.16.14.31;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.12.01.09.44;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.28.06.25.11;	author hugh;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.01.10.10;	author bjc;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.21.39.01;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.1.8.4;

1.1.8.4
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.1.8.5;

1.1.8.5
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: ka670.c,v 1.12 2014/05/08 19:06:07 miod Exp $	*/
/*	$NetBSD: ka670.c,v 1.4 2000/03/13 23:52:35 soren Exp $	*/
/*
 * Copyright (c) 1999 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * This code is derived from software contributed to Ludd by Bertram Barth.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed at Ludd, University of 
 *	Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/pte.h>
#include <machine/cpu.h>
#include <machine/mtpr.h>
#include <machine/sid.h>
#include <machine/pmap.h>
#include <machine/uvax.h>
#include <machine/vsbus.h>
#include <machine/ka670.h>
#include <machine/clock.h>

static	void ka670_conf(void);

static	int ka670_mchk(caddr_t);
static	void ka670_memerr(void);
static	int ka670_cache_init(void);	/* "int mapen" as argument? */

struct	cpu_dep ka670_calls = {
	0,
	ka670_mchk,
	ka670_memerr,
	ka670_conf,
	generic_clkread,
	generic_clkwrite,
	8,	/* 8 VUP */
	2,	/* SCB pages */
	generic_halt,
	generic_reboot,
	NULL,
	icr_hardclock
};

#define KA670_MC_RESTART	0x00008000	/* Restart possible*/
#define KA670_PSL_FPDONE	0x00010000	/* First Part Done */

struct ka670_mcframe {		/* Format of RigelMAX machine check frame: */
	int	mc670_bcnt;	/* byte count, always 24 (0x18) */
	int	mc670_code;	/* machine check type code and restart bit */
	int	mc670_addr;	/* most recent (faulting?) virtual address */
	int	mc670_viba;	/* contents of VIBA register */
	int	mc670_sisr;	/* ICCS bit 6 and SISR bits 15:0 */
	int	mc670_istate;	/* internal state */
	int	mc670_sc;	/* shift count register */
	int	mc670_pc;	/* trapped PC */
	int	mc670_psl;	/* trapped PSL */
};

#if 0

/*
 * This is not the mchk types on KA670.
 */
static char *ka670_mctype[] = {
	"no error (0)",			/* Code 0: No error */
	"FPA: protocol error",		/* Code 1-5: FPA errors */
	"FPA: illegal opcode",
	"FPA: operand parity error",
	"FPA: unknown status",
	"FPA: result parity error",
	"unused (6)",			/* Code 6-7: Unused */
	"unused (7)",
	"MMU error (TLB miss)",		/* Code 8-9: MMU errors */
	"MMU error (TLB hit)",
	"HW interrupt at unused IPL",	/* Code 10: Interrupt error */
	"MOVCx impossible state",	/* Code 11-13: Microcode errors */
	"undefined trap code (i-box)",
	"undefined control store address",
	"unused (14)",			/* Code 14-15: Unused */
	"unused (15)",
	"PC tag or data parity error",	/* Code 16: Cache error */
	"data bus parity error",	/* Code 17: Read error */
	"data bus error (NXM)",		/* Code 18: Write error */
	"undefined data bus state",	/* Code 19: Bus error */
};
#define MC670_MAX	19
#endif

static int ka670_error_count = 0;

int
ka670_mchk(addr)
	caddr_t addr;
{
	register struct ka670_mcframe *mcf = (void *)addr;

	mtpr(0x00, PR_MCESR);	/* Acknowledge the machine check */
	printf("machine check %d (0x%x)\n", mcf->mc670_code, mcf->mc670_code);
	printf("PC %x PSL %x\n", mcf->mc670_pc, mcf->mc670_psl);
	if (++ka670_error_count > 10) {
		printf("error_count exceeded: %d\n", ka670_error_count);
		return (-1);
	}

	/*
	 * If either the Restart flag is set or the First-Part-Done flag
	 * is set, and the TRAP2 (double error) bit is not set, then the
	 * error is recoverable.
	 */
	if (mfpr(PR_PCSTS) & KA670_PCS_TRAP2) {
		printf("TRAP2 (double error) in ka670_mchk.\n");
		panic("unrecoverable state in ka670_mchk.");
		return (-1);
	}
	if ((mcf->mc670_code & KA670_MC_RESTART) || 
	    (mcf->mc670_psl & KA670_PSL_FPDONE)) {
		printf("ka670_mchk: recovering from machine-check.\n");
		ka670_cache_init();	/* reset caches */
		return (0);		/* go on; */
	}

	/*
	 * Unknown error state, panic/halt the machine!
	 */
	printf("ka670_mchk: unknown error state!\n");
	return (-1);
}

void
ka670_memerr()
{
	/*
	 * Don\'t know what to do here. So just print some messages
	 * and try to go on...
	 */
	printf("memory error!\n");
	printf("primary cache status: %lb\n", mfpr(PR_PCSTS), KA670_PCSTS_BITS);
	printf("secondary cache status: %lb\n", mfpr(PR_BCSTS),
	    KA670_BCSTS_BITS);
}

int
ka670_cache_init()
{
	int val;

	mtpr(KA670_PCS_REFRESH, PR_PCSTS);	/* disable primary cache */
	val = mfpr(PR_PCSTS);
	mtpr(val, PR_PCSTS);			/* clear error flags */
	mtpr(8, PR_BCCTL);			/* disable backup cache */
	mtpr(0, PR_BCFBTS);	/* flush backup cache tag store */
	mtpr(0, PR_BCFPTS);	/* flush primary cache tag store */
	mtpr(0x0e, PR_BCCTL);	/* enable backup cache */
	mtpr(KA670_PCS_FLUSH | KA670_PCS_REFRESH, PR_PCSTS);	/* flush primary cache */
	mtpr(KA670_PCS_ENABLE | KA670_PCS_REFRESH, PR_PCSTS);	/* flush primary cache */

#ifdef DEBUG
	printf("primary cache status: %b\n", mfpr(PR_PCSTS), KA670_PCSTS_BITS);
	printf("secondary cache status: %b\n", mfpr(PR_BCSTS), KA670_BCSTS_BITS);
#endif

	return (0);
}
void
ka670_conf()
{
	printf("cpu0: KA670, ucode rev %d\n", vax_cpudata % 0377);

	/*
	 * ka670_conf() gets called with MMU enabled, now it's safe to
	 * init/reset the caches.
	 */
	ka670_cache_init();

	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);
}
@


1.12
log
@Format string fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.11 2011/09/15 00:48:24 miod Exp $	*/
@


1.11
log
@Switch vax to timecounters. There are three different clock sources:
- ICR/NICR on most systems (1MHz counter resolution).
- diagnostic timer on KA46/KA48 (1kHz counter resolution, counter is actually
  running at around 1024 kHz but is not guaranteed to be monotonic at this
  rate).
- 100Hz clock on VXT (nothing but the 100Hz clock interrupt).

Tested on KA49 (ICR style), KA46, KA48 (diagtmr style), VXT2000+ (VXT
{empty,hopeless}ness'r'us style).
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.10 2011/07/06 20:42:05 miod Exp $	*/
d168 3
a170 2
	printf("primary cache status: %b\n", mfpr(PR_PCSTS), KA670_PCSTS_BITS);
	printf("secondary cache status: %b\n", mfpr(PR_BCSTS), KA670_BCSTS_BITS);
@


1.10
log
@Drop cpu_dep.cpu_subconf routine, which is no longer used after KA820 support
removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.9 2008/08/18 23:05:38 miod Exp $	*/
d72 1
a72 1
	hardclock
@


1.9
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.8 2006/06/30 16:14:31 miod Exp $	*/
a48 1
#include <machine/nexus.h>
a70 1
	NULL,
@


1.8
log
@Old typos bite the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.7 2002/10/12 01:09:44 krw Exp $	*/
d72 3
a74 1
	0,
@


1.7
log
@Remove more '\n's from panic() statements. Both trailing and leading.

Diff generated by Chris Kuethe.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.6 2002/09/28 06:25:11 hugh Exp $	*/
d200 1
a200 1
	 * ka670_conf() gets called with MMU enabled, now it's save to
@


1.6
log
@Add support for OS defined halt action on Pele and Spitfire.
Testing by Brandon Creighton and Jim Uhl.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.5 2002/03/14 03:16:02 millert Exp $	*/
d143 1
a143 1
		panic("unrecoverable state in ka670_mchk.\n");
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.4 2002/03/14 01:26:48 millert Exp $	*/
a59 2
static	void ka670_halt(void);
static	void ka670_reboot(int);
d70 2
a71 2
	ka670_halt,
	ka670_reboot,
a203 7
}

static void
ka670_halt()
{
	asm("halt");
}
d205 1
a205 5
static void
ka670_reboot(arg)
	int arg;
{
	asm("halt");
a206 1

@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.3 2001/11/06 19:53:17 miod Exp $	*/
d128 1
a128 1
	register struct ka670_mcframe *mcf = (void*)addr;
@


1.3
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.2 2001/09/11 20:05:25 miod Exp $	*/
d55 1
a55 1
static	void ka670_conf __P((void));
d57 5
a61 5
static	int ka670_mchk __P((caddr_t));
static	void ka670_memerr __P((void));
static	int ka670_cache_init __P((void));	/* "int mapen" as argument? */
static	void ka670_halt __P((void));
static	void ka670_reboot __P((int));
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.3 2001/11/06 19:53:17 miod Exp $	*/
d55 1
a55 1
static	void ka670_conf(void);
d57 5
a61 5
static	int ka670_mchk(caddr_t);
static	void ka670_memerr(void);
static	int ka670_cache_init(void);	/* "int mapen" as argument? */
static	void ka670_halt(void);
static	void ka670_reboot(int);
d128 1
a128 1
	register struct ka670_mcframe *mcf = (void *)addr;
@


1.3.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.3.2.1 2002/06/11 03:39:19 art Exp $	*/
d60 2
d72 2
a73 2
	generic_halt,
	generic_reboot,
d145 1
a145 1
		panic("unrecoverable state in ka670_mchk.");
d206 7
d214 5
a218 1
	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);
d220 1
@


1.2
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
d42 1
a42 1
#include <vm/vm.h>
@


1.1
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a42 1
#include <vm/vm_kern.h>
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
@


1.1.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ka670.c,v 1.1.8.1 2001/05/14 21:39:01 niklas Exp $	*/
d43 1
@


1.1.8.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
#include <uvm/uvm_extern.h>
@


1.1.8.4
log
@Merge in -current from about a week ago
@
text
@d55 1
a55 1
static	void ka670_conf(void);
d57 5
a61 5
static	int ka670_mchk(caddr_t);
static	void ka670_memerr(void);
static	int ka670_cache_init(void);	/* "int mapen" as argument? */
static	void ka670_halt(void);
static	void ka670_reboot(int);
d128 1
a128 1
	register struct ka670_mcframe *mcf = (void *)addr;
@


1.1.8.5
log
@Sync the SMP branch with 3.3
@
text
@d60 2
d72 2
a73 2
	generic_halt,
	generic_reboot,
d145 1
a145 1
		panic("unrecoverable state in ka670_mchk.");
d206 7
d214 5
a218 1
	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);
d220 1
@


