head	1.5;
access;
symbols
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2006.07.20.19.08.15;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.01.10.10;	author bjc;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.21.38.44;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: cmi.c,v 1.4 2006/07/20 19:08:15 miod Exp $	*/
/*	$NetBSD: cmi.c,v 1.2 1999/08/14 11:30:48 ragge Exp $ */
/*
 * Copyright (c) 1999 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed at Ludd, University of 
 *	Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <machine/nexus.h>
#include <machine/cpu.h>
#include <machine/sid.h>
#include <machine/ka750.h>

static	int cmi_print(void *, const char *);
static	int cmi_match(struct device *, struct cfdata *, void *);
static	void cmi_attach(struct device *, struct device *, void *);

struct	cfattach cmi_ca = {
	sizeof(struct device), cmi_match, cmi_attach
};

int
cmi_print(aux, name)
	void *aux;
	const char *name;
{
	struct sbi_attach_args *sa = (struct sbi_attach_args *)aux;

	if (name)
		printf("unknown device 0x%x at %s", sa->type, name);

	printf(" tr%d", sa->nexnum);
	return (UNCONF);
}


int
cmi_match(parent, cf, aux)
	struct	device	*parent;
	struct cfdata *cf;
	void	*aux;
{
	struct mainbus_attach_args *maa = aux;

	if (maa->maa_bustype == VAX_CMIBUS)
		return 1;
	return 0;
}

void
cmi_attach(parent, self, aux)
	struct	device	*parent, *self;
	void	*aux;
{
	struct	sbi_attach_args sa;

	printf("\n");
	/*
	 * Probe for memory, can be in the first 4 slots.
	 */
#define NEXPAGES (sizeof(struct nexus) / VAX_NBPG)
	for (sa.nexnum = 0; sa.nexnum < 4; sa.nexnum++) {
		sa.nexaddr = (struct nexus *)vax_map_physmem(NEX750 +
		    sizeof(struct nexus) * sa.nexnum, NEXPAGES);
		if (badaddr((caddr_t)sa.nexaddr, 4)) {
			vax_unmap_physmem((vaddr_t)sa.nexaddr, NEXPAGES);
		} else {
			sa.type = NEX_MEM16;
			config_found(self, (void *)&sa, cmi_print);
		}
	}

	/*
	 * Probe for mba's, can be in slot 4 - 7.
	 */
	for (sa.nexnum = 4; sa.nexnum < 7; sa.nexnum++) {
		sa.nexaddr = (struct nexus *)vax_map_physmem(NEX750 +
		    sizeof(struct nexus) * sa.nexnum, NEXPAGES);
		if (badaddr((caddr_t)sa.nexaddr, 4)) {
			vax_unmap_physmem((vaddr_t)sa.nexaddr, NEXPAGES);
		} else {
			sa.type = NEX_MBA;
			config_found(self, (void *)&sa, cmi_print);
		}
	}

	/*
	 * There are always one generic UBA, and maybe an optional.
	 */
	sa.nexnum = 8;
	sa.nexaddr = (struct nexus *)vax_map_physmem(NEX750 +
	    sizeof(struct nexus) * sa.nexnum, NEXPAGES);
	sa.type = NEX_UBA0;
	config_found(self, (void *)&sa, cmi_print);

	sa.nexnum = 9;
	sa.nexaddr = (struct nexus *)vax_map_physmem(NEX750 +
	    sizeof(struct nexus) * sa.nexnum, NEXPAGES);
	sa.type = NEX_UBA1;
	if (badaddr((caddr_t)sa.nexaddr, 4))
		vax_unmap_physmem((vaddr_t)sa.nexaddr, NEXPAGES);
	else
		config_found(self, (void *)&sa, cmi_print);
}
@


1.4
log
@Kill an autoconf abuse introduced with Cheetah support, and pass real
attachment information to mainbus children. Makes it much cleaner to
attach both ibus and vsbus on those machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmi.c,v 1.3 2002/03/14 03:16:02 millert Exp $	*/
@


1.3
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: cmi.c,v 1.2 2002/03/14 01:26:48 millert Exp $	*/
d72 3
a74 1
	if (vax_bustype == VAX_CMIBUS)
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cmi.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
d45 1
a45 1
static	void cmi_attach(struct device *, struct device *, void*);
d96 1
a96 1
			config_found(self, (void*)&sa, cmi_print);
d110 1
a110 1
			config_found(self, (void*)&sa, cmi_print);
d121 1
a121 1
	config_found(self, (void*)&sa, cmi_print);
d130 1
a130 1
		config_found(self, (void*)&sa, cmi_print);
@


1.1
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 3
a45 3
static	int cmi_print __P((void *, const char *));
static	int cmi_match __P((struct device *, struct cfdata *, void *));
static	void cmi_attach __P((struct device *, struct device *, void*));
@


1.1.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cmi.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
d43 3
a45 3
static	int cmi_print(void *, const char *);
static	int cmi_match(struct device *, struct cfdata *, void *);
static	void cmi_attach(struct device *, struct device *, void *);
d96 1
a96 1
			config_found(self, (void *)&sa, cmi_print);
d110 1
a110 1
			config_found(self, (void *)&sa, cmi_print);
d121 1
a121 1
	config_found(self, (void *)&sa, cmi_print);
d130 1
a130 1
		config_found(self, (void *)&sa, cmi_print);
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: cmi.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
@


1.1.8.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 3
a45 3
static	int cmi_print(void *, const char *);
static	int cmi_match(struct device *, struct cfdata *, void *);
static	void cmi_attach(struct device *, struct device *, void *);
d96 1
a96 1
			config_found(self, (void *)&sa, cmi_print);
d110 1
a110 1
			config_found(self, (void *)&sa, cmi_print);
d121 1
a121 1
	config_found(self, (void *)&sa, cmi_print);
d130 1
a130 1
		config_found(self, (void *)&sa, cmi_print);
@


