head	1.13;
access;
symbols
	OPENBSD_4_9:1.12.0.20
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.18
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.14
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.18
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.16
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.14
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.12
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.10
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.8
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.8.0.10
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	SMP:1.7.0.12
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.07.06.18.33.00;	author miod;	state dead;
branches;
next	1.12;

1.12
date	2006.07.24.17.25.11;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.20.19.08.15;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.27.01.10.13;	author bjc;	state Exp;
branches
	1.8.10.1;
next	1.7;

1.7
date	97.05.29.00.05.24;	author niklas;	state Exp;
branches
	1.7.12.1;
next	1.6;

1.6
date	97.01.15.23.25.22;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.21.46.28;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.05.03.09.10.24;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.14.00.12;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.27.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.11;	author deraadt;	state Exp;
branches;
next	;

1.7.12.1
date	2001.05.14.21.39.09;	author niklas;	state Exp;
branches;
next	1.7.12.2;

1.7.12.2
date	2002.03.28.11.26.47;	author niklas;	state Exp;
branches;
next	;

1.8.10.1
date	2002.06.11.03.39.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: sbi.c,v 1.12 2006/07/24 17:25:11 miod Exp $ */
/*	$NetBSD: sbi.c,v 1.20 1999/08/07 10:36:50 ragge Exp $ */
/*
 * Copyright (c) 1994 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of Lule}.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Still to do: Write all SBI error handling.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <machine/sid.h>
#include <machine/cpu.h>
#include <machine/nexus.h>

static	int sbi_print(void *, const char *);
static	int sbi_match_abus(struct device *, struct cfdata *, void *);
static	int sbi_match_mainbus(struct device *, struct cfdata *, void *);
static	void sbi_attach(struct device *, struct device *, void *);

struct	cfdriver sbi_cd = {
	NULL, "sbi", DV_DULL
};

int
sbi_print(aux, name)
	void *aux;
	const char *name;
{
	struct sbi_attach_args *sa = (struct sbi_attach_args *)aux;
	int unsupp = 0;

	if (name) {
		switch (sa->type) {
		case NEX_MBA:
			printf("mba at %s", name);
			break;
		default:
			printf("unknown device 0x%x at %s", sa->type, name);
			unsupp++;
		}		
	}
	printf(" tr%d", sa->nexnum);
	return (unsupp ? UNSUPP : UNCONF);
}

int
sbi_match_mainbus(parent, cf, aux)
	struct device	*parent;
	struct cfdata *cf;
	void *aux;
{
	struct mainbus_attach_args *maa = aux;

	if (maa->maa_bustype == VAX_SBIBUS)
		return 1;
	return 0;
}

int
sbi_match_abus(parent, cf, aux)
	struct device	*parent;
	struct cfdata *cf;
	void *aux;
{
	struct bp_conf *bp = aux;

	if (strcmp(bp->type, sbi_cd.cd_name) == 0)
		return 1;

	return 0;
}

void
sbi_attach(parent, self, aux)
	struct	device	*parent, *self;
	void	*aux;
{
	u_int	nexnum, minnex;
	struct	sbi_attach_args sa;

	printf("\n");

#define NEXPAGES (sizeof(struct nexus) / VAX_NBPG)
	minnex = self->dv_unit * NNEXSBI;
	for (nexnum = minnex; nexnum < minnex + NNEXSBI; nexnum++) {
		struct	nexus *nexusP = 0;
		volatile int tmp;

		nexusP = (struct nexus *)vax_map_physmem((paddr_t)NEXA8600 +
		    sizeof(struct nexus) * nexnum, NEXPAGES);
		if (badaddr((caddr_t)nexusP, 4)) {
			vax_unmap_physmem((vaddr_t)nexusP, NEXPAGES);
		} else {
			tmp = nexusP->nexcsr.nex_csr; /* no byte reads */
			sa.type = tmp & 255;

			sa.nexnum = nexnum;
			sa.nexaddr = nexusP;
			config_found(self, (void *)&sa, sbi_print);
		}
	}
}

struct	cfattach sbi_mainbus_ca = {
	sizeof(struct device), sbi_match_mainbus, sbi_attach
};

struct	cfattach sbi_abus_ca = {
	sizeof(struct device), sbi_match_abus, sbi_attach
};
@


1.12
log
@Recent change to the way mainbus children attach requires sbi_match to be
split between mainbus and abus attachments. Untested (and this is not part
of the supported hardware at the moment), but at least this will allow
sbi to attach to abus (this was broken, even before the mainbus attachment
changes).
@
text
@d1 1
a1 1
/*	$OpenBSD: sbi.c,v 1.11 2006/07/20 19:08:15 miod Exp $ */
@


1.11
log
@Kill an autoconf abuse introduced with Cheetah support, and pass real
attachment information to mainbus children. Makes it much cleaner to
attach both ibus and vsbus on those machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbi.c,v 1.10 2002/03/14 03:16:02 millert Exp $ */
d47 2
a48 1
static	int sbi_match(struct device *, struct cfdata *, void *);
d51 4
d78 1
a78 1
sbi_match(parent, cf, aux)
d90 14
d136 1
a136 1
	sizeof(struct device), sbi_match, sbi_attach
d140 1
a140 1
	sizeof(struct device), sbi_match, sbi_attach
@


1.10
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: sbi.c,v 1.9 2002/03/14 01:26:49 millert Exp $ */
d78 3
a80 1
	if (vax_bustype == VAX_SBIBUS)
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sbi.c,v 1.8 2000/04/27 01:10:13 bjc Exp $ */
d48 1
a48 1
static	void sbi_attach(struct device *, struct device *, void*);
d109 1
a109 1
			config_found(self, (void*)&sa, sbi_print);
@


1.8
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: sbi.c,v 1.7 1997/05/29 00:05:24 niklas Exp $ */
d46 3
a48 3
static	int sbi_print __P((void *, const char *));
static	int sbi_match __P((struct device *, struct cfdata *, void *));
static	void sbi_attach __P((struct device *, struct device *, void*));
@


1.8.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbi.c,v 1.8 2000/04/27 01:10:13 bjc Exp $ */
d46 3
a48 3
static	int sbi_print(void *, const char *);
static	int sbi_match(struct device *, struct cfdata *, void *);
static	void sbi_attach(struct device *, struct device *, void *);
d109 1
a109 1
			config_found(self, (void *)&sa, sbi_print);
@


1.7
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: sbi.c,v 1.14 1996/10/13 03:36:00 christos Exp $ */
/*	$NetBSD: sbi.c,v 1.14 1996/10/13 03:36:00 christos Exp $ */
d33 4
d47 1
a47 1
static	int sbi_match __P((struct device *, void *, void *));
a56 1
	extern int nmba;
d61 1
a61 1
			printf("mba%d at %s",nmba++, name);
d74 3
a76 2
	struct	device	*parent;
	void	*cf, *aux;
d78 3
a80 5
	struct bp_conf *bp = aux;

	if (strcmp(bp->type, "sbi"))
		return 0;
	return 1;
d88 1
a88 1
	u_int	nexnum, maxnex, minnex;
d93 1
a93 5
	/*
	 * Now a problem: on different machines with SBI units identifies
	 * in different ways (if they identifies themselves at all).
	 * We have to fake identifying depending on different CPUs.
	 */
d96 1
d99 12
a110 9
		if (badaddr((caddr_t)&nexus[nexnum], 4))
			continue;

		tmp = nexus[nexnum].nexcsr.nex_csr; /* no byte reads */
		sa.type = tmp & 255;

		sa.nexnum = nexnum;
		sa.nexaddr = nexus + nexnum;
		config_found(self, (void*)&sa, sbi_print);
d114 2
a115 2
struct	cfdriver sbi_cd = {
	NULL, "sbi", DV_DULL
d118 1
a118 1
struct	cfattach sbi_ca = {
a120 1
	
@


1.7.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: sbi.c,v 1.8 2000/04/27 01:10:13 bjc Exp $ */
/*	$NetBSD: sbi.c,v 1.20 1999/08/07 10:36:50 ragge Exp $ */
a32 4
/*
 * Still to do: Write all SBI error handling.
 */

d43 1
a43 1
static	int sbi_match __P((struct device *, struct cfdata *, void *));
d53 1
d58 1
a58 1
			printf("mba at %s", name);
d71 2
a72 3
	struct device	*parent;
	struct cfdata *cf;
	void *aux;
d74 5
a78 3
	if (vax_bustype == VAX_SBIBUS)
		return 1;
	return 0;
d86 1
a86 1
	u_int	nexnum, minnex;
d91 5
a95 1
#define NEXPAGES (sizeof(struct nexus) / VAX_NBPG)
a97 1
		struct	nexus *nexusP = 0;
d100 9
a108 12
		nexusP = (struct nexus *)vax_map_physmem((paddr_t)NEXA8600 +
		    sizeof(struct nexus) * nexnum, NEXPAGES);
		if (badaddr((caddr_t)nexusP, 4)) {
			vax_unmap_physmem((vaddr_t)nexusP, NEXPAGES);
		} else {
			tmp = nexusP->nexcsr.nex_csr; /* no byte reads */
			sa.type = tmp & 255;

			sa.nexnum = nexnum;
			sa.nexaddr = nexusP;
			config_found(self, (void*)&sa, sbi_print);
		}
d112 2
a113 2
struct	cfattach sbi_mainbus_ca = {
	sizeof(struct device), sbi_match, sbi_attach
d116 1
a116 1
struct	cfattach sbi_abus_ca = {
d119 1
@


1.7.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d46 3
a48 3
static	int sbi_print(void *, const char *);
static	int sbi_match(struct device *, struct cfdata *, void *);
static	void sbi_attach(struct device *, struct device *, void *);
d109 1
a109 1
			config_found(self, (void *)&sa, sbi_print);
@


1.6
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$NetBSD: sbi.c,v 1.9 1996/04/08 18:32:55 ragge Exp $ */
d36 1
a36 5
#include <vm/vm.h>
#include <vm/vm_kern.h>
#include <vm/vm_page.h>
#include <machine/ka750.h>
#include <machine/pmap.h>
d39 1
a39 2

struct nexus *nexus;
d42 2
a43 9
	int sbi_match __P((struct device *, void *, void *));
	void sbi_attach __P((struct device *, struct device *, void*));


struct bp_conf {
	char *type;
	int num;
	int partyp;
};
d70 2
a71 2
	struct  device  *parent;
	void    *cf, *aux;
d82 2
a83 2
	struct  device  *parent, *self;
	void    *aux;
d85 1
a85 1
	u_int 	nexnum, maxnex, minnex;
d88 1
a88 42
	switch (cpunumber) {
#ifdef VAX730
	case VAX_730:
		maxnex = NNEX730;
		printf(": BL[730\n");
		break;
#endif
#ifdef VAX750
	case VAX_750:
		maxnex = NNEX750;
		printf(": CMI750\n");
		break;
#endif
#ifdef VAX630
	case VAX_78032:
		switch (cpu_type) {
		case VAX_630:
			maxnex = NNEX630;
			printf(": Q22\n");
			break;
		default:
			panic("Microvax not supported");
		};
		break;
#endif
#ifdef VAX650
	case VAX_650:
		maxnex = NNEX630; /* XXX */
		printf(": Q22\n");
		break;
#endif
#if VAX780 || VAX8600
	case VAX_780:
	case VAX_8600:
		maxnex = NNEXSBI;
		printf(": SBI780\n");
		break;
#endif
	default:
		maxnex = 0; /* Leave it */
		break;
	}
d95 2
a96 2
	minnex = self->dv_unit * maxnex;
	for (nexnum = minnex; nexnum < minnex + maxnex; nexnum++) {
d102 3
a104 25
		switch (cpunumber) {
#ifdef VAX750
		case VAX_750:
		{	extern	int nexty750[];
			sa.type = nexty750[nexnum];
			break;
		}
#endif
#ifdef VAX730
		case VAX_730:
		{	extern	int nexty730[];
			sa.type = nexty730[nexnum];
			break;
		}
#endif
#if VAX630 || VAX650
		case VAX_78032:
		case VAX_650:
			sa.type = NEX_UBA0;
			break;
#endif
		default:
			tmp = nexus[nexnum].nexcsr.nex_csr; /* no byte reads */
			sa.type = tmp & 255;
		}
d111 1
a111 1
struct  cfdriver sbi_cd = {
@


1.4
log
@sync w/ 0430
@
text
@d46 1
a46 1
static	int sbi_print __P((void *, char *));
d60 1
a60 1
	char *name;
@


1.3
log
@update from netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: sbi.c,v 1.4 1995/12/13 18:45:53 ragge Exp $ */
d32 11
a42 9
#include "sys/types.h"
#include "sys/param.h"
#include "sys/device.h"
#include "vm/vm.h"
#include "vm/vm_kern.h"
#include "vm/vm_page.h"
#include "machine/ka750.h"
#include "machine/pmap.h"
#include "machine/sid.h"
d46 4
a49 1
static int sbi_attached = 0;
a69 1
			unsupp++;
d83 1
a83 2
	struct  cfdata  *cf;
	void    *aux;
d88 2
a89 2
		return 1;
	return 0;
d97 2
a98 3
	void *nisse;
	u_int nextype, nexnum, maxnex;
	struct sbi_attach_args sa;
d138 3
d148 4
a151 1
	for (nexnum = 0; nexnum < maxnex; nexnum++) {
d155 1
a155 1
		switch(cpunumber){
d158 1
a158 1
		{	extern int nexty750[];
d165 1
a165 1
		{	extern int nexty730[];
d177 2
a178 1
			sa.type = nexus[nexnum].nexcsr.nex_type;
d186 3
a188 2
struct  cfdriver sbicd =
	{ NULL, "sbi", sbi_match, sbi_attach, DV_DULL, sizeof(struct device) };
d190 4
@


1.2
log
@update from netbsd (verbatim)
@
text
@d1 1
a1 1
/*	$NetBSD: sbi.c,v 1.3 1995/11/10 19:14:43 ragge Exp $ */
d123 6
d162 1
a162 1
#ifdef VAX630
d164 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: sbi.c,v 1.2 1995/02/23 17:54:03 ragge Exp $ */
a31 3
 /* All bugs are subject to removal without further notice */
		

d38 1
a38 1
#include "machine/nexus.h"
d42 3
a44 1
static int sbi_attached=0;
d57 2
a58 2
	struct sbi_attach_args *sa=(struct sbi_attach_args *)aux;
	int unsupp=0;
d61 2
a62 2
	if(name){
		switch(sa->type){
d68 1
a68 1
			printf("unknown device 0x%x at %s",sa->type,name);
d72 2
a73 2
	printf(" tr%d",sa->nexnum);
	return(unsupp?UNSUPP:UNCONF);
d82 1
a82 1
	struct bp_conf *bp=aux;
d84 1
a84 1
	if(strcmp(bp->type,"sbi"))
a94 1
	struct nexus *nexus;
d98 1
a98 4
	/* SBI space should be alloc'ed in SYSPT instead */
	kmem_suballoc(kernel_map, (void*)&nexus, (void*)&nisse,
		(NNEXSBI*sizeof(struct nexus)), FALSE);
	switch(cpunumber){
d101 3
a103 4
	pmap_map((int)nexus, 0xf20000, 0xf40000, VM_PROT_READ|VM_PROT_WRITE);
	maxnex = NNEX730;
	printf(": BL[730\n");
	break;
d107 3
a109 4
	pmap_map((int)nexus, 0xf20000, 0xf40000, VM_PROT_READ|VM_PROT_WRITE);
	maxnex = NNEX750;
	printf(": CMI750\n");
	break;
d113 8
a120 6
	switch (cpu_type) {
	case VAX_630:
		pmap_map((int)nexus, 0x20088000, 0x200a8000,
			VM_PROT_READ|VM_PROT_WRITE);
		maxnex = NNEX630;
		printf(": Q22\n");
a121 4
	default:
		panic("Microvax not supported");
	};
	break;
d123 1
a123 1

d126 4
a129 2
	maxnex = NNEXSBI;
	printf(": SBI780\n");
d132 8
a139 7
/*
 * Now a problem: on different machines with SBI units identifies
 * in different ways (if they identifies themselves at all).
 * We have to fake identifying depending on different CPUs.
 */
	for(nexnum=0;nexnum<maxnex;nexnum++){
		if(badaddr((caddr_t)&nexus[nexnum],4))continue;
d145 1
a145 1
			sa.type=nexty750[nexnum];
d152 1
a152 1
			sa.type=nexty730[nexnum];
d162 1
a162 1
			sa.type=nexus[nexnum].nexcsr.nex_type;
d164 2
a165 2
		sa.nexnum=nexnum;
		sa.nexaddr=nexus+nexnum;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
