head	1.10;
access;
symbols
	OPENBSD_5_9:1.9.0.16
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.18
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.10
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.14
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.12
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.8
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SMP:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.9;
commitid	OSDG2O3Cgeifnf1W;

1.9
date	2011.09.19.21.53.02;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.20.19.55.20;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.20.19.52.08;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.20.19.08.15;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.02.11.06.34.37;	author hugh;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.01.28.01.19.59;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.01.10.10;	author bjc;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.21.38.53;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: ibus.c,v 1.9 2011/09/19 21:53:02 miod Exp $	*/
/*	$NetBSD: ibus.c,v 1.7 2001/02/04 20:36:32 ragge Exp $ */
/*
 * Copyright (c) 1999 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed at Ludd, University of 
 *	Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <machine/nexus.h>
#include <machine/cpu.h>
#include <machine/sid.h>

static	int ibus_print(void *, const char *);
static	int ibus_match(struct device *, struct cfdata *, void *);
static	void ibus_attach(struct device *, struct device *, void *);

struct	cfdriver ibus_cd = {
	NULL, "ibus", DV_DULL
};

struct	cfattach ibus_ca = {
	sizeof(struct device), (cfmatch_t)ibus_match, ibus_attach
};

int
ibus_print(void *aux, const char *name)
{
	struct bp_conf *bp = aux;

	if (name)
		printf("%s at %s", bp->type, name);

	return (UNCONF);
}


int
ibus_match(struct device *parent, struct cfdata *cf, void *aux)
{
	struct mainbus_attach_args *maa = aux;

	if (maa->maa_bustype == VAX_IBUS)
		return 1;
	return 0;
}

#define	MVNIADDR	0x20084400
#define	SGECADDR	0x20008000
#define	SHACADDR	0x20004200
#define	SHAC1303ADDR	0x20008200

void
ibus_attach(parent, self, aux)
	struct	device	*parent, *self;
	void	*aux;
{
	struct bp_conf bp;
	vaddr_t va;

	printf("\n");

	/*
	 * There may be a SGEC. Is badaddr() enough here?
	 */
	bp.type = "sgec";
	va = vax_map_physmem(SGECADDR, 1);
	if (badaddr((caddr_t)va, 4) == 0)
		config_found(self, &bp, ibus_print);
	vax_unmap_physmem(va, 1);

	/*
	 * There may be a LANCE.
	 */
	bp.type = "lance";
	va = vax_map_physmem(MVNIADDR, 1);
	if (badaddr((caddr_t)va, 2) == 0)
		config_found(self, &bp, ibus_print);
	vax_unmap_physmem(va, 1);

	/*
	 * The same procedure for SHAC.
	 */
	bp.type = "shac";
	/*
	 * XXX Clearly the address on Cheetah machines varies between models,
	 * XXX but I could only check the address on a 4000 106 so far. -- miod
	 */
	if (vax_boardtype == VAX_BTYP_1303 && vax_cpustype != VAX_STYP_53)
		va = vax_map_physmem(SHAC1303ADDR, 1);
	else
		va = vax_map_physmem(SHACADDR, 1);
	if (badaddr((caddr_t)va + 0x48, 4) == 0)
		config_found(self, &bp, ibus_print);
	vax_unmap_physmem(va, 1);

	/*
	 * All MV's have a Qbus.
	 */
	bp.type = "uba";
	config_found(self, &bp, ibus_print);

}
@


1.9
log
@Try and clean system type constants a bit:
- save the second byte of vax_siedata into a new variable, vax_cpustype,
  and use it instead of (vax_siedata >> 8) & 0xff or other similar
  constructs.
- the VAX_SIE_KAxxx constants are duplicates of the VAX_STYP_xx constants.
  Standardize on the latter and kill the former.
- only keep VAX_VTYP_xx constants for KA46 and KA47, those are the only
  systems which use these constants and are told apart by a different
  SIE byte.

No functional change intended.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.8 2006/07/20 19:55:20 miod Exp $	*/
@


1.8
log
@Not all Cheetah machines have the DSSI controller at a non-canonical address;
this will get corrected on a machine-by-machine basis.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.6 2006/07/20 19:08:15 miod Exp $	*/
d115 1
a115 1
	 * XXX but I could only check the address on a 4000 105A so far. -- miod
d117 1
a117 2
	if (vax_boardtype == VAX_BTYP_1303 &&
	    ((vax_siedata >> 8) & 0xFF) != VAX_STYP_53)
@


1.7
log
@Conform to the party's line when printing unconfigured devices.
@
text
@d113 6
a118 1
	if (vax_boardtype == VAX_BTYP_1303)
@


1.6
log
@Kill an autoconf abuse introduced with Cheetah support, and pass real
attachment information to mainbus children. Makes it much cleaner to
attach both ibus and vsbus on those machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.5 2002/03/14 03:16:02 millert Exp $	*/
d60 1
a60 1
		printf("device %s at %s", bp->type, name);
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.4 2001/08/25 13:33:37 hugh Exp $	*/
d69 3
a71 1
	if (vax_bustype == VAX_IBUS)
@


1.4
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.3 2001/02/11 06:34:37 hugh Exp $	*/
d44 1
a44 1
static	void ibus_attach(struct device *, struct device *, void*);
@


1.4.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.4 2001/08/25 13:33:37 hugh Exp $	*/
d44 1
a44 1
static	void ibus_attach(struct device *, struct device *, void *);
@


1.3
log
@Pick up a NetBSD hack to attach Cheetah to vsbus as well as ibus.
High kludge factor, but the payoff is vsbus scsi for free.
Most of the work is by Michael Kukat and ragge, with a few other
synchronisations thrown in.
@
text
@d1 2
a2 2
/*	$OpenBSD: ibus.c,v 1.2 2001/01/28 01:19:59 hugh Exp $	*/
/*	$NetBSD: ibus.c,v 1.2 1999/08/14 18:42:46 ragge Exp $ */
d42 3
a44 3
static	int ibus_print __P((void *, const char *));
static	int ibus_match __P((struct device *, struct cfdata *, void *));
static	void ibus_attach __P((struct device *, struct device *, void*));
d55 1
a55 3
ibus_print(aux, name)
	void *aux;
	const char *name;
d67 1
a67 4
ibus_match(parent, cf, aux)
	struct	device	*parent;
	struct cfdata *cf;
	void	*aux;
d74 4
a77 3
#define	MVNIADDR 0x20084400
#define	SGECADDR 0x20008000
#define SHACADDR 0x20004200
d111 4
a114 1
	va = vax_map_physmem(SHACADDR, 1);
@


1.3.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.3 2001/02/11 06:34:37 hugh Exp $	*/
@


1.3.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD: ibus.c,v 1.3.4.1 2001/05/14 21:38:53 niklas Exp $	*/
/*	$NetBSD: ibus.c,v 1.7 2001/02/04 20:36:32 ragge Exp $ */
d42 3
a44 3
static	int ibus_print(void *, const char *);
static	int ibus_match(struct device *, struct cfdata *, void *);
static	void ibus_attach(struct device *, struct device *, void*);
d55 3
a57 1
ibus_print(void *aux, const char *name)
d69 4
a72 1
ibus_match(struct device *parent, struct cfdata *cf, void *aux)
d79 3
a81 4
#define	MVNIADDR	0x20084400
#define	SGECADDR	0x20008000
#define	SHACADDR	0x20004200
#define	SHAC1303ADDR	0x20008200
d115 1
a115 4
	if (vax_boardtype == VAX_BTYP_1303)
		va = vax_map_physmem(SHAC1303ADDR, 1);
	else
		va = vax_map_physmem(SHACADDR, 1);
@


1.3.4.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static	void ibus_attach(struct device *, struct device *, void *);
@


1.2
log
@Basic support for boardtype 1303 (Cheetah) machines.
Layout of the DZ's registers (among other things) determined
by a massive amount of trial and error.
Work by Brandon and me.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibus.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
a41 2
#include <machine/ibus.h>

a53 2
struct ibus_edal *ibus_edal = NULL;

a92 3
	if (vax_boardtype == VAX_BTYP_1303)
		ibus_edal = (struct ibus_edal *) vax_map_physmem(0x25c00000, 1);

a125 27
}

/*
 * Bitwise OR bits into the interrupt mask.
 * Returns the new mask.
 */
unsigned char
ibus_ormask(mask)
	unsigned char mask;
{
	ibus_edal->edal_intmsk |= mask;
	return (ibus_edal->edal_intmsk);
}

/*
 * Sets a new interrupt mask. Returns the old one.
 * Works like spl functions.
 */
unsigned char
ibus_setmask(mask)
	unsigned char mask;
{
	unsigned char ch;

	ch = ibus_edal->edal_intmsk;
	ibus_edal->edal_intmsk = mask;
	return ch;
@


1.1
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
d56 2
d96 4
d126 1
d133 27
@

