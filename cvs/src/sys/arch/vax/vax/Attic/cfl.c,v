head	1.8;
access;
symbols
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.10
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.20.23.27.26;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.27.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.10.21.56.11;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.27.01.10.11;	author bjc;	state Exp;
branches
	1.2.10.1;
next	1.1;

1.1
date	97.09.12.09.30.53;	author maja;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2001.05.14.21.38.43;	author niklas;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.1.12.3;

1.1.12.3
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	1.1.12.4;

1.1.12.4
date	2003.06.07.11.14.48;	author ho;	state Exp;
branches;
next	;

1.2.10.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.2.10.2;

1.2.10.2
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: cfl.c,v 1.7 2010/06/26 23:24:44 guenther Exp $	*/
/*	$NetBSD: cfl.c,v 1.2 1998/04/13 12:10:26 ragge Exp $	*/
/*-
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * Copyright (c) 1982, 1986 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)crl.c	7.5 (Berkeley) 5/9/91
 */

/*
 * Console floppy driver for 11/780.
 *	XXX - Does not work. (Not completed)
 *	Included here if someone wants to finish it.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/proc.h>
#include <sys/buf.h>

#include <machine/cpu.h>
#include <machine/mtpr.h>
#include <machine/sid.h>
#include <machine/scb.h>

#include <vax/vax/gencons.h>

#define	CFL_TRACKS	77
#define	CFL_SECTORS	26
#define	CFL_BYTESPERSEC	128
#define	CFL_MAXSEC	(CFL_TRACKS * CFL_SECTORS)

#define	FLOP_READSECT	0x900
#define	FLOP_WRITSECT	0x901
#define	FLOP_DATA	0x100
#define	FLOP_COMPLETE	0x200

struct {
	short	cfl_state;		/* open and busy flags */
	short	cfl_active;		/* driver state flag */
	struct	buf *cfl_buf;		/* buffer we're using */
	unsigned char *cfl_xaddr;		/* transfer address */
	short	cfl_errcnt;
} cfltab;

#define	IDLE	0
#define	OPEN	1
#define	BUSY	2

#define	CFL_IDLE	0
#define	CFL_START	1
#define	CFL_SECTOR	2
#define	CFL_DATA	3
#define	CFL_TRACK	4
#define	CFL_NEXT	5
#define	CFL_FINISH	6
#define	CFL_GETIN	7

static	void cflstart(void);

int	cflopen(dev_t, int, struct proc *);
int	cflclose(dev_t, int, struct proc *);
int	cflrw(dev_t, struct uio *, int);

/*ARGSUSED*/
int
cflopen(dev, flag, p)
	dev_t dev;
	int flag;
	struct proc *p;
{
	if (vax_cputype != VAX_780)
		return (ENXIO);
	if (cfltab.cfl_state != IDLE)
		return (EALREADY);
	cfltab.cfl_state = OPEN;
	cfltab.cfl_buf = geteblk(512);
	return (0);
}

/*ARGSUSED*/
int
cflclose(dev, flag, p)
	dev_t dev;
	int flag;
	struct proc *p;
{

	brelse(cfltab.cfl_buf);
	cfltab.cfl_state = IDLE;
	return 0;
}

/*ARGSUSED*/
int
cflrw(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	register struct buf *bp;
	register int i;
	register int s;
	int error;

	if (uio->uio_resid == 0) 
		return (0);
	s = spl4();
	while (cfltab.cfl_state == BUSY)
		tsleep((caddr_t)&cfltab, PRIBIO, "cflrw", 0);
	cfltab.cfl_state = BUSY;
	splx(s);

	bp = cfltab.cfl_buf;
	error = 0;
	while ((i = imin(CFL_BYTESPERSEC, uio->uio_resid)) > 0) {
		bp->b_blkno = uio->uio_offset>>7;
		if (bp->b_blkno >= CFL_MAXSEC ||
		    (uio->uio_offset & 0x7F) != 0) {
			error = EIO;
			break;
		}
		if (uio->uio_rw == UIO_WRITE) {
			error = uiomove(bp->b_data, i, uio);
			if (error)
				break;
		}
		bp->b_flags = uio->uio_rw == UIO_WRITE ? B_WRITE : B_READ;
		s = spl4(); 
		cflstart();
		while ((bp->b_flags & B_DONE) == 0)
			tsleep((caddr_t)bp, PRIBIO, "cflrw", 0);	
		splx(s);
		if (bp->b_flags & B_ERROR) {
			error = EIO;
			break;
		}
		if (uio->uio_rw == UIO_READ) {
			error = uiomove(bp->b_data, i, uio);
			if (error)
				break;
		}
	}
	cfltab.cfl_state = OPEN;
	wakeup((caddr_t)&cfltab);
	return (error);
}

void
cflstart()
{
	register struct buf *bp;

	bp = cfltab.cfl_buf;
	cfltab.cfl_errcnt = 0;
	cfltab.cfl_xaddr = (unsigned char *) bp->b_data;
	cfltab.cfl_active = CFL_START;
	bp->b_resid = 0;

	if ((mfpr(PR_TXCS) & GC_RDY) == 0)
		/* not ready to receive order */
		return;

	cfltab.cfl_active = CFL_SECTOR;
	mtpr(bp->b_flags & B_READ ? FLOP_READSECT : FLOP_WRITSECT, PR_TXDB);

#ifdef lint
	cflintr();
#endif
}

void cfltint(int);

void
cfltint(arg)
	int arg;
{
	register struct buf *bp = cfltab.cfl_buf;

	switch (cfltab.cfl_active) {
	case CFL_START:/* do a read */
		mtpr(bp->b_flags & B_READ ? FLOP_READSECT : FLOP_WRITSECT,
		    PR_TXDB);
		cfltab.cfl_active = CFL_SECTOR;
		break;

	case CFL_SECTOR:/* send sector */
		mtpr(FLOP_DATA | (int)bp->b_blkno % (CFL_SECTORS + 1), PR_TXDB);
		cfltab.cfl_active = CFL_TRACK;
		break;

	case CFL_TRACK:
		mtpr(FLOP_DATA | (int)bp->b_blkno / CFL_SECTORS, PR_TXDB);
		cfltab.cfl_active = CFL_NEXT;
		break;

	case CFL_NEXT:
		mtpr(FLOP_DATA | *cfltab.cfl_xaddr++, PR_TXDB);
		if (--bp->b_bcount == 0)
			cfltab.cfl_active = CFL_FINISH;
		break;

	}
}

void cflrint(int);

void
cflrint(ch)
	int ch;
{
	struct buf *bp = cfltab.cfl_buf;

	switch (cfltab.cfl_active) {
	case CFL_NEXT:
		if ((bp->b_flags & B_READ) == B_READ)
			cfltab.cfl_active = CFL_GETIN;
		else {
			cfltab.cfl_active = CFL_IDLE;
			bp->b_flags |= B_DONE;
			wakeup(bp);
		}
		break;

	case CFL_GETIN:
		*cfltab.cfl_xaddr++ = ch & 0377;
		if (--bp->b_bcount==0) {
			cfltab.cfl_active = CFL_IDLE;
			bp->b_flags |= B_DONE;
			wakeup(bp);
		}
		break;
	}
}
@


1.7
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.6 2006/01/20 23:27:26 miod Exp $	*/
@


1.6
log
@b_un.b_addr -> b_data; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.5 2003/06/02 23:27:58 millert Exp $	*/
a44 1
#include <sys/user.h>
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.4 2002/06/10 21:56:11 miod Exp $	*/
d151 1
a151 1
			error = uiomove(bp->b_un.b_addr, i, uio);
d166 1
a166 1
			error = uiomove(bp->b_un.b_addr, i, uio);
d183 1
a183 1
	cfltab.cfl_xaddr = (unsigned char *) bp->b_un.b_addr;
@


1.4
log
@sleep() -> tsleep()
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.3 2002/03/14 01:26:48 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.2 2000/04/27 01:10:11 bjc Exp $	*/
d141 1
a141 1
		sleep((caddr_t)&cfltab, PRIBIO);
d163 1
a163 1
			sleep((caddr_t)bp, PRIBIO);	
@


1.2
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.1 1997/09/12 09:30:53 maja Exp $	*/
d90 1
a90 1
static	void cflstart __P((void));
d92 3
a94 3
int	cflopen __P((dev_t, int, struct proc *));
int	cflclose __P((dev_t, int, struct proc *));
int	cflrw __P((dev_t, struct uio *, int));
d203 1
a203 1
void cfltint __P((int));
d237 1
a237 1
void cflrint __P((int));
@


1.2.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.2 2000/04/27 01:10:11 bjc Exp $	*/
d90 1
a90 1
static	void cflstart(void);
d92 3
a94 3
int	cflopen(dev_t, int, struct proc *);
int	cflclose(dev_t, int, struct proc *);
int	cflrw(dev_t, struct uio *, int);
d203 1
a203 1
void cfltint(int);
d237 1
a237 1
void cflrint(int);
@


1.2.10.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.2.10.1 2002/06/11 03:39:19 art Exp $	*/
d141 1
a141 1
		tsleep((caddr_t)&cfltab, PRIBIO, "cflrw", 0);
d163 1
a163 1
			tsleep((caddr_t)bp, PRIBIO, "cflrw", 0);	
@


1.1
log
@Sync with NetBSD 970827. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: cfl.c,v 1.1 1997/06/13 14:55:07 ragge Exp $	*/
d203 2
d219 1
a219 1
		mtpr(FLOP_DATA | (int)bp->b_blkno % CFL_SECTORS + 1, PR_TXDB);
d236 2
@


1.1.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: cfl.c,v 1.2 2000/04/27 01:10:11 bjc Exp $	*/
/*	$NetBSD: cfl.c,v 1.2 1998/04/13 12:10:26 ragge Exp $	*/
a202 2
void cfltint __P((int));

d217 1
a217 1
		mtpr(FLOP_DATA | (int)bp->b_blkno % (CFL_SECTORS + 1), PR_TXDB);
a233 2

void cflrint __P((int));
@


1.1.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 1
a90 1
static	void cflstart(void);
d92 3
a94 3
int	cflopen(dev_t, int, struct proc *);
int	cflclose(dev_t, int, struct proc *);
int	cflrw(dev_t, struct uio *, int);
d203 1
a203 1
void cfltint(int);
d237 1
a237 1
void cflrint(int);
@


1.1.12.3
log
@Sync the SMP branch with 3.3
@
text
@d141 1
a141 1
		tsleep((caddr_t)&cfltab, PRIBIO, "cflrw", 0);
d163 1
a163 1
			tsleep((caddr_t)bp, PRIBIO, "cflrw", 0);	
@


1.1.12.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cfl.c,v 1.1.12.3 2003/03/27 23:52:20 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


