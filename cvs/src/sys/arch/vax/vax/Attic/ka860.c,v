head	1.11;
access;
symbols
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.5.0.10
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2008.08.18.23.05.39;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.20.19.08.15;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.27.59;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.27.01.10.13;	author bjc;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	97.09.10.12.04.49;	author maja;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	97.05.29.00.05.22;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.23.25.16;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.09.10.16;	author mickey;	state Exp;
branches;
next	;

1.4.12.1
date	2001.05.14.21.39.04;	author niklas;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.4.12.3;

1.4.12.3
date	2003.06.07.11.14.48;	author ho;	state Exp;
branches;
next	;

1.5.10.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: ka860.c,v 1.10 2008/08/18 23:05:39 miod Exp $	*/
/*	$NetBSD: ka860.c,v 1.15 1999/08/07 10:36:49 ragge Exp $	*/
/*
 * Copyright (c) 1986, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ka860.c	7.4 (Berkeley) 12/16/90
 */

/*
 * VAX 8600 specific routines.
 * Also contains abus spec's and memory init routines.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <machine/cpu.h>
#include <machine/clock.h>
#include <machine/mtpr.h>
#include <machine/nexus.h>
#include <machine/ioa.h>
#include <machine/sid.h>

#include <vax/vax/gencons.h>

static	void	ka86_memerr(void);
static	int	ka86_mchk(caddr_t);
static	void	ka86_reboot(int);
static	void	ka86_clrf(void);
static	void	ka860_init(struct device *);

void	crlattach(void);

struct	cpu_dep	ka860_calls = {
	0,
	ka86_mchk,
	ka86_memerr,
	0,
	generic_clkread,
	generic_clkwrite,
	6,      /* ~VUPS */
	10,	/* SCB pages */
	0,	/* Halt call, nothing special */
	ka86_reboot,
	ka86_clrf,
	NULL,
	hardclock
};

/*
 * 8600 memory register (MERG) bit definitions
 */
#define M8600_ICRD	0x400		/* inhibit crd interrupts */
#define M8600_TB_ERR	0xf00		/* translation buffer error mask */

/*
 * MDECC register
 */
#define M8600_ADDR_PE	0x080000	/* address parity error */
#define M8600_DBL_ERR	0x100000	/* data double bit error */
#define M8600_SNG_ERR	0x200000	/* data single bit error */
#define M8600_BDT_ERR	0x400000	/* bad data error */

/*
 * ESPA register is used to address scratch pad registers in the Ebox.
 * To access a register in the scratch pad, write the ESPA with the address
 * and then read the ESPD register.  
 *
 * NOTE:  In assmebly code, the mfpr instruction that reads the ESPD
 *	  register must immedately follow the mtpr instruction that setup
 *	  the ESPA register -- per the VENUS processor register spec.
 *
 * The scratchpad registers that are supplied for a single bit ECC 
 * error are:
 */
#define SPAD_MSTAT1	0x25		/* scratch pad mstat1 register	*/
#define SPAD_MSTAT2	0x26		/* scratch pad mstat2 register	*/
#define SPAD_MDECC	0x27		/* scratch pad mdecc register	*/
#define SPAD_MEAR	0x2a		/* scratch pad mear register	*/

#define M8600_MEMERR(mdecc) ((mdecc) & 0x780000)
#define M8600_HRDERR(mdecc) ((mdecc) & 0x580000)
#define M8600_SYN(mdecc) (((mdecc) >> 9) & 0x3f)
#define M8600_ADDR(mear) ((mear) & 0x3ffffffc)
#define M8600_ARRAY(mear) (((mear) >> 22) & 0x0f)

#define M8600_MDECC_BITS \
"\20\27BAD_DT_ERR\26SNG_BIT_ERR\25DBL_BIT_ERR\24ADDR_PE"

#define M8600_MSTAT1_BITS "\20\30CPR_PE_A\27CPR_PE_B\26ABUS_DT_PE\
\25ABUS_CTL_MSK_PE\24ABUS_ADR_PE\23ABUS_C/A_CYCLE\22ABUS_ADP_1\21ABUS_ADP_0\
\20TB_MISS\17BLK_HIT\16C0_TAG_MISS\15CHE_MISS\14TB_VAL_ERR\13TB_PTE_B_PE\
\12TB_PTE_A_PE\11TB_TAG_PE\10WR_DT_PE_B3\7WR_DT_PE_B2\6WR_DT_PE_B1\
\5WR_DT_PE_B0\4CHE_RD_DT_PE\3CHE_SEL\2ANY_REFL\1CP_BW_CHE_DT_PE"

#define M8600_MSTAT2_BITS "\20\20CP_BYT_WR\17ABUS_BD_DT_CODE\10MULT_ERR\
\7CHE_TAG_PE\6CHE_TAG_W_PE\5CHE_WRTN_BIT\4NXM\3CP-IO_BUF_ERR\2MBOX_LOCK"

/* log CRD errors */
void
ka86_memerr()
{
	register int reg11 = 0; /* known to be r11 below */
	int mdecc, mear, mstat1, mstat2, array;

	/*
	 * Scratchpad registers in the Ebox must be read by
	 * storing their ID number in ESPA and then immediately
	 * reading ESPD's contents with no other intervening
	 * machine instructions!
	 *
	 * The asm's below have a number of constants which
	 * are defined correctly above and in mtpr.h.
	 */
#ifdef lint
	reg11 = 0;
#else
	asm("mtpr $0x27,$0x4e; mfpr $0x4f,%0":: "r" (reg11));
#endif
	mdecc = reg11;	/* must acknowledge interrupt? */
	if (M8600_MEMERR(mdecc)) {
		asm("mtpr $0x2a,$0x4e; mfpr $0x4f,%0":: "r" (reg11));
		mear = reg11;
		asm("mtpr $0x25,$0x4e; mfpr $0x4f,%0":: "r" (reg11));
		mstat1 = reg11;
		asm("mtpr $0x26,$0x4e; mfpr $0x4f,%0":: "r" (reg11));
		mstat2 = reg11;
		array = M8600_ARRAY(mear);

		printf("mcr0: ecc error, addr %x (array %d) syn %x\n",
			M8600_ADDR(mear), array, M8600_SYN(mdecc));
		printf("\tMSTAT1 = %b\n\tMSTAT2 = %b\n",
			    mstat1, M8600_MSTAT1_BITS,
			    mstat2, M8600_MSTAT2_BITS);
		mtpr(0, PR_EHSR);
		mtpr(mfpr(PR_MERG) | M8600_ICRD, PR_MERG);
	}
}

#define NMC8600 7
char *mc8600[] = {
	"unkn type",	"fbox error",	"ebox error",	"ibox error",
	"mbox error",	"tbuf error",	"mbox 1D error"
};
/* codes for above */
#define MC_FBOX		1
#define MC_EBOX		2
#define MC_IBOX		3
#define MC_MBOX		4
#define MC_TBUF		5
#define MC_MBOX1D	6

/* error bits */
#define MBOX_FE		0x8000		/* Mbox fatal error */
#define FBOX_SERV	0x10000000	/* Fbox service error */
#define IBOX_ERR	0x2000		/* Ibox error */
#define EBOX_ERR	0x1e00		/* Ebox error */
#define MBOX_1D		0x81d0000	/* Mbox 1D error */
#define EDP_PE		0x200

struct mc8600frame {
	int	mc86_bcnt;		/* byte count == 0x58 */
	int	mc86_ehmsts;
	int	mc86_evmqsav;
	int	mc86_ebcs;
	int	mc86_edpsr;
	int	mc86_cslint;
	int	mc86_ibesr;
	int	mc86_ebxwd1;
	int	mc86_ebxwd2;
	int	mc86_ivasav;
	int	mc86_vibasav;
	int	mc86_esasav;
	int	mc86_isasav;
	int	mc86_cpc;
	int	mc86_mstat1;
	int	mc86_mstat2;
	int	mc86_mdecc;
	int	mc86_merg;
	int	mc86_cshctl;
	int	mc86_mear;
	int	mc86_medr;
	int	mc86_accs;
	int	mc86_cses;
	int	mc86_pc;		/* trapped pc */
	int	mc86_psl;		/* trapped psl */
};

/* machine check */
int
ka86_mchk(cmcf)
	caddr_t cmcf;
{
	register struct mc8600frame *mcf = (struct mc8600frame *)cmcf;
	register int type;

	if (mcf->mc86_ebcs & MBOX_FE)
		mcf->mc86_ehmsts |= MC_MBOX;
	else if (mcf->mc86_ehmsts & FBOX_SERV)
		mcf->mc86_ehmsts |= MC_FBOX;
	else if (mcf->mc86_ebcs & EBOX_ERR) {
		if (mcf->mc86_ebcs & EDP_PE)
			mcf->mc86_ehmsts |= MC_MBOX;
		else
			mcf->mc86_ehmsts |= MC_EBOX;
	} else if (mcf->mc86_ehmsts & IBOX_ERR)
		mcf->mc86_ehmsts |= MC_IBOX;
	else if (mcf->mc86_mstat1 & M8600_TB_ERR)
		mcf->mc86_ehmsts |= MC_TBUF;
	else if ((mcf->mc86_cslint & MBOX_1D) == MBOX_1D)
		mcf->mc86_ehmsts |= MC_MBOX1D;

	type = mcf->mc86_ehmsts & 0x7;
	printf("machine check %x: %s\n", type,
	    type < NMC8600 ? mc8600[type] : "???");
	printf("\tehm.sts %x evmqsav %x ebcs %x edpsr %x cslint %x\n",
	    mcf->mc86_ehmsts, mcf->mc86_evmqsav, mcf->mc86_ebcs,
	    mcf->mc86_edpsr, mcf->mc86_cslint);
	printf("\tibesr %x ebxwd %x %x ivasav %x vibasav %x\n",
	    mcf->mc86_ibesr, mcf->mc86_ebxwd1, mcf->mc86_ebxwd2,
	    mcf->mc86_ivasav, mcf->mc86_vibasav);
	printf("\tesasav %x isasav %x cpc %x mstat %x %x mdecc %x\n",
	    mcf->mc86_esasav, mcf->mc86_isasav, mcf->mc86_cpc,
	    mcf->mc86_mstat1, mcf->mc86_mstat2, mcf->mc86_mdecc);
	printf("\tmerg %x cshctl %x mear %x medr %x accs %x cses %x\n",
	    mcf->mc86_merg, mcf->mc86_cshctl, mcf->mc86_mear,
	    mcf->mc86_medr, mcf->mc86_accs, mcf->mc86_cses);
	printf("\tpc %x psl %x\n", mcf->mc86_pc, mcf->mc86_psl);
	mtpr(0, PR_EHSR);
	return (MCHK_PANIC);
}

struct ka86 {
	unsigned snr:12,
		 plant:4,
		 eco:7,
		 v8650:1,
		 type:8;
};

void
ka860_init(self)
	struct device *self;
{
	struct	ka86 *ka86 = (void *)&vax_cpudata;

	/* Enable cache */
	mtpr(3, PR_CSWP);

	printf(": CPU serial number %d(%d), hardware ECO level %d(%d)\n%s: ",
	    ka86->snr, ka86->plant, ka86->eco >> 4, ka86->eco, self->dv_xname);
	if (mfpr(PR_ACCS) & 255) {
		printf("FPA present, type %d, serial number %d, enabling.\n", 
		    mfpr(PR_ACCS) & 255, mfpr(PR_ACCS) >> 16);
		mtpr(0x8000, PR_ACCS);
	} else
		printf("no FPA\n");
	/* enable CRD reports */
	mtpr(mfpr(PR_MERG) & ~M8600_ICRD, PR_MERG);
	crlattach();
}

/*
 * Clear restart flag.
 */
void
ka86_clrf()
{
	/*
	 * We block all interrupts here so that there won't be any
	 * interrupts for an ongoing printout.
	 */
	int s = splhigh(), old = mfpr(PR_TXCS);

#define	WAIT	while ((mfpr(PR_TXCS) & GC_RDY) == 0) ;

	WAIT;

	/* Enable channel to console */
	mtpr(GC_LT|GC_WRT, PR_TXCS);
	WAIT;

	/* clear warm start flag */
	mtpr(GC_CWFL, PR_TXDB);
	WAIT;

	/* clear cold start flag */
	mtpr(GC_CCFL, PR_TXDB);
	WAIT;        

	/* restore old state */
	mtpr(old|GC_WRT, PR_TXCS);
	splx(s);
}

void
ka86_reboot(howto)
	int howto;
{
	WAIT;

	/* Enable channel to console */ 
	mtpr(GC_LT|GC_WRT, PR_TXCS);
	WAIT;   

	mtpr(GC_BTFL, PR_TXDB);
	WAIT;

	asm("halt");
}

static	int abus_print(void *, const char *);
static  int abus_match(struct device *, struct cfdata *, void *);
static  void abus_attach(struct device *, struct device *, void *);

struct  cfattach abus_ca = {
        sizeof(struct device), abus_match, abus_attach
};

/*
 * Abus is the master bus on VAX 8600.
 */
int
abus_match(parent, cf, aux)
        struct device *parent;
        struct cfdata *cf;
        void *aux;
{
	struct mainbus_attach_args *maa = aux;

	if (maa->maa_bustype == VAX_ABUS)
                return 1;
        return 0;
}

void
abus_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
{
        volatile int tmp;
        volatile struct sbia_regs *sbiar;
        struct ioa *ioa;
        int     type, i;
	struct bp_conf bp;

	/*
	 * Init CPU.
	 */
	ka860_init(self);

        for (i = 0; i < MAXNIOA; i++) {
                ioa = (struct ioa *)vax_map_physmem((paddr_t)IOA8600(0),
                    (IOAMAPSIZ / VAX_NBPG));
                if (badaddr((caddr_t)ioa, 4)) {
                        vax_unmap_physmem((vaddr_t)ioa, (IOAMAPSIZ / VAX_NBPG));
                        continue;
                }
                tmp = ioa->ioacsr.ioa_csr;
                type = tmp & IOA_TYPMSK;

                switch (type) {
        
                case IOA_SBIA:
                        bp.type = "sbi";
                        bp.num = i;
                        config_found(self, &bp, abus_print);
                        sbiar = (void *)ioa;
                        sbiar->sbi_errsum = -1;
                        sbiar->sbi_error = 0x1000;
                        sbiar->sbi_fltsts = 0xc0000;
                        break;

                default:
                        printf("IOAdapter %x unsupported\n", type);
                        break;
                }
                vax_unmap_physmem((vaddr_t)ioa, (IOAMAPSIZ / VAX_NBPG));
        }
}

int
abus_print(aux, hej)
        void *aux;
        const char *hej;
{
        struct bp_conf *bp = aux;
        if (hej)
                printf("%s at %s", bp->type, hej);
        return (UNCONF);
}
@


1.10
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.9 2006/07/20 19:08:15 miod Exp $	*/
@


1.9
log
@Kill an autoconf abuse introduced with Cheetah support, and pass real
attachment information to mainbus children. Makes it much cleaner to
attach both ibus and vsbus on those machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.8 2003/06/02 23:27:59 millert Exp $	*/
d72 2
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.7 2002/03/14 03:16:02 millert Exp $	*/
d353 3
a355 1
        if (vax_bustype == VAX_ABUS)
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.6 2002/03/14 01:26:48 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.5 2000/04/27 01:10:13 bjc Exp $	*/
d342 1
a342 1
static  void abus_attach(struct device *, struct device *, void*);
@


1.5
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.4 1997/09/10 12:04:49 maja Exp $	*/
d56 5
a60 5
static	void	ka86_memerr __P((void));
static	int	ka86_mchk __P((caddr_t));
static	void	ka86_reboot __P((int));
static	void	ka86_clrf __P((void));
static	void	ka860_init __P((struct device *));
d62 1
a62 1
void	crlattach __P((void));
d340 3
a342 3
static	int abus_print __P((void *, const char *));
static  int abus_match __P((struct device *, struct cfdata *, void *));
static  void abus_attach __P((struct device *, struct device *, void*));
@


1.5.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.5 2000/04/27 01:10:13 bjc Exp $	*/
d56 5
a60 5
static	void	ka86_memerr(void);
static	int	ka86_mchk(caddr_t);
static	void	ka86_reboot(int);
static	void	ka86_clrf(void);
static	void	ka860_init(struct device *);
d62 1
a62 1
void	crlattach(void);
d340 3
a342 3
static	int abus_print(void *, const char *);
static  int abus_match(struct device *, struct cfdata *, void *);
static  void abus_attach(struct device *, struct device *, void *);
@


1.4
log
@Sync with NetBSD 970516. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: ka860.c,v 1.3 1997/05/29 00:05:22 niklas Exp $	*/
/*	$NetBSD: ka860.c,v 1.7 1997/02/19 10:04:20 ragge Exp $	*/
d40 1
a46 3
#include <vm/vm.h>
#include <vm/vm_kern.h>

d54 1
a54 1
struct	ioa *ioa; 
d56 5
a60 5
void	ka86_conf __P((struct device *, struct device *, void *));
void	ka86_memenable __P((struct sbi_attach_args *, struct device *));
void	ka86_memerr __P((void));
int	ka86_mchk __P((caddr_t));
void	ka86_steal_pages __P((void));
d65 1
a65 2
	ka86_steal_pages,
	generic_clock,
d68 1
a68 1
	ka86_conf,
d72 4
a75 4
	0,      /* Used by vaxstation */
	0,      /* Used by vaxstation */
	0,      /* Used by vaxstation */

a126 9
/* enable CRD reports */
void
ka86_memenable(sa, dev)
	struct sbi_attach_args *sa; /* XXX */
	struct device *dev;
{
	mtpr(mfpr(PR_MERG) & ~M8600_ICRD, PR_MERG);
}

a260 29
void
ka86_steal_pages()
{
	extern	vm_offset_t avail_start, virtual_avail;
	extern	struct nexus *nexus;
	int	junk;
 
	/* 8600 may have 2 SBI's == 4 pages */
	MAPPHYS(junk, 4, VM_PROT_READ|VM_PROT_WRITE);

	/* Map in ioa register space */
	MAPVIRT(ioa, MAXNIOA);
	pmap_map((vm_offset_t)ioa, (u_int)IOA8600(0),
	    (u_int)IOA8600(0) + IOAMAPSIZ, VM_PROT_READ|VM_PROT_WRITE);
	pmap_map((vm_offset_t)ioa + IOAMAPSIZ, (u_int)IOA8600(1),
	    (u_int)IOA8600(1) + IOAMAPSIZ, VM_PROT_READ|VM_PROT_WRITE);
	pmap_map((vm_offset_t)ioa + 2 * IOAMAPSIZ, (u_int)IOA8600(2),
	    (u_int)IOA8600(2) + IOAMAPSIZ, VM_PROT_READ|VM_PROT_WRITE);
	pmap_map((vm_offset_t)ioa + 3 * IOAMAPSIZ, (u_int)IOA8600(3),
	    (u_int)IOA8600(3) + IOAMAPSIZ, VM_PROT_READ|VM_PROT_WRITE);

	/* Map in possible nexus space */
	MAPVIRT(nexus, btoc(NEXSIZE * MAXNNEXUS));
	pmap_map((vm_offset_t)nexus, (u_int)NEXA8600,
	    (u_int)NEXA8600 + NNEX8600 * NEXSIZE, VM_PROT_READ|VM_PROT_WRITE);
	pmap_map((vm_offset_t)&nexus[NNEXSBI], (u_int)NEXB8600,
	    (u_int)NEXB8600 + NNEX8600 * NEXSIZE, VM_PROT_READ|VM_PROT_WRITE);
}

d270 2
a271 3
ka86_conf(parent, self, aux)
	struct	device *parent, *self;
	void	*aux;
a272 1
	extern	char cpu_model[];
d278 2
a279 6
	strcpy(cpu_model,"VAX 8600");
	if (ka86->v8650)
		cpu_model[5] = '5';
	printf(": %s, serial number %d(%d), hardware ECO level %d(%d)\n",
	    &cpu_model[4], ka86->snr, ka86->plant, ka86->eco >> 4, ka86->eco);
	printf("%s: ", self->dv_xname);
d286 2
d289 128
@


1.4.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: ka860.c,v 1.5 2000/04/27 01:10:13 bjc Exp $	*/
/*	$NetBSD: ka860.c,v 1.15 1999/08/07 10:36:49 ragge Exp $	*/
a39 1
 * Also contains abus spec's and memory init routines.
d46 3
d56 1
a56 1
#include <vax/vax/gencons.h>
d58 5
a62 5
static	void	ka86_memerr __P((void));
static	int	ka86_mchk __P((caddr_t));
static	void	ka86_reboot __P((int));
static	void	ka86_clrf __P((void));
static	void	ka860_init __P((struct device *));
d67 2
a68 1
	0,
d71 1
a71 1
	0,
d75 4
a78 4
	10,	/* SCB pages */
	0,	/* Halt call, nothing special */
	ka86_reboot,
	ka86_clrf,
d130 9
d273 29
d311 3
a313 2
ka860_init(self)
	struct device *self;
d315 1
d321 6
a326 2
	printf(": CPU serial number %d(%d), hardware ECO level %d(%d)\n%s: ",
	    ka86->snr, ka86->plant, ka86->eco >> 4, ka86->eco, self->dv_xname);
a332 2
	/* enable CRD reports */
	mtpr(mfpr(PR_MERG) & ~M8600_ICRD, PR_MERG);
a333 128
}

/*
 * Clear restart flag.
 */
void
ka86_clrf()
{
	/*
	 * We block all interrupts here so that there won't be any
	 * interrupts for an ongoing printout.
	 */
	int s = splhigh(), old = mfpr(PR_TXCS);

#define	WAIT	while ((mfpr(PR_TXCS) & GC_RDY) == 0) ;

	WAIT;

	/* Enable channel to console */
	mtpr(GC_LT|GC_WRT, PR_TXCS);
	WAIT;

	/* clear warm start flag */
	mtpr(GC_CWFL, PR_TXDB);
	WAIT;

	/* clear cold start flag */
	mtpr(GC_CCFL, PR_TXDB);
	WAIT;        

	/* restore old state */
	mtpr(old|GC_WRT, PR_TXCS);
	splx(s);
}

void
ka86_reboot(howto)
	int howto;
{
	WAIT;

	/* Enable channel to console */ 
	mtpr(GC_LT|GC_WRT, PR_TXCS);
	WAIT;   

	mtpr(GC_BTFL, PR_TXDB);
	WAIT;

	asm("halt");
}

static	int abus_print __P((void *, const char *));
static  int abus_match __P((struct device *, struct cfdata *, void *));
static  void abus_attach __P((struct device *, struct device *, void*));

struct  cfattach abus_ca = {
        sizeof(struct device), abus_match, abus_attach
};

/*
 * Abus is the master bus on VAX 8600.
 */
int
abus_match(parent, cf, aux)
        struct device *parent;
        struct cfdata *cf;
        void *aux;
{
        if (vax_bustype == VAX_ABUS)
                return 1;
        return 0;
}

void
abus_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
{
        volatile int tmp;
        volatile struct sbia_regs *sbiar;
        struct ioa *ioa;
        int     type, i;
	struct bp_conf bp;

	/*
	 * Init CPU.
	 */
	ka860_init(self);

        for (i = 0; i < MAXNIOA; i++) {
                ioa = (struct ioa *)vax_map_physmem((paddr_t)IOA8600(0),
                    (IOAMAPSIZ / VAX_NBPG));
                if (badaddr((caddr_t)ioa, 4)) {
                        vax_unmap_physmem((vaddr_t)ioa, (IOAMAPSIZ / VAX_NBPG));
                        continue;
                }
                tmp = ioa->ioacsr.ioa_csr;
                type = tmp & IOA_TYPMSK;

                switch (type) {
        
                case IOA_SBIA:
                        bp.type = "sbi";
                        bp.num = i;
                        config_found(self, &bp, abus_print);
                        sbiar = (void *)ioa;
                        sbiar->sbi_errsum = -1;
                        sbiar->sbi_error = 0x1000;
                        sbiar->sbi_fltsts = 0xc0000;
                        break;

                default:
                        printf("IOAdapter %x unsupported\n", type);
                        break;
                }
                vax_unmap_physmem((vaddr_t)ioa, (IOAMAPSIZ / VAX_NBPG));
        }
}

int
abus_print(aux, hej)
        void *aux;
        const char *hej;
{
        struct bp_conf *bp = aux;
        if (hej)
                printf("%s at %s", bp->type, hej);
        return (UNCONF);
@


1.4.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 5
a60 5
static	void	ka86_memerr(void);
static	int	ka86_mchk(caddr_t);
static	void	ka86_reboot(int);
static	void	ka86_clrf(void);
static	void	ka860_init(struct device *);
d62 1
a62 1
void	crlattach(void);
d340 3
a342 3
static	int abus_print(void *, const char *);
static  int abus_match(struct device *, struct cfdata *, void *);
static  void abus_attach(struct device *, struct device *, void *);
@


1.4.12.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka860.c,v 1.4.12.2 2002/03/28 11:26:46 niklas Exp $	*/
d15 5
a19 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: ka860.c,v 1.6 1996/10/13 03:35:53 christos Exp $	*/
/*	$NetBSD: ka860.c,v 1.6 1996/10/13 03:35:53 christos Exp $	*/
d50 1
a57 1
/* XXX These are in autoconf.c also */
d65 15
@


1.2
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.1
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: ka860.c,v 1.3 1996/04/08 18:32:45 ragge Exp $	*/
d52 1
a57 1
int	ka86_clock __P((void));
d61 1
a61 1
void    ka86_steal_pages __P((void));
d68 1
a68 1
#define	M8600_ICRD	0x400		/* inhibit crd interrupts */
d74 1
a74 1
#define	M8600_ADDR_PE	0x080000	/* address parity error */
d76 2
a77 2
#define	M8600_SNG_ERR	0x200000	/* data single bit error */
#define	M8600_BDT_ERR	0x400000	/* bad data error */
d91 1
a91 1
#define	SPAD_MSTAT1	0x25		/* scratch pad mstat1 register	*/
d127 1
a127 1
	register int reg11 = 0;	/* known to be r11 below */
d164 1
a164 1
#define NMC8600	7
d170 6
a175 6
#define	MC_FBOX		1
#define	MC_EBOX		2
#define	MC_IBOX		3
#define	MC_MBOX		4
#define	MC_TBUF		5
#define	MC_MBOX1D	6
d178 5
a182 5
#define	MBOX_FE		0x8000		/* Mbox fatal error */
#define	FBOX_SERV	0x10000000	/* Fbox service error */
#define	IBOX_ERR	0x2000		/* Ibox error */
#define	EBOX_ERR	0x1e00		/* Ebox error */
#define	MBOX_1D		0x81d0000	/* Mbox 1D error */
d260 3
a262 3
	extern  vm_offset_t avail_start, virtual_avail;
	extern  struct nexus *nexus;
	int     junk;
d296 2
a297 2
	struct  device *parent, *self;
	void    *aux;
d299 2
a300 2
	extern  char cpu_model[];
	struct  ka86 *ka86 = (void *)&cpu_type;
a318 9

int   
ka86_clock()
{
	mtpr(-10000, PR_NICR); /* Load in count register */
	mtpr(0x800000d1, PR_ICCS); /* Start clock and enable interrupt */
	return 0; 
}

@
