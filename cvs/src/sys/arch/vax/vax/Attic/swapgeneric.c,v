head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.8
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2003.05.23.22.27.43;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.29.18.40.33;	author miod;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2001.04.09.00.59.31;	author hugh;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.27.01.10.13;	author bjc;	state Exp;
branches;
next	1.6;

1.6
date	98.05.11.21.35.31;	author niklas;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	97.05.29.00.05.25;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.25.23;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.09.10.25;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.01.31.05.26.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.11;	author deraadt;	state Exp;
branches;
next	;

1.6.8.1
date	2001.05.14.21.39.11;	author niklas;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.6.8.3;

1.6.8.3
date	2002.03.28.11.26.47;	author niklas;	state Exp;
branches;
next	1.6.8.4;

1.6.8.4
date	2003.06.07.11.14.48;	author ho;	state dead;
branches;
next	;

1.9.4.1
date	2002.06.11.03.39.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove old swapgeneric.c's
@
text
@/*	$OpenBSD: swapgeneric.c,v 1.10 2002/03/14 01:26:49 millert Exp $	*/
/*	$NetBSD: swapgeneric.c,v 1.13 1996/10/13 03:36:01 christos Exp $	*/

/*-
 * Copyright (c) 1982, 1986 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)swapgeneric.c	7.11 (Berkeley) 5/9/91
 */

/*
 * fake swapgeneric.c -- should do this differently.
 */

#include <sys/param.h>
#include <sys/conf.h>

int (*mountroot)(void) = NULL;

dev_t	rootdev = NODEV;
dev_t	dumpdev = NODEV;

struct	swdevt swdevt[] = {
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
};
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.9 2001/09/29 18:40:33 miod Exp $	*/
@


1.9
log
@The "swap generic" configuration needs only two entries in swdevt[].
So shrink it when necessary, and remove unwanted stuff as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.8 2001/04/09 00:59:31 hugh Exp $	*/
d46 1
a46 1
int (*mountroot) __P((void)) = NULL;
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.9 2001/09/29 18:40:33 miod Exp $	*/
d46 1
a46 1
int (*mountroot)(void) = NULL;
@


1.8
log
@Amputate some dead and broken code and rework the rest to do the
right thing if booting off something other than sd0a.
RB_ASKNAME will be reimplemented later.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.7 2000/04/27 01:10:13 bjc Exp $	*/
d39 4
a44 16
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/reboot.h>
#include <sys/device.h>

#include <dev/cons.h>

#include <machine/pte.h>
#include <machine/mtpr.h>
#include <machine/cpu.h>

#include "hp.h"
#include "ra.h"
#include "hdc.h"
#include "sd.h"
#include "st.h"
d46 1
a46 1
void	gets __P((char *));
a47 3
/*
 * Generic configuration;  all in one
 */
a48 1
dev_t	argdev = NODEV;
d50 1
a50 1
int	nswap;
d52 2
a53 36
	{ -1,	1,	0 },
	{ -1,	1,	0 },
	{ -1,	1,	0 },
	{ 0,	0,	0 },
};
long	dumplo;
int	dmmin, dmmax, dmtext;

int (*mountroot) __P((void)) = NULL;

extern	struct cfdriver hp_cd;
extern	struct cfdriver ra_cd;
extern	struct cfdriver hd_cd;
extern	struct cfdriver sd_cd;
extern	struct cfdriver st_cd;

struct	ngcconf {
	struct	cfdriver *ng_cf;
	dev_t	ng_root;
} ngcconf[] = {
#if NHP > 0
	{ &hp_cd,	makedev(0, 0), },
#endif
#if NRA > 0
	{ &ra_cd,	makedev(9, 0), },
#endif
#if NHDC > 0
	{ &hd_cd,	makedev(19, 0), },
#endif
#if NSD > 0
	{ &sd_cd,	makedev(20, 0), },
#endif
#if NST > 0
	{ &st_cd,	makedev(21, 0), },
#endif
	{ 0 },
@


1.7
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.6 1998/05/11 21:35:31 niklas Exp $	*/
a104 95

void
setconf()
{
	struct	ngcconf *nc;
	register char *cp, *gp;
	int unit, swaponroot = 0, i;
	char name[128];

	if (rootdev != NODEV)
		goto doswap;
	unit = 0;
	/*
	 * First try new config devices.
	 */
	if (boothowto & RB_ASKNAME) {
nretry:
		swaponroot = 0;
		printf("root device? ");
		gets(name);
		if (name[strlen(name) - 1] == '*')
			name[strlen(name) - 1] = swaponroot++;
		for (nc = ngcconf; nc->ng_cf; nc++)
			for (i = 0; i < nc->ng_cf->cd_ndevs; i++)
				if (nc->ng_cf->cd_devs[i] &&
				    strcmp(name, ((struct device *)
				    (nc->ng_cf->cd_devs[i]))->dv_xname) == 0)
					goto ngotit;

		printf("Use one of ");
		for (nc = ngcconf; nc->ng_cf; nc++)
			printf("%s%%d ", nc->ng_cf->cd_name);
		printf("\n");

		goto nretry;
ngotit:
		rootdev = makedev(major(nc->ng_root), i * 8);
		goto doswap;

	} else {
		for (nc = ngcconf; nc->ng_cf; nc++)
			for (i = 0; i < nc->ng_cf->cd_ndevs; i++)
				if (nc->ng_cf->cd_devs[i]) {
					printf("root on %s%d\n",
					    nc->ng_cf->cd_name, i);
					rootdev = makedev(major(nc->ng_root),
					    i * 8);
					goto doswap;
				}

	}

	printf("no suitable root\n");
	asm("halt");

doswap:
	swdevt[0].sw_dev = argdev = dumpdev =
	    makedev(major(rootdev), minor(rootdev)+1);
	/* swap size and dumplo set during autoconfigure */
	if (swaponroot)
		rootdev = dumpdev;
}

void
gets(cp)
	char *cp;
{
	register char *lp;
	register c;

	lp = cp;
	for (;;) {
		cnputc(c = (cngetc()&0x7f));
		switch (c) {
		case '\n':
		case '\r':
			*lp++ = '\0';
			return;
		case '\b':
		case '#':
		case '\177':
			lp--;
			if (lp < cp)
				lp = cp;
			continue;
		case '@@':
		case 'u'&037:
			lp = cp;
			cnputc('\n');
			continue;
		default:
			*lp++ = c;
		}
	}
}
@


1.6
log
@s/ffs_mountroot/dk_mountroot/, name RD disks "hd" to not conflict
with the MI ramdisk device
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5 1997/05/29 00:05:25 niklas Exp $	*/
d76 1
a76 1
int (*mountroot) __P((void)) = dk_mountroot;
@


1.6.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.8 2001/04/09 00:59:31 hugh Exp $	*/
d76 1
a76 1
int (*mountroot) __P((void)) = NULL;
d105 95
@


1.6.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.6.8.1 2001/05/14 21:39:11 niklas Exp $	*/
a38 4
/*
 * fake swapgeneric.c -- should do this differently.
 */

d41 16
d58 1
a58 1
int (*mountroot) __P((void)) = NULL;
d60 3
d64 1
d66 9
d76 28
a103 3
struct	swdevt swdevt[] = {
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
@


1.6.8.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
int (*mountroot)(void) = NULL;
@


1.6.8.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.6.8.3 2002/03/28 11:26:47 niklas Exp $	*/
@


1.5
log
@RCS tagging
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.13 1996/10/13 03:36:01 christos Exp $	*/
a47 2
#include <ufs/ffs/ffs_extern.h>

d76 1
a76 1
int (*mountroot) __P((void)) = ffs_mountroot;
d80 1
a80 1
extern	struct cfdriver rd_cd;
d95 1
a95 1
	{ &rd_cd,	makedev(19, 0), },
@


1.4
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.3
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.9 1996/04/08 18:32:57 ragge Exp $	*/
a37 3
#include "uda.h"
#include "hp.h"

d53 5
a57 3
#include <vax/uba/ubareg.h>
#include <vax/uba/ubavar.h>

a78 7
extern	struct uba_driver scdriver;
extern	struct uba_driver hkdriver;
extern	struct uba_driver idcdriver;
extern	struct uba_driver hldriver;
extern	struct uba_driver udadriver;
extern	struct uba_driver kdbdriver;

d80 4
d92 11
a102 12
	{ 0 },
};

struct	genericconf {
	caddr_t	gc_driver;
	char	*gc_name;
	dev_t	gc_root;
} genericconf[] = {
/*	{ (caddr_t)&hp_cd,	"hp",	makedev(0, 0),	},
	{ (caddr_t)&scdriver,	"up",	makedev(2, 0),	}, */
#if NUDA > 0
	{ (caddr_t)&udadriver,	"ra",	makedev(9, 0),	},
a103 5
/*	{ (caddr_t)&idcdriver,	"rb",	makedev(11, 0),	},
	{ (caddr_t)&hldriver,	"rl",	makedev(14, 0),	},
	{ (caddr_t)&hkdriver,	"hk",	makedev(3, 0),	},
	{ (caddr_t)&hkdriver,	"rk",	makedev(3, 0),	},
	{ (caddr_t)&kdbdriver,	"kra",	makedev(16, 0), }, */
a109 4
#if NUDA > 0
	register struct uba_device *ui;
#endif
	register struct genericconf *gc;
d134 1
a134 1
#ifdef notyet
d139 2
a140 2
#endif
		goto gc2;
a157 38
	if (boothowto & RB_ASKNAME) {
retry:
		printf("root device? ");
		gets(name);
gc2:
		for (gc = genericconf; gc->gc_driver; gc++)
		    for (cp = name, gp = gc->gc_name; *cp == *gp; cp++)
			if (*++gp == 0)
				goto gotit;
		printf(
		  "use hp%%d, up%%d, ra%%d, rb%%d, rl%%d, hk%%d or kra%%d\n");
		goto nretry;
gotit:
		if (*++cp < '0' || *cp > '9') {
			printf("bad/missing unit number\n");
			goto retry;
		}
		while (*cp >= '0' && *cp <= '9')
			unit = 10 * unit + *cp++ - '0';
		if (*cp == '*')
			swaponroot++;
		goto found;
	}
	for (gc = genericconf; gc->gc_driver; gc++) {
#if NUDA > 0
		for (ui = ubdinit; ui->ui_driver; ui++) {
			if (ui->ui_alive == 0)
				continue;
			if (ui->ui_unit == unit && ui->ui_driver ==
			    (struct uba_driver *)gc->gc_driver) {
				printf("root on %s%d\n",
				    ui->ui_driver->ud_dname, unit);
				goto found;
			}
		}
#endif
	}

a160 3
found:
	gc->gc_root = makedev(major(gc->gc_root), unit*8);
	rootdev = gc->gc_root;
@


1.2
log
@from ragge;
Make use of the new disk struct when attaching disks.
Don't rely on UBA's; we do not always want them.
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.6 1996/01/28 12:09:37 ragge Exp $	*/
d41 6
a46 6
#include "sys/param.h"
#include "sys/conf.h"
#include "sys/buf.h"
#include "sys/systm.h"
#include "sys/reboot.h"
#include "sys/device.h"
d48 1
a48 2
#include "machine/pte.h"
#include "machine/mtpr.h"
d50 11
a60 2
#include "../uba/ubareg.h"
#include "../uba/ubavar.h"
d78 1
a78 2
extern int ffs_mountroot();
int (*mountroot)() = ffs_mountroot;
d87 1
a87 1
extern	struct cfdriver hpcd;
d94 1
a94 1
	{ &hpcd,	makedev(0, 0), },
d104 1
a104 1
/*	{ (caddr_t)&hpcd,	"hp",	makedev(0, 0),	},
d117 1
d224 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: swapgeneric.c,v 1.5 1995/03/30 21:25:41 ragge Exp $	*/
a37 1
#include "mba.h"
d39 1
a39 1

d46 1
d50 1
a50 4
#if NMBA > 0
#include "../mba/mbareg.h"
#include "../mba/mbavar.h"
#endif
a72 1
extern	struct mba_driver hpdriver;
d80 12
d97 1
a97 1
/*	{ (caddr_t)&hpdriver,	"hp",	makedev(0, 0),	},
a111 3
#if NMBA > 0
	register struct mba_device *mi;
#endif
d116 1
d118 2
a119 1
	int unit, swaponroot = 0;
d124 40
a164 1
		char name[128];
d168 1
d175 1
a175 1
		goto retry;
a187 12
#if NMBA > 0
		for (mi = mbdinit; mi->mi_driver; mi++) {
			if (mi->mi_alive == 0)
				continue;
			if (mi->mi_unit == unit && mi->mi_driver ==
			    (struct mba_driver *)gc->gc_driver) {
				printf("root on %s%d\n",
				    mi->mi_driver->md_dname, unit);
				goto found;
			}
		}
#endif
a213 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
