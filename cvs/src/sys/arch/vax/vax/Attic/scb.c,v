head	1.8;
access;
symbols
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.16
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.7;
commitid	OSDG2O3Cgeifnf1W;

1.7
date	2012.11.25.22.13.46;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.18.23.19.29;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.07.23.10.46;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.06.25.00.43.19;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.01.10.10;	author bjc;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.21.39.10;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2001.07.04.10.24.44;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.1.8.4;

1.1.8.4
date	2002.03.28.11.26.47;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.39.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: scb.c,v 1.7 2012/11/25 22:13:46 jsg Exp $	*/
/*	$NetBSD: scb.c,v 1.12 2000/06/04 06:16:59 matt Exp $ */
/*
 * Copyright (c) 1999 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Routines for dynamic allocation/release of SCB vectors.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>

#include <machine/trap.h>
#include <machine/scb.h>
#include <machine/frame.h>
#include <machine/cpu.h>
#include <machine/sid.h>
#include <machine/mtpr.h>

struct scb *scb;
struct ivec_dsp *scb_vec;

static	volatile int vector, ipl, gotintr;

/*
 * Generates a new SCB.
 */
paddr_t
scb_init(paddr_t avail_start)
{
	struct	ivec_dsp **ivec = (struct ivec_dsp **)avail_start;
	struct	ivec_dsp **old = (struct ivec_dsp **)KERNBASE;
	vaddr_t	vavail = avail_start + KERNBASE;
	int	scb_size = dep_call->cpu_scbsz;
	int	i;

	scb = (struct scb *)vavail;
	scb_vec = (struct ivec_dsp *)(vavail + (scb_size * VAX_NBPG));

	/* Init the whole SCB with interrupt catchers */
	for (i = 0; i < (scb_size * VAX_NBPG)/4; i++) {
		ivec[i] = (struct ivec_dsp *)
		    ((vaddr_t)&scb_vec[i] | SCB_ISTACK); /* On istack, please */
		scb_vec[i] = idsptch;
		scb_vec[i].hoppaddr = scb_stray;
		scb_vec[i].pushlarg = (void *) (i * 4);
		scb_vec[i].ev = NULL;
	}
	/*
	 * Copy all pre-set interrupt vectors to the new SCB.
	 * It is known that these vectors is at KERNBASE from the
	 * beginning, and that if the vector is zero it should call
	 * stray instead.
	 */
	for (i = 0; i < 64; i++)
		if (old[i])
			ivec[i] = old[i];

	/* Last action: set the SCB */
	mtpr(avail_start, PR_SCBB);

	/* Return new avail_start. Also save space for the dispatchers. */
	return avail_start + (1 + sizeof(struct ivec_dsp) / sizeof(void *))
	    * scb_size * VAX_NBPG;
};

/*
 * Stray interrupt handler.
 * This function must _not_ save any registers (in the reg save mask).
 */
void
scb_stray(void *arg)
{
	gotintr = 1;
	vector = ((int) arg) & ~3;
	ipl = mfpr(PR_IPL);

	if (cold == 0)
		printf("stray interrupt: vector %d, ipl %d\n", vector, ipl);
	else {
		struct icallsframe *icf = (void *) __builtin_frame_address(0);

		icf->ica_psl = (icf->ica_psl & ~PSL_IPL) | ipl << 16;
	}

	mtpr(ipl + 1, PR_IPL);
}

/*
 * Fake interrupt handler, to fool some bus' autodetect system.
 * (May I say DW780? :-)
 */
void
scb_fake(vec, br)
	int vec, br;
{
	vector = vec;
	ipl = br;
	gotintr = 1;
}

/*
 * Returns last vector/ipl referenced. Clears vector/ipl after reading.
 */
int
scb_vecref(rvec, ripl)
	int *rvec, *ripl;
{
	int save;

	if (rvec)
		*rvec = vector;
	if (ripl)
		*ripl = ipl;
	save = gotintr;
	gotintr = vector = ipl = 0;
	mtpr(0, PR_IPL);
	return save;
}

/*
 * Sets a vector to the specified function.
 * Arg may not be greater than 63.
 */

void
scb_vecalloc(vecno, func, arg, stack, ev)
	int vecno;
	void (*func)(void *);
	void *arg;
	int stack;
	struct evcount *ev;
{
	struct ivec_dsp *dsp = &scb_vec[vecno / 4];
	dsp->hoppaddr = func;
	dsp->pushlarg = arg;
	dsp->ev = ev;
	((u_int *) scb)[vecno/4] = (u_int)(dsp) | stack;
}
@


1.7
log
@remove the use of cast as lvalue which is verboten with newer gcc
tweaks from/tested by/ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.6 2008/08/18 23:19:29 miod Exp $	*/
@


1.6
log
@Add support for the ``Firefox'' VAXstation 3520/3540/3820/3840 workstations,
currently limited to serial console and a single processor working.

All ``on-board'' devices, including the Q-bus adapter, but except for
the frame buffer, are supported. The machine will boot over the network
or from SCSI devices.

Lots of thanks to Al Kossow for www.bitsavers.org, on which I found the
technical documentation allowing me to complete this port (which was
lacking at the time I got that machine...).
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.5 2004/07/07 23:10:46 deraadt Exp $	*/
d71 2
a72 2
		ivec[i] = &scb_vec[i];
		(int)ivec[i] |= SCB_ISTACK; /* On istack, please */
@


1.5
log
@new-style interrupt counters.  based on initial work by hugh.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.4 2002/03/14 01:26:49 millert Exp $	*/
a51 1
static	void scb_stray(void *);
d72 1
a72 1
		(int)ivec[i] |= 1; /* On istack, please */
d87 1
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.3 2001/08/25 13:33:37 hugh Exp $	*/
d108 1
a108 1
		printf("stray interrupt: vector 0x%x, ipl %d\n", vector, ipl);
d161 1
a161 1
	struct evcnt *ev;
@


1.3
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.2 2001/06/25 00:43:19 mickey Exp $	*/
d52 1
a52 1
static	void scb_stray __P((void *));
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.3 2001/08/25 13:33:37 hugh Exp $	*/
d52 1
a52 1
static	void scb_stray(void *);
@


1.2
log
@cold is in systm now
@
text
@d1 2
a2 2
/*	$OpenBSD: scb.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
/*	$NetBSD: scb.c,v 1.9 2000/01/24 02:40:34 matt Exp $ */
d40 1
d49 3
d53 1
a54 2
static	struct ivec_dsp *scb_vec;
static	volatile int vector, ipl, gotintr;
d59 1
a59 2
scb_init(avail_start)
	paddr_t avail_start;
d77 1
d92 2
a93 1
	return avail_start + (scb_size * 5) * VAX_NBPG;
d101 1
a101 2
scb_stray(arg)
	void *arg;
a102 3
	struct	callsframe *cf = FRAMEOFFSET(arg);
	int *a = &cf->ca_arg1;

d106 1
d109 5
a113 2
	else
		a[8] = (a[8] & 0xffe0ffff) | ipl << 16;
d154 1
d156 1
a156 1
scb_vecalloc(vecno, func, arg, stack)
d158 1
a158 1
	void (*func) __P((void *));
d161 1
a163 1
	u_int *iscb = (u_int *)scb; /* XXX */
d166 2
a167 1
	iscb[vecno/4] = (u_int)(dsp) | stack;
@


1.1
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a51 1
extern	int cold;
@


1.1.8.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.1 2000/04/27 01:10:10 bjc Exp $	*/
@


1.1.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: scb.c,v 1.1.8.1 2001/05/14 21:39:10 niklas Exp $	*/
d52 1
@


1.1.8.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD: scb.c,v 1.1.8.2 2001/07/04 10:24:44 niklas Exp $	*/
/*	$NetBSD: scb.c,v 1.12 2000/06/04 06:16:59 matt Exp $ */
a39 1
#include <sys/device.h>
d48 1
a48 2
struct scb *scb;
struct ivec_dsp *scb_vec;
d50 1
a50 1
static	void scb_stray __P((void *));
a51 1

d56 2
a57 1
scb_init(paddr_t avail_start)
a74 1
		scb_vec[i].ev = NULL;
d89 1
a89 2
	return avail_start + (1 + sizeof(struct ivec_dsp) / sizeof(void *))
	    * scb_size * VAX_NBPG;
d97 2
a98 1
scb_stray(void *arg)
d100 3
a105 1

d108 2
a109 5
	else {
		struct icallsframe *icf = (void *) __builtin_frame_address(0);

		icf->ica_psl = (icf->ica_psl & ~PSL_IPL) | ipl << 16;
	}
a149 1

d151 1
a151 1
scb_vecalloc(vecno, func, arg, stack, ev)
d153 1
a153 1
	void (*func)(void *);
a155 1
	struct evcnt *ev;
d158 1
d161 1
a161 2
	dsp->ev = ev;
	((u_int *) scb)[vecno/4] = (u_int)(dsp) | stack;
@


1.1.8.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
static	void scb_stray(void *);
@


