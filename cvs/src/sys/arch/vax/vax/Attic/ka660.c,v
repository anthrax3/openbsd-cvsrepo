head	1.9;
access;
symbols
	OPENBSD_5_9:1.8.0.16
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.18
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.10
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.14
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.12
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.8;
commitid	OSDG2O3Cgeifnf1W;

1.8
date	2011.09.15.00.48.24;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.06.20.42.05;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.20.20.58.07;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.18.23.05.38;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.28.06.25.11;	author hugh;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.24.10.31.58;	author hugh;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.05.14.21.39.00;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: ka660.c,v 1.8 2011/09/15 00:48:24 miod Exp $	*/
/*	$NetBSD: ka660.c,v 1.3 2000/06/29 07:14:27 mrg Exp $	*/
/*
 * Copyright (c) 2000 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of 
 *     Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/pte.h>
#include <machine/cpu.h>
#include <machine/mtpr.h>
#include <machine/sid.h>
#include <machine/pmap.h>
#include <machine/uvax.h>
#include <machine/ka410.h>
#include <machine/ka420.h>
#include <machine/clock.h>
#include <machine/vsbus.h>

#define KA660_CCR	37	/* Cache Control Register */
#define KA660_CTAG	0x20150000	/* Cache Tags */
#define KA660_CDATA	0x20150400	/* Cache Data */
#define KA660_BEHR	0x20150800	/* Bank Enable/Hit Register */
#define CCR_WWP 8	/* Write Wrong Parity */
#define CCR_ENA 4	/* Cache Enable */
#define CCR_FLU 2	/* Cache Flush */
#define CCR_DIA 1	/* Diagnostic mode */

static void    ka660_conf(void);
static void    ka660_memerr(void);
static int     ka660_mchk(caddr_t);
static void    ka660_cache_enable(void);

/* 
 * Declaration of 660-specific calls.
 */
struct cpu_dep ka660_calls = {
	ka660_cache_enable,
	ka660_mchk,
	ka660_memerr, 
	ka660_conf,
	generic_clkread,
	generic_clkwrite,
	6,	/* ~VUPS */
	2,	/* SCB pages */
	generic_halt,
	generic_reboot,
	NULL,
	icr_hardclock
};


void
ka660_conf()
{
	printf("cpu0: KA660, microcode Rev. %d\n", vax_cpudata & 0377);

	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);
}

void
ka660_cache_enable()
{
	unsigned int *p;
	int cnt, bnk, behrtmp;

	mtpr(0, KA660_CCR);	/* Disable cache */
	mtpr(CCR_DIA, KA660_CCR);	/* Switch to diag mode */
	bnk = 1;
	behrtmp = 0;
	while(bnk <= 0x80)
	{
		*(int *)KA660_BEHR = bnk;
		p = (int *)KA660_CDATA;
		*p = 0x55aaff00L;
		if(*p == 0x55aaff00L) behrtmp |= bnk;
		*p = 0xffaa0055L;
		if(*p != 0xffaa0055L) behrtmp &= ~bnk;
		cnt = 256;
		while(cnt--) *p++ = 0L;
		p = (int *) KA660_CTAG;
		cnt =128;
		while(cnt--) { *p++ = 0x80000000L; p++; }
		bnk <<= 1;
	}
	*(int *)KA660_BEHR = behrtmp;

	mtpr(CCR_DIA|CCR_FLU, KA660_CCR);	/* Flush tags */
	mtpr(CCR_ENA, KA660_CCR);	/* Enable cache */
}

void
ka660_memerr()
{
	printf("Memory err!\n");
}

int
ka660_mchk(addr)
	caddr_t addr;
{
	panic("Machine check");
	return 0;
}
@


1.8
log
@Switch vax to timecounters. There are three different clock sources:
- ICR/NICR on most systems (1MHz counter resolution).
- diagnostic timer on KA46/KA48 (1kHz counter resolution, counter is actually
  running at around 1024 kHz but is not guaranteed to be monotonic at this
  rate).
- 100Hz clock on VXT (nothing but the 100Hz clock interrupt).

Tested on KA49 (ICR style), KA46, KA48 (diagtmr style), VXT2000+ (VXT
{empty,hopeless}ness'r'us style).
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.7 2011/07/06 20:42:05 miod Exp $	*/
@


1.7
log
@Drop cpu_dep.cpu_subconf routine, which is no longer used after KA820 support
removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.6 2009/06/20 20:58:07 miod Exp $	*/
d82 1
a82 1
	hardclock
@


1.6
log
@Remove unused global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.5 2008/08/18 23:05:38 miod Exp $	*/
a46 1
#include <machine/nexus.h>
a80 1
	NULL,
@


1.5
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.4 2002/09/28 06:25:11 hugh Exp $	*/
a66 2

struct vs_cpu *ka660_cpu;
@


1.4
log
@Add support for OS defined halt action on Pele and Spitfire.
Testing by Brandon Creighton and Jim Uhl.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.3 2001/11/06 19:53:17 miod Exp $	*/
d84 3
@


1.3
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.2 2001/09/11 20:05:25 miod Exp $	*/
a65 2
static void    ka660_halt(void);
static void    ka660_reboot(int);
d82 2
a83 2
	ka660_halt,
	ka660_reboot,
d91 2
a138 13

static void
ka660_halt()
{
	asm("halt");
}

static void
ka660_reboot(int arg)
{
	asm("halt");
}

@


1.3.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.3 2001/11/06 19:53:17 miod Exp $	*/
d66 2
d84 2
a85 2
	generic_halt,
	generic_reboot,
a92 2

	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);
d139 13
@


1.2
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.1 2001/02/24 10:31:58 hugh Exp $	*/
d40 1
a40 1
#include <vm/vm.h>
@


1.1
log
@Support for VAX 4000/{2,4,5}00 from Michael Kukat. untested.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a40 1
#include <vm/vm_kern.h>
@


1.1.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.1 2001/02/24 10:31:58 hugh Exp $	*/
@


1.1.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ka660.c,v 1.1.4.1 2001/05/14 21:39:00 niklas Exp $	*/
d41 1
@


1.1.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
#include <uvm/uvm_extern.h>
@


1.1.4.4
log
@Sync the SMP branch with 3.3
@
text
@d66 2
d84 2
a85 2
	generic_halt,
	generic_reboot,
a92 2

	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);
d139 13
@


