head	1.11;
access;
symbols
	OPENBSD_4_9:1.10.0.16
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.10
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.07.06.18.32.59;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2007.06.06.17.15.13;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.20.23.27.26;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.24.04.53.59;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.23.23.26.55;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.08.08.50.26;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.27.01.10.11;	author bjc;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	97.05.29.00.05.14;	author niklas;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	97.01.15.23.25.07;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.09.10.08;	author mickey;	state Exp;
branches;
next	;

1.3.12.1
date	2001.05.14.21.38.48;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	;

1.4.10.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@/*	$OpenBSD: ctu.c,v 1.10 2007/06/06 17:15:13 deraadt Exp $ */
/*	$NetBSD: ctu.c,v 1.10 2000/03/23 06:46:44 thorpej Exp $ */
/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Device driver for 11/750 Console TU58.
 *
 * Error checking is almost nonexistent, the driver should be
 * fixed to at least calculate checksum on incoming packets.
 * Writing of tapes does not work, by some unknown reason so far.
 * It is almost useless to try to use this driver when running
 * multiuser, because the serial device don't have any buffers 
 * so we will lose interrupts.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/callout.h>
#include <sys/kernel.h>
#include <sys/buf.h>
#include <sys/fcntl.h>
#include <sys/malloc.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/disklabel.h>	/* For disklabel prototype */

#include <machine/mtpr.h>
#include <machine/rsp.h>
#include <machine/scb.h>
#include <machine/trap.h>

enum tu_state {
	SC_UNUSED,
	SC_INIT,
	SC_READY,
	SC_SEND_CMD,
	SC_GET_RESP,
	SC_GET_WCONT,
	SC_GET_END,
	SC_RESTART,
};

struct tu_softc {
	enum	tu_state sc_state;
	int	sc_error;
	char	sc_rsp[15];	/* Should be struct rsb; but don't work */
	u_char	*sc_xfptr;	/* Current char to xfer */
	u_char	*sc_blk;	/* Base of current 128b block */
	int	sc_tpblk;	/* Start block number */
	int	sc_nbytes;	/* Number of bytes to xfer */
	int	sc_xbytes;	/* Number of xfer'd bytes */
	int	sc_bbytes;	/* Number of xfer'd bytes this block */
	int	sc_op;		/* Read/write */
	int	sc_xmtok;	/* set if OK to xmit */
	struct	buf_queue sc_q;	/* pending I/O requests */
} tu_sc;

struct	ivec_dsp tu_recv, tu_xmit;

void	ctutintr(void *);
void	cturintr(void *);
void	ctuattach(void);
void	ctustart(struct buf *);
void	ctuwatch(void *);
short	ctu_cksum(unsigned short *, int);

int	ctuopen(dev_t, int, int, struct proc *);
int	ctuclose(dev_t, int, int, struct proc *);
void	ctustrategy(struct buf *);
int	ctuioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	ctudump(dev_t, daddr64_t, caddr_t, size_t);

static struct callout ctu_watch_ch = CALLOUT_INITIALIZER;

void
ctuattach()
{
	BUFQ_INIT(&tu_sc.sc_q);

	tu_recv = idsptch;
	tu_recv.hoppaddr = cturintr;
	scb->scb_csrint = (void *)&tu_recv;

	tu_xmit = idsptch;
	tu_xmit.hoppaddr = ctutintr;
	scb->scb_cstint = (void *)&tu_xmit;
}

int
ctuopen(dev, oflags, devtype, p)
	dev_t dev;
	int oflags, devtype;
	struct proc *p;
{
	int unit, error;

	unit = minor(dev);

	if (unit)
		return ENXIO;

	if (tu_sc.sc_state != SC_UNUSED)
		return EBUSY;

	tu_sc.sc_error = 0;
	mtpr(0100, PR_CSRS);	/* Enable receive interrupt */
	callout_reset(&ctu_watch_ch, hz, ctuwatch, NULL);

	tu_sc.sc_state = SC_INIT;

	mtpr(RSP_TYP_INIT, PR_CSTD);

        if ((error = tsleep((caddr_t)&tu_sc, (PZERO + 10)|PCATCH,
	    "ctuopen", 0)))
                return (error);

	if (tu_sc.sc_error)
		return tu_sc.sc_error;

	tu_sc.sc_state = SC_READY;
	tu_sc.sc_xmtok = 1;

	mtpr(0100, PR_CSTS);
	return 0;

}

int
ctuclose(dev, oflags, devtype, p)
	dev_t dev;
	int oflags, devtype;
	struct proc *p;
{
	mtpr(0, PR_CSRS);
	mtpr(0, PR_CSTS);
	tu_sc.sc_state = SC_UNUSED;
	callout_stop(&ctu_watch_ch);
	return 0;
}

void
ctustrategy(bp)
	struct buf *bp;
{
	int	s;

#ifdef TUDEBUG
	printf("addr %x, block %x, nblock %x, read %x\n",
		bp->b_data, bp->b_blkno, bp->b_bcount,
		bp->b_flags & B_READ);
#endif

	if (bp->b_blkno >= 512) {
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}
	bp->b_rawblkno = bp->b_blkno;
	s = splbio();
	disksort_blkno(&tu_sc.sc_q, bp); /* Why not use disksort? */
	if (tu_sc.sc_state == SC_READY)
		ctustart(bp);
	splx(s);
}

void
ctustart(bp)
	struct	buf *bp;
{
	struct rsp *rsp = (struct rsp *)tu_sc.sc_rsp;


	tu_sc.sc_xfptr = tu_sc.sc_blk = bp->b_data;
	tu_sc.sc_tpblk = bp->b_blkno;
	tu_sc.sc_nbytes = bp->b_bcount;
	tu_sc.sc_xbytes = tu_sc.sc_bbytes = 0;
	tu_sc.sc_op = bp->b_flags & B_READ ? RSP_OP_READ : RSP_OP_WRITE;

	rsp->rsp_typ = RSP_TYP_COMMAND;
	rsp->rsp_sz = 012;
	rsp->rsp_op = tu_sc.sc_op;
	rsp->rsp_mod = 0;
	rsp->rsp_drv = 0;
	rsp->rsp_sw = rsp->rsp_xx1 = rsp->rsp_xx2 = 0;
	rsp->rsp_cnt = tu_sc.sc_nbytes;
	rsp->rsp_blk = tu_sc.sc_tpblk;
	rsp->rsp_sum = ctu_cksum((unsigned short *)rsp, 6);
	tu_sc.sc_state = SC_SEND_CMD;
	if (tu_sc.sc_xmtok) {
		tu_sc.sc_xmtok = 0;
		ctutintr(NULL);
	}
}

int
ctuioctl(dev, cmd, data, fflag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int fflag;
	struct proc *p;
{
	return 0;
}

/*
 * Not bloody likely... 
 */
int
ctudump(dev, blkno, va, size)
	dev_t dev;
	daddr64_t blkno;
	caddr_t va;
	size_t size;
{
	return 0;
}

void
cturintr(arg)
	void *arg;
{
	int	status = mfpr(PR_CSRD);
	struct	buf *bp;

	bp = BUFQ_FIRST(&tu_sc.sc_q);
	switch (tu_sc.sc_state) {

	case SC_UNUSED:
		printf("stray console storage interrupt, got %o\n", status);
		break;

	case SC_INIT:
		if (status != RSP_TYP_CONTINUE)
			tu_sc.sc_error = EIO;
		wakeup((void *)&tu_sc);
		break;
	case SC_GET_RESP:
		tu_sc.sc_tpblk++;
		if (tu_sc.sc_xbytes == tu_sc.sc_nbytes) {
			tu_sc.sc_bbytes++;
			if (tu_sc.sc_bbytes == 146) { /* We're finished! */
#ifdef TUDEBUG
				printf("Xfer ok\n");
#endif
				BUFQ_REMOVE(&tu_sc.sc_q, bp);
				biodone(bp);
				tu_sc.sc_xmtok = 1;
				tu_sc.sc_state = SC_READY;
				if (BUFQ_FIRST(&tu_sc.sc_q) != NULL)
					ctustart(BUFQ_FIRST(&tu_sc.sc_q));
			}
			break;
		}
		tu_sc.sc_bbytes++;
		if (tu_sc.sc_bbytes <  3) /* Data header */
			break;
		if (tu_sc.sc_bbytes == 132) { /* Finished */
			tu_sc.sc_bbytes = 0;
			break;
		}
		if (tu_sc.sc_bbytes == 131) /* First checksum */
			break;
		tu_sc.sc_xfptr[tu_sc.sc_xbytes++] = status;
		break;

	case SC_GET_WCONT:
		if (status != 020)
			printf("SC_GET_WCONT: status %o\n", status);
		else
			ctutintr(NULL);
		tu_sc.sc_xmtok = 0;
		break;

	case SC_RESTART:
		ctustart(BUFQ_FIRST(&tu_sc.sc_q));
		break;

	default:
		if (status == 4) { /* Protocol error, or something */
			tu_sc.sc_state = SC_RESTART;
			mtpr(RSP_TYP_INIT, PR_CSTD);
			return;
		}
		printf("Unknown receive ctuintr state %d, pack %o\n",
		    tu_sc.sc_state, status);
	}

}

void
ctutintr(arg)
	void *arg;
{
	int	c;

	if (tu_sc.sc_xmtok)
		return;

	switch (tu_sc.sc_state) {
	case SC_SEND_CMD:
		c = tu_sc.sc_rsp[tu_sc.sc_xbytes++] & 0xff;
		mtpr(c, PR_CSTD);
		if (tu_sc.sc_xbytes > 13) {
			tu_sc.sc_state = (tu_sc.sc_op == RSP_OP_READ ?
			    SC_GET_RESP : SC_GET_WCONT);
			tu_sc.sc_xbytes = 0;
			tu_sc.sc_xmtok++;
		}
		break;

	case SC_GET_WCONT:
		switch (tu_sc.sc_bbytes) {
		case 0:
			mtpr(1, PR_CSTD); /* This is a data packet */
			break;

		case 1:
			mtpr(128, PR_CSTD); /* # of bytes to send */
			break;

		case 130:
			mtpr(0, PR_CSTD); /* First checksum */
			break;

		case 131:
			mtpr(0, PR_CSTD); /* Second checksum */
			break;

		case 132: /* Nothing to send... */
			tu_sc.sc_bbytes = -1;
			if (tu_sc.sc_xbytes == tu_sc.sc_nbytes + 1)
				tu_sc.sc_op = SC_GET_END;
			break;
		default:
			c = tu_sc.sc_rsp[tu_sc.sc_xbytes++] & 0xff;
			mtpr(c, PR_CSTD);
			break;
		}
		tu_sc.sc_bbytes++;
		break;

	default:
		printf("Unknown xmit ctuintr state %d\n",tu_sc.sc_state);
	}
}

short
ctu_cksum(buf, words)
	unsigned short *buf;
	int words;
{
	int i, cksum;

	for (i = cksum = 0; i < words; i++)
		cksum += buf[i];

hej:	if (cksum > 65535) {
		cksum = (cksum & 65535) + (cksum >> 16);
		goto hej;
	}
	return cksum;
}

int	oldtp;

/*
 * Watch so that we don't get blocked unnecessary due to lost int's.
 */
void
ctuwatch(arg)
	void *arg;
{

	callout_reset(&ctu_watch_ch, hz, ctuwatch, NULL);

	if (tu_sc.sc_state == SC_GET_RESP && tu_sc.sc_tpblk != 0 &&
	    tu_sc.sc_tpblk == oldtp && (tu_sc.sc_tpblk % 128 != 0)) {
		printf("tu0: lost recv interrupt\n");
		ctustart(BUFQ_FIRST(&tu_sc.sc_q));
		return;
	}
	if (tu_sc.sc_state == SC_RESTART)
		mtpr(RSP_TYP_INIT, PR_CSTS);
	oldtp = tu_sc.sc_tpblk;
}
@


1.10
log
@now that all partition size/offsets are potentially 64-bit, change the
type of all variables to daddr64_t.  this includes the APIs for XXsize()
and XXdump(), all range checks inside bio drivers, internal variables
for disklabel handling, and even uvm's swap offsets.  re-read numerous
times by otto, miod, krw, thib to look for errors
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.9 2006/01/20 23:27:26 miod Exp $ */
@


1.9
log
@b_un.b_addr -> b_data; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.8 2005/11/24 04:53:59 brad Exp $ */
d101 1
a101 1
int	ctudump(dev_t, daddr_t, caddr_t, size_t);
d243 1
a243 1
	daddr_t blkno;
@


1.8
log
@splimp -> splbio

ok martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.7 2005/05/23 23:26:55 tedu Exp $ */
d179 1
a179 1
		bp->b_un.b_addr, bp->b_blkno, bp->b_bcount,
d204 1
a204 1
	tu_sc.sc_xfptr = tu_sc.sc_blk = bp->b_un.b_addr;
@


1.7
log
@loose is not lose. ok deraadt tdeval and a few more typos from jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.6 2002/06/08 08:50:26 art Exp $ */
d190 1
a190 1
	s = splimp();
@


1.6
log
@protect biodone with splbio
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.5 2002/03/14 01:26:48 millert Exp $ */
d42 1
a42 1
 * so we will loose interrupts.
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.4 2000/04/27 01:10:11 bjc Exp $ */
d184 1
d186 1
@


1.4
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.3 1997/05/29 00:05:14 niklas Exp $ */
d90 12
a101 12
void	ctutintr __P((void *));
void	cturintr __P((void *));
void	ctuattach __P((void));
void	ctustart __P((struct buf *));
void	ctuwatch __P((void *));
short	ctu_cksum __P((unsigned short *, int));

int	ctuopen __P((dev_t, int, int, struct proc *));
int	ctuclose __P((dev_t, int, int, struct proc *));
void	ctustrategy __P((struct buf *));
int	ctuioctl __P((dev_t, u_long, caddr_t, int, struct proc *));
int	ctudump __P((dev_t, daddr_t, caddr_t, size_t));
@


1.4.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ctu.c,v 1.4 2000/04/27 01:10:11 bjc Exp $ */
d90 12
a101 12
void	ctutintr(void *);
void	cturintr(void *);
void	ctuattach(void);
void	ctustart(struct buf *);
void	ctuwatch(void *);
short	ctu_cksum(unsigned short *, int);

int	ctuopen(dev_t, int, int, struct proc *);
int	ctuclose(dev_t, int, int, struct proc *);
void	ctustrategy(struct buf *);
int	ctuioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	ctudump(dev_t, daddr_t, caddr_t, size_t);
a183 1
		s = splbio();
a184 1
		splx(s);
@


1.3
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: ctu.c,v 1.5 1996/10/13 03:35:36 christos Exp $ */
/*	$NetBSD: ctu.c,v 1.5 1996/10/13 03:35:36 christos Exp $ */
d47 1
d73 1
a73 1
volatile struct tu_softc {
d85 1
a85 1
	struct	buf sc_q;	/* Current buffer */
d90 2
a91 2
void	ctutintr __P((int));
void	cturintr __P((int));
d103 1
d108 1
a108 1
	extern	struct ivec_dsp idsptch;
d110 2
a111 2
	bcopy(&idsptch, &tu_recv, sizeof(struct ivec_dsp));
	bcopy(&idsptch, &tu_xmit, sizeof(struct ivec_dsp));
d113 3
a116 2
	tu_recv.hoppaddr = cturintr;
	tu_xmit.hoppaddr = ctutintr;
d137 1
a137 1
	timeout(ctuwatch, 0, 100); /* Check once/second */
d167 1
a167 1
	untimeout(ctuwatch, 0);
d184 1
a184 1
		iodone(bp);
d187 1
a187 1
	bp->b_cylinder = bp->b_blkno;
d189 1
a189 1
	disksort((struct buf *)&tu_sc.sc_q, bp); /* Why not use disksort? */
d220 1
a220 1
		ctutintr(0);
d250 1
a250 1
	int arg;
d255 1
a255 1
	bp = tu_sc.sc_q.b_actf;
d275 2
a276 2
				tu_sc.sc_q.b_actf = bp->b_actf;
				iodone(bp);
d279 2
a280 2
				if (tu_sc.sc_q.b_actf)
					ctustart(tu_sc.sc_q.b_actf);
d300 1
a300 1
			ctutintr(0);
d305 1
a305 1
		ctustart(tu_sc.sc_q.b_actf);
d322 1
a322 1
	int arg;
d404 1
a404 1
	timeout(ctuwatch, 0, 1000);
d409 1
a409 1
		ctustart(tu_sc.sc_q.b_actf);
@


1.3.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: ctu.c,v 1.4 2000/04/27 01:10:11 bjc Exp $ */
/*	$NetBSD: ctu.c,v 1.10 2000/03/23 06:46:44 thorpej Exp $ */
a46 1
#include <sys/callout.h>
d72 1
a72 1
struct tu_softc {
d84 1
a84 1
	struct	buf_queue sc_q;	/* pending I/O requests */
d89 2
a90 2
void	ctutintr __P((void *));
void	cturintr __P((void *));
a101 1
static struct callout ctu_watch_ch = CALLOUT_INITIALIZER;
d106 1
a106 1
	BUFQ_INIT(&tu_sc.sc_q);
d108 4
a111 1
	tu_recv = idsptch;
a112 3
	scb->scb_csrint = (void *)&tu_recv;

	tu_xmit = idsptch;
a113 1
	scb->scb_cstint = (void *)&tu_xmit;
d134 1
a134 1
	callout_reset(&ctu_watch_ch, hz, ctuwatch, NULL);
d164 1
a164 1
	callout_stop(&ctu_watch_ch);
d181 1
a181 1
		biodone(bp);
d184 1
a184 1
	bp->b_rawblkno = bp->b_blkno;
d186 1
a186 1
	disksort_blkno(&tu_sc.sc_q, bp); /* Why not use disksort? */
d217 1
a217 1
		ctutintr(NULL);
d247 1
a247 1
	void *arg;
d252 1
a252 1
	bp = BUFQ_FIRST(&tu_sc.sc_q);
d272 2
a273 2
				BUFQ_REMOVE(&tu_sc.sc_q, bp);
				biodone(bp);
d276 2
a277 2
				if (BUFQ_FIRST(&tu_sc.sc_q) != NULL)
					ctustart(BUFQ_FIRST(&tu_sc.sc_q));
d297 1
a297 1
			ctutintr(NULL);
d302 1
a302 1
		ctustart(BUFQ_FIRST(&tu_sc.sc_q));
d319 1
a319 1
	void *arg;
d401 1
a401 1
	callout_reset(&ctu_watch_ch, hz, ctuwatch, NULL);
d406 1
a406 1
		ctustart(BUFQ_FIRST(&tu_sc.sc_q));
@


1.3.12.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d90 12
a101 12
void	ctutintr(void *);
void	cturintr(void *);
void	ctuattach(void);
void	ctustart(struct buf *);
void	ctuwatch(void *);
short	ctu_cksum(unsigned short *, int);

int	ctuopen(dev_t, int, int, struct proc *);
int	ctuclose(dev_t, int, int, struct proc *);
void	ctustrategy(struct buf *);
int	ctuioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	ctudump(dev_t, daddr_t, caddr_t, size_t);
@


1.3.12.3
log
@Sync the SMP branch with 3.3
@
text
@a183 1
		s = splbio();
a184 1
		splx(s);
@


1.2
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.1
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: ctu.c,v 1.3 1996/04/08 18:32:31 ragge Exp $ */
@
