head	1.12;
access;
symbols
	OPENBSD_5_9:1.11.0.10
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2;
locks; strict;
comment	@ * @;


1.12
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.11;
commitid	OSDG2O3Cgeifnf1W;

1.11
date	2013.07.05.21.11.57;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.19.21.53.02;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.15.00.48.24;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.06.20.42.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.18.23.05.38;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.15.22.38.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.21.13.42.43;	author hugh;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.06.25.00.43.19;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.30.17.10.05;	author hugh;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.01.28.01.18.07;	author hugh;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.21.38.59;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.07.04.10.24.37;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: ka53.c,v 1.11 2013/07/05 21:11:57 miod Exp $	*/
/*	$NetBSD: ka53.c,v 1.2 2000/06/04 02:19:27 matt Exp $	*/
/*
 * Copyright (c) 2002 Hugh Graham.
 * Copyright (c) 2000 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of 
 *     Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/kernel.h>

#include <machine/clock.h>
#include <machine/cpu.h>
#include <machine/scb.h>
#include <machine/sid.h>
#include <machine/mtpr.h>

static void    ka53_conf(void);
static void    ka53_memerr(void);
static int     ka53_mchk(caddr_t);
static void    ka53_softmem(void *);
static void    ka53_hardmem(void *);
static void    ka53_init(void);
static void    ka53_cache_enable(void);

/* 
 * Declaration of 680-specific calls.
 */
struct cpu_dep ka53_calls = {
	ka53_init,
	ka53_mchk,
	ka53_memerr, 
	ka53_conf,
	generic_clkread,
	generic_clkwrite,
	32,	 /* ~VUPS */
	2,	/* SCB pages */
	generic_halt,
	generic_reboot,
	NULL,
	icr_hardclock
};

void
ka53_conf()
{
	char *cpuname;

	/* This initialises ISP, avoiding interrupt exceptions  */
	{volatile int *hej = (void *)mfpr(PR_ISP); *hej = *hej; hej[-1] = hej[-1];}

	/* This vector (qbus related?) comes out of nowhere, ignore it for now */
	scb_vecalloc(0x0, (void *)nullop, NULL, SCB_ISTACK, NULL);

	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);

	switch (vax_cpustype) {
	case VAX_STYP_50:
		cpuname = "KA50";
		break;
	case VAX_STYP_51:
		cpuname = "KA51";
		break;
	case VAX_STYP_52:
		cpuname = "KA52";
		break;
	case VAX_STYP_53:
		cpuname = "KA53";
		break;
	default:
		cpuname = "unknown NVAX";
	}
	printf("cpu0: %s, ucode rev %d\n", cpuname, vax_cpudata & 0xff);
}

/*
 * Why may we get memory errors during startup???
 */

void
ka53_hardmem(void *arg)
{
	if (cold == 0)
		printf("Hard memory error\n");
	splhigh();
}

void
ka53_softmem(void *arg)
{
	if (cold == 0)
		printf("Soft memory error\n");
	splhigh();
}


/*
 * KA53-specific IPRs. KA53 has the funny habit to control all caches
 * via IPRs.
 */
#define PR_CCTL	 0xa0
#define CCTL_ENABLE	0x00000001
#define CCTL_SW_ETM	0x40000000
#define CCTL_HW_ETM	0x80000000

#define PR_BCETSTS	0xa3
#define PR_BCEDSTS	0xa6
#define PR_NESTS	0xae

#define PR_VMAR	 0xd0
#define PR_VTAG	 0xd1
#define PR_ICSR	 0xd3
#define ICSR_ENABLE	0x01

#define PR_PCCTL	0xf8
#define PCCTL_P_EN	0x10
#define PCCTL_I_EN	0x02
#define PCCTL_D_EN	0x01

void
ka53_cache_enable()
{
	int start, slut;

	/*
	 * Turn caches off.
	 */
	mtpr(0, PR_ICSR);
	mtpr(0, PR_PCCTL);
	mtpr(mfpr(PR_CCTL) | CCTL_SW_ETM, PR_CCTL);

	/*
	 * Invalidate caches.
	 */
	mtpr(mfpr(PR_CCTL) | 6, PR_CCTL);	/* Set cache size and speed */
	mtpr(mfpr(PR_BCETSTS), PR_BCETSTS);	/* Clear error bits */
	mtpr(mfpr(PR_BCEDSTS), PR_BCEDSTS);	/* Clear error bits */
	mtpr(mfpr(PR_NESTS), PR_NESTS);	 /* Clear error bits */


	start = 0x01400000;
	slut  = 0x01420000;

	/* Flush cache lines */
	for (; start < slut; start += 0x20)
		mtpr(0, start);

	mtpr((mfpr(PR_CCTL) & ~(CCTL_SW_ETM|CCTL_ENABLE)) | CCTL_HW_ETM,
	    PR_CCTL);

	start = 0x01000000;
	slut  = 0x01020000;

	/* clear tag and valid */
	for (; start < slut; start += 0x20)
		mtpr(0, start);

	mtpr(mfpr(PR_CCTL) | 6 | CCTL_ENABLE, PR_CCTL); /* enab. bcache */

	start = 0x01800000;
	slut  = 0x01802000;

	/* Clear primary cache */
	for (; start < slut; start += 0x20)
		mtpr(0, start);

	/* Flush the pipes (via REI) */
	asm("movpsl -(%sp); movab 1f,-(%sp); rei; 1:;");

	/* Enable primary cache */
	mtpr(PCCTL_P_EN|PCCTL_I_EN|PCCTL_D_EN, PR_PCCTL);

	/* Enable the VIC */
	start = 0;
	slut  = 0x800;
	for (; start < slut; start += 0x20) {
		mtpr(start, PR_VMAR);
		mtpr(0, PR_VTAG);
	}
	mtpr(ICSR_ENABLE, PR_ICSR);
}

void
ka53_memerr()
{
	printf("Memory err!\n");
}

int
ka53_mchk(caddr_t addr)
{
	mtpr(0x00, PR_MCESR);
	printf("Machine Check\n");
	return 0;
}

void
ka53_init()
{

	/*
	 * Get the soft and hard memory error vectors now.
	 */

	scb_vecalloc(0x54, ka53_softmem, NULL, 0, NULL);
	scb_vecalloc(0x60, ka53_hardmem, NULL, 0, NULL);


	/* Turn on caches (to speed up execution a bit) */
	ka53_cache_enable();
}
@


1.11
log
@VAX ELF kernel bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.10 2011/09/19 21:53:02 miod Exp $	*/
@


1.10
log
@Try and clean system type constants a bit:
- save the second byte of vax_siedata into a new variable, vax_cpustype,
  and use it instead of (vax_siedata >> 8) & 0xff or other similar
  constructs.
- the VAX_SIE_KAxxx constants are duplicates of the VAX_STYP_xx constants.
  Standardize on the latter and kill the former.
- only keep VAX_VTYP_xx constants for KA46 and KA47, those are the only
  systems which use these constants and are told apart by a different
  SIE byte.

No functional change intended.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.9 2011/09/15 00:48:24 miod Exp $	*/
d196 1
a196 1
	asm("movpsl -(sp); movab 1f,-(sp); rei; 1:;");
@


1.9
log
@Switch vax to timecounters. There are three different clock sources:
- ICR/NICR on most systems (1MHz counter resolution).
- diagnostic timer on KA46/KA48 (1kHz counter resolution, counter is actually
  running at around 1024 kHz but is not guaranteed to be monotonic at this
  rate).
- 100Hz clock on VXT (nothing but the 100Hz clock interrupt).

Tested on KA49 (ICR style), KA46, KA48 (diagtmr style), VXT2000+ (VXT
{empty,hopeless}ness'r'us style).
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.8 2011/07/06 20:42:05 miod Exp $	*/
d85 1
a85 1
	switch((vax_siedata >> 8) & 0xFF) {
@


1.8
log
@Drop cpu_dep.cpu_subconf routine, which is no longer used after KA820 support
removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.7 2008/08/18 23:05:38 miod Exp $	*/
d69 1
a69 1
	hardclock
@


1.7
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.6 2008/08/15 22:38:23 miod Exp $	*/
a67 1
	NULL,
@


1.6
log
@Rename the cpu_dep hook ``steal_pages'' to ``init'', as it serves as an
early initialization routine (to enable caches, etc) while still running
physical, and does not allocate memory anymore.

(The irony in this is that forthcoming KA60 support actually steals pages
 in its init function...)
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.5 2002/09/21 13:42:43 hugh Exp $	*/
d68 3
@


1.5
log
@Add support for OS defined halt action on Cheetah and Omega.
Should also work on Legacy, but tester hasn't reported back yet...
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.4 2001/08/25 13:33:37 hugh Exp $	*/
d51 1
a51 1
static void    ka53_steal_pages(void);
d58 1
a58 1
	ka53_steal_pages,
d224 1
a224 1
ka53_steal_pages()
@


1.4
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.3 2001/06/25 00:43:19 mickey Exp $	*/
d4 1
a48 2
static void    ka53_halt(void);
static void    ka53_reboot(int);
a52 1
static void    ka53_halt(void);
d66 2
a67 2
	ka53_halt,
	ka53_reboot,
a69 1

d81 2
a236 12
}

static void
ka53_halt()
{
	asm("halt");
}

static void
ka53_reboot(int arg)
{
	asm("halt");
@


1.4.4.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.4 2001/08/25 13:33:37 hugh Exp $	*/
a3 1
 * Copyright (c) 2002 Hugh Graham.
d48 2
d54 1
d68 2
a69 2
	generic_halt,
	generic_reboot,
d72 1
a83 2
	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);

d238 12
@


1.3
log
@cold is in systm now
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.2 2001/01/30 17:10:05 hugh Exp $	*/
d82 1
a82 1
	scb_vecalloc(0x0, (void *)nullop, 0, SCB_ISTACK);
d232 2
a233 2
	scb_vecalloc(0x54, ka53_softmem, 0, 0);
	scb_vecalloc(0x60, ka53_hardmem, 0, 0);
@


1.2
log
@Improve printing of various NVAX models. Similar to work by Michael Kukat.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.1 2001/01/28 01:18:07 hugh Exp $	*/
a54 2

extern int cold;		/* cold-start flag */
@


1.2.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.2 2001/01/30 17:10:05 hugh Exp $	*/
@


1.2.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.2.4.1 2001/05/14 21:38:59 niklas Exp $	*/
d55 2
@


1.2.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ka53.c,v 1.2.4.2 2001/07/04 10:24:37 niklas Exp $	*/
d82 1
a82 1
	scb_vecalloc(0x0, (void *)nullop, NULL, SCB_ISTACK, NULL);
d232 2
a233 2
	scb_vecalloc(0x54, ka53_softmem, NULL, 0, NULL);
	scb_vecalloc(0x60, ka53_hardmem, NULL, 0, NULL);
@


1.2.4.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a3 1
 * Copyright (c) 2002 Hugh Graham.
d48 2
d54 1
d68 2
a69 2
	generic_halt,
	generic_reboot,
d72 1
a83 2
	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);

d238 12
@


1.1
log
@CPU specific code for boardtype 1303 (Cheetah) machines.
Mostly borrowed from Cougar, initial work by Michael Kukat.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
a78 1
	printf("cpu0: KA53, ucode rev %d\n", vax_cpudata & 0xff);
d85 18
@

