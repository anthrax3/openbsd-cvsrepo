head	1.17;
access;
symbols
	OPENBSD_5_9:1.16.0.10
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.12
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.10
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.10.0.26
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.24
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.22
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.20
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.18
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.16
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.14
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.12
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.10
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.8
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.6
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.10
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2;
locks; strict;
comment	@ * @;


1.17
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.16;
commitid	OSDG2O3Cgeifnf1W;

1.16
date	2013.07.05.21.11.57;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.19.21.53.02;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.15.00.48.24;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.07.06.20.42.05;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.18.23.05.38;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2008.08.15.22.38.23;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.21.13.42.43;	author hugh;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.21.09.17.14;	author hugh;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.31.11.42.52;	author hugh;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.25.13.33.37;	author hugh;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.06.25.00.43.19;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.01.16.51.40;	author hugh;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.03.16.22.46.26;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.12.11.45.39;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.24.10.31.58;	author hugh;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.21.39.01;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.07.04.10.24.38;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2001.10.31.03.08.01;	author nate;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2002.03.06.02.04.48;	author niklas;	state Exp;
branches;
next	1.4.4.5;

1.4.4.5
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.4.4.6;

1.4.4.6
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.01.31.22.55.27;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2002.10.29.00.28.14;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: ka680.c,v 1.16 2013/07/05 21:11:57 miod Exp $	*/
/*	$NetBSD: ka680.c,v 1.3 2001/01/28 21:01:53 ragge Exp $	*/
/*
 * Copyright (c) 2002 Hugh Graham.
 * Copyright (c) 2000 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *     This product includes software developed at Ludd, University of 
 *     Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Done by Michael Kukat (michael@@unixiron.org) */
/* minor modifications for KA690 cache support by isildur@@vaxpower.org */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <machine/pte.h>
#include <machine/cpu.h>
#include <machine/mtpr.h>
#include <machine/sid.h>
#include <machine/uvax.h>
#include <machine/ka680.h>
#include <machine/clock.h>
#include <machine/scb.h>

static void	ka680_conf(void);
static void	ka680_cache_enable(void);
static void	ka680_softmem(void *);
static void	ka680_hardmem(void *);
static void	ka680_init(void);
static void	ka680_memerr(void);
static int	ka680_mchk(caddr_t);
 
/*
 * KA680-specific IPRs. KA680 has the funny habit to control all caches
 * via IPRs.
 */
#define PR_CCTL	 0xa0
#define CCTL_ENABLE	0x00000001
#define CCTL_SW_ETM	0x40000000
#define CCTL_HW_ETM	0x80000000

#define PR_BCETSTS	0xa3
#define PR_BCEDSTS	0xa6
#define PR_NESTS	0xae

#define PR_VMAR	 0xd0
#define PR_VTAG	 0xd1
#define PR_ICSR	 0xd3
#define ICSR_ENABLE	0x01

#define PR_PCCTL	0xf8
#define PCCTL_P_EN	0x10
#define PCCTL_I_EN	0x02
#define PCCTL_D_EN	0x01

 
/* 
 * Declaration of KA680-specific calls.
 */
struct cpu_dep ka680_calls = {
	ka680_init,
	ka680_mchk,
	ka680_memerr, 
	ka680_conf,
	generic_clkread,
	generic_clkwrite,
	24,	 /* ~VUPS */
	2,	/* SCB pages */
	generic_halt,
	generic_reboot,
	NULL,
	icr_hardclock
};

void
ka680_conf()
{
	char *cpuname;

	/* Don't ask why, but we seem to need this... */

	volatile int *hej = (void *)mfpr(PR_ISP);
	*hej = *hej;
	hej[-1] = hej[-1];

	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);

	switch(vax_boardtype) {
	case VAX_BTYP_1301:
		switch (vax_cpustype) {
		case VAX_STYP_675:
			cpuname = "KA675";
			break;
		case VAX_STYP_680:
			cpuname = "KA680";
			break;
		case VAX_STYP_690:
			cpuname = "KA690";
			break;
		default:
			cpuname = "unknown NVAX 1301";
		}
		break;
	case VAX_BTYP_1305:
		switch (vax_cpustype) {
		case VAX_STYP_681:
			cpuname = "KA681";
			break;
		case VAX_STYP_691:
			cpuname = "KA691";
			break;
		case VAX_STYP_694:
			if (vax_cpudata & 0x1000)
				cpuname = "KA694";
			else
				cpuname = "KA692";
			break;
		default:
			cpuname = "unknown NVAX 1305";
		}
	}
	printf("cpu0: %s, ucode rev %d\n", cpuname, vax_cpudata & 0xff);
}

void
ka680_cache_enable()
{
	int start, pslut, fslut, cslut, havevic;

	/*
	 * Turn caches off.
	 */
	mtpr(0, PR_ICSR);
	mtpr(0, PR_PCCTL);
	mtpr(mfpr(PR_CCTL) | CCTL_SW_ETM, PR_CCTL);

	/*
	 * Invalidate caches.
	 */
	mtpr(mfpr(PR_CCTL) | 6, PR_CCTL);	/* Set cache size and speed */
	mtpr(mfpr(PR_BCETSTS), PR_BCETSTS);	/* Clear error bits */
	mtpr(mfpr(PR_BCEDSTS), PR_BCEDSTS);	/* Clear error bits */
	mtpr(mfpr(PR_NESTS), PR_NESTS);	 /* Clear error bits */

	switch (vax_cpustype) {
	case VAX_STYP_680:
	case VAX_STYP_681:	/* XXX untested */
		fslut = 0x01420000;
		cslut = 0x01020000;
		havevic = 1;
		break;
	case VAX_STYP_690:
		fslut = 0x01440000;
		cslut = 0x01040000;
		havevic = 1;
		break;
	case VAX_STYP_691:	/* XXX untested */
		fslut = 0x01420000;
		cslut = 0x01020000;
		havevic = 1;
		break;
	case VAX_STYP_694:	/* XXX untested */
		fslut = 0x01440000;
		cslut = 0x01040000;
		havevic = 1;
		break;
	case VAX_STYP_675:
	default:		/* unknown cpu; cross fingers */
		fslut = 0x01420000;
		cslut = 0x01020000;
		havevic = 0;
		break;
	}

	start = 0x01400000;

	/* Flush cache lines */
	for (; start < fslut; start += 0x20)
		mtpr(0, start);

	mtpr((mfpr(PR_CCTL) & ~(CCTL_SW_ETM|CCTL_ENABLE)) | CCTL_HW_ETM,
	    PR_CCTL);

	start = 0x01000000;

	/* clear tag and valid */
	for (; start < cslut; start += 0x20)
		mtpr(0, start);

	mtpr(mfpr(PR_CCTL) | 6 | CCTL_ENABLE, PR_CCTL); /* enab. bcache */

	start = 0x01800000;
	pslut = 0x01802000;

	/* Clear primary cache */
	for (; start < pslut; start += 0x20)
		mtpr(0, start);

	/* Flush the pipes (via REI) */
	asm("movpsl -(%sp); movab 1f,-(%sp); rei; 1:;");

	/* Enable primary cache */
	mtpr(PCCTL_P_EN|PCCTL_I_EN|PCCTL_D_EN, PR_PCCTL);

	/* Enable the VIC */
	if (havevic) {
		int slut;

		start = 0;
		slut  = 0x800;
		for (; start < slut; start += 0x20) {
			mtpr(start, PR_VMAR);
			mtpr(0, PR_VTAG);
		}
		mtpr(ICSR_ENABLE, PR_ICSR);
	}
}

/*
 * Why may we get memory errors during startup???
 */

void
ka680_hardmem(void *arg)
{
	if (cold == 0)
		printf("Hard memory error\n");
	splhigh();
}

void
ka680_softmem(void *arg)
{
	if (cold == 0)
		printf("Soft memory error\n");
	splhigh();
}

void
ka680_init()
{
	/*
	 * Get the soft and hard memory error vectors now.
	 */
	scb_vecalloc(0x54, ka680_softmem, NULL, 0, NULL);
	scb_vecalloc(0x60, ka680_hardmem, NULL, 0, NULL);

	/* Turn on caches (to speed up execution a bit) */
	ka680_cache_enable();
}

void
ka680_memerr()
{
	printf("Memory err!\n");
}

int
ka680_mchk(caddr_t addr)
{
	panic("Machine check");
	return 0;
}
@


1.16
log
@VAX ELF kernel bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.15 2011/09/19 21:53:02 miod Exp $	*/
@


1.15
log
@Try and clean system type constants a bit:
- save the second byte of vax_siedata into a new variable, vax_cpustype,
  and use it instead of (vax_siedata >> 8) & 0xff or other similar
  constructs.
- the VAX_SIE_KAxxx constants are duplicates of the VAX_STYP_xx constants.
  Standardize on the latter and kill the former.
- only keep VAX_VTYP_xx constants for KA46 and KA47, those are the only
  systems which use these constants and are told apart by a different
  SIE byte.

No functional change intended.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.14 2011/09/15 00:48:24 miod Exp $	*/
d228 1
a228 1
	asm("movpsl -(sp); movab 1f,-(sp); rei; 1:;");
@


1.14
log
@Switch vax to timecounters. There are three different clock sources:
- ICR/NICR on most systems (1MHz counter resolution).
- diagnostic timer on KA46/KA48 (1kHz counter resolution, counter is actually
  running at around 1024 kHz but is not guaranteed to be monotonic at this
  rate).
- 100Hz clock on VXT (nothing but the 100Hz clock interrupt).

Tested on KA49 (ICR style), KA46, KA48 (diagtmr style), VXT2000+ (VXT
{empty,hopeless}ness'r'us style).
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.13 2011/07/06 20:42:05 miod Exp $	*/
d118 1
a118 1
		switch((vax_siedata & 0xff00) >> 8) {
d133 1
a133 1
		switch((vax_siedata & 0xff00) >> 8) {
d173 1
a173 1
	switch((vax_siedata & 0xff00) >> 8) {
@


1.13
log
@Drop cpu_dep.cpu_subconf routine, which is no longer used after KA820 support
removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.12 2008/08/18 23:05:38 miod Exp $	*/
d100 1
a100 1
	hardclock
@


1.12
log
@Make hardclock() a cpu_dep member. Most machines will use the generic
hardclock() here, except for KA46 which needs to reset the diagnostic
timer.

This gives us working clock interrupt counters for vmstat -i in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.11 2008/08/15 22:38:23 miod Exp $	*/
a47 1
#include <machine/nexus.h>
a98 1
	NULL,
@


1.11
log
@Rename the cpu_dep hook ``steal_pages'' to ``init'', as it serves as an
early initialization routine (to enable caches, etc) while still running
physical, and does not allocate memory anymore.

(The irony in this is that forthcoming KA60 support actually steals pages
 in its init function...)
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.10 2002/09/21 13:42:43 hugh Exp $	*/
d100 3
@


1.10
log
@Add support for OS defined halt action on Cheetah and Omega.
Should also work on Legacy, but tester hasn't reported back yet...
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.9 2002/07/21 09:17:14 hugh Exp $	*/
d58 1
a58 1
static void	ka680_steal_pages(void);
d90 1
a90 1
	ka680_steal_pages,
d267 1
a267 1
ka680_steal_pages()
@


1.9
log
@Attempt to distinguish 4000 700A from 4000 705A. Results are so far
consistent with SID/XSID data from Mats O Jansson, Chuck McManis,
Antonio Carlini, Fred van Kempen, and Kees Stravers.
Tested by Fred van Kempen.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.8 2002/03/14 01:26:48 millert Exp $	*/
d4 1
a60 2
static void	ka680_halt(void);
static void	ka680_reboot(int);
d98 2
a99 2
	ka680_halt,
	ka680_reboot,
a101 1

d113 2
a290 13

static void
ka680_halt()
{
	asm("halt");
}

static void
ka680_reboot(int arg)
{
	asm("halt");
}

@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.7 2002/01/31 11:42:52 hugh Exp $	*/
d140 4
a143 1
			cpuname = "KA694";
@


1.7
log
@Add support for VAX 4000 500A.
Thanks to kernel testing by Andrew Reynolds.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.6 2001/08/25 13:33:37 hugh Exp $	*/
d53 9
a61 9
static void	ka680_conf __P((void));
static void	ka680_cache_enable __P((void));
static void	ka680_softmem __P((void *));
static void	ka680_hardmem __P((void *));
static void	ka680_steal_pages __P((void));
static void	ka680_memerr __P((void));
static int	ka680_mchk __P((caddr_t));
static void	ka680_halt __P((void));
static void	ka680_reboot __P((int));
@


1.6
log
@Bring in some useful stuff from NetBSD. Mostly work by Matt Thomas,
and concerned with intvec counting. Also some ANSIfication.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.5 2001/06/25 00:43:19 mickey Exp $	*/
d115 30
a144 18
	switch((vax_siedata & 0xff00) >> 8) {
	case VAX_STYP_675:
		cpuname = "KA675";
		break;
	case VAX_STYP_680:
		cpuname = "KA680";
		break;
	case VAX_STYP_681:
		cpuname = "KA681";
		break;
	case VAX_STYP_690:
		cpuname = "KA690";
		break;
	case VAX_STYP_691:
		cpuname = "KA691";
		break;
	default:
			cpuname = "unknown NVAX";
d177 4
d182 5
@


1.6.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.7 2002/01/31 11:42:52 hugh Exp $	*/
d115 18
a132 30
	switch(vax_boardtype) {
	case VAX_BTYP_1301:
		switch((vax_siedata & 0xff00) >> 8) {
		case VAX_STYP_675:
			cpuname = "KA675";
			break;
		case VAX_STYP_680:
			cpuname = "KA680";
			break;
		case VAX_STYP_690:
			cpuname = "KA690";
			break;
		default:
			cpuname = "unknown NVAX 1301";
		}
		break;
	case VAX_BTYP_1305:
		switch((vax_siedata & 0xff00) >> 8) {
		case VAX_STYP_681:
			cpuname = "KA681";
			break;
		case VAX_STYP_691:
			cpuname = "KA691";
			break;
		case VAX_STYP_694:
			cpuname = "KA694";
			break;
		default:
			cpuname = "unknown NVAX 1305";
		}
a164 4
		fslut = 0x01440000;
		cslut = 0x01040000;
		havevic = 1;
		break;
a165 5
		fslut = 0x01420000;
		cslut = 0x01020000;
		havevic = 1;
		break;
	case VAX_STYP_694:	/* XXX untested */
@


1.6.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.6.4.1 2002/01/31 22:55:27 niklas Exp $	*/
d53 9
a61 9
static void	ka680_conf(void);
static void	ka680_cache_enable(void);
static void	ka680_softmem(void *);
static void	ka680_hardmem(void *);
static void	ka680_steal_pages(void);
static void	ka680_memerr(void);
static int	ka680_mchk(caddr_t);
static void	ka680_halt(void);
static void	ka680_reboot(int);
@


1.6.4.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.6.4.2 2002/06/11 03:39:19 art Exp $	*/
a3 1
 * Copyright (c) 2002 Hugh Graham.
d60 2
d99 2
a100 2
	generic_halt,
	generic_reboot,
d103 1
a114 2
	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);

d140 1
a140 4
			if (vax_cpudata & 0x1000)
				cpuname = "KA694";
			else
				cpuname = "KA692";
d288 13
@


1.5
log
@cold is in systm now
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.4 2001/04/01 16:51:40 hugh Exp $	*/
d248 2
a249 2
	scb_vecalloc(0x54, ka680_softmem, 0, 0);
	scb_vecalloc(0x60, ka680_hardmem, 0, 0);
@


1.4
log
@Changes to initialize the cache on KA690 properly; from Lord Isildur.
Entries for KA681 and KA691, and a conservative default case to keep
things sane if an unknown cpu is encountered by me. Also some KNF.
Anyone with a 4000/{4,5,6}00 able to test?
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.3 2001/03/16 22:46:26 hugh Exp $	*/
a62 2
extern int cold;		/* cold-start flag */

@


1.4.4.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.4 2001/04/01 16:51:40 hugh Exp $	*/
@


1.4.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.4.4.1 2001/05/14 21:39:01 niklas Exp $	*/
d63 2
@


1.4.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.4.4.2 2001/07/04 10:24:38 niklas Exp $	*/
d248 2
a249 2
	scb_vecalloc(0x54, ka680_softmem, NULL, 0, NULL);
	scb_vecalloc(0x60, ka680_hardmem, NULL, 0, NULL);
@


1.4.4.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 18
a132 30
	switch(vax_boardtype) {
	case VAX_BTYP_1301:
		switch((vax_siedata & 0xff00) >> 8) {
		case VAX_STYP_675:
			cpuname = "KA675";
			break;
		case VAX_STYP_680:
			cpuname = "KA680";
			break;
		case VAX_STYP_690:
			cpuname = "KA690";
			break;
		default:
			cpuname = "unknown NVAX 1301";
		}
		break;
	case VAX_BTYP_1305:
		switch((vax_siedata & 0xff00) >> 8) {
		case VAX_STYP_681:
			cpuname = "KA681";
			break;
		case VAX_STYP_691:
			cpuname = "KA691";
			break;
		case VAX_STYP_694:
			cpuname = "KA694";
			break;
		default:
			cpuname = "unknown NVAX 1305";
		}
a164 4
		fslut = 0x01440000;
		cslut = 0x01040000;
		havevic = 1;
		break;
a165 5
		fslut = 0x01420000;
		cslut = 0x01020000;
		havevic = 1;
		break;
	case VAX_STYP_694:	/* XXX untested */
@


1.4.4.5
log
@Merge in -current from about a week ago
@
text
@d53 9
a61 9
static void	ka680_conf(void);
static void	ka680_cache_enable(void);
static void	ka680_softmem(void *);
static void	ka680_hardmem(void *);
static void	ka680_steal_pages(void);
static void	ka680_memerr(void);
static int	ka680_mchk(caddr_t);
static void	ka680_halt(void);
static void	ka680_reboot(int);
@


1.4.4.6
log
@Sync the SMP branch with 3.3
@
text
@a3 1
 * Copyright (c) 2002 Hugh Graham.
d60 2
d99 2
a100 2
	generic_halt,
	generic_reboot,
d103 1
a114 2
	cpmbx = (struct cpmbx *)vax_map_physmem(0x20140400, 1);

d140 1
a140 4
			if (vax_cpudata & 0x1000)
				cpuname = "KA694";
			else
				cpuname = "KA692";
d288 13
@


1.3
log
@Add some more model subtypes from Antonio Carlini.
Won't try to match VAX_STYP_692 until we can find a 4000 70x and learn
more about this model.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.2 2001/03/12 11:45:39 hugh Exp $	*/
d35 1
d118 16
a133 11
		case VAX_STYP_675:
			cpuname = "KA675"; break;
		case VAX_STYP_680:
			cpuname = "KA680"; break;
		case VAX_STYP_681:
			cpuname = "KA681"; break;
		case VAX_STYP_690:
			cpuname = "KA690"; break;
		case VAX_STYP_691:
			cpuname = "KA691"; break;
		default:
d142 1
a142 1
	int start, slut;
d159 20
a180 1
	slut  = 0x01420000;
d183 1
a183 1
	for (; start < slut; start += 0x20)
a189 1
	slut  = 0x01020000;
d192 1
a192 1
	for (; start < slut; start += 0x20)
d198 1
a198 1
	slut  = 0x01802000;
d201 1
a201 1
	for (; start < slut; start += 0x20)
d211 3
a213 1
	if(((vax_siedata & 0xff00) >> 8) == VAX_STYP_680) {
@


1.2
log
@Omega is now VAX_BTYP_1301. Also add an STYP for 4000 600.
@
text
@d1 1
a1 1
/*	$OpenBSD: ka680.c,v 1.1 2001/02/24 10:31:58 hugh Exp $	*/
d121 2
d125 2
@


1.1
log
@Support for VAX 4000/{2,4,5}00 from Michael Kukat. untested.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d117 8
a124 3
		case VAX_STYP_675: cpuname = "KA675"; break;
		case VAX_STYP_680: cpuname = "KA680"; break;
		default: cpuname = "unknown NVAX";
@

