head	1.19;
access;
symbols
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.12
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.8
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.10
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.6
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.14.0.8
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.6
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.12
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.2
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.18;
commitid	OSDG2O3Cgeifnf1W;

1.18
date	2015.02.10.22.44.35;	author miod;	state Exp;
branches;
next	1.17;
commitid	lsrmQ0A4gY4UmdnD;

1.17
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.16;
commitid	C5iGb36LQxjM60Q3;

1.16
date	2010.11.20.20.33.24;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.22.16.21.32;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.06.22.21.33;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.27.59;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.29.19.13.05;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.05.20.56.57;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.27.01.10.13;	author bjc;	state Exp;
branches;
next	1.6;

1.6
date	99.11.22.19.22.03;	author matthieu;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	98.08.31.17.42.44;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.05.29.00.05.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.09.10.18;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.27.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.10;	author deraadt;	state Exp;
branches;
next	;

1.6.2.1
date	2001.05.14.21.39.06;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.07.04.10.24.40;	author niklas;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.11.13.21.04.18;	author niklas;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2002.03.28.11.26.47;	author niklas;	state Exp;
branches;
next	1.6.2.5;

1.6.2.5
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	1.6.2.6;

1.6.2.6
date	2003.06.07.11.14.48;	author ho;	state Exp;
branches;
next	;

1.10.2.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: mem.c,v 1.18 2015/02/10 22:44:35 miod Exp $	*/
/*	$NetBSD: mem.c,v 1.15 1999/03/24 05:51:17 mrg Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/conf.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#include <sys/proc.h>

#include <machine/pte.h>
#include <machine/mtpr.h>

#include <uvm/uvm_extern.h>

caddr_t zeropage;

#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);

/*ARGSUSED*/
int
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 12:
			return (0);
		default:
			return (ENXIO);
	}
}

/*ARGSUSED*/
int
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	return (0);
}

/*ARGSUSED*/
int
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	vaddr_t v;
	size_t c;
	struct iovec *iov;
	int error = 0;

	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;
			if (v < 0 || v >= ptoa(physmem)) {
				return (EFAULT);
			}

			c = ulmin(iov->iov_len, MAXPHYS);
			error = uiomove((caddr_t)v + KERNBASE, c, uio);
			continue;
/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = ulmin(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			error = uiomove((caddr_t)v, c, uio);
			continue;

/* minor device 2 is EOF/RATHOLE */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}
			if (zeropage == NULL)
				zeropage = malloc(PAGE_SIZE, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = ulmin(iov->iov_len, PAGE_SIZE);
			error = uiomove(zeropage, c, uio);
			continue;

		default:
			return (ENXIO);
		}
		if (error)
			break;
		iov->iov_base = (caddr_t)iov->iov_base + c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	return (error);
}

paddr_t
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{

	return (-1);
}

int
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EOPNOTSUPP);
}
@


1.18
log
@Convert to uiomove().
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2010/11/20 20:33:24 miod Exp $	*/
@


1.17
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d101 1
a101 1
	int c;
d123 2
a124 2
			c = min(iov->iov_len, MAXPHYS);
			error = uiomovei((caddr_t)v + KERNBASE, c, uio);
d129 1
a129 1
			c = min(iov->iov_len, MAXPHYS);
d133 1
a133 1
			error = uiomovei((caddr_t)v, c, uio);
d151 2
a152 2
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomovei(zeropage, c, uio);
@


1.16
log
@This is a first step towards getting rid of avail_start and avail_end in the
kernel, currently limited to low-hanging fruit: these variables were used
by bus_dma to specify the range in which to allocate memory, back when
uvm_pglistalloc() was stupid and would not walk the vm_physseg[].

Nowadays, except on some platforms for early initialization, these variables
are not used, or do not need to be global variables. Therefore:
- remove `extern' declarations of avail_start and avail_end (or close cousins,
  such as arm physical_start and physical_end) from files which no longer need
  to use them.
- make them local variables whenever possible.
- remove them when they are assigned to but no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2007/09/22 16:21:32 krw Exp $	*/
d124 1
a124 1
			error = uiomove((caddr_t)v + KERNBASE, c, uio);
d133 1
a133 1
			error = uiomove((caddr_t)v, c, uio);
d152 1
a152 1
			error = uiomove(zeropage, c, uio);
@


1.15
log
@M_ZERO -> bzero.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2005/11/06 22:21:33 miod Exp $	*/
a56 1
extern unsigned int avail_end;
d119 1
a119 1
			if (v < 0 || v >= avail_end) {
@


1.14
log
@Kill deprecated vm_offset_t and vm_size_t types on vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2003/06/02 23:27:59 millert Exp $	*/
d149 3
a151 5
			if (zeropage == NULL) {
				zeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
			}
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2002/04/29 19:13:05 miod Exp $	*/
d101 3
a103 3
	register vm_offset_t v;
	register int c;
	register struct iovec *iov;
@


1.12
log
@Sync /dev/mem prototypes with the real interface here too.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2002/03/14 01:26:49 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2001/11/06 19:53:17 miod Exp $	*/
d64 3
a66 5
int	mmopen(dev_t, int, int);
int	mmclose(dev_t, int, int);
int	mmrw(dev_t, struct uio *, int);
paddr_t	mmmmap(dev_t, off_t, int);

d70 1
a70 1
mmopen(dev, flag, mode)
d73 1
d89 1
a89 1
mmclose(dev, flag, mode)
d92 1
d187 5
a191 5
    dev_t dev;
    u_long cmd;
    caddr_t data;
    int flags;
    struct proc *p;
d193 1
a193 1
    return (EOPNOTSUPP);
@


1.10
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 2001/11/01 12:13:46 art Exp $	*/
d64 4
a67 4
int	mmopen __P((dev_t, int, int));
int	mmclose __P((dev_t, int, int));
int	mmrw __P((dev_t, struct uio *, int));
paddr_t	mmmmap __P((dev_t, off_t, int));
@


1.10.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2001/11/06 19:53:17 miod Exp $	*/
d64 5
a68 3
#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
d72 1
a72 1
mmopen(dev, flag, mode, p)
a74 1
	struct proc *p;
d90 1
a90 1
mmclose(dev, flag, mode, p)
a92 1
	struct proc *p;
d187 5
a191 5
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
d193 1
a193 1
	return (EOPNOTSUPP);
@


1.9
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 2001/05/05 20:56:57 art Exp $	*/
d59 1
a59 1
#include <vm/vm.h>
@


1.8
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 2000/04/27 01:10:13 bjc Exp $	*/
d67 1
a67 1
int	mmmmap __P((dev_t, int, int));
d175 1
a175 1
int
d178 2
a179 1
	int off, prot;
@


1.7
log
@sync with netbsd of early april; some archs still untested
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 1999/11/22 19:22:03 matthieu Exp $	*/
d155 2
a156 2
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(zeropage, CLBYTES);
d158 1
a158 1
			c = min(iov->iov_len, CLBYTES);
@


1.6
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.5 1998/08/31 17:42:44 millert Exp $	*/
/*	$NetBSD: mem.c,v 1.9 1996/04/08 18:32:48 ragge Exp $	*/
d41 1
a41 1
 *	@@(#)mem.c       8.3 (Berkeley) 1/12/94
d61 1
a61 1
extern unsigned int vmmap, avail_end;
d105 1
a105 1
	register vm_offset_t o, v;
a108 1
	static int physlock;
a109 11
	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
	}
d125 1
a125 2
				error = EFAULT;
				goto unlock;
d128 2
a129 8
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), uio->uio_rw == UIO_READ ?
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
			o = uio->uio_offset & PAGE_MASK;
			c = min(uio->uio_resid, (int)(PAGE_SIZE - o));
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + PAGE_SIZE);
d135 1
a135 1
			if (!kernacc((caddr_t)v, c,
d167 1
a167 1
		iov->iov_base += c;
a171 6
	if (minor(dev) == 0) {
unlock:
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
	}
d181 1
a181 1
	return (EOPNOTSUPP);
a183 1
/*ARGSUSED*/
d186 5
a190 5
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
d192 1
a192 1
	return (EOPNOTSUPP);
@


1.6.2.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: mem.c,v 1.7 2000/04/27 01:10:13 bjc Exp $	*/
/*	$NetBSD: mem.c,v 1.15 1999/03/24 05:51:17 mrg Exp $	*/
d41 1
a41 1
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
d61 1
a61 1
extern unsigned int avail_end;
d105 1
a105 1
	register vm_offset_t v;
d109 1
d111 11
d137 2
a138 1
				return (EFAULT);
d141 8
a148 2
			c = min(iov->iov_len, MAXPHYS);
			error = uiomove((caddr_t)v + KERNBASE, c, uio);
d154 1
a154 1
			if (!uvm_kernacc((caddr_t)v, c,
d186 1
a186 1
		iov->iov_base = (caddr_t)iov->iov_base + c;
d191 6
d206 1
a206 1
	return (-1);
d209 1
d212 5
a216 5
    dev_t dev;
    u_long cmd;
    caddr_t data;
    int flags;
    struct proc *p;
d218 1
a218 1
    return (EOPNOTSUPP);
@


1.6.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6.2.1 2001/05/14 21:39:06 niklas Exp $	*/
d155 2
a156 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
d158 1
a158 1
			c = min(iov->iov_len, PAGE_SIZE);
@


1.6.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 1
a59 1
#include <uvm/uvm_extern.h>
d67 1
a67 1
paddr_t	mmmmap __P((dev_t, off_t, int));
d175 1
a175 1
paddr_t
d178 1
a178 2
	off_t off;
	int prot;
@


1.6.2.4
log
@Merge in -current from about a week ago
@
text
@d64 4
a67 4
int	mmopen(dev_t, int, int);
int	mmclose(dev_t, int, int);
int	mmrw(dev_t, struct uio *, int);
paddr_t	mmmmap(dev_t, off_t, int);
@


1.6.2.5
log
@Sync the SMP branch with 3.3
@
text
@d64 5
a68 3
#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
d72 1
a72 1
mmopen(dev, flag, mode, p)
a74 1
	struct proc *p;
d90 1
a90 1
mmclose(dev, flag, mode, p)
a92 1
	struct proc *p;
d187 5
a191 5
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
d193 1
a193 1
	return (EOPNOTSUPP);
@


1.6.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6.2.5 2003/03/27 23:52:20 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 1997/05/29 00:05:23 niklas Exp $	*/
d206 12
@


1.4
log
@RCS tagging
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 1996/04/08 18:32:48 ragge Exp $	*/
d77 9
a85 1
	return (0);
@


1.3
log
@sync w/ 0430
@
text
@d1 1
@


1.2
log
@update from netbsd (verbatim)
@
text
@d1 1
a1 1
/*	$NetBSD: mem.c,v 1.8 1995/10/30 16:27:56 ragge Exp $	*/
d53 1
d62 6
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mem.c,v 1.7 1995/04/10 16:49:25 mycroft Exp $	*/
d124 1
d128 2
a129 2
			o = uio->uio_offset & PGOFSET;
			c = min(uio->uio_resid, (int)(NBPG - o));
d132 1
a132 1
			    (vm_offset_t)vmmap + NBPG);
a133 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
