head	1.6;
access;
symbols
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.5;
commitid	OSDG2O3Cgeifnf1W;

1.5
date	2013.07.05.21.13.07;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.29.18.02.41;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.06.18.32.59;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.07.10.16.45;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.11.09.36.24;	author hugh;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;

1.1.8.1
date	2004.02.19.10.50.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: start.S,v 1.5 2013/07/05 21:13:07 miod Exp $ */
/*	$NetBSD: start.S,v 1.1 2002/02/24 01:04:26 matt Exp $ */
/*
 * Copyright (c) 1995 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * This code is derived from software contributed to Ludd by
 * Bertram Barth.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed at Ludd, University of 
 *	Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

 /* All bugs are subject to removal without further notice */
		

#include "../include/mtpr.h"
#include "../include/asm.h"		

#include "assym.h"

_C_LABEL(_start):
_C_LABEL(start):
	.globl _C_LABEL(start)	# this is the symbolic name for the start
	.globl _C_LABEL(_start) # of code to be relocated. We can use this
				# to get the actual/real address (pc-rel)
				# or to get the relocated address (abs).

.org	0x00			# uVAX booted from TK50 starts here
	brb	from_0x00	# continue behind dispatch-block

.org	0x02			# information used by uVAX-ROM
	.byte	0xff		# offset in words to identification area 
	.byte	1		# this byte must be 1
	.word	0		# logical block number (word swapped) 
	.word	0		# of the secondary image

.org	0x08			#
	brb	from_0x08	# skip ...

.org	0x0C			# 11/750  & 8200 starts here
	halt			# not supported


from_0x00:			# uVAX from TK50 
	brw	start_uvax	# all uVAXen continue there

from_0x08:			# Any machine from VMB
	movzbl	$4,_C_LABEL(from)		# Booted from full VMB
	brw	start_vmb

# the complete area reserved for label
# must be empty (i.e. filled with zeroes).
# disklabel(8) checks that before installing
# the bootblocks over existing label.

.org	LABELOFFSET
	.globl	_C_LABEL(romlabel)
_C_LABEL(romlabel):
	.long	0

.org	LABELOFFSET + DISKLABEL_SIZEOF
start_vmb:
	/*
	 * Read in block 1-15.
	 */
	movl	52(%r11), %r7	# load iovec/bqo into %r7
	addl3	(%r7), %r7, %r6	# load qio into %r6
	pushl	%r11		# base of rpb
	pushl	$0		# virtual-flag 
	pushl	$33		# read-logical-block
	pushl	$1		# lbn to start reading
	pushl	$7680		# number of bytes to read
	pushab	start_uvax	# buffer-address 
	calls	$6, (%r6)	# call the qio-routine
	brw	start_uvax

/*
 * Parameter block for uVAX boot.
 */
#define VOLINFO		0	/* 1=single-sided  81=double-sided volumes */
#define SISIZE		16	/* size in blocks of secondary image */
#define SILOAD		0	/* load offset (usually 0) from the default */
#define SIOFF		0x260	/* byte offset into secondary image */

.org	0x1fe
	.byte	0x18		# must be 0x18 
	.byte	0x00		# must be 0x00 (MBZ) 
	.byte	0x00		# any value 
	.byte	0xFF - (0x18 + 0x00 + 0x00)	
		/* 4th byte holds 1s' complement of sum of previous 3 bytes */

	.byte	0x00		# must be 0x00 (MBZ) 
	.byte	VOLINFO
	.byte	0x00		# any value 
	.byte	0x00		# any value 

	.long	SISIZE		# size in blocks of secondary image 
	.long	SILOAD		# load offset (usually 0) 
	.long	SIOFF		# byte offset into secondary image 
	.long	(SISIZE + SILOAD + SIOFF)	# sum of previous 3 


	.p2align 2
	.globl	_C_LABEL(from)
_C_LABEL(from):
	.long	0

/* uVAX main entry is at the start of the second disk block.  This is
 * needed for multi-arch CD booting where multiple architecture need
 * to shove stuff in boot block 0.
 */
	.org	0x260		# uVAX booted from disk starts here

start_uvax:
	movzbl	$2,_C_LABEL(from)	# Booted from subset-VMB
	brb	start_all

/*
 * start_all: stack already at RELOC, we save registers, move ourself
 * to RELOC and loads boot.
 */
start_all:
	movl	$_C_LABEL(start), %sp	# move stack to a better 
	pushr	$0x1fff			# save all regs, used later.

	subl3	$_C_LABEL(start), $_C_LABEL(edata), %r0
					# get size of text+data (w/o bss)
	moval	_C_LABEL(start), %r1	# get actual base-address of code
	subl3	$_C_LABEL(start), $_C_LABEL(end), %r2
					# get complete size (incl. bss)
	movl	$_C_LABEL(start), %r3	# get relocated base-address of code
	movc5	%r0, (%r1), $0, %r2, (%r3) # copy code to new location
	
	movpsl	-(%sp)
	movl	$relocated, -(%sp)	# return-address on top of stack 
	rei				# can be replaced with new address
relocated:				# now relocation is done !!!
	movl	%sp, _C_LABEL(bootregs)
	calls	$0, _C_LABEL(Xmain)	# call Xmain (gcc workaround)which is 
	halt				# not intended to return ...

/*
 * hoppabort() is called when jumping to the newly loaded program.
 */
ENTRY(hoppabort, 0)
	movl    4(%ap),%r6
	movl	_C_LABEL(rpb),%r11
	mnegl	$1,%ap		# Hack to figure out boot device.
	movpsl	-(%sp)
	pushab	2(%r6)
	mnegl	$1,_C_LABEL(vax_load_failure)
	rei
#	calls	$0,(%r6)
	halt

ENTRY(unit_init, R6|R7|R8|R9|R10|R11)
	mfpr	$17,%r7			# Wanted bu KDB
	movl	4(%ap),%r0		# init routine address
	movl	8(%ap),%r9		# RPB in %r9
	movl	12(%ap),%r1		# VMB argument list
	callg	(%r1),(%r0)
	ret

# A bunch of functions unwanted in boot blocks.
ENTRY(getchar, 0)
	halt

#ifndef USE_PRINTF
ENTRY(putchar, 0)
	ret

#endif

ENTRY(panic, 0)
	halt
@


1.5
log
@VAX ELF boot block bits, and version crank.
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.4 2011/09/29 18:02:41 miod Exp $ */
@


1.4
log
@Get size of struct disklabel for the sake of the assembly code with a
genassym script, instead of relying upon <sys/disklabel.h> to provide them
as proper .set statements if _LOCORE is defined.
Requested by weingart@@ long ago; ok jsing@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.3 2011/07/06 18:32:59 miod Exp $ */
d90 3
a92 3
	movl	52(r11), r7	# load iovec/bqo into %r7
	addl3	(r7), r7, r6	# load qio into %r6
	pushl	r11		# base of rpb
d98 1
a98 1
	calls	$6, (r6)	# call the qio-routine
d127 1
a127 1
	.align	2
d147 1
a147 1
	movl	$_C_LABEL(start), sp	# move stack to a better 
d150 1
a150 1
	subl3	$_C_LABEL(start), $_C_LABEL(edata), r0
d152 2
a153 2
	moval	_C_LABEL(start), r1	# get actual base-address of code
	subl3	$_C_LABEL(start), $_C_LABEL(end), r2
d155 2
a156 2
	movl	$_C_LABEL(start), r3	# get relocated base-address of code
	movc5	r0, (r1), $0, r2, (r3)	# copy code to new location
d158 2
a159 2
	movpsl	-(sp)
	movl	$relocated, -(sp)	# return-address on top of stack 
d162 1
a162 1
	movl	sp, _C_LABEL(bootregs)
d170 5
a174 5
	movl    4(ap),r6
	movl	_C_LABEL(rpb),r11
	mnegl	$1,ap		# Hack to figure out boot device.
	movpsl	-(sp)
	pushab	2(r6)
d177 1
a177 1
#	calls	$0,(r6)
d181 5
a185 5
	mfpr	$17,r7			# Wanted bu KDB
	movl	4(ap),r0		# init routine address
	movl	8(ap),r9		# RPB in %r9
	movl	12(ap),r1		# VMB argument list
	callg	(r1),(r0)
@


1.3
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.2 2003/11/07 10:16:45 jmc Exp $ */
a39 4
#define _LOCORE

#include "sys/disklabel.h"

d43 2
d85 1
a85 1
.org	LABELOFFSET + d_end_
@


1.2
log
@adress -> address, and a few more; all from Jonathon Gray;

(mvme68k/mvme88k) vs.c and (vax) if_le.c ok miod@@
isakmpd ones ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.1 2002/06/11 09:36:24 hugh Exp $ */
d67 1
a67 2
	movzbl	$1,_C_LABEL(from)# We booted from "old" rom.
	brw	cont_750
a132 39

/*
 * After bootblock (LBN0) has been loaded into the first page 
 * of good memory by 11/750's ROM-code (transfer address
 * of bootblock-code is: base of good memory + 0x0C) registers
 * are initialized as:
 *	R0:	type of boot-device
 *			0:	Massbus device
 *			1:	RK06/RK07
 *			2:	RL02
 *			17:	UDA50
 *			35:	TK50
 *			64:	TU58
 *	R1:	(UBA) address of UNIBUS I/O-page
 *		(MBA) address of boot device's adapter
 *	R2:	(UBA) address of the boot device's CSR
 *		(MBA) controller number of boot device
 *	R6:	address of driver subroutine in ROM
 *
 * cont_750 reads in LBN1-15 for further execution.
 */
cont_750:
	movl	$_C_LABEL(start), sp	# move stack to avoid clobbering the code
	pushr	$0x131		# save clobbered registers
	clrl	r4		# %r4 == # of blocks transferred
	movab	_C_LABEL(start),r5	# %r5 have base address for next transfer
	pushl	r5		# ...on stack also (Why?)
1:	incl	r4		# increment block count
	movl	r4,r8		# LBN is in %r8 for rom routine
	addl2	$0x200,r5	# Increase address for next read
	cmpl	$16,r4		# read 15 blocks?
	beql	2f		# Yep
	movl	r5,(sp)		# move address to stack also
	jsb	(r6)		# read 512 bytes
	blbs	r0,1b		# jump if read succeeded
	halt			# otherwise die...
2:	tstl	(sp)+		# remove boring arg from stack
	popr	$0x131		# restore clobbered registers
	brw	start_all	# Ok, continue...
@


1.1
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d51 1
a51 1
				# to get the actual/real adress (pc-rel)
@


1.1.8.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d51 1
a51 1
				# to get the actual/real address (pc-rel)
@


1.1.4.1
log
@sync to -current
@
text
@@

