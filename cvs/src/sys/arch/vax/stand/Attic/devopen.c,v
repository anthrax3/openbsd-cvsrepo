head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2000.04.27.02.26.20;	author bjc;	state dead;
branches;
next	1.5;

1.5
date	98.02.03.11.48.26;	author maja;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	97.05.29.00.04.21;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.24.19;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.09.09.02;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.04;	author deraadt;	state Exp;
branches;
next	;

1.5.10.1
date	2001.05.14.21.37.40;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@/*	$OpenBSD: devopen.c,v 1.5 1998/02/03 11:48:26 maja Exp $ */
/*	$NetBSD: devopen.c,v 1.8 1997/06/08 17:49:19 ragge Exp $ */
/*
 * Copyright (c) 1997 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/reboot.h>

#include "lib/libsa/stand.h"
#include "samachdep.h"
#include "vaxstand.h"

unsigned int opendev;

int
devopen(f, fname, file)
	struct open_file *f;
	const char *fname;
	char **file;
{
	int dev, ctlr, unit, part, adapt, i, a[4], x;
	struct devsw *dp;
	extern struct fs_ops nfs_system[];
	extern int cnvtab[];
	char *s, *c;

	dev   = B_TYPE(bootdev);
	ctlr  = B_CONTROLLER(bootdev);
	unit  = B_UNIT(bootdev);
	part  = B_PARTITION(bootdev);
	adapt = B_ADAPTOR(bootdev);

	for (i = 0, dp = 0; i < ndevs; i++)
		if (cnvtab[i] == dev)
			dp = devsw + i;

	x = 0;
	if ((s = index(fname, '('))) {
		*s++ = 0;

		for (i = 0, dp = devsw; i < ndevs; i++, dp++)
			if (dp->dv_name && strcmp(dp->dv_name, fname) == 0)
				break;

		if (i == ndevs) {
			printf("No such device - Configured devices are:\n");
			for (dp = devsw, i = 0; i < ndevs; i++, dp++)
				if (dp->dv_name)
					printf(" %s", dp->dv_name);
			printf("\n");
			return -1;
		}
		dev = cnvtab[i];
		if ((c = index(s, ')')) == 0)
			goto usage;

		*c++ = 0;

		if (*s) do {
			a[x++] = atoi(s);
			while (*s >= '0' && *s <= '9')
				s++;

			if (*s != ',' && *s != 0)
				goto usage;
		} while (*s++);

		if (x)
			part = a[x - 1];
		if (x > 1)
			unit = a[x - 2];
		if (x > 2)
			ctlr = a[x - 3];
		if (x > 3)
			adapt = a[0];
		*file = c;
	} else
		*file = (char *)fname;

#ifdef notyet
	if ((u = index(s, ' '))) {
		*u++ = 0;

		if (*u != '-')
			goto usage;

		while (*++u) {
			if (*u == 'a')
				bdev |= RB_ASKNAME;
			else if (*u == 'd')
				bdev |= RB_DEBUG;
			else if (*u == 's')
				bdev |= RB_SINGLE;
			else
				goto usage;
		}

	}
#endif

	if (!dp->dv_open)
		return(ENODEV);
	f->f_dev = dp;

	opendev = MAKEBOOTDEV(dev, adapt, ctlr, unit, part);

	if (dev > 95) { /* MOP boot over network, root & swap over NFS */
		bcopy(nfs_system, file_system, sizeof(struct fs_ops));
		i = (*dp->dv_open)(f, dp->dv_name);
	} else
		i = (*dp->dv_open)(f, adapt, ctlr, unit, part);

	return i;

usage:
	printf("usage: dev(adapter,controller,unit,partition)file -asd\n");
	return -1;
}
@


1.5
log
@Sync with NetBSD 970827. Forgot this one last time. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.4 1997/05/29 00:04:21 niklas Exp $ */
@


1.5.10.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.5 1998/02/03 11:48:26 maja Exp $ */
@


1.4
log
@RCS tagging
@
text
@d1 20
a20 28
/*	$OpenBSD: devopen.c,v 1.6 1996/08/02 16:18:39 ragge Exp $ */
/*	$NetBSD: devopen.c,v 1.6 1996/08/02 16:18:39 ragge Exp $ */
/*-
 *  Copyright (c) 1993 John Brezak
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d22 10
a33 1
#include <sys/param.h>
d37 2
a38 1
/* #include "samachdep.h" */
d40 1
a40 3
u_int opendev;

#define ispart(c)	((c) >= 'a' && (c) <= 'h')
a42 136
atoi(cp)
	char *cp;
{
	int val = 0;
	while(isdigit(*cp))
		val = val * 10 + (*cp++ - '0');
	return(val);
}

usage()
{
	printf("\
	    Usage: device(adaptor, controller, drive, partition)file\n\
	    <device><unit><partitonletter>:file\n\
	    ");
}

devlookup(d,len)
	char *d;
	int len;
{
	struct devsw *dp = devsw;
	int i;

	for (i = 0; i < ndevs; i++, dp++)
		if (dp->dv_name && strncmp(dp->dv_name, d, len) == 0)
			return(i);

	printf("No such device - Configured devices are:\n");
	for (dp = devsw, i = 0; i < ndevs; i++, dp++)
		if (dp->dv_name)
			printf(" %s", dp->dv_name);
	printf("\n");
	errno = ENODEV;
	return(-1);
}

/*
 * Parse a device spec in one of two forms.
 *
 * dev(adapt, ctlr, unit, part)file
 * [A-Za-z]*[0-9]*[A-Za-z]:file
 *    dev   unit  part
 */
devparse(fname, dev, adapt, ctlr, unit, part, file)
	char *fname;
	int *dev, *adapt, *ctlr, *unit, *part;
	char **file;
{
	int *argp, i;
	char *s, *args[4];

	/* get device name and make lower case */
	for(s = fname; *s && *s != '/' && *s != ':' && *s != '('; s++)
		if(isupper(*s))
			*s = tolower(*s);

	/* first form */
	if(*s == '('){
		/* lookup device and get index */
		if ((*dev = devlookup(fname, s - fname)) < 0)
			goto baddev;

		/* tokenize device ident */
		args[0] = ++s;
		for (args[0] = s, i = 1; *s && *s != ')'; s++)
			if (*s == ',')
				args[i++] = ++s;
		

		switch(i) {
		case 4:
			*adapt = atoi(args[0]);
			*ctlr  = atoi(args[1]);
			*unit  = atoi(args[2]);
			*part  = atoi(args[3]);
			break;
		case 3:
			*ctlr  = atoi(args[0]);
			*unit  = atoi(args[1]);
			*part  = atoi(args[2]);
			break;
		case 2:
			*unit  = atoi(args[0]);
			*part  = atoi(args[1]);
			break;
		case 1:
			*part  = atoi(args[0]);
			break;
		case 0:
			break;
		}
		*file = ++s;

	/* second form */
	} else if (*s == ':') {

		/* isolate device */
		for(s = fname; *s != ':' && !isdigit(*s); s++)
			;
	
		/* lookup device and get index */
		if ((*dev = devlookup(fname, s - fname)) < 0)
			goto baddev;

		/* isolate unit */
		if ((*unit = atoi(s)) > sizeof(char))
			goto bad;
		for (; isdigit(*s); s++)
			;
	
		/* translate partition */
		if(!ispart(*s))
			goto bad;
	
		*part = *s++ - 'a';
		if(*s != ':')
			goto bad;
		*file = ++s;

	/* no device present */
	} else
		*file = fname;
    
	/* return the remaining unparsed part as the file to boot */
	return(0);
    
bad:
	usage();

	baddev:
		return(-1);
}

extern int bootdev;

d48 5
a52 4
	int n, error;
	int dev, ctlr, unit, part;
	int adapt;
	struct devsw *dp = &devsw[0];
d60 46
a105 2
	if (error = devparse(fname, &dev, &adapt, &ctlr, &unit, &part, file))
		return(error);
d107 20
a126 1
	dp = &devsw[dev];
d130 1
a132 8
	
	f->f_dev = dp;
    
	if ((error = (*dp->dv_open)(f, adapt, ctlr, unit, part)) == 0)
		return(0);
	
	printf("%s(%d,%d,%d,%d): %s\n", devsw[dev].dv_name,
		adapt, ctlr, unit, part, strerror(error));
d134 11
a144 1
	return(error);
@


1.3
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@


1.2
log
@sync w/ 0430
@
text
@d1 1
a1 1
/*	$NetBSD: devopen.c,v 1.4 1996/03/16 11:02:28 ragge Exp $ */
d55 1
a55 1
            <device><unit><partitonletter>:file\n\
d65 1
a65 1
    
d68 1
a68 1
	    		return(i);
d73 1
a73 1
	    		printf(" %s", dp->dv_name);
d93 1
a93 1
    
d120 4
a123 4
	    		*ctlr  = atoi(args[0]);
	    		*unit  = atoi(args[1]);
	    		*part  = atoi(args[2]);
	    		break;
d125 3
a127 3
	    		*unit  = atoi(args[0]);
	    		*part  = atoi(args[1]);
	    		break;
d129 2
a130 2
	    		*part  = atoi(args[0]);
	    		break;
d132 1
a132 1
	    		break;
d145 1
a145 1
	    		goto baddev;
d149 1
a149 1
	    		goto bad;
d155 1
a155 1
	    		goto bad;
d159 1
a159 1
	    		goto bad;
d163 1
a163 1
    	} else
d179 2
a180 2
        struct open_file *f;
        const char *fname;
d193 1
a193 1
	
d196 1
a196 1
	
d198 1
a198 1
	
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: devopen.c,v 1.3 1995/09/16 13:18:29 ragge Exp $ */
d185 1
a185 1
	int adapt = 0;	/* XXX not used on HP */
d192 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
