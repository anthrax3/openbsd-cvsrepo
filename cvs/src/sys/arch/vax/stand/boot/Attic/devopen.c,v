head	1.6;
access;
symbols
	OPENBSD_5_9:1.5.0.18
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.6
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.5;
commitid	OSDG2O3Cgeifnf1W;

1.5
date	2011.07.06.18.32.59;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.26.18.36.21;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.04.04.09.01;	author bjc;	state Exp;
branches
	1.2.6.1
	1.2.10.1;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.21.37.45;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.2.10.1
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: devopen.c,v 1.5 2011/07/06 18:32:59 miod Exp $ */
/*	$NetBSD: devopen.c,v 1.10 2002/05/24 21:40:59 ragge Exp $ */
/*
 * Copyright (c) 1997 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of 
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <lib/libsa/stand.h>

#include "machine/rpb.h"
#include "machine/sid.h"
#include "machine/pte.h"

#include "vaxstand.h"

int	atoi(char *);
int nexaddr, csrbase;

int
devopen(f, fname, file)
	struct open_file *f;
	const char *fname;
	char **file;
{
	int dev, unit, ctlr, part, adapt, i, a[4], x;
	int *mapregs;
	struct devsw *dp;
	extern int cnvtab[];
	char *s, *c;

	part = 0;

	/*
	 * Adaptor and controller are normally zero (or uninteresting),
	 * but we need to do some conversion here anyway (if it's a 
	 * manual boot, but that's checked by the device driver).
	 * Set them to -1 to tell if it's a set number or default.
	 */
	dev = bootrpb.devtyp;
	unit = bootrpb.unit;
	adapt = ctlr = -1;

	if (dev == BDEV_KDB)
		dev = BDEV_UDA; /* use the same driver */

	for (i = 0, dp = 0; i < ndevs; i++)
		if (cnvtab[i] == dev)
			dp = devsw + i;

	if ((s = index((char *)fname, '('))) {
		*s++ = 0;

		for (i = 0, dp = devsw; i < ndevs; i++, dp++)
			if (dp->dv_name && strcmp(dp->dv_name, fname) == 0)
				break;

		if (i == ndevs) {
			printf("No such device - Configured devices are:\n");
			for (dp = devsw, i = 0; i < ndevs; i++, dp++)
				if (dp->dv_name && (i == 0 ||
				    strcmp(dp->dv_name, (dp[-1]).dv_name) != 0))
					printf(" %s", dp->dv_name);
			printf("\n");
			return EINVAL;
		}

		dev = cnvtab[i];
		if ((c = index(s, ')')) == 0)
			goto usage;
		*c++ = 0;

		/*
		 * If the user has specified sd(), we need to pick the
		 * correct BDEV_SDx value, depending on the machine type.
		 */
		if (dev == BDEV_SD) {
			switch (vax_boardtype) {
			case VAX_BTYP_46:
			case VAX_BTYP_48:
			case VAX_BTYP_49:
			case VAX_BTYP_1303:
				dev = BDEV_SDN;		/* asc(4) */
				break;
			case VAX_BTYP_60:
				dev = BDEV_SDS;		/* sii(4) */
				break;
			}
		}

		x = 0;
		if (*s) do {
			a[x++] = atoi(s);
			while (*s >= '0' && *s <= '9')
				s++;

			if (*s != ',' && *s != 0)
				goto usage;
		} while (*s++);

		if (x)
			part = a[x - 1];
		if (x > 1)
			unit = a[x - 2];
		if (x > 2)
			ctlr = a[x - 3];
		if (x > 3)
			adapt = a[0];
		*file = c;
	} else {
		*file = (char *)fname;
		c = (char *)fname;
	}

	if (!dp->dv_open) {
		printf("Can't open device type %d\n", dev);
		return ENXIO;
	}
	f->f_dev = dp;
	bootrpb.unit = unit;
	bootrpb.devtyp = dev;

	nexaddr = bootrpb.adpphy;
	switch (vax_boardtype) {
	case VAX_BTYP_610:
		nexaddr = 0; /* No map regs */
		csrbase = 0x20000000;
		break;

	case VAX_BTYP_VXT:
		nexaddr = 0;
		csrbase = bootrpb.csrphy;
		break;
	default:
		nexaddr = 0; /* No map regs */
		csrbase = 0x20000000;
		/* Always map in the lowest 4M on qbus-based machines */
		mapregs = (void *)0x20088000;
		if (bootrpb.adpphy == 0x20087800)
			for (i = 0; i < 8192; i++)
				mapregs[i] = PG_V | i;
		break;
	}

#ifdef DEV_DEBUG
	printf("rpb.type %d rpb.unit %d rpb.csr %lx rpb.adp %lx\n",
	    bootrpb.devtyp, bootrpb.unit, bootrpb.csrphy, bootrpb.adpphy);
	printf("adapter %d ctlr %d unit %d part %d\n", adapt, ctlr, unit, part);
	printf("nexaddr %x csrbase %x\n", nexaddr, csrbase);
#endif

	return (*dp->dv_open)(f, adapt, ctlr, unit, part);

usage:
	printf("usage: dev(adapter,controller,unit,partition)file -asd\n");
	return EINVAL;
}
@


1.5
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.4 2008/08/26 18:36:21 miod Exp $ */
@


1.4
log
@When using the not-documented-but-ought-to 'boot sd(...)file' syntax (e.g.
when mopbooting the bootblocks because one trashed the ones on disk by
accident), be sure to use the proper BDEV_SDx rpb device type value,
depending on the type of onboard controller. Crank version.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.3 2002/06/11 09:36:23 hugh Exp $ */
a38 4
#define	VAX780 1
#include "machine/ka750.h"

#include <arch/vax/bi/bireg.h>
a149 38
	case VAX_BTYP_750:
		csrbase = (nexaddr == 0xf30000 ? 0xffe000 : 0xfbe000);
		if (adapt < 0)
			break;
		nexaddr = (NEX750 + NEXSIZE * adapt);
		csrbase = (adapt == 8 ? 0xffe000 : 0xfbe000);
		break;
	case VAX_BTYP_780:
	case VAX_BTYP_790:
		csrbase = 0x2007e000 + 0x40000 * ((nexaddr & 0x1e000) >> 13);
		if (adapt < 0)
			break;
		nexaddr = ((int)NEX780 + NEXSIZE * adapt);
		csrbase = 0x2007e000 + 0x40000 * adapt;
		break;
	case VAX_BTYP_9CC: /* 6000/200 */
	case VAX_BTYP_9RR: /* 6000/400 */
	case VAX_BTYP_1202: /* 6000/500 */
		csrbase = 0;
		if (ctlr < 0)
			ctlr = bootrpb.adpphy & 15;
		if (adapt < 0)
			adapt = (bootrpb.adpphy >> 4) & 15;
		nexaddr = BI_BASE(adapt, ctlr);
		break;

	case VAX_BTYP_8000:
	case VAX_BTYP_8800:
	case VAX_BTYP_8PS:
		csrbase = 0; /* _may_ be a KDB */
		nexaddr = bootrpb.csrphy;
		if (ctlr < 0)
			break;
		if (adapt < 0)
			nexaddr = (nexaddr & 0xff000000) + BI_NODE(ctlr);
		else
			nexaddr = BI_BASE(adapt, ctlr);
		break;
@


1.3
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.2 2000/10/04 04:09:01 bjc Exp $ */
d34 1
a34 1
#include "lib/libsa/stand.h"
d42 1
a42 1
#include "arch/vax/bi/bireg.h"
a79 1
	x = 0;
d90 2
a91 1
				if (dp->dv_name)
d94 1
a94 1
			return -1;
d96 1
d100 1
d102 17
a118 1
		*c++ = 0;
d120 1
d146 1
a146 1
		return(ENODEV);
d223 1
a223 1
	return -1;
@


1.2
log
@eliminate some confusion between rpb and howto -- also make sure that
the "dev()filename" notation is parsed.
@
text
@d1 2
a2 2
/*  $OpenBSD: devopen.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
/*	$NetBSD: devopen.c,v 1.2 1999/06/30 18:30:42 ragge Exp $ */
d34 9
a42 1
#include <sys/reboot.h>
a43 1
#include "lib/libsa/stand.h"
a44 1
#include "rpb.h"
d46 2
a47 2
unsigned int opendev;
extern struct rpb *rpb;
d55 2
a56 1
	int dev, ctlr, unit, part, adapt, i, a[4], x;
d59 3
a61 1
	char *s, *c, *u;
d63 12
a74 3
	dev		= rpb->devtyp;
	unit	= rpb->unit;
	adapt = ctlr = part = 0;
d81 1
a81 1
	if ((s = index(fname, '('))) {
a119 2

		x = 1;
d125 2
a126 1
	if (!dp->dv_open)
d128 1
d130 2
d133 58
a190 8
	if (dev > 95) { /* MOP boot over network, root & swap over NFS */
		i = (*dp->dv_open)(f, dp->dv_name);
	} else
		i = (*dp->dv_open)(f, adapt, ctlr, unit, part);

	if(x == 0) {
		dev = rpb->devtyp;		/* dv_open may have modified rpb */
		unit = rpb->unit;	
a191 1
	opendev = MAKEBOOTDEV(dev, adapt, ctlr, unit, part);
d193 8
a200 1
	return i;
@


1.2.10.1
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: devopen.c,v 1.10 2002/05/24 21:40:59 ragge Exp $ */
d34 2
a36 9

#include "machine/rpb.h"
#include "machine/sid.h"
#include "machine/pte.h"
#define	VAX780 1
#include "machine/ka750.h"

#include "arch/vax/bi/bireg.h"

d38 1
d40 2
a41 2
int	atoi(char *);
int nexaddr, csrbase;
d49 1
a49 2
	int dev, unit, ctlr, part, adapt, i, a[4], x;
	int *mapregs;
d52 1
a52 3
	char *s, *c;

	part = 0;
d54 3
a56 12
	/*
	 * Adaptor and controller are normally zero (or uninteresting),
	 * but we need to do some conversion here anyway (if it's a 
	 * manual boot, but that's checked by the device driver).
	 * Set them to -1 to tell if it's a set number or default.
	 */
	dev = bootrpb.devtyp;
	unit = bootrpb.unit;
	adapt = ctlr = -1;

	if (dev == BDEV_KDB)
		dev = BDEV_UDA; /* use the same driver */
d63 1
a63 1
	if ((s = index((char *)fname, '('))) {
d102 2
d109 1
a109 2
	if (!dp->dv_open) {
		printf("Can't open device type %d\n", dev);
a110 1
	}
a111 2
	bootrpb.unit = unit;
	bootrpb.devtyp = dev;
d113 8
a120 58
	nexaddr = bootrpb.adpphy;
	switch (vax_boardtype) {
	case VAX_BTYP_750:
		csrbase = (nexaddr == 0xf30000 ? 0xffe000 : 0xfbe000);
		if (adapt < 0)
			break;
		nexaddr = (NEX750 + NEXSIZE * adapt);
		csrbase = (adapt == 8 ? 0xffe000 : 0xfbe000);
		break;
	case VAX_BTYP_780:
	case VAX_BTYP_790:
		csrbase = 0x2007e000 + 0x40000 * ((nexaddr & 0x1e000) >> 13);
		if (adapt < 0)
			break;
		nexaddr = ((int)NEX780 + NEXSIZE * adapt);
		csrbase = 0x2007e000 + 0x40000 * adapt;
		break;
	case VAX_BTYP_9CC: /* 6000/200 */
	case VAX_BTYP_9RR: /* 6000/400 */
	case VAX_BTYP_1202: /* 6000/500 */
		csrbase = 0;
		if (ctlr < 0)
			ctlr = bootrpb.adpphy & 15;
		if (adapt < 0)
			adapt = (bootrpb.adpphy >> 4) & 15;
		nexaddr = BI_BASE(adapt, ctlr);
		break;

	case VAX_BTYP_8000:
	case VAX_BTYP_8800:
	case VAX_BTYP_8PS:
		csrbase = 0; /* _may_ be a KDB */
		nexaddr = bootrpb.csrphy;
		if (ctlr < 0)
			break;
		if (adapt < 0)
			nexaddr = (nexaddr & 0xff000000) + BI_NODE(ctlr);
		else
			nexaddr = BI_BASE(adapt, ctlr);
		break;
	case VAX_BTYP_610:
		nexaddr = 0; /* No map regs */
		csrbase = 0x20000000;
		break;

	case VAX_BTYP_VXT:
		nexaddr = 0;
		csrbase = bootrpb.csrphy;
		break;
	default:
		nexaddr = 0; /* No map regs */
		csrbase = 0x20000000;
		/* Always map in the lowest 4M on qbus-based machines */
		mapregs = (void *)0x20088000;
		if (bootrpb.adpphy == 0x20087800)
			for (i = 0; i < 8192; i++)
				mapregs[i] = PG_V | i;
		break;
d122 1
d124 1
a124 8
#ifdef DEV_DEBUG
	printf("rpb.type %d rpb.unit %d rpb.csr %lx rpb.adp %lx\n",
	    bootrpb.devtyp, bootrpb.unit, bootrpb.csrphy, bootrpb.adpphy);
	printf("adapter %d ctlr %d unit %d part %d\n", adapt, ctlr, unit, part);
	printf("nexaddr %x csrbase %x\n", nexaddr, csrbase);
#endif

	return (*dp->dv_open)(f, adapt, ctlr, unit, part);
@


1.2.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*  $OpenBSD: devopen.c,v 1.2 2000/10/04 04:09:01 bjc Exp $ */
@


1.2.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: devopen.c,v 1.10 2002/05/24 21:40:59 ragge Exp $ */
d34 2
a36 9

#include "machine/rpb.h"
#include "machine/sid.h"
#include "machine/pte.h"
#define	VAX780 1
#include "machine/ka750.h"

#include "arch/vax/bi/bireg.h"

d38 1
d40 2
a41 2
int	atoi(char *);
int nexaddr, csrbase;
d49 1
a49 2
	int dev, unit, ctlr, part, adapt, i, a[4], x;
	int *mapregs;
d52 1
a52 3
	char *s, *c;

	part = 0;
d54 3
a56 12
	/*
	 * Adaptor and controller are normally zero (or uninteresting),
	 * but we need to do some conversion here anyway (if it's a 
	 * manual boot, but that's checked by the device driver).
	 * Set them to -1 to tell if it's a set number or default.
	 */
	dev = bootrpb.devtyp;
	unit = bootrpb.unit;
	adapt = ctlr = -1;

	if (dev == BDEV_KDB)
		dev = BDEV_UDA; /* use the same driver */
d63 1
a63 1
	if ((s = index((char *)fname, '('))) {
d102 2
d109 1
a109 2
	if (!dp->dv_open) {
		printf("Can't open device type %d\n", dev);
a110 1
	}
a111 2
	bootrpb.unit = unit;
	bootrpb.devtyp = dev;
d113 8
a120 58
	nexaddr = bootrpb.adpphy;
	switch (vax_boardtype) {
	case VAX_BTYP_750:
		csrbase = (nexaddr == 0xf30000 ? 0xffe000 : 0xfbe000);
		if (adapt < 0)
			break;
		nexaddr = (NEX750 + NEXSIZE * adapt);
		csrbase = (adapt == 8 ? 0xffe000 : 0xfbe000);
		break;
	case VAX_BTYP_780:
	case VAX_BTYP_790:
		csrbase = 0x2007e000 + 0x40000 * ((nexaddr & 0x1e000) >> 13);
		if (adapt < 0)
			break;
		nexaddr = ((int)NEX780 + NEXSIZE * adapt);
		csrbase = 0x2007e000 + 0x40000 * adapt;
		break;
	case VAX_BTYP_9CC: /* 6000/200 */
	case VAX_BTYP_9RR: /* 6000/400 */
	case VAX_BTYP_1202: /* 6000/500 */
		csrbase = 0;
		if (ctlr < 0)
			ctlr = bootrpb.adpphy & 15;
		if (adapt < 0)
			adapt = (bootrpb.adpphy >> 4) & 15;
		nexaddr = BI_BASE(adapt, ctlr);
		break;

	case VAX_BTYP_8000:
	case VAX_BTYP_8800:
	case VAX_BTYP_8PS:
		csrbase = 0; /* _may_ be a KDB */
		nexaddr = bootrpb.csrphy;
		if (ctlr < 0)
			break;
		if (adapt < 0)
			nexaddr = (nexaddr & 0xff000000) + BI_NODE(ctlr);
		else
			nexaddr = BI_BASE(adapt, ctlr);
		break;
	case VAX_BTYP_610:
		nexaddr = 0; /* No map regs */
		csrbase = 0x20000000;
		break;

	case VAX_BTYP_VXT:
		nexaddr = 0;
		csrbase = bootrpb.csrphy;
		break;
	default:
		nexaddr = 0; /* No map regs */
		csrbase = 0x20000000;
		/* Always map in the lowest 4M on qbus-based machines */
		mapregs = (void *)0x20088000;
		if (bootrpb.adpphy == 0x20087800)
			for (i = 0; i < 8192; i++)
				mapregs[i] = PG_V | i;
		break;
d122 1
d124 1
a124 8
#ifdef DEV_DEBUG
	printf("rpb.type %d rpb.unit %d rpb.csr %lx rpb.adp %lx\n",
	    bootrpb.devtyp, bootrpb.unit, bootrpb.csrphy, bootrpb.adpphy);
	printf("adapter %d ctlr %d unit %d part %d\n", adapt, ctlr, unit, part);
	printf("nexaddr %x csrbase %x\n", nexaddr, csrbase);
#endif

	return (*dp->dv_open)(f, adapt, ctlr, unit, part);
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 1
a1 1
/*  $OpenBSD: devopen.c,v 1.5 1998/02/03 11:48:26 maja Exp $ */
d38 1
d41 1
d54 3
a56 5
	dev   = B_TYPE(bootdev);
	ctlr  = B_CONTROLLER(bootdev);
	unit  = B_UNIT(bootdev);
	part  = B_PARTITION(bootdev);
	adapt = B_ADAPTOR(bootdev);
d102 2
a112 2
	opendev = MAKEBOOTDEV(dev, adapt, ctlr, unit, part);

d117 6
@

