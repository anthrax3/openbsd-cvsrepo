head	1.7;
access;
symbols
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.7
date	2016.03.09.16.28.49;	author deraadt;	state dead;
branches;
next	1.6;
commitid	OSDG2O3Cgeifnf1W;

1.6
date	2015.10.01.16.08.20;	author krw;	state Exp;
branches;
next	1.5;
commitid	43YBo4Ce0DxgFS6N;

1.5
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.11.09.36.23;	author hugh;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.03.16.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.04.04.48.54;	author bjc;	state Exp;
branches
	1.2.6.1
	1.2.10.1;
next	1.1;

1.1
date	2000.04.27.02.26.25;	author bjc;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.21.37.48;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.03.27.23.52.19;	author niklas;	state Exp;
branches;
next	;

1.2.10.1
date	2002.06.11.03.39.18;	author art;	state Exp;
branches;
next	1.2.10.2;

1.2.10.2
date	2002.10.29.00.28.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: rom.c,v 1.6 2015/10/01 16:08:20 krw Exp $ */
/*	$NetBSD: rom.c,v 1.3 2000/07/19 00:58:25 matt Exp $ */
/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * All rights reserved.
 *
 * This code is derived from software contributed to Ludd by
 * Bertram Barth.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed at Ludd, University of
 *      Lule}, Sweden and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "sys/param.h"
#include "sys/reboot.h"
#include "sys/disklabel.h"

#include "lib/libsa/stand.h"
#include "lib/libsa/ufs.h"

#include "../include/pte.h"
#include "../include/sid.h"
#include "../include/mtpr.h"
#include "../include/reg.h"
#include "../include/rpb.h"

#include "data.h"
#include "vaxstand.h"

static struct disklabel romlabel;
static char io_buf[DEV_BSIZE];
static struct bqo *bqo;
static int dpart, dunit;

int
romopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
{
	char *msg;
	struct disklabel *lp = &romlabel;
	size_t i;
	int err;

	bqo = (void *)bootrpb.iovec;

	if (bootrpb.unit > 0 && (bootrpb.unit % 100) == 0) {
		printf ("changing bootrpb.unit from %d ", bootrpb.unit);
		bootrpb.unit /= 100;
		printf ("to %d\n", bootrpb.unit);
	}

	bzero(lp, sizeof(struct disklabel));
	dunit = unit;
	dpart = part;

	err = romstrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
	if (err) {
		printf("reading disklabel: %s\n",strerror(err));
		return 0;
	}
	msg = getdisklabel(io_buf+LABELOFFSET, lp);
	if (msg)
		printf("getdisklabel: %s\n",msg);
	return(0);
}

int	romwrite_uvax(int, int, void *, struct rpb *);
int	romread_uvax(int, int, void *, struct rpb *);

int
romstrategy (f, func, dblk, size, buf, rsize)
	void *f;
	int func;
	daddr32_t dblk;
	size_t size;
	void *buf;
	size_t *rsize;
{
	struct	disklabel *lp;
	int	block;

	lp = &romlabel;
	block = dblk + lp->d_partitions[dpart].p_offset;
	if (dunit >= 0 && dunit < 10)
		bootrpb.unit = dunit;

	if (func == F_WRITE)
		romwrite_uvax(block, size, buf, &bootrpb);
	else
		romread_uvax(block, size, buf, &bootrpb);

	*rsize = size;
	return 0;
}

@


1.6
log
@Remove more blinding trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: rom.c,v 1.5 2011/03/13 00:13:53 deraadt Exp $ */
@


1.5
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: rom.c,v 1.4 2002/06/11 09:36:23 hugh Exp $ */
d20 1
a20 1
 *      This product includes software developed at Ludd, University of 
@


1.4
log
@New boot code, mostly from ragge's work in NetBSD.
Some header syncing and a couple network drivers came along for the ride.
Assembly files have been renamed from .s to .S to facilitate diffs.
Kernel is backwards compat - with manual interaction.
OpenBSD features have been preserved.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d96 1
a96 1
	daddr_t dblk;
@


1.3
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 2
a2 2
/*	$OpenBSD: rom.c,v 1.2 2000/10/04 04:48:54 bjc Exp $ */
/*	$NetBSD: rom.c,v 1.1 1996/08/02 11:22:21 ragge Exp $ */
d53 4
a56 2
extern unsigned *bootregs;
extern struct rpb *rpb;
d58 2
a59 13
struct rom_softc {
	int part;
	int unit;
};

int	romstrategy(), romopen();
struct	disklabel romlabel;
struct  rom_softc rom_softc;
char	io_buf[DEV_BSIZE];

romopen(f, adapt, ctlr, unit, part)
	struct open_file *f;
        int ctlr, unit, part;
d63 2
a64 2
	volatile struct rom_softc *rsc = &rom_softc;
	int i,err;
d66 1
a66 2
	bootregs[11] = XXRPB;
	bqo = (void *)rpb->iovec;
d68 4
a71 4
	if (rpb->unit > 0 && (rpb->unit % 100) == 0) {
		printf ("changing rpb->unit from %d ", rpb->unit);
		rpb->unit /= 100;
		printf ("to %d\n", rpb->unit);
d75 2
a76 2
	rsc->unit = unit;
	rsc->part = part;
d78 1
a78 1
	err = romstrategy(rsc, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
a85 1
	f->f_devdata = (void *)rsc;
d89 7
a95 3
romstrategy (rsc, func, dblk, size, buf, rsize)
	struct  rom_softc *rsc;
	int     func;
d97 3
a99 2
	char    *buf;
	int     size, *rsize;
d105 3
a107 3
	block = dblk + lp->d_partitions[rsc->part].p_offset;
	if (rsc->unit >= 0 && rsc->unit < 10)
		rpb->unit = rsc->unit;
d110 1
a110 1
		romwrite_uvax(block, size, buf, bootregs);
d112 1
a112 1
		romread_uvax(block, size, buf, bootregs);
@


1.2
log
@do not mess with rpb once it's initialized
@
text
@d1 1
a1 1
/*	$OpenBSD: rom.c,v 1.1 2000/04/27 02:26:25 bjc Exp $ */
d76 1
a76 1
	bqo = (void*)rpb->iovec;
d96 1
a96 1
	f->f_devdata = (void*)rsc;
@


1.2.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rom.c,v 1.2 2000/10/04 04:48:54 bjc Exp $ */
d76 1
a76 1
	bqo = (void *)rpb->iovec;
d96 1
a96 1
	f->f_devdata = (void *)rsc;
@


1.2.10.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: rom.c,v 1.3 2000/07/19 00:58:25 matt Exp $ */
d53 2
a54 4
static struct disklabel romlabel;
static char io_buf[DEV_BSIZE];
static struct bqo *bqo;
static int dpart, dunit;
d56 13
a68 2
int
romopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d72 2
a73 2
	size_t i;
	int err;
d75 2
a76 1
	bqo = (void *)bootrpb.iovec;
d78 4
a81 4
	if (bootrpb.unit > 0 && (bootrpb.unit % 100) == 0) {
		printf ("changing bootrpb.unit from %d ", bootrpb.unit);
		bootrpb.unit /= 100;
		printf ("to %d\n", bootrpb.unit);
d85 2
a86 2
	dunit = unit;
	dpart = part;
d88 1
a88 1
	err = romstrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d96 1
d100 3
a102 7
int	romwrite_uvax(int, int, void *, struct rpb *);
int	romread_uvax(int, int, void *, struct rpb *);

int
romstrategy (f, func, dblk, size, buf, rsize)
	void *f;
	int func;
d104 2
a105 3
	size_t size;
	void *buf;
	size_t *rsize;
d111 3
a113 3
	block = dblk + lp->d_partitions[dpart].p_offset;
	if (dunit >= 0 && dunit < 10)
		bootrpb.unit = dunit;
d116 1
a116 1
		romwrite_uvax(block, size, buf, &bootrpb);
d118 1
a118 1
		romread_uvax(block, size, buf, &bootrpb);
@


1.2.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: rom.c,v 1.2 2000/10/04 04:48:54 bjc Exp $ */
@


1.2.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d76 1
a76 1
	bqo = (void *)rpb->iovec;
d96 1
a96 1
	f->f_devdata = (void *)rsc;
@


1.2.6.3
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: rom.c,v 1.3 2000/07/19 00:58:25 matt Exp $ */
d53 2
a54 4
static struct disklabel romlabel;
static char io_buf[DEV_BSIZE];
static struct bqo *bqo;
static int dpart, dunit;
d56 13
a68 2
int
romopen(struct open_file *f, int adapt, int ctlr, int unit, int part)
d72 2
a73 2
	size_t i;
	int err;
d75 2
a76 1
	bqo = (void *)bootrpb.iovec;
d78 4
a81 4
	if (bootrpb.unit > 0 && (bootrpb.unit % 100) == 0) {
		printf ("changing bootrpb.unit from %d ", bootrpb.unit);
		bootrpb.unit /= 100;
		printf ("to %d\n", bootrpb.unit);
d85 2
a86 2
	dunit = unit;
	dpart = part;
d88 1
a88 1
	err = romstrategy(0, F_READ, LABELSECTOR, DEV_BSIZE, io_buf, &i);
d96 1
d100 3
a102 7
int	romwrite_uvax(int, int, void *, struct rpb *);
int	romread_uvax(int, int, void *, struct rpb *);

int
romstrategy (f, func, dblk, size, buf, rsize)
	void *f;
	int func;
d104 2
a105 3
	size_t size;
	void *buf;
	size_t *rsize;
d111 3
a113 3
	block = dblk + lp->d_partitions[dpart].p_offset;
	if (dunit >= 0 && dunit < 10)
		bootrpb.unit = dunit;
d116 1
a116 1
		romwrite_uvax(block, size, buf, &bootrpb);
d118 1
a118 1
		romread_uvax(block, size, buf, &bootrpb);
@


1.1
log
@sync with netbsd -- this involved rearranging things for sanity reasons
and because separate builds of libsa are done.  this is a pretty nice
bootloader.
@
text
@d1 1
a1 1
/*	$OpenBSD: rom.c,v 1.3 1998/05/13 07:30:26 niklas Exp $ */
a75 1
	rpb = (void*)XXRPB;
@

