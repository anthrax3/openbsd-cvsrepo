head	1.15;
access;
symbols
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.8
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.2
	UBC_BASE:1.4
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.14;
commitid	OSDG2O3Cgeifnf1W;

1.14
date	2015.07.04.12.49.55;	author dlg;	state Exp;
branches;
next	1.13;
commitid	hkG0H1fcXgGmgO1q;

1.13
date	2015.07.04.10.27.05;	author dlg;	state Exp;
branches;
next	1.12;
commitid	p2UGwwDorFF21Uzt;

1.12
date	2012.12.05.23.20.15;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.06.18.32.59;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.02.20.58.39;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.24.04.54.49;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.15.07.02.37;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.27.57;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.29.20.15.43;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.05.03.04.38;	author hugh;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.04.27.03.14.46;	author bjc;	state Exp;
branches;
next	1.2;

1.2
date	97.05.29.00.05.03;	author niklas;	state Exp;
branches
	1.2.12.1;
next	1.1;

1.1
date	97.01.15.23.24.51;	author maja;	state Exp;
branches;
next	;

1.2.12.1
date	2001.05.14.21.38.14;	author niklas;	state Exp;
branches;
next	1.2.12.2;

1.2.12.2
date	2002.03.06.02.04.48;	author niklas;	state Exp;
branches;
next	1.2.12.3;

1.2.12.3
date	2002.03.28.11.26.46;	author niklas;	state Exp;
branches;
next	1.2.12.4;

1.2.12.4
date	2003.03.27.23.52.20;	author niklas;	state Exp;
branches;
next	1.2.12.5;

1.2.12.5
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	;

1.4.2.1
date	2002.06.11.03.39.19;	author art;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.05.19.21.46.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: mscp_subr.c,v 1.14 2015/07/04 12:49:55 dlg Exp $	*/
/*	$NetBSD: mscp_subr.c,v 1.18 2001/11/13 07:38:28 lukem Exp $	*/
/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * Copyright (c) 1988 Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mscp.c	7.5 (Berkeley) 12/16/90
 */

/*
 * MSCP generic driver routines
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <machine/bus.h>
#include <machine/sid.h>

#include <arch/vax/mscp/mscp.h>
#include <arch/vax/mscp/mscpreg.h>
#include <arch/vax/mscp/mscpvar.h>

#include "ra.h"
#include "mt.h"

int	mscp_match(struct device *, struct cfdata *, void *);
void	mscp_attach(struct device *, struct device *, void *);
void	mscp_start(struct	mscp_softc *);
int	mscp_init(struct  mscp_softc *);
void	mscp_initds(struct mscp_softc *);
int	mscp_waitstep(struct mscp_softc *, int, int);

struct	cfattach mscpbus_ca = {
	sizeof(struct mscp_softc), (cfmatch_t)mscp_match, mscp_attach
};

struct cfdriver mscpbus_cd = {
	NULL, "mscpbus", DV_DULL
};

#define	READ_SA		(bus_space_read_2(mi->mi_iot, mi->mi_sah, 0))
#define	READ_IP		(bus_space_read_2(mi->mi_iot, mi->mi_iph, 0))
#define	WRITE_IP(x)	bus_space_write_2(mi->mi_iot, mi->mi_iph, 0, (x))
#define	WRITE_SW(x)	bus_space_write_2(mi->mi_iot, mi->mi_swh, 0, (x))

struct	mscp slavereply;

/*
 * This function is for delay during init. Some MSCP clone card (Dilog)
 * can't handle fast read from its registers, and therefore need
 * a delay between them.
 */

#define DELAYTEN 1000
int
mscp_waitstep(mi, mask, result)
	struct mscp_softc *mi;
	int mask, result;
{
	int	status = 1;

	if ((READ_SA & mask) != result) {
		volatile int count = 0;
		while ((READ_SA & mask) != result) {
			DELAY(10000);
			count += 1;
			if (count > DELAYTEN)
				break;
		}
		if (count > DELAYTEN)
			status = 0;
	}
	return status;
}

int
mscp_match(parent, match, aux)
	struct device *parent;
	struct cfdata *match;
	void *aux;
{
	struct	mscp_attach_args *ma = aux;

#if NRA || NRX
	if (ma->ma_type & MSCPBUS_DISK)
		return 1;
#endif
#if NMT
	if (ma->ma_type & MSCPBUS_TAPE)
		return 1;
#endif
	return 0;
};

void
mscp_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct	mscp_attach_args *ma = aux;
	struct	mscp_softc *mi = (void *)self;
	volatile struct mscp *mp;
	volatile int i;
	int	timeout, next = 0;

	mi->mi_mc = ma->ma_mc;
	mi->mi_me = NULL;
	mi->mi_type = ma->ma_type;
	mi->mi_uda = ma->ma_uda;
	mi->mi_dmat = ma->ma_dmat;
	mi->mi_dmam = ma->ma_dmam;
	mi->mi_iot = ma->ma_iot;
	mi->mi_iph = ma->ma_iph;
	mi->mi_sah = ma->ma_sah;
	mi->mi_swh = ma->ma_swh;
	mi->mi_ivec = ma->ma_ivec;
	mi->mi_adapnr = ma->ma_adapnr;
	mi->mi_ctlrnr = ma->ma_ctlrnr;
	*ma->ma_softc = mi;
	/*
	 * Go out to init the bus, so that we can give commands
	 * to its devices.
	 */
	mi->mi_cmd.mri_size = NCMD;
	mi->mi_cmd.mri_desc = mi->mi_uda->mp_ca.ca_cmddsc;
	mi->mi_cmd.mri_ring = mi->mi_uda->mp_cmd;
	mi->mi_rsp.mri_size = NRSP;
	mi->mi_rsp.mri_desc = mi->mi_uda->mp_ca.ca_rspdsc;
	mi->mi_rsp.mri_ring = mi->mi_uda->mp_rsp;
	bufq_init(&mi->mi_bufq, BUFQ_FIFO);

	if (mscp_init(mi)) {
		printf("%s: can't init, controller hung\n",
		    mi->mi_dev.dv_xname);
		return;
	}
	for (i = 0; i < NCMD; i++) {
		mi->mi_mxiuse |= (1 << i);
		if (bus_dmamap_create(mi->mi_dmat, (64*1024), 16, (64*1024),
		    0, BUS_DMA_NOWAIT, &mi->mi_xi[i].mxi_dmam)) {
			printf("Couldn't alloc dmamap %d\n", i);
			return;
		}
	}
	

#if NRA
	if (ma->ma_type & MSCPBUS_DISK) {
		extern	struct mscp_device ra_device;

		mi->mi_me = &ra_device;
	}
#endif
#if NMT
	if (ma->ma_type & MSCPBUS_TAPE) {
		extern	struct mscp_device mt_device;

		mi->mi_me = &mt_device;
	}
#endif
	/*
	 * Go out and search for sub-units on this MSCP bus,
	 * and call config_found for each found.
	 */
findunit:
	mp = mscp_getcp(mi, MSCP_DONTWAIT);
	if (mp == NULL)
		panic("mscpattach: no packets");
	mp->mscp_opcode = M_OP_GETUNITST;
	mp->mscp_unit = next;
	mp->mscp_modifier = M_GUM_NEXTUNIT;
	*mp->mscp_addr |= MSCP_OWN | MSCP_INT;
	slavereply.mscp_opcode = 0;

	i = bus_space_read_2(mi->mi_iot, mi->mi_iph, 0);
	mp = &slavereply;
	timeout = 1000;
	while (timeout-- > 0) {
		DELAY(10000);
		if (mp->mscp_opcode)
			goto gotit;
	}
	printf("%s: no response to Get Unit Status request\n",
	    mi->mi_dev.dv_xname);
	return;

gotit:	/*
	 * Got a slave response.  If the unit is there, use it.
	 */
	switch (mp->mscp_status & M_ST_MASK) {

	case M_ST_SUCCESS:	/* worked */
	case M_ST_AVAILABLE:	/* found another drive */
		break;		/* use it */

	case M_ST_OFFLINE:
		/*
		 * Figure out why it is off line.  It may be because
		 * it is nonexistent, or because it is spun down, or
		 * for some other reason.
		 */
		switch (mp->mscp_status & ~M_ST_MASK) {

		case M_OFFLINE_UNKNOWN:
			/*
			 * No such drive, and there are none with
			 * higher unit numbers either, if we are
			 * using M_GUM_NEXTUNIT.
			 */
			mi->mi_ierr = 3;
			return;

		case M_OFFLINE_UNMOUNTED:
			/*
			 * The drive is not spun up.  Use it anyway.
			 *
			 * N.B.: this seems to be a common occurrance
			 * after a power failure.  The first attempt
			 * to bring it on line seems to spin it up
			 * (and thus takes several minutes).  Perhaps
			 * we should note here that the on-line may
			 * take longer than usual.
			 */
			break;

		default:
			/*
			 * In service, or something else equally unusable.
			 */
			printf("%s: unit %d off line: ", mi->mi_dev.dv_xname,
				mp->mscp_unit);
			mscp_printevent((struct mscp *)mp);
			next++;
			goto findunit;
		}
		break;

	default:
		printf("%s: unable to get unit status: ", mi->mi_dev.dv_xname);
		mscp_printevent((struct mscp *)mp);
		return;
	}

	/*
	 * If we get a lower number, we have circulated around all
	 * devices and are finished, otherwise try to find next unit.
	 * We shouldn't ever get this, it's a workaround.
	 */
	if (mp->mscp_unit < next)
		return;

	next = mp->mscp_unit + 1;
	goto findunit;
}


/*
 * The ctlr gets initialised, normally after boot but may also be 
 * done if the ctlr gets in an unknown state. Returns 1 if init
 * fails, 0 otherwise.
 */
int
mscp_init(mi)
	struct	mscp_softc *mi;
{
	struct	mscp *mp;
	volatile int i;
	int	status, count;
	unsigned int j = 0;

	/*
	 * While we are thinking about it, reset the next command
	 * and response indices.
	 */
	mi->mi_cmd.mri_next = 0;
	mi->mi_rsp.mri_next = 0;

	mi->mi_flags |= MSC_IGNOREINTR;

	if ((mi->mi_type & MSCPBUS_KDB) == 0)
		WRITE_IP(0); /* Kick off */;

	status = mscp_waitstep(mi, MP_STEP1, MP_STEP1);/* Wait to it wakes up */
	if (status == 0)
		return 1; /* Init failed */
	if (READ_SA & MP_ERR) {
		(*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
		return 1;
	}

	/* step1 */
	WRITE_SW(MP_ERR | (NCMDL2 << 11) | (NRSPL2 << 8) |
	    MP_IE | (mi->mi_ivec >> 2));
	status = mscp_waitstep(mi, STEP1MASK, STEP1GOOD);
	if (status == 0) {
		(*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
		return 1;
	}

	/* step2 */
	WRITE_SW((mi->mi_dmam->dm_segs[0].ds_addr & 0xffff) + 
	    offsetof(struct mscp_pack, mp_ca.ca_rspdsc[0]));
	status = mscp_waitstep(mi, STEP2MASK, STEP2GOOD(mi->mi_ivec >> 2));
	if (status == 0) {
		(*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
		return 1;
	}

	/* step3 */
	WRITE_SW((mi->mi_dmam->dm_segs[0].ds_addr >> 16));
	status = mscp_waitstep(mi, STEP3MASK, STEP3GOOD);
	if (status == 0) { 
		(*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
		return 1;
	}
	i = READ_SA & 0377;
	printf(": version %d model %d\n", i & 15, i >> 4);

#define BURST 4 /* XXX */
	if (mi->mi_type & MSCPBUS_UDA) {
		WRITE_SW(MP_GO | (BURST - 1) << 2);
		printf("%s: DMA burst size set to %d\n", 
		    mi->mi_dev.dv_xname, BURST);
	}
	WRITE_SW(MP_GO);

	mscp_initds(mi);
	mi->mi_flags &= ~MSC_IGNOREINTR;

	/*
	 * Set up all necessary info in the bus softc struct, get a
	 * mscp packet and set characteristics for this controller.
	 */
	mi->mi_credits = MSCP_MINCREDITS + 1;
	mp = mscp_getcp(mi, MSCP_DONTWAIT);

	mi->mi_credits = 0;
	mp->mscp_opcode = M_OP_SETCTLRC;
	mp->mscp_unit = mp->mscp_modifier = mp->mscp_flags =
	    mp->mscp_sccc.sccc_version = mp->mscp_sccc.sccc_hosttimo = 
	    mp->mscp_sccc.sccc_time = mp->mscp_sccc.sccc_time1 =
	    mp->mscp_sccc.sccc_errlgfl = 0;
	mp->mscp_sccc.sccc_ctlrflags = M_CF_ATTN | M_CF_MISC | M_CF_THIS;
	*mp->mscp_addr |= MSCP_OWN | MSCP_INT;
	i = READ_IP;

	count = 0;
	while (count < DELAYTEN) {
		if (((volatile int)mi->mi_flags & MSC_READY) != 0)
			break;
		if ((j = READ_SA) & MP_ERR)
			goto out;
		DELAY(10000);
		count += 1;
	}
	if (count == DELAYTEN) {
out:
		printf("%s: couldn't set ctlr characteristics, sa=%x\n", 
		    mi->mi_dev.dv_xname, j);
		return 1;
	}
	return 0;
}

/*
 * Initialise the various data structures that control the mscp protocol.
 */
void
mscp_initds(mi)
	struct mscp_softc *mi;
{
	struct mscp_pack *ud = mi->mi_uda;
	struct mscp *mp;
	int i;

	for (i = 0, mp = ud->mp_rsp; i < NRSP; i++, mp++) {
		ud->mp_ca.ca_rspdsc[i] = MSCP_OWN | MSCP_INT |
		    (mi->mi_dmam->dm_segs[0].ds_addr +
		    offsetof(struct mscp_pack, mp_rsp[i].mscp_cmdref));
		mp->mscp_addr = &ud->mp_ca.ca_rspdsc[i];
		mp->mscp_msglen = MSCP_MSGLEN;
	}
	for (i = 0, mp = ud->mp_cmd; i < NCMD; i++, mp++) {
		ud->mp_ca.ca_cmddsc[i] = MSCP_INT |
		    (mi->mi_dmam->dm_segs[0].ds_addr +
		    offsetof(struct mscp_pack, mp_cmd[i].mscp_cmdref));
		mp->mscp_addr = &ud->mp_ca.ca_cmddsc[i];
		mp->mscp_msglen = MSCP_MSGLEN;
		if (mi->mi_type & MSCPBUS_TAPE)
			mp->mscp_vcid = 1;
	}
}

static	void mscp_kickaway(struct mscp_softc *);

void
mscp_intr(mi)
	struct mscp_softc *mi;
{
	struct mscp_pack *ud = mi->mi_uda;

	if (mi->mi_flags & MSC_IGNOREINTR)
		return;
	/*
	 * Check for response and command ring transitions.
	 */
	if (ud->mp_ca.ca_rspint) {
		ud->mp_ca.ca_rspint = 0;
		mscp_dorsp(mi);
	}
	if (ud->mp_ca.ca_cmdint) {
		ud->mp_ca.ca_cmdint = 0;
		MSCP_DOCMD(mi);
	}

	/*
	 * If there are any not-yet-handled request, try them now.
	 */
	if (bufq_peek(&mi->mi_bufq))
		mscp_kickaway(mi);
}

int
mscp_print(aux, name)
	void *aux;
	const char *name;
{
	struct drive_attach_args *da = aux;
	struct	mscp *mp = da->da_mp;
	int type = mp->mscp_guse.guse_mediaid;

	if (name) {
		printf("%c%c", MSCP_MID_CHAR(2, type), MSCP_MID_CHAR(1, type));
		if (MSCP_MID_ECH(0, type))
			printf("%c", MSCP_MID_CHAR(0, type));
		printf("%d at %s drive %d", MSCP_MID_NUM(type), name,
		    mp->mscp_unit);
	}
	return UNCONF;
}

/*
 * common strategy routine for all types of MSCP devices.
 */
void
mscp_strategy(bp, usc)
	struct buf *bp;
	struct device *usc;
{
	struct	mscp_softc *mi = (void *)usc;
	int s = spl6();

	bufq_queue(&mi->mi_bufq, bp);
	mscp_kickaway(mi);
	splx(s);
}


void
mscp_kickaway(mi)
	struct	mscp_softc *mi;
{
	struct buf *bp;
	struct	mscp *mp;
	int next;

	while ((bp = bufq_dequeue(&mi->mi_bufq))) {
		/*
		 * Ok; we are ready to try to start a xfer. Get a MSCP packet
		 * and try to start...
		 */
		if ((mp = mscp_getcp(mi, MSCP_DONTWAIT)) == NULL) {
			if (mi->mi_credits > MSCP_MINCREDITS)
				printf("%s: command ring too small\n",
				    mi->mi_dev.dv_parent->dv_xname);
			/*
			 * By some (strange) reason we didn't get a MSCP packet.
			 * Just return and wait for free packets.
			 */
			bufq_requeue(&mi->mi_bufq, bp);
			return;
		}
	
		if ((next = (ffs(mi->mi_mxiuse) - 1)) < 0)
			panic("no mxi buffers");
		mi->mi_mxiuse &= ~(1 << next);
		if (mi->mi_xi[next].mxi_inuse)
			panic("mxi inuse");
		/*
		 * Set up the MSCP packet and ask the ctlr to start.
		 */
		mp->mscp_opcode =
		    (bp->b_flags & B_READ) ? M_OP_READ : M_OP_WRITE;
		mp->mscp_cmdref = next;
		mi->mi_xi[next].mxi_bp = bp;
		mi->mi_xi[next].mxi_mp = mp;
		mi->mi_xi[next].mxi_inuse = 1;
		bp->b_resid = next;
		(*mi->mi_me->me_fillin)(bp, mp);
		(*mi->mi_mc->mc_go)(mi->mi_dev.dv_parent, &mi->mi_xi[next]);
	}
}

void
mscp_dgo(mi, mxi)
	struct mscp_softc *mi;
	struct mscp_xi *mxi;
{
	volatile int i;
	struct	mscp *mp;

	/*
	 * Fill in the MSCP packet and move the buffer to the I/O wait queue.
	 */
	mp = mxi->mxi_mp;
	mp->mscp_seq.seq_buffer = mxi->mxi_dmam->dm_segs[0].ds_addr;

	*mp->mscp_addr |= MSCP_OWN | MSCP_INT;
	i = READ_IP;
}

#ifdef DIAGNOSTIC
/*
 * Dump the entire contents of an MSCP packet in hex.  Mainly useful
 * for debugging....
 */
void
mscp_hexdump(mp)
	struct mscp *mp;
{
	long *p = (long *) mp;
	int i = mp->mscp_msglen;

	if (i > 256)		/* sanity */
		i = 256;
	i /= sizeof (*p);	/* ASSUMES MULTIPLE OF sizeof(long) */
	while (--i >= 0)
		printf("0x%x ", (int)*p++);
	printf("\n");
}
#endif

/*
 * MSCP error reporting
 */

/*
 * Messages for the various subcodes.
 */
static char unknown_msg[] = "unknown subcode";

/*
 * Subcodes for Success (0)
 */
static char *succ_msgs[] = {
	"normal",		/* 0 */
	"spin down ignored",	/* 1 = Spin-Down Ignored */
	"still connected",	/* 2 = Still Connected */
	unknown_msg,
	"dup. unit #",		/* 4 = Duplicate Unit Number */
	unknown_msg,
	unknown_msg,
	unknown_msg,
	"already online",	/* 8 = Already Online */
	unknown_msg,
	unknown_msg,
	unknown_msg,
	unknown_msg,
	unknown_msg,
	unknown_msg,
	unknown_msg,
	"still online",		/* 16 = Still Online */
};

/*
 * Subcodes for Invalid Command (1)
 */
static char *icmd_msgs[] = {
	"invalid msg length",	/* 0 = Invalid Message Length */
};

/*
 * Subcodes for Command Aborted (2)
 */
/* none known */

/*
 * Subcodes for Unit Offline (3)
 */
static char *offl_msgs[] = {
	"unknown drive",	/* 0 = Unknown, or online to other ctlr */
	"not mounted",		/* 1 = Unmounted, or RUN/STOP at STOP */
	"inoperative",		/* 2 = Unit Inoperative */
	unknown_msg,
	"duplicate",		/* 4 = Duplicate Unit Number */
	unknown_msg,
	unknown_msg,
	unknown_msg,
	"in diagnosis",		/* 8 = Disabled by FS or diagnostic */
};

/*
 * Subcodes for Unit Available (4)
 */
/* none known */

/*
 * Subcodes for Media Format Error (5)
 */
static char *media_fmt_msgs[] = {
	"fct unread - edc",	/* 0 = FCT unreadable */
	"invalid sector header",/* 1 = Invalid Sector Header */
	"not 512 sectors",	/* 2 = Not 512 Byte Sectors */
	"not formatted",	/* 3 = Not Formatted */
	"fct ecc",		/* 4 = FCT ECC */
};

/*
 * Subcodes for Write Protected (6)
 * N.B.:  Code 6 subcodes are 7 bits higher than other subcodes
 * (i.e., bits 12-15).
 */
static char *wrprot_msgs[] = {
	unknown_msg,
	"software",		/* 1 = Software Write Protect */
	"hardware",		/* 2 = Hardware Write Protect */
};

/*
 * Subcodes for Compare Error (7)
 */
/* none known */

/*
 * Subcodes for Data Error (8)
 */
static char *data_msgs[] = {
	"forced error",		/* 0 = Forced Error (software) */
	unknown_msg,
	"header compare",	/* 2 = Header Compare Error */
	"sync timeout",		/* 3 = Sync Timeout Error */
	unknown_msg,
	unknown_msg,
	unknown_msg,
	"uncorrectable ecc",	/* 7 = Uncorrectable ECC */
	"1 symbol ecc",		/* 8 = 1 bit ECC */
	"2 symbol ecc",		/* 9 = 2 bit ECC */
	"3 symbol ecc",		/* 10 = 3 bit ECC */
	"4 symbol ecc",		/* 11 = 4 bit ECC */
	"5 symbol ecc",		/* 12 = 5 bit ECC */
	"6 symbol ecc",		/* 13 = 6 bit ECC */
	"7 symbol ecc",		/* 14 = 7 bit ECC */
	"8 symbol ecc",		/* 15 = 8 bit ECC */
};

/*
 * Subcodes for Host Buffer Access Error (9)
 */
static char *host_buffer_msgs[] = {
	unknown_msg,
	"odd xfer addr",	/* 1 = Odd Transfer Address */
	"odd xfer count",	/* 2 = Odd Transfer Count */
	"non-exist. memory",	/* 3 = Non-Existent Memory */
	"memory parity",	/* 4 = Memory Parity Error */
};

/*
 * Subcodes for Controller Error (10)
 */
static char *cntlr_msgs[] = {
	unknown_msg,
	"serdes overrun",	/* 1 = Serialiser/Deserialiser Overrun */
	"edc",			/* 2 = Error Detection Code? */
	"inconsistent internal data struct",/* 3 = Internal Error */
};

/*
 * Subcodes for Drive Error (11)
 */
static char *drive_msgs[] = {
	unknown_msg,
	"sdi command timeout",	/* 1 = SDI Command Timeout */
	"ctlr detected protocol",/* 2 = Controller Detected Protocol Error */
	"positioner",		/* 3 = Positioner Error */
	"lost rd/wr ready",	/* 4 = Lost R/W Ready Error */
	"drive clock dropout",	/* 5 = Lost Drive Clock */
	"lost recvr ready",	/* 6 = Lost Receiver Ready */
	"drive detected error", /* 7 = Drive Error */
	"ctlr detected pulse or parity",/* 8 = Pulse or Parity Error */
};

/*
 * The following table correlates message codes with the
 * decoding strings.
 */
struct code_decode {
	char	*cdc_msg;
	int	cdc_nsubcodes;
	char	**cdc_submsgs;
} code_decode[] = {
#define SC(m)	sizeof (m) / sizeof (m[0]), m
	{"success",			SC(succ_msgs)},
	{"invalid command",		SC(icmd_msgs)},
	{"command aborted",		0, 0},
	{"unit offline",		SC(offl_msgs)},
	{"unit available",		0, 0},
	{"media format error",		SC(media_fmt_msgs)},
	{"write protected",		SC(wrprot_msgs)},
	{"compare error",		0, 0},
	{"data error",			SC(data_msgs)},
	{"host buffer access error",	SC(host_buffer_msgs)},
	{"controller error",		SC(cntlr_msgs)},
	{"drive error",			SC(drive_msgs)},
#undef SC
};

/*
 * Print the decoded error event from an MSCP error datagram.
 */
void
mscp_printevent(mp)
	struct mscp *mp;
{
	int event = mp->mscp_event;
	struct code_decode *cdc;
	int c, sc;
	char *cm, *scm;

	/*
	 * The code is the lower six bits of the event number (aka
	 * status).  If that is 6 (write protect), the subcode is in
	 * bits 12-15; otherwise, it is in bits 5-11.
	 * I WONDER WHAT THE OTHER BITS ARE FOR.  IT SURE WOULD BE
	 * NICE IF DEC SOLD DOCUMENTATION FOR THEIR OWN CONTROLLERS.
	 */
	c = event & M_ST_MASK;
	sc = (c != 6 ? event >> 5 : event >> 12) & 0x7ff;
	if (c >= sizeof code_decode / sizeof code_decode[0])
		cm = "- unknown code", scm = "??";
	else {
		cdc = &code_decode[c];
		cm = cdc->cdc_msg;
		if (sc >= cdc->cdc_nsubcodes)
			scm = unknown_msg;
		else
			scm = cdc->cdc_submsgs[sc];
	}
	printf(" %s (%s) (code %d, subcode %d)\n", cm, scm, c, sc);
}

static char *codemsg[16] = {
	"lbn", "code 1", "code 2", "code 3",
	"code 4", "code 5", "rbn", "code 7",
	"code 8", "code 9", "code 10", "code 11",
	"code 12", "code 13", "code 14", "code 15"
};
/*
 * Print the code and logical block number for an error packet.
 * THIS IS PROBABLY PECULIAR TO DISK DRIVES.  IT SURE WOULD BE
 * NICE IF DEC SOLD DOCUMENTATION FOR THEIR OWN CONTROLLERS.
 */
int
mscp_decodeerror(name, mp, mi)
	char *name;
	struct mscp *mp;
	struct mscp_softc *mi;
{
	int issoft;
	/* 
	 * We will get three sdi errors of type 11 after autoconfig
	 * is finished; depending of searching for non-existing units.
	 * How can we avoid this???
	 */
	if (((mp->mscp_event & M_ST_MASK) == 11) && (mi->mi_ierr++ < 3))
		return 1;
	/*
	 * For bad blocks, mp->mscp_erd.erd_hdr identifies a code and
	 * the logical block number.  Code 0 is a regular block; code 6
	 * is a replacement block.  The remaining codes are currently
	 * undefined.  The code is in the upper four bits of the header
	 * (bits 0-27 are the lbn).
	 */
	issoft = mp->mscp_flags & (M_LF_SUCC | M_LF_CONT);
#define BADCODE(h)	(codemsg[(unsigned)(h) >> 28])
#define BADLBN(h)	((h) & 0xfffffff)

	printf("%s: drive %d %s error datagram%s:", name, mp->mscp_unit,
		issoft ? "soft" : "hard",
		mp->mscp_flags & M_LF_CONT ? " (continuing)" : "");
	switch (mp->mscp_format & 0377) {

	case M_FM_CTLRERR:	/* controller error */
		break;

	case M_FM_BUSADDR:	/* host memory access error */
		printf(" memory addr 0x%x:", (int)mp->mscp_erd.erd_busaddr);
		break;

	case M_FM_DISKTRN:
		printf(" unit %d: level %d retry %d, %s %d:",
			mp->mscp_unit,
			mp->mscp_erd.erd_level, mp->mscp_erd.erd_retry,
			BADCODE(mp->mscp_erd.erd_hdr),
			(int)BADLBN(mp->mscp_erd.erd_hdr));
		break;

	case M_FM_SDI:
		printf(" unit %d: %s %d:", mp->mscp_unit,
			BADCODE(mp->mscp_erd.erd_hdr),
			(int)BADLBN(mp->mscp_erd.erd_hdr));
		break;

	case M_FM_SMLDSK:
		printf(" unit %d: small disk error, cyl %d:",
			mp->mscp_unit, mp->mscp_erd.erd_sdecyl);
		break;

	case M_FM_TAPETRN:
		printf(" unit %d: tape transfer error, grp 0x%x event 0%o:",
		    mp->mscp_unit, mp->mscp_erd.erd_sdecyl, mp->mscp_event);
		break;

	case M_FM_STIERR:
		printf(" unit %d: STI error, event 0%o:", mp->mscp_unit,
		    mp->mscp_event);
		break;

	default:
		printf(" unit %d: unknown error, format 0x%x:",
			mp->mscp_unit, mp->mscp_format);
	}
	mscp_printevent(mp);
	return 0;
#undef BADCODE
#undef BADLBN
}
@


1.14
log
@get rid of some if 0 code that refers to b_actf.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.13 2015/07/04 10:27:05 dlg Exp $	*/
@


1.13
log
@replace the manual buf list management with a fifo bufq. it simplifies
the code in some cases and makes it generally more readable.

this has been tested in simh, real hardware may or may not work anyway.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.12 2012/12/05 23:20:15 deraadt Exp $	*/
a532 3
#if 0
		mi->mi_w = bp->b_actf;
#endif
@


1.12
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.11 2011/07/06 18:32:59 miod Exp $	*/
d162 1
a162 1
	SIMPLEQ_INIT(&mi->mi_resq);
d451 1
a451 1
	if (SIMPLEQ_FIRST(&mi->mi_resq))
d485 1
a485 4
/*	SIMPLEQ_INSERT_TAIL(&mi->mi_resq, bp, xxx) */
	bp->b_actf = NULL;
	*mi->mi_resq.sqh_last = bp;
	mi->mi_resq.sqh_last = &bp->b_actf;
d499 1
a499 1
	while ((bp = SIMPLEQ_FIRST(&mi->mi_resq))) {
d512 1
a532 2
		if ((mi->mi_resq.sqh_first = bp->b_actf) == NULL)
			mi->mi_resq.sqh_last = &mi->mi_resq.sqh_first;
@


1.11
log
@Remove support for non-microVAX, non-VAXstation, non-VXT hardware in the
VAX port. This means, 11/7xx, VAX6000 and VAX8x00 systems, as well as SBI,
CMI, BI, XMI and MASSBUS drivers.
Most of these files were not being compiled or kept in compilable state over
the years anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.10 2009/06/02 20:58:39 miod Exp $	*/
a40 2

#include <sys/cdefs.h>
@


1.10
log
@Remove unused b_forw defines which make beck@@ scream like a little girl
and disturb everyone's peace.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.9 2005/11/24 04:54:49 brad Exp $	*/
d335 2
a336 3
	WRITE_SW(((mi->mi_dmam->dm_segs[0].ds_addr & 0xffff) + 
	    offsetof(struct mscp_pack, mp_ca.ca_rspdsc[0])) |
	    (vax_cputype == VAX_780 || vax_cputype == VAX_8600 ? MP_PI : 0));
@


1.9
log
@splimp -> spl6

ok martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.8 2005/11/15 07:02:37 miod Exp $	*/
a58 2

#define b_forw	b_hash.le_next
@


1.8
log
@More typos (especially indicies -> indices), checked with jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.7 2003/06/02 23:27:57 millert Exp $	*/
d488 1
a488 1
	int s = splimp();
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.6 2002/11/29 20:15:43 deraadt Exp $	*/
d309 1
a309 1
	 * and response indicies.
@


1.6
log
@inconsistant spelling; torh@@bogus.net
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.5 2002/03/14 01:26:48 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.4 2001/12/05 03:04:38 hugh Exp $	*/
d722 1
a722 1
	"inconsistant internal data struct",/* 3 = Internal Error */
@


1.4
log
@sync with netbsd. untested.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.3 2000/04/27 03:14:46 bjc Exp $	*/
d66 6
a71 6
int	mscp_match __P((struct device *, struct cfdata *, void *));
void	mscp_attach __P((struct device *, struct device *, void *));
void	mscp_start __P((struct	mscp_softc *));
int	mscp_init __P((struct  mscp_softc *));
void	mscp_initds __P((struct mscp_softc *));
int	mscp_waitstep __P((struct mscp_softc *, int, int));
@


1.4.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.4 2001/12/05 03:04:38 hugh Exp $	*/
d66 6
a71 6
int	mscp_match(struct device *, struct cfdata *, void *);
void	mscp_attach(struct device *, struct device *, void *);
void	mscp_start(struct	mscp_softc *);
int	mscp_init(struct  mscp_softc *);
void	mscp_initds(struct mscp_softc *);
int	mscp_waitstep(struct mscp_softc *, int, int);
@


1.4.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d722 1
a722 1
	"inconsistent internal data struct",/* 3 = Internal Error */
@


1.3
log
@sync w/netbsd
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp_subr.c,v 1.2 1997/05/29 00:05:03 niklas Exp $	*/
/*	$NetBSD: mscp_subr.c,v 1.12 1999/06/06 19:16:18 ragge Exp $	*/
d46 2
a65 4
#ifndef offsetof
#define	offsetof(type, member)	((size_t)(&((type *)0)->member))
#endif	

d77 1
a77 1
struct	cfdriver mscpbus_cd = {
d179 1
a179 1
		if (bus_dmamap_create(mi->mi_dmat, (64*1024), 1, (64*1024),
a350 1
	
d577 1
a577 1
	register struct mscp *mp;
d579 2
a580 2
	register long *p = (long *) mp;
	register int i = mp->mscp_msglen;
d772 2
a773 2
	register int event = mp->mscp_event;
	register struct code_decode *cdc;
d813 1
a813 1
	register struct mscp *mp;
@


1.2
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp_subr.c,v 1.6 1997/01/11 11:20:34 ragge Exp $	*/
/*	$NetBSD: mscp_subr.c,v 1.6 1997/01/11 11:20:34 ragge Exp $	*/
d52 1
d55 3
a57 3
#include <vax/mscp/mscp.h>
#include <vax/mscp/mscpreg.h>
#include <vax/mscp/mscpvar.h>
d62 1
a62 1
#define	b_forw	b_hash.le_next
d64 5
a68 1
int	mscp_match __P((struct device *, void *, void *));
d70 1
a70 1
void    mscp_start __P((struct  mscp_softc *));
d76 1
a76 1
	sizeof(struct mscp_softc), mscp_match, mscp_attach
d83 5
d104 1
a104 1
	if ((*mi->mi_sa & mask) != result) {
d106 1
a106 1
		while ((*mi->mi_sa & mask) != result) {
d121 2
a122 1
	void *match, *aux;
d126 1
a126 1
#if NRA
d144 1
a144 1
	volatile struct	mscp *mp;
a150 1
	mi->mi_uuda = ma->ma_uuda;
d152 6
a157 3
	mi->mi_ip = ma->ma_ip;
	mi->mi_sa = ma->ma_sa;
	mi->mi_sw = ma->ma_sw;
d166 7
a172 8
        mi->mi_cmd.mri_size = NCMD;
        mi->mi_cmd.mri_desc = mi->mi_uda->mp_ca.ca_cmddsc;
        mi->mi_cmd.mri_ring = mi->mi_uda->mp_cmd;
        mi->mi_rsp.mri_size = NRSP;
        mi->mi_rsp.mri_desc = mi->mi_uda->mp_ca.ca_rspdsc;
        mi->mi_rsp.mri_ring = mi->mi_uda->mp_rsp;
	mi->mi_actf = (void *)&mi->mi_actf; /* Circular wait queue */
	mi->mi_actb = (void *)&mi->mi_actf;
d179 9
d217 1
a217 1
	i = *mi->mi_ip;	 /* Kick off polling */
d234 3
a236 3
	case M_ST_SUCCESS:      /* worked */
	case M_ST_AVAILABLE:    /* found another drive */
		break;          /* use it */
d241 11
a251 11
                 * it is nonexistent, or because it is spun down, or
                 * for some other reason.
                 */
                switch (mp->mscp_status & ~M_ST_MASK) {

                case M_OFFLINE_UNKNOWN:
                        /*
                         * No such drive, and there are none with
                         * higher unit numbers either, if we are
                         * using M_GUM_NEXTUNIT.
                         */
d253 1
a253 1
                        return;
d255 20
a274 20
                case M_OFFLINE_UNMOUNTED:
                        /*
                         * The drive is not spun up.  Use it anyway.
                         *
                         * N.B.: this seems to be a common occurrance
                         * after a power failure.  The first attempt
                         * to bring it on line seems to spin it up
                         * (and thus takes several minutes).  Perhaps
                         * we should note here that the on-line may
                         * take longer than usual.
                         */
                        break;

                default:
                        /*
                         * In service, or something else equally unusable.
                         */
                        printf("%s: unit %d off line: ", mi->mi_dev.dv_xname,
                                mp->mscp_unit);
                        mscp_printevent((struct mscp *)mp);
d276 9
a284 9
                        goto findunit;
                }
                break;

        default:
                printf("%s: unable to get unit status: ", mi->mi_dev.dv_xname);
                mscp_printevent((struct mscp *)mp);
                return;
        }
d286 2
a287 2
        /*
         * If we get a lower number, we have circulated around all
d290 3
a292 3
         */
        if (mp->mscp_unit < next)
                return;
d313 4
a316 4
        /*
         * While we are thinking about it, reset the next command
         * and response indicies.
         */
d323 1
a323 1
		*mi->mi_ip = 0;	/* Kick off */
d328 1
a328 1
	if (*mi->mi_sa & MP_ERR) {
d334 2
a335 2
	*mi->mi_sw = MP_ERR | (NCMDL2 << 11) | (NRSPL2 << 8) |
	    MP_IE | (mi->mi_ivec >> 2);
d343 3
a345 2
	*mi->mi_sw = (int)&mi->mi_uuda->mp_ca.ca_rspdsc[0] | 
	    (vax_cputype == VAX_780 || vax_cputype == VAX_8600 ? MP_PI : 0);
d347 4
a350 4
        if (status == 0) {
                (*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
                return 1;
        }
d353 2
a354 1
	*mi->mi_sw = ((int)&mi->mi_uuda->mp_ca.ca_rspdsc[0]) >> 16;
d356 5
a360 5
        if (status == 0) { 
                (*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
                return 1;
        }
	i = *mi->mi_sa & 0377;
d363 1
a363 1
#define	BURST 4	/* XXX */
d365 1
a365 1
		*mi->mi_sw = MP_GO | (BURST - 1) << 2;
d369 1
a369 1
	*mi->mi_sw = MP_GO;
d389 1
a389 1
	i = *mi->mi_ip;
d391 5
a395 5
        count = 0;
        while (count < DELAYTEN) {
                if (((volatile)mi->mi_flags & MSC_READY) != 0)
                        break;
		if ((j = *mi->mi_sa) & MP_ERR)
d397 3
a399 3
                DELAY(10000);
                count += 1;
        }
a415 1
	struct mscp_pack *uud = mi->mi_uuda;
d422 2
a423 1
		    (long)&uud->mp_rsp[i].mscp_cmdref;
d429 2
a430 1
		    (long)&uud->mp_cmd[i].mscp_cmdref;
d438 2
d448 11
a458 11
        /*
         * Check for response and command ring transitions.
         */
        if (ud->mp_ca.ca_rspint) {
                ud->mp_ca.ca_rspint = 0;
                mscp_dorsp(mi);
        }
        if (ud->mp_ca.ca_cmdint) {
                ud->mp_ca.ca_cmdint = 0;
                MSCP_DOCMD(mi);
        }
d461 1
a461 3
	 * If there are any not-yet-handled requeset, try them now.
	 * XXX - We handles them (erroneous) in last-in first-handled order.
	 * Must we fix this???
d463 2
a464 8
	while (mi->mi_w) {
		struct buf *bp = mi->mi_w;

		mi->mi_w = (void *)bp->b_actb;
		mscp_strategy(bp, (struct device *)mi);
		if (mi->mi_w == bp)
			break;
	}
d472 11
a487 1
 * bp is the current buf, dp is the drive queue.
d495 16
d512 1
a512 1
	int s = spl6();
d514 21
a534 8
	/*
	 * Ok; we are ready to try to start a xfer. Get a MSCP packet
	 * and try to start...
	 */
	if ((mp = mscp_getcp(mi, MSCP_DONTWAIT)) == NULL) {
		if (mi->mi_credits > MSCP_MINCREDITS)
			printf("%s: command ring too small\n",
			    mi->mi_dev.dv_parent->dv_xname);
d536 1
a536 2
		 * By some (strange) reason we didn't get a MSCP packet.
		 * Put it on queue and wait for free packets.
d538 14
a551 4
		(void *)bp->b_actb = mi->mi_w;
		mi->mi_w = bp;
		splx(s);
		return;
a552 9

	/*
	 * Set up the MSCP packet and ask the ctlr to start.
	 */
	mp->mscp_opcode = (bp->b_flags & B_READ) ? M_OP_READ : M_OP_WRITE;
	(*mi->mi_me->me_fillin)(bp, mp);
	(void *)bp->b_actb = mp; /* b_actb is unused, save mscp packet here */
	(*mi->mi_mc->mc_go)(mi->mi_dev.dv_parent, bp);
	splx(s);
d556 1
a556 1
mscp_dgo(mi, buffer, info, bp)
d558 1
a558 2
	long buffer, info;
	struct buf *bp;
d563 5
a567 4
        /*
         * Fill in the MSCP packet and move the buffer to the I/O wait queue.
         */
	mp = (void *)bp->b_actb;
a568 6
	mp->mscp_seq.seq_buffer = buffer;

	_insque(&bp->b_actf, &mi->mi_actf);

	bp->b_resid = info;
	mp->mscp_cmdref = (long) bp;
d570 1
a570 2

	i = *mi->mi_ip;
d739 1
a739 1
	"drive detected error",	/* 7 = Drive Error */
d752 1
a752 1
#define	SC(m)	sizeof (m) / sizeof (m[0]), m
@


1.2.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp_subr.c,v 1.3 2000/04/27 03:14:46 bjc Exp $	*/
/*	$NetBSD: mscp_subr.c,v 1.12 1999/06/06 19:16:18 ragge Exp $	*/
a51 1
#include <machine/bus.h>
d54 3
a56 3
#include <arch/vax/mscp/mscp.h>
#include <arch/vax/mscp/mscpreg.h>
#include <arch/vax/mscp/mscpvar.h>
d61 1
a61 1
#define b_forw	b_hash.le_next
d63 1
a63 5
#ifndef offsetof
#define	offsetof(type, member)	((size_t)(&((type *)0)->member))
#endif	

int	mscp_match __P((struct device *, struct cfdata *, void *));
d65 1
a65 1
void	mscp_start __P((struct	mscp_softc *));
d71 1
a71 1
	sizeof(struct mscp_softc), (cfmatch_t)mscp_match, mscp_attach
a77 5
#define	READ_SA		(bus_space_read_2(mi->mi_iot, mi->mi_sah, 0))
#define	READ_IP		(bus_space_read_2(mi->mi_iot, mi->mi_iph, 0))
#define	WRITE_IP(x)	bus_space_write_2(mi->mi_iot, mi->mi_iph, 0, (x))
#define	WRITE_SW(x)	bus_space_write_2(mi->mi_iot, mi->mi_swh, 0, (x))

d94 1
a94 1
	if ((READ_SA & mask) != result) {
d96 1
a96 1
		while ((READ_SA & mask) != result) {
d111 1
a111 2
	struct cfdata *match;
	void *aux;
d115 1
a115 1
#if NRA || NRX
d133 1
a133 1
	volatile struct mscp *mp;
d140 1
d142 3
a144 6
	mi->mi_dmat = ma->ma_dmat;
	mi->mi_dmam = ma->ma_dmam;
	mi->mi_iot = ma->ma_iot;
	mi->mi_iph = ma->ma_iph;
	mi->mi_sah = ma->ma_sah;
	mi->mi_swh = ma->ma_swh;
d153 8
a160 7
	mi->mi_cmd.mri_size = NCMD;
	mi->mi_cmd.mri_desc = mi->mi_uda->mp_ca.ca_cmddsc;
	mi->mi_cmd.mri_ring = mi->mi_uda->mp_cmd;
	mi->mi_rsp.mri_size = NRSP;
	mi->mi_rsp.mri_desc = mi->mi_uda->mp_ca.ca_rspdsc;
	mi->mi_rsp.mri_ring = mi->mi_uda->mp_rsp;
	SIMPLEQ_INIT(&mi->mi_resq);
a166 9
	for (i = 0; i < NCMD; i++) {
		mi->mi_mxiuse |= (1 << i);
		if (bus_dmamap_create(mi->mi_dmat, (64*1024), 1, (64*1024),
		    0, BUS_DMA_NOWAIT, &mi->mi_xi[i].mxi_dmam)) {
			printf("Couldn't alloc dmamap %d\n", i);
			return;
		}
	}
	
d196 1
a196 1
	i = bus_space_read_2(mi->mi_iot, mi->mi_iph, 0);
d213 3
a215 3
	case M_ST_SUCCESS:	/* worked */
	case M_ST_AVAILABLE:	/* found another drive */
		break;		/* use it */
d220 11
a230 11
		 * it is nonexistent, or because it is spun down, or
		 * for some other reason.
		 */
		switch (mp->mscp_status & ~M_ST_MASK) {

		case M_OFFLINE_UNKNOWN:
			/*
			 * No such drive, and there are none with
			 * higher unit numbers either, if we are
			 * using M_GUM_NEXTUNIT.
			 */
d232 1
a232 1
			return;
d234 20
a253 20
		case M_OFFLINE_UNMOUNTED:
			/*
			 * The drive is not spun up.  Use it anyway.
			 *
			 * N.B.: this seems to be a common occurrance
			 * after a power failure.  The first attempt
			 * to bring it on line seems to spin it up
			 * (and thus takes several minutes).  Perhaps
			 * we should note here that the on-line may
			 * take longer than usual.
			 */
			break;

		default:
			/*
			 * In service, or something else equally unusable.
			 */
			printf("%s: unit %d off line: ", mi->mi_dev.dv_xname,
				mp->mscp_unit);
			mscp_printevent((struct mscp *)mp);
d255 9
a263 9
			goto findunit;
		}
		break;

	default:
		printf("%s: unable to get unit status: ", mi->mi_dev.dv_xname);
		mscp_printevent((struct mscp *)mp);
		return;
	}
d265 2
a266 2
	/*
	 * If we get a lower number, we have circulated around all
d269 3
a271 3
	 */
	if (mp->mscp_unit < next)
		return;
d292 4
a295 4
	/*
	 * While we are thinking about it, reset the next command
	 * and response indicies.
	 */
d302 1
a302 1
		WRITE_IP(0); /* Kick off */;
d307 1
a307 1
	if (READ_SA & MP_ERR) {
d313 2
a314 2
	WRITE_SW(MP_ERR | (NCMDL2 << 11) | (NRSPL2 << 8) |
	    MP_IE | (mi->mi_ivec >> 2));
d322 2
a323 3
	WRITE_SW(((mi->mi_dmam->dm_segs[0].ds_addr & 0xffff) + 
	    offsetof(struct mscp_pack, mp_ca.ca_rspdsc[0])) |
	    (vax_cputype == VAX_780 || vax_cputype == VAX_8600 ? MP_PI : 0));
d325 4
a328 4
	if (status == 0) {
		(*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
		return 1;
	}
d331 1
a331 2
	
	WRITE_SW((mi->mi_dmam->dm_segs[0].ds_addr >> 16));
d333 5
a337 5
	if (status == 0) { 
		(*mi->mi_mc->mc_saerror)(mi->mi_dev.dv_parent, 0);
		return 1;
	}
	i = READ_SA & 0377;
d340 1
a340 1
#define BURST 4 /* XXX */
d342 1
a342 1
		WRITE_SW(MP_GO | (BURST - 1) << 2);
d346 1
a346 1
	WRITE_SW(MP_GO);
d366 1
a366 1
	i = READ_IP;
d368 5
a372 5
	count = 0;
	while (count < DELAYTEN) {
		if (((volatile int)mi->mi_flags & MSC_READY) != 0)
			break;
		if ((j = READ_SA) & MP_ERR)
d374 3
a376 3
		DELAY(10000);
		count += 1;
	}
d393 1
d400 1
a400 2
		    (mi->mi_dmam->dm_segs[0].ds_addr +
		    offsetof(struct mscp_pack, mp_rsp[i].mscp_cmdref));
d406 1
a406 2
		    (mi->mi_dmam->dm_segs[0].ds_addr +
		    offsetof(struct mscp_pack, mp_cmd[i].mscp_cmdref));
a413 2
static	void mscp_kickaway(struct mscp_softc *);

d422 12
d435 3
a437 1
	 * Check for response and command ring transitions.
d439 7
a445 7
	if (ud->mp_ca.ca_rspint) {
		ud->mp_ca.ca_rspint = 0;
		mscp_dorsp(mi);
	}
	if (ud->mp_ca.ca_cmdint) {
		ud->mp_ca.ca_cmdint = 0;
		MSCP_DOCMD(mi);
a446 6

	/*
	 * If there are any not-yet-handled request, try them now.
	 */
	if (SIMPLEQ_FIRST(&mi->mi_resq))
		mscp_kickaway(mi);
a453 11
	struct drive_attach_args *da = aux;
	struct	mscp *mp = da->da_mp;
	int type = mp->mscp_guse.guse_mediaid;

	if (name) {
		printf("%c%c", MSCP_MID_CHAR(2, type), MSCP_MID_CHAR(1, type));
		if (MSCP_MID_ECH(0, type))
			printf("%c", MSCP_MID_CHAR(0, type));
		printf("%d at %s drive %d", MSCP_MID_NUM(type), name,
		    mp->mscp_unit);
	}
d459 1
a466 16
	int s = splimp();

/*	SIMPLEQ_INSERT_TAIL(&mi->mi_resq, bp, xxx) */
	bp->b_actf = NULL;
	*mi->mi_resq.sqh_last = bp;
	mi->mi_resq.sqh_last = &bp->b_actf;
	mscp_kickaway(mi);
	splx(s);
}


void
mscp_kickaway(mi)
	struct	mscp_softc *mi;
{
	struct buf *bp;
d468 1
a468 1
	int next;
d470 8
a477 1
	while ((bp = SIMPLEQ_FIRST(&mi->mi_resq))) {
d479 2
a480 2
		 * Ok; we are ready to try to start a xfer. Get a MSCP packet
		 * and try to start...
d482 4
a485 33
		if ((mp = mscp_getcp(mi, MSCP_DONTWAIT)) == NULL) {
			if (mi->mi_credits > MSCP_MINCREDITS)
				printf("%s: command ring too small\n",
				    mi->mi_dev.dv_parent->dv_xname);
			/*
			 * By some (strange) reason we didn't get a MSCP packet.
			 * Just return and wait for free packets.
			 */
			return;
		}
	
		if ((next = (ffs(mi->mi_mxiuse) - 1)) < 0)
			panic("no mxi buffers");
		mi->mi_mxiuse &= ~(1 << next);
		if (mi->mi_xi[next].mxi_inuse)
			panic("mxi inuse");
		/*
		 * Set up the MSCP packet and ask the ctlr to start.
		 */
		mp->mscp_opcode =
		    (bp->b_flags & B_READ) ? M_OP_READ : M_OP_WRITE;
		mp->mscp_cmdref = next;
		mi->mi_xi[next].mxi_bp = bp;
		mi->mi_xi[next].mxi_mp = mp;
		mi->mi_xi[next].mxi_inuse = 1;
		bp->b_resid = next;
		(*mi->mi_me->me_fillin)(bp, mp);
		(*mi->mi_mc->mc_go)(mi->mi_dev.dv_parent, &mi->mi_xi[next]);
		if ((mi->mi_resq.sqh_first = bp->b_actf) == NULL)
			mi->mi_resq.sqh_last = &mi->mi_resq.sqh_first;
#if 0
		mi->mi_w = bp->b_actf;
#endif
d487 9
d499 1
a499 1
mscp_dgo(mi, mxi)
d501 2
a502 1
	struct mscp_xi *mxi;
d507 8
a514 5
	/*
	 * Fill in the MSCP packet and move the buffer to the I/O wait queue.
	 */
	mp = mxi->mxi_mp;
	mp->mscp_seq.seq_buffer = mxi->mxi_dmam->dm_segs[0].ds_addr;
d516 2
d519 2
a520 1
	i = READ_IP;
d689 1
a689 1
	"drive detected error", /* 7 = Drive Error */
d702 1
a702 1
#define SC(m)	sizeof (m) / sizeof (m[0]), m
@


1.2.12.2
log
@Merge in trunk
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mscp_subr.c,v 1.18 2001/11/13 07:38:28 lukem Exp $	*/
a45 2
#include <sys/cdefs.h>

d64 4
d79 1
a79 1
struct cfdriver mscpbus_cd = {
d181 1
a181 1
		if (bus_dmamap_create(mi->mi_dmat, (64*1024), 16, (64*1024),
d353 1
d580 1
a580 1
	struct mscp *mp;
d582 2
a583 2
	long *p = (long *) mp;
	int i = mp->mscp_msglen;
d775 2
a776 2
	int event = mp->mscp_event;
	struct code_decode *cdc;
d816 1
a816 1
	struct mscp *mp;
@


1.2.12.3
log
@Merge in -current from about a week ago
@
text
@d66 6
a71 6
int	mscp_match(struct device *, struct cfdata *, void *);
void	mscp_attach(struct device *, struct device *, void *);
void	mscp_start(struct	mscp_softc *);
int	mscp_init(struct  mscp_softc *);
void	mscp_initds(struct mscp_softc *);
int	mscp_waitstep(struct mscp_softc *, int, int);
@


1.2.12.4
log
@Sync the SMP branch with 3.3
@
text
@d722 1
a722 1
	"inconsistent internal data struct",/* 3 = Internal Error */
@


1.2.12.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp_subr.c,v 1.2.12.4 2003/03/27 23:52:20 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@
