head	1.14;
access;
symbols
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.20
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.18
	OPENBSD_5_0:1.10.0.16
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.14
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.12
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.8
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.10
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.03.09.16.28.48;	author deraadt;	state dead;
branches;
next	1.13;
commitid	OSDG2O3Cgeifnf1W;

1.13
date	2014.12.23.21.20.40;	author miod;	state Exp;
branches;
next	1.12;
commitid	KRqr1mG8yD5EJhY2;

1.12
date	2014.07.12.18.44.43;	author tedu;	state Exp;
branches;
next	1.11;
commitid	uKVPYMN2MLxdZxzH;

1.11
date	2012.12.05.23.20.15;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.08.17.48.06;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.24.04.53.56;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.27.57;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.10.00.11.14;	author nordin;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.05.03.04.38;	author hugh;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.06.25.00.43.18;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.27.03.14.45;	author bjc;	state Exp;
branches;
next	1.3;

1.3
date	97.09.12.09.25.47;	author maja;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	97.05.29.00.05.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.01.15.23.24.49;	author maja;	state Exp;
branches;
next	;

1.3.12.1
date	2001.05.14.21.38.12;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2001.07.04.10.24.30;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2002.03.06.02.04.47;	author niklas;	state Exp;
branches;
next	1.3.12.4;

1.3.12.4
date	2003.06.07.11.14.47;	author ho;	state Exp;
branches;
next	;

1.6.2.1
date	2002.01.31.22.55.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: mscp.c,v 1.13 2014/12/23 21:20:40 miod Exp $	*/
/*	$NetBSD: mscp.c,v 1.16 2001/11/13 07:38:28 lukem Exp $	*/

/*
 * Copyright (c) 1996 Ludd, University of Lule}, Sweden.
 * Copyright (c) 1988 Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mscp.c	7.5 (Berkeley) 12/16/90
 */

/*
 * MSCP generic driver routines
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/systm.h>

#include <machine/bus.h>

#include <arch/vax/mscp/mscp.h>
#include <arch/vax/mscp/mscpreg.h>
#include <arch/vax/mscp/mscpvar.h>

#define PCMD	PSWP		/* priority for command packet waits */

/*
 * Get a command packet.  Second argument is true iff we are
 * to wait if necessary.  Return NULL if none are available and
 * we cannot wait.
 */
struct mscp *
mscp_getcp(mi, canwait)
	struct mscp_softc *mi;
	int canwait;
{
#define mri	(&mi->mi_cmd)
	struct mscp *mp;
	int i;
	int s = splbio();

again:
	/*
	 * Ensure that we have some command credits, and
	 * that the next command packet is free.
	 */
	if (mi->mi_credits <= MSCP_MINCREDITS) {
		if (!canwait) {
			splx(s);
			return (NULL);
		}
		mi->mi_wantcredits = 1;
		(void) tsleep(&mi->mi_wantcredits, PCMD, "mscpwcrd", 0);
		goto again;
	}
	i = mri->mri_next;
	if (mri->mri_desc[i] & MSCP_OWN) {
		if (!canwait) {
			splx(s);
			return (NULL);
		}
		mi->mi_wantcmd = 1;
		(void) tsleep(&mi->mi_wantcmd, PCMD, "mscpwcmd", 0);
		goto again;
	}
	mi->mi_credits--;
	mri->mri_desc[i] &= ~MSCP_INT;
	mri->mri_next = (mri->mri_next + 1) % mri->mri_size;
	splx(s);
	mp = &mri->mri_ring[i];

	/*
	 * Initialise some often-zero fields.
	 * ARE THE LAST TWO NECESSARY IN GENERAL?  IT SURE WOULD BE
	 * NICE IF DEC SOLD DOCUMENTATION FOR THEIR OWN CONTROLLERS.
	 */
	mp->mscp_msglen = MSCP_MSGLEN;
	mp->mscp_flags = 0;
	mp->mscp_modifier = 0;
	mp->mscp_seq.seq_bytecount = 0;
	mp->mscp_seq.seq_buffer = 0;
	mp->mscp_seq.seq_mapbase = 0;
/*???*/ mp->mscp_sccc.sccc_errlgfl = 0;
/*???*/ mp->mscp_sccc.sccc_copyspd = 0;
	return (mp);
#undef	mri
}

#ifdef AVOID_EMULEX_BUG
int	mscp_aeb_xor = 0x8000bb80;
#endif

/*
 * Handle a response ring transition.
 */
void
mscp_dorsp(mi)
	struct mscp_softc *mi;
{
	struct device *drive;
	struct mscp_device *me = mi->mi_me;
	struct mscp_ctlr *mc = mi->mi_mc;
	struct buf *bp;
	struct mscp *mp;
	struct mscp_xi *mxi;
	int nextrsp;
	int st, error;
	extern int cold;
	extern struct mscp slavereply;

	nextrsp = mi->mi_rsp.mri_next;
loop:
	if (mi->mi_rsp.mri_desc[nextrsp] & MSCP_OWN) {
		/*
		 * No more responses.  Remember the next expected
		 * response index.  Check to see if we have some
		 * credits back, and wake up sleepers if so.
		 */
		mi->mi_rsp.mri_next = nextrsp;
		if (mi->mi_wantcredits && mi->mi_credits > MSCP_MINCREDITS) {
			mi->mi_wantcredits = 0;
			wakeup((caddr_t) &mi->mi_wantcredits);
		}
		return;
	}

	mp = &mi->mi_rsp.mri_ring[nextrsp];
	mi->mi_credits += MSCP_CREDITS(mp->mscp_msgtc);
	/*
	 * Controllers are allowed to interrupt as any drive, so we
	 * must check the command before checking for a drive.
	 */
	if (mp->mscp_opcode == (M_OP_SETCTLRC | M_OP_END)) {
		if ((mp->mscp_status & M_ST_MASK) == M_ST_SUCCESS) {
			mi->mi_flags |= MSC_READY;
		} else {
			printf("%s: SETCTLRC failed: %d ",
			    mi->mi_dev.dv_xname, mp->mscp_status);
			mscp_printevent(mp);
		}
		goto done;
	}

	/*
	 * Found a response.  Update credit information.  If there is
	 * nothing else to do, jump to `done' to get the next response.
	 */
	if (mp->mscp_unit >= mi->mi_driveno) { /* Must expand drive table */
		size_t tmpno = ((mp->mscp_unit + 32) & 0xffe0) * sizeof(void *);
		struct device **tmp = malloc(tmpno, M_DEVBUF, M_NOWAIT|M_ZERO);
		if (tmp == NULL)
			panic("mscp_dorsp");
		if (mi->mi_driveno) {
			bcopy(mi->mi_dp, tmp, mi->mi_driveno);
			free(mi->mi_dp, M_DEVBUF, mi->mi_driveno);
		}
		mi->mi_driveno = tmpno;
		mi->mi_dp = tmp;
	}

	drive = mi->mi_dp[mp->mscp_unit];

	switch (MSCP_MSGTYPE(mp->mscp_msgtc)) {

	case MSCPT_SEQ:
		break;

	case MSCPT_DATAGRAM:
		(*me->me_dgram)(drive, mp, mi);
		goto done;

	case MSCPT_CREDITS:
		goto done;

	case MSCPT_MAINTENANCE:
	default:
		printf("%s: unit %d: unknown message type 0x%x ignored\n",
			mi->mi_dev.dv_xname, mp->mscp_unit,
			MSCP_MSGTYPE(mp->mscp_msgtc));
		goto done;
	}

	/*
	 * Handle individual responses.
	 */
	st = mp->mscp_status & M_ST_MASK;
	error = 0;
	switch (mp->mscp_opcode) {

	case M_OP_END:
		/*
		 * The controller presents a bogus END packet when
		 * a read/write command is given with an illegal
		 * block number.  This is contrary to the MSCP
		 * specification (ENDs are to be given only for
		 * invalid commands), but that is the way of it.
		 */
		if (st == M_ST_INVALCMD && mp->mscp_cmdref != 0) {
			printf("%s: bad lbn (%d)?\n", drive->dv_xname,
				(int)mp->mscp_seq.seq_lbn);
			error = EIO;
			goto rwend;
		}
		goto unknown;

	case M_OP_ONLINE | M_OP_END:
		/*
		 * Finished an ON LINE request.	 Call the driver to
		 * find out whether it succeeded.  If so, mark it on
		 * line.
		 */
		(*me->me_online)(drive, mp);
		break;

	case M_OP_GETUNITST | M_OP_END:
		/*
		 * Got unit status.  If we are autoconfiguring, save
		 * the mscp struct so that mscp_attach know what to do.
		 * If the drive isn't configured, call config_found()
		 * to set it up, otherwise it's just a "normal" unit
		 * status.
		 */
		if (cold)
			bcopy(mp, &slavereply, sizeof(struct mscp));

		if (mp->mscp_status == (M_ST_OFFLINE|M_OFFLINE_UNKNOWN))
			break;

		if (drive == 0) {
			struct	drive_attach_args da;

			da.da_mp = (struct mscp *)mp;
			da.da_typ = mi->mi_type;
			config_found(&mi->mi_dev, (void *)&da, mscp_print);
		} else
			/* Hack to avoid complaints */
			if (!(((mp->mscp_event & M_ST_MASK) == M_ST_AVAILABLE)
			    && cold))
				(*me->me_gotstatus)(drive, mp);
		break;

	case M_OP_AVAILATTN:
		/*
		 * The drive went offline and we did not notice.
		 * Mark it off line now, to force an on line request
		 * next, so we can make sure it is still the same
		 * drive.
		 *
		 * IF THE UDA DRIVER HAS A COMMAND AWAITING UNIBUS
		 * RESOURCES, THAT COMMAND MAY GO OUT BEFORE THE ON
		 * LINE.  IS IT WORTH FIXING??
		 */
#ifdef notyet
		(*md->md_offline)(ui, mp);
#endif
		break;

	case M_OP_POS | M_OP_END:
	case M_OP_WRITM | M_OP_END:
	case M_OP_AVAILABLE | M_OP_END:
		/*
		 * A non-data transfer operation completed.
		 */
		(*me->me_cmddone)(drive, mp);
		break;

	case M_OP_READ | M_OP_END:
	case M_OP_WRITE | M_OP_END:
		/*
		 * A transfer finished.	 Get the buffer, and release its
		 * map registers via ubadone().	 If the command finished
		 * with an off line or available status, the drive went
		 * off line (the idiot controller does not tell us until
		 * it comes back *on* line, or until we try to use it).
		 */
rwend:
#ifdef DIAGNOSTIC
		if (mp->mscp_cmdref >= NCMD) {
			/*
			 * No buffer means there is a bug somewhere!
			 */
			printf("%s: io done, but bad xfer number?\n",
			    drive->dv_xname);
			mscp_hexdump(mp);
			break;
		}
#endif

		if (mp->mscp_cmdref == -1) {
			(*me->me_cmddone)(drive, mp);
			break;
		}
		mxi = &mi->mi_xi[mp->mscp_cmdref];
		if (mxi->mxi_inuse == 0)
			panic("mxi not inuse");
		bp = mxi->mxi_bp;
		/*
		 * Mark any error-due-to-bad-LBN (via `goto rwend').
		 * WHAT STATUS WILL THESE HAVE?	 IT SURE WOULD BE NICE
		 * IF DEC SOLD DOCUMENTATION FOR THEIR OWN CONTROLLERS.
		 */
		if (error) {
			bp->b_flags |= B_ERROR;
			bp->b_error = error;
		}
		if (st == M_ST_OFFLINE || st == M_ST_AVAILABLE) {
#ifdef notyet
			(*md->md_offline)(ui, mp);
#endif
		}

		/*
		 * If the transfer has something to do with bad
		 * block forwarding, let the driver handle the
		 * rest.
		 */
		if ((bp->b_flags & B_BAD) != 0 && me->me_bb != NULL) {
			(*me->me_bb)(drive, mp, bp);
			goto out;
		}

		/*
		 * If the transfer failed, give the driver a crack
		 * at fixing things up.
		 */
		if (st != M_ST_SUCCESS) {
			switch ((*me->me_ioerr)(drive, mp, bp)) {

			case MSCP_DONE:		/* fixed */
				break;

			case MSCP_RESTARTED:	/* still working on it */
				goto out;

			case MSCP_FAILED:	/* no luck */
				/* XXX must move to ra.c */
				mscp_printevent(mp);
				break;
			}
		}

		/*
		 * Set the residual count and mark the transfer as
		 * done.  If the I/O wait queue is now empty, release
		 * the shared BDP, if any.
		 */
		bp->b_resid = bp->b_bcount - mp->mscp_seq.seq_bytecount;
		bus_dmamap_unload(mi->mi_dmat, mxi->mxi_dmam);

		(*mc->mc_ctlrdone)(mi->mi_dev.dv_parent);
		(*me->me_iodone)(drive, bp);
out:
		mxi->mxi_inuse = 0;
		mi->mi_mxiuse |= (1 << mp->mscp_cmdref);
		break;
		
	case M_OP_REPLACE | M_OP_END:
		/*
		 * A replace operation finished.  Just let the driver
		 * handle it (if it does replaces).
		 */
		if (me->me_replace == NULL)
			printf("%s: bogus REPLACE end\n", drive->dv_xname);
		else
			(*me->me_replace)(drive, mp);
		break;

	default:
		/*
		 * If it is not one of the above, we cannot handle it.
		 * (And we should not have received it, for that matter.)
		 */
unknown:
		printf("%s: unknown opcode 0x%x status 0x%x ignored\n",
			drive->dv_xname, mp->mscp_opcode, mp->mscp_status);
#ifdef DIAGNOSTIC
		mscp_hexdump(mp);
#endif
		break;
	}

	/*
	 * If the drive needs to be put back in the controller queue,
	 * do that now.	 (`bp' below ought to be `dp', but they are all
	 * struct buf *.)  Note that b_active was cleared in the driver;
	 * we presume that there is something to be done, hence reassert it.
	 */
#ifdef notyet /* XXX */
	if (ui->ui_flags & UNIT_REQUEUE) {
		...
	}
#endif
done:
	/*
	 * Give back the response packet, and take a look at the next.
	 */
	mp->mscp_msglen = MSCP_MSGLEN;
	mi->mi_rsp.mri_desc[nextrsp] |= MSCP_OWN;
	nextrsp = (nextrsp + 1) % mi->mi_rsp.mri_size;
	goto loop;
}

/*
 * Requeue outstanding transfers, e.g., after bus reset.
 * Also requeue any drives that have on line or unit status
 * info pending.
 */
void
mscp_requeue(mi)
	struct mscp_softc *mi;
{
	panic("mscp_requeue");
}

@


1.13
log
@Fix an obvious free() argument misuse which has been there since r1.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.12 2014/07/12 18:44:43 tedu Exp $	*/
@


1.12
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.11 2012/12/05 23:20:15 deraadt Exp $	*/
d180 1
a180 1
		int tmpno = ((mp->mscp_unit + 32) & 0xffe0) * sizeof(void *);
d186 1
a186 1
			free(mi->mi_dp, mi->mi_driveno, 0);
@


1.11
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.10 2007/10/08 17:48:06 krw Exp $	*/
d186 1
a186 1
			free(mi->mi_dp, mi->mi_driveno);
@


1.10
log
@A few trailing bzero/memset -> M_ZERO occurrences, cast removal and
size(*p) usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.9 2005/11/24 04:53:56 brad Exp $	*/
a41 2

#include <sys/cdefs.h>
@


1.9
log
@splimp -> splbio

ok martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.8 2003/06/02 23:27:57 millert Exp $	*/
d183 1
a183 2
		struct device **tmp = (struct device **)
		    malloc(tmpno, M_DEVBUF, M_NOWAIT);
a185 1
		bzero(tmp, tmpno);
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.7 2002/01/10 00:11:14 nordin Exp $	*/
d73 1
a73 1
	int s = splimp();
@


1.7
log
@Check result from malloc(9) when using M_NOWAIT. hugh@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.6 2001/12/05 03:04:38 hugh Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@sync with netbsd. untested.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.5 2001/06/25 00:43:18 mickey Exp $	*/
d189 2
@


1.6.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.7 2002/01/10 00:11:14 nordin Exp $	*/
a188 2
		if (tmp == NULL)
			panic("mscp_dorsp");
@


1.5
log
@cold is in systm now
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp.c,v 1.4 2000/04/27 03:14:45 bjc Exp $	*/
/*	$NetBSD: mscp.c,v 1.11 1999/06/06 19:16:18 ragge Exp $	*/
d47 2
d71 1
a71 1
	register struct mscp_softc *mi;
d75 2
a76 2
	register struct mscp *mp;
	register int i;
d90 1
a90 1
		sleep((caddr_t) &mi->mi_wantcredits, PCMD);
d100 1
a100 1
		sleep((caddr_t) &mi->mi_wantcmd, PCMD);
d135 1
a135 1
	register struct mscp_softc *mi;
d145 1
@


1.4
log
@sync w/netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.3 1997/09/12 09:25:47 maja Exp $	*/
a142 1
	extern int cold;
@


1.3
log
@Sync with NetBSD 970827. -moj
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp.c,v 1.2 1997/05/29 00:05:01 niklas Exp $	*/
/*	$NetBSD: mscp.c,v 1.6 1997/07/04 11:58:20 ragge Exp $	*/
d51 2
d54 1
a54 2
#include <vax/mscp/mscp.h>
#include <vax/mscp/mscpvar.h>
d56 3
a58 1
#define	PCMD	PSWP		/* priority for command packet waits */
d60 1
a60 4
/*
 * During transfers, mapping info is saved in the buffer's b_resid.
 */
#define	b_info b_resid
d72 1
a72 1
#define	mri	(&mi->mi_cmd)
d75 1
a75 1
	int s = splbio();
d118 2
a119 2
/*???*/	mp->mscp_sccc.sccc_errlgfl = 0;
/*???*/	mp->mscp_sccc.sccc_copyspd = 0;
d138 5
a142 4
	register struct buf *bp;
	register struct mscp *mp;
	register int nextrsp;
	int st, error, info;
d243 1
a243 1
		 * Finished an ON LINE request.  Call the driver to
d295 1
d305 2
a306 2
		 * A transfer finished.  Get the buffer, and release its
		 * map registers via ubadone().  If the command finished
d313 1
a313 1
		if (mp->mscp_cmdref == 0) {
d317 1
a317 1
			printf("%s: io done, but no buffer?\n",
a322 1
		bp = (struct buf *) mp->mscp_cmdref;
d328 4
d334 1
a334 1
		 * WHAT STATUS WILL THESE HAVE?  IT SURE WOULD BE NICE
a347 5
		 * Unlink the transfer from the wait queue.
		 */
		_remque(&bp->b_actf);

		/*
a381 1
		info = bp->b_info;	/* we are about to clobber it */
d383 1
d385 1
a385 1
		(*mc->mc_ctlrdone)(mi->mi_dev.dv_parent, info);
d388 2
d419 1
a419 1
	 * do that now.  (`bp' below ought to be `dp', but they are all
d425 1
a425 6
		bp = &md->md_utab[ui->ui_unit];
		if (bp->b_active) panic("mscp_dorsp requeue");
		MSCP_APPEND(bp, mi->mi_XXXtab, b_hash.le_next);
/* Was:		MSCP_APPEND(bp, mi->mi_XXXtab, b_forw); */
		bp->b_active = 1;
		ui->ui_flags &= ~UNIT_REQUEUE;
d447 1
a447 62
	register struct mscp_device *me = mi->mi_me;
	register struct buf *bp, *dp;
	register int unit;
	struct buf *nextbp;

panic("mscp_requeue");
	/*
	 * Clear the controller chain.  Mark everything un-busy; we
	 * will soon fix any that are in fact busy.
	 */
#ifdef notyet /* XXX */
	mi->mi_XXXtab->b_actf = NULL;
	mi->mi_XXXtab->b_active = 0;
	for (unit = 0, dp = md->md_utab; unit < md->md_nunits; unit++, dp++) {
		ui = md->md_dinfo[unit];
		if (ui == NULL || !ui->ui_alive || ui->ui_ctlr != mi->mi_ctlr)
			continue;	/* not ours */
		dp->b_hash.le_next = NULL;
		dp->b_active = 0;
	}
	/*
	 * Scan the wait queue, linking buffers onto drive queues.
	 * Note that these must be put at the front of the drive queue,
	 * lest we reorder I/O operations.
	 */
	for (bp = *mi->mi_XXXwtab.b_actb; bp != &mi->mi_XXXwtab; bp = nextbp) {
		nextbp = *bp->b_actb;
		dp = &md->md_utab[minor(bp->b_dev) >> md->md_unitshift];
		bp->b_actf = dp->b_actf;
		if (dp->b_actf == NULL)
			dp->b_actb = (void *)bp;
		dp->b_actf = bp;
	}
	mi->mi_XXXwtab.b_actf = *mi->mi_XXXwtab.b_actb = &mi->mi_XXXwtab;

	/*
	 * Scan for drives waiting for on line or status responses,
	 * and for drives with pending transfers.  Put these on the
	 * controller queue, and mark the controller busy.
	 */
	for (unit = 0, dp = md->md_utab; unit < md->md_nunits; unit++, dp++) {
		ui = md->md_dinfo[unit];
		if (ui == NULL || !ui->ui_alive || ui->ui_ctlr != mi->mi_ctlr)
			continue;
		ui->ui_flags &= ~(UNIT_HAVESTATUS | UNIT_ONLINE);
		if ((ui->ui_flags & UNIT_REQUEUE) == 0 && dp->b_actf == NULL)
			continue;
		ui->ui_flags &= ~UNIT_REQUEUE;
		MSCP_APPEND(dp, mi->mi_XXXtab, b_hash.le_next);

		dp->b_active = 1;
		mi->mi_XXXtab->b_active = 1;
	}

#endif
#ifdef AVOID_EMULEX_BUG
	/*
	 * ... and clear the index-to-buffer table.
	 */
	for (unit = 0; unit < AEB_MAX_BP; unit++)
		mi->mi_bp[unit] = 0;
#endif
@


1.3.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp.c,v 1.4 2000/04/27 03:14:45 bjc Exp $	*/
/*	$NetBSD: mscp.c,v 1.11 1999/06/06 19:16:18 ragge Exp $	*/
a50 2
#include <sys/proc.h>
#include <sys/systm.h>
d52 2
a53 1
#include <machine/bus.h>
d55 1
a55 3
#include <arch/vax/mscp/mscp.h>
#include <arch/vax/mscp/mscpreg.h>
#include <arch/vax/mscp/mscpvar.h>
d57 4
a60 1
#define PCMD	PSWP		/* priority for command packet waits */
d72 1
a72 1
#define mri	(&mi->mi_cmd)
d75 1
a75 1
	int s = splimp();
d118 2
a119 2
/*???*/ mp->mscp_sccc.sccc_errlgfl = 0;
/*???*/ mp->mscp_sccc.sccc_copyspd = 0;
d138 4
a141 5
	struct buf *bp;
	struct mscp *mp;
	struct mscp_xi *mxi;
	int nextrsp;
	int st, error;
d242 1
a242 1
		 * Finished an ON LINE request.	 Call the driver to
a293 1
	case M_OP_AVAILABLE | M_OP_END:
d303 2
a304 2
		 * A transfer finished.	 Get the buffer, and release its
		 * map registers via ubadone().	 If the command finished
d311 1
a311 1
		if (mp->mscp_cmdref >= NCMD) {
d315 1
a315 1
			printf("%s: io done, but bad xfer number?\n",
d321 1
a326 4
		mxi = &mi->mi_xi[mp->mscp_cmdref];
		if (mxi->mxi_inuse == 0)
			panic("mxi not inuse");
		bp = mxi->mxi_bp;
d329 1
a329 1
		 * WHAT STATUS WILL THESE HAVE?	 IT SURE WOULD BE NICE
d343 5
d382 1
a383 1
		bus_dmamap_unload(mi->mi_dmat, mxi->mxi_dmam);
d385 1
a385 1
		(*mc->mc_ctlrdone)(mi->mi_dev.dv_parent);
a387 2
		mxi->mxi_inuse = 0;
		mi->mi_mxiuse |= (1 << mp->mscp_cmdref);
d417 1
a417 1
	 * do that now.	 (`bp' below ought to be `dp', but they are all
d423 6
a428 1
		...
d450 62
a511 1
	panic("mscp_requeue");
@


1.3.12.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.3.12.1 2001/05/14 21:38:12 niklas Exp $	*/
d143 1
@


1.3.12.3
log
@Merge in trunk
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mscp.c,v 1.16 2001/11/13 07:38:28 lukem Exp $	*/
a46 2
#include <sys/cdefs.h>

d69 1
a69 1
	struct mscp_softc *mi;
d73 2
a74 2
	struct mscp *mp;
	int i;
d88 1
a88 1
		(void) tsleep(&mi->mi_wantcredits, PCMD, "mscpwcrd", 0);
d98 1
a98 1
		(void) tsleep(&mi->mi_wantcmd, PCMD, "mscpwcmd", 0);
d133 1
a133 1
	struct mscp_softc *mi;
a142 1
	extern int cold;
a185 2
		if (tmp == NULL)
			panic("mscp_dorsp");
@


1.3.12.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mscp.c,v 1.3.12.3 2002/03/06 02:04:47 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@RCS tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: mscp.c,v 1.5 1997/01/11 11:20:31 ragge Exp $	*/
/*	$NetBSD: mscp.c,v 1.5 1997/01/11 11:20:31 ragge Exp $	*/
d309 1
a320 1
rwend:
d323 4
@


1.1
log
@sync with NetBSD 970112 -moj
@
text
@d1 1
@
