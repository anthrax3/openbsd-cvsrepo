head	1.15;
access;
symbols
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.8
	UBC:1.4.0.26
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.24
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.22
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.20
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.18
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.16
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	theo-1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2006.04.21.22.21.54;	author miod;	state dead;
branches;
next	1.14;

1.14
date	2006.01.01.11.59.39;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.31.22.27.34;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.14.20.50.48;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.03.16.44.50;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.15.20.32.14;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.01.35.30;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.12.03.49.53;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.27.23.21.05;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.15.20.45.30;	author nordin;	state Exp;
branches;
next	1.4;

1.4
date	96.06.11.10.17.29;	author deraadt;	state Exp;
branches
	1.4.16.1
	1.4.26.1;
next	1.3;

1.3
date	96.04.28.11.05.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.48.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.43.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.43.05;	author deraadt;	state Exp;
branches;
next	;

1.4.16.1
date	2002.03.06.01.06.59;	author niklas;	state Exp;
branches;
next	1.4.16.2;

1.4.16.2
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.4.16.3;

1.4.16.3
date	2003.03.27.23.32.16;	author niklas;	state Exp;
branches;
next	1.4.16.4;

1.4.16.4
date	2003.06.07.11.13.15;	author ho;	state Exp;
branches;
next	1.4.16.5;

1.4.16.5
date	2004.02.19.10.49.04;	author niklas;	state Exp;
branches;
next	;

1.4.26.1
date	2002.06.11.03.36.49;	author art;	state Exp;
branches;
next	1.4.26.2;

1.4.26.2
date	2002.10.29.00.28.07;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Since bugtty (and BUG routines in general) can only work if we keep the BUG
mapped, and we don't, do not bother carrying this code around - it can not
be used anyway.
@
text
@/*	$OpenBSD: bugtty.c,v 1.14 2006/01/01 11:59:39 miod Exp $ */

/*
 * Copyright (c) 1995 Dale Rahn.
 * All rights reserved.
 *   
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */  

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/tty.h>
#include <sys/proc.h>
#include <sys/uio.h>
#include <sys/queue.h>
#include <dev/cons.h>

#include <machine/autoconf.h>
#include <machine/bugio.h>
#include <machine/conf.h>
#include <machine/cpu.h>
#include <machine/prom.h>

#include "bugtty.h"

int bugttymatch(struct device *parent, void *self, void *aux);
void bugttyattach(struct device *parent, struct device *self, void *aux);

struct cfattach bugtty_ca = {
	sizeof(struct device), bugttymatch, bugttyattach
};

struct cfdriver bugtty_cd = {
	NULL, "bugtty", DV_TTY
};

/* prototypes */
cons_decl(bugtty);

struct tty *bugttytty(dev_t);
int bugttymctl(dev_t, int, int);
int bugttyparam(struct tty*, struct termios *);
void bugtty_chkinput(void);

#define DIALOUT(x) ((x) & 0x80)
#define SWFLAGS(dev) (bugttyswflags | (DIALOUT(dev) ? TIOCFLAG_SOFTCAR : 0))
#define BUGTTYUNIT(x) ((x) & 0x7f)

#define BUGBUF 80
char bugtty_ibuffer[BUGBUF+1];
volatile char *pinchar = bugtty_ibuffer;
char bug_obuffer[BUGBUF+1];

#define	BUGTTYS	4
struct tty *bugtty_tty[BUGTTYS];

struct tty *
bugttytty(dev)
	dev_t dev;
{
	int unit;

	unit = BUGTTYUNIT(dev);
	if (unit >= BUGTTYS)
		return (NULL);
	return (bugtty_tty[unit]);
}

int
bugttymatch(parent, self, aux)
	struct device *parent;
	void *self;
	void *aux;
{
	extern int needprom;
	
	if (needprom == 0)
		return (0);
	return (1);
}

void
bugttyattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	printf(": fallback console\n");
}

void bugttyoutput(struct tty *tp);

int bugttydefaultrate = TTYDEF_SPEED;
int bugttyswflags;

int
bugttymctl(dev, bits, how)
	dev_t dev;
	int bits, how;
{
	/*static int settings = TIOCM_DTR | TIOCM_RTS |
	    TIOCM_CTS | TIOCM_CD | TIOCM_DSR;*/
	int s;

	/*printf("mctl: dev %x, bits %x, how %x,",dev, bits, how);*/

	/* settings are currently ignored */
	s = spltty();
	switch (how) {
	case DMSET:
		break;
	case DMBIC:
		break;
	case DMBIS:
		break;
	case DMGET:
		break;
	}
	splx(s);

	bits = 0;
	/* proper defaults? */
	bits |= TIOCM_DTR;
	bits |= TIOCM_RTS;
	bits |= TIOCM_CTS;
	bits |= TIOCM_CD;
	/* bits |= TIOCM_RI; */
	bits |= TIOCM_DSR;

	/* printf("retbits %x\n", bits); */
	return (bits);
}

int
bugttyopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	int s, unit = BUGTTYUNIT(dev);
	struct tty *tp;
	extern int needprom;

	if (needprom == 0)
		return (ENODEV);

	s = spltty();
	if (bugtty_tty[unit]) {
		tp = bugtty_tty[unit];
	} else {
		tp = bugtty_tty[unit] = ttymalloc();
	}
	tp->t_oproc = bugttyoutput;
	tp->t_param = NULL;
	tp->t_dev = dev;

	if ((tp->t_state & TS_ISOPEN) == 0) {
		tp->t_state |= TS_WOPEN;
		ttychars(tp);
		if (tp->t_ispeed == 0) {
			/*
			 * only when cleared do we reset to defaults.
			 */
			tp->t_iflag = TTYDEF_IFLAG;
			tp->t_oflag = TTYDEF_OFLAG;
			tp->t_cflag = TTYDEF_CFLAG;
			tp->t_lflag = TTYDEF_LFLAG;
			tp->t_ispeed = tp->t_ospeed = bugttydefaultrate;
		}
		/* bugtty does not have carrier */
		tp->t_cflag |= CLOCAL;
		/*
		 * do these all the time
		 */
		if (bugttyswflags & TIOCFLAG_CLOCAL)
			tp->t_cflag |= CLOCAL;
		if (bugttyswflags & TIOCFLAG_CRTSCTS)
			tp->t_cflag |= CRTSCTS;
		if (bugttyswflags & TIOCFLAG_MDMBUF)
			tp->t_cflag |= MDMBUF;
		bugttyparam(tp, &tp->t_termios);
		ttsetwater(tp);

		(void)bugttymctl(dev, TIOCM_DTR | TIOCM_RTS, DMSET);
		/*
		if ((SWFLAGS(dev) & TIOCFLAG_SOFTCAR) ||
		    (bugttymctl(dev, 0, DMGET) & TIOCM_CD))
			tp->t_state |= TS_CARR_ON;
		else
			tp->t_state &= ~TS_CARR_ON;
		*/
		tp->t_state |= TS_CARR_ON;
	} else if (tp->t_state & TS_XCLUDE && p->p_ucred->cr_uid != 0) {
		splx(s);
		return (EBUSY);
	}

	/*
	 * if NONBLOCK requested, ignore carrier
	 */
/*
	if (flag & O_NONBLOCK)
		goto done;
*/

	splx(s);
	/*
	 * Reset the tty pointer, as there could have been a dialout
	 * use of the tty with a dialin open waiting.
	 */
	tp->t_dev = dev;
	return ((*linesw[tp->t_line].l_open)(dev, tp));
}

int
bugttyparam(tp, tm)
	struct tty*tp;
	struct termios *tm;
{
	return (0);
}

void
bugttyoutput(tp)
	struct tty *tp;
{
	int cc, s, cnt;

	/* only supports one unit */

	if ((tp->t_state & TS_ISOPEN) == 0)
		return;

	s = spltty();
	cc = tp->t_outq.c_cc;
	while (cc > 0) {
		cnt = min(BUGBUF, cc);
		cnt = q_to_b(&tp->t_outq, bug_obuffer, cnt);
		bug_outstr(bug_obuffer, &bug_obuffer[cnt]);
		cc -= cnt;
	}
	splx(s);
}

int
bugttyclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	int unit = BUGTTYUNIT(dev);
	struct tty *tp = bugtty_tty[unit];

	(*linesw[tp->t_line].l_close)(tp, flag);

	ttyclose(tp);
#if 0
	bugtty_tty[unit] = NULL;
#endif
	return (0);
}

int
bugttyread(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	struct tty *tp;

	if ((tp = bugtty_tty[BUGTTYUNIT(dev)]) == NULL)
		return (ENXIO); 
	return ((*linesw[tp->t_line].l_read)(tp, uio, flag));
}

#if 1
/* only to be called at splclk() */
void
bugtty_chkinput()
{
	struct tty *tp;

	tp = bugtty_tty[0]; /* Kinda ugly hack */
	if (tp == NULL )
		return;

	if (bug_instat()) {
		while (bug_instat()) {
			u_char c = bug_inchr() & 0xff;
			(*linesw[tp->t_line].l_rint)(c, tp);
		}
		/*
		wakeup(tp);
		*/
	}
}
#endif

int
bugttywrite(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
#if 0
	/* bypass tty output routines. */
	int i, cnt, s;
	int oldoff;

	s = spltty();
	oldoff = uio->uio_offset;
	do  {
		uiomove(bug_obuffer, BUGBUF, uio);
		bug_outstr(bug_obuffer, &bug_obuffer[uio->uio_offset - oldoff]);
		oldoff = uio->uio_offset;
	} while (uio->uio_resid != 0);
	splx(s);

	return (0);
#else
	struct tty *tp;
	if((tp = bugtty_tty[BUGTTYUNIT(dev)]) == NULL)
		return (ENXIO);
	return ((*linesw[tp->t_line].l_write)(tp, uio, flag));
#endif
}

int
bugttyioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	int unit = BUGTTYUNIT(dev);
	struct tty *tp = bugtty_tty[unit];
	int error;

	if (!tp)
		return (ENXIO);

	error = (*linesw[tp->t_line].l_ioctl)(tp, cmd, data, flag, p);
	if (error >= 0) 
		return (error);

	error = ttioctl(tp, cmd, data, flag, p);
	if (error >= 0)
		return (error);

	switch (cmd) {
	case TIOCSBRK:
		/* */
		break;

	case TIOCCBRK:
		/* */
		break;

	case TIOCSDTR:
		(void) bugttymctl(dev, TIOCM_DTR | TIOCM_RTS, DMBIS);
		break;

	case TIOCCDTR:
		(void) bugttymctl(dev, TIOCM_DTR | TIOCM_RTS, DMBIC);
		break;

	case TIOCMSET:
		(void) bugttymctl(dev, *(int *) data, DMSET);
		break;

	case TIOCMBIS:
		(void) bugttymctl(dev, *(int *) data, DMBIS);
		break;

	case TIOCMBIC:
		(void) bugttymctl(dev, *(int *) data, DMBIC);
		break;

	case TIOCMGET:
		*(int *)data = bugttymctl(dev, 0, DMGET);
		break;
	case TIOCGFLAGS:
		*(int *)data = SWFLAGS(dev);
		break;
	case TIOCSFLAGS:
		error = suser(p, 0); 
		if (error != 0)
			return (EPERM); 

		bugttyswflags = *(int *)data;
		bugttyswflags &= /* only allow valid flags */
		    (TIOCFLAG_SOFTCAR | TIOCFLAG_CLOCAL | TIOCFLAG_CRTSCTS);
		break;
	default:
		return (ENOTTY);
	}

	return (0);
}

int
bugttystop(tp, flag)
	struct tty *tp;
	int flag;
{
	int s;

	s = spltty();
	if (tp->t_state & TS_BUSY) {
		if ((tp->t_state & TS_TTSTOP) == 0)
			tp->t_state |= TS_FLUSH;
	}
	splx(s);
	return (0);
}

/*
 * bugtty is the last possible choice for a console device.
 */
void
bugttycnprobe(cp)
	struct consdev *cp;
{
	int maj;
	extern int needprom;

	if (needprom == 0)
		return;
		
	/* locate the major number */
	for (maj = 0; maj < nchrdev; maj++)
		if (cdevsw[maj].d_open == bugttyopen)
			break;

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_NORMAL;
}

void
bugttycninit(cp)
	struct consdev *cp;
{
	/* Nothing to do */
}

int
bugttycngetc(dev)
	dev_t dev;
{
	return (bug_inchr());
}

void
bugttycnputc(dev, c)
	dev_t dev;
	char c;
{
	bug_outchr(c);
}
@


1.14
log
@Let cons_init() and cons_init_bell() initialize the whole consdev structure,
thus removing the need for drivers to initialize cn_pri to CN_DEAD when
hardware probe fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.13 2004/07/31 22:27:34 miod Exp $ */
@


1.13
log
@Use cons_decl() instead of homemade wrong prototypes.
While there, fix a mismatch between the zs device number and the associated
dev_t nodes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.12 2004/01/14 20:50:48 miod Exp $ */
d448 1
a448 2
	if (needprom == 0) {
		cp->cn_pri = CN_DEAD;
a449 1
	}
@


1.12
log
@Do not fill more than the first three fields of cfdriver structures unless
necessary. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.11 2003/10/03 16:44:50 miod Exp $ */
d58 1
a58 4
int bugttycnprobe(struct consdev *cp);
int bugttycninit(struct consdev *cp);
int bugttycngetc(dev_t dev);
void bugttycnputc(dev_t dev, char c);
d74 2
a75 1
struct tty *bugtty_tty[NBUGTTY];
d84 1
a84 1
	if (unit >= NBUGTTY)
d108 1
a108 1
	printf("\n");
d441 1
a441 1
int
d450 1
a450 1
		return (0);
a452 9
	switch (cputyp) {
	case CPU_147:
	case CPU_162:
		cp->cn_pri = CN_NORMAL;
		return (0);
	default:
		break;
	}

a459 2

	return (1);
d462 1
a462 1
int
d466 1
a466 1
	return (0);
@


1.11
log
@Merge tty_attach() in ttymalloc() and tty_detach() in ttyfree(). The need for
separate tty registering is gone now that sparc has switched to wscons, and
this makes the code less error-prone.

Also, remove tests for ttymalloc() failure, since it uses M_WAITOK.

ok millert@@ deraadt@@, tested by various people as well besides me...
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.10 2003/08/15 20:32:14 tedu Exp $ */
d54 1
a54 1
	NULL, "bugtty", DV_TTY, 0
@


1.10
log
@change arguments to suser.  suser now takes the process, and a flags
argument.  old cred only calls user suser_ucred.  this will allow future
work to more flexibly implement the idea of a root process.  looks like
something i saw in freebsd, but a little different.
use of suser_ucred vs suser in file system code should be looked at again,
for the moment semantics remain unchanged.
review and input from art@@  testing and further review miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.9 2003/06/03 01:35:30 drahn Exp $ */
a173 1
		tty_attach(tp);
@


1.9
log
@kill clause 3 and 4 from several of my copyrights, cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.8 2002/06/12 03:49:53 miod Exp $ */
d410 1
a410 1
		error = suser(p->p_ucred, &p->p_acflag); 
@


1.8
log
@cnputc() will take care of the necessary cr->cr/lf translation, so don't
do it in those consoles either.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.7 2002/04/27 23:21:05 miod Exp $ */
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.7
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.6 2002/03/14 01:26:37 millert Exp $ */
a499 2
	if (c == '\n')
		bug_outchr('\r');
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.5 2002/02/15 20:45:30 nordin Exp $ */
a38 1
#include <sys/conf.h>
d44 2
d66 1
a66 1
int bugttycnputc(dev_t dev, char c);
d68 4
a71 6
int bugttyopen(dev_t dev, int flag, int mode, struct proc *p);
int bugttyclose(dev_t dev, int flag, int mode, struct proc *p);
int bugttyread(dev_t dev, struct uio *uio, int flag);
int bugttywrite(dev_t dev, struct uio *uio, int flag);
int bugttyioctl(dev_t dev, int cmd, caddr_t data, int flag, struct proc *p);
int bugttystop(struct tty *tp, int flag);
d128 2
a129 2
	static int settings = TIOCM_DTR | TIOCM_RTS |
	    TIOCM_CTS | TIOCM_CD | TIOCM_DSR;
d244 3
a246 1
bugttyparam()
d255 1
a255 1
	int cc, s, unit, cnt ;
d306 1
d359 1
a359 1
	int cmd;
d485 1
d495 1
a495 1
int
@


1.5
log
@Don't cast nonexistent return value from splx to (void). ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.4 1996/06/11 10:17:29 deraadt Exp $ */
d50 2
a51 2
int bugttymatch __P((struct device *parent, void *self, void *aux));
void bugttyattach __P((struct device *parent, struct device *self, void *aux));
d62 11
a72 11
int bugttycnprobe __P((struct consdev *cp));
int bugttycninit __P((struct consdev *cp));
int bugttycngetc __P((dev_t dev));
int bugttycnputc __P((dev_t dev, char c));

int bugttyopen __P((dev_t dev, int flag, int mode, struct proc *p));
int bugttyclose __P((dev_t dev, int flag, int mode, struct proc *p));
int bugttyread __P((dev_t dev, struct uio *uio, int flag));
int bugttywrite __P((dev_t dev, struct uio *uio, int flag));
int bugttyioctl __P((dev_t dev, int cmd, caddr_t data, int flag, struct proc *p));
int bugttystop __P((struct tty *tp, int flag));
d119 1
a119 1
void bugttyoutput __P((struct tty *tp));
@


1.4
log
@tty_attach()
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.3 1996/04/28 11:05:59 deraadt Exp $ */
d147 1
a147 1
	(void)splx(s);
@


1.4.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.4 1996/06/11 10:17:29 deraadt Exp $ */
d39 1
a44 2
#include <machine/bugio.h>
#include <machine/conf.h>
d50 2
a51 2
int bugttymatch(struct device *parent, void *self, void *aux);
void bugttyattach(struct device *parent, struct device *self, void *aux);
d62 11
a72 9
int bugttycnprobe(struct consdev *cp);
int bugttycninit(struct consdev *cp);
int bugttycngetc(dev_t dev);
void bugttycnputc(dev_t dev, char c);

struct tty *bugttytty(dev_t);
int bugttymctl(dev_t, int, int);
int bugttyparam(struct tty*, struct termios *);
void bugtty_chkinput(void);
d119 1
a119 1
void bugttyoutput(struct tty *tp);
d129 2
a130 2
	/*static int settings = TIOCM_DTR | TIOCM_RTS |
	    TIOCM_CTS | TIOCM_CD | TIOCM_DSR;*/
d147 1
a147 1
	splx(s);
d245 1
a245 3
bugttyparam(tp, tm)
	struct tty*tp;
	struct termios *tm;
d254 1
a254 1
	int cc, s, cnt;
a304 1
void
d357 1
a357 1
	u_long cmd;
a482 1
	return (0);
d492 1
a492 1
void
@


1.4.26.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.4.26.1 2002/06/11 03:36:49 art Exp $ */
d500 2
@


1.4.16.1
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d147 1
a147 1
	splx(s);
@


1.4.16.2
log
@Merge in -current from about a week ago
@
text
@d50 2
a51 2
int bugttymatch(struct device *parent, void *self, void *aux);
void bugttyattach(struct device *parent, struct device *self, void *aux);
d62 11
a72 11
int bugttycnprobe(struct consdev *cp);
int bugttycninit(struct consdev *cp);
int bugttycngetc(dev_t dev);
int bugttycnputc(dev_t dev, char c);

int bugttyopen(dev_t dev, int flag, int mode, struct proc *p);
int bugttyclose(dev_t dev, int flag, int mode, struct proc *p);
int bugttyread(dev_t dev, struct uio *uio, int flag);
int bugttywrite(dev_t dev, struct uio *uio, int flag);
int bugttyioctl(dev_t dev, int cmd, caddr_t data, int flag, struct proc *p);
int bugttystop(struct tty *tp, int flag);
d119 1
a119 1
void bugttyoutput(struct tty *tp);
@


1.4.16.3
log
@Sync the SMP branch with 3.3
@
text
@d39 1
a44 2
#include <machine/bugio.h>
#include <machine/conf.h>
d65 1
a65 1
void bugttycnputc(dev_t dev, char c);
d67 6
a72 4
struct tty *bugttytty(dev_t);
int bugttymctl(dev_t, int, int);
int bugttyparam(struct tty*, struct termios *);
void bugtty_chkinput(void);
d129 2
a130 2
	/*static int settings = TIOCM_DTR | TIOCM_RTS |
	    TIOCM_CTS | TIOCM_CD | TIOCM_DSR;*/
d245 1
a245 3
bugttyparam(tp, tm)
	struct tty*tp;
	struct termios *tm;
d254 1
a254 1
	int cc, s, cnt;
a304 1
void
d357 1
a357 1
	u_long cmd;
a482 1
	return (0);
d492 1
a492 1
void
d497 2
@


1.4.16.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bugtty.c,v 1.4.16.3 2003/03/27 23:32:16 niklas Exp $ */
d15 5
@


1.4.16.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d54 1
a54 1
	NULL, "bugtty", DV_TTY
d174 1
d410 1
a410 1
		error = suser(p, 0); 
@


1.3
log
@cfattach/cfdriver split
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d180 1
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
d53 6
a58 3
struct cfdriver bugttycd = {
	NULL, "bugtty", bugttymatch, bugttyattach,
	DV_TTY, sizeof(struct device)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD$ */
d17 1
a17 1
 *   This product includes software developed by Dale Rahn.
@


1.1.1.1
log
@mvme68k port by me. some parts by dale rahn.
@
text
@@
