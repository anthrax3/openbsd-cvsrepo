head	1.20;
access;
symbols
	OPENBSD_5_5:1.19.0.18
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.14
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.12
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.10
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.8
	OPENBSD_5_0:1.19.0.6
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.4
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.4
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.17.0.12
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.10
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.8
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.6
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.4
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.2
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.10
	UBC:1.8.0.10
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	theo-1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.19;

1.19
date	2010.06.26.23.24.43;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.17.22.28.40;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.24.22.43.16;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.30.22.29.45;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.02.17.57.29;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.14.20.52.49;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.14.20.50.48;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.29.09.08.17;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.05.09.14;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.27.23.21.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.26.23.31.59;	author deraadt;	state Exp;
branches
	1.8.10.1;
next	1.7;

1.7
date	2000.01.29.04.11.25;	author smurph;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.01.06.03.21.42;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.21.45.59;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.11.10.15.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.11.06.08;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.49.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.43.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.43.05;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	2001.04.18.16.10.23;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2003.03.27.23.32.16;	author niklas;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2003.06.07.11.13.15;	author ho;	state Exp;
branches;
next	1.7.2.5;

1.7.2.5
date	2004.02.19.10.49.04;	author niklas;	state Exp;
branches;
next	;

1.8.10.1
date	2002.06.11.03.36.49;	author art;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: mc.c,v 1.19 2010/06/26 23:24:43 guenther Exp $ */

/*
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * VME162/VME172 MCchip
 */
#include <sys/param.h>
#include <sys/conf.h>
#include <sys/ioctl.h>
#include <sys/proc.h>
#include <sys/tty.h>
#include <sys/uio.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/fcntl.h>
#include <sys/device.h>
#include <machine/cpu.h>
#include <machine/autoconf.h>
#include <dev/cons.h>

#include <mvme68k/dev/mcreg.h>

struct mcsoftc {
	struct device	sc_dev;
	vaddr_t		sc_vaddr;
	paddr_t		sc_paddr;
	struct mcreg	*sc_mc;
	struct intrhand	sc_nmiih;
};

void mcattach(struct device *, struct device *, void *);
int  mcmatch(struct device *, void *, void *);
int  mcabort(void *);
int  mc_print(void *, const char *);
int  mc_scan(struct device *, void *, void *);

struct cfattach mc_ca = {
	sizeof(struct mcsoftc), mcmatch, mcattach
};

struct cfdriver mc_cd = {
	NULL, "mc", DV_DULL
};

struct mcreg *sys_mc = NULL;

int
mcmatch(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct confargs *ca = args;
	struct mcreg *mc = (struct mcreg *)(IIOV(ca->ca_paddr) + MC_MCCHIP_OFF);

	if ((cputyp != CPU_172 && cputyp != CPU_162) ||
	    badvaddr((vaddr_t)mc, 1) || mc->mc_chipid != MC_CHIPID)
		return (0);
	return (1);
}

int
mc_print(args, bus)
	void *args;
	const char *bus;
{
	struct confargs *ca = args;

	if (ca->ca_offset != -1)
		printf(" offset 0x%x", ca->ca_offset);
	if (ca->ca_ipl > 0)
		printf(" ipl %d", ca->ca_ipl);
	return (UNCONF);
}

int
mc_scan(parent, child, args)
	struct device *parent;
	void *child, *args;
{
	struct cfdata *cf = child;
	struct mcsoftc *sc = (struct mcsoftc *)parent;
	struct confargs *ca = args;
	struct confargs oca;

	bzero(&oca, sizeof oca);
	oca.ca_iot = ca->ca_iot;
	oca.ca_dmat =  ca->ca_dmat;
	oca.ca_offset = cf->cf_loc[0];
	oca.ca_ipl = cf->cf_loc[1];
	if (oca.ca_offset != -1 && ISIIOVA(sc->sc_vaddr + oca.ca_offset)) {
		oca.ca_vaddr = sc->sc_vaddr + oca.ca_offset;
		oca.ca_paddr = sc->sc_paddr + oca.ca_offset;
	} else {
		oca.ca_vaddr = (vaddr_t)-1;
		oca.ca_paddr = (paddr_t)-1;
	}
	oca.ca_bustype = BUS_MC;
	oca.ca_name = cf->cf_driver->cd_name;
	if ((*cf->cf_attach->ca_match)(parent, cf, &oca) == 0)
		return (0);
	config_attach(parent, cf, &oca, mc_print);
	return (1);
}

void
mcattach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct confargs *ca = args;
	struct mcsoftc *sc = (struct mcsoftc *)self;

	if (sys_mc)
		panic("mc already attached!");

	/*
	 * since we know ourself to land in intiobase land,
	 * we must adjust our address
	 */
	sc->sc_paddr = ca->ca_paddr;
	sc->sc_vaddr = IIOV(sc->sc_paddr);
	sc->sc_mc = (struct mcreg *)(sc->sc_vaddr + MC_MCCHIP_OFF);
	sys_mc = sc->sc_mc;

	printf(": rev %d\n", sc->sc_mc->mc_chiprev);

	sc->sc_nmiih.ih_fn = mcabort;
	sc->sc_nmiih.ih_ipl = 7;
	sc->sc_nmiih.ih_wantframe = 1;
	mcintr_establish(MCV_ABORT, &sc->sc_nmiih, self->dv_xname);

	sc->sc_mc->mc_abortirq = 7 | MC_IRQ_IEN | MC_IRQ_ICLR;
	sc->sc_mc->mc_vecbase = MC_VECBASE;

	sc->sc_mc->mc_genctl |= MC_GENCTL_IEN;		/* global irq enable */

	config_search(mc_scan, self, args);
}

/*
 * MC interrupts land in a MC_NVEC sized hole starting at MC_VECBASE
 */
int
mcintr_establish(vec, ih, name)
	int vec;
	struct intrhand *ih;
	const char *name;
{
#ifdef DIAGNOSTIC
	if (vec < 0 || vec >= MC_NVEC)
		panic("mcintr_establish: illegal vector for %s: 0x%x",
		    name, vec);
#endif

	return intr_establish(MC_VECBASE + vec, ih, name);
}

int
mcabort(frame)
	void *frame;
{
	/* wait for it to debounce */
	while (sys_mc->mc_abortirq & MC_ABORT_ABS)
		;

	sys_mc->mc_abortirq = sys_mc->mc_abortirq | MC_IRQ_ICLR;

	nmihand(frame);
	return (1);
}

#include "flash.h"

#if NFLASH > 0
void
mc_enableflashwrite(on)
	int on;
{
	struct mcsoftc *sc = (struct mcsoftc *) mc_cd.cd_devs[0];
	volatile u_char *ena, x;
	/* 
	 * Check MC chip revision, as the way to enable flash writes
	 * has been changed from a memory location in BBRAM to a 
	 * bit in the Flash Control Reg.  XXX - smurph
	 */
	if (sc->sc_mc->mc_chiprev == 0x01) {
		if (on) 
			sc->sc_mc->mc_flashctl |= MC_FLASHCTL_WRITE;
		else
			sc->sc_mc->mc_flashctl &= ~MC_FLASHCTL_WRITE;
	} else {
		ena = (u_char *)sc->sc_vaddr +
			 (on ? MC_ENAFLASHWRITE_OFFSET : MC_DISFLASHWRITE_OFFSET);
		x = *ena;
	}
}
/*
 * Function to check if we booted from flash or prom.
 * If we booted from PROM, flash mem is available.
 */
int 
mc_hasflash(void)
{
	struct mcsoftc *sc = (struct mcsoftc *) mc_cd.cd_devs[0];
   if (sc->sc_mc->mc_input & MC_INPUT_PROM)
		return 1;
	else 
		return 0;
}
#endif
@


1.19
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.18 2009/02/17 22:28:40 miod Exp $ */
@


1.18
log
@Add real bus_space and bus_dma to mvme68k, so that it can benefit from
recent driver work; this gives us better osiop and vs drivers, vsbic
(although currently disabled on 68060 boards until more bugs are fixed),
and the ability to boot and root off vs and vsbic.

Existing code is not modified and still uses memory mapped structures;
this might change eventually as more code gets factorized and moved to
MI land.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.17 2005/11/24 22:43:16 miod Exp $ */
a34 1
#include <sys/user.h>
@


1.17
log
@Prefer vaddr_t and paddr_t types in device softc, instead of void * and
heavy casts. Improves readability, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.16 2004/07/30 22:29:45 miod Exp $ */
d108 1
d112 2
@


1.16
log
@Move struct evcount inside struct intrhand, and modernize intrhand
usage; similar to (and from) mvme88k.

Also remove unused haltvec structures and related code.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.15 2004/07/02 17:57:29 miod Exp $ */
d51 2
a52 2
	void		*sc_vaddr;
	void		*sc_paddr;
d114 1
a115 1
		oca.ca_vaddr = sc->sc_vaddr + oca.ca_offset;
d117 2
a118 2
		oca.ca_paddr = (void *)-1;
		oca.ca_vaddr = (void *)-1;
d144 1
a144 1
	sc->sc_vaddr = (void *)IIOV(sc->sc_paddr);
@


1.15
log
@Kill ca_master in autoconf structures. Drivers either only attach to one
specific bus (mc/pcc/pcctwo), or they know it from the ca_bustype value,
and can use the globals sys_busname variables.

This also allows for some code simplifications.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.14 2004/01/14 20:52:49 miod Exp $ */
d153 1
a153 1
	mcintr_establish(MCV_ABORT, &sc->sc_nmiih);
d167 1
a167 1
mcintr_establish(vec, ih)
d170 1
d172 7
a178 5
	if (vec >= MC_NVEC) {
		printf("mc: illegal vector: 0x%x\n", vec);
		panic("mcintr_establish");
	}
	return (intr_establish(MC_VECBASE+vec, ih));
@


1.14
log
@mvme* do not support buses with indirect configuration, so don't check and
mourn for this.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.13 2004/01/14 20:50:48 miod Exp $ */
a120 1
	oca.ca_master = (void *)sc->sc_mc;
@


1.13
log
@Do not fill more than the first three fields of cfdriver structures unless
necessary. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.12 2003/09/29 09:08:17 miod Exp $ */
a108 5

	if (parent->dv_cfdata->cf_driver->cd_indirect) {
                printf(" indirect devices not supported\n");
                return 0;
        }
@


1.12
log
@avaliable -> available
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.11 2003/06/02 05:09:14 deraadt Exp $ */
d68 1
a68 1
	NULL, "mc", DV_DULL, 0
@


1.11
log
@license cleanup of my files
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.10 2002/04/27 23:21:05 miod Exp $ */
d225 1
a225 1
 * If we booted from PROM, flash mem is avaliable.
@


1.10
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.9 2002/03/14 01:26:37 millert Exp $ */
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.8 2000/03/26 23:31:59 deraadt Exp $ */
d65 3
a67 1
int  mcabort(struct frame *);
a83 1
	struct cfdata *cf = vcf;
d87 2
a88 2
	if ((cputyp != CPU_172 && cputyp != CPU_162) || badvaddr(mc, 1) ||
	    mc->mc_chipid != MC_CHIPID)
a113 1
	struct confargs *ca = args;
a146 1
	int i;
a162 1
	sc->sc_nmiih.ih_arg = 0;
d192 1
a192 1
	struct frame *frame;
@


1.8
log
@callout.h is gone
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.7 2000/01/29 04:11:25 smurph Exp $ */
d63 3
a65 3
void mcattach __P((struct device *, struct device *, void *));
int  mcmatch __P((struct device *, void *, void *));
int  mcabort __P((struct frame *));
@


1.8.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.8 2000/03/26 23:31:59 deraadt Exp $ */
d63 3
a65 5
void mcattach(struct device *, struct device *, void *);
int  mcmatch(struct device *, void *, void *);
int  mcabort(void *);
int  mc_print(void *, const char *);
int  mc_scan(struct device *, void *, void *);
d82 1
d86 2
a87 2
	if ((cputyp != CPU_172 && cputyp != CPU_162) ||
	    badvaddr((vaddr_t)mc, 1) || mc->mc_chipid != MC_CHIPID)
d113 1
d147 1
d164 1
d194 1
a194 1
	void *frame;
@


1.7
log
@Updated flash and ipic device compatability with MC rev 0x01.  zs mods to work with LX style 162 boards.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.6 2000/01/06 03:21:42 smurph Exp $ */
a43 1
#include <sys/callout.h>
@


1.7.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.8 2000/03/26 23:31:59 deraadt Exp $ */
d44 1
@


1.7.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d63 3
a65 3
void mcattach(struct device *, struct device *, void *);
int  mcmatch(struct device *, void *, void *);
int  mcabort(struct frame *);
@


1.7.2.3
log
@Sync the SMP branch with 3.3
@
text
@d65 1
a65 3
int  mcabort(void *);
int  mc_print(void *, const char *);
int  mc_scan(struct device *, void *, void *);
d82 1
d86 2
a87 2
	if ((cputyp != CPU_172 && cputyp != CPU_162) ||
	    badvaddr((vaddr_t)mc, 1) || mc->mc_chipid != MC_CHIPID)
d113 1
d147 1
d164 1
d194 1
a194 1
	void *frame;
@


1.7.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.7.2.3 2003/03/27 23:32:16 niklas Exp $ */
d15 6
@


1.7.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d68 1
a68 1
	NULL, "mc", DV_DULL
d110 5
d225 1
a225 1
 * If we booted from PROM, flash mem is available.
@


1.6
log
@Added support for MVME177 (mc68060)
@
text
@d1 1
a1 1
/*	$OpenBSD: mc.c,v 1.5 1996/11/23 21:45:59 kstailey Exp $ */
d35 1
a35 1
 * VME162 MCchip
d216 28
a243 4

	ena = (u_char *)sc->sc_vaddr +
	    (on ? MC_ENAFLASHWRITE_OFFSET : MC_DISFLASHWRITE_OFFSET);
	x = *ena;
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d87 1
a87 1
	if (cputyp != CPU_162 || badvaddr(mc, 1) ||
@


1.4
log
@use void * for pa/va instead of caddr_t
@
text
@d96 1
a96 1
	char *bus;
@


1.3
log
@cfattach/cfdriver split
@
text
@d58 2
a59 2
	caddr_t		sc_vaddr;
	caddr_t		sc_paddr;
d129 2
a130 2
		oca.ca_paddr = (caddr_t)-1;
		oca.ca_vaddr = (caddr_t)-1;
d158 1
a158 1
	sc->sc_vaddr = (caddr_t)IIOV(sc->sc_paddr);
d215 1
a215 1
	volatile char *ena, x;
d217 1
a217 1
	ena = sc->sc_vaddr +
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
d68 6
a73 3
struct cfdriver mccd = {
	NULL, "mc", mcmatch, mcattach,
	DV_DULL, sizeof(struct mcsoftc), 0
d135 1
a135 1
	if ((*cf->cf_driver->cd_match)(parent, cf, &oca) == 0)
d214 1
a214 1
	struct mcsoftc *sc = (struct mcsoftc *) mccd.cd_devs[0];
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD$ */
d17 2
a18 1
 *      This product includes software developed by Theo de Raadt
@


1.1.1.1
log
@mvme68k port by me. some parts by dale rahn.
@
text
@@
