head	1.7;
access;
symbols
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.16
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.14
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.4
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	theo-1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2006.04.21.22.21.54;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2003.06.03.01.35.30;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.27.23.21.05;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	99.09.27.20.30.31;	author smurph;	state Exp;
branches
	1.4.4.1
	1.4.14.1;
next	1.3;

1.3
date	96.04.28.11.03.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.48.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.43.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.43.06;	author deraadt;	state Exp;
branches;
next	;

1.4.4.1
date	2003.03.27.23.32.16;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.06.07.11.13.15;	author ho;	state Exp;
branches;
next	;

1.4.14.1
date	2002.06.11.03.36.49;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Since bugtty (and BUG routines in general) can only work if we keep the BUG
mapped, and we don't, do not bother carrying this code around - it can not
be used anyway.
@
text
@/*	$OpenBSD: bug.c,v 1.6 2003/06/03 01:35:30 drahn Exp $ */

/*
 * Copyright (c) 1995 Dale Rahn.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */  

/*
 * bug routines -- assumes that the necessary sections of memory
 * are preserved.
 */
#include <sys/param.h>

#include <machine/bugio.h>
#include <machine/prom.h>

/* flag to traphandler to signify prom call. presumes splhigh() */
extern volatile int promcall;

void bug_outln(char *, char *);
void bug_delay(int);
void bug_stat(void);
void asm_bug_stat(void);

/* tty routines */
char
bug_inchr()
{
	int s = splhigh();
	volatile char a;

	promcall = 1;
	asm volatile ("subql #2,sp");
	MVMEPROM_CALL(MVMEPROM_INCHR);
	asm volatile ("nop");
	asm volatile ("movb sp@@+,%0" : "=d" (a));
	promcall = 0;
	splx(s);
	return (a);
}

/* returns 0 if no characters ready to read */
int
bug_instat()
{
	int s = splhigh();
	volatile short ret;

	promcall = 1;
	MVMEPROM_CALL(MVMEPROM_INSTAT);
	asm volatile ("nop");
	asm volatile ("movw ccr,%0" : "=d" (ret));
	promcall = 0;
	splx(s);
	return (!(ret & 0x4));
}

void
bug_outchr(a)
	char a;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movb %0,sp@@-" :: "d" (a));
	MVMEPROM_CALL(MVMEPROM_OUTCHR);
	asm volatile ("nop");
	promcall = 0;
	splx(s);
}

void
bug_outstr(pstrb, pstre)
	char *pstrb;
	char *pstre;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "d" (pstre));
	asm volatile ("movl %0,sp@@-" :: "d" (pstrb));
	MVMEPROM_CALL(MVMEPROM_OUTSTR);
	promcall = 0;
	splx(s);
}

void
bug_outln(pstrb, pstre)
	char *pstrb;
	char *pstre;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "d" (pstre));
	asm volatile ("movl %0,sp@@-" :: "d" (pstrb));
	MVMEPROM_CALL(MVMEPROM_OUTSTRCRLF);
	promcall = 0;
	splx(s);
}

/* BUG - disk routines */

#if 0
/* returns 0: success, nonzero: error */
u_int bug_drdcnt = 0;
int
bug_diskrd(arg)
	bug_dskio *arg;
{
	volatile int ret;

	promcall = 1;
	bug_drdcnt++;
	asm volatile ("movl %0, sp@@-" :: "d" (arg));
	MVMEPROM_CALL(MVMEPROM_DSKRD);
	asm volatile ("nop");
	asm volatile ("movw ccr,%0" : "=d" (ret));
	promcall = 0;
	return (!(ret & 0x4));
}

/* returns 0: success, nonzero: error */
u_int bug_dwrcnt = 0;
int
bug_diskwr(arg)
	bug_dskio *arg;
{
	volatile int ret;

	promcall = 1;
	bug_dwrcnt ++;
	asm volatile ("movl %0, sp@@-" :: "d" (arg));
	MVMEPROM_CALL(MVMEPROM_DSKWR);
	asm volatile ("nop");
	asm volatile ("movw ccr,%0" : "=d" (ret));
	promcall = 0;
	return (!(ret & 0x4));
}

bug_diskcfig()
{
}

bug_diskfmt()
{
}

bug_diskctrl()
{
}
#endif

/* BUG - timing routine */
void
bug_delay(delay_msec)
	int delay_msec;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "d" (delay_msec));
	MVMEPROM_CALL(MVMEPROM_DELAY);
	asm volatile ("nop");
	promcall = 0;
	splx(s);
}

/* BUG - return to bug routine */
void
bug_return()
{
	promcall = 1;
	MVMEPROM_CALL(MVMEPROM_EXIT);
	promcall = 0;
	/*NOTREACHED*/
}

/* BUG - query board routines */
struct bug_brdid *
bug_brdid()
{
	struct bug_brdid *pbrd_id;

	promcall = 1;
	asm volatile ("clrl sp@@-");
	MVMEPROM_CALL(MVMEPROM_GETBRDID);
	asm volatile ("movl sp@@+,%0" : "=d" (pbrd_id):);
	promcall = 0;
	return (pbrd_id);
}

int asm_callbuf[4];

void
bug_stat()
{
	char val[] = "|/-\\";
	static int cnt = 0;

	bug_outchr('\b');
	bug_outchr(val[cnt]);
	cnt = (cnt + 1) % (sizeof(val) -1);
}

void
asm_bug_stat()
{
	asm volatile ("movl a0,_asm_callbuf+0");
	asm volatile ("movl a1,_asm_callbuf+4");
	asm volatile ("movl d0,_asm_callbuf+8");
	asm volatile ("movl d1,_asm_callbuf+12");
	
	bug_stat();

	asm volatile ("movl _asm_callbuf+0,a0");
	asm volatile ("movl _asm_callbuf+4,a1");
	asm volatile ("movl _asm_callbuf+8,d0");
	asm volatile ("movl _asm_callbuf+12,d1");
}
@


1.6
log
@kill clause 3 and 4 from several of my copyrights, cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: bug.c,v 1.5 2002/04/27 23:21:05 miod Exp $ */
@


1.5
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: bug.c,v 1.4 1999/09/27 20:30:31 smurph Exp $ */
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@This gets us to 2.6...
@
text
@d1 1
a1 1
/*	$OpenBSD: bug.c,v 1.3 1996/04/28 11:03:18 deraadt Exp $ */
d38 2
d45 5
a217 11
void
bug_rtc_rd(ptime)
	struct bug_time *ptime;
{
	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "a" (ptime));
	MVMEPROM_CALL(MVMEPROM_RTC_RD);
	asm volatile ("nop");
	promcall = 0;
}

a245 5





@


1.4.4.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a37 2

#include <machine/bugio.h>
a42 5
void bug_outln(char *, char *);
void bug_delay(int);
void bug_stat(void);
void asm_bug_stat(void);

d211 11
d250 5
@


1.4.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bug.c,v 1.4.4.1 2003/03/27 23:32:16 niklas Exp $ */
d15 5
@


1.4.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bug.c,v 1.4 1999/09/27 20:30:31 smurph Exp $ */
a37 2

#include <machine/bugio.h>
a42 5
void bug_outln(char *, char *);
void bug_delay(int);
void bug_stat(void);
void asm_bug_stat(void);

d211 11
d250 5
@


1.3
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d48 1
a48 1
	char a;
d65 1
a65 1
	short ret;
d129 1
a129 1
	int ret;
d140 1
d147 1
a147 1
	int ret;
d250 5
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD$ */
d17 1
a17 1
 *   This product includes software developed by Dale Rahn.
@


1.1.1.1
log
@mvme68k port by me. some parts by dale rahn.
@
text
@@
