head	1.19;
access;
symbols
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.14.0.16
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.18
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.14
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.12
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.10
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.8
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.6
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.5.0.22
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.20
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	theo-1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.18;

1.18
date	2011.04.07.15.30.15;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2010.12.26.15.40.59;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.27.22.04.03;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.26.23.24.43;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.24.22.43.16;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.27.16.04.08;	author martin;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.14.20.50.48;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.20.00.34.28;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.05.09.14;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.27.23.21.05;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.37;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.05.19.45.34;	author art;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.5;

1.5
date	96.12.11.21.04.14;	author deraadt;	state Exp;
branches
	1.5.14.1;
next	1.4;

1.4
date	96.06.11.10.15.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.11.06.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.49.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.43.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.43.06;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2001.11.13.21.04.14;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.5.14.3;

1.5.14.3
date	2003.03.27.23.32.16;	author niklas;	state Exp;
branches;
next	1.5.14.4;

1.5.14.4
date	2003.06.07.11.13.15;	author ho;	state Exp;
branches;
next	1.5.14.5;

1.5.14.5
date	2004.02.19.10.49.04;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.36.49;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: vmel.c,v 1.18 2011/04/07 15:30:15 miod Exp $ */

/*
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/conf.h>
#include <machine/cpu.h>

#include <mvme68k/dev/vme.h>

/*
 * The VMEL driver deals with D32 transfers on the VME bus. The number
 * of address bits (A16, A24, A32) is irrelevant since the mapping
 * functions will decide how many address bits are relevant.
 */

void vmelattach(struct device *, struct device *, void *);
int  vmelmatch(struct device *, void *, void *);

int vmelscan(struct device *, void *, void *);

struct cfattach vmel_ca = {
	sizeof(struct vmelsoftc), vmelmatch, vmelattach
};

struct cfdriver vmel_cd = {
	NULL, "vmel", DV_DULL
};

int
vmelmatch(parent, cf, args)
	struct device *parent;
	void *cf, *args;
{
	return (1);
}

int
vmelscan(parent, child, args)
	struct device *parent;
	void *child, *args;
{
	return (vmescan(parent, child, args, BUS_VMEL));
}

void
vmelattach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct vmelsoftc *sc = (struct vmelsoftc *)self;

	printf("\n");

	sc->sc_vme = (struct vmesoftc *)parent;

	config_search(vmelscan, self, args);
}

/*ARGSUSED*/
int
vmelopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	if (minor(dev) >= vmel_cd.cd_ndevs ||
	    vmel_cd.cd_devs[minor(dev)] == NULL)
		return (ENODEV);
	return (0);
}

/*ARGSUSED*/
int
vmelclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	return (0);
}

/*ARGSUSED*/
int
vmelioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	int error = 0;

	switch (cmd) {
	default:
		error = ENOTTY;
		break;
	}
	return (error);
}

int
vmelread(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	int unit = minor(dev);
	struct vmelsoftc *sc = (struct vmelsoftc *) vmel_cd.cd_devs[unit];

	return (vmerw(sc->sc_vme, uio, flags, BUS_VMEL));
}

int
vmelwrite(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	int unit = minor(dev);
	struct vmelsoftc *sc = (struct vmelsoftc *) vmel_cd.cd_devs[unit];

	return (vmerw(sc->sc_vme, uio, flags, BUS_VMEL));
}

paddr_t
vmelmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	int unit = minor(dev);
	struct vmelsoftc *sc = (struct vmelsoftc *) vmel_cd.cd_devs[unit];
	paddr_t pa;

	pa = vmepmap(sc->sc_vme, (vaddr_t)off, NBPG, BUS_VMEL);
#ifdef DEBUG
	printf("vmel %llx pa %p\n", off, pa);
#endif
	if (pa == 0)
		return (-1);
	return (pa);
}
@


1.18
log
@Do not use NULL in integer comparisons. No functional change.
ok matthew@@ tedu@@, also eyeballed by at least krw@@ oga@@ kettenis@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.17 2010/12/26 15:40:59 miod Exp $ */
@


1.17
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.16 2010/06/27 22:04:03 miod Exp $ */
d172 1
a172 1
	if (pa == NULL)
@


1.16
log
@More include necessary after <sys/user.h> inclusion removal
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.15 2010/06/26 23:24:43 guenther Exp $ */
d174 1
a174 1
	return (atop(pa));
@


1.15
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.14 2005/11/24 22:43:16 miod Exp $ */
d33 2
@


1.14
log
@Prefer vaddr_t and paddr_t types in device softc, instead of void * and
heavy casts. Improves readability, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.13 2005/10/27 16:04:08 martin Exp $ */
a29 1
#include <sys/user.h>
@


1.13
log
@stupid me, of course these MD macros need to be converted to MI macros
as well
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.12 2004/01/14 20:50:48 miod Exp $ */
d165 1
a165 1
	void *pa;
d167 1
a167 1
	pa = vmepmap(sc->sc_vme, (void *)(int)off, NBPG, BUS_VMEL);
@


1.12
log
@Do not fill more than the first three fields of cfdriver structures unless
necessary. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.11 2003/12/20 00:34:28 miod Exp $ */
d173 1
a173 1
	return (m68k_btop(pa));
@


1.11
log
@Passl -Wformat. Fix some blatant -Wuninitialized errors as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.10 2003/06/02 05:09:14 deraadt Exp $ */
d57 1
a57 1
	NULL, "vmel", DV_DULL, 0
@


1.10
log
@license cleanup of my files
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.9 2002/04/27 23:21:05 miod Exp $ */
d165 1
a165 1
	void * pa;
d168 3
a170 1
	printf("vmel %x pa %x\n", off, pa);
@


1.9
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.8 2002/03/14 01:26:37 millert Exp $ */
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.7 2001/11/05 19:45:34 art Exp $ */
a34 1
#include <sys/conf.h>
d40 1
d42 1
d44 1
d56 2
d98 1
a98 1
vmelopen(dev, flag, mode)
d101 1
d111 1
a111 1
vmelclose(dev, flag, mode)
d114 1
d123 2
a124 1
	dev_t   dev;
d126 1
a126 1
	int     cmd, flag;
a128 2
	int unit = minor(dev);
	struct vmelsoftc *sc = (struct vmelsoftc *) vmel_cd.cd_devs[unit];
@


1.7
log
@Fallout from the mmap changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.5 1996/12/11 21:04:14 deraadt Exp $ */
d51 2
a52 2
void vmelattach __P((struct device *, struct device *, void *));
int  vmelmatch __P((struct device *, void *, void *));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.7 2001/11/05 19:45:34 art Exp $ */
d35 1
a40 1

a41 1
#include <machine/conf.h>
a42 1

d51 2
a52 4
void vmelattach(struct device *, struct device *, void *);
int  vmelmatch(struct device *, void *, void *);

int vmelscan(struct device *, void *, void *);
d94 1
a94 1
vmelopen(dev, flag, mode, p)
a96 1
	struct proc *p;
d106 1
a106 1
vmelclose(dev, flag, mode, p)
a108 1
	struct proc *p;
d117 1
a117 2
	dev_t dev;
	u_long cmd;
d119 1
a119 1
	int flag;
d122 2
@


1.6
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d168 1
a168 1
	pa = vmepmap(sc->sc_vme, (void *)off, NBPG, BUS_VMEL);
@


1.5
log
@correct master decoded logic; i have mapped a vmes device successfully now
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.4 1996/06/11 10:15:32 deraadt Exp $ */
d158 1
a158 1
int
d161 1
a161 1
	int off;
@


1.5.14.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d158 1
a158 1
paddr_t
d161 1
a161 1
	off_t off;
d168 1
a168 1
	pa = vmepmap(sc->sc_vme, (void *)(int)off, NBPG, BUS_VMEL);
@


1.5.14.2
log
@Merge in -current from about a week ago
@
text
@d51 2
a52 2
void vmelattach(struct device *, struct device *, void *);
int  vmelmatch(struct device *, void *, void *);
@


1.5.14.3
log
@Sync the SMP branch with 3.3
@
text
@d35 1
a40 1

a41 1
#include <machine/conf.h>
a42 1

a53 2
int vmelscan(struct device *, void *, void *);

d94 1
a94 1
vmelopen(dev, flag, mode, p)
a96 1
	struct proc *p;
d106 1
a106 1
vmelclose(dev, flag, mode, p)
a108 1
	struct proc *p;
d117 1
a117 2
	dev_t dev;
	u_long cmd;
d119 1
a119 1
	int flag;
d122 2
@


1.5.14.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmel.c,v 1.5.14.3 2003/03/27 23:32:16 niklas Exp $ */
d15 6
@


1.5.14.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d57 1
a57 1
	NULL, "vmel", DV_DULL
d165 1
a165 1
	void *pa;
d168 1
a168 3
#ifdef DEBUG
	printf("vmel %llx pa %p\n", off, pa);
#endif
@


1.4
log
@use void * for pa/va instead of caddr_t
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a52 5

struct vmelsoftc {
	struct device		sc_dev;
	struct vmesoftc		*sc_vme;
};
@


1.3
log
@cfattach/cfdriver split
@
text
@d166 2
a167 1
	int off, prot;
d171 1
a171 1
	caddr_t pa;
d173 1
a173 1
	pa = vmepmap(sc->sc_vme, (caddr_t)off, NBPG, BUS_VMEL);
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
d59 6
a64 3
struct cfdriver vmelcd = {
	NULL, "vmel", vmelmatch, vmelattach,
	DV_DULL, sizeof(struct vmelsoftc), 0
d103 2
a104 2
	if (minor(dev) >= vmelcd.cd_ndevs ||
	    vmelcd.cd_devs[minor(dev)] == NULL)
d128 1
a128 1
	struct vmelsoftc *sc = (struct vmelsoftc *) vmelcd.cd_devs[unit];
d146 1
a146 1
	struct vmelsoftc *sc = (struct vmelsoftc *) vmelcd.cd_devs[unit];
d158 1
a158 1
	struct vmelsoftc *sc = (struct vmelsoftc *) vmelcd.cd_devs[unit];
d169 1
a169 1
	struct vmelsoftc *sc = (struct vmelsoftc *) vmelcd.cd_devs[unit];
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD$ */
d17 2
a18 1
 *      This product includes software developed by Theo de Raadt
@


1.1.1.1
log
@mvme68k port by me. some parts by dale rahn.
@
text
@@
