head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.18
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.16
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.12.01.22.10.40;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2003.06.02.05.09.14;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.29.04.11.25;	author smurph;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	96.04.28.11.03.29;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.49.29;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.10;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.42.59;	author deraadt;	state Exp;
branches;
next	;

1.4.2.1
date	2003.06.07.11.13.15;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@no longer needed
@
text
@/*	$OpenBSD: scc.h,v 1.5 2003/06/02 05:09:14 deraadt Exp $ */

/*
 * Copyright (c) 1995 Theo de Raadt
 * Copyright (c) 1993 Paul Mackerras.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * SCC I/O register definitions
 */

#define PCLK_FREQ_147	5000000
#define PCLK_FREQ_162	10000000

/*
 * physical layout in memory of the SCC chips on the MVME147
 */
struct scc_147 {
	u_char cr;
	u_char dr;
};

/*
 * physical layout in memory of the SCC chips on the MVME162
 * (and possibly the MVME172 as well?)
 */
struct scc_162 {
	u_char xx1;
	u_char cr;
	u_char xx2;
	u_char dr;
};

struct sccregs {
	volatile u_char *s_cr;
	volatile u_char *s_dr;
	u_char s_val[16];
};

int mc_rev1_bug = 0;

#define ZREAD0(scc)	((*((scc)->s_cr)))
#define ZREAD(scc, n)	((*((scc)->s_cr)) = n, (*((scc)->s_cr)))
#if 1
#define ZREADD(scc)	mc_rev1_bug ? (ZWRITE0((scc), 8), ZREAD0((scc))) : ((*((scc)->s_dr)))
#else
#define ZREADD(scc)	((*((scc)->s_dr)))
#endif

#define ZWRITE0(scc, v)	((*((scc)->s_cr)) = (u_char)(v))
#define ZWRITE(scc, n, v) (ZWRITE0(scc, (u_char)n), \
	    ZWRITE0(scc, (scc)->s_val[n] = (u_char)(v)))
#if 1
#define ZWRITED(scc, v)	mc_rev1_bug ? ((ZWRITE0((scc), 8), ZWRITE0((scc), (u_char)(v)))) : \
        (((*((scc)->s_dr)) = (u_char)(v)))
#else
#define ZWRITED(scc, v)	((*((scc)->s_dr)) = (u_char)(v))
#endif

#define ZBIS(scc, n, v)	(ZWRITE(scc, n, (scc)->s_val[n] | (v)))
#define ZBIC(scc, n, v)	(ZWRITE(scc, n, (scc)->s_val[n] & ~(v)))

#define SCC_RXFULL	1	/* bits in rr0 */
#define SCC_TXRDY	4
#define SCC_DCD		8
#define SCC_CTS		0x20

#define SCC_RCVEN	1	/* bits in wr3 */

#define SCC_RTS		2	/* bits in wr5 */
#define SCC_DTR		0x80
@


1.5
log
@license cleanup of my files
@
text
@d1 1
a1 1
/*	$OpenBSD: scc.h,v 1.4 2000/01/29 04:11:25 smurph Exp $ */
@


1.4
log
@Updated flash and ipic device compatability with MC rev 0x01.  zs mods to work with LX style 162 boards.
@
text
@d1 1
a1 1
/*	$OpenBSD: scc.h,v 1.3 1996/04/28 11:03:29 deraadt Exp $ */
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4.2.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: scc.h,v 1.4 2000/01/29 04:11:25 smurph Exp $ */
d16 6
@


1.3
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d66 2
d71 1
a71 1
#define ZREADD(scc)	(ZWRITE0((scc), 8), ZREAD0((scc)))
d80 2
a81 1
#define ZWRITED(scc, v)	(ZWRITE0((scc), 8), ZWRITE0((scc), (u_char)(v)))
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: scc.h,v 1.1.1.1 1995/07/25 23:12:07 chuck Exp $	*/
d4 1
d16 6
a21 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software withough specific prior written permission
d38 2
a39 1
#define PCLK_FREQ	8333333		/* XXX */
d41 17
a57 3
struct scc {
	unsigned char cr;
	unsigned char dr;
d61 3
a63 2
	volatile struct scc *s_adr;
	unsigned char s_val[16];
d66 16
a81 7
#define ZREAD0(scc)	((scc)->s_adr->cr)
#define ZREAD(scc, n)	((scc)->s_adr->cr = n, (scc)->s_adr->cr)
#define ZREADD(scc)	((scc)->s_adr->dr)

#define ZWRITE0(scc, v)	((scc)->s_adr->cr = v)
#define ZWRITE(scc, n, v) (ZWRITE0(scc, n), ZWRITE0(scc, (scc)->s_val[n] = v))
#define ZWRITED(scc, v)	((scc)->s_adr->dr = v)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@d1 1
a1 1
/*	$NetBSD: scc.h,v 1.2 1994/10/26 02:33:24 cgd Exp $	*/
a3 1
 * Copyright (c) 1995 Theo de Raadt
d33 1
a33 2
#define PCLK_FREQ_147	5000000
#define PCLK_FREQ_162	10000000
d35 3
a37 17
/*
 * physical layout in memory of the SCC chips on the MVME147
 */
struct scc_147 {
	u_char cr;
	u_char dr;
};

/*
 * physical layout in memory of the SCC chips on the MVME162
 * (and possibly the MVME172 as well?)
 */
struct scc_162 {
	u_char xx1;
	u_char cr;
	u_char xx2;
	u_char dr;
d41 2
a42 3
	volatile u_char *s_cr;
	volatile u_char *s_dr;
	u_char s_val[16];
d45 7
a51 16
#define ZREAD0(scc)	((*((scc)->s_cr)))
#define ZREAD(scc, n)	((*((scc)->s_cr)) = n, (*((scc)->s_cr)))
#if 1
#define ZREADD(scc)	(ZWRITE0((scc), 8), ZREAD0((scc)))
#else
#define ZREADD(scc)	((*((scc)->s_dr)))
#endif

#define ZWRITE0(scc, v)	((*((scc)->s_cr)) = (u_char)(v))
#define ZWRITE(scc, n, v) (ZWRITE0(scc, (u_char)n), \
	    ZWRITE0(scc, (scc)->s_val[n] = (u_char)(v)))
#if 1
#define ZWRITED(scc, v)	(ZWRITE0((scc), 8), ZWRITE0((scc), (u_char)(v)))
#else
#define ZWRITED(scc, v)	((*((scc)->s_dr)) = (u_char)(v))
#endif
@
