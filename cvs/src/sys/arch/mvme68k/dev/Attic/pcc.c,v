head	1.19;
access;
symbols
	OPENBSD_5_5:1.18.0.18
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.14
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.12
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.10
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.8
	OPENBSD_5_0:1.18.0.6
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.12
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.10
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.8
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.9
	UBC:1.6.0.10
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.18;

1.18
date	2010.06.26.23.24.43;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.01.22.07.12;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.17.22.28.40;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.24.22.43.16;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.30.22.29.45;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.02.17.57.29;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.14.20.52.49;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.14.20.50.48;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.05.09.14;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.27.23.21.05;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.21.23.44.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.26.23.31.59;	author deraadt;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	96.11.23.21.45.59;	author kstailey;	state Exp;
branches
	1.5.14.1;
next	1.4;

1.4
date	96.06.11.10.15.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.11.06.12;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.49.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.10;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.43.02;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2001.04.18.16.10.26;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.5.14.3;

1.5.14.3
date	2003.03.27.23.32.16;	author niklas;	state Exp;
branches;
next	1.5.14.4;

1.5.14.4
date	2003.06.07.11.13.15;	author ho;	state Exp;
branches;
next	1.5.14.5;

1.5.14.5
date	2004.02.19.10.49.04;	author niklas;	state Exp;
branches;
next	;

1.6.10.1
date	2002.06.11.03.36.49;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: pcc.c,v 1.18 2010/06/26 23:24:43 guenther Exp $ */

/*
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * VME147 peripheral channel controller
 */
#include <sys/param.h>
#include <sys/conf.h>
#include <sys/ioctl.h>
#include <sys/proc.h>
#include <sys/tty.h>
#include <sys/uio.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/fcntl.h>
#include <sys/device.h>
#include <machine/cpu.h>
#include <machine/autoconf.h>
#include <dev/cons.h>

#include <mvme68k/dev/pccreg.h>

struct pccsoftc {
	struct device	sc_dev;
	vaddr_t		sc_vaddr;
	paddr_t		sc_paddr;
	struct pccreg	*sc_pcc;
	struct intrhand	sc_nmiih;
};

void pccattach(struct device *, struct device *, void *);
int  pccmatch(struct device *, void *, void *);
int  pccabort(void *);
int  pcc_print(void *, const char *);
int  pcc_scan(struct device *, void *, void *);

struct cfattach pcc_ca = {
	sizeof(struct pccsoftc), pccmatch, pccattach
};

struct cfdriver pcc_cd = {
	NULL, "pcc", DV_DULL
};

struct pccreg *sys_pcc = NULL;

int
pccmatch(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct confargs *ca = args;

	/* the pcc only exist on vme147's */
	if (cputyp != CPU_147)
		return (0);
	return (!badvaddr(IIOV(ca->ca_paddr) + PCCSPACE_PCCCHIP_OFF, 1));
}

int
pcc_print(args, bus)
	void *args;
	const char *bus;
{
	struct confargs *ca = args;

	if (ca->ca_offset != -1)
		printf(" offset 0x%x", ca->ca_offset);
	if (ca->ca_ipl > 0)
		printf(" ipl %d", ca->ca_ipl);
	return (UNCONF);
}

int
pcc_scan(parent, child, args)
	struct device *parent;
	void *child, *args;
{
	struct cfdata *cf = child;
	struct pccsoftc *sc = (struct pccsoftc *)parent;
	struct confargs *ca = args;
	struct confargs oca;

	bzero(&oca, sizeof oca);
	oca.ca_iot = ca->ca_iot;
	oca.ca_dmat = ca->ca_dmat;
	oca.ca_offset = cf->cf_loc[0];
	oca.ca_ipl = cf->cf_loc[1];
	if (oca.ca_offset != -1) {
		oca.ca_vaddr = sc->sc_vaddr + oca.ca_offset;
		oca.ca_paddr = sc->sc_paddr + oca.ca_offset;
	} else {
		oca.ca_vaddr = (vaddr_t)-1;
		oca.ca_paddr = (paddr_t)-1;
	}	
	oca.ca_bustype = BUS_PCC;
	oca.ca_name = cf->cf_driver->cd_name;
	if ((*cf->cf_attach->ca_match)(parent, cf, &oca) == 0)
		return (0);
	config_attach(parent, cf, &oca, pcc_print);
	return (1);
}

void
pccattach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct confargs *ca = args;
	struct pccsoftc *sc = (struct pccsoftc *)self;

	if (sys_pcc)
		panic("pcc already attached!");

	/*
	 * since we know ourself to land in intiobase land,
	 * we must adjust our address
	 */
	sc->sc_paddr = ca->ca_paddr;
	sc->sc_vaddr = IIOV(sc->sc_paddr);
	sc->sc_pcc = (struct pccreg *)(sc->sc_vaddr + PCCSPACE_PCCCHIP_OFF);
	sys_pcc = sc->sc_pcc;

	printf(": rev %d\n", sc->sc_pcc->pcc_chiprev);

	sc->sc_nmiih.ih_fn = pccabort;
	sc->sc_nmiih.ih_ipl = 7;
	sc->sc_nmiih.ih_wantframe = 1;
	pccintr_establish(PCCV_ABORT, &sc->sc_nmiih, self->dv_xname);

	sc->sc_pcc->pcc_vecbase = PCC_VECBASE;
	sc->sc_pcc->pcc_abortirq = PCC_ABORT_IEN | PCC_ABORT_ACK;
	sc->sc_pcc->pcc_genctl |= PCC_GENCTL_IEN;

	/* XXX further init of PCC chip? */

	config_search(pcc_scan, self, args);
}

/*
 * PCC interrupts land in a PCC_NVEC sized hole starting at PCC_VECBASE
 */
int
pccintr_establish(vec, ih, name)
	int vec;
	struct intrhand *ih;
	const char *name;
{
#ifdef DIAGNOSTIC
	if (vec < 0 || vec >= PCC_NVEC)
		panic("pccintr_establish: illegal vector for %s: 0x%x",
		    name, vec);
#endif

	return intr_establish(PCC_VECBASE + vec, ih, name);
}

int
pccabort(frame)
	void *frame;
{
#if 0
	/* XXX wait for it to debounce -- there is something wrong here */
	while (sys_pcc->pcc_abortirq & PCC_ABORT_ABS)
		;
	delay(2);
#endif
	sys_pcc->pcc_abortirq = PCC_ABORT_IEN | PCC_ABORT_ACK;
	nmihand(frame);
	return (1);
}

int
pccspeed(pcc)
	struct pccreg *pcc;
{
	volatile u_short lim = pcc_timer_us2lim(400);
	volatile u_short tmp;
	volatile int cnt;
	int speed;

	pcc->pcc_t1irq = 0;		/* just in case */
	pcc->pcc_t1pload = 0;
	pcc->pcc_t1ctl = PCC_TIMERCLEAR;
	pcc->pcc_t1ctl = PCC_TIMERSTART;
	
	cnt = 0;
	for (;;) {
		tmp = pcc->pcc_t1count;
		if (tmp > lim)
			break;
		tmp = lim;
		cnt++;
	}

	pcc->pcc_t1ctl = PCC_TIMERCLEAR;
	printf("pccspeed cnt=%d\n", cnt);

	/*
	 * Empirically determined. Unfortunately, because of various
	 * memory board effects and such, it is rather unlikely that
	 * we will find a nice formula.
	 */
	if (cnt > 280000)
		speed = 50;
	else if (cnt > 210000)
		speed = 33;
	else if (cnt > 190000)
		speed = 25;
	else if (cnt > 170000)	/* 171163, 170335 */
		speed = 20;
	else
		speed = 16;
	return (speed);
}
@


1.18
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.17 2009/03/01 22:07:12 miod Exp $ */
@


1.17
log
@Tweak pccspeed() to not report 33MHz boards as 50MHz (until better code is
used there).
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.16 2009/02/17 22:28:40 miod Exp $ */
a34 1
#include <sys/user.h>
@


1.16
log
@Add real bus_space and bus_dma to mvme68k, so that it can benefit from
recent driver work; this gives us better osiop and vs drivers, vsbic
(although currently disabled on 68060 boards until more bugs are fixed),
and the ability to boot and root off vs and vsbic.

Existing code is not modified and still uses memory mapped structures;
this might change eventually as more code gets factorized and moved to
MI land.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.15 2005/11/24 22:43:16 miod Exp $ */
d230 1
a230 1
	if (cnt > 230000)
@


1.15
log
@Prefer vaddr_t and paddr_t types in device softc, instead of void * and
heavy casts. Improves readability, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.14 2004/07/30 22:29:45 miod Exp $ */
d107 1
d111 2
@


1.14
log
@Move struct evcount inside struct intrhand, and modernize intrhand
usage; similar to (and from) mvme88k.

Also remove unused haltvec structures and related code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.13 2004/07/02 17:57:29 miod Exp $ */
d51 2
a52 2
	void		*sc_vaddr;
	void		*sc_paddr;
d116 2
a117 2
		oca.ca_vaddr = (void *)-1;
		oca.ca_paddr = (void *)-1;
d143 1
a143 1
	sc->sc_vaddr = (void *)IIOV(sc->sc_paddr);
@


1.13
log
@Kill ca_master in autoconf structures. Drivers either only attach to one
specific bus (mc/pcc/pcctwo), or they know it from the ca_bustype value,
and can use the globals sys_busname variables.

This also allows for some code simplifications.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.12 2004/01/14 20:52:49 miod Exp $ */
d152 1
a152 1
	pccintr_establish(PCCV_ABORT, &sc->sc_nmiih);
d167 1
a167 1
pccintr_establish(vec, ih)
d170 1
d172 7
a178 5
	if (vec >= PCC_NVEC) {
		printf("pcc: illegal vector: 0x%x\n", vec);
		panic("pccintr_establish");
	}
	return (intr_establish(PCC_VECBASE+vec, ih));
@


1.12
log
@mvme* do not support buses with indirect configuration, so don't check and
mourn for this.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.11 2004/01/14 20:50:48 miod Exp $ */
a119 1
	oca.ca_master = (void *)sc->sc_pcc;
@


1.11
log
@Do not fill more than the first three fields of cfdriver structures unless
necessary. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.10 2003/06/02 05:09:14 deraadt Exp $ */
a107 5

	if (parent->dv_cfdata->cf_driver->cd_indirect) {
                printf(" indirect devices not supported\n");
                return 0;
        }
@


1.10
log
@license cleanup of my files
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.9 2002/04/27 23:21:05 miod Exp $ */
d68 1
a68 1
	NULL, "pcc", DV_DULL, 0
@


1.9
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.8 2002/04/21 23:44:29 miod Exp $ */
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@Fix comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.7 2002/03/14 01:26:37 millert Exp $ */
d65 3
a67 1
int  pccabort(struct frame *);
a83 1
	struct cfdata *cf = vcf;
a112 1
	struct confargs *ca = args;
a145 1
	int i;
a161 1
	sc->sc_nmiih.ih_arg = 0;
d192 1
a192 1
	struct frame *frame;
a213 2
	/*printf("counting...lim = %d\n", lim);*/

d220 1
a220 1
	while (1) {
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.6 2000/03/26 23:31:59 deraadt Exp $ */
d236 1
a236 1
	 * Imperically determined. Unfortunately, because of various
@


1.6
log
@callout.h is gone
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.5 1996/11/23 21:45:59 kstailey Exp $ */
d63 3
a65 3
void pccattach __P((struct device *, struct device *, void *));
int  pccmatch __P((struct device *, void *, void *));
int  pccabort __P((struct frame *));
@


1.6.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.6 2000/03/26 23:31:59 deraadt Exp $ */
d63 3
a65 5
void pccattach(struct device *, struct device *, void *);
int  pccmatch(struct device *, void *, void *);
int  pccabort(void *);
int  pcc_print(void *, const char *);
int  pcc_scan(struct device *, void *, void *);
d82 1
d112 1
d146 1
d163 1
d194 1
a194 1
	void *frame;
d216 2
d224 1
a224 1
	for (;;) {
d236 1
a236 1
	 * Empirically determined. Unfortunately, because of various
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a43 1
#include <sys/callout.h>
@


1.5.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.6 2000/03/26 23:31:59 deraadt Exp $ */
d44 1
@


1.5.14.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d63 3
a65 3
void pccattach(struct device *, struct device *, void *);
int  pccmatch(struct device *, void *, void *);
int  pccabort(struct frame *);
@


1.5.14.3
log
@Sync the SMP branch with 3.3
@
text
@d65 1
a65 3
int  pccabort(void *);
int  pcc_print(void *, const char *);
int  pcc_scan(struct device *, void *, void *);
d82 1
d112 1
d146 1
d163 1
d194 1
a194 1
	void *frame;
d216 2
d224 1
a224 1
	for (;;) {
d236 1
a236 1
	 * Empirically determined. Unfortunately, because of various
@


1.5.14.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pcc.c,v 1.5.14.3 2003/03/27 23:32:16 niklas Exp $ */
d15 6
@


1.5.14.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d68 1
a68 1
	NULL, "pcc", DV_DULL
d108 5
@


1.4
log
@use void * for pa/va instead of caddr_t
@
text
@d95 1
a95 1
	char *bus;
@


1.3
log
@cfattach/cfdriver split
@
text
@d58 2
a59 2
	caddr_t		sc_vaddr;
	caddr_t		sc_paddr;
d128 2
a129 2
		oca.ca_vaddr = (caddr_t)-1;
		oca.ca_paddr = (caddr_t)-1;
d157 1
a157 1
	sc->sc_vaddr = (caddr_t)IIOV(sc->sc_paddr);
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
d68 6
a73 3
struct cfdriver pcccd = {
	NULL, "pcc", pccmatch, pccattach,
	DV_DULL, sizeof(struct pccsoftc), 0
d134 1
a134 1
	if ((*cf->cf_driver->cd_match)(parent, cf, &oca) == 0)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id: pcc.c,v 1.1.1.1 1995/07/25 23:12:08 chuck Exp $ */
d4 1
a4 2
 *
 * Copyright (c) 1995 Charles D. Cranor
d17 2
a18 1
 *      This product includes software developed by Charles D. Cranor.
d35 1
a35 1
 * peripheral channel controller
a36 1

d51 1
d53 1
a53 2
#include <mvme68k/mvme68k/isr.h>
#include <mvme68k/dev/iio.h>
a55 4
/*
 * Autoconfiguration stuff.
 */

d58 4
a61 1
	struct pcc	*sc_pcc;
a63 1

d66 1
d73 1
a73 11
/*
 * globals
 */

struct pcc *sys_pcc = NULL;

struct {
	int	(*pcc_fn)();
	void	*arg;
	int	lvl;
} pcc_vecs[PCC_NVEC];
d81 14
d96 39
a134 1
	return !badbaddr((caddr_t) IIO_CFLOC_ADDR(cf));
d142 3
a144 1
	struct pccsoftc *pccsc;
a148 2
	iio_print(self->dv_cfdata);

d150 2
a151 1
	 * link into softc and set up interrupt vector base
d153 16
a168 8
	pccsc = (struct pccsoftc *) self;
	sys_pcc = pccsc->sc_pcc = (struct pcc *)IIO_CFLOC_ADDR(self->dv_cfdata);
	pccsc->sc_pcc->int_vectr = PCC_VECBASE;
	bzero(pcc_vecs, sizeof(pcc_vecs));

	printf(" rev %d intbvr 0x%x\n", pccsc->sc_pcc->pcc_rev,
	    pccsc->sc_pcc->int_vectr);
}
d170 1
d172 1
a172 23
/*
 * pccintr: called from locore with the PC and evec from the trap frame.
 */
int
pccintr(pc, evec, frame)
	int pc;
	int evec;
	void *frame;
{
	int vec = (evec & 0xfff) >> 2; /* XXX should be m68k macro? */
	extern u_long intrcnt[]; /* XXX from locore */

	vec = vec & 0xf; /* XXX mask out */
	if (vec >= PCC_NVEC || pcc_vecs[vec].pcc_fn == NULL) 
		return(straytrap(pc, evec));

	cnt.v_intr++;
	intrcnt[pcc_vecs[vec].lvl]++;
  
	/* arg override?  only timer1 gets access to frame */
	if (vec != PCCV_TIMER1)
		frame = pcc_vecs[vec].arg;
	return((*pcc_vecs[vec].pcc_fn)(frame));
a174 1

d176 1
a176 1
 * pccintr_establish: establish pcc interrupt
d179 3
a181 4
pccintr_establish(vec, hand, lvl, arg)
	u_long vec;
	int (*hand)(), lvl;
	void *arg;
d187 2
d190 38
a227 4
	if (pcc_vecs[vec].pcc_fn) {
		printf("pcc: vector 0x%x in use: (0x%x,0x%x) (0x%x,0x%x)\n",
		    hand, arg, pcc_vecs[vec].pcc_fn, pcc_vecs[vec].arg);
		panic("pccintr_establish");
d230 19
a248 3
	pcc_vecs[vec].pcc_fn = hand;
	pcc_vecs[vec].lvl = lvl;
	pcc_vecs[vec].arg = arg;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@d1 1
a1 1
/*	$NetBSD$ */
d4 2
a5 1
 * Copyright (c) 1995 Theo de Raadt
d18 1
a18 1
 *      This product includes software developed by Theo de Raadt. 
d35 1
a35 1
 * VME147 peripheral channel controller
d37 1
a51 1
#include <machine/autoconf.h>
d53 3
d57 3
a59 1
#include <mvme68k/dev/pccreg.h>
d63 1
a63 4
	caddr_t		sc_vaddr;
	caddr_t		sc_paddr;
	struct pccreg	*sc_pcc;
	struct intrhand	sc_nmiih;
d66 1
a68 1
int  pccabort __P((struct frame *));
d75 11
a85 1
struct pccreg *sys_pcc = NULL;
a92 14
	struct confargs *ca = args;

	/* the pcc only exist on vme147's */
	if (cputyp != CPU_147)
		return (0);
	return (!badvaddr(IIOV(ca->ca_paddr) + PCCSPACE_PCCCHIP_OFF, 1));
}

int
pcc_print(args, bus)
	void *args;
	char *bus;
{
	struct confargs *ca = args;
d94 1
a94 39
	if (ca->ca_offset != -1)
		printf(" offset 0x%x", ca->ca_offset);
	if (ca->ca_ipl > 0)
		printf(" ipl %d", ca->ca_ipl);
	return (UNCONF);
}

int
pcc_scan(parent, child, args)
	struct device *parent;
	void *child, *args;
{
	struct cfdata *cf = child;
	struct pccsoftc *sc = (struct pccsoftc *)parent;
	struct confargs *ca = args;
	struct confargs oca;

	if (parent->dv_cfdata->cf_driver->cd_indirect) {
                printf(" indirect devices not supported\n");
                return 0;
        }

	bzero(&oca, sizeof oca);
	oca.ca_offset = cf->cf_loc[0];
	oca.ca_ipl = cf->cf_loc[1];
	if (oca.ca_offset != -1) {
		oca.ca_vaddr = sc->sc_vaddr + oca.ca_offset;
		oca.ca_paddr = sc->sc_paddr + oca.ca_offset;
	} else {
		oca.ca_vaddr = (caddr_t)-1;
		oca.ca_paddr = (caddr_t)-1;
	}	
	oca.ca_bustype = BUS_PCC;
	oca.ca_master = (void *)sc->sc_pcc;
	oca.ca_name = cf->cf_driver->cd_name;
	if ((*cf->cf_driver->cd_match)(parent, cf, &oca) == 0)
		return (0);
	config_attach(parent, cf, &oca, pcc_print);
	return (1);
d102 1
a102 3
	struct confargs *ca = args;
	struct pccsoftc *sc = (struct pccsoftc *)self;
	int i;
d107 2
d110 1
a110 2
	 * since we know ourself to land in intiobase land,
	 * we must adjust our address
d112 8
a119 16
	sc->sc_paddr = ca->ca_paddr;
	sc->sc_vaddr = (caddr_t)IIOV(sc->sc_paddr);
	sc->sc_pcc = (struct pccreg *)(sc->sc_vaddr + PCCSPACE_PCCCHIP_OFF);
	sys_pcc = sc->sc_pcc;

	printf(": rev %d\n", sc->sc_pcc->pcc_chiprev);

	sc->sc_nmiih.ih_fn = pccabort;
	sc->sc_nmiih.ih_arg = 0;
	sc->sc_nmiih.ih_ipl = 7;
	sc->sc_nmiih.ih_wantframe = 1;
	pccintr_establish(PCCV_ABORT, &sc->sc_nmiih);

	sc->sc_pcc->pcc_vecbase = PCC_VECBASE;
	sc->sc_pcc->pcc_abortirq = PCC_ABORT_IEN | PCC_ABORT_ACK;
	sc->sc_pcc->pcc_genctl |= PCC_GENCTL_IEN;
a120 1
	/* XXX further init of PCC chip? */
d122 23
a144 1
	config_search(pcc_scan, self, args);
d147 1
d149 1
a149 1
 * PCC interrupts land in a PCC_NVEC sized hole starting at PCC_VECBASE
d152 4
a155 3
pccintr_establish(vec, ih)
	int vec;
	struct intrhand *ih;
a160 2
	return (intr_establish(PCC_VECBASE+vec, ih));
}
d162 4
a165 38
int
pccabort(frame)
	struct frame *frame;
{
#if 0
	/* XXX wait for it to debounce -- there is something wrong here */
	while (sys_pcc->pcc_abortirq & PCC_ABORT_ABS)
		;
	delay(2);
#endif
	sys_pcc->pcc_abortirq = PCC_ABORT_IEN | PCC_ABORT_ACK;
	nmihand(frame);
	return (1);
}

int
pccspeed(pcc)
	struct pccreg *pcc;
{
	volatile u_short lim = pcc_timer_us2lim(400);
	volatile u_short tmp;
	volatile int cnt;
	int speed;

	/*printf("counting...lim = %d\n", lim);*/

	pcc->pcc_t1irq = 0;		/* just in case */
	pcc->pcc_t1pload = 0;
	pcc->pcc_t1ctl = PCC_TIMERCLEAR;
	pcc->pcc_t1ctl = PCC_TIMERSTART;
	
	cnt = 0;
	while (1) {
		tmp = pcc->pcc_t1count;
		if (tmp > lim)
			break;
		tmp = lim;
		cnt++;
d168 3
a170 19
	pcc->pcc_t1ctl = PCC_TIMERCLEAR;
	printf("pccspeed cnt=%d\n", cnt);

	/*
	 * Imperically determined. Unfortunately, because of various
	 * memory board effects and such, it is rather unlikely that
	 * we will find a nice formula.
	 */
	if (cnt > 230000)
		speed = 50;
	else if (cnt > 210000)
		speed = 33;
	else if (cnt > 190000)
		speed = 25;
	else if (cnt > 170000)	/* 171163, 170335 */
		speed = 20;
	else
		speed = 16;
	return (speed);
@
