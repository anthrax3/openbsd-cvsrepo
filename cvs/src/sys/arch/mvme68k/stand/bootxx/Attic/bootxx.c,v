head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2012.12.31.21.35.32;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.20.00.24.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.16.15.37.04;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.15.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.04.08.06.55;	author niklas;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	99.09.27.03.04.07;	author smurph;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.09.26.18.09.04;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	96.05.16.02.37.25;	author chuck;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.01.17;	author nate;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.03.28.10.34.06;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2003.03.27.23.32.17;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2002.06.11.03.36.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: bootxx.c,v 1.9 2012/12/31 21:35:32 miod Exp $ */
/*	$NetBSD: bootxx.c,v 1.5 1995/10/13 21:44:57 gwr Exp $ */

/*
 * Copyright (c) 1994 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This is a generic "first-stage" boot program.
 *
 * Note that this program has absolutely no filesystem knowledge!
 *
 * Instead, this uses a table of disk block numbers that are
 * filled in by the installboot program such that this program
 * can load the "second-stage" boot program.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/exec.h>
#include <machine/prom.h>

#include "stand.h"
#include "libsa.h"
#include "libbug.h"

/*
 * Boot device is derived from ROM provided information.
 */

/* This determines the largest boot program we can load. */
#define MAXBLOCKNUM	64

/*
 * These three names are known by installboot.
 * The block_table contains starting block numbers,
 * in terms of 512-byte blocks.  Each non-zero value
 * will result in a read of block_size bytes.
 */
size_t     	block_size = 512;	/* default */
int     	block_count = MAXBLOCKNUM;	/* length of table */
daddr32_t 	block_table[MAXBLOCKNUM] = { 0 };

int	copyboot(struct open_file *, char *);

int
main()
{
	struct open_file f;
	char *addr;
	int error;

#ifdef DEBUG
	printf("Boot: bug device: ctrl=%d, dev=%d\n",
	    bugargs.ctrl_lun, bugargs.dev_lun);
#endif

	f.f_flags = F_RAW;
	if (devopen(&f, 0, &addr)) {
		printf("bootxx: open failed\n");
		_rtt();
	}

	addr = (char *)STAGE2_RELOC;
	error = copyboot(&f, addr);
	f.f_dev->dv_close(&f);
	if (!error) {
		bugexec((u_int *)addr);
	}
	/* copyboot had a problem... */
	_rtt();
	return (0);
}

int
copyboot(struct open_file *fp, char *addr)
{
	size_t n;
	int i, blknum;
	struct exec *x;

	addr -= sizeof(struct exec); /* assume OMAGIC, verify below */
	x = (struct exec *)addr;

	if (!block_count) {
		printf("bootxx: no data!?!\n");
		return -1;
	}

	for (i = 0; i < block_count; i++) {

		if ((blknum = block_table[i]) == 0)
			break;

#ifdef DEBUG
		printf("bootxx: read block # %d = %d\n", i, blknum);
#endif
		if ((fp->f_dev->dv_strategy)(fp->f_devdata, F_READ,
		    blknum, block_size, addr, &n)) {
			printf("bootxx: read failed\n");
			return -1;
		}
		if (n != block_size) {
			printf("bootxx: short read\n");
			return -1;
		}
		addr += block_size;
	}

	if (N_GETMAGIC(*x) != OMAGIC) {
		printf("bootxx: secondary bootstrap isn't in OMAGIC format\n");
		return(-1);
	}

	return 0;
}
@


1.9
log
@Switch mvme68k boot blocks to use the MI libsa loadfile routines to load
kernel images, instead of their own; gives us the ability to load ELF kernels
for free.

Fix many warnings, and generally make the code closer to the current mvme88k
boot blocks to help diffability.

Rewrite bugcrt and bugexec() as a short assembly shim around a
compiler-independent C block; this will allow compilers other than gcc2 to be
used, and removes the need for bugcrt to be compiled without optimization.

Crank all bootblocks versions.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.8 2011/03/13 00:13:53 deraadt Exp $ */
@


1.8
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.7 2003/08/20 00:24:43 deraadt Exp $ */
a55 2
#define LOADADDR	0x6F0000 /* where to load level 2 bootstrap */
				/* (l2 must relocate itself) */
d66 1
a66 1
int     	block_size = 512;	/* default */
d70 1
a70 1
extern		char *version;
d72 30
a101 1
static int
d104 2
a105 1
	int	n, i, blknum;
a141 26
}

main(int argc, char *argv[])
{
	struct open_file	f;
	char	*addr;
	int n, error;

	printf("Boot: bug device: ctrl=%d, dev=%d\n",
	    bugargs.ctrl_lun, bugargs.dev_lun);
	printf("\nbootxx: first level bootstrap program [%s]\n\n", version);

	f.f_flags = F_RAW;
	if (devopen(&f, 0, &addr)) {
		printf("bootxx: open failed\n");
		_rtt();
	}

	addr = (char *)LOADADDR;
	error = copyboot(&f, addr);
	f.f_dev->dv_close(&f);
	if (!error) {
		bugexec((void (*)(void))addr + 8);
	}
	/* copyboot had a problem... */
	_rtt();
@


1.7
log
@ansi and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.6 2002/04/16 15:37:04 miod Exp $ */
d70 1
a70 1
daddr_t 	block_table[MAXBLOCKNUM] = { 0 };
@


1.6
log
@Move the stage2 boot block load address higher, so that it can load
kernel larger than 4MB correctly again, and still work on 8MB boards.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.5 2002/03/14 03:15:56 millert Exp $ */
d51 1
d74 2
a75 31

main()
{
	struct open_file	f;
	char	*addr;
	int n, error;

	printf("Boot: bug device: ctrl=%d, dev=%d\n", 
		bugargs.ctrl_lun, bugargs.dev_lun);
	printf("\nbootxx: first level bootstrap program [%s]\n\n", version);

	f.f_flags = F_RAW;
	if (devopen(&f, 0, &addr)) {
		printf("bootxx: open failed\n");
		_rtt();
	}

	addr = (char *)LOADADDR;
	error = copyboot(&f, addr);
	f.f_dev->dv_close(&f);
	if (!error) {
		bugexec((void (*)())addr + 8);
	}
	/* copyboot had a problem... */
	_rtt();
}

int
copyboot(fp, addr)
	struct open_file	*fp;
	char			*addr;
d97 1
a97 2
					   blknum, block_size, addr, &n))
		{
d114 26
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.4 2001/07/04 08:06:55 niklas Exp $ */
d55 1
a55 1
#define LOADADDR	0x3F0000 /* where to load level 2 bootstrap */
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.5 1995/10/13 21:44:57 gwr Exp $ */
d90 1
a90 1
	addr = (char*)LOADADDR;
@


1.4.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.4 2001/07/04 08:06:55 niklas Exp $ */
d55 1
a55 1
#define LOADADDR	0x6F0000 /* where to load level 2 bootstrap */
d90 1
a90 1
	addr = (char *)LOADADDR;
@


1.3
log
@Made loader load at 0x3f0000
@
text
@d1 1
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$ */
@


1.3.4.2
log
@Merge in -current from about a week ago
@
text
@d90 1
a90 1
	addr = (char *)LOADADDR;
@


1.3.4.3
log
@Sync the SMP branch with 3.3
@
text
@d55 1
a55 1
#define LOADADDR	0x6F0000 /* where to load level 2 bootstrap */
@


1.3.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a50 1
#include "libbug.h"
d73 31
a103 2
static int
copyboot(struct open_file *fp, char *addr)
d125 2
a126 1
		    blknum, block_size, addr, &n)) {
a142 26
}

main(int argc, char *argv[])
{
	struct open_file	f;
	char	*addr;
	int n, error;

	printf("Boot: bug device: ctrl=%d, dev=%d\n",
	    bugargs.ctrl_lun, bugargs.dev_lun);
	printf("\nbootxx: first level bootstrap program [%s]\n\n", version);

	f.f_flags = F_RAW;
	if (devopen(&f, 0, &addr)) {
		printf("bootxx: open failed\n");
		_rtt();
	}

	addr = (char *)LOADADDR;
	error = copyboot(&f, addr);
	f.f_dev->dv_close(&f);
	if (!error) {
		bugexec((void (*)(void))addr + 8);
	}
	/* copyboot had a problem... */
	_rtt();
@


1.2
log
@More installboot related stuff.
@
text
@d54 1
a54 1
#define LOADADDR	0xCF0000 /* where to load level 2 bootstrap */
@


1.1
log
@import level 1 bootstrap from sun3/sparc port
@
text
@d54 1
a54 1
#define LOADADDR	0x11000 /* where to load level 2 bootstrap */
d93 1
a93 1
		bugexec((void (*)())addr);
@

