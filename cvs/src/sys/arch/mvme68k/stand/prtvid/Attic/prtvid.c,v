head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	theo-1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2012.12.31.21.35.32;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.17.00.28.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.27.15.23.45;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.16.17.46.08;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.04.08.06.57;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.08.05.02.24;	author chuck;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	96.04.28.10.49.29;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.44.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.44.51;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.10.31.03.01.18;	author nate;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: prtvid.c,v 1.8 2012/12/31 21:35:32 miod Exp $	*/

/*
 * Copyright (c) 1995 Dale Rahn <drahn@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/disklabel.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define __DBINTERFACE_PRIVATE
#include <db.h>

static void
swabvid(struct mvmedisklabel *cdl)
{
	M_32_SWAP(cdl->vid_oss);
	M_16_SWAP(cdl->vid_osl);
	M_16_SWAP(cdl->vid_osa_u);
	M_16_SWAP(cdl->vid_osa_l);
	M_32_SWAP(cdl->vid_cas);
}

static void
swabcfg(struct mvmedisklabel *cdl)
{
	printf("swapping cfg\n");

	M_16_SWAP(cdl->cfg_atm);
	M_16_SWAP(cdl->cfg_prm);
	M_16_SWAP(cdl->cfg_atm);
	M_16_SWAP(cdl->cfg_rec);
	M_16_SWAP(cdl->cfg_trk);
	M_16_SWAP(cdl->cfg_psm);
	M_16_SWAP(cdl->cfg_shd);
	M_16_SWAP(cdl->cfg_pcom);
	M_16_SWAP(cdl->cfg_rwcc);
	M_16_SWAP(cdl->cfg_ecc);
	M_16_SWAP(cdl->cfg_eatm);
	M_16_SWAP(cdl->cfg_eprm);
	M_16_SWAP(cdl->cfg_eatw);
	M_16_SWAP(cdl->cfg_rsvc1);
	M_16_SWAP(cdl->cfg_rsvc2);
}

int
main(int argc, char *argv[])
{
	struct mvmedisklabel *cdl;

	cdl = (struct mvmedisklabel *) malloc(sizeof (struct mvmedisklabel));

	fread(cdl, sizeof(struct mvmedisklabel), 1, stdin);

	if (BYTE_ORDER != BIG_ENDIAN)
		swabvid(cdl);

	printf("vid_id		%s	%lx\n", cdl->vid_id,
	    (char *)&(cdl->vid_id[4]) - (char *)cdl);
	printf("vid_oss		%x	%lx\n", cdl->vid_oss,
	    (char *)&(cdl->vid_oss) - (char *)cdl);
	printf("vid_osl		%x	%lx\n", cdl->vid_osl,
	    (char *)&(cdl->vid_osl) - (char *)cdl);
	printf("vid_osa_u	%x	%lx\n", cdl->vid_osa_u,
	    (char *)&(cdl->vid_osa_u) - (char *)cdl);
	printf("vid_osa_l	%x	%lx\n", cdl->vid_osa_l,
	    (char *)&(cdl->vid_osa_l) - (char *)cdl);
	printf("vid_vd %lx\n",
	    (char *)&(cdl->vid_vd) - (char *)cdl);
	printf("vid_cas		%x	%lx\n", cdl->vid_cas,
	    (char *)&(cdl->vid_cas) - (char *)cdl);
	printf("vid_cal		%x	%lx\n", cdl->vid_cal,
	    (char *)&(cdl->vid_cal) - (char *)cdl);
	printf("vid_moto	%s	%lx\n", cdl->vid_mot,
	    (char *)&(cdl->vid_mot[0]) - (char *)cdl);

	if (BYTE_ORDER != BIG_ENDIAN)
		swabcfg(cdl);

	printf("cfg_atm		%x	%lx\n", cdl->cfg_atm,
	    (char *)&(cdl->cfg_atm) - (char *)(cdl));
	printf("cfg_prm		%x	%lx\n", cdl->cfg_prm,
	    (char *)&(cdl->cfg_prm) - (char *)(cdl));
	printf("cfg_atw		%x	%lx\n", cdl->cfg_atw,
	    (char *)&(cdl->cfg_atw) - (char *)(cdl));
	printf("cfg_rec		%lx	%lx\n",(long)cdl->cfg_rec,
	    (char *)&(cdl->cfg_rec) - (char *)(cdl));
	printf("cfg_spt		%x	%lx\n", cdl->cfg_spt,
	    (char *)&(cdl->cfg_spt) - (char *)(cdl));
	printf("cfg_hds		%x	%lx\n", cdl->cfg_hds,
	    (char *)&(cdl->cfg_hds) - (char *)(cdl));
	printf("cfg_trk		%x	%lx\n", cdl->cfg_trk,
	    (char *)&(cdl->cfg_trk) - (char *)(cdl));
	printf("cfg_ilv		%x	%lx\n", cdl->cfg_ilv,
	    (char *)&(cdl->cfg_ilv) - (char *)(cdl));
	printf("cfg_sof		%x	%lx\n", cdl->cfg_sof,
	    (char *)&(cdl->cfg_sof) - (char *)(cdl));
	printf("cfg_psm		%x	%lx\n", cdl->cfg_psm,
	    (char *)&(cdl->cfg_psm) - (char *)(cdl));
	printf("cfg_shd		%x	%lx\n", cdl->cfg_shd,
	    (char *)&(cdl->cfg_shd) - (char *)(cdl));
	printf("cfg_pcom	%x	%lx\n", cdl->cfg_pcom,
	    (char *)&(cdl->cfg_pcom) - (char *)(cdl));
	printf("cfg_ssr 	%x	%lx\n", cdl->cfg_ssr,
	    (char *)&(cdl->cfg_ssr) - (char *)(cdl));
	printf("cfg_rwcc	%x	%lx\n", cdl->cfg_rwcc,
	    (char *)&(cdl->cfg_rwcc) - (char *)(cdl));
	printf("cfg_ecc 	%x	%lx\n", cdl->cfg_ecc,
	    (char *)&(cdl->cfg_ecc) - (char *)(cdl));
	printf("cfg_eatm	%x	%lx\n", cdl->cfg_eatm,
	    (char *)&(cdl->cfg_eatm) - (char *)(cdl));
	printf("cfg_eprm	%x	%lx\n", cdl->cfg_eprm,
	    (char *)&(cdl->cfg_eprm) - (char *)(cdl));
	printf("cfg_eatw	%x	%lx\n", cdl->cfg_eatw,
	    (char *)&(cdl->cfg_eatw) - (char *)(cdl));
	printf("cfg_gpb1	%x	%lx\n", cdl->cfg_gpb1,
	    (char *)&(cdl->cfg_gpb1) - (char *)(cdl));
	printf("cfg_gpb2	%x	%lx\n", cdl->cfg_gpb2,
	    (char *)&(cdl->cfg_gpb2) - (char *)(cdl));
	printf("cfg_gpb3	%x	%lx\n", cdl->cfg_gpb3,
	    (char *)&(cdl->cfg_gpb3) - (char *)(cdl));
	printf("cfg_gpb4	%x	%lx\n", cdl->cfg_gpb4,
	    (char *)&(cdl->cfg_gpb4) - (char *)(cdl));
	printf("cfg_ssc		%x	%lx\n", cdl->cfg_ssc,
	    (char *)&(cdl->cfg_ssc) - (char *)(cdl));
	printf("cfg_runit	%x	%lx\n", cdl->cfg_runit,
	    (char *)&(cdl->cfg_runit) - (char *)(cdl));
	printf("cfg_rsvc1	%x	%lx\n", cdl->cfg_rsvc1,
	    (char *)&(cdl->cfg_rsvc1) - (char *)(cdl));
	printf("cfg_rsvc2	%x	%lx\n", cdl->cfg_rsvc2,
	    (char *)&(cdl->cfg_rsvc2) - (char *)(cdl));

	return 0;
}
@


1.8
log
@Switch mvme68k boot blocks to use the MI libsa loadfile routines to load
kernel images, instead of their own; gives us the ability to load ELF kernels
for free.

Fix many warnings, and generally make the code closer to the current mvme88k
boot blocks to help diffability.

Rewrite bugcrt and bugexec() as a short assembly shim around a
compiler-independent C block; this will allow compilers other than gcc2 to be
used, and removes the need for bugcrt to be compiled without optimization.

Crank all bootblocks versions.
@
text
@d1 1
a1 1
/*	$OpenBSD: prtvid.c,v 1.7 2007/06/17 00:28:56 deraadt Exp $	*/
@


1.7
log
@amd64/stand
@
text
@d1 1
a1 1
/*	$OpenBSD: prtvid.c,v 1.6 2004/12/27 15:23:45 drahn Exp $	*/
d23 2
d72 1
a72 1
	printf("vid_id		%s	%x\n", cdl->vid_id,
d74 1
a74 1
	printf("vid_oss		%x	%x\n", cdl->vid_oss,
d76 1
a76 1
	printf("vid_osl		%x	%x\n", cdl->vid_osl,
d78 1
a78 1
	printf("vid_osa_u	%x	%x\n", cdl->vid_osa_u,
d80 1
a80 1
	printf("vid_osa_l	%x	%x\n", cdl->vid_osa_l,
d82 1
a82 1
	printf("vid_vd %x\n",
d84 1
a84 1
	printf("vid_cas		%x	%x\n", cdl->vid_cas,
d86 1
a86 1
	printf("vid_cal		%x	%x\n", cdl->vid_cal,
d88 1
a88 1
	printf("vid_moto	%s	%x\n", cdl->vid_mot,
d94 1
a94 1
	printf("cfg_atm		%x	%x\n", cdl->cfg_atm,
d96 1
a96 1
	printf("cfg_prm		%x	%x\n", cdl->cfg_prm,
d98 1
a98 1
	printf("cfg_atw		%x	%x\n", cdl->cfg_atw,
d100 1
a100 1
	printf("cfg_rec		%x	%x\n",(long)cdl->cfg_rec,
d102 1
a102 1
	printf("cfg_spt		%x	%x\n", cdl->cfg_spt,
d104 1
a104 1
	printf("cfg_hds		%x	%x\n", cdl->cfg_hds,
d106 1
a106 1
	printf("cfg_trk		%x	%x\n", cdl->cfg_trk,
d108 1
a108 1
	printf("cfg_ilv		%x	%x\n", cdl->cfg_ilv,
d110 1
a110 1
	printf("cfg_sof		%x	%x\n", cdl->cfg_sof,
d112 1
a112 1
	printf("cfg_psm		%x	%x\n", cdl->cfg_psm,
d114 1
a114 1
	printf("cfg_shd		%x	%x\n", cdl->cfg_shd,
d116 1
a116 1
	printf("cfg_pcom	%x	%x\n", cdl->cfg_pcom,
d118 1
a118 1
	printf("cfg_ssr 	%x	%x\n", cdl->cfg_ssr,
d120 1
a120 1
	printf("cfg_rwcc	%x	%x\n", cdl->cfg_rwcc,
d122 1
a122 1
	printf("cfg_ecc 	%x	%x\n", cdl->cfg_ecc,
d124 1
a124 1
	printf("cfg_eatm	%x	%x\n", cdl->cfg_eatm,
d126 1
a126 1
	printf("cfg_eprm	%x	%x\n", cdl->cfg_eprm,
d128 1
a128 1
	printf("cfg_eatw	%x	%x\n", cdl->cfg_eatw,
d130 1
a130 1
	printf("cfg_gpb1	%x	%x\n", cdl->cfg_gpb1,
d132 1
a132 1
	printf("cfg_gpb2	%x	%x\n", cdl->cfg_gpb2,
d134 1
a134 1
	printf("cfg_gpb3	%x	%x\n", cdl->cfg_gpb3,
d136 1
a136 1
	printf("cfg_gpb4	%x	%x\n", cdl->cfg_gpb4,
d138 1
a138 1
	printf("cfg_ssc		%x	%x\n", cdl->cfg_ssc,
d140 1
a140 1
	printf("cfg_runit	%x	%x\n", cdl->cfg_runit,
d142 1
a142 1
	printf("cfg_rsvc1	%x	%x\n", cdl->cfg_rsvc1,
d144 1
a144 1
	printf("cfg_rsvc2	%x	%x\n", cdl->cfg_rsvc2,
d146 2
@


1.6
log
@Finally put copyrights on files I wrote _long_ ago. prodded by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: prtvid.c,v 1.5 2003/08/16 17:46:08 deraadt Exp $	*/
d19 3
a24 1
#include <machine/disklabel.h>
d27 1
a27 1
swabvid(struct cpu_disklabel *cdl)
d37 1
a37 1
swabcfg(struct cpu_disklabel *cdl)
d61 1
a61 1
	struct cpu_disklabel *cdl;
d63 1
a63 1
	cdl = (struct cpu_disklabel *) malloc(sizeof (struct cpu_disklabel));
d65 1
a65 1
	fread(cdl, sizeof(struct cpu_disklabel), 1, stdin);
@


1.5
log
@ansi
@
text
@d1 17
a17 1
/*	$OpenBSD: prtvid.c,v 1.4 2001/07/04 08:06:57 niklas Exp $	*/
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 34
a41 3
main(argc, argv)
	int argc;
	char *argv[];
a125 32
}

swabvid(cdl)
	struct cpu_disklabel *cdl;
{
	M_32_SWAP(cdl->vid_oss);
	M_16_SWAP(cdl->vid_osl);
	M_16_SWAP(cdl->vid_osa_u);
	M_16_SWAP(cdl->vid_osa_l);
	M_32_SWAP(cdl->vid_cas);
}

swabcfg(cdl)
	struct cpu_disklabel *cdl;
{
	printf("swapping cfg\n");

	M_16_SWAP(cdl->cfg_atm);
	M_16_SWAP(cdl->cfg_prm);
	M_16_SWAP(cdl->cfg_atm);
	M_16_SWAP(cdl->cfg_rec);
	M_16_SWAP(cdl->cfg_trk);
	M_16_SWAP(cdl->cfg_psm);
	M_16_SWAP(cdl->cfg_shd);
	M_16_SWAP(cdl->cfg_pcom);
	M_16_SWAP(cdl->cfg_rwcc);
	M_16_SWAP(cdl->cfg_ecc);
	M_16_SWAP(cdl->cfg_eatm);
	M_16_SWAP(cdl->cfg_eprm);
	M_16_SWAP(cdl->cfg_eatw);
	M_16_SWAP(cdl->cfg_rsvc1);
	M_16_SWAP(cdl->cfg_rsvc2);
@


1.3
log
@make it compile again (update to machine/disklabel.h)
@
text
@d1 2
@


1.3.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

@


1.3.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d8 3
a10 34
static void
swabvid(struct cpu_disklabel *cdl)
{
	M_32_SWAP(cdl->vid_oss);
	M_16_SWAP(cdl->vid_osl);
	M_16_SWAP(cdl->vid_osa_u);
	M_16_SWAP(cdl->vid_osa_l);
	M_32_SWAP(cdl->vid_cas);
}

static void
swabcfg(struct cpu_disklabel *cdl)
{
	printf("swapping cfg\n");

	M_16_SWAP(cdl->cfg_atm);
	M_16_SWAP(cdl->cfg_prm);
	M_16_SWAP(cdl->cfg_atm);
	M_16_SWAP(cdl->cfg_rec);
	M_16_SWAP(cdl->cfg_trk);
	M_16_SWAP(cdl->cfg_psm);
	M_16_SWAP(cdl->cfg_shd);
	M_16_SWAP(cdl->cfg_pcom);
	M_16_SWAP(cdl->cfg_rwcc);
	M_16_SWAP(cdl->cfg_ecc);
	M_16_SWAP(cdl->cfg_eatm);
	M_16_SWAP(cdl->cfg_eprm);
	M_16_SWAP(cdl->cfg_eatw);
	M_16_SWAP(cdl->cfg_rsvc1);
	M_16_SWAP(cdl->cfg_rsvc2);
}

int
main(int argc, char *argv[])
d95 32
@


1.2
log
@add OpenBSD header
@
text
@a0 2
/*	$OpenBSD$ */

d4 1
a4 1
#include "vid.h"
d10 1
a10 2
	struct vid *pvid;
	struct cfg *pcfg;
d12 1
a12 1
	pvid = (struct vid *) malloc(sizeof (struct vid));
d14 1
a14 1
	fread(pvid, sizeof(struct vid), 1, stdin);
d17 1
a17 1
		swabvid(pvid);
d19 10
a28 10
	printf("vid_id		%s	%x\n", pvid->vid_id,
	    (char *)&(pvid->vid_id[4]) - (char *)pvid);
	printf("vid_oss		%x	%x\n", pvid->vid_oss,
	    (char *)&(pvid->vid_oss) - (char *)pvid);
	printf("vid_osl		%x	%x\n", pvid->vid_osl,
	    (char *)&(pvid->vid_osl) - (char *)pvid);
	printf("vid_osa_u	%x	%x\n", pvid->vid_osa_u,
	    (char *)&(pvid->vid_osa_u) - (char *)pvid);
	printf("vid_osa_l	%x	%x\n", pvid->vid_osa_l,
	    (char *)&(pvid->vid_osa_l) - (char *)pvid);
d30 7
a36 13
	    (char *)&(pvid->vid_vd) - (char *)pvid);
	printf("vid_cas		%x	%x\n", pvid->vid_cas,
	    (char *)&(pvid->vid_cas) - (char *)pvid);
	printf("vid_cal		%x	%x\n", pvid->vid_cal,
	    (char *)&(pvid->vid_cal) - (char *)pvid);
	printf("vid_moto	%s	%x\n", pvid->vid_mot,
	    (char *)&(pvid->vid_mot[0]) - (char *)pvid);

	free(pvid);

	pcfg = (struct cfg *) malloc(sizeof(struct cfg));

	fread(pcfg, sizeof(struct cfg), 1, stdin);
d39 1
a39 1
		swabcfg(pcfg);
d41 52
a92 52
	printf("cfg_atm		%x	%x\n", pcfg->cfg_atm,
	    (char *)&(pcfg->cfg_atm) - (char *)(pcfg));
	printf("cfg_prm		%x	%x\n", pcfg->cfg_prm,
	    (char *)&(pcfg->cfg_prm) - (char *)(pcfg));
	printf("cfg_atw		%x	%x\n", pcfg->cfg_atw,
	    (char *)&(pcfg->cfg_atw) - (char *)(pcfg));
	printf("cfg_rec		%x	%x\n",(long)pcfg->cfg_rec,
	    (char *)&(pcfg->cfg_rec) - (char *)(pcfg));
	printf("cfg_spt		%x	%x\n", pcfg->cfg_spt,
	    (char *)&(pcfg->cfg_spt) - (char *)(pcfg));
	printf("cfg_hds		%x	%x\n", pcfg->cfg_hds,
	    (char *)&(pcfg->cfg_hds) - (char *)(pcfg));
	printf("cfg_trk		%x	%x\n", pcfg->cfg_trk,
	    (char *)&(pcfg->cfg_trk) - (char *)(pcfg));
	printf("cfg_ilv		%x	%x\n", pcfg->cfg_ilv,
	    (char *)&(pcfg->cfg_ilv) - (char *)(pcfg));
	printf("cfg_sof		%x	%x\n", pcfg->cfg_sof,
	    (char *)&(pcfg->cfg_sof) - (char *)(pcfg));
	printf("cfg_psm		%x	%x\n", pcfg->cfg_psm,
	    (char *)&(pcfg->cfg_psm) - (char *)(pcfg));
	printf("cfg_shd		%x	%x\n", pcfg->cfg_shd,
	    (char *)&(pcfg->cfg_shd) - (char *)(pcfg));
	printf("cfg_pcom	%x	%x\n", pcfg->cfg_pcom,
	    (char *)&(pcfg->cfg_pcom) - (char *)(pcfg));
	printf("cfg_ssr 	%x	%x\n", pcfg->cfg_ssr,
	    (char *)&(pcfg->cfg_ssr) - (char *)(pcfg));
	printf("cfg_rwcc	%x	%x\n", pcfg->cfg_rwcc,
	    (char *)&(pcfg->cfg_rwcc) - (char *)(pcfg));
	printf("cfg_ecc 	%x	%x\n", pcfg->cfg_ecc,
	    (char *)&(pcfg->cfg_ecc) - (char *)(pcfg));
	printf("cfg_eatm	%x	%x\n", pcfg->cfg_eatm,
	    (char *)&(pcfg->cfg_eatm) - (char *)(pcfg));
	printf("cfg_eprm	%x	%x\n", pcfg->cfg_eprm,
	    (char *)&(pcfg->cfg_eprm) - (char *)(pcfg));
	printf("cfg_eatw	%x	%x\n", pcfg->cfg_eatw,
	    (char *)&(pcfg->cfg_eatw) - (char *)(pcfg));
	printf("cfg_gpb1	%x	%x\n", pcfg->cfg_gpb1,
	    (char *)&(pcfg->cfg_gpb1) - (char *)(pcfg));
	printf("cfg_gpb2	%x	%x\n", pcfg->cfg_gpb2,
	    (char *)&(pcfg->cfg_gpb2) - (char *)(pcfg));
	printf("cfg_gpb3	%x	%x\n", pcfg->cfg_gpb3,
	    (char *)&(pcfg->cfg_gpb3) - (char *)(pcfg));
	printf("cfg_gpb4	%x	%x\n", pcfg->cfg_gpb4,
	    (char *)&(pcfg->cfg_gpb4) - (char *)(pcfg));
	printf("cfg_ssc		%x	%x\n", pcfg->cfg_ssc,
	    (char *)&(pcfg->cfg_ssc) - (char *)(pcfg));
	printf("cfg_runit	%x	%x\n", pcfg->cfg_runit,
	    (char *)&(pcfg->cfg_runit) - (char *)(pcfg));
	printf("cfg_rsvc1	%x	%x\n", pcfg->cfg_rsvc1,
	    (char *)&(pcfg->cfg_rsvc1) - (char *)(pcfg));
	printf("cfg_rsvc2	%x	%x\n", pcfg->cfg_rsvc2,
	    (char *)&(pcfg->cfg_rsvc2) - (char *)(pcfg));
d95 2
a96 2
swabvid(pvid)
	struct vid *pvid;
d98 5
a102 5
	M_32_SWAP(pvid->vid_oss);
	M_16_SWAP(pvid->vid_osl);
	M_16_SWAP(pvid->vid_osa_u);
	M_16_SWAP(pvid->vid_osa_l);
	M_32_SWAP(pvid->vid_cas);
d105 2
a106 2
swabcfg(pcfg)
	struct cfg *pcfg;
d110 15
a124 15
	M_16_SWAP(pcfg->cfg_atm);
	M_16_SWAP(pcfg->cfg_prm);
	M_16_SWAP(pcfg->cfg_atm);
	M_16_SWAP(pcfg->cfg_rec);
	M_16_SWAP(pcfg->cfg_trk);
	M_16_SWAP(pcfg->cfg_psm);
	M_16_SWAP(pcfg->cfg_shd);
	M_16_SWAP(pcfg->cfg_pcom);
	M_16_SWAP(pcfg->cfg_rwcc);
	M_16_SWAP(pcfg->cfg_ecc);
	M_16_SWAP(pcfg->cfg_eatm);
	M_16_SWAP(pcfg->cfg_eprm);
	M_16_SWAP(pcfg->cfg_eatw);
	M_16_SWAP(pcfg->cfg_rsvc1);
	M_16_SWAP(pcfg->cfg_rsvc2);
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@mvme68k port by me. some parts by dale rahn.
@
text
@@
