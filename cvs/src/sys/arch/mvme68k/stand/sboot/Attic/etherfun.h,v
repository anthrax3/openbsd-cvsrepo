head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.78
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.74
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.72
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.70
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.68
	OPENBSD_5_0:1.2.0.66
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.64
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.62
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.58
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.60
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.56
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.54
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.52
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.50
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.48
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.46
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.44
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.42
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.40
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.38
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.36
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.34
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.2;

1.2
date	96.04.28.10.49.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.15;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.44.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: etherfun.h,v 1.2 1996/04/28 10:49:37 deraadt Exp $ */

/*
 *
 * Copyright (c) 1995 Charles D. Cranor and Seth Widoff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor
 *	and Seth Widoff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* etherfun.h */

/* constants */
/* ether header */
#define ETYPE_RARP 0x8035  /* ethertype is RARP */
#define ETYPE_IP   0x800   /* ethertype is IP   */

/* rev arp */
#define PTYPE_IP 0x800     /* Protocol type is IP      */
#define OPCODE_RARP 3      /* Optype is REVARP request */
#define OPCODE_REPLY 4     /* Optype is REVARP reply   */

/* ip header */
#define  IPP_UDP 17	/* IP Protocol is UDP       */
#define  IP_VERSION 4      /* IP version number	*/
#define  IP_HLEN 5	 /* IP header length is a fixed 50 bytes */
#define N 1536

/* tftp header */
#define FTPOP_ACKN 4      /* Opcode is acknowledge     */
#define FTPOP_ERR 5       /* Opcode is Error	       */
#define FTP_PORT 69       /* Standard TFTP port number */
#define MSG "\0\1xxxxxxxx.mvme68k\0octet\0" /* implicit NULL */

/* data structures */

struct  ether_header {
	u_char  ether_dhost[6];
	u_char  ether_shost[6];
	u_short ether_type;
};

struct  ether_arp {
	u_short ar_hrd;		/* format of hardware address */
	u_short ar_pro;		/* format of protocol address */
	u_char  ar_hln;		/* length of hardware address */
	u_char  ar_pln;		/* length of protocol address */
	u_short ar_op;
	u_char  arp_sha[6];	/* sender hardware address */
	u_char  arp_spa[4];	/* sender protocol address */
	u_char  arp_tha[6];	/* target hardware address */
	u_char  arp_tpa[4];	/* target protocol address */
};

struct ip {
	u_char  ip_v:4,		/* version */
		ip_hl:4;	/* header length */
	u_char  ip_tos;		/* type of service */
	short   ip_len;		/* total length */
	u_short ip_id;		/* identification */
	short   ip_off;		/* fragment offset field */
#define IP_DF 0x4000		/* dont fragment flag */
#define IP_MF 0x2000		/* more fragments flag */
#define IP_OFFMASK 0x1fff	/* mask for fragmenting bits */
	u_char  ip_ttl;		/* time to live */
	u_char  ip_p;		/* protocol */
	u_short ip_sum;		/* checksum */
	u_char  ip_src[4];
	u_char  ip_dst[4];	/* source and dest address */
};

struct udp {
	u_short uh_sport;
	u_short uh_dport;
	short uh_ulen;
	u_short uh_sum;
};

struct tftph {
	u_short	op_code;
	u_short	block;
};

struct tftphr {
	struct tftph info;
	char	data[1];
};

/* globals */
int last_ack;
char buf[N];
struct ether_header *eh = (struct ether_header *)buf;
struct ether_arp *rarp = (struct ether_arp *)
	(buf + sizeof(struct ether_header));
struct ip *iph = (struct ip *)(buf + sizeof(struct ether_header));
struct udp *udph = (struct udp *)
	(buf + sizeof(struct ether_header) + sizeof(struct ip));
char *tftp_r = buf + sizeof(struct ether_header) + sizeof(struct ip) + 
	sizeof(struct udp);
struct tftph *tftp_a = (struct tftph *)(buf + sizeof(struct ether_header) + 
	sizeof(struct ip) + sizeof(struct udp));
struct tftphr *tftp = (struct tftphr *)(buf + sizeof(struct ether_header) + 
	sizeof(struct ip) + sizeof(struct udp));
@


1.2
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.1
log
@Initial revision
@
text
@d1 2
d47 3
a49 3
#define  IPP_UDP 17        /* IP Protocol is UDP       */
#define  IP_VERSION 4      /* IP version number        */
#define  IP_HLEN 5         /* IP header length is a fixed 50 bytes */
d56 1
a56 1
#define MSG "\0\1xxxxxxxx.147\0octet\0" /* implicit NULL */
d61 3
a63 3
        u_char  ether_dhost[6];
        u_char  ether_shost[6];
        u_short ether_type;
d67 9
a75 9
        u_short ar_hrd;       /* format of hardware address */
	u_short ar_pro;       /* format of protocol address */
        u_char  ar_hln;       /* length of hardware address */
        u_char  ar_pln;       /* length of protocol address */
        u_short ar_op;
        u_char  arp_sha[6];     /* sender hardware address */
        u_char  arp_spa[4];     /* sender protocol address */
        u_char  arp_tha[6];     /* target hardware address */
        u_char  arp_tpa[4];     /* target protocol address */
d79 12
a90 12
        u_char  ip_v:4,                 /* version */
                ip_hl:4;                /* header length */
        u_char  ip_tos;                 /* type of service */
        short   ip_len;                 /* total length */
        u_short ip_id;                  /* identification */
        short   ip_off;                 /* fragment offset field */
#define IP_DF 0x4000                    /* dont fragment flag */
#define IP_MF 0x2000                    /* more fragments flag */
#define IP_OFFMASK 0x1fff               /* mask for fragmenting bits */
        u_char  ip_ttl;                 /* time to live */
        u_char  ip_p;                   /* protocol */
        u_short ip_sum;                 /* checksum */
d92 1
a92 1
        u_char  ip_dst[4];              /* source and dest address */
d96 1
a96 1
        u_short uh_sport;
d103 2
a104 2
  u_short op_code;
  u_short block;
d108 2
a109 2
  struct tftph info;
  char data[1];
d116 2
a117 2
struct ether_arp *rarp = 
  (struct ether_arp *)(buf + sizeof(struct ether_header));
d119 2
a120 2
struct udp *udph = (struct udp *)(buf + sizeof(struct ether_header) + 
  sizeof(struct ip));
d122 1
a122 1
  sizeof(struct udp);
d124 1
a124 1
  sizeof(struct ip) + sizeof(struct udp));
d126 1
a126 1
  sizeof(struct ip) + sizeof(struct udp));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@d45 3
a47 3
#define  IPP_UDP 17	/* IP Protocol is UDP       */
#define  IP_VERSION 4      /* IP version number	*/
#define  IP_HLEN 5	 /* IP header length is a fixed 50 bytes */
d54 1
a54 1
#define MSG "\0\1xxxxxxxx.mvme68k\0octet\0" /* implicit NULL */
d59 3
a61 3
	u_char  ether_dhost[6];
	u_char  ether_shost[6];
	u_short ether_type;
d65 9
a73 9
	u_short ar_hrd;		/* format of hardware address */
	u_short ar_pro;		/* format of protocol address */
	u_char  ar_hln;		/* length of hardware address */
	u_char  ar_pln;		/* length of protocol address */
	u_short ar_op;
	u_char  arp_sha[6];	/* sender hardware address */
	u_char  arp_spa[4];	/* sender protocol address */
	u_char  arp_tha[6];	/* target hardware address */
	u_char  arp_tpa[4];	/* target protocol address */
d77 12
a88 12
	u_char  ip_v:4,		/* version */
		ip_hl:4;	/* header length */
	u_char  ip_tos;		/* type of service */
	short   ip_len;		/* total length */
	u_short ip_id;		/* identification */
	short   ip_off;		/* fragment offset field */
#define IP_DF 0x4000		/* dont fragment flag */
#define IP_MF 0x2000		/* more fragments flag */
#define IP_OFFMASK 0x1fff	/* mask for fragmenting bits */
	u_char  ip_ttl;		/* time to live */
	u_char  ip_p;		/* protocol */
	u_short ip_sum;		/* checksum */
d90 1
a90 1
	u_char  ip_dst[4];	/* source and dest address */
d94 1
a94 1
	u_short uh_sport;
d101 2
a102 2
	u_short	op_code;
	u_short	block;
d106 2
a107 2
	struct tftph info;
	char	data[1];
d114 2
a115 2
struct ether_arp *rarp = (struct ether_arp *)
	(buf + sizeof(struct ether_header));
d117 2
a118 2
struct udp *udph = (struct udp *)
	(buf + sizeof(struct ether_header) + sizeof(struct ip));
d120 1
a120 1
	sizeof(struct udp);
d122 1
a122 1
	sizeof(struct ip) + sizeof(struct udp));
d124 1
a124 1
	sizeof(struct ip) + sizeof(struct udp));
@
