head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2012.12.31.21.35.32;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2012.12.05.23.20.13;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.04.13.36.47;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.19.10.22.30;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.20.17.02.30;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	97.01.29.07.58.37;	author deraadt;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	96.10.16.13.50.00;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.10.49.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.15;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.44.04;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2001.10.31.03.01.18;	author nate;	state Exp;
branches;
next	1.4.14.2;

1.4.14.2
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: etherfun.c,v 1.9 2012/12/31 21:35:32 miod Exp $ */

/*
 *
 * Copyright (c) 1995 Charles D. Cranor and Seth Widoff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor
 *	and Seth Widoff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* etherfun.c */

#include <sys/types.h>
#include <stand.h>
#include "sboot.h"
#include "etherfun.h"

/* Construct and send a rev arp packet */
void
do_rev_arp(void)
{
	int     i;

	for (i = 0; i < 6; i++)
		eh->ether_dhost[i] = 0xff;

	bcopy(myea, eh->ether_shost, 6);
	eh->ether_type = ETYPE_RARP;

	rarp->ar_hrd = 1;	/* hardware type is 1 */
	rarp->ar_pro = PTYPE_IP;
	rarp->ar_hln = 6;	/* length of hardware address is 6 bytes */
	rarp->ar_pln = 4;	/* length of ip address is 4 byte */
	rarp->ar_op = OPCODE_RARP;
	bcopy(myea, rarp->arp_sha, sizeof(myea));
	bcopy(myea, rarp->arp_tha, sizeof(myea));
	for (i = 0; i < 4; i++)
		rarp->arp_spa[i] = rarp->arp_tpa[i] = 0x00;

	le_put(buf, 76);
}

/* Receive and disassemble the rev_arp reply */
int
get_rev_arp(void)
{
	le_get(buf, sizeof(buf), 6);
	if (eh->ether_type == ETYPE_RARP && rarp->ar_op == OPCODE_REPLY) {
		bcopy(rarp->arp_tpa, myip, sizeof(rarp->arp_tpa));
		bcopy(rarp->arp_spa, servip, sizeof(rarp->arp_spa));
		bcopy(rarp->arp_sha, servea, sizeof(rarp->arp_sha));
		return (1);
	}
	return (0);
}

/* Try to get a reply to a rev arp request */
int
rev_arp(void)
{
	int     tries = 0;
	while (tries < 5) {
		do_rev_arp();
		if (get_rev_arp())
			return (1);
		tries++;
	}
	return (0);
}

/*
 * Send a tftp read request or acknowledgement
 * mesgtype 0 is a read request, 1 is an
 * acknowledgement
 */
void
do_send_tftp(int mesgtype)
{
	u_long  res, iptmp, lcv;
	char   *tot;

	if (mesgtype == 0) {
		tot = tftp_r + (sizeof(MSG) - 1);
		myport = (u_short)ttime();
		if (myport < 1000)
			myport += 1000;
		servport = FTP_PORT;	/* to start */
	} else {
		tot = (char *) tftp_a + 4;
	}

	bcopy(servea, eh->ether_dhost, sizeof(servea));
	bcopy(myea, eh->ether_shost, sizeof(myea));
	eh->ether_type = ETYPE_IP;

	iph->ip_v = IP_VERSION;
	iph->ip_hl = IP_HLEN;
	iph->ip_tos = 0;	/* type of service is 0 */
	iph->ip_id = 0;		/* id field is 0 */
	iph->ip_off = IP_DF;
	iph->ip_ttl = 3;	/* time to live is 3 seconds/hops */
	iph->ip_p = IPP_UDP;
	bcopy(myip, iph->ip_src, sizeof(myip));
	bcopy(servip, iph->ip_dst, sizeof(servip));
	iph->ip_sum = 0;
	iph->ip_len = tot - (char *) iph;
	res = oc_cksum(iph, sizeof(struct ip), 0);
	iph->ip_sum = 0xffff & ~res;
	udph->uh_sport = myport;
	udph->uh_dport = servport;
	udph->uh_sum = 0;

	if (mesgtype) {
		tftp_a->op_code = FTPOP_ACKN;
		tftp_a->block = (u_short) (mesgtype);
	} else {
		bcopy(myip, &iptmp, sizeof(iptmp));
		bcopy(MSG, tftp_r, (sizeof(MSG) - 1));
		for (lcv = 9; lcv >= 2; lcv--) {
			tftp_r[lcv] = "0123456789ABCDEF"[iptmp & 0xF];

			iptmp = iptmp >> 4;
		}
	}

	udph->uh_ulen = tot - (char *) udph;

	le_put(buf, tot - buf);
}

/* Attempt to tftp a file and read it into memory */
int
do_get_file(void)
{
	int     fail = 0, oldlen;
	char   *loadat = (char *)STAGE2_RELOC;
	last_ack = 0;

	do_send_tftp(READ);
	while (1) {
		if (le_get(buf, sizeof(buf), 5) == 0) {
			/* timeout occurred */
			if (last_ack)
				do_send_tftp(last_ack);
			else
				do_send_tftp(READ);

			fail++;
			if (fail > 5) {
				printf("\n");
				return (1);
			}
		} else {
			printf("%x \r", tftp->info.block * 512);
			if ((eh->ether_type != ETYPE_IP) || (iph->ip_p != IPP_UDP)) {
				fail++;
				continue;
			}
			if (servport == FTP_PORT)
				servport = udph->uh_sport;
			if (tftp->info.op_code == FTPOP_ERR) {
				printf("TFTP: Download error %d: %s\n",
				    tftp->info.block, tftp->data);
				return (1);
			}
			if (tftp->info.block != last_ack + 1) {
				/* we received the wrong block */
				if (tftp->info.block < last_ack + 1) {
					/* nack whatever we received */
					do_send_tftp(tftp->info.block);
				} else {
					/* nack the last confirmed block */
					do_send_tftp(last_ack);
				}
				fail++;
			} else {/* we got the right block */
				fail = 0;
				last_ack++;
				oldlen = udph->uh_ulen;
				do_send_tftp(last_ack);
				/* printf("bcopy %x %x %d\n", &tftp->data,
				 * loadat, oldlen - 12); */
				bcopy(&tftp->data, loadat, oldlen - 12);
				loadat += oldlen - 12;
				if (oldlen < (8 + 4 + 512)) {
					printf("\n");
					return (0);
				}
			}
		}
	}
	printf("\n");
	return (0);
}
@


1.9
log
@Switch mvme68k boot blocks to use the MI libsa loadfile routines to load
kernel images, instead of their own; gives us the ability to load ELF kernels
for free.

Fix many warnings, and generally make the code closer to the current mvme88k
boot blocks to help diffability.

Rewrite bugcrt and bugexec() as a short assembly shim around a
compiler-independent C block; this will allow compilers other than gcc2 to be
used, and removes the need for bugcrt to be compiled without optimization.

Crank all bootblocks versions.
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.8 2012/12/05 23:20:13 deraadt Exp $ */
@


1.8
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.7 2012/11/04 13:36:47 miod Exp $ */
d107 1
a107 1
		myport = (u_short) ttime();
@


1.7
log
@Make the s-records boot loader use the same stage1/stage2 addresses as the
other boot blocks. Crank stage1 from 64KB to 1MB to accomodate non-mvme147 BUG.
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.6 2003/08/19 10:22:30 deraadt Exp $ */
d36 1
a36 1
#include <sys/cdefs.h>
@


1.6
log
@simple protos and ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.5 2001/09/20 17:02:30 mpech Exp $ */
d159 1
a159 1
	char   *loadat = (char *) LOAD_ADDR;
@


1.5
log
@occured->occurred

idea from deraadt@@ via NetBSD
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.4 1997/01/29 07:58:37 deraadt Exp $ */
d43 1
a43 1
do_rev_arp()
d68 1
a68 1
get_rev_arp()
d82 1
a82 1
rev_arp()
d100 1
a100 2
do_send_tftp(mesgtype)
	int mesgtype;
d156 1
a156 1
do_get_file()
@


1.4
log
@signal.h -> siginfo.h -> time.h fallout
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.3 1996/10/16 13:50:00 mickey Exp $ */
d166 1
a166 1
			/* timeout occured */
@


1.4.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.4 1997/01/29 07:58:37 deraadt Exp $ */
d166 1
a166 1
			/* timeout occurred */
@


1.4.14.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d43 1
a43 1
do_rev_arp(void)
d68 1
a68 1
get_rev_arp(void)
d82 1
a82 1
rev_arp(void)
d100 2
a101 1
do_send_tftp(int mesgtype)
d157 1
a157 1
do_get_file(void)
@


1.3
log
@update according to the libsa changes
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.2 1996/04/28 10:49:36 deraadt Exp $ */
d108 1
a108 1
		myport = (u_short) time();
@


1.2
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d37 1
@


1.1
log
@Initial revision
@
text
@d1 2
d36 1
d42 1
a42 1
do_rev_arp () 
d44 7
a50 18
  int i;
  
  for ( i = 0; i < 6; i++ ) {
    eh->ether_dhost[i] = 0xff;
  }
  bcopy(myea, eh->ether_shost, 6);
  eh->ether_type = ETYPE_RARP;
  
  rarp->ar_hrd = 1;              /* hardware type is 1 */
  rarp->ar_pro = PTYPE_IP;
  rarp->ar_hln = 6;              /* length of hardware address is 6 bytes */
  rarp->ar_pln = 4;              /* length of ip address is 4 byte */
  rarp->ar_op = OPCODE_RARP;
  bcopy(myea, rarp->arp_sha, sizeof(myea));
  bcopy(myea, rarp->arp_tha, sizeof(myea));
  for ( i = 0; i < 4; i++ ) {
    rarp->arp_spa[i] = rarp->arp_tpa[i] = 0x00;
  }
d52 11
a62 1
  le_put(buf, 76);
a63 2
  
/* Recieve and disassemble the rev_arp reply */
d65 1
d67 1
a67 1
get_rev_arp () 
d69 8
a76 8
  le_get(buf, sizeof(buf), 6);
  if ( eh->ether_type == ETYPE_RARP && rarp->ar_op == OPCODE_REPLY ) {
    bcopy(rarp->arp_tpa, myip,  sizeof(rarp->arp_tpa));
    bcopy(rarp->arp_spa, servip, sizeof(rarp->arp_spa));
    bcopy(rarp->arp_sha, servea, sizeof(rarp->arp_sha));
    return 1;
  }
  return 0;
d80 12
d93 8
a100 2
int 
rev_arp () 
d102 2
a103 10
  int tries = 0;
  while ( tries < 5 ) {
    do_rev_arp();
    if ( get_rev_arp() ) {
      return 1;
    }
    tries++;
  }
  return 0;
} 
d105 9
a113 2
/* Send a tftp read request or acknowledgement 
   mesgtype 0 is a read request, 1 is an aknowledgement */
d115 33
a147 48
void 
do_send_tftp ( int mesgtype ) 
{
  u_long res, iptmp, lcv;
  char *tot;

  if ( mesgtype == 0 ) {
    tot = tftp_r + (sizeof(MSG)-1);
    myport = (u_short)time();
    if (myport < 1000) myport += 1000;
    servport = FTP_PORT; /* to start */
  } else {
    tot = (char *)tftp_a + 4;
  }

  bcopy (servea, eh->ether_dhost, sizeof(servea));
  bcopy (myea, eh->ether_shost, sizeof(myea));
  eh->ether_type = ETYPE_IP;
  
  iph->ip_v = IP_VERSION;
  iph->ip_hl = IP_HLEN;   
  iph->ip_tos = 0;         /* type of service is 0 */
  iph->ip_id = 0;          /* id field is 0 */
  iph->ip_off = IP_DF;
  iph->ip_ttl = 3;         /* time to live is 3 seconds/hops */
  iph->ip_p = IPP_UDP;
  bcopy(myip, iph->ip_src, sizeof(myip));
  bcopy(servip, iph->ip_dst, sizeof(servip));
  iph->ip_sum = 0;
  iph->ip_len = tot - (char *)iph;
  res = oc_cksum(iph, sizeof(struct ip), 0);
  iph->ip_sum = 0xffff & ~res;
  udph->uh_sport = myport;
  udph->uh_dport = servport;
  udph->uh_sum = 0;
  
  if ( mesgtype )  {
    tftp_a->op_code = FTPOP_ACKN;
    tftp_a->block = (u_short)(mesgtype);
  } else {
    bcopy (myip, &iptmp, sizeof(iptmp));
    bcopy(MSG, tftp_r, (sizeof(MSG)-1));
    for (lcv = 9; lcv >= 2; lcv--) {
      tftp_r[lcv] = "0123456789ABCDEF"[iptmp & 0xF];
      
      iptmp = iptmp >> 4;
    }
  }
d149 1
a149 1
  udph->uh_ulen = tot - (char *)udph;
d151 1
a151 1
  le_put( buf, tot - buf);
a154 1

d156 1
a156 1
do_get_file () 
d158 60
a217 58
  int fail = 0, oldlen;
  char *loadat = (char *)LOAD_ADDR;
  last_ack = 0;

  do_send_tftp( READ );
  while (1) {
    if ( le_get(buf, sizeof(buf), 5) == 0) { /* timeout occured */
      if ( last_ack ) {                          
	do_send_tftp( last_ack );
      } else {
	do_send_tftp( READ );
      }
      fail++;
      if ( fail > 5 ) {
        printf("\n");
	return 1;
      }
    } else {
      printf("%x \r", tftp->info.block*512);
      if ((eh->ether_type != ETYPE_IP) || (iph->ip_p != IPP_UDP)) {
	fail++;
	continue;
      }
      if (servport == FTP_PORT) servport = udph->uh_sport;
      if (tftp->info.op_code == FTPOP_ERR) {
	printf("TFTP: Download error %d: %s\n", 
	       tftp->info.block, tftp->data);
        return 1;
      }
      if (tftp->info.block != last_ack + 1) { /* we recieved the wrong block */
	if (tftp->info.block < last_ack +1) {
	  do_send_tftp(tftp->info.block); /* ackn whatever we recieved */
	} else {
	  do_send_tftp( last_ack );       /* ackn the last confirmed block */
        }
	fail++;
      } else {                /* we got the right block */
	fail = 0;
	last_ack++;
        oldlen = udph->uh_ulen;
	do_send_tftp( last_ack );
	/*printf("bcopy %x %x %d\n", &tftp->data, loadat, oldlen - 12);*/
	bcopy(&tftp->data, loadat, oldlen - 12);
	loadat += oldlen - 12;
	if (oldlen < (8 + 4 + 512)) {
          printf("\n");
	  return 0;
        }
      }
    }
  }
  printf("\n");
  return 0;
} 




@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@a33 1
#include <sys/cdefs.h>
d39 1
a39 1
do_rev_arp()
d41 18
a58 1
	int     i;
d60 1
a60 17
	for (i = 0; i < 6; i++)
		eh->ether_dhost[i] = 0xff;

	bcopy(myea, eh->ether_shost, 6);
	eh->ether_type = ETYPE_RARP;

	rarp->ar_hrd = 1;	/* hardware type is 1 */
	rarp->ar_pro = PTYPE_IP;
	rarp->ar_hln = 6;	/* length of hardware address is 6 bytes */
	rarp->ar_pln = 4;	/* length of ip address is 4 byte */
	rarp->ar_op = OPCODE_RARP;
	bcopy(myea, rarp->arp_sha, sizeof(myea));
	bcopy(myea, rarp->arp_tha, sizeof(myea));
	for (i = 0; i < 4; i++)
		rarp->arp_spa[i] = rarp->arp_tpa[i] = 0x00;

	le_put(buf, 76);
d62 2
a64 1
/* Receive and disassemble the rev_arp reply */
d66 1
a66 1
get_rev_arp()
d68 8
a75 8
	le_get(buf, sizeof(buf), 6);
	if (eh->ether_type == ETYPE_RARP && rarp->ar_op == OPCODE_REPLY) {
		bcopy(rarp->arp_tpa, myip, sizeof(rarp->arp_tpa));
		bcopy(rarp->arp_spa, servip, sizeof(rarp->arp_spa));
		bcopy(rarp->arp_sha, servea, sizeof(rarp->arp_sha));
		return (1);
	}
	return (0);
d79 3
a81 2
int
rev_arp()
d83 13
a95 9
	int     tries = 0;
	while (tries < 5) {
		do_rev_arp();
		if (get_rev_arp())
			return (1);
		tries++;
	}
	return (0);
}
d97 2
a98 8
/*
 * Send a tftp read request or acknowledgement
 * mesgtype 0 is a read request, 1 is an
 * acknowledgement
 */
void
do_send_tftp(mesgtype)
	int mesgtype;
d100 2
a101 12
	u_long  res, iptmp, lcv;
	char   *tot;

	if (mesgtype == 0) {
		tot = tftp_r + (sizeof(MSG) - 1);
		myport = (u_short) time();
		if (myport < 1000)
			myport += 1000;
		servport = FTP_PORT;	/* to start */
	} else {
		tot = (char *) tftp_a + 4;
	}
d103 42
a144 33
	bcopy(servea, eh->ether_dhost, sizeof(servea));
	bcopy(myea, eh->ether_shost, sizeof(myea));
	eh->ether_type = ETYPE_IP;

	iph->ip_v = IP_VERSION;
	iph->ip_hl = IP_HLEN;
	iph->ip_tos = 0;	/* type of service is 0 */
	iph->ip_id = 0;		/* id field is 0 */
	iph->ip_off = IP_DF;
	iph->ip_ttl = 3;	/* time to live is 3 seconds/hops */
	iph->ip_p = IPP_UDP;
	bcopy(myip, iph->ip_src, sizeof(myip));
	bcopy(servip, iph->ip_dst, sizeof(servip));
	iph->ip_sum = 0;
	iph->ip_len = tot - (char *) iph;
	res = oc_cksum(iph, sizeof(struct ip), 0);
	iph->ip_sum = 0xffff & ~res;
	udph->uh_sport = myport;
	udph->uh_dport = servport;
	udph->uh_sum = 0;

	if (mesgtype) {
		tftp_a->op_code = FTPOP_ACKN;
		tftp_a->block = (u_short) (mesgtype);
	} else {
		bcopy(myip, &iptmp, sizeof(iptmp));
		bcopy(MSG, tftp_r, (sizeof(MSG) - 1));
		for (lcv = 9; lcv >= 2; lcv--) {
			tftp_r[lcv] = "0123456789ABCDEF"[iptmp & 0xF];

			iptmp = iptmp >> 4;
		}
	}
d146 1
a146 1
	udph->uh_ulen = tot - (char *) udph;
d148 1
a148 1
	le_put(buf, tot - buf);
d152 1
d154 1
a154 1
do_get_file()
d156 58
a213 60
	int     fail = 0, oldlen;
	char   *loadat = (char *) LOAD_ADDR;
	last_ack = 0;

	do_send_tftp(READ);
	while (1) {
		if (le_get(buf, sizeof(buf), 5) == 0) {
			/* timeout occured */
			if (last_ack)
				do_send_tftp(last_ack);
			else
				do_send_tftp(READ);

			fail++;
			if (fail > 5) {
				printf("\n");
				return (1);
			}
		} else {
			printf("%x \r", tftp->info.block * 512);
			if ((eh->ether_type != ETYPE_IP) || (iph->ip_p != IPP_UDP)) {
				fail++;
				continue;
			}
			if (servport == FTP_PORT)
				servport = udph->uh_sport;
			if (tftp->info.op_code == FTPOP_ERR) {
				printf("TFTP: Download error %d: %s\n",
				    tftp->info.block, tftp->data);
				return (1);
			}
			if (tftp->info.block != last_ack + 1) {
				/* we received the wrong block */
				if (tftp->info.block < last_ack + 1) {
					/* nack whatever we received */
					do_send_tftp(tftp->info.block);
				} else {
					/* nack the last confirmed block */
					do_send_tftp(last_ack);
				}
				fail++;
			} else {/* we got the right block */
				fail = 0;
				last_ack++;
				oldlen = udph->uh_ulen;
				do_send_tftp(last_ack);
				/* printf("bcopy %x %x %d\n", &tftp->data,
				 * loadat, oldlen - 12); */
				bcopy(&tftp->data, loadat, oldlen - 12);
				loadat += oldlen - 12;
				if (oldlen < (8 + 4 + 512)) {
					printf("\n");
					return (0);
				}
			}
		}
	}
	printf("\n");
	return (0);
}
@
