head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	theo-1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2012.12.31.21.35.32;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.04.13.34.51;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.19.10.22.30;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.30.00.06.26;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.10.49.45;	author deraadt;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	95.11.07.08.51.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.10.43.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.43.56;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.07.04.10.19.46;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: srec.c,v 1.7 2012/12/31 21:35:32 miod Exp $ */

/*
 * Public domain, believed to be by Mike Price.
 *
 * convert binary file to Srecord format
 */
#include <unistd.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

size_t	get32(char *, size_t);
void	put32(size_t, uint32_t, const char *, uint32_t, uint32_t);
void	sput(const char *);
void	put(int);
int	checksum(uint32_t, const char *, size_t, uint32_t);

__dead void
usage(const char *progname)
{
	fprintf(stderr, "usage: %s {size} {hex_addr} {name}\n", progname);
	fprintf(stderr, "Size = 2, 3, or 4 byte address\n");
	exit(1);
}

int
main(int argc, char *argv[])
{
	char buf[32], *name;
	uint32_t base, addr, mask, size;
	size_t cc;

	if (argc != 4)
		usage(argv[0]);
	sscanf(argv[1], "%x", &size);
	sscanf(argv[2], "%x", &base);
	name = argv[3];

	switch (size) {
	case 2:
		printf("S0%02lX%04X", 2 + strlen(name) + 1, 0);
		mask = 0x0000ffff;
		break;
	case 3:
		printf("S0%02lX%06X", 3 + strlen(name) + 1, 0);
		mask = 0x00ffffff;
		break;
	case 4:
		printf("S0%02lX%08X", 4 + strlen(name) + 1, 0);
		mask = 0xffffffff;
		break;
	default:
		usage(argv[0]);
		/* NOTREACHED */
	}
	sput(name);
	printf("%02X\n", checksum(0, name, strlen(name), size));

	addr = base;
	for (;;) {
		cc = get32(buf, sizeof buf);
		if (cc > 0) {
			put32(cc, addr, buf, size, mask);
			addr += cc;
		} else
			break;
	}

	buf[0] = base >> 8;
	buf[1] = base;
	printf("S%d%02X", 11 - size, 2 + 1);
	switch (size) {
	default:
	case 2:
		printf("%04X", base & mask);
		break;
	case 3:
		printf("%06X", base & mask);
		break;
	case 4:
		printf("%08X", base & mask);
		break;
	}

	/*
	 * kludge -> some sizes need an extra count (1 if size == 3, 2 if
	 * size == 4).  Don't ask why.
	 */
	printf("%02X\n", checksum(base, (char *) 0, 0, size) + (size - 2));
	exit(0);
}

size_t
get32(char *buf, size_t sz)
{
	char *cp = buf;
	size_t i;
	int c;

	for (i = 0; i < sz; i++) {
		if ((c = getchar()) != EOF)
			*cp++ = c;
		else
			break;
	}
	return (cp - buf);
}

void
put32(size_t len, uint32_t addr, const char *buf, uint32_t size, uint32_t mask)
{
	const char *cp = buf;
	size_t i;

	switch (size) {
	case 2:
		printf("S1%02lX%04X", 2 + len + 1, addr & mask);
		break;
	case 3:
		printf("S2%02lX%06X", 3 + len + 1, addr & mask);
		break;
	case 4:
		printf("S3%02lX%08X", 4 + len + 1, addr & mask);
		break;
	}
	for (i = 0; i < len; ++i)
		put(*cp++);
	printf("%02X\n", checksum(addr, buf, len, size));
}

void
sput(const char *s)
{
	while (*s != '\0')
		put(*s++);
}

void
put(int c)
{
	printf("%02X", c & 0xff);
}

int
checksum(uint32_t addr, const char *buf, size_t len, uint32_t size)
{
	const char *cp = buf;
	int sum = 0xff - 1 - size - (len & 0xff);
	size_t i;

	switch (size) {
	case 4:
		sum -= (addr >> 24) & 0xff;
		/* FALLTHROUGH */
	case 3:
		sum -= (addr >> 16) & 0xff;
		/* FALLTHROUGH */
	case 2:
		sum -= (addr >> 8) & 0xff;
		sum -= addr & 0xff;
		break;
	}
	for (i = 0; i < len; ++i) {
		sum -= *cp++ & 0xff;
	}
	return (sum & 0xff);
}
@


1.7
log
@Switch mvme68k boot blocks to use the MI libsa loadfile routines to load
kernel images, instead of their own; gives us the ability to load ELF kernels
for free.

Fix many warnings, and generally make the code closer to the current mvme88k
boot blocks to help diffability.

Rewrite bugcrt and bugexec() as a short assembly shim around a
compiler-independent C block; this will allow compilers other than gcc2 to be
used, and removes the need for bugcrt to be compiled without optimization.

Crank all bootblocks versions.
@
text
@d1 1
a1 1
/*	$OpenBSD: srec.c,v 1.6 2012/11/04 13:34:51 miod Exp $ */
@


1.6
log
@Real prototypes, better integer types, pass -Wall. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: srec.c,v 1.5 2003/08/19 10:22:30 deraadt Exp $ */
d11 2
@


1.5
log
@simple protos and ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: srec.c,v 1.4 2001/04/30 00:06:26 miod Exp $ */
d8 1
d10 1
d13 13
a25 8
int get32();
void put32();
void sput();
void put();
int checksum();

int mask;
int size;
d27 1
d31 2
a32 1
	int cc, base, addr;
d34 2
a35 5
	if (argc != 4) {
		fprintf(stderr, "usage: %s {size} {hex_addr} {name}\n", argv[0]);
		fprintf(stderr, "Size = 2, 3, or 4 byte address\n");
		exit(1);
	}
a36 3
	mask = (1 << (size * 8)) - 1;
	if (!mask)
		mask = (-1);
d40 17
a56 6
	if (size == 2)
		printf("S0%02X%04X", 2 + strlen(name) + 1, 0);
	if (size == 3)
		printf("S0%02X%06X", 3 + strlen(name) + 1, 0);
	if (size == 4)
		printf("S0%02X%08X", 4 + strlen(name) + 1, 0);
d62 1
a62 1
		cc = get32(buf);
d74 1
d90 2
a91 3
	printf("%02X\n", checksum(base, (char *) 0, 0, size) +
	    (size - 2));
	exit (0);
d94 2
a95 2
int
get32(char buf[])
d98 2
a99 1
	int i, c;
d101 1
a101 1
	for (i = 0; i < 32; ++i) {
d111 1
a111 1
put32(int len, int addr, char buf[], int size, int mask)
d113 2
a114 2
	char *cp = buf;
	int i;
d116 11
a126 6
	if (size == 2)
		printf("S1%02X%04X", 2 + len + 1, addr & mask);
	if (size == 3)
		printf("S2%02X%06X", 3 + len + 1, addr & mask);
	if (size == 4)
		printf("S3%02X%08X", 4 + len + 1, addr & mask);
d133 1
a133 1
sput(char *s)
d146 1
a146 1
checksum(int addr, char buf[], int len, int size)
d148 1
a148 1
	char *cp = buf;
d150 1
a150 1
	int i;
d152 2
a153 1
	if (size == 4)
d155 2
a156 1
	if (size >= 3)
d158 6
a163 2
	sum -= (addr >> 8) & 0xff;
	sum -= addr & 0xff;
@


1.4
log
@Fix the s-records encoding program so as to produce correct final
checksum if the chunk size is not 3 bytes.
Update disillusionned comment accordingly.

Ok deraadt@@

[Note that the s-records files on the 2.9 cdroms have been
 corrected and are valid.]
@
text
@d1 1
a1 1
/*	$OpenBSD: srec.c,v 1.3 1996/04/28 10:49:45 deraadt Exp $ */
d5 1
a5 1
 * 
d20 1
a20 3
main(argc, argv)
	int argc;
	char *argv[];
d22 2
a23 5
	char buf[32];
	int cc;
	int base;
	int addr;
	char *name;
d81 1
a81 2
get32(buf)
	char buf[];
d84 1
a84 2
	int i;
	int c;
d96 1
a96 5
put32(len, addr, buf, size, mask)
	int len;
	int addr;
	char buf[];
	int size, mask;
d113 1
a113 2
sput(s)
	char *s;
d120 1
a120 2
put(c)
	int c;
d126 1
a126 5
checksum(addr, buf, len, size)
	int addr;
	char buf[];
	int len;
	int size;
@


1.3
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a6 1
 * XXX srec generates improper checksums for 4-byte dumps
d77 2
a78 2
	 * kludge -> don't know why you have to add the +1 = works
	 * for size =3 at least
d80 2
a81 1
	printf("%02X\n", checksum(base, (char *) 0, 0, size) + 1);
@


1.3.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: srec.c,v 1.3 1996/04/28 10:49:45 deraadt Exp $ */
d7 1
d78 2
a79 2
	 * kludge -> some sizes need an extra count (1 if size == 3, 2 if
	 * size == 4).  Don't ask why.
d81 1
a81 2
	printf("%02X\n", checksum(base, (char *) 0, 0, size) +
	    (size - 2));
@


1.3.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 *
d20 3
a22 1
main(int argc, char *argv[])
d24 5
a28 2
	char buf[32], *name;
	int cc, base, addr;
d86 2
a87 1
get32(char buf[])
d90 2
a91 1
	int i, c;
d103 5
a107 1
put32(int len, int addr, char buf[], int size, int mask)
d124 2
a125 1
sput(char *s)
d132 2
a133 1
put(int c)
d139 5
a143 1
checksum(int addr, char buf[], int len, int size)
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d2 2
@


1.1.1.1
log
@mvme68k port by me. some parts by dale rahn.
@
text
@@
