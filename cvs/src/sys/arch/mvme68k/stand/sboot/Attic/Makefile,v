head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.9.0.30
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.28
	OPENBSD_5_0:1.9.0.26
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.24
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.28
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.26
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.24
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.22
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.20
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.18
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.16
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.14
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.12
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.14
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2013.02.02.13.36.06;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.12.31.21.35.32;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2012.11.04.13.36.47;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.21.14.46.19;	author pascal;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.03.00.16.02;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.19.10.22.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.10.20.00.33.49;	author deraadt;	state Exp;
branches
	1.7.12.1;
next	1.6;

1.6
date	97.04.27.20.56.30;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.22.16.13.44;	author gvf;	state Exp;
branches;
next	1.4;

1.4
date	96.05.16.02.35.43;	author chuck;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.10.49.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.51.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.15;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.44.10;	author deraadt;	state Exp;
branches;
next	;

1.7.12.1
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@#	$OpenBSD: Makefile,v 1.13 2013/02/02 13:36:06 miod Exp $

S=	${.CURDIR}/../../../..
INCL?= -I${.CURDIR} -I${.CURDIR}/../libsa -I${S}/lib/libsa -I${S}
HOSTCFLAGS?= ${CFLAGS}
CFLAGS+=-D_STANDALONE
CFLAGS+=-DSTAGE2_RELOC=${STAGE2_RELOC}
COPTS?= ${DEFS} ${INCL}

.include "${S}/arch/mvme68k/stand/libbug/Makefile.inc"
.include "${S}/arch/mvme68k/stand/libsa/Makefile.inc"
.include "${S}/arch/mvme68k/stand/libz/Makefile.inc"

SRCS=   sboot.c clock.c etherfun.c if_le.c

OBJS=	${SRCS:S/.c/.o/g}
LIBS=	${LIBSA} ${LIBBUG} ${LIBZ}
LDFLAGS= -static -s -N -T ${S}/arch/mvme68k/stand/ld.script
CLEANFILES+=XBUG.o XSRT0.o oc_cksum.o sboot.tmp rboot.tmp srec sboot rboot
MDEC_DIR?=/usr/mdec
NOPIE=

all:	sboot rboot

sboot.tmp:	XSRT0.o oc_cksum.o ${OBJS} ${LIBS}
	${LD} ${LDFLAGS} -Ttext ${STAGE1_RELOC} XSRT0.o ${OBJS} oc_cksum.o -o $@@ \
	    ${LIBS} `${CC} -print-libgcc-file-name`

rboot.tmp:	XBUG.o XSRT0.o oc_cksum.o ${OBJS} ${LIBS}
	${LD} ${LDFLAGS} -Ttext 0xffa00000 -Tdata 0x4000 XBUG.o XSRT0.o \
	    ${OBJS} oc_cksum.o -o $@@ ${LIBS} `${CC} -print-libgcc-file-name`

srec:	srec.c
	${HOSTCC} ${HOSTCFLAGS} -o $@@ ${.CURDIR}/srec.c 

sboot: sboot.tmp srec
	dd ibs=32 skip=1 if=sboot.tmp | ${.OBJDIR}/srec 4 ${STAGE1_RELOC} sboot > sboot

rboot: rboot.tmp srec
	dd ibs=32 skip=1 if=rboot.tmp | ${.OBJDIR}/srec 4 0x4000 rboot > rboot

install:
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    sboot ${DESTDIR}${MDEC_DIR}/sboot
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    rboot ${DESTDIR}${MDEC_DIR}/rboot

.include <bsd.prog.mk>
@


1.13
log
@mvme68k ELF bits. Boot block updates heavily based upon the recent mvme88k
a.out->ELF transition.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/12/31 21:35:32 miod Exp $
@


1.12
log
@Switch mvme68k boot blocks to use the MI libsa loadfile routines to load
kernel images, instead of their own; gives us the ability to load ELF kernels
for free.

Fix many warnings, and generally make the code closer to the current mvme88k
boot blocks to help diffability.

Rewrite bugcrt and bugexec() as a short assembly shim around a
compiler-independent C block; this will allow compilers other than gcc2 to be
used, and removes the need for bugcrt to be compiled without optimization.

Crank all bootblocks versions.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2012/11/04 13:36:47 miod Exp $
d18 1
a18 1
LDFLAGS= -N -s -static 
d26 2
a27 2
	${LD} ${LDFLAGS} -T ${STAGE1_RELOC} XSRT0.o ${OBJS} oc_cksum.o -o $@@ \
	    ${LIBS} `cc -print-libgcc-file-name`
d30 2
a31 2
	${LD} ${LDFLAGS} -T 0xffa00000 -Tdata 0x4000 XBUG.o XSRT0.o \
	    ${OBJS} oc_cksum.o -o $@@ ${LIBS} `cc -print-libgcc-file-name`
@


1.11
log
@Make the s-records boot loader use the same stage1/stage2 addresses as the
other boot blocks. Crank stage1 from 64KB to 1MB to accomodate non-mvme147 BUG.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2012/08/21 14:46:19 pascal Exp $
d6 1
d8 1
a8 1
COPTS+= ${DEFS} ${INCL}
@


1.10
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2005/08/03 00:16:02 millert Exp $
d5 2
d25 1
a25 1
	${LD} ${LDFLAGS} -T 0x4000 XSRT0.o ${OBJS} oc_cksum.o -o $@@ \
d33 1
a33 1
	${HOSTCC} -o $@@ ${.CURDIR}/srec.c 
d36 1
a36 1
	dd ibs=32 skip=1 if=sboot.tmp | ${.OBJDIR}/srec 4 0x4000 sboot > sboot
@


1.9
log
@Link with -lgcc like hp300 to pull in the gcc functions that zlib needs.
OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2003/08/19 10:22:30 deraadt Exp $
d18 1
@


1.8
log
@simple protos and ansi
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 1997/10/20 00:33:49 deraadt Exp $
d22 2
a23 1
	${LD} ${LDFLAGS} -T 0x4000 XSRT0.o ${OBJS} oc_cksum.o -o $@@ ${LIBS}
d27 1
a27 1
	    ${OBJS} oc_cksum.o -o $@@ ${LIBS}
@


1.7
log
@hardcode mvme68k, so that obj dirs can be built from elsewhere
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 1997/04/27 20:56:30 millert Exp $
d5 1
a5 1
COPTS?= ${DEFS} ${INCL}
@


1.7.12.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
d5 1
a5 1
COPTS+= ${DEFS} ${INCL}
@


1.6
log
@COPY -> INSTALL_COPY and STRIP -> INSTALL_STRIP
This fixes namespace problems where STRIP is sometimes used as
the name of the strip(1) to use and other times used as
the flag to send install(1) when stripping (or not).
COPY doesn't have this problem (yet) but was poorly named.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 1997/04/22 16:13:44 gvf Exp $
d7 3
a9 3
.include "${S}/arch/${MACHINE}/stand/libbug/Makefile.inc"
.include "${S}/arch/${MACHINE}/stand/libsa/Makefile.inc"
.include "${S}/arch/${MACHINE}/stand/libz/Makefile.inc"
@


1.5
log
@Add libz and tick version # to reflect change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 1996/05/16 02:35:43 chuck Exp $
d38 1
a38 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
d40 1
a40 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
@


1.4
log
@libsa needs libbug.
@
text
@d1 1
a1 1
#	$OpenBSD$
d9 1
d14 2
d21 2
a22 2
sboot.tmp:	XSRT0.o oc_cksum.o ${OBJS} ${LIBSA} ${LIBBUG}
	ld -N -s -static -T 0x4000 XSRT0.o ${OBJS} oc_cksum.o -o sboot.tmp ${LIBSA} ${LIBBUG}
d24 3
a26 3
rboot.tmp:	XBUG.o XSRT0.o oc_cksum.o ${OBJS} ${LIBSA} ${LIBBUG}
	ld -N -s -static -Ttext 0xffa00000 -Tdata 0x4000 XBUG.o XSRT0.o \
	    ${OBJS} oc_cksum.o -o rboot.tmp ${LIBSA} ${LIBBUG}
d29 1
a29 1
	${CC} ${.CURDIR}/srec.c -o srec
@


1.3
log
@add OpenBSD header
@
text
@d7 1
d18 2
a19 2
sboot.tmp:	XSRT0.o oc_cksum.o ${OBJS} ${LIBSA}
	ld -N -s -static -T 0x4000 XSRT0.o ${OBJS} oc_cksum.o -o sboot.tmp ${LIBSA}
d21 1
a21 1
rboot.tmp:	XBUG.o XSRT0.o oc_cksum.o ${OBJS} ${LIBSA}
d23 1
a23 1
	    ${OBJS} oc_cksum.o -o rboot.tmp ${LIBSA}
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
#	$Id$
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile,v 1.1.1.1 1995/07/25 23:12:28 chuck Exp $
d3 3
a5 11
#
# sboot needs GNU ld because it can generate S-Records
#

COMPILE.s= $(AS) $(ASFLAGS) -o $*.o
GNU_LD=/usr/local/bin/ld
LDFLAGS=-oformat srec -x -N -Ttext 0x4000 -e start
NOMAN=
PROG=	sboot
SRCS=	start.s clock.c console.c etherfun.c le_poll.c libc_sa.c \
		oc_cksum.s sboot.c
d7 31
a37 2
${PROG}: ${OBJS}
	${GNU_LD} ${LDFLAGS} -o ${.TARGET} ${OBJS}
a39 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@d1 1
a1 1
#	$NetBSD: Makefile,v 1.2 1995/07/03 02:53:55 gwr Exp $
d3 11
a13 3
S=	${.CURDIR}/../../../..
INCL?= -I${.CURDIR} -I${.CURDIR}/../libsa -I${S}/lib/libsa -I${S}
COPTS?= ${DEFS} ${INCL}
d15 2
a16 1
.include "${S}/arch/${MACHINE}/stand/libsa/Makefile.inc"
d18 1
a18 14
SRCS=   sboot.c clock.c etherfun.c if_le.c

OBJS=	${SRCS:S/.c/.o/g}
CLEANFILES+=XBUG.o XSRT0.o oc_cksum.o sboot.tmp rboot.tmp srec sboot rboot
MDEC_DIR?=/usr/mdec

all:	sboot rboot

sboot.tmp:	XSRT0.o oc_cksum.o ${OBJS} ${LIBSA}
	ld -N -s -static -T 0x4000 XSRT0.o ${OBJS} oc_cksum.o -o sboot.tmp ${LIBSA}

rboot.tmp:	XBUG.o XSRT0.o oc_cksum.o ${OBJS} ${LIBSA}
	ld -N -s -static -Ttext 0xffa00000 -Tdata 0x4000 XBUG.o XSRT0.o \
	    ${OBJS} oc_cksum.o -o rboot.tmp ${LIBSA}
a19 16
srec:	srec.c
	${CC} ${.CURDIR}/srec.c -o srec

sboot: sboot.tmp srec
	dd ibs=32 skip=1 if=sboot.tmp | ${.OBJDIR}/srec 4 0x4000 sboot > sboot

rboot: rboot.tmp srec
	dd ibs=32 skip=1 if=rboot.tmp | ${.OBJDIR}/srec 4 0x4000 rboot > rboot

install:
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    sboot ${DESTDIR}${MDEC_DIR}/sboot
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    rboot ${DESTDIR}${MDEC_DIR}/rboot

.include <bsd.prog.mk>
@
