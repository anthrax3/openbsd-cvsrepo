head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.32
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.30
	OPENBSD_5_0:1.8.0.28
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.26
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.24
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2014.03.18.22.36.35;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2014.02.20.20.34.27;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.01.04.10.49.21;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.31.21.35.32;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.11.21.44.40;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.19.22.34.52;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.20.00.26.00;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.27.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.03.15.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.04.08.06.56;	author niklas;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	96.05.29.15.35.04;	author chuck;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	96.05.16.02.30.36;	author chuck;	state Exp;
branches;
next	;

1.2.16.1
date	2001.10.31.03.01.18;	author nate;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.03.28.10.34.06;	author niklas;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2003.06.07.11.13.16;	author ho;	state Exp;
branches;
next	1.2.16.4;

1.2.16.4
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.36.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: exec_mvme.c,v 1.11 2014/02/20 20:34:27 miod Exp $	*/


/*-
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	@@(#)boot.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <machine/prom.h>

#include "stand.h"
#include "libsa.h"

#include <lib/libsa/loadfile.h>

char   rnddata[BOOTRANDOM_MAX];		/* set by bootsd only */

/*ARGSUSED*/
void
exec_mvme(file, flag)
	char    *file;
	int     flag;
{
	u_long marks[MARK_MAX];
	int options;
	int rc;
	void (*entry)(int, int, int, int, int, int);
	struct mvmeprom_brdid *id;

	id = mvmeprom_getbrdid();
	options = LOAD_KERNEL | COUNT_KERNEL;
	if ((flag & RB_NOSYM) != 0)
		options &= ~(LOAD_SYM | COUNT_SYM);

	marks[MARK_START] = 0;
	rc = loadfile(file, marks, options);
	if (rc != 0)
		return;

	printf("Start @@ 0x%lx\n", marks[MARK_START]);
	printf("Controller Address 0x%x\n", bugargs.ctrl_addr);
	if (flag & RB_HALT)
		_rtt();

	entry = (void(*)(int, int, int, int, int, int))marks[MARK_START];
	(*entry)(flag, bugargs.ctrl_addr, bugargs.ctrl_lun, bugargs.dev_lun,
	    0 /* bootpart */, marks[MARK_END]);

	printf("exec: kernel returned!\n");
	return;
}
@


1.11
log
@Support for /etc/random.seed in bootsd (disk-only boot blocks)
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.10 2014/01/04 10:49:21 miod Exp $	*/
@


1.10
log
@Add rnddata[] placeholders to make these boot blocks build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.9 2012/12/31 21:35:32 miod Exp $	*/
d44 1
a44 1
char   rnddata[BOOTRANDOM_MAX];		/* XXX dummy */
@


1.9
log
@Switch mvme68k boot blocks to use the MI libsa loadfile routines to load
kernel images, instead of their own; gives us the ability to load ELF kernels
for free.

Fix many warnings, and generally make the code closer to the current mvme88k
boot blocks to help diffability.

Rewrite bugcrt and bugexec() as a short assembly shim around a
compiler-independent C block; this will allow compilers other than gcc2 to be
used, and removes the need for bugcrt to be compiled without optimization.

Crank all bootblocks versions.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.14 2008/03/31 22:14:43 miod Exp $	*/
d43 2
@


1.8
log
@Typos
@
text
@d1 2
a2 2
/*	$OpenBSD: exec_mvme.c,v 1.7 2003/09/19 22:34:52 miod Exp $ */
/*	$NetBSD: exec_sun.c,v 1.5 1996/01/29 23:41:06 gwr Exp $ */
a37 1
#include <a.out.h>
d42 2
d47 2
a48 2
	char	*file;
	int	flag;
d50 14
a63 14
	char *loadaddr;
	register int io;
	struct exec x;
	int cc, magic;
	void (*entry)(int, u_int, int, int, int, void *);
	register char *cp;
	register int *ip;

#ifdef	DEBUG
	printf("exec_mvme: file=%s flag=0x%x\n", file, flag);
#endif

	io = open(file, 0);
	if (io < 0)
d66 2
a67 112
	/*
	 * Read in the exec header, and validate it.
	 */
	if (read(io, (char *)&x, sizeof(x)) != sizeof(x))
		goto shread;
	if (N_BADMAG(x)) {
		errno = EFTYPE;
		goto closeout;
	}

	/*
	 * note: on the mvme ports, the kernel is linked in such a way that
	 * its entry point is the first item in .text, and thus a_entry can
	 * be used to determine both the load address and the entry point.
	 * (also note that we make use of the fact that the kernel will live
	 *  in a VA == PA range of memory ... otherwise we would take
	 *  loadaddr as a parameter and let the kernel relocate itself!)
	 *
	 * note that ZMAGIC files included the a.out header in the text area
	 * so we must mask that off (has no effect on the other formats)
	 */
	loadaddr = (void *)(x.a_entry & ~sizeof(x));

	cp = loadaddr;
	magic = N_GETMAGIC(x);
	if (magic == ZMAGIC)
		cp += sizeof(x);
	entry = (void (*)(int, u_int, int, int, int, void *))cp;

	/*
	 * Leave a copy of the exec header before the text.
	 * The sun3 kernel uses this to verify that the
	 * symbols were loaded by this boot program.
	 */
	bcopy(&x, cp - sizeof(x), sizeof(x));

	/*
	 * Read in the text segment.
	 */
	printf("%d", x.a_text);
	cc = x.a_text;
	if (magic == ZMAGIC)
		cc = cc - sizeof(x); /* a.out header part of text in zmagic */
	if (read(io, cp, cc) != cc)
		goto shread;
	cp += cc;

	/*
	 * NMAGIC may have a gap between text and data.
	 */
	if (magic == NMAGIC) {
		register int mask = N_PAGSIZ(x) - 1;
		while ((int)cp & mask)
			*cp++ = 0;
	}

	/*
	 * Read in the data segment.
	 */
	printf("+%d", x.a_data);
	if (read(io, cp, x.a_data) != x.a_data)
		goto shread;
	cp += x.a_data;

	/*
	 * Zero out the BSS section.
	 * (Kernel doesn't care, but do it anyway.)
	 */
	printf("+%d", x.a_bss);
	cc = x.a_bss;
	while ((int)cp & 3) {
		*cp++ = 0;
		--cc;
	}
	ip = (int *)cp;
	cp += cc;
	while ((char *)ip < cp)
		*ip++ = 0;

	/*
	 * Read in the symbol table and strings.
	 * (Always set the symtab size word.)
	 */
	*ip++ = x.a_syms;
	cp = (char *) ip;

	if (x.a_syms > 0 && (flag & RB_NOSYM) == 0) {

		/* Symbol table and string table length word. */
		cc = x.a_syms;
		printf("+[%d", cc);
		cc += sizeof(int);	/* strtab length too */
		if (read(io, cp, cc) != cc)
			goto shread;
		cp += x.a_syms;
		ip = (int *)cp;		/* points to strtab length */
		cp += sizeof(int);

		/* String table.  Length word includes itself. */
		cc = *ip;
		printf("+%d]", cc);
		cc -= sizeof(int);
		if (cc <= 0)
			goto shread;
		if (read(io, cp, cc) != cc)
			goto shread;
		cp += cc;
	}
	printf("=0x%x\n", cp - loadaddr);
	close(io);

	printf("Start @@ 0x%x ...\n", (int)entry);
d71 4
a74 2
	(*entry)(flag, bugargs.ctrl_addr, bugargs.ctrl_lun,
	    bugargs.dev_lun, 0, cp);
a75 7
	return;

shread:
	printf("exec: short read\n");
	errno = EIO;
closeout:
	close(io);
@


1.7
log
@Let boot -b return to debugger before invoking the kernels entry point, like
mvme88k does.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.6 2003/08/20 00:26:00 deraadt Exp $ */
d84 1
a84 1
	 * so we must mask that off (has no effect on the other formats
@


1.6
log
@ansi and protos for the rest
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.5 2003/06/02 23:27:51 millert Exp $ */
d177 3
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.4 2002/03/14 03:15:56 millert Exp $ */
d53 1
a53 1
	void (*entry)();
d76 2
a77 2
	 * note: on the mvme ports, the kernel is linked in such a way that 
	 * its entry point is the first item in .text, and thus a_entry can 
d80 1
a80 1
	 *  in a VA == PA range of memory ... otherwise we would take 
d92 1
a92 1
	entry = (void (*)())cp;
d106 1
a106 1
	if (magic == ZMAGIC) 
d160 1
a160 1
		ip = (int *)cp;  	/* points to strtab length */
d177 2
a178 2
	(*entry)(flag, bugargs.ctrl_addr, 
			bugargs.ctrl_lun, bugargs.dev_lun, 0, cp);
@


1.4
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.3 2001/07/04 08:06:56 niklas Exp $ */
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_sun.c,v 1.5 1996/01/29 23:41:06 gwr Exp $ */
d143 1
a143 1
	ip = (int*)cp;
d145 1
a145 1
	while ((char*)ip < cp)
d153 1
a153 1
	cp = (char*) ip;
d164 1
a164 1
		ip = (int*)cp;  	/* points to strtab length */
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.3 2001/07/04 08:06:56 niklas Exp $ */
d143 1
a143 1
	ip = (int *)cp;
d145 1
a145 1
	while ((char *)ip < cp)
d153 1
a153 1
	cp = (char *) ip;
d164 1
a164 1
		ip = (int *)cp;  	/* points to strtab length */
@


1.2
log
@new calling format to support generic boot
@
text
@d1 1
@


1.2.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$ */
@


1.2.16.2
log
@Merge in -current from about a week ago
@
text
@d143 1
a143 1
	ip = (int *)cp;
d145 1
a145 1
	while ((char *)ip < cp)
d153 1
a153 1
	cp = (char *) ip;
d164 1
a164 1
		ip = (int *)cp;  	/* points to strtab length */
@


1.2.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.2.16.2 2002/03/28 10:34:06 niklas Exp $ */
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d53 1
a53 1
	void (*entry)(int, u_int, int, int, int, void *);
d76 2
a77 2
	 * note: on the mvme ports, the kernel is linked in such a way that
	 * its entry point is the first item in .text, and thus a_entry can
d80 1
a80 1
	 *  in a VA == PA range of memory ... otherwise we would take
d92 1
a92 1
	entry = (void (*)(int, u_int, int, int, int, void *))cp;
d106 1
a106 1
	if (magic == ZMAGIC)
d160 1
a160 1
		ip = (int *)cp;		/* points to strtab length */
d177 2
a178 5
	if (flag & RB_HALT)
		_rtt();

	(*entry)(flag, bugargs.ctrl_addr, bugargs.ctrl_lun,
	    bugargs.dev_lun, 0, cp);
@


1.1
log
@sync with sun3 port.
major reorg. & cleanup.
new SRT that works with bugcrt.
common parse_arg.
@
text
@d180 2
a181 1
	(*entry)(flag, 0, cp, 0, 0);
@
