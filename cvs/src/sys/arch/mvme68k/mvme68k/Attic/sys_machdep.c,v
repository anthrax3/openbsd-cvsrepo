head	1.21;
access;
symbols
	OPENBSD_5_5:1.20.0.24
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.20
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.18
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.16
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.14
	OPENBSD_5_0:1.20.0.12
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.10
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.8
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.4
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.6
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.19.0.12
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.10
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.8
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.6
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.13
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.12
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.10
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.8
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.6
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.20;

1.20
date	2009.02.21.20.33.24;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.17.07.31.26;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.01.11.54.25;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.01.21.13.03;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.31.21.51.37;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.20.09.20.42;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.02.23.27.51;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.27.23.21.06;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.06.10.14.54.46;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.08.08.09.09;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.23.02.14.37;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.08.22.25.21;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.03.21.43;	author smurph;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	99.06.06.15.38.34;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.04.28.10.59.13;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	95.11.28.01.24.16;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.11.07.08.50.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.12.24.50;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.13;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.42.52;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	2001.04.18.16.10.41;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.07.04.10.19.42;	author niklas;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2001.11.13.21.04.14;	author niklas;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2003.03.27.23.32.17;	author niklas;	state Exp;
branches;
next	1.7.2.5;

1.7.2.5
date	2003.06.07.11.13.16;	author ho;	state Exp;
branches;
next	1.7.2.6;

1.7.2.6
date	2004.06.05.23.10.53;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.36.50;	author art;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: sys_machdep.c,v 1.20 2009/02/21 20:33:24 miod Exp $ */

/*
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sys_machdep.c	8.2 (Berkeley) 1/13/94
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <sys/time.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/uio.h>
#include <sys/kernel.h>
#include <sys/mtio.h>
#include <sys/buf.h>
#include <sys/mount.h>

#include <sys/syscallargs.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>

int
sys_sysarch(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
#if 0
	struct sys_sysarch_args /* {
		syscallarg(int) op;
		syscallarg(char *) parms;
	} */ *uap = v;
#endif

	return ENOSYS;
}
@


1.20
log
@dma_cachectl() bye-bye.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.19 2005/12/17 07:31:26 miod Exp $ */
@


1.19
log
@Get rid of deprecated vm_{offset,size}_t types for good, use {p,v}{addr,size}_t
instead; looked at millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.18 2005/08/01 11:54:25 miod Exp $ */
a51 44

/*
 * DMA cache control
 */
/*ARGSUSED1*/
void
dma_cachectl(addr, len)
	caddr_t  addr;
	int len;
{
#if defined(M68040) || defined(M68060)
	if (mmutype <= MMU_68040) {
		register int inc = 0;
		int pa = 0;
		caddr_t end;

		end = addr + len;
		if (len <= 1024 || mmutype == MMU_68060) { /* always line push line for 060 */
			addr = (caddr_t)((int)addr & ~0xF);
			inc = 16;
		} else {
			addr = (caddr_t)((int)addr & ~PGOFSET);
			inc = NBPG;
		}
		do {
			/*
			 * Convert to physical address.
			 */
			if (pa == 0 || ((int)addr & PGOFSET) == 0) {
				pa = kvtop((vaddr_t)addr);
			}
			if (inc == 16) {
				DCFL(pa);
				ICPL(pa);
			} else {
				DCFP(pa);
				ICPP(pa);
			}
			pa += inc;
			addr += inc;
		} while (addr < end);
	}
#endif	/* M68040 */
}
@


1.18
log
@Factorize cachectl() accross m68k platforms, and make the CC_ constants
public.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.17 2004/12/01 21:13:03 miod Exp $ */
d81 1
a81 1
				pa = kvtop ((vm_offset_t)addr);
@


1.17
log
@Remove unexpected (and wrong) easter egg.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.16 2004/08/31 21:51:37 miod Exp $ */
a51 134

/* XXX should be in an include file somewhere */
#define CC_PURGE	1
#define CC_FLUSH	2
#define CC_IPURGE	4
#define CC_EXTPURGE	0x80000000
/* XXX end should be */

/*
 * Note that what we do here for a 68040 is different than HP-UX.
 *
 * In 'pux they either act on a line (len == 16), a page (len == NBPG)
 * or the whole cache (len == anything else).
 *
 * In BSD we attempt to be more optimal when acting on "odd" sizes.
 * For lengths up to 1024 we do all affected lines, up to 2*NBPG we
 * do pages, above that we do the entire cache.
 */
/*ARGSUSED1*/
int
cachectl(p, req, addr, len)
	struct proc *p;
	int req;
	vaddr_t addr;
	int len;
{
	int error = 0;

#if defined(M68040) || defined(M68060)
	if (mmutype <= MMU_68040) {
		int inc = 0;
		int doall = 0;
		paddr_t pa = 0;
		vaddr_t end = 0;
#ifdef COMPAT_HPUX
		extern struct emul emul_hpux;

		if ((p->p_emul == &emul_hpux) &&
		    len != 16 && len != NBPG)
			doall = 1;
#endif
		if (addr == 0 ||
		    ((req & ~CC_EXTPURGE) != CC_PURGE && len > 2*NBPG))
			doall = 1;

		if (!doall) {
			end = addr + len;
			if (len <= 1024) {
				addr = addr & ~0xF;
				inc = 16;
			} else {
				addr = addr & ~PGOFSET;
				inc = NBPG;
			}
		}
		do {
			/*
			 * Convert to physical address if needed.
			 * If translation fails, we perform operation on
			 * entire cache (XXX is this a rational thing to do?)
			 */
			if (!doall &&
			    (pa == 0 || ((int)addr & PGOFSET) == 0)) {
				if (pmap_extract(
				    p->p_vmspace->vm_map.pmap,
				    addr, &pa) == FALSE)
					doall = 1;
			}
			switch (req) {
			case CC_EXTPURGE|CC_IPURGE:
			case CC_IPURGE:
				if (doall) {
					DCFA();
					ICPA();
				} else if (inc == 16) {
					DCFL(pa);
					ICPL(pa);
				} else if (inc == NBPG) {
					DCFP(pa);
					ICPP(pa);
				}
				break;

			case CC_EXTPURGE|CC_PURGE:
			case CC_PURGE:
				if (doall)
					DCFA(); /* note: flush not purge */
				else if (inc == 16)
					DCPL(pa);
				else if (inc == NBPG)
					DCPP(pa);
				break;

			case CC_EXTPURGE|CC_FLUSH:
			case CC_FLUSH:
				if (doall)
					DCFA();
				else if (inc == 16)
					DCFL(pa);
				else if (inc == NBPG)
					DCFP(pa);
				break;

			default:
				error = EINVAL;
				break;
			}
			if (doall)
				break;
			pa += inc;
			addr += inc;
		} while (addr < end);
		return (error);
	}
#endif
	switch (req) {
	case CC_EXTPURGE|CC_PURGE:
	case CC_EXTPURGE|CC_FLUSH:
	case CC_PURGE:
	case CC_FLUSH:
		DCIU();
		break;
	case CC_EXTPURGE|CC_IPURGE:
		DCIU();
		/* fall into... */
	case CC_IPURGE:
		ICIA();
		break;
	default:
		error = EINVAL;
		break;
	}
	return (error);
}
@


1.16
log
@Buglet in cachectl(), do not use curproc anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.15 2004/05/20 09:20:42 kettenis Exp $ */
a91 5
#endif
#ifdef M68060
		if (mmutype == MMU_68040) {
			doall = 1;
		}
@


1.15
log
@Properly flush instruction cache for ptrace(PT_WRTIE_{DI}, ...) on powerpc
and m68k.
ok drahn@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.14 2003/06/02 23:27:51 millert Exp $ */
d89 2
a90 2
		if ((curproc->p_emul == &emul_hpux) &&
			 len != 16 && len != NBPG)
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.13 2002/04/27 23:21:06 miod Exp $ */
a59 2
int	cachectl(int, vaddr_t, int);

d72 2
a73 1
cachectl(req, addr, len)
d121 1
a121 1
				    curproc->p_vmspace->vm_map.pmap,
@


1.13
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.12 2001/11/06 19:53:15 miod Exp $ */
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.11 2001/06/10 14:54:46 miod Exp $ */
d49 3
d64 2
d77 1
d79 3
a81 3
int req;
caddr_t  addr;
int len;
d87 2
a88 1
		register int inc = 0;
d90 1
a90 2
		int doall = 0;
		caddr_t end;
d104 1
a104 1
			 (req & ~CC_EXTPURGE) != CC_PURGE && len > 2*NBPG)
d110 1
a110 1
				addr = (caddr_t)((int)addr & ~0xF);
d113 1
a113 1
				addr = (caddr_t)((int)addr & ~PGOFSET);
d124 4
a127 3
				 (pa == 0 || ((int)addr & PGOFSET) == 0)) {
				if (pmap_extract(curproc->p_vmspace->vm_map.pmap,
				    (vm_offset_t)addr, &pa) == FALSE)
d131 37
a167 37
				case CC_EXTPURGE|CC_IPURGE:
				case CC_IPURGE:
					if (doall) {
						DCFA();
						ICPA();
					} else if (inc == 16) {
						DCFL(pa);
						ICPL(pa);
					} else if (inc == NBPG) {
						DCFP(pa);
						ICPP(pa);
					}
					break;

				case CC_EXTPURGE|CC_PURGE:
				case CC_PURGE:
					if (doall)
						DCFA(); /* note: flush not purge */
					else if (inc == 16)
						DCPL(pa);
					else if (inc == NBPG)
						DCPP(pa);
					break;

				case CC_EXTPURGE|CC_FLUSH:
				case CC_FLUSH:
					if (doall)
						DCFA();
					else if (inc == 16)
						DCFL(pa);
					else if (inc == NBPG)
						DCFP(pa);
					break;

				default:
					error = EINVAL;
					break;
d178 15
a192 15
		case CC_EXTPURGE|CC_PURGE:
		case CC_EXTPURGE|CC_FLUSH:
		case CC_PURGE:
		case CC_FLUSH:
			DCIU();
			break;
		case CC_EXTPURGE|CC_IPURGE:
			DCIU();
			/* fall into... */
		case CC_IPURGE:
			ICIA();
			break;
		default:
			error = EINVAL;
			break;
d201 1
d203 2
a204 2
caddr_t  addr;
int len;
a238 1
	return (0);
d243 3
a245 3
struct proc *p;
void *v;
register_t *retval;
d247 2
a248 1
	struct sysarch_args /* {
d252 1
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.12 2001/11/06 19:53:15 miod Exp $ */
a48 3
#include <sys/mount.h>

#include <sys/syscallargs.h>
a60 2
int	cachectl(int, vaddr_t, int);

a71 1
int
d73 3
a75 3
	int req;
	vaddr_t addr;
	int len;
d81 2
a82 1
		int inc = 0;
d84 1
a84 2
		paddr_t pa = 0;
		vaddr_t end = 0;
d98 1
a98 1
		    ((req & ~CC_EXTPURGE) != CC_PURGE && len > 2*NBPG))
d104 1
a104 1
				addr = addr & ~0xF;
d107 1
a107 1
				addr = addr & ~PGOFSET;
d118 3
a120 4
			    (pa == 0 || ((int)addr & PGOFSET) == 0)) {
				if (pmap_extract(
				    curproc->p_vmspace->vm_map.pmap,
				    addr, &pa) == FALSE)
d124 37
a160 37
			case CC_EXTPURGE|CC_IPURGE:
			case CC_IPURGE:
				if (doall) {
					DCFA();
					ICPA();
				} else if (inc == 16) {
					DCFL(pa);
					ICPL(pa);
				} else if (inc == NBPG) {
					DCFP(pa);
					ICPP(pa);
				}
				break;

			case CC_EXTPURGE|CC_PURGE:
			case CC_PURGE:
				if (doall)
					DCFA(); /* note: flush not purge */
				else if (inc == 16)
					DCPL(pa);
				else if (inc == NBPG)
					DCPP(pa);
				break;

			case CC_EXTPURGE|CC_FLUSH:
			case CC_FLUSH:
				if (doall)
					DCFA();
				else if (inc == 16)
					DCFL(pa);
				else if (inc == NBPG)
					DCFP(pa);
				break;

			default:
				error = EINVAL;
				break;
d171 15
a185 15
	case CC_EXTPURGE|CC_PURGE:
	case CC_EXTPURGE|CC_FLUSH:
	case CC_PURGE:
	case CC_FLUSH:
		DCIU();
		break;
	case CC_EXTPURGE|CC_IPURGE:
		DCIU();
		/* fall into... */
	case CC_IPURGE:
		ICIA();
		break;
	default:
		error = EINVAL;
		break;
a193 1
void
d195 2
a196 2
	caddr_t  addr;
	int len;
d231 1
d236 3
a238 3
	struct proc *p;
	void *v;
	register_t *retval;
d240 1
a240 2
#if 0
	struct sys_sysarch_args /* {
a243 1
#endif
@


1.11
log
@Post pmap_extract() changes cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.10 2001/06/08 08:09:09 art Exp $ */
d50 1
a50 1
#include <vm/vm.h>
@


1.10
log
@Change the paddr_t pmap_extract(struct pmap *, vaddr_t) interface to
boolean_t pmap_extract(struct pmap *, vaddr_t, paddr_t *).
Matches NetBSD. Tested by various people on various platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.9 2000/06/23 02:14:37 mickey Exp $ */
d82 2
a83 1
		int pa = 0, doall = 0;
@


1.9
log
@remove obsolete vtrace guts; art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.8 2000/06/08 22:25:21 niklas Exp $ */
d118 2
a119 3
				pa = pmap_extract(curproc->p_vmspace->vm_map.pmap,
										(vm_offset_t)addr);
				if (pa == 0)
@


1.8
log
@Add explicit inclusions of signalvar.h to files actually using syms defined
there but relying on an indirect inclusion
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.8 2000/06/08 21:12:04 niklas Exp $ */
a48 1
#include <sys/trace.h>
a50 57

#ifdef TRACE
int   nvualarm;

vtrace(p, uap, retval)
struct proc *p;
register struct vtrace_args /* {
	syscallarg(int) request;
	syscallarg(int) value;
} */ *uap;
register_t *retval;
{
	int vdoualarm();

	switch (SCARG(uap, request)) {
		
		case VTR_DISABLE:		/* disable a trace point */
		case VTR_ENABLE:		/* enable a trace point */
			if (SCARG(uap, value) < 0 || SCARG(uap, value) >= TR_NFLAGS)
				return (EINVAL);
			*retval = traceflags[SCARG(uap, value)];
			traceflags[SCARG(uap, value)] = SCARG(uap, request);
			break;

		case VTR_VALUE:		/* return a trace point setting */
			if (SCARG(uap, value) < 0 || SCARG(uap, value) >= TR_NFLAGS)
				return (EINVAL);
			*retval = traceflags[SCARG(uap, value)];
			break;

		case VTR_UALARM:	/* set a real-time ualarm, less than 1 min */
			if (SCARG(uap, value) <= 0 || SCARG(uap, value) > 60 * hz ||
				 nvualarm > 5)
				return (EINVAL);
			nvualarm++;
			timeout(vdoualarm, (void *)p->p_pid, SCARG(uap, value));
			break;

		case VTR_STAMP:
			trace(TR_STAMP, SCARG(uap, value), p->p_pid);
			break;
	}
	return (0);
}

vdoualarm(arg)
void *arg;
{
	register int pid = (int)arg;
	register struct proc *p;

	p = pfind(pid);
	if (p)
		psignal(p, 16);
	nvualarm--;
}
#endif
@


1.7
log
@Added support for MVME177 (mc68060)
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.6 1999/06/06 15:38:34 deraadt Exp $ */
d44 1
@


1.7.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.9 2000/06/23 02:14:37 mickey Exp $ */
a43 1
#include <sys/signalvar.h>
d48 1
d51 57
@


1.7.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.7.2.1 2001/04/18 16:10:41 niklas Exp $ */
d82 1
a82 2
		paddr_t pa = 0;
		int doall = 0;
d118 3
a120 2
				if (pmap_extract(curproc->p_vmspace->vm_map.pmap,
				    (vm_offset_t)addr, &pa) == FALSE)
@


1.7.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d50 1
a50 1
#include <uvm/uvm_extern.h>
@


1.7.2.4
log
@Sync the SMP branch with 3.3
@
text
@a48 3
#include <sys/mount.h>

#include <sys/syscallargs.h>
a60 2
int	cachectl(int, vaddr_t, int);

a71 1
int
d73 3
a75 3
	int req;
	vaddr_t addr;
	int len;
d81 2
a82 1
		int inc = 0;
d84 1
a84 2
		paddr_t pa = 0;
		vaddr_t end = 0;
d98 1
a98 1
		    ((req & ~CC_EXTPURGE) != CC_PURGE && len > 2*NBPG))
d104 1
a104 1
				addr = addr & ~0xF;
d107 1
a107 1
				addr = addr & ~PGOFSET;
d118 3
a120 4
			    (pa == 0 || ((int)addr & PGOFSET) == 0)) {
				if (pmap_extract(
				    curproc->p_vmspace->vm_map.pmap,
				    addr, &pa) == FALSE)
d124 37
a160 37
			case CC_EXTPURGE|CC_IPURGE:
			case CC_IPURGE:
				if (doall) {
					DCFA();
					ICPA();
				} else if (inc == 16) {
					DCFL(pa);
					ICPL(pa);
				} else if (inc == NBPG) {
					DCFP(pa);
					ICPP(pa);
				}
				break;

			case CC_EXTPURGE|CC_PURGE:
			case CC_PURGE:
				if (doall)
					DCFA(); /* note: flush not purge */
				else if (inc == 16)
					DCPL(pa);
				else if (inc == NBPG)
					DCPP(pa);
				break;

			case CC_EXTPURGE|CC_FLUSH:
			case CC_FLUSH:
				if (doall)
					DCFA();
				else if (inc == 16)
					DCFL(pa);
				else if (inc == NBPG)
					DCFP(pa);
				break;

			default:
				error = EINVAL;
				break;
d171 15
a185 15
	case CC_EXTPURGE|CC_PURGE:
	case CC_EXTPURGE|CC_FLUSH:
	case CC_PURGE:
	case CC_FLUSH:
		DCIU();
		break;
	case CC_EXTPURGE|CC_IPURGE:
		DCIU();
		/* fall into... */
	case CC_IPURGE:
		ICIA();
		break;
	default:
		error = EINVAL;
		break;
a193 1
void
d195 2
a196 2
	caddr_t  addr;
	int len;
d231 1
d236 3
a238 3
	struct proc *p;
	void *v;
	register_t *retval;
d240 1
a240 2
#if 0
	struct sys_sysarch_args /* {
a243 1
#endif
@


1.7.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.7.2.4 2003/03/27 23:32:17 niklas Exp $ */
d15 5
a19 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7.2.6
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d60 2
d74 1
a74 2
cachectl(p, req, addr, len)
	struct proc *p;
d122 1
a122 1
				    p->p_vmspace->vm_map.pmap,
@


1.6
log
@pmap callout changes for uvm; art
@
text
@d1 1
a1 1
/*	$OpenBSD: sys_machdep.c,v 1.5 1996/04/28 10:59:13 deraadt Exp $ */
d53 1
a53 1
int	nvualarm;
d56 6
a61 6
	struct proc *p;
	register struct vtrace_args /* {
		syscallarg(int) request;
		syscallarg(int) value;
	} */ *uap;
	register_t *retval;
d66 26
a91 26

	case VTR_DISABLE:		/* disable a trace point */
	case VTR_ENABLE:		/* enable a trace point */
		if (SCARG(uap, value) < 0 || SCARG(uap, value) >= TR_NFLAGS)
			return (EINVAL);
		*retval = traceflags[SCARG(uap, value)];
		traceflags[SCARG(uap, value)] = SCARG(uap, request);
		break;

	case VTR_VALUE:		/* return a trace point setting */
		if (SCARG(uap, value) < 0 || SCARG(uap, value) >= TR_NFLAGS)
			return (EINVAL);
		*retval = traceflags[SCARG(uap, value)];
		break;

	case VTR_UALARM:	/* set a real-time ualarm, less than 1 min */
		if (SCARG(uap, value) <= 0 || SCARG(uap, value) > 60 * hz ||
		    nvualarm > 5)
			return (EINVAL);
		nvualarm++;
		timeout(vdoualarm, (void *)p->p_pid, SCARG(uap, value));
		break;

	case VTR_STAMP:
		trace(TR_STAMP, SCARG(uap, value), p->p_pid);
		break;
d97 1
a97 1
	void *arg;
d130 3
a132 3
	int req;
	caddr_t	addr;
	int len;
d136 2
a137 2
#if defined(M68040)
	if (mmutype == MMU_68040) {
d145 5
a149 1
		    len != 16 && len != NBPG)
d151 1
a152 1

d154 1
a154 1
		    (req & ~CC_EXTPURGE) != CC_PURGE && len > 2*NBPG)
d174 1
a174 1
			    (pa == 0 || ((int)addr & PGOFSET) == 0)) {
d176 1
a176 1
						  (vm_offset_t)addr);
d181 37
a217 37
			case CC_EXTPURGE|CC_IPURGE:
			case CC_IPURGE:
				if (doall) {
					DCFA();
					ICPA();
				} else if (inc == 16) {
					DCFL(pa);
					ICPL(pa);
				} else if (inc == NBPG) {
					DCFP(pa);
					ICPP(pa);
				}
				break;

			case CC_EXTPURGE|CC_PURGE:
			case CC_PURGE:
				if (doall)
					DCFA(); /* note: flush not purge */
				else if (inc == 16)
					DCPL(pa);
				else if (inc == NBPG)
					DCPP(pa);
				break;

			case CC_EXTPURGE|CC_FLUSH:
			case CC_FLUSH:
				if (doall)
					DCFA();
				else if (inc == 16)
					DCFL(pa);
				else if (inc == NBPG)
					DCFP(pa);
				break;

			default:
				error = EINVAL;
				break;
d224 1
a224 1
		return(error);
d228 15
a242 15
	case CC_EXTPURGE|CC_PURGE:
	case CC_EXTPURGE|CC_FLUSH:
	case CC_PURGE:
	case CC_FLUSH:
		DCIU();
		break;
	case CC_EXTPURGE|CC_IPURGE:
		DCIU();
		/* fall into... */
	case CC_IPURGE:
		ICIA();
		break;
	default:
		error = EINVAL;
		break;
d244 1
a244 1
	return(error);
d252 2
a253 2
	caddr_t	addr;
	int len;
d255 2
a256 2
#ifdef M68040
	if (mmutype == MMU_68040) {
d262 1
a262 1
		if (len <= 1024) {
d288 1
a288 1
	return(0);
d293 3
a295 3
	struct proc *p;
	void *v;
	register_t *retval;
@


1.5
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d171 1
a171 1
				pa = pmap_extract(&curproc->p_vmspace->vm_pmap,
@


1.4
log
@delete duplicate sysarch function body
@
text
@d1 1
a1 1
/*	$Id: sys_machdep.c,v 1.3 1995/11/07 08:50:26 deraadt Exp $ */
@


1.3
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
a240 12
}

int
sysarch(p, uap, retval)
	struct proc *p;
	struct sysarch_args /* {
		syscallarg(int) op;
		syscallarg(char *) parms;
	} */ *uap;
	register_t *retval;
{
	return ENOSYS;
@


1.2
log
@+ sys_sysarch
@
text
@d1 1
a1 1
/*	$NetBSD: sys_machdep.c,v 1.8 1995/04/22 20:25:54 christos Exp $ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: sys_machdep.c,v 1.3.2.1 1995/10/12 22:39:29 chuck Exp $ */
a48 1
#include <sys/mount.h>
a51 2
#include <sys/syscallargs.h>

d55 1
a55 1
vtrace(p, v, retval)
a56 3
	void *v;
	register_t *retval;
{
d60 3
a62 1
	} */ *uap = v;
a225 5
#if defined(HP370)
		if (ectype == EC_PHYS)
			PCIA();
		/* fall into... */
#endif
a230 5
#if defined(HP370)
		if (ectype == EC_PHYS)
			PCIA();
		else
#endif
d244 56
d306 1
a306 1
		syscallarg(int) op; 
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@d1 1
a1 1
/*	$NetBSD: sys_machdep.c,v 1.8 1995/04/22 20:25:54 christos Exp $ */
d49 1
d53 2
d58 1
a58 1
vtrace(p, uap, retval)
d60 3
d66 1
a66 3
	} */ *uap;
	register_t *retval;
{
d230 5
d240 5
d258 1
a258 1
sysarch(p, uap, retval)
d260 3
d264 1
a264 1
		syscallarg(int) op;
d266 2
a267 3
	} */ *uap;
	register_t *retval;
{
a268 44
}

/*
 * DMA cache control
 */
/*ARGSUSED1*/
dma_cachectl(addr, len)
	caddr_t	addr;
	int len;
{
#ifdef M68040
	if (mmutype == MMU_68040) {
		register int inc = 0;
		int pa = 0;
		caddr_t end;

		end = addr + len;
		if (len <= 1024) {
			addr = (caddr_t)((int)addr & ~0xF);
			inc = 16;
		} else {
			addr = (caddr_t)((int)addr & ~PGOFSET);
			inc = NBPG;
		}
		do {
			/*
			 * Convert to physical address.
			 */
			if (pa == 0 || ((int)addr & PGOFSET) == 0) {
				pa = kvtop ((vm_offset_t)addr);
			}
			if (inc == 16) {
				DCFL(pa);
				ICPL(pa);
			} else {
				DCFP(pa);
				ICPP(pa);
			}
			pa += inc;
			addr += inc;
		} while (addr < end);
	}
#endif	/* M68040 */
	return(0);
@
