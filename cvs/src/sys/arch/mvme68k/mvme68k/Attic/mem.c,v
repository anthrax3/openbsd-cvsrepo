head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.16
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.12
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.10
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.8
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.6
	OPENBSD_5_0:1.25.0.4
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.24.0.18
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.14
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.16
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.12
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.10
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.8
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.6
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.4
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.23.0.2
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.21.0.10
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.8
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.6
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.19.0.4
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.18.0.4
	OPENBSD_3_1_BASE:1.18
	UBC_SYNC_B:1.19
	UBC:1.18.0.2
	UBC_BASE:1.18
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.9.0.6
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.2
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	theo-1:1.1.1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.25;

1.25
date	2010.12.26.15.40.59;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.19.22.51.09;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.17.07.31.26;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.27.16.04.08;	author martin;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.02.23.27.51;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.05.09.14;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2002.04.27.23.21.06;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2001.12.08.02.24.06;	author art;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.25.13.25.32;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.27.04.19.17;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.26.21.35.42;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.05.20.56.45;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.05.20.39.39;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.12.07.38.32;	author smurph;	state Exp;
branches;
next	1.9;

1.9
date	99.11.22.19.22.00;	author matthieu;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	99.09.27.20.30.32;	author smurph;	state Exp;
branches;
next	1.7;

1.7
date	99.09.03.18.01.22;	author art;	state Exp;
branches;
next	1.6;

1.6
date	98.08.31.17.42.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.02.10.11.39.26;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.04.28.10.59.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.11.30.22.52.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.07.08.50.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.13;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	95.10.18.10.42.42;	author deraadt;	state Exp;
branches;
next	;

1.9.2.1
date	2001.04.18.16.10.40;	author niklas;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2001.07.04.10.19.40;	author niklas;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2001.10.31.03.01.17;	author nate;	state Exp;
branches;
next	1.9.2.4;

1.9.2.4
date	2001.11.13.21.04.14;	author niklas;	state Exp;
branches;
next	1.9.2.5;

1.9.2.5
date	2002.03.06.01.07.00;	author niklas;	state Exp;
branches;
next	1.9.2.6;

1.9.2.6
date	2003.03.27.23.32.17;	author niklas;	state Exp;
branches;
next	1.9.2.7;

1.9.2.7
date	2003.06.07.11.13.16;	author ho;	state Exp;
branches;
next	;

1.18.2.1
date	2002.06.11.03.36.50;	author art;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: mem.c,v 1.25 2010/12/26 15:40:59 miod Exp $ */

/*
 * Copyright (c) 1995 Theo de Raadt
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>

#include <machine/cpu.h>
#include <machine/conf.h>

#include <uvm/uvm_extern.h>

static caddr_t devzeropage;

/*ARGSUSED*/
int
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 12:
			return (0);
		default:
			return (ENXIO);
	}
}

/*ARGSUSED*/
int
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	return (0);
}

/*ARGSUSED*/
int
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	vaddr_t o, v;
	int c;
	struct iovec *iov;
	int error = 0;
	static int physlock;

	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
	}
	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;
#ifndef DEBUG
			/* allow reads only in RAM (except for DEBUG) */
			if (v >= 0xFFFFFFFC || v < NBPG) {
				error = EFAULT;
				goto unlock;
			}
#endif
			
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap, 
				   trunc_page(v), 
				   uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE,
				   (uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE) | PMAP_WIRED); 
			pmap_update(pmap_kernel());
			o = uio->uio_offset & PGOFSET;
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
			pmap_update(pmap_kernel());
			continue;

/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = min(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			if (v < NBPG)
				return (EFAULT);
			error = uiomove((caddr_t)v, c, uio);
			continue;

/* minor device 2 is EOF/RATHOLE */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}
			/*
			 * On the first call, allocate and zero a page
			 * of memory for use with /dev/zero.
			 *
			 * XXX on the mvme68k we already know where there
			 * is a global zeroed page, the null segment table.
			 */
			if (devzeropage == NULL) {
				extern caddr_t Segtabzero;
				devzeropage = Segtabzero;
			}
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomove(devzeropage, c, uio);
			continue;

		default:
			return (ENXIO);
		}
		if (error)
			break;
		iov->iov_base += c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	if (minor(dev) == 0) {
unlock:
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
	}
	return (error);
}

paddr_t
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
{
	/*
	 * /dev/mem is the only one that makes sense through this
	 * interface.  For /dev/kmem any physaddr we return here
	 * could be transient and hence incorrect or invalid at
	 * a later time.  /dev/null just doesn't make any sense
	 * and /dev/zero is a hack that is handled via the default
	 * pager in mmap().
	 */
	if (minor(dev) != 0)
		return (-1);
	/*
	 * Allow access only in RAM.
	 *
	 * XXX could be extended to allow access to IO space but must
	 * be very careful.
	 */
	if ((unsigned)off >= 0xFFFFFFFC || (unsigned)off < NBPG)
		return (-1);
	return (off);
}

/*ARGSUSED*/
int
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EOPNOTSUPP);
}
@


1.25
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.24 2006/05/19 22:51:09 miod Exp $ */
@


1.24
log
@Get rid of ``maxmem'' and fix the descriptive comment for ``physmem''.
Either maxmem is not used (mac68k), or the position of the physical memory
is set in stone so we don't need to know the top of the memory (MAXADDR
on hp300, physmem on mvme68k) it was pointing to.

Plus this gets rid of unused lowram on mvme68k - all the m68k world is not an
hp300, after all.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.23 2005/12/17 07:31:26 miod Exp $ */
d250 1
a250 1
	return (atop(off));
@


1.23
log
@Get rid of deprecated vm_{offset,size}_t types for good, use {p,v}{addr,size}_t
instead; looked at millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.22 2005/10/27 16:04:08 martin Exp $ */
a76 1
extern u_int lowram;
d149 1
a149 1
			if (v >= 0xFFFFFFFC || v < lowram || v < NBPG) {
d248 1
a248 2
	if ((unsigned)off < lowram || (unsigned)off >= 0xFFFFFFFC ||
	    (unsigned)off < NBPG)
@


1.22
log
@stupid me, of course these MD macros need to be converted to MI macros
as well
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.21 2003/06/02 23:27:51 millert Exp $ */
d117 3
a119 3
	register vm_offset_t o, v;
	register int c;
	register struct iovec *iov;
d156 1
a156 1
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap, 
d164 2
a165 2
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + NBPG);
@


1.21
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.20 2003/06/02 05:09:14 deraadt Exp $ */
d252 1
a252 1
	return (m68k_btop(off));
@


1.20
log
@license cleanup of my files
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.19 2002/04/27 23:21:06 miod Exp $ */
d43 1
a43 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.19
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2001/12/08 02:24:06 art Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.18
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2001/11/06 19:53:15 miod Exp $ */
a76 1
#include <sys/conf.h>
d83 1
d92 1
a92 1
mmopen(dev, flag, mode)
d95 1
d111 1
a111 1
mmclose(dev, flag, mode)
d114 1
d207 1
a207 1
			 * XXX on the hp300 we already know where there
@


1.18.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2001/12/08 02:24:06 art Exp $ */
d77 1
a83 1
#include <machine/conf.h>
d92 1
a92 1
mmopen(dev, flag, mode, p)
a94 1
	struct proc *p;
d110 1
a110 1
mmclose(dev, flag, mode, p)
a112 1
	struct proc *p;
d205 1
a205 1
			 * XXX on the mvme68k we already know where there
@


1.17
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2001/11/01 12:13:46 art Exp $ */
d168 1
a168 1

d174 1
@


1.16
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2001/07/25 13:25:32 art Exp $ */
a84 1
#include <vm/vm.h>
@


1.15
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/06/27 04:19:17 art Exp $ */
d235 1
a235 1
int
d238 2
a239 1
	int off, prot;
@


1.14
log
@zap old vm
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/06/26 21:35:42 miod Exp $ */
d168 1
a168 2
				   TRUE, 
				   uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE); 
@


1.13
log
@A few changes to mvme68k:
+ switch to UVM
+ fix the system trace problem
+ big cleanup of locore.s (macro for BUG calls, use more common m68k
  code whenever possible, and the macros in <m68k/asm.h>)
+ better indentation on some parts (old KNF)
+ call doshutdownhooks() at shutdown
+ use <net/netisr_dispatch.h>
+ upgrade pmap.c to something very close to our current hp300 pmap.c,
  minus support for PMAP_NEW and for HP MMU
+ various tidbits I forget to mention here

work and tests by smurph@@ and me.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2001/05/05 20:56:45 art Exp $ */
a85 1
#if defined(UVM)
a86 1
#endif
a181 1
#if defined(UVM)
a184 5
#else
			if (!kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#endif
@


1.12
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2001/04/05 20:39:39 deraadt Exp $ */
d86 3
d167 5
a171 5
         pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), 
             uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE, 
             TRUE, 
             uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE); 
d184 5
d192 1
@


1.11
log
@undo changes which did not even compile
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 1999/11/22 19:22:00 matthieu Exp $ */
a208 1
#if CLBYTES == NBPG
a210 5
#else
				devzeropage = (caddr_t)
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(devzeropage, CLBYTES);
#endif
d212 1
a212 1
			c = min(iov->iov_len, CLBYTES);
@


1.10
log
@Initial code for UVM.  not tested yet...
@
text
@a85 3
#if defined(UVM)
#include <uvm/uvm_extern.h>
#endif
d164 5
a168 5
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap, 
				   trunc_page(v), 
				   uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE,
				   TRUE, 
				   uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE); 
a180 5
#if defined(UVM)
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#else
a183 1
#endif
@


1.9
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 1999/09/27 20:30:32 smurph Exp $ */
d86 3
d167 5
a171 5
         pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), 
             uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE, 
             TRUE, 
             uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE); 
d184 5
d192 1
@


1.9.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2001/04/05 20:39:39 deraadt Exp $ */
@


1.9.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.1 2001/04/18 16:10:40 niklas Exp $ */
a85 1
#include <uvm/uvm_extern.h>
d164 5
a168 5
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap, 
				   trunc_page(v), 
				   uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE,
				   TRUE, 
				   uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE); 
d181 1
a181 1
			if (!uvm_kernacc((caddr_t)v, c,
d209 1
d212 5
d218 1
a218 1
			c = min(iov->iov_len, PAGE_SIZE);
@


1.9.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.2 2001/07/04 10:19:40 niklas Exp $ */
d168 2
a169 1
				   (uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE) | PMAP_WIRED); 
@


1.9.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d85 1
d235 1
a235 1
paddr_t
d238 1
a238 2
	off_t off;
	int prot;
@


1.9.2.5
log
@Merge in trunk
@
text
@d168 1
a168 1
			pmap_update(pmap_kernel());
a173 1
			pmap_update(pmap_kernel());
@


1.9.2.6
log
@Sync the SMP branch with 3.3
@
text
@d77 1
a83 1
#include <machine/conf.h>
d92 1
a92 1
mmopen(dev, flag, mode, p)
a94 1
	struct proc *p;
d110 1
a110 1
mmclose(dev, flag, mode, p)
a112 1
	struct proc *p;
d205 1
a205 1
			 * XXX on the mvme68k we already know where there
@


1.9.2.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9.2.6 2003/03/27 23:32:17 niklas Exp $ */
d14 6
d49 5
a53 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8
log
@This gets us to 2.6...
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 1998/08/31 17:42:35 millert Exp $ */
d266 12
@


1.7
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d163 7
a169 3
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
			    trunc_page(v), uio->uio_rw == UIO_READ ?
			    VM_PROT_READ : VM_PROT_WRITE, TRUE, 0);
@


1.6
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1997/02/10 11:39:26 downsj Exp $ */
d165 1
a165 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
@


1.5
log
@Completely untested mvme68k changes for copypage/zeropage/mappedcopy.
Doesn't really support MAPPEDCOPY.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 1996/04/28 10:59:03 deraadt Exp $ */
d97 9
a105 1
	return (0);
@


1.4
log
@add OpenBSD header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d88 1
a88 1
caddr_t zeropage;
d196 1
a196 1
			if (zeropage == NULL) {
d199 1
a199 1
				zeropage = Segtabzero;
d201 1
a201 1
				zeropage = (caddr_t)
d203 1
a203 1
				bzero(zeropage, CLBYTES);
d207 1
a207 1
			error = uiomove(zeropage, c, uio);
@


1.3
log
@prevent access to page 0 of virtual space
@
text
@d1 1
a1 1
/*	$Id: mem.c,v 1.2 1995/11/07 08:50:22 deraadt Exp $ */
@


1.2
log
@$Id$ throughout
update many copyrights
@
text
@d1 1
a1 1
/*	$Id$ */
d171 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mem.c,v 1.1.1.1 1995/07/25 23:11:58 chuck Exp $	*/
d4 29
d150 1
a150 1
			if (v >= 0xFFFFFFFC || v < lowram) {
d248 2
a249 1
	if ((unsigned)off < lowram || (unsigned)off >= 0xFFFFFFFC)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@mvme68k port by me. some parts by dale rahn.
@
text
@d1 1
a1 1
/*	$NetBSD: mem.c,v 1.13 1995/04/10 13:10:51 mycroft Exp $	*/
d121 1
a121 1
			if (v >= 0xFFFFFFFC || v < lowram || v < NBPG) {
d219 1
a219 2
	if ((unsigned)off < lowram || (unsigned)off >= 0xFFFFFFFC ||
	    (unsigned)off < NBPG)
@
