head	1.23;
access;
symbols
	OPENBSD_5_5:1.22.0.6
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.21.0.8
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.6
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.4
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.20.0.4
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.8
	UBC:1.4.0.2
	UBC_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1;
locks; strict;
comment	@ * @;


1.23
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.22;

1.22
date	2013.06.16.14.49.49;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.23.03.50.22;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.18.19.32.41;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.15.20.40.25;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.01.21.40.49;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.12.02.22.31.26;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.15.13.46.22;	author martin;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.11.20.46.50;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.12.03.28.28;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.01.09.55.49;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.19.15.29.47;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.11.23.51.49;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.05.01.51.27;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.29.07.35.20;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.27.23.21.05;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.03.15.56;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.23.00.47.46;	author miod;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.06.24.17.05.37;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.06.15.25.04;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.06.03.27.00;	author smurph;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.04.18.16.10.36;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.07.04.10.19.31;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.12.05.00.39.11;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.03.28.10.34.05;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.03.27.23.32.17;	author niklas;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2004.02.19.10.49.05;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2002.06.11.03.36.50;	author art;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.05.19.21.45.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: intr.h,v 1.22 2013/06/16 14:49:49 kettenis Exp $	*/
/*
 * Copyright (C) 2000 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_INTR_H_
#define _MACHINE_INTR_H_

#include <machine/psl.h>

#ifdef _KERNEL

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *      - properly order ISRs in the list for that CPU ipl
 *      - compute CPU PSL values for the spl*() calls.
 */
#define IPL_NONE	0
#define IPL_SOFTINT	1
#define IPL_BIO		2
#define IPL_NET		3
#define IPL_TTY		5
#define	IPL_VM		5
#define IPL_CLOCK	5
#define IPL_STATCLOCK	5
#define IPL_SCHED	7
#define IPL_HIGH	7

#define IPL_MPSAFE	0	/* no "mpsafe" interrupts */

#define	MD_IPLTOPSL(ipl)	IPLTOPSL(ipl)

#define	splsoft()		_splraise(PSL_S | PSL_IPL1)
#define	splsoftclock()		splsoft()
#define	splsoftnet()		splsoft()
#define	splbio()		_splraise(PSL_S | PSL_IPL2)
#define	splnet()		_splraise(PSL_S | PSL_IPL3)
#define	spltty()		_splraise(PSL_S | PSL_IPL5)
#define	splvm()			_splraise(PSL_S | PSL_IPL5)
#define	splclock()		_splraise(PSL_S | PSL_IPL5)
#define	splstatclock()		_splraise(PSL_S | PSL_IPL5)
#define	splhigh()		_spl(PSL_S | PSL_IPL7)
#define	splsched()		splhigh()

/* watch out for side effects */
#define	splx(s)			((s) & PSL_IPL ? _spl(s) : spl0())

#include <m68k/intr.h>		/* soft interrupt support */

/* locore.s */
int	spl0(void);

#endif /* _KERNEL */
#endif /* _MACHINE_INTR_H_ */
@


1.22
log
@Add IPL_MPSAFE for some architectures that I missed in the first round.

pointed out by & ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.21 2011/03/23 16:54:36 pirofti Exp $	*/
@


1.21
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.20 2010/04/23 03:50:22 miod Exp $	*/
d54 2
@


1.20
log
@Make sure IPL_SCHED is always defined by MD headers, instead of having a MI
fallback definition in <sys/sched.h>, so that there is no hidden include
ordering requirement between <machine/intr.h> and <sys/sched.h>.
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.19 2009/09/18 19:32:41 miod Exp $	*/
d29 2
a30 2
#ifndef _MVME68K_INTR_H_
#define _MVME68K_INTR_H_
d78 1
a78 1
#endif /* _MVME68K_INTR_H_ */
@


1.19
log
@Fix conversion of symbolic IPL level to hardware PSL value in the mutex code.
This is a noop on all arches but hp300, where this fixes (at least) IPL_BIO
mutexes.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.18 2009/03/15 20:40:25 miod Exp $	*/
d52 1
@


1.18
log
@Generic softinterrupt code for m68k platforms, now copied from m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.17 2009/03/01 21:40:49 miod Exp $	*/
d53 2
@


1.17
log
@Support for MVME165 board - code written in april 2006, eventually debugged
last month.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.16 2007/12/02 22:31:26 miod Exp $	*/
a36 19
 * Simulated software interrupt register.
 */
extern volatile u_int8_t ssir;

#define	SIR_NET		0x01
#define	SIR_CLOCK	0x02

#define	siron(mask)	\
	__asm __volatile ( "orb %1,%0" : "=m" (ssir) : "ir" (mask))
#define	siroff(mask)	\
	__asm __volatile ( "andb %1,%0" : "=m" (ssir) : "ir" (~(mask)))

#define	setsoftint(s)	siron(s)
#define	setsoftnet()	siron(SIR_NET)
#define	setsoftclock()	siron(SIR_CLOCK)

u_int8_t allocate_sir(void (*proc)(void *), void *arg);

/*
d45 1
a45 2
#define IPL_SOFTNET	1
#define IPL_SOFTCLOCK	1
d68 2
@


1.16
log
@One last missing IPL_VM.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.15 2007/05/15 13:46:22 martin Exp $	*/
d68 2
a69 2
#define IPL_TTY		3
#define	IPL_VM		3
d79 2
a80 2
#define	spltty()		_splraise(PSL_S | PSL_IPL3)
#define	splvm()			_splraise(PSL_S | PSL_IPL3)
@


1.15
log
@switch m68k to __HAVE_CPUINFO

help miod@@, art@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.14 2006/06/11 20:46:50 miod Exp $	*/
d69 1
@


1.14
log
@Factorize spl handling functions and software interrupt routines between
m68k-based platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.13 2006/03/12 03:28:28 brad Exp $	*/
d83 1
@


1.13
log
@remove splimp().
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.12 2005/05/01 09:55:49 miod Exp $	*/
d32 2
d37 1
a37 1
 * simulated software interrupt register
d39 4
a42 1
extern unsigned char ssir;
d44 4
a47 2
#define SIR_NET		0x1
#define SIR_CLOCK	0x2
d49 5
a53 34
#define setsoftint(x)	ssir |= (x)
#define setsoftnet()	ssir |= SIR_NET
#define setsoftclock()	ssir |= SIR_CLOCK
u_long	allocate_sir(void (*proc)(void *), void *arg);

#define _spl(s) \
({ \
	register int _spl_r; \
\
	__asm __volatile ("clrl %0; movew sr,%0; movew %1,sr" : \
		"=&d" (_spl_r) : "di" (s)); \
	_spl_r; \
})

#define	_splraise(s)							\
({									\
	int _spl_r;							\
									\
	__asm __volatile ("						\
		clrl	d0					;	\
		movw	sr,d0					;	\
		movl	d0,%0					;	\
		andw	#0x700,d0				;	\
		movw	%1,d1					;	\
		andw	#0x700,d1				;	\
		cmpw	d0,d1					;	\
		jle	1f					;	\
		movw	%1,sr					;	\
	    1:"							:	\
		    "=&d" (_spl_r)				:	\
		    "di" (s)					:	\
		    "d0", "d1");					\
	_spl_r;								\
})
d89 1
@


1.12
log
@Bring raise-only semantics to splsoft* on m68k and m88k, as done elsewhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.11 2005/04/19 15:29:47 mickey Exp $	*/
a99 1
#define	splimp()		_splraise(PSL_S | PSL_IPL3)
@


1.11
log
@nothing uses spllowersoftclock() anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.10 2004/01/11 23:51:49 miod Exp $	*/
a76 9
/* spl0 requires checking for software interrupts */
#define	spl1()	_spl(PSL_S|PSL_IPL1)
#define	spl2()	_spl(PSL_S|PSL_IPL2)
#define	spl3()	_spl(PSL_S|PSL_IPL3)
#define	spl4()	_spl(PSL_S|PSL_IPL4)
#define	spl5()	_spl(PSL_S|PSL_IPL5)
#define	spl6()	_spl(PSL_S|PSL_IPL6)
#define	spl7()	_spl(PSL_S|PSL_IPL7)

d95 11
a105 10
#define	splsoftclock()		spl1()
#define	splsoftnet()		spl1()
#define	splbio()		_splraise(PSL_S|PSL_IPL2)
#define	splnet()		_splraise(PSL_S|PSL_IPL3)
#define	splimp()		_splraise(PSL_S|PSL_IPL3)
#define	spltty()		_splraise(PSL_S|PSL_IPL3)
#define	splvm()			splimp()
#define	splclock()		_splraise(PSL_S|PSL_IPL5)
#define	splstatclock()		_splraise(PSL_S|PSL_IPL5)
#define	splhigh()		spl7()
d108 1
a108 1
#define	splx(s)		(s & PSL_IPL ? _spl(s) : spl0())
@


1.10
log
@Implement and use splraise() rather than spl() whenever necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.9 2003/01/05 01:51:27 miod Exp $	*/
a103 1
#define	spllowersoftclock()	spl1()
@


1.9
log
@splassert on m68k-based arches. Not totally accurate on hp300 at the moment,
still.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.8 2002/04/29 07:35:20 miod Exp $	*/
d56 21
d107 7
a113 7
#define	splbio()		spl2()
#define	splnet()		spl3()
#define	splimp()		spl3()
#define	spltty()		spl3()
#define	splvm()			spl3()
#define	splclock()		spl5()
#define	splstatclock()		spl5()
@


1.8
log
@Define placeholders for art's splassert() debugging stuff on all arches.
Currently as no-ops everywhere.

ok art@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.7 2002/04/27 23:21:05 miod Exp $	*/
a46 3
/* SPL asserts */
#define	splassert(wantipl)	/* nothing */

d64 18
@


1.7
log
@Jumbo commit to fix all compilation warnings on mvme68k (add prototypes,
add casts, fix a few errors and typos in the process, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.6 2002/03/14 03:15:56 millert Exp $	*/
d46 3
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.5 2002/03/14 01:26:37 millert Exp $	*/
d45 1
a45 1
u_long	allocate_sir(void (*proc)(), void *arg);
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2001/11/23 00:47:46 miod Exp $	*/
d45 1
a45 1
u_long	allocate_sir __P((void (*proc)(), void *arg));
@


1.4
log
@Remove splsched() declaration and related stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 2001/06/24 17:05:37 miod Exp $	*/
d81 1
a81 1
int	spl0 __P((void));
@


1.4.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2001/11/23 00:47:46 miod Exp $	*/
d45 1
a45 4
u_long	allocate_sir(void (*proc)(void *), void *arg);

/* SPL asserts */
#define	splassert(wantipl)	/* nothing */
d81 1
a81 1
int	spl0(void);
@


1.4.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 3
a66 18

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *      - properly order ISRs in the list for that CPU ipl
 *      - compute CPU PSL values for the spl*() calls.
 */
#define IPL_NONE	0
#define IPL_SOFTNET	1
#define IPL_SOFTCLOCK	1
#define IPL_BIO		2
#define IPL_NET		3
#define IPL_TTY		3
#define IPL_CLOCK	5
#define IPL_STATCLOCK	5
#define IPL_HIGH	7
@


1.3
log
@Define splvm() for arches who don't already provide it, with the same
definition as splimp().
art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 2000/07/06 15:25:04 ho Exp $	*/
a75 1
#define	splsched()		spl7()
@


1.2
log
@Add spllowersoftclock(), same as splsoftclock(). (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 2000/01/06 03:27:00 smurph Exp $	*/
d72 1
@


1.1
log
@Fix for IP v.6
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.0 1999/06/11 04:48:11 smurph Exp $	*/
d65 11
a75 10
#define	splsoftclock()	spl1()
#define	splsoftnet()	spl1()
#define	splbio()	spl2()
#define	splnet()	spl3()
#define	splimp()	spl3()
#define	spltty()	spl3()
#define	splclock()	spl5()
#define	splstatclock()	spl5()
#define	splhigh()	spl7()
#define	splsched()	spl7()
@


1.1.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 2000/07/06 15:25:04 ho Exp $	*/
d65 10
a74 11
#define	spllowersoftclock()	spl1()
#define	splsoftclock()		spl1()
#define	splsoftnet()		spl1()
#define	splbio()		spl2()
#define	splnet()		spl3()
#define	splimp()		spl3()
#define	spltty()		spl3()
#define	splclock()		spl5()
#define	splstatclock()		spl5()
#define	splhigh()		spl7()
#define	splsched()		spl7()
@


1.1.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1.2.1 2001/04/18 16:10:36 niklas Exp $	*/
a71 1
#define	splvm()			spl3()
@


1.1.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1.2.2 2001/07/04 10:19:31 niklas Exp $	*/
d76 1
@


1.1.2.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
u_long	allocate_sir(void (*proc)(), void *arg);
d81 1
a81 1
int	spl0(void);
@


1.1.2.5
log
@Sync the SMP branch with 3.3
@
text
@d45 1
a45 1
u_long	allocate_sir(void (*proc)(void *), void *arg);
a63 18

/*
 * Interrupt "levels".  These are a more abstract representation
 * of interrupt levels, and do not have the same meaning as m68k
 * CPU interrupt levels.  They serve two purposes:
 *
 *      - properly order ISRs in the list for that CPU ipl
 *      - compute CPU PSL values for the spl*() calls.
 */
#define IPL_NONE	0
#define IPL_SOFTNET	1
#define IPL_SOFTCLOCK	1
#define IPL_BIO		2
#define IPL_NET		3
#define IPL_TTY		3
#define IPL_CLOCK	5
#define IPL_STATCLOCK	5
#define IPL_HIGH	7
@


1.1.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a55 21
#define	_splraise(s)							\
({									\
	int _spl_r;							\
									\
	__asm __volatile ("						\
		clrl	d0					;	\
		movw	sr,d0					;	\
		movl	d0,%0					;	\
		andw	#0x700,d0				;	\
		movw	%1,d1					;	\
		andw	#0x700,d1				;	\
		cmpw	d0,d1					;	\
		jle	1f					;	\
		movw	%1,sr					;	\
	    1:"							:	\
		    "=&d" (_spl_r)				:	\
		    "di" (s)					:	\
		    "d0", "d1");					\
	_spl_r;								\
})

d86 7
a92 7
#define	splbio()		_splraise(PSL_S|PSL_IPL2)
#define	splnet()		_splraise(PSL_S|PSL_IPL3)
#define	splimp()		_splraise(PSL_S|PSL_IPL3)
#define	spltty()		_splraise(PSL_S|PSL_IPL3)
#define	splvm()			splimp()
#define	splclock()		_splraise(PSL_S|PSL_IPL5)
#define	splstatclock()		_splraise(PSL_S|PSL_IPL5)
@


