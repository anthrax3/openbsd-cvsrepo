head	1.2;
access;
symbols
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	UBC_SYNC_A:1.2
	UBC_SYNC_B:1.2
	OPENBSD_2_8:1.1.1.1.0.16
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	SMP:1.1.1.1.0.12
	SMP_BASE:1.1.1.1
	kame_19991208:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	gingold_1:1.1.1.1
	gingold:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.02.07.07.46.26;	author art;	state dead;
branches;
next	1.1;

1.1
date	97.10.14.07.25.31;	author gingold;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.10.14.07.25.31;	author gingold;	state Exp;
branches
	1.1.1.1.12.1;
next	;

1.1.1.1.12.1
date	2001.04.18.16.09.49;	author niklas;	state dead;
branches;
next	;


desc
@@


1.2
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@
/*
 * The easiest way to deal with the need for DVMA mappings is
 * to just map the first four megabytes of RAM into DVMA space.
 * That way, dvma_mapin can just compute the DVMA alias address,
 * and dvma_mapout does nothing.
 */

#include <sys/param.h>

#define	DVMA_BASE 0x00000000
#define	DVMA_MASK 0x00ffFFff
#define DVMA_MAPLEN 0x400000	/* 4 MB */

void
dvma_init()
{
#if 0
	int segva, sme;

	for (segva = 0; segva < DVMA_MAPLEN; segva += NBSG) {
		sme = get_segmap(segva);
		set_segmap((DVMA_BASE | segva), sme);
	}
#endif
}

/* Convert a local address to a DVMA address. */
char *
dvma_mapin(char *addr, int len)
{
	int va = (int)addr;

	va |= DVMA_BASE;
	return ((char *) va);
}

/* Convert a DVMA address to a local address. */
char *
dvma_mapout(char *dmabuf, int len)
{
	if (dmabuf < (char*)DVMA_BASE)
		panic("dvma_mapout");
	return (dmabuf - DVMA_BASE);
}

extern char *alloc(int len);
char *
dvma_alloc(int len)
{
	char *mem;

	mem = alloc(len);
	if (!mem)
		return(mem);
	return(dvma_mapin(mem, len));
}

extern void free(void *ptr, int len);
void
dvma_free(char *dvma, int len)
{
	char *mem;

	mem = dvma_mapout(dvma, len);
	if (mem)
		free(mem, len);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Gingold's port for kbus Series5 machine.  Not fully finished and not very stable
@
text
@@


1.1.1.1.12.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@@

