head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2015.12.01.07.50.03;	author deraadt;	state dead;
branches;
next	1.3;
commitid	Rh8AZFtVMVCiwPts;

1.3
date	2013.10.07.19.11.39;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.24.18.46.51;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.21.19.33.45;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: rtc_clock.c,v 1.3 2013/10/07 19:11:39 miod Exp $	*/

/*
 * Copyright (c) 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Clock routines using a freerunning RTC counter (models 530/4600)
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/timetc.h>

#include <machine/board.h>
#include <machine/avcommon.h>
#include <machine/av530.h>

#include <aviion/dev/sysconvar.h>

struct intrhand rtc_clock_ih;

int	rtc_clockintr(void *);
u_int	rtc_get_timecount(struct timecounter *);

struct timecounter rtc_timecounter = {
	.tc_get_timecount = rtc_get_timecount,
	.tc_counter_mask = 0xffffffff,
	.tc_name = "rtc",
	.tc_quality = 0
};

uint32_t pit_step;

void
rtc_init_clocks()
{
	uint rtc_speed, pit_interval;

#ifdef DIAGNOSTIC
	if (1000000 % hz) {
		printf("cannot get %d Hz clock; using 100 Hz\n", hz);
		hz = 100;
	}
#endif
	tick = 1000000 / hz;

	profhz = stathz = 0;

	/*
	 * According to the documentation, all systems of this family run
	 * at 33MHz.
	 */
	rtc_speed = 33333333 / 2;	/* apparently RTC runs at half CPUCLK */

	/*
	 * RTC is free running; we can get a periodic interrupt at any
	 * multiple of 0x100 RTC ticks. We use PIT0 for this purpose.
	 * Therefore to get a proper system clock, we need an interrupt
	 * every (rtc_speed / hz) ticks, rounded down.
	 * With hz being 100, this won't be an exact 100Hz clock, but the
	 * timecounter code will make sure time is kept accurately.
	 */

	/* disable and reset all counters */
	*(volatile uint32_t *)AV530_PIT_CMD_ALL = AV530_PIT_RESET;
	/* setup countdown interrupt threshold */
	pit_interval = rtc_speed / hz;
	pit_step = 0xffffff00 & (-pit_interval);
	*(volatile uint32_t *)AV530_PIT0_CNT = pit_step;
	/* start timer */
	*(volatile uint32_t *)AV530_PIT0_CS = AV530_PIT_CTEN;

	rtc_clock_ih.ih_fn = rtc_clockintr;
	rtc_clock_ih.ih_arg = 0;
	rtc_clock_ih.ih_flags = INTR_WANTFRAME;
	rtc_clock_ih.ih_ipl = IPL_CLOCK;
	sysconintr_establish(INTSRC_CLOCK, &rtc_clock_ih, "clock");

	rtc_timecounter.tc_frequency = rtc_speed;
	tc_init(&rtc_timecounter);
}

int
rtc_clockintr(void *frame)
{
	/*
	 * Not only does the PIT stop upon overflow (requiring us to
	 * rearm it after acknowledging the interrupt), but also the
	 * comparison value is lost and needs to be setup again.
	 */
	*(volatile uint32_t *)AV530_PIT0_CS = AV530_PIT_IACK | AV530_PIT_RESET;
	*(volatile uint32_t *)AV530_PIT0_CNT = pit_step;
	*(volatile uint32_t *)AV530_PIT0_CS = AV530_PIT_CTEN;
	hardclock(frame);

#ifdef MULTIPROCESSOR
	/*
	 * Send an IPI to all other processors, so they can get their
	 * own ticks.
	 */
	m88k_broadcast_ipi(CI_IPI_HARDCLOCK);
#endif

	return 1;
}

u_int
rtc_get_timecount(struct timecounter *tc)
{
	return *(volatile uint32_t *)AV530_RTC_CNT;
}
@


1.3
log
@Have platform->bootstrap() return the machine speed in MHz, which is used to
set up the delay constant.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc_clock.c,v 1.2 2010/04/24 18:46:51 miod Exp $	*/
@


1.2
log
@SMP support for models 4600 and 530, adapted from the MVME188 code. Models
4000 and 4300 will need more work, because they don't have as many distinct
software interrupt sources as required by this implementation, so a
different IPI scheme will be necessary.

Tested on dual-processor 4625 (AV530 family) and single processor 4300
(AV400 family).
@
text
@d1 1
a1 1
/*	$OpenBSD: rtc_clock.c,v 1.1 2010/04/21 19:33:45 miod Exp $	*/
a33 2
extern u_int aviion_delay_const;

d64 2
a65 5
	 * According to the documentation, systems of this family run
	 * at 33MHz; however other sources seem to imply model 530
	 * runs at 25Mhz only.
	 * If this turns out to be the case, proper calibration of the
	 * system clock will be necessary.
a66 1
	aviion_delay_const = 33;
@


1.1
log
@More reworking of interrupt handling and VME support, and rename various
board-specific defines to prevent any risk of collision. This also adds
clock support for AV530 family, and timecounter support (cio code sync'ed
with mvme88k). And various bugs fixed in the process.

This is enough to get models 4600 and 530 to run multiuser with a Hawk
Ethernet VME card (the onboard Ethernet is not supported yet, coming soon).
There is no way to share a disk with DG/UX yet, the kernel (and fdisk(8))
needs to become aware of its ways.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 8
@

