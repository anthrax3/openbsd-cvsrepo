head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	AV400_20060509:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2015.12.01.07.50.03;	author deraadt;	state dead;
branches;
next	1.9;
commitid	Rh8AZFtVMVCiwPts;

1.9
date	2014.09.21.16.20.16;	author miod;	state Exp;
branches;
next	1.8;
commitid	f8j8pWoCv9a2ccPO;

1.8
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.25.21.02.51;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.18.22.04.37;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.21.23.56.53;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.13.18.51.01;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.15.21.24.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.21.12.22.01;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.05.21.03.17;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.05.05.21.03.17;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: eh.S,v 1.9 2014/09/21 16:20:16 miod Exp $	*/
/*
 * Copyright (c) 2006, 2010 Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <machine/m8820x.h>

/*
 * Save Pbus fault status register from data and inst CMMU.
 */

#define	PFSR_SAVE \
	NOP;	/* will be changed to	br.n pfsr_handler + 4 */ \
	NOP	/* will be changed to	 first instruction of pfsr_handler */

#include <m88k/m88k/eh_common.S>

ENTRY(pfsr_double)
	/*
	 * 4 CMMUs per CPU. Almost as simple as the 2 CMMUs per CPU
	 * situation...
	 *
	 * However, to be sure we don't get fooled with already-processed
	 * exceptions, we have to reset the fault status registers
	 * after reading them.
	 */
	ld	TMP2, TMP,  CI_PFSR_I0
	ld	TMP3, TMP2, %r0
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 1f
	st	%r0,  TMP2, %r0
	ld	TMP2, TMP,  CI_PFSR_I1
1:
	ld	TMP3, TMP2, %r0
	st	%r0,  TMP2, %r0
	st	TMP3, %r31, EF_IPFSR

	ld	TMP2, TMP,  CI_PFSR_D0
	ld	TMP3, TMP2, %r0
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 2f
	st	%r0,  TMP2, %r0
	ld	TMP2, TMP,  CI_PFSR_D1
2:
	ld	TMP3, TMP2, %r0
	st	%r0,  TMP2, %r0
	br.n	_ASM_LABEL(pfsr_done)
	 st	TMP3, %r31, EF_DPFSR

ENTRY(pfsr_straight)
	/*
	 * We have the simple 2 CMMUs per CPU mapping. Pick our couple;
	 * note that, at least on AV530 family systems, unlike other
	 * MVME188-derived designs, we *do* need to reset fault status
	 * registers after reading them.
	 */
	ld	TMP2, TMP,  CI_PFSR_I0
	ld	TMP3, TMP2, %r0
	st	%r0,  TMP2, %r0
	st	TMP3, %r31, EF_IPFSR

	ld	TMP2, TMP,  CI_PFSR_D0
	ld	TMP3, TMP2, %r0
	st	%r0,  TMP2, %r0
	br.n	_ASM_LABEL(pfsr_done)
	 st	TMP3, %r31, EF_DPFSR

ENTRY(pfsr_six)
	/*
	 * 6 CMMU (2D4I) per CPU - this is the worst situation.
	 * We handle the instruction CMMU relying upon them being set up
	 * every 0x1000 bytes in the address space. Data CMMU can use
	 * the per-cpu_info pfsr pointers as usual.
	 */
	ld	TMP2, TMP,  CI_PFSR_I0
	ld	TMP3, TMP2, %r0
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 1f

	addu	TMP2, TMP2, 0x1000	/* I1 */
	ld	TMP3, TMP2, %r0
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 1f

	addu	TMP2, TMP2, 0x1000	/* I2 */
	ld	TMP3, TMP2, %r0
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 1f

	addu	TMP2, TMP2, 0x1000	/* I3 */
1:
	ld	TMP3, TMP2, %r0
	st	%r0,  TMP2, %r0
	st	TMP3, %r31, EF_IPFSR

	ld	TMP2, TMP,  CI_PFSR_D0
	ld	TMP3, TMP2, %r0
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 2f
	addu	TMP2, TMP2, 0x1000	/* D1 */
2:
	ld	TMP3, TMP2, %r0
	st	%r0,  TMP2, %r0
	br.n	_ASM_LABEL(pfsr_done)
	 st	TMP3, %r31, EF_DPFSR
@


1.9
log
@Reset fault status registers to zero after reading them, even in the 2:1
CMMU-to-CPU ratio case. This is necessary at least on the AV530 family.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.8 2013/01/05 11:20:55 miod Exp $	*/
@


1.8
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.7 2010/04/25 21:02:51 miod Exp $	*/
d74 3
a76 1
	 * no need to reset fault status registers in this case.
d80 1
d82 1
d85 1
@


1.7
log
@Simplify the 6:1 pfsr extraction block: process data CMMU first, and do not
bother zeroing fault registers of CMMU which did not report faults.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.6 2010/04/18 22:04:37 miod Exp $	*/
d49 1
a49 1
	ld	TMP3, TMP2, r0
d52 1
a52 1
	st	r0,   TMP2, r0
d55 3
a57 3
	ld	TMP3, TMP2, r0
	st	r0,   TMP2, r0
	st	TMP3, r31,  EF_IPFSR
d60 1
a60 1
	ld	TMP3, TMP2, r0
d63 1
a63 1
	st	r0,   TMP2, r0
d66 2
a67 2
	ld	TMP3, TMP2, r0
	st	r0,   TMP2, r0
d69 1
a69 1
	 st	TMP3, r31,  EF_DPFSR
d77 2
a78 2
	ld	TMP3, TMP2, r0
	st	TMP3, r31,  EF_IPFSR
d80 1
a80 1
	ld	TMP3, TMP2, r0
d82 1
a82 1
	 st	TMP3, r31,  EF_DPFSR
d92 1
a92 1
	ld	TMP3, TMP2, r0
d97 1
a97 1
	ld	TMP3, TMP2, r0
d102 1
a102 1
	ld	TMP3, TMP2, r0
d108 3
a110 3
	ld	TMP3, TMP2, r0
	st	r0,   TMP2, r0
	st	TMP3, r31,  EF_IPFSR
d113 1
a113 1
	ld	TMP3, TMP2, r0
d118 2
a119 2
	ld	TMP3, TMP2, r0
	st	r0,   TMP2, r0
d121 1
a121 1
	 st	TMP3, r31,  EF_DPFSR
@


1.6
log
@Work in progress support for AViiON models 4600 and 530.
Also features support for {awkw,bast}ard 6:1 CMMU:CPU configurations (4I2D).
Tested on model 4605, which runs up to cpu_initclocks(), which is not written
for this system family yet. No regression on model 4300.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.5 2007/12/21 23:56:53 miod Exp $	*/
d86 4
a89 5
	 * 6 CMMU (2D4I) per CPU.
	 * This is the worst situation. We handle the data CMMU first,
	 * using the cpu_info pointers; and then the instruction CMMU,
	 * relying upon them being set up every 0x1000 bytes in the
	 * address space.
d91 1
a91 1
	ld	TMP2, TMP,  CI_PFSR_D0
d95 2
a96 3
	st	r0,   TMP2, r0
	ld	TMP2, TMP,  CI_PFSR_D1
1:
d98 2
a99 2
	st	r0,   TMP2, r0
	st	TMP3, r31,  EF_DPFSR
d101 1
a101 1
	ld	TMP2, TMP,  CI_PFSR_I0
d104 1
a104 2
	bcnd	ne0,  TMP3, 2f
	st	r0,   TMP2, r0
d106 2
a107 1
	addu	TMP2, TMP2, 0x1000	/* I1 */
a108 2
	extu	TMP3, TMP3, 3<16>
	bcnd	ne0,  TMP3, 2f
d110 1
d112 1
a112 1
	addu	TMP2, TMP2, 0x1000	/* I2 */
d116 1
a116 3
	st	r0,   TMP2, r0

	addu	TMP2, TMP2, 0x1000	/* I3 */
d121 1
a121 1
	 st	TMP3, r31,  EF_IPFSR
@


1.5
log
@Change the EF_xxx constants to be real offsets within the trapframe, instead
of offsets / sizeof(register_t), and nuke the REG_OFF macro. No functional
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.4 2007/12/13 18:51:01 miod Exp $	*/
d3 1
a3 1
 * Copyright (c) 2006, Miodrag Vallat
d39 1
a39 1
ENTRY(pfsr_av400_double)
d71 1
a71 1
ENTRY(pfsr_av400_straight)
d83 44
@


1.4
log
@Sync with the mvme188 codebase, various tweaks from the last 18 months which
had not been reported to aviion.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.3 2007/11/15 21:24:44 miod Exp $	*/
d57 1
a57 1
	st	TMP3, r31,  REG_OFF(EF_IPFSR)
d69 1
a69 1
	 st	TMP3, r31,  REG_OFF(EF_DPFSR)
d78 1
a78 1
	st	TMP3, r31,  REG_OFF(EF_IPFSR)
d82 1
a82 1
	 st	TMP3, r31,  REG_OFF(EF_DPFSR)
@


1.3
log
@At last, port the mvme88k eh.S r1.66 fixes to aviion.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.2 2006/05/21 12:22:01 miod Exp $	*/
d34 2
a35 2
	br.n	_ASM_LABEL(pfsr_av400); \
	 or.u	TMP2, r0,   hi16(_C_LABEL(cmmu_shift))
d39 1
a39 11
	text

ASLOCAL(pfsr_av400)
#if 0	/* done in delay slot from PFSR_SAVE */
	or.u	TMP2, r0,   hi16(_C_LABEL(cmmu_shift))
#endif
	ld	TMP2, TMP2, lo16(_C_LABEL(cmmu_shift))
	cmp	TMP3, TMP2, 2
	bb1	lt,   TMP2, _ASM_LABEL(pfsr_av400_straight)

ASLOCAL(pfsr_av400_double)
a47 1

d71 1
a71 1
ASLOCAL(pfsr_av400_straight)
@


1.2
log
@Move common definitions shared by the various 88100-based designs to their
own header file, and slowly make most of the code board-independent. No
functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: eh.S,v 1.1.1.1 2006/05/05 21:03:17 miod Exp $	*/
d60 4
a63 4
	ld	TMP2, TMP2, r0
	extu	TMP3, TMP2, 3<16>
	bcnd.n	ne0,  TMP3, 1f
	 st	r0,   TMP2, r0
d65 2
a66 1
	ld	TMP2, TMP2, r0
d68 1
a68 2
1:
	st	TMP2, r31,  REG_OFF(EF_IPFSR)
d71 4
a74 4
	ld	TMP2, TMP2, r0
	extu	TMP3, TMP2, 3<16>
	bcnd.n	ne0,  TMP3, 2f
	 st	r0,   TMP2, r0
d76 2
a77 1
	ld	TMP2, TMP2, r0
a78 1
2:
d80 1
a80 1
	 st	TMP2, r31,  REG_OFF(EF_DPFSR)
@


1.1
log
@Enter OpenBSD/aviion, a port to the m88k-based Data General AViiON workstations. Currently restricted to diskless serial console, tested on AV410 only; many thanks to Chris Tribo for documentation and testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 1
#include <machine/av400.h>
@


1.1.1.1
log
@Oops, correct import this time.
@
text
@@
