head	1.18;
access;
symbols
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.13.0.8
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	AV400_20060509:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.12.01.07.50.03;	author deraadt;	state dead;
branches;
next	1.17;
commitid	Rh8AZFtVMVCiwPts;

1.17
date	2015.04.25.21.15.08;	author miod;	state Exp;
branches;
next	1.16;
commitid	IlXCrCOwBzeeoj9x;

1.16
date	2013.10.10.21.24.58;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2013.10.09.21.28.33;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2013.09.24.20.14.33;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.10.09.17.01.32;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.11.18.21.13.19;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.18.15.05.26;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.26.20.17.27;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.15.20.39.51;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.21.04.35.54;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.12.20.36.40;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.21.22.05.18;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.15.01.19.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.01.19.25.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.04.19.30.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.04.03.44.44;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.08.16.26.21;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.05.08.16.26.21;	author miod;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: autoconf.c,v 1.17 2015/04/25 21:15:08 miod Exp $	*/
/*
 * Copyright (c) 1998 Steve Murphree, Jr.
 * Copyright (c) 1996 Nivas Madhur
 * Copyright (c) 1994 Christian E. Hopps
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christian E. Hopps.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/reboot.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/kernel.h>

#include <machine/asm_macro.h>
#include <machine/autoconf.h>
#include <machine/board.h>
#include <machine/cpu.h>
#include <machine/prom.h>

#ifdef AV530
#include <machine/av530.h>
#endif

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/cons.h>

#include "sd.h"
#include "st.h"

/*
 * The following several variables are related to
 * the configuration process, and are used in initializing
 * the machine.
 */

void	dumpconf(void);

int cold = 1;   /* 1 if still booting */

static struct device *bootctrl;		/* boot controller */
static struct device *bootdv;		/* boot device (if found) */
u_int bootdev = 0;			/* set in locore.S, can't be in .bss */
u_int bootunit = 0;			/* set in locore.S, can't be in .bss */
u_int bootlun = 0;			/* set in locore.S, can't be in .bss */
u_int bootpart = 0;			/* set in locore.S, can't be in .bss */
static uint32_t bootdevtype;		/* boot controller SCM name */
static paddr_t bootctrlpaddr;		/* boot controller address */

/*
 * called at boot time, configure all devices on the system.
 */
void
cpu_configure()
{
	printf("bootpath: '%s' dev %u unit %u lun %u\n",
	    bootargs, bootdev, bootunit, bootlun);

	softintr_init();

	if (config_rootfound("mainbus", "mainbus") == 0)
		panic("no mainbus found");

	/* NO PROM CALLS FROM NOW ON */

	cold = 0;

	/*
	 * Turn external interrupts on.
	 */
	set_psr(get_psr() & ~PSR_IND);
	spl0();
}

void
diskconf(void)
{
	printf("boot device: %s\n",
	    (bootdv) ? bootdv->dv_xname : "<unknown>");

	setroot(bootdv, bootpart, RB_USERREQ);
	dumpconf();

}

/*
 * Parse the commandline.
 *
 * This has two goals: first, turn the necessary options into boothowto
 * flags; second, convert the PROM boot device into the matching OpenBSD
 * driver name.
 */

/* skip end of token and whitespace */
static char *stws(char *);
static char *
stws(char *p)
{
	while (*p != ' ' && *p != '\0')
		p++;

	while (*p == ' ')
		p++;

	return (p);
}

/* parse a positive base 10 number */
static u_int strtoi(const char *);
static u_int
strtoi(const char *s)
{
	int c;
	u_int val = 0;

	if (s == NULL || *s == '\0')
		return 0;

	/* skip whitespace */
	do {
		c = *s++;
	} while (c == ' ' || c == '\t');

	for (;;) {
		if (c < '0' || c > '9')
			break;
		val *= 10;
		val += c - '0';
		c = *s++;
	}

	return val;
}

void
cmdline_parse(void)
{
	char *p;

	/*
	 * If the boot commandline has been manually entered, it
	 * may end with a '\r' character.
	 */
	for (p = bootargs; *p != '\0'; p++)
		;
	if (p != bootargs)
		if (*--p == '\r')
			*p = '\0';

	/*
	 * Skip boot device ``foo(ctrl,dev,lun)'' and filename,
	 * i.e. eat everything until whitespace.
	 */
	p = stws(bootargs);
	while (*p != '\0') {
		if (*p++ == '-')
			while (*p != ' ' && *p != '\0')
				switch (*p++) {
				case 'a':
					boothowto |= RB_ASKNAME;
					break;
				case 'b':
					boothowto |= RB_KDB;
					break;
				case 'c':
					boothowto |= RB_CONFIG;
					break;
				case 's':
					boothowto |= RB_SINGLE;
					break;
				}
		p = stws(p);
	}

	/*
	 * Now parse the boot device. We are only interested in the
	 * device type, since the PROM has cracked the controller, unit
	 * and partition numbers for us already, and we do not care about
	 * our own filename...
	 *
	 * However, in the sd() or st() cases, we need to figure out the
	 * SCSI controller name (if not the default one) and address, if
	 * provided.
	 *
	 * Note that we will override bootdev at this point. If no boot
	 * controller number or address was provided, bootdev will be set
	 * to zero anyway.
	 */
	if (memcmp(bootargs, "sd", 2) == 0 ||
	    memcmp(bootargs, "st", 2) == 0) {
		/*
		 * Either
		 *   sd(bootdev,bootunit,bootlun)
		 * or
		 *   sd(ctrl(bootdev,id),bootunit,bootlun)
		 * We already know bootdev, bootunit and bootlun.
		 * All we need here is to figure out the controller type
		 * and address.
		 */
		if (bootargs[7] == '(') {
			bcopy(bootargs + 3, &bootdevtype, sizeof(uint32_t));
			bootdev = strtoi(bootargs + 8);
		}
	} else {
		bcopy(bootargs, &bootdevtype, sizeof(int));
		bootdev = strtoi(bootargs + 5);
	}

	/* fill the holes */
	bootctrlpaddr = platform->get_boot_device(&bootdevtype, bootdev);
}

void
device_register(struct device *dev, void *aux)
{
	struct confargs *ca = (struct confargs *)aux;
	struct cfdriver *cf = dev->dv_cfdata->cf_driver;
	struct device *parent = dev->dv_parent;

	if (bootdv != NULL)
		return;

	if (bootctrl == NULL) {
		if (ca->ca_paddr != bootctrlpaddr)
			return;

		switch (bootdevtype) {
		case SCM_INEN:
		case SCM_DGEN:
			if (strcmp("le", cf->cd_name) == 0 &&
			    strcmp("syscon",
			      parent->dv_cfdata->cf_driver->cd_name) == 0)
				bootctrl = dev;
			break;

		case SCM_INSC:
			if (strcmp("oaic", cf->cd_name) == 0 &&
			    strcmp("syscon",
			      parent->dv_cfdata->cf_driver->cd_name) == 0)
				bootctrl = dev;
			break;

		case SCM_NCSC:
			if (strcmp("oosiop", cf->cd_name) == 0 &&
			    strcmp("syscon",
			      parent->dv_cfdata->cf_driver->cd_name) == 0)
				bootctrl = dev;
			break;
		}

		if (bootctrl != NULL && bootctrl->dv_class == DV_IFNET)
			bootdv = bootctrl;
		return;
	}

	if (memcmp(cf->cd_name, bootargs, 2) == 0 &&
	    (strcmp("sd", cf->cd_name) == 0 ||
	     strcmp("st", cf->cd_name) == 0)) {
		struct scsi_attach_args *saa = aux;
		if (saa->sa_sc_link->target == bootunit &&
		    saa->sa_sc_link->lun == bootlun &&
		    parent->dv_parent == bootctrl)
			bootdv = dev;
	}
}

struct nam2blk nam2blk[] = {
	{ "sd",		4 },
	{ "cd", 	6 },
	{ "rd",		7 },
	{ "vnd",	8 },
	{ NULL,		-1 }
};
@


1.17
log
@Repair boot device detection when booting off the second SCSI controller on
AV530.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.16 2013/10/10 21:24:58 miod Exp $	*/
@


1.16
log
@Better boot device detection code. Board-specific code will now return the
address of a controller only know by its SCM name and number, and the boot
device detection code will now attempt to match the controller first, and
then grandchildren of it (if the boot device is a disk or a tape).
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.15 2013/10/09 21:28:33 miod Exp $	*/
d159 1
@


1.15
log
@Quick'n'dirty code to match trivial on-disk boot paths as the boot device.
Needs more work in order to cover all cases, but enough to get internal
disks on the first controller on models 4600 and 530 to get matched.

This makes the aviion port finally self-hosting on aforementioned models,
finally! Next step: bsd.rd...
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.14 2013/09/24 20:14:33 miod Exp $	*/
d47 1
a47 1
#include <machine/vmparam.h>
d71 8
a78 19
struct device *bootdv;	/* set by device drivers (if found) */

uint32_t bootdevtype;

/* cied */
#define	BT_CIEN		0x6369656e
/* cimd */
/* cird */
/* cisc */
#define	BT_DGEN		0x6467656e
#define	BT_DGSC		0x64677363
/* hada */
#define	BT_HKEN		0x686b656e
#define	BT_INEN		0x696e656e
#define	BT_INSC		0x696e7363
#define	BT_NCSC		0x6e637363
/* nvrd */
/* pefn */
/* vitr */
d86 2
a87 2
	printf("bootpath: '%s' dev %u unit %u part %u\n",
	    bootargs, bootdev, bootunit, bootpart);
d138 26
a167 1
	
d213 4
d220 14
a233 3
		bcopy(platform->default_boot, &bootdevtype, sizeof(uint32_t));
		/* search for a controller specification */
	} else
d235 5
d247 1
a250 2
/* SCSI -> match bootunit/bootpart as id:lun iff controller matches */
	switch (bootdevtype) {
d252 12
a263 3
	/*
	 * Network devices
	 */
d265 6
a270 35
	case BT_INEN:
		/*
		 * Internal LANCE Ethernet is le at syscon only, and we do not
		 * care about controller and unit numbers.
		 */
		if (strcmp("le", cf->cd_name) == 0 && strcmp("syscon",
		      dev->dv_parent->dv_cfdata->cf_driver->cd_name) == 0)
			bootdv = dev;
		break;
	case BT_DGEN:
		/*
		 * Internal ILACC Ethernet is le at syscon only, and need to
		 * match the controller address.
		 */
		if (strcmp("le", cf->cd_name) == 0 && strcmp("syscon",
		      dev->dv_parent->dv_cfdata->cf_driver->cd_name) == 0) {
			switch (cpuid) {
#ifdef AV530
			case AVIION_4600_530:
				if ((bootdev == 0 &&
				    ca->ca_paddr == AV530_LAN1) ||
				    (bootdev == 1 &&
				    ca->ca_paddr == AV530_LAN2))
					bootdv = dev;
				break;
#endif
			default:
				break;
			}
		}
		break;

	/*
	 * SCSI controllers
	 */
d272 5
a276 15
	case BT_NCSC:
		/*
		 * Internal 53C700 controller is oosiop at syscon only, and
		 * needs to match the controller address, as well as SCSI
		 * unit and lun numbers.
		 */
	    {
		struct scsi_attach_args *sa = aux;
		struct device *grandp;

		if (memcmp(cf->cd_name, bootargs, 2) != 0 ||
		    (strcmp("sd", cf->cd_name) != 0 &&
		     strcmp("st", cf->cd_name) != 0) ||
		    sa->sa_sc_link->target != bootunit ||
		    sa->sa_sc_link->lun != bootpart)
d278 1
d280 4
a283 7
		grandp = dev->dv_parent->dv_parent;
		if (strcmp("oosiop",
		    grandp->dv_cfdata->cf_driver->cd_name) == 0) {
			bootdv = dev;	/* XXX second controller */
		}
	    }
		break;
d285 8
a292 8
	case BT_INSC:
		/*
		 * Internal AIC-6250 controller is oaic at syscon only, and
		 * needs to match the controller address, as well as SCSI
		 * unit and lun numbers.
		 */
		/* XXX TBD */
		break;
@


1.14
log
@Extend le@@syscon to support the ILACC chips found on-board the AV530 family.
GENERIC.MP on a 2x88100(6:1)@@33 4605 can now make build on local disk and
local net; but it still needs to boot its kernel off the network at the
moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.13 2011/10/09 17:01:32 miod Exp $	*/
d58 3
d73 1
a73 1
u_int bootdevtype;
d75 1
d77 3
d81 2
d87 3
d153 1
d196 3
a198 4
	 * Actually we rely upon the fact that all device strings are
	 * exactly 4 characters long, and appears at the beginning of the
	 * commandline, so we can simply use its numerical value, as a
	 * word, to tell device types apart.
d200 6
a205 1
	bcopy(bootargs, &bootdevtype, sizeof(int));
d212 1
d216 6
a222 1
	switch (bootdevtype) {
d228 1
a228 2
		if (strcmp("le", dev->dv_cfdata->cf_driver->cd_name) == 0 &&
		    strcmp("syscon",
d237 1
a237 2
		if (strcmp("le", dev->dv_cfdata->cf_driver->cd_name) == 0 &&
		    strcmp("syscon",
d253 38
@


1.13
log
@Rework secondary processor initialization. cmmu initialization is now
performed much earlier in the processor startup.
No visible change, paves the way for the much important diff three commits
from here.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.12 2010/11/18 21:13:19 miod Exp $	*/
d45 1
d49 4
d194 2
d202 1
a202 1
		 * Internal ethernet is le at syscon only, and we do not
d209 23
@


1.12
log
@Do not #include <sys/dkstat.h> if you don't need anything from it.
ok krw@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.11 2010/04/18 15:05:26 miod Exp $	*/
d88 4
a96 1
	cold = 0;
@


1.11
log
@Allow for multiple options after a dash (getopt style).
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.10 2009/10/26 20:17:27 deraadt Exp $	*/
a36 1
#include <sys/dkstat.h>
@


1.10
log
@Do not do strncmp comparisons on dv_xname because longer device names which
look similar could arrive in the future.  Instead, compare directly against
dv_cfdata->cf_driver->cd_name
Issue originally spotted by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.9 2009/03/15 20:39:51 miod Exp $	*/
d116 1
d152 15
a166 14
			switch (*p) {
			case 'a':
				boothowto |= RB_ASKNAME;
				break;
			case 'b':
				boothowto |= RB_KDB;
				break;
			case 'c':
				boothowto |= RB_CONFIG;
				break;
			case 's':
				boothowto |= RB_SINGLE;
				break;
			}
d197 2
a198 1
		    strcmp("syscon", dev->dv_parent->dv_cfdata->cf_driver->cd_name) == 0)
@


1.9
log
@Generic softinterrupt support for m88k based platforms, adapted from arm
with different locking mechanism. 88110 soft ipi are replaced with an
ipi callback which is checked upon return from exception (it can not be kept
as a softintr, as the generic softinterrupt code doesn't have per-cpu
pending softintr queues).
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.8 2008/07/21 04:35:54 todd Exp $	*/
d194 2
a195 2
		if (strncmp("le", dev->dv_xname, 2) == 0 &&
		    strncmp("syscon", dev->dv_parent->dv_xname, 6) == 0)
@


1.8
log
@nam2blk[] needs a "vnd" entry for some things (like softraid)
ok marco@@ no objection miod@@ need this for regress djm@@ no objection krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.7 2007/12/12 20:36:40 miod Exp $	*/
d83 2
@


1.7
log
@Remove possible trailing \r from the PROM commandline arguments.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.6 2007/11/21 22:05:18 miod Exp $	*/
d203 1
@


1.6
log
@Use bcopy instead of assignment to avoid a possible misaligned access.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 2007/06/15 01:19:06 deraadt Exp $	*/
d131 10
@


1.5
log
@no need to include machine/disklabel.h when sys/disklabel.h is already
pulled in.
look at how doing it in one architecture gets that code copied to the
derivative architectures... amazing..
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.4 2007/06/01 19:25:09 deraadt Exp $	*/
d167 1
a167 1
	bootdevtype = *(int *)bootargs;
@


1.4
log
@some architectures called setroot() from cpu_configure(), *way* before some
subsystems were enabled.  others used a *md_diskconf -> diskconf() method to
make sure init_main could "do late setroot".  Change all architectures to
have diskconf(), use it directly & late.  tested by todd and myself on most
architectures, ok miod too
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.4 2007/06/01 19:20:46 deraadt Exp $	*/
a46 1
#include <machine/disklabel.h>
@


1.3
log
@make findblkmajor() and findblkname() MI; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.2 2007/05/04 03:44:44 deraadt Exp $	*/
d93 2
d96 3
a104 1
	cold = 0;
@


1.2
log
@setroot() was a ugly mix of MI and MD code, with different bugs on different
machines.  Instead -- build one solid clean MI version, and thenchange all
the architectures to use it.  ok various people, tested on almost all cases.
(it is a 10094 line diff..)
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.1.1.1 2006/05/08 16:26:21 miod Exp $	*/
d186 1
a186 4
static struct {
	char	*name;
	int	maj;
} nam2blk[] = {
d190 1
a191 23

int
findblkmajor(struct device *dv)
{
	char *name = dv->dv_xname;
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); i++)
		if (!strncmp(name, nam2blk[i].name, strlen(nam2blk[i].name)))
			return (nam2blk[i].maj);
	return (-1);
}

char *
findblkname(int maj)
{
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); i++)
		if (nam2blk[i].maj == maj)
			return (nam2blk[i].name);
	return (NULL);
}
@


1.1
log
@Enter OpenBSD/aviion, a port to the m88k-based Data General AViiON workstations. Currently restricted to diskless serial console, tested on AV410 only; many thanks to Chris Tribo for documentation and testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.33 2006/01/11 07:22:01 miod Exp $	*/
a61 4
int	findblkmajor(struct device *);
struct device *getdisk(char *, int, int, dev_t *);
struct device *parsedisk(char *, int, int, dev_t *);
void	setroot(void);
a93 117
	setroot();
	dumpconf();

	cold = 0;
}

struct nam2blk {
	char *name;
	int maj;
} nam2blk[] = {
	{ "sd",	4 },
	{ "cd", 6 },
	{ "rd",	7 },
};

int
findblkmajor(dv)
	struct device *dv;
{
	char *name = dv->dv_xname;
	int i;

	for (i = 0; i < sizeof(nam2blk)/sizeof(nam2blk[0]); ++i)
		if (strncmp(name, nam2blk[i].name, strlen(nam2blk[0].name)) == 0)
			return (nam2blk[i].maj);
	return (-1);
}

struct device *
getdisk(str, len, defpart, devp)
	char *str;
	int len, defpart;
	dev_t *devp;
{
	struct device *dv;

	if ((dv = parsedisk(str, len, defpart, devp)) == NULL) {
		printf("use one of:");
		TAILQ_FOREACH(dv, &alldevs, dv_list) {
			if (dv->dv_class == DV_DISK)
				printf(" %s[a-p]", dv->dv_xname);
#ifdef NFSCLIENT
			if (dv->dv_class == DV_IFNET)
				printf(" %s", dv->dv_xname);
#endif
		}
		printf("\n");
	}
	return (dv);
}

struct device *
parsedisk(str, len, defpart, devp)
	char *str;
	int len, defpart;
	dev_t *devp;
{
	struct device *dv;
	char *cp, c;
	int majdev, unit, part;

	if (len == 0)
		return (NULL);
	cp = str + len - 1;
	c = *cp;
	if (c >= 'a' && (c - 'a') < MAXPARTITIONS) {
		part = c - 'a';
		*cp = '\0';
	} else
		part = defpart;

	TAILQ_FOREACH(dv, &alldevs, dv_list) {
		if (dv->dv_class == DV_DISK &&
		    strcmp(str, dv->dv_xname) == 0) {
			majdev = findblkmajor(dv);
			unit = dv->dv_unit;
			if (majdev < 0)
				panic("parsedisk");
			*devp = MAKEDISKDEV(majdev, unit, part);
			break;
		}
#ifdef NFSCLIENT
		if (dv->dv_class == DV_IFNET &&
		    strcmp(str, dv->dv_xname) == 0) {
			*devp = NODEV;
			break;
		}
#endif
	}

	*cp = c;
	return (dv);
}

/*
 * Attempt to find the device from which we were booted.
 * If we can do so, and not instructed not to do so,
 * change rootdev to correspond to the load device.
 *
 * XXX Actually, swap and root must be on the same type of device,
 * (ie. DV_DISK or DV_IFNET) because of how (*mountroot) is written.
 * That should be fixed.
 */
void
setroot()
{
	struct swdevt *swp;
	struct device *dv;
	int len, majdev, unit;
	dev_t nrootdev, nswapdev = NODEV;
	char buf[128];
	dev_t temp;
#if defined(NFSCLIENT)
	extern char *nfsbootdevname;
#endif
	extern u_int bootpart;

d97 2
a98 6
	/*
	 * If 'swap generic' and we could not determine the boot device,
	 * ask the user.
	 */
	if (mountroot == NULL && bootdv == NULL)
		boothowto |= RB_ASKNAME;
d100 1
a100 150
	if (boothowto & RB_ASKNAME) {
		for (;;) {
			printf("root device ");
			if (bootdv != NULL)
				printf("(default %s%c)",
				    bootdv->dv_xname,
				    bootdv->dv_class == DV_DISK ? 'a' : ' ');
			printf(": ");
			len = getsn(buf, sizeof(buf));
			if (len == 0 && bootdv != NULL) {
				strlcpy(buf, bootdv->dv_xname, sizeof buf);
				len = strlen(buf);
			}
			if (len > 0 && buf[len - 1] == '*') {
				buf[--len] = '\0';
				dv = getdisk(buf, len, 1, &nrootdev);
				if (dv) {
					bootdv = dv;
					nswapdev = nrootdev;
					goto gotswap;
				}
			}
			dv = getdisk(buf, len, 0, &nrootdev);
			if (dv) {
				bootdv = dv;
				break;
			}
		}

		/*
		 * because swap must be on same device as root, for
		 * network devices this is easy.
		 */
		if (bootdv->dv_class == DV_IFNET) {
			goto gotswap;
		}
		for (;;) {
			printf("swap device ");
			if (bootdv != NULL)
				printf("(default %s%c)",
				    bootdv->dv_xname,
				    bootdv->dv_class == DV_DISK ? 'b' : ' ');
			printf(": ");
			len = getsn(buf, sizeof(buf));
			if (len == 0 && bootdv != NULL) {
				switch (bootdv->dv_class) {
				case DV_IFNET:
					nswapdev = NODEV;
					break;
				case DV_DISK:
					nswapdev = MAKEDISKDEV(major(nrootdev),
					    DISKUNIT(nrootdev), 1);
					break;
				case DV_TAPE:
				case DV_TTY:
				case DV_DULL:
				case DV_CPU:
					break;
				}
				break;
			}
			dv = getdisk(buf, len, 1, &nswapdev);
			if (dv) {
				if (dv->dv_class == DV_IFNET)
					nswapdev = NODEV;
				break;
			}
		}
gotswap:
		rootdev = nrootdev;
		dumpdev = nswapdev;
		swdevt[0].sw_dev = nswapdev;
		swdevt[1].sw_dev = NODEV;
	} else if (mountroot == NULL) {
		/*
		 * `swap generic': Use the device the ROM told us to use.
		 */
		if (bootdv == NULL)
			panic("boot device not known");

		majdev = findblkmajor(bootdv);
		if (majdev >= 0) {
			/*
			 * Root and swap are on a disk.
			 * val[2] of the boot device is the partition number.
			 * Assume swap is on partition b.
			 */
			unit = bootdv->dv_unit;
			rootdev = MAKEDISKDEV(majdev, unit, bootpart);
			nswapdev = dumpdev = MAKEDISKDEV(major(rootdev),
			    DISKUNIT(rootdev), 1);
		} else {
			/*
			 * Root and swap are on a net.
			 */
			nswapdev = dumpdev = NODEV;
		}
		swdevt[0].sw_dev = nswapdev;
		swdevt[1].sw_dev = NODEV;
	} else {
		/*
		 * `root DEV swap DEV': honour rootdev/swdevt.
		 * rootdev/swdevt/mountroot already properly set.
		 */
		return;
	}

	switch (bootdv->dv_class) {
#if defined(NFSCLIENT)
	case DV_IFNET:
		mountroot = nfs_mountroot;
		nfsbootdevname = bootdv->dv_xname;
		return;
#endif
#if defined(FFS)
	case DV_DISK:
		mountroot = dk_mountroot;
		majdev = major(rootdev);
		unit = DISKUNIT(rootdev);
		printf("root on %s%c\n", bootdv->dv_xname,
		    DISKPART(rootdev) + 'a');
		break;
#endif
	default:
		printf("can't figure root, hope your kernel is right\n");
		return;
	}

	/*
	 * Make the swap partition on the root drive the primary swap.
	 */
	temp = NODEV;
	for (swp = swdevt; swp->sw_dev != NODEV; swp++) {
		if (majdev == major(swp->sw_dev) &&
		    unit == DISKUNIT(swp->sw_dev)) {
			temp = swdevt[0].sw_dev;
			swdevt[0].sw_dev = swp->sw_dev;
			swp->sw_dev = temp;
			break;
		}
	}
	if (swp->sw_dev == NODEV)
		return;

	/*
	 * If dumpdev was the same as the old primary swap device, move
	 * it to the new primary swap device.
	 */
	if (temp == dumpdev)
		dumpdev = swdevt[0].sw_dev;
d184 32
@


1.1.1.1
log
@Oops, correct import this time.
@
text
@@
