head	1.52;
access;
symbols
	OPENBSD_5_8:1.51.0.6
	OPENBSD_5_8_BASE:1.51
	OPENBSD_5_7:1.51.0.2
	OPENBSD_5_7_BASE:1.51
	OPENBSD_5_6:1.47.0.4
	OPENBSD_5_6_BASE:1.47
	OPENBSD_5_5:1.44.0.4
	OPENBSD_5_5_BASE:1.44
	OPENBSD_5_4:1.41.0.2
	OPENBSD_5_4_BASE:1.41
	OPENBSD_5_3:1.39.0.2
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.37.0.4
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.2
	OPENBSD_5_0:1.36.0.2
	OPENBSD_5_0_BASE:1.36
	OPENBSD_4_9:1.33.0.2
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	AV400_20060509:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.52
date	2015.12.01.07.50.03;	author deraadt;	state dead;
branches;
next	1.51;
commitid	Rh8AZFtVMVCiwPts;

1.51
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.50;
commitid	xEYSgcMiEU7N21VE;

1.50
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.49;
commitid	Jqptj5xcqx8IMSNU;

1.49
date	2014.11.18.01.17.36;	author deraadt;	state Exp;
branches;
next	1.48;
commitid	Qj1gzxwenHvm4gTb;

1.48
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.47;
commitid	iaz4yUwbbR9oynrV;

1.47
date	2014.07.01.20.26.09;	author miod;	state Exp;
branches;
next	1.46;
commitid	iAtGSRVdQhSqPb5V;

1.46
date	2014.06.09.16.26.32;	author miod;	state Exp;
branches;
next	1.45;
commitid	CkVHFMR82yg837kv;

1.45
date	2014.05.08.22.17.33;	author miod;	state Exp;
branches;
next	1.44;

1.44
date	2013.11.02.23.42.12;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2013.11.02.23.06.18;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2013.10.15.19.23.26;	author guenther;	state Exp;
branches;
next	1.41;

1.41
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.39;

1.39
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.37;

1.37
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.36;

1.36
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.35;

1.35
date	2011.07.06.02.08.04;	author tedu;	state Exp;
branches;
next	1.34;

1.34
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.33;

1.33
date	2010.12.30.18.49.30;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2010.12.02.20.57.07;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2010.05.25.21.15.27;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.05.25.15.05.00;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.24.23.19.21;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.05.24.19.58.51;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.24.14.59.15;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.28.15.31.32;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.27.16.54.53;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.04.27.06.46.25;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.27.05.07.28;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.27.04.31.46;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.26.22.21.14;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.12.21.04.16;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.25.18.25.28;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.09.18.12.01;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.05.09.18.12.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@#	$OpenBSD: Makefile.aviion,v 1.51 2015/01/13 01:12:49 deraadt Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I. -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-main -Wno-uninitialized \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mno-check-zero-division -mmemcpy
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-T ${LDSCRIPT} -Ttext 0x80000 -e __start -X -N --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<
PROFILE_C=	${CC} -S -c ${CFLAGS} ${CPPFLAGS} $<; \
		sed -e s/_mcount/mcount/ -e s/subrmcount/subr_mcount/ <$*.s | \
		${AS} -o $@@; \
		rm -f $*.s

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S -x
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.S assym.h
eh.o mutex.o process.o subr.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.51
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.50 2015/01/11 19:25:13 tedu Exp $
@


1.50
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.49 2014/11/18 01:17:36 deraadt Exp $
d154 1
a154 2
	rm -f /obsd
	ln /bsd /obsd
@


1.49
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.48 2014/10/04 18:10:14 brad Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.48
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.47 2014/07/01 20:26:09 miod Exp $
d41 2
a42 2
LINKFLAGS=	-T ${_machdir}/conf/ld.script \
		-Ttext 0x80000 -e __start -X -N --warn-common -nopie
d76 1
a76 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.47
log
@Replace the assembly 88100 FPU imprecise exception code (mostly triggered by
denormal results) with C code using softfloat to correctly round the inexact
results in the best possible way according to the current rounding mode.

No functional change intended, and this assembly code was surprisingly almost
non-buggy, as opposed to the precise exception code replaced a few weeks ago;
still an improvement as this replaces 900 lines of arcane assembly with 90
lines of understandable C code.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.46 2014/06/09 16:26:32 miod Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.46
log
@Replace the unmaintainable assembler code responsible for 88100 precise FPU
fault handling with a C wrapper around the softfloat code, as already done for
88110 kernels.

As a bonus, attempting to read or write FPU control registers but fcr62 and
fcr63 in userland will now correctly signal an illegal instruction, instead
of leaving the destination register unchanged and pretending nothing bad
happened.

Be sure to rm m88100_fp.d in your kernel compile directory after updating your
tree.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.45 2014/05/08 22:17:33 miod Exp $
d146 1
a146 1
eh.o m88100_fp_imp.o mutex.o process.o subr.o: assym.h
@


1.45
log
@Format string fixes for m88k; remove -Wno-format from the m88k kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.44 2013/11/02 23:42:12 miod Exp $
d146 1
a146 1
eh.o m88100_fp.o mutex.o process.o subr.o: assym.h
@


1.44
log
@Use a linker script to align .data to a BATC boundary as well, so that no
DBATC may span over parts of .rodata.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.43 2013/11/02 23:06:18 miod Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.43
log
@Link m88k kernels on a BATC boundary.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.42 2013/10/15 19:23:26 guenther Exp $
d41 2
a42 1
LINKFLAGS=	-Ttext 0x80000 -e __start -X -N --warn-common -nopie
@


1.42
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.41 2013/06/23 20:33:51 miod Exp $
d41 1
a41 1
LINKFLAGS=	-Ttext 0x1000 -e __start -X -N --warn-common -nopie
@


1.41
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.40 2013/03/30 07:25:20 tedu Exp $
d139 1
a139 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d141 1
a141 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.40
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.39 2013/01/05 11:20:55 miod Exp $
d40 1
a40 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
@


1.39
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.38 2012/08/22 16:58:26 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.38
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.37 2011/11/08 18:41:34 matthieu Exp $
d41 1
a41 3
# Kernel is linked as a ZMAGIC executable, with start at 10020
#LINKFLAGS=	-N -Ttext 0x1000 -e start
LINKFLAGS=	-Ttext 0x1000 -e start
d84 1
a84 1
STRIPFLAGS=	-g
d90 1
a90 1
LINKFLAGS+=	-x
@


1.37
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.36 2011/07/07 22:28:18 guenther Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.36
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.35 2011/07/06 02:08:04 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.35
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.34 2011/04/15 02:41:28 guenther Exp $
d167 5
a171 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.34
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.33 2010/12/30 18:49:30 deraadt Exp $
d128 1
a128 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.33
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.32 2010/12/02 20:57:07 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d77 2
a78 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d98 5
d106 2
a107 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d136 3
a141 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d143 1
a143 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d160 12
@


1.32
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.31 2010/12/02 04:35:02 deraadt Exp $
d100 2
a101 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.31
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.30 2010/06/01 23:49:22 deraadt Exp $
d76 2
a77 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d79 2
a80 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.30
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.29 2010/05/28 14:27:08 guenther Exp $
d76 1
a76 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d79 2
a80 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.29
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.28 2010/05/25 21:15:27 deraadt Exp $
a44 1
STRIPFLAGS=	-d
d86 1
@


1.28
log
@eh.S includes eh_common.S to make eh.o; fix this dependency
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.27 2010/05/25 17:27:55 deraadt Exp $
d100 1
a100 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.27
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.26 2010/05/25 15:05:00 deraadt Exp $
d153 1
a153 1
eh_common.o m88100_fp.o mutex.o process.o subr.o: assym.h
@


1.26
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.25 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		aviion
_arch?=		m88k
@


1.25
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.24 2010/05/24 23:19:21 deraadt Exp $
d155 1
a155 1
	${NORMAL_S}
@


1.24
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.23 2010/05/24 19:58:51 deraadt Exp $
a135 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d137 1
a137 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.23
log
@use the same idiom for stripping gdb kernels.  This relies on strip -o
support for the non-binutils architectures (and that diff is coming..)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.22 2010/05/24 14:59:15 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d125 1
a125 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d135 2
a136 11
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	\
	param.c ioconf.c ${CFILES} ${SFILES}

d139 1
@


1.22
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.21 2010/04/28 15:31:32 deraadt Exp $
d90 3
a92 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.21
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.20 2010/04/27 16:54:53 deraadt Exp $
d15 1
a15 1
STRIP?= strip
d28 3
a30 3
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D${_mach} -Dm88k
CWARNFLAGS=	-Wall -Werror -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main -Wstrict-prototypes \
d32 5
a36 2
CMACHFLAGS=	-mno-check-zero-division -mmemcpy \
		-fno-builtin-printf -fno-builtin-log
d40 1
d43 1
a43 1
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE ${CMACHFLAGS}
d56 3
a58 9
HOSTED_CPPFLAGS?=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS?=	${CFLAGS}

### CPU configuration

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a62 3

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

d123 1
a123 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d127 1
a127 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
d129 1
a129 2
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'
@


1.20
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.19 2010/04/27 06:46:25 deraadt Exp $
d58 1
a58 1
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
d145 2
a146 2
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink
@


1.19
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.18 2010/04/27 05:07:28 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -Daviion -Dm88k
d89 1
a89 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@;
d148 2
a149 1
SRCS=	param.c ioconf.c ${CFILES} ${SFILES}
@


1.18
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.17 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/aviion/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/aviion/conf/Makefile.aviion
# after which config should be rerun for all machines of that type.
@


1.17
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.16 2010/04/27 04:31:46 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.16
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.15 2010/04/27 03:37:37 deraadt Exp $
d178 1
a178 1
locore.o: ${_machdir}/aviion/locore.S assym.h
@


1.15
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.14 2010/04/26 22:21:14 deraadt Exp $
d168 1
a168 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.14
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.13 2010/04/26 22:11:37 deraadt Exp $
a177 14

# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if_tun.o if_loop.o if_ethersubr.o: Makefile
in_proto.o: Makefile

# depend on maxusers
assym.h machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile
@


1.13
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.12 2010/04/26 20:50:16 deraadt Exp $
a33 1
_machdir?=	$S/arch/aviion
d35 2
a36 1
_archdir?=	$S/arch/m88k
@


1.12
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.11 2010/04/26 18:58:30 deraadt Exp $
d114 5
a118 3
assym.h: $S/kern/genassym.sh ${_archdir}/m88k/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${_archdir}/m88k/genassym.cf > assym.h.tmp && \
d167 3
a169 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_archdir}/m88k/genassym.cf
@


1.11
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.10 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 2
AVIION=	$S/arch/aviion
M88K=	$S/arch/m88k
d114 1
a114 1
assym.h: $S/kern/genassym.sh ${M88K}/m88k/genassym.cf Makefile
d116 1
a116 1
	    ${PARAM} < ${M88K}/m88k/genassym.cf > assym.h.tmp && \
d166 1
a166 1
	    ${CPPFLAGS} < ${M88K}/m88k/genassym.cf
d190 1
a190 1
locore.o: ${AVIION}/aviion/locore.S assym.h
@


1.10
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 2
a2 4
#	$OpenBSD: Makefile.aviion,v 1.9 2009/08/09 23:04:49 miod Exp $
#
# Makefile for OpenBSD
#
d8 1
a8 1
#	 config machineid
@


1.9
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.8 2009/01/11 21:02:03 pirofti Exp $
d131 1
a131 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.8
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.7 2008/04/12 21:04:16 miod Exp $
d55 6
d137 1
a137 1
		[Ee]rrs linterrs makelinks assym.h
d159 1
a159 1
.depend: ${SRCS} assym.h param.c
d169 5
@


1.7
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.6 2007/11/30 07:52:06 miod Exp $
d160 2
a161 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.6
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.5 2007/11/25 18:25:28 deraadt Exp $
d41 1
a41 1
		-Wstack-larger-than-2047
@


1.5
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.4 2007/11/25 11:23:33 deraadt Exp $
d66 1
@


1.4
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.3 2007/07/30 16:23:33 thib Exp $
a60 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d87 1
a87 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d117 3
@


1.3
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.2 2006/07/27 05:58:11 miod Exp $
d50 1
a68 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d95 1
a95 3
# Kernel is linked as a ZMAGIC executable, with start at 10020
SYSTEM_OBJ=	locore.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.2
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.aviion,v 1.1.1.1 2006/05/09 18:12:01 miod Exp $
d37 1
a37 1
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
@


1.1
log
@Enter OpenBSD/aviion, a port to the m88k-based Data General AViiON workstations. Currently restricted to diskless serial console, tested on AV410 only; many thanks to Chris Tribo for documentation and testing.
@
text
@d1 1
a1 1
#	$OpenBSD$
d40 2
a41 1
		-Wno-uninitialized -Wno-format -Wno-main -Wstrict-prototypes
@


1.1.1.1
log
@Oops, correct import this time.
@
text
@@
