head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.20
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.16
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.14
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	AV400_20060509:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.01.07.50.04;	author deraadt;	state dead;
branches;
next	1.4;
commitid	Rh8AZFtVMVCiwPts;

1.4
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.19.22.05.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.20.12.04.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.09.18.19.21;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.05.09.18.19.21;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/* $OpenBSD: cpu.h,v 1.4 2011/03/23 16:54:34 pirofti Exp $ */
/*
 * Copyright (c) 1996 Nivas Madhur
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#ifndef	_MACHINE_CPU_H_
#define	_MACHINE_CPU_H_

#include <m88k/cpu.h>

#ifdef _KERNEL

#include <sys/evcount.h>

/*
 * Generic interrupt handler structure. Handlers may be chained.
 */
struct intrhand {
	SLIST_ENTRY(intrhand) ih_link;
	int	(*ih_fn)(void *);
	void	*ih_arg;
	int	ih_ipl;
	int	ih_flags;
#define	INTR_WANTFRAME	0x01
#define	INTR_EXCLUSIVE	0x02
	struct evcount ih_count;
};
typedef SLIST_HEAD(, intrhand) intrhand_t;

void	doboot(void);
void	nmihand(void *);

#endif /* _KERNEL */

#endif
@


1.4
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.3 2007/12/19 22:05:06 miod Exp $ */
@


1.3
log
@Overhaul interrupt handling, in order to make it (arguably) simpler and
more board design-independent.

The main changes are:
- define logical interrupt sources, which match the on-board devices as
  well as the seven VME interrupt sources. Use these whenever possible
  when registering interrupts in the drivers, so that the actual interrupt
  mask layouts are hidden.
- make the on-board and VME interrupt handlers separate. On-board interrupt
  handlers are not really associated to an interrupt vector, only to a
  given interrupt source, and only one handler can be registered for a
  logical interrupt source. On the other hand, VME interrupts come with a
  vector number, and can be shared. This allows VME devices to really use
  the whole 256 vectors space, starting at vector zero.
- update the real interrupt masks upon interrupt handler registration and
  removal, so that only interrupt sources for which a handler exists may
  be enabled.
- update the VME interrupt allocation logic to allow exclusive vector
  allocation.
- move the Z8536 clock routines to their own file, since they are not
  AV400-specific; while there, calibrate the delay constant upon startup
  for more accurate delay().

The vme driver is the only one left with AV400 tentacles left, to be fixed
very soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.2 2006/05/20 12:04:54 miod Exp $ */
d40 2
a41 2
#ifndef	_AVIION_CPU_H_
#define	_AVIION_CPU_H_
@


1.2
log
@Introduce a ``struct board'' platform abstraction, to be able to support
more AViiON designs in the future.
Heuristics to tell designs apart in aviion_identify() are likely too weak,
but this is a start and AV400 still gets identified as AV400 (-:
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.1.1.1 2006/05/09 18:19:21 miod Exp $ */
a42 1
#include <sys/evcount.h>
d47 5
d57 3
a59 1
	int	ih_wantframe;
a61 10

int	intr_establish(int, struct intrhand *, const char *);

/*
 * There are 256 possible vectors on a aviion platform (including
 * onboard and VME vectors. Use intr_establish() to register a
 * handler for the given vector. vector number is used to index
 * into the intr_handlers[] table.
 */
#define	NVMEINTR	256
a62 1
extern intrhand_t intr_handlers[NVMEINTR];
@


1.1
log
@Enter OpenBSD/aviion, a port to the m88k-based Data General AViiON workstations. Currently restricted to diskless serial console, tested on AV410 only; many thanks to Chris Tribo for documentation and testing.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.33 2006/04/15 15:43:36 miod Exp $ */
a46 8

/* board dependent pointers */
extern void	(*md_interrupt_func_ptr)(u_int, struct trapframe *);
#define	md_interrupt_func	(*md_interrupt_func_ptr)
extern u_int	(*md_getipl)(void);
extern u_int	(*md_setipl)(u_int);
extern u_int	(*md_raiseipl)(u_int);
extern void	(*md_init_clocks)(void);
@


1.1.1.1
log
@Oops, correct import this time.
@
text
@@
