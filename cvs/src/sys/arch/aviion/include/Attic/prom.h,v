head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.14
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	AV400_20060509:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.01.07.50.04;	author deraadt;	state dead;
branches;
next	1.6;
commitid	Rh8AZFtVMVCiwPts;

1.6
date	2013.10.10.21.24.59;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.23.20.05.08;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.24.18.46.55;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.20.11.57.04;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.09.18.19.43;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.05.09.18.19.43;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: prom.h,v 1.6 2013/10/10 21:24:59 miod Exp $	*/
/*
 * Copyright (c) 2006, Miodrag Vallat.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_PROM_H_
#define _MACHINE_PROM_H_

#include <sys/cdefs.h>

/* SCM trap vector */
#define	SCM_VECTOR		496

/* system calls */
#define	SCM_CHAR		0x00
#define	SCM_OCHAR		0x20
#define	SCM_PTLINE		0x21
#define	SCM_OCRLF		0x26
#define	SCM_HALT		0x63
#define	SCM_STDIO		0x70
#define	SCM_JPSTART		0x100
#define	SCM_REBOOT		0x101
#define	SCM_CPUID		0x102
#define	SCM_MSIZE		0x103
#define	SCM_REVNUM		0x104
#define	SCM_HOSTID		0x107
#define	SCM_INVALID		0x112
#define	SCM_COMMID		0x114

/* 88204 PROMs only system calls */
#define	SCM_SYSID		0x31
#define	SCM_CPUCONFIG		0x107

/* SCM_JPSTART return values */
#define	JPSTART_OK		0
#define	JPSTART_NO_JP		1
#define	JPSTART_SINGLE_JP	2
#define	JPSTART_NOT_IDLE	3
#define	JPSTART_NO_ANSWER	4

struct	scm_cpuconfig {
	u_int32_t	version;
#define	SCM_CPUCONFIG_VERSION	0
	u_int32_t	cpucount;	/* # of CPUs */
	u_int16_t	igang, dgang;	/* # of CMMUs per CPU */
	u_int32_t	isplit, dsplit;	/* CMMU split bits */
	u_int32_t	:32;
};

int	scm_cpuconfig(struct scm_cpuconfig *);
u_int	scm_cpuid(void);
int	scm_getc(void);
void	scm_getenaddr(u_char *);
__dead void scm_halt(void);
u_int	scm_jpstart(cpuid_t, vaddr_t);
u_int	scm_memsize(int);
void	scm_printf(const char *);
u_int	scm_promver(void);
void	scm_putc(int);
void	scm_putcrlf(void);
__dead void scm_reboot(const char *);
u_int	scm_sysid(void);

/*
 * SCM boot device names
 */

/* cied */
#define	SCM_CIEN	0x6369656e
/* cimd */
/* cird */
/* cisc */
#define	SCM_DGEN	0x6467656e
#define	SCM_DGSC	0x64677363
/* hada */
#define	SCM_HKEN	0x686b656e
#define	SCM_INEN	0x696e656e
#define	SCM_INSC	0x696e7363
#define	SCM_NCSC	0x6e637363
/* nvrd */
/* pefn */
/* vitr */

#endif /* _MACHINE_PROM_H_ */
@


1.6
log
@Better boot device detection code. Board-specific code will now return the
address of a controller only know by its SCM name and number, and the boot
device detection code will now attempt to match the controller first, and
then grandchildren of it (if the boot device is a disk or a tape).
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.h,v 1.5 2011/03/23 16:54:34 pirofti Exp $	*/
@


1.5
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.h,v 1.4 2010/12/23 20:05:08 miod Exp $	*/
d84 20
@


1.4
log
@The exception vector page on m88k systems has always been the same page as
the one used by the firmware, which (at least on mvme88k) is at address zero.

This is unfortunate, since this means that NULL pointer dereferences in the
kernel are not caught, and writes cause havoc.

This behaviour was necessary to be able to use the PROM system call interface
during early bootstrap, without having to disassemble the VBR page and
update branches - which use pc-relative displacement - if we were to use
a different VBR address.

On mvme88k, change this and actually set up two VBR pages: one, over the PROM
page (except for the system call vectors), and another one in the kernel
image (which will be mapped read-only). We'll run with the PROM page until
the end of autoconf, and then switch to the kernel one, and unmap all the
PROM below it.

As a bonus, the final kernel page can use optimized data access fault
handlers, which do not have to check for faults caused by badaddr(), since
badaddr() is only used during device probe on buses which do not support
hotplug.

There are a few infrastructure collateral damage on aviion and luna88k, but
these ports do not change their behaviour yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.h,v 1.3 2010/04/24 18:46:55 miod Exp $	*/
d27 2
a28 2
#ifndef __AVIION_PROM_H__
#define __AVIION_PROM_H__
d85 1
a85 1
#endif /* __AVIION_PROM_H__ */
@


1.3
log
@SMP support for models 4600 and 530, adapted from the MVME188 code. Models
4000 and 4300 will need more work, because they don't have as many distinct
software interrupt sources as required by this implementation, so a
different IPI scheme will be necessary.

Tested on dual-processor 4625 (AV530 family) and single processor 4300
(AV400 family).
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.h,v 1.2 2006/05/20 11:57:04 miod Exp $	*/
a83 2

extern u_int32_t scmvec[2], osvec[2];		/* SCM trap vector copies */
@


1.2
log
@Save the PROM VBR on startup, rather than assuming the PROM (and thus its
VBR) will always reside at the same address.
Also, when querying the PROM for the memory size, ask it for the ``user''
size - i.e. with the PROM data area taken out.
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.h,v 1.1.1.1 2006/05/09 18:19:43 miod Exp $	*/
d42 1
d55 7
d76 1
@


1.1
log
@Enter OpenBSD/aviion, a port to the m88k-based Data General AViiON workstations. Currently restricted to diskless serial console, tested on AV410 only; many thanks to Chris Tribo for documentation and testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 2
a69 1
u_int	scm_memsize(void);
@


1.1.1.1
log
@Oops, correct import this time.
@
text
@@
