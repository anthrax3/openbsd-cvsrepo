head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.6
date	2015.12.01.07.50.04;	author deraadt;	state dead;
branches;
next	1.5;
commitid	Rh8AZFtVMVCiwPts;

1.5
date	2014.02.24.20.15.37;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.16.16.59.34;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.10.21.22.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.09.20.11.41;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.08.21.55.21;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: devopen.c,v 1.5 2014/02/24 20:15:37 miod Exp $	*/

/*
 * Copyright (c) 2013 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


#include <sys/param.h>
#include <stand.h>

#include "libsa.h"

int	devparse(const char *, uint *, uint *, uint *, uint *,
	    const char **, const char **, char **);

/*
 * Parse the boot commandline into a proper device specification and
 * kernel filename.
 */
int
devparse(const char *fname, uint *controller, uint *unit, uint *lun, uint *part,
    const char **dev, const char **ctrl, char **file)
{
	struct devsw *dp;
	int i;
	const char *po, *pc, *pc2, *p, *comma;
	static char devctrl[1 + 4];
	char device[1 + 4];
	size_t devlen;

	/* defaults */
	*controller = *unit = *lun = *part = 0;
	device[0] = '\0';
	devctrl[0] = '\0';

	/*
	 * Attempt to parse the name as
	 *     ctrlnam([num[,unit[,lun]]])[partname:]filename
	 * or
	 *     devnam([num|ctrlnam([num]][,initiator])[,unit[,lun]])
	 *						[partname:]filename
	 *
	 * With device names being "sd" or "st" for storage devices,
	 * or a controller name for network devices, and controller names
	 * being four letter long ("dgen", "dgsc", "inen", "ncsc" ...)
	 *
	 * Initiator id is always ignored.
	 */

	po = strchr(fname, '(');
	if (po != NULL) {
		pc = strchr(fname, ')');
		if (pc == NULL || pc < po)
			return EINVAL;
		p = strchr(po + 1, '(');

		if (p != NULL && p < pc) {
			pc2 = strchr(pc + 1, ')');
			if (pc2 == NULL)
				return EINVAL;
		} else
			pc2 = NULL; /* XXX gcc3 -Wuninitialized */

		devlen = po++ - fname;
		if (devlen > 4)
			return EINVAL;
		memcpy(device, fname, devlen);
		device[devlen] = '\0';

		if (p != NULL && p < pc) {
			/* second form. extract controller name */
			devlen = p++ - po;
			if (devlen > 4)
				return EINVAL;
			memcpy(devctrl, po, devlen);
			devctrl[devlen] = '\0';

			*controller = strtol(p, NULL, 0);
			po = pc + 1;
			pc = pc2;
		} else {
			/* first form. extract controller number */
			*controller = strtol(po, NULL, 0);
		}

		comma = strchr(po, ',');
		if (comma != NULL && comma < pc) {
			comma++;
			*unit = strtol(comma, NULL, 0);
			po = comma;
		}

		comma = strchr(po, ',');
		if (comma != NULL && comma < pc) {
			comma++;
			*lun = strtol(comma, NULL, 0);
			po = comma;
		}

		pc++;
		fname = pc;
	} else {
		/* no controller, keep defaults */
	}

	p = strchr(fname, ':');
	if (p != NULL) {
		*part = strtol(fname, NULL, 0);
		fname = p + 1;
	}

	while (*fname == '/' || *fname == ':')
		fname++;

	*file = (char *)fname;

	for (dp = devsw, i = 0; i < ndevs; dp++, i++)
		if (dp->dv_name != NULL && strcmp(dp->dv_name, device) == 0)
			break;
	if (i == ndevs)
		return ENXIO;

	*dev = dp->dv_name;
	*ctrl = devctrl;
	return 0;
}

/*
 * Parse the boot commandline into a proper device specification and
 * kernel filename.
 */
int
devopen(struct open_file *f, const char *fname, char **file)
{
	struct devsw *dp;
	int error, i;
	uint controller, unit, lun, part;
	const char *device, *ctrl;

	error = devparse(fname, &controller, &unit, &lun, &part, &device, &ctrl,
	    file);
	if (error != 0)
		return error;

	for (dp = devsw, i = 0; i < ndevs; dp++, i++)
		if (dp->dv_name != NULL && strcmp(dp->dv_name, device) == 0)
			break;
	if (i == ndevs)
		return ENXIO;

	error = (*dp->dv_open)(f, ctrl, controller, unit, lun, part);
	if (error == 0) {
		f->f_dev = dp;
		/* update global boot_info */
		bi.bootdev = controller;
		bi.bootunit = unit;
		bi.bootlun = lun;
		bi.bootpart = part;
	}

	return error;
}
@


1.5
log
@/etc/random.seed support in da bootblockz.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.4 2013/10/16 16:59:34 miod Exp $	*/
@


1.4
log
@Support for oaic in the boot blocks. Cope with older prom putting a \r at
the end of the commandline. Clean up a few stale comments. Crank boot blocks
version to 0.3.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.3 2013/10/10 21:22:06 miod Exp $	*/
d25 3
d33 2
a34 1
devopen(struct open_file *f, const char *fname, char **file)
d37 1
a37 1
	int error, i;
d39 2
a40 2
	char ctrl[1 + 4], device[1 + 4];
	uint controller, unit, lun, part;
d44 1
a44 1
	controller = unit = lun = part = 0;
d46 1
a46 1
	ctrl[0] = '\0';
d87 2
a88 2
			memcpy(ctrl, po, devlen);
			ctrl[devlen] = '\0';
d90 1
a90 1
			controller = strtol(p, NULL, 0);
d95 1
a95 1
			controller = strtol(po, NULL, 0);
d101 1
a101 1
			unit = strtol(comma, NULL, 0);
d108 1
a108 1
			lun = strtol(comma, NULL, 0);
d120 1
a120 1
		part = strtol(fname, NULL, 0);
d128 28
@


1.3
log
@Misc cleanups and small fixes. Boot controller/unit/lun information passed
to the kernel will now match the device the kernel is loaded from, not the
device the boot blocks are loaded from (this allows one to netboot the
boot blocks to boot a kernel from a local disk).
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.2 2013/10/09 20:11:41 miod Exp $	*/
a113 1
	/* XXX parse partition: */
@


1.2
log
@Parse (hex) partition number in boot path. For experts only.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.1 2013/10/08 21:55:21 miod Exp $	*/
d23 2
d36 1
a36 1
	int controller, unit, lun, part;
d48 1
a48 1
	 *     devnam(addr|num|ctrlnam([addr|num][,initiator])[,unit[,lun]])
d86 1
a86 5
			if (*p > '9')
				controller = strtol(p, NULL, 16);
			else
				controller = strtol(p, NULL, 0);

a93 2
		pc++;

d96 2
a97 4
			if (*++comma > '9')
				unit = strtol(comma, NULL, 16);
			else
				unit = strtol(comma, NULL, 0);
d103 2
a104 4
			if (*++comma > '9')
				lun = strtol(comma, NULL, 16);
			else
				lun = strtol(comma, NULL, 0);
d108 1
d117 1
a117 4
		if (*fname > '9')
			part = strtol(fname, NULL, 16);
		else
			part = strtol(fname, NULL, 0);
d133 1
a133 1
	if (error == 0)
d135 6
@


1.1
log
@Early stages of a working disk bootloader for OpenBSD/aviion.
Currently limited to oosiop(4) controllers, and thus models 4600 and 530.
There are some rough edges to polish to avoid manual interaction (kernel
currently can't figure its boot device when booted from disk), but the hard
(and hair-pulling) work is over.
And we can have kernel symbols again!
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
	 *     ctrlnam([num[,unit[,lun]]])[:partname/]filename
d46 8
a53 1
	 *     devnam(ctrlnam([addr|num])[,unit[,lun]])[:partname/]filename
d121 11
a131 1
	while (*fname == '/')
@

