head	1.7;
access;
symbols
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.7
date	2015.12.01.07.50.04;	author deraadt;	state dead;
branches;
next	1.6;
commitid	Rh8AZFtVMVCiwPts;

1.6
date	2015.11.16.19.33.52;	author miod;	state Exp;
branches;
next	1.5;
commitid	5gnqUR6VheSiU9SF;

1.5
date	2014.02.24.20.15.37;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.16.16.59.34;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.10.21.22.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.09.20.12.35;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.08.21.55.20;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: boot.c,v 1.6 2015/11/16 19:33:52 miod Exp $ */

/*-
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	@@(#)boot.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <sys/stat.h>
#define _KERNEL
#include <sys/fcntl.h>
#undef _KERNEL

#include <machine/prom.h>

#include <lib/libkern/libkern.h>
#include "stand.h"
#include "libsa.h"

extern int devparse(const char *, uint *, uint *, uint *, uint *,
	    const char **, const char **, char **);
extern	const char version[];

char	line[80];
struct boot_info bi;

char   rnddata[BOOTRANDOM_MAX];		/* XXX dummy */

int	loadrandom(const char *, char *, size_t);

void
boot(const char *args, uint bootdev, uint bootunit, uint bootlun)
{
	char *p, *file, *fname;
	char rndpath[MAXPATHLEN];
	int ask;
	int ret;
	int rnd_loaded = 0;
	uint controller, unit, lun, part;
	const char *device, *ctrl;

	printf("\n>> OpenBSD/" MACHINE " boot %s\n", version);

	bi.bootdev = bootdev;
	bi.bootunit = bootunit;
	bi.bootlun = bootlun;
	bi.bootpart = 0;

	/*
	 * Older PROM version put a \r at the end of a manually entered
	 * boot string.
	 */
	if ((p = strchr(args, '\r')) != NULL)
		*p = '\0';

	ret = parse_args(args, &file, 1);
	ask = boothowto & RB_ASKNAME;
	for (;;) {
		if (ask != 0) {
			printf("boot: ");
			getln(line, sizeof line);
			if (line[0] == '\0')
				continue;

			ret = parse_args(line, &file, 0);
			args = line;
		}
		if (ret != 0) {
			printf("boot: returning to SCM\n");
			break;
		}

		/*
		 * Try and load randomness from the boot device.
		 */
		if (rnd_loaded == 0) {
			if (devparse(file, &controller, &unit, &lun, &part,
			    &device, &ctrl, &fname) == 0 &&
			    fname - file < sizeof(rndpath)) {
				memcpy(rndpath, file, fname - file);
				rndpath[fname - file] = '\0';
				strlcat(rndpath, BOOTRANDOM, sizeof rndpath);
				rnd_loaded = loadrandom(rndpath, rnddata,
				    sizeof(rnddata));
			}
		}

		printf("%s: ", file);
		exec(file, args,
		    bi.bootdev, bi.bootunit, bi.bootlun, bi.bootpart);
		printf("boot: %s: %s\n", file, strerror(errno));
		ask = 1;
	}
}

int
loadrandom(const char *name, char *buf, size_t buflen)
{
	struct stat sb;
	int fd;
	int rc = 0;

	fd = open(name, O_RDONLY);
	if (fd == -1) {
		if (errno != EPERM)
			printf("cannot open %s: %s\n", name, strerror(errno));
		return 0;
	}
	if (fstat(fd, &sb) == -1 || sb.st_uid != 0 || !S_ISREG(sb.st_mode) ||
	    (sb.st_mode & (S_IWOTH|S_IROTH)))
		goto fail;
	(void) read(fd, buf, buflen);
	rc = 1;
fail:
	close(fd);
	return rc;
}
@


1.6
log
@Replace unbounded gets() in libsa with getln() which takes a buffer size,
and convert all gets() users.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.5 2014/02/24 20:15:37 miod Exp $ */
@


1.5
log
@/etc/random.seed support in da bootblockz.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.4 2013/10/16 16:59:34 miod Exp $ */
d112 1
a112 1
			gets(line);
@


1.4
log
@Support for oaic in the boot blocks. Cope with older prom putting a \r at
the end of the commandline. Clean up a few stale comments. Crank boot blocks
version to 0.3.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3 2013/10/10 21:22:06 miod Exp $ */
d60 5
d67 1
d71 2
d74 1
d78 4
d85 2
a86 1
	char *p, *file;
d89 3
d124 15
d145 23
@


1.3
log
@Misc cleanups and small fixes. Boot controller/unit/lun information passed
to the kernel will now match the device the kernel is loaded from, not the
device the boot blocks are loaded from (this allows one to netboot the
boot blocks to boot a kernel from a local disk).
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2 2013/10/09 20:12:35 miod Exp $ */
d72 2
a73 2
	char *file;
	int ask = 0;
d82 8
d91 1
d93 1
a93 1
		if (ask) {
@


1.2
log
@DIsplay fixes, also print boot path before attempting to boot it. Still not
cranking boot blocks version because it's unlikely anyone but me is running
them at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.1 2013/10/08 21:55:20 miod Exp $ */
d67 1
d70 1
a70 1
boot(const char *args, int bootdev, int bootunit, int bootpart)
d78 4
d87 5
a91 3
			if (line[0])
				ret = parse_args(line, &file, 0);
			args = file;
d99 2
a100 1
		exec(file, args, bootdev, bootunit, bootpart);
@


1.1
log
@Early stages of a working disk bootloader for OpenBSD/aviion.
Currently limited to oosiop(4) controllers, and thus models 4600 and 530.
There are some rough edges to polish to avoid manual interaction (kernel
currently can't figure its boot device when booted from disk), but the hard
(and hair-pulling) work is over.
And we can have kernel symbols again!
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2 2010/04/18 15:09:02 miod Exp $ */
d75 1
a75 1
	printf(">> OpenBSD/" MACHINE " boot %s\n", version);
d91 1
@

