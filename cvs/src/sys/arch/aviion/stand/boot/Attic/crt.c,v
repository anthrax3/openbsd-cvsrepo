head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2015.12.01.07.50.04;	author deraadt;	state dead;
branches;
next	1.3;
commitid	Rh8AZFtVMVCiwPts;

1.3
date	2013.10.16.16.59.34;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.10.21.22.06;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.08.21.55.21;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: crt.c,v 1.3 2013/10/16 16:59:34 miod Exp $ */

#include <sys/types.h>
#include <machine/prom.h>

#include "stand.h"

extern void boot(char *, int, int, int);

/*
 * This is the boot code entry point.
 * Note that we do not bother to set r31, and use the default value supplied
 * by the PROM, which is the top of memory, minus the PROM data area (usually
 * 128KB).
 */
void
start(char *args, int dev, int unit, int lun)
{
	extern int edata, end;

	/* 
	 * This code enables the SFU1 and is used for single stage 
	 * bootstraps or the first stage of a two stage bootstrap.
	 * Do not use any low register to enable the SFU1. This wipes out
	 * the args.  Not cool at all... r25 seems free. 
	 */
	asm("	ldcr	%%r25,%%cr1" ::: "r25");
	asm("	clr	%r25,%r25,1<3>"); /* bit 3 is SFU1D */
	asm("	stcr	%r25,%cr1");

	memset(&edata, 0, ((int)&end - (int)&edata));

	boot(args, dev, unit, lun);
	_rtt();
	/* NOTREACHED */
}
@


1.3
log
@Support for oaic in the boot blocks. Cope with older prom putting a \r at
the end of the commandline. Clean up a few stale comments. Crank boot blocks
version to 0.3.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.2 2013/10/10 21:22:06 miod Exp $ */
@


1.2
log
@Misc cleanups and small fixes. Boot controller/unit/lun information passed
to the kernel will now match the device the kernel is loaded from, not the
device the boot blocks are loaded from (this allows one to netboot the
boot blocks to boot a kernel from a local disk).
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.1 2013/10/08 21:55:21 miod Exp $ */
d8 1
a8 1
extern void boot(const char *, int, int, int);
d17 1
a17 1
start(const char *args, int dev, int unit, int lun)
@


1.1
log
@Early stages of a working disk bootloader for OpenBSD/aviion.
Currently limited to oosiop(4) controllers, and thus models 4600 and 530.
There are some rough edges to polish to avoid manual interaction (kernel
currently can't figure its boot device when booted from disk), but the hard
(and hair-pulling) work is over.
And we can have kernel symbols again!
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.3 2013/09/28 21:59:39 miod Exp $ */
d17 1
a17 1
start(const char *args, int dev, int unit, int part)
d33 1
a33 1
	boot(args, dev, unit, part);
@

