head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.14
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.16
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.12
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.01.07.50.05;	author deraadt;	state dead;
branches;
next	1.6;
commitid	Rh8AZFtVMVCiwPts;

1.6
date	2013.10.16.16.59.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.10.21.22.07;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.09.20.04.39;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.08.21.55.22;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.18.15.09.00;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.16.22.48.18;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@/*	$OpenBSD: parse_args.c,v 1.6 2013/10/16 16:59:35 miod Exp $ */

/*-
 * Copyright (c) 1995 Theo de Raadt
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <machine/prom.h>

#include "stand.h"
#include "libsa.h"

#define KERNEL_NAME "bsd"

int	boothowto = 0;

/* skip end of token and whitespace */
static const char *stws(const char *);
static const char *
stws(const char *p)
{
	while (*p != ' ' && *p != '\0')
		p++;

	while (*p == ' ')
		p++;

	return p;
}

int
parse_args(const char *line, char **filep, int first)
{
	const char *po, *pc, *p;
	char *name;
	size_t namelen;

	if (first == 0) {
		/* recognize the special ``halt'' keyword */
		if (strcmp(line, "halt") == 0)
			return (1);
	}

	/* skip boot device; up to two nested foo(...) constructs */
	p = line;
	po = strchr(line, '(');
	if (po != NULL) {
		pc = strchr(po + 1, ')');
		if (pc != NULL) {
			p = strchr(po + 1, '(');
			if (p == NULL || pc < p)
				p = pc + 1;
			else if (pc != NULL) {
				p = strchr(pc + 1, ')');
				if (p != NULL)
					p = p + 1;
				else
					p = line;
			}
		}
	}

	/* skip partition number if any */
	pc = strchr(p, ':');
	if (pc != NULL)
		p = pc + 1;

	/* figure out how long the kernel name is */
	pc = strchr(p, ' ');
	if (pc == NULL)
		pc = p + strlen(p);

	if (p == pc) {
		/* empty, use the default kernel name */
		namelen = 1 + (p - line) + strlen(KERNEL_NAME);
		name = (char *)alloc(namelen);
		if (name == NULL)
			panic("out of memory");
		memcpy(name, line, p - line);
		memcpy(name + (p - line), KERNEL_NAME, sizeof(KERNEL_NAME));
	} else {
		namelen = pc - line;
		name = (char *)alloc(1 + namelen);
		if (name == NULL)
			panic("out of memory");
		memcpy(name, line, namelen);
		name[namelen] = '\0';
	}
	*filep = name;

	/*
	 * If this commandline is the one passed by the PROM, then look
	 * for options specific to the standalone code.
	 */

	if (first) {
		p = stws(p);
		while (*p != '\0') {
			if (*p++ == '-')
				while (*p != ' ' && *p != '\0')
					switch (*p++) {
					case 'a':
						boothowto |= RB_ASKNAME;
						break;
					}
			p = stws(p);
		}
	}

	return 0;
}
@


1.6
log
@Support for oaic in the boot blocks. Cope with older prom putting a \r at
the end of the commandline. Clean up a few stale comments. Crank boot blocks
version to 0.3.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse_args.c,v 1.5 2013/10/10 21:22:07 miod Exp $ */
@


1.5
log
@Misc cleanups and small fixes. Boot controller/unit/lun information passed
to the kernel will now match the device the kernel is loaded from, not the
device the boot blocks are loaded from (this allows one to netboot the
boot blocks to boot a kernel from a local disk).
@
text
@d1 1
a1 1
/*	$OpenBSD: parse_args.c,v 1.4 2013/10/09 20:04:39 miod Exp $ */
d125 2
a126 2
					case 'z':
						boothowto |= BOOT_ETHERNET_ZERO;
@


1.4
log
@Fix parse_args() to ignore device specification and correctly append the
default kernel name if only a boot device is specified.
This makes boot paths like "sd()" auto-boot without asking for a kernel name.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse_args.c,v 1.3 2013/10/08 21:55:22 miod Exp $ */
d85 5
@


1.3
log
@Early stages of a working disk bootloader for OpenBSD/aviion.
Currently limited to oosiop(4) controllers, and thus models 4600 and 530.
There are some rough edges to polish to avoid manual interaction (kernel
currently can't figure its boot device when booted from disk), but the hard
(and hair-pulling) work is over.
And we can have kernel symbols again!
@
text
@d1 1
a1 1
/*	$OpenBSD: parse_args.c,v 1.2 2010/04/18 15:09:00 miod Exp $ */
d57 1
a57 1
	const char *p;
d67 19
d87 14
a100 7
	for (p = line; *p != '\0' && *p != ' '; p++) ;
	namelen = p - line;

	/* empty, use the default */
	if (namelen == 0)
		name = KERNEL_NAME;
	else {
@


1.2
log
@Parse commandline options in netboot, and force the onboard ethernet address
to be 00:00:00:00:00:00 if `-z' is passed; this allows netboot to work on a
machine which has lost its nvram (despite the ethernet address not being
stored in nvram at all, stupid prom can't be bothered to get it right...).
Crank netboot version.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse_args.c,v 1.1 2006/05/16 22:48:18 miod Exp $ */
a31 1
#include <a.out.h>
d41 3
a43 3
static char *stws(char *);
static char *
stws(char *p)
d55 1
a55 1
parse_args(char *line, char **filep, int first)
d57 1
a57 1
	char *s = NULL, *p;
a66 23
	/*
	 * The command line should be under the form
	 *   devtype(...)filename args
	 * such as
	 *   inen()bsd -s
	 * and we only care about the kernel name here.
	 *
	 * However, if the kernel could not be loaded, and we asked the
	 * user, he may not give the devtype() part - especially since
	 * at the moment we only support inen() anyway.
	 */

	/* search for a set of braces */
	for (p = line; *p != '\0' && *p != '('; p++) ;
	if (*p != '\0') {
		for (p = line; *p != '\0' && *p != ')'; p++) ;
		if (*p != '\0')
			s = ++p;
	}
		
	if (s == NULL)
		s = line;

d68 2
a69 2
	for (p = s; *p != '\0' && *p != ' '; p++) ;
	namelen = p - s;
d78 1
a78 1
		bcopy(s, name, namelen);
@


1.1
log
@Network bootloader for AV400 series, will load a native kernel. Still some
rough edges to sort out, but enough to successfully boot a kernel.
Will not work on series 530 yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse_args.c,v 1.4 2003/06/04 16:36:15 deraadt Exp $ */
d39 16
d56 1
a56 1
parse_args(char *line, char **filep)
d58 9
a66 5
	char *name = NULL, *p;

	/* recognize the special ``halt'' keyword */
	if (strcmp(line, "halt") == 0)
		return (1);
d85 1
a85 1
			name = ++p;
d88 2
a89 2
	if (name == NULL)
		name = line;
d91 3
a93 3
	/* now insert a NUL before any option */
	for (p = name; *p != '\0' && *p != ' '; p++) ;
	*p = '\0';
d95 2
a96 2
	/* no name, use the default */
	if (*name == '\0')
d98 13
d112 15
a126 2
	*filep = name;
	return (0);
@

