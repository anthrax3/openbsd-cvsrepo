head	1.5;
access;
symbols
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	AV400_20060509:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.21.20.07.18;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2013.09.16.16.30.50;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.19.22.05.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.19.21.52.46;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.09.18.13.37;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.05.09.18.13.37;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Switch to MI dart(4) driver.
@
text
@/*	$OpenBSD: dart_syscon.c,v 1.4 2013/09/16 16:30:50 miod Exp $	*/
/*
 * Copyright (c) 2006, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/board.h>
#include <machine/cpu.h>

#include <machine/avcommon.h>
#include <aviion/dev/sysconvar.h>
#include <aviion/dev/dartvar.h>

int	dart_syscon_match(struct device *parent, void *self, void *aux);
void	dart_syscon_attach(struct device *parent, struct device *self, void *aux);

struct cfattach dart_syscon_ca = {
	sizeof(struct dartsoftc), dart_syscon_match, dart_syscon_attach
};

int
dart_syscon_match(struct device *parent, void *cf, void *aux)
{
	struct confargs *ca = aux;
	bus_space_handle_t ioh;
	int rc;

	/*
	 * We do not accept empty locators here...
	 */
	if (ca->ca_paddr == (paddr_t)-1)
		return (0);

	if (bus_space_map(ca->ca_iot, ca->ca_paddr, DART_SIZE, 0, &ioh) != 0)
		return (0);
	rc = badaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
	bus_space_unmap(ca->ca_iot, ca->ca_paddr, DART_SIZE);

	return (rc == 0);
}

void
dart_syscon_attach(struct device *parent, struct device *self, void *aux)
{
	struct dartsoftc *sc = (struct dartsoftc *)self;
	struct confargs *ca = aux;
	bus_space_handle_t ioh;
	u_int intsrc;

	sc->sc_iot = ca->ca_iot;
	if (bus_space_map(sc->sc_iot, ca->ca_paddr, DART_SIZE, 0, &ioh) != 0) {
		printf(": can't map registers!\n");
		return;
	}
	sc->sc_ioh = ioh;

	if (ca->ca_paddr == CONSOLE_DART_BASE) {
		intsrc = INTSRC_DUART1;
		sc->sc_console = 1;	/* XXX for now */
		printf(": console");
	} else {
		intsrc = INTSRC_DUART2;
		sc->sc_console = 0;
	}

	/* enable interrupts */
	sc->sc_ih.ih_fn = dartintr;
	sc->sc_ih.ih_arg = sc;
	sc->sc_ih.ih_flags = 0;
	sc->sc_ih.ih_ipl = IPL_TTY;

	sysconintr_establish(intsrc, &sc->sc_ih, self->dv_xname);

	dart_common_attach(sc);
}
@


1.4
log
@Drop the ipl locator from syscon attachments, and have the syscon children
request explicit IPL_xxx levels.

Fix VME Ethernet config stanzas to request IPL_NET.
@
text
@d1 1
a1 1
/*	$OpenBSD: dart_syscon.c,v 1.3 2007/12/19 22:05:06 miod Exp $	*/
@


1.3
log
@Overhaul interrupt handling, in order to make it (arguably) simpler and
more board design-independent.

The main changes are:
- define logical interrupt sources, which match the on-board devices as
  well as the seven VME interrupt sources. Use these whenever possible
  when registering interrupts in the drivers, so that the actual interrupt
  mask layouts are hidden.
- make the on-board and VME interrupt handlers separate. On-board interrupt
  handlers are not really associated to an interrupt vector, only to a
  given interrupt source, and only one handler can be registered for a
  logical interrupt source. On the other hand, VME interrupts come with a
  vector number, and can be shared. This allows VME devices to really use
  the whole 256 vectors space, starting at vector zero.
- update the real interrupt masks upon interrupt handler registration and
  removal, so that only interrupt sources for which a handler exists may
  be enabled.
- update the VME interrupt allocation logic to allow exclusive vector
  allocation.
- move the Z8536 clock routines to their own file, since they are not
  AV400-specific; while there, calibrate the delay constant upon startup
  for more accurate delay().

The vme driver is the only one left with AV400 tentacles left, to be fixed
very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: dart_syscon.c,v 1.2 2007/12/19 21:52:46 miod Exp $	*/
a74 3
	if (ca->ca_ipl < 0)
		ca->ca_ipl = IPL_TTY;

d95 1
a95 1
	sc->sc_ih.ih_ipl = ca->ca_ipl;
@


1.2
log
@The serial console address apparently does not change accross 88100 designs,
so stash it in a board-independent header.
@
text
@d1 1
a1 1
/*	$OpenBSD: dart_syscon.c,v 1.1.1.1 2006/05/09 18:13:37 miod Exp $	*/
d32 1
d36 1
a36 2

#include <aviion/dev/sysconreg.h>
d73 1
a73 1
	u_int vec;
d86 1
a86 1
		vec = SYSCV_SCC;
d90 1
a90 1
		vec = SYSCV_SCC2;
d97 1
a97 1
	sc->sc_ih.ih_wantframe = 0;
d100 1
a100 1
	sysconintr_establish(vec, &sc->sc_ih, self->dv_xname);
@


1.1
log
@Enter OpenBSD/aviion, a port to the m88k-based Data General AViiON workstations. Currently restricted to diskless serial console, tested on AV410 only; many thanks to Chris Tribo for documentation and testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
#include <machine/av400.h>
d85 1
a85 1
	if (ca->ca_paddr == DART_BASE) {
@


1.1.1.1
log
@Oops, correct import this time.
@
text
@@
