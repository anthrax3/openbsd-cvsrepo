head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.30
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.28
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.24
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.20
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.22
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.14
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.18
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2010.11.27.19.57.23;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.09.19.57.50;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.03.18.12.52;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.20.22.07.09;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.30.21.48.56;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.25.20.18.06;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.19.18.28.37;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@/*	$OpenBSD: db_sstep.c,v 1.6 2007/12/09 19:57:50 miod Exp $	*/
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/db_machdep.h>

#include <ddb/db_access.h>	/* db_get_value() */
#include <ddb/db_break.h>	/* db_breakpoint_t */
#include <ddb/db_run.h>

/*
 * Support routines for software single step.
 *
 * Author: Daniel Stodolsky (danner@@cs.cmu.edu)
 *
 */

/*
 * We can not use the MI ddb SOFTWARE_SSTEP facility, since the 88110 will use
 * hardware single stepping.
 * Moreover, our software single stepping implementation is tailor-made for the
 * 88100 and faster than the MI code.
 */

#ifdef M88100

boolean_t	inst_branch_or_call(u_int);
db_addr_t	branch_taken(u_int, db_addr_t, db_regs_t *);

db_breakpoint_t db_not_taken_bkpt = 0;
db_breakpoint_t db_taken_bkpt = 0;

/*
 * Returns TRUE is the instruction a branch, jump or call instruction
 * (br, bb0, bb1, bcnd, jmp, bsr, jsr)
 */
boolean_t
inst_branch_or_call(u_int ins)
{
	/* check high five bits */
	switch (ins >> (32 - 5)) {
	case 0x18: /* br */
	case 0x19: /* bsr */
	case 0x1a: /* bb0 */
	case 0x1b: /* bb1 */
	case 0x1d: /* bcnd */
		return (TRUE);
	case 0x1e: /* could be jmp or jsr */
		if ((ins & 0xfffff3e0) == 0xf400c000)
			return (TRUE);
	}

	return (FALSE);
}

/*
 * branch_taken(instruction, program counter, regs)
 *
 * instruction will be a control flow instruction location at address pc.
 * Branch taken is supposed to return the address to which the instruction
 * would jump if the branch is taken.
 */
db_addr_t
branch_taken(u_int inst, db_addr_t pc, db_regs_t *regs)
{
	u_int regno;

	/*
	 * Quick check of the instruction. Note that we know we are only
	 * invoked if inst_branch_or_call() returns TRUE, so we do not
	 * need to repeat the jmp and jsr stricter checks here.
	 */
	switch (inst >> (32 - 5)) {
	case 0x18: /* br */
	case 0x19: /* bsr */
		/* signed 26 bit pc relative displacement, shift left two bits */
		inst = (inst & 0x03ffffff) << 2;
		/* check if sign extension is needed */
		if (inst & 0x08000000)
			inst |= 0xf0000000;
		return (pc + inst);

	case 0x1a: /* bb0 */
	case 0x1b: /* bb1 */
	case 0x1d: /* bcnd */
		/* signed 16 bit pc relative displacement, shift left two bits */
		inst = (inst & 0x0000ffff) << 2;
		/* check if sign extension is needed */
		if (inst & 0x00020000)
			inst |= 0xfffc0000;
		return (pc + inst);

	default: /* jmp or jsr */
		regno = inst & 0x1f;
		return (regno == 0 ? 0 : regs->r[regno]);
	}
}

#endif	/* M88100 */

void
db_set_single_step(db_regs_t *regs)
{
#ifdef M88110
	if (CPU_IS88110) {
		/*
		 * On the 88110, we can use the hardware tracing facility...
		 */
		regs->epsr |= PSR_TRACE | PSR_SER;
	}
#endif
#ifdef M88100
	if (CPU_IS88100) {
		/*
		 * ... while the 88100 will use two breakpoints.
		 */
		db_addr_t pc = PC_REGS(regs);
		db_addr_t brpc;
		u_int inst;

		/*
		 * User was stopped at pc, e.g. the instruction
		 * at pc was not executed.
		 */
		db_read_bytes(pc, sizeof(inst), (caddr_t)&inst);

		/*
		 * Find if this instruction may cause a branch, and set up a
		 * breakpoint at the branch location.
		 */
		if (inst_branch_or_call(inst)) {
			brpc = branch_taken(inst, pc, regs);

			/* self-branches are hopeless */
			if (brpc != pc && brpc != 0)
				db_taken_bkpt = db_set_temp_breakpoint(brpc);
		}

		db_not_taken_bkpt = db_set_temp_breakpoint(pc + 4);
	}
#endif
}

void
db_clear_single_step(regs)
	db_regs_t *regs;
{
#ifdef M88110
	if (CPU_IS88110) {
		regs->epsr &= ~(PSR_TRACE | PSR_SER);
	}
#endif
#ifdef M88100
	if (CPU_IS88100) {
		if (db_taken_bkpt != 0) {
			db_delete_temp_breakpoint(db_taken_bkpt);
			db_taken_bkpt = 0;
		}
		if (db_not_taken_bkpt != 0) {
			db_delete_temp_breakpoint(db_not_taken_bkpt);
			db_not_taken_bkpt = 0;
		}
	}
#endif
}
@


1.6
log
@I honestly do not remember what 88110 errata convinced me to disable
out-of-order (superscalar) execution on these processors.

Since OoO brings a nice 50% to 250% speedup (as shown by ``openssl speed''),
it is definitely worth enabling.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_sstep.c,v 1.5 2006/05/03 18:12:52 miod Exp $	*/
a43 83

/*
 * inst_load(ins)
 * Returns the number of words the instruction loads. byte,
 * half and word count as 1; double word as 2
 */
int
inst_load(u_int ins)
{
	/* look at the top six bits, for starters */
	switch (ins >> (32 - 6)) {
	case 0x0: /* xmem byte imm */
	case 0x1: /* xmem word imm */
	case 0x2: /* unsigned half-word load imm */
	case 0x3: /* unsigned byte load imm */
	case 0x5: /* signed word load imm */
	case 0x6: /* signed half-word load imm */
	case 0x7: /* signed byte load imm */
		return (1);

	case 0x4: /* signed double word load imm */
		return (2);

	case 0x3d: /* load/store/xmem scaled/unscaled instruction */
		if ((ins & 0x0000c0e0) == 0x00000000)	/* is ld/st/xmem */
			/* look at bits 15-10 */
			switch ((ins & 0x0000fc00) >> 10) {
			case 0x0: /* xmem byte */
			case 0x1: /* xmem word */
			case 0x2: /* unsigned half word */
			case 0x3: /* unsigned byte load */
			case 0x5: /* signed word load */
			case 0x6: /* signed half-word load */
			case 0x7: /* signed byte load */
				return (1);

			case 0x4: /* signed double word load */
				return (2);
			}
		break;
	}

	return (0);
}

/*
 * inst_store
 * Like inst_load, except for store instructions.
 */
int
inst_store(u_int ins)
{
	/* decode top 6 bits again */
	switch (ins >> (32 - 6)) {
	case 0x0: /* xmem byte imm */
	case 0x1: /* xmem word imm */
	case 0x9: /* store word imm */
	case 0xa: /* store half-word imm */
	case 0xb: /* store byte imm */
		return (1);

	case 0x8: /* store double word */
		return (2);

	case 0x3d: /* load/store/xmem scaled/unscaled instruction */
		if ((ins & 0x0000c0e0) == 0x00000000)	/* is ld/st/xmem */
			/* look at bits 15-10 */
			switch ((ins & 0x0000fc00) >> 10) {
			case 0x0: /* xmem byte imm */
			case 0x1: /* xmem word imm */
			case 0x9: /* store word */
			case 0xa: /* store half-word */
			case 0xb: /* store byte */
				return (1);

			case 0x8: /* store double word */
				return (2);
			}
		break;
	}

	return (0);
}
@


1.5
log
@Fix a (documented) logic botch in inst_load().
@
text
@d1 1
a1 1
/*	$OpenBSD: db_sstep.c,v 1.4 2005/11/20 22:07:09 miod Exp $	*/
d260 1
a260 2
		/* do not remove PSR_SER as we don't enable OoO */
		regs->epsr &= ~PSR_TRACE;
@


1.4
log
@Complete overhaul of the single-stepping ddb code, close in spirit to the
ptrace single-stepping changes of a few months ago; simpler and smaller
than the (previously used) MI fallback implementation on 88100.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_sstep.c,v 1.3 2004/09/30 21:48:56 miod Exp $	*/
d68 3
a70 4
		if ((ins & 0xf400c0e0) == 0xf4000000)	/* is load/xmem */
			/* look at bits 15-5, but mask bits 8-9 */
			switch ((ins & 0x0000fce0) >> 5) {
/* XXX previous test implies these values can never hit -- miod */
d109 3
a111 4
		/* check bits 15,14,12,7,6,5 are all 0 */
		if ((ins & 0x0000d0e0) == 0)
			/* decode bits 10-13 */
			switch ((ins & 0x00003c00) >> 10) {
@


1.3
log
@Introduce sparc-like CPU_ISFOO macros, to short-circuit evaluations when
compiling for one flavour only.

This makes code slightly smaller on all m88k-based platforms (my roughly
1KB), and saves more than meets the eye on luna88k, which is m88100-based.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_sstep.c,v 1.2 2004/06/25 20:18:06 miod Exp $	*/
d36 1
a44 31
boolean_t inst_delayed(unsigned int ins);

#ifdef INTERNAL_SSTEP
db_breakpoint_t db_not_taken_bkpt = 0;
db_breakpoint_t db_taken_bkpt = 0;
#endif

/*
 * Returns TRUE is the instruction a branch or jump instruction
 * (br, bb0, bb1, bcnd, jmp) but not a function call (bsr or jsr)
 */
boolean_t
inst_branch(ins)
	unsigned int ins;
{
	/* check high five bits */
	switch (ins >> (32 - 5)) {
	case 0x18: /* br */
	case 0x1a: /* bb0 */
	case 0x1b: /* bb1 */
	case 0x1d: /* bcnd */
		return TRUE;
		break;
	case 0x1e: /* could be jmp */
		if ((ins & 0xfffffbe0U) == 0xf400c000U)
			return TRUE;
	}

	return FALSE;
}

d50 2
a51 3
unsigned
inst_load(ins)
	unsigned int ins;
a56 1

d62 1
a62 1
		return 1;
d65 1
a65 1
		return 2;
d68 4
a71 2
		if ((ins & 0xf400c0e0U) == 0xf4000000U)	/* is load/xmem */
			switch ((ins & 0x0000fce0) >> 5) { /* look at bits 15-5, but mask bits 8-9 */
d79 1
a79 1
				return 1;
d82 2
a83 2
				return 2;
			} /* end switch load/xmem  */
d85 1
a85 1
	} /* end switch 32-6 */
d87 1
a87 1
	return 0;
d94 2
a95 3
unsigned
inst_store(ins)
	unsigned int ins;
d104 1
a104 1
		return 1;
d107 2
a108 1
		return 2;
d111 3
a113 2
		if ((ins & 0x0000d0e0U) == 0)
			switch ((ins & 0x00003c00U) >> 10) { /* decode bits 10-13 */
d119 1
a119 1
				return 1;
d122 2
a123 2
				return 2;
			} /* end switch store/xmem */
d125 1
a125 1
	} /* end switch 32-6 */
d127 1
a127 1
	return 0;
d131 4
a134 3
 * inst_delayed
 * Returns TRUE if this instruction is followed by a delay slot.
 * Could be br.n, bsr.n bb0.n, bb1.n, bcnd.n or jmp.n or jsr.n
a135 13
boolean_t
inst_delayed(ins)
	unsigned int ins;
{
	/* check the br, bsr, bb0, bb1, bcnd cases */
	switch ((ins & 0xfc000000U) >> (32 - 6)) {
	case 0x31: /* br */
	case 0x33: /* bsr */
	case 0x35: /* bb0 */
	case 0x37: /* bb1 */
	case 0x3b: /* bcnd */
		return TRUE;
	}
d137 7
a143 4
	/* check the jmp, jsr cases */
	/* mask out bits 0-4, bit 11 */
	return ((ins & 0xfffff7e0U) == 0xf400c400U) ? TRUE : FALSE;
}
d146 2
a147 14
 * next_instr_address(pc,delay_slot,task) has the following semantics.
 * Let inst be the instruction at pc.
 * If delay_slot = 1, next_instr_address should return
 * the address of the instruction in the delay slot; if this instruction
 * does not have a delay slot, it should return pc.
 * If delay_slot = 0, next_instr_address should return the
 * address of next sequential instruction, or pc if the instruction is
 * followed by a delay slot.
 *
 * 91-11-28 jfriedl: I think the above is wrong. I think it should be:
 *	if delay_slot true, return address of the delay slot if there is one,
 *			    return pc otherwise.
 *	if delay_slot false, return (pc + 4) regardless.
 *
d149 2
a150 4
db_addr_t
next_instr_address(pc, delay_slot)
	db_addr_t pc;
	unsigned delay_slot;
d152 11
a162 7
	if (delay_slot == 0)
		return pc + 4;
	else {
		if (inst_delayed(db_get_value(pc, sizeof(int), FALSE)))
			return pc + 4;
		else
			return pc;
d164 2
a167 1

d169 1
a169 1
 * branch_taken(instruction, program counter, func, func_data)
d173 1
a173 5
 * would jump if the branch is taken. Func can be used to get the current
 * register values when invoked with a register number and func_data as
 * arguments.
 *
 * If the instruction is not a control flow instruction, panic.
d176 1
a176 5
branch_taken(inst, pc, func, func_data)
	u_int inst;
	db_addr_t pc;
	db_expr_t (*func)(db_regs_t *, int);
	db_regs_t *func_data;
d178 10
a187 2
	/* check if br/bsr */
	if ((inst & 0xf0000000U) == 0xc0000000U) {
d189 1
a189 1
		inst = (inst & 0x03ffffffU) << 2;
d191 3
a193 4
		if (inst & 0x08000000U)
			inst |= 0xf0000000U;
		return pc + inst;
	}
d195 3
a197 5
	/* check if bb0/bb1/bcnd case */
	switch ((inst & 0xf8000000U)) {
	case 0xd0000000U: /* bb0 */
	case 0xd8000000U: /* bb1 */
	case 0xe8000000U: /* bcnd */
d199 1
a199 1
		inst = (inst & 0x0000ffffU) << 2;
d201 7
a207 3
		if (inst & 0x00020000U)
			inst |= 0xfffc0000U;
		return pc + inst;
a208 10

	/* check jmp/jsr case */
	/* check bits 5-31, skipping 10 & 11 */
	if ((inst & 0xfffff3e0U) == 0xf400c000U) {
		return (*func)(func_data, (inst & 0x0000001fU));  /* the register value */
	}


	panic("branch_taken");
	return 0; /* keeps compiler happy */
d211 1
a211 5
/*
 * getreg_val - handed a register number and an exception frame.
 *              Returns the value of the register in the specified
 *              frame. Only makes sense for general registers.
 */
a212 14
db_expr_t
getreg_val(frame, regno)
	db_regs_t *frame;
	int regno;
{
	if (regno == 0)
		return 0;
	else if (regno < 31)
		return frame->r[regno];
	else
		panic("bad register number (%d) to getreg_val.", regno);
}

#ifdef INTERNAL_SSTEP
d214 1
a214 2
db_set_single_step(regs)
	db_regs_t *regs;
d217 6
a222 2
	if (CPU_IS88110)
		(regs)->epsr |= PSR_TRACE | PSR_SER;
d226 3
a229 1
#ifndef SOFTWARE_SSTEP_EMUL
d237 11
a247 4
		inst = db_get_value(pc, sizeof(int), FALSE);
		if (inst_branch(inst) || inst_call(inst) || inst_return(inst)) {
			brpc = branch_taken(inst, pc, getreg_val, regs);
			if (brpc != pc) {	/* self-branches are hopeless */
a248 5
			}
#if 0
			/* XXX this seems like a true bug, no?  */
			pc = next_instr_address(pc, 1);
#endif
d250 2
a251 3
#endif /*SOFTWARE_SSTEP_EMUL*/
		pc = next_instr_address(pc, 0);
		db_not_taken_bkpt = db_set_temp_breakpoint(pc);
d263 1
a263 1
		(regs)->epsr &= ~PSR_TRACE;
a278 1
#endif
@


1.2
log
@Do not clear PSR_SER on 88110 when leaving single-stepping mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_sstep.c,v 1.1 2004/06/19 18:28:37 miod Exp $	*/
d291 2
a292 1
	if (cputyp == CPU_88110) {
d294 3
a296 1
	} else {
d321 1
d328 2
a329 1
	if (cputyp == CPU_88110) {
d332 4
a335 1
	} else {
d345 1
@


1.1
log
@Share common ddb files accross m88k platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_sstep.c,v 1.14 2004/01/07 17:52:30 miod Exp $	*/
d292 1
a292 1
		((regs)->epsr |= (PSR_TRACE | PSR_SER));
d325 2
a326 1
		((regs)->epsr &= ~(PSR_TRACE | PSR_SER));
@

