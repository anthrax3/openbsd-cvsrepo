head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.12
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.10
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.6
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.23.0.10
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.14
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.12
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.8
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.6
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.4
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.6
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.24
date	2015.07.03.15.12.49;	author miod;	state Exp;
branches;
next	1.23;
commitid	aKraD4sjb5ya2ZKN;

1.23
date	2011.10.09.17.01.34;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2010.09.28.20.27.55;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2009.05.02.14.32.29;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.15.20.39.53;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.21.18.35.22;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.08.21.40.58;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2007.12.22.17.14.39;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.12.21.23.56.54;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.12.02.21.28.40;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.15.21.27.22;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.15.21.24.14;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.15.21.23.16;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.14.23.12.46;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.06.21.42.56;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.10.15.53.52;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.12.19.59.52;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.18.22.49.43;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.17.16.08.01;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.03.19.01.14;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.03.14.30.06;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.28.22.21.15;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.13.21.49.17;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.29.14.33.27;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.06.07.20.19.30;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Rename mtx_cpu to mtx_owner for consistency with the other platforms.
@
text
@#	$OpenBSD: genassym.cf,v 1.23 2011/10/09 17:01:34 miod Exp $
#
# Copyright (c) 1982, 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@@(#)genassym.c	7.8 (Berkeley) 5/7/91
#	$Id: genassym.cf,v 1.23 2011/10/09 17:01:34 miod Exp $
#

include <sys/param.h>
include <sys/buf.h>
include <sys/time.h>
include <sys/proc.h>
include <sys/mbuf.h>
include <sys/msgbuf.h>

include <machine/cpu.h>
include <machine/mutex.h>
include <machine/trap.h>
include <machine/psl.h>
include <machine/vmparam.h>

include <sys/syscall.h>
include <sys/user.h>

# initialization PSR value
define	KERNEL_PSR	PSR_MODE | PSR_SFD | PSR_SFD2 | PSR_IND

# proc fields and values
struct	proc
member	p_addr
member	p_stat
member	p_cpu
member	P_ASTPENDING	p_md.md_astpending

export	SONPROC

# cpu fields
struct	cpu_info
member	ci_flags
member	ci_curproc
member	ci_curpcb
member	ci_curpmap
member	ci_pfsr_i0
member	ci_pfsr_i1
member	ci_pfsr_d0
member	ci_pfsr_d1
member	ci_want_resched
member	ci_softipi_cb
ifdef DIAGNOSTIC
member	ci_mutex_level
endif

# pcb fields
struct	pcb
member	pcb_onfault
member	PCB_USER_STATE	user_state

# system calls
export	SYS_exit
export	SYS_sigreturn

# exception frame
struct	trapframe
member	EF_R0		tf_r[0]
member	EF_FPSR		tf_fpsr
member	EF_FPCR		tf_fpcr
member	EF_EPSR		tf_epsr
member	EF_SXIP		tf_sxip
member	EF_SFIP		tf_sfip
member	EF_SNIP		tf_snip
member	EF_SSBR		tf_ssbr
member	EF_DMT0		tf_dmt0
member	EF_DMD0		tf_dmd0
member	EF_DMA0		tf_dma0
member	EF_DMT1		tf_dmt1
member	EF_DMD1		tf_dmd1
member	EF_DMA1		tf_dma1
member	EF_DMT2		tf_dmt2
member	EF_DMD2		tf_dmd2
member	EF_DMA2		tf_dma2
member	EF_FPECR	tf_fpecr
member	EF_FPHS1	tf_fphs1
member	EF_FPLS1	tf_fpls1
member	EF_FPHS2	tf_fphs2
member	EF_FPLS2	tf_fpls2
member	EF_FPPT		tf_fppt
member	EF_FPRH		tf_fprh
member	EF_FPRL		tf_fprl
member	EF_FPIT		tf_fpit
member	EF_VECTOR	tf_vector
member	EF_MASK		tf_mask
member	EF_FLAGS	tf_flags
member	EF_RET		tf_scratch1
member	EF_IPFSR	tf_ipfsr
member	EF_DPFSR	tf_dpfsr
member	EF_CPU		tf_cpu
member	EF_EXIP		tf_exip
member	EF_ENIP		tf_enip
member	EF_DSR		tf_dsr
member	EF_DLAR		tf_dlar
member	EF_DPAR		tf_dpar
member	EF_ISR		tf_isr
member	EF_ILAR		tf_ilar
member	EF_IPAR		tf_ipar
member	EF_ISAP		tf_isap
member	EF_DSAP		tf_dsap
member	EF_IUAP		tf_iuap
member	EF_DUAP		tf_duap

# more (machine-dependent) pcb fields
struct	m88100_pcb
member	pcb_pc
member	pcb_r14
member	pcb_r15
member	pcb_r16
member	pcb_r17
member	pcb_r18
member	pcb_r19
member	pcb_r20
member	pcb_r21
member	pcb_r22
member	pcb_r23
member	pcb_r24
member	pcb_r25
member	pcb_r26
member	pcb_r27
member	pcb_r28
member	pcb_r29
member	pcb_r30
member	pcb_sp
member	pcb_fcr62
member	pcb_fcr63

# mutex fields
struct	mutex
member	mtx_lock
member	mtx_wantipl
member	mtx_oldipl
member	mtx_owner
@


1.23
log
@Rework secondary processor initialization. cmmu initialization is now
performed much earlier in the processor startup.
No visible change, paves the way for the much important diff three commits
from here.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.22 2010/09/28 20:27:55 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.22 2010/09/28 20:27:55 miod Exp $
d164 1
a164 1
member	mtx_cpu
@


1.22
log
@Implement a per-cpu held mutex counter if DIAGNOSTIC on all non-x86 platforms,
to complete matthew@@'s commit of a few days ago, and drop __HAVE_CPU_MUTEX_LEVEL
define. With help from, and ok deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.21 2009/05/02 14:32:29 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.21 2009/05/02 14:32:29 miod Exp $
d64 1
@


1.21
log
@Drop the pm_cpus bitmask field from struct pmap, and instead remember the
currently active userland pmap in each processors struct cpu_info.

This thus skips the complete tlb flush if idle switches back to
the proc previously running on this processor.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.20 2009/03/15 20:39:53 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.20 2009/03/15 20:39:53 miod Exp $
d73 3
@


1.20
log
@Generic softinterrupt support for m88k based platforms, adapted from arm
with different locking mechanism. 88110 soft ipi are replaced with an
ipi callback which is checked upon return from exception (it can not be kept
as a softintr, as the generic softinterrupt code doesn't have per-cpu
pending softintr queues).
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.19 2009/02/21 18:35:22 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.19 2009/02/21 18:35:22 miod Exp $
d66 1
@


1.19
log
@Get rid of 88110 nmi stacks. This was a good idea, but I outsmarted myself
since it was intended to service NMI occuring in user mode, and we could
end up invoking preempt() and have another cpu start using this stack,
with interesting results.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.18 2009/02/08 21:40:58 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.18 2009/02/08 21:40:58 miod Exp $
d71 1
a71 1
member	ci_softintr
@


1.18
log
@On 88110 processors, use a separate stack to handle NMI; these can occur
while we are switching pcbs and all sort of bad things could happen.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.17 2007/12/22 17:14:39 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.17 2007/12/22 17:14:39 miod Exp $
a71 1
member	ci_nmi_stack
@


1.17
log
@Move initial PSR initialization to a separate routine, instead of duplicating
it five times.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.16 2007/12/21 23:56:54 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.16 2007/12/21 23:56:54 miod Exp $
d72 1
@


1.16
log
@Change the EF_xxx constants to be real offsets within the trapframe, instead
of offsets / sizeof(register_t), and nuke the REG_OFF macro. No functional
change.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.15 2007/12/02 21:28:40 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.15 2007/12/02 21:28:40 miod Exp $
d49 3
@


1.15
log
@Do not pass UPAGES and USPACE (under the name USIZE) in assym.h, code which
needs it includes <machine/param.h> already.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.14 2007/11/15 21:27:22 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.14 2007/11/15 21:27:22 miod Exp $
d73 1
a73 1
member	PCB_USER_STATE		user_state
d79 47
a125 50
# trapframe element indexes
define	EF_R0		offsetof(struct trapframe, tf_r[0]) / sizeof(int)
define	EF_FPSR		offsetof(struct trapframe, tf_fpsr) / sizeof(int)
define	EF_FPCR		offsetof(struct trapframe, tf_fpcr) / sizeof(int)
define	EF_EPSR		offsetof(struct trapframe, tf_epsr) / sizeof(int)
define	EF_SXIP		offsetof(struct trapframe, tf_sxip) / sizeof(int)
define	EF_SFIP		offsetof(struct trapframe, tf_sfip) / sizeof(int)
define	EF_SNIP		offsetof(struct trapframe, tf_snip) / sizeof(int)
define	EF_SSBR		offsetof(struct trapframe, tf_ssbr) / sizeof(int)
define	EF_DMT0		offsetof(struct trapframe, tf_dmt0) / sizeof(int)
define	EF_DMD0		offsetof(struct trapframe, tf_dmd0) / sizeof(int)
define	EF_DMA0		offsetof(struct trapframe, tf_dma0) / sizeof(int)
define	EF_DMT1		offsetof(struct trapframe, tf_dmt1) / sizeof(int)
define	EF_DMD1		offsetof(struct trapframe, tf_dmd1) / sizeof(int)
define	EF_DMA1		offsetof(struct trapframe, tf_dma1) / sizeof(int)
define	EF_DMT2		offsetof(struct trapframe, tf_dmt2) / sizeof(int)
define	EF_DMD2		offsetof(struct trapframe, tf_dmd2) / sizeof(int)
define	EF_DMA2		offsetof(struct trapframe, tf_dma2) / sizeof(int)
define	EF_FPECR	offsetof(struct trapframe, tf_fpecr) / sizeof(int)
define	EF_FPHS1	offsetof(struct trapframe, tf_fphs1) / sizeof(int)
define	EF_FPLS1	offsetof(struct trapframe, tf_fpls1) / sizeof(int)
define	EF_FPHS2	offsetof(struct trapframe, tf_fphs2) / sizeof(int)
define	EF_FPLS2	offsetof(struct trapframe, tf_fpls2) / sizeof(int)
define	EF_FPPT		offsetof(struct trapframe, tf_fppt) / sizeof(int)
define	EF_FPRH		offsetof(struct trapframe, tf_fprh) / sizeof(int)
define	EF_FPRL		offsetof(struct trapframe, tf_fprl) / sizeof(int)
define	EF_FPIT		offsetof(struct trapframe, tf_fpit) / sizeof(int)
define	EF_VECTOR	offsetof(struct trapframe, tf_vector) / sizeof(int)
define	EF_MASK		offsetof(struct trapframe, tf_mask) / sizeof(int)
define	EF_FLAGS	offsetof(struct trapframe, tf_flags) / sizeof(int)
define	EF_RET		offsetof(struct trapframe, tf_scratch1) / sizeof(int)
define	EF_IPFSR	offsetof(struct trapframe, tf_ipfsr) / sizeof(int)
define	EF_DPFSR	offsetof(struct trapframe, tf_dpfsr) / sizeof(int)
define	EF_CPU		offsetof(struct trapframe, tf_cpu) / sizeof(int)

# m88110 trapframe element indexes
define	EF_EXIP		offsetof(struct trapframe, tf_exip) / sizeof(int)
define	EF_ENIP		offsetof(struct trapframe, tf_enip) / sizeof(int)
define	EF_DSR		offsetof(struct trapframe, tf_dsr) / sizeof(int)
define	EF_DLAR		offsetof(struct trapframe, tf_dlar) / sizeof(int)
define	EF_DPAR		offsetof(struct trapframe, tf_dpar) / sizeof(int)
define	EF_ISR		offsetof(struct trapframe, tf_isr) / sizeof(int)
define	EF_ILAR		offsetof(struct trapframe, tf_ilar) / sizeof(int)
define	EF_IPAR		offsetof(struct trapframe, tf_ipar) / sizeof(int)
define	EF_ISAP		offsetof(struct trapframe, tf_isap) / sizeof(int)
define	EF_DSAP		offsetof(struct trapframe, tf_dsap) / sizeof(int)
define	EF_IUAP		offsetof(struct trapframe, tf_iuap) / sizeof(int)
define	EF_DUAP		offsetof(struct trapframe, tf_duap) / sizeof(int)

define	SIZEOF_EF	sizeof(struct trapframe)
@


1.14
log
@Check for curcpu()->ci_softintr being nonzero before invoking dosoftint(),
in the common case, this saves us two potentially expensive setipl() calls.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.13 2007/11/15 21:24:14 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.13 2007/11/15 21:24:14 miod Exp $
a68 6

# general constants
export	UPAGES
# We export USPACE under another name to allow C code to include "assym.h".
#export	USPACE
define	USIZE			USPACE
@


1.13
log
@Resolve the struct trapframe tf_mode/tf_flags duality by getting rid of
the tf_mode name. This field only contains flags used internally by the
exception processing code.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.12 2007/11/15 21:23:16 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.12 2007/11/15 21:23:16 miod Exp $
d68 1
@


1.12
log
@Stop referring the initial kernel stack as the ``interrupt stack''. It's
been years since it has last been used for that purpose, so name it the
initialization/startup stack.

While there, do not store the initialization stack in cpu_info, and have
secondary_pre_main() return its value so that the bootstrap code does not
need to fetch it from cpu_info.

This might be reconsidered when the startup stacks will be freed after they
are not used anymore, but there are more things to do first.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.11 2007/11/14 23:12:46 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.11 2007/11/14 23:12:46 miod Exp $
d113 1
a113 1
define	EF_MODE		offsetof(struct trapframe, tf_mode) / sizeof(int)
@


1.11
log
@Merge the ci_alive and ci_primary boolean values of struct cpu_info into
a single ci_flags bitfield.

Also, set_cpu_number() will no longer set CIF_PRIMARY on the primary processor,
it's up to the initialization code to do this.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.10 2007/11/06 21:42:56 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.10 2007/11/06 21:42:56 miod Exp $
a66 1
member	ci_init_stack
@


1.10
log
@Remove the now unused idle_u, and call the secondary processors startup
stack a startup stack.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.9 2007/10/10 15:53:52 art Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.9 2007/10/10 15:53:52 art Exp $
a62 1
member	ci_primary
@


1.9
log
@Make context switching much more MI:
 - Move the functionality of choosing a process from cpu_switch into
   a much simpler function: cpu_switchto. Instead of having the locore
   code walk the run queues, let the MI code choose the process we
   want to run and only implement the context switching itself in MD
   code.
 - Let MD context switching run without worrying about spls or locks.
 - Instead of having the idle loop implemented with special contexts
   in MD code, implement one idle proc for each cpu. make the idle
   loop MI with MD hooks.
 - Change the proc lists from the old style vax queues to TAILQs.
 - Change the sleep queue from vax queues to TAILQs. This makes
   wakeup() go from O(n^2) to O(n)

there will be some MD fallout, but it will be fixed shortly.
There's also a few cleanups to be done after this.

deraadt@@, kettenis@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.8 2007/05/12 19:59:52 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.8 2007/05/12 19:59:52 miod Exp $
d68 1
a68 1
member	ci_idle_pcb
@


1.8
log
@On multiprocessor kernels, update p->p_pcu on exit from the scheduler.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.7 2006/11/18 22:49:43 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.7 2006/11/18 22:49:43 miod Exp $
a51 2
member	p_forw
member	p_back
a53 1
member	p_wchan
a56 1
export	SRUN
@


1.7
log
@Stop saving and restoring the current ipl in the pcb when switching processes,
since we know we are at splsched().
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.6 2006/04/17 16:08:01 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.6 2006/04/17 16:08:01 miod Exp $
d57 1
@


1.6
log
@Save pointers to up to four CMMU PFSR registers into the cpu_info structure.
This allows the exception handling code to skip the PFSR address computations.

The net result is that the PFSR_SAVE code becomes much simpler and smaller,
and that all processors will now spend time in PFSR_SAVE - previously, cpu0
was favored and other processors took a bit more time.

Note that 8:1 configurations do not use these fields - but then this is a
fixed monoprocessor configuration, for which the existing code was already
doing The Right Thing.

Tested on luna88k (2:1) by aoyama@@, and on mvme88k (2:1 and 4:1) by me.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.5 2005/12/03 19:01:14 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.5 2005/12/03 19:01:14 miod Exp $
a142 1
member	pcb_ipl
@


1.5
log
@Fast __HAVE_MUTEX implementation for m88k platforms.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.4 2005/12/03 14:30:06 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.4 2005/12/03 14:30:06 miod Exp $
a65 1
member	ci_cpuid
d67 4
@


1.4
log
@Switch m88k ports to __HAVE_CPUINFO. Current cpu pointer is held in SR0
on all running processors.
Tested aoyama@@ and I
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.3 2005/11/28 22:21:15 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.3 2005/11/28 22:21:15 miod Exp $
d42 1
d161 7
@


1.3
log
@Switch to per-process AST flags and clean AST-related codepaths; speeds up
forks as a bonus.
Tested on luna88k and mvme88k by aoyama@@ martin@@ and I.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.2 2004/06/13 21:49:17 niklas Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.2 2004/06/13 21:49:17 niklas Exp $
d40 1
d45 1
d61 9
d72 2
@


1.2
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
#	$OpenBSD$
d31 1
a31 1
#	$Id$
d54 1
@


1.1
log
@Continue factorizing m88k common code, this time files in <arch>/<arch>
which were copied verbatim from mvme88k to luna88k.

This requires backing out syntactic sugar in mvme88k kernel configuration
files which would deduct the required processor types from the board models,
as the common code only depends upon the M88100 and M88110 defines.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.10 2004/01/12 07:46:17 miod Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.10 2004/01/12 07:46:17 miod Exp $
d56 1
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
d31 1
a31 1
#	$Id$
@


1.1.2.2
log
@SONPROC, ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.1.2.1 2004/06/05 23:09:48 niklas Exp $
d31 1
a31 1
#	$Id: genassym.cf,v 1.1.2.1 2004/06/05 23:09:48 niklas Exp $
a55 1
export	SONPROC
@


