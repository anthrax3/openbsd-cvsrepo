head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.18
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.16
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.25.18.38.06;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.28.17.49.38;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.02.21.32.41;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.22.05.53.56;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.22.04.54.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.29.14.33.27;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Switch m88k ports to ELF.
@
text
@#	$OpenBSD: m88110_mmu.S,v 1.6 2011/10/25 18:38:06 miod Exp $
/*
 * Copyright (c) 2000 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Steve Murphree, Jr.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <machine/asm.h>

/*
 * 88110 errata #20 (4.2) or #4 (5.1.1):
 * ``If a ldcr, stcr, fldcr, or fstcr instruction is located in the last
 *   word of an instruction page, and the fetch of the next page results
 *   in an mmu exception (invalid descriptor, tablewalk bus error,
 *   software atc miss), the exip and enip value may be incorrectly
 *   incremented to the second word of the page.
 *   Suggested fix: do not allow these instructions to occupy the last
 *   word of a page if this can occur.''
 *
 * This is why the following function are not inlines in asm.h, and are
 * aligned to 32 byte boundaries.
 *
 * Note that fldcr/fstcr are used in several places in userland (libc,
 * libpthread, afs lwp) which will need alignment hints as well to
 * avoid this. Sigh -- miod
 */

	.text

/* set routines */
	.align 5
ENTRY(set_icmd)
	FLUSH_PIPELINE
	stcr	%r2, ICMD
	jmp	%r1

	.align 5
ENTRY(set_ictl)
	FLUSH_PIPELINE
	stcr	%r2, ICTL
	NOP
	FLUSH_PIPELINE
	jmp	%r1

	.align 5
ENTRY(set_isar)
	stcr	%r2, ISAR
	jmp	%r1

	.align 5
ENTRY(set_isap)
	FLUSH_PIPELINE
	NOP
	stcr	%r2, ISAP
	jmp	%r1

	.align 5
ENTRY(set_iuap)
	FLUSH_PIPELINE
	NOP
 	stcr	%r2, IUAP
	jmp	%r1

	.align 5
ENTRY(set_iir)
	stcr	%r2, IIR 
	jmp	%r1

	.align 5
ENTRY(set_ibp)
	stcr	%r2, IBP 
	jmp	%r1

	.align 5
ENTRY(set_ippu)
	stcr	%r2, IPPU
	jmp	%r1

	.align 5
ENTRY(set_ippl)
	stcr	%r2, IPPL
	jmp	%r1

	.align 5
ENTRY(set_isr)
	stcr	%r2, ISR 
	jmp	%r1

	.align 5
ENTRY(set_dcmd)
	FLUSH_PIPELINE
	stcr	%r2, DCMD
	jmp	%r1

	.align 5
ENTRY(set_dctl)
	FLUSH_PIPELINE
	stcr	%r2, DCTL
	NOP
	FLUSH_PIPELINE
	jmp	%r1

	.align 5
ENTRY(set_dsar)
	stcr	%r2, DSAR
	NOP
	jmp	%r1

	.align 5
ENTRY(set_dsap)
	FLUSH_PIPELINE
	NOP
	stcr	%r2, DSAP
	FLUSH_PIPELINE
	NOP
	jmp	%r1

	.align 5
ENTRY(set_duap)
	FLUSH_PIPELINE
	NOP
	stcr	%r2, DUAP
	FLUSH_PIPELINE
	NOP
	jmp	%r1

	.align 5
ENTRY(set_dir)
	stcr	%r2, DIR 
	jmp	%r1

	.align 5
ENTRY(set_dbp)
	stcr	%r2, DBP 
	jmp	%r1

	.align 5
ENTRY(set_dppu)
	stcr	%r2, DPPU
	jmp	%r1

	.align 5
ENTRY(set_dppl)
	stcr	%r2, DPPL
	jmp	%r1

	.align 5
ENTRY(set_dsr)
	stcr	%r2, DSR 
	jmp	%r1

/* get routines */
	.align 5
ENTRY(get_ictl)
	ldcr	%r2, ICTL
	jmp	%r1

	.align 5
ENTRY(get_dctl)
	ldcr	%r2, DCTL
	jmp	%r1

	.align 5
ENTRY(get_dsr)
	ldcr	%r2, DSR
	jmp	%r1

	.align 5
ENTRY(get_isr)
	ldcr	%r2, ISR
	jmp	%r1
@


1.6
log
@Replace the naive 88110 tlb update code, which would always invalidate the
whole tlb (32 of 'em), with smarter `tlb probe and update with new pte if tlb
match found' code. This makes the 88110-specific pmap_update() unnecessary, as
updates are no longer aggregated to avoid the number of flushes. This also
makes tlb handling similar between 88100 and 88110, from the pmap's point of
view, so there is no need to use different routines.

No impact on 88100, no user-noticeable performance change on 88100 GENERIC,
slight improvement on 88110 GENERIC.MP.
@
text
@d1 1
a1 1
#	$OpenBSD: m88110_mmu.S,v 1.5 2008/07/28 17:49:38 miod Exp $
d53 1
a53 1
	text
d56 1
a56 1
	align 32
d59 2
a60 2
	stcr	r2, ICMD
	jmp	r1
d62 1
a62 1
	align 32
d65 1
a65 1
	stcr	r2, ICTL
d68 1
a68 1
	jmp	r1
d70 1
a70 1
	align 32
d72 2
a73 2
	stcr	r2, ISAR
	jmp	r1
d75 1
a75 1
	align 32
d79 2
a80 2
	stcr	r2, ISAP
	jmp	r1
d82 1
a82 1
	align 32
d86 2
a87 2
 	stcr	r2, IUAP
	jmp	r1
d89 1
a89 1
	align 32
d91 2
a92 2
	stcr	r2, IIR 
	jmp	r1
d94 1
a94 1
	align 32
d96 2
a97 2
	stcr	r2, IBP 
	jmp	r1
d99 1
a99 1
	align 32
d101 2
a102 2
	stcr	r2, IPPU
	jmp	r1
d104 1
a104 1
	align 32
d106 2
a107 2
	stcr	r2, IPPL
	jmp	r1
d109 1
a109 1
	align 32
d111 2
a112 2
	stcr	r2, ISR 
	jmp	r1
d114 1
a114 1
	align 32
d117 2
a118 2
	stcr	r2, DCMD
	jmp	r1
d120 1
a120 1
	align 32
d123 1
a123 1
	stcr	r2, DCTL
d126 1
a126 1
	jmp	r1
d128 1
a128 1
	align 32
d130 1
a130 1
	stcr	r2, DSAR
d132 1
a132 1
	jmp	r1
d134 1
a134 1
	align 32
d138 1
a138 1
	stcr	r2, DSAP
d141 1
a141 1
	jmp	r1
d143 1
a143 1
	align 32
d147 1
a147 1
	stcr	r2, DUAP
d150 1
a150 1
	jmp	r1
d152 1
a152 1
	align 32
d154 2
a155 2
	stcr	r2, DIR 
	jmp	r1
d157 1
a157 1
	align 32
d159 2
a160 2
	stcr	r2, DBP 
	jmp	r1
d162 1
a162 1
	align 32
d164 2
a165 2
	stcr	r2, DPPU
	jmp	r1
d167 1
a167 1
	align 32
d169 2
a170 2
	stcr	r2, DPPL
	jmp	r1
d172 1
a172 1
	align 32
d174 2
a175 2
	stcr	r2, DSR 
	jmp	r1
d178 1
a178 1
	align 32
d180 2
a181 2
	ldcr	r2, ICTL
	jmp	r1
d183 1
a183 1
	align 32
d185 2
a186 2
	ldcr	r2, DCTL
	jmp	r1
d188 1
a188 1
	align 32
d190 2
a191 2
	ldcr	r2, DSR
	jmp	r1
d193 1
a193 1
	align 32
d195 2
a196 2
	ldcr	r2, ISR
	jmp	r1
@


1.5
log
@According to the manual, delay slot kill the benefits of being superscalar,
so don't use any in the 88110-specific parts of locore.
@
text
@d1 1
a1 1
#	$OpenBSD: m88110_mmu.S,v 1.4 2007/12/02 21:32:41 miod Exp $
d186 10
@


1.4
log
@Remove 88110 control registers accessors which are never used anywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: m88110_mmu.S,v 1.3 2007/11/22 05:53:56 miod Exp $
d59 2
a60 2
	jmp.n	r1
	 stcr	r2, ICMD
d72 2
a73 2
	jmp.n	r1
	 stcr	r2, ISAR
d91 2
a92 2
	jmp.n	r1
	 stcr	r2, IIR 
d96 2
a97 2
	jmp.n	r1
	 stcr	r2, IBP 
d101 2
a102 2
	jmp.n	r1
	 stcr	r2, IPPU
d106 2
a107 2
	jmp.n	r1
	 stcr	r2, IPPL
d111 2
a112 2
	jmp.n	r1
	 stcr	r2, ISR 
d117 2
a118 2
	jmp.n	r1
	 stcr	r2, DCMD
d154 2
a155 2
	jmp.n	r1
	 stcr	r2, DIR 
d159 2
a160 2
	jmp.n	r1
	 stcr	r2, DBP 
d164 2
a165 2
	jmp.n	r1
	 stcr	r2, DPPU
d169 2
a170 2
	jmp.n	r1
	 stcr	r2, DPPL
d174 2
a175 2
	jmp.n	r1
	 stcr	r2, DSR 
d180 2
a181 2
	jmp.n	r1
	 ldcr	r2, ICTL
d185 2
a186 2
	jmp.n	r1
	 ldcr	r2, DCTL
@


1.3
log
@Quote a few errata to explain why odd things are done in oddly ways on 88110.
@
text
@d1 1
a1 1
#	$OpenBSD: m88110_mmu.S,v 1.2 2004/06/22 04:54:54 miod Exp $
d42 1
a42 1
 *   Suggested fix: do not allow thses instructions to occupy the last
a178 5
ENTRY(get_icmd)
	jmp.n	r1
	 ldcr	r2, ICMD

	align 32
a183 45
ENTRY(get_isar)
	jmp.n	r1
	 ldcr	r2, ISAR

	align 32
ENTRY(get_isap)
	jmp.n	r1
	 ldcr	r2, ISAP

	align 32
ENTRY(get_iuap)
	jmp.n	r1
 	 ldcr	r2, IUAP

	align 32
ENTRY(get_iir)
	jmp.n	r1
	 ldcr	r2, IIR 

	align 32
ENTRY(get_ibp)
	jmp.n	r1
	 ldcr	r2, IBP 

	align 32
ENTRY(get_ippu)
	jmp.n	r1
	 ldcr	r2, IPPU

	align 32
ENTRY(get_ippl)
	jmp.n	r1
	 ldcr	r2, IPPL

	align 32
ENTRY(get_isr)
	jmp.n	r1
	 ldcr	r2, ISR 

	align 32
ENTRY(get_dcmd)
	jmp.n	r1
	 ldcr	r2, DCMD

	align 32
a186 40

	align 32
ENTRY(get_dsar)
	jmp.n	r1
	 ldcr	r2, DSAR

	align 32
ENTRY(get_dsap)
	jmp.n	r1
	 ldcr	r2, DSAP

	align 32
ENTRY(get_duap)
	jmp.n	r1
	 ldcr	r2, DUAP

	align 32
ENTRY(get_dir)
	jmp.n	r1
	 ldcr	r2, DIR 

	align 32
ENTRY(get_dbp)
	jmp.n	r1
	 ldcr	r2, DBP 

	align 32
ENTRY(get_dppu)
	jmp.n	r1
	 ldcr	r2, DPPU

	align 32
ENTRY(get_dppl)
	jmp.n	r1
	 ldcr	r2, DPPL

	align 32
ENTRY(get_dsr)
	jmp.n	r1
	 ldcr	r2, DSR 
@


1.2
log
@Do not access [id][pl]ar registers from C code - we only care about their
values in trapframes.
@
text
@d1 1
a1 1
#	$OpenBSD: m88110_mmu.S,v 1.1 2004/04/29 14:33:27 miod Exp $
d35 18
a52 1
/* set routines */
a53 1
	align 4096	/* sigh */
d55 2
d62 1
d70 1
d75 1
d82 1
d89 1
d94 1
d99 1
d104 1
d109 1
d114 1
d120 1
d128 1
d134 1
d143 1
d152 1
d157 1
d162 1
d167 1
d172 1
d178 1
d183 1
d188 1
d193 1
d198 1
d203 1
d208 1
d213 1
d218 1
d223 1
d228 1
d233 1
d238 1
d243 1
d248 1
d253 1
d258 1
d263 1
d268 1
d273 1
@


1.1
log
@Continue factorizing m88k common code, this time files in <arch>/<arch>
which were copied verbatim from mvme88k to luna88k.

This requires backing out syntactic sugar in mvme88k kernel configuration
files which would deduct the required processor types from the board models,
as the common code only depends upon the M88100 and M88110 defines.
@
text
@d1 1
a1 1
#	$OpenBSD: m88110_mmu.S,v 1.9 2003/08/20 20:33:47 miod Exp $
a86 8
ENTRY(set_ilar)
	jmp.n	r1
	 stcr	r2, ILAR

ENTRY(set_ipar)
	jmp.n	r1
	 stcr	r2, IPAR

a139 9
ENTRY(set_dlar)
	jmp.n	r1
	 stcr	r2, DLAR

ENTRY(set_dpar)
	jmp.n	r1
	 stcr	r2, DPAR


a180 8
ENTRY(get_ilar)
	jmp.n	r1
	 ldcr	r2, ILAR

ENTRY(get_ipar)
	jmp.n	r1
	 ldcr	r2, IPAR

a219 8

ENTRY(get_dlar)
	jmp.n	r1
	 ldcr	r2, DLAR

ENTRY(get_dpar)
	jmp.n	r1
	 ldcr	r2, DPAR
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
@

