head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.14
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.14
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.12
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.16
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.16.18.45.20;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.02.23.10.30;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.21.21.45.47;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.27.20.36.17;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.27.20.32.20;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.21.20.55.43;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.20.22.33.16;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.02.21.16.45;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.01.22.24.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.15.21.07.04;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.27.14.07.09;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.23.20.52.15;	author miod;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.16
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@/*	$OpenBSD: mmu.h,v 1.15 2013/11/16 18:45:20 miod Exp $ */

/*
 * This file bears almost no resemblance to the original m68k file,
 * so the following copyright notice is questionable, but we are
 * nice people.
 */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: pte.h 1.13 92/01/20$
 *
 *	@@(#)pte.h	8.1 (Berkeley) 6/10/93
 */

#ifndef	_M88K_MMU_H_
#define	_M88K_MMU_H_

/*
 * Parameters which determine the 'geometry' of the m88K page tables in memory.
 */

#define SDT_BITS	10		/* M88K segment table size bits */
#define PDT_BITS	10		/* M88K page table size bits */
#define PG_BITS		PAGE_SHIFT	/* M88K hardware page size bits */

/*
 * Common fields for APR, SDT and PTE
 */

/* address frame */
#define	PG_FRAME	0xfffff000
#define	PG_SHIFT	PG_BITS
#define	PG_PFNUM(x)	(((x) & PG_FRAME) >> PG_SHIFT)

/* cache control bits */
#define	CACHE_DFL	0x00000000
#define	CACHE_INH	0x00000040	/* cache inhibit */
#define	CACHE_GLOBAL	0x00000080	/* global scope */
#define	CACHE_WT	0x00000200	/* write through */

#define	CACHE_MASK	(CACHE_INH | CACHE_GLOBAL | CACHE_WT)

/*
 * Area descriptors
 */

typedef	uint32_t	apr_t;

#define	APR_V		0x00000001	/* valid bit */

/*
 * 88200 PATC (TLB)
 */

#define PATC_ENTRIES	56

/*
 * Segment table entries
 */

typedef uint32_t	sdt_entry_t;

#define	SG_V		0x00000001
#define	SG_NV		0x00000000
#define	SG_PROT		0x00000004
#define	SG_RO		0x00000004
#define	SG_RW		0x00000000
#define	SG_SO		0x00000100

#define	SDT_VALID(sdt)	(*(sdt) & SG_V)
#define	SDT_SUP(sdt)	(*(sdt) & SG_SO)
#define	SDT_WP(sdt)	(*(sdt) & SG_PROT)

/*
 * Page table entries
 */

typedef uint32_t	pt_entry_t;

#define	PG_V		0x00000001
#define	PG_NV		0x00000000
#define	PG_PROT		0x00000004
#define	PG_U		0x00000008
#define	PG_M		0x00000010
#define	PG_M_U		0x00000018
#define	PG_RO		0x00000004
#define	PG_RW		0x00000000
#define	PG_SO		0x00000100
#define	PG_W		0x00000020	/* XXX unused but reserved field */
#define	PG_U0		0x00000400	/* U0 bit for M88110 */
#define	PG_U1		0x00000800	/* U1 bit for M88110 */

#define	PDT_VALID(pte)	(*(pte) & PG_V)
#define	PDT_SUP(pte)	(*(pte) & PG_SO)
#define	PDT_WP(pte)	(*(pte) & PG_PROT)

/*
 * Number of entries in a page table.
 */

#define	SDT_ENTRIES	(1<<(SDT_BITS))
#define PDT_ENTRIES	(1<<(PDT_BITS))

/*
 * Size in bytes of a single page table.
 */

#define SDT_SIZE	(sizeof(sdt_entry_t) * SDT_ENTRIES)
#define PDT_SIZE	(sizeof(pt_entry_t) * PDT_ENTRIES)

/*
 * Shifts and masks
 */

#define SDT_SHIFT	(PDT_BITS + PG_BITS)
#define PDT_SHIFT	(PG_BITS)

#define SDT_MASK	(((1 << SDT_BITS) - 1) << SDT_SHIFT)
#define PDT_MASK	(((1 << PDT_BITS) - 1) << PDT_SHIFT)

#define	SDTIDX(va)	(((va) & SDT_MASK) >> SDT_SHIFT)
#define	PDTIDX(va)	(((va) & PDT_MASK) >> PDT_SHIFT)

/*
 * BATC entries
 */

#define	BATC_V		0x00000001
#define	BATC_PROT	0x00000002
#define	BATC_INH	0x00000004
#define	BATC_GLOBAL	0x00000008
#define	BATC_WT		0x00000010
#define	BATC_SO		0x00000020

typedef uint32_t	batc_t;

/* 8820x fixed size BATC */
#define	BATC_BLKSHIFT	19
#define	BATC_BLKBYTES	(1 << BATC_BLKSHIFT)
#define	BATC_BLKMASK	(BATC_BLKBYTES-1)
/* number of programmable BATC entries */
#define	BATC_MAX	8

/* physical and logical block address */
#define	BATC_PSHIFT	6
#define	BATC_VSHIFT	19

#define	trunc_batc(a)	((a) & ~BATC_BLKMASK)
#define	round_batc(a)	trunc_batc((a) + BATC_BLKBYTES - 1)

static pt_entry_t invalidate_pte(pt_entry_t *);
static __inline__ pt_entry_t
invalidate_pte(pt_entry_t *pte)
{
	pt_entry_t oldpte;

	oldpte = PG_NV;
	__asm__ volatile
	    ("xmem %0, %2, %%r0" : "+r"(oldpte), "+m"(*pte) : "r"(pte));
	return oldpte;
}

#endif /* __M88K_MMU_H__ */
@


1.15
log
@Allow initial device mappings (from pmap_table) to be backed up by BATC.
Use this on luna88k to map the bitmap planes of the frame buffer used by
the driver. 10% speedup under X.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.14 2013/11/02 23:10:30 miod Exp $ */
d190 1
a190 1
	__asm__ __volatile__
@


1.14
log
@Create the initial page tables in the area between the end of the firmware
data area and the kernel image, whenever possible.

On 88100/88200 systems, use BATC mappings to map the kernel text (and the
kernel data for non-MULTIPROCESSOR kernels). 88110 to follow soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.13 2013/01/05 11:20:56 miod Exp $ */
d79 1
a79 1
typedef	u_int32_t	apr_t;
a89 11
 * BATC entries
 */

#define	BATC_V		0x00000001
#define	BATC_PROT	0x00000002
#define	BATC_INH	0x00000004
#define	BATC_GLOBAL	0x00000008
#define	BATC_WT		0x00000010
#define	BATC_SO		0x00000020

/*
d93 1
a93 1
typedef u_int32_t	sdt_entry_t;
d110 1
a110 1
typedef u_int32_t	pt_entry_t;
d157 1
a157 1
 * Parameters and macros for BATC
d159 9
@


1.13
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.12 2011/03/23 16:54:35 pirofti Exp $ */
a99 1

a140 18
 * Indirect descriptors (mc8110)
 */

typedef	u_int32_t	pt_ind_entry_t;

/* validity bits */
#define	IND_V		0x00000001
#define	IND_NV		0x00000000
#define	IND_MASKED	0x00000002
#define	IND_UNMASKED	0x00000003
#define	IND_MASK	0x00000003

#define	IND_FRAME	0xfffffffc
#define	IND_SHIFT	2

#define	IND_PDA(x)	((x) & IND_FRAME >> IND_SHIFT)

/*
d171 6
a176 8
/* number of bits to BATC shift (log2(BATC_BLKBYTES)) */
#define BATC_BLKSHIFT	19
/* 'block' size of a BATC entry mapping */
#define BATC_BLKBYTES	(1 << BATC_BLKSHIFT)
/* BATC block mask */
#define BATC_BLKMASK	(BATC_BLKBYTES-1)
/* number of BATC entries */
#define BATC_MAX	8
d180 1
a180 3
#define	BATC_VSHIFT	(BATC_PSHIFT + (32 - BATC_BLKSHIFT))

#define BATC_BLK_ALIGNED(x)	((x & BATC_BLKMASK) == 0)
d182 2
a183 1
#define M88K_BTOBLK(x)	(x >> BATC_BLKSHIFT)
@


1.12
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.11 2007/11/21 21:45:47 miod Exp $ */
d215 1
a215 1
	    ("xmem %0, %2, r0" : "+r"(oldpte), "+m"(*pte) : "r"(pte));
@


1.11
log
@Typo
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.10 2007/10/27 20:36:17 miod Exp $ */
d47 2
a48 2
#ifndef	_MACHINE_MMU_H_
#define	_MACHINE_MMU_H_
d219 1
a219 1
#endif /* __MACHINE_MMU_H__ */
@


1.10
log
@Use the same assembly constraints for all inline assembler xmem constructs.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.8 2006/05/21 20:55:43 miod Exp $ */
d142 1
a142 1
 * Indirect descriptors (mc81110)
@


1.9
log
@No need for an explicit pipeline synchronization in invalidate_pte(), the
xmem instruction does it for us.
@
text
@d215 1
a215 1
	    ("xmem %0, %2, r0" : "=r"(oldpte) : "0"(oldpte), "r"(pte));
@


1.8
log
@kvtopte() is not used anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.7 2006/05/20 22:33:16 miod Exp $ */
a215 1
	__asm__ __volatile__ ("tb1 0, r0, 0");
@


1.7
log
@Make sure pmap copes with address wraparounds when operating on ranges.
This removes the dependency for VM_MAX_ADDRESS to be aligned on a segment
boundary.
While there, remove a few internal pmap macros from mmu.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.6 2005/12/02 21:16:45 miod Exp $ */
a218 6

extern vaddr_t kmapva;

#define kvtopte(va)	\
	((pt_entry_t *)(PG_PFNUM(*((sdt_entry_t *)kmapva + \
	    SDTIDX(va) + SDT_ENTRIES)) << PDT_SHIFT) + PDTIDX(va))
@


1.6
log
@Better choice of types for struct pmap members and cmmu functions;
no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.5 2005/12/01 22:24:49 miod Exp $ */
a184 16

/* XXX uses knowledge of pmap structure */
#define SDTENT(map, va)	((sdt_entry_t *)((map)->pm_stab + SDTIDX(va)))

/*
 * Va spaces mapped by tables and PDT table group.
 */

#define PDT_VA_SPACE			(PDT_ENTRIES * PAGE_SIZE)

/*
 * Number of sdt entries used to map user and kernel space.
 */

#define USER_SDT_ENTRIES	SDTIDX(VM_MIN_KERNEL_ADDRESS)
#define KERNEL_SDT_ENTRIES	(SDT_ENTRIES - USER_SDT_ENTRIES)
@


1.5
log
@Get rid of PMAP_NULL and xx_ENTRY_NULL and simply use NULL when necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.4 2005/09/15 21:07:04 miod Exp $ */
d78 2
@


1.4
log
@Define PG_M_U as PG_M | PG_U, and use it where appropriate; no functional
change today, will become useful in the neat future.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.3 2005/04/27 14:07:09 miod Exp $ */
a104 2
#define	SDT_ENTRY_NULL	((sdt_entry_t *) 0)

a120 2

#define	PT_ENTRY_NULL	((pt_entry_t *) 0)
@


1.3
log
@Move constants for dma_cachectl() to cmmu.h where they belong.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.2 2004/05/23 20:52:15 miod Exp $ */
d131 1
@


1.2
log
@Nuke kvtop(), preserving a private copy in mvme88k vs(4) for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.1 2004/04/26 12:34:05 miod Exp $ */
a222 7

/*
 * DMA and caching control
 */
#define DMA_CACHE_SYNC		0x1
#define DMA_CACHE_SYNC_INVAL	0x2
#define DMA_CACHE_INV		0x3
@


1.2.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmu.h,v 1.25 2003/12/19 18:08:20 miod Exp $ */
a248 2

u_int kvtop(vaddr_t);
@

