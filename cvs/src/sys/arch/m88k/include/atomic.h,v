head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.8
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.6
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2015.07.03.12.47.30;	author miod;	state Exp;
branches;
next	1.12;
commitid	z6VjILtb0Lt61nCt;

1.12
date	2014.07.18.10.40.14;	author dlg;	state Exp;
branches;
next	1.11;
commitid	GoJdpESN6XUgaZcc;

1.11
date	2014.07.13.08.13.07;	author miod;	state Exp;
branches;
next	1.10;
commitid	lmSSnHelCasYljEs;

1.10
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.04.19.37.14;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.20.20.40.01;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.05.22.09.13;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.27.20.36.17;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.21.05.28.51;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.19.17.18.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.06.17.13.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Fix cast in atomic_swap_ptr()
@
text
@/*	$OpenBSD: atomic.h,v 1.12 2014/07/18 10:40:14 dlg Exp $	*/

/* Public Domain */

#ifndef _M88K_ATOMIC_H_
#define _M88K_ATOMIC_H_

#if defined(_KERNEL)

#ifdef MULTIPROCESSOR

/* actual implementation is hairy, see atomic.S */
void		atomic_setbits_int(volatile unsigned int *, unsigned int);
void		atomic_clearbits_int(volatile unsigned int *, unsigned int);
unsigned int	atomic_add_int_nv_mp(volatile unsigned int *, unsigned int);
unsigned int	atomic_sub_int_nv_mp(volatile unsigned int *, unsigned int);
unsigned int	atomic_cas_uint_mp(unsigned int *, unsigned int, unsigned int);
unsigned int	atomic_swap_uint_mp(unsigned int *, unsigned int);

#define	atomic_add_int_nv	atomic_add_int_nv_mp
#define	atomic_sub_int_nv	atomic_sub_int_nv_mp
#define	atomic_cas_uint		atomic_cas_uint_mp
#define	atomic_swap_uint	atomic_swap_uint_mp

#else

#include <machine/asm_macro.h>
#include <machine/psl.h>

static __inline void
atomic_setbits_int(volatile unsigned int *uip, unsigned int v)
{
	u_int psr;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	*uip |= v;
	set_psr(psr);
}

static __inline void
atomic_clearbits_int(volatile unsigned int *uip, unsigned int v)
{
	u_int psr;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	*uip &= ~v;
	set_psr(psr);
}

static __inline unsigned int
atomic_add_int_nv_sp(volatile unsigned int *uip, unsigned int v)
{
	u_int psr;
	unsigned int nv;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	*uip += v;
	nv = *uip;
	set_psr(psr);

	return nv;
}

static __inline unsigned int
atomic_sub_int_nv_sp(volatile unsigned int *uip, unsigned int v)
{
	u_int psr;
	unsigned int nv;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	*uip -= v;
	nv = *uip;
	set_psr(psr);

	return nv;
}

static inline unsigned int
atomic_cas_uint_sp(unsigned int *p, unsigned int o, unsigned int n)
{
	u_int psr;
	unsigned int ov;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	ov = *p;
	if (ov == o)
		*p = n;
	set_psr(psr);

	return ov;
}

static inline unsigned int
atomic_swap_uint_sp(unsigned int *p, unsigned int v)
{
	u_int psr;
	unsigned int ov;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	ov = *p;
	*p = v;
	set_psr(psr);

	return ov;
}

#define	atomic_add_int_nv	atomic_add_int_nv_sp
#define	atomic_sub_int_nv	atomic_sub_int_nv_sp
#define	atomic_cas_uint		atomic_cas_uint_sp
#define	atomic_swap_uint	atomic_swap_uint_sp

#endif	/* MULTIPROCESSOR */

static __inline__ unsigned int
atomic_clear_int(volatile unsigned int *uip)
{
	u_int oldval;

	oldval = 0;
	__asm__ volatile
	    ("xmem %0, %2, %%r0" : "+r"(oldval), "+m"(*uip) : "r"(uip));
	return oldval;
}

#define	atomic_add_long_nv(p,v) \
	((unsigned long)atomic_add_int_nv((unsigned int *)p, (unsigned int)v))
#define	atomic_sub_long_nv(p,v) \
	((unsigned long)atomic_sub_int_nv((unsigned int *)p, (unsigned int)v))

#define	atomic_cas_ulong(p,o,n) \
	((unsigned long)atomic_cas_uint((unsigned int *)p, (unsigned int)o, \
	 (unsigned int)n))
#define	atomic_cas_ptr(p,o,n) \
	((void *)atomic_cas_uint((void *)p, (void *)o, (void *)n))

#define	atomic_swap_ulong(p,o) \
	((unsigned long)atomic_swap_uint((unsigned int *)p, (unsigned int)o)
#define	atomic_swap_ptr(p,o) \
	((void *)atomic_swap_uint((void *)p, (unsigned int)o))

static inline void
__sync_synchronize(void)
{
	/* flush_pipeline(); */
	__asm__ volatile ("tb1 0, %%r0, 0" ::: "memory");
}

#endif /* defined(_KERNEL) */
#endif /* _M88K_ATOMIC_H_ */
@


1.12
log
@pass atomic_{cas,swap}_uint a volatile void * instead of a volatile
void **. the latter is really hard to cast for, and not what what
solaris does.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.11 2014/07/13 08:13:07 miod Exp $	*/
d145 1
a145 1
	((void *)atomic_swap_uint((void *)p, (void *)o))
@


1.11
log
@Add missing atomic primitives and __sync_synchronize to let the kernel
compile again; tested by aoyama@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.10 2014/03/29 18:09:29 guenther Exp $	*/
d140 1
a140 1
	((void *)atomic_cas_uint((void **)p, (void *)o, (void *)n))
d145 1
a145 1
	((void *)atomic_swap_uint((void **)p, (void *)o))
@


1.10
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.9 2013/01/05 11:20:56 miod Exp $	*/
d13 11
a23 2
void	atomic_setbits_int(volatile unsigned int *, unsigned int);
void	atomic_clearbits_int(volatile unsigned int *, unsigned int);
d52 66
d129 23
@


1.9
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.8 2011/03/23 16:54:35 pirofti Exp $	*/
d13 2
a14 2
void	atomic_setbits_int(__volatile unsigned int *, unsigned int);
void	atomic_clearbits_int(__volatile unsigned int *, unsigned int);
d22 1
a22 1
atomic_setbits_int(__volatile unsigned int *uip, unsigned int v)
d33 1
a33 1
atomic_clearbits_int(__volatile unsigned int *uip, unsigned int v)
d46 1
a46 1
atomic_clear_int(__volatile unsigned int *uip)
d51 1
a51 1
	__asm__ __volatile__
@


1.8
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.7 2009/03/04 19:37:14 miod Exp $	*/
d52 1
a52 1
	    ("xmem %0, %2, r0" : "+r"(oldval), "+m"(*uip) : "r"(uip));
@


1.7
log
@Introduce atomic_clear_int() as an MD atomic operation to perform atomic
exchange with zero; use it in the soft interrupt code to make it simpler
and faster.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.6 2009/02/20 20:40:01 miod Exp $	*/
d5 2
a6 2
#ifndef __M88K_ATOMIC_H__
#define __M88K_ATOMIC_H__
d57 1
a57 1
#endif /* __M88K_ATOMIC_H__ */
@


1.6
log
@atomic_{set,clear}bits_int were not safe enough on 88110 systems, as they
can be interrupted by NMI; move the SMP version of these routines from
inlines to a separate file (kernel text shrinks 20KB...).

Since the implementation for 88110 becomes really hairy, the pre-main() code
is responsible for copying the appropriate code over for kernels configured
for both 88100 and 88110 cpus, to avoid having to choose the atomicity
strategy at runtime. Hairy, I said.

This gets GENERIC.MP run much further on 197DP. Not enough to reach multiuser
mode, but boots up to starting sshd and then panics.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.5 2007/12/05 22:09:13 miod Exp $	*/
d44 11
@


1.5
log
@xmem can not be used as a reliable atomic operation, they way we do them,
so do the naive operations with interrupts disabled, and an interlock held
if MULTIPROCESSOR.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.4 2007/10/27 20:36:17 miod Exp $	*/
d10 8
a18 1
#include <machine/lock.h>
a20 4
#ifdef MULTIPROCESSOR
extern __cpu_simple_lock_t __atomic_lock;
#endif

a27 3
#ifdef MULTIPROCESSOR
	__cpu_simple_lock(&__atomic_lock);
#endif
a28 3
#ifdef MULTIPROCESSOR
	__cpu_simple_unlock(&__atomic_lock);
#endif
a38 3
#ifdef MULTIPROCESSOR
	__cpu_simple_lock(&__atomic_lock);
#endif
a39 3
#ifdef MULTIPROCESSOR
	__cpu_simple_unlock(&__atomic_lock);
#endif
d42 2
@


1.4
log
@Use the same assembly constraints for all inline assembler xmem constructs.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.3 2007/03/21 05:28:51 miod Exp $	*/
d10 8
d21 1
a21 1
	unsigned int old, new;
d23 10
a32 6
	do {
		old = *uip;
		new = old | v;
		__asm__ __volatile__
		    ("xmem %0, %2, r0" : "+r"(new), "+m"(*uip) : "r"(uip));
	} while (old != new);
d38 1
a38 1
	unsigned int old, new;
d40 10
a49 6
	do {
		old = *uip;
		new = old & ~v;
		__asm__ __volatile__
		    ("xmem %0, %2, r0" : "+r"(new), "+m"(*uip) : "r"(uip));
	} while (old != new);
@


1.3
log
@Real atomic_{set,clear}bits_int implementation, ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.2 2007/02/19 17:18:43 deraadt Exp $	*/
d18 2
a19 1
		__asm__ __volatile__ ("xmem %0, %1, r0" : "+r"(new) : "r"(uip));
d31 2
a32 1
		__asm__ __volatile__ ("xmem %0, %1, r0" : "+r"(new) : "r"(uip));
@


1.2
log
@only make this interface available to the kernel for now, discussed witha
rt and such; tested and ok miod drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.1 2007/02/06 17:13:33 art Exp $	*/
d13 7
a19 1
	*uip |= v;
d25 7
a31 1
	*uip &= ~v;
@


1.1
log
@Add machine/atomic.h to all architectures and define two operations
right now that are supposed to be atomic with respect to interrupts and
SMP: atomic_setbits_int and atomic_clearbits_int.

All architectures other than i386 and amd64 get dummy implementations
since at first we'll be replacing operations that are done with
"a |= bit" and "a &= ~bit" today. More proper implementations will follow

kettenis@@, miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 2
d22 2
a23 1
#endif
@

