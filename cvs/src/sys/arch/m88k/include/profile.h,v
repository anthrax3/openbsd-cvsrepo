head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.22
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.20
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.16
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2013.02.14.05.56.02;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.20.21.19.34;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.30.16.42.36;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.24.19.12.34;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.29.06.25.34;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@A really working version of MCOUNT.
@
text
@#ifndef _M88K_PROFILE_H_
#define _M88K_PROFILE_H_
/*	$OpenBSD: profile.h,v 1.6 2013/01/05 11:20:56 miod Exp $ */
/*
 * Copyright (c) 2004, Miodrag Vallat.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define	_MCOUNT_DECL void _mcount

/*
 * On OpenBSD, calls to the function profiler save r2-r9 on stack. The
 * monitor point is found in r2. The function's return address is taken
 * from the stack frame pointed to by r30, and needs to be restored as
 * r1 hasn't have had a chance to be saved yet.
 */

#ifdef __PIC__
#define	MCOUNT_SYMBOL	"_mcount#plt"
#else
#define	MCOUNT_SYMBOL	"_mcount"
#endif

#define MCOUNT								\
__asm__ (".text;"							\
	 ".align 3;"							\
	 ".globl __mcount;"						\
	 ".type  __mcount,@@function;"					\
	 "__mcount:"							\
	 "	subu	%r31, %r31, 16;"				\
	 "	st	%r1,  %r31, 4;"					\
	 "	bsr.n	" MCOUNT_SYMBOL ";"				\
	 "	 ld	%r3,  %r30, 4;"	/* function return address */	\
	 "	ld	%r2,  %r31, 4;"					\
	 "	addu	%r31, %r31, 16;"				\
	 "	jmp.n	%r2;"						\
	 "	 ld	%r1,  %r30, 4;"	/* restore r1 */		\
	 ".size	__mcount, .-__mcount");

#ifdef _KERNEL
#define	MCOUNT_ENTER	do { s = get_psr(); set_psr(s | PSR_IND); } while (0)
#define	MCOUNT_EXIT	set_psr(s)
#endif /* _KERNEL */

#endif /* _M88K_PROFILE_H_ */
@


1.6
log
@Switch m88k ports to ELF.
@
text
@d3 1
a3 1
/*	$OpenBSD: profile.h,v 1.5 2011/03/23 16:54:35 pirofti Exp $ */
d33 3
a35 2
 * monitor point is found in r1. The function's return address is taken
 * from the stack frame pointed to by r30.
d37 22
a58 9
#define	MCOUNT \
void \
__mcount() \
{ \
	unsigned long returnaddress, monpoint; \
	__asm__ __volatile__ ("or %0, %%r1, %%r0" : "=r"(returnaddress)); \
	__asm__ __volatile__ ("ld %0, %%r30, 4" : "=r"(monpoint)); \
	_mcount(monpoint, returnaddress); \
}
@


1.5
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d3 1
a3 1
/*	$OpenBSD: profile.h,v 1.4 2007/12/20 21:19:34 miod Exp $ */
d29 1
a29 1
#define	_MCOUNT_DECL static inline void _mcount
a36 1
extern void mcount(void) __asm__ ("mcount"); \
d38 1
a38 1
mcount() \
d40 3
a42 3
	int	returnaddress, monpoint; \
	__asm__ __volatile__ ("or %0, r1, r0" : "=r"(returnaddress)); \
	__asm__ __volatile__ ("ld %0, r30, 4" : "=r"(monpoint)); \
d47 1
a47 1
#define	MCOUNT_ENTER	s = get_psr(); set_psr(s | PSR_IND);
@


1.4
log
@Get rid of disable_interrupt() and have caller use get_psr() and set_psr();
this allows us to get rid of the dependency of asm_macro.h on asm.h, which
was really only there to bring in psl.h.
@
text
@d1 3
a3 3
#ifndef __M88K_PROFILE_H__
#define __M88K_PROFILE_H__
/*	$OpenBSD: profile.h,v 1.3 2005/04/30 16:42:36 miod Exp $ */
d52 1
a52 1
#endif /* __M88K_PROFILE_H__ */
@


1.3
log
@Remove m88k_psr_type and function with utterly long names to control the psr,
and use get_psr() / set_psr() or simple macros that expand into them everywhere.
No functional change.
@
text
@d3 1
a3 1
/*	$OpenBSD: profile.h,v 1.2 2004/07/24 19:12:34 miod Exp $ */
d48 1
a48 1
#define	MCOUNT_ENTER	disable_interrupt(s)
@


1.2
log
@New, working, profiling code for m88k.
@
text
@d3 1
a3 1
/*	$OpenBSD: profile.h,v 1.1 2004/04/29 06:25:34 miod Exp $ */
d48 1
a48 1
#define	MCOUNT_ENTER	s = disable_interrupt()
@


1.1
log
@luna88k needs a <machine/profile.h> as well, so share it with mvme88k.
@
text
@d1 3
a3 1
/*	$OpenBSD: profile.h,v 1.14 2003/12/25 00:26:25 miod Exp $ */
d5 1
a5 3
 * Copyright (c) 1996 Nivas Madhur
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
a14 3
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d16 11
a26 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)profile.h	8.1 (Berkeley) 6/11/93
d28 1
a28 2
#ifndef __MACHINE_PROFILE_H__
#define __MACHINE_PROFILE_H__
d31 5
d37 8
a44 23
extern void mcount() __asm__ ("mcount");					\
void									\
mcount()								\
{									\
	int selfret;							\
	int callerret;							\
	/*								\
	 * find the return address for mcount,				\
	 * and the return address for mcount's caller.			\
	 *								\
	 * selfret = ret pushed by mcount call				\
	 */								\
	__asm__ __volatile__ ("or %0,r1,0" : "=r" (selfret));		\
	/*								\
	 * callerret = ret pushed by call into self.			\
	 */								\
	/*								\
	 * This may not be right. It all depends on where the		\
	 * caller stores the return address. XXX			\
	 */								\
	__asm__ __volatile__("addu	 r10,r31,48");			\
	__asm__ __volatile__("ld %0,r10,36" : "=r" (callerret));	\
	_mcount(callerret, selfret);					\
d48 2
a49 6
/*
 * Note that we assume splhigh() and splx() cannot call mcount()
 * recursively.
 */
#define	MCOUNT_ENTER	s = splhigh()
#define	MCOUNT_EXIT	splx(s)
d51 2
a52 1
#endif /* __MACHINE_PROFILE_H__ */
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

