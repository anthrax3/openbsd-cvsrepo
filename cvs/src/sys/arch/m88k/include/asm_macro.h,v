head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.01.00.05.04;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.20.21.19.34;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.02.21.24.21;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.17.05.36.23;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.03.16.52.16;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.30.16.42.36;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.47;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@/*	$OpenBSD: asm_macro.h,v 1.9 2013/01/05 11:20:56 miod Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef _M88K_ASM_MACRO_H_
#define _M88K_ASM_MACRO_H_

/*
 * Various compiler macros used for speed and efficiency.
 * Anyone can include.
 */

/*
 * Flush the data pipeline.
 */
#define	flush_pipeline() \
	__asm__ volatile ("tb1 0, %%r0, 0" ::: "memory")

/*
 * Set the PSR.
 */
static __inline__ void set_psr(u_int psr)
{
	__asm__ volatile ("stcr %0, %%cr1" :: "r" (psr));
	flush_pipeline();
}

/*
 * Get the PSR.
 */
static __inline__ u_int get_psr(void)
{
	u_int psr;
	__asm__ volatile ("ldcr %0, %%cr1" : "=r" (psr));
	return (psr);
}

/*
 * Provide access from C code to the assembly instruction ff1
 */
static __inline__ u_int ff1(u_int val)
{
	__asm__ volatile ("ff1 %0, %0" : "=r" (val) : "0" (val));
	return (val);
}

static __inline__ u_int get_cpu_pid(void)
{
	u_int pid;
	__asm__ volatile ("ldcr %0, %%cr0" : "=r" (pid));
	return (pid);
}

#endif /* _M88K_ASM_MACRO_H_ */
@


1.9
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.8 2013/01/01 00:05:04 miod Exp $ */
d41 1
a41 1
	__asm__ __volatile__ ("tb1 0, %%r0, 0" ::: "memory")
d48 1
a48 1
	__asm__ __volatile__ ("stcr %0, %%cr1" :: "r" (psr));
d58 1
a58 1
	__asm__ __volatile__ ("ldcr %0, %%cr1" : "=r" (psr));
d67 1
a67 1
	__asm__ __volatile__ ("ff1 %0, %0" : "=r" (val) : "0" (val));
d74 1
a74 1
	__asm__ __volatile__ ("ldcr %0, %%cr0" : "=r" (pid));
@


1.8
log
@Add a "memory" clobber to the flush_pipeline() assembly construct, to make sure
the compiler won't try to outsmart me.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.7 2011/03/23 16:54:35 pirofti Exp $ */
d41 1
a41 1
	__asm__ __volatile__ ("tb1 0, r0, 0" ::: "memory");
d48 1
a48 1
	__asm__ __volatile__ ("stcr %0, cr1" :: "r" (psr));
d58 1
a58 1
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (psr));
d74 1
a74 1
	__asm__ __volatile__ ("ldcr %0, cr0" : "=r" (pid));
@


1.7
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.6 2007/12/20 21:19:34 miod Exp $ */
d41 1
a41 1
	__asm__ __volatile__ ("tb1 0, r0, 0");
@


1.6
log
@Get rid of disable_interrupt() and have caller use get_psr() and set_psr();
this allows us to get rid of the dependency of asm_macro.h on asm.h, which
was really only there to bring in psl.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.5 2007/12/02 21:24:21 miod Exp $ */
d29 2
a30 2
#ifndef __M88K_ASM_MACRO_H__
#define __M88K_ASM_MACRO_H__
d78 1
a78 1
#endif /* __M88K_ASM_MACRO_H__ */
@


1.5
log
@Sort and clean definitions. No functional changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.4 2007/11/17 05:36:23 miod Exp $ */
a36 2
#include <machine/asm.h>

a60 2

#define	disable_interrupt(psr)	set_psr(((psr) = get_psr()) | PSR_IND)
@


1.4
log
@Replace many ``unsigned'' variables with ``unsigned int'', ``u_int'' or other
appropriate types. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.3 2005/12/03 16:52:16 miod Exp $ */
d40 1
a40 1
 * Flushes the data pipeline.
d43 1
a43 1
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING)
d46 1
a46 1
 * Sets the PSR.
d51 1
a51 1
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
d55 1
a55 1
 * Gets the PSR.
@


1.3
log
@Turn read_processor_identification_register() into a simple macro with a
much, much, much shorter name. It is only used to print cpu revision anyway...
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.2 2005/04/30 16:42:36 miod Exp $ */
d69 1
a69 1
static __inline__ unsigned ff1(unsigned val)
@


1.2
log
@Remove m88k_psr_type and function with utterly long names to control the psr,
and use get_psr() / set_psr() or simple macros that expand into them everywhere.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.1 2004/04/26 12:34:05 miod Exp $ */
d29 2
a30 2
#ifndef __MACHINE_M88K_ASM_MACRO_H__
#define __MACHINE_M88K_ASM_MACRO_H__
d61 1
a61 1
	return psr;
d72 1
a72 1
	return val;
d75 8
a82 1
#endif /* __MACHINE_M88K_ASM_MACRO_H__ */
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.23 2004/01/23 17:26:05 miod Exp $ */
a31 1
#include <machine/asm.h>
d37 2
d46 1
a46 35
 * PSR_TYPE is the type of the Process Status Register.
 */
typedef unsigned long m88k_psr_type;

/*
 * disable_interrupts_return_psr()
 *
 *    The INTERRUPT_DISABLE bit is set in the PSR and the *PREVIOUS*
 *    PSR is returned.  Intended to be used with set_psr() [below] as in:
 *
 *	{
 *	    m88k_psr_type psr;
 *	        .
 *	        .
 *	    psr = disable_interrupts_return_psr();
 *	        .
 *   		SHORT [time-wise] CRITICAL SECTION HERE
 *	        .
 *	    set_psr(psr);
 *	        .
 *	        .
 */
static __inline__ m88k_psr_type disable_interrupts_return_psr(void)
{
	m88k_psr_type temp, oldpsr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("set  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
	return oldpsr;
}
#define disable_interrupt() (void)disable_interrupts_return_psr()

/*
 * Sets the PSR. See comments above.
d48 1
a48 1
static __inline__ void set_psr(m88k_psr_type psr)
d55 1
a55 1
 * Gets the PSR. See comments above.
d57 1
a57 1
static __inline__ m88k_psr_type get_psr(void)
d59 1
a59 1
	m88k_psr_type psr;
d64 1
a64 16
/*
 * Enables interrupts.
 */
static __inline__ m88k_psr_type enable_interrupts_return_psr(void)
{
	m88k_psr_type temp, oldpsr; /* need a temporary register */
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("clr  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
	return oldpsr;
}
#define enable_interrupt() (void)enable_interrupts_return_psr()

#define db_enable_interrupt enable_interrupt
#define db_disable_interrupt disable_interrupt
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

