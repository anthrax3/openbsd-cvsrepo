head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.14
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.12
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2013.09.05.20.40.32;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.01.17.43.23;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.16.22.55.03;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.13.23.33.49;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.25.00.29.49;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.21.19.30.08;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.17.05.36.23;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.08.14.03.34;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.27.14.09.45;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Service the 88100 floating-point exceptions through trap(), keeping the
existing assembly code for now. Make sure the trapframe images of %fpsr and
%fpcr are updated by the assembly handlers (in addition to the real registers
which were already updated). When returning into trap(), check these updated
value to decide whether a signal ought to be sent to the userland process.

With these changes, computations which ought to cause a signal to be delivered
will indeed trigger the signal, even when they are handled by the completion
code in the floating point exception handlers.

This fixes the libc/ieeefp/except and lib/fenv regress tests on 88100 systems,
finally!
@
text
@/*	$OpenBSD: trap.h,v 1.10 2011/03/23 16:54:35 pirofti Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
#ifndef _M88K_TRAP_H_
#define _M88K_TRAP_H_

/*
 * Trap type values. These have no relation to the trap vector offsets in
 * the VBR page.
 */
#define	T_PRIVINFLT	0	/* privileged instruction fault */
#define	T_INSTFLT	1	/* instruction access exception */
#define	T_DATAFLT	2	/* data access exception */
#define	T_MISALGNFLT	3	/* misaligned access exception */
#define	T_ILLFLT	4	/* unimplemented opcode exception */
#define	T_BNDFLT	5	/* bounds check violation exception */
#define	T_ZERODIV	6	/* illegal divide exception */
#define	T_OVFFLT	7	/* integer overflow exception */
#define	T_FPEPFLT	8	/* floating point precise exception */
#define	T_FPEIFLT	9	/* floating point imprecise exception (88100) */
#define	T_KDB_ENTRY	10	/* force entry to kernel debugger */
#define	T_KDB_BREAK	11	/* break point hit */
#define	T_KDB_TRACE	12	/* trace */
#define	T_UNKNOWNFLT	13	/* unknown exception */
#define	T_SIGSYS	14	/* generate SIGSYS */
#define	T_STEPBPT	15	/* special breakpoint for single step */
#define	T_USERBPT	16	/* user set breakpoint (for debugger) */
#define	T_110_DRM	17	/* 88110 data read miss (sw table walk) */
#define	T_110_DWM	18	/* 88110 data write miss (sw table walk) */
#define	T_110_IAM	19	/* 88110 inst ATC miss (sw table walk) */

#define	T_USER		20	/* added to trap code if user mode fault */

#ifndef _LOCORE

void	ast(struct trapframe *);
void	cache_flush(struct trapframe *);
void	interrupt(struct trapframe *);
int	nmi(struct trapframe *);
void	nmi_wrapup(struct trapframe *);

void	m88100_syscall(register_t, struct trapframe *);
void	m88100_trap(u_int, struct trapframe *);
void	m88110_syscall(register_t, struct trapframe *);
void	m88110_trap(u_int, struct trapframe *);

void	m88100_fpu_imprecise_exception(struct trapframe *);
void	m88100_fpu_precise_exception(struct trapframe *);
void	m88110_fpu_exception(struct trapframe *);

#endif /* _LOCORE */

#endif /* _M88K_TRAP_H_ */
@


1.10
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.9 2009/03/01 17:43:23 miod Exp $ */
a26 3
/*
 * Trap codes
 */
d31 2
a32 1
 * Trap type values
d43 11
a53 10
#define	T_KDB_ENTRY	9	/* force entry to kernel debugger */
#define	T_KDB_BREAK	10	/* break point hit */
#define	T_KDB_TRACE	11	/* trace */
#define	T_UNKNOWNFLT	12	/* unknown exception */
#define	T_SIGSYS	13	/* generate SIGSYS */
#define	T_STEPBPT	14	/* special breakpoint for single step */
#define	T_USERBPT	15	/* user set breakpoint (for debugger) */
#define	T_110_DRM	16	/* 88110 data read miss (sw table walk) */
#define	T_110_DWM	17	/* 88110 data write miss (sw table walk) */
#define	T_110_IAM	18	/* 88110 inst ATC miss (sw table walk) */
d55 1
a55 1
#define	T_USER		19	/* user mode fault */
d70 2
@


1.9
log
@Files forgotten during last commit:

Rework nmi handling to handle ``complex'' NMI faster, and return as fast as
possible from the exception, without doing the AST and softintr dance.

This should avoid too much stack usage under load.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.8 2009/02/16 22:55:03 miod Exp $ */
d30 2
a31 2
#ifndef __M88K_TRAP_H__
#define __M88K_TRAP_H__
d75 1
a75 1
#endif /* __M88K_TRAP_H__ */
@


1.8
log
@Since NMI are now handled separately, remove the ``interrupt type'' argument
from interrupt() and related function pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.7 2009/02/13 23:33:49 miod Exp $ */
d60 1
a61 2
void	ast(struct trapframe *);
void	nmi(struct trapframe *);
d63 2
@


1.7
log
@Use a different dispatcher for the NMI traps on 88110, these are too
different from regular hardware interrupts to be worth handling the
same way.

Disable IPI reception while we are handling pending IPIs. And do not
reenable them by mistake if we need to send an IPI in return.

This lets GENERIC.MP boot single user on a MVME197DP. There are still
many bugs to fix.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.6 2007/12/25 00:29:49 miod Exp $ */
a57 6
/*
 * Interrupt type values
 */
#define	T_INT		0	/* regular interrupts */
#define	T_NON_MASK	1	/* non-maskable interrupts */

d63 1
a63 1
void	interrupt(u_int, struct trapframe *);
@


1.6
log
@Restart the m88110 floating-point trap code from scratch, basing it on the
sparc{,64} floating-point emulator, adapted to the 88110 specifics. Handling
of these traps is now entirely done in C for convenience.

Although there are a few rounding issues to address, and the XRF is ignored,
this allows all the ieee754 regression tests to pass (lib/libc/ieeefp,
sys/kern/signal/fpsig, sys/kern/signal/sigfpe).
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.5 2007/11/21 19:30:08 miod Exp $ */
d68 1
@


1.5
log
@Move external interrupt and ast handling from m881[01]0_trap() to their
own functions, which do not need to be processor-specific.

This speeds up the exception return sequence a bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.4 2007/11/17 05:36:23 miod Exp $ */
d74 2
@


1.4
log
@Replace many ``unsigned'' variables with ``unsigned int'', ``u_int'' or other
appropriate types. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.3 2006/05/08 14:03:34 miod Exp $ */
d30 2
a31 2
#ifndef __MACHINE_TRAP_H__
#define __MACHINE_TRAP_H__
d36 19
d56 7
a62 23
#define T_PRIVINFLT	0	/* privileged instruction fault */
#define T_INSTFLT	1	/* instruction access exception */
#define T_DATAFLT	2	/* data access exception */
#define T_MISALGNFLT	3	/* misaligned access exception */
#define T_ILLFLT	4	/* unimplemented opcode exception */
#define T_BNDFLT	5	/* bounds check violation exception */
#define T_ZERODIV	6	/* illegal divide exception */
#define T_OVFFLT	7	/* integer overflow exception */
#define T_FPEPFLT	8	/* floating point precise exception */
#define T_ASTFLT	9	/* software trap */
#define	T_KDB_ENTRY	10	/* force entry to kernel debugger */
#define T_KDB_BREAK	11	/* break point hit */
#define T_KDB_TRACE	12	/* trace */
#define T_UNKNOWNFLT	13	/* unknown exception */
#define T_SIGSYS	14	/* generate SIGSYS */
#define T_STEPBPT	15	/* special breakpoint for single step */
#define T_USERBPT	16	/* user set breakpoint (for debugger) */
#define T_INT		17	/* interrupt exception */
#define T_NON_MASK	18	/* MVME197 Non-Maskable Interrupt */
#define	T_110_DRM	19	/* 88110 data read miss (sw table walk) */
#define	T_110_DWM	20	/* 88110 data write miss (sw table walk) */
#define	T_110_IAM	21	/* 88110 inst ATC miss (sw table walk) */
#define T_USER		22	/* user mode fault */
d65 10
a74 5
void cache_flush(struct trapframe *);
void m88100_syscall(register_t, struct trapframe *);
void m88100_trap(u_int, struct trapframe *);
void m88110_syscall(register_t, struct trapframe *);
void m88110_trap(u_int, struct trapframe *);
d77 1
a77 1
#endif /* __MACHINE_TRAP_H__ */
@


1.3
log
@Clean the internal m88k trap type codes; while there, simplify and
factorize the build of the VBR page betweem luna88k and mvme88k.

Tested by aoyama@@ and I.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.2 2005/04/27 14:09:45 miod Exp $ */
d64 1
a64 1
void m88100_trap(unsigned, struct trapframe *);
d66 1
a66 1
void m88110_trap(unsigned, struct trapframe *);
@


1.2
log
@Allow userland to cause the data cache to be flushed for any arbitrary address
range in the current process, using trap #451.

This is necessary for proper gcc trampolines operation, and, later, ld.so...
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.1 2004/04/26 12:34:05 miod Exp $ */
d37 23
a59 30
#define T_RESADFLT	0	/* reserved addressing fault */
#define T_PRIVINFLT	1	/* privileged instruction fault */
#define T_RESOPFLT	2	/* reserved operand fault */
#define T_INSTFLT	3	/* instruction access exception */
#define T_DATAFLT	4	/* data access exception */
#define T_MISALGNFLT	5	/* misaligned access exception */
#define T_ILLFLT	6	/* unimplemented opcode exception */
#define T_BNDFLT	7	/* bounds check violation exception */
#define T_ZERODIV	8	/* illegal divide exception */
#define T_OVFFLT	9	/* integer overflow exception */
#define T_ERRORFLT	10	/* error exception */
#define T_FPEPFLT	11	/* floating point precise exception */
#define T_FPEIFLT	12	/* floating point imprecise exception */
#define T_ASTFLT	13	/* software trap */
#define	T_KDB_ENTRY	14	/* force entry to kernel debugger */
#define T_KDB_BREAK	15	/* break point hit */
#define T_KDB_TRACE	16	/* trace */
#define T_UNKNOWNFLT	17	/* unknown exception */
#define T_SIGTRAP	18	/* generate SIGTRAP */
#define T_SIGSYS	19	/* generate SIGSYS */
#define T_STEPBPT	20	/* special breakpoint for single step */
#define T_USERBPT	21	/* user set breakpoint (for debugger) */
#define T_SYSCALL	22	/* Syscall */
#define T_NON_MASK	23	/* MVME197 Non-Maskable Interrupt */
#define	T_KDB_WATCH	24	/* watchpoint hit */
#define T_197_READ	25	/* MVME197 Data Read Miss (Software Table Searches) */
#define T_197_WRITE	26	/* MVME197 Data Write Miss (Software Table Searches) */
#define T_197_INST	27	/* MVME197 Inst ATC Miss (Software Table Searches) */
#define T_INT		28	/* interrupt exception */
#define T_USER		29	/* user mode fault */
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.22 2004/01/12 07:46:17 miod Exp $ */
d69 2
a70 1

d72 1
a72 2
void m88100_syscall(register_t, struct trapframe *);

a73 2
void m88110_syscall(register_t, struct trapframe *);

@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

