head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2014.05.31.11.19.06;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2013.08.18.22.17.26;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2013.08.18.22.04.51;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.21.18.37.47;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.17.05.36.23;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.18.22.58.28;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.01.17.18.05;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Introduce m88100_rewind_insn() to rewind the execution pipeline one
instruction, rather than gazillions of inline variants. This also makes
the situations where we clear specific bits in the fip or nip registers
more visible.

No functional change.
@
text
@/*	$OpenBSD: m88100.h,v 1.8 2013/08/18 22:17:26 miod Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1993-1992 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#ifndef _M88K_M88100_H_
#define _M88K_M88100_H_

/*
 *	88100 RISC definitions
 */

/*
 * DMT0, DMT1, DMT2 layout
 */
#define DMT_BO		0x00008000	/* Byte-Ordering */
#define DMT_DAS		0x00004000	/* Data Access Space */
#define DMT_DOUB1	0x00002000	/* Double Word */
#define DMT_LOCKBAR	0x00001000	/* Bud Lock */
#define DMT_DREG	0x00000F80	/* Destination Registers 5bits */
#define DMT_SIGNED	0x00000040	/* Sign-Extended Bit */
#define DMT_EN		0x0000003C	/* Byte Enable Bit */
#define DMT_WRITE	0x00000002	/* Read/Write Transaction Bit */
#define	DMT_VALID	0x00000001	/* Valid Transaction Bit */

#define	DMT_DREGSHIFT	7
#define	DMT_ENSHIFT	2

#define	DMT_DREGBITS(x)	(((x) & DMT_DREG) >> DMT_DREGSHIFT)
#define	DMT_ENBITS(x)	(((x) & DMT_EN) >> DMT_ENSHIFT)

#if defined(_KERNEL) && !defined(_LOCORE)

void	dae_print(u_int *);
void	data_access_emulation(u_int *);

u_int32_t do_load_word(vaddr_t, int);
u_int32_t do_load_half(vaddr_t, int);
u_int32_t do_load_byte(vaddr_t, int);
void      do_store_word(vaddr_t, u_int32_t, int);
void      do_store_half(vaddr_t, u_int16_t, int);
void      do_store_byte(vaddr_t, u_int8_t, int);
u_int32_t do_xmem_word(vaddr_t, u_int32_t, int);
u_int8_t  do_xmem_byte(vaddr_t, u_int8_t, int);

void	m88100_apply_patches(void);
void	m88100_smp_setup(struct cpu_info *);

/* rewind one instruction */
static __inline__ void
m88100_rewind_insn(struct reg *regs)
{
	regs->sfip = regs->snip;
	regs->snip = regs->sxip;
}

#endif

#endif /* _M88K_M88100_H_ */
@


1.8
log
@data_access_emulation() may fault. Be sure to clear pcb_onfault before
invoking it.

While there, rework the return-to-pcb_onfault logic to avoid falling through
the DAE code. This allows us to get rid of the bogus DMT_SKIP flag as well:
DAE is only necessary if DMT_VALID is set in DMT0, and DMT0 is reset to zero
afterwards.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.7 2013/08/18 22:04:51 miod Exp $ */
d70 8
@


1.7
log
@Fix prototypes of do_load_half() and do_load_byte() - those return a
sign-extended 32-bit value. The previous prototypes used too narrow return
types since the mvme88k/luna88k code unification 9 years ago.

Amazingly this did not cause much harm and took quite a while to understand.
The most visible occurence of this bug would be awk aborting early with a
syntax error message, on valid output; this is no surprise as awk is probably
the largest consumer of `short' types in the tree. Of course, the bug would
not be reliably reproduceable, because it would only trigger if the DAE code
path was taken, usually during page fault processing; and since uvm_fault()
will attempt to fault neighbouring pages, depending upon the particular
randomness (stackgap, shared library location) at the time one ran awk, it may
(but quite often may not) trigger. [forcing all uvm_fault() narrow helped
reproduce the issue reliably and eventually fix it]
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.6 2011/03/23 16:54:35 pirofti Exp $ */
a36 4
 *
 * The DMT_SKIP bit is never set by the cpu.  It is used to mark 'known'
 * transactions so that they don't get processed a second time by
 * data_access_emulation().
a37 1
#define DMT_SKIP	0x00010000	/* skip this dmt */
@


1.6
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.5 2009/02/21 18:37:47 miod Exp $ */
d65 2
a66 2
u_int16_t do_load_half(vaddr_t, int);
u_int8_t  do_load_byte(vaddr_t, int);
@


1.5
log
@Move part of the mp lock logic into per-cpu callbacks; on MVME197DP we need
to disable NMI sources in addition to interrupt sources, and we can not
use a quick sequence with shadowing frozen as done for atomic ops.

This lets GENERIC.MP boot multiuser on MVME197DP boards, and is so far stable
enough to be able to recompile a kernel from scratch (with make -j2).
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.4 2007/11/17 05:36:23 miod Exp $ */
d28 2
a29 2
#ifndef __M88K_M88100_H__
#define __M88K_M88100_H__
d78 1
a78 1
#endif /* __M88K_M88100_H__ */
@


1.4
log
@Replace many ``unsigned'' variables with ``unsigned int'', ``u_int'' or other
appropriate types. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.3 2006/11/18 22:58:28 miod Exp $ */
d74 1
@


1.3
log
@On 88100 systems which do not need the xxx.usr instruction workaround,
override the DAE helper routines with workaroundless code while the kernel
text is still writable.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.2 2004/08/01 17:18:05 miod Exp $ */
d61 2
a62 2
void	dae_print(unsigned *);
void	data_access_emulation(unsigned *);
@


1.2
log
@Move 88100 DAE code to its own file, shared between luna88k and mvme88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.1 2004/04/26 12:34:05 miod Exp $ */
d60 3
a62 2
void dae_print(unsigned *eframe);
void data_access_emulation(unsigned *eframe);
d66 6
a71 1
u_int8_t do_load_byte(vaddr_t, int);
d73 1
a73 3
void do_store_word(vaddr_t, u_int32_t, int);
void do_store_half(vaddr_t, u_int16_t, int);
void do_store_byte(vaddr_t, u_int8_t, int);
a74 2
u_int32_t do_xmem_word(vaddr_t, u_int32_t, int);
u_int8_t do_xmem_byte(vaddr_t, u_int8_t, int);
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88100.h,v 1.11 2003/10/05 20:24:19 miod Exp $ */
d28 2
a29 2
#ifndef __MACHINE_M88100_H__
#define __MACHINE_M88100_H__
d59 17
a75 1
#endif /* __MACHINE_M88100_H__ */
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

