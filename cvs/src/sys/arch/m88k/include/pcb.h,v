head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2015.10.05.01.22.34;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	l8g9I3KbTRcbSRkA;

1.7
date	2015.05.05.02.13.46;	author guenther;	state Exp;
branches;
next	1.6;
commitid	dNPv28CJI5BxtRGW;

1.6
date	2013.07.17.19.19.29;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.17.05.36.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.13.22.00.56;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.18.22.49.40;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.03.14.30.05;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@user land -> userland; from Rob Pierce
@
text
@/*	$OpenBSD: pcb.h,v 1.7 2015/05/05 02:13:46 guenther Exp $ */
/*
 * Copyright (c) 1996 Nivas Madhur
 * Mach Operating System
 * Copyright (c) 1993-1992 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * Motorola 88100 pcb definitions
 *
 */
/*
 */
#ifndef _M88K_PCB_H_
#define _M88K_PCB_H_

#include <machine/frame.h>

/*
 * Our PCB is the regular PCB+Save area for kernel frame.
 * Upon entering kernel mode from userland, save the user context
 * in the saved_state area - this is passed as the exception frame.
 * On a context switch, only registers that need to be saved by the
 * C calling convention and few other regs (pc, psr etc) are saved
 * in the kernel_state part of the PCB. Typically, trap frames are
 * saved on the stack (by low level handlers or by hardware) but,
 * we just decided to do it in the PCB.
 */

struct m88100_pcb {
	unsigned long pcb_pc;	/* address to return */
	unsigned long :32;
	unsigned long pcb_r14;
	unsigned long pcb_r15;
	unsigned long pcb_r16;
	unsigned long pcb_r17;
	unsigned long pcb_r18;
	unsigned long pcb_r19;
	unsigned long pcb_r20;
	unsigned long pcb_r21;
	unsigned long pcb_r22;
	unsigned long pcb_r23;
	unsigned long pcb_r24;
	unsigned long pcb_r25;
	unsigned long pcb_r26;
	unsigned long pcb_r27;
	unsigned long pcb_r28;
	unsigned long pcb_r29;
	unsigned long pcb_r30;
	unsigned long pcb_sp; 	/* kernel stack pointer */
	/* floating-point state */
	unsigned long pcb_fcr62;
	unsigned long pcb_fcr63;
};

struct pcb
{
	struct m88100_pcb	kernel_state;
	struct trapframe	user_state;
	int			pcb_onfault;
};

/*
 *	Location of saved user registers for the proc.
 */
#define	USER_REGS(p) \
	(((struct reg *)(&((p)->p_addr->u_pcb.user_state))))

#endif /* _M88K_PCB_H_ */
@


1.7
log
@emul_native is only used for kernel threads which can't dump core, so
delete coredump_trad(), uvm_coredump(), cpu_coredump(), struct md_coredump,
and various #includes that are superfluous.

This leaves compat_linux processes without a coredump callback.  If that
ability is desired, someone should update it to use coredump_elf32() and
verify the results...

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.6 2013/07/17 19:19:29 miod Exp $ */
d41 1
a41 1
 * Upon entering kernel mode from user land, save the user context
@


1.6
log
@Use `long' instead of `int' in structure layouts which may get assigned from
(or to) register_t, but need to be usable without register_t in scope, so that
the compiler won't warn about these assignments after the recent _types.h
changes; aoyama@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.5 2007/11/17 05:36:23 miod Exp $ */
a87 10

/*
 * The pcb is augmented with machine-dependent additional data for
 * core dumps.  Note that the trapframe here is a copy of the one
 * from the top of the kernel stack (included here so that the kernel
 * stack itself need not be dumped).
 */
struct md_coredump {
	struct	trapframe md_tf;
};
@


1.5
log
@Replace many ``unsigned'' variables with ``unsigned int'', ``u_int'' or other
appropriate types. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.4 2007/01/13 22:00:56 miod Exp $ */
d51 20
a70 20
	unsigned int pcb_pc;	/* address to return */
	unsigned int :32;
	unsigned int pcb_r14;
	unsigned int pcb_r15;
	unsigned int pcb_r16;
	unsigned int pcb_r17;
	unsigned int pcb_r18;
	unsigned int pcb_r19;
	unsigned int pcb_r20;
	unsigned int pcb_r21;
	unsigned int pcb_r22;
	unsigned int pcb_r23;
	unsigned int pcb_r24;
	unsigned int pcb_r25;
	unsigned int pcb_r26;
	unsigned int pcb_r27;
	unsigned int pcb_r28;
	unsigned int pcb_r29;
	unsigned int pcb_r30;
	unsigned int pcb_sp; 	/* kernel stack pointer */
d72 2
a73 2
	unsigned int pcb_fcr62;
	unsigned int pcb_fcr63;
@


1.4
log
@Bring back a <machine/frame.h> for m88k platforms, by splitting <machine/pcb.h>
in its exception-related contents and pcb-related contents.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.3 2006/11/18 22:49:40 miod Exp $ */
d51 20
a70 20
	unsigned pcb_pc;	/* address to return */
	unsigned :32;
	unsigned pcb_r14;
	unsigned pcb_r15;
	unsigned pcb_r16;
	unsigned pcb_r17;
	unsigned pcb_r18;
	unsigned pcb_r19;
	unsigned pcb_r20;
	unsigned pcb_r21;
	unsigned pcb_r22;
	unsigned pcb_r23;
	unsigned pcb_r24;
	unsigned pcb_r25;
	unsigned pcb_r26;
	unsigned pcb_r27;
	unsigned pcb_r28;
	unsigned pcb_r29;
	unsigned pcb_r30;
	unsigned pcb_sp; 	/* kernel stack pointer */
d72 2
a73 2
	unsigned pcb_fcr62;
	unsigned pcb_fcr63;
@


1.3
log
@Stop saving and restoring the current ipl in the pcb when switching processes,
since we know we are at splsched().
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.2 2005/12/03 14:30:05 miod Exp $ */
d37 1
a37 1
#include <machine/reg.h>
a75 51
struct trapframe {
	struct reg	tf_regs;
	register_t	tf_vector;	/* exception vector number */
	register_t	tf_mask;	/* interrupt mask level */
	register_t	tf_mode;	/* interrupt mode */
	register_t	tf_scratch1;	/* reserved for use by locore */
	register_t	tf_ipfsr;	/* P BUS status */
	register_t	tf_dpfsr;	/* P BUS status */
	void		*tf_cpu;	/* cpu_info pointer */
};

#define	tf_r		tf_regs.r
#define	tf_sp		tf_regs.r[31]
#define	tf_epsr		tf_regs.epsr
#define	tf_fpsr		tf_regs.fpsr
#define	tf_fpcr		tf_regs.fpcr
#define	tf_sxip		tf_regs.sxip
#define	tf_snip		tf_regs.snip
#define	tf_sfip		tf_regs.sfip
#define	tf_exip		tf_regs.sxip
#define	tf_enip		tf_regs.snip
#define	tf_ssbr		tf_regs.ssbr
#define	tf_dmt0		tf_regs.dmt0
#define	tf_dmd0		tf_regs.dmd0
#define	tf_dma0		tf_regs.dma0
#define	tf_dmt1		tf_regs.dmt1
#define	tf_dmd1		tf_regs.dmd1
#define	tf_dma1		tf_regs.dma1
#define	tf_dmt2		tf_regs.dmt2
#define	tf_dmd2		tf_regs.dmd2
#define	tf_dma2		tf_regs.dma2
#define	tf_duap		tf_regs.ssbr
#define	tf_dsr		tf_regs.dmt0
#define	tf_dlar		tf_regs.dmd0
#define	tf_dpar		tf_regs.dma0
#define	tf_isr		tf_regs.dmt1
#define	tf_ilar		tf_regs.dmd1
#define	tf_ipar		tf_regs.dma1
#define	tf_isap		tf_regs.dmt2
#define	tf_dsap		tf_regs.dmd2
#define	tf_iuap		tf_regs.dma2
#define	tf_fpecr	tf_regs.fpecr
#define	tf_fphs1	tf_regs.fphs1
#define	tf_fpls1	tf_regs.fpls1
#define	tf_fphs2	tf_regs.fphs2
#define	tf_fpls2	tf_regs.fpls2
#define	tf_fppt		tf_regs.fppt
#define	tf_fprh		tf_regs.fprh
#define	tf_fprl		tf_regs.fprl
#define	tf_fpit		tf_regs.fpit

d88 1
@


1.2
log
@Switch m88k ports to __HAVE_CPUINFO. Current cpu pointer is held in SR0
on all running processors.
Tested aoyama@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.1 2004/04/26 12:34:05 miod Exp $ */
d52 1
a52 1
	unsigned pcb_ipl;
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcb.h,v 1.13 2004/01/12 21:33:15 miod Exp $ */
d84 1
a84 1
	register_t	tf_cpu;		/* cpu number */
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

