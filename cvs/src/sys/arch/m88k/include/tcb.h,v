head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2017.02.15.21.18.52;	author miod;	state Exp;
branches;
next	1.4;
commitid	nNXOCNUaiRx2qGBa;

1.4
date	2016.09.04.08.49.35;	author guenther;	state Exp;
branches;
next	1.3;
commitid	9U1gSnTGyMYe1aHL;

1.3
date	2014.03.29.18.09.29;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2013.08.26.21.38.08;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.27.04.01.17;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make this build (and run) with gcc 4.
@
text
@/*	$OpenBSD: tcb.h,v 1.4 2016/09/04 08:49:35 guenther Exp $	*/

/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MACHINE_TCB_H_
#define _MACHINE_TCB_H_

/*
 * In userspace, register %r27 contains the address of the thread's TCB,
 * and register %r26 contains the address of the thread's errno.
 * It is the responsibility of the kernel to set %r27 to the proper value
 * when creating the thread, while initialization of %r26 is done in
 * userland within libc on an as-needed basis.
 */

#ifdef _KERNEL

#include <machine/reg.h>

#define TCB_GET(p)		\
	((void *)(p)->p_md.md_tf->tf_r[27])
#define TCB_SET(p, addr)	\
	((p)->p_md.md_tf->tf_r[27] = (register_t)(addr))

#else /* _KERNEL */

/*
 * It is unknown whether the m88k ELF ABI mentions TLS. On m88k, since only
 * unsigned offsets in (register + immediate offset) addressing is supported
 * on all processors, it makes sense to use a small TCB, with static TLS data
 * after it.
 */
#define TLS_VARIANT	1

#if defined(__GNUC__) && __GNUC__ >= 4

register void *__tcb __asm__ ("%r27");
#define	TCB_GET()	(__tcb)
#define	TCB_SET(tcb)	((__tcb) = (tcb))

#else /* __GNUC__ >= 4 */

/* Get a pointer to the TCB itself */
static inline void *
__m88k_get_tcb(void)
{
	void *val;
	__asm__ ("or %0,%%r27,%%r0" : "=r" (val));
	return val;
}

#define TCB_GET()	__m88k_get_tcb()
#define TCB_SET(tcb)	__asm volatile("or %%r27,%0,%r0" : : "r" (tcb))

#endif /* __GNUC__ >= 4 */

#endif /* _KERNEL */
#endif /* _MACHINE_TCB_H_ */
@


1.4
log
@TCB_GET_MEMBER() is no longer used after the TIB changes
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.3 2014/03/29 18:09:29 guenther Exp $	*/
d49 1
a49 1
#if defined(__GNUC__) && __GNUC__ > 4
d55 1
a55 1
#else /* __GNUC__ > 4 */
d69 1
a69 1
#endif /* __GNUC__ > 4 */
@


1.3
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.2 2013/08/26 21:38:08 miod Exp $	*/
d27 1
a27 1
 * userland within libpthread on a needed basis.
d51 1
a51 2
struct thread_control_block;
__register__ struct thread_control_block *__tcb __asm__ ("%r27");
a53 1
#define	TCB_GET_MEMBER(member)	((void *)(__tcb->member))
a56 2
#include <stddef.h>		/* for offsetof */

a65 10
/* Get the value of a specific member in the TCB */
static inline void *
__m88k_read_tcb(size_t offset)
{
	void	*val;
	/* XXX the `offset' constraint ought to be "I" but this causes a warning */
	__asm__ ("ld %0,%%r27,%1" : "=r" (val) : "r" (offset));
	return val;
}

a68 3
#define TCB_GET_MEMBER(member)	\
	__m88k_read_tcb(offsetof(struct thread_control_block, member))

a71 1

@


1.2
log
@Use %r27 as the thread control block pointer, allowing for __get_tcb() calls
in libpthread to be optimized away.

While there, follow DG/UX's example of using more than one register for thread
purposes (after all, the ABI reserves four of them), and also use %r26 to store
a pointer to the current thread's errno.

Since it is not possible to initialize %r26 at thread creation without
intrusive and potentially race-prone changes, have __tfork() reset %r26 to
zero, and libpthread's __cerror lazy initialize it. As soon as %r26 is nonzero,
it will be used instead of calling __errno().

This means that binaries linked against HEAD libpthread need to run on HEAD
kernels, and we are belatedly jumping on the 64-bit time_t bump (since there
are no 64-bit time_t m88k snapshots yet).

Joint work with guenther@@; "Your love of asm is sick and wrong, and yet
beautiful." and ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.1 2011/10/27 04:01:17 guenther Exp $	*/
d81 1
a81 1
#define TCB_SET(tcb)	__asm __volatile("or %%r27,%0,%r0" : : "r" (tcb))
@


1.1
log
@Specify the TLS variant for each platform.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d22 8
d32 6
a37 1
#error "not yet"
d41 46
a86 2
/* Not ELF, so for now use a big TCB to save a memory reference for errno */
#define TLS_VARIANT	2
@

