head	1.20;
access;
symbols
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.12
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.14
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.20
date	2015.11.01.20.10.00;	author miod;	state Exp;
branches;
next	1.19;
commitid	sHllVPiKPJBfwmTJ;

1.19
date	2015.02.10.10.02.55;	author tedu;	state Exp;
branches;
next	1.18;
commitid	X8GpdpDRNqUOBsMT;

1.18
date	2014.10.09.04.01.27;	author tedu;	state Exp;
branches;
next	1.17;
commitid	wAdRwhtUH36R0JxT;

1.17
date	2014.10.09.03.59.59;	author tedu;	state Exp;
branches;
next	1.16;
commitid	I0KLtD9aVxAdm6aW;

1.16
date	2014.05.31.20.11.11;	author miod;	state Exp;
branches;
next	1.15;
commitid	0tTWseP2VVvnz1EB;

1.15
date	2014.03.18.22.36.34;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2013.02.20.05.08.41;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.30.22.25.21;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.31.21.38.08;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.04.17.20.39;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.20.22.34.00;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.19.20.56.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.07.15.48.01;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.01.22.24.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.28.01.36.38;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: vmparam.h,v 1.19 2015/02/10 10:02:55 tedu Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

/*
 *	machine dependent virtual memory parameters.
 */


#ifndef	_MACHINE_VM_PARAM_
#define _MACHINE_VM_PARAM_

#define	USRSTACK	VM_MAXUSER_ADDRESS	/* Start of user stack */

/*
 * Virtual memory related constants, all in bytes
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(32*1024*1024)		/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(64*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(256*1024*1024)		/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/*
 * Size of shared memory map
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	1024
#endif

#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define	VM_MAX_ADDRESS		((vaddr_t)0xfffff000)
#define VM_MAXUSER_ADDRESS	VM_MAX_ADDRESS

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(1 * NPTEPG * PAGE_SIZE)

/*
 * Constants which control the way the VM system deals with memory segments.
 * All m88k systems so far only have one physical memory segment.
 */
#define	VM_PHYSSEG_MAX		1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_RANDOM
#define	VM_PHYSSEG_NOADD

#endif /* _MACHINE_VM_PARAM_ */
@


1.19
log
@increase min address to page size for all remaining min == 0 systems.
not necessary, but consistent with other platforms. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2014/10/09 04:01:27 tedu Exp $ */
a35 5
/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack.
 */
#define	USRTEXT		0x1000			/* Start of user text */
@


1.18
log
@revert unintentional commit unrelated to LKM
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2014/10/09 03:59:59 tedu Exp $ */
d74 1
a74 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.17
log
@remove LKM devices
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2014/05/31 20:11:11 miod Exp $ */
d74 1
a74 1
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
@


1.16
log
@Reduce MAXSSIZ to 32MB to match all other platforms; noticed by tobiasu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2014/03/18 22:36:34 miod Exp $ */
d74 1
a74 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.15
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2014/01/30 18:16:41 miod Exp $ */
d62 1
a62 1
#define	MAXSSIZ		(128*1024*1024)		/* max stack size */
@


1.14
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2014/01/23 22:06:29 miod Exp $ */
d83 1
a83 1
 * The mvme88k only has one physical memory segment.
@


1.13
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2013/02/20 05:08:41 miod Exp $ */
a87 26

#ifndef _LOCORE
/*
 * pmap-specific data stored in the vm_physmem[] array.
 */

/* XXX - belongs in pmap.h, but put here because of ordering issues */
struct pv_entry {
	struct pv_entry	*pv_next;	/* next pv_entry */
	struct pmap	*pv_pmap;	/* pmap where mapping lies */
	vaddr_t		pv_va;		/* virtual address for mapping */
	int		pv_flags;
};

struct vm_page_md {
	struct pv_entry pvent;
};

#define	VM_MDPAGE_INIT(pg) do {			\
	(pg)->mdpage.pvent.pv_next = NULL;	\
	(pg)->mdpage.pvent.pv_pmap = NULL;	\
	(pg)->mdpage.pvent.pv_va = 0;		\
	(pg)->mdpage.pvent.pv_flags = 0;	\
} while (0)

#endif /* _LOCORE */
@


1.12
log
@Increase maximum text and data size limits, and double the default data size
limit. This allows c++ memory hogs, such as pcre's pcrecpp_unittest.cc,
to compile on m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2011/05/30 22:25:21 oga Exp $ */
a101 1
#define	__HAVE_VM_PAGE_MD
@


1.11
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2010/12/31 21:38:08 miod Exp $ */
d47 1
a47 1
#define	MAXTSIZ		(8*1024*1024)		/* max text size */
d50 1
a50 1
#define	DFLDSIZ		(32*1024*1024)		/* initial data size limit */
d53 1
a53 1
#define	MAXDSIZ		(64*1024*1024)		/* max data size */
d62 1
a62 1
#define	MAXSSIZ		MAXDSIZ			/* max stack size */
@


1.10
log
@Massive overhauling of the m88k pmap, though I can't pretend it's a new pmap
since a large part of the structures and logic remains.

Since m88k has separate supervisor/user spaces, we can map physical memory 1:1
in supervisor space, and have the kernel virtual address space start from the
end of physical memory.

This allows us to switch to __HAVE_PMAP_DIRECT. And to get rid of the double
mapped sdt, since now their virtual and physical addresses will always match.

The upper bound of the kernel virtual memory space is now platform dependent,
until the code which relies upon some hardware devices being mapped 1:1 in
supervisor mode is updated to no longer require this (this is mainly a PITA on
luna88k, where onboard devices start at 0x40000000, leaving only 1GB of KVA at
the moment - still much better than the previous 512MB).

Tested on mvme88k only (187, 188, 197LE, 197DP). Other platforms ought to
work, aviion will be checked shortly and fixed if necessary. No known
OpenBSD/luna88k system in working condition at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2010/12/15 05:30:19 tedu Exp $ */
a87 3

#define VM_NFREELIST		1
#define VM_FREELIST_DEFAULT	0
@


1.9
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2006/06/04 17:20:39 miod Exp $ */
a76 8

/*
 * Although user and supervisor address spaces are separate, we limit
 * ourselves to 512KB KVM because the kernel page table is statically
 * allocated.
 */
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)0x20000000)
@


1.8
log
@When VM_PHYSSEG_MAX is 1, use VM_PSTRAT_RANDOM for VM_PHYSSEG_STRAT, this
makes uvm_page.o smaller.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2006/05/20 22:34:00 miod Exp $ */
d54 3
@


1.7
log
@Crank VM_MAX_ADDRESS to 4GB minus one page now that pmap will accept it.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2006/05/19 20:56:23 miod Exp $ */
d91 1
a91 1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
@


1.6
log
@INTSTACK_SIZE is not used anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2006/05/07 15:48:01 miod Exp $ */
d72 1
a72 1
#define	VM_MAX_ADDRESS		((vaddr_t)0xffc00000)
@


1.5
log
@Move the userland stack at the top of the userland address space.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2005/12/01 22:24:49 miod Exp $ */
a81 2

#define INTSTACK_SIZE		(4 * PAGE_SIZE)	/* interrupt stack size */
@


1.4
log
@Get rid of PMAP_NULL and xx_ENTRY_NULL and simply use NULL when necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2005/04/11 15:13:01 deraadt Exp $ */
d41 1
a41 1
#define	USRSTACK	0x80000000		/* Start of user stack */
d71 2
a72 2
#define	VM_MIN_ADDRESS		((vaddr_t) 0)
#define	VM_MAX_ADDRESS		((vaddr_t) 0xffc00000)
d75 7
a81 4
/* on vme188, max = 0xf0000000 */

#define VM_MIN_KERNEL_ADDRESS	((vaddr_t) 0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t) 0x20000000)
a82 1
#define KERNEL_STACK_SIZE	(3 * PAGE_SIZE)	/* kernel stack size */
@


1.3
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 2004/11/28 01:36:38 mickey Exp $ */
d117 1
a117 1
	(pg)->mdpage.pvent.pv_pmap = PMAP_NULL;	\
@


1.2
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2004/04/26 12:34:05 miod Exp $ */
d61 2
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.25 2003/12/28 22:12:34 miod Exp $ */
a67 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

