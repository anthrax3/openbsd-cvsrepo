head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.8
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.10
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.12
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.8
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.15
date	2016.05.27.16.32.38;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	c5mTYSkstZ7XStNS;

1.14
date	2013.05.17.22.28.21;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.28.17.41.04;	author martynas;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.11.21.19.45;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.02.21.24.21;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.08.14.03.34;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.03.14.30.05;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.13.19.47.12;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.30.16.46.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.27.21.12.44;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.28.12.28.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.28.12.28.06;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.47;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove the non ELF macros
ok millert
@
text
@/*	$OpenBSD: asm.h,v 1.14 2013/05/17 22:28:21 miod Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1993-1992 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef _M88K_ASM_H_
#define _M88K_ASM_H_

#define	_C_LABEL(name)		name
#define	_ASM_LABEL(name)	name

#define	_ENTRY(name) \
	.text; .align 3; .globl name; .type name,@@function; name:

#define	ENTRY(name)		_ENTRY(_C_LABEL(name))
#define	ASENTRY(name)		_ENTRY(_ASM_LABEL(name))

#define	END(name) \
	.size name,.-name

#define	GLOBAL(name) \
	.globl _C_LABEL(name); _C_LABEL(name):

#define ASGLOBAL(name) \
	.globl _ASM_LABEL(name); _ASM_LABEL(name):

#define	LOCAL(name) \
	_C_LABEL(name):

#define	ASLOCAL(name) \
	_ASM_LABEL(name):

#define	BSS(name, size) \
	.comm	_C_LABEL(name), size

#define	ASBSS(name, size) \
	.comm	_ASM_LABEL(name), size

#define	STRONG_ALIAS(alias,sym)						\
	.global alias;							\
	alias = sym
#define	WEAK_ALIAS(alias,sym)						\
	.weak alias;							\
	alias = sym

#ifdef _KERNEL

#ifdef _LOCORE

/*
 * Control register symbolic names
 */

#define	PID	%cr0
#define	PSR	%cr1
#define	EPSR	%cr2
#define	SSBR	%cr3
#define	SXIP	%cr4		/* 88100 */
#define	EXIP	%cr4		/* 88110 */
#define	SNIP	%cr5		/* 88100 */
#define	ENIP	%cr5		/* 88110 */
#define	SFIP	%cr6		/* 88100 */
#define	VBR	%cr7
#define	DMT0	%cr8		/* 88100 */
#define	DMD0	%cr9		/* 88100 */
#define	DMA0	%cr10		/* 88100 */
#define	DMT1	%cr11		/* 88100 */
#define	DMD1	%cr12		/* 88100 */
#define	DMA1	%cr13		/* 88100 */
#define	DMT2	%cr14		/* 88100 */
#define	DMD2	%cr15		/* 88100 */
#define	DMA2	%cr16		/* 88100 */
#define	SRX	%cr16		/* 88110 */
#define	SR0	%cr17
#define	SR1	%cr18
#define	SR2	%cr19
#define	SR3	%cr20
#define	ICMD	%cr25		/* 88110 */
#define	ICTL	%cr26		/* 88110 */
#define	ISAR	%cr27		/* 88110 */
#define	ISAP	%cr28		/* 88110 */
#define	IUAP	%cr29		/* 88110 */
#define	IIR	%cr30		/* 88110 */
#define	IBP	%cr31		/* 88110 */
#define	IPPU	%cr32		/* 88110 */
#define	IPPL	%cr33		/* 88110 */
#define	ISR	%cr34		/* 88110 */
#define	ILAR	%cr35		/* 88110 */
#define	IPAR	%cr36		/* 88110 */
#define	DCMD	%cr40		/* 88110 */
#define	DCTL	%cr41		/* 88110 */
#define	DSAR	%cr42		/* 88110 */
#define	DSAP	%cr43		/* 88110 */
#define	DUAP	%cr44		/* 88110 */
#define	DIR	%cr45		/* 88110 */
#define	DBP	%cr46		/* 88110 */
#define	DPPU	%cr47		/* 88110 */
#define	DPPL	%cr48		/* 88110 */
#define	DSR	%cr49		/* 88110 */
#define	DLAR	%cr50		/* 88110 */
#define	DPAR	%cr51		/* 88110 */

#define	FPECR	%fcr0
#define	FPHS1	%fcr1		/* 88100 */
#define	FPLS1	%fcr2		/* 88100 */
#define	FPHS2	%fcr3		/* 88100 */
#define	FPLS2	%fcr4		/* 88100 */
#define	FPPT	%fcr5		/* 88100 */
#define	FPRH	%fcr6		/* 88100 */
#define	FPRL	%fcr7		/* 88100 */
#define	FPIT	%fcr8		/* 88100 */
#define	FPSR	%fcr62
#define	FPCR	%fcr63

#define	CPU	SR0

/*
 * At various times, there is the need to clear the pipeline (i.e.
 * synchronize).  A "tb1 0, r0, foo" will do that (because a trap
 * instruction always synchronizes, and this particular instruction
 * will never actually take the trap).
 */
#define	FLUSH_PIPELINE		tb1	0, %r0, 0

#define	NOP			or	%r0, %r0, %r0
#define RTE			NOP; rte

/*
 * PSR bits
 */
#define	PSR_SHADOW_FREEZE_BIT		0
#define	PSR_INTERRUPT_DISABLE_BIT	1
#define	PSR_FPU_DISABLE_BIT		3
#define	PSR_GRAPHICS_DISABLE_BIT	4	/* SFU2 - MC88110 */
#define	PSR_SERIALIZE_BIT		25	/* MC88110 */
#define	PSR_CARRY_BIT			28
#define	PSR_SERIAL_MODE_BIT		29
#define	PSR_BIG_ENDIAN_MODE		30
#define	PSR_SUPERVISOR_MODE_BIT		31

/*
 * DMT0/DMT1/DMT2 bits
 */
#define	DMT_VALID_BIT		0
#define	DMT_WRITE_BIT		1
#define	DMT_LOCK_BIT		12
#define	DMT_DOUBLE_BIT		13
#define	DMT_DAS_BIT		14
#define	DMT_DREG_OFFSET		7
#define	DMT_DREG_WIDTH		5

/*
 * Status bits for an SXIP/SNIP/SFIP address.
 */
#define	RTE_VALID_BIT		1
#define	RTE_ERROR_BIT		0

#define	VECTOR(x) \
	.word	_C_LABEL(x)

#endif	/* _LOCORE */

#endif	/* _KERNEL */

#endif	/* _M88K_ASM_H_ */
@


1.14
log
@Fix comments telling that the `serial mode' bit in PSR only applies to 88110,
it also exists on 88100. While there, do not allow userland to set it.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.13 2013/03/28 17:41:04 martynas Exp $	*/
a32 1
#ifdef	__ELF__
a33 8
#else
#ifdef __STDC__
#define	_C_LABEL(name)		_ ## name
#else
#define	_C_LABEL(name)		_/**/name
#endif
#endif

a35 1
#ifdef __ELF__
a37 4
#else
#define	_ENTRY(name) \
	.text; .align 8; .globl name; name:
#endif
a62 1
#ifdef	__ELF__
a68 8
#else
#define	STRONG_ALIAS(alias,sym)						\
	.global _##alias;						\
	_##alias = _##sym
#define	WEAK_ALIAS(alias,sym)						\
	.weak _##alias;							\
	_##alias = _##sym
#endif
@


1.13
log
@Add STRONG_ALIAS macros to be used from assembly code in libc and
libm.  While at it, remove now unused workarounds for lint.
Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.12 2013/01/11 21:19:45 miod Exp $	*/
d184 1
a184 1
#define	PSR_SERIAL_MODE_BIT		29	/* MC88110 */
@


1.12
log
@Make ENTRY() generate a .type @@function declaration as well if __ELF__.
Add an END() macro, to be used to match ENTRY(), which produces a .size
directive.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.11 2013/01/05 11:20:56 miod Exp $	*/
d78 3
d85 3
a87 1
#ifdef	__STDC__
a90 5
#else
#define	WEAK_ALIAS(alias,sym)						\
	.weak _/**/alias;						\
	_/**/alias = _/**/sym
#endif
@


1.11
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.10 2011/03/23 16:54:35 pirofti Exp $	*/
d45 1
d47 5
a51 1
	.text; .balign 8; .globl name; name:
d55 3
@


1.10
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.9 2007/12/02 21:24:21 miod Exp $	*/
d33 3
d41 1
d46 1
a46 1
	.text; .align 8; .globl name; name:
d93 60
a152 60
#define	PID	cr0
#define	PSR	cr1
#define	EPSR	cr2
#define	SSBR	cr3
#define	SXIP	cr4		/* 88100 */
#define	EXIP	cr4		/* 88110 */
#define	SNIP	cr5		/* 88100 */
#define	ENIP	cr5		/* 88110 */
#define	SFIP	cr6		/* 88100 */
#define	VBR	cr7
#define	DMT0	cr8		/* 88100 */
#define	DMD0	cr9		/* 88100 */
#define	DMA0	cr10		/* 88100 */
#define	DMT1	cr11		/* 88100 */
#define	DMD1	cr12		/* 88100 */
#define	DMA1	cr13		/* 88100 */
#define	DMT2	cr14		/* 88100 */
#define	DMD2	cr15		/* 88100 */
#define	DMA2	cr16		/* 88100 */
#define	SRX	cr16		/* 88110 */
#define	SR0	cr17
#define	SR1	cr18
#define	SR2	cr19
#define	SR3	cr20
#define	ICMD	cr25		/* 88110 */
#define	ICTL	cr26		/* 88110 */
#define	ISAR	cr27		/* 88110 */
#define	ISAP	cr28		/* 88110 */
#define	IUAP	cr29		/* 88110 */
#define	IIR	cr30		/* 88110 */
#define	IBP	cr31		/* 88110 */
#define	IPPU	cr32		/* 88110 */
#define	IPPL	cr33		/* 88110 */
#define	ISR	cr34		/* 88110 */
#define	ILAR	cr35		/* 88110 */
#define	IPAR	cr36		/* 88110 */
#define	DCMD	cr40		/* 88110 */
#define	DCTL	cr41		/* 88110 */
#define	DSAR	cr42		/* 88110 */
#define	DSAP	cr43		/* 88110 */
#define	DUAP	cr44		/* 88110 */
#define	DIR	cr45		/* 88110 */
#define	DBP	cr46		/* 88110 */
#define	DPPU	cr47		/* 88110 */
#define	DPPL	cr48		/* 88110 */
#define	DSR	cr49		/* 88110 */
#define	DLAR	cr50		/* 88110 */
#define	DPAR	cr51		/* 88110 */

#define	FPECR	fcr0
#define	FPHS1	fcr1		/* 88100 */
#define	FPLS1	fcr2		/* 88100 */
#define	FPHS2	fcr3		/* 88100 */
#define	FPLS2	fcr4		/* 88100 */
#define	FPPT	fcr5		/* 88100 */
#define	FPRH	fcr6		/* 88100 */
#define	FPRL	fcr7		/* 88100 */
#define	FPIT	fcr8		/* 88100 */
#define	FPSR	fcr62
#define	FPCR	fcr63
d162 1
a162 1
#define	FLUSH_PIPELINE		tb1	0, r0, 0
d164 1
a164 1
#define	NOP			or	r0, r0, r0
d198 1
a198 1
	word	_C_LABEL(x)
@


1.9
log
@Sort and clean definitions. No functional changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.8 2006/05/08 14:03:34 miod Exp $	*/
d30 2
a31 2
#ifndef __M88K_ASM_H__
#define __M88K_ASM_H__
d200 1
a200 1
#endif	/* __M88K_ASM_H__ */
@


1.8
log
@Clean the internal m88k trap type codes; while there, simplify and
factorize the build of the VBR page betweem luna88k and mvme88k.

Tested by aoyama@@ and I.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.7 2005/12/03 14:30:05 miod Exp $	*/
d84 1
d93 5
a97 3
#define	SXIP	cr4
#define	SNIP	cr5
#define	SFIP	cr6
d99 10
a108 9
#define	DMT0	cr8
#define	DMD0	cr9
#define	DMA0	cr10
#define	DMT1	cr11
#define	DMD1	cr12
#define	DMA1	cr13
#define	DMT2	cr14
#define	DMD2	cr15
#define	DMA2	cr16
d113 24
a136 30

/* MVME197 only */
#define	SRX	cr16
#define	EXIP	cr4
#define	ENIP	cr5
#define	ICMD	cr25
#define	ICTL	cr26
#define	ISAR	cr27
#define	ISAP	cr28
#define	IUAP	cr29
#define	IIR	cr30
#define	IBP	cr31
#define	IPPU	cr32
#define	IPPL	cr33
#define	ISR	cr34
#define	ILAR	cr35
#define	IPAR	cr36
#define	DCMD	cr40
#define	DCTL	cr41
#define	DSAR	cr42
#define	DSAP	cr43
#define	DUAP	cr44
#define	DIR	cr45
#define	DBP	cr46
#define	DPPU	cr47
#define	DPPL	cr48
#define	DSR	cr49
#define	DLAR	cr50
#define	DPAR	cr51
/* end MVME197 only */
d139 8
a146 8
#define	FPHS1	fcr1
#define	FPLS1	fcr2
#define	FPHS2	fcr3
#define	FPLS2	fcr4
#define	FPPT	fcr5
#define	FPRH	fcr6
#define	FPRL	fcr7
#define	FPIT	fcr8
d150 2
d159 1
d161 1
a161 1
#define RTE			NOP ; rte
d164 1
a164 1
 * Info about the PSR
d169 4
a174 22
/*
 * mc88110 PSR bit definitions (MVME197)
 */
#define PSR_GRAPHICS_DISABLE_BIT	4
#define PSR_SERIAL_MODE_BIT		29
#define PSR_CARRY_BIT			28
#define PSR_SERIALIZE_BIT		25

#define	VECTOR(x) \
	word	_C_LABEL(x)

#define	CPU	SR0

#endif	/* _LOCORE */

#define	FLUSH_PIPELINE_STRING	"tb1	0, r0, 0"

/*
 * Status bits for an SXIP/SNIP/SFIP address.
 */
#define	RTE_VALID_BIT		1
#define	RTE_ERROR_BIT		0
d177 1
a177 1
 * Info about DMT0/DMT1/DMT2
d187 11
d200 1
a200 1
#endif /* __M88K_ASM_H__ */
@


1.7
log
@Switch m88k ports to __HAVE_CPUINFO. Current cpu pointer is held in SR0
on all running processors.
Tested aoyama@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.6 2005/10/13 19:47:12 miod Exp $	*/
a202 4

/* exception vector marker */
#define	UNKNOWN_HANDLER		0xffffffff
#define	END_OF_VECTOR_LIST	0xfffffffe
@


1.6
log
@Hide more definitions from userland and from locore.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.5 2005/04/30 16:46:49 miod Exp $	*/
a162 6
 * Fields in cr18. More bits are used privately in the exception handling
 * code.
 */
#define FLAG_CPU_FIELD_WIDTH		2	/* must match cpu_number() */

/*
d180 2
@


1.5
log
@Move CALL() from <machine/asm.h> to eh.S which is the only user of the macro,
and replace it with faster constructs in some cases; also drop the unused
CALLP() macro.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.4 2005/04/27 21:12:44 miod Exp $	*/
d83 1
a157 4
#if 0
#define	FLUSH_PIPELINE		tcnd	ne0, r0, 0
#define	FLUSH_PIPELINE_STRING	"tcnd	ne0, r0, 0"
#else
a158 2
#define	FLUSH_PIPELINE_STRING	"tb1	0, r0, 0"
#endif
d160 1
a160 3
#define	NOP_STRING		"or	r0, r0, r0"

#define RTE	NOP ; rte
d166 1
a166 1
#define FLAG_CPU_FIELD_WIDTH		2	/* must match cpu_number.h */
d184 7
a210 3

#define	VECTOR(x) \
	word	_C_LABEL(x)
@


1.4
log
@Shave more stack operations, courtesy of the not-so-new-now ABI.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.3 2004/07/28 12:28:48 miod Exp $	*/
a167 16

/*
 * Useful in some situations.
 */
#define CALL(NAME, ARG1, ARG2) \
	or	r2, r0, ARG1; \
	bsr.n	NAME; \
	 or	r3, r0, ARG2

/* This define is similar to CALL, but accepts a function pointer XXX smurph */
#define CALLP(NAME, ARG1, ARG2) \
	or.u	r5, r0, hi16(NAME); \
	ld	r4, r5, lo16(NAME); \
	or	r2, r0, ARG1; \
	jsr.n	r4; \
	 or	r3, r0, ARG2
@


1.3
log
@Remove EH_DEBUG code.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.2 2004/07/28 12:28:06 miod Exp $	*/
a172 1
	subu	r31, r31, 32; \
d175 1
a175 2
	 or	r3, r0, ARG2; \
	addu	r31, r31, 32
a178 1
	subu	r31, r31, 32; \
d183 1
a183 2
	 or	r3, r0, ARG2; \
	addu	r31, r31, 32
@


1.2
log
@Keep exception specific defines in the exception handling code, instead of
polluting the kernel namespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.1 2004/04/26 12:34:05 miod Exp $	*/
a226 37

/*
 * Bits for eh_debug.
 */
#define	DEBUG_INTERRUPT_BIT		0
#define	DEBUG_DATA_BIT			1
#define	DEBUG_INSTRUCTION_BIT		2
#define	DEBUG_MISALIGN_BIT		3
#define	DEBUG_UNIMP_BIT			4
#define	DEBUG_DIVIDE_BIT		5
#define	DEBUG_OF_BIT			6
#define	DEBUG_FPp_BIT			7
#define	DEBUG_FPi_BIT			8
#define	DEBUG_SYSCALL_BIT	 	9
#define	DEBUG_MACHSYSCALL_BIT		10
#define	DEBUG_UNIMPLEMENTED_BIT		11
#define	DEBUG_PRIVILEGE_BIT		12
#define	DEBUG_BOUNDS_BIT		13
#define	DEBUG_OVERFLOW_BIT		14
#define	DEBUG_ERROR_BIT			15
#define	DEBUG_SIGSYS_BIT		16
#define	DEBUG_SIGTRAP_BIT		17
#define	DEBUG_BREAK_BIT			18
#define	DEBUG_TRACE_BIT			19
#define	DEBUG_KDB_BIT			20
#define	DEBUG_JKDB_BIT			21
#define	DEBUG_BUGCALL_BIT		22
/* MVME197 Non-Maskable Interrupt */
#define	DEBUG_NON_MASK_BIT		23
/* MVME197 Data Read Miss (Software Table Searches) */
#define	DEBUG_197_READ_BIT		25
/* MVME197 Data Write Miss (Software Table Searches) */
#define	DEBUG_197_WRITE_BIT		26
/* MVME197 Inst ATC Miss (Software Table Searches) */
#define	DEBUG_197_INST_BIT		27

#define	DEBUG_UNKNOWN_BIT		31
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.26 2004/01/23 17:26:05 miod Exp $	*/
d30 2
a31 2
#ifndef __MACHINE_M88K_ASM_H__
#define __MACHINE_M88K_ASM_H__
d190 2
a191 31
 * SR1 - CPU FLAGS REGISTER
 * XXX clean this when the trap handler is reworked. Among the things
 * I like to see is having the trap frame on the kernel stack instead
 * of putting in the PCB. If done properly, we don't need SR1 for doing
 * anything special. nivas
 *
 * SR1 contains flags about the current CPU status.
 *
 * The bit FLAG_IGNORE_DATA_EXCEPTION indicates that any data exceptions
 * 	should be ignored (well, at least treated in a special way).
 * The bit FLAG_ENABLING_FPU indicates that the exception handler is
 * 	in the process of enabling the FPU (so that an exception can
 * 	be serviced).  This is needed because enabling the FPU can
 *	cause other exceptions to happen, and the whole system is
 *	in a rather precarious state and so special cautions must
 * 	be taken.
 */
#define FLAG_CPU_FIELD_WIDTH		2	/* must be <= 12 */
#define FLAG_IGNORE_DATA_EXCEPTION	5
#define FLAG_ENABLING_FPU		7
#define FLAG_FROM_KERNEL		8

/* REGister OFFset into the E.F. (exception frame) */
#define REG_OFF(reg_num)  ((reg_num) * 4) /* (num * sizeof(register_t))  */
#define GENREG_OFF(num)	(REG_OFF(EF_R0 + (num))) /* GENeral REGister OFFset */

/*
 * Some registers used during the setting up of the new exception frame.
 * Don't choose r1, r30, or r31 for any of them.
 *
 * Also, if any are 'r2' or 'r3', be careful using with CALL above!
d193 1
a193 8
#define	FLAGS	r2
#define	TMP	r3
#define	TMP2	r10
#define	TMP3	r11
#define	SAVE_TMP2	st	r10, r31, GENREG_OFF(10)
#define	SAVE_TMP3	st	r11, r31, GENREG_OFF(11)
#define	RESTORE_TMP2	ld	r10, r31, GENREG_OFF(10)
#define	RESTORE_TMP3	ld	r11, r31, GENREG_OFF(11)
d274 1
a274 1
#endif /* __MACHINE_M88K_ASM_H__ */
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

