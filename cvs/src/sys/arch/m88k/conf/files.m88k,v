head	1.29;
access;
symbols
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.6
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.4
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.24.0.10
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.8
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.6
	OPENBSD_5_0:1.24.0.4
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.23.0.6
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.23.0.4
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.22.0.4
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.16.0.8
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.6
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@# @;


1.29
date	2015.07.17.22.52.28;	author tedu;	state Exp;
branches;
next	1.28;
commitid	OOrGfFHYAn65M2qc;

1.28
date	2014.07.01.20.26.09;	author miod;	state Exp;
branches;
next	1.27;
commitid	iAtGSRVdQhSqPb5V;

1.27
date	2014.06.09.16.26.32;	author miod;	state Exp;
branches;
next	1.26;
commitid	CkVHFMR82yg837kv;

1.26
date	2014.06.09.10.26.10;	author miod;	state Exp;
branches;
next	1.25;
commitid	E2E44pbVLWw8DohS;

1.25
date	2013.06.07.17.31.31;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2010.12.31.21.38.08;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2009.03.15.20.39.53;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2009.02.20.20.40.00;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2008.04.25.14.51.35;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.12.29.17.41.29;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2007.12.25.00.29.46;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2007.12.02.21.20.17;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.25.18.25.28;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.03.19.01.13;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.03.14.30.05;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.24.19.28.28;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2005.07.14.02.09.46;	author uwe;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.05.14.28.32;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.04.22.31.46;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.01.21.36.56;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.30.14.55.54;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.30.09.20.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.06.13.23.49;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.01.17.18.05;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.25.11.06.42;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.23.15.34.03;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.19.18.28.37;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.29.14.33.27;	author miod;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.09.47;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.29
log
@remove obsolete INET kernel option
@
text
@#	$OpenBSD: files.m88k,v 1.28 2014/07/01 20:26:09 miod Exp $

file	arch/m88k/m88k/atomic.S				multiprocessor
file	arch/m88k/m88k/db_disasm.c			ddb
file	arch/m88k/m88k/db_interface.c			ddb
file	arch/m88k/m88k/db_sstep.c			ddb
file	arch/m88k/m88k/db_trace.c			ddb
file	arch/m88k/m88k/fpu.c
file	arch/m88k/m88k/in_cksum.c
file	arch/m88k/m88k/m88100_fp.c			m88100
file	arch/m88k/m88k/m88100_machdep.c			m88100
file	arch/m88k/m88k/m88110_fp.c			m88110
file	arch/m88k/m88k/m88110_mmu.S			m88110
file	arch/m88k/m88k/m8820x_machdep.c			m88100
file	arch/m88k/m88k/m88k_machdep.c
file	arch/m88k/m88k/mem.c
file	arch/m88k/m88k/mplock.c				multiprocessor
file	arch/m88k/m88k/mutex.S
file	arch/m88k/m88k/pmap.c
file	arch/m88k/m88k/process.S
file	arch/m88k/m88k/process_machdep.c
file	arch/m88k/m88k/sig_machdep.c
file	arch/m88k/m88k/softintr.c
file	arch/m88k/m88k/subr.S
file	arch/m88k/m88k/trap.c
file	arch/m88k/m88k/vectors_88100.S			m88100
file	arch/m88k/m88k/vectors_88110.S			m88110
file	arch/m88k/m88k/vm_machdep.c

file	lib/libkern/softfloat.c

file	lib/libkern/arch/m88k/divsi3.S
file	lib/libkern/arch/m88k/modsi3.S
file	lib/libkern/arch/m88k/udivsi3.S
file	lib/libkern/arch/m88k/umodsi3.S

# quad support is necessary for 32 bit architectures
file	lib/libkern/adddi3.c
file	lib/libkern/anddi3.c
file	lib/libkern/ashldi3.c
file	lib/libkern/ashrdi3.c
file	lib/libkern/cmpdi2.c
file	lib/libkern/divdi3.c
file	lib/libkern/iordi3.c
file	lib/libkern/lshldi3.c
file	lib/libkern/lshrdi3.c
file	lib/libkern/moddi3.c
file	lib/libkern/muldi3.c
file	lib/libkern/negdi2.c
file	lib/libkern/notdi2.c
file	lib/libkern/qdivrem.c
file	lib/libkern/subdi3.c
file	lib/libkern/ucmpdi2.c
file	lib/libkern/udivdi3.c
file	lib/libkern/umoddi3.c
file	lib/libkern/xordi3.c
@


1.28
log
@Replace the assembly 88100 FPU imprecise exception code (mostly triggered by
denormal results) with C code using softfloat to correctly round the inexact
results in the best possible way according to the current rounding mode.

No functional change intended, and this assembly code was surprisingly almost
non-buggy, as opposed to the precise exception code replaced a few weeks ago;
still an improvement as this replaces 900 lines of arcane assembly with 90
lines of understandable C code.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.27 2014/06/09 16:26:32 miod Exp $
d9 1
a9 1
file	arch/m88k/m88k/in_cksum.c			inet
@


1.27
log
@Replace the unmaintainable assembler code responsible for 88100 precise FPU
fault handling with a C wrapper around the softfloat code, as already done for
88110 kernels.

As a bonus, attempting to read or write FPU control registers but fcr62 and
fcr63 in userland will now correctly signal an illegal instruction, instead
of leaving the destination register unchanged and pretending nothing bad
happened.

Be sure to rm m88100_fp.d in your kernel compile directory after updating your
tree.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.26 2014/06/09 10:26:10 miod Exp $
a10 1
file	arch/m88k/m88k/m88100_fp_imp.S			m88100
@


1.26
log
@Split the 88100 floating point support code in two files, one for the precise
exceptions, one for the imprecise exceptions. No functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.25 2013/06/07 17:31:31 miod Exp $
d8 1
d10 1
a10 1
file	arch/m88k/m88k/m88100_fp.S			m88100
d13 1
d31 1
a31 3
# floating-point support code for 88110
file	arch/m88k/m88k/m88110_fp.c			m88110
file	lib/libkern/softfloat.c				m88110
@


1.25
log
@Add {,u}{div,mod}si3 to libkern and to the kernel as well.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.24 2010/12/31 21:38:08 miod Exp $
d10 1
@


1.24
log
@Massive overhauling of the m88k pmap, though I can't pretend it's a new pmap
since a large part of the structures and logic remains.

Since m88k has separate supervisor/user spaces, we can map physical memory 1:1
in supervisor space, and have the kernel virtual address space start from the
end of physical memory.

This allows us to switch to __HAVE_PMAP_DIRECT. And to get rid of the double
mapped sdt, since now their virtual and physical addresses will always match.

The upper bound of the kernel virtual memory space is now platform dependent,
until the code which relies upon some hardware devices being mapped 1:1 in
supervisor mode is updated to no longer require this (this is mainly a PITA on
luna88k, where onboard devices start at 0x40000000, leaving only 1GB of KVA at
the moment - still much better than the previous 512MB).

Tested on mvme88k only (187, 188, 197LE, 197DP). Other platforms ought to
work, aviion will be checked shortly and fixed if necessary. No known
OpenBSD/luna88k system in working condition at the moment.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.23 2009/03/15 20:39:53 miod Exp $
d31 5
@


1.23
log
@Generic softinterrupt support for m88k based platforms, adapted from arm
with different locking mechanism. 88110 soft ipi are replaced with an
ipi callback which is checked upon return from exception (it can not be kept
as a softintr, as the generic softinterrupt code doesn't have per-cpu
pending softintr queues).
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.22 2009/02/20 20:40:00 miod Exp $
d14 1
@


1.22
log
@atomic_{set,clear}bits_int were not safe enough on 88110 systems, as they
can be interrupted by NMI; move the SMP version of these routines from
inlines to a separate file (kernel text shrinks 20KB...).

Since the implementation for 88110 becomes really hairy, the pre-main() code
is responsible for copying the appropriate code over for kernels configured
for both 88100 and 88110 cpus, to avoid having to choose the atomicity
strategy at runtime. Hairy, I said.

This gets GENERIC.MP run much further on 197DP. Not enough to reach multiuser
mode, but boots up to starting sshd and then panics.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.21 2008/04/25 14:51:35 jmc Exp $
d20 1
@


1.21
log
@neccessary -> necessary; from Pierre Riteau
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.20 2007/12/29 17:41:29 miod Exp $
d3 1
@


1.20
log
@Had I known we had a kernel version of John Hauser's SoftFloat code, I would
have jumped on it instead of basing the FPU completion work on the sparc
FPU code.

This is now repaired with this commit, and m88110_fp.c changes directory
again, for the last time.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.19 2007/12/25 00:29:46 miod Exp $
d29 1
a29 1
# quad support is neccessary for 32 bit architectures
@


1.19
log
@Restart the m88110 floating-point trap code from scratch, basing it on the
sparc{,64} floating-point emulator, adapted to the 88110 specifics. Handling
of these traps is now entirely done in C for convenience.

Although there are a few rounding issues to address, and the XRF is ignored,
this allows all the ieee754 regression tests to pass (lib/libc/ieeefp,
sys/kern/signal/fpsig, sys/kern/signal/sigfpe).
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.18 2007/12/02 21:20:17 miod Exp $
d26 2
a27 9
file	arch/m88k/fpu/fpu_add.c				m88110
file	arch/m88k/fpu/fpu_compare.c			m88110
file	arch/m88k/fpu/fpu_div.c				m88110
file	arch/m88k/fpu/fpu_explode.c			m88110
file	arch/m88k/fpu/fpu_implode.c			m88110
file	arch/m88k/fpu/fpu_mul.c				m88110
file	arch/m88k/fpu/fpu_sqrt.c			m88110
file	arch/m88k/fpu/fpu_subr.c			m88110
file	arch/m88k/fpu/m88110_fp.c			m88110
@


1.18
log
@Rework the __mp_lock code to not spin at spllock(), kinda similar to the
x86 __mp_lock changes, but keeping the internal __cpu_simplelock_t to
guarantee atomic access to the __mp_lock fields.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.17 2007/11/25 18:25:28 deraadt Exp $
a9 1
file	arch/m88k/m88k/m88110_fp.S			m88110
d24 11
@


1.17
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.16 2005/12/03 19:01:13 miod Exp $
d14 1
@


1.16
log
@Fast __HAVE_MUTEX implementation for m88k platforms.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.15 2005/12/03 14:30:05 miod Exp $
d24 21
@


1.15
log
@Switch m88k ports to __HAVE_CPUINFO. Current cpu pointer is held in SR0
on all running processors.
Tested aoyama@@ and I
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.14 2005/10/24 19:28:28 miod Exp $
d14 1
@


1.14
log
@Factorize db_interface code between luna88k and mvme88k, removing dead code
in the process; the arch-agnostic code keeps the ability for a specific
machine to define its own machine commands, such as "machine prom" for
mvme88k, in addition to the ``regular'' m88k machine commands.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.13 2005/07/14 02:09:46 uwe Exp $
a2 1
file	arch/m88k/m88k/cmmu.c
@


1.13
log
@More netccitt and netns removals; OK henning, brad, mickey
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.12 2005/05/05 14:28:32 miod Exp $
d5 1
@


1.12
log
@Add a faster in4_cksum as well.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.11 2005/05/04 22:31:46 miod Exp $
a22 2

file	netns/ns_cksum.c	ns
@


1.11
log
@Switch m88k to a faster in_cksum implementation, the original 100%-C powerpc
version. The optimizer does a very good job on this, and there is nothing
left to optimize in the generated output...
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.10 2005/05/01 21:36:56 brad Exp $
a23 1
file	netinet/in4_cksum.c	inet
@


1.10
log
@To allow for MD override of in4_cksum()...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.9 2004/09/30 14:55:54 miod Exp $
d7 1
a23 1
file	netinet/in_cksum.c	inet
@


1.9
log
@More code shuffling, probably the final touch.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.8 2004/09/30 09:20:48 miod Exp $
d22 4
@


1.8
log
@Move common signal code to m88k-agnostic location.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.7 2004/08/06 13:23:49 miod Exp $
d12 1
@


1.7
log
@Merge Luna88k and mvme88k M88200 management code. Features:
- simpler structures (no more redundant or easily computable information).
- split scheme configuration (for 4:1 and 8:1 designs) is only compiled in
  if necessary (read: only on a mvme88k kernel configured for MVME188 support),
  which speeds up CMMU operations on the Luna88k.
- will not enable bus snopping on a monoprocessor system.

Tested on Luna88k-2, MVME187 and various MVME188 by aoyama@@ and I.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.6 2004/08/01 17:18:05 miod Exp $
d15 1
@


1.6
log
@Move 88100 DAE code to its own file, shared between luna88k and mvme88k.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.5 2004/07/25 11:06:42 miod Exp $
d11 1
@


1.5
log
@Merge luna88k and mvme88k pmap. The pmap will now assume that the memory
below the kernel text is reserved for the PROM, instead of using fixed
(but different) values between luna88k and mvme88k.

Tested on mvme88k by myself, on luna88k by aoyama@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.4 2004/07/23 15:34:03 miod Exp $
d8 1
@


1.4
log
@Move luna88k and mvme88k vm_machdep to m88k-agnostic code area.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.3 2004/06/19 18:28:37 miod Exp $
d10 1
@


1.3
log
@Share common ddb files accross m88k platforms.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.2 2004/04/29 14:33:27 miod Exp $
d16 1
@


1.2
log
@Continue factorizing m88k common code, this time files in <arch>/<arch>
which were copied verbatim from mvme88k to luna88k.

This requires backing out syntactic sugar in mvme88k kernel configuration
files which would deduct the required processor types from the board models,
as the common code only depends upon the M88100 and M88110 defines.
@
text
@d1 1
a1 1
#	$OpenBSD: files.m88k,v 1.1 2004/04/26 12:34:05 miod Exp $
d4 3
@


1.2.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.1
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 12
a12 1
#	$OpenBSD$
@

