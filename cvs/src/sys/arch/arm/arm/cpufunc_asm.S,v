head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.38
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.36
	OPENBSD_5_0:1.1.0.34
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.32
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.30
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.26
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.28
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.24
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.22
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.20
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.18
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.14
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2016.09.21.11.33.05;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	iKZYl5ksAPvBHoAc;

1.4
date	2016.04.25.04.46.56;	author jsg;	state Exp;
branches;
next	1.3;
commitid	XqdsV6PrfEUXwK4U;

1.3
date	2016.04.03.13.55.23;	author jsg;	state Exp;
branches;
next	1.2;
commitid	Zptl63HVhfEY4Ajo;

1.2
date	2013.01.23.19.57.47;	author patrick;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Modernize arm assembly in the kernel for clang.
Based on a similar diff in bitrig.
No binary change when compiled with gcc.

ok patrick@@
@
text
@/*	$OpenBSD: cpufunc_asm.S,v 1.4 2016/04/25 04:46:56 jsg Exp $	*/
/*	$NetBSD: cpufunc_asm.S,v 1.12 2003/09/06 09:14:52 rearnsha Exp $	*/

/*
 * Copyright (c) 1997,1998 Mark Brinicombe.
 * Copyright (c) 1997 Causality Limited
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Causality Limited.
 * 4. The name of Causality Limited may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CAUSALITY LIMITED ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL CAUSALITY LIMITED BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * cpufunc.S 
 *
 * Assembly functions for CPU / MMU / TLB specific operations
 *
 * Created      : 30/01/97
 */
 
#include <machine/cpu.h>
#include <machine/asm.h>
#include <arm/sysreg.h>

	.text
	.align	2

ENTRY(cpufunc_nullop)
	mov	pc, lr

/*
 * Generic functions to read the internal coprocessor registers
 *
 * Currently these registers are :
 *  c0 - CPU ID
 *  c5 - Fault status
 *  c6 - Fault address
 *
 */

ENTRY(cpufunc_id)
	mrc	CP15_MIDR(r0)	
	mov	pc, lr

ENTRY(cpu_get_control)
	mrc	CP15_SCTLR(r0)	
	mov	pc, lr

ENTRY(cpu_read_cache_config)
	mrc	CP15_CTR(r0)	
	mov	pc, lr

ENTRY(cpufunc_dfsr)
	mrc	CP15_DFSR(r0)	
	mov	pc, lr

ENTRY(cpufunc_dfar)
	mrc	CP15_DFAR(r0)	
	mov	pc, lr

ENTRY(cpufunc_ifsr)
	mrc	CP15_IFSR(r0)	
	mov	pc, lr

ENTRY(cpufunc_ifar)
	mrc	CP15_IFAR(r0)	
	mov	pc, lr


/*
 * Generic functions to write the internal coprocessor registers
 *
 *
 * Currently these registers are 
 *  c1 - CPU Control
 *  c3 - Domain Access Control
 *
 * All other registers are CPU architecture specific
 */
 
#if 0 /* See below. */
ENTRY(cpufunc_control)
	mcr	CP15_SCTLR(r0)	
	mov	pc, lr
#endif

ENTRY(cpufunc_domains)
	mcr	CP15_DACR(r0)	
	mov	pc, lr

/*
 * Generic functions to read/modify/write the internal coprocessor registers
 *
 *
 * Currently these registers are 
 *  c1 - CPU Control
 *
 * All other registers are CPU architecture specific
 */
 
ENTRY(cpufunc_control)
	mrc	CP15_SCTLR(r3)		/* Read the control register */
	bic	r2, r3, r0		/* Clear bits */
	eor	r2, r2, r1		/* XOR bits */

	teq	r2, r3			/* Only write if there is a change */
	mcrne	CP15_SCTLR(r2)		/* Write new control register */
	mov	r0, r3			/* Return old value */
	mov	pc, lr
 
ENTRY(cpufunc_auxcontrol)
	mrc	CP15_ACTLR(r3)		/* Read the aux control register */
	bic	r2, r3, r0		/* Clear bits */
	eor	r2, r2, r1		/* XOR bits */

	teq	r2, r3			/* Only write if there is a change */
	mcrne	CP15_ACTLR(r2)		/* Write new aux control register */
	mov	r0, r3			/* Return old value */
	mov	pc, lr

/*
 * other potentially useful software functions are:
 *  clean D cache entry and flush I cache entry
 *   for the moment use cache_purgeID_E
 */

/* Random odd functions */

/*
 * Function to get the offset of a stored program counter from the
 * instruction doing the store.  This offset is defined to be the same
 * for all STRs and STMs on a given implementation.  Code based on
 * section 2.4.3 of the ARM ARM (2nd Ed.), with modifications to work
 * in 26-bit modes as well.
 */
ENTRY(get_pc_str_offset)
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	mov	r1, pc		/* R1 = addr of following STR */
	mov	r0, r0
	str	pc, [sp]	/* [SP] = . + offset */
	ldr	r0, [sp]
	sub	r0, r0, r1
	ldmdb	fp, {fp, sp, pc}
@


1.4
log
@Switch most of the cp14/cp15 use in .S files over to using sysreg.h

Matched and changed by a script, verified to cause no binary change with
armv7, armish, and zaurus kernels.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpufunc_asm.S,v 1.3 2016/04/03 13:55:23 jsg Exp $	*/
d50 1
a50 1
	.align	0
@


1.3
log
@Add cpu_auxcontrol() to clear and set bits in the implementation/model
specific Auxiliary Control Register (ACTLR).

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpufunc_asm.S,v 1.2 2013/01/23 19:57:47 patrick Exp $	*/
d47 1
d66 1
a66 1
	mrc	p15, 0, r0, c0, c0, 0
d70 1
a70 1
	mrc	p15, 0, r0, c1, c0, 0
d74 1
a74 1
	mrc	p15, 0, r0, c0, c0, 1
d78 1
a78 1
	mrc	p15, 0, r0, c5, c0, 0
d82 1
a82 1
	mrc	p15, 0, r0, c6, c0, 0
d86 1
a86 1
	mrc	p15, 0, r0, c5, c0, 1
d90 1
a90 1
	mrc	p15, 0, r0, c6, c0, 2
d107 1
a107 1
	mcr	p15, 0, r0, c1, c0, 0
d112 1
a112 1
	mcr	p15, 0, r0, c3, c0, 0
d126 1
a126 1
	mrc	p15, 0, r3, c1, c0, 0	/* Read the control register */
d131 1
a131 1
	mcrne	p15, 0, r2, c1, c0, 0	/* Write new control register */
d136 1
a136 1
	mrc	p15, 0, r3, c1, c0, 1	/* Read the aux control register */
d141 1
a141 1
	mcrne	p15, 0, r2, c1, c0, 1	/* Write new aux control register */
@


1.2
log
@Add instruction fault register functions, which will be needed for further
ARMv7 support.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpufunc_asm.S,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
d127 1
a127 1
	eor     r2, r2, r1		/* XOR bits */
d131 10
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpufunc_asm.S,v 1.2 2004/01/29 16:17:11 drahn Exp $	*/
d76 1
a76 1
ENTRY(cpufunc_faultstatus)
d80 1
a80 1
ENTRY(cpufunc_faultaddress)
d82 8
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

