head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.8.0.18
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.16
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.14
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.10
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.12
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.8
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.14
date	2014.11.18.20.51.01;	author krw;	state Exp;
branches;
next	1.13;
commitid	G35ycnLxaVis5TX9;

1.13
date	2014.05.11.12.59.31;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.05.11.00.12.44;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2014.05.10.05.33.00;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.16.20.50.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.20.22.02.10;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.14.07.07.09;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.15.10.22.29;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.24.20.30.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.19.01.59.36;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.04.00.56.42;	author martin;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.19.03.17.06;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.23.19.09.57;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.10.44;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Nuke some obvious #include duplications.

ok espie@@ deraadt@@ millert@@ tedu@@
@
text
@/*	$OpenBSD: ast.c,v 1.13 2014/05/11 12:59:31 deraadt Exp $	*/
/*	$NetBSD: ast.c,v 1.6 2003/10/31 16:44:34 cl Exp $	*/

/*
 * Copyright (c) 1994,1995 Mark Brinicombe
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the RiscBSD team.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTERS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * ast.c
 *
 * Code to handle ast's and returns to user mode
 *
 * Created      : 11/10/94
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/acct.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/signal.h>
#include <sys/signalvar.h>
#include <sys/vmmeter.h>
#include <sys/syscall.h>
#include <sys/syscall_mi.h>

#include <machine/cpu.h>
#include <machine/frame.h>

#include <arm/cpufunc.h>

#include <uvm/uvm_extern.h>

/*
 * Prototypes
 */
void ast(struct trapframe *);
 
int want_resched;
extern int astpending;

/*
 * Handle asynchronous system traps.
 * This is called from the irq handler to deliver signals
 * and switch processes if required.
 */

void
ast(struct trapframe *tf)
{
	struct proc *p = curproc;

	/* Interrupts were restored by exception_exit. */

	uvmexp.traps++;

#ifdef DEBUG
	if (p == NULL)
		panic("ast: no curproc!");
	if (&p->p_addr->u_pcb == 0)
		panic("ast: no pcb!");
#endif	

	uvmexp.softs++;
	mi_ast(p, want_resched);
	userret(p);
}

/* End of ast.c */
@


1.13
log
@need syscall.h..
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.12 2014/05/11 00:12:44 guenther Exp $	*/
a57 1
#include <machine/cpu.h>
@


1.12
log
@Move the increment of uvmexp.softs back to the caller of mi_ast():
it needs to be done atomicly on some MP archs and we don't have
atomic_add_int() everywhere yet.  Also, mi_ast() was meant to be inline.

noted by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.11 2014/05/10 05:33:00 guenther Exp $	*/
d53 1
@


1.11
log
@Factor out the common ast bits into mi_ast()

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.10 2011/11/16 20:50:18 deraadt Exp $	*/
d93 1
@


1.10
log
@Make userret() MI.  On architectures which jammed stuff into it in the
past, pull that code out seperately.
ok guenther miod
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.9 2011/09/20 22:02:10 miod Exp $	*/
d53 1
a84 1
	uvmexp.softs++;
d93 1
a93 8
	if (p->p_flag & P_OWEUPC) {
		ADDUPROF(p);
	}

	/* Allow a forced task switch. */
	if (want_resched)
		preempt(NULL);

@


1.9
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.8 2007/05/14 07:07:09 art Exp $	*/
a68 13

void
userret(struct proc *p)
{
	int sig;

	/* Take pending signals. */
	while ((sig = (CURSIG(p))) != 0)
		postsig(sig);

	p->p_cpu->ci_schedstate.spc_curpriority = p->p_priority = p->p_usrpri;
}

@


1.8
log
@Switch arm to __HAVE_CPUINFO. Least effort.

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.7 2007/03/15 10:22:29 art Exp $	*/
a61 4
#ifdef acorn26
#include <machine/machdep.h>
#endif

a93 5
#ifdef acorn26
	/* Enable interrupts if they were enabled before the trap. */
	if ((tf->tf_r15 & R15_IRQ_DISABLE) == 0)
		int_on();
#else
a94 1
#endif
@


1.7
log
@Since p_flag is often manipulated in interrupts and without biglock
it's a good idea to use atomic.h operations on it. This mechanic
change updates all bit operations on p_flag to atomic_{set,clear}bits_int.

Only exception is that P_OWEUPC is set by MI code before calling
need_proftick and it's automatically cleared by ADDUPC. There's
no reason for MD handling of that flag since everyone handles it the
same way.

kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.6 2006/12/24 20:30:35 miod Exp $	*/
d83 1
a83 1
	curpriority = p->p_priority = p->p_usrpri;
@


1.6
log
@Define PROC_PC. Then, since profiling information is being reported in
statclock(), do not bother doing this in userret() anymore. As a result,
userret() does not need its pc and ticks arguments, simplify.
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.5 2005/11/19 01:59:36 aaron Exp $	*/
a116 1
		p->p_flag &= ~P_OWEUPC;
@


1.5
log
@Remove superfluous statement-ending semi-colons.  i.e., "return foo;;" should
just be "return foo;".  Cleaning out some M's in my tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.4 2005/03/04 00:56:42 martin Exp $	*/
d69 1
a69 1
void ast (struct trapframe *);
d71 1
a71 1
int want_resched = 0;
d75 1
a75 1
userret(struct proc *p, u_int32_t pc, quad_t oticks)
d83 1
a83 21
	p->p_priority = p->p_usrpri;

	if (want_resched) {
		/*
		 * We're being preempted.
		 */
		preempt(NULL);
		while ((sig = CURSIG(p)) != 0)
			postsig(sig);
	}

	/*
	 * If profiling, charge recent system time to the trapped pc.
	 */
	if (p->p_flag & P_PROFIL) { 
		extern int psratio;

		addupc_task(p, pc, (int)(p->p_sticks - oticks) * psratio);
	}                   

	curpriority = p->p_priority;
d125 1
a125 1
	userret(p, tf->tf_pc, p->p_sticks); /* XXX */
@


1.4
log
@for consistency, use preempt(NULL)

ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.3 2004/05/19 03:17:06 drahn Exp $	*/
d116 1
a116 1
	struct proc *p = curproc;;
@


1.3
log
@de __P of sys/arch/arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.2 2004/02/23 19:09:57 drahn Exp $	*/
d143 1
a143 1
		preempt(0);
@


1.2
log
@Switch to the 3 arg version of userret to more closely match other OpenBSD
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
d69 1
a69 1
void ast __P((struct trapframe *));
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: ast.c,v 1.2 2004/01/29 16:17:11 drahn Exp $	*/
d75 1
a75 1
userret(struct proc *p)
d83 21
a103 5
	#if 0
	/* XXX */
	curcpu()->ci_schedstate.spc_curpriority = p->p_priority = p->p_usrpri;
	#endif
	pmap_update(p->p_vmspace->vm_map.pmap); /* XXX DSR help stability */
d145 1
a145 1
	userret(p);
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 1
a69 1
void ast (struct trapframe *);
d75 1
a75 1
userret(struct proc *p, u_int32_t pc, quad_t oticks)
d83 5
a87 21
	p->p_priority = p->p_usrpri;

	if (want_resched) {
		/*
		 * We're being preempted.
		 */
		preempt(NULL);
		while ((sig = CURSIG(p)) != 0)
			postsig(sig);
	}

	/*
	 * If profiling, charge recent system time to the trapped pc.
	 */
	if (p->p_flag & P_PROFIL) { 
		extern int psratio;

		addupc_task(p, pc, (int)(p->p_sticks - oticks) * psratio);
	}                   

	curpriority = p->p_priority;
d129 1
a129 1
	userret(p, tf->tf_pc, p->p_sticks); /* XXX */
@


