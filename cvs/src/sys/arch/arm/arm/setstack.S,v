head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.48
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.46
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.42
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.40
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.38
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.36
	OPENBSD_5_0:1.2.0.34
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.32
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.30
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.28
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.01.18.14.55.02;	author jsg;	state Exp;
branches;
next	1.2;
commitid	ksTlgLn5W99hbaKl;

1.2
date	2004.02.01.06.10.33;	author drahn;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.19.10.48.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Switch some uses of msr that only deal with interrupts/mode to use
just the control field ('c' bits 7:0) instead of 'all' which includes
the flags field ('f' bits 31:24) which isn't modified.
@
text
@/*	$OpenBSD: setstack.S,v 1.2 2004/02/01 06:10:33 drahn Exp $	*/
/*	$NetBSD: setstack.S,v 1.2 2002/08/15 01:37:02 briggs Exp $	*/

/*
 * Copyright (c) 1994 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * This code is derived from software written for Brini by Mark Brinicombe
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Brini.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BRINI ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL BRINI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * setstack.S
 *
 * Miscellaneous routine to play with the stack pointer in different CPU modes
 *
 * Eventually this routine can be inline assembly.
 *
 * Created      : 17/09/94
 *
 * Based of kate/display/setstack.s
 */

#include <machine/cpu.h>
#include <machine/asm.h>

/* To set the stack pointer for a particular mode we must switch
 * to that mode update the banked r13 and then switch back.
 * This routine provides an easy way of doing this for any mode
 *
 * r0 = CPU mode
 * r1 = stackptr
 */

ENTRY(set_stackptr)
        mrs	r3, cpsr		/* Switch to the appropriate mode */
	bic	r2, r3, #(PSR_MODE)
	orr	r2, r2, r0
        msr	cpsr_c, r2

	mov	sp, r1			/* Set the stack pointer */

        msr	cpsr_c, r3		/* Restore the old mode */

	mov	pc, lr			/* Exit */

/* To get the stack pointer for a particular mode we must switch
 * to that mode copy the banked r13 and then switch back.
 * This routine provides an easy way of doing this for any mode
 *
 * r0 = CPU mode
 */

ENTRY(get_stackptr)
        mrs	r3, cpsr		/* Switch to the appropriate mode */
	bic	r2, r3, #(PSR_MODE)
	orr	r2, r2, r0
        msr	cpsr_c, r2

	mov	r0, sp			/* Set the stack pointer */

        msr	cpsr_c, r3		/* Restore the old mode */

	mov	pc, lr			/* Exit */

/* End of setstack.S */
@


1.2
log
@fix tags...
@
text
@d1 1
a1 1
/*	$OpenBSD: setstack.S,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
d66 1
a66 1
        msr	cpsr_all, r2
d70 1
a70 1
        msr	cpsr_all, r3		/* Restore the old mode */
d85 1
a85 1
        msr	cpsr_all, r2
d89 1
a89 1
        msr	cpsr_all, r3		/* Restore the old mode */
@


1.2.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 2
a2 2
/*	$OpenBSD: setstack.S,v 1.2 2004/01/29 16:17:16 drahn Exp $	*/
/*^I$NetBSD: setstack.S,v 1.2 2002/08/15 01:37:02 briggs Exp $^I*/$
@

