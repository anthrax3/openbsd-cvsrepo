head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	SMP:1.3.0.2;
locks; strict;
comment	@ * @;


1.18
date	2016.01.31.00.14.50;	author jsg;	state Exp;
branches;
next	1.17;
commitid	pbLjedMudUFrVMk6;

1.17
date	2014.05.11.00.05.38;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2014.03.26.05.23.42;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2012.08.07.05.16.53;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2012.04.11.14.38.55;	author mikeb;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.20.22.02.11;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.03.14.56.28;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.21.03.03.25;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.27.18.45.00;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.27.17.49.26;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.24.20.30.35;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.15.21.16.33;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.15.21.09.29;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.23.19.09.57;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.12.04.11.42;	author drahn;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.02.11.22.03.17;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches;
next	;

1.3.2.1
date	2004.02.19.10.48.01;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2004.06.05.23.10.44;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Switch from PSR_X_bit and X32_bit PSR macro names to just PSR_X.
This matches FreeBSD and makes things a bit more consistent.
Discussed with Patrick.
@
text
@/*	$OpenBSD: syscall.c,v 1.17 2014/05/11 00:05:38 guenther Exp $	*/
/*	$NetBSD: syscall.c,v 1.24 2003/11/14 19:03:17 scw Exp $	*/

/*-
 * Copyright (c) 2000, 2003 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1994-1998 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * This code is derived from software written for Brini by Mark Brinicombe
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mark Brinicombe
 *	for the NetBSD Project.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * syscall entry handling
 *
 * Created      : 09/11/94
 */

#include <sys/param.h>

#include <sys/device.h>
#include <sys/errno.h>
#include <sys/kernel.h>
#include <sys/reboot.h>
#include <sys/signalvar.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/syscall.h>
#include <sys/syscall_mi.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/frame.h>
#include <machine/pcb.h>
#include <arm/swi.h>

#define MAXARGS 8

void
swi_handler(trapframe_t *frame)
{
	struct proc *p = curproc;
	const struct sysent *callp;
	int code, error;
	u_int nap = 4, nargs;
	register_t *ap, *args, copyargs[MAXARGS], rval[2];

	uvmexp.syscalls++;

	/* Re-enable interrupts if they were enabled previously */
	if (__predict_true((frame->tf_spsr & PSR_I) == 0))
		enable_interrupts(PSR_I);

	p->p_addr->u_pcb.pcb_tf = frame;

	code = frame->tf_r12;

	ap = &frame->tf_r0;
	callp = p->p_p->ps_emul->e_sysent;

	switch (code) {	
	case SYS_syscall:
		code = *ap++;
		nap--;
		break;
        case SYS___syscall:
		code = ap[_QUAD_LOWWORD];
		ap += 2;
		nap -= 2;
		break;
	}

	if (code < 0 || code >= p->p_p->ps_emul->e_nsysent) {
		callp += p->p_p->ps_emul->e_nosys;
	} else {
		callp += code;
	}
	nargs = callp->sy_argsize / sizeof(register_t);
	if (nargs <= nap) {
		args = ap;
	} else {
		KASSERT(nargs <= MAXARGS);
		memcpy(copyargs, ap, nap * sizeof(register_t));
		if ((error = copyin((void *)frame->tf_usr_sp, copyargs + nap,
		    (nargs - nap) * sizeof(register_t))))
			goto bad;
		args = copyargs;
	}

	rval[0] = 0;
	rval[1] = frame->tf_r1;

	error = mi_syscall(p, code, callp, args, rval);

	switch (error) {
	case 0:
		frame->tf_r0 = rval[0];
		frame->tf_r1 = rval[1];

		frame->tf_spsr &= ~PSR_C;	/* carry bit */
		break;

	case ERESTART:
		/*
		 * Reconstruct the pc to point at the swi.
		 */
		frame->tf_pc -= INSN_SIZE;
		break;

	case EJUSTRETURN:
		/* nothing to do */
		break;

	default:
	bad:
		frame->tf_r0 = error;
		frame->tf_spsr |= PSR_C;	/* carry bit */
		break;
	}

	mi_syscall_return(p, code, error, rval);
}

void
child_return(arg)
	void *arg;
{
	struct proc *p = arg;
	struct trapframe *frame = p->p_addr->u_pcb.pcb_tf;

	frame->tf_r0 = 0;
	frame->tf_spsr &= ~PSR_C;	/* carry bit */

	mi_child_return(p);
}
@


1.17
log
@Pull in <sys/user.h> before <sys/syscall*.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.16 2014/03/26 05:23:42 guenther Exp $	*/
d107 2
a108 2
	if (__predict_true((frame->tf_spsr & I32_bit) == 0))
		enable_interrupts(I32_bit);
d156 1
a156 1
		frame->tf_spsr &= ~PSR_C_bit;	/* carry bit */
d173 1
a173 1
		frame->tf_spsr |= PSR_C_bit;	/* carry bit */
d188 1
a188 1
	frame->tf_spsr &= ~PSR_C_bit;	/* carry bit */
@


1.16
log
@Move p_emul and p_sigcode from proc to process.
Tweak the handling of ktrace EMUL when changing ktracing: only
generate one per process (not one per thread) and pass the correct
proc pointer down to the VFS layer.  Permit generating of NAMI and
CSW records inside ktrace(2) itself.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.15 2012/08/07 05:16:53 guenther Exp $	*/
a79 2
#include <sys/syscall.h>
#include <sys/syscall_mi.h>
d83 2
@


1.15
log
@Move the common bits of syscall invocation and return handling into
an MI file, <sys/syscall_mi.h>, correcting inconsistencies and the
handling when copyin() of arguments fails.

Tested on i386, amd64, sparc64, and alpha (thanks naddy@@)
Any issues with other platforms will be fixed in tree.

header name from millert@@; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.14 2012/04/11 14:38:55 mikeb Exp $	*/
d115 1
a115 1
	callp = p->p_emul->e_sysent;
d129 2
a130 2
	if (code < 0 || code >= p->p_emul->e_nsysent) {
		callp += p->p_emul->e_nosys;
@


1.14
log
@The first ktrace record for a newly spawned thread is a return
from a fork syscall done by the parent.  Use __tfork, not rfork
here to match the ktrace records for the parent (CALL __tfork,
RET __tfork).  ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.13 2011/09/20 22:02:11 miod Exp $	*/
d81 1
a84 6
#ifdef KTRACE
#include <sys/ktrace.h>
#endif

#include "systrace.h"
#include <dev/systrace.h>
d100 1
a100 1
	int code, error, orig_error;
a136 1
		error = 0;
d140 3
a142 2
		error = copyin((void *)frame->tf_usr_sp, copyargs + nap,
		    (nargs - nap) * sizeof(register_t));
a144 10
	orig_error = error;
#ifdef SYSCALL_DEBUG
        scdebug_call(p, code, args);
#endif
#ifdef KTRACE
	if (KTRPOINT(p, KTR_SYSCALL))
		ktrsyscall(p, code, callp->sy_argsize, args);
#endif
	if (error)
		goto bad;
d148 2
a149 6
#if NSYSTRACE > 0
	if (ISSET(p->p_flag, P_SYSTRACE))
		orig_error = error = systrace_redirect(code, p, args, rval);
	else 
#endif
		orig_error = error = (*callp->sy_call)(p, args, rval);
d176 2
a177 8
#ifdef SYSCALL_DEBUG
	scdebug_ret(p, code, orig_error, rval);
#endif
	userret(p);
#ifdef KTRACE
	if (KTRPOINT(p, KTR_SYSRET))
		ktrsysret(p, code, orig_error, rval[0]);
#endif
d190 1
a190 10
	userret(p);

#ifdef KTRACE
	if (KTRPOINT(p, KTR_SYSRET)) {
		ktrsysret(p,
		    (p->p_flag & P_THREAD) ? SYS___tfork :
		    (p->p_p->ps_flags & PS_PPWAIT) ? SYS_vfork : SYS_fork,
		    0, 0);
	}
#endif
@


1.13
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.12 2011/04/03 14:56:28 guenther Exp $	*/
d220 1
a220 1
		    (p->p_flag & P_THREAD) ? SYS_rfork :
@


1.12
log
@Move PPWAIT flag from struct proc to process, so that rthreads in
a vforked child behave correctly.  Have the parent in a vfork()
wait on a (different) flag in *its* process instead of the child
to prevent a possible use-after-free.  When ktracing the child
return from a fork, call it rfork if an rthread was created.

ok blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.11 2010/04/21 03:03:25 deraadt Exp $	*/
a96 4

#ifdef acorn26
#include <machine/machdep.h>
#endif
@


1.11
log
@more cleanup to cope with the change that tries to make proc.h not act
like it is everything.h
ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.10 2008/06/26 05:42:09 ray Exp $	*/
d224 3
a226 1
		    (p->p_flag & P_PPWAIT) ? SYS_vfork : SYS_fork, 0, 0);
@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.9 2007/04/27 18:45:00 drahn Exp $	*/
d82 1
@


1.9
log
@Enable interrupts during syscall processing. Need to verify if the
test actually has any value. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.8 2006/12/27 17:49:26 drahn Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@Switch new new syscall ABI, now passes the syscall number in r12 instead of
in the swi instruction. elminates an illegal userland reference from the kernel
also elminates a bunch of code. This is a flag day for binaries from
before the middle of November.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.7 2006/12/24 20:30:35 miod Exp $	*/
d120 4
@


1.7
log
@Define PROC_PC. Then, since profiling information is being reported in
statclock(), do not bother doing this in userret() anymore. As a result,
userret() does not need its pc and ticks arguments, simplify.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.6 2005/09/15 21:16:33 miod Exp $	*/
a109 2
void syscall(struct trapframe *, struct proc *, u_int32_t);

a113 74
	u_int32_t insn;
	union sigval sv;

	/*
	 * Enable interrupts if they were enabled before the exception.
	 * Since all syscalls *should* come from user mode it will always
	 * be safe to enable them, but check anyway. 
	 */
#ifdef acorn26
	if ((frame->tf_r15 & R15_IRQ_DISABLE) == 0)
		int_on();
#else
	if (!(frame->tf_spsr & I32_bit))
		enable_interrupts(I32_bit);
#endif

#ifdef acorn26
	frame->tf_pc += INSN_SIZE;
#endif

	p->p_addr->u_pcb.pcb_tf = frame;

	/*
	 * Make sure the program counter is correctly aligned so we
	 * don't take an alignment fault trying to read the opcode.
	 */
	if (__predict_false(((frame->tf_pc - INSN_SIZE) & 3) != 0)) {
		/* Give the user an illegal instruction signal. */
		sv.sival_ptr = (u_int32_t *)(u_int32_t)(frame->tf_pc-INSN_SIZE);
		trapsignal(p, SIGILL, 0, ILL_ILLOPC, sv);
		userret(p);
		return;
	}

	/* XXX fuword? */
#ifdef __PROG32
	insn = *(u_int32_t *)(frame->tf_pc - INSN_SIZE);
#else
	insn = *(u_int32_t *)((frame->tf_r15 & R15_PC) - INSN_SIZE);
#endif

#ifdef CPU_ARM7
	/*
	 * This code is only needed if we are including support for the ARM7
	 * core. Other CPUs do not need it but it does not hurt.
	 */

	/*
	 * ARM700/ARM710 match sticks and sellotape job ...
	 *
	 * I know this affects GPS/VLSI ARM700/ARM710 + various ARM7500.
	 *
	 * On occasion data aborts are mishandled and end up calling
	 * the swi vector.
	 *
	 * If the instruction that caused the exception is not a SWI
	 * then we hit the bug.
	 */
	if ((insn & 0x0f000000) != 0x0f000000) {
		frame->tf_pc -= INSN_SIZE;
		curcpu()->ci_arm700bugcount.ev_count++;
		userret(p);
		return;
	}
#endif	/* CPU_ARM7 */

	uvmexp.syscalls++;

	syscall(frame, p, insn);
}

void
syscall(struct trapframe *frame, struct proc *p, u_int32_t insn)
{
d116 1
a116 1
	u_int nap, nargs;
a117 1
	union sigval sv;
d119 3
a121 31
	switch (insn & SWI_OS_MASK) { /* Which OS is the SWI from? */
	case SWI_OS_ARM: /* ARM-defined SWIs */
		code = insn & 0x00ffffff;
		switch (code) {
		case SWI_IMB:
		case SWI_IMBrange:
			/*
			 * Do nothing as there is no prefetch unit that needs
			 * flushing
			 */
			break;
		default:
			/* Undefined so illegal instruction */
			sv.sival_ptr = (u_int32_t *)(frame->tf_pc - INSN_SIZE);
			trapsignal(p, SIGILL, 0, ILL_ILLOPN, sv);
			break;
		}

		userret(p);
		return;
	case 0x000000: /* Old unofficial NetBSD range. */
	case SWI_OS_NETBSD: /* New official NetBSD range. */
		nap = 4;
		break;
	default:
		/* Undefined so illegal instruction */
		sv.sival_ptr = (u_int32_t *)(frame->tf_pc - INSN_SIZE);
		trapsignal(p, SIGILL, 0, ILL_ILLOPN, sv);
		userret(p);
		return;
	}
d123 1
a123 1
	code = insn & 0x000fffff;
d168 1
a168 1
	rval[1] = 0;
a180 1
#ifdef __PROG32
a181 3
#else
		frame->tf_r15 &= ~R15_FLAG_C;	/* carry bit */
#endif
a197 1
#ifdef __PROG32
a198 3
#else
		frame->tf_r15 |= R15_FLAG_C;	/* carry bit */
#endif
a218 1
#ifdef __PROG32
a219 3
#else
	frame->tf_r15 &= ~R15_FLAG_C;	/* carry bit */
#endif
@


1.6
log
@Remove the (unused) syscall() indirection on arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.5 2005/09/15 21:09:29 miod Exp $	*/
a117 1
	u_quad_t sticks;
a123 1
	sticks = p->p_sticks;
d136 2
d146 1
a146 1
		userret(p, frame->tf_pc, p->p_sticks);
a156 2
	p->p_addr->u_pcb.pcb_tf = frame;

d177 1
a177 1
		userret(l, frame->tf_pc, p->p_sticks);
d214 1
a214 1
		userret(p, frame->tf_pc, p->p_sticks);
d224 1
a224 1
		userret(p, frame->tf_pc, p->p_sticks);
d317 1
a317 1
	userret(p, frame->tf_pc, p->p_sticks);
d338 1
a338 1
	userret(p, frame->tf_pc, 0);
@


1.5
log
@Change child_return() to record a proper ktrace record for vfork child
processes.

ok art@@ uwe@@ (some time ago)
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.4 2004/02/23 19:09:57 drahn Exp $	*/
d110 1
a110 3
void syscall_intern(struct proc *);
void syscall_plain(struct trapframe *, struct proc *, u_int32_t);
void syscall_fancy(struct trapframe *, struct proc *, u_int32_t);
d186 1
a186 147
#if 0 
	(*(void(*)(struct trapframe *, struct proc *, u_int32_t))
	    (p->p_md.md_syscall))(frame, p, insn);
#else
	syscall_fancy(frame, p, insn);
#endif
}

void
syscall_intern(struct proc *p)
{
#ifdef KTRACE
	if (p->p_traceflag & (KTRFAC_SYSCALL | KTRFAC_SYSRET)) {
		p->p_md.md_syscall = syscall_fancy;
		return;
	}
#endif
#if NSYSTRACE > 0
	if (p->p_flag & P_SYSTRACE) {
		p->p_md.md_syscall = syscall_fancy;
		return;
	}
#endif
	p->p_md.md_syscall = syscall_plain;
}

void
syscall_plain(struct trapframe *frame, struct proc *p, u_int32_t insn)
{
	const struct sysent *callp;
	int code, error;
	u_int nap, nargs;
	register_t *ap, *args, copyargs[MAXARGS], rval[2];
	union sigval sv;

	switch (insn & SWI_OS_MASK) { /* Which OS is the SWI from? */
	case SWI_OS_ARM: /* ARM-defined SWIs */
		code = insn & 0x00ffffff;
		switch (code) {
		case SWI_IMB:
		case SWI_IMBrange:
			/*
			 * Do nothing as there is no prefetch unit that needs
			 * flushing
			 */
			break;
		default:
			/* Undefined so illegal instruction */
			sv.sival_ptr = (u_int32_t *)(frame->tf_pc - INSN_SIZE);
			trapsignal(p, SIGILL, 0, ILL_ILLOPN, sv);
			break;
		}

		userret(p, frame->tf_pc, p->p_sticks);
		return;
	case 0x000000: /* Old unofficial NetBSD range. */
	case SWI_OS_NETBSD: /* New official NetBSD range. */
		nap = 4;
		break;
	default:
		/* Undefined so illegal instruction */
		sv.sival_ptr = (u_int32_t *)(frame->tf_pc - INSN_SIZE);
		trapsignal(p, SIGILL, 0, ILL_ILLOPN, sv);
		userret(p, frame->tf_pc, p->p_sticks);
		return;
	}

	code = insn & 0x000fffff;

	ap = &frame->tf_r0;
	callp = p->p_emul->e_sysent;

	switch (code) {	
	case SYS_syscall:
		code = *ap++;
		nap--;
		break;
        case SYS___syscall:
		code = ap[_QUAD_LOWWORD];
		ap += 2;
		nap -= 2;
		break;
	}

	if (code < 0 || code >= p->p_emul->e_nsysent) {
		callp += p->p_emul->e_nosys;
	} else {
		callp += code;
	}
	nargs = callp->sy_argsize / sizeof(register_t);
	if (nargs <= nap)
		args = ap;
	else {
		KASSERT(nargs <= MAXARGS);
		memcpy(copyargs, ap, nap * sizeof(register_t));
		error = copyin((void *)frame->tf_usr_sp, copyargs + nap,
		    (nargs - nap) * sizeof(register_t));
		if (error)
			goto bad;
		args = copyargs;
	}

#ifdef SYSCALL_DEBUG
	scdebug_call(p, code, args);
#endif
	rval[0] = 0;
	rval[1] = frame->tf_r1;
	error = (*callp->sy_call)(p, args, rval);

	switch (error) {
	case 0:
		frame->tf_r0 = rval[0];
		frame->tf_r1 = rval[1];

#ifdef __PROG32
		frame->tf_spsr &= ~PSR_C_bit;	/* carry bit */
#else
		frame->tf_r15 &= ~R15_FLAG_C;	/* carry bit */
#endif
		break;

	case ERESTART:
		/*
		 * Reconstruct the pc to point at the swi.
		 */
		frame->tf_pc -= INSN_SIZE;
		break;

	case EJUSTRETURN:
		/* nothing to do */
		break;

	default:
	bad:
		frame->tf_r0 = error;
#ifdef __PROG32
		frame->tf_spsr |= PSR_C_bit;	/* carry bit */
#else
		frame->tf_r15 |= R15_FLAG_C;	/* carry bit */
#endif
		break;
	}
#ifdef SYSCALL_DEBUG
        scdebug_ret(p, code, error, rval); 
#endif  

	userret(p, frame->tf_pc, p->p_sticks);
d190 1
a190 1
syscall_fancy(struct trapframe *frame, struct proc *p, u_int32_t insn)
@


1.4
log
@Switch to the 3 arg version of userret to more closely match other OpenBSD
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.3 2004/02/12 04:11:42 drahn Exp $	*/
d489 1
d492 2
a493 1
		ktrsysret(p, SYS_fork, 0, 0);
@


1.3
log
@Preserve rval[1] across system calls if not explictly overwritten,
per recent discussion with miod and mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.2 2004/02/11 22:03:17 miod Exp $	*/
d120 1
d127 1
d148 1
a148 1
		userret(p);
d181 1
a181 1
		userret(l);
d241 1
a241 1
		userret(p);
d251 1
a251 1
		userret(p);
d334 1
a334 1
	userret(p);
d364 1
a364 1
		userret(p);
d374 1
a374 1
		userret(p);
d467 1
a467 1
	userret(p);
d488 1
a488 1
	userret(p);
@


1.3.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 3
a95 3
#ifdef SYSTRACE
#include <sys/systrace.h>
#endif
d203 1
a203 1
#ifdef SYSTRACE
d292 1
a292 1
	rval[1] = 0;
@


1.3.2.2
log
@Merge with the trunk
@
text
@d93 3
a95 3

#include "systrace.h"
#include <dev/systrace.h>
a119 1
	u_quad_t sticks;
a125 1
	sticks = p->p_sticks;
d146 1
a146 1
		userret(p, frame->tf_pc, p->p_sticks);
d179 1
a179 1
		userret(l, frame->tf_pc, p->p_sticks);
d203 1
a203 1
#if NSYSTRACE > 0
d239 1
a239 1
		userret(p, frame->tf_pc, p->p_sticks);
d249 1
a249 1
		userret(p, frame->tf_pc, p->p_sticks);
d292 1
a292 1
	rval[1] = frame->tf_r1;
d332 1
a332 1
	userret(p, frame->tf_pc, p->p_sticks);
d362 1
a362 1
		userret(p, frame->tf_pc, p->p_sticks);
d372 1
a372 1
		userret(p, frame->tf_pc, p->p_sticks);
d465 1
a465 1
	userret(p, frame->tf_pc, p->p_sticks);
d486 1
a486 1
	userret(p, frame->tf_pc, 0);
@


1.2
log
@Give systrace and xfs a chance to work.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
d292 1
a292 1
	rval[1] = 0;
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.2 2004/01/29 16:17:11 drahn Exp $	*/
d93 3
a95 3
#ifdef SYSTRACE
#include <sys/systrace.h>
#endif
d203 1
a203 1
#ifdef SYSTRACE
@

