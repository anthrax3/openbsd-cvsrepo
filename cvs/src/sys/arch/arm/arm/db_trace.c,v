head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.18
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.10
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.14
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2017.01.24.00.58.55;	author mpi;	state Exp;
branches;
next	1.9;
commitid	r0ks7yUPmANG37rA;

1.9
date	2016.09.20.08.35.25;	author jasper;	state Exp;
branches;
next	1.8;
commitid	Eo9Hu1RKn0EO6PlY;

1.8
date	2016.09.19.21.18.35;	author jasper;	state Exp;
branches;
next	1.7;
commitid	504EMnf4FZsQ0Gj3;

1.7
date	2016.09.19.17.59.18;	author jasper;	state Exp;
branches;
next	1.6;
commitid	34nXrfiWjgfvT3XN;

1.6
date	2016.04.20.07.59.25;	author mpi;	state Exp;
branches;
next	1.5;
commitid	3rVeRZz5fTD4lPff;

1.5
date	2011.09.20.22.02.10;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.27.20.46.39;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.29.12.24.17;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.19.03.17.07;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.00;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.06.05.23.10.44;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Rename pfind(9) into tfind(9) to reflect that it deals with threads.

While here document prfind(9.

with and ok guenther@@
@
text
@/*	$OpenBSD: db_trace.c,v 1.9 2016/09/20 08:35:25 jasper Exp $	*/
/*	$NetBSD: db_trace.c,v 1.8 2003/01/17 22:28:48 thorpej Exp $	*/

/*
 * Copyright (c) 2000, 2001 Ben Harris
 * Copyright (c) 1996 Scott K. Stevens
 *
 * Mach Operating System
 * Copyright (c) 1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>

#include <sys/proc.h>
#include <sys/user.h>
#include <arm/armreg.h>
#include <arm/cpufunc.h>
#include <machine/db_machdep.h>

#include <ddb/db_access.h>
#include <ddb/db_interface.h>
#include <ddb/db_sym.h>
#include <ddb/db_output.h>

db_regs_t ddb_regs;

#define INKERNEL(va)	(((vaddr_t)(va)) >= VM_MIN_KERNEL_ADDRESS)

/*
 * APCS stack frames are awkward beasts, so I don't think even trying to use
 * a structure to represent them is a good idea.
 *
 * Here's the diagram from the APCS.  Increasing address is _up_ the page.
 *
 *          save code pointer       [fp]        <- fp points to here
 *          return link value       [fp, #-4]
 *          return sp value         [fp, #-8]
 *          return fp value         [fp, #-12]
 *          [saved v7 value]
 *          [saved v6 value]
 *          [saved v5 value]
 *          [saved v4 value]
 *          [saved v3 value]
 *          [saved v2 value]
 *          [saved v1 value]
 *          [saved a4 value]
 *          [saved a3 value]
 *          [saved a2 value]
 *          [saved a1 value]
 *
 * The save code pointer points twelve bytes beyond the start of the
 * code sequence (usually a single STM) that created the stack frame.
 * We have to disassemble it if we want to know which of the optional
 * fields are actually present.
 */

#define FR_SCP	(0)
#define FR_RLV	(-1)
#define FR_RSP	(-2)
#define FR_RFP	(-3)

void
db_stack_trace_print(db_expr_t addr, int have_addr, db_expr_t count,
    char *modif, int (*pr)(const char *, ...))
{
	u_int32_t	*frame, *lastframe;
	char c, *cp = modif;
	boolean_t	kernel_only = TRUE;
	boolean_t	trace_thread = FALSE;
	int	scp_offset;

	while ((c = *cp++) != 0) {
		if (c == 'u')
			kernel_only = FALSE;
		if (c == 't')
			trace_thread = TRUE;
	}

	if (!have_addr)
		frame = (u_int32_t *)(ddb_regs.tf_r11);
	else {
		if (trace_thread) {
			struct proc *p;
			struct user *u;
			(*pr) ("trace: pid %d ", (int)addr);
			p = tfind(addr);
			if (p == NULL) {
				(*pr)("not found\n");
				return;
			}
			u = p->p_addr;
			frame = (u_int32_t *)(u->u_pcb.pcb_un.un_32.pcb32_r11);
			(*pr)("at %p\n", frame);
		} else
			frame = (u_int32_t *)(addr);
	}
	lastframe = NULL;
	scp_offset = -(get_pc_str_offset() >> 2);

	while (count-- && frame != NULL) {
		db_addr_t	scp;
		u_int32_t	savecode;
		int		r, n;
		u_int32_t	*rp;
		const char	*sep;

		/*
		 * In theory, the SCP isn't guaranteed to be in the function
		 * that generated the stack frame.  We hope for the best.
		 */
		scp = frame[FR_SCP];

		db_printsym(scp, DB_STGY_PROC, pr);
		(*pr)("\n\tscp=0x%08x rlv=0x%08x (", scp, frame[FR_RLV]);
		db_printsym(frame[FR_RLV], DB_STGY_PROC, pr);
		(*pr)(")\n\trsp=0x%08x rfp=0x%08x",
		    frame[FR_RSP], frame[FR_RFP]);

		savecode = ((u_int32_t *)scp)[scp_offset];
		if ((savecode & 0x0e100000) == 0x08000000) {
			/* Looks like an STM */
			rp = frame - 4;
			n = 0;
			for (r = 10; r >= 0; r--) {
				if (savecode & (1 << r)) {
					sep = n++ % 4 == 0 ? "\n\t" : " ";
					(*pr)("%sr%d=0x%08x", sep, r, *rp--);
				}
			}
		}

		(*pr)("\n");

		/*
		 * Switch to next frame up
		 */
		if (frame[FR_RFP] == 0)
			break; /* Top of stack */

		lastframe = frame;
		frame = (u_int32_t *)(frame[FR_RFP]);

		if (INKERNEL((int)frame)) {
			/* staying in kernel */
			if (frame <= lastframe) {
				(*pr)("Bad frame pointer: %p\n", frame);
				break;
			}
		} else if (INKERNEL((int)lastframe)) {
			/* switch from user to kernel */
			if (kernel_only)
				break;	/* kernel stack only */
		} else {
			/* in user */
			if (frame <= lastframe) {
				(*pr)("Bad user frame pointer: %p\n",
					  frame);
				break;
			}
		}
	}
}
@


1.9
log
@one too many close parentheses

spotted by Markus Hennecke
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.8 2016/09/19 21:18:35 jasper Exp $	*/
d107 1
a107 1
			p = pfind(addr);
@


1.8
log
@ansify function definitions

ok guenther@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.7 2016/09/19 17:59:18 jasper Exp $	*/
d85 1
a85 1
    char *modif, int (*pr)(const char *, ...)))
@


1.7
log
@fix whitespace at EOL
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.6 2016/04/20 07:59:25 mpi Exp $	*/
d84 2
a85 6
db_stack_trace_print(addr, have_addr, count, modif, pr)
	db_expr_t       addr;
	int             have_addr;
	db_expr_t       count;
	char            *modif;
	int		(*pr) (const char *, ...);
@


1.6
log
@Don't use DDB_REGS, ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.5 2011/09/20 22:02:10 miod Exp $	*/
d4 1
a4 1
/* 
d11 1
a11 1
 * 
d17 1
a17 1
 * 
d21 1
a21 1
 * 
d23 1
a23 1
 * 
d28 1
a28 1
 * 
d55 1
a55 1
 * 
d72 3
a74 3
 * The save code pointer points twelve bytes beyond the start of the 
 * code sequence (usually a single STM) that created the stack frame.  
 * We have to disassemble it if we want to know which of the optional 
d115 1
a115 1
			}	
@


1.5
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.4 2010/11/27 20:46:39 miod Exp $	*/
d105 1
a105 1
		frame = (u_int32_t *)(DDB_REGS->tf_r11);
@


1.4
log
@Rework the way saved registers are displayed in arm backtraces, to yield a
more compact layout, and use fewer lines. Requested by espie@@ long ago due
to the small zaurus screen size.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.3 2006/11/29 12:24:17 miod Exp $	*/
a116 3
#ifdef acorn26
			frame = (u_int32_t *)(u->u_pcb.pcb_sf->sf_r11);
#else
a117 1
#endif
a135 3
#ifdef __PROG26
		scp = frame[FR_SCP] & R15_PC;
#else
a136 1
#endif
d139 1
a139 7
		(*pr)("\n\t");
#ifdef __PROG26
		(*pr)("scp=0x%08x rlv=0x%08x (", scp, frame[FR_RLV] & R15_PC);
		db_printsym(frame[FR_RLV] & R15_PC, DB_STGY_PROC, pr);
		(*pr)(")\n");
#else
		(*pr)("scp=0x%08x rlv=0x%08x (", scp, frame[FR_RLV]);
d141 2
a142 3
		(*pr)(")\n");
#endif
		(*pr)("\trsp=0x%08x rfp=0x%08x", frame[FR_RSP], frame[FR_RFP]);
@


1.3
log
@Kernel stack can be swapped. This means that stuff that's on the stack
should never be referenced outside the context of the process to which
this stack belongs unless we do the PHOLD/PRELE dance. Loads of code
doesn't follow the rules here. Instead of trying to track down all
offenders and fix this hairy situation, it makes much more sense
to not swap kernel stacks.

From art@@, tested by many some time ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.2 2004/05/19 03:17:07 drahn Exp $	*/
d132 1
a132 1
		int		r;
d163 1
a163 1
			sep = "\n\t";
d166 2
a167 4
					(*pr)("%sr%d=0x%08x",
					    sep, r, *rp--);
					sep = (frame - rp) % 4 == 2 ?
					    "\n\t" : " ";
@


1.2
log
@de __P of sys/arch/arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
a115 4
			if (!(p->p_flag & P_INMEM)) {
				(*pr)("swapped out\n");
				return;
			}
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_trace.c,v 1.3 2004/01/29 16:17:11 drahn Exp $	*/
d89 1
a89 1
	int		(*pr) __P((const char *, ...));
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@Merge with the trunk
@
text
@d89 1
a89 1
	int		(*pr) (const char *, ...);
@


