head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.38
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.34
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.36
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.28
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.32
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.30
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.26
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.24
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.22
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.20
	OPENBSD_5_0:1.2.0.18
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.16
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.14
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.12
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.14
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2016.09.21.11.33.05;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	iKZYl5ksAPvBHoAc;

1.2
date	2007.05.27.16.10.39;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Modernize arm assembly in the kernel for clang.
Based on a similar diff in bitrig.
No binary change when compiled with gcc.

ok patrick@@
@
text
@/*	$OpenBSD: bus_space_notimpl.S,v 1.2 2007/05/27 16:10:39 drahn Exp $	*/
/*	$NetBSD: bus_space_notimpl.S,v 1.2 2001/09/10 02:20:19 reinoud Exp $	*/

/*
 * Copyright (c) 1997 Mark Brinicombe.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mark Brinicombe.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/asm.h>

/*
 * BUS_SPACE - name of this bus space
 */

#define BUS_SPACE	bs_notimpl

#define __C(x,y)	__CONCAT(x,y)
#define __S(s)		__STRING(s)
#define NAME(func)	__C(BUS_SPACE,__C(_bs_,func))
#define LNAME(func)	__C(L,NAME(func))

#define	__L(x)		_C_LABEL(x)
#define GLOBAL(func)	.global	__L(NAME(func))
#define LABEL(func)	__L(NAME(func)):
#define LLABEL(func)	LNAME(func):

#define FTEXT(func,text)	__S(__C(NAME(func),text))


#define NOT_IMPL(func)							\
	GLOBAL(func)						;	\
LABEL(func)							;	\
	adr	r4, LNAME(__C(func,_text))			;	\
	b	bs_notimpl_panic				;	\
								;	\
LLABEL(__C(func,_text))						;	\
	.asciz	__S(func)                                       ;	\
	.align	0						;

bs_notimpl_message:
        .asciz  __S(BUS_SPACE), "_%s: args at %p"

	.align  2
bs_notimpl_panic:
	stmfd	sp!, {r0-r3}
	adr     r0, bs_notimpl_message
	mov	r1, r4
	mov	r2, sp
	b       _C_LABEL(panic)



/*
 * misc functions
 */

NOT_IMPL(mmap)


/*
 * Generic bus_space I/O functions
 */

/*
 * read single
 */

NOT_IMPL(r_1)
NOT_IMPL(r_2)
NOT_IMPL(r_4)
NOT_IMPL(r_8)

/*
 * write single
 */

NOT_IMPL(w_1)
NOT_IMPL(w_2)
NOT_IMPL(w_4)
NOT_IMPL(w_8)

/*
 * read multiple
 */

NOT_IMPL(rm_1)
NOT_IMPL(rm_2)
NOT_IMPL(rm_4)
NOT_IMPL(rm_8)

/*
 * write multiple
 */

NOT_IMPL(wm_1)
NOT_IMPL(wm_2)
NOT_IMPL(wm_4)
NOT_IMPL(wm_8)

/*
 * read region
 */

NOT_IMPL(rr_1)
NOT_IMPL(rr_2)
NOT_IMPL(rr_4)
NOT_IMPL(rr_8)

/*
 * write region
 */

NOT_IMPL(wr_1)
NOT_IMPL(wr_2)
NOT_IMPL(wr_4)
NOT_IMPL(wr_8)

/*
 * set multiple
 */

NOT_IMPL(sm_1)
NOT_IMPL(sm_2)
NOT_IMPL(sm_4)
NOT_IMPL(sm_8)

/*
 * set region
 */

NOT_IMPL(sr_1)
NOT_IMPL(sr_2)
NOT_IMPL(sr_4)
NOT_IMPL(sr_8)

/*
 * copy
 */

NOT_IMPL(c_1)
NOT_IMPL(c_2)
NOT_IMPL(c_4)
NOT_IMPL(c_8)
@


1.2
log
@shrink the kernel for code that shouldn't be used anyway, ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_space_notimpl.S,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
d68 1
a68 1
        .asciz  __S(BUS_SPACE) "_%s: args at %p"
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_space_notimpl.S,v 1.2 2004/01/29 16:17:11 drahn Exp $	*/
d60 2
a61 4
	stmfd	sp!, {r0-r3}					;	\
	adr	r0, LNAME(__C(func,_text))			;	\
	mov	r1, sp						;	\
	b	_C_LABEL(panic)					;	\
d64 1
a64 1
	.asciz	FTEXT(func,: args at 0x%08x\n)			;	\
d66 12
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

