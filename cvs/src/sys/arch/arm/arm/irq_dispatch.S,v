head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@# @;


1.13
date	2017.01.06.00.06.02;	author jsg;	state Exp;
branches;
next	1.12;
commitid	YCbIRye8xzoWl68V;

1.12
date	2016.09.21.11.33.05;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	iKZYl5ksAPvBHoAc;

1.11
date	2016.04.25.04.46.56;	author jsg;	state Exp;
branches;
next	1.10;
commitid	XqdsV6PrfEUXwK4U;

1.10
date	2016.04.04.09.13.44;	author patrick;	state Exp;
branches;
next	1.9;
commitid	kyi1uK5Qbg4pXWh9;

1.9
date	2013.09.12.11.42.22;	author patrick;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.10.12.35.25;	author patrick;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.20.22.02.11;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.27.20.05.34;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.27.20.14.30;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.30.23.44.22;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.24.22.50.29;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.06.10.33;	author drahn;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.02.01.05.09.48;	author drahn;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.19.10.48.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.13
log
@unifdef CPU_ARMv7 and ARM_ARCH_7
ok kettenis@@ patrick@@
@
text
@/*	$OpenBSD: irq_dispatch.S,v 1.12 2016/09/21 11:33:05 kettenis Exp $	*/
/*	$NetBSD: irq_dispatch.S,v 1.5 2003/10/30 08:57:24 scw Exp $	*/

/*
 * Copyright (c) 2002 Fujitsu Component Limited
 * Copyright (c) 2002 Genetec Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Fujitsu Component Limited nor the name of
 *    Genetec corporation may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY FUJITSU COMPONENT LIMITED AND GENETEC
 * CORPORATION ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL FUJITSU COMPONENT LIMITED OR GENETEC
 * CORPORATION BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 2002, 2003 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "assym.h"

#include <machine/asm.h>
#include <arm/sysreg.h>
#include <machine/cpu.h>
#include <machine/frame.h>
#include <machine/intr.h>

#ifndef ARM_IRQ_HANDLER
#error ARM_IRQ_HANDLER not defined
#endif

/*
 * irq_entry:
 *	Main entry point for the IRQ vector.  This is a generic version
 *	which can be used by different platforms.
 */
	.text
	.align	2
.Lcpu_info_primary:
	.word	_C_LABEL(cpu_info_primary)

AST_LOCALS

ASENTRY_NP(irq_entry)
	sub	lr, lr, #0x00000004	/* Adjust the lr */

	PUSHFRAMEINSVC			/* Push an interrupt frame */

	/*
	 * Increment the interrupt nesting depth and call the interrupt
	 * dispatch routine.  We've pushed a frame, so we can safely use
	 * callee-saved regs here.  We use the following registers, which
	 * we expect to persist:
	 *
	 *	r5	address of the curcpu struct
	 *	r6	old value of curcpu()->ci_idepth
	 */
	mrc	CP15_TPIDRPRW(r5)	/* Get curcpu from TPIDRPRW. */
	mov	r0, sp			/* arg for dispatcher */
	ldr	r6, [r5, #CI_IDEPTH]
	add	r1, r6, #1
	str	r1, [r5, #CI_IDEPTH]

	bl	ARM_IRQ_HANDLER

	/*
	 * Restore the old interrupt depth value (which should be the
	 * same as decrementing it at this point).
	 */
	str	r6, [r5, #CI_IDEPTH]

	DO_AST
	PULLFRAMEFROMSVCANDEXIT
	movs	pc, lr			/* Exit */

	.bss
	.align	2

	.global _C_LABEL(astpending)
_C_LABEL(astpending):
	.word	0
@


1.12
log
@Modernize arm assembly in the kernel for clang.
Based on a similar diff in bitrig.
No binary change when compiled with gcc.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.11 2016/04/25 04:46:56 jsg Exp $	*/
a108 1
#ifdef CPU_ARMv7
a109 3
#else
	ldr	r5, .Lcpu_info_primary
#endif
@


1.11
log
@Switch most of the cp14/cp15 use in .S files over to using sysreg.h

Matched and changed by a script, verified to cause no binary change with
armv7, armish, and zaurus kernels.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.10 2016/04/04 09:13:44 patrick Exp $	*/
d89 1
a89 1
	.align	0
d132 1
a132 1
	.align	0
@


1.10
log
@Store curcpu pointer in TPIDRPRW.

This will especially be helpful in future multiprocessor efforts.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.9 2013/09/12 11:42:22 patrick Exp $	*/
d74 1
d110 1
a110 1
	mrc	p15, 0, r5, c13, c0, 4	/* Get curcpu from TPIDRPRW. */
@


1.9
log
@Rename cpu_info_store to cpu_info_primary.  Create an array of cpu_infos
for SMP, like on amd64.  Add some SMP defines.

ok rapha@@
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.8 2013/09/10 12:35:25 patrick Exp $	*/
d108 3
d112 1
@


1.8
log
@Store the current interrupt depth in curcpu, so that it's per CPU
and not just a global variable.

ok rapha@@
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.7 2011/09/20 22:02:11 miod Exp $	*/
d89 2
a90 2
.Lcpu_info_store:
	.word	_C_LABEL(cpu_info_store)
d108 1
a108 1
	ldr	r5, .Lcpu_info_store
@


1.7
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.6 2005/12/27 20:05:34 drahn Exp $	*/
d89 2
a90 2
.Lcurrent_intr_depth:
	.word	_C_LABEL(current_intr_depth)
d105 2
a106 2
	 *	r5	address of `current_intr_depth' variable
	 *	r6	old value of `current_intr_depth'
d108 1
a108 1
	ldr	r5, .Lcurrent_intr_depth
d110 1
a110 1
	ldr	r6, [r5]
d112 1
a112 1
	str	r1, [r5]
d120 1
a120 1
	str	r6, [r5]
a130 4
	.word	0

	.global _C_LABEL(current_intr_depth)
_C_LABEL(current_intr_depth):
@


1.6
log
@Instead of using options to configure code, use machine header files
<machine/intr.h>. On the road to cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.5 2005/05/27 20:14:30 uwe Exp $	*/
d92 1
a92 1
AST_ALIGNMENT_FAULT_LOCALS
a97 1
	ENABLE_ALIGNMENT_FAULTS
d122 1
a122 1
	DO_AST_AND_RESTORE_ALIGNMENT_FAULTS
@


1.5
log
@typo in comment
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.4 2004/12/30 23:44:22 drahn Exp $	*/
d76 1
a76 8

#ifdef FOOTBRIDGE_INTR
#include <arm/footbridge/footbridge_intr.h>
#elif defined(PXA2x0_INTR)
#include <arm/xscale/pxa2x0_intr.h>
#else
#error ARM_INTR_IMPL not defined
#endif
@


1.4
log
@Add pxa interrupt controller support.
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.3 2004/12/24 22:50:29 miod Exp $	*/
d111 1
a111 1
	 * we expect to presist:
@


1.3
log
@{e,}intr{cnt,names} bye-bye.
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.2 2004/02/01 06:10:33 drahn Exp $	*/
d79 2
@


1.2
log
@fix tags...
@
text
@d1 1
a1 1
/*	$OpenBSD: irq_dispatch.S,v 1.1 2004/02/01 05:09:48 drahn Exp $	*/
a141 14

	/*
	 * XXX Provide intrnames/intrcnt for legacy code, but
	 * don't actually use them.
	 */

	.global _C_LABEL(intrnames), _C_LABEL(eintrnames)
	.global _C_LABEL(intrcnt), _C_LABEL(eintrcnt)
_C_LABEL(intrnames): 
_C_LABEL(eintrnames):

	.global _C_LABEL(intrcnt), _C_LABEL(sintrcnt), _C_LABEL(eintrcnt)
_C_LABEL(intrcnt):
_C_LABEL(eintrcnt):
@


1.2.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 2
a2 2
/*	$OpenBSD: irq_dispatch.S,v 1.1 2004/01/29 16:17:16 drahn Exp $	*/
/*^I$NetBSD: irq_dispatch.S,v 1.5 2003/10/30 08:57:24 scw Exp $^I*/$
@

