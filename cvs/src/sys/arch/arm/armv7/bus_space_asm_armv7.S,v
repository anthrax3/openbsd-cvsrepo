head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.8
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.6
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2016.03.22.23.35.01;	author patrick;	state Exp;
branches;
next	1.4;
commitid	RkEnvixfXW2bEpue;

1.4
date	2016.03.19.09.36.56;	author patrick;	state Exp;
branches;
next	1.3;
commitid	PJBEdVboqiwjXPXy;

1.3
date	2015.06.02.02.30.16;	author jsg;	state Exp;
branches;
next	1.2;
commitid	MDqoReLKfFLYYM4U;

1.2
date	2013.08.30.09.24.42;	author patrick;	state Exp;
branches;
next	1.1;

1.1
date	2013.05.09.20.41.47;	author patrick;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove support for ARM11.  This was the last unused and unmaintained
processor in our code.  Now we're left with only armv7 and XScale for
armish and zaurus.

ok jsg@@
@
text
@/*	$OpenBSD: bus_space_asm_armv7.S,v 1.4 2016/03/19 09:36:56 patrick Exp $	*/
/*	$NetBSD: bus_space_asm_armv7.S,v 1.3 2003/03/27 19:46:14 mycroft Exp $	*/

/*
 * Copyright (c) 1997 Causality Limited.
 * Copyright (c) 1997 Mark Brinicombe.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mark Brinicombe
 *	for the NetBSD Project.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <arm/asm.h>
#include <arm/cpuconf.h>

/*
 * Generic bus_space functions.
 */

/*
 * read single
 */

ENTRY(armv7_bs_r_1)
	dsb	sy
	ldrb	r0, [r1, r2]
	mov	pc, lr

ENTRY(armv7_bs_r_2)
	dsb	sy
	ldrh	r0, [r1, r2]
	mov	pc, lr

ENTRY(armv7_bs_r_4)
	dsb	sy
	ldr	r0, [r1, r2]
	mov	pc, lr

/*
 * write single
 */

ENTRY(armv7_bs_w_1)
	strb	r3, [r1, r2]
	dsb	sy
	mov	pc, lr

ENTRY(armv7_bs_w_2)
	strh	r3, [r1, r2]
	dsb	sy
	mov	pc, lr

ENTRY(armv7_bs_w_4)
	str	r3, [r1, r2]
	dsb	sy
	mov	pc, lr

/*
 * read multiple
 */

ENTRY(armv7_bs_rm_1)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrb	r3, [r0]
	strb	r3, [r1], #1
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_rm_2)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrh	r3, [r0]
	strh	r3, [r1], #2
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_rm_4)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldr	r3, [r0]
	str	r3, [r1], #4
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

/*
 * write multiple
 */

ENTRY(armv7_bs_wm_1)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrb	r3, [r1], #1
	strb	r3, [r0]
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_wm_2)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrh	r3, [r1], #2
	strh	r3, [r0]
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_wm_4)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldr	r3, [r1], #4
	str	r3, [r0]
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

/*
 * read region
 */

ENTRY(armv7_bs_rr_1)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrb	r3, [r0], #1
	strb	r3, [r1], #1
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_rr_2)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrh	r3, [r0], #2
	strh	r3, [r1], #2
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_rr_4)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldr	r3, [r0], #4
	str	r3, [r1], #4
	subs	r2, r2, #1
	bne	1b

	mov	pc, lr

/*
 * write region.
 */

ENTRY(armv7_bs_wr_1)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrb	r3, [r1], #1
	strb	r3, [r0], #1
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_wr_2)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldrh	r3, [r1], #2
	strh	r3, [r0], #2
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_wr_4)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	ldr	r3, [r1], #4
	str	r3, [r0], #4
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

/*
 * set region
 */

ENTRY(armv7_bs_sr_1)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	strb	r1, [r0], #1
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_sr_2)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	strh	r1, [r0], #2
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

ENTRY(armv7_bs_sr_4)
	add	r0, r1, r2
	mov	r1, r3
	ldr	r2, [sp, #0]
	teq	r2, #0
	moveq	pc, lr

1:	str	r1, [r0], #4
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

/*
 * copy region
 */

ENTRY(armv7_bs_c_2)
	add	r0, r1, r2
	ldr	r2, [sp, #0]
	add	r1, r2, r3
	ldr	r2, [sp, #4]
	teq	r2, #0
	moveq	pc, lr

	cmp	r0, r1
	blt	2f

1:	ldrh	r3, [r0], #2
	strh	r3, [r1], #2
	subs	r2, r2, #1
	bne	1b
	dsb	sy

	mov	pc, lr

2:	add	r0, r0, r2, lsl #1
	add	r1, r1, r2, lsl #1
	sub	r0, r0, #2
	sub	r1, r1, #2

3:	ldrh	r3, [r0], #-2
	strh	r3, [r1], #-2
	subs	r2, r2, #1
	bne	3b
	dsb	sy

	mov	pc, lr
@


1.4
log
@Remove support for StrongARM (SA1) and IXP12x0.  Both are ARMv4 and
are not used by any of the arm platforms.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_space_asm_armv7.S,v 1.3 2015/06/02 02:30:16 jsg Exp $	*/
a53 1
#if (ARM_ARCH_5 + ARM_ARCH_6 + ARM_ARCH_7) > 0
a57 1
#endif
@


1.3
log
@with binutils 2.17 we can change some raw opcodes into instruction names
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_space_asm_armv7.S,v 1.2 2013/08/30 09:24:42 patrick Exp $	*/
d54 1
a54 1
#if (ARM_ARCH_4 + ARM_ARCH_5 + ARM_ARCH_6 + ARM_ARCH_7) > 0
@


1.2
log
@Due to our current version of binutils not knowing newer ARMv7 instructions
we define DSB/ISB (Data/Instruction Synchronization Barrier) manually.
There are multiple options for those instructions, i. e. "full system
operation", which is the default of those.

The defines we used were not the defaults we assumed they were, but some
other option which might not actually exist.

In the future we could try using DSB/ISB as a Mask and add the correct
option value.  For now, just fix those values.

ok rapha@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_space_asm_armv7.S,v 1.1 2013/05/09 20:41:47 patrick Exp $	*/
a40 4
#define	DSB	.long	0xf57ff04f
#define	ISB	.long	0xf57ff06f
#define	WFI	.long	0xe320f003

d50 1
a50 1
	DSB
d56 1
a56 1
	DSB
d62 1
a62 1
	DSB
d72 1
a72 1
	DSB
d77 1
a77 1
	DSB
d82 1
a82 1
	DSB
d100 1
a100 1
	DSB
d115 1
a115 1
	DSB
d130 1
a130 1
	DSB
d149 1
a149 1
	DSB
d164 1
a164 1
	DSB
d179 1
a179 1
	DSB
d198 1
a198 1
	DSB
d213 1
a213 1
	DSB
d246 1
a246 1
	DSB
d261 1
a261 1
	DSB
d276 1
a276 1
	DSB
d294 1
a294 1
	DSB
d308 1
a308 1
	DSB
d322 1
a322 1
	DSB
d345 1
a345 1
	DSB
d358 1
a358 1
	DSB
@


1.1
log
@Drain the bufs after or before we do a bus space operation on ARMv7.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus_space_asm_armv7.S,v 1.2 2009/05/08 02:57:31 drahn Exp $	*/
d41 2
a42 2
#define	DSB	.long	0xf57ff040
#define	ISB	.long	0xf57ff060
@

