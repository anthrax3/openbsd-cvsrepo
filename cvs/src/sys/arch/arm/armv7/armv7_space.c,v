head	1.9;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.14
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.12
	OPENBSD_5_0:1.1.0.10
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.10.05.07.44.24;	author patrick;	state Exp;
branches;
next	1.8;
commitid	rIdfUeWIVU4K3W95;

1.8
date	2016.08.08.14.47.52;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	CQxVw8UNradhT604;

1.7
date	2016.07.27.21.25.25;	author patrick;	state Exp;
branches;
next	1.6;
commitid	7yyWHaI4Zpn4wm4C;

1.6
date	2014.11.16.12.30.56;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	yv0ECmCdICvq576h;

1.5
date	2013.07.11.16.16.38;	author rapha;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.09.23.46.05;	author patrick;	state Exp;
branches;
next	1.3;

1.3
date	2013.05.09.20.41.47;	author patrick;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.05.23.20.11;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.08.02.57.32;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Some device trees use 64-bit intermediate virtual addresses.  This
means that even though the hardware in the end never leaves the 32-bit
address space, some addresses used solely in the device tree can be
bigger than 32-bit.  As bus_space_map(9) takes addresses of size
bus_addr_t, which is 32-bit on ARMv7, we cannot pass those virtual
addresses to the parent bus, even though it will be mapped back into a
32-bit address in the end.  To work around this, make bus_space_map(9)
take a 64-bit address.  Since this is implemented as a macro and
function pointer we can safely do that without harming any other
architecture.

ok kettenis@@ deraadt@@
@
text
@/*	$OpenBSD: armv7_space.c,v 1.8 2016/08/08 14:47:52 kettenis Exp $ */

/*
 * Copyright (c) 2001, 2002 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1997 Mark Brinicombe.
 * Copyright (c) 1997 Causality Limited.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Ichiro FUKUHARA.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mark Brinicombe.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * bus_space functions for Intel PXA2[51]0 application processor.
 * Derived from i80321_space.c.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>

/* Prototypes for all the bus_space structure functions */
bs_protos(armv7);
bs_protos(generic);
bs_protos(bs_notimpl);

struct bus_space armv7_bs_tag = {
	/* cookie */
	(void *) 0,

	/* mapping/unmapping */
	armv7_bs_map,
	armv7_bs_unmap,
	armv7_bs_subregion,

	/* allocation/deallocation */
	armv7_bs_alloc,		/* not implemented */
	armv7_bs_free,		/* not implemented */

	/* get kernel virtual address */
	armv7_bs_vaddr,

	/* mmap */
	bs_notimpl_bs_mmap,

	/* barrier */
	armv7_bs_barrier,

	/* read (single) */
	armv7_bs_r_1,
	armv7_bs_r_2,
	armv7_bs_r_4,
	bs_notimpl_bs_r_8,

	/* read multiple */
	armv7_bs_rm_1,
	armv7_bs_rm_2,
	armv7_bs_rm_4,
	bs_notimpl_bs_rm_8,

	/* read region */
	armv7_bs_rr_1,
	armv7_bs_rr_2,
	armv7_bs_rr_4,
	bs_notimpl_bs_rr_8,

	/* write (single) */
	armv7_bs_w_1,
	armv7_bs_w_2,
	armv7_bs_w_4,
	bs_notimpl_bs_w_8,

	/* write multiple */
	armv7_bs_wm_1,
	armv7_bs_wm_2,
	armv7_bs_wm_4,
	bs_notimpl_bs_wm_8,

	/* write region */
	armv7_bs_wr_1,
	armv7_bs_wr_2,
	armv7_bs_wr_4,
	bs_notimpl_bs_wr_8,

	/* set multiple */
	bs_notimpl_bs_sm_1,
	bs_notimpl_bs_sm_2,
	bs_notimpl_bs_sm_4,
	bs_notimpl_bs_sm_8,

	/* set region */
	armv7_bs_sr_1,
	armv7_bs_sr_2,
	armv7_bs_sr_4,
	bs_notimpl_bs_sr_8,

	/* copy */
	bs_notimpl_bs_c_1,
	armv7_bs_c_2,
	bs_notimpl_bs_c_4,
	bs_notimpl_bs_c_8,
};

int
armv7_bs_map(void *t, uint64_t bpa, bus_size_t size,
	      int flags, bus_space_handle_t *bshp)
{
	u_long startpa, endpa, pa;
	vaddr_t va;
	int pmap_flags = PMAP_DEVICE;

	startpa = trunc_page(bpa);
	endpa = round_page(bpa + size);

	/* XXX use extent manager to check duplicate mapping */

	va = uvm_km_valloc(kernel_map, endpa - startpa);
	if (! va)
		return(ENOMEM);

	*bshp = (bus_space_handle_t)(va + (bpa - startpa));

	if (flags & BUS_SPACE_MAP_CACHEABLE)
		pmap_flags = 0;

	for (pa = startpa; pa < endpa; pa += PAGE_SIZE, va += PAGE_SIZE)
		pmap_kenter_pa(va, pa | pmap_flags, PROT_READ | PROT_WRITE);
	pmap_update(pmap_kernel());

	return(0);
}

void
armv7_bs_unmap(void *t, bus_space_handle_t bsh, bus_size_t size)
{
	vaddr_t	va, endva;

	va = trunc_page((vaddr_t)bsh);
	endva = round_page((vaddr_t)bsh + size);

	pmap_kremove(va, endva - va);
	pmap_update(pmap_kernel());
	uvm_km_free(kernel_map, bsh, size);
}


int
armv7_bs_subregion(void *t, bus_space_handle_t bsh, bus_size_t offset,
    bus_size_t size, bus_space_handle_t *nbshp)
{

	*nbshp = bsh + offset;
	return (0);
}

void
armv7_bs_barrier(void *t, bus_space_handle_t bsh, bus_size_t offset,
    bus_size_t len, int flags)
{
	cpu_drain_writebuf();
}

void *
armv7_bs_vaddr(void *t, bus_space_handle_t bsh)
{

	return ((void *)bsh);
}


int
armv7_bs_alloc(void *t, bus_addr_t rstart, bus_addr_t rend,
    bus_size_t size, bus_size_t alignment, bus_size_t boundary, int flags,
    bus_addr_t *bpap, bus_space_handle_t *bshp)
{

	panic("armv7_io_bs_alloc(): not implemented");
}

void
armv7_bs_free(void *t, bus_space_handle_t bsh, bus_size_t size)
{

	panic("armv7_io_bs_free(): not implemented");
}

@


1.8
log
@Mapping non-cachable memory as cachable and subsequently changing the mapping
to non-cachable is retarded.  Fix this by introducing PMAP_NOCACHE and
PMAP_DEVICE flags that can be or'ed into the physical address passed to
pmap_kenter(9), like we have on many of our other architectures.  This way we
can also properly distinguish between device memory and normal (non-cachable)
memory.

ok visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.7 2016/07/27 21:25:25 patrick Exp $ */
d168 1
a168 1
armv7_bs_map(void *t, bus_addr_t bpa, bus_size_t size,
@


1.7
log
@Remove a feature to re-use existing early bootstrap mappings. This
allowed you to pass a virtual address, which you received from an
early bootstrap mapping, as physical address to bus_space_map(9).

It breaks bus_space_map(9) for peripherals that are after 0xC0000000,
as it assumes that everything after that address cannot be a real
peripheral.  But that's wrong.  It does not make sense to pass a
virtual address to bus_space_map(9) anyway, so just get rid of this
whole "feature".

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.6 2014/11/16 12:30:56 deraadt Exp $ */
d169 1
a169 1
	      int flag, bus_space_handle_t *bshp)
d173 1
a173 1
	pt_entry_t *pte;
d186 5
a190 12
	for (pa = startpa; pa < endpa; pa += PAGE_SIZE, va += PAGE_SIZE) {
		pmap_kenter_pa(va, pa, PROT_READ | PROT_WRITE);
		if ((flag & BUS_SPACE_MAP_CACHEABLE) == 0) {
			pte = vtopte(va);
			*pte &= ~L2_S_CACHE_MASK;
			*pte |= L2_B;
			PTE_SYNC(pte);
			/* XXX: pmap_kenter_pa() also does PTE_SYNC(). a bit of
			 *      waste.
			 */
		}
	}
@


1.6
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.5 2013/07/11 16:16:38 rapha Exp $ */
a174 8
	if ((u_long)bpa > (u_long)KERNEL_BASE) {
		/* Some IO registers (ex. UART ports for console)
		   are mapped to fixed address by board specific
		   routine. */
		*bshp = bpa;
		return(0);
	}

a206 3

	if (bsh > (u_long)KERNEL_BASE)
		return;
@


1.5
log
@Enable bus_space_set_region_4 for armv7.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.4 2013/05/09 23:46:05 patrick Exp $ */
d195 1
a195 1
		pmap_kenter_pa(va, pa, VM_PROT_READ | VM_PROT_WRITE);
@


1.4
log
@Don't rely on uvm_km_free() to remove the pmap mapping when unmapping
in bus space.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.3 2013/05/09 20:41:47 patrick Exp $ */
d157 1
a157 1
	bs_notimpl_bs_sr_4,
@


1.3
log
@Drain the bufs after or before we do a bus space operation on ARMv7.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.2 2012/12/05 23:20:11 deraadt Exp $ */
d214 1
d219 5
@


1.2
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.1 2009/05/08 02:57:32 drahn Exp $ */
a87 1
bs_protos(generic_armv4);
d100 1
a100 1
	armv7_bs_alloc,	/* not implemented */
d113 3
a115 3
	generic_bs_r_1,
	generic_armv4_bs_r_2,
	generic_bs_r_4,
d119 3
a121 3
	generic_bs_rm_1,
	generic_armv4_bs_rm_2,
	generic_bs_rm_4,
d125 3
a127 3
	generic_bs_rr_1,
	generic_armv4_bs_rr_2,
	generic_bs_rr_4,
d131 3
a133 3
	generic_bs_w_1,
	generic_armv4_bs_w_2,
	generic_bs_w_4,
d137 3
a139 3
	generic_bs_wm_1,
	generic_armv4_bs_wm_2,
	generic_bs_wm_4,
d143 3
a145 3
	generic_bs_wr_1,
	generic_armv4_bs_wr_2,
	generic_bs_wr_4,
d155 2
a156 2
	generic_bs_sr_1,
	generic_armv4_bs_sr_2,
d162 1
a162 1
	generic_armv4_bs_c_2,
d199 1
d215 1
a215 1
	if (bsh > (u_long)KERNEL_BASE) 
d235 1
a235 2

	/* Nothing to do. */
d255 1
a255 1
void    
@


1.1
log
@Pieces of arm11 and armv7 support for newer cpus. This is work in progress
and not complete.
@
text
@d1 1
a1 1
/*	$OpenBSD: armv7_space.c,v 1.3 2005/07/18 02:43:24 fgsch Exp $ */
a76 5

#include <sys/cdefs.h>
/*
__KERNEL_RCSID(0, "$NetBSD: armv7_space.c,v 1.5 2004/06/07 19:45:22 nathanw Exp $");
*/
@

