head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.32
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.30
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.28
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.26
	OPENBSD_5_0:1.11.0.24
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.22
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.20
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.16
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.18
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.14
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.12
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.10
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.8
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.12
date	2013.10.21.10.36.10;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.22.18.45.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.15.20.23.10;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.11.03.32.48;	author uwe;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.06.01.31.05;	author pascoe;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.21.16.22.34;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.06.23.47.20;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.06.16.50.44;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.05.19.12.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.05.18.11.54;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.02.19.52.36;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.30.23.50.07;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add load_font and list_font accessops to all rasops-based wsdisplay drivers.
Trivial except for tga(4) and gpx(4/vax) which need a bit more care setting
up a new font.
@
text
@/*	$OpenBSD: pxa2x0_lcd.h,v 1.11 2005/12/22 18:45:46 deraadt Exp $ */
/* $NetBSD: pxa2x0_lcd.h,v 1.2 2003/06/17 09:43:14 bsh Exp $ */
/*
 * Copyright (c) 2002  Genetec Corporation.  All rights reserved.
 * Written by Hiroyuki Bessho for Genetec Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Genetec Corporation.
 * 4. The name of Genetec Corporation may not be used to endorse or 
 *    promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY GENETEC CORPORATION ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL GENETEC CORPORATION
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef _ARM_XSCALE_PXA2X0_LCD_H
#define _ARM_XSCALE_PXA2X0_LCD_H

#include <dev/rasops/rasops.h>
#include <machine/bus.h>

/* LCD Controller */

struct	lcd_dma_descriptor {
	uint32_t	fdadr;	/* next frame descriptor */
	uint32_t	fsadr;	/* frame start address */
	uint32_t	fidr;	/* frame ID */
	uint32_t	ldcmd;	/* DMA command */
#define	LDCMD_PAL	(1U<<26)	/* Palette buffer */
#define LDCMD_SOFINT	(1U<<22)	/* Start of Frame interrupt */
#define LDCMD_EOFINT	(1U<<21)	/* End of Frame interrupt */
};


struct pxa2x0_lcd_screen {
	LIST_ENTRY(pxa2x0_lcd_screen) link;

	/* Frame buffer */
	bus_dmamap_t dma;
	bus_dma_segment_t segs[1];
	int 	nsegs;
	size_t  buf_size;
	size_t  map_size;
	void 	*buf_va;
	int	depth;

	/* DMA frame descriptor */
	struct	lcd_dma_descriptor *dma_desc;
	paddr_t	dma_desc_pa;

	/* rasterop */
	struct rasops_info rinfo;
};

struct pxa2x0_lcd_softc {
	struct device  dev;
	/* control register */
	bus_space_tag_t  	iot;
	bus_space_handle_t	ioh;
	bus_dma_tag_t		dma_tag;
	
	const struct lcd_panel_geometry *geometry;

	int n_screens;
	LIST_HEAD(, pxa2x0_lcd_screen) screens;
	struct pxa2x0_lcd_screen *active;

	void *ih;			/* interrupt handler */
};

struct lcd_panel_geometry {
	short panel_width;
	short panel_height;
	short extra_lines;

	short panel_info;
#define LCDPANEL_VSP	(1<<0)		/* L_FCLK pin is active low */
#define LCDPANEL_HSP	(1<<1)		/* L_LCLK pin is active low */
#define LCDPANEL_PCP	(1<<2)		/* use L_PCLK falling edge */
#define LCDPANEL_OEP	(1<<3)		/* L_BIAS pin is active low */
#define LCDPANEL_DPC	(1<<4)		/* double pixel clock mode */

#define LCDPANEL_DUAL	(1<<5)		/* Dual or single */
#define LCDPANEL_SINGLE 0
#define LCDPANEL_ACTIVE	(1<<6)		/* Active or Passive */
#define LCDPANEL_PASSIVE 0
#define LCDPANEL_MONOCHROME (1<<7)	/* depth=1 */

	short pixel_clock_div;		/* pixel clock divider */
	short ac_bias;			/* AC bias pin frequency */

	short hsync_pulse_width;	/* Horizontal sync pulse width */
	short beg_line_wait;		/* beginning of line wait (BLW) */
	short end_line_wait;		/* end of line pxel wait (ELW) */

	short vsync_pulse_width;	/* vertical sync pulse width */
	short beg_frame_wait;		/* beginning of frame wait (BFW) */
	short end_frame_wait;		/* end of frame wait (EFW) */
};

/*
 * we need bits-per-pixel value to configure wsdisplay screen
 */
struct pxa2x0_wsscreen_descr {
	struct wsscreen_descr  c;	/* standard descriptor */
	int depth;			/* bits per pixel */
	int flags;			/* rasops flags */
};

void	pxa2x0_lcd_attach_sub(struct pxa2x0_lcd_softc *,
	    struct pxaip_attach_args *, struct pxa2x0_wsscreen_descr *,
	    const struct lcd_panel_geometry *, int);
int	pxa2x0_lcd_cnattach(struct pxa2x0_wsscreen_descr *,
	    const struct lcd_panel_geometry *, void (*)(u_int, int));

int	pxa2x0_lcd_alloc_screen(void *, const struct wsscreen_descr *,
	    void **, int *, int *, long *);
void	pxa2x0_lcd_free_screen(void *, void *);
int	pxa2x0_lcd_ioctl(void *, u_long, caddr_t, int, struct proc *);
int	pxa2x0_lcd_load_font(void *, void *, struct wsdisplay_font *);
int	pxa2x0_lcd_list_font(void *, struct wsdisplay_font *);
paddr_t	pxa2x0_lcd_mmap(void *, off_t, int);
int	pxa2x0_lcd_show_screen(void *, void *, int, void (*)(void *, int, int),
	    void *);

void	pxa2x0_lcd_power(int, void *);
void	pxa2x0_lcd_suspend(struct pxa2x0_lcd_softc *);
void	pxa2x0_lcd_resume(struct pxa2x0_lcd_softc *);

#endif /* _ARM_XSCALE_PXA2X0_LCD_H */
@


1.11
log
@do not do delay(HUGEVALUE) after enabling/disabling the lcd dma.  yes, it
has a weird effect when you enable it and the backlight at the same time,
but most people don't see it because they are flipping the lid open.  and
it is not actually weird, it is actually rather neat.  ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.10 2005/09/15 20:23:10 miod Exp $ */
d141 2
d146 1
@


1.10
log
@Stop compiling the texte console rotation code #ifdef __zaurus__, but use
a flag in the rasops_info structure; drivers which may use it shall declare
a specific attribute for the config(8) machinery, so that the necessary code
is compiled in.

In addition to this, rotated font computation is now done on-demand, and a
list of unrotated-rotated font cookie pairs is kept, rather than rotating all
built-in wsfonts at initialization time.

No user-perceptible functional change.

Tested matthieu@@ uwe@@, ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.9 2005/04/11 03:32:48 uwe Exp $ */
d145 2
@


1.9
log
@- eliminate extra powerhook in pxalcd, inspired by ohci changes
- update file comment for zaurus_lcd.c
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.8 2005/04/06 01:31:05 pascoe Exp $ */
d128 1
@


1.8
log
@spelling/grammar cleanups

jolan drahn uwe dlg ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.7 2005/01/21 16:22:34 miod Exp $ */
d143 1
@


1.7
log
@Overhaul of the pxa2x0_lcd code, to allow early (before autoconf) attachment,
and collateral changes.

Because this driver requires us_dma (and as such, vm services) to work, it
can not be selected in consinit(). Instead, add a hook to the arm
cpu_startup() which will, on zaurus, switch console from serial (selected
in consinit()) to lcd.

This also makes the zaurus-specific early pxa2x0_clkman() substitute code
cleaner.

While there, move boot -c handling later, after the glass console is set up.

Tested by drahn@@ and uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.6 2005/01/06 23:47:20 miod Exp $ */
d43 1
a43 1
/* LCD Contoroller */
d50 1
a50 1
#define	LDCMD_PAL	(1U<<26)	/* Pallet buffer */
d113 1
a113 1
	short hsync_pulse_width;	/* Horizontao sync pulse width */
@


1.6
log
@Lazy man's display console on Zaurus: allow the display to be attached as a
console when it is probed. Earlier boot messages are still being sent to the
serial port for now.

While there, swap blue and red in 16bpp mode to get the expected display
colours.

Tested and ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.5 2005/01/06 16:50:44 miod Exp $ */
a87 1
	struct rasops_info	sc_ro;		/* main (console) rasops */
a91 4
void pxa2x0_lcd_attach_sub(struct pxa2x0_lcd_softc *, struct pxaip_attach_args *,
			   const struct lcd_panel_geometry *);
void pxa2x0_lcd_start_dma(struct pxa2x0_lcd_softc *, struct pxa2x0_lcd_screen *);

a121 4
void	pxa2x0_lcd_geometry(struct pxa2x0_lcd_softc *,
	    const struct lcd_panel_geometry *);
struct pxa2x0_lcd_screen *pxa2x0_lcd_new_screen(struct pxa2x0_lcd_softc *, int);

d130 5
a134 5
int	pxa2x0_lcd_setup_console(struct pxa2x0_lcd_softc *,
	    const struct pxa2x0_wsscreen_descr *);
int	pxa2x0_lcd_setup_wsscreen(struct pxa2x0_lcd_softc *,
	    struct pxa2x0_wsscreen_descr *, const struct lcd_panel_geometry *,
	    const char * );
@


1.5
log
@Bring back the code simplifications after debug and testing by drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.4 2005/01/05 19:12:47 miod Exp $ */
d88 1
a88 1
	struct wsdisplay_emulops emulops;	/* master emulops copy */
d127 2
a128 2
void pxa2x0_lcd_geometry(struct pxa2x0_lcd_softc *,
    const struct lcd_panel_geometry *);
d139 10
a148 7
int pxa2x0_lcd_setup_wsscreen(struct pxa2x0_lcd_softc *,
    struct pxa2x0_wsscreen_descr *, const struct lcd_panel_geometry *,
    const char * );

int pxa2x0_lcd_show_screen(void *, void *, int, void (*)(void *, int, int),
    void *);
int pxa2x0_lcd_ioctl(void *, u_long, caddr_t, int, struct proc *);
d150 2
a151 3
int pxa2x0_lcd_alloc_screen(void *, const struct wsscreen_descr *,
    void **, int *, int *, long *);
void pxa2x0_lcd_free_screen(void *, void *);
@


1.4
log
@Partially revert some of these changes - misunderstanding between drahn@@ and I
about which diff he had tested.
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.3 2005/01/05 18:11:54 miod Exp $ */
d88 2
d139 3
a141 2
int pxa2x0_lcd_setup_wsscreen(struct pxa2x0_wsscreen_descr *,
    const struct lcd_panel_geometry *, const char * );
a149 2

extern const struct wsdisplay_emulops pxa2x0_lcd_emulops;
@


1.3
log
@First steps in cleaning the Zaurus display code:
- kill the non-wscons code. Really.
- KNF, and english fixes.
- do not handle WSDISPLAYIO_[GS]VIDEO in the driver - the wsdisplay layer
  can do this, as long as we provide a burner accessop, so provide one.
- kill the emulops indirection.
- when setting the color palette in 8 or 4bpp mode, match the values used
  in the rasops color table (only affects normal white value).

test and ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_lcd.h,v 1.2 2005/01/02 19:52:36 drahn Exp $ */
a87 2
	struct wsdisplay_emulops emulops;	/* master emulops copy */

d137 2
a138 3
int pxa2x0_lcd_setup_wsscreen(struct pxa2x0_lcd_softc *,
    struct pxa2x0_wsscreen_descr *, const struct lcd_panel_geometry *,
    const char * );
d147 2
@


1.2
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d81 1
a81 1
	bus_dma_tag_t    	dma_tag;
d88 2
d128 2
a129 3
		          const struct lcd_panel_geometry *);
struct pxa2x0_lcd_screen *pxa2x0_lcd_new_screen( 
	struct pxa2x0_lcd_softc *, int depth);
d139 7
a145 5
int pxa2x0_lcd_setup_wsscreen(struct pxa2x0_wsscreen_descr *,
    const struct lcd_panel_geometry *, const char * );

int pxa2x0_lcd_show_screen(void *, void *, int, void (*)(void *, int, int), void *);
int pxa2x0_lcd_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p);
d148 1
a148 1
	    void **, int *, int *, long *);
a150 2
extern const struct wsdisplay_emulops pxa2x0_lcd_emulops;
    
@


1.1
log
@xscale bits, taken from NetBSD with modifications as appropriate for OpenBSD.
@
text
@d1 1
@

