head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.28
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.24
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.26
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.18
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2016.09.03.13.37.42;	author guenther;	state dead;
branches;
next	1.6;
commitid	6T3r4QcMFKe3Fo5T;

1.6
date	2009.08.22.02.54.50;	author mk;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.08.21.50.37;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.22.23.54.28;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.14.00.55.11;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.02.19.52.36;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.30.23.50.07;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: pxa2x0_gpio.h,v 1.6 2009/08/22 02:54:50 mk Exp $ */
/*	$wasabi$	*/

/*
 * Copyright 2003 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Steve C. Woodford for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PXA2X0_GPIO_H
#define _PXA2X0_GPIO_H

/*
 * If you want to fiddle with GPIO registers before the
 * driver has been autoconfigured (e.g. from initarm()),
 * call this function with the virtual address of the
 * GPIO controller's registers
 */
void pxa2x0_gpio_bootstrap(vaddr_t);

/*
 * GPIO pin function query/manipulation functions
 */
u_int pxa2x0_gpio_get_function(u_int);
u_int pxa2x0_gpio_set_function(u_int, u_int);
int pxa2x0_gpio_get_bit(u_int gpio);
void pxa2x0_gpio_set_bit(u_int gpio);
void pxa2x0_gpio_clear_bit(u_int gpio);
void pxa2x0_gpio_set_dir(u_int gpio, int dir);
void pxa2x0_gpio_clear_intr(u_int gpio);

/*
 * Establish/Disestablish interrupt handlers for GPIO pins
 */
void *pxa2x0_gpio_intr_establish(u_int, int, int, int (*)(void *), void *,
    const char *);
void pxa2x0_gpio_intr_disestablish(void *);
const char *pxa2x0_gpio_intr_string(void *);
void pxa2x0_gpio_intr_mask(void *);
void pxa2x0_gpio_intr_unmask(void *);

#endif /* _PXA2X0_GPIO_H */
@


1.6
log
@Constify the what/name parameter of pci_intr_establish().

Tested by myself, sthen, oga, kettenis, and jasper.
Input from sthen and jasper.

ok kettenis

(Manpage follows shortly.)
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_gpio.h,v 1.5 2005/04/08 21:50:37 uwe Exp $ */
@


1.5
log
@- manipulate the proper event counter in pxagpio_intr1
- pxa2x0_gpio_intr_mask/unmask as discussed with dale
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_gpio.h,v 1.4 2005/02/22 23:54:28 drahn Exp $ */
d65 1
a65 1
    char *);
@


1.4
log
@Interrupt naming as provided by other interrupt handlers.
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_gpio.h,v 1.3 2005/01/14 00:55:11 drahn Exp $ */
d67 3
a69 1
const char *pxa2x0_gpio_intr_string(void *cookie);
@


1.3
log
@prototypes for recently added functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_gpio.h,v 1.2 2005/01/02 19:52:36 drahn Exp $ */
d67 1
@


1.2
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d48 1
a48 1
extern void pxa2x0_gpio_bootstrap(vaddr_t);
d53 7
a59 2
extern u_int pxa2x0_gpio_get_function(u_int);
extern u_int pxa2x0_gpio_set_function(u_int, u_int);
d64 3
a66 3
extern void *pxa2x0_gpio_intr_establish(u_int, int, int,
		int (*)(void *), void *, char *);
extern void pxa2x0_gpio_intr_disestablish(void *);
@


1.1
log
@xscale bits, taken from NetBSD with modifications as appropriate for OpenBSD.
@
text
@d1 1
@

