head	1.27;
access;
symbols
	OPENBSD_6_0:1.26.0.10
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.6
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.24.0.10
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.8
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.6
	OPENBSD_5_0:1.24.0.4
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.21.0.14
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.10
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.19.0.8
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13;
locks; strict;
comment	@ * @;


1.27
date	2016.09.03.13.37.42;	author guenther;	state dead;
branches;
next	1.26;
commitid	6T3r4QcMFKe3Fo5T;

1.26
date	2014.05.19.13.11.31;	author mpi;	state Exp;
branches;
next	1.25;

1.25
date	2013.04.16.14.55.23;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.09.07.16.21.35;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.08.30.21.30.15;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.08.27.05.04.06;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.14.19.18.49;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2007.03.24.03.33.10;	author pascoe;	state Exp;
branches;
next	1.19;

1.19
date	2005.04.08.02.32.54;	author dlg;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.05.13.12.05;	author pascoe;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.03.23.47.36;	author uwe;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.30.14.40.47;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.30.14.24.39;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.30.14.02.02;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.23.13.17.29;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.19.00.45.14;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.18.16.42.09;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.17.22.44.03;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.17.22.10.35;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.14.13.55.20;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.12.05.23.35;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.26.21.29.36;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.09.07.11.32;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.05.11.01.27;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.05.00.46.28;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.04.03.48.02;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.04.03.47.00;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@/*	$OpenBSD: pxa2x0_ohci.c,v 1.26 2014/05/19 13:11:31 mpi Exp $ */

/*
 * Copyright (c) 2005 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/timeout.h>

#include <machine/intr.h>
#include <machine/bus.h>

#include <arm/xscale/pxa2x0reg.h>
#include <arm/xscale/pxa2x0var.h>
#include <arm/xscale/pxa2x0_gpio.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>
#include <dev/usb/usb_mem.h>

#include <dev/usb/ohcireg.h>
#include <dev/usb/ohcivar.h>

int	pxaohci_match(struct device *, void *, void *);
void	pxaohci_attach(struct device *, struct device *, void *);
int	pxaohci_detach(struct device *, int);
int	pxaohci_activate(struct device *, int);

struct pxaohci_softc {
	struct ohci_softc	sc;
	void			*sc_ih;
};

void	pxaohci_enable(struct pxaohci_softc *);
void	pxaohci_disable(struct pxaohci_softc *);

struct cfattach pxaohci_ca = {
        sizeof (struct pxaohci_softc), pxaohci_match, pxaohci_attach,
	pxaohci_detach, ohci_activate
};

int
pxaohci_match(struct device *parent, void *match, void *aux)
{
	if ((cputype & ~CPU_ID_XSCALE_COREREV_MASK) != CPU_ID_PXA27X)
		return (0);

	return (1);
}

void
pxaohci_attach(struct device *parent, struct device *self, void *aux)
{
	struct pxaohci_softc		*sc = (struct pxaohci_softc *)self;
	struct pxaip_attach_args	*pxa = aux;
	usbd_status			r;

	sc->sc.iot = pxa->pxa_iot;
	sc->sc.sc_bus.dmatag = pxa->pxa_dmat;
	sc->sc_ih = NULL;
	sc->sc.sc_size = 0;

	/* Map I/O space */
	if (bus_space_map(sc->sc.iot, PXA2X0_USBHC_BASE, PXA2X0_USBHC_SIZE, 0,
	    &sc->sc.ioh)) {
		printf(": cannot map mem space\n");
		return;
	}
	sc->sc.sc_size = PXA2X0_USBHC_SIZE;

	/* XXX copied from ohci_pci.c. needed? */
	bus_space_barrier(sc->sc.iot, sc->sc.ioh, 0, sc->sc.sc_size,
	    BUS_SPACE_BARRIER_READ|BUS_SPACE_BARRIER_WRITE);

	/* start the usb clock */
	pxa2x0_clkman_config(CKEN_USBHC, 1);
	pxaohci_enable(sc);

	/* Disable interrupts, so we don't get any spurious ones. */
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, OHCI_INTERRUPT_DISABLE,
	    OHCI_MIE);

	sc->sc_ih = pxa2x0_intr_establish(PXA2X0_INT_USBH1, IPL_USB,
	    ohci_intr, &sc->sc, sc->sc.sc_bus.bdev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": unable to establish interrupt\n");
		pxaohci_disable(sc);
		pxa2x0_clkman_config(CKEN_USBHC, 0);
		bus_space_unmap(sc->sc.iot, sc->sc.ioh, sc->sc.sc_size);
		sc->sc.sc_size = 0;
		return;
	}

	strlcpy(sc->sc.sc_vendor, "PXA27x", sizeof(sc->sc.sc_vendor));

	if (ohci_checkrev(&sc->sc) != USBD_NORMAL_COMPLETION)
		goto unsupported;

	r = ohci_init(&sc->sc);
	if (r != USBD_NORMAL_COMPLETION) {
		printf("%s: init failed, error=%d\n",
		    sc->sc.sc_bus.bdev.dv_xname, r);
unsupported:
		pxa2x0_intr_disestablish(sc->sc_ih);
		sc->sc_ih = NULL;
		pxaohci_disable(sc);
		pxa2x0_clkman_config(CKEN_USBHC, 0);
		bus_space_unmap(sc->sc.iot, sc->sc.ioh, sc->sc.sc_size);
		sc->sc.sc_size = 0;
		return;
	}

	config_found(self, &sc->sc.sc_bus, usbctlprint);
}

int
pxaohci_detach(struct device *self, int flags)
{
	struct pxaohci_softc		*sc = (struct pxaohci_softc *)self;
	int				rv;

	rv = ohci_detach(self, flags);
	if (rv)
		return (rv);

	if (sc->sc_ih != NULL) {
		pxa2x0_intr_disestablish(sc->sc_ih);
		sc->sc_ih = NULL;
	}

	pxaohci_disable(sc);

	/* stop clock */
	pxa2x0_clkman_config(CKEN_USBHC, 0);

	if (sc->sc.sc_size) {
		bus_space_unmap(sc->sc.iot, sc->sc.ioh, sc->sc.sc_size);
		sc->sc.sc_size = 0;
	}

	return (0);
}


int
pxaohci_activate(struct device *self, int act)
{
	struct pxaohci_softc *sc = (struct pxaohci_softc *)self;

	switch (act) {
	case DVACT_SUSPEND:
		sc->sc.sc_bus.use_polling++;
		ohci_activate((struct device *)&sc->sc, act);
		pxa2x0_clkman_config(CKEN_USBHC, 0);
		sc->sc.sc_bus.use_polling--;
		break;
	case DVACT_RESUME:
		sc->sc.sc_bus.use_polling++;
		pxa2x0_clkman_config(CKEN_USBHC, 1);
		pxaohci_enable(sc);
		ohci_activate((struct device *)&sc->sc, act);
		sc->sc.sc_bus.use_polling--;
		break;
	}
	return 0;
}

void
pxaohci_enable(struct pxaohci_softc *sc)
{
	u_int32_t			hr;

	/* Full host reset */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) | USBHC_HR_FHR);

	DELAY(USBHC_RST_WAIT);

	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_FHR));

	/* Force system bus interface reset */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) | USBHC_HR_FSBIR);

	while (bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR) & \
	    USBHC_HR_FSBIR)
		DELAY(3);

	/* Enable the ports (physically only one, only enable that one?) */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_SSE));
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_SSEP2));
}

void
pxaohci_disable(struct pxaohci_softc *sc)
{
	u_int32_t			hr;

	/* Full host reset */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) | USBHC_HR_FHR);

	DELAY(USBHC_RST_WAIT);

	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_FHR));
}
@


1.26
log
@There is no need to remember which usb(4) device is the child of an USB
host controller because autoconf(9) already does it.

Breakage reported by todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.25 2013/04/16 14:55:23 deraadt Exp $ */
@


1.25
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.
missed bits from previous change; ok mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.24 2010/09/07 16:21:35 deraadt Exp $ */
d129 1
a129 2
	sc->sc.sc_child = config_found((void *)sc, &sc->sc.sc_bus,
	    usbctlprint);
d138 1
a138 1
	rv = ohci_detach(&sc->sc, flags);
@


1.24
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.23 2010/08/30 21:30:15 deraadt Exp $ */
d46 2
a47 2
	ohci_softc_t	sc;
	void		*sc_ih;
@


1.23
log
@Change powerhooks into activate functions, and provide stub powerhook
functions
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.22 2010/08/27 05:04:06 deraadt Exp $ */
a43 1
void	pxaohci_powerhook(int, void *);
a128 5
	sc->sc.sc_powerhook = powerhook_establish(pxaohci_powerhook, sc);
	if (sc->sc.sc_powerhook == NULL)
		printf("%s: cannot establish powerhook\n",
		    sc->sc.sc_bus.bdev.dv_xname);

a142 5
	if (sc->sc.sc_powerhook != NULL) {
		powerhook_disestablish(sc->sc.sc_powerhook);
		sc->sc.sc_powerhook = NULL;
	}

d170 1
a170 1
		ohci_powerhook(act, &sc->sc);
d178 1
a178 1
		ohci_powerhook(act, &sc->sc);
a182 6
}

void
pxaohci_powerhook(int why, void *arg)
{
	pxaohci_activate(arg, why);
@


1.22
log
@More killing of PWR_STANDBY.  cvs skipped these files
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.21 2007/06/14 19:18:49 deraadt Exp $ */
d43 2
a44 1
void	pxaohci_power(int, void *);
d130 1
a130 1
	sc->sc.sc_powerhook = powerhook_establish(pxaohci_power, sc);
d173 2
a174 2
void
pxaohci_power(int why, void *arg)
d176 1
a176 2
	struct pxaohci_softc		*sc = (struct pxaohci_softc *)arg;
	int				s;
d178 4
a181 5
	s = splhardusb();
	sc->sc.sc_bus.use_polling++;
	switch (why) {
	case PWR_SUSPEND:
		ohci_power(why, &sc->sc);
d183 1
d185 2
a186 2

	case PWR_RESUME:
d189 2
a190 1
		ohci_power(why, &sc->sc);
d193 7
a199 2
	sc->sc.sc_bus.use_polling--;
	splx(s);
@


1.21
log
@unbreak tree after untested timeout.h deletions
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.20 2007/03/24 03:33:10 pascoe Exp $ */
a180 1
	case PWR_STANDBY:
@


1.20
log
@Call the new ohci_checkrev function on xscale, otherwise the USB version
is not set correctly and the USB bus does not attach.

Tested ckuethe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.19 2005/04/08 02:32:54 dlg Exp $ */
d23 1
@


1.19
log
@clean up properly in the event of a failure during attach.

ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.18 2005/04/05 13:12:05 pascoe Exp $ */
d110 4
d118 1
@


1.18
log
@Argument to DELAY should be usecs, not hz.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.17 2005/04/03 23:47:36 uwe Exp $ */
d50 1
d98 11
a109 1

d114 4
a119 1
		pxa2x0_clkman_config(CKEN_USBHC, 0);
d125 1
a125 1
		printf("%s: can't establish power hook\n",
d128 1
a128 4
	sc->sc_ih = pxa2x0_intr_establish(PXA2X0_INT_USBH1, IPL_USB,
	    ohci_intr, sc, sc->sc.sc_bus.bdev.dv_xname);

	sc->sc.sc_child = config_found((void *) sc, &sc->sc.sc_bus,
a135 1
	u_int32_t			hr;
d152 1
a152 10
	/* Full host reset */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) | USBHC_HR_FHR);

	DELAY(USBHC_RST_WAIT);

	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_FHR));
d223 17
@


1.17
log
@check powerhook_establish() result, and pass the correct softc to it.
did not matter in this case because the softc's are aligned; ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.16 2005/03/30 14:40:47 dlg Exp $ */
d147 1
a147 1
	DELAY(mstohz(USBHC_RST_WAIT));
d200 1
a200 1
	DELAY(mstohz(USBHC_RST_WAIT));
@


1.16
log
@use the local powerhook, not the generic ohci one. suspend/resume now works
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.15 2005/03/30 14:24:39 dlg Exp $ */
d109 4
a112 1
	sc->sc.sc_powerhook = powerhook_establish(pxaohci_power, &sc->sc);
d131 5
a135 1
	powerhook_disestablish(sc->sc.sc_powerhook);
d176 1
a176 1
		ohci_power(why, arg);
d183 1
a183 1
		ohci_power(why, arg);
a222 1

@


1.15
log
@extra gunk to make ohci suspend and resume work on the zaurus

help from and ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.14 2005/03/30 14:02:02 dlg Exp $ */
d109 1
a109 1
	sc->sc.sc_powerhook = powerhook_establish(ohci_power, &sc->sc);
@


1.14
log
@make the powerhooks the responsibility of the bus ohci is attached to

ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.13 2005/02/23 13:17:29 dlg Exp $ */
d42 1
d49 2
a69 1
	u_int32_t			hr;
d91 1
a91 28

	/* Full host reset */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) | USBHC_HR_FHR);

	DELAY(mstohz(USBHC_RST_WAIT));

	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_FHR));

	/* Force system bus interface reset */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) | USBHC_HR_FSBIR);

	while (bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR) & \
	    USBHC_HR_FSBIR)
		DELAY(3);

	/* Enable the ports (physically only one, only enable that one?) */
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_SSE));
	hr = bus_space_read_4(sc->sc.iot, sc->sc.ioh, USBHC_HR);
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, USBHC_HR,
	    (hr & USBHC_HR_MASK) & ~(USBHC_HR_SSEP2));
d156 61
@


1.13
log
@shrink

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.12 2005/02/19 00:45:14 dlg Exp $ */
a129 2
		pxa2x0_intr_disestablish(sc->sc_ih);
		sc->sc_ih = NULL;
d134 2
d153 1
@


1.12
log
@set the gpios in the right place

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.11 2005/02/18 16:42:09 dlg Exp $ */
a45 1
	int		sc_intr;
a71 1
	sc->sc_intr = PXA2X0_INT_USBH1;
d136 2
a137 2
	sc->sc_ih = pxa2x0_intr_establish(sc->sc_intr, IPL_USB, ohci_intr, sc,
	    sc->sc.sc_bus.bdev.dv_xname);
@


1.11
log
@remove all the cruft i had in there while trying to figure this stuff out

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.10 2005/02/17 22:44:03 dlg Exp $ */
a123 2
	/* XXX splusb? */

a136 1
	/* XXX splx(s) usb? */
a139 4

	pxa2x0_gpio_set_function(35, GPIO_ALT_FN_2_IN);
	pxa2x0_gpio_set_function(37, GPIO_ALT_FN_1_OUT);
	pxa2x0_gpio_set_function(41, GPIO_ALT_FN_2_IN);
@


1.10
log
@whitespace nit

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.9 2005/02/17 22:10:35 dlg Exp $ */
a45 1
	void		*sc_gpioih;
a62 9
int pxaohci_intr(void *);
int
pxaohci_intr(void *arg)
{

	printf("register: %d\n", pxa2x0_gpio_get_bit(41));
	return (ohci_intr(arg));
}

a146 2
	sc->sc_gpioih = pxa2x0_gpio_intr_establish(41, IST_EDGE_BOTH, IPL_BIO,
	    ohci_intr, sc, sc->sc.sc_bus.bdev.dv_xname);
a161 5

	if (sc->sc_gpioih != NULL) {
		pxa2x0_gpio_intr_disestablish(sc->sc_gpioih);
		sc->sc_gpioih = NULL;
	}
@


1.9
log
@a driver for the usb device controller. at the moment it only hardwires the
physical port on a zaurus to the host controller. needs lots of cleanup.

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.8 2005/02/14 13:55:20 dlg Exp $ */
d154 3
a156 3
        pxa2x0_gpio_set_function(35, GPIO_ALT_FN_2_IN);
        pxa2x0_gpio_set_function(37, GPIO_ALT_FN_1_OUT);
        pxa2x0_gpio_set_function(41, GPIO_ALT_FN_2_IN);
@


1.8
log
@remove unused headers (you can guess what i based this code on) and make
the prototypes consistent.

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.7 2005/02/12 05:23:35 dlg Exp $ */
d29 1
d46 1
d64 9
d126 3
a134 2
	sc->sc_ih = pxa2x0_intr_establish(sc->sc_intr, IPL_USB, ohci_intr, sc,
	    sc->sc.sc_bus.bdev.dv_xname);
d151 9
d174 5
@


1.7
log
@remove the need for duplicate knowledge between autoconfig and the driver.

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.6 2005/01/26 21:29:36 dlg Exp $ */
a18 2
#include <sys/cdefs.h>

a21 1
#include <sys/termios.h>
d40 1
a40 1
int	pxaohci_detach(device_ptr_t, int);
d144 1
a144 1
pxaohci_detach(device_ptr_t self, int flags)
@


1.6
log
@only attach ohci on chips that actually have the controller

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.5 2005/01/09 07:11:32 dlg Exp $ */
d59 1
a59 5
	struct pxaip_attach_args *pxa = aux;

	if (((cputype & ~CPU_ID_XSCALE_COREREV_MASK) != CPU_ID_PXA27X) ||
	    (pxa->pxa_addr != PXA2X0_USBHC_BASE) ||
	    (pxa->pxa_intr != PXA2X0_INT_USBH1))
a61 2
	pxa->pxa_size = PXA2X0_USBHC_SIZE;

d75 1
a75 1
	sc->sc_intr = pxa->pxa_intr;
d80 1
a80 1
	if (bus_space_map(sc->sc.iot, pxa->pxa_addr, pxa->pxa_size, 0,
d85 1
a85 1
	sc->sc.sc_size = pxa->pxa_size;
@


1.5
log
@intr_disestablish

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.4 2005/01/05 11:01:27 dlg Exp $ */
d61 2
a62 3
	/* XXX if pxa revision != 270 return 0 */

	if ((pxa->pxa_addr != PXA2X0_USBHC_BASE) ||
d66 1
a66 1
	pxa->pxa_size = PXA2X0_USBHC_SIZE; /* XXX wtf? */
@


1.4
log
@missed a bit in the last commit
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.3 2005/01/05 00:46:28 dlg Exp $ */
d142 2
a143 1
		/* XXX disestablish */
a163 1
#ifdef notdef
d165 1
a165 1
		/* XXX disestablish */
a167 1
#endif
@


1.3
log
@definitions of the extra registers for the usb host controller and code
that uses them to try and correctly init the controller.

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.2 2005/01/04 03:48:02 drahn Exp $ */
a83 1
	sc->sc_ih1 = NULL;
@


1.2
log
@dont be lazy, use the proper define.
@
text
@d1 1
a1 1
/*	$OpenBSD: pxa2x0_ohci.c,v 1.1 2005/01/04 03:47:00 drahn Exp $ */
d25 1
a47 1
	void		*sc_ih1;
d77 1
d98 29
a133 2
	sc->sc_ih1 = pxa2x0_intr_establish(PXA2X0_INT_USBH2, IPL_USB,
	    ohci_intr, sc, sc->sc.sc_bus.bdev.dv_xname);
d135 1
a135 1
	strlcpy(sc->sc.sc_vendor, "Vendor String", sizeof(sc->sc.sc_vendor));
d144 1
d157 1
d163 1
d170 15
@


1.1
log
@USB support for C3000, much thanks to dlg@@ for pxa2x0_ohci.c
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d104 2
a105 2
	sc->sc_ih1 = pxa2x0_intr_establish(2, IPL_USB, ohci_intr, sc,
	    sc->sc.sc_bus.bdev.dv_xname);
@

