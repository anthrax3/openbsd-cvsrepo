head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.14
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2016.05.10.18.39.43;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	qfOifNidEGDB2jL1;

1.8
date	2012.12.02.07.03.31;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.20.22.02.13;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.26.20.31.25;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.08.14.20.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.18.15.42.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.14.21.46.30;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@SROP mitigation.  sendsig() stores a (per-process ^ &sigcontext) cookie
inside the sigcontext.  sigreturn(2) checks syscall entry was from the
exact PC addr in the (per-process ASLR) sigtramp, verifies the cookie,
and clears it to prevent sigcontext reuse.
not yet tested on landisk, sparc, *88k, socppc.
ok kettenis
@
text
@/*	$OpenBSD: signal.h,v 1.8 2012/12/02 07:03:31 guenther Exp $	*/
/*	$NetBSD: signal.h,v 1.5 2003/10/18 17:57:21 briggs Exp $	*/

/*
 * Copyright (c) 1994-1996 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * This code is derived from software written for Brini by Mark Brinicombe
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Brini.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BRINI ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL BRINI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * signal.h
 *
 * Architecture dependant signal types and structures
 *
 * Created      : 30/09/94
 */

#ifndef _ARM_SIGNAL_H_
#define _ARM_SIGNAL_H_

#ifndef _LOCORE
#include <sys/cdefs.h>

typedef int sig_atomic_t;

#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
/*
 * Information pushed on stack when a signal is delivered.
 * This is used by the kernel to restore state following
 * execution of the signal handler.  It is also made available
 * to the handler to allow it to restore state properly if
 * a non-standard exit is performed.
 */
struct sigcontext {
	long	sc_cookie;
	int	sc_mask;	/* signal mask to restore */

	unsigned int sc_spsr;
	unsigned int sc_r0;
	unsigned int sc_r1;
	unsigned int sc_r2;
	unsigned int sc_r3;
	unsigned int sc_r4;
	unsigned int sc_r5;
	unsigned int sc_r6;
	unsigned int sc_r7;
	unsigned int sc_r8;
	unsigned int sc_r9;
	unsigned int sc_r10;
	unsigned int sc_r11;
	unsigned int sc_r12;
	unsigned int sc_usr_sp;
	unsigned int sc_usr_lr;
	unsigned int sc_svc_lr;
	unsigned int sc_pc;
};
#endif /* __BSD_VISIBLE || __XPG_VISIBLE >= 420 */
#endif /* !_LOCORE */

#endif	/* !_ARM_SIGNAL_H_ */
@


1.8
log
@Determine whether we're currently on the alternative signal stack
dynamically, by comparing the stack pointer against the altstack
base and size, so that you get the correct answer if you longjmp
out of the signal handler, as tested by regress/sys/kern/stackjmp/.
Also, fix alt stack handling on vax, where it was completely broken.

Testing and corrections by miod@@, krw@@, tobiasu@@, pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.7 2011/09/20 22:02:13 miod Exp $	*/
d64 2
a65 2
	int	__sc_unused;
	int	sc_mask;		/* signal mask to restore (old style) */
@


1.7
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.6 2011/03/23 16:54:34 pirofti Exp $	*/
d64 1
a64 1
	int	sc_onstack;		/* sigstack state to restore */
@


1.6
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.5 2006/05/26 20:31:25 miod Exp $	*/
a84 4
	
#if 0
	sigset_t sc_mask;		/* signal mask to restore (new style) */
#endif
@


1.5
log
@Remove unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.4 2006/01/08 14:20:17 millert Exp $	*/
d47 2
a48 2
#ifndef _ARM32_SIGNAL_H_
#define _ARM32_SIGNAL_H_
d93 1
a93 1
#endif	/* !_ARM32_SIGNAL_H_ */
@


1.4
log
@Expose struct sigcontext, struct sigstat and struct sigaltstack for XPG4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.3 2005/12/18 15:42:52 millert Exp $	*/
a92 35
#if defined(_LOCORE) || __BSD_VISIBLE

/*
 * SIGFPE codes
 *
 * see ieeefp.h for definition of FP exception codes
 */
#define SIG_CODE_FPE_CODE_MASK	0x00000f00	/* Mask for exception code */
#define SIG_CODE_FPE_CODE_SHIFT	8		/* Shift for exception code */
#define SIG_CODE_FPE_TYPE_MASK	0x000000ff	/* Mask for specific code */

/*
 * SIGILL codes
 *
 * the signal code is the instruction that raised the signal
 */

/*
 * SIGBUS and SIGSEGV codes
 *
 * The signal code is combination of the fault address and the fault code.
 *
 * The fault code is the coproc #15 fault status code
 *
 * The exception to this is a SIGBUS or SIGSEGV from a prefetch abort.
 * In this case the fault status code is not valid so the TYPE_MASK
 * should be treated as undefined (in practice it is the bottom 4 bits
 * of the fault address).
 */
#define SIG_CODE_BUS_ADDR_MASK	0xfffffff0
#define SIG_CODE_BUS_TYPE_MASK	0x0000000f
#define SIG_CODE_SEGV_ADDR_MASK	SIG_CODE_BUS_ADDR_MASK
#define SIG_CODE_SEGV_TYPE_MASK	SIG_CODE_BUS_TYPE_MASK

#endif /* _LOCORE || __BSD_VISIBLE */
@


1.3
log
@Don't include cdefs.h if _LOCORE is defined and hide some more defines
unless __BSD_VISIBLE or _LOCORE are set.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.2 2005/12/14 21:46:30 millert Exp $	*/
d55 1
a55 1
#if __BSD_VISIBLE
d90 1
a90 1
#endif /* __BSD_VISIBLE */
@


1.2
log
@convert _FOO_SOURCE -> __FOO_VISIBLE in machine.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.1 2004/02/01 05:09:49 drahn Exp $	*/
d50 1
a52 1
#ifndef _LOCORE
a53 3
#endif

#define __HAVE_SIGINFO
a55 1
#ifndef _LOCORE
a62 1

d90 1
a90 1

d93 1
a93 1
/* Signals codes */
a99 1

a121 1

d127 1
a127 1
#endif /* __BSD_VISIBLE */
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.2 2004/01/29 16:17:16 drahn Exp $	*/
d50 2
d58 1
a58 1

d134 2
a135 3
#endif	/* !_ARM_SIGNAL_H_ */

/* End of signal.h */
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

