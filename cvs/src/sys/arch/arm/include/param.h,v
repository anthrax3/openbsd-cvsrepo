head	1.23;
access;
symbols
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.21.0.14
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.10
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.12
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.4
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.8
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.6
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.17.0.6
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.23
date	2016.09.03.14.25.27;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	9KYyCUntEsgBdw9n;

1.22
date	2016.08.20.19.31.01;	author kettenis;	state Exp;
branches;
next	1.21;
commitid	avq7rG6B4OwfNSRB;

1.21
date	2013.06.13.05.13.12;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.26.05.04.10;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.25.17.46.24;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.23.16.12.20;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.20.22.02.13;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.08.03.40.32;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.07.15.45.16;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.11.20.20.15.28;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2010.05.24.02.00.35;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.04.09.57.47;	author martin;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.28.21.02.49;	author thib;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.19.01.47.23;	author martin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.09.18.08.37;	author martin;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.21.15.43.01;	author martin;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.12.23.05.03;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.31.15.31.12;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.06.22.31.30;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.19.03.17.07;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.19.22.55.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.06.17.30.38;	author drahn;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.19.10.48.02;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.06.05.23.10.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Increase the number of mbufs on most architectures.  This is based
on a guess how much memory a typical machine has.  If the value is
too high, users may run out of kernel memory.  Then we will have
to adjust this again.
OK claudio@@ deraadt@@
@
text
@/*	$OpenBSD: param.h,v 1.22 2016/08/20 19:31:01 kettenis Exp $	*/

/*
 * Copyright (c) 1994,1995 Mark Brinicombe.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the RiscBSD team.
 * 4. The name "RiscBSD" nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY RISCBSD ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL RISCBSD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef	_ARM_PARAM_H_
#define	_ARM_PARAM_H_

#define	MACHINE_ARCH	"arm"
#define	_MACHINE_ARCH	arm
#define	MID_MACHINE	MID_ARM6

#define	PAGE_SHIFT	12
#define	PAGE_SIZE	(1 << PAGE_SHIFT)
#define	PAGE_MASK	(PAGE_SIZE - 1)

#ifdef _KERNEL

#define	NPTEPG		(PAGE_SIZE/(sizeof (pt_entry_t)))

#define	NBPG		PAGE_SIZE
#define	PGSHIFT		PAGE_SHIFT
#define	PGOFSET		PAGE_MASK

#define	UPAGES		2			/* pages of u-area */
#define	USPACE		(UPAGES * PAGE_SIZE)	/* total size of u-area */
#define	USPACE_ALIGN	0			/* u-area alignment 0-none */

#define	NMBCLUSTERS	(16 * 1024)		/* max cluster allocation */

/*
 * Maximum size of the kernel malloc arena in PAGE_SIZE-sized
 * logical pages.
 */
#define	NKMEMPAGES_MAX_DEFAULT	((64 * 1024 * 1024) >> PAGE_SHIFT)

/* Constants used to divide the USPACE area */
/*
 * The USPACE area contains :
 * 1. the user structure for the process
 * 2. the fp context for FP emulation
 * 3. the kernel (svc) stack
 * 4. the undefined instruction stack
 *
 * The layout of the area looks like this
 *
 * | user area | FP context | undefined stack | kernel stack |
 *
 * The size of the user area is known.
 * The size of the FP context is variable depending of the FP emulator
 * in use and whether there is hardware FP support. However we can put
 * an upper limit on it.
 * The undefined stack needs to be at least 512 bytes. This is a requirement
 * of the FP emulators
 * The kernel stack should be at least 4K in size.
 *
 * The stack top addresses are used to set the stack pointers. The stack bottom
 * addresses are the addresses monitored by the diagnostic code for stack
 * overflows.
 */

#define	FPCONTEXTSIZE			(0x100)
#define	USPACE_SVC_STACK_TOP		(USPACE)
#define	USPACE_SVC_STACK_BOTTOM		(USPACE_SVC_STACK_TOP - 0x1000)
#define	USPACE_UNDEF_STACK_TOP		(USPACE_SVC_STACK_BOTTOM - 0x10)
#define	USPACE_UNDEF_STACK_BOTTOM	(sizeof(struct user) + FPCONTEXTSIZE + 10)

#ifndef _LOCORE
void	delay (unsigned);
#define	DELAY(x)	delay(x)
#endif

#if !defined(_LOCORE)
#include <machine/cpu.h>
#endif

/* ARM-specific macro to align a stack pointer (downwards). */
#define	STACKALIGNBYTES		(8 - 1)
#define	STACKALIGN(p)		((u_long)(p) &~ STACKALIGNBYTES)

#endif /* _KERNEL */

#endif /* _ARM_PARAM_H_ */
@


1.22
log
@Don't set MSGBUFSIZE here such that the setting in <machine/param.h> takes
effect.  This will let us have different settings on armv7 and zaurus and
also unconfuses this developer.

ok tom@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.21 2013/06/13 05:13:12 deraadt Exp $	*/
d58 1
a58 1
#define	NMBCLUSTERS	4096			/* map size, max cluster allocation */
@


1.21
log
@ovbcopy begone
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.20 2013/03/26 05:04:10 deraadt Exp $	*/
a58 4

#ifndef	MSGBUFSIZE
#define	MSGBUFSIZE	(1 * PAGE_SIZE)		/* default message buffer size */
#endif
@


1.20
log
@PGSHIFT and PGOFSET are now contained inside the kernel namespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.19 2013/03/25 17:46:24 deraadt Exp $	*/
a104 2

#define	ovbcopy bcopy
@


1.19
log
@ALIGNBYTES/ALIGN/ALIGNED_POINTER can move to the MI file.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.18 2013/03/23 16:12:20 deraadt Exp $	*/
a44 2
#define	PGSHIFT		PAGE_SHIFT
#define	PGOFSET		PAGE_MASK
d51 2
@


1.18
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.17 2011/09/20 22:02:13 miod Exp $	*/
a40 4

#define	ALIGNBYTES		_ALIGNBYTES
#define	ALIGN(p)		_ALIGN(p)
#define	ALIGNED_POINTER(p,t)	_ALIGNED_POINTER(p,t)
@


1.17
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 2
/*	$OpenBSD: param.h,v 1.16 2011/09/08 03:40:32 guenther Exp $	*/
/*	$NetBSD: param.h,v 1.9 2002/03/24 03:37:23 thorpej Exp $	*/
d38 3
a40 2
#define MACHINE_ARCH	"arm"
#define _MACHINE_ARCH	arm
d42 3
a44 5
/*
 * Machine dependent constants for ARM6+ processors
 */
/* These are defined in the Port File before it includes
 * this file. */
d46 2
a47 4
#define	PAGE_SHIFT	12		/* LOG2(NBPG) */
#define	PGSHIFT		12		/* LOG2(NBPG) */
#define	PAGE_SIZE	(1 << PAGE_SHIFT)	/* bytes/page */
#define	NBPG		(1 << PAGE_SHIFT)	/* bytes/page */
d49 5
a53 1
#define PGOFSET		(PAGE_SIZE - 1)
d56 5
a60 3
#define UPAGES          2               /* pages of u-area */
#define USPACE          (UPAGES * PAGE_SIZE) /* total size of u-area */
#define	USPACE_ALIGN	(0)		/* u-area alignment 0-none */
d62 4
a65 2
#ifndef MSGBUFSIZE
#define MSGBUFSIZE	PAGE_SIZE	/* default message buffer size */
d69 1
a69 1
 * Minimum and maximum sizes of the kernel malloc arena in PAGE_SIZE-sized
a71 1
#define	NKMEMPAGES_MIN_DEFAULT	((4 * 1024 * 1024) >> PAGE_SHIFT)
a74 1

d99 3
a101 3
#define FPCONTEXTSIZE			(0x100)
#define USPACE_SVC_STACK_TOP		(USPACE)
#define USPACE_SVC_STACK_BOTTOM		(USPACE_SVC_STACK_TOP - 0x1000)
d103 1
a103 1
#define USPACE_UNDEF_STACK_BOTTOM	(sizeof(struct user) + FPCONTEXTSIZE + 10)
a104 1
#ifdef _KERNEL
d107 1
a107 2
#define DELAY(x)	delay(x)
#endif
d110 1
a110 3
/*
 * Machine dependent constants for all ARM processors
 */
d112 3
a114 18
/*
 * For KERNEL code:
 *	MACHINE must be defined by the individual port.  This is so that
 *	uname returns the correct thing, etc.
 *
 *	MACHINE_ARCH may be defined by individual ports as a temporary
 *	measure while we're finishing the conversion to ELF.
 *
 * For non-KERNEL code:
 *	If ELF, MACHINE and MACHINE_ARCH are forced to "arm/armeb".
 */


#define	MID_MACHINE	MID_ARM6

#define	ALIGNBYTES		_ALIGNBYTES
#define	ALIGN(p)		_ALIGN(p)
#define	ALIGNED_POINTER(p,t)	_ALIGNED_POINTER(p,t)
d117 2
a118 6
#define STACKALIGNBYTES		(8 - 1)
#define STACKALIGN(p)		((u_long)(p) &~ STACKALIGNBYTES)

#define	DEV_BSHIFT	9		/* log2(DEV_BSIZE) */
#define	DEV_BSIZE	(1 << DEV_BSHIFT)
#define	BLKDEV_IOSIZE	2048
d120 1
a120 24
#ifndef MAXPHYS
#define	MAXPHYS		(64 * 1024)		/* max I/O transfer size */
#endif

/* pages ("clicks") to disk blocks */
#define	ctod(x)	((x) << (PAGE_SHIFT - DEV_BSHIFT))
#define	dtoc(x)	((x) >> (PAGE_SHIFT - DEV_BSHIFT))

#define	btodb(bytes)	 		/* calculates (bytes / DEV_BSIZE) */ \
	((bytes) >> DEV_BSHIFT)
#define	dbtob(db)			/* calculates (db * DEV_BSIZE) */ \
	((db) << DEV_BSHIFT)

/*
 * Constants related to network buffer management.
 */
#define	NMBCLUSTERS	4096		/* map size, max cluster allocation */

#define ovbcopy bcopy

#if defined(_KERNEL) && !defined(_LOCORE)
#include <sys/param.h>
#include <machine/cpu.h>
#endif
d122 1
a122 1
#endif	/* _ARM_PARAM_H_ */
@


1.16
log
@Provide namespace-safe alignment macros in <machine/_types.h>, with
compat names kept in <machine/param.h>.  In <sys/socket.h>, pull
in <sys/_types.h> instead of the namespace polluting <machine/param.h>
and completely eliminate __CMSG_ALIGN, replaced by _ALIGN

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.15 2011/04/07 15:45:16 miod Exp $	*/
d89 2
a90 2
 * if the FP emulators
 * The kernel stack should be at least 4K is size.
d93 2
a94 2
 * addresses at the addresses monitored by the diagnostic code for stack overflows
 *
@


1.15
log
@Make sure the ALIGN() macro uses u_long on all platforms for consistency, and
update the comment block accordingly.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.14 2010/11/20 20:15:28 miod Exp $	*/
d129 4
a132 14
/*
 * Round p (pointer or byte index) up to a correctly-aligned value
 * for all data types (int, long, ...).   The result is u_int and
 * must be cast to any desired pointer type.
 *
 * ALIGNED_POINTER is a boolean macro that checks whether an address
 * is valid to fetch data elements of type t from on this architecture.
 * This does not reflect the optimal alignment, just the possibility
 * (within reasonable limits). 
 *
 */
#define ALIGNBYTES		(sizeof(int) - 1)
#define ALIGN(p)		(((u_long)(p) + ALIGNBYTES) &~ ALIGNBYTES)
#define ALIGNED_POINTER(p,t)	((((u_long)(p)) & (sizeof(t)-1)) == 0)
@


1.14
log
@Do not attempt to include <machine/psl.h> when including this file from
assembly code (_KERNEL && _LOCORE)
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.13 2010/05/24 02:00:35 deraadt Exp $	*/
d141 1
a141 1
#define ALIGN(p)		(((u_int)(p) + ALIGNBYTES) &~ ALIGNBYTES)
d145 1
a145 1
#define STACKALIGN(p)		((u_int)(p) &~ STACKALIGNBYTES)
@


1.13
log
@there is no reason for one MAXPHYS definition to be different from all the others
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.12 2008/05/04 09:57:47 martin Exp $	*/
a157 1
/*#define	dtob(x)	((x) << DEV_BSHIFT)*/
d171 1
a171 4
#ifdef _KERNEL
#ifdef _LOCORE
#include <machine/psl.h>
#else
a173 1
#endif
@


1.12
log
@convert arm and mips64 platforms to ptoa/atop

tested by maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.11 2007/05/28 21:02:49 thib Exp $	*/
d152 1
a152 1
#define	MAXPHYS		65536		/* max I/O transfer size */
@


1.11
log
@Move the MSIZE, MCLSHIFT, MCLBYTES and the MCLOFSET
mbuf constants from MD param.h to MI param.h.
Besides being the same on every arch, things will
most probly break if any arch has different values
then the others.

The NMBCLUSTERS constants needs to be MD though;

ok miod@@,krw@@,claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.10 2006/03/19 01:47:23 martin Exp $	*/
a158 5

#define	ctob(x)	((x) << PAGE_SHIFT)

/* bytes to pages */
#define	btoc(x)	(((x) + PAGE_MASK) >> PAGE_SHIFT)
@


1.10
log
@remove unused bdbtofsb(bn) macro

found by drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.9 2005/11/09 18:08:37 martin Exp $	*/
d172 1
a172 9
 * MCLBYTES must be no larger than NBPG (the software page size), and,
 * on machines that exchange pages of input or output buffers with mbuf
 * clusters (MAPPED_MBUFS), MCLBYTES must also be an integral multiple
 * of the hardware page size.
 */
#define	MSIZE		256		/* size of an mbuf */
#define	MCLSHIFT	11		/* convert bytes to m_buf clusters */
					/* 2K cluster can hold Ether frame */
#define	MCLBYTES	(1 << MCLSHIFT)	/* size of a m_buf cluster */
@


1.9
log
@use atop() and ptoa()

tested by jolan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.8 2005/10/21 15:43:01 martin Exp $	*/
a168 8

/*
 * Map a ``block device block'' to a file system block.
 * This should be device dependent, and should use the bsize
 * field from the disk label.
 * For now though just use DEV_BSIZE.
 */
#define	bdbtofsb(bn)	((bn) / (BLKDEV_IOSIZE / DEV_BSIZE))
@


1.8
log
@remove unused arm_trunc_page() macro

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.7 2005/09/12 23:05:03 miod Exp $	*/
a101 3

#define arm_btop(x)			((x) >> PAGE_SHIFT)
#define arm_ptob(x)			((x) << PAGE_SHIFT)
@


1.7
log
@Change the NKMEMPAGES range to 4-64MB for 32bit arches, and 8-128MB for 64bit
arches; except on sparc where the range is 4-8 for !sun4m and 4-64 for sun4m,
selected at runtime.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.6 2005/07/31 15:31:12 miod Exp $	*/
d105 1
a105 2
#define arm_trunc_page(x)		((unsigned)(x) & ~PAGE_MASK)
    
@


1.6
log
@Get rid of unused SINCR and SSIZE constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.5 2004/08/06 22:31:30 mickey Exp $	*/
d68 2
a69 2
#define	NKMEMPAGES_MIN_DEFAULT	((6 * 1024 * 1024) >> PAGE_SHIFT)
#define	NKMEMPAGES_MAX_DEFAULT	((7 * 1024 * 1024) >> PAGE_SHIFT)
@


1.5
log
@provide md USPACE_ALIGN zero on all but mips; deradat@@ pefo@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.4 2004/05/19 03:17:07 drahn Exp $	*/
a55 2
#define SSIZE           1               /* initial stack size/NBPG */
#define SINCR           1               /* increment of stack/NBPG */
@


1.4
log
@de __P of sys/arch/arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.3 2004/04/19 22:55:48 deraadt Exp $	*/
d60 1
@


1.3
log
@remove the GATEWAY junk thingy; at the same time, select a new fat
cluster value that noone will really need to crank.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.2 2004/02/06 17:30:38 drahn Exp $	*/
d110 1
a110 1
void	delay __P((unsigned));
@


1.2
log
@fix machine/machine_arch, machine_arch should be arm for all arm systems
and machine needs to be not set by arch/arm, but by cats.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.1 2004/02/01 05:09:49 drahn Exp $	*/
a64 8
#ifndef NMBCLUSTERS
#ifdef GATEWAY
#define	NMBCLUSTERS	2048		/* map size, max cluster allocation */
#else
#define	NMBCLUSTERS	1024		/* map size, max cluster allocation */
#endif
#endif

a190 2

#ifndef MCLSHIFT
a192 2
#endif	/* MCLSHIFT */

d194 1
@


1.2.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 2
a37 2
#ifndef	_ARM_ARM_PARAM_H_
#define	_ARM_ARM_PARAM_H_
d39 2
a138 25
#if defined(_KERNEL)
#ifndef MACHINE_ARCH			/* XXX For now */
#ifndef __ARMEB__
#define	_MACHINE_ARCH	arm
#define	MACHINE_ARCH	"arm"
#else
#define	_MACHINE_ARCH	armeb
#define	MACHINE_ARCH	"armeb"
#endif /* __ARMEB__ */
#endif /* MACHINE_ARCH */
#elif defined(__ELF__)
#undef _MACHINE
#undef MACHINE
#undef _MACHINE_ARCH
#undef MACHINE_ARCH
#define	_MACHINE	arm
#define	MACHINE		"arm"
#ifndef __ARMEB__
#define	_MACHINE_ARCH	arm
#define	MACHINE_ARCH	"arm"
#else
#define	_MACHINE_ARCH	armeb
#define	MACHINE_ARCH	"armeb"
#endif /* __ARMEB__ */
#endif /* __ELF__ */
d218 1
a218 1
#endif	/* _ARM_ARM_PARAM_H_ */
@


1.2.2.2
log
@Merge with the trunk
@
text
@d36 2
a37 2
#ifndef	_ARM_PARAM_H_
#define	_ARM_PARAM_H_
a38 2
#define MACHINE_ARCH	"arm"
#define _MACHINE_ARCH	arm
d63 8
d116 1
a116 1
void	delay (unsigned);
d137 25
d222 2
d226 2
a228 1
#define	NMBCLUSTERS	4096		/* map size, max cluster allocation */
d241 1
a241 1
#endif	/* _ARM_PARAM_H_ */
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: param.h,v 1.4 2004/01/29 16:17:16 drahn Exp $	*/
d36 2
a37 2
#ifndef	_ARM_ARM_PARAM_H_
#define	_ARM_ARM_PARAM_H_
d39 2
a138 25
#if defined(_KERNEL)
#ifndef MACHINE_ARCH			/* XXX For now */
#ifndef __ARMEB__
#define	_MACHINE_ARCH	arm
#define	MACHINE_ARCH	"arm"
#else
#define	_MACHINE_ARCH	armeb
#define	MACHINE_ARCH	"armeb"
#endif /* __ARMEB__ */
#endif /* MACHINE_ARCH */
#elif defined(__ELF__)
#undef _MACHINE
#undef MACHINE
#undef _MACHINE_ARCH
#undef MACHINE_ARCH
#define	_MACHINE	arm
#define	MACHINE		"arm"
#ifndef __ARMEB__
#define	_MACHINE_ARCH	arm
#define	MACHINE_ARCH	"arm"
#else
#define	_MACHINE_ARCH	armeb
#define	MACHINE_ARCH	"armeb"
#endif /* __ARMEB__ */
#endif /* __ELF__ */
d218 1
a218 1
#endif	/* _ARM_ARM_PARAM_H_ */
@

