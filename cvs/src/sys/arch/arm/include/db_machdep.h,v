head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.22
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.18
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2016.04.27.11.10.48;	author mpi;	state Exp;
branches;
next	1.10;
commitid	57btDderNGPG4fjG;

1.10
date	2016.02.27.13.08.06;	author mpi;	state Exp;
branches;
next	1.9;
commitid	hnv9KfQtxhCytAnd;

1.9
date	2014.03.16.20.31.46;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.10.22.08.15;	author patrick;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.20.22.02.13;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.27.19.57.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.19.15.23.34;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.05.15.49.30;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.03.16.49.56;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.19.03.17.07;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.02;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.06.05.23.10.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@G/C DDB_REGS.
@
text
@/*	$OpenBSD: db_machdep.h,v 1.10 2016/02/27 13:08:06 mpi Exp $	*/
/*	$NetBSD: db_machdep.h,v 1.5 2001/11/22 18:00:00 thorpej Exp $	*/

/*
 * Copyright (c) 1996 Scott K Stevens
 * 
 * Mach Operating System
 * Copyright (c) 1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#ifndef	_ARM_DB_MACHDEP_H_
#define	_ARM_DB_MACHDEP_H_

/*
 * Machine-dependent defines for new kernel debugger.
 */

#include <uvm/uvm_extern.h>
#include <arm/armreg.h>
#include <machine/frame.h>
#include <machine/trap.h>

/* end of mangling */

typedef	vaddr_t		db_addr_t;	/* address - unsigned */
typedef	long		db_expr_t;	/* expression - signed */

typedef trapframe_t db_regs_t;

extern db_regs_t		ddb_regs;	/* register state */

#define	PC_REGS(regs)	((db_addr_t)(regs)->tf_pc)
#define	SET_PC_REGS(regs, value)	(regs)->tf_pc = (register_t)(value)

#define	BKPT_INST	(KERNEL_BREAKPOINT)	/* breakpoint instruction */
#define	BKPT_SIZE	(INSN_SIZE)		/* size of breakpoint inst */
#define	BKPT_SET(inst)	(BKPT_INST)

/*#define FIXUP_PC_AFTER_BREAK(regs)	((regs)->tf_pc -= BKPT_SIZE)*/

#define T_BREAKPOINT			(1)

#define	IS_BREAKPOINT_TRAP(type, code)	((type) == T_BREAKPOINT)
#define IS_WATCHPOINT_TRAP(type, code)	(0)

#define	inst_trap_return(ins)	(0)
/* ldmxx reg, {..., pc}
					    01800000  stack mode
					    000f0000  register
					    0000ffff  register list */
/* mov pc, reg
					    0000000f  register */
#define	inst_return(ins)	(((ins) & 0x0e108000) == 0x08108000 || \
				 ((ins) & 0x0ff0fff0) == 0x01a0f000)
/* bl ...
					    00ffffff  offset>>2 */
#define	inst_call(ins)		(((ins) & 0x0f000000) == 0x0b000000)
/* b ...
					    00ffffff  offset>>2 */
/* ldr pc, [pc, reg, lsl #2]
					    0000000f  register */
#define	inst_branch(ins)	(((ins) & 0x0f000000) == 0x0a000000 || \
				 ((ins) & 0x0fdffff0) == 0x079ff100)
#define inst_unconditional_flow_transfer(ins)	\
	((((ins) & INSN_COND_MASK) == INSN_COND_AL) && \
	 (inst_branch(ins) || inst_call(ins) || inst_return(ins)))

#define getreg_val			(0)
#define next_instr_address(pc, bd)	((bd) ? (pc) : ((pc) + INSN_SIZE))

#define DB_MACHINE_COMMANDS

#define SOFTWARE_SSTEP

db_addr_t	db_branch_taken(u_int inst, db_addr_t pc, db_regs_t *regs);
int db_ktrap (int, db_regs_t *);
void db_machine_init (void);

#define branch_taken(ins, pc, fun, regs) \
	db_branch_taken((ins), (pc), (regs))

void db_show_frame_cmd(db_expr_t, int, db_expr_t, char *);

#endif	/* _ARM_DB_MACHDEP_H_ */
@


1.10
log
@Rename kdb_trap() into db_ktrap().

The goal is to include it in the list of functions that must not be
instrumented.  All ddb(8) functions should be in this list and have
their names start with 'db_'.

ok visa@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.9 2014/03/16 20:31:46 guenther Exp $	*/
a51 1
#define	DDB_REGS	(&ddb_regs)
@


1.9
log
@DDB supports ELF symbols are all archs, and it's always the same as the
native size, so eliminate the #defines.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.8 2013/05/10 22:08:15 patrick Exp $	*/
d98 1
a98 1
int kdb_trap (int, db_regs_t *);
@


1.8
log
@whitespaces
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.7 2011/09/20 22:02:13 miod Exp $	*/
a102 3

#define DB_ELF_SYMBOLS
#define DB_ELFSIZE 32
@


1.7
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.6 2010/11/27 19:57:23 miod Exp $	*/
d102 1
a102 1
				db_branch_taken((ins), (pc), (regs))
d107 1
a107 1
void db_show_frame_cmd	(db_expr_t, int, db_expr_t, char *);
@


1.6
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5 2005/04/19 15:23:34 miod Exp $	*/
a53 4
#ifdef __PROG26
#define	PC_REGS(regs)	((db_addr_t)(regs)->tf_r15 & R15_PC)
#define PC_ADVANCE(regs) ((regs)->tf_r15 += 4)
#else
a55 1
#endif
@


1.5
log
@Nuke DB_NO_AOUT, and have platforms with a.out symbols explicitely provide
DB_AOUT_SYMBOLS.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.4 2005/01/05 15:49:30 miod Exp $	*/
a90 2
#define inst_load(ins)		(0)
#define inst_store(ins)		(0)
@


1.4
log
@Provide SET_PC_REGS.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.3 2005/01/03 16:49:56 miod Exp $	*/
a112 1
#define DB_NO_AOUT
@


1.3
log
@Add "show panic" command to ddb, to easily retrieve the panic message.
Will hopefully bring us better panic reports.

From Joris Vink.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.2 2004/05/19 03:17:07 drahn Exp $	*/
d59 1
@


1.2
log
@de __P of sys/arch/arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.1 2004/02/01 05:09:49 drahn Exp $	*/
a113 1
void db_show_panic_cmd	(db_expr_t, int, db_expr_t, char *);
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.3 2004/01/29 16:17:16 drahn Exp $	*/
d104 2
a105 2
int kdb_trap __P((int, db_regs_t *));
void db_machine_init __P((void));
d114 2
a115 2
void db_show_panic_cmd	__P((db_expr_t, int, db_expr_t, char *));
void db_show_frame_cmd	__P((db_expr_t, int, db_expr_t, char *));
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@Merge with the trunk
@
text
@d104 2
a105 2
int kdb_trap (int, db_regs_t *);
void db_machine_init (void);
d114 2
a115 2
void db_show_panic_cmd	(db_expr_t, int, db_expr_t, char *);
void db_show_frame_cmd	(db_expr_t, int, db_expr_t, char *);
@


