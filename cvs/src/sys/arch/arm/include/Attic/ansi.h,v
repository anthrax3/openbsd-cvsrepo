head	1.6;
access;
symbols
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	SMP:1.4.0.2;
locks; strict;
comment	@ * @;


1.6
date	2006.01.06.18.50.08;	author millert;	state dead;
branches;
next	1.5;

1.5
date	2005.12.14.16.30.03;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.05.13.42.19;	author drahn;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2004.02.03.20.23.17;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.03.17.21.26;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches;
next	;

1.4.2.1
date	2004.02.19.10.48.01;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2004.06.05.23.10.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge machine/ansi.h and machine/types.h into machine/_types.h and
rename the types using the __ protected namespace (e.g. __size_t).
Idea from FreeBSD.
@
text
@/*	$OpenBSD: ansi.h,v 1.5 2005/12/14 16:30:03 millert Exp $	*/
/*	$NetBSD: ansi.h,v 1.4 2003/03/02 22:18:17 tshiozak Exp $	*/

/*
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)ansi.h	8.2 (Berkeley) 1/4/94
 */

#ifndef	_ANSI_H_
#define	_ANSI_H_

#if 0
#include <machine/types.h>
#endif

/*
 * Types which are fundamental to the implementation and may appear in
 * more than one standard header are defined here.  Standard headers
 * then use:
 *	#ifdef	_BSD_SIZE_T_
 *	typedef	_BSD_SIZE_T_ size_t;
 *	#undef	_BSD_SIZE_T_
 *	#endif
 */
#define	_BSD_CLOCK_T_		int		/* clock() */
#define	_BSD_PTRDIFF_T_		int		/* ptr1 - ptr2 */
#define	_BSD_SIZE_T_		unsigned int	/* sizeof() */
#define	_BSD_SSIZE_T_		int		/* byte count or error */
#define	_BSD_TIME_T_		int		/* time() */
#if defined(__GNUC__) && __GNUC__ >= 3
#define	_BSD_VA_LIST_		__builtin_va_list	/* va_list */
#else
#define _BSD_VA_LIST_   char * 
#endif
#define	_BSD_CLOCKID_T_		int		/* clockid_t */
#define	_BSD_TIMER_T_		int		/* timer_t */
#define	_BSD_SUSECONDS_T_	int		/* suseconds_t */
#define	_BSD_USECONDS_T_	unsigned int	/* useconds_t */

/*
 * NOTE: rune_t is not covered by ANSI nor other standards, and should not
 * be instantiated outside of lib/libc/locale.  use wchar_t.
 *
 * Runes (wchar_t) is declared to be an ``int'' instead of the more natural
 * ``unsigned long'' or ``long''.  Two things are happening here.  It is not
 * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
 * it looks like 10646 will be a 31 bit standard.  This means that if your
 * ints cannot hold 32 bits, you will be in trouble.  The reason an int was
 * chosen over a long is that the is*() and to*() routines take ints (says
 * ANSI C), but they use _RUNE_T_ instead of int.  By changing it here, you
 * lose a bit of ANSI conformance, but your programs will still work.
 *    
 * Note that _WCHAR_T_ and _RUNE_T_ must be of the same type.  When wchar_t
 * and rune_t are typedef'd, _WCHAR_T_ will be undef'd, but _RUNE_T remains
 * defined for ctype.h.
 */
#define	_BSD_WCHAR_T_		int		/* wchar_t */
#define	_BSD_WINT_T_		int		/* wint_t */
#define	_BSD_RUNE_T_		int		/* rune_t */
#define _BSD_WCTRANS_T_		void *		/* wctrans_t */
#define _BSD_WCTYPE_T_		void *		/* wctype_t */

/*
 * mbstate_t is an opaque object to keep conversion state, during multibyte
 * stream conversions.  The content must not be referenced by user programs.
 */
typedef union {
	char __mbstate8[128];
	long long __mbstateL;	/* for alignment */
} __mbstate_t;
#define	_BSD_MBSTATE_T_		__mbstate_t	/* mbstate_t */

/*
 * We describe off_t here so its declaration can be visible to
 * stdio without pulling in all of <sys/type.h>, thus appeasing ANSI.
 */
#define _BSD_OFF_T_	long long		/* file offset */

#endif	/* _ANSI_H_ */
@


1.5
log
@Make clock_t consistent across platforms as a 32 bit int.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ansi.h,v 1.4 2004/02/05 13:42:19 drahn Exp $	*/
@


1.4
log
@xlint compatible headers. (non-gcc)
@
text
@d1 1
a1 1
/*	$OpenBSD: ansi.h,v 1.3 2004/02/03 20:23:17 drahn Exp $	*/
d51 1
a51 1
#define	_BSD_CLOCK_T_		unsigned long	/* clock() */
@


1.4.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a50 7
#ifdef __ELF__
#define	_BSD_CLOCK_T_		unsigned int	/* clock() */
#define	_BSD_PTRDIFF_T_		long int	/* ptr1 - ptr2 */
#define	_BSD_SIZE_T_		unsigned long int /* sizeof() */
#define	_BSD_SSIZE_T_		long int	/* byte count or error */
#define	_BSD_TIME_T_		int		/* time() */
#else
d55 5
a59 1
#define	_BSD_TIME_T_		long		/* time() */
a60 1
#define	_BSD_VA_LIST_		__builtin_va_list	/* va_list */
@


1.4.2.2
log
@Merge with the trunk
@
text
@d51 7
d62 2
a63 2
#define	_BSD_TIME_T_		int		/* time() */
#if defined(__GNUC__) && __GNUC__ >= 3
a64 3
#else
#define _BSD_VA_LIST_   char * 
#endif
@


1.3
log
@Use the correct type for time_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: ansi.h,v 1.2 2004/02/03 17:21:26 drahn Exp $	*/
d56 1
d58 3
@


1.2
log
@Use the same values on other openbsd 32 bit archs for these for now.
These agree with the values used by the compiler.
@
text
@d1 1
a1 1
/*	$OpenBSD: ansi.h,v 1.1 2004/02/01 05:09:49 drahn Exp $	*/
d55 1
a55 1
#define	_BSD_TIME_T_		long		/* time() */
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: ansi.h,v 1.4 2004/01/29 16:17:16 drahn Exp $	*/
a50 7
#ifdef __ELF__
#define	_BSD_CLOCK_T_		unsigned int	/* clock() */
#define	_BSD_PTRDIFF_T_		long int	/* ptr1 - ptr2 */
#define	_BSD_SIZE_T_		unsigned long int /* sizeof() */
#define	_BSD_SSIZE_T_		long int	/* byte count or error */
#define	_BSD_TIME_T_		int		/* time() */
#else
a55 1
#endif
@

