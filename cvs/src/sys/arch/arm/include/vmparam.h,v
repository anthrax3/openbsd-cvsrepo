head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.4
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.18
date	2017.10.01.17.05.50;	author naddy;	state Exp;
branches;
next	1.17;
commitid	vAOM5TLW2NF67X32;

1.17
date	2017.02.15.15.14.23;	author jca;	state Exp;
branches;
next	1.16;
commitid	whmoGZ0jQZit7Ps2;

1.16
date	2015.11.01.20.09.59;	author miod;	state Exp;
branches;
next	1.15;
commitid	sHllVPiKPJBfwmTJ;

1.15
date	2015.05.10.15.56.28;	author jsg;	state Exp;
branches;
next	1.14;
commitid	MKYLBBkRhYmhiqiC;

1.14
date	2014.09.30.01.34.34;	author tobiasu;	state Exp;
branches;
next	1.13;
commitid	rHmzgI5sZhvw8Km5;

1.13
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2014.01.26.15.43.02;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2014.01.24.22.32.29;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.01.24.05.21.19;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.26.20.39.21;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.22.20.28.30;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.24.21.24.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.28.01.36.38;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@set MAXSSIZ to the same value as on all other architectures (32MB)
ok deraadt@@
@
text
@/*	$OpenBSD: vmparam.h,v 1.17 2017/02/15 15:14:23 jca Exp $	*/
/*	$NetBSD: vmparam.h,v 1.18 2003/05/21 18:04:44 thorpej Exp $	*/

/*
 * Copyright (c) 2001, 2002 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _ARM_VMPARAM_H_
#define	_ARM_VMPARAM_H_

/*
 * Virtual Memory parameters common to all arm32 platforms.
 */

#define	USRSTACK	VM_MAXUSER_ADDRESS
#define	KERNBASE	VM_MAXUSER_ADDRESS

#define	MAXTSIZ		(64*1024*1024)		/* max text size */
#ifndef	DFLDSIZ
#define	DFLDSIZ		(128*1024*1024)		/* initial data size limit */
#endif
#ifndef	MAXDSIZ
#define	MAXDSIZ		(512*1024*1024)		/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/*
 * Size of SysV shared memory map
 */
#ifndef SHMMAXPGS
#define	SHMMAXPGS	1024
#endif

/*
 * While the ARM architecture defines Section mappings, large pages,
 * and small pages, the standard page size is (and will always be) 4K.
 */
#define	PAGE_SHIFT	12
#define	PAGE_SIZE	(1 << PAGE_SHIFT)	/* bytes/page */
#define	PAGE_MASK	(PAGE_SIZE - 1)

/*
 * Mach derived constants
 */
#define	VM_MIN_ADDRESS		((vaddr_t) PAGE_SIZE)
#define	VM_MAXUSER_ADDRESS	((vaddr_t) ARM_KERNEL_BASE)
#define	VM_MAX_ADDRESS		VM_MAXUSER_ADDRESS

#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t) ARM_KERNEL_BASE)

#endif /* _ARM_VMPARAM_H_ */
@


1.17
log
@Bump MAXTSIZ to 64M on arm.

Needed for ports/devel/llvm which builds large executables with a .text
section over 32M.  Remove the comment about the +/-32M limitation of
branch instructions, which can be lifted using other techniques
(eg cc -mlong-calls) and should not be enforced by the kernel.

ok guenther@@ patrick@@ jsg@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2015/11/01 20:09:59 miod Exp $	*/
d63 1
a63 1
#define	MAXSSIZ		(8*1024*1024)		/* max stack size */
@


1.16
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2015/05/10 15:56:28 jsg Exp $	*/
d49 1
a49 5
/*
 * Note that MAXTSIZ can't be larger than 32M, otherwise the compiler
 * would have to be changed to not generate "bl" instructions.
 */
#define	MAXTSIZ		(32*1024*1024)		/* max text size */
@


1.15
log
@VM_MAX_KERNEL_ADDRESS is the end of the kva range not the end of
addressable virtual memory space but arm ports were using a value of
0xffffffff for this.

Instead of using a shared VM_MAX_KERNEL_ADDRESS define add md
VM_KERNEL_SPACE_SIZE defines based on the KERNEL_VM_SIZE values
from the respective machdep.c files.

djm's novena was hitting "panic: bufinit: can't reserve VM for buffers"
without a similiar change.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2014/09/30 01:34:34 tobiasu Exp $	*/
a45 1
#define	USRTEXT		VM_MIN_ADDRESS
@


1.14
log
@Increase text segment size on Arm to 32MB

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2014/01/30 18:16:41 miod Exp $	*/
a95 1
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t) 0xffffffff)
@


1.13
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2014/01/26 15:43:02 miod Exp $	*/
d54 1
a54 1
#define	MAXTSIZ		(16*1024*1024)		/* max text size */
@


1.12
log
@Remove unnecessary <machine/pte.h> dependency.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2014/01/24 22:32:29 miod Exp $	*/
a45 2
#include <sys/lock.h>		/* struct simplelock */ 

a96 28

/*
 * pmap-specific data store in the vm_page structure.
 */
struct vm_page_md {
	struct pv_entry *pvh_list;		/* pv_entry list */
	struct simplelock pvh_slock;		/* lock on this head */
	int pvh_attrs;				/* page attributes */
	u_int uro_mappings;
	u_int urw_mappings;
	union {
		u_short s_mappings[2];	/* Assume kernel count <= 65535 */
		u_int i_mappings;
	} k_u;
#define	kro_mappings	k_u.s_mappings[0]
#define	krw_mappings	k_u.s_mappings[1]
#define	k_mappings	k_u.i_mappings
};

#define	VM_MDPAGE_INIT(pg)						\
do {									\
	(pg)->mdpage.pvh_list = NULL;					\
	simple_lock_init(&(pg)->mdpage.pvh_slock);			\
	(pg)->mdpage.pvh_attrs = 0;					\
	(pg)->mdpage.uro_mappings = 0;					\
	(pg)->mdpage.urw_mappings = 0;					\
	(pg)->mdpage.k_mappings = 0;					\
} while (/*CONSTCOND*/0)
@


1.11
log
@Remove _KERNEL guard around <sys/lock.h>, for userland to be able to
process the definition of struct vm_page_md.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2014/01/24 05:21:19 miod Exp $	*/
a46 3
#ifdef _KERNEL
#include <arm/pte.h>	/* pt_entry_t */
#endif /* _KERNEL */
@


1.10
log
@Do not protect struct vm_page_md with defined(_KERNEL), for userland uvm
grovellers need to know it to be able to get the right size for struct
vm_page.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2014/01/23 22:06:29 miod Exp $	*/
a41 2
#ifdef _KERNEL

d47 1
@


1.9
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2011/03/23 16:54:34 pirofti Exp $	*/
a103 2
#ifdef _KERNEL

a130 2

#endif /* _KERNEL */
@


1.8
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2010/12/15 05:30:19 tedu Exp $	*/
a108 1
#define	__HAVE_VM_PAGE_MD
@


1.7
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2010/11/26 20:39:21 miod Exp $	*/
d39 2
a40 2
#ifndef _ARM_ARM_VMPARAM_H_
#define	_ARM_ARM_VMPARAM_H_
d137 1
a137 1
#endif /* _ARM_ARM_VMPARAM_H_ */
@


1.6
log
@Oops, removed a few lines too many in previous change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2010/11/22 20:28:30 miod Exp $	*/
d66 3
@


1.5
log
@Remove unused VM_MAX_KERNEL_BUF define.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2008/06/24 21:24:03 deraadt Exp $	*/
d100 2
@


1.4
log
@On user/kernel shared page table machines, do not let processes map their
own page 0, as discussed with miod (and many others previously, including
art and toby).  On sparc, make this __LDPGSZ because PAGE_SIZE is non-constant
ok miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2005/04/11 15:13:01 deraadt Exp $	*/
a99 11

#ifdef _KERNEL

/* XXX max. amount of KVM to be used by buffers. */
#ifndef VM_MAX_KERNEL_BUF
extern vaddr_t virtual_avail;
extern vaddr_t virtual_end;

#define	VM_MAX_KERNEL_BUF	\
	((virtual_end - virtual_avail) * 4 / 10)
#endif
@


1.3
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 2004/11/28 01:36:38 mickey Exp $	*/
d94 1
a94 1
#define	VM_MIN_ADDRESS		((vaddr_t) 0x00001000)
@


1.2
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2004/02/01 05:09:49 drahn Exp $	*/
d73 2
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2004/01/29 16:17:16 drahn Exp $	*/
a54 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

