head	1.42;
access;
symbols
	OPENBSD_6_2:1.42.0.4
	OPENBSD_6_2_BASE:1.42
	OPENBSD_6_1:1.39.0.4
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.30.0.2
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.42
date	2017.08.20.04.22.57;	author jsg;	state Exp;
branches;
next	1.41;
commitid	HHXFz9lYPZ3fFREd;

1.41
date	2017.04.27.22.41.46;	author kettenis;	state Exp;
branches;
next	1.40;
commitid	rgPwijkvyGZe1DHZ;

1.40
date	2017.04.24.18.15.16;	author kettenis;	state Exp;
branches;
next	1.39;
commitid	sYOtYxenlNxod94N;

1.39
date	2017.01.04.00.40.49;	author jsg;	state Exp;
branches;
next	1.38;
commitid	wyJlaIFS0yAv07lJ;

1.38
date	2017.01.01.09.54.44;	author jsg;	state Exp;
branches;
next	1.37;
commitid	Lr3h9kcV9hjBOnKS;

1.37
date	2016.08.25.08.17.57;	author kettenis;	state Exp;
branches;
next	1.36;
commitid	Vhvux0GuX4k61PiS;

1.36
date	2016.08.24.13.09.52;	author kettenis;	state Exp;
branches;
next	1.35;
commitid	Emb0lwjQLbMxmqQS;

1.35
date	2016.08.14.11.30.54;	author jsg;	state Exp;
branches;
next	1.34;
commitid	3XHAPSr5dKOYN1hw;

1.34
date	2016.08.14.10.36.47;	author kettenis;	state Exp;
branches;
next	1.33;
commitid	McCOzF71X4patDyh;

1.33
date	2016.08.06.16.46.25;	author kettenis;	state Exp;
branches;
next	1.32;
commitid	CGAfg7FH1Wq4zBj1;

1.32
date	2016.07.31.06.24.38;	author jsg;	state Exp;
branches;
next	1.31;
commitid	cHTUmn3erNchuKuB;

1.31
date	2016.07.31.03.49.51;	author jsg;	state Exp;
branches;
next	1.30;
commitid	GGqGemCoVm51bBbM;

1.30
date	2016.04.04.09.06.28;	author patrick;	state Exp;
branches;
next	1.29;
commitid	ZuB0flUUaGbKwG8C;

1.29
date	2016.04.04.00.41.36;	author jsg;	state Exp;
branches;
next	1.28;
commitid	iyCoBStoO0PiDqbe;

1.28
date	2016.03.22.23.35.01;	author patrick;	state Exp;
branches;
next	1.27;
commitid	RkEnvixfXW2bEpue;

1.27
date	2016.03.22.23.28.02;	author patrick;	state Exp;
branches;
next	1.26;
commitid	bAxWaXK3mkjM56Iw;

1.26
date	2016.03.22.11.18.17;	author patrick;	state Exp;
branches;
next	1.25;
commitid	YjNMWFHczdMD8Xoi;

1.25
date	2016.03.22.01.32.41;	author jsg;	state Exp;
branches;
next	1.24;
commitid	ZLPqrkaI2Rq7F7B0;

1.24
date	2016.03.19.09.51.24;	author patrick;	state Exp;
branches;
next	1.23;
commitid	E8GUcpv6nbDyd4Ml;

1.23
date	2016.03.19.09.47.54;	author patrick;	state Exp;
branches;
next	1.22;
commitid	WySdpoZsQMX20beB;

1.22
date	2016.03.19.09.36.57;	author patrick;	state Exp;
branches;
next	1.21;
commitid	PJBEdVboqiwjXPXy;

1.21
date	2016.03.18.13.16.02;	author jsg;	state Exp;
branches;
next	1.20;
commitid	RKG2cJTBtpcdjKgj;

1.20
date	2016.03.18.06.54.21;	author jsg;	state Exp;
branches;
next	1.19;
commitid	82aYg3LAWI4D5T1j;

1.19
date	2016.03.02.23.46.48;	author jsg;	state Exp;
branches;
next	1.18;
commitid	wILX5O7EbeD3Y0fm;

1.18
date	2016.01.31.00.14.50;	author jsg;	state Exp;
branches;
next	1.17;
commitid	pbLjedMudUFrVMk6;

1.17
date	2016.01.23.15.38.48;	author jsg;	state Exp;
branches;
next	1.16;
commitid	aAkwV289kfxjTudu;

1.16
date	2015.05.29.05.48.07;	author jsg;	state Exp;
branches;
next	1.15;
commitid	wBu16DsvoGvtioAP;

1.15
date	2015.01.17.08.00.41;	author jsg;	state Exp;
branches;
next	1.14;
commitid	TMXByOoVIpKYrjLx;

1.14
date	2013.11.26.20.33.11;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.06.23.15.43;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2013.04.28.13.27.13;	author patrick;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.18.00.20.20;	author patrick;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.20.22.02.13;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.17.21.49.33;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.03.05.25.58;	author kevlo;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.24.04.56.19;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.11.12.50.23;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.08.02.57.32;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.11.02.38.14;	author kevlo;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.29.17.01.42;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.30.23.30.14;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Add Cortex-A55 and Cortex-A75 part numbers.
@
text
@/*	$OpenBSD: armreg.h,v 1.41 2017/04/27 22:41:46 kettenis Exp $	*/
/*	$NetBSD: armreg.h,v 1.27 2003/09/06 08:43:02 rearnsha Exp $	*/

/*
 * Copyright (c) 1998, 2001 Ben Harris
 * Copyright (c) 1994-1996 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * This code is derived from software written for Brini by Mark Brinicombe
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Brini.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BRINI ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL BRINI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _ARM_ARMREG_H
#define _ARM_ARMREG_H

/*
 * ARM Process Status Register
 *
 * The picture in early ARM manuals looks like this:
 *       3 3 2 2 2 2                            
 *       1 0 9 8 7 6                                   8 7 6 5 4       0
 *      +-+-+-+-+-+-------------------------------------+-+-+-+---------+
 *      |N|Z|C|V|Q|                reserved             |I|F|T|M M M M M|
 *      | | | | | |                                     | | | |4 3 2 1 0|
 *      +-+-+-+-+-+-------------------------------------+-+-+-+---------+
 *
 * The picture in the ARMv7-A manuals looks like this:
 *       3 3 2 2 2 2 2 2 2     2 1     1 1         1
 *       1 0 9 8 7 6 5 4 3     0 9     6 5         0 9 8 7 6 5 4       0
 *      +-+-+-+-+-+---+-+-------+-------+-----------+-+-+-+-+-+---------+
 *      |N|Z|C|V|Q|I I|J|reserv-|G G G G|I I I I I I|E|A|I|F|T|M M M M M|
 *      | | | | | |T T| |ed     |E E E E|T T T T T T| | | | | |         |
 *      | | | | | |1 0| |       |3 2 1 0|7 6 5 4 3 2| | | | | |4 3 2 1 0|
 *      +-+-+-+-+-+---+-+-------+-------+-----------+-+-+-+-+-+---------+
 *      | flags 'f'     | status 's'    | extension 'x' | control 'c'   |
 */

#define PSR_FLAGS 0xf0000000	/* flags */
#define PSR_N	(1U << 31)	/* negative */
#define PSR_Z	(1 << 30)	/* zero */
#define PSR_C	(1 << 29)	/* carry */
#define PSR_V	(1 << 28)	/* overflow */

#define PSR_Q	(1 << 27)	/* saturation */

#define PSR_A	(1 << 8)	/* Asynchronous abort disable */
#define PSR_I	(1 << 7)	/* IRQ disable */
#define PSR_F	(1 << 6)	/* FIQ disable */

#define PSR_T	(1 << 5)	/* Thumb state */
#define PSR_J	(1 << 24)	/* Java mode */

#define PSR_MODE	0x0000001f	/* mode mask */
#define PSR_USR26_MODE	0x00000000
#define PSR_FIQ26_MODE	0x00000001
#define PSR_IRQ26_MODE	0x00000002
#define PSR_SVC26_MODE	0x00000003
#define PSR_USR32_MODE	0x00000010
#define PSR_FIQ32_MODE	0x00000011
#define PSR_IRQ32_MODE	0x00000012
#define PSR_SVC32_MODE	0x00000013
#define PSR_MON32_MODE	0x00000016
#define PSR_ABT32_MODE	0x00000017
#define PSR_HYP32_MODE	0x0000001a
#define PSR_UND32_MODE	0x0000001b
#define PSR_SYS32_MODE	0x0000001f
#define PSR_32_MODE	0x00000010

#define PSR_IN_USR_MODE(psr)	(!((psr) & 3))		/* XXX */

/*
 * Co-processor 15:  The system control co-processor.
 */

#define ARM_CP15_CPU_ID		0

/*
 * The CPU ID register is theoretically structured, but the definitions of
 * the fields keep changing.
 */

/* The high-order byte is always the implementor */
#define CPU_ID_IMPLEMENTOR_MASK	0xff000000
#define CPU_ID_ARM_LTD		0x41000000 /* 'A' */

#define CPU_ID_ARCH_MASK	0x000f0000
#define CPU_ID_ARCH_V6		0x00070000
#define CPU_ID_ARCH_CPUID	0x000f0000
#define CPU_ID_VARIANT_MASK	0x00f00000

/* Next three nybbles are part number */
#define CPU_ID_PARTNO_MASK	0x0000fff0

/* And finally, the revision number. */
#define CPU_ID_REVISION_MASK	0x0000000f

/* Individual CPUs are probably best IDed by everything but the revision. */
#define CPU_ID_CPU_MASK		0xfffffff0
#define CPU_ID_CORTEX_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A5	0x410fc050
#define CPU_ID_CORTEX_A5_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A7	0x410fc070
#define CPU_ID_CORTEX_A7_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A8_R1	0x411fc080
#define CPU_ID_CORTEX_A8_R2	0x412fc080
#define CPU_ID_CORTEX_A8_R3	0x413fc080
#define CPU_ID_CORTEX_A8	0x410fc080
#define CPU_ID_CORTEX_A8_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A9	0x410fc090
#define CPU_ID_CORTEX_A9_R1	0x411fc090
#define CPU_ID_CORTEX_A9_R2	0x412fc090
#define CPU_ID_CORTEX_A9_R3	0x413fc090
#define CPU_ID_CORTEX_A9_R4	0x414fc090
#define CPU_ID_CORTEX_A9_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A12	0x410fc0d0
#define CPU_ID_CORTEX_A12_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A15	0x410fc0f0
#define CPU_ID_CORTEX_A15_R1	0x411fc0f0
#define CPU_ID_CORTEX_A15_R2	0x412fc0f0
#define CPU_ID_CORTEX_A15_R3	0x413fc0f0
#define CPU_ID_CORTEX_A15_R4	0x414fc0f0
#define CPU_ID_CORTEX_A15_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A17	0x410fc0e0
#define CPU_ID_CORTEX_A17_R1	0x411fc0e0
#define CPU_ID_CORTEX_A17_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A32	0x410fd010
#define CPU_ID_CORTEX_A32_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A35	0x410fd040
#define CPU_ID_CORTEX_A35_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A53	0x410fd030
#define CPU_ID_CORTEX_A53_R1	0x411fd030
#define CPU_ID_CORTEX_A53_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A55	0x410fd050
#define CPU_ID_CORTEX_A55_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A57	0x410fd070
#define CPU_ID_CORTEX_A57_R1	0x411fd070
#define CPU_ID_CORTEX_A57_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A72	0x410fd080
#define CPU_ID_CORTEX_A72_R1	0x411fd080
#define CPU_ID_CORTEX_A72_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A73	0x410fd090
#define CPU_ID_CORTEX_A73_MASK	0xff0ffff0
#define CPU_ID_CORTEX_A75	0x410fd0a0
#define CPU_ID_CORTEX_A75_MASK	0xff0ffff0

/* CPUID on >= v7 */
#define ID_MMFR0_VMSA_MASK	0x0000000f

#define VMSA_V7			3
#define VMSA_V7_PXN		4
#define VMSA_V7_LDT		5

/*
 * Post-ARM3 CP15 registers:
 *
 *	1	Control register
 *
 *	2	Translation Table Base
 *
 *	3	Domain Access Control
 *
 *	4	Reserved
 *
 *	5	Fault Status
 *
 *	6	Fault Address
 *
 *	7	Cache/write-buffer Control
 *
 *	8	TLB Control
 *
 *	9	Cache Lockdown
 *
 *	10	TLB Lockdown
 *
 *	11	Reserved
 *
 *	12	Reserved
 *
 *	13	Process ID (for FCSE)
 *
 *	14	Reserved
 *
 *	15	Implementation Dependent
 */

/* Some of the definitions below need cleaning up for V3/V4 architectures */

/* CPU control register (CP15 register 1) */
#define CPU_CONTROL_MMU_ENABLE	0x00000001 /* M: MMU/Protection unit enable */
#define CPU_CONTROL_AFLT_ENABLE	0x00000002 /* A: Alignment fault enable */
#define CPU_CONTROL_DC_ENABLE	0x00000004 /* C: IDC/DC enable */
#define CPU_CONTROL_WBUF_ENABLE 0x00000008 /* W: Write buffer enable */
#define CPU_CONTROL_32BP_ENABLE 0x00000010 /* P: 32-bit exception handlers */
#define CPU_CONTROL_32BD_ENABLE 0x00000020 /* D: 32-bit addressing */
#define CPU_CONTROL_LABT_ENABLE 0x00000040 /* L: Late abort enable */
#define CPU_CONTROL_BEND_ENABLE 0x00000080 /* B: Big-endian mode */
#define CPU_CONTROL_SYST_ENABLE 0x00000100 /* S: System protection bit */
#define CPU_CONTROL_ROM_ENABLE	0x00000200 /* R: ROM protection bit */
#define CPU_CONTROL_CPCLK	0x00000400 /* F: Implementation defined */
#define CPU_CONTROL_BPRD_ENABLE 0x00000800 /* Z: Branch prediction enable */
#define CPU_CONTROL_IC_ENABLE   0x00001000 /* I: IC enable */
#define CPU_CONTROL_VECRELOC	0x00002000 /* V: Vector relocation */
#define CPU_CONTROL_ROUNDROBIN	0x00004000 /* RR: Predictable replacement */
#define CPU_CONTROL_V4COMPAT	0x00008000 /* L4: ARMv4 compat LDR R15 etc */

/* below were added by V6 */
#define CPU_CONTROL_FI		(1<<21) /* FI: fast interrupts */
#define CPU_CONTROL_U		(1<<22) /* U: Unaligned */
#define CPU_CONTROL_VE		(1<<24) /* VE: Vector enable */
#define CPU_CONTROL_EE		(1<<25) /* EE: Exception Endianness */
#define CPU_CONTROL_L2		(1<<25) /* L2: L2 cache enable */

/* added with v7 */
#define CPU_CONTROL_WXN		(1<<19)	/* WXN: Write implies XN */
#define CPU_CONTROL_UWXN	(1<<20)	/* UWXN: Unpriv write implies XN */
#define CPU_CONTROL_NMFI	(1<<27) /* NMFI: Non Maskable fast interrupt */ 
#define CPU_CONTROL_TRE		(1<<28) /* TRE: TEX Remap Enable */
#define CPU_CONTROL_AFE		(1<<29) /* AFE: Access Flag Enable */
#define CPU_CONTROL_TE		(1<<30) /* TE: Thumb Exception Enable */

#define CPU_CONTROL_IDC_ENABLE	CPU_CONTROL_DC_ENABLE

/* Cortex-A9 Auxiliary Control Register (CP15 register 1, opcode 1) */
#define CORTEXA9_AUXCTL_FW	(1 << 0) /* Cache and TLB updates broadcast */
#define CORTEXA9_AUXCTL_L2PE	(1 << 1) /* Prefetch hint enable */
#define CORTEXA9_AUXCTL_L1PE	(1 << 2) /* Data prefetch hint enable */
#define CORTEXA9_AUXCTL_WR_ZERO	(1 << 3) /* Ena. write full line of 0s mode */
#define CORTEXA9_AUXCTL_SMP	(1 << 6) /* Coherency is active */
#define CORTEXA9_AUXCTL_EXCL	(1 << 7) /* Exclusive cache bit */
#define CORTEXA9_AUXCTL_ONEWAY	(1 << 8) /* Allocate in on cache way only */
#define CORTEXA9_AUXCTL_PARITY	(1 << 9) /* Support parity checking */

/* Cache type register definitions */
#define CPU_CT_ISIZE(x)		((x) & 0xfff)		/* I$ info */
#define CPU_CT_DSIZE(x)		(((x) >> 12) & 0xfff)	/* D$ info */
#define CPU_CT_S		(1U << 24)		/* split cache */
#define CPU_CT_CTYPE(x)		(((x) >> 25) & 0xf)	/* cache type */
/* Cache type register definitions for ARM v7 */
#define CPU_CT_IMINLINE(x)	((x) & 0xf)		/* I$ min line size */
#define CPU_CT_DMINLINE(x)	(((x) >> 16) & 0xf)	/* D$ min line size */

#define CPU_CT_CTYPE_WT		0	/* write-through */
#define CPU_CT_CTYPE_WB1	1	/* write-back, clean w/ read */
#define CPU_CT_CTYPE_WB2	2	/* w/b, clean w/ cp15,7 */
#define CPU_CT_CTYPE_WB6	6	/* w/b, cp15,7, lockdown fmt A */
#define CPU_CT_CTYPE_WB7	7	/* w/b, cp15,7, lockdown fmt B */

#define CPU_CT_xSIZE_LEN(x)	((x) & 0x3)		/* line size */
#define CPU_CT_xSIZE_M		(1U << 2)		/* multiplier */
#define CPU_CT_xSIZE_ASSOC(x)	(((x) >> 3) & 0x7)	/* associativity */
#define CPU_CT_xSIZE_SIZE(x)	(((x) >> 6) & 0x7)	/* size */

/* MPIDR, Multiprocessor Affinity Register */
#define MPIDR_AFF2		(0xffU << 16)
#define MPIDR_AFF1		(0xffU << 8)
#define MPIDR_AFF0		(0xffU << 0)
#define MPIDR_AFF		(MPIDR_AFF2|MPIDR_AFF1|MPIDR_AFF0)

/* Fault status register definitions */

#define FAULT_USER      0x20

#define FAULT_WRTBUF_0  0x00 /* Vector Exception */
#define FAULT_WRTBUF_1  0x02 /* Terminal Exception */
#define FAULT_BUSERR_0  0x04 /* External Abort on Linefetch -- Section */
#define FAULT_BUSERR_1  0x06 /* External Abort on Linefetch -- Page */
#define FAULT_BUSERR_2  0x08 /* External Abort on Non-linefetch -- Section */
#define FAULT_BUSERR_3  0x0a /* External Abort on Non-linefetch -- Page */
#define FAULT_BUSTRNL1  0x0c /* External abort on Translation -- Level 1 */
#define FAULT_BUSTRNL2  0x0e /* External abort on Translation -- Level 2 */
#define FAULT_ALIGN_0   0x01 /* Alignment */
#define FAULT_ALIGN_1   0x03 /* Alignment */
#define FAULT_TRANS_S   0x05 /* Translation -- Section */
#define FAULT_TRANS_P   0x07 /* Translation -- Page */
#define FAULT_DOMAIN_S  0x09 /* Domain -- Section */
#define FAULT_DOMAIN_P  0x0b /* Domain -- Page */
#define FAULT_PERM_S    0x0d /* Permission -- Section */
#define FAULT_PERM_P    0x0f /* Permission -- Page */

/* Fault type definitions for ARM v7 */
#define FAULT_ACCESS_1	0x03 /* Access flag fault -- Level 1 */
#define FAULT_ACCESS_2	0x06 /* Access flag fault -- Level 2 */

#define FAULT_IMPRECISE	0x400	/* Imprecise exception (XSCALE) */

#define	FAULT_EXT	0x00001000	/* external abort */
#define	FAULT_WNR	0x00000800	/* write fault */

#define	FAULT_TYPE(fsr)		((fsr) & 0x0f)
#define	FAULT_TYPE_V7(fsr)	(((fsr) & 0x0f) | (((fsr) & 0x00000400) >> 6))

/*
 * Address of the vector page, low and high versions.
 */
#define ARM_VECTORS_LOW		0x00000000U
#define ARM_VECTORS_HIGH	0xffff0000U

/*
 * ARM Instructions
 *
 *       3 3 2 2 2                              
 *       1 0 9 8 7                                                     0
 *      +-------+-------------------------------------------------------+
 *      | cond  |              instruction dependant                    |
 *      |c c c c|                                                       |
 *      +-------+-------------------------------------------------------+
 */

#define INSN_SIZE		4		/* Always 4 bytes */
#define INSN_COND_MASK		0xf0000000	/* Condition mask */
#define INSN_COND_AL		0xe0000000	/* Always condition */

/* Translation Table Base Register */
#define TTBR_C			(1 << 0)	/* without MPE */
#define TTBR_S			(1 << 1)
#define TTBR_IMP		(1 << 2)
#define TTBR_RGN_MASK		(3 << 3)
#define  TTBR_RGN_NC		(0 << 3)
#define  TTBR_RGN_WBWA		(1 << 3)
#define  TTBR_RGN_WT		(2 << 3)
#define  TTBR_RGN_WBNWA		(3 << 3)
#define TTBR_NOS		(1 << 5)
#define TTBR_IRGN_MASK		((1 << 0) | (1 << 6))
#define  TTBR_IRGN_NC		((0 << 0) | (0 << 6))
#define  TTBR_IRGN_WBWA		((0 << 0) | (1 << 6))
#define  TTBR_IRGN_WT		((1 << 0) | (0 << 6))
#define  TTBR_IRGN_WBNWA	((1 << 0) | (1 << 6))

#endif
@


1.41
log
@Bring over the changes to mainbus(4) and simplebus(4) from arm64.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.40 2017/04/24 18:15:16 kettenis Exp $	*/
d160 2
d170 2
@


1.40
log
@Add support for Cortex-A12.  Even though ARM rebranded these as Cortex-A17
they have a different ID from "real" Cortex-A17 cores.

ok phessler@@, patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.39 2017/01/04 00:40:49 jsg Exp $	*/
d276 6
@


1.39
log
@unifdef CPU_XSCALE_PXA2X0, ARM_MMU_XSCALE, ARM_MMU_GENERIC (armv3)
and remove some xscale definitions.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.38 2017/01/01 09:54:44 jsg Exp $	*/
d142 2
@


1.38
log
@recognise Cortex A32
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.37 2016/08/25 08:17:57 kettenis Exp $	*/
a111 1
#define CPU_ID_INTEL		0x69000000 /* 'i' */
a113 2
#define CPU_ID_ARCH_V5TE	0x00050000
#define CPU_ID_ARCH_V5TEJ	0x00060000
a120 5
/* Intel XScale has sub fields in part number */
#define CPU_ID_XSCALE_COREGEN_MASK	0x0000e000 /* core generation */
#define CPU_ID_XSCALE_COREREV_MASK	0x00001c00 /* core revision */
#define CPU_ID_XSCALE_PRODUCT_MASK	0x000003f0 /* product number */

a125 9
#define CPU_ID_PXA250		0x69052100 /* sans core revision */
#define CPU_ID_PXA210		0x69052120
#define CPU_ID_PXA250A		0x69052100 /* 1st version Core */
#define CPU_ID_PXA210A		0x69052120 /* 1st version Core */
#define CPU_ID_PXA250B		0x69052900 /* 3rd version Core */
#define CPU_ID_PXA210B		0x69052920 /* 3rd version Core */
#define CPU_ID_PXA250C		0x69052d00 /* 4th version Core */
#define CPU_ID_PXA210C		0x69052d20 /* 4th version Core */
#define CPU_ID_PXA27X		0x69054110
a243 8

/* XScale Auxillary Control Register (CP15 register 1, opcode2 1) */
#define XSCALE_AUXCTL_K		0x00000001 /* dis. write buffer coalescing */
#define XSCALE_AUXCTL_P		0x00000002 /* ECC protect page table access */
#define XSCALE_AUXCTL_MD_WB_RA	0x00000000 /* mini-D$ wb, read-allocate */
#define XSCALE_AUXCTL_MD_WB_RWA	0x00000010 /* mini-D$ wb, read/write-allocate */
#define XSCALE_AUXCTL_MD_WT	0x00000020 /* mini-D$ wt, read-allocate */
#define XSCALE_AUXCTL_MD_MASK	0x00000030
@


1.37
log
@Enable the UWXN bit in the SCTRL register when available.  This should
prevent the kernel from accidentally executing userland pages that are
writable.

ok jsg@@, patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.36 2016/08/24 13:09:52 kettenis Exp $	*/
d168 2
@


1.36
log
@Replace pmap_fault_fixup() with an access flag fault handler on armv7.

ok tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.35 2016/08/14 11:30:54 jsg Exp $	*/
d251 2
@


1.35
log
@Remove code for Intel 80219/80321 xscale processors used by armish.
Generic xscale support and support for pxa2x0 used by zaurus remains.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.34 2016/08/14 10:36:47 kettenis Exp $	*/
d316 4
@


1.34
log
@Fix setting the SMP bit in the Auxiliary Control Register.  The old code was
toggling the bit, clearing it when already set.  On Cortex-A7 setting the SMP
bit is essential since without it the CPU doesn't actually use its caches.

The SMP bit supposed to be set before turning on the caches and the MMU, so
move the setting of the Auxiliary Control Register before setting the
System Control Register.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.33 2016/08/06 16:46:25 kettenis Exp $	*/
a141 2
#define CPU_ID_80219_400        0x69052e20
#define CPU_ID_80219_600        0x69052e30
a142 4
#define CPU_ID_80321_400	0x69052420
#define CPU_ID_80321_600	0x69052430
#define CPU_ID_80321_400_B0	0x69052c20
#define CPU_ID_80321_600_B0	0x69052c30
@


1.33
log
@Put page tables in normal cachable memory on armv7.  Check if the MMU walks
the page tables coherently and also skip flushing modified ptes out of the
cache in that case.  Speeds up building a kernel with a factor of two on
Cortex-A9 (tested by me) and Cortex-A8 (tested by mglocker@@).

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.32 2016/07/31 06:24:38 jsg Exp $	*/
d271 10
@


1.32
log
@Recognise Cortex A35 and Cortex A73.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.31 2016/07/31 03:49:51 jsg Exp $	*/
d341 16
@


1.31
log
@Instead of testing MIDR values for every model of Cortex processor check
MMFR0 for an ARMv7 VMSA MMU that can handle short descriptors when
setting ARMv7 function pointers.  ARMv8 in AArch32 mode is documented to
set the same bits.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.30 2016/04/04 09:06:28 patrick Exp $	*/
d174 2
d185 2
@


1.30
log
@Read cache line sizes from CP15 Cache Type Register.

Previously we used the primary data cache's information on how big
the cache lines are.  The CTR gives us better information about how
big the smallest cache line sizes (controlled by the CPU) are.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.29 2016/04/04 00:41:36 jsg Exp $	*/
d183 7
@


1.29
log
@Set the SMP/coherency bit in ACTLR on Cortex A models it is documented
to exist on.  This is required to use ldrex/strex in some cases.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.28 2016/03/22 23:35:01 patrick Exp $	*/
d266 3
@


1.28
log
@Remove support for ARM11.  This was the last unused and unmaintained
processor in our code.  Now we're left with only armv7 and XScale for
armish and zaurus.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.27 2016/03/22 23:28:02 patrick Exp $	*/
d149 1
@


1.27
log
@Remove support for ARM10.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.26 2016/03/22 11:18:17 patrick Exp $	*/
a133 2
#define CPU_ID_ARM1136JS	0x4107b360
#define CPU_ID_ARM1136JSR1	0x4117b360
@


1.26
log
@Remove support for ARM9E.  This is another step in the plan to remove
all unused and unmaintained ARM processors from the past.

ok bmercer@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.25 2016/03/22 01:32:41 jsg Exp $	*/
a133 3
#define CPU_ID_ARM1020E		0x4115a200 /* (AKA arm10 rev 1) */
#define CPU_ID_ARM1022ES	0x4105a220
#define CPU_ID_ARM1026EJS	0x4106a260
@


1.25
log
@Remove defines for unsupported chips, add V5TEJ and remove incorrect
ARCH_V7 define.  The number ARM Ltd armv7 chips set here is 0xf,
documented as 'Defined by CPUID scheme'.

ok patrick@@ bmercer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.24 2016/03/19 09:51:24 patrick Exp $	*/
a133 4
#define CPU_ID_ARM926EJS	0x41069260
#define CPU_ID_ARM946ES		0x41049460 /* XXX no MMU */
#define CPU_ID_ARM966ES		0x41049660 /* XXX no MMU */
#define CPU_ID_ARM966ESR1	0x41059660 /* XXX no MMU */
@


1.24
log
@Remove support for the XScale 80200.  We don't use it, it didn't compile
and the included headers didn't even exist.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.23 2016/03/19 09:47:54 patrick Exp $	*/
a111 1
#define CPU_ID_DEC		0x44000000 /* 'D' */
a112 1
#define CPU_ID_TI		0x54000000 /* 'T' */
a113 16
/* How to decide what format the CPUID is in. */
#define CPU_ID_ISOLD(x)		(((x) & 0x0000f000) == 0x00000000)
#define CPU_ID_IS7(x)		(((x) & 0x0000f000) == 0x00007000)
#define CPU_ID_ISNEW(x)		(!CPU_ID_ISOLD(x) && !CPU_ID_IS7(x))

/* On ARM3 and ARM6, this byte holds the foundry ID. */
#define CPU_ID_FOUNDRY_MASK	0x00ff0000
#define CPU_ID_FOUNDRY_VLSI	0x00560000

/* On ARM7 it holds the architecture and variant (sub-model) */
#define CPU_ID_7ARCH_MASK	0x00800000
#define CPU_ID_7ARCH_V3		0x00000000
#define CPU_ID_7ARCH_V4T	0x00800000
#define CPU_ID_7VARIANT_MASK	0x007f0000

/* On more recent ARMs, it does the same, but in a different format */
a114 5
#define CPU_ID_ARCH_V3		0x00000000
#define CPU_ID_ARCH_V4		0x00010000
#define CPU_ID_ARCH_V4T		0x00020000
#define CPU_ID_ARCH_V5		0x00030000
#define CPU_ID_ARCH_V5T		0x00040000
d116 1
d118 1
a118 1
#define CPU_ID_ARCH_V7		0x00080000
a133 23

/* Fake CPU IDs for ARMs without CP15 */
#define CPU_ID_ARM2		0x41560200
#define CPU_ID_ARM250		0x41560250

/* Pre-ARM7 CPUs -- [15:12] == 0 */
#define CPU_ID_ARM3		0x41560300
#define CPU_ID_ARM600		0x41560600
#define CPU_ID_ARM610		0x41560610
#define CPU_ID_ARM620		0x41560620

/* ARM7 CPUs -- [15:12] == 7 */
#define CPU_ID_ARM700		0x41007000 /* XXX This is a guess. */
#define CPU_ID_ARM710		0x41007100
#define CPU_ID_ARM7500		0x41027100 /* XXX This is a guess. */
#define CPU_ID_ARM710A		0x41047100 /* inc ARM7100 */
#define CPU_ID_ARM7500FE	0x41077100
#define CPU_ID_ARM710T		0x41807100
#define CPU_ID_ARM720T		0x41807200
#define CPU_ID_ARM740T8K	0x41807400 /* XXX no MMU, 8KB cache */
#define CPU_ID_ARM740T4K	0x41817400 /* XXX no MMU, 4KB cache */

/* Post-ARM7 CPUs */
a190 12

/* ARM3-specific coprocessor 15 registers */
#define ARM3_CP15_FLUSH		1
#define ARM3_CP15_CONTROL	2
#define ARM3_CP15_CACHEABLE	3
#define ARM3_CP15_UPDATEABLE	4
#define ARM3_CP15_DISRUPTIVE	5	

/* ARM3 Control register bits */
#define ARM3_CTL_CACHE_ON	0x00000001
#define ARM3_CTL_SHARED		0x00000002
#define ARM3_CTL_MONITOR	0x00000004
@


1.23
log
@Remove support for IXP425.  This is another architecture that is not
used and has probably never been used at all.  Some included headers
do not even exist.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.22 2016/03/19 09:36:57 patrick Exp $	*/
a187 1
#define CPU_ID_80200		0x69052000
@


1.22
log
@Remove support for StrongARM (SA1) and IXP12x0.  Both are ARMv4 and
are not used by any of the arm platforms.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.21 2016/03/18 13:16:02 jsg Exp $	*/
a203 3
#define CPU_ID_IXP425_533	0x690541c0
#define CPU_ID_IXP425_400	0x690541d0
#define CPU_ID_IXP425_266	0x690541f0
@


1.21
log
@Remove support for ARM9T (armv4t).  Not used by any of the arm platforms.
From Patrick Wildt.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.20 2016/03/18 06:54:21 jsg Exp $	*/
a187 4
#define CPU_ID_SA110		0x4401a100
#define CPU_ID_SA1100		0x4401a110
#define CPU_ID_SA1110		0x6901b110
#define CPU_ID_IXP1200		0x6901c120
@


1.20
log
@Remove support for ARM8, an old armv4 processor without thumb that was
never supported by any arm port and wouldn't have built due to a missing
cpufunc_asm_arm8.S file.

From Patrick Wildt.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.19 2016/03/02 23:46:48 jsg Exp $	*/
a178 2
#define CPU_ID_ARM920T		0x41129200
#define CPU_ID_ARM922T		0x41029220
a179 1
#define CPU_ID_ARM940T		0x41029400 /* XXX no MMU */
a189 1
#define CPU_ID_TI925T		0x54029250
@


1.19
log
@fix the name of the define for the a72 mask
from Patrick Wildt
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.18 2016/01/31 00:14:50 jsg Exp $	*/
a178 1
#define CPU_ID_ARM810		0x41018100
@


1.18
log
@Switch from PSR_X_bit and X32_bit PSR macro names to just PSR_X.
This matches FreeBSD and makes things a bit more consistent.
Discussed with Patrick.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.17 2016/01/23 15:38:48 jsg Exp $	*/
d248 1
a248 1
#define CPU_ID_CORTEX_A57_MASK	0xff0ffff0
@


1.17
log
@In some cases machines with virtualisation extensions will boot into a
HYP processor mode that has different memory management and register
behaviour among other things.  In this case switch to SVC mode to
prevent an early crash.

From Patrick Wildt based on code in FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.16 2015/05/29 05:48:07 jsg Exp $	*/
d66 10
a75 10
#define PSR_N_bit (1U << 31)	/* negative */
#define PSR_Z_bit (1 << 30)	/* zero */
#define PSR_C_bit (1 << 29)	/* carry */
#define PSR_V_bit (1 << 28)	/* overflow */

#define PSR_Q_bit (1 << 27)	/* saturation */

#define A32_bit (1 << 8)	/* Asynchronous abort disable */
#define I32_bit (1 << 7)	/* IRQ disable */
#define F32_bit (1 << 6)	/* FIQ disable */
d77 2
a78 2
#define PSR_T_bit (1 << 5)	/* Thumb state */
#define PSR_J_bit (1 << 24)	/* Java mode */
@


1.16
log
@add some more cortex A ids
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.15 2015/01/17 08:00:41 jsg Exp $	*/
d73 1
d89 1
d91 1
@


1.15
log
@Add an ascii bit/field diagram for armv7-a psr to match the
existing one for earlier arm revisions.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.14 2013/11/26 20:33:11 deraadt Exp $	*/
d234 12
a245 1

@


1.14
log
@1 << 31 cleanup.  Eitan Adler pointed out that there has been a
resurrection of the bad idiom in the tree.
sufficient review by miod, kettenis, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.13 2013/08/06 23:15:43 jsg Exp $	*/
d46 1
a46 1
 * The picture in the ARM manuals looks like this:
d53 10
@


1.13
log
@add Cortex A15 R4
ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.12 2013/04/28 13:27:13 patrick Exp $	*/
d56 1
a56 1
#define PSR_N_bit (1 << 31)	/* negative */
@


1.12
log
@Improved dealing of ARMv7 faults. Added ARMv7 fault descriptions.

ok bmercer@@
tested on zaurus by todd@@ and patrick@@
tested on armv7 boards
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.11 2013/01/18 00:20:20 patrick Exp $	*/
d222 1
@


1.11
log
@Update the ARM CPU ID information. The IDs aren't vendor/product
specific, they are specific to the ARM CPUs themselves.

ok bmercer@@ jsg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.10 2011/09/20 22:02:13 miod Exp $	*/
d333 1
a333 2
#define FAULT_TYPE_MASK 0x0f
#define FAULT_USER      0x10
d353 6
@


1.10
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.9 2011/03/17 21:49:33 jasper Exp $	*/
d203 7
d211 12
a222 5
#define CPU_ID_CORTEX_A8_MASK	0xff0fffe0
#define CPU_ID_OMAP3430		0x411fc080
#define CPU_ID_OMAP3530		0x411fc090      /* XXX */
#define	CPU_ID_OMAP3630		0x413fc080

@


1.9
log
@- recognize OMAP3630/DM3730, as found in the beagleboard xM

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.8 2010/02/03 05:25:58 kevlo Exp $	*/
a83 20
#define PSR_IN_32_MODE(psr)	((psr) & PSR_32_MODE)

/* In 26-bit modes, the PSR is stuffed into R15 along with the PC. */

#define R15_MODE	0x00000003
#define R15_MODE_USR	0x00000000
#define R15_MODE_FIQ	0x00000001
#define R15_MODE_IRQ	0x00000002
#define R15_MODE_SVC	0x00000003

#define R15_PC		0x03fffffc

#define R15_FIQ_DISABLE	0x04000000
#define R15_IRQ_DISABLE	0x08000000

#define R15_FLAGS	0xf0000000
#define R15_FLAG_N	0x80000000
#define R15_FLAG_Z	0x40000000
#define R15_FLAG_C	0x20000000
#define R15_FLAG_V	0x10000000
@


1.8
log
@typo. CPU_ID_ARM1022EJS -> CPU_ID_ARM1026EJS

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.7 2009/05/24 04:56:19 drahn Exp $	*/
d227 1
@


1.7
log
@Improve the ARMv7 support, still work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.6 2009/05/11 12:50:23 drahn Exp $	*/
d196 1
a196 1
#define CPU_ID_ARM1022EJS	0x4106a260
@


1.6
log
@Add some (not used yet) control regiser bit definitions.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.5 2009/05/08 02:57:32 drahn Exp $	*/
d223 2
d226 2
a227 1
#define CPU_ID_OMAP3530		0x411fc090	/* XXX */
@


1.5
log
@Pieces of arm11 and armv7 support for newer cpus. This is work in progress
and not complete.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.4 2008/09/11 02:38:14 kevlo Exp $	*/
d292 13
@


1.4
log
@add support for arm9e core, taken from NetBSD.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.3 2006/05/29 17:01:42 drahn Exp $	*/
d55 1
a55 1
#define	PSR_FLAGS 0xf0000000	/* flags */
d121 1
a121 1
#define	CPU_ID_TI		0x54000000 /* 'T' */
d146 2
d192 2
a193 2
#define	CPU_ID_ARM966ES		0x41049660 /* XXX no MMU */
#define	CPU_ID_ARM966ESR1	0x41059660 /* XXX no MMU */
d196 3
d201 1
a201 1
#define	CPU_ID_TI925T		0x54029250
d216 10
a225 7
#define	CPU_ID_80321_400	0x69052420
#define	CPU_ID_80321_600	0x69052430
#define	CPU_ID_80321_400_B0	0x69052c20
#define	CPU_ID_80321_600_B0	0x69052c30
#define	CPU_ID_IXP425_533	0x690541c0
#define	CPU_ID_IXP425_400	0x690541d0
#define	CPU_ID_IXP425_266	0x690541f0
d296 6
a301 6
#define	XSCALE_AUXCTL_K		0x00000001 /* dis. write buffer coalescing */
#define	XSCALE_AUXCTL_P		0x00000002 /* ECC protect page table access */
#define	XSCALE_AUXCTL_MD_WB_RA	0x00000000 /* mini-D$ wb, read-allocate */
#define	XSCALE_AUXCTL_MD_WB_RWA	0x00000010 /* mini-D$ wb, read/write-allocate */
#define	XSCALE_AUXCTL_MD_WT	0x00000020 /* mini-D$ wt, read-allocate */
#define	XSCALE_AUXCTL_MD_MASK	0x00000030
d304 15
a318 15
#define	CPU_CT_ISIZE(x)		((x) & 0xfff)		/* I$ info */
#define	CPU_CT_DSIZE(x)		(((x) >> 12) & 0xfff)	/* D$ info */
#define	CPU_CT_S		(1U << 24)		/* split cache */
#define	CPU_CT_CTYPE(x)		(((x) >> 25) & 0xf)	/* cache type */

#define	CPU_CT_CTYPE_WT		0	/* write-through */
#define	CPU_CT_CTYPE_WB1	1	/* write-back, clean w/ read */
#define	CPU_CT_CTYPE_WB2	2	/* w/b, clean w/ cp15,7 */
#define	CPU_CT_CTYPE_WB6	6	/* w/b, cp15,7, lockdown fmt A */
#define	CPU_CT_CTYPE_WB7	7	/* w/b, cp15,7, lockdown fmt B */

#define	CPU_CT_xSIZE_LEN(x)	((x) & 0x3)		/* line size */
#define	CPU_CT_xSIZE_M		(1U << 2)		/* multiplier */
#define	CPU_CT_xSIZE_ASSOC(x)	(((x) >> 3) & 0x7)	/* associativity */
#define	CPU_CT_xSIZE_SIZE(x)	(((x) >> 6) & 0x7)	/* size */
d342 1
a342 1
#define	FAULT_IMPRECISE	0x400	/* Imprecise exception (XSCALE) */
d347 2
a348 2
#define	ARM_VECTORS_LOW		0x00000000U
#define	ARM_VECTORS_HIGH	0xffff0000U
@


1.3
log
@Add support for i80321 based systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.2 2004/12/30 23:30:14 drahn Exp $	*/
d187 1
@


1.2
log
@Add pxa270 id
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.2 2004/12/30 23:27:40 drahn Exp $	*/
d207 2
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: armreg.h,v 1.2 2004/01/29 16:17:16 drahn Exp $	*/
d199 2
a200 2
#define CPU_ID_PXA250    	0x69052100 /* sans core revision */
#define CPU_ID_PXA210    	0x69052120
d207 1
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

