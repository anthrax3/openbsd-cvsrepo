head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.4.0.14
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.12
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.22
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.20
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.18
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.12
date	2017.01.06.00.06.02;	author jsg;	state Exp;
branches;
next	1.11;
commitid	YCbIRye8xzoWl68V;

1.11
date	2016.10.22.17.48.41;	author patrick;	state Exp;
branches;
next	1.10;
commitid	1RcSnPLGnOkAWVLw;

1.10
date	2016.04.25.08.00.43;	author patrick;	state Exp;
branches;
next	1.9;
commitid	hqPZKbjGBRwTBGv6;

1.9
date	2016.04.24.12.11.46;	author patrick;	state Exp;
branches;
next	1.8;
commitid	dJvsnj9yzR4c7X3f;

1.8
date	2016.04.24.01.31.02;	author patrick;	state Exp;
branches;
next	1.7;
commitid	a1zPZPWcIN0F3Zcz;

1.7
date	2016.01.31.00.14.50;	author jsg;	state Exp;
branches;
next	1.6;
commitid	pbLjedMudUFrVMk6;

1.6
date	2015.01.18.16.26.39;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mxO9Zx2zTAEICyG6;

1.5
date	2015.01.18.12.03.11;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mWYKDJUzlbetKywi;

1.4
date	2011.09.20.22.02.13;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.07.20.20.30;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.19.03.17.07;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.09.49;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.48.02;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.06.05.23.10.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@unifdef CPU_ARMv7 and ARM_ARCH_7
ok kettenis@@ patrick@@
@
text
@/*	$OpenBSD: frame.h,v 1.11 2016/10/22 17:48:41 patrick Exp $	*/
/*	$NetBSD: frame.h,v 1.9 2003/12/01 08:48:33 scw Exp $	*/

/*
 * Copyright (c) 1994-1997 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * This code is derived from software written for Brini by Mark Brinicombe
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Brini.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BRINI ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL BRINI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * frame.h
 *
 * Stack frames structures
 *
 * Created      : 30/09/94
 */

#ifndef _ARM_FRAME_H_
#define _ARM_FRAME_H_

#ifndef _LOCORE

#include <sys/signal.h>

/*
 * Trap frame.  Pushed onto the kernel stack on a trap (synchronous exception).
 */

typedef struct trapframe {
	register_t tf_spsr;
	register_t tf_r0;
	register_t tf_r1;
	register_t tf_r2;
	register_t tf_r3;
	register_t tf_r4;
	register_t tf_r5;
	register_t tf_r6;
	register_t tf_r7;
	register_t tf_r8;
	register_t tf_r9;
	register_t tf_r10;
	register_t tf_r11;
	register_t tf_r12;
	register_t tf_usr_sp;
	register_t tf_usr_lr;
	register_t tf_svc_sp;
	register_t tf_svc_lr;
	register_t tf_pc;
	register_t tf_pad;
} trapframe_t;

/* Register numbers */
#define tf_r13 tf_usr_sp
#define tf_r14 tf_usr_lr
#define tf_r15 tf_pc

/* Determine if a fault came from user mode */
#define	TRAP_USERMODE(tf)	((tf->tf_spsr & PSR_MODE) == PSR_USR32_MODE)

/*
 * Signal frame.  Pushed onto user stack before calling sigcode.
 */

struct sigframe {
	int	sf_signum;
	siginfo_t *sf_sip;
	struct	sigcontext *sf_scp;
	sig_t	sf_handler;
	struct	sigcontext sf_sc;
	siginfo_t sf_si;
};

/* the pointers are used in the trampoline code to locate the ucontext */
#if 0
struct sigframe_siginfo {
	siginfo_t	sf_si;		/* actual saved siginfo */
	ucontext_t	sf_uc;		/* actual saved ucontext */
};
#endif

#if 0
#ifdef _KERNEL
void sendsig_sigcontext(const ksiginfo_t *, const sigset_t *);
#endif
#endif

#endif /* _LOCORE */

#ifndef _LOCORE

/*
 * System stack frames.
 */

typedef struct irqframe {
	unsigned int if_spsr;
	unsigned int if_r0;
	unsigned int if_r1;
	unsigned int if_r2;
	unsigned int if_r3;
	unsigned int if_r4;
	unsigned int if_r5;
	unsigned int if_r6;
	unsigned int if_r7;
	unsigned int if_r8;
	unsigned int if_r9;
	unsigned int if_r10;
	unsigned int if_r11;
	unsigned int if_r12;
	unsigned int if_usr_sp;
	unsigned int if_usr_lr;
	unsigned int if_svc_sp;
	unsigned int if_svc_lr;
	unsigned int if_pc;
	unsigned int if_pad;
} irqframe_t;

#define clockframe irqframe

/*
 * Switch frame
 */

struct switchframe {
	u_int	sf_pad;
	u_int	sf_r4;
	u_int	sf_r5;
	u_int	sf_r6;
	u_int	sf_r7;
	u_int	sf_pc;
};

/*
 * Stack frame. Used during stack traces (db_trace.c)
 */
struct frame {
	u_int	fr_fp;
	u_int	fr_sp;
	u_int	fr_lr;
	u_int	fr_pc;
};

#else /* _LOCORE */

#define	AST_LOCALS							 \
.Laflt_astpending:							;\
	.word	_C_LABEL(astpending)

#define	DO_AST								 \
	ldr	r0, [sp]		/* Get the SPSR from stack */	;\
	mrs	r4, cpsr		/* save CPSR */			;\
	and	r0, r0, #(PSR_MODE)	/* Returning to USR mode? */	;\
	teq	r0, #(PSR_USR32_MODE)					;\
	ldreq	r5, .Laflt_astpending					;\
	bne	2f			/* Nope, get out now */		;\
	bic	r4, r4, #(PSR_I)					;\
1:	orr	r0, r4, #(PSR_I)	/* Disable IRQs */		;\
	msr	cpsr_c, r0						;\
	ldr	r1, [r5]		/* Pending AST? */		;\
	teq	r1, #0x00000000						;\
	beq	2f			/* Nope. Just bail */		;\
	mov	r1, #0x00000000						;\
	str	r1, [r5]		/* Clear astpending */		;\
	msr	cpsr_c, r4		/* Restore interrupts */	;\
	mov	r0, sp							;\
	adr	lr, 1b							;\
	b	_C_LABEL(ast)		/* ast(frame) */		;\
2:

/*
 * ASM macros for pushing and pulling trapframes from the stack
 *
 * These macros are used to handle the irqframe and trapframe structures
 * defined above.
 */

/*
 * CLREX - On ARMv7 machines that support atomic instructions, we need
 * to clear the exclusive monitors on kernel exit, so that a userland
 * atomic store can't succeed due to an unrelated outstanding atomic
 * operation. ARM also highly recommends clearing the monitor on data
 * aborts, as the monitor state after taking a data abort is unknown.
 * Issuing a clrex on kernel entry and on kernel exit is the easiest
 * way to take care of both issues and to make sure that the kernel
 * and userland do not leave any outstanding reserves active.
 */

/*
 * PUSHFRAME - macro to push a trap frame on the stack in the current mode
 * Since the current mode is used, the SVC lr field is not defined.
 */

#define PUSHFRAME							   \
	clrex;								   \
	sub	sp, sp, #4;		/* Align the stack */		   \
	str	lr, [sp, #-4]!;		/* Push the return address */	   \
	sub	sp, sp, #(4*17);	/* Adjust the stack pointer */	   \
	stmia	sp, {r0-r14}^;		/* Push the user mode registers */ \
	mov	r0, r0;			/* NOP for previous instruction */ \
	mrs	r0, spsr;		/* Put the SPSR on the stack */	   \
	str	r0, [sp, #-4]!

/*
 * PULLFRAME - macro to pull a trap frame from the stack in the current mode
 * Since the current mode is used, the SVC lr field is ignored.
 */

#define PULLFRAME							   \
	clrex;								   \
	ldr	r0, [sp], #0x0004;	/* Get the SPSR from stack */	   \
	msr	spsr_fsxc, r0;						   \
	ldmia	sp, {r0-r14}^;		/* Restore registers (usr mode) */ \
	mov	r0, r0;			/* NOP for previous instruction */ \
	add	sp, sp, #(4*17);	/* Adjust the stack pointer */	   \
	ldr	lr, [sp], #0x0004;	/* Pull the return address */	   \
	add	sp, sp, #4		/* Align the stack */

/*
 * PUSHFRAMEINSVC - macro to push a trap frame on the stack in SVC32 mode
 * This should only be used if the processor is not currently in SVC32
 * mode. The processor mode is switched to SVC mode and the trap frame is
 * stored. The SVC lr field is used to store the previous value of
 * lr in SVC mode.
 */

#define PUSHFRAMEINSVC							   \
	clrex;								   \
	stmdb	sp, {r0-r3};		/* Save 4 registers */		   \
	mov	r0, lr;			/* Save xxx32 r14 */		   \
	mov	r1, sp;			/* Save xxx32 sp */		   \
	mrs	r3, spsr;		/* Save xxx32 spsr */		   \
	mrs	r2, cpsr; 		/* Get the CPSR */		   \
	bic	r2, r2, #(PSR_MODE);	/* Fix for SVC mode */		   \
	orr	r2, r2, #(PSR_SVC32_MODE);				   \
	msr	cpsr_c, r2;		/* Punch into SVC mode */	   \
	mov	r2, sp;			/* Save	SVC sp */		   \
	bic	sp, sp, #7;		/* Align sp to an 8-byte address */   \
	sub	sp, sp, #4;		/* Pad trapframe to keep alignment */ \
	str	r0, [sp, #-4]!;		/* Push return address */	   \
	str	lr, [sp, #-4]!;		/* Push SVC lr */		   \
	str	r2, [sp, #-4]!;		/* Push SVC sp */		   \
	msr	spsr_fsxc, r3;		/* Restore correct spsr */	   \
	ldmdb	r1, {r0-r3};		/* Restore 4 regs from xxx mode */ \
	sub	sp, sp, #(4*15);	/* Adjust the stack pointer */	   \
	stmia	sp, {r0-r14}^;		/* Push the user mode registers */ \
	mov	r0, r0;			/* NOP for previous instruction */ \
	mrs	r0, spsr;		/* Put the SPSR on the stack */	   \
	str	r0, [sp, #-4]!

/*
 * PULLFRAMEFROMSVCANDEXIT - macro to pull a trap frame from the stack
 * in SVC32 mode and restore the saved processor mode and PC.
 * This should be used when the SVC lr register needs to be restored on
 * exit.
 */

#define PULLFRAMEFROMSVCANDEXIT						   \
	clrex;								   \
	ldr	r0, [sp], #0x0004;	/* Get the SPSR from stack */	   \
	msr	spsr_fsxc, r0;		/* restore SPSR */		   \
	ldmia	sp, {r0-r14}^;		/* Restore registers (usr mode) */ \
	mov	r0, r0;			/* NOP for previous instruction */ \
	add	sp, sp, #(4*15);	/* Adjust the stack pointer */	   \
	ldmia	sp, {sp, lr, pc}^	/* Restore lr and exit */

#endif /* _LOCORE */

#endif /* _ARM_FRAME_H_ */

/* End of frame.h */
@


1.11
log
@If an Access Flag fault happens while we were running the kernel and
it happened on a kernel page, we need to consult the kernel pmap
instead of the current proc's pmap.  Fixes panic when using tmpfs.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.10 2016/04/25 08:00:43 patrick Exp $	*/
a215 5
#if defined(CPU_ARMv7)
#define CLREX clrex
#else
#define CLREX
#endif
d223 1
a223 1
	CLREX;								   \
d238 1
a238 1
	CLREX;								   \
d256 1
a256 1
	CLREX;								   \
d287 1
a287 1
	CLREX;								   \
@


1.10
log
@Implement atomic operations using the atomic instructions available
since ARMv6K.  As we also support ARMs that are older than that,
guard the new atomic operations with an ifdef specifically for ARMv7.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.9 2016/04/24 12:11:46 patrick Exp $	*/
d85 3
@


1.9
log
@whitespace cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.8 2016/04/24 01:31:02 patrick Exp $	*/
d204 16
d225 1
d240 1
d258 1
d289 1
@


1.8
log
@EABI's Procedure Call Standard (AAPCS) requires the stack pointer
to be 8-byte aligned. To guarantee this, align the stack pointers
passed to user processes and make sure the in-kernel stacks are
properly aligned, too.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.7 2016/01/31 00:14:50 jsg Exp $	*/
d158 1
a158 1
 
d213 1
a213 1
        mov     r0, r0;                 /* NOP for previous instruction */ \
d223 4
a226 4
        ldr     r0, [sp], #0x0004;      /* Get the SPSR from stack */	   \
        msr     spsr_fsxc, r0;						   \
        ldmia   sp, {r0-r14}^;		/* Restore registers (usr mode) */ \
        mov     r0, r0;                 /* NOP for previous instruction */ \
d236 1
a236 1
 * lr in SVC mode.  
d244 4
a247 4
	mrs     r2, cpsr; 		/* Get the CPSR */		   \
	bic     r2, r2, #(PSR_MODE);	/* Fix for SVC mode */		   \
	orr     r2, r2, #(PSR_SVC32_MODE);				   \
	msr     cpsr_c, r2;		/* Punch into SVC mode */	   \
d254 1
a254 1
	msr     spsr_fsxc, r3;		/* Restore correct spsr */	   \
d258 1
a258 1
        mov     r0, r0;                 /* NOP for previous instruction */ \
d270 4
a273 4
        ldr     r0, [sp], #0x0004;	/* Get the SPSR from stack */	   \
        msr     spsr_fsxc, r0;		/* restore SPSR */		   \
        ldmia   sp, {r0-r14}^;		/* Restore registers (usr mode) */ \
        mov     r0, r0;	  		/* NOP for previous instruction */ \
d280 1
a280 1
  
@


1.7
log
@Switch from PSR_X_bit and X32_bit PSR macro names to just PSR_X.
This matches FreeBSD and makes things a bit more consistent.
Discussed with Patrick.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.6 2015/01/18 16:26:39 jsg Exp $	*/
d78 1
d141 1
d151 1
d209 1
d228 2
a229 1
 	ldr	lr, [sp], #0x0004	/* Pull the return address */
d249 2
@


1.6
log
@When restoring spsr values when handling traps use spsr_fsxc instead
of spsr_all so all the bits are restored.  Using the msr instruction
with spsr_all is treated the same as spsr_fc and does not include the
status and extension fields (bits 23:8).

This fixes the problem of some i.MX6 machines powering up with the
big endian bit set in the extension field causing them to crash
on returning from the first interrupt.

From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.5 2015/01/18 12:03:11 jsg Exp $	*/
d179 2
a180 2
	bic	r4, r4, #(I32_bit)					;\
1:	orr	r0, r4, #(I32_bit)	/* Disable IRQs */		;\
@


1.5
log
@The 'mrs' instruction only deals with the whole register without
masking.  Remove the use of cpsr_all/spsr_all with 'mrs' and just use
the register names.  This matches the arm docs and avoids confusion as
cpsr_all/spsr_all don't include bits 23->8 when used with the 'msr'
instruction but do with 'mrs'.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.4 2011/09/20 22:02:13 miod Exp $	*/
d220 1
a220 1
        msr     spsr_all, r0;						   \
d247 1
a247 1
	msr     spsr_all, r3;		/* Restore correct spsr */	   \
d264 1
a264 1
        msr     spsr_all, r0;		/* restore SPSR */		   \
@


1.4
log
@Late spring cleaning of the arm code for old dusty bits we do not want to
keep:
- remove bootconfig parameter passing feature (unused).
- unifdef __PROG32 and remove all remains of arm26 code.
- remove ARMFPE support (unused).
- remove support for ARM2, ARM2AS, ARM3, ARM6, ARM7, ARM7TDMI and StrongARM
  processor families, and the related silicon bug workarounds (especially
  the SA-110 STM^ bug).
- remove cpu_functions no longer necessary after previous removals.
- remove ARM32_DISABLE_ALIGNMENT_FAULTS option (unused).
- make FIQ support conditional on option FIQ (unused, but may be eventually).

Discussed with drahn@@ and jasper@@ long ago, I was sitting on this commit for
no good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.3 2006/03/07 20:20:30 miod Exp $	*/
d210 1
a210 1
	mrs	r0, spsr_all;		/* Put the SPSR on the stack */	   \
d252 1
a252 1
	mrs	r0, spsr_all;		/* Put the SPSR on the stack */	   \
@


1.3
log
@Remove COMPAT_1x stuff inherited from NetBSD, which does not apply to us.
ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.2 2004/05/19 03:17:07 drahn Exp $	*/
d59 1
a59 1
	register_t tf_spsr; /* Zero on arm26 */
d75 2
a76 2
	register_t tf_svc_sp; /* Not used on arm26 */
	register_t tf_svc_lr; /* Not used on arm26 */
d98 1
a98 1
/* the pointers are use in the trampoline code to locate the ucontext */
a165 4
#ifdef _KERNEL
void validate_trapframe (trapframe_t *, int);
#endif /* _KERNEL */

d168 1
a168 8
/*
 * AST_ALIGNMENT_FAULT_LOCALS and ENABLE_ALIGNMENT_FAULTS
 * These are used in order to support dynamic enabling/disabling of
 * alignment faults when executing old a.out ARM binaries (which we do
 * not support).
 */

#define	AST_ALIGNMENT_FAULT_LOCALS					;\
d172 1
a172 3
#define	ENABLE_ALIGNMENT_FAULTS		/* nothing */

#define	DO_AST_AND_RESTORE_ALIGNMENT_FAULTS				\
a202 3
 *
 * NOTE: r13 and r14 are stored separately as a work around for the
 * SA110 rev 2 STM^ bug
d208 1
a208 3
	stmia	sp, {r0-r12};		/* Push the user mode registers */ \
	add	r0, sp, #(4*13);	/* Adjust the stack pointer */	   \
	stmia	r0, {r13-r14}^;		/* Push the user mode registers */ \
a231 3
 *
 * NOTE: r13 and r14 are stored separately as a work around for the
 * SA110 rev 2 STM^ bug
d250 1
a250 3
	stmia	sp, {r0-r12};		/* Push the user mode registers */ \
	add	r0, sp, #(4*13);	/* Adjust the stack pointer */	   \
	stmia	r0, {r13-r14}^;		/* Push the user mode registers */ \
@


1.2
log
@de __P of sys/arch/arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.1 2004/02/01 05:09:49 drahn Exp $	*/
d175 2
a176 1
 * alignment faults when executing old a.out ARM binaries.
a177 115
#if defined(COMPAT_15) && defined(EXEC_AOUT)
#ifndef MULTIPROCESSOR

/*
 * Local variables needed by the AST/Alignment Fault macroes
 */
#define	AST_ALIGNMENT_FAULT_LOCALS					\
.Laflt_astpending:							;\
	.word	_C_LABEL(astpending)					;\
.Laflt_cpufuncs:							;\
	.word	_C_LABEL(cpufuncs)					;\
.Laflt_curpcb:								;\
	.word	_C_LABEL(curpcb)					;\
.Laflt_cpu_info_store:							;\
	.word	_C_LABEL(cpu_info_store)

#define	GET_CURPCB_ENTER						\
	ldr	r1, .Laflt_curpcb					;\
	ldr	r1, [r1]

#define	GET_CPUINFO_ENTER						\
	ldr	r0, .Laflt_cpu_info_store

#define	GET_CURPCB_EXIT							\
	ldr	r1, .Laflt_curpcb					;\
	ldr	r2, .Laflt_cpu_info_store				;\
	ldr	r1, [r1]

#else /* !MULTIPROCESSOR */

#define	AST_ALIGNMENT_FAULT_LOCALS					\
.Laflt_astpending:							;\
	.word	_C_LABEL(astpending)					;\
.Laflt_cpufuncs:							;\
	.word	_C_LABEL(cpufuncs)					;\
.Laflt_cpu_info:							;\
	.word	_C_LABEL(cpu_info)

#define	GET_CURPCB_ENTER						\
	ldr	r4, .Laflt_cpu_info					;\
	bl	_C_LABEL(cpu_number)					;\
	ldr	r0, [r4, r0, lsl #2]					;\
	ldr	r1, [r0, #CI_CURPCB]

#define	GET_CPUINFO_ENTER	/* nothing to do */

#define	GET_CURPCB_EXIT							\
	ldr	r7, .Laflt_cpu_info					;\
	bl	_C_LABEL(cpu_number)					;\
	ldr	r2, [r7, r0, lsl #2]					;\
	ldr	r1, [r2, #CI_CURPCB]
#endif /* MULTIPROCESSOR */

/*
 * This macro must be invoked following PUSHFRAMEINSVC or PUSHFRAME at
 * the top of interrupt/exception handlers.
 *
 * When invoked, r0 *must* contain the value of SPSR on the current
 * trap/interrupt frame. This is always the case if ENABLE_ALIGNMENT_FAULTS
 * is invoked immediately after PUSHFRAMEINSVC or PUSHFRAME.
 */
#define	ENABLE_ALIGNMENT_FAULTS						\
	and	r0, r0, #(PSR_MODE)	/* Test for USR32 mode */	;\
	teq	r0, #(PSR_USR32_MODE)					;\
	bne	1f			/* Not USR mode skip AFLT */	;\
	GET_CURPCB_ENTER		/* r1 = curpcb */		;\
	cmp	r1, #0x00		/* curpcb NULL? */		;\
	ldrne	r1, [r1, #PCB_FLAGS]	/* Fetch curpcb->pcb_flags */	;\
	tstne	r1, #PCB_NOALIGNFLT					;\
	beq	1f			/* AFLTs already enabled */	;\
	GET_CPUINFO_ENTER		/* r0 = cpuinfo */		;\
	ldr	r2, .Laflt_cpufuncs					;\
	ldr	r1, [r0, #CI_CTRL]	/* Fetch control register */	;\
	mov	r0, #-1							;\
	mov	lr, pc							;\
	ldr	pc, [r2, #CF_CONTROL]	/* Enable alignment faults */	;\
1:

/*
 * This macro must be invoked just before PULLFRAMEFROMSVCANDEXIT or
 * PULLFRAME at the end of interrupt/exception handlers.
 */
#define	DO_AST_AND_RESTORE_ALIGNMENT_FAULTS				\
	ldr	r0, [sp]		/* Get the SPSR from stack */	;\
	mrs	r4, cpsr		/* save CPSR */			;\
	and	r0, r0, #(PSR_MODE)	/* Returning to USR mode? */	;\
	teq	r0, #(PSR_USR32_MODE)					;\
	ldreq	r5, .Laflt_astpending					;\
	bne	3f			/* Nope, get out now */		;\
	bic	r4, r4, #(I32_bit)					;\
1:	orr	r0, r4, #(I32_bit)	/* Disable IRQs */		;\
	msr	cpsr_c, r0						;\
	ldr	r1, [r5]		/* Pending AST? */		;\
	teq	r1, #0x00000000						;\
	bne	2f			/* Yup. Go deal with it */	;\
	GET_CURPCB_EXIT			/* r1 = curpcb, r2 = cpuinfo */	;\
	cmp	r1, #0x00		/* curpcb NULL? */		;\
	ldrne	r1, [r1, #PCB_FLAGS]	/* Fetch curpcb->pcb_flags */	;\
	tstne	r1, #PCB_NOALIGNFLT					;\
	beq	3f			/* Keep AFLTs enabled */	;\
	ldr	r1, [r2, #CI_CTRL]	/* Fetch control register */	;\
	ldr	r2, .Laflt_cpufuncs					;\
	mov	r0, #-1							;\
	bic	r1, r1, #CPU_CONTROL_AFLT_ENABLE  /* Disable AFLTs */	;\
	adr	lr, 3f							;\
	ldr	pc, [r2, #CF_CONTROL]	/* Set new CTRL reg value */	;\
2:	mov	r1, #0x00000000						;\
	str	r1, [r5]		/* Clear astpending */		;\
	msr	cpsr_c, r4		/* Restore interrupts */	;\
	mov	r0, sp							;\
	adr	lr, 1b							;\
	b	_C_LABEL(ast)		/* ast(frame) */		;\
3:

#else	/* !(COMPAT_15 && EXEC_AOUT) */
a204 1
#endif /* COMPAT_15 && EXEC_AOUT */
@


1.1
log
@Arm port, NetBSD codebase stripped down, 32bit only support.
@
text
@d1 1
a1 1
/*	$OpenBSD: frame.h,v 1.2 2004/01/29 16:17:16 drahn Exp $	*/
d167 1
a167 1
void validate_trapframe __P((trapframe_t *, int));
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@Merge with the trunk
@
text
@d167 1
a167 1
void validate_trapframe (trapframe_t *, int);
@


