head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.19.20.18.03;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.02.21.53.17;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.16.22.52.09;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.15.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.13.05.19.01;	author smurph;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	99.09.27.19.29.59;	author smurph;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	98.12.15.06.32.34;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	98.08.22.08.27.08;	author smurph;	state Exp;
branches;
next	;

1.3.4.1
date	2001.04.18.16.11.47;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.03.28.10.36.03;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.37.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: bootxx.c,v 1.9 2011/03/13 00:13:53 deraadt Exp $ */

/*
 * Copyright (c) 1994 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This is a generic "first-stage" boot program.
 *
 * Note that this program has absolutely no filesystem knowledge!
 *
 * Instead, this uses a table of disk block numbers that are
 * filled in by the installboot program such that this program
 * can load the "second-stage" boot program.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/exec.h>
#include <machine/prom.h>

#include "stand.h"
#include "libsa.h"

/*
 * Boot device is derived from ROM provided information.
 */

/* This determines the largest boot program we can load. */
#define MAXBLOCKNUM	64

/*
 * These three names are known by installboot.
 * The block_table contains starting block numbers,
 * in terms of 512-byte blocks.  Each non-zero value
 * will result in a read of block_size bytes.
 */
size_t     	block_size = 512;	/* default */
int     	block_count = MAXBLOCKNUM;	/* length of table */
daddr32_t 	block_table[MAXBLOCKNUM] = { 0 };

void	bugexec(void (*)());
int	copyboot(struct open_file *, char *);

int
main()
{
	struct open_file f;
	char *addr;
	int error;

	board_setup();

#ifdef DEBUG
	printf("boot device: ctrl=%d, dev=%d\n",
		bugargs.ctrl_lun, bugargs.dev_lun);
#endif

	f.f_flags = F_RAW;
	if (devopen(&f, 0, &addr)) {
		printf("bootxx: open failed\n");
		_rtt();
	}

	addr = (char *)STAGE2_RELOC;
	error = copyboot(&f, addr);
	f.f_dev->dv_close(&f);
	if (!error) {
		bugexec((void (*)())addr + 8);
	}
	/* copyboot had a problem... */
	_rtt();
	return (0);
}

int
copyboot(struct open_file *fp, char *addr)
{
	size_t n;
	int i, blknum;
	struct exec *x;

	addr -= sizeof(struct exec); /* assume OMAGIC, verify below */
	x = (struct exec *)addr;

	if (!block_count) {
		printf("bootxx: no data!?!\n");
		return -1;
	}

	for (i = 0; i < block_count; i++) {

		if ((blknum = block_table[i]) == 0)
			break;

#ifdef DEBUG
		printf("bootxx: read block # %d = %d\n", i, blknum);
#endif
		if ((fp->f_dev->dv_strategy)(fp->f_devdata, F_READ,
		    blknum, block_size, addr, &n)) {
			printf("bootxx: read failed\n");
			return -1;
		}
		if (n != block_size) {
			printf("bootxx: short read\n");
			return -1;
		}
		addr += block_size;
	}

	if (N_GETMAGIC(*x) != OMAGIC) {
		printf("bootxx: secondary bootstrap isn't in OMAGIC format\n");
		return(-1);
	}

	return 0;
}

void
bugexec(void (*addr)())
{
	(*addr)(bugargs.dev_lun, bugargs.ctrl_lun, bugargs.flags,
	    bugargs.ctrl_addr, (u_int)addr, bugargs.conf_blk,
	    bugargs.arg_start, bugargs.arg_end);

	printf("bugexec: %p returned!\n", addr);

	_rtt();
}
@


1.9
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.8 2008/09/19 20:18:03 miod Exp $ */
@


1.8
log
@Perform the mvme197 latency timer reprogramming in the boot blocks, in
addition to the kernel, and unconditionnaly handle all busswitch revision 1
based boards as horribly broken, even with 50MHz clocks.

Based on an report of an early 50MHz 197LE board being unable to boot,
due to memory corruption.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.7 2008/04/02 21:53:17 miod Exp $ */
d66 1
a66 1
daddr_t 	block_table[MAXBLOCKNUM] = { 0 };
@


1.7
log
@Rewrite the startup code for the mvme88k bootblocks, once again. Some of
them (especially the netboot ones) will now self-relocate, which makes
BUG configuration much simpler.

WARNING: for disk-based systems, you need to update bootxx and bootsd at the
same time. New bootsd will not run when loaded from an older bootxx.
This doesn't matter much since you need both with installboot.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.6 2006/05/16 22:52:09 miod Exp $ */
a67 2
extern		char *version;

d78 2
a79 1
	printf("\nbootxx: first level bootstrap program [%s]\n", version);
@


1.6
log
@Make standalone binaries compile with -Wall -Werror
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.5 2002/03/14 03:15:57 millert Exp $ */
d70 1
d144 12
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.4 2001/01/13 05:19:01 smurph Exp $ */
d64 1
a64 1
int     	block_size = 512;	/* default */
d70 1
d72 1
d75 3
a77 3
	struct open_file	f;
	char	*addr;
	int n, error;
d79 3
a81 1
	printf("Boot: bug device: ctrl=%d, dev=%d\n", 
d83 1
a83 1
	printf("\nbootxx: first level bootstrap program [%s]\n\n", version);
d99 1
d103 1
a103 3
copyboot(fp, addr)
	struct open_file	*fp;
	char			*addr;
d105 2
a106 1
	int	n, i, blknum;
d126 1
a126 2
					   blknum, block_size, addr, &n))
		{
@


1.4
log
@Booting kernel with MACHINE_NEW_NONCONTIG.  UVM code added but not working.
New stand config.  Lots of header fixes.  Can now cross-compile i386->m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.3 1999/09/27 19:29:59 smurph Exp $ */
d87 1
a87 1
	addr = (char*)STAGE2_RELOC;
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.4 2001/01/13 05:19:01 smurph Exp $ */
d87 1
a87 1
	addr = (char *)STAGE2_RELOC;
@


1.3
log
@changed loader load address.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.2 1998/12/15 06:32:34 smurph Exp $ */
a53 2
#define LOADADDR	0x7F0000 /* where to load level 2 bootstrap */
				/* (l2 must relocate itself) */
d87 1
a87 1
	addr = (char*)LOADADDR;
@


1.3.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.4 2001/01/13 05:19:01 smurph Exp $ */
d54 2
d89 1
a89 1
	addr = (char*)STAGE2_RELOC;
@


1.3.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d87 1
a87 1
	addr = (char *)STAGE2_RELOC;
@


1.2
log
@This fixed a number of things.  A serious bug in bugcrt.c's initial stack
among other things.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.1 1998/08/22 08:27:08 smurph Exp $ */
d54 1
a54 1
#define LOADADDR	0xCf0000 /* where to load level 2 bootstrap */
@


1.1
log
@Initial import of bootxx.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootxx.c,v 1.5 1995/10/13 21:44:57 gwr Exp $ */
d54 1
a54 1
#define LOADADDR	0x11000 /* where to load level 2 bootstrap */
d93 1
a93 1
		bugexec((void (*)())addr);
@

