head	1.7;
access;
symbols
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.2
	UBC_BASE:1.4
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.7
date	2008.04.02.21.53.18;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2006.05.16.22.51.30;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.02.13.24.39;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.16.23.49.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.13.08.55.52;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.01.03.38.23;	author smurph;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.01.13.05.19.01;	author smurph;	state Exp;
branches;
next	;

1.2.2.1
date	2001.04.18.16.11.48;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.02.19.10.49.09;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Rewrite the startup code for the mvme88k bootblocks, once again. Some of
them (especially the netboot ones) will now self-relocate, which makes
BUG configuration much simpler.

WARNING: for disk-based systems, you need to update bootxx and bootsd at the
same time. New bootsd will not run when loaded from an older bootxx.
This doesn't matter much since you need both with installboot.
@
text
@/*	$OpenBSD: crt.c,v 1.6 2006/05/16 22:51:30 miod Exp $ */

#include <sys/types.h>
#include <machine/prom.h>

#include "stand.h"
#include "libbug.h"

struct mvmeprom_args bugargs;

__asm__ (".text");
__asm__ (STACK_ASM_OP);		/* initial sp value */
__asm__ (".long _start");	/* initial ip value */

extern void main(void);

void
start(u_int dev_lun, u_int ctrl_lun, u_int flags, u_int ctrl_addr, u_int entry,
    u_int conf_blk, char *arg_start, char *arg_end)
{
	extern u_int edata, end;
	char *nbarg_start;
	char *nbarg_end;
	u_int dummy;

	/*
	 * Save r10 and r11 first. We can't put declare them as arguments
	 * since the normal calling convention would put them on the stack.
	 */
	__asm__ __volatile__ ("or %0, r0, r10" : "=r" (nbarg_start) : :
	    "r10", "r11");
	__asm__ __volatile__ ("or %0, r0, r11" : "=r" (nbarg_end) : :
	    "r10", "r11");

	/*
	 * This code enables the SFU1 and is used for single stage
	 * bootstraps or the first stage of a two stage bootstrap.
	 * Do not use lower registers to enable the SFU1. This wipes out
	 * the args.  Not cool at all... r25 seems free.
	 */
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (dummy));
	__asm__ __volatile__ ("clr %0, %0, 1<3>; stcr %0, cr1" : "+r" (dummy));

	memset(&edata, 0, ((int)&end - (int)&edata));

	bugargs.dev_lun = dev_lun;
	bugargs.ctrl_lun = ctrl_lun;
	bugargs.flags = flags;
	bugargs.ctrl_addr = ctrl_addr;
	bugargs.entry = entry;
	bugargs.conf_blk = conf_blk;
	bugargs.arg_start = arg_start;
	bugargs.arg_end = arg_end;
	bugargs.nbarg_start = nbarg_start;
	bugargs.nbarg_end = nbarg_end;
	*bugargs.arg_end = '\0';

	main();
	_rtt();
	/* NOTREACHED */
}

void
__main()
{
}

void
bugexec(void (*addr)())
{
	(*addr)(bugargs.dev_lun, bugargs.ctrl_lun, bugargs.flags,
	    bugargs.ctrl_addr, bugargs.entry, bugargs.conf_blk,
	    bugargs.arg_start, bugargs.arg_end);

	printf("bugexec: %p returned!\n", addr);

	_rtt();
}
@


1.6
log
@Cleanup of mvme88k standalone code, with rewritten startup code with
fewer assembly statements and much less magic, a few display artefacts
removed, and private definitions moved out of the main prom.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.5 2003/10/02 13:24:39 miod Exp $ */
@


1.5
log
@Upon invoking the freshly loaded binary, populate registers via embedded asm
statements, and be sure of what we get, rather than use "hinted" register
local variables; bugcrt can now be compiled with compiler optimization enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.4 2001/12/16 23:49:47 miod Exp $ */
d6 2
a7 1
struct mvmeprom_args bugargs = { 1 };	       /* not BSS */
d9 7
a15 4
asm (".text");
/* pseudo reset vector */
asm (STACK_ASM_OP);	/* initial sp value */
asm (".long _start");	/* initial ip value */
d18 2
a19 1
start()
d21 13
a33 2
	extern int edata, end;
	struct mvmeprom_brdid *id, *mvmeprom_brdid();
d35 2
a36 2
	/* 
	 * This code enables the SFU1 and is used for single stage 
d38 2
a39 2
	 * Do not use r10 to enable the SFU1. This wipes out
	 * the netboot args.  Not cool at all... r25 seems free. 
d41 2
a42 58
	asm("|	enable SFU1");
	asm("	ldcr	r25,cr1" ::: "r25");
	asm("	clr	r25,r25,1<3>"); /* bit 3 is SFU1D */
	asm("	stcr	r25,cr1");

	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_DEVLUN :
	    "=r" (bugargs.dev_lun));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_CTRLLUN :
	    "=r" (bugargs.ctrl_lun));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_FLAGS :
	    "=r" (bugargs.flags));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_CTRLADDR :
	    "=r" (bugargs.ctrl_addr));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_ENTRY :
	    "=r" (bugargs.entry));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_CONFBLK :
	    "=r" (bugargs.conf_blk));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_ARGSTART :
	    "=r" (bugargs.arg_start));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_ARGEND :
	    "=r" (bugargs.arg_end));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_NBARGSTART :
	    "=r" (bugargs.nbarg_start));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_NBARGEND :
	    "=r" (bugargs.nbarg_end));
	*bugargs.arg_end = 0;      

	id = mvmeprom_brdid();
	bugargs.cputyp = id->model;

#ifdef notyet /* STAGE1 */
	/* 
	 * Initialize PSR and CMMU to a known, stable state. 
	 * This has to be done early for MVME197.
	 * Per EB162 mc88110 engineering bulletin.
	 */
	if (bugargs.cputyp == 0x197) {
		asm("|	init MVME197");
		asm("|	1. PSR");
		asm("or.u   r2,r0,0xA200");
		asm("or     r2,r2,0x03E2");
		asm("stcr   r2,cr1");
		asm("|	2. ICTL");
		asm("or     r2,r0,r0");
		asm("or     r2,r2,0x8000");
		asm("or     r2,r2,0x0040");
		asm("stcr   r2,cr26");
		asm("|	3. DCTL");
		asm("or     r2,r0,r0");
		asm("or     r2,r2,0x2000");
		asm("or     r2,r2,0x0040");
		asm("stcr   r2,cr41");
		asm("|	4. init cache");
		asm("or     r2,r0,0x01");
		asm("stcr   r2,cr25");
		asm("stcr   r2,cr40");
	}
#endif
d46 12
a57 1
	asm  ("|	main()");
d59 1
a59 1
	mvmeprom_return();
d69 1
a69 1
bugexec(void (*addr)(void))
d71 3
a73 16
	__asm__ __volatile__ ("or " MVMEPROM_REG_DEVLUN ", r0, %0" ::
	    "r" (bugargs.dev_lun));
	__asm__ __volatile__ ("or " MVMEPROM_REG_CTRLLUN ", r0, %0" ::
	    "r" (bugargs.ctrl_lun));
	__asm__ __volatile__ ("or " MVMEPROM_REG_FLAGS ", r0, %0" ::
	    "r" (bugargs.flags));
	__asm__ __volatile__ ("or " MVMEPROM_REG_CTRLADDR ", r0, %0" ::
	    "r" (bugargs.ctrl_addr));
	__asm__ __volatile__ ("or " MVMEPROM_REG_ENTRY ", r0, %0" ::
	    "r" (bugargs.entry));
	__asm__ __volatile__ ("or " MVMEPROM_REG_CONFBLK ", r0, %0" ::
	    "r" (bugargs.conf_blk));
	__asm__ __volatile__ ("or " MVMEPROM_REG_ARGSTART ", r0, %0" ::
	    "r" (bugargs.arg_start));
	__asm__ __volatile__ ("or " MVMEPROM_REG_ARGEND ", r0, %0" ::
	    "r" (bugargs.arg_end));
d75 1
a75 2
	(*addr)();
	printf("bugexec: 0x%x returned!\n", addr);
@


1.4
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.2 2001/02/01 03:38:23 smurph Exp $ */
d6 1
a6 1
struct mvmeprom_args bugargs = { 1};	       /* not BSS */
d12 2
a15 10
	register int dev_lun asm (MVMEPROM_REG_DEVLUN);
	register int ctrl_lun asm (MVMEPROM_REG_CTRLLUN);
	register int flags asm (MVMEPROM_REG_FLAGS);
	register int ctrl_addr asm (MVMEPROM_REG_CTRLADDR);
	register int entry asm (MVMEPROM_REG_ENTRY);
	register int conf_blk asm (MVMEPROM_REG_CONFBLK);
	register char *arg_start asm (MVMEPROM_REG_ARGSTART);
	register char *arg_end asm (MVMEPROM_REG_ARGEND);
	register char *nbarg_start asm (MVMEPROM_REG_NBARGSTART);
	register char *nbarg_end asm (MVMEPROM_REG_NBARGEND);
d26 1
a26 1
	asm("	ldcr	r25,cr1");
d30 20
a49 10
	bugargs.dev_lun = dev_lun;
	bugargs.ctrl_lun = ctrl_lun;
	bugargs.flags = flags;
	bugargs.ctrl_addr = ctrl_addr;
	bugargs.entry = entry;
	bugargs.conf_blk = conf_blk;
	bugargs.arg_start = arg_start;
	bugargs.arg_end = arg_end;
	bugargs.nbarg_start = nbarg_start;
	bugargs.nbarg_end = nbarg_end;
d92 1
d98 1
a98 4
bugexec(addr)

void (*addr)();

d100 16
a115 17
	register int dev_lun asm (MVMEPROM_REG_DEVLUN);
	register int ctrl_lun asm (MVMEPROM_REG_CTRLLUN);
	register int flags asm (MVMEPROM_REG_FLAGS);
	register int ctrl_addr asm (MVMEPROM_REG_CTRLADDR);
	register int entry asm (MVMEPROM_REG_ENTRY);
	register int conf_blk asm (MVMEPROM_REG_CONFBLK);
	register char *arg_start asm (MVMEPROM_REG_ARGSTART);
	register char *arg_end asm (MVMEPROM_REG_ARGEND);

	dev_lun = bugargs.dev_lun;
	ctrl_lun = bugargs.ctrl_lun;
	flags = bugargs.flags;
	ctrl_addr = bugargs.ctrl_addr;
	entry = bugargs.entry;
	conf_blk = bugargs.conf_blk;
	arg_start = bugargs.arg_start;
	arg_end = bugargs.arg_end;
a121 1

@


1.3
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@a35 2
	asm("	set	r25,r25,1<25>"); /* bit 25 is Serialize */
	asm("	set	r25,r25,1<29>"); /* bit 29 is Serial mode execution */
@


1.2
log
@Major changes to get MVME188 working.  More header and code cleanups.  The
kernel is tested on MVME188A/2P256 and MVME188A/1P64.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.1 2001/01/13 05:19:01 smurph Exp $ */
d36 2
@


1.2.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.2 2001/02/01 03:38:23 smurph Exp $ */
@


1.2.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d6 1
a6 1
struct mvmeprom_args bugargs = { 1 };	       /* not BSS */
a11 2

void
d14 10
d34 1
a34 1
	asm("	ldcr	r25,cr1" ::: "r25");
d38 10
a47 20
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_DEVLUN :
	    "=r" (bugargs.dev_lun));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_CTRLLUN :
	    "=r" (bugargs.ctrl_lun));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_FLAGS :
	    "=r" (bugargs.flags));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_CTRLADDR :
	    "=r" (bugargs.ctrl_addr));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_ENTRY :
	    "=r" (bugargs.entry));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_CONFBLK :
	    "=r" (bugargs.conf_blk));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_ARGSTART :
	    "=r" (bugargs.arg_start));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_ARGEND :
	    "=r" (bugargs.arg_end));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_NBARGSTART :
	    "=r" (bugargs.nbarg_start));
	__asm__ __volatile__ ("or %0, r0, " MVMEPROM_REG_NBARGEND :
	    "=r" (bugargs.nbarg_end));
a89 1
void
d95 4
a98 1
bugexec(void (*addr)(void))
d100 17
a116 16
	__asm__ __volatile__ ("or " MVMEPROM_REG_DEVLUN ", r0, %0" ::
	    "r" (bugargs.dev_lun));
	__asm__ __volatile__ ("or " MVMEPROM_REG_CTRLLUN ", r0, %0" ::
	    "r" (bugargs.ctrl_lun));
	__asm__ __volatile__ ("or " MVMEPROM_REG_FLAGS ", r0, %0" ::
	    "r" (bugargs.flags));
	__asm__ __volatile__ ("or " MVMEPROM_REG_CTRLADDR ", r0, %0" ::
	    "r" (bugargs.ctrl_addr));
	__asm__ __volatile__ ("or " MVMEPROM_REG_ENTRY ", r0, %0" ::
	    "r" (bugargs.entry));
	__asm__ __volatile__ ("or " MVMEPROM_REG_CONFBLK ", r0, %0" ::
	    "r" (bugargs.conf_blk));
	__asm__ __volatile__ ("or " MVMEPROM_REG_ARGSTART ", r0, %0" ::
	    "r" (bugargs.arg_start));
	__asm__ __volatile__ ("or " MVMEPROM_REG_ARGEND ", r0, %0" ::
	    "r" (bugargs.arg_end));
d123 1
@


1.1
log
@Booting kernel with MACHINE_NEW_NONCONTIG.  UVM code added but not working.
New stand config.  Lots of header fixes.  Can now cross-compile i386->m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt.c,v 1.1 2001/01/02 19:30:00 smurph Exp $ */
a26 1
#ifdef STAGE1
d35 1
a35 1
	asm("	xor	r25,r25,0x8");
a36 1
#endif
@

