head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_4:1.8.0.10
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.2
	UBC_BASE:1.8
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	first_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.10.01.22.50.56;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2001.12.16.23.49.47;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.13.08.55.52;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.13.05.19.01;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	99.09.27.19.30.00;	author smurph;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	98.12.15.06.12.50;	author smurph;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.09.16.47;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	97.03.03.19.08.31;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.10.54.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.54.21;	author deraadt;	state Exp;
branches;
next	;

1.5.4.1
date	2001.04.18.16.11.48;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2004.02.19.10.49.09;	author niklas;	state dead;
branches;
next	;


desc
@@


1.9
log
@Unused bits.
@
text
@/*	$OpenBSD: bugcrt.c,v 1.8 2001/12/16 23:49:47 miod Exp $ */

/* 
 * This is the startup file for single stage bootstraps or the first 
 * stage of a two stage bootstrap.  It includes code to enable the 
 * SFU1.
 */

#include <sys/types.h>
#include <machine/prom.h>

struct mvmeprom_args bugargs = { 1};	       /* not BSS */

	asm (".text");
	/* pseudo reset vector */
	asm (STACK_ASM_OP);	/* initial sp value */
	asm (".long _start");	/* initial ip value */
start()
{
	register int dev_lun asm (MVMEPROM_REG_DEVLUN);
	register int ctrl_lun asm (MVMEPROM_REG_CTRLLUN);
	register int flags asm (MVMEPROM_REG_FLAGS);
	register int ctrl_addr asm (MVMEPROM_REG_CTRLADDR);
	register int entry asm (MVMEPROM_REG_ENTRY);
	register int conf_blk asm (MVMEPROM_REG_CONFBLK);
	register char *arg_start asm (MVMEPROM_REG_ARGSTART);
	register char *arg_end asm (MVMEPROM_REG_ARGEND);
	register char *nbarg_start asm (MVMEPROM_REG_NBARGSTART);
	register char *nbarg_end asm (MVMEPROM_REG_NBARGEND);
	extern int edata, end;
	struct mvmeprom_brdid *id, *mvmeprom_brdid();

#ifdef STAGE1
	/* Do not use r10 to enable the SFU1. This wipes out 
	   the netboot args.  Not cool at all... r25 seems free. */
	asm("|	enable SFU1");
	asm("	ldcr	r25,cr1");
	asm("	xor	r25,r25,0x8");
	asm("	stcr	r25,cr1");
#endif

	bugargs.dev_lun = dev_lun;
	bugargs.ctrl_lun = ctrl_lun;
	bugargs.flags = flags;
	bugargs.ctrl_addr = ctrl_addr;
	bugargs.entry = entry;
	bugargs.conf_blk = conf_blk;
	bugargs.arg_start = arg_start;
	bugargs.arg_end = arg_end;
	bugargs.nbarg_start = nbarg_start;
	bugargs.nbarg_end = nbarg_end;
	*bugargs.arg_end = 0;      

	id = mvmeprom_brdid();
	bugargs.cputyp = id->model;

	/* 
	 * Initialize PSR and CMMU to a known, stable state. 
	 * This has to be done early for MVME197.
	 * Per EB162 mc88110 engineering bulletin.
	 */
	/*
	if (bugargs.cputyp == 0x197) {
	   asm("|	init MVME197");
	   asm("|	1. PSR");
	   asm("or.u   r2,r0,0xA200");
	   asm("or     r2,r2,0x03E2");
	   asm("stcr   r2,cr1");
	   asm("|	2. ICTL");
	   asm("or     r2,r0,r0");
	   asm("or     r2,r2,0x8000");
	   asm("or     r2,r2,0x0040");
	   asm("stcr   r2,cr26");
	   asm("|	3. DCTL");
	   asm("or     r2,r0,r0");
	   asm("or     r2,r2,0x2000");
	   asm("or     r2,r2,0x0040");
	   asm("stcr   r2,cr41");
	   asm("|	4. init cache");
	   asm("or     r2,r0,0x01");
	   asm("stcr   r2,cr25");
	   asm("stcr   r2,cr40");
	}
	*/
	memset(&edata, 0, ((int)&end - (int)&edata));

	asm  ("|	main()");
	main();
	mvmeprom_return();
	/* NOTREACHED */
}

__main()
{
}

void
bugexec(addr)

void (*addr)();

{
	register int dev_lun asm (MVMEPROM_REG_DEVLUN);
	register int ctrl_lun asm (MVMEPROM_REG_CTRLLUN);
	register int flags asm (MVMEPROM_REG_FLAGS);
	register int ctrl_addr asm (MVMEPROM_REG_CTRLADDR);
	register int entry asm (MVMEPROM_REG_ENTRY);
	register int conf_blk asm (MVMEPROM_REG_CONFBLK);
	register char *arg_start asm (MVMEPROM_REG_ARGSTART);
	register char *arg_end asm (MVMEPROM_REG_ARGEND);

	dev_lun = bugargs.dev_lun;
	ctrl_lun = bugargs.ctrl_lun;
	flags = bugargs.flags;
	ctrl_addr = bugargs.ctrl_addr;
	entry = bugargs.entry;
	conf_blk = bugargs.conf_blk;
	arg_start = bugargs.arg_start;
	arg_end = bugargs.arg_end;

	(*addr)();
	printf("bugexec: 0x%x returned!\n", addr);

	_rtt();
}

@


1.8
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugcrt.c,v 1.6 2001/01/13 05:19:01 smurph Exp $ */
@


1.7
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@a38 2
	asm("	set	r25,r25,1<25>"); /* bit 25 is Serialize */
	asm("	set	r25,r25,1<29>"); /* bit 29 is Serial mode execution */
@


1.6
log
@Booting kernel with MACHINE_NEW_NONCONTIG.  UVM code added but not working.
New stand config.  Lots of header fixes.  Can now cross-compile i386->m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugcrt.c,v 1.5 1999/09/27 19:30:00 smurph Exp $ */
d39 2
@


1.5
log
@changed loader load address.
@
text
@d1 8
a8 1
/*	$OpenBSD: bugcrt.c,v 1.4 1998/12/15 06:12:50 smurph Exp $ */
d12 1
a12 1
struct mvmeprom_args bugargs = { 1 };		/* not BSS */
d16 2
a17 2
	asm (".long 0x00Af0000"); /* initial sp value */
	asm (".long _start");     /* initial ip value */
d33 1
d36 5
a40 4
   asm("|	enable SFU1");
   asm("	ldcr	r25,cr1");
   asm("	xor	r25,r25,0x8");
   asm("	stcr	r25,cr1");
d52 2
a53 2
	*bugargs.arg_end = 0;
/*
d56 32
a87 32
*/	
   /* 
    * Initialize PSR and CMMU to a known, stable state. 
    * This has to be done early for MVME197.
    * Per EB162 mc88110 engineering bulletin.
    */
   /*
   if (bugargs.cputyp == 0x197) {
      asm("|	init MVME197");
      asm("|	1. PSR");
      asm("or.u   r2,r0,0xA200");
      asm("or     r2,r2,0x03E2");
      asm("stcr   r2,cr1");
      asm("|	2. ICTL");
      asm("or     r2,r0,r0");
      asm("or     r2,r2,0x8000");
      asm("or     r2,r2,0x0040");
      asm("stcr   r2,cr26");
      asm("|	3. DCTL");
      asm("or     r2,r0,r0");
      asm("or     r2,r2,0x2000");
      asm("or     r2,r2,0x0040");
      asm("stcr   r2,cr41");
      asm("|	4. init cache");
      asm("or     r2,r0,0x01");
      asm("stcr   r2,cr25");
      asm("stcr   r2,cr40");
   }
   */
   memset(&edata, 0, ((int)&end - (int)&edata));
   
   asm	("|	main()");
@


1.5.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 8
/*	$OpenBSD: bugcrt.c,v 1.6 2001/01/13 05:19:01 smurph Exp $ */

/* 
 * This is the startup file for single stage bootstraps or the first 
 * stage of a two stage bootstrap.  It includes code to enable the 
 * SFU1.
 */

d5 1
a5 1
struct mvmeprom_args bugargs = { 1};	       /* not BSS */
d9 2
a10 2
	asm (STACK_ASM_OP);	/* initial sp value */
	asm (".long _start");	/* initial ip value */
a25 1
#ifdef STAGE1
d28 4
a31 5
	asm("|	enable SFU1");
	asm("	ldcr	r25,cr1");
	asm("	xor	r25,r25,0x8");
	asm("	stcr	r25,cr1");
#endif
d43 2
a44 2
	*bugargs.arg_end = 0;      

d47 32
a78 32

	/* 
	 * Initialize PSR and CMMU to a known, stable state. 
	 * This has to be done early for MVME197.
	 * Per EB162 mc88110 engineering bulletin.
	 */
	/*
	if (bugargs.cputyp == 0x197) {
	   asm("|	init MVME197");
	   asm("|	1. PSR");
	   asm("or.u   r2,r0,0xA200");
	   asm("or     r2,r2,0x03E2");
	   asm("stcr   r2,cr1");
	   asm("|	2. ICTL");
	   asm("or     r2,r0,r0");
	   asm("or     r2,r2,0x8000");
	   asm("or     r2,r2,0x0040");
	   asm("stcr   r2,cr26");
	   asm("|	3. DCTL");
	   asm("or     r2,r0,r0");
	   asm("or     r2,r2,0x2000");
	   asm("or     r2,r2,0x0040");
	   asm("stcr   r2,cr41");
	   asm("|	4. init cache");
	   asm("or     r2,r0,0x01");
	   asm("stcr   r2,cr25");
	   asm("stcr   r2,cr40");
	}
	*/
	memset(&edata, 0, ((int)&end - (int)&edata));

	asm  ("|	main()");
@


1.5.4.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: bugcrt.c,v 1.5.4.1 2001/04/18 16:11:48 niklas Exp $ */
@


1.4
log
@Added sdcrt.c to make bootxx and bootsd work.
@
text
@d1 1
a1 1
/*	$OpenBSD: bugcrt.c,v 1.3 1998/08/22 09:16:47 smurph Exp $ */
d28 4
a31 4
asm	("|	enable SFU1");
asm	("	ldcr	r25,cr1");
asm	("	xor	r25,r25,0x8");
asm	("	stcr	r25,cr1");
d44 1
a44 3

	memset(&edata, 0, ((int)&end - (int)&edata));

d47 32
a78 1

@


1.3
log
@fixed bugargs and lots of stuff regaurding netboot.
@
text
@d1 1
a1 1
/*	$OpenBSD:	$ */
d8 3
a10 2
	asm (".long 0x003ffff8");
	asm (".long _start");
d28 4
a31 4
asm	("#	enable SFU1");
asm	("		ldcr	r25,cr1");
asm	("		xor	r25,r25,0x8");
asm	("		stcr	r25,cr1");
d45 2
a46 1
	bzero(&edata, (&end - &edata)); 
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@d1 51
a51 1
#include "bug.h"
d53 3
a55 5
asm	("		text");
/*asm	("_stack:	word _stack0xFC0000;	stack");*/
asm	("stack:	word stack");
asm	("		word _start");
asm	("		align 8");
d57 4
a60 1
struct bugenv bugenv;
a61 1
start()
d63 17
a79 24
	register int dlun 	asm("r2");
	register int clun 	asm("r3");
	register int ipl  	asm("r4");
	register int (*entryptr)() asm("r6");
	register int *cfg	asm("r7");
	register char *strstr	asm("r8");
	register char *endstr	asm("r9");
	int i;
	char *str;
	
asm	(";	enable SFU1");
asm	("		ldcr	r10,cr1");
asm	("		xor	r10,r10,0x8");
asm	("		stcr	r10,cr1");

	bugenv.clun = clun;
	bugenv.dlun = dlun;
	bugenv.ipl  = ipl;
	bugenv.entry= entryptr;

	for (str = strstr, i = 0; str <= strstr; str++, i++) {
		bugenv.bootargs[i] = *str;
	}
	bugenv.bootargs[i] = 0;
d81 4
a84 2
	main(&bugenv);	
	bugreturn();
d86 1
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial 88k import; code by nivas and based on mach luna88k
@
text
@@
