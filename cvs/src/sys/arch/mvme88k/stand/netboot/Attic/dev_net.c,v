head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.34
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.32
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.30
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.28
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.26
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.24
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.22
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.20
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.18
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.16
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.6
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	mvme88kport:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.03.18.22.36.37;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2013.05.12.10.43.45;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.16.20.45.09;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.16.22.52.09;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	99.01.11.05.11.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.08.22.08.37.56;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.19.30.38;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.30.38;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: dev_net.c,v 1.6 2013/05/12 10:43:45 miod Exp $ */

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This module implements a "raw device" interface suitable for
 * use by the stand-alone I/O library NFS code.  This interface
 * does not support any "block" access, and exists only for the
 * purpose of initializing the network interface, getting boot
 * parameters, and performing the NFS mount.
 *
 * At open time, this does:
 *
 * find interface      - netif_open()
 * RARP for IP address - rarp_getipaddress()
 * RPC/bootparams      - callrpc(d, RPC_BOOTPARAMS, ...)
 * RPC/mountd          - nfs_mount(sock, ip, path)
 *
 * the root file handle from mountd is saved in a global
 * for use by the NFS open code (NFS/lookup).
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/in_systm.h>

#include <machine/prom.h>

#include "stand.h"
#include "libsa.h"
#include "net.h"
#include "netif.h"
#include "config.h"
#include "bootparam.h"
#include "nfs.h"

extern int nfs_root_node[];	/* XXX - get from nfs_mount() */

int netdev_sock = -1;
static int open_count;

int	net_mountroot(struct open_file *, char *);

/*
 * Called by devopen after it sets f->f_dev to our devsw entry.
 * This opens the low-level device and sets f->f_devdata.
 */
int
net_open(f, devname)
	struct open_file *f;
	char *devname;		/* Device part of file name (or NULL). */
{
	int error = 0;

	/* On first open, do netif open, mount, etc. */
	if (open_count == 0) {
		/* Find network interface. */
		if ((netdev_sock = netif_open(devname)) < 0)
			return (error=ENXIO);
		if ((error = net_mountroot(f, devname)) != 0)
			return (error);
	}
	open_count++;
	f->f_devdata = nfs_root_node;
	return (error);
}

int
net_close(f)
	struct open_file *f;
{
	/* On last close, do netif close, etc. */
	if (open_count > 0)
		if (--open_count == 0)
			netif_close(netdev_sock);
	f->f_devdata = NULL;
	return (0);
}

int
net_ioctl()
{
	return EIO;
}

int
net_strategy()
{
	return EIO;
}

int
net_mountroot(f, devname)
	struct open_file *f;
	char *devname;		/* Device part of file name (or NULL). */
{
	int error;

#ifdef DEBUG
	printf("net_mountroot: %s\n", devname);
#endif

	/*
	 * Get info for NFS boot: our IP address, our hostname,
	 * server IP address, and our root path on the server.
	 * There are two ways to do this:  The old, Sun way,
	 * and the more modern, BOOTP way. (RFC951, RFC1048)
	 */

#ifdef	SUN_BOOTPARAMS
	/* Get boot info using RARP and Sun bootparams. */

	/* Get our IP address.  (rarp.c) */
	if (rarp_getipaddress(netdev_sock) == -1)
		return (EIO);
	printf("boot: client IP address: %s\n", intoa(myip.s_addr));

	/* Get our hostname, server IP address. */
	if (bp_whoami(netdev_sock))
		return (EIO);
	printf("boot: client name: %s\n", hostname);

	/* Get the root pathname. */
	if (bp_getfile(netdev_sock, "root", &rootip, rootpath))
		return (EIO);

#else

	/* Get boot info using BOOTP way. (RFC951, RFC1048) */
	bootp(netdev_sock);

	printf("Using IP address: %s\n", intoa(myip.s_addr));

	printf("myip: %s (%s)", hostname, intoa(myip));
	if (gateip)
		printf(", gateip: %s", intoa(gateip));
#if 0
	if (mask)
		printf(", mask: %s", intoa(mask));
#endif
	printf("\n");

#endif

	printf("root addr=%s path=%s\n", intoa(rootip.s_addr), rootpath);

	/* Get the NFS file handle (mount). */
	error = nfs_mount(netdev_sock, rootip, rootpath);

	return (error);
}
@


1.6
log
@S-Records boot code for mvme88k, finally. Allows a kernel to be loaded from
network, using either the on-board interface (on MVME187 and MVME197) or
any MVME376.

While there, add MVME376 support to netboot.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.5 2013/01/16 20:45:09 miod Exp $ */
@


1.5
log
@Nuke commons with libsa and add --warn-common to the ld command lines.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.4 2006/05/16 22:52:09 miod Exp $ */
a181 21
}

/*
 * machdep_common_ether: get ethernet address
 */
void
machdep_common_ether(ether)
	u_char *ether;
{
	u_char *ea;

	ea = (u_char *) ETHER_ADDR_16X;

	if (ea[0] + ea[1] + ea[2] + ea[3] + ea[4] + ea[5] == 0)
		panic("ERROR: ethernet address not set!");
	ether[0] = ea[0];
	ether[1] = ea[1];
	ether[2] = ea[2];
	ether[3] = ea[3];
	ether[4] = ea[4];
	ether[5] = ea[5];
@


1.4
log
@Make standalone binaries compile with -Wall -Werror
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.3 1999/01/11 05:11:46 millert Exp $ */
a69 3
struct in_addr myip, rootip, gateip, mask;
char rootpath[FNAME_SIZE];

d168 1
d171 1
@


1.3
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.2 1998/08/22 08:37:56 smurph Exp $ */
d66 1
d76 2
d111 1
@


1.2
log
@working netboot.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev_net.c,v 1.6 1996/05/16 02:55:36 chuck Exp $ */
d193 1
a193 1
		panic("ERROR: ethernet address not set!\r\n");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: dev_net.c,v 1.4 1995/11/17 22:13:11 deraadt Exp $ */
d58 2
d61 1
a188 1
	extern int cputyp;
d190 1
a190 2
	if (cputyp == CPU_147) {
		ea = (u_char *) ETHER_ADDR_147;
d192 8
a199 20
		if ((*(int *) ea & 0x2fffff00) == 0x2fffff00)
			panic("ERROR: ethernet address not set!\r\n");
		ether[0] = 0x08;
		ether[1] = 0x00;
		ether[2] = 0x3e;
		ether[3] = ea[0];
		ether[4] = ea[1];
		ether[5] = ea[2];
	} else {
		ea = (u_char *) ETHER_ADDR_16X;

		if (ea[0] + ea[1] + ea[2] + ea[3] + ea[4] + ea[5] == 0)
			panic("ERROR: ethernet address not set!\r\n");
		ether[0] = ea[0];
		ether[1] = ea[1];
		ether[2] = ea[2];
		ether[3] = ea[3];
		ether[4] = ea[4];
		ether[5] = ea[5];
	}
@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@@
