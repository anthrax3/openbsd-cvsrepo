head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.28
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.26
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.24
	OPENBSD_5_0:1.3.0.22
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.20
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.18
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.22
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.20
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.18
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.16
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.14
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.12
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	SMP:1.1.1.1.0.14
	SMP_BASE:1.1.1.1
	kame_19991208:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.12
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.10
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.8
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	mvme88kport:1.1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.05.12.10.43.45;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2006.05.16.22.52.26;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.04.08.09.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.19.30.41;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.30.41;	author rahnds;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2001.10.31.03.01.20;	author nate;	state Exp;
branches;
next	;


desc
@@


1.4
log
@S-Records boot code for mvme88k, finally. Allows a kernel to be loaded from
network, using either the on-board interface (on MVME187 and MVME197) or
any MVME376.

While there, add MVME376 support to netboot.
@
text
@/*	$OpenBSD: etherfun.h,v 1.3 2006/05/16 22:52:26 miod Exp $	*/

/*
 *
 * Copyright (c) 1995 Charles D. Cranor and Seth Widoff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor
 *	and Seth Widoff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* etherfun.h */

/* constants */
/* ether header */
#define ETYPE_RARP 0x8035  /* ethertype is RARP */
#define ETYPE_IP   0x800   /* ethertype is IP   */

/* rev arp */
#define PTYPE_IP 0x800     /* Protocol type is IP      */
#define OPCODE_RARP 3      /* Optype is REVARP request */
#define OPCODE_REPLY 4     /* Optype is REVARP reply   */

/* ip header */
#define  IPP_UDP 17	/* IP Protocol is UDP       */
#define  IP_VERSION 4      /* IP version number	*/
#define  IP_HLEN 5	 /* IP header length is a fixed 50 bytes */
#define N 1536

/* tftp header */
#define FTPOP_ACKN 4      /* Opcode is acknowledge     */
#define FTPOP_ERR 5       /* Opcode is Error	       */
#define FTP_PORT 69       /* Standard TFTP port number */
#define MSG "\0\1xxxxxxxx.mvme68k\0octet\0" /* implicit NULL */

/* data structures */

struct  ether_header {
	u_char  ether_dhost[6];
	u_char  ether_shost[6];
	u_short ether_type;
};

struct  ether_arp {
	u_short ar_hrd;		/* format of hardware address */
	u_short ar_pro;		/* format of protocol address */
	u_char  ar_hln;		/* length of hardware address */
	u_char  ar_pln;		/* length of protocol address */
	u_short ar_op;
	u_char  arp_sha[6];	/* sender hardware address */
	u_char  arp_spa[4];	/* sender protocol address */
	u_char  arp_tha[6];	/* target hardware address */
	u_char  arp_tpa[4];	/* target protocol address */
};

struct ip {
	u_char  ip_v:4,		/* version */
		ip_hl:4;	/* header length */
	u_char  ip_tos;		/* type of service */
	short   ip_len;		/* total length */
	u_short ip_id;		/* identification */
	short   ip_off;		/* fragment offset field */
#define IP_DF 0x4000		/* dont fragment flag */
#define IP_MF 0x2000		/* more fragments flag */
#define IP_OFFMASK 0x1fff	/* mask for fragmenting bits */
	u_char  ip_ttl;		/* time to live */
	u_char  ip_p;		/* protocol */
	u_short ip_sum;		/* checksum */
	u_char  ip_src[4];
	u_char  ip_dst[4];	/* source and dest address */
};

struct udp {
	u_short uh_sport;
	u_short uh_dport;
	short uh_ulen;
	u_short uh_sum;
};

struct tftph {
	u_short	op_code;
	u_short	block;
};

struct tftphr {
	struct tftph info;
	char	data[1];
};

/* globals */
int last_ack;
char buf[N];
struct ether_header *eh = (struct ether_header *)buf;
struct ether_arp *rarp = (struct ether_arp *)
	(buf + sizeof(struct ether_header));
struct ip *iph = (struct ip *)(buf + sizeof(struct ether_header));
struct udp *udph = (struct udp *)
	(buf + sizeof(struct ether_header) + sizeof(struct ip));
char *tftp_r = buf + sizeof(struct ether_header) + sizeof(struct ip) +
	sizeof(struct udp);
struct tftph *tftp_a = (struct tftph *)(buf + sizeof(struct ether_header) +
	sizeof(struct ip) + sizeof(struct udp));
struct tftphr *tftp = (struct tftphr *)(buf + sizeof(struct ether_header) +
	sizeof(struct ip) + sizeof(struct udp));
@


1.3
log
@Nuke whitespace at EOL
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.h,v 1.2 2001/07/04 08:09:31 niklas Exp $	*/
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d121 1
a121 1
char *tftp_r = buf + sizeof(struct ether_header) + sizeof(struct ip) + 
d123 1
a123 1
struct tftph *tftp_a = (struct tftph *)(buf + sizeof(struct ether_header) + 
d125 1
a125 1
struct tftphr *tftp = (struct tftphr *)(buf + sizeof(struct ether_header) + 
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@@


1.1.1.1.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

@

