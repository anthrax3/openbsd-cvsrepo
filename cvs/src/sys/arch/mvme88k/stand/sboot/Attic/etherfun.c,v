head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.48
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.46
	OPENBSD_5_0:1.3.0.44
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.42
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.40
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.36
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.38
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.34
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	SMP:1.1.1.1.0.14
	SMP_BASE:1.1.1.1
	kame_19991208:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.12
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.10
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.8
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	mvme88kport:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.05.12.10.43.45;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2012.12.05.23.20.14;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.20.17.02.31;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.04.08.09.30;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.19.30.41;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.30.41;	author rahnds;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2001.10.31.03.01.20;	author nate;	state Exp;
branches;
next	;


desc
@@


1.5
log
@S-Records boot code for mvme88k, finally. Allows a kernel to be loaded from
network, using either the on-board interface (on MVME187 and MVME197) or
any MVME376.

While there, add MVME376 support to netboot.
@
text
@/*	$OpenBSD: etherfun.c,v 1.4 2012/12/05 23:20:14 deraadt Exp $	*/

/*
 *
 * Copyright (c) 1995 Charles D. Cranor and Seth Widoff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor
 *	and Seth Widoff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* etherfun.c */

#include <sys/types.h>
#include "sboot.h"
#include "etherfun.h"

/* Construct and send a rev arp packet */
void
do_rev_arp()
{
	int     i;

	for (i = 0; i < 6; i++)
		eh->ether_dhost[i] = 0xff;

	bcopy(myea, eh->ether_shost, 6);
	eh->ether_type = ETYPE_RARP;

	rarp->ar_hrd = 1;	/* hardware type is 1 */
	rarp->ar_pro = PTYPE_IP;
	rarp->ar_hln = 6;	/* length of hardware address is 6 bytes */
	rarp->ar_pln = 4;	/* length of ip address is 4 byte */
	rarp->ar_op = OPCODE_RARP;
	bcopy(myea, rarp->arp_sha, sizeof(myea));
	bcopy(myea, rarp->arp_tha, sizeof(myea));
	for (i = 0; i < 4; i++)
		rarp->arp_spa[i] = rarp->arp_tpa[i] = 0x00;

	le_put(buf, 76);
}

/* Receive and disassemble the rev_arp reply */
int
get_rev_arp()
{
	le_get(buf, sizeof(buf), 6);
	if (eh->ether_type == ETYPE_RARP && rarp->ar_op == OPCODE_REPLY) {
		bcopy(rarp->arp_tpa, myip, sizeof(rarp->arp_tpa));
		bcopy(rarp->arp_spa, servip, sizeof(rarp->arp_spa));
		bcopy(rarp->arp_sha, servea, sizeof(rarp->arp_sha));
		return (1);
	}
	return (0);
}

/* Try to get a reply to a rev arp request */
int
rev_arp()
{
	int     tries = 0;
	while (tries < 5) {
		do_rev_arp();
		if (get_rev_arp())
			return (1);
		tries++;
	}
	return (0);
}

/*
 * Send a tftp read request or acknowledgement
 * mesgtype 0 is a read request, 1 is an
 * acknowledgement
 */
void
do_send_tftp(mesgtype)
	int mesgtype;
{
	u_long  res, iptmp, lcv;
	char   *tot;

	if (mesgtype == 0) {
		tot = tftp_r + (sizeof(MSG) - 1);
		myport = (u_short) time();
		if (myport < 1000)
			myport += 1000;
		servport = FTP_PORT;	/* to start */
	} else {
		tot = (char *) tftp_a + 4;
	}

	bcopy(servea, eh->ether_dhost, sizeof(servea));
	bcopy(myea, eh->ether_shost, sizeof(myea));
	eh->ether_type = ETYPE_IP;

	iph->ip_v = IP_VERSION;
	iph->ip_hl = IP_HLEN;
	iph->ip_tos = 0;	/* type of service is 0 */
	iph->ip_id = 0;		/* id field is 0 */
	iph->ip_off = IP_DF;
	iph->ip_ttl = 3;	/* time to live is 3 seconds/hops */
	iph->ip_p = IPP_UDP;
	bcopy(myip, iph->ip_src, sizeof(myip));
	bcopy(servip, iph->ip_dst, sizeof(servip));
	iph->ip_sum = 0;
	iph->ip_len = tot - (char *) iph;
	res = oc_cksum(iph, sizeof(struct ip), 0);
	iph->ip_sum = 0xffff & ~res;
	udph->uh_sport = myport;
	udph->uh_dport = servport;
	udph->uh_sum = 0;

	if (mesgtype) {
		tftp_a->op_code = FTPOP_ACKN;
		tftp_a->block = (u_short) (mesgtype);
	} else {
		bcopy(myip, &iptmp, sizeof(iptmp));
		bcopy(MSG, tftp_r, (sizeof(MSG) - 1));
		for (lcv = 9; lcv >= 2; lcv--) {
			tftp_r[lcv] = "0123456789ABCDEF"[iptmp & 0xF];

			iptmp = iptmp >> 4;
		}
	}

	udph->uh_ulen = tot - (char *) udph;

	le_put(buf, tot - buf);
}

/* Attempt to tftp a file and read it into memory */
int
do_get_file()
{
	int     fail = 0, oldlen;
	char   *loadat = (char *) LOAD_ADDR;
	last_ack = 0;

	do_send_tftp(READ);
	while (1) {
		if (le_get(buf, sizeof(buf), 5) == 0) {
			/* timeout occurred */
			if (last_ack)
				do_send_tftp(last_ack);
			else
				do_send_tftp(READ);

			fail++;
			if (fail > 5) {
				printf("\n");
				return (1);
			}
		} else {
			printf("%x \r", tftp->info.block * 512);
			if ((eh->ether_type != ETYPE_IP) || (iph->ip_p != IPP_UDP)) {
				fail++;
				continue;
			}
			if (servport == FTP_PORT)
				servport = udph->uh_sport;
			if (tftp->info.op_code == FTPOP_ERR) {
				printf("TFTP: Download error %d: %s\n",
				    tftp->info.block, tftp->data);
				return (1);
			}
			if (tftp->info.block != last_ack + 1) {
				/* we received the wrong block */
				if (tftp->info.block < last_ack + 1) {
					/* nack whatever we received */
					do_send_tftp(tftp->info.block);
				} else {
					/* nack the last confirmed block */
					do_send_tftp(last_ack);
				}
				fail++;
			} else {/* we got the right block */
				fail = 0;
				last_ack++;
				oldlen = udph->uh_ulen;
				do_send_tftp(last_ack);
				/* printf("bcopy %x %x %d\n", &tftp->data,
				 * loadat, oldlen - 12); */
				bcopy(&tftp->data, loadat, oldlen - 12);
				loadat += oldlen - 12;
				if (oldlen < (8 + 4 + 512)) {
					printf("\n");
					return (0);
				}
			}
		}
	}
	printf("\n");
	return (0);
}
@


1.4
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.3 2001/09/20 17:02:31 mpech Exp $	*/
@


1.3
log
@occured->occurred

idea from deraadt@@ via NetBSD
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: etherfun.c,v 1.2 2001/07/04 08:09:30 niklas Exp $	*/
d36 1
a36 1
#include <sys/cdefs.h>
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d165 1
a165 1
			/* timeout occured */
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@@


1.1.1.1.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

d163 1
a163 1
			/* timeout occurred */
@

