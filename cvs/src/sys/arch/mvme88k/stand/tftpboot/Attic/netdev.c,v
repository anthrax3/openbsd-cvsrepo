head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.20
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.18
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.14
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2014.03.18.22.36.37;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2012.11.25.14.10.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.16.22.52.09;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.26.19.48.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: netdev.c,v 1.4 2012/11/25 14:10:47 miod Exp $ */

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <machine/prom.h>
#include <string.h>

#include "stand.h"
#include "tftpfs.h"

#include "libsa.h"

struct bugdev_softc {
	short	clun;
	short	dlun;
} bugdev_softc[1];

int
devopen(f, fname, file)
	struct open_file *f;
	const char *fname;
	char **file;
{
	struct bugdev_softc *pp = &bugdev_softc[0];

	pp->clun = (short)bugargs.ctrl_lun;
	pp->dlun = (short)bugargs.dev_lun;

	f->f_devdata = (void *)pp;
	f->f_dev = &devsw[0];
	*file = (char *)fname;
	return (0);
}

#define	NFR_TIMEOUT	5

int
net_strategy(devdata, func, nblk, size, buf, rsize)
	void *devdata;
	int func;
	daddr32_t nblk;
	size_t size;
	void *buf;
	size_t *rsize;
{
	struct bugdev_softc *pp = (struct bugdev_softc *)devdata;
	struct mvmeprom_netfread nfr;
	int attempts;

	for (attempts = 0; attempts < 10; attempts++) {
		nfr.ctrl = pp->clun;
		nfr.dev = pp->dlun;
		nfr.status = 0;
		nfr.addr = (u_long)buf;
		nfr.bytes = 0;
		nfr.blk = nblk;
		nfr.timeout = NFR_TIMEOUT;
		mvmeprom_netfread(&nfr);
	
		if (rsize) {
			*rsize = nfr.bytes;
		}

		if (nfr.status == 0)
			return (0);
	}

	return (EIO);
}

int
net_open(struct open_file *f, ...)
{
	va_list ap;
	struct mvmeprom_netcfig ncfg;
	struct mvmeprom_netfopen nfo;
	struct mvmeprom_ncp ncp;
#if 0
	struct mvmeprom_netctrl nctrl;
#endif
	struct bugdev_softc *pp = (struct bugdev_softc *)f->f_devdata;
	char *filename;
	const char *failure = NULL;

	va_start(ap, f);
	filename = va_arg(ap, char *);
	va_end(ap);

	/*
	 * It seems that, after loading tftpboot from the network, the BUG
	 * will reset its current network settings before giving us control
	 * of the system.  This causes any network parameter not stored in
	 * the NIOT area to be lost.  However, unless we force the `always
	 * send a reverse arp request' setting is set, the BUG will `believe'
	 * it doesn't need to send any (because it had to in order to load
	 * this code), and will fail to connect to the tftp server.
	 *
	 * Unfortunately, updating the in-memory network configuration to
	 * force reverse arp requests to be sent always doesn't work, even
	 * after issueing a `reset device' command.
	 *
	 * The best we can do is recognize this situation, warn the user
	 * and return to the BUG.
	 */

	bzero(&ncp, sizeof ncp);
	ncfg.ctrl = pp->clun;
	ncfg.dev = pp->dlun;
	ncfg.ncp_addr = (u_long)&ncp;
	ncfg.flags = NETCFIG_READ;
	if (mvmeprom_netcfig(&ncfg) == 0 && ncp.magic == NETCFIG_MAGIC) {
		if (ncp.rarp_control != 'A' && ncp.client_ip == 0) {
#if 0
			ncp.rarp_control = 'A';
			ncp.update_control = 'Y';

			bzero(&ncp, sizeof ncp);
			ncfg.ctrl = pp->clun;
			ncfg.dev = pp->dlun;
			ncfg.ncp_addr = (u_long)&ncp;
			ncfg.flags = NETCFIG_WRITE;
		
			if (mvmeprom_netcfig(&ncfg) == 0) {
				bzero(&nctrl, sizeof nctrl);
				nctrl.ctrl = pp->clun;
				nctrl.dev = pp->dlun;
				nctrl.cmd = NETCTRLCMD_RESET;
				if (mvmeprom_netctrl(&nctrl) != 0)
					failure = "reset network interface";
			} else
				failure = "update NIOT configuration";
#else
			printf("Invalid network configuration\n"
			    "Please update the NIOT parameters and set\n"
			    "``BOOTP/RARP Request Control: Always/When-Needed (A/W)'' to `A'\n");
			_rtt();
#endif
		}
	} else
		failure = "read NIOT configuration";

	if (failure != NULL)
		printf("failed to %s (0x%x), "
		    "hope RARP is set to `A'lways\n", failure, ncfg.status);

	nfo.ctrl = pp->clun;
	nfo.dev = pp->dlun;
	nfo.status = 0;
	strlcpy(nfo.filename, filename, sizeof nfo.filename);
	mvmeprom_netfopen(&nfo);
	
#ifdef DEBUG
	printf("tftp open(%s): 0x%x\n", filename, nfo.status);
#endif
	return (nfo.status);
}

int
net_close(f)
	struct open_file *f;
{
	return (0);
}

int
net_ioctl(f, cmd, data)
	struct open_file *f;
	u_long cmd;
	void *data;
{
	return (EIO);
}
@


1.4
log
@Recognize a wrong network configuration which would cause tftpboot to
apparently freeze, and in any case fail to load anything; if this happens,
tell the user what to do and return to the BUG (altering the configuration
from tftpboot itself doesn't seem to have any effect, unfortunately).
@
text
@d1 1
a1 1
/*	$OpenBSD: netdev.c,v 1.3 2011/03/13 00:13:53 deraadt Exp $ */
@


1.3
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: netdev.c,v 1.2 2006/05/16 22:52:09 miod Exp $ */
d104 1
d106 4
d112 1
d118 57
d182 1
a182 1
	printf("tftp open(%s): error %x\n", filename, nfo.status);
@


1.2
log
@Make standalone binaries compile with -Wall -Werror
@
text
@d1 1
a1 1
/*	$OpenBSD: netdev.c,v 1.1 2004/01/26 19:48:34 miod Exp $ */
d70 1
a70 1
	daddr_t nblk;
@


1.1
log
@tftp-only netboot code, inspired from mvmeppc, and stripped down; it will
become necessary to boot from unsupported (as far as mvme88k/stand/ is
concerned) network cards, such as the MVME374 and the MVME376.

Not enabled in the build yet, because there are a few issues left, but
it is nonetheless usable...
@
text
@d1 1
a1 1
/*	$OpenBSD: bugdev.c,v 1.2 2003/06/01 17:00:38 deraadt Exp $ */
d35 1
@

