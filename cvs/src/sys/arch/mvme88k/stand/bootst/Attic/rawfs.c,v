head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.16
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.16
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.14
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.12
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.10
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.6
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2013.04.14.19.05.19;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.16.22.52.09;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.16.18.03.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.12.15.06.09.51;	author smurph;	state Exp;
branches
	1.1.6.1
	1.1.16.1;
next	;

1.1.6.1
date	2002.03.28.10.36.03;	author niklas;	state Exp;
branches;
next	;

1.1.16.1
date	2002.06.11.03.37.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: rawfs.c,v 1.6 2013/04/14 19:05:19 miod Exp $ */

/*
 * Copyright (c) 1995 Gordon W. Ross
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon W. Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Raw file system - for stream devices like tapes.
 * No random access, only sequential read allowed.
 * This exists only to allow upper level code to be
 * shielded from the fact that the device must be
 * read only with whole block position and size.
 */

#include <sys/param.h>
#include <stand.h>
#include <rawfs.h>

/*
 * Must be a multiple of MVMEPROM_BLOCK_SIZE, and at least as large as
 * Z_BUFSIZE from libsa cread.c to be able to correctly emulate forward
 * seek.
 */
#define	RAWFS_BSIZE	4096

/*
 * In-core open file.
 */
struct cfile {
	off_t		fs_bufpos;	/* file position of fs_buf */
	int		fs_len;		/* amount left in f_buf */
	char *		fs_ptr;		/* read pointer into f_buf */
	char		fs_buf[RAWFS_BSIZE];
};

static int rawfs_get_block(struct open_file *);
static off_t rawfs_get_pos(struct cfile *);

int
rawfs_open(char *path, struct open_file *f)
{
	struct cfile *fs;

	/*
	 * The actual PROM driver has already been opened.
	 * Just allocate the I/O buffer, etc.
	 */
	fs = alloc(sizeof(struct cfile));
	fs->fs_bufpos = 0;
	fs->fs_len = 0;	
	fs->fs_ptr = NULL;	/* nothing read yet */

	f->f_fsdata = fs;
	return (0);
}

int
rawfs_close(struct open_file *f)
{
	struct cfile *fs;

	fs = (struct cfile *) f->f_fsdata;
	f->f_fsdata = NULL;

	if (fs != NULL)
		free(fs, sizeof(*fs));

	return (0);
}

int
rawfs_read(struct open_file *f, void *start, size_t size, size_t *resid)
{
	struct cfile *fs = (struct cfile *)f->f_fsdata;
	char *addr = start;
	int error = 0;
	size_t csize;

	while (size != 0) {
		if (fs->fs_len == 0)
			if ((error = rawfs_get_block(f)) != 0)
				break;

		if (fs->fs_len <= 0)
			break;	/* EOF */

		csize = size;
		if (csize > fs->fs_len)
			csize = fs->fs_len;

		bcopy(fs->fs_ptr, addr, csize);
		fs->fs_ptr += csize;
		fs->fs_len -= csize;
		addr += csize;
		size -= csize;
	}
	if (resid)
		*resid = size;
	return (error);
}

int
rawfs_write(struct open_file *f, void *start, size_t size, size_t *resid)
{
	return (EROFS);
}

off_t
rawfs_seek(struct open_file *f, off_t offset, int where)
{
	struct cfile *fs = (struct cfile *)f->f_fsdata;
	off_t oldpos, basepos;
	int error;

	oldpos = rawfs_get_pos(fs);
	switch (where) {
	case SEEK_SET:
		break;
	case SEEK_CUR:
		offset += oldpos;
		break;
	default:
	case SEEK_END:
		return -1;
	}

	basepos = (offset / RAWFS_BSIZE) * RAWFS_BSIZE;
	offset %= RAWFS_BSIZE;

	/* backward seek are not possible */
	if (basepos < fs->fs_bufpos) {
		errno = EIO;
		return -1;
	}

	if (basepos == fs->fs_bufpos) {
		/* if we seek before the first read... */
		if (fs->fs_ptr == NULL) {
			if ((error = rawfs_get_block(f)) != 0) {
				errno = error;
				return -1;
			}
		}
		/* rewind to start of the buffer */
		fs->fs_len += (fs->fs_ptr - fs->fs_buf);
		fs->fs_ptr = fs->fs_buf;
	} else {
		while (basepos != fs->fs_bufpos)
			if ((error = rawfs_get_block(f)) != 0) {
				errno = error;
				return -1;
			}
	}
	/* now move forward within the buffer */
	if (offset > fs->fs_len)
		offset = fs->fs_len;	/* EOF */
	fs->fs_len -= offset;
	fs->fs_ptr += offset;

	return rawfs_get_pos(fs);
}

int
rawfs_stat(struct open_file *f, struct stat *sb)
{
	return (EFTYPE);
}

/*
 * Read a block from the underlying stream device
 * (In our case, a tape drive.)
 */
static int
rawfs_get_block(struct open_file *f)
{
	struct cfile *fs;
	int error;
	size_t len;
	off_t readpos;

	fs = (struct cfile *)f->f_fsdata;

	twiddle();
	if (fs->fs_ptr != NULL)
		readpos = fs->fs_bufpos + RAWFS_BSIZE;
	else
		readpos = fs->fs_bufpos;	/* first read */
	error = f->f_dev->dv_strategy(f->f_devdata, F_READ,
		readpos / DEV_BSIZE, RAWFS_BSIZE, fs->fs_buf, &len);

	if (error == 0) {
		fs->fs_ptr = fs->fs_buf;
		fs->fs_len = len;
		fs->fs_bufpos = readpos;
	}

	return (error);
}

static off_t
rawfs_get_pos(struct cfile *fs)
{
	return fs->fs_bufpos + (fs->fs_ptr - fs->fs_buf);
}
@


1.6
log
@Unbreak tape boot blocks by not attempting to load kernel symbols, and providing
a smarter seek routine which can seek forward and cope with the libsa gzip code
reading the first 4KB of a file upon open, only to discard the buffer because
it assumes we can always seek backwards.

These boot blocks had been broken since the switch to the MI libsa loadfile
code.

Reported for mvme88k by Michael Fritsch, thanks and sorry for taking too long
to fix.
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.5 2011/03/13 00:13:53 deraadt Exp $ */
@


1.5
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.4 2006/05/16 22:52:09 miod Exp $ */
d45 6
a50 1
#define	RAWFS_BSIZE	512
d56 1
a56 1
	daddr32_t	fs_nextblk;	/* block number to read next */
d62 2
a63 2
static int
rawfs_get_block(struct open_file *);
d65 2
a66 3
int	rawfs_open(path, f)
	char *path;
	struct open_file *f;
d75 3
a77 3
	fs->fs_nextblk = 0;
	fs->fs_len = 0;
	fs->fs_ptr = fs->fs_buf;
d83 2
a84 2
int	rawfs_close(f)
	struct open_file *f;
d89 1
a89 1
	f->f_fsdata = (void *)0;
d91 1
a91 1
	if (fs != (struct cfile *)0)
d97 2
a98 5
int	rawfs_read(f, start, size, resid)
	struct open_file *f;
	void *start;
	size_t size;
	size_t *resid;
a105 1

d128 2
a129 5
int	rawfs_write(f, start, size, resid)
	struct open_file *f;
	void *start;
	size_t size;
	size_t *resid;	/* out */
d134 2
a135 4
off_t	rawfs_seek(f, offset, where)
	struct open_file *f;
	off_t offset;
	int where;
d137 50
a186 1
	return (EFTYPE);
d189 2
a190 3
int	rawfs_stat(f, sb)
	struct open_file *f;
	struct stat *sb;
a194 1

d200 1
a200 2
rawfs_get_block(f)
	struct open_file *f;
d205 1
a207 1
	fs->fs_ptr = fs->fs_buf;
d210 4
d215 1
a215 1
		fs->fs_nextblk, RAWFS_BSIZE, fs->fs_buf, &len);
d217 2
a218 1
	if (!error) {
d220 1
a220 1
		fs->fs_nextblk += (RAWFS_BSIZE / DEV_BSIZE);
d226 5
@


1.4
log
@Make standalone binaries compile with -Wall -Werror
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.3 2006/01/16 18:03:54 deraadt Exp $ */
d51 1
a51 1
	daddr_t		fs_nextblk;	/* block number to read next */
@


1.3
log
@adjust to size_t changes
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2 2002/03/14 01:26:40 millert Exp $ */
d162 2
a163 1
	int error, len;
d170 1
a170 1
		fs->fs_nextblk, RAWFS_BSIZE,	fs->fs_buf, &len);
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.1 1998/12/15 06:09:51 smurph Exp $ */
d96 2
a97 2
	u_int size;
	u_int *resid;
@


1.1
log
@Greatly improved tapeboot.  From mvme68k.
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.2 1997/04/22 16:02:20 gvf Exp $ */
d58 1
a58 1
rawfs_get_block __P((struct open_file *));
@


1.1.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rawfs.c,v 1.1 1998/12/15 06:09:51 smurph Exp $ */
d58 1
a58 1
rawfs_get_block(struct open_file *);
@


1.1.6.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d58 1
a58 1
rawfs_get_block(struct open_file *);
@


