head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.2
	UBC_BASE:1.8
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2004.04.29.14.33.27;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2003.08.12.19.33.27;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.11.20.45.17;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.22.17.57.11;	author smurph;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.16.23.49.46;	author miod;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.12.13.08.55.52;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.24.22.53.15;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.07.22.12.31;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.20.05.53.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.09.05.44.42;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.07.23.40.35;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.19.13.23;	author smurph;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.04.18.16.11.36;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.07.04.10.20.17;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2002.03.06.02.04.45;	author niklas;	state Exp;
branches;
next	1.1.4.5;

1.1.4.5
date	2004.02.19.10.49.08;	author niklas;	state Exp;
branches;
next	1.1.4.6;

1.1.4.6
date	2004.06.05.23.09.50;	author niklas;	state dead;
branches;
next	;

1.8.2.1
date	2002.01.31.22.55.19;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Continue factorizing m88k common code, this time files in <arch>/<arch>
which were copied verbatim from mvme88k to luna88k.

This requires backing out syntactic sugar in mvme88k kernel configuration
files which would deduct the required processor types from the board models,
as the common code only depends upon the M88100 and M88110 defines.
@
text
@/* $OpenBSD: m88110_fp.S,v 1.11 2003/08/12 19:33:27 miod Exp $	*/
/*
 * Copyright (c) 1999 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Floating point trouble routines */
/*
 * August 1, 1999
 * smurph@@OpenBSD.org
 *
 * Additions to support MVME197 (mc88110) mmu routines.
 */

/*
 * This is cheesy.  I'm using the TCFP features of the mc88110
 * because it was easy.  It is not 100% IEEE.  But it may be
 * close enough.  We shall see...  XXXsmurph
 * Err... TCFP == "Time Critical Floating Point"
 *
 * The only two SFU1 exceptions that can occure in TCFP mode are:
 * 1) Unimplemented Floating Point Instruction
 * 2) Floating Point Privilege Violation
 */

#include "assym.h"
#include <machine/trap.h>
#include <machine/asm.h>

ASENTRY(m88110_Xfp_precise)
	or	r29, r3, r0     /*  r29 is now the E.F. */
	subu	r31, r31, 40
	st	r1,  r31, 32
	st	r29, r31, 36

	ld	r2, r29, EF_FPSR * 4
	ld	r3, r29, EF_FPCR * 4
	ld	r4, r29, EF_FPECR * 4

	/*
	 * Load into r1 the return address for the 0 handlers.  Looking
	 * at FPECR, branch to the appropriate 0 handler.  However,
	 * if none of the 0 bits are enabled, then a floating point
	 * instruction was issued with the floating point unit disabled.  This
	 * will cause an unimplemented opcode 0.
	 */

   	bb0	6,r4, 2f   	/* branch to m88110_FPunimp if bit set */
     	br	_ASM_LABEL(m88110_FPuimp)
2:  	bb0	5,r4, 3f 	/* branch to m88110_FPpriviol if bit set */
	br	_ASM_LABEL(m88110_FPpriviol)
3:
	or.u	r4, r4, 0xffff

ASLOCAL(m88110_FPuimp)
	subu	r31,r31,40		/* allocate stack */
	st	r1,r31,36		/* save return address */
	st	r3,r31,32		/* save exception frame */
	or	r2,r0,T_FPEPFLT		/* load trap type */
	or	r3, r29, r0
	bsr	_C_LABEL(m88110_trap)	/* trap */
	ld	r1,r31,36		/* recover return address */
	addu	r31,r31,40		/* deallocate stack */
 	jmp	r1

ASLOCAL(m88110_FPpriviol)
	subu	r31,r31,40		/* allocate stack */
	st	r1,r31,36		/* save return address */
	st	r3,r31,32		/* save exception frame */
	or	r2,r0,T_PRIVINFLT	/* load trap type */
	or	r3, r29, r0
	bsr	_C_LABEL(m88110_trap)	/* trap */
	ld	r1,r31,36		/* recover return address */
 	jmp.n	r1
	 addu	r31,r31,40		/* deallocate stack */

ENTRY(set_tcfp)
	or.u	r2, r0, hi16(0x200000)
	or	r2, r2, lo16(0x200000)
	jmp.n	r1
	 fstcr	r2, fcr0
@


1.11
log
@Get rid of unused code, and KNF/ELF-sanitize the remaining code.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.10 2003/08/11 20:45:17 miod Exp $	*/
@


1.10
log
@Sprinkle proper use of _C_LABEL and _ASM_LABEL in the .S files (except for
the _fp.S which are too scary at the moment). This will be necessary to
move to ELF in the future.

Use local symbols whenever possible.

Attempt to use delayed branches whenever possible.

Remove stupid or straightforward comments, some hardcoded values, and a
few unused variables or routines.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.9 2001/12/22 17:57:11 smurph Exp $	*/
d42 1
a42 1
 * because it was easy.  It is not 100% IEEE.  But it may be 
d60 3
a62 3
  
	ld	r2, r29, EF_FPSR  * 4
	ld	r3, r29, EF_FPCR  * 4
d64 14
a77 12
	
	/* Load into r1 the return address for the 0 handlers.  Looking */
	/* at FPECR, branch to the appropriate 0 handler.  However, */
	/* if none of the 0 bits are enabled, then a floating point */
	/* instruction was issued with the floating point unit disabled.  This */
	/* will cause an unimplemented opcode 0. */
	
1:   	bb0	6,r4, 2f   	/* branch to m88110_FPunimp if bit set */
     	br	m88110_FPuimp
2:  	bb0	5,r4, 3f 	/* branch to m88110_FPpriviol if bit set */ 
	br	m88110_FPpriviol
3:	
d80 5
a84 5
ASGLOBAL(m88110_FPuimp)
	subu    r31,r31,40      /* allocate stack */
	st      r1,r31,36       /* save return address */
	st      r3,r31,32       /* save exception frame */
	or      r2,r0,T_FPEPFLT /* load trap type */
d86 3
a88 3
	bsr     _C_LABEL(m88110_trap)	/* trap */
	ld      r1,r31,36       /* recover return address */
	addu    r31,r31,40      /* deallocate stack */
d91 5
a95 5
ASGLOBAL(m88110_FPpriviol)
	subu    r31,r31,40      /* allocate stack */
	st      r1,r31,36       /* save return address */
	st      r3,r31,32       /* save exception frame */
	or      r2,r0,T_PRIVINFLT /* load trap type */
d97 4
a100 4
	bsr     _C_LABEL(m88110_trap)	/* trap */
	ld      r1,r31,36       /* recover return address */
	addu    r31,r31,40      /* deallocate stack */
 	jmp	r1
a102 1
	
d106 1
a106 155
	fstcr	r2, fcr0


/*************************************************************************
 *************************************************************************
 **
 ** void set_mmureg(unsigned reg_const, unsigned value);
 **
 ** Sets the given mmu register on the mc88110 chip to the given value. 
 **
 ** Input:
 **	r1	return address
 **	r2 	the register
 **	r3	the value
 **
 ** Other registers used:
 **	r5	jumptable address
 **	r6	calculated jumptable address
 **
 ** Output:
 **	none
 **/
ENTRY(set_mmureg)
	/* calculate address to jump to */
	or.u	r5, 	r0, 	hi16(regmark)
	or	r5,	r5,	lo16(regmark)
        mul	r2,	r2,	0x08
	/* and go there (after adjusting the offset via ".n") */
	jmp.n	r6
	subu	r6,	r5, 	r2

	jmp.n	r1
	stcr	r3,	cr51
	jmp.n	r1
	stcr	r3,	cr50
	jmp.n	r1
	stcr	r3,	cr49
	jmp.n	r1
	stcr	r3,	cr48
	jmp.n	r1
	stcr	r3,	cr47
	jmp.n	r1
	stcr	r3,	cr46
	jmp.n	r1
	stcr	r3,	cr45
	jmp.n	r1
	stcr	r3,	cr44
	jmp.n	r1
	stcr	r3,	cr43
	jmp.n	r1
	stcr	r3,	cr42
	jmp.n	r1
	stcr	r3,	cr41
	jmp.n	r1
	stcr	r3,	cr40
	jmp.n	r1
	stcr	r3,	cr36
	jmp.n	r1
	stcr	r3,	cr35
	jmp.n	r1
	stcr	r3,	cr34
	jmp.n	r1
	stcr	r3,	cr33
	jmp.n	r1
	stcr	r3,	cr32
	jmp.n	r1
	stcr	r3,	cr31
	jmp.n	r1
	stcr	r3,	cr30
	jmp.n	r1
	stcr	r3,	cr29
	jmp.n	r1
	stcr	r3,	cr28
	jmp.n	r1
	stcr	r3,	cr27
	jmp.n	r1
	stcr	r3,	cr26
regmark: jmp.n	r1
	 stcr	r3,	cr25

/*************************************************************************
 *************************************************************************
 **
 ** unsigned get_mmureg(unsigned reg_const);
 **
 ** Get the given mmu register's value. 
 **
 ** Input:
 **	r1	return address
 **	r2 	the register/return value
 **
 ** Other registers used:
 **	r5	jumptable address
 **	r6	calculated jumptable address
 **
 ** Output:
 **	r2	return value
 **/
ENTRY(get_mmureg)
	/* calculate address to jump to */
	or.u	r5, 	r0, 	hi16(regmark2)
	or	r5,	r5,	lo16(regmark2)
        mul	r2,	r2,	0x08
	/* and go there (after adjusting the offset via ".n") */
	jmp.n	r6
	subu	r6,	r5, 	r2

	jmp.n	r1
	ldcr	r2,	cr51
	jmp.n	r1
	ldcr	r2,	cr50
	jmp.n	r1
	ldcr	r2,	cr49
	jmp.n	r1
	ldcr	r2,	cr48
	jmp.n	r1
	ldcr	r2,	cr47
	jmp.n	r1
	ldcr	r2,	cr46
	jmp.n	r1
	ldcr	r2,	cr45
	jmp.n	r1
	ldcr	r2,	cr44
	jmp.n	r1
	ldcr	r2,	cr43
	jmp.n	r1
	ldcr	r2,	cr42
	jmp.n	r1
	ldcr	r2,	cr41
	jmp.n	r1
	ldcr	r2,	cr40
	jmp.n	r1
	ldcr	r2,	cr36
	jmp.n	r1
	ldcr	r2,	cr35
	jmp.n	r1
	ldcr	r2,	cr34
	jmp.n	r1
	ldcr	r2,	cr33
	jmp.n	r1
	ldcr	r2,	cr32
	jmp.n	r1
	ldcr	r2,	cr31
	jmp.n	r1
	ldcr	r2,	cr30
	jmp.n	r1
	ldcr	r2,	cr29
	jmp.n	r1
	ldcr	r2,	cr28
	jmp.n	r1
	ldcr	r2,	cr27
	jmp.n	r1
	ldcr	r2,	cr26
regmark2: jmp.n	r1
	ldcr	r2,	cr25
@


1.9
log
@change function names to reflect cpu type instead of board type.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.8 2001/12/16 23:49:46 miod Exp $	*/
d55 1
a55 2
	.text
ENTRY(m88110_Xfp_precise)
@


1.8
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.6 2001/08/24 22:53:15 miod Exp $	*/
d85 1
a85 1
	bsr     _C_LABEL(trap197)        /* trap */
d96 1
a96 1
	bsr     _C_LABEL(trap197)        /* trap */
@


1.8.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.9 2001/12/22 17:57:11 smurph Exp $	*/
d85 1
a85 1
	bsr     _C_LABEL(m88110_trap)	/* trap */
d96 1
a96 1
	bsr     _C_LABEL(m88110_trap)	/* trap */
@


1.7
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@a49 1
#ifdef M88110
d52 1
a53 1
#include <machine/trap.h>
d85 1
a85 1
	bsr     _m88110_trap      /* trap */
d96 1
a96 1
	bsr     _m88110_trap      /* trap */
d108 1
a260 2
#endif /* M88110 */

@


1.6
log
@Adapt to the <machine/asm.h> macros (only for entry points for now, because
LABEL has disappeared), and to the trap() name changes.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.5 2001/08/07 22:12:31 miod Exp $	*/
d50 1
d53 1
a54 1
#include <machine/asm.h>
d86 1
a86 1
	bsr     _C_LABEL(trap197)        /* trap */
d97 1
a97 1
	bsr     _C_LABEL(trap197)        /* trap */
a108 1

d261 2
@


1.5
log
@Make config(8) choose which source files to exclude, from the kernel
configuration file options, rather than putting ugly preprocessor
statements and compile empty files.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.4 2001/05/20 05:53:10 miod Exp $	*/
d79 1
a79 1
LABEL(m88110_FPuimp)
d85 1
a85 1
	bsr     _trap           /* trap */
d90 1
a90 1
LABEL(m88110_FPpriviol)
d96 1
a96 1
	bsr     _trap           /* trap */
@


1.4
log
@assym.s -> assym.h
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.3 2001/03/09 05:44:42 smurph Exp $	*/
a54 1
#ifdef MVME197
a260 2
#endif /* MVME197 */
	
@


1.3
log
@kernel will compile with -Werror.  Added intr.h
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.2 2001/03/07 23:40:35 miod Exp $	*/
d51 1
a51 5
#ifndef ASSEMBLER
#define	ASSEMBLER
#endif /* ASSEMBLER */

#include "assym.s"
@


1.2
log
@Get rid of definitions of ASSEMBLER, LOCORE and such. We will get
the correct defines from the Makefile now.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.1 1999/09/27 19:13:23 smurph Exp $	*/
d50 4
@


1.1
log
@Added to support MVME188 and MVME197
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.0 1999/08/01 06:36:29 smurph Exp $	*/
a49 3

#define LOCORE
#define ASSEMBLER
@


1.1.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.3 2001/03/09 05:44:42 smurph Exp $	*/
d51 2
a52 3
#ifndef ASSEMBLER
#define	ASSEMBLER
#endif /* ASSEMBLER */
@


1.1.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.1.4.1 2001/04/18 16:11:36 niklas Exp $	*/
d51 5
a55 1
#include "assym.h"
@


1.1.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.1.4.2 2001/07/04 10:20:17 niklas Exp $	*/
d55 1
d80 1
a80 1
ASGLOBAL(m88110_FPuimp)
d86 1
a86 1
	bsr     _C_LABEL(trap197)        /* trap */
d91 1
a91 1
ASGLOBAL(m88110_FPpriviol)
d97 1
a97 1
	bsr     _C_LABEL(trap197)        /* trap */
d262 2
@


1.1.4.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
d85 1
a85 1
	bsr     _C_LABEL(m88110_trap)	/* trap */
d96 1
a96 1
	bsr     _C_LABEL(m88110_trap)	/* trap */
@


1.1.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d42 1
a42 1
 * because it was easy.  It is not 100% IEEE.  But it may be
d55 2
a56 1
ASENTRY(m88110_Xfp_precise)
d61 3
a63 3

	ld	r2, r29, EF_FPSR * 4
	ld	r3, r29, EF_FPCR * 4
d65 12
a76 14

	/*
	 * Load into r1 the return address for the 0 handlers.  Looking
	 * at FPECR, branch to the appropriate 0 handler.  However,
	 * if none of the 0 bits are enabled, then a floating point
	 * instruction was issued with the floating point unit disabled.  This
	 * will cause an unimplemented opcode 0.
	 */

   	bb0	6,r4, 2f   	/* branch to m88110_FPunimp if bit set */
     	br	_ASM_LABEL(m88110_FPuimp)
2:  	bb0	5,r4, 3f 	/* branch to m88110_FPpriviol if bit set */
	br	_ASM_LABEL(m88110_FPpriviol)
3:
d79 5
a83 5
ASLOCAL(m88110_FPuimp)
	subu	r31,r31,40		/* allocate stack */
	st	r1,r31,36		/* save return address */
	st	r3,r31,32		/* save exception frame */
	or	r2,r0,T_FPEPFLT		/* load trap type */
d85 3
a87 3
	bsr	_C_LABEL(m88110_trap)	/* trap */
	ld	r1,r31,36		/* recover return address */
	addu	r31,r31,40		/* deallocate stack */
d90 5
a94 5
ASLOCAL(m88110_FPpriviol)
	subu	r31,r31,40		/* allocate stack */
	st	r1,r31,36		/* save return address */
	st	r3,r31,32		/* save exception frame */
	or	r2,r0,T_PRIVINFLT	/* load trap type */
d96 4
a99 4
	bsr	_C_LABEL(m88110_trap)	/* trap */
	ld	r1,r31,36		/* recover return address */
 	jmp.n	r1
	 addu	r31,r31,40		/* deallocate stack */
d102 1
d106 155
a260 1
	 fstcr	r2, fcr0
@


1.1.4.6
log
@Merge with the trunk
@
text
@d1 1
a1 1
/* $OpenBSD: m88110_fp.S,v 1.1.4.5 2004/02/19 10:49:08 niklas Exp $	*/
@


