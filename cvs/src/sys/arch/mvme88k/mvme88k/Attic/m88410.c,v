head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2013.02.17.18.10.01;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.05.11.20.56;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.31.20.54.21;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.27.05.17.53;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.02.21.25.01;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.07.17.44.28;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.12.20.36.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: m88410.c,v 1.7 2013/02/17 18:10:01 miod Exp $	*/
/*
 * Copyright (c) 2001 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Steve Murphree.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/asm_macro.h>
#include <machine/m88410.h>

#include <mvme88k/dev/busswreg.h>

/*
 * MVME197-specific 88410 operation.
 *
 * 88410 commands are sent by writing a 64-bit word to a specific address.
 * Since the 88410 is not normally mapped and shares its address range
 * with the flash memory, it is necessary to program the busswitch chip
 * before the 88410 command can be sent.
 */

/*
 * Writeback physical page number (specified in the low 20 bits of the
 * address).
 */
#define XCC_WB_PAGE	0x01
/*
 * Writeback the whole cache.
 */
#define XCC_WB_ALL	0x02
/*
 * Invalidate the whole cache.
 */
#define XCC_INV_ALL	0x03

/*
 * Base address of the 88410 when mapped.
 */
#define XCC_ADDR	0xff800000

void
mc88410_wb_page(paddr_t physaddr)
{
	paddr_t xccaddr = XCC_ADDR | (physaddr >> PGSHIFT);
	u_int psr;
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);

	/*
	 * Since the page number is unlikely to be a multiple of 4, we need
	 * to mask misaligned exceptions.
	 */
	set_psr((psr = get_psr()) | PSR_MXM);

	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);

	/* set XCC bit in GCSR (0xff8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* send command */
	*(volatile uint64_t *)xccaddr = (uint64_t)XCC_WB_PAGE << 32;

	/* spin until the operation is complete */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) != 0)
		;

	/* restore PSR and friends */
	set_psr(psr);
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}

void
mc88410_wb(void)
{
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);

	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);

	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* send command */
	*(volatile uint64_t *)XCC_ADDR = (uint64_t)XCC_WB_ALL << 32;

	/* spin until the operation is complete */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) != 0)
		;

	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}

void
mc88410_inv(void)
{
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);

	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);

	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* send command */
	*(volatile uint64_t *)XCC_ADDR = (uint64_t)XCC_INV_ALL << 32;

	/*
	 * The 88410 will not let the 88110 access it until the
	 * invalidate all operation is complete. Simply force a read
	 * access which will spin as long as necessary.
	 */
	(void)*(volatile u_int32_t *)(BS_BASE + BS_XCCR);

	/* just in case it didn't, spin until the operation is complete */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) != 0)
		;

	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}

void
mc88410_wbinv(void)
{
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);

	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);

	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* send wb command */
	*(volatile uint64_t *)XCC_ADDR = (uint64_t)XCC_WB_ALL << 32;

	/* spin until the operation is complete */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) != 0)
		;

	/* send inv command */
	*(volatile uint64_t *)XCC_ADDR = (uint64_t)XCC_INV_ALL << 32;

	/*
	 * The 88410 will not let the 88110 access it until the
	 * invalidate all operation is complete. Simply force a read
	 * access which will spin as long as necessary.
	 */
	(void)*(volatile u_int32_t *)(BS_BASE + BS_XCCR);

	/* just in case it didn't, spin until the operation is complete */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) != 0)
		;

	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}
@


1.7
log
@Replace assembly statement triggering 88410 commands with a proper volatile
uint64_t write. While there, implement a real wbinv routine instead of invoking
wb, then inv; this avoids unnecessary busswitch register juggling.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.c,v 1.6 2013/01/05 11:20:56 miod Exp $	*/
@


1.6
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.c,v 1.5 2010/12/31 20:54:21 miod Exp $	*/
d93 1
a93 4
	__asm__ __volatile__ (
	    "or   %%r2, %%r0, %0\n\t"
	    "or   %%r3, %%r0, %%r0\n\t"
	    "st.d %%r2, %1, 0" :: "i" (XCC_WB_PAGE), "r" (xccaddr) : "r2", "r3");
d100 1
a100 2
        set_psr(psr);
	flush_pipeline();
d121 1
a121 4
	__asm__ __volatile__ (
	    "or   %%r2, %%r0, %0\n\t"
	    "or   %%r3, %%r0, %%r0\n\t"
	    "st.d %%r2, %1, 0" :: "i" (XCC_WB_ALL), "r" (XCC_ADDR) : "r2", "r3");
a134 1
	u_int32_t dummy;
d147 1
a147 4
	__asm__ __volatile__ (
	    "or   %%r2, %%r0, %0\n\t"
	    "or   %%r3, %%r0, %%r0\n\t"
	    "st.d %%r2, %1, 0" :: "i" (XCC_INV_ALL), "r" (XCC_ADDR) : "r2", "r3");
d154 41
a194 1
	dummy = *(volatile u_int32_t *)(BS_BASE + BS_XCCR);
@


1.5
log
@Standardize cache handling functions and defines to use wb/wbinv/inv instead
of flush/sync/inval. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.c,v 1.4 2009/02/27 05:17:53 miod Exp $	*/
d94 3
a96 3
	    "or   r2, r0, %0\n\t"
	    "or   r3, r0, r0\n\t"
	    "st.d r2, %1, 0" : : "i" (XCC_WB_PAGE), "r" (xccaddr) : "r2", "r3");
d126 3
a128 3
	    "or   r2, r0, %0\n\t"
	    "or   r3, r0, r0\n\t"
	    "st.d r2, %1, 0" : : "i" (XCC_WB_ALL), "r" (XCC_ADDR) : "r2", "r3");
d156 3
a158 3
	    "or   r2, r0, %0\n\t"
	    "or   r3, r0, r0\n\t"
	    "st.d r2, %1, 0" : : "i" (XCC_INV_ALL), "r" (XCC_ADDR) : "r2", "r3");
@


1.4
log
@Be a bin more paranoid in m88410_inval() in the operation complete check.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.c,v 1.3 2007/12/02 21:25:01 miod Exp $	*/
d51 1
a51 1
 * Flush physical page number (specified in the low 20 bits of the
d54 1
a54 1
#define XCC_FLUSH_PAGE	0x01
d56 1
a56 1
 * Flush the whole cache.
d58 1
a58 1
#define XCC_FLUSH_ALL	0x02
d62 1
a62 1
#define XCC_INVAL_ALL	0x03
d70 1
a70 1
mc88410_flush_page(paddr_t physaddr)
d96 1
a96 1
	    "st.d r2, %1, 0" : : "i" (XCC_FLUSH_PAGE), "r" (xccaddr) : "r2", "r3");
d110 1
a110 1
mc88410_flush(void)
d128 1
a128 1
	    "st.d r2, %1, 0" : : "i" (XCC_FLUSH_ALL), "r" (XCC_ADDR) : "r2", "r3");
d139 1
a139 1
mc88410_inval(void)
d158 1
a158 1
	    "st.d r2, %1, 0" : : "i" (XCC_INVAL_ALL), "r" (XCC_ADDR) : "r2", "r3");
@


1.3
log
@Better inline assembler constructs.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.c,v 1.2 2006/05/07 17:44:28 miod Exp $	*/
d52 1
a52 1
 * address.
d166 4
@


1.2
log
@No need to mask misaligned address exceptions for global flush or invalidate
operations (those do not take a page number in the low address bits of the
88410 control register).
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.c,v 1.1 2005/12/12 20:36:33 miod Exp $	*/
d41 26
a66 4
#define XCC_NOP		"0x00"
#define XCC_FLUSH_PAGE	"0x01"
#define XCC_FLUSH_ALL	"0x02"
#define XCC_INVAL_ALL	"0x03"
d94 3
a96 3
	    "or   r2, r0, " XCC_FLUSH_PAGE ";"
	    "or   r3, r0, r0;"
	    "st.d r2, %0, 0" : : "r" (xccaddr) : "r2", "r3");
d126 3
a128 3
	    "or   r2, r0, " XCC_FLUSH_ALL ";"
	    "or   r3, r0, r0;"
	    "st.d r2, %0, 0" : : "r" (XCC_ADDR) : "r2", "r3");
d156 3
a158 3
	    "or   r2, r0, " XCC_INVAL_ALL ";"
	    "or   r3, r0, r0;"
	    "st.d r2, %0, 0" : : "r" (XCC_ADDR) : "r2", "r3");
@


1.1
log
@Move the MC88410 support code to a specific .c function instead of heavy
(and large) inlines.

While there, provide correct register clobbering information to the
__asm__ statements, and fix mc88410_flush_page() evil typo.

Finally, rework mc88410_inval() busy-wait logic to behave correctly in all
cases.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 4
a60 1
	/* mask misaligned exceptions */
d76 1
a76 1
	/* spin until the operation starts */
a89 1
	u_int psr;
a94 3
	/* mask misaligned exceptions */
	set_psr((psr = get_psr()) | PSR_MXM);

d108 1
a108 1
	/* spin until the operation starts */
a111 3
	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
a118 1
	u_int psr;
d120 1
a124 3
	/* mask misaligned exceptions */
	set_psr((psr = get_psr()) | PSR_MXM);

d138 6
a143 3
	/* wait for the operation to be completed */
	while (*(volatile u_int32_t *)(BS_BASE + BS_XCCR) != 0)
		;
a144 3
	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
@

