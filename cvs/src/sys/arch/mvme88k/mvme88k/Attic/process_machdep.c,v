head	1.13;
access;
symbols
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.6
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.4
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2004.04.29.14.33.27;	author miod;	state dead;
branches;
next	1.12;

1.12
date	2004.01.12.21.33.15;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.27.52;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.00.42.24;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.09.05.44.42;	author smurph;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	2001.02.01.03.38.22;	author smurph;	state Exp;
branches;
next	1.7;

1.7
date	99.09.27.19.13.24;	author smurph;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	99.05.29.04.41.47;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	99.02.09.06.36.30;	author smurph;	state Exp;
branches;
next	1.4;

1.4
date	98.12.15.05.11.02;	author smurph;	state Exp;
branches;
next	1.3;

1.3
date	97.03.03.20.21.48;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.03.03.19.08.14;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.12.32.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.32.31;	author rahnds;	state Exp;
branches;
next	;

1.7.4.1
date	2001.04.18.16.11.40;	author niklas;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.03.28.10.36.03;	author niklas;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2003.06.07.11.13.17;	author ho;	state Exp;
branches;
next	1.7.4.4;

1.7.4.4
date	2004.02.19.10.49.08;	author niklas;	state Exp;
branches;
next	1.7.4.5;

1.7.4.5
date	2004.06.05.23.09.51;	author niklas;	state dead;
branches;
next	;

1.9.6.1
date	2002.06.11.03.37.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Continue factorizing m88k common code, this time files in <arch>/<arch>
which were copied verbatim from mvme88k to luna88k.

This requires backing out syntactic sugar in mvme88k kernel configuration
files which would deduct the required processor types from the board models,
as the common code only depends upon the M88100 and M88110 defines.
@
text
@/*	$OpenBSD: process_machdep.c,v 1.12 2004/01/12 21:33:15 miod Exp $ */

/*
 * Copyright (c) 1993 The Regents of the University of California.
 * Copyright (c) 1993 Jan-Simon Pendry
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Id: procfs_i386.c,v 4.1 1993/12/17 10:47:45 jsp Rel
 */

/*
 * This file may seem a bit stylized, but that so that it's easier to port.
 * Functions to be implemented here are:
 *
 * process_read_regs(proc, regs)
 *	Get the current user-visible register set from the process
 *	and copy it into the regs structure (<machine/reg.h>).
 *	The process is stopped at the time read_regs is called.
 *
 * process_write_regs(proc, regs)
 *	Update the current register set from the passed in regs
 *	structure.  Take care to avoid clobbering special CPU
 *	registers or privileged bits in the PSL.
 *	The process is stopped at the time write_regs is called.
 *
 * process_sstep(proc)
 *	Arrange for the process to trap after executing a single instruction.
 *
 * process_set_pc(proc)
 *	Set the process's program counter.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/vnode.h>
#include <machine/psl.h>
#include <machine/reg.h>
#include <machine/trap.h>
#if 0
#include <machine/frame.h>
#endif
#include <sys/ptrace.h>

int
process_read_regs(p, regs)
	struct proc *p;
	struct reg *regs;
{
	bcopy((caddr_t)USER_REGS(p), (caddr_t)regs, sizeof(struct reg));
	return (0);
}

int
process_read_fpregs(p, regs)
	struct proc     *p;
	struct fpreg    *regs;
{
#if 0
	extern struct fpstate   initfpstate;
	struct fpstate          *statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
#endif
	return 0;
}

#ifdef PTRACE

int
process_write_regs(p, regs)
	struct proc *p;
	struct reg *regs;
{
	bcopy((caddr_t)regs, (caddr_t)USER_REGS(p), sizeof(struct reg));
	return (0);
}

int
process_sstep(p, sstep)
	struct proc *p;
	int sstep;
{
	if (sstep)
		cpu_singlestep(p);
	return (0);
}

int
process_set_pc(p, addr)
	struct proc *p;
	caddr_t addr;
{
	struct reg *regs;

	regs = USER_REGS(p);
	regs->sxip = (u_int)addr;
	regs->snip = (u_int)addr + 4;
	return (0);
}

int
process_write_fpregs(p, regs)
	struct proc     *p;
	struct fpreg    *regs;
{
#if 0
	if (p->p_md.md_fpstate == NULL)
		return EINVAL;

	bcopy(regs, p->p_md.md_fpstate, sizeof(struct fpreg));
#endif
	return 0;
}

#endif	/* PTRACE */
@


1.12
log
@Shrink the reg structure, for it to only contain registers (eh), and make
the remaining fielhs only available in struct trapframe.

This has the additional benefit of preventing smarty-pants from altering
the frame a bit too easily from ddb, at the expense of a few ugly casts in
ddb.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.11 2003/06/02 23:27:52 millert Exp $ */
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.10 2002/03/14 00:42:24 miod Exp $ */
a73 1
/* NOTE: struct reg == struct trapframe */
a131 4
	/*
	p->p_md.md_tf->sxip = (u_int)addr;
	     p->p_md.md_tf->snip = (u_int)addr + 4;
	*/
@


1.10
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2001/03/09 05:44:42 smurph Exp $ */
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@kernel will compile with -Werror.  Added intr.h
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.8 2001/02/01 03:38:22 smurph Exp $ */
a84 1

d90 19
a144 17
process_read_fpregs(p, regs)
	struct proc     *p;
	struct fpreg    *regs;
{
#if 0
	extern struct fpstate   initfpstate;
	struct fpstate          *statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
#endif
	return 0;
}

int
d157 2
@


1.9.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2001/03/09 05:44:42 smurph Exp $ */
d85 1
a90 19
process_read_fpregs(p, regs)
	struct proc     *p;
	struct fpreg    *regs;
{
#if 0
	extern struct fpstate   initfpstate;
	struct fpstate          *statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
#endif
	return 0;
}

#ifdef PTRACE

int
d127 17
a155 2

#endif	/* PTRACE */
@


1.8
log
@Major changes to get MVME188 working.  More header and code cleanups.  The
kernel is tested on MVME188A/2P256 and MVME188A/1P64.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 1999/09/27 19:13:24 smurph Exp $ */
d73 1
d82 2
a83 2
struct proc *p;
struct reg *regs;
d92 2
a93 2
struct proc *p;
struct reg *regs;
d101 2
a102 2
struct proc *p;
int sstep;
d111 2
a112 2
struct proc *p;
caddr_t addr;
d128 2
a129 2
struct proc     *p;
struct fpreg    *regs;
d145 2
a146 2
struct proc     *p;
struct fpreg    *regs;
@


1.7
log
@Added to support MVME188 and MVME197
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 1999/02/09 06:36:30 smurph Exp $ */
d81 2
a82 2
	struct proc *p;
	struct reg *regs;
d84 2
a85 2
   
   bcopy((caddr_t)USER_REGS(p), (caddr_t)regs, sizeof(struct reg));
d91 2
a92 2
	struct proc *p;
	struct reg *regs;
d100 2
a101 2
	struct proc *p;
	int sstep;
d110 2
a111 2
	struct proc *p;
	caddr_t addr;
d114 8
a121 8
	
   regs = USER_REGS(p);
   regs->sxip = (u_int)addr;
   regs->snip = (u_int)addr + 4;
   /*
   p->p_md.md_tf->sxip = (u_int)addr;
	p->p_md.md_tf->snip = (u_int)addr + 4;
   */
d127 2
a128 2
struct proc	*p;
struct fpreg	*regs;
d131 2
a132 2
	extern struct fpstate	initfpstate;
	struct fpstate		*statep = &initfpstate;
d144 2
a145 2
struct proc	*p;
struct fpreg	*regs;
@


1.7.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2001/03/09 05:44:42 smurph Exp $ */
a72 1
#include <machine/trap.h>
d84 2
a85 2

	bcopy((caddr_t)USER_REGS(p), (caddr_t)regs, sizeof(struct reg));
d114 8
a121 8

	regs = USER_REGS(p);
	regs->sxip = (u_int)addr;
	regs->snip = (u_int)addr + 4;
	/*
	p->p_md.md_tf->sxip = (u_int)addr;
	     p->p_md.md_tf->snip = (u_int)addr + 4;
	*/
d127 2
a128 2
	struct proc     *p;
	struct fpreg    *regs;
d131 2
a132 2
	extern struct fpstate   initfpstate;
	struct fpstate          *statep = &initfpstate;
d144 2
a145 2
	struct proc     *p;
	struct fpreg    *regs;
@


1.7.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d85 1
a90 19
process_read_fpregs(p, regs)
	struct proc     *p;
	struct fpreg    *regs;
{
#if 0
	extern struct fpstate   initfpstate;
	struct fpstate          *statep = &initfpstate;

	/* NOTE: struct fpreg == struct fpstate */
	if (p->p_md.md_fpstate)
		statep = p->p_md.md_fpstate;
	bcopy(statep, regs, sizeof(struct fpreg));
#endif
	return 0;
}

#ifdef PTRACE

int
d127 17
a155 2

#endif	/* PTRACE */
@


1.7.4.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7.4.2 2002/03/28 10:36:03 niklas Exp $ */
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d74 1
d133 4
@


1.7.4.5
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7.4.4 2004/02/19 10:49:08 niklas Exp $ */
@


1.6
log
@Added vme bus device drivers. MVME328, MVME376, MVME332
@
text
@d84 2
a85 1
	bcopy(p->p_md.md_tf, (caddr_t)regs, sizeof(struct reg));
d94 1
a94 1
	bcopy((caddr_t)regs, p->p_md.md_tf, sizeof(struct reg));
d101 1
d113 7
a119 1
	p->p_md.md_tf->sxip = (u_int)addr;
d121 1
@


1.5
log
@Added kernel support for user debugging.  Fixed file ID's
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 1994/11/20 20:54:37 deraadt Exp $ */
d77 1
a83 2
#if 0
	/* NOTE: struct reg == struct trapframe */
a84 1
#endif
a92 2
#if 0
	int	psr = p->p_md.md_tf->tf_epsr & ~PSR_ICC;
a93 2
	p->p_md.md_tf->tf_epsr = psr | (regs->r_epsr & PSR_ICC);
#endif
a100 1
#if 0
d102 1
a102 2
		return EINVAL;
#endif
d111 2
a112 4
#if 0
	p->p_md.md_tf->tf_pc = (u_int)addr;
	p->p_md.md_tf->tf_npc = (u_int)addr + 4;
#endif
@


1.4
log
@Commit for the first working mvme88k port.
@
text
@d1 1
a1 1
/*	$NetBSD: process_machdep.c,v 1.5 1994/11/20 20:54:37 deraadt Exp $ */
@


1.3
log
@Cleanup after import. This also seems to bring up the current version.
@
text
@d96 1
a96 1
	int	psr = p->p_md.md_tf->tf_psr & ~PSR_ICC;
d98 1
a98 1
	p->p_md.md_tf->tf_psr = psr | (regs->r_psr & PSR_ICC);
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@@


1.1
log
@moved from m88k directory
@
text
@@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@@
