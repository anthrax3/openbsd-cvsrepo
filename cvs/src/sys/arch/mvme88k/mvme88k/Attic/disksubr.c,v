head	1.70;
access;
symbols
	OPENBSD_5_5:1.69.0.12
	OPENBSD_5_5_BASE:1.69
	OPENBSD_5_4:1.69.0.8
	OPENBSD_5_4_BASE:1.69
	OPENBSD_5_3:1.69.0.6
	OPENBSD_5_3_BASE:1.69
	OPENBSD_5_2:1.69.0.4
	OPENBSD_5_2_BASE:1.69
	OPENBSD_5_1_BASE:1.69
	OPENBSD_5_1:1.69.0.2
	OPENBSD_5_0:1.68.0.2
	OPENBSD_5_0_BASE:1.68
	OPENBSD_4_9:1.65.0.2
	OPENBSD_4_9_BASE:1.65
	OPENBSD_4_8:1.64.0.2
	OPENBSD_4_8_BASE:1.64
	OPENBSD_4_7:1.62.0.2
	OPENBSD_4_7_BASE:1.62
	OPENBSD_4_6:1.60.0.4
	OPENBSD_4_6_BASE:1.60
	OPENBSD_4_5:1.59.0.6
	OPENBSD_4_5_BASE:1.59
	OPENBSD_4_4:1.59.0.2
	OPENBSD_4_4_BASE:1.59
	OPENBSD_4_3:1.56.0.4
	OPENBSD_4_3_BASE:1.56
	OPENBSD_4_2:1.56.0.2
	OPENBSD_4_2_BASE:1.56
	OPENBSD_4_1:1.33.0.4
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.33.0.2
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.31.0.2
	OPENBSD_3_9_BASE:1.31
	OPENBSD_3_8:1.28.0.2
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.27.0.2
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	SMP_SYNC_A:1.25
	SMP_SYNC_B:1.25
	OPENBSD_3_5:1.25.0.2
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.16.0.4
	UBC_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.4
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.1;
locks; strict;
comment	@ * @;


1.70
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.69;

1.69
date	2011.10.21.13.08.01;	author miod;	state Exp;
branches;
next	1.68;

1.68
date	2011.04.16.03.21.15;	author krw;	state Exp;
branches;
next	1.67;

1.67
date	2011.04.15.14.57.29;	author krw;	state Exp;
branches;
next	1.66;

1.66
date	2011.04.06.13.46.50;	author miod;	state Exp;
branches;
next	1.65;

1.65
date	2011.02.26.13.07.48;	author krw;	state Exp;
branches;
next	1.64;

1.64
date	2010.04.23.15.25.20;	author jsing;	state Exp;
branches;
next	1.63;

1.63
date	2010.04.05.02.09.16;	author miod;	state Exp;
branches;
next	1.62;

1.62
date	2010.02.26.23.11.57;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2009.08.13.15.23.10;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2009.06.04.21.57.56;	author miod;	state Exp;
branches;
next	1.59;

1.59
date	2008.06.12.06.58.36;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2008.06.11.12.35.43;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2008.06.10.20.50.23;	author beck;	state Exp;
branches;
next	1.56;

1.56
date	2007.06.20.18.15.46;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2007.06.18.04.31.16;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2007.06.17.00.27.29;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2007.06.14.03.37.23;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2007.06.14.03.35.29;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2007.06.14.03.29.34;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2007.06.12.20.57.43;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2007.06.09.23.06.46;	author krw;	state Exp;
branches;
next	1.48;

1.48
date	2007.06.09.04.33.14;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2007.06.09.04.08.39;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2007.06.09.00.39.25;	author krw;	state Exp;
branches;
next	1.45;

1.45
date	2007.06.08.22.17.10;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2007.06.08.05.34.28;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2007.06.07.03.41.52;	author krw;	state Exp;
branches;
next	1.42;

1.42
date	2007.06.07.00.28.17;	author krw;	state Exp;
branches;
next	1.41;

1.41
date	2007.06.06.16.42.06;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.05.02.38.37;	author krw;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.05.00.38.17;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.02.02.35.27;	author krw;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.31.22.06.03;	author krw;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.31.19.57.44;	author krw;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.29.06.28.15;	author otto;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.29.05.08.20;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2006.08.17.10.34.14;	author krw;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.15.20.20.40;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.22.00.40.01;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.11.07.22.01;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2005.12.22.02.51.24;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2005.03.30.07.52.32;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2004.09.30.21.46.38;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2004.07.20.20.33.21;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.17.14.16.04;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.12.17.30.26;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.05.20.25.08;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2003.08.21.20.40.33;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.21.12.42.49;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.04.16.36.15;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2003.04.06.15.28.26;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.06.03.02.44;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.01.26.40;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.26.14.31.12;	author miod;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	2001.04.14.00.11.45;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.16.00.09.08;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.09.05.44.41;	author smurph;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.08.00.03.30;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.18.21.00.38;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	99.09.27.19.13.21;	author smurph;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	99.02.09.06.36.28;	author smurph;	state Exp;
branches;
next	1.8;

1.8
date	99.01.08.04.29.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.12.15.05.11.01;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	98.10.04.23.27.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.10.03.21.18.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.21.46.47;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.05.24.03.02.29;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.04.07.11.21.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.19.32.33;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.32.33;	author rahnds;	state Exp;
branches;
next	;

1.10.4.1
date	2001.04.18.16.11.30;	author niklas;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.10.4.3;

1.10.4.3
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.10.4.4;

1.10.4.4
date	2003.05.13.19.41.06;	author ho;	state Exp;
branches;
next	1.10.4.5;

1.10.4.5
date	2003.06.07.11.13.17;	author ho;	state Exp;
branches;
next	1.10.4.6;

1.10.4.6
date	2004.02.19.10.49.07;	author niklas;	state Exp;
branches;
next	1.10.4.7;

1.10.4.7
date	2004.06.05.23.09.50;	author niklas;	state Exp;
branches;
next	;

1.16.4.1
date	2002.06.11.03.37.10;	author art;	state Exp;
branches;
next	1.16.4.2;

1.16.4.2
date	2003.05.19.21.45.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.70
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: disksubr.c,v 1.69 2011/10/21 13:08:01 miod Exp $	*/
/*
 * Copyright (c) 1998 Steve Murphree, Jr.
 * Copyright (c) 1995 Dale Rahn.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/disklabel.h>
#include <sys/disk.h>

void	bsdtocpulabel(struct disklabel *, struct mvmedisklabel *);
int	cputobsdlabel(struct disklabel *, struct mvmedisklabel *);

/*
 * Attempt to read a disk label from a device
 * using the indicated strategy routine.
 * The label must be partly set up before this:
 * secpercyl and anything required in the strategy routine
 * (e.g., sector size) must be filled in before calling us.
 */
int
readdisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, int spoofonly)
{
	struct buf *bp = NULL;
	int error;

	if ((error = initdisklabel(lp)))
		goto done;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		goto done;

	bp->b_blkno = LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if (biowait(bp)) {
		error = bp->b_error;
		goto done;
	}

	error = cputobsdlabel(lp, (struct mvmedisklabel *)bp->b_data);
	if (error == 0)
		goto done;

#if defined(CD9660)
	error = iso_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif
#if defined(UDF)
	error = udf_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}

/*
 * Write disk label back to device after modification.
 */
int
writedisklabel(dev_t dev, void (*strat)(struct buf *), struct disklabel *lp)
{
	struct buf *bp = NULL;
	int error;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	/* Read it in, slap the new label in, and write it back out */
	bp->b_blkno = LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if ((error = biowait(bp)) != 0)
		goto done;

	bsdtocpulabel(lp, (struct mvmedisklabel *)bp->b_data);

	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_WRITE | B_RAW);
	(*strat)(bp);
	error = biowait(bp);

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}

void
bsdtocpulabel(struct disklabel *lp, struct mvmedisklabel *clp)
{
	char *tmot = "MOTOROLA", *id = "M88K", *mot;
	int i;
	u_short osa_u, osa_l, osl;
	u_int oss;

	/* preserve existing VID boot code information */
	osa_u = clp->vid_osa_u;
	osa_l = clp->vid_osa_l;
	osl = clp->vid_osl;
	oss = clp->vid_oss;
	bzero(clp, sizeof(*clp));
	clp->vid_osa_u = osa_u;
	clp->vid_osa_l = osa_l;
	clp->vid_osl = osl;
	clp->vid_oss = oss;
	clp->vid_cas = clp->vid_cal = 1;

	clp->magic1 = lp->d_magic;
	clp->type = lp->d_type;
	clp->subtype = lp->d_subtype;
	strncpy(clp->vid_vd, lp->d_typename, 16);
	strncpy(clp->packname, lp->d_packname, 16);
	clp->cfg_psm = lp->d_secsize;
	clp->cfg_spt = lp->d_nsectors;
	clp->cfg_trk = lp->d_ncylinders;	/* trk is really num of cyl! */
	clp->cfg_hds = lp->d_ntracks;

	clp->secpercyl = lp->d_secpercyl;
	clp->secperunit = DL_GETDSIZE(lp);
	clp->acylinders = lp->d_acylinders;

	clp->cfg_ilv = 1;
	clp->cfg_sof = 1;
	clp->cylskew = 1;
	clp->headswitch = 0;
	clp->cfg_ssr = 0;
	clp->flags = lp->d_flags;
	for (i = 0; i < NDDATA; i++)
		clp->drivedata[i] = lp->d_drivedata[i];
	for (i = 0; i < NSPARE; i++)
		clp->spare[i] = lp->d_spare[i];

	clp->magic2 = lp->d_magic2;
	clp->checksum = lp->d_checksum;
	clp->partitions = lp->d_npartitions;
	clp->bbsize = lp->d_bbsize;
	clp->sbsize = lp->d_sbsize;
	clp->checksum = lp->d_checksum;
	bcopy(&lp->d_partitions[0], clp->vid_4, sizeof(struct partition) * 4);
	bcopy(&lp->d_partitions[4], clp->cfg_4, sizeof(struct partition) * 12);
	clp->version = 2;
	bcopy(&lp->d_uid, clp->vid_4_1, sizeof(lp->d_uid));

	/* Put "MOTOROLA" in the VID. This makes it a valid boot disk. */
	for (mot = clp->vid_mot, i = 0; i < 8; i++)
		*mot++ = *tmot++;

	/* put volume id in the VID */
	for (mot = clp->vid_id, i = 0; i < 4; i++)
		*mot++ = *id++;
}

int
cputobsdlabel(struct disklabel *lp, struct mvmedisklabel *clp)
{
	int i;

	if (clp->magic1 != DISKMAGIC || clp->magic2 != DISKMAGIC)
		return (EINVAL);	/* no disk label */

	lp->d_magic = clp->magic1;
	lp->d_type = clp->type;
	lp->d_subtype = clp->subtype;
	strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
	strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
	lp->d_secsize = clp->cfg_psm;
	lp->d_nsectors = clp->cfg_spt;
	lp->d_ncylinders = clp->cfg_trk; /* trk is really num of cyl! */
	lp->d_ntracks = clp->cfg_hds;

	lp->d_secpercyl = clp->secpercyl;
	if (DL_GETDSIZE(lp) == 0)
		DL_SETDSIZE(lp, clp->secperunit);
	lp->d_acylinders = clp->acylinders;
	lp->d_flags = clp->flags;
	for (i = 0; i < NDDATA; i++)
		lp->d_drivedata[i] = clp->drivedata[i];
	for (i = 0; i < NSPARE; i++)
		lp->d_spare[i] = clp->spare[i];

	lp->d_magic2 = clp->magic2;
	lp->d_npartitions = clp->partitions;
	lp->d_bbsize = clp->bbsize;
	lp->d_sbsize = clp->sbsize;

	bcopy(clp->vid_4, &lp->d_partitions[0], sizeof(struct partition) * 4);
	bcopy(clp->cfg_4, &lp->d_partitions[4], sizeof(struct partition) * 12);
	bcopy(clp->vid_4_1, &lp->d_uid, sizeof(lp->d_uid));

	if (clp->version < 2) {
		struct __partitionv0 *v0pp = (struct __partitionv0 *)lp->d_partitions;
		struct partition *pp = lp->d_partitions;

		for (i = 0; i < lp->d_npartitions; i++, pp++, v0pp++) {
			pp->p_fragblock = DISKLABELV1_FFS_FRAGBLOCK(v0pp->
			    p_fsize, v0pp->p_frag);
			pp->p_offseth = 0;
			pp->p_sizeh = 0;
		}
	}

	lp->d_version = 1;
	lp->d_checksum = 0;
	lp->d_checksum = dkcksum(lp);
	return (0);
}
@


1.69
log
@Copy the DUID back and forth between the in-core label and the Motorola VID
block by using 8 unused bytes from the configuration substruct.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.68 2011/04/16 03:21:15 krw Exp $	*/
@


1.68
log
@Use 'CLR(<buf>->b_flags, B_READ | B_WRITE | B_DONE)' regardless of
what the previous IO was. Less chance of copy and paste errors.
Suggested by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.67 2011/04/15 14:57:29 krw Exp $	*/
d190 1
d236 1
@


1.67
log
@In days of yore one could arbitrarily whack buffer flags. Those days
are past. Use CLR() and SET() to modify necessary flags while leaving
the flags used by the buffer cache in peace.

Should make bufcache code much less confused about the state of the
bufs used in reading/writing disklabels. Other such flag abuses no
doubt await a visit.

Errors in original diff found by miod@@.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.66 2011/04/06 13:46:50 miod Exp $	*/
d66 1
a66 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d114 1
a114 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d122 1
a122 1
	CLR(bp->b_flags, B_READ | B_DONE);
@


1.66
log
@The various read*label() have stopped returning error strings for quite
some time, and return errnos instead. Fix or remove out-of-date comments
mentioning the error strings, and make their callers check the return value
against zero, not NULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.65 2011/02/26 13:07:48 krw Exp $	*/
d66 2
a67 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d114 2
a115 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d122 2
a123 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.65
log
@Force the DUID cache used to generate hw.disknames to be updated
after every disklabel read or write. This keeps the DUID cache more
in sync with the physical world. De-syncing noted by drahn@@ while
zapping disklabels with dd.

ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.64 2010/04/23 15:25:20 jsing Exp $	*/
a44 1
 * Returns NULL on success and an error string on failure.
a45 1

@


1.64
log
@Recycle unused disklabel fields in order to create a disklabel unique
identifier, allowing the disk to be identified without relying on the
device name.

ok deraadt@@ krw@@ beck@@ marco@@ todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.62 2010/02/26 23:11:57 deraadt Exp $	*/
d95 1
d131 1
@


1.63
log
@Be sure to preserve boot code load address and size information when
writing a new VID label.
@
text
@a164 2
	clp->sparespertrack = lp->d_sparespertrack;
	clp->sparespercyl = lp->d_sparespercyl;
a165 1
	clp->rpm = lp->d_rpm;
d167 1
a167 1
	clp->cfg_ilv = lp->d_interleave;
a217 2
	lp->d_sparespertrack = clp->sparespertrack;
	lp->d_sparespercyl = clp->sparespercyl;
a218 2
	lp->d_rpm = clp->rpm;
	lp->d_interleave = clp->cfg_ilv;
@


1.62
log
@when we build a vendor label for writing, clear the memory supplied by the
buffer cache first, so that all sorts of gibble doesn't end up on the disk.
ok kettenis (for the sparc/sparc64 ones, at least)
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.61 2009/08/13 15:23:10 deraadt Exp $	*/
d138 2
d141 5
d147 6
@


1.61
log
@Replace the error strings that were being passed around with much simpler
errnos.  Note that the error strings are being ignored, since we long ago
decided to not spam the console, and there is no other nice way to use the
errors (without changing the ioctls to pass it back)
The errno is now useful, since we can pass b_error from failing IO up, and
the drive can decide how to use that
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.60 2009/06/04 21:57:56 miod Exp $	*/
d139 1
@


1.60
log
@More fallback from struct disklabel changes, yawn
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.59 2008/06/12 06:58:36 deraadt Exp $	*/
d36 2
a37 2
void bsdtocpulabel(struct disklabel *, struct mvmedisklabel *);
void cputobsdlabel(struct disklabel *, struct mvmedisklabel *);
d48 1
a48 1
char *
a52 1
	struct mvmedisklabel *mlp;
a53 1
	char *msg;
d55 1
a55 1
	if ((msg = initdisklabel(lp)))
d70 2
a71 9
	error = biowait(bp);
	if (error) {
		msg = "disk label read error";
		goto done;
	}

	mlp = (struct mvmedisklabel *)bp->b_data;
	if (mlp->magic1 != DISKMAGIC || mlp->magic2 != DISKMAGIC) {
		msg = "no disk label";
d75 2
a76 2
	cputobsdlabel(lp, mlp);
	if (dkcksum(lp) == 0)
a77 1
	msg = "disk label corrupted";
d80 2
a81 2
	if (iso_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a82 1
	}
d85 2
a86 2
	if (udf_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a87 1
	}
d95 1
a95 1
	return (msg);
d186 1
a186 1
void
d191 3
d241 1
@


1.59
log
@Bring biomem diff back into the tree after the nfs_bio.c fix went in.
ok thib beck art
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.57 2008/06/10 20:50:23 beck Exp $	*/
d169 4
a172 16
	clp->cfg_sof = lp->d_trackskew;
	clp->cylskew = lp->d_cylskew;
	clp->headswitch = lp->d_headswitch;

	/* this silly table is for winchester drives */
	if (lp->d_trkseek < 6)
		clp->cfg_ssr = 0;
	else if (lp->d_trkseek < 10)
		clp->cfg_ssr = 1;
	else if (lp->d_trkseek < 15)
		clp->cfg_ssr = 2;
	else if (lp->d_trkseek < 20)
		clp->cfg_ssr = 3;
	else
		clp->cfg_ssr = 4;

a220 22
	lp->d_trackskew = clp->cfg_sof;
	lp->d_cylskew = clp->cylskew;
	lp->d_headswitch = clp->headswitch;

	/* this silly table is for winchester drives */
	switch (clp->cfg_ssr) {
	case 1:
		lp->d_trkseek = 6;
		break;
	case 2:
		lp->d_trkseek = 10;
		break;
	case 3:
		lp->d_trkseek = 15;
		break;
	case 4:
		lp->d_trkseek = 20;
		break;
	default:
		lp->d_trkseek = 0;
	}

@


1.58
log
@back out biomem diff since it is not right yet.  Doing very large
file copies to nfsv2 causes the system to eventually peg the console.
On the console ^T indicates that the load is increasing rapidly, ddb
indicates many calls to getbuf, there is some very slow nfs traffic
making none (or extremely slow) progress.  Eventually some machines
seize up entirely.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.56 2007/06/20 18:15:46 deraadt Exp $	*/
d70 1
a70 1
	bp->b_flags = B_BUSY | B_READ;
d126 1
a126 1
	bp->b_flags = B_BUSY | B_READ;
d133 1
a133 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.57
log
@Fix buffer cache pending read statistics by ensuring we can identify
biowait() reads that do *not* come from the buffer cache - we use the
B_RAW flag to identify these at art's suggestion - since it makes sense
and the flag was not being used. this just flags all these buffers with
B_RAW - biodone already ignores returned buffers marked B_RAW.
ok art@@
@
text
@d70 1
a70 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d126 1
a126 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d133 1
a133 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.56
log
@b_cylinder does not need to be set on the callpath down into drivers.
cpu_disklabel can go away, since nothing anymore needs to use it; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.55 2007/06/18 04:31:16 deraadt Exp $	*/
d70 1
a70 1
	bp->b_flags = B_BUSY | B_READ;
d126 1
a126 1
	bp->b_flags = B_BUSY | B_READ;
d133 1
a133 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.55
log
@include not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.54 2007/06/17 00:27:29 deraadt Exp $	*/
d50 1
a50 1
    struct disklabel *lp, struct cpu_disklabel *osdep, int spoofonly)
a68 1
	bp->b_cylinder = 0; /* contained in block 0 */
d114 1
a114 2
writedisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, struct cpu_disklabel *osdep)
a124 1
	bp->b_cylinder = 0;
@


1.54
log
@significantly simplified disklabel infrastructure.  MBR handling becomes MI
to support hotplug media on most architectures.  disklabel setup and
verification done using new helper functions.  Disklabels must *always*
have a correct checksum now.  Same code paths are used to learn on-disk
location disklabels, to avoid new errors sneaking in.  Tested on almost all
cases, testing help from todd, kettenis, krw, otto, dlg, robert, gwk, drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.53 2007/06/14 03:37:23 deraadt Exp $	*/
a32 1
#include <sys/device.h>
@


1.53
log
@excessive blank lines making the versions different
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.52 2007/06/14 03:35:29 deraadt Exp $	*/
d37 2
a38 2
void bsdtocpulabel(struct disklabel *, struct cpu_disklabel *);
void cputobsdlabel(struct disklabel *, struct cpu_disklabel *);
d54 3
a56 2
	char *msg = NULL;
	int error, i;
d58 1
a58 7
	/* minimal requirements for archetypal disk label */
	if (lp->d_secsize < DEV_BSIZE)
		lp->d_secsize = DEV_BSIZE;
	if (DL_GETDSIZE(lp) == 0)
		DL_SETDSIZE(lp, MAXDISKSIZE);
	if (lp->d_secpercyl == 0) {
		msg = "invalid geometry";
d60 4
a63 10
	}
	lp->d_npartitions = RAW_PART + 1;
	for (i = 0; i < RAW_PART; i++) {
		DL_SETPSIZE(&lp->d_partitions[i], 0);
		DL_SETPOFFSET(&lp->d_partitions[i], 0);
	}
	if (DL_GETPSIZE(&lp->d_partitions[RAW_PART]) == 0)
		DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[RAW_PART], 0);
	lp->d_version = 1;
a68 4
	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

a73 1

a74 3
	if (error == 0)
		bcopy(bp->b_data, osdep, sizeof (struct cpu_disklabel));

d80 11
a103 12
	if (osdep->magic1 != DISKMAGIC || osdep->magic2 != DISKMAGIC) {
		msg = "no disk label";
		goto done;
	}

	cputobsdlabel(lp, osdep);

	if (dkcksum(lp) != 0) {
		msg = "disk label corrupted";
		goto done;
	}

a108 1
	disklabeltokernlabel(lp);
d126 1
d128 1
a130 1
	bp->b_cylinder = 0; /* contained in block 0 */
d132 1
a132 8

	if ((error = biowait(bp)) != 0) {
		/* nothing */
	} else {
		bcopy(bp->b_data, osdep, sizeof(struct cpu_disklabel));
	}

	if (error)
d135 1
a135 1
	bsdtocpulabel(lp, osdep);
d137 3
a139 14
	if (lp->d_magic == DISKMAGIC && lp->d_magic2 == DISKMAGIC &&
	    dkcksum(lp) == 0) {
		bcopy(osdep, bp->b_data, sizeof(struct cpu_disklabel));

		/* request no partition relocation by driver on I/O operations */
		bp->b_dev = dev;
		bp->b_blkno = 0; /* contained in block 0 */
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_WRITE;
		bp->b_cylinder = 0; /* contained in block 0 */
		(*strat)(bp);

		error = biowait(bp);
	}
d150 1
a150 1
bsdtocpulabel(struct disklabel *lp, struct cpu_disklabel *clp)
d215 1
a215 1
cputobsdlabel(struct disklabel *lp, struct cpu_disklabel *clp)
a265 1
	lp->d_checksum = 0;
d273 11
a283 4
	if (clp->version == 2)
		lp->d_version = 1;
	else
		lp->d_version = 0;
d285 2
@


1.52
log
@set the prototype disklabel to version 1
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.51 2007/06/14 03:29:34 deraadt Exp $	*/
a131 1

@


1.51
log
@do not depend on previous loop variable, use a constant instead
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.50 2007/06/12 20:57:43 deraadt Exp $	*/
d74 1
@


1.50
log
@all disksubr.c did their b_flags manipulation differently (and wrong).
correct and unify; ok thib miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.49 2007/06/09 23:06:46 krw Exp $	*/
d71 3
a73 3
	if (DL_GETPSIZE(&lp->d_partitions[i]) == 0)
		DL_SETPSIZE(&lp->d_partitions[i], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[i], 0);
@


1.49
log
@The differences in the last non-homogeneous bounds_check_with_label()
routines (alpha, vax) prove to be not worth keeping. Move
bounds_check_with_label() into the MI world. Eliminate unreliable and
almost certainly useless checks for overwriting a disklabel.

After discussion with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.48 2007/06/09 04:33:14 deraadt Exp $	*/
d160 1
a160 1
		return (error);
d179 1
@


1.48
log
@various simple typo cleanups, basically making this look a lot more like
other disksubr functions without changing any of the effect.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.47 2007/06/09 04:08:39 deraadt Exp $	*/
a184 57

/*
 * Determine the size of the transfer, and make sure it is
 * within the boundaries of the partition. Adjust transfer
 * if needed, and signal errors or early completion.
 */
int
bounds_check_with_label(struct buf *bp, struct disklabel *lp,
    struct cpu_disklabel *osdep, int wlabel)
{
#define blockpersec(count, lp) ((count) * (((lp)->d_secsize) / DEV_BSIZE))
	struct partition *p = lp->d_partitions + DISKPART(bp->b_dev);
	int labelsector = blockpersec(DL_GETPOFFSET(&lp->d_partitions[RAW_PART]), lp) +
	    LABELSECTOR;
	int sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* avoid division by zero */
	if (lp->d_secpercyl == 0) {
		bp->b_error = EINVAL;
		goto bad;
	}

	/* beyond partition? */
	if (bp->b_blkno + sz > blockpersec(DL_GETPSIZE(p), lp)) {
		sz = blockpersec(DL_GETPSIZE(p), lp) - bp->b_blkno;
		if (sz == 0) {
			/* If exactly at end of disk, return EOF. */
			bp->b_resid = bp->b_bcount;
			return (-1);
		}
		if (sz < 0) {
			/* If past end of disk, return EINVAL. */
			bp->b_error = EINVAL;
			goto bad;
		}
		/* Otherwise, truncate request. */
		bp->b_bcount = sz << DEV_BSHIFT;
	}

	/* Overwriting disk label? */
	if (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) <= labelsector &&
	    bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) + sz > labelsector &&
	    (bp->b_flags & B_READ) == 0 && !wlabel) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* calculate cylinder for disksort to order transfers with */
	bp->b_cylinder = (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp)) /
	    lp->d_secpercyl;
	return (1);

bad:
	bp->b_flags |= B_ERROR;
	return (-1);
}

@


1.47
log
@by hand i carefully found that all the differences in setdisklabel()
implimentations were simply either missing code, or spacing and such.
setdisklabel() can become MI now.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.46 2007/06/09 00:39:25 krw Exp $	*/
d51 1
a51 1
    struct disklabel *lp, struct cpu_disklabel *clp, int spoofonly)
d79 1
a79 1
	/* obtain buffer to probe drive with */
d81 1
a82 2
	/* request no partition relocation by driver on I/O operations */
	bp->b_dev = dev;
d84 1
a86 1
	bp->b_cylinder = 0; /* contained in block 0 */
d91 1
a91 1
		bcopy(bp->b_data, clp, sizeof (struct cpu_disklabel));
d111 1
a111 1
	if (clp->magic1 != DISKMAGIC || clp->magic2 != DISKMAGIC) {
d116 1
a116 1
	cputobsdlabel(lp, clp);
d125 1
a125 1
		bp->b_flags = B_INVAL | B_AGE | B_READ;
d138 1
a138 1
    struct disklabel *lp, struct cpu_disklabel *clp)
d140 1
a140 1
	struct buf *bp;
d143 1
a143 1
	/* obtain buffer to read initial cpu_disklabel, for bootloader size :-) */
d145 1
a146 2
	/* request no partition relocation by driver on I/O operations */
	bp->b_dev = dev;
d156 1
a156 1
		bcopy(bp->b_data, clp, sizeof(struct cpu_disklabel));
d159 1
a159 4
	bp->b_flags = B_INVAL | B_AGE | B_READ;
	brelse(bp);

	if (error) {
a160 1
	}
d162 1
a162 1
	bsdtocpulabel(lp, clp);
d166 1
a166 4
		/* obtain buffer to scrozz drive with */
		bp = geteblk((int)lp->d_secsize);

		bcopy(clp, bp->b_data, sizeof(struct cpu_disklabel));
d172 1
a172 1
		bp->b_flags = B_WRITE;
d177 1
d179 2
a180 1
		bp->b_flags = B_INVAL | B_AGE | B_READ;
d186 5
d246 1
a246 3
	char *tmot = "MOTOROLA";
	char *id = "M88K";
	char *mot;
d272 1
a272 1
	if (lp->d_trkseek < 6) {
d274 1
a274 1
	} else if (lp->d_trkseek < 10) {
d276 1
a276 1
	} else if (lp->d_trkseek < 15) {
d278 1
a278 1
	} else if (lp->d_trkseek < 20) {
d280 1
a280 1
	} else {
a281 1
	}
d299 2
a300 3
	/* Put "MOTOROLA" in the VID.  This makes it a valid boot disk. */
	mot = clp->vid_mot;
	for (i = 0; i < 8; i++) {
d302 1
a302 1
	}
d304 1
a304 2
	mot = clp->vid_id;
	for (i = 0; i < 4; i++) {
a305 1
	}
d352 1
d370 1
a370 1
	else	
@


1.46
log
@Eliminate some duplicate code. No functional change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.45 2007/06/08 22:17:10 deraadt Exp $	*/
a132 52
/*
 * Check new disk label for sensibility
 * before setting it.
 */
int
setdisklabel(struct disklabel *olp, struct disklabel *nlp,
    u_int openmask, struct cpu_disklabel *clp)
{
	int i;
	struct partition *opp, *npp;

	/* sanity clause */
	if (nlp->d_secpercyl == 0 || nlp->d_secsize == 0 ||
	    (nlp->d_secsize % DEV_BSIZE) != 0)
		return (EINVAL);

	/* special case to allow disklabel to be invalidated */
	if (nlp->d_magic == 0xffffffff) {
		*olp = *nlp;
		return (0);
	}

	if (nlp->d_magic != DISKMAGIC || nlp->d_magic2 != DISKMAGIC ||
	    dkcksum(nlp) != 0)
		return (EINVAL);

	while ((i = ffs(openmask)) != 0) {
		i--;
		openmask &= ~(1 << i);
		if (nlp->d_npartitions <= i)
			return (EBUSY);
		opp = &olp->d_partitions[i];
		npp = &nlp->d_partitions[i];
		if (DL_GETPOFFSET(npp) != DL_GETPOFFSET(opp) ||
		    DL_GETPSIZE(npp) < DL_GETPSIZE(opp))
			return (EBUSY);
		/*
		 * Copy internally-set partition information
		 * if new label doesn't include it.		XXX
		 */
		if (npp->p_fstype == FS_UNUSED && opp->p_fstype != FS_UNUSED) {
			npp->p_fstype = opp->p_fstype;
			npp->p_fragblock = opp->p_fragblock;
			npp->p_cpg = opp->p_cpg;
		}
	}

	nlp->d_checksum = 0;
	nlp->d_checksum = dkcksum(nlp);
	*olp = *nlp;
	return (0);
}
@


1.45
log
@we need a new sub-code in the VID driver to indicate new "struct partition"
fields which contain p_sizeh and such fields.  handle both kinds correctly,
we hope.  tested on mvme68k
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.44 2007/06/08 05:34:28 deraadt Exp $	*/
d373 38
a410 113
	lp->d_version = 0;
	if (clp->version == 0) {
		lp->d_magic = clp->magic1;
		lp->d_type = clp->type;
		lp->d_subtype = clp->subtype;
		strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
		strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
		lp->d_secsize = clp->cfg_psm;
		lp->d_nsectors = clp->cfg_spt;
		lp->d_ncylinders = clp->cfg_trk; /* trk is really num of cyl! */
		lp->d_ntracks = clp->cfg_hds;

		lp->d_secpercyl = clp->secpercyl;
		if (DL_GETDSIZE(lp) == 0)
			DL_SETDSIZE(lp, clp->secperunit);
		lp->d_sparespertrack = clp->sparespertrack;
		lp->d_sparespercyl = clp->sparespercyl;
		lp->d_acylinders = clp->acylinders;
		lp->d_rpm = clp->rpm;
		lp->d_interleave = clp->cfg_ilv;
		lp->d_trackskew = clp->cfg_sof;
		lp->d_cylskew = clp->cylskew;
		lp->d_headswitch = clp->headswitch;

		/* this silly table is for winchester drives */
		switch (clp->cfg_ssr) {
		case 0:
			lp->d_trkseek = 0;
			break;
		case 1:
			lp->d_trkseek = 6;
			break;
		case 2:
			lp->d_trkseek = 10;
			break;
		case 3:
			lp->d_trkseek = 15;
			break;
		case 4:
			lp->d_trkseek = 20;
			break;
		default:
			lp->d_trkseek = 0;
		}
		lp->d_flags = clp->flags;
		for (i = 0; i < NDDATA; i++)
			lp->d_drivedata[i] = clp->drivedata[i];
		for (i = 0; i < NSPARE; i++)
			lp->d_spare[i] = clp->spare[i];

		lp->d_magic2 = clp->magic2;
		lp->d_checksum = clp->checksum;
		lp->d_npartitions = clp->partitions;
		lp->d_bbsize = clp->bbsize;
		lp->d_sbsize = clp->sbsize;
		bcopy(clp->vid_4, &lp->d_partitions[0], sizeof(struct partition) * 4);
		bcopy(clp->cfg_4, &lp->d_partitions[4], sizeof(struct partition) * 12);
	} else {
		lp->d_magic = clp->magic1;
		lp->d_type = clp->type;
		lp->d_subtype = clp->subtype;
		strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
		strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
		lp->d_secsize = clp->cfg_psm;
		lp->d_nsectors = clp->cfg_spt;
		lp->d_ncylinders = clp->cfg_trk; /* trk is really num of cyl! */
		lp->d_ntracks = clp->cfg_hds;

		lp->d_secpercyl = clp->secpercyl;
		if (DL_GETDSIZE(lp) == 0)
			DL_SETDSIZE(lp, clp->secperunit);
		lp->d_sparespertrack = clp->sparespertrack;
		lp->d_sparespercyl = clp->sparespercyl;
		lp->d_acylinders = clp->acylinders;
		lp->d_rpm = clp->rpm;
		lp->d_interleave = clp->cfg_ilv;
		lp->d_trackskew = clp->cfg_sof;
		lp->d_cylskew = clp->cylskew;
		lp->d_headswitch = clp->headswitch;

		/* this silly table is for winchester drives */
		switch (clp->cfg_ssr) {
		case 0:
			lp->d_trkseek = 0;
			break;
		case 1:
			lp->d_trkseek = 6;
			break;
		case 2:
			lp->d_trkseek = 10;
			break;
		case 3:
			lp->d_trkseek = 15;
			break;
		case 4:
			lp->d_trkseek = 20;
			break;
		default:
			lp->d_trkseek = 0;
		}
		lp->d_flags = clp->flags;
		for (i = 0; i < NDDATA; i++)
			lp->d_drivedata[i] = clp->drivedata[i];
		for (i = 0; i < NSPARE; i++)
			lp->d_spare[i] = clp->spare[i];

		lp->d_magic2 = clp->magic2;
		lp->d_checksum = clp->checksum;
		lp->d_npartitions = clp->partitions;
		lp->d_bbsize = clp->bbsize;
		lp->d_sbsize = clp->sbsize;
		bcopy(clp->vid_4, &lp->d_partitions[0], sizeof(struct partition) * 4);
		bcopy(clp->cfg_4, &lp->d_partitions[4], sizeof(struct partition) * 12);
d412 14
d429 3
a431 1
	lp->d_checksum = 0;
@


1.44
log
@all disklabels read from the kernel now always contain a total sector
size which is the REAL DISK SIZE.  always.  if a driver fails to set
this right, please fix it.  agreed with otto and krw
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.43 2007/06/07 03:41:52 krw Exp $	*/
d354 1
a354 1
	clp->version = 1;
d373 1
a429 2
		lp->d_checksum = 0;
		lp->d_checksum = dkcksum(lp);
a485 2
		lp->d_checksum = 0;
		lp->d_checksum = dkcksum(lp);
d487 5
@


1.43
log
@Comment 'fixes'. All bounds_check_with_label now identical except for
vax and alpha.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.42 2007/06/07 00:28:17 krw Exp $	*/
d385 2
a386 1
		DL_SETDSIZE(lp, clp->secperunit);
d443 2
a444 1
		DL_SETDSIZE(lp, clp->secperunit);
@


1.42
log
@More bounds_check_with_label homogenization. Fix a couple of typos while
there.

'so go to it!' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.41 2007/06/06 16:42:06 deraadt Exp $	*/
d278 1
a278 2
	/* overwriting disk label ? */
	/* XXX should also protect bootstrap in first 8K */
@


1.41
log
@a fair sprinking of knf, code movement, and sometimes character-by-character
accuracy so that the variious disksubr.c's can be compared easier.
setdisklabel() starts taking an int for openmask.
ok krw, and read by quite a few other people
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.40 2007/06/05 02:38:37 krw Exp $	*/
d251 1
a251 1
	int labelsector = blockpersec(DL_GETPOFFSET(&lp->d_partitions[0]), lp) +
d267 1
a267 1
			return(0);
a280 1
#if LABELSECTOR != 0
d282 1
a282 2
#endif
	    (bp->b_flags & B_READ) == 0 && wlabel == 0) {
@


1.40
log
@bounds_check_with_label() checks for i/o outside of the partition and
for overwriting the disklabel. Reorder some checks so all copies of
bounds_check_with_label do the checks in the same order. Order picked
by using the currently most popular one. Should be no functional
change.

"If it's boring, commit it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.39 2007/06/05 00:38:17 deraadt Exp $	*/
d50 2
a51 6
readdisklabel(dev, strat, lp, clp, spoofonly)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *clp;
	int spoofonly;
d111 1
d138 2
a139 4
setdisklabel(olp, nlp, openmask, clp)
	struct disklabel *olp, *nlp;
	u_long openmask;
	struct cpu_disklabel *clp;
d159 1
a159 1
	while ((i = ffs((long)openmask)) != 0) {
d180 2
a181 2
 	nlp->d_checksum = 0;
 	nlp->d_checksum = dkcksum(nlp);
d190 2
a191 5
writedisklabel(dev, strat, lp, clp)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *clp;
a244 1

d301 1
a301 3
bsdtocpulabel(lp, clp)
	struct disklabel *lp;
	struct cpu_disklabel *clp;
d372 1
a372 3
cputobsdlabel(lp, clp)
	struct disklabel *lp;
	struct cpu_disklabel *clp;
@


1.39
log
@use six new macros to access & store the 48-bit disklabel fields related
to size.  tested on almost all machines, double checked by miod and krw
next comes the type handling surrounding these values
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.38 2007/06/02 02:35:27 krw Exp $	*/
a269 11
	/* overwriting disk label ? */
	/* XXX should also protect bootstrap in first 8K */
	if (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) <= labelsector &&
#if LABELSECTOR != 0
	    bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) + sz > labelsector &&
#endif
	    (bp->b_flags & B_READ) == 0 && wlabel == 0) {
		bp->b_error = EROFS;
		goto bad;
	}

d285 11
@


1.38
log
@Rename cvtdisklabelv1 -> disklabeltokernlabel. It does more than just
convert version 0 to version 1 disklabels.

Suggested by deraadt@@.

ok deraadt@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.37 2007/05/31 22:06:03 krw Exp $	*/
a36 4
#ifdef DEBUG
int disksubr_debug;
#endif

a39 5
#ifdef DEBUG
void printlp(struct disklabel *, char *);
void printclp(struct cpu_disklabel *, char *);
#endif

d64 2
a65 2
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
d72 2
a73 2
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
d75 3
a77 3
	if (lp->d_partitions[i].p_size == 0)
		lp->d_partitions[i].p_size = lp->d_secperunit;
	lp->d_partitions[i].p_offset = 0;
a126 6
#ifdef DEBUG
	if (disksubr_debug != 0) {
		printlp(lp, "readdisklabel:bsd label");
		printclp(clp, "readdisklabel:cpu label");
	}
#endif
a148 9
#ifdef DEBUG
	if (disksubr_debug != 0) {
		printlp(nlp, "setdisklabel:new disklabel");
		printlp(olp, "setdisklabel:old disklabel");
		printclp(clp, "setdisklabel:cpu disklabel");
	}
#endif


d171 2
a172 1
		if (npp->p_offset != opp->p_offset || npp->p_size < opp->p_size)
a187 5
#ifdef DEBUG
	if (disksubr_debug != 0) {
		printlp(olp, "setdisklabel:old->new disklabel");
	}
#endif
a203 6
#ifdef DEBUG
	if (disksubr_debug != 0) {
		printlp(lp, "writedisklabel: bsd label");
	}
#endif

a229 6
#ifdef DEBUG
	if (disksubr_debug != 0) {
		printclp(clp, "writedisklabel: cpu label");
	}
#endif

d260 1
a260 1
	int labelsector = blockpersec(lp->d_partitions[0].p_offset, lp) +
d272 1
a272 1
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsector &&
d274 1
a274 1
	    bp->b_blkno + blockpersec(p->p_offset, lp) + sz > labelsector &&
d282 2
a283 2
	if (bp->b_blkno + sz > blockpersec(p->p_size, lp)) {
		sz = blockpersec(p->p_size, lp) - bp->b_blkno;
d299 1
a299 1
	bp->b_cylinder = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
d330 1
a330 1
	clp->secperunit = lp->d_secperunit;
a389 5
#ifdef DEBUG
		if (disksubr_debug != 0) {
			printf("Reading old disklabel\n");
		}
#endif
d401 1
a401 3
		lp->d_secperunit = clp->secperunit;
		lp->d_secpercyl = clp->secpercyl;
		lp->d_secperunit = clp->secperunit;
a446 5
#ifdef DEBUG
		if (disksubr_debug != 0) {
			printf("Reading new disklabel\n");
		}
#endif
d458 1
a458 3
		lp->d_secperunit = clp->secperunit;
		lp->d_secpercyl = clp->secpercyl;
		lp->d_secperunit = clp->secperunit;
a503 30
#if defined(DEBUG)
	if (disksubr_debug != 0) {
		printlp(lp, "translated label read from disk\n");
	}
#endif
}

#ifdef DEBUG
void
printlp(lp, str)
	struct disklabel *lp;
	char *str;
{
	int i;

	printf("%s\n", str);
	printf("magic1 %x\n", lp->d_magic);
	printf("magic2 %x\n", lp->d_magic2);
	printf("typename %.*s\n", (int)sizeof(lp->d_typename), lp->d_typename);
	printf("secsize %x nsect %x ntrack %x ncylinders %x\n",
	    lp->d_secsize, lp->d_nsectors, lp->d_ntracks, lp->d_ncylinders);
	printf("Num partitions %x\n", lp->d_npartitions);
	for (i = 0; i < lp->d_npartitions; i++) {
		struct partition *part = &lp->d_partitions[i];
		char *fstyp = fstypenames[part->p_fstype];

		printf("%c: size %10x offset %10x type %7s frag %5x cpg %3x\n",
		    'a' + i, part->p_size, part->p_offset, fstyp,
		    part->p_frag, part->p_cpg);
	}
a504 36

void
printclp(clp, str)
	struct cpu_disklabel *clp;
	char *str;
{
	int max, i;

	printf("%s\n", str);
	printf("magic1 %x\n", clp->magic1);
	printf("magic2 %x\n", clp->magic2);
	printf("typename %s\n", clp->vid_vd);
	printf("secsize %x nsect %x ntrack %x ncylinders %x\n",
	    clp->cfg_psm, clp->cfg_spt, clp->cfg_hds, clp->cfg_trk);
	printf("Num partitions %x\n", clp->partitions);
	max = clp->partitions < 16 ? clp->partitions : 16;
	for (i = 0; i < max; i++) {
		struct partition *part;
		char *fstyp;

		if (i < 4) {
			part = (void *)&clp->vid_4[0];
			part = &part[i];
		} else {
			part = (void *)&clp->cfg_4[0];
			part = &part[i-4];
		}

		fstyp = fstypenames[part->p_fstype];

		printf("%c: size %10x offset %10x type %7s frag %5x cpg %3x\n",
		    'a' + i, part->p_size, part->p_offset, fstyp,
		    part->p_frag, part->p_cpg);
	}
}
#endif
@


1.37
log
@Minor bounds_check_with_label nits.

1) Use local variable 'labelsector' not 'labelsect' to be consistant (hp300,
mac68k, mvme68k, mvme88k, vax).

2) Having checked for sz == 0, the next check needs only be sz < 0, not <= 0.
(mac68k, mvme68k, mvme88k)

3) Use lp->d_partitions + DISKPART(dev), rather than
lp->d_partitions[DISKPART(dev)] (hp300).

Assuming no typos there should be no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.36 2007/05/31 19:57:44 krw Exp $	*/
d147 1
a147 1
	cvtdisklabelv1(lp);
@


1.36
log
@KNF, whitespace and comment rectification to make all
bounds_check_with_label() routines as identical as possible without
changing any code. Code nits and adjustments to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.35 2007/05/29 06:28:15 otto Exp $	*/
d300 1
a300 1
	int labelsect = blockpersec(lp->d_partitions[0].p_offset, lp) +
d312 1
a312 1
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsect &&
d314 1
a314 1
	    bp->b_blkno + blockpersec(p->p_offset, lp) + sz > labelsect &&
d329 1
a329 1
		if (sz <= 0) {
@


1.35
log
@Updated disklabel format to support larger disks and partitions. We
free room in struct partition by packing fragment size and
fragments/block more tighlty and use the resulting space to make
offset and size 48 bits.  For the disk part we use spare fields in
struct disklabel.  Kernel converts in-mem copy of the on-disk
label if needed, disklabel(8) writes new version.
We are careful to only change fields not used by bootloaders.
Conception of basic scheme by deraadt.
ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.34 2007/05/29 05:08:20 krw Exp $	*/
d295 2
a296 5
bounds_check_with_label(bp, lp, osdep, wlabel)
	struct buf *bp;
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int wlabel;
d325 1
a325 1
			/* if exactly at end of disk, return an EOF */
d330 1
d334 1
a334 1
		/* or truncate if part of it fits */
d341 1
a341 1
	return(1);
d345 1
a345 1
	return(-1);
@


1.34
log
@Refactor readdisklabel() to ensure there is a single point of return, in
preparation for translating all disk labels visible to the kernel to
the soon to arrive V1 format.

ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.33 2006/08/17 10:34:14 krw Exp $	*/
d147 1
d203 1
a203 2
			npp->p_fsize = opp->p_fsize;
			npp->p_frag = opp->p_frag;
@


1.33
log
@Check d_secpercyl in all readdisklable() functions, and have all of
them return 'invalid geometry' when d_secpercyl == 0. While there move
the check to a consistant location (after the check of d_secperunit)
and use a consistant idiom (i.e. some readdisklabel()'s have no 'done'
label).

prodded by thib@@ after a bad macppc experience. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.32 2006/03/15 20:20:40 miod Exp $	*/
d66 2
a67 1
	struct buf *bp;
d75 4
a78 2
	if (lp->d_secpercyl == 0)
		return ("invalid geometry");
d90 1
a90 1
		return (NULL);
a105 2
	bp->b_flags = B_INVAL | B_AGE | B_READ;
	brelse(bp);
d107 4
a110 2
	if (error)
		return ("disk label read error");
d113 4
a116 2
	if (iso_disklabelspoof(dev, strat, lp) == 0)
		return (NULL);
d119 4
a122 2
	if (udf_disklabelspoof(dev, strat, lp) == 0)
		return (NULL);
d124 4
a127 2
	if (clp->magic1 != DISKMAGIC || clp->magic2 != DISKMAGIC)
		return ("no disk label");
d131 4
a134 2
	if (dkcksum(lp) != 0)
		return ("disk label corrupted");
d142 6
a147 1
	return (NULL);
@


1.32
log
@Nuke dk_establish(), no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.31 2006/01/22 00:40:01 miod Exp $	*/
d74 2
@


1.31
log
@b_cylin -> b_cylinder; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.30 2006/01/11 07:22:01 miod Exp $	*/
a47 8

void
dk_establish(dk, dev)
	struct disk *dk;
	struct device *dev;
{
}

@


1.30
log
@Switch to __HAVE_DEVICE_REGISTER to find the device we're booted from.
Simpler, better.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.29 2005/12/22 02:51:24 krw Exp $	*/
a36 2
#define b_cylin b_resid

d103 1
a103 1
	bp->b_cylin = 0; /* contained in block 0 */
d236 1
a236 1
	bp->b_cylin = 0; /* contained in block 0 */
d272 1
a272 1
		bp->b_cylin = 0; /* contained in block 0 */
d331 1
a331 1
	bp->b_cylin = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
@


1.29
log
@Set correct partition offset to 0 when initializing RAW_PART.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.28 2005/03/30 07:52:32 deraadt Exp $	*/
a36 5
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <machine/autoconf.h>

a44 1
int get_target(int *, int *);
a50 34
/*
 * Returns the ID of the SCSI disk based on Motorola's CLUN/DLUN stuff
 * bootdev == CLUN << 8 | DLUN.
 * This handles SBC SCSI and MVME32[78].
 */
int
get_target(int *target, int *bus)
{
	extern int bootdev;

	switch (bootdev >> 8) {
	/* built-in controller */
	case 0x00:
	/* MVME327 */
	case 0x02:
	case 0x03:
		*bus = 0;
		*target = (bootdev & 0x70) >> 4;
		return 0;
	/* MVME328 */
	case 0x06:
	case 0x07:
	case 0x16:
	case 0x17:
	case 0x18:
	case 0x19:
		*bus = (bootdev & 0x40) >> 6;
		*target = (bootdev & 0x38) >> 3;
		return 0;
	default:
		return ENODEV;
	}
}

a55 27
	struct scsibus_softc *sbsc;
	int target, bus;

	if (bootpart == -1) /* ignore flag from controller driver? */
		return;

	/*
	 * scsi: sd,cd,st
	 */

	if (strncmp("cd", dev->dv_xname, 2) == 0 ||
	    strncmp("sd", dev->dv_xname, 2) == 0 ||
	    strncmp("st", dev->dv_xname, 2) == 0) {
		sbsc = (struct scsibus_softc *)dev->dv_parent;
		if (get_target(&target, &bus) != 0)
			return;
    
		/* make sure we are on the expected scsibus */
		if (bootbus != bus)
			return;

		if (sbsc->sc_link[target][0] != NULL &&
		    sbsc->sc_link[target][0]->device_softc == (void *)dev) {
			bootdv = dev;
			return;
		}
	}
@


1.28
log
@first approximation:  spoof UDF filesystem disklabels when we see them.
it is likely a slight bug or two will sneak in with this, so everyone
please keep an eye out on your disklabels
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.27 2004/09/30 21:46:38 miod Exp $	*/
d158 1
@


1.27
log
@Closer to reality comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.26 2004/07/20 20:33:21 miod Exp $	*/
d185 4
@


1.26
log
@Let the boot device detection code handle secondary SCSI buses.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.25 2004/03/17 14:16:04 miod Exp $	*/
a60 1
 * MVME328 daughter cards (DLUN >= 0x40) are not handled correctly yet.
@


1.25
log
@Make sure disklabels use at least DEV_BSIZE as their sector size.
This allows the kernel to survive reading the disklabel off a 256-bytes/sector
scsi device...

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.24 2004/01/12 17:30:26 miod Exp $	*/
d50 1
a50 1
int get_target(void);
d64 1
a64 1
get_target()
d74 3
a76 1
		return ((bootdev & 0xff) >> 4);
d84 3
a86 1
		return ((bootdev & 0xff) >> 3);
d88 1
a88 1
		return 0;
d98 1
a98 1
	int target, lun;
d104 1
a104 1
	 * scsi: sd,cd
d107 3
a109 3
	if (strncmp("sd", dev->dv_xname, 2) == 0 ||
	    strncmp("cd", dev->dv_xname, 2) == 0) {

d111 2
a112 2
		target = get_target(); /* Work the Motorola Magic */
		lun = 0;
d114 6
a119 2
		if (sbsc->sc_link[target][lun] != NULL &&
		    sbsc->sc_link[target][lun]->device_softc == (void *)dev) {
@


1.24
log
@Nuke a few unused structures and variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.23 2003/10/05 20:25:08 miod Exp $	*/
d140 1
a140 1
	if (lp->d_secsize == 0)
@


1.23
log
@De-register
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.22 2003/08/21 20:40:33 miod Exp $	*/
d45 1
a45 1
int disksubr_debug = 0;
d48 2
a49 4
static void bsdtocpulabel(struct disklabel *lp,
	struct cpu_disklabel *clp);
static void cputobsdlabel(struct disklabel *lp,
	struct cpu_disklabel *clp);
d53 2
a54 2
static void printlp(struct disklabel *lp, char *str);
static void printclp(struct cpu_disklabel *clp, char *str);
d125 1
a125 1
 * Returns null on success and an error string on failure.
d189 1
a189 1
	if (disksubr_debug > 0) {
d211 1
a211 1
	if(disksubr_debug > 0) {
d259 1
a259 1
	if(disksubr_debug > 0) {
d280 1
a280 1
	if(disksubr_debug > 0) {
d312 1
a312 1
	if (disksubr_debug > 0) {
d398 1
a398 1
static void
d471 1
a471 77
struct cpu_disklabel_old {
	/* VID */
	u_char		vid_id[4];
	u_char		vid_0[16];
	u_int		vid_oss;
	u_short		vid_osl;
	u_char		vid_1[4];
	u_short		vid_osa_u;
	u_short		vid_osa_l;
	u_char		vid_2[2];
	u_short		partitions;
	u_char		vid_vd[16];
	u_long		bbsize;
	u_long		magic1;		/* 4 */
	u_short		type;		/* 2 */
	u_short		subtype;	/* 2 */
	u_char		packname[16];	/* 16 */
	u_long		flags;		/* 4 */
	u_long		drivedata[5];	/* 4 */
	u_long		spare[5];	/* 4 */
	u_short		checksum;	/* 2 */

	u_long		secpercyl;	/* 4 */
	u_long		secperunit;	/* 4 */
	u_long		headswitch;	/* 4 */

	u_char		vid_3[4];
	u_int		vid_cas;
	u_char		vid_cal;
	u_char		vid_4_0[3];
	u_char		vid_4[64];
	u_char		vid_4_1[28];
	u_long		sbsize;
	u_char		vid_mot[8];

	/* CFG */
	u_char		cfg_0[4];
	u_short		cfg_atm;
	u_short		cfg_prm;
	u_short		cfg_atw;
	u_short		cfg_rec;

	u_short		sparespertrack;
	u_short		sparespercyl;
	u_long		acylinders;
	u_short		rpm;
	u_short		cylskew;

	u_char		cfg_spt;
	u_char		cfg_hds;
	u_short		cfg_trk;
	u_char		cfg_ilv;
	u_char		cfg_sof;
	u_short		cfg_psm;
	u_short		cfg_shd;
	u_char		cfg_2[2];
	u_short		cfg_pcom;
	u_char		cfg_3;
	u_char		cfg_ssr;
	u_short		cfg_rwcc;
	u_short		cfg_ecc;
	u_short		cfg_eatm;
	u_short		cfg_eprm;
	u_short		cfg_eatw;
	u_char		cfg_gpb1;
	u_char		cfg_gpb2;
	u_char		cfg_gpb3;
	u_char		cfg_gpb4;
	u_char		cfg_ssc;
	u_char		cfg_runit;
	u_short		cfg_rsvc1;
	u_short		cfg_rsvc2;
	u_long		magic2;
	u_char		cfg_4[192];
};

static void
d480 1
a480 1
		if (disksubr_debug > 0) {
d544 1
a544 1
		if (disksubr_debug > 0) {
d608 1
a608 1
	if (disksubr_debug > 0) {
d615 1
a615 1
static void
d639 1
a639 1
static void
@


1.22
log
@De-obfuscate get_target().
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.21 2003/08/21 12:42:49 miod Exp $	*/
d6 1
a6 1
 *   
d59 1
a59 1
/* 
d111 1
a111 1
    		
d275 1
a275 1
	register struct disklabel *lp;
d339 1
a339 1
	return (error); 
d710 1
a710 1
		
d745 1
a745 1
		
@


1.21
log
@Put a valid VID signature in the disklabel, as does mvme68k.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.20 2003/06/04 16:36:15 deraadt Exp $	*/
d62 2
a63 2
 * This handles SBC SCSI and MVME328.  It will need to be modified for 
 * MVME327.  We do not handle MVME328 daughter cards.  smurph
d70 15
a84 15
	switch (bootdev) {
	case 0x0000: case 0x0600: case 0x0700: case 0x1600: case 0x1700: case 0x1800: case 0x1900:
		return 0;
	case 0x0010: case 0x0608: case 0x0708: case 0x1608: case 0x1708: case 0x1808: case 0x1908:
		return 1;
	case 0x0020: case 0x0610: case 0x0710: case 0x1610: case 0x1710: case 0x1810: case 0x1910:
		return 2;
	case 0x0030: case 0x0618: case 0x0718: case 0x1618: case 0x1718: case 0x1818: case 0x1918:
		return 3;
	case 0x0040: case 0x0620: case 0x0720: case 0x1620: case 0x1720: case 0x1820: case 0x1920:
		return 4;
	case 0x0050: case 0x0628: case 0x0728: case 0x1628: case 0x1728: case 0x1828: case 0x1928:
		return 5;
	case 0x0060: case 0x0630: case 0x0730: case 0x1630: case 0x1730: case 0x1830: case 0x1930:
		return 6;
@


1.20
log
@more term 3 & 4 from various developers, with permission of course
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.19 2003/04/06 15:28:26 krw Exp $	*/
a33 1
#undef DKTYPENAMES
d147 1
a147 1
	for (i = 0; i < RAW_PART ; i++) {
a198 50
#if 0
char *
readdisklabel(dev, strat, lp, clp)
	dev_t dev;
	void (*strat)();
	struct disklabel *lp;
	struct cpu_disklabel *clp;
{
	struct buf *bp;
	char *msg = NULL;

	/* obtain buffer to probe drive with */
	bp = geteblk((int)lp->d_secsize);

	/* request no partition relocation by driver on I/O operations */
	bp->b_dev = dev;
	bp->b_blkno = 0; /* contained in block 0 */
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	bp->b_cylin = 0; /* contained in block 0 */
	(*strat)(bp);

	if (biowait(bp)) {
		msg = "cpu_disklabel read error\n";
	}else {
		bcopy(bp->b_data, clp, sizeof (struct cpu_disklabel));
	}

	bp->b_flags = B_INVAL | B_AGE | B_READ;
	brelse(bp);

	if (msg || clp->magic1 != DISKMAGIC || clp->magic2 != DISKMAGIC) {
#if defined(CD9660)
		if (iso_disklabelspoof(dev, strat, lp) == 0)
			msg = NULL;
#endif
		return (msg); 
	}

	cputobsdlabel(lp, clp);
#ifdef DEBUG
	if(disksubr_debug > 0) {
		printlp(lp, "readdisklabel:bsd label");
		printclp(clp, "readdisklabel:cpu label");
	}
#endif
	return (msg);
}

#endif /* 0 */
d205 1
a205 1
	register struct disklabel *olp, *nlp;
d209 2
a210 2
	register int i;
	register struct partition *opp, *npp;
d298 1
a298 1
	if ((error = biowait(bp)) != 0 ) {
d405 3
d460 11
@


1.19
log
@Some easy strcpy elimination.

a) strcpy -> strncpy for copies into disklabel fields d_packname and
d_typename.

b) '16' -> 'sizeof d_packname' or 'sizeof d_typename' in existing
strncpy's.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.18 2003/04/06 03:02:44 krw Exp $	*/
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *   This product includes software developed by Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
@


1.18
log
@The disklabel fields d_packname and d_typename are not null terminated strings
and should not be created or used as such.

This fixes some instances of both behaviours, and sets the stage for some
strcpy -> strncpy fixup.

ok tdeval@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.17 2002/03/14 01:26:40 millert Exp $	*/
d605 2
a606 2
		strncpy(lp->d_typename, clp->vid_vd, 16);
		strncpy(lp->d_packname, clp->packname, 16);
d669 2
a670 2
		strncpy(lp->d_typename, clp->vid_vd, 16);
		strncpy(lp->d_packname, clp->packname, 16);
@


1.17
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16 2001/08/26 14:31:12 miod Exp $	*/
d743 1
a743 1
	printf("typename %s\n", lp->d_typename);
@


1.16
log
@Add prototypes, fix compilation warnings, random style fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.15 2001/04/14 00:11:45 miod Exp $	*/
d52 5
a56 5
static void bsdtocpulabel __P((struct disklabel *lp,
	struct cpu_disklabel *clp));
static void cputobsdlabel __P((struct disklabel *lp,
	struct cpu_disklabel *clp));
int get_target __P((void));
d59 2
a60 2
static void printlp __P((struct disklabel *lp, char *str));
static void printclp __P((struct cpu_disklabel *clp, char *str));
d137 1
a137 1
	void (*strat) __P((struct buf *));
d328 1
a328 1
	void (*strat) __P((struct buf *));
@


1.16.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16 2001/08/26 14:31:12 miod Exp $	*/
d52 5
a56 5
static void bsdtocpulabel(struct disklabel *lp,
	struct cpu_disklabel *clp);
static void cputobsdlabel(struct disklabel *lp,
	struct cpu_disklabel *clp);
int get_target(void);
d59 2
a60 2
static void printlp(struct disklabel *lp, char *str);
static void printclp(struct cpu_disklabel *clp, char *str);
d137 1
a137 1
	void (*strat)(struct buf *);
d328 1
a328 1
	void (*strat)(struct buf *);
@


1.16.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d605 2
a606 2
		strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
		strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
d669 2
a670 2
		strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
		strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
d743 1
a743 1
	printf("typename %.*s\n", (int)sizeof(lp->d_typename), lp->d_typename);
@


1.15
log
@Correctly initialize disklabel structure in readdisklabel().
Prevents kernel from panic'ing or disklabel(1) from faulting with
an empty (never labaled) disk.

Also, use LABELSECTOR instead of hardwired constant.

Tested by deraadt@@ on mvme68k and myself on mvme88k, deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.14 2001/03/16 00:09:08 miod Exp $	*/
d328 1
a328 1
	void (*strat)();
@


1.14
log
@Cleanup, fix some typos.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 2001/03/09 05:44:41 smurph Exp $	*/
d137 1
a137 1
	void (*strat)();
d143 1
a143 1
	char *msg = NULL;
d151 6
a156 3
	if (lp->d_partitions[RAW_PART].p_size == 0)
		lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
	lp->d_partitions[RAW_PART].p_offset = 0;
d167 1
a167 1
	bp->b_blkno = 0; /* contained in block 0 */
d173 2
a174 3
	if (biowait(bp)) {
		msg = "cpu_disklabel read error\n";
	} else {
a175 2
	}

d179 3
a181 1
	if (msg) {
d183 2
a184 2
		if (iso_disklabelspoof(dev, strat, lp) == 0)
			msg = NULL;
d186 3
a188 2
		return (msg); 
	}
d190 4
d200 1
a200 1
	return (msg);
d346 1
a346 1
	bp->b_blkno = 0; /* contained in block 0 */
@


1.13
log
@kernel will compile with -Werror.  Added intr.h
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.12 2001/03/08 00:03:30 miod Exp $	*/
d56 1
d64 1
a64 1
 * Returns the ID of the SCSI disk based on Motorala's CLUN/DLUN stuff
d66 2
a67 2
 * This handels SBC SCSI and MVME328.  It will need to be modified for 
 * MVME327.  We do not handel MVME328 daughter cards.  smurph
d70 1
a70 1
get_target(void)
d72 20
a91 20
   extern int bootdev;
   switch (bootdev)
   {
   case 0x0000: case 0x0600: case 0x0700: case 0x1600: case 0x1700: case 0x1800: case 0x1900:
      return 0;
   case 0x0010: case 0x0608: case 0x0708: case 0x1608: case 0x1708: case 0x1808: case 0x1908:
      return 1;
   case 0x0020: case 0x0610: case 0x0710: case 0x1610: case 0x1710: case 0x1810: case 0x1910:
      return 2;
   case 0x0030: case 0x0618: case 0x0718: case 0x1618: case 0x1718: case 0x1818: case 0x1918:
      return 3;
   case 0x0040: case 0x0620: case 0x0720: case 0x1620: case 0x1720: case 0x1820: case 0x1920:
      return 4;
   case 0x0050: case 0x0628: case 0x0728: case 0x1628: case 0x1728: case 0x1828: case 0x1928:
      return 5;
   case 0x0060: case 0x0630: case 0x0730: case 0x1630: case 0x1730: case 0x1830: case 0x1930:
      return 6;
   default:
      return 0;
   }
d718 1
a718 1
#if DEBUG
@


1.12
log
@Some warning hunting.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 2000/10/18 21:00:38 mickey Exp $	*/
d34 1
d37 1
a37 1
#define DKTYPENAMES
@


1.11
log
@typo in comment; from gluk@@ptci.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10 1999/09/27 19:13:21 smurph Exp $	*/
d254 1
a254 1
	register i;
d316 1
d343 1
a343 1
	if (error = biowait(bp)) {
a587 1
		struct cpu_disklabel_old *clpo = (void *) clp;
@


1.10
log
@Added to support MVME188 and MVME197
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.9 1999/02/09 06:36:28 smurph Exp $	*/
d125 1
a125 1
 * using the indicated stategy routine.
@


1.10.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.15 2001/04/14 00:11:45 miod Exp $	*/
a33 1
#include <sys/systm.h>
d36 1
a36 1
#undef DKTYPENAMES
a54 1
int get_target __P((void));
d62 1
a62 1
 * Returns the ID of the SCSI disk based on Motorola's CLUN/DLUN stuff
d64 2
a65 2
 * This handles SBC SCSI and MVME328.  It will need to be modified for 
 * MVME327.  We do not handle MVME328 daughter cards.  smurph
d68 1
a68 1
get_target()
d70 20
a89 20
	extern int bootdev;

	switch (bootdev) {
	case 0x0000: case 0x0600: case 0x0700: case 0x1600: case 0x1700: case 0x1800: case 0x1900:
		return 0;
	case 0x0010: case 0x0608: case 0x0708: case 0x1608: case 0x1708: case 0x1808: case 0x1908:
		return 1;
	case 0x0020: case 0x0610: case 0x0710: case 0x1610: case 0x1710: case 0x1810: case 0x1910:
		return 2;
	case 0x0030: case 0x0618: case 0x0718: case 0x1618: case 0x1718: case 0x1818: case 0x1918:
		return 3;
	case 0x0040: case 0x0620: case 0x0720: case 0x1620: case 0x1720: case 0x1820: case 0x1920:
		return 4;
	case 0x0050: case 0x0628: case 0x0728: case 0x1628: case 0x1728: case 0x1828: case 0x1928:
		return 5;
	case 0x0060: case 0x0630: case 0x0730: case 0x1630: case 0x1730: case 0x1830: case 0x1930:
		return 6;
	default:
		return 0;
	}
d125 1
a125 1
 * using the indicated strategy routine.
d135 1
a135 1
	void (*strat) __P((struct buf *));
d141 1
a141 1
	int error, i;
d149 3
a151 6
	for (i = 0; i < RAW_PART ; i++) {
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
	}
	if (lp->d_partitions[i].p_size == 0)
		lp->d_partitions[i].p_size = lp->d_secperunit;
d162 1
a162 1
	bp->b_blkno = LABELSECTOR;
d168 3
a170 2
	error = biowait(bp);
	if (error == 0)
d172 2
d177 1
a177 3
	if (error)
		return ("disk label read error");

d179 2
a180 2
	if (iso_disklabelspoof(dev, strat, lp) == 0)
		return (NULL);
d182 2
a183 3
	if (clp->magic1 != DISKMAGIC || clp->magic2 != DISKMAGIC)
		return ("no disk label");

a184 4

	if (dkcksum(lp) != 0)
		return ("disk label corrupted");

d191 1
a191 1
	return (NULL);
d254 1
a254 1
	register int i;
a315 1
int
d336 1
a336 1
	bp->b_blkno = LABELSECTOR;
d342 1
a342 1
	if ((error = biowait(bp)) != 0 ) {
d587 1
d716 1
a716 1
#if defined(DEBUG)
@


1.10.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10.4.1 2001/04/18 16:11:30 niklas Exp $	*/
d328 1
a328 1
	void (*strat) __P((struct buf *));
@


1.10.4.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 5
a56 5
static void bsdtocpulabel(struct disklabel *lp,
	struct cpu_disklabel *clp);
static void cputobsdlabel(struct disklabel *lp,
	struct cpu_disklabel *clp);
int get_target(void);
d59 2
a60 2
static void printlp(struct disklabel *lp, char *str);
static void printclp(struct cpu_disklabel *clp, char *str);
d137 1
a137 1
	void (*strat)(struct buf *);
d328 1
a328 1
	void (*strat)(struct buf *);
@


1.10.4.4
log
@Sync the SMP branch to -current.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10.4.3 2002/03/28 10:36:02 niklas Exp $	*/
d605 2
a606 2
		strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
		strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
d669 2
a670 2
		strncpy(lp->d_typename, clp->vid_vd, sizeof lp->d_typename);
		strncpy(lp->d_packname, clp->packname, sizeof lp->d_packname);
d743 1
a743 1
	printf("typename %.*s\n", (int)sizeof(lp->d_typename), lp->d_typename);
@


1.10.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10.4.4 2003/05/13 19:41:06 ho Exp $	*/
d15 4
a18 1
 * 3. The name of the author may not be used to endorse or promote products
@


1.10.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d6 1
a6 1
 *
d34 1
d46 1
a46 1
int disksubr_debug;
d49 4
a52 2
void bsdtocpulabel(struct disklabel *, struct cpu_disklabel *);
void cputobsdlabel(struct disklabel *, struct cpu_disklabel *);
d56 2
a57 2
void printlp(struct disklabel *, char *);
void printclp(struct cpu_disklabel *, char *);
d60 1
a60 1
/*
d63 2
a64 2
 * This handles SBC SCSI and MVME32[78].
 * MVME328 daughter cards (DLUN >= 0x40) are not handled correctly yet.
d71 15
a85 15
	switch (bootdev >> 8) {
	/* built-in controller */
	case 0x00:
	/* MVME327 */
	case 0x02:
	case 0x03:
		return ((bootdev & 0xff) >> 4);
	/* MVME328 */
	case 0x06:
	case 0x07:
	case 0x16:
	case 0x17:
	case 0x18:
	case 0x19:
		return ((bootdev & 0xff) >> 3);
d112 1
a112 1
    
d128 1
a128 1
 * Returns NULL on success and an error string on failure.
d148 1
a148 1
	for (i = 0; i < RAW_PART; i++) {
d192 1
a192 1
	if (disksubr_debug != 0) {
d200 50
d256 1
a256 1
	struct disklabel *olp, *nlp;
d260 2
a261 2
	int i;
	struct partition *opp, *npp;
d264 1
a264 1
	if (disksubr_debug != 0) {
d312 1
a312 1
	if (disksubr_debug != 0) {
d326 1
a326 1
	struct disklabel *lp;
d333 1
a333 1
	if (disksubr_debug != 0) {
d349 1
a349 1
	if ((error = biowait(bp)) != 0) {
d365 1
a365 1
	if (disksubr_debug != 0) {
d390 1
a390 1
	return (error);
d451 1
a451 1
void
a455 3
	char *tmot = "MOTOROLA";
	char *id = "M88K";
	char *mot;
d508 1
d510 75
a584 11
	/* Put "MOTOROLA" in the VID.  This makes it a valid boot disk. */
	mot = clp->vid_mot;
	for (i = 0; i < 8; i++) {
		*mot++ = *tmot++;
	}
	/* put volume id in the VID */
	mot = clp->vid_id;
	for (i = 0; i < 4; i++) {
		*mot++ = *id++;
	}
}
d586 1
a586 1
void
d595 1
a595 1
		if (disksubr_debug != 0) {
d659 1
a659 1
		if (disksubr_debug != 0) {
d723 1
a723 1
	if (disksubr_debug != 0) {
d730 1
a730 1
void
d747 1
a747 1

d754 1
a754 1
void
d782 1
a782 1

@


1.10.4.7
log
@Merge with the trunk
@
text
@d140 1
a140 1
	if (lp->d_secsize < DEV_BSIZE)
@


1.9
log
@Added kernel support for user debugging.  Fixed file ID's
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.28 1995/04/19 22:37:27 mycroft Exp $	*/
d61 31
d111 2
a112 2
		target = bootdevlun / 10;
		lun = bootdevlun % 10;
@


1.8
log
@check for lp->d_secpercyl == 0) in bounds_check_with_label()
@
text
@d1 1
d100 64
d212 1
@


1.7
log
@Commit for the first working mvme88k port.
@
text
@d303 6
@


1.6
log
@oops
@
text
@d2 1
d34 1
d37 6
d60 4
a63 2
int
dk_establish()
d65 23
a87 1
	return(-1);
d90 1
d100 1
a100 1
readdisklabel(dev, strat, lp, clp, spoofonly)
a104 1
	int spoofonly;
a108 14
	/* minimal requirements for archetypal disk label */
	if (lp->d_secsize == 0)
		lp->d_secsize = DEV_BSIZE;
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
	lp->d_npartitions = RAW_PART + 1;
	if (lp->d_partitions[RAW_PART].p_size == 0)
		lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
	lp->d_partitions[RAW_PART].p_offset = 0;

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		return (NULL);

d485 5
a489 1
		printf("Reading old disklabel\n");
d549 5
a553 1
		printf("Reading new disklabel\n");
@


1.5
log
@Add a "spoofonly" argument to readdisklabel() which will be used to
implement an ioctl to get a spoofed label even for disks that have
a label on them.
@
text
@d83 3
a85 7
	for (i = 0; i < RAW_PART; i++) {
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
	}
	if (lp->d_partitions[0].p_size == 0)
		lp->d_partitions[0].p_size = 0x1fffffff;
	lp->d_partitions[0].p_offset = 0;
@


1.4
log
@Change the bounds_check_with_label API to also take a cpu_disklabel
reference for making transferral of meta-information possible from
readdisklabel to bounds_check_with_label.  The first (and maybe only)
thing that will use this is the multi-disklabel-format code on the
alpha where the labelsector is passed via cpu_disklabel so the label
write-protection can work correctly no matter what label was found.

Also use a new macro DKBAD to get at the dkbad field of the cpu_disklabel
implementations that contain it.  This too is for multi-disklabel
architectures where the "bad" field can be inside a union.  Use this
macro as a means for a driver to check if an architecture supports
dkbad constructs.

Remove proto of bounds_check_with_label from all MD disklabel.h as it
is in sys/disklabel.h.

I have not been able to test the changes everywhere, if I break anything
I apologize, and promise to fix it as soon as I become aware of it.
@
text
@d67 1
a67 1
readdisklabel(dev, strat, lp, clp)
d72 1
d76 18
@


1.3
log
@mvme88k will not make release, but just as well make the source as close as
possible.
@
text
@d258 1
a258 1
bounds_check_with_label(bp, lp, wlabel)
d261 1
@


1.2
log
@add cd9660 spoofing and repair partition offset/block offset stuff
@
text
@d283 1
a283 1
		if (bp->b_blkno == maxsz) {
@


1.1
log
@Initial revision
@
text
@d97 4
d263 1
d265 3
a267 3
	int labelsect = lp->d_partitions[0].p_offset;
	int maxsz = p->p_size;
	int sz = (bp->b_bcount + DEV_BSIZE - 1) >> DEV_BSHIFT;
d271 1
a271 1
        if (bp->b_blkno + p->p_offset <= LABELSECTOR + labelsect &&
d273 1
a273 1
            bp->b_blkno + p->p_offset + sz > LABELSECTOR + labelsect &&
d275 4
a278 4
            (bp->b_flags & B_READ) == 0 && wlabel == 0) {
                bp->b_error = EROFS;
                goto bad;
        }
d281 8
a288 9
        if (bp->b_blkno < 0 || bp->b_blkno + sz > maxsz) {
                /* if exactly at end of disk, return an EOF */
                if (bp->b_blkno == maxsz) {
                        bp->b_resid = bp->b_bcount;
                        return(0);
                }
                /* or truncate if part of it fits */
                sz = maxsz - bp->b_blkno;
                if (sz <= 0) {
d290 1
a290 1
                        goto bad;
d292 3
a294 2
                bp->b_bcount = sz << DEV_BSHIFT;
        }
d297 2
a298 1
        bp->b_cylin = (bp->b_blkno + p->p_offset) / lp->d_secpercyl;
@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@@
