head	1.25;
access;
symbols
	OPENBSD_4_8:1.24.0.12
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.6
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.10
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.8
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.4
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.22.0.14
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.12
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.10
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.8
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.6
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.16
	UBC:1.14.0.2
	UBC_BASE:1.14
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	mvme88kport:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2010.12.31.21.38.08;	author miod;	state dead;
branches;
next	1.24;

1.24
date	2007.12.09.13.14.53;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2007.09.22.16.21.32;	author krw;	state Exp;
branches;
next	1.22;

1.22
date	2004.08.02.08.35.00;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2004.05.08.21.37.30;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.07.15.30.04;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.05.20.27.47;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.27.52;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.04.01.12.08;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.28.15.17.09;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.26.40;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.08.02.24.06;	author art;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.01.12.13.46;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.26.14.31.12;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.25.13.25.32;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.27.04.29.20;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.05.20.56.47;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.31.22.39.42;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.13.05.18.59;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	99.11.22.19.22.00;	author matthieu;	state Exp;
branches
	1.5.2.1
	1.5.6.1;
next	1.4;

1.4
date	99.09.03.18.01.31;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.02.09.06.36.30;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	98.08.31.17.42.37;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.19.32.32;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.32.32;	author rahnds;	state Exp;
branches;
next	;

1.5.2.1
date	2001.04.18.16.11.38;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.07.04.10.20.19;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2002.03.06.02.04.45;	author niklas;	state Exp;
branches;
next	1.5.2.6;

1.5.2.6
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.5.2.7;

1.5.2.7
date	2003.03.27.23.32.18;	author niklas;	state Exp;
branches;
next	1.5.2.8;

1.5.2.8
date	2003.06.07.11.13.17;	author ho;	state Exp;
branches;
next	1.5.2.9;

1.5.2.9
date	2004.02.19.10.49.08;	author niklas;	state Exp;
branches;
next	1.5.2.10;

1.5.2.10
date	2004.06.05.23.09.51;	author niklas;	state Exp;
branches;
next	;

1.5.6.1
date	2001.01.31.22.48.15;	author jason;	state Exp;
branches;
next	;

1.14.2.1
date	2002.06.11.03.37.11;	author art;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2003.05.19.21.45.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Massive overhauling of the m88k pmap, though I can't pretend it's a new pmap
since a large part of the structures and logic remains.

Since m88k has separate supervisor/user spaces, we can map physical memory 1:1
in supervisor space, and have the kernel virtual address space start from the
end of physical memory.

This allows us to switch to __HAVE_PMAP_DIRECT. And to get rid of the double
mapped sdt, since now their virtual and physical addresses will always match.

The upper bound of the kernel virtual memory space is now platform dependent,
until the code which relies upon some hardware devices being mapped 1:1 in
supervisor mode is updated to no longer require this (this is mainly a PITA on
luna88k, where onboard devices start at 0x40000000, leaving only 1GB of KVA at
the moment - still much better than the previous 512MB).

Tested on mvme88k only (187, 188, 197LE, 197DP). Other platforms ought to
work, aviion will be checked shortly and fixed if necessary. No known
OpenBSD/luna88k system in working condition at the moment.
@
text
@/*	$OpenBSD: mem.c,v 1.24 2007/12/09 13:14:53 miod Exp $ */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>

#include <machine/conf.h>

#include <uvm/uvm_extern.h>

caddr_t zpage;
extern vaddr_t last_addr;

/*ARGSUSED*/
int
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	switch (minor(dev)) {
		case 0:
		case 1:
		case 2:
		case 12:
			return (0);
		default:
			return (ENXIO);
	}
}

/*ARGSUSED*/
int
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{

	return (0);
}

/*ARGSUSED*/
int
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	vaddr_t o, v;
	int c;
	struct iovec *iov;
	int error = 0;
	static int physlock = 0;
	extern caddr_t vmmap;

	if (minor(dev) == 0) {
		/* lock against other uses of shared vmmap */
		while (physlock > 0) {
			physlock++;
			error = tsleep((caddr_t)&physlock, PZERO | PCATCH,
			    "mmrw", 0);
			if (error)
				return (error);
		}
		physlock = 1;
	}
	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

/* minor device 0 is physical memory */
		case 0:
			/* move one page at a time */
			v = uio->uio_offset;
			if (v > last_addr) {
				error = EFAULT;
				goto unlock;
			}
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
			    trunc_page(v),
			    uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE,
			    (uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE) | PMAP_WIRED);
			pmap_update(pmap_kernel());
			o = uio->uio_offset & PGOFSET;
			c = min(uio->uio_resid, (int)(NBPG - o));
			error = uiomove((caddr_t)vmmap + o, c, uio);
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
			pmap_update(pmap_kernel());
			continue;

/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = min(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			if (v < NBPG) {
#ifdef DEBUG
				/*
				 * For now, return zeros on read of page 0
				 * and EFAULT for writes.
				 */
				if (uio->uio_rw == UIO_READ) {
					if (zpage == NULL)
						zpage = malloc(PAGE_SIZE,
						    M_TEMP, M_WAITOK | M_ZERO);
					c = min(c, NBPG - (int)v);
					v = (vaddr_t)zpage;
				} else
#endif
					return (EFAULT);
			}
			error = uiomove((caddr_t)v, c, uio);
			continue;

/* minor device 2 is EOF/RATHOLE */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

/* should add vme bus so that we can do user level probes */

/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}
			if (zpage == NULL)
				zpage = malloc(PAGE_SIZE, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomove(zpage, c, uio);
			continue;

		default:
			return (ENXIO);
		}
		if (error)
			break;
		iov->iov_base += c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	if (minor(dev) == 0) {
unlock:
		if (physlock > 1)
			wakeup((caddr_t)&physlock);
		physlock = 0;
	}
	return (error);
}

paddr_t
mmmmap(dev, off, prot)
        dev_t dev;
        off_t off;
	int prot;
{
	return (-1);
}

/*ARGSUSED*/
int
mmioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	return (EOPNOTSUPP);
}
@


1.24
log
@Nuke evil common, spotted by martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.23 2007/09/22 16:21:32 krw Exp $ */
@


1.23
log
@M_ZERO -> bzero.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.22 2004/08/02 08:35:00 miod Exp $ */
d53 1
a53 1
caddr_t zeropage;
d157 2
a158 2
					if (zeropage == NULL)
						zeropage = malloc(PAGE_SIZE,
d161 1
a161 1
					v = (vaddr_t)zeropage;
d183 2
a184 2
			if (zeropage == NULL)
				zeropage = malloc(PAGE_SIZE, M_TEMP,
d187 1
a187 1
			error = uiomove(zeropage, c, uio);
@


1.22
log
@More include files cleaning:
- move MAX_CPUS constant to <machine/cpu.h>
- do not include <machine/board.h> unless needed. In fact, remove this file
  entirely on mvme88k, and include <machine/mvme*.h> on a
  compiling-for-this-board basis
- keep MAX_CMMUS constant private to the m8820x code
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.21 2004/05/08 21:37:30 miod Exp $ */
d157 3
a159 6
					if (zeropage == NULL) {
						zeropage = (caddr_t)
						    malloc(PAGE_SIZE, M_TEMP,
						    M_WAITOK);
						bzero(zeropage, PAGE_SIZE);
					}
d183 3
a185 5
			if (zeropage == NULL) {
				zeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
			}
@


1.21
log
@Do not duplicate fragments from <machine/conf.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.20 2004/05/07 15:30:04 miod Exp $ */
a48 1
#include <machine/board.h>
@


1.20
log
@Do not rely upon a fictitious MAXPHYSMEM value, but rather the actual
physical memory size, to decide the end of /dev/*mem, as well as default
cacheability for mappings.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.19 2003/10/05 20:27:47 miod Exp $ */
a43 1
#include <sys/conf.h>
d50 1
a55 4

#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
@


1.19
log
@Kill vm_offset_t and vm_size_t, in favor of the [pv]addr_t and [pv]size_t
typedefs.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2003/06/02 23:27:52 millert Exp $ */
d55 1
d131 1
a131 1
			if (v > MAXPHYSMEM) {
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2003/01/04 01:12:08 miod Exp $ */
d97 3
a99 3
	register vm_offset_t o, v;
	register int c;
	register struct iovec *iov;
d134 1
a134 1
			pmap_enter(pmap_kernel(), (vm_offset_t)vmmap,
d142 2
a143 2
			pmap_remove(pmap_kernel(), (vm_offset_t)vmmap,
			    (vm_offset_t)vmmap + NBPG);
d168 1
a168 1
					v = (vm_offset_t)zeropage;
@


1.17
log
@Correctly invoke pmap_enter() [fix last argument]
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2002/04/28 15:17:09 miod Exp $ */
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@Use the prototypes defined via cdev_decl() macros, instead of rolling our
own; thus fix a lot of foo_open(), foo_close() and foo_ioctl() prototypes
in the process.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2002/03/14 01:26:40 millert Exp $ */
d139 3
a141 2
			    trunc_page(v), uio->uio_rw == UIO_READ ?
			    VM_PROT_READ : VM_PROT_WRITE, PMAP_WIRED);
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/12/08 02:24:06 art Exp $ */
d60 3
a62 5
int mmopen(dev_t, int, int);
int mmclose(dev_t, int, int);
int mmrw(dev_t, struct uio *, int);
paddr_t mmmmap(dev_t, off_t, int);
int mmioctl(dev_t, u_long, caddr_t, int, struct proc *);
d66 1
a66 1
mmopen(dev, flag, mode)
d69 1
d85 1
a85 1
mmclose(dev, flag, mode)
d88 1
@


1.14
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2001/11/06 19:53:15 miod Exp $ */
d60 5
a64 5
int mmopen __P((dev_t, int, int));
int mmclose __P((dev_t, int, int));
int mmrw __P((dev_t, struct uio *, int));
paddr_t mmmmap __P((dev_t, off_t, int));
int mmioctl __P((dev_t, u_long, caddr_t, int, struct proc *));
@


1.14.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2001/12/08 02:24:06 art Exp $ */
d60 5
a64 3
#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
d68 1
a68 1
mmopen(dev, flag, mode, p)
a70 1
	struct proc *p;
d86 1
a86 1
mmclose(dev, flag, mode, p)
a88 1
	struct proc *p;
@


1.14.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d139 2
a140 3
			    trunc_page(v),
			    uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE,
			    (uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE) | PMAP_WIRED);
@


1.13
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2001/11/01 12:13:46 art Exp $ */
d141 1
d147 1
@


1.12
log
@Change d_mmap in struct cdevsw from:
        int     (*d_mmap)       __P((dev_t, int, int));
to:
	paddr_t	(*d_mmap)	__P((dev_t, off_t, int));

This allows us to mmap devices past 4GB offsets.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2001/08/26 14:31:12 miod Exp $ */
a55 1
#include <vm/vm.h>
@


1.11
log
@Add prototypes, fix compilation warnings, random style fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2001/07/25 13:25:32 art Exp $ */
d64 1
a64 1
int mmmmap __P((dev_t, int, int));
d220 1
a220 1
int
d223 2
a224 1
        int off, prot;
@


1.10
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 2001/06/27 04:29:20 art Exp $ */
d60 6
@


1.9
log
@rip old vm
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 2001/05/05 20:56:47 art Exp $ */
d135 1
a135 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE, 0);
@


1.8
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 2001/01/31 22:39:42 jason Exp $ */
a56 1
#if defined(UVM)
a57 1
#endif
a146 1
#if defined(UVM)
a149 5
#else
			if (!kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#endif
@


1.7
log
@based on art's sparc patch:
mmap should return -1 on failure, not EOPNOTSUPP.
As it was now, an mmap of /dev/mem always returned page 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 2001/01/13 05:18:59 smurph Exp $ */
d167 1
a167 1
						    malloc(CLBYTES, M_TEMP,
d169 1
a169 1
						bzero(zeropage, CLBYTES);
d196 2
a197 2
				    malloc(CLBYTES, M_TEMP, M_WAITOK);
				bzero(zeropage, CLBYTES);
d199 1
a199 1
			c = min(iov->iov_len, CLBYTES);
@


1.6
log
@Booting kernel with MACHINE_NEW_NONCONTIG.  UVM code added but not working.
New stand config.  Lots of header fixes.  Can now cross-compile i386->m88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1999/11/22 19:22:00 matthieu Exp $ */
d227 1
a227 2

	return (EOPNOTSUPP);
@


1.5
log
@add empty mmioctl() implementation for new /dev/mem interface for all
architectures.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 1999/09/03 18:01:31 art Exp $ */
d57 3
d149 28
@


1.5.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 2001/01/31 22:39:42 jason Exp $ */
a56 3
#if defined(UVM)
#include <uvm/uvm_extern.h>
#endif
a145 28
#if defined(UVM)
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#else
			if (!kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
#endif
			if (v < NBPG) {
#ifdef DEBUG
				/*
				 * For now, return zeros on read of page 0
				 * and EFAULT for writes.
				 */
				if (uio->uio_rw == UIO_READ) {
					if (zeropage == NULL) {
						zeropage = (caddr_t)
						    malloc(CLBYTES, M_TEMP,
						    M_WAITOK);
						bzero(zeropage, CLBYTES);
					}
					c = min(c, NBPG - (int)v);
					v = (vm_offset_t)zeropage;
				} else
#endif
					return (EFAULT);
			}
d196 2
a197 1
	return (-1);
@


1.5.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5.2.1 2001/04/18 16:11:38 niklas Exp $ */
d57 1
d59 1
d149 1
d153 5
d167 1
a167 1
						    malloc(PAGE_SIZE, M_TEMP,
d169 1
a169 1
						bzero(zeropage, PAGE_SIZE);
d196 2
a197 2
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
d199 1
a199 1
			c = min(iov->iov_len, PAGE_SIZE);
@


1.5.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5.2.2 2001/07/04 10:20:19 niklas Exp $ */
a60 6
int mmopen __P((dev_t, int, int));
int mmclose __P((dev_t, int, int));
int mmrw __P((dev_t, struct uio *, int));
int mmmmap __P((dev_t, int, int));
int mmioctl __P((dev_t, u_long, caddr_t, int, struct proc *));

d135 1
a135 1
			    VM_PROT_READ : VM_PROT_WRITE, PMAP_WIRED);
@


1.5.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d56 1
d64 1
a64 1
paddr_t mmmmap __P((dev_t, off_t, int));
d220 1
a220 1
paddr_t
d223 1
a223 2
        off_t off;
	int prot;
@


1.5.2.5
log
@Merge in trunk
@
text
@a140 1
			pmap_update(pmap_kernel());
a145 1
			pmap_update(pmap_kernel());
@


1.5.2.6
log
@Merge in -current from about a week ago
@
text
@d60 5
a64 5
int mmopen(dev_t, int, int);
int mmclose(dev_t, int, int);
int mmrw(dev_t, struct uio *, int);
paddr_t mmmmap(dev_t, off_t, int);
int mmioctl(dev_t, u_long, caddr_t, int, struct proc *);
@


1.5.2.7
log
@Sync the SMP branch with 3.3
@
text
@d60 5
a64 3
#define	mmread	mmrw
#define	mmwrite	mmrw
cdev_decl(mm);
d68 1
a68 1
mmopen(dev, flag, mode, p)
a70 1
	struct proc *p;
d86 1
a86 1
mmclose(dev, flag, mode, p)
a88 1
	struct proc *p;
d139 2
a140 3
			    trunc_page(v),
			    uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE,
			    (uio->uio_rw == UIO_READ ? VM_PROT_READ : VM_PROT_WRITE) | PMAP_WIRED);
@


1.5.2.8
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5.2.7 2003/03/27 23:32:18 niklas Exp $ */
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5.2.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d97 3
a99 3
	vaddr_t o, v;
	int c;
	struct iovec *iov;
d134 1
a134 1
			pmap_enter(pmap_kernel(), (vaddr_t)vmmap,
d142 2
a143 2
			pmap_remove(pmap_kernel(), (vaddr_t)vmmap,
			    (vaddr_t)vmmap + NBPG);
d168 1
a168 1
					v = (vaddr_t)zeropage;
@


1.5.2.10
log
@Merge with the trunk
@
text
@d44 1
a50 1
#include <machine/conf.h>
d55 4
a58 1
extern vaddr_t last_addr;
d130 1
a130 1
			if (v > last_addr) {
@


1.5.6.1
log
@Pull in patches from current:
Fix (art,jason):
mmap should return -1 on failure, not EOPNOTSUPP.
As it was now, an mmap of /dev/mem always returned page 45.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 1999/11/22 19:22:00 matthieu Exp $ */
d196 2
a197 1
	return (-1);
@


1.4
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 1999/02/09 06:36:30 smurph Exp $ */
d197 12
@


1.3
log
@Added kernel support for user debugging.  Fixed file ID's
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 1995/05/29 23:57:16 pk Exp $ */
d134 1
a134 1
			    VM_PROT_READ : VM_PROT_WRITE, TRUE);
@


1.2
log
@Return ENXIO on open of /dev/mem minor devs that don't exist
@
text
@d1 1
a1 1
/*	$NetBSD: mem.c,v 1.11 1995/05/29 23:57:16 pk Exp $ */
@


1.1
log
@Initial revision
@
text
@d67 9
a75 1
	return (0);
@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@@
