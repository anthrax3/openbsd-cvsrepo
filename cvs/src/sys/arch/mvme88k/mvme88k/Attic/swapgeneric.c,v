head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.6
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2003.05.23.22.27.43;	author tedu;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.29.18.40.32;	author miod;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	98.12.15.05.11.02;	author smurph;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	97.03.03.20.21.50;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.03.03.19.08.15;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.12.32.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.03.19.32.30;	author rahnds;	state Exp;
branches;
next	;

1.4.6.1
date	2001.10.31.03.01.20;	author nate;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.03.28.10.36.03;	author niklas;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2003.06.07.11.13.17;	author ho;	state dead;
branches;
next	;

1.5.4.1
date	2002.06.11.03.37.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove old swapgeneric.c's
@
text
@/*	$OpenBSD: swapgeneric.c,v 1.6 2002/03/14 01:26:40 millert Exp $ */

/*-
 * Copyright (c) 1994
 *      The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @@(#)swapgeneric.c       8.2 (Berkeley) 3/21/94
 */

/*
 * fake swapgeneric.c -- should do this differently.
 */

#include <sys/param.h>
#include <sys/conf.h>

int (*mountroot)(void) = NULL;	/* tells autoconf.c that we are "generic" */

dev_t	rootdev = NODEV;
dev_t	dumpdev = NODEV;

struct	swdevt swdevt[] = {
	{ NODEV, 0, 0 },	/* to be filled in */
	{ NODEV, 0, 0 }
};
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5 2001/09/29 18:40:32 miod Exp $ */
@


1.5
log
@The "swap generic" configuration needs only two entries in swdevt[].
So shrink it when necessary, and remove unwanted stuff as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.4 1998/12/15 05:11:02 smurph Exp $ */
d45 1
a45 1
int (*mountroot) __P((void)) = NULL;	/* tells autoconf.c that we are "generic" */
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5 2001/09/29 18:40:32 miod Exp $ */
d45 1
a45 1
int (*mountroot)(void) = NULL;	/* tells autoconf.c that we are "generic" */
@


1.4
log
@Commit for the first working mvme88k port.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.5 1996/11/06 01:45:05 deraadt Exp $ */
a43 1
#include <machine/disklabel.h>
d51 1
a51 8
	{ makedev(4, 0*MAXPARTITIONS+1), 0, 0 },	/* sd0b */
	{ makedev(4, 1*MAXPARTITIONS+1), 0, 0 },	/* sd1b */
	{ makedev(4, 2*MAXPARTITIONS+1), 0, 0 },	/* sd2b */
	{ makedev(4, 3*MAXPARTITIONS+1), 0, 0 },	/* sd3b */
	{ makedev(4, 4*MAXPARTITIONS+1), 0, 0 },	/* sd4b */
	{ makedev(4, 5*MAXPARTITIONS+1), 0, 0 },	/* sd5b */
	{ makedev(4, 6*MAXPARTITIONS+1), 0, 0 },	/* sd6b */
	{ makedev(4, 7*MAXPARTITIONS+1), 0, 0 },	/* sd7b */
@


1.4.6.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.4 1998/12/15 05:11:02 smurph Exp $ */
d44 1
d52 8
a59 1
	{ NODEV, 0, 0 },	/* to be filled in */
@


1.4.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d45 1
a45 1
int (*mountroot)(void) = NULL;	/* tells autoconf.c that we are "generic" */
@


1.4.6.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: swapgeneric.c,v 1.4.6.2 2002/03/28 10:36:03 niklas Exp $ */
@


1.3
log
@Cleanup after import. This also seems to bring up the current version.
@
text
@d1 5
a5 3
/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.
d17 2
a18 2
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
d35 5
a39 2
 *	@@(#)swapgeneric.c	7.5 (Berkeley) 5/7/91
 *	$Id: swapgeneric.c,v 1.1.1.1 1997/03/03 19:32:30 rahnds Exp $
a42 1
#include <sys/systm.h>
d44 1
a44 7
#include <sys/buf.h>
#include <sys/reboot.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/fcntl.h>		/* XXXX and all that uses it */
#include <sys/proc.h>		/* XXXX and all that uses it */
#include <sys/disk.h>
d46 1
a46 2
#include "sd.h"
#include "cd.h"
a47 9
/*
 * Only boot on ufs. (XXX?)
 */
int ffs_mountroot();
int (*mountroot)() = ffs_mountroot;

/*
 * Generic configuration;  all in one
 */
d52 9
a60 31
	{ NODEV,	1,	0 },
	{ NODEV,	0,	0 },
};

#if NSD > 0
extern	struct cfdriver sdcd;
#endif
#if NCD > 0
extern	struct cfdriver cdcd;
#endif

struct genericconf {
	struct cfdriver *gc_driver;
	dev_t gc_root;
};

/*
 * the system will assign rootdev to the first partition 'a' 
 * found with FS_BSDFFS fstype. so these should be ordered
 * in prefernece of boot. however it does walk units backwards
 * to remain compatible with the old amiga method of picking
 * the last root found.
 */
struct genericconf genericconf[] = {
#if NSD > 0
	{&sdcd,	makedev(4, 0)},
#endif
#if NCD > 0
	{&cdcd,	makedev(6, 0)},
#endif
	{ 0 },
a61 142

struct genericconf *
getgenconf(bp)
	char *bp;
{
	char *cp;
	struct genericconf *gc;

	for (;;) {
		printf("root device> ");
		gets(bp);
		for (gc = genericconf; gc->gc_driver; gc++)
			if (gc->gc_driver->cd_name[0] == bp[0] &&
			    gc->gc_driver->cd_name[1] == bp[1])
				break;
		if (gc->gc_driver == NULL) {
			printf("use one of:");
			for (gc = genericconf; gc->gc_driver; gc++)
				printf(" %s%%d", gc->gc_driver->cd_name);
			printf("\n");
			continue;
		}
		cp = bp + 2;
		if (*cp >= '0' && *cp <= '9')
			break;
		printf("bad/missing unit number\n");
	}
	return(gc);
}

setconf()
{
	struct dkdevice *dkp;
	struct partition *pp;
	struct genericconf *gc;
	struct bdevsw *bdp;
	int unit, swaponroot;
	char name[128];
	char *cp;
	
	swaponroot = 0;

	if (rootdev != NODEV)
		goto justdoswap;

	unit = 0;
	if (boothowto & RB_ASKNAME) {
		gc = getgenconf(name);
		cp = name + 2;
		while (*cp >= '0' && *cp <= '9')
			unit = 10 * unit + *cp++ - '0';
		if (*cp == '*')
			swaponroot = 1;
		unit &= 0x7;
		goto found;
	}
	for (gc = genericconf; gc->gc_driver; gc++) {
		for (unit = gc->gc_driver->cd_ndevs - 1; unit >= 0; unit--) { 
			if (gc->gc_driver->cd_devs[unit] == NULL)
				continue;
			/*
			 * this is a hack these drivers should use
			 * dk_dev and not another instance directly above.
			 */
			dkp = (struct dkdevice *)
			   ((struct device *)gc->gc_driver->cd_devs[unit] + 1);
			if (dkp->dk_driver == NULL ||
			    dkp->dk_driver->d_strategy == NULL)
				continue;
			for (bdp = bdevsw; bdp < (bdevsw + nblkdev); bdp++)
				if (bdp->d_strategy ==
				    dkp->dk_driver->d_strategy)
					break;
			if (bdp->d_open(MAKEDISKDEV(major(gc->gc_root),
			    unit, 0), FREAD | FNONBLOCK, 0, curproc))
				continue;
			bdp->d_close(MAKEDISKDEV(major(gc->gc_root), unit, 
			    0), FREAD | FNONBLOCK, 0, curproc);
			pp = &dkp->dk_label.d_partitions[0];
			if (pp->p_size == 0 || pp->p_fstype != FS_BSDFFS)
				continue;
			goto found;
		}
	}
	printf("no suitable root\n");
	asm("or r9,r0,0x0063");
	asm("tb0 0,r0,0x1f0");
	/*NOTREACHED*/
found:

	gc->gc_root = MAKEDISKDEV(major(gc->gc_root), unit, 0);
	rootdev = gc->gc_root;

justdoswap:
	swdevt[0].sw_dev = MAKEDISKDEV(major(rootdev), 
	    DISKUNIT(rootdev), 1);
	/*
	swdevt[0].sw_dev = dumpdev = MAKEDISKDEV(major(rootdev), 
	    DISKUNIT(rootdev), 1);
    */
	/* swap size and dumplo set during autoconfigure */
	if (swaponroot)
		rootdev = swdevt[0].sw_dev;
}

gets(cp)
	char *cp;
{
	register char *lp;
	register c;

	lp = cp;
	for (;;) {
		cnputc(c = cngetc());
		switch (c) {
		case '\n':
		case '\r':
			*lp = 0;
			return;
		case '\b':
		case '\177':
			if (lp > cp) {
				lp--;
				cnputc(' ');
				cnputc('\b');
			}
			continue;
		case '#':
			lp--;
			if (lp < cp)
				lp = cp;
			continue;
		case '@@':
		case 'u'&037:
			lp = cp;
			cnputc('\n');
			continue;
		default:
			*lp++ = c;
		}
	}
}
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@d34 1
a34 1
 *	$Id: swapgeneric.c,v 1.1 1995/10/18 12:32:33 deraadt Exp $
@


1.1
log
@moved from m88k directory
@
text
@d34 1
a34 1
 *	$Id: swapgeneric.c,v 1.1.1.1 1995/10/18 10:54:27 deraadt Exp $
@


1.1.1.1
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@d34 1
a34 1
 *	$Id: swapgeneric.c,v 1.2 1995/06/22 04:19:28 build Exp $
@
