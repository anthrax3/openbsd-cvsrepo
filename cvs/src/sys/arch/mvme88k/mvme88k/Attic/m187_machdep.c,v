head	1.25;
access;
symbols
	OPENBSD_5_5:1.24.0.6
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.22.0.8
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.6
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.25
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.24;

1.24
date	2013.05.17.22.46.28;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2013.02.17.18.07.36;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2010.12.31.21.38.08;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2009.08.30.12.11.35;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.15.20.39.53;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.16.22.55.03;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.13.23.26.51;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.01.00.51.33;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.17.05.32.05;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.14.16.59.43;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.12.20.02.14;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.08.14.36.10;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.06.22.17.20;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.27.20.21.19;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.27.20.19.31;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.19.22.09.40;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.13.21.16.17;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.30.16.42.37;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.27.14.07.38;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.24.22.50.30;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.09.21.50.01;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.09.12.01.19;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.08.16.39.31;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.01.19.00.52;	author miod;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: m187_machdep.c,v 1.24 2013/05/17 22:46:28 miod Exp $	*/
/*
 * Copyright (c) 1998, 1999, 2000, 2001 Steve Murphree, Jr.
 * Copyright (c) 1996 Nivas Madhur
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Nivas Madhur.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>

#include <uvm/uvm_extern.h>

#include <machine/asm_macro.h>
#include <machine/board.h>
#include <machine/cmmu.h>
#include <machine/cpu.h>
#include <machine/pmap_table.h>
#include <machine/reg.h>
#include <machine/trap.h>

#include <machine/m88100.h>
#include <machine/m8820x.h>
#include <machine/mvme187.h>

#include <mvme88k/dev/memcreg.h>
#include <mvme88k/dev/pcctworeg.h>
#include <mvme88k/mvme88k/clockvar.h>

const struct pmap_table m187_pmap_table[] = {
	{ BUG187_START,		BUG187_SIZE,	UVM_PROT_RW, CACHE_INH },
#if 0	/* mapped by the hardcoded BATC entries */
	{ OBIO187_START,	OBIO187_SIZE,	UVM_PROT_RW, CACHE_INH },
#endif
	{ 0, 0xffffffff, 0, 0 },
};

const struct board board_mvme187 = {
	.bootstrap = m187_bootstrap,
	.memsize = m187_memsize,
	.cpuspeed = m187_cpuspeed,
	.reboot = m1x7_reboot,
	.is_syscon = m1x7_is_syscon,
	.intr = m187_intr,
	.nmi = NULL,
	.nmi_wrapup = NULL,
	.getipl = m187_getipl,
	.setipl = m187_setipl,
	.raiseipl = m187_raiseipl,
	.intsrc_available = m1x7_intsrc_available,
	.intsrc_enable = m1x7_intsrc_enable,
	.intsrc_disable = NULL,
	.intsrc_establish = NULL,
	.intsrc_disestablish = NULL,
	.init_clocks = m1x7_init_clocks,
	.delay = m1x7_delay,
	.init_vme = m1x7_init_vme,
#ifdef MULTIPROCESSOR
	.send_ipi = NULL,
	.smp_setup = m88100_smp_setup,
#endif
	.ptable = m187_pmap_table,
	.cmmu = &cmmu8820x
};

void
m187_bootstrap()
{
}

/*
 * Figure out how much memory is available, by querying the memory controllers.
 */
vaddr_t
m187_memsize()
{
	struct memcreg *memc;
	vaddr_t x;

	memc = (struct memcreg *)MEM_CTLR;
	x = MEMC_MEMCONF_RTOB(memc->memc_memconf);

	memc = (struct memcreg *)(MEM_CTLR + 0x100);
	if (!badaddr((vaddr_t)&memc->memc_memconf, 1))
		x += MEMC_MEMCONF_RTOB(memc->memc_memconf);

	return x;
}

/*
 * Return the processor speed in MHz.
 */
int
m187_cpuspeed(const struct mvmeprom_brdid *brdid)
{
	/*
	 * Find out the processor speed, from the PCC2 prescaler
	 * adjust register.
	 */
	return 256 - *(volatile u_int8_t *)(PCC2_BASE + PCCTWO_PSCALEADJ);
}

/*
 * Device interrupt handler for MVME187
 */
void
m187_intr(struct trapframe *eframe)
{
	int level;
	struct intrhand *intr;
	intrhand_t *list;
	int ret;
	vaddr_t ivec;
	u_int8_t vec;

	level = *(u_int8_t *)M187_ILEVEL & 0x07;

	/* generate IACK and get the vector */
	ivec = M187_IACK + (level << 2) + 0x03;
	vec = *(volatile u_int8_t *)ivec;

#ifdef MULTIPROCESSOR
	if (eframe->tf_mask < IPL_SCHED)
		__mp_lock(&kernel_lock);
#endif

	uvmexp.intrs++;

	/* block interrupts at level or lower */
	m187_setipl(level);
	flush_pipeline();
	set_psr(get_psr() & ~PSR_IND);

	list = &intr_handlers[vec];
	if (SLIST_EMPTY(list)) {
		/* increment intr counter */
		printf("Spurious interrupt (level %x and vec %x)\n",
		       level, vec);
	} else {
#ifdef DEBUG
		intr = SLIST_FIRST(list);
		if (intr->ih_ipl != level) {
			panic("Handler ipl %x not the same as level %x. "
			    "vec = 0x%x",
			    intr->ih_ipl, level, vec);
		}
#endif

		/*
		 * Walk through all interrupt handlers in the chain for the
		 * given vector, calling each handler in turn, till some handler
		 * returns a value != 0.
		 */

		ret = 0;
		SLIST_FOREACH(intr, list, ih_link) {
			if (intr->ih_wantframe != 0)
				ret = (*intr->ih_fn)((void *)eframe);
			else
				ret = (*intr->ih_fn)(intr->ih_arg);
			if (ret != 0) {
				intr->ih_count.ec_count++;
				break;
			}
		}

		if (ret == 0) {
			printf("Unclaimed interrupt (level %x and vec %x)\n",
			    level, vec);
		}
	}

	/*
	 * process any remaining data access exceptions before
	 * returning to assembler
	 */
	if (eframe->tf_dmt0 & DMT_VALID)
		m88100_trap(T_DATAFLT, eframe);

	/*
	 * Disable interrupts before returning to assembler, the spl will
	 * be restored later.
	 */
	set_psr(get_psr() | PSR_IND);

#ifdef MULTIPROCESSOR
	if (eframe->tf_mask < IPL_SCHED)
		__mp_unlock(&kernel_lock);
#endif
}

u_int
m187_getipl(void)
{
	return *(u_int8_t *)M187_IMASK & 0x07;
}

u_int
m187_setipl(u_int level)
{
	u_int curspl, psr;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	curspl = *(u_int8_t *)M187_IMASK & 0x07;
	*(u_int8_t *)M187_IMASK = level;
	/*
	 * We do not flush the pipeline here, because interrupts are disabled,
	 * and set_psr() will synchronize the pipeline.
	 */
	set_psr(psr);
	return curspl;
}

u_int
m187_raiseipl(u_int level)
{
	u_int curspl, psr;

	psr = get_psr();
	set_psr(psr | PSR_IND);
	curspl = *(u_int8_t *)M187_IMASK & 0x07;
	if (curspl < level)
		*(u_int8_t *)M187_IMASK = level;
	/*
	 * We do not flush the pipeline here, because interrupts are disabled,
	 * and set_psr() will synchronize the pipeline.
	 */
	set_psr(psr);
	return curspl;
}
@


1.24
log
@Replace the bunch of md_* function pointers with a `struct board' containing
function pointers for all the board-specific code.

Add a bunch of `struct board' methods to cover most, if not all, of the
`per-board' logic. This allows most of the md drivers to be cleaned up and
no longer need to embed board-specific knowledge.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.23 2013/02/17 18:07:36 miod Exp $	*/
@


1.23
log
@Constify struct cmmu.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.22 2010/12/31 21:38:08 miod Exp $	*/
d55 1
d58 1
d61 1
d63 1
d70 40
a109 6
void	m187_bootstrap(void);
void	m187_ext_int(struct trapframe *);
u_int	m187_getipl(void);
vaddr_t	m187_memsize(void);
u_int	m187_raiseipl(u_int);
u_int	m187_setipl(u_int);
d131 13
a145 1

d147 1
a147 1
m187_ext_int(struct trapframe *eframe)
a270 24
}

void
m187_bootstrap()
{
	extern int cpuspeed;
	extern const struct cmmu_p cmmu8820x;

	/*
	 * Find out the processor speed, from the PCC2 prescaler
	 * adjust register.
	 */
	cpuspeed = 256 - *(volatile u_int8_t *)(PCC2_BASE + PCCTWO_PSCALEADJ);

	cmmu = &cmmu8820x;
	md_interrupt_func_ptr = m187_ext_int;
	md_getipl = m187_getipl;
	md_setipl = m187_setipl;
	md_raiseipl = m187_raiseipl;
	md_init_clocks = m1x7_init_clocks;
	md_delay = m1x7_delay;
#ifdef MULTIPROCESSOR
	md_smp_setup = m88100_smp_setup;
#endif
@


1.22
log
@Massive overhauling of the m88k pmap, though I can't pretend it's a new pmap
since a large part of the structures and logic remains.

Since m88k has separate supervisor/user spaces, we can map physical memory 1:1
in supervisor space, and have the kernel virtual address space start from the
end of physical memory.

This allows us to switch to __HAVE_PMAP_DIRECT. And to get rid of the double
mapped sdt, since now their virtual and physical addresses will always match.

The upper bound of the kernel virtual memory space is now platform dependent,
until the code which relies upon some hardware devices being mapped 1:1 in
supervisor mode is updated to no longer require this (this is mainly a PITA on
luna88k, where onboard devices start at 0x40000000, leaving only 1GB of KVA at
the moment - still much better than the previous 512MB).

Tested on mvme88k only (187, 188, 197LE, 197DP). Other platforms ought to
work, aviion will be checked shortly and fixed if necessary. No known
OpenBSD/luna88k system in working condition at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.21 2009/08/30 12:11:35 miod Exp $	*/
d227 1
a227 1
	extern struct cmmu_p cmmu8820x;
@


1.21
log
@Use UVM_FLAG_FIXED for fixed allocations make with uvm_map() during early
bootstrap.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.20 2009/03/15 20:39:53 miod Exp $	*/
a71 3
void	m187_startup(void);

vaddr_t bugromva;
a89 15
}

void
m187_startup()
{
	/*
	 * Grab the BUGROM space that we hardwired in pmap_bootstrap
	 */
	bugromva = BUG187_START;
	uvm_map(kernel_map, (vaddr_t *)&bugromva, BUG187_SIZE,
	    NULL, UVM_UNKNOWN_OFFSET, 0,
	      UVM_MAPFLAG(UVM_PROT_NONE, UVM_PROT_NONE, UVM_INH_NONE,
	        UVM_ADV_NORMAL, UVM_FLAG_FIXED));
	if (bugromva != BUG187_START)
		panic("bugromva %lx: BUGROM not free", bugromva);
@


1.20
log
@Generic softinterrupt support for m88k based platforms, adapted from arm
with different locking mechanism. 88110 soft ipi are replaced with an
ipi callback which is checked upon return from exception (it can not be kept
as a softintr, as the generic softinterrupt code doesn't have per-cpu
pending softintr queues).
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.19 2009/02/16 22:55:03 miod Exp $	*/
d105 1
a105 1
	        UVM_ADV_NORMAL, 0));
@


1.19
log
@Since NMI are now handled separately, remove the ``interrupt type'' argument
from interrupt() and related function pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.18 2009/02/13 23:26:51 miod Exp $	*/
d260 3
@


1.18
log
@Make delay() a per-board function pointer.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.17 2009/02/01 00:51:33 miod Exp $	*/
d67 1
a67 1
void	m187_ext_int(u_int, struct trapframe *);
d115 1
a115 1
m187_ext_int(u_int v, struct trapframe *eframe)
@


1.17
log
@Get the cpu speed from the pcctwo configuration on MVME187.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.16 2007/11/17 05:32:05 miod Exp $	*/
d259 1
@


1.16
log
@Rework {get,set,raise}ipl() to minimize psr modification, especially on
boards such as mvme1[89]7 where spl changes can be atomic.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.15 2007/05/14 16:59:43 miod Exp $	*/
d63 1
d244 1
d246 6
@


1.15
log
@Hold kernel_lock when processing interrupts at a level under IPL_SCHED, as
done on 188, for MULTIPROCESSOR kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.14 2007/05/12 20:02:14 miod Exp $	*/
d208 1
a208 1
	unsigned curspl;
d210 2
d214 5
d225 1
a225 1
	unsigned curspl;
d227 2
d232 5
@


1.14
log
@Change the 88100 interrupt handlers to process DAEs with interrupts enabled,
as done for DAEs not occuring during interrupts.

Remove the check for unprocessed DAE on return from trap() in eh_common.S,
since this can't happen. As a result, the return-from-trap code becomes
identical on 88100 and 88110 systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.13 2006/05/08 14:36:10 miod Exp $	*/
d129 5
d192 5
@


1.13
log
@Replace gazillions of badvaddr() or badwordaddr() calls with badaddr() calls.
With a few prototype declarations shuffling, this finally allows
<machine/locore.h> to die.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.12 2006/05/06 22:17:20 miod Exp $	*/
d116 1
a116 1
	int mask, level;
a122 1
	mask = *(u_int8_t *)M187_IMASK & 0x07;
a178 1
	set_psr(get_psr() | PSR_IND);
d183 2
a184 2
	 * Restore the mask level to what it was when the interrupt
	 * was taken.
d186 1
a186 1
	m187_setipl(mask);
@


1.12
log
@Sync VM games on startup with earlier pmap_table[] cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.11 2006/04/27 20:21:19 miod Exp $	*/
a56 1
#include <machine/locore.h>
@


1.11
log
@<machine/mvme1x7.h> is not really used anymore, remove it.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.10 2006/04/27 20:19:31 miod Exp $	*/
a73 1
vaddr_t obiova;
a107 11

	/*
	 * Grab the OBIO space that we hardwired in pmap_bootstrap
	 */
	obiova = OBIO187_START;
	uvm_map(kernel_map, (vaddr_t *)&obiova, OBIO187_SIZE,
	    NULL, UVM_UNKNOWN_OFFSET, 0,
	      UVM_MAPFLAG(UVM_PROT_NONE, UVM_PROT_NONE, UVM_INH_NONE,
	        UVM_ADV_NORMAL, 0));
	if (obiova != OBIO187_START)
		panic("obiova %lx: OBIO not free", obiova);
@


1.10
log
@Adjust sizes for the mandatory 1:1 mappings created in pmap_bootstrap().
Saves up to 12KB of no longer necessary page tables.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.9 2006/04/19 22:09:40 miod Exp $	*/
d64 1
@


1.9
log
@Get rid of the clock device attachment - since the clock is not something
we can live without, move it into the board-dependent code. This even makes
the code slightly smaller.

clock.c is moved from dev/ to mvme88k/ and only keeps common variables and
delay().
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.8 2006/04/13 21:16:17 miod Exp $	*/
a74 1
vaddr_t sramva;
a98 11
	 * Grab the SRAM space that we hardwired in pmap_bootstrap
	 */
	sramva = SRAM_START;
	uvm_map(kernel_map, (vaddr_t *)&sramva, SRAM_SIZE,
	    NULL, UVM_UNKNOWN_OFFSET, 0,
	      UVM_MAPFLAG(UVM_PROT_NONE, UVM_PROT_NONE, UVM_INH_NONE,
	        UVM_ADV_NORMAL, 0));
	if (sramva != SRAM_START)
		panic("sramva %lx: SRAM not free", sramva);

	/*
d112 2
a113 2
	obiova = OBIO_START;
	uvm_map(kernel_map, (vaddr_t *)&obiova, OBIO_SIZE,
d117 1
a117 1
	if (obiova != OBIO_START)
@


1.8
log
@Drop the ivec[] interrupt acknowledge address array, compute the address
itself in the interrupt dispatcher instead of accessing the array: this
computation is of similar complexity, so why bother adding a memory
indirection. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.7 2005/04/30 16:42:37 miod Exp $	*/
d248 5
a252 4
	md_interrupt_func_ptr = &m187_ext_int;
	md_getipl = &m187_getipl;
	md_setipl = &m187_setipl;
	md_raiseipl = &m187_raiseipl;
@


1.7
log
@Remove m88k_psr_type and function with utterly long names to control the psr,
and use get_psr() / set_psr() or simple macros that expand into them everywhere.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.6 2005/04/27 14:07:38 miod Exp $	*/
a70 1
void	m187_setupiackvectors(void);
a132 15
void
m187_setupiackvectors()
{
	u_int8_t *vaddr = (u_int8_t *)M187_IACK;

	ivec[0] = vaddr + 0x03;	/* We dont use level 0 */
	ivec[1] = vaddr + 0x07;
	ivec[2] = vaddr + 0x0b;
	ivec[3] = vaddr + 0x0f;
	ivec[4] = vaddr + 0x13;
	ivec[5] = vaddr + 0x17;
	ivec[6] = vaddr + 0x1b;
	ivec[7] = vaddr + 0x1f;
}

d144 1
d149 1
d151 2
a152 1
	vec = *ivec[level];
@


1.6
log
@Always include <uvm/uvm_extern.h> before <machine/cmmu.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.5 2004/12/24 22:50:30 miod Exp $	*/
d172 1
a172 1
	enable_interrupt();
d217 1
a217 1
	disable_interrupt();
@


1.5
log
@{e,}intr{cnt,names} bye-bye.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.4 2004/11/09 21:50:01 miod Exp $	*/
d52 2
a61 2

#include <uvm/uvm_extern.h>
@


1.4
log
@Kill guarded_access() - the way we map OBIO, there is no need for special
treatement of interrupt vectors variables, a simple read will do.

While there, speed up the interrupt handlers a bit:
- remove old debug code or only compile it if option DEBUG.
- use short circuits for setipl() if we know interrupts are disabled at
  this point: there is no need playing with the psr in these cases.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.3 2004/11/09 12:01:19 miod Exp $	*/
a176 1
		intrcnt[M88K_SPUR_IRQ]++;
a201 1
				intrcnt[level]++;
@


1.3
log
@Split {get,set,raise}ipl() into per-board implementations.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.2 2004/11/08 16:39:31 miod Exp $	*/
d160 1
a160 1
	u_char vec;
a161 1
	/* get level and mask */
d164 2
a165 22

#ifdef DIAGNOSTIC
	/*
	 * It is really bizarre for the mask and level to the be the same.
	 * pcc2 for 187 blocks all interrupts at and below the mask value,
	 * so we should not be getting an interrupt at the level that is
	 * already blocked. I can't explain this case XXX nivas
	 */

	if ((mask == level) && level) {
		panic("mask == level, %d", level);
	}

	/*
	 * Interrupting level cannot be 0--0 doesn't produce an interrupt.
	 * Weird! XXX nivas
	 */

	if (level == 0) {
		panic("Bogons... level %x and mask %x", level, mask);
	}
#endif
d169 2
a170 5
	/* generate IACK and get the vector */
	flush_pipeline();
	if (guarded_access(ivec[level], 1, &vec) == EFAULT) {
		panic("Unable to get vector for this interrupt (level %x)", level);
	}
a171 6
	flush_pipeline();
	flush_pipeline();

	/* block interrupts at level or lower */
	setipl(level);

d181 1
a181 1
#ifdef DIAGNOSTIC
d227 1
a227 1
	setipl(mask);
@


1.2
log
@Kill struct md_p, which was really only necessary for mvme88k; on
luna88k it disappears completely, while mvme88k keeps 3 global variables,
one of them scheduled to disappear very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: m187_machdep.c,v 1.1 2004/10/01 19:00:52 miod Exp $	*/
d67 1
d69 2
d163 1
a163 1
	mask = *md_intr_mask & 0x07;
d260 27
d294 3
a296 1
	md_intr_mask = (u_int8_t *)M187_IMASK;
@


1.1
log
@More mvme88k code cleaning:
- merge locore_c_routines.c into machdep.c
- split machdep.c into really machdep.c content, and board-specific routines
  (memory sizing, early initialization, etc).

No functionnal change.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d160 2
a161 2
	mask = *md.intr_mask & 0x07;
	level = *md.intr_ipl & 0x07;
d263 2
a264 4
	md.interrupt_func = &m187_ext_int;
	md.intr_mask = (u_char *)M187_IMASK;
	md.intr_ipl = (u_char *)M187_ILEVEL;
	md.intr_src = NULL;
@

