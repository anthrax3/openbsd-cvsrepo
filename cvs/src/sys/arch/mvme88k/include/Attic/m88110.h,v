head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.12
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.8
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.6
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.4
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.12
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.8
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.10
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.6
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.4
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.17.0.14
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.12
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.10
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.25;

1.25
date	2011.10.25.18.38.06;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.23;

1.23
date	2010.12.31.20.54.21;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2007.12.02.21.32.44;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.22.23.33.41;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2007.11.22.23.31.55;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.22.05.53.57;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.17.05.36.23;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.06.22.04.55.35;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.13.23.24.10;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.05.20.35.22;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.26.22.27.25;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.20.20.33.44;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.39;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.22.09.49.39;	author smurph;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.16.23.49.46;	author miod;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.12.14.04.30.11;	author smurph;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.13.08.55.51;	author smurph;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.15;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.26.14.31.07;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.12.12.03.02;	author heko;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.09.05.44.40;	author smurph;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.07.23.37.16;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.14.20.25.24;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.20.46.18;	author smurph;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.04.18.16.11.22;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2002.03.06.02.04.44;	author niklas;	state Exp;
branches;
next	1.1.4.5;

1.1.4.5
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.1.4.6;

1.1.4.6
date	2004.02.19.10.49.07;	author niklas;	state Exp;
branches;
next	;

1.10.2.1
date	2002.01.31.22.55.18;	author niklas;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2002.06.11.03.37.10;	author art;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: m88110.h,v 1.25 2011/10/25 18:38:06 miod Exp $ */

#ifndef	_MACHINE_M88110_H_
#define	_MACHINE_M88110_H_

/*
 *	88110 CMMU definitions
 */

#define	CMMU_ICMD_INV_ITIC	0x001	/* Invalidate Inst Cache & TIC */
#define	CMMU_ICMD_INV_TIC	0x002	/* Invalidate TIC */
#define	CMMU_ICMD_INV_LINE	0x005	/* Invalidate Inst Cache Line */
#define	CMMU_ICMD_PRB_SUPR	0x008	/* MMU Probe Supervisor */
#define	CMMU_ICMD_PRB_USER	0x009	/* MMU Probe User */
#define	CMMU_ICMD_INV_SATC	0x00a	/* Invalidate All Supervisor ATCs */
#define	CMMU_ICMD_INV_UATC	0x00b	/* Invalidate All User ATCs */

#define	CMMU_ICTL_DID		0x8000	/* Double instruction disable */
#define	CMMU_ICTL_PREN		0x4000	/* Branch Prediction Enable */
#define	CMMU_ICTL_FRZ0		0x0100	/* Inst Cache Freeze Bank 0 */
#define	CMMU_ICTL_FRZ1		0x0080	/* Inst Cache Freeze Bank 1 */
#define	CMMU_ICTL_HTEN		0x0040	/* Hardware Table Search Enable */
#define	CMMU_ICTL_MEN		0x0020	/* Inst MMU Enable */
#define	CMMU_ICTL_BEN		0x0004	/* TIC Cache Enable */
#define	CMMU_ICTL_CEN		0x0001	/* Inst Cache Enable */

#define	CMMU_ISR_TBE		0x200000 /* Table Search Bus Error */
#define	CMMU_ISR_SI		0x100000 /* Segment Fault*/
#define	CMMU_ISR_PI		0x080000 /* Page Fault */
#define	CMMU_ISR_SP		0x040000 /* Supervisor Protection Violation */
#define	CMMU_ISR_PH		0x000800 /* PATC Hit */
#define	CMMU_ISR_BH		0x000400 /* BATC Hit */
#define	CMMU_ISR_SU		0x000200 /* Supervisor Bit */
#define	CMMU_ISR_BE		0x000001 /* Bus Error */

#define	CMMU_DCMD_WB_PG		0x000	/* Flush Data Cache Page (sync) */
#define	CMMU_DCMD_INV_ALL	0x001	/* Invalidate Data Cache All */
#define	CMMU_DCMD_WB_ALL	0x002	/* Flush Data Cache All (sync) */
#define	CMMU_DCMD_WBINV_ALL	0x003	/* Flush Data Cache All (sync + inv) */
#define	CMMU_DCMD_WBINV_PG	0x004	/* Flush Data Cache Page (sync + inv) */
#define	CMMU_DCMD_INV_LINE	0x005	/* Invalidate Data Cache Line */
#define	CMMU_DCMD_WB_LINE	0x006	/* Flush Data Cache Line (sync) */
#define	CMMU_DCMD_WBINV_LINE	0x007	/* Flush Data Cache Line (sync + inv) */
#define	CMMU_DCMD_PRB_SUPR	0x008	/* MMU Probe Supervisor */
#define	CMMU_DCMD_PRB_USER	0x009	/* MMU Probe User */
#define	CMMU_DCMD_INV_SATC	0x00a	/* Invalidate All Supervisor ATCs */
#define	CMMU_DCMD_INV_UATC	0x00b	/* Invalidate All User ATCs */

#define	CMMU_DCTL_RSVD7		0x40000	/* Reserved */
#define	CMMU_DCTL_RSVD6		0x20000	/* Reserved */
#define	CMMU_DCTL_RSVD5		0x10000	/* Reserved */
#define	CMMU_DCTL_RSVD4		0x8000	/* Reserved */
#define	CMMU_DCTL_RSVD3		0x4000	/* Reserved */
#define	CMMU_DCTL_XMEM		0x2000	/* store -> load sequence */
#define	CMMU_DCTL_DEN		0x1000	/* Decoupled Cache Access Enable */
#define	CMMU_DCTL_FWT		0x0800	/* Force Write Through */
#define	CMMU_DCTL_BPEN1		0x0400	/* Break Point Enable 1 */
#define	CMMU_DCTL_BPEN0		0x0200	/* Break Point Enable 0 */
#define	CMMU_DCTL_FRZ0		0x0100	/* Data Cache Freeze Bank 0 */
#define	CMMU_DCTL_FRZ1		0x0080	/* Data Cache Freeze Bank 1 */
#define	CMMU_DCTL_HTEN		0x0040	/* Hardware Table Search Enable */
#define	CMMU_DCTL_MEN		0x0020	/* Data MMU Enable */
#define	CMMU_DCTL_RSVD2		0x0010	/* Reserved */
#define	CMMU_DCTL_ADS		0x0008	/* Allocate Disable */
#define	CMMU_DCTL_RSVD1		0x0004	/* Reserved */
#define	CMMU_DCTL_SEN		0x0002	/* Data Cache Snoop Enable */
#define	CMMU_DCTL_CEN		0x0001	/* Data Cache Enable */

#define	CMMU_DSR_TBE		0x200000 /* Table Search Bus Error */
#define	CMMU_DSR_SI		0x100000 /* Segment Fault */
#define	CMMU_DSR_PI		0x080000 /* Page Fault */
#define	CMMU_DSR_SP		0x040000 /* Supervisor Protection Violation */
#define	CMMU_DSR_WE		0x020000 /* Write Protection Violation */
#define	CMMU_DSR_BPE		0x010000 /* Break Point Exception */
#define	CMMU_DSR_PH		0x000800 /* PATC Hit */
#define	CMMU_DSR_BH		0x000400 /* BATC Hit */
#define	CMMU_DSR_SU		0x000200 /* Supervisor Bit */
#define	CMMU_DSR_RW		0x000100 /* Read Bit */
#define	CMMU_DSR_CP		0x000004 /* Copyback Error */
#define	CMMU_DSR_WA		0x000002 /* Write-Allocate Bus Error */
#define	CMMU_DSR_BE		0x000001 /* Bus Error */

/* definitions for use of the BATC */
#define	BATC_512K		(0x00 << BATC_BLKSHIFT)
#define	BATC_1M			(0x01 << BATC_BLKSHIFT)
#define	BATC_2M			(0x03 << BATC_BLKSHIFT)
#define	BATC_4M			(0x07 << BATC_BLKSHIFT)
#define	BATC_8M			(0x0f << BATC_BLKSHIFT)
#define	BATC_16M		(0x1f << BATC_BLKSHIFT)
#define	BATC_32M		(0x3f << BATC_BLKSHIFT)
#define	BATC_64M		(0x7f << BATC_BLKSHIFT)

/*
 * PATC fields
 */

#define	PATC_VA_MASK		0xfffff000
#define	PATC_SO			0x00000001

/*
 * Cache line information
 */
#define	MC88110_CACHE_SHIFT	5
#define	MC88110_CACHE_LINE	(1 << MC88110_CACHE_SHIFT)

#ifndef	_LOCORE

void	 set_icmd(uint32_t);
void	 set_ictl(uint32_t);
void	 set_isar(uint32_t);
void	 set_isap(uint32_t);
void	 set_iuap(uint32_t);
void	 set_iir(uint32_t);
void	 set_ibp(uint32_t);
void	 set_ippu(uint32_t);
void	 set_ippl(uint32_t);
void	 set_isr(uint32_t);
void	 set_dcmd(uint32_t);
void	 set_dctl(uint32_t);
void	 set_dsar(uint32_t);
void	 set_dsap(uint32_t);
void	 set_duap(uint32_t);
void	 set_dir(uint32_t);
void	 set_dbp(uint32_t);
void	 set_dppu(uint32_t);
void	 set_dppl(uint32_t);
void	 set_dsr(uint32_t);

uint32_t get_dctl(void);
uint32_t get_dsr(void);
uint32_t get_ictl(void);
uint32_t get_isr(void);

/*
 * The following inlines expect their address to be line-aligned for line
 * operations, and page aligned for page operations.
 */

static __inline__ void
mc88110_wb_data_line(paddr_t x)
{
	set_dsar(x);
	set_dcmd(CMMU_DCMD_WB_LINE);
}

static __inline__ void
mc88110_wb_data_page(paddr_t x)
{
	set_dsar(x);
	set_dcmd(CMMU_DCMD_WB_PG);
}

static __inline__ void
mc88110_wb_data(void)
{
	set_dcmd(CMMU_DCMD_WB_ALL);
}

static __inline__ void
mc88110_inval_data_line(paddr_t x)
{
	set_dsar(x);
	set_dcmd(CMMU_DCMD_INV_LINE);
}

static __inline__ void
mc88110_inval_data(void)
{
	set_dcmd(CMMU_DCMD_INV_ALL);
}

static __inline__ void
mc88110_wbinv_data_line(paddr_t x)
{
	set_dsar(x);
	set_dcmd(CMMU_DCMD_WBINV_LINE);
}

static __inline__ void
mc88110_wbinv_data_page(paddr_t x)
{
	set_dsar(x);
	set_dcmd(CMMU_DCMD_WBINV_PG);
}

static __inline__ void
mc88110_wbinv_data(void)
{
	set_dcmd(CMMU_DCMD_WBINV_ALL);
}

static __inline__ void
mc88110_inval_inst_line(paddr_t x)
{
	set_isar(x);
	set_icmd(CMMU_ICMD_INV_LINE);
}

static __inline__ void
mc88110_inval_inst(void)
{
	set_icmd(CMMU_ICMD_INV_ITIC);
}

/* skip one instruction */
static __inline__ void
m88110_skip_insn(struct trapframe *frame)
{
	if (frame->tf_exip & 1)
		frame->tf_exip = frame->tf_enip;
	else
		frame->tf_exip += 4;
}

#endif	/* _LOCORE */
#endif	/* _MACHINE_M88110_H_ */
@


1.25
log
@Replace the naive 88110 tlb update code, which would always invalidate the
whole tlb (32 of 'em), with smarter `tlb probe and update with new pte if tlb
match found' code. This makes the 88110-specific pmap_update() unnecessary, as
updates are no longer aggregated to avoid the number of flushes. This also
makes tlb handling similar between 88100 and 88110, from the pmap's point of
view, so there is no need to use different routines.

No impact on 88100, no user-noticeable performance change on 88100 GENERIC,
slight improvement on 88110 GENERIC.MP.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.24 2011/03/23 16:54:36 pirofti Exp $ */
@


1.24
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.23 2010/12/31 20:54:21 miod Exp $ */
d94 7
d108 25
a132 23
void	set_icmd(u_int value);
void	set_ictl(u_int value);
void	set_isar(u_int value);
void	set_isap(u_int value);
void	set_iuap(u_int value);
void	set_iir(u_int value);
void	set_ibp(u_int value);
void	set_ippu(u_int value);
void	set_ippl(u_int value);
void	set_isr(u_int value);
void	set_dcmd(u_int value);
void	set_dctl(u_int value);
void	set_dsar(u_int value);
void	set_dsap(u_int value);
void	set_duap(u_int value);
void	set_dir(u_int value);
void	set_dbp(u_int value);
void	set_dppu(u_int value);
void	set_dppl(u_int value);
void	set_dsr(u_int value);

u_int	get_ictl(void);
u_int	get_dctl(void);
@


1.23
log
@Standardize cache handling functions and defines to use wb/wbinv/inv instead
of flush/sync/inval. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.22 2007/12/02 21:32:44 miod Exp $ */
d3 2
a4 2
#ifndef	__MACHINE_M88110_H__
#define	__MACHINE_M88110_H__
d207 1
a207 1
#endif	/* __MACHINE_M88110_H__ */
@


1.22
log
@Remove 88110 control registers accessors which are never used anywhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.21 2007/11/22 23:33:41 miod Exp $ */
d10 72
a81 72
#define CMMU_ICMD_INV_ITIC       0x001    /* Invalidate Inst Cache & TIC */
#define CMMU_ICMD_INV_TIC        0x002    /* Invalidate TIC */
#define CMMU_ICMD_INV_LINE       0x005    /* Invalidate Inst Cache Line */
#define CMMU_ICMD_PRB_SUPR       0x008    /* MMU Probe Supervisor */
#define CMMU_ICMD_PRB_USER       0x009    /* MMU Probe User */
#define CMMU_ICMD_INV_SATC       0x00a    /* Invalidate All Supervisor ATCs */
#define CMMU_ICMD_INV_UATC       0x00b    /* Invalidate All User ATCs */

#define CMMU_ICTL_DID            0x8000   /* Double instruction disable */
#define CMMU_ICTL_PREN           0x4000   /* Branch Prediction Enable */
#define CMMU_ICTL_FRZ0           0x0100   /* Inst Cache Freeze Bank 0 */
#define CMMU_ICTL_FRZ1           0x0080   /* Inst Cache Freeze Bank 1 */
#define CMMU_ICTL_HTEN           0x0040   /* Hardware Table Search Enable */
#define CMMU_ICTL_MEN            0x0020   /* Inst MMU Enable */
#define CMMU_ICTL_BEN            0x0004   /* TIC Cache Enable */
#define CMMU_ICTL_CEN            0x0001   /* Inst Cache Enable */

#define CMMU_ISR_TBE             0x200000 /* Table Search Bus Error */
#define CMMU_ISR_SI              0x100000 /* Segment Fault*/
#define CMMU_ISR_PI              0x080000 /* Page Fault */
#define CMMU_ISR_SP              0x040000 /* Supervisor Protection Violation */
#define CMMU_ISR_PH              0x000800 /* PATC Hit */
#define CMMU_ISR_BH              0x000400 /* BATC Hit */
#define CMMU_ISR_SU              0x000200 /* Supervisor Bit */
#define CMMU_ISR_BE              0x000001 /* Bus Error */

#define CMMU_DCMD_FLUSH_PG       0x000    /* Flush Data Cache Page (sync) */
#define CMMU_DCMD_INV_ALL        0x001    /* Invalidate Data Cache All */
#define CMMU_DCMD_FLUSH_ALL      0x002    /* Flush Data Cache All (sync) */
#define CMMU_DCMD_FLUSH_ALL_INV  0x003    /* Flush Data Cache All (sync & inval) */
#define CMMU_DCMD_FLUSH_PG_INV   0x004    /* Flush Data Cache Page (sync & inval) */
#define CMMU_DCMD_INV_LINE       0x005    /* Invalidate Data Cache Line */
#define CMMU_DCMD_FLUSH_LINE     0x006    /* Flush Data Cache Line (sync)*/
#define CMMU_DCMD_FLUSH_LINE_INV 0x007    /* Flush Data Cache Line (sync & inval)*/
#define CMMU_DCMD_PRB_SUPR       0x008    /* MMU Probe Supervisor */
#define CMMU_DCMD_PRB_USER       0x009    /* MMU Probe User */
#define CMMU_DCMD_INV_SATC       0x00A    /* Invalidate All Supervisor ATCs */
#define CMMU_DCMD_INV_UATC       0x00B    /* Invalidate All User ATCs */

#define CMMU_DCTL_RSVD7          0x40000   /* Reserved */
#define CMMU_DCTL_RSVD6          0x20000   /* Reserved */
#define CMMU_DCTL_RSVD5          0x10000   /* Reserved */
#define CMMU_DCTL_RSVD4          0x8000   /* Reserved */
#define CMMU_DCTL_RSVD3          0x4000   /* Reserved */
#define CMMU_DCTL_XMEM           0x2000   /* store -> load sequence */
#define CMMU_DCTL_DEN            0x1000   /* Decoupled Cache Access Enable */
#define CMMU_DCTL_FWT            0x0800   /* Force Write Through */
#define CMMU_DCTL_BPEN1          0x0400   /* Break Point Enable 1 */
#define CMMU_DCTL_BPEN0          0x0200   /* Break Point Enable 0 */
#define CMMU_DCTL_FRZ0           0x0100   /* Data Cache Freeze Bank 0 */
#define CMMU_DCTL_FRZ1           0x0080   /* Data Cache Freeze Bank 1 */
#define CMMU_DCTL_HTEN           0x0040   /* Hardware Table Search Enable */
#define CMMU_DCTL_MEN            0x0020   /* Data MMU Enable */
#define CMMU_DCTL_RSVD2          0x0010   /* Reserved */
#define CMMU_DCTL_ADS            0x0008   /* Allocat Disable */
#define CMMU_DCTL_RSVD1          0x0004   /* Reserved */
#define CMMU_DCTL_SEN            0x0002   /* Data Cache Snoop Enable */
#define CMMU_DCTL_CEN            0x0001   /* Data Cache Enable */

#define CMMU_DSR_TBE             0x200000 /* Table Search Bus Error */
#define CMMU_DSR_SI              0x100000 /* Segment Fault*/
#define CMMU_DSR_PI              0x080000 /* Page Fault */
#define CMMU_DSR_SP              0x040000 /* Supervisor Protection Violation */
#define CMMU_DSR_WE              0x020000 /* Write Protection Violation */
#define CMMU_DSR_BPE             0x010000 /* Break Point Exception */
#define CMMU_DSR_PH              0x000800 /* PATC Hit */
#define CMMU_DSR_BH              0x000400 /* BATC Hit */
#define CMMU_DSR_SU              0x000200 /* Supervisor Bit */
#define CMMU_DSR_RW              0x000100 /* Read Bit */
#define CMMU_DSR_CP              0x000004 /* Copyback Error */
#define CMMU_DSR_WA              0x000002 /* Write-Allocate Bus Error */
#define CMMU_DSR_BE              0x000001 /* Bus Error */
d84 8
a91 8
#define BATC_512K	(0x00 << BATC_BLKSHIFT)
#define BATC_1M		(0x01 << BATC_BLKSHIFT)
#define BATC_2M		(0x03 << BATC_BLKSHIFT)
#define BATC_4M		(0x07 << BATC_BLKSHIFT)
#define BATC_8M		(0x0f << BATC_BLKSHIFT)
#define BATC_16M	(0x1f << BATC_BLKSHIFT)
#define BATC_32M	(0x3f << BATC_BLKSHIFT)
#define BATC_64M	(0x7f << BATC_BLKSHIFT)
d131 1
a131 1
mc88110_flush_data_line(paddr_t x)
d134 1
a134 1
	set_dcmd(CMMU_DCMD_FLUSH_LINE);
d138 1
a138 1
mc88110_flush_data_page(paddr_t x)
d141 1
a141 1
	set_dcmd(CMMU_DCMD_FLUSH_PG);
d145 1
a145 1
mc88110_flush_data(void)
d147 1
a147 1
	set_dcmd(CMMU_DCMD_FLUSH_ALL);
d164 1
a164 1
mc88110_sync_data_line(paddr_t x)
d167 1
a167 1
	set_dcmd(CMMU_DCMD_FLUSH_LINE_INV);
d171 1
a171 1
mc88110_sync_data_page(paddr_t x)
d174 1
a174 1
	set_dcmd(CMMU_DCMD_FLUSH_PG_INV);
d178 1
a178 1
mc88110_sync_data(void)
d180 1
a180 1
	set_dcmd(CMMU_DCMD_FLUSH_ALL_INV);
@


1.21
log
@Split the cmmu code routines into single 88110 (MVME197LE) and 88110+88410
combos (MVME197SP/DP), and implement supposedly smarter cache routines.

There is still room for improvement, however, cache flush operation errata
permissing.

Tested on 197LE and 197DP.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.20 2007/11/22 23:31:55 miod Exp $ */
d101 23
a123 42
void set_icmd(u_int value);
void set_ictl(u_int value);
void set_isar(u_int value);
void set_isap(u_int value);
void set_iuap(u_int value);
void set_iir(u_int value);
void set_ibp(u_int value);
void set_ippu(u_int value);
void set_ippl(u_int value);
void set_isr(u_int value);
void set_dcmd(u_int value);
void set_dctl(u_int value);
void set_dsar(u_int value);
void set_dsap(u_int value);
void set_duap(u_int value);
void set_dir(u_int value);
void set_dbp(u_int value);
void set_dppu(u_int value);
void set_dppl(u_int value);
void set_dsr(u_int value);

/* get routines */
u_int get_icmd(void);
u_int get_ictl(void);
u_int get_isar(void);
u_int get_isap(void);
u_int get_iuap(void);
u_int get_iir(void);
u_int get_ibp(void);
u_int get_ippu(void);
u_int get_ippl(void);
u_int get_isr(void);
u_int get_dcmd(void);
u_int get_dctl(void);
u_int get_dsar(void);
u_int get_dsap(void);
u_int get_duap(void);
u_int get_dir(void);
u_int get_dbp(void);
u_int get_dppu(void);
u_int get_dppl(void);
u_int get_dsr(void);
a129 1
/*
a142 1
*/
@


1.20
log
@Introduce an inline function to skip an instruction on 88110 and use it
whenever necessary, instead of duplicating the same code 10+ times.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.19 2007/11/22 05:53:57 miod Exp $ */
a8 25
#define CMMU_ICMD 0
#define CMMU_ICTL 1
#define CMMU_ISAR 2
#define CMMU_ISAP 3
#define CMMU_IUAP 4
#define CMMU_IIR  5
#define CMMU_IBP  6
#define CMMU_IPPU 7
#define CMMU_IPPL 8
#define CMMU_ISR  9
#define CMMU_ILAR 10
#define CMMU_IPAR 11

#define CMMU_DCMD 12
#define CMMU_DCTL 13
#define CMMU_DSAR 14
#define CMMU_DSAP 15
#define CMMU_DUAP 16
#define CMMU_DIR  17
#define CMMU_DBP  18
#define CMMU_DPPU 19
#define CMMU_DPPL 20
#define CMMU_DSR  21
#define CMMU_DLAR 22
#define CMMU_DPAR 23
a82 5
#define CMMU_READ 0
#define CMMU_WRITE 1
#define CMMU_DATA 1
#define CMMU_INST 0

d93 5
a97 2
#define CLINE_MASK	0x1f
#define CLINE_SIZE	(8 * 32)
a143 5
/* Cache inlines */

#define line_addr(x)	(paddr_t)((x) & ~CLINE_MASK)
#define page_addr(x)	(paddr_t)((x) & ~PAGE_MASK)

d145 2
a146 8
 * 88110 general information #22:
 * ``Issuing a command to flush and invalidate the data cache while the
 *   dcache is disabled (CEN = 0 in dctl) will cause problems.  Do not
 *   flush a disabled data cache.  In general, there is no reason to
 *   perform this operation with the cache disabled, since it may be
 *   incoherent with the proper state of memory.  Before 5.0 the flush
 *   command was treated like a nop when the cache was disabled.  This
 *   is no longer the case.''
d149 3
a151 1
static __inline__ void mc88110_flush_data_line(paddr_t x)
d153 2
a154 5
	u_int dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(line_addr(x));
		set_dcmd(CMMU_DCMD_FLUSH_LINE);
	}
d157 2
a158 1
static __inline__ void mc88110_flush_data_page(paddr_t x)
d160 2
a161 5
	u_int dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(page_addr(x));
		set_dcmd(CMMU_DCMD_FLUSH_PG);
	}
d163 1
d165 2
a166 1
static __inline__ void mc88110_flush_data(void)
d168 1
a168 4
	u_int dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN) {
		set_dcmd(CMMU_DCMD_FLUSH_ALL);
	}
d171 2
a172 1
static __inline__ void mc88110_inval_data_line(paddr_t x)
d174 1
a174 1
	set_dsar(line_addr(x));
d178 2
a179 1
static __inline__ void mc88110_inval_data(void)
d184 2
a185 1
static __inline__ void mc88110_sync_data_line(paddr_t x)
d187 2
a188 5
	u_int dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(line_addr(x));
		set_dcmd(CMMU_DCMD_FLUSH_LINE_INV);
	}
d191 2
a192 1
static __inline__ void mc88110_sync_data_page(paddr_t x)
d194 2
a195 5
	u_int dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(page_addr(x));
		set_dcmd(CMMU_DCMD_FLUSH_PG_INV);
	}
d198 2
a199 1
static __inline__ void mc88110_sync_data(void)
d201 1
a201 4
	u_int dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN) {
		set_dcmd(CMMU_DCMD_FLUSH_ALL_INV);
	}
d204 2
a205 1
static __inline__ void mc88110_inval_inst_line(paddr_t x)
d207 1
a207 1
	set_isar(line_addr(x));
d211 2
a212 1
static __inline__ void mc88110_inval_inst(void)
@


1.19
log
@Quote a few errata to explain why odd things are done in oddly ways on 88110.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.18 2007/11/17 05:36:23 miod Exp $ */
d259 10
@


1.18
log
@Replace many ``unsigned'' variables with ``unsigned int'', ``u_int'' or other
appropriate types. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.17 2004/06/22 04:55:35 miod Exp $ */
d175 11
@


1.17
log
@Do not access [id][pl]ar registers from C code - we only care about their
values in trapframes.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.16 2004/01/13 23:24:10 miod Exp $ */
d128 20
a147 20
void set_icmd(unsigned value);
void set_ictl(unsigned value);
void set_isar(unsigned value);
void set_isap(unsigned value);
void set_iuap(unsigned value);
void set_iir(unsigned value);
void set_ibp(unsigned value);
void set_ippu(unsigned value);
void set_ippl(unsigned value);
void set_isr(unsigned value);
void set_dcmd(unsigned value);
void set_dctl(unsigned value);
void set_dsar(unsigned value);
void set_dsap(unsigned value);
void set_duap(unsigned value);
void set_dir(unsigned value);
void set_dbp(unsigned value);
void set_dppu(unsigned value);
void set_dppl(unsigned value);
void set_dsr(unsigned value);
d150 20
a169 20
unsigned get_icmd(void);
unsigned get_ictl(void);
unsigned get_isar(void);
unsigned get_isap(void);
unsigned get_iuap(void);
unsigned get_iir(void);
unsigned get_ibp(void);
unsigned get_ippu(void);
unsigned get_ippl(void);
unsigned get_isr(void);
unsigned get_dcmd(void);
unsigned get_dctl(void);
unsigned get_dsar(void);
unsigned get_dsap(void);
unsigned get_duap(void);
unsigned get_dir(void);
unsigned get_dbp(void);
unsigned get_dppu(void);
unsigned get_dppl(void);
unsigned get_dsr(void);
d178 1
a178 1
	unsigned dctl = get_dctl();
d187 1
a187 1
	unsigned dctl = get_dctl();
d196 1
a196 1
	unsigned dctl = get_dctl();
d215 1
a215 1
	unsigned dctl = get_dctl();
d224 1
a224 1
	unsigned dctl = get_dctl();
d233 1
a233 1
	unsigned dctl = get_dctl();
@


1.16
log
@No need to set [di]sar for complete tlb invalidation.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.15 2003/10/05 20:35:22 miod Exp $ */
a137 2
void set_ilar(unsigned value);
void set_ipar(unsigned value);
a147 2
void set_dlar(unsigned value);
void set_dpar(unsigned value);
a159 2
unsigned get_ilar(void);
unsigned get_ipar(void);
a169 2
unsigned get_dlar(void);
unsigned get_dpar(void);
@


1.15
log
@More cmmu routines cleanup:
- remove unused routines (which were mostly here for debugging anyway)
- do not include <machine/m88*.h> from <machine/cmmu.h> but rather only
  from the modules which need them
- try to simplify the MVME187 codepath in the 8820x code, whenever possible
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.14 2003/09/26 22:27:25 miod Exp $ */
d187 1
a187 1
	if (dctl & CMMU_DCTL_CEN){
d196 1
a196 1
	if (dctl & CMMU_DCTL_CEN){
d205 1
a205 2
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
a217 1
	set_dsar(0x00);
d224 1
a224 1
	if (dctl & CMMU_DCTL_CEN){
d233 1
a233 1
	if (dctl & CMMU_DCTL_CEN){
d242 1
a242 2
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
a254 1
	set_isar(0x00);
@


1.14
log
@Death to the bitfields, this time cmmu_apr_t and batc_entry_t. In the
process, remove duplicate batc defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.13 2003/08/20 20:33:44 miod Exp $ */
a127 39
/*
 * Prototypes from "mvme88k/mvme88k/m88110_cmmu.c"
 */
void m88110_show_apr(unsigned);
void m88110_show_sctr(unsigned);
void m88110_setup_board_config(void);
void m88110_setup_cmmu_config(void);
void m88110_cmmu_dump_config(void);
void m88110_cpu_configuration_print(int);
void m88110_cmmu_shutdown_now(void);
void m88110_cmmu_parity_enable(void);
unsigned m88110_cmmu_cpu_number(void);
unsigned m88110_cmmu_get_idr(unsigned);
void m88110_cmmu_set_sapr(unsigned);
void m88110_cmmu_remote_set_sapr(unsigned, unsigned);
void m88110_cmmu_set_uapr(unsigned);
void m88110_cmmu_set_batc_entry(unsigned, unsigned, unsigned, unsigned);
void m88110_cmmu_set_pair_batc_entry(unsigned, unsigned, unsigned);
void m88110_cmmu_flush_remote_tlb(unsigned, unsigned, vm_offset_t, int);
void m88110_cmmu_flush_tlb(unsigned, vm_offset_t, int);
void m88110_cmmu_pmap_activate(unsigned, unsigned, 
    u_int32_t i_batc[BATC_MAX], u_int32_t d_batc[BATC_MAX]);
void m88110_cmmu_flush_remote_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_cache(vm_offset_t, int);
void m88110_cmmu_flush_remote_inst_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_inst_cache(vm_offset_t, int);
void m88110_cmmu_flush_remote_data_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_data_cache(vm_offset_t, int);
void m88110_dma_cachectl(vm_offset_t, int, int);

#if DDB
unsigned m88110_cmmu_get_by_mode(int, int);
void m88110_cmmu_show_translation(unsigned, unsigned, unsigned, int);
void m88110_cmmu_cache_state(unsigned, unsigned);
void m88110_show_cmmu_info(unsigned);
#endif

void m88110_cmmu_init(void);

d181 2
a182 2
#define line_addr(x)	(vm_offset_t)((x) & ~CLINE_MASK)
#define page_addr(x)	(vm_offset_t)((x) & ~PAGE_MASK)
d184 1
a184 1
static __inline__ void mc88110_flush_data_line(vm_offset_t x)
d188 1
a188 1
		set_dsar(line_addr(x)); 
d193 1
a193 1
static __inline__ void mc88110_flush_data_page(vm_offset_t x)
d197 1
a197 1
		set_dsar(page_addr(x)); 
d211 1
a211 1
static __inline__ void mc88110_inval_data_line(vm_offset_t x)
d223 1
a223 1
static __inline__ void mc88110_sync_data_line(vm_offset_t x)
d227 1
a227 1
		set_dsar(line_addr(x)); 
d232 1
a232 1
static __inline__ void mc88110_sync_data_page(vm_offset_t x)
d236 1
a236 1
		set_dsar(page_addr(x)); 
d250 1
a250 1
static __inline__ void mc88110_inval_inst_line(vm_offset_t x)
d263 1
a263 1
#endif /* __MACHINE_M88110_H__ */
@


1.13
log
@A bunch of 88110 band-aid:
- the 88410 handling code is not working correctly. Check whether we are
  operating with 88410's, and only invoke these routines if necessary.
- force serial mode execution in the PSR for the moment (hopefully only
  temporary)
- disable branch prediction and data matching in the PSR, the 88110 errata
  is simply too scary about them.
- a better pipeline flush after changing the ictl control register.

These changes let 197LE (but not 197SP/DP) boot up to autoconf.
Userland process do not work at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.12 2002/03/14 01:26:39 millert Exp $ */
a5 5
#include <uvm/uvm_extern.h>
#ifndef _LOCORE
# include <machine/mmu.h>		 /* batc_template_t */
#endif

d40 2
a41 2
#define CMMU_ICMD_INV_SATC       0x00A    /* Invalidate All Supervisor ATCs */
#define CMMU_ICMD_INV_UATC       0x00B    /* Invalidate All User ATCs */
d114 8
a121 18
#define BATC_512K	(0x00 << 19)
#define BATC_1M		(0x01 << 19)
#define BATC_2M		(0x03 << 19)
#define BATC_4M		(0x07 << 19)
#define BATC_8M		(0x0F << 19)
#define BATC_16M	(0x1F << 19)
#define BATC_32M	(0x3F << 19)
#define BATC_64M	(0x7F << 19)
#define BATC_ADDR_MASK	0xFFF80000
#define BATC_ADDR_SHIFT	13
#define BATC_LBA_SHIFT	19
#define BATC_PBA_SHIFT	6
#define BATC_SU		0x20
#define BATC_WT		0x10
#define BATC_G		0x08
#define BATC_CI		0x04
#define BATC_WP		0x02
#define BATC_V		0x01
d123 1
a123 1
#define CLINE_MASK	0x1F
d149 1
a149 2
				  batc_template_t i_batc[BATC_MAX],
				  batc_template_t d_batc[BATC_MAX]);
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.11 2001/12/22 09:49:39 smurph Exp $ */
a181 1
int m88110_table_search(pmap_t, vm_offset_t, int, int, int);
@


1.11
log
@masive cmmu overhaul.  function pointers now control cmmu functionality
instead of case statements based on cpu type.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.10 2001/12/16 23:49:46 miod Exp $ */
d146 18
a163 18
void m88110_show_apr __P((unsigned));
void m88110_show_sctr __P((unsigned));
void m88110_setup_board_config __P((void));
void m88110_setup_cmmu_config __P((void));
void m88110_cmmu_dump_config __P((void));
void m88110_cpu_configuration_print __P((int));
void m88110_cmmu_shutdown_now __P((void));
void m88110_cmmu_parity_enable __P((void));
unsigned m88110_cmmu_cpu_number __P((void));
unsigned m88110_cmmu_get_idr __P((unsigned));
void m88110_cmmu_set_sapr __P((unsigned));
void m88110_cmmu_remote_set_sapr __P((unsigned, unsigned));
void m88110_cmmu_set_uapr __P((unsigned));
void m88110_cmmu_set_batc_entry __P((unsigned, unsigned, unsigned, unsigned));
void m88110_cmmu_set_pair_batc_entry __P((unsigned, unsigned, unsigned));
void m88110_cmmu_flush_remote_tlb __P((unsigned, unsigned, vm_offset_t, int));
void m88110_cmmu_flush_tlb __P((unsigned, vm_offset_t, int));
void m88110_cmmu_pmap_activate __P((unsigned, unsigned, 
d165 8
a172 8
				  batc_template_t d_batc[BATC_MAX]));
void m88110_cmmu_flush_remote_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_inst_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_inst_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_data_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_data_cache __P((vm_offset_t, int));
void m88110_dma_cachectl __P((vm_offset_t, int, int));
d175 4
a178 4
unsigned m88110_cmmu_get_by_mode __P((int, int));
void m88110_cmmu_show_translation __P((unsigned, unsigned, unsigned, int));
void m88110_cmmu_cache_state __P((unsigned, unsigned));
void m88110_show_cmmu_info __P((unsigned));
d181 2
a182 2
void m88110_cmmu_init __P((void));
int m88110_table_search __P((pmap_t, vm_offset_t, int, int, int));
d184 24
a207 24
void set_icmd __P((unsigned value));
void set_ictl __P((unsigned value));
void set_isar __P((unsigned value));
void set_isap __P((unsigned value));
void set_iuap __P((unsigned value));
void set_iir  __P((unsigned value));
void set_ibp  __P((unsigned value));
void set_ippu __P((unsigned value));
void set_ippl __P((unsigned value));
void set_isr  __P((unsigned value));
void set_ilar __P((unsigned value));
void set_ipar __P((unsigned value));
void set_dcmd __P((unsigned value));
void set_dctl __P((unsigned value));
void set_dsar __P((unsigned value));
void set_dsap __P((unsigned value));
void set_duap __P((unsigned value));
void set_dir  __P((unsigned value));
void set_dbp  __P((unsigned value));
void set_dppu __P((unsigned value));
void set_dppl __P((unsigned value));
void set_dsr  __P((unsigned value));
void set_dlar __P((unsigned value));
void set_dpar __P((unsigned value));
d210 24
a233 24
unsigned get_icmd __P((void));
unsigned get_ictl __P((void));
unsigned get_isar __P((void));
unsigned get_isap __P((void));
unsigned get_iuap __P((void));
unsigned get_iir  __P((void));
unsigned get_ibp  __P((void));
unsigned get_ippu __P((void));
unsigned get_ippl __P((void));
unsigned get_isr  __P((void));
unsigned get_ilar __P((void));
unsigned get_ipar __P((void));
unsigned get_dcmd __P((void));
unsigned get_dctl __P((void));
unsigned get_dsar __P((void));
unsigned get_dsap __P((void));
unsigned get_duap __P((void));
unsigned get_dir  __P((void));
unsigned get_dbp  __P((void));
unsigned get_dppu __P((void));
unsigned get_dppl __P((void));
unsigned get_dsr  __P((void));
unsigned get_dlar __P((void));
unsigned get_dpar __P((void));
@


1.10
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.7 2001/11/06 19:53:15 miod Exp $ */
d6 1
a10 4
#include <machine/board.h>
#include <machine/cmmu.h>
#include <uvm/uvm_extern.h>

d79 5
d93 3
d118 23
d142 1
d144 1
a144 1
 * Prototypes from "mvme88k/mvme88k/m197_cmmu.c"
d146 33
a178 5

#ifdef DDB
void m197_cmmu_show_translation(unsigned, unsigned, unsigned, int);
void m197_cmmu_cache_state(unsigned, unsigned);
void m197_show_cmmu_info(unsigned);
d181 2
a182 4
#ifdef CMMU_DEBUG
void m197_show_apr(unsigned value);
void m197_show_sctr(unsigned value);
#endif
d184 24
a207 77
unsigned m197_cmmu_cpu_number(void);
unsigned m197_cmmu_remote_get(unsigned cpu, unsigned r, unsigned data);
unsigned m197_cmmu_get_idr(unsigned data);
void m197_cmmu_init(void);
void m197_cmmu_shutdown_now(void);
void m197_cmmu_parity_enable(void);
void m197_setup_board_config(void);
void m197_setup_cmmu_config(void);
void m197_cmmu_dump_config(void);
unsigned m197_cmmu_get_by_mode(int cpu, int mode);
void m197_cpu_configuration_print(int master);
void m197_dma_cachectl(vm_offset_t va, int size, int op);
void m197_cmmu_remote_set(unsigned cpu, unsigned r, unsigned data, unsigned x);
void m197_cmmu_set_sapr(unsigned ap);
void m197_cmmu_remote_set_sapr(unsigned cpu, unsigned ap);
void m197_cmmu_set_uapr(unsigned ap);
void m197_cmmu_flush_tlb(unsigned kernel, vm_offset_t vaddr, int size);
void m197_cmmu_flush_remote_cache(int cpu, vm_offset_t physaddr, int size);
void m197_cmmu_flush_cache(vm_offset_t physaddr, int size);
void m197_cmmu_flush_remote_inst_cache(int cpu, vm_offset_t physaddr, int size);
void m197_cmmu_flush_inst_cache(vm_offset_t physaddr, int size);
void m197_cmmu_flush_remote_data_cache(int cpu, vm_offset_t physaddr, int size);
void m197_cmmu_flush_data_cache(vm_offset_t physaddr, int size);

void m197_cmmu_pmap_activate(
    unsigned cpu,
    unsigned uapr,
    batc_template_t i_batc[BATC_MAX],
    batc_template_t d_batc[BATC_MAX]);

void m197_cmmu_flush_remote_tlb(
	unsigned cpu,
	unsigned kernel,
	vm_offset_t vaddr,
	int size);

void m197_cmmu_set_batc_entry(
     unsigned cpu,
     unsigned entry_no,
     unsigned data,   /* 1 = data, 0 = instruction */
     unsigned value);    /* the value to stuff into the batc */

void m197_cmmu_set_pair_batc_entry(
     unsigned cpu,
     unsigned entry_no,
     unsigned value);    /* the value to stuff into the batc */

int m197_table_search(
     pmap_t map, 
     vm_offset_t virt, 
     int write, 
     int user, int data);

void set_icmd (unsigned value);
void set_ictl (unsigned value);
void set_isar (unsigned value);
void set_isap (unsigned value);
void set_iuap (unsigned value);
void set_iir  (unsigned value);
void set_ibp  (unsigned value);
void set_ippu (unsigned value);
void set_ippl (unsigned value);
void set_isr  (unsigned value);
void set_ilar (unsigned value);
void set_ipar (unsigned value);
void set_dcmd (unsigned value);
void set_dctl (unsigned value);
void set_dsar (unsigned value);
void set_dsap (unsigned value);
void set_duap (unsigned value);
void set_dir  (unsigned value);
void set_dbp  (unsigned value);
void set_dppu (unsigned value);
void set_dppl (unsigned value);
void set_dsr  (unsigned value);
void set_dlar (unsigned value);
void set_dpar (unsigned value);
d210 107
a316 24
unsigned get_icmd (void);
unsigned get_ictl (void);
unsigned get_isar (void);
unsigned get_isap (void);
unsigned get_iuap (void);
unsigned get_iir  (void);
unsigned get_ibp  (void);
unsigned get_ippu (void);
unsigned get_ippl (void);
unsigned get_isr  (void);
unsigned get_ilar (void);
unsigned get_ipar (void);
unsigned get_dcmd (void);
unsigned get_dctl (void);
unsigned get_dsar (void);
unsigned get_dsap (void);
unsigned get_duap (void);
unsigned get_dir  (void);
unsigned get_dbp  (void);
unsigned get_dppu (void);
unsigned get_dppl (void);
unsigned get_dsr  (void);
unsigned get_dlar (void);
unsigned get_dpar (void);
a318 1

@


1.10.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.11 2001/12/22 09:49:39 smurph Exp $ */
a5 1
#include <uvm/uvm_extern.h>
d10 4
a81 5
#define CMMU_DCTL_RSVD7          0x40000   /* Reserved */
#define CMMU_DCTL_RSVD6          0x20000   /* Reserved */
#define CMMU_DCTL_RSVD5          0x10000   /* Reserved */
#define CMMU_DCTL_RSVD4          0x8000   /* Reserved */
#define CMMU_DCTL_RSVD3          0x4000   /* Reserved */
a90 3
#define CMMU_DCTL_RSVD2          0x0010   /* Reserved */
#define CMMU_DCTL_ADS            0x0008   /* Allocat Disable */
#define CMMU_DCTL_RSVD1          0x0004   /* Reserved */
a112 23
/* definitions for use of the BATC */
#define BATC_512K	(0x00 << 19)
#define BATC_1M		(0x01 << 19)
#define BATC_2M		(0x03 << 19)
#define BATC_4M		(0x07 << 19)
#define BATC_8M		(0x0F << 19)
#define BATC_16M	(0x1F << 19)
#define BATC_32M	(0x3F << 19)
#define BATC_64M	(0x7F << 19)
#define BATC_ADDR_MASK	0xFFF80000
#define BATC_ADDR_SHIFT	13
#define BATC_LBA_SHIFT	19
#define BATC_PBA_SHIFT	6
#define BATC_SU		0x20
#define BATC_WT		0x10
#define BATC_G		0x08
#define BATC_CI		0x04
#define BATC_WP		0x02
#define BATC_V		0x01

#define CLINE_MASK	0x1F
#define CLINE_SIZE	(8 * 32)

a113 1

d115 1
a115 1
 * Prototypes from "mvme88k/mvme88k/m88110_cmmu.c"
d117 5
a121 33
void m88110_show_apr __P((unsigned));
void m88110_show_sctr __P((unsigned));
void m88110_setup_board_config __P((void));
void m88110_setup_cmmu_config __P((void));
void m88110_cmmu_dump_config __P((void));
void m88110_cpu_configuration_print __P((int));
void m88110_cmmu_shutdown_now __P((void));
void m88110_cmmu_parity_enable __P((void));
unsigned m88110_cmmu_cpu_number __P((void));
unsigned m88110_cmmu_get_idr __P((unsigned));
void m88110_cmmu_set_sapr __P((unsigned));
void m88110_cmmu_remote_set_sapr __P((unsigned, unsigned));
void m88110_cmmu_set_uapr __P((unsigned));
void m88110_cmmu_set_batc_entry __P((unsigned, unsigned, unsigned, unsigned));
void m88110_cmmu_set_pair_batc_entry __P((unsigned, unsigned, unsigned));
void m88110_cmmu_flush_remote_tlb __P((unsigned, unsigned, vm_offset_t, int));
void m88110_cmmu_flush_tlb __P((unsigned, vm_offset_t, int));
void m88110_cmmu_pmap_activate __P((unsigned, unsigned, 
				  batc_template_t i_batc[BATC_MAX],
				  batc_template_t d_batc[BATC_MAX]));
void m88110_cmmu_flush_remote_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_inst_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_inst_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_data_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_data_cache __P((vm_offset_t, int));
void m88110_dma_cachectl __P((vm_offset_t, int, int));

#if DDB
unsigned m88110_cmmu_get_by_mode __P((int, int));
void m88110_cmmu_show_translation __P((unsigned, unsigned, unsigned, int));
void m88110_cmmu_cache_state __P((unsigned, unsigned));
void m88110_show_cmmu_info __P((unsigned));
d124 4
a127 2
void m88110_cmmu_init __P((void));
int m88110_table_search __P((pmap_t, vm_offset_t, int, int, int));
d129 77
a205 24
void set_icmd __P((unsigned value));
void set_ictl __P((unsigned value));
void set_isar __P((unsigned value));
void set_isap __P((unsigned value));
void set_iuap __P((unsigned value));
void set_iir  __P((unsigned value));
void set_ibp  __P((unsigned value));
void set_ippu __P((unsigned value));
void set_ippl __P((unsigned value));
void set_isr  __P((unsigned value));
void set_ilar __P((unsigned value));
void set_ipar __P((unsigned value));
void set_dcmd __P((unsigned value));
void set_dctl __P((unsigned value));
void set_dsar __P((unsigned value));
void set_dsap __P((unsigned value));
void set_duap __P((unsigned value));
void set_dir  __P((unsigned value));
void set_dbp  __P((unsigned value));
void set_dppu __P((unsigned value));
void set_dppl __P((unsigned value));
void set_dsr  __P((unsigned value));
void set_dlar __P((unsigned value));
void set_dpar __P((unsigned value));
d208 24
a231 107
unsigned get_icmd __P((void));
unsigned get_ictl __P((void));
unsigned get_isar __P((void));
unsigned get_isap __P((void));
unsigned get_iuap __P((void));
unsigned get_iir  __P((void));
unsigned get_ibp  __P((void));
unsigned get_ippu __P((void));
unsigned get_ippl __P((void));
unsigned get_isr  __P((void));
unsigned get_ilar __P((void));
unsigned get_ipar __P((void));
unsigned get_dcmd __P((void));
unsigned get_dctl __P((void));
unsigned get_dsar __P((void));
unsigned get_dsap __P((void));
unsigned get_duap __P((void));
unsigned get_dir  __P((void));
unsigned get_dbp  __P((void));
unsigned get_dppu __P((void));
unsigned get_dppl __P((void));
unsigned get_dsr  __P((void));
unsigned get_dlar __P((void));
unsigned get_dpar __P((void));

/* Cache inlines */

#define line_addr(x)	(vm_offset_t)((x) & ~CLINE_MASK)
#define page_addr(x)	(vm_offset_t)((x) & ~PAGE_MASK)

static __inline__ void mc88110_flush_data_line(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(line_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_LINE);
	}
}

static __inline__ void mc88110_flush_data_page(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(page_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_PG);
	}
}

static __inline__ void mc88110_flush_data(void)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
		set_dcmd(CMMU_DCMD_FLUSH_ALL);
	}
}

static __inline__ void mc88110_inval_data_line(vm_offset_t x)
{
	set_dsar(line_addr(x));
	set_dcmd(CMMU_DCMD_INV_LINE);
}

static __inline__ void mc88110_inval_data(void)
{
	set_dsar(0x00);
	set_dcmd(CMMU_DCMD_INV_ALL);
}

static __inline__ void mc88110_sync_data_line(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(line_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_LINE_INV);
	}
}

static __inline__ void mc88110_sync_data_page(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(page_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_PG_INV);
	}
}

static __inline__ void mc88110_sync_data(void)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
		set_dcmd(CMMU_DCMD_FLUSH_ALL_INV);
	}
}

static __inline__ void mc88110_inval_inst_line(vm_offset_t x)
{
	set_isar(line_addr(x));
	set_icmd(CMMU_ICMD_INV_LINE);
}

static __inline__ void mc88110_inval_inst(void)
{
	set_isar(0x00);
	set_icmd(CMMU_ICMD_INV_ITIC);
}
d234 1
@


1.10.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.10.2.1 2002/01/31 22:55:18 niklas Exp $ */
d146 18
a163 18
void m88110_show_apr(unsigned);
void m88110_show_sctr(unsigned);
void m88110_setup_board_config(void);
void m88110_setup_cmmu_config(void);
void m88110_cmmu_dump_config(void);
void m88110_cpu_configuration_print(int);
void m88110_cmmu_shutdown_now(void);
void m88110_cmmu_parity_enable(void);
unsigned m88110_cmmu_cpu_number(void);
unsigned m88110_cmmu_get_idr(unsigned);
void m88110_cmmu_set_sapr(unsigned);
void m88110_cmmu_remote_set_sapr(unsigned, unsigned);
void m88110_cmmu_set_uapr(unsigned);
void m88110_cmmu_set_batc_entry(unsigned, unsigned, unsigned, unsigned);
void m88110_cmmu_set_pair_batc_entry(unsigned, unsigned, unsigned);
void m88110_cmmu_flush_remote_tlb(unsigned, unsigned, vm_offset_t, int);
void m88110_cmmu_flush_tlb(unsigned, vm_offset_t, int);
void m88110_cmmu_pmap_activate(unsigned, unsigned, 
d165 8
a172 8
				  batc_template_t d_batc[BATC_MAX]);
void m88110_cmmu_flush_remote_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_cache(vm_offset_t, int);
void m88110_cmmu_flush_remote_inst_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_inst_cache(vm_offset_t, int);
void m88110_cmmu_flush_remote_data_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_data_cache(vm_offset_t, int);
void m88110_dma_cachectl(vm_offset_t, int, int);
d175 4
a178 4
unsigned m88110_cmmu_get_by_mode(int, int);
void m88110_cmmu_show_translation(unsigned, unsigned, unsigned, int);
void m88110_cmmu_cache_state(unsigned, unsigned);
void m88110_show_cmmu_info(unsigned);
d181 2
a182 2
void m88110_cmmu_init(void);
int m88110_table_search(pmap_t, vm_offset_t, int, int, int);
d184 24
a207 24
void set_icmd(unsigned value);
void set_ictl(unsigned value);
void set_isar(unsigned value);
void set_isap(unsigned value);
void set_iuap(unsigned value);
void set_iir(unsigned value);
void set_ibp(unsigned value);
void set_ippu(unsigned value);
void set_ippl(unsigned value);
void set_isr(unsigned value);
void set_ilar(unsigned value);
void set_ipar(unsigned value);
void set_dcmd(unsigned value);
void set_dctl(unsigned value);
void set_dsar(unsigned value);
void set_dsap(unsigned value);
void set_duap(unsigned value);
void set_dir(unsigned value);
void set_dbp(unsigned value);
void set_dppu(unsigned value);
void set_dppl(unsigned value);
void set_dsr(unsigned value);
void set_dlar(unsigned value);
void set_dpar(unsigned value);
d210 24
a233 24
unsigned get_icmd(void);
unsigned get_ictl(void);
unsigned get_isar(void);
unsigned get_isap(void);
unsigned get_iuap(void);
unsigned get_iir(void);
unsigned get_ibp(void);
unsigned get_ippu(void);
unsigned get_ippl(void);
unsigned get_isr(void);
unsigned get_ilar(void);
unsigned get_ipar(void);
unsigned get_dcmd(void);
unsigned get_dctl(void);
unsigned get_dsar(void);
unsigned get_dsap(void);
unsigned get_duap(void);
unsigned get_dir(void);
unsigned get_dbp(void);
unsigned get_dppu(void);
unsigned get_dppl(void);
unsigned get_dsr(void);
unsigned get_dlar(void);
unsigned get_dpar(void);
@


1.9
log
@Repair MVME187 after MVME197 merge.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.8 2001/12/13 08:55:51 smurph Exp $ */
a5 1
#include <uvm/uvm_extern.h>
d7 1
a7 1
#include <machine/mmu.h>		 /* batc_template_t */
d10 4
a81 5
#define CMMU_DCTL_RSVD7          0x40000   /* Reserved */
#define CMMU_DCTL_RSVD6          0x20000   /* Reserved */
#define CMMU_DCTL_RSVD5          0x10000   /* Reserved */
#define CMMU_DCTL_RSVD4          0x8000   /* Reserved */
#define CMMU_DCTL_RSVD3          0x4000   /* Reserved */
a90 3
#define CMMU_DCTL_RSVD2          0x0010   /* Reserved */
#define CMMU_DCTL_ADS            0x0008   /* Allocat Disable */
#define CMMU_DCTL_RSVD1          0x0004   /* Reserved */
d113 4
a116 19
/* definitions for use of the BATC */
#define BATC_512K	(0x00 << 19)
#define BATC_1M		(0x01 << 19)
#define BATC_2M		(0x03 << 19)
#define BATC_4M		(0x07 << 19)
#define BATC_8M		(0x0F << 19)
#define BATC_16M	(0x1F << 19)
#define BATC_32M	(0x3F << 19)
#define BATC_64M	(0x7F << 19)
#define BATC_ADDR_MASK	0xFFF80000
#define BATC_ADDR_SHIFT	13
#define BATC_LBA_SHIFT	19
#define BATC_PBA_SHIFT	6
#define BATC_SU		0x20
#define BATC_WT		0x10
#define BATC_G		0x08
#define BATC_CI		0x04
#define BATC_WP		0x02
#define BATC_V		0x01
d118 5
a122 2
#define CLINE_MASK	0x1F
#define CLINE_SIZE	(8 * 32)
d124 4
a127 1
#ifndef	_LOCORE
d129 77
a205 65
/*
 * Prototypes from "mvme88k/mvme88k/m88110_cmmu.c"
 */
void m88110_show_apr __P((unsigned));
void m88110_show_sctr __P((unsigned));
void m88110_setup_board_config __P((void));
void m88110_setup_cmmu_config __P((void));
void m88110_cmmu_dump_config __P((void));
void m88110_cpu_configuration_print __P((int));
void m88110_cmmu_shutdown_now __P((void));
void m88110_cmmu_parity_enable __P((void));
unsigned m88110_cmmu_cpu_number __P((void));
unsigned m88110_cmmu_get_idr __P((unsigned));
void m88110_cmmu_set_sapr __P((unsigned));
void m88110_cmmu_remote_set_sapr __P((unsigned, unsigned));
void m88110_cmmu_set_uapr __P((unsigned));
void m88110_cmmu_set_batc_entry __P((unsigned, unsigned, unsigned, unsigned));
void m88110_cmmu_set_pair_batc_entry __P((unsigned, unsigned, unsigned));
void m88110_cmmu_flush_remote_tlb __P((unsigned, unsigned, vm_offset_t, int));
void m88110_cmmu_flush_tlb __P((unsigned, vm_offset_t, int));
void m88110_cmmu_pmap_activate __P((unsigned, unsigned, 
				  batc_template_t i_batc[BATC_MAX],
				  batc_template_t d_batc[BATC_MAX]));
void m88110_cmmu_flush_remote_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_inst_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_inst_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_data_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_data_cache __P((vm_offset_t, int));
void m88110_dma_cachectl __P((vm_offset_t, int, int));

#if DDB
unsigned m88110_cmmu_get_by_mode __P((int, int));
void m88110_cmmu_show_translation __P((unsigned, unsigned, unsigned, int));
void m88110_cmmu_cache_state __P((unsigned, unsigned));
void m88110_show_cmmu_info __P((unsigned));
#endif 

void m88110_cmmu_init __P((void));
int m88110_table_search __P((pmap_t, vm_offset_t, int, int, int));

void set_icmd __P((unsigned value));
void set_ictl __P((unsigned value));
void set_isar __P((unsigned value));
void set_isap __P((unsigned value));
void set_iuap __P((unsigned value));
void set_iir  __P((unsigned value));
void set_ibp  __P((unsigned value));
void set_ippu __P((unsigned value));
void set_ippl __P((unsigned value));
void set_isr  __P((unsigned value));
void set_ilar __P((unsigned value));
void set_ipar __P((unsigned value));
void set_dcmd __P((unsigned value));
void set_dctl __P((unsigned value));
void set_dsar __P((unsigned value));
void set_dsap __P((unsigned value));
void set_duap __P((unsigned value));
void set_dir  __P((unsigned value));
void set_dbp  __P((unsigned value));
void set_dppu __P((unsigned value));
void set_dppl __P((unsigned value));
void set_dsr  __P((unsigned value));
void set_dlar __P((unsigned value));
void set_dpar __P((unsigned value));
d208 24
a231 107
unsigned get_icmd __P((void));
unsigned get_ictl __P((void));
unsigned get_isar __P((void));
unsigned get_isap __P((void));
unsigned get_iuap __P((void));
unsigned get_iir  __P((void));
unsigned get_ibp  __P((void));
unsigned get_ippu __P((void));
unsigned get_ippl __P((void));
unsigned get_isr  __P((void));
unsigned get_ilar __P((void));
unsigned get_ipar __P((void));
unsigned get_dcmd __P((void));
unsigned get_dctl __P((void));
unsigned get_dsar __P((void));
unsigned get_dsap __P((void));
unsigned get_duap __P((void));
unsigned get_dir  __P((void));
unsigned get_dbp  __P((void));
unsigned get_dppu __P((void));
unsigned get_dppl __P((void));
unsigned get_dsr  __P((void));
unsigned get_dlar __P((void));
unsigned get_dpar __P((void));

/* Cache inlines */

#define line_addr(x)	(vm_offset_t)((x) & ~CLINE_MASK)
#define page_addr(x)	(vm_offset_t)((x) & ~PAGE_MASK)

static __inline__ void mc88110_flush_data_line(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(line_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_LINE);
	}
}

static __inline__ void mc88110_flush_data_page(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(page_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_PG);
	}
}

static __inline__ void mc88110_flush_data(void)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
		set_dcmd(CMMU_DCMD_FLUSH_ALL);
	}
}

static __inline__ void mc88110_inval_data_line(vm_offset_t x)
{
	set_dsar(line_addr(x));
	set_dcmd(CMMU_DCMD_INV_LINE);
}

static __inline__ void mc88110_inval_data(void)
{
	set_dsar(0x00);
	set_dcmd(CMMU_DCMD_INV_ALL);
}

static __inline__ void mc88110_sync_data_line(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(line_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_LINE_INV);
	}
}

static __inline__ void mc88110_sync_data_page(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(page_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_PG_INV);
	}
}

static __inline__ void mc88110_sync_data(void)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
		set_dcmd(CMMU_DCMD_FLUSH_ALL_INV);
	}
}

static __inline__ void mc88110_inval_inst_line(vm_offset_t x)
{
	set_isar(line_addr(x));
	set_icmd(CMMU_ICMD_INV_LINE);
}

static __inline__ void mc88110_inval_inst(void)
{
	set_isar(0x00);
	set_icmd(CMMU_ICMD_INV_ITIC);
}
d234 1
@


1.8
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.7 2001/11/06 19:53:15 miod Exp $ */
a154 2
void m88110_cmmu_remote_set __P((unsigned, unsigned, unsigned, unsigned));
unsigned m88110_cmmu_remote_get __P((unsigned, unsigned, unsigned));
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.6 2001/08/26 14:31:07 miod Exp $ */
d6 1
d8 1
a8 1
# include <machine/mmu.h>		 /* batc_template_t */
a10 4
#include <machine/board.h>
#include <machine/cmmu.h>
#include <uvm/uvm_extern.h>

d79 5
d93 3
d118 23
d142 1
d144 1
a144 1
 * Prototypes from "mvme88k/mvme88k/m197_cmmu.c"
d146 64
a209 89

#ifdef DDB
void m197_cmmu_show_translation(unsigned, unsigned, unsigned, int);
void m197_cmmu_cache_state(unsigned, unsigned);
void m197_show_cmmu_info(unsigned);
#endif

#ifdef CMMU_DEBUG
void m197_show_apr(unsigned value);
void m197_show_sctr(unsigned value);
#endif

unsigned m197_cmmu_cpu_number(void);
unsigned m197_cmmu_remote_get(unsigned cpu, unsigned r, unsigned data);
unsigned m197_cmmu_get_idr(unsigned data);
void m197_cmmu_init(void);
void m197_cmmu_shutdown_now(void);
void m197_cmmu_parity_enable(void);
void m197_setup_board_config(void);
void m197_setup_cmmu_config(void);
void m197_cmmu_dump_config(void);
unsigned m197_cmmu_get_by_mode(int cpu, int mode);
void m197_cpu_configuration_print(int master);
void m197_dma_cachectl(vm_offset_t va, int size, int op);
void m197_cmmu_remote_set(unsigned cpu, unsigned r, unsigned data, unsigned x);
void m197_cmmu_set_sapr(unsigned ap);
void m197_cmmu_remote_set_sapr(unsigned cpu, unsigned ap);
void m197_cmmu_set_uapr(unsigned ap);
void m197_cmmu_flush_tlb(unsigned kernel, vm_offset_t vaddr, int size);
void m197_cmmu_flush_remote_cache(int cpu, vm_offset_t physaddr, int size);
void m197_cmmu_flush_cache(vm_offset_t physaddr, int size);
void m197_cmmu_flush_remote_inst_cache(int cpu, vm_offset_t physaddr, int size);
void m197_cmmu_flush_inst_cache(vm_offset_t physaddr, int size);
void m197_cmmu_flush_remote_data_cache(int cpu, vm_offset_t physaddr, int size);
void m197_cmmu_flush_data_cache(vm_offset_t physaddr, int size);

void m197_cmmu_pmap_activate(
    unsigned cpu,
    unsigned uapr,
    batc_template_t i_batc[BATC_MAX],
    batc_template_t d_batc[BATC_MAX]);

void m197_cmmu_flush_remote_tlb(
	unsigned cpu,
	unsigned kernel,
	vm_offset_t vaddr,
	int size);

void m197_cmmu_set_batc_entry(
     unsigned cpu,
     unsigned entry_no,
     unsigned data,   /* 1 = data, 0 = instruction */
     unsigned value);    /* the value to stuff into the batc */

void m197_cmmu_set_pair_batc_entry(
     unsigned cpu,
     unsigned entry_no,
     unsigned value);    /* the value to stuff into the batc */

int m197_table_search(
     pmap_t map, 
     vm_offset_t virt, 
     int write, 
     int user, int data);

void set_icmd (unsigned value);
void set_ictl (unsigned value);
void set_isar (unsigned value);
void set_isap (unsigned value);
void set_iuap (unsigned value);
void set_iir  (unsigned value);
void set_ibp  (unsigned value);
void set_ippu (unsigned value);
void set_ippl (unsigned value);
void set_isr  (unsigned value);
void set_ilar (unsigned value);
void set_ipar (unsigned value);
void set_dcmd (unsigned value);
void set_dctl (unsigned value);
void set_dsar (unsigned value);
void set_dsap (unsigned value);
void set_duap (unsigned value);
void set_dir  (unsigned value);
void set_dbp  (unsigned value);
void set_dppu (unsigned value);
void set_dppl (unsigned value);
void set_dsr  (unsigned value);
void set_dlar (unsigned value);
void set_dpar (unsigned value);
d212 107
a318 24
unsigned get_icmd (void);
unsigned get_ictl (void);
unsigned get_isar (void);
unsigned get_isap (void);
unsigned get_iuap (void);
unsigned get_iir  (void);
unsigned get_ibp  (void);
unsigned get_ippu (void);
unsigned get_ippl (void);
unsigned get_isr  (void);
unsigned get_ilar (void);
unsigned get_ipar (void);
unsigned get_dcmd (void);
unsigned get_dctl (void);
unsigned get_dsar (void);
unsigned get_dsap (void);
unsigned get_duap (void);
unsigned get_dir  (void);
unsigned get_dbp  (void);
unsigned get_dppu (void);
unsigned get_dppl (void);
unsigned get_dsr  (void);
unsigned get_dlar (void);
unsigned get_dpar (void);
a320 1

@


1.6
log
@Add prototypes, fix compilation warnings, random style fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.5 2001/08/12 12:03:02 heko Exp $ */
d12 1
a12 1
#include <vm/vm.h>
@


1.5
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.4 2001/03/09 05:44:40 smurph Exp $ */
d118 6
d125 2
a126 2
 void m197_show_apr(unsigned value);
 void m197_show_sctr(unsigned value);
a129 3
#if !DDB
static
#endif /* !DDB */
a134 3
#if !DDB
static
#endif /* !DDB */
@


1.4
log
@kernel will compile with -Werror.  Added intr.h
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.3 2001/03/07 23:37:16 miod Exp $ */
d235 1
a235 1
#endif __MACHINE_M88110_H__
@


1.3
log
@Inclusion from assembly code is detected with _LOCORE, no more fancy symbols.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.2 2001/01/14 20:25:24 smurph Exp $ */
d135 6
@


1.2
log
@Complete move to UVM virtual memory system.  More header fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.1 1999/09/27 20:46:18 smurph Exp $ */
d6 1
a6 1
#ifndef ASSEMBLER
d113 1
a113 1
#ifndef	ASSEMBLER
d227 1
a227 1
#endif	/* ASSEMBLER */
@


1.1
log
@Adding support for MVME188 and MVME197
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.4 1999/02/09 06:36:26 smurph Exp $ */
d229 1
a229 1
#endif	/* __MACHINE_M88110_H__ */
@


1.1.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.4 2001/03/09 05:44:40 smurph Exp $ */
d6 1
a6 1
#ifndef _LOCORE
d113 1
a113 1
#ifndef	_LOCORE
a134 6
void m197_setup_board_config(void);
void m197_setup_cmmu_config(void);
void m197_cmmu_dump_config(void);
unsigned m197_cmmu_get_by_mode(int cpu, int mode);
void m197_cpu_configuration_print(int master);
void m197_dma_cachectl(vm_offset_t va, int size, int op);
d227 1
a227 1
#endif	/* _LOCORE */
d229 1
a229 1
#endif __MACHINE_M88110_H__
@


1.1.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.1.4.1 2001/04/18 16:11:22 niklas Exp $ */
a117 6
#ifdef DDB
void m197_cmmu_show_translation(unsigned, unsigned, unsigned, int);
void m197_cmmu_cache_state(unsigned, unsigned);
void m197_show_cmmu_info(unsigned);
#endif

d119 2
a120 2
void m197_show_apr(unsigned value);
void m197_show_sctr(unsigned value);
d124 3
d132 3
d235 1
a235 1
#endif /* __MACHINE_M88110_H__ */
@


1.1.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d12 1
a12 1
#include <uvm/uvm_extern.h>
@


1.1.4.4
log
@Merge in trunk
@
text
@a5 1
#include <uvm/uvm_extern.h>
d10 4
a81 5
#define CMMU_DCTL_RSVD7          0x40000   /* Reserved */
#define CMMU_DCTL_RSVD6          0x20000   /* Reserved */
#define CMMU_DCTL_RSVD5          0x10000   /* Reserved */
#define CMMU_DCTL_RSVD4          0x8000   /* Reserved */
#define CMMU_DCTL_RSVD3          0x4000   /* Reserved */
a90 3
#define CMMU_DCTL_RSVD2          0x0010   /* Reserved */
#define CMMU_DCTL_ADS            0x0008   /* Allocat Disable */
#define CMMU_DCTL_RSVD1          0x0004   /* Reserved */
a112 23
/* definitions for use of the BATC */
#define BATC_512K	(0x00 << 19)
#define BATC_1M		(0x01 << 19)
#define BATC_2M		(0x03 << 19)
#define BATC_4M		(0x07 << 19)
#define BATC_8M		(0x0F << 19)
#define BATC_16M	(0x1F << 19)
#define BATC_32M	(0x3F << 19)
#define BATC_64M	(0x7F << 19)
#define BATC_ADDR_MASK	0xFFF80000
#define BATC_ADDR_SHIFT	13
#define BATC_LBA_SHIFT	19
#define BATC_PBA_SHIFT	6
#define BATC_SU		0x20
#define BATC_WT		0x10
#define BATC_G		0x08
#define BATC_CI		0x04
#define BATC_WP		0x02
#define BATC_V		0x01

#define CLINE_MASK	0x1F
#define CLINE_SIZE	(8 * 32)

a113 1

d115 1
a115 1
 * Prototypes from "mvme88k/mvme88k/m88110_cmmu.c"
d117 5
a121 33
void m88110_show_apr __P((unsigned));
void m88110_show_sctr __P((unsigned));
void m88110_setup_board_config __P((void));
void m88110_setup_cmmu_config __P((void));
void m88110_cmmu_dump_config __P((void));
void m88110_cpu_configuration_print __P((int));
void m88110_cmmu_shutdown_now __P((void));
void m88110_cmmu_parity_enable __P((void));
unsigned m88110_cmmu_cpu_number __P((void));
unsigned m88110_cmmu_get_idr __P((unsigned));
void m88110_cmmu_set_sapr __P((unsigned));
void m88110_cmmu_remote_set_sapr __P((unsigned, unsigned));
void m88110_cmmu_set_uapr __P((unsigned));
void m88110_cmmu_set_batc_entry __P((unsigned, unsigned, unsigned, unsigned));
void m88110_cmmu_set_pair_batc_entry __P((unsigned, unsigned, unsigned));
void m88110_cmmu_flush_remote_tlb __P((unsigned, unsigned, vm_offset_t, int));
void m88110_cmmu_flush_tlb __P((unsigned, vm_offset_t, int));
void m88110_cmmu_pmap_activate __P((unsigned, unsigned, 
				  batc_template_t i_batc[BATC_MAX],
				  batc_template_t d_batc[BATC_MAX]));
void m88110_cmmu_flush_remote_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_inst_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_inst_cache __P((vm_offset_t, int));
void m88110_cmmu_flush_remote_data_cache __P((int, vm_offset_t, int));
void m88110_cmmu_flush_data_cache __P((vm_offset_t, int));
void m88110_dma_cachectl __P((vm_offset_t, int, int));

#if DDB
unsigned m88110_cmmu_get_by_mode __P((int, int));
void m88110_cmmu_show_translation __P((unsigned, unsigned, unsigned, int));
void m88110_cmmu_cache_state __P((unsigned, unsigned));
void m88110_show_cmmu_info __P((unsigned));
d124 4
a127 2
void m88110_cmmu_init __P((void));
int m88110_table_search __P((pmap_t, vm_offset_t, int, int, int));
d129 77
a205 24
void set_icmd __P((unsigned value));
void set_ictl __P((unsigned value));
void set_isar __P((unsigned value));
void set_isap __P((unsigned value));
void set_iuap __P((unsigned value));
void set_iir  __P((unsigned value));
void set_ibp  __P((unsigned value));
void set_ippu __P((unsigned value));
void set_ippl __P((unsigned value));
void set_isr  __P((unsigned value));
void set_ilar __P((unsigned value));
void set_ipar __P((unsigned value));
void set_dcmd __P((unsigned value));
void set_dctl __P((unsigned value));
void set_dsar __P((unsigned value));
void set_dsap __P((unsigned value));
void set_duap __P((unsigned value));
void set_dir  __P((unsigned value));
void set_dbp  __P((unsigned value));
void set_dppu __P((unsigned value));
void set_dppl __P((unsigned value));
void set_dsr  __P((unsigned value));
void set_dlar __P((unsigned value));
void set_dpar __P((unsigned value));
d208 24
a231 107
unsigned get_icmd __P((void));
unsigned get_ictl __P((void));
unsigned get_isar __P((void));
unsigned get_isap __P((void));
unsigned get_iuap __P((void));
unsigned get_iir  __P((void));
unsigned get_ibp  __P((void));
unsigned get_ippu __P((void));
unsigned get_ippl __P((void));
unsigned get_isr  __P((void));
unsigned get_ilar __P((void));
unsigned get_ipar __P((void));
unsigned get_dcmd __P((void));
unsigned get_dctl __P((void));
unsigned get_dsar __P((void));
unsigned get_dsap __P((void));
unsigned get_duap __P((void));
unsigned get_dir  __P((void));
unsigned get_dbp  __P((void));
unsigned get_dppu __P((void));
unsigned get_dppl __P((void));
unsigned get_dsr  __P((void));
unsigned get_dlar __P((void));
unsigned get_dpar __P((void));

/* Cache inlines */

#define line_addr(x)	(vm_offset_t)((x) & ~CLINE_MASK)
#define page_addr(x)	(vm_offset_t)((x) & ~PAGE_MASK)

static __inline__ void mc88110_flush_data_line(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(line_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_LINE);
	}
}

static __inline__ void mc88110_flush_data_page(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(page_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_PG);
	}
}

static __inline__ void mc88110_flush_data(void)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
		set_dcmd(CMMU_DCMD_FLUSH_ALL);
	}
}

static __inline__ void mc88110_inval_data_line(vm_offset_t x)
{
	set_dsar(line_addr(x));
	set_dcmd(CMMU_DCMD_INV_LINE);
}

static __inline__ void mc88110_inval_data(void)
{
	set_dsar(0x00);
	set_dcmd(CMMU_DCMD_INV_ALL);
}

static __inline__ void mc88110_sync_data_line(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(line_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_LINE_INV);
	}
}

static __inline__ void mc88110_sync_data_page(vm_offset_t x)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(page_addr(x)); 
		set_dcmd(CMMU_DCMD_FLUSH_PG_INV);
	}
}

static __inline__ void mc88110_sync_data(void)
{
	unsigned dctl = get_dctl();
	if (dctl & CMMU_DCTL_CEN){
		set_dsar(0x00);
		set_dcmd(CMMU_DCMD_FLUSH_ALL_INV);
	}
}

static __inline__ void mc88110_inval_inst_line(vm_offset_t x)
{
	set_isar(line_addr(x));
	set_icmd(CMMU_ICMD_INV_LINE);
}

static __inline__ void mc88110_inval_inst(void)
{
	set_isar(0x00);
	set_icmd(CMMU_ICMD_INV_ITIC);
}
d234 1
@


1.1.4.5
log
@Merge in -current from about a week ago
@
text
@d146 18
a163 18
void m88110_show_apr(unsigned);
void m88110_show_sctr(unsigned);
void m88110_setup_board_config(void);
void m88110_setup_cmmu_config(void);
void m88110_cmmu_dump_config(void);
void m88110_cpu_configuration_print(int);
void m88110_cmmu_shutdown_now(void);
void m88110_cmmu_parity_enable(void);
unsigned m88110_cmmu_cpu_number(void);
unsigned m88110_cmmu_get_idr(unsigned);
void m88110_cmmu_set_sapr(unsigned);
void m88110_cmmu_remote_set_sapr(unsigned, unsigned);
void m88110_cmmu_set_uapr(unsigned);
void m88110_cmmu_set_batc_entry(unsigned, unsigned, unsigned, unsigned);
void m88110_cmmu_set_pair_batc_entry(unsigned, unsigned, unsigned);
void m88110_cmmu_flush_remote_tlb(unsigned, unsigned, vm_offset_t, int);
void m88110_cmmu_flush_tlb(unsigned, vm_offset_t, int);
void m88110_cmmu_pmap_activate(unsigned, unsigned, 
d165 8
a172 8
				  batc_template_t d_batc[BATC_MAX]);
void m88110_cmmu_flush_remote_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_cache(vm_offset_t, int);
void m88110_cmmu_flush_remote_inst_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_inst_cache(vm_offset_t, int);
void m88110_cmmu_flush_remote_data_cache(int, vm_offset_t, int);
void m88110_cmmu_flush_data_cache(vm_offset_t, int);
void m88110_dma_cachectl(vm_offset_t, int, int);
d175 4
a178 4
unsigned m88110_cmmu_get_by_mode(int, int);
void m88110_cmmu_show_translation(unsigned, unsigned, unsigned, int);
void m88110_cmmu_cache_state(unsigned, unsigned);
void m88110_show_cmmu_info(unsigned);
d181 2
a182 2
void m88110_cmmu_init(void);
int m88110_table_search(pmap_t, vm_offset_t, int, int, int);
d184 24
a207 24
void set_icmd(unsigned value);
void set_ictl(unsigned value);
void set_isar(unsigned value);
void set_isap(unsigned value);
void set_iuap(unsigned value);
void set_iir(unsigned value);
void set_ibp(unsigned value);
void set_ippu(unsigned value);
void set_ippl(unsigned value);
void set_isr(unsigned value);
void set_ilar(unsigned value);
void set_ipar(unsigned value);
void set_dcmd(unsigned value);
void set_dctl(unsigned value);
void set_dsar(unsigned value);
void set_dsap(unsigned value);
void set_duap(unsigned value);
void set_dir(unsigned value);
void set_dbp(unsigned value);
void set_dppu(unsigned value);
void set_dppl(unsigned value);
void set_dsr(unsigned value);
void set_dlar(unsigned value);
void set_dpar(unsigned value);
d210 24
a233 24
unsigned get_icmd(void);
unsigned get_ictl(void);
unsigned get_isar(void);
unsigned get_isap(void);
unsigned get_iuap(void);
unsigned get_iir(void);
unsigned get_ibp(void);
unsigned get_ippu(void);
unsigned get_ippl(void);
unsigned get_isr(void);
unsigned get_ilar(void);
unsigned get_ipar(void);
unsigned get_dcmd(void);
unsigned get_dctl(void);
unsigned get_dsar(void);
unsigned get_dsap(void);
unsigned get_duap(void);
unsigned get_dir(void);
unsigned get_dbp(void);
unsigned get_dppu(void);
unsigned get_dppl(void);
unsigned get_dsr(void);
unsigned get_dlar(void);
unsigned get_dpar(void);
@


1.1.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d6 5
d45 2
a46 2
#define CMMU_ICMD_INV_SATC       0x00a    /* Invalidate All Supervisor ATCs */
#define CMMU_ICMD_INV_UATC       0x00b    /* Invalidate All User ATCs */
d119 18
a136 8
#define BATC_512K	(0x00 << BATC_BLKSHIFT)
#define BATC_1M		(0x01 << BATC_BLKSHIFT)
#define BATC_2M		(0x03 << BATC_BLKSHIFT)
#define BATC_4M		(0x07 << BATC_BLKSHIFT)
#define BATC_8M		(0x0f << BATC_BLKSHIFT)
#define BATC_16M	(0x1f << BATC_BLKSHIFT)
#define BATC_32M	(0x3f << BATC_BLKSHIFT)
#define BATC_64M	(0x7f << BATC_BLKSHIFT)
d138 1
a138 1
#define CLINE_MASK	0x1f
d143 41
d237 2
a238 2
#define line_addr(x)	(paddr_t)((x) & ~CLINE_MASK)
#define page_addr(x)	(paddr_t)((x) & ~PAGE_MASK)
d240 1
a240 1
static __inline__ void mc88110_flush_data_line(paddr_t x)
d243 2
a244 2
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(line_addr(x));
d249 1
a249 1
static __inline__ void mc88110_flush_data_page(paddr_t x)
d252 2
a253 2
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(page_addr(x));
d261 2
a262 1
	if (dctl & CMMU_DCTL_CEN) {
d267 1
a267 1
static __inline__ void mc88110_inval_data_line(paddr_t x)
d275 1
d279 1
a279 1
static __inline__ void mc88110_sync_data_line(paddr_t x)
d282 2
a283 2
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(line_addr(x));
d288 1
a288 1
static __inline__ void mc88110_sync_data_page(paddr_t x)
d291 2
a292 2
	if (dctl & CMMU_DCTL_CEN) {
		set_dsar(page_addr(x));
d300 2
a301 1
	if (dctl & CMMU_DCTL_CEN) {
d306 1
a306 1
static __inline__ void mc88110_inval_inst_line(paddr_t x)
d314 1
d319 1
a319 1
#endif	/* __MACHINE_M88110_H__ */
@


