head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.42
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.38
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.36
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.34
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.32
	OPENBSD_5_0:1.9.0.30
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.28
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.26
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.22
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.7.0.10
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	first_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2004.04.26.14.31.11;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.23.23.27.13;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.23.10.40.27;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.16.01.17.21;	author miod;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.07.04.08.09.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.03.03.20.21.21;	author rahnds;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	97.03.03.19.07.51;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.10.54.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.54.23;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.03.03.19.31.33;	author rahnds;	state Exp;
branches;
next	;

1.3.14.1
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2001.12.05.00.39.12;	author niklas;	state Exp;
branches;
next	1.3.14.3;

1.3.14.3
date	2003.03.27.23.32.18;	author niklas;	state Exp;
branches;
next	1.3.14.4;

1.3.14.4
date	2004.06.05.23.09.50;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.37.10;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/* $OpenBSD: varargs.h,v 1.9 2004/04/26 14:31:11 miod Exp $ */
/* public domain */
#include <m88k/varargs.h>
@


1.9
log
@Fix RCSID
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.8
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.7
log
@mvme88k varargs cleanup 2/2
@
text
@d1 3
a3 13
/*	$OpenBSD: varargs.h,v 1.6 2002/03/23 10:40:27 miod Exp $	*/

#ifndef _M88K_VARARGS_H_
#define _M88K_VARARGS_H_

#define	_VARARGS_H

#include <machine/ansi.h>
#include <machine/va-m88k.h>

typedef	_BSD_VA_LIST_	va_list;

#endif	/* _M88K_VARARGS_H_ */
@


1.6
log
@Repair.
@
text
@d1 1
a1 1
/*	$OpenBSD: varargs.h,v 1.5 2001/11/16 01:17:21 miod Exp $	*/
d8 1
d11 1
a11 3
/* Define va_list from __gnuc_va_list.  */
typedef	__gnuc_va_list	va_list;
typedef	_BSD_VA_LIST_	__gnuc_va_list;
@


1.5
log
@mvme88k varargs cleanup 1/2
@
text
@d1 1
a1 1
/*	$OpenBSD: varargs.h,v 1.4 2001/07/04 08:09:23 niklas Exp $	*/
d6 2
d12 1
a12 1
typedef	_BSD_VA_LIST_	__gnuc_va_list
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: varargs.h,v 1.5 2001/11/16 01:17:21 miod Exp $	*/
a5 3
#define	_VARARGS_H

#include <machine/ansi.h>
d8 3
a10 1
typedef	_BSD_VA_LIST_	va_list;
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 2
a4 11
/* This file has local changes by MOTOROLA
Thu Sep  9 09:06:29 CDT 1993 Dale Rahn (drahn@@pacific)
	* (gstdarg.h, gvarargs.h) C-Front requires all builtins to
	be defined.  This is to insert these definitions if
	__cplusplus is defined but not using the G++ compiler.
 */
#ifndef __GNUC__
/* Use the system's macros with the system's compiler.  */
#include <varargs.h>
#else
/* Record that this is varargs.h; this turns off stdarg.h.  */
a5 22
#ifndef _VARARGS_H
#define _VARARGS_H

#ifdef __sparc__
#include <va-sparc.h>
#else
#ifdef __spur__
#include <va-spur.h>
#else
#ifdef __mips__
#include <va-mips.h>
#else
#ifdef __i860__
#include <va-i860.h>
#else
#ifdef __pyr__
#include <va-pyr.h>
#else
#ifdef __clipper__
#include <va-clipper.h>
#else
#ifdef __m88k__
a6 88
#else
#if defined(__hppa__) || defined(hp800)
#include <va-pa.h>
#else
#ifdef __i960__
#include <va-i960.h>
#else
#ifdef __alpha__
#include <va-alpha.h>
#else

#ifdef __NeXT__

/* On Next, erase any vestiges of stdarg.h.  */

#ifdef _ANSI_STDARG_H_
#define _VA_LIST_
#endif
#define _ANSI_STDARG_H_ 

#undef va_alist
#undef va_dcl
#undef va_list
#undef va_start
#undef va_end
#undef __va_rounded_size
#undef va_arg
#endif  /* __NeXT__ */

/* In GCC version 2, we want an ellipsis at the end of the declaration
   of the argument list.  GCC version 1 can't parse it.  */

#if __GNUC__ > 1
#define __va_ellipsis ...
#else
#define __va_ellipsis
#endif

/* These macros implement traditional (non-ANSI) varargs
   for GNU C.  */

#define va_alist  __builtin_va_alist
/* The ... causes current_function_varargs to be set in cc1.  */
#define va_dcl    int __builtin_va_alist; __va_ellipsis

/* Define __gnuc_va_list, just as in gstdarg.h.  */

#ifndef __GNUC_VA_LIST
#define __GNUC_VA_LIST
#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX)
typedef char *__gnuc_va_list;
#else
typedef void *__gnuc_va_list;
#endif
#endif

#define va_start(AP)  AP=(char *) &__builtin_va_alist

#define va_end(AP)

#define __va_rounded_size(TYPE)  \
  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))

#if defined (__arm__) || defined (__i386__) || defined (__ns32000__) || defined (__vax__)
/* This is for little-endian machines; small args are padded upward.  */
#define va_arg(AP, TYPE)						\
 (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),	\
  *((TYPE *) (void *) ((char *) (AP) - __va_rounded_size (TYPE))))
#else /* big-endian */
/* This is for big-endian machines; small args are padded downward.  */
#define va_arg(AP, TYPE)						\
 (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),	\
  *((TYPE *) (void *) ((char *) (AP) - ((sizeof (TYPE) < 4		\
					 ? sizeof (TYPE)		\
					 : __va_rounded_size (TYPE))))))
#endif /* big-endian */

#endif /* not alpha */
#endif /* not i960 */
#endif /* not hppa */
#endif /* not m88k */
#endif /* not clipper */
#endif /* not pyr */
#endif /* not i860 */
#endif /* not mips */
#endif /* not spur */
#endif /* not sparc */
#endif /* not _VARARGS_H */
d9 2
d12 1
a12 65
#ifdef _HIDDEN_VA_LIST  /* On OSF1, this means varargs.h is "half-loaded".  */
#undef _VA_LIST
#endif

#ifdef __svr4__
/* SVR4.2 uses _VA_LIST for an internal alias for va_list,
   so we must avoid testing it and setting it here.
   SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
   have no conflict with that.  */
#ifndef _VA_LIST_
#define _VA_LIST_
#ifdef __i860__
#ifndef _VA_LIST
#define _VA_LIST va_list
#endif
#endif /* __i860__ */
typedef __gnuc_va_list va_list;
#endif /* _VA_LIST_ */

#else /* not __svr4__ */

/* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
   But on BSD NET2 we must not test or define or undef it.
   (Note that the comments in NET 2's ansi.h
   are incorrect for _VA_LIST_--see stdio.h!)  */
#if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386BSD____)
/* The macro _VA_LIST is used in SCO Unix 3.2.  */
#ifndef _VA_LIST
/* The macro _VA_LIST_T_H is used in the Bull dpx2  */
#ifndef _VA_LIST_T_H
#define _VA_LIST_T_H
#if !(defined (__BSD_NET2__) || defined (____386BSD____))
#define _VA_LIST_
#endif
#define _VA_LIST
typedef __gnuc_va_list va_list;
#endif /* not _VA_LIST_T_H */
#endif /* not _VA_LIST */
#endif /* not _VA_LIST_ */

#endif /* not __svr4__ */

/* took this one out Nivas */
/* The next BSD release (if there is one) wants this symbol to be
   undefined instead of _VA_LIST_.  */
#ifdef _BSD_VA_LIST_
#undef _BSD_VA_LIST_
#define _BSD_VA_LIST_	__gnuc_va_list
#endif /* _BSD_VA_LIST_ */
#if defined(__cplusplus) && !defined(__GNUG__)

/* This is added to work with AT&T C++. */
extern "C" {
      char            *__builtin_next_arg(void);
      __gnuc_va_list  *__builtin_saveregs(void);
      void            *__builtin_saveregs2(int);
      int             *__builtin_argptr(void);
      int             __builtin_argsize(void);
      int             __builtin_classify_type(...);
      int             __alignof__(...);
}
#endif


#endif /* __GNUC__ */
@


1.3
log
@Cleanup after import. This also seems to bring up the current version.
@
text
@d1 2
@


1.3.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

@


1.3.14.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: varargs.h,v 1.3.14.1 2001/10/31 03:01:19 nate Exp $	*/
d3 11
a13 2
#ifndef _M88K_VARARGS_H_
#define _M88K_VARARGS_H_
d15 22
d38 88
a127 2
typedef	__gnuc_va_list	va_list;
typedef	_BSD_VA_LIST_	__gnuc_va_list
d129 65
a193 1
#endif	/* _M88K_VARARGS_H_ */
@


1.3.14.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a5 3
#define	_VARARGS_H

#include <machine/ansi.h>
d8 3
a10 1
typedef	_BSD_VA_LIST_	va_list;
@


1.3.14.4
log
@Merge with the trunk
@
text
@d1 13
a13 3
/* $OpenBSD$ */
/* public domain */
#include <m88k/varargs.h>
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@d35 1
a35 1
#include <va-m88k.h>
d169 1
d172 4
a175 3
#ifdef _BSD_VA_LIST
#undef _BSD_VA_LIST
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial 88k import; code by nivas and based on mach luna88k
@
text
@@


1.1.1.2
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@d35 1
a35 1
#include <machine/va-m88k.h>
a168 1
/* took this one out Nivas */
d171 3
a173 4
#ifdef _BSD_VA_LIST_
#undef _BSD_VA_LIST_
#define _BSD_VA_LIST_	__gnuc_va_list
#endif /* _BSD_VA_LIST_ */
@
