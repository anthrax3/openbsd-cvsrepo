head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.24.0.36
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.34
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.32
	OPENBSD_5_0:1.24.0.30
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.28
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.26
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.22
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.24
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.20
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.18
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.16
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.14
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.12
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.10
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.8
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.24.0.6
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.4
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.2
	OPENBSD_3_6_BASE:1.24
	SMP_SYNC_A:1.24
	SMP_SYNC_B:1.24
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.14.0.2
	UBC_BASE:1.14
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	first_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.25;

1.25
date	2013.05.17.22.46.28;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.26.14.31.11;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.12.07.46.17;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2004.01.11.23.52.45;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2003.10.05.20.25.08;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.17.22.22.30;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.09.06.39.02;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.03.15.57;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.26.39;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.22.17.57.11;	author smurph;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.16.23.49.46;	author miod;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2001.12.13.08.55.51;	author smurph;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.06.18.41.10;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.24.22.52.20;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.12.12.03.02;	author heko;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.12.23.00.48;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.09.05.44.40;	author smurph;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.01.03.38.18;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.14.20.25.24;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	99.09.27.20.46.19;	author smurph;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	99.02.09.06.36.27;	author smurph;	state Exp;
branches;
next	1.3;

1.3
date	97.03.03.20.21.18;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.03.03.19.07.49;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.10.54.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.54.21;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.03.03.19.31.16;	author rahnds;	state Exp;
branches;
next	;

1.5.4.1
date	2001.04.18.16.11.27;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2002.03.06.02.04.44;	author niklas;	state Exp;
branches;
next	1.5.4.5;

1.5.4.5
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.5.4.6;

1.5.4.6
date	2004.02.19.10.49.07;	author niklas;	state Exp;
branches;
next	1.5.4.7;

1.5.4.7
date	2004.06.05.23.09.50;	author niklas;	state Exp;
branches;
next	;

1.14.2.1
date	2002.01.31.22.55.18;	author niklas;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2002.06.11.03.37.10;	author art;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/* $OpenBSD: trap.h,v 1.25 2013/05/17 22:46:28 miod Exp $ */
/* public domain */
#include <machine/board.h>	/* md_interrupt_func */
#include <m88k/trap.h>
@


1.25
log
@Replace the bunch of md_* function pointers with a `struct board' containing
function pointers for all the board-specific code.

Add a bunch of `struct board' methods to cover most, if not all, of the
`per-board' logic. This allows most of the md drivers to be cleaned up and
no longer need to embed board-specific knowledge.
@
text
@d1 1
a1 1
/* $OpenBSD: trap.h,v 1.24 2004/04/26 14:31:11 miod Exp $ */
@


1.24
log
@Fix RCSID
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d3 1
@


1.23
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.22
log
@Get rid of that ugly m88100_saved_state structure, use trapframe everywhere
instead.

Allow struct reg and struct trapframe to live different lives and grow
separately. Righty now they are still the same, and code expects a trapframe
to always start with a struct reg. This may change...
@
text
@d1 3
a3 78
/*	$OpenBSD: trap.h,v 1.21 2004/01/11 23:52:45 miod Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * Trap codes
 */
#ifndef __MACHINE_TRAP_H__
#define __MACHINE_TRAP_H__

/*
 * Trap type values
 */

#define T_RESADFLT	0	/* reserved addressing fault */
#define T_PRIVINFLT	1	/* privileged instruction fault */
#define T_RESOPFLT	2	/* reserved operand fault */
#define T_INSTFLT	3	/* instruction access exception */
#define T_DATAFLT	4	/* data access exception */
#define T_MISALGNFLT	5	/* misaligned access exception */
#define T_ILLFLT	6	/* unimplemented opcode exception */
#define T_BNDFLT	7	/* bounds check violation exception */
#define T_ZERODIV	8	/* illegal divide exception */
#define T_OVFFLT	9	/* integer overflow exception */
#define T_ERRORFLT	10	/* error exception */
#define T_FPEPFLT	11	/* floating point precise exception */
#define T_FPEIFLT	12	/* floating point imprecise exception */
#define T_ASTFLT	13	/* software trap */
#define	T_KDB_ENTRY	14	/* force entry to kernel debugger */
#define T_KDB_BREAK	15	/* break point hit */
#define T_KDB_TRACE	16	/* trace */
#define T_UNKNOWNFLT	17	/* unknown exception */
#define T_SIGTRAP	18	/* generate SIGTRAP */
#define T_SIGSYS	19	/* generate SIGSYS */
#define T_STEPBPT	20	/* special breakpoint for single step */
#define T_USERBPT	21	/* user set breakpoint (for debugger) */
#define T_SYSCALL	22	/* Syscall */
#define T_NON_MASK	23	/* MVME197 Non-Maskable Interrupt */
#define	T_KDB_WATCH	24	/* watchpoint hit */
#define T_197_READ	25	/* MVME197 Data Read Miss (Software Table Searches) */
#define T_197_WRITE	26	/* MVME197 Data Write Miss (Software Table Searches) */
#define T_197_INST	27	/* MVME197 Inst ATC Miss (Software Table Searches) */
#define T_INT		28	/* interrupt exception */
#define T_USER		29	/* user mode fault */

#ifndef _LOCORE

void m88100_trap(unsigned, struct trapframe *);
void m88100_syscall(register_t, struct trapframe *);

void m88110_trap(unsigned, struct trapframe *);
void m88110_syscall(register_t, struct trapframe *);

#endif /* _LOCORE */

#endif /* __MACHINE_TRAP_H__ */
@


1.21
log
@Mark more code as dependent upon option PTRACE, and slight cleaning while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.20 2003/10/05 20:25:08 miod Exp $ */
d70 2
a71 2
void m88100_trap(unsigned, struct m88100_saved_state *);
void m88100_syscall(register_t, struct m88100_saved_state *);
d73 2
a74 2
void m88110_trap(unsigned, struct m88100_saved_state *);
void m88110_syscall(register_t, struct m88100_saved_state *);
a78 1

@


1.20
log
@De-register
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.19 2003/09/17 22:22:30 miod Exp $ */
a39 3

/* End of known constants */

a68 12

void panictrap(int, struct m88100_saved_state *);
unsigned ss_get_value(struct proc *, unsigned, int);
int ss_put_value(struct proc *, unsigned, unsigned, int);
unsigned ss_branch_taken(unsigned, unsigned,
			 unsigned (*func)(unsigned int, struct trapframe *),
			 struct trapframe *);  /* 'opaque' */
unsigned ss_getreg_val(unsigned, struct trapframe *);
int ss_inst_branch(unsigned);
int ss_inst_delayed(unsigned);
unsigned ss_next_instr_address(struct proc *, unsigned, unsigned);
int cpu_singlestep(struct proc *);
@


1.19
log
@More cleaning of the exception handling code, and collateral damage:
- always give C routines invoked by the assembly code some breathing room on
  the stack
- merge error and reset exception handlers -- gets us rid of error_fault()
  and error_reset().
- remove all references to SR0 and "threads" inherited from Mach. In fact,
  we do not use SR0 at all now.
- only use double load and stores instructions when we are 200% sure we are
  accessing a correctly aligned area. I am not fond of unaligned kernel
  accesses, and forcing every pgb to be aligned on an 8 byte boundary is
  gross.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.18 2003/09/09 06:39:02 miod Exp $ */
d83 1
a83 1
int cpu_singlestep(register struct proc *);
@


1.18
log
@Remove DDB conditionals and always define T_KDB_*
@
text
@d1 2
a2 2
/*	$OpenBSD: trap.h,v 1.17 2002/03/14 03:15:57 millert Exp $ */
/* 
d6 1
a6 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d18 1
a18 1
 * 
d23 2
a24 2
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon 
d28 1
a28 1
 * Trap codes 
d72 1
a73 3
void test_trap(struct m88100_saved_state *);
void error_fault(struct m88100_saved_state *);
void error_reset(struct m88100_saved_state *);
d76 1
a76 1
unsigned ss_branch_taken(unsigned, unsigned, 
a84 1
#ifdef M88100
a86 1
#endif /* M88100 */
a87 1
#ifdef M88110
a89 1
#endif /* M88110 */
@


1.17
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.16 2002/03/14 01:26:39 millert Exp $ */
a53 1
#if	DDB
a56 1
#endif /* DDB */
a63 1
#if	DDB
a64 1
#endif /* DDB */
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.15 2001/12/22 17:57:11 smurph Exp $ */
d82 3
a84 3
unsigned ss_branch_taken __P((unsigned, unsigned, 
			      unsigned (*func)(unsigned int, struct trapframe *),
			      struct trapframe *));  /* 'opaque' */
@


1.15
log
@change function names to reflect cpu type instead of board type.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.14 2001/12/16 23:49:46 miod Exp $ */
d76 6
a81 6
void panictrap		__P((int, struct m88100_saved_state *));
void test_trap		__P((struct m88100_saved_state *));
void error_fault	__P((struct m88100_saved_state *));
void error_reset	__P((struct m88100_saved_state *));
unsigned ss_get_value	__P((struct proc *, unsigned, int));
int ss_put_value	__P((struct proc *, unsigned, unsigned, int));
d83 1
a83 1
			      unsigned (*func) __P((unsigned int, struct trapframe *)),
d85 5
a89 5
unsigned ss_getreg_val	__P((unsigned, struct trapframe *));
int ss_inst_branch	__P((unsigned));
int ss_inst_delayed	__P((unsigned));
unsigned ss_next_instr_address __P((struct proc *, unsigned, unsigned));
int cpu_singlestep	__P((register struct proc *));
d92 2
a93 2
void m88100_trap	__P((unsigned, struct m88100_saved_state *));
void m88100_syscall	__P((register_t, struct m88100_saved_state *));
d97 2
a98 2
void m88110_trap	__P((unsigned, struct m88100_saved_state *));
void m88110_syscall	__P((register_t, struct m88100_saved_state *));
@


1.14
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.12 2001/11/06 18:41:10 art Exp $ */
d76 24
a99 23
void panictrap(int type, struct m88100_saved_state *frame);
void test_trap(struct m88100_saved_state *frame);
void error_fault(struct m88100_saved_state *frame);
void error_reset(struct m88100_saved_state *frame);
unsigned ss_get_value(struct proc *p, unsigned addr, int size);
int ss_put_value(struct proc *p, unsigned addr, unsigned value, int size);
unsigned ss_branch_taken(unsigned inst, unsigned pc, 
			 unsigned (*func)(unsigned int, struct trapframe *),
			 struct trapframe *func_data);  /* 'opaque' */
unsigned ss_getreg_val(unsigned regno, struct trapframe *tf);
int ss_inst_branch(unsigned ins);
int ss_inst_delayed(unsigned ins);
unsigned ss_next_instr_address(struct proc *p, unsigned pc, unsigned delay_slot);
int cpu_singlestep(register struct proc *p);

#if defined(MVME187) || defined(MVME188)
void syscall(register_t code, struct m88100_saved_state *tf);
void trap18x(unsigned type, struct m88100_saved_state *frame);
#endif /* defined(MVME187) || defined(MVME188) */
#ifdef MVME197
void m197_syscall(register_t code, struct m88100_saved_state *tf);
void trap197(unsigned type, struct m88100_saved_state *frame);
#endif /* MVME197 */
@


1.14.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.15 2001/12/22 17:57:11 smurph Exp $ */
d76 23
a98 24
void panictrap		__P((int, struct m88100_saved_state *));
void test_trap		__P((struct m88100_saved_state *));
void error_fault	__P((struct m88100_saved_state *));
void error_reset	__P((struct m88100_saved_state *));
unsigned ss_get_value	__P((struct proc *, unsigned, int));
int ss_put_value	__P((struct proc *, unsigned, unsigned, int));
unsigned ss_branch_taken __P((unsigned, unsigned, 
			      unsigned (*func) __P((unsigned int, struct trapframe *)),
			      struct trapframe *));  /* 'opaque' */
unsigned ss_getreg_val	__P((unsigned, struct trapframe *));
int ss_inst_branch	__P((unsigned));
int ss_inst_delayed	__P((unsigned));
unsigned ss_next_instr_address __P((struct proc *, unsigned, unsigned));
int cpu_singlestep	__P((register struct proc *));

#ifdef M88100
void m88100_trap	__P((unsigned, struct m88100_saved_state *));
void m88100_syscall	__P((register_t, struct m88100_saved_state *));
#endif /* M88100 */

#ifdef M88110
void m88110_trap	__P((unsigned, struct m88100_saved_state *));
void m88110_syscall	__P((register_t, struct m88100_saved_state *));
#endif /* M88110 */
@


1.14.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.14.2.1 2002/01/31 22:55:18 niklas Exp $ */
d76 14
a89 14
void panictrap(int, struct m88100_saved_state *);
void test_trap(struct m88100_saved_state *);
void error_fault(struct m88100_saved_state *);
void error_reset(struct m88100_saved_state *);
unsigned ss_get_value(struct proc *, unsigned, int);
int ss_put_value(struct proc *, unsigned, unsigned, int);
unsigned ss_branch_taken(unsigned, unsigned, 
			 unsigned (*func)(unsigned int, struct trapframe *),
			 struct trapframe *);  /* 'opaque' */
unsigned ss_getreg_val(unsigned, struct trapframe *);
int ss_inst_branch(unsigned);
int ss_inst_delayed(unsigned);
unsigned ss_next_instr_address(struct proc *, unsigned, unsigned);
int cpu_singlestep(register struct proc *);
d92 2
a93 2
void m88100_trap(unsigned, struct m88100_saved_state *);
void m88100_syscall(register_t, struct m88100_saved_state *);
d97 2
a98 2
void m88110_trap(unsigned, struct m88100_saved_state *);
void m88110_syscall(register_t, struct m88100_saved_state *);
@


1.13
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@d91 8
a98 13
#ifdef M88100
void m88100_trap __P((unsigned, struct m88100_saved_state *));
void m88100_syscall __P((register_t, struct m88100_saved_state *));
#endif /* M88100 */

#ifdef M88110
void m88110_trap __P((unsigned, struct m88100_saved_state *));
void m88110_syscall __P((register_t, struct m88100_saved_state *));
#endif /* M88110 */

/* machine dependant trap and syscall macros */
#define trap(type, frame)	(*md.interrupt_func)(type, frame)
#define syscall(code, frame)	(*md.syscall_func)(code, frame)
@


1.12
log
@Let fork1, uvm_fork, and cpu_fork take a function/argument pair as argument,
instead of doing fork1, cpu_set_kpc. This lets us retire cpu_set_kpc and
avoid a multiprocessor race.

This commit breaks vax because it doesn't look like any other arch, someone
working on vax might want to look at this and try to adapt the code to be
more like the rest of the world.

Idea and uvm parts from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.11 2001/08/24 22:52:20 miod Exp $ */
d91 13
a103 8
#if defined(MVME187) || defined(MVME188)
void syscall(register_t code, struct m88100_saved_state *tf);
void trap18x(unsigned type, struct m88100_saved_state *frame);
#endif /* defined(MVME187) || defined(MVME188) */
#ifdef MVME197
void m197_syscall(register_t code, struct m88100_saved_state *tf);
void trap197(unsigned type, struct m88100_saved_state *frame);
#endif /* MVME197 */
@


1.11
log
@Rename the trap() symbols with more insightful names. This forces us
to check all trap() invocations in the sources and fix them, thus
improving the chances of 197-kernels to live.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.10 2001/08/12 12:03:02 heko Exp $ */
a79 1
void child_return(struct proc *p);
@


1.10
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.9 2001/03/12 23:00:48 miod Exp $ */
a76 1
void test_trap2(int num, int m197);
a92 1
void trap(unsigned type, struct m88100_saved_state *frame);
d94 1
a95 1

a96 1
void trap2(unsigned type, struct m88100_saved_state *frame);
d98 1
d100 1
@


1.9
log
@Remove dead code related to soft interrupts.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.8 2001/03/09 05:44:40 smurph Exp $ */
d104 1
a104 1
#endif __MACHINE_TRAP_H__
@


1.8
log
@kernel will compile with -Werror.  Added intr.h
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.7 2001/02/01 03:38:18 smurph Exp $ */
d75 1
a75 1
#ifndef ASSEMBLER
a81 2
u_long allocate_sir(void (*proc)(), void *arg);
void init_sir();
d102 1
a102 1
#endif /* ASSEMBLER */
@


1.7
log
@Major changes to get MVME188 working.  More header and code cleanups.  The
kernel is tested on MVME188A/2P256 and MVME188A/1P64.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.6 2001/01/14 20:25:24 smurph Exp $ */
d74 31
@


1.6
log
@Complete move to UVM virtual memory system.  More header fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.5 1999/09/27 20:46:19 smurph Exp $ */
d37 3
a39 3
#define T_RESADFLT	0		/* reserved addressing fault */
#define T_PRIVINFLT	1		/* privileged instruction fault */
#define T_RESOPFLT	2		/* reserved operand fault */
d43 11
a53 11
#define T_INSTFLT    3		/* instruction access exception */
#define T_DATAFLT    4		/* data access exception */
#define T_MISALGNFLT 5		/* misaligned access exception */
#define T_ILLFLT     6		/* unimplemented opcode exception */
#define T_BNDFLT     7		/* bounds check violation exception */
#define T_ZERODIV    8		/* illegal divide exception */
#define T_OVFFLT     9		/* integer overflow exception */
#define T_ERRORFLT	10		/* error exception */
#define T_FPEPFLT    11		/* floating point precise exception */
#define T_FPEIFLT    12		/* floating point imprecise exception */
#define T_ASTFLT	   13		/* software trap */
d55 3
a57 3
#define	T_KDB_ENTRY	14		/* force entry to kernel debugger */
#define T_KDB_BREAK	15		/* break point hit */
#define T_KDB_TRACE	16		/* trace */
d59 7
a65 7
#define T_UNKNOWNFLT	17		/* unknown exception */
#define T_SIGTRAP	   18		/* generate SIGTRAP */
#define T_SIGSYS	   19		/* generate SIGSYS */
#define T_STEPBPT	   20		/* special breakpoint for single step */
#define T_USERBPT	   21		/* user set breakpoint (for debugger) */
#define T_SYSCALL	   22		/* Syscall */
#define T_NON_MASK	23		/* MVME197 Non-Maskable Interrupt */
d67 1
a67 1
#define	T_KDB_WATCH	24		/* watchpoint hit */
d69 5
a73 5
#define T_197_READ   25    /* MVME197 Data Read Miss (Software Table Searches) */
#define T_197_WRITE  26    /* MVME197 Data Write Miss (Software Table Searches) */
#define T_197_INST   27    /* MVME197 Inst ATC Miss (Software Table Searches) */
#define T_INT        28    /* interrupt exception */
#define T_USER       29		/* user mode fault */
@


1.5
log
@Adding support for MVME188 and MVME197
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.4 1999/02/09 06:36:27 smurph Exp $ */
d30 2
a31 3

#ifndef _M88K_TRAP_H 
#define _M88K_TRAP_H  1
d75 1
a75 1
#endif  _M88K_TRAP_H 
@


1.5.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.9 2001/03/12 23:00:48 miod Exp $ */
d30 3
a32 2
#ifndef __MACHINE_TRAP_H__
#define __MACHINE_TRAP_H__
d38 3
a40 3
#define T_RESADFLT	0	/* reserved addressing fault */
#define T_PRIVINFLT	1	/* privileged instruction fault */
#define T_RESOPFLT	2	/* reserved operand fault */
d44 11
a54 11
#define T_INSTFLT	3	/* instruction access exception */
#define T_DATAFLT	4	/* data access exception */
#define T_MISALGNFLT	5	/* misaligned access exception */
#define T_ILLFLT	6	/* unimplemented opcode exception */
#define T_BNDFLT	7	/* bounds check violation exception */
#define T_ZERODIV	8	/* illegal divide exception */
#define T_OVFFLT	9	/* integer overflow exception */
#define T_ERRORFLT	10	/* error exception */
#define T_FPEPFLT	11	/* floating point precise exception */
#define T_FPEIFLT	12	/* floating point imprecise exception */
#define T_ASTFLT	13	/* software trap */
d56 3
a58 3
#define	T_KDB_ENTRY	14	/* force entry to kernel debugger */
#define T_KDB_BREAK	15	/* break point hit */
#define T_KDB_TRACE	16	/* trace */
d60 7
a66 7
#define T_UNKNOWNFLT	17	/* unknown exception */
#define T_SIGTRAP	18	/* generate SIGTRAP */
#define T_SIGSYS	19	/* generate SIGSYS */
#define T_STEPBPT	20	/* special breakpoint for single step */
#define T_USERBPT	21	/* user set breakpoint (for debugger) */
#define T_SYSCALL	22	/* Syscall */
#define T_NON_MASK	23	/* MVME197 Non-Maskable Interrupt */
d68 1
a68 1
#define	T_KDB_WATCH	24	/* watchpoint hit */
d70 5
a74 34
#define T_197_READ	25	/* MVME197 Data Read Miss (Software Table Searches) */
#define T_197_WRITE	26	/* MVME197 Data Write Miss (Software Table Searches) */
#define T_197_INST	27	/* MVME197 Inst ATC Miss (Software Table Searches) */
#define T_INT		28	/* interrupt exception */
#define T_USER		29	/* user mode fault */

#ifndef _LOCORE
void panictrap(int type, struct m88100_saved_state *frame);
void test_trap2(int num, int m197);
void test_trap(struct m88100_saved_state *frame);
void error_fault(struct m88100_saved_state *frame);
void error_reset(struct m88100_saved_state *frame);
void child_return(struct proc *p);
unsigned ss_get_value(struct proc *p, unsigned addr, int size);
int ss_put_value(struct proc *p, unsigned addr, unsigned value, int size);
unsigned ss_branch_taken(unsigned inst, unsigned pc, 
			 unsigned (*func)(unsigned int, struct trapframe *),
			 struct trapframe *func_data);  /* 'opaque' */
unsigned ss_getreg_val(unsigned regno, struct trapframe *tf);
int ss_inst_branch(unsigned ins);
int ss_inst_delayed(unsigned ins);
unsigned ss_next_instr_address(struct proc *p, unsigned pc, unsigned delay_slot);
int cpu_singlestep(register struct proc *p);

#if defined(MVME187) || defined(MVME188)
void trap(unsigned type, struct m88100_saved_state *frame);
void syscall(register_t code, struct m88100_saved_state *tf);
#endif /* defined(MVME187) || defined(MVME188) */

#ifdef MVME197
void trap2(unsigned type, struct m88100_saved_state *frame);
void m197_syscall(register_t code, struct m88100_saved_state *tf);
#endif /* MVME197 */
#endif /* _LOCORE */
d76 1
a76 1
#endif __MACHINE_TRAP_H__
@


1.5.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.5.4.1 2001/04/18 16:11:27 niklas Exp $ */
d77 1
d94 1
a95 1
void trap18x(unsigned type, struct m88100_saved_state *frame);
d97 1
d99 1
a100 1
void trap197(unsigned type, struct m88100_saved_state *frame);
a101 1

d104 1
a104 1
#endif /* __MACHINE_TRAP_H__ */
@


1.5.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d80 1
@


1.5.4.4
log
@Merge in trunk
@
text
@d76 14
a89 14
void panictrap		__P((int, struct m88100_saved_state *));
void test_trap		__P((struct m88100_saved_state *));
void error_fault	__P((struct m88100_saved_state *));
void error_reset	__P((struct m88100_saved_state *));
unsigned ss_get_value	__P((struct proc *, unsigned, int));
int ss_put_value	__P((struct proc *, unsigned, unsigned, int));
unsigned ss_branch_taken __P((unsigned, unsigned, 
			      unsigned (*func) __P((unsigned int, struct trapframe *)),
			      struct trapframe *));  /* 'opaque' */
unsigned ss_getreg_val	__P((unsigned, struct trapframe *));
int ss_inst_branch	__P((unsigned));
int ss_inst_delayed	__P((unsigned));
unsigned ss_next_instr_address __P((struct proc *, unsigned, unsigned));
int cpu_singlestep	__P((register struct proc *));
d91 8
a98 9
#ifdef M88100
void m88100_trap	__P((unsigned, struct m88100_saved_state *));
void m88100_syscall	__P((register_t, struct m88100_saved_state *));
#endif /* M88100 */

#ifdef M88110
void m88110_trap	__P((unsigned, struct m88100_saved_state *));
void m88110_syscall	__P((register_t, struct m88100_saved_state *));
#endif /* M88110 */
@


1.5.4.5
log
@Merge in -current from about a week ago
@
text
@d76 14
a89 14
void panictrap(int, struct m88100_saved_state *);
void test_trap(struct m88100_saved_state *);
void error_fault(struct m88100_saved_state *);
void error_reset(struct m88100_saved_state *);
unsigned ss_get_value(struct proc *, unsigned, int);
int ss_put_value(struct proc *, unsigned, unsigned, int);
unsigned ss_branch_taken(unsigned, unsigned, 
			 unsigned (*func)(unsigned int, struct trapframe *),
			 struct trapframe *);  /* 'opaque' */
unsigned ss_getreg_val(unsigned, struct trapframe *);
int ss_inst_branch(unsigned);
int ss_inst_delayed(unsigned);
unsigned ss_next_instr_address(struct proc *, unsigned, unsigned);
int cpu_singlestep(register struct proc *);
d92 2
a93 2
void m88100_trap(unsigned, struct m88100_saved_state *);
void m88100_syscall(register_t, struct m88100_saved_state *);
d97 2
a98 2
void m88110_trap(unsigned, struct m88100_saved_state *);
void m88110_syscall(register_t, struct m88100_saved_state *);
@


1.5.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
/*
d6 1
a6 1
 *
d12 1
a12 1
 *
d16 1
a16 1
 *
d18 1
a18 1
 *
d23 2
a24 2
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
d28 1
a28 1
 * Trap codes
d40 3
d54 1
d58 1
d66 1
d68 1
d76 24
a99 6

void m88100_trap(unsigned, struct trapframe *);
void m88100_syscall(register_t, struct trapframe *);

void m88110_trap(unsigned, struct trapframe *);
void m88110_syscall(register_t, struct trapframe *);
d104 1
@


1.5.4.7
log
@Merge with the trunk
@
text
@d1 78
a78 3
/* $OpenBSD$ */
/* public domain */
#include <m88k/trap.h>
@


1.4
log
@Added kernel support for user debugging.  Fixed file ID's
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.1 1998/12/15 04:45:50 smurph Exp $ */
d44 7
a50 7
#define T_INSTFLT	3		/* instruction access exception */
#define T_DATAFLT	4		/* data access exception */
#define T_MISALGNFLT	5		/* misaligned access exception */
#define T_ILLFLT	6		/* unimplemented opcode exception */
#define T_BNDFLT	7		/* bounds check violation exception */
#define T_ZERODIV	8		/* illegal divide exception */
#define T_OVFFLT	9		/* integer overflow exception */
d52 3
a54 3
#define T_FPEPFLT	11		/* floating point precise exception */
#define T_FPEIFLT	12		/* floating point imprecise exception */
#define	T_ASTFLT	13		/* software trap */
d61 6
a66 6
#define T_SIGTRAP	18		/* generate SIGTRAP */
#define T_SIGSYS	19		/* generate SIGSYS */
#define	T_STEPBPT	20		/* special breakpoint for single step */
#define	T_USERBPT	21		/* user set breakpoint (for debugger) */
#define	T_SYSCALL	22		/* Syscall */
#define T_USER		23		/* user mode fault */
d70 5
@


1.3
log
@Cleanup after import. This also seems to bring up the current version.
@
text
@d1 1
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@a26 15
 * HISTORY
 * $Log: trap.h,v $
 * Revision 1.1  1995/10/18 10:54:21  deraadt
 * Initial revision
 *
 * Revision 2.3  92/08/03  17:52:42  jfriedl
 * 	watchpoint support
 * 	[92/07/31            jfriedl]
 * 
 * Revision 2.2  92/02/18  18:03:58  elf
 * 	Liberated.
 * 	[92/01/30            danner]
 * 
 */
/*
@


1.1
log
@Initial revision
@
text
@d28 4
a31 1
 * $Log:	trap.h,v $
@


1.1.1.1
log
@initial 88k import; code by nivas and based on mach luna88k
@
text
@@


1.1.1.2
log
@Third try at importing the mvme88k port. This is a working kernel
from nivas.
Userland and compiler still need to be worked on.
Make certain what directory the import is done from.
@
text
@d27 12
@
