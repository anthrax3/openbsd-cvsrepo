head	1.14;
access;
symbols
	OPENBSD_5_2:1.13.0.34
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.32
	OPENBSD_5_0:1.13.0.30
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.28
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.26
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.22
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.24
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.20
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.18
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.16
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.14
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.12
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	first_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2012.12.04.21.06.51;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2004.04.26.14.31.11;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.26.20.11.14;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.01.07.44.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.04.00.13.52;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.03.01.46.10;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.25.19.40.30;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.23.23.27.13;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.26.14.31.07;	author miod;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.07.04.08.09.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.03.03.20.21.20;	author rahnds;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	97.03.03.19.07.50;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.10.54.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.54.23;	author deraadt;	state Exp;
branches;
next	;

1.3.14.1
date	2001.10.31.03.01.19;	author nate;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2003.03.27.23.32.18;	author niklas;	state Exp;
branches;
next	1.3.14.3;

1.3.14.3
date	2004.02.19.10.49.07;	author niklas;	state Exp;
branches;
next	1.3.14.4;

1.3.14.4
date	2004.06.05.23.09.50;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.37.10;	author art;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.05.19.21.45.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove the gcc 2 m88k varargs logic. You gave me a lot of trouble and no pony,
therefore I don't mind you rotting in the Attic for eternity (scheduled
to start on the 21st anyway, according to MayaBSD developers).
reminded by deraadt@@
@
text
@/* $OpenBSD: va-m88k.h,v 1.13 2004/04/26 14:31:11 miod Exp $ */
/* public domain */
#include <m88k/va-m88k.h>
@


1.13
log
@Fix RCSID
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.12
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.11
log
@sign mismatch correction, from miod
@
text
@d1 3
a3 82
/*	$OpenBSD: va-m88k.h,v 1.10 2003/08/01 07:44:05 miod Exp $	*/

/* This file has local changes by MOTOROLA
Thu Sep  9 09:06:29 CDT 1993 Dale Rahn (drahn@@pacific)
	* Due to C-Front's usage of __alignof__ builtin the
	usage of it must be changed to have an object of that type
	as the argument not just the type.
 */
/* GNU C varargs support for the Motorola 88100  */

/* Define __gnuc_va_list.  */

#ifndef __GNUC_VA_LIST
#define __GNUC_VA_LIST

typedef struct __va_list_tag {
	unsigned int  __va_arg;		/* argument number */
	unsigned int *__va_stk;		/* start of args passed on stack */
	unsigned int *__va_reg;		/* start of args passed in regs */
} __va_list[1], __gnuc_va_list[1];

#endif /* not __GNUC_VA_LIST */

/* If this is for internal libc use, don't define anything but
   __gnuc_va_list.  */
#if defined (_STDARG_H) || defined (_VARARGS_H)

#define __va_start_common(AP,FAKE) \
__extension__ ({							\
   (AP) = (struct __va_list_tag *)__builtin_alloca(sizeof(__gnuc_va_list)); \
  __builtin_memcpy ((AP), __builtin_saveregs (), sizeof(__gnuc_va_list)); \
  })

#ifdef _STDARG_H /* stdarg.h support */

/* Calling __builtin_next_arg gives the proper error message if LASTARG is
   not indeed the last argument.  */
#define va_start(AP,LASTARG) \
  (__builtin_next_arg (LASTARG), __va_start_common (AP, 0))

#else /* varargs.h support */

#define va_start(AP) __va_start_common (AP, 1)
#define va_alist __va_1st_arg
#define va_dcl register int va_alist; ...

#endif /* _STDARG_H */

#define __va_reg_p(TYPE) \
  (__builtin_classify_type(*(TYPE *)0) < 12 \
   ? sizeof(TYPE) <= 8 : sizeof(TYPE) == 4 && __alignof__(*(TYPE *)0) == 4)

#define	__va_size(TYPE) ((sizeof(TYPE) + 3) >> 2)

/* We cast to void * and then to TYPE * because this avoids
   a warning about increasing the alignment requirement.  */
#define va_arg(AP,TYPE)							   \
  ( (AP)->__va_arg = (((AP)->__va_arg + (1 << (__alignof__(*(TYPE *)0) >> 3)) - 1) \
		     & ~((1 << (__alignof__(*(TYPE *)0) >> 3)) - 1))	   \
    + __va_size(TYPE),							   \
    *((TYPE *) (void *) ((__va_reg_p(TYPE)				   \
			  && (AP)->__va_arg < 8 + __va_size(TYPE)	   \
			  ? (AP)->__va_reg : (AP)->__va_stk)		   \
			 + ((AP)->__va_arg - __va_size(TYPE)))))

#define va_end(AP)

/* Copy __gnuc_va_list into another variable of this type.  */
#define __va_copy(dest, src) \
__extension__ ({ \
	(dest) =  \
	   (struct __va_list_tag *)__builtin_alloca(sizeof(__gnuc_va_list)); \
	*(dest) = *(src);\
  })

#if !defined(_ANSI_SOURCE) && \
    (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
	defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) >= 199901L)
#define va_copy(dest, src) __va_copy(dest, src)
#endif

#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */
@


1.10
log
@Even better varargs code, inspired by and more closer to the powerpc code,
necessary for proper gcc 2.95 operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.9 2003/01/04 00:13:52 miod Exp $	*/
d17 3
a19 3
	int  __va_arg;		/* argument number */
	int *__va_stk;		/* start of args passed on stack */
	int *__va_reg;		/* start of args passed in regs */
@


1.9
log
@A va_copy macro without drugs inside. Shupid miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.8 2003/01/03 01:46:10 miod Exp $	*/
d16 1
a16 1
typedef struct {
d20 1
a20 3
} __va_list;

typedef __va_list __gnuc_va_list;
d29 4
a32 1
    (AP) = *(__gnuc_va_list *)__builtin_saveregs()
d58 1
a58 1
  ( (AP).__va_arg = (((AP).__va_arg + (1 << (__alignof__(*(TYPE *)0) >> 3)) - 1) \
d62 3
a64 3
			  && (AP).__va_arg < 8 + __va_size(TYPE)	   \
			  ? (AP).__va_reg : (AP).__va_stk)		   \
			 + ((AP).__va_arg - __va_size(TYPE)))))
d69 6
a74 1
#define __va_copy(dest, src) 	(dest) = (src)
@


1.8
log
@Provide a simple va_copy() implementation.
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.7 2002/03/25 19:40:30 miod Exp $	*/
d68 1
a68 10
#if __GNUC_MAJOR__ > 2 || __GNUC_MINOR > 8
#define __va_copy(dest, src) \
  __extension__ ({ \
    (dest) =  \
      (__gnuc_va_list *)__builtin_alloca(sizeof(__gnuc_va_list)); \
    *(dest) = *(src);\
  })
#else
#define __va_copy(dest, src) *(dest) = *(src)
#endif
d71 1
a71 1
    (defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
@


1.7
log
@Gremlins always escape when you commit from the bad tree. An extra semicolon
this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.6 2002/03/23 23:27:13 miod Exp $	*/
d66 18
@


1.6
log
@mvme88k varargs cleanup 2/2
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.5 2001/08/26 14:31:07 miod Exp $	*/
d31 1
a31 1
    (AP) = *(__gnuc_va_list *)__builtin_saveregs();
d38 1
a38 1
  (__builtin_next_arg (LASTARG), __va_start_common(AP, 0))
@


1.5
log
@Add prototypes, fix compilation warnings, random style fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.4 2001/07/04 08:09:23 niklas Exp $	*/
d16 8
a23 6
typedef struct
{
  int  __va_arg;		/* argument number */
  int *__va_stk;		/* start of args passed on stack */
  int *__va_reg;		/* start of args passed in regs */
} __gnuc_va_list;
d30 3
d35 4
a38 1
#define va_start(AP,LASTARG) ((AP) = *(__gnuc_va_list *)__builtin_saveregs())
d42 1
a42 1
#define va_start(AP) ((AP) = *(__gnuc_va_list *)__builtin_saveregs())
d44 1
a44 1
#define va_dcl register int va_alist;
a46 14

/* Avoid trouble between this file and _int_varargs.h under DG/UX.  This file
   can be included by <stdio.h> and others and provides definitions of
   __va_size and __va_reg_p and  a va_list typedef.  Avoid defining va_list
   again with _VA_LIST.  */
#ifdef __INT_VARARGS_H
#undef __va_size
#undef __va_reg_p
#define __gnuc_va_list va_list
#define _VA_LIST
#else
/* Similarly, if this gets included first, do nothing in _int_varargs.h.  */
#define __INT_VARARGS_H
#endif
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: va-m88k.h,v 1.5 2001/08/26 14:31:07 miod Exp $	*/
d16 6
a21 8
typedef struct {
	int  __va_arg;		/* argument number */
	int *__va_stk;		/* start of args passed on stack */
	int *__va_reg;		/* start of args passed in regs */
} __va_list;

typedef __va_list __gnuc_va_list;

a27 3
#define __va_start_common(AP,FAKE) \
    (AP) = *(__gnuc_va_list *)__builtin_saveregs()

d30 1
a30 4
/* Calling __builtin_next_arg gives the proper error message if LASTARG is
   not indeed the last argument.  */
#define va_start(AP,LASTARG) \
  (__builtin_next_arg (LASTARG), __va_start_common (AP, 0))
d34 1
a34 1
#define va_start(AP) __va_start_common (AP, 1)
d36 1
a36 1
#define va_dcl register int va_alist; ...
d39 14
@


1.5.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a65 9

/* Copy __gnuc_va_list into another variable of this type.  */
#define __va_copy(dest, src) 	(dest) = (src)

#if !defined(_ANSI_SOURCE) && \
    (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
	defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) >= 199901L)
#define va_copy(dest, src) __va_copy(dest, src)
#endif
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a29 1
#if __GNUC__ > 1 /* GCC 2.0 and beyond */
a30 6
#else
#define va_start(AP,LASTARG) \
  ( (AP).__va_reg = (int *) __builtin_saveregs2(0), \
    (AP).__va_stk = (int *) __builtin_argptr(), \
    (AP).__va_arg = (int) (__builtin_argsize() + 3) / 4 )
#endif
a33 1
#if __GNUC__ > 1 /* GCC 2.0 and beyond */
a34 6
#else
#define va_start(AP) \
  ( (AP).__va_reg = (int *) __builtin_saveregs2(1), \
    (AP).__va_stk = (int *) __builtin_argptr(), \
    (AP).__va_arg = (int) (__builtin_argsize() - 4 + 3) / 4 )
#endif
@


1.3
log
@Cleanup after import. This also seems to bring up the current version.
@
text
@d1 2
@


1.3.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 2
/*	$OpenBSD$	*/

d28 1
d30 6
d39 1
d41 6
@


1.3.14.2
log
@Sync the SMP branch with 3.3
@
text
@d16 6
a21 8
typedef struct {
	int  __va_arg;		/* argument number */
	int *__va_stk;		/* start of args passed on stack */
	int *__va_reg;		/* start of args passed in regs */
} __va_list;

typedef __va_list __gnuc_va_list;

a27 3
#define __va_start_common(AP,FAKE) \
    (AP) = *(__gnuc_va_list *)__builtin_saveregs()

d30 1
a30 4
/* Calling __builtin_next_arg gives the proper error message if LASTARG is
   not indeed the last argument.  */
#define va_start(AP,LASTARG) \
  (__builtin_next_arg (LASTARG), __va_start_common (AP, 0))
d34 1
a34 1
#define va_start(AP) __va_start_common (AP, 1)
d36 1
a36 1
#define va_dcl register int va_alist; ...
d40 14
a71 9

/* Copy __gnuc_va_list into another variable of this type.  */
#define __va_copy(dest, src) 	(dest) = (src)

#if !defined(_ANSI_SOURCE) && \
    (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) || \
	defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) >= 199901L)
#define va_copy(dest, src) __va_copy(dest, src)
#endif
@


1.3.14.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d16 7
a22 5
typedef struct __va_list_tag {
	unsigned int  __va_arg;		/* argument number */
	unsigned int *__va_stk;		/* start of args passed on stack */
	unsigned int *__va_reg;		/* start of args passed in regs */
} __va_list[1], __gnuc_va_list[1];
d31 1
a31 4
__extension__ ({							\
   (AP) = (struct __va_list_tag *)__builtin_alloca(sizeof(__gnuc_va_list)); \
  __builtin_memcpy ((AP), __builtin_saveregs (), sizeof(__gnuc_va_list)); \
  })
d57 1
a57 1
  ( (AP)->__va_arg = (((AP)->__va_arg + (1 << (__alignof__(*(TYPE *)0) >> 3)) - 1) \
d61 3
a63 3
			  && (AP)->__va_arg < 8 + __va_size(TYPE)	   \
			  ? (AP)->__va_reg : (AP)->__va_stk)		   \
			 + ((AP)->__va_arg - __va_size(TYPE)))))
d68 1
a68 6
#define __va_copy(dest, src) \
__extension__ ({ \
	(dest) =  \
	   (struct __va_list_tag *)__builtin_alloca(sizeof(__gnuc_va_list)); \
	*(dest) = *(src);\
  })
@


1.3.14.4
log
@Merge with the trunk
@
text
@d1 82
a82 3
/* $OpenBSD$ */
/* public domain */
#include <m88k/va-m88k.h>
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial 88k import; code by nivas and based on mach luna88k
@
text
@@
