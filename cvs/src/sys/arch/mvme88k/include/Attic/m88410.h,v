head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.20
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.16
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.18
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	SMP:1.4.0.2
	UBC_SYNC_B:1.4
	UBC:1.2.0.2
	UBC_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.15;

1.15
date	2013.02.17.18.10.01;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2010.12.31.20.54.21;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.12.20.36.32;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.30.16.42.37;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.24.19.51.48;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.14.20.16.51;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.12.13.14.56;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.05.20.27.46;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.20.20.33.44;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.17.01.47.10;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.22.08.31.05;	author smurph;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.12.21.05.53.38;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.16.23.49.46;	author miod;	state dead;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.12.13.08.55.51;	author smurph;	state Exp;
branches;
next	;

1.2.2.1
date	2002.01.31.22.55.18;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2004.02.19.10.49.07;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2004.06.05.23.09.50;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: m88410.h,v 1.15 2013/02/17 18:10:01 miod Exp $ */
/*
 * Copyright (c) 2001 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Steve Murphree.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef	_MACHINE_M88410_H_
#define	_MACHINE_M88410_H_

#ifdef _KERNEL

/*
 *	MC88410 External Cache Controller definitions.
 *	This is only available on MVME197 SP, DP and QP models.
 */

#include <mvme88k/dev/busswreg.h>

void	mc88410_inv(void);
void	mc88410_wb(void);
void	mc88410_wbinv(void);
void	mc88410_wb_page(paddr_t);

static __inline__ int
mc88410_present(void)
{
	return (*(volatile u_int16_t *)(BS_BASE + BS_GCSR)) & BS_GCSR_B410;
}

#endif	/* _KERNEL */

#endif	/* _MACHINE_M88410_H_ */
@


1.15
log
@Replace assembly statement triggering 88410 commands with a proper volatile
uint64_t write. While there, implement a real wbinv routine instead of invoking
wb, then inv; this avoids unnecessary busswitch register juggling.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.14 2011/03/23 16:54:36 pirofti Exp $ */
@


1.14
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.13 2010/12/31 20:54:21 miod Exp $ */
d45 3
a48 9
void	mc88410_wb(void);
void	mc88410_inv(void);

static __inline__ void
mc88410_wbinv(void)
{
	mc88410_wb();
	mc88410_inv();
}
@


1.13
log
@Standardize cache handling functions and defines to use wb/wbinv/inv instead
of flush/sync/inval. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.12 2005/12/12 20:36:32 miod Exp $ */
d33 2
a34 2
#ifndef	__M88410_H__
#define	__M88410_H__
d64 1
a64 1
#endif	/* __M88410_H__ */
@


1.12
log
@Move the MC88410 support code to a specific .c function instead of heavy
(and large) inlines.

While there, provide correct register clobbering information to the
__asm__ statements, and fix mc88410_flush_page() evil typo.

Finally, rework mc88410_inval() busy-wait logic to behave correctly in all
cases.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.11 2005/04/30 16:42:37 miod Exp $ */
d45 3
a47 3
void	mc88410_flush_page(paddr_t);
void	mc88410_flush(void);
void	mc88410_inval(void);
d50 1
a50 1
mc88410_sync(void)
d52 2
a53 2
	mc88410_flush();
	mc88410_inval();
@


1.11
log
@Remove m88k_psr_type and function with utterly long names to control the psr,
and use get_psr() / set_psr() or simple macros that expand into them everywhere.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.10 2004/04/24 19:51:48 miod Exp $ */
d39 2
a40 2
 *	MC88410 External Cache Controller definitions
 *	This is only available on MVME197DP/SP models.
a42 2
#include <machine/asm_macro.h>
#include <machine/psl.h>
d45 3
a47 118
#define XCC_NOP		"0x00"
#define XCC_FLUSH_PAGE	"0x01"
#define XCC_FLUSH_ALL	"0x02"
#define XCC_INVAL_ALL	"0x03"
#define XCC_ADDR	0xff800000

static __inline__ void
mc88410_flush_page(paddr_t physaddr)
{
	paddr_t xccaddr = XCC_ADDR | (physaddr >> PGSHIFT);
	u_int psr;
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
	/* mask misaligned exceptions */
	set_psr((psr = get_psr()) | PSR_MXM);
	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
	/* set XCC bit in GCSR (0xff8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* load the value of upper32 into r2 */
	__asm__ __volatile__("or   r2,r0," XCC_FLUSH_PAGE);
	/* load the value of lower32 into r3 (always 0) */
	__asm__ __volatile__("or   r3,r0,r0");
	/* load the value of xccaddr into r4 */
	__asm__ __volatile__("or.u r5,r0,hi16(%0)" : : "r" (xccaddr));
	__asm__ __volatile__("ld   r4,r5,lo16(%0)" : : "r" (xccaddr));
	/* make the double write. bang! */
	__asm__ __volatile__("st.d r2,r4,0");

	/* spin until the operation starts */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
		;

	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}

static __inline__ void
mc88410_flush(void)
{
	u_int psr;
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
	/* mask misaligned exceptions */
	set_psr((psr = get_psr()) | PSR_MXM);
	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* load the value of upper32 into r2 */
	__asm__ __volatile__("or   r2,r0," XCC_FLUSH_ALL);
	/* load the value of lower32 into r3 (always 0) */
	__asm__ __volatile__("or   r3,r0,r0");
	/* load the value of xccaddr into r4 */
	__asm__ __volatile__("or.u r5,r0,hi16(0xff800000)");
	__asm__ __volatile__("or   r4,r5,r0");
	/* make the double write. bang! */
	__asm__ __volatile__("st.d r2,r4,0");

	/* spin until the operation starts */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
		;

	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}

static __inline__ void
mc88410_inval(void)
{
	u_int psr;
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);

	/* mask misaligned exceptions */
	set_psr((psr = get_psr()) | PSR_MXM);
	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;

	/* load the value of upper32 into r2 */
	__asm__ __volatile__("or   r2,r0," XCC_INVAL_ALL);
	/* load the value of lower32 into r3 (always 0) */
	__asm__ __volatile__("or   r3,r0,r0");
	/* load the value of xccaddr into r4 */
	__asm__ __volatile__("or.u r5,r0,hi16(0xff800000)");
	__asm__ __volatile__("or   r4,r5,r0");
	/* make the double write. bang! */
	__asm__ __volatile__("st.d r2,r4,0");

	/* spin until the operation starts */
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
		;

	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
}
@


1.10
log
@Preliminary switch to an mvme88k bus_space world. Not all drivers have been
converted yet, and they rely upon some linear mappings provided by bus_space.

In order to not impact performance, almost all the bus_space accesses go
through macros and inline functions. This currently restricts us to D16 and
D32 access modes, which are selected at compilation time. Since there are no
plans to support D8 vme devices in the future, this is acceptable for now.

This makes the "len" locator for vme devices go away, and allows to simplify
some code which was using the pcctwo device, and will now directly access
hardware which is known to exist, rather than wait until the device is
attached.

While there, try to enforce more interrupt vector number checks, since these
changes pointed out that dart(4) had been working correctly so far by sheer
luck only.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.9 2004/04/14 20:16:51 miod Exp $ */
d57 1
a57 1
        m88k_psr_type psr;
a61 1
	psr = get_psr();
d63 1
a63 1
	set_psr(psr | PSR_MXM);
d94 1
a94 1
        m88k_psr_type psr;
a98 1
	psr = get_psr();
d100 1
a100 1
	set_psr(psr | PSR_MXM);
d131 1
a131 1
        m88k_psr_type psr;
a136 1
	psr = get_psr();
d138 1
a138 1
	set_psr(psr | PSR_MXM);
@


1.9
log
@When trying to program tho 88410, be sure to unmask both flash banks
(as advertized in the comments...)
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.8 2004/04/12 13:14:56 miod Exp $ */
d33 4
a36 2
#ifndef	__MACHINE_M88410_H__
#define	__MACHINE_M88410_H__
d39 1
a39 1
 *	mc88410 External Cache Controller definitions
a42 2
#ifndef	_LOCORE

a44 1
#ifdef _KERNEL
a45 1
#endif
d47 5
a51 5
#define XCC_NOP		"0x0"
#define XCC_FLUSH_PAGE	"0x1"
#define XCC_FLUSH_ALL	"0x2"
#define XCC_INVAL_ALL	"0x3"
#define XCC_ADDR	0xFF800000
d58 1
a58 3
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;
        u_short	bs_gcsr = bs->bs_gcsr;
	u_short	bs_romcr = bs->bs_romcr;
d60 2
d66 4
a69 3
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1) ;
	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	bs->bs_gcsr |= BS_GCSR_XCC;
d82 1
a82 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d88 2
a89 2
        bs->bs_gcsr = bs_gcsr;
	bs->bs_romcr = bs_romcr;
d96 1
a96 3
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;
        u_short	bs_gcsr = bs->bs_gcsr;
	u_short	bs_romcr = bs->bs_romcr;
d98 2
d104 2
a105 1
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1) ;
d107 1
a107 1
	bs->bs_gcsr |= BS_GCSR_XCC;
d114 2
a115 2
	__asm__ __volatile__("or.u r5,r0,hi16(0xFF800000)");
	__asm__ __volatile__("or   r4,r5,r0");	/* r4 is now 0xFF800000 */
d120 1
a120 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d126 2
a127 2
        bs->bs_gcsr = bs_gcsr;
	bs->bs_romcr = bs_romcr;
d134 4
a137 3
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;
        u_short	bs_gcsr = bs->bs_gcsr;
	u_short	bs_romcr = bs->bs_romcr;
d143 2
a144 1
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1) ;
d146 1
a146 1
	bs->bs_gcsr |= BS_GCSR_XCC;
d153 2
a154 2
	__asm__ __volatile__("or.u r5,r0,hi16(0xFF800000)");
	__asm__ __volatile__("or   r4,r5,r0");	/* r4 is now 0xFF800000 */
d159 1
a159 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d165 2
a166 2
        bs->bs_gcsr = bs_gcsr;
	bs->bs_romcr = bs_romcr;
d179 1
a179 3
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;

	return (bs->bs_gcsr & BS_GCSR_B410);
d182 1
a182 1
#endif	/* _LOCORE */
d184 1
a184 1
#endif	/* __MACHINE_M88410_H__ */
@


1.8
log
@Minor tweaks to appease gcc 3.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.7 2003/10/05 20:27:46 miod Exp $ */
d68 1
a68 1
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN0) ;
d105 1
a105 1
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN0) ;
d142 1
a142 1
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN0) ;
@


1.7
log
@Kill vm_offset_t and vm_size_t, in favor of the [pv]addr_t and [pv]size_t
typedefs.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.6 2003/08/20 20:33:44 miod Exp $ */
d184 1
a184 1
#endif __MACHINE_M88410_H__
@


1.6
log
@A bunch of 88110 band-aid:
- the 88410 handling code is not working correctly. Check whether we are
  operating with 88410's, and only invoke these routines if necessary.
- force serial mode execution in the PSR for the moment (hopefully only
  temporary)
- disable branch prediction and data matching in the PSR, the 88110 errata
  is simply too scary about them.
- a better pipeline flush after changing the ictl control register.

These changes let 197LE (but not 197SP/DP) boot up to autoconf.
Userland process do not work at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.5 2003/08/17 01:47:10 miod Exp $ */
d47 1
a47 1
#endif 
d56 1
a56 1
mc88410_flush_page(vm_offset_t physaddr)
d58 1
a58 1
	vm_offset_t xccaddr = XCC_ADDR | (physaddr >> PGSHIFT);
d63 1
a63 1
	
d81 1
a81 1
        
d85 1
a85 1
	
d100 1
a100 1
	
d117 2
a118 2
	__asm__ __volatile__("st.d r2,r4,0");		
        
d122 1
a122 1
	
d137 1
a137 1
	
d154 2
a155 2
	__asm__ __volatile__("st.d r2,r4,0");		
        
d159 1
a159 1
	
d171 1
a171 1
	mc88410_inval();	
@


1.5
log
@There is no need to assume that the compiler will swap ! and & operator
priorities because we are nice people.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.4 2001/12/22 08:31:05 smurph Exp $ */
d55 2
a56 1
static __inline__ void mc88410_flush_page(vm_offset_t physaddr)
d93 2
a94 1
static __inline__ void mc88410_flush(void)
d130 2
a131 1
static __inline__ void mc88410_inval(void)
d167 2
a168 1
static __inline__ void mc88410_sync(void)
d172 8
@


1.4
log
@mc88110 support in ddb.  Bring in bit definitions.
We can support hardware sstep for mc88110 and
software sstep for mc88100.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.3 2001/12/21 05:53:38 smurph Exp $ */
d82 1
a82 1
	while (!bs->bs_xccr & BS_XCC_FBSY)
d118 1
a118 1
	while (!bs->bs_xccr & BS_XCC_FBSY)
d154 1
a154 1
	while (!bs->bs_xccr & BS_XCC_FBSY)
@


1.4.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d47 1
a47 1
#endif
d55 1
a55 2
static __inline__ void
mc88410_flush_page(paddr_t physaddr)
d57 1
a57 1
	paddr_t xccaddr = XCC_ADDR | (physaddr >> PGSHIFT);
d62 1
a62 1

d80 1
a80 1

d82 1
a82 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d84 1
a84 1

d92 1
a92 2
static __inline__ void
mc88410_flush(void)
d98 1
a98 1

d115 2
a116 2
	__asm__ __volatile__("st.d r2,r4,0");

d118 1
a118 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d120 1
a120 1

d128 1
a128 2
static __inline__ void
mc88410_inval(void)
d134 1
a134 1

d151 2
a152 2
	__asm__ __volatile__("st.d r2,r4,0");

d154 1
a154 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d156 1
a156 1

d164 1
a164 2
static __inline__ void
mc88410_sync(void)
d167 1
a167 9
	mc88410_inval();
}

static __inline__ int
mc88410_present(void)
{
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;

	return (bs->bs_gcsr & BS_GCSR_B410);
@


1.4.2.2
log
@Merge with the trunk
@
text
@d33 2
a34 4
#ifndef	__M88410_H__
#define	__M88410_H__

#ifdef _KERNEL
d37 1
a37 1
 *	MC88410 External Cache Controller definitions
d41 2
d45 1
d47 1
d49 5
a53 5
#define XCC_NOP		"0x00"
#define XCC_FLUSH_PAGE	"0x01"
#define XCC_FLUSH_ALL	"0x02"
#define XCC_INVAL_ALL	"0x03"
#define XCC_ADDR	0xff800000
d60 3
a62 1
	u_int16_t bs_gcsr, bs_romcr;
a63 2
	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
d68 3
a70 4
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
	/* set XCC bit in GCSR (0xff8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;
d83 1
a83 1
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
d89 2
a90 2
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
d97 3
a99 1
	u_int16_t bs_gcsr, bs_romcr;
a100 2
	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
d105 1
a105 2
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
d107 1
a107 1
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;
d114 2
a115 2
	__asm__ __volatile__("or.u r5,r0,hi16(0xff800000)");
	__asm__ __volatile__("or   r4,r5,r0");
d120 1
a120 1
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
d126 2
a127 2
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
d134 3
a136 4
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
d142 1
a142 2
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
d144 1
a144 1
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;
d151 2
a152 2
	__asm__ __volatile__("or.u r5,r0,hi16(0xff800000)");
	__asm__ __volatile__("or   r4,r5,r0");
d157 1
a157 1
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
d163 2
a164 2
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
d177 3
a179 1
	return (*(volatile u_int16_t *)(BS_BASE + BS_GCSR)) & BS_GCSR_B410;
d182 1
a182 1
#endif	/* _KERNEL */
d184 1
a184 1
#endif	/* __M88410_H__ */
@


1.3
log
@MC88410 External Cache Controller inline for MVME197DP/SP
@
text
@d1 31
a31 1
/*	$OpenBSD: m88410.h,v 1.1 2001/12/13 08:55:51 smurph Exp $ */
@


1.2
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@@


1.2.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 31
/*	$OpenBSD: m88410.h,v 1.4 2001/12/22 08:31:05 smurph Exp $ */
/*
 * Copyright (c) 2001 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Steve Murphree.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
@


1.1
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88110.h,v 1.4 2001/03/09 05:44:40 smurph Exp $ */
@

