head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.42
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.38
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.36
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.34
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.32
	OPENBSD_5_0:1.25.0.30
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.28
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.26
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.22
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.24
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.20
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.18
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.16
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.14
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.12
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.10
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.8
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.6
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.25.0.4
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.25.0.2
	OPENBSD_3_6_BASE:1.25
	SMP_SYNC_A:1.25
	SMP_SYNC_B:1.25
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.20
	OPENBSD_3_3:1.20.0.6
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.4
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.20.0.2
	OPENBSD_3_1_BASE:1.20
	UBC_SYNC_B:1.20
	UBC:1.18.0.2
	UBC_BASE:1.18
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	mvme88kport:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	first_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.25;

1.25
date	2004.04.26.14.31.11;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.23.17.26.05;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.05.20.25.08;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.01.07.45.43;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.09.00.38.54;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.22.17.43.14;	author smurph;	state Exp;
branches;
next	1.18;

1.18
date	2001.12.16.23.49.46;	author miod;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.12.13.08.55.51;	author smurph;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.20.23.55.20;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2001.10.28.00.58.29;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.12.12.03.02;	author heko;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.07.22.18.04;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.26.22.30.21;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.08.22.24.59;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.08.00.03.22;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.01.03.38.17;	author smurph;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.15.19.50.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.14.20.25.23;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	99.09.27.20.46.16;	author smurph;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	99.02.09.12.49.38;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.02.09.06.36.25;	author smurph;	state Exp;
branches;
next	1.3;

1.3
date	97.03.03.20.20.46;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.03.03.19.07.17;	author rahnds;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.10.54.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.10.54.22;	author deraadt;	state Exp;
branches;
next	;

1.6.4.1
date	2001.04.18.16.11.12;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2001.10.31.03.01.18;	author nate;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2001.11.13.21.04.15;	author niklas;	state Exp;
branches;
next	1.6.4.4;

1.6.4.4
date	2001.12.05.00.39.12;	author niklas;	state Exp;
branches;
next	1.6.4.5;

1.6.4.5
date	2002.03.06.02.04.44;	author niklas;	state Exp;
branches;
next	1.6.4.6;

1.6.4.6
date	2004.02.19.10.49.06;	author niklas;	state Exp;
branches;
next	1.6.4.7;

1.6.4.7
date	2004.06.05.23.09.49;	author niklas;	state Exp;
branches;
next	;

1.18.2.1
date	2002.01.31.22.55.18;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/* $OpenBSD: asm_macro.h,v 1.25 2004/04/26 14:31:11 miod Exp $ */
/* public domain */
#include <m88k/asm_macro.h>
@


1.25
log
@Fix RCSID
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.24
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.23
log
@Get rid of a few (mostly DDB related) unused defines and macros.
@
text
@d1 3
a3 123
/*	$OpenBSD: asm_macro.h,v 1.22 2003/10/05 20:25:08 miod Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef __MACHINE_M88K_ASM_MACRO_H__
#define __MACHINE_M88K_ASM_MACRO_H__

#include <machine/asm.h>
/*
 * Various compiler macros used for speed and efficiency.
 * Anyone can include.
 */

/*
 * Flushes the data pipeline.
 */
#define	flush_pipeline() \
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING)

/*
 * PSR_TYPE is the type of the Process Status Register.
 */
typedef unsigned long m88k_psr_type;

/*
 * disable_interrupts_return_psr()
 *
 *    The INTERRUPT_DISABLE bit is set in the PSR and the *PREVIOUS*
 *    PSR is returned.  Intended to be used with set_psr() [below] as in:
 *
 *	{
 *	    m88k_psr_type psr;
 *	        .
 *	        .
 *	    psr = disable_interrupts_return_psr();
 *	        .
 *   		SHORT [time-wise] CRITICAL SECTION HERE
 *	        .
 *	    set_psr(psr);
 *	        .
 *	        .
 */
static __inline__ m88k_psr_type disable_interrupts_return_psr(void)
{
	m88k_psr_type temp, oldpsr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("set  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
	return oldpsr;
}
#define disable_interrupt() (void)disable_interrupts_return_psr()

/*
 * Sets the PSR. See comments above.
 */
static __inline__ void set_psr(m88k_psr_type psr)
{
	__asm__ __volatile__ ("stcr %0, cr1" :: "r" (psr));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
}

/*
 * Gets the PSR. See comments above.
 */
static __inline__ m88k_psr_type get_psr(void)
{
	m88k_psr_type psr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (psr));
	return psr;
}

/*
 * Enables interrupts.
 */
static __inline__ m88k_psr_type enable_interrupts_return_psr(void)
{
	m88k_psr_type temp, oldpsr; /* need a temporary register */
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("clr  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
	return oldpsr;
}
#define enable_interrupt() (void)enable_interrupts_return_psr()

#define db_enable_interrupt enable_interrupt
#define db_disable_interrupt disable_interrupt

/*
 * Provide access from C code to the assembly instruction ff1
 */
static __inline__ unsigned ff1(unsigned val)
{
	__asm__ __volatile__ ("ff1 %0, %0" : "=r" (val) : "0" (val));
	return val;
}

#endif /* __MACHINE_M88K_ASM_MACRO_H__ */
@


1.22
log
@De-register
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.21 2003/08/01 07:45:43 miod Exp $ */
a42 2

#define db_flush_pipeline flush_pipeline
@


1.21
log
@Turn flush_pipeline() in a simple macro.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.20 2002/01/09 00:38:54 miod Exp $ */
d71 1
a71 1
	register m88k_psr_type temp, oldpsr;
d83 1
a83 1
static __inline__ void set_psr(register m88k_psr_type psr)
d94 1
a94 1
	register m88k_psr_type psr;
d104 1
a104 1
	register m88k_psr_type temp, oldpsr; /* need a temporary register */
a116 10
 * Gets the current stack pointer.
 */
static __inline__ unsigned long stack_pointer(void)
{
	register unsigned long sp;
	__asm__ __volatile__ ("or %0,r0,r31" : "=r" (sp));
	return sp;
}

/*
d119 1
a119 1
static __inline__ unsigned ff1(register unsigned val)
@


1.20
log
@Put explicit register qualifiers into the inlines, so that they work correctly
when the kernel is compiled with -O0.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.19 2001/12/22 17:43:14 smurph Exp $ */
d41 2
a42 4
static __inline__ void flush_pipeline(void)
{
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
}
@


1.19
log
@add get_psr() inline for mc88410.h
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.18 2001/12/16 23:49:46 miod Exp $ */
d73 1
a73 1
	m88k_psr_type temp, oldpsr;
d85 1
a85 1
static __inline__ void set_psr(m88k_psr_type psr)
d96 1
a96 1
	m88k_psr_type psr;
d106 1
a106 1
	m88k_psr_type temp, oldpsr; /* need a temporary register */
@


1.18
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.16 2001/11/20 23:55:20 miod Exp $ */
d89 10
@


1.18.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.20 2002/01/09 00:38:54 miod Exp $ */
d73 1
a73 1
	register m88k_psr_type temp, oldpsr;
d85 1
a85 1
static __inline__ void set_psr(register m88k_psr_type psr)
a91 10
 * Gets the PSR. See comments above.
 */
static __inline__ m88k_psr_type get_psr(void)
{
	register m88k_psr_type psr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (psr));
	return psr;
}

/*
d96 1
a96 1
	register m88k_psr_type temp, oldpsr; /* need a temporary register */
@


1.17
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@a91 10
 * Gets the PSR. See comments above.
 */
static __inline__ m88k_psr_type get_psr(void)
{
	m88k_psr_type psr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (psr));
	return psr;
}

/*
@


1.16
log
@Prevent more symbol clashes when compiling userland.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.15 2001/10/28 00:58:29 miod Exp $ */
d89 10
@


1.15
log
@Use the same pipeline flush instruction everywhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.14 2001/08/12 12:03:02 heko Exp $ */
d32 1
@


1.14
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.13 2001/08/07 22:18:04 miod Exp $ */
d38 10
d76 1
a76 1
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
d87 1
a87 1
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
d99 1
a99 1
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
a107 9
 * Flushes the data pipeline.
 */
static __inline__ void flush_pipeline(void)
{
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
}
#define db_flush_pipeline flush_pipeline

/*
d114 1
a114 1
	return(sp);
@


1.13
log
@Sprinkle a few Holy Volatiles (tm).
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.12 2001/07/26 22:30:21 miod Exp $ */
d125 1
a125 1
#endif __MACHINE_M88K_ASM_MACRO_H__
@


1.12
log
@Always flush the pipeline after updating cr1.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.11 2001/03/08 22:24:59 miod Exp $ */
d121 1
a121 1
	__asm__ ("ff1 %0, %0" : "=r" (val) : "0" (val));
@


1.11
log
@Define ff1() as a one-liner assembly inline, rather than a function in
locore_asm_routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.10 2001/03/08 00:03:22 miod Exp $ */
d77 1
d89 1
@


1.10
log
@Some warning hunting.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.9 2001/02/01 03:38:17 smurph Exp $ */
d33 3
a35 3
 ** Various compiler macros used for speed and efficiency.
 ** Anyone can include.
  */
d96 1
a96 1
 * flushes the data pipeline.
d105 1
a105 1
 * gets the current stack pointer.
d114 8
@


1.9
log
@Major changes to get MVME188 working.  More header and code cleanups.  The
kernel is tested on MVME188A/2P256 and MVME188A/1P64.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.8 2001/01/15 19:50:38 deraadt Exp $ */
d98 1
a98 1
static __inline__ void flush_pipeline()
d107 1
a107 1
static inline unsigned long stack_pointer()
@


1.8
log
@__asm__ and __volatile__
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.7 2001/01/14 20:25:23 smurph Exp $ */
d62 6
a67 6
   m88k_psr_type temp, oldpsr;
   __asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
   __asm__ __volatile__ ("set  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
   __asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
   __asm__ __volatile__ ("tcnd ne0, r0, 0");
   return oldpsr;
d76 1
a76 1
   __asm__ __volatile__ ("stcr %0, cr1" :: "r" (psr));
d84 5
a88 5
   m88k_psr_type temp, oldpsr; /* need a temporary register */
   __asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
   __asm__ __volatile__ ("clr  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
   __asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
   return oldpsr;
d100 1
a100 1
    __asm__ __volatile__ ("tcnd ne0, r0, 0");
d103 11
@


1.7
log
@Complete move to UVM virtual memory system.  More header fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.6 1999/09/27 20:46:16 smurph Exp $ */
d60 1
a60 1
static inline m88k_psr_type disable_interrupts_return_psr(void)
d63 4
a66 4
   asm volatile ("ldcr %0, cr1" : "=r" (oldpsr));
   asm volatile ("set  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	asm volatile ("stcr %0, cr1" : "=r" (temp));
	asm volatile ("tcnd ne0, r0, 0");
d74 1
a74 1
static inline void set_psr(m88k_psr_type psr)
d76 1
a76 1
   asm volatile ("stcr %0, cr1" :: "r" (psr));
d82 1
a82 1
static inline m88k_psr_type enable_interrupts_return_psr(void)
d85 3
a87 3
   asm volatile ("ldcr %0, cr1" : "=r" (oldpsr));
   asm volatile ("clr  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	asm volatile ("stcr %0, cr1" : "=r" (temp));
d98 1
a98 1
static inline void flush_pipeline()
d100 1
a100 1
    asm volatile ("tcnd ne0, r0, 0");
@


1.6
log
@Adding support for MVME188 and MVME197
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.5 1999/02/09 12:49:38 deraadt Exp $ */
d29 2
a30 2
#ifndef __M88K_ASM_MACRO_H__
#define __M88K_ASM_MACRO_H__
d104 1
a104 1
#endif /* __M88K_ASM_MACRO_H__ */
@


1.6.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.11 2001/03/08 22:24:59 miod Exp $ */
d29 2
a30 2
#ifndef __MACHINE_M88K_ASM_MACRO_H__
#define __MACHINE_M88K_ASM_MACRO_H__
d33 3
a35 3
 * Various compiler macros used for speed and efficiency.
 * Anyone can include.
 */
d60 1
a60 1
static __inline__ m88k_psr_type disable_interrupts_return_psr(void)
d62 6
a67 6
	m88k_psr_type temp, oldpsr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("set  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
	return oldpsr;
d74 1
a74 1
static __inline__ void set_psr(m88k_psr_type psr)
d76 1
a76 1
	__asm__ __volatile__ ("stcr %0, cr1" :: "r" (psr));
d82 1
a82 1
static __inline__ m88k_psr_type enable_interrupts_return_psr(void)
d84 5
a88 5
	m88k_psr_type temp, oldpsr; /* need a temporary register */
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("clr  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	return oldpsr;
d96 1
a96 1
 * Flushes the data pipeline.
d98 1
a98 1
static __inline__ void flush_pipeline(void)
d100 1
a100 1
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
d104 1
a104 20
/*
 * Gets the current stack pointer.
 */
static __inline__ unsigned long stack_pointer(void)
{
	register unsigned long sp;
	__asm__ __volatile__ ("or %0,r0,r31" : "=r" (sp));
	return(sp);
}

/*
 * Provide access from C code to the assembly instruction ff1
 */
static __inline__ unsigned ff1(register unsigned val)
{
	__asm__ ("ff1 %0, %0" : "=r" (val) : "0" (val));
	return val;
}

#endif __MACHINE_M88K_ASM_MACRO_H__
@


1.6.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.6.4.1 2001/04/18 16:11:12 niklas Exp $ */
a76 1
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
a87 1
	__asm__ __volatile__ ("tcnd ne0, r0, 0");
d119 1
a119 1
	__asm__ __volatile__ ("ff1 %0, %0" : "=r" (val) : "0" (val));
d123 1
a123 1
#endif /* __MACHINE_M88K_ASM_MACRO_H__ */
@


1.6.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a37 10
 * Flushes the data pipeline.
 */
static __inline__ void flush_pipeline(void)
{
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
}

#define db_flush_pipeline flush_pipeline

/*
d66 1
a66 1
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
d77 1
a77 1
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
d89 1
a89 1
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
d98 9
d113 1
a113 1
	return sp;
@


1.6.4.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.6.4.3 2001/11/13 21:04:15 niklas Exp $ */
a31 1
#include <machine/asm.h>
@


1.6.4.5
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d73 1
a73 1
	register m88k_psr_type temp, oldpsr;
d85 1
a85 1
static __inline__ void set_psr(register m88k_psr_type psr)
a91 10
 * Gets the PSR. See comments above.
 */
static __inline__ m88k_psr_type get_psr(void)
{
	register m88k_psr_type psr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (psr));
	return psr;
}

/*
d96 1
a96 1
	register m88k_psr_type temp, oldpsr; /* need a temporary register */
@


1.6.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d41 6
a46 2
#define	flush_pipeline() \
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING)
d73 1
a73 1
	m88k_psr_type temp, oldpsr;
d85 1
a85 1
static __inline__ void set_psr(m88k_psr_type psr)
d96 1
a96 1
	m88k_psr_type psr;
d106 1
a106 1
	m88k_psr_type temp, oldpsr; /* need a temporary register */
d119 10
d131 1
a131 1
static __inline__ unsigned ff1(unsigned val)
@


1.6.4.7
log
@Merge with the trunk
@
text
@d1 123
a123 3
/* $OpenBSD$ */
/* public domain */
#include <m88k/asm_macro.h>
@


1.5
log
@$Log$ is ugly
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.4 1999/02/09 06:36:25 smurph Exp $ */
d62 6
a67 7
    m88k_psr_type temp, oldpsr;
    asm volatile (
	"ldcr %0, cr1      \n"
	"set  %1, %0, 1<1> \n"
	"stcr %1, cr1      \n"
	"tcnd ne0, r0, 0     " : "=r" (oldpsr), "=r" (temp));
    return oldpsr;
d76 1
a76 1
    asm volatile ("stcr %0, cr1" :: "r" (psr));
d84 5
a88 6
    m88k_psr_type temp, oldpsr; /* need a temporary register */
    asm volatile (
	"ldcr %0, cr1      \n"
        "clr  %1, %0, 1<1> \n"
        "stcr %1, cr1        " : "=r" (oldpsr), "=r" (temp));
    return oldpsr;
@


1.4
log
@Added kernel support for user debugging.  Fixed file ID's
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_macro.h,v 1.1 1998/12/15 04:45:50 smurph Exp $ */
a26 14
 */
/*
 * HISTORY
 * $Log: asm_macro.h,v $
 * Revision 1.3  1997/03/03 20:20:46  rahnds
 * Cleanup after import. This also seems to bring up the current version.
 *
 * Revision 1.1.1.1  1995/10/18 10:54:22  deraadt
 * initial 88k import; code by nivas and based on mach luna88k
 *
 * Revision 2.2  93/01/26  18:07:26  danner
 * 	Created.
 * 	[93/01/24            jfriedl]
 * 
@


1.3
log
@Cleanup after import. This also seems to bring up the current version.
@
text
@d1 1
d31 3
@


1.2
log
@This is a remove to get rid of the old mvme88k port which was incomplete
to replace it with a working version. The kernel compiles and works
at least.  The new version will be imported shortly.
@
text
@d30 2
a31 2
 * Revision 1.1  1995/10/18 10:54:22  deraadt
 * Initial revision
@


1.1
log
@Initial revision
@
text
@d29 4
a32 1
 * $Log:	asm_macro.h,v $
@


1.1.1.1
log
@initial 88k import; code by nivas and based on mach luna88k
@
text
@@
