head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.36
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.32
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.30
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.28
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.26
	OPENBSD_5_0:1.9.0.24
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.22
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.20
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.2.0.14
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.6
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2006.02.06.17.19.31;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.26.21.15.31;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.25.21.21.24;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.27.21.58.20;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.25.21.01.39;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.09.00.31.59;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.11.22.08.57;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.14.20.25.23;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	99.05.29.04.41.45;	author smurph;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.04.18.16.11.11;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2004.02.19.10.49.06;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2004.06.05.23.09.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: vxreg.h,v 1.9 2006/02/06 17:19:31 jmc Exp $ */

/*
 * Copyright (c) 1999 Steve Murphree, Jr. All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* IPC - Intelligent Peripheral Controller */

struct vxreg {
/*0x0*/volatile u_short ipc_addrh;	 /* IPC addr reg, most significant */
/*0x2*/volatile u_short ipc_addrl;	 /* IPC addr reg, least significant */
/*0x4*/volatile u_char  ipc_amr;	  /* IPC address modifier reg */
/*0x5*/volatile u_char  unused1;
/*0x6*/volatile u_short ipc_cr;	 /* IPC control reg */
/*0x8*/volatile u_short ipc_sr;	 /* IPC status reg */
/*0xA*/volatile u_char  ipc_mdbp;	/* IPC model data byte pointer */
/*0xB*/volatile u_char  reserved3;
/*0xC*/volatile u_char  ipc_avrp;	/* IPC abort vector reg pointer */
/*0xD*/volatile u_char  unused2;
/*0xE*/volatile u_short ipc_tas;		 /* IPC test and set reg */
};

#define IPC_CR_SYSFI          0x1000   /* inhibit sysfail */
#define IPC_CR_ATTEN          0x2000   /* attention bit */
#define IPC_CR_RESET          0x4000   /* reset bit */
#define IPC_CR_BUSY           0x8000   /* busy bit */

#define IPC_SR_BUSERROR       0x4000   /* bus error */
#define IPC_SR_ERROR          0x8000   /* general error */
#define IPC_SR_INVAL          0xFFFF   /* invalid command */

#define IPC_TAS_COMPLETE      0x1000
#define IPC_TAS_VALID_STATUS  0x2000
#define IPC_TAS_VALID_CMD     0x4000
#define IPC_TAS_TAS           0x8000

#define IPC_CSR_CREATE        0x0001
#define IPC_CSR_DELETE        0x0002

#define CSW_OFFSET            0x0010

#define CMD_INIT              0x0000
#define CMD_READW             0x0001
#define CMD_WRITEW            0x0002
#define CMD_OPEN              0x0003
#define CMD_IOCTL             0x0004
#define CMD_CLOSE             0x0005
#define CMD_EVENT             0x0006
#define CMD_PROCESSED         0x00FF

#define IOCTL_LDOPEN          0x4400
#define IOCTL_LDCLOSE         0x4401
#define IOCTL_LDCHG           0x4402
#define IOCTL_LDGETT          0x4408
#define IOCTL_LDSETT          0x4409
#define IOCTL_TCGETA          0x5401   /* get dev termio struct */
#define IOCTL_TCSETA          0x5402   /* set dev termio struct */
#define IOCTL_TCSETAW         0x5403   /* set dev termio struct - wait */
#define IOCTL_TCSETAF         0x5404   /* set dev termio struct - wait - flush */
#define IOCTL_TCSBRK          0x5405   /* transmit a break seq */
#define IOCTL_TCXONC          0x5406   /* sus or res, xon or xoff, RTS or DTR */
#define IOCTL_TCFLSH          0x5407   /* Flush */
#define IOCTL_TCSETHW         0x5440   /* enable/disable HW handshake */
#define IOCTL_TCGETHW         0x5441   /* get current HW handshake info */
#define IOCTL_TCGETDL         0x5442   /* get daownloadable addr and mem size */
#define IOCTL_TCDLOAD         0x5443   /* download code/data to mem */
#define IOCTL_TCLINE          0x5444   /* copy line discipline */
#define IOCTL_TCEXEC          0x5445   /* exec code in local mem */
#define IOCTL_TCGETVR         0x5446   /* get version and revison of firmware */
#define IOCTL_TCGETDF         0x5447   /* get default termio struct */
#define IOCTL_TCSETDF         0x5448   /* set default termio struct */
#define IOCTL_TCGETSYM        0x5449   /* get firmware symbol table */
#define IOCTL_TCWHAT          0x544A   /* get all SCSI IDs of FW files */
#define IOCTL_TIOGETP         0x7408   /* get devs curr termio struct by sgttyb */
#define IOCTL_TIOSETP         0x7409   /* set devs curr termio struct by sgttyb */

#define IPC_EIO               5     /* I/O error */
#define IPC_ENXIO             6     /* no such device or address */
#define IPC_ENOMEM            12    /* not enough space */
#define IPC_EEXIST            17    /* device or address exists */
#define IPC_EINVAL            22    /* invalid caommand argument */

/*
 *	Index into c_cc[VNCC];
 */
#define  VVINTR   0  /* ISIG */
#define  VVQUIT   1  /* ISIG */
#define  VVERASE  2  /* ICANON */
#define  VVKILL   3  /* ICANON */
#define  VVEOF    4  /* ICANON */
#define  VVEOL    5  /* ICANON */
#define  VVSWTCH  6

/*
 * Input flags - software input processing
 */
#define  VIGNBRK  0000001   /* ignore BREAK condition */
#define  VBRKINT  0000002   /* map BREAK to SIGINTR */
#define  VIGNPAR  0000004   /* ignore (discard) parity errors */
#define  VPARMRK  0000010   /* mark parity and framing errors */
#define  VINPCK   0000020   /* enable checking of parity errors */
#define  VISTRIP  0000040   /* strip 8th bit off chars */
#define  VINLCR   0000100   /* map NL into CR */
#define  VIGNCR   0000200   /* ignore CR */
#define  VICRNL   0000400   /* map CR to NL (ala CRMOD) */
#define  VIUCLC   0001000   /* translate upper to lower case */
#define  VIXON    0002000   /* enable output flow control */
#define  VIXANY   0004000   /* any char will restart after stop */
#define  VIXOFF   0010000   /* enable input flow control */

/*
 * Output flags - software output processing
 */
#define  VOPOST   0000001   /* enable following output processing */
#define  VOLCUC   0000002   /* translate lower case to upper case */
#define  VONLCR   0000004   /* map NL to CR-NL (ala CRMOD) */
#define  VOCRNL   0000010   /* map CR to NL */
#define  VONOCR   0000020   /* No CR output at column 0 */
#define  VONLRET  0000040   /* NL performs the CR function */
#define  VOFILL   0000100
#define  VOFDEL   0000200
#define  VOXTABS  0014000   /* expand tabs to spaces */

/*
 * Control flags - hardware control of terminal
 */

#define  VCBAUD   0000017   /* baud rate */
#define  VB0      0000000   /* hang up */
#define  VB50     0000001
#define  VB75     0000002
#define  VB110    0000003
#define  VB134    0000004
#define  VB150    0000005
#define  VB200    0000006
#define  VB300    0000007
#define  VB600    0000010
#define  VB1200   0000011
#define  VB1800   0000012
#define  VB2400   0000013
#define  VB4800   0000014
#define  VB9600   0000015
#define  VB19200  0000016
#define  VB38400  0000017
#define  VEXTA    0000016
#define  VEXTB    0000017
#define  VCSIZE   0000060   /* character size mask */
#define  VCS5     0000000   /* 5 bits (pseudo) */
#define  VCS6     0000020   /* 6 bits */
#define  VCS7     0000040   /* 7 bits */
#define  VCS8     0000060   /* 8 bits */
#define  VCSTOPB  0000100   /* send 2 stop bits */
#define  VCREAD   0000200   /* enable receiver */
#define  VPARENB  0000400   /* parity enable */
#define  VPARODD  0001000   /* odd parity, else even */
#define  VHUPCL   0002000   /* hang up on last close */
#define  VCLOCAL  0004000   /* ignore modem status lines */

/*
 * "Local" flags - dumping ground for other state
 *
 * Warning: some flags in this structure begin with
 * the letter "I" and look like they belong in the
 * input flag.
 */

#define  VISIG    0000001   /* enable signals INTR, QUIT, [D]SUSP */
#define  VICANON  0000002   /* canonicalize input lines */
#define  VXCASE   0000004   /* canonical upper/lower case */
#define  VECHO    0000010   /* enable echoing */
#define  VECHOE   0000020   /* visually erase chars */
#define  VECHOK   0000040   /* echo NL after line kill */
#define  VECHONL  0000100   /* echo NL even if ECHO is off */
#define  VNOFLSH  0000200   /* don't flush after interrupt */


#define  VNCC     9  /* 18 bytes */
struct termio {
	volatile unsigned short c_iflag;
	volatile unsigned short c_oflag;
	volatile unsigned short c_cflag;
	volatile unsigned short c_lflag;
	volatile char           c_line;
	volatile unsigned char  c_cc[VNCC];
};

struct vx_sgttyb {      /* 6 bytes */
	volatile char  sg_ispeed;
	volatile char  sg_ospeed;
	volatile char  sg_erase;
	volatile char  sg_kill;
	volatile short  sg_flags;
};

struct termcb {      /* 6 bytes */
	volatile char  st_flgs;
	volatile char  st_termt;
	volatile char  st_crow;
	volatile char  st_ccol;
	volatile char  st_vrow;
	volatile char  st_lrow;
};

struct ctdesc {
	unsigned short csw,
	resv;
	unsigned long  magic,
	lcnt,
	fatal,
	error,
	faddr,
	expdata,
	readdata;
};

struct dl_info {     /* 18 bytes */
	volatile unsigned long  host_addr;
	volatile unsigned long  ipc_addr;
	volatile unsigned long  count;
	volatile unsigned long  extra_long;
	volatile unsigned short extra_short;
};

struct packet {      /* 68 bytes */
	volatile u_long  link;       /* was eyecatcher */
	volatile u_char  command_pipe_number;
	volatile u_char  status_pipe_number;
	volatile char    filler0[4];
	volatile short   command;
	volatile char    filler1[1];
	volatile char    command_dependent;
	volatile char    filler2[1];
	volatile char	 interrupt_level;	/* init only */
	volatile u_char  device_number;
	volatile char    filler3[1];
	volatile u_short ioctl_cmd_h;
	volatile u_short ioctl_cmd_l;
#define	init_info_ptr_h	ioctl_cmd_h
#define	init_info_ptr_l	ioctl_cmd_l
	volatile u_short ioctl_arg_h;
	volatile u_short ioctl_arg_l;
	volatile u_short ioctl_mode_h;
	volatile u_short ioctl_mode_l;
#define	interrupt_vec	ioctl_mode_l
	volatile char    filler4[6];
	volatile u_short error_h;
	volatile u_short error_l;
	volatile short   event_code;
	volatile char    filler5[6];
	union {
		struct  termio  tio;
		struct  termcb  tcb;
		struct  vx_sgttyb  sgt;
		struct  dl_info dl;
		long    param;
	} pb;
	short   reserved;    /* for alignment */
} packet;

struct envelope {	      /* 12 bytes */
	volatile u_long          link;
	volatile u_long          packet_ptr;
	volatile char            valid_flag;
	volatile char            reserved1;
	volatile char            reserved[2];
};

struct channel {        /* 24 bytes */
	volatile u_short           command_pipe_head_ptr_h;
	volatile u_short           command_pipe_head_ptr_l;
	volatile u_short           command_pipe_tail_ptr_h;
	volatile u_short           command_pipe_tail_ptr_l;
	volatile u_short           status_pipe_head_ptr_h;
	volatile u_short           status_pipe_head_ptr_l;
	volatile u_short           status_pipe_tail_ptr_h;
	volatile u_short           status_pipe_tail_ptr_l;
	volatile char              interrupt_level;
	volatile char              interrupt_vec;
	volatile char              channel_priority;
	volatile char              address_modifier;
	volatile char              channel_number;
	volatile char              valid;
	volatile char              datasize;
	volatile char              reserved;
};

#define WRING_DATA_SIZE 4096   /* for a total struct size of 4104 (4K + 6 + 2 bytes) */
#define WRING_BUF_SIZE WRING_DATA_SIZE
struct wring {
	volatile unsigned short reserved;
	volatile unsigned short put;
	volatile unsigned short get;
	volatile char           data[WRING_BUF_SIZE];
   char                    res[2]; /* for alignment */
};

#define RRING_DATA_SIZE 2048   /* for a total struct size of 2054 (2K + 6 + 2 bytes) */
#define RRING_BUF_SIZE RRING_DATA_SIZE
struct rring {
	volatile unsigned short reserved;
	volatile unsigned short put;
	volatile unsigned short get;
	volatile char           data[RRING_BUF_SIZE];
   char                    res[2]; /* for alignment */
};

#define EOFRAME  0xA
#define DELIMITER  0x1

struct init_info {      /* 88 bytes */
	volatile u_short        write_ring_ptr_h;
	volatile u_short        write_ring_ptr_l;
	volatile u_short        read_ring_ptr_h;
	volatile u_short        read_ring_ptr_l;
	volatile unsigned short write_ring_size;
	volatile unsigned short read_ring_size;
	volatile struct termio  def_termio;
	volatile unsigned short reserved1;
	volatile unsigned short reserved2;
	volatile unsigned short reserved3;
	volatile unsigned short reserved4;
	volatile char           init_data[56];
};

/* IPC event codes */
#define  E_INTR      0x0001
#define  E_QUIT      0x0002
#define  E_HUP       0x0004
#define  E_DCD       0x0008
#define  E_DSR       0x0010
#define  E_CTS       0x0020
#define  E_LOST_DCD  0x0040
#define  E_LOST_DSR  0x0080
#define  E_LOST_CTS  0x0100
#define  E_PR_FAULT  0x0200
#define  E_PR_POUT   0x0400
#define  E_PR_SELECT 0x0800
#define  E_SWITCH    0x4000
#define  E_BREAK     0x8000

/*
 * All structures must reside in dual port user memory.
 * ($FFxx0100 to $FFxxFFF0)
 * All structures must be word aligned (see byte counts above)
 *
 *       +--------------------------------+
 *       |  IPC Control/Status Register   | $FFxx0000
 *       |          (16 bytes)            |
 *       |--------------------------------|
 *       |  Confidence Test Descriptor    | $FFxx0010
 *       |          (32 bytes)            |
 *       |--------------------------------|
 *       |          Dump Area             | $FFxx0030
 *       |         (208 bytes)            |
 *       |--------------------------------|
 *       |                                | $FFxx0100
 *       |                                |
 *       :          User Space            :
 *       :                                :
 *       :        (65,264 bytes)          :
 *       |                                |
 *       |                                |
 *       |--------------------------------|
 *       |  Interrupt Vector Registers    | $FFxxFFF0
 *       |          (16 bytes)            |
 *       +--------------------------------+
 */

#define	NVXPORTS	9

#define  NENVELOPES           30
#define  NPACKETS             NENVELOPES
#define  USER_AREA            (0x0100)
#define  CHANNEL_H            (0x0100)
#define  ENVELOPE_AREA        (CHANNEL_H + sizeof(struct channel))
#define  ENVELOPE_AREA_SIZE   (NENVELOPES * sizeof(struct envelope))
#define  PACKET_AREA          (ENVELOPE_AREA + ENVELOPE_AREA_SIZE)
#define  PACKET_AREA_SIZE     (NPACKETS * sizeof(struct packet))
#define  INIT_INFO_AREA       (PACKET_AREA + PACKET_AREA_SIZE)
#define  INIT_INFO_AREA_SIZE  (NVXPORTS * sizeof(struct init_info))
#define  WRING_AREA           roundup(INIT_INFO_AREA + INIT_INFO_AREA_SIZE, 8)
#define  WRING_AREA_SIZE      (NVXPORTS * sizeof(struct wring))
#define  RRING_AREA           (WRING_AREA + WRING_AREA_SIZE)
#define  RRING_AREA_SIZE      (NVXPORTS * sizeof(struct rring))
#define  USER_AREA_SIZE       (RRING_AREA + RRING_AREA_SIZE - USER_AREA)

/* Hardware's view of the dual ported memory */
#define	LOCAL_DPMEM_ADDRESS	0x00f30000
@


1.9
log
@typos from alexey dobriyan;
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.8 2004/05/26 21:15:31 miod Exp $ */
@


1.8
log
@Use physical addresses as seen in the A24 MVME332XT address space, this
allows the driver to really don't care about its VME address and simplifies
some code.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.7 2004/05/25 21:21:24 miod Exp $ */
d96 2
a97 2
#define IOCTL_TCGETDF         0x5447   /* get default termio stuct */
#define IOCTL_TCSETDF         0x5448   /* set default termio stuct */
@


1.7
log
@Make this driver aware of non-1:1 mappings.
This currently mimcs the existing code, which can be cleaned up further.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.6 2003/12/27 21:58:20 miod Exp $ */
d399 2
a400 2
#define  USER_AREA            (sc->board_addr + 0x0100)
#define  CHANNEL_H            (sc->board_addr + 0x0100)
d413 2
a414 2
#define  LO(x) (u_short)((unsigned long)x & 0x0000FFFF)
#define  HI(x) (u_short)((unsigned long)x >> 16)
@


1.6
log
@Basic cleaning and KNF; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.5 2003/12/25 21:01:39 miod Exp $ */
d262 2
a263 2
	volatile short   ioctl_cmd_h;
	volatile short   ioctl_cmd_l;
d266 4
a269 4
	volatile short   ioctl_arg_h;
	volatile short   ioctl_arg_l;
	volatile short   ioctl_mode_h;
	volatile short   ioctl_mode_l;
d272 2
a273 2
	volatile short   error_h;
	volatile short   error_l;
d295 8
a302 8
	volatile short             command_pipe_head_ptr_h;
	volatile short             command_pipe_head_ptr_l;
	volatile short             command_pipe_tail_ptr_h;
	volatile short             command_pipe_tail_ptr_l;
	volatile short             status_pipe_head_ptr_h;
	volatile short             status_pipe_head_ptr_l;
	volatile short             status_pipe_tail_ptr_h;
	volatile short             status_pipe_tail_ptr_l;
@


1.5
log
@Provide common D16 vmespace block access functions, instead of vs and vx each
rolling their own.

Use them more cleverly in vx, in order to get the driver to at least attach
and frob chips. Not tested besides multiuser boot (hence ttyflags -a), and
checking cu(1) connects. More testing to come once I remember where I have
hidden the 332XT transition module...
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.4 2003/11/09 00:31:59 miod Exp $ */
a48 4
#define NOWAIT                0
#define WAIT                  1
#define WAIT_POLL             2

a350 18
struct init_packet {
	volatile char              eye_catcher[4];
	volatile unsigned char     command_pipe_number;
	volatile unsigned char     status_pipe_number;
	volatile char              filler_0[4];
	volatile short             command;
	volatile char              filler_1[3];
	volatile char              interrupt_level;
	volatile char              filler_2[2];
	volatile short             init_info_ptr_h;
	volatile short             init_info_ptr_l;
	volatile char              filler_3[7];
	volatile char              interrupt_vec;
	volatile char              filler_4[6];
	volatile short             error_h;
	volatile short             error_l;
};

d394 2
a395 1
#define  ALIGNIT(p)           (((u_int)(p) + 7) & ~7)
d406 3
a408 3
#define  INIT_INFO_AREA_SIZE  (9 * sizeof(struct init_info))
#define  WRING_AREA           ALIGNIT(INIT_INFO_AREA + INIT_INFO_AREA_SIZE)
#define  WRING_AREA_SIZE      (9 * sizeof(struct wring))
d410 1
a410 1
#define  RRING_AREA_SIZE      (9 * sizeof(struct rring))
a414 2


@


1.4
log
@Typos; Jonathan Gray
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.3 2003/10/11 22:08:57 miod Exp $ */
d40 1
a40 1
/*0x6*/volatile u_short ipc_cr;	 /* IPC control ceg */
d262 2
a263 1
	volatile char    filler2[2];
d268 2
d274 1
d286 1
a286 1
	} parameter_block;
a289 31
struct ioctl_a_packet {      /* 68 bytes */
	volatile u_long  link;       /* was eyecatcher */
	volatile u_char  command_pipe_number;
	volatile u_char  status_pipe_number;
	volatile char    filler0[4];
	volatile short   command;
	volatile char    filler1[1];
	volatile char    command_dependent;
	volatile char    filler2[2];
	volatile u_char  device_number;
	volatile char    filler3[1];
	volatile short   ioctl_cmd_h;
	volatile short   ioctl_cmd_l;
	volatile short   ioctl_arg_h;
	volatile short   ioctl_arg_l;
	volatile short   ioctl_mode_h;
	volatile short   ioctl_mode_l;
	volatile char    filler4[6];
	volatile short   error_h;
	volatile short   error_l;
	volatile short   event_code;
	volatile char    filler5[6];
	volatile unsigned short c_iflag;
	volatile unsigned short c_oflag;
	volatile unsigned short c_cflag;
	volatile unsigned short c_lflag;
	volatile char           c_line;
	volatile unsigned char  c_cc[VNCC];
	short   reserved;    /* for alignment */
};

d373 1
a373 11
struct event_packet {
	volatile char              eye_catcher[4];
	volatile unsigned char     command_pipe_number;
	volatile unsigned char     status_pipe_number;
	volatile char              filler_0[4];
	volatile short             command;
	volatile char              filler_1[4];
	volatile char              device_number;
	volatile char              filler_2[19];
	volatile short             error_h;
	volatile short             error_l;
a387 56
	volatile unsigned short    event_code;		/* returned from IPC */
};

struct open_packet {
	volatile char              eye_catcher[4];
	volatile unsigned char     command_pipe_number;
	volatile unsigned char     status_pipe_number;
	volatile char              filler_0[4];
	volatile short             command;
	volatile char              filler_1[4];
	volatile char              device_number;
   volatile char              filler_2[19];
	volatile short             error_h;
	volatile short             error_l;
	volatile unsigned short    event_code;		/* returned from IPC */
};

struct close_packet {
	volatile char              eye_catcher[4];
	volatile unsigned char     command_pipe_number;
	volatile unsigned char     status_pipe_number;
	volatile char              filler_0[4];
	volatile short             command;
	volatile char              filler_1[4];
	volatile char              device_number;
   volatile char              filler_2[19];
	volatile short             error_h;
	volatile short             error_l;
	volatile unsigned short    event_code;		/* returned from IPC */
};

struct read_wakeup_packet {
	volatile char              eye_catcher[4];
	volatile unsigned char     command_pipe_number;
	volatile unsigned char     status_pipe_number;
	volatile char              filler_0[4];
	volatile short             command;
	volatile char              filler_1[4];
	volatile char              device_number;
   volatile char              filler_2[19];
	volatile short             error_h;
	volatile short             error_l;
};

struct write_wakeup_packet {
	volatile char              eye_catcher[4];
	volatile unsigned char     command_pipe_number;
	volatile unsigned char     status_pipe_number;
	volatile char              filler_0[4];
	volatile short             command;
	volatile char              filler_1[4];
	volatile char              device_number;
   volatile char              filler_2[19];
	volatile short             error_h;
	volatile short             error_l;
};
@


1.3
log
@Nuke trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.2 2001/01/14 20:25:23 smurph Exp $ */
d79 1
a79 1
#define CMD_PROCCESED         0x00FF
@


1.2
log
@Complete move to UVM virtual memory system.  More header fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.1 1999/05/29 04:41:45 smurph Exp $ */
d6 1
a6 1
 *   
d31 1
a31 1
 */  
d39 1
a39 1
/*0x5*/volatile u_char  unused1;   
d43 1
a43 1
/*0xB*/volatile u_char  reserved3;   
d45 1
a45 1
/*0xD*/volatile u_char  unused2;   
d272 2
a273 2
	volatile short   error_h;   
	volatile short   error_l;   
d304 2
a305 2
	volatile short   error_h;   
	volatile short   error_l;   
d396 2
a397 2
	volatile short             error_h;   
	volatile short             error_l;   
d409 2
a410 2
	volatile short             error_h;   
	volatile short             error_l;   
d437 2
a438 2
	volatile short             error_h;   
	volatile short             error_l;   
d451 2
a452 2
	volatile short             error_h;   
	volatile short             error_l;   
d465 2
a466 2
	volatile short             error_h;   
	volatile short             error_l;   
d478 2
a479 2
	volatile short             error_h;   
	volatile short             error_l;   
d483 1
a483 1
 * All structures must reside in dual port user memory. 
@


1.1
log
@Added vme bus device drivers. MVME328, MVME376, MVME332
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.0 1999/03/28 05:11:42 smurph Exp $ */
d217 1
a217 1
struct sgttyb {      /* 6 bytes */
d279 1
a279 1
		struct  sgttyb  sgt;
@


1.1.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: vxreg.h,v 1.2 2001/01/14 20:25:23 smurph Exp $ */
d217 1
a217 1
struct vx_sgttyb {      /* 6 bytes */
d279 1
a279 1
		struct  vx_sgttyb  sgt;
@


1.1.4.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d6 1
a6 1
 *
d31 1
a31 1
 */
d39 2
a40 2
/*0x5*/volatile u_char  unused1;
/*0x6*/volatile u_short ipc_cr;	 /* IPC control reg */
d43 1
a43 1
/*0xB*/volatile u_char  reserved3;
d45 1
a45 1
/*0xD*/volatile u_char  unused2;
d49 4
d79 1
a79 1
#define CMD_PROCESSED         0x00FF
d262 1
a262 2
	volatile char    filler2[1];
	volatile char	 interrupt_level;	/* init only */
a266 2
#define	init_info_ptr_h	ioctl_cmd_h
#define	init_info_ptr_l	ioctl_cmd_l
a270 1
#define	interrupt_vec	ioctl_mode_l
d272 2
a273 2
	volatile short   error_h;
	volatile short   error_l;
d282 1
a282 1
	} pb;
d286 31
d382 29
a410 1
/* IPC event codes */
d425 56
d483 1
a483 1
 * All structures must reside in dual port user memory.
d509 1
a509 2

#define	NVXPORTS	9
d520 3
a522 3
#define  INIT_INFO_AREA_SIZE  (NVXPORTS * sizeof(struct init_info))
#define  WRING_AREA           roundup(INIT_INFO_AREA + INIT_INFO_AREA_SIZE, 8)
#define  WRING_AREA_SIZE      (NVXPORTS * sizeof(struct wring))
d524 1
a524 1
#define  RRING_AREA_SIZE      (NVXPORTS * sizeof(struct rring))
d529 2
@


1.1.4.3
log
@Merge with the trunk
@
text
@d262 2
a263 2
	volatile u_short ioctl_cmd_h;
	volatile u_short ioctl_cmd_l;
d266 4
a269 4
	volatile u_short ioctl_arg_h;
	volatile u_short ioctl_arg_l;
	volatile u_short ioctl_mode_h;
	volatile u_short ioctl_mode_l;
d272 2
a273 2
	volatile u_short error_h;
	volatile u_short error_l;
d295 8
a302 8
	volatile u_short           command_pipe_head_ptr_h;
	volatile u_short           command_pipe_head_ptr_l;
	volatile u_short           command_pipe_tail_ptr_h;
	volatile u_short           command_pipe_tail_ptr_l;
	volatile u_short           status_pipe_head_ptr_h;
	volatile u_short           status_pipe_head_ptr_l;
	volatile u_short           status_pipe_tail_ptr_h;
	volatile u_short           status_pipe_tail_ptr_l;
d399 2
a400 2
#define  USER_AREA            (0x0100)
#define  CHANNEL_H            (0x0100)
d413 2
a414 2
/* Hardware's view of the dual ported memory */
#define	LOCAL_DPMEM_ADDRESS	0x00f30000
@


