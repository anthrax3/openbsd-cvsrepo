head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2006.04.26.21.06.08;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.30.19.02.05;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.02.14.00.43;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.17.08.36.22;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.27.23.58.11;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: if_levar.h,v 1.5 2006/04/26 21:06:08 miod Exp $	*/
/*	$NetBSD: if_levar.h,v 1.5 1996/05/07 01:27:32 thorpej Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_le.c	8.2 (Berkeley) 11/16/93
 */

/*
 * Ethernet software status per interface.
 *
 * Each interface is referenced by a network interface structure,
 * arpcom.ac_if, which the routing code uses to locate the interface.
 * This structure contains the output queue for the interface, its address, ...
 */
struct	le_softc {
	struct	am7990_softc	 sc_am7990;	/* glue to MI code */
	struct	intrhand	 sc_ih;		/* interrupt vectoring */
	u_int			 sc_csr;	/* CSR image */
	void 			*sc_r1;		/* LANCE registers */
	u_int 			 sc_ipl;
	u_int 			 sc_vec;
};
@


1.5
log
@The dual-ported memory of the MVME376 boards is D32 addressable, say the
documentation, so we can use the MI {zero,copy{to,from}}buf_contig
callbacks, which rely upon bcopy() and bzero(), instead of their d16_bcopy()
and d16_bzero() equivalents. No functional change, except an unnoticeable
speedup.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.4 2004/07/30 19:02:05 miod Exp $	*/
@


1.4
log
@Move evcount structures inside struct intrhand, this makes more sense and
gives us more counters in the process.

Also clean up intrhand structures and usage, especially move them to SLISTs.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.3 2004/07/02 14:00:43 miod Exp $	*/
d48 1
a48 1
	u_int16_t		 sc_csr;	/* CSR image */
d50 2
a51 2
	u_char			 sc_ipl;
	u_char			 sc_vec;
@


1.3
log
@Switch mvme88k to evcount, but keep maintaining intrcnt[] too for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.2 2004/05/17 08:36:22 miod Exp $	*/
a49 1
	struct	evcount		 sc_intrcnt;
@


1.2
log
@KNF and minor cleaning.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.1 2003/12/27 23:58:11 miod Exp $	*/
d50 1
a50 2
	struct	evcnt		 sc_intrcnt;
	struct	evcnt		 sc_errcnt;
@


1.1
log
@Replace the MVME376 driver from a homemade and dusty if_ve driver to
a ``regular'' if_le driver, sharing the common am7990 code.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_levar.h,v 1.4 2003/06/02 23:27:50 millert Exp $	*/
d46 8
a53 9
	struct	am7990_softc sc_am7990;	/* glue to MI code */

	struct	intrhand sc_ih;	/* interrupt vectoring */
	void 	*sc_r1;		/* LANCE registers */
	u_short	csr;        		/* Control/Status reg image */
	struct	evcnt	sc_intrcnt;
	struct	evcnt	sc_errcnt;
	u_char               sc_ipl;
	u_char               sc_vec;
a54 1

@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 9
a54 8
	struct	am7990_softc	 sc_am7990;	/* glue to MI code */
	struct	intrhand	 sc_ih;		/* interrupt vectoring */
	u_int16_t		 sc_csr;	/* CSR image */
	void 			*sc_r1;		/* LANCE registers */
	struct	evcnt		 sc_intrcnt;
	struct	evcnt		 sc_errcnt;
	u_char			 sc_ipl;
	u_char			 sc_vec;
d56 1
@


