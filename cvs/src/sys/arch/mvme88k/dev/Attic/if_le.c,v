head	1.17;
access;
symbols
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.30
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.28
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.26
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.24
	OPENBSD_5_0:1.15.0.22
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.20
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.18
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.14
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	SMP:1.3.0.2;
locks; strict;
comment	@ * @;


1.17
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.16;

1.16
date	2013.09.24.20.10.48;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.08.14.36.10;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.26.21.09.48;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.26.21.06.08;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.11.07.22.00;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.27.14.07.38;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.30.19.02.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.02.14.00.43;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.02.11.19.58;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.17.08.36.22;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.06.18.37.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.29.06.23.45;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.24.19.51.48;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.30.21.25.59;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.12.28.19.43.35;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.27.23.58.11;	author miod;	state Exp;
branches;
next	;

1.3.2.1
date	2004.06.05.23.09.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: if_le.c,v 1.16 2013/09/24 20:10:48 miod Exp $ */

/*-
 * Copyright (c) 1982, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_le.c	8.2 (Berkeley) 10/30/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <net/if.h>

#ifdef INET
#include <netinet/in.h>
#include <netinet/if_ether.h>
#endif

#include <net/if_media.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

#include <mvme88k/dev/if_lereg.h>
#include <mvme88k/dev/if_levar.h>
#include <mvme88k/dev/vme.h>

/* autoconfiguration driver */
void  leattach(struct device *, struct device *, void *);
int   lematch(struct device *, void *, void *);

const struct cfattach le_ca = {
	sizeof(struct le_softc), lematch, leattach
};

void	vlewrcsr(struct lance_softc *, uint16_t, uint16_t);
uint16_t vlerdcsr(struct lance_softc *, uint16_t);
void	nvram_cmd(struct lance_softc *, uint8_t, uint16_t);
uint16_t nvram_read(struct lance_softc *, uint8_t);
void	vleetheraddr(struct lance_softc *);
void	vleinit(struct lance_softc *);
void	vlereset(struct lance_softc *);
int	vle_intr(void *);

/* send command to the nvram controller */
void
nvram_cmd(struct lance_softc *sc, uint8_t cmd, uint16_t addr)
{
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
	int i;

	for (i = 0; i < 8; i++) {
		reg1->ler1_ear = ((cmd | (addr << 1)) >> i); 
		CDELAY; 
	} 
}

/* read nvram one bit at a time */
uint16_t
nvram_read(struct lance_softc *sc, uint8_t nvram_addr)
{
	uint16_t val = 0, mask = 0x04000;
	uint16_t wbit;
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;

	((struct le_softc *)sc)->sc_csr = 0x4f;
	ENABLE_NVRAM;
	nvram_cmd(sc, NVRAM_RCL, 0);
	DISABLE_NVRAM;
	CDELAY;
	ENABLE_NVRAM;
	nvram_cmd(sc, NVRAM_READ, nvram_addr);
	for (wbit = 0; wbit < 15; wbit++) {
		if (reg1->ler1_ear & 0x01)
			val |= mask;
		else
			val &= ~mask;
		mask = mask >> 1;
		CDELAY;
	}
	if (reg1->ler1_ear & 0x01)
		val |= 0x8000;
	else
		val &= 0x7fff;
	CDELAY;
	DISABLE_NVRAM;
	return (val);
}

void
vleetheraddr(struct lance_softc *sc)
{
	uint8_t *cp = sc->sc_arpcom.ac_enaddr;
	uint16_t ival[3];
	int i;

	for (i = 0; i < 3; i++) {
		ival[i] = nvram_read(sc, i);
	}
	memcpy(cp, &ival[0], 6);
}

void
vlewrcsr(struct lance_softc *sc, uint16_t port, uint16_t val)
{
	struct vlereg1 *ler1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;

	ler1->ler1_rap = port;
	ler1->ler1_rdp = val;
}

uint16_t
vlerdcsr(struct lance_softc *sc, uint16_t port)
{
	struct vlereg1 *ler1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
	uint16_t val;

	ler1->ler1_rap = port;
	val = ler1->ler1_rdp;
	return (val);
}

/* init MVME376, set ipl and vec */
void
vleinit(struct lance_softc *sc)
{
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
	uint8_t vec = ((struct le_softc *)sc)->sc_vec;
	uint8_t ipl = ((struct le_softc *)sc)->sc_ipl;

	((struct le_softc *)sc)->sc_csr = 0x4f;
	WRITE_CSR_AND(ipl);
	SET_VEC(vec);
	return;
}

/* MVME376 hardware reset */
void
vlereset(struct lance_softc *sc)
{
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;

	RESET_HW;
#ifdef LEDEBUG
	if (sc->sc_debug) {
		printf("%s: hardware reset\n", sc->sc_dev.dv_xname);
	}
#endif
	SYSFAIL_CL;
}

int
vle_intr(void *sc)
{
	struct le_softc *lesc = (struct le_softc *)sc;
	struct vlereg1 *reg1 = (struct vlereg1 *)lesc->sc_r1;
	int rc;

	rc = am7990_intr(sc);
	ENABLE_INTR;
	return (rc);
}

int
lematch(struct device *parent, void *vcf, void *args)
{
	struct confargs *ca = args;
	bus_space_tag_t iot = ca->ca_iot;
	bus_space_handle_t ioh;
	int rc;

	if (bus_space_map(iot, ca->ca_paddr, PAGE_SIZE, 0, &ioh) != 0)
		return 0;
	rc = badaddr((vaddr_t)bus_space_vaddr(iot, ioh), 2);
	bus_space_unmap(iot, ioh, PAGE_SIZE);

	return rc == 0;
}

/*
 * Interface exists: make available by filling in network interface
 * record.  System will initialize the interface when it is ready
 * to accept packets.
 */
void
leattach(struct device *parent, struct device *self, void *aux)
{
	struct le_softc *lesc = (struct le_softc *)self;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	struct confargs *ca = aux;
	paddr_t paddr;
	int card;
	bus_space_tag_t iot = ca->ca_iot;
	bus_space_handle_t ioh, memh;

	if (ca->ca_vec < 0) {
		printf(": no more interrupts!\n");
		return;
	}
	if (ca->ca_ipl < 0)
		ca->ca_ipl = IPL_NET;

	/* 
	 * MVME376 uses its own dual-ported RAM for buffers.
	 * Its address is set by DIP switches on board.  We support the six
	 * Motorola address locations; however, the board can be set up at
	 * any other address.
	 */
	switch (ca->ca_paddr) {
	case 0xffff1200:
		card = 0;
		break;
	case 0xffff1400:
		card = 1;
		break;
	case 0xffff1600:
		card = 2;
		break;
	case 0xffff5400:
		card = 3;
		break;
	case 0xffff5600:
		card = 4;
		break;
	case 0xffffa400:
		card = 5;
		break;
	default:
		printf(": unsupported address\n");
		return;
	}

	if (bus_space_map(iot, ca->ca_paddr, PAGE_SIZE, 0, &ioh) != 0) {
		printf(": can't map registers!\n");
		return;
	}

	paddr = VLEMEMBASE - (card * VLEMEMSIZE);
	if (bus_space_map(iot, paddr, VLEMEMSIZE, BUS_SPACE_MAP_LINEAR,
	    &memh) != 0) {
		printf(": can't map buffers!\n");
		bus_space_unmap(iot, ioh, PAGE_SIZE);
		return;
	}
	lesc->sc_r1 = (void *)bus_space_vaddr(iot, ioh);
	lesc->sc_ipl = ca->ca_ipl;
	lesc->sc_vec = ca->ca_vec;

	sc->sc_mem = (void *)bus_space_vaddr(iot, memh);
	sc->sc_memsize = VLEMEMSIZE;
	sc->sc_addr = paddr & 0x00ffffff;
	sc->sc_conf3 = LE_C3_BSWP;
	sc->sc_hwreset = vlereset;
	sc->sc_rdcsr = vlerdcsr;
	sc->sc_wrcsr = vlewrcsr;
	sc->sc_hwinit = vleinit;
	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

	/* get Ethernet address */
	vleetheraddr(sc);

	am7990_config(&lesc->sc_am7990);

	/* connect the interrupt */
	lesc->sc_ih.ih_fn = vle_intr;
	lesc->sc_ih.ih_arg = sc;
	lesc->sc_ih.ih_wantframe = 0;
	lesc->sc_ih.ih_ipl = ca->ca_ipl;
	vmeintr_establish(ca->ca_vec, &lesc->sc_ih, self->dv_xname);
}
@


1.16
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.15 2006/05/08 14:36:10 miod Exp $ */
@


1.15
log
@Replace gazillions of badvaddr() or badwordaddr() calls with badaddr() calls.
With a few prototype declarations shuffling, this finally allows
<machine/locore.h> to die.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.14 2006/04/26 21:09:48 miod Exp $ */
d54 2
d67 1
a67 1
struct cfattach le_ca = {
d71 8
a78 8
void vlewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t vlerdcsr(struct am7990_softc *, u_int16_t);
void nvram_cmd(struct am7990_softc *, u_char, u_short);
u_int16_t nvram_read(struct am7990_softc *, u_char);
void vleetheraddr(struct am7990_softc *);
void vleinit(struct am7990_softc *);
void vlereset(struct am7990_softc *);
int vle_intr(void *);
d82 1
a82 4
nvram_cmd(sc, cmd, addr)
	struct am7990_softc *sc;
	u_char cmd;
	u_short addr;
d94 2
a95 4
u_int16_t
nvram_read(sc, nvram_addr)
	struct am7990_softc *sc;
	u_char nvram_addr;
d97 2
a98 2
	u_short val = 0, mask = 0x04000;
	u_int16_t wbit;
d126 1
a126 2
vleetheraddr(sc)
	struct am7990_softc *sc;
d128 2
a129 2
	u_char *cp = sc->sc_arpcom.ac_enaddr;
	u_int16_t ival[3];
d139 1
a139 3
vlewrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
d147 2
a148 4
u_int16_t
vlerdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
d151 1
a151 1
	u_int16_t val;
d160 1
a160 2
vleinit(sc)
	struct am7990_softc *sc;
d163 2
a164 2
	u_char vec = ((struct le_softc *)sc)->sc_vec;
	u_char ipl = ((struct le_softc *)sc)->sc_ipl;
d174 1
a174 2
vlereset(sc)
	struct am7990_softc *sc;
d188 1
a188 2
vle_intr(sc)
	void *sc;
d200 1
a200 3
lematch(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
d221 1
a221 4
leattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
d224 1
a224 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d239 4
a242 5
	 * get the first available etherbuf.  MVME376 uses its own dual-ported 
	 * RAM for etherbuf.  It is set by dip switches on board.  We support 
	 * the six Motorola address locations, however, the board can be set up
	 * at any other address.
	 * XXX These physical addresses should be mapped in extio!!!
d292 5
a296 5
	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;
d301 1
a301 1
	am7990_config(sc);
@


1.14
log
@Define BUS_SPACE_MAP_LINEAR and use it when appropriate. Right now
bus_space_map() always maps everything linear, but this could change
in the future.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.13 2006/04/26 21:06:08 miod Exp $ */
d222 1
a222 1
	rc = badvaddr((vaddr_t)bus_space_vaddr(iot, ioh), 2);
@


1.13
log
@The dual-ported memory of the MVME376 boards is D32 addressable, say the
documentation, so we can use the MI {zero,copy{to,from}}buf_contig
callbacks, which rely upon bcopy() and bzero(), instead of their d16_bcopy()
and d16_bzero() equivalents. No functional change, except an unnoticeable
speedup.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.12 2006/01/11 07:22:00 miod Exp $ */
d291 2
a292 1
	if (bus_space_map(iot, paddr, VLEMEMSIZE, 0, &memh) != 0) {
@


1.12
log
@Switch to __HAVE_DEVICE_REGISTER to find the device we're booted from.
Simpler, better.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.11 2005/04/27 14:07:38 miod Exp $ */
a33 3
/* This card lives in D16 space */
#define	__BUS_SPACE_RESTRICT_D16__

a76 3
void vle_copyfrombuf_contig(struct am7990_softc *, void *, int, int);
void vle_copytobuf_contig(struct am7990_softc *, void *, int, int);
void vle_zerobuf_contig(struct am7990_softc *, int, int);
a209 32
void
vle_copytobuf_contig(sc, from, boff, len)
	struct am7990_softc *sc;
	void *from;
	int boff, len;
{
	volatile caddr_t buf = sc->sc_mem;

	d16_bcopy(from, buf + boff, len);
}

void
vle_copyfrombuf_contig(sc, to, boff, len)
	struct am7990_softc *sc;
	void *to;
	int boff, len;
{
	volatile caddr_t buf = sc->sc_mem;

	d16_bcopy(buf + boff, to, len);
}

void
vle_zerobuf_contig(sc, boff, len)
	struct am7990_softc *sc;
	int boff, len;
{
	volatile caddr_t buf = sc->sc_mem;

	d16_bzero(buf + boff, len);
}

d308 5
a312 5
	sc->sc_copytodesc = vle_copytobuf_contig;
	sc->sc_copyfromdesc = vle_copyfrombuf_contig;
	sc->sc_copytobuf = vle_copytobuf_contig;
	sc->sc_copyfrombuf = vle_copyfrombuf_contig;
	sc->sc_zerobuf = vle_zerobuf_contig;
@


1.11
log
@Always include <uvm/uvm_extern.h> before <machine/cmmu.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.10 2004/07/30 19:02:05 miod Exp $ */
a290 4

	/* Are we the boot device? */
	if (ca->ca_paddr == bootaddr)
		bootdv = self;
@


1.10
log
@Move evcount structures inside struct intrhand, this makes more sense and
gives us more counters in the process.

Also clean up intrhand structures and usage, especially move them to SLISTs.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.9 2004/07/02 14:00:43 miod Exp $ */
a54 1
#include <machine/cmmu.h>
@


1.9
log
@Switch mvme88k to evcount, but keep maintaining intrcnt[] too for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.8 2004/07/02 11:19:58 miod Exp $ */
a43 1
#include <sys/evcount.h>
a211 1
	lesc->sc_intrcnt.ec_count++;
d367 1
a367 3
	vmeintr_establish(ca->ca_vec, &lesc->sc_ih);
	evcount_attach(&lesc->sc_intrcnt, self->dv_xname,
	    (void *)&lesc->sc_ih.ih_ipl, &evcount_intr);
@


1.8
log
@Be sure to fill intrhand structures correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.7 2004/05/17 08:36:22 miod Exp $ */
d44 1
d209 2
a210 1
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d213 1
a361 3
	evcnt_attach(&sc->sc_dev, "intr", &lesc->sc_intrcnt);
	evcnt_attach(&sc->sc_dev, "errs", &lesc->sc_errcnt);

d370 2
@


1.7
log
@KNF and minor cleaning.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.6 2004/05/06 18:37:35 miod Exp $ */
d367 1
@


1.6
log
@Do not leak resources if bus_space_map() fails during attach, or we don't
recognize the board address.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.5 2004/04/29 06:23:45 miod Exp $ */
d92 1
a93 1
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d95 2
a96 2
	for (i=0;i<8;i++) {
		reg1->ler1_ear=((cmd|(addr<<1))>>i); 
a108 1
	/* these used by macros DO NOT CHANGE!*/
d110 2
a111 1
	((struct le_softc *)sc)->csr = 0x4f;
d118 6
a123 3
	for (wbit=0; wbit<15; wbit++) {
		(reg1->ler1_ear & 0x01) ? (val = (val | mask)) : (val = (val & (~mask)));
		mask = mask>>1;
d126 4
a129 1
	(reg1->ler1_ear & 0x01) ? (val = (val | 0x8000)) : (val = (val & 0x7FFF));
d139 1
a139 1
	u_char * cp = sc->sc_arpcom.ac_enaddr;
d141 1
a141 1
	u_char i;
d143 1
a143 1
	for (i=0; i<3; i++) {
d154 1
a154 1
	register struct vlereg1 *ler1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d165 1
a165 1
	register struct vlereg1 *ler1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d178 1
a178 1
	register struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d181 3
a183 2
	((struct le_softc *)sc)->csr = 0x4f;
	WRITE_CSR_AND( ~ipl );
d193 2
a194 1
	register struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
a201 1
	return;
d208 1
a208 1
	register struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
@


1.5
log
@Correctly initialize the hardware's memory address on MVME376, it uses
A24 accesses. Fixes the reccurent timeout problems.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.4 2004/04/24 19:51:48 miod Exp $ */
a216 1
	dma_cachectl((vaddr_t)buf + boff, len, DMA_CACHE_SYNC);
a227 1
	dma_cachectl((vaddr_t)buf + boff, len, DMA_CACHE_SYNC_INVAL);
a237 1
	dma_cachectl((vaddr_t)buf + boff, len, DMA_CACHE_SYNC);
d270 1
a270 1
	register struct le_softc *lesc = (struct le_softc *)self;
d273 1
a273 1
	caddr_t addr;
d276 1
a276 1
	bus_space_handle_t ioh;
a284 5
	if (bus_space_map(iot, ca->ca_paddr, PAGE_SIZE, 0, &ioh) != 0) {
		printf(": can't map registers!\n");
		return;
	}

d320 4
a323 1
	addr = (caddr_t)(VLEMEMBASE - (card * VLEMEMSIZE));
d325 4
a328 4
	sc->sc_mem = (void *)mapiodev(addr, VLEMEMSIZE);
	if (sc->sc_mem == NULL) {
		printf("\n%s: no more memory in external I/O map\n",
		    sc->sc_dev.dv_xname);
a330 2
	sc->sc_addr = (paddr_t)addr & 0x00ffffff;

d334 2
d337 1
d348 2
a349 1
	/* get ether address */
d361 1
a361 1
	vmeintr_establish(ca->ca_vec + 0, &lesc->sc_ih);
@


1.4
log
@Preliminary switch to an mvme88k bus_space world. Not all drivers have been
converted yet, and they rely upon some linear mappings provided by bus_space.

In order to not impact performance, almost all the bus_space accesses go
through macros and inline functions. This currently restricts us to D16 and
D32 access modes, which are selected at compilation time. Since there are no
plans to support D8 vme devices in the future, this is acceptable for now.

This makes the "len" locator for vme devices go away, and allows to simplify
some code which was using the pcctwo device, and will now directly access
hardware which is known to exist, rather than wait until the device is
attached.

While there, try to enforce more interrupt vector number checks, since these
changes pointed out that dart(4) had been working correctly so far by sheer
luck only.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.3 2003/12/30 21:25:59 miod Exp $ */
d336 1
a336 5
	sc->sc_addr = kvtop((vaddr_t)sc->sc_mem);
	if (sc->sc_addr == 0L) {
		printf("\n%s: kvtop() failed!\n", sc->sc_dev.dv_xname);
		return;
	}
@


1.3
log
@Add support for all six Motorola-supported configurations of MVME376
cards. The original code would only work with the first configuration,
as the etherbuf addresses grow _downwards_ from 0xfd6c0000 with Motorola's
jumper configuration.

Reference: MVME376 Ethernet Communication Controller User's Manual (MVME376/D1)

While there, do not panic() on failure to attach, but simply print an
error message and return.

XXX Proper care of the memory mapping still needs to be written, as the memory
XXX space of the MVME376 is always outside extio.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.2 2003/12/28 19:43:35 miod Exp $ */
d34 2
a35 1
#include "bpfilter.h"
d250 8
d259 1
a259 1
	return (!badvaddr((vaddr_t)ca->ca_vaddr, 2));
d278 14
d304 1
a304 1
	switch ((int)ca->ca_paddr) {
d342 1
a342 1
	lesc->sc_r1 = (void *)ca->ca_vaddr;
@


1.3.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d34 1
a34 2
/* This card lives in D16 space */
#define	__BUS_SPACE_RESTRICT_D16__
d91 1
a92 1
	int i;
d94 2
a95 2
	for (i = 0; i < 8; i++) {
		reg1->ler1_ear = ((cmd | (addr << 1)) >> i); 
d108 1
d110 1
a110 2

	((struct le_softc *)sc)->sc_csr = 0x4f;
d117 3
a119 6
	for (wbit = 0; wbit < 15; wbit++) {
		if (reg1->ler1_ear & 0x01)
			val |= mask;
		else
			val &= ~mask;
		mask = mask >> 1;
d122 1
a122 4
	if (reg1->ler1_ear & 0x01)
		val |= 0x8000;
	else
		val &= 0x7fff;
d132 1
a132 1
	u_char *cp = sc->sc_arpcom.ac_enaddr;
d134 1
a134 1
	int i;
d136 1
a136 1
	for (i = 0; i < 3; i++) {
d147 1
a147 1
	struct vlereg1 *ler1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d158 1
a158 1
	struct vlereg1 *ler1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d171 1
a171 1
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d174 2
a175 3

	((struct le_softc *)sc)->sc_csr = 0x4f;
	WRITE_CSR_AND(ipl);
d185 1
a185 2
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;

d193 1
d200 1
a200 1
	struct vlereg1 *reg1 = (struct vlereg1 *)((struct le_softc *)sc)->sc_r1;
d216 1
d228 1
d239 1
a248 8
	bus_space_tag_t iot = ca->ca_iot;
	bus_space_handle_t ioh;
	int rc;

	if (bus_space_map(iot, ca->ca_paddr, PAGE_SIZE, 0, &ioh) != 0)
		return 0;
	rc = badvaddr((vaddr_t)bus_space_vaddr(iot, ioh), 2);
	bus_space_unmap(iot, ioh, PAGE_SIZE);
d250 1
a250 1
	return rc == 0;
d264 1
a264 1
	struct le_softc *lesc = (struct le_softc *)self;
d267 1
a267 1
	paddr_t paddr;
a268 9
	bus_space_tag_t iot = ca->ca_iot;
	bus_space_handle_t ioh, memh;

	if (ca->ca_vec < 0) {
		printf(": no more interrupts!\n");
		return;
	}
	if (ca->ca_ipl < 0)
		ca->ca_ipl = IPL_NET;
d281 1
a281 1
	switch (ca->ca_paddr) {
d305 6
a310 2
	if (bus_space_map(iot, ca->ca_paddr, PAGE_SIZE, 0, &ioh) != 0) {
		printf(": can't map registers!\n");
d313 3
a315 5

	paddr = VLEMEMBASE - (card * VLEMEMSIZE);
	if (bus_space_map(iot, paddr, VLEMEMSIZE, 0, &memh) != 0) {
		printf(": can't map buffers!\n");
		bus_space_unmap(iot, ioh, PAGE_SIZE);
d318 2
a319 1
	lesc->sc_r1 = (void *)bus_space_vaddr(iot, ioh);
a321 2

	sc->sc_mem = (void *)bus_space_vaddr(iot, memh);
a322 1
	sc->sc_addr = paddr & 0x00ffffff;
d333 1
a333 2

	/* get Ethernet address */
d345 1
a345 1
	vmeintr_establish(ca->ca_vec, &lesc->sc_ih);
@


1.2
log
@dma_cachectl() takes a va and computes the pa from it, no need to invoke it
a second time with the pa...
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.1 2003/12/27 23:58:11 miod Exp $ */
d268 1
d277 3
a279 3
	 * the four Motorola address locations, however, the board can be set up
	 * at any other address. We must map this space into the extio map. 
	 * XXX-smurph.
d282 2
a283 2
	case 0xFFFF1200:
		addr = (caddr_t)0xFD6C0000;
d285 2
a286 2
	case 0xFFFF1400:
		addr = (caddr_t)0xFD700000;
d288 2
a289 2
	case 0xFFFF1600:
		addr = (caddr_t)0xFD740000;
d291 8
a298 2
	case 0xFFFFD200:
		addr = (caddr_t)0xFD780000;
d305 2
d309 1
a309 1
		printf("\n%s: no more memory in external I/O map",
d311 6
a323 1
	sc->sc_addr = kvtop((vaddr_t)sc->sc_mem);
@


1.1
log
@Replace the MVME376 driver from a homemade and dusty if_ve driver to
a ``regular'' if_le driver, sharing the common am7990 code.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.24 2003/10/14 19:23:11 miod Exp $ */
d202 1
a214 1
	volatile caddr_t phys = (caddr_t)sc->sc_addr;
a216 1
	dma_cachectl((vaddr_t)phys + boff, len, DMA_CACHE_SYNC);
a226 1
	volatile caddr_t phys = (caddr_t)sc->sc_addr;
a228 1
	dma_cachectl((vaddr_t)phys + boff, len, DMA_CACHE_SYNC_INVAL);
a237 1
	volatile caddr_t phys = (caddr_t)sc->sc_addr;
a239 1
	dma_cachectl((vaddr_t)phys + boff, len, DMA_CACHE_SYNC);
@

