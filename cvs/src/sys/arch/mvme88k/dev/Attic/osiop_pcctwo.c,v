head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.16
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.12
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2014.03.18.22.36.36;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2010.11.18.21.13.19;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.08.14.36.10;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.15.22.29.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.30.19.02.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.02.14.00.43;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.07.18.12.58;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: osiop_pcctwo.c,v 1.6 2010/11/18 21:13:19 miod Exp $	*/
/*
 * Copyright (c) 2004, Miodrag Vallat.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/disklabel.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/cpu.h>

#include <machine/bugio.h>
#include <machine/prom.h>

#include <dev/ic/osiopreg.h>
#include <dev/ic/osiopvar.h>

#include <mvme88k/dev/pcctworeg.h>
#include <mvme88k/dev/pcctwovar.h>

void	osiop_pcctwo_attach(struct device *, struct device *, void *);
int	osiop_pcctwo_intr(void *);
int	osiop_pcctwo_match(struct device *, void *, void *);

struct osiop_pcctwo_softc {
	struct osiop_softc sc_osiop;
	struct intrhand sc_ih;
};

struct cfattach osiop_pcctwo_ca = {
	sizeof(struct osiop_pcctwo_softc),
	    osiop_pcctwo_match, osiop_pcctwo_attach
};

int
osiop_pcctwo_match(struct device *parent, void *cf, void *aux)
{
	struct confargs *ca = aux;
	bus_space_handle_t ioh;
	int rc;

	if (bus_space_map(ca->ca_iot, ca->ca_paddr, OSIOP_NREGS, 0, &ioh) != 0)
		return (0);
	rc = badaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
	if (rc == 0) {
		bus_space_unmap(ca->ca_iot, ioh, OSIOP_NREGS);
		return (1);
	}

	/*
	 * For some reason, if the SCSI hardware is not ``warmed'' by the
	 * BUG (netboot or boot from external SCSI controller), badaddr()
	 * will always fail, although the hardware is there.
	 * Since the BUG will do the right thing, we'll defer a dummy read
	 * from the controller and retry.
	 */
	if (brdtyp == BRD_187 || brdtyp == BRD_8120 || brdtyp == BRD_197) {
		struct mvmeprom_dskio dio;
		char buf[MVMEPROM_BLOCK_SIZE];

#ifdef DEBUG
		printf("osiop_pcctwo_match: trying to warm up controller\n");
#endif
		bzero(&dio, sizeof dio);
		dio.pbuffer = buf;
		dio.blk_cnt = 1;
		bugdiskrd(&dio);

		rc = badaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
	}

	bus_space_unmap(ca->ca_iot, ioh, OSIOP_NREGS);
	return (rc == 0);
}

void
osiop_pcctwo_attach(struct device *parent, struct device *self, void *aux)
{
	struct pcctwosoftc *pcctwo = (struct pcctwosoftc *)parent;
	struct osiop_softc *sc = (struct osiop_softc *)self;
	struct osiop_pcctwo_softc *psc = (struct osiop_pcctwo_softc *)self;
	struct confargs *ca = aux;
	int tmp;
	extern int cpuspeed;

	sc->sc_bst = ca->ca_iot;
	sc->sc_dmat = ca->ca_dmat;

	if (bus_space_map(sc->sc_bst, ca->ca_paddr, OSIOP_NREGS, 0,
	    &sc->sc_reg) != 0) {
		printf(": couldn't map I/O ports\n");
		return;
	}

	switch (brdtyp) {
#ifdef MVME197
	case BRD_197:
		sc->sc_clock_freq = cpuspeed;
		break;
#endif
#ifdef MVME187
	case BRD_187:
	case BRD_8120:
		sc->sc_clock_freq = cpuspeed * 2;
		break;
#endif
	default:
		sc->sc_clock_freq = 50;	/* wild guess */
		break;
	}

	sc->sc_dcntl = OSIOP_DCNTL_EA;
	sc->sc_ctest7 = OSIOP_CTEST7_TT1;	/* no snooping */
	sc->sc_dmode = OSIOP_DMODE_BL4;	/* burst length = 4 */
	sc->sc_flags = 0;
	sc->sc_id = 7;	/* XXX should read from CNFG block in nvram */

	tmp = bootpart;
	if (ca->ca_paddr != bootaddr)
		bootpart = -1;	/* never match */

	osiop_attach(sc);

	bootpart = tmp;

	psc->sc_ih.ih_fn = osiop_pcctwo_intr;
	psc->sc_ih.ih_arg = sc;
	psc->sc_ih.ih_wantframe = 0;
	psc->sc_ih.ih_ipl = ca->ca_ipl;

	/* enable device interrupts */
	pcctwointr_establish(PCC2V_SCSI, &psc->sc_ih, self->dv_xname);
	bus_space_write_1(pcctwo->sc_iot, pcctwo->sc_ioh,
	    PCCTWO_SCSIICR, PCC2_IRQ_IEN | (ca->ca_ipl & PCC2_IRQ_IPL));
}

int
osiop_pcctwo_intr(void *arg)
{
	struct osiop_softc *sc = arg;
	u_int8_t istat;

	if (sc->sc_flags & OSIOP_INTSOFF)
		return 0;

	istat = osiop_read_1(sc, OSIOP_ISTAT);
	if ((istat & (OSIOP_ISTAT_SIP | OSIOP_ISTAT_DIP)) == 0)
		return 0;

	/*
	 * 53c710 manual recommends reading dstat and sstat0 at least
	 * 12 clk cycles apart if reading as bytes (which is what
	 * pcc2 permits). Stick in a 1us delay between accessing dstat and
	 * sstat0 below.
	 *
	 * save interrupt status, DMA status, and SCSI status 0
	 * (may need to deal with stacked interrupts?)
	 */
	sc->sc_istat = istat;
	sc->sc_sstat0 = osiop_read_1(sc, OSIOP_SSTAT0);
	DELAY(25);
	sc->sc_dstat = osiop_read_1(sc, OSIOP_DSTAT);

	osiop_intr(sc);

	return 1;
}
@


1.6
log
@Do not #include <sys/dkstat.h> if you don't need anything from it.
ok krw@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: osiop_pcctwo.c,v 1.5 2006/05/08 14:36:10 miod Exp $	*/
@


1.5
log
@Replace gazillions of badvaddr() or badwordaddr() calls with badaddr() calls.
With a few prototype declarations shuffling, this finally allows
<machine/locore.h> to die.
@
text
@d1 1
a1 1
/*	$OpenBSD: osiop_pcctwo.c,v 1.4 2006/04/15 22:29:49 miod Exp $	*/
a30 1
#include <sys/dkstat.h>
@


1.4
log
@Invoke bus_space_unmap with the correct bus_space_handle_t upon attachment
failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: osiop_pcctwo.c,v 1.3 2004/07/30 19:02:06 miod Exp $	*/
d72 1
a72 1
	rc = badvaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
d80 1
a80 1
	 * BUG (netboot or boot from external SCSI controller), badvaddr()
d97 1
a97 1
		rc = badvaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
@


1.3
log
@Move evcount structures inside struct intrhand, this makes more sense and
gives us more counters in the process.

Also clean up intrhand structures and usage, especially move them to SLISTs.
@
text
@d1 1
a1 1
/*	$OpenBSD: osiop_pcctwo.c,v 1.2 2004/07/02 14:00:43 miod Exp $	*/
d71 1
a71 1
		return 0;
a72 1
	bus_space_unmap(ca->ca_iot, ca->ca_paddr, OSIOP_NREGS);
d74 2
a75 2
		bus_space_unmap(ca->ca_iot, ca->ca_paddr, OSIOP_NREGS);
		return 1;
d100 2
a101 2
	bus_space_unmap(ca->ca_iot, ca->ca_paddr, OSIOP_NREGS);
	return rc == 0;
@


1.2
log
@Switch mvme88k to evcount, but keep maintaining intrcnt[] too for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: osiop_pcctwo.c,v 1.1 2004/05/07 18:12:58 miod Exp $	*/
a31 1
#include <sys/evcount.h>
a55 1
	struct evcount sc_intrcnt;
d161 1
a161 1
	pcctwointr_establish(PCC2V_SCSI, &psc->sc_ih);
a163 3

	evcount_attach(&psc->sc_intrcnt, self->dv_xname,
	    (void *)&psc->sc_ih.ih_ipl, &evcount_intr);
a168 1
	struct osiop_pcctwo_softc *psc = arg;
a177 2

	psc->sc_intrcnt.ec_count++;
@


1.1
log
@Replace the old ssh(4) NCR53C710 scsi driver with a pcctwo attachment for
the MI osiop(4) driver.

This improves performance very slighly and should also improve reliability.

Tested on 25MHz (50MHz osiop) and 33MHz (66MHz osiop) MVME187 boards.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
d57 1
a57 1
	struct evcnt sc_intrcnt;
d167 2
a168 1
	evcnt_attach(self, "intr", &psc->sc_intrcnt);
d174 1
d184 2
@


1.1.2.1
log
@Merge with the trunk
@
text
@@

