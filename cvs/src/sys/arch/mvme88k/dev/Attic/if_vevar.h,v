head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.12.27.23.58.11;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2003.10.11.22.08.57;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.26.02.37.07;	author miod;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.05.29.04.41.43;	author smurph;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.01.18;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2004.02.19.10.49.06;	author niklas;	state dead;
branches;
next	;

1.2.4.1
date	2002.06.11.03.37.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Replace the MVME376 driver from a homemade and dusty if_ve driver to
a ``regular'' if_le driver, sharing the common am7990 code.
@
text
@/*	$OpenBSD: if_vevar.h,v 1.4 2003/10/11 22:08:57 miod Exp $	*/

/*
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#define LEDEBUG 1

/*
 * Ethernet software status per device.
 *
 * Each interface is referenced by a network interface structure,
 * arpcom.ac_if, which the routing code uses to locate the interface.
 * This structure contains the output queue for the interface, its address, ...
 *
 * NOTE: this structure MUST be the first element in machine-dependent
 * le_softc structures!  This is designed SPECIFICALLY to make it possible
 * to simply cast a "void *" to "struct le_softc *" or to
 * "struct ve_softc *".  Among other things, this saves a lot of hair
 * in the interrupt handlers.
 */
struct vam7990_softc {
	struct	device sc_dev;		/* base device glue */
	struct	arpcom sc_arpcom;	/* Ethernet common part */

	/*
	 * Memory functions:
	 *
	 *	copy to/from descriptor
	 *	copy to/from buffer
	 *	zero bytes in buffer
	 */
	void	(*sc_copytodesc)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copyfromdesc)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copytobuf)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copyfrombuf)(struct vam7990_softc *, void *, int, int);
	void	(*sc_zerobuf)(struct vam7990_softc *, int, int);

	/*
	 * Machine-dependent functions:
	 *
	 *	read/write CSR
	 *	hardware reset hook - may be NULL
	 *	hardware init hook - may be NULL
	 *	no carrier hook - may be NULL
	 */
	u_int16_t (*sc_rdcsr)(struct vam7990_softc *, u_int16_t);
	void	(*sc_wrcsr)(struct vam7990_softc *, u_int16_t, u_int16_t);
	void	(*sc_hwreset)(struct vam7990_softc *);
	void	(*sc_hwinit)(struct vam7990_softc *);
	void	(*sc_nocarrier)(struct vam7990_softc *);

	int	sc_hasifmedia;
	struct	ifmedia sc_ifmedia;

	void	*sc_sh;		/* shutdownhook cookie */

	u_int16_t sc_conf3;	/* CSR3 value */

	void	*sc_mem;	/* base address of RAM -- CPU's view */
	u_long	sc_addr;	/* base address of RAM -- LANCE's view */

	u_long	sc_memsize;	/* size of RAM */

	int	sc_nrbuf;	/* number of receive buffers */
	int	sc_ntbuf;	/* number of transmit buffers */
	int	sc_last_rd;
	int	sc_first_td, sc_last_td, sc_no_td;

	int	sc_initaddr;
	int	sc_rmdaddr;
	int	sc_tmdaddr;
	int	sc_rbufaddr;
	int	sc_tbufaddr;
   unsigned short csr;
#ifdef LEDEBUG
	int	sc_debug;
#endif
};

/* Export this to machine-dependent drivers. */
extern struct cfdriver ve_cd;

void ve_config(struct vam7990_softc *);
void ve_init(struct vam7990_softc *);
int ve_ioctl(struct ifnet *, u_long, caddr_t);
void ve_meminit(struct vam7990_softc *);
void ve_reset(struct vam7990_softc *);
void ve_setladrf(struct arpcom *, u_int16_t *);
void ve_start(struct ifnet *);
void ve_stop(struct vam7990_softc *);
void ve_watchdog(struct ifnet *);
int ve_intr(void *);

/*
 * The following functions are only useful on certain cpu/bus
 * combinations.  They should be written in assembly language for
 * maximum efficiency, but machine-independent versions are provided
 * for drivers that have not yet been optimized.
 */
void ve_copytobuf_contig(struct vam7990_softc *, void *, int, int);
void ve_copyfrombuf_contig(struct vam7990_softc *, void *, int, int);
void ve_zerobuf_contig(struct vam7990_softc *, int, int);



@


1.4
log
@Nuke trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vevar.h,v 1.3 2002/03/14 01:26:39 millert Exp $	*/
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vevar.h,v 1.2 2001/08/26 02:37:07 miod Exp $	*/
d38 1
a38 1
 * arpcom.ac_if, which the routing code uses to locate the interface. 
@


1.2
log
@Add prototypes, fix compilation warnings, random style fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vevar.h,v 1.1 1999/05/29 04:41:43 smurph Exp $	*/
d58 5
a62 10
	void	(*sc_copytodesc)
		    __P((struct vam7990_softc *, void *, int, int));
	void	(*sc_copyfromdesc)
		    __P((struct vam7990_softc *, void *, int, int));
	void	(*sc_copytobuf)
		    __P((struct vam7990_softc *, void *, int, int));
	void	(*sc_copyfrombuf)
		    __P((struct vam7990_softc *, void *, int, int));
	void	(*sc_zerobuf)
		    __P((struct vam7990_softc *, int, int));
d72 5
a76 7
	u_int16_t (*sc_rdcsr)
		    __P((struct vam7990_softc *, u_int16_t));
	void	(*sc_wrcsr)
		    __P((struct vam7990_softc *, u_int16_t, u_int16_t));
	void	(*sc_hwreset) __P((struct vam7990_softc *));
	void	(*sc_hwinit) __P((struct vam7990_softc *));
	void	(*sc_nocarrier) __P((struct vam7990_softc *));
d109 10
a118 10
void ve_config __P((struct vam7990_softc *));
void ve_init __P((struct vam7990_softc *));
int ve_ioctl __P((struct ifnet *, u_long, caddr_t));
void ve_meminit __P((struct vam7990_softc *));
void ve_reset __P((struct vam7990_softc *));
void ve_setladrf __P((struct arpcom *, u_int16_t *));
void ve_start __P((struct ifnet *));
void ve_stop __P((struct vam7990_softc *));
void ve_watchdog __P((struct ifnet *));
int ve_intr __P((void *));
d126 3
a128 3
void ve_copytobuf_contig __P((struct vam7990_softc *, void *, int, int));
void ve_copyfrombuf_contig __P((struct vam7990_softc *, void *, int, int));
void ve_zerobuf_contig __P((struct vam7990_softc *, int, int));
@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vevar.h,v 1.2 2001/08/26 02:37:07 miod Exp $	*/
d58 10
a67 5
	void	(*sc_copytodesc)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copyfromdesc)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copytobuf)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copyfrombuf)(struct vam7990_softc *, void *, int, int);
	void	(*sc_zerobuf)(struct vam7990_softc *, int, int);
d77 7
a83 5
	u_int16_t (*sc_rdcsr)(struct vam7990_softc *, u_int16_t);
	void	(*sc_wrcsr)(struct vam7990_softc *, u_int16_t, u_int16_t);
	void	(*sc_hwreset)(struct vam7990_softc *);
	void	(*sc_hwinit)(struct vam7990_softc *);
	void	(*sc_nocarrier)(struct vam7990_softc *);
d116 10
a125 10
void ve_config(struct vam7990_softc *);
void ve_init(struct vam7990_softc *);
int ve_ioctl(struct ifnet *, u_long, caddr_t);
void ve_meminit(struct vam7990_softc *);
void ve_reset(struct vam7990_softc *);
void ve_setladrf(struct arpcom *, u_int16_t *);
void ve_start(struct ifnet *);
void ve_stop(struct vam7990_softc *);
void ve_watchdog(struct ifnet *);
int ve_intr(void *);
d133 3
a135 3
void ve_copytobuf_contig(struct vam7990_softc *, void *, int, int);
void ve_copyfrombuf_contig(struct vam7990_softc *, void *, int, int);
void ve_zerobuf_contig(struct vam7990_softc *, int, int);
@


1.1
log
@Added vme bus device drivers. MVME328, MVME376, MVME332
@
text
@d1 1
a1 1
/*	$OpenBSD: vevar.h,v 1.0 1998/09/16 22:41:20 smurph Exp $	*/
a32 8

#ifdef DDB
#define	integrate
#define hide
#else
#define	integrate	static __inline
#define hide		static
#endif
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vevar.h,v 1.1 1999/05/29 04:41:43 smurph Exp $	*/
d33 8
@


1.1.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 10
a67 5
	void	(*sc_copytodesc)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copyfromdesc)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copytobuf)(struct vam7990_softc *, void *, int, int);
	void	(*sc_copyfrombuf)(struct vam7990_softc *, void *, int, int);
	void	(*sc_zerobuf)(struct vam7990_softc *, int, int);
d77 7
a83 5
	u_int16_t (*sc_rdcsr)(struct vam7990_softc *, u_int16_t);
	void	(*sc_wrcsr)(struct vam7990_softc *, u_int16_t, u_int16_t);
	void	(*sc_hwreset)(struct vam7990_softc *);
	void	(*sc_hwinit)(struct vam7990_softc *);
	void	(*sc_nocarrier)(struct vam7990_softc *);
d116 10
a125 10
void ve_config(struct vam7990_softc *);
void ve_init(struct vam7990_softc *);
int ve_ioctl(struct ifnet *, u_long, caddr_t);
void ve_meminit(struct vam7990_softc *);
void ve_reset(struct vam7990_softc *);
void ve_setladrf(struct arpcom *, u_int16_t *);
void ve_start(struct ifnet *);
void ve_stop(struct vam7990_softc *);
void ve_watchdog(struct ifnet *);
int ve_intr(void *);
d133 3
a135 3
void ve_copytobuf_contig(struct vam7990_softc *, void *, int, int);
void ve_copyfrombuf_contig(struct vam7990_softc *, void *, int, int);
void ve_zerobuf_contig(struct vam7990_softc *, int, int);
@


1.1.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vevar.h,v 1.1.4.2 2002/03/28 10:36:02 niklas Exp $	*/
@


