head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.2
	UBC_BASE:1.8
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.4
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2003.12.26.10.41.43;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2003.10.11.22.08.57;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.39;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.16.23.49.46;	author miod;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.12.13.08.55.51;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.27.01.16.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.09.05.44.39;	author smurph;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.07.23.45.52;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.01.03.38.16;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	99.09.27.18.43.26;	author smurph;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.05.29.04.41.44;	author smurph;	state Exp;
branches;
next	;

1.2.4.1
date	2001.04.18.16.11.09;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2004.02.19.10.49.06;	author niklas;	state dead;
branches;
next	;

1.8.2.1
date	2002.06.11.03.37.10;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Merge the attachment part and the real work part of the SCSI drivers in
one file per driver.
@
text
@/*	$OpenBSD: vsdma.c,v 1.10 2003/10/11 22:08:57 miod Exp $ */
/*
 * Copyright (c) 1999 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vsdma.c
 */

/*
 * MVME328 scsi adaptor driver
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <machine/autoconf.h>

#ifdef mvme88k
#include <machine/board.h>
#include <mvme88k/dev/vsreg.h>
#include <mvme88k/dev/vsvar.h>
#include <mvme88k/dev/vme.h>
#else
#include <mvme68k/dev/vsreg.h>
#include <mvme68k/dev/vsvar.h>
#include <mvme68k/dev/vme.h>
#endif /* mvme88k */

int     vsmatch(struct device *, void *, void *);
void    vsattach(struct device *, struct device *, void *);
int     vsprint(void *auxp, char *);
int     vs_initialize(struct vs_softc *);
int     vs_intr(struct vs_softc *);
int     vs_nintr(void *);
int     vs_eintr(void *);

struct scsi_adapter vs_scsiswitch = {
	vs_scsicmd,
	vs_minphys,
	0,			/* no lun support */
	0,			/* no lun support */
};

struct scsi_device vs_scsidev = {
	NULL,		/* use default error handler */
	NULL,		/* do not have a start function */
	NULL,		/* have no async handler */
	NULL,		/* Use default done routine */
};

struct cfattach vs_ca = {
	sizeof(struct vs_softc), vsmatch, vsattach,
};

struct cfdriver vs_cd = {
	NULL, "vs", DV_DULL, 0
};

int
vsmatch(pdp, vcf, args)
	struct device *pdp;
	void *vcf, *args;
{
	struct confargs *ca = args;
	if (!badvaddr((unsigned)ca->ca_vaddr, 1)) {
		return (1);
	} else {
		return (0);
	}
}

void
vsattach(parent, self, auxp)
	struct device *parent, *self;
	void *auxp;
{
	struct vs_softc *sc = (struct vs_softc *)self;
	struct confargs *ca = auxp;
	struct vsreg * rp;
	int tmp;

	sc->sc_vsreg = rp = ca->ca_vaddr;

	sc->sc_ipl = ca->ca_ipl;
	sc->sc_nvec = ca->ca_vec;
	/* get the next available vector for the error interrupt func. */
	sc->sc_evec = vme_findvec();
	sc->sc_link.adapter_softc = sc;
	sc->sc_link.adapter_target = 7;
	sc->sc_link.adapter = &vs_scsiswitch;
	sc->sc_link.device = &vs_scsidev;
	sc->sc_link.openings = 1;

	sc->sc_ih_n.ih_fn = vs_nintr;
	sc->sc_ih_n.ih_arg = sc;
	sc->sc_ih_n.ih_wantframe = 0;
	sc->sc_ih_n.ih_ipl = ca->ca_ipl;

	sc->sc_ih_e.ih_fn = vs_eintr;
	sc->sc_ih_e.ih_arg = sc;
	sc->sc_ih_e.ih_wantframe = 0;
	sc->sc_ih_e.ih_ipl = ca->ca_ipl;

	if (vs_initialize(sc))
		return;

	vmeintr_establish(sc->sc_nvec, &sc->sc_ih_n);
	vmeintr_establish(sc->sc_evec, &sc->sc_ih_e);
	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt_n);
	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt_e);

	/*
	 * attach all scsi units on us, watching for boot device
	 * (see dk_establish).
	 */
	tmp = bootpart;
	if (ca->ca_paddr != bootaddr)
		bootpart = -1;		/* invalid flag to dk_establish */
	config_found(self, &sc->sc_link, scsiprint);
	bootpart = tmp;		    /* restore old value */
}

/*
 * print diag if pnp is NULL else just extra
 */
int
vsprint(auxp, pnp)
	void *auxp;
	char *pnp;
{
	if (pnp == NULL)
		return (UNCONF);
	return (QUIET);
}
@


1.10
log
@Nuke trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.9 2002/03/14 01:26:39 millert Exp $ */
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.8 2001/12/16 23:49:46 miod Exp $ */
d84 1
a84 1
};    
d87 2
a88 2
	NULL, "vs", DV_DULL, 0 
}; 
d100 1
a100 1
	}           
@


1.8
log
@Revert the mvme88k to 20011212. Recent changes had not been merged correctly,
and I am fed up with dissecting diffs to put back code that disappeared.
This will likely be fixed shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.6 2001/03/27 01:16:25 miod Exp $ */
d60 7
a66 7
int     vsmatch         __P((struct device *, void *, void *));
void    vsattach        __P((struct device *, struct device *, void *));
int     vsprint         __P((void *auxp, char *));
int     vs_initialize   __P((struct vs_softc *));
int     vs_intr         __P((struct vs_softc *));
int     vs_nintr        __P((void *));
int     vs_eintr        __P((void *));
@


1.8.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.8 2001/12/16 23:49:46 miod Exp $ */
d60 7
a66 7
int     vsmatch(struct device *, void *, void *);
void    vsattach(struct device *, struct device *, void *);
int     vsprint(void *auxp, char *);
int     vs_initialize(struct vs_softc *);
int     vs_intr(struct vs_softc *);
int     vs_nintr(void *);
int     vs_eintr(void *);
@


1.7
log
@Support for MVME197 completed.  Fix SPL defs.
@
text
@d96 3
a98 1
	if (badvaddr((unsigned)ca->ca_vaddr, 1))
d100 1
a100 1
	return (1);
@


1.6
log
@Make this compile correctly for non-mvme187 compatible kernel
configurations.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.5 2001/03/09 05:44:39 smurph Exp $ */
d96 1
a96 3
	if (!badvaddr((unsigned)ca->ca_vaddr, 1)) {
		return (1);
	} else {
d98 1
a98 1
	}           
@


1.5
log
@kernel will compile with -Werror.  Added intr.h
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.4 2001/03/07 23:45:52 miod Exp $ */
d49 1
a49 1
#if defined(MVME187)
d58 1
a58 1
#endif /* defined(MVME187) */
@


1.4
log
@Fix interrupt handler registration and prototypes.
While there, some warning hunting.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.3 2001/02/01 03:38:16 smurph Exp $ */
d92 2
a93 2
struct device *pdp;
void *vcf, *args;
d96 1
a96 1
	if (!badvaddr(ca->ca_vaddr, 1)) {
d105 2
a106 2
struct device *parent, *self;
void *auxp;
d159 2
a160 2
void *auxp;
char *pnp;
@


1.3
log
@Major changes to get MVME188 working.  More header and code cleanups.  The
kernel is tested on MVME188A/2P256 and MVME188A/1P64.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.2 1999/09/27 18:43:26 smurph Exp $ */
d65 2
a66 2
int     vs_nintr        __P((struct vs_softc *));
int     vs_eintr        __P((struct vs_softc *));
a94 1
	struct cfdata *cf = vcf;
a111 1
	extern int cpuspeed;
d127 1
d132 1
@


1.2
log
@adding support for MVME188 and MVME197.  Plus 32bit if_ie.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.1 1999/05/29 04:41:44 smurph Exp $ */
a53 1
#include "machine/mmu.h"
d60 7
a66 7
int	vsmatch         __P((struct device *, void *, void *));
void	vsattach        __P((struct device *, struct device *, void *));
int	vsprint         __P((void *auxp, char *));
void  vs_initialize   __P((struct vs_softc *));
int	vs_intr         __P((struct vs_softc *));
int	vs_nintr        __P((struct vs_softc *));
int	vs_eintr        __P((struct vs_softc *));
d83 1
a83 1
        sizeof(struct vs_softc), vsmatch, vsattach,
d85 1
a85 1
 
d87 1
a87 1
        NULL, "vs", DV_DULL, 0 
d92 2
a93 2
	struct device *pdp;
	void *vcf, *args;
d98 2
a99 8
      /*
      if (ca->ca_vec & 0x03) {
         printf("vs: bad vector 0x%x\n", ca->ca_vec);
         return (0);
      }
		*/
      return(1);
   } else {
d101 1
a101 1
	}	    
d106 2
a107 2
	struct device *parent, *self;
	void *auxp;
d118 4
a121 3
   sc->sc_nvec = ca->ca_vec + 0;
   sc->sc_evec = ca->ca_vec + 1;
   sc->sc_link.adapter_softc = sc;
d130 2
a131 3
	
   
   sc->sc_ih_e.ih_fn = vs_eintr;
d134 3
a136 2
   
	vs_initialize(sc);
d140 2
a141 2
   evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt_n);
   evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt_e);
d148 2
a149 2
	if (ca->ca_paddr != bootaddr) 
		bootpart = -1;          /* invalid flag to dk_establish */
d151 1
a151 1
	bootpart = tmp;             /* restore old value */
d159 2
a160 2
	void *auxp;
	char *pnp;
a165 28

/* normal interrupt function */
int
vs_nintr(sc)
	struct vs_softc *sc;
{
#ifdef SDEBUG
   printf("Normal Interrupt!!!\n");
#endif 
   vs_intr(sc);
	sc->sc_intrcnt_n.ev_count++;
	return (1);
}

/* error interrupt function */
int
vs_eintr(sc)
	struct vs_softc *sc;
{
#ifdef SDEBUG
   printf("Error Interrupt!!!\n");
#endif
	vs_intr(sc);
	sc->sc_intrcnt_e.ev_count++;
	return (1);
}


@


1.2.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.6 2001/03/27 01:16:25 miod Exp $ */
d49 1
a49 1
#ifdef mvme88k
d54 1
d59 1
a59 1
#endif /* mvme88k */
d61 7
a67 7
int     vsmatch         __P((struct device *, void *, void *));
void    vsattach        __P((struct device *, struct device *, void *));
int     vsprint         __P((void *auxp, char *));
int     vs_initialize   __P((struct vs_softc *));
int     vs_intr         __P((struct vs_softc *));
int     vs_nintr        __P((void *));
int     vs_eintr        __P((void *));
d84 1
a84 1
	sizeof(struct vs_softc), vsmatch, vsattach,
d86 1
a86 1

d88 1
a88 1
	NULL, "vs", DV_DULL, 0 
d96 1
d98 9
a106 3
	if (!badvaddr((unsigned)ca->ca_vaddr, 1)) {
		return (1);
	} else {
d108 1
a108 1
	}           
d120 1
d125 3
a127 4
	sc->sc_nvec = ca->ca_vec;
	/* get the next available vector for the error interrupt func. */
	sc->sc_evec = vme_findvec();
	sc->sc_link.adapter_softc = sc;
a134 1
	sc->sc_ih_n.ih_wantframe = 0;
d136 3
a138 2

	sc->sc_ih_e.ih_fn = vs_eintr;
a139 1
	sc->sc_ih_e.ih_wantframe = 0;
d141 2
a142 3

	if (vs_initialize(sc))
		return;
d146 2
a147 2
	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt_n);
	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt_e);
d154 2
a155 2
	if (ca->ca_paddr != bootaddr)
		bootpart = -1;		/* invalid flag to dk_establish */
d157 1
a157 1
	bootpart = tmp;		    /* restore old value */
d172 28
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d60 7
a66 7
int     vsmatch(struct device *, void *, void *);
void    vsattach(struct device *, struct device *, void *);
int     vsprint(void *auxp, char *);
int     vs_initialize(struct vs_softc *);
int     vs_intr(struct vs_softc *);
int     vs_nintr(void *);
int     vs_eintr(void *);
@


1.2.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.2.4.2 2002/03/28 10:36:02 niklas Exp $ */
@


1.1
log
@Added vme bus device drivers. MVME328, MVME376, MVME332
@
text
@d1 1
a1 1
/*	$OpenBSD: vsdma.c,v 1.0 1999/05/01 05:52:31 smurph Exp $ */
d99 1
d104 2
a105 1
		return(1);
@

