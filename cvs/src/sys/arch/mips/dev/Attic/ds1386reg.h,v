head	1.2;
access;
symbols
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	UBC_SYNC_A:1.2
	UBC_SYNC_B:1.2
	OPENBSD_2_9:1.1.0.16
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.14
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.12
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.10
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.06.26.03.33.59;	author brad;	state dead;
branches;
next	1.1;

1.1
date	98.01.29.15.06.20;	author pefo;	state Exp;
branches
	1.1.10.1;
next	;

1.1.10.1
date	2001.07.04.10.18.47;	author niklas;	state dead;
branches;
next	;


desc
@@


1.2
log
@bye bye
--
Ok'd by deraadt@@ & ericj@@
@
text
@/*	$NetBSD: ds1386reg.h,v 1.1 1995/05/04 19:31:18 cgd Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Definitions for the Dallas Semiconductor DS1386 Real Time Clock.
 *
 */

/*
 * The registers, and the bits within each register.
 */

#define	DS_SEC_100	0x0	/* Time of year: hundreds seconds (0-99) */
#define	DS_SEC		0x1	/* Time of year: seconds (0-59) */
#define	DS_MIN		0x2	/* Time of year: minutes (0-59) */
#define	DS_HOUR		0x4	/* Time of year: hour (see above) */
#define	DS_DOW		0x6	/* Time of year: day of week (1-7) */
#define	DS_DOM		0x8	/* Time of year: day of month (1-31) */
#define	DS_MONTH	0x9	/* Time of year: month (1-12) */
#define	DS_YEAR		0xa	/* Time of year: year in century (0-99) */
#define	DS_AMIN		0x3	/* Alarm: minutes */
#define	DS_AHOUR	0x5	/* Alarm: hour */
#define	DS_ADOW		0x7	/* Alarm: day */



#define	 DS_HOUR_12	0x40	/* 12-hour mode. In DS_HOUR reg */
#define	 DS_EOSC	0x80	/* Enable TOD osc if 0. In DS_MONTH reg. */

#define	DS_REGC		0xb	/* Control register */

#define	DS_REGC_TE	0x80	/* Transfer enable bit. 0 freezes regs */
#define	DS_REGC_IPSW	0x40	/* Interrupt routing bit */
#define	DS_REGC_WAM	0x08	/* Watchdog alarm int enab. 1 enables */
#define	DS_REGC_TDM	0x04	/* Time Of Day alarm int enab. 1 enables */
#define	DS_REGC_WAF	0x02	/* Watchdog alarm int status */
#define	DS_REGC_TDF	0x01	/* Time Of Day alarm int status */


#define	DS_NTODREGS	0xb	/* 10 of those regs are for TOD and alarm */

#define	DS_NVRAM_START	0xe	/* start of NVRAM: offset 14 */
#define	DS_NVRAM_SIZE	(0x8000-0xe)	/* 32k of NVRAM */

/*
 * Special NVRAM locations.
 */
#define	DS_ETHERADR	0x115	/* Ethernet address */

/*
 * RTC register/NVRAM read and write functions -- machine-dependent.
 * Appropriately manipulate RTC registers to get/put data values.
 */
u_int ds1386_read __P((void *sc, u_int reg));
void ds1386_write __P((void *sc, u_int reg, u_int datum));

/*
 * A collection of TOD/Alarm registers.
 */
typedef u_int ds_todregs[DS_NTODREGS];

/*
 * Get all of the TOD/Alarm registers
 * Must be called at splhigh(), and with the RTC properly set up.
 */
#define DS1386_GETTOD(sc, regs)						\
	do {								\
		int i;							\
									\
		/* wait for update; spin loop */			\
		i = ds1386_read(sc, DS_SEC_100);			\
		while (ds1386_read(sc, DS_SEC_100) == i)		\
			;						\
									\
		/* read all of the tod/alarm regs */			\
		for (i = 0; i < DS_NTODREGS; i++)			\
			(*regs)[i] = ds1386_read(sc, i);		\
	} while (0);

/*
 * Set all of the TOD/Alarm registers
 * Must be called at splhigh(), and with the RTC properly set up.
 */
#define DS1386_PUTTOD(sc, regs)						\
	do {								\
		int i;							\
									\
		/* stop updates while setting */			\
		ds1386_write(sc, DS_MONTH, DS_EOSC);			\
									\
		/* write all of the tod/alarm regs */			\
		for (i = 0; i < DS_NTODREGS; i++)			\
			ds1386_write(sc, i, (*regs)[i]);		\
									\
	} while (0);
@


1.1
log
@New try with conf
@
text
@@


1.1.10.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


