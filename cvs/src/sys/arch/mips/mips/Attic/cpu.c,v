head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	OPENBSD_2_9:1.5.0.14
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.8
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2001.06.26.03.34.40;	author brad;	state dead;
branches;
next	1.5;

1.5
date	98.10.15.21.30.15;	author imp;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	98.09.15.10.50.12;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	98.07.11.21.41.15;	author imp;	state Exp;
branches;
next	1.2;

1.2
date	98.03.16.09.03.23;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	98.01.28.12.12.07;	author pefo;	state Exp;
branches;
next	;

1.5.8.1
date	2001.07.04.10.19.11;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@bye bye
--
Ok'd by deraadt@@ & ericj@@
@
text
@/*	$OpenBSD: cpu.c,v 1.5 1998/10/15 21:30:15 imp Exp $ */

/*
 * Copyright (c) 1997 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/device.h>

#include <machine/pte.h>
#include <machine/cpu.h>
#include <machine/autoconf.h>


/* Definition of the driver for autoconfig. */
static int	cpumatch(struct device *, void *, void *);
static void	cpuattach(struct device *, struct device *, void *);

struct cfattach cpu_ca = {
	sizeof(struct device), cpumatch, cpuattach
};
struct cfdriver cpu_cd = {
	NULL, "cpu", DV_DULL, NULL, 0
};

static int
cpumatch(parent, cfdata, aux)
	struct device *parent;
	void *cfdata;
	void *aux;
{
	struct confargs *ca = aux;

	/* make sure that we're looking for a CPU. */
	if (strcmp(ca->ca_name, cpu_cd.cd_name) != 0)
		return (0);

	return (1);
}

static void
cpuattach(parent, dev, aux)
	struct device *parent;
	struct device *dev;
	void *aux;
{

	printf(": ");

	switch(cpu_id.cpu.cp_imp) {

	case MIPS_R2000:
		printf("MIPS R2000 CPU");
		break;
	case MIPS_R3000:
		printf("MIPS R3000 CPU");
		break;
	case MIPS_R6000:
		printf("MIPS R6000 CPU");
		break;
	case MIPS_R4000:
		if(CpuPrimaryInstCacheSize == 16384)
			printf("MIPS R4400 CPU");
		else
			printf("MIPS R4000 CPU");
		break;
	case MIPS_R3LSI:
		printf("LSI Logic R3000 derivate");
		break;
	case MIPS_R6000A:
		printf("MIPS R6000A CPU");
		break;
	case MIPS_R3IDT:
		printf("IDT R3000 derivate");
		break;
	case MIPS_R10000:
		printf("MIPS R10000 CPU");
		break;
	case MIPS_R4200:
		printf("NEC VR4200 CPU (ICE)");
		break;
	case MIPS_R4300:
		printf("NEC VR4300 CPU");
		break;
	case MIPS_R4100:
		printf("NEC VR41xx CPU");
		break;
	case MIPS_R8000:
		printf("MIPS R8000 Blackbird/TFP CPU");
		break;
	case MIPS_R4600:
		printf("QED R4600 Orion CPU");
		break;
	case MIPS_R4700:
		printf("QED R4700 Orion CPU");
		break;
	case MIPS_R3TOSH:
		printf("Toshiba R3000 based CPU");
		break;
	case MIPS_RM52X0:
		printf("QED RM52X0 CPU");
		break;
	default:
		printf("Unknown CPU type (0x%x)",cpu_id.cpu.cp_imp);
		break;
	}
	printf(" Rev. %d.%d with ", cpu_id.cpu.cp_majrev, cpu_id.cpu.cp_minrev);


	switch(fpu_id.cpu.cp_imp) {

	case MIPS_SOFT:
		printf("Software emulation float");
		break;
	case MIPS_R2360:
		printf("MIPS R2360 FPC");
		break;
	case MIPS_R2010:
		printf("MIPS R2010 FPC");
		break;
	case MIPS_R3010:
		printf("MIPS R3010 FPC");
		break;
	case MIPS_R6010:
		printf("MIPS R6010 FPC");
		break;
	case MIPS_R4010:
		printf("MIPS R4010 FPC");
		break;
	case MIPS_R31LSI:
		printf("FPC");
		break;
	case MIPS_R10010:
		printf("MIPS R10000 FPU");
		break;
	case MIPS_R4210:
		printf("NEC VR4200 FPC (ICE)");
		break;
	case MIPS_R8000:
		printf("MIPS R8000 Blackbird/TFP");
		break;
	case MIPS_R4600:
		printf("QED R4600 Orion FPC");
		break;
	case MIPS_R4700:
		printf("QED R4700 Orion FPC");
		break;
	case MIPS_R3TOSH:
		printf("Toshiba R3000 based FPC");
		break;
	case MIPS_R5000:
		printf("MIPS R5000 based FPC");
		break;
	case MIPS_RM52X0:
		printf("QED RM52X0 FPC");
		break;
	case MIPS_UNKF1:
	default:
		printf("Unknown FPU type (0x%x)", fpu_id.cpu.cp_imp);
		break;
	}
	printf(" Rev. %d.%d", fpu_id.cpu.cp_majrev, fpu_id.cpu.cp_minrev);
	printf("\n");

	printf("Primary cache size: %dkb Instruction, %dkb Data.",
		CpuPrimaryInstCacheSize / 1024,
		CpuPrimaryDataCacheSize / 1024);
	if(CpuTwoWayCache)
		printf(" Two way set associative.\n");
	else
		printf(" Direct mapped.\n");

	if(l2cache_is_snooping)
		printf("Missing L2 cache or Snooping L2 cache.\n");
	else
		printf("No Snooping L2 cache!\n");
}
@


1.5
log
@
Back out PEFO's trap change.  It breaks everybody, it seems.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.3 1998/07/11 21:41:15 imp Exp $ */
@


1.5.8.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.5 1998/10/15 21:30:15 imp Exp $ */
@


1.4
log
@New mi code to add a real trapframe and remove the need for __FORK_BRAINDAMAGE.
@
text
@d4 1
a4 1
 * Copyright (c) 1997, 1998 Per Fogelstrom, Opsycon AB
d17 1
a17 1
 *	Per Fogelstrom, Opsycon AB, Sweden.
d196 1
a196 1
	printf("\tL1 Cache I size %dkb(%d line),",
d198 1
a198 4
		CpuPrimaryInstCacheLSize);
	printf(" D size %dkb(%d line), ",
		CpuPrimaryDataCacheSize / 1024,
		CpuPrimaryDataCacheLSize);
d200 1
a200 1
		printf("two way.\n");
d202 1
a202 1
		printf("direct mapped.\n");
d204 4
a207 2
	printf("\t%s snoop uncached cpu accesses.\n", l2cache_is_snooping ?
		"No L2 cache or L2 cache" : "L2 cache doesn't");
@


1.3
log
@

Add detection of the Vr41xx.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.2 1998/03/16 09:03:23 pefo Exp $ */
d4 1
a4 1
 * Copyright (c) 1997 Per Fogelstrom
d17 1
a17 1
 *	Per Fogelstrom.
d196 1
a196 1
	printf("Primary cache size: %dkb Instruction, %dkb Data.",
d198 4
a201 1
		CpuPrimaryDataCacheSize / 1024);
d203 1
a203 1
		printf(" Two way set associative.\n");
d205 1
a205 1
		printf(" Direct mapped.\n");
d207 2
a208 4
	if(l2cache_is_snooping)
		printf("Missing L2 cache or Snooping L2 cache.\n");
	else
		printf("No Snooping L2 cache!\n");
@


1.2
log
@DDB for mips, first cut. Will add some machine dep commands and tune
up a little. Basically works. Still needs symbol table support.
Load store counting does not handle branch likely situations.

Also, some code moved into here as 'machine independent'.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.1 1998/01/28 12:12:07 pefo Exp $ */
d116 3
a133 1
	case MIPS_UNKC2:
a208 1

@


1.1
log
@First set of Mips mi files.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.9 1997/06/14 23:28:53 deraadt Exp $ */
d128 2
a129 2
	case MIPS_RM5230:
		printf("QED RM5230 based CPU");
d183 2
a184 2
	case MIPS_RM5230:
		printf("QED RM5230 based FPC");
@

