head	1.26;
access;
symbols
	OPENBSD_6_0:1.26.0.4
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.21.0.8
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.20.0.2
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.26
date	2015.09.09.15.48.52;	author visa;	state Exp;
branches;
next	1.25;
commitid	LCIA9B8f4l6PgPcB;

1.25
date	2015.08.15.22.31.38;	author miod;	state Exp;
branches;
next	1.24;
commitid	yF3Npu6AQ8EgYJml;

1.24
date	2015.07.17.22.52.28;	author tedu;	state Exp;
branches;
next	1.23;
commitid	OOrGfFHYAn65M2qc;

1.23
date	2015.07.08.13.37.31;	author dlg;	state Exp;
branches;
next	1.22;
commitid	Ds9kNjjKbF4CbIsT;

1.22
date	2014.03.22.00.01.04;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2012.09.29.21.37.01;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2012.06.23.21.56.06;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2012.05.27.14.32.04;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2010.10.24.15.40.03;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.21.20.29.13;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.20.12.10.26;	author syuu;	state Exp;
branches;
next	1.14;

1.14
date	2009.12.12.20.06.50;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.25.17.39.51;	author syuu;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.06.21.11.37;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.13.21.48.01;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.20.18.41.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.21.20.17.12;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.18.21.46.41;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.14.02.09.46;	author uwe;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.02.16.54.19;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.01.21.36.56;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.08.07.12.55;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.20.10.29.57;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.09.14.57.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.01;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.26
log
@The mplock implementations on MP-enabled mips64 platforms, octeon and
sgi, are identical. Put one implementation in mips64 and drop the
platform-specific copies, to remove duplicated code.

ok miod@@
@
text
@#	$OpenBSD: files.mips64,v 1.25 2015/08/15 22:31:38 miod Exp $

file	arch/mips64/mips64/arcbios.c		arcbios
file	arch/mips64/mips64/clock.c		clock
file	arch/mips64/mips64/cpu.c
file	arch/mips64/mips64/interrupt.c
file	arch/mips64/mips64/lock_machdep.c	multiprocessor
file	arch/mips64/mips64/mem.c
file	arch/mips64/mips64/mips64_machdep.c
file	arch/mips64/mips64/pmap.c
file	arch/mips64/mips64/process_machdep.c
file	arch/mips64/mips64/sendsig.c
file	arch/mips64/mips64/softintr.c
file	arch/mips64/mips64/sys_machdep.c
file	arch/mips64/mips64/trap.c
file	arch/mips64/mips64/vm_machdep.c
file	arch/mips64/mips64/mutex.c

file	arch/mips64/mips64/cache_loongson2.c	cpu_loongson2
file	arch/mips64/mips64/cache_loongson3.c	cpu_loongson3
file	arch/mips64/mips64/cache_mips64r2.c	cpu_mips64r2
file	arch/mips64/mips64/cache_octeon.c	cpu_octeon
file	arch/mips64/mips64/cache_r4k.c		cpu_r4000
file	arch/mips64/mips64/cache_r5k.c		cpu_r5000 | cpu_rm7000
file	arch/mips64/mips64/cache_r10k.c		cpu_r10000
file	arch/mips64/mips64/cache_tfp.c		cpu_r8000
file	arch/mips64/mips64/cache_tfp_subr.S	cpu_r8000
file	arch/mips64/mips64/context.S
file	arch/mips64/mips64/cp0access.S
file	arch/mips64/mips64/exception.S		!cpu_r8000
file	arch/mips64/mips64/exception_tfp.S	cpu_r8000
file	arch/mips64/mips64/fp_emulate.c
file	arch/mips64/mips64/lcore_access.S
file	arch/mips64/mips64/lcore_float.S
file	arch/mips64/mips64/mips64r2.S		cpu_mips64r2
file	arch/mips64/mips64/r4000_errata.c	cpu_r4000
file	arch/mips64/mips64/tlbhandler.S		!cpu_r8000
file	arch/mips64/mips64/tlb_tfp.S		cpu_r8000

file	arch/mips64/mips64/db_disasm.c		ddb
file	arch/mips64/mips64/db_machdep.c		ddb
file	arch/mips64/mips64/lcore_ddb.S		ddb|debug

file	arch/mips64/mips64/ipifuncs.c           multiprocessor

file	netinet/in_cksum.c
file	netinet/in4_cksum.c

file	lib/libkern/softfloat.c
@


1.25
log
@Some bits for Loongson 3A support.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.24 2015/07/17 22:52:28 tedu Exp $
d7 1
@


1.24
log
@remove obsolete INET kernel option
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.23 2015/07/08 13:37:31 dlg Exp $
d19 2
d34 1
@


1.23
log
@unify the mutex implementations on all the mips64 platforms.

this basically copies the sgi implementation to mips64 and removes
it from the rest. this way they get an optimised UP mutex implementation
and correct asserts on all platforms.

ok miod@@ jmatthew@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.22 2014/03/22 00:01:04 miod Exp $
d42 2
a43 2
file	netinet/in_cksum.c			inet
file	netinet/in4_cksum.c			inet
@


1.22
log
@Second draft of my attempt to workaround the infamous R4000 end-of-page errata,
affecting R4000 processors revision 2.x and below (found on most R4000 Indigo
and a few R4000 Indy).

Since this errata gets triggered by TLB misses when the code flow crosses a
page boundary, this code attempts to identify code pages prone to trigger the
errata, and force the next page to be mapped for at least as long as the
current pc lies in the troublesome page, by creating wiring extra TLB entries.
These entries get recycled in a lazy-but-aggressive-enough way, either because
of context switches, or because of further tlb exceptions reaching trap().

The errata workaround code is only compiled on R4000-capable kernels (i.e.
sgi GENERIC-IP22 and nothing else), and only enabled on affected processors
(i.e. not on R4000 revision 3, or on R4400).

There is still room for improvemnt in unlucky cases, but in this simple enough
incarnation, this allows my R4000 2.2 Indigo to finally reliably boot multiuser,
even though both /sbin/init and /bin/sh contain code pages which can trigger
the errata.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.21 2012/09/29 21:37:01 miod Exp $
d16 1
@


1.21
log
@Basic R8000 processor support. R8000 processors require MMU-specific code,
exception-specific code, clock-specific code, and L1 cache-specific code. L2
cache is per-design, of which only two exist: SGI Power Indigo2 (IP26) and SGI
Power Challenge (IP21) and are not covered by this commit.

R8000 processors also are 64-bit only processors with 64-bit coprocessor 0
registers, and lack so-called ``compatibility'' memory spaces allowing 32-bit
code to run with sign-extended addresses and registers.

The intrusive changes are covered by #ifdef CPU_R8000 stanzas. However,
trap() is split into a high-level wrapper and a new function, itsa(),
responsible for the actual trap servicing (which name couldn't be helped
because I'm an incorrigible punster). While an R8000 exception may cause
(via trap() ) multiple exceptions to be serviced, non-R8000 processors will
always service one exception in trap(), but they are nevertheless affected
by this code split.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.20 2012/06/23 21:56:06 miod Exp $
d31 1
@


1.20
log
@Replace R5000 and R10000 family assembly cache routines with C equivalents,
which will be easier to maintain on the long run. Be sure to rm cache_r*.d in
your kernel compile directories after updating.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.19 2012/05/27 14:32:04 miod Exp $
d4 1
a4 1
file	arch/mips64/mips64/clock.c
d18 1
d22 2
a23 1
file	arch/mips64/mips64/cache_octeon.c	cpu_octeon
d26 2
a27 1
file	arch/mips64/mips64/exception.S
d31 2
a32 1
file	arch/mips64/mips64/tlbhandler.S
@


1.19
log
@Replace Loongson2F assembly cache routines with equivalent C code. This will
make future maintainance easier.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.18 2012/03/28 20:44:23 miod Exp $
d19 2
a20 2
file	arch/mips64/mips64/cache_r5k.S		cpu_r5000 | cpu_rm7000
file	arch/mips64/mips64/cache_r10k.S		cpu_r10000
@


1.18
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.17 2010/10/24 15:40:03 miod Exp $
d17 1
a17 1
file	arch/mips64/mips64/cache_loongson2.S	cpu_loongson2
@


1.17
log
@Move build_trampoline() and setregs() to a common location for all mips ports.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.16 2010/09/21 20:29:13 miod Exp $
d18 1
@


1.16
log
@Replace the old floating point completion code with a C interface to the
MI softfloat code, implementing all MIPS IV specified floating point
operations.
Tested on R5000, R10000, R14000 and Loongson2F.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.15 2010/09/20 12:10:26 syuu Exp $
d8 1
@


1.15
log
@cache operations for octeon. ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.14 2009/12/12 20:06:50 miod Exp $
d23 1
a23 1
file	arch/mips64/mips64/fp.S
d36 2
@


1.14
log
@Introduce various CPU_### options to enable cpu-specific code or workarounds;
be sure to rerun config(8) on your kernel configuration files.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.13 2009/11/25 17:39:51 syuu Exp $
d19 1
@


1.13
log
@IP30 IPI implementation.
Also few xheart modification for SMP.
ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.12 2009/08/06 21:11:37 miod Exp $
d17 2
a18 2
file	arch/mips64/mips64/cache_r5k.S
file	arch/mips64/mips64/cache_r10k.S
@


1.12
log
@Work in progress support for Loongson2E/2F processors; need option CPU_LOONGSON2
in the kernel to be brought in, due to invasive differences in tlb operation.
Comes with a separate cache operations file due to the cache being R5k-style
with R10k-style way number encoding.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.11 2009/06/13 21:48:01 miod Exp $
d30 2
@


1.11
log
@Enumerate all available nodes for hardware on IP27/IP35 systems; works to some
extent, but isp(4) on other nodes do not work correctly yet.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.10 2009/03/20 18:41:05 miod Exp $
d16 1
@


1.10
log
@Switch sgi to __HAVE_GENERIC_SOFT_INTERRUPTS.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.9 2007/06/21 20:17:12 miod Exp $
a6 1
file	arch/mips64/mips64/mainbus.c
@


1.9
log
@Extent sgi bus_dma to cope with different views of memory: non-contiguous
for the cpu, contiguous from different bases for devices. This allows
memory above 256MB to be used with bus_dma (and we had really been lucky
with the first few large-memory builds).
Information about memory accesses taken from Linux.
@
text
@d1 1
a1 6
#	$OpenBSD: files.mips64,v 1.8 2007/06/18 21:46:41 deraadt Exp $

file	arch/mips64/mips64/mem.c
file	arch/mips64/mips64/process_machdep.c
file	arch/mips64/mips64/sys_machdep.c
file	arch/mips64/mips64/vm_machdep.c
d8 1
d10 1
d12 2
d15 1
@


1.8
log
@this is the sgi disksubr, not some mythical "all mips64 architectures can use it" balony
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.7 2005/07/14 02:09:46 uwe Exp $
a10 1
file	arch/mips64/mips64/busdma.c
@


1.7
log
@More netccitt and netns removals; OK henning, brad, mickey
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.6 2005/05/02 16:54:19 deraadt Exp $
a2 1
file	arch/mips64/mips64/disksubr.c		disk
@


1.6
log
@obvious typo, designed to break the tree, brad, hmm?
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.5 2005/05/01 21:36:56 brad Exp $
a34 1
file	netns/ns_cksum.c			ns
@


1.5
log
@To allow for MD override of in4_cksum()...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.4 2004/10/08 07:12:55 grange Exp $
d33 3
a35 3
file	netinet/in_cksum.c	inet
file	netinet/in4_cksum.c	inet
file	netins/ns_cksum		ns
@


1.4
log
@disksubr.c should depend on disk.

ok pefo@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.3 2004/09/20 10:29:57 pefo Exp $
d33 3
@


1.3
log
@Add support for R10K cpu class
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.2 2004/08/09 14:57:26 pefo Exp $
d3 1
a3 1
file	arch/mips64/mips64/disksubr.c
@


1.2
log
@Big cleanup. Removed some unused obsolete stuff and fixed copyrights
on some files. Arcbios support is now in, thus detects memorysize and cpu
clock frequency.
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips64,v 1.1 2004/08/06 20:56:01 pefo Exp $
d20 1
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
#	$OpenBSD: files.mips,v 1.2 1998/03/16 09:02:53 pefo Exp $
a2 1
file	arch/mips64/mips64/cpu_ecoff.c
d9 1
@

