head	1.6;
access;
symbols
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.04.30.16.45.45;	author mpi;	state Exp;
branches;
next	1.5;
commitid	2Gtqjzrin9LL2yHk;

1.5
date	2017.04.20.13.57.30;	author visa;	state Exp;
branches;
next	1.4;
commitid	RHJVP52IiQkInZzu;

1.4
date	2016.03.19.11.34.22;	author mpi;	state Exp;
branches;
next	1.3;
commitid	15xZY6veDWwRM6Iq;

1.3
date	2015.09.26.04.03.25;	author visa;	state Exp;
branches;
next	1.2;
commitid	fA0E8E4QINGPXu1b;

1.2
date	2015.09.21.06.23.03;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	zSn42zxL2b4PL9bB;

1.1
date	2015.07.08.13.37.31;	author dlg;	state Exp;
branches;
next	;
commitid	Ds9kNjjKbF4CbIsT;


desc
@@


1.6
log
@Rename Debugger() into db_enter().

Using a name with the 'db_' prefix makes it invisible from the dynamic
profiler.

ok deraadt@@, kettenis@@, visa@@
@
text
@/*	$OpenBSD: mutex.c,v 1.5 2017/04/20 13:57:30 visa Exp $	*/

/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/param.h>
#include <sys/mutex.h>
#include <sys/systm.h>
#include <sys/atomic.h>

#include <machine/intr.h>

#include <ddb/db_output.h>

void
__mtx_init(struct mutex *mtx, int wantipl)
{
	mtx->mtx_owner = NULL;
	mtx->mtx_wantipl = wantipl;
	mtx->mtx_oldipl = IPL_NONE;
}

#ifdef MULTIPROCESSOR

#ifdef MP_LOCKDEBUG
#ifndef DDB
#error "MP_LOCKDEBUG requires DDB"
#endif

/* CPU-dependent timing, needs this to be settable from ddb. */
extern int __mp_lock_spinout;
#endif

void
__mtx_enter(struct mutex *mtx)
{
#ifdef MP_LOCKDEBUG
	int nticks = __mp_lock_spinout;
#endif

	while (__mtx_enter_try(mtx) == 0) {
#ifdef MP_LOCKDEBUG
		if (--nticks == 0) {
			db_printf("%s(%p): lock spun out", __func__, mtx);
			db_enter();
			nticks = __mp_lock_spinout;
		}
#endif
	}
}

int
__mtx_enter_try(struct mutex *mtx)
{
	struct cpu_info *owner, *ci = curcpu();
	int s;
	
 	if (mtx->mtx_wantipl != IPL_NONE)
		s = splraise(mtx->mtx_wantipl);

	owner = atomic_cas_ptr(&mtx->mtx_owner, NULL, ci);
#ifdef DIAGNOSTIC
	if (__predict_false(owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif
	if (owner == NULL) {
		membar_enter();
		if (mtx->mtx_wantipl != IPL_NONE)
			mtx->mtx_oldipl = s;
#ifdef DIAGNOSTIC
		ci->ci_mutex_level++;
#endif
		return (1);
	}

	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);

	return (0);
}
#else
void
__mtx_enter(struct mutex *mtx)
{
	struct cpu_info *ci = curcpu();

#ifdef DIAGNOSTIC
	if (__predict_false(mtx->mtx_owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif

	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = splraise(mtx->mtx_wantipl);

	mtx->mtx_owner = ci;

#ifdef DIAGNOSTIC
	ci->ci_mutex_level++;
#endif
}

int
__mtx_enter_try(struct mutex *mtx)
{
	__mtx_enter(mtx);
	return (1);
}
#endif

void
__mtx_leave(struct mutex *mtx)
{
	int s;

	MUTEX_ASSERT_LOCKED(mtx);

#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level--;
#endif

	s = mtx->mtx_oldipl;
#ifdef MULTIPROCESSOR
	membar_exit();
#endif
	mtx->mtx_owner = NULL;
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);
}
@


1.5
log
@Hook up mutex(9) to witness(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.4 2016/03/19 11:34:22 mpi Exp $	*/
d67 1
a67 1
			Debugger();
@


1.4
log
@Reduces the noise around the global ``ticks'' variable by renaming
all the local ones to ``nticks''.

ok stefan@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.3 2015/09/26 04:03:25 visa Exp $	*/
d57 1
a57 1
mtx_enter(struct mutex *mtx)
d63 1
a63 1
	while (mtx_enter_try(mtx) == 0) {
d75 1
a75 1
mtx_enter_try(struct mutex *mtx)
d105 1
a105 1
mtx_enter(struct mutex *mtx)
d125 1
a125 1
mtx_enter_try(struct mutex *mtx)
d127 1
a127 1
	mtx_enter(mtx);
d133 1
a133 1
mtx_leave(struct mutex *mtx)
@


1.3
log
@Add a spinout check to the mips64 mutex, to aid debugging.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.2 2015/09/21 06:23:03 kettenis Exp $	*/
d60 1
a60 1
	int ticks = __mp_lock_spinout;
d65 1
a65 1
		if (--ticks == 0) {
d68 1
a68 1
			ticks = __mp_lock_spinout;
@


1.2
log
@Fix membar positioning in mtx_enter_try() and (critically!) mtx_leave()

Same diff as guenther@@ committed for alpha.
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.1 2015/07/08 13:37:31 dlg Exp $	*/
d35 1
d46 10
d59 13
a71 2
	while (mtx_enter_try(mtx) == 0)
		;
@


1.1
log
@unify the mutex implementations on all the mips64 platforms.

this basically copies the sgi implementation to mips64 and removes
it from the rest. this way they get an optimised UP mutex implementation
and correct asserts on all platforms.

ok miod@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.15 2015/04/21 01:31:51 dlg Exp $	*/
d67 1
a72 1
		membar_enter();
a116 3
#ifdef MULTIPROCESSOR
	membar_exit();
#endif
d122 3
@

