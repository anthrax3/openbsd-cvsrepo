head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.09.02.13.53.55;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	nIvSxHP4lULLmmAF;

1.18
date	2014.09.30.06.51.58;	author jmatthew;	state Exp;
branches;
next	1.17;
commitid	pUEUpP9FlbomZUiI;

1.17
date	2014.07.12.18.44.42;	author tedu;	state Exp;
branches;
next	1.16;
commitid	uKVPYMN2MLxdZxzH;

1.16
date	2014.07.08.17.19.25;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	EF98ch02VpFassUi;

1.15
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.29.19.24.31;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.10.15.59.21;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.12.21.14.56.24;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.18.17.00.28;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.28.06.55.27;	author syuu;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.28.16.49.30;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.26.23.32.46;	author syuu;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.22.22.15.25;	author syuu;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.21.23.28.14;	author syuu;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.22.20.59.24;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.22.20.05.27;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.07.08.35.47;	author syuu;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.20.18.41.06;	author miod;	state Exp;
branches;
next	;


desc
@@


1.19
log
@simple size for free()
@
text
@/*	$OpenBSD: softintr.c,v 1.18 2014/09/30 06:51:58 jmatthew Exp $	*/
/*	$NetBSD: softintr.c,v 1.2 2003/07/15 00:24:39 lukem Exp $	*/

/*
 * Copyright (c) 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/mutex.h>
#include <sys/malloc.h>
#include <sys/atomic.h>

#include <uvm/uvm_extern.h>

#include <machine/intr.h>
#ifdef MULTIPROCESSOR
#include <mips64/mips_cpu.h>
#endif

struct soft_intrq soft_intrq[SI_NQUEUES];

void	netintr(void);

/*
 * Initialize the software interrupt system.
 */
void
softintr_init(void)
{
	struct soft_intrq *siq;
	int i;

	for (i = 0; i < SI_NQUEUES; i++) {
		siq = &soft_intrq[i];
		TAILQ_INIT(&siq->siq_list);
		siq->siq_si = i;
		mtx_init(&siq->siq_mtx, IPL_HIGH);
	}
}

/*
 * Process pending software interrupts on the specified queue.
 *
 * NOTE: We must already be at the correct interrupt priority level.
 */
void
softintr_dispatch(int si)
{
	struct soft_intrq *siq = &soft_intrq[si];
	struct soft_intrhand *sih;

	for (;;) {
		mtx_enter(&siq->siq_mtx);
		sih = TAILQ_FIRST(&siq->siq_list);
		if (sih == NULL) {
			mtx_leave(&siq->siq_mtx);
			break;
		}

		TAILQ_REMOVE(&siq->siq_list, sih, sih_list);
		sih->sih_pending = 0;

		atomic_inc_int(&uvmexp.softs);

		mtx_leave(&siq->siq_mtx);

		(*sih->sih_func)(sih->sih_arg);
	}
}

/*
 * Register a software interrupt handler.
 */
void *
softintr_establish(int ipl, void (*func)(void *), void *arg)
{
	struct soft_intrhand *sih;
	int si;

	switch (ipl) {
	case IPL_SOFT:
		si = SI_SOFT;
		break;
	case IPL_SOFTCLOCK:
		si = SI_SOFTCLOCK;
		break;
	case IPL_SOFTNET:
		si = SI_SOFTNET;
		break;
	case IPL_TTY:			/* XXX until MI code is fixed */
	case IPL_SOFTTTY:
		si = SI_SOFTTTY;
		break;
	default:
		printf("softintr_establish: unknown soft IPL %d\n", ipl);
		return NULL;
	}

	sih = malloc(sizeof(*sih), M_DEVBUF, M_NOWAIT);
	if (__predict_true(sih != NULL)) {
		sih->sih_func = func;
		sih->sih_arg = arg;
		sih->sih_siq = &soft_intrq[si];
		sih->sih_pending = 0;
	}
	return (sih);
}

/*
 * Unregister a software interrupt handler.
 */
void
softintr_disestablish(void *arg)
{
	struct soft_intrhand *sih = arg;
	struct soft_intrq *siq = sih->sih_siq;

	mtx_enter(&siq->siq_mtx);
	if (sih->sih_pending) {
		TAILQ_REMOVE(&siq->siq_list, sih, sih_list);
		sih->sih_pending = 0;
	}
	mtx_leave(&siq->siq_mtx);

	free(sih, M_DEVBUF, sizeof *sih);
}

/*
 * Schedule a software interrupt.
 */
void
softintr_schedule(void *arg)
{
	struct cpu_info *ci = curcpu();
	struct soft_intrhand *sih = (struct soft_intrhand *)arg;
	struct soft_intrq *siq = sih->sih_siq;

	mtx_enter(&siq->siq_mtx);
	if (sih->sih_pending == 0) {
		TAILQ_INSERT_TAIL(&siq->siq_list, sih, sih_list);
		sih->sih_pending = 1;
		atomic_setbits_int(&ci->ci_softpending, SINTMASK(siq->siq_si));
	}
	mtx_leave(&siq->siq_mtx);
}

void
dosoftint()
{
	struct cpu_info *ci = curcpu();
	int sir, q, mask;
#ifdef MULTIPROCESSOR
	register_t sr;

	/* Enable interrupts */
	sr = getsr();
	ENABLEIPI();
	__mp_lock(&kernel_lock);
#endif

	while ((sir = ci->ci_softpending) != 0) {
		atomic_clearbits_int(&ci->ci_softpending, sir);

		for (q = SI_NQUEUES - 1; q >= 0; q--) {
			mask = SINTMASK(q);
			if (sir & mask)
				softintr_dispatch(q);
		}
	}

#ifdef MULTIPROCESSOR
	__mp_unlock(&kernel_lock);
	setsr(sr);
#endif
}
@


1.18
log
@implement atomic operations using ll/sc, and convert rw_cas and callers of the
pre-existing atomics to match.

tested on sgi (octane) and octeon (erl)
ok miod@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.17 2014/07/12 18:44:42 tedu Exp $	*/
d156 1
a156 1
	free(sih, M_DEVBUF, 0);
@


1.17
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.16 2014/07/08 17:19:25 deraadt Exp $	*/
d42 1
a45 1
#include <machine/atomic.h>
d94 1
a94 1
		atomic_add_int(&uvmexp.softs, 1);
@


1.16
log
@decouple struct uvmexp into a new file, so that uvm_extern.h and sysctl.h
don't need to be married.
ok guenther miod beck jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.15 2012/10/03 11:18:23 miod Exp $	*/
d156 1
a156 1
	free(sih, M_DEVBUF);
@


1.15
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.14 2012/09/29 19:24:31 miod Exp $	*/
d40 1
@


1.14
log
@Handle the coprocessor 0 cause and status registers as a 64 bit value now,
as some odd mips designs need moro than 32 bits in there. This causes a lot
of mechanical changes everywhere getsr() is used.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.13 2012/04/10 15:59:21 miod Exp $	*/
d46 3
@


1.13
log
@Count traps and fpu context switches.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.12 2010/12/21 14:56:24 claudio Exp $	*/
d180 1
a180 1
	u_int32_t sr;
@


1.12
log
@Convert netisr to a normal soft interrupt instead of hanving MD code
for it. This makes the netisr a real C function which will help further
development. No noticable performance change on i386 and amd64.
With input from kettenis@@ and miod@@ additional OKs mikeb@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.11 2010/01/18 17:00:28 miod Exp $	*/
d90 1
a90 1
		uvmexp.softs++;
@


1.11
log
@dosoftint() being invoked at IPL_SOFTINT, don't bother checking the ipl before
grabbing the kernel lock.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.10 2009/12/28 06:55:27 syuu Exp $	*/
a41 3
/* XXX Network interrupts should be converted to new softintrs. */
#include <net/netisr.h>

a48 2
struct soft_intrhand *softnet_intrhand;

a65 4

	/* XXX Establish legacy software interrupt handlers. */
	softnet_intrhand = softintr_establish(IPL_SOFTNET,
	    (void (*)(void *))netintr, NULL);
a171 19
}

int netisr; 

void
netintr(void)
{
	int n;

	while ((n = netisr) != 0) {
		atomic_clearbits_int(&netisr, n);
#define	DONETISR(bit, fn)						\
		do {							\
			if (n & (1 << (bit)))				\
				fn();					\
		} while (0)
#include <net/netisr_dispatch.h>
#undef DONETISR
	}
@


1.10
log
@MP-safe pmap implemented, enable IPI in interrupt handler to avoid deadlock.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.9 2009/11/28 16:49:30 miod Exp $	*/
d210 4
a213 6
	if (ci->ci_ipl < IPL_SCHED) {
		/* Enable interrupts */
		sr = getsr();
		ENABLEIPI();
		__mp_lock(&kernel_lock);
	}
d227 2
a228 4
	if (ci->ci_ipl < IPL_SCHED) {
		__mp_unlock(&kernel_lock);
		setsr(sr);
	}
@


1.9
log
@missing #ifdef MULTIPROCESSOR protection around locking code.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.8 2009/11/26 23:32:46 syuu Exp $	*/
d207 2
d210 4
a213 2
#ifdef MULTIPROCESSOR
	if (ci->ci_ipl < IPL_SCHED)
d215 1
d229 1
a229 1
	if (ci->ci_ipl < IPL_SCHED)
d231 2
@


1.8
log
@Now IPI can interrupt to clock interrupt handler.
It prevents deadlock with TLB shootdown and clock interrupt.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.7 2009/11/22 22:15:25 syuu Exp $	*/
d208 1
d211 1
d223 1
d226 1
@


1.7
log
@removing unnecessary locks.
ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.6 2009/11/21 23:28:14 syuu Exp $	*/
d208 3
d220 3
@


1.6
log
@mplock, rw_cas implemented
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.5 2009/10/22 22:08:54 miod Exp $	*/
a102 1
		KERNEL_LOCK();
a103 1
		KERNEL_UNLOCK();
@


1.5
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.4 2009/10/22 20:59:24 miod Exp $	*/
d103 1
d105 1
@


1.4
log
@With the splx() changes, it is no longer necessary to remember which interrupt
sources were masked and saved in ci_ipending, as splx() will unmask what needs
to be unmasked anyway. ci_ipending only now needs to store pending soft
interrupts, so rename it to ci_softpending.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.3 2009/10/22 20:05:27 miod Exp $	*/
d203 1
a203 1
dosoftint(uint32_t xcpl)
d208 1
a208 1
	while ((sir = (ci->ci_softpending & ~xcpl)) != 0) {
@


1.3
log
@Replace intrmask_t with uint32_t. This types only describes interrupt masks
in the coprocessor 0 status register (coupled with ICR on rm7k/rm9k), and
may be completely alien to real hardware interrupt masks, so don't make
things unnecessary confusing.
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.2 2009/10/07 08:35:47 syuu Exp $	*/
d178 1
a178 1
		atomic_setbits_int(&ci->ci_ipending, SINTMASK(siq->siq_si));
d208 2
a209 2
	while ((sir = (ci->ci_ipending & SINT_ALLMASK & ~xcpl)) != 0) {
		atomic_clearbits_int(&ci->ci_ipending, sir);
@


1.2
log
@ipending, cpl moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: softintr.c,v 1.1 2009/03/20 18:41:06 miod Exp $	*/
d203 1
a203 1
dosoftint(intrmask_t xcpl)
@


1.1
log
@Switch sgi to __HAVE_GENERIC_SOFT_INTERRUPTS.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d170 1
d178 1
a178 1
		atomic_setbits_int(&ipending, SINTMASK(siq->siq_si));
d205 1
d208 2
a209 2
	while ((sir = (ipending & SINT_ALLMASK & ~xcpl)) != 0) {
		atomic_clearbits_int(&ipending, sir);
@

