head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2015.09.23.19.04.31;	author miod;	state Exp;
branches;
next	1.2;
commitid	x0NAPJVWmtyLdhtu;

1.2
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.29.21.37.03;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Reorder subtractions and branches to shave one cycle per call to
tfp_inval_icache().
@
text
@/*	$OpenBSD: cache_tfp_subr.S,v 1.2 2012/10/03 11:18:23 miod Exp $	*/

/*
 * Copyright (c) 2012 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/param.h>
#include <machine/asm.h>
#include <machine/cpu.h>
#include <mips64/mips_cpu.h>

#include "assym.h"

	.set	mips4
	.set	noreorder

/*
 * The R8000 processor does not have documented cache maintainance
 * instructions. While this is not really a problem for D$, which is
 * write-through and physically tagged, this is a problem for I$,
 * which is virtually tagged.
 *
 * Since there is no way to invalidate I$, the best we can do is
 * override existing cache lines to evict them from the cache.
 *
 * The following routine will attempt to do so. It spans the whole I$
 * cache size, and may be invoked from any offset multiple of 32 bytes
 * (in case a smaller portion of the cache needs to be invalidated).
 *
 * void tfp_inval_icache(register_t size)
 */
	.align	14
LEAF(tfp_inval_icache, 0)						/* { */

#define	ICACHE_CHUNK_INVALIDATE \
	subu	a0, 32; \
	NOP; \
	NOP; \
	NOP; \
	blez	a0, 9f; \
	 NOP; \
	NOP; \
	NOP

#define	ICACHE_256B_INVALIDATE \
	ICACHE_CHUNK_INVALIDATE; ICACHE_CHUNK_INVALIDATE; \
	ICACHE_CHUNK_INVALIDATE; ICACHE_CHUNK_INVALIDATE; \
	ICACHE_CHUNK_INVALIDATE; ICACHE_CHUNK_INVALIDATE; \
	ICACHE_CHUNK_INVALIDATE; ICACHE_CHUNK_INVALIDATE;

#define	ICACHE_2KB_INVALIDATE \
	ICACHE_256B_INVALIDATE; ICACHE_256B_INVALIDATE; \
	ICACHE_256B_INVALIDATE; ICACHE_256B_INVALIDATE; \
	ICACHE_256B_INVALIDATE; ICACHE_256B_INVALIDATE; \
	ICACHE_256B_INVALIDATE; ICACHE_256B_INVALIDATE

#define	ICACHE_16KB_INVALIDATE \
	ICACHE_2KB_INVALIDATE; ICACHE_2KB_INVALIDATE; \
	ICACHE_2KB_INVALIDATE; ICACHE_2KB_INVALIDATE; \
	ICACHE_2KB_INVALIDATE; ICACHE_2KB_INVALIDATE; \
	ICACHE_2KB_INVALIDATE; ICACHE_2KB_INVALIDATE
	
	ICACHE_16KB_INVALIDATE

	b	tfp_inval_icache	/* wrap around */
	 NOP
9:
	j	ra
	 NOP
END(tfp_inval_icache)							/* } */

/*
 * Clear the D$ cache tag for the given address.
 * Interrupts must be disabled (to be free to alter the Vaddr register).
 */

#define	DCTW	.align 4; .word 0x4300000a; SSNOP; SSNOP; SSNOP

LEAF(tfp_dctw_zero, 0)							/* { */
	DMTC0	a0, COP_0_VADDR
	MTC0_HAZARD
	DMTC0	zero, COP_0_DCACHE
	MTC0_HAZARD
	DCTW
	j	ra
	 NOP
END(tfp_dctw_zero)							/* } */
@


1.2
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@d1 1
a1 1
/*	$OpenBSD: cache_tfp_subr.S,v 1.1 2012/09/29 21:37:03 miod Exp $	*/
d48 1
a48 2
	beqz	a0, 9f; \
	 NOP; \
a50 1
	subu	a0, 32; \
d52 2
d77 1
a77 1
	bnez	a0, tfp_inval_icache	/* wrap around */
@


1.1
log
@Basic R8000 processor support. R8000 processors require MMU-specific code,
exception-specific code, clock-specific code, and L1 cache-specific code. L2
cache is per-design, of which only two exist: SGI Power Indigo2 (IP26) and SGI
Power Challenge (IP21) and are not covered by this commit.

R8000 processors also are 64-bit only processors with 64-bit coprocessor 0
registers, and lack so-called ``compatibility'' memory spaces allowing 32-bit
code to run with sign-extended addresses and registers.

The intrusive changes are covered by #ifdef CPU_R8000 stanzas. However,
trap() is split into a high-level wrapper and a new function, itsa(),
responsible for the actual trap servicing (which name couldn't be helped
because I'm an incorrigible punster). While an R8000 exception may cause
(via trap() ) multiple exceptions to be serviced, non-R8000 processors will
always service one exception in trap(), but they are nevertheless affected
by this code split.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d22 1
@

