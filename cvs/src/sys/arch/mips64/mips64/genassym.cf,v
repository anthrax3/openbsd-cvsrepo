head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.9.0.10
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6;
locks; strict;
comment	@# @;


1.14
date	2016.12.22.15.33.36;	author visa;	state Exp;
branches;
next	1.13;
commitid	sw48d58czeutOmw2;

1.13
date	2016.08.16.13.03.58;	author visa;	state Exp;
branches;
next	1.12;
commitid	6TiwRQZbesPVamIE;

1.12
date	2014.07.09.08.49.20;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Ek7Yp7MOdO4Y4qUl;

1.11
date	2014.04.03.08.07.16;	author mpi;	state Exp;
branches;
next	1.10;

1.10
date	2014.03.22.00.01.04;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.24.16.26.04;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.17.12.34.17;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.28.16.20.28;	author syuu;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.09.23.43.43;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.09.23.34.29;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.08.06.35.16;	author syuu;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.08.01.35.52;	author syuu;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.05.06.44.58;	author syuu;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.03.14.17.27;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Extend the size of user virtual address space from 2GB to 1TB on mips64
by adding another level to page directories. This improves ASLR and
complements W^X added earlier on some systems, giving a notable update
to the architecture's security. Besides, there is now more room for
running tasks that hog memory.

Testing help from deraadt@@ and fcambus@@.
Platforms tested: loongson, octeon, sgi/IP27 and sgi/IP30
(IP30 also with 4KB pages).
@
text
@#	$OpenBSD: genassym.cf,v 1.13 2016/08/16 13:03:58 visa Exp $
#
# Copyright (c) 1997 Per Fogelstrom / Opsycon AB
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#


include <sys/param.h>
include <sys/buf.h>
include <sys/proc.h>
include <sys/mbuf.h>
include <sys/user.h>
include <uvm/uvm_extern.h>
include <sys/siginfo.h>

include <machine/cpu.h>

export	SONPROC

struct	proc
member	p_addr
member	p_cpu
member	p_stat
member	p_vmspace
member	P_ASTPENDING	p_md.md_astpending

struct	pcb
member	pcb_regs
member	PCB_FPREGS	pcb_regs.f0
member	pcb_context
member	pcb_onfault
member	pcb_segtab
member	pcb_nwired

struct	cpu_info
member	ci_cpuid
member	ci_curproc
member	ci_curprocpaddr
member	ci_fpuproc
member	ci_ipl

export	CKSEG0_BASE
export	CKSEG1_BASE
export	VM_MIN_KERNEL_ADDRESS

struct	vmspace
member	VMSPACE_PMAP	vm_map.pmap

struct	pmap
member	PM_ASID pm_asid[0].pma_asid
export	NPDEPG
export	NPTEPG
export	PMAP_SEGTABSIZE
export	SEGSHIFT
export	DIRSHIFT

export	CCA_CACHED
export	CCA_COHERENT_EXCLWRITE
export	CCA_NC
@


1.13
log
@Remove RM7000/RM9000-specific performance counter code. It originates
from PMON2000 and has not been enabled on OpenBSD.

Suggested by and ok miod@@ (after seeing a quad_t cleanup patch of mine)
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.12 2014/07/09 08:49:20 deraadt Exp $
d71 1
d75 1
@


1.12
log
@need uvm/uvm_extern.h since no longer supplied  below user.h
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.11 2014/04/03 08:07:16 mpi Exp $
a45 5
member	P_PC_CTRL	p_md.md_pc_ctrl
member	P_PC_COUNT	p_md.md_pc_count
member	P_WATCH_1	p_md.md_watch_1
member	P_WATCH_2	p_md.md_watch_2
member	P_WATCH_M	p_md.md_watch_m
@


1.11
log
@Moar <uvm/uvm.h> -> <uvm/uvm_extern.h> love.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.10 2014/03/22 00:01:04 miod Exp $
d33 1
@


1.10
log
@Second draft of my attempt to workaround the infamous R4000 end-of-page errata,
affecting R4000 processors revision 2.x and below (found on most R4000 Indigo
and a few R4000 Indy).

Since this errata gets triggered by TLB misses when the code flow crosses a
page boundary, this code attempts to identify code pages prone to trigger the
errata, and force the next page to be mapped for at least as long as the
current pc lies in the troublesome page, by creating wiring extra TLB entries.
These entries get recycled in a lazy-but-aggressive-enough way, either because
of context switches, or because of further tlb exceptions reaching trap().

The errata workaround code is only compiled on R4000-capable kernels (i.e.
sgi GENERIC-IP22 and nothing else), and only enabled on affected processors
(i.e. not on R4000 revision 3, or on R4400).

There is still room for improvemnt in unlucky cases, but in this simple enough
incarnation, this allows my R4000 2.2 Indigo to finally reliably boot multiuser,
even though both /sbin/init and /bin/sh contain code pages which can trigger
the errata.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.9 2012/06/24 16:26:04 miod Exp $
a33 2

include <uvm/uvm.h>
@


1.9
log
@Add cache operation functions pointers to struct cpu_info; the various
cache lines and sizes are already there, after all.

The ConfigCache cache routine is responsible for filling these function
pointers; cache routine invocation macros are updated to use the cpu_info
fields, but may still be overriden in <machine/cpu.h> on platforms where
only one set of cache routines is used.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.8 2012/06/17 12:34:17 miod Exp $
d59 1
@


1.8
log
@Using the LLAddr register to store our curcpu() pointer on R10k SMP kernels
was a nice trick, but this register is only 32-bit wide and will be
sign-extended, which requires all cpu_info structs to be allocated within 2GB
physical - something which may not be possible on some configurations.

This diff changes IP30.MP kernels to no longer use LLAddr to store curcpu,
but use unused fields of the MPConf structure in low memory, indexed with the
physical processor id, which can be obtained from the Heart PRID register.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.7 2010/04/28 16:20:28 syuu Exp $
a64 10
member	ci_cacheconfiguration
member	ci_cacheways
member	ci_l1instcachesize
member	ci_l1instcacheline
member	ci_l1instcacheset
member	ci_l1datacachesize
member	ci_l1datacacheline
member	ci_l1datacacheset
member	ci_l2size
member	ci_l3size
a65 10
member	ci_cacheconfiguration
member	ci_cacheways
member	ci_l1instcachesize
member	ci_l1instcacheline
member	ci_l1instcacheset
member	ci_l1datacachesize
member	ci_l1datacacheline
member	ci_l1datacacheset
member	ci_l2size
member	ci_l3size
a69 1
export	SIGFPE
a82 6

export	FPE_FLTDIV
export	FPE_FLTOVF
export	FPE_FLTUND
export	FPE_FLTRES
export	FPE_FLTINV
@


1.7
log
@Storeing current cpu_info address into LLAddr register, for curcpu().
Instead of previous implementation, we won't use physical cpuid to fetch curcpu().
This requires to implement IP27/35 SMP.
Implemented getcurcpu() and setcurcpu() for it, smp_malloc() renamed alloc_contiguous_pages() because now it only allocate by page.
ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.6 2010/01/09 23:43:43 miod Exp $
d102 2
@


1.6
log
@Make interrupt depth counters per-cpu.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.5 2010/01/09 23:34:29 miod Exp $
d61 1
@


1.5
log
@Move cache information from global variables to per-cpu_info fields; this
allows processors with different cache sizes to be used.

Cache management routines now take a struct cpu_info * as first parameter.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.4 2010/01/08 06:35:16 syuu Exp $
d42 2
a44 1
member	p_addr
a45 1
member	p_cpu
d64 10
@


1.4
log
@Fix compile failure on MP kernel(missing P_CPU macro on mips64/mips64/context.S)
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.3 2010/01/08 01:35:52 syuu Exp $
d65 10
@


1.3
log
@MP-safe FPU handling. ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.2 2010/01/05 06:44:58 syuu Exp $
d45 1
@


1.2
log
@Dynamic allocation for ASID and ASID generation number on struct pmap. ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.1 2010/01/03 14:17:27 miod Exp $
d62 1
@


1.1
log
@Use a split genassym.cf scheme on mips64 ports. Don't forget to rerun config(8).
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.20 2010/01/01 15:04:00 miod Exp $
d73 1
a73 1
member	pm_tlbpid
@

