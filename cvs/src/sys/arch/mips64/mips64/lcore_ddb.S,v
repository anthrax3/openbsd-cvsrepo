head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.20
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.16
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.12
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.14
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.14
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.12
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@# @;


1.13
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.29.19.02.26;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.31.19.39.04;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.30.06.22.00;	author syuu;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.22.20.37.53;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.20.07.06.26;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.27.19.16.06;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.17.13.12.17;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.15.16.05.18;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.10.08.58.27;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.20.15.47;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.09.14.57.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.03;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@/*	$OpenBSD: lcore_ddb.S,v 1.12 2012/09/29 19:02:26 miod Exp $ */

/*
 * Copyright (c) 2001-2003 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#include <sys/errno.h>
#include <sys/syscall.h>

#include <machine/param.h>
#include <machine/asm.h>
#include <machine/cpu.h>
#include <mips64/mips_cpu.h>
#include <machine/regnum.h>
#include <machine/cpustate.h>
#include <machine/trap.h>

#include "assym.h"

	.set	mips3
	.set	noreorder		# Noreorder is default style!

LEAF(kdbpeekd, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	and	v1, a0, 7			# unaligned ?
	bne	v1, zero, 1f
	 sw	v0, PCB_ONFAULT(t0)

	ld	v0, (a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)

1:
	LDHI	v0, 0(a0)
	LDLO	v0, 7(a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpeekd)

LEAF(kdbpeek, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	and	v1, a0, 3			# unaligned ?
	bne	v1, zero, 1f
	 sw	v0, PCB_ONFAULT(t0)

	lwu	v0, (a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)

1:
	LWHI	v0, 0(a0)
	LWLO	v0, 3(a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpeek)

LEAF(kdbpeekw, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	and	v1, a0, 1			# unaligned ?
	bne	v1, zero, 1f
	 sw	v0, PCB_ONFAULT(t0)

	lh	v0, (a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)

1:
	li	v0, -1				# error!
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpeekw)

LEAF(kdbpeekb, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	sw	v0, PCB_ONFAULT(t0)
	lb	v0, 0(a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpeekb)

	.globl	kt_ddberr
kt_ddberr:
	jr	ra
	 li	v0, -1

LEAF(kdbpoked, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	and	v1, a0, 7			# unaligned ?
	bne	v1, zero, 1f
	 sw	v0, PCB_ONFAULT(t0)

	sd	a1, (a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)

1:
	SDHI	a1, 0(a0)
	SDLO	a1, 7(a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpoked)

LEAF(kdbpoke, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	and	v1, a0, 3			# unaligned ?
	bne	v1, zero, 1f
	 sw	v0, PCB_ONFAULT(t0)

	sw	a1, (a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)

1:
	SWHI	a1, 0(a0)
	SWLO	a1, 3(a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpoke)

LEAF(kdbpokew, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	and	v1, a0, 1			# unaligned ?
	bne	v1, zero, 1f
	 sw	v0, PCB_ONFAULT(t0)

	sh	a1, (a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)

1:
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpokew)

LEAF(kdbpokeb, 0)
	GET_CPU_INFO(t1, t0)
	PTR_L	t0, CI_CURPROCPADDR(t1)
	li	v0, KT_DDBERR
	sw	v0, PCB_ONFAULT(t0)
	sb	a1, 0(a0)
	jr	ra
	 sw	zero, PCB_ONFAULT(t0)
END(kdbpokeb)

LEAF(Debugger, 0)
	break   BREAK_SOVER_VAL
	jr	ra
	 NOP
END(Debugger)

LEAF(setjmp, 0)
	MFC0	v0, COP_0_STATUS_REG
	MFC0_HAZARD
	REG_S	s0, REGSZ * 0(a0)
	REG_S	s1, REGSZ * 1(a0)
	REG_S	s2, REGSZ * 2(a0)
	REG_S	s3, REGSZ * 3(a0)
	REG_S	s4, REGSZ * 4(a0)
	REG_S	s5, REGSZ * 5(a0)
	REG_S	s6, REGSZ * 6(a0)
	REG_S	s7, REGSZ * 7(a0)
	REG_S	s8, REGSZ * 8(a0)
	REG_S	sp, REGSZ * 9(a0)
	REG_S	ra, REGSZ * 10(a0)
	REG_S	v0, REGSZ * 11(a0)
	jr	ra
	 li	v0, 0			# setjmp return
END(setjmp)

LEAF(longjmp, 0)
	REG_L	v0, REGSZ * 11(a0)
	REG_L	ra, REGSZ * 10(a0)
	REG_L	s0, REGSZ * 0(a0)
	REG_L	s1, REGSZ * 1(a0)
	REG_L	s2, REGSZ * 2(a0)
	REG_L	s3, REGSZ * 3(a0)
	REG_L	s4, REGSZ * 4(a0)
	REG_L	s5, REGSZ * 5(a0)
	REG_L	s6, REGSZ * 6(a0)
	REG_L	s7, REGSZ * 7(a0)
	REG_L	s8, REGSZ * 8(a0)
	REG_L	sp, REGSZ * 9(a0)
	MTC0	v0, COP_0_STATUS_REG
	MTC0_SR_IE_HAZARD
	jr	ra
	 li	v0, 1			# longjmp return
END(longjmp)
@


1.12
log
@Introduce assembly macros for specific processor hazards: tlb update, status
register update, status register update causing a change to the interrupt
enable flag, and a few other arcane ones. <mips64/asm.h> will provide
(supposedly sane) defaults, and <machine/asm.h> may override these with
better tuned versions.

Use these macros instead of random strings of nop in the various .S files
requiring hazard workarounds.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.11 2010/01/31 19:39:04 miod Exp $ */
d34 1
@


1.11
log
@Remove !__LP64__ bits and __LP64__ tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.10 2009/09/30 06:22:00 syuu Exp $ */
d40 1
d49 1
a49 1
	sw	v0, PCB_ONFAULT(t0)
d53 1
a53 1
	sw	zero, PCB_ONFAULT(t0)
d59 1
a59 1
	sw	zero, PCB_ONFAULT(t0)
d68 1
a68 1
	sw	v0, PCB_ONFAULT(t0)
d70 1
a70 1
	lw	v0, (a0)
d72 1
a72 1
	sw	zero, PCB_ONFAULT(t0)
d78 1
a78 1
	sw	zero, PCB_ONFAULT(t0)
d87 1
a87 1
	sw	v0, PCB_ONFAULT(t0)
d91 1
a91 1
	sw	zero, PCB_ONFAULT(t0)
d96 1
a96 1
	sw	zero, PCB_ONFAULT(t0)
d106 1
a106 1
	sw	zero, PCB_ONFAULT(t0)
d112 1
a112 1
	li	v0, -1
d120 1
a120 1
	sw	v0, PCB_ONFAULT(t0)
d124 1
a124 1
	sw	zero, PCB_ONFAULT(t0)
d130 1
a130 1
	sw	zero, PCB_ONFAULT(t0)
d139 1
a139 1
	sw	v0, PCB_ONFAULT(t0)
d143 1
a143 1
	sw	zero, PCB_ONFAULT(t0)
d149 1
a149 1
	sw	zero, PCB_ONFAULT(t0)
d158 1
a158 1
	sw	v0, PCB_ONFAULT(t0)
d162 1
a162 1
	sw	zero, PCB_ONFAULT(t0)
d166 1
a166 1
	sw	zero, PCB_ONFAULT(t0)
d176 1
a176 1
	sw	zero, PCB_ONFAULT(t0)
d182 1
a182 1
	nop
d186 2
a187 1
	mfc0	v0, COP_0_STATUS_REG	# Later the "real" spl value!
d201 1
a201 1
	li	v0, 0			# setjmp return
d217 2
a218 2
	mtc0	v0, COP_0_STATUS_REG	# Later the "real" spl value!
	ITLBNOPFIX
d220 1
a220 1
	li	v0, 1			# longjmp return
@


1.10
log
@curproc, curprocpaddr moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.9 2009/05/22 20:37:53 miod Exp $ */
a41 1
#ifdef __LP64__
a59 1
#endif
a112 1
#ifdef __LP64__
a130 2
#endif

a219 1

@


1.9
log
@Drop almost unused <machine/psl.h> on sgi; move USERMODE() definition from
there to trap.c which is its only user. This also cleans up multiple
inclusion of <machine/cpu.h> (because <machine/psl.h> includes it) in many
places.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.8 2005/12/20 07:06:26 miod Exp $ */
d44 2
a45 1
	PTR_L	t0, curprocpaddr
d64 2
a65 1
	PTR_L	t0, curprocpaddr
d83 2
a84 1
	PTR_L	t0, curprocpaddr
d101 2
a102 1
	PTR_L	t0, curprocpaddr
d117 2
a118 1
	PTR_L	t0, curprocpaddr
d138 2
a139 1
	PTR_L	t0, curprocpaddr
d157 2
a158 1
	PTR_L	t0, curprocpaddr
d174 2
a175 1
	PTR_L	t0, curprocpaddr
@


1.8
log
@Since we are allowed to rely on the fact that the pcb is the first element
of struct user, use syntactic sugar in genassym.cf and use PCB_xxx defines
instead of U_PCB_xxx, like all other platforms do; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.7 2004/09/27 19:16:06 pefo Exp $ */
a31 1
#include <machine/psl.h>
@


1.7
log
@move ITLBNOPFIX to asm.h and make it conditional
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.6 2004/09/17 13:12:17 miod Exp $ */
d49 1
a49 1
	sw	v0, U_PCB_ONFAULT(t0)
d53 1
a53 1
	sw	zero, U_PCB_ONFAULT(t0)
d59 1
a59 1
	sw	zero, U_PCB_ONFAULT(t0)
d68 1
a68 1
	sw	v0, U_PCB_ONFAULT(t0)
d72 1
a72 1
	sw	zero, U_PCB_ONFAULT(t0)
d78 1
a78 1
	sw	zero, U_PCB_ONFAULT(t0)
d86 1
a86 1
	sw	v0, U_PCB_ONFAULT(t0)
d90 1
a90 1
	sw	zero, U_PCB_ONFAULT(t0)
d95 1
a95 1
	sw	zero, U_PCB_ONFAULT(t0)
d101 1
a101 1
	sw	v0, U_PCB_ONFAULT(t0)
d104 1
a104 1
	sw	zero, U_PCB_ONFAULT(t0)
d118 1
a118 1
	sw	v0, U_PCB_ONFAULT(t0)
d122 1
a122 1
	sw	zero, U_PCB_ONFAULT(t0)
d128 1
a128 1
	sw	zero, U_PCB_ONFAULT(t0)
d138 1
a138 1
	sw	v0, U_PCB_ONFAULT(t0)
d142 1
a142 1
	sw	zero, U_PCB_ONFAULT(t0)
d148 1
a148 1
	sw	zero, U_PCB_ONFAULT(t0)
d156 1
a156 1
	sw	v0, U_PCB_ONFAULT(t0)
d160 1
a160 1
	sw	zero, U_PCB_ONFAULT(t0)
d164 1
a164 1
	sw	zero, U_PCB_ONFAULT(t0)
d170 1
a170 1
	sw	v0, U_PCB_ONFAULT(t0)
d173 1
a173 1
	sw	zero, U_PCB_ONFAULT(t0)
@


1.6
log
@Kill an assembler warning.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.5 2004/09/15 16:05:18 pefo Exp $ */
a41 2

#define	ITLBNOPFIX	nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
@


1.5
log
@Make trace work better. Don't hope for a good stacktrace without symbols
loaded. GCC 3.x really moves things around.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.4 2004/09/10 08:58:27 pefo Exp $ */
d131 1
a131 1
END(kdbpoke)
@


1.4
log
@Fix LEAF usage adding new extra arg. spotted by miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.3 2004/08/10 20:15:47 deraadt Exp $ */
d45 20
d113 21
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.2 2004/08/09 14:57:26 pefo Exp $ */
d45 1
a45 1
LEAF(kdbpeek)
d63 1
a63 1
LEAF(kdbpeekw)
d80 1
a80 1
LEAF(kdbpeekb)
d94 1
a94 1
LEAF(kdbpoke)
d112 1
a112 1
LEAF(kdbpokew)
d128 1
a128 1
LEAF(kdbpokeb)
d137 1
a137 1
LEAF(Debugger)
d143 1
a143 1
LEAF(setjmp)
d161 1
a161 1
LEAF(longjmp)
@


1.2
log
@Big cleanup. Removed some unused obsolete stuff and fixed copyrights
on some files. Arcbios support is now in, thus detects memorysize and cpu
clock frequency.
@
text
@d1 1
a1 1
/*	$OpenBSD: lcore_ddb.S,v 1.1 2004/08/06 20:56:03 pefo Exp $ */
d5 1
a5 1
 * 
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@

