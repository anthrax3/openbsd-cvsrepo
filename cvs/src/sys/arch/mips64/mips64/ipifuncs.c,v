head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2017.02.19.08.35.13;	author visa;	state Exp;
branches;
next	1.12;
commitid	RxbFB3YhOmBc7w0g;

1.12
date	2016.01.08.05.26.25;	author visa;	state Exp;
branches;
next	1.11;
commitid	TBapXbWr4TQA2fTM;

1.11
date	2015.07.27.16.33.40;	author visa;	state Exp;
branches;
next	1.10;
commitid	sKmT8x1siN9OsNpW;

1.10
date	2015.04.20.19.08.52;	author miod;	state Exp;
branches;
next	1.9;
commitid	0zjcLPzPDM2qsinN;

1.9
date	2014.09.30.06.51.58;	author jmatthew;	state Exp;
branches;
next	1.8;
commitid	pUEUpP9FlbomZUiI;

1.8
date	2011.05.10.07.58.47;	author syuu;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.10.07.42.16;	author syuu;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.30.08.52.10;	author syuu;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.07.03.50.01;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.28.16.20.28;	author syuu;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.21.14.57.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.28.06.55.27;	author syuu;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.25.17.39.51;	author syuu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Add IPI counter.
@
text
@/* $OpenBSD: ipifuncs.c,v 1.12 2016/01/08 05:26:25 visa Exp $ */
/* $NetBSD: ipifuncs.c,v 1.40 2008/04/28 20:23:10 martin Exp $ */

/*-
 * Copyright (c) 1998, 1999, 2000, 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/atomic.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/intr.h>

int	mips64_ipi_intr(void *);
void	mips64_ipi_nop(void);
void	smp_rendezvous_action(void);
void	mips64_ipi_ddb(void);
void	mips64_multicast_ipi(unsigned int, unsigned int);

struct evcount ipi_count;
unsigned int ipi_irq = 0;
unsigned int ipi_mailbox[MAXCPUS];

/* Variables needed for SMP rendezvous. */
struct mutex smp_ipi_mtx;
volatile unsigned long smp_rv_map;
void (*volatile smp_rv_action_func)(void *arg);
void * volatile smp_rv_func_arg;
volatile unsigned int smp_rv_waiters[2];

/*
 * NOTE: This table must be kept in order with the bit definitions
 * in <machine/intr.h>.
 */
typedef void (*ipifunc_t)(void);

ipifunc_t ipifuncs[MIPS64_NIPIS] = {
	mips64_ipi_nop,
	smp_rendezvous_action,
	mips64_ipi_ddb
};

/*
 * Initialize IPI state for a CPU.
 */
void
mips64_ipi_init(void)
{
	cpuid_t cpuid = cpu_number();
	int error;

	if (!cpuid) {
		mtx_init(&smp_ipi_mtx, IPL_IPI);
		evcount_attach(&ipi_count, "ipi", &ipi_irq);
	}

	hw_ipi_intr_clear(cpuid);

	error = hw_ipi_intr_establish(mips64_ipi_intr, cpuid);
	if (error)
		panic("hw_ipi_intr_establish failed:%d", error);
}

/*
 * Process IPIs for a CPU.
 */
int
mips64_ipi_intr(void *arg)
{
	unsigned int pending_ipis, bit;
	unsigned int cpuid = (unsigned int)(unsigned long)arg;

	KASSERT (cpuid == cpu_number());

	/* clear ipi interrupt */
	hw_ipi_intr_clear(cpuid);
	/* get and clear pending ipis */
	pending_ipis = atomic_swap_uint(&ipi_mailbox[cpuid], 0);
	
	if (pending_ipis > 0) {
		for (bit = 0; bit < MIPS64_NIPIS; bit++) {
			if (pending_ipis & (1UL << bit)) {
				(*ipifuncs[bit])();
				atomic_inc_long(
				    (unsigned long *)&ipi_count.ec_count);
			}
		}
	}

	return 1;
}

/*
 * Send an interprocessor interrupt.
 */
void
mips64_send_ipi(unsigned int cpuid, unsigned int ipimask)
{
#ifdef DEBUG
	if (cpuid >= CPU_MAXID || get_cpu_info(cpuid) == NULL)
		panic("mips_send_ipi: bogus cpu_id");
	if (!cpuset_isset(&cpus_running, get_cpu_info(cpuid)))
	        panic("mips_send_ipi: CPU %ld not running", cpuid);
#endif

	atomic_setbits_int(&ipi_mailbox[cpuid], ipimask);

	hw_ipi_intr_set(cpuid);
}

/*
 * Send an IPI to all in the list but ourselves.
 */
void
mips64_multicast_ipi(unsigned int cpumask, unsigned int ipimask)
{
	struct cpu_info *ci;
	CPU_INFO_ITERATOR cii;

	cpumask &= ~(1 << cpu_number());

	CPU_INFO_FOREACH(cii, ci) {
		if (!(cpumask & (1UL << ci->ci_cpuid)) || 
		    !cpuset_isset(&cpus_running, ci))
			continue;
		mips64_send_ipi(ci->ci_cpuid, ipimask);
	}
}

void
mips64_ipi_nop(void)
{
#ifdef DEBUG
	printf("mips64_ipi_nop on cpu%d\n", cpu_number());
#endif
}

/*
 * All-CPU rendezvous.  CPUs are signalled, all execute the setup function 
 * (if specified), rendezvous, execute the action function (if specified),
 * rendezvous again, execute the teardown function (if specified), and then
 * resume.
 *
 * Note that the supplied external functions _must_ be reentrant and aware
 * that they are running in parallel and in an unknown lock context.
 */

void
smp_rendezvous_action(void)
{
	void* local_func_arg = smp_rv_func_arg;
	void (*local_action_func)(void*) = smp_rv_action_func;
	unsigned int cpumask = 1 << cpu_number();

	/* Ensure we have up-to-date values. */
	atomic_setbits_int(&smp_rv_waiters[0], cpumask);
	while (smp_rv_waiters[0] != smp_rv_map)
		;

	/* action function */
	if (local_action_func != NULL)
		local_action_func(local_func_arg);

	/* spin on exit rendezvous */
	atomic_setbits_int(&smp_rv_waiters[1], cpumask);
}

void
smp_rendezvous_cpus(unsigned long map,
	void (* action_func)(void *),
	void *arg)
{
	unsigned int cpumask = 1 << cpu_number();

	if (ncpus == 1) {
		if (action_func != NULL)
			action_func(arg);
		return;
	}

	/* obtain rendezvous lock */
        mtx_enter(&smp_ipi_mtx);

	/* set static function pointers */
	smp_rv_map = map;
	smp_rv_action_func = action_func;
	smp_rv_func_arg = arg;
	smp_rv_waiters[0] = 0;
	smp_rv_waiters[1] = 0;
	mips_sync();

	/* signal other processors, which will enter the IPI with interrupts off */
	mips64_multicast_ipi(map & ~cpumask, MIPS64_IPI_RENDEZVOUS);

	/* Check if the current CPU is in the map */
	if (map & cpumask)
		smp_rendezvous_action();

	while (smp_rv_waiters[1] != smp_rv_map)
		;
	/* release lock */
	mtx_leave(&smp_ipi_mtx);
}

void
mips64_ipi_ddb(void)
{
#ifdef DDB
	Debugger();
#endif
}
@


1.12
log
@Make sure the new rendezvous state is visible to other CPUs before
sending IPIs. Without this, a rendezvous can fail if write buffering is
enabled on octeon.
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.11 2015/07/27 16:33:40 visa Exp $ */
d50 3
d83 1
a83 1
	if (!cpuid)
d85 2
d112 2
a113 2
		for (bit = 0; bit < MIPS64_NIPIS; bit++)
			if (pending_ipis & (1UL << bit))
d115 4
@


1.11
log
@Allow coalescing of IPI requests on mips64, to make IPI sending
non-blocking. This improves performance on systems that have more than
a few cores and where there is a heavy IPI load. Currently the only
place where coalescing must not happen is rendezvous processing, but
there invocations are serialized by the rendezvous mutex.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.10 2015/04/20 19:08:52 miod Exp $ */
d212 1
@


1.10
log
@Remove most static, gives us much better ddb tracebacks from secondary
processors.
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.9 2014/09/30 06:51:58 jmatthew Exp $ */
a100 2
	/* figure out which ipi are pending */
	pending_ipis = ipi_mailbox[cpuid];
d103 2
a106 3
		/* clear pending ipi, since we're about to handle them */
		atomic_clearbits_int(&ipi_mailbox[cpuid], pending_ipis);

d128 1
a128 1
	atomic_wait_and_setbits_int(&ipi_mailbox[cpuid], ipimask);
@


1.9
log
@implement atomic operations using ll/sc, and convert rw_cas and callers of the
pre-existing atomics to match.

tested on sgi (octane) and octeon (erl)
ok miod@@ dlg@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.8 2011/05/10 07:58:47 syuu Exp $ */
d45 6
a50 6
static int	mips64_ipi_intr(void *);
static void	mips64_ipi_nop(void);
static void	smp_rendezvous_action(void);
static void	mips64_ipi_ddb(void);
static void	mips64_multicast_ipi(unsigned int, unsigned int);
static unsigned int ipi_mailbox[MAXCPUS];
d54 4
a57 4
static volatile unsigned long smp_rv_map;
static void (*volatile smp_rv_action_func)(void *arg);
static void * volatile smp_rv_func_arg;
static volatile unsigned int smp_rv_waiters[2];
d93 1
a93 1
static int
d155 1
a155 1
static void
d229 1
a229 1
static void
@


1.8
log
@revert a mistake commit
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.6 2010/08/30 08:52:10 syuu Exp $ */
d38 1
a43 1
#include <machine/atomic.h>
@


1.7
log
@octeon's internal counter clock speed is same as the processor clock. ok miod@@
@
text
@a44 2
#include <ddb/db_output.h>

a162 9
#if defined(MP_LOCKDEBUG)
#ifndef DDB
#error "MP_LOCKDEBUG requires DDB"
#endif

/* CPU-dependent timing, needs this to be settable from ddb. */
extern int __mp_lock_spinout;
#endif

d172 1
a178 3
#ifdef MP_LOCKDEBUG
	int ticks = __mp_lock_spinout;
#endif
d182 2
a183 8
	while (smp_rv_waiters[0] != smp_rv_map) {
#ifdef MP_LOCKDEBUG
		if (--ticks == 0) {
			db_printf("smp_rendezvous_action timeout\n");
			Debugger();
		} 
#endif
	}
a198 3
#ifdef MP_LOCKDEBUG
	int ticks = __mp_lock_spinout;
#endif
d223 2
a224 8
	while (smp_rv_waiters[1] != smp_rv_map) {
#ifdef MP_LOCKDEBUG
		if (--ticks == 0) {
			db_printf("smp_rendezvous_action timeout\n");
			Debugger();
		} 
#endif
	}
@


1.6
log
@ddbcpu for sgi. ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.5 2010/08/07 03:50:01 krw Exp $ */
d45 2
d165 9
a182 1

d189 3
d195 8
a202 2
	while (smp_rv_waiters[0] != smp_rv_map)
		;
d218 3
d245 8
a252 2
	while (smp_rv_waiters[1] != smp_rv_map)
		;
@


1.5
log
@No "\n" needed at the end of panic() strings.

Bogus chunks pointed out by matthew@@ and miod@@. No cookies for
marco@@ and jasper@@.

ok deraadt@@ miod@@ matthew@@ jasper@@ macro@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.4 2010/04/28 16:20:28 syuu Exp $ */
d48 1
d67 2
a68 1
	smp_rendezvous_action
d227 8
@


1.4
log
@Storeing current cpu_info address into LLAddr register, for curcpu().
Instead of previous implementation, we won't use physical cpuid to fetch curcpu().
This requires to implement IP27/35 SMP.
Implemented getcurcpu() and setcurcpu() for it, smp_malloc() renamed alloc_contiguous_pages() because now it only allocate by page.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.3 2010/04/21 14:57:11 deraadt Exp $ */
d85 1
a85 1
		panic("hw_ipi_intr_establish failed:%d\n", error);
@


1.3
log
@two more proc.h needed
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.2 2009/12/28 06:55:27 syuu Exp $ */
d122 2
a123 2
#ifdef DIAGNOSTIC
	if (cpuid >= CPU_MAXID || cpu_info[cpuid] == NULL)
d125 1
a125 1
	if (!cpuset_isset(&cpus_running, cpu_info[cpuid]))
@


1.2
log
@MP-safe pmap implemented, enable IPI in interrupt handler to avoid deadlock.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.1 2009/11/25 17:39:51 syuu Exp $ */
d37 1
@


1.1
log
@IP30 IPI implementation.
Also few xheart modification for SMP.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d44 1
a44 1
static int      mips64_ipi_intr(void *);
d46 3
d50 6
a55 1
static unsigned int ipi_mailbox[MAXCPUS];
d65 1
d77 3
a94 1
	int sr;
d98 1
a98 3
	sr = disableintr();

	/* Load the mailbox register to figure out what we're supposed to do */
d100 3
d104 3
a109 3

		/* Clear the mailbox to clear the interrupt */
		atomic_clearbits_int(&ipi_mailbox[cpuid], pending_ipis);
a110 2
	hw_ipi_intr_clear(cpuid);
	setsr(sr);
d128 1
a128 1
	atomic_setbits_int(&ipi_mailbox[cpuid], ipimask);
a133 16
 * Broadcast an IPI to all but ourselves.
 */
void
mips64_broadcast_ipi(unsigned int ipimask)
{
	struct cpu_info *ci;
	CPU_INFO_ITERATOR cii;

	CPU_INFO_FOREACH(cii, ci) {
		if (curcpu() == ci || !cpuset_isset(&cpus_running, ci))
			continue;
		mips64_send_ipi(ci->ci_cpuid, ipimask);
	}
}

/*
d142 1
a142 1
	cpumask &= ~(1UL << cpu_number());
d158 66
@

