head	1.20;
access;
symbols
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.16
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.12
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.14
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.6
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.10
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.8
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.4
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@# @;


1.20
date	2016.08.16.13.03.58;	author visa;	state Exp;
branches;
next	1.19;
commitid	6TiwRQZbesPVamIE;

1.19
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2012.09.29.21.37.03;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2012.09.29.19.02.26;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2012.06.23.21.53.38;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.11.11.29.50;	author syuu;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.28.16.20.28;	author syuu;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.09.23.34.29;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.19.20.15.04;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.22.18.46.48;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.22.20.37.53;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.18.04.32.25;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.16.20.23.09;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.16.20.20.08;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.10.08.58.27;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.20.15.47;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.09.14.57.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.03;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove RM7000/RM9000-specific performance counter code. It originates
from PMON2000 and has not been enabled on OpenBSD.

Suggested by and ok miod@@ (after seeing a quad_t cleanup patch of mine)
@
text
@/*	$OpenBSD: cp0access.S,v 1.19 2012/10/03 11:18:23 miod Exp $ */

/*
 * Copyright (c) 2001-2003 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 *  Low level code to manage processor specific registers.
 */

#include <sys/errno.h>
#include <sys/syscall.h>

#include <machine/param.h>
#include <machine/asm.h>
#include <machine/cpu.h>
#include <mips64/mips_cpu.h>
#include <machine/regnum.h>

#include "assym.h"

	.set	mips3
	.set	noreorder		# Noreorder is default style!

/*
 * Set/clear software interrupt.
 */

LEAF(setsoftintr0, 0)
	MFC0	v0, COP_0_CAUSE_REG	# read cause register
	MFC0_HAZARD
	NOP
	or	v0, v0, SOFT_INT_MASK_0	# set soft clock interrupt
	MTC0	v0, COP_0_CAUSE_REG	# save it
	MTC0_HAZARD
	j	ra
	 NOP
END(setsoftintr0)

LEAF(clearsoftintr0, 0)
	MFC0	v0, COP_0_CAUSE_REG	# read cause register
	MFC0_HAZARD
	NOP
	and	v0, v0, ~SOFT_INT_MASK_0	# clear soft clock interrupt
	MTC0	v0, COP_0_CAUSE_REG	# save it
	MTC0_HAZARD
	j	ra
	 NOP
END(clearsoftintr0)

LEAF(setsoftintr1, 0)
	MFC0	v0, COP_0_CAUSE_REG	# read cause register
	MFC0_HAZARD
	NOP
	or	v0, v0, SOFT_INT_MASK_1	# set soft net interrupt
	MTC0	v0, COP_0_CAUSE_REG	# save it
	MTC0_HAZARD
	j	ra
	 NOP
END(setsoftintr1)

LEAF(clearsoftintr1, 0)
	MFC0	v0, COP_0_CAUSE_REG	# read cause register
	MFC0_HAZARD
	NOP
	and	v0, v0, ~SOFT_INT_MASK_1	# clear soft net interrupt
	MTC0	v0, COP_0_CAUSE_REG	# save it
	MTC0_HAZARD
	j	ra
	 NOP
END(clearsoftintr1)

/*
 * Set/change interrupt priority routines.
 * These routines return the previous state.
 */

LEAF(enableintr, 0)
	MFC0	v0, COP_0_STATUS_REG	# read status register
	MFC0_HAZARD
	NOP
	or	v1, v0, SR_INT_ENAB
	MTC0	v1, COP_0_STATUS_REG	# enable all interrupts
	MTC0_SR_IE_HAZARD
	j	ra
	 NOP
END(enableintr)

LEAF(disableintr, 0)
	MFC0	v0, COP_0_STATUS_REG	# read status register
	MFC0_HAZARD
	NOP
	and	v1, v0, ~SR_INT_ENAB
	MTC0	v1, COP_0_STATUS_REG	# disable all interrupts
	MTC0_SR_IE_HAZARD
	j	ra
	 NOP
END(disableintr)

LEAF(updateimask, 0)
	lw	t0, idle_mask
	not	a0, a0			# 1 means masked so invert.
	and	a0, t0			# never upgrade to higher than max
#ifdef RM7000_ICR
	cfc0	v0, COP_0_ICR
	li	v1, ~IC_INT_MASK
	and	v1, v0
	sll	v0, a0, 8
	and	v0, IC_INT_MASK
	and	v0, a0, IC_INT_MASK
	or	v1, v0
	ctc0	v1, COP_0_ICR
#endif
	MFC0	v0, COP_0_STATUS_REG
	MFC0_HAZARD
	LI	v1, ~SR_INT_MASK
	and	v1, v0
	and	v0, a0, SR_INT_MASK
	or	v1, v0
	MTC0	v1, COP_0_STATUS_REG
	MTC0_SR_IE_HAZARD
	ori	v1, SR_INT_ENAB		# enable interrupts
	MTC0	v1, COP_0_STATUS_REG
	MTC0_SR_IE_HAZARD
	jr	ra
	 move	v0, v1
END(updateimask)

LEAF(setsr, 0)
	MTC0	a0, COP_0_STATUS_REG
	MTC0_SR_IE_HAZARD
	jr	ra
	 move	v0, a0
END(setsr)

LEAF(getsr, 0)
	MFC0	v0, COP_0_STATUS_REG
	MFC0_HAZARD
	j	ra
	 NOP
END(getsr)

LEAF(cp0_get_config, 0)
	MFC0	v0, COP_0_CONFIG
	MFC0_HAZARD
	j	ra
	 NOP
END(cp0_get_config)

/* WARNING!
   Needs to be invoked from uncached address if changing cache settings. */
LEAF(cp0_set_config, 0)
	MTC0	a0, COP_0_CONFIG
	MTC0_HAZARD
	j	ra
	 NOP
END(cp0_set_config)

LEAF(cp0_get_prid, 0)
	MFC0	v0, COP_0_PRID
	MFC0_HAZARD
	j	ra
	NOP
END(cp0_get_prid)

LEAF(cp0_get_count, 0)
	MFC0	v0, COP_0_COUNT
	MFC0_HAZARD
	j	ra
	NOP
END(cp0_get_count)

#ifndef CPU_R8000
LEAF(cp0_set_compare, 0)
	MTC0	a0, COP_0_COMPARE
	MTC0_HAZARD
	j	ra
	NOP
END(cp0_set_compare)
#endif

#ifdef CPU_R8000
LEAF(cp0_reset_cause, 0)
	DMFC0	v0, COP_0_CAUSE_REG
	MFC0_HAZARD
	or	v0, a0
	xor	v0, a0
	DMTC0	v0, COP_0_CAUSE_REG
	MTC0_HAZARD
	j	ra
	 NOP
END(cp0_reset_cause)

LEAF(cp0_set_trapbase, 0)
	DMTC0	a0, COP_0_TRAPBASE
	MTC0_HAZARD
	j	ra
	 NOP
END(cp0_set_trapbase)
#endif
@


1.19
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.18 2012/09/29 21:37:03 miod Exp $ */
a221 23
#endif

#ifdef notused
LEAF(cp0_getperfcount, 0)
	MFC0	v0, COP_0_PC_COUNT
	MFC0_HAZARD
	j	ra
	NOP
END(cp0_getperfcount)

LEAF(cp0_setperfcount, 0)
	MTC0	a0, COP_0_PC_COUNT
	MTC0_HAZARD
	j	ra
	NOP
END(cp0_setperfcount)

LEAF(cp0_setperfctrl, 0)
	MTC0	a0, COP_0_PC_CTRL
	MTC0_HAZARD
	j	ra
	NOP
END(cp0_setperfctrl)
@


1.18
log
@Basic R8000 processor support. R8000 processors require MMU-specific code,
exception-specific code, clock-specific code, and L1 cache-specific code. L2
cache is per-design, of which only two exist: SGI Power Indigo2 (IP26) and SGI
Power Challenge (IP21) and are not covered by this commit.

R8000 processors also are 64-bit only processors with 64-bit coprocessor 0
registers, and lack so-called ``compatibility'' memory spaces allowing 32-bit
code to run with sign-extended addresses and registers.

The intrusive changes are covered by #ifdef CPU_R8000 stanzas. However,
trap() is split into a high-level wrapper and a new function, itsa(),
responsible for the actual trap servicing (which name couldn't be helped
because I'm an incorrigible punster). While an R8000 exception may cause
(via trap() ) multiple exceptions to be serviced, non-R8000 processors will
always service one exception in trap(), but they are nevertheless affected
by this code split.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.17 2012/09/29 19:02:26 miod Exp $ */
d39 1
@


1.17
log
@Introduce assembly macros for specific processor hazards: tlb update, status
register update, status register update causing a change to the interrupt
enable flag, and a few other arcane ones. <mips64/asm.h> will provide
(supposedly sane) defaults, and <machine/asm.h> may override these with
better tuned versions.

Use these macros instead of random strings of nop in the various .S files
requiring hazard workarounds.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.16 2012/06/23 21:53:38 miod Exp $ */
d194 1
d201 21
@


1.16
log
@Fix ITLBNOPFIX macro definition on RM7000-capable kernels, and use it
in cp0_set_config() for consistency.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.15 2012/03/28 20:44:23 miod Exp $ */
d43 1
d51 3
a53 2
	mfc0	v0, COP_0_CAUSE_REG	# read cause register
	nop
d55 2
a56 1
	mtc0	v0, COP_0_CAUSE_REG	# save it
d58 1
a58 1
	nop
d62 3
a64 2
	mfc0	v0, COP_0_CAUSE_REG	# read cause register
	nop
d66 2
a67 1
	mtc0	v0, COP_0_CAUSE_REG	# save it
d69 1
a69 1
	nop
d73 3
a75 2
	mfc0	v0, COP_0_CAUSE_REG	# read cause register
	nop
d77 2
a78 1
	mtc0	v0, COP_0_CAUSE_REG	# save it
d80 1
a80 1
	nop
d84 3
a86 2
	mfc0	v0, COP_0_CAUSE_REG	# read cause register
	nop
d88 2
a89 1
	mtc0	v0, COP_0_CAUSE_REG	# save it
d91 1
a91 1
	nop
d100 3
a102 2
	mfc0	v0, COP_0_STATUS_REG	# read status register
	nop
d104 2
a105 2
	mtc0	v1, COP_0_STATUS_REG	# enable all interrupts
	ITLBNOPFIX
d107 1
a107 1
	nop
d111 3
a113 2
	mfc0	v0, COP_0_STATUS_REG	# read status register
	nop
d115 2
a116 2
	mtc0	v1, COP_0_STATUS_REG	# disable all interrupts
	ITLBNOPFIX			# Propagate new status
d118 1
a118 1
	nop
d135 3
a137 2
	mfc0	v0, COP_0_STATUS_REG
	li	v1, ~SR_INT_MASK
d141 2
a142 2
	mtc0	v1, COP_0_STATUS_REG
	ITLBNOPFIX
d144 2
a145 2
	mtc0	v1, COP_0_STATUS_REG
	ITLBNOPFIX
d147 1
a147 1
	move	v0, v1
d151 2
a152 2
	mtc0	a0, COP_0_STATUS_REG
	ITLBNOPFIX
d154 1
a154 1
	move	v0, a0
d158 4
a161 3
	mfc0	v0, COP_0_STATUS_REG
	jr	ra
	nop
d165 2
a166 1
	mfc0	v0, COP_0_CONFIG
d168 1
a168 1
	nop
d171 2
a172 1
/* WARNING! Needs to be invoked from uncached address. */
d174 2
a175 2
	mtc0	a0, COP_0_CONFIG
	ITLBNOPFIX
d177 1
a177 1
	nop
d181 2
a182 1
	mfc0	v0, COP_0_PRID
d184 1
a184 1
	nop
d188 2
a189 1
	mfc0	v0, COP_0_COUNT
d191 1
a191 1
	nop
d195 2
a196 1
	mtc0	a0, COP_0_COMPARE
d198 1
a198 1
	nop
d201 1
d203 2
a204 2
	mfc0	v0, COP_0_PC_COUNT
	nop; nop
d206 1
a206 1
	nop
d210 2
a211 2
	mtc0	a0, COP_0_PC_COUNT
	nop; nop
d213 1
a213 1
	nop
d217 2
a218 2
	mtc0	a0, COP_0_PC_CTRL
	nop; nop
d220 1
a220 1
	nop
d222 1
@


1.15
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.14 2010/09/11 11:29:50 syuu Exp $ */
d160 1
@


1.14
log
@move machine dependent GET_CPU_INFO(), getcurcpu(), setcurcpu() to arch/sgi. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.13 2010/04/28 16:20:28 syuu Exp $ */
d156 7
@


1.13
log
@Storeing current cpu_info address into LLAddr register, for curcpu().
Instead of previous implementation, we won't use physical cpuid to fetch curcpu().
This requires to implement IP27/35 SMP.
Implemented getcurcpu() and setcurcpu() for it, smp_malloc() renamed alloc_contiguous_pages() because now it only allocate by page.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.12 2010/01/09 23:34:29 miod Exp $ */
a194 14

#ifdef MULTIPROCESSOR
LEAF(getcurcpu, 0)
	GET_CPU_INFO(v0, v1)
	jr	ra
	nop
END(getcurcpu)

LEAF(setcurcpu, 0)
	mtc0	a0, COP_0_LLADDR
	j	ra
	nop
END(setcurcpu)
#endif
@


1.12
log
@Move cache information from global variables to per-cpu_info fields; this
allows processors with different cache sizes to be used.

Cache management routines now take a struct cpu_info * as first parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.11 2009/11/19 20:15:04 miod Exp $ */
d195 14
@


1.11
log
@All callers of updateimask() immediately enable interrupts afterwards, so do
it in updateimask() itself. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.10 2009/10/22 18:46:48 miod Exp $ */
d150 6
@


1.10
log
@Change the #define controlling use of RM7k/RM9k coprocessor 0 ICR to
RM7000_ICR, instead of IMASK_EXTERNAL, since they are actually different
concepts. This code remains disabled since RM7000_ICR is not defined anywhere
at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.9 2009/05/22 20:37:53 miod Exp $ */
d129 3
@


1.9
log
@Drop almost unused <machine/psl.h> on sgi; move USERMODE() definition from
there to trap.c which is its only user. This also cleans up multiple
inclusion of <machine/cpu.h> (because <machine/psl.h> includes it) in many
places.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.8 2007/10/18 04:32:25 miod Exp $ */
d114 1
a114 1
#ifndef IMASK_EXTERNAL
@


1.8
log
@No need to include <machine/pte.h> here.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.7 2007/07/16 20:23:09 miod Exp $ */
a36 1
#include <machine/psl.h>
@


1.7
log
@Replace bunches of nops with the ITLBNOPFIX macro, which generates fewer
nops unless we compile for early RM7000 flavours, which we usually don't do.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.6 2007/07/16 20:20:08 miod Exp $ */
a40 1
#include <machine/pte.h>
@


1.6
log
@Change idle_mask to be made of the cop0 SR bits unshifted and the cop0 IC bits
shifted, instead of the other way around; this shaves a few instructions.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.5 2004/10/20 12:49:15 pefo Exp $ */
d97 1
d107 1
a107 10
	nop				# Propagate new status
	nop
	nop
	nop				# so int's are off before
	nop				# return to caller.
	nop				# total 10 nops to handle
	nop				# RM7000 1.x bug.
	nop
	nop
	nop
d132 1
a132 10
	nop				# total 10 nops to handle
	nop				# RM7000 1.x bug.
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
d139 1
a139 10
	nop				# total 10 nops to handle
	nop				# RM7000 1.x bug.
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
@


1.5
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.4 2004/09/10 08:58:27 pefo Exp $ */
d128 2
d137 1
a137 2
	sll	v0, a0, 8
	and	v0, SR_INT_MASK
@


1.4
log
@Fix LEAF usage adding new extra arg. spotted by miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.3 2004/08/10 20:15:47 deraadt Exp $ */
d168 6
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.2 2004/08/09 14:57:26 pefo Exp $ */
d51 1
a51 1
LEAF(setsoftintr0)
d60 1
a60 1
LEAF(clearsoftintr0)
d69 1
a69 1
LEAF(setsoftintr1)
d78 1
a78 1
LEAF(clearsoftintr1)
d92 1
a92 1
LEAF(enableintr)
d101 1
a101 1
LEAF(disableintr)
d120 1
a120 1
LEAF(updateimask)
d153 1
a153 1
LEAF(setsr)
d169 1
a169 1
LEAF(cp0_get_prid)
d175 1
a175 1
LEAF(cp0_get_count)
d181 1
a181 1
LEAF(cp0_set_compare)
d187 1
a187 1
LEAF(cp0_getperfcount)
d194 1
a194 1
LEAF(cp0_setperfcount)
d201 1
a201 1
LEAF(cp0_setperfctrl)
@


1.2
log
@Big cleanup. Removed some unused obsolete stuff and fixed copyrights
on some files. Arcbios support is now in, thus detects memorysize and cpu
clock frequency.
@
text
@d1 1
a1 1
/*	$OpenBSD: cp0access.S,v 1.1 2004/08/06 20:56:03 pefo Exp $ */
d5 1
a5 1
 * 
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d168 6
@

