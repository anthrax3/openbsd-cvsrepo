head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.8
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.22
date	2016.09.25.15.23.37;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	YxqfPf79WCjoxCH9;

1.21
date	2016.08.01.15.58.22;	author tedu;	state Exp;
branches;
next	1.20;
commitid	0APfmV8i34pDgCWZ;

1.20
date	2015.02.10.22.44.35;	author miod;	state Exp;
branches;
next	1.19;
commitid	lsrmQ0A4gY4UmdnD;

1.19
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.18;
commitid	C5iGb36LQxjM60Q3;

1.18
date	2013.05.09.19.45.19;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2011.05.01.07.01.37;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.26.23.24.43;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.22.21.45.25;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.01.09.18.51.59;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.19.20.16.27;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.04.09.57.47;	author martin;	state Exp;
branches;
next	1.11;

1.11
date	2008.03.31.04.03.32;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.30.20.12.25;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.18.04.32.25;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.22.16.21.32;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.03.19.34.00;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.06.10.26.56;	author martin;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.22.11.38;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.11.15.13.58;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.17.06.06;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.09.14.57.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.03;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Make a move towards ending 4 decades of kernel snooping.

Add sysctl kern.allowkmem (default 0) which controls the ability to open
/dev/mem or /dev/kmem at securelevel > 0.  Over 15 years we converted 99%
of utilities in the tree to operate on sysctl-nodes (either by themselves
or via code hiding in the guts of -lkvm).

pstat -d and -v & procmap are affected and continued use of them will
require kern.allowkmem=1 in /etc/sysctl.conf.  acpidump (and it's
buddy sendbug) are affected, but we'll work out a solution soon.

There will be some impact in ports.

ok kettenis guenther
@
text
@/*	$OpenBSD: mem.c,v 1.21 2016/08/01 15:58:22 tedu Exp $	*/
/*	$NetBSD: mem.c,v 1.6 1995/04/10 11:55:03 mycroft Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/conf.h>
#include <sys/buf.h>
#include <sys/proc.h>
#include <sys/msgbuf.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <machine/memconf.h>

#include <uvm/uvm_extern.h>

boolean_t is_memory_range(paddr_t, psize_t, psize_t);

caddr_t zeropage;

#define mmread  mmrw
#define mmwrite mmrw
cdev_decl(mm);

int
mmopen(dev_t dev, int flag, int mode, struct proc *p)
{
	extern int allowkmem;

	switch (minor(dev)) {
	case 0:
	case 1:
		if (securelevel <= 0 || allowkmem)
			break;
		return (EPERM);
	case 2:
	case 12:
		break;
	default:
		return (ENXIO);
	}
	return (0);
}

int
mmclose(dev_t dev, int flag, int mode, struct proc *p)
{
	return (0);
}

int
mmrw(dev_t dev, struct uio *uio, int flags)
{
	struct iovec *iov;
	boolean_t allowed;
	int error = 0;
	size_t c;
	vaddr_t v;

	while (uio->uio_resid > 0 && error == 0) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}
		switch (minor(dev)) {

		/* minor device 0 is physical memory */
		case 0:
			v = uio->uio_offset;
			c = iov->iov_len;
			if (v + c < v || v + c > ptoa((psize_t)physmem))
				return (EFAULT);
			v = (vaddr_t)PHYS_TO_XKPHYS(v, CCA_NONCOHERENT);
			error = uiomove((caddr_t)v, c, uio);
			continue;

		/* minor device 1 is kernel memory */
		case 1:
			v = uio->uio_offset;
			c = ulmin(iov->iov_len, MAXPHYS);

			/* Allow access to RAM through XKPHYS... */
			if (IS_XKPHYS(v))
				allowed = is_memory_range(XKPHYS_TO_PHYS(v),
				    (psize_t)c, 0);
			/* ...or through CKSEG0... */
			else if (v >= CKSEG0_BASE &&
			    v < CKSEG0_BASE + CKSEG_SIZE)
				allowed = is_memory_range(CKSEG0_TO_PHYS(v),
				    (psize_t)c, CKSEG_SIZE);
			/* ...or through CKSEG1... */
			else if (v >= CKSEG1_BASE &&
			    v < CKSEG1_BASE + CKSEG_SIZE)
				allowed = is_memory_range(CKSEG1_TO_PHYS(v),
				    (psize_t)c, CKSEG_SIZE);
			/* ...otherwise, check it's within kernel kvm limits. */
			else
				allowed = uvm_kernacc((caddr_t)v, c,
				    uio->uio_rw == UIO_READ ? B_READ : B_WRITE);

			if (allowed) {
				error = uiomove((caddr_t)v, c, uio);
				continue;
			} else {
				return (EFAULT);
			}

		/* minor device 2 is /dev/null */
		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

		/* minor device 12 is /dev/zero */
		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				c = iov->iov_len;
				break;
			}
			if (zeropage == NULL)
				zeropage = malloc(PAGE_SIZE, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = ulmin(iov->iov_len, PAGE_SIZE);
			error = uiomove(zeropage, c, uio);
			continue;

		default:
			return (ENODEV);
		}
		if (error)
			break;
		iov->iov_base += c;
		iov->iov_len -= c;
		uio->uio_offset += c;
		uio->uio_resid -= c;
	}
	return error;
}

paddr_t
mmmmap(dev_t dev, off_t off, int prot)
{
	return -1;
}

int
mmioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	return (EOPNOTSUPP);
}
@


1.21
log
@bring the light of ansi to a few more files
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.20 2015/02/10 22:44:35 miod Exp $	*/
d74 1
d79 3
d84 1
a84 1
		return (0);
d88 1
@


1.20
log
@Convert to uiomove().
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.19 2015/02/10 21:56:09 miod Exp $	*/
a70 1
/*ARGSUSED*/
a85 1
/*ARGSUSED*/
a91 1
/*ARGSUSED*/
d112 1
a112 1
/* minor device 0 is physical memory */
d122 1
a122 1
/* minor device 1 is kernel memory */
d153 1
a153 1
/* minor device 2 is EOF/RATHOLE */
d159 1
a159 1
/* minor device 12 (/dev/zero) is source of nulls on read, rathole on write */
a184 1
/*ARGSUSED*/
@


1.19
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.18 2013/05/09 19:45:19 miod Exp $	*/
d122 1
a122 1
			error = uiomovei((caddr_t)v, c, uio);
d150 1
a150 1
				error = uiomovei((caddr_t)v, c, uio);
d172 1
a172 1
			error = uiomovei(zeropage, c, uio);
@


1.18
log
@Do not panic when running the MP kernel on a single-processor system; found
the hard way by tobiasu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.17 2011/05/01 07:01:37 miod Exp $	*/
d122 1
a122 1
			error = uiomove((caddr_t)v, c, uio);
d150 1
a150 1
				error = uiomove((caddr_t)v, c, uio);
d172 1
a172 1
			error = uiomove(zeropage, c, uio);
@


1.17
log
@Be sure to cast physmem to a 64-bit type before passing it to ptoa().
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.16 2010/06/26 23:24:43 guenther Exp $	*/
d100 2
a101 1
	int error = 0, c;
d119 1
a119 1
			if (v + c > ptoa((psize_t)physmem))
d128 1
a128 1
			c = min(iov->iov_len, MAXPHYS);
d171 1
a171 1
			c = min(iov->iov_len, PAGE_SIZE);
@


1.16
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.15 2010/01/22 21:45:25 miod Exp $	*/
d118 1
a118 1
			if (v + c > ptoa(physmem))
@


1.15
log
@Move is_memory_range() from mips64 mem.c to a per-architecture location; this
allows /dev/kmem to access the 256MB alias of the low memory on loongson, which
in turns makes procmap(8) happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.14 2010/01/09 18:51:59 miod Exp $	*/
a51 1
#include <sys/user.h>
@


1.14
log
@Correctly check /dev/kmem offsets within directly translated segments (XKPHYS
or CKSEG) against the actual physical memory segments, instead of assuming
contiguous physical memory starting from zero, as this is utterly wrong
on Octane (and a bit less wrong on other systems (-: )
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.13 2009/11/19 20:16:27 miod Exp $	*/
a198 20
}

boolean_t
is_memory_range(paddr_t pa, psize_t len, psize_t limit)
{
	struct phys_mem_desc *seg;
	uint64_t fp, lp;
	int i;

	fp = atop(pa);
	lp = atop(round_page(pa + len));

	if (limit != 0 && lp > atop(limit))
		return FALSE;

	for (i = 0, seg = mem_layout; i < MAXMEMSEGS; i++, seg++)
		if (fp >= seg->mem_first_page && lp <= seg->mem_last_page)
			return TRUE;

	return FALSE;
@


1.13
log
@Rename KSEG* defines to CKSEG* to match their names in 64 bit mode; also
define more 64 bit spaces.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.12 2008/05/04 09:57:47 martin Exp $	*/
d60 1
d64 2
d131 3
a133 3
			if (IS_XKPHYS(v) && IS_XKPHYS(v + (vsize_t)c) &&
			    XKPHYS_TO_PHYS(v + (vsize_t)c) <= ptoa(physmem))
				allowed = TRUE;
d136 3
a138 4
			    v + (vsize_t)c < CKSEG0_BASE + CKSEG_SIZE &&
			    (physmem >= atop(CKSEG_SIZE) ||
			     v + (vsize_t)c <= CKSEG0_BASE + ptoa(physmem)))
				allowed = TRUE;
d141 3
a143 4
			    v + (vsize_t)c < CKSEG1_BASE + CKSEG_SIZE &&
			    (physmem >= atop(CKSEG_SIZE) ||
			     v + c <= CKSEG1_BASE + ptoa(physmem)))
				allowed = TRUE;
d199 20
@


1.12
log
@convert arm and mips64 platforms to ptoa/atop

tested by maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.11 2008/03/31 04:03:32 miod Exp $	*/
d131 5
a135 5
			/* ...or through KSEG0... */
			else if (v >= KSEG0_BASE &&
			    v + (vsize_t)c < KSEG0_BASE + KSEG_SIZE &&
			    (physmem >= atop(KSEG_SIZE) ||
			     v + (vsize_t)c <= KSEG0_BASE + ptoa(physmem)))
d137 5
a141 5
			/* ...or through KSEG1... */
			else if (v >= KSEG1_BASE &&
			    v + (vsize_t)c < KSEG1_BASE + KSEG_SIZE &&
			    (physmem >= atop(KSEG_SIZE) ||
			     v + c <= KSEG1_BASE + ptoa(physmem)))
@


1.11
log
@Oops, a chunk was commited too early.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.10 2008/03/30 20:12:25 miod Exp $	*/
d116 1
a116 1
			if (v + c > ctob(physmem))
@


1.10
log
@Remove APERTURE remains.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.9 2007/10/18 04:32:25 miod Exp $	*/
d118 1
a118 1
			v = (vaddr_t)PHYS_TO_XKPHYS(v, CCA_CACHED);
@


1.9
log
@No need to include <machine/pte.h> here.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.8 2007/09/22 16:21:32 krw Exp $	*/
a62 4
#ifdef APERTURE
static int ap_open_count = 0;
extern int allowaperture;
#endif
a79 11
#ifdef APERTURE
	case 4:
		if (suser(p->p_ucred, &p->p_acflag) != 0 || !allowaperture)
			return (EPERM);

		/* authorize only one simultaneous open() */
		if (ap_open_count > 0)
			return(EPERM);
		ap_open_count++;
		return (0);
#endif
a88 4
#ifdef APERTURE
	if (minor(dev) == 4)
		ap_open_count--;
#endif
d118 1
a118 1
			v = (vaddr_t)PHYS_TO_XKPHYS(v, CCA_NONCOHERENT);
a190 13
#ifdef APERTURE
	if (minor(dev) == 4) {
		if (off >= 0x0000 && off < 0x10000) {
			off += sys_config.pci_io[0].bus_base;
			return atop(off);
		} else if (off >= 0xa0000 && off < 0x10000000) {
			off += sys_config.pci_mem[0].bus_base;
			return atop(off);
		} else {
			return -1;
		}
	}
#endif
@


1.8
log
@M_ZERO -> bzero.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 2007/05/03 19:34:00 miod Exp $	*/
a58 1
#include <machine/pte.h>
@


1.7
log
@Enable support for > 512MB of physical memory on mips64 systems, by using
XKPHYS instead of KSEG[01] for direct mappings.

Then, detect memory above 256MB on O2 by poking at the CRIME registers
(ARCbios will not report memory above 256MB, which is mapped above 1GB
physical, to the system), and add it to the UVM managed memory.

Tested on r5k, rm5200 and r10k with and without more than 256MB, matching
hinv reports in all cases. CRIME memory decoding based on a diff from
kettenis@@ in december 2005.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 2005/11/06 10:26:56 martin Exp $	*/
d187 3
a189 5
			if (zeropage == NULL) {
				zeropage = (caddr_t)
				    malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				bzero(zeropage, PAGE_SIZE);
			}
@


1.6
log
@byebye Mach macros

testing and ok kettenis@@, hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.5 2004/09/09 22:11:38 pefo Exp $	*/
d117 1
d138 1
a138 1
			v = (vaddr_t)PHYS_TO_KSEG0(v);
d146 23
a168 3
			if ((v > KSEG0_BASE && v + c <= KSEG0_BASE + ctob(physmem)) ||
			    uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE)) {
@


1.5
log
@Kernel moves to 64 bit. A few more tweaks when binutils is updated.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 2004/08/11 15:13:58 deraadt Exp $	*/
d196 1
a196 1
			return mips_btop(off);
d199 1
a199 1
			return mips_btop(off);
@


1.4
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 2004/08/10 17:06:06 pefo Exp $	*/
d137 1
a137 1
			v += KSEG0_BASE;
@


1.3
log
@make kvm happy again!
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.2 2004/08/09 14:57:26 pefo Exp $	*/
d76 1
a76 4
mmopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d103 1
a103 4
mmclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d114 1
a114 4
mmrw(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
d116 2
a118 3
	int c;
	struct iovec *iov;
	int error = 0;
a147 1

d190 1
a190 4
mmmmap(dev, off, prot)
	dev_t dev;
	off_t off;
	int prot;
d194 1
a194 1
                if (off >= 0x0000 && off < 0x10000) {
d209 1
a209 6
mmioctl(dev, cmd, data, flags, p)
        dev_t dev;
        u_long cmd;
        caddr_t data;
        int flags;
        struct proc *p;
@


1.2
log
@Big cleanup. Removed some unused obsolete stuff and fixed copyrights
on some files. Arcbios support is now in, thus detects memorysize and cpu
clock frequency.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.1 2004/08/06 20:56:03 pefo Exp $	*/
d155 7
a161 1
			if (v < KSEG0_BASE)
d163 1
a163 6
			if (!uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);

			error = uiomove((caddr_t)v, c, uio);
			continue;
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.2 1998/08/31 17:42:34 millert Exp $	*/
a67 1
extern vaddr_t avail_end;
d157 2
a158 5
			if (v + c > PHYS_TO_KSEG0(avail_end +
						sizeof (struct msgbuf)) &&
			    (v < VM_MIN_KERNEL_ADDRESS ||
			    !uvm_kernacc((caddr_t)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE)))
@

