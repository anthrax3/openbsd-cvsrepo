head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.20
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.22
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.14
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.17
date	2016.03.06.19.42.27;	author mpi;	state Exp;
branches;
next	1.16;
commitid	cyYKarj4qRTft4gD;

1.16
date	2010.11.24.21.01.03;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.21.20.29.17;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.26.23.24.43;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.08.01.35.52;	author syuu;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.01.19.26.31;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.22.22.08.54;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.22.20.37.53;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.28.18.48.25;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.18.04.32.25;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.26.17.05.11;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.17.14.56.31;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.31.21.35.50;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.10.20.28.13;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.20.15.47;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.08.14.21.27;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.03;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Rename mips64's trap_frame into trapframe.

For coherency with other archs and in order to use it in MI code.

ok visa@@, tobiasu@@
@
text
@/*	$OpenBSD: process_machdep.c,v 1.16 2010/11/24 21:01:03 miod Exp $	*/

/*
 * Copyright (c) 1994 Adam Glass
 * Copyright (c) 1993 The Regents of the University of California.
 * Copyright (c) 1993 Jan-Simon Pendry
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * From:
 *	Id: procfs_i386.c,v 4.1 1993/12/17 10:47:45 jsp Rel
 *
 *	$Id: process_machdep.c,v 1.16 2010/11/24 21:01:03 miod Exp $
 */

/*
 * This file may seem a bit stylized, but that so that it's easier to port.
 * Functions to be implemented here are:
 *
 * process_read_regs(proc, regs)
 *	Get the current user-visible register set from the process
 *	and copy it into the regs structure (<machine/reg.h>).
 *	The process is stopped at the time read_regs is called.
 *
 * process_write_regs(proc, regs)
 *	Update the current register set from the passed in regs
 *	structure.  Take care to avoid clobbering special CPU
 *	registers or privileged bits in the PSL.
 *	The process is stopped at the time write_regs is called.
 *
 * process_sstep(proc)
 *	Arrange for the process to trap after executing a single instruction.
 *
 * process_set_pc(proc)
 *	Set the process's program counter.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/vnode.h>
#include <sys/ptrace.h>
#include <machine/fpu.h>
#include <machine/frame.h>
#include <machine/reg.h>

#define	REGSIZE (sizeof(struct trapframe) - sizeof(register_t))

int
process_read_regs(p, regs)
	struct proc *p;
	struct reg *regs;
{
	struct cpu_info *ci = curcpu();

	if (p == ci->ci_fpuproc)
		save_fpu();

	bcopy(&p->p_md.md_regs->ast, &regs->r_regs[AST], REGSIZE);
	regs->r_regs[ZERO] = 0;
	return (0);
}

#ifdef	PTRACE

int
process_write_regs(p, regs)
	struct proc *p;
	struct reg *regs;
{
	struct cpu_info *ci = curcpu();
	register_t sr, ic, ipl;

	if (p == ci->ci_fpuproc)
		save_fpu();

	sr = p->p_md.md_regs->sr;
	ic = p->p_md.md_regs->ic;
	ipl = p->p_md.md_regs->ipl;
	bcopy(&regs->r_regs[AST], &p->p_md.md_regs->ast, REGSIZE);
	p->p_md.md_regs->fsr &= ~FPCSR_C_MASK;
	p->p_md.md_regs->sr = sr;
	p->p_md.md_regs->ic = ic;
	p->p_md.md_regs->ipl = ipl;
	return (0);
}

/* process_sstep is in trap.c */

int
process_set_pc(p, addr)
	struct proc *p;
	caddr_t addr;
{
	p->p_md.md_regs->pc = (register_t)addr;
	return (0);
}

#endif	/* PTRACE */
@


1.16
log
@Make sure ptrace_sstep(,0) actually clears breakpoints, by replacing the
ptrace guts with a logic similar to what the alpha port does.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.15 2010/09/21 20:29:17 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.15 2010/09/21 20:29:17 miod Exp $
d79 1
a79 1
#define	REGSIZE (sizeof(struct trap_frame) - sizeof(register_t))
@


1.15
log
@Replace the old floating point completion code with a C interface to the
MI softfloat code, implementing all MIPS IV specified floating point
operations.
Tested on R5000, R10000, R14000 and Loongson2F.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.14 2010/06/26 23:24:43 guenther Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.14 2010/06/26 23:24:43 guenther Exp $
a80 2
extern void cpu_singlestep(struct proc *);

d120 1
a120 8
int
process_sstep(p, sstep)
	struct proc *p;
{
	if (sstep)
		cpu_singlestep(p);
	return (0);
}
@


1.14
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.13 2010/01/08 01:35:52 syuu Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.13 2010/01/08 01:35:52 syuu Exp $
d75 1
d115 1
@


1.13
log
@MP-safe FPU handling. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.12 2010/01/01 19:26:31 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.12 2010/01/01 19:26:31 miod Exp $
a72 1
#include <sys/user.h>
@


1.12
log
@Make sure than ptrace functions never return a non-zero value in the zero
register.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.11 2009/10/22 22:08:54 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.11 2009/10/22 22:08:54 miod Exp $
d88 4
a91 1
	extern struct proc *machFPCurProcPtr;
a92 6
	if (p == machFPCurProcPtr) {
		if (p->p_md.md_regs->sr & SR_FR_32)
			MipsSaveCurFPState(p);
		else
			MipsSaveCurFPState16(p);
	}
d105 1
a106 1
	extern struct proc *machFPCurProcPtr;
d108 3
a110 6
	if (p == machFPCurProcPtr) {
		if (p->p_md.md_regs->sr & SR_FR_32)
			MipsSaveCurFPState(p);
		else
			MipsSaveCurFPState16(p);
	}
@


1.11
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.10 2009/05/22 20:37:53 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.10 2009/05/22 20:37:53 miod Exp $
d77 1
d79 1
a79 1
#define	REGSIZE sizeof(struct trap_frame)
d96 2
a97 1
	bcopy((caddr_t)p->p_md.md_regs, (caddr_t)regs, REGSIZE);
d120 1
a120 1
	bcopy((caddr_t)regs, (caddr_t)p->p_md.md_regs, REGSIZE);
@


1.10
log
@Drop almost unused <machine/psl.h> on sgi; move USERMODE() definition from
there to trap.c which is its only user. This also cleans up multiple
inclusion of <machine/cpu.h> (because <machine/psl.h> includes it) in many
places.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2008/07/28 18:48:25 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.9 2008/07/28 18:48:25 miod Exp $
d106 1
a106 1
	register_t sr, ic, cpl;
d117 1
a117 1
	cpl = p->p_md.md_regs->cpl;
d121 1
a121 1
	p->p_md.md_regs->cpl = cpl;
@


1.9
log
@In addition to cop0 sr, prevent cop0 ic from being modified in
process_write_regs().
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.8 2007/10/18 04:32:25 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.8 2007/10/18 04:32:25 miod Exp $
a75 1
#include <machine/psl.h>
@


1.8
log
@No need to include <machine/pte.h> here.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 2007/04/26 17:05:11 miod Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.7 2007/04/26 17:05:11 miod Exp $
d107 1
a107 1
	register_t sr;
d117 2
d121 2
@


1.7
log
@Do not allow userland to change cop0 SR via ptrace; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.6 2005/12/17 14:56:31 kettenis Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.6 2005/12/17 14:56:31 kettenis Exp $
a75 1
#include <machine/pte.h>
@


1.6
log
@Fix handling of floating-point registers in PT_{GET|SET}REGS.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 2005/01/31 21:35:50 grange Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.5 2005/01/31 21:35:50 grange Exp $
d108 1
d117 1
d119 1
a119 1
/*XXX Clear to user set bits!! */
@


1.5
log
@Un-__P.

ok pefo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.4 2004/08/10 20:28:13 deraadt Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.4 2004/08/10 20:28:13 deraadt Exp $
d83 1
d89 8
d108 8
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.3 2004/08/10 20:15:47 deraadt Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.3 2004/08/10 20:15:47 deraadt Exp $
d82 1
a82 1
extern void cpu_singlestep __P((struct proc *));
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.2 2004/08/08 14:21:27 pefo Exp $	*/
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.2 2004/08/08 14:21:27 pefo Exp $
d108 1
a108 1
	if(sstep)
@


1.2
log
@Various fixes and cleanups from miod@@, tested and OK.
@
text
@d1 2
a2 1
/*	$OpenBSD: process_machdep.c,v 1.1 2004/08/06 20:56:03 pefo Exp $	*/
d4 1
a4 1
 * Copyright (c) 1994 Adam Glass   
d43 1
a43 1
 *	$Id: process_machdep.c,v 1.1 2004/08/06 20:56:03 pefo Exp $
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.2 1998/09/15 10:50:13 pefo Exp $	*/
d42 1
a42 1
 *	$Id: process_machdep.c,v 1.2 1998/09/15 10:50:13 pefo Exp $
d91 2
d121 1
@

