head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.18
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.20
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.12
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.08.16.13.03.58;	author visa;	state Exp;
branches;
next	1.9;
commitid	6TiwRQZbesPVamIE;

1.9
date	2016.03.06.19.42.27;	author mpi;	state Exp;
branches;
next	1.8;
commitid	cyYKarj4qRTft4gD;

1.8
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.24.21.16.26;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.24.21.01.02;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.07.19.01.03;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.19.20.13.51;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.10.18.05.30;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.07.07.29.44;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.02;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove RM7000/RM9000-specific performance counter code. It originates
from PMON2000 and has not been enabled on OpenBSD.

Suggested by and ok miod@@ (after seeing a quad_t cleanup patch of mine)
@
text
@/*	$OpenBSD: proc.h,v 1.9 2016/03/06 19:42:27 mpi Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)proc.h	8.1 (Berkeley) 6/10/93
 */

#ifndef	_MIPS64_PROC_H_
#define	_MIPS64_PROC_H_

/*
 * Machine-dependent part of the proc structure.
 */
struct mdproc {
	struct trapframe *md_regs;	/* registers on current frame */
	volatile int md_astpending;	/* AST pending for this process */
	int	md_flags;		/* machine-dependent flags */
	vaddr_t	md_uarea;		/* allocated uarea virtual addr */

	/* ptrace fields */
	vaddr_t	md_ss_addr;		/* single step address */
	uint32_t md_ss_instr;		/* saved single step instruction */

	/* fpu emulation fields */
	vaddr_t	md_fppgva;		/* vaddr of the branch emulation page */
	vaddr_t	md_fpbranchva;		/* vaddr of fp branch destination */
	vaddr_t	md_fpslotva;		/* initial vaddr of delay slot */

	int32_t	md_obsolete[10];	/* Were RM7000-specific data. */
};

/*
 * Values for md_flags.
 * MDP_FPUSED has two meanings: if the floating point hardware (coprocessor
 * #1) is available, it means it has been used; if there is no floating
 * point hardware, it means the process is currently running a duplicated
 * delay slot, created by the branch emulation logic.
 */
#define	MDP_FPUSED	0x00000001	/* floating point coprocessor used */
#define	MDP_PERF	0x00010000	/* Performance counter used */
#define	MDP_WATCH1	0x00020000	/* Watch register 1 used */
#define	MDP_WATCH2	0x00040000	/* Watch register 1 used */
#define	MDP_FORKSAVE	0x0000ffff	/* Flags to save when forking */

#endif	/* !_MIPS64_PROC_H_ */
@


1.9
log
@Rename mips64's trap_frame into trapframe.

For coherency with other archs and in order to use it in MI code.

ok visa@@, tobiasu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.8 2011/03/23 16:54:36 pirofti Exp $	*/
d58 1
a58 7
/* The following is RM7000 dependent, but kept in for compatibility */
	int	md_pc_ctrl;		/* performance counter control */
	int	md_pc_count;		/* performance counter */
	int	md_pc_spill;		/* performance counter spill */
	quad_t	md_watch_1;
	quad_t	md_watch_2;
	int	md_watch_m;
@


1.8
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.7 2010/11/24 21:16:26 miod Exp $	*/
d44 1
a44 1
	struct trap_frame *md_regs;	/* registers on current frame */
@


1.7
log
@Floating-point emulation code for systems lacking proper FPU (i.e. Octeon),
enabled by option FPUEMUL.

This is pretty straightforward, except for conditional branch on FPU condition
codes emulation (bc1f/bc1fl/bc1t/bc1tl instructions): unlike most
RISC-with-delay-slots designs (m88k, sparc), the branch pipeline is not exposed
to the kernel on Mips, therefore we can not resume a branch without losing the
delay slot instruction.

Some other operating systems work around this issue by emulating the delay
slot instruction, but this is error-prone (and requires the kernel code to
be aware of all supported instructions of the processor it is currently running
on), some use dedicated breakpoints to single-step through the delay slot and
then resume the branch as expected, but this causes a lot of copy-on-write
allocations.

This code chooses a third path, of copying the delay slot instructions to run toa special `magic' page, followed by a special trap instruction to give control
back to the kernel. This makes sure the instruction will actually be run by the
processor, and that no more than one page per process is wasted, regardless of
the number of branches to emulate.

Tested on octeon (big-endian) by syuu@@ and on loongson (little-endian) by me.
Note that enabling option FPUEMUL in the kernel will completely disable the
hardware FPU, if there is one; there is currently no way to build a kernel
supporting both hardware and software FPU, and there is no reason to change
this until there is a strong need to support both.
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.6 2010/11/24 21:01:02 miod Exp $	*/
d37 2
a38 2
#ifndef	_MIPS_PROC_H_
#define	_MIPS_PROC_H_
d80 1
a80 1
#endif	/* !_MIPS_PROC_H_ */
@


1.6
log
@Make sure ptrace_sstep(,0) actually clears breakpoints, by replacing the
ptrace guts with a logic similar to what the alpha port does.
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.5 2009/12/07 19:01:03 miod Exp $	*/
d53 5
d67 7
a73 1
/* md_flags */
@


1.5
log
@If UPAGES would turn out to be 1, instead of using wired TLB entries to map
the u area after each context switch, simply convert it to an XKPHYS address,
so that access to it never faults. Idea from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.4 2009/11/19 20:13:51 miod Exp $	*/
a46 2
	long	md_ss_addr;		/* single step address for ptrace */
	int	md_ss_instr;		/* single step instruction for ptrace */
d48 5
@


1.4
log
@Remove code allowing native binaries with O32 ABI to run, there aren't any...
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.3 2009/06/10 18:05:30 miod Exp $	*/
d49 1
@


1.3
log
@Switch sgi to per-process AST, and move ast() from interrupt.c to trap.c
where it can use userret() instead of duplicating it.
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.2 2005/08/07 07:29:44 miod Exp $	*/
a59 2
#define	MDP_O32		0x00000002	/* Uses 32 bit syscall interface */
#define	MDP_64		0x00000004	/* Uses new 64 bit syscall interface */
@


1.2
log
@Remove advertising clause from UCB licenses; ok deraad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.1 2004/08/06 20:56:02 pefo Exp $	*/
d45 1
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD: proc.h,v 1.2 1998/09/15 10:50:12 pefo Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@

