head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.11
date	2015.09.27.18.17.08;	author miod;	state Exp;
branches;
next	1.10;
commitid	tZfPmUghLNuS97yK;

1.10
date	2014.07.09.12.58.08;	author miod;	state Exp;
branches;
next	1.9;
commitid	tzZYofASe0kXr1p9;

1.9
date	2012.09.29.19.02.25;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.22.22.08.52;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.07.08.35.47;	author syuu;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.10.10.38.51;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.09.22.21.41;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.21.10.56;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.10.20.28.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.01;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Don't forget to put the necessary MFC0_HAZARD in SAVE_CPU. For some reason I
had put the MTC0_HAZARD in RESTORE_CPU years ago but forgot their counterparts.
@
text
@/*	$OpenBSD: cpustate.h,v 1.10 2014/07/09 12:58:08 miod Exp $ */

/*
 * Copyright (c) 2002-2003 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define	KERN_REG_SIZE		(NUMSAVEREGS * REGSZ)
#define	KERN_EXC_FRAME_SIZE	(CF_SZ + KERN_REG_SIZE + 16)

#define	SAVE_REG(reg, offs, base, bo) \
	REG_S	reg, bo + (REGSZ * offs) (base)

#define	RESTORE_REG(reg, offs, base, bo) \
	REG_L	reg, bo + (REGSZ * offs) (base)

/*
 *  This macro saves the 'scratch' cpu state on stack.
 *  Macros are generic so no 'special' instructions!
 *  a0 will have a pointer to the 'frame' on return.
 *  a1 will have saved STATUS_REG on return.
 *  a3 will have the exception pc on 'return'.
 *  No traps, no interrupts if frame = k1 or k0!
 *  Temp regs are saved with their register number so
 *  branch emulation etc works properly.
 */
#define	SAVE_CPU(frame, bo)			 \
	SAVE_REG(AT, AST, frame, bo)		;\
	SAVE_REG(v0, V0, frame, bo)		;\
	SAVE_REG(v1, V1, frame, bo)		;\
	SAVE_REG(a0, A0, frame, bo)		;\
	SAVE_REG(a1, A1, frame, bo)		;\
	SAVE_REG(a2, A2, frame, bo)		;\
	SAVE_REG(a3, A3, frame, bo)		;\
	MFC0	a0, COP_0_CAUSE_REG		;\
	MFC0_HAZARD				;\
	SAVE_REG(a4, A4, frame, bo)		;\
	SAVE_REG(a5, A5, frame, bo)		;\
	MFC0	a1, COP_0_STATUS_REG		;\
	MFC0_HAZARD				;\
	SAVE_REG(a6, A6, frame, bo)		;\
	SAVE_REG(a7, A7, frame, bo)		;\
	PRE_MFC0_ADDR_HAZARD			;\
	DMFC0	a2, COP_0_BAD_VADDR		;\
	MFC0_HAZARD				;\
	SAVE_REG(t0, T0, frame, bo)		;\
	SAVE_REG(t1, T1, frame, bo)		;\
	DMFC0	a3, COP_0_EXC_PC		;\
	MFC0_HAZARD				;\
	SAVE_REG(t2, T2, frame, bo)		;\
	SAVE_REG(t3, T3, frame, bo)		;\
	SAVE_REG(t8, T8, frame, bo)		;\
	SAVE_REG(t9, T9, frame, bo)		;\
	SAVE_REG(gp, GP, frame, bo)		;\
	SAVE_REG(ra, RA, frame, bo)		;\
	mflo	v0				;\
	mfhi	v1				;\
	SAVE_REG(v0, MULLO, frame, bo)		;\
	SAVE_REG(v1, MULHI, frame, bo)		;\
	SAVE_REG(a0, CAUSE, frame, bo)		;\
	SAVE_REG(a1, SR, frame, bo)		;\
	SAVE_REG(a2, BADVADDR, frame, bo)	;\
	SAVE_REG(a3, PC, frame, bo)		;\
	SAVE_REG(sp, SP, frame, bo)		;\
	PTR_ADDU a0, frame, bo			;\
	GET_CPU_INFO(v0, v1)			;\
	lw	a2, CI_IPL(v0)			;\
	SAVE_REG(a2, CPL, frame, bo)

/*
 *  Save 'callee save' registers in frame to aid DDB.
 */
#define	SAVE_CPU_SREG(frame, bo)		 \
	SAVE_REG(s0, S0, frame, bo)		;\
	SAVE_REG(s1, S1, frame, bo)		;\
	SAVE_REG(s2, S2, frame, bo)		;\
	SAVE_REG(s3, S3, frame, bo)		;\
	SAVE_REG(s4, S4, frame, bo)		;\
	SAVE_REG(s5, S5, frame, bo)		;\
	SAVE_REG(s6, S6, frame, bo)		;\
	SAVE_REG(s7, S7, frame, bo)		;\
	SAVE_REG(s8, S8, frame, bo)

/*
 *  Restore cpu state. When called a0 = EXC_PC.
 */
#define	RESTORE_CPU(frame, bo)			 \
	RESTORE_REG(t1, SR, frame, bo)		;\
	RESTORE_REG(t2, MULLO, frame, bo)	;\
	RESTORE_REG(t3, MULHI, frame, bo)	;\
	MTC0	t1, COP_0_STATUS_REG		;\
	MTC0_SR_IE_HAZARD			;\
	mtlo	t2				;\
	mthi	t3				;\
	DMTC0	a0, COP_0_EXC_PC		;\
	MTC0_HAZARD				;\
	RESTORE_REG(AT, AST, frame, bo)		;\
	RESTORE_REG(v0, V0, frame, bo)		;\
	RESTORE_REG(v1, V1, frame, bo)		;\
	RESTORE_REG(a0, A0, frame, bo)		;\
	RESTORE_REG(a1, A1, frame, bo)		;\
	RESTORE_REG(a2, A2, frame, bo)		;\
	RESTORE_REG(a3, A3, frame, bo)		;\
	RESTORE_REG(a4, A4, frame, bo)		;\
	RESTORE_REG(a5, A5, frame, bo)		;\
	RESTORE_REG(a6, A6, frame, bo)		;\
	RESTORE_REG(a7, A7, frame, bo)		;\
	RESTORE_REG(t0, T0, frame, bo)		;\
	RESTORE_REG(t1, T1, frame, bo)		;\
	RESTORE_REG(t2, T2, frame, bo)		;\
	RESTORE_REG(t3, T3, frame, bo)		;\
	RESTORE_REG(t8, T8, frame, bo)		;\
	RESTORE_REG(t9, T9, frame, bo)		;\
	RESTORE_REG(gp, GP, frame, bo)		;\
	RESTORE_REG(ra, RA, frame, bo)

/*
 *  Restore 'callee save' registers
 */
#define	RESTORE_CPU_SREG(frame, bo)		 \
	RESTORE_REG(s0, S0, frame, bo)		;\
	RESTORE_REG(s1, S1, frame, bo)		;\
	RESTORE_REG(s2, S2, frame, bo)		;\
	RESTORE_REG(s3, S3, frame, bo)		;\
	RESTORE_REG(s4, S4, frame, bo)		;\
	RESTORE_REG(s5, S5, frame, bo)		;\
	RESTORE_REG(s6, S6, frame, bo)		;\
	RESTORE_REG(s7, S7, frame, bo)		;\
	RESTORE_REG(s8, S8, frame, bo)
@


1.10
log
@Do the way long overdue renaming of register names from o32 to n64 ABI.
In other words, ta0-ta3 are now a4-a7 instead of t0-t3; and the former t4-t7
are now t0-t3.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.9 2012/09/29 19:02:25 miod Exp $ */
d57 1
d61 1
d66 1
d70 1
@


1.9
log
@Introduce assembly macros for specific processor hazards: tlb update, status
register update, status register update causing a change to the interrupt
enable flag, and a few other arcane ones. <mips64/asm.h> will provide
(supposedly sane) defaults, and <machine/asm.h> may override these with
better tuned versions.

Use these macros instead of random strings of nop in the various .S files
requiring hazard workarounds.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.8 2009/10/22 22:08:52 miod Exp $ */
d57 2
a58 2
	SAVE_REG($8, T0, frame, bo)		;\
	SAVE_REG($9, T1, frame, bo)		;\
d60 2
a61 2
	SAVE_REG($10, T2, frame, bo)		;\
	SAVE_REG($11, T3, frame, bo)		;\
d64 2
a65 2
	SAVE_REG($12, T4, frame, bo)		;\
	SAVE_REG($13, T5, frame, bo)		;\
d67 2
a68 2
	SAVE_REG($14, T6, frame, bo)		;\
	SAVE_REG($15, T7, frame, bo)		;\
d121 8
a128 8
	RESTORE_REG($8, T0, frame, bo)		;\
	RESTORE_REG($9, T1, frame, bo)		;\
	RESTORE_REG($10, T2, frame, bo)		;\
	RESTORE_REG($11, T3, frame, bo)		;\
	RESTORE_REG($12, T4, frame, bo)		;\
	RESTORE_REG($13, T5, frame, bo)		;\
	RESTORE_REG($14, T6, frame, bo)		;\
	RESTORE_REG($15, T7, frame, bo)		;\
@


1.8
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.7 2009/10/07 08:35:47 syuu Exp $ */
d56 1
d59 1
d62 2
d66 1
a74 4
	mfc0	a0, COP_0_CAUSE_REG		;\
	mfc0	a1, COP_0_STATUS_REG		;\
	dmfc0	a2, COP_0_BAD_VADDR		;\
	dmfc0	a3, COP_0_EXC_PC		;\
d108 2
a109 1
	mtc0	t1, COP_0_STATUS_REG		;\
d112 2
a113 1
	dmtc0	a0, COP_0_EXC_PC		;\
a146 1

@


1.7
log
@ipending, cpl moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.6 2004/10/20 12:49:15 pefo Exp $ */
d83 1
a83 1
	lw	a2, CI_CPL(v0)			;\
@


1.6
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.5 2004/09/10 10:38:51 miod Exp $ */
d82 2
a83 1
	lw	a2, cpl				;\
@


1.5
log
@typo in SAVE_CPU expansion.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.4 2004/09/09 22:21:41 pefo Exp $ */
d72 2
a73 2
	mfc0	a2, COP_0_BAD_VADDR		;\
	mfc0	a3, COP_0_EXC_PC		;\
d81 1
a81 1
	addu	a0, frame, bo			;\
@


1.4
log
@these should have gone in with the other 64 bit changes
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.3 2004/08/10 21:10:56 pefo Exp $ */
d63 1
a63 1
	SAVE_REG($15 T7, frame, bo)		;\
@


1.3
log
@copyrigths
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.2 2004/08/10 20:28:13 deraadt Exp $ */
d45 2
d56 8
a63 8
	SAVE_REG(t0, T0, frame, bo)		;\
	SAVE_REG(t1, T1, frame, bo)		;\
	SAVE_REG(t2, T2, frame, bo)		;\
	SAVE_REG(t3, T3, frame, bo)		;\
	SAVE_REG(t4, T4, frame, bo)		;\
	SAVE_REG(t5, T5, frame, bo)		;\
	SAVE_REG(t6, T6, frame, bo)		;\
	SAVE_REG(t7, T7, frame, bo)		;\
d117 8
a124 8
	RESTORE_REG(t0, T0, frame, bo)		;\
	RESTORE_REG(t1, T1, frame, bo)		;\
	RESTORE_REG(t2, T2, frame, bo)		;\
	RESTORE_REG(t3, T3, frame, bo)		;\
	RESTORE_REG(t4, T4, frame, bo)		;\
	RESTORE_REG(t5, T5, frame, bo)		;\
	RESTORE_REG(t6, T6, frame, bo)		;\
	RESTORE_REG(t7, T7, frame, bo)		;\
@


1.2
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: cpustate.h,v 1.1 2004/08/06 20:56:01 pefo Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 * 
d131 1
a131 1
	RESTORE_REG(ra, RA, frame, bo)	
@

