head	1.25;
access;
symbols
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.25
date	2017.08.27.04.32.29;	author visa;	state Exp;
branches;
next	1.24;
commitid	f7RN2iZiRt7bxOBc;

1.24
date	2017.06.29.17.36.16;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	5ZXnhHEGi66VYL0B;

1.23
date	2017.01.21.14.45.29;	author visa;	state Exp;
branches;
next	1.22;
commitid	Q652siVDoj2Pi2xX;

1.22
date	2015.09.21.21.22.44;	author miod;	state Exp;
branches;
next	1.21;
commitid	D1XHjkVu3adElUfJ;

1.21
date	2014.03.14.16.57.21;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2014.03.11.07.50.49;	author jasper;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.28.17.41.04;	author martynas;	state Exp;
branches;
next	1.18;

1.18
date	2012.09.29.21.37.03;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2012.09.29.19.02.25;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2012.09.29.18.56.23;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2012.06.23.21.53.38;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.01.05.02.19;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.11.11.29.49;	author syuu;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.28.16.20.28;	author syuu;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.09.23.34.29;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.11.05.10.17;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.30.06.22.00;	author syuu;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.27.20.39.27;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.27.19.16.06;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.09.22.21.41;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.21.10.56;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.10.20.28.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.01;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Rely on the hardware to clear hazards on octeon.
@
text
@/*	$OpenBSD: asm.h,v 1.24 2017/06/29 17:36:16 deraadt Exp $ */

/*
 * Copyright (c) 2001-2002 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#ifndef _MIPS64_ASM_H_
#define _MIPS64_ASM_H_

#include <machine/regdef.h>

#define	_MIPS_ISA_MIPS1		1	/* R2000/R3000 */
#define	_MIPS_ISA_MIPS2		2	/* R4000/R6000 */
#define	_MIPS_ISA_MIPS3		3	/* R4000 */
#define	_MIPS_ISA_MIPS4		4	/* TFP (R1x000) */
#define	_MIPS_ISA_MIPS32	32	/* MIPS32 */
#define	_MIPS_ISA_MIPS64	64	/* MIPS64 */

#if !defined(ABICALLS) && !defined(_NO_ABICALLS)
#define	ABICALLS	.abicalls
#endif

#if defined(ABICALLS) && !defined(_KERNEL)
	ABICALLS
#endif

#define _C_LABEL(x) x		/* XXX Obsolete but keep for a while */

#if !defined(__MIPSEL__) && !defined(__MIPSEB__)
#error "__MIPSEL__ or __MIPSEB__ must be defined"
#endif
/*
 * Define how to access unaligned data word
 */
#if defined(__MIPSEL__)
#define LWLO    lwl
#define LWHI    lwr
#define	SWLO	swl
#define	SWHI	swr
#define LDLO    ldl
#define LDHI    ldr
#define	SDLO	sdl
#define	SDHI	sdr
#endif
#if defined(__MIPSEB__)
#define LWLO    lwr
#define LWHI    lwl
#define	SWLO	swr
#define	SWHI	swl
#define LDLO    ldr
#define LDHI    ldl
#define	SDLO	sdr
#define	SDHI	sdl
#endif

/*
 *  Define programming environment for ABI.
 */
#if defined(ABICALLS) && !defined(_KERNEL) && !defined(_STANDALONE)

#ifndef _MIPS_SIM
#define _MIPS_SIM 1
#define _ABIO32	1
#endif
#ifndef _MIPS_ISA
#define _MIPS_ISA 2
#define _MIPS_ISA_MIPS2 2
#endif

#if (_MIPS_SIM == _ABIO32) || (_MIPS_SIM == _ABI32)
#define NARGSAVE	4

#define	SETUP_GP		\
	.set	noreorder;	\
	.cpload	t9;		\
	.set	reorder;

#define	SAVE_GP(x)		\
	.cprestore x

#define	SETUP_GP64(gpoff, name)
#define	RESTORE_GP64
#endif

#if (_MIPS_SIM == _ABI64) || (_MIPS_SIM == _ABIN32)
#define NARGSAVE	0

#define	SETUP_GP
#define	SAVE_GP(x)
#define	SETUP_GP64(gpoff, name)	\
	.cpsetup t9, gpoff, name
#define	RESTORE_GP64		\
	.cpreturn
#endif

#define	MKFSIZ(narg,locals) (((narg+locals)*REGSZ+31)&(~31))

#else /* defined(ABICALLS) && !defined(_KERNEL) */

#define	NARGSAVE	4
#define	SETUP_GP
#define	SAVE_GP(x)

#define	ALIGNSZ		16	/* Stack layout alignment */
#define	FRAMESZ(sz)	(((sz) + (ALIGNSZ-1)) & ~(ALIGNSZ-1))

#endif

/*
 *  Basic register operations based on selected ISA
 */
#if (_MIPS_ISA == _MIPS_ISA_MIPS1 || _MIPS_ISA == _MIPS_ISA_MIPS2 || \
    _MIPS_ISA == _MIPS_ISA_MIPS32)
#define REGSZ		4	/* 32 bit mode register size */
#define LOGREGSZ	2	/* log rsize */
#define	REG_S	sw
#define	REG_L	lw
#define	CF_SZ		24	/* Call frame size */
#define	CF_ARGSZ	16	/* Call frame arg size */
#define	CF_RA_OFFS	20	/* Call ra save offset */
#endif

#if (_MIPS_ISA == _MIPS_ISA_MIPS3 || _MIPS_ISA == _MIPS_ISA_MIPS4 || \
    _MIPS_ISA == _MIPS_ISA_MIPS64)
#define REGSZ		8	/* 64 bit mode register size */
#define LOGREGSZ	3	/* log rsize */
#define	REG_S	sd
#define	REG_L	ld
#define	CF_SZ		48	/* Call frame size (multiple of ALIGNSZ) */
#define	CF_ARGSZ	32	/* Call frame arg size */
#define	CF_RA_OFFS	40	/* Call ra save offset */
#endif

#ifndef __LP64__
#define	PTR_L		lw
#define	PTR_S		sw
#define	PTR_SUB		sub
#define	PTR_ADD		add
#define	PTR_SUBU	subu
#define	PTR_ADDU	addu
#define LI		li
#define	LA		la
#define	PTR_SLL		sll
#define	PTR_SRL		srl
#define	PTR_VAL		.word
#else
#define	PTR_L		ld
#define	PTR_S		sd
#define	PTR_ADD		dadd
#define	PTR_SUB		dsub
#define	PTR_SUBU	dsubu
#define	PTR_ADDU	daddu
#define LI		dli
#define LA		dla
#define	PTR_SLL		dsll
#define	PTR_SRL		dsrl
#define	PTR_VAL		.dword
#endif

/*
 * The following macros are here to benefit the R8000 processor:
 * - all coprocessor 0 control registers are 64-bit
 * - the regular nop (sll zero, zero, 0) has the drawback of using the
 *   shifter, potentially breaking instruction dispatch if occuring after
 *   another instruction using the shifter.
 */
#ifdef CPU_R8000
#define	SSNOP	sll zero, zero, 1		/* ``ssnop'' */
#define	NOP	PTR_ADDU zero, zero, zero	/* real nop for R8000 */
#define	DMFC0	SSNOP; dmfc0
#define	DMTC0	SSNOP; dmtc0
#define	MFC0	SSNOP; dmfc0
#define	MTC0	SSNOP; dmtc0
#define	ERET	eret; mul k0, k0; mflo k0
#else
#define	NOP	nop
#define	DMFC0	dmfc0
#define	DMTC0	dmtc0
#define	MFC0	mfc0
#define	MTC0	mtc0
#define	ERET	sync; eret
#endif

/*
 * Define -pg profile entry code.
 */
#if defined(XGPROF) || defined(XPROF)
#define	MCOUNT			\
	PTR_SUBU sp, sp, 64;	\
	SAVE_GP(16);		\
	sd	ra, 56(sp);	\
	sd	gp, 48(sp);	\
	.set	noat;		\
	.set	noreorder;	\
	move	AT, ra;		\
	jal	_mcount;	\
	PTR_SUBU sp, sp, 16;	\
	ld	ra, 56(sp);	\
	PTR_ADDU sp, sp, 64;	\
	.set reorder;		\
	.set	at;
#else
#define	MCOUNT
#endif

/*
 * LEAF(x, fsize)
 *
 *	Declare a leaf routine.
 */
#define LEAF(x, fsize)		\
	.align	3;		\
	.globl x;		\
	.ent x, 0;		\
x: ;				\
	.frame sp, fsize, ra;	\
	SETUP_GP		\
	MCOUNT

#define	ALEAF(x)		\
	.globl	x;		\
x:

/*
 * NLEAF(x)
 *
 *	Declare a non-profiled leaf routine.
 */
#define NLEAF(x, fsize)		\
	.align	3;		\
	.globl x;		\
	.ent x, 0;		\
x: ;				\
	.frame sp, fsize, ra;	\
	SETUP_GP

/*
 * NON_LEAF(x)
 *
 *	Declare a non-leaf routine (a routine that makes other C calls).
 */
#define NON_LEAF(x, fsize, retpc) \
	.align	3;		\
	.globl x;		\
	.ent x, 0;		\
x: ;				\
	.frame sp, fsize, retpc; \
	SETUP_GP		\
	MCOUNT

/*
 * NNON_LEAF(x)
 *
 *	Declare a non-profiled non-leaf routine
 *	(a routine that makes other C calls).
 */
#define NNON_LEAF(x, fsize, retpc) \
	.align	3;		\
	.globl x;		\
	.ent x, 0;		\
x: ;				\
	.frame sp, fsize, retpc	\
	SETUP_GP

/*
 * END(x)
 *
 *	Mark end of a procedure.
 */
#define END(x) \
	.end x

/*
 * STRONG_ALIAS, WEAK_ALIAS
 *	Create a strong or weak alias.
 */
#define STRONG_ALIAS(alias,sym) \
	.global alias; alias = sym
#define WEAK_ALIAS(alias,sym) \
	.weak alias; alias = sym


/*
 * Macros to panic and printf from assembly language.
 */
#define PANIC(msg) \
	LA	a0, 9f; \
	jal	panic;	\
	nop	;	\
	MSG(msg)

#define	PRINTF(msg) \
	LA	a0, 9f; \
	jal	printf; \
	nop	;	\
	MSG(msg)

#define	MSG(msg) \
	.rdata; \
9:	.asciiz	msg; \
	.text

#define	LOAD_XKPHYS(reg, cca) \
	li	reg, cca | 0x10; \
	dsll	reg, reg, 59

#ifdef MULTIPROCESSOR
#define GET_CPU_INFO(ci, tmp)	HW_GET_CPU_INFO(ci, tmp)
#else  /* MULTIPROCESSOR */
#define GET_CPU_INFO(ci, tmp)		\
	LA	ci, cpu_info_primary
#endif /* MULTIPROCESSOR */

/*
 * Hazards
 */

#ifdef CPU_OCTEON
/*
 * OCTEON clears hazards in hardware.
 */
#define	MFC0_HAZARD		/* nothing */
#define	MTC0_HAZARD		/* nothing */
#define	MTC0_SR_IE_HAZARD	/* nothing */
#define	MTC0_SR_CU_HAZARD	/* nothing */
#define	TLB_HAZARD		/* nothing */
#endif

#ifdef CPU_RM7000
/*
 * Due to a flaw in RM7000 1.x processors a pipeline 'drain' is
 * required after some mtc0 instructions.
 * Ten nops in sequence does the trick.
 */
#define	MTC0_HAZARD		NOP;NOP;NOP;NOP;NOP;NOP;NOP;NOP;NOP;NOP
#define	MTC0_SR_IE_HAZARD	MTC0_HAZARD
/*
 * The RM7000 needs twice as much nops around tlb* instructions.
 */
#define	TLB_HAZARD		NOP; NOP; NOP; NOP
#endif

#ifdef CPU_R8000
/*
 * The R8000 needs a lot of care inserting proper superscalar dispatch breaks
 * to prevent unwanted side-effects or avoid collisions on the internal MiscBus
 * and the E and W stages of the pipelines.
 *
 * The following settings are a bit pessimistic, but better run safely than
 * not at all.
 */
#define	PRE_MFC0_ADDR_HAZARD	.align 5; SSNOP
#define	MFC0_HAZARD		SSNOP
#define	MTC0_HAZARD		SSNOP; SSNOP; SSNOP; SSNOP
#define	MTC0_SR_IE_HAZARD	MTC0_HAZARD
#define	MTC0_SR_CU_HAZARD	MTC0_HAZARD
#endif

/* Hazard between {d,}mfc0 of COP_0_VADDR */
#ifndef	PRE_MFC0_ADDR_HAZARD
#define	PRE_MFC0_ADDR_HAZARD	/* nothing */
#endif

/* Hazard after {d,}mfc0 from any register */
#ifndef	MFC0_HAZARD
#define	MFC0_HAZARD     	/* nothing */
#endif
/* Hazard after {d,}mtc0 to any register */
#ifndef	MTC0_HAZARD
#define	MTC0_HAZARD     	NOP; NOP; NOP; NOP
#endif
/* Hazard after {d,}mtc0 to COP_0_SR affecting the state of interrupts */
#ifndef	MTC0_SR_IE_HAZARD
#define	MTC0_SR_IE_HAZARD	MTC0_HAZARD
#endif
/* Hazard after {d,}mtc0 to COP_0_SR affecting the state of coprocessors */
#ifndef	MTC0_SR_CU_HAZARD
#define	MTC0_SR_CU_HAZARD	NOP; NOP
#endif

/* Hazard before and after a tlbp, tlbr, tlbwi or tlbwr instruction */
#ifndef	TLB_HAZARD
#define	TLB_HAZARD		NOP; NOP
#endif

#endif /* !_MIPS64_ASM_H_ */
@


1.24
log
@kill RCSID macros; discussed with millert
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.23 2017/01/21 14:45:29 visa Exp $ */
d338 11
@


1.23
log
@Add _MIPS_ISA_MIPS32 and _MIPS_ISA_MIPS64 defines for clang.

OK deraadt@@ phessler@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.22 2015/09/21 21:22:44 miod Exp $ */
a322 4

#define ASMSTR(str) \
	.asciiz str; \
	.align	3
@


1.22
log
@After reading IRIX header files again, add one more SSNOP to MTC0_HAZARD (and
remove one from constructs based upon it) when building for R8000.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.21 2014/03/14 16:57:21 miod Exp $ */
d33 6
a38 4
#define	_MIPS_ISA_MIPS1	1	/* R2000/R3000 */
#define	_MIPS_ISA_MIPS2	2	/* R4000/R6000 */
#define	_MIPS_ISA_MIPS3	3	/* R4000 */
#define	_MIPS_ISA_MIPS4	4	/* TFP (R1x000) */
d133 2
a134 1
#if (_MIPS_ISA == _MIPS_ISA_MIPS1 || _MIPS_ISA == _MIPS_ISA_MIPS2)
d144 2
a145 1
#if (_MIPS_ISA == _MIPS_ISA_MIPS3 || _MIPS_ISA == _MIPS_ISA_MIPS4)
@


1.21
log
@Revert previous; turns out to be necessary to build the 32-bit boot blocks
on sgi.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.20 2014/03/11 07:50:49 jasper Exp $ */
d364 3
a366 3
#define	MTC0_HAZARD		SSNOP; SSNOP; SSNOP
#define	MTC0_SR_IE_HAZARD	MTC0_HAZARD; SSNOP
#define	MTC0_SR_CU_HAZARD	MTC0_HAZARD; SSNOP
@


1.20
log
@remove #if(n)def __LP64__ from the mips64 codebase, as mips32 never really went anywhere.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.19 2013/03/28 17:41:04 martynas Exp $ */
d151 13
d175 1
@


1.19
log
@Add STRONG_ALIAS macros to be used from assembly code in libc and
libm.  While at it, remove now unused workarounds for lint.
Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.18 2012/09/29 21:37:03 miod Exp $ */
a150 13
#ifndef __LP64__
#define	PTR_L		lw
#define	PTR_S		sw
#define	PTR_SUB		sub
#define	PTR_ADD		add
#define	PTR_SUBU	subu
#define	PTR_ADDU	addu
#define LI		li
#define	LA		la
#define	PTR_SLL		sll
#define	PTR_SRL		srl
#define	PTR_VAL		.word
#else
a161 1
#endif
@


1.18
log
@Basic R8000 processor support. R8000 processors require MMU-specific code,
exception-specific code, clock-specific code, and L1 cache-specific code. L2
cache is per-design, of which only two exist: SGI Power Indigo2 (IP26) and SGI
Power Challenge (IP21) and are not covered by this commit.

R8000 processors also are 64-bit only processors with 64-bit coprocessor 0
registers, and lack so-called ``compatibility'' memory spaces allowing 32-bit
code to run with sign-extended addresses and registers.

The intrusive changes are covered by #ifdef CPU_R8000 stanzas. However,
trap() is split into a high-level wrapper and a new function, itsa(),
responsible for the actual trap servicing (which name couldn't be helped
because I'm an incorrigible punster). While an R8000 exception may cause
(via trap() ) multiple exceptions to be serviced, non-R8000 processors will
always service one exception in trap(), but they are nevertheless affected
by this code split.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.17 2012/09/29 19:02:25 miod Exp $ */
d291 2
a292 1
 * WEAK ALIAS: create a weak alias
d294 2
@


1.17
log
@Introduce assembly macros for specific processor hazards: tlb update, status
register update, status register update causing a change to the interrupt
enable flag, and a few other arcane ones. <mips64/asm.h> will provide
(supposedly sane) defaults, and <machine/asm.h> may override these with
better tuned versions.

Use these macros instead of random strings of nop in the various .S files
requiring hazard workarounds.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.16 2012/09/29 18:56:23 miod Exp $ */
d177 16
d199 1
d348 16
@


1.16
log
@Provide a few more macros in <machine/asm.h> to wrap coprocessor 0
move from/to register instructions, as well as a NOP macro. These will be
used in a later diff to allow specific processors to use slightly different
instructions or encodings.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.15 2012/06/23 21:53:38 miod Exp $ */
a32 11
/*
 * Due to a flaw in RM7000 1.x processors a pipeline 'drain' is
 * required after some mtc0 instructions.
 * Ten nops in sequence does the trick.
 */
#ifdef CPU_RM7000
#define ITLBNOPFIX      nop;nop;nop;nop;nop;nop;nop;nop;nop;nop
#else
#define ITLBNOPFIX      nop;nop;nop;nop
#endif

d314 45
@


1.15
log
@Fix ITLBNOPFIX macro definition on RM7000-capable kernels, and use it
in cp0_set_config() for consistency.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.14 2011/03/23 16:54:36 pirofti Exp $ */
d187 7
@


1.14
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.13 2010/10/01 05:02:19 guenther Exp $ */
d33 7
a39 2
#ifdef NEED_OLD_RM7KFIX
#define ITLBNOPFIX      nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
@


1.13
log
@Provide a WEAK_ALIAS macro in <machine/asm.h> for the few platforms
that didn't already have one, and then immediately use it in libc's
SYS.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.12 2010/09/11 11:29:49 syuu Exp $ */
d28 2
a29 2
#ifndef _MIPS64_ASM_H
#define _MIPS64_ASM_H
d314 1
a314 1
#endif /* !_MIPS_ASM_H */
@


1.12
log
@move machine dependent GET_CPU_INFO(), getcurcpu(), setcurcpu() to arch/sgi. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.11 2010/04/28 16:20:28 syuu Exp $ */
d271 7
@


1.11
log
@Storeing current cpu_info address into LLAddr register, for curcpu().
Instead of previous implementation, we won't use physical cpuid to fetch curcpu().
This requires to implement IP27/35 SMP.
Implemented getcurcpu() and setcurcpu() for it, smp_malloc() renamed alloc_contiguous_pages() because now it only allocate by page.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.10 2010/01/09 23:34:29 miod Exp $ */
d301 1
a301 4
#define GET_CPU_INFO(ci, tmp)		\
	LOAD_XKPHYS(ci, CCA_CACHED);	\
	mfc0	tmp, COP_0_LLADDR;	\
	or	ci, ci, tmp
@


1.10
log
@Move cache information from global variables to per-cpu_info fields; this
allows processors with different cache sizes to be used.

Cache management routines now take a struct cpu_info * as first parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.9 2009/12/11 05:10:17 miod Exp $ */
d302 3
a304 5
	HW_CPU_NUMBER(tmp);		\
	PTR_SLL	 tmp, tmp, LOGREGSZ;	\
	LA	 ci, cpu_info;		\
	PTR_ADDU ci, ci, tmp;		\
	PTR_L	 ci, 0(ci)
@


1.9
log
@More changes to avoid truncating 64 bit pointers to 32 bits and sign-extending
them; allows userland with stack beyond 2GB to run.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.8 2009/09/30 06:22:00 syuu Exp $ */
d295 4
@


1.8
log
@curproc, curprocpaddr moved into cpu_info
OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.7 2004/10/20 12:49:15 pefo Exp $ */
d188 1
a188 1
	PTR_SUBU sp, sp, 32;	\
d190 2
a191 2
	sw	ra, 28(sp);	\
	sw	gp, 24(sp);	\
d196 3
a198 3
	PTR_SUBU sp, sp, 8;	\
	lw	ra, 28(sp);	\
	PTR_ADDU sp, sp, 32;	\
d282 1
a282 1
	la	a0, 9f; \
@


1.7
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.6 2004/09/27 20:39:27 pefo Exp $ */
d295 12
@


1.6
log
@R5K seems to have bugs/hazards
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.5 2004/09/27 19:16:06 pefo Exp $ */
d188 1
a188 1
	subu	sp, sp, 32;	\
d196 1
a196 1
	subu	sp, sp, 8;	\
d198 1
a198 1
	addu	sp, sp, 32;	\
@


1.5
log
@move ITLBNOPFIX to asm.h and make it conditional
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.4 2004/09/09 22:21:41 pefo Exp $ */
d36 1
a36 1
#define ITLBNOPFIX      nop
@


1.4
log
@these should have gone in with the other 64 bit changes
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.3 2004/08/10 21:10:56 pefo Exp $ */
d32 6
@


1.3
log
@copyrigths
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.2 2004/08/10 20:28:13 deraadt Exp $ */
d100 2
d109 4
d115 2
a122 2
#endif

d124 1
d126 1
a126 1
#define	FRAMESZ(sz)	(((sz) + (ALIGNSZ-1)) & ~(ALIGNSZ-1))
a138 1
#define	_MIPS_SZPTR	32
a148 1
#define	_MIPS_SZPTR	64
d151 1
a151 1
#if (_MIPS_SZPTR == 32)
d163 1
a163 3
#endif

#if (_MIPS_SZPTR == 64)
d200 1
a200 1
 * LEAF(x)
d204 1
a204 1
#define LEAF(x)			\
d209 1
a209 1
	.frame sp, 0, ra;	\
d222 1
a222 1
#define NLEAF(x)		\
d227 1
a227 1
	.frame sp, 0, ra;	\
d270 1
a270 1
	la	a0, 9f; \
@


1.2
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: asm.h,v 1.1 2004/08/06 20:56:01 pefo Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 * 
d57 1
a57 1
 * Define how to access unaligned data word 
d184 1
a184 1
	subu 	sp, sp, 32;	\
@

