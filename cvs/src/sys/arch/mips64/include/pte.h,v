head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.2
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.18.0.10
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2016.10.09.03.29.53;	author visa;	state Exp;
branches;
next	1.20;
commitid	HcDKS730rZxXRveu;

1.20
date	2016.09.06.13.41.29;	author visa;	state Exp;
branches;
next	1.19;
commitid	YLWh6Z5nXoTUOOVU;

1.19
date	2016.08.14.08.23.52;	author visa;	state Exp;
branches;
next	1.18;
commitid	at8t1tG4p7ou4Cj7;

1.18
date	2014.03.22.00.00.38;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2014.02.08.09.34.04;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.25.19.57.41;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2012.09.29.21.37.03;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.29.19.11.08;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.24.20.01.59;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.04.24.20.00.59;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.09.20.20.31;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.07.19.05.57;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.07.18.58.32;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.18.20.58.50;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.07.22.30.05;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.18.04.32.09;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.27.18.15.55;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.27.18.14.11;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.07.07.29.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.20.20.03.18;	author miod;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Do not use MIPS64r2 instructions on Loongson 2. Now, a generic loongson
kernel has to learn a new trick in order to use TLB RI/XI on 3A2000.
@
text
@/*	$OpenBSD: pte.h,v 1.20 2016/09/06 13:41:29 visa Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: Utah Hdr: pte.h 1.11 89/09/03
 *	from: @@(#)pte.h	8.1 (Berkeley) 6/10/93
 */

/*
 * R4000 and R8000 hardware page table entries
 */

#ifndef _LOCORE

/*
 * Structure defining a TLB entry data set.
 */
struct tlb_entry {
	u_int64_t	tlb_mask;
	u_int64_t	tlb_hi;
	u_int64_t	tlb_lo0;
	u_int64_t	tlb_lo1;
};

u_int	tlb_get_pid(void);
void	tlb_read(unsigned int, struct tlb_entry *);

#ifdef MIPS_PTE64
typedef u_int64_t pt_entry_t;
#else
typedef u_int32_t pt_entry_t;
#endif

#endif /* _LOCORE */

#ifdef MIPS_PTE64
#define	PTE_BITS	64
#define	PTE_LOAD	ld
#define	PTE_LOG		3
#define	PTE_OFFS	8
#else
#define	PTE_BITS	32
#define	PTE_LOAD	lwu
#define	PTE_LOG		2
#define	PTE_OFFS	4
#endif

#if defined(CPU_MIPS64R2) && !defined(CPU_LOONGSON2)
#define	PTE_CLEAR_SWBITS(reg)						\
	.set	push;							\
	.set	mips64r2;						\
	/* Clear SW bits around PG_XI. */				\
	dins	reg, zero, (PTE_BITS - 1), 1;				\
	dins	reg, zero, PG_FRAMEBITS, (PTE_BITS - 2 - PG_FRAMEBITS);	\
	.set	pop
#else
#define	PTE_CLEAR_SWBITS(reg)						\
	/* Clear SW bits left of PG_FRAMEBITS. */			\
	dsll	reg, reg, (64 - PG_FRAMEBITS);				\
	dsrl	reg, reg, (64 - PG_FRAMEBITS)
#endif

/* entryhi values */

#ifndef CPU_R8000
#define	PG_HVPN		(-2 * PAGE_SIZE)	/* Hardware page number mask */
#define	PG_ODDPG	PAGE_SIZE
#endif	/* !R8000 */

/* Address space ID */
#ifdef CPU_R8000
#define	PG_ASID_MASK		0x0000000000000ff0
#define	PG_ASID_SHIFT		4
#define	ICACHE_ASID_SHIFT	40
#define	MIN_USER_ASID		0
#else
#define	PG_ASID_MASK		0x00000000000000ff
#define	PG_ASID_SHIFT		0
#define	MIN_USER_ASID		1
#endif
#define	PG_ASID_COUNT		256	/* Number of available ASID */

/* entrylo values */

#ifdef CPU_R8000
#define	PG_FRAME	0xfffff000
#define	PG_SHIFT	0
#else
#ifdef MIPS_PTE64
#define	PG_FRAMEBITS	61
#else
#define	PG_FRAMEBITS	29
#endif
#define	PG_FRAME	((1ULL << PG_FRAMEBITS) - (1ULL << PG_SHIFT))
#define	PG_SHIFT	6
#endif

/* software pte bits - not put in entrylo */
#if defined(CPU_R8000)
#define	PG_WIRED	0x00000010
#define	PG_RO		0x00000020
#elif defined(CPU_R4000)
#define	PG_WIRED	(1ULL << (PG_FRAMEBITS + 2))
#define	PG_RO		(1ULL << (PG_FRAMEBITS + 1))
#define	PG_SP		(1ULL << (PG_FRAMEBITS + 0))	/* ``special'' bit */
#else
#define	PG_WIRED	(1ULL << (PG_FRAMEBITS + 2))
			/* 1ULL << (PG_FRAMEBITS + 1) is PG_XI. */
#define	PG_RO		(1ULL << (PG_FRAMEBITS + 0))
#endif

#ifdef CPU_MIPS64R2
#define	PG_XI		(1ULL << (PTE_BITS - 2))
#else
#define	PG_XI		0x00000000
#endif

#define	PG_NV		0x00000000
#ifdef CPU_R8000
#define	PG_G		0x00000000	/* no such concept for R8000 */
#define	PG_V		0x00000080
#define	PG_M		0x00000100
#define	PG_CCA_SHIFT	9
#else
#define	PG_G		0x00000001
#define	PG_V		0x00000002
#define	PG_M		0x00000004
#define	PG_CCA_SHIFT	3
#endif
#define	PG_NV		0x00000000

#define	PG_UNCACHED	(CCA_NC << PG_CCA_SHIFT)
#define	PG_CACHED_NC	(CCA_NONCOHERENT << PG_CCA_SHIFT)
#define	PG_CACHED_CE	(CCA_COHERENT_EXCL << PG_CCA_SHIFT)
#define	PG_CACHED_CEW	(CCA_COHERENT_EXCLWRITE << PG_CCA_SHIFT)
#define	PG_CACHED	(CCA_CACHED << PG_CCA_SHIFT)
#define	PG_CACHEMODE	(7 << PG_CCA_SHIFT)

#define	PG_ATTR		(PG_CACHEMODE | PG_M | PG_V | PG_G)
#define	PG_ROPAGE	(PG_V | PG_RO | PG_CACHED) /* Write protected */
#define	PG_RWPAGE	(PG_V | PG_M | PG_CACHED)  /* Not w-prot not clean */
#define	PG_CWPAGE	(PG_V | PG_CACHED)	   /* Not w-prot but clean */
#define	PG_IOPAGE	(PG_G | PG_V | PG_M | PG_UNCACHED)

#define	pfn_to_pad(pa)	((((paddr_t)pa) & PG_FRAME) << PG_SHIFT)
#define	vad_to_pfn(va)	(((va) >> PG_SHIFT) & PG_FRAME)

#ifndef CPU_R8000
#define	PG_SIZE_4K	0x00000000
#define	PG_SIZE_16K	0x00006000
#define	PG_SIZE_64K	0x0001e000
#define	PG_SIZE_256K	0x0007e000
#define	PG_SIZE_1M	0x001fe000
#define	PG_SIZE_4M	0x007fe000
#define	PG_SIZE_16M	0x01ffe000
#if PAGE_SHIFT == 12
#define	TLB_PAGE_MASK	PG_SIZE_4K
#elif PAGE_SHIFT == 14
#define	TLB_PAGE_MASK	PG_SIZE_16K
#endif
#endif	/* !R8000 */
@


1.20
log
@Define PTE_* macros in one place. Use the lwu instruction for 32-bit PTE
loads on all systems as the TLB code does not need sign extension.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.19 2016/08/14 08:23:52 visa Exp $	*/
d79 1
a79 1
#ifdef CPU_MIPS64R2
@


1.19
log
@Utilize the TLB Execute-Inhibit bit with non-executable mappings on CPUs
that support the Execute-Inhibit exception. This makes user space W^X
effective on Octeon Plus and later Octeon versions.

Feedback from miod@@, thanks!
No objection from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.18 2014/03/22 00:00:38 miod Exp $	*/
d69 3
d74 3
@


1.18
log
@Shuffle tlblo-related defines, to better show which bits are software only,
and which bits end up in the actual tlb registers.

On non-R8000 kernels, shrink the actual physical address bits to add a new
software bit, PG_SP (for `special'), which will be used shortly. This halves
the physical memory addressable by non-MIPS_PTE64 kernels, which should not
be a problem anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.17 2014/02/08 09:34:04 miod Exp $	*/
d67 21
d124 1
a124 1
#ifdef CPU_R8000
d127 1
a127 1
#else
d131 10
@


1.17
log
@Allow page table entries to be either 32 bits wide (the existing state of the
code), or 64 bits wide, if option MIPS_PTE64.
64-bit ptes allow for physical memory beyond 16GB (34 bits) to be addressable
by the pmap code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.16 2013/03/25 19:57:41 deraadt Exp $	*/
d68 1
d88 25
a113 2
#define	PG_WIRED	0x00000010	/* SW */
#define PG_RO		0x00000020	/* SW */
d119 1
a119 8
#ifdef MIPS_PTE64
#define	PG_WIRED	0x8000000000000000ULL	/* SW */
#define PG_RO		0x4000000000000000ULL	/* SW */
#else
#define	PG_WIRED	0x80000000	/* SW */
#define PG_RO		0x40000000	/* SW */
#endif
#define	PG_G		0x00000001	/* HW */
a138 14
#ifdef CPU_R8000
#define	PG_FRAME	0xfffff000
#define PG_SHIFT	0
#else
#ifdef MIPS_PTE64
#define	PG_FRAME	0x3fffffffffffffc0ULL
#define	PG_FRAMEBITS	62
#else
#define	PG_FRAME	0x3fffffc0
#define	PG_FRAMEBITS	30
#endif
#define PG_SHIFT	6
#endif

d140 1
a140 1
#define vad_to_pfn(va)	(((va) >> PG_SHIFT) & PG_FRAME)
@


1.16
log
@PGSHIFT -> PAGE_SHIFT
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.15 2012/09/29 21:37:03 miod Exp $	*/
d59 5
a63 2
typedef u_int32_t pt_entry_t;	/* Mips page table entry */
#define	NPTEPG		(PMAP_L2SIZE / sizeof(pt_entry_t))
d95 4
d101 1
d126 4
d132 1
a152 12

#if defined(_KERNEL) && !defined(_LOCORE)

/* Kernel virtual address to page table entry */
#define	kvtopte(va) \
	(Sysmap + (((vaddr_t)(va) - VM_MIN_KERNEL_ADDRESS) >> PAGE_SHIFT))
/* User virtual address to pte page entry */
#define uvtopte(adr)	(((adr) >> PAGE_SHIFT) & (NPTEPG -1))

extern	pt_entry_t *Sysmap;		/* kernel pte table */
extern	u_int Sysmapsize;		/* number of pte's in Sysmap */
#endif
@


1.15
log
@Basic R8000 processor support. R8000 processors require MMU-specific code,
exception-specific code, clock-specific code, and L1 cache-specific code. L2
cache is per-design, of which only two exist: SGI Power Indigo2 (IP26) and SGI
Power Challenge (IP21) and are not covered by this commit.

R8000 processors also are 64-bit only processors with 64-bit coprocessor 0
registers, and lack so-called ``compatibility'' memory spaces allowing 32-bit
code to run with sign-extended addresses and registers.

The intrusive changes are covered by #ifdef CPU_R8000 stanzas. However,
trap() is split into a high-level wrapper and a new function, itsa(),
responsible for the actual trap servicing (which name couldn't be helped
because I'm an incorrigible punster). While an R8000 exception may cause
(via trap() ) multiple exceptions to be serviced, non-R8000 processors will
always service one exception in trap(), but they are nevertheless affected
by this code split.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.14 2012/09/29 19:11:08 miod Exp $	*/
d145 1
a145 1
	(Sysmap + (((vaddr_t)(va) - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT))
d147 1
a147 1
#define uvtopte(adr)	(((adr) >> PGSHIFT) & (NPTEPG -1))
@


1.14
log
@Kill the mostly unused VMTLB_xxx and VMNUM_xxx defines. Move all tlb
knowledge to <machine/pte.h>. Add specific routines for tlb handling setup
(at cpu initialization time) and tlb ASID wrap.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.13 2012/04/24 20:01:59 miod Exp $	*/
d41 1
a41 1
 * R4000 hardware page table entries
d65 1
d68 1
d71 6
d80 1
d84 8
d98 1
d114 4
d121 1
d126 1
d139 1
@


1.13
log
@Add support for wired mappings, using the last unused bit in the PTE.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.12 2012/04/24 20:00:59 miod Exp $	*/
d41 1
a41 1
 * R4000 hardware page table entry
d47 1
a47 1
 * Structure defining an tlb entry data set.
a48 1

d56 3
d65 9
a73 10
#if PAGE_SHIFT == 12
#define	PG_SVPN		0xfffffffffffff000	/* Software page no mask */
#define	PG_HVPN		0xffffffffffffe000	/* Hardware page no mask */
#define	PG_ODDPG	0x0000000000001000	/* Odd even pte entry */
#elif PAGE_SHIFT == 14
#define	PG_SVPN		0xffffffffffffc000	/* Software page no mask */
#define	PG_HVPN		0xffffffffffff8000	/* Hardware page no mask */
#define	PG_ODDPG	0x0000000000004000	/* Odd even pte entry */
#endif
#define	PG_ASID		0x00000000000000ff	/* Address space ID */
d79 2
d82 9
a90 8
#define	PG_M		0x00000004
#define	PG_UNCACHED	(CCA_NC << 3)
#define	PG_CACHED_NC	(CCA_NONCOHERENT << 3)
#define	PG_CACHED_CE	(CCA_COHERENT_EXCL << 3)
#define	PG_CACHED_CEW	(CCA_COHERENT_EXCLWRITE << 3)
#define	PG_CACHED	(CCA_CACHED << 3)
#define	PG_CACHEMODE	0x00000038
#define	PG_ATTR		0x0000003f
d95 1
a109 1

@


1.12
log
@Introduce a #define for the number of PFN bits in a pte, to be used in the
.S code when masking the upper bits, instead of hardcoding them. Makes code
easier to understand (and also I might have a need to reduce PFN width on
some particular CPU models in the future).
No change in generated code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.11 2011/04/09 20:20:31 deraadt Exp $	*/
d74 1
@


1.11
log
@repair a 32-bit truncation in paddr_t calculation, allowing my 8GB
o350 to boot once again
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.10 2009/12/07 19:05:57 miod Exp $	*/
d91 1
@


1.10
log
@Support for 16KB page size kernels; page size is now set in <machine/param.h>
rather than <mips64/param.h>.

For now, kernels are kept at 4KB to give people some time to build 16KB
compatible binaries; this will change before the end of this release cycle.

Use of 16KB page size kernels yields a 18% speedup (which, offset by the
1.6% slowdown caused by the pmap changes, yields a 16.6% overall speedup).
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.9 2009/12/07 18:58:32 miod Exp $	*/
d93 1
a93 1
#define	pfn_to_pad(pa)	(((pa) & PG_FRAME) << PG_SHIFT)
@


1.9
log
@Use a pool to manage pmap pte pages and top level segment table, instead of
directly allocating pages from uvm; this will allow us to eventually use
a different kernel page size without having to alter the pmap structures
layout.
No functional change; measured slowdown of 1.6% for 4KB page kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.8 2009/11/18 20:58:50 miod Exp $	*/
d63 1
d67 5
d103 6
@


1.8
log
@Stricter type usage (width and signedness); first step towards 64 bit ptes.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.7 2008/04/07 22:30:05 miod Exp $	*/
d58 1
@


1.7
log
@Define the pte cacheability bits from the cpu.h cache coherency constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.6 2007/10/18 04:32:09 miod Exp $	*/
d61 6
a67 5

#define	PG_SVPN		0xfffff000	/* Software page no mask */
#define	PG_HVPN		0xffffe000	/* Hardware page no mask */
#define	PG_ODDPG	0x00001000	/* Odd even pte entry */
#define	PG_ASID		0x000000ff	/* Address space ID */
a71 1
#define	PG_ATTR		0x0000003f
d76 1
d78 1
a78 1
#define	PG_CACHED	(CCA_CACHED << 3)
d86 2
a87 4
#define	pfn_to_pad(x)	(((vaddr_t)(x) & PG_FRAME) << PG_SHIFT)
#define vad_to_pfn(x)	(((vaddr_t)(x) >> PG_SHIFT) & PG_FRAME)
/* User virtual to pte page entry */
#define uvtopte(adr)	(((adr) >> PGSHIFT) & (NPTEPG -1))
d99 1
a99 3
/*
 * Kernel virtual address to page table entry and visa versa.
 */
d102 2
@


1.6
log
@Get rid of the silly union for mips pte. No functional change except
pmap.h now includes pte.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.5 2007/04/27 18:15:55 miod Exp $	*/
d72 4
a75 4
#define	PG_UNCACHED	0x00000010
#define	PG_CACHED_NC	0x00000018	/* Cached, non coherent */
#define	PG_CACHED_CE	0x00000020	/* Cached, coherent exclusive */
#define	PG_CACHED_CEW	0x00000028	/* Cached, coherent exclusive write */
d77 1
a77 5
#ifdef TGT_COHERENT
#define	PG_CACHED	PG_CACHED_CE
#else
#define	PG_CACHED	PG_CACHED_NC
#endif
@


1.5
log
@Remove unused macros, and make sure the remaining one do not truncate the
high 32 bits of addresses.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.4 2007/04/27 18:14:11 miod Exp $	*/
d57 2
a58 4
typedef union pt_entry {
	unsigned int	pt_entry;	/* for copying, etc. */
	unsigned int	pt_pte;		/* XXX void */
} pt_entry_t;	/* Mips page table entry */
a59 2

#define	PT_ENTRY_NULL	((pt_entry_t *) 0)
@


1.4
log
@More pmap changes from the potpourri pool:
- use wm_page pg_flags pmap-reserved flags to store attributes, instead of
  defining a vm_page_md field.
- use atomic operations to touch the above mentioned flags.
- never create ptes with PG_RO and PG_M set (this was harmless anyway).
- in pmap_clear_modify(), do not flush cache if the page was mapped uncached.

Tested on r5k, rm5200, r10k and r12k.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.3 2005/08/07 07:29:44 miod Exp $	*/
d92 3
a94 4
#define vad_to_pfn(x) (((unsigned)(x) >> PG_SHIFT) & PG_FRAME)
#define vad_to_pfn64(x) (((quad_t)(x) >> PG_SHIFT) & PG_FRAME)
#define vad_to_vpn(x) ((int)((unsigned)(x) & PG_SVPN))
#define vpn_to_vad(x) ((int)((x) & PG_SVPN))
d96 1
a96 1
#define uvtopte(adr) (((adr) >> PGSHIFT) & (NPTEPG -1))
a107 9
static __inline vaddr_t
pfn_to_pad(unsigned int pte)
{
	vaddr_t pa;

	pa = (long)(int)(((pte & PG_FRAME) << PG_SHIFT));
	return pa;
}

a112 2
#define	ptetokv(pte) \
	((((pt_entry_t *)(pte) - Sysmap) << PGSHIFT) + VM_MIN_KERNEL_ADDRESS)
@


1.3
log
@Remove advertising clause from UCB licenses; ok deraad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2 2004/10/20 12:49:15 pefo Exp $	*/
a91 1
#define pfn_is_ext(x) ((x) & 0x3c000000)
@


1.2
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.1 2004/09/20 20:03:18 miod Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@Move <machine/pte.h> to mips64 land.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.3 2004/09/16 07:25:26 miod Exp $	*/
d54 5
a58 5
struct tlb {
	int	tlb_mask;
	int	tlb_hi;
	int	tlb_lo0;
	int	tlb_lo1;
d81 3
a83 1
#define	PG_CACHED	0x00000018
d85 5
d91 2
a92 2
#define	PG_RWPAGE	(PG_V | PG_M | PG_CACHED)  /* Not wr-prot not clean */
#define	PG_CWPAGE	(PG_V | PG_CACHED)	   /* Not wr-prot but clean */
@

