head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.14
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.25.0.12
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.4
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.25
date	2015.02.06.22.11.49;	author miod;	state Exp;
branches;
next	1.24;
commitid	JwnQzE8aEa96SNS2;

1.24
date	2014.02.08.22.13.45;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2012.09.29.21.39.28;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2012.04.16.21.08.43;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2012.04.15.20.38.08;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2012.04.06.19.00.49;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2012.03.28.20.44.23;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2011.06.05.20.58.46;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.12.12.27.06;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.23.21.29.05;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.07.13.36.47;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.03.12.25.09;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.07.18.56.27;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.09.18.08.57;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.19.12.52.31;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.18.19.48.35;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.02.18.19.43.27;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.14.10.13.17;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.26.17.02.38;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.20.12.49.15;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.22.21.41;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.15.10.36.17;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.20.28.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.09.14.57.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.08.21.51.36;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Add __attribute__((__format__(__kprintf__))) to bios_printf()
@
text
@/*	$OpenBSD: arcbios.h,v 1.24 2014/02/08 22:13:45 miod Exp $	*/
/*-
 * Copyright (c) 1996 M. Warner Losh.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

typedef struct arc_sid
{
	char vendor[8];
	char prodid[8];
} arc_sid_t;

typedef enum arc_config_class
{
	arc_SystemClass,
	arc_ProcessorClass,
	arc_CacheClass,
#ifdef __sgi__
	arc_MemoryClass,
#endif
	arc_AdapterClass,
	arc_ControllerClass,
	arc_PeripheralClass,
#ifdef __arc__
	arc_MemoryClass
#endif
} arc_config_class_t;

typedef enum arc_config_type
{
	arc_System,

	arc_CentralProcessor,
	arc_FloatingPointProcessor,

	arc_PrimaryIcache,
	arc_PrimaryDcache,
	arc_SecondaryIcache,
	arc_SecondaryDcache,
	arc_SecondaryCache,

#ifdef __sgi__
	arc_SystemMemory,
#endif

	arc_EisaAdapter,		/* Eisa adapter         */
	arc_TcAdapter,			/* Turbochannel adapter */
	arc_ScsiAdapter,		/* SCSI adapter         */
	arc_DtiAdapter,			/* AccessBus adapter    */
	arc_MultiFunctionAdapter,

	arc_DiskController,
	arc_TapeController,
	arc_CdromController,
	arc_WormController,
	arc_SerialController,
	arc_NetworkController,
	arc_DisplayController,
	arc_ParallelController,
	arc_PointerController,
	arc_KeyboardController,
	arc_AudioController,
	arc_OtherController,		/* denotes a controller not otherwise defined */

	arc_DiskPeripheral,
	arc_FloppyDiskPeripheral,
	arc_TapePeripheral,
	arc_ModemPeripheral,
	arc_MonitorPeripheral,
	arc_PrinterPeripheral,
	arc_PointerPeripheral,
	arc_KeyboardPeripheral,
	arc_TerminalPeripheral,
#ifdef __arc__
	arc_OtherPeripheral,		/* denotes a peripheral not otherwise defined   */
#endif
	arc_LinePeripheral,
	arc_NetworkPeripheral,
#ifdef __arc__
	arc_SystemMemory,
#endif
#ifdef __sgi__
	arc_OtherPeripheral,		/* denotes a peripheral not otherwise defined   */
#endif
} arc_config_type_t;

typedef u_int32_t arc_dev_flags_t;

#define	ARCBIOS_DEVFLAGS_FAILED		0x01
#define	ARCBIOS_DEVFLAGS_READONLY	0x02
#define	ARCBIOS_DEVFLAGS_REMOVABLE	0x04
#define	ARCBIOS_DEVFLAGS_CONSOLE_INPUT	0x08
#define	ARCBIOS_DEVFLAGS_CONSOLE_OUTPUT	0x10
#define	ARCBIOS_DEVFLAGS_INPUT		0x20
#define	ARCBIOS_DEVFLAGS_OUTPUT		0x40

typedef struct arc_config
{
	arc_config_class_t	class;
	arc_config_type_t	type;
	arc_dev_flags_t		flags;
	u_int16_t		version;
	u_int16_t		revision;
	u_int32_t		key;
	u_int32_t		affinity_mask;
	u_int32_t		config_data_len;
	u_int32_t		id_len;
	int32_t			id;
} arc_config_t;

typedef struct arc_config64
{
	arc_config_class_t	class;
	arc_config_type_t	type;
	arc_dev_flags_t		flags;
	u_int16_t		version;
	u_int16_t		revision;
	u_int64_t		key;
	u_int64_t		affinity_mask;
	u_int64_t		config_data_len;
	u_int64_t		id_len;
	int64_t			id;
} arc_config64_t;

typedef enum arc_status
{
	arc_ESUCCESS,			/* Success                   */
	arc_E2BIG,			/* Arg list too long         */
	arc_EACCES,			/* No such file or directory */
	arc_EAGAIN,			/* Try again                 */
	arc_EBADF,			/* Bad file number           */
	arc_EBUSY,			/* Device or resource busy   */
	arc_EFAULT,			/* Bad address               */
	arc_EINVAL,			/* Invalid argument          */
	arc_EIO,			/* I/O error                 */
	arc_EISDIR,			/* Is a directory            */
	arc_EMFILE,			/* Too many open files       */
	arc_EMLINK,			/* Too many links            */
	arc_ENAMETOOLONG,		/* File name too long        */
	arc_ENODEV,			/* No such device            */
	arc_ENOENT,			/* No such file or directory */
	arc_ENOEXEC,			/* Exec format error         */
	arc_ENOMEM,			/* Out of memory             */
	arc_ENOSPC,			/* No space left on device   */
	arc_ENOTDIR,			/* Not a directory           */
	arc_ENOTTY,			/* Not a typewriter          */
	arc_ENXIO,			/* No such device or address */
	arc_EROFS,			/* Read-only file system     */
} arc_status_t;

/*
 *	Oops! Arc systems and SGI's have different order of types.
 */
#ifdef __arc__
typedef enum {
	ExceptionBlock,		SystemParameterBlock,	FreeMemory,
	BadMemory,		LoadedProgram,		FirmwareTemporary,
	FirmwarePermanent,	FreeContigous
} MEMORYTYPE;
#endif

#ifdef __sgi__
typedef enum {
	ExceptionBlock,		SystemParameterBlock,	FreeContigous,
	FreeMemory,		BadMemory,		LoadedProgram,
	FirmwareTemporary,	FirmwarePermanent,
} MEMORYTYPE;
#endif

typedef struct arc_mem {
	MEMORYTYPE	Type;		/* Memory chunk type */
	u_int32_t	BasePage;	/* Page no, first page */
	u_int32_t	PageCount;	/* Number of pages */
} arc_mem_t;

typedef struct arc_mem64 {
	MEMORYTYPE	Type;		/* Memory chunk type */
	u_int64_t	BasePage;	/* Page no, first page */
	u_int64_t	PageCount;	/* Number of pages */
} arc_mem64_t;

typedef struct arc_time {
	u_int16_t	Year;
	u_int16_t	Month;
	u_int16_t	Day;
	u_int16_t	Hour;
	u_int16_t	Minutes;
	u_int16_t	Seconds;
	u_int16_t	Milliseconds;
} arc_time_t;

typedef struct arc_dsp_stat {
	u_int16_t	CursorXPosition;
	u_int16_t	CursorYPosition;
	u_int16_t	CursorMaxXPosition;
	u_int16_t	CursorMaxYPosition;
	u_char		ForegroundColor;
	u_char		BackgroundColor;
	u_char		HighIntensity;
	u_char		Underscored;
	u_char		ReverseVideo;
} arc_dsp_stat_t;

typedef caddr_t arc_dirent_t; /* XXX */
typedef u_int32_t arc_open_mode_t; /* XXX */
typedef u_int32_t arc_seek_mode_t; /* XXX */
typedef u_int32_t arc_mount_t; /* XXX */

typedef struct arc_quad {
#ifdef __MIPSEB__
	long	hi;
	u_long	lo;
#else
	u_long	lo;
	long	hi;
#endif
} arc_quad_t;

typedef struct arc_calls
{
	arc_status_t (*load)(		/* Load 1 */
		char *,			/* Image to load */
		u_long,			/* top address */
		u_long *,		/* Entry address */
		u_long *);		/* Low address */

	arc_status_t (*invoke)(		/* Invoke 2 */
		u_long,			/* Entry Address */
		u_long,			/* Stack Address */
		u_long,			/* Argc */
		char **,		/* argv */
		char **);		/* envp */

	arc_status_t (*execute)(	/* Execute 3 */
		char *,			/* Image path */
		u_long,			/* Argc */
		char **,		/* argv */
		char **);		/* envp */

	__dead void (*halt)(void);	/* Halt 4 */

	__dead void (*power_down)(void); /* PowerDown 5 */

	__dead void (*restart)(void);	/* Restart 6 */

	__dead void (*reboot)(void);	/* Reboot 7 */

	__dead void (*enter_interactive_mode)(void); /* EnterInteractiveMode 8 */

	__dead void (*return_from_main)(void); /* ReturnFromMain 9 */

	arc_config_t *(*get_peer)(	/* GetPeer 10 */
		arc_config_t *);	/* Component */

	arc_config_t *(*get_child)(	/* GetChild 11 */
		arc_config_t *);	/* Component */

	arc_config_t *(*get_parent)(	/* GetParent 12 */
		arc_config_t *);	/* Component */

	arc_status_t (*get_config_data)( /* GetConfigurationData 13 */
		caddr_t,		/* Configuration Data */
		arc_config_t *);	/* Component */

	arc_config_t *(*add_child)(	/* AddChild 14 */
		arc_config_t *,		/* Component */
		arc_config_t *);	/* New Component */

	arc_status_t (*delete_component)( /* DeleteComponent 15 */
		arc_config_t *);	/* Component */

	arc_config_t *(*get_component)( /* GetComponent 16 */
		char *);		/* Path */

	arc_status_t (*save_config)(void); /* SaveConfiguration 17 */

	arc_sid_t *(*get_system_id)(void); /* GetSystemId 18 */

	arc_mem_t *(*get_memory_descriptor)( /* GetMemoryDescriptor 19 */
		arc_mem_t *);		/* MemoryDescriptor */

#ifdef __arc__
	void (*signal)(			/* Signal 20 */
		u_int32_t,		/* Signal number */
/**/		caddr_t);		/* Handler */
#else
	void *unused;
#endif

	arc_time_t *(*get_time)(void);	/* GetTime 21 */

	u_long (*get_relative_time)(void); /* GetRelativeTime 22 */

	arc_status_t (*get_dir_entry)(	/* GetDirectoryEntry 23 */
		u_long,			/* FileId */
		arc_dirent_t *,		/* Directory entry */
		u_long,			/* Length */
		u_long *);		/* Count */

	arc_status_t (*open)(		/* Open 24 */
		char *,			/* Path */
		arc_open_mode_t,	/* Open mode */
		u_long *);		/* FileId */

	arc_status_t (*close)(		/* Close 25 */
		u_long);		/* FileId */

	arc_status_t (*read)(		/* Read 26 */
		u_long,			/* FileId */
		caddr_t,		/* Buffer */
		u_long,			/* Length */
		u_long *);		/* Count */

	arc_status_t (*get_read_status)( /* GetReadStatus 27 */
		u_long);		/* FileId */

	arc_status_t (*write)(		/* Write 28 */
		u_long,			/* FileId */
		caddr_t,		/* Buffer */
		u_long,			/* Length */
		u_long *);		/* Count */

	arc_status_t (*seek)(		/* Seek 29 */
		u_long,			/* FileId */
		arc_quad_t *,		/* Offset */
		arc_seek_mode_t);	/* Mode */

	arc_status_t (*mount)(		/* Mount 30 */
		char *,			/* Path */
		arc_mount_t);		/* Operation */

	char *(*getenv)(			/* GetEnvironmentVariable 31 */
		char *);		/* Variable */

	arc_status_t (*putenv)(		/* SetEnvironmentVariable 32 */
		char *,			/* Variable */
		char *);		/* Value */

	arc_status_t (*get_file_info)(void);	/* GetFileInformation 33 */

	arc_status_t (*set_file_info)(void);	/* SetFileInformation 34 */

	void (*flush_all_caches)(void);	/* FlushAllCaches 35 */

#ifdef __arc__
	arc_status_t (*test_unicode)(	/* TestUnicodeCharacter 36 */
		u_int32_t,		/* FileId */
		u_int16_t);		/* UnicodeCharacter */

	arc_dsp_stat_t *(*get_display_status)( /* GetDisplayStatus 37 */
		u_int32_t);		/* FileId */
#endif
} arc_calls_t;

#define ARC_PARAM_BLK_MAGIC	0x53435241
#define ARC_PARAM_BLK_MAGIC_BUG	0x41524353	/* This is wrong... but req */

typedef struct arc_param_blk_32
{
	u_int32_t	magic;		/* Magic Number */
	u_int32_t	length;		/* Length of parameter block */
	u_int16_t	version;	/* ?? */
	u_int16_t	revision;	/* ?? */
	int32_t		restart_block;	/* ?? */
	int32_t		debug_block;	/* Debugging info -- unused */
	int32_t		general_exp_vect; /* ?? */
	int32_t		tlb_miss_exp_vect; /* ?? */
	u_int32_t	firmware_length; /* Size of Firmware jumptable in bytes */
	int32_t		firmware_vect;	/* Firmware jumptable */
	int32_t		vendor_length;	/* Size of Vendor specific jumptable */
	u_int32_t	vendor_vect;	/* Vendor specific jumptable */
	u_int32_t	adapter_count;	/* ?? */
	u_int32_t	adapter0_type;	/* ?? */
	u_int32_t	adapter0_length; /* ?? */
	int32_t		adapter0_vect;	/* ?? */
} arc_param_blk_32_t;

typedef struct arc_param_blk_64
{
	u_int64_t	magic;		/* Magic Number */
	u_int64_t	length;		/* Length of parameter block */
	u_int16_t	version;	/* ?? */
	u_int16_t	revision;	/* ?? */
	int64_t		restart_block;	/* ?? */
	int64_t		debug_block;	/* Debugging info -- unused */
	int64_t		general_exp_vect; /* ?? */
	int64_t		tlb_miss_exp_vect; /* ?? */
	u_int64_t	firmware_length; /* Size of Firmware jumptable in bytes */
	int64_t		firmware_vect;	/* Firmware jumptable */
	u_int64_t	vendor_length;	/* Size of Vendor specific jumptable */
	int64_t		vendor_vect;	/* Vendor specific jumptable */
	u_int64_t	adapter_count;	/* ?? */
	u_int64_t	adapter0_type;	/* ?? */
	u_int64_t	adapter0_length; /* ?? */
	int64_t		adapter0_vect;	/* ?? */
} arc_param_blk_64_t;

#define	ARCBIOS_BASE	0x0000001000	/* physical */
extern void *bios_base;
#define	ArcBiosBase32	((arc_param_blk_32_t *)bios_base)
#define	ArcBiosBase64	((arc_param_blk_64_t *)bios_base)

#define	ARCBIOS_PAGE_SIZE	4096

extern int bios_is_32bit;
extern int bios_consrate;
extern char bios_enaddr[20];
extern char bios_console[30];
extern char bios_graphics[6];
extern char bios_keyboard[6];

extern void (*bios_halt)(void);
extern void (*bios_powerdown)(void);
extern void (*bios_restart)(void);
extern void (*bios_reboot)(void);
extern void (*bios_eim)(void);

int  bios_getchar(void);
void bios_putchar(char);
void bios_putstring(char *);
void bios_printf(const char *, ...)
    __attribute__((__format__(__kprintf__,1,2)));
void bios_ident(void);
void bios_display_info(int *, int *, int *, int *);

/*
 * Direct ARC-BIOS calls.
 */
long Bios_Load(char *, u_long, u_long, u_long *);
long Bios_Invoke(u_long, u_long, u_long, char **, char **);
long Bios_Execute(char *, u_long, char **, char **);
void Bios_Halt(void);
void Bios_PowerDown(void);
void Bios_Restart(void);
void Bios_Reboot(void);
void Bios_EnterInteractiveMode(void);
long Bios_GetPeer(void *);
arc_config_t *Bios_GetChild(void *);
long Bios_GetParent(void *);
long Bios_GetConfigurationData(void *, void *);
long Bios_AddChild(void *, void *);
long Bios_DeleteComponent(void *);
long Bios_GetComponent(char *);
long Bios_SaveConfiguration(void);
arc_sid_t *Bios_GetSystemId(void);
arc_mem_t *Bios_GetMemoryDescriptor(void *);
arc_time_t *Bios_GetTime(void);
long Bios_GetRelativeTime(void);
long Bios_GetDirectoryEntry(u_long, void *, u_long, u_long *);
long Bios_Open(char *, int, long *);
long Bios_Close(long);
long Bios_Read(long, char *, long, long *);
long Bios_GetReadStatus(u_long);
long Bios_Write(long, char *, long, long *);
long Bios_Seek(long, arc_quad_t *, int);
long Bios_Mount(char *, void *);
char *Bios_GetEnvironmentVariable(const char *);
long Bios_SetEnvironmentVariable(char *, char *);
long Bios_GetFileInformation(u_long, u_long, u_long);
long Bios_SetFileInformation(u_long, u_long, u_long);
void Bios_FlushAllCaches(void);
long Bios_TestUnicodeCharacter(u_long, u_int16_t);
arc_dsp_stat_t *Bios_GetDisplayStatus(u_long);
@


1.24
log
@Replace ARC_Call2(), used to invoke the `return-to-PROM' routines with a
PROM-compatible stack, with a sligthly different ARC_Call_Via_Pointer(),
which uses a global function pointer variable instead of computing the
address from the ARCBios parameter block; said variable being set in
bios_ident().

No functional change... yet. Tested on IP22(24), IP30 and IP32.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.23 2012/09/29 21:39:28 miod Exp $	*/
d446 2
a447 1
void bios_printf(const char *, ...);
@


1.23
log
@Do not hardcode ARCBios vector base, but rather compute it at runtime.
This allows MI code to support both 32-bit ARCS systems, as well as 64-bit
R8000 and R1x000 systems.

While there, #if 0 out ARCBios routines currently not used by the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.22 2012/04/16 21:08:43 miod Exp $	*/
d389 4
a392 4
	u_int32_t	restart_block;	/* ?? */
	u_int32_t	debug_block;	/* Debugging info -- unused */
	u_int32_t	general_exp_vect; /* ?? */
	u_int32_t	tlb_miss_exp_vect; /* ?? */
d394 2
a395 2
	u_int32_t	firmware_vect;	/* Firmware jumptable */
	u_int32_t	vendor_length;	/* Size of Vendor specific jumptable */
d400 1
a400 1
	u_int32_t	adapter0_vect;	/* ?? */
d409 4
a412 4
	u_int64_t	restart_block;	/* ?? */
	u_int64_t	debug_block;	/* Debugging info -- unused */
	u_int64_t	general_exp_vect; /* ?? */
	u_int64_t	tlb_miss_exp_vect; /* ?? */
d414 1
a414 1
	u_int64_t	firmware_vect;	/* Firmware jumptable */
d416 1
a416 1
	u_int64_t	vendor_vect;	/* Vendor specific jumptable */
d420 1
a420 1
	u_int64_t	adapter0_vect;	/* ?? */
d436 6
@


1.22
log
@Fix struct arc_param_blk_* layout to not embed pointers, as this messes the
layout in 64-bit mode. Found the hard way, of course.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.21 2012/04/15 20:38:08 miod Exp $	*/
d423 4
a426 7
#ifdef __LP64__
#define ArcBiosBase32	((arc_param_blk_32_t *)0xffffffff80001000)
#define ArcBiosBase64	((arc_param_blk_64_t *)0xffffffff80001000)
#else
#define ArcBiosBase32	((arc_param_blk_32_t *)0x80001000)
#define ArcBiosBase64	((arc_param_blk_64_t *)0x80001000)
#endif
@


1.21
log
@Tell Indy and Challenge S apart.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.20 2012/04/06 19:00:49 miod Exp $	*/
d394 1
a394 1
	u_int32_t	*firmware_vect;	/* Firmware jumptable */
d414 1
a414 1
	u_int64_t	*firmware_vect;	/* Firmware jumptable */
d424 2
a425 2
#define ArcBiosBase32	((arc_param_blk_32_t *) 0xffffffff80001000)
#define ArcBiosBase64	((arc_param_blk_64_t *) 0xffffffff80001000)
d427 2
a428 2
#define ArcBiosBase32	((arc_param_blk_32_t *) 0x80001000)
#define ArcBiosBase64	((arc_param_blk_64_t *) 0x80001000)
a429 1
#define ArcBios (ArcBiosBase->firmware_vect)
@


1.20
log
@Rework IP22 RTC year base computation, again. It turns out that different
Indy PROM versions use different year bases - after all, using 1970 instead
of the previously used value of 1940 smelled like a bug, and probably was,
so this eventually got fixed in later PROM versions.

Instead of hardcoding a year base depending upon the system, we will now ask
ARCBios for its current year, and compare it to what can be read from the RTC
registers to figure out what year base is in use by the PROM.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.19 2012/03/28 20:44:23 miod Exp $	*/
d43 3
d49 1
d51 1
@


1.19
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.18 2011/06/05 20:58:46 miod Exp $	*/
d202 9
a210 1
typedef caddr_t arc_time_t; /* XXX */
d464 1
a464 1
long Bios_GetTime(void);
a480 1

@


1.18
log
@Prefer __LP64__ to _LP64; pointed out by brad
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.17 2010/09/12 12:27:06 kettenis Exp $	*/
d422 1
@


1.17
log
@Use __dead instead of volatile to mark functions that don't return.  Makes
it possible to compile sgi kernels with gcc4.

ok miod@@ (who pointed out what volatile was used for in this case)
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.16 2010/05/23 21:29:05 deraadt Exp $	*/
d410 1
a410 1
#ifdef _LP64
@


1.16
log
@#ifdef arc is just too common, but I don't know how to extract this correctly
so make that __arc__ for now, to avoid collisions
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.15 2010/03/07 13:36:47 miod Exp $	*/
d252 1
a252 1
	volatile void (*halt)(void);	/* Halt 4 */
d254 1
a254 1
	volatile void (*power_down)(void); /* PowerDown 5 */
d256 1
a256 1
	volatile void (*restart)(void);	/* Restart 6 */
d258 1
a258 1
	volatile void (*reboot)(void);	/* Reboot 7 */
d260 1
a260 1
	volatile void (*enter_interactive_mode)(void); /* EnterInteractiveMode 8 */
d262 1
a262 1
	volatile void (*return_from_main)(void); /* ReturnFromMain 9 */
@


1.15
log
@Correct layout of arc_config{,64} and order of items in enum arc_config_type.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.14 2010/03/03 12:25:09 jsing Exp $	*/
d294 1
a294 1
#ifdef arc
d357 1
a357 1
#ifdef arc
@


1.14
log
@Store ARCBios variables before machine specific setup is performed and
make console selection on a per machine basis. Whilst here store the
keyboard layout ('keybd') and graphics state ('gfx') variables for
future use.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.13 2009/12/07 18:56:27 miod Exp $	*/
d62 4
d94 1
d96 1
d99 7
d107 1
a107 2
	arc_SystemMemory
} arc_config_type_t;
d109 7
a115 1
typedef u_char arc_dev_flags_t;
a116 1
/* Wonder how this is aligned... */
d119 3
a121 3
	arc_config_class_t	class;		/* Likely these three all */
	arc_config_type_t	type;		/* need to be uchar to make */
	arc_dev_flags_t		flags;		/* the alignment right */
d133 3
a135 3
	arc_config_class_t	class;		/* Likely these three all */
	arc_config_type_t	type;		/* need to be uchar to make */
	arc_dev_flags_t		flags;		/* the alignment right */
@


1.13
log
@When converting ARCBios memory spaces from ARCBios page size to the kernel
page size, be sure to pick the strictest interval so as not to incorrectly
claim ARCBios reserved data not (kernel) page size aligned as free memory.

No functional change since the kernel uses the same page size as ARCBios
(at the moment).
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.12 2009/05/09 18:08:57 miod Exp $	*/
d406 3
a408 1
extern char bios_console[10];
@


1.12
log
@Promote types in ARCBios function prototypes from int to long whenever
necessary, to allow the same C code to be used against 32 bit ARCBios, when
compiled in 32 bit mode, or against 64 bit ARCBios, when compiled in native
mode.

Soon to be used by the boot blocks; this commit doesn't introduce any
functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.11 2009/04/19 12:52:31 miod Exp $	*/
d401 2
@


1.11
log
@Add heuristics to tell IP27 and IP35 apart, as they will need to be handled
differently at times.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.10 2008/02/18 19:48:35 miod Exp $	*/
d204 10
d218 3
a220 3
		u_int32_t,		/* top address */
		u_int32_t *,		/* Entry address */
		u_int32_t *);		/* Low address */
d223 3
a225 3
		u_int32_t,		/* Entry Address */
		u_int32_t,		/* Stack Address */
		u_int32_t,		/* Argc */
d231 1
a231 1
		u_int32_t,		/* Argc */
d287 1
a287 1
	u_int32_t (*get_relative_time)(void); /* GetRelativeTime 22 */
d290 1
a290 1
		u_int32_t,		/* FileId */
d292 2
a293 2
		u_int32_t,		/* Length */
		u_int32_t *);		/* Count */
d298 1
a298 1
		u_int32_t *);		/* FileId */
d301 1
a301 1
		u_int32_t);		/* FileId */
d304 1
a304 1
		u_int32_t,		/* FileId */
d306 2
a307 2
		u_int32_t,		/* Length */
		u_int32_t *);		/* Count */
d310 1
a310 1
		u_int32_t);		/* FileId */
d313 1
a313 1
		u_int32_t,		/* FileId */
d315 2
a316 2
		u_int32_t,		/* Length */
		u_int32_t *);		/* Count */
d319 2
a320 2
		u_int32_t,		/* FileId */
		int64_t *,		/* Offset */
d416 3
a418 3
int Bios_Load(char *, u_int32_t, u_int32_t, u_int32_t *);
int Bios_Invoke(uint32_t, uint32_t, uint32_t, char **, char **);
int Bios_Execute(char *, u_int32_t, char **, char **);
d424 1
a424 1
int Bios_GetPeer(void *);
d426 6
a431 6
int Bios_GetParent(void *);
int Bios_GetConfigurationData(void *, void *);
int Bios_AddChild(void *, void *);
int Bios_DeleteComponent(void *);
int Bios_GetComponent(char *);
int Bios_SaveConfiguration(void);
d434 10
a443 10
int Bios_GetTime(void);
int Bios_GetRelativeTime(void);
int Bios_GetDirectoryEntry(u_int32_t, void *, u_int32_t, u_int32_t *);
int Bios_Open(char *, int, u_int *);
int Bios_Close(u_int);
int Bios_Read(int, char *, int, int *);
int Bios_GetReadStatus(u_int);
int Bios_Write(int, char *, int, int *);
int Bios_Seek(int, int64_t *, int);
int Bios_Mount(char *, void *);
d445 3
a447 3
int Bios_SetEnvironmentVariable(char *, char *);
int Bios_GetFileInformation(u_int32_t, u_int32_t, u_int32_t);
int Bios_SetFileInformation(u_int32_t, u_int32_t, u_int32_t);
d449 2
a450 2
int Bios_TestUnicodeCharacter(u_int32_t, u_int16_t);
arc_dsp_stat_t *Bios_GetDisplayStatus(u_int32_t);
@


1.10
log
@Get correct memory information from 64 bit ARCBios, tested on Octane.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.9 2008/02/18 19:43:27 miod Exp $	*/
d159 1
a159 1
	ExeceptionBlock,	SystemParameterBlock,	FreeMemory,
d167 1
a167 1
	ExeceptionBlock,	SystemParameterBlock,	FreeContigous,
@


1.9
log
@More 64-bit ARCBios friendliness, correctly identify a 64 bit system, such
as the Octane; joint work with jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.8 2007/12/14 10:13:17 jsing Exp $	*/
d178 6
@


1.8
log
@Store the ARCBIOS ConsoleOut environment variable so that we can refer to
it later on.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.7 2007/04/26 17:02:38 miod Exp $	*/
d113 14
@


1.7
log
@Do not invoke arcbios routines from the moment our page tables are set up,
to the moment we reboot, for we do not know what it can do behind our back;
this means the built-in ethernet address has to be read from the arcbios
environment earlier.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.6 2004/10/20 12:49:15 pefo Exp $	*/
d374 1
d384 1
a384 1
 *  Direct ARC-Bios calls.
a420 1

@


1.6
log
@Fix some 64 bit address problems.
Some function names made more unique.
Other changes for the upcoming Origin 200 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.5 2004/09/09 22:21:41 pefo Exp $	*/
d373 1
@


1.5
log
@these should have gone in with the other 64 bit changes
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.4 2004/08/15 10:36:17 pefo Exp $	*/
d323 1
a323 1
typedef struct arc_param_blk
d329 4
a332 4
/**/	caddr_t		restart_block;	/* ?? */
/**/	caddr_t		debug_block;	/* Debugging info -- unused */
/**/	caddr_t		general_exp_vect; /* ?? */
/**/	caddr_t		tlb_miss_exp_vect; /* ?? */
d334 1
a334 1
	arc_calls_t	*firmware_vect;	/* Firmware jumptable */
d336 1
a336 1
/**/	caddr_t		vendor_vect;	/* Vendor specific jumptable */
d340 22
a361 2
/**/	caddr_t		adapter0_vect;	/* ?? */
} arc_param_blk_t;
d364 2
a365 1
#define ArcBiosBase ((arc_param_blk_t *) 0xffffffff80001000)
d367 2
a368 1
#define ArcBiosBase ((arc_param_blk_t *) 0x80001000)
d372 1
d374 1
a374 1
int  bios_getchar __P((void));
d377 1
@


1.4
log
@cleanup and more protos
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.3 2004/08/10 20:28:13 deraadt Exp $	*/
d111 1
a111 1
	char			*id;
d343 3
d347 1
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.2 2004/08/09 14:57:26 pefo Exp $	*/
d356 3
a358 3
int Bios_Load(void);
int Bios_Invoke(void);
int Bios_Execute(void);
d364 7
a370 7
int Bios_GetPeer(void);
arc_config_t *Bios_GetChild(arc_config_t *);
int Bios_GetParent(void);
int Bios_GetConfigurationData(void);
int Bios_AddChild(void);
int Bios_DeleteComponent(void);
int Bios_GetComponent(void);
d373 1
a373 1
arc_mem_t *Bios_GetMemoryDescriptor(arc_mem_t *);
d376 1
a376 1
int Bios_GetDirectoryEntry(void);
d380 1
a380 1
int Bios_GetReadStatus(void);
d382 2
a383 2
int Bios_Seek(void);
int Bios_Mount(void);
d385 3
a387 3
int Bios_SetEnvironmentVariable(void);
int Bios_GetFileInformation(void);
int Bios_SetFileInformation(void);
d389 2
a390 2
int Bios_TestUnicodeCharacter(void);
arc_dsp_stat_t *Bios_GetDisplayStatus(int);
@


1.2
log
@Big cleanup. Removed some unused obsolete stuff and fixed copyrights
on some files. Arcbios support is now in, thus detects memorysize and cpu
clock frequency.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.1 2004/08/08 21:51:36 pefo Exp $	*/
d111 1
a111 1
	char 			*id;
d218 1
a218 1
		arc_config_t *); 	/* Component */
d291 1
a291 1
		arc_seek_mode_t); 	/* Mode */
d323 1
a323 1
typedef struct arc_param_blk 
@


1.1
log
@Ahh! This code brings out old memories. Eight years old but still
useful. This is the ARCBIOS interface, eg the firmware interface
for SGI machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: arcbios.h,v 1.1 1998/01/29 15:06:22 pefo Exp $	*/
d359 5
a363 5
int Bios_Halt(void);
int Bios_PowerDown(void);
int Bios_Restart(void);
int Bios_Reboot(void);
int Bios_EnterInteractiveMode(void);
d384 1
a384 1
int Bios_GetEnvironmentVariable(void);
d388 1
a388 1
int Bios_FlushAllCaches(void);
@

