head	1.16;
access;
symbols
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2007.06.18.21.50.26;	author deraadt;	state dead;
branches;
next	1.15;

1.15
date	2007.06.17.15.05.08;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.17.00.27.27;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.07.02.55.12;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.20.23.47.43;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.18.20.09.39;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.17.23.42.37;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.03.01.37.22;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.07.23.47.37;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.03.20.00.22;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.26.23.11.31;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.19.01.52.19;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.11.21.15.35;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.20.06.57.02;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.23.14.24.56;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.01;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.16
log
@this is the sgi disklabel, mips64 is not the same
@
text
@/*	$OpenBSD: disklabel.h,v 1.15 2007/06/17 15:05:08 krw Exp $	*/

/*
 * Copyright (c) 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_DISKLABEL_H_
#define _MACHINE_DISKLABEL_H_

#define LABELSECTOR		1
#define LABELOFFSET		0
#define	MAXPARTITIONS		16		/* number of partitions */

/* SGI */
struct devparms {
        u_int8_t        dp_skew;
        u_int8_t        dp_gap1;
        u_int8_t        dp_gap2;
        u_int8_t        dp_spares_cyl;
        u_int16_t       dp_cyls;
        u_int16_t       dp_shd0;
        u_int16_t       dp_trks0;
        u_int8_t        dp_ctq_depth;
        u_int8_t        dp_cylshi;
        u_int16_t       dp_unused;
        u_int16_t       dp_secs;
        u_int16_t       dp_secbytes;
        u_int16_t       dp_interleave;
        u_int32_t       dp_flags;
        u_int32_t       dp_datarate;
        u_int32_t       dp_nretries;
        u_int32_t       dp_mspw;
        u_int16_t       dp_xgap1;
        u_int16_t       dp_xsync;
        u_int16_t       dp_xrdly;
        u_int16_t       dp_xgap2;
        u_int16_t       dp_xrgate;
        u_int16_t       dp_xwcont;
} __packed;

struct sgilabel {
#define SGILABEL_MAGIC  0xbe5a941
	u_int32_t       magic;
	int16_t         root;
	int16_t         swap;
	char            bootfile[16];
	struct devparms dp;
	struct {
		char	name[8];
		int32_t	block;
		int32_t	bytes;
	} voldir[15];
	struct {
		int32_t	blocks;
		int32_t	first;
		int32_t	type;
	} partitions[MAXPARTITIONS];
	int32_t         checksum;
	int32_t         _pad;
} __packed;

#define SGI_PTYPE_VOLHDR        0
#define SGI_PTYPE_RAW           3
#define SGI_PTYPE_BSD           4
#define SGI_PTYPE_VOLUME        6
#define SGI_PTYPE_EFS           7
#define SGI_PTYPE_LVOL          8
#define SGI_PTYPE_RLVOL         9
#define SGI_PTYPE_XFS           10
#define SGI_PTYPE_XFSLOG        11
#define SGI_PTYPE_XLV           12
#define SGI_PTYPE_XVM           13


struct cpu_disklabel {
};

#endif /* _MACHINE_DISKLABEL_H_ */
@


1.15
log
@Eliminate a few straggling 'labelsector' field declarations from
cpu_disklabel's.  'labelsector' is not used anywhere according to grep.

'go for it' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.14 2007/06/17 00:27:27 deraadt Exp $	*/
@


1.14
log
@significantly simplified disklabel infrastructure.  MBR handling becomes MI
to support hotplug media on most architectures.  disklabel setup and
verification done using new helper functions.  Disklabels must *always*
have a correct checksum now.  Same code paths are used to learn on-disk
location disklabels, to avoid new errors sneaking in.  Tested on almost all
cases, testing help from todd, kettenis, krw, otto, dlg, robert, gwk, drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.13 2007/06/07 02:55:12 krw Exp $	*/
a101 1
	int labelsector;
@


1.13
log
@Eliminate unnecessary duplicate defines *_LABELSECTOR and
*_LABELOFFSET.  Don't use osdep->labelsector since it will always be
LABELSECTOR, since we don't support extended DOS partitions holding
the OpenBSD disk label.

No functional change. Now only Alpha and Vax bounds_check_with_label
differ by more than comments.
@
text
@d1 1
a1 2
/*	$OpenBSD: disklabel.h,v 1.12 2006/10/20 23:47:43 krw Exp $	*/
/*	$NetBSD: disklabel.h,v 1.1 1995/02/13 23:07:34 cgd Exp $	*/
a37 1

a38 42
#define	RAW_PART		2		/* raw partition: xx?c */

/* DOS partition table -- located in boot block */
#define	DOSBBSECTOR	0		/* DOS boot block relative sector # */
#define	DOSPARTOFF	446
#define DOSACTIVE	0x80
#define	NDOSPART	4
#define DOSMBR_SIGNATURE 0xaa55
#define DOSMBR_SIGNATURE_OFF 0x1fe

struct dos_partition {
	u_int8_t	dp_flag;	/* bootstrap flags */
	u_int8_t	dp_shd;		/* starting head */
	u_int8_t	dp_ssect;	/* starting sector */
	u_int8_t	dp_scyl;	/* starting cylinder */
	u_int8_t	dp_typ;		/* partition type (see below) */
	u_int8_t	dp_ehd;		/* end head */
	u_int8_t	dp_esect;	/* end sector */
	u_int8_t	dp_ecyl;	/* end cylinder */
	u_int32_t	dp_start;	/* absolute starting sector number */
	u_int32_t	dp_size;	/* partition size in sectors */
};

/* Known DOS partition types. */
#define	DOSPTYP_UNUSED	0x00		/* Unused partition */
#define DOSPTYP_FAT12	0x01		/* 12-bit FAT */
#define DOSPTYP_FAT16S	0x04		/* 16-bit FAT, less than 32M */
#define DOSPTYP_EXTEND	0x05		/* Extended; contains sub-partitions */
#define DOSPTYP_FAT16B	0x06		/* 16-bit FAT, more than 32M */
#define DOSPTYP_FAT32	0x0b		/* 32-bit FAT */
#define DOSPTYP_FAT32L	0x0c		/* 32-bit FAT, LBA-mapped */
#define DOSPTYP_FAT16L	0x0e		/* 16-bit FAT, LBA-mapped */
#define DOSPTYP_EXTENDL 0x0f		/* Extended, LBA-mapped; contains sub-partitions */
#define DOSPTYP_ONTRACK	0x54
#define	DOSPTYP_LINUX	0x83		/* That other thing */
#define DOSPTYP_FREEBSD	0xa5		/* FreeBSD partition type */
#define DOSPTYP_OPENBSD	0xa6		/* OpenBSD partition type */
#define DOSPTYP_NETBSD	0xa9		/* NetBSD partition type */

/* Isolate the relevant bits to get sector and cylinder. */
#define	DPSECT(s)	((s) & 0x3f)
#define	DPCYL(c, s)	((c) + (((s) & 0xc0) << 2))
@


1.12
log
@Try again with local variable to avoid alignment issues.

"The dosparts member of cpu_disklabel was not used for any persistant
data. Eliminate it, and just use the data being read in while
processing MBR and EBR records.

Should be no functional change.

ok weingart@@ deraadt@@"
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.11 2006/10/18 20:09:39 deraadt Exp $	*/
d37 2
a38 7
#define	SGI_LABELSECTOR		1		/* sector containing label */
#define	SGI_LABELOFFSET		0		/* offset of label in sector */
#define	I386_LABELSECTOR	1		/* sector containing label */
#define	I386_LABELOFFSET	0		/* offset of label in sector */

#define LABELSECTOR		SGI_LABELSECTOR
#define LABELOFFSET		SGI_LABELOFFSET
@


1.11
log
@back out disksubr changes ... since they violate strict alignment on
some architectures (kaboom); that will be fixed in the next iteration
hopefully!
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.9 2006/10/03 01:37:22 krw Exp $	*/
a151 5
	union {
		struct {
			struct dos_partition dosparts[NDOSPART];
		} _i386;
	} u;
@


1.10
log
@The dosparts member of cpu_disklabel was not used for any persistant
data. Eliminate it, and just use the data being read in while
processing MBR and EBR records.

Should be no functional change.

ok weingart@@ deraadt@@
@
text
@d152 5
@


1.9
log
@Don't load bad144 bad sector information into disklabels for archs that
don't have wd* in GENERIC, since wd* is the only place such info is
being used. First step of eliminating bad144 bad sector info from all
disklabels.

'go go go' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.8 2006/07/07 23:47:37 krw Exp $	*/
a151 5
	union {
		struct {
			struct dos_partition dosparts[NDOSPART];
		} _i386;
	} u;
@


1.8
log
@Unroll DLT_* logic into simple 'look for native disklabel, then try
DOS MBR' logic.

Leave DOS MBR logic inside #if defined(DISKLABEL_I386) blocks until
impact on install media can be evaluated. Eliminates most remnants
of cross-endian, cross-architecture disklabel processing attempts.

Fix some mips64 issues with last commit, found by kettenis@@.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.7 2006/07/03 20:00:22 krw Exp $	*/
a149 1
#include <sys/dkbad.h>
a154 1
			struct dkbad bad;
a157 2

#define DKBAD(x) ((x)->u._i386.bad)
@


1.7
log
@Eliminate most of the #if/#endif maze in alpha, hppa, hppa64, and mips64
disklabel code that was intended to support cross-endian and cross-architecture
use of disklabels. Never actually used except for Alpha<->Amiga moves that now
can't happen anyway.

Leave native and DOS MBR disklabel code. Tested on alpha and hppa.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.6 2006/06/26 23:11:31 krw Exp $	*/
d37 2
a38 9
enum disklabel_tag { DLT_I386, DLT_SGI };

/*
 * What disklabels are we probing for, and in which order?
 */
#ifndef LABELPROBES
#define LABELPROBES	DLT_I386, DLT_SGI
#endif

a40 2
#define	SGI_LABELSECTOR		1		/* sector containing label */
#define	SGI_LABELOFFSET		0		/* offset of label in sector */
a151 1
	enum disklabel_tag labeltag;
@


1.6
log
@Clean up some inconsistancies in definitions around DOS MBR code. No
functional change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.5 2006/06/19 01:52:19 krw Exp $	*/
d37 1
a37 1
enum disklabel_tag { DLT_ALPHA, DLT_I386, DLT_HPPA, DLT_SGI };
d43 1
a43 1
#define LABELPROBES	DLT_ALPHA, DLT_I386, DLT_HPPA, DLT_SGI
a45 2
#define	ALPHA_LABELSECTOR	0		/* sector containing label */
#define	ALPHA_LABELOFFSET	64		/* offset of label in sector */
a47 2
#define	HPPA_LABELSECTOR	1		/* sector containing label */
#define	HPPA_LABELOFFSET	0		/* offset of label in sector */
a97 89
/*
 * volume header for "LIF" format volumes
 */
struct	lifvol {
	short	vol_id;
	char	vol_label[6];
	u_int	vol_addr;
	short	vol_oct;
	short	vol_dummy;
	u_int	vol_dirsize;
	short	vol_version;
	short	vol_zero;
	u_int	vol_number;
	u_int	vol_lastvol;
	u_int	vol_length;
	char	vol_toc[6];
	char	vol_dummy1[198];

	u_int	ipl_addr;
	u_int	ipl_size;
	u_int	ipl_entry;

	u_int	vol_dummy2;
};

struct	lifdir {
	char	dir_name[10];
	u_short	dir_type;
	u_int	dir_addr;
	u_int	dir_length;
	char	dir_toc[6];
	short	dir_flag;
	u_int	dir_implement;
};

struct lif_load {
	int address;
	int count;
};

#define	HPUX_MAGIC	0x8b7f6a3c
#define	HPUX_MAXPART	16
struct hpux_label {
	int32_t		hl_magic1;
	u_int32_t	hl_magic;
	int32_t		hl_version;
	struct {
		int32_t	hlp_blah[2];
		int32_t	hlp_start;
		int32_t	hlp_length;
	}		hl_parts[HPUX_MAXPART];
	u_int8_t	hl_flags[HPUX_MAXPART];
#define	HPUX_PART_ROOT	0x10
#define	HPUX_PART_SWAP	0x14
#define	HPUX_PART_BOOT	0x32
	int32_t		hl_blah[3*16];
	u_int16_t	hl_boot;
	u_int16_t	hl_reserved;
	int32_t		hl_magic2;
};

#define LIF_VOL_ID	-32768
#define LIF_VOL_OCT	4096
#define LIF_DIR_SWAP	0x5243
#define LIF_DIR_HPLBL	0xa271
#define	LIF_DIR_FS	0xcd38
#define	LIF_DIR_IOMAP	0xcd60
#define	LIF_DIR_HPUX	0xcd80
#define	LIF_DIR_ISL	0xce00
#define	LIF_DIR_PAD	0xcffe
#define	LIF_DIR_AUTO	0xcfff
#define	LIF_DIR_EST	0xd001
#define	LIF_DIR_TYPE	0xe942

#define LIF_DIR_FLAG	0x8001	/* dont ask me! */
#define	LIF_SECTSIZE	256

#define LIF_NUMDIR	16

#define LIF_VOLSTART	0
#define LIF_VOLSIZE	sizeof(struct lifvol)
#define LIF_DIRSTART	2048
#define LIF_DIRSIZE	(LIF_NUMDIR * sizeof(struct lifdir))
#define LIF_FILESTART	8192

#define	btolifs(b)	(((b) + (LIF_SECTSIZE - 1)) / LIF_SECTSIZE)
#define	lifstob(s)	((s) * LIF_SECTSIZE) 
#define	lifstodb(s)	((s) * LIF_SECTSIZE / DEV_BSIZE)

a164 2
		} _alpha;
		struct {
a167 5
		struct {
			struct lifvol lifvol;
			struct lifdir lifdir[LIF_NUMDIR];
			struct hpux_label hplabel;
		} _hppa;
@


1.5
log
@Zap Amiga bits of disklabel.h now that Amiga bits of readdisklabel() are
gone.

'go ahead' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.4 2006/06/11 21:15:35 krw Exp $	*/
d91 1
@


1.4
log
@Amiga is no longer amoung us. Some architectures were too sentimental
to cut all ties when it left for the attic. Eliminate (theoretical)
ability to read Amiga disklabels on those architectures.

mips64 compile tested by miod@@

"whack away" deraadt@@ "my amiga runs 3.2" niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.3 2005/12/20 06:57:02 miod Exp $	*/
a99 158

/*
 * describes ados Rigid Disk Blocks
 * which are used to partition a drive
 */
#define RDBNULL ((u_int32_t)0xffffffff)

/*
 * you will find rdblock somewhere in [0, RDBMAXBLOCKS)
 */
#define RDB_MAXBLOCKS	16

struct rdblock {
	u_int32_t id;		/* 'RDSK' */
	u_int32_t nsumlong;	/* number of longs in check sum */
	u_int32_t chksum;	/* simple additive with wrap checksum */
	u_int32_t hostid;	/* scsi target of host */
	u_int32_t nbytes;	/* size of disk blocks */
	u_int32_t flags;
	u_int32_t badbhead;	/* linked list of badblocks */
	u_int32_t partbhead;	/* linked list of partblocks */
	u_int32_t fsbhead;	/*   "     "   of fsblocks */
	u_int32_t driveinit;
	u_int32_t resv1[6];	/* RDBNULL */
	u_int32_t ncylinders;	/* number of cylinders on drive */
	u_int32_t nsectors;	/* number of sectors per track */
	u_int32_t nheads;	/* number of tracks per cylinder */
	u_int32_t interleave;
	u_int32_t park;		/* only used with st506 i.e. not */
	u_int32_t resv2[3];
	u_int32_t wprecomp;	/* start cyl for write precomp */
	u_int32_t reducedwrite;	/* start cyl for reduced write current */
	u_int32_t steprate;	/* driver step rate in ?s */
	u_int32_t resv3[5];
	u_int32_t rdblowb;	/* lowblock of range for rdb's */
	u_int32_t rdbhighb;	/* high block of range for rdb's */
	u_int32_t lowcyl;	/* low cylinder of partition area */
	u_int32_t highcyl;	/* upper cylinder of partition area */
	u_int32_t secpercyl;	/* number of sectors per cylinder */
	u_int32_t parkseconds;	/* zero if no park needed */
	u_int32_t resv4[2];
	char   diskvendor[8];	/* inquiry stuff */
	char   diskproduct[16];	/* inquiry stuff */
	char   diskrevision[4];	/* inquiry stuff */
	char   contvendor[8];	/* inquiry stuff */
	char   contproduct[16];	/* inquiry stuff */
	char   contrevision[4];	/* inquiry stuff */
#if never_use_secsize
	u_int32_t resv5[0];
#endif
};


#define RDBF_LAST	0x1	/* last drive available */
#define RDBF_LASTLUN	0x2	/* last LUN available */
#define RDBF_LASTUNIT	0x4	/* last target available */
#define RDBF_NORESELECT	0x8	/* do not use reselect */
#define RDBF_DISKID	0x10	/* disk id is valid ?? */
#define RDBF_CTRLID	0x20	/* ctrl id is valid ?? */
#define RDBF_SYNC	0x40	/* drive supports SCSI synchronous mode */
	
struct ados_environ {
	u_int32_t tabsize;	/* 0: environ table size */
	u_int32_t sizeblock;	/* 1: n long words in a block */
	u_int32_t secorg;	/* 2: not used must be zero */
	u_int32_t numheads;	/* 3: number of surfaces */
	u_int32_t secperblk;	/* 4: must be 1 */
	u_int32_t secpertrk;	/* 5: blocks per track */
	u_int32_t resvblocks;	/* 6: reserved blocks at start */
	u_int32_t prefac;	/* 7: must be 0 */
	u_int32_t interleave;	/* 8: normally 1 */
	u_int32_t lowcyl;	/* 9: low cylinder of partition */
	u_int32_t highcyl;	/* 10: upper cylinder of partition */
	u_int32_t numbufs;	/* 11: ados: number of buffers */
	u_int32_t membuftype;	/* 12: ados: type of bufmem */
	u_int32_t maxtrans;	/* 13: maxtrans the ctrlr supports */
	u_int32_t mask;		/* 14: mask for valid address */
	u_int32_t bootpri;	/* 15: boot priority for autoboot */
	u_int32_t dostype;	/* 16: filesystem type */
	u_int32_t baud;		/* 17: serial handler baud rate */
	u_int32_t control;	/* 18: control word for fs */
	u_int32_t bootblocks;	/* 19: blocks containing boot code */
	u_int32_t fsize;	/* 20: file system block size */
	u_int32_t frag;		/* 21: allowable frags per block */
	u_int32_t cpg;		/* 22: cylinders per group */
};

struct partblock {
	u_int32_t id;		/* 'PART' */
	u_int32_t nsumlong;	/* number of longs in check sum */
	u_int32_t chksum;	/* simple additive with wrap checksum */
	u_int32_t hostid;	/* scsi target of host */
	u_int32_t next;		/* next in chain */
	u_int32_t flags;	/* see below */
	u_int32_t resv1[3];
	u_char partname[32];	/* (BCPL) part name (may not be unique) */
	u_int32_t resv2[15];
	struct ados_environ e;
#if never_use_secsize
	u_int32_t extra[9];	/* 8 for extra added to environ */
#endif
};

#define PBF_BOOTABLE	0x1	/* partition is bootable */
#define PBF_NOMOUNT	0x2	/* partition should be mounted */

struct badblock {
	u_int32_t id;		/* 'BADB' */
	u_int32_t nsumlong;	/* number of longs in check sum */
	u_int32_t chksum;	/* simple additive with wrap checksum */
	u_int32_t hostid;	/* scsi target of host */
	u_int32_t next;		/* next in chain */
	u_int32_t resv;
	struct badblockent {
		u_int32_t badblock;
		u_int32_t goodblock;
	} badtab[0];		/* 61 for secsize == 512 */
};

struct fsblock {
	u_int32_t id;		/* 'FSHD' */
	u_int32_t nsumlong;	/* number of longs in check sum */
	u_int32_t chksum;	/* simple additive with wrap checksum */
	u_int32_t hostid;	/* scsi target of host */
	u_int32_t next;		/* next in chain */
	u_int32_t flags;
	u_int32_t resv1[2];
	u_int32_t dostype;	/* this is a file system for this type */
	u_int32_t version;	/* version of this fs */
	u_int32_t patchflags;	/* describes which functions to replace */
	u_int32_t type;		/* zero */
	u_int32_t task;		/* zero */
	u_int32_t lock;		/* zero */
	u_int32_t handler;	/* zero */
	u_int32_t stacksize;	/* to use when loading handler */
	u_int32_t priority;	/* to run the fs at. */
	u_int32_t startup;	/* zero */
	u_int32_t lsegblocks;	/* linked list of lsegblocks of fs code */
	u_int32_t globalvec;	/* bcpl vector not used mostly */
#if never_use_secsize
	u_int32_t resv2[44];
#endif
};

struct lsegblock {
	u_int32_t id;		/* 'LSEG' */
	u_int32_t nsumlong;	/* number of longs in check sum */
	u_int32_t chksum;	/* simple additive with wrap checksum */
	u_int32_t hostid;	/* scsi target of host */
	u_int32_t next;		/* next in chain */
	u_int32_t loaddata[0];	/* load segment data, 123 for secsize == 512 */
};

#define RDBLOCK_ID	0x5244534b	/* 'RDSK' */
#define PARTBLOCK_ID	0x50415254	/* 'PART' */
#define BADBLOCK_ID	0x42414442	/* 'BADB' */
#define FSBLOCK_ID	0x46534844	/* 'FSHD' */
#define LSEGBLOCK_ID	0x4c534547	/* 'LSEG' */
@


1.3
log
@__attribute__ ((__packed_)) -> __packed
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.2 2004/08/23 14:24:56 pefo Exp $	*/
d37 1
a37 1
enum disklabel_tag { DLT_ALPHA, DLT_I386, DLT_AMIGA, DLT_HPPA, DLT_SGI };
d43 1
a43 1
#define LABELPROBES	DLT_ALPHA, DLT_I386, DLT_AMIGA, DLT_HPPA, DLT_SGI
a49 2
#define	AMIGA_LABELSECTOR	0		/* sector containing label */
#define	AMIGA_LABELOFFSET	64		/* offset of label in sector */
a419 6
		struct {
			u_int32_t rdblock;		/* RDBNULL -> inval. */
			u_int32_t pblist[MAXPARTITIONS];/* pblock number */
			int pbindex[MAXPARTITIONS];	/* index of pblock */
			int valid;			/* valid? */
		} _amiga;
@


1.2
log
@new disklabel for sgi
@
text
@d1 1
a1 1
/*	$OpenBSD: disklabel.h,v 1.7 2004/08/01 07:34:18 mickey Exp $	*/
d375 1
a375 1
} __attribute__((__packed__));
d396 1
a396 1
} __attribute__((__packed__));
@


1.1
log
@initial mips64
@
text
@d1 2
a2 2
/*	$OpenBSD: disklabel.h,v 1.4 1999/01/27 04:46:05 imp Exp $	*/
/*	$NetBSD: disklabel.h,v 1.3 1996/03/09 20:52:54 ghudson Exp $	*/
d34 2
a35 2
#ifndef _MIPS_DISKLABEL_H_
#define _MIPS_DISKLABEL_H_
d37 25
a61 4
#define	LABELSECTOR	1		/* sector containing label */
#define	LABELOFFSET	0		/* offset of label in sector */
#define	MAXPARTITIONS	16		/* number of partitions */
#define	RAW_PART	2		/* raw partition: ie. rsd0c */
d66 1
d68 2
d99 312
d413 21
a433 2
	struct dos_partition dosparts[NDOSPART];
	struct dkbad bad;
d436 1
a436 5
#define DKBAD(x) ((x)->bad)

/* Isolate the relevant bits to get sector and cylinder. */
#define	DPSECT(s)	((s) & 0x3f)
#define	DPCYL(c, s)	((c) + (((s) & 0xc0) << 2))
d438 1
a438 1
#endif /* !_MIPS_DISKLABEL_H_ */
@

