head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.14
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2014.04.09.21.10.34;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2012.09.29.19.24.31;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.29.19.13.13;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.03.23.16.54.36;	author pirofti;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.18.16.57.44;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.12.19.45.53;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.22.22.08.52;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.07.22.37.16;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.20.14.34.21;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.06.17.42.28;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.07.07.29.44;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.31.21.35.49;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.08.07.13.44;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.10.20.28.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.08.14.21.27;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.20.56.02;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Make trapDump() take the printf-like function as a 2nd parameter.
No functional change; helps non-released kernels with extra debugging code (-:
@
text
@/*	$OpenBSD: trap.h,v 1.15 2012/09/29 19:24:31 miod Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: Utah Hdr: trap.h 1.1 90/07/09
 *	from: @@(#)trap.h	8.1 (Berkeley) 6/10/93
 */

#ifndef _MIPS64_TRAP_H_
#define _MIPS64_TRAP_H_

/*
 * Trap codes (ExcCode in the cause register); also known in trap.c for
 * name strings.
 */

#define T_INT			0	/* Interrupt pending */
#define T_TLB_MOD		1	/* TLB modified fault */
#define T_TLB_LD_MISS		2	/* TLB miss on load or ifetch */
#define T_TLB_ST_MISS		3	/* TLB miss on a store */
#define T_ADDR_ERR_LD		4	/* Address error on a load or ifetch */
#define T_ADDR_ERR_ST		5	/* Address error on a store */
#define T_BUS_ERR_IFETCH	6	/* Bus error on an ifetch */
#define T_BUS_ERR_LD_ST		7	/* Bus error on a load or store */
#define T_SYSCALL		8	/* System call */
#define T_BREAK			9	/* Breakpoint */
#define T_RES_INST		10	/* Reserved instruction exception */
#define T_COP_UNUSABLE		11	/* Coprocessor unusable */
#define T_OVFLOW		12	/* Arithmetic overflow */
#define	T_TRAP			13	/* Trap instruction */
#define	T_VCEI			14	/* R4k Virtual coherency instruction */
#define	T_FPE			15	/* Floating point exception */
#define	T_IWATCH		16	/* R4k Inst. Watch address reference */
#define	T_C2E			18	/* R5k Coprocessor 2 exception */
#define	T_MDMX			22	/* R5k MDMX unusable */
#define	T_DWATCH		23	/* Data Watch address reference */
#define	T_MCHECK		24	/* Machine check */
#define	T_CACHEERR		30	/* Cache error */
#define T_VCED			31	/* R4k Virtual coherency data */

#define	T_USER			0x20	/* user-mode flag or'ed with type */

/*
 *  Defines for trap handler catching kernel accessing memory.
 */
#define	KT_COPYERR	1		/* User space copy error */
#define	KT_KCOPYERR	2		/* Kernel space copy error */
#define	KT_DDBERR	3		/* DDB access error */
#define	KT_GUARDERR	4		/* guarded access error */

#ifndef _LOCORE

#if defined(DDB) || defined(DEBUG)

struct trapdebug {			/* trap history buffer for debugging */
	register_t status;
	register_t cause;
	register_t vadr;
	register_t pc;
	register_t ra;
	register_t sp;
	u_int	code;
	u_int	ipl;
};

#define	trapdebug_enter(ci, frame, cd)					\
do {									\
	register_t sr = disableintr();					\
	u_long cpuid = ci->ci_cpuid;					\
	struct trapdebug *t;						\
									\
	t = trapdebug + TRAPSIZE * cpuid + trppos[cpuid];		\
	t->status = frame->sr;						\
	t->cause = frame->cause;					\
	t->vadr = frame->badvaddr;					\
	t->pc = frame->pc;						\
	t->sp = frame->sp;						\
	t->ra = frame->ra;						\
	t->ipl = frame->ipl;						\
	t->code = cd;							\
	if (++trppos[cpuid] == TRAPSIZE)				\
		trppos[cpuid] = 0;					\
	setsr(sr);							\
} while (0)

#define TRAPSIZE 10		/* Trap log buffer length */
extern struct trapdebug trapdebug[MAXCPUS * TRAPSIZE];
extern uint trppos[MAXCPUS];

void trapDump(const char *, int (*)(const char *, ...));

#else
#define	trapdebug_enter(ci, frame, code)
#endif
#endif /* _LOCORE */

#endif /* !_MIPS64_TRAP_H_ */
@


1.15
log
@Handle the coprocessor 0 cause and status registers as a 64 bit value now,
as some odd mips designs need moro than 32 bits in there. This causes a lot
of mechanical changes everywhere getsr() is used.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.14 2012/09/29 19:13:13 miod Exp $	*/
d121 1
a121 1
void trapDump(const char *msg);
@


1.14
log
@Add a few more coprocessor 0 cause and config registers defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: trap.h,v 1.13 2011/03/23 16:54:36 pirofti Exp $	*/
d86 8
a93 8
struct trapdebug {              /* trap history buffer for debugging */
	uint32_t status;
        uint32_t cause;
        register_t vadr;
        register_t pc;
        register_t ra;
        register_t sp;
        u_int   code;
d99 1
a99 1
	uint32_t sr = disableintr();					\
@


1.13
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.12 2010/01/18 16:57:44 miod Exp $	*/
d121 1
a121 1
void trapDump(char *msg);
@


1.12
log
@Make trapdebug code MP-safe.
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.11 2009/11/12 19:45:53 miod Exp $	*/
d40 2
a41 2
#ifndef _MIPS_TRAP_H_
#define _MIPS_TRAP_H_
d128 1
a128 1
#endif /* !_MIPS_TRAP_H_ */
@


1.11
log
@typo
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.10 2009/10/22 22:08:52 miod Exp $	*/
d87 6
a92 6
	u_int	status;
        u_int	cause;
        u_long	vadr;
        u_long   pc;
        u_long   ra;
        u_long   sp;
d97 19
a115 14
#define	trapdebug_enter(x, cd) {	\
	u_int32_t __s = disableintr();	\
	trp->status = x->sr;		\
	trp->cause = x->cause;		\
	trp->vadr = x->badvaddr;	\
	trp->pc = x->pc;		\
	trp->sp = x->sp;		\
	trp->ra = x->ra;		\
	trp->ipl = x->ipl;		\
	trp->code = cd;				\
	if (++trp == &trapdebug[TRAPSIZE])	\
		trp = trapdebug;		\
	setsr(__s);				\
 }
d118 2
a119 1
extern struct trapdebug trapdebug[TRAPSIZE], *trp;
d124 1
a124 3

#define	trapdebug_enter(x, y)

@


1.10
log
@Completely overhaul interrupt handling on sgi. Cpu state now only stores a
logical IPL level, and per-platform (IP27/IP30/IP32) code will from the
necessary hardware mask registers.

This allows the use of more than one interrupt mask register. Also, the
generic (platform independent) interrupt code shrinks a lot, and the actual
interrupt handler chains and masking information is now per-platform private
data.

Interrupt dispatching is generated from a template; more routines will be
added to the template to reduce platform-specific changes and share as much
code as possible.

Tested on IP27, IP30, IP32 and IP35.
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.9 2008/04/07 22:37:16 miod Exp $	*/
d75 1
a75 1
 *  Defines for trap handler catching kernel accessng memory.
@


1.9
log
@Add ``guarded'' word read and write routines, to be used by machine-dependent
code soon. Similar to what ddb does, but does not need ddb to be compiled in.
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.8 2007/05/20 14:34:21 miod Exp $	*/
d94 1
a94 1
	u_int	cpl;
d105 1
a105 1
	trp->cpl = x->cpl;		\
@


1.8
log
@Remove unused badaddr().
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.7 2006/06/06 17:42:28 miod Exp $	*/
d80 1
@


1.7
log
@Define R5k/R10k extra trap codes.
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.6 2005/08/07 07:29:44 miod Exp $	*/
d77 3
a79 5
#define	KT_BADERR	1		/* Bad address */
#define	KT_COPYERR	2		/* User space copy error */
#define	KT_KCOPYERR	3		/* Kernel space copy error */
#define	KT_DDBERR	4		/* DDB access error */

@


1.6
log
@Remove advertising clause from UCB licenses; ok deraad@@
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.5 2005/01/31 21:35:49 grange Exp $	*/
d44 2
a45 2
 * Trap codes also known in trap.c for name strings.
 * Used for indexing so modify with care.
d62 1
a62 1
#define	T_VCEI			14	/* Virtual coherency instruction */
d64 3
a66 1
#define	T_IWATCH		16	/* Inst. Watch address reference */
d68 3
a70 1
#define T_VCED			31	/* Virtual coherency data */
@


1.5
log
@Un-__P.

ok pefo@@
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.4 2004/10/08 07:13:44 grange Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@trapdebug_enter() really takes 2 args, not 1.

ok pefo@@ miod@@
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.3 2004/08/10 20:28:13 deraadt Exp $	*/
d116 1
a116 1
void trapDump __P((char *msg));
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.2 2004/08/08 14:21:27 pefo Exp $	*/
d120 1
a120 1
#define	trapdebug_enter(x)
@


1.2
log
@Various fixes and cleanups from miod@@, tested and OK.
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.1 2004/08/06 20:56:02 pefo Exp $	*/
d114 1
a114 1
extern struct trapdebug trapdebug[TRAPSIZE], *trp; 
@


1.1
log
@initial mips64
@
text
@d1 1
a1 1
/*      $OpenBSD: trap.h,v 1.3 1999/01/27 04:46:06 imp Exp $	*/
d80 1
a80 3
#define	KT_FSWBERR	4		/* Access error */
#define	KT_FSWINTRBERR	5		/* Access error, non sleep */
#define	KT_DDBERR	6		/* DDB access error */
@

