head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	UBC_SYNC_B:1.5
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	WGRISC_1_0:1.1.1.1
	PEFO:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.02.07.07.46.49;	author art;	state dead;
branches;
next	1.4;

1.4
date	97.07.21.11.26.10;	author pefo;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	97.02.17.19.08.28;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	97.02.16.22.31.22;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	97.02.06.16.02.42;	author pefo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.06.16.02.42;	author pefo;	state Exp;
branches;
next	;

1.4.12.1
date	2001.05.14.21.39.31;	author niklas;	state dead;
branches;
next	;


desc
@@


1.5
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: dma.h,v 1.4 1997/07/21 11:26:10 pefo Exp $ */

/*
 * Copyright (c) 1996 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

extern vm_map_t phys_map;

/*
 * Little endian mips uses bounce buffer so flush
 * for dma is not requiered.
 */

#ifdef MIPSEL
#define ASC_NOFLUSH
#endif

/*
 *  Structure used to control dma.
 */

typedef struct dma_softc {
	struct device	sc_dev;		/* use as a device */
	struct esp_softc *sc_esp;
	int		dma_ch;
	vm_offset_t	dma_va;		/* Viritual address for transfer */
	vm_offset_t	req_va;		/* Original request va */
	int		req_size;	/* Request size */
	int		mode;		/* Mode register value and direction */
	int		sc_active;	/* Active flag */
	char		**sc_dmaaddr;	/* Pointer to dma address in dev */
	int		*sc_dmalen;	/* Pointer to len counter in dev */
} dma_softc_t;

#define	DMA_TO_DEV	0
#define	DMA_FROM_DEV	1

#define	DMA_CH0		0
#define	DMA_CH1		1

#define	DMA_RESET(r)	
#if 0
#define	DMA_START(a, b, c, d)						\
	{								\
	    int dcmd;							\
	    int xcmd;							\
	    int pa;							\
	    int sz;							\
	    if((vm_offset_t)(b) < VM_MIN_KERNEL_ADDRESS) {		\
		pa = CACHED_TO_PHYS(b);					\
	    }								\
	    else {							\
		pa = pmap_extract(vm_map_pmap(phys_map), (vm_offset_t)(b));\
	    }								\
	    sz = c;							\
	    if(sz + (pa & (NBPG - 1)) > NBPG) {				\
		sz = NBPG - (pa & (NBPG - 1));				\
	    }								\
	    dcmd = ((d) == DMA_FROM_DEV) ? 0x30 : 0x10;			\
	    if((a)->dma_ch == DMA_CH0) {				\
		out32(R3715_DMA_ADR0, pa);				\
		out32(R3715_DMA_CNT0, sz - 1);				\
	        xcmd = ~0x30;						\
	    }								\
	    else {							\
		out32(R3715_DMA_ADR1, pa);				\
		out32(R3715_DMA_CNT1, sz - 1);				\
	        dcmd = dcmd << 6;					\
	        xcmd = ~(0x30 << 6);					\
	    }								\
	    dcmd |= (1 << 26);						\
	    out32(R3715_IO_TIMING, (in32(R3715_IO_TIMING) & xcmd) | dcmd);\
	}
#else
#define	DMA_START(a, b, c, d)						\
	{								\
	    int dcmd;							\
	    int xcmd;							\
	    int pa;							\
	    int sz;							\
	    pa = CACHED_TO_PHYS(dma_buffer);				\
	    (a)->req_va = (vm_offset_t)(b);				\
	    (a)->req_size = c;						\
	    (a)->mode = d;						\
	    sz = c;							\
	    if((d) == DMA_TO_DEV) {					\
		int *_p = (int *)PHYS_TO_UNCACHED(pa);			\
		int *_v = (int *)b;					\
		int _n = sz;						\
		if(_n) {						\
			copynswap(_v, _p, _n);				\
	    	}							\
	    }								\
	    dcmd = ((d) == DMA_FROM_DEV) ? 0x30 : 0x10;			\
	    if((a)->dma_ch == DMA_CH0) {				\
		out32(R3715_DMA_ADR0, pa);				\
		out32(R3715_DMA_CNT0, sz - 1);				\
	        xcmd = ~0x30;						\
	    }								\
	    else {							\
		out32(R3715_DMA_ADR1, pa);				\
		out32(R3715_DMA_CNT1, sz - 1);				\
	        dcmd = dcmd << 6;					\
	        xcmd = ~(0x30 << 6);					\
	    }								\
	    dcmd |= (1 << 26);						\
	    /* Switch direction before enable */			\
	    out32(R3715_IO_TIMING, (in32(R3715_IO_TIMING) & xcmd) |	\
			(dcmd & ~0x410));				\
	    (void)in16(RISC_STATUS);					\
	    out32(R3715_IO_TIMING, (in32(R3715_IO_TIMING) & xcmd) | dcmd);\
	}
#endif
#define	DMA_MAP(a, b, c, d)
#define	DMA_INTR(r)
#define	DMA_DRAIN(r)
#define	DMA_END(c)							\
	{								\
	    int resudial;						\
	    if((c)->dma_ch == DMA_CH0) {				\
	    	out32(R3715_IO_TIMING, in32(R3715_IO_TIMING) & ~0x10);	\
		resudial = in32(R3715_DMA_CNT0);			\
	    }								\
	    else {							\
	    	out32(R3715_IO_TIMING, in32(R3715_IO_TIMING) & ~0x400);	\
		resudial = in32(R3715_DMA_CNT1);			\
	    }								\
	    if(resudial)						\
		resudial++;						\
	    if((c)->mode == DMA_FROM_DEV) {				\
		int *_v = (int *)(c)->req_va;				\
		int *_p = (int *)PHYS_TO_UNCACHED(CACHED_TO_PHYS(dma_buffer)); \
		int _n = (c)->req_size - resudial;			\
		if(_n) {						\
			copynswap(_p, _v, _n);				\
	    	}							\
	    }								\
	}
@


1.4
log
@SCSI copy optimizations
@
text
@d1 1
a1 1
/*	$OpenBSD: dma.h,v 1.3 1997/02/17 19:08:28 pefo Exp $ */
@


1.4.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: dma.h,v 1.4 1997/07/21 11:26:10 pefo Exp $ */
@


1.3
log
@fixes SCSI.
@
text
@d1 1
a1 1
/*	$OpenBSD: dma.h,v 1.2 1997/02/16 22:31:22 pefo Exp $ */
d38 9
d118 3
a120 4
		while(_n > 0) {						\
			*_p = htonl(*_v);				\
			_p++; _v++; _n -= 4;				\
		}							\
d162 3
a164 4
		while(_n > 0) {						\
			*_v = htonl(*_p);				\
			_p++; _v++; _n -= 4;				\
		}							\
@


1.2
log
@Some changes for WG testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: dma.h,v 1.1.1.1 1997/02/06 16:02:42 pefo Exp $ */
a142 2
if(resudial)								\
printf("res: %d\n", resudial);						\
d148 2
d153 1
a153 1
		int _n = (c)->req_size;					\
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d127 4
d139 11
a149 3
	    int dcmd;							\
	    dcmd = ((c)->dma_ch == DMA_CH0) ? 0x10 : 0x10000;		\
	    out32(R3715_IO_TIMING, in32(R3715_IO_TIMING) & ~dcmd);	\
@


1.1.1.1
log
@Import of WGRISC port. (Willowglen R3081 board)
@
text
@@
