head	1.13;
access;
symbols
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	UBC_SYNC_A:1.13
	UBC_SYNC_B:1.13
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.11.0.8
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.6
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.4
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	WGRISC_1_0:1.1.1.1
	PEFO:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2001.02.07.07.47.06;	author art;	state dead;
branches;
next	1.12;

1.12
date	2000.10.18.21.00.41;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	99.01.08.04.29.11;	author millert;	state Exp;
branches
	1.11.6.1;
next	1.10;

1.10
date	98.10.03.21.18.57;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.02.24.04.22.43;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.02.19.20.36.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.01.11.20.42.09;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.10.02.00.59.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.21.46.59;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.08.01.21.58.38;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	97.05.11.16.26.05;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	97.04.07.12.04.02;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.02.06.16.02.45;	author pefo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.06.16.02.45;	author pefo;	state Exp;
branches;
next	;

1.11.6.1
date	2001.05.14.21.40.07;	author niklas;	state dead;
branches;
next	;


desc
@@


1.13
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: disksubr.c,v 1.12 2000/10/18 21:00:41 mickey Exp $	*/
/*	$NetBSD: disksubr.c,v 1.21 1996/05/03 19:42:03 christos Exp $	*/

/*
 * Copyright (c) 1996 Theo de Raadt
 * Copyright (c) 1982, 1986, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ufs_disksubr.c	7.16 (Berkeley) 5/4/91
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/syslog.h>
#include <sys/disk.h>

#define	b_cylin	b_resid

#define BOOT_MAGIC 0xAA55
#define BOOT_MAGIC_OFF (DOSPARTOFF+NDOSPART*sizeof(struct dos_partition))

void
dk_establish(dk, dev)
	struct disk *dk;
	struct device *dev;
{
}

/*
 * Attempt to read a disk label from a device
 * using the indicated strategy routine.
 * The label must be partly set up before this:
 * secpercyl, secsize and anything required for a block i/o read
 * operation in the driver's strategy/start routines
 * must be filled in before calling us.
 *
 * If dos partition table requested, attempt to load it and
 * find disklabel inside a DOS partition. Also, if bad block
 * table needed, attempt to extract it as well. Return buffer
 * for use in signalling errors if requested.
 *
 * We would like to check if each MBR has a valid BOOT_MAGIC, but
 * we cannot because it doesn't always exist. So.. we assume the
 * MBR is valid.
 *
 * Returns null on success and an error string on failure.
 */
char *
readdisklabel(dev, strat, lp, osdep, spoofonly)
	dev_t dev;
	void (*strat) __P((struct buf *));
	register struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int spoofonly;
{
	struct dos_partition *dp = osdep->dosparts, *dp2;
	struct dkbad *bdp = &DKBAD(osdep);
	struct buf *bp;
	struct disklabel *dlp;
	char *msg = NULL, *cp;
	int dospartoff, cyl, i, ourpart = -1;

	/* minimal requirements for archtypal disk label */
	if (lp->d_secsize == 0)
		lp->d_secsize = DEV_BSIZE;
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
	lp->d_npartitions = RAW_PART + 1;
	for (i = 0; i < RAW_PART; i++) {
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
	}
	if (lp->d_partitions[i].p_size == 0)
		lp->d_partitions[i].p_size = 0x1fffffff;
	lp->d_partitions[i].p_offset = 0;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	/* do dos partitions in the process of getting disklabel? */
	dospartoff = 0;
	cyl = LABELSECTOR / lp->d_secpercyl;
	if (dp) {
	        daddr_t part_blkno = DOSBBSECTOR;
		unsigned long extoff = 0;
		int wander = 1, n = 0, loop = 0;

		/*
		 * Read dos partition table, follow extended partitions.
		 * Map the partitions to disklabel entries i-p
		 */
		while (wander && n < 8 && loop < 8) {
		        loop++;
			wander = 0;

			/* read boot record */
			bp->b_blkno = part_blkno;
			bp->b_bcount = lp->d_secsize;
			bp->b_flags = B_BUSY | B_READ;
			bp->b_cylin = part_blkno / lp->d_secpercyl;
			(*strat)(bp);
		     
			/* if successful, wander through dos partition table */
			if (biowait(bp)) {
				msg = "dos partition I/O error";
				goto done;
			}
			bcopy(bp->b_data + DOSPARTOFF, dp, NDOSPART * sizeof(*dp));

			if (ourpart == -1) {
				/* Search for our MBR partition */
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (dp2->dp_size &&
					    dp2->dp_typ == DOSPTYP_OPENBSD)
						ourpart = i;
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (dp2->dp_size &&
					    dp2->dp_typ == DOSPTYP_FREEBSD)
						ourpart = i;
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (dp2->dp_size &&
					    dp2->dp_typ == DOSPTYP_NETBSD)
						ourpart = i;
				if (ourpart == -1)
					goto donot;
				/*
				 * This is our MBR partition. need sector address
				 * for SCSI/IDE, cylinder for ESDI/ST506/RLL
				 */
				dp2 = &dp[ourpart];
				dospartoff = dp2->dp_start + part_blkno;
				cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

				/* XXX build a temporary disklabel */
				lp->d_partitions[0].p_size = dp2->dp_size;
				lp->d_partitions[0].p_offset = dp2->dp_start +
				    part_blkno;
				if (lp->d_ntracks == 0)
					lp->d_ntracks = dp2->dp_ehd + 1;
				if (lp->d_nsectors == 0)
					lp->d_nsectors = DPSECT(dp2->dp_esect);
				if (lp->d_secpercyl == 0)
					lp->d_secpercyl = lp->d_ntracks *
					    lp->d_nsectors;
			}
donot:
			/*
			 * In case the disklabel read below fails, we want to
			 * provide a fake label in i-p.
			 */
			for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
				struct partition *pp = &lp->d_partitions[8+n];

				if (dp2->dp_size)
					pp->p_size = dp2->dp_size;
				if (dp2->dp_start)
					pp->p_offset =
					    dp2->dp_start + part_blkno;

				switch (dp2->dp_typ) {
				case DOSPTYP_UNUSED:
					for (cp = (char *)dp2;
					    cp < (char *)(dp2 + 1); cp++)
						if (*cp)
							break;
					/*
					 * Was it all zeroes?  If so, it is
					 * an unused entry that we don't
					 * want to show.
					 */
					if (cp == (char *)(dp2 + 1))
					    continue;
					lp->d_partitions[8 + n++].p_fstype =
					    FS_UNUSED;
					break;

				case DOSPTYP_LINUX:
					pp->p_fstype = FS_EXT2FS;
					n++;
					break;

				case DOSPTYP_FAT12:
				case DOSPTYP_FAT16S:
				case DOSPTYP_FAT16B:
				case DOSPTYP_FAT32:
				case DOSPTYP_FAT32L:
				case DOSPTYP_FAT16L:
					pp->p_fstype = FS_MSDOS;
					n++;
					break;
				case DOSPTYP_EXTEND:
					part_blkno = dp2->dp_start + extoff;
					if (!extoff)
						extoff = dp2->dp_start;
					wander = 1;
					break;
				default:
					pp->p_fstype = FS_OTHER;
					n++;
					break;
				}
			}
		}
		lp->d_bbsize = 8192;
		lp->d_sbsize = 64*1024;		/* XXX ? */
		lp->d_npartitions = MAXPARTITIONS;
	}

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		goto done;

	/* next, dig out disk label */
	bp->b_blkno = dospartoff + LABELSECTOR;
	bp->b_cylin = cyl;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	(*strat)(bp);

	/* if successful, locate disk label within block and validate */
	if (biowait(bp)) {
		/* XXX we return the faked label built so far */
		msg = "disk label I/O error";
		goto done;
	}
	for (dlp = (struct disklabel *)bp->b_data;
	    dlp <= (struct disklabel *)(bp->b_data + lp->d_secsize - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic != DISKMAGIC || dlp->d_magic2 != DISKMAGIC) {
			if (msg == NULL)
				msg = "no disk label";
		} else if (dlp->d_npartitions > MAXPARTITIONS ||
			   dkcksum(dlp) != 0)
			msg = "disk label corrupted";
		else {
			*lp = *dlp;
			msg = NULL;
			break;
		}
	}

	if (msg) {
#if defined(CD9660)
		if (iso_disklabelspoof(dev, strat, lp) == 0)
			msg = NULL;
#endif
		goto done;
	}

	/* obtain bad sector table if requested and present */
	if (bdp && (lp->d_flags & D_BADSECT)) {
		struct dkbad *db;

		i = 0;
		do {
			/* read a bad sector table */
			bp->b_flags = B_BUSY | B_READ;
			bp->b_blkno = lp->d_secperunit - lp->d_nsectors + i;
			if (lp->d_secsize > DEV_BSIZE)
				bp->b_blkno *= lp->d_secsize / DEV_BSIZE;
			else
				bp->b_blkno /= DEV_BSIZE / lp->d_secsize;
			bp->b_bcount = lp->d_secsize;
			bp->b_cylin = lp->d_ncylinders - 1;
			(*strat)(bp);

			/* if successful, validate, otherwise try another */
			if (biowait(bp)) {
				msg = "bad sector table I/O error";
			} else {
				db = (struct dkbad *)(bp->b_data);
#define DKBAD_MAGIC 0x4321
				if (db->bt_mbz == 0
					&& db->bt_flag == DKBAD_MAGIC) {
					msg = NULL;
					*bdp = *db;
					break;
				} else
					msg = "bad sector table corrupted";
			}
		} while ((bp->b_flags & B_ERROR) && (i += 2) < 10 &&
			i < lp->d_nsectors);
	}

done:
	bp->b_flags |= B_INVAL;
	brelse(bp);
	return (msg);
}

/*
 * Check new disk label for sensibility
 * before setting it.
 */
int
setdisklabel(olp, nlp, openmask, osdep)
	register struct disklabel *olp, *nlp;
	u_long openmask;
	struct cpu_disklabel *osdep;
{
	register i;
	register struct partition *opp, *npp;

	/* sanity clause */
	if (nlp->d_secpercyl == 0 || nlp->d_secsize == 0 ||
	    (nlp->d_secsize % DEV_BSIZE) != 0)
		return(EINVAL);

	/* special case to allow disklabel to be invalidated */
	if (nlp->d_magic == 0xffffffff) {
		*olp = *nlp;
		return (0);
	}

	if (nlp->d_magic != DISKMAGIC || nlp->d_magic2 != DISKMAGIC ||
	    dkcksum(nlp) != 0)
		return (EINVAL);

	/* XXX missing check if other dos partitions will be overwritten */

	while (openmask != 0) {
		i = ffs(openmask) - 1;
		openmask &= ~(1 << i);
		if (nlp->d_npartitions <= i)
			return (EBUSY);
		opp = &olp->d_partitions[i];
		npp = &nlp->d_partitions[i];
		if (npp->p_offset != opp->p_offset || npp->p_size < opp->p_size)
			return (EBUSY);
		/*
		 * Copy internally-set partition information
		 * if new label doesn't include it.		XXX
		 */
		if (npp->p_fstype == FS_UNUSED && opp->p_fstype != FS_UNUSED) {
			npp->p_fstype = opp->p_fstype;
			npp->p_fsize = opp->p_fsize;
			npp->p_frag = opp->p_frag;
			npp->p_cpg = opp->p_cpg;
		}
	}
	nlp->d_checksum = 0;
	nlp->d_checksum = dkcksum(nlp);
	*olp = *nlp;
	return (0);
}


/*
 * Write disk label back to device after modification.
 * XXX cannot handle OpenBSD partitions in extended partitions!
 */
int
writedisklabel(dev, strat, lp, osdep)
	dev_t dev;
	void (*strat) __P((struct buf *));
	register struct disklabel *lp;
	struct cpu_disklabel *osdep;
{
	struct dos_partition *dp = osdep->dosparts, *dp2;
	struct buf *bp;
	struct disklabel *dlp;
	int error, dospartoff, cyl, i;
	int ourpart = -1;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	/* do dos partitions in the process of getting disklabel? */
	dospartoff = 0;
	cyl = LABELSECTOR / lp->d_secpercyl;
	if (dp) {
		/* read master boot record */
		bp->b_blkno = DOSBBSECTOR;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylin = DOSBBSECTOR / lp->d_secpercyl;
		(*strat)(bp);

		if ((error = biowait(bp)) != 0)
			goto done;

		/* XXX how do we check veracity/bounds of this? */
		bcopy(bp->b_data + DOSPARTOFF, dp,
		    NDOSPART * sizeof(*dp));

		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (dp2->dp_size && dp2->dp_typ == DOSPTYP_OPENBSD)
				ourpart = i;
		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (dp2->dp_size && dp2->dp_typ == DOSPTYP_FREEBSD)
				ourpart = i;
		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (dp2->dp_size && dp2->dp_typ == DOSPTYP_NETBSD)
				ourpart = i;

		if (ourpart != -1) {
			dp2 = &dp[ourpart];

			/*
			 * need sector address for SCSI/IDE,
			 * cylinder for ESDI/ST506/RLL
			 */
			dospartoff = dp2->dp_start;
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);
		}
	}

	/* next, dig out disk label */
	bp->b_blkno = dospartoff + LABELSECTOR;
	bp->b_cylin = cyl;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	(*strat)(bp);

	/* if successful, locate disk label within block and validate */
	if ((error = biowait(bp)) != 0)
		goto done;
	for (dlp = (struct disklabel *)bp->b_data;
	    dlp <= (struct disklabel *)(bp->b_data + lp->d_secsize - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic == DISKMAGIC && dlp->d_magic2 == DISKMAGIC &&
		    dkcksum(dlp) == 0) {
			*dlp = *lp;
			bp->b_flags = B_BUSY | B_WRITE;
			(*strat)(bp);
			error = biowait(bp);
			goto done;
		}
	}
	/* Write it in the regular place. */
	*(struct disklabel *)bp->b_data = *lp;
	bp->b_flags = B_BUSY | B_WRITE;
	(*strat)(bp);
	error = biowait(bp);
	goto done;

done:
	bp->b_flags |= B_INVAL;
	brelse(bp);
	return (error);
}

/*
 * Determine the size of the transfer, and make sure it is
 * within the boundaries of the partition. Adjust transfer
 * if needed, and signal errors or early completion.
 */
int
bounds_check_with_label(bp, lp, osdep, wlabel)
	struct buf *bp;
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int wlabel;
{
#define blockpersec(count, lp) ((count) * (((lp)->d_secsize) / DEV_BSIZE))
	struct partition *p = lp->d_partitions + DISKPART(bp->b_dev);
	int labelsector = blockpersec(lp->d_partitions[RAW_PART].p_offset, lp) +
	    LABELSECTOR;
	int sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* avoid division by zero */
	if (lp->d_secpercyl == 0) {
		bp->b_error = EINVAL;
		goto bad;
	}

	if (bp->b_blkno + sz > blockpersec(p->p_size, lp)) {
		sz = blockpersec(p->p_size, lp) - bp->b_blkno;
		if (sz == 0) {
			/* If exactly at end of disk, return EOF. */
			bp->b_resid = bp->b_bcount;
			goto done;
		}
		if (sz < 0) {
			/* If past end of disk, return EINVAL. */
			bp->b_error = EINVAL;
			goto bad;
		}
		/* Otherwise, truncate request. */
		bp->b_bcount = sz << DEV_BSHIFT;
	}

	/* Overwriting disk label? */
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsector &&
#if LABELSECTOR != 0
	    bp->b_blkno + blockpersec(p->p_offset, lp) + sz > labelsector &&
#endif
	    (bp->b_flags & B_READ) == 0 && !wlabel) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* calculate cylinder for disksort to order transfers with */
	bp->b_cylin = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
	    lp->d_secpercyl;
	return (1);

bad:
	bp->b_flags |= B_ERROR;
done:
	return (0);
}
@


1.12
log
@typo in comment; from gluk@@ptci.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 1999/01/08 04:29:11 millert Exp $	*/
@


1.11
log
@check for lp->d_secpercyl == 0) in bounds_check_with_label()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10 1998/10/03 21:18:57 millert Exp $	*/
d62 1
a62 1
 * using the indicated stategy routine.
@


1.11.6.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 1999/01/08 04:29:11 millert Exp $	*/
@


1.10
log
@Add a "spoofonly" argument to readdisklabel() which will be used to
implement an ioctl to get a spoofed label even for disks that have
a label on them.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.9 1998/02/24 04:22:43 deraadt Exp $	*/
d496 6
@


1.9
log
@rename some DOS MBR partition types
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.8 1998/02/19 20:36:44 deraadt Exp $	*/
d80 1
a80 1
readdisklabel(dev, strat, lp, osdep)
d85 1
d243 4
@


1.8
log
@add netbsd partition, rename 386BSD one to FreeBSD..
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.7 1998/01/11 20:42:09 provos Exp $	*/
a218 1
				case DOSPTYP_FAT16C:
d220 2
@


1.7
log
@disklabel spoofing for FAT32.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.6 1997/10/02 00:59:12 deraadt Exp $	*/
d151 6
a156 1
					    dp2->dp_typ == DOSPTYP_386BSD)
d420 4
a423 1
			if (dp2->dp_size && dp2->dp_typ == DOSPTYP_386BSD)
@


1.6
log
@no more ESRCH in writedisklabel()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.5 1997/08/08 21:46:59 niklas Exp $	*/
d215 1
@


1.5
log
@Change the bounds_check_with_label API to also take a cpu_disklabel
reference for making transferral of meta-information possible from
readdisklabel to bounds_check_with_label.  The first (and maybe only)
thing that will use this is the multi-disklabel-format code on the
alpha where the labelsector is passed via cpu_disklabel so the label
write-protection can work correctly no matter what label was found.

Also use a new macro DKBAD to get at the dkbad field of the cpu_disklabel
implementations that contain it.  This too is for multi-disklabel
architectures where the "bad" field can be inside a union.  Use this
macro as a means for a driver to check if an architecture supports
dkbad constructs.

Remove proto of bounds_check_with_label from all MD disklabel.h as it
is in sys/disklabel.h.

I have not been able to test the changes everywhere, if I break anything
I apologize, and promise to fix it as soon as I become aware of it.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.4 1997/08/01 21:58:38 pefo Exp $	*/
d451 6
a456 1
	error = ESRCH;
@


1.4
log
@new disklabel code
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.14 1997/05/08 00:14:29 deraadt Exp $	*/
d87 1
a87 1
	struct dkbad *bdp = &osdep->bad;
d465 1
a465 1
bounds_check_with_label(bp, lp, wlabel)
d468 1
@


1.3
log
@Current update
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 1997/04/30 08:40:15 provos Exp $	*/
d73 4
d117 1
a117 3
		int wander = 1;
		int n = 0;
		int loop = 0;
a124 2

			/* on finding a extended partition wander further */
a138 7
		     
                	/* 
			 * We would like to check if each MBR has a valid
			 * BOOT_MAGIC, but we cannot because it doesn't
			 * always exist. So.. we assume the MBR is valid.
			 */
		     
a140 3
			/*
			 * Search for our MBR partition
			 */
d142 1
d153 2
a154 5
			}

			if (ourpart != -1) {
				dp2 = &dp[ourpart];

d159 1
d175 1
a175 1

d178 1
a178 2
			 * provide a fake label in which m/n/o/p are MBR 
			 * partitions 0/1/2/3
d180 1
a180 1
			for (dp2=dp, i=0; i < NDOSPART && !wander; i++, dp2++) {
a182 5
/*		       		if (dp2->dp_start + dp2->dp_size > 
				    lp->d_ncylinders * lp->d_secpercyl)
					continue;
*/

d235 1
a235 1
	
d364 2
a365 2
 	nlp->d_checksum = 0;
 	nlp->d_checksum = dkcksum(nlp);
d373 1
d428 1
a428 1
	
@


1.2
log
@cd9660 & partition/block number confusion correction
@
text
@d1 2
a2 1
/*	$OpenBSD: disksubr.c,v 1.1.1.1 1997/02/06 16:02:45 pefo Exp $	*/
d5 2
a6 1
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
d9 15
a23 13
 * Authors: Keith Bostic, Chris G. Demetriou, Per Fogelstrom (R4000)
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
d25 11
a35 4
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
d37 1
a37 2
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
d41 1
a42 1
#include <sys/ioccom.h>
d45 1
d48 1
a48 2
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
d50 2
a51 2
#include <machine/cpu.h>
#include <machine/autoconf.h>
a52 6
extern struct device *bootdv;

int fat_types[] = { DOSPTYP_FAT12, DOSPTYP_FAT16S,
		    DOSPTYP_FAT16B, DOSPTYP_FAT16C, -1 };

/* was this the boot device ? */
d61 2
a62 1
 * Attempt to read a disk label from a device * using the indicated stategy routine.
d64 9
a72 2
 *     secpercyl and anything required in the strategy routine
 *     (e.g., sector size) must be filled in before calling us.
d76 1
a76 1
readdisklabel(dev, strat, lp, clp)
d78 3
a80 3
	void (*strat)();
	struct disklabel *lp;
	struct cpu_disklabel *clp;
d82 2
d86 2
a87 3
	struct dos_partition *dp = clp->dosparts;
	char *msg = NULL;
	int dospart, dospartoff, i, *ip;
d90 2
d93 1
a93 1
		lp->d_secperunit = 0x1fffffff; 
d95 1
a95 1
	for(i = 0; i < RAW_PART; i++) {
d99 3
a101 3
	if (lp->d_partitions[RAW_PART].p_size == 0)
		lp->d_partitions[RAW_PART].p_size = 0x1fffffff;
	lp->d_partitions[RAW_PART].p_offset = 0;
d103 1
a103 1
	/* obtain buffer to probe drive with */
a105 2
	dospartoff = 0;
	dospart = -1;
d108 2
d111 5
a115 6
		/* read master boot record */
		bp->b_blkno = DOSBBSECTOR;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_resid = 0;
		(*strat)(bp);
d117 29
a145 7
		/* if successful, wander through dos partition table */
		if (biowait(bp)) {
			msg = "dos partition I/O error";
			goto done;
		}
		if (*(unsigned int *)(bp->b_data) == 0x8efac033) {
			/* XXX how do we check veracity/bounds of this? */
d148 14
a161 4
			for (i = 0, dp = clp->dosparts; i < NDOSPART; i++, dp++) {
				if (dp->dp_size && dp->dp_typ == DOSPTYP_OPENBSD
				    && dospart < 0)
					dospart = i;
d163 4
a166 6
			for (i = 0, dp = clp->dosparts; i < NDOSPART; i++, dp++) {
				if (dp->dp_size && dp->dp_typ == DOSPTYP_386BSD
				    && dospart < 0)
					dospart = i;
			}
			if(dospart >= 0) {
d168 2
a169 1
				 * set part a to show OpenBSD part
d171 2
a172 2
				dp = clp->dosparts+dospart;
				dospartoff = dp->dp_start;
d174 11
a184 7
				lp->d_partitions[0].p_size = dp->dp_size;
				lp->d_partitions[0].p_offset = dp->dp_start;
				lp->d_partitions[RAW_PART].p_size = dp->dp_size;
				lp->d_partitions[RAW_PART].p_offset = dp->dp_start;
				lp->d_ntracks = dp->dp_ehd + 1;
				lp->d_nsectors = DPSECT(dp->dp_esect);
				lp->d_secpercyl = lp->d_ntracks * lp->d_nsectors;
d186 1
d188 3
a190 2
			 * In case the disklabel read below fails, we want to provide
			 * a fake label in which m/n/o/p are MBR partitions 0/1/2/3
d192 53
a244 7
			for (i=0, dp = clp->dosparts; i < NDOSPART; i++, dp++) {
				lp->d_partitions[MAXPARTITIONS - NDOSPART + i].p_size = dp->dp_size;
				lp->d_partitions[MAXPARTITIONS - NDOSPART + i].p_offset = dp->dp_start;
				for (ip = fat_types; *ip != -1; ip++) {
					if (dp->dp_typ != *ip)
						continue;
					lp->d_partitions[MAXPARTITIONS - NDOSPART +i].p_fstype = FS_MSDOS;
a246 3
			lp->d_bbsize = 8192;
			lp->d_sbsize = 64*1024;         /* XXX ? */
			lp->d_npartitions = MAXPARTITIONS;
d248 3
a250 1
			
d252 1
d255 1
a255 1
	bp->b_resid = 0;
d258 1
a258 1
	(*strat)(bp);  
d262 2
a263 1
		msg = "disk label read error";
d266 13
a278 6

	dlp = (struct disklabel *)(bp->b_un.b_addr + LABELOFFSET);
	if (dlp->d_magic == DISKMAGIC) {
		if (dkcksum(dlp)) {
			msg = "OpenBSD disk label corrupted";
			goto done;
a279 2
		*lp = *dlp;
		goto done;
d281 2
d284 3
a286 1
	if (iso_disklabelspoof(dev, strat, lp) == 0)
d288 37
a324 2
#endif
	msg = "no disk label";
d326 1
a326 1
	bp->b_flags = B_INVAL | B_AGE | B_READ;
d332 2
a333 1
 * Check new disk label for sensibility before setting it.
d336 1
a336 1
setdisklabel(olp, nlp, openmask, clp)
d339 1
a339 1
	struct cpu_disklabel *clp;
d349 6
d356 1
a356 1
		dkcksum(nlp) != 0)
d359 4
a362 2
	while ((i = ffs((long)openmask)) != 0) {
		i--;
d371 3
a373 3
		* Copy internally-set partition information
		* if new label doesn't include it.             XXX
		*/
d381 2
a382 2
	nlp->d_checksum = 0;
	nlp->d_checksum = dkcksum(nlp);
d384 1
a384 1
	return (0);     
d387 1
a389 2
 * this means write out the Rigid disk blocks to represent the 
 * label.  Hope the user was carefull.
d392 1
a392 1
writedisklabel(dev, strat, lp, clp)
d394 1
a394 1
	void (*strat)();
d396 1
a396 1
	struct cpu_disklabel *clp;
d398 2
a399 1
	struct buf *bp; 
d401 2
a402 3
	struct dos_partition *dp = clp->dosparts;
	int error = 0, i;
	int dospart, dospartoff;
d404 1
a406 2
	dospart = -1;
	dospartoff = 0;
d409 2
d416 1
a416 1
		bp->b_resid = 0;
d419 16
a434 4
		if (((error = biowait(bp)) == 0) 
		   && *(unsigned int *)(bp->b_data) == 0x8efac033) {
			/* XXX how do we check veracity/bounds of this? */
			bcopy(bp->b_data + DOSPARTOFF, dp, NDOSPART * sizeof(*dp));
d436 6
a441 14
			for (i = 0, dp = clp->dosparts; i < NDOSPART; i++, dp++) {
				if (dp->dp_size && dp->dp_typ == DOSPTYP_OPENBSD
				    && dospart < 0) {
					dospart = i;
					dospartoff = dp->dp_start;
				}
			}
			for (i = 0, dp = clp->dosparts; i < NDOSPART; i++, dp++) {
				if (dp->dp_size && dp->dp_typ == DOSPTYP_386BSD
				    && dospart < 0) {
					dospart = i;
					dospartoff = dp->dp_start;
				}
			}
a442 1
			
d444 2
d447 1
a447 1
	bp->b_resid = 0;
d449 1
a449 1
	bp->b_flags = B_READ;           /* get current label */
d451 3
a453 1
	if (error = biowait(bp))
d455 13
a467 7

	dlp = (struct disklabel *)(bp->b_un.b_addr + LABELOFFSET);
	*dlp = *lp;     /* struct assignment */

	bp->b_flags = B_WRITE;
	(*strat)(bp);
	error = biowait(bp);
d470 1
d472 1
a472 1
	return (error); 
d475 1
a475 2

/* 
d488 1
a488 1
	int labelsect = blockpersec(lp->d_partitions[RAW_PART].p_offset, lp) +
a491 9
	/* overwriting disk label ? */
	/* XXX should also protect bootstrap in first 8K */ 
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsect &&
	    (bp->b_flags & B_READ) == 0 && wlabel == 0) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* beyond partition? */ 
d495 1
a495 1
			/* if exactly at end of disk, return an EOF */
d497 1
a497 1
			return(0);
a498 1
		sz = maxsz - bp->b_blkno;
d500 1
d504 1
a504 1
		/* or truncate if part of it fits */
d506 11
a516 1
	}               
d519 1
a519 1
	bp->b_resid = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
d521 2
a522 1
	return(1);
d525 2
a526 1
	return(-1);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.5 1996/09/27 19:14:08 pefo Exp $	*/
d178 4
d322 5
a326 6
#define dkpart(dev) (minor(dev) % MAXPARTITIONS )

	struct partition *p = lp->d_partitions + dkpart(bp->b_dev);
	int labelsect = lp->d_partitions[RAW_PART].p_offset;
	int maxsz = p->p_size;
	int sz = (bp->b_bcount + DEV_BSIZE - 1) >> DEV_BSHIFT;
d330 1
a330 1
	if (bp->b_blkno + p->p_offset == LABELSECTOR + labelsect &&
d337 4
a340 3
	if (bp->b_blkno < 0 || bp->b_blkno + sz > maxsz) {
		/* if exactly at end of disk, return an EOF */
		if (bp->b_blkno == maxsz) {
a343 1
		/* or truncate if part of it fits */
d345 1
a345 1
		if (sz <= 0) {
d349 1
d354 2
a355 1
	bp->b_resid = (bp->b_blkno + p->p_offset) / lp->d_secpercyl;
@


1.1.1.1
log
@Import of WGRISC port. (Willowglen R3081 board)
@
text
@@
