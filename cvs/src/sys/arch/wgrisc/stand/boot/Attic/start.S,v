head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2001.02.07.07.47.04;	author art;	state dead;
branches;
next	1.2;

1.2
date	97.07.21.06.58.13;	author pefo;	state Exp;
branches
	1.2.12.1;
next	1.1;

1.1
date	97.05.11.16.17.54;	author pefo;	state Exp;
branches;
next	;

1.2.12.1
date	2001.05.14.21.40.01;	author niklas;	state dead;
branches;
next	;


desc
@@


1.3
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: start.S,v 1.2 1997/07/21 06:58:13 pefo Exp $ */

/*
 * Copyright (c) 1997 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define ABICALLS

#include <machine/regdef.h>
#include <machine/asm.h>

/*
 * Frame required for the debugger (if we have any)
 */
#define START_FRAME	((4 * 4) + 4 + 4)

	.globl	__start
__start:
	.set	noreorder
	la      gp, _gp
	la	sp, __start - START_FRAME		# Stack below program
	sw	zero, START_FRAME - 4(sp)	# Zero out old ra for debugger
	sw	zero, START_FRAME - 8(sp)	# Zero out old fp for debugger
	move	s0, a0				# save argc
	move	s1, a1				# save argv

	la	a0, __start+512			# Merge together from
	la	a1, __start+1024		# disklabel split.
	jal	memcpy
	li	a2, 8192 - 1024

	la	a0, edata			# clear BSS
	li	a1, 0
	la	a2, end
	jal	memset				# memset(edata, 0, end - edata)
	subu	a2, a2, a0

	move	a0, s0				# restore argc
	jal	main				# main(argc, argv)
	move	a1, s1				# restore argv
/* MAIN NEVER RETURNS */


/* dummy routines return 0 */
	.globl	getenv
	.globl	__main
getenv:
__main:
	.set	noreorder
	j	ra
	li	v0, 0

	.globl	strcmp
strcmp:
	.set	noreorder
1:
	lbu	v0, 0(a0)
	lbu	v1, 0(a1)
	beqz	v0, 2f
	addu	a0, a0, 1
	beq	v0, v1, 1b
	addu	a1, a1, 1
2:
	jr	ra
	subu	v0, v0, v1

	.globl	strlen
strlen:
	.set	noreorder
	li	v0, 0
1:
	lbu	v1, 0(a0)
	addu	a0, a0, 1
	bnez	v1, 1b
	addu	v0, v0, 1

	jr	ra
	addu	v0, v0, -1

	.globl	memset
memset:
	.set	noreorder
	move	v0, a0
1:
	beqz	a2, 2f
	addu	a2, a2, -1

	sb	a1, 0(a0)
	b	1b
	addu	a0, a0, 1
2:
	jr	ra
	nop

	.globl	memcpy
memcpy:
	.set	noreorder
	beqz	a2, 3f
	move	v0, a0
	sltu	v1, a1, a0
	beqz	v1, 1f
	li	a3, 1		/* Forward copy */

	li	a3, -1		/* Backwrads copy */
	addu	a0, a2
	b	2f
	addu	a1, a2

1:
	lbu	v1, 0(a1)
	addu	a2, a2, -1
	sb	v1, 0(a0)
2:
	addu	a0, a0, a3
	bnez	a2, 1b
	addu	a1, a1, a3

3:
	jr	ra
	nop

	.globl	twiddle
twiddle:
	.set	noreorder
	la	v0, twc+4
	lw	a0, -4(v0)
	li	a1, 7
	addu	a0, a0, 2
	sw	a0, -4(v0)
	and	a1, a0, a1
	add	a1, a1, v0

	li	a0, 1		/* Stdout */
	b	prom_write
	li	a2, 2

/*
 * Boot rom entrypoints.
 */

#define BOOTVEC 0xbfc00500	/* Address of boot vector table */

	.globl	getchar
getchar:
	.set	noreorder
	sw	ra, 4(sp)

	move	a1, sp
	li	a0, 0
	jal	prom_read
	li	a2, 1

	lw	ra, 4(sp)
	lbu	v0, 0(sp)
	jr	ra
	nop

	.globl	disk_open
disk_open:
	.set	noreorder
	b	__go
	li	v0, 96

	.globl	disk_read
disk_read:
	.set	noreorder
	b	__go
	li	v0, 100

	.globl	prom_read
prom_read:
	.set	noreorder
	b	__go
	li	v0, 0

	.globl	putchar
putchar:
	.set	noreorder
	sb	a0, 0(sp)
	move	a1, sp
	li	a0, 1		/* Stdout */
	li	a2, 1
/* -- fall through -- */
	.globl	prom_write
prom_write:
	.set	noreorder
	b	__go
	li	v0, 4

	.globl	printf
printf:
	.set	noreorder
	b	__go
	li	v0, 20

	.globl	panic
panic:

__go:
	.set	noreorder
	lw	v0, BOOTVEC(v0)
	nop
	jr	v0
	nop

	.align	2
	.globl	twc
twc:	.word	0
tws:	.ascii	"\\\b-\b/\b-\b"

@


1.2
log
@New boot code that fits into the boot record with embedded label.
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.1 1997/05/11 16:17:54 pefo Exp $ */
@


1.2.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: start.S,v 1.2 1997/07/21 06:58:13 pefo Exp $ */
@


1.1
log
@Boot block for the wgrisc!
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d55 5
d69 38
d108 13
a120 1
	j	restart				# restart...
d123 25
a147 3
/* dummy routine for gcc2 */
LEAF(__main)
	j	ra
d149 15
a163 1
END(__main)
d171 4
a174 4
NON_LEAF(getchar, STAND_FRAME_SIZE, ra)
	.mask	0x80000000, (STAND_RA_OFFSET - STAND_FRAME_SIZE)
	subu	sp, sp, STAND_FRAME_SIZE
	sw	ra, STAND_RA_OFFSET(sp)
d178 1
a179 1
	jal	prom_read
d181 1
a182 2
	lw	ra, STAND_RA_OFFSET(sp)
	addu	sp, sp, STAND_FRAME_SIZE
d184 7
a190 1
END(getchar)
d192 15
a206 1
LEAF(putchar)
d211 6
a216 3
	b	prom_write
	
END(putchar)
d218 5
a222 2
LEAF(restart)
END(restart)
d224 2
a225 2
LEAF(panic)
END(panic)
d227 4
a230 2
LEAF(disk_open)
	lw	v0, BOOTVEC+96
d232 1
a232 6
END(disk_open)

LEAF(disk_read)
	lw	v0, BOOTVEC+100
	jr	v0
END(disk_read)
d234 4
a238 9
LEAF(prom_read)
	lw	v0, BOOTVEC+0
	jr	v0
END(prom_read)

LEAF(prom_write)
	lw	v0, BOOTVEC+4
	jr	v0
END(prom_write)
@
