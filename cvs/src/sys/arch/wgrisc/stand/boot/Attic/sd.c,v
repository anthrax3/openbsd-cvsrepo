head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	UBC_SYNC_B:1.5
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.10
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.02.07.07.47.04;	author art;	state dead;
branches;
next	1.4;

1.4
date	2001.01.25.03.50.49;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	98.02.19.20.52.29;	author deraadt;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	97.07.21.06.58.13;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	97.05.11.16.17.54;	author pefo;	state Exp;
branches;
next	;

1.3.10.1
date	2001.05.14.21.40.01;	author niklas;	state dead;
branches;
next	;


desc
@@


1.5
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$NetBSD: sd.c,v 1.6 1995/06/28 10:22:35 jonathan Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Van Jacobson of Lawrence Berkeley Laboratory and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sd.c	8.1 (Berkeley) 6/10/93
 */

#include <stdarg.h>

#include <stand.h>
#include <sys/param.h>
#include <sys/disklabel.h>

int prom_seek __P((int, long, int));
int disk_read __P((int, char *, int, int));
int disk_open __P((char *, int));

struct	sd_softc {
	int	sc_fd;			/* PROM file id */
	int	sc_part;		/* disk partition number */
	struct	disklabel sc_label;	/* disk label for this disk */
};

int
sdstrategy(devdata, rw, bn, reqcnt, addr, cnt)
	void *devdata;
	int rw;
	daddr_t bn;
	u_int reqcnt;
	char *addr;
	u_int *cnt;	/* out: number of bytes transferred */
{
	struct sd_softc *sc = (struct sd_softc *)devdata;
	struct partition *pp = &sc->sc_label.d_partitions[sc->sc_part];
	int s;
	long offset;

	offset = (pp->p_offset + bn) * DEV_BSIZE;

	s = disk_read(sc->sc_fd, addr, offset, reqcnt);
	if (s < 0)
		return (-s);
	*cnt = s;
	return (0);
}

int
sdopen(struct open_file *f, ...)
{
	int ctlr, unit, part;

	struct sd_softc *sc;
	struct disklabel *lp;
	int i, fd;
	char *msg = "rd err";
	char buf[DEV_BSIZE];
	int cnt;
	daddr_t labelsector;
	static char device[] = "sd(0)";
	va_list ap;

	va_start(ap, f);

	ctlr = va_arg(ap, int);
	unit = va_arg(ap, int);
	part = va_arg(ap, int);
	if (unit >= 7 || part >= 16)
		return (ENXIO);

	device[3] = unit + '0';
	fd = disk_open(device, 0);
	if (fd < 0) {
		return (ENXIO);
	}

	sc = alloc(sizeof(struct sd_softc));
	bzero(sc, sizeof(struct sd_softc));
	f->f_devdata = (void *)sc;

	sc->sc_fd = fd;
	sc->sc_part = part;

	lp = &sc->sc_label;
	lp->d_secsize = DEV_BSIZE;
	lp->d_secpercyl = 1;
	lp->d_npartitions = MAXPARTITIONS;
	lp->d_partitions[part].p_offset = 0;
	lp->d_partitions[part].p_size = 0x7fff0000;

	labelsector = LABELSECTOR;

#ifdef USE_DOSBBSECTOR
	/* First check for any DOS partition table */
	i = sdstrategy(sc, F_READ, (daddr_t)DOSBBSECTOR, DEV_BSIZE, buf, &cnt);
	if (!(i || cnt != DEV_BSIZE)) {
		struct dos_partition dp, *dp2;
		bcopy(buf + DOSPARTOFF, &dp, NDOSPART * sizeof(dp));
		for (dp2=&dp, i=0; i < NDOSPART; i++, dp2++) {
			if (dp2->dp_size) {
				if((dp2->dp_typ == DOSPTYP_OPENBSD) ||
				   (dp2->dp_typ == DOSPTYP_FREEBSD)) {
					labelsector += dp2->dp_start;
					break;
				}
			}
		}
	}
	else {
		goto bad;
	}
#endif


	/* try to read disk label and partition table information */
	i = sdstrategy(sc, F_READ, (daddr_t)labelsector, DEV_BSIZE, buf, &cnt);
	if (i || cnt != DEV_BSIZE) {
		goto bad;
	}
	msg = getdisklabel(buf, lp);
	if (msg) {
		goto bad;
	}

	if (part >= lp->d_npartitions || lp->d_partitions[part].p_size == 0) {
		msg = "no part";
bad:
		printf("sd%d: %s\n", unit, msg);
		return (ENXIO);
	}
	return (0);
}

int
sdclose(f)
	struct open_file *f;
{
#ifdef FANCY
	free(f->f_devdata, sizeof(struct sd_softc));
	f->f_devdata = (void *)0;
#endif
	return (0);
}
@


1.4
log
@spelling
@
text
@@


1.3
log
@partition name change
@
text
@d64 1
a64 1
	u_int *cnt;	/* out: number of bytes transfered */
@


1.3.10.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@@


1.2
log
@New boot code that fits into the boot record with embedded label.
@
text
@d133 2
a134 2
				if((dp2->dp_typ == DOSPTYP_386BSD) ||
				   (dp2->dp_typ == DOSPTYP_OPENBSD)) {
@


1.1
log
@Boot block for the wgrisc!
@
text
@a52 2
	int	sc_ctlr;		/* controller number */
	int	sc_unit;		/* disk unit number */
d67 1
a67 2
	int part = sc->sc_part;
	struct partition *pp = &sc->sc_label.d_partitions[part];
d71 1
a71 11
	offset = bn * DEV_BSIZE;

	/*
	 * Partial-block transfers not handled.
	 */
	if (reqcnt & (DEV_BSIZE - 1)) {
		*cnt = 0;
		return (EINVAL);
	}

	offset += pp->p_offset * DEV_BSIZE;
d74 3
a76 6
#if 0 /* XXX error code not returned yet... */
	if (s <= 0)
		return (EIO);
#endif

	*cnt = reqcnt;
a86 1
	struct dos_partition dp, *dp2;
d88 1
a88 1
	char *msg;
a113 2
	sc->sc_ctlr = ctlr;
	sc->sc_unit = unit;
d121 3
a123 1
	lp->d_partitions[part].p_size = 0x7fffffff;
d125 1
d128 11
a138 10
	if (i || cnt != DEV_BSIZE) {
		printf("sd%d: error reading disk label\n", unit);
		goto bad;
	}
	labelsector = 0;
	bcopy(buf + DOSPARTOFF, &dp, NDOSPART * sizeof(dp));
	for (dp2=&dp, i=0; i < NDOSPART; i++, dp2++) {
		if (dp2->dp_size && dp2->dp_typ == DOSPTYP_OPENBSD) {
			labelsector = dp2->dp_start;
			break;
d141 2
a142 5
	for (dp2=&dp, i=0; i < NDOSPART; i++, dp2++) {
		if (dp2->dp_size && dp2->dp_typ == DOSPTYP_386BSD) {
			labelsector = dp2->dp_start;
			break;
		}
d144 1
a147 1
	labelsector += LABELSECTOR;
a149 1
		printf("sd%d: error reading disk label\n", unit);
a153 1
		printf("sd%d: %s\n", unit, msg);
d158 3
a160 4
	bad:
#ifndef SMALL
		free(sc, sizeof(struct sd_softc));
#endif
d170 1
d173 1
@
