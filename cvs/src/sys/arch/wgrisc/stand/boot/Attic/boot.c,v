head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.12
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2001.02.07.07.47.03;	author art;	state dead;
branches;
next	1.2;

1.2
date	97.07.21.06.58.12;	author pefo;	state Exp;
branches
	1.2.12.1;
next	1.1;

1.1
date	97.05.11.16.17.52;	author pefo;	state Exp;
branches;
next	;

1.2.12.1
date	2001.05.14.21.39.59;	author niklas;	state dead;
branches;
next	;


desc
@@


1.3
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: boot.c,v 1.2 1997/07/21 06:58:12 pefo Exp $ */

/*
 * Copyright (c) 1997 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/stat.h>
#include <sys/exec.h>
#include <sys/exec_elf.h>
#include <stand.h>
#include <errno.h>


void gets __P((char *));
ssize_t read __P((int, void *, size_t));
int close __P((int));
void prom_write __P((int, char *, int));

void main __P((int, char **));
int loadfile __P((char *));
/*
 */
void
main(argc, argv)
	int argc;
	char **argv;
{
static char boot[] = {"Boot:"};
	char *cp = boot;
	int   ask, entry;
	char  line[1024];

	ask = 1;

	if(strcmp(argv[0], "man") != 0) {
		cp = argv[0];
		ask = 0;
	}
	while(1) {
		do {
			printf("%s\n", cp);
			if (ask) {
				gets(line);
				cp = line;
				argv[0] = cp;
				argc = 1;
			}
		} while(ask && line[0] == '\0');

		entry = loadfile(cp);
		if (entry != -1) {
			((void (*)())entry)(argc, argv, 0, 0);
		}
		ask = 1;
		cp = boot;
	}
}

/*
 * Open 'filename', read in program and return the entry point or -1 if error.
 */
int
loadfile(fname)
	register char *fname;
{
	int fd, i;
	Elf32_Ehdr eh;
	Elf32_Phdr *ph;
	u_long phsize;
	char *errs = 0;

	if ((fd = oopen(fname, 0)) < 0) {
		errs="open(%s) err: %d\n";
		goto err;
	}

	/* read the elf header */
	if(oread(fd, (char *)&eh, sizeof(eh)) != sizeof(eh)) {
		goto serr;
	}

	phsize = eh.e_phnum * sizeof(Elf32_Phdr);
	ph = (Elf32_Phdr *) alloc(phsize);
	olseek(fd, eh.e_phoff, 0);
	if(oread(fd, (char *)ph, phsize) != phsize) {
		goto serr;
	}

	for(i = 0; i < eh.e_phnum; i++, ph++) {
		if(ph->p_type == PT_LOAD) {
			olseek(fd, ph->p_offset, 0);
			if(oread(fd, (char *)ph->p_paddr, ph->p_filesz) !=  ph->p_filesz) {
				goto serr;
			}
		}
	}
	return(eh.e_entry);
serr:
	errs = "rd(%s) sz err\n";
err:
	printf(errs, fname, errno);
	return (-1);
}

@


1.2
log
@New boot code that fits into the boot record with embedded label.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.2.12.1
log
@Continue the aborted merge of current just before 2.9 was cut into the
SMP branch.  Note that this will not make any progress of SMP functionality,
it is just merging of new code from the trunk into the old branch.
Please do not ask me questions about SMP status because of this mail,
instead go read the archives of smp@@openbsd.org, where I mailed about
these commits some week ago.  Another note: I am doing this in chunks now,
so as to not lock too much of the tree for long times
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2 1997/07/21 06:58:12 pefo Exp $ */
@


1.1
log
@Boot block for the wgrisc!
@
text
@d1 1
a1 1
/*	$NetBSD: boot.c,v 1.6 1995/06/28 10:22:32 jonathan Exp $	*/
d4 2
a5 6
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
d16 4
a19 5
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d21 5
a25 5
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
a32 1
 *	@@(#)boot.c	8.1 (Berkeley) 6/10/93
a42 1
char	line[1024];
d48 1
a48 1
int main __P((int, char **));
a50 6
 * This gets arguments from the PROM, calls other routines to open
 * and load the program to boot, and then transfers execution to that
 * new program.
 * Argv[0] should be something like "rz(0,0,0)vmunix" on a DECstation 3100.
 * Argv[0,1] should be something like "boot 5/rz0/vmunix" on a DECstation 5000.
 * The argument "-a" means vmunix should do an automatic reboot.
d52 1
a52 1
int
d57 2
a58 1
	char *cp = 0;
d60 1
d70 1
a70 1
			printf("Boot: ");
d76 1
a76 2
			} else
				printf("%s\n", cp);
a80 1
			printf("Starting at 0x%x\n\n", entry);
d83 2
a85 1
	return(0);
d99 1
d102 1
a102 1
		printf("open(%s) failed: %d\n", fname, errno);
d118 4
a121 5
	for(i = 0; i < eh.e_phnum; i++) {
		switch (ph[i].p_type) {
		case PT_LOAD:
			olseek(fd, ph[i].p_offset, 0);
			if(oread(fd, (char *)ph[i].p_paddr, ph[i].p_filesz) !=  ph[i].p_filesz) {
a123 3
			break;
		default:
			break;
a125 1
	(void) oclose(fd);
d128 1
a128 1
	printf("Read size error\n");
d130 1
a130 2
	printf("Can't boot '%s'\n", fname);
	(void) oclose(fd);
d133 1
@
