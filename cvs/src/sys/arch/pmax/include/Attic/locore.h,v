head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	OPENBSD_2_9:1.5.0.14
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.8
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2001.06.24.23.48.17;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	98.05.08.19.02.31;	author millert;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	97.06.10.14.19.00;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.15.18.14;	author graichen;	state Exp;
branches;
next	1.2;

1.2
date	96.09.29.11.36.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.09.15.21.12.48;	author deraadt;	state Exp;
branches;
next	;

1.5.8.1
date	2001.07.04.10.21.23;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@bye bye, with prejudice
@
text
@/*	$NetBSD: locore.h,v 1.3 1996/10/13 21:37:35 jonathan Exp $	*/

/*
 * Copyright 1996 The Board of Trustees of The Leland Stanford
 * Junior University. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  Stanford University
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

/*
 * Jump table for MIPS cpu locore functions that are implemented
 * differently on different generations, or instruction-level
 * archtecture (ISA) level, the Mips family.
 * The following functions must be provided for each mips ISA level:
 *
 * 
 *	MachConfigCache
 *	MachFlushCache
 *	MachFlushDCache
 *	MachFlushICache
 *	MachForceCacheUpdate
 *	MachSetPID
 *	MachTLBFlush
 *	MachTLBFlushAddr __P()
 *	MachTLBUpdate (u_int, (pt_entry_t?) u_int);
 *	MachTLBWriteIndexed
 *
 * We currently provide support for:
 *
 *	r2000 and r3000 (mips ISA-I)
 *	r4000 and r4400 in 32-bit mode (mips ISA-III?)
 */

#ifndef _MIPS_LOCORE_H
#define  _MIPS_LOCORE_H

/*
 * locore functions used by vm_machdep.c.
 * These are not yet CPU-model specific.
 */

struct user;
extern int  copykstack __P((struct user *up));
extern void MachSaveCurFPState __P((struct proc *p));
extern void blkclr __P((caddr_t val, int size));   /* bulk aligned bzero */

/* MIPS-generic locore functions used by trap.c */
 extern void MachFPTrap __P((u_int statusReg, u_int CauseReg, u_int pc));

/*
 * locore service routine for exeception vectors. Used outside locore
 * only to print them by name in stack tracebacks
 */

extern void mips1_KernIntr __P((void));

extern void mips1_ConfigCache  __P((void));
extern void mips1_FlushCache  __P((void));
extern void mips1_FlushDCache  __P((vm_offset_t addr, vm_offset_t len));
extern void mips1_FlushICache  __P((vm_offset_t addr, vm_offset_t len));
extern void mips1_ForceCacheUpdate __P((void));
extern void mips1_SetPID   __P((int pid));
extern void mips1_TLBFlush __P((void));
extern void mips1_TLBFlushAddr   __P( /* XXX Really pte highpart ? */
					  (vm_offset_t addr));
extern void mips1_TLBUpdate __P((u_int, /*pt_entry_t*/ u_int));
extern void mips1_TLBWriteIndexed  __P((u_int index, u_int high,
					    u_int low));

extern void mips3_KernIntr __P((void));
extern void mips3_ConfigCache __P((void));
extern void mips3_FlushCache  __P((void));
extern void mips3_FlushDCache __P((vm_offset_t addr, vm_offset_t len));
extern void mips3_FlushICache __P((vm_offset_t addr, vm_offset_t len));
extern void mips3_ForceCacheUpdate __P((void));
extern void mips3_SetPID  __P((int pid));
extern void mips3_TLBFlush __P((void));
extern void mips3_TLBFlushAddr __P( /* XXX Really pte highpart ? */
					  (vm_offset_t addr));
extern void mips3_TLBUpdate __P((u_int, /*pt_entry_t*/ u_int));
extern void mips3_TLBWriteIndexed __P((u_int index, u_int high,
					    u_int low));

/*
 *  A vector with an entry for each mips-ISA-level dependent
 * locore function, and macros which jump through it.
 * XXX the macro names are chosen to be compatible with the old
 * Sprite  coding-convention names used in 4.4bsd/pmax.
 */
typedef struct  {
	void (*configCache) __P((void));
	void (*flushCache)  __P((void));
	void (*flushDCache) __P((vm_offset_t addr, vm_offset_t len));
	void (*flushICache) __P((vm_offset_t addr, vm_offset_t len));
	void (*forceCacheUpdate)  __P((void));
	void (*setTLBpid)  __P((int pid));
	void (*tlbFlush)  __P((void));
	void (*tlbFlushAddr)  __P((vm_offset_t)); /* XXX Really pte highpart ? */
	void (*tlbUpdate)  __P((u_int highreg, u_int lowreg));
	void (*tlbWriteIndexed)  __P((u_int, u_int, u_int));
} mips_locore_jumpvec_t;


/*
 * The "active" locore-fuction vector, and

 */
extern mips_locore_jumpvec_t mips_locore_jumpvec;
extern mips_locore_jumpvec_t r2000_locore_vec;
extern mips_locore_jumpvec_t r4000_locore_vec;

#define MachConfigCache		(*(mips_locore_jumpvec.configCache))
#define MachFlushCache		(*(mips_locore_jumpvec.flushCache))
#define MachFlushDCache		(*(mips_locore_jumpvec.flushDCache))
#define MachFlushICache		(*(mips_locore_jumpvec.flushICache))
#define MachForceCacheUpdate	(*(mips_locore_jumpvec.forceCacheUpdate))
#define MachSetPID		(*(mips_locore_jumpvec.setTLBpid))
#define MachTLBFlush		(*(mips_locore_jumpvec.tlbFlush))
#define MachTLBFlushAddr	(*(mips_locore_jumpvec.tlbFlushAddr))
#define MachTLBUpdate		(*(mips_locore_jumpvec.tlbUpdate))
#define MachTLBWriteIndexed	(*(mips_locore_jumpvec.tlbWriteIndexed))

#endif	/* _MIPS_LOCORE_H */
@


1.5
log
@remove conflicting decl of switch_exit
@
text
@@


1.5.8.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


1.4
log
@update the pmax specific stuff to NetBSD-current as of about 970608 - some
cosmetic things will follow together with an update to an exact NETBSD_CU-
RRENT_xxxxxx level
@
text
@a50 1
extern int switch_exit __P((void)); /* XXX never really returns? */
@


1.3
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d52 1
@


1.2
log
@merge mips back into pmax; by graichen
@
text
@d1 1
a1 1
/*	$NetBSD: locore.h,v 1.2 1996/05/20 23:38:26 jonathan Exp $	*/
d61 1
a61 1
extern void mips_r2000_KernIntr __P(());
d63 8
a70 8
extern void mips_r2000_ConfigCache  __P((void));
extern void mips_r2000_FlushCache  __P((void));
extern void mips_r2000_FlushDCache  __P((vm_offset_t addr, vm_offset_t len));
extern void mips_r2000_FlushICache  __P((vm_offset_t addr, vm_offset_t len));
extern void mips_r2000_ForceCacheUpdate __P((void));
extern void mips_r2000_SetPID   __P((int pid));
extern void mips_r2000_TLBFlush __P((void));
extern void mips_r2000_TLBFlushAddr   __P( /* XXX Really pte highpart ? */
d72 2
a73 2
extern void mips_r2000_TLBUpdate __P((u_int, /*pt_entry_t*/ u_int));
extern void mips_r2000_TLBWriteIndexed  __P((u_int index, u_int high,
d76 9
a84 8
extern void mips_r4000_ConfigCache __P((void));
extern void mips_r4000_FlushCache  __P((void));
extern void mips_r4000_FlushDCache __P((vm_offset_t addr, vm_offset_t len));
extern void mips_r4000_FlushICache __P((vm_offset_t addr, vm_offset_t len));
extern void mips_r4000_ForceCacheUpdate __P((void));
extern void mips_r4000_SetPID  __P((int pid));
extern void mips_r4000_TLBFlush __P((void));
extern void mips_r4000_TLBFlushAddr __P( /* XXX Really pte highpart ? */
d86 2
a87 2
extern void mips_r4000_TLBUpdate __P((u_int, /*pt_entry_t*/ u_int));
extern void mips_r4000_TLBWriteIndexed __P((u_int index, u_int high,
@


1.1
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: locore.h,v 1.2 1996/05/20 23:49:11 jonathan Exp $	*/
d14 19
d34 60
a93 1
 * This file contributed by Jonathan Stone
d95 32
d128 1
a128 1
#include <mips/locore.h>
@
