head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	UBC_SYNC_B:1.5
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.06.24.23.48.26;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	96.12.22.15.18.18;	author graichen;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	96.09.29.11.36.39;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.09.15.21.12.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.31;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2001.07.04.10.21.30;	author niklas;	state dead;
branches;
next	;


desc
@@


1.5
log
@bye bye, with prejudice
@
text
@/*	$NetBSD: reloc.h,v 1.6 1996/10/07 03:15:03 jonathan Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)reloc.h	8.1 (Berkeley) 6/10/93
 *
 * from: Header: reloc.h,v 1.6 92/06/20 09:59:37 torek Exp
 */

#ifndef __MIPS_RELOC_H__
#define __MIPS_RELOC_H__
/*
 * MIPS relocation types.
 */
enum reloc_type {
	MIPS_RELOC_32,		/* 32-bit absolute */
	MIPS_RELOC_JMP,		/* 26-bit absolute << 2 | high 4 bits of pc */
	MIPS_RELOC_WDISP16,	/* 16-bit signed pc-relative << 2 */
	MIPS_RELOC_HI16,	/* 16-bit absolute << 16 */
	MIPS_RELOC_HI16_S,	/* 16-bit absolute << 16 (+1 if needed) */
	MIPS_RELOC_LO16,	/* 16-bit absolute */
};

/*
 * MIPS relocation info.
 *
 * Symbol-relative relocation is done by:
 *	1. start with the value r_addend,
 *	2. locate the appropriate symbol and if defined, add symbol value,
 *	3. if pc relative, subtract pc,
 *	4. if the reloc_type is MIPS_RELOC_HI16_S and the result bit 15 is set,
 *		add 0x00010000,
 *	5. shift down 2 or 16 if necessary.
 * The resulting value is then to be stuffed into the appropriate bits
 * in the object (the low 16, or the low 26 bits).
 */
struct reloc_info_mips {
	u_long	r_address;	/* relocation addr (offset in segment) */
	u_int	r_index:24,	/* segment (r_extern==0) or symbol index */
		r_extern:1,	/* if set, r_index is symbol index */
		:2;		/* unused */
	enum reloc_type r_type:5; /* relocation type, from above */
	long	r_addend;	/* value to add to symbol value */
};

/* For the pmax we only use the next line TTTTT  */
/* #define relocation_info reloc_info_mips       */

#define relocation_info_pmax reloc_info_mips
#endif /* __MIPS_RELOC_H__ */
@


1.4
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@@


1.4.14.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


1.3
log
@merge mips back into pmax; by graichen
@
text
@d1 1
a1 1
/*	$NetBSD: reloc.h,v 1.5 1996/03/19 22:18:45 jonathan Exp $	*/
d40 2
d76 3
a78 1
#define relocation_info reloc_info_mips
d80 1
@


1.2
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: reloc.h,v 1.6 1996/03/20 09:49:29 jonathan Exp $	*/
d3 36
a38 1
#include <mips/reloc.h>
d40 35
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: reloc.h,v 1.4 1994/10/26 21:09:59 cgd Exp $	*/
d3 1
a3 36
/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)reloc.h	8.1 (Berkeley) 6/10/93
 *
 * from: Header: reloc.h,v 1.6 92/06/20 09:59:37 torek Exp
 */
d5 1
a5 35
/*
 * MIPS relocation types.
 */
enum reloc_type {
	MIPS_RELOC_32,		/* 32-bit absolute */
	MIPS_RELOC_JMP,		/* 26-bit absolute << 2 | high 4 bits of pc */
	MIPS_RELOC_WDISP16,	/* 16-bit signed pc-relative << 2 */
	MIPS_RELOC_HI16,	/* 16-bit absolute << 16 */
	MIPS_RELOC_HI16_S,	/* 16-bit absolute << 16 (+1 if needed) */
	MIPS_RELOC_LO16,	/* 16-bit absolute */
};

/*
 * MIPS relocation info.
 *
 * Symbol-relative relocation is done by:
 *	1. start with the value r_addend,
 *	2. locate the appropriate symbol and if defined, add symbol value,
 *	3. if pc relative, subtract pc,
 *	4. if the reloc_type is MIPS_RELOC_HI16_S and the result bit 15 is set,
 *		add 0x00010000,
 *	5. shift down 2 or 16 if necessary.
 * The resulting value is then to be stuffed into the appropriate bits
 * in the object (the low 16, or the low 26 bits).
 */
struct reloc_info_pmax {
	u_long	r_address;	/* relocation addr (offset in segment) */
	u_int	r_index:24,	/* segment (r_extern==0) or symbol index */
		r_extern:1,	/* if set, r_index is symbol index */
		:2;		/* unused */
	enum reloc_type r_type:5; /* relocation type, from above */
	long	r_addend;	/* value to add to symbol value */
};

#define relocation_info reloc_info_pmax
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
