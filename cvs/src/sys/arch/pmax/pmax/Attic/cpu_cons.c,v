head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	UBC_SYNC_B:1.9
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2001.06.24.23.48.35;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2001.04.17.04.30.48;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.19.18.43.31;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.01.22.25.47;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	97.06.10.14.20.07;	author graichen;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	96.12.22.15.18.28;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.21.13.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.05.13.41.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.32;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2001.04.18.16.12.46;	author niklas;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2001.07.04.10.21.38;	author niklas;	state dead;
branches;
next	;


desc
@@


1.9
log
@bye bye, with prejudice
@
text
@/*	$OpenBSD: cpu_cons.c,v 1.8 2001/04/17 04:30:48 aaron Exp $	*/
/*	$NetBSD: cpu_cons.c,v 1.17 1997/05/24 08:19:48 jonathan Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah Hdr: cons.c 1.1 90/07/09
 *
 *	@@(#)cons.c	8.2 (Berkeley) 1/11/94
 */

#include <sys/param.h>
#include <sys/device.h>
#include <dev/cons.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/file.h>
#include <sys/conf.h>

#include <pmax/stand/dec_prom.h>

#include <pmax/pmax/kn01.h>
#include <pmax/pmax/kn02.h>
#include <pmax/pmax/kmin.h>
#include <pmax/pmax/kn03.h>
#include <pmax/pmax/asic.h>
#include <pmax/pmax/turbochannel.h>
#include <pmax/pmax/pmaxtype.h>

#include <machine/machConst.h>
#include <machine/pmioctl.h>

#include <machine/fbio.h>
#include <machine/fbvar.h>

#include <pmax/dev/fbreg.h>

#include <machine/autoconf.h>
#include <pmax/dev/lk201var.h>
#include <dev/tc/tcvar.h>

#include "pm.h"
#include "cfb.h"
#include "mfb.h"
#include "xcfb.h"
#include "sfb.h"
#include "dz_ds.h"
#include "dz_ioasic.h"
#include "dtop.h"
#include "scc.h"
#include "asc.h"
#include "tc.h"
#include  "rasterconsole.h"

#if (NDZ_DS > 0) || (NDZ_IOASIC > 0)
#include <machine/dc7085cons.h>
#include <pmax/dev/dz_cons.h>
#include <pmax/dev/dz_ds_cons.h>
#include <pmax/dev/dz_ioasic_cons.h>
#endif

#if NDTOP > 0
#include <pmax/dev/dtopvar.h>
#endif

#if NSCC > 0
#include <pmax/tc/sccvar.h>
#endif

#if NPM > 0
#include <pmax/dev/pmvar.h>
#endif

#if NXCFB > 0
#include <pmax/dev/xcfbvar.h>
#endif


static int romgetc __P ((dev_t));
static void romputc __P ((dev_t, int));
static void rompollc __P((dev_t, int));


extern int	pmax_boardtype;		/* Mother board type */

/*
 * Major device numbers for possible console devices. XXX
 */
#define	DTOPDEV		15
#define	DCDEV		16
#define	SCCDEV		17
#define RCONSDEV	85

/*
 * Console I/O is redirected to the appropriate device, either a screen and
 * keyboard, a serial port, or the "virtual" console.
 */

extern struct consdev *cn_tab;	/* Console I/O table... */
extern void rcons_vputc __P((dev_t, int));	/* XXX */

struct consdev cd = {
	(void (*)(struct consdev *))0,		/* probe */
	(void (*)(struct consdev *))0,		/* init */
	(int  (*)(dev_t))     romgetc,		/* getc */
	(void (*)(dev_t, int))romputc,		/* putc */
	(void (*)(dev_t, int))rompollc,		/* pollc */
	NULL,
	makedev (0, 0),
	CN_DEAD,
};

/*
 * Should be locals of consinit, but that's split in two until
 * new-style config is finished
 */

/*
 * Forward declarations
 */

void consinit __P((void));
void xconsinit __P((void));


extern struct tc_cpu_desc *  cpu_tcdesc __P ((int cputype));


int kbd;
int pending_remcons = 0;

/*
 * Console initialization: called early on from main,
 * before vm init or startup.  Do enough configuration
 * to choose and initialize a console.
 */
void
consinit()
{
	int crt;
	register char *oscon;
	int screen = 0;

#ifdef RCONS_HACK
	extern void (*v_putc) __P ((dev_t, int));
#endif
	cn_tab = &cd;


	/*
	 * First get the "osconsole" environment variable.
	 */
	oscon = (*callv->_getenv)("osconsole");
	crt = kbd = -1;
	if (oscon && *oscon >= '0' && *oscon <= '9') {
		kbd = *oscon - '0';
		/*cn_tab.cn_pri = CN_DEAD;*/
		screen = 0;
		while (*++oscon) {
			if (*oscon == ',')
				/*cn_tab.cn_pri = CN_INTERNAL;*/
				screen = 1;
			else if (screen &&
			    *oscon >= '0' && *oscon <= '9') {
				crt = kbd;
				kbd = *oscon - '0';
				break;
			}
		}
	}

	/*
	 * We can't do anything until auto-configuration
	 * has run, and that requires kmalloc(), which
	 * hasn't been initialized yet.  Just keep using
	 * whatever the PROM vector gave us.
	 */

#if NRASTERCONSOLE > 0
	if (pmax_boardtype == DS_PMAX && kbd == 1)
		screen = 1;
	/*
	 * The boot program uses PMAX ROM entrypoints so the ROM sets
	 * osconsole to '1' like the PMAX.
	 */
	if (pmax_boardtype == DS_3MAX && crt == -1 && kbd == 1) {
		/* Try to use pmax onboard framebuffer */
		screen = 1;
		crt = 0;
		kbd = 7;
	}

	/*
	 * First try the keyboard/crt cases then fall through to the
	 * remote serial lines.
	 */
	if (screen) {
	    switch (pmax_boardtype) {
	    case DS_PMAX:
#if NDZ_DS > 0 && NPM > 0
		if (pminit(0, 0, 1)) {
			cd.cn_pri = CN_INTERNAL;
			cd.cn_dev = makedev(DCDEV, DCKBD_PORT);
			cd.cn_getc = LKgetc;
			lk_divert(dzGetc, makedev(DCDEV, DCKBD_PORT));
			cd.cn_putc = rcons_vputc;	/*XXX*/
			return;
		}
#endif /* NDZ_DS and NPM */
		goto remcons;

	    case DS_MAXINE:
#if NDTOP > 0
		if (kbd == 3) {
			cd.cn_dev = makedev(DTOPDEV, 0);
			cd.cn_getc = dtopKBDGetc;
		} else
#endif /* NDTOP */
			goto remcons;
#if NXCFB > 0
		if (crt == 3 && xcfbinit(NULL, NULL, 0, 0)) {
			cd.cn_pri = CN_INTERNAL;
			cd.cn_putc = rcons_vputc;	/*XXX*/
			return;
		}
#endif /* XCFB */
		break;

	    case DS_3MAX:
#if NDZ_IOASIC > 0
		if (kbd == 7) {
			cd.cn_dev = makedev(DCDEV, DCKBD_PORT);
			cd.cn_getc = LKgetc;
			lk_divert(dzGetc, makedev(DCDEV, DCKBD_PORT));
		} else
#endif /* NDZ_IOASIC */
			goto remcons;
		break;

	    case DS_3MIN:
	    case DS_3MAXPLUS:
#if NSCC > 0
		if (kbd == 3) {
			/*cd.cn_dev = makedev (RCONSDEV, 0);*/
			cd.cn_dev =  makedev(SCCDEV, SCCKBD_PORT);
			lk_divert(sccGetc, makedev(SCCDEV, SCCKBD_PORT));
			cd.cn_getc = LKgetc;
		} else
#endif /* NSCC */
			goto remcons;
		break;

	    default:
		goto remcons;
	    };


	    /*
	     * Check for a suitable turbochannel frame buffer.
	     */
#if NTC>0
	    if (tc_findconsole(crt)) {
			cd.cn_pri = CN_NORMAL;
#ifdef RCONS_HACK
/* FIXME */		cd.cn_putc = v_putc;
			cd.cn_dev = makedev (RCONSDEV, 0);
#endif /* RCONS_HACK */
			cd.cn_putc = rcons_vputc;	/*XXX*/
			return;
	    } else
#endif
		printf("No crt console device in slot %d\n", crt);
	}


remcons:

#endif	/* NRASTERCONSOLE > 0 */

	/*
	 * Configure a serial port as a remote console.
	 */
	switch (pmax_boardtype) {
	case DS_PMAX:
#if NDZ_DS > 0
		if (kbd == 4)
			cd.cn_dev = makedev(DCDEV, DCCOMM_PORT);
		else
			cd.cn_dev = makedev(DCDEV, DCPRINTER_PORT);
		dz_ds_consinit(cd.cn_dev);
		return;
#endif /* NDZ_DS */
		break;

	case DS_3MAX:
#if (NDZ_IOASIC > 0)
		cd.cn_dev = makedev(DCDEV, DCPRINTER_PORT);
		dz_ioasic_consinit(cd.cn_dev);
		return;
#endif /* NDZ */
		break;

	}

	/*
	 * XXX
	 * scc serial drivers need to be rewritten to handle init this early.
	 * Defer switching to non-PROM driver until after serial device
	 * is configured normally.
	 */
	pending_remcons = 1;
	printf("Using PROM serial output until serial drivers initialized\n");

	/* We never changed output; go back to using PROM input */
	cd.cn_dev = makedev (0, 0);
	cd.cn_getc = /*(int (*)(dev_t)) */ romgetc;
}


/*
 * Configure a serial port as a remote console.
 * Called by configure() to switch from PROM I/O when the serial
 * device-driver cannot be set up as a serial console until
 * autoconfiguration is done.  (i.e., only needed for scc serial driver.)
 */
void
xconsinit()
{
	if (!pending_remcons)
		return;

	pending_remcons = 0;
	switch (pmax_boardtype) {
	case DS_3MIN:
	case DS_3MAXPLUS:
#if NSCC > 0
		cd.cn_dev = makedev(SCCDEV, SCCCOMM3_PORT);
		cd.cn_getc = sccGetc;
		cd.cn_putc = sccPutc;
		cd.cn_pri = CN_REMOTE;
#endif /* NSCC */
		break;

	case DS_MAXINE:
#if NSCC > 0
		cd.cn_dev = makedev(SCCDEV, SCCCOMM2_PORT);
		cd.cn_getc = sccGetc;
		cd.cn_putc = sccPutc;
		cd.cn_pri = CN_REMOTE;
#endif /* NSCC */
		break;
	};
	if (cd.cn_dev == NODEV)
		printf("Can't configure console!\n");
}



/*
 * Get character from ROM console.
 */
static int
romgetc(dev)
	dev_t dev;
{
	int s = splhigh ();
	int chr;
	chr = (*callv->_getchar)();
	splx (s);
	return chr;
}

/*
 * Print a character on ROM console.
 */
static void
romputc (dev, c)
	dev_t dev;
	register int c;
{
	int s;
	s = splhigh();
	(*callv->_printf)("%c", c);
	splx(s);
}

static void
rompollc (dev, c)
	dev_t dev;
	register int c;
{
	return;
}


#ifdef notanymore
/*
 * select() on a possibly-redirected console.
 */

extern struct	tty *constty;		/* virtual console output device */
extern struct	consdev *cn_tab;	/* physical console device info */
extern struct	vnode *cn_devvp;	/* vnode for underlying device. */

/*ARGSUSED*/
int
pmax_cnselect(dev, rw, p)
	dev_t dev;
	int rw;
	struct proc *p;
{

	/*
	 * Redirect the ioctl, if that's appropriate.
	 * I don't want to think of the possible side effects
	 * of console redirection here.
	 */
	if (constty != NULL && (cn_tab == NULL || cn_tab->cn_pri != CN_REMOTE))
		dev = constty->t_dev;
	else if (cn_tab == NULL)
		return ENXIO;
	else
		dev = cn_tab->cn_dev;
#ifdef RCONS
	if (cn_tab -> cn_dev == makedev (85, 0))
		return rconsselect (cn_tab -> cn_dev, rw, p);
#endif
	return (ttselect(cn_tab->cn_dev, rw, p));
}
#endif /* notanymore */
@


1.8
log
@Implement cnbell(), an optional entrypoint that rings the console bell; from
NetBSD. deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu_cons.c,v 1.7 2000/08/19 18:43:31 maja Exp $	*/
@


1.7
log
@Late in the release of OpenBSD/pmax 2.7 a conflict between the pmax
dc driver and the generic if_dc driver was found. The fix was to
change the pmax drivers name to dz instead. But this was only done
in a miminal way.

This commit will switch over and use the new dz driver.

-moj
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d145 1
@


1.6
log
@changed dc to dz to avoid conflict with if_dc. -moj
@
text
@d1 1
d94 3
a96 3
#include <pmax/dev/dc_cons.h>
#include <pmax/dev/dc_ds_cons.h>
#include <pmax/dev/dc_ioasic_cons.h>
d241 1
a241 1
			lk_divert(dcGetc, makedev(DCDEV, DCKBD_PORT));
d270 1
a270 1
			lk_divert(dcGetc, makedev(DCDEV, DCKBD_PORT));
d326 1
a326 1
		dc_ds_consinit(cd.cn_dev);
d334 1
a334 1
		dc_ioasic_consinit(cd.cn_dev);
@


1.5
log
@update the pmax specific stuff to NetBSD-current as of about 970608 - some
cosmetic things will follow together with an update to an exact NETBSD_CU-
RRENT_xxxxxx level
@
text
@d83 2
a84 2
#include "dc_ds.h"
#include "dc_ioasic.h"
d91 1
a91 1
#if (NDC_DS > 0) || (NDC_IOASIC > 0)
d235 1
a235 1
#if NDC_DS > 0 && NPM > 0
d244 1
a244 1
#endif /* NDC_DS and NPM */
d265 1
a265 1
#if NDC_IOASIC > 0
d271 1
a271 1
#endif /* NDC_IOASIC */
d320 1
a320 1
#if NDC_DS > 0
d327 1
a327 1
#endif /* NDC_DS */
d331 1
a331 1
#if (NDC_IOASIC > 0)
d335 1
a335 1
#endif /* NDC */
@


1.5.12.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@a0 1
/*	$OpenBSD: cpu_cons.c,v 1.8 2001/04/17 04:30:48 aaron Exp $	*/
d83 2
a84 2
#include "dz_ds.h"
#include "dz_ioasic.h"
d91 1
a91 1
#if (NDZ_DS > 0) || (NDZ_IOASIC > 0)
d93 3
a95 3
#include <pmax/dev/dz_cons.h>
#include <pmax/dev/dz_ds_cons.h>
#include <pmax/dev/dz_ioasic_cons.h>
a143 1
	NULL,
d235 1
a235 1
#if NDZ_DS > 0 && NPM > 0
d240 1
a240 1
			lk_divert(dzGetc, makedev(DCDEV, DCKBD_PORT));
d244 1
a244 1
#endif /* NDZ_DS and NPM */
d265 1
a265 1
#if NDZ_IOASIC > 0
d269 1
a269 1
			lk_divert(dzGetc, makedev(DCDEV, DCKBD_PORT));
d271 1
a271 1
#endif /* NDZ_IOASIC */
d320 1
a320 1
#if NDZ_DS > 0
d325 1
a325 1
		dz_ds_consinit(cd.cn_dev);
d327 1
a327 1
#endif /* NDZ_DS */
d331 1
a331 1
#if (NDZ_IOASIC > 0)
d333 1
a333 1
		dz_ioasic_consinit(cd.cn_dev);
d335 1
a335 1
#endif /* NDZ */
@


1.5.12.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu_cons.c,v 1.5.12.1 2001/04/18 16:12:46 niklas Exp $	*/
@


1.4
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d1 1
a1 1
/*	$NetBSD: cpu_cons.c,v 1.14 1996/10/13 03:39:48 christos Exp $	*/
d83 2
a84 1
#include "dc.h"
d89 1
d91 1
a91 1
#if NDC > 0
d214 1
d235 1
a235 1
#if NDC > 0 && NPM > 0
d244 1
a244 1
#endif /* NDC and NPM */
d265 1
a265 1
#if NDC > 0
d271 1
a271 1
#endif /* NDC */
d313 2
d320 1
a320 1
#if NDC > 0
d327 1
a327 1
#endif /* NDC */
d331 1
a331 1
#if NDC > 0
@


1.3
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: cpu_cons.c,v 1.10.4.1 1996/05/30 04:10:36 mhitch Exp $	*/
d91 3
a93 1
#include <pmax/dev/dcvar.h>
d204 3
a206 1
	/* we can't do anything until auto-configuration
d313 19
d333 7
a339 3
	/* XXX serial drivers need to be rewritten to handle
	 * init this early. Defer switching to non-PROM
	 * driver until later.
d344 1
a344 1
	/* We never cahnged output; go back to using PROM input */
d352 3
a363 21
	case DS_PMAX:
#if NDC > 0
		if (kbd == 4)
			cd.cn_dev = makedev(DCDEV, DCCOMM_PORT);
		else
			cd.cn_dev = makedev(DCDEV, DCPRINTER_PORT);
		cd.cn_getc = dcGetc;
		cd.cn_putc = dcPutc;
		cd.cn_pri = CN_REMOTE;
#endif /* NDC */
		break;

	case DS_3MAX:
#if NDC > 0
		cd.cn_dev = makedev(DCDEV, DCPRINTER_PORT);
		cd.cn_getc = dcGetc;
		cd.cn_putc = dcPutc;
		cd.cn_pri = CN_REMOTE;
#endif /* NDC */
		break;

@


1.2
log
@update from netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: cpu_cons.c,v 1.6 1996/01/03 20:39:19 jonathan Exp $	*/
a57 1
#include <pmax/dev/sccreg.h>
a60 1
#include <pmax/pmax/maxine.h>
d75 1
a75 1
#include <pmax/dev/lk201.h>
d78 10
a87 10
#include <pm.h>
#include <cfb.h>
#include <mfb.h>
#include <xcfb.h>
#include <sfb.h>
#include <dc.h>
#include <dtop.h>
#include <scc.h>
#include <le.h>
#include <asc.h>
d91 1
a91 2
extern int dcGetc(), dcparam();
extern void dcPutc();
d93 1
d95 1
a95 1
extern int dtopKBDGetc();
d97 1
d99 5
a103 2
extern int sccGetc(), sccparam();
extern void sccPutc();
d105 6
d116 1
a116 1
int	pmax_boardtype;		/* Mother board type */
d144 3
a146 2
/* should be locals of consinit, but that's split in two til
 * new-style config of decstations is finished
a152 1

d289 1
d299 1
d383 2
a384 1
static int romgetc(dev)
d397 2
a398 1
static void romputc (dev, c)
d408 2
a409 1
static void rompollc (dev, c)
d417 5
d451 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cpu_cons.c,v 1.5 1995/09/20 05:36:15 jonathan Exp $	*/
a76 1
#include <pmax/tc/tc.h>
d78 1
a78 1

a144 2
int consprobetc __P((int prom_slot));
int consprobeslot __P((int slot));
d281 1
a281 1
	    if (consprobetc(crt)) {
a365 96
}



/*
 * Probe for a framebuffer option card.  Configure the first one
 * found as a console.
 */
int
consprobetc(preferred_slot)
	int preferred_slot;
{
	int slot;

	struct tc_cpu_desc * sc_desc;

	/*printf("Looking for fb console in slot %d", slot);*/

	/* First, try the slot configured as console in NVRAM. */
	 /* if (consprobeslot(preferred_slot)) return (1); */

	/*
	 * Try to configure each turbochannel (or CPU-internal) device.
	 * Knows about gross internals of TurboChannel bus autoconfig
	 * descriptor, which needs to be fixed badly.
	 */
	if ((sc_desc = cpu_tcdesc(pmax_boardtype)) == NULL)
		return 0;
	for (slot = 0; slot < sc_desc->tcd_ndevs; slot++) {

		if (consprobeslot(slot))
			return (1);
	}
	return (0);
}

/*
 * Try and configure one slot as framebuffer console.
 * Accept only the framebuffers configured in.
 * Attach the framebuffer if found.
 */
int
consprobeslot(slot)
	int slot;
{
	void *slotaddr;
	char name[20];
	struct tc_cpu_desc * sc_desc;

	if (slot < 0 || ((sc_desc = cpu_tcdesc(pmax_boardtype)) == NULL))
		return 0;
	slotaddr = (void *)sc_desc->tcd_slots[slot].tsd_dense;

	/*printf("probing slot %d at 0x%x\n", slot, slotaddr);*/

	if (tc_checkdevmem(slotaddr) == 0)
		return (0);

	if (tc_checkslot(slotaddr, name) == 0)
		return (0);

	/*
	 * We found an device in the given slot. Now see if it's a
	 * framebuffer for which we have a driver. 
	 */

	/*printf(", trying to init a \"%s\"", name);*/

#define DRIVER_FOR_SLOT(slotname, drivername) \
	(strcmp (slotname, drivername) == 0)

#if NMFB > 0
	if (DRIVER_FOR_SLOT(name, "PMAG-AA ") &&
	    mfbinit(slotaddr, 0, 1)) {
		cd.cn_pri = CN_NORMAL;
		return (1);
	}
#endif /* NMFB */

#if NSFB > 0
	if (DRIVER_FOR_SLOT(name, "PMAGB-BA") &&
	    sfbinit(slotaddr, 0, 1)) {
		cd.cn_pri = CN_NORMAL;
		return (1);
	}
#endif /* NSFB */

#if NCFB > 0
	/*"cfb"*/
	if (DRIVER_FOR_SLOT(name, "PMAG-BA ") &&
	    cfbinit(NULL, slotaddr, 0, 1)) {
		cd.cn_pri = CN_NORMAL;
		return (1);
	}
#endif /* NCFB */
	return (0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
