head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	UBC_SYNC_B:1.10
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	SMP:1.8.0.6
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2001.06.24.23.48.42;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2000.03.12.19.25.13;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	99.01.11.05.11.51;	author millert;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	98.06.04.03.49.51;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	96.12.22.15.22.32;	author graichen;	state Exp;
branches;
next	1.5;

1.5
date	96.12.22.15.18.35;	author graichen;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.21.46.10;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.21.13.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.39.12;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.33;	author deraadt;	state Exp;
branches;
next	;

1.8.6.1
date	2000.03.24.09.08.34;	author niklas;	state Exp;
branches;
next	1.8.6.2;

1.8.6.2
date	2001.07.04.10.21.47;	author niklas;	state dead;
branches;
next	;


desc
@@


1.10
log
@bye bye, with prejudice
@
text
@/*	$OpenBSD: mainbus.c,v 1.9 2000/03/12 19:25:13 maja Exp $	*/
/*	$NetBSD: mainbus.c,v 1.18 1996/10/13 03:39:51 christos Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * DECstation port: Jonathan Stone
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/reboot.h>


#include <machine/autoconf.h>
#include <machine/machConst.h>
#include <dev/tc/tcvar.h>
#include <dev/tc/ioasicvar.h>

#include "pmaxtype.h"
#include "nameglue.h"

#include "kn01.h"
#include <pmax/pmax/kn01var.h>

#include "tc.h"			/* Is Turbochannel configured? */

struct mainbus_softc {
	struct	device sc_dv;
};

/* Definition of the mainbus driver. */
static int	mbmatch __P((struct device *, void *, void *));
static void	mbattach __P((struct device *, struct device *, void *));
static int	mbprint __P((void *, const char *));

struct cfattach mainbus_ca = {
	sizeof (struct mainbus_softc), mbmatch, mbattach
};

struct cfdriver mainbus_cd = {
	NULL, "mainbus", DV_DULL
};

void	mb_intr_establish __P((struct confargs *ca,
			       int (*handler)(intr_arg_t),
			       intr_arg_t val ));
void	mb_intr_disestablish __P((struct confargs *));

/*
 * Declarations of Potential child busses and how to configure them.
 */
/* KN01 has devices directly on the system bus */
void	kn01_intr_establish __P((struct device *parent, void *cookie,
				 int level,
			       int (*handler)(intr_arg_t),
			       intr_arg_t val ));
void	kn01_intr_disestablish __P((struct confargs *));
static void	kn01_attach __P((struct device *, struct device *, void *));


static int
mbmatch(parent, cfdata, aux)
	struct device *parent;
	void *cfdata;
	void *aux;
{
	struct cfdata *cf = cfdata;

	/*
	 * Only one mainbus, but some people are stupid...
	 */	
	if (cf->cf_unit > 0)
		return(0);

	/*
	 * That one mainbus is always here.
	 */
	return(1);
}

int ncpus = 0;	/* only support uniprocessors, for now */

static void
mbattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	register struct device *mb = self;
	struct confargs nca;

	extern int cputype, ncpus;

	printf("\n");

	/*
	 * if we ever support multi-CPU DEcstations (5800 family),
	 * the Alpha port's mainbus.c has an example of attaching
	 * multiple CPUs.
	 *
	 * For now, we only have one. Attach it directly.
	 */

	nca.ca_name = "cpu";
	nca.ca_slot = 0;
	nca.ca_offset = 0;
	nca.ca_addr = 0;
	config_found(mb, &nca, mbprint);

#if NTC > 0
	if (cputype == DS_3MAXPLUS || cputype == DS_3MAX ||
	    cputype == DS_3MIN || cputype == DS_MAXINE) {
		/*
		 * This system might have a turbochannel.
		 * Call the TC subr code to look for one
		 * and if found, to configure it.
		 */
		config_tcbus(mb, 0 /* XXX */, mbprint);
	}
#endif /* NTC */

	/*
	 * We haven't yet decided how to handle the PMAX (KN01)
	 * which really only has a mainbus, baseboard devices, and an
	 * optional framebuffer.
	 */
#if 1 /*defined(DS3100)*/

	/* XXX mipsmate: just a guess */
	if (cputype == DS_PMAX || cputype == DS_MIPSMATE) {
		kn01_attach(mb, (void*)0, aux);
	}
#endif /*DS3100*/
}


#define KN01_MAXDEVS 9
struct confargs kn01_devs[KN01_MAXDEVS] = {
	/*   name       slot  offset 		   addr intpri  */
	{ "pm",		0,   0,  (u_int)KV(KN01_PHYS_FBUF_START), 3,  },
	{ "dc",  	1,   0,  (u_int)KV(KN01_SYS_DZ),	  2,  },
	{ "lance", 	2,   0,  (u_int)KV(KN01_SYS_LANCE),       1,  },
	{ "sii",	3,   0,  (u_int)KV(KN01_SYS_SII),	  0,  },
	{ "mc146818",	4,   0,  (u_int)KV(KN01_SYS_CLOCK),       16, },
	{ "dc",  	5,   0,  (u_int)KV(0x15000000),	  	  4,  },
	{ "dc",  	6,   0,  (u_int)KV(0x15200000),	 	  5,  },
	{ "led",	6,   0,  0,				  -1, },
#ifdef notyet
	/*
	 * XXX Ultrix configures at 0x86400400. the first 0x400 byte are
	 * used for NVRAM state??
	 */
	{ "nvram",	6,   0,  (u_int)KV(0x86400000),	  -1, },
#endif
	{ "", 0, 0 }
};

/*
 * Configure baseboard devices on KN01 attached directly to mainbus 
 */
void
kn01_attach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct confargs *nca;
	register int i;

#ifdef DEBUG
/*XXX*/ printf("(configuring kn01/5100 baseboard devices)\n");
#endif

	/* Try to configure each KN01 mainbus device */
	for (i = 0; i < KN01_MAXDEVS; i++) {

		nca = &kn01_devs[i];
		if (nca == NULL) {
			printf("mbattach: bad config for slot %d\n", i);
			break;
		}

		if (nca->ca_name == NULL) {
			panic("No name for mainbus device");
		}

#if defined(DIAGNOSTIC) || defined(DEBUG)
		if (nca->ca_slot > KN01_MAXDEVS)
			panic("kn01 mbattach: \
dev slot > number of slots for %s",
			    nca->ca_name);
#endif

#ifdef DEBUG
		printf("configuring %s at %x interrupt number %d\n",
		       nca->ca_name, nca->ca_addr, (u_int)nca->ca_slotpri);
#endif

		/* Tell the autoconfig machinery we've found the hardware. */
		config_found(parent, nca, mbprint);
	}

	/*
	 * The Decstation 5100, like the 3100, has an sii, clock, ethernet,
	 * and dc, presumably at the same addresses.   If so, the
	 * code above will configure them.  The  5100 also
	 * has a slot for PrestoServe NVRAM and for an additional
	 * `mdc' dc-like, eigh-port serial option. If we supported
	 * those devices, this is the right place to configure them.
	 */
}

static int
mbprint(aux, pnp)
	void *aux;
	const char *pnp;
{

	if (pnp)
		return (QUIET);
	return (UNCONF);
}

void
mb_intr_establish(ca, handler, val)
	struct confargs *ca;
	int (*handler) __P((intr_arg_t));
	intr_arg_t val;
{

	panic("can never mb_intr_establish");
}

void
mb_intr_disestablish(ca)
	struct confargs *ca;
{

	panic("can never mb_intr_disestablish");
}

#ifdef DS3100
void
kn01_intr_establish(parent, cookie, level, handler, arg)
	struct device *parent;
	void * cookie;
	int level;
	int (*handler) __P((intr_arg_t));
	intr_arg_t arg;
{
	/* Interrupts on the KN01 are currently hardcoded. */
	printf(" (kn01: intr_establish hardcoded) ");
	kn01_enable_intr((u_int) cookie, handler, arg, 1);
}

void
kn01_intr_disestablish(ca)
	struct confargs *ca;
{
	printf("(kn01: ignoring intr_disestablish) ");
}
#endif /* DS3100 */

/*
 * An  interrupt-establish method.  This should somehow be folded
 * back into the autoconfiguration machinery. Until the TC machine
 * portmasters agree on how to do that, it's a separate function.
 *
 * XXX since all drivers should be passign a softc for "arg",
 * why not make that explicit and use (struct device*)arg->dv_parent,
 * instead of explicitly passign the parent?
*/
void
generic_intr_establish(parent, cookie, level, handler, arg)
	void * parent;
	void * cookie;
	int level;
	intr_handler_t handler;
	intr_arg_t arg;
{
	struct device *dev = arg;

#if NTC>0
	extern struct cfdriver ioasic_cd, tc_cd;

	if (dev->dv_parent->dv_cfdata->cf_driver == &ioasic_cd) {
		/*XXX*/ printf("ioasic interrupt for %d\n", (u_int)cookie);
		ioasic_intr_establish(parent, cookie, level, handler, arg);
	} else
	if (dev->dv_parent->dv_cfdata->cf_driver == &tc_cd) {
		tc_intr_establish(parent, cookie, level, handler, arg);
	} else
#endif
#ifdef DS3100
	if (dev->dv_parent->dv_cfdata->cf_driver == &mainbus_cd) {
		kn01_intr_establish(parent, cookie, level, handler, arg);
	}
	else {
#else
	{
#endif
		printf("intr_establish: unknown parent bustype for %s\n",
			dev->dv_xname);
	}
}
@


1.9
log
@Get mainbus working with gcc 2.95.x. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.8
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
d127 2
a128 2
	/*nca.ca_name = "cpu";*/
	bcopy("cpu", nca.ca_name, sizeof(nca.ca_name));
@


1.8.6.1
log
@Sync with -current
@
text
@a0 1
/*	$OpenBSD$	*/
d126 2
a127 2

	nca.ca_name = "cpu";
@


1.8.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mainbus.c,v 1.8.6.1 2000/03/24 09:08:34 niklas Exp $	*/
@


1.7
log
@LED blinker for the back panel leds on the 2100/3100.
@
text
@d207 1
a207 1
			panic("No name for mainbus device\n");
@


1.6
log
@bring back all the local OpenBSD changes to the pmax tree since 961107

i hope that i did'nt break anything of the files required for the alpha
(in the dev dir) niklas :-)
@
text
@d160 1
a160 1
#define KN01_MAXDEVS 8
d170 1
@


1.5
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d57 1
a57 1
static int	mbprint __P((void *, /* const TTTTT */ char *));
d238 1
a238 1
	/* const TTTTT */ char *pnp;
@


1.4
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$NetBSD: mainbus.c,v 1.11.4.3 1996/06/16 17:24:42 mhitch Exp $	*/
d57 1
a57 1
static int	mbprint __P((void *, const char *));
a82 3
void	config_tcbus __P((struct device *parent, int cputype,
	int	(*printfn) __P((void *, char *)) ));

d238 1
a238 1
	const char *pnp;
@


1.3
log
@sync to netbsd; for graichen
@
text
@d57 1
a57 1
static int	mbprint __P((void *, char *));
d241 1
a241 1
	char *pnp;
@


1.2
log
@from netbsd: Add untested, partial support for Decsystem 5100 (mipsfair).
@
text
@d1 1
a1 1
/*	$NetBSD: mainbus.c,v 1.4 1995/12/28 06:45:01 jonathan Exp $	*/
d36 1
d38 4
a41 1
/*#include <machine/rpb.h>*/
a42 1
#include "machine/machConst.h"
d44 1
d46 3
a51 1
	struct	abus sc_bus;
d58 9
a66 3
struct cfdriver mainbuscd =
    { NULL, "mainbus", mbmatch, mbattach, DV_DULL,
	sizeof (struct mainbus_softc) };
a70 2
caddr_t	mb_cvtaddr __P((struct confargs *));
int	mb_matchname __P((struct confargs *, char *));
d72 3
d76 2
a77 1
void	kn01_intr_establish __P((struct confargs *ca,
a80 1
caddr_t	kn01_cvtaddr __P((struct confargs *));
d83 3
d115 1
a115 1
	struct mainbus_softc *sc = (struct mainbus_softc *)self;
d117 1
a117 2
	struct pcs *pcsp;
	int i, cpuattachcnt;
a121 7
	sc->sc_bus.ab_dv = (struct device *)sc;
	sc->sc_bus.ab_type = BUS_MAIN;
	sc->sc_bus.ab_intr_establish = mb_intr_establish;
	sc->sc_bus.ab_intr_disestablish = mb_intr_disestablish;
	sc->sc_bus.ab_cvtaddr = mb_cvtaddr;
	sc->sc_bus.ab_matchname = mb_matchname;

d123 5
a127 1
	 * Try to find and attach all of the CPUs in the machine.
d129 16
a144 17
	cpuattachcnt = 0;

#ifdef notyet	/* alpha code */
	for (i = 0; i < hwrpb->rpb_pcs_cnt; i++) {
		struct pcs *pcsp;

		pcsp = (struct pcs *)((char *)hwrpb + hwrpb->rpb_pcs_off +
		    (i * hwrpb->rpb_pcs_size));
		if ((pcsp->pcs_flags & PCS_PP) == 0)
			continue;

		nca.ca_name = "cpu";
		nca.ca_slot = 0;
		nca.ca_offset = 0;
		nca.ca_bus = &sc->sc_bus;
		if (config_found(self, &nca, mbprint))
			cpuattachcnt++;
d146 1
a146 25
#endif

	if (ncpus != cpuattachcnt)
		printf("WARNING: %d cpus in machine, %d attached\n",
			ncpus, cpuattachcnt);

#if	defined(DS_5000) || defined(DS5000_240) || defined(DS_5000_100) || \
	defined(DS_5000_25)

	if (cputype == DS_3MAXPLUS ||
	    cputype == DS_3MAX ||
	    cputype == DS_3MIN ||
	    cputype == DS_MAXINE) {

	    if (cputype == DS_3MIN || cputype == DS_MAXINE)
		printf("UNTESTED autoconfiguration!!\n");	/*XXX*/

		/* we have a TurboChannel bus! */
		nca.ca_name = "tc";
		nca.ca_slot = 0;
		nca.ca_offset = 0;
		nca.ca_bus = &sc->sc_bus;
		config_found(self, &nca, mbprint);
	}
#endif /*Turbochannel*/
d153 1
a153 7
#if defined(DS3100)
	/* XXX mipsfair: just a guess */
	if (cputype == DS_PMAX || cputype == DS_MIPSFAIR) {
		/*XXX*/
		sc->sc_bus.ab_intr_establish = kn01_intr_establish;
		sc->sc_bus.ab_intr_disestablish = kn01_intr_disestablish;
		sc->sc_bus.ab_cvtaddr = kn01_cvtaddr;
d155 3
a157 1
		kn01_attach(parent, self, aux);
a159 1

d163 1
a163 1
#define KN01_MAXDEVS 5
d165 16
a180 6
	/* name	      index   pri xxx */
	{ "pm",		0,    3,   (u_int)KV(KN01_PHYS_FBUF_START) },
	{ "dc",  	1,    2,   (u_int)KV(KN01_SYS_DZ)	},
	{ "lance", 	2,    1,   (u_int)KV(KN01_SYS_LANCE)	},
	{ "sii",	3,    0,   (u_int)KV(KN01_SYS_SII)	},
	{ "dallas_rtc",	4,    16,  (u_int)KV(KN01_SYS_CLOCK)	}
a191 1
	struct mainbus_softc *sc = (struct mainbus_softc *)self;
d195 4
d207 4
a210 1
		nca->ca_bus = &sc->sc_bus;
d219 4
a222 3
		if (nca->ca_name == NULL) {
			panic("No name for mainbus device\n");
		}
d225 1
a225 1
		config_found(self, nca, mbprint);
d227 9
d267 1
a267 17
caddr_t
mb_cvtaddr(ca)
	struct confargs *ca;
{

	return (NULL);
}

int
mb_matchname(ca, name)
	struct confargs *ca;
	char *name;
{

	return (strcmp(name, ca->ca_name) == 0);
}

d269 4
a272 2
kn01_intr_establish(ca, handler, val)
	struct confargs *ca;
d274 1
a274 1
	intr_arg_t val;
d278 1
d287 1
d289 41
a329 5
caddr_t
kn01_cvtaddr(ca)
	struct confargs *ca;
{
	return ((void *)ca->ca_offset);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mainbus.c,v 1.3 1995/09/12 07:41:30 jonathan Exp $	*/
d167 2
a168 1
	if (cputype == DS_PMAX) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
