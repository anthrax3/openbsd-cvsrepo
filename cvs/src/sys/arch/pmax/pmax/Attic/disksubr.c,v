head	1.18;
access;
symbols
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	UBC_SYNC_A:1.18
	UBC_SYNC_B:1.18
	OPENBSD_2_9:1.17.0.4
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.16.0.8
	OPENBSD_2_7_BASE:1.16
	SMP:1.16.0.6
	SMP_BASE:1.16
	kame_19991208:1.16
	OPENBSD_2_6:1.16.0.4
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.16.0.2
	OPENBSD_2_5_BASE:1.16
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2001.06.24.23.48.36;	author deraadt;	state dead;
branches;
next	1.17;

1.17
date	2000.10.18.21.00.39;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	99.01.08.04.29.09;	author millert;	state Exp;
branches
	1.16.6.1;
next	1.15;

1.15
date	98.10.04.20.02.58;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	98.10.03.21.18.56;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	98.05.10.04.01.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.05.07.19.03.47;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.05.07.16.03.21;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.05.06.17.46.02;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.10.02.00.58.10;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.08.21.46.48;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.06.10.14.20.07;	author graichen;	state Exp;
branches;
next	1.6;

1.6
date	97.04.12.19.53.47;	author graichen;	state Exp;
branches;
next	1.5;

1.5
date	97.04.07.22.53.44;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.22.15.18.28;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.21.13.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.12.20.20.45;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.32;	author deraadt;	state Exp;
branches;
next	;

1.16.6.1
date	2001.04.18.16.12.46;	author niklas;	state Exp;
branches;
next	1.16.6.2;

1.16.6.2
date	2001.07.04.10.21.40;	author niklas;	state dead;
branches;
next	;


desc
@@


1.18
log
@bye bye, with prejudice
@
text
@/*	$OpenBSD: disksubr.c,v 1.17 2000/10/18 21:00:39 mickey Exp $	*/
/*	$NetBSD: disksubr.c,v 1.14 1997/01/15 00:55:43 jonathan Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ufs_disksubr.c	7.16 (Berkeley) 5/4/91
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/disk.h>
#include <sys/disklabel.h>
#include <sys/syslog.h>

#define	b_cylin	b_resid

#ifdef COMPAT_ULTRIX
#include <pmax/stand/dec_boot.h>

extern char *
compat_label __P((dev_t dev, void (*strat) __P((struct buf *bp)),
		  struct disklabel *lp, struct cpu_disklabel *osdep));

#endif

/*
 * Attempt to read a disk label from a device
 * using the indicated strategy routine.
 * The label must be partly set up before this:
 * secpercyl and anything required in the strategy routine
 * (e.g., sector size) must be filled in before calling us.
 * Returns null on success and an error string on failure.
 */
char *
readdisklabel(dev, strat, lp, osdep, spoofonly)
	dev_t dev;
	void (*strat) __P((struct buf *bp));
	register struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int spoofonly;
{
	register struct buf *bp;
	struct disklabel *dlp;
	char *msg = NULL;

	/* minimal requirements for archetypal disk label */
	if (lp->d_secsize == 0)
		lp->d_secsize = DEV_BSIZE;
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
	if (lp->d_secpercyl == 0)
		lp->d_secpercyl = 1;
	lp->d_npartitions = RAW_PART + 1;
	if (lp->d_partitions[RAW_PART].p_size == 0)
		lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
	lp->d_partitions[RAW_PART].p_offset = 0;

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		return (NULL);

	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;
	bp->b_blkno = LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	bp->b_cylin = LABELSECTOR / lp->d_secpercyl;
	(*strat)(bp);
	if (biowait(bp)) {
		/* XXX we return the faked label built so far */
		msg = "disk label I/O error";
	} else {
		dlp = (struct disklabel *)bp->b_un.b_addr + LABELOFFSET;
		if (dlp->d_magic == DISKMAGIC && dlp->d_magic2 == DISKMAGIC) {
			if (dlp->d_npartitions > MAXPARTITIONS || dkcksum(dlp))
				msg = "disk label corrupted";
			else
				*lp = *dlp;
		} else for (dlp = (struct disklabel *)bp->b_un.b_addr;
		    dlp <= (struct disklabel *)(bp->b_un.b_addr+DEV_BSIZE-sizeof(*dlp));
		    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
			if (dlp->d_magic != DISKMAGIC || dlp->d_magic2 != DISKMAGIC) {
				if (msg == NULL)
					msg = "no disk label";
			} else if (dlp->d_npartitions > MAXPARTITIONS ||
				   dkcksum(dlp) != 0)
				msg = "disk label corrupted";
			else {
				*lp = *dlp;
				msg = NULL;
				break;
			}
		}
	}

	bp->b_flags = B_INVAL | B_AGE;
	brelse(bp);
	return (msg);
}

#ifdef COMPAT_ULTRIX
/*
 * Given a buffer bp, try and interpret it as an Ultrix disk label,
 * putting the partition info into a native OpenBSD label
 */
char *
compat_label(dev, strat, lp, osdep)
	dev_t dev;
	void (*strat) __P((struct buf *bp));
	register struct disklabel *lp;
	struct cpu_disklabel *osdep;
{
	Dec_DiskLabel *dlp;
	struct buf *bp = NULL;
	char *msg = NULL;

	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;
	bp->b_blkno = DEC_LABEL_SECTOR;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	bp->b_cylin = DEC_LABEL_SECTOR / lp->d_secpercyl;
	(*strat)(bp);

	if (biowait(bp)) {
                msg = "I/O error";
		goto done;
	}

	for (dlp = (Dec_DiskLabel *)bp->b_un.b_addr;
	     dlp <= (Dec_DiskLabel *)(bp->b_un.b_addr+DEV_BSIZE-sizeof(*dlp));
	     dlp = (Dec_DiskLabel *)((char *)dlp + sizeof(long))) {

		int part;

		if (dlp->magic != DEC_LABEL_MAGIC) {
			printf("label: %x\n",dlp->magic);
			msg = ((msg != NULL) ? msg: "no disk label");
			goto done;
		}

#ifdef DIAGNOSTIC
/*XXX*/		printf("Interpreting Ultrix label\n");
#endif

		lp->d_magic = DEC_LABEL_MAGIC;
		lp->d_npartitions = 0;
		for (part = 0;
		     part <((MAXPARTITIONS<DEC_NUM_DISK_PARTS) ?
			    MAXPARTITIONS : DEC_NUM_DISK_PARTS);
		     part++) {
			lp->d_partitions[part].p_size = dlp->map[part].numBlocks;
			lp->d_partitions[part].p_offset = dlp->map[part].startBlock;
			lp->d_partitions[part].p_fsize = 1024;
			lp->d_partitions[part].p_fstype =
			  (part==1) ? FS_SWAP : FS_BSDFFS;
			lp->d_npartitions += 1;

#ifdef DIAGNOSTIC
			printf(" Ultrix label rz%d%c: start %d len %d\n",
			       DISKUNIT(dev), "abcdefgh"[part],
			       lp->d_partitions[part].p_offset,
			       lp->d_partitions[part].p_size);
#endif			
		}
		break;
	}

done:
	bp->b_flags = B_INVAL | B_AGE;
	brelse(bp);
	return (msg);
}
#endif /* COMPAT_ULTRIX */


/*
 * Check new disk label for sensibility
 * before setting it.
 */
int
setdisklabel(olp, nlp, openmask, osdep)
	register struct disklabel *olp, *nlp;
	u_long openmask;
	struct cpu_disklabel *osdep;
{
	register i;
	register struct partition *opp, *npp;

	/* sanity clause */
	if (nlp->d_secpercyl == 0 || nlp->d_secsize == 0 ||
	    (nlp->d_secsize % DEV_BSIZE) != 0)
		return(EINVAL);

	/* special case to allow disklabel to be invalidated */
	if (nlp->d_magic == 0xffffffff) {
		*olp = *nlp;
		return (0);
	}

	if (nlp->d_magic != DISKMAGIC || nlp->d_magic2 != DISKMAGIC ||
	    dkcksum(nlp) != 0)
		return (EINVAL);

	while ((i = ffs((long)openmask)) != 0) {
		i--;
		openmask &= ~(1 << i);
		if (nlp->d_npartitions <= i)
			return (EBUSY);
		opp = &olp->d_partitions[i];
		npp = &nlp->d_partitions[i];
		if (npp->p_offset != opp->p_offset || npp->p_size < opp->p_size)
			return (EBUSY);
		/*
		 * Copy internally-set partition information
		 * if new label doesn't include it.		XXX
		 */
		if (npp->p_fstype == FS_UNUSED && opp->p_fstype != FS_UNUSED) {
			npp->p_fstype = opp->p_fstype;
			npp->p_fsize = opp->p_fsize;
			npp->p_frag = opp->p_frag;
			npp->p_cpg = opp->p_cpg;
		}
	}
 	nlp->d_checksum = 0;
 	nlp->d_checksum = dkcksum(nlp);
	*olp = *nlp;
	return (0);
}

/*
 * Write disk label back to device after modification.
 */
int
writedisklabel(dev, strat, lp, osdep)
	dev_t dev;
	void (*strat) __P((struct buf *bp));
	register struct disklabel *lp;
	struct cpu_disklabel *osdep;
{
	struct buf *bp;
	int labelpart;
	int error = 0;

	labelpart = DISKPART(dev);
	if (lp->d_partitions[labelpart].p_offset != 0) {
		if (lp->d_partitions[0].p_offset != 0)
			return (EXDEV);			/* not quite right */
		labelpart = 0;
	}
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = MAKEDISKDEV(major(dev), DISKUNIT(dev), labelpart);
	bp->b_blkno = LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_READ;
	(*strat)(bp);
	if ((error = biowait(bp)) != 0)
		goto done;
	*(struct disklabel *)(bp->b_data + LABELOFFSET) = *lp;
	bp->b_flags = B_BUSY | B_WRITE;
	(*strat)(bp);
	error = biowait(bp);
	goto done;

done:
	brelse(bp);
	return (error);
}


/*
 * was this the boot device ?
 */
void
dk_establish(dk, dev)
	struct disk *dk;
	struct device *dev;
{
	/* see also arch/alpha/alpha/disksubr.c */
	printf("Warning: boot path unknown\n");
	return;
}

/* 
 * UNTESTED !!
 *
 * Determine the size of the transfer, and make sure it is
 * within the boundaries of the partition. Adjust transfer
 * if needed, and signal errors or early completion.
 */
int
bounds_check_with_label(bp, lp, osdep, wlabel)
	struct buf *bp;
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int wlabel;
{
#define blockpersec(count, lp) ((count) * (((lp)->d_secsize) / DEV_BSIZE))
	struct partition *p = lp->d_partitions + DISKPART(bp->b_dev);
	int labelsect = blockpersec(lp->d_partitions[0].p_offset, lp) +
	    LABELSECTOR;
	int sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* avoid division by zero */
	if (lp->d_secpercyl == 0) {
		bp->b_error = EINVAL;
		goto bad;
	}

	/* overwriting disk label ? */
	/* XXX should also protect bootstrap in first 8K */ 
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsect &&
	    (bp->b_flags & B_READ) == 0 && wlabel == 0) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* beyond partition? */ 
	if (bp->b_blkno + sz > blockpersec(p->p_size, lp)) {
		sz = blockpersec(p->p_size, lp) - bp->b_blkno;
		if (sz == 0) {
			/* if exactly at end of disk, return an EOF */
			bp->b_resid = bp->b_bcount;
			return(0);
		}
		if (sz < 0) {
			bp->b_error = EINVAL;
			goto bad;
		}
		/* or truncate if part of it fits */
		bp->b_bcount = sz << DEV_BSHIFT;
	}               

	/* calculate cylinder for disksort to order transfers with */
	bp->b_resid = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
	    lp->d_secpercyl;
	return(1);
bad:
	bp->b_flags |= B_ERROR;
	return(-1);
}
@


1.17
log
@typo in comment; from gluk@@ptci.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16 1999/01/08 04:29:09 millert Exp $	*/
@


1.16
log
@check for lp->d_secpercyl == 0) in bounds_check_with_label()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.15 1998/10/04 20:02:58 millert Exp $	*/
d60 1
a60 1
 * using the indicated stategy routine.
@


1.16.6.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.17 2000/10/18 21:00:39 mickey Exp $	*/
d60 1
a60 1
 * using the indicated strategy routine.
@


1.16.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16.6.1 2001/04/18 16:12:46 niklas Exp $	*/
@


1.15
log
@make sure there is a reasonable 'c' partition
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.14 1998/10/03 21:18:56 millert Exp $	*/
d335 6
@


1.14
log
@Add a "spoofonly" argument to readdisklabel() which will be used to
implement an ioctl to get a spoofed label even for disks that have
a label on them.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 1998/05/10 04:01:23 millert Exp $	*/
d78 3
d83 6
a88 4
	lp->d_npartitions = 1;
	if (lp->d_partitions[0].p_size == 0)
		lp->d_partitions[0].p_size = 0x1fffffff;
	lp->d_partitions[0].p_offset = 0;
@


1.13
log
@1) It's a 'lun' not a 'slave'
2) 16 partitions
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.12 1998/05/07 19:03:47 millert Exp $	*/
a57 4
char*	readdisklabel __P((dev_t dev, void (*strat) __P((struct buf *bp)),
		       register struct disklabel *lp,
		       struct cpu_disklabel *osdep));

d67 1
a67 1
readdisklabel(dev, strat, lp, osdep)
d72 1
d85 4
d97 2
a98 1
		msg = "I/O error";
@


1.12
log
@Write disk label in canonical location, do not scan.  With this change
you can now fix a label that is in the wrong place via:
    disklabel rz0 >! foo ; disklabel -R rz0 foo
like disklabel says you can.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 1998/05/07 16:03:21 millert Exp $	*/
a255 5
/* encoding of disk minor numbers, should be elsewhere... */
#define dkunit(dev)		(minor(dev) >> 3)
#define dkpart(dev)		(minor(dev) & 07)
#define dkminor(unit, part)	(((unit) << 3) | (part))

d270 1
a270 1
	labelpart = dkpart(dev);
d277 1
a277 1
	bp->b_dev = makedev(major(dev), dkminor(dkunit(dev), labelpart));
@


1.11
log
@readdisklabel: Look for label in the correct place (LABELSECTOR + LABELOFFSET)
    first and then fall back to scanning starting at LABELSECTOR.  Previously
    it just did the scan.
writedisklabel: Write label to the correct place (LABELSECTOR + LABELOFFSET)
    if disk is unlabelled.  Previously it was written at LABELSECTOR which
    hosed bootblock writing (as the boot blocks would overwrite the label).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a271 1
	struct disklabel *dlp;
a288 22
	dlp = (struct disklabel *)bp->b_un.b_addr + LABELOFFSET;
	if (dlp->d_magic == DISKMAGIC && dlp->d_magic2 == DISKMAGIC &&
	    dkcksum(dlp) == 0) {
		*dlp = *lp;
		bp->b_flags = B_WRITE;
		(*strat)(bp);
		error = biowait(bp);
		goto done;
	} else for (dlp = (struct disklabel *)bp->b_un.b_addr;
	    dlp <= (struct disklabel *)
	      (bp->b_un.b_addr + lp->d_secsize - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic == DISKMAGIC && dlp->d_magic2 == DISKMAGIC &&
		    dkcksum(dlp) == 0) {
			*dlp = *lp;
			bp->b_flags = B_WRITE;
			(*strat)(bp);
			error = biowait(bp);
			goto done;
		}
	}
	/* Write it in the regular place. */
@


1.10
log
@setdisklabel:
    o extra sanity checks and support for invalidating old label
      like on other ports.
@
text
@d1 1
d97 21
a117 13
	} else for (dlp = (struct disklabel *)bp->b_un.b_addr;
	    dlp <= (struct disklabel *)(bp->b_un.b_addr+DEV_BSIZE-sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic != DISKMAGIC || dlp->d_magic2 != DISKMAGIC) {
			if (msg == NULL)
				msg = "no disk label";
		} else if (dlp->d_npartitions > MAXPARTITIONS ||
			   dkcksum(dlp) != 0)
			msg = "disk label corrupted";
		else {
			*lp = *dlp;
			msg = NULL;
			break;
d120 1
d129 1
a129 1
 * putting the partition info into a native NetBSD label
d290 9
a298 1
	for (dlp = (struct disklabel *)bp->b_un.b_addr;
d312 1
a312 1
	*(struct disklabel *)bp->b_data = *lp;
@


1.9
log
@kill ESRCH in writedisklabel()
@
text
@d205 11
d219 1
@


1.8
log
@Change the bounds_check_with_label API to also take a cpu_disklabel
reference for making transferral of meta-information possible from
readdisklabel to bounds_check_with_label.  The first (and maybe only)
thing that will use this is the multi-disklabel-format code on the
alpha where the labelsector is passed via cpu_disklabel so the label
write-protection can work correctly no matter what label was found.

Also use a new macro DKBAD to get at the dkbad field of the cpu_disklabel
implementations that contain it.  This too is for multi-disklabel
architectures where the "bad" field can be inside a union.  Use this
macro as a means for a driver to check if an architecture supports
dkbad constructs.

Remove proto of bounds_check_with_label from all MD disklabel.h as it
is in sys/disklabel.h.

I have not been able to test the changes everywhere, if I break anything
I apologize, and promise to fix it as soon as I become aware of it.
@
text
@d281 7
a287 1
	error = ESRCH;
@


1.7
log
@update the pmax specific stuff to NetBSD-current as of about 970608 - some
cosmetic things will follow together with an update to an exact NETBSD_CU-
RRENT_xxxxxx level
@
text
@d309 1
a309 1
bounds_check_with_label(bp, lp, wlabel)
d312 1
@


1.6
log
@theo can't get everything right :-)
@
text
@d1 1
a1 1
/*	$NetBSD: disksubr.c,v 1.13 1996/10/13 03:39:49 christos Exp $	*/
d49 1
a49 1
#include "../../stand/dec_boot.h"
@


1.5
log
@i think i got this right....
@
text
@a335 1
		sz = maxsz - bp->b_blkno;
@


1.4
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d314 5
a318 5

	struct partition *p = lp->d_partitions + dkpart(bp->b_dev);
	int labelsect = lp->d_partitions[0].p_offset;
	int maxsz = p->p_size;
	int sz = (bp->b_bcount + DEV_BSIZE - 1) >> DEV_BSHIFT;
d322 1
a322 1
	if (bp->b_blkno + p->p_offset <= LABELSECTOR + labelsect &&
d329 4
a332 3
	if (bp->b_blkno < 0 || bp->b_blkno + sz > maxsz) {
		/* if exactly at end of disk, return an EOF */
		if (bp->b_blkno == maxsz) {
a335 1
		/* or truncate if part of it fits */
d337 1
a337 1
		if (sz <= 0) {
d341 1
d346 2
a347 1
	bp->b_resid = (bp->b_blkno + p->p_offset) / lp->d_secpercyl;
@


1.3
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: disksubr.c,v 1.10 1996/05/19 18:49:33 jonathan Exp $	*/
d72 1
a72 1
	void (*strat)();
d124 1
a124 1
	void (*strat)();
d245 1
a245 1
	void (*strat)();
@


1.2
log
@from netbsd;
New generic disk framework.  Highlights:
New metrics handling.  Metrics are now kept in the new `struct disk'.
Busy time is now stored as a timeval, and transfer count in bytes.
Storage for disklabels is now dynamically allocated, so that the size
of the disk structure is not machine-dependent.
Several new functions for attaching and detaching disks, and handling
metrics calculation.
Old-style instrumentation is still supported in drivers that did it
before.  However, old-style instrumentation is being deprecated, and
will go away once the userland utilities are updated for the new
framework.
For usage and architectural details, see the forthcoming disk(9)
manual page.
@
text
@d1 1
a1 1
/*	$NetBSD: disksubr.c,v 1.7 1996/01/07 22:02:55 thorpej Exp $	*/
d38 7
a44 5
#include "param.h"
#include "systm.h"
#include "buf.h"
#include "disklabel.h"
#include "syslog.h"
d52 1
a52 1
compat_label __P((dev_t dev, void (*strat)(),
d57 3
d196 1
d242 1
d266 1
a266 1
	if (error = biowait(bp))
d291 1
a291 1
int
d298 1
a298 1
	return 1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: disksubr.c,v 1.6 1995/08/04 02:34:24 jonathan Exp $	*/
d286 1
a286 1
	struct dkdevice *dk;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
