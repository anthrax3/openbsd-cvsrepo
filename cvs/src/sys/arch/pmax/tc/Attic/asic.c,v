head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	UBC_SYNC_B:1.8
	OPENBSD_2_9:1.7.0.12
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2001.06.24.23.49.00;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	99.01.11.05.11.52;	author millert;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	97.06.10.14.20.23;	author graichen;	state Exp;
branches;
next	1.5;

1.5
date	96.12.22.15.23.07;	author graichen;	state Exp;
branches;
next	1.4;

1.4
date	96.12.22.15.19.02;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.21.46.11;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.09.15.21.13.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.35;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2001.07.04.10.22.09;	author niklas;	state dead;
branches;
next	;


desc
@@


1.8
log
@bye bye, with prejudice
@
text
@/*	$NetBSD: asic.c,v 1.16 1997/05/24 09:30:27 jonathan Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Keith Bostic, Chris G. Demetriou, Jonathan Stone
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <dev/tc/tcvar.h>
#include <dev/tc/ioasicvar.h>

#include <machine/autoconf.h>
#include <machine/pte.h>

#if 0
#include <machine/rpb.h>
#include <alpha/tc/tc.h>
#include <alpha/tc/asic.h>
#endif

#ifdef pmax
#include <pmax/pmax/pmaxtype.h>
#include <pmax/pmax/asic.h>
#include <pmax/pmax/kn01.h>
#include <pmax/pmax/kn02.h>
#include <pmax/pmax/kmin.h>
#include <pmax/pmax/maxine.h>
#include <pmax/pmax/kn03.h>
#include <pmax/pmax/turbochannel.h>	/* interrupt enable declaration */

#include <pmax/pmax/kn03.h>
#include <pmax/pmax/kmin.h>
#include <machine/machConst.h>
#include <pmax/pmax/nameglue.h>

extern int cputype;
#endif

struct asic_softc {
	struct	device sc_dv;
	tc_addr_t sc_base;
};

/* Definition of the driver for autoconfig. */
int	asicmatch __P((struct device *, void *, void *));
void	asicattach __P((struct device *, struct device *, void *));
int     asicprint(void *, const char *);

/* Device locators. */
#define	ioasiccf_offset	cf_loc[0]		/* offset */

#define	IOASIC_OFFSET_UNKNOWN	-1

struct cfattach ioasic_ca = {
	sizeof(struct asic_softc), asicmatch, asicattach
};

struct cfdriver ioasic_cd = {
	NULL, "asic", DV_DULL
};

void    asic_intr_establish __P((struct confargs *, intr_handler_t,
				 intr_arg_t));
void    asic_intr_disestablish __P((struct confargs *));
caddr_t ioasic_cvtaddr __P((struct confargs *));

#ifndef pmax
int	asic_intr __P((void *));
#endif

int	asic_intrnull __P((intr_arg_t));

struct asic_slot {
	struct confargs	as_ca;
	u_int		as_bits;
	intr_handler_t	as_handler;
	void		*as_val;
};

#ifdef	pmax
/*#define IOASIC_DEBUG*/

struct asic_slot *asic_slots;
#include "ds-asic-conf.c"
#endif	/*pmax*/


#ifdef IOASIC_DEBUG
#define IOASIC_DPRINTF(x)	printf x
#else
#define IOASIC_DPRINTF(x)	do { if (0) printf x ; } while (0)
#endif

int
asicmatch(parent, cfdata, aux)
	struct device *parent;
	void *cfdata;
	void *aux;
{
	struct cfdata *cf = cfdata;
	struct tc_attach_args *ta = aux;

	IOASIC_DPRINTF(("asicmatch: %s slot %d offset 0x%x pri %d\n",
		ta->ta_modname, ta->ta_slot, ta->ta_offset, (int)ta->ta_cookie));

	/* An IOCTL asic can only occur on the turbochannel, anyway. */
#ifdef notyet
	if (parent != &tccd)
		return (0);
#endif

	/* The 3MAX (kn02) is special. */
	if (TC_BUS_MATCHNAME(ta, KN02_ASIC_NAME)) {
		printf("(configuring KN02 system slot as asic)\n");
		goto gotasic;
	}

	/* Make sure that we're looking for this type of device. */
	if (!TC_BUS_MATCHNAME(ta, "IOCTL   "))
		return (0);
gotasic:

	/* See if the unit number is valid. */
	switch (cputype) {
	case DS_3MIN:
		if (cf->cf_unit > 0)
			return (0);
		asic_slots = kn03_asic_slots;	/* XXX - 3min same as kn03? */
		break;
	case DS_MAXINE:
		if (cf->cf_unit > 0)
			return (0);
		asic_slots = xine_asic_slots;
		break;
	case DS_3MAX:
		if (cf->cf_unit > 0)
			return (0);
		asic_slots = kn02_asic_slots;
		break;
	case DS_3MAXPLUS:
		if (cf->cf_unit > 0)
			return (0);
		asic_slots = kn03_asic_slots;
		break;
	default:
		printf("no ASIC config table for this machine\n");
		return (0);
	}

	return (1);
}

void
asicattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct asic_softc *sc = (struct asic_softc *)self;
	struct tc_attach_args *ta = aux;
	struct confargs *nca;
	struct ioasicdev_attach_args ioasicdev;
	int i;
	extern int cputype;

	if (asic_slots == NULL)
		panic("asicattach: no asic_slot map");

	IOASIC_DPRINTF(("asicattach: %s\n", sc->sc_dv.dv_xname));

	sc->sc_base = ta->ta_addr;

	ioasic_base = sc->sc_base;			/* XXX XXX XXX */

#ifdef pmax
	printf("\n");
#else	/* Alpha AXP: select ASIC speed  */
#ifdef DEC_3000_300
	if (cputype == ST_DEC_3000_300) {
		*(volatile u_int *)IOASIC_REG_CSR(sc->sc_base) |=
		    IOASIC_CSR_FASTMODE;
		MB();
		printf(": slow mode\n");
	} else
#endif /*DEC_3000_300*/
		printf(": fast mode\n");
	
	/* Decstations use hand-craft code to enable asic interrupts */
	BUS_INTR_ESTABLISH(ta, asic_intr, sc);

#endif 	/* Alpha AXP: select ASIC speed  */


/* The MAXINE has seven pseudo-slots in its system slot */
#define ASIC_MAX_NSLOTS 7 /*XXX*/

        /* Try to configure each CPU-internal device */
        for (i = 0; i < ASIC_MAX_NSLOTS; i++) {

		IOASIC_DPRINTF(("asicattach: entry %d, base addr %x\n",
		       i, sc->sc_base));

                nca = &asic_slots[i].as_ca;
		if (nca == NULL) panic ("bad asic table");
		if (nca->ca_name == NULL || nca->ca_name[0] == 0)
			break;
		nca->ca_addr = ((u_int)sc->sc_base) + nca->ca_offset;

		IOASIC_DPRINTF((" adding %s subslot %d offset %x addr %x\n",
		       nca->ca_name, nca->ca_slot, nca->ca_offset,
		       nca->ca_addr));

		strncpy(ioasicdev.iada_modname, nca->ca_name, TC_ROM_LLEN);
		ioasicdev.iada_modname[TC_ROM_LLEN] = '\0';
		ioasicdev.iada_offset = nca->ca_offset;
		ioasicdev.iada_addr = nca->ca_addr;
		ioasicdev.iada_cookie = (void *)nca->ca_slotpri;
                /* Tell the autoconfig machinery we've found the hardware. */
                config_found(self, &ioasicdev, asicprint);
        }
	IOASIC_DPRINTF(("asicattach: done\n"));
}

int
asicprint(aux, pnp)
	void *aux;
	const char *pnp;
{
	struct ioasicdev_attach_args *d = aux;

	if (pnp)
		printf("%s at %s", d->iada_modname, pnp);
	printf(" offset 0x%x", d->iada_offset);
	printf(" priority %d", (int)d->iada_cookie);
	return (UNCONF);
}

int
ioasic_submatch(match, d)
	struct cfdata *match;
	struct ioasicdev_attach_args *d;
{

	return ((match->ioasiccf_offset == d->iada_offset) ||
		(match->ioasiccf_offset == IOASIC_OFFSET_UNKNOWN));
}

/*
 * Save interrupt slotname and enable mask (??)
 * On decstations this isn't useful, as the turbochannel
 * decstations all have incompatible ways of mapping interrupts
 * to IO ASIC or r3000 interrupt bits.
 * Instead of writing "as_bits" directly into an IOASIC interrupt-enable
 * register,  Decstations use a  machine-dependent function that
 * interpret (pseudo-) slot numbers and do ``the right thing'' to enable
 * or disable  interrupts for a specific slot (or pseudo-slot), by
 * slot number, on that given CPU.
 */
void
asic_intr_establish(ca, handler, val)
	struct confargs *ca;
	intr_handler_t handler;
        intr_arg_t val;
{

#if defined(DIAGNOSTIC) && defined(alpha)
	if (ca->ca_slot == IOASIC_SLOT_RTC)
		panic("setting clock interrupt incorrectly");
#endif	/*defined(DIAGNOSTIC) && defined(alpha)*/

	/* XXX SHOULD NOT BE THIS LITERAL */
	if (asic_slots[ca->ca_slot].as_handler != asic_intrnull)
		/*panic*/ printf("asic_intr_establish: slot %d twice", ca->ca_slot);

	/*
	 * XXX  We need to invent a better interface to machine-dependent
	 * interrupt-enable code, or redo the Decstation configuration
	 * tables with unused entries, so that slot is always equal
	 * to "priority" (software pseudo-slot number).  FIXME.
	 */
#if defined(IOASIC_DEBUG) && 0
	printf("asic: %s:  intr for entry %d slot %d pri %d\n", 
		 ca->ca_name, ca->ca_slot, ca->ca_slotpri,
		 (int)asic_slots[ca->ca_slot].as_val);
#endif	/*IOASIC_DEBUG*/

#ifdef pmax
	tc_enable_interrupt(ca->ca_slotpri, handler, val, 1);

#else	/* Alpha AXP */

	/* Save handler info so it can be enabled later (??) */
	asic_slots[ca->ca_slot].as_handler = handler;
	asic_slots[ca->ca_slot].as_val = val;
#endif	/* Alpha AXP */
}

void
asic_intr_disestablish(ca)
	struct confargs *ca;
{

#ifdef pmax
	panic("asic_intr_disestablish: shouldn't ever be called");
#else
	if (ca->ca_slot == IOASIC_SLOT_RTC)
	        panic("asic_intr_disestablish: can't do clock interrupt");

	/* XXX SHOULD NOT BE THIS LITERAL */
	if (asic_slots[ca->ca_slot].as_handler == asic_intrnull)
		panic("asic_intr_disestablish: slot %d missing intr",
		    ca->ca_slot);

	asic_slots[ca->ca_slot].as_handler = dsasic_intrnull;
	asic_slots[ca->ca_slot].as_val = (void *)(long)ca->ca_slot;
#endif
}


void
ioasic_intr_establish(dev, cookie, level, handler, val)
    struct device *dev;
    void *cookie;
    tc_intrlevel_t level;
    intr_handler_t handler;
    void *val;
{

	(*tc_enable_interrupt)((int)cookie, handler, val, 1);
}

#ifdef	alpha
/*
 * asic_intr --
 *	ASIC interrupt handler.
 */
int
asic_intr(val)
	void *val;
{
	register struct asic_softc *sc = val;
	register int i, ifound;
	int gifound;
	u_int32_t sir, junk;
	volatile u_int32_t *sirp, *junkp;

	sirp = (volatile u_int32_t *)IOASIC_REG_INTR(sc->sc_base);

	gifound = 0;
	do {
		ifound = 0;
		MB();
		MAGIC_READ;
		MB();

		sir = *sirp;
		for (i = 0; i < ASIC_MAX_NSLOTS; i++)
			if (sir & asic_slots[i].as_bits) {
				(void)(*asic_slots[i].as_handler)
				    (asic_slots[i].as_val);
				ifound = 1;
			}
		gifound |= ifound;
	} while (ifound);

	return (gifound);
}
#endif /*!pmax*/

int
asic_intrnull(val)
	intr_arg_t val;
{

        panic("uncaught IOCTL ASIC intr for slot %ld", (long)val);
}


/* XXX */
char *
ioasic_lance_ether_address()
{

	return (u_char *)IOASIC_SYS_ETHER_ADDRESS(ioasic_base);
}

void
ioasic_lance_dma_setup(v)
	void *v;
{
	volatile u_int32_t *ldp;
	tc_addr_t tca;

	tca = (tc_addr_t)v;

	ldp = (volatile u_int *)IOASIC_REG_LANCE_DMAPTR(ioasic_base);
	*ldp = ((tca << 3) & ~(tc_addr_t)0x1f) | ((tca >> 29) & 0x1f);
	tc_wmb();

	*(volatile u_int32_t *)IOASIC_REG_CSR(ioasic_base) |=
	    IOASIC_CSR_DMAEN_LANCE;
	tc_mb();
}
@


1.7
log
@panic prints a newline for you, don't do it in the panic string
@
text
@@


1.7.6.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


1.6
log
@update the pmax specific stuff to NetBSD-current as of about 970608 - some
cosmetic things will follow together with an update to an exact NETBSD_CU-
RRENT_xxxxxx level
@
text
@d191 1
a191 1
		panic("asicattach: no asic_slot map\n");
d228 1
a228 1
		if (nca == NULL) panic ("bad asic table\n");
d328 1
a328 1
	panic("asic_intr_disestablish: shouldn't ever be called\n");
d399 1
a399 1
        panic("uncaught IOCTL ASIC intr for slot %ld\n", (long)val);
@


1.5
log
@bring back all the local OpenBSD changes to the pmax tree since 961107

i hope that i did'nt break anything of the files required for the alpha
(in the dev dir) niklas :-)
@
text
@d1 1
a1 1
/*	$NetBSD: asic.c,v 1.15 1996/10/13 03:39:58 christos Exp $	*/
d116 1
a116 1
#define IOASIC_DPRINTF(x)	(void) x
@


1.4
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d72 1
a72 1
int     asicprint(void *, /* const TTTTT */ char *);
d251 1
a251 1
	/* const TTTTT */ char *pnp;
@


1.3
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$NetBSD: asic.c,v 1.9.4.2 1996/09/09 20:19:11 thorpej Exp $	*/
d72 1
a72 1
int     asicprint(void *, const char *);
d251 1
a251 1
	const char *pnp;
@


1.2
log
@sync to netbsd; for graichen
@
text
@d72 1
a72 1
int     asicprint(void *, char *);
d251 1
a251 1
	char *pnp;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: asic.c,v 1.6 1995/09/25 20:33:28 jonathan Exp $	*/
d34 2
d66 1
a66 2
	struct	abus sc_bus;
	caddr_t	sc_base;
d73 13
a85 2
struct cfdriver ioasiccd =
    { NULL, "asic", asicmatch, asicattach, DV_DULL, sizeof(struct asic_softc) };
d90 1
a90 2
caddr_t asic_cvtaddr __P((struct confargs *));
int     asic_matchname __P((struct confargs *, char *));
d106 2
d109 2
a111 1
#include "ds-asic-conf.c"
d113 4
a118 19
#ifdef alpha
struct asic_slot asic_slots[ASIC_MAX_NSLOTS] =

{
	{ { "lance",		/* XXX */ 0, 0x000c0000, },
	    ASIC_INTR_LANCE, asic_intrnull, (void *)(long)ASIC_SLOT_LANCE, },
	{ { "scc",		/* XXX */ 1, 0x00100000, },
	    ASIC_INTR_SCC_0, asic_intrnull, (void *)(long)ASIC_SLOT_SCC0, },
	{ { "scc",		/* XXX */ 2, 0x00180000, },
	    ASIC_INTR_SCC_1, asic_intrnull, (void *)(long)ASIC_SLOT_SCC1, },
	{ { "dallas_rtc",	/* XXX */ 3, 0x00200000, },
	    0, asic_intrnull, (void *)(long)ASIC_SLOT_RTC, },
	{ { "AMD79c30",		/* XXX */ 4, 0x00240000, },
	    0 /* XXX */, asic_intrnull, (void *)(long)ASIC_SLOT_ISDN, },
};
#endif	/*alpha*/

caddr_t asic_base;		/* XXX XXX XXX */

d126 1
a126 1
	struct confargs *ca = aux;
d128 6
a133 2
	/* It can only occur on the turbochannel, anyway. */
	if (ca->ca_bus->ab_type != BUS_TC)
d135 1
d138 1
a138 1
	if (BUS_MATCHNAME(ca, KN02_ASIC_NAME)) {
d144 1
a144 1
	if (!BUS_MATCHNAME(ca, "IOCTL   "))
d184 1
a184 1
	struct confargs *ca = aux;
d186 1
d193 3
a195 2
	sc->sc_base = BUS_CVTADDR(ca);
	asic_base = sc->sc_base;			/* XXX XXX XXX */
d197 1
a197 6
	sc->sc_bus.ab_dv = (struct device *)sc;
	sc->sc_bus.ab_type = BUS_ASIC;
	sc->sc_bus.ab_intr_establish = asic_intr_establish;
	sc->sc_bus.ab_intr_disestablish = asic_intr_disestablish;
	sc->sc_bus.ab_cvtaddr = asic_cvtaddr;
	sc->sc_bus.ab_matchname = asic_matchname;
d204 2
a205 2
		*(volatile u_int *)ASIC_REG_CSR(sc->sc_base) |=
		    ASIC_CSR_FASTMODE;
d213 1
a213 1
	BUS_INTR_ESTABLISH(ca, asic_intr, sc);
d224 2
a225 3
#ifdef DEBUG_ASIC
		printf("asicattach: entry %d\n", i);		/*XXX*/
#endif
d229 1
a229 1
		if (nca->ca_name == NULL && nca->ca_bus == NULL)
d231 1
a231 6
                nca->ca_bus = &sc->sc_bus;

#ifdef DEBUG_ASIC
		printf(" adding %s subslot %d offset %x\n",	/*XXX*/
		       nca->ca_name, nca->ca_slot, nca->ca_offset);
#endif
d233 9
d243 1
a243 1
                config_found(self, nca, asicprint);
d245 1
a245 1

d253 1
a253 1
	struct confargs *ca = aux;
d256 3
a258 3
		printf("%s at %s", ca->ca_name, pnp);
	printf(" offset 0x%lx", ca->ca_offset);
	printf(" priority %d", ca->ca_slotpri);
d262 10
d274 1
a274 1
 * On decstaitons this isn't useful, as the turbochannel
d290 2
a291 3
#ifdef DIAGNOSTIC
#ifdef alpha	/*XXX*/
	if (ca->ca_slot == ASIC_SLOT_RTC)
d293 1
a293 2
#endif /*alpha*/
#endif	/*DIAGNOSTIC*/
d303 1
a303 1
	 * to "priority" (software pseudo-slot number).
d305 6
a311 5
#ifdef	DEBUG_ASIC
	printf("asic:%s%d:  intr for entry %d(%d) slot %d\n", 
		 ca->ca_name, val, ca->ca_slot, ca->ca_slotpri,
		 asic_slots[ca->ca_slot].as_val);
#endif	/*DEBUG*/
d330 1
a330 1
	if (ca->ca_slot == ASIC_SLOT_RTC)
a342 4
caddr_t
asic_cvtaddr(ca)
	struct confargs *ca;
{
d344 7
a350 8
	return
	    (((struct asic_softc *)ca->ca_bus->ab_dv)->sc_base + ca->ca_offset);
}

int
asic_matchname(ca, name)
	struct confargs *ca;
	char *name;
d353 1
a353 1
	return (strcmp(name, ca->ca_name) == 0);
d356 1
a356 1
#ifndef	pmax
d371 1
a371 1
	sirp = (volatile u_int32_t *)ASIC_REG_INTR(sc->sc_base);
d400 27
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
