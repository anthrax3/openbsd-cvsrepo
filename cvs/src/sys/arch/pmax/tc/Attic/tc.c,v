head	1.9;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	UBC_SYNC_A:1.9
	UBC_SYNC_B:1.9
	OPENBSD_2_9:1.8.0.12
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.10
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.6
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2001.06.24.23.49.03;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	99.01.11.05.11.53;	author millert;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	98.05.18.00.28.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.12.22.15.19.05;	author graichen;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.21.46.11;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.21.13.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.05.13.41.33;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.39.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.36;	author deraadt;	state Exp;
branches;
next	;

1.8.6.1
date	2001.07.04.10.22.11;	author niklas;	state dead;
branches;
next	;


desc
@@


1.9
log
@bye bye, with prejudice
@
text
@/*	$NetBSD: tc.c,v 1.12 1996/10/13 03:40:02 christos Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jonathan Stone
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#define TC_DEBUG	/* until decstatn autoconfig works with dev/tc/tc.c*/

#include <sys/param.h>
#include <sys/device.h>
#include <dev/cons.h>
#include <dev/tc/tcvar.h>
#include <machine/autoconf.h>


/* Which TC framebuffers have drivers, for configuring a console device. */
#include "cfb.h"
#include "mfb.h"
#include "sfb.h"

extern int pmax_boardtype;


/*
 * Old-style model-specific autoconfiguration description.
 */
struct tcbus_attach_args {
	u_int	tca_nslots;
	struct	tc_slotdesc *tca_slots;

	u_int	tca_nbuiltins;
	const struct	tc_builtin *tca_builtins;

	void	(*tca_intr_establish) __P((struct device *dev, void *cookie,
					   tc_intrlevel_t level,
					   intr_handler_t handler,
					   void *arg));
	void	(*tca_intr_disestablish) __P((struct device *, void *));
};

/* Return the appropriate tc_attach_args for a given cputype */
extern struct tc_attach_args *  cpu_tcdesc __P ((int cputype));


/* Definition of the driver for autoconfig. */
int	tcmatch(struct device *, void *, void *);
void	tcattach(struct device *, struct device *, void *);
int	tcprint(void *, const char *);

void	tc_ds_intr_establish __P((struct device *, void *, tc_intrlevel_t,
				intr_handler_t handler, intr_arg_t arg));
void	tc_intr_disestablish __P((struct device *dev, void *cookie));
caddr_t	tc_cvtaddr __P((struct confargs *));

extern int cputype;
extern int tc_findconsole __P((int prom_slot));

/* Forward declarations */
int consprobeslot __P((int slot));


/*
 *  TurboChannel autoconfiguration declarations and tables for DECstations.
 */

#include <machine/machConst.h>
#include <pmax/pmax/pmaxtype.h>
#include <pmax/pmax/trap.h>
#include <pmax/pmax/asic.h>
#include <pmax/pmax/kn03.h>
#include <pmax/pmax/kn02.h>
#include <pmax/pmax/kmin.h>
#include <pmax/pmax/maxine.h>

#include <pmax/pmax/turbochannel.h>

/*#include <pmax/pmax/nameglue.h>*/
#define KV(x) ((tc_addr_t)MIPS_PHYS_TO_KSEG1(x))



void	tc_ds_ioasic_intr_setup __P((void));
void	tc_ds_ioasic_intr_establish __P((struct device *dev, void *cookie,
					 tc_intrlevel_t level,
					 intr_handler_t handler,
					 void *arg));
void	tc_ds_ioasic_intr_disestablish __P((struct device *, void *));
void	tc_ds_ioasic_iointr __P((void *, int));
int	tc_ds_ioasic_getdev __P((struct confargs *));


/* XXX*/
/* should be handled elsewhere? */
typedef void (*tc_enable_t) __P ((u_int slotno, intr_handler_t,
				  void *intr_arg, int on)); 
typedef int (*tc_handler_t) __P((void *intr_arg));
    
extern void (*tc_enable_interrupt)  __P ((u_int slotno, tc_handler_t,
				     void *intr_arg, int on)); 
extern void kn03_enable_intr __P((u_int slot, tc_handler_t,
				  void *intr_arg, int on)); 
extern void kn02_enable_intr __P ((u_int slot, tc_handler_t,
				   void *intr_arg, int on)); 
extern void kmin_enable_intr __P ((u_int slot, tc_handler_t,
				   void *intr_arg, int on)); 
extern void xine_enable_intr __P ((u_int slot, tc_handler_t,
				   void *intr_arg, int on)); 

/*
 * Configuration tables for the four models of
 * Decstation that have turbochannels. 
 * None of the four are the same.
 */
#include "ds-tc-conf.c"


/*
 * Function to map from a CPU code to a tcbus tc_attach_args struct.
 * This should really be in machine-dependent code, where
 * it could even be a macro.
 */
struct tc_attach_args *
cpu_tcdesc(cpu)
    int cpu;
{
	if (cpu == DS_3MAXPLUS) {
		tc_enable_interrupt = kn03_enable_intr;
		return &kn03_tc_desc;
	} else if (cpu == DS_3MAX) {
		tc_enable_interrupt = kn02_enable_intr;
		return &kn02_tc_desc;
	} else if (cpu == DS_3MIN) {
		tc_enable_interrupt = kmin_enable_intr;
		return &kmin_tc_desc;
	} else if (cpu == DS_MAXINE) {
		tc_enable_interrupt = xine_enable_intr;
		return &xine_tc_desc;
	} else if (cpu == DS_PMAX) {
#ifdef DIAGNOSTIC
		printf("tcattach: PMAX, no turbochannel\n");
#endif
		return NULL;
	} else if (cpu == DS_MIPSFAIR) {
		printf("tcattach: Mipsfair (5100), no turbochannel\n");
		return NULL;
	} else {
		panic("cpu_tc: Unrecognized bus type 0x%x", cpu);
	}
}

/*
 * We have a TurboChannel bus.  Configure it.
 */
void
config_tcbus(parent, cputype, printfn)
     	struct device *parent;
	int cputype;
	int	printfn __P((void *, const char *));

{
	struct tc_attach_args tc;

	struct tc_attach_args * tcbus = cpu_tcdesc(pmax_boardtype);

	/*
	 * Set up important CPU/chipset information.
	 */
	tc.tca_nslots = tcbus->tca_nslots;
	tc.tca_slots = tcbus->tca_slots;

	tc.tca_nbuiltins = tcbus->tca_nbuiltins;
	tc.tca_builtins = tcbus->tca_builtins;
	tc.tca_intr_establish = tc_ds_intr_establish;	/*XXX*/
	tc.tca_intr_disestablish = tc_ds_ioasic_intr_disestablish;	/*XXX*/

	config_found(parent, (struct confargs*)&tc, printfn);
}

/*
 * Probe the turbochannel for a framebuffer option card, starting
 * at the preferred slot and then scanning all slots. Configure the first
 * supported framebuffer device found, if any, as the console, and return
 * 1 if found.
 * Called before autoconfiguration, to find a system console.
 */
int
tc_findconsole(preferred_slot)
	int preferred_slot;
{
	int slot;

	struct tc_attach_args * sc_desc;

	/* First, try the slot configured as console in NVRAM. */
	 /* if (consprobeslot(preferred_slot)) return (1); */

	/*
	 * Try to configure each turbochannel (or CPU-internal) device.
	 * Knows about gross internals of TurboChannel bus autoconfig
	 * descriptor, which needs to be fixed badly.
	 */
	if ((sc_desc = cpu_tcdesc(pmax_boardtype)) == NULL)
		return 0;
	for (slot = 0; slot < sc_desc->tca_nslots; slot++) {

		if (tc_consprobeslot(slot))
			return (1);
	}
	return (0);
}

/*
 * Try and configure one slot as framebuffer console.
 * Accept only the framebuffers for which driver are configured into
 * the kernel.  If a suitable framebuffer is found, attach it and
 * set up glass-tty emulation.
 */
int
tc_consprobeslot(slot)
	int slot;
{
	void *slotaddr;
	char name[20];
	struct tc_attach_args * sc_desc;

	if (slot < 0 || ((sc_desc = cpu_tcdesc(pmax_boardtype)) == NULL))
		return 0;
	slotaddr = (void *)(sc_desc->tca_slots[slot].tcs_addr);

	if (tc_badaddr(slotaddr))
		return (0);

	if (tc_checkslot(slotaddr, name) == 0)
		return (0);

	/*
	 * We found an device in the given slot. Now see if it's a
	 * framebuffer for which we have a driver. 
	 */

	/*printf(", trying to init a \"%s\"", name);*/

#define DRIVER_FOR_SLOT(slotname, drivername) \
	(strcmp (slotname, drivername) == 0)

#if NMFB > 0
	if (DRIVER_FOR_SLOT(name, "PMAG-AA ") &&
	    mfbinit(slotaddr, 0, 1)) {
		return (1);
	}
#endif /* NMFB */

#if NSFB > 0
	if (DRIVER_FOR_SLOT(name, "PMAGB-BA") &&
	    sfbinit(slotaddr, 0, 1)) {
		return (1);
	}
#endif /* NSFB */

#if NCFB > 0
	/*"cfb"*/
	if (DRIVER_FOR_SLOT(name, "PMAG-BA ") &&
	    cfbinit(NULL, slotaddr, 0, 1)) {
		return (1);
	}
#endif /* NCFB */
	return (0);
}

/*
 * Estabish an interrupt handler, but on what bus -- TC or ioctl asic?
 */
void
tc_ds_intr_establish(dev, cookie, level, handler, val)
    struct device *dev;
    void *cookie;
    tc_intrlevel_t level;
    intr_handler_t handler;
    void *val;
{

	/* Never tested on these processors */
	if (cputype == DS_3MIN || cputype == DS_MAXINE)
	    printf("tc_enable %s sc %x slot %d\n",
		   dev->dv_xname, (int)val, cookie);

#ifdef DIAGNOSTIC
	if (tc_enable_interrupt == NULL)
	    panic("tc_intr_establish: tc_enable not set");
#endif

#ifdef DEBUG
	printf("tc_intr_establish: slot %d level %d handler %p sc %p on\n",
		(int) cookie, (int) level, handler,  val);
#endif

	 /*
	  * Enable the interrupt from tc (or ioctl asic) slot with NetBSD/pmax
	  * sw-convention name ``cookie'' on this CPU.
	  * XXX store the level somewhere for selective enabling of
	  * interrupts from TC option slots.
	  */
	 (*tc_enable_interrupt) ((int)cookie, handler, val, 1);
}


/* hack for kn03 ioasic */

void
tc_ds_ioasic_intr_setup ()
{
	printf("not setting up TC intrs\n");
}


/*
 * establish an interrupt handler for an ioasic device.
 * On NetBSD/pmax, there is currently a single, merged interrupt handler for
 * both TC and ioasic.  Just use the tc interrupt-establish function.
*/
void
tc_ds_ioasic_intr_establish(dev, cookie, level, handler, val)
    struct device *dev;
    void *cookie;
    tc_intrlevel_t level;
    intr_handler_t handler;
    void *val;
{
	tc_intr_establish(dev, cookie, level, handler, val);
}

void
tc_ds_ioasic_intr_disestablish(dev, arg)
    struct device *dev;
    void *arg;
{
	/*(*tc_enable_interrupt) (ca->ca_slot, handler, 0);*/
    	printf("cannot dis-establish IOASIC interrupts\n");
}

void
tc_ds_ioasic_iointr (framep, vec)
    void * framep;
    int vec;
{
	printf("bogus interrupt handler fp %x vec %d\n", framep, vec);
}

/* XXX */
#include <dev/tc/tc.c>
@


1.8
log
@panic prints a newline for you, don't do it in the panic string
@
text
@@


1.8.6.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


1.7
log
@new cpureg.h from NetBSD plus modifications to use the changed macro names
@
text
@d170 1
a170 1
		panic("cpu_tc: Unrecognized bus type 0x%x\n", cpu);
d312 1
a312 1
	    panic("tc_intr_establish: tc_enable not set\n");
@


1.6
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d101 1
a101 1
#define KV(x) ((tc_addr_t)MACH_PHYS_TO_UNCACHED(x))
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 1
a1 1
/*	$NetBSD: tc.c,v 1.9 1996/02/02 18:08:06 mycroft Exp $	*/
d181 1
a181 1
	int	printfn __P((void *, char *));
@


1.4
log
@sync to netbsd; for graichen
@
text
@d71 1
a71 1
int	tcprint(void *, char *);
@


1.3
log
@update from netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: tc.c,v 1.7 1996/01/03 20:39:10 jonathan Exp $	*/
d7 1
a7 1
 * Author: Chris G. Demetriou
d30 2
a37 3
#ifdef alpha
#include <machine/rpb.h>
#endif
d40 3
a42 3
#include <cfb.h>
#include <mfb.h>
#include <sfb.h>
a46 14
struct tc_softc {
	struct	device sc_dv;
	int	sc_nslots;
	struct tc_slotdesc *sc_slots;

	void	(*sc_intr_establish) __P((struct device *, void *,
		    tc_intrlevel_t, int (*)(void *), void *));
	void	(*sc_intr_disestablish) __P((struct device *, void *));
#ifndef goneverysoon
	struct	abus sc_bus;
	struct	tc_cpu_desc *sc_desc;
#endif /* goneverysoon */
};

d50 12
a61 11
struct tc_cpu_desc {
	struct	tc_slotdesc *tcd_slots;
	long	tcd_nslots;
	struct	confargs *tcd_devs;
	long	tcd_ndevs;
	void	(*tc_intr_setup) __P((void));
	void	(*tc_intr_establish) __P((struct device *dev, void *cookie,
			 int level, intr_handler_t handler, void *arg));
	void	(*tc_intr_disestablish) __P((struct device *, void *));
	int	(*tc_iointr) __P((u_int mask, u_int pc,
				  u_int statusReg, u_int causeReg));
d64 2
a65 2
/* Return the appropriate tc_cpu_desc for a given cputype */
extern struct tc_cpu_desc *  cpu_tcdesc __P ((int cputype));
a71 2
struct cfdriver tccd =
    { NULL, "tc", tcmatch, tcattach, DV_DULL, sizeof (struct tc_softc) };
d73 1
a73 1
void	tc_intr_establish __P((struct device *, void *, tc_intrlevel_t,
a76 1
int	tc_matchname __P((struct confargs *, char *));
a84 2
/*XXX*/ /* should be in separate source file  */

d86 1
a86 3
 *  tc config structures for DECstations.
 *  Since there will never be new decstations, we just
 *  bash it in here, for now.
d107 3
a109 1
			 int level, intr_handler_t handler, void *arg));
d141 2
a142 2
 * Function to map from a CPU code to a tc_cpu_desc.
 * This hould really be in machine-dependent code, where
d145 1
a145 1
struct tc_cpu_desc *
a158 3
#ifdef DEBUG
		printf("MAXINE turbochannel\n");
#endif
d170 1
a170 1
		panic("tcattach: Unrecognized bus type 0x%x\n", cpu);
a173 1

d175 1
a175 3
 * Temporary glue:
 * present the old-style signatures as used by BUS_INTR_ESTABLISH(),
 * but using the new NetBSD machine-independent TC infrastructure.
a176 1

d178 4
a181 24
confglue_tc_intr_establish(ca, handler, arg)
	struct confargs *ca;
	intr_handler_t handler;
	intr_arg_t arg;
{
	struct tc_softc *sc = tccd.cd_devs[0]; /* XXX */
	/* XXX guess at level */
	(*sc->sc_desc->tc_intr_establish)
		((struct device*)sc, (void*)ca->ca_slotpri, 0, handler, arg);
}

void
confglue_tc_intr_disestablish(ca)
	struct confargs *ca;
{
	struct tc_softc *sc = tccd.cd_devs[0]; /* XXX */

	(*sc->sc_desc->tc_intr_disestablish)(
	     (struct device*)sc, (void*)ca->ca_slotpri);
}
/*
 * End of temporary glue.
 */

a182 5
int
tcmatch(parent, cfdata, aux)
	struct device *parent;
	void *cfdata;
	void *aux;
d184 1
a184 2
	struct cfdata *cf = cfdata;
	struct confargs *ca = aux;
d186 1
d188 5
a192 202
        /* Make sure that we're looking for a TC. */
        if (strcmp(ca->ca_name, tccd.cd_name) != 0)
                return (0);

        /* Make sure that unit exists. */
	if (cf->cf_unit != 0 ||
#ifdef pmax
	    0
#else
	    cputype > ntc_cpu_devs || tc_cpu_devs[cputype] == NULL
#endif
	    )
		return (0);

	return (1);
}

/*
 * Attach a turbochannel bus.   Once the turbochannel is attached,
 * search recursively for a system slot (which contains registers
 * for baseboard devices  in "subslots"), and for "real" on-board or
 * option turbochannel slots (that have their own turbochannel ROM
 * signature.
 */
void
tcattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct tc_softc *sc = (struct tc_softc *)self;
	struct confargs *nca;
	char namebuf[TC_ROM_LLEN+1];
	int i;

	printf("\n");

	/* keep our CPU description handy */
	sc->sc_desc = cpu_tcdesc(cputype);

#ifndef pmax /*XXX*/
	/* set up interrupt handlers */
	(*sc->sc_desc->tc_intr_setup)();
	set_iointr(sc->sc_desc->tc_iointr);
#endif /*!PMAX*/

	sc->sc_bus.ab_dv = (struct device *)sc;
	sc->sc_bus.ab_type = BUS_TC;
	sc->sc_bus.ab_intr_establish = confglue_tc_intr_establish;
	sc->sc_bus.ab_intr_disestablish = confglue_tc_intr_disestablish;
	sc->sc_bus.ab_cvtaddr = tc_cvtaddr;
	sc->sc_bus.ab_matchname = tc_matchname;

	if (sc->sc_desc == NULL)
		return;

	/* Try to configure each turbochannel (or CPU-internal) device */
	for (i = 0; i < sc->sc_desc->tcd_ndevs; i++) {

		nca = &sc->sc_desc->tcd_devs[i];
		if (nca == NULL) {
			printf("tcattach: bad config for slot %d\n", i);
			break;
		}
		nca->ca_bus = &sc->sc_bus;

#if defined(DIAGNOSTIC) || defined(DEBUG)
		if (nca->ca_slot > sc->sc_desc->tcd_nslots)
			panic("tcattach: dev slot > number of slots for %s",
			    nca->ca_name);
#endif

		if (tc_checkdevmem(BUS_CVTADDR(nca)) == 0)
			continue;

		/* If no name, we have to see what might be there. */
		if (nca->ca_name == NULL) {
			if (tc_checkslot(BUS_CVTADDR(nca), namebuf) == 0)
				continue;
			nca->ca_name = namebuf;
		}
		/* Tell the autoconfig machinery we've found the hardware. */
		config_found(self, nca, tcprint);
	}
}

int
tcprint(aux, pnp)
	void *aux;
	char *pnp;
{
	struct confargs *ca = aux;

        if (pnp)
                printf("%s at %s", ca->ca_name, pnp);
        printf(" slot %ld offset 0x%lx", ca->ca_slot, ca->ca_offset);
        return (UNCONF);
}

caddr_t
tc_cvtaddr(ca)
	struct confargs *ca;
{
	struct tc_softc *sc = tccd.cd_devs[0];

	return ((caddr_t)sc->sc_desc->tcd_slots[ca->ca_slot].tcs_addr +
		ca->ca_offset);

}

void
tc_intr_establish(dev, cookie, level, handler, arg)
	/*struct confargs *ca;*/
	struct device *dev;
	void *cookie;
	tc_intrlevel_t level;
	intr_handler_t handler;
	intr_arg_t arg;
{
	struct tc_softc *sc = (struct tc_softc *)dev;

#ifdef DEBUG
	printf("tc_intr_establish: %s parent intrcode %d\n",
	       dev->dv_xname, dev->dv_parent->dv_xname, (int) cookie);
#endif

	/* XXX pmax interrupt-enable interface */
	(*sc->sc_desc->tc_intr_establish)(sc->sc_dv.dv_parent, cookie,
		 level, handler, arg);
}

void
tc_intr_disestablish(dev, cookie)
	struct device *dev;
	void *cookie;
{
	struct tc_softc *sc = (struct tc_softc *)dev;

	(*sc->sc_intr_disestablish)(sc->sc_dv.dv_parent, cookie);
}

int
tc_matchname(ca, name)
	struct confargs *ca;
	char *name;
{

	return (bcmp(name, ca->ca_name, TC_ROM_LLEN) == 0);
}

int
tc_checkdevmem(addr)
	caddr_t addr;
{
	u_int32_t *datap = (u_int32_t *) addr;

	/* Return non-zero if memory was there (i.e. address wasn't bad). */
	return (!badaddr(datap, sizeof (u_int32_t)));
}

u_int tc_slot_romoffs[] = { TC_SLOT_ROM, TC_SLOT_PROTOROM };
int ntc_slot_romoffs = sizeof tc_slot_romoffs / sizeof tc_slot_romoffs[0];

int
tc_checkslot(addr, namep)
	caddr_t addr;
	char *namep;
{
	struct tc_rommap *romp;
	int i, j;

	for (i = 0; i < ntc_slot_romoffs; i++) {
		romp = (struct tc_rommap *)
		    (addr + tc_slot_romoffs[i]);

		switch (romp->tcr_width.v) {
		case 1:
		case 2:
		case 4:
			break;

		default:
			continue;
		}

		if (romp->tcr_stride.v != 4)
			continue;

		for (j = 0; j < 4; j++)
			if (romp->tcr_test[j+0*romp->tcr_stride.v] != 0x55 ||
			    romp->tcr_test[j+1*romp->tcr_stride.v] != 0x00 ||
			    romp->tcr_test[j+2*romp->tcr_stride.v] != 0xaa ||
			    romp->tcr_test[j+3*romp->tcr_stride.v] != 0xff)
				continue;

		for (j = 0; j < TC_ROM_LLEN; j++)
			namep[j] = romp->tcr_modname[j].v;
		namep[TC_ROM_LLEN] = '\0';
		return (1);
	}
	return (0);
}
d194 4
a197 4
int
tc_intrnull(val)
	void *val;
{
d199 1
a199 1
	panic("uncaught TC intr for slot %ld\n", (long)val);
a201 3



d215 1
a215 1
	struct tc_cpu_desc * sc_desc;
d227 1
a227 1
	for (slot = 0; slot < sc_desc->tcd_ndevs; slot++) {
d247 1
a247 1
	struct tc_cpu_desc * sc_desc;
d251 1
a251 1
	slotaddr = (void *)(sc_desc->tcd_slots[slot].tcs_addr);
d253 1
a253 1
	if (tc_checkdevmem(slotaddr) == 0)
a292 9

/* hack for kn03 ioasic */

void
tc_ds_ioasic_intr_setup ()
{
	printf("not setting up TC intrs\n");
}

d297 1
a297 1
tc_ds_ioasic_intr_establish(dev, cookie, level, handler, val)
d300 1
a300 1
    int level;
a304 14
#ifdef notanymore
	 if (BUS_MATCHNAME(ca, "IOCTL   ")) {
		 printf("(no interrupt for asic");
		 return;
	 }

	/* The kn02 doesn't really have an ASIC */
	 if (BUS_MATCHNAME(ca, KN02_ASIC_NAME)) {
		 printf("(no interrupt for proto-asic)\n");
		 return;
	 }
#endif


d315 11
a325 1
	 /* Enable interrupt number "cookie" on this CPU */
d329 26
d361 1
a361 1
    	printf("cannot dis-establish TC intrs\n");
d371 3
@


1.2
log
@from netbsd: Add untested, partial support for Decsystem 5100 (mipsfair).
@
text
@d1 1
a1 1
/*	$NetBSD: tc.c,v 1.6 1995/12/28 06:44:57 jonathan Exp $	*/
d32 2
a33 1

a37 1
#include <alpha/tc/tc.h>
d40 7
a46 3
#ifdef pmax
#include <pmax/tc/tc.h>
#endif
d50 7
d59 1
d62 20
d89 3
a91 3
void	tc_intr_establish __P((struct confargs *, intr_handler_t handler,
			       intr_arg_t));
void	tc_intr_disestablish __P((struct confargs *));
d96 4
d121 3
a123 1
#include <pmax/pmax/nameglue.h>
d127 3
a129 3
void	tc_ds_ioasic_intr_establish
	    __P((struct confargs *, intr_handler_t, void *));
void	tc_ds_ioasic_intr_disestablish __P((struct confargs *));
d152 1
a152 1
 * configuration tables for the four models of
a157 24

/*
 * Mapping from CPU type to a tc_cpu_desc for that CPU type.
 * (Alpha-specific.)
 */
struct tc_cpu_desc *tc_cpu_devs[] = {
        NULL,                   /* Unused */
        NULL,                   /* ST_ADU */
        NULL,                   /* ST_DEC_4000 */
        NULL,                   /* ST_DEC_7000 */
#ifdef DEC_3000_500
        &dec_3000_500_cpu,      /* ST_DEC_3000_500 */
#else
        NULL,
#endif
        NULL,                   /* Unused  */
        NULL,                   /* ST_DEC_2000_300 */
#ifdef DEC_3000_300
        &dec_3000_300_cpu,      /* ST_DEC_3000_300 */
#else
        NULL,
#endif
};
int ntc_cpu_devs = sizeof tc_cpu_devs / sizeof tc_cpu_devs[0];
a167 2
 /*XXX*/
#ifdef	pmax
a174 1
		DPRINTF(("tcattach: 3MIN Turbochannel\n"));
d178 3
a180 1
		DPRINTF(("MAXINE turbochannel\n"));
d184 3
a186 1
		DPRINTF(("tcattach: PMAX, no turbochannel\n"));
d189 2
a190 1
		DPRINTF(("tcattach: Mipsfair (5100), no turbochannel\n"));
d194 20
d215 8
a222 3
#else  /* alpha?*/
	return tc_cpu_devs[cputype];
#endif /* alpha?*/
d224 4
d287 2
a288 2
	sc->sc_bus.ab_intr_establish = tc_intr_establish;
	sc->sc_bus.ab_intr_disestablish = tc_intr_disestablish;
d344 2
a345 1
	return (sc->sc_desc->tcd_slots[ca->ca_slot].tsd_dense + ca->ca_offset);
d350 5
a354 2
tc_intr_establish(ca, handler, val)
	struct confargs *ca;
d356 1
a356 1
	intr_arg_t val;
d358 6
a363 1
	struct tc_softc *sc = tccd.cd_devs[0];
d365 3
a367 1
	(*sc->sc_desc->tc_intr_establish)(ca, handler, val);
d371 3
a373 2
tc_intr_disestablish(ca)
	struct confargs *ca;
d375 1
a375 1
	struct tc_softc *sc = tccd.cd_devs[0];
d377 1
a377 1
	(*sc->sc_desc->tc_intr_disestablish)(ca);
d450 94
d545 1
a545 1
/* hack for kn03 */
d553 3
d557 4
a560 2
tc_ds_ioasic_intr_establish(ca, handler, val)
    struct confargs *ca;
a563 1
	int unit = (int) val;
d565 1
d576 2
d581 2
a582 2
	    printf("tc_enable %s%d slot %d\n",
		   ca->ca_name, (int)unit, ca->ca_slotpri);
d589 2
a590 1
	(*tc_enable_interrupt) (ca->ca_slotpri, handler, (void*)unit, 1);
d594 3
a596 2
tc_ds_ioasic_intr_disestablish(args)
    struct confargs *args;
a605 2
    
			   
d607 1
a607 1
	printf("bogus interrupt handler\n");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: tc.c,v 1.5 1995/10/09 01:45:30 jonathan Exp $	*/
d173 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
