head	1.2;
access;
symbols
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	UBC_SYNC_A:1.2
	UBC_SYNC_B:1.2
	OPENBSD_2_9:1.1.0.14
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.12
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.10
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.8
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.06.24.23.47.42;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	98.06.04.03.49.48;	author jason;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.07.04.10.20.53;	author niklas;	state dead;
branches;
next	;


desc
@@


1.2
log
@bye bye, with prejudice
@
text
@/*	$OpenBSD: led.c,v 1.1 1998/06/04 03:49:48 jason Exp $	*/

/*
 * Copyright (c) 1998 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <machine/autoconf.h>
#include <pmax/pmax/kn01.h>
#include <pmax/pmax/pmaxtype.h>
#include <pmax/dev/led.h>

/*
 * This is the driver for the "led" register available on the kn01 machines.
 */

static int ledmatch __P((struct device *, void *, void *));
static void ledattach __P((struct device *, struct device *, void *));

struct cfattach led_ca = {
	sizeof(struct device), ledmatch, ledattach
};

struct cfdriver led_cd = {
	NULL, "led", DV_DULL
};

/* from machdep */
extern int pmax_boardtype;

static char led_attached = 0;
static int led_index = 0;
u_short led_current = 0xff;
int pmax_led_blink;

/*
 * These led patterns produce a line that scrolls across the display, then
 * back again.  Note that a value of 0 for a particular bit lights the
 * corresponding LED, and 1 leaves it dark.
 */
static char led_patterns[] =
	{ 0xff, 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe,
	  0xff, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, };

static int
ledmatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct confargs *ca = aux;

	if (pmax_boardtype == DS_PMAX)		/* only handle [23]100 now */
		return (strcmp("led", ca->ca_name) == 0);
	return (0);
}

/* ARGSUSED */
static void
ledattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	led_attached = 1;
	printf("\n");

	/* In case it's initialized to true... */
	if (pmax_led_blink)
		led_pmax_cycle((caddr_t)0);
}

/*
 * Check to see whether we were configured and whether machdep.led_blink != 0.
 * If so, put a new pattern into the register and schedule ourselves to
 * be called again later.  The timeout is set to: [(1/8) * loadavg] seconds.
 */
void
led_pmax_cycle(zero)
	void *zero;
{
	int s;
	unsigned short csr;

	if (!led_attached)
		return;

	if (!pmax_led_blink)
		led_current = 0xff;
	else {
		led_index = (led_index + 1) % sizeof(led_patterns);
		led_current = led_patterns[led_index] & KN01_CSR_LEDS_MASK;
	}

	csr = *((volatile u_short *) MIPS_PHYS_TO_KSEG1(KN01_SYS_CSR));
	csr = (csr & ~KN01_CSR_LEDS_MASK) | led_current;
	*((volatile u_short *) MIPS_PHYS_TO_KSEG1(KN01_SYS_CSR)) = csr;

	if (pmax_led_blink) {
		s = (((averunnable.ldavg[0] + FSCALE) * hz) >> (FSHIFT + 3));
		timeout(led_pmax_cycle, (caddr_t)0, s);
	}
}
@


1.1
log
@LED blinker for the back panel leds on the 2100/3100.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.8.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: led.c,v 1.1 1998/06/04 03:49:48 jason Exp $	*/
@


