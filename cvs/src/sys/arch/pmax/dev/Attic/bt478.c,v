head	1.7;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	UBC_SYNC_A:1.7
	UBC_SYNC_B:1.7
	OPENBSD_2_9:1.6.0.14
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.12
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.10
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.8
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2001.06.24.23.47.31;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	98.05.18.00.27.57;	author millert;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	98.05.09.21.29.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.12.22.15.17.22;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.21.12.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.26.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.26;	author deraadt;	state Exp;
branches;
next	;

1.6.8.1
date	2001.07.04.10.20.42;	author niklas;	state dead;
branches;
next	;


desc
@@


1.7
log
@bye bye, with prejudice
@
text
@/*	$NetBSD: bt478.c,v 1.6 1996/10/13 13:13:51 jonathan Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)bt478.c	8.1 (Berkeley) 6/10/93
 */

/* 
 *  devGraphics.c --
 *
 *     	This file contains machine-dependent routines for the graphics device.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.  
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 *
 * from: Header: /sprite/src/kernel/dev/ds3100.md/RCS/devGraphics.c,
 *	v 9.2 90/02/13 22:16:24 shirriff Exp  SPRITE (DECWRL)";
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/select.h>

#include <machine/cpuregs.h>
#include <machine/pmioctl.h>

#include <machine/fbio.h>
#include <machine/fbvar.h>

#include <pmax/dev/bt478.h>
#include <pmax/dev/bt478var.h>
#include <pmax/pmax/kn01.h>

/*
 * Forward references.
 */



/* XXX qvss ioctl interface uses this */
void bt478CursorColor __P((struct fbinfo *fi, unsigned int color[]));


static u_char	bg_RGB[3];	/* background color for the cursor */
static u_char	fg_RGB[3];	/* foreground color for the cursor */

/* Initialize the VDAC. */

int
bt478init(fi)
	struct fbinfo *fi;
{
	register VDACRegs *vdac = (VDACRegs *)(fi -> fi_vdac);

	/*
	 *
	 * Initialize the VDAC
	 */
	vdac->overWA = 0x04; wbflush();
	vdac->over = 0x00; wbflush();
	vdac->over = 0x00; wbflush();
	vdac->over = 0x00; wbflush();
	vdac->overWA = 0x08; wbflush();
	vdac->over = 0x00; wbflush();
	vdac->over = 0x00; wbflush();
	vdac->over = 0x7f; wbflush();
	vdac->overWA = 0x0c; wbflush();
	vdac->over = 0xff; wbflush();
	vdac->over = 0xff; wbflush();
	vdac->over = 0xff; wbflush();

	/* Initialize the cursor position... */
	fi -> fi_cursor.width = 16;
	fi -> fi_cursor.height = 16;
	fi -> fi_cursor.x = 0;
	fi -> fi_cursor.y = 0;

	/*
	 * Initialize the color map and the screen.
	 */
	bt478InitColorMap(fi);
	return (1);
}

/* restore the color of the cursor. */

void
bt478RestoreCursorColor(fi)
	struct fbinfo *fi;
{
	register VDACRegs *vdac = (VDACRegs *)(fi -> fi_vdac);
	register int i;

	vdac->overWA = 0x04;
	wbflush();
	for (i = 0; i < 3; i++) {  
		vdac->over = bg_RGB[i];
		wbflush();
	}

	vdac->overWA = 0x08;
	wbflush();
	vdac->over = 0x00;
	wbflush();
	vdac->over = 0x00;
	wbflush();
	vdac->over = 0x7f;
	wbflush();

	vdac->overWA = 0x0c;
	wbflush();
	for (i = 0; i < 3; i++) {
		vdac->over = fg_RGB[i];
		wbflush();
	}
}

/* Set the color of the cursor. */

void
bt478CursorColor (fi, color)
	struct fbinfo *fi;
	unsigned int color[];
{
	register int i, j;

	for (i = 0; i < 3; i++)
		bg_RGB[i] = (u_char)(color[i] >> 8);

	for (i = 3, j = 0; i < 6; i++, j++)
		fg_RGB[j] = (u_char)(color[i] >> 8);

	bt478RestoreCursorColor (fi);
}

/* Set the cursor foreground color to zero (used by pm.c
   for screen blanking). */

void
bt478BlankCursor(fi)
	struct fbinfo *fi;
{
	register VDACRegs *vdac = (VDACRegs *)(fi -> fi_vdac);
	register int i;

	vdac->overWA = 0x0c;
	wbflush();
	for (i = 0; i < 3; i++) {
		vdac->over = 0;
		wbflush();
	}
}

/* Initialize the color map. */

/*static*/
void
bt478InitColorMap (fi)
	struct fbinfo *fi;
{
	register VDACRegs *vdac = (VDACRegs *)(fi -> fi_vdac);
	register int i;

	*(volatile char *)MIPS_PHYS_TO_KSEG1
		(KN01_PHYS_COLMASK_START) = 0xff;	/* XXX */
	wbflush();

	if (fi -> fi_type.fb_depth == 1) {
		vdac->mapWA = 0; wbflush();
		for (i = 0; i < 256; i++) {
			((u_char *)(fi -> fi_cmap_bits)) [i * 3] = 0;
			((u_char *)(fi -> fi_cmap_bits)) [i * 3 + 1]
				= (i < 128) ? 0x00 : 0xff;
			((u_char *)(fi -> fi_cmap_bits)) [i * 3 + 2] = 0;
			vdac->map = 0;
			wbflush();
			vdac->map = (i < 128) ? 0x00 : 0xff;
			wbflush();
			vdac->map = 0;
			wbflush();
		}
	} else {
		vdac->mapWA = 0; wbflush();
		((u_char *)(fi -> fi_cmap_bits)) [0] = 0;
		((u_char *)(fi -> fi_cmap_bits)) [1] = 0;
		((u_char *)(fi -> fi_cmap_bits)) [2] = 0;
		vdac->map = 0;
		wbflush();
		vdac->map = 0;
		wbflush();
		vdac->map = 0;
		wbflush();

		for (i = 1; i < 256; i++) {
			((u_char *)(fi -> fi_cmap_bits)) [i * 3] = 0xff;
			((u_char *)(fi -> fi_cmap_bits)) [i * 3 + 1] = 0xff;
			((u_char *)(fi -> fi_cmap_bits)) [i * 3 + 2] = 0xff;
			vdac->map = 0xff;
			wbflush();
			vdac->map = 0xff;
			wbflush();
			vdac->map = 0xff;
			wbflush();
		}
	}

	for (i = 0; i < 3; i++) {
		bg_RGB[i] = 0x00;
		fg_RGB[i] = 0xff;
	}
	bt478RestoreCursorColor(fi);
}

/* Load the color map. */

int
bt478LoadColorMap(fi, bits, index, count)
	struct fbinfo *fi;
	caddr_t bits;
	int index, count;
{
	register VDACRegs *vdac = (VDACRegs *)(fi -> fi_vdac);
	u_char *cmap_bits;
	u_char *cmap;
	int i;

	if (index < 0 || count < 1 || index + count > 256)
		return EINVAL;

	cmap_bits = (u_char *)bits;
	cmap = (u_char *)(fi -> fi_cmap_bits) + index * 3;

	for (i = 0; i < count; i++) {
		vdac->mapWA = i + index; wbflush();

		cmap [i * 3] = cmap_bits [i * 3];
		vdac->map = cmap_bits [i * 3];
		wbflush();

		cmap [i * 3 + 1] = cmap_bits [i * 3 + 1];
		vdac->map = cmap_bits [i * 3 + 1];
		wbflush();

		cmap [i * 3 + 2] = cmap_bits [i * 3 + 2];
		vdac -> map = cmap_bits [i * 3 + 2];
		wbflush();
	}
	return 0;
}

/* Copy out count entries of the colormap starting at index into bits. */

int
bt478GetColorMap(fi, bits, index, count)
	struct fbinfo *fi;
	caddr_t bits;
	int index, count;
{
	u_char *cmap_bits;
	u_char *cmap;

	if (index > 256 || index < 0 || index + count > 256)
		return EINVAL;

	cmap_bits = (u_char *)bits;
	cmap = (u_char *)(fi -> fi_cmap_bits) + index * 3;

	bcopy (cmap, cmap_bits, count * 3);
	return 0;
}
@


1.6
log
@new cpureg.h from NetBSD plus modifications to use the changed macro names
@
text
@@


1.6.8.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


1.5
log
@#include <pmax/foo.h> -> #include <machine/foo.h>
@
text
@d205 1
a205 1
	*(volatile char *)MACH_PHYS_TO_UNCACHED
@


1.4
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d65 1
a65 1
#include <pmax/cpuregs.h>
@


1.3
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: bt478.c,v 1.4 1996/04/08 00:57:43 jonathan Exp $	*/
d65 1
a65 1
#include <machine/machConst.h>
d72 1
a79 1
int bt478init __P((struct fbinfo *fi));
d81 1
a81 2
void bt478RestoreCursorColor __P((struct fbinfo *fi));
/* qvss ioctl interface uses this */
a83 11
void bt478BlankCursor __P((struct fbinfo *fi));
/*static*/ void bt478InitColorMap __P((struct fbinfo *fi));
int bt478GetColorMap __P((struct fbinfo *fi, caddr_t bits,
				   int index, int count));
int bt478LoadColorMap __P((struct fbinfo *fi, caddr_t bits,
				   int index, int count));



extern int pmax_boardtype;
extern u_short defCursor[32];
@


1.2
log
@update from netbsd (verbatim)
@
text
@d1 1
a1 1
/*	$NetBSD: bt478.c,v 1.2 1995/11/25 10:38:42 mellon Exp $	*/
d60 1
d77 16
a92 6
void bt478RestoreCursorColor();
void bt478CursorColor();	/* qvss ioctl interface uses this */
/*static*/ void bt478InitColorMap();
int bt478GetColorMap();
static void bt478VDACInit();
int bt478LoadColorMap();
d112 12
a123 12
	vdac->overWA = 0x04; MachEmptyWriteBuffer();
	vdac->over = 0x00; MachEmptyWriteBuffer();
	vdac->over = 0x00; MachEmptyWriteBuffer();
	vdac->over = 0x00; MachEmptyWriteBuffer();
	vdac->overWA = 0x08; MachEmptyWriteBuffer();
	vdac->over = 0x00; MachEmptyWriteBuffer();
	vdac->over = 0x00; MachEmptyWriteBuffer();
	vdac->over = 0x7f; MachEmptyWriteBuffer();
	vdac->overWA = 0x0c; MachEmptyWriteBuffer();
	vdac->over = 0xff; MachEmptyWriteBuffer();
	vdac->over = 0xff; MachEmptyWriteBuffer();
	vdac->over = 0xff; MachEmptyWriteBuffer();
d148 1
a148 1
	MachEmptyWriteBuffer();
d151 1
a151 1
		MachEmptyWriteBuffer();
d155 1
a155 1
	MachEmptyWriteBuffer();
d157 1
a157 1
	MachEmptyWriteBuffer();
d159 1
a159 1
	MachEmptyWriteBuffer();
d161 1
a161 1
	MachEmptyWriteBuffer();
d164 1
a164 1
	MachEmptyWriteBuffer();
d167 1
a167 1
		MachEmptyWriteBuffer();
d200 1
a200 1
	MachEmptyWriteBuffer();
d203 1
a203 1
		MachEmptyWriteBuffer();
d219 1
a219 1
	MachEmptyWriteBuffer();
d222 1
a222 1
		vdac->mapWA = 0; MachEmptyWriteBuffer();
d229 1
a229 1
			MachEmptyWriteBuffer();
d231 1
a231 1
			MachEmptyWriteBuffer();
d233 1
a233 1
			MachEmptyWriteBuffer();
d236 1
a236 1
		vdac->mapWA = 0; MachEmptyWriteBuffer();
d241 1
a241 1
		MachEmptyWriteBuffer();
d243 1
a243 1
		MachEmptyWriteBuffer();
d245 1
a245 1
		MachEmptyWriteBuffer();
d252 1
a252 1
			MachEmptyWriteBuffer();
d254 1
a254 1
			MachEmptyWriteBuffer();
d256 1
a256 1
			MachEmptyWriteBuffer();
d264 1
a264 1
	bt478RestoreCursorColor();
d280 1
a280 1
	if (index > 256 || index < 0 || index + count > 256)
a285 1
	vdac->mapWA = index; MachEmptyWriteBuffer();
d287 13
a299 9
		cmap [(i + index) * 3]
			= vdac->map = cmap_bits [i * 3];
		MachEmptyWriteBuffer();
		cmap [(i + index) * 3 + 1]
			= vdac->map = cmap_bits [i * 3 + 1];
		MachEmptyWriteBuffer();
		cmap [(i + index) * 3 + 2]
			= vdac -> map = cmap_bits [i * 3 + 2];
		MachEmptyWriteBuffer();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: bt478.c,v 1.1 1995/09/11 08:11:22 jonathan Exp $	*/
a123 1
	bt478RestoreCursorColor (fi);
d213 5
a217 2
			((u_char *)(fi -> fi_cmap_bits)) [i * 3]
				= vdac->map = (i < 128) ? 0x00 : 0xff;
d219 1
a219 2
			((u_char *)(fi -> fi_cmap_bits)) [i * 3 + 1]
				= vdac->map = (i < 128) ? 0x00 : 0xff;
d221 1
a221 2
			((u_char *)(fi -> fi_cmap_bits)) [i * 3 + 2]
				= vdac->map = (i < 128) ? 0x00 : 0xff;
a246 2
#if 0
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
