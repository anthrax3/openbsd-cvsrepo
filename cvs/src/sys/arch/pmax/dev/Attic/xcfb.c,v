head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	UBC_SYNC_B:1.6
	OPENBSD_2_9:1.5.0.14
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.8
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2001.06.24.23.47.57;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	98.05.18.00.28.10;	author millert;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	98.05.09.21.29.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.15.17.44;	author graichen;	state Exp;
branches;
next	1.2;

1.2
date	96.09.15.21.12.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.29;	author deraadt;	state Exp;
branches;
next	;

1.5.8.1
date	2001.07.04.10.21.05;	author niklas;	state dead;
branches;
next	;


desc
@@


1.6
log
@bye bye, with prejudice
@
text
@/*	$NetBSD: xcfb.c,v 1.20 1996/10/14 01:39:57 mhitch Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)xcfb.c	8.1 (Berkeley) 6/10/93
 */

/* 
 * Mach Operating System
 * Copyright (c) 1991,1990,1989 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 *  devGraphics.c --
 *
 *     	This file contains machine-dependent routines for the graphics device.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.  
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 *
 * from: Header: /sprite/src/kernel/dev/ds3100.md/RCS/devGraphics.c,
 *	v 9.2 90/02/13 22:16:24 shirriff Exp  SPRITE (DECWRL)";
 */

#include "fb.h"

#include "xcfb.h"
#include "dtop.h"
#if NXCFB > 0
#if NDTOP == 0
xcfb needs dtop device
#else

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <sys/errno.h>
#include <sys/proc.h>
#include <sys/mman.h>
#include <sys/malloc.h>

#include <vm/vm.h>

#include <sys/device.h>
#include <dev/tc/tcvar.h>
#include <machine/autoconf.h>
#include <machine/cpuregs.h>		/* mips cached->uncached */

#include <machine/pmioctl.h>
#include <machine/fbio.h>
#include <machine/fbvar.h>

#include <pmax/pmax/cons.h>

#include <pmax/dev/xcfbreg.h>
#include <pmax/dev/xcfbvar.h>
#include <pmax/dev/ims332.h>
#include <pmax/pmax/maxine.h>

#include <pmax/dev/dtopreg.h>

#include <pmax/dev/fbreg.h>

/*
 * These need to be mapped into user space.
 */
struct fbuaccess xcfbu;


/*
 * rcons methods and globals.
 */
struct pmax_fbtty xcfbfb;

struct fbinfo	xcfbfi;	/*XXX*/
extern struct cfdriver cfb_cd;

#define CMAP_BITS	(3 * 256)		/* 256 entries, 3 bytes per. */
static u_char cmap_bits [CMAP_BITS];		/* colormap for console... */

#define XCFB_FB_SIZE 0x100000	/* size of raster (mapped into userspace) */


struct fbdriver xcfb_driver = {
	ims332_video_on,
	ims332_video_off,
	ims332InitColorMap,
	ims332GetColorMap,
	ims332LoadColorMap,
	ims332PosCursor,
	ims332LoadCursor,
	ims332CursorColor
};


/*
 * Forward references.
 */
extern u_short defCursor[32];


/*
 * Autoconfiguration data for config.new.
 * Use static-sized softc until config.old and old autoconfig
 * code is completely gone.
 */

int xcfbmatch __P((struct device *, void *, void *));
void xcfbattach __P((struct device *, struct device *, void *));

struct cfattach xcfb_ca = {
	sizeof(struct device), xcfbmatch, xcfbattach
};

struct cfdriver xcfb_cd = {
	NULL, "xcfb", DV_DULL
};

int
xcfbmatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	/*struct cfdata *cf = match;*/
	struct tc_attach_args *ta = aux;

	/* Make sure that it's an xcfb. */
	if (!TC_BUS_MATCHNAME(ta, "PMAG-DV ")  &&
	    strcmp(ta->ta_modname, "xcfb") != 0)
		return (0);

	return (1);
}

void
xcfbattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct tc_attach_args *ta = aux;

	if (!xcfbinit(NULL, (caddr_t)ta->ta_addr, self->dv_unit, 0))
		return;

	/* no interrupts for XCFB */
	/*BUS_INTR_ESTABLISH(ca, xcfbintr, self->dv_unit);*/
	printf("\n");
}


/*
 * Initialization
 */
int
xcfbinit(fi, base, unit, silent)
	struct fbinfo *fi;
	caddr_t base;
	int unit;
	int silent;
{
	/*XXX*/
	/*
	 * If this device is being intialized as the console, malloc()
	 * is not yet up and we must use statically-allocated space.
	 */
	if (fi == NULL) {
		fi = &xcfbfi;	/* XXX */
  		fi->fi_cmap_bits = (caddr_t)cmap_bits;
	} else {
    		fi->fi_cmap_bits = malloc(CMAP_BITS, M_DEVBUF, M_NOWAIT);
		if (fi->fi_cmap_bits == NULL) {
			printf("cfb%d: no memory for cmap\n", unit);
			return (0);
		}
	}

	/*XXX*/
	/*
	 * Or Cached? A comment in the Mach driver suggests that the X server
	 * runs faster in cached address space, but the X server is going
	 * to blow away the data cache whenever it updates the screen, so..
	 */
	base = (char *) MIPS_PHYS_TO_KSEG1(XINE_PHYS_CFB_START);
	
	/* Fill in main frame buffer info struct. */
	fi->fi_unit = unit;
	fi->fi_pixels = (caddr_t)(base + VRAM_OFFSET);
	fi->fi_pixelsize = 1024 * 768;
	fi->fi_base = (caddr_t)IMS332_RESET_ADDRESS;
	fi->fi_vdac = (caddr_t)IMS332_ADDRESS;
	fi->fi_size = 0x100000;
	fi->fi_linebytes = 1024;
	fi->fi_driver = &xcfb_driver;
	fi->fi_blanked = 0;

	/* Fill in Frame Buffer Type struct. */
	fi->fi_type.fb_boardtype = PMAX_FBTYPE_XCFB;
	fi->fi_type.fb_width = 1024;
	fi->fi_type.fb_height = 768;
	fi->fi_type.fb_depth = 8;
	fi->fi_type.fb_cmsize = 256;
	fi->fi_type.fb_size = XCFB_FB_SIZE;

	/*
	 * qvss/pm-style mmap()ed event queue compatibility glue
	 */
	/*
	 * Must be in Uncached space since the fbuaccess structure is
	 * mapped into the user's address space uncached.
	 */
	fi->fi_fbu = (struct fbuaccess *)
		MIPS_PHYS_TO_KSEG1(MIPS_KSEG0_TO_PHYS(&xcfbu));

	/* This is glass-tty state but it's in the shared structure. Ick. */
	fi->fi_fbu->scrInfo.max_row = 50;
	fi->fi_fbu->scrInfo.max_col = 80;

	init_pmaxfbu(fi);

	/*
	 * Initialize old-style pmax glass-tty screen info.
	 */
	fi->fi_glasstty = &xcfbfb;

	/*XXX*/
	/* dimensions translated -15 pixels, for sprite origin? */
	fi->fi_fbu->scrInfo.max_cur_x = 1008;
	fi->fi_fbu->scrInfo.max_cur_y = 752;

	fi->fi_fbu->scrInfo.min_cur_x = -15;
	fi->fi_fbu->scrInfo.min_cur_y = -15;

	/* Initialize the RAMDAC. */
	ims332init (fi);


	/* Connect serial device(s) */
	if (tb_kbdmouseconfig(fi)) {
		printf(" (mouse/keyboard config failed)");
		return (0);
	}

	/*
	 * Connect to the raster-console pseudo-driver
	 */
	fbconnect("PMAG-DV", fi, silent);

#ifdef	fpinitialized
	fp->initialized = 1;
#endif
	return (1);
}

#endif /* NDTOP */
#endif /* NXCFB */
@


1.5
log
@new cpureg.h from NetBSD plus modifications to use the changed macro names
@
text
@@


1.5.8.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@@


1.4
log
@#include <pmax/foo.h> -> #include <machine/foo.h>
@
text
@d246 1
a246 1
	base = (char *) MACH_PHYS_TO_UNCACHED(XINE_PHYS_CFB_START);
d275 1
a275 1
		MACH_PHYS_TO_UNCACHED(MACH_CACHED_TO_PHYS(&xcfbu));
@


1.3
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d108 1
a108 1
#include <pmax/cpuregs.h>		/* mips cached->uncached */
@


1.2
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: xcfb.c,v 1.14.4.1 1996/05/30 04:04:01 mhitch Exp $	*/
d108 2
a109 1
#include <machine/machConst.h>
a110 1

a159 10
extern void fbScreenInit __P((struct fbinfo *fi));


void genKbdEvent(), genMouseEvent(), genMouseButtons();

extern void dtopKBDPutc();
extern void (*dtopDivertXInput)();
extern void (*dtopMouseEvent)();
extern void (*dtopMouseButtons)();
extern int pmax_boardtype;
d205 1
a205 1
	if (!xcfbinit(NULL, (caddr_t)ta->ta_addr, self->dv_unit, 0));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: xcfb.c,v 1.9 1995/10/09 01:45:26 jonathan Exp $	*/
d83 1
a83 1
#include <fb.h>
d85 2
a86 2
#include <xcfb.h>
#include <dtop.h>
d93 1
d101 1
d106 1
d117 1
a119 1
#include <pmax/pmax/pmaxtype.h>
d137 1
a137 1
extern struct cfdriver cfb;
d140 1
a140 1
static u_char cmap_bits [NXCFB * CMAP_BITS];	/* One colormap per cfb... */
d182 6
a187 2
struct cfdriver xcfbcd = {
	NULL, "xcfb", xcfbmatch, xcfbattach, DV_DULL, sizeof(struct device), 0
d196 2
a197 3
	struct cfdata *cf = match;
	struct confargs *ca = aux;
	static int nxcfbs = 1;
d199 3
a201 2
	/* make sure that we're looking for this type of device. */
	if (!BUS_MATCHNAME(ca, "PMAG-DV ") && !BUS_MATCHNAME(ca, "xcfb"))
a203 5
#ifdef notyet
	/* if it can't have the one mentioned, reject it */
	if (cf->cf_unit >= nxcfbs)
		return (0);
#endif
d213 1
a213 1
	struct confargs *ca = aux;
d215 1
a215 1
	if (!xcfbinit(NULL, BUS_CVTADDR(ca), self->dv_unit, 0));
d234 15
a248 4
	register u_int *reset = (u_int *)IMS332_RESET_ADDRESS;

	if (fi == 0) fi = &xcfbfi;
	unit = 0;	/*XXX*/ /* FIXME */
a267 1
	fi->fi_cmap_bits = (caddr_t)&cmap_bits [CMAP_BITS * unit];
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
