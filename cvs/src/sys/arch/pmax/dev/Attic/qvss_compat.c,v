head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	UBC_SYNC_B:1.10
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2001.06.24.23.47.48;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2000.08.19.18.43.30;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.01.22.25.47;	author maja;	state Exp;
branches;
next	1.7;

1.7
date	99.01.11.05.11.50;	author millert;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	98.01.28.11.38.28;	author graichen;	state Exp;
branches;
next	1.5;

1.5
date	98.01.19.10.43.13;	author graichen;	state Exp;
branches;
next	1.4;

1.4
date	97.06.10.14.18.48;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.15.17.36;	author graichen;	state Exp;
branches;
next	1.2;

1.2
date	96.09.15.21.12.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.27;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2001.04.18.16.12.41;	author niklas;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2001.07.04.10.20.58;	author niklas;	state dead;
branches;
next	;


desc
@@


1.10
log
@bye bye, with prejudice
@
text
@/*	$OpenBSD: qvss_compat.c,v 1.9 2000/08/19 18:43:30 maja Exp $	*/
/*	$NetBSD: qvss_compat.c,v 1.8 1997/05/25 10:53:33 jonathan Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fb.c	8.1 (Berkeley) 6/10/93
 */

/* 
 *  devGraphics.c --
 *
 *     	This file contains machine-dependent routines for the graphics device.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.  
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 *
 * from: Header: /sprite/src/kernel/dev/ds3100.md/RCS/devGraphics.c,
 *	v 9.2 90/02/13 22:16:24 shirriff Exp  SPRITE (DECWRL)";
 */

/*
 * This file has all the routines common to the various frame buffer drivers
 * including a generic ioctl routine. The pmax_fb structure is passed into the
 * routines and has device specifics stored in it.
 * The LK201 keycode mapping routine is also here along with initialization
 * functions for the keyboard and mouse.
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/select.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/mman.h>
#include <sys/vnode.h>

#include <vm/vm.h>
#include <miscfs/specfs/specdev.h>

#include <machine/pmioctl.h>

#include <machine/fbio.h>
#include <machine/fbvar.h>
#include <pmax/dev/fbreg.h>		/* XXX should be renamed fbvar.h */
#include <pmax/dev/lk201.h>

/*#include <pmax/stand/dec_prom.h>*/

#include <pmax/pmax/cons.h>
#include <pmax/pmax/pmaxtype.h>

#include "dz_ds.h"
#include "dz_ioasic.h"
#include "scc.h"
#include "dtop.h"


/*
 * Forward / extern references.
 */

#include <pmax/dev/qvssvar.h>			/* our own externs */

struct termios; struct dcregs;
#include <pmax/dev/dtopvar.h>			/* dtop console I/O decls */
#include <pmax/tc/sccvar.h>			/* ioasic z8530 I/O decls */
#include <pmax/dev/dzvar.h>			/* DZ-11 chip console I/O */

extern int pmax_boardtype;

/*
 * Prototypes of local functions
 */
extern void pmEventQueueInit __P((pmEventQueue *qe));
void	genKbdEvent __P((int ch));
void	genMouseEvent __P((MouseReport *newRepPtr));
void	genMouseButtons __P((MouseReport *newRepPtr));
void	genConfigMouse __P((void));
void	genDeconfigMouse __P((void));
void	mouseInput __P((int cc));


#if NSCC > 0
extern void (*sccDivertXInput) __P((int cc));
extern void (*sccMouseEvent) __P((int));
extern void (*sccMouseButtons) __P((int));
#endif

extern struct fbinfo *firstfi;


/*
 * Initialize the old-style pmax framebuffer structure from a new-style
 * rcons structure. Can die when all the old style pmax_fb structures
 * are gone. Note that the QVSS/pm mapped event buffer includes the
 * fbu field initialized below.
 */
void
init_pmaxfbu(fi)
	struct fbinfo *fi;
{
	
	int tty_rows, tty_cols; /* rows, cols for glass-tty mode */
	register struct fbuaccess *fbu = NULL;

	if (fi == NULL || fi->fi_fbu == NULL)
		panic("init_pmaxfb: given null pointer to framebuffer");

	/* XXX don't rely on there being a pmax_fb struct */
	fbu = fi->fi_fbu;


	/* fb dimensions */
	fbu->scrInfo.max_x = fi->fi_type.fb_width;
	fbu->scrInfo.max_y = fi->fi_type.fb_height;
	fbu->scrInfo.max_cur_x = fbu->scrInfo.max_x - 1;
	fbu->scrInfo.max_cur_y = fbu->scrInfo.max_y - 1;

	/* these have the same  initial value on qvss-style framebuffers */
	fbu->scrInfo.version = 11;
	fbu->scrInfo.mthreshold = 4;
	fbu->scrInfo.mscale = 2;

	/* this is not always right (pm on kn01) but it's a common case */
	fbu->scrInfo.min_cur_x = 0;
	fbu->scrInfo.min_cur_y = 0;

	/*
	 * Compute glass-tty dimensions. These don't belong here
	 * anymore, but the Ultrix and 4.3+ bsd drivers put them
	 * in the event structure mapped into user address space.
	 */

	tty_cols = 80;

	/* A guess, but correct for 1024x864, 1024x768 and 1280x1024 */
	tty_rows = (fi->fi_type.fb_height / 15) - 1;

	if (tty_rows != fbu->scrInfo.max_row ||
	    tty_cols != fbu->scrInfo.max_col)
		printf("framebuffer init: size mismatch: given %dx%d, compute %dx%d\n",
		       fbu->scrInfo.max_row, fbu->scrInfo.max_col,
		       tty_rows, tty_cols);

	pmEventQueueInit(&fi->fi_fbu->scrInfo.qe);
}


/*
 * Initialize the qvss-style  ringbuffer of mouse button/move
 * events to be empty. Called both when initializing the
 * console softc and on each new open of that device.
 */
void
pmEventQueueInit(qe)
	pmEventQueue *qe;
{
	qe->timestamp_ms = TO_MS(time);
	qe->eSize = PM_MAXEVQ;
	qe->eHead = qe->eTail = 0;
	qe->tcSize = MOTION_BUFFER_SIZE;
	qe->tcNext = 0;
}

/*
 *----------------------------------------------------------------------
 *
 * fbKbdEvent --
 *
 *	Process a received character.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Events added to the queue.
 *
 *----------------------------------------------------------------------
 */
void
fbKbdEvent(ch, fi)
	int ch;
	register struct fbinfo *fi;
{
	register pmEvent *eventPtr;
	int i;
	register struct fbuaccess *fbu = NULL;

	if (!fi->fi_open)
		return;

	fbu = fi->fi_fbu;

	/*
	 * See if there is room in the queue.
	 */
	i = PM_EVROUND(fbu->scrInfo.qe.eTail + 1);
	if (i == fbu->scrInfo.qe.eHead)
		return;

	/*
	 * Add the event to the queue.
	 */
	eventPtr = &fbu->events[fbu->scrInfo.qe.eTail];
	eventPtr->type = BUTTON_RAW_TYPE;
	eventPtr->device = KEYBOARD_DEVICE;
	eventPtr->x = fbu->scrInfo.mouse.x;
	eventPtr->y = fbu->scrInfo.mouse.y;
	eventPtr->time = TO_MS(time);
	eventPtr->key = ch;
	fbu->scrInfo.qe.eTail = i;
	selwakeup(&fi->fi_selp);
}

/*
 *----------------------------------------------------------------------
 *
 * fbMouseEvent --
 *
 *	Process a mouse event.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	An event is added to the event queue.
 *
 *----------------------------------------------------------------------
 */
void
fbMouseEvent(newRepPtr, fi) 
	register MouseReport *newRepPtr;
	register struct fbinfo *fi;
{
	unsigned milliSec;
	int i;
	pmEvent *eventPtr;
	register struct fbuaccess *fbu = NULL;

	if (!fi->fi_open)
		return;

	fbu = fi->fi_fbu;

	milliSec = TO_MS(time);

	/*
	 * Check to see if we have to accelerate the mouse
	 */
	if (fbu->scrInfo.mscale >= 0) {
		if (newRepPtr->dx >= fbu->scrInfo.mthreshold) {
			newRepPtr->dx +=
				(newRepPtr->dx - fbu->scrInfo.mthreshold) *
				fbu->scrInfo.mscale;
		}
		if (newRepPtr->dy >= fbu->scrInfo.mthreshold) {
			newRepPtr->dy +=
				(newRepPtr->dy - fbu->scrInfo.mthreshold) *
				fbu->scrInfo.mscale;
		}
	}

	/*
	 * Update mouse position
	 */
	if (newRepPtr->state & MOUSE_X_SIGN) {
		fbu->scrInfo.mouse.x += newRepPtr->dx;
		if (fbu->scrInfo.mouse.x > fbu->scrInfo.max_cur_x)
			fbu->scrInfo.mouse.x = fbu->scrInfo.max_cur_x;
	} else {
		fbu->scrInfo.mouse.x -= newRepPtr->dx;
		if (fbu->scrInfo.mouse.x < fbu->scrInfo.min_cur_x)
			fbu->scrInfo.mouse.x = fbu->scrInfo.min_cur_x;
	}
	if (newRepPtr->state & MOUSE_Y_SIGN) {
		fbu->scrInfo.mouse.y -= newRepPtr->dy;
		if (fbu->scrInfo.mouse.y < fbu->scrInfo.min_cur_y)
			fbu->scrInfo.mouse.y = fbu->scrInfo.min_cur_y;
	} else {
		fbu->scrInfo.mouse.y += newRepPtr->dy;
		if (fbu->scrInfo.mouse.y > fbu->scrInfo.max_cur_y)
			fbu->scrInfo.mouse.y = fbu->scrInfo.max_cur_y;
	}

	/*
	 * Move the hardware cursor.
	 */
	(*fi->fi_driver->fbd_poscursor)
		(fi, fbu->scrInfo.mouse.x, fbu->scrInfo.mouse.y);

	/*
	 * Store the motion event in the motion buffer.
	 */
	fbu->tcs[fbu->scrInfo.qe.tcNext].time = milliSec;
	fbu->tcs[fbu->scrInfo.qe.tcNext].x = fbu->scrInfo.mouse.x;
	fbu->tcs[fbu->scrInfo.qe.tcNext].y = fbu->scrInfo.mouse.y;
	if (++fbu->scrInfo.qe.tcNext >= MOTION_BUFFER_SIZE)
		fbu->scrInfo.qe.tcNext = 0;
	if (fbu->scrInfo.mouse.y < fbu->scrInfo.mbox.bottom &&
	    fbu->scrInfo.mouse.y >=  fbu->scrInfo.mbox.top &&
	    fbu->scrInfo.mouse.x < fbu->scrInfo.mbox.right &&
	    fbu->scrInfo.mouse.x >=  fbu->scrInfo.mbox.left)
		return;

	fbu->scrInfo.mbox.bottom = 0;
	if (PM_EVROUND(fbu->scrInfo.qe.eTail + 1) == fbu->scrInfo.qe.eHead)
		return;

	i = PM_EVROUND(fbu->scrInfo.qe.eTail - 1);
	if ((fbu->scrInfo.qe.eTail != fbu->scrInfo.qe.eHead) && 
	    (i != fbu->scrInfo.qe.eHead)) {
		pmEvent *eventPtr;

		eventPtr = &fbu->events[i];
		if (eventPtr->type == MOTION_TYPE) {
			eventPtr->x = fbu->scrInfo.mouse.x;
			eventPtr->y = fbu->scrInfo.mouse.y;
			eventPtr->time = milliSec;
			eventPtr->device = MOUSE_DEVICE;
			return;
		}
	}
	/*
	 * Put event into queue and wakeup any waiters.
	 */
	eventPtr = &fbu->events[fbu->scrInfo.qe.eTail];
	eventPtr->type = MOTION_TYPE;
	eventPtr->time = milliSec;
	eventPtr->x = fbu->scrInfo.mouse.x;
	eventPtr->y = fbu->scrInfo.mouse.y;
	eventPtr->device = MOUSE_DEVICE;
	fbu->scrInfo.qe.eTail = PM_EVROUND(fbu->scrInfo.qe.eTail + 1);
	selwakeup(&fi->fi_selp);
}

/*
 *----------------------------------------------------------------------
 *
 * fbMouseButtons --
 *
 *	Process mouse buttons.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
fbMouseButtons(newRepPtr, fi)
	MouseReport *newRepPtr;
	register struct fbinfo *fi;
{
	static char temp, oldSwitch, newSwitch;
	int i, j;
	pmEvent *eventPtr;
	static MouseReport lastRep;
	register struct fbuaccess *fbu = NULL;

	if (!fi->fi_open)
		return;

	fbu = fi->fi_fbu;

	newSwitch = newRepPtr->state & 0x07;
	oldSwitch = lastRep.state & 0x07;

	temp = oldSwitch ^ newSwitch;
	if (temp == 0)
		return;
	for (j = 1; j < 8; j <<= 1) {
		if ((j & temp) == 0)
			continue;

		/*
		 * Check for room in the queue
		 */
		i = PM_EVROUND(fbu->scrInfo.qe.eTail+1);
		if (i == fbu->scrInfo.qe.eHead)
			return;

		/*
		 * Put event into queue.
		 */
		eventPtr = &fbu->events[fbu->scrInfo.qe.eTail];

		switch (j) {
		case RIGHT_BUTTON:
			eventPtr->key = EVENT_RIGHT_BUTTON;
			break;

		case MIDDLE_BUTTON:
			eventPtr->key = EVENT_MIDDLE_BUTTON;
			break;

		case LEFT_BUTTON:
			eventPtr->key = EVENT_LEFT_BUTTON;
		}
		if (newSwitch & j)
			eventPtr->type = BUTTON_DOWN_TYPE;
		else
			eventPtr->type = BUTTON_UP_TYPE;
		eventPtr->device = MOUSE_DEVICE;

		eventPtr->time = TO_MS(time);
		eventPtr->x = fbu->scrInfo.mouse.x;
		eventPtr->y = fbu->scrInfo.mouse.y;
		fbu->scrInfo.qe.eTail = i;
	}
	selwakeup(&fi->fi_selp);

	lastRep = *newRepPtr;
	fbu->scrInfo.mswitches = newSwitch;
}

/*
 * Use vm_mmap() to map the frame buffer and shared data into the user's
 * address space.
 * Return errno if there was an error.
 */
int
fbmmap_fb(fi, dev, data, p)
	struct fbinfo *fi;
	dev_t dev;
	caddr_t data;
	struct proc *p;
{
	int error;
	vm_offset_t addr;
	vm_size_t len;
	struct vnode vn;
	struct specinfo si;
	struct fbuaccess *fbp;
	register struct fbuaccess *fbu = fi->fi_fbu;

	len = mips_round_page(((vm_offset_t)fbu & PGOFSET) +
			      sizeof(struct fbuaccess)) +
		mips_round_page(fi->fi_type.fb_size);
	addr = (vm_offset_t)0x20000000;		/* XXX */
	vn.v_type = VCHR;			/* XXX */
	vn.v_specinfo = &si;			/* XXX */
	vn.v_rdev = dev;			/* XXX */
	/*
	 * Map the all the data the user needs access to into
	 * user space.
	 */
	error = vm_mmap(&p->p_vmspace->vm_map, &addr, len,
		VM_PROT_ALL, VM_PROT_ALL, MAP_SHARED, (caddr_t)&vn,
		(vm_offset_t)0);
	if (error)
		return (error);
	fbp = (struct fbuaccess *)(addr + ((vm_offset_t)fbu & PGOFSET));
	*(PM_Info **)data = &fbp->scrInfo;
	fbu->scrInfo.qe.events = fbp->events;
	fbu->scrInfo.qe.tcs = fbp->tcs;
	fbu->scrInfo.planemask = (char *)0;
	/*
	 * Map the frame buffer into the user's address space.
	 */
	fbu->scrInfo.bitmap = (char *)mips_round_page(fbp + 1);
	return (0);
}

/*
 * Generic functions for keyboard and mouse input.
 * Just use the "generic" qvss/pm-compatible functions  above, but pass them
 * the soft state for the first framebuffer found on this system.
 * We don't support more  than one mouse, even for multiple
 * framebuffers, so this should be adequate.
 * It also relieves each fb driver from having to provide its own
 * version of these functions.
 *
 * TODO: change the callers of these to pass a pointer to the struct fbinfo,
 * thus finessing the problem.
 */

void
genKbdEvent(ch)
	int ch;
{
	fbKbdEvent(ch, firstfi);
}

void
genMouseEvent(newRepPtr)
	MouseReport *newRepPtr;
{
	fbMouseEvent(newRepPtr, firstfi);
}

void
genMouseButtons(newRepPtr)
	MouseReport *newRepPtr;
{
	fbMouseButtons(newRepPtr, firstfi);
}

/*
 * Configure the mouse and keyboard based on machine type
 */
void
genConfigMouse()
{
	int s;

	s = spltty();
	switch (pmax_boardtype) {
#if NDZ_IOASIC > 0
	case DS_3MAX:
		dzDivertXInput = genKbdEvent;
		dzMouseEvent = (void (*) __P((int)))genMouseEvent;
		dzMouseButtons = (void (*) __P((int)))genMouseButtons;
		break;
#endif /* NDZ_IOASIC */

#if NDZ_DS > 0
	case DS_PMAX:
		dzDivertXInput = genKbdEvent;
		dzMouseEvent = (void (*) __P((int)))genMouseEvent;
		dzMouseButtons = (void (*) __P((int)))genMouseButtons;
		break;
#endif /* NDZ_DS */

#if NSCC > 0
	case DS_3MIN:
	case DS_3MAXPLUS:
		sccDivertXInput = (void (*) __P((int)))genKbdEvent;
		sccMouseEvent = (void (*) __P((int)))genMouseEvent;
		sccMouseButtons = (void (*) __P((int)))genMouseButtons;
		break;
#endif
#if NDTOP > 0
	case DS_MAXINE:
		dtopDivertXInput = genKbdEvent;
		dtopMouseEvent = genMouseEvent;
		dtopMouseButtons = genMouseButtons;
		break;
#endif
	default:
		printf("Can't configure mouse/keyboard\n");
	};
	splx(s);
}

/*
 * and deconfigure them
 */
void
genDeconfigMouse()
{
	int s;

	s = spltty();
	switch (pmax_boardtype) {
#if NDZ_IOASIC > 0
	case DS_3MAX:

		dzDivertXInput = (void (*) __P((int)) )0;
		dzMouseEvent = (void (*) __P((int)) )0;
		dzMouseButtons = (void (*) __P((int)) )0;
		break;
#endif  /* NDZ_IOASIC */

#if NDZ_DS > 0
	case DS_PMAX:
		dzDivertXInput = (void (*) __P((int)) )0;
		dzMouseEvent = (void (*) __P((int)) )0;
		dzMouseButtons =  (void (*) __P((int)) )0;
		break;
#endif /* NDZ_DS */

#if NSCC > 0
	case DS_3MIN:
	case DS_3MAXPLUS:
		sccDivertXInput = (void (*) __P((int)))0;
		sccMouseEvent = (void (*) __P((int)))0;
		sccMouseButtons = (void (*) __P((int)))0;
		break;
#endif

#if NDTOP > 0
	case DS_MAXINE:
		dtopDivertXInput = (void (*) __P((int)) )0;
		dtopMouseEvent = (void (*) __P((MouseReport *)) )0;
		dtopMouseButtons = (void (*) __P((MouseReport *)) )0;
		break;
#endif
	default:
		printf("Can't deconfigure mouse/keyboard\n");
	};
}


/**
 ** And a mouse-report handler for redirected mouse input.
 ** Could arguably be in its own source file, but it's only
 ** used when the kernel is performing  mouse tracking.
 **/

/*
 * Mouse-event parser.  Called as an upcall with each character
 * read from a serial port. Accumulates complete mouse-event
 *  reports and passes them up to framebuffer layer.
 * Mouse events are reported as a 3-byte sequence:
 * header+button state, delta-x, delta-y
 */
void
mouseInput(cc)
	int cc;
{
	register MouseReport *mrp;
	static MouseReport currentRep;

	mrp = &currentRep;
	mrp->byteCount++;
	if (cc & MOUSE_START_FRAME) {
		/*
		 * The first mouse report byte (button state).
		 */
		mrp->state = cc;
		if (mrp->byteCount > 1)
			mrp->byteCount = 1;
	} else if (mrp->byteCount == 2) {
		/*
		 * The second mouse report byte (delta x).
		 */
		mrp->dx = cc;
	} else if (mrp->byteCount == 3) {
		/*
		 * The final mouse report byte (delta y).
		 */
		mrp->dy = cc;
		mrp->byteCount = 0;
		if (mrp->dx != 0 || mrp->dy != 0) {
			/*
			 * If the mouse moved,
			 * post a motion event.
			 */
			(genMouseEvent)(mrp);
		}
		(genMouseButtons)(mrp);
	}
}
@


1.9
log
@Late in the release of OpenBSD/pmax 2.7 a conflict between the pmax
dc driver and the generic if_dc driver was found. The fix was to
change the pmax drivers name to dz instead. But this was only done
in a miminal way.

This commit will switch over and use the new dz driver.

-moj
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.8
log
@changed dc to dz to avoid conflict with if_dc. -moj
@
text
@d1 1
d108 1
a108 1
#include <pmax/dev/dcvar.h>			/* DZ-11 chip console I/O */
d553 3
a555 3
		dcDivertXInput = genKbdEvent;
		dcMouseEvent = (void (*) __P((int)))genMouseEvent;
		dcMouseButtons = (void (*) __P((int)))genMouseButtons;
d561 3
a563 3
		dcDivertXInput = genKbdEvent;
		dcMouseEvent = (void (*) __P((int)))genMouseEvent;
		dcMouseButtons = (void (*) __P((int)))genMouseButtons;
d601 3
a603 3
		dcDivertXInput = (void (*) __P((int)) )0;
		dcMouseEvent = (void (*) __P((int)) )0;
		dcMouseButtons = (void (*) __P((int)) )0;
d609 3
a611 3
		dcDivertXInput = (void (*) __P((int)) )0;
		dcMouseEvent = (void (*) __P((int)) )0;
		dcMouseButtons =  (void (*) __P((int)) )0;
@


1.7
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d92 2
a93 2
#include "dc_ds.h"
#include "dc_ioasic.h"
d550 1
a550 1
#if NDC_IOASIC > 0
d556 1
a556 1
#endif /* NDC_IOASIC */
d558 1
a558 1
#if NDC_DS > 0
d564 1
a564 1
#endif /* NDC_DS */
d597 1
a597 1
#if NDC_IOASIC > 0
d604 1
a604 1
#endif  /* NDC_IOASIC */
d606 1
a606 1
#if NDC_DS > 0
d612 1
a612 1
#endif /* NDC_DS */
@


1.7.6.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@a0 1
/*	$OpenBSD: qvss_compat.c,v 1.9 2000/08/19 18:43:30 maja Exp $	*/
d92 2
a93 2
#include "dz_ds.h"
#include "dz_ioasic.h"
d107 1
a107 1
#include <pmax/dev/dzvar.h>			/* DZ-11 chip console I/O */
d550 1
a550 1
#if NDZ_IOASIC > 0
d552 3
a554 3
		dzDivertXInput = genKbdEvent;
		dzMouseEvent = (void (*) __P((int)))genMouseEvent;
		dzMouseButtons = (void (*) __P((int)))genMouseButtons;
d556 1
a556 1
#endif /* NDZ_IOASIC */
d558 1
a558 1
#if NDZ_DS > 0
d560 3
a562 3
		dzDivertXInput = genKbdEvent;
		dzMouseEvent = (void (*) __P((int)))genMouseEvent;
		dzMouseButtons = (void (*) __P((int)))genMouseButtons;
d564 1
a564 1
#endif /* NDZ_DS */
d597 1
a597 1
#if NDZ_IOASIC > 0
d600 3
a602 3
		dzDivertXInput = (void (*) __P((int)) )0;
		dzMouseEvent = (void (*) __P((int)) )0;
		dzMouseButtons = (void (*) __P((int)) )0;
d604 1
a604 1
#endif  /* NDZ_IOASIC */
d606 1
a606 1
#if NDZ_DS > 0
d608 3
a610 3
		dzDivertXInput = (void (*) __P((int)) )0;
		dzMouseEvent = (void (*) __P((int)) )0;
		dzMouseButtons =  (void (*) __P((int)) )0;
d612 1
a612 1
#endif /* NDZ_DS */
@


1.7.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: qvss_compat.c,v 1.7.6.1 2001/04/18 16:12:41 niklas Exp $	*/
@


1.6
log
@ok - now the full and correct patch for this problem - thanks again to
Nino Margetic <nino@@well.ox.ac.uk> and Per Kristian Gjermshus
<pergj@@ifi.uio.no>
@
text
@d147 1
a147 1
		panic("init_pmaxfb: given null pointer to framebuffer\n");
@


1.5
log
@fix typo which prevented the xserver on some pmax from working
(cannot configure keyboard/mouse) - found by Per Kristian Gjermshus
<pergj@@ifi.uio.no>
@
text
@d569 3
a571 3
		sccDivertXInput = genKbdEvent;
		sccMouseEvent = genMouseEvent;
		sccMouseButtons = genMouseButtons;
d614 1
a614 1
#if NSCC > 1
d617 3
a619 3
		sccDivertXInput = (void (*) __P((int)) )0;
		sccMouseEvent = (void (*) __P((MouseReport *)) )0;
		sccMouseButtons = (void (*) __P((MouseReport *)) )0;
@


1.4
log
@update the pmax specific stuff to NetBSD-current as of about 970608 - some
cosmetic things will follow together with an update to an exact NETBSD_CU-
RRENT_xxxxxx level
@
text
@d566 1
a566 1
#if NSCC > 1
@


1.3
log
@update the pmax stuff to NetBSD 961107 - this version i got somehow
compiled on my decstation 2100 (PLUTO) - but it will not fully work
out of the box - but i want to bring it into the tree because i get
my own pmax on 961228 - so that i have a good startpoint then :-)

all the OpenBSD changes to the pmax tree will follow in the next commit
@
text
@d1 1
a1 1
/*	$NetBSD: qvss_compat.c,v 1.6 1996/10/13 03:39:36 christos Exp $	*/
d92 2
a93 1
#include "dc.h"
d103 6
d111 3
a122 28

#if NDC > 0
extern void (*dcDivertXInput)();
extern void (*dcMouseEvent)();
extern void (*dcMouseButtons)();
#endif
#if NSCC > 0
extern void (*sccDivertXInput)();
extern void (*sccMouseEvent)();
extern void (*sccMouseButtons)();
#endif
#if NDTOP > 0
extern void (*dtopDivertXInput)();
extern void (*dtopMouseEvent)();
extern void (*dtopMouseButtons)();
#endif


#if 0 /*XXX*/
#if NDC > 0
#include <machine/dc7085cons.h>
extern int dcGetc(), dcparam();
extern void dcPutc();
#endif
#if NDTOP > 0
#include <pmax/dev/dtopreg.h>
extern void dtopKBDPutc();
#endif
d124 3
a126 3
#include <pmax/dev/sccreg.h>
extern int sccGetc(), sccparam();
extern void sccPutc();
a128 1
#endif /* 0 */
d550 1
a550 1
#if NDC > 0
d552 7
d561 2
a562 2
		dcMouseEvent = genMouseEvent;
		dcMouseButtons = genMouseButtons;
d564 2
a565 1
#endif
d597 1
a597 1
#if NDC > 0
d599 8
d608 3
a610 3
		dcDivertXInput = (void (*)())0;
		dcMouseEvent = (void (*)())0;
		dcMouseButtons = (void (*)())0;
d612 2
a613 1
#endif
d617 3
a619 3
		sccDivertXInput = (void (*)())0;
		sccMouseEvent = (void (*)())0;
		sccMouseButtons = (void (*)())0;
d622 1
d625 3
a627 3
		dtopDivertXInput = (void (*)())0;
		dtopMouseEvent = (void (*)())0;
		dtopMouseButtons = (void (*)())0;
@


1.2
log
@sync to netbsd; for graichen
@
text
@d1 1
a1 1
/*	$NetBSD: qvss_compat.c,v 1.4 1996/05/19 01:16:18 jonathan Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: qvss_compat.c,v 1.2 1995/09/18 03:01:24 jonathan Exp $	*/
d84 1
a84 1
#include <pmax/dev/fbreg.h>
d92 3
a94 3
#include <dc.h>
#include <scc.h>
#include <dtop.h>
d101 3
d105 7
a111 2
void fbKbdEvent(), fbMouseEvent(), fbMouseButtons(), fbScroll();
extern int pmax_boardtype;
d157 1
d200 1
a200 2
		printf("framebuffer init: size mismatch",
		       "given %dx%d, compute %dx%x\n",
d482 1
d497 1
a497 1
	len = pmax_round_page(((vm_offset_t)fbu & PGOFSET) +
d499 1
a499 1
		pmax_round_page(fi->fi_type.fb_size);
d521 1
a521 1
	fbu->scrInfo.bitmap = (char *)pmax_round_page(fbp + 1);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
