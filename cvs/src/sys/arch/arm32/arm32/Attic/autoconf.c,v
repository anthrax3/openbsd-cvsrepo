head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	NETBSD_CURRENT_960424:1.1.1.1
	netbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2001.02.07.07.45.15;	author art;	state dead;
branches;
next	1.2;

1.2
date	99.01.11.05.11.10;	author millert;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	96.04.24.11.08.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.04.24.11.08.23;	author deraadt;	state Exp;
branches;
next	;

1.2.6.1
date	2001.04.18.16.03.10;	author niklas;	state dead;
branches;
next	;


desc
@@


1.3
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/* $NetBSD: autoconf.c,v 1.2 1996/03/06 23:11:36 mark Exp $ */

/*
 * Copyright (c) 1994,1995 Mark Brinicombe.
 * Copyright (c) 1994 Brini.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Brini.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BRINI ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL BRINI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * RiscBSD kernel project
 *
 * autoconf.c
 *
 * Autoconfiguration functions
 *
 * Created      : 08/10/94
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/reboot.h>
#include <sys/disklabel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/kernel.h>
#include <sys/malloc.h>

#include <machine/irqhandler.h>
#include <machine/bootconfig.h>

#include "wdc.h"
#include "fdc.h"
#include "rd.h"
#include "sd.h"
#include "cd.h"
#include "wcd.h"

extern dev_t rootdev;
extern dev_t swapdev;
extern dev_t dumpdev;
extern dev_t argdev;

extern struct swdevt swdevt[];

extern char *boot_args;
extern int pmap_debug_level;

char *	strstr	__P((char */*s1*/, char */*s2*/));
long	strtoul __P((const char *, char **, int));

/* Table major numbers for the device names, NULL terminated */

struct {
    char *name;
    dev_t dev;
} rootdevices[] = {
#if NWDC > 0
	{ "wd", 0x10 },
#endif
#if NFDC > 0
	{ "fd", 0x11 },
#endif
#if NRD > 0
	{ "rd", 0x12 },
#endif
#if NSD > 0
	{ "sd", 0x18 },
#endif
#if NCD > 0
	{ "cd", 0x1a },
#endif
#if NWCD > 0
	{ "wcd", 0x14 },
#endif
	{ NULL, 0x00 },
};

/* Decode a device name to a major and minor number */

dev_t
get_device(name)
	char *name;
{
	int loop;
	int unit;
	int part;
    
	if (strncmp(name, "/dev/", 5) == 0)
		name += 5;

	for (loop = 0; rootdevices[loop].name; ++loop) {
		if (strncmp(name, rootdevices[loop].name,
		    strlen(rootdevices[loop].name)) == 0) {
			name += strlen(rootdevices[loop].name);
			unit = name[0] - '0';
			part = name[1] - 'a';
			if (unit < 0 || unit > 9)
				return(NODEV);
			if (part < 0 || part > MAXPARTITIONS)
				return(NODEV);
			return(makedev(rootdevices[loop].dev,
			    unit * MAXPARTITIONS + part));
		}
	} 
	return(NODEV);  
}


/* Set the rootdev variable from the root specifier in the boot args */

void
set_root_device()
{
	char *ptr;
            
	if (boot_args) {
		ptr = strstr(boot_args, "root=");
		if (ptr) {
			ptr += 5;
			rootdev = get_device(ptr);
              
			if (pmap_debug_level >= 0)
				printf("rootdev = %08x\n", rootdev);
		}
	}

	if (rootdev == NODEV)
		panic("No root device specified in boot config");
}


/* Set the swap devices from the swap specifiers in the boot ars */

void
set_swap_device()
{
	char *ptr;
	int nswap = 0;
            
	if (boot_args) {
		ptr = boot_args;
		do {
			ptr = strstr(ptr, "swap=");
			if (ptr) {
				ptr += 5;
				swdevt[nswap].sw_dev = get_device(ptr);

				/*
				 * Remember the first swap device
				 */

				if (nswap == 0)
					swapdev = get_device(ptr);
				++nswap;
			}
		} while (ptr);
	}
}


/*
 * Configure swap space and related parameters.
 */

void
swapconf()
{
	register struct swdevt *swp;
	register int nblks;
	int swapsize = -1;
	char *ptr;
	int maj;
	int s;		/* The spl stuff was here for debugging reaons */

	/*
	 * Loop round all the defined swap device configuring them.
	 */

	for (swp = swdevt; swp->sw_dev != NODEV; swp++) {
		maj = major(swp->sw_dev);
		if (maj > nblkdev)
			break;
		if (bdevsw[maj].d_psize) {
			s = spltty();
			printf("swap dev %04x ", swp->sw_dev);
			(void)splx(s);
			if (swapsize == -1)
				nblks = (*bdevsw[maj].d_psize)(swp->sw_dev);
  		  	else
				nblks = swapsize;
			s = spltty();
			if (nblks == -1)
				printf("-> device not configured for swap\n");
			else
				printf("-> %d bytes\n", nblks*DEV_BSIZE);
			(void)splx(s);
			if (nblks != -1 &&
			    (swp->sw_nblks == 0 || swp->sw_nblks > nblks))
				swp->sw_nblks = nblks;
			swp->sw_nblks = ctod(dtoc(swp->sw_nblks));
		}
	}
}


/* Set up the root and swap device numbers, configure the swap space and dump space */

void
set_boot_devs()
{
	set_root_device();
	set_swap_device();

	if (swapdev == NODEV && minor(rootdev) < (MAXPARTITIONS - 2))
		swapdev = makedev(major(rootdev), minor(rootdev) + 1);

	dumpdev = swapdev;
	argdev = swapdev;
	swdevt[0].sw_dev = swapdev;

	swapconf();
	dumpconf();
}


/*
 * void configure()
 *
 * Configure all the root devices
 * The root devices are expected to configure their own children
 */

void
configure()
{

/*
 * Loop round all the root devices configuring them. Configure failure
 * is not expected for the root devices
 */

	config_rootfound("mainbus", NULL);
	config_rootfound("podulebus", NULL);

/* Debugging information */

	printf("ipl_bio=%08x ipl_net=%08x ipl_tty=%08x ipl_clock=%08x ipl_imp=%08x\n",
	    irqmasks[IPL_BIO], irqmasks[IPL_NET], irqmasks[IPL_TTY],
	    irqmasks[IPL_CLOCK], irqmasks[IPL_IMP]);

/* Time to start taking interrupts so lets open the flood gates .... */
         
	(void)spl0();
}

/* End of autoconf.c */
@


1.2
log
@panic prints a newline for you, don't do it in the panic string
@
text
@@


1.2.6.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@@


1.1
log
@Initial revision
@
text
@d153 1
a153 1
		panic("No root device specified in boot config\n");
@


1.1.1.1
log
@Initial import of arm32 port
@
text
@@
