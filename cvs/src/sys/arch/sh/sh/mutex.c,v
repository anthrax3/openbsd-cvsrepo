head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.7.0.26
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.22
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.18
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.20
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.12
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.16
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2017.05.18.01.27.49;	author visa;	state Exp;
branches;
next	1.8;
commitid	fZ0GI2ONMbrzFP4Q;

1.8
date	2017.04.20.13.57.30;	author visa;	state Exp;
branches;
next	1.7;
commitid	RHJVP52IiQkInZzu;

1.7
date	2011.04.21.04.34.12;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.03.18.46.40;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.28.20.27.55;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.13.13.24.55;	author weingart;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.27.21.48.56;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.25.20.14.43;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.01.18.59.40;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix kernel build on armv7 and sh.

Pointed out by deraadt@@
@
text
@/*	$OpenBSD: mutex.c,v 1.8 2017/04/20 13:57:30 visa Exp $	*/

/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/param.h>
#include <sys/mutex.h>
#include <sys/systm.h>

#include <machine/intr.h>

#ifdef MULTIPROCESSOR
#error This code needs more work
#endif

/*
 * Single processor systems don't need any mutexes, but they need the spl
 * raising semantics of the mutexes.
 */
void
_mtx_init(struct mutex *mtx, int wantipl)
{
	mtx->mtx_oldipl = 0;
	mtx->mtx_wantipl = wantipl << 4;
	mtx->mtx_lock = 0;
}

void
__mtx_enter(struct mutex *mtx)
{
	if (mtx->mtx_wantipl != IPL_NONE << 4)
		mtx->mtx_oldipl = _cpu_intr_raise(mtx->mtx_wantipl);

	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;
#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level++;
#endif
}

int
__mtx_enter_try(struct mutex *mtx)
{
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _cpu_intr_raise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;
#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level++;
#endif

	return 1;
}

void
__mtx_leave(struct mutex *mtx)
{
	MUTEX_ASSERT_LOCKED(mtx);
#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level--;
#endif
	mtx->mtx_lock = 0;
	if (mtx->mtx_wantipl != IPL_NONE << 4)
		_cpu_intr_resume(mtx->mtx_oldipl);
}
@


1.8
log
@Hook up mutex(9) to witness(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.7 2011/04/21 04:34:12 miod Exp $	*/
d43 1
a43 1
__mtx_init(struct mutex *mtx, int wantipl)
@


1.7
log
@Revert the ``remove the `skip splraise/splx for IPL_NONE mutexes' optimization''
change. It seems to have unexpected side effects, especially on MP systems,
and drahn@@ disagrees with the way this change has been done and think there
is a better way to solve the original problem of msleep() fiddling with
mutex internals.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.5 2010/09/28 20:27:55 miod Exp $	*/
d43 1
a43 1
mtx_init(struct mutex *mtx, int wantipl)
d51 1
a51 1
mtx_enter(struct mutex *mtx)
d64 1
a64 1
mtx_enter_try(struct mutex *mtx)
d78 1
a78 1
mtx_leave(struct mutex *mtx)
@


1.6
log
@Remove the `skip splraise/splx for IPL_NONE mutexes' optimizations. It is not
always gaining anything, and msleep() implementation depends upon mtx_leave()
invoking splx().
@
text
@d53 2
a54 1
	mtx->mtx_oldipl = _cpu_intr_raise(mtx->mtx_wantipl);
d66 2
a67 1
	mtx->mtx_oldipl = _cpu_intr_raise(mtx->mtx_wantipl);
d85 2
a86 1
	_cpu_intr_resume(mtx->mtx_oldipl);
@


1.5
log
@Implement a per-cpu held mutex counter if DIAGNOSTIC on all non-x86 platforms,
to complete matthew@@'s commit of a few days ago, and drop __HAVE_CPU_MUTEX_LEVEL
define. With help from, and ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.4 2009/08/13 13:24:55 weingart Exp $	*/
d53 1
a53 2
	if (mtx->mtx_wantipl != IPL_NONE << 4)
		mtx->mtx_oldipl = _cpu_intr_raise(mtx->mtx_wantipl);
d65 1
a65 2
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _cpu_intr_raise(mtx->mtx_wantipl);
d83 1
a83 2
	if (mtx->mtx_wantipl != IPL_NONE << 4)
		_cpu_intr_resume(mtx->mtx_oldipl);
@


1.4
log
@A new(er) mtx_enter_try().

Ok oga@@, "the time is now" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.3 2009/04/27 21:48:56 kettenis Exp $	*/
d58 3
d70 3
d81 3
@


1.3
log
@Revert mtx_enter_try.  It didn't compile on hppa, it doesn't compile on
landisk, and the sparc implementation is obviously wrong.  That's where I
stopped looking, so who knows what else was broken.  A simple comparison of
the existing mtx_enter with the new mtx_enter_try would have told anybody.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.1 2007/05/01 18:59:40 miod Exp $	*/
d58 11
@


1.2
log
@Enter mtx_enter_try.  In part for completeness, things may start
using this soon(ish).  Ok oga@@, sorta yes kettenis@@.
@
text
@a59 11
int
mtx_enter_try(struct mutex *mtx)
{
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;

	return 1;
}

@


1.1
log
@Simple monoprocessor mutex implementation, faster than the MI code, four left
to go.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 11
@

