head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.44
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.40
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.36
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.38
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.30
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.34
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.32
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.28
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.26
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.24
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.20
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.18
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	SH_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.05.30.15.39.05;	author mpi;	state Exp;
branches;
next	1.3;
commitid	PnZZkFEIj4rPydZo;

1.3
date	2007.02.26.19.33.41;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.19.14.28.38;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Kill db_sym_t.

ok deraadt@@, kettenis@@, jasper@@
@
text
@/*	$OpenBSD: db_disasm.c,v 1.3 2007/02/26 19:33:41 miod Exp $	*/
/*	$NetBSD: db_disasm.c,v 1.13 2006/01/21 02:09:06 uwe Exp $	*/

/*
 * Copyright (c) 1998-2000 Internet Initiative Japan Inc.
 * All rights reserved.
 *
 * Author: Akinori Koketsu
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistribution with functional modification must include
 *    prominent notice stating how and when and by whom it is
 *    modified.
 * 3. Redistributions in binary form have to be along with the source
 *    code or documentation which include above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 4. All commercial advertising materials mentioning features or use
 *    of this software must display the following acknowledgement:
 *      This product includes software developed by Internet
 *      Initiative Japan Inc.
 *
 * THIS SOFTWARE IS PROVIDED BY ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/db_machdep.h>

#include <ddb/db_interface.h>
#include <ddb/db_output.h>
#include <ddb/db_sym.h>

static void	disasm_branch(char *, size_t, const char *, db_addr_t);
static void	get_ascii(unsigned char *, char *);
static void	get_opcode(db_addr_t, char *, size_t);
static void	f_02(db_addr_t, u_int, char *, size_t);
static void	f_03(db_addr_t, u_int, char *, size_t);
static void	f_04(db_addr_t, u_int, char *, size_t);
static void	f_08(db_addr_t, u_int, char *, size_t);
static void	f_09(db_addr_t, u_int, char *, size_t);
static void	f_0a(db_addr_t, u_int, char *, size_t);
static void	f_0b(db_addr_t, u_int, char *, size_t);
static void	f_0c(db_addr_t, u_int, char *, size_t);
static void	f_10(db_addr_t, u_int, char *, size_t);
static void	f_20(db_addr_t, u_int, char *, size_t);
static void	f_24(db_addr_t, u_int, char *, size_t);
static void	f_28(db_addr_t, u_int, char *, size_t);
static void	f_2c(db_addr_t, u_int, char *, size_t);
static void	f_30(db_addr_t, u_int, char *, size_t);
static void	f_34(db_addr_t, u_int, char *, size_t);
static void	f_38(db_addr_t, u_int, char *, size_t);
static void	f_3c(db_addr_t, u_int, char *, size_t);
static void	f_40(db_addr_t, u_int, char *, size_t);
static void	f_41(db_addr_t, u_int, char *, size_t);
static void	f_42(db_addr_t, u_int, char *, size_t);
static void	f_43(db_addr_t, u_int, char *, size_t);
static void	f_44(db_addr_t, u_int, char *, size_t);
static void	f_45(db_addr_t, u_int, char *, size_t);
static void	f_46(db_addr_t, u_int, char *, size_t);
static void	f_47(db_addr_t, u_int, char *, size_t);
static void	f_48(db_addr_t, u_int, char *, size_t);
static void	f_49(db_addr_t, u_int, char *, size_t);
static void	f_4a(db_addr_t, u_int, char *, size_t);
static void	f_4b(db_addr_t, u_int, char *, size_t);
static void	f_4c(db_addr_t, u_int, char *, size_t);
static void	f_4d(db_addr_t, u_int, char *, size_t);
static void	f_4e(db_addr_t, u_int, char *, size_t);
static void	f_4f(db_addr_t, u_int, char *, size_t);
static void	f_50(db_addr_t, u_int, char *, size_t);
static void	f_60(db_addr_t, u_int, char *, size_t);
static void	f_64(db_addr_t, u_int, char *, size_t);
static void	f_68(db_addr_t, u_int, char *, size_t);
static void	f_6c(db_addr_t, u_int, char *, size_t);
static void	f_70(db_addr_t, u_int, char *, size_t);
static void	f_80(db_addr_t, u_int, char *, size_t);
static void	f_90(db_addr_t, u_int, char *, size_t);
static void	f_a0(db_addr_t, u_int, char *, size_t);
static void	f_b0(db_addr_t, u_int, char *, size_t);
static void	f_c0(db_addr_t, u_int, char *, size_t);
static void	f_d0(db_addr_t, u_int, char *, size_t);
static void	f_e0(db_addr_t, u_int, char *, size_t);
static void	f_f0(db_addr_t, u_int, char *, size_t);
static void	f_f4(db_addr_t, u_int, char *, size_t);
static void	f_f8(db_addr_t, u_int, char *, size_t);
static void	f_fc(db_addr_t, u_int, char *, size_t);
static void	f_fd(db_addr_t, u_int, char *, size_t);
static void	f_fe(db_addr_t, u_int, char *, size_t);

typedef	void (*rasm_t)(db_addr_t, u_int, char *, size_t);
static const rasm_t f[16][16] = {
	{ /* [0][0-7] */	NULL, NULL, f_02, f_03, f_04, f_04, f_04, f_04,
	  /* [0][8-f] */	f_08, f_09, f_0a, f_0b, f_0c, f_0c, f_0c, f_0c },
	{ /* [1][0-7] */	f_10, f_10, f_10, f_10, f_10, f_10, f_10, f_10,
	  /* [1][8-f] */	f_10, f_10, f_10, f_10, f_10, f_10, f_10, f_10 },
	{ /* [2][0-7] */	f_20, f_20, f_20, f_20, f_24, f_24, f_24, f_24,
	  /* [2][8-f] */	f_28, f_28, f_28, f_28, f_2c, f_2c, f_2c, f_2c },
	{ /* [3][0-7] */	f_30, f_30, f_30, f_30, f_34, f_34, f_34, f_34,
	  /* [3][8-f] */	f_38, f_38, f_38, f_38, f_3c, f_3c, f_3c, f_3c },
	{ /* [4][0-7] */	f_40, f_41, f_42, f_43, f_44, f_45, f_46, f_47,
	  /* [4][8-f] */	f_48, f_49, f_4a, f_4b, f_4c, f_4d, f_4e, f_4f },
	{ /* [5][0-7] */	f_50, f_50, f_50, f_50, f_50, f_50, f_50, f_50,
	  /* [5][8-f] */	f_50, f_50, f_50, f_50, f_50, f_50, f_50, f_50 },
	{ /* [6][0-7] */	f_60, f_60, f_60, f_60, f_64, f_64, f_64, f_64,
	  /* [6][8-f] */	f_68, f_68, f_68, f_68, f_6c, f_6c, f_6c, f_6c },
	{ /* [7][0-7] */	f_70, f_70, f_70, f_70, f_70, f_70, f_70, f_70,
	  /* [7][8-f] */	f_70, f_70, f_70, f_70, f_70, f_70, f_70, f_70 },
	{ /* [8][0-7] */	f_80, f_80, f_80, f_80, f_80, f_80, f_80, f_80,
	  /* [8][8-f] */	f_80, f_80, f_80, f_80, f_80, f_80, f_80, f_80 },
	{ /* [9][0-7] */	f_90, f_90, f_90, f_90, f_90, f_90, f_90, f_90,
	  /* [9][8-f] */	f_90, f_90, f_90, f_90, f_90, f_90, f_90, f_90 },
	{ /* [a][0-7] */	f_a0, f_a0, f_a0, f_a0, f_a0, f_a0, f_a0, f_a0,
	  /* [a][8-f] */	f_a0, f_a0, f_a0, f_a0, f_a0, f_a0, f_a0, f_a0 },
	{ /* [b][0-7] */	f_b0, f_b0, f_b0, f_b0, f_b0, f_b0, f_b0, f_b0,
	  /* [b][8-f] */	f_b0, f_b0, f_b0, f_b0, f_b0, f_b0, f_b0, f_b0 },
	{ /* [c][0-7] */	f_c0, f_c0, f_c0, f_c0, f_c0, f_c0, f_c0, f_c0,
	  /* [c][8-f] */	f_c0, f_c0, f_c0, f_c0, f_c0, f_c0, f_c0, f_c0 },
	{ /* [d][0-7] */	f_d0, f_d0, f_d0, f_d0, f_d0, f_d0, f_d0, f_d0,
	  /* [d][8-f] */	f_d0, f_d0, f_d0, f_d0, f_d0, f_d0, f_d0, f_d0 },
	{ /* [e][0-7] */	f_e0, f_e0, f_e0, f_e0, f_e0, f_e0, f_e0, f_e0,
	  /* [e][8-f] */	f_e0, f_e0, f_e0, f_e0, f_e0, f_e0, f_e0, f_e0 },
	{ /* [f][0-7] */	f_f0, f_f0, f_f0, f_f0, f_f4, f_f4, f_f4, f_f4,
	  /* [f][8-f] */	f_f8, f_f8, f_f8, f_f8, f_fc, f_fd, f_fe, NULL }
};

db_addr_t
db_disasm(db_addr_t loc, boolean_t altfmt)
{
	char line[40], ascii[4];
	void *pc = (void *)loc;

	get_opcode(loc, line, sizeof line);
	if (altfmt) {
		get_ascii(pc, ascii);
		db_printf("%-32s ! %s\n", line, ascii);
	} else
		db_printf("%s\n", line);

	return (loc + 2);
}

static void
disasm_branch(char *buf, size_t bufsiz, const char *opstr, db_addr_t addr)
{
	size_t len;
	db_expr_t d, value;
	char *name;
	Elf_Sym *cursym;
	extern unsigned long db_lastsym;
	extern unsigned int db_maxoff;

	snprintf(buf, bufsiz, "%-8s", opstr);
	len = strlen(buf);
	buf += len;
	bufsiz -= len;

	if (addr <= db_lastsym) {
		cursym = db_search_symbol(addr, DB_STGY_PROC, &d);
		db_symbol_values(cursym, &name, &value);
		if (name && d < db_maxoff && value) {
			if (d == 0)
				snprintf(buf, bufsiz, "%s", name);
			else {
				snprintf(buf, bufsiz, "%s+", name);
				len = strlen(buf);
				buf += len;
				bufsiz -= len;
				db_format(buf, bufsiz, d, DB_FORMAT_R, 1, 0);
			}
			return;
		}
	}

	db_format(buf, bufsiz, addr, DB_FORMAT_N, 1, 0);
}

static void
get_ascii(unsigned char *cp, char *str)
{
	*str++ = (0x20 <= *cp && *cp < 0x7f) ? *cp : '.';
	cp++;
	*str++ = (0x20 <= *cp && *cp < 0x7f) ? *cp : '.';
	*str = '\0';
}

static void
get_opcode(db_addr_t loc, char *buf, size_t bufsiz)
{
	int n0, n3;
	u_int insn = *(u_int16_t *)loc;

	snprintf(buf, bufsiz, ".word 0x%x", insn);

	n0 = (insn & 0xf000) >> 12;
	n3 = (insn & 0x000f);

	if (f[n0][n3] != NULL)
		(*f[n0][n3])(loc, insn, buf, bufsiz);
}

static void
f_02(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, type, md;

	rn   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "stc     sr, r%d", rn);
			break;
		case 1:
			snprintf(buf, bufsiz, "stc     gbr, r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "stc     vbr, r%d", rn);
			break;
		case 3:
			snprintf(buf, bufsiz, "stc     ssr, r%d", rn);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "stc     spc, r%d", rn);
			break;
		}
		break;
	case 2:
		snprintf(buf, bufsiz, "stc     r%d_bank, r%d", md, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "stc     r%d_bank, r%d", md + 4, rn);
		break;
	} /* end of switch (type) */
}

static void
f_03(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, type, md;

	rn   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "bsrf    r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "braf    r%d", rn);
			break;
		}
		break;
	case 2:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "pref    @@r%d", rn);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_04(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "mov.b   r%d, @@(r0, r%d)", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "mov.w   r%d, @@(r0, r%d)", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mov.l   r%d, @@(r0, r%d)", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "mul.l   r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_08(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	n1, type, md;

	n1   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	if (n1 != 0)
		return;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			strlcpy(buf, "clrt", bufsiz);
			break;
		case 1:
			strlcpy(buf, "sett", bufsiz);
			break;
		case 2:
			strlcpy(buf, "clrmac", bufsiz);
			break;
		case 3:
			strlcpy(buf, "ldtlb", bufsiz);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			strlcpy(buf, "clrs", bufsiz);
			break;
		case 1:
			strlcpy(buf, "sets", bufsiz);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_09(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn = (insn & 0x0f00) >> 8;
	fx = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		if (rn != 0)
			return;
		strlcpy(buf, "nop", bufsiz);
		break;
	case 1:
		if (rn != 0)
			return;
		strlcpy(buf, "div0u", bufsiz);
		break;
	case 2:
		snprintf(buf, bufsiz, "movt    r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_0a(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, type, md;

	rn   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "sts     mach, r%d", rn);
			break;
		case 1:
			snprintf(buf, bufsiz, "sts     macl, r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "sts     pr, r%d", rn);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 1:
			snprintf(buf, bufsiz, "sts     fpul, r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "sts     fpscr, r%d", rn);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_0b(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	n1, fx;

	n1 = (insn & 0x0f00) >> 8;
	if (n1 != 0)
		return;

	fx = (insn & 0x00f0) >> 4;
	switch (fx) {
	case 0:
		strlcpy(buf, "rts", bufsiz);
		break;
	case 1:
		strlcpy(buf, "sleep", bufsiz);
		break;
	case 2:
		strlcpy(buf, "rte", bufsiz);
		break;
	} /* end of switch (fx) */
}

static void
f_0c(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "mov.b   @@(r0, r%d), r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "mov.w   @@(r0, r%d), r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mov.l   @@(r0, r%d), r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "mac.l   @@r%d+, r%d+", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_10(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, disp;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	disp = (insn & 0x000f);
	disp *= 4;

	snprintf(buf, bufsiz, "mov.l   r%d, @@(%d, r%d)", rm, disp, rn);
}

static void
f_20(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "mov.b   r%d, @@r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "mov.w   r%d, @@r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mov.l   r%d, @@r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_24(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "mov.b   r%d, @@-r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "mov.w   r%d, @@-r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mov.l   r%d, @@-r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "div0s   r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_28(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "tst     r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "and     r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "xor     r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "or      r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_2c(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "cmp/str r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "xtrct   r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mulu.w  r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "muls.w  r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_30(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "cmp/eq  r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "cmp/hs  r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "cmp/ge  r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_34(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "div1    r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "dmulu.l r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "cmp/hi  r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "cmp/gt  r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_38(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "sub     r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "subc    r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "subv    r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_3c(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "add     r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "dmulu.l r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "addc    r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "addv    r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_40(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "shll    r%d", rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "dt      r%d", rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "shal    r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_41(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "shlr    r%d", rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "cmp/pz  r%d", rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "shar    r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_42(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, type, md;

	rn   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "sts.l   mach, @@-r%d", rn);
			break;
		case 1:
			snprintf(buf, bufsiz, "sts.l   macl, @@-r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "sts.l   pr, @@-r%d", rn);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 1:
			snprintf(buf, bufsiz, "sts.l   fpul, @@-r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "sts.l   fpscr, @@-r%d", rn);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_43(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, type, md;

	rn   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "stc.l   sr, @@-r%d", rn);
			break;
		case 1:
			snprintf(buf, bufsiz, "stc.l   gbr, @@-r%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "stc.l   vbr, @@-r%d", rn);
			break;
		case 3:
			snprintf(buf, bufsiz, "stc.l   ssr, @@-r%d", rn);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "stc.l   spc, @@-r%d", rn);
			break;
		}
		break;
	case 2:
		snprintf(buf, bufsiz, "stc.l   r%d_bank, @@-r%d", md, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "stc.l   r%d_bank, @@-r%d", md + 4, rn);
		break;
	} /* end of switch (type) */
}

static void
f_44(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "rotl    r%d", rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "rotcl   r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_45(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "rotr    r%d", rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "cmp/pl  r%d", rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "rotcr   r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_46(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rm, type, md;

	rm   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "lds.l   @@r%d+, mach", rm);
			break;
		case 1:
			snprintf(buf, bufsiz, "lds.l   @@r%d+, macl", rm);
			break;
		case 2:
			snprintf(buf, bufsiz, "lds.l   @@r%d+, pr", rm);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 1:
			snprintf(buf, bufsiz, "lds.l   @@r%d+, fpul", rm);
			break;
		case 2:
			snprintf(buf, bufsiz, "lds.l   @@r%d+, fpscr", rm);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_47(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rm, type, md;

	rm   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "ldc.l   @@r%d+, sr", rm);
			break;
		case 1:
			snprintf(buf, bufsiz, "ldc.l   @@r%d+, gbr", rm);
			break;
		case 2:
			snprintf(buf, bufsiz, "ldc.l   @@r%d+, vbr", rm);
			break;
		case 3:
			snprintf(buf, bufsiz, "ldc.l   @@r%d+, ssr", rm);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "ldc.l   @@r%d+, spc", rm);
			break;
		}
		break;
	case 2:
		snprintf(buf, bufsiz, "ldc.l   @@r%d+, r%d_bank", rm, md);
		break;
	case 3:
		snprintf(buf, bufsiz, "ldc.l   @@r%d+, r%d_bank", rm, md + 4);
		break;
	} /* end of switch (type) */
}

static void
f_48(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "shll2   r%d", rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "shll8   r%d", rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "shll16  r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_49(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, fx;

	rn   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "shlr2   r%d", rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "shlr8   r%d", rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "shlr16  r%d", rn);
		break;
	} /* end of switch (fx) */
}

static void
f_4a(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rm, type, md;

	rm   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "lds     r%d, mach", rm);
			break;
		case 1:
			snprintf(buf, bufsiz, "lds     r%d, macl", rm);
			break;
		case 2:
			snprintf(buf, bufsiz, "lds     r%d, pr", rm);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 1:
			snprintf(buf, bufsiz, "lds     r%d, fpul", rm);
			break;
		case 2:
			snprintf(buf, bufsiz, "lds     r%d, fpscr", rm);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_4b(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rm, fx;

	rm   = (insn & 0x0f00) >> 8;
	fx   = (insn & 0x00f0) >> 4;

	switch (fx) {
	case 0:
		snprintf(buf, bufsiz, "jsr     @@r%d", rm);
		break;
	case 1:
		snprintf(buf, bufsiz, "tas.b   @@r%d", rm);
		break;
	case 2:
		snprintf(buf, bufsiz, "jmp     @@r%d", rm);
		break;
	} /* end of switch (fx) */
}

static void
f_4c(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	snprintf(buf, bufsiz, "shad    r%d, r%d", rm, rn);
}

static void
f_4d(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	snprintf(buf, bufsiz, "shld    r%d, r%d", rm, rn);
}

static void
f_4e(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rm, type, md;

	rm   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "ldc     r%d, sr", rm);
			break;
		case 1:
			snprintf(buf, bufsiz, "ldc     r%d, gbr", rm);
			break;
		case 2:
			snprintf(buf, bufsiz, "ldc     r%d, vbr", rm);
			break;
		case 3:
			snprintf(buf, bufsiz, "ldc     r%d, ssr", rm);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "ldc     r%d, spc", rm);
			break;
		}
		break;
	case 2:
		snprintf(buf, bufsiz, "ldc     r%d, r%d_bank", rm, md);
		break;
	case 3:
		snprintf(buf, bufsiz, "ldc     r%d, r%d_bank", rm, md + 4);
		break;
	} /* end of switch (type) */
}

static void
f_4f(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	snprintf(buf, bufsiz, "mac.w   @@r%d+, @@r%d+", rm, rn);
}

static void
f_50(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, disp;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	disp = (insn & 0x000f);
	disp *= 4;

	snprintf(buf, bufsiz, "mov.l   @@(%d, r%d), r%d", disp, rm, rn);
}

static void
f_60(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "mov.b   @@r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "mov.w   @@r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mov.l   @@r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "mov     r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_64(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "mov.b   @@r%d+, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "mov.w   @@r%d+, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "mov.l   @@r%d+, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "not     r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_68(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "swap.b  r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "swap.w  r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "negc    r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "neg     r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_6c(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "extu.b  r%d, r%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "extu.w  r%d, r%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "exts.b  r%d, r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "exts.w  r%d, r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_70(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, imm;

	rn   = (insn & 0x0f00) >> 8;
	imm  = (int) ((char) (insn & 0x00ff));

	snprintf(buf, bufsiz, "add     #0x%x, r%d", imm, rn);
}

static void
f_80(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	type, md, rn, disp;

	type = (insn & 0x0c00) >> 10;
	md   = (insn & 0x0300) >> 8;

	switch (type) {
	case 0:
		rn   = (insn & 0x00f0) >> 4;
		disp = (insn & 0x000f);

		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "mov.b   r0, @@(%d, r%d)",
			    disp, rn);
			break;
		case 1:
			disp *= 2;
			snprintf(buf, bufsiz, "mov.w   r0, @@(%d, r%d)",
			    disp, rn);
			break;
		}
		break;
	case 1:
		rn   = (insn & 0x00f0) >> 4;
		disp = (insn & 0x000f);

		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "mov.b   @@(%d, r%d), r0",
			    disp, rn);
			break;
		case 1:
			disp *= 2;
			snprintf(buf, bufsiz, "mov.w   @@(%d, r%d), r0",
			    disp, rn);
			break;
		}
		break;
	case 2:
		disp = (insn & 0x00ff);

		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "cmp/eq  #%d, r0", disp);
			break;
		case 1:
			disp = (int) ((char) disp);
			disp *= 2;
			disasm_branch(buf, bufsiz, "bt", loc + 4 + disp);
			break;
		case 3:
			disp = (int) ((char) disp);
			disp *= 2;
			disasm_branch(buf, bufsiz, "bf", loc + 4 + disp);
			break;
		}
		break;
	case 3:
		disp = (int) ((char) (insn & 0x00ff));
		disp *= 2;

		switch (md) {
		case 1:
			disasm_branch(buf, bufsiz, "bt/s", loc + 4 + disp);
			break;
		case 3:
			disasm_branch(buf, bufsiz, "bf/s", loc + 4 + disp);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_90(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, disp;

	rn   = (insn & 0x0f00) >> 8;
	disp = (insn & 0x00ff);
	disp *= 2;

	snprintf(buf, bufsiz, "mov.w   @@(%d, pc), r%d", disp, rn);
}

static void
f_a0(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	disp;

	disp = (insn & 0x0fff);
	if (disp & 0x0800)	/* negative displacement? */
		disp |= 0xfffff000; /* sign extend */
	disp *= 2;

	disasm_branch(buf, bufsiz, "bra", loc + 4 + disp);
}

static void
f_b0(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	disp;

	disp = (insn & 0x0fff);
	if (disp & 0x0800)	/* negative displacement? */
		disp |= 0xfffff000; /* sign extend */
	disp *= 2;

	disasm_branch(buf, bufsiz, "bsr", loc + 4 + disp);
}

static void
f_c0(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	type, md, imm;

	type = (insn & 0x0c00) >> 10;
	md   = (insn & 0x0300) >> 8;
	imm  = (insn & 0x00ff);

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "mov.b   r0, @@(%d, gbr)", imm);
			break;
		case 1:
			imm *= 2;
			snprintf(buf, bufsiz, "mov.w   r0, @@(%d, gbr)", imm);
			break;
		case 2:
			imm *= 4;
			snprintf(buf, bufsiz, "mov.l   r0, @@(%d, gbr)", imm);
			break;
		case 3:
			snprintf(buf, bufsiz, "trapa   #%d", imm);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "mov.b   @@(%d, gbr), r0", imm);
			break;
		case 1:
			imm *= 2;
			snprintf(buf, bufsiz, "mov.w   @@(%d, gbr), r0", imm);
			break;
		case 2:
			imm *= 4;
			snprintf(buf, bufsiz, "mov.l   @@(%d, gbr), r0", imm);
			break;
		case 3:
			imm *= 4;
			snprintf(buf, bufsiz, "mova    @@(%d, pc), r0", imm);
			break;
		}
		break;
	case 2:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "tst     #%d, r0", imm);
			break;
		case 1:
			snprintf(buf, bufsiz, "and     #%d, r0", imm);
			break;
		case 2:
			snprintf(buf, bufsiz, "xor     #%d, r0", imm);
			break;
		case 3:
			snprintf(buf, bufsiz, "or      #%d, r0", imm);
			break;
		}
		break;
	case 3:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "tst.b   #%d, @@(r0, gbr)", imm);
			break;
		case 1:
			snprintf(buf, bufsiz, "and.b   #%d, @@(r0, gbr)", imm);
			break;
		case 2:
			snprintf(buf, bufsiz, "xor.b   #%d, @@(r0, gbr)", imm);
			break;
		case 3:
			snprintf(buf, bufsiz, "or.b    #%d, @@(r0, gbr)", imm);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_d0(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, disp;

	rn   = (insn & 0x0f00) >> 8;
	disp = (insn & 0x00ff);
	disp *= 4;

	snprintf(buf, bufsiz, "mov.l   @@(%d, pc), r%d", disp, rn);
}

static void
f_e0(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, imm;

	rn   = (insn & 0x0f00) >> 8;
	imm  = (int) ((char) (insn & 0x00ff));

	snprintf(buf, bufsiz, "mov     #0x%x, r%d", imm, rn);
}

static void
f_f0(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "fadd    fr%d, fr%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "fsub    fr%d, fr%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "fmul    fr%d, fr%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "fdiv    fr%d, fr%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_f4(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "fcmp/eq fr%d, fr%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "fcmp/gt fr%d, fr%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "fmov.s  @@(r0, r%d), fr%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "fmov.s  fr%d, @@(r0, r%d)", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_f8(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm, md;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;
	md   = (insn & 0x0003);

	switch (md) {
	case 0:
		snprintf(buf, bufsiz, "fmov.s  @@r%d, fr%d", rm, rn);
		break;
	case 1:
		snprintf(buf, bufsiz, "fmov.s  @@r%d+, fr%d", rm, rn);
		break;
	case 2:
		snprintf(buf, bufsiz, "fmov.s  fr%d, @@r%d", rm, rn);
		break;
	case 3:
		snprintf(buf, bufsiz, "fmov.s  fr%d, @@-r%d", rm, rn);
		break;
	} /* end of switch (md) */
}

static void
f_fc(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;

	snprintf(buf, bufsiz, "fmov    fr%d, fr%d", rm, rn);
}

static void
f_fd(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, type, md;

	rn   = (insn & 0x0f00) >> 8;
	type = (insn & 0x00c0) >> 6;
	md   = (insn & 0x0030) >> 4;

	switch (type) {
	case 0:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "fsts    fpul, fr%d", rn);
			break;
		case 1:
			snprintf(buf, bufsiz, "flds    fr%d, fpul", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "float   fpul, fr%d", rn);
			break;
		case 3:
			snprintf(buf, bufsiz, "ftrc    fr%d, fpul", rn);
			break;
		}
		break;
	case 1:
		switch (md) {
		case 0:
			snprintf(buf, bufsiz, "fneg    fr%d", rn);
			break;
		case 1:
			snprintf(buf, bufsiz, "fabs    fr%d", rn);
			break;
		case 2:
			snprintf(buf, bufsiz, "fsqrt   fr%d", rn);
			break;
		}
		break;
	case 2:
		switch (md) {
		case 0:
		case 1:
			snprintf(buf, bufsiz, "fldi%d   fr%d", md, rn);
			break;
		}
		break;
	} /* end of switch (type) */
}

static void
f_fe(db_addr_t loc, u_int insn, char *buf, size_t bufsiz)
{
	int	rn, rm;

	rn   = (insn & 0x0f00) >> 8;
	rm   = (insn & 0x00f0) >> 4;

	snprintf(buf, bufsiz, "fmac    fr0, fr%d, fr%d", rm, rn);
}
@


1.3
log
@Fix spurious right brace in some decoders, and always print the hex value for
unrecognized opcodes.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_disasm.c,v 1.2 2006/11/19 14:28:38 miod Exp $	*/
d155 1
a155 1
	db_sym_t cursym;
@


1.2
log
@Use symbol information, when available, to display branch destinations.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_disasm.c,v 1.1.1.1 2006/10/06 21:02:55 miod Exp $	*/
d199 1
a199 1
	strlcpy(buf, "unknown opcode", bufsiz);
a205 2
	else
		snprintf(buf, bufsiz, ".word 0x%x", insn);
d245 1
a245 1
		snprintf(buf, bufsiz, "stc     r%d_bank, r%d", md+4, rn);
d300 1
a300 1
		snprintf(buf, bufsiz, "mul.l   r%d, r%d)", rm, rn);
d511 1
a511 1
		snprintf(buf, bufsiz, "div0s   r%d, r%d)", rm, rn);
d775 1
a775 1
		snprintf(buf, bufsiz, "stc.l   r%d_bank, @@-r%d", md+4, rn);
d892 1
a892 1
		snprintf(buf, bufsiz, "ldc.l   @@r%d+, r%d_bank", rm, md+4);
d1053 1
a1053 1
		snprintf(buf, bufsiz, "ldc     r%d, r%d_bank", rm, md+4);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
d41 1
a41 1
static void	get_opcode(uint16_t *, char *, size_t);
d43 53
a95 52
static void	f_02(uint16_t *, char *, size_t);
static void	f_03(uint16_t *, char *, size_t);
static void	f_04(uint16_t *, char *, size_t);
static void	f_08(uint16_t *, char *, size_t);
static void	f_09(uint16_t *, char *, size_t);
static void	f_0a(uint16_t *, char *, size_t);
static void	f_0b(uint16_t *, char *, size_t);
static void	f_0c(uint16_t *, char *, size_t);
static void	f_10(uint16_t *, char *, size_t);
static void	f_20(uint16_t *, char *, size_t);
static void	f_24(uint16_t *, char *, size_t);
static void	f_28(uint16_t *, char *, size_t);
static void	f_2c(uint16_t *, char *, size_t);
static void	f_30(uint16_t *, char *, size_t);
static void	f_34(uint16_t *, char *, size_t);
static void	f_38(uint16_t *, char *, size_t);
static void	f_3c(uint16_t *, char *, size_t);
static void	f_40(uint16_t *, char *, size_t);
static void	f_41(uint16_t *, char *, size_t);
static void	f_42(uint16_t *, char *, size_t);
static void	f_43(uint16_t *, char *, size_t);
static void	f_44(uint16_t *, char *, size_t);
static void	f_45(uint16_t *, char *, size_t);
static void	f_46(uint16_t *, char *, size_t);
static void	f_47(uint16_t *, char *, size_t);
static void	f_48(uint16_t *, char *, size_t);
static void	f_49(uint16_t *, char *, size_t);
static void	f_4a(uint16_t *, char *, size_t);
static void	f_4b(uint16_t *, char *, size_t);
static void	f_4c(uint16_t *, char *, size_t);
static void	f_4d(uint16_t *, char *, size_t);
static void	f_4e(uint16_t *, char *, size_t);
static void	f_4f(uint16_t *, char *, size_t);
static void	f_50(uint16_t *, char *, size_t);
static void	f_60(uint16_t *, char *, size_t);
static void	f_64(uint16_t *, char *, size_t);
static void	f_68(uint16_t *, char *, size_t);
static void	f_6c(uint16_t *, char *, size_t);
static void	f_70(uint16_t *, char *, size_t);
static void	f_80(uint16_t *, char *, size_t);
static void	f_90(uint16_t *, char *, size_t);
static void	f_a0(uint16_t *, char *, size_t);
static void	f_b0(uint16_t *, char *, size_t);
static void	f_c0(uint16_t *, char *, size_t);
static void	f_d0(uint16_t *, char *, size_t);
static void	f_e0(uint16_t *, char *, size_t);
static void	f_f0(uint16_t *, char *, size_t);
static void	f_f4(uint16_t *, char *, size_t);
static void	f_f8(uint16_t *, char *, size_t);
static void	f_fc(uint16_t *, char *, size_t);
static void	f_fd(uint16_t *, char *, size_t);
static void	f_fe(uint16_t *, char *, size_t);
d97 2
a98 2
typedef	void (*rasm_t)(uint16_t *, char *, size_t);
static	rasm_t	f[16][16] = {
d139 1
a139 1
	get_opcode(pc, line, sizeof line);
d150 35
a186 1

d194 1
a194 1
get_opcode(uint16_t *sp, char *buf, size_t bufsiz)
d196 2
a197 1
	int	n0, n3;
d201 2
a202 2
	n0 = (*sp & 0xf000) >> 12;
	n3 = (*sp & 0x000f);
d204 4
a207 3
	if (f[n0][n3] != NULL) {
		(*f[n0][n3])(sp, buf, bufsiz);
	}
d211 1
a211 1
f_02(uint16_t *code, char *buf, size_t bufsiz)
d215 3
a217 3
	rn   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a224 1

a227 1

a230 1

a233 1

a235 1

a242 1

a245 1

d253 1
a253 1
f_03(uint16_t *code, char *buf, size_t bufsiz)
d257 3
a259 3
	rn   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a266 1

a271 1

a281 1

d283 1
a283 1
f_04(uint16_t *code, char *buf, size_t bufsiz)
d287 3
a289 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a294 1

a297 1

a300 1

d308 1
a308 1
f_08(uint16_t *code, char *buf, size_t bufsiz)
d312 3
a314 3
	n1   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a324 1

a327 1

a330 1

a335 1

a340 1

d350 1
a350 1
f_09(uint16_t *code, char *buf, size_t bufsiz)
d354 2
a355 2
	rn = (*code & 0x0f00) >> 8;
	fx = (*code & 0x00f0) >> 4;
a362 1

a367 1

d375 1
a375 1
f_0a(uint16_t *code, char *buf, size_t bufsiz)
d379 3
a381 3
	rn   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a388 1

a391 1

a396 1

a401 1

d411 1
a411 1
f_0b(uint16_t *code, char *buf, size_t bufsiz)
d415 1
a415 1
	n1 = (*code & 0x0f00) >> 8;
d419 1
a419 1
	fx = (*code & 0x00f0) >> 4;
a423 1

a426 1

d434 1
a434 1
f_0c(uint16_t *code, char *buf, size_t bufsiz)
d438 3
a440 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a445 1

a448 1

a451 1

d459 1
a459 1
f_10(uint16_t *code, char *buf, size_t bufsiz)
d463 3
a465 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	disp = (*code & 0x000f);
d472 1
a472 1
f_20(uint16_t *code, char *buf, size_t bufsiz)
d476 3
a478 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a483 1

a486 1

a492 1

d494 1
a494 1
f_24(uint16_t *code, char *buf, size_t bufsiz)
d498 3
a500 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a505 1

a508 1

a511 1

d519 1
a519 1
f_28(uint16_t *code, char *buf, size_t bufsiz)
d523 3
a525 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a530 1

a533 1

a536 1

a542 1

d544 1
a544 1
f_2c(uint16_t *code, char *buf, size_t bufsiz)
d548 3
a550 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a555 1

a558 1

a561 1

d569 1
a569 1
f_30(uint16_t *code, char *buf, size_t bufsiz)
d573 3
a575 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a580 1

a583 1

a589 1

d591 1
a591 1
f_34(uint16_t *code, char *buf, size_t bufsiz)
d595 3
a597 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a602 1

a605 1

a608 1

d616 1
a616 1
f_38(uint16_t *code, char *buf, size_t bufsiz)
d620 3
a622 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a627 1

a630 1

a636 1

d638 1
a638 1
f_3c(uint16_t *code, char *buf, size_t bufsiz)
d642 3
a644 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a649 1

a652 1

a655 1

a661 1

d663 1
a663 1
f_40(uint16_t *code, char *buf, size_t bufsiz)
d667 2
a668 2
	rn   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a673 1

a676 1

d684 1
a684 1
f_41(uint16_t *code, char *buf, size_t bufsiz)
d688 2
a689 2
	rn   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a694 1

a697 1

a703 1

d705 1
a705 1
f_42(uint16_t *code, char *buf, size_t bufsiz)
d709 3
a711 3
	rn   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a718 1

a721 1

a726 1

a731 1

d741 1
a741 1
f_43(uint16_t *code, char *buf, size_t bufsiz)
d745 3
a747 3
	rn   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a754 1

a757 1

a760 1

a765 1

a772 1

a775 1

d783 1
a783 1
f_44(uint16_t *code, char *buf, size_t bufsiz)
d787 2
a788 2
	rn   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a793 1

d801 1
a801 1
f_45(uint16_t *code, char *buf, size_t bufsiz)
d805 2
a806 2
	rn   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a811 1

a814 1

d822 1
a822 1
f_46(uint16_t *code, char *buf, size_t bufsiz)
d826 3
a828 3
	rm   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a835 1

a838 1

a843 1

a848 1

d858 1
a858 1
f_47(uint16_t *code, char *buf, size_t bufsiz)
d862 3
a864 3
	rm   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a871 1

a874 1

a877 1

a882 1

a889 1

a892 1

d900 1
a900 1
f_48(uint16_t *code, char *buf, size_t bufsiz)
d904 2
a905 2
	rn   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a910 1

a913 1

d921 1
a921 1
f_49(uint16_t *code, char *buf, size_t bufsiz)
d925 2
a926 2
	rn   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a931 1

a934 1

d942 1
a942 1
f_4a(uint16_t *code, char *buf, size_t bufsiz)
d946 3
a948 3
	rm   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a955 1

a958 1

a963 1

a968 1

d978 1
a978 1
f_4b(uint16_t *code, char *buf, size_t bufsiz)
d982 2
a983 2
	rm   = (*code & 0x0f00) >> 8;
	fx   = (*code & 0x00f0) >> 4;
a988 1

a991 1

d999 1
a999 1
f_4c(uint16_t *code, char *buf, size_t bufsiz)
d1003 2
a1004 2
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
d1009 1
a1009 1
f_4d(uint16_t *code, char *buf, size_t bufsiz)
d1013 2
a1014 2
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
d1019 1
a1019 1
f_4e(uint16_t *code, char *buf, size_t bufsiz)
d1023 3
a1025 3
	rm   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a1032 1

a1035 1

a1038 1

a1043 1

a1050 1

a1053 1

d1061 1
a1061 1
f_4f(uint16_t *code, char *buf, size_t bufsiz)
d1065 2
a1066 2
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
d1071 1
a1071 1
f_50(uint16_t *code, char *buf, size_t bufsiz)
d1075 3
a1077 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	disp = (*code & 0x000f);
d1084 1
a1084 1
f_60(uint16_t *code, char *buf, size_t bufsiz)
d1088 3
a1090 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1095 1

a1098 1

a1101 1

d1109 1
a1109 1
f_64(uint16_t *code, char *buf, size_t bufsiz)
d1113 3
a1115 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1120 1

a1123 1

a1126 1

d1134 1
a1134 1
f_68(uint16_t *code, char *buf, size_t bufsiz)
d1138 3
a1140 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1145 1

a1148 1

a1151 1

d1159 1
a1159 1
f_6c(uint16_t *code, char *buf, size_t bufsiz)
d1163 3
a1165 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1170 1

a1173 1

a1176 1

d1184 1
a1184 1
f_70(uint16_t *code, char *buf, size_t bufsiz)
d1188 2
a1189 2
	rn   = (*code & 0x0f00) >> 8;
	imm  = (int) ((char) (*code & 0x00ff));
d1195 1
a1195 1
f_80(uint16_t *code, char *buf, size_t bufsiz)
d1199 2
a1200 2
	type = (*code & 0x0c00) >> 10;
	md   = (*code & 0x0300) >> 8;
d1204 2
a1205 2
		rn   = (*code & 0x00f0) >> 4;
		disp = (*code & 0x000f);
a1211 1

a1218 1

d1220 2
a1221 2
		rn   = (*code & 0x00f0) >> 4;
		disp = (*code & 0x000f);
a1227 1

a1234 1

d1236 1
a1236 1
		disp = (*code & 0x00ff);
a1241 1

d1245 1
a1245 1
			snprintf(buf, bufsiz, "bt      0x%x", disp);
a1246 1

d1250 1
a1250 1
			snprintf(buf, bufsiz, "bf      0x%x", disp);
a1253 1

d1255 1
a1255 1
		disp = (int) ((char) (*code & 0x00ff));
d1260 1
a1260 1
			snprintf(buf, bufsiz, "bt/s    0x%x", disp);
a1261 1

d1263 1
a1263 1
			snprintf(buf, bufsiz, "bf/s    0x%x", disp);
d1271 1
a1271 1
f_90(uint16_t *code, char *buf, size_t bufsiz)
d1275 2
a1276 2
	rn   = (*code & 0x0f00) >> 8;
	disp = (*code & 0x00ff);
d1283 1
a1283 1
f_a0(uint16_t *code, char *buf, size_t bufsiz)
d1287 1
a1287 1
	disp = (*code & 0x0fff);
d1292 1
a1292 1
	snprintf(buf, bufsiz, "bra     %d(0x%x)", disp, disp);
d1296 1
a1296 1
f_b0(uint16_t *code, char *buf, size_t bufsiz)
d1300 1
a1300 1
	disp = (*code & 0x0fff);
d1305 1
a1305 1
	snprintf(buf, bufsiz, "bsr     %d(0x%x)", disp, disp);
d1309 1
a1309 1
f_c0(uint16_t *code, char *buf, size_t bufsiz)
d1313 3
a1315 3
	type = (*code & 0x0c00) >> 10;
	md   = (*code & 0x0300) >> 8;
	imm  = (*code & 0x00ff);
a1322 1

a1326 1

a1330 1

a1335 1

a1340 1

a1344 1

a1348 1

a1354 1

a1359 1

a1362 1

a1365 1

a1370 1

a1375 1

a1378 1

a1381 1

a1389 1

d1391 1
a1391 1
f_d0(uint16_t *code, char *buf, size_t bufsiz)
d1395 2
a1396 2
	rn   = (*code & 0x0f00) >> 8;
	disp = (*code & 0x00ff);
d1403 1
a1403 1
f_e0(uint16_t *code, char *buf, size_t bufsiz)
d1407 2
a1408 2
	rn   = (*code & 0x0f00) >> 8;
	imm  = (int) ((char) (*code & 0x00ff));
d1414 1
a1414 1
f_f0(uint16_t *code, char *buf, size_t bufsiz)
d1418 3
a1420 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1425 1

a1428 1

a1431 1

d1439 1
a1439 1
f_f4(uint16_t *code, char *buf, size_t bufsiz)
d1443 3
a1445 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1450 1

a1453 1

a1456 1

d1464 1
a1464 1
f_f8(uint16_t *code, char *buf, size_t bufsiz)
d1468 3
a1470 3
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
	md   = (*code & 0x0003);
a1475 1

a1478 1

a1481 1

d1489 1
a1489 1
f_fc(uint16_t *code, char *buf, size_t bufsiz)
d1493 2
a1494 2
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
d1500 1
a1500 1
f_fd(uint16_t *code, char *buf, size_t bufsiz)
d1504 3
a1506 3
	rn   = (*code & 0x0f00) >> 8;
	type = (*code & 0x00c0) >> 6;
	md   = (*code & 0x0030) >> 4;
a1513 1

a1516 1

a1519 1

a1524 1

a1529 1

a1532 1

a1537 1

d1550 1
a1550 1
f_fe(uint16_t *code, char *buf, size_t bufsiz)
d1554 2
a1555 2
	rn   = (*code & 0x0f00) >> 8;
	rm   = (*code & 0x00f0) >> 4;
@


1.1.1.1
log
@Preliminary bits for SuperH-based ports, based on NetBSD/sh3 codebase with
minor changes.
@
text
@@
