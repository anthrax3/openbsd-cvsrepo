head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.4.0.18
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.12
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	SH_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.09.25.15.23.37;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	YxqfPf79WCjoxCH9;

1.8
date	2016.08.16.18.21.54;	author tedu;	state Exp;
branches;
next	1.7;
commitid	HXBbnmTBbLEpa4lm;

1.7
date	2016.08.15.22.01.59;	author tedu;	state Exp;
branches;
next	1.6;
commitid	hzJmUc5FH2irhNvz;

1.6
date	2015.02.10.22.44.35;	author miod;	state Exp;
branches;
next	1.5;
commitid	lsrmQ0A4gY4UmdnD;

1.5
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.4;
commitid	C5iGb36LQxjM60Q3;

1.4
date	2010.12.26.15.41.00;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.06.23.50.54;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.05.19.55.43;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Make a move towards ending 4 decades of kernel snooping.

Add sysctl kern.allowkmem (default 0) which controls the ability to open
/dev/mem or /dev/kmem at securelevel > 0.  Over 15 years we converted 99%
of utilities in the tree to operate on sysctl-nodes (either by themselves
or via code hiding in the guts of -lkvm).

pstat -d and -v & procmap are affected and continued use of them will
require kern.allowkmem=1 in /etc/sysctl.conf.  acpidump (and it's
buddy sendbug) are affected, but we'll work out a solution soon.

There will be some impact in ports.

ok kettenis guenther
@
text
@/*	$OpenBSD: mem.c,v 1.8 2016/08/16 18:21:54 tedu Exp $	*/
/*	$NetBSD: mem.c,v 1.21 2006/07/23 22:06:07 ad Exp $	*/

/*
 * Copyright (c) 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Copyright (c) 1988 University of Utah.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.c	8.3 (Berkeley) 1/12/94
 */

/*
 * Memory special file
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/conf.h>

#include <uvm/uvm_extern.h>

caddr_t zeropage;
boolean_t __mm_mem_addr(paddr_t);

#define mmread	mmrw
#define mmwrite	mmrw
cdev_decl(mm);


int
mmopen(dev_t dev, int flag, int mode, struct proc *p)
{
	extern int allowkmem;

	switch (minor(dev)) {
	case 0:
	case 1:
		if (securelevel <= 0 || allowkmem)
			break;
		return (EPERM);
	case 2:
	case 12:
		break;
	default:
		return (ENXIO);
	}
	return (0);
}

int
mmclose(dev_t dev, int flag, int mode, struct proc *p)
{
	return (0);
}

int
mmrw(dev_t dev, struct uio *uio, int flags)
{
	struct iovec *iov;
	vaddr_t v, o;
	size_t c;
	int error = 0;

	while (uio->uio_resid > 0 && !error) {
		iov = uio->uio_iov;
		if (iov->iov_len == 0) {
			uio->uio_iov++;
			uio->uio_iovcnt--;
			if (uio->uio_iovcnt < 0)
				panic("mmrw");
			continue;
		}

		v = uio->uio_offset;

		switch (minor(dev)) {
		case 0:
			/* Physical address */
			if (__mm_mem_addr(v)) {
				o = v & PGOFSET;
				c = ulmin(uio->uio_resid, PAGE_SIZE - o);
				error = uiomove((caddr_t)SH3_PHYS_TO_P1SEG(v),
				    c, uio);
			} else {
				return (EFAULT);
			}
			break;

		case 1:
			if (v < SH3_P1SEG_BASE)			/* P0 */
				return (EFAULT);
			if (v < SH3_P2SEG_BASE) {		/* P1 */
				/* permitted */
			/*
				if (__mm_mem_addr(SH3_P1SEG_TO_PHYS(v))
				    == FALSE)
					return (EFAULT);
			*/
				c = ulmin(iov->iov_len, MAXPHYS);
				error = uiomove((caddr_t)v, c, uio);
			} else if (v < SH3_P3SEG_BASE)		/* P2 */
				return (EFAULT);
			else {					/* P3 */
				c = ulmin(iov->iov_len, MAXPHYS);
				if (!uvm_kernacc((void *)v, c,
				    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
					return (EFAULT);
				error = uiomove((caddr_t)v, c, uio);
			}
			break;

		case 2:
			if (uio->uio_rw == UIO_WRITE)
				uio->uio_resid = 0;
			return (0);

		case 12:
			if (uio->uio_rw == UIO_WRITE) {
				uio->uio_resid = 0;
				return (0);
			}
			if (zeropage == NULL)
				zeropage = malloc(PAGE_SIZE, M_TEMP,
				    M_WAITOK | M_ZERO);
			c = ulmin(iov->iov_len, PAGE_SIZE);
			error = uiomove(zeropage, c, uio);
			break;

		default:
			return (ENXIO);
		}
	}

	return (error);
}

paddr_t
mmmmap(dev_t dev, off_t off, int prot)
{
	struct proc *p = curproc;

	if (minor(dev) != 0)
		return (-1);

	if (__mm_mem_addr((paddr_t)off) == FALSE && suser(p, 0) != 0)
		return (-1);
	return ((paddr_t)off);
}

int
mmioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	return (EOPNOTSUPP);
}

/*
 * boolean_t __mm_mem_addr(paddr_t pa):
 *	Check specified physical address is in physical memory, with the
 *	kernel image off-limits.
 */
boolean_t
__mm_mem_addr(paddr_t pa)
{
#if 0
	extern vaddr_t kernend; /* from machdep.c */
#endif
	struct vm_physseg *seg;
	unsigned int segno;

	for (segno = 0, seg = vm_physmem; segno < vm_nphysseg; segno++, seg++) {
		if (pa < seg->start || pa >= seg->end)
			continue;

#if 0
		/*
		 * This assumes the kernel image occupies the beginning of a
		 * memory segment.
		 */
		if (kernend >= seg->start && kernend < seg->end) {
			if (pa < kernend)
				return (FALSE);
		}
#endif

		return (TRUE);
	}

	return (FALSE);
}
@


1.8
log
@remove #define for /dev/mem minors. let the raw magic of the hardcoded
numbers serve as a warning not to touch them.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.7 2016/08/15 22:01:59 tedu Exp $	*/
d104 2
d109 3
a117 1

@


1.7
log
@normalize some comments
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 2015/02/10 22:44:35 miod Exp $	*/
a99 4
#define	DEV_MEM		0
#define	DEV_KMEM	1
#define	DEV_NULL	2
#define	DEV_ZERO	12
d105 4
a108 4
	case DEV_MEM:
	case DEV_KMEM:
	case DEV_NULL:
	case DEV_ZERO:
d144 1
a144 1
		case DEV_MEM:
d156 1
a156 1
		case DEV_KMEM:
d179 1
a179 1
		case DEV_NULL:
d184 1
a184 1
		case DEV_ZERO:
d209 1
a209 1
	if (minor(dev) != DEV_MEM)
@


1.6
log
@Convert to uiomove().
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 2010/12/26 15:41:00 miod Exp $	*/
a104 1
/* ARGSUSED */
a120 1
/*ARGSUSED*/
a126 1
/*ARGSUSED*/
a207 1
/*ARGSUSED*/
a220 1
/*ARGSUSED*/
@


1.5
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d135 1
a135 1
	int c;
d155 2
a156 2
				c = min(uio->uio_resid, (int)(PAGE_SIZE - o));
				error = uiomovei((caddr_t)SH3_PHYS_TO_P1SEG(v),
d173 2
a174 2
				c = min(iov->iov_len, MAXPHYS);
				error = uiomovei((caddr_t)v, c, uio);
d178 1
a178 1
				c = min(iov->iov_len, MAXPHYS);
d182 1
a182 1
				error = uiomovei((caddr_t)v, c, uio);
d199 2
a200 2
			c = min(iov->iov_len, PAGE_SIZE);
			error = uiomovei(zeropage, c, uio);
@


1.4
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 2007/10/06 23:50:54 krw Exp $	*/
d156 1
a156 1
				error = uiomove((caddr_t)SH3_PHYS_TO_P1SEG(v),
d174 1
a174 1
				error = uiomove((caddr_t)v, c, uio);
d182 1
a182 1
				error = uiomove((caddr_t)v, c, uio);
d200 1
a200 1
			error = uiomove(zeropage, c, uio);
@


1.3
log
@Simpliest memset(,0,) -> M_ZERO changes. One (caddr *) cast removal,
otherwise just adding M_ZERO to malloc() and removing the immediately
adjacent memset(,0,).
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.2 2006/12/05 19:55:43 drahn Exp $	*/
d222 1
a222 1
	return (atop((paddr_t)off));
@


1.2
log
@Allow kmem to work, might not quite be right yet, but allows basic
functionality. sort of ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.1.1.1 2006/10/06 21:02:55 miod Exp $	*/
d196 3
a198 4
			if (zeropage == NULL) {
				zeropage = malloc(PAGE_SIZE, M_TEMP, M_WAITOK);
				memset(zeropage, 0, PAGE_SIZE);
			}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a150 1
kmemphys:
d164 1
a164 2
			/* P0 */
			if (v < SH3_P1SEG_BASE)
d166 17
a182 4
			/* P1 */
			if (v < SH3_P2SEG_BASE) {
				v = SH3_P1SEG_TO_PHYS(v);
				goto kmemphys;
a183 9
			/* P2 */
			if (v < SH3_P3SEG_BASE)
				return (EFAULT);
			/* P3 */
			c = min(iov->iov_len, MAXPHYS);
			if (!uvm_kernacc((void *)v, c,
			    uio->uio_rw == UIO_READ ? B_READ : B_WRITE))
				return (EFAULT);
			error = uiomove((caddr_t)v, c, uio);
d241 1
d243 1
d251 1
d260 1
@


1.1.1.1
log
@Preliminary bits for SuperH-based ports, based on NetBSD/sh3 codebase with
minor changes.
@
text
@@
