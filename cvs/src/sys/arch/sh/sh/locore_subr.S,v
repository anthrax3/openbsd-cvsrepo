head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.10.0.20
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.22
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	SH_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2016.05.23.20.11.49;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	0oWSDXhpPUnuLpPD;

1.11
date	2016.05.10.18.39.47;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	qfOifNidEGDB2jL1;

1.10
date	2010.09.06.08.00.31;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.14.18.38.19;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.13;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.10.15.53.52;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.14.14.56.23;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.10.07.02.55;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.02.23.00.28;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.06.21.16.57;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Place a cpu-dependent trap/illegal instruction over the remainder of the
sigtramp page, so that it will generate a nice kernel fault if touched.
While here, move most of the sigtramps to the .rodata segment, because
they are not executed in the kernel.
Also some preparation for sliding the actual sigtramp forward (will need
some gdb changes)
ok mlarkin kettenis
@
text
@/*	$OpenBSD: locore_subr.S,v 1.11 2016/05/10 18:39:47 deraadt Exp $	*/
/*	$NetBSD: locore_subr.S,v 1.28 2006/01/23 22:52:09 uwe Exp $	*/

/*
 * Copyright (c) 2007 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice, this permission notice, and the disclaimer below
 * appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*-
 * Copyright (c) 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "assym.h"

#include <sys/syscall.h>	/* SYS_sigreturn, SYS_exit */
#include <sh/asm.h>
#include <sh/locore.h>
#include <sh/param.h>		/* UPAGES */
#include <sh/mmu_sh3.h>
#include <sh/mmu_sh4.h>

/*
 * LINTSTUB: include <sys/types.h>
 * LINTSTUB: include <sys/proc.h>
 * LINTSTUB: include <sh/locore.h>
 */

/*
 * Save integer registers in the pcb.
 * reg points to pcb->pcb_sf.
 */
#define	SAVEPCB(reg) \
	add	#SF_SIZE, reg ; \
	sts.l	mach,	@@-##reg ; \
	sts.l	macl,	@@-##reg ; \
	stc.l	r7_bank,@@-##reg ; \
	stc.l	sr,	@@-##reg ; \
	stc.l	r6_bank,@@-##reg ; \
	sts.l	pr,	@@-##reg ; \
	mov.l	r8,	@@-##reg ; \
	mov.l	r9,	@@-##reg ; \
	mov.l	r10,	@@-##reg ; \
	mov.l	r11,	@@-##reg ; \
	mov.l	r12,	@@-##reg ; \
	mov.l	r13,	@@-##reg ; \
	mov.l	r14,	@@-##reg ; \
	mov.l	r15,	@@-##reg

/*
 * Save floating point registers to a fpreg structure.
 * reg points to the structure, tmp and tmp2 are two scratch integer registers.
 */
#define	SAVEFP(reg, tmp, tmp2) \
	add	#124,	reg ; \
	sts	fpscr,	tmp2 ; \
	add	#(FP_SIZE - 124), reg ; \
	mov	#0,	tmp; \
	mov.l	tmp2,	@@-##reg ; \
	lds	tmp,	fpscr; \
	sts.l	fpul,	@@-##reg ; \
	frchg; \
	fmov.s	fr15,	@@-##reg ; \
	fmov.s	fr14,	@@-##reg ; \
	fmov.s	fr13,	@@-##reg ; \
	fmov.s	fr12,	@@-##reg ; \
	fmov.s	fr11,	@@-##reg ; \
	fmov.s	fr10,	@@-##reg ; \
	fmov.s	fr9,	@@-##reg ; \
	fmov.s	fr8,	@@-##reg ; \
	fmov.s	fr7,	@@-##reg ; \
	fmov.s	fr6,	@@-##reg ; \
	fmov.s	fr5,	@@-##reg ; \
	fmov.s	fr4,	@@-##reg ; \
	fmov.s	fr3,	@@-##reg ; \
	fmov.s	fr2,	@@-##reg ; \
	fmov.s	fr1,	@@-##reg ; \
	fmov.s	fr0,	@@-##reg ; \
	frchg; \
	fmov.s	fr15,	@@-##reg ; \
	fmov.s	fr14,	@@-##reg ; \
	fmov.s	fr13,	@@-##reg ; \
	fmov.s	fr12,	@@-##reg ; \
	fmov.s	fr11,	@@-##reg ; \
	fmov.s	fr10,	@@-##reg ; \
	fmov.s	fr9,	@@-##reg ; \
	fmov.s	fr8,	@@-##reg ; \
	fmov.s	fr7,	@@-##reg ; \
	fmov.s	fr6,	@@-##reg ; \
	fmov.s	fr5,	@@-##reg ; \
	fmov.s	fr4,	@@-##reg ; \
	fmov.s	fr3,	@@-##reg ; \
	fmov.s	fr2,	@@-##reg ; \
	fmov.s	fr1,	@@-##reg ; \
	fmov.s	fr0,	@@-##reg ; \
	lds	tmp2,	fpscr

/*
 * Load floating point registers from a fpreg structure.
 * reg points to the structure, tmp is a scratch integer register.
 */
#define	LOADFP(reg, tmp) \
	mov	#0,	tmp; \
	lds	tmp,	fpscr; \
	fmov.s	@@##reg##+, fr0 ; \
	fmov.s	@@##reg##+, fr1 ; \
	fmov.s	@@##reg##+, fr2 ; \
	fmov.s	@@##reg##+, fr3 ; \
	fmov.s	@@##reg##+, fr4 ; \
	fmov.s	@@##reg##+, fr5 ; \
	fmov.s	@@##reg##+, fr6 ; \
	fmov.s	@@##reg##+, fr7 ; \
	fmov.s	@@##reg##+, fr8 ; \
	fmov.s	@@##reg##+, fr9 ; \
	fmov.s	@@##reg##+, fr10 ; \
	fmov.s	@@##reg##+, fr11 ; \
	fmov.s	@@##reg##+, fr12 ; \
	fmov.s	@@##reg##+, fr13 ; \
	fmov.s	@@##reg##+, fr14 ; \
	fmov.s	@@##reg##+, fr15 ; \
	frchg; \
	fmov.s	@@##reg##+, fr0 ; \
	fmov.s	@@##reg##+, fr1 ; \
	fmov.s	@@##reg##+, fr2 ; \
	fmov.s	@@##reg##+, fr3 ; \
	fmov.s	@@##reg##+, fr4 ; \
	fmov.s	@@##reg##+, fr5 ; \
	fmov.s	@@##reg##+, fr6 ; \
	fmov.s	@@##reg##+, fr7 ; \
	fmov.s	@@##reg##+, fr8 ; \
	fmov.s	@@##reg##+, fr9 ; \
	fmov.s	@@##reg##+, fr10 ; \
	fmov.s	@@##reg##+, fr11 ; \
	fmov.s	@@##reg##+, fr12 ; \
	fmov.s	@@##reg##+, fr13 ; \
	fmov.s	@@##reg##+, fr14 ; \
	fmov.s	@@##reg##+, fr15 ; \
	lds.l	@@##reg##+, fpul ; \
	lds.l	@@##reg##+, fpscr

	.text
	.align 5	/* align cache line size (32B) */
/*
 * LINTSTUB: Func: void cpu_switchto(struct proc *old, struct proc *new)
 *	Switch proc contexts.
 */
ENTRY(cpu_switchto)
	mov	r4,	r0
	cmp/eq	#0,	r0
	bt	1f

	/* Save old proc's context to switchframe */
	mov.l	.L_SF,	r0
	mov.l	@@(r0, r4), r1
	SAVEPCB(r1)
	add	#PCB_FP, r1
	SAVEFP(r1, r8, r9)

1:
	mov.l	.L_cpu_switch_prepare, r0
	jsr	@@r0
	 mov	r5,	r8	/* save new proc */
	mov	r8,	r4

	/* Setup kernel stack */
	mov.l	.L_SF,	r0
	mov.l	@@(r0, r4), r1		/* switch frame */
	mov.l	@@(SF_R7_BANK, r1), r0	/* stack top */
	mov.l	@@(SF_R6_BANK, r1), r2	/* current frame */
	mov.l	@@(SF_R15, r1), r3	/* current stack */
	/* During kernel stack switching, all interrupts are disabled. */
	__EXCEPTION_BLOCK(r1, r5)
	/* switch to new kernel stack */
	ldc	r0,	r7_bank
	ldc	r2,	r6_bank
	mov	r3,	r15

	/* Wire u-area */
	MOV	(switch_resume, r0)
	jsr	@@r0
	 mov	r4,	r8	/* save new proc */
	mov	r8,	r4
	__EXCEPTION_UNBLOCK(r0, r1)
	/* Now OK to use kernel stack. */

	/* Restore new proc's context from switchframe */
	mov.l	.L_SF,	r0
	mov.l	@@(r0, r4), r1
	add	#4,	r1		/* r15 already restored */
	mov.l	@@r1+,	r14
	mov.l	@@r1+,	r13
	mov.l	@@r1+,	r12
	mov.l	@@r1+,	r11
	mov.l	@@r1+,	r10
	mov.l	@@r1+,	r9
	mov.l	@@r1+,	r8
	lds.l	@@r1+,	pr
	add	#4,	r1		/* r6_bank already restored */
	ldc.l	@@r1+,	sr
	add	#4,	r1		/* r7_bank already restored */
	lds.l	@@r1+,	macl
	lds.l	@@r1+,	mach

	mov.l	@@(r0, r4), r1
	add	#PCB_FP, r1
	LOADFP(r1, r0)
	rts
	 nop
	.align	2
.L_SF:			.long	(P_MD_PCB)
.L_cpu_switch_prepare:	.long	_C_LABEL(cpu_switch_prepare)
FUNC_SYMBOL(switch_resume)

#ifdef SH3
/*
 * LINTSTUB: Func: void sh3_switch_resume(struct proc *p)
 *	Set current u-area PTE array to curupte.
 *	No need to flush any entries. it is depended on u-area mapping is
 *	wired, and its mapping never cause modified/reference fault.
 *	u-area TLB fault is only covered by TLB miss exception.
 *	When the situation that "VPN match but not Valid" occur, SH3 jump to
 *	"generic exception" handler instead of TLB miss exception.
 *	But OpenBSD/sh code doesn't handle it. As the result, it causes
 *	hard reset. (never can access kernel stack).
 */
NENTRY(sh3_switch_resume)
	mov.l	.L_UPTE, r0
	mov.l	.L_curupte, r1
	add	r4,	r0	/* p->p_md.md_upte */
	rts
	 mov.l	r0,	@@r1
	.align	2
.L_UPTE:		.long	P_MD_UPTE
.L_curupte:		.long	_C_LABEL(curupte)
	SET_ENTRY_SIZE(sh3_switch_resume)
#endif /* SH3 */


#ifdef SH4
/*
 * LINTSTUB: Func: void sh4_switch_resume(struct proc *p)
 *	Wire u-area. invalidate TLB entry for kernel stack to prevent
 *	TLB multiple hit.
 */
NENTRY(sh4_switch_resume)
	mov.l	.L_UPTE__sh4, r0
	add	r0,	r4	/* p->p_md.md_upte */
	mov	#UPAGES,r3
	mov	#1,	r2
	mov.l	@@r4,	r0	/* if (p->p_md.md_upte[0].addr == 0) return; */
	tst	r0,	r0
	bt	2f

	/* Save old ASID and set ASID to zero */
	xor	r0,	r0
	mov.l	.L_4_PTEH, r1
	mov.l	@@r1,	r7
	mov.l	r0,	@@r1

	mov.l	.L_VPN_MASK, r6
	mov.l	.L_4_UTLB_AA_A, r5

	/* TLB address array must be accessed via P2. Setup jump address. */
	mova	1f,	r0
	mov.l	.L_P2BASE, r1
	or	r1,	r0
	jmp	@@r0		/* run P2 */
	 nop

	/* Probe VPN match TLB entry and invalidate it. */
	.align	2		/* mova target must be 4byte alignment */
1:	mov.l	@@(4, r4), r0
	and	r6,	r0
	mov.l	r0,	@@r5	/* clear D, V */

	/* Wire u-area TLB entry */
	/* Address array */
	mov.l	@@r4+,	r0	/* addr */
	mov.l	@@r4+,	r1	/* data */
	mov.l	r1,	@@r0	/* *addr = data */

	/* Data array */
	mov.l	@@r4+,	r0	/* addr */
	mov.l	@@r4+,	r1	/* data */
	mov.l	r1,	@@r0	/* *addr = data */
	cmp/eq	r2,	r3
	bf/s	1b
	 add	#1,	r2

	/* restore ASID */
	mov.l	.L_4_PTEH, r0
	mov.l	r7,	@@r0
	mova	2f,	r0
	jmp	@@r0		/* run P1 */
	 nop
	.align	2
2:	rts			/* mova target must be 4byte alignment */
	 nop
	.align	2
.L_UPTE__sh4:		.long	P_MD_UPTE
.L_4_PTEH:		.long	SH4_PTEH
.L_4_UTLB_AA_A:		.long	(SH4_UTLB_AA | SH4_UTLB_A)
.L_4_ITLB_AA:		.long	SH4_ITLB_AA
.L_VPN_MASK:		.long	0xfffff000
.L_P2BASE:		.long	0xa0000000
	SET_ENTRY_SIZE(sh4_switch_resume)
#endif /* SH4 */


/*
 * LINTSTUB: Func: int _cpu_intr_raise(int s)
 *	raise SR.IMASK to 's'. if current SR.IMASK is greater equal 's',
 *	nothing to do. returns previous SR.IMASK.
 */
NENTRY(_cpu_intr_raise)
	stc	sr,	r2
	mov	#0x78,	r1
	mov	r2,	r0
	shll	r1		/* r1 = 0xf0 */
	and	r1,	r0	/* r0 = SR & 0xf0 */
	cmp/ge	r4,	r0	/* r0 >= r4 ? T = 1 */
	bt/s	1f
	 not	r1,	r1	/* r1 = 0xffffff0f */
	and	r1,	r2	/* r2 = SR & ~0xf0 */
	or	r2,	r4	/* r4 = (SR & ~0xf0) | s */
	ldc	r4,	sr	/* SR = r4 (don't move to delay slot) */
1:	rts
	 nop	/* return (SR & 0xf0) */
	SET_ENTRY_SIZE(_cpu_intr_raise)


/*
 * LINTSTUB: Func: int _cpu_intr_suspend(void)
 *	Mask all external interrupt. Returns previous SR.IMASK.
 */
NENTRY(_cpu_intr_suspend)
	stc	sr,	r0	/* r0 = SR */
	mov	#0x78,	r1
	shll	r1		/* r1 = 0x000000f0 */
	mov	r0,	r2	/* r2 = SR */
	or	r1,	r2	/* r2 |= 0x000000f0 */
	ldc	r2,	sr	/* SR = r2 */
	rts
	 and	r1,	r0	/* r0 = SR & 0x000000f0 */
	SET_ENTRY_SIZE(_cpu_intr_suspend)



/*
 * LINTSTUB: Func: int _cpu_intr_resume(int s)
 *	Set 's' to SR.IMASK. Returns previous SR.IMASK.
 */
NENTRY(_cpu_intr_resume)
	stc	sr,	r0	/* r0 = SR */
	mov	#0x78,	r2
	shll	r2		/* r2 = 0x000000f0 */
	not	r2,	r1	/* r1 = 0xffffff0f */
	and	r0,	r1	/* r1 = (SR & ~0xf0) */
	or	r1,	r4	/* r4 = (SR & ~0xf0) | level */
	ldc	r4,	sr	/* SR = r0 (don't move to delay slot) */
	rts
	 and	r2,	r0	/* return (SR & 0xf0) */
	SET_ENTRY_SIZE(_cpu_intr_resume)


/*
 * LINTSTUB: Func: int _cpu_exception_suspend(void)
 *	Block exception (SR.BL). if external interrupt raise, pending interrupt.
 *	if exception occur, jump to 0xa0000000 (hard reset).
 */
NENTRY(_cpu_exception_suspend)
	stc	sr,	r0	/* r0 = SR */
	mov	#0x10,	r1
	swap.b	r1,	r1
	mov	r0,	r2	/* r2 = r0 */
	swap.w	r1,	r1	/* r1 = 0x10000000 */
	or	r1,	r2	/* r2 |= 0x10000000 */
	ldc	r2,	sr	/* SR = r2 */
	rts
	 and	r1,	r0	/* r0 &= 0x10000000 */
	SET_ENTRY_SIZE(_cpu_exception_suspend)


/*
 * LINTSTUB: Func: void _cpu_exception_resume(int s)
 *	restore 's' exception mask. (SR.BL)
 */
NENTRY(_cpu_exception_resume)
	stc	sr,	r0	/* r0 = SR */
	mov	#0x10,	r1
	swap.b	r1,	r1
	swap.w	r1,	r1
	not	r1,	r1	/* r1 = ~0x10000000 */
	and	r1,	r0	/* r0 &= ~0x10000000 */
	or	r4,	r0	/* r0 |= old SR.BL */
	ldc	r0,	sr	/* SR = r0 (don't move to delay slot) */
	rts
	 nop
	SET_ENTRY_SIZE(_cpu_exception_resume)


/*
 * LINTSTUB: Func: void _cpu_spin(uint32_t count)
 *	Loop for 'count' * 10 cycles.
 * [...]
 * add    IF ID EX MA WB
 * nop       IF ID EX MA WB
 * cmp/pl       IF ID EX MA WB -  -
 * nop             IF ID EX MA -  -  WB
 * bt                 IF ID EX .  .  MA WB
 * nop                   IF ID -  -  EX MA WB
 * nop                      IF -  -  ID EX MA WB
 * nop                      -  -  -  IF ID EX MA WB
 * add                                  IF ID EX MA WB
 * nop                                     IF ID EX MA WB
 * cmp/pl                                     IF ID EX MA WB -  -
 * nop                                           IF ID EX MA -  - WB
 * bt                                               IF ID EX .  . MA
 * [...]
 */
	.align 5	/* align cache line size (32B) */
NENTRY(_cpu_spin)
1:	nop			/* 1 */
	nop			/* 2 */
	nop			/* 3 */
	add	#-1, r4		/* 4 */
	nop			/* 5 */
	cmp/pl	r4		/* 6 */
	nop			/* 7 */
	bt	1b		/* 8, 9, 10 */
	rts
	 nop
	SET_ENTRY_SIZE(_cpu_spin)


/*
 * proc_trapmpoline:
 *	Call the service function with one argument specified by the r12 and r11
 *	respectively. set by cpu_fork().
 */
NENTRY(proc_trampoline)
	jsr	@@r12
	 mov	r11,	r4
	__EXCEPTION_RETURN
	/* NOTREACHED */
	SET_ENTRY_SIZE(proc_trampoline)


/*
 * LINTSTUB: Var: char sigcode[1]
 *	Signal trampoline.
 *
 *	The kernel arranges for the signal handler to be invoked directly.
 *	This trampoline is used only to perform the return.
 *
 *	On entry, the stack looks like this:
 *
 *	sp->	sigcontext structure
 */
NENTRY(sigcode)
	mov	r15, r4			/* get pointer to sigcontext */
	mov.l	.L_SYS_sigreturn, r0
	trapa	#0x80			/* and call sigreturn() */
	.globl  _C_LABEL(sigcoderet)
_C_LABEL(sigcoderet):
	mov.l	.L_SYS_exit, r0
	trapa	#0x80			/* exit if sigreturn fails */
	/* NOTREACHED */

	.align	2
.L_SYS_sigreturn:	.long	SYS_sigreturn
.L_SYS_exit:		.long	SYS_exit

/* LINTSTUB: Var: char esigcode[1] */
.globl	_C_LABEL(esigcode)
_C_LABEL(esigcode):
	SET_ENTRY_SIZE(sigcode)

	.globl	sigfill
sigfill:
	sleep		/* priviledged -> illegal? */
esigfill:

	.data
	.globl	sigfillsiz
sigfillsiz:
	.word	esigfill - sigfill

	.text

/*
 * LINTSTUB: Func: void savectx(struct pcb *pcb)
 *	save struct switchframe.
 */
ENTRY(savectx)
	SAVEPCB(r4)
	add	#PCB_FP, r4
	SAVEFP(r4, r0, r1)
	rts
	 nop
	SET_ENTRY_SIZE(savectx)

/*
 * void fpu_save(struct fpreg *fp)
 *
 * Saves fpu context.
 */
ENTRY(fpu_save)
	SAVEFP(r4, r0, r1)
	rts
	 nop
	SET_ENTRY_SIZE(fpu_save)

/*
 * void fpu_restore(struct fpreg *fp)
 * 
 * Restores fpu context.
 */
ENTRY(fpu_restore)
	LOADFP(r4, r0)
	rts
	 nop
	SET_ENTRY_SIZE(fpu_restore)

/*
 * LINTSTUB: Func: int copyout(const void *ksrc, void *udst, size_t len)
 *	Copy len bytes into the user address space.
 */
ENTRY(copyout)
	mov.l	r14,	@@-r15
	sts.l	pr,	@@-r15
	mov	r15,	r14

	mov	#EFAULT, r0		/* assume there was a problem */
	mov	r4,	r3
	mov	r5,	r2
	mov	r5,	r4
	add	r6,	r2
	cmp/hs	r5,	r2		/* bomb if uaddr+len wraps */
	bf	2f
	mov.l	.L_copyout_VM_MAXUSER_ADDRESS, r1
	cmp/hi	r1,	r2		/* bomb if uaddr isn't in user space */
	bt	2f

	mov.l	.L_copyout_curpcb, r1	/* set fault handler */
	mov.l	@@r1,	r2
	mov.l	.L_copyout_onfault, r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)
	mov.l	.L_copyout_memcpy, r1
	jsr	@@r1			/* memcpy(uaddr, kaddr, len) */
	 mov	r3,	r5

	mov	#0,	r0
1:
	mov.l	.L_copyout_curpcb, r1	/* clear fault handler */
	mov.l	@@r1,	r2
	mov	#0,	r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)
2:
	mov	r14,	r15
	lds.l	@@r15+,	pr
	rts
	 mov.l	@@r15+,	r14

3:
	bra	1b
	 mov	#EFAULT, r0

	.align 2
.L_copyout_onfault:
	.long	3b
.L_copyout_VM_MAXUSER_ADDRESS:
	.long	VM_MAXUSER_ADDRESS
.L_copyout_curpcb:
	.long	_C_LABEL(curpcb)
.L_copyout_memcpy:
	.long	_C_LABEL(memcpy)
	SET_ENTRY_SIZE(copyout)


/*
 * LINTSTUB: Func: int copyin(const void *usrc, void *kdst, size_t len)
 *	Copy len bytes from the user address space.
 */
ENTRY(copyin)
	mov.l	r14,	@@-r15
	sts.l	pr,	@@-r15
	mov	r15,	r14

	mov	#EFAULT, r0		/* assume there was a problem */
	mov	r4,	r3
	mov	r5,	r4
	mov	r3,	r2
	add	r6,	r2
	cmp/hs	r3,	r2		/* bomb if uaddr+len wraps */
	bf	2f
	mov.l	.L_copyin_VM_MAXUSER_ADDRESS, r1
	cmp/hi	r1,	r2		/* bomb if uaddr isn't in user space */
	bt	2f

	mov.l	.L_copyin_curpcb, r1	/* set fault handler */
	mov.l	@@r1,	r2
	mov.l	.L_copyin_onfault, r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)
	mov.l	.L_copyin_memcpy, r1
	jsr	@@r1			/* memcpy(kaddr, uaddr, len) */
	 mov	r3,	r5

	mov	#0,	r0
1:
	mov.l	.L_copyin_curpcb, r1	/* clear fault handler */
	mov.l	@@r1,	r2
	mov	#0,	r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)
2:
	mov	r14,	r15
	lds.l	@@r15+,	pr
	rts
	 mov.l	@@r15+,	r14

3:
	bra	1b
	 mov	#EFAULT, r0

	.align 2
.L_copyin_onfault:
	.long	3b
.L_copyin_VM_MAXUSER_ADDRESS:
	.long	VM_MAXUSER_ADDRESS
.L_copyin_curpcb:
	.long	_C_LABEL(curpcb)
.L_copyin_memcpy:
	.long	_C_LABEL(memcpy)
	SET_ENTRY_SIZE(copyin)


/*
 * LINTSTUB: Func: int copyoutstr(const void *ksrc, void *udst, size_t maxlen, size_t *lencopied)
 *	Copy a NUL-terminated string, at most maxlen characters long,
 *	into the user address space.  Return the number of characters
 *	copied (including the NUL) in *lencopied.  If the string is
 *	too long, return ENAMETOOLONG; else return 0 or EFAULT.
 */
ENTRY(copyoutstr)
	mov.l	r8,	@@-r15

	mov	#EFAULT, r3		/* assume there was a problem */
	mov	r4,	r8
	mov.l	.L_copyoutstr_curpcb, r1	/* set fault handler */
	mov.l	@@r1,	r2
	mov.l	.L_copyoutstr_onfault, r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)
	mov.l	.L_copyoutstr_VM_MAXUSER_ADDRESS, r1
	cmp/hi	r1,	r5		/* bomb if udst isn't in user space */
	bt	4f
	mov	r1,	r0
	sub	r5,	r0
	cmp/hi	r6,	r0		/* don't beyond user space */
	bf	2f
	bra	2f
	 mov	r6,	r0

	.align 2
1:
	mov.b	@@r4+,	r1		/* copy str */
	mov.b	r1,	@@r5
	extu.b	r1,	r1
	add	#1,	r5
	tst	r1,	r1
	bf	2f
	bra	3f
	 mov	#0,	r3
	.align 2
2:
	add	#-1,	r0
	cmp/eq	#-1,	r0
	bf	1b
	mov.l	.L_copyoutstr_VM_MAXUSER_ADDRESS, r1
	cmp/hs	r1,	r5
	bt	3f
	mov	#ENAMETOOLONG, r3

3:
	tst	r7,	r7		/* set lencopied if needed */
	bt	4f
	mov	r4,	r1
	sub	r8,	r1
	mov.l	r1,	@@r7
4:
	mov.l	.L_copyoutstr_curpcb, r1	/* clear fault handler */
	mov.l	@@r1,	r2
	mov	#0,	r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)

	mov	r3,	r0
	rts
	 mov.l	@@r15+,	r8

5:
	bra	4b
	 mov	#EFAULT, r3

	.align 2
.L_copyoutstr_onfault:
	.long	5b
.L_copyoutstr_VM_MAXUSER_ADDRESS:
	.long	VM_MAXUSER_ADDRESS
.L_copyoutstr_curpcb:
	.long	_C_LABEL(curpcb)
	SET_ENTRY_SIZE(copyoutstr)


/*
 * LINTSTUB: Func: int copyinstr(const void *src, void *dst, size_t maxlen, size_t *lencopied)
 *	Copy a NUL-terminated string, at most maxlen characters long,
 *	from the user address space.  Return the number of characters
 *	copied (including the NUL) in *lencopied.  If the string is
 *	too long, return ENAMETOOLONG; else return 0 or EFAULT.
 */
ENTRY(copyinstr)
	mov.l	r8,	@@-r15
	mov	#EFAULT, r3		/* assume there was a problem */
	mov	r4,	r8
	mov.l	.L_copyinstr_curpcb, r1	/* set fault handler */
	mov.l	@@r1,	r2
	mov.l	.L_copyinstr_onfault, r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)

	mov.l	.L_copyinstr_VM_MAXUSER_ADDRESS, r1
	cmp/hi	r1,	r4		/* bomb if src isn't in user space */
	bt	4f
	mov	r1,	r0
	sub	r4,	r0
	cmp/hi	r6,	r0		/* don't beyond user space */
	bf	2f
	bra	2f
	 mov	r6,	r0

	.align 2
1:
	mov.b	@@r4+,	r1		/* copy str */
	mov.b	r1,	@@r5
	extu.b	r1,	r1
	add	#1,	r5
	tst	r1,	r1
	bf	2f
	bra	3f
	 mov	#0,	r3
	.align 2
2:
	add	#-1,	r0
	cmp/eq	#-1,	r0
	bf	1b
	mov.l	.L_copyinstr_VM_MAXUSER_ADDRESS, r1
	cmp/hs	r1,	r4
	bt	3f
	mov	#ENAMETOOLONG, r3

3:
	tst	r7,	r7		/* set lencopied if needed */
	bt	4f
	mov	r4,	r1
	sub	r8,	r1
	mov.l	r1,	@@r7
4:
	mov.l	.L_copyinstr_curpcb, r1	/* clear fault handler */
	mov.l	@@r1,	r2
	mov	#0,	r1
	mov.l	r1,	@@(PCB_ONFAULT,r2)

	mov	r3,	r0
	rts
	 mov.l	@@r15+,	r8

5:
	bra	4b
	 mov	#EFAULT, r3

	.align 2
.L_copyinstr_onfault:
	.long	5b
.L_copyinstr_VM_MAXUSER_ADDRESS:
	.long	VM_MAXUSER_ADDRESS
.L_copyinstr_curpcb:
	.long	_C_LABEL(curpcb)
	SET_ENTRY_SIZE(copyinstr)

/*
 * LINTSTUB: Func: int kcopy(const void *src, void *dst, size_t len)
 */
ENTRY(kcopy)
	mov.l	r8,	@@-r15
	mov.l	r14,	@@-r15
	sts.l	pr,	@@-r15
	mov	r15,	r14

	mov	r4,	r3
	mov.l	.L_kcopy_curpcb, r1
	mov.l	@@r1,	r2
	mov.l	@@(PCB_ONFAULT,r2) ,r8	/* save old fault handler */
	mov.l	.L_kcopy_onfault, r1
	mov.l	r1,	@@(PCB_ONFAULT,r2) /* set fault handler */
	mov.l	.L_kcopy_memcpy, r1
	mov	r5,	r4
	jsr	@@r1			/* memcpy(dst, src, len) */
	 mov	r3,	r5
	mov	#0,	r0
1:
	mov.l	.L_kcopy_curpcb, r1	/* restore fault handler */
	mov.l	@@r1,	r2
	mov.l	r8,	@@(PCB_ONFAULT,r2)

	mov	r14,	r15
	lds.l	@@r15+,	pr
	mov.l	@@r15+,	r14
	rts
	 mov.l	@@r15+,	r8

2:
	bra	1b
	 mov	#EFAULT, r0

	.align 2
.L_kcopy_onfault:
	.long	2b
.L_kcopy_curpcb:
	.long	_C_LABEL(curpcb)
.L_kcopy_memcpy:
	.long	_C_LABEL(memcpy)
	SET_ENTRY_SIZE(kcopy)


#if defined(DDB)

/*
 * LINTSTUB: Func: int setjmp(label_t *jmpbuf)
 */
ENTRY(setjmp)
	add	#4*9,	r4
	mov.l	r8,	@@-r4
	mov.l	r9,	@@-r4
	mov.l	r10,	@@-r4
	mov.l	r11,	@@-r4
	mov.l	r12,	@@-r4
	mov.l	r13,	@@-r4
	mov.l	r14,	@@-r4
	mov.l	r15,	@@-r4
	sts.l	pr,	@@-r4
	rts
	 xor	r0, r0
	SET_ENTRY_SIZE(setjmp)

/*
 * LINTSTUB: Func: void longjmp(label_t *jmpbuf)
 */
ENTRY(longjmp)
	lds.l	@@r4+,	pr
	mov.l	@@r4+,	r15
	mov.l	@@r4+,	r14
	mov.l	@@r4+,	r13
	mov.l	@@r4+,	r12
	mov.l	@@r4+,	r11
	mov.l	@@r4+,	r10
	mov.l	@@r4+,	r9
	mov.l	@@r4+,	r8
	rts
	 mov	#1, r0		/* return 1 from setjmp */
	SET_ENTRY_SIZE(longjmp)

#endif /* DDB */
@


1.11
log
@SROP mitigation.  sendsig() stores a (per-process ^ &sigcontext) cookie
inside the sigcontext.  sigreturn(2) checks syscall entry was from the
exact PC addr in the (per-process ASLR) sigtramp, verifies the cookie,
and clears it to prevent sigcontext reuse.
not yet tested on landisk, sparc, *88k, socppc.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.10 2010/09/06 08:00:31 jsg Exp $	*/
d510 12
@


1.10
log
@move away from using /**/ to ## for cpp paste in sh locore
so we can drop -traditional-cpp
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.9 2009/02/14 18:38:19 miod Exp $	*/
d496 2
@


1.9
log
@Fix logic error in copyinstr() when deciding whether to return EFAULT
or ENAMETOOLONG.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.8 2008/06/26 05:42:13 ray Exp $	*/
d67 14
a80 14
	sts.l	mach,	@@-/**/reg ; \
	sts.l	macl,	@@-/**/reg ; \
	stc.l	r7_bank,@@-/**/reg ; \
	stc.l	sr,	@@-/**/reg ; \
	stc.l	r6_bank,@@-/**/reg ; \
	sts.l	pr,	@@-/**/reg ; \
	mov.l	r8,	@@-/**/reg ; \
	mov.l	r9,	@@-/**/reg ; \
	mov.l	r10,	@@-/**/reg ; \
	mov.l	r11,	@@-/**/reg ; \
	mov.l	r12,	@@-/**/reg ; \
	mov.l	r13,	@@-/**/reg ; \
	mov.l	r14,	@@-/**/reg ; \
	mov.l	r15,	@@-/**/reg
d91 1
a91 1
	mov.l	tmp2,	@@-/**/reg ; \
d93 1
a93 1
	sts.l	fpul,	@@-/**/reg ; \
d95 16
a110 16
	fmov.s	fr15,	@@-/**/reg ; \
	fmov.s	fr14,	@@-/**/reg ; \
	fmov.s	fr13,	@@-/**/reg ; \
	fmov.s	fr12,	@@-/**/reg ; \
	fmov.s	fr11,	@@-/**/reg ; \
	fmov.s	fr10,	@@-/**/reg ; \
	fmov.s	fr9,	@@-/**/reg ; \
	fmov.s	fr8,	@@-/**/reg ; \
	fmov.s	fr7,	@@-/**/reg ; \
	fmov.s	fr6,	@@-/**/reg ; \
	fmov.s	fr5,	@@-/**/reg ; \
	fmov.s	fr4,	@@-/**/reg ; \
	fmov.s	fr3,	@@-/**/reg ; \
	fmov.s	fr2,	@@-/**/reg ; \
	fmov.s	fr1,	@@-/**/reg ; \
	fmov.s	fr0,	@@-/**/reg ; \
d112 16
a127 16
	fmov.s	fr15,	@@-/**/reg ; \
	fmov.s	fr14,	@@-/**/reg ; \
	fmov.s	fr13,	@@-/**/reg ; \
	fmov.s	fr12,	@@-/**/reg ; \
	fmov.s	fr11,	@@-/**/reg ; \
	fmov.s	fr10,	@@-/**/reg ; \
	fmov.s	fr9,	@@-/**/reg ; \
	fmov.s	fr8,	@@-/**/reg ; \
	fmov.s	fr7,	@@-/**/reg ; \
	fmov.s	fr6,	@@-/**/reg ; \
	fmov.s	fr5,	@@-/**/reg ; \
	fmov.s	fr4,	@@-/**/reg ; \
	fmov.s	fr3,	@@-/**/reg ; \
	fmov.s	fr2,	@@-/**/reg ; \
	fmov.s	fr1,	@@-/**/reg ; \
	fmov.s	fr0,	@@-/**/reg ; \
d137 16
a152 16
	fmov.s	@@/**/reg/**/+, fr0 ; \
	fmov.s	@@/**/reg/**/+, fr1 ; \
	fmov.s	@@/**/reg/**/+, fr2 ; \
	fmov.s	@@/**/reg/**/+, fr3 ; \
	fmov.s	@@/**/reg/**/+, fr4 ; \
	fmov.s	@@/**/reg/**/+, fr5 ; \
	fmov.s	@@/**/reg/**/+, fr6 ; \
	fmov.s	@@/**/reg/**/+, fr7 ; \
	fmov.s	@@/**/reg/**/+, fr8 ; \
	fmov.s	@@/**/reg/**/+, fr9 ; \
	fmov.s	@@/**/reg/**/+, fr10 ; \
	fmov.s	@@/**/reg/**/+, fr11 ; \
	fmov.s	@@/**/reg/**/+, fr12 ; \
	fmov.s	@@/**/reg/**/+, fr13 ; \
	fmov.s	@@/**/reg/**/+, fr14 ; \
	fmov.s	@@/**/reg/**/+, fr15 ; \
d154 18
a171 18
	fmov.s	@@/**/reg/**/+, fr0 ; \
	fmov.s	@@/**/reg/**/+, fr1 ; \
	fmov.s	@@/**/reg/**/+, fr2 ; \
	fmov.s	@@/**/reg/**/+, fr3 ; \
	fmov.s	@@/**/reg/**/+, fr4 ; \
	fmov.s	@@/**/reg/**/+, fr5 ; \
	fmov.s	@@/**/reg/**/+, fr6 ; \
	fmov.s	@@/**/reg/**/+, fr7 ; \
	fmov.s	@@/**/reg/**/+, fr8 ; \
	fmov.s	@@/**/reg/**/+, fr9 ; \
	fmov.s	@@/**/reg/**/+, fr10 ; \
	fmov.s	@@/**/reg/**/+, fr11 ; \
	fmov.s	@@/**/reg/**/+, fr12 ; \
	fmov.s	@@/**/reg/**/+, fr13 ; \
	fmov.s	@@/**/reg/**/+, fr14 ; \
	fmov.s	@@/**/reg/**/+, fr15 ; \
	lds.l	@@/**/reg/**/+, fpul ; \
	lds.l	@@/**/reg/**/+, fpscr
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.7 2007/10/10 15:53:52 art Exp $	*/
d563 1
a563 1
	mov.l	.L_copyout_curpcb, r1	/* set fault hander */
d619 1
a619 1
	mov.l	.L_copyin_curpcb, r1	/* set fault hander */
d629 1
a629 1
	mov.l	.L_copyin_curpcb, r1	/* clear fault hander */
d773 1
a773 1
	cmp/hs	r1,	r5
@


1.7
log
@Make context switching much more MI:
 - Move the functionality of choosing a process from cpu_switch into
   a much simpler function: cpu_switchto. Instead of having the locore
   code walk the run queues, let the MI code choose the process we
   want to run and only implement the context switching itself in MD
   code.
 - Let MD context switching run without worrying about spls or locks.
 - Instead of having the idle loop implemented with special contexts
   in MD code, implement one idle proc for each cpu. make the idle
   loop MI with MD hooks.
 - Change the proc lists from the old style vax queues to TAILQs.
 - Change the sleep queue from vax queues to TAILQs. This makes
   wakeup() go from O(n^2) to O(n)

there will be some MD fallout, but it will be fixed shortly.
There's also a few cleanups to be done after this.

deraadt@@, kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.6 2007/03/02 06:11:54 miod Exp $	*/
a31 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.5 2006/12/14 14:56:23 kettenis Exp $	*/
d183 2
a184 2
 * LINTSTUB: Func: void cpu_switch(struct proc *p, struct proc *XXX_IGNORED)
 *	Find a runnable proc and switch to it.  Wait if necessary.
d186 6
a191 2
ENTRY(cpu_switch)
	/* Save current proc's context to switchframe */
d198 2
a199 3
.L_find_and_switch:
	/* Search next proc. cpu_switch_search may or may not sleep. */
	mov.l	.L_cpu_switch_search, r0
d201 2
a202 6
	 mov	r4,	r8	/* save old proc */

	/* Skip context switch if same proc. */
	cmp/eq	r8,	r0
	bt/s	1f
	 mov	r0,	r4	/* new proc */
d226 1
a226 1
1:	mov.l	.L_SF,	r0
d250 1
a250 1
.L_cpu_switch_search:	.long	_C_LABEL(cpu_switch_search)
a251 40


/*
 * LINTSTUB: Func: void switch_exit(struct proc *p, void (*exit_func)(struct proc *))
 *	Called only from cpu_exit(p).  Before we call exit_func to
 *	free proc's resources (including kernel stack) we need to
 *	switch to the proc0's kernel stack.  Then we jump into the
 *	middle of cpu_switch to find and switch to a new proc.
 */
ALTENTRY(switch_exit)
	mov.l	.L_switch_exit_proc0_pcb, r1
	mov.l	.L_switch_exit_curpcb, r0
	mov.l	@@r1, r1
	mov.l	r1, @@r0			/* curpcb = proc0.p_md.md_pcb */

	mov.l	@@(SF_R7_BANK, r1), r0	/* stack top */
	mov.l	@@(SF_R6_BANK, r1), r2	/* current frame */
	mov.l	@@(SF_R15, r1), r3	/* current stack */

	/* switch to proc0's kernel stack */
	__EXCEPTION_BLOCK(r1, r6)
	ldc	r0, r7_bank
	ldc	r2, r6_bank
	mov	r3, r15
	__EXCEPTION_UNBLOCK(r0, r1)

	/* safe to call (*exit_func)(p); now */
	jsr	@@r5
	 nop			/* proc is already in r4 */

	/* proceed to cpu_switch */
	bra	.L_find_and_switch
	 mov	#0, r4		/* no "previous" proc */

	.align 2
.L_switch_exit_proc0_pcb:
	.long	_C_LABEL(proc0) + P_MD_PCB
.L_switch_exit_curpcb:
	.long	_C_LABEL(curpcb)

@


1.5
log
@Reset BBRB if we exit from a process that was single-stepping.  Prevents a
process that re-uses its ASID from getting random SIGTRAPs.

ok miod@@, mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.4 2006/11/10 07:02:55 miod Exp $	*/
d4 16
d68 5
a72 1
#define	SAVEPCB(reg,branch) \
d74 2
d87 92
a178 2
	branch ; \
	 mov.l	r15,	@@-/**/reg
d190 3
a192 1
	SAVEPCB(r1,)
d240 3
d244 3
d562 5
a566 1
	SAVEPCB(r4, rts)
d568 22
@


1.4
log
@Enforce correct userspace bounds in copy{in,out}str().
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.3 2006/11/02 23:00:28 miod Exp $	*/
a134 9

/*
 * LINTSTUB: Func: void cpu_exit(struct proc *p)
 *	Just fall-through to the switch_exit below.
 */
ENTRY(cpu_exit)
	mov.l	.L_switch_exit_proc_exit2, r5	/* exit_func to call */
	/* FALLTHROUGH */

a167 2
.L_switch_exit_proc_exit2:
	.long	_C_LABEL(exit2)
@


1.3
log
@Remove unused code and move the knowledge of struct switchframe to a single
place.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore_subr.S,v 1.2 2006/10/06 21:16:57 mickey Exp $	*/
d585 2
d661 2
d664 1
a664 1
	sub	r5,	r0
@


1.2
log
@a few fixes to get thru the autoconf
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 16
d71 1
a71 1
 * LINTSTUB: Func: int cpu_switch(struct proc *p, struct proc *XXX_IGNORED)
d78 1
a78 13
	add	#SF_SIZE, r1
	stc.l	r7_bank,@@-r1
	stc.l	sr,	@@-r1
	stc.l	r6_bank,@@-r1
	sts.l	pr,	@@-r1
	mov.l	r8,	@@-r1
	mov.l	r9,	@@-r1
	mov.l	r10,	@@-r1
	mov.l	r11,	@@-r1
	mov.l	r12,	@@-r1
	mov.l	r13,	@@-r1
	mov.l	r14,	@@-r1
	mov.l	r15,	@@-r1
a90 1
.L_doswitch:
a111 7
	/* Return 1 indicating "we switched". */
	bra	2f
	 mov	#1, r2

1:	/* Return 0 indicating "didn't switch". */
	mov	#0, r2

d113 1
a113 2
	/* NOTE: r2 has return value! */
2:	mov.l	.L_SF,	r0
a126 1
	/* r2 has the return value; stuff it into r0 now. */
d128 1
a128 1
	 mov	r2, r0
a136 49
 * LINTSTUB: Func: void cpu_switchto(struct proc *current, struct proc *next)
 *	Switch to the specified next LWP.
 */
ENTRY(cpu_switchto)
	/* Save current proc's context to switchframe. */
	mov.l	.L_SFp,	r0
	mov.l	@@(r0, r4), r1
	add	#SF_SIZE, r1
	stc.l	r7_bank,@@-r1
	stc.l	sr,	@@-r1
	stc.l	r6_bank,@@-r1
	sts.l	pr,	@@-r1
	mov.l	r8,	@@-r1
	mov.l	r9,	@@-r1
	mov.l	r10,	@@-r1
	mov.l	r11,	@@-r1
	mov.l	r12,	@@-r1
	mov.l	r13,	@@-r1
	mov.l	r14,	@@-r1
	mov.l	r15,	@@-r1

	/*
	 * curproc = NULL;
	 * XXX Is this necessary?  We know we won't go idle.
	 */
	mov.l	.L_curproc, r0
	mov	#0, r1
	mov.l	r1, @@r0

	/* old and new procs are already in r4, r5 */
	mov.l	.L_cpu_switch_prepare, r0
	jsr	@@r0
	 nop

	/*
	 * Put the incoming LWP in r4 and jump into the middle
	 * of cpu_switch(), and let it do the work to restore the
	 * incoming LWP's context.
	 */
	bra	.L_doswitch
	 mov	r0, r4

	.align	2
.L_SFp:			.long	(P_MD_PCB)
.L_curproc:		.long	_C_LABEL(curproc)
.L_cpu_switch_prepare:	.long	_C_LABEL(cpu_switch_prepare)


/*
d453 1
a453 14
	add	#SF_SIZE, r4
	stc.l	r7_bank,@@-r4
	stc.l	sr,	@@-r4
	stc.l	r6_bank,@@-r4
	sts.l	pr,	@@-r4
	mov.l	r8,	@@-r4
	mov.l	r9,	@@-r4
	mov.l	r10,	@@-r4
	mov.l	r11,	@@-r4
	mov.l	r12,	@@-r4
	mov.l	r13,	@@-r4
	mov.l	r14,	@@-r4
	rts
	 mov.l	r15,	@@-r4
a454 1

@


1.1
log
@Initial revision
@
text
@d233 1
a233 1
	.long	_C_LABEL(proc_exit2)
@


1.1.1.1
log
@Preliminary bits for SuperH-based ports, based on NetBSD/sh3 codebase with
minor changes.
@
text
@@
