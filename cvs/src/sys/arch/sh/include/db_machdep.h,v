head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.8
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	SH_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.04.27.11.10.48;	author mpi;	state Exp;
branches;
next	1.7;
commitid	57btDderNGPG4fjG;

1.7
date	2016.02.27.13.08.07;	author mpi;	state Exp;
branches;
next	1.6;
commitid	hnv9KfQtxhCytAnd;

1.6
date	2014.03.16.20.31.46;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.27.19.57.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.11.20.44.11;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.02.22.16.22;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.06.21.16.57;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@G/C DDB_REGS.
@
text
@/*	$OpenBSD: db_machdep.h,v 1.7 2016/02/27 13:08:07 mpi Exp $	*/
/*	$NetBSD: db_machdep.h,v 1.12 2006/05/10 06:24:03 skrll Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#ifndef	_SH_DB_MACHDEP_H_
#define	_SH_DB_MACHDEP_H_

/*
 * Machine-dependent defines for the kernel debugger.
 */

#include <sys/param.h>
#include <uvm/uvm_extern.h>
#include <sh/trap.h>

typedef	vaddr_t		db_addr_t;	/* address - unsigned */
typedef	long		db_expr_t;	/* expression - signed */

typedef struct trapframe db_regs_t;
extern db_regs_t	ddb_regs;	/* register state */

#define	PC_REGS(regs)	((db_addr_t)(regs)->tf_spc)
#define PC_ADVANCE(regs) ((regs)->tf_spc += BKPT_SIZE)

#define	BKPT_INST	0xc3c3		/* breakpoint instruction */
#define	BKPT_SIZE	2		/* size of breakpoint inst */
#define	BKPT_SET(inst)	BKPT_INST

#define	FIXUP_PC_AFTER_BREAK(regs)	((regs)->tf_spc -= BKPT_SIZE)

#define	IS_BREAKPOINT_TRAP(type, code)	((type) == EXPEVT_TRAPA)
#define	IS_WATCHPOINT_TRAP(type, code)	(0) /* XXX (msaitoh) */

int db_ktrap(int, int, db_regs_t *);
void db_machine_init (void);
boolean_t inst_call(int);
boolean_t inst_return(int);
boolean_t inst_trap_return(int);

/*
 * We have machine-dependent commands.
 */
#define	DB_MACHINE_COMMANDS

#endif	/* !_SH_DB_MACHDEP_H_ */
@


1.7
log
@Rename kdb_trap() into db_ktrap().

The goal is to include it in the list of functions that must not be
instrumented.  All ddb(8) functions should be in this list and have
their names start with 'db_'.

ok visa@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.6 2014/03/16 20:31:46 guenther Exp $	*/
a45 1
#define	DDB_REGS	(&ddb_regs)
@


1.6
log
@DDB supports ELF symbols are all archs, and it's always the same as the
native size, so eliminate the #defines.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5 2010/11/27 19:57:23 miod Exp $	*/
d60 1
a60 1
int kdb_trap(int, int, db_regs_t *);
@


1.5
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.4 2008/02/11 20:44:11 miod Exp $	*/
a64 7

/*
 * We use ELF symbols in DDB.
 *
 */
#define	DB_ELF_SYMBOLS
#define	DB_ELFSIZE	32
@


1.4
log
@g/c db_thread_fp_used()
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.3 2006/11/02 22:16:22 mickey Exp $	*/
a58 3

#define	inst_load(ins)		0
#define	inst_store(ins)		0
@


1.3
log
@proper brkpt detection so continue does restart proper
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.2 2006/10/06 21:16:57 mickey Exp $	*/
a61 3

/* macro for checking if a thread has used floating-point */
#define	db_thread_fp_used(thread)	((thread)->pcb->ims.ifps != 0)
@


1.2
log
@a few fixes to get thru the autoconf
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#define	IS_BREAKPOINT_TRAP(type, code)	((type) == EXPEVT_BREAK)
@


1.1
log
@Initial revision
@
text
@d67 1
@


1.1.1.1
log
@Preliminary bits for SuperH-based ports, based on NetBSD/sh3 codebase with
minor changes.
@
text
@@
