head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.20
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.22
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.14
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.18
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	SH_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.05.18.20.21.13;	author guenther;	state Exp;
branches;
next	1.5;
commitid	vF64iVVN9U3wxSNG;

1.5
date	2010.09.06.08.00.31;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.12;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.26.15.28.19;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.05.18.59.58;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.06.21.02.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Save and restore 'gbr' register when enter/leaving the kernel, and use
it for the TCB pointer.  Eliminate __cerror.

"looks good" kettenis@@, testing and ok deraadt@@
@
text
@/*	$OpenBSD: locore.h,v 1.5 2010/09/06 08:00:31 jsg Exp $	*/
/*	$NetBSD: locore.h,v 1.11 2006/01/23 22:32:50 uwe Exp $	*/

/*-
 * Copyright (c) 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#if defined(SH3) && defined(SH4)
#define	MOV(x, r)	mov.l .L_##x, r; mov.l @@r, r
#define	REG_SYMBOL(x)	.L_##x:	.long	_C_LABEL(__sh_##x)
#define	FUNC_SYMBOL(x)	.L_##x:	.long	_C_LABEL(__sh_##x)
#elif defined(SH3)
#define	MOV(x, r)	mov.l .L_##x, r
#define	REG_SYMBOL(x)	.L_##x:	.long	SH3_##x
#define	FUNC_SYMBOL(x)	.L_##x:	.long	_C_LABEL(sh3_##x)
#elif defined(SH4)
#define	MOV(x, r)	mov.l .L_##x, r
#define	REG_SYMBOL(x)	.L_##x:	.long	SH4_##x
#define	FUNC_SYMBOL(x)	.L_##x:	.long	_C_LABEL(sh4_##x)
#endif /* SH3 && SH4 */

/*
 * BANK1 r7 contains kernel stack top address.
 * BANK1 r6 contains current frame pointer. (per process)
 */
/*
 * __EXCEPTION_ENTRY:
 *	+ setup stack pointer
 *	+ save all register to frame. (struct trapframe)
 *	+ setup kernel stack.
 *	+ change bank from 1 to 0
 *	+ set BANK0 (r4, r5, r6) = (ssr, spc, ssp)
 */
#define	__EXCEPTION_ENTRY						;\
	/* Check kernel/user mode. */					;\
	mov	#0x40,	r3						;\
	swap.b	r3,	r3						;\
	stc	ssr,	r2						;\
	swap.w	r3,	r3	/* r3 = 0x40000000 */			;\
	mov	r2,	r0	/* r2 = r0 = SSR */			;\
	and	r3,	r0						;\
	tst	r0,	r0	/* if (SSR.MD == 0) T = 1 */		;\
	mov	r14,	r1						;\
	mov	r6,	r14	/* frame pointer */			;\
	bf/s	1f		/* T==0 ...Exception from kernel mode */;\
	 mov	r15,	r0						;\
	/* Exception from user mode */					;\
	mov	r7,	r15	/* change to kernel stack */		;\
1:									;\
	/* Save registers */						;\
	mov.l	r1,	@@-r14	/* tf_r14 */				;\
	mov.l	r0,	@@-r14	/* tf_r15 */				;\
	stc.l	r0_bank,@@-r14	/* tf_r0  */				;\
	stc.l	r1_bank,@@-r14	/* tf_r1  */				;\
	stc.l	r2_bank,@@-r14	/* tf_r2  */				;\
	stc.l	r3_bank,@@-r14	/* tf_r3  */				;\
	stc.l	r4_bank,@@-r14	/* tf_r4  */				;\
	stc.l	r5_bank,@@-r14	/* tf_r5  */				;\
	stc.l	r6_bank,@@-r14	/* tf_r6  */				;\
	stc.l	r7_bank,@@-r14	/* tf_r7  */				;\
	mov.l	r8,	@@-r14	/* tf_r8  */				;\
	mov.l	r9,	@@-r14	/* tf_r9  */				;\
	mov.l	r10,	@@-r14	/* tf_r10 */				;\
	mov.l	r11,	@@-r14	/* tf_r11 */				;\
	mov.l	r12,	@@-r14	/* tf_r12 */				;\
	mov.l	r13,	@@-r14	/* tf_r13 */				;\
	sts.l	pr,	@@-r14	/* tf_pr  */				;\
	sts.l	mach,	@@-r14	/* tf_mach*/				;\
	sts.l	macl,	@@-r14	/* tf_macl*/				;\
	stc.l	gbr,	@@-r14	/* tf_gbr */				;\
	mov.l	r2,	@@-r14	/* tf_ssr */				;\
	stc.l	spc,	@@-r14	/* tf_spc */				;\
	add	#-TF_SPC, r14	/* skip tf_ubc, tf_expevt */		;\
	mov	r14,	r6	/* store frame pointer */		;\
	/* Change register bank to 0 */					;\
	shlr	r3		/* r3 = 0x20000000 */			;\
	stc	sr,	r1	/* r1 = SR */				;\
	not	r3,	r3						;\
	and	r1,	r3						;\
	ldc	r3,	sr	/* SR.RB = 0 */				;\
	/* Set up argument. r4 = ssr, r5 = spc */			;\
	stc	r2_bank,r4						;\
	stc	spc,	r5

/*
 * __EXCEPTION_RETURN:
 *	+ block exception
 *	+ restore all register from stack.
 *	+ rte.
 */
#define	__EXCEPTION_RETURN						;\
	mov	#0x10,	r0						;\
	swap.b	r0,	r0						;\
	swap.w	r0,	r0	/* r0 = 0x10000000 */			;\
	stc	sr,	r1						;\
	or	r0,	r1						;\
	ldc	r1,	sr	/* SR.BL = 1 */				;\
	stc	r6_bank,r0						;\
	mov	r0,	r14						;\
	add	#TF_SIZE, r0						;\
	ldc	r0,	r6_bank	/* roll up frame pointer */		;\
	add	#TF_SPC, r14	/* skip tf_expevt, tf_ubc */		;\
	mov.l	@@r14+,	r0	/* tf_spc */				;\
	ldc	r0,	spc						;\
	mov.l	@@r14+,	r0	/* tf_ssr */				;\
	ldc	r0,	ssr						;\
	ldc.l	@@r14+,	gbr	/* tf_gbr */				;\
	lds.l	@@r14+,	macl	/* tf_macl*/				;\
	lds.l	@@r14+,	mach	/* tf_mach*/				;\
	lds.l	@@r14+,	pr	/* tf_pr  */				;\
	mov.l	@@r14+,	r13	/* tf_r13 */				;\
	mov.l	@@r14+,	r12	/* tf_r12 */				;\
	mov.l	@@r14+,	r11	/* tf_r11 */				;\
	mov.l	@@r14+,	r10	/* tf_r10 */				;\
	mov.l	@@r14+,	r9	/* tf_r9  */				;\
	mov.l	@@r14+,	r8	/* tf_r8  */				;\
	mov.l	@@r14+,	r7	/* tf_r7  */				;\
	mov.l	@@r14+,	r6	/* tf_r6  */				;\
	mov.l	@@r14+,	r5	/* tf_r5  */				;\
	mov.l	@@r14+,	r4	/* tf_r4  */				;\
	mov.l	@@r14+,	r3	/* tf_r3  */				;\
	mov.l	@@r14+,	r2	/* tf_r2  */				;\
	mov.l	@@r14+,	r1	/* tf_r1  */				;\
	mov.l	@@r14+,	r0	/* tf_r0  */				;\
	mov.l	@@r14+	r15	/* tf_r15 */				;\
	mov.l	@@r14+,	r14	/* tf_r14 */				;\
	rte								;\
	 nop


/*
 * Macros to disable and enable exceptions (including interrupts).
 * This modifies SR.BL
 */
#define	__0x10	#0x10
#define	__0x78	#0x78

#define	__EXCEPTION_BLOCK(Rn, Rm)					;\
	mov	__0x10,	Rn						;\
	swap.b	Rn,	Rn						;\
	swap.w	Rn,	Rn	/* Rn = 0x10000000 */			;\
	stc	sr,	Rm						;\
	or	Rn,	Rm						;\
	ldc	Rm,	sr	/* block exceptions */

#define	__EXCEPTION_UNBLOCK(Rn, Rm)					;\
	mov	__0x10,	Rn						;\
	swap.b	Rn,	Rn						;\
	swap.w	Rn,	Rn	/* Rn = 0x10000000 */			;\
	not	Rn,	Rn						;\
	stc	sr,	Rm						;\
	and	Rn,	Rm						;\
	ldc	Rm,	sr	/* unblock exceptions */

/*
 * Macros to disable and enable interrupts.
 * This modifies SR.I[0-3]
 */
#define	__INTR_MASK(Rn, Rm)						;\
	mov	__0x78,	Rn						;\
	shll	Rn		/* Rn = 0x000000f0 */			;\
	stc	sr,	Rm						;\
	or	Rn,	Rm						;\
	ldc	Rm,	sr	/* mask all interrupt */

#define	__INTR_UNMASK(Rn, Rm)						;\
	mov	__0x78,	Rn						;\
	shll	Rn		/* Rn = 0x000000f0 */			;\
	not	Rn,	Rn						;\
	stc	sr,	Rm						;\
	and	Rn,	Rm						;\
	ldc	Rm,	sr	/* unmask all interrupt */

#ifndef _LOCORE
void sh3_switch_setup(struct proc *);
void sh4_switch_setup(struct proc *);
void sh3_switch_resume(struct proc *);
void sh4_switch_resume(struct proc *);
extern void (*__sh_switch_resume)(struct proc *);
#endif /* !_LOCORE */
@


1.5
log
@move away from using /**/ to ## for cpp paste in sh locore
so we can drop -traditional-cpp
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.4 2008/06/26 05:42:12 ray Exp $	*/
d92 1
d129 1
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.3 2007/05/26 15:28:19 miod Exp $	*/
d31 3
a33 3
#define	MOV(x, r)	mov.l .L_/**/x, r; mov.l @@r, r
#define	REG_SYMBOL(x)	.L_/**/x:	.long	_C_LABEL(__sh_/**/x)
#define	FUNC_SYMBOL(x)	.L_/**/x:	.long	_C_LABEL(__sh_/**/x)
d35 3
a37 3
#define	MOV(x, r)	mov.l .L_/**/x, r
#define	REG_SYMBOL(x)	.L_/**/x:	.long	SH3_/**/x
#define	FUNC_SYMBOL(x)	.L_/**/x:	.long	_C_LABEL(sh3_/**/x)
d39 3
a41 3
#define	MOV(x, r)	mov.l .L_/**/x, r
#define	REG_SYMBOL(x)	.L_/**/x:	.long	SH4_/**/x
#define	FUNC_SYMBOL(x)	.L_/**/x:	.long	_C_LABEL(sh4_/**/x)
@


1.3
log
@tyops
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.2 2006/11/05 18:59:58 miod Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Use TF_SPC instead of hardcoding its value.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.1.1.1 2006/10/06 21:02:55 miod Exp $	*/
d53 1
a53 1
 * BANK1 r6 conatins current frame pointer. (per process)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d101 1
a101 1
	add	#-8,	r14	/* skip tf_ubc, tf_expevt */		;\
d130 1
a130 1
	add	#8,	r14	/* skip tf_expevt, tf_ubc */		;\
@


1.1.1.1
log
@Preliminary bits for SuperH-based ports, based on NetBSD/sh3 codebase with
minor changes.
@
text
@@
