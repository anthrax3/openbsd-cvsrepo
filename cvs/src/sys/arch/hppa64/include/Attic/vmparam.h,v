head	1.16;
access;
symbols
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2016.05.11.21.52.50;	author deraadt;	state dead;
branches;
next	1.15;
commitid	VpgRpYXqYSJy4P7J;

1.15
date	2015.11.01.20.09.59;	author miod;	state Exp;
branches;
next	1.14;
commitid	sHllVPiKPJBfwmTJ;

1.14
date	2015.02.10.10.02.55;	author tedu;	state Exp;
branches;
next	1.13;
commitid	X8GpdpDRNqUOBsMT;

1.13
date	2014.10.09.04.01.27;	author tedu;	state Exp;
branches;
next	1.12;
commitid	wAdRwhtUH36R0JxT;

1.12
date	2014.10.09.03.59.59;	author tedu;	state Exp;
branches;
next	1.11;
commitid	I0KLtD9aVxAdm6aW;

1.11
date	2014.05.31.20.11.11;	author miod;	state Exp;
branches;
next	1.10;
commitid	0tTWseP2VVvnz1EB;

1.10
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.01.24.05.21.19;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.14.14.29.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.30.22.25.21;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.29.21.49.20;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.04.17.21.24;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.13.04.03.46;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.01.10.40.48;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: vmparam.h,v 1.15 2015/11/01 20:09:59 miod Exp $	*/

/* 
 * Copyright (c) 1988-1994, The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 *
 * 	Utah $Hdr: vmparam.h 1.16 94/12/16$
 */

#ifndef _MACHINE_VMPARAM_H_
#define _MACHINE_VMPARAM_H_

/*
 * Machine dependent constants for HP PA
 */
#define	USRSTACK	0x68FF3000	/* start (bottom) of user stack */
#define	SYSCALLGATE	0xC0000000	/* syscall gateway page */

/*
 * Virtual memory related constants, all in bytes
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(64*1024*1024UL)	/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(16*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(1*1024*1024*1024UL)	/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		(32*1024*1024UL)	/* max stack size */
#endif

#define	STACKGAP_RANDOM	256*1024

#ifndef USRIOSIZE
#define	USRIOSIZE	((2*HPPA_PGALIAS)/PAGE_SIZE)	/* 8mb */
#endif

/*
 * PTEs for system V style shared memory.
 * This is basically slop for kmempt which we actually allocate (malloc) from.
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	8192	/* 32mb */
#endif

/* user/kernel map constants */
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define	VM_MAXUSER_ADDRESS	((vaddr_t)0x20000000000UL)
#define	VM_MAX_ADDRESS		VM_MAXUSER_ADDRESS
#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t)0x1000000000UL)
#define	VM_MAX_KERNEL_ADDRESS	((vaddr_t)0x10f0000000UL)

/* use a small range for PIE to minimize mmap pressure */
#define	VM_PIE_MIN_ADDR		PAGE_SIZE
#define	VM_PIE_MAX_ADDR		0x40000UL

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

#define	VM_PHYSSEG_MAX		1	/* this many physmem segments */
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_RANDOM

#define	VM_PHYSSEG_NOADD	/* XXX until uvm code is fixed */

#endif	/* _MACHINE_VMPARAM_H_ */
@


1.15
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2015/02/10 10:02:55 tedu Exp $	*/
@


1.14
log
@increase min address to page size for all remaining min == 0 systems.
not necessary, but consistent with other platforms. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2014/10/09 04:01:27 tedu Exp $	*/
d32 2
a33 7
/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the bottm (start) of the user stack.
 */
#define	USRTEXT		PAGE_SIZE		/* Start of user .text */
#define	USRSTACK	0x68FF3000		/* Start of user stack */
#define	SYSCALLGATE	0xC0000000		/* syscall gateway page */
@


1.13
log
@revert unintentional commit unrelated to LKM
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2014/10/09 03:59:59 tedu Exp $	*/
d77 1
a77 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.12
log
@remove LKM devices
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2014/05/31 20:11:11 miod Exp $	*/
d77 1
a77 1
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
@


1.11
log
@Reduce MAXSSIZ to 32MB to match all other platforms; noticed by tobiasu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2014/01/30 18:16:41 miod Exp $	*/
d77 1
a77 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.10
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2014/01/24 05:21:19 miod Exp $	*/
d59 1
a59 1
#define	MAXSSIZ		(128*1024*1024UL)	/* max stack size */
@


1.9
log
@Do not protect struct vm_page_md with defined(_KERNEL), for userland uvm
grovellers need to know it to be able to get the right size for struct
vm_page.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2014/01/23 22:06:29 miod Exp $	*/
a93 18

#if !defined(_LOCORE)

#include <sys/lock.h>

struct pv_entry;
struct vm_page_md {
	struct simplelock pvh_lock;	/* locks every pv on this list */
	struct pv_entry	*pvh_list;	/* head of list (locked by pvh_lock) */
	u_int		pvh_attrs;	/* to preserve ref/mod */
};

#define	VM_MDPAGE_INIT(pg) do {				\
	simple_lock_init(&(pg)->mdpage.pvh_lock);	\
	(pg)->mdpage.pvh_list = NULL;			\
	(pg)->mdpage.pvh_attrs = 0;			\
} while (0)
#endif
@


1.8
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2011/11/14 14:29:57 deraadt Exp $	*/
d95 1
a95 1
#if defined(_KERNEL) && !defined(_LOCORE)
@


1.7
log
@merge various differences between hppa and hppa64
ok jsing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2011/05/30 22:25:21 oga Exp $	*/
a98 1
#define __HAVE_VM_PAGE_MD
@


1.6
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2010/12/15 05:30:19 tedu Exp $	*/
d44 1
a44 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d50 1
a50 1
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
d56 1
a56 1
#define	DFLSSIZ		(512*1024)		/* initial stack size limit */
d59 1
a59 1
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
d65 1
a65 1
#define	USRIOSIZE	((2*HPPA_PGALIAS)/PAGE_SIZE)	/* 2mb */
d76 3
a78 2
#define	VM_MIN_ADDRESS		(0UL)
#define	VM_MAXUSER_ADDRESS	(0x20000000000UL)
d80 6
a85 2
#define	VM_MIN_KERNEL_ADDRESS	(0x1000000000UL)
#define	VM_MAX_KERNEL_ADDRESS	(0x10f0000000UL)
a99 1

@


1.5
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2010/06/29 21:49:20 jsing Exp $	*/
a88 4

#define	VM_NFREELIST		2
#define	VM_FREELIST_DEFAULT	0
#define	VM_FREELIST_ARCH	1
@


1.4
log
@Add missing include.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2006/06/04 17:21:24 miod Exp $	*/
d51 3
@


1.3
log
@Shrink VM_PHYSSEG_MAX to 1 on platforms where physical memory is contiguous
and there is only one call to uvm_page_physload().
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 2005/04/13 04:03:46 mickey Exp $	*/
d92 3
d96 1
@


1.2
log
@free STACKGAP_RANDOM commit
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2005/04/01 10:40:48 mickey Exp $	*/
d82 2
a83 2
#define	VM_PHYSSEG_MAX	8	/* this many physmem segments */
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BIGFIRST
@


1.1
log
@small batch early bottling hppa64 port
matured in mighty ukrainian oak for 23 months
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 2
@

