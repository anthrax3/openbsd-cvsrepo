head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.18
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.10
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.24
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.22
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.05.11.21.52.50;	author deraadt;	state dead;
branches;
next	1.2;
commitid	VpgRpYXqYSJy4P7J;

1.2
date	2011.08.04.16.10.23;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.01.10.40.47;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: in_cksum.c,v 1.2 2011/08/04 16:10:23 kettenis Exp $	*/

/*
 * Copyright (c) 2000 Michael Shalayeff
 * All rights reserved.
 *
 * based on a sparc version of Zubin Dittia.
 * Copyright (c) 1995 Zubin Dittia.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <netinet/in.h>

/*
 * Checksum routine for Internet Protocol family headers.
 *
 * This routine is very heavily used in the network
 * code and should be modified for each CPU to be as fast as possible.
 *
 * HPPA version.
 */

/* TODO optimize */

#define ADD32	asm volatile(	"ldw 0x00(%1), %%r19! ldw 0x04(%1), %%r20\n\t" \
				"add  %0, %%r19, %0 ! addc  %0, %%r20, %0\n\t" \
				"ldw 0x08(%1), %%r19! ldw 0x0c(%1), %%r20\n\t" \
				"addc %0, %%r19, %0 ! addc  %0, %%r20, %0\n\t" \
				"ldw 0x10(%1), %%r19! ldw 0x14(%1), %%r20\n\t" \
				"addc %0, %%r19, %0 ! addc  %0, %%r20, %0\n\t" \
				"ldw 0x18(%1), %%r19! ldw 0x1c(%1), %%r20\n\t" \
				"addc %0, %%r19, %0 ! addc  %0, %%r20, %0\n\t" \
				"ldo 0x20(%1), %1   ! addc  %0, %%r0 , %0" \
				: "+r" (sum), "+r" (w) :: "r20", "r19")
#define ADD16	asm volatile(	"ldw 0x00(%1), %%r19! ldw 0x04(%1), %%r20\n\t" \
				"add   %0, %%r19, %0! addc  %0, %%r20, %0\n\t" \
				"ldw 0x08(%1), %%r19! ldw 0x0c(%1), %%r20\n\t" \
				"addc  %0, %%r19, %0! addc  %0, %%r20, %0\n\t" \
				"ldo 0x10(%1), %1   ! addc  %0, %%r0 , %0" \
				: "+r" (sum), "+r" (w) :: "r20", "r19")

#define ADDCARRY	{if (sum > 0xffff) sum -= 0xffff;}
#define REDUCE		{sum = (sum & 0xffff) + (sum >> 16); ADDCARRY}
#define ROL		asm volatile ("shd %0, %0, 8, %0" : "+r" (sum))
#define ADDBYTE		{ROL; sum += *w++; bins++; mlen--;}
#define ADDSHORT	{sum += *(u_short *)w; w += 2; mlen -= 2;}
#define ADDWORD	asm volatile(	"ldwm 4(%1), %%r19! add %0, %%r19, %0\n\t" \
				"ldo -4(%2), %2   ! addc    %0, 0, %0" \
				: "+r" (sum), "+r" (w), "+r" (mlen) :: "r19")

int
in_cksum(m, len)
	register struct mbuf *m;
	register int len;
{
	register u_int sum = 0;
	register u_int bins = 0;

	for (; m && len; m = m->m_next) {
		register int mlen = m->m_len;
		register u_char *w;

		if (!mlen)
			continue;
		if (len < mlen)
			mlen = len;
		len -= mlen;
		w = mtod(m, u_char *);

		if (mlen > 16) {
			/*
			 * If we are aligned on a doubleword boundary
			 * do 32 bit bundled operations
			 */
			if ((7 & (u_long)w) != 0) {
				if ((1 & (u_long)w) != 0)
					ADDBYTE;
				if ((2 & (u_long)w) != 0)
					ADDSHORT;
				if ((4 & (u_long)w) != 0)
					ADDWORD;
			}

			while ((mlen -= 32) >= 0)
				ADD32;

			mlen += 32;
			if (mlen >= 16) {
				ADD16;
				mlen -= 16;
			}
		}

		while (mlen > 0)
			ADDBYTE;
	}
	if (bins & 1)
		ROL;
	REDUCE;

	return (0xffff ^ sum);
}
@


1.2
log
@Make this compile with gcc4.  Same fix as for hppa.
@
text
@d1 1
a1 1
/*	$OpenBSD: in_cksum.c,v 1.1 2005/04/01 10:40:47 mickey Exp $	*/
@


1.1
log
@small batch early bottling hppa64 port
matured in mighty ukrainian oak for 23 months
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 1
a69 1
#define ADDSHORT	{sum += *((u_short *)w)++; mlen -= 2;}
@

